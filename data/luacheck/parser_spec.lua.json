{
  "_filename": "parser_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/luacheck/spec/parser_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 3,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 13,
    "label": "has",
    "to": 17
  }, {
    "from": 13,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 17
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 17
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 17
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 17
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 17
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 37,
    "label": "has",
    "to": 41
  }, {
    "from": 37,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 43,
    "label": "has",
    "to": 46
  }, {
    "from": 43,
    "label": "has",
    "to": 47
  }, {
    "from": 43,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 49,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 54,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 58,
    "label": "has",
    "to": 61
  }, {
    "from": 58,
    "label": "has",
    "to": 62
  }, {
    "from": 58,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 64,
    "label": "has",
    "to": 67
  }, {
    "from": 64,
    "label": "has",
    "to": 68
  }, {
    "from": 64,
    "label": "has",
    "to": 69
  }, {
    "from": 64,
    "label": "has",
    "to": 70
  }, {
    "from": 64,
    "label": "has",
    "to": 71
  }, {
    "from": 64,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 73,
    "label": "has",
    "to": 76
  }, {
    "from": 73,
    "label": "has",
    "to": 77
  }, {
    "from": 73,
    "label": "has",
    "to": 78
  }, {
    "from": 73,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 80,
    "label": "has",
    "to": 82
  }, {
    "from": 80,
    "label": "has",
    "to": 83
  }, {
    "from": 80,
    "label": "has",
    "to": 84
  }, {
    "from": 80,
    "label": "has",
    "to": 85
  }, {
    "from": 80,
    "label": "has",
    "to": 86
  }, {
    "from": 80,
    "label": "has",
    "to": 87
  }, {
    "from": 80,
    "label": "has",
    "to": 88
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 89,
    "label": "has",
    "to": 92
  }, {
    "from": 89,
    "label": "has",
    "to": 93
  }, {
    "from": 89,
    "label": "has",
    "to": 94
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 95,
    "label": "has",
    "to": 97
  }, {
    "from": 95,
    "label": "has",
    "to": 98
  }, {
    "from": 95,
    "label": "has",
    "to": 99
  }, {
    "from": 95,
    "label": "has",
    "to": 100
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 101,
    "label": "has",
    "to": 103
  }, {
    "from": 101,
    "label": "has",
    "to": 104
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 81
  }, {
    "from": 106,
    "label": "has",
    "to": 82
  }, {
    "from": 106,
    "label": "has",
    "to": 83
  }, {
    "from": 106,
    "label": "has",
    "to": 84
  }, {
    "from": 106,
    "label": "has",
    "to": 85
  }, {
    "from": 106,
    "label": "has",
    "to": 86
  }, {
    "from": 106,
    "label": "has",
    "to": 87
  }, {
    "from": 105,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 90
  }, {
    "from": 107,
    "label": "has",
    "to": 91
  }, {
    "from": 107,
    "label": "has",
    "to": 92
  }, {
    "from": 107,
    "label": "has",
    "to": 93
  }, {
    "from": 105,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 96
  }, {
    "from": 108,
    "label": "has",
    "to": 97
  }, {
    "from": 108,
    "label": "has",
    "to": 98
  }, {
    "from": 108,
    "label": "has",
    "to": 99
  }, {
    "from": 105,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 102
  }, {
    "from": 109,
    "label": "has",
    "to": 103
  }, {
    "from": 105,
    "label": "has",
    "to": 110
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 111,
    "label": "has",
    "to": 114
  }, {
    "from": 111,
    "label": "has",
    "to": 115
  }, {
    "from": 111,
    "label": "has",
    "to": 116
  }, {
    "from": 111,
    "label": "has",
    "to": 117
  }, {
    "from": 111,
    "label": "has",
    "to": 118
  }, {
    "from": 111,
    "label": "has",
    "to": 119
  }, {
    "from": 111,
    "label": "has",
    "to": 120
  }, {
    "from": 111,
    "label": "has",
    "to": 121
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 122,
    "label": "has",
    "to": 124
  }, {
    "from": 122,
    "label": "has",
    "to": 125
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 126,
    "label": "has",
    "to": 128
  }, {
    "from": 126,
    "label": "has",
    "to": 129
  }, {
    "from": 126,
    "label": "has",
    "to": 130
  }, {
    "from": 126,
    "label": "has",
    "to": 131
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 112
  }, {
    "from": 133,
    "label": "has",
    "to": 113
  }, {
    "from": 133,
    "label": "has",
    "to": 114
  }, {
    "from": 133,
    "label": "has",
    "to": 115
  }, {
    "from": 133,
    "label": "has",
    "to": 116
  }, {
    "from": 133,
    "label": "has",
    "to": 117
  }, {
    "from": 133,
    "label": "has",
    "to": 118
  }, {
    "from": 133,
    "label": "has",
    "to": 119
  }, {
    "from": 133,
    "label": "has",
    "to": 120
  }, {
    "from": 132,
    "label": "has",
    "to": 134
  }, {
    "from": 134,
    "label": "has",
    "to": 123
  }, {
    "from": 134,
    "label": "has",
    "to": 124
  }, {
    "from": 132,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 127
  }, {
    "from": 135,
    "label": "has",
    "to": 128
  }, {
    "from": 135,
    "label": "has",
    "to": 129
  }, {
    "from": 135,
    "label": "has",
    "to": 130
  }, {
    "from": 132,
    "label": "has",
    "to": 136
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 137,
    "label": "has",
    "to": 139
  }, {
    "from": 137,
    "label": "has",
    "to": 140
  }, {
    "from": 137,
    "label": "has",
    "to": 141
  }, {
    "from": 137,
    "label": "has",
    "to": 142
  }, {
    "from": 137,
    "label": "has",
    "to": 143
  }, {
    "from": 137,
    "label": "has",
    "to": 144
  }, {
    "from": 137,
    "label": "has",
    "to": 145
  }, {
    "from": 137,
    "label": "has",
    "to": 146
  }, {
    "from": 137,
    "label": "has",
    "to": 147
  }, {
    "from": 137,
    "label": "has",
    "to": 148
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 149,
    "label": "has",
    "to": 151
  }, {
    "from": 149,
    "label": "has",
    "to": 152
  }, {
    "from": 149,
    "label": "has",
    "to": 153
  }, {
    "from": 149,
    "label": "has",
    "to": 154
  }, {
    "from": 149,
    "label": "has",
    "to": 155
  }, {
    "from": 149,
    "label": "has",
    "to": 156
  }, {
    "from": 149,
    "label": "has",
    "to": 157
  }, {
    "from": 149,
    "label": "has",
    "to": 158
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 159,
    "label": "has",
    "to": 161
  }, {
    "from": 159,
    "label": "has",
    "to": 162
  }, {
    "from": 159,
    "label": "has",
    "to": 163
  }, {
    "from": 159,
    "label": "has",
    "to": 164
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 165,
    "label": "has",
    "to": 167
  }, {
    "from": 165,
    "label": "has",
    "to": 168
  }, {
    "from": 165,
    "label": "has",
    "to": 169
  }, {
    "from": 170,
    "label": "has",
    "to": 171
  }, {
    "from": 171,
    "label": "has",
    "to": 138
  }, {
    "from": 171,
    "label": "has",
    "to": 139
  }, {
    "from": 171,
    "label": "has",
    "to": 140
  }, {
    "from": 171,
    "label": "has",
    "to": 141
  }, {
    "from": 171,
    "label": "has",
    "to": 142
  }, {
    "from": 171,
    "label": "has",
    "to": 143
  }, {
    "from": 171,
    "label": "has",
    "to": 144
  }, {
    "from": 171,
    "label": "has",
    "to": 145
  }, {
    "from": 171,
    "label": "has",
    "to": 146
  }, {
    "from": 171,
    "label": "has",
    "to": 147
  }, {
    "from": 170,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 150
  }, {
    "from": 172,
    "label": "has",
    "to": 151
  }, {
    "from": 172,
    "label": "has",
    "to": 152
  }, {
    "from": 172,
    "label": "has",
    "to": 153
  }, {
    "from": 172,
    "label": "has",
    "to": 154
  }, {
    "from": 172,
    "label": "has",
    "to": 155
  }, {
    "from": 172,
    "label": "has",
    "to": 156
  }, {
    "from": 172,
    "label": "has",
    "to": 157
  }, {
    "from": 170,
    "label": "has",
    "to": 173
  }, {
    "from": 173,
    "label": "has",
    "to": 160
  }, {
    "from": 173,
    "label": "has",
    "to": 161
  }, {
    "from": 173,
    "label": "has",
    "to": 162
  }, {
    "from": 173,
    "label": "has",
    "to": 163
  }, {
    "from": 170,
    "label": "has",
    "to": 174
  }, {
    "from": 174,
    "label": "has",
    "to": 166
  }, {
    "from": 174,
    "label": "has",
    "to": 167
  }, {
    "from": 174,
    "label": "has",
    "to": 168
  }, {
    "from": 170,
    "label": "has",
    "to": 175
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 176,
    "label": "has",
    "to": 178
  }, {
    "from": 176,
    "label": "has",
    "to": 179
  }, {
    "from": 176,
    "label": "has",
    "to": 180
  }, {
    "from": 176,
    "label": "has",
    "to": 181
  }, {
    "from": 176,
    "label": "has",
    "to": 182
  }, {
    "from": 176,
    "label": "has",
    "to": 183
  }, {
    "from": 176,
    "label": "has",
    "to": 184
  }, {
    "from": 185,
    "label": "has",
    "to": 186
  }, {
    "from": 185,
    "label": "has",
    "to": 187
  }, {
    "from": 185,
    "label": "has",
    "to": 188
  }, {
    "from": 185,
    "label": "has",
    "to": 189
  }, {
    "from": 185,
    "label": "has",
    "to": 190
  }, {
    "from": 185,
    "label": "has",
    "to": 191
  }, {
    "from": 185,
    "label": "has",
    "to": 192
  }, {
    "from": 185,
    "label": "has",
    "to": 193
  }, {
    "from": 194,
    "label": "has",
    "to": 195
  }, {
    "from": 194,
    "label": "has",
    "to": 196
  }, {
    "from": 194,
    "label": "has",
    "to": 197
  }, {
    "from": 194,
    "label": "has",
    "to": 198
  }, {
    "from": 199,
    "label": "has",
    "to": 200
  }, {
    "from": 200,
    "label": "has",
    "to": 177
  }, {
    "from": 200,
    "label": "has",
    "to": 178
  }, {
    "from": 200,
    "label": "has",
    "to": 179
  }, {
    "from": 200,
    "label": "has",
    "to": 180
  }, {
    "from": 200,
    "label": "has",
    "to": 181
  }, {
    "from": 200,
    "label": "has",
    "to": 182
  }, {
    "from": 200,
    "label": "has",
    "to": 183
  }, {
    "from": 199,
    "label": "has",
    "to": 201
  }, {
    "from": 201,
    "label": "has",
    "to": 186
  }, {
    "from": 201,
    "label": "has",
    "to": 187
  }, {
    "from": 201,
    "label": "has",
    "to": 188
  }, {
    "from": 201,
    "label": "has",
    "to": 189
  }, {
    "from": 201,
    "label": "has",
    "to": 190
  }, {
    "from": 201,
    "label": "has",
    "to": 191
  }, {
    "from": 201,
    "label": "has",
    "to": 192
  }, {
    "from": 199,
    "label": "has",
    "to": 202
  }, {
    "from": 202,
    "label": "has",
    "to": 195
  }, {
    "from": 202,
    "label": "has",
    "to": 196
  }, {
    "from": 202,
    "label": "has",
    "to": 197
  }, {
    "from": 199,
    "label": "has",
    "to": 203
  }, {
    "from": 204,
    "label": "has",
    "to": 205
  }, {
    "from": 204,
    "label": "has",
    "to": 206
  }, {
    "from": 204,
    "label": "has",
    "to": 207
  }, {
    "from": 204,
    "label": "has",
    "to": 208
  }, {
    "from": 204,
    "label": "has",
    "to": 209
  }, {
    "from": 204,
    "label": "has",
    "to": 210
  }, {
    "from": 204,
    "label": "has",
    "to": 211
  }, {
    "from": 204,
    "label": "has",
    "to": 212
  }, {
    "from": 204,
    "label": "has",
    "to": 213
  }, {
    "from": 204,
    "label": "has",
    "to": 214
  }, {
    "from": 215,
    "label": "has",
    "to": 216
  }, {
    "from": 215,
    "label": "has",
    "to": 217
  }, {
    "from": 215,
    "label": "has",
    "to": 218
  }, {
    "from": 215,
    "label": "has",
    "to": 219
  }, {
    "from": 215,
    "label": "has",
    "to": 220
  }, {
    "from": 215,
    "label": "has",
    "to": 221
  }, {
    "from": 215,
    "label": "has",
    "to": 222
  }, {
    "from": 215,
    "label": "has",
    "to": 223
  }, {
    "from": 224,
    "label": "has",
    "to": 225
  }, {
    "from": 225,
    "label": "has",
    "to": 205
  }, {
    "from": 225,
    "label": "has",
    "to": 206
  }, {
    "from": 225,
    "label": "has",
    "to": 207
  }, {
    "from": 225,
    "label": "has",
    "to": 208
  }, {
    "from": 225,
    "label": "has",
    "to": 209
  }, {
    "from": 225,
    "label": "has",
    "to": 210
  }, {
    "from": 225,
    "label": "has",
    "to": 211
  }, {
    "from": 225,
    "label": "has",
    "to": 212
  }, {
    "from": 225,
    "label": "has",
    "to": 213
  }, {
    "from": 224,
    "label": "has",
    "to": 226
  }, {
    "from": 226,
    "label": "has",
    "to": 216
  }, {
    "from": 226,
    "label": "has",
    "to": 217
  }, {
    "from": 226,
    "label": "has",
    "to": 218
  }, {
    "from": 226,
    "label": "has",
    "to": 219
  }, {
    "from": 226,
    "label": "has",
    "to": 220
  }, {
    "from": 226,
    "label": "has",
    "to": 221
  }, {
    "from": 226,
    "label": "has",
    "to": 222
  }, {
    "from": 224,
    "label": "has",
    "to": 227
  }, {
    "from": 228,
    "label": "has",
    "to": 229
  }, {
    "from": 228,
    "label": "has",
    "to": 230
  }, {
    "from": 228,
    "label": "has",
    "to": 231
  }, {
    "from": 228,
    "label": "has",
    "to": 232
  }, {
    "from": 228,
    "label": "has",
    "to": 233
  }, {
    "from": 228,
    "label": "has",
    "to": 234
  }, {
    "from": 228,
    "label": "has",
    "to": 235
  }, {
    "from": 228,
    "label": "has",
    "to": 236
  }, {
    "from": 228,
    "label": "has",
    "to": 237
  }, {
    "from": 228,
    "label": "has",
    "to": 238
  }, {
    "from": 228,
    "label": "has",
    "to": 239
  }, {
    "from": 228,
    "label": "has",
    "to": 240
  }, {
    "from": 228,
    "label": "has",
    "to": 241
  }, {
    "from": 228,
    "label": "has",
    "to": 242
  }, {
    "from": 228,
    "label": "has",
    "to": 243
  }, {
    "from": 228,
    "label": "has",
    "to": 244
  }, {
    "from": 245,
    "label": "has",
    "to": 246
  }, {
    "from": 245,
    "label": "has",
    "to": 247
  }, {
    "from": 245,
    "label": "has",
    "to": 248
  }, {
    "from": 245,
    "label": "has",
    "to": 249
  }, {
    "from": 245,
    "label": "has",
    "to": 250
  }, {
    "from": 245,
    "label": "has",
    "to": 251
  }, {
    "from": 245,
    "label": "has",
    "to": 252
  }, {
    "from": 245,
    "label": "has",
    "to": 253
  }, {
    "from": 245,
    "label": "has",
    "to": 254
  }, {
    "from": 245,
    "label": "has",
    "to": 255
  }, {
    "from": 245,
    "label": "has",
    "to": 256
  }, {
    "from": 245,
    "label": "has",
    "to": 257
  }, {
    "from": 245,
    "label": "has",
    "to": 258
  }, {
    "from": 259,
    "label": "has",
    "to": 260
  }, {
    "from": 260,
    "label": "has",
    "to": 229
  }, {
    "from": 260,
    "label": "has",
    "to": 230
  }, {
    "from": 260,
    "label": "has",
    "to": 231
  }, {
    "from": 260,
    "label": "has",
    "to": 232
  }, {
    "from": 260,
    "label": "has",
    "to": 233
  }, {
    "from": 260,
    "label": "has",
    "to": 234
  }, {
    "from": 260,
    "label": "has",
    "to": 235
  }, {
    "from": 260,
    "label": "has",
    "to": 236
  }, {
    "from": 260,
    "label": "has",
    "to": 237
  }, {
    "from": 260,
    "label": "has",
    "to": 238
  }, {
    "from": 260,
    "label": "has",
    "to": 239
  }, {
    "from": 260,
    "label": "has",
    "to": 240
  }, {
    "from": 260,
    "label": "has",
    "to": 241
  }, {
    "from": 260,
    "label": "has",
    "to": 242
  }, {
    "from": 260,
    "label": "has",
    "to": 243
  }, {
    "from": 259,
    "label": "has",
    "to": 261
  }, {
    "from": 261,
    "label": "has",
    "to": 246
  }, {
    "from": 261,
    "label": "has",
    "to": 247
  }, {
    "from": 261,
    "label": "has",
    "to": 248
  }, {
    "from": 261,
    "label": "has",
    "to": 249
  }, {
    "from": 261,
    "label": "has",
    "to": 250
  }, {
    "from": 261,
    "label": "has",
    "to": 251
  }, {
    "from": 261,
    "label": "has",
    "to": 252
  }, {
    "from": 261,
    "label": "has",
    "to": 253
  }, {
    "from": 261,
    "label": "has",
    "to": 254
  }, {
    "from": 261,
    "label": "has",
    "to": 255
  }, {
    "from": 261,
    "label": "has",
    "to": 256
  }, {
    "from": 261,
    "label": "has",
    "to": 257
  }, {
    "from": 259,
    "label": "has",
    "to": 262
  }, {
    "from": 263,
    "label": "has",
    "to": 264
  }, {
    "from": 263,
    "label": "has",
    "to": 265
  }, {
    "from": 263,
    "label": "has",
    "to": 266
  }, {
    "from": 263,
    "label": "has",
    "to": 267
  }, {
    "from": 263,
    "label": "has",
    "to": 268
  }, {
    "from": 263,
    "label": "has",
    "to": 269
  }, {
    "from": 263,
    "label": "has",
    "to": 270
  }, {
    "from": 263,
    "label": "has",
    "to": 271
  }, {
    "from": 263,
    "label": "has",
    "to": 272
  }, {
    "from": 273,
    "label": "has",
    "to": 274
  }, {
    "from": 273,
    "label": "has",
    "to": 275
  }, {
    "from": 273,
    "label": "has",
    "to": 276
  }, {
    "from": 273,
    "label": "has",
    "to": 277
  }, {
    "from": 273,
    "label": "has",
    "to": 278
  }, {
    "from": 273,
    "label": "has",
    "to": 279
  }, {
    "from": 273,
    "label": "has",
    "to": 280
  }, {
    "from": 273,
    "label": "has",
    "to": 281
  }, {
    "from": 273,
    "label": "has",
    "to": 282
  }, {
    "from": 273,
    "label": "has",
    "to": 283
  }, {
    "from": 273,
    "label": "has",
    "to": 284
  }, {
    "from": 273,
    "label": "has",
    "to": 285
  }, {
    "from": 273,
    "label": "has",
    "to": 286
  }, {
    "from": 273,
    "label": "has",
    "to": 287
  }, {
    "from": 273,
    "label": "has",
    "to": 288
  }, {
    "from": 289,
    "label": "has",
    "to": 290
  }, {
    "from": 289,
    "label": "has",
    "to": 291
  }, {
    "from": 289,
    "label": "has",
    "to": 292
  }, {
    "from": 289,
    "label": "has",
    "to": 293
  }, {
    "from": 289,
    "label": "has",
    "to": 294
  }, {
    "from": 295,
    "label": "has",
    "to": 296
  }, {
    "from": 295,
    "label": "has",
    "to": 297
  }, {
    "from": 295,
    "label": "has",
    "to": 298
  }, {
    "from": 295,
    "label": "has",
    "to": 299
  }, {
    "from": 295,
    "label": "has",
    "to": 300
  }, {
    "from": 301,
    "label": "has",
    "to": 302
  }, {
    "from": 301,
    "label": "has",
    "to": 303
  }, {
    "from": 301,
    "label": "has",
    "to": 304
  }, {
    "from": 301,
    "label": "has",
    "to": 305
  }, {
    "from": 306,
    "label": "has",
    "to": 307
  }, {
    "from": 306,
    "label": "has",
    "to": 308
  }, {
    "from": 306,
    "label": "has",
    "to": 309
  }, {
    "from": 306,
    "label": "has",
    "to": 310
  }, {
    "from": 306,
    "label": "has",
    "to": 311
  }, {
    "from": 306,
    "label": "has",
    "to": 312
  }, {
    "from": 313,
    "label": "has",
    "to": 314
  }, {
    "from": 314,
    "label": "has",
    "to": 264
  }, {
    "from": 314,
    "label": "has",
    "to": 265
  }, {
    "from": 314,
    "label": "has",
    "to": 266
  }, {
    "from": 314,
    "label": "has",
    "to": 267
  }, {
    "from": 314,
    "label": "has",
    "to": 268
  }, {
    "from": 314,
    "label": "has",
    "to": 269
  }, {
    "from": 314,
    "label": "has",
    "to": 270
  }, {
    "from": 314,
    "label": "has",
    "to": 271
  }, {
    "from": 313,
    "label": "has",
    "to": 315
  }, {
    "from": 315,
    "label": "has",
    "to": 274
  }, {
    "from": 315,
    "label": "has",
    "to": 275
  }, {
    "from": 315,
    "label": "has",
    "to": 276
  }, {
    "from": 315,
    "label": "has",
    "to": 277
  }, {
    "from": 315,
    "label": "has",
    "to": 278
  }, {
    "from": 315,
    "label": "has",
    "to": 279
  }, {
    "from": 315,
    "label": "has",
    "to": 280
  }, {
    "from": 315,
    "label": "has",
    "to": 281
  }, {
    "from": 315,
    "label": "has",
    "to": 282
  }, {
    "from": 315,
    "label": "has",
    "to": 283
  }, {
    "from": 315,
    "label": "has",
    "to": 284
  }, {
    "from": 315,
    "label": "has",
    "to": 285
  }, {
    "from": 315,
    "label": "has",
    "to": 286
  }, {
    "from": 315,
    "label": "has",
    "to": 287
  }, {
    "from": 313,
    "label": "has",
    "to": 316
  }, {
    "from": 316,
    "label": "has",
    "to": 290
  }, {
    "from": 316,
    "label": "has",
    "to": 291
  }, {
    "from": 316,
    "label": "has",
    "to": 292
  }, {
    "from": 316,
    "label": "has",
    "to": 293
  }, {
    "from": 313,
    "label": "has",
    "to": 317
  }, {
    "from": 317,
    "label": "has",
    "to": 296
  }, {
    "from": 317,
    "label": "has",
    "to": 297
  }, {
    "from": 317,
    "label": "has",
    "to": 298
  }, {
    "from": 317,
    "label": "has",
    "to": 299
  }, {
    "from": 313,
    "label": "has",
    "to": 318
  }, {
    "from": 318,
    "label": "has",
    "to": 302
  }, {
    "from": 318,
    "label": "has",
    "to": 303
  }, {
    "from": 318,
    "label": "has",
    "to": 304
  }, {
    "from": 313,
    "label": "has",
    "to": 319
  }, {
    "from": 319,
    "label": "has",
    "to": 307
  }, {
    "from": 319,
    "label": "has",
    "to": 308
  }, {
    "from": 319,
    "label": "has",
    "to": 309
  }, {
    "from": 319,
    "label": "has",
    "to": 310
  }, {
    "from": 319,
    "label": "has",
    "to": 311
  }, {
    "from": 313,
    "label": "has",
    "to": 320
  }, {
    "from": 321,
    "label": "has",
    "to": 322
  }, {
    "from": 321,
    "label": "has",
    "to": 323
  }, {
    "from": 324,
    "label": "has",
    "to": 325
  }, {
    "from": 324,
    "label": "has",
    "to": 326
  }, {
    "from": 324,
    "label": "has",
    "to": 327
  }, {
    "from": 324,
    "label": "has",
    "to": 328
  }, {
    "from": 324,
    "label": "has",
    "to": 329
  }, {
    "from": 324,
    "label": "has",
    "to": 330
  }, {
    "from": 324,
    "label": "has",
    "to": 331
  }, {
    "from": 324,
    "label": "has",
    "to": 332
  }, {
    "from": 333,
    "label": "has",
    "to": 334
  }, {
    "from": 333,
    "label": "has",
    "to": 335
  }, {
    "from": 336,
    "label": "has",
    "to": 337
  }, {
    "from": 337,
    "label": "has",
    "to": 322
  }, {
    "from": 336,
    "label": "has",
    "to": 338
  }, {
    "from": 338,
    "label": "has",
    "to": 325
  }, {
    "from": 338,
    "label": "has",
    "to": 326
  }, {
    "from": 338,
    "label": "has",
    "to": 327
  }, {
    "from": 338,
    "label": "has",
    "to": 328
  }, {
    "from": 338,
    "label": "has",
    "to": 329
  }, {
    "from": 338,
    "label": "has",
    "to": 330
  }, {
    "from": 338,
    "label": "has",
    "to": 331
  }, {
    "from": 336,
    "label": "has",
    "to": 339
  }, {
    "from": 339,
    "label": "has",
    "to": 334
  }, {
    "from": 336,
    "label": "has",
    "to": 340
  }, {
    "from": 341,
    "label": "has",
    "to": 342
  }, {
    "from": 341,
    "label": "has",
    "to": 343
  }, {
    "from": 344,
    "label": "has",
    "to": 345
  }, {
    "from": 344,
    "label": "has",
    "to": 346
  }, {
    "from": 347,
    "label": "has",
    "to": 348
  }, {
    "from": 347,
    "label": "has",
    "to": 349
  }, {
    "from": 350,
    "label": "has",
    "to": 351
  }, {
    "from": 350,
    "label": "has",
    "to": 352
  }, {
    "from": 353,
    "label": "has",
    "to": 354
  }, {
    "from": 353,
    "label": "has",
    "to": 355
  }, {
    "from": 356,
    "label": "has",
    "to": 357
  }, {
    "from": 356,
    "label": "has",
    "to": 358
  }, {
    "from": 359,
    "label": "has",
    "to": 360
  }, {
    "from": 359,
    "label": "has",
    "to": 361
  }, {
    "from": 362,
    "label": "has",
    "to": 363
  }, {
    "from": 362,
    "label": "has",
    "to": 364
  }, {
    "from": 365,
    "label": "has",
    "to": 366
  }, {
    "from": 366,
    "label": "has",
    "to": 360
  }, {
    "from": 365,
    "label": "has",
    "to": 367
  }, {
    "from": 367,
    "label": "has",
    "to": 363
  }, {
    "from": 365,
    "label": "has",
    "to": 368
  }, {
    "from": 369,
    "label": "has",
    "to": 370
  }, {
    "from": 370,
    "label": "has",
    "to": 32
  }, {
    "from": 369,
    "label": "has",
    "to": 371
  }, {
    "from": 371,
    "label": "has",
    "to": 35
  }, {
    "from": 369,
    "label": "has",
    "to": 372
  }, {
    "from": 372,
    "label": "has",
    "to": 38
  }, {
    "from": 372,
    "label": "has",
    "to": 39
  }, {
    "from": 372,
    "label": "has",
    "to": 40
  }, {
    "from": 372,
    "label": "has",
    "to": 41
  }, {
    "from": 369,
    "label": "has",
    "to": 373
  }, {
    "from": 373,
    "label": "has",
    "to": 44
  }, {
    "from": 373,
    "label": "has",
    "to": 45
  }, {
    "from": 373,
    "label": "has",
    "to": 46
  }, {
    "from": 373,
    "label": "has",
    "to": 47
  }, {
    "from": 369,
    "label": "has",
    "to": 374
  }, {
    "from": 374,
    "label": "has",
    "to": 50
  }, {
    "from": 374,
    "label": "has",
    "to": 51
  }, {
    "from": 374,
    "label": "has",
    "to": 52
  }, {
    "from": 369,
    "label": "has",
    "to": 375
  }, {
    "from": 375,
    "label": "has",
    "to": 55
  }, {
    "from": 375,
    "label": "has",
    "to": 56
  }, {
    "from": 369,
    "label": "has",
    "to": 376
  }, {
    "from": 376,
    "label": "has",
    "to": 59
  }, {
    "from": 376,
    "label": "has",
    "to": 60
  }, {
    "from": 376,
    "label": "has",
    "to": 61
  }, {
    "from": 376,
    "label": "has",
    "to": 62
  }, {
    "from": 369,
    "label": "has",
    "to": 377
  }, {
    "from": 377,
    "label": "has",
    "to": 65
  }, {
    "from": 377,
    "label": "has",
    "to": 66
  }, {
    "from": 377,
    "label": "has",
    "to": 67
  }, {
    "from": 377,
    "label": "has",
    "to": 68
  }, {
    "from": 377,
    "label": "has",
    "to": 69
  }, {
    "from": 377,
    "label": "has",
    "to": 70
  }, {
    "from": 377,
    "label": "has",
    "to": 71
  }, {
    "from": 369,
    "label": "has",
    "to": 378
  }, {
    "from": 378,
    "label": "has",
    "to": 74
  }, {
    "from": 378,
    "label": "has",
    "to": 75
  }, {
    "from": 378,
    "label": "has",
    "to": 76
  }, {
    "from": 378,
    "label": "has",
    "to": 77
  }, {
    "from": 378,
    "label": "has",
    "to": 78
  }, {
    "from": 369,
    "label": "has",
    "to": 379
  }, {
    "from": 379,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 81
  }, {
    "from": 106,
    "label": "has",
    "to": 82
  }, {
    "from": 106,
    "label": "has",
    "to": 83
  }, {
    "from": 106,
    "label": "has",
    "to": 84
  }, {
    "from": 106,
    "label": "has",
    "to": 85
  }, {
    "from": 106,
    "label": "has",
    "to": 86
  }, {
    "from": 106,
    "label": "has",
    "to": 87
  }, {
    "from": 379,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 90
  }, {
    "from": 107,
    "label": "has",
    "to": 91
  }, {
    "from": 107,
    "label": "has",
    "to": 92
  }, {
    "from": 107,
    "label": "has",
    "to": 93
  }, {
    "from": 379,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 96
  }, {
    "from": 108,
    "label": "has",
    "to": 97
  }, {
    "from": 108,
    "label": "has",
    "to": 98
  }, {
    "from": 108,
    "label": "has",
    "to": 99
  }, {
    "from": 379,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 102
  }, {
    "from": 109,
    "label": "has",
    "to": 103
  }, {
    "from": 369,
    "label": "has",
    "to": 380
  }, {
    "from": 380,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 112
  }, {
    "from": 133,
    "label": "has",
    "to": 113
  }, {
    "from": 133,
    "label": "has",
    "to": 114
  }, {
    "from": 133,
    "label": "has",
    "to": 115
  }, {
    "from": 133,
    "label": "has",
    "to": 116
  }, {
    "from": 133,
    "label": "has",
    "to": 117
  }, {
    "from": 133,
    "label": "has",
    "to": 118
  }, {
    "from": 133,
    "label": "has",
    "to": 119
  }, {
    "from": 133,
    "label": "has",
    "to": 120
  }, {
    "from": 380,
    "label": "has",
    "to": 134
  }, {
    "from": 134,
    "label": "has",
    "to": 123
  }, {
    "from": 134,
    "label": "has",
    "to": 124
  }, {
    "from": 380,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 127
  }, {
    "from": 135,
    "label": "has",
    "to": 128
  }, {
    "from": 135,
    "label": "has",
    "to": 129
  }, {
    "from": 135,
    "label": "has",
    "to": 130
  }, {
    "from": 369,
    "label": "has",
    "to": 381
  }, {
    "from": 381,
    "label": "has",
    "to": 171
  }, {
    "from": 171,
    "label": "has",
    "to": 138
  }, {
    "from": 171,
    "label": "has",
    "to": 139
  }, {
    "from": 171,
    "label": "has",
    "to": 140
  }, {
    "from": 171,
    "label": "has",
    "to": 141
  }, {
    "from": 171,
    "label": "has",
    "to": 142
  }, {
    "from": 171,
    "label": "has",
    "to": 143
  }, {
    "from": 171,
    "label": "has",
    "to": 144
  }, {
    "from": 171,
    "label": "has",
    "to": 145
  }, {
    "from": 171,
    "label": "has",
    "to": 146
  }, {
    "from": 171,
    "label": "has",
    "to": 147
  }, {
    "from": 381,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 150
  }, {
    "from": 172,
    "label": "has",
    "to": 151
  }, {
    "from": 172,
    "label": "has",
    "to": 152
  }, {
    "from": 172,
    "label": "has",
    "to": 153
  }, {
    "from": 172,
    "label": "has",
    "to": 154
  }, {
    "from": 172,
    "label": "has",
    "to": 155
  }, {
    "from": 172,
    "label": "has",
    "to": 156
  }, {
    "from": 172,
    "label": "has",
    "to": 157
  }, {
    "from": 381,
    "label": "has",
    "to": 173
  }, {
    "from": 173,
    "label": "has",
    "to": 160
  }, {
    "from": 173,
    "label": "has",
    "to": 161
  }, {
    "from": 173,
    "label": "has",
    "to": 162
  }, {
    "from": 173,
    "label": "has",
    "to": 163
  }, {
    "from": 381,
    "label": "has",
    "to": 174
  }, {
    "from": 174,
    "label": "has",
    "to": 166
  }, {
    "from": 174,
    "label": "has",
    "to": 167
  }, {
    "from": 174,
    "label": "has",
    "to": 168
  }, {
    "from": 369,
    "label": "has",
    "to": 382
  }, {
    "from": 382,
    "label": "has",
    "to": 200
  }, {
    "from": 200,
    "label": "has",
    "to": 177
  }, {
    "from": 200,
    "label": "has",
    "to": 178
  }, {
    "from": 200,
    "label": "has",
    "to": 179
  }, {
    "from": 200,
    "label": "has",
    "to": 180
  }, {
    "from": 200,
    "label": "has",
    "to": 181
  }, {
    "from": 200,
    "label": "has",
    "to": 182
  }, {
    "from": 200,
    "label": "has",
    "to": 183
  }, {
    "from": 382,
    "label": "has",
    "to": 201
  }, {
    "from": 201,
    "label": "has",
    "to": 186
  }, {
    "from": 201,
    "label": "has",
    "to": 187
  }, {
    "from": 201,
    "label": "has",
    "to": 188
  }, {
    "from": 201,
    "label": "has",
    "to": 189
  }, {
    "from": 201,
    "label": "has",
    "to": 190
  }, {
    "from": 201,
    "label": "has",
    "to": 191
  }, {
    "from": 201,
    "label": "has",
    "to": 192
  }, {
    "from": 382,
    "label": "has",
    "to": 202
  }, {
    "from": 202,
    "label": "has",
    "to": 195
  }, {
    "from": 202,
    "label": "has",
    "to": 196
  }, {
    "from": 202,
    "label": "has",
    "to": 197
  }, {
    "from": 369,
    "label": "has",
    "to": 383
  }, {
    "from": 383,
    "label": "has",
    "to": 225
  }, {
    "from": 225,
    "label": "has",
    "to": 205
  }, {
    "from": 225,
    "label": "has",
    "to": 206
  }, {
    "from": 225,
    "label": "has",
    "to": 207
  }, {
    "from": 225,
    "label": "has",
    "to": 208
  }, {
    "from": 225,
    "label": "has",
    "to": 209
  }, {
    "from": 225,
    "label": "has",
    "to": 210
  }, {
    "from": 225,
    "label": "has",
    "to": 211
  }, {
    "from": 225,
    "label": "has",
    "to": 212
  }, {
    "from": 225,
    "label": "has",
    "to": 213
  }, {
    "from": 383,
    "label": "has",
    "to": 226
  }, {
    "from": 226,
    "label": "has",
    "to": 216
  }, {
    "from": 226,
    "label": "has",
    "to": 217
  }, {
    "from": 226,
    "label": "has",
    "to": 218
  }, {
    "from": 226,
    "label": "has",
    "to": 219
  }, {
    "from": 226,
    "label": "has",
    "to": 220
  }, {
    "from": 226,
    "label": "has",
    "to": 221
  }, {
    "from": 226,
    "label": "has",
    "to": 222
  }, {
    "from": 369,
    "label": "has",
    "to": 384
  }, {
    "from": 384,
    "label": "has",
    "to": 260
  }, {
    "from": 260,
    "label": "has",
    "to": 229
  }, {
    "from": 260,
    "label": "has",
    "to": 230
  }, {
    "from": 260,
    "label": "has",
    "to": 231
  }, {
    "from": 260,
    "label": "has",
    "to": 232
  }, {
    "from": 260,
    "label": "has",
    "to": 233
  }, {
    "from": 260,
    "label": "has",
    "to": 234
  }, {
    "from": 260,
    "label": "has",
    "to": 235
  }, {
    "from": 260,
    "label": "has",
    "to": 236
  }, {
    "from": 260,
    "label": "has",
    "to": 237
  }, {
    "from": 260,
    "label": "has",
    "to": 238
  }, {
    "from": 260,
    "label": "has",
    "to": 239
  }, {
    "from": 260,
    "label": "has",
    "to": 240
  }, {
    "from": 260,
    "label": "has",
    "to": 241
  }, {
    "from": 260,
    "label": "has",
    "to": 242
  }, {
    "from": 260,
    "label": "has",
    "to": 243
  }, {
    "from": 384,
    "label": "has",
    "to": 261
  }, {
    "from": 261,
    "label": "has",
    "to": 246
  }, {
    "from": 261,
    "label": "has",
    "to": 247
  }, {
    "from": 261,
    "label": "has",
    "to": 248
  }, {
    "from": 261,
    "label": "has",
    "to": 249
  }, {
    "from": 261,
    "label": "has",
    "to": 250
  }, {
    "from": 261,
    "label": "has",
    "to": 251
  }, {
    "from": 261,
    "label": "has",
    "to": 252
  }, {
    "from": 261,
    "label": "has",
    "to": 253
  }, {
    "from": 261,
    "label": "has",
    "to": 254
  }, {
    "from": 261,
    "label": "has",
    "to": 255
  }, {
    "from": 261,
    "label": "has",
    "to": 256
  }, {
    "from": 261,
    "label": "has",
    "to": 257
  }, {
    "from": 369,
    "label": "has",
    "to": 385
  }, {
    "from": 385,
    "label": "has",
    "to": 314
  }, {
    "from": 314,
    "label": "has",
    "to": 264
  }, {
    "from": 314,
    "label": "has",
    "to": 265
  }, {
    "from": 314,
    "label": "has",
    "to": 266
  }, {
    "from": 314,
    "label": "has",
    "to": 267
  }, {
    "from": 314,
    "label": "has",
    "to": 268
  }, {
    "from": 314,
    "label": "has",
    "to": 269
  }, {
    "from": 314,
    "label": "has",
    "to": 270
  }, {
    "from": 314,
    "label": "has",
    "to": 271
  }, {
    "from": 385,
    "label": "has",
    "to": 315
  }, {
    "from": 315,
    "label": "has",
    "to": 274
  }, {
    "from": 315,
    "label": "has",
    "to": 275
  }, {
    "from": 315,
    "label": "has",
    "to": 276
  }, {
    "from": 315,
    "label": "has",
    "to": 277
  }, {
    "from": 315,
    "label": "has",
    "to": 278
  }, {
    "from": 315,
    "label": "has",
    "to": 279
  }, {
    "from": 315,
    "label": "has",
    "to": 280
  }, {
    "from": 315,
    "label": "has",
    "to": 281
  }, {
    "from": 315,
    "label": "has",
    "to": 282
  }, {
    "from": 315,
    "label": "has",
    "to": 283
  }, {
    "from": 315,
    "label": "has",
    "to": 284
  }, {
    "from": 315,
    "label": "has",
    "to": 285
  }, {
    "from": 315,
    "label": "has",
    "to": 286
  }, {
    "from": 315,
    "label": "has",
    "to": 287
  }, {
    "from": 385,
    "label": "has",
    "to": 316
  }, {
    "from": 316,
    "label": "has",
    "to": 290
  }, {
    "from": 316,
    "label": "has",
    "to": 291
  }, {
    "from": 316,
    "label": "has",
    "to": 292
  }, {
    "from": 316,
    "label": "has",
    "to": 293
  }, {
    "from": 385,
    "label": "has",
    "to": 317
  }, {
    "from": 317,
    "label": "has",
    "to": 296
  }, {
    "from": 317,
    "label": "has",
    "to": 297
  }, {
    "from": 317,
    "label": "has",
    "to": 298
  }, {
    "from": 317,
    "label": "has",
    "to": 299
  }, {
    "from": 385,
    "label": "has",
    "to": 318
  }, {
    "from": 318,
    "label": "has",
    "to": 302
  }, {
    "from": 318,
    "label": "has",
    "to": 303
  }, {
    "from": 318,
    "label": "has",
    "to": 304
  }, {
    "from": 385,
    "label": "has",
    "to": 319
  }, {
    "from": 319,
    "label": "has",
    "to": 307
  }, {
    "from": 319,
    "label": "has",
    "to": 308
  }, {
    "from": 319,
    "label": "has",
    "to": 309
  }, {
    "from": 319,
    "label": "has",
    "to": 310
  }, {
    "from": 319,
    "label": "has",
    "to": 311
  }, {
    "from": 369,
    "label": "has",
    "to": 386
  }, {
    "from": 386,
    "label": "has",
    "to": 337
  }, {
    "from": 337,
    "label": "has",
    "to": 322
  }, {
    "from": 386,
    "label": "has",
    "to": 338
  }, {
    "from": 338,
    "label": "has",
    "to": 325
  }, {
    "from": 338,
    "label": "has",
    "to": 326
  }, {
    "from": 338,
    "label": "has",
    "to": 327
  }, {
    "from": 338,
    "label": "has",
    "to": 328
  }, {
    "from": 338,
    "label": "has",
    "to": 329
  }, {
    "from": 338,
    "label": "has",
    "to": 330
  }, {
    "from": 338,
    "label": "has",
    "to": 331
  }, {
    "from": 386,
    "label": "has",
    "to": 339
  }, {
    "from": 339,
    "label": "has",
    "to": 334
  }, {
    "from": 369,
    "label": "has",
    "to": 387
  }, {
    "from": 387,
    "label": "has",
    "to": 342
  }, {
    "from": 369,
    "label": "has",
    "to": 388
  }, {
    "from": 388,
    "label": "has",
    "to": 345
  }, {
    "from": 369,
    "label": "has",
    "to": 389
  }, {
    "from": 389,
    "label": "has",
    "to": 348
  }, {
    "from": 369,
    "label": "has",
    "to": 390
  }, {
    "from": 390,
    "label": "has",
    "to": 351
  }, {
    "from": 369,
    "label": "has",
    "to": 391
  }, {
    "from": 391,
    "label": "has",
    "to": 354
  }, {
    "from": 369,
    "label": "has",
    "to": 392
  }, {
    "from": 392,
    "label": "has",
    "to": 357
  }, {
    "from": 369,
    "label": "has",
    "to": 393
  }, {
    "from": 393,
    "label": "has",
    "to": 366
  }, {
    "from": 366,
    "label": "has",
    "to": 360
  }, {
    "from": 393,
    "label": "has",
    "to": 367
  }, {
    "from": 367,
    "label": "has",
    "to": 363
  }, {
    "from": 369,
    "label": "has",
    "to": 394
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 399
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 395,
    "label": "calls",
    "to": 27
  }, {
    "from": 19,
    "label": "calls",
    "to": 13
  }, {
    "from": 395,
    "label": "calls",
    "to": 13
  }, {
    "from": 395,
    "label": "calls",
    "to": 13
  }, {
    "from": 395,
    "label": "calls",
    "to": 25
  }, {
    "from": 3,
    "label": "calls",
    "to": 3
  }, {
    "from": 13,
    "label": "calls",
    "to": 3
  }, {
    "from": 21,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 19
  }, {
    "from": 395,
    "label": "calls",
    "to": 23
  }, {
    "from": 27,
    "label": "calls",
    "to": 403
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 395,
    "label": "calls",
    "to": 405
  }, {
    "from": 27,
    "label": "calls",
    "to": 396
  }, {
    "from": 395,
    "label": "calls",
    "to": 21
  }, {
    "from": 395,
    "label": "calls",
    "to": 21
  }, {
    "from": 395,
    "label": "calls",
    "to": 21
  }, {
    "from": 395,
    "label": "calls",
    "to": 21
  }, {
    "from": 395,
    "label": "calls",
    "to": 21
  }, {
    "from": 395,
    "label": "calls",
    "to": 21
  }, {
    "from": 395,
    "label": "calls",
    "to": 21
  }, {
    "from": 395,
    "label": "calls",
    "to": 21
  }, {
    "from": 395,
    "label": "calls",
    "to": 21
  }, {
    "from": 395,
    "label": "calls",
    "to": 21
  }, {
    "from": 395,
    "label": "calls",
    "to": 21
  }, {
    "from": 395,
    "label": "calls",
    "to": 21
  }, {
    "from": 395,
    "label": "calls",
    "to": 21
  }, {
    "from": 395,
    "label": "calls",
    "to": 21
  }, {
    "from": 395,
    "label": "calls",
    "to": 21
  }, {
    "from": 395,
    "label": "calls",
    "to": 21
  }, {
    "from": 395,
    "label": "calls",
    "to": 21
  }, {
    "from": 395,
    "label": "calls",
    "to": 21
  }, {
    "from": 395,
    "label": "calls",
    "to": 21
  }, {
    "from": 395,
    "label": "calls",
    "to": 21
  }, {
    "from": 395,
    "label": "calls",
    "to": 21
  }, {
    "from": 395,
    "label": "calls",
    "to": 21
  }, {
    "from": 395,
    "label": "calls",
    "to": 21
  }, {
    "from": 395,
    "label": "calls",
    "to": 21
  }, {
    "from": 395,
    "label": "calls",
    "to": 21
  }, {
    "from": 23,
    "label": "calls",
    "to": 400
  }, {
    "from": 25,
    "label": "calls",
    "to": 400
  }, {
    "from": 13,
    "label": "calls",
    "to": 397
  }, {
    "from": 23,
    "label": "calls",
    "to": 397
  }, {
    "from": 25,
    "label": "calls",
    "to": 397
  }, {
    "from": 395,
    "label": "calls",
    "to": 397
  }, {
    "from": 395,
    "label": "calls",
    "to": 397
  }, {
    "from": 395,
    "label": "calls",
    "to": 397
  }, {
    "from": 395,
    "label": "calls",
    "to": 397
  }, {
    "from": 395,
    "label": "calls",
    "to": 397
  }, {
    "from": 3,
    "label": "calls",
    "to": 398
  }, {
    "from": 395,
    "label": "calls",
    "to": 402
  }, {
    "from": 395,
    "label": "calls",
    "to": 404
  }, {
    "from": 395,
    "label": "calls",
    "to": 404
  }, {
    "from": 395,
    "label": "calls",
    "to": 404
  }, {
    "from": 395,
    "label": "calls",
    "to": 404
  }, {
    "from": 395,
    "label": "calls",
    "to": 404
  }, {
    "from": 395,
    "label": "calls",
    "to": 404
  }, {
    "from": 395,
    "label": "calls",
    "to": 404
  }, {
    "from": 395,
    "label": "calls",
    "to": 404
  }, {
    "from": 395,
    "label": "calls",
    "to": 404
  }, {
    "from": 395,
    "label": "calls",
    "to": 404
  }, {
    "from": 13,
    "label": "calls",
    "to": 401
  }, {
    "from": 1,
    "label": "contains",
    "to": 395
  }, {
    "from": 395,
    "label": "declares",
    "to": 3
  }, {
    "from": 395,
    "label": "declares",
    "to": 13
  }, {
    "from": 395,
    "label": "declares",
    "to": 19
  }, {
    "from": 395,
    "label": "declares",
    "to": 21
  }, {
    "from": 395,
    "label": "declares",
    "to": 23
  }, {
    "from": 395,
    "label": "declares",
    "to": 25
  }, {
    "from": 395,
    "label": "declares",
    "to": 27
  }, {
    "from": 395,
    "label": "declares",
    "to": 31
  }, {
    "from": 395,
    "label": "declares",
    "to": 34
  }, {
    "from": 395,
    "label": "declares",
    "to": 37
  }, {
    "from": 395,
    "label": "declares",
    "to": 43
  }, {
    "from": 395,
    "label": "declares",
    "to": 49
  }, {
    "from": 395,
    "label": "declares",
    "to": 54
  }, {
    "from": 395,
    "label": "declares",
    "to": 58
  }, {
    "from": 395,
    "label": "declares",
    "to": 64
  }, {
    "from": 395,
    "label": "declares",
    "to": 73
  }, {
    "from": 395,
    "label": "declares",
    "to": 80
  }, {
    "from": 395,
    "label": "declares",
    "to": 89
  }, {
    "from": 395,
    "label": "declares",
    "to": 95
  }, {
    "from": 395,
    "label": "declares",
    "to": 101
  }, {
    "from": 395,
    "label": "declares",
    "to": 105
  }, {
    "from": 395,
    "label": "declares",
    "to": 111
  }, {
    "from": 395,
    "label": "declares",
    "to": 122
  }, {
    "from": 395,
    "label": "declares",
    "to": 126
  }, {
    "from": 395,
    "label": "declares",
    "to": 132
  }, {
    "from": 395,
    "label": "declares",
    "to": 137
  }, {
    "from": 395,
    "label": "declares",
    "to": 149
  }, {
    "from": 395,
    "label": "declares",
    "to": 159
  }, {
    "from": 395,
    "label": "declares",
    "to": 165
  }, {
    "from": 395,
    "label": "declares",
    "to": 170
  }, {
    "from": 395,
    "label": "declares",
    "to": 176
  }, {
    "from": 395,
    "label": "declares",
    "to": 185
  }, {
    "from": 395,
    "label": "declares",
    "to": 194
  }, {
    "from": 395,
    "label": "declares",
    "to": 199
  }, {
    "from": 395,
    "label": "declares",
    "to": 204
  }, {
    "from": 395,
    "label": "declares",
    "to": 215
  }, {
    "from": 395,
    "label": "declares",
    "to": 224
  }, {
    "from": 395,
    "label": "declares",
    "to": 228
  }, {
    "from": 395,
    "label": "declares",
    "to": 245
  }, {
    "from": 395,
    "label": "declares",
    "to": 259
  }, {
    "from": 395,
    "label": "declares",
    "to": 263
  }, {
    "from": 395,
    "label": "declares",
    "to": 273
  }, {
    "from": 395,
    "label": "declares",
    "to": 289
  }, {
    "from": 395,
    "label": "declares",
    "to": 295
  }, {
    "from": 395,
    "label": "declares",
    "to": 301
  }, {
    "from": 395,
    "label": "declares",
    "to": 306
  }, {
    "from": 395,
    "label": "declares",
    "to": 313
  }, {
    "from": 395,
    "label": "declares",
    "to": 321
  }, {
    "from": 395,
    "label": "declares",
    "to": 324
  }, {
    "from": 395,
    "label": "declares",
    "to": 333
  }, {
    "from": 395,
    "label": "declares",
    "to": 336
  }, {
    "from": 395,
    "label": "declares",
    "to": 341
  }, {
    "from": 395,
    "label": "declares",
    "to": 344
  }, {
    "from": 395,
    "label": "declares",
    "to": 347
  }, {
    "from": 395,
    "label": "declares",
    "to": 350
  }, {
    "from": 395,
    "label": "declares",
    "to": 353
  }, {
    "from": 395,
    "label": "declares",
    "to": 356
  }, {
    "from": 395,
    "label": "declares",
    "to": 359
  }, {
    "from": 395,
    "label": "declares",
    "to": 362
  }, {
    "from": 395,
    "label": "declares",
    "to": 365
  }, {
    "from": 395,
    "label": "declares",
    "to": 369
  }, {
    "from": 1,
    "label": "contains",
    "to": 406
  }, {
    "from": 1,
    "label": "contains",
    "to": 407
  }, {
    "from": 407,
    "label": "initializes",
    "to": 408
  }, {
    "from": 408,
    "label": "requires",
    "to": 2
  }, {
    "from": 106,
    "label": "hasArgument",
    "to": 80
  }, {
    "from": 107,
    "label": "hasArgument",
    "to": 89
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 95
  }, {
    "from": 109,
    "label": "hasArgument",
    "to": 101
  }, {
    "from": 133,
    "label": "hasArgument",
    "to": 111
  }, {
    "from": 134,
    "label": "hasArgument",
    "to": 122
  }, {
    "from": 135,
    "label": "hasArgument",
    "to": 126
  }, {
    "from": 171,
    "label": "hasArgument",
    "to": 137
  }, {
    "from": 172,
    "label": "hasArgument",
    "to": 149
  }, {
    "from": 173,
    "label": "hasArgument",
    "to": 159
  }, {
    "from": 174,
    "label": "hasArgument",
    "to": 165
  }, {
    "from": 200,
    "label": "hasArgument",
    "to": 176
  }, {
    "from": 201,
    "label": "hasArgument",
    "to": 185
  }, {
    "from": 202,
    "label": "hasArgument",
    "to": 194
  }, {
    "from": 225,
    "label": "hasArgument",
    "to": 204
  }, {
    "from": 226,
    "label": "hasArgument",
    "to": 215
  }, {
    "from": 260,
    "label": "hasArgument",
    "to": 228
  }, {
    "from": 261,
    "label": "hasArgument",
    "to": 245
  }, {
    "from": 314,
    "label": "hasArgument",
    "to": 263
  }, {
    "from": 315,
    "label": "hasArgument",
    "to": 273
  }, {
    "from": 316,
    "label": "hasArgument",
    "to": 289
  }, {
    "from": 317,
    "label": "hasArgument",
    "to": 295
  }, {
    "from": 318,
    "label": "hasArgument",
    "to": 301
  }, {
    "from": 319,
    "label": "hasArgument",
    "to": 306
  }, {
    "from": 337,
    "label": "hasArgument",
    "to": 321
  }, {
    "from": 338,
    "label": "hasArgument",
    "to": 324
  }, {
    "from": 339,
    "label": "hasArgument",
    "to": 333
  }, {
    "from": 366,
    "label": "hasArgument",
    "to": 359
  }, {
    "from": 367,
    "label": "hasArgument",
    "to": 362
  }, {
    "from": 370,
    "label": "hasArgument",
    "to": 31
  }, {
    "from": 371,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 372,
    "label": "hasArgument",
    "to": 37
  }, {
    "from": 373,
    "label": "hasArgument",
    "to": 43
  }, {
    "from": 374,
    "label": "hasArgument",
    "to": 49
  }, {
    "from": 375,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 376,
    "label": "hasArgument",
    "to": 58
  }, {
    "from": 377,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 378,
    "label": "hasArgument",
    "to": 73
  }, {
    "from": 379,
    "label": "hasArgument",
    "to": 80
  }, {
    "from": 379,
    "label": "hasArgument",
    "to": 89
  }, {
    "from": 379,
    "label": "hasArgument",
    "to": 95
  }, {
    "from": 379,
    "label": "hasArgument",
    "to": 101
  }, {
    "from": 379,
    "label": "hasArgument",
    "to": 105
  }, {
    "from": 380,
    "label": "hasArgument",
    "to": 111
  }, {
    "from": 380,
    "label": "hasArgument",
    "to": 122
  }, {
    "from": 380,
    "label": "hasArgument",
    "to": 126
  }, {
    "from": 380,
    "label": "hasArgument",
    "to": 132
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 137
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 149
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 159
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 165
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 170
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 176
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 185
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 194
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 199
  }, {
    "from": 383,
    "label": "hasArgument",
    "to": 204
  }, {
    "from": 383,
    "label": "hasArgument",
    "to": 215
  }, {
    "from": 383,
    "label": "hasArgument",
    "to": 224
  }, {
    "from": 384,
    "label": "hasArgument",
    "to": 228
  }, {
    "from": 384,
    "label": "hasArgument",
    "to": 245
  }, {
    "from": 384,
    "label": "hasArgument",
    "to": 259
  }, {
    "from": 385,
    "label": "hasArgument",
    "to": 263
  }, {
    "from": 385,
    "label": "hasArgument",
    "to": 273
  }, {
    "from": 385,
    "label": "hasArgument",
    "to": 289
  }, {
    "from": 385,
    "label": "hasArgument",
    "to": 295
  }, {
    "from": 385,
    "label": "hasArgument",
    "to": 301
  }, {
    "from": 385,
    "label": "hasArgument",
    "to": 306
  }, {
    "from": 385,
    "label": "hasArgument",
    "to": 313
  }, {
    "from": 386,
    "label": "hasArgument",
    "to": 321
  }, {
    "from": 386,
    "label": "hasArgument",
    "to": 324
  }, {
    "from": 386,
    "label": "hasArgument",
    "to": 333
  }, {
    "from": 386,
    "label": "hasArgument",
    "to": 336
  }, {
    "from": 387,
    "label": "hasArgument",
    "to": 341
  }, {
    "from": 388,
    "label": "hasArgument",
    "to": 344
  }, {
    "from": 389,
    "label": "hasArgument",
    "to": 347
  }, {
    "from": 390,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 391,
    "label": "hasArgument",
    "to": 353
  }, {
    "from": 392,
    "label": "hasArgument",
    "to": 356
  }, {
    "from": 393,
    "label": "hasArgument",
    "to": 359
  }, {
    "from": 393,
    "label": "hasArgument",
    "to": 362
  }, {
    "from": 393,
    "label": "hasArgument",
    "to": 365
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "parser_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "parser",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function strip_locations(ast)\r\n   ast.location = nil\r\n   ast.end_location = nil\r\n   ast.end_column = nil\r\n   ast.equals_location = nil\r\n   ast.first_token = nil\r\n\r\n   for i=1, #ast do\r\n      if type(ast[i]) == \"table\" then\r\n         strip_locations(ast[i])\r\n      end\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "ast.location = nil",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "ast.end_location = nil",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "ast.end_column = nil",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "ast.equals_location = nil",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "ast.first_token = nil",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "for i=1, #ast do\r\n      if type(ast[i]) == \"table\" then\r\n         strip_locations(ast[i])\r\n      end\r\n   end",
    "type": "statement:numericfor"
  }, {
    "id": 10,
    "text": "if type(ast[i]) == \"table\" then\r\n         strip_locations(ast[i])\r\n      end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "strip_locations(ast[i])",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "local function get_ast(src)\r\n   local ast = parser(src)\r\n   assert.is_table(ast)\r\n   strip_locations(ast)\r\n   return ast\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "local ast = parser(src)",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "assert.is_table(ast)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "strip_locations(ast)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "local function get_node(src)\r\n   return get_ast(src)[1]\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "local function get_expr(src)\r\n   return get_node(\"return \" .. src)[1]\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "local function get_comments(src)\r\n   return (select(2, parser(src)))\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "local function get_code_lines(src)\r\n   return select(3, parser(src))\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "local function get_error(src)\r\n   local ok, err = pcall(parser, src)\r\n   assert.is_false(ok)\r\n   return err\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "local ok, err = pcall(parser, src)",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "assert.is_false(ok)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function()\r\n      assert.same({}, get_ast(\" \"))\r\n   end",
    "type": "function"
  }, {
    "id": 32,
    "text": "assert.same({}, get_ast(\" \"))",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function()\r\n      assert.same({line = 1, column = 1, end_column = 3, msg = \"expected <eof> near 'end'\"}, get_error(\"end\"))\r\n   end",
    "type": "function"
  }, {
    "id": 35,
    "text": "assert.same({line = 1, column = 1, end_column = 3, msg = \"expected <eof> near 'end'\"}, get_error(\"end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function()\r\n      assert.same({tag = \"Return\"}, get_node(\"return\"))\r\n      assert.same({tag = \"Return\",\r\n                     {tag = \"Number\", \"1\"}\r\n                  }, get_node(\"return 1\"))\r\n      assert.same({tag = \"Return\",\r\n                     {tag = \"Number\", \"1\"},\r\n                     {tag = \"String\", \"foo\"}\r\n                  }, get_node(\"return 1, 'foo'\"))\r\n      assert.same({line = 1, column = 10, end_column = 10, msg = \"expected expression near <eof>\"}, get_error(\"return 1,\"))\r\n   end",
    "type": "function"
  }, {
    "id": 38,
    "text": "assert.same({tag = \"Return\"}, get_node(\"return\"))",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "assert.same({tag = \"Return\",\r\n                     {tag = \"Number\", \"1\"}\r\n                  }, get_node(\"return 1\"))",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "assert.same({tag = \"Return\",\r\n                     {tag = \"Number\", \"1\"},\r\n                     {tag = \"String\", \"foo\"}\r\n                  }, get_node(\"return 1, 'foo'\"))",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "assert.same({line = 1, column = 10, end_column = 10, msg = \"expected expression near <eof>\"}, get_error(\"return 1,\"))",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function()\r\n      assert.same({tag = \"Label\", \"fail\"}, get_node(\"::fail::\"))\r\n      assert.same({tag = \"Label\", \"fail\"}, get_node(\"::\\nfail\\n::\"))\r\n      assert.same({line = 1, column = 3, end_column = 4, msg = \"expected identifier near '::'\"}, get_error(\"::::\"))\r\n      assert.same({line = 1, column = 3, end_column = 3, msg = \"expected identifier near '1'\"}, get_error(\"::1::\"))\r\n   end",
    "type": "function"
  }, {
    "id": 44,
    "text": "assert.same({tag = \"Label\", \"fail\"}, get_node(\"::fail::\"))",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "assert.same({tag = \"Label\", \"fail\"}, get_node(\"::\\nfail\\n::\"))",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "assert.same({line = 1, column = 3, end_column = 4, msg = \"expected identifier near '::'\"}, get_error(\"::::\"))",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "assert.same({line = 1, column = 3, end_column = 3, msg = \"expected identifier near '1'\"}, get_error(\"::1::\"))",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function()\r\n      assert.same({tag = \"Goto\", \"fail\"}, get_node(\"goto fail\"))\r\n      assert.same({line = 1, column = 5, end_column = 5, msg = \"expected identifier near <eof>\"}, get_error(\"goto\"))\r\n      assert.same({line = 1, column = 9, end_column = 9, msg = \"expected statement near ','\"}, get_error(\"goto foo, bar\"))\r\n   end",
    "type": "function"
  }, {
    "id": 50,
    "text": "assert.same({tag = \"Goto\", \"fail\"}, get_node(\"goto fail\"))",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "assert.same({line = 1, column = 5, end_column = 5, msg = \"expected identifier near <eof>\"}, get_error(\"goto\"))",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "assert.same({line = 1, column = 9, end_column = 9, msg = \"expected statement near ','\"}, get_error(\"goto foo, bar\"))",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "function()\r\n      assert.same({tag = \"Break\"}, get_node(\"break\"))\r\n      assert.same({line = 1, column = 11, end_column = 11, msg = \"expected '=' near <eof>\"}, get_error(\"break fail\"))\r\n   end",
    "type": "function"
  }, {
    "id": 55,
    "text": "assert.same({tag = \"Break\"}, get_node(\"break\"))",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "assert.same({line = 1, column = 11, end_column = 11, msg = \"expected '=' near <eof>\"}, get_error(\"break fail\"))",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function()\r\n      assert.same({tag = \"Do\"}, get_node(\"do end\"))\r\n      assert.same({line = 1, column = 3, end_column = 3, msg = \"expected 'end' near <eof>\"}, get_error(\"do\"))\r\n      assert.same({line = 1, column = 4, end_column = 8, msg = \"expected 'end' near 'until'\"}, get_error(\"do until false\"))\r\n      assert.same({line = 2, column = 1, end_column = 5, msg = \"expected 'end' (to close 'do' on line 1) near 'until'\"},\r\n         get_error(\"do\\nuntil false\"))\r\n   end",
    "type": "function"
  }, {
    "id": 59,
    "text": "assert.same({tag = \"Do\"}, get_node(\"do end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "assert.same({line = 1, column = 3, end_column = 3, msg = \"expected 'end' near <eof>\"}, get_error(\"do\"))",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "assert.same({line = 1, column = 4, end_column = 8, msg = \"expected 'end' near 'until'\"}, get_error(\"do until false\"))",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "assert.same({line = 2, column = 1, end_column = 5, msg = \"expected 'end' (to close 'do' on line 1) near 'until'\"},\r\n         get_error(\"do\\nuntil false\"))",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "function()\r\n      assert.same({tag = \"While\",\r\n                     {tag = \"True\"},\r\n                     {}\r\n                  }, get_node(\"while true do end\"))\r\n      assert.same({line = 1, column = 6, end_column = 6, msg = \"expected condition near <eof>\"}, get_error(\"while\"))\r\n      assert.same({line = 1, column = 11, end_column = 11, msg = \"expected 'do' near <eof>\"}, get_error(\"while true\"))\r\n      assert.same({line = 1, column = 14, end_column = 14, msg = \"expected 'end' near <eof>\"}, get_error(\"while true do\"))\r\n      assert.same({line = 2, column = 3, end_column = 3, msg = \"expected 'end' (to close 'while' on line 1) near <eof>\"},\r\n         get_error(\"while true\\ndo\"))\r\n      assert.same({line = 1, column = 7, end_column = 8, msg = \"expected condition near 'do'\"}, get_error(\"while do end\"))\r\n      assert.same({line = 1, column = 11, end_column = 11, msg = \"expected 'do' near ','\"}, get_error(\"while true, false do end\"))\r\n   end",
    "type": "function"
  }, {
    "id": 65,
    "text": "assert.same({tag = \"While\",\r\n                     {tag = \"True\"},\r\n                     {}\r\n                  }, get_node(\"while true do end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "assert.same({line = 1, column = 6, end_column = 6, msg = \"expected condition near <eof>\"}, get_error(\"while\"))",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "assert.same({line = 1, column = 11, end_column = 11, msg = \"expected 'do' near <eof>\"}, get_error(\"while true\"))",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "assert.same({line = 1, column = 14, end_column = 14, msg = \"expected 'end' near <eof>\"}, get_error(\"while true do\"))",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "assert.same({line = 2, column = 3, end_column = 3, msg = \"expected 'end' (to close 'while' on line 1) near <eof>\"},\r\n         get_error(\"while true\\ndo\"))",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "assert.same({line = 1, column = 7, end_column = 8, msg = \"expected condition near 'do'\"}, get_error(\"while do end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "assert.same({line = 1, column = 11, end_column = 11, msg = \"expected 'do' near ','\"}, get_error(\"while true, false do end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "function()\r\n      assert.same({tag = \"Repeat\",\r\n                     {},\r\n                     {tag = \"True\"}\r\n                  }, get_node(\"repeat until true\"))\r\n      assert.same({line = 1, column = 7, end_column = 7, msg = \"expected 'until' near <eof>\"}, get_error(\"repeat\"))\r\n      assert.same({line = 3, column = 1, end_column = 1, msg = \"expected 'until' (to close 'repeat' on line 1) near <eof>\"},\r\n         get_error(\"repeat\\n--\"))\r\n      assert.same({line = 1, column = 13, end_column = 13, msg = \"expected condition near <eof>\"}, get_error(\"repeat until\"))\r\n      assert.same({line = 1, column = 18, end_column = 18, msg = \"expected statement near ','\"}, get_error(\"repeat until true, false\"))\r\n   end",
    "type": "function"
  }, {
    "id": 74,
    "text": "assert.same({tag = \"Repeat\",\r\n                     {},\r\n                     {tag = \"True\"}\r\n                  }, get_node(\"repeat until true\"))",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "assert.same({line = 1, column = 7, end_column = 7, msg = \"expected 'until' near <eof>\"}, get_error(\"repeat\"))",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "assert.same({line = 3, column = 1, end_column = 1, msg = \"expected 'until' (to close 'repeat' on line 1) near <eof>\"},\r\n         get_error(\"repeat\\n--\"))",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "assert.same({line = 1, column = 13, end_column = 13, msg = \"expected condition near <eof>\"}, get_error(\"repeat until\"))",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "assert.same({line = 1, column = 18, end_column = 18, msg = \"expected statement near ','\"}, get_error(\"repeat until true, false\"))",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "function()\r\n         assert.same({tag = \"If\",\r\n                        {tag = \"True\"},\r\n                        {}\r\n                     }, get_node(\"if true then end\"))\r\n         assert.same({line = 1, column = 3, end_column = 3, msg = \"expected condition near <eof>\"}, get_error(\"if\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected 'then' near <eof>\"}, get_error(\"if true\"))\r\n         assert.same({line = 1, column = 13, end_column = 13, msg = \"expected 'end' near <eof>\"}, get_error(\"if true then\"))\r\n         assert.same({line = 2, column = 5, end_column = 5, msg = \"expected 'end' (to close 'if' on line 1) near <eof>\"},\r\n            get_error(\"if true\\nthen\"))\r\n         assert.same({line = 1, column = 4, end_column = 7, msg = \"expected condition near 'then'\"}, get_error(\"if then end\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected 'then' near ','\"}, get_error(\"if true, false then end\"))\r\n      end",
    "type": "function"
  }, {
    "id": 81,
    "text": "assert.same({tag = \"If\",\r\n                        {tag = \"True\"},\r\n                        {}\r\n                     }, get_node(\"if true then end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "assert.same({line = 1, column = 3, end_column = 3, msg = \"expected condition near <eof>\"}, get_error(\"if\"))",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "assert.same({line = 1, column = 8, end_column = 8, msg = \"expected 'then' near <eof>\"}, get_error(\"if true\"))",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "assert.same({line = 1, column = 13, end_column = 13, msg = \"expected 'end' near <eof>\"}, get_error(\"if true then\"))",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "assert.same({line = 2, column = 5, end_column = 5, msg = \"expected 'end' (to close 'if' on line 1) near <eof>\"},\r\n            get_error(\"if true\\nthen\"))",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "assert.same({line = 1, column = 4, end_column = 7, msg = \"expected condition near 'then'\"}, get_error(\"if then end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "assert.same({line = 1, column = 8, end_column = 8, msg = \"expected 'then' near ','\"}, get_error(\"if true, false then end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 89,
    "text": "function()\r\n         assert.same({tag = \"If\",\r\n                        {tag = \"True\"},\r\n                        {},\r\n                        {}\r\n                     }, get_node(\"if true then else end\"))\r\n         assert.same({line = 1, column = 18, end_column = 18, msg = \"expected 'end' near <eof>\"}, get_error(\"if true then else\"))\r\n         assert.same({line = 3, column = 1, end_column = 1, msg = \"expected 'end' (to close 'else' on line 2) near <eof>\"},\r\n            get_error(\"if true\\nthen else\\n\"))\r\n         assert.same({line = 1, column = 19, end_column = 22, msg = \"expected 'end' near 'else'\"}, get_error(\"if true then else else end\"))\r\n      end",
    "type": "function"
  }, {
    "id": 90,
    "text": "assert.same({tag = \"If\",\r\n                        {tag = \"True\"},\r\n                        {},\r\n                        {}\r\n                     }, get_node(\"if true then else end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "assert.same({line = 1, column = 18, end_column = 18, msg = \"expected 'end' near <eof>\"}, get_error(\"if true then else\"))",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "assert.same({line = 3, column = 1, end_column = 1, msg = \"expected 'end' (to close 'else' on line 2) near <eof>\"},\r\n            get_error(\"if true\\nthen else\\n\"))",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "assert.same({line = 1, column = 19, end_column = 22, msg = \"expected 'end' near 'else'\"}, get_error(\"if true then else else end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 95,
    "text": "function()\r\n         assert.same({tag = \"If\",\r\n                        {tag = \"True\"},\r\n                        {},\r\n                        {tag = \"False\"},\r\n                        {}\r\n                     }, get_node(\"if true then elseif false then end\"))\r\n         assert.same({line = 1, column = 21, end_column = 23, msg = \"expected condition near 'end'\"}, get_error(\"if true then elseif end\"))\r\n         assert.same({line = 1, column = 21, end_column = 24, msg = \"expected condition near 'then'\"}, get_error(\"if true then elseif then end\"))\r\n         assert.same({line = 2, column = 5, end_column = 5, msg = \"expected 'end' (to close 'elseif' on line 1) near <eof>\"},\r\n            get_error(\"if true then elseif a\\nthen\"))\r\n      end",
    "type": "function"
  }, {
    "id": 96,
    "text": "assert.same({tag = \"If\",\r\n                        {tag = \"True\"},\r\n                        {},\r\n                        {tag = \"False\"},\r\n                        {}\r\n                     }, get_node(\"if true then elseif false then end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "assert.same({line = 1, column = 21, end_column = 23, msg = \"expected condition near 'end'\"}, get_error(\"if true then elseif end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "assert.same({line = 1, column = 21, end_column = 24, msg = \"expected condition near 'then'\"}, get_error(\"if true then elseif then end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "assert.same({line = 2, column = 5, end_column = 5, msg = \"expected 'end' (to close 'elseif' on line 1) near <eof>\"},\r\n            get_error(\"if true then elseif a\\nthen\"))",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 101,
    "text": "function()\r\n         assert.same({tag = \"If\",\r\n                        {tag = \"True\"},\r\n                        {},\r\n                        {tag = \"False\"},\r\n                        {},\r\n                        {}\r\n                     }, get_node(\"if true then elseif false then else end\"))\r\n         assert.same({line = 1, column = 36, end_column = 36, msg = \"expected 'end' near <eof>\"}, get_error(\"if true then elseif false then else\"))\r\n      end",
    "type": "function"
  }, {
    "id": 102,
    "text": "assert.same({tag = \"If\",\r\n                        {tag = \"True\"},\r\n                        {},\r\n                        {tag = \"False\"},\r\n                        {},\r\n                        {}\r\n                     }, get_node(\"if true then elseif false then else end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "assert.same({line = 1, column = 36, end_column = 36, msg = \"expected 'end' near <eof>\"}, get_error(\"if true then elseif false then else\"))",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 105,
    "text": "function()\r\n      it(\"parses if then end correctly\", function()\r\n         assert.same({tag = \"If\",\r\n                        {tag = \"True\"},\r\n                        {}\r\n                     }, get_node(\"if true then end\"))\r\n         assert.same({line = 1, column = 3, end_column = 3, msg = \"expected condition near <eof>\"}, get_error(\"if\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected 'then' near <eof>\"}, get_error(\"if true\"))\r\n         assert.same({line = 1, column = 13, end_column = 13, msg = \"expected 'end' near <eof>\"}, get_error(\"if true then\"))\r\n         assert.same({line = 2, column = 5, end_column = 5, msg = \"expected 'end' (to close 'if' on line 1) near <eof>\"},\r\n            get_error(\"if true\\nthen\"))\r\n         assert.same({line = 1, column = 4, end_column = 7, msg = \"expected condition near 'then'\"}, get_error(\"if then end\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected 'then' near ','\"}, get_error(\"if true, false then end\"))\r\n      end)\r\n\r\n      it(\"parses if then else end correctly\", function()\r\n         assert.same({tag = \"If\",\r\n                        {tag = \"True\"},\r\n                        {},\r\n                        {}\r\n                     }, get_node(\"if true then else end\"))\r\n         assert.same({line = 1, column = 18, end_column = 18, msg = \"expected 'end' near <eof>\"}, get_error(\"if true then else\"))\r\n         assert.same({line = 3, column = 1, end_column = 1, msg = \"expected 'end' (to close 'else' on line 2) near <eof>\"},\r\n            get_error(\"if true\\nthen else\\n\"))\r\n         assert.same({line = 1, column = 19, end_column = 22, msg = \"expected 'end' near 'else'\"}, get_error(\"if true then else else end\"))\r\n      end)\r\n\r\n      it(\"parses if then elseif then end correctly\", function()\r\n         assert.same({tag = \"If\",\r\n                        {tag = \"True\"},\r\n                        {},\r\n                        {tag = \"False\"},\r\n                        {}\r\n                     }, get_node(\"if true then elseif false then end\"))\r\n         assert.same({line = 1, column = 21, end_column = 23, msg = \"expected condition near 'end'\"}, get_error(\"if true then elseif end\"))\r\n         assert.same({line = 1, column = 21, end_column = 24, msg = \"expected condition near 'then'\"}, get_error(\"if true then elseif then end\"))\r\n         assert.same({line = 2, column = 5, end_column = 5, msg = \"expected 'end' (to close 'elseif' on line 1) near <eof>\"},\r\n            get_error(\"if true then elseif a\\nthen\"))\r\n      end)\r\n\r\n      it(\"parses if then elseif then else end correctly\", function()\r\n         assert.same({tag = \"If\",\r\n                        {tag = \"True\"},\r\n                        {},\r\n                        {tag = \"False\"},\r\n                        {},\r\n                        {}\r\n                     }, get_node(\"if true then elseif false then else end\"))\r\n         assert.same({line = 1, column = 36, end_column = 36, msg = \"expected 'end' near <eof>\"}, get_error(\"if true then elseif false then else\"))\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 106,
    "text": "it(\"parses if then end correctly\", function()\r\n         assert.same({tag = \"If\",\r\n                        {tag = \"True\"},\r\n                        {}\r\n                     }, get_node(\"if true then end\"))\r\n         assert.same({line = 1, column = 3, end_column = 3, msg = \"expected condition near <eof>\"}, get_error(\"if\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected 'then' near <eof>\"}, get_error(\"if true\"))\r\n         assert.same({line = 1, column = 13, end_column = 13, msg = \"expected 'end' near <eof>\"}, get_error(\"if true then\"))\r\n         assert.same({line = 2, column = 5, end_column = 5, msg = \"expected 'end' (to close 'if' on line 1) near <eof>\"},\r\n            get_error(\"if true\\nthen\"))\r\n         assert.same({line = 1, column = 4, end_column = 7, msg = \"expected condition near 'then'\"}, get_error(\"if then end\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected 'then' near ','\"}, get_error(\"if true, false then end\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "it(\"parses if then else end correctly\", function()\r\n         assert.same({tag = \"If\",\r\n                        {tag = \"True\"},\r\n                        {},\r\n                        {}\r\n                     }, get_node(\"if true then else end\"))\r\n         assert.same({line = 1, column = 18, end_column = 18, msg = \"expected 'end' near <eof>\"}, get_error(\"if true then else\"))\r\n         assert.same({line = 3, column = 1, end_column = 1, msg = \"expected 'end' (to close 'else' on line 2) near <eof>\"},\r\n            get_error(\"if true\\nthen else\\n\"))\r\n         assert.same({line = 1, column = 19, end_column = 22, msg = \"expected 'end' near 'else'\"}, get_error(\"if true then else else end\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "it(\"parses if then elseif then end correctly\", function()\r\n         assert.same({tag = \"If\",\r\n                        {tag = \"True\"},\r\n                        {},\r\n                        {tag = \"False\"},\r\n                        {}\r\n                     }, get_node(\"if true then elseif false then end\"))\r\n         assert.same({line = 1, column = 21, end_column = 23, msg = \"expected condition near 'end'\"}, get_error(\"if true then elseif end\"))\r\n         assert.same({line = 1, column = 21, end_column = 24, msg = \"expected condition near 'then'\"}, get_error(\"if true then elseif then end\"))\r\n         assert.same({line = 2, column = 5, end_column = 5, msg = \"expected 'end' (to close 'elseif' on line 1) near <eof>\"},\r\n            get_error(\"if true then elseif a\\nthen\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "it(\"parses if then elseif then else end correctly\", function()\r\n         assert.same({tag = \"If\",\r\n                        {tag = \"True\"},\r\n                        {},\r\n                        {tag = \"False\"},\r\n                        {},\r\n                        {}\r\n                     }, get_node(\"if true then elseif false then else end\"))\r\n         assert.same({line = 1, column = 36, end_column = 36, msg = \"expected 'end' near <eof>\"}, get_error(\"if true then elseif false then else\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 111,
    "text": "function()\r\n         assert.same({tag = \"Fornum\",\r\n                        {tag = \"Id\", \"i\"},\r\n                        {tag = \"Number\", \"1\"},\r\n                        {tag = \"Op\", \"len\", {tag = \"Id\", \"t\"}},\r\n                        {}\r\n                     }, get_node(\"for i=1, #t do end\"))\r\n         assert.same({line = 1, column = 4, end_column = 4, msg = \"expected identifier near <eof>\"}, get_error(\"for\"))\r\n         assert.same({line = 1, column = 6, end_column = 6, msg = \"expected '=', ',' or 'in' near <eof>\"}, get_error(\"for i\"))\r\n         assert.same({line = 1, column = 7, end_column = 8, msg = \"expected '=', ',' or 'in' near '~='\"}, get_error(\"for i ~= 2\"))\r\n         assert.same({line = 1, column = 11, end_column = 12, msg = \"expected ',' near 'do'\"}, get_error(\"for i = 2 do end\"))\r\n         assert.same({line = 1, column = 15, end_column = 15, msg = \"expected 'end' near <eof>\"}, get_error(\"for i=1, #t do\"))\r\n         assert.same({line = 2, column = 4, end_column = 4, msg = \"expected 'end' (to close 'for' on line 1) near <eof>\"},\r\n            get_error(\"for i=1, #t do\\na()\"))\r\n         assert.same({line = 1, column = 5, end_column = 5, msg = \"expected identifier near '('\"}, get_error(\"for (i)=1, #t do end\"))\r\n         assert.same({line = 1, column = 5, end_column = 5, msg = \"expected identifier near '3'\"}, get_error(\"for 3=1, #t do end\"))\r\n      end",
    "type": "function"
  }, {
    "id": 112,
    "text": "assert.same({tag = \"Fornum\",\r\n                        {tag = \"Id\", \"i\"},\r\n                        {tag = \"Number\", \"1\"},\r\n                        {tag = \"Op\", \"len\", {tag = \"Id\", \"t\"}},\r\n                        {}\r\n                     }, get_node(\"for i=1, #t do end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "assert.same({line = 1, column = 4, end_column = 4, msg = \"expected identifier near <eof>\"}, get_error(\"for\"))",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "assert.same({line = 1, column = 6, end_column = 6, msg = \"expected '=', ',' or 'in' near <eof>\"}, get_error(\"for i\"))",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "assert.same({line = 1, column = 7, end_column = 8, msg = \"expected '=', ',' or 'in' near '~='\"}, get_error(\"for i ~= 2\"))",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "assert.same({line = 1, column = 11, end_column = 12, msg = \"expected ',' near 'do'\"}, get_error(\"for i = 2 do end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "assert.same({line = 1, column = 15, end_column = 15, msg = \"expected 'end' near <eof>\"}, get_error(\"for i=1, #t do\"))",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "assert.same({line = 2, column = 4, end_column = 4, msg = \"expected 'end' (to close 'for' on line 1) near <eof>\"},\r\n            get_error(\"for i=1, #t do\\na()\"))",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "assert.same({line = 1, column = 5, end_column = 5, msg = \"expected identifier near '('\"}, get_error(\"for (i)=1, #t do end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "assert.same({line = 1, column = 5, end_column = 5, msg = \"expected identifier near '3'\"}, get_error(\"for 3=1, #t do end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 122,
    "text": "function()\r\n         assert.same({tag = \"Fornum\",\r\n                        {tag = \"Id\", \"i\"},\r\n                        {tag = \"Number\", \"1\"},\r\n                        {tag = \"Op\", \"len\", {tag = \"Id\", \"t\"}},\r\n                        {tag = \"Number\", \"2\"},\r\n                        {}\r\n                     }, get_node(\"for i=1, #t, 2 do end\"))\r\n         assert.same({line = 1, column = 15, end_column = 15, msg = \"expected 'do' near ','\"}, get_error(\"for i=1, #t, 2, 3 do\"))\r\n      end",
    "type": "function"
  }, {
    "id": 123,
    "text": "assert.same({tag = \"Fornum\",\r\n                        {tag = \"Id\", \"i\"},\r\n                        {tag = \"Number\", \"1\"},\r\n                        {tag = \"Op\", \"len\", {tag = \"Id\", \"t\"}},\r\n                        {tag = \"Number\", \"2\"},\r\n                        {}\r\n                     }, get_node(\"for i=1, #t, 2 do end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "assert.same({line = 1, column = 15, end_column = 15, msg = \"expected 'do' near ','\"}, get_error(\"for i=1, #t, 2, 3 do\"))",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 126,
    "text": "function()\r\n         assert.same({tag = \"Forin\", {\r\n                           {tag = \"Id\", \"i\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"t\"}\r\n                        },\r\n                        {}\r\n                     }, get_node(\"for i in t do end\"))\r\n         assert.same({tag = \"Forin\", {\r\n                           {tag = \"Id\", \"i\"},\r\n                           {tag = \"Id\", \"j\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"t\"},\r\n                           {tag = \"String\", \"foo\"}\r\n                        },\r\n                        {}\r\n                     }, get_node(\"for i, j in t, 'foo' do end\"))\r\n         assert.same({line = 1, column = 5, end_column = 6, msg = \"expected identifier near 'in'\"}, get_error(\"for in foo do end\"))\r\n         assert.same({line = 1, column = 10, end_column = 11, msg = \"expected expression near 'do'\"}, get_error(\"for i in do end\"))\r\n      end",
    "type": "function"
  }, {
    "id": 127,
    "text": "assert.same({tag = \"Forin\", {\r\n                           {tag = \"Id\", \"i\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"t\"}\r\n                        },\r\n                        {}\r\n                     }, get_node(\"for i in t do end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "assert.same({tag = \"Forin\", {\r\n                           {tag = \"Id\", \"i\"},\r\n                           {tag = \"Id\", \"j\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"t\"},\r\n                           {tag = \"String\", \"foo\"}\r\n                        },\r\n                        {}\r\n                     }, get_node(\"for i, j in t, 'foo' do end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "assert.same({line = 1, column = 5, end_column = 6, msg = \"expected identifier near 'in'\"}, get_error(\"for in foo do end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "assert.same({line = 1, column = 10, end_column = 11, msg = \"expected expression near 'do'\"}, get_error(\"for i in do end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 132,
    "text": "function()\r\n      it(\"parses fornum correctly\", function()\r\n         assert.same({tag = \"Fornum\",\r\n                        {tag = \"Id\", \"i\"},\r\n                        {tag = \"Number\", \"1\"},\r\n                        {tag = \"Op\", \"len\", {tag = \"Id\", \"t\"}},\r\n                        {}\r\n                     }, get_node(\"for i=1, #t do end\"))\r\n         assert.same({line = 1, column = 4, end_column = 4, msg = \"expected identifier near <eof>\"}, get_error(\"for\"))\r\n         assert.same({line = 1, column = 6, end_column = 6, msg = \"expected '=', ',' or 'in' near <eof>\"}, get_error(\"for i\"))\r\n         assert.same({line = 1, column = 7, end_column = 8, msg = \"expected '=', ',' or 'in' near '~='\"}, get_error(\"for i ~= 2\"))\r\n         assert.same({line = 1, column = 11, end_column = 12, msg = \"expected ',' near 'do'\"}, get_error(\"for i = 2 do end\"))\r\n         assert.same({line = 1, column = 15, end_column = 15, msg = \"expected 'end' near <eof>\"}, get_error(\"for i=1, #t do\"))\r\n         assert.same({line = 2, column = 4, end_column = 4, msg = \"expected 'end' (to close 'for' on line 1) near <eof>\"},\r\n            get_error(\"for i=1, #t do\\na()\"))\r\n         assert.same({line = 1, column = 5, end_column = 5, msg = \"expected identifier near '('\"}, get_error(\"for (i)=1, #t do end\"))\r\n         assert.same({line = 1, column = 5, end_column = 5, msg = \"expected identifier near '3'\"}, get_error(\"for 3=1, #t do end\"))\r\n      end)\r\n\r\n      it(\"parses fornum with step correctly\", function()\r\n         assert.same({tag = \"Fornum\",\r\n                        {tag = \"Id\", \"i\"},\r\n                        {tag = \"Number\", \"1\"},\r\n                        {tag = \"Op\", \"len\", {tag = \"Id\", \"t\"}},\r\n                        {tag = \"Number\", \"2\"},\r\n                        {}\r\n                     }, get_node(\"for i=1, #t, 2 do end\"))\r\n         assert.same({line = 1, column = 15, end_column = 15, msg = \"expected 'do' near ','\"}, get_error(\"for i=1, #t, 2, 3 do\"))\r\n      end)\r\n\r\n      it(\"parses forin correctly\", function()\r\n         assert.same({tag = \"Forin\", {\r\n                           {tag = \"Id\", \"i\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"t\"}\r\n                        },\r\n                        {}\r\n                     }, get_node(\"for i in t do end\"))\r\n         assert.same({tag = \"Forin\", {\r\n                           {tag = \"Id\", \"i\"},\r\n                           {tag = \"Id\", \"j\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"t\"},\r\n                           {tag = \"String\", \"foo\"}\r\n                        },\r\n                        {}\r\n                     }, get_node(\"for i, j in t, 'foo' do end\"))\r\n         assert.same({line = 1, column = 5, end_column = 6, msg = \"expected identifier near 'in'\"}, get_error(\"for in foo do end\"))\r\n         assert.same({line = 1, column = 10, end_column = 11, msg = \"expected expression near 'do'\"}, get_error(\"for i in do end\"))\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 133,
    "text": "it(\"parses fornum correctly\", function()\r\n         assert.same({tag = \"Fornum\",\r\n                        {tag = \"Id\", \"i\"},\r\n                        {tag = \"Number\", \"1\"},\r\n                        {tag = \"Op\", \"len\", {tag = \"Id\", \"t\"}},\r\n                        {}\r\n                     }, get_node(\"for i=1, #t do end\"))\r\n         assert.same({line = 1, column = 4, end_column = 4, msg = \"expected identifier near <eof>\"}, get_error(\"for\"))\r\n         assert.same({line = 1, column = 6, end_column = 6, msg = \"expected '=', ',' or 'in' near <eof>\"}, get_error(\"for i\"))\r\n         assert.same({line = 1, column = 7, end_column = 8, msg = \"expected '=', ',' or 'in' near '~='\"}, get_error(\"for i ~= 2\"))\r\n         assert.same({line = 1, column = 11, end_column = 12, msg = \"expected ',' near 'do'\"}, get_error(\"for i = 2 do end\"))\r\n         assert.same({line = 1, column = 15, end_column = 15, msg = \"expected 'end' near <eof>\"}, get_error(\"for i=1, #t do\"))\r\n         assert.same({line = 2, column = 4, end_column = 4, msg = \"expected 'end' (to close 'for' on line 1) near <eof>\"},\r\n            get_error(\"for i=1, #t do\\na()\"))\r\n         assert.same({line = 1, column = 5, end_column = 5, msg = \"expected identifier near '('\"}, get_error(\"for (i)=1, #t do end\"))\r\n         assert.same({line = 1, column = 5, end_column = 5, msg = \"expected identifier near '3'\"}, get_error(\"for 3=1, #t do end\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 134,
    "text": "it(\"parses fornum with step correctly\", function()\r\n         assert.same({tag = \"Fornum\",\r\n                        {tag = \"Id\", \"i\"},\r\n                        {tag = \"Number\", \"1\"},\r\n                        {tag = \"Op\", \"len\", {tag = \"Id\", \"t\"}},\r\n                        {tag = \"Number\", \"2\"},\r\n                        {}\r\n                     }, get_node(\"for i=1, #t, 2 do end\"))\r\n         assert.same({line = 1, column = 15, end_column = 15, msg = \"expected 'do' near ','\"}, get_error(\"for i=1, #t, 2, 3 do\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "it(\"parses forin correctly\", function()\r\n         assert.same({tag = \"Forin\", {\r\n                           {tag = \"Id\", \"i\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"t\"}\r\n                        },\r\n                        {}\r\n                     }, get_node(\"for i in t do end\"))\r\n         assert.same({tag = \"Forin\", {\r\n                           {tag = \"Id\", \"i\"},\r\n                           {tag = \"Id\", \"j\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"t\"},\r\n                           {tag = \"String\", \"foo\"}\r\n                        },\r\n                        {}\r\n                     }, get_node(\"for i, j in t, 'foo' do end\"))\r\n         assert.same({line = 1, column = 5, end_column = 6, msg = \"expected identifier near 'in'\"}, get_error(\"for in foo do end\"))\r\n         assert.same({line = 1, column = 10, end_column = 11, msg = \"expected expression near 'do'\"}, get_error(\"for i in do end\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 137,
    "text": "function()\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Function\", {}, {}}\r\n                        }\r\n                     }, get_node(\"function a() end\"))\r\n         assert.same({line = 1, column = 9, end_column = 9, msg = \"expected identifier near <eof>\"}, get_error(\"function\"))\r\n         assert.same({line = 1, column = 11, end_column = 11, msg = \"expected '(' near <eof>\"}, get_error(\"function a\"))\r\n         assert.same({line = 1, column = 12, end_column = 12, msg = \"expected argument near <eof>\"}, get_error(\"function a(\"))\r\n         assert.same({line = 1, column = 13, end_column = 13, msg = \"expected 'end' near <eof>\"}, get_error(\"function a()\"))\r\n         assert.same({line = 2, column = 2, end_column = 2, msg = \"expected 'end' (to close 'function' on line 1) near <eof>\"},\r\n            get_error(\"function a(\\n)\"))\r\n         assert.same({line = 1, column = 10, end_column = 10, msg = \"expected identifier near '('\"}, get_error(\"function (a)()\"))\r\n         assert.same({line = 1, column = 9, end_column = 9, msg = \"expected identifier near '('\"}, get_error(\"function() end\"))\r\n         assert.same({line = 1, column = 11, end_column = 11, msg = \"expected '(' near 'a'\"}, get_error(\"(function a() end)\"))\r\n         assert.same({line = 1, column = 18, end_column = 18, msg = \"expected expression near ')'\"}, get_error(\"function a() end()\"))\r\n      end",
    "type": "function"
  }, {
    "id": 138,
    "text": "assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Function\", {}, {}}\r\n                        }\r\n                     }, get_node(\"function a() end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "assert.same({line = 1, column = 9, end_column = 9, msg = \"expected identifier near <eof>\"}, get_error(\"function\"))",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "assert.same({line = 1, column = 11, end_column = 11, msg = \"expected '(' near <eof>\"}, get_error(\"function a\"))",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "assert.same({line = 1, column = 12, end_column = 12, msg = \"expected argument near <eof>\"}, get_error(\"function a(\"))",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "assert.same({line = 1, column = 13, end_column = 13, msg = \"expected 'end' near <eof>\"}, get_error(\"function a()\"))",
    "type": "statement:functioncall"
  }, {
    "id": 143,
    "text": "assert.same({line = 2, column = 2, end_column = 2, msg = \"expected 'end' (to close 'function' on line 1) near <eof>\"},\r\n            get_error(\"function a(\\n)\"))",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "assert.same({line = 1, column = 10, end_column = 10, msg = \"expected identifier near '('\"}, get_error(\"function (a)()\"))",
    "type": "statement:functioncall"
  }, {
    "id": 145,
    "text": "assert.same({line = 1, column = 9, end_column = 9, msg = \"expected identifier near '('\"}, get_error(\"function() end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "assert.same({line = 1, column = 11, end_column = 11, msg = \"expected '(' near 'a'\"}, get_error(\"(function a() end)\"))",
    "type": "statement:functioncall"
  }, {
    "id": 147,
    "text": "assert.same({line = 1, column = 18, end_column = 18, msg = \"expected expression near ')'\"}, get_error(\"function a() end()\"))",
    "type": "statement:functioncall"
  }, {
    "id": 148,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 149,
    "text": "function()\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Function\", {{tag = \"Id\", \"b\"}}, {}}\r\n                        }\r\n                     }, get_node(\"function a(b) end\"))\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Function\", {{tag = \"Id\", \"b\"}, {tag = \"Id\", \"c\"}}, {}}\r\n                        }\r\n                     }, get_node(\"function a(b, c) end\"))\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Function\", {{tag = \"Id\", \"b\"}, {tag = \"Dots\", \"...\"}}, {}}\r\n                        }\r\n                     }, get_node(\"function a(b, ...) end\"))\r\n         assert.same({line = 1, column = 15, end_column = 15, msg = \"expected argument near ')'\"}, get_error(\"function a(b, ) end\"))\r\n         assert.same({line = 1, column = 13, end_column = 13, msg = \"expected ')' near '.'\"}, get_error(\"function a(b.c) end\"))\r\n         assert.same({line = 2, column = 2, end_column = 2, msg = \"expected ')' (to close '(' on line 1) near '.'\"},\r\n            get_error(\"function a(\\nb.c) end\"))\r\n         assert.same({line = 1, column = 12, end_column = 12, msg = \"expected argument near '('\"}, get_error(\"function a((b)) end\"))\r\n         assert.same({line = 1, column = 15, end_column = 15, msg = \"expected ')' near ','\"}, get_error(\"function a(..., ...) end\"))\r\n      end",
    "type": "function"
  }, {
    "id": 150,
    "text": "assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Function\", {{tag = \"Id\", \"b\"}}, {}}\r\n                        }\r\n                     }, get_node(\"function a(b) end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Function\", {{tag = \"Id\", \"b\"}, {tag = \"Id\", \"c\"}}, {}}\r\n                        }\r\n                     }, get_node(\"function a(b, c) end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 152,
    "text": "assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Function\", {{tag = \"Id\", \"b\"}, {tag = \"Dots\", \"...\"}}, {}}\r\n                        }\r\n                     }, get_node(\"function a(b, ...) end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 153,
    "text": "assert.same({line = 1, column = 15, end_column = 15, msg = \"expected argument near ')'\"}, get_error(\"function a(b, ) end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 154,
    "text": "assert.same({line = 1, column = 13, end_column = 13, msg = \"expected ')' near '.'\"}, get_error(\"function a(b.c) end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 155,
    "text": "assert.same({line = 2, column = 2, end_column = 2, msg = \"expected ')' (to close '(' on line 1) near '.'\"},\r\n            get_error(\"function a(\\nb.c) end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 156,
    "text": "assert.same({line = 1, column = 12, end_column = 12, msg = \"expected argument near '('\"}, get_error(\"function a((b)) end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 157,
    "text": "assert.same({line = 1, column = 15, end_column = 15, msg = \"expected ')' near ','\"}, get_error(\"function a(..., ...) end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 158,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 159,
    "text": "function()\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\", {tag = \"Id\", \"a\"}, {tag = \"String\", \"b\"}}\r\n                        }, {\r\n                           {tag = \"Function\", {}, {}}\r\n                        }\r\n                     }, get_node(\"function a.b() end\"))\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\",\r\n                              {tag = \"Index\", {tag = \"Id\", \"a\"}, {tag = \"String\", \"b\"}},\r\n                              {tag = \"String\", \"c\"}\r\n                           }\r\n                        }, {\r\n                           {tag = \"Function\", {}, {}}\r\n                        }\r\n                     }, get_node(\"function a.b.c() end\"))\r\n         assert.same({line = 1, column = 11, end_column = 11, msg = \"expected '(' near '['\"}, get_error(\"function a[b]() end\"))\r\n         assert.same({line = 1, column = 12, end_column = 12, msg = \"expected identifier near '('\"}, get_error(\"function a.() end\"))\r\n      end",
    "type": "function"
  }, {
    "id": 160,
    "text": "assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\", {tag = \"Id\", \"a\"}, {tag = \"String\", \"b\"}}\r\n                        }, {\r\n                           {tag = \"Function\", {}, {}}\r\n                        }\r\n                     }, get_node(\"function a.b() end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 161,
    "text": "assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\",\r\n                              {tag = \"Index\", {tag = \"Id\", \"a\"}, {tag = \"String\", \"b\"}},\r\n                              {tag = \"String\", \"c\"}\r\n                           }\r\n                        }, {\r\n                           {tag = \"Function\", {}, {}}\r\n                        }\r\n                     }, get_node(\"function a.b.c() end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 162,
    "text": "assert.same({line = 1, column = 11, end_column = 11, msg = \"expected '(' near '['\"}, get_error(\"function a[b]() end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 163,
    "text": "assert.same({line = 1, column = 12, end_column = 12, msg = \"expected identifier near '('\"}, get_error(\"function a.() end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 164,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 165,
    "text": "function()\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\", {tag = \"Id\", \"a\"}, {tag = \"String\", \"b\"}}\r\n                        }, {\r\n                           {tag = \"Function\", {{tag = \"Id\", \"self\", implicit = true}}, {}}\r\n                        }\r\n                     }, get_node(\"function a:b() end\"))\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\",\r\n                              {tag = \"Index\", {tag = \"Id\", \"a\"}, {tag = \"String\", \"b\"}},\r\n                              {tag = \"String\", \"c\"}\r\n                           }\r\n                        }, {\r\n                           {tag = \"Function\", {{tag = \"Id\", \"self\", implicit = true}}, {}}\r\n                        }\r\n                     }, get_node(\"function a.b:c() end\"))\r\n         assert.same({line = 1, column = 13, end_column = 13, msg = \"expected '(' near '.'\"}, get_error(\"function a:b.c() end\"))\r\n      end",
    "type": "function"
  }, {
    "id": 166,
    "text": "assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\", {tag = \"Id\", \"a\"}, {tag = \"String\", \"b\"}}\r\n                        }, {\r\n                           {tag = \"Function\", {{tag = \"Id\", \"self\", implicit = true}}, {}}\r\n                        }\r\n                     }, get_node(\"function a:b() end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 167,
    "text": "assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\",\r\n                              {tag = \"Index\", {tag = \"Id\", \"a\"}, {tag = \"String\", \"b\"}},\r\n                              {tag = \"String\", \"c\"}\r\n                           }\r\n                        }, {\r\n                           {tag = \"Function\", {{tag = \"Id\", \"self\", implicit = true}}, {}}\r\n                        }\r\n                     }, get_node(\"function a.b:c() end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 168,
    "text": "assert.same({line = 1, column = 13, end_column = 13, msg = \"expected '(' near '.'\"}, get_error(\"function a:b.c() end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 169,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 170,
    "text": "function()\r\n      it(\"parses simple function correctly\", function()\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Function\", {}, {}}\r\n                        }\r\n                     }, get_node(\"function a() end\"))\r\n         assert.same({line = 1, column = 9, end_column = 9, msg = \"expected identifier near <eof>\"}, get_error(\"function\"))\r\n         assert.same({line = 1, column = 11, end_column = 11, msg = \"expected '(' near <eof>\"}, get_error(\"function a\"))\r\n         assert.same({line = 1, column = 12, end_column = 12, msg = \"expected argument near <eof>\"}, get_error(\"function a(\"))\r\n         assert.same({line = 1, column = 13, end_column = 13, msg = \"expected 'end' near <eof>\"}, get_error(\"function a()\"))\r\n         assert.same({line = 2, column = 2, end_column = 2, msg = \"expected 'end' (to close 'function' on line 1) near <eof>\"},\r\n            get_error(\"function a(\\n)\"))\r\n         assert.same({line = 1, column = 10, end_column = 10, msg = \"expected identifier near '('\"}, get_error(\"function (a)()\"))\r\n         assert.same({line = 1, column = 9, end_column = 9, msg = \"expected identifier near '('\"}, get_error(\"function() end\"))\r\n         assert.same({line = 1, column = 11, end_column = 11, msg = \"expected '(' near 'a'\"}, get_error(\"(function a() end)\"))\r\n         assert.same({line = 1, column = 18, end_column = 18, msg = \"expected expression near ')'\"}, get_error(\"function a() end()\"))\r\n      end)\r\n\r\n      it(\"parses simple function with arguments correctly\", function()\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Function\", {{tag = \"Id\", \"b\"}}, {}}\r\n                        }\r\n                     }, get_node(\"function a(b) end\"))\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Function\", {{tag = \"Id\", \"b\"}, {tag = \"Id\", \"c\"}}, {}}\r\n                        }\r\n                     }, get_node(\"function a(b, c) end\"))\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Function\", {{tag = \"Id\", \"b\"}, {tag = \"Dots\", \"...\"}}, {}}\r\n                        }\r\n                     }, get_node(\"function a(b, ...) end\"))\r\n         assert.same({line = 1, column = 15, end_column = 15, msg = \"expected argument near ')'\"}, get_error(\"function a(b, ) end\"))\r\n         assert.same({line = 1, column = 13, end_column = 13, msg = \"expected ')' near '.'\"}, get_error(\"function a(b.c) end\"))\r\n         assert.same({line = 2, column = 2, end_column = 2, msg = \"expected ')' (to close '(' on line 1) near '.'\"},\r\n            get_error(\"function a(\\nb.c) end\"))\r\n         assert.same({line = 1, column = 12, end_column = 12, msg = \"expected argument near '('\"}, get_error(\"function a((b)) end\"))\r\n         assert.same({line = 1, column = 15, end_column = 15, msg = \"expected ')' near ','\"}, get_error(\"function a(..., ...) end\"))\r\n      end)\r\n\r\n      it(\"parses field function correctly\", function()\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\", {tag = \"Id\", \"a\"}, {tag = \"String\", \"b\"}}\r\n                        }, {\r\n                           {tag = \"Function\", {}, {}}\r\n                        }\r\n                     }, get_node(\"function a.b() end\"))\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\",\r\n                              {tag = \"Index\", {tag = \"Id\", \"a\"}, {tag = \"String\", \"b\"}},\r\n                              {tag = \"String\", \"c\"}\r\n                           }\r\n                        }, {\r\n                           {tag = \"Function\", {}, {}}\r\n                        }\r\n                     }, get_node(\"function a.b.c() end\"))\r\n         assert.same({line = 1, column = 11, end_column = 11, msg = \"expected '(' near '['\"}, get_error(\"function a[b]() end\"))\r\n         assert.same({line = 1, column = 12, end_column = 12, msg = \"expected identifier near '('\"}, get_error(\"function a.() end\"))\r\n      end)\r\n\r\n      it(\"parses method function correctly\", function()\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\", {tag = \"Id\", \"a\"}, {tag = \"String\", \"b\"}}\r\n                        }, {\r\n                           {tag = \"Function\", {{tag = \"Id\", \"self\", implicit = true}}, {}}\r\n                        }\r\n                     }, get_node(\"function a:b() end\"))\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\",\r\n                              {tag = \"Index\", {tag = \"Id\", \"a\"}, {tag = \"String\", \"b\"}},\r\n                              {tag = \"String\", \"c\"}\r\n                           }\r\n                        }, {\r\n                           {tag = \"Function\", {{tag = \"Id\", \"self\", implicit = true}}, {}}\r\n                        }\r\n                     }, get_node(\"function a.b:c() end\"))\r\n         assert.same({line = 1, column = 13, end_column = 13, msg = \"expected '(' near '.'\"}, get_error(\"function a:b.c() end\"))\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 171,
    "text": "it(\"parses simple function correctly\", function()\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Function\", {}, {}}\r\n                        }\r\n                     }, get_node(\"function a() end\"))\r\n         assert.same({line = 1, column = 9, end_column = 9, msg = \"expected identifier near <eof>\"}, get_error(\"function\"))\r\n         assert.same({line = 1, column = 11, end_column = 11, msg = \"expected '(' near <eof>\"}, get_error(\"function a\"))\r\n         assert.same({line = 1, column = 12, end_column = 12, msg = \"expected argument near <eof>\"}, get_error(\"function a(\"))\r\n         assert.same({line = 1, column = 13, end_column = 13, msg = \"expected 'end' near <eof>\"}, get_error(\"function a()\"))\r\n         assert.same({line = 2, column = 2, end_column = 2, msg = \"expected 'end' (to close 'function' on line 1) near <eof>\"},\r\n            get_error(\"function a(\\n)\"))\r\n         assert.same({line = 1, column = 10, end_column = 10, msg = \"expected identifier near '('\"}, get_error(\"function (a)()\"))\r\n         assert.same({line = 1, column = 9, end_column = 9, msg = \"expected identifier near '('\"}, get_error(\"function() end\"))\r\n         assert.same({line = 1, column = 11, end_column = 11, msg = \"expected '(' near 'a'\"}, get_error(\"(function a() end)\"))\r\n         assert.same({line = 1, column = 18, end_column = 18, msg = \"expected expression near ')'\"}, get_error(\"function a() end()\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 172,
    "text": "it(\"parses simple function with arguments correctly\", function()\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Function\", {{tag = \"Id\", \"b\"}}, {}}\r\n                        }\r\n                     }, get_node(\"function a(b) end\"))\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Function\", {{tag = \"Id\", \"b\"}, {tag = \"Id\", \"c\"}}, {}}\r\n                        }\r\n                     }, get_node(\"function a(b, c) end\"))\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Function\", {{tag = \"Id\", \"b\"}, {tag = \"Dots\", \"...\"}}, {}}\r\n                        }\r\n                     }, get_node(\"function a(b, ...) end\"))\r\n         assert.same({line = 1, column = 15, end_column = 15, msg = \"expected argument near ')'\"}, get_error(\"function a(b, ) end\"))\r\n         assert.same({line = 1, column = 13, end_column = 13, msg = \"expected ')' near '.'\"}, get_error(\"function a(b.c) end\"))\r\n         assert.same({line = 2, column = 2, end_column = 2, msg = \"expected ')' (to close '(' on line 1) near '.'\"},\r\n            get_error(\"function a(\\nb.c) end\"))\r\n         assert.same({line = 1, column = 12, end_column = 12, msg = \"expected argument near '('\"}, get_error(\"function a((b)) end\"))\r\n         assert.same({line = 1, column = 15, end_column = 15, msg = \"expected ')' near ','\"}, get_error(\"function a(..., ...) end\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 173,
    "text": "it(\"parses field function correctly\", function()\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\", {tag = \"Id\", \"a\"}, {tag = \"String\", \"b\"}}\r\n                        }, {\r\n                           {tag = \"Function\", {}, {}}\r\n                        }\r\n                     }, get_node(\"function a.b() end\"))\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\",\r\n                              {tag = \"Index\", {tag = \"Id\", \"a\"}, {tag = \"String\", \"b\"}},\r\n                              {tag = \"String\", \"c\"}\r\n                           }\r\n                        }, {\r\n                           {tag = \"Function\", {}, {}}\r\n                        }\r\n                     }, get_node(\"function a.b.c() end\"))\r\n         assert.same({line = 1, column = 11, end_column = 11, msg = \"expected '(' near '['\"}, get_error(\"function a[b]() end\"))\r\n         assert.same({line = 1, column = 12, end_column = 12, msg = \"expected identifier near '('\"}, get_error(\"function a.() end\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 174,
    "text": "it(\"parses method function correctly\", function()\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\", {tag = \"Id\", \"a\"}, {tag = \"String\", \"b\"}}\r\n                        }, {\r\n                           {tag = \"Function\", {{tag = \"Id\", \"self\", implicit = true}}, {}}\r\n                        }\r\n                     }, get_node(\"function a:b() end\"))\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\",\r\n                              {tag = \"Index\", {tag = \"Id\", \"a\"}, {tag = \"String\", \"b\"}},\r\n                              {tag = \"String\", \"c\"}\r\n                           }\r\n                        }, {\r\n                           {tag = \"Function\", {{tag = \"Id\", \"self\", implicit = true}}, {}}\r\n                        }\r\n                     }, get_node(\"function a.b:c() end\"))\r\n         assert.same({line = 1, column = 13, end_column = 13, msg = \"expected '(' near '.'\"}, get_error(\"function a:b.c() end\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 175,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 176,
    "text": "function()\r\n         assert.same({tag = \"Local\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }\r\n                     }, get_node(\"local a\"))\r\n         assert.same({tag = \"Local\", {\r\n                           {tag = \"Id\", \"a\"},\r\n                           {tag = \"Id\", \"b\"}\r\n                        }\r\n                     }, get_node(\"local a, b\"))\r\n         assert.same({line = 1, column = 6, end_column = 6, msg = \"expected identifier near <eof>\"}, get_error(\"local\"))\r\n         assert.same({line = 1, column = 9, end_column = 9, msg = \"expected identifier near <eof>\"}, get_error(\"local a,\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected statement near '.'\"}, get_error(\"local a.b\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected statement near '['\"}, get_error(\"local a[b]\"))\r\n         assert.same({line = 1, column = 7, end_column = 7, msg = \"expected identifier near '('\"}, get_error(\"local (a)\"))\r\n      end",
    "type": "function"
  }, {
    "id": 177,
    "text": "assert.same({tag = \"Local\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }\r\n                     }, get_node(\"local a\"))",
    "type": "statement:functioncall"
  }, {
    "id": 178,
    "text": "assert.same({tag = \"Local\", {\r\n                           {tag = \"Id\", \"a\"},\r\n                           {tag = \"Id\", \"b\"}\r\n                        }\r\n                     }, get_node(\"local a, b\"))",
    "type": "statement:functioncall"
  }, {
    "id": 179,
    "text": "assert.same({line = 1, column = 6, end_column = 6, msg = \"expected identifier near <eof>\"}, get_error(\"local\"))",
    "type": "statement:functioncall"
  }, {
    "id": 180,
    "text": "assert.same({line = 1, column = 9, end_column = 9, msg = \"expected identifier near <eof>\"}, get_error(\"local a,\"))",
    "type": "statement:functioncall"
  }, {
    "id": 181,
    "text": "assert.same({line = 1, column = 8, end_column = 8, msg = \"expected statement near '.'\"}, get_error(\"local a.b\"))",
    "type": "statement:functioncall"
  }, {
    "id": 182,
    "text": "assert.same({line = 1, column = 8, end_column = 8, msg = \"expected statement near '['\"}, get_error(\"local a[b]\"))",
    "type": "statement:functioncall"
  }, {
    "id": 183,
    "text": "assert.same({line = 1, column = 7, end_column = 7, msg = \"expected identifier near '('\"}, get_error(\"local (a)\"))",
    "type": "statement:functioncall"
  }, {
    "id": 184,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 185,
    "text": "function()\r\n         assert.same({tag = \"Local\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"b\"}\r\n                        }\r\n                     }, get_node(\"local a = b\"))\r\n         assert.same({tag = \"Local\", {\r\n                           {tag = \"Id\", \"a\"},\r\n                           {tag = \"Id\", \"b\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"c\"},\r\n                           {tag = \"Id\", \"d\"}\r\n                        }\r\n                     }, get_node(\"local a, b = c, d\"))\r\n         assert.same({line = 1, column = 11, end_column = 11, msg = \"expected expression near <eof>\"}, get_error(\"local a = \"))\r\n         assert.same({line = 1, column = 13, end_column = 13, msg = \"expected expression near <eof>\"}, get_error(\"local a = b,\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected statement near '.'\"}, get_error(\"local a.b = c\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected statement near '['\"}, get_error(\"local a[b] = c\"))\r\n         assert.same({line = 1, column = 10, end_column = 10, msg = \"expected identifier near '('\"}, get_error(\"local a, (b) = c\"))\r\n      end",
    "type": "function"
  }, {
    "id": 186,
    "text": "assert.same({tag = \"Local\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"b\"}\r\n                        }\r\n                     }, get_node(\"local a = b\"))",
    "type": "statement:functioncall"
  }, {
    "id": 187,
    "text": "assert.same({tag = \"Local\", {\r\n                           {tag = \"Id\", \"a\"},\r\n                           {tag = \"Id\", \"b\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"c\"},\r\n                           {tag = \"Id\", \"d\"}\r\n                        }\r\n                     }, get_node(\"local a, b = c, d\"))",
    "type": "statement:functioncall"
  }, {
    "id": 188,
    "text": "assert.same({line = 1, column = 11, end_column = 11, msg = \"expected expression near <eof>\"}, get_error(\"local a = \"))",
    "type": "statement:functioncall"
  }, {
    "id": 189,
    "text": "assert.same({line = 1, column = 13, end_column = 13, msg = \"expected expression near <eof>\"}, get_error(\"local a = b,\"))",
    "type": "statement:functioncall"
  }, {
    "id": 190,
    "text": "assert.same({line = 1, column = 8, end_column = 8, msg = \"expected statement near '.'\"}, get_error(\"local a.b = c\"))",
    "type": "statement:functioncall"
  }, {
    "id": 191,
    "text": "assert.same({line = 1, column = 8, end_column = 8, msg = \"expected statement near '['\"}, get_error(\"local a[b] = c\"))",
    "type": "statement:functioncall"
  }, {
    "id": 192,
    "text": "assert.same({line = 1, column = 10, end_column = 10, msg = \"expected identifier near '('\"}, get_error(\"local a, (b) = c\"))",
    "type": "statement:functioncall"
  }, {
    "id": 193,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 194,
    "text": "function()\r\n         assert.same({tag = \"Localrec\",\r\n                        {tag = \"Id\", \"a\"}, \r\n                        {tag = \"Function\", {}, {}}\r\n                     }, get_node(\"local function a() end\"))\r\n         assert.same({line = 1, column = 15, end_column = 15, msg = \"expected identifier near <eof>\"}, get_error(\"local function\"))\r\n         assert.same({line = 1, column = 17, end_column = 17, msg = \"expected '(' near '.'\"}, get_error(\"local function a.b() end\"))\r\n      end",
    "type": "function"
  }, {
    "id": 195,
    "text": "assert.same({tag = \"Localrec\",\r\n                        {tag = \"Id\", \"a\"}, \r\n                        {tag = \"Function\", {}, {}}\r\n                     }, get_node(\"local function a() end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 196,
    "text": "assert.same({line = 1, column = 15, end_column = 15, msg = \"expected identifier near <eof>\"}, get_error(\"local function\"))",
    "type": "statement:functioncall"
  }, {
    "id": 197,
    "text": "assert.same({line = 1, column = 17, end_column = 17, msg = \"expected '(' near '.'\"}, get_error(\"local function a.b() end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 198,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 199,
    "text": "function()\r\n      it(\"parses simple local declaration correctly\", function()\r\n         assert.same({tag = \"Local\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }\r\n                     }, get_node(\"local a\"))\r\n         assert.same({tag = \"Local\", {\r\n                           {tag = \"Id\", \"a\"},\r\n                           {tag = \"Id\", \"b\"}\r\n                        }\r\n                     }, get_node(\"local a, b\"))\r\n         assert.same({line = 1, column = 6, end_column = 6, msg = \"expected identifier near <eof>\"}, get_error(\"local\"))\r\n         assert.same({line = 1, column = 9, end_column = 9, msg = \"expected identifier near <eof>\"}, get_error(\"local a,\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected statement near '.'\"}, get_error(\"local a.b\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected statement near '['\"}, get_error(\"local a[b]\"))\r\n         assert.same({line = 1, column = 7, end_column = 7, msg = \"expected identifier near '('\"}, get_error(\"local (a)\"))\r\n      end)\r\n\r\n      it(\"parses local declaration with assignment correctly\", function()\r\n         assert.same({tag = \"Local\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"b\"}\r\n                        }\r\n                     }, get_node(\"local a = b\"))\r\n         assert.same({tag = \"Local\", {\r\n                           {tag = \"Id\", \"a\"},\r\n                           {tag = \"Id\", \"b\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"c\"},\r\n                           {tag = \"Id\", \"d\"}\r\n                        }\r\n                     }, get_node(\"local a, b = c, d\"))\r\n         assert.same({line = 1, column = 11, end_column = 11, msg = \"expected expression near <eof>\"}, get_error(\"local a = \"))\r\n         assert.same({line = 1, column = 13, end_column = 13, msg = \"expected expression near <eof>\"}, get_error(\"local a = b,\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected statement near '.'\"}, get_error(\"local a.b = c\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected statement near '['\"}, get_error(\"local a[b] = c\"))\r\n         assert.same({line = 1, column = 10, end_column = 10, msg = \"expected identifier near '('\"}, get_error(\"local a, (b) = c\"))\r\n      end)\r\n\r\n      it(\"parses local function declaration correctly\", function()\r\n         assert.same({tag = \"Localrec\",\r\n                        {tag = \"Id\", \"a\"}, \r\n                        {tag = \"Function\", {}, {}}\r\n                     }, get_node(\"local function a() end\"))\r\n         assert.same({line = 1, column = 15, end_column = 15, msg = \"expected identifier near <eof>\"}, get_error(\"local function\"))\r\n         assert.same({line = 1, column = 17, end_column = 17, msg = \"expected '(' near '.'\"}, get_error(\"local function a.b() end\"))\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 200,
    "text": "it(\"parses simple local declaration correctly\", function()\r\n         assert.same({tag = \"Local\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }\r\n                     }, get_node(\"local a\"))\r\n         assert.same({tag = \"Local\", {\r\n                           {tag = \"Id\", \"a\"},\r\n                           {tag = \"Id\", \"b\"}\r\n                        }\r\n                     }, get_node(\"local a, b\"))\r\n         assert.same({line = 1, column = 6, end_column = 6, msg = \"expected identifier near <eof>\"}, get_error(\"local\"))\r\n         assert.same({line = 1, column = 9, end_column = 9, msg = \"expected identifier near <eof>\"}, get_error(\"local a,\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected statement near '.'\"}, get_error(\"local a.b\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected statement near '['\"}, get_error(\"local a[b]\"))\r\n         assert.same({line = 1, column = 7, end_column = 7, msg = \"expected identifier near '('\"}, get_error(\"local (a)\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 201,
    "text": "it(\"parses local declaration with assignment correctly\", function()\r\n         assert.same({tag = \"Local\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"b\"}\r\n                        }\r\n                     }, get_node(\"local a = b\"))\r\n         assert.same({tag = \"Local\", {\r\n                           {tag = \"Id\", \"a\"},\r\n                           {tag = \"Id\", \"b\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"c\"},\r\n                           {tag = \"Id\", \"d\"}\r\n                        }\r\n                     }, get_node(\"local a, b = c, d\"))\r\n         assert.same({line = 1, column = 11, end_column = 11, msg = \"expected expression near <eof>\"}, get_error(\"local a = \"))\r\n         assert.same({line = 1, column = 13, end_column = 13, msg = \"expected expression near <eof>\"}, get_error(\"local a = b,\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected statement near '.'\"}, get_error(\"local a.b = c\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected statement near '['\"}, get_error(\"local a[b] = c\"))\r\n         assert.same({line = 1, column = 10, end_column = 10, msg = \"expected identifier near '('\"}, get_error(\"local a, (b) = c\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 202,
    "text": "it(\"parses local function declaration correctly\", function()\r\n         assert.same({tag = \"Localrec\",\r\n                        {tag = \"Id\", \"a\"}, \r\n                        {tag = \"Function\", {}, {}}\r\n                     }, get_node(\"local function a() end\"))\r\n         assert.same({line = 1, column = 15, end_column = 15, msg = \"expected identifier near <eof>\"}, get_error(\"local function\"))\r\n         assert.same({line = 1, column = 17, end_column = 17, msg = \"expected '(' near '.'\"}, get_error(\"local function a.b() end\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 203,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 204,
    "text": "function()\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"b\"}\r\n                        }\r\n                     }, get_node(\"a = b\"))\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\", {tag = \"Id\", \"a\"}, {tag = \"String\", \"b\"}}\r\n                        }, {\r\n                           {tag = \"Id\", \"c\"}\r\n                        }\r\n                     }, get_node(\"a.b = c\"))\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\",\r\n                              {tag = \"Index\", {tag = \"Id\", \"a\"}, {tag = \"String\", \"b\"}},\r\n                              {tag = \"String\", \"c\"}\r\n                           }\r\n                        }, {\r\n                           {tag = \"Id\", \"d\"}\r\n                        }\r\n                     }, get_node(\"a.b.c = d\"))\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\",\r\n                              {tag = \"Invoke\",\r\n                                 {tag = \"Call\", {tag = \"Id\", \"f\"}},\r\n                                 {tag = \"String\", \"g\"}\r\n                              },\r\n                              {tag = \"Number\", \"9\"}\r\n                           }\r\n                        }, {\r\n                           {tag = \"Id\", \"d\"}\r\n                        }\r\n                     }, get_node(\"(f():g())[9] = d\"))\r\n         assert.same({line = 1, column = 2, end_column = 2, msg = \"expected '=' near <eof>\"}, get_error(\"a\"))\r\n         assert.same({line = 1, column = 5, end_column = 5, msg = \"expected expression near <eof>\"}, get_error(\"a = \"))\r\n         assert.same({line = 1, column = 5, end_column = 5, msg = \"expected statement near '='\"}, get_error(\"a() = b\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"expected statement near '('\"}, get_error(\"(a) = b\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"expected statement near '1'\"}, get_error(\"1 = b\"))\r\n      end",
    "type": "function"
  }, {
    "id": 205,
    "text": "assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"b\"}\r\n                        }\r\n                     }, get_node(\"a = b\"))",
    "type": "statement:functioncall"
  }, {
    "id": 206,
    "text": "assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\", {tag = \"Id\", \"a\"}, {tag = \"String\", \"b\"}}\r\n                        }, {\r\n                           {tag = \"Id\", \"c\"}\r\n                        }\r\n                     }, get_node(\"a.b = c\"))",
    "type": "statement:functioncall"
  }, {
    "id": 207,
    "text": "assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\",\r\n                              {tag = \"Index\", {tag = \"Id\", \"a\"}, {tag = \"String\", \"b\"}},\r\n                              {tag = \"String\", \"c\"}\r\n                           }\r\n                        }, {\r\n                           {tag = \"Id\", \"d\"}\r\n                        }\r\n                     }, get_node(\"a.b.c = d\"))",
    "type": "statement:functioncall"
  }, {
    "id": 208,
    "text": "assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\",\r\n                              {tag = \"Invoke\",\r\n                                 {tag = \"Call\", {tag = \"Id\", \"f\"}},\r\n                                 {tag = \"String\", \"g\"}\r\n                              },\r\n                              {tag = \"Number\", \"9\"}\r\n                           }\r\n                        }, {\r\n                           {tag = \"Id\", \"d\"}\r\n                        }\r\n                     }, get_node(\"(f():g())[9] = d\"))",
    "type": "statement:functioncall"
  }, {
    "id": 209,
    "text": "assert.same({line = 1, column = 2, end_column = 2, msg = \"expected '=' near <eof>\"}, get_error(\"a\"))",
    "type": "statement:functioncall"
  }, {
    "id": 210,
    "text": "assert.same({line = 1, column = 5, end_column = 5, msg = \"expected expression near <eof>\"}, get_error(\"a = \"))",
    "type": "statement:functioncall"
  }, {
    "id": 211,
    "text": "assert.same({line = 1, column = 5, end_column = 5, msg = \"expected statement near '='\"}, get_error(\"a() = b\"))",
    "type": "statement:functioncall"
  }, {
    "id": 212,
    "text": "assert.same({line = 1, column = 1, end_column = 1, msg = \"expected statement near '('\"}, get_error(\"(a) = b\"))",
    "type": "statement:functioncall"
  }, {
    "id": 213,
    "text": "assert.same({line = 1, column = 1, end_column = 1, msg = \"expected statement near '1'\"}, get_error(\"1 = b\"))",
    "type": "statement:functioncall"
  }, {
    "id": 214,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 215,
    "text": "function()\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"},\r\n                           {tag = \"Id\", \"b\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"c\"},\r\n                           {tag = \"Id\", \"d\"}\r\n                        }\r\n                     }, get_node(\"a, b = c, d\"))\r\n         assert.same({line = 1, column = 5, end_column = 5, msg = \"expected '=' near <eof>\"}, get_error(\"a, b\"))\r\n         assert.same({line = 1, column = 4, end_column = 4, msg = \"expected identifier or field near '='\"}, get_error(\"a, = b\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected expression near <eof>\"}, get_error(\"a, b = \"))\r\n         assert.same({line = 1, column = 10, end_column = 10, msg = \"expected expression near <eof>\"}, get_error(\"a, b = c,\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected call or indexing near '='\"}, get_error(\"a, b() = c\"))\r\n         assert.same({line = 1, column = 4, end_column = 4, msg = \"expected identifier or field near '('\"}, get_error(\"a, (b) = c\"))\r\n      end",
    "type": "function"
  }, {
    "id": 216,
    "text": "assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"},\r\n                           {tag = \"Id\", \"b\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"c\"},\r\n                           {tag = \"Id\", \"d\"}\r\n                        }\r\n                     }, get_node(\"a, b = c, d\"))",
    "type": "statement:functioncall"
  }, {
    "id": 217,
    "text": "assert.same({line = 1, column = 5, end_column = 5, msg = \"expected '=' near <eof>\"}, get_error(\"a, b\"))",
    "type": "statement:functioncall"
  }, {
    "id": 218,
    "text": "assert.same({line = 1, column = 4, end_column = 4, msg = \"expected identifier or field near '='\"}, get_error(\"a, = b\"))",
    "type": "statement:functioncall"
  }, {
    "id": 219,
    "text": "assert.same({line = 1, column = 8, end_column = 8, msg = \"expected expression near <eof>\"}, get_error(\"a, b = \"))",
    "type": "statement:functioncall"
  }, {
    "id": 220,
    "text": "assert.same({line = 1, column = 10, end_column = 10, msg = \"expected expression near <eof>\"}, get_error(\"a, b = c,\"))",
    "type": "statement:functioncall"
  }, {
    "id": 221,
    "text": "assert.same({line = 1, column = 8, end_column = 8, msg = \"expected call or indexing near '='\"}, get_error(\"a, b() = c\"))",
    "type": "statement:functioncall"
  }, {
    "id": 222,
    "text": "assert.same({line = 1, column = 4, end_column = 4, msg = \"expected identifier or field near '('\"}, get_error(\"a, (b) = c\"))",
    "type": "statement:functioncall"
  }, {
    "id": 223,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 224,
    "text": "function()\r\n      it(\"parses single target assignment correctly\", function()\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"b\"}\r\n                        }\r\n                     }, get_node(\"a = b\"))\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\", {tag = \"Id\", \"a\"}, {tag = \"String\", \"b\"}}\r\n                        }, {\r\n                           {tag = \"Id\", \"c\"}\r\n                        }\r\n                     }, get_node(\"a.b = c\"))\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\",\r\n                              {tag = \"Index\", {tag = \"Id\", \"a\"}, {tag = \"String\", \"b\"}},\r\n                              {tag = \"String\", \"c\"}\r\n                           }\r\n                        }, {\r\n                           {tag = \"Id\", \"d\"}\r\n                        }\r\n                     }, get_node(\"a.b.c = d\"))\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\",\r\n                              {tag = \"Invoke\",\r\n                                 {tag = \"Call\", {tag = \"Id\", \"f\"}},\r\n                                 {tag = \"String\", \"g\"}\r\n                              },\r\n                              {tag = \"Number\", \"9\"}\r\n                           }\r\n                        }, {\r\n                           {tag = \"Id\", \"d\"}\r\n                        }\r\n                     }, get_node(\"(f():g())[9] = d\"))\r\n         assert.same({line = 1, column = 2, end_column = 2, msg = \"expected '=' near <eof>\"}, get_error(\"a\"))\r\n         assert.same({line = 1, column = 5, end_column = 5, msg = \"expected expression near <eof>\"}, get_error(\"a = \"))\r\n         assert.same({line = 1, column = 5, end_column = 5, msg = \"expected statement near '='\"}, get_error(\"a() = b\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"expected statement near '('\"}, get_error(\"(a) = b\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"expected statement near '1'\"}, get_error(\"1 = b\"))\r\n      end)\r\n\r\n      it(\"parses multi assignment correctly\", function()\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"},\r\n                           {tag = \"Id\", \"b\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"c\"},\r\n                           {tag = \"Id\", \"d\"}\r\n                        }\r\n                     }, get_node(\"a, b = c, d\"))\r\n         assert.same({line = 1, column = 5, end_column = 5, msg = \"expected '=' near <eof>\"}, get_error(\"a, b\"))\r\n         assert.same({line = 1, column = 4, end_column = 4, msg = \"expected identifier or field near '='\"}, get_error(\"a, = b\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected expression near <eof>\"}, get_error(\"a, b = \"))\r\n         assert.same({line = 1, column = 10, end_column = 10, msg = \"expected expression near <eof>\"}, get_error(\"a, b = c,\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected call or indexing near '='\"}, get_error(\"a, b() = c\"))\r\n         assert.same({line = 1, column = 4, end_column = 4, msg = \"expected identifier or field near '('\"}, get_error(\"a, (b) = c\"))\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 225,
    "text": "it(\"parses single target assignment correctly\", function()\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"b\"}\r\n                        }\r\n                     }, get_node(\"a = b\"))\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\", {tag = \"Id\", \"a\"}, {tag = \"String\", \"b\"}}\r\n                        }, {\r\n                           {tag = \"Id\", \"c\"}\r\n                        }\r\n                     }, get_node(\"a.b = c\"))\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\",\r\n                              {tag = \"Index\", {tag = \"Id\", \"a\"}, {tag = \"String\", \"b\"}},\r\n                              {tag = \"String\", \"c\"}\r\n                           }\r\n                        }, {\r\n                           {tag = \"Id\", \"d\"}\r\n                        }\r\n                     }, get_node(\"a.b.c = d\"))\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\",\r\n                              {tag = \"Invoke\",\r\n                                 {tag = \"Call\", {tag = \"Id\", \"f\"}},\r\n                                 {tag = \"String\", \"g\"}\r\n                              },\r\n                              {tag = \"Number\", \"9\"}\r\n                           }\r\n                        }, {\r\n                           {tag = \"Id\", \"d\"}\r\n                        }\r\n                     }, get_node(\"(f():g())[9] = d\"))\r\n         assert.same({line = 1, column = 2, end_column = 2, msg = \"expected '=' near <eof>\"}, get_error(\"a\"))\r\n         assert.same({line = 1, column = 5, end_column = 5, msg = \"expected expression near <eof>\"}, get_error(\"a = \"))\r\n         assert.same({line = 1, column = 5, end_column = 5, msg = \"expected statement near '='\"}, get_error(\"a() = b\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"expected statement near '('\"}, get_error(\"(a) = b\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"expected statement near '1'\"}, get_error(\"1 = b\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 226,
    "text": "it(\"parses multi assignment correctly\", function()\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"},\r\n                           {tag = \"Id\", \"b\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"c\"},\r\n                           {tag = \"Id\", \"d\"}\r\n                        }\r\n                     }, get_node(\"a, b = c, d\"))\r\n         assert.same({line = 1, column = 5, end_column = 5, msg = \"expected '=' near <eof>\"}, get_error(\"a, b\"))\r\n         assert.same({line = 1, column = 4, end_column = 4, msg = \"expected identifier or field near '='\"}, get_error(\"a, = b\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected expression near <eof>\"}, get_error(\"a, b = \"))\r\n         assert.same({line = 1, column = 10, end_column = 10, msg = \"expected expression near <eof>\"}, get_error(\"a, b = c,\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected call or indexing near '='\"}, get_error(\"a, b() = c\"))\r\n         assert.same({line = 1, column = 4, end_column = 4, msg = \"expected identifier or field near '('\"}, get_error(\"a, (b) = c\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 227,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 228,
    "text": "function()\r\n         assert.same({tag = \"Call\",\r\n                        {tag = \"Id\", \"a\"}\r\n                     }, get_node(\"a()\"))\r\n         assert.same({tag = \"Call\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"}\r\n                     }, get_node(\"a'b'\"))\r\n         assert.same({tag = \"Call\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Table\"}\r\n                     }, get_node(\"a{}\"))\r\n         assert.same({tag = \"Call\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"}\r\n                     }, get_node(\"a(b)\"))\r\n         assert.same({tag = \"Call\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_node(\"a(b, c)\"))\r\n         assert.same({tag = \"Call\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"}\r\n                     }, get_node(\"(a)(b)\"))\r\n         assert.same({tag = \"Call\",\r\n                        {tag = \"Call\",\r\n                           {tag = \"Id\", \"a\"},\r\n                           {tag = \"Id\", \"b\"}\r\n                        }\r\n                     }, get_node(\"(a)(b)()\"))\r\n         assert.same({line = 1, column = 2, end_column = 2, msg = \"expected expression near ')'\"}, get_error(\"()()\"))\r\n         assert.same({line = 1, column = 3, end_column = 3, msg = \"expected expression near <eof>\"}, get_error(\"a(\"))\r\n         assert.same({line = 1, column = 4, end_column = 4, msg = \"expected ')' near <eof>\"}, get_error(\"a(b\"))\r\n         assert.same({line = 2, column = 2, end_column = 2, msg = \"expected ')' (to close '(' on line 1) near <eof>\"},\r\n            get_error(\"a(\\nb\"))\r\n         assert.same({line = 2, column = 1, end_column = 2, msg = \"expected ')' (to close '(' on line 1) near 'cc'\"},\r\n            get_error(\"(a\\ncc\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"expected statement near '1'\"}, get_error(\"1()\"))\r\n         assert.same({line = 1, column = 1, end_column = 5, msg = \"expected statement near ''foo''\"}, get_error(\"'foo'()\"))\r\n         assert.same({line = 1, column = 9, end_column = 9, msg = \"expected identifier near '('\"}, get_error(\"function() end ()\"))\r\n      end",
    "type": "function"
  }, {
    "id": 229,
    "text": "assert.same({tag = \"Call\",\r\n                        {tag = \"Id\", \"a\"}\r\n                     }, get_node(\"a()\"))",
    "type": "statement:functioncall"
  }, {
    "id": 230,
    "text": "assert.same({tag = \"Call\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"}\r\n                     }, get_node(\"a'b'\"))",
    "type": "statement:functioncall"
  }, {
    "id": 231,
    "text": "assert.same({tag = \"Call\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Table\"}\r\n                     }, get_node(\"a{}\"))",
    "type": "statement:functioncall"
  }, {
    "id": 232,
    "text": "assert.same({tag = \"Call\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"}\r\n                     }, get_node(\"a(b)\"))",
    "type": "statement:functioncall"
  }, {
    "id": 233,
    "text": "assert.same({tag = \"Call\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_node(\"a(b, c)\"))",
    "type": "statement:functioncall"
  }, {
    "id": 234,
    "text": "assert.same({tag = \"Call\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"}\r\n                     }, get_node(\"(a)(b)\"))",
    "type": "statement:functioncall"
  }, {
    "id": 235,
    "text": "assert.same({tag = \"Call\",\r\n                        {tag = \"Call\",\r\n                           {tag = \"Id\", \"a\"},\r\n                           {tag = \"Id\", \"b\"}\r\n                        }\r\n                     }, get_node(\"(a)(b)()\"))",
    "type": "statement:functioncall"
  }, {
    "id": 236,
    "text": "assert.same({line = 1, column = 2, end_column = 2, msg = \"expected expression near ')'\"}, get_error(\"()()\"))",
    "type": "statement:functioncall"
  }, {
    "id": 237,
    "text": "assert.same({line = 1, column = 3, end_column = 3, msg = \"expected expression near <eof>\"}, get_error(\"a(\"))",
    "type": "statement:functioncall"
  }, {
    "id": 238,
    "text": "assert.same({line = 1, column = 4, end_column = 4, msg = \"expected ')' near <eof>\"}, get_error(\"a(b\"))",
    "type": "statement:functioncall"
  }, {
    "id": 239,
    "text": "assert.same({line = 2, column = 2, end_column = 2, msg = \"expected ')' (to close '(' on line 1) near <eof>\"},\r\n            get_error(\"a(\\nb\"))",
    "type": "statement:functioncall"
  }, {
    "id": 240,
    "text": "assert.same({line = 2, column = 1, end_column = 2, msg = \"expected ')' (to close '(' on line 1) near 'cc'\"},\r\n            get_error(\"(a\\ncc\"))",
    "type": "statement:functioncall"
  }, {
    "id": 241,
    "text": "assert.same({line = 1, column = 1, end_column = 1, msg = \"expected statement near '1'\"}, get_error(\"1()\"))",
    "type": "statement:functioncall"
  }, {
    "id": 242,
    "text": "assert.same({line = 1, column = 1, end_column = 5, msg = \"expected statement near ''foo''\"}, get_error(\"'foo'()\"))",
    "type": "statement:functioncall"
  }, {
    "id": 243,
    "text": "assert.same({line = 1, column = 9, end_column = 9, msg = \"expected identifier near '('\"}, get_error(\"function() end ()\"))",
    "type": "statement:functioncall"
  }, {
    "id": 244,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 245,
    "text": "function()\r\n         assert.same({tag = \"Invoke\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"}\r\n                     }, get_node(\"a:b()\"))\r\n         assert.same({tag = \"Invoke\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"},\r\n                        {tag = \"String\", \"c\"}\r\n                     }, get_node(\"a:b'c'\"))\r\n         assert.same({tag = \"Invoke\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"},\r\n                        {tag = \"Table\"}\r\n                     }, get_node(\"a:b{}\"))\r\n         assert.same({tag = \"Invoke\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_node(\"a:b(c)\"))\r\n         assert.same({tag = \"Invoke\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"},\r\n                        {tag = \"Id\", \"c\"},\r\n                        {tag = \"Id\", \"d\"}\r\n                     }, get_node(\"a:b(c, d)\"))\r\n         assert.same({tag = \"Invoke\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_node(\"(a):b(c)\"))\r\n         assert.same({tag = \"Invoke\",\r\n                        {tag = \"Invoke\",\r\n                           {tag = \"Id\", \"a\"},\r\n                           {tag = \"String\", \"b\"}\r\n                        }, {tag = \"String\", \"c\"}\r\n                     }, get_node(\"a:b():c()\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"expected statement near '1'\"}, get_error(\"1:b()\"))\r\n         assert.same({line = 1, column = 1, end_column = 2, msg = \"expected statement near ''''\"}, get_error(\"'':a()\"))\r\n         assert.same({line = 1, column = 9, end_column = 9, msg = \"expected identifier near '('\"}, get_error(\"function()end:b()\"))\r\n         assert.same({line = 1, column = 4, end_column = 4, msg = \"expected method arguments near ':'\"}, get_error(\"a:b:c()\"))\r\n         assert.same({line = 1, column = 3, end_column = 3, msg = \"expected identifier near <eof>\"}, get_error(\"a:\"))\r\n      end",
    "type": "function"
  }, {
    "id": 246,
    "text": "assert.same({tag = \"Invoke\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"}\r\n                     }, get_node(\"a:b()\"))",
    "type": "statement:functioncall"
  }, {
    "id": 247,
    "text": "assert.same({tag = \"Invoke\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"},\r\n                        {tag = \"String\", \"c\"}\r\n                     }, get_node(\"a:b'c'\"))",
    "type": "statement:functioncall"
  }, {
    "id": 248,
    "text": "assert.same({tag = \"Invoke\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"},\r\n                        {tag = \"Table\"}\r\n                     }, get_node(\"a:b{}\"))",
    "type": "statement:functioncall"
  }, {
    "id": 249,
    "text": "assert.same({tag = \"Invoke\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_node(\"a:b(c)\"))",
    "type": "statement:functioncall"
  }, {
    "id": 250,
    "text": "assert.same({tag = \"Invoke\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"},\r\n                        {tag = \"Id\", \"c\"},\r\n                        {tag = \"Id\", \"d\"}\r\n                     }, get_node(\"a:b(c, d)\"))",
    "type": "statement:functioncall"
  }, {
    "id": 251,
    "text": "assert.same({tag = \"Invoke\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_node(\"(a):b(c)\"))",
    "type": "statement:functioncall"
  }, {
    "id": 252,
    "text": "assert.same({tag = \"Invoke\",\r\n                        {tag = \"Invoke\",\r\n                           {tag = \"Id\", \"a\"},\r\n                           {tag = \"String\", \"b\"}\r\n                        }, {tag = \"String\", \"c\"}\r\n                     }, get_node(\"a:b():c()\"))",
    "type": "statement:functioncall"
  }, {
    "id": 253,
    "text": "assert.same({line = 1, column = 1, end_column = 1, msg = \"expected statement near '1'\"}, get_error(\"1:b()\"))",
    "type": "statement:functioncall"
  }, {
    "id": 254,
    "text": "assert.same({line = 1, column = 1, end_column = 2, msg = \"expected statement near ''''\"}, get_error(\"'':a()\"))",
    "type": "statement:functioncall"
  }, {
    "id": 255,
    "text": "assert.same({line = 1, column = 9, end_column = 9, msg = \"expected identifier near '('\"}, get_error(\"function()end:b()\"))",
    "type": "statement:functioncall"
  }, {
    "id": 256,
    "text": "assert.same({line = 1, column = 4, end_column = 4, msg = \"expected method arguments near ':'\"}, get_error(\"a:b:c()\"))",
    "type": "statement:functioncall"
  }, {
    "id": 257,
    "text": "assert.same({line = 1, column = 3, end_column = 3, msg = \"expected identifier near <eof>\"}, get_error(\"a:\"))",
    "type": "statement:functioncall"
  }, {
    "id": 258,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 259,
    "text": "function()\r\n      it(\"parses calls correctly\", function()\r\n         assert.same({tag = \"Call\",\r\n                        {tag = \"Id\", \"a\"}\r\n                     }, get_node(\"a()\"))\r\n         assert.same({tag = \"Call\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"}\r\n                     }, get_node(\"a'b'\"))\r\n         assert.same({tag = \"Call\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Table\"}\r\n                     }, get_node(\"a{}\"))\r\n         assert.same({tag = \"Call\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"}\r\n                     }, get_node(\"a(b)\"))\r\n         assert.same({tag = \"Call\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_node(\"a(b, c)\"))\r\n         assert.same({tag = \"Call\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"}\r\n                     }, get_node(\"(a)(b)\"))\r\n         assert.same({tag = \"Call\",\r\n                        {tag = \"Call\",\r\n                           {tag = \"Id\", \"a\"},\r\n                           {tag = \"Id\", \"b\"}\r\n                        }\r\n                     }, get_node(\"(a)(b)()\"))\r\n         assert.same({line = 1, column = 2, end_column = 2, msg = \"expected expression near ')'\"}, get_error(\"()()\"))\r\n         assert.same({line = 1, column = 3, end_column = 3, msg = \"expected expression near <eof>\"}, get_error(\"a(\"))\r\n         assert.same({line = 1, column = 4, end_column = 4, msg = \"expected ')' near <eof>\"}, get_error(\"a(b\"))\r\n         assert.same({line = 2, column = 2, end_column = 2, msg = \"expected ')' (to close '(' on line 1) near <eof>\"},\r\n            get_error(\"a(\\nb\"))\r\n         assert.same({line = 2, column = 1, end_column = 2, msg = \"expected ')' (to close '(' on line 1) near 'cc'\"},\r\n            get_error(\"(a\\ncc\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"expected statement near '1'\"}, get_error(\"1()\"))\r\n         assert.same({line = 1, column = 1, end_column = 5, msg = \"expected statement near ''foo''\"}, get_error(\"'foo'()\"))\r\n         assert.same({line = 1, column = 9, end_column = 9, msg = \"expected identifier near '('\"}, get_error(\"function() end ()\"))\r\n      end)\r\n\r\n      it(\"parses method calls correctly\", function()\r\n         assert.same({tag = \"Invoke\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"}\r\n                     }, get_node(\"a:b()\"))\r\n         assert.same({tag = \"Invoke\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"},\r\n                        {tag = \"String\", \"c\"}\r\n                     }, get_node(\"a:b'c'\"))\r\n         assert.same({tag = \"Invoke\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"},\r\n                        {tag = \"Table\"}\r\n                     }, get_node(\"a:b{}\"))\r\n         assert.same({tag = \"Invoke\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_node(\"a:b(c)\"))\r\n         assert.same({tag = \"Invoke\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"},\r\n                        {tag = \"Id\", \"c\"},\r\n                        {tag = \"Id\", \"d\"}\r\n                     }, get_node(\"a:b(c, d)\"))\r\n         assert.same({tag = \"Invoke\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_node(\"(a):b(c)\"))\r\n         assert.same({tag = \"Invoke\",\r\n                        {tag = \"Invoke\",\r\n                           {tag = \"Id\", \"a\"},\r\n                           {tag = \"String\", \"b\"}\r\n                        }, {tag = \"String\", \"c\"}\r\n                     }, get_node(\"a:b():c()\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"expected statement near '1'\"}, get_error(\"1:b()\"))\r\n         assert.same({line = 1, column = 1, end_column = 2, msg = \"expected statement near ''''\"}, get_error(\"'':a()\"))\r\n         assert.same({line = 1, column = 9, end_column = 9, msg = \"expected identifier near '('\"}, get_error(\"function()end:b()\"))\r\n         assert.same({line = 1, column = 4, end_column = 4, msg = \"expected method arguments near ':'\"}, get_error(\"a:b:c()\"))\r\n         assert.same({line = 1, column = 3, end_column = 3, msg = \"expected identifier near <eof>\"}, get_error(\"a:\"))\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 260,
    "text": "it(\"parses calls correctly\", function()\r\n         assert.same({tag = \"Call\",\r\n                        {tag = \"Id\", \"a\"}\r\n                     }, get_node(\"a()\"))\r\n         assert.same({tag = \"Call\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"}\r\n                     }, get_node(\"a'b'\"))\r\n         assert.same({tag = \"Call\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Table\"}\r\n                     }, get_node(\"a{}\"))\r\n         assert.same({tag = \"Call\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"}\r\n                     }, get_node(\"a(b)\"))\r\n         assert.same({tag = \"Call\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_node(\"a(b, c)\"))\r\n         assert.same({tag = \"Call\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"}\r\n                     }, get_node(\"(a)(b)\"))\r\n         assert.same({tag = \"Call\",\r\n                        {tag = \"Call\",\r\n                           {tag = \"Id\", \"a\"},\r\n                           {tag = \"Id\", \"b\"}\r\n                        }\r\n                     }, get_node(\"(a)(b)()\"))\r\n         assert.same({line = 1, column = 2, end_column = 2, msg = \"expected expression near ')'\"}, get_error(\"()()\"))\r\n         assert.same({line = 1, column = 3, end_column = 3, msg = \"expected expression near <eof>\"}, get_error(\"a(\"))\r\n         assert.same({line = 1, column = 4, end_column = 4, msg = \"expected ')' near <eof>\"}, get_error(\"a(b\"))\r\n         assert.same({line = 2, column = 2, end_column = 2, msg = \"expected ')' (to close '(' on line 1) near <eof>\"},\r\n            get_error(\"a(\\nb\"))\r\n         assert.same({line = 2, column = 1, end_column = 2, msg = \"expected ')' (to close '(' on line 1) near 'cc'\"},\r\n            get_error(\"(a\\ncc\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"expected statement near '1'\"}, get_error(\"1()\"))\r\n         assert.same({line = 1, column = 1, end_column = 5, msg = \"expected statement near ''foo''\"}, get_error(\"'foo'()\"))\r\n         assert.same({line = 1, column = 9, end_column = 9, msg = \"expected identifier near '('\"}, get_error(\"function() end ()\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 261,
    "text": "it(\"parses method calls correctly\", function()\r\n         assert.same({tag = \"Invoke\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"}\r\n                     }, get_node(\"a:b()\"))\r\n         assert.same({tag = \"Invoke\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"},\r\n                        {tag = \"String\", \"c\"}\r\n                     }, get_node(\"a:b'c'\"))\r\n         assert.same({tag = \"Invoke\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"},\r\n                        {tag = \"Table\"}\r\n                     }, get_node(\"a:b{}\"))\r\n         assert.same({tag = \"Invoke\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_node(\"a:b(c)\"))\r\n         assert.same({tag = \"Invoke\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"},\r\n                        {tag = \"Id\", \"c\"},\r\n                        {tag = \"Id\", \"d\"}\r\n                     }, get_node(\"a:b(c, d)\"))\r\n         assert.same({tag = \"Invoke\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_node(\"(a):b(c)\"))\r\n         assert.same({tag = \"Invoke\",\r\n                        {tag = \"Invoke\",\r\n                           {tag = \"Id\", \"a\"},\r\n                           {tag = \"String\", \"b\"}\r\n                        }, {tag = \"String\", \"c\"}\r\n                     }, get_node(\"a:b():c()\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"expected statement near '1'\"}, get_error(\"1:b()\"))\r\n         assert.same({line = 1, column = 1, end_column = 2, msg = \"expected statement near ''''\"}, get_error(\"'':a()\"))\r\n         assert.same({line = 1, column = 9, end_column = 9, msg = \"expected identifier near '('\"}, get_error(\"function()end:b()\"))\r\n         assert.same({line = 1, column = 4, end_column = 4, msg = \"expected method arguments near ':'\"}, get_error(\"a:b:c()\"))\r\n         assert.same({line = 1, column = 3, end_column = 3, msg = \"expected identifier near <eof>\"}, get_error(\"a:\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 262,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 263,
    "text": "function()\r\n         assert.same({tag = \"Nil\"}, get_expr(\"nil\"))\r\n         assert.same({tag = \"True\"}, get_expr(\"true\"))\r\n         assert.same({tag = \"False\"}, get_expr(\"false\"))\r\n         assert.same({tag = \"Number\", \"1\"}, get_expr(\"1\"))\r\n         assert.same({tag = \"String\", \"1\"}, get_expr(\"'1'\"))\r\n         assert.same({tag = \"Table\"}, get_expr(\"{}\"))\r\n         assert.same({tag = \"Function\", {}, {}}, get_expr(\"function() end\"))\r\n         assert.same({tag = \"Dots\", \"...\"}, get_expr(\"...\"))\r\n      end",
    "type": "function"
  }, {
    "id": 264,
    "text": "assert.same({tag = \"Nil\"}, get_expr(\"nil\"))",
    "type": "statement:functioncall"
  }, {
    "id": 265,
    "text": "assert.same({tag = \"True\"}, get_expr(\"true\"))",
    "type": "statement:functioncall"
  }, {
    "id": 266,
    "text": "assert.same({tag = \"False\"}, get_expr(\"false\"))",
    "type": "statement:functioncall"
  }, {
    "id": 267,
    "text": "assert.same({tag = \"Number\", \"1\"}, get_expr(\"1\"))",
    "type": "statement:functioncall"
  }, {
    "id": 268,
    "text": "assert.same({tag = \"String\", \"1\"}, get_expr(\"'1'\"))",
    "type": "statement:functioncall"
  }, {
    "id": 269,
    "text": "assert.same({tag = \"Table\"}, get_expr(\"{}\"))",
    "type": "statement:functioncall"
  }, {
    "id": 270,
    "text": "assert.same({tag = \"Function\", {}, {}}, get_expr(\"function() end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 271,
    "text": "assert.same({tag = \"Dots\", \"...\"}, get_expr(\"...\"))",
    "type": "statement:functioncall"
  }, {
    "id": 272,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 273,
    "text": "function()\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_expr(\"{a, b, c}\"))\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Pair\", {tag = \"String\", \"b\"}, {tag = \"Id\", \"c\"}},\r\n                        {tag = \"Id\", \"d\"}\r\n                     }, get_expr(\"{a, b = c, d}\"))\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"String\", \"a\"},\r\n                        {tag = \"Pair\", {tag = \"Id\", \"b\"}, {tag = \"Id\", \"c\"}},\r\n                        {tag = \"Id\", \"d\"}\r\n                     }, get_expr(\"{[[a]], [b] = c, d}\"))\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_expr(\"{a; b, c}\"))\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_expr(\"{a; b, c,}\"))\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_expr(\"{a; b, c;}\"))\r\n         assert.same({line = 1, column = 9, end_column = 9, msg = \"expected expression near ';'\"}, get_error(\"return {;}\"))\r\n         assert.same({line = 1, column = 9, end_column = 9, msg = \"expected expression near <eof>\"}, get_error(\"return {\"))\r\n         assert.same({line = 1, column = 11, end_column = 13, msg = \"expected '}' near 'end'\"}, get_error(\"return {a end\"))\r\n         assert.same({line = 2, column = 1, end_column = 3, msg = \"expected '}' (to close '{' on line 1) near 'end'\"},\r\n            get_error(\"return {a\\nend\"))\r\n         assert.same({line = 1, column = 11, end_column = 11, msg = \"expected ']' near <eof>\"}, get_error(\"return {[a\"))\r\n         assert.same({line = 2, column = 2, end_column = 2, msg = \"expected ']' (to close '[' on line 1) near <eof>\"},\r\n            get_error(\"return {[\\na\"))\r\n         assert.same({line = 1, column = 11, end_column = 11, msg = \"expected expression near ','\"}, get_error(\"return {a,,}\"))\r\n         assert.same({line = 1, column = 13, end_column = 13, msg = \"expected expression near <eof>\"}, get_error(\"return {a = \"))\r\n      end",
    "type": "function"
  }, {
    "id": 274,
    "text": "assert.same({tag = \"Table\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_expr(\"{a, b, c}\"))",
    "type": "statement:functioncall"
  }, {
    "id": 275,
    "text": "assert.same({tag = \"Table\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Pair\", {tag = \"String\", \"b\"}, {tag = \"Id\", \"c\"}},\r\n                        {tag = \"Id\", \"d\"}\r\n                     }, get_expr(\"{a, b = c, d}\"))",
    "type": "statement:functioncall"
  }, {
    "id": 276,
    "text": "assert.same({tag = \"Table\",\r\n                        {tag = \"String\", \"a\"},\r\n                        {tag = \"Pair\", {tag = \"Id\", \"b\"}, {tag = \"Id\", \"c\"}},\r\n                        {tag = \"Id\", \"d\"}\r\n                     }, get_expr(\"{[[a]], [b] = c, d}\"))",
    "type": "statement:functioncall"
  }, {
    "id": 277,
    "text": "assert.same({tag = \"Table\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_expr(\"{a; b, c}\"))",
    "type": "statement:functioncall"
  }, {
    "id": 278,
    "text": "assert.same({tag = \"Table\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_expr(\"{a; b, c,}\"))",
    "type": "statement:functioncall"
  }, {
    "id": 279,
    "text": "assert.same({tag = \"Table\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_expr(\"{a; b, c;}\"))",
    "type": "statement:functioncall"
  }, {
    "id": 280,
    "text": "assert.same({line = 1, column = 9, end_column = 9, msg = \"expected expression near ';'\"}, get_error(\"return {;}\"))",
    "type": "statement:functioncall"
  }, {
    "id": 281,
    "text": "assert.same({line = 1, column = 9, end_column = 9, msg = \"expected expression near <eof>\"}, get_error(\"return {\"))",
    "type": "statement:functioncall"
  }, {
    "id": 282,
    "text": "assert.same({line = 1, column = 11, end_column = 13, msg = \"expected '}' near 'end'\"}, get_error(\"return {a end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 283,
    "text": "assert.same({line = 2, column = 1, end_column = 3, msg = \"expected '}' (to close '{' on line 1) near 'end'\"},\r\n            get_error(\"return {a\\nend\"))",
    "type": "statement:functioncall"
  }, {
    "id": 284,
    "text": "assert.same({line = 1, column = 11, end_column = 11, msg = \"expected ']' near <eof>\"}, get_error(\"return {[a\"))",
    "type": "statement:functioncall"
  }, {
    "id": 285,
    "text": "assert.same({line = 2, column = 2, end_column = 2, msg = \"expected ']' (to close '[' on line 1) near <eof>\"},\r\n            get_error(\"return {[\\na\"))",
    "type": "statement:functioncall"
  }, {
    "id": 286,
    "text": "assert.same({line = 1, column = 11, end_column = 11, msg = \"expected expression near ','\"}, get_error(\"return {a,,}\"))",
    "type": "statement:functioncall"
  }, {
    "id": 287,
    "text": "assert.same({line = 1, column = 13, end_column = 13, msg = \"expected expression near <eof>\"}, get_error(\"return {a = \"))",
    "type": "statement:functioncall"
  }, {
    "id": 288,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 289,
    "text": "function()\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Paren\",\r\n                           {tag = \"Call\",\r\n                              {tag = \"Id\", \"f\"}\r\n                           }\r\n                        }\r\n                     }, get_expr(\"{a, (f())}\"))\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Call\",\r\n                           {tag = \"Id\", \"f\"}\r\n                        },\r\n                        {tag = \"Id\", \"a\"}\r\n                     }, get_expr(\"{(f()), a}\"))\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Pair\",\r\n                           {tag = \"String\", \"a\"},\r\n                           {tag = \"Call\",\r\n                              {tag = \"Id\", \"f\"}\r\n                           }\r\n                        }\r\n                     }, get_expr(\"{a = (f())}\"))\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Call\",\r\n                           {tag = \"Id\", \"f\"}\r\n                        },\r\n                        {tag = \"Pair\",\r\n                           {tag = \"String\", \"a\"},\r\n                           {tag = \"Id\", \"b\"}\r\n                        }\r\n                     }, get_expr(\"{(f()), a = b}\"))\r\n      end",
    "type": "function"
  }, {
    "id": 290,
    "text": "assert.same({tag = \"Table\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Paren\",\r\n                           {tag = \"Call\",\r\n                              {tag = \"Id\", \"f\"}\r\n                           }\r\n                        }\r\n                     }, get_expr(\"{a, (f())}\"))",
    "type": "statement:functioncall"
  }, {
    "id": 291,
    "text": "assert.same({tag = \"Table\",\r\n                        {tag = \"Call\",\r\n                           {tag = \"Id\", \"f\"}\r\n                        },\r\n                        {tag = \"Id\", \"a\"}\r\n                     }, get_expr(\"{(f()), a}\"))",
    "type": "statement:functioncall"
  }, {
    "id": 292,
    "text": "assert.same({tag = \"Table\",\r\n                        {tag = \"Pair\",\r\n                           {tag = \"String\", \"a\"},\r\n                           {tag = \"Call\",\r\n                              {tag = \"Id\", \"f\"}\r\n                           }\r\n                        }\r\n                     }, get_expr(\"{a = (f())}\"))",
    "type": "statement:functioncall"
  }, {
    "id": 293,
    "text": "assert.same({tag = \"Table\",\r\n                        {tag = \"Call\",\r\n                           {tag = \"Id\", \"f\"}\r\n                        },\r\n                        {tag = \"Pair\",\r\n                           {tag = \"String\", \"a\"},\r\n                           {tag = \"Id\", \"b\"}\r\n                        }\r\n                     }, get_expr(\"{(f()), a = b}\"))",
    "type": "statement:functioncall"
  }, {
    "id": 294,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 295,
    "text": "function()\r\n         assert.same({tag = \"Op\", \"unm\",\r\n                        {tag = \"Number\", \"1\"}\r\n                     }, get_expr(\"-1\"))\r\n         assert.same({tag = \"Op\", \"add\",\r\n                        {tag = \"Op\", \"add\",\r\n                           {tag = \"Number\", \"1\"},\r\n                           {tag = \"Number\", \"2\"}\r\n                        },\r\n                        {tag = \"Number\", \"3\"}\r\n                     }, get_expr(\"1+2+3\"))\r\n         assert.same({tag = \"Op\", \"pow\",\r\n                        {tag = \"Number\", \"1\"},\r\n                        {tag = \"Op\", \"pow\",\r\n                           {tag = \"Number\", \"2\"},\r\n                           {tag = \"Number\", \"3\"}\r\n                        }\r\n                     }, get_expr(\"1^2^3\"))\r\n         assert.same({tag = \"Op\", \"concat\",\r\n                        {tag = \"String\", \"1\"},\r\n                        {tag = \"Op\", \"concat\",\r\n                           {tag = \"String\", \"2\"},\r\n                           {tag = \"String\", \"3\"}\r\n                        }\r\n                     }, get_expr(\"'1'..'2'..'3'\"))\r\n      end",
    "type": "function"
  }, {
    "id": 296,
    "text": "assert.same({tag = \"Op\", \"unm\",\r\n                        {tag = \"Number\", \"1\"}\r\n                     }, get_expr(\"-1\"))",
    "type": "statement:functioncall"
  }, {
    "id": 297,
    "text": "assert.same({tag = \"Op\", \"add\",\r\n                        {tag = \"Op\", \"add\",\r\n                           {tag = \"Number\", \"1\"},\r\n                           {tag = \"Number\", \"2\"}\r\n                        },\r\n                        {tag = \"Number\", \"3\"}\r\n                     }, get_expr(\"1+2+3\"))",
    "type": "statement:functioncall"
  }, {
    "id": 298,
    "text": "assert.same({tag = \"Op\", \"pow\",\r\n                        {tag = \"Number\", \"1\"},\r\n                        {tag = \"Op\", \"pow\",\r\n                           {tag = \"Number\", \"2\"},\r\n                           {tag = \"Number\", \"3\"}\r\n                        }\r\n                     }, get_expr(\"1^2^3\"))",
    "type": "statement:functioncall"
  }, {
    "id": 299,
    "text": "assert.same({tag = \"Op\", \"concat\",\r\n                        {tag = \"String\", \"1\"},\r\n                        {tag = \"Op\", \"concat\",\r\n                           {tag = \"String\", \"2\"},\r\n                           {tag = \"String\", \"3\"}\r\n                        }\r\n                     }, get_expr(\"'1'..'2'..'3'\"))",
    "type": "statement:functioncall"
  }, {
    "id": 300,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 301,
    "text": "function()\r\n         assert.same({tag = \"Op\", \"add\",\r\n                        {tag = \"Op\", \"unm\",\r\n                           {tag = \"Number\", \"1\"}\r\n                        },\r\n                        {tag = \"Op\", \"mul\",\r\n                           {tag = \"Number\", \"2\"},\r\n                           {tag = \"Op\", \"pow\",\r\n                              {tag = \"Number\", \"3\"},\r\n                              {tag = \"Number\", \"4\"}\r\n                           }\r\n                        }\r\n                     }, get_expr(\"-1+2*3^4\"))\r\n         assert.same({tag = \"Op\", \"bor\",\r\n                        {tag = \"Op\", \"bor\",\r\n                           {tag = \"Op\", \"band\",\r\n                              {tag = \"Op\", \"shr\",\r\n                                 {tag = \"Number\", \"1\"},\r\n                                 {tag = \"Number\", \"2\"}\r\n                              },\r\n                              {tag = \"Op\", \"shl\",\r\n                                 {tag = \"Number\", \"3\"},\r\n                                 {tag = \"Number\", \"4\"}\r\n                              }\r\n                           },\r\n                           {tag = \"Op\", \"bxor\",\r\n                              {tag = \"Number\", \"5\"},\r\n                              {tag = \"Number\", \"6\"}\r\n                           }\r\n                        },\r\n                        {tag = \"Op\", \"bnot\",\r\n                           {tag = \"Number\", \"7\"}\r\n                        }\r\n                     }, get_expr(\"1 >> 2 & 3 << 4 | 5 ~ 6 | ~7\"))\r\n         assert.same({tag = \"Op\", \"or\",\r\n                        {tag = \"Op\", \"and\",\r\n                           {tag = \"Op\", \"eq\",\r\n                              {tag = \"Id\", \"a\"},\r\n                              {tag = \"Id\", \"b\"}\r\n                           },\r\n                           {tag = \"Op\", \"eq\",\r\n                              {tag = \"Id\", \"c\"},\r\n                              {tag = \"Id\", \"d\"}\r\n                           }\r\n                        },\r\n                        {tag = \"Op\", \"ne\",\r\n                           {tag = \"Id\", \"e\"},\r\n                           {tag = \"Id\", \"f\"}\r\n                        }\r\n                     }, get_expr(\"a == b and c == d or e ~= f\"))\r\n      end",
    "type": "function"
  }, {
    "id": 302,
    "text": "assert.same({tag = \"Op\", \"add\",\r\n                        {tag = \"Op\", \"unm\",\r\n                           {tag = \"Number\", \"1\"}\r\n                        },\r\n                        {tag = \"Op\", \"mul\",\r\n                           {tag = \"Number\", \"2\"},\r\n                           {tag = \"Op\", \"pow\",\r\n                              {tag = \"Number\", \"3\"},\r\n                              {tag = \"Number\", \"4\"}\r\n                           }\r\n                        }\r\n                     }, get_expr(\"-1+2*3^4\"))",
    "type": "statement:functioncall"
  }, {
    "id": 303,
    "text": "assert.same({tag = \"Op\", \"bor\",\r\n                        {tag = \"Op\", \"bor\",\r\n                           {tag = \"Op\", \"band\",\r\n                              {tag = \"Op\", \"shr\",\r\n                                 {tag = \"Number\", \"1\"},\r\n                                 {tag = \"Number\", \"2\"}\r\n                              },\r\n                              {tag = \"Op\", \"shl\",\r\n                                 {tag = \"Number\", \"3\"},\r\n                                 {tag = \"Number\", \"4\"}\r\n                              }\r\n                           },\r\n                           {tag = \"Op\", \"bxor\",\r\n                              {tag = \"Number\", \"5\"},\r\n                              {tag = \"Number\", \"6\"}\r\n                           }\r\n                        },\r\n                        {tag = \"Op\", \"bnot\",\r\n                           {tag = \"Number\", \"7\"}\r\n                        }\r\n                     }, get_expr(\"1 >> 2 & 3 << 4 | 5 ~ 6 | ~7\"))",
    "type": "statement:functioncall"
  }, {
    "id": 304,
    "text": "assert.same({tag = \"Op\", \"or\",\r\n                        {tag = \"Op\", \"and\",\r\n                           {tag = \"Op\", \"eq\",\r\n                              {tag = \"Id\", \"a\"},\r\n                              {tag = \"Id\", \"b\"}\r\n                           },\r\n                           {tag = \"Op\", \"eq\",\r\n                              {tag = \"Id\", \"c\"},\r\n                              {tag = \"Id\", \"d\"}\r\n                           }\r\n                        },\r\n                        {tag = \"Op\", \"ne\",\r\n                           {tag = \"Id\", \"e\"},\r\n                           {tag = \"Id\", \"f\"}\r\n                        }\r\n                     }, get_expr(\"a == b and c == d or e ~= f\"))",
    "type": "statement:functioncall"
  }, {
    "id": 305,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 306,
    "text": "function()\r\n         assert.same({tag = \"Return\",\r\n                        {tag = \"Dots\", \"...\"},\r\n                        {tag = \"Paren\", {tag = \"Dots\", \"...\"}}\r\n                     }, get_node(\"return (...), (...)\"))\r\n         assert.same({tag = \"Return\",\r\n                        {tag = \"Dots\", \"...\"},\r\n                        {tag = \"Dots\", \"...\"}\r\n                     }, get_node(\"return (...), ...\"))\r\n         assert.same({tag = \"Return\",\r\n                        {tag = \"True\"},\r\n                        {tag = \"False\"}\r\n                     }, get_node(\"return (true), (false)\"))\r\n         assert.same({tag = \"Return\",\r\n                        {tag = \"Call\",\r\n                           {tag = \"Id\", \"f\"}\r\n                        },\r\n                        {tag = \"Paren\",\r\n                           {tag = \"Call\",\r\n                              {tag = \"Id\", \"g\"}\r\n                           }\r\n                        }\r\n                     }, get_node(\"return (f()), (g())\"))\r\n         assert.same({tag = \"Return\",\r\n                        {tag = \"Invoke\",\r\n                           {tag = \"Id\", \"f\"},\r\n                           {tag = \"String\", \"n\"}\r\n                        },\r\n                        {tag = \"Paren\",\r\n                           {tag = \"Invoke\",\r\n                              {tag = \"Id\", \"g\"},\r\n                              {tag = \"String\", \"m\"}\r\n                           }\r\n                        }\r\n                     }, get_node(\"return (f:n()), (g:m())\"))\r\n      end",
    "type": "function"
  }, {
    "id": 307,
    "text": "assert.same({tag = \"Return\",\r\n                        {tag = \"Dots\", \"...\"},\r\n                        {tag = \"Paren\", {tag = \"Dots\", \"...\"}}\r\n                     }, get_node(\"return (...), (...)\"))",
    "type": "statement:functioncall"
  }, {
    "id": 308,
    "text": "assert.same({tag = \"Return\",\r\n                        {tag = \"Dots\", \"...\"},\r\n                        {tag = \"Dots\", \"...\"}\r\n                     }, get_node(\"return (...), ...\"))",
    "type": "statement:functioncall"
  }, {
    "id": 309,
    "text": "assert.same({tag = \"Return\",\r\n                        {tag = \"True\"},\r\n                        {tag = \"False\"}\r\n                     }, get_node(\"return (true), (false)\"))",
    "type": "statement:functioncall"
  }, {
    "id": 310,
    "text": "assert.same({tag = \"Return\",\r\n                        {tag = \"Call\",\r\n                           {tag = \"Id\", \"f\"}\r\n                        },\r\n                        {tag = \"Paren\",\r\n                           {tag = \"Call\",\r\n                              {tag = \"Id\", \"g\"}\r\n                           }\r\n                        }\r\n                     }, get_node(\"return (f()), (g())\"))",
    "type": "statement:functioncall"
  }, {
    "id": 311,
    "text": "assert.same({tag = \"Return\",\r\n                        {tag = \"Invoke\",\r\n                           {tag = \"Id\", \"f\"},\r\n                           {tag = \"String\", \"n\"}\r\n                        },\r\n                        {tag = \"Paren\",\r\n                           {tag = \"Invoke\",\r\n                              {tag = \"Id\", \"g\"},\r\n                              {tag = \"String\", \"m\"}\r\n                           }\r\n                        }\r\n                     }, get_node(\"return (f:n()), (g:m())\"))",
    "type": "statement:functioncall"
  }, {
    "id": 312,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 313,
    "text": "function()\r\n      it(\"parses singleton expressions correctly\", function()\r\n         assert.same({tag = \"Nil\"}, get_expr(\"nil\"))\r\n         assert.same({tag = \"True\"}, get_expr(\"true\"))\r\n         assert.same({tag = \"False\"}, get_expr(\"false\"))\r\n         assert.same({tag = \"Number\", \"1\"}, get_expr(\"1\"))\r\n         assert.same({tag = \"String\", \"1\"}, get_expr(\"'1'\"))\r\n         assert.same({tag = \"Table\"}, get_expr(\"{}\"))\r\n         assert.same({tag = \"Function\", {}, {}}, get_expr(\"function() end\"))\r\n         assert.same({tag = \"Dots\", \"...\"}, get_expr(\"...\"))\r\n      end)\r\n\r\n      it(\"parses table constructors correctly\", function()\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_expr(\"{a, b, c}\"))\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Pair\", {tag = \"String\", \"b\"}, {tag = \"Id\", \"c\"}},\r\n                        {tag = \"Id\", \"d\"}\r\n                     }, get_expr(\"{a, b = c, d}\"))\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"String\", \"a\"},\r\n                        {tag = \"Pair\", {tag = \"Id\", \"b\"}, {tag = \"Id\", \"c\"}},\r\n                        {tag = \"Id\", \"d\"}\r\n                     }, get_expr(\"{[[a]], [b] = c, d}\"))\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_expr(\"{a; b, c}\"))\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_expr(\"{a; b, c,}\"))\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_expr(\"{a; b, c;}\"))\r\n         assert.same({line = 1, column = 9, end_column = 9, msg = \"expected expression near ';'\"}, get_error(\"return {;}\"))\r\n         assert.same({line = 1, column = 9, end_column = 9, msg = \"expected expression near <eof>\"}, get_error(\"return {\"))\r\n         assert.same({line = 1, column = 11, end_column = 13, msg = \"expected '}' near 'end'\"}, get_error(\"return {a end\"))\r\n         assert.same({line = 2, column = 1, end_column = 3, msg = \"expected '}' (to close '{' on line 1) near 'end'\"},\r\n            get_error(\"return {a\\nend\"))\r\n         assert.same({line = 1, column = 11, end_column = 11, msg = \"expected ']' near <eof>\"}, get_error(\"return {[a\"))\r\n         assert.same({line = 2, column = 2, end_column = 2, msg = \"expected ']' (to close '[' on line 1) near <eof>\"},\r\n            get_error(\"return {[\\na\"))\r\n         assert.same({line = 1, column = 11, end_column = 11, msg = \"expected expression near ','\"}, get_error(\"return {a,,}\"))\r\n         assert.same({line = 1, column = 13, end_column = 13, msg = \"expected expression near <eof>\"}, get_error(\"return {a = \"))\r\n      end)\r\n\r\n      it(\"wraps last element in table constructors in parens when needed\", function()\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Paren\",\r\n                           {tag = \"Call\",\r\n                              {tag = \"Id\", \"f\"}\r\n                           }\r\n                        }\r\n                     }, get_expr(\"{a, (f())}\"))\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Call\",\r\n                           {tag = \"Id\", \"f\"}\r\n                        },\r\n                        {tag = \"Id\", \"a\"}\r\n                     }, get_expr(\"{(f()), a}\"))\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Pair\",\r\n                           {tag = \"String\", \"a\"},\r\n                           {tag = \"Call\",\r\n                              {tag = \"Id\", \"f\"}\r\n                           }\r\n                        }\r\n                     }, get_expr(\"{a = (f())}\"))\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Call\",\r\n                           {tag = \"Id\", \"f\"}\r\n                        },\r\n                        {tag = \"Pair\",\r\n                           {tag = \"String\", \"a\"},\r\n                           {tag = \"Id\", \"b\"}\r\n                        }\r\n                     }, get_expr(\"{(f()), a = b}\"))\r\n      end)\r\n\r\n      it(\"parses simple expressions correctly\", function()\r\n         assert.same({tag = \"Op\", \"unm\",\r\n                        {tag = \"Number\", \"1\"}\r\n                     }, get_expr(\"-1\"))\r\n         assert.same({tag = \"Op\", \"add\",\r\n                        {tag = \"Op\", \"add\",\r\n                           {tag = \"Number\", \"1\"},\r\n                           {tag = \"Number\", \"2\"}\r\n                        },\r\n                        {tag = \"Number\", \"3\"}\r\n                     }, get_expr(\"1+2+3\"))\r\n         assert.same({tag = \"Op\", \"pow\",\r\n                        {tag = \"Number\", \"1\"},\r\n                        {tag = \"Op\", \"pow\",\r\n                           {tag = \"Number\", \"2\"},\r\n                           {tag = \"Number\", \"3\"}\r\n                        }\r\n                     }, get_expr(\"1^2^3\"))\r\n         assert.same({tag = \"Op\", \"concat\",\r\n                        {tag = \"String\", \"1\"},\r\n                        {tag = \"Op\", \"concat\",\r\n                           {tag = \"String\", \"2\"},\r\n                           {tag = \"String\", \"3\"}\r\n                        }\r\n                     }, get_expr(\"'1'..'2'..'3'\"))\r\n      end)\r\n\r\n      it(\"handles operator precedence correctly\", function()\r\n         assert.same({tag = \"Op\", \"add\",\r\n                        {tag = \"Op\", \"unm\",\r\n                           {tag = \"Number\", \"1\"}\r\n                        },\r\n                        {tag = \"Op\", \"mul\",\r\n                           {tag = \"Number\", \"2\"},\r\n                           {tag = \"Op\", \"pow\",\r\n                              {tag = \"Number\", \"3\"},\r\n                              {tag = \"Number\", \"4\"}\r\n                           }\r\n                        }\r\n                     }, get_expr(\"-1+2*3^4\"))\r\n         assert.same({tag = \"Op\", \"bor\",\r\n                        {tag = \"Op\", \"bor\",\r\n                           {tag = \"Op\", \"band\",\r\n                              {tag = \"Op\", \"shr\",\r\n                                 {tag = \"Number\", \"1\"},\r\n                                 {tag = \"Number\", \"2\"}\r\n                              },\r\n                              {tag = \"Op\", \"shl\",\r\n                                 {tag = \"Number\", \"3\"},\r\n                                 {tag = \"Number\", \"4\"}\r\n                              }\r\n                           },\r\n                           {tag = \"Op\", \"bxor\",\r\n                              {tag = \"Number\", \"5\"},\r\n                              {tag = \"Number\", \"6\"}\r\n                           }\r\n                        },\r\n                        {tag = \"Op\", \"bnot\",\r\n                           {tag = \"Number\", \"7\"}\r\n                        }\r\n                     }, get_expr(\"1 >> 2 & 3 << 4 | 5 ~ 6 | ~7\"))\r\n         assert.same({tag = \"Op\", \"or\",\r\n                        {tag = \"Op\", \"and\",\r\n                           {tag = \"Op\", \"eq\",\r\n                              {tag = \"Id\", \"a\"},\r\n                              {tag = \"Id\", \"b\"}\r\n                           },\r\n                           {tag = \"Op\", \"eq\",\r\n                              {tag = \"Id\", \"c\"},\r\n                              {tag = \"Id\", \"d\"}\r\n                           }\r\n                        },\r\n                        {tag = \"Op\", \"ne\",\r\n                           {tag = \"Id\", \"e\"},\r\n                           {tag = \"Id\", \"f\"}\r\n                        }\r\n                     }, get_expr(\"a == b and c == d or e ~= f\"))\r\n      end)\r\n\r\n      it(\"wraps last expression in a list in parens when needed\", function()\r\n         assert.same({tag = \"Return\",\r\n                        {tag = \"Dots\", \"...\"},\r\n                        {tag = \"Paren\", {tag = \"Dots\", \"...\"}}\r\n                     }, get_node(\"return (...), (...)\"))\r\n         assert.same({tag = \"Return\",\r\n                        {tag = \"Dots\", \"...\"},\r\n                        {tag = \"Dots\", \"...\"}\r\n                     }, get_node(\"return (...), ...\"))\r\n         assert.same({tag = \"Return\",\r\n                        {tag = \"True\"},\r\n                        {tag = \"False\"}\r\n                     }, get_node(\"return (true), (false)\"))\r\n         assert.same({tag = \"Return\",\r\n                        {tag = \"Call\",\r\n                           {tag = \"Id\", \"f\"}\r\n                        },\r\n                        {tag = \"Paren\",\r\n                           {tag = \"Call\",\r\n                              {tag = \"Id\", \"g\"}\r\n                           }\r\n                        }\r\n                     }, get_node(\"return (f()), (g())\"))\r\n         assert.same({tag = \"Return\",\r\n                        {tag = \"Invoke\",\r\n                           {tag = \"Id\", \"f\"},\r\n                           {tag = \"String\", \"n\"}\r\n                        },\r\n                        {tag = \"Paren\",\r\n                           {tag = \"Invoke\",\r\n                              {tag = \"Id\", \"g\"},\r\n                              {tag = \"String\", \"m\"}\r\n                           }\r\n                        }\r\n                     }, get_node(\"return (f:n()), (g:m())\"))\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 314,
    "text": "it(\"parses singleton expressions correctly\", function()\r\n         assert.same({tag = \"Nil\"}, get_expr(\"nil\"))\r\n         assert.same({tag = \"True\"}, get_expr(\"true\"))\r\n         assert.same({tag = \"False\"}, get_expr(\"false\"))\r\n         assert.same({tag = \"Number\", \"1\"}, get_expr(\"1\"))\r\n         assert.same({tag = \"String\", \"1\"}, get_expr(\"'1'\"))\r\n         assert.same({tag = \"Table\"}, get_expr(\"{}\"))\r\n         assert.same({tag = \"Function\", {}, {}}, get_expr(\"function() end\"))\r\n         assert.same({tag = \"Dots\", \"...\"}, get_expr(\"...\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 315,
    "text": "it(\"parses table constructors correctly\", function()\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_expr(\"{a, b, c}\"))\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Pair\", {tag = \"String\", \"b\"}, {tag = \"Id\", \"c\"}},\r\n                        {tag = \"Id\", \"d\"}\r\n                     }, get_expr(\"{a, b = c, d}\"))\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"String\", \"a\"},\r\n                        {tag = \"Pair\", {tag = \"Id\", \"b\"}, {tag = \"Id\", \"c\"}},\r\n                        {tag = \"Id\", \"d\"}\r\n                     }, get_expr(\"{[[a]], [b] = c, d}\"))\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_expr(\"{a; b, c}\"))\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_expr(\"{a; b, c,}\"))\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_expr(\"{a; b, c;}\"))\r\n         assert.same({line = 1, column = 9, end_column = 9, msg = \"expected expression near ';'\"}, get_error(\"return {;}\"))\r\n         assert.same({line = 1, column = 9, end_column = 9, msg = \"expected expression near <eof>\"}, get_error(\"return {\"))\r\n         assert.same({line = 1, column = 11, end_column = 13, msg = \"expected '}' near 'end'\"}, get_error(\"return {a end\"))\r\n         assert.same({line = 2, column = 1, end_column = 3, msg = \"expected '}' (to close '{' on line 1) near 'end'\"},\r\n            get_error(\"return {a\\nend\"))\r\n         assert.same({line = 1, column = 11, end_column = 11, msg = \"expected ']' near <eof>\"}, get_error(\"return {[a\"))\r\n         assert.same({line = 2, column = 2, end_column = 2, msg = \"expected ']' (to close '[' on line 1) near <eof>\"},\r\n            get_error(\"return {[\\na\"))\r\n         assert.same({line = 1, column = 11, end_column = 11, msg = \"expected expression near ','\"}, get_error(\"return {a,,}\"))\r\n         assert.same({line = 1, column = 13, end_column = 13, msg = \"expected expression near <eof>\"}, get_error(\"return {a = \"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 316,
    "text": "it(\"wraps last element in table constructors in parens when needed\", function()\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Paren\",\r\n                           {tag = \"Call\",\r\n                              {tag = \"Id\", \"f\"}\r\n                           }\r\n                        }\r\n                     }, get_expr(\"{a, (f())}\"))\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Call\",\r\n                           {tag = \"Id\", \"f\"}\r\n                        },\r\n                        {tag = \"Id\", \"a\"}\r\n                     }, get_expr(\"{(f()), a}\"))\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Pair\",\r\n                           {tag = \"String\", \"a\"},\r\n                           {tag = \"Call\",\r\n                              {tag = \"Id\", \"f\"}\r\n                           }\r\n                        }\r\n                     }, get_expr(\"{a = (f())}\"))\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Call\",\r\n                           {tag = \"Id\", \"f\"}\r\n                        },\r\n                        {tag = \"Pair\",\r\n                           {tag = \"String\", \"a\"},\r\n                           {tag = \"Id\", \"b\"}\r\n                        }\r\n                     }, get_expr(\"{(f()), a = b}\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 317,
    "text": "it(\"parses simple expressions correctly\", function()\r\n         assert.same({tag = \"Op\", \"unm\",\r\n                        {tag = \"Number\", \"1\"}\r\n                     }, get_expr(\"-1\"))\r\n         assert.same({tag = \"Op\", \"add\",\r\n                        {tag = \"Op\", \"add\",\r\n                           {tag = \"Number\", \"1\"},\r\n                           {tag = \"Number\", \"2\"}\r\n                        },\r\n                        {tag = \"Number\", \"3\"}\r\n                     }, get_expr(\"1+2+3\"))\r\n         assert.same({tag = \"Op\", \"pow\",\r\n                        {tag = \"Number\", \"1\"},\r\n                        {tag = \"Op\", \"pow\",\r\n                           {tag = \"Number\", \"2\"},\r\n                           {tag = \"Number\", \"3\"}\r\n                        }\r\n                     }, get_expr(\"1^2^3\"))\r\n         assert.same({tag = \"Op\", \"concat\",\r\n                        {tag = \"String\", \"1\"},\r\n                        {tag = \"Op\", \"concat\",\r\n                           {tag = \"String\", \"2\"},\r\n                           {tag = \"String\", \"3\"}\r\n                        }\r\n                     }, get_expr(\"'1'..'2'..'3'\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 318,
    "text": "it(\"handles operator precedence correctly\", function()\r\n         assert.same({tag = \"Op\", \"add\",\r\n                        {tag = \"Op\", \"unm\",\r\n                           {tag = \"Number\", \"1\"}\r\n                        },\r\n                        {tag = \"Op\", \"mul\",\r\n                           {tag = \"Number\", \"2\"},\r\n                           {tag = \"Op\", \"pow\",\r\n                              {tag = \"Number\", \"3\"},\r\n                              {tag = \"Number\", \"4\"}\r\n                           }\r\n                        }\r\n                     }, get_expr(\"-1+2*3^4\"))\r\n         assert.same({tag = \"Op\", \"bor\",\r\n                        {tag = \"Op\", \"bor\",\r\n                           {tag = \"Op\", \"band\",\r\n                              {tag = \"Op\", \"shr\",\r\n                                 {tag = \"Number\", \"1\"},\r\n                                 {tag = \"Number\", \"2\"}\r\n                              },\r\n                              {tag = \"Op\", \"shl\",\r\n                                 {tag = \"Number\", \"3\"},\r\n                                 {tag = \"Number\", \"4\"}\r\n                              }\r\n                           },\r\n                           {tag = \"Op\", \"bxor\",\r\n                              {tag = \"Number\", \"5\"},\r\n                              {tag = \"Number\", \"6\"}\r\n                           }\r\n                        },\r\n                        {tag = \"Op\", \"bnot\",\r\n                           {tag = \"Number\", \"7\"}\r\n                        }\r\n                     }, get_expr(\"1 >> 2 & 3 << 4 | 5 ~ 6 | ~7\"))\r\n         assert.same({tag = \"Op\", \"or\",\r\n                        {tag = \"Op\", \"and\",\r\n                           {tag = \"Op\", \"eq\",\r\n                              {tag = \"Id\", \"a\"},\r\n                              {tag = \"Id\", \"b\"}\r\n                           },\r\n                           {tag = \"Op\", \"eq\",\r\n                              {tag = \"Id\", \"c\"},\r\n                              {tag = \"Id\", \"d\"}\r\n                           }\r\n                        },\r\n                        {tag = \"Op\", \"ne\",\r\n                           {tag = \"Id\", \"e\"},\r\n                           {tag = \"Id\", \"f\"}\r\n                        }\r\n                     }, get_expr(\"a == b and c == d or e ~= f\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 319,
    "text": "it(\"wraps last expression in a list in parens when needed\", function()\r\n         assert.same({tag = \"Return\",\r\n                        {tag = \"Dots\", \"...\"},\r\n                        {tag = \"Paren\", {tag = \"Dots\", \"...\"}}\r\n                     }, get_node(\"return (...), (...)\"))\r\n         assert.same({tag = \"Return\",\r\n                        {tag = \"Dots\", \"...\"},\r\n                        {tag = \"Dots\", \"...\"}\r\n                     }, get_node(\"return (...), ...\"))\r\n         assert.same({tag = \"Return\",\r\n                        {tag = \"True\"},\r\n                        {tag = \"False\"}\r\n                     }, get_node(\"return (true), (false)\"))\r\n         assert.same({tag = \"Return\",\r\n                        {tag = \"Call\",\r\n                           {tag = \"Id\", \"f\"}\r\n                        },\r\n                        {tag = \"Paren\",\r\n                           {tag = \"Call\",\r\n                              {tag = \"Id\", \"g\"}\r\n                           }\r\n                        }\r\n                     }, get_node(\"return (f()), (g())\"))\r\n         assert.same({tag = \"Return\",\r\n                        {tag = \"Invoke\",\r\n                           {tag = \"Id\", \"f\"},\r\n                           {tag = \"String\", \"n\"}\r\n                        },\r\n                        {tag = \"Paren\",\r\n                           {tag = \"Invoke\",\r\n                              {tag = \"Id\", \"g\"},\r\n                              {tag = \"String\", \"m\"}\r\n                           }\r\n                        }\r\n                     }, get_node(\"return (f:n()), (g:m())\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 320,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 321,
    "text": "function()\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"b\"}\r\n                        }\r\n                     }, get_node(\";;;a = b;--[[]];--;\"))\r\n      end",
    "type": "function"
  }, {
    "id": 322,
    "text": "assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"b\"}\r\n                        }\r\n                     }, get_node(\";;;a = b;--[[]];--;\"))",
    "type": "statement:functioncall"
  }, {
    "id": 323,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 324,
    "text": "function()\r\n         assert.same({line = 1, column = 8, end_column = 12, msg = \"expected expression near 'break'\"}, get_error(\"return break\"))\r\n         assert.same({line = 1, column = 9, end_column = 13, msg = \"expected end of block near 'break'\"}, get_error(\"return; break\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected end of block near ';'\"}, get_error(\"return;;\"))\r\n         assert.same({line = 1, column = 10, end_column = 14, msg = \"expected end of block near 'break'\"}, get_error(\"return 1 break\"))\r\n         assert.same({line = 1, column = 11, end_column = 15, msg = \"expected end of block near 'break'\"}, get_error(\"return 1; break\"))\r\n         assert.same({line = 1, column = 13, end_column = 17, msg = \"expected end of block near 'break'\"}, get_error(\"return 1, 2 break\"))\r\n         assert.same({line = 1, column = 14, end_column = 18, msg = \"expected end of block near 'break'\"}, get_error(\"return 1, 2; break\"))\r\n      end",
    "type": "function"
  }, {
    "id": 325,
    "text": "assert.same({line = 1, column = 8, end_column = 12, msg = \"expected expression near 'break'\"}, get_error(\"return break\"))",
    "type": "statement:functioncall"
  }, {
    "id": 326,
    "text": "assert.same({line = 1, column = 9, end_column = 13, msg = \"expected end of block near 'break'\"}, get_error(\"return; break\"))",
    "type": "statement:functioncall"
  }, {
    "id": 327,
    "text": "assert.same({line = 1, column = 8, end_column = 8, msg = \"expected end of block near ';'\"}, get_error(\"return;;\"))",
    "type": "statement:functioncall"
  }, {
    "id": 328,
    "text": "assert.same({line = 1, column = 10, end_column = 14, msg = \"expected end of block near 'break'\"}, get_error(\"return 1 break\"))",
    "type": "statement:functioncall"
  }, {
    "id": 329,
    "text": "assert.same({line = 1, column = 11, end_column = 15, msg = \"expected end of block near 'break'\"}, get_error(\"return 1; break\"))",
    "type": "statement:functioncall"
  }, {
    "id": 330,
    "text": "assert.same({line = 1, column = 13, end_column = 17, msg = \"expected end of block near 'break'\"}, get_error(\"return 1, 2 break\"))",
    "type": "statement:functioncall"
  }, {
    "id": 331,
    "text": "assert.same({line = 1, column = 14, end_column = 18, msg = \"expected end of block near 'break'\"}, get_error(\"return 1, 2; break\"))",
    "type": "statement:functioncall"
  }, {
    "id": 332,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 333,
    "text": "function()\r\n         assert.same({\r\n                        {tag = \"Localrec\",\r\n                           {tag = \"Id\", \"f\"},\r\n                           {tag = \"Function\", {}, {\r\n                              {tag = \"While\",\r\n                                 {tag = \"True\"},\r\n                                 {\r\n                                    {tag = \"If\",\r\n                                       {tag = \"Nil\"},\r\n                                       {\r\n                                          {tag = \"Call\",\r\n                                             {tag = \"Id\", \"f\"}\r\n                                          },\r\n                                          {tag = \"Return\"}\r\n                                       },\r\n                                       {tag = \"False\"},\r\n                                       {\r\n                                          {tag = \"Call\",\r\n                                             {tag = \"Id\", \"g\"}\r\n                                          },\r\n                                          {tag = \"Break\"}\r\n                                       },\r\n                                       {\r\n                                          {tag = \"Call\",\r\n                                             {tag = \"Id\", \"h\"}\r\n                                          },\r\n                                          {tag = \"Repeat\",\r\n                                             {\r\n                                                {tag = \"Goto\", \"fail\"}\r\n                                             },\r\n                                             {tag = \"Id\", \"get_forked\"}\r\n                                          }\r\n                                       }\r\n                                    }\r\n                                 }\r\n                              },\r\n                              {tag = \"Label\", \"fail\"}\r\n                           }}\r\n                        },\r\n                        {tag = \"Do\",\r\n                           {tag = \"Fornum\",\r\n                              {tag = \"Id\", \"i\"},\r\n                              {tag = \"Number\", \"1\"},\r\n                              {tag = \"Number\", \"2\"},\r\n                              {\r\n                                 {tag = \"Call\",\r\n                                    {tag = \"Id\", \"nothing\"}\r\n                                 }\r\n                              }\r\n                           },\r\n                           {tag = \"Forin\",\r\n                              {\r\n                                 {tag = \"Id\", \"k\"},\r\n                                 {tag = \"Id\", \"v\"}\r\n                              },\r\n                              {\r\n                                 {tag = \"Call\",\r\n                                    {tag = \"Id\", \"pairs\"}\r\n                                 }\r\n                              },\r\n                              {\r\n                                 {tag = \"Call\",\r\n                                    {tag = \"Id\", \"print\"},\r\n                                    {tag = \"String\", \"bar\"}\r\n                                 },\r\n                                 {tag = \"Call\",\r\n                                    {tag = \"Id\", \"assert\"},\r\n                                    {tag = \"Number\", \"42\"}\r\n                                 }\r\n                              }\r\n                           },\r\n                           {tag = \"Return\"}\r\n                        },\r\n                     }, get_ast([[\r\nlocal function f()\r\n   while true do\r\n      if nil then\r\n         f()\r\n         return\r\n      elseif false then\r\n         g()\r\n         break\r\n      else\r\n         h()\r\n\r\n         repeat\r\n            goto fail\r\n         until get_forked\r\n      end\r\n   end\r\n\r\n   ::fail::\r\nend\r\n\r\ndo\r\n   for i=1, 2 do\r\n      nothing()\r\n   end\r\n\r\n   for k, v in pairs() do\r\n      print(\"bar\")\r\n      assert(42)\r\n   end\r\n\r\n   return\r\nend\r\n]]))\r\n\r\n      end",
    "type": "function"
  }, {
    "id": 334,
    "text": "assert.same({\r\n                        {tag = \"Localrec\",\r\n                           {tag = \"Id\", \"f\"},\r\n                           {tag = \"Function\", {}, {\r\n                              {tag = \"While\",\r\n                                 {tag = \"True\"},\r\n                                 {\r\n                                    {tag = \"If\",\r\n                                       {tag = \"Nil\"},\r\n                                       {\r\n                                          {tag = \"Call\",\r\n                                             {tag = \"Id\", \"f\"}\r\n                                          },\r\n                                          {tag = \"Return\"}\r\n                                       },\r\n                                       {tag = \"False\"},\r\n                                       {\r\n                                          {tag = \"Call\",\r\n                                             {tag = \"Id\", \"g\"}\r\n                                          },\r\n                                          {tag = \"Break\"}\r\n                                       },\r\n                                       {\r\n                                          {tag = \"Call\",\r\n                                             {tag = \"Id\", \"h\"}\r\n                                          },\r\n                                          {tag = \"Repeat\",\r\n                                             {\r\n                                                {tag = \"Goto\", \"fail\"}\r\n                                             },\r\n                                             {tag = \"Id\", \"get_forked\"}\r\n                                          }\r\n                                       }\r\n                                    }\r\n                                 }\r\n                              },\r\n                              {tag = \"Label\", \"fail\"}\r\n                           }}\r\n                        },\r\n                        {tag = \"Do\",\r\n                           {tag = \"Fornum\",\r\n                              {tag = \"Id\", \"i\"},\r\n                              {tag = \"Number\", \"1\"},\r\n                              {tag = \"Number\", \"2\"},\r\n                              {\r\n                                 {tag = \"Call\",\r\n                                    {tag = \"Id\", \"nothing\"}\r\n                                 }\r\n                              }\r\n                           },\r\n                           {tag = \"Forin\",\r\n                              {\r\n                                 {tag = \"Id\", \"k\"},\r\n                                 {tag = \"Id\", \"v\"}\r\n                              },\r\n                              {\r\n                                 {tag = \"Call\",\r\n                                    {tag = \"Id\", \"pairs\"}\r\n                                 }\r\n                              },\r\n                              {\r\n                                 {tag = \"Call\",\r\n                                    {tag = \"Id\", \"print\"},\r\n                                    {tag = \"String\", \"bar\"}\r\n                                 },\r\n                                 {tag = \"Call\",\r\n                                    {tag = \"Id\", \"assert\"},\r\n                                    {tag = \"Number\", \"42\"}\r\n                                 }\r\n                              }\r\n                           },\r\n                           {tag = \"Return\"}\r\n                        },\r\n                     }, get_ast([[\r\nlocal function f()\r\n   while true do\r\n      if nil then\r\n         f()\r\n         return\r\n      elseif false then\r\n         g()\r\n         break\r\n      else\r\n         h()\r\n\r\n         repeat\r\n            goto fail\r\n         until get_forked\r\n      end\r\n   end\r\n\r\n   ::fail::\r\nend\r\n\r\ndo\r\n   for i=1, 2 do\r\n      nothing()\r\n   end\r\n\r\n   for k, v in pairs() do\r\n      print(\"bar\")\r\n      assert(42)\r\n   end\r\n\r\n   return\r\nend\r\n]]))",
    "type": "statement:functioncall"
  }, {
    "id": 335,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 336,
    "text": "function()\r\n      it(\"considers semicolons and comments no-op statements\", function()\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"b\"}\r\n                        }\r\n                     }, get_node(\";;;a = b;--[[]];--;\"))\r\n      end)\r\n\r\n      it(\"does not allow statements after return\", function()\r\n         assert.same({line = 1, column = 8, end_column = 12, msg = \"expected expression near 'break'\"}, get_error(\"return break\"))\r\n         assert.same({line = 1, column = 9, end_column = 13, msg = \"expected end of block near 'break'\"}, get_error(\"return; break\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected end of block near ';'\"}, get_error(\"return;;\"))\r\n         assert.same({line = 1, column = 10, end_column = 14, msg = \"expected end of block near 'break'\"}, get_error(\"return 1 break\"))\r\n         assert.same({line = 1, column = 11, end_column = 15, msg = \"expected end of block near 'break'\"}, get_error(\"return 1; break\"))\r\n         assert.same({line = 1, column = 13, end_column = 17, msg = \"expected end of block near 'break'\"}, get_error(\"return 1, 2 break\"))\r\n         assert.same({line = 1, column = 14, end_column = 18, msg = \"expected end of block near 'break'\"}, get_error(\"return 1, 2; break\"))\r\n      end)\r\n\r\n      it(\"parses nested statements correctly\", function()\r\n         assert.same({\r\n                        {tag = \"Localrec\",\r\n                           {tag = \"Id\", \"f\"},\r\n                           {tag = \"Function\", {}, {\r\n                              {tag = \"While\",\r\n                                 {tag = \"True\"},\r\n                                 {\r\n                                    {tag = \"If\",\r\n                                       {tag = \"Nil\"},\r\n                                       {\r\n                                          {tag = \"Call\",\r\n                                             {tag = \"Id\", \"f\"}\r\n                                          },\r\n                                          {tag = \"Return\"}\r\n                                       },\r\n                                       {tag = \"False\"},\r\n                                       {\r\n                                          {tag = \"Call\",\r\n                                             {tag = \"Id\", \"g\"}\r\n                                          },\r\n                                          {tag = \"Break\"}\r\n                                       },\r\n                                       {\r\n                                          {tag = \"Call\",\r\n                                             {tag = \"Id\", \"h\"}\r\n                                          },\r\n                                          {tag = \"Repeat\",\r\n                                             {\r\n                                                {tag = \"Goto\", \"fail\"}\r\n                                             },\r\n                                             {tag = \"Id\", \"get_forked\"}\r\n                                          }\r\n                                       }\r\n                                    }\r\n                                 }\r\n                              },\r\n                              {tag = \"Label\", \"fail\"}\r\n                           }}\r\n                        },\r\n                        {tag = \"Do\",\r\n                           {tag = \"Fornum\",\r\n                              {tag = \"Id\", \"i\"},\r\n                              {tag = \"Number\", \"1\"},\r\n                              {tag = \"Number\", \"2\"},\r\n                              {\r\n                                 {tag = \"Call\",\r\n                                    {tag = \"Id\", \"nothing\"}\r\n                                 }\r\n                              }\r\n                           },\r\n                           {tag = \"Forin\",\r\n                              {\r\n                                 {tag = \"Id\", \"k\"},\r\n                                 {tag = \"Id\", \"v\"}\r\n                              },\r\n                              {\r\n                                 {tag = \"Call\",\r\n                                    {tag = \"Id\", \"pairs\"}\r\n                                 }\r\n                              },\r\n                              {\r\n                                 {tag = \"Call\",\r\n                                    {tag = \"Id\", \"print\"},\r\n                                    {tag = \"String\", \"bar\"}\r\n                                 },\r\n                                 {tag = \"Call\",\r\n                                    {tag = \"Id\", \"assert\"},\r\n                                    {tag = \"Number\", \"42\"}\r\n                                 }\r\n                              }\r\n                           },\r\n                           {tag = \"Return\"}\r\n                        },\r\n                     }, get_ast([[\r\nlocal function f()\r\n   while true do\r\n      if nil then\r\n         f()\r\n         return\r\n      elseif false then\r\n         g()\r\n         break\r\n      else\r\n         h()\r\n\r\n         repeat\r\n            goto fail\r\n         until get_forked\r\n      end\r\n   end\r\n\r\n   ::fail::\r\nend\r\n\r\ndo\r\n   for i=1, 2 do\r\n      nothing()\r\n   end\r\n\r\n   for k, v in pairs() do\r\n      print(\"bar\")\r\n      assert(42)\r\n   end\r\n\r\n   return\r\nend\r\n]]))\r\n\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 337,
    "text": "it(\"considers semicolons and comments no-op statements\", function()\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"b\"}\r\n                        }\r\n                     }, get_node(\";;;a = b;--[[]];--;\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 338,
    "text": "it(\"does not allow statements after return\", function()\r\n         assert.same({line = 1, column = 8, end_column = 12, msg = \"expected expression near 'break'\"}, get_error(\"return break\"))\r\n         assert.same({line = 1, column = 9, end_column = 13, msg = \"expected end of block near 'break'\"}, get_error(\"return; break\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected end of block near ';'\"}, get_error(\"return;;\"))\r\n         assert.same({line = 1, column = 10, end_column = 14, msg = \"expected end of block near 'break'\"}, get_error(\"return 1 break\"))\r\n         assert.same({line = 1, column = 11, end_column = 15, msg = \"expected end of block near 'break'\"}, get_error(\"return 1; break\"))\r\n         assert.same({line = 1, column = 13, end_column = 17, msg = \"expected end of block near 'break'\"}, get_error(\"return 1, 2 break\"))\r\n         assert.same({line = 1, column = 14, end_column = 18, msg = \"expected end of block near 'break'\"}, get_error(\"return 1, 2; break\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 339,
    "text": "it(\"parses nested statements correctly\", function()\r\n         assert.same({\r\n                        {tag = \"Localrec\",\r\n                           {tag = \"Id\", \"f\"},\r\n                           {tag = \"Function\", {}, {\r\n                              {tag = \"While\",\r\n                                 {tag = \"True\"},\r\n                                 {\r\n                                    {tag = \"If\",\r\n                                       {tag = \"Nil\"},\r\n                                       {\r\n                                          {tag = \"Call\",\r\n                                             {tag = \"Id\", \"f\"}\r\n                                          },\r\n                                          {tag = \"Return\"}\r\n                                       },\r\n                                       {tag = \"False\"},\r\n                                       {\r\n                                          {tag = \"Call\",\r\n                                             {tag = \"Id\", \"g\"}\r\n                                          },\r\n                                          {tag = \"Break\"}\r\n                                       },\r\n                                       {\r\n                                          {tag = \"Call\",\r\n                                             {tag = \"Id\", \"h\"}\r\n                                          },\r\n                                          {tag = \"Repeat\",\r\n                                             {\r\n                                                {tag = \"Goto\", \"fail\"}\r\n                                             },\r\n                                             {tag = \"Id\", \"get_forked\"}\r\n                                          }\r\n                                       }\r\n                                    }\r\n                                 }\r\n                              },\r\n                              {tag = \"Label\", \"fail\"}\r\n                           }}\r\n                        },\r\n                        {tag = \"Do\",\r\n                           {tag = \"Fornum\",\r\n                              {tag = \"Id\", \"i\"},\r\n                              {tag = \"Number\", \"1\"},\r\n                              {tag = \"Number\", \"2\"},\r\n                              {\r\n                                 {tag = \"Call\",\r\n                                    {tag = \"Id\", \"nothing\"}\r\n                                 }\r\n                              }\r\n                           },\r\n                           {tag = \"Forin\",\r\n                              {\r\n                                 {tag = \"Id\", \"k\"},\r\n                                 {tag = \"Id\", \"v\"}\r\n                              },\r\n                              {\r\n                                 {tag = \"Call\",\r\n                                    {tag = \"Id\", \"pairs\"}\r\n                                 }\r\n                              },\r\n                              {\r\n                                 {tag = \"Call\",\r\n                                    {tag = \"Id\", \"print\"},\r\n                                    {tag = \"String\", \"bar\"}\r\n                                 },\r\n                                 {tag = \"Call\",\r\n                                    {tag = \"Id\", \"assert\"},\r\n                                    {tag = \"Number\", \"42\"}\r\n                                 }\r\n                              }\r\n                           },\r\n                           {tag = \"Return\"}\r\n                        },\r\n                     }, get_ast([[\r\nlocal function f()\r\n   while true do\r\n      if nil then\r\n         f()\r\n         return\r\n      elseif false then\r\n         g()\r\n         break\r\n      else\r\n         h()\r\n\r\n         repeat\r\n            goto fail\r\n         until get_forked\r\n      end\r\n   end\r\n\r\n   ::fail::\r\nend\r\n\r\ndo\r\n   for i=1, 2 do\r\n      nothing()\r\n   end\r\n\r\n   for k, v in pairs() do\r\n      print(\"bar\")\r\n      assert(42)\r\n   end\r\n\r\n   return\r\nend\r\n]]))\r\n\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 340,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 341,
    "text": "function()\r\n      assert.same({\r\n                     {tag = \"Localrec\", location = {line = 1, column = 1, offset = 1}, first_token = \"local\",\r\n                        {tag = \"Id\", \"foo\", location = {line = 1, column = 16, offset = 16}},\r\n                        {tag = \"Function\", location = {line = 1, column = 7, offset = 7},\r\n                           end_location = {line = 4, column = 1, offset = 78},\r\n                           {\r\n                              {tag = \"Id\", \"a\", location = {line = 1, column = 20, offset = 20}},\r\n                              {tag = \"Id\", \"b\", location = {line = 1, column = 23, offset = 23}},\r\n                              {tag = \"Id\", \"c\", location = {line = 1, column = 26, offset = 26}},\r\n                              {tag = \"Dots\", \"...\", location = {line = 1, column = 29, offset = 29}}\r\n                           },\r\n                           {\r\n                              {tag = \"Local\", location = {line = 2, column = 4, offset = 37}, first_token = \"local\",\r\n                                 equals_location = {line = 2, column = 12, offset = 45},\r\n                                 {\r\n                                    {tag = \"Id\", \"d\", location = {line = 2, column = 10, offset = 43}}\r\n                                 },\r\n                                 {\r\n                                    {tag = \"Op\", \"mul\", location = {line = 2, column = 15, offset = 48},\r\n                                       {tag = \"Op\", \"add\", location = {line = 2, column = 15, offset = 48},\r\n                                          {tag = \"Id\", \"a\", location = {line = 2, column = 15, offset = 48}},\r\n                                          {tag = \"Id\", \"b\", location = {line = 2, column = 19, offset = 52}}\r\n                                       },\r\n                                       {tag = \"Id\", \"c\", location = {line = 2, column = 24, offset = 57}}\r\n                                    }\r\n                                 }\r\n                              },\r\n                              {tag = \"Return\", location = {line = 3, column = 4, offset = 62}, first_token = \"return\",\r\n                                 {tag = \"Id\", \"d\", location = {line = 3, column = 11, offset = 69}},\r\n                                 {tag = \"Paren\", location = {line = 3, column = 15, offset = 73},\r\n                                    {tag = \"Dots\", \"...\", location = {line = 3, column = 15, offset = 73}}\r\n                                 }\r\n                              }\r\n                           }\r\n                        }\r\n                     },\r\n                     {tag = \"Set\", location = {line = 6, column = 1, offset = 83}, first_token = \"function\",\r\n                        {\r\n                           {tag = \"Index\", location = {line = 6, column = 10, offset = 92},\r\n                              {tag = \"Id\", \"t\", location = {line = 6, column = 10, offset = 92}},\r\n                              {tag = \"String\", \"bar\", location = {line = 6, column = 12, offset = 94}}\r\n                           }\r\n                        },\r\n                        {\r\n                           {tag = \"Function\", location = {line = 6, column = 1, offset = 83},\r\n                              end_location = {line = 10, column = 1, offset = 142},\r\n                              {\r\n                                 {tag = \"Id\", \"self\", implicit = true, location = {line = 6, column = 11, offset = 93}},\r\n                                 {tag = \"Id\", \"arg\", location = {line = 6, column = 16, offset = 98}}\r\n                              },\r\n                              {\r\n                                 {tag = \"If\", location = {line = 7, column = 4, offset = 106}, first_token = \"if\",\r\n                                    {tag = \"Id\", \"arg\", location = {line = 7, column = 7, offset = 109}, first_token = \"arg\"},\r\n                                    {location = {line = 7, column = 11, offset = 113}, -- Branch location.\r\n                                       {tag = \"Call\", location = {line = 8, column = 7, offset = 124}, first_token = \"print\",\r\n                                          {tag = \"Id\", \"print\", location = {line = 8, column = 7, offset = 124}},\r\n                                          {tag = \"Id\", \"arg\", location = {line = 8, column = 13, offset = 130}}\r\n                                       }\r\n                                    }\r\n                                 }\r\n                              }\r\n                           }\r\n                        }\r\n                     }\r\n                  }, (parser([[\r\nlocal function foo(a, b, c, ...)\r\n   local d = (a + b) * c\r\n   return d, (...)\r\nend\r\n\r\nfunction t:bar(arg)\r\n   if arg then\r\n      print(arg)\r\n   end\r\nend\r\n]])))\r\n\r\n   end",
    "type": "function"
  }, {
    "id": 342,
    "text": "assert.same({\r\n                     {tag = \"Localrec\", location = {line = 1, column = 1, offset = 1}, first_token = \"local\",\r\n                        {tag = \"Id\", \"foo\", location = {line = 1, column = 16, offset = 16}},\r\n                        {tag = \"Function\", location = {line = 1, column = 7, offset = 7},\r\n                           end_location = {line = 4, column = 1, offset = 78},\r\n                           {\r\n                              {tag = \"Id\", \"a\", location = {line = 1, column = 20, offset = 20}},\r\n                              {tag = \"Id\", \"b\", location = {line = 1, column = 23, offset = 23}},\r\n                              {tag = \"Id\", \"c\", location = {line = 1, column = 26, offset = 26}},\r\n                              {tag = \"Dots\", \"...\", location = {line = 1, column = 29, offset = 29}}\r\n                           },\r\n                           {\r\n                              {tag = \"Local\", location = {line = 2, column = 4, offset = 37}, first_token = \"local\",\r\n                                 equals_location = {line = 2, column = 12, offset = 45},\r\n                                 {\r\n                                    {tag = \"Id\", \"d\", location = {line = 2, column = 10, offset = 43}}\r\n                                 },\r\n                                 {\r\n                                    {tag = \"Op\", \"mul\", location = {line = 2, column = 15, offset = 48},\r\n                                       {tag = \"Op\", \"add\", location = {line = 2, column = 15, offset = 48},\r\n                                          {tag = \"Id\", \"a\", location = {line = 2, column = 15, offset = 48}},\r\n                                          {tag = \"Id\", \"b\", location = {line = 2, column = 19, offset = 52}}\r\n                                       },\r\n                                       {tag = \"Id\", \"c\", location = {line = 2, column = 24, offset = 57}}\r\n                                    }\r\n                                 }\r\n                              },\r\n                              {tag = \"Return\", location = {line = 3, column = 4, offset = 62}, first_token = \"return\",\r\n                                 {tag = \"Id\", \"d\", location = {line = 3, column = 11, offset = 69}},\r\n                                 {tag = \"Paren\", location = {line = 3, column = 15, offset = 73},\r\n                                    {tag = \"Dots\", \"...\", location = {line = 3, column = 15, offset = 73}}\r\n                                 }\r\n                              }\r\n                           }\r\n                        }\r\n                     },\r\n                     {tag = \"Set\", location = {line = 6, column = 1, offset = 83}, first_token = \"function\",\r\n                        {\r\n                           {tag = \"Index\", location = {line = 6, column = 10, offset = 92},\r\n                              {tag = \"Id\", \"t\", location = {line = 6, column = 10, offset = 92}},\r\n                              {tag = \"String\", \"bar\", location = {line = 6, column = 12, offset = 94}}\r\n                           }\r\n                        },\r\n                        {\r\n                           {tag = \"Function\", location = {line = 6, column = 1, offset = 83},\r\n                              end_location = {line = 10, column = 1, offset = 142},\r\n                              {\r\n                                 {tag = \"Id\", \"self\", implicit = true, location = {line = 6, column = 11, offset = 93}},\r\n                                 {tag = \"Id\", \"arg\", location = {line = 6, column = 16, offset = 98}}\r\n                              },\r\n                              {\r\n                                 {tag = \"If\", location = {line = 7, column = 4, offset = 106}, first_token = \"if\",\r\n                                    {tag = \"Id\", \"arg\", location = {line = 7, column = 7, offset = 109}, first_token = \"arg\"},\r\n                                    {location = {line = 7, column = 11, offset = 113}, -- Branch location.\r\n                                       {tag = \"Call\", location = {line = 8, column = 7, offset = 124}, first_token = \"print\",\r\n                                          {tag = \"Id\", \"print\", location = {line = 8, column = 7, offset = 124}},\r\n                                          {tag = \"Id\", \"arg\", location = {line = 8, column = 13, offset = 130}}\r\n                                       }\r\n                                    }\r\n                                 }\r\n                              }\r\n                           }\r\n                        }\r\n                     }\r\n                  }, (parser([[\r\nlocal function foo(a, b, c, ...)\r\n   local d = (a + b) * c\r\n   return d, (...)\r\nend\r\n\r\nfunction t:bar(arg)\r\n   if arg then\r\n      print(arg)\r\n   end\r\nend\r\n]])))",
    "type": "statement:functioncall"
  }, {
    "id": 343,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 344,
    "text": "function()\r\n      assert.same({\r\n                     {tag = \"Label\", \"foo\", location = {line = 1, column = 1, offset = 1}, end_column = 7, first_token = \"::\"},\r\n                     {tag = \"Label\", \"bar\", location = {line = 2, column = 1, offset = 9}, end_column = 6, first_token = \"::\"},\r\n                     {tag = \"Label\", \"baz\", location = {line = 3, column = 3, offset = 18}, end_column = 4, first_token = \"::\"}\r\n                  }, (parser([[\r\n::foo::\r\n:: bar\r\n::::\r\nbaz::\r\n]])))\r\n   end",
    "type": "function"
  }, {
    "id": 345,
    "text": "assert.same({\r\n                     {tag = \"Label\", \"foo\", location = {line = 1, column = 1, offset = 1}, end_column = 7, first_token = \"::\"},\r\n                     {tag = \"Label\", \"bar\", location = {line = 2, column = 1, offset = 9}, end_column = 6, first_token = \"::\"},\r\n                     {tag = \"Label\", \"baz\", location = {line = 3, column = 3, offset = 18}, end_column = 4, first_token = \"::\"}\r\n                  }, (parser([[\r\n::foo::\r\n:: bar\r\n::::\r\nbaz::\r\n]])))",
    "type": "statement:functioncall"
  }, {
    "id": 346,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 347,
    "text": "function()\r\n      assert.same({\r\n                     {tag = \"Call\", location = {line = 1, column = 1, offset = 1}, first_token = \"a\",\r\n                        {tag = \"Id\", \"a\", location = {line = 1, column = 1, offset = 1}}\r\n                     },\r\n                     {tag = \"Call\", location = {line = 2, column = 1, offset = 6}, first_token = \"(\",\r\n                        {tag = \"Id\", \"b\", location = {line = 2, column = 2, offset = 7}}\r\n                     },\r\n                     {tag = \"Set\", location = {line = 3, column = 1, offset = 13}, first_token = \"(\",\r\n                        equals_location = {line = 3, column = 12, offset = 24},\r\n                        {\r\n                           {tag = \"Index\", location = {line = 3, column = 3, offset = 15},\r\n                              {tag = \"Index\", location = {line = 3, column = 3, offset = 15},\r\n                                 {tag = \"Id\", \"c\", location = {line = 3, column = 3, offset = 15}},\r\n                                 {tag = \"String\", \"d\", location = {line = 3, column = 6, offset = 18}}\r\n                              },\r\n                              {tag = \"Number\", \"3\", location = {line = 3, column = 9, offset = 21}}\r\n                           }\r\n                        },\r\n                        {\r\n                           {tag = \"Number\", \"2\", location = {line = 3, column = 14, offset = 26}}\r\n                        }\r\n                     }\r\n                  }, (parser([[\r\na();\r\n(b)();\r\n((c).d)[3] = 2\r\n]])))\r\n   end",
    "type": "function"
  }, {
    "id": 348,
    "text": "assert.same({\r\n                     {tag = \"Call\", location = {line = 1, column = 1, offset = 1}, first_token = \"a\",\r\n                        {tag = \"Id\", \"a\", location = {line = 1, column = 1, offset = 1}}\r\n                     },\r\n                     {tag = \"Call\", location = {line = 2, column = 1, offset = 6}, first_token = \"(\",\r\n                        {tag = \"Id\", \"b\", location = {line = 2, column = 2, offset = 7}}\r\n                     },\r\n                     {tag = \"Set\", location = {line = 3, column = 1, offset = 13}, first_token = \"(\",\r\n                        equals_location = {line = 3, column = 12, offset = 24},\r\n                        {\r\n                           {tag = \"Index\", location = {line = 3, column = 3, offset = 15},\r\n                              {tag = \"Index\", location = {line = 3, column = 3, offset = 15},\r\n                                 {tag = \"Id\", \"c\", location = {line = 3, column = 3, offset = 15}},\r\n                                 {tag = \"String\", \"d\", location = {line = 3, column = 6, offset = 18}}\r\n                              },\r\n                              {tag = \"Number\", \"3\", location = {line = 3, column = 9, offset = 21}}\r\n                           }\r\n                        },\r\n                        {\r\n                           {tag = \"Number\", \"2\", location = {line = 3, column = 14, offset = 26}}\r\n                        }\r\n                     }\r\n                  }, (parser([[\r\na();\r\n(b)();\r\n((c).d)[3] = 2\r\n]])))",
    "type": "statement:functioncall"
  }, {
    "id": 349,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 350,
    "text": "function()\r\n      assert.same({\r\n                     {tag = \"If\", location = {line = 1, column = 1, offset = 1}, first_token = \"if\",\r\n                        {tag = \"Id\", \"x\", location = {line = 1, column = 5, offset = 5}, first_token = \"x\"},\r\n                        {location = {line = 1, column = 8, offset = 8}}\r\n                     }\r\n                  }, (parser([[\r\nif (x) then end\r\n]])))\r\n   end",
    "type": "function"
  }, {
    "id": 351,
    "text": "assert.same({\r\n                     {tag = \"If\", location = {line = 1, column = 1, offset = 1}, first_token = \"if\",\r\n                        {tag = \"Id\", \"x\", location = {line = 1, column = 5, offset = 5}, first_token = \"x\"},\r\n                        {location = {line = 1, column = 8, offset = 8}}\r\n                     }\r\n                  }, (parser([[\r\nif (x) then end\r\n]])))",
    "type": "statement:functioncall"
  }, {
    "id": 352,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 353,
    "text": "function()\r\n      assert.same({\r\n                     {tag = \"Return\", location = {line = 1, column = 1, offset = 1}, first_token = \"return\",\r\n                        {tag = \"Table\", location = {line = 1, column = 8, offset = 8},\r\n                           {tag = \"Pair\", location = {line = 1, column = 9, offset = 9}, first_token = \"a\",\r\n                              {tag = \"String\", \"a\", location = {line = 1, column = 9, offset = 9}},\r\n                              {tag = \"Id\", \"b\", location = {line = 1, column = 13, offset = 13}}\r\n                           },\r\n                           {tag = \"Pair\", location = {line = 1, column = 16, offset = 16}, first_token = \"[\",\r\n                              {tag = \"Id\", \"x\", location = {line = 1, column = 17, offset = 17}},\r\n                              {tag = \"Id\", \"y\", location = {line = 1, column = 22, offset = 22}},\r\n                           },\r\n                           {tag = \"Id\", \"z\", location = {line = 1, column = 26, offset = 26}, first_token = \"z\"}\r\n                        }\r\n                     }\r\n                  }, (parser([[\r\nreturn {a = b, [x] = y, (z)}\r\n]])))\r\n   end",
    "type": "function"
  }, {
    "id": 354,
    "text": "assert.same({\r\n                     {tag = \"Return\", location = {line = 1, column = 1, offset = 1}, first_token = \"return\",\r\n                        {tag = \"Table\", location = {line = 1, column = 8, offset = 8},\r\n                           {tag = \"Pair\", location = {line = 1, column = 9, offset = 9}, first_token = \"a\",\r\n                              {tag = \"String\", \"a\", location = {line = 1, column = 9, offset = 9}},\r\n                              {tag = \"Id\", \"b\", location = {line = 1, column = 13, offset = 13}}\r\n                           },\r\n                           {tag = \"Pair\", location = {line = 1, column = 16, offset = 16}, first_token = \"[\",\r\n                              {tag = \"Id\", \"x\", location = {line = 1, column = 17, offset = 17}},\r\n                              {tag = \"Id\", \"y\", location = {line = 1, column = 22, offset = 22}},\r\n                           },\r\n                           {tag = \"Id\", \"z\", location = {line = 1, column = 26, offset = 26}, first_token = \"z\"}\r\n                        }\r\n                     }\r\n                  }, (parser([[\r\nreturn {a = b, [x] = y, (z)}\r\n]])))",
    "type": "statement:functioncall"
  }, {
    "id": 355,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 356,
    "text": "function()\r\n      assert.same({line = 8, column = 15, end_column = 15, msg = \"expected '=' near ')'\"}, get_error([[\r\nlocal function foo(a, b, c, ...)\r\n   local d = (a + b) * c\r\n   return d, (...)\r\nend\r\n\r\nfunction t:bar(arg)\r\n   if arg then\r\n      printarg)\r\n   end\r\nend\r\n]]))\r\n   end",
    "type": "function"
  }, {
    "id": 357,
    "text": "assert.same({line = 8, column = 15, end_column = 15, msg = \"expected '=' near ')'\"}, get_error([[\r\nlocal function foo(a, b, c, ...)\r\n   local d = (a + b) * c\r\n   return d, (...)\r\nend\r\n\r\nfunction t:bar(arg)\r\n   if arg then\r\n      printarg)\r\n   end\r\nend\r\n]]))",
    "type": "statement:functioncall"
  }, {
    "id": 358,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 359,
    "text": "function()\r\n         assert.same({\r\n            {contents = \" ignore something\", location = {line = 1, column = 1, offset = 1}, end_column = 19},\r\n            {contents = \" comments\", location = {line = 2, column = 13, offset = 33}, end_column = 23},\r\n            {contents = \"long comment\", location = {line = 3, column = 13, offset = 57}, end_column = 17}\r\n         }, get_comments([[\r\n-- ignore something\r\nfoo = bar() -- comments\r\nreturn true --[=[\r\nlong comment]=]\r\n         ]]))\r\n      end",
    "type": "function"
  }, {
    "id": 360,
    "text": "assert.same({\r\n            {contents = \" ignore something\", location = {line = 1, column = 1, offset = 1}, end_column = 19},\r\n            {contents = \" comments\", location = {line = 2, column = 13, offset = 33}, end_column = 23},\r\n            {contents = \"long comment\", location = {line = 3, column = 13, offset = 57}, end_column = 17}\r\n         }, get_comments([[\r\n-- ignore something\r\nfoo = bar() -- comments\r\nreturn true --[=[\r\nlong comment]=]\r\n         ]]))",
    "type": "statement:functioncall"
  }, {
    "id": 361,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 362,
    "text": "function()\r\n         -- EOS is considered \"code\" (which does not matter w.r.t inline options).\r\n         assert.same({nil, true, true, true, true, true, nil, nil, true, true, true}, get_code_lines([[\r\n-- nothing here\r\nlocal foo = 2\r\n+\r\n3\r\n+\r\n{\r\n   --[=[empty]=]\r\n\r\n}\r\n::bar::\r\n]]))\r\n      end",
    "type": "function"
  }, {
    "id": 363,
    "text": "assert.same({nil, true, true, true, true, true, nil, nil, true, true, true}, get_code_lines([[\r\n-- nothing here\r\nlocal foo = 2\r\n+\r\n3\r\n+\r\n{\r\n   --[=[empty]=]\r\n\r\n}\r\n::bar::\r\n]]))",
    "type": "statement:functioncall"
  }, {
    "id": 364,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 365,
    "text": "function()\r\n      it(\"provides comments correctly\", function()\r\n         assert.same({\r\n            {contents = \" ignore something\", location = {line = 1, column = 1, offset = 1}, end_column = 19},\r\n            {contents = \" comments\", location = {line = 2, column = 13, offset = 33}, end_column = 23},\r\n            {contents = \"long comment\", location = {line = 3, column = 13, offset = 57}, end_column = 17}\r\n         }, get_comments([[\r\n-- ignore something\r\nfoo = bar() -- comments\r\nreturn true --[=[\r\nlong comment]=]\r\n         ]]))\r\n      end)\r\n\r\n      it(\"provides lines with code correctly\", function()\r\n         -- EOS is considered \"code\" (which does not matter w.r.t inline options).\r\n         assert.same({nil, true, true, true, true, true, nil, nil, true, true, true}, get_code_lines([[\r\n-- nothing here\r\nlocal foo = 2\r\n+\r\n3\r\n+\r\n{\r\n   --[=[empty]=]\r\n\r\n}\r\n::bar::\r\n]]))\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 366,
    "text": "it(\"provides comments correctly\", function()\r\n         assert.same({\r\n            {contents = \" ignore something\", location = {line = 1, column = 1, offset = 1}, end_column = 19},\r\n            {contents = \" comments\", location = {line = 2, column = 13, offset = 33}, end_column = 23},\r\n            {contents = \"long comment\", location = {line = 3, column = 13, offset = 57}, end_column = 17}\r\n         }, get_comments([[\r\n-- ignore something\r\nfoo = bar() -- comments\r\nreturn true --[=[\r\nlong comment]=]\r\n         ]]))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 367,
    "text": "it(\"provides lines with code correctly\", function()\r\n         -- EOS is considered \"code\" (which does not matter w.r.t inline options).\r\n         assert.same({nil, true, true, true, true, true, nil, nil, true, true, true}, get_code_lines([[\r\n-- nothing here\r\nlocal foo = 2\r\n+\r\n3\r\n+\r\n{\r\n   --[=[empty]=]\r\n\r\n}\r\n::bar::\r\n]]))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 368,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 369,
    "text": "function()\r\n   it(\"parses empty source correctly\", function()\r\n      assert.same({}, get_ast(\" \"))\r\n   end)\r\n\r\n   it(\"does not allow extra ending keywords\", function()\r\n      assert.same({line = 1, column = 1, end_column = 3, msg = \"expected <eof> near 'end'\"}, get_error(\"end\"))\r\n   end)\r\n\r\n   it(\"parses return statement correctly\", function()\r\n      assert.same({tag = \"Return\"}, get_node(\"return\"))\r\n      assert.same({tag = \"Return\",\r\n                     {tag = \"Number\", \"1\"}\r\n                  }, get_node(\"return 1\"))\r\n      assert.same({tag = \"Return\",\r\n                     {tag = \"Number\", \"1\"},\r\n                     {tag = \"String\", \"foo\"}\r\n                  }, get_node(\"return 1, 'foo'\"))\r\n      assert.same({line = 1, column = 10, end_column = 10, msg = \"expected expression near <eof>\"}, get_error(\"return 1,\"))\r\n   end)\r\n\r\n   it(\"parses labels correctly\", function()\r\n      assert.same({tag = \"Label\", \"fail\"}, get_node(\"::fail::\"))\r\n      assert.same({tag = \"Label\", \"fail\"}, get_node(\"::\\nfail\\n::\"))\r\n      assert.same({line = 1, column = 3, end_column = 4, msg = \"expected identifier near '::'\"}, get_error(\"::::\"))\r\n      assert.same({line = 1, column = 3, end_column = 3, msg = \"expected identifier near '1'\"}, get_error(\"::1::\"))\r\n   end)\r\n\r\n   it(\"parses goto correctly\", function()\r\n      assert.same({tag = \"Goto\", \"fail\"}, get_node(\"goto fail\"))\r\n      assert.same({line = 1, column = 5, end_column = 5, msg = \"expected identifier near <eof>\"}, get_error(\"goto\"))\r\n      assert.same({line = 1, column = 9, end_column = 9, msg = \"expected statement near ','\"}, get_error(\"goto foo, bar\"))\r\n   end)\r\n\r\n   it(\"parses break correctly\", function()\r\n      assert.same({tag = \"Break\"}, get_node(\"break\"))\r\n      assert.same({line = 1, column = 11, end_column = 11, msg = \"expected '=' near <eof>\"}, get_error(\"break fail\"))\r\n   end)\r\n\r\n   it(\"parses do end correctly\", function()\r\n      assert.same({tag = \"Do\"}, get_node(\"do end\"))\r\n      assert.same({line = 1, column = 3, end_column = 3, msg = \"expected 'end' near <eof>\"}, get_error(\"do\"))\r\n      assert.same({line = 1, column = 4, end_column = 8, msg = \"expected 'end' near 'until'\"}, get_error(\"do until false\"))\r\n      assert.same({line = 2, column = 1, end_column = 5, msg = \"expected 'end' (to close 'do' on line 1) near 'until'\"},\r\n         get_error(\"do\\nuntil false\"))\r\n   end)\r\n\r\n   it(\"parses while do end correctly\", function()\r\n      assert.same({tag = \"While\",\r\n                     {tag = \"True\"},\r\n                     {}\r\n                  }, get_node(\"while true do end\"))\r\n      assert.same({line = 1, column = 6, end_column = 6, msg = \"expected condition near <eof>\"}, get_error(\"while\"))\r\n      assert.same({line = 1, column = 11, end_column = 11, msg = \"expected 'do' near <eof>\"}, get_error(\"while true\"))\r\n      assert.same({line = 1, column = 14, end_column = 14, msg = \"expected 'end' near <eof>\"}, get_error(\"while true do\"))\r\n      assert.same({line = 2, column = 3, end_column = 3, msg = \"expected 'end' (to close 'while' on line 1) near <eof>\"},\r\n         get_error(\"while true\\ndo\"))\r\n      assert.same({line = 1, column = 7, end_column = 8, msg = \"expected condition near 'do'\"}, get_error(\"while do end\"))\r\n      assert.same({line = 1, column = 11, end_column = 11, msg = \"expected 'do' near ','\"}, get_error(\"while true, false do end\"))\r\n   end)\r\n\r\n   it(\"parses repeat until correctly\", function()\r\n      assert.same({tag = \"Repeat\",\r\n                     {},\r\n                     {tag = \"True\"}\r\n                  }, get_node(\"repeat until true\"))\r\n      assert.same({line = 1, column = 7, end_column = 7, msg = \"expected 'until' near <eof>\"}, get_error(\"repeat\"))\r\n      assert.same({line = 3, column = 1, end_column = 1, msg = \"expected 'until' (to close 'repeat' on line 1) near <eof>\"},\r\n         get_error(\"repeat\\n--\"))\r\n      assert.same({line = 1, column = 13, end_column = 13, msg = \"expected condition near <eof>\"}, get_error(\"repeat until\"))\r\n      assert.same({line = 1, column = 18, end_column = 18, msg = \"expected statement near ','\"}, get_error(\"repeat until true, false\"))\r\n   end)\r\n\r\n   describe(\"when parsing if\", function()\r\n      it(\"parses if then end correctly\", function()\r\n         assert.same({tag = \"If\",\r\n                        {tag = \"True\"},\r\n                        {}\r\n                     }, get_node(\"if true then end\"))\r\n         assert.same({line = 1, column = 3, end_column = 3, msg = \"expected condition near <eof>\"}, get_error(\"if\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected 'then' near <eof>\"}, get_error(\"if true\"))\r\n         assert.same({line = 1, column = 13, end_column = 13, msg = \"expected 'end' near <eof>\"}, get_error(\"if true then\"))\r\n         assert.same({line = 2, column = 5, end_column = 5, msg = \"expected 'end' (to close 'if' on line 1) near <eof>\"},\r\n            get_error(\"if true\\nthen\"))\r\n         assert.same({line = 1, column = 4, end_column = 7, msg = \"expected condition near 'then'\"}, get_error(\"if then end\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected 'then' near ','\"}, get_error(\"if true, false then end\"))\r\n      end)\r\n\r\n      it(\"parses if then else end correctly\", function()\r\n         assert.same({tag = \"If\",\r\n                        {tag = \"True\"},\r\n                        {},\r\n                        {}\r\n                     }, get_node(\"if true then else end\"))\r\n         assert.same({line = 1, column = 18, end_column = 18, msg = \"expected 'end' near <eof>\"}, get_error(\"if true then else\"))\r\n         assert.same({line = 3, column = 1, end_column = 1, msg = \"expected 'end' (to close 'else' on line 2) near <eof>\"},\r\n            get_error(\"if true\\nthen else\\n\"))\r\n         assert.same({line = 1, column = 19, end_column = 22, msg = \"expected 'end' near 'else'\"}, get_error(\"if true then else else end\"))\r\n      end)\r\n\r\n      it(\"parses if then elseif then end correctly\", function()\r\n         assert.same({tag = \"If\",\r\n                        {tag = \"True\"},\r\n                        {},\r\n                        {tag = \"False\"},\r\n                        {}\r\n                     }, get_node(\"if true then elseif false then end\"))\r\n         assert.same({line = 1, column = 21, end_column = 23, msg = \"expected condition near 'end'\"}, get_error(\"if true then elseif end\"))\r\n         assert.same({line = 1, column = 21, end_column = 24, msg = \"expected condition near 'then'\"}, get_error(\"if true then elseif then end\"))\r\n         assert.same({line = 2, column = 5, end_column = 5, msg = \"expected 'end' (to close 'elseif' on line 1) near <eof>\"},\r\n            get_error(\"if true then elseif a\\nthen\"))\r\n      end)\r\n\r\n      it(\"parses if then elseif then else end correctly\", function()\r\n         assert.same({tag = \"If\",\r\n                        {tag = \"True\"},\r\n                        {},\r\n                        {tag = \"False\"},\r\n                        {},\r\n                        {}\r\n                     }, get_node(\"if true then elseif false then else end\"))\r\n         assert.same({line = 1, column = 36, end_column = 36, msg = \"expected 'end' near <eof>\"}, get_error(\"if true then elseif false then else\"))\r\n      end)\r\n   end)\r\n\r\n   describe(\"when parsing for\", function()\r\n      it(\"parses fornum correctly\", function()\r\n         assert.same({tag = \"Fornum\",\r\n                        {tag = \"Id\", \"i\"},\r\n                        {tag = \"Number\", \"1\"},\r\n                        {tag = \"Op\", \"len\", {tag = \"Id\", \"t\"}},\r\n                        {}\r\n                     }, get_node(\"for i=1, #t do end\"))\r\n         assert.same({line = 1, column = 4, end_column = 4, msg = \"expected identifier near <eof>\"}, get_error(\"for\"))\r\n         assert.same({line = 1, column = 6, end_column = 6, msg = \"expected '=', ',' or 'in' near <eof>\"}, get_error(\"for i\"))\r\n         assert.same({line = 1, column = 7, end_column = 8, msg = \"expected '=', ',' or 'in' near '~='\"}, get_error(\"for i ~= 2\"))\r\n         assert.same({line = 1, column = 11, end_column = 12, msg = \"expected ',' near 'do'\"}, get_error(\"for i = 2 do end\"))\r\n         assert.same({line = 1, column = 15, end_column = 15, msg = \"expected 'end' near <eof>\"}, get_error(\"for i=1, #t do\"))\r\n         assert.same({line = 2, column = 4, end_column = 4, msg = \"expected 'end' (to close 'for' on line 1) near <eof>\"},\r\n            get_error(\"for i=1, #t do\\na()\"))\r\n         assert.same({line = 1, column = 5, end_column = 5, msg = \"expected identifier near '('\"}, get_error(\"for (i)=1, #t do end\"))\r\n         assert.same({line = 1, column = 5, end_column = 5, msg = \"expected identifier near '3'\"}, get_error(\"for 3=1, #t do end\"))\r\n      end)\r\n\r\n      it(\"parses fornum with step correctly\", function()\r\n         assert.same({tag = \"Fornum\",\r\n                        {tag = \"Id\", \"i\"},\r\n                        {tag = \"Number\", \"1\"},\r\n                        {tag = \"Op\", \"len\", {tag = \"Id\", \"t\"}},\r\n                        {tag = \"Number\", \"2\"},\r\n                        {}\r\n                     }, get_node(\"for i=1, #t, 2 do end\"))\r\n         assert.same({line = 1, column = 15, end_column = 15, msg = \"expected 'do' near ','\"}, get_error(\"for i=1, #t, 2, 3 do\"))\r\n      end)\r\n\r\n      it(\"parses forin correctly\", function()\r\n         assert.same({tag = \"Forin\", {\r\n                           {tag = \"Id\", \"i\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"t\"}\r\n                        },\r\n                        {}\r\n                     }, get_node(\"for i in t do end\"))\r\n         assert.same({tag = \"Forin\", {\r\n                           {tag = \"Id\", \"i\"},\r\n                           {tag = \"Id\", \"j\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"t\"},\r\n                           {tag = \"String\", \"foo\"}\r\n                        },\r\n                        {}\r\n                     }, get_node(\"for i, j in t, 'foo' do end\"))\r\n         assert.same({line = 1, column = 5, end_column = 6, msg = \"expected identifier near 'in'\"}, get_error(\"for in foo do end\"))\r\n         assert.same({line = 1, column = 10, end_column = 11, msg = \"expected expression near 'do'\"}, get_error(\"for i in do end\"))\r\n      end)\r\n   end)\r\n\r\n   describe(\"when parsing functions\", function()\r\n      it(\"parses simple function correctly\", function()\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Function\", {}, {}}\r\n                        }\r\n                     }, get_node(\"function a() end\"))\r\n         assert.same({line = 1, column = 9, end_column = 9, msg = \"expected identifier near <eof>\"}, get_error(\"function\"))\r\n         assert.same({line = 1, column = 11, end_column = 11, msg = \"expected '(' near <eof>\"}, get_error(\"function a\"))\r\n         assert.same({line = 1, column = 12, end_column = 12, msg = \"expected argument near <eof>\"}, get_error(\"function a(\"))\r\n         assert.same({line = 1, column = 13, end_column = 13, msg = \"expected 'end' near <eof>\"}, get_error(\"function a()\"))\r\n         assert.same({line = 2, column = 2, end_column = 2, msg = \"expected 'end' (to close 'function' on line 1) near <eof>\"},\r\n            get_error(\"function a(\\n)\"))\r\n         assert.same({line = 1, column = 10, end_column = 10, msg = \"expected identifier near '('\"}, get_error(\"function (a)()\"))\r\n         assert.same({line = 1, column = 9, end_column = 9, msg = \"expected identifier near '('\"}, get_error(\"function() end\"))\r\n         assert.same({line = 1, column = 11, end_column = 11, msg = \"expected '(' near 'a'\"}, get_error(\"(function a() end)\"))\r\n         assert.same({line = 1, column = 18, end_column = 18, msg = \"expected expression near ')'\"}, get_error(\"function a() end()\"))\r\n      end)\r\n\r\n      it(\"parses simple function with arguments correctly\", function()\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Function\", {{tag = \"Id\", \"b\"}}, {}}\r\n                        }\r\n                     }, get_node(\"function a(b) end\"))\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Function\", {{tag = \"Id\", \"b\"}, {tag = \"Id\", \"c\"}}, {}}\r\n                        }\r\n                     }, get_node(\"function a(b, c) end\"))\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Function\", {{tag = \"Id\", \"b\"}, {tag = \"Dots\", \"...\"}}, {}}\r\n                        }\r\n                     }, get_node(\"function a(b, ...) end\"))\r\n         assert.same({line = 1, column = 15, end_column = 15, msg = \"expected argument near ')'\"}, get_error(\"function a(b, ) end\"))\r\n         assert.same({line = 1, column = 13, end_column = 13, msg = \"expected ')' near '.'\"}, get_error(\"function a(b.c) end\"))\r\n         assert.same({line = 2, column = 2, end_column = 2, msg = \"expected ')' (to close '(' on line 1) near '.'\"},\r\n            get_error(\"function a(\\nb.c) end\"))\r\n         assert.same({line = 1, column = 12, end_column = 12, msg = \"expected argument near '('\"}, get_error(\"function a((b)) end\"))\r\n         assert.same({line = 1, column = 15, end_column = 15, msg = \"expected ')' near ','\"}, get_error(\"function a(..., ...) end\"))\r\n      end)\r\n\r\n      it(\"parses field function correctly\", function()\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\", {tag = \"Id\", \"a\"}, {tag = \"String\", \"b\"}}\r\n                        }, {\r\n                           {tag = \"Function\", {}, {}}\r\n                        }\r\n                     }, get_node(\"function a.b() end\"))\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\",\r\n                              {tag = \"Index\", {tag = \"Id\", \"a\"}, {tag = \"String\", \"b\"}},\r\n                              {tag = \"String\", \"c\"}\r\n                           }\r\n                        }, {\r\n                           {tag = \"Function\", {}, {}}\r\n                        }\r\n                     }, get_node(\"function a.b.c() end\"))\r\n         assert.same({line = 1, column = 11, end_column = 11, msg = \"expected '(' near '['\"}, get_error(\"function a[b]() end\"))\r\n         assert.same({line = 1, column = 12, end_column = 12, msg = \"expected identifier near '('\"}, get_error(\"function a.() end\"))\r\n      end)\r\n\r\n      it(\"parses method function correctly\", function()\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\", {tag = \"Id\", \"a\"}, {tag = \"String\", \"b\"}}\r\n                        }, {\r\n                           {tag = \"Function\", {{tag = \"Id\", \"self\", implicit = true}}, {}}\r\n                        }\r\n                     }, get_node(\"function a:b() end\"))\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\",\r\n                              {tag = \"Index\", {tag = \"Id\", \"a\"}, {tag = \"String\", \"b\"}},\r\n                              {tag = \"String\", \"c\"}\r\n                           }\r\n                        }, {\r\n                           {tag = \"Function\", {{tag = \"Id\", \"self\", implicit = true}}, {}}\r\n                        }\r\n                     }, get_node(\"function a.b:c() end\"))\r\n         assert.same({line = 1, column = 13, end_column = 13, msg = \"expected '(' near '.'\"}, get_error(\"function a:b.c() end\"))\r\n      end)\r\n   end)\r\n\r\n   describe(\"when parsing local declarations\", function()\r\n      it(\"parses simple local declaration correctly\", function()\r\n         assert.same({tag = \"Local\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }\r\n                     }, get_node(\"local a\"))\r\n         assert.same({tag = \"Local\", {\r\n                           {tag = \"Id\", \"a\"},\r\n                           {tag = \"Id\", \"b\"}\r\n                        }\r\n                     }, get_node(\"local a, b\"))\r\n         assert.same({line = 1, column = 6, end_column = 6, msg = \"expected identifier near <eof>\"}, get_error(\"local\"))\r\n         assert.same({line = 1, column = 9, end_column = 9, msg = \"expected identifier near <eof>\"}, get_error(\"local a,\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected statement near '.'\"}, get_error(\"local a.b\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected statement near '['\"}, get_error(\"local a[b]\"))\r\n         assert.same({line = 1, column = 7, end_column = 7, msg = \"expected identifier near '('\"}, get_error(\"local (a)\"))\r\n      end)\r\n\r\n      it(\"parses local declaration with assignment correctly\", function()\r\n         assert.same({tag = \"Local\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"b\"}\r\n                        }\r\n                     }, get_node(\"local a = b\"))\r\n         assert.same({tag = \"Local\", {\r\n                           {tag = \"Id\", \"a\"},\r\n                           {tag = \"Id\", \"b\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"c\"},\r\n                           {tag = \"Id\", \"d\"}\r\n                        }\r\n                     }, get_node(\"local a, b = c, d\"))\r\n         assert.same({line = 1, column = 11, end_column = 11, msg = \"expected expression near <eof>\"}, get_error(\"local a = \"))\r\n         assert.same({line = 1, column = 13, end_column = 13, msg = \"expected expression near <eof>\"}, get_error(\"local a = b,\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected statement near '.'\"}, get_error(\"local a.b = c\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected statement near '['\"}, get_error(\"local a[b] = c\"))\r\n         assert.same({line = 1, column = 10, end_column = 10, msg = \"expected identifier near '('\"}, get_error(\"local a, (b) = c\"))\r\n      end)\r\n\r\n      it(\"parses local function declaration correctly\", function()\r\n         assert.same({tag = \"Localrec\",\r\n                        {tag = \"Id\", \"a\"}, \r\n                        {tag = \"Function\", {}, {}}\r\n                     }, get_node(\"local function a() end\"))\r\n         assert.same({line = 1, column = 15, end_column = 15, msg = \"expected identifier near <eof>\"}, get_error(\"local function\"))\r\n         assert.same({line = 1, column = 17, end_column = 17, msg = \"expected '(' near '.'\"}, get_error(\"local function a.b() end\"))\r\n      end)\r\n   end)\r\n\r\n   describe(\"when parsing assignments\", function()\r\n      it(\"parses single target assignment correctly\", function()\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"b\"}\r\n                        }\r\n                     }, get_node(\"a = b\"))\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\", {tag = \"Id\", \"a\"}, {tag = \"String\", \"b\"}}\r\n                        }, {\r\n                           {tag = \"Id\", \"c\"}\r\n                        }\r\n                     }, get_node(\"a.b = c\"))\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\",\r\n                              {tag = \"Index\", {tag = \"Id\", \"a\"}, {tag = \"String\", \"b\"}},\r\n                              {tag = \"String\", \"c\"}\r\n                           }\r\n                        }, {\r\n                           {tag = \"Id\", \"d\"}\r\n                        }\r\n                     }, get_node(\"a.b.c = d\"))\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\",\r\n                              {tag = \"Invoke\",\r\n                                 {tag = \"Call\", {tag = \"Id\", \"f\"}},\r\n                                 {tag = \"String\", \"g\"}\r\n                              },\r\n                              {tag = \"Number\", \"9\"}\r\n                           }\r\n                        }, {\r\n                           {tag = \"Id\", \"d\"}\r\n                        }\r\n                     }, get_node(\"(f():g())[9] = d\"))\r\n         assert.same({line = 1, column = 2, end_column = 2, msg = \"expected '=' near <eof>\"}, get_error(\"a\"))\r\n         assert.same({line = 1, column = 5, end_column = 5, msg = \"expected expression near <eof>\"}, get_error(\"a = \"))\r\n         assert.same({line = 1, column = 5, end_column = 5, msg = \"expected statement near '='\"}, get_error(\"a() = b\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"expected statement near '('\"}, get_error(\"(a) = b\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"expected statement near '1'\"}, get_error(\"1 = b\"))\r\n      end)\r\n\r\n      it(\"parses multi assignment correctly\", function()\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"},\r\n                           {tag = \"Id\", \"b\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"c\"},\r\n                           {tag = \"Id\", \"d\"}\r\n                        }\r\n                     }, get_node(\"a, b = c, d\"))\r\n         assert.same({line = 1, column = 5, end_column = 5, msg = \"expected '=' near <eof>\"}, get_error(\"a, b\"))\r\n         assert.same({line = 1, column = 4, end_column = 4, msg = \"expected identifier or field near '='\"}, get_error(\"a, = b\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected expression near <eof>\"}, get_error(\"a, b = \"))\r\n         assert.same({line = 1, column = 10, end_column = 10, msg = \"expected expression near <eof>\"}, get_error(\"a, b = c,\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected call or indexing near '='\"}, get_error(\"a, b() = c\"))\r\n         assert.same({line = 1, column = 4, end_column = 4, msg = \"expected identifier or field near '('\"}, get_error(\"a, (b) = c\"))\r\n      end)\r\n   end)\r\n\r\n   describe(\"when parsing expression statements\", function()\r\n      it(\"parses calls correctly\", function()\r\n         assert.same({tag = \"Call\",\r\n                        {tag = \"Id\", \"a\"}\r\n                     }, get_node(\"a()\"))\r\n         assert.same({tag = \"Call\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"}\r\n                     }, get_node(\"a'b'\"))\r\n         assert.same({tag = \"Call\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Table\"}\r\n                     }, get_node(\"a{}\"))\r\n         assert.same({tag = \"Call\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"}\r\n                     }, get_node(\"a(b)\"))\r\n         assert.same({tag = \"Call\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_node(\"a(b, c)\"))\r\n         assert.same({tag = \"Call\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"}\r\n                     }, get_node(\"(a)(b)\"))\r\n         assert.same({tag = \"Call\",\r\n                        {tag = \"Call\",\r\n                           {tag = \"Id\", \"a\"},\r\n                           {tag = \"Id\", \"b\"}\r\n                        }\r\n                     }, get_node(\"(a)(b)()\"))\r\n         assert.same({line = 1, column = 2, end_column = 2, msg = \"expected expression near ')'\"}, get_error(\"()()\"))\r\n         assert.same({line = 1, column = 3, end_column = 3, msg = \"expected expression near <eof>\"}, get_error(\"a(\"))\r\n         assert.same({line = 1, column = 4, end_column = 4, msg = \"expected ')' near <eof>\"}, get_error(\"a(b\"))\r\n         assert.same({line = 2, column = 2, end_column = 2, msg = \"expected ')' (to close '(' on line 1) near <eof>\"},\r\n            get_error(\"a(\\nb\"))\r\n         assert.same({line = 2, column = 1, end_column = 2, msg = \"expected ')' (to close '(' on line 1) near 'cc'\"},\r\n            get_error(\"(a\\ncc\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"expected statement near '1'\"}, get_error(\"1()\"))\r\n         assert.same({line = 1, column = 1, end_column = 5, msg = \"expected statement near ''foo''\"}, get_error(\"'foo'()\"))\r\n         assert.same({line = 1, column = 9, end_column = 9, msg = \"expected identifier near '('\"}, get_error(\"function() end ()\"))\r\n      end)\r\n\r\n      it(\"parses method calls correctly\", function()\r\n         assert.same({tag = \"Invoke\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"}\r\n                     }, get_node(\"a:b()\"))\r\n         assert.same({tag = \"Invoke\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"},\r\n                        {tag = \"String\", \"c\"}\r\n                     }, get_node(\"a:b'c'\"))\r\n         assert.same({tag = \"Invoke\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"},\r\n                        {tag = \"Table\"}\r\n                     }, get_node(\"a:b{}\"))\r\n         assert.same({tag = \"Invoke\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_node(\"a:b(c)\"))\r\n         assert.same({tag = \"Invoke\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"},\r\n                        {tag = \"Id\", \"c\"},\r\n                        {tag = \"Id\", \"d\"}\r\n                     }, get_node(\"a:b(c, d)\"))\r\n         assert.same({tag = \"Invoke\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_node(\"(a):b(c)\"))\r\n         assert.same({tag = \"Invoke\",\r\n                        {tag = \"Invoke\",\r\n                           {tag = \"Id\", \"a\"},\r\n                           {tag = \"String\", \"b\"}\r\n                        }, {tag = \"String\", \"c\"}\r\n                     }, get_node(\"a:b():c()\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"expected statement near '1'\"}, get_error(\"1:b()\"))\r\n         assert.same({line = 1, column = 1, end_column = 2, msg = \"expected statement near ''''\"}, get_error(\"'':a()\"))\r\n         assert.same({line = 1, column = 9, end_column = 9, msg = \"expected identifier near '('\"}, get_error(\"function()end:b()\"))\r\n         assert.same({line = 1, column = 4, end_column = 4, msg = \"expected method arguments near ':'\"}, get_error(\"a:b:c()\"))\r\n         assert.same({line = 1, column = 3, end_column = 3, msg = \"expected identifier near <eof>\"}, get_error(\"a:\"))\r\n      end)\r\n   end)\r\n\r\n   describe(\"when parsing expressions\", function()\r\n      it(\"parses singleton expressions correctly\", function()\r\n         assert.same({tag = \"Nil\"}, get_expr(\"nil\"))\r\n         assert.same({tag = \"True\"}, get_expr(\"true\"))\r\n         assert.same({tag = \"False\"}, get_expr(\"false\"))\r\n         assert.same({tag = \"Number\", \"1\"}, get_expr(\"1\"))\r\n         assert.same({tag = \"String\", \"1\"}, get_expr(\"'1'\"))\r\n         assert.same({tag = \"Table\"}, get_expr(\"{}\"))\r\n         assert.same({tag = \"Function\", {}, {}}, get_expr(\"function() end\"))\r\n         assert.same({tag = \"Dots\", \"...\"}, get_expr(\"...\"))\r\n      end)\r\n\r\n      it(\"parses table constructors correctly\", function()\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_expr(\"{a, b, c}\"))\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Pair\", {tag = \"String\", \"b\"}, {tag = \"Id\", \"c\"}},\r\n                        {tag = \"Id\", \"d\"}\r\n                     }, get_expr(\"{a, b = c, d}\"))\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"String\", \"a\"},\r\n                        {tag = \"Pair\", {tag = \"Id\", \"b\"}, {tag = \"Id\", \"c\"}},\r\n                        {tag = \"Id\", \"d\"}\r\n                     }, get_expr(\"{[[a]], [b] = c, d}\"))\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_expr(\"{a; b, c}\"))\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_expr(\"{a; b, c,}\"))\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_expr(\"{a; b, c;}\"))\r\n         assert.same({line = 1, column = 9, end_column = 9, msg = \"expected expression near ';'\"}, get_error(\"return {;}\"))\r\n         assert.same({line = 1, column = 9, end_column = 9, msg = \"expected expression near <eof>\"}, get_error(\"return {\"))\r\n         assert.same({line = 1, column = 11, end_column = 13, msg = \"expected '}' near 'end'\"}, get_error(\"return {a end\"))\r\n         assert.same({line = 2, column = 1, end_column = 3, msg = \"expected '}' (to close '{' on line 1) near 'end'\"},\r\n            get_error(\"return {a\\nend\"))\r\n         assert.same({line = 1, column = 11, end_column = 11, msg = \"expected ']' near <eof>\"}, get_error(\"return {[a\"))\r\n         assert.same({line = 2, column = 2, end_column = 2, msg = \"expected ']' (to close '[' on line 1) near <eof>\"},\r\n            get_error(\"return {[\\na\"))\r\n         assert.same({line = 1, column = 11, end_column = 11, msg = \"expected expression near ','\"}, get_error(\"return {a,,}\"))\r\n         assert.same({line = 1, column = 13, end_column = 13, msg = \"expected expression near <eof>\"}, get_error(\"return {a = \"))\r\n      end)\r\n\r\n      it(\"wraps last element in table constructors in parens when needed\", function()\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Paren\",\r\n                           {tag = \"Call\",\r\n                              {tag = \"Id\", \"f\"}\r\n                           }\r\n                        }\r\n                     }, get_expr(\"{a, (f())}\"))\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Call\",\r\n                           {tag = \"Id\", \"f\"}\r\n                        },\r\n                        {tag = \"Id\", \"a\"}\r\n                     }, get_expr(\"{(f()), a}\"))\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Pair\",\r\n                           {tag = \"String\", \"a\"},\r\n                           {tag = \"Call\",\r\n                              {tag = \"Id\", \"f\"}\r\n                           }\r\n                        }\r\n                     }, get_expr(\"{a = (f())}\"))\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Call\",\r\n                           {tag = \"Id\", \"f\"}\r\n                        },\r\n                        {tag = \"Pair\",\r\n                           {tag = \"String\", \"a\"},\r\n                           {tag = \"Id\", \"b\"}\r\n                        }\r\n                     }, get_expr(\"{(f()), a = b}\"))\r\n      end)\r\n\r\n      it(\"parses simple expressions correctly\", function()\r\n         assert.same({tag = \"Op\", \"unm\",\r\n                        {tag = \"Number\", \"1\"}\r\n                     }, get_expr(\"-1\"))\r\n         assert.same({tag = \"Op\", \"add\",\r\n                        {tag = \"Op\", \"add\",\r\n                           {tag = \"Number\", \"1\"},\r\n                           {tag = \"Number\", \"2\"}\r\n                        },\r\n                        {tag = \"Number\", \"3\"}\r\n                     }, get_expr(\"1+2+3\"))\r\n         assert.same({tag = \"Op\", \"pow\",\r\n                        {tag = \"Number\", \"1\"},\r\n                        {tag = \"Op\", \"pow\",\r\n                           {tag = \"Number\", \"2\"},\r\n                           {tag = \"Number\", \"3\"}\r\n                        }\r\n                     }, get_expr(\"1^2^3\"))\r\n         assert.same({tag = \"Op\", \"concat\",\r\n                        {tag = \"String\", \"1\"},\r\n                        {tag = \"Op\", \"concat\",\r\n                           {tag = \"String\", \"2\"},\r\n                           {tag = \"String\", \"3\"}\r\n                        }\r\n                     }, get_expr(\"'1'..'2'..'3'\"))\r\n      end)\r\n\r\n      it(\"handles operator precedence correctly\", function()\r\n         assert.same({tag = \"Op\", \"add\",\r\n                        {tag = \"Op\", \"unm\",\r\n                           {tag = \"Number\", \"1\"}\r\n                        },\r\n                        {tag = \"Op\", \"mul\",\r\n                           {tag = \"Number\", \"2\"},\r\n                           {tag = \"Op\", \"pow\",\r\n                              {tag = \"Number\", \"3\"},\r\n                              {tag = \"Number\", \"4\"}\r\n                           }\r\n                        }\r\n                     }, get_expr(\"-1+2*3^4\"))\r\n         assert.same({tag = \"Op\", \"bor\",\r\n                        {tag = \"Op\", \"bor\",\r\n                           {tag = \"Op\", \"band\",\r\n                              {tag = \"Op\", \"shr\",\r\n                                 {tag = \"Number\", \"1\"},\r\n                                 {tag = \"Number\", \"2\"}\r\n                              },\r\n                              {tag = \"Op\", \"shl\",\r\n                                 {tag = \"Number\", \"3\"},\r\n                                 {tag = \"Number\", \"4\"}\r\n                              }\r\n                           },\r\n                           {tag = \"Op\", \"bxor\",\r\n                              {tag = \"Number\", \"5\"},\r\n                              {tag = \"Number\", \"6\"}\r\n                           }\r\n                        },\r\n                        {tag = \"Op\", \"bnot\",\r\n                           {tag = \"Number\", \"7\"}\r\n                        }\r\n                     }, get_expr(\"1 >> 2 & 3 << 4 | 5 ~ 6 | ~7\"))\r\n         assert.same({tag = \"Op\", \"or\",\r\n                        {tag = \"Op\", \"and\",\r\n                           {tag = \"Op\", \"eq\",\r\n                              {tag = \"Id\", \"a\"},\r\n                              {tag = \"Id\", \"b\"}\r\n                           },\r\n                           {tag = \"Op\", \"eq\",\r\n                              {tag = \"Id\", \"c\"},\r\n                              {tag = \"Id\", \"d\"}\r\n                           }\r\n                        },\r\n                        {tag = \"Op\", \"ne\",\r\n                           {tag = \"Id\", \"e\"},\r\n                           {tag = \"Id\", \"f\"}\r\n                        }\r\n                     }, get_expr(\"a == b and c == d or e ~= f\"))\r\n      end)\r\n\r\n      it(\"wraps last expression in a list in parens when needed\", function()\r\n         assert.same({tag = \"Return\",\r\n                        {tag = \"Dots\", \"...\"},\r\n                        {tag = \"Paren\", {tag = \"Dots\", \"...\"}}\r\n                     }, get_node(\"return (...), (...)\"))\r\n         assert.same({tag = \"Return\",\r\n                        {tag = \"Dots\", \"...\"},\r\n                        {tag = \"Dots\", \"...\"}\r\n                     }, get_node(\"return (...), ...\"))\r\n         assert.same({tag = \"Return\",\r\n                        {tag = \"True\"},\r\n                        {tag = \"False\"}\r\n                     }, get_node(\"return (true), (false)\"))\r\n         assert.same({tag = \"Return\",\r\n                        {tag = \"Call\",\r\n                           {tag = \"Id\", \"f\"}\r\n                        },\r\n                        {tag = \"Paren\",\r\n                           {tag = \"Call\",\r\n                              {tag = \"Id\", \"g\"}\r\n                           }\r\n                        }\r\n                     }, get_node(\"return (f()), (g())\"))\r\n         assert.same({tag = \"Return\",\r\n                        {tag = \"Invoke\",\r\n                           {tag = \"Id\", \"f\"},\r\n                           {tag = \"String\", \"n\"}\r\n                        },\r\n                        {tag = \"Paren\",\r\n                           {tag = \"Invoke\",\r\n                              {tag = \"Id\", \"g\"},\r\n                              {tag = \"String\", \"m\"}\r\n                           }\r\n                        }\r\n                     }, get_node(\"return (f:n()), (g:m())\"))\r\n      end)\r\n   end)\r\n\r\n   describe(\"when parsing multiple statements\", function()\r\n      it(\"considers semicolons and comments no-op statements\", function()\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"b\"}\r\n                        }\r\n                     }, get_node(\";;;a = b;--[[]];--;\"))\r\n      end)\r\n\r\n      it(\"does not allow statements after return\", function()\r\n         assert.same({line = 1, column = 8, end_column = 12, msg = \"expected expression near 'break'\"}, get_error(\"return break\"))\r\n         assert.same({line = 1, column = 9, end_column = 13, msg = \"expected end of block near 'break'\"}, get_error(\"return; break\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected end of block near ';'\"}, get_error(\"return;;\"))\r\n         assert.same({line = 1, column = 10, end_column = 14, msg = \"expected end of block near 'break'\"}, get_error(\"return 1 break\"))\r\n         assert.same({line = 1, column = 11, end_column = 15, msg = \"expected end of block near 'break'\"}, get_error(\"return 1; break\"))\r\n         assert.same({line = 1, column = 13, end_column = 17, msg = \"expected end of block near 'break'\"}, get_error(\"return 1, 2 break\"))\r\n         assert.same({line = 1, column = 14, end_column = 18, msg = \"expected end of block near 'break'\"}, get_error(\"return 1, 2; break\"))\r\n      end)\r\n\r\n      it(\"parses nested statements correctly\", function()\r\n         assert.same({\r\n                        {tag = \"Localrec\",\r\n                           {tag = \"Id\", \"f\"},\r\n                           {tag = \"Function\", {}, {\r\n                              {tag = \"While\",\r\n                                 {tag = \"True\"},\r\n                                 {\r\n                                    {tag = \"If\",\r\n                                       {tag = \"Nil\"},\r\n                                       {\r\n                                          {tag = \"Call\",\r\n                                             {tag = \"Id\", \"f\"}\r\n                                          },\r\n                                          {tag = \"Return\"}\r\n                                       },\r\n                                       {tag = \"False\"},\r\n                                       {\r\n                                          {tag = \"Call\",\r\n                                             {tag = \"Id\", \"g\"}\r\n                                          },\r\n                                          {tag = \"Break\"}\r\n                                       },\r\n                                       {\r\n                                          {tag = \"Call\",\r\n                                             {tag = \"Id\", \"h\"}\r\n                                          },\r\n                                          {tag = \"Repeat\",\r\n                                             {\r\n                                                {tag = \"Goto\", \"fail\"}\r\n                                             },\r\n                                             {tag = \"Id\", \"get_forked\"}\r\n                                          }\r\n                                       }\r\n                                    }\r\n                                 }\r\n                              },\r\n                              {tag = \"Label\", \"fail\"}\r\n                           }}\r\n                        },\r\n                        {tag = \"Do\",\r\n                           {tag = \"Fornum\",\r\n                              {tag = \"Id\", \"i\"},\r\n                              {tag = \"Number\", \"1\"},\r\n                              {tag = \"Number\", \"2\"},\r\n                              {\r\n                                 {tag = \"Call\",\r\n                                    {tag = \"Id\", \"nothing\"}\r\n                                 }\r\n                              }\r\n                           },\r\n                           {tag = \"Forin\",\r\n                              {\r\n                                 {tag = \"Id\", \"k\"},\r\n                                 {tag = \"Id\", \"v\"}\r\n                              },\r\n                              {\r\n                                 {tag = \"Call\",\r\n                                    {tag = \"Id\", \"pairs\"}\r\n                                 }\r\n                              },\r\n                              {\r\n                                 {tag = \"Call\",\r\n                                    {tag = \"Id\", \"print\"},\r\n                                    {tag = \"String\", \"bar\"}\r\n                                 },\r\n                                 {tag = \"Call\",\r\n                                    {tag = \"Id\", \"assert\"},\r\n                                    {tag = \"Number\", \"42\"}\r\n                                 }\r\n                              }\r\n                           },\r\n                           {tag = \"Return\"}\r\n                        },\r\n                     }, get_ast([[\r\nlocal function f()\r\n   while true do\r\n      if nil then\r\n         f()\r\n         return\r\n      elseif false then\r\n         g()\r\n         break\r\n      else\r\n         h()\r\n\r\n         repeat\r\n            goto fail\r\n         until get_forked\r\n      end\r\n   end\r\n\r\n   ::fail::\r\nend\r\n\r\ndo\r\n   for i=1, 2 do\r\n      nothing()\r\n   end\r\n\r\n   for k, v in pairs() do\r\n      print(\"bar\")\r\n      assert(42)\r\n   end\r\n\r\n   return\r\nend\r\n]]))\r\n\r\n      end)\r\n   end)\r\n\r\n   it(\"provides correct location info\", function()\r\n      assert.same({\r\n                     {tag = \"Localrec\", location = {line = 1, column = 1, offset = 1}, first_token = \"local\",\r\n                        {tag = \"Id\", \"foo\", location = {line = 1, column = 16, offset = 16}},\r\n                        {tag = \"Function\", location = {line = 1, column = 7, offset = 7},\r\n                           end_location = {line = 4, column = 1, offset = 78},\r\n                           {\r\n                              {tag = \"Id\", \"a\", location = {line = 1, column = 20, offset = 20}},\r\n                              {tag = \"Id\", \"b\", location = {line = 1, column = 23, offset = 23}},\r\n                              {tag = \"Id\", \"c\", location = {line = 1, column = 26, offset = 26}},\r\n                              {tag = \"Dots\", \"...\", location = {line = 1, column = 29, offset = 29}}\r\n                           },\r\n                           {\r\n                              {tag = \"Local\", location = {line = 2, column = 4, offset = 37}, first_token = \"local\",\r\n                                 equals_location = {line = 2, column = 12, offset = 45},\r\n                                 {\r\n                                    {tag = \"Id\", \"d\", location = {line = 2, column = 10, offset = 43}}\r\n                                 },\r\n                                 {\r\n                                    {tag = \"Op\", \"mul\", location = {line = 2, column = 15, offset = 48},\r\n                                       {tag = \"Op\", \"add\", location = {line = 2, column = 15, offset = 48},\r\n                                          {tag = \"Id\", \"a\", location = {line = 2, column = 15, offset = 48}},\r\n                                          {tag = \"Id\", \"b\", location = {line = 2, column = 19, offset = 52}}\r\n                                       },\r\n                                       {tag = \"Id\", \"c\", location = {line = 2, column = 24, offset = 57}}\r\n                                    }\r\n                                 }\r\n                              },\r\n                              {tag = \"Return\", location = {line = 3, column = 4, offset = 62}, first_token = \"return\",\r\n                                 {tag = \"Id\", \"d\", location = {line = 3, column = 11, offset = 69}},\r\n                                 {tag = \"Paren\", location = {line = 3, column = 15, offset = 73},\r\n                                    {tag = \"Dots\", \"...\", location = {line = 3, column = 15, offset = 73}}\r\n                                 }\r\n                              }\r\n                           }\r\n                        }\r\n                     },\r\n                     {tag = \"Set\", location = {line = 6, column = 1, offset = 83}, first_token = \"function\",\r\n                        {\r\n                           {tag = \"Index\", location = {line = 6, column = 10, offset = 92},\r\n                              {tag = \"Id\", \"t\", location = {line = 6, column = 10, offset = 92}},\r\n                              {tag = \"String\", \"bar\", location = {line = 6, column = 12, offset = 94}}\r\n                           }\r\n                        },\r\n                        {\r\n                           {tag = \"Function\", location = {line = 6, column = 1, offset = 83},\r\n                              end_location = {line = 10, column = 1, offset = 142},\r\n                              {\r\n                                 {tag = \"Id\", \"self\", implicit = true, location = {line = 6, column = 11, offset = 93}},\r\n                                 {tag = \"Id\", \"arg\", location = {line = 6, column = 16, offset = 98}}\r\n                              },\r\n                              {\r\n                                 {tag = \"If\", location = {line = 7, column = 4, offset = 106}, first_token = \"if\",\r\n                                    {tag = \"Id\", \"arg\", location = {line = 7, column = 7, offset = 109}, first_token = \"arg\"},\r\n                                    {location = {line = 7, column = 11, offset = 113}, -- Branch location.\r\n                                       {tag = \"Call\", location = {line = 8, column = 7, offset = 124}, first_token = \"print\",\r\n                                          {tag = \"Id\", \"print\", location = {line = 8, column = 7, offset = 124}},\r\n                                          {tag = \"Id\", \"arg\", location = {line = 8, column = 13, offset = 130}}\r\n                                       }\r\n                                    }\r\n                                 }\r\n                              }\r\n                           }\r\n                        }\r\n                     }\r\n                  }, (parser([[\r\nlocal function foo(a, b, c, ...)\r\n   local d = (a + b) * c\r\n   return d, (...)\r\nend\r\n\r\nfunction t:bar(arg)\r\n   if arg then\r\n      print(arg)\r\n   end\r\nend\r\n]])))\r\n\r\n   end)\r\n\r\n   it(\"provides correct location info for labels\", function()\r\n      assert.same({\r\n                     {tag = \"Label\", \"foo\", location = {line = 1, column = 1, offset = 1}, end_column = 7, first_token = \"::\"},\r\n                     {tag = \"Label\", \"bar\", location = {line = 2, column = 1, offset = 9}, end_column = 6, first_token = \"::\"},\r\n                     {tag = \"Label\", \"baz\", location = {line = 3, column = 3, offset = 18}, end_column = 4, first_token = \"::\"}\r\n                  }, (parser([[\r\n::foo::\r\n:: bar\r\n::::\r\nbaz::\r\n]])))\r\n   end)\r\n\r\n   it(\"provides correct location info for statements starting with expressions\", function()\r\n      assert.same({\r\n                     {tag = \"Call\", location = {line = 1, column = 1, offset = 1}, first_token = \"a\",\r\n                        {tag = \"Id\", \"a\", location = {line = 1, column = 1, offset = 1}}\r\n                     },\r\n                     {tag = \"Call\", location = {line = 2, column = 1, offset = 6}, first_token = \"(\",\r\n                        {tag = \"Id\", \"b\", location = {line = 2, column = 2, offset = 7}}\r\n                     },\r\n                     {tag = \"Set\", location = {line = 3, column = 1, offset = 13}, first_token = \"(\",\r\n                        equals_location = {line = 3, column = 12, offset = 24},\r\n                        {\r\n                           {tag = \"Index\", location = {line = 3, column = 3, offset = 15},\r\n                              {tag = \"Index\", location = {line = 3, column = 3, offset = 15},\r\n                                 {tag = \"Id\", \"c\", location = {line = 3, column = 3, offset = 15}},\r\n                                 {tag = \"String\", \"d\", location = {line = 3, column = 6, offset = 18}}\r\n                              },\r\n                              {tag = \"Number\", \"3\", location = {line = 3, column = 9, offset = 21}}\r\n                           }\r\n                        },\r\n                        {\r\n                           {tag = \"Number\", \"2\", location = {line = 3, column = 14, offset = 26}}\r\n                        }\r\n                     }\r\n                  }, (parser([[\r\na();\r\n(b)();\r\n((c).d)[3] = 2\r\n]])))\r\n   end)\r\n\r\n   it(\"provides correct location info for conditions\", function()\r\n      assert.same({\r\n                     {tag = \"If\", location = {line = 1, column = 1, offset = 1}, first_token = \"if\",\r\n                        {tag = \"Id\", \"x\", location = {line = 1, column = 5, offset = 5}, first_token = \"x\"},\r\n                        {location = {line = 1, column = 8, offset = 8}}\r\n                     }\r\n                  }, (parser([[\r\nif (x) then end\r\n]])))\r\n   end)\r\n\r\n   it(\"provides correct location info for table keys\", function()\r\n      assert.same({\r\n                     {tag = \"Return\", location = {line = 1, column = 1, offset = 1}, first_token = \"return\",\r\n                        {tag = \"Table\", location = {line = 1, column = 8, offset = 8},\r\n                           {tag = \"Pair\", location = {line = 1, column = 9, offset = 9}, first_token = \"a\",\r\n                              {tag = \"String\", \"a\", location = {line = 1, column = 9, offset = 9}},\r\n                              {tag = \"Id\", \"b\", location = {line = 1, column = 13, offset = 13}}\r\n                           },\r\n                           {tag = \"Pair\", location = {line = 1, column = 16, offset = 16}, first_token = \"[\",\r\n                              {tag = \"Id\", \"x\", location = {line = 1, column = 17, offset = 17}},\r\n                              {tag = \"Id\", \"y\", location = {line = 1, column = 22, offset = 22}},\r\n                           },\r\n                           {tag = \"Id\", \"z\", location = {line = 1, column = 26, offset = 26}, first_token = \"z\"}\r\n                        }\r\n                     }\r\n                  }, (parser([[\r\nreturn {a = b, [x] = y, (z)}\r\n]])))\r\n   end)\r\n\r\n   it(\"provides correct error location info\", function()\r\n      assert.same({line = 8, column = 15, end_column = 15, msg = \"expected '=' near ')'\"}, get_error([[\r\nlocal function foo(a, b, c, ...)\r\n   local d = (a + b) * c\r\n   return d, (...)\r\nend\r\n\r\nfunction t:bar(arg)\r\n   if arg then\r\n      printarg)\r\n   end\r\nend\r\n]]))\r\n   end)\r\n\r\n   describe(\"providing misc information\", function()\r\n      it(\"provides comments correctly\", function()\r\n         assert.same({\r\n            {contents = \" ignore something\", location = {line = 1, column = 1, offset = 1}, end_column = 19},\r\n            {contents = \" comments\", location = {line = 2, column = 13, offset = 33}, end_column = 23},\r\n            {contents = \"long comment\", location = {line = 3, column = 13, offset = 57}, end_column = 17}\r\n         }, get_comments([[\r\n-- ignore something\r\nfoo = bar() -- comments\r\nreturn true --[=[\r\nlong comment]=]\r\n         ]]))\r\n      end)\r\n\r\n      it(\"provides lines with code correctly\", function()\r\n         -- EOS is considered \"code\" (which does not matter w.r.t inline options).\r\n         assert.same({nil, true, true, true, true, true, nil, nil, true, true, true}, get_code_lines([[\r\n-- nothing here\r\nlocal foo = 2\r\n+\r\n3\r\n+\r\n{\r\n   --[=[empty]=]\r\n\r\n}\r\n::bar::\r\n]]))\r\n      end)\r\n   end)\r\nend",
    "type": "function"
  }, {
    "id": 370,
    "text": "it(\"parses empty source correctly\", function()\r\n      assert.same({}, get_ast(\" \"))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 371,
    "text": "it(\"does not allow extra ending keywords\", function()\r\n      assert.same({line = 1, column = 1, end_column = 3, msg = \"expected <eof> near 'end'\"}, get_error(\"end\"))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 372,
    "text": "it(\"parses return statement correctly\", function()\r\n      assert.same({tag = \"Return\"}, get_node(\"return\"))\r\n      assert.same({tag = \"Return\",\r\n                     {tag = \"Number\", \"1\"}\r\n                  }, get_node(\"return 1\"))\r\n      assert.same({tag = \"Return\",\r\n                     {tag = \"Number\", \"1\"},\r\n                     {tag = \"String\", \"foo\"}\r\n                  }, get_node(\"return 1, 'foo'\"))\r\n      assert.same({line = 1, column = 10, end_column = 10, msg = \"expected expression near <eof>\"}, get_error(\"return 1,\"))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 373,
    "text": "it(\"parses labels correctly\", function()\r\n      assert.same({tag = \"Label\", \"fail\"}, get_node(\"::fail::\"))\r\n      assert.same({tag = \"Label\", \"fail\"}, get_node(\"::\\nfail\\n::\"))\r\n      assert.same({line = 1, column = 3, end_column = 4, msg = \"expected identifier near '::'\"}, get_error(\"::::\"))\r\n      assert.same({line = 1, column = 3, end_column = 3, msg = \"expected identifier near '1'\"}, get_error(\"::1::\"))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 374,
    "text": "it(\"parses goto correctly\", function()\r\n      assert.same({tag = \"Goto\", \"fail\"}, get_node(\"goto fail\"))\r\n      assert.same({line = 1, column = 5, end_column = 5, msg = \"expected identifier near <eof>\"}, get_error(\"goto\"))\r\n      assert.same({line = 1, column = 9, end_column = 9, msg = \"expected statement near ','\"}, get_error(\"goto foo, bar\"))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 375,
    "text": "it(\"parses break correctly\", function()\r\n      assert.same({tag = \"Break\"}, get_node(\"break\"))\r\n      assert.same({line = 1, column = 11, end_column = 11, msg = \"expected '=' near <eof>\"}, get_error(\"break fail\"))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 376,
    "text": "it(\"parses do end correctly\", function()\r\n      assert.same({tag = \"Do\"}, get_node(\"do end\"))\r\n      assert.same({line = 1, column = 3, end_column = 3, msg = \"expected 'end' near <eof>\"}, get_error(\"do\"))\r\n      assert.same({line = 1, column = 4, end_column = 8, msg = \"expected 'end' near 'until'\"}, get_error(\"do until false\"))\r\n      assert.same({line = 2, column = 1, end_column = 5, msg = \"expected 'end' (to close 'do' on line 1) near 'until'\"},\r\n         get_error(\"do\\nuntil false\"))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 377,
    "text": "it(\"parses while do end correctly\", function()\r\n      assert.same({tag = \"While\",\r\n                     {tag = \"True\"},\r\n                     {}\r\n                  }, get_node(\"while true do end\"))\r\n      assert.same({line = 1, column = 6, end_column = 6, msg = \"expected condition near <eof>\"}, get_error(\"while\"))\r\n      assert.same({line = 1, column = 11, end_column = 11, msg = \"expected 'do' near <eof>\"}, get_error(\"while true\"))\r\n      assert.same({line = 1, column = 14, end_column = 14, msg = \"expected 'end' near <eof>\"}, get_error(\"while true do\"))\r\n      assert.same({line = 2, column = 3, end_column = 3, msg = \"expected 'end' (to close 'while' on line 1) near <eof>\"},\r\n         get_error(\"while true\\ndo\"))\r\n      assert.same({line = 1, column = 7, end_column = 8, msg = \"expected condition near 'do'\"}, get_error(\"while do end\"))\r\n      assert.same({line = 1, column = 11, end_column = 11, msg = \"expected 'do' near ','\"}, get_error(\"while true, false do end\"))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 378,
    "text": "it(\"parses repeat until correctly\", function()\r\n      assert.same({tag = \"Repeat\",\r\n                     {},\r\n                     {tag = \"True\"}\r\n                  }, get_node(\"repeat until true\"))\r\n      assert.same({line = 1, column = 7, end_column = 7, msg = \"expected 'until' near <eof>\"}, get_error(\"repeat\"))\r\n      assert.same({line = 3, column = 1, end_column = 1, msg = \"expected 'until' (to close 'repeat' on line 1) near <eof>\"},\r\n         get_error(\"repeat\\n--\"))\r\n      assert.same({line = 1, column = 13, end_column = 13, msg = \"expected condition near <eof>\"}, get_error(\"repeat until\"))\r\n      assert.same({line = 1, column = 18, end_column = 18, msg = \"expected statement near ','\"}, get_error(\"repeat until true, false\"))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 379,
    "text": "describe(\"when parsing if\", function()\r\n      it(\"parses if then end correctly\", function()\r\n         assert.same({tag = \"If\",\r\n                        {tag = \"True\"},\r\n                        {}\r\n                     }, get_node(\"if true then end\"))\r\n         assert.same({line = 1, column = 3, end_column = 3, msg = \"expected condition near <eof>\"}, get_error(\"if\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected 'then' near <eof>\"}, get_error(\"if true\"))\r\n         assert.same({line = 1, column = 13, end_column = 13, msg = \"expected 'end' near <eof>\"}, get_error(\"if true then\"))\r\n         assert.same({line = 2, column = 5, end_column = 5, msg = \"expected 'end' (to close 'if' on line 1) near <eof>\"},\r\n            get_error(\"if true\\nthen\"))\r\n         assert.same({line = 1, column = 4, end_column = 7, msg = \"expected condition near 'then'\"}, get_error(\"if then end\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected 'then' near ','\"}, get_error(\"if true, false then end\"))\r\n      end)\r\n\r\n      it(\"parses if then else end correctly\", function()\r\n         assert.same({tag = \"If\",\r\n                        {tag = \"True\"},\r\n                        {},\r\n                        {}\r\n                     }, get_node(\"if true then else end\"))\r\n         assert.same({line = 1, column = 18, end_column = 18, msg = \"expected 'end' near <eof>\"}, get_error(\"if true then else\"))\r\n         assert.same({line = 3, column = 1, end_column = 1, msg = \"expected 'end' (to close 'else' on line 2) near <eof>\"},\r\n            get_error(\"if true\\nthen else\\n\"))\r\n         assert.same({line = 1, column = 19, end_column = 22, msg = \"expected 'end' near 'else'\"}, get_error(\"if true then else else end\"))\r\n      end)\r\n\r\n      it(\"parses if then elseif then end correctly\", function()\r\n         assert.same({tag = \"If\",\r\n                        {tag = \"True\"},\r\n                        {},\r\n                        {tag = \"False\"},\r\n                        {}\r\n                     }, get_node(\"if true then elseif false then end\"))\r\n         assert.same({line = 1, column = 21, end_column = 23, msg = \"expected condition near 'end'\"}, get_error(\"if true then elseif end\"))\r\n         assert.same({line = 1, column = 21, end_column = 24, msg = \"expected condition near 'then'\"}, get_error(\"if true then elseif then end\"))\r\n         assert.same({line = 2, column = 5, end_column = 5, msg = \"expected 'end' (to close 'elseif' on line 1) near <eof>\"},\r\n            get_error(\"if true then elseif a\\nthen\"))\r\n      end)\r\n\r\n      it(\"parses if then elseif then else end correctly\", function()\r\n         assert.same({tag = \"If\",\r\n                        {tag = \"True\"},\r\n                        {},\r\n                        {tag = \"False\"},\r\n                        {},\r\n                        {}\r\n                     }, get_node(\"if true then elseif false then else end\"))\r\n         assert.same({line = 1, column = 36, end_column = 36, msg = \"expected 'end' near <eof>\"}, get_error(\"if true then elseif false then else\"))\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 380,
    "text": "describe(\"when parsing for\", function()\r\n      it(\"parses fornum correctly\", function()\r\n         assert.same({tag = \"Fornum\",\r\n                        {tag = \"Id\", \"i\"},\r\n                        {tag = \"Number\", \"1\"},\r\n                        {tag = \"Op\", \"len\", {tag = \"Id\", \"t\"}},\r\n                        {}\r\n                     }, get_node(\"for i=1, #t do end\"))\r\n         assert.same({line = 1, column = 4, end_column = 4, msg = \"expected identifier near <eof>\"}, get_error(\"for\"))\r\n         assert.same({line = 1, column = 6, end_column = 6, msg = \"expected '=', ',' or 'in' near <eof>\"}, get_error(\"for i\"))\r\n         assert.same({line = 1, column = 7, end_column = 8, msg = \"expected '=', ',' or 'in' near '~='\"}, get_error(\"for i ~= 2\"))\r\n         assert.same({line = 1, column = 11, end_column = 12, msg = \"expected ',' near 'do'\"}, get_error(\"for i = 2 do end\"))\r\n         assert.same({line = 1, column = 15, end_column = 15, msg = \"expected 'end' near <eof>\"}, get_error(\"for i=1, #t do\"))\r\n         assert.same({line = 2, column = 4, end_column = 4, msg = \"expected 'end' (to close 'for' on line 1) near <eof>\"},\r\n            get_error(\"for i=1, #t do\\na()\"))\r\n         assert.same({line = 1, column = 5, end_column = 5, msg = \"expected identifier near '('\"}, get_error(\"for (i)=1, #t do end\"))\r\n         assert.same({line = 1, column = 5, end_column = 5, msg = \"expected identifier near '3'\"}, get_error(\"for 3=1, #t do end\"))\r\n      end)\r\n\r\n      it(\"parses fornum with step correctly\", function()\r\n         assert.same({tag = \"Fornum\",\r\n                        {tag = \"Id\", \"i\"},\r\n                        {tag = \"Number\", \"1\"},\r\n                        {tag = \"Op\", \"len\", {tag = \"Id\", \"t\"}},\r\n                        {tag = \"Number\", \"2\"},\r\n                        {}\r\n                     }, get_node(\"for i=1, #t, 2 do end\"))\r\n         assert.same({line = 1, column = 15, end_column = 15, msg = \"expected 'do' near ','\"}, get_error(\"for i=1, #t, 2, 3 do\"))\r\n      end)\r\n\r\n      it(\"parses forin correctly\", function()\r\n         assert.same({tag = \"Forin\", {\r\n                           {tag = \"Id\", \"i\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"t\"}\r\n                        },\r\n                        {}\r\n                     }, get_node(\"for i in t do end\"))\r\n         assert.same({tag = \"Forin\", {\r\n                           {tag = \"Id\", \"i\"},\r\n                           {tag = \"Id\", \"j\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"t\"},\r\n                           {tag = \"String\", \"foo\"}\r\n                        },\r\n                        {}\r\n                     }, get_node(\"for i, j in t, 'foo' do end\"))\r\n         assert.same({line = 1, column = 5, end_column = 6, msg = \"expected identifier near 'in'\"}, get_error(\"for in foo do end\"))\r\n         assert.same({line = 1, column = 10, end_column = 11, msg = \"expected expression near 'do'\"}, get_error(\"for i in do end\"))\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 381,
    "text": "describe(\"when parsing functions\", function()\r\n      it(\"parses simple function correctly\", function()\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Function\", {}, {}}\r\n                        }\r\n                     }, get_node(\"function a() end\"))\r\n         assert.same({line = 1, column = 9, end_column = 9, msg = \"expected identifier near <eof>\"}, get_error(\"function\"))\r\n         assert.same({line = 1, column = 11, end_column = 11, msg = \"expected '(' near <eof>\"}, get_error(\"function a\"))\r\n         assert.same({line = 1, column = 12, end_column = 12, msg = \"expected argument near <eof>\"}, get_error(\"function a(\"))\r\n         assert.same({line = 1, column = 13, end_column = 13, msg = \"expected 'end' near <eof>\"}, get_error(\"function a()\"))\r\n         assert.same({line = 2, column = 2, end_column = 2, msg = \"expected 'end' (to close 'function' on line 1) near <eof>\"},\r\n            get_error(\"function a(\\n)\"))\r\n         assert.same({line = 1, column = 10, end_column = 10, msg = \"expected identifier near '('\"}, get_error(\"function (a)()\"))\r\n         assert.same({line = 1, column = 9, end_column = 9, msg = \"expected identifier near '('\"}, get_error(\"function() end\"))\r\n         assert.same({line = 1, column = 11, end_column = 11, msg = \"expected '(' near 'a'\"}, get_error(\"(function a() end)\"))\r\n         assert.same({line = 1, column = 18, end_column = 18, msg = \"expected expression near ')'\"}, get_error(\"function a() end()\"))\r\n      end)\r\n\r\n      it(\"parses simple function with arguments correctly\", function()\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Function\", {{tag = \"Id\", \"b\"}}, {}}\r\n                        }\r\n                     }, get_node(\"function a(b) end\"))\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Function\", {{tag = \"Id\", \"b\"}, {tag = \"Id\", \"c\"}}, {}}\r\n                        }\r\n                     }, get_node(\"function a(b, c) end\"))\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Function\", {{tag = \"Id\", \"b\"}, {tag = \"Dots\", \"...\"}}, {}}\r\n                        }\r\n                     }, get_node(\"function a(b, ...) end\"))\r\n         assert.same({line = 1, column = 15, end_column = 15, msg = \"expected argument near ')'\"}, get_error(\"function a(b, ) end\"))\r\n         assert.same({line = 1, column = 13, end_column = 13, msg = \"expected ')' near '.'\"}, get_error(\"function a(b.c) end\"))\r\n         assert.same({line = 2, column = 2, end_column = 2, msg = \"expected ')' (to close '(' on line 1) near '.'\"},\r\n            get_error(\"function a(\\nb.c) end\"))\r\n         assert.same({line = 1, column = 12, end_column = 12, msg = \"expected argument near '('\"}, get_error(\"function a((b)) end\"))\r\n         assert.same({line = 1, column = 15, end_column = 15, msg = \"expected ')' near ','\"}, get_error(\"function a(..., ...) end\"))\r\n      end)\r\n\r\n      it(\"parses field function correctly\", function()\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\", {tag = \"Id\", \"a\"}, {tag = \"String\", \"b\"}}\r\n                        }, {\r\n                           {tag = \"Function\", {}, {}}\r\n                        }\r\n                     }, get_node(\"function a.b() end\"))\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\",\r\n                              {tag = \"Index\", {tag = \"Id\", \"a\"}, {tag = \"String\", \"b\"}},\r\n                              {tag = \"String\", \"c\"}\r\n                           }\r\n                        }, {\r\n                           {tag = \"Function\", {}, {}}\r\n                        }\r\n                     }, get_node(\"function a.b.c() end\"))\r\n         assert.same({line = 1, column = 11, end_column = 11, msg = \"expected '(' near '['\"}, get_error(\"function a[b]() end\"))\r\n         assert.same({line = 1, column = 12, end_column = 12, msg = \"expected identifier near '('\"}, get_error(\"function a.() end\"))\r\n      end)\r\n\r\n      it(\"parses method function correctly\", function()\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\", {tag = \"Id\", \"a\"}, {tag = \"String\", \"b\"}}\r\n                        }, {\r\n                           {tag = \"Function\", {{tag = \"Id\", \"self\", implicit = true}}, {}}\r\n                        }\r\n                     }, get_node(\"function a:b() end\"))\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\",\r\n                              {tag = \"Index\", {tag = \"Id\", \"a\"}, {tag = \"String\", \"b\"}},\r\n                              {tag = \"String\", \"c\"}\r\n                           }\r\n                        }, {\r\n                           {tag = \"Function\", {{tag = \"Id\", \"self\", implicit = true}}, {}}\r\n                        }\r\n                     }, get_node(\"function a.b:c() end\"))\r\n         assert.same({line = 1, column = 13, end_column = 13, msg = \"expected '(' near '.'\"}, get_error(\"function a:b.c() end\"))\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 382,
    "text": "describe(\"when parsing local declarations\", function()\r\n      it(\"parses simple local declaration correctly\", function()\r\n         assert.same({tag = \"Local\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }\r\n                     }, get_node(\"local a\"))\r\n         assert.same({tag = \"Local\", {\r\n                           {tag = \"Id\", \"a\"},\r\n                           {tag = \"Id\", \"b\"}\r\n                        }\r\n                     }, get_node(\"local a, b\"))\r\n         assert.same({line = 1, column = 6, end_column = 6, msg = \"expected identifier near <eof>\"}, get_error(\"local\"))\r\n         assert.same({line = 1, column = 9, end_column = 9, msg = \"expected identifier near <eof>\"}, get_error(\"local a,\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected statement near '.'\"}, get_error(\"local a.b\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected statement near '['\"}, get_error(\"local a[b]\"))\r\n         assert.same({line = 1, column = 7, end_column = 7, msg = \"expected identifier near '('\"}, get_error(\"local (a)\"))\r\n      end)\r\n\r\n      it(\"parses local declaration with assignment correctly\", function()\r\n         assert.same({tag = \"Local\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"b\"}\r\n                        }\r\n                     }, get_node(\"local a = b\"))\r\n         assert.same({tag = \"Local\", {\r\n                           {tag = \"Id\", \"a\"},\r\n                           {tag = \"Id\", \"b\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"c\"},\r\n                           {tag = \"Id\", \"d\"}\r\n                        }\r\n                     }, get_node(\"local a, b = c, d\"))\r\n         assert.same({line = 1, column = 11, end_column = 11, msg = \"expected expression near <eof>\"}, get_error(\"local a = \"))\r\n         assert.same({line = 1, column = 13, end_column = 13, msg = \"expected expression near <eof>\"}, get_error(\"local a = b,\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected statement near '.'\"}, get_error(\"local a.b = c\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected statement near '['\"}, get_error(\"local a[b] = c\"))\r\n         assert.same({line = 1, column = 10, end_column = 10, msg = \"expected identifier near '('\"}, get_error(\"local a, (b) = c\"))\r\n      end)\r\n\r\n      it(\"parses local function declaration correctly\", function()\r\n         assert.same({tag = \"Localrec\",\r\n                        {tag = \"Id\", \"a\"}, \r\n                        {tag = \"Function\", {}, {}}\r\n                     }, get_node(\"local function a() end\"))\r\n         assert.same({line = 1, column = 15, end_column = 15, msg = \"expected identifier near <eof>\"}, get_error(\"local function\"))\r\n         assert.same({line = 1, column = 17, end_column = 17, msg = \"expected '(' near '.'\"}, get_error(\"local function a.b() end\"))\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 383,
    "text": "describe(\"when parsing assignments\", function()\r\n      it(\"parses single target assignment correctly\", function()\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"b\"}\r\n                        }\r\n                     }, get_node(\"a = b\"))\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\", {tag = \"Id\", \"a\"}, {tag = \"String\", \"b\"}}\r\n                        }, {\r\n                           {tag = \"Id\", \"c\"}\r\n                        }\r\n                     }, get_node(\"a.b = c\"))\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\",\r\n                              {tag = \"Index\", {tag = \"Id\", \"a\"}, {tag = \"String\", \"b\"}},\r\n                              {tag = \"String\", \"c\"}\r\n                           }\r\n                        }, {\r\n                           {tag = \"Id\", \"d\"}\r\n                        }\r\n                     }, get_node(\"a.b.c = d\"))\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Index\",\r\n                              {tag = \"Invoke\",\r\n                                 {tag = \"Call\", {tag = \"Id\", \"f\"}},\r\n                                 {tag = \"String\", \"g\"}\r\n                              },\r\n                              {tag = \"Number\", \"9\"}\r\n                           }\r\n                        }, {\r\n                           {tag = \"Id\", \"d\"}\r\n                        }\r\n                     }, get_node(\"(f():g())[9] = d\"))\r\n         assert.same({line = 1, column = 2, end_column = 2, msg = \"expected '=' near <eof>\"}, get_error(\"a\"))\r\n         assert.same({line = 1, column = 5, end_column = 5, msg = \"expected expression near <eof>\"}, get_error(\"a = \"))\r\n         assert.same({line = 1, column = 5, end_column = 5, msg = \"expected statement near '='\"}, get_error(\"a() = b\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"expected statement near '('\"}, get_error(\"(a) = b\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"expected statement near '1'\"}, get_error(\"1 = b\"))\r\n      end)\r\n\r\n      it(\"parses multi assignment correctly\", function()\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"},\r\n                           {tag = \"Id\", \"b\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"c\"},\r\n                           {tag = \"Id\", \"d\"}\r\n                        }\r\n                     }, get_node(\"a, b = c, d\"))\r\n         assert.same({line = 1, column = 5, end_column = 5, msg = \"expected '=' near <eof>\"}, get_error(\"a, b\"))\r\n         assert.same({line = 1, column = 4, end_column = 4, msg = \"expected identifier or field near '='\"}, get_error(\"a, = b\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected expression near <eof>\"}, get_error(\"a, b = \"))\r\n         assert.same({line = 1, column = 10, end_column = 10, msg = \"expected expression near <eof>\"}, get_error(\"a, b = c,\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected call or indexing near '='\"}, get_error(\"a, b() = c\"))\r\n         assert.same({line = 1, column = 4, end_column = 4, msg = \"expected identifier or field near '('\"}, get_error(\"a, (b) = c\"))\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 384,
    "text": "describe(\"when parsing expression statements\", function()\r\n      it(\"parses calls correctly\", function()\r\n         assert.same({tag = \"Call\",\r\n                        {tag = \"Id\", \"a\"}\r\n                     }, get_node(\"a()\"))\r\n         assert.same({tag = \"Call\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"}\r\n                     }, get_node(\"a'b'\"))\r\n         assert.same({tag = \"Call\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Table\"}\r\n                     }, get_node(\"a{}\"))\r\n         assert.same({tag = \"Call\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"}\r\n                     }, get_node(\"a(b)\"))\r\n         assert.same({tag = \"Call\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_node(\"a(b, c)\"))\r\n         assert.same({tag = \"Call\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"}\r\n                     }, get_node(\"(a)(b)\"))\r\n         assert.same({tag = \"Call\",\r\n                        {tag = \"Call\",\r\n                           {tag = \"Id\", \"a\"},\r\n                           {tag = \"Id\", \"b\"}\r\n                        }\r\n                     }, get_node(\"(a)(b)()\"))\r\n         assert.same({line = 1, column = 2, end_column = 2, msg = \"expected expression near ')'\"}, get_error(\"()()\"))\r\n         assert.same({line = 1, column = 3, end_column = 3, msg = \"expected expression near <eof>\"}, get_error(\"a(\"))\r\n         assert.same({line = 1, column = 4, end_column = 4, msg = \"expected ')' near <eof>\"}, get_error(\"a(b\"))\r\n         assert.same({line = 2, column = 2, end_column = 2, msg = \"expected ')' (to close '(' on line 1) near <eof>\"},\r\n            get_error(\"a(\\nb\"))\r\n         assert.same({line = 2, column = 1, end_column = 2, msg = \"expected ')' (to close '(' on line 1) near 'cc'\"},\r\n            get_error(\"(a\\ncc\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"expected statement near '1'\"}, get_error(\"1()\"))\r\n         assert.same({line = 1, column = 1, end_column = 5, msg = \"expected statement near ''foo''\"}, get_error(\"'foo'()\"))\r\n         assert.same({line = 1, column = 9, end_column = 9, msg = \"expected identifier near '('\"}, get_error(\"function() end ()\"))\r\n      end)\r\n\r\n      it(\"parses method calls correctly\", function()\r\n         assert.same({tag = \"Invoke\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"}\r\n                     }, get_node(\"a:b()\"))\r\n         assert.same({tag = \"Invoke\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"},\r\n                        {tag = \"String\", \"c\"}\r\n                     }, get_node(\"a:b'c'\"))\r\n         assert.same({tag = \"Invoke\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"},\r\n                        {tag = \"Table\"}\r\n                     }, get_node(\"a:b{}\"))\r\n         assert.same({tag = \"Invoke\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_node(\"a:b(c)\"))\r\n         assert.same({tag = \"Invoke\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"},\r\n                        {tag = \"Id\", \"c\"},\r\n                        {tag = \"Id\", \"d\"}\r\n                     }, get_node(\"a:b(c, d)\"))\r\n         assert.same({tag = \"Invoke\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"String\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_node(\"(a):b(c)\"))\r\n         assert.same({tag = \"Invoke\",\r\n                        {tag = \"Invoke\",\r\n                           {tag = \"Id\", \"a\"},\r\n                           {tag = \"String\", \"b\"}\r\n                        }, {tag = \"String\", \"c\"}\r\n                     }, get_node(\"a:b():c()\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"expected statement near '1'\"}, get_error(\"1:b()\"))\r\n         assert.same({line = 1, column = 1, end_column = 2, msg = \"expected statement near ''''\"}, get_error(\"'':a()\"))\r\n         assert.same({line = 1, column = 9, end_column = 9, msg = \"expected identifier near '('\"}, get_error(\"function()end:b()\"))\r\n         assert.same({line = 1, column = 4, end_column = 4, msg = \"expected method arguments near ':'\"}, get_error(\"a:b:c()\"))\r\n         assert.same({line = 1, column = 3, end_column = 3, msg = \"expected identifier near <eof>\"}, get_error(\"a:\"))\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 385,
    "text": "describe(\"when parsing expressions\", function()\r\n      it(\"parses singleton expressions correctly\", function()\r\n         assert.same({tag = \"Nil\"}, get_expr(\"nil\"))\r\n         assert.same({tag = \"True\"}, get_expr(\"true\"))\r\n         assert.same({tag = \"False\"}, get_expr(\"false\"))\r\n         assert.same({tag = \"Number\", \"1\"}, get_expr(\"1\"))\r\n         assert.same({tag = \"String\", \"1\"}, get_expr(\"'1'\"))\r\n         assert.same({tag = \"Table\"}, get_expr(\"{}\"))\r\n         assert.same({tag = \"Function\", {}, {}}, get_expr(\"function() end\"))\r\n         assert.same({tag = \"Dots\", \"...\"}, get_expr(\"...\"))\r\n      end)\r\n\r\n      it(\"parses table constructors correctly\", function()\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_expr(\"{a, b, c}\"))\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Pair\", {tag = \"String\", \"b\"}, {tag = \"Id\", \"c\"}},\r\n                        {tag = \"Id\", \"d\"}\r\n                     }, get_expr(\"{a, b = c, d}\"))\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"String\", \"a\"},\r\n                        {tag = \"Pair\", {tag = \"Id\", \"b\"}, {tag = \"Id\", \"c\"}},\r\n                        {tag = \"Id\", \"d\"}\r\n                     }, get_expr(\"{[[a]], [b] = c, d}\"))\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_expr(\"{a; b, c}\"))\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_expr(\"{a; b, c,}\"))\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Id\", \"b\"},\r\n                        {tag = \"Id\", \"c\"}\r\n                     }, get_expr(\"{a; b, c;}\"))\r\n         assert.same({line = 1, column = 9, end_column = 9, msg = \"expected expression near ';'\"}, get_error(\"return {;}\"))\r\n         assert.same({line = 1, column = 9, end_column = 9, msg = \"expected expression near <eof>\"}, get_error(\"return {\"))\r\n         assert.same({line = 1, column = 11, end_column = 13, msg = \"expected '}' near 'end'\"}, get_error(\"return {a end\"))\r\n         assert.same({line = 2, column = 1, end_column = 3, msg = \"expected '}' (to close '{' on line 1) near 'end'\"},\r\n            get_error(\"return {a\\nend\"))\r\n         assert.same({line = 1, column = 11, end_column = 11, msg = \"expected ']' near <eof>\"}, get_error(\"return {[a\"))\r\n         assert.same({line = 2, column = 2, end_column = 2, msg = \"expected ']' (to close '[' on line 1) near <eof>\"},\r\n            get_error(\"return {[\\na\"))\r\n         assert.same({line = 1, column = 11, end_column = 11, msg = \"expected expression near ','\"}, get_error(\"return {a,,}\"))\r\n         assert.same({line = 1, column = 13, end_column = 13, msg = \"expected expression near <eof>\"}, get_error(\"return {a = \"))\r\n      end)\r\n\r\n      it(\"wraps last element in table constructors in parens when needed\", function()\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Id\", \"a\"},\r\n                        {tag = \"Paren\",\r\n                           {tag = \"Call\",\r\n                              {tag = \"Id\", \"f\"}\r\n                           }\r\n                        }\r\n                     }, get_expr(\"{a, (f())}\"))\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Call\",\r\n                           {tag = \"Id\", \"f\"}\r\n                        },\r\n                        {tag = \"Id\", \"a\"}\r\n                     }, get_expr(\"{(f()), a}\"))\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Pair\",\r\n                           {tag = \"String\", \"a\"},\r\n                           {tag = \"Call\",\r\n                              {tag = \"Id\", \"f\"}\r\n                           }\r\n                        }\r\n                     }, get_expr(\"{a = (f())}\"))\r\n         assert.same({tag = \"Table\",\r\n                        {tag = \"Call\",\r\n                           {tag = \"Id\", \"f\"}\r\n                        },\r\n                        {tag = \"Pair\",\r\n                           {tag = \"String\", \"a\"},\r\n                           {tag = \"Id\", \"b\"}\r\n                        }\r\n                     }, get_expr(\"{(f()), a = b}\"))\r\n      end)\r\n\r\n      it(\"parses simple expressions correctly\", function()\r\n         assert.same({tag = \"Op\", \"unm\",\r\n                        {tag = \"Number\", \"1\"}\r\n                     }, get_expr(\"-1\"))\r\n         assert.same({tag = \"Op\", \"add\",\r\n                        {tag = \"Op\", \"add\",\r\n                           {tag = \"Number\", \"1\"},\r\n                           {tag = \"Number\", \"2\"}\r\n                        },\r\n                        {tag = \"Number\", \"3\"}\r\n                     }, get_expr(\"1+2+3\"))\r\n         assert.same({tag = \"Op\", \"pow\",\r\n                        {tag = \"Number\", \"1\"},\r\n                        {tag = \"Op\", \"pow\",\r\n                           {tag = \"Number\", \"2\"},\r\n                           {tag = \"Number\", \"3\"}\r\n                        }\r\n                     }, get_expr(\"1^2^3\"))\r\n         assert.same({tag = \"Op\", \"concat\",\r\n                        {tag = \"String\", \"1\"},\r\n                        {tag = \"Op\", \"concat\",\r\n                           {tag = \"String\", \"2\"},\r\n                           {tag = \"String\", \"3\"}\r\n                        }\r\n                     }, get_expr(\"'1'..'2'..'3'\"))\r\n      end)\r\n\r\n      it(\"handles operator precedence correctly\", function()\r\n         assert.same({tag = \"Op\", \"add\",\r\n                        {tag = \"Op\", \"unm\",\r\n                           {tag = \"Number\", \"1\"}\r\n                        },\r\n                        {tag = \"Op\", \"mul\",\r\n                           {tag = \"Number\", \"2\"},\r\n                           {tag = \"Op\", \"pow\",\r\n                              {tag = \"Number\", \"3\"},\r\n                              {tag = \"Number\", \"4\"}\r\n                           }\r\n                        }\r\n                     }, get_expr(\"-1+2*3^4\"))\r\n         assert.same({tag = \"Op\", \"bor\",\r\n                        {tag = \"Op\", \"bor\",\r\n                           {tag = \"Op\", \"band\",\r\n                              {tag = \"Op\", \"shr\",\r\n                                 {tag = \"Number\", \"1\"},\r\n                                 {tag = \"Number\", \"2\"}\r\n                              },\r\n                              {tag = \"Op\", \"shl\",\r\n                                 {tag = \"Number\", \"3\"},\r\n                                 {tag = \"Number\", \"4\"}\r\n                              }\r\n                           },\r\n                           {tag = \"Op\", \"bxor\",\r\n                              {tag = \"Number\", \"5\"},\r\n                              {tag = \"Number\", \"6\"}\r\n                           }\r\n                        },\r\n                        {tag = \"Op\", \"bnot\",\r\n                           {tag = \"Number\", \"7\"}\r\n                        }\r\n                     }, get_expr(\"1 >> 2 & 3 << 4 | 5 ~ 6 | ~7\"))\r\n         assert.same({tag = \"Op\", \"or\",\r\n                        {tag = \"Op\", \"and\",\r\n                           {tag = \"Op\", \"eq\",\r\n                              {tag = \"Id\", \"a\"},\r\n                              {tag = \"Id\", \"b\"}\r\n                           },\r\n                           {tag = \"Op\", \"eq\",\r\n                              {tag = \"Id\", \"c\"},\r\n                              {tag = \"Id\", \"d\"}\r\n                           }\r\n                        },\r\n                        {tag = \"Op\", \"ne\",\r\n                           {tag = \"Id\", \"e\"},\r\n                           {tag = \"Id\", \"f\"}\r\n                        }\r\n                     }, get_expr(\"a == b and c == d or e ~= f\"))\r\n      end)\r\n\r\n      it(\"wraps last expression in a list in parens when needed\", function()\r\n         assert.same({tag = \"Return\",\r\n                        {tag = \"Dots\", \"...\"},\r\n                        {tag = \"Paren\", {tag = \"Dots\", \"...\"}}\r\n                     }, get_node(\"return (...), (...)\"))\r\n         assert.same({tag = \"Return\",\r\n                        {tag = \"Dots\", \"...\"},\r\n                        {tag = \"Dots\", \"...\"}\r\n                     }, get_node(\"return (...), ...\"))\r\n         assert.same({tag = \"Return\",\r\n                        {tag = \"True\"},\r\n                        {tag = \"False\"}\r\n                     }, get_node(\"return (true), (false)\"))\r\n         assert.same({tag = \"Return\",\r\n                        {tag = \"Call\",\r\n                           {tag = \"Id\", \"f\"}\r\n                        },\r\n                        {tag = \"Paren\",\r\n                           {tag = \"Call\",\r\n                              {tag = \"Id\", \"g\"}\r\n                           }\r\n                        }\r\n                     }, get_node(\"return (f()), (g())\"))\r\n         assert.same({tag = \"Return\",\r\n                        {tag = \"Invoke\",\r\n                           {tag = \"Id\", \"f\"},\r\n                           {tag = \"String\", \"n\"}\r\n                        },\r\n                        {tag = \"Paren\",\r\n                           {tag = \"Invoke\",\r\n                              {tag = \"Id\", \"g\"},\r\n                              {tag = \"String\", \"m\"}\r\n                           }\r\n                        }\r\n                     }, get_node(\"return (f:n()), (g:m())\"))\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 386,
    "text": "describe(\"when parsing multiple statements\", function()\r\n      it(\"considers semicolons and comments no-op statements\", function()\r\n         assert.same({tag = \"Set\", {\r\n                           {tag = \"Id\", \"a\"}\r\n                        }, {\r\n                           {tag = \"Id\", \"b\"}\r\n                        }\r\n                     }, get_node(\";;;a = b;--[[]];--;\"))\r\n      end)\r\n\r\n      it(\"does not allow statements after return\", function()\r\n         assert.same({line = 1, column = 8, end_column = 12, msg = \"expected expression near 'break'\"}, get_error(\"return break\"))\r\n         assert.same({line = 1, column = 9, end_column = 13, msg = \"expected end of block near 'break'\"}, get_error(\"return; break\"))\r\n         assert.same({line = 1, column = 8, end_column = 8, msg = \"expected end of block near ';'\"}, get_error(\"return;;\"))\r\n         assert.same({line = 1, column = 10, end_column = 14, msg = \"expected end of block near 'break'\"}, get_error(\"return 1 break\"))\r\n         assert.same({line = 1, column = 11, end_column = 15, msg = \"expected end of block near 'break'\"}, get_error(\"return 1; break\"))\r\n         assert.same({line = 1, column = 13, end_column = 17, msg = \"expected end of block near 'break'\"}, get_error(\"return 1, 2 break\"))\r\n         assert.same({line = 1, column = 14, end_column = 18, msg = \"expected end of block near 'break'\"}, get_error(\"return 1, 2; break\"))\r\n      end)\r\n\r\n      it(\"parses nested statements correctly\", function()\r\n         assert.same({\r\n                        {tag = \"Localrec\",\r\n                           {tag = \"Id\", \"f\"},\r\n                           {tag = \"Function\", {}, {\r\n                              {tag = \"While\",\r\n                                 {tag = \"True\"},\r\n                                 {\r\n                                    {tag = \"If\",\r\n                                       {tag = \"Nil\"},\r\n                                       {\r\n                                          {tag = \"Call\",\r\n                                             {tag = \"Id\", \"f\"}\r\n                                          },\r\n                                          {tag = \"Return\"}\r\n                                       },\r\n                                       {tag = \"False\"},\r\n                                       {\r\n                                          {tag = \"Call\",\r\n                                             {tag = \"Id\", \"g\"}\r\n                                          },\r\n                                          {tag = \"Break\"}\r\n                                       },\r\n                                       {\r\n                                          {tag = \"Call\",\r\n                                             {tag = \"Id\", \"h\"}\r\n                                          },\r\n                                          {tag = \"Repeat\",\r\n                                             {\r\n                                                {tag = \"Goto\", \"fail\"}\r\n                                             },\r\n                                             {tag = \"Id\", \"get_forked\"}\r\n                                          }\r\n                                       }\r\n                                    }\r\n                                 }\r\n                              },\r\n                              {tag = \"Label\", \"fail\"}\r\n                           }}\r\n                        },\r\n                        {tag = \"Do\",\r\n                           {tag = \"Fornum\",\r\n                              {tag = \"Id\", \"i\"},\r\n                              {tag = \"Number\", \"1\"},\r\n                              {tag = \"Number\", \"2\"},\r\n                              {\r\n                                 {tag = \"Call\",\r\n                                    {tag = \"Id\", \"nothing\"}\r\n                                 }\r\n                              }\r\n                           },\r\n                           {tag = \"Forin\",\r\n                              {\r\n                                 {tag = \"Id\", \"k\"},\r\n                                 {tag = \"Id\", \"v\"}\r\n                              },\r\n                              {\r\n                                 {tag = \"Call\",\r\n                                    {tag = \"Id\", \"pairs\"}\r\n                                 }\r\n                              },\r\n                              {\r\n                                 {tag = \"Call\",\r\n                                    {tag = \"Id\", \"print\"},\r\n                                    {tag = \"String\", \"bar\"}\r\n                                 },\r\n                                 {tag = \"Call\",\r\n                                    {tag = \"Id\", \"assert\"},\r\n                                    {tag = \"Number\", \"42\"}\r\n                                 }\r\n                              }\r\n                           },\r\n                           {tag = \"Return\"}\r\n                        },\r\n                     }, get_ast([[\r\nlocal function f()\r\n   while true do\r\n      if nil then\r\n         f()\r\n         return\r\n      elseif false then\r\n         g()\r\n         break\r\n      else\r\n         h()\r\n\r\n         repeat\r\n            goto fail\r\n         until get_forked\r\n      end\r\n   end\r\n\r\n   ::fail::\r\nend\r\n\r\ndo\r\n   for i=1, 2 do\r\n      nothing()\r\n   end\r\n\r\n   for k, v in pairs() do\r\n      print(\"bar\")\r\n      assert(42)\r\n   end\r\n\r\n   return\r\nend\r\n]]))\r\n\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 387,
    "text": "it(\"provides correct location info\", function()\r\n      assert.same({\r\n                     {tag = \"Localrec\", location = {line = 1, column = 1, offset = 1}, first_token = \"local\",\r\n                        {tag = \"Id\", \"foo\", location = {line = 1, column = 16, offset = 16}},\r\n                        {tag = \"Function\", location = {line = 1, column = 7, offset = 7},\r\n                           end_location = {line = 4, column = 1, offset = 78},\r\n                           {\r\n                              {tag = \"Id\", \"a\", location = {line = 1, column = 20, offset = 20}},\r\n                              {tag = \"Id\", \"b\", location = {line = 1, column = 23, offset = 23}},\r\n                              {tag = \"Id\", \"c\", location = {line = 1, column = 26, offset = 26}},\r\n                              {tag = \"Dots\", \"...\", location = {line = 1, column = 29, offset = 29}}\r\n                           },\r\n                           {\r\n                              {tag = \"Local\", location = {line = 2, column = 4, offset = 37}, first_token = \"local\",\r\n                                 equals_location = {line = 2, column = 12, offset = 45},\r\n                                 {\r\n                                    {tag = \"Id\", \"d\", location = {line = 2, column = 10, offset = 43}}\r\n                                 },\r\n                                 {\r\n                                    {tag = \"Op\", \"mul\", location = {line = 2, column = 15, offset = 48},\r\n                                       {tag = \"Op\", \"add\", location = {line = 2, column = 15, offset = 48},\r\n                                          {tag = \"Id\", \"a\", location = {line = 2, column = 15, offset = 48}},\r\n                                          {tag = \"Id\", \"b\", location = {line = 2, column = 19, offset = 52}}\r\n                                       },\r\n                                       {tag = \"Id\", \"c\", location = {line = 2, column = 24, offset = 57}}\r\n                                    }\r\n                                 }\r\n                              },\r\n                              {tag = \"Return\", location = {line = 3, column = 4, offset = 62}, first_token = \"return\",\r\n                                 {tag = \"Id\", \"d\", location = {line = 3, column = 11, offset = 69}},\r\n                                 {tag = \"Paren\", location = {line = 3, column = 15, offset = 73},\r\n                                    {tag = \"Dots\", \"...\", location = {line = 3, column = 15, offset = 73}}\r\n                                 }\r\n                              }\r\n                           }\r\n                        }\r\n                     },\r\n                     {tag = \"Set\", location = {line = 6, column = 1, offset = 83}, first_token = \"function\",\r\n                        {\r\n                           {tag = \"Index\", location = {line = 6, column = 10, offset = 92},\r\n                              {tag = \"Id\", \"t\", location = {line = 6, column = 10, offset = 92}},\r\n                              {tag = \"String\", \"bar\", location = {line = 6, column = 12, offset = 94}}\r\n                           }\r\n                        },\r\n                        {\r\n                           {tag = \"Function\", location = {line = 6, column = 1, offset = 83},\r\n                              end_location = {line = 10, column = 1, offset = 142},\r\n                              {\r\n                                 {tag = \"Id\", \"self\", implicit = true, location = {line = 6, column = 11, offset = 93}},\r\n                                 {tag = \"Id\", \"arg\", location = {line = 6, column = 16, offset = 98}}\r\n                              },\r\n                              {\r\n                                 {tag = \"If\", location = {line = 7, column = 4, offset = 106}, first_token = \"if\",\r\n                                    {tag = \"Id\", \"arg\", location = {line = 7, column = 7, offset = 109}, first_token = \"arg\"},\r\n                                    {location = {line = 7, column = 11, offset = 113}, -- Branch location.\r\n                                       {tag = \"Call\", location = {line = 8, column = 7, offset = 124}, first_token = \"print\",\r\n                                          {tag = \"Id\", \"print\", location = {line = 8, column = 7, offset = 124}},\r\n                                          {tag = \"Id\", \"arg\", location = {line = 8, column = 13, offset = 130}}\r\n                                       }\r\n                                    }\r\n                                 }\r\n                              }\r\n                           }\r\n                        }\r\n                     }\r\n                  }, (parser([[\r\nlocal function foo(a, b, c, ...)\r\n   local d = (a + b) * c\r\n   return d, (...)\r\nend\r\n\r\nfunction t:bar(arg)\r\n   if arg then\r\n      print(arg)\r\n   end\r\nend\r\n]])))\r\n\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 388,
    "text": "it(\"provides correct location info for labels\", function()\r\n      assert.same({\r\n                     {tag = \"Label\", \"foo\", location = {line = 1, column = 1, offset = 1}, end_column = 7, first_token = \"::\"},\r\n                     {tag = \"Label\", \"bar\", location = {line = 2, column = 1, offset = 9}, end_column = 6, first_token = \"::\"},\r\n                     {tag = \"Label\", \"baz\", location = {line = 3, column = 3, offset = 18}, end_column = 4, first_token = \"::\"}\r\n                  }, (parser([[\r\n::foo::\r\n:: bar\r\n::::\r\nbaz::\r\n]])))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 389,
    "text": "it(\"provides correct location info for statements starting with expressions\", function()\r\n      assert.same({\r\n                     {tag = \"Call\", location = {line = 1, column = 1, offset = 1}, first_token = \"a\",\r\n                        {tag = \"Id\", \"a\", location = {line = 1, column = 1, offset = 1}}\r\n                     },\r\n                     {tag = \"Call\", location = {line = 2, column = 1, offset = 6}, first_token = \"(\",\r\n                        {tag = \"Id\", \"b\", location = {line = 2, column = 2, offset = 7}}\r\n                     },\r\n                     {tag = \"Set\", location = {line = 3, column = 1, offset = 13}, first_token = \"(\",\r\n                        equals_location = {line = 3, column = 12, offset = 24},\r\n                        {\r\n                           {tag = \"Index\", location = {line = 3, column = 3, offset = 15},\r\n                              {tag = \"Index\", location = {line = 3, column = 3, offset = 15},\r\n                                 {tag = \"Id\", \"c\", location = {line = 3, column = 3, offset = 15}},\r\n                                 {tag = \"String\", \"d\", location = {line = 3, column = 6, offset = 18}}\r\n                              },\r\n                              {tag = \"Number\", \"3\", location = {line = 3, column = 9, offset = 21}}\r\n                           }\r\n                        },\r\n                        {\r\n                           {tag = \"Number\", \"2\", location = {line = 3, column = 14, offset = 26}}\r\n                        }\r\n                     }\r\n                  }, (parser([[\r\na();\r\n(b)();\r\n((c).d)[3] = 2\r\n]])))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 390,
    "text": "it(\"provides correct location info for conditions\", function()\r\n      assert.same({\r\n                     {tag = \"If\", location = {line = 1, column = 1, offset = 1}, first_token = \"if\",\r\n                        {tag = \"Id\", \"x\", location = {line = 1, column = 5, offset = 5}, first_token = \"x\"},\r\n                        {location = {line = 1, column = 8, offset = 8}}\r\n                     }\r\n                  }, (parser([[\r\nif (x) then end\r\n]])))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 391,
    "text": "it(\"provides correct location info for table keys\", function()\r\n      assert.same({\r\n                     {tag = \"Return\", location = {line = 1, column = 1, offset = 1}, first_token = \"return\",\r\n                        {tag = \"Table\", location = {line = 1, column = 8, offset = 8},\r\n                           {tag = \"Pair\", location = {line = 1, column = 9, offset = 9}, first_token = \"a\",\r\n                              {tag = \"String\", \"a\", location = {line = 1, column = 9, offset = 9}},\r\n                              {tag = \"Id\", \"b\", location = {line = 1, column = 13, offset = 13}}\r\n                           },\r\n                           {tag = \"Pair\", location = {line = 1, column = 16, offset = 16}, first_token = \"[\",\r\n                              {tag = \"Id\", \"x\", location = {line = 1, column = 17, offset = 17}},\r\n                              {tag = \"Id\", \"y\", location = {line = 1, column = 22, offset = 22}},\r\n                           },\r\n                           {tag = \"Id\", \"z\", location = {line = 1, column = 26, offset = 26}, first_token = \"z\"}\r\n                        }\r\n                     }\r\n                  }, (parser([[\r\nreturn {a = b, [x] = y, (z)}\r\n]])))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 392,
    "text": "it(\"provides correct error location info\", function()\r\n      assert.same({line = 8, column = 15, end_column = 15, msg = \"expected '=' near ')'\"}, get_error([[\r\nlocal function foo(a, b, c, ...)\r\n   local d = (a + b) * c\r\n   return d, (...)\r\nend\r\n\r\nfunction t:bar(arg)\r\n   if arg then\r\n      printarg)\r\n   end\r\nend\r\n]]))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 393,
    "text": "describe(\"providing misc information\", function()\r\n      it(\"provides comments correctly\", function()\r\n         assert.same({\r\n            {contents = \" ignore something\", location = {line = 1, column = 1, offset = 1}, end_column = 19},\r\n            {contents = \" comments\", location = {line = 2, column = 13, offset = 33}, end_column = 23},\r\n            {contents = \"long comment\", location = {line = 3, column = 13, offset = 57}, end_column = 17}\r\n         }, get_comments([[\r\n-- ignore something\r\nfoo = bar() -- comments\r\nreturn true --[=[\r\nlong comment]=]\r\n         ]]))\r\n      end)\r\n\r\n      it(\"provides lines with code correctly\", function()\r\n         -- EOS is considered \"code\" (which does not matter w.r.t inline options).\r\n         assert.same({nil, true, true, true, true, true, nil, nil, true, true, true}, get_code_lines([[\r\n-- nothing here\r\nlocal foo = 2\r\n+\r\n3\r\n+\r\n{\r\n   --[=[empty]=]\r\n\r\n}\r\n::bar::\r\n]]))\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 394,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 395,
    "text": "",
    "type": "function container"
  }, {
    "id": 396,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 397,
    "text": "parser",
    "type": "global function"
  }, {
    "id": 398,
    "text": "type",
    "type": "global function"
  }, {
    "id": 399,
    "text": "same",
    "type": "global function"
  }, {
    "id": 400,
    "text": "select",
    "type": "global function"
  }, {
    "id": 401,
    "text": "is_table",
    "type": "global function"
  }, {
    "id": 402,
    "text": "require",
    "type": "global function"
  }, {
    "id": 403,
    "text": "is_false",
    "type": "global function"
  }, {
    "id": 404,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 405,
    "text": "it",
    "type": "global function"
  }, {
    "id": 406,
    "text": "",
    "type": "variable container"
  }, {
    "id": 407,
    "text": "",
    "type": "require container"
  }, {
    "id": 408,
    "text": "",
    "type": "require local variable"
  } ]
}