{
  "_filename": "gzip.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lzlib/gzip.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 2,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 2,
    "label": "has",
    "to": 14
  }, {
    "from": 2,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 14
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 22,
    "label": "has",
    "to": 14
  }, {
    "from": 22,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 14
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 14
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 15
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 14
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 14
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 14
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 14
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 24
  }, {
    "from": 42,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 42,
    "label": "has",
    "to": 14
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 2,
    "label": "calls",
    "to": 51
  }, {
    "from": 2,
    "label": "calls",
    "to": 51
  }, {
    "from": 2,
    "label": "calls",
    "to": 51
  }, {
    "from": 2,
    "label": "calls",
    "to": 51
  }, {
    "from": 22,
    "label": "calls",
    "to": 2
  }, {
    "from": 2,
    "label": "calls",
    "to": 48
  }, {
    "from": 2,
    "label": "calls",
    "to": 48
  }, {
    "from": 2,
    "label": "calls",
    "to": 49
  }, {
    "from": 2,
    "label": "calls",
    "to": 52
  }, {
    "from": 2,
    "label": "calls",
    "to": 52
  }, {
    "from": 2,
    "label": "calls",
    "to": 53
  }, {
    "from": 44,
    "label": "calls",
    "to": 54
  }, {
    "from": 44,
    "label": "calls",
    "to": 54
  }, {
    "from": 2,
    "label": "calls",
    "to": 50
  }, {
    "from": 2,
    "label": "calls",
    "to": 55
  }, {
    "from": 2,
    "label": "calls",
    "to": 55
  }, {
    "from": 1,
    "label": "contains",
    "to": 44
  }, {
    "from": 44,
    "label": "declares",
    "to": 2
  }, {
    "from": 44,
    "label": "declares",
    "to": 22
  }, {
    "from": 44,
    "label": "declares",
    "to": 28
  }, {
    "from": 44,
    "label": "declares",
    "to": 30
  }, {
    "from": 44,
    "label": "declares",
    "to": 32
  }, {
    "from": 44,
    "label": "declares",
    "to": 34
  }, {
    "from": 44,
    "label": "declares",
    "to": 36
  }, {
    "from": 44,
    "label": "declares",
    "to": 38
  }, {
    "from": 44,
    "label": "declares",
    "to": 40
  }, {
    "from": 44,
    "label": "declares",
    "to": 42
  }, {
    "from": 45,
    "label": "calls",
    "to": 34
  }, {
    "from": 1,
    "label": "contains",
    "to": 56
  }, {
    "from": 1,
    "label": "contains",
    "to": 57
  }, {
    "from": 56,
    "label": "initializes",
    "to": 58
  }, {
    "from": 58,
    "label": "assigns",
    "to": 59
  }, {
    "from": 56,
    "label": "initializes",
    "to": 60
  }, {
    "from": 60,
    "label": "assigns",
    "to": 61
  }, {
    "from": 56,
    "label": "initializes",
    "to": 62
  }, {
    "from": 62,
    "label": "assigns",
    "to": 63
  }, {
    "from": 56,
    "label": "initializes",
    "to": 64
  }, {
    "from": 64,
    "label": "assigns",
    "to": 65
  }, {
    "from": 56,
    "label": "initializes",
    "to": 66
  }, {
    "from": 66,
    "label": "assigns",
    "to": 67
  }, {
    "from": 57,
    "label": "initializes",
    "to": 68
  }, {
    "from": 68,
    "label": "requires",
    "to": 47
  }, {
    "from": 57,
    "label": "initializes",
    "to": 69
  }, {
    "from": 69,
    "label": "requires",
    "to": 46
  }, {
    "from": 1,
    "label": "provides",
    "to": 70
  }, {
    "from": 66,
    "label": "represents",
    "to": 71
  }, {
    "from": 70,
    "label": "provides",
    "to": 71
  }, {
    "from": 72,
    "label": "requires",
    "to": 1
  }, {
    "from": 73,
    "label": "requires",
    "to": 1
  }, {
    "from": 66,
    "label": "contains",
    "to": 2
  }, {
    "from": 66,
    "label": "contains",
    "to": 22
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "gzip",
    "type": "module"
  }, {
    "id": 2,
    "text": "function _M.open(filename, mode)\r\n\tmode = mode or 'r'\r\n\tlocal r = mode:find('r', 1, true) and true\r\n\tlocal w = mode:find('w', 1, true) and true\r\n\tlocal level = -1\r\n\r\n\tlocal lstart, lend = mode:find('%d')\r\n\tif (lstart and lend) then\r\n\t\tlevel = mode:sub(lstart, lend)\r\n\tend\r\n\r\n\tif (not (r or w)) then\r\n\t\terror('file open mode must specify read or write operation')\r\n\tend\r\n\r\n\tlocal f, z\r\n\r\n\tlocal mt = {\r\n\t\t__index = {\r\n\t\t\tread = function(self, ...)\r\n\t\t\t\treturn z:read(...)\r\n\t\t\tend,\r\n\t\t\twrite = function(self, ...)\r\n\t\t\t\treturn z:write(...)\r\n\t\t\tend,\r\n\t\t\tseek = function(self, ...)\r\n\t\t\t\terror 'seek not supported on gzip files'\r\n\t\t\tend,\r\n\t\t\tlines = function(self, ...)\r\n\t\t\t\treturn z:lines(...)\r\n\t\t\tend,\r\n\t\t\tflush = function(self, ...)\r\n\t\t\t\treturn z:flush(...) and f:flush()\r\n\t\t\tend,\r\n\t\t\tclose = function(self, ...)\r\n\t\t\t\treturn z:close() and f:close()\r\n\t\t\tend,\r\n\t\t},\r\n\t\t__tostring = function(self)\r\n\t\t\treturn 'gzip object (' .. mode .. ') [' .. tostring(z) .. '] [' .. tostring(f) .. ']'\r\n\t\tend,\r\n\t}\r\n\r\n\tif r then\r\n\t\tf = assert(io.open(filename, 'rb'))\r\n\t\tz = assert(zlib.inflate(f))\r\n\telse\r\n\t\tf = assert(io.open(filename, 'wb'))\r\n\t\tz = assert(zlib.deflate(f, level, nil, 15 + 16))\r\n\tend\r\n\r\n\treturn setmetatable({}, mt)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "mode = mode or 'r'",
    "type": "statement:assign"
  }, {
    "id": 4,
    "text": "local r = mode:find('r', 1, true) and true",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local w = mode:find('w', 1, true) and true",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "local level = -1",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "local lstart, lend = mode:find('%d')",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "if (lstart and lend) then\r\n\t\tlevel = mode:sub(lstart, lend)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "level = mode:sub(lstart, lend)",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "if (not (r or w)) then\r\n\t\terror('file open mode must specify read or write operation')\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "error('file open mode must specify read or write operation')",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "local f, z",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "local mt = {\r\n\t\t__index = {\r\n\t\t\tread = function(self, ...)\r\n\t\t\t\treturn z:read(...)\r\n\t\t\tend,\r\n\t\t\twrite = function(self, ...)\r\n\t\t\t\treturn z:write(...)\r\n\t\t\tend,\r\n\t\t\tseek = function(self, ...)\r\n\t\t\t\terror 'seek not supported on gzip files'\r\n\t\t\tend,\r\n\t\t\tlines = function(self, ...)\r\n\t\t\t\treturn z:lines(...)\r\n\t\t\tend,\r\n\t\t\tflush = function(self, ...)\r\n\t\t\t\treturn z:flush(...) and f:flush()\r\n\t\t\tend,\r\n\t\t\tclose = function(self, ...)\r\n\t\t\t\treturn z:close() and f:close()\r\n\t\t\tend,\r\n\t\t},\r\n\t\t__tostring = function(self)\r\n\t\t\treturn 'gzip object (' .. mode .. ') [' .. tostring(z) .. '] [' .. tostring(f) .. ']'\r\n\t\tend,\r\n\t}",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 15,
    "text": "error 'seek not supported on gzip files'",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "if r then\r\n\t\tf = assert(io.open(filename, 'rb'))\r\n\t\tz = assert(zlib.inflate(f))\r\n\telse\r\n\t\tf = assert(io.open(filename, 'wb'))\r\n\t\tz = assert(zlib.deflate(f, level, nil, 15 + 16))\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "f = assert(io.open(filename, 'rb'))",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "z = assert(zlib.inflate(f))",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "f = assert(io.open(filename, 'wb'))",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "z = assert(zlib.deflate(f, level, nil, 15 + 16))",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function _M.lines(filename)\r\n\tlocal gz = _M.open(filename, 'r')\r\n\treturn function()\r\n\t\tlocal line = gz and gz:read()\r\n\t\tif line == nil then\r\n\t\t\tgz:close()\r\n\t\tend\r\n\t\treturn line\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "local gz = _M.open(filename, 'r')",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "local line = gz and gz:read()",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "if line == nil then\r\n\t\t\tgz:close()\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "gz:close()",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function(self, ...)\r\n\t\t\t\treturn z:read(...)\r\n\t\t\tend",
    "type": "function"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function(self, ...)\r\n\t\t\t\treturn z:write(...)\r\n\t\t\tend",
    "type": "function"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function(self, ...)\r\n\t\t\t\terror 'seek not supported on gzip files'\r\n\t\t\tend",
    "type": "function"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function(self, ...)\r\n\t\t\t\treturn z:lines(...)\r\n\t\t\tend",
    "type": "function"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function(self, ...)\r\n\t\t\t\treturn z:flush(...) and f:flush()\r\n\t\t\tend",
    "type": "function"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function(self, ...)\r\n\t\t\t\treturn z:close() and f:close()\r\n\t\t\tend",
    "type": "function"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function(self)\r\n\t\t\treturn 'gzip object (' .. mode .. ') [' .. tostring(z) .. '] [' .. tostring(f) .. ']'\r\n\t\tend",
    "type": "function"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function()\r\n\t\tlocal line = gz and gz:read()\r\n\t\tif line == nil then\r\n\t\t\tgz:close()\r\n\t\tend\r\n\t\treturn line\r\n\tend",
    "type": "function"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "",
    "type": "function container"
  }, {
    "id": 45,
    "text": "",
    "type": "function container"
  }, {
    "id": 46,
    "text": "zlib",
    "type": "module"
  }, {
    "id": 47,
    "text": "io",
    "type": "module"
  }, {
    "id": 48,
    "text": "open",
    "type": "global function"
  }, {
    "id": 49,
    "text": "inflate",
    "type": "global function"
  }, {
    "id": 50,
    "text": "deflate",
    "type": "global function"
  }, {
    "id": 51,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 52,
    "text": "error",
    "type": "global function"
  }, {
    "id": 53,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 54,
    "text": "require",
    "type": "global function"
  }, {
    "id": 55,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 56,
    "text": "",
    "type": "variable container"
  }, {
    "id": 57,
    "text": "",
    "type": "require container"
  }, {
    "id": 58,
    "text": "",
    "type": "local variable"
  }, {
    "id": 59,
    "text": "",
    "type": "n/a"
  }, {
    "id": 60,
    "text": "",
    "type": "local variable"
  }, {
    "id": 61,
    "text": "",
    "type": "n/a"
  }, {
    "id": 62,
    "text": "",
    "type": "local variable"
  }, {
    "id": 63,
    "text": "",
    "type": "n/a"
  }, {
    "id": 64,
    "text": "",
    "type": "local variable"
  }, {
    "id": 65,
    "text": "",
    "type": "n/a"
  }, {
    "id": 66,
    "text": "",
    "type": "local variable"
  }, {
    "id": 67,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 68,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 69,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 70,
    "text": "",
    "type": "interface container"
  }, {
    "id": 71,
    "text": "",
    "type": "interface"
  }, {
    "id": 72,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 73,
    "text": "",
    "type": "require local variable"
  } ]
}