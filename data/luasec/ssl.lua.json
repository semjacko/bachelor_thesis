{
  "_filename": "ssl.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luasec/src/ssl.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "calls",
    "to": 11
  }, {
    "from": 2,
    "label": "calls",
    "to": 11
  }, {
    "from": 2,
    "label": "calls",
    "to": 11
  }, {
    "from": 3,
    "label": "calls",
    "to": 28
  }, {
    "from": 4,
    "label": "calls",
    "to": 11
  }, {
    "from": 4,
    "label": "calls",
    "to": 28
  }, {
    "from": 3,
    "label": "calls",
    "to": 28
  }, {
    "from": 4,
    "label": "calls",
    "to": 11
  }, {
    "from": 4,
    "label": "calls",
    "to": 28
  }, {
    "from": 3,
    "label": "calls",
    "to": 28
  }, {
    "from": 4,
    "label": "calls",
    "to": 11
  }, {
    "from": 4,
    "label": "calls",
    "to": 28
  }, {
    "from": 3,
    "label": "calls",
    "to": 28
  }, {
    "from": 4,
    "label": "calls",
    "to": 11
  }, {
    "from": 4,
    "label": "calls",
    "to": 28
  }, {
    "from": 3,
    "label": "calls",
    "to": 28
  }, {
    "from": 4,
    "label": "calls",
    "to": 11
  }, {
    "from": 4,
    "label": "calls",
    "to": 28
  }, {
    "from": 3,
    "label": "calls",
    "to": 28
  }, {
    "from": 4,
    "label": "calls",
    "to": 11
  }, {
    "from": 4,
    "label": "calls",
    "to": 28
  }, {
    "from": 5,
    "label": "calls",
    "to": 28
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 11,
    "label": "has",
    "to": 9
  }, {
    "from": 11,
    "label": "has",
    "to": 15
  }, {
    "from": 11,
    "label": "has",
    "to": 16
  }, {
    "from": 11,
    "label": "has",
    "to": 9
  }, {
    "from": 11,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 16
  }, {
    "from": 11,
    "label": "has",
    "to": 9
  }, {
    "from": 11,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 16
  }, {
    "from": 11,
    "label": "has",
    "to": 9
  }, {
    "from": 11,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 16
  }, {
    "from": 11,
    "label": "has",
    "to": 9
  }, {
    "from": 11,
    "label": "has",
    "to": 23
  }, {
    "from": 11,
    "label": "has",
    "to": 16
  }, {
    "from": 11,
    "label": "has",
    "to": 9
  }, {
    "from": 11,
    "label": "has",
    "to": 24
  }, {
    "from": 11,
    "label": "has",
    "to": 16
  }, {
    "from": 11,
    "label": "has",
    "to": 9
  }, {
    "from": 11,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 16
  }, {
    "from": 11,
    "label": "has",
    "to": 9
  }, {
    "from": 11,
    "label": "has",
    "to": 9
  }, {
    "from": 11,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 14
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 28,
    "label": "has",
    "to": 9
  }, {
    "from": 28,
    "label": "has",
    "to": 33
  }, {
    "from": 28,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 28,
    "label": "has",
    "to": 9
  }, {
    "from": 28,
    "label": "has",
    "to": 9
  }, {
    "from": 28,
    "label": "has",
    "to": 37
  }, {
    "from": 6,
    "label": "calls",
    "to": 51
  }, {
    "from": 28,
    "label": "calls",
    "to": 51
  }, {
    "from": 28,
    "label": "calls",
    "to": 39
  }, {
    "from": 28,
    "label": "calls",
    "to": 11
  }, {
    "from": 11,
    "label": "calls",
    "to": 47
  }, {
    "from": 11,
    "label": "calls",
    "to": 6
  }, {
    "from": 11,
    "label": "calls",
    "to": 6
  }, {
    "from": 11,
    "label": "calls",
    "to": 46
  }, {
    "from": 11,
    "label": "calls",
    "to": 40
  }, {
    "from": 28,
    "label": "calls",
    "to": 48
  }, {
    "from": 11,
    "label": "calls",
    "to": 43
  }, {
    "from": 38,
    "label": "calls",
    "to": 49
  }, {
    "from": 6,
    "label": "calls",
    "to": 45
  }, {
    "from": 6,
    "label": "calls",
    "to": 42
  }, {
    "from": 6,
    "label": "calls",
    "to": 42
  }, {
    "from": 38,
    "label": "calls",
    "to": 50
  }, {
    "from": 38,
    "label": "calls",
    "to": 50
  }, {
    "from": 11,
    "label": "calls",
    "to": 44
  }, {
    "from": 11,
    "label": "calls",
    "to": 41
  }, {
    "from": 1,
    "label": "contains",
    "to": 38
  }, {
    "from": 38,
    "label": "declares",
    "to": 6
  }, {
    "from": 38,
    "label": "declares",
    "to": 11
  }, {
    "from": 38,
    "label": "declares",
    "to": 28
  }, {
    "from": 1,
    "label": "contains",
    "to": 53
  }, {
    "from": 1,
    "label": "contains",
    "to": 54
  }, {
    "from": 53,
    "label": "initializes",
    "to": 55
  }, {
    "from": 53,
    "label": "initializes",
    "to": 56
  }, {
    "from": 53,
    "label": "initializes",
    "to": 57
  }, {
    "from": 57,
    "label": "assigns",
    "to": 58
  }, {
    "from": 53,
    "label": "initializes",
    "to": 59
  }, {
    "from": 59,
    "label": "assigns",
    "to": 60
  }, {
    "from": 54,
    "label": "initializes",
    "to": 52
  }, {
    "from": 52,
    "label": "requires",
    "to": 61
  }, {
    "from": 54,
    "label": "initializes",
    "to": 52
  }, {
    "from": 52,
    "label": "requires",
    "to": 62
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "ssl",
    "type": "module"
  }, {
    "id": 2,
    "text": "",
    "type": "function container"
  }, {
    "id": 3,
    "text": "",
    "type": "function container"
  }, {
    "id": 4,
    "text": "",
    "type": "function container"
  }, {
    "id": 5,
    "text": "local function tcp(params)\r\n   params = params or {}\r\n   -- Default settings\r\n   for k, v in pairs(cfg) do \r\n      params[k] = params[k] or v\r\n   end\r\n   -- Force client mode\r\n   params.mode = \"client\"\r\n   -- 'create' function for LuaSocket\r\n   return function ()\r\n      local conn = {}\r\n      conn.sock = try(socket.tcp())\r\n      local st = getmetatable(conn.sock).__index.settimeout\r\n      function conn:settimeout(...)\r\n         return st(self.sock, ...)\r\n      end\r\n      -- Replace TCP's connection function\r\n      function conn:connect(host, port)\r\n         try(self.sock:connect(host, port))\r\n         self.sock = try(ssl.wrap(self.sock, params))\r\n         try(self.sock:dohandshake())\r\n         reg(self, getmetatable(self.sock))\r\n         return 1\r\n      end\r\n      return conn\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local function optexec(func, param, ctx)\r\n  if param then\r\n    if type(param) == \"table\" then\r\n      return func(ctx, unpack(param))\r\n    else\r\n      return func(ctx, param)\r\n    end\r\n  end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "if param then\r\n    if type(param) == \"table\" then\r\n      return func(ctx, unpack(param))\r\n    else\r\n      return func(ctx, param)\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "if type(param) == \"table\" then\r\n      return func(ctx, unpack(param))\r\n    else\r\n      return func(ctx, param)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function newcontext(cfg)\r\n   local succ, msg, ctx\r\n   -- Create the context\r\n   ctx, msg = context.create(cfg.protocol)\r\n   if not ctx then return nil, msg end\r\n   -- Mode\r\n   succ, msg = context.setmode(ctx, cfg.mode)\r\n   if not succ then return nil, msg end\r\n   -- Load the key\r\n   if cfg.key then\r\n      succ, msg = context.loadkey(ctx, cfg.key, cfg.password)\r\n      if not succ then return nil, msg end\r\n   end\r\n   -- Load the certificate\r\n   if cfg.certificate then\r\n      succ, msg = context.loadcert(ctx, cfg.certificate)\r\n      if not succ then return nil, msg end\r\n   end\r\n   -- Load the CA certificates\r\n   if cfg.cafile or cfg.capath then\r\n      succ, msg = context.locations(ctx, cfg.cafile, cfg.capath)\r\n      if not succ then return nil, msg end\r\n   end\r\n   -- Set the verification options\r\n   succ, msg = optexec(context.setverify, cfg.verify, ctx)\r\n   if not succ then return nil, msg end\r\n   -- Set SSL options\r\n   succ, msg = optexec(context.setoptions, cfg.options, ctx)\r\n   if not succ then return nil, msg end\r\n   -- Set the depth for certificate verification\r\n   if cfg.depth then\r\n      succ, msg = context.setdepth(ctx, cfg.depth)\r\n      if not succ then return nil, msg end\r\n   end\r\n   return ctx\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "local succ, msg, ctx",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "ctx, msg = context.create(cfg.protocol)",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "if not ctx then return nil, msg end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "succ, msg = context.setmode(ctx, cfg.mode)",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "if not succ then return nil, msg end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "if cfg.key then\r\n      succ, msg = context.loadkey(ctx, cfg.key, cfg.password)\r\n      if not succ then return nil, msg end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "succ, msg = context.loadkey(ctx, cfg.key, cfg.password)",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "if cfg.certificate then\r\n      succ, msg = context.loadcert(ctx, cfg.certificate)\r\n      if not succ then return nil, msg end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "succ, msg = context.loadcert(ctx, cfg.certificate)",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "if cfg.cafile or cfg.capath then\r\n      succ, msg = context.locations(ctx, cfg.cafile, cfg.capath)\r\n      if not succ then return nil, msg end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "succ, msg = context.locations(ctx, cfg.cafile, cfg.capath)",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "succ, msg = optexec(context.setverify, cfg.verify, ctx)",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "succ, msg = optexec(context.setoptions, cfg.options, ctx)",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "if cfg.depth then\r\n      succ, msg = context.setdepth(ctx, cfg.depth)\r\n      if not succ then return nil, msg end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "succ, msg = context.setdepth(ctx, cfg.depth)",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function wrap(sock, cfg)\r\n   local ctx, msg\r\n   if type(cfg) == \"table\" then\r\n      ctx, msg = newcontext(cfg)\r\n      if not ctx then return nil, msg end\r\n   else\r\n      ctx = cfg\r\n   end\r\n   local s, msg = core.create(ctx)\r\n   if s then\r\n      core.setfd(s, sock:getfd())\r\n      sock:setfd(core.invalidfd)\r\n      return s\r\n   end\r\n   return nil, msg \r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "local ctx, msg",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "if type(cfg) == \"table\" then\r\n      ctx, msg = newcontext(cfg)\r\n      if not ctx then return nil, msg end\r\n   else\r\n      ctx = cfg\r\n   end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "ctx, msg = newcontext(cfg)",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "ctx = cfg",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "local s, msg = core.create(ctx)",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "if s then\r\n      core.setfd(s, sock:getfd())\r\n      sock:setfd(core.invalidfd)\r\n      return s\r\n   end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "core.setfd(s, sock:getfd())",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "sock:setfd(core.invalidfd)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "",
    "type": "function container"
  }, {
    "id": 39,
    "text": "setfd",
    "type": "global function"
  }, {
    "id": 40,
    "text": "setdepth",
    "type": "global function"
  }, {
    "id": 41,
    "text": "create",
    "type": "global function"
  }, {
    "id": 42,
    "text": "func",
    "type": "global function"
  }, {
    "id": 43,
    "text": "loadkey",
    "type": "global function"
  }, {
    "id": 44,
    "text": "setmode",
    "type": "global function"
  }, {
    "id": 45,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 46,
    "text": "locations",
    "type": "global function"
  }, {
    "id": 47,
    "text": "loadcert",
    "type": "global function"
  }, {
    "id": 48,
    "text": "create",
    "type": "global function"
  }, {
    "id": 49,
    "text": "module",
    "type": "global function"
  }, {
    "id": 50,
    "text": "require",
    "type": "global function"
  }, {
    "id": 51,
    "text": "type",
    "type": "global function"
  }, {
    "id": 52,
    "text": "",
    "type": "global variable"
  }, {
    "id": 53,
    "text": "",
    "type": "variable container"
  }, {
    "id": 54,
    "text": "",
    "type": "require container"
  }, {
    "id": 55,
    "text": "",
    "type": "global variable"
  }, {
    "id": 56,
    "text": "",
    "type": "global variable"
  }, {
    "id": 57,
    "text": "",
    "type": "global variable"
  }, {
    "id": 58,
    "text": "",
    "type": "n/a"
  }, {
    "id": 59,
    "text": "",
    "type": "global variable"
  }, {
    "id": 60,
    "text": "",
    "type": "n/a"
  }, {
    "id": 61,
    "text": "core)",
    "type": "module"
  }, {
    "id": 62,
    "text": "context)",
    "type": "module"
  } ]
}