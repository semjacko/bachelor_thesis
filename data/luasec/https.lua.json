{
  "_filename": "https.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luasec/src/https.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 3
  }, {
    "from": 11,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 3
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 19,
    "label": "has",
    "to": 3
  }, {
    "from": 19,
    "label": "has",
    "to": 24
  }, {
    "from": 19,
    "label": "has",
    "to": 25
  }, {
    "from": 19,
    "label": "has",
    "to": 26
  }, {
    "from": 19,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 3
  }, {
    "from": 19,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 28,
    "label": "has",
    "to": 3
  }, {
    "from": 19,
    "label": "has",
    "to": 3
  }, {
    "from": 19,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 3
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 29
  }, {
    "from": 36,
    "label": "has",
    "to": 30
  }, {
    "from": 36,
    "label": "has",
    "to": 31
  }, {
    "from": 36,
    "label": "has",
    "to": 32
  }, {
    "from": 36,
    "label": "has",
    "to": 3
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 38,
    "label": "has",
    "to": 44
  }, {
    "from": 38,
    "label": "has",
    "to": 3
  }, {
    "from": 38,
    "label": "has",
    "to": 3
  }, {
    "from": 38,
    "label": "has",
    "to": 3
  }, {
    "from": 38,
    "label": "has",
    "to": 45
  }, {
    "from": 38,
    "label": "has",
    "to": 46
  }, {
    "from": 38,
    "label": "has",
    "to": 47
  }, {
    "from": 38,
    "label": "has",
    "to": 3
  }, {
    "from": 38,
    "label": "has",
    "to": 3
  }, {
    "from": 38,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 24
  }, {
    "from": 49,
    "label": "has",
    "to": 25
  }, {
    "from": 49,
    "label": "has",
    "to": 26
  }, {
    "from": 49,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 3
  }, {
    "from": 49,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 28,
    "label": "has",
    "to": 3
  }, {
    "from": 49,
    "label": "has",
    "to": 3
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 19,
    "label": "calls",
    "to": 60
  }, {
    "from": 38,
    "label": "calls",
    "to": 5
  }, {
    "from": 2,
    "label": "calls",
    "to": 58
  }, {
    "from": 5,
    "label": "calls",
    "to": 53
  }, {
    "from": 38,
    "label": "calls",
    "to": 19
  }, {
    "from": 19,
    "label": "calls",
    "to": 52
  }, {
    "from": 11,
    "label": "calls",
    "to": 66
  }, {
    "from": 38,
    "label": "calls",
    "to": 66
  }, {
    "from": 38,
    "label": "calls",
    "to": 54
  }, {
    "from": 5,
    "label": "calls",
    "to": 2
  }, {
    "from": 38,
    "label": "calls",
    "to": 2
  }, {
    "from": 19,
    "label": "calls",
    "to": 57
  }, {
    "from": 11,
    "label": "calls",
    "to": 65
  }, {
    "from": 19,
    "label": "calls",
    "to": 65
  }, {
    "from": 19,
    "label": "calls",
    "to": 65
  }, {
    "from": 11,
    "label": "calls",
    "to": 67
  }, {
    "from": 19,
    "label": "calls",
    "to": 67
  }, {
    "from": 2,
    "label": "calls",
    "to": 56
  }, {
    "from": 11,
    "label": "calls",
    "to": 61
  }, {
    "from": 51,
    "label": "calls",
    "to": 62
  }, {
    "from": 5,
    "label": "calls",
    "to": 55
  }, {
    "from": 19,
    "label": "calls",
    "to": 64
  }, {
    "from": 19,
    "label": "calls",
    "to": 64
  }, {
    "from": 19,
    "label": "calls",
    "to": 64
  }, {
    "from": 19,
    "label": "calls",
    "to": 64
  }, {
    "from": 51,
    "label": "calls",
    "to": 63
  }, {
    "from": 51,
    "label": "calls",
    "to": 63
  }, {
    "from": 51,
    "label": "calls",
    "to": 63
  }, {
    "from": 51,
    "label": "calls",
    "to": 63
  }, {
    "from": 51,
    "label": "calls",
    "to": 63
  }, {
    "from": 51,
    "label": "calls",
    "to": 63
  }, {
    "from": 51,
    "label": "calls",
    "to": 63
  }, {
    "from": 19,
    "label": "calls",
    "to": 11
  }, {
    "from": 38,
    "label": "calls",
    "to": 59
  }, {
    "from": 1,
    "label": "contains",
    "to": 51
  }, {
    "from": 51,
    "label": "declares",
    "to": 2
  }, {
    "from": 51,
    "label": "declares",
    "to": 5
  }, {
    "from": 51,
    "label": "declares",
    "to": 11
  }, {
    "from": 51,
    "label": "declares",
    "to": 17
  }, {
    "from": 51,
    "label": "declares",
    "to": 19
  }, {
    "from": 51,
    "label": "declares",
    "to": 34
  }, {
    "from": 51,
    "label": "declares",
    "to": 36
  }, {
    "from": 51,
    "label": "declares",
    "to": 38
  }, {
    "from": 51,
    "label": "declares",
    "to": 49
  }, {
    "from": 1,
    "label": "contains",
    "to": 70
  }, {
    "from": 1,
    "label": "contains",
    "to": 71
  }, {
    "from": 70,
    "label": "initializes",
    "to": 72
  }, {
    "from": 72,
    "label": "assigns",
    "to": 73
  }, {
    "from": 70,
    "label": "initializes",
    "to": 74
  }, {
    "from": 74,
    "label": "assigns",
    "to": 75
  }, {
    "from": 70,
    "label": "initializes",
    "to": 76
  }, {
    "from": 76,
    "label": "assigns",
    "to": 77
  }, {
    "from": 70,
    "label": "initializes",
    "to": 78
  }, {
    "from": 78,
    "label": "assigns",
    "to": 79
  }, {
    "from": 70,
    "label": "initializes",
    "to": 80
  }, {
    "from": 80,
    "label": "assigns",
    "to": 81
  }, {
    "from": 81,
    "label": "assigns",
    "to": 82
  }, {
    "from": 82,
    "label": "assigns",
    "to": 83
  }, {
    "from": 81,
    "label": "assigns",
    "to": 84
  }, {
    "from": 84,
    "label": "assigns",
    "to": 85
  }, {
    "from": 81,
    "label": "assigns",
    "to": 86
  }, {
    "from": 86,
    "label": "assigns",
    "to": 87
  }, {
    "from": 70,
    "label": "initializes",
    "to": 88
  }, {
    "from": 70,
    "label": "initializes",
    "to": 89
  }, {
    "from": 70,
    "label": "initializes",
    "to": 90
  }, {
    "from": 71,
    "label": "initializes",
    "to": 91
  }, {
    "from": 91,
    "label": "requires",
    "to": 69
  }, {
    "from": 71,
    "label": "initializes",
    "to": 92
  }, {
    "from": 92,
    "label": "requires",
    "to": 68
  }, {
    "from": 71,
    "label": "initializes",
    "to": 93
  }, {
    "from": 93,
    "label": "requires",
    "to": 94
  }, {
    "from": 71,
    "label": "initializes",
    "to": 95
  }, {
    "from": 95,
    "label": "requires",
    "to": 96
  }, {
    "from": 71,
    "label": "initializes",
    "to": 97
  }, {
    "from": 97,
    "label": "requires",
    "to": 98
  }, {
    "from": 71,
    "label": "initializes",
    "to": 99
  }, {
    "from": 99,
    "label": "requires",
    "to": 100
  }, {
    "from": 71,
    "label": "initializes",
    "to": 101
  }, {
    "from": 101,
    "label": "requires",
    "to": 102
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "https",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function default_https_port(u)\r\n   return url.build(url.parse(u, {port = PORT}))\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "local function urlstring_totable(url, body, result_table)\r\n   url = {\r\n      url = default_https_port(url),\r\n      method = body and \"POST\" or \"GET\",\r\n      sink = ltn12.sink.table(result_table)\r\n   }\r\n   if body then\r\n      url.source = ltn12.source.string(body)\r\n      url.headers = {\r\n         [\"content-length\"] = #body,\r\n         [\"content-type\"] = \"application/x-www-form-urlencoded\",\r\n      }\r\n   end\r\n   return url\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "url = {\r\n      url = default_https_port(url),\r\n      method = body and \"POST\" or \"GET\",\r\n      sink = ltn12.sink.table(result_table)\r\n   }",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "if body then\r\n      url.source = ltn12.source.string(body)\r\n      url.headers = {\r\n         [\"content-length\"] = #body,\r\n         [\"content-type\"] = \"application/x-www-form-urlencoded\",\r\n      }\r\n   end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "url.source = ltn12.source.string(body)",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "url.headers = {\r\n         [\"content-length\"] = #body,\r\n         [\"content-type\"] = \"application/x-www-form-urlencoded\",\r\n      }",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "local function reg(conn)\r\n   local mt = getmetatable(conn.sock).__index\r\n   for name, method in pairs(mt) do\r\n      if type(method) == \"function\" then\r\n         conn[name] = function (self, ...)\r\n                         return method(self.sock, ...)\r\n                      end\r\n      end\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "local mt = getmetatable(conn.sock).__index",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "for name, method in pairs(mt) do\r\n      if type(method) == \"function\" then\r\n         conn[name] = function (self, ...)\r\n                         return method(self.sock, ...)\r\n                      end\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 14,
    "text": "if type(method) == \"function\" then\r\n         conn[name] = function (self, ...)\r\n                         return method(self.sock, ...)\r\n                      end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "conn[name] = function (self, ...)\r\n                         return method(self.sock, ...)\r\n                      end",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function (self, ...)\r\n                         return method(self.sock, ...)\r\n                      end",
    "type": "function"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "local function tcp(params)\r\n   params = params or {}\r\n   -- Default settings\r\n   for k, v in pairs(cfg) do \r\n      params[k] = params[k] or v\r\n   end\r\n   -- Force client mode\r\n   params.mode = \"client\"\r\n   -- 'create' function for LuaSocket\r\n   return function ()\r\n      local conn = {}\r\n      conn.sock = try(socket.tcp())\r\n      local st = getmetatable(conn.sock).__index.settimeout\r\n      function conn:settimeout(...)\r\n         return st(self.sock, ...)\r\n      end\r\n      -- Replace TCP's connection function\r\n      function conn:connect(host, port)\r\n         try(self.sock:connect(host, port))\r\n         self.sock = try(ssl.wrap(self.sock, params))\r\n         try(self.sock:dohandshake())\r\n         reg(self, getmetatable(self.sock))\r\n         return 1\r\n      end\r\n      return conn\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "params = params or {}",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "for k, v in pairs(cfg) do \r\n      params[k] = params[k] or v\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 22,
    "text": "params[k] = params[k] or v",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "params.mode = \"client\"",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "local conn = {}",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "conn.sock = try(socket.tcp())",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "local st = getmetatable(conn.sock).__index.settimeout",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "function conn:settimeout(...)\r\n         return st(self.sock, ...)\r\n      end",
    "type": "statement:globalfunction"
  }, {
    "id": 28,
    "text": "function conn:connect(host, port)\r\n         try(self.sock:connect(host, port))\r\n         self.sock = try(ssl.wrap(self.sock, params))\r\n         try(self.sock:dohandshake())\r\n         reg(self, getmetatable(self.sock))\r\n         return 1\r\n      end",
    "type": "statement:globalfunction"
  }, {
    "id": 29,
    "text": "try(self.sock:connect(host, port))",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "self.sock = try(ssl.wrap(self.sock, params))",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "try(self.sock:dohandshake())",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "reg(self, getmetatable(self.sock))",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function conn:settimeout(...)\r\n         return st(self.sock, ...)\r\n      end",
    "type": "function"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function conn:connect(host, port)\r\n         try(self.sock:connect(host, port))\r\n         self.sock = try(ssl.wrap(self.sock, params))\r\n         try(self.sock:dohandshake())\r\n         reg(self, getmetatable(self.sock))\r\n         return 1\r\n      end",
    "type": "function"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function request(url, body)\r\n  local result_table = {}\r\n  local stringrequest = type(url) == \"string\"\r\n  if stringrequest then\r\n    url = urlstring_totable(url, body, result_table)\r\n  else\r\n    url.url = default_https_port(url.url)\r\n  end\r\n  if http.PROXY or url.proxy then\r\n    return nil, \"proxy not supported\"\r\n  elseif url.redirect then\r\n    return nil, \"redirect not supported\"\r\n  elseif url.create then\r\n    return nil, \"create function not permitted\"\r\n  end\r\n  -- New 'create' function to establish a secure connection\r\n  url.create = tcp(url)\r\n  local res, code, headers, status = http.request(url)\r\n  if res and stringrequest then\r\n    return table.concat(result_table), code, headers, status\r\n  end\r\n  return res, code, headers, status\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "local result_table = {}",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "local stringrequest = type(url) == \"string\"",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "if stringrequest then\r\n    url = urlstring_totable(url, body, result_table)\r\n  else\r\n    url.url = default_https_port(url.url)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "url = urlstring_totable(url, body, result_table)",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "url.url = default_https_port(url.url)",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "if http.PROXY or url.proxy then\r\n    return nil, \"proxy not supported\"\r\n  elseif url.redirect then\r\n    return nil, \"redirect not supported\"\r\n  elseif url.create then\r\n    return nil, \"create function not permitted\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "url.create = tcp(url)",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "local res, code, headers, status = http.request(url)",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "if res and stringrequest then\r\n    return table.concat(result_table), code, headers, status\r\n  end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function ()\r\n      local conn = {}\r\n      conn.sock = try(socket.tcp())\r\n      local st = getmetatable(conn.sock).__index.settimeout\r\n      function conn:settimeout(...)\r\n         return st(self.sock, ...)\r\n      end\r\n      -- Replace TCP's connection function\r\n      function conn:connect(host, port)\r\n         try(self.sock:connect(host, port))\r\n         self.sock = try(ssl.wrap(self.sock, params))\r\n         try(self.sock:dohandshake())\r\n         reg(self, getmetatable(self.sock))\r\n         return 1\r\n      end\r\n      return conn\r\n  end",
    "type": "function"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "",
    "type": "function container"
  }, {
    "id": 52,
    "text": "function wrap(sock, cfg)\r\n   local ctx, msg\r\n   if type(cfg) == \"table\" then\r\n      ctx, msg = newcontext(cfg)\r\n      if not ctx then return nil, msg end\r\n   else\r\n      ctx = cfg\r\n   end\r\n   local s, msg = core.create(ctx)\r\n   if s then\r\n      core.setfd(s, sock:getfd())\r\n      sock:setfd(core.invalidfd)\r\n      return s\r\n   end\r\n   return nil, msg \r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "source.string",
    "type": "global function"
  }, {
    "id": 54,
    "text": "request",
    "type": "global function"
  }, {
    "id": 55,
    "text": "sink.table",
    "type": "global function"
  }, {
    "id": 56,
    "text": "build",
    "type": "global function"
  }, {
    "id": 57,
    "text": "tcp",
    "type": "global function"
  }, {
    "id": 58,
    "text": "parse",
    "type": "global function"
  }, {
    "id": 59,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 60,
    "text": "st",
    "type": "global function"
  }, {
    "id": 61,
    "text": "method",
    "type": "global function"
  }, {
    "id": 62,
    "text": "module",
    "type": "global function"
  }, {
    "id": 63,
    "text": "require",
    "type": "global function"
  }, {
    "id": 64,
    "text": "try",
    "type": "global function"
  }, {
    "id": 65,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 66,
    "text": "type",
    "type": "global function"
  }, {
    "id": 67,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 68,
    "text": "(ssl)",
    "type": "module"
  }, {
    "id": 69,
    "text": "(socket)",
    "type": "module"
  }, {
    "id": 70,
    "text": "",
    "type": "variable container"
  }, {
    "id": 71,
    "text": "",
    "type": "require container"
  }, {
    "id": 72,
    "text": "",
    "type": "local variable"
  }, {
    "id": 73,
    "text": "",
    "type": "n/a"
  }, {
    "id": 74,
    "text": "",
    "type": "local variable"
  }, {
    "id": 75,
    "text": "",
    "type": "n/a"
  }, {
    "id": 76,
    "text": "",
    "type": "local variable"
  }, {
    "id": 77,
    "text": "",
    "type": "n/a"
  }, {
    "id": 78,
    "text": "",
    "type": "local variable"
  }, {
    "id": 79,
    "text": "",
    "type": "n/a"
  }, {
    "id": 80,
    "text": "",
    "type": "local variable"
  }, {
    "id": 81,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 82,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 83,
    "text": "",
    "type": "string"
  }, {
    "id": 84,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 85,
    "text": "",
    "type": "string"
  }, {
    "id": 86,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 87,
    "text": "",
    "type": "string"
  }, {
    "id": 88,
    "text": "",
    "type": "global variable"
  }, {
    "id": 89,
    "text": "",
    "type": "global variable"
  }, {
    "id": 90,
    "text": "",
    "type": "global variable"
  }, {
    "id": 91,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 92,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 93,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 94,
    "text": "(ltn12)",
    "type": "module"
  }, {
    "id": 95,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 96,
    "text": "http)",
    "type": "module"
  }, {
    "id": 97,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 98,
    "text": "url)",
    "type": "module"
  }, {
    "id": 99,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 100,
    "text": "(table)",
    "type": "module"
  }, {
    "id": 101,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 102,
    "text": "(string)",
    "type": "module"
  } ]
}