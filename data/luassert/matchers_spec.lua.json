{
  "_filename": "matchers_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/luassert/spec/matchers_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 5,
    "label": "has",
    "to": 11
  }, {
    "from": 5,
    "label": "has",
    "to": 12
  }, {
    "from": 5,
    "label": "has",
    "to": 13
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 15,
    "label": "has",
    "to": 20
  }, {
    "from": 15,
    "label": "has",
    "to": 21
  }, {
    "from": 15,
    "label": "has",
    "to": 22
  }, {
    "from": 15,
    "label": "has",
    "to": 23
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 25,
    "label": "has",
    "to": 29
  }, {
    "from": 25,
    "label": "has",
    "to": 30
  }, {
    "from": 25,
    "label": "has",
    "to": 31
  }, {
    "from": 25,
    "label": "has",
    "to": 32
  }, {
    "from": 25,
    "label": "has",
    "to": 33
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 35,
    "label": "has",
    "to": 39
  }, {
    "from": 35,
    "label": "has",
    "to": 40
  }, {
    "from": 35,
    "label": "has",
    "to": 41
  }, {
    "from": 35,
    "label": "has",
    "to": 42
  }, {
    "from": 35,
    "label": "has",
    "to": 43
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 45,
    "label": "has",
    "to": 49
  }, {
    "from": 45,
    "label": "has",
    "to": 50
  }, {
    "from": 45,
    "label": "has",
    "to": 51
  }, {
    "from": 45,
    "label": "has",
    "to": 52
  }, {
    "from": 45,
    "label": "has",
    "to": 53
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 55,
    "label": "has",
    "to": 58
  }, {
    "from": 55,
    "label": "has",
    "to": 59
  }, {
    "from": 55,
    "label": "has",
    "to": 60
  }, {
    "from": 55,
    "label": "has",
    "to": 61
  }, {
    "from": 55,
    "label": "has",
    "to": 62
  }, {
    "from": 55,
    "label": "has",
    "to": 63
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 65,
    "label": "has",
    "to": 68
  }, {
    "from": 65,
    "label": "has",
    "to": 69
  }, {
    "from": 65,
    "label": "has",
    "to": 70
  }, {
    "from": 65,
    "label": "has",
    "to": 71
  }, {
    "from": 65,
    "label": "has",
    "to": 72
  }, {
    "from": 65,
    "label": "has",
    "to": 73
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 75,
    "label": "has",
    "to": 78
  }, {
    "from": 75,
    "label": "has",
    "to": 79
  }, {
    "from": 75,
    "label": "has",
    "to": 80
  }, {
    "from": 75,
    "label": "has",
    "to": 81
  }, {
    "from": 75,
    "label": "has",
    "to": 82
  }, {
    "from": 75,
    "label": "has",
    "to": 83
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 85,
    "label": "has",
    "to": 88
  }, {
    "from": 85,
    "label": "has",
    "to": 89
  }, {
    "from": 85,
    "label": "has",
    "to": 90
  }, {
    "from": 85,
    "label": "has",
    "to": 91
  }, {
    "from": 85,
    "label": "has",
    "to": 92
  }, {
    "from": 85,
    "label": "has",
    "to": 93
  }, {
    "from": 95,
    "label": "has",
    "to": 66
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 95,
    "label": "has",
    "to": 97
  }, {
    "from": 95,
    "label": "has",
    "to": 98
  }, {
    "from": 95,
    "label": "has",
    "to": 99
  }, {
    "from": 95,
    "label": "has",
    "to": 100
  }, {
    "from": 95,
    "label": "has",
    "to": 101
  }, {
    "from": 95,
    "label": "has",
    "to": 102
  }, {
    "from": 95,
    "label": "has",
    "to": 103
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 105,
    "label": "has",
    "to": 107
  }, {
    "from": 105,
    "label": "has",
    "to": 108
  }, {
    "from": 105,
    "label": "has",
    "to": 109
  }, {
    "from": 105,
    "label": "has",
    "to": 110
  }, {
    "from": 105,
    "label": "has",
    "to": 111
  }, {
    "from": 105,
    "label": "has",
    "to": 112
  }, {
    "from": 105,
    "label": "has",
    "to": 113
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 115,
    "label": "has",
    "to": 117
  }, {
    "from": 115,
    "label": "has",
    "to": 118
  }, {
    "from": 115,
    "label": "has",
    "to": 119
  }, {
    "from": 115,
    "label": "has",
    "to": 120
  }, {
    "from": 115,
    "label": "has",
    "to": 121
  }, {
    "from": 115,
    "label": "has",
    "to": 122
  }, {
    "from": 115,
    "label": "has",
    "to": 123
  }, {
    "from": 115,
    "label": "has",
    "to": 124
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 127,
    "label": "has",
    "to": 129
  }, {
    "from": 127,
    "label": "has",
    "to": 130
  }, {
    "from": 127,
    "label": "has",
    "to": 131
  }, {
    "from": 127,
    "label": "has",
    "to": 132
  }, {
    "from": 127,
    "label": "has",
    "to": 133
  }, {
    "from": 127,
    "label": "has",
    "to": 134
  }, {
    "from": 127,
    "label": "has",
    "to": 135
  }, {
    "from": 127,
    "label": "has",
    "to": 136
  }, {
    "from": 127,
    "label": "has",
    "to": 137
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 138,
    "label": "has",
    "to": 140
  }, {
    "from": 138,
    "label": "has",
    "to": 141
  }, {
    "from": 138,
    "label": "has",
    "to": 142
  }, {
    "from": 138,
    "label": "has",
    "to": 143
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 145
  }, {
    "from": 146,
    "label": "has",
    "to": 148
  }, {
    "from": 146,
    "label": "has",
    "to": 149
  }, {
    "from": 146,
    "label": "has",
    "to": 150
  }, {
    "from": 146,
    "label": "has",
    "to": 151
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 152,
    "label": "has",
    "to": 154
  }, {
    "from": 152,
    "label": "has",
    "to": 155
  }, {
    "from": 152,
    "label": "has",
    "to": 156
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 160,
    "label": "has",
    "to": 158
  }, {
    "from": 159,
    "label": "has",
    "to": 161
  }, {
    "from": 159,
    "label": "has",
    "to": 162
  }, {
    "from": 159,
    "label": "has",
    "to": 163
  }, {
    "from": 159,
    "label": "has",
    "to": 164
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 173,
    "label": "has",
    "to": 174
  }, {
    "from": 175,
    "label": "has",
    "to": 176
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 178,
    "label": "has",
    "to": 180
  }, {
    "from": 178,
    "label": "has",
    "to": 181
  }, {
    "from": 178,
    "label": "has",
    "to": 182
  }, {
    "from": 182,
    "label": "has",
    "to": 166
  }, {
    "from": 178,
    "label": "has",
    "to": 183
  }, {
    "from": 183,
    "label": "has",
    "to": 168
  }, {
    "from": 178,
    "label": "has",
    "to": 184
  }, {
    "from": 184,
    "label": "has",
    "to": 170
  }, {
    "from": 178,
    "label": "has",
    "to": 185
  }, {
    "from": 185,
    "label": "has",
    "to": 172
  }, {
    "from": 178,
    "label": "has",
    "to": 186
  }, {
    "from": 186,
    "label": "has",
    "to": 174
  }, {
    "from": 178,
    "label": "has",
    "to": 187
  }, {
    "from": 187,
    "label": "has",
    "to": 176
  }, {
    "from": 178,
    "label": "has",
    "to": 188
  }, {
    "from": 178,
    "label": "has",
    "to": 189
  }, {
    "from": 178,
    "label": "has",
    "to": 190
  }, {
    "from": 178,
    "label": "has",
    "to": 191
  }, {
    "from": 178,
    "label": "has",
    "to": 192
  }, {
    "from": 178,
    "label": "has",
    "to": 193
  }, {
    "from": 178,
    "label": "has",
    "to": 194
  }, {
    "from": 178,
    "label": "has",
    "to": 195
  }, {
    "from": 178,
    "label": "has",
    "to": 196
  }, {
    "from": 178,
    "label": "has",
    "to": 197
  }, {
    "from": 178,
    "label": "has",
    "to": 198
  }, {
    "from": 178,
    "label": "has",
    "to": 199
  }, {
    "from": 178,
    "label": "has",
    "to": 200
  }, {
    "from": 201,
    "label": "has",
    "to": 202
  }, {
    "from": 203,
    "label": "has",
    "to": 204
  }, {
    "from": 205,
    "label": "has",
    "to": 206
  }, {
    "from": 207,
    "label": "has",
    "to": 208
  }, {
    "from": 208,
    "label": "has",
    "to": 202
  }, {
    "from": 207,
    "label": "has",
    "to": 209
  }, {
    "from": 209,
    "label": "has",
    "to": 204
  }, {
    "from": 207,
    "label": "has",
    "to": 210
  }, {
    "from": 210,
    "label": "has",
    "to": 206
  }, {
    "from": 207,
    "label": "has",
    "to": 211
  }, {
    "from": 207,
    "label": "has",
    "to": 212
  }, {
    "from": 207,
    "label": "has",
    "to": 213
  }, {
    "from": 207,
    "label": "has",
    "to": 214
  }, {
    "from": 207,
    "label": "has",
    "to": 215
  }, {
    "from": 207,
    "label": "has",
    "to": 216
  }, {
    "from": 207,
    "label": "has",
    "to": 217
  }, {
    "from": 207,
    "label": "has",
    "to": 218
  }, {
    "from": 219,
    "label": "has",
    "to": 220
  }, {
    "from": 221,
    "label": "has",
    "to": 222
  }, {
    "from": 223,
    "label": "has",
    "to": 224
  }, {
    "from": 225,
    "label": "has",
    "to": 226
  }, {
    "from": 226,
    "label": "has",
    "to": 220
  }, {
    "from": 225,
    "label": "has",
    "to": 227
  }, {
    "from": 227,
    "label": "has",
    "to": 222
  }, {
    "from": 225,
    "label": "has",
    "to": 228
  }, {
    "from": 228,
    "label": "has",
    "to": 224
  }, {
    "from": 225,
    "label": "has",
    "to": 229
  }, {
    "from": 225,
    "label": "has",
    "to": 230
  }, {
    "from": 225,
    "label": "has",
    "to": 231
  }, {
    "from": 225,
    "label": "has",
    "to": 232
  }, {
    "from": 225,
    "label": "has",
    "to": 233
  }, {
    "from": 234,
    "label": "has",
    "to": 235
  }, {
    "from": 234,
    "label": "has",
    "to": 236
  }, {
    "from": 234,
    "label": "has",
    "to": 237
  }, {
    "from": 234,
    "label": "has",
    "to": 238
  }, {
    "from": 234,
    "label": "has",
    "to": 239
  }, {
    "from": 234,
    "label": "has",
    "to": 240
  }, {
    "from": 234,
    "label": "has",
    "to": 241
  }, {
    "from": 242,
    "label": "has",
    "to": 243
  }, {
    "from": 242,
    "label": "has",
    "to": 37
  }, {
    "from": 242,
    "label": "has",
    "to": 244
  }, {
    "from": 242,
    "label": "has",
    "to": 56
  }, {
    "from": 242,
    "label": "has",
    "to": 245
  }, {
    "from": 242,
    "label": "has",
    "to": 246
  }, {
    "from": 242,
    "label": "has",
    "to": 247
  }, {
    "from": 242,
    "label": "has",
    "to": 248
  }, {
    "from": 242,
    "label": "has",
    "to": 38
  }, {
    "from": 242,
    "label": "has",
    "to": 249
  }, {
    "from": 242,
    "label": "has",
    "to": 61
  }, {
    "from": 242,
    "label": "has",
    "to": 250
  }, {
    "from": 242,
    "label": "has",
    "to": 251
  }, {
    "from": 242,
    "label": "has",
    "to": 252
  }, {
    "from": 242,
    "label": "has",
    "to": 253
  }, {
    "from": 254,
    "label": "has",
    "to": 255
  }, {
    "from": 254,
    "label": "has",
    "to": 256
  }, {
    "from": 254,
    "label": "has",
    "to": 257
  }, {
    "from": 254,
    "label": "has",
    "to": 258
  }, {
    "from": 254,
    "label": "has",
    "to": 259
  }, {
    "from": 254,
    "label": "has",
    "to": 260
  }, {
    "from": 254,
    "label": "has",
    "to": 261
  }, {
    "from": 254,
    "label": "has",
    "to": 262
  }, {
    "from": 254,
    "label": "has",
    "to": 263
  }, {
    "from": 254,
    "label": "has",
    "to": 264
  }, {
    "from": 254,
    "label": "has",
    "to": 265
  }, {
    "from": 254,
    "label": "has",
    "to": 266
  }, {
    "from": 254,
    "label": "has",
    "to": 267
  }, {
    "from": 254,
    "label": "has",
    "to": 268
  }, {
    "from": 254,
    "label": "has",
    "to": 269
  }, {
    "from": 254,
    "label": "has",
    "to": 270
  }, {
    "from": 254,
    "label": "has",
    "to": 271
  }, {
    "from": 254,
    "label": "has",
    "to": 272
  }, {
    "from": 254,
    "label": "has",
    "to": 273
  }, {
    "from": 254,
    "label": "has",
    "to": 274
  }, {
    "from": 254,
    "label": "has",
    "to": 275
  }, {
    "from": 276,
    "label": "has",
    "to": 277
  }, {
    "from": 279,
    "label": "has",
    "to": 280
  }, {
    "from": 280,
    "label": "has",
    "to": 277
  }, {
    "from": 279,
    "label": "has",
    "to": 281
  }, {
    "from": 279,
    "label": "has",
    "to": 282
  }, {
    "from": 279,
    "label": "has",
    "to": 283
  }, {
    "from": 279,
    "label": "has",
    "to": 284
  }, {
    "from": 279,
    "label": "has",
    "to": 285
  }, {
    "from": 279,
    "label": "has",
    "to": 286
  }, {
    "from": 279,
    "label": "has",
    "to": 287
  }, {
    "from": 279,
    "label": "has",
    "to": 288
  }, {
    "from": 279,
    "label": "has",
    "to": 289
  }, {
    "from": 279,
    "label": "has",
    "to": 290
  }, {
    "from": 279,
    "label": "has",
    "to": 291
  }, {
    "from": 279,
    "label": "has",
    "to": 292
  }, {
    "from": 279,
    "label": "has",
    "to": 293
  }, {
    "from": 279,
    "label": "has",
    "to": 294
  }, {
    "from": 279,
    "label": "has",
    "to": 295
  }, {
    "from": 279,
    "label": "has",
    "to": 296
  }, {
    "from": 279,
    "label": "has",
    "to": 297
  }, {
    "from": 279,
    "label": "has",
    "to": 298
  }, {
    "from": 299,
    "label": "has",
    "to": 277
  }, {
    "from": 300,
    "label": "has",
    "to": 280
  }, {
    "from": 280,
    "label": "has",
    "to": 277
  }, {
    "from": 300,
    "label": "has",
    "to": 301
  }, {
    "from": 300,
    "label": "has",
    "to": 302
  }, {
    "from": 300,
    "label": "has",
    "to": 303
  }, {
    "from": 300,
    "label": "has",
    "to": 304
  }, {
    "from": 300,
    "label": "has",
    "to": 305
  }, {
    "from": 300,
    "label": "has",
    "to": 306
  }, {
    "from": 300,
    "label": "has",
    "to": 307
  }, {
    "from": 300,
    "label": "has",
    "to": 308
  }, {
    "from": 309,
    "label": "has",
    "to": 310
  }, {
    "from": 309,
    "label": "has",
    "to": 311
  }, {
    "from": 309,
    "label": "has",
    "to": 312
  }, {
    "from": 309,
    "label": "has",
    "to": 313
  }, {
    "from": 309,
    "label": "has",
    "to": 314
  }, {
    "from": 309,
    "label": "has",
    "to": 315
  }, {
    "from": 309,
    "label": "has",
    "to": 316
  }, {
    "from": 309,
    "label": "has",
    "to": 317
  }, {
    "from": 309,
    "label": "has",
    "to": 318
  }, {
    "from": 309,
    "label": "has",
    "to": 319
  }, {
    "from": 309,
    "label": "has",
    "to": 320
  }, {
    "from": 309,
    "label": "has",
    "to": 321
  }, {
    "from": 322,
    "label": "has",
    "to": 277
  }, {
    "from": 323,
    "label": "has",
    "to": 280
  }, {
    "from": 280,
    "label": "has",
    "to": 277
  }, {
    "from": 323,
    "label": "has",
    "to": 301
  }, {
    "from": 323,
    "label": "has",
    "to": 302
  }, {
    "from": 323,
    "label": "has",
    "to": 303
  }, {
    "from": 323,
    "label": "has",
    "to": 324
  }, {
    "from": 323,
    "label": "has",
    "to": 304
  }, {
    "from": 323,
    "label": "has",
    "to": 305
  }, {
    "from": 323,
    "label": "has",
    "to": 325
  }, {
    "from": 323,
    "label": "has",
    "to": 326
  }, {
    "from": 327,
    "label": "has",
    "to": 328
  }, {
    "from": 329,
    "label": "has",
    "to": 330
  }, {
    "from": 331,
    "label": "has",
    "to": 332
  }, {
    "from": 333,
    "label": "has",
    "to": 334
  }, {
    "from": 334,
    "label": "has",
    "to": 328
  }, {
    "from": 333,
    "label": "has",
    "to": 335
  }, {
    "from": 335,
    "label": "has",
    "to": 330
  }, {
    "from": 333,
    "label": "has",
    "to": 336
  }, {
    "from": 336,
    "label": "has",
    "to": 332
  }, {
    "from": 333,
    "label": "has",
    "to": 337
  }, {
    "from": 333,
    "label": "has",
    "to": 338
  }, {
    "from": 333,
    "label": "has",
    "to": 339
  }, {
    "from": 333,
    "label": "has",
    "to": 340
  }, {
    "from": 333,
    "label": "has",
    "to": 341
  }, {
    "from": 333,
    "label": "has",
    "to": 342
  }, {
    "from": 343,
    "label": "has",
    "to": 344
  }, {
    "from": 345,
    "label": "has",
    "to": 346
  }, {
    "from": 347,
    "label": "has",
    "to": 348
  }, {
    "from": 349,
    "label": "has",
    "to": 350
  }, {
    "from": 350,
    "label": "has",
    "to": 344
  }, {
    "from": 349,
    "label": "has",
    "to": 351
  }, {
    "from": 351,
    "label": "has",
    "to": 346
  }, {
    "from": 349,
    "label": "has",
    "to": 352
  }, {
    "from": 352,
    "label": "has",
    "to": 348
  }, {
    "from": 349,
    "label": "has",
    "to": 353
  }, {
    "from": 349,
    "label": "has",
    "to": 354
  }, {
    "from": 349,
    "label": "has",
    "to": 355
  }, {
    "from": 349,
    "label": "has",
    "to": 356
  }, {
    "from": 349,
    "label": "has",
    "to": 357
  }, {
    "from": 349,
    "label": "has",
    "to": 358
  }, {
    "from": 359,
    "label": "has",
    "to": 360
  }, {
    "from": 361,
    "label": "has",
    "to": 362
  }, {
    "from": 363,
    "label": "has",
    "to": 364
  }, {
    "from": 365,
    "label": "has",
    "to": 366
  }, {
    "from": 366,
    "label": "has",
    "to": 360
  }, {
    "from": 365,
    "label": "has",
    "to": 367
  }, {
    "from": 367,
    "label": "has",
    "to": 362
  }, {
    "from": 365,
    "label": "has",
    "to": 368
  }, {
    "from": 368,
    "label": "has",
    "to": 364
  }, {
    "from": 365,
    "label": "has",
    "to": 369
  }, {
    "from": 365,
    "label": "has",
    "to": 370
  }, {
    "from": 365,
    "label": "has",
    "to": 371
  }, {
    "from": 365,
    "label": "has",
    "to": 372
  }, {
    "from": 365,
    "label": "has",
    "to": 373
  }, {
    "from": 365,
    "label": "has",
    "to": 374
  }, {
    "from": 365,
    "label": "has",
    "to": 375
  }, {
    "from": 376,
    "label": "has",
    "to": 377
  }, {
    "from": 377,
    "label": "has",
    "to": 6
  }, {
    "from": 377,
    "label": "has",
    "to": 7
  }, {
    "from": 377,
    "label": "has",
    "to": 8
  }, {
    "from": 377,
    "label": "has",
    "to": 9
  }, {
    "from": 377,
    "label": "has",
    "to": 10
  }, {
    "from": 377,
    "label": "has",
    "to": 11
  }, {
    "from": 377,
    "label": "has",
    "to": 12
  }, {
    "from": 376,
    "label": "has",
    "to": 378
  }, {
    "from": 378,
    "label": "has",
    "to": 16
  }, {
    "from": 378,
    "label": "has",
    "to": 17
  }, {
    "from": 378,
    "label": "has",
    "to": 18
  }, {
    "from": 378,
    "label": "has",
    "to": 19
  }, {
    "from": 378,
    "label": "has",
    "to": 20
  }, {
    "from": 378,
    "label": "has",
    "to": 21
  }, {
    "from": 378,
    "label": "has",
    "to": 22
  }, {
    "from": 376,
    "label": "has",
    "to": 379
  }, {
    "from": 379,
    "label": "has",
    "to": 26
  }, {
    "from": 379,
    "label": "has",
    "to": 27
  }, {
    "from": 379,
    "label": "has",
    "to": 28
  }, {
    "from": 379,
    "label": "has",
    "to": 29
  }, {
    "from": 379,
    "label": "has",
    "to": 30
  }, {
    "from": 379,
    "label": "has",
    "to": 31
  }, {
    "from": 379,
    "label": "has",
    "to": 32
  }, {
    "from": 376,
    "label": "has",
    "to": 380
  }, {
    "from": 380,
    "label": "has",
    "to": 36
  }, {
    "from": 380,
    "label": "has",
    "to": 37
  }, {
    "from": 380,
    "label": "has",
    "to": 38
  }, {
    "from": 380,
    "label": "has",
    "to": 39
  }, {
    "from": 380,
    "label": "has",
    "to": 40
  }, {
    "from": 380,
    "label": "has",
    "to": 41
  }, {
    "from": 380,
    "label": "has",
    "to": 42
  }, {
    "from": 376,
    "label": "has",
    "to": 381
  }, {
    "from": 381,
    "label": "has",
    "to": 46
  }, {
    "from": 381,
    "label": "has",
    "to": 47
  }, {
    "from": 381,
    "label": "has",
    "to": 48
  }, {
    "from": 381,
    "label": "has",
    "to": 49
  }, {
    "from": 381,
    "label": "has",
    "to": 50
  }, {
    "from": 381,
    "label": "has",
    "to": 51
  }, {
    "from": 381,
    "label": "has",
    "to": 52
  }, {
    "from": 376,
    "label": "has",
    "to": 382
  }, {
    "from": 382,
    "label": "has",
    "to": 56
  }, {
    "from": 382,
    "label": "has",
    "to": 57
  }, {
    "from": 382,
    "label": "has",
    "to": 58
  }, {
    "from": 382,
    "label": "has",
    "to": 59
  }, {
    "from": 382,
    "label": "has",
    "to": 60
  }, {
    "from": 382,
    "label": "has",
    "to": 61
  }, {
    "from": 382,
    "label": "has",
    "to": 62
  }, {
    "from": 376,
    "label": "has",
    "to": 383
  }, {
    "from": 383,
    "label": "has",
    "to": 66
  }, {
    "from": 383,
    "label": "has",
    "to": 67
  }, {
    "from": 383,
    "label": "has",
    "to": 68
  }, {
    "from": 383,
    "label": "has",
    "to": 69
  }, {
    "from": 383,
    "label": "has",
    "to": 70
  }, {
    "from": 383,
    "label": "has",
    "to": 71
  }, {
    "from": 383,
    "label": "has",
    "to": 72
  }, {
    "from": 376,
    "label": "has",
    "to": 384
  }, {
    "from": 384,
    "label": "has",
    "to": 76
  }, {
    "from": 384,
    "label": "has",
    "to": 77
  }, {
    "from": 384,
    "label": "has",
    "to": 78
  }, {
    "from": 384,
    "label": "has",
    "to": 79
  }, {
    "from": 384,
    "label": "has",
    "to": 80
  }, {
    "from": 384,
    "label": "has",
    "to": 81
  }, {
    "from": 384,
    "label": "has",
    "to": 82
  }, {
    "from": 376,
    "label": "has",
    "to": 385
  }, {
    "from": 385,
    "label": "has",
    "to": 86
  }, {
    "from": 385,
    "label": "has",
    "to": 87
  }, {
    "from": 385,
    "label": "has",
    "to": 88
  }, {
    "from": 385,
    "label": "has",
    "to": 89
  }, {
    "from": 385,
    "label": "has",
    "to": 90
  }, {
    "from": 385,
    "label": "has",
    "to": 91
  }, {
    "from": 385,
    "label": "has",
    "to": 92
  }, {
    "from": 376,
    "label": "has",
    "to": 386
  }, {
    "from": 386,
    "label": "has",
    "to": 66
  }, {
    "from": 386,
    "label": "has",
    "to": 96
  }, {
    "from": 386,
    "label": "has",
    "to": 97
  }, {
    "from": 386,
    "label": "has",
    "to": 98
  }, {
    "from": 386,
    "label": "has",
    "to": 99
  }, {
    "from": 386,
    "label": "has",
    "to": 100
  }, {
    "from": 386,
    "label": "has",
    "to": 101
  }, {
    "from": 386,
    "label": "has",
    "to": 102
  }, {
    "from": 376,
    "label": "has",
    "to": 387
  }, {
    "from": 387,
    "label": "has",
    "to": 106
  }, {
    "from": 387,
    "label": "has",
    "to": 107
  }, {
    "from": 387,
    "label": "has",
    "to": 108
  }, {
    "from": 387,
    "label": "has",
    "to": 109
  }, {
    "from": 387,
    "label": "has",
    "to": 110
  }, {
    "from": 387,
    "label": "has",
    "to": 111
  }, {
    "from": 387,
    "label": "has",
    "to": 112
  }, {
    "from": 376,
    "label": "has",
    "to": 388
  }, {
    "from": 388,
    "label": "has",
    "to": 116
  }, {
    "from": 388,
    "label": "has",
    "to": 117
  }, {
    "from": 388,
    "label": "has",
    "to": 118
  }, {
    "from": 388,
    "label": "has",
    "to": 119
  }, {
    "from": 388,
    "label": "has",
    "to": 120
  }, {
    "from": 388,
    "label": "has",
    "to": 121
  }, {
    "from": 388,
    "label": "has",
    "to": 122
  }, {
    "from": 388,
    "label": "has",
    "to": 123
  }, {
    "from": 376,
    "label": "has",
    "to": 389
  }, {
    "from": 389,
    "label": "has",
    "to": 128
  }, {
    "from": 389,
    "label": "has",
    "to": 129
  }, {
    "from": 389,
    "label": "has",
    "to": 130
  }, {
    "from": 389,
    "label": "has",
    "to": 131
  }, {
    "from": 389,
    "label": "has",
    "to": 132
  }, {
    "from": 389,
    "label": "has",
    "to": 133
  }, {
    "from": 389,
    "label": "has",
    "to": 134
  }, {
    "from": 389,
    "label": "has",
    "to": 135
  }, {
    "from": 389,
    "label": "has",
    "to": 136
  }, {
    "from": 376,
    "label": "has",
    "to": 390
  }, {
    "from": 390,
    "label": "has",
    "to": 139
  }, {
    "from": 390,
    "label": "has",
    "to": 140
  }, {
    "from": 390,
    "label": "has",
    "to": 141
  }, {
    "from": 390,
    "label": "has",
    "to": 142
  }, {
    "from": 376,
    "label": "has",
    "to": 391
  }, {
    "from": 391,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 145
  }, {
    "from": 391,
    "label": "has",
    "to": 148
  }, {
    "from": 391,
    "label": "has",
    "to": 149
  }, {
    "from": 391,
    "label": "has",
    "to": 150
  }, {
    "from": 376,
    "label": "has",
    "to": 392
  }, {
    "from": 392,
    "label": "has",
    "to": 153
  }, {
    "from": 392,
    "label": "has",
    "to": 154
  }, {
    "from": 392,
    "label": "has",
    "to": 155
  }, {
    "from": 376,
    "label": "has",
    "to": 393
  }, {
    "from": 393,
    "label": "has",
    "to": 160
  }, {
    "from": 160,
    "label": "has",
    "to": 158
  }, {
    "from": 393,
    "label": "has",
    "to": 161
  }, {
    "from": 393,
    "label": "has",
    "to": 162
  }, {
    "from": 393,
    "label": "has",
    "to": 163
  }, {
    "from": 376,
    "label": "has",
    "to": 394
  }, {
    "from": 394,
    "label": "has",
    "to": 179
  }, {
    "from": 394,
    "label": "has",
    "to": 180
  }, {
    "from": 394,
    "label": "has",
    "to": 181
  }, {
    "from": 394,
    "label": "has",
    "to": 182
  }, {
    "from": 182,
    "label": "has",
    "to": 166
  }, {
    "from": 394,
    "label": "has",
    "to": 183
  }, {
    "from": 183,
    "label": "has",
    "to": 168
  }, {
    "from": 394,
    "label": "has",
    "to": 184
  }, {
    "from": 184,
    "label": "has",
    "to": 170
  }, {
    "from": 394,
    "label": "has",
    "to": 185
  }, {
    "from": 185,
    "label": "has",
    "to": 172
  }, {
    "from": 394,
    "label": "has",
    "to": 186
  }, {
    "from": 186,
    "label": "has",
    "to": 174
  }, {
    "from": 394,
    "label": "has",
    "to": 187
  }, {
    "from": 187,
    "label": "has",
    "to": 176
  }, {
    "from": 394,
    "label": "has",
    "to": 188
  }, {
    "from": 394,
    "label": "has",
    "to": 189
  }, {
    "from": 394,
    "label": "has",
    "to": 190
  }, {
    "from": 394,
    "label": "has",
    "to": 191
  }, {
    "from": 394,
    "label": "has",
    "to": 192
  }, {
    "from": 394,
    "label": "has",
    "to": 193
  }, {
    "from": 394,
    "label": "has",
    "to": 194
  }, {
    "from": 394,
    "label": "has",
    "to": 195
  }, {
    "from": 394,
    "label": "has",
    "to": 196
  }, {
    "from": 394,
    "label": "has",
    "to": 197
  }, {
    "from": 394,
    "label": "has",
    "to": 198
  }, {
    "from": 394,
    "label": "has",
    "to": 199
  }, {
    "from": 376,
    "label": "has",
    "to": 395
  }, {
    "from": 395,
    "label": "has",
    "to": 208
  }, {
    "from": 208,
    "label": "has",
    "to": 202
  }, {
    "from": 395,
    "label": "has",
    "to": 209
  }, {
    "from": 209,
    "label": "has",
    "to": 204
  }, {
    "from": 395,
    "label": "has",
    "to": 210
  }, {
    "from": 210,
    "label": "has",
    "to": 206
  }, {
    "from": 395,
    "label": "has",
    "to": 211
  }, {
    "from": 395,
    "label": "has",
    "to": 212
  }, {
    "from": 395,
    "label": "has",
    "to": 213
  }, {
    "from": 395,
    "label": "has",
    "to": 214
  }, {
    "from": 395,
    "label": "has",
    "to": 215
  }, {
    "from": 395,
    "label": "has",
    "to": 216
  }, {
    "from": 395,
    "label": "has",
    "to": 217
  }, {
    "from": 376,
    "label": "has",
    "to": 396
  }, {
    "from": 396,
    "label": "has",
    "to": 226
  }, {
    "from": 226,
    "label": "has",
    "to": 220
  }, {
    "from": 396,
    "label": "has",
    "to": 227
  }, {
    "from": 227,
    "label": "has",
    "to": 222
  }, {
    "from": 396,
    "label": "has",
    "to": 228
  }, {
    "from": 228,
    "label": "has",
    "to": 224
  }, {
    "from": 396,
    "label": "has",
    "to": 229
  }, {
    "from": 396,
    "label": "has",
    "to": 230
  }, {
    "from": 396,
    "label": "has",
    "to": 231
  }, {
    "from": 396,
    "label": "has",
    "to": 232
  }, {
    "from": 376,
    "label": "has",
    "to": 397
  }, {
    "from": 397,
    "label": "has",
    "to": 235
  }, {
    "from": 397,
    "label": "has",
    "to": 236
  }, {
    "from": 397,
    "label": "has",
    "to": 237
  }, {
    "from": 397,
    "label": "has",
    "to": 238
  }, {
    "from": 397,
    "label": "has",
    "to": 239
  }, {
    "from": 397,
    "label": "has",
    "to": 240
  }, {
    "from": 376,
    "label": "has",
    "to": 398
  }, {
    "from": 398,
    "label": "has",
    "to": 243
  }, {
    "from": 398,
    "label": "has",
    "to": 37
  }, {
    "from": 398,
    "label": "has",
    "to": 244
  }, {
    "from": 398,
    "label": "has",
    "to": 56
  }, {
    "from": 398,
    "label": "has",
    "to": 245
  }, {
    "from": 398,
    "label": "has",
    "to": 246
  }, {
    "from": 398,
    "label": "has",
    "to": 247
  }, {
    "from": 398,
    "label": "has",
    "to": 248
  }, {
    "from": 398,
    "label": "has",
    "to": 38
  }, {
    "from": 398,
    "label": "has",
    "to": 249
  }, {
    "from": 398,
    "label": "has",
    "to": 61
  }, {
    "from": 398,
    "label": "has",
    "to": 250
  }, {
    "from": 398,
    "label": "has",
    "to": 251
  }, {
    "from": 398,
    "label": "has",
    "to": 252
  }, {
    "from": 376,
    "label": "has",
    "to": 399
  }, {
    "from": 399,
    "label": "has",
    "to": 255
  }, {
    "from": 399,
    "label": "has",
    "to": 256
  }, {
    "from": 399,
    "label": "has",
    "to": 257
  }, {
    "from": 399,
    "label": "has",
    "to": 258
  }, {
    "from": 399,
    "label": "has",
    "to": 259
  }, {
    "from": 399,
    "label": "has",
    "to": 260
  }, {
    "from": 399,
    "label": "has",
    "to": 261
  }, {
    "from": 399,
    "label": "has",
    "to": 262
  }, {
    "from": 399,
    "label": "has",
    "to": 263
  }, {
    "from": 399,
    "label": "has",
    "to": 264
  }, {
    "from": 399,
    "label": "has",
    "to": 265
  }, {
    "from": 399,
    "label": "has",
    "to": 266
  }, {
    "from": 399,
    "label": "has",
    "to": 267
  }, {
    "from": 399,
    "label": "has",
    "to": 268
  }, {
    "from": 399,
    "label": "has",
    "to": 269
  }, {
    "from": 399,
    "label": "has",
    "to": 270
  }, {
    "from": 399,
    "label": "has",
    "to": 271
  }, {
    "from": 399,
    "label": "has",
    "to": 272
  }, {
    "from": 399,
    "label": "has",
    "to": 273
  }, {
    "from": 399,
    "label": "has",
    "to": 274
  }, {
    "from": 376,
    "label": "has",
    "to": 400
  }, {
    "from": 400,
    "label": "has",
    "to": 280
  }, {
    "from": 280,
    "label": "has",
    "to": 277
  }, {
    "from": 400,
    "label": "has",
    "to": 281
  }, {
    "from": 400,
    "label": "has",
    "to": 282
  }, {
    "from": 400,
    "label": "has",
    "to": 283
  }, {
    "from": 400,
    "label": "has",
    "to": 284
  }, {
    "from": 400,
    "label": "has",
    "to": 285
  }, {
    "from": 400,
    "label": "has",
    "to": 286
  }, {
    "from": 400,
    "label": "has",
    "to": 287
  }, {
    "from": 400,
    "label": "has",
    "to": 288
  }, {
    "from": 400,
    "label": "has",
    "to": 289
  }, {
    "from": 400,
    "label": "has",
    "to": 290
  }, {
    "from": 400,
    "label": "has",
    "to": 291
  }, {
    "from": 400,
    "label": "has",
    "to": 292
  }, {
    "from": 400,
    "label": "has",
    "to": 293
  }, {
    "from": 400,
    "label": "has",
    "to": 294
  }, {
    "from": 400,
    "label": "has",
    "to": 295
  }, {
    "from": 400,
    "label": "has",
    "to": 296
  }, {
    "from": 400,
    "label": "has",
    "to": 297
  }, {
    "from": 376,
    "label": "has",
    "to": 401
  }, {
    "from": 401,
    "label": "has",
    "to": 280
  }, {
    "from": 280,
    "label": "has",
    "to": 277
  }, {
    "from": 401,
    "label": "has",
    "to": 301
  }, {
    "from": 401,
    "label": "has",
    "to": 302
  }, {
    "from": 401,
    "label": "has",
    "to": 303
  }, {
    "from": 401,
    "label": "has",
    "to": 304
  }, {
    "from": 401,
    "label": "has",
    "to": 305
  }, {
    "from": 401,
    "label": "has",
    "to": 306
  }, {
    "from": 401,
    "label": "has",
    "to": 307
  }, {
    "from": 376,
    "label": "has",
    "to": 402
  }, {
    "from": 402,
    "label": "has",
    "to": 310
  }, {
    "from": 402,
    "label": "has",
    "to": 311
  }, {
    "from": 402,
    "label": "has",
    "to": 312
  }, {
    "from": 402,
    "label": "has",
    "to": 313
  }, {
    "from": 402,
    "label": "has",
    "to": 314
  }, {
    "from": 402,
    "label": "has",
    "to": 315
  }, {
    "from": 402,
    "label": "has",
    "to": 316
  }, {
    "from": 402,
    "label": "has",
    "to": 317
  }, {
    "from": 402,
    "label": "has",
    "to": 318
  }, {
    "from": 402,
    "label": "has",
    "to": 319
  }, {
    "from": 402,
    "label": "has",
    "to": 320
  }, {
    "from": 376,
    "label": "has",
    "to": 403
  }, {
    "from": 403,
    "label": "has",
    "to": 280
  }, {
    "from": 280,
    "label": "has",
    "to": 277
  }, {
    "from": 403,
    "label": "has",
    "to": 301
  }, {
    "from": 403,
    "label": "has",
    "to": 302
  }, {
    "from": 403,
    "label": "has",
    "to": 303
  }, {
    "from": 403,
    "label": "has",
    "to": 324
  }, {
    "from": 403,
    "label": "has",
    "to": 304
  }, {
    "from": 403,
    "label": "has",
    "to": 305
  }, {
    "from": 403,
    "label": "has",
    "to": 325
  }, {
    "from": 376,
    "label": "has",
    "to": 404
  }, {
    "from": 404,
    "label": "has",
    "to": 334
  }, {
    "from": 334,
    "label": "has",
    "to": 328
  }, {
    "from": 404,
    "label": "has",
    "to": 335
  }, {
    "from": 335,
    "label": "has",
    "to": 330
  }, {
    "from": 404,
    "label": "has",
    "to": 336
  }, {
    "from": 336,
    "label": "has",
    "to": 332
  }, {
    "from": 404,
    "label": "has",
    "to": 337
  }, {
    "from": 404,
    "label": "has",
    "to": 338
  }, {
    "from": 404,
    "label": "has",
    "to": 339
  }, {
    "from": 404,
    "label": "has",
    "to": 340
  }, {
    "from": 404,
    "label": "has",
    "to": 341
  }, {
    "from": 376,
    "label": "has",
    "to": 405
  }, {
    "from": 405,
    "label": "has",
    "to": 350
  }, {
    "from": 350,
    "label": "has",
    "to": 344
  }, {
    "from": 405,
    "label": "has",
    "to": 351
  }, {
    "from": 351,
    "label": "has",
    "to": 346
  }, {
    "from": 405,
    "label": "has",
    "to": 352
  }, {
    "from": 352,
    "label": "has",
    "to": 348
  }, {
    "from": 405,
    "label": "has",
    "to": 353
  }, {
    "from": 405,
    "label": "has",
    "to": 354
  }, {
    "from": 405,
    "label": "has",
    "to": 355
  }, {
    "from": 405,
    "label": "has",
    "to": 356
  }, {
    "from": 405,
    "label": "has",
    "to": 357
  }, {
    "from": 376,
    "label": "has",
    "to": 406
  }, {
    "from": 406,
    "label": "has",
    "to": 366
  }, {
    "from": 366,
    "label": "has",
    "to": 360
  }, {
    "from": 406,
    "label": "has",
    "to": 367
  }, {
    "from": 367,
    "label": "has",
    "to": 362
  }, {
    "from": 406,
    "label": "has",
    "to": 368
  }, {
    "from": 368,
    "label": "has",
    "to": 364
  }, {
    "from": 406,
    "label": "has",
    "to": 369
  }, {
    "from": 406,
    "label": "has",
    "to": 370
  }, {
    "from": 406,
    "label": "has",
    "to": 371
  }, {
    "from": 406,
    "label": "has",
    "to": 372
  }, {
    "from": 406,
    "label": "has",
    "to": 373
  }, {
    "from": 406,
    "label": "has",
    "to": 374
  }, {
    "from": 376,
    "label": "has",
    "to": 407
  }, {
    "from": 408,
    "label": "calls",
    "to": 463
  }, {
    "from": 408,
    "label": "calls",
    "to": 449
  }, {
    "from": 408,
    "label": "calls",
    "to": 449
  }, {
    "from": 408,
    "label": "calls",
    "to": 447
  }, {
    "from": 408,
    "label": "calls",
    "to": 464
  }, {
    "from": 408,
    "label": "calls",
    "to": 464
  }, {
    "from": 408,
    "label": "calls",
    "to": 464
  }, {
    "from": 408,
    "label": "calls",
    "to": 464
  }, {
    "from": 408,
    "label": "calls",
    "to": 464
  }, {
    "from": 408,
    "label": "calls",
    "to": 464
  }, {
    "from": 408,
    "label": "calls",
    "to": 464
  }, {
    "from": 408,
    "label": "calls",
    "to": 464
  }, {
    "from": 408,
    "label": "calls",
    "to": 464
  }, {
    "from": 408,
    "label": "calls",
    "to": 464
  }, {
    "from": 408,
    "label": "calls",
    "to": 464
  }, {
    "from": 408,
    "label": "calls",
    "to": 415
  }, {
    "from": 408,
    "label": "calls",
    "to": 415
  }, {
    "from": 408,
    "label": "calls",
    "to": 414
  }, {
    "from": 408,
    "label": "calls",
    "to": 414
  }, {
    "from": 408,
    "label": "calls",
    "to": 467
  }, {
    "from": 408,
    "label": "calls",
    "to": 467
  }, {
    "from": 408,
    "label": "calls",
    "to": 467
  }, {
    "from": 408,
    "label": "calls",
    "to": 467
  }, {
    "from": 408,
    "label": "calls",
    "to": 467
  }, {
    "from": 408,
    "label": "calls",
    "to": 467
  }, {
    "from": 408,
    "label": "calls",
    "to": 467
  }, {
    "from": 408,
    "label": "calls",
    "to": 467
  }, {
    "from": 408,
    "label": "calls",
    "to": 467
  }, {
    "from": 408,
    "label": "calls",
    "to": 472
  }, {
    "from": 408,
    "label": "calls",
    "to": 472
  }, {
    "from": 408,
    "label": "calls",
    "to": 472
  }, {
    "from": 408,
    "label": "calls",
    "to": 472
  }, {
    "from": 408,
    "label": "calls",
    "to": 472
  }, {
    "from": 408,
    "label": "calls",
    "to": 472
  }, {
    "from": 408,
    "label": "calls",
    "to": 472
  }, {
    "from": 408,
    "label": "calls",
    "to": 472
  }, {
    "from": 408,
    "label": "calls",
    "to": 472
  }, {
    "from": 408,
    "label": "calls",
    "to": 472
  }, {
    "from": 408,
    "label": "calls",
    "to": 472
  }, {
    "from": 408,
    "label": "calls",
    "to": 472
  }, {
    "from": 408,
    "label": "calls",
    "to": 472
  }, {
    "from": 408,
    "label": "calls",
    "to": 472
  }, {
    "from": 408,
    "label": "calls",
    "to": 432
  }, {
    "from": 408,
    "label": "calls",
    "to": 432
  }, {
    "from": 408,
    "label": "calls",
    "to": 432
  }, {
    "from": 408,
    "label": "calls",
    "to": 432
  }, {
    "from": 408,
    "label": "calls",
    "to": 432
  }, {
    "from": 408,
    "label": "calls",
    "to": 432
  }, {
    "from": 408,
    "label": "calls",
    "to": 432
  }, {
    "from": 408,
    "label": "calls",
    "to": 432
  }, {
    "from": 408,
    "label": "calls",
    "to": 432
  }, {
    "from": 408,
    "label": "calls",
    "to": 432
  }, {
    "from": 408,
    "label": "calls",
    "to": 432
  }, {
    "from": 408,
    "label": "calls",
    "to": 432
  }, {
    "from": 408,
    "label": "calls",
    "to": 432
  }, {
    "from": 408,
    "label": "calls",
    "to": 432
  }, {
    "from": 408,
    "label": "calls",
    "to": 432
  }, {
    "from": 408,
    "label": "calls",
    "to": 439
  }, {
    "from": 408,
    "label": "calls",
    "to": 439
  }, {
    "from": 408,
    "label": "calls",
    "to": 468
  }, {
    "from": 408,
    "label": "calls",
    "to": 468
  }, {
    "from": 408,
    "label": "calls",
    "to": 468
  }, {
    "from": 408,
    "label": "calls",
    "to": 468
  }, {
    "from": 408,
    "label": "calls",
    "to": 468
  }, {
    "from": 408,
    "label": "calls",
    "to": 468
  }, {
    "from": 408,
    "label": "calls",
    "to": 468
  }, {
    "from": 408,
    "label": "calls",
    "to": 468
  }, {
    "from": 408,
    "label": "calls",
    "to": 468
  }, {
    "from": 408,
    "label": "calls",
    "to": 468
  }, {
    "from": 408,
    "label": "calls",
    "to": 468
  }, {
    "from": 408,
    "label": "calls",
    "to": 468
  }, {
    "from": 408,
    "label": "calls",
    "to": 468
  }, {
    "from": 408,
    "label": "calls",
    "to": 468
  }, {
    "from": 408,
    "label": "calls",
    "to": 468
  }, {
    "from": 408,
    "label": "calls",
    "to": 468
  }, {
    "from": 408,
    "label": "calls",
    "to": 468
  }, {
    "from": 408,
    "label": "calls",
    "to": 468
  }, {
    "from": 408,
    "label": "calls",
    "to": 468
  }, {
    "from": 408,
    "label": "calls",
    "to": 468
  }, {
    "from": 408,
    "label": "calls",
    "to": 468
  }, {
    "from": 408,
    "label": "calls",
    "to": 468
  }, {
    "from": 408,
    "label": "calls",
    "to": 468
  }, {
    "from": 408,
    "label": "calls",
    "to": 468
  }, {
    "from": 408,
    "label": "calls",
    "to": 468
  }, {
    "from": 408,
    "label": "calls",
    "to": 468
  }, {
    "from": 408,
    "label": "calls",
    "to": 436
  }, {
    "from": 408,
    "label": "calls",
    "to": 436
  }, {
    "from": 408,
    "label": "calls",
    "to": 422
  }, {
    "from": 408,
    "label": "calls",
    "to": 422
  }, {
    "from": 408,
    "label": "calls",
    "to": 426
  }, {
    "from": 408,
    "label": "calls",
    "to": 440
  }, {
    "from": 408,
    "label": "calls",
    "to": 440
  }, {
    "from": 408,
    "label": "calls",
    "to": 440
  }, {
    "from": 408,
    "label": "calls",
    "to": 440
  }, {
    "from": 408,
    "label": "calls",
    "to": 440
  }, {
    "from": 408,
    "label": "calls",
    "to": 440
  }, {
    "from": 408,
    "label": "calls",
    "to": 440
  }, {
    "from": 408,
    "label": "calls",
    "to": 428
  }, {
    "from": 408,
    "label": "calls",
    "to": 428
  }, {
    "from": 408,
    "label": "calls",
    "to": 451
  }, {
    "from": 408,
    "label": "calls",
    "to": 451
  }, {
    "from": 408,
    "label": "calls",
    "to": 433
  }, {
    "from": 408,
    "label": "calls",
    "to": 433
  }, {
    "from": 408,
    "label": "calls",
    "to": 433
  }, {
    "from": 408,
    "label": "calls",
    "to": 433
  }, {
    "from": 408,
    "label": "calls",
    "to": 433
  }, {
    "from": 408,
    "label": "calls",
    "to": 433
  }, {
    "from": 408,
    "label": "calls",
    "to": 433
  }, {
    "from": 408,
    "label": "calls",
    "to": 433
  }, {
    "from": 408,
    "label": "calls",
    "to": 433
  }, {
    "from": 408,
    "label": "calls",
    "to": 437
  }, {
    "from": 408,
    "label": "calls",
    "to": 437
  }, {
    "from": 408,
    "label": "calls",
    "to": 437
  }, {
    "from": 408,
    "label": "calls",
    "to": 437
  }, {
    "from": 408,
    "label": "calls",
    "to": 437
  }, {
    "from": 408,
    "label": "calls",
    "to": 437
  }, {
    "from": 408,
    "label": "calls",
    "to": 437
  }, {
    "from": 408,
    "label": "calls",
    "to": 437
  }, {
    "from": 408,
    "label": "calls",
    "to": 437
  }, {
    "from": 408,
    "label": "calls",
    "to": 437
  }, {
    "from": 408,
    "label": "calls",
    "to": 437
  }, {
    "from": 408,
    "label": "calls",
    "to": 410
  }, {
    "from": 408,
    "label": "calls",
    "to": 410
  }, {
    "from": 408,
    "label": "calls",
    "to": 410
  }, {
    "from": 408,
    "label": "calls",
    "to": 410
  }, {
    "from": 408,
    "label": "calls",
    "to": 410
  }, {
    "from": 408,
    "label": "calls",
    "to": 410
  }, {
    "from": 408,
    "label": "calls",
    "to": 410
  }, {
    "from": 408,
    "label": "calls",
    "to": 410
  }, {
    "from": 408,
    "label": "calls",
    "to": 410
  }, {
    "from": 408,
    "label": "calls",
    "to": 410
  }, {
    "from": 408,
    "label": "calls",
    "to": 410
  }, {
    "from": 408,
    "label": "calls",
    "to": 410
  }, {
    "from": 408,
    "label": "calls",
    "to": 410
  }, {
    "from": 408,
    "label": "calls",
    "to": 410
  }, {
    "from": 408,
    "label": "calls",
    "to": 410
  }, {
    "from": 408,
    "label": "calls",
    "to": 410
  }, {
    "from": 408,
    "label": "calls",
    "to": 410
  }, {
    "from": 408,
    "label": "calls",
    "to": 410
  }, {
    "from": 408,
    "label": "calls",
    "to": 410
  }, {
    "from": 408,
    "label": "calls",
    "to": 410
  }, {
    "from": 408,
    "label": "calls",
    "to": 465
  }, {
    "from": 408,
    "label": "calls",
    "to": 465
  }, {
    "from": 408,
    "label": "calls",
    "to": 465
  }, {
    "from": 408,
    "label": "calls",
    "to": 458
  }, {
    "from": 408,
    "label": "calls",
    "to": 459
  }, {
    "from": 408,
    "label": "calls",
    "to": 459
  }, {
    "from": 408,
    "label": "calls",
    "to": 459
  }, {
    "from": 408,
    "label": "calls",
    "to": 459
  }, {
    "from": 408,
    "label": "calls",
    "to": 459
  }, {
    "from": 408,
    "label": "calls",
    "to": 459
  }, {
    "from": 408,
    "label": "calls",
    "to": 459
  }, {
    "from": 408,
    "label": "calls",
    "to": 459
  }, {
    "from": 408,
    "label": "calls",
    "to": 459
  }, {
    "from": 408,
    "label": "calls",
    "to": 459
  }, {
    "from": 408,
    "label": "calls",
    "to": 459
  }, {
    "from": 408,
    "label": "calls",
    "to": 459
  }, {
    "from": 408,
    "label": "calls",
    "to": 459
  }, {
    "from": 408,
    "label": "calls",
    "to": 459
  }, {
    "from": 408,
    "label": "calls",
    "to": 459
  }, {
    "from": 408,
    "label": "calls",
    "to": 459
  }, {
    "from": 408,
    "label": "calls",
    "to": 459
  }, {
    "from": 408,
    "label": "calls",
    "to": 459
  }, {
    "from": 408,
    "label": "calls",
    "to": 459
  }, {
    "from": 408,
    "label": "calls",
    "to": 459
  }, {
    "from": 408,
    "label": "calls",
    "to": 459
  }, {
    "from": 408,
    "label": "calls",
    "to": 459
  }, {
    "from": 408,
    "label": "calls",
    "to": 459
  }, {
    "from": 408,
    "label": "calls",
    "to": 459
  }, {
    "from": 408,
    "label": "calls",
    "to": 459
  }, {
    "from": 408,
    "label": "calls",
    "to": 459
  }, {
    "from": 408,
    "label": "calls",
    "to": 459
  }, {
    "from": 408,
    "label": "calls",
    "to": 459
  }, {
    "from": 408,
    "label": "calls",
    "to": 459
  }, {
    "from": 408,
    "label": "calls",
    "to": 459
  }, {
    "from": 408,
    "label": "calls",
    "to": 417
  }, {
    "from": 408,
    "label": "calls",
    "to": 417
  }, {
    "from": 408,
    "label": "calls",
    "to": 417
  }, {
    "from": 408,
    "label": "calls",
    "to": 417
  }, {
    "from": 408,
    "label": "calls",
    "to": 417
  }, {
    "from": 408,
    "label": "calls",
    "to": 417
  }, {
    "from": 408,
    "label": "calls",
    "to": 417
  }, {
    "from": 408,
    "label": "calls",
    "to": 417
  }, {
    "from": 408,
    "label": "calls",
    "to": 409
  }, {
    "from": 408,
    "label": "calls",
    "to": 409
  }, {
    "from": 408,
    "label": "calls",
    "to": 409
  }, {
    "from": 408,
    "label": "calls",
    "to": 409
  }, {
    "from": 408,
    "label": "calls",
    "to": 409
  }, {
    "from": 408,
    "label": "calls",
    "to": 409
  }, {
    "from": 408,
    "label": "calls",
    "to": 409
  }, {
    "from": 408,
    "label": "calls",
    "to": 409
  }, {
    "from": 408,
    "label": "calls",
    "to": 409
  }, {
    "from": 408,
    "label": "calls",
    "to": 409
  }, {
    "from": 408,
    "label": "calls",
    "to": 409
  }, {
    "from": 408,
    "label": "calls",
    "to": 409
  }, {
    "from": 408,
    "label": "calls",
    "to": 409
  }, {
    "from": 408,
    "label": "calls",
    "to": 409
  }, {
    "from": 408,
    "label": "calls",
    "to": 409
  }, {
    "from": 408,
    "label": "calls",
    "to": 409
  }, {
    "from": 408,
    "label": "calls",
    "to": 409
  }, {
    "from": 408,
    "label": "calls",
    "to": 409
  }, {
    "from": 408,
    "label": "calls",
    "to": 409
  }, {
    "from": 408,
    "label": "calls",
    "to": 409
  }, {
    "from": 408,
    "label": "calls",
    "to": 409
  }, {
    "from": 408,
    "label": "calls",
    "to": 409
  }, {
    "from": 408,
    "label": "calls",
    "to": 409
  }, {
    "from": 408,
    "label": "calls",
    "to": 409
  }, {
    "from": 408,
    "label": "calls",
    "to": 409
  }, {
    "from": 408,
    "label": "calls",
    "to": 420
  }, {
    "from": 408,
    "label": "calls",
    "to": 420
  }, {
    "from": 408,
    "label": "calls",
    "to": 420
  }, {
    "from": 408,
    "label": "calls",
    "to": 420
  }, {
    "from": 408,
    "label": "calls",
    "to": 420
  }, {
    "from": 408,
    "label": "calls",
    "to": 420
  }, {
    "from": 408,
    "label": "calls",
    "to": 420
  }, {
    "from": 408,
    "label": "calls",
    "to": 470
  }, {
    "from": 408,
    "label": "calls",
    "to": 452
  }, {
    "from": 408,
    "label": "calls",
    "to": 452
  }, {
    "from": 408,
    "label": "calls",
    "to": 452
  }, {
    "from": 408,
    "label": "calls",
    "to": 452
  }, {
    "from": 408,
    "label": "calls",
    "to": 452
  }, {
    "from": 408,
    "label": "calls",
    "to": 457
  }, {
    "from": 408,
    "label": "calls",
    "to": 457
  }, {
    "from": 408,
    "label": "calls",
    "to": 457
  }, {
    "from": 408,
    "label": "calls",
    "to": 457
  }, {
    "from": 408,
    "label": "calls",
    "to": 457
  }, {
    "from": 408,
    "label": "calls",
    "to": 457
  }, {
    "from": 408,
    "label": "calls",
    "to": 457
  }, {
    "from": 408,
    "label": "calls",
    "to": 457
  }, {
    "from": 408,
    "label": "calls",
    "to": 441
  }, {
    "from": 408,
    "label": "calls",
    "to": 441
  }, {
    "from": 408,
    "label": "calls",
    "to": 411
  }, {
    "from": 408,
    "label": "calls",
    "to": 411
  }, {
    "from": 408,
    "label": "calls",
    "to": 411
  }, {
    "from": 408,
    "label": "calls",
    "to": 411
  }, {
    "from": 408,
    "label": "calls",
    "to": 411
  }, {
    "from": 408,
    "label": "calls",
    "to": 431
  }, {
    "from": 408,
    "label": "calls",
    "to": 431
  }, {
    "from": 408,
    "label": "calls",
    "to": 431
  }, {
    "from": 408,
    "label": "calls",
    "to": 431
  }, {
    "from": 408,
    "label": "calls",
    "to": 431
  }, {
    "from": 408,
    "label": "calls",
    "to": 431
  }, {
    "from": 408,
    "label": "calls",
    "to": 431
  }, {
    "from": 408,
    "label": "calls",
    "to": 431
  }, {
    "from": 408,
    "label": "calls",
    "to": 446
  }, {
    "from": 408,
    "label": "calls",
    "to": 446
  }, {
    "from": 408,
    "label": "calls",
    "to": 446
  }, {
    "from": 408,
    "label": "calls",
    "to": 446
  }, {
    "from": 408,
    "label": "calls",
    "to": 445
  }, {
    "from": 408,
    "label": "calls",
    "to": 445
  }, {
    "from": 408,
    "label": "calls",
    "to": 445
  }, {
    "from": 408,
    "label": "calls",
    "to": 448
  }, {
    "from": 408,
    "label": "calls",
    "to": 448
  }, {
    "from": 408,
    "label": "calls",
    "to": 438
  }, {
    "from": 408,
    "label": "calls",
    "to": 438
  }, {
    "from": 408,
    "label": "calls",
    "to": 438
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 460
  }, {
    "from": 408,
    "label": "calls",
    "to": 434
  }, {
    "from": 408,
    "label": "calls",
    "to": 434
  }, {
    "from": 408,
    "label": "calls",
    "to": 434
  }, {
    "from": 408,
    "label": "calls",
    "to": 416
  }, {
    "from": 408,
    "label": "calls",
    "to": 416
  }, {
    "from": 408,
    "label": "calls",
    "to": 416
  }, {
    "from": 408,
    "label": "calls",
    "to": 416
  }, {
    "from": 408,
    "label": "calls",
    "to": 443
  }, {
    "from": 408,
    "label": "calls",
    "to": 443
  }, {
    "from": 408,
    "label": "calls",
    "to": 443
  }, {
    "from": 408,
    "label": "calls",
    "to": 443
  }, {
    "from": 408,
    "label": "calls",
    "to": 443
  }, {
    "from": 408,
    "label": "calls",
    "to": 443
  }, {
    "from": 408,
    "label": "calls",
    "to": 443
  }, {
    "from": 408,
    "label": "calls",
    "to": 429
  }, {
    "from": 408,
    "label": "calls",
    "to": 450
  }, {
    "from": 408,
    "label": "calls",
    "to": 450
  }, {
    "from": 408,
    "label": "calls",
    "to": 450
  }, {
    "from": 408,
    "label": "calls",
    "to": 450
  }, {
    "from": 408,
    "label": "calls",
    "to": 450
  }, {
    "from": 408,
    "label": "calls",
    "to": 450
  }, {
    "from": 408,
    "label": "calls",
    "to": 450
  }, {
    "from": 408,
    "label": "calls",
    "to": 412
  }, {
    "from": 408,
    "label": "calls",
    "to": 427
  }, {
    "from": 408,
    "label": "calls",
    "to": 427
  }, {
    "from": 408,
    "label": "calls",
    "to": 435
  }, {
    "from": 408,
    "label": "calls",
    "to": 435
  }, {
    "from": 408,
    "label": "calls",
    "to": 413
  }, {
    "from": 408,
    "label": "calls",
    "to": 453
  }, {
    "from": 408,
    "label": "calls",
    "to": 453
  }, {
    "from": 408,
    "label": "calls",
    "to": 453
  }, {
    "from": 408,
    "label": "calls",
    "to": 453
  }, {
    "from": 408,
    "label": "calls",
    "to": 453
  }, {
    "from": 408,
    "label": "calls",
    "to": 453
  }, {
    "from": 408,
    "label": "calls",
    "to": 453
  }, {
    "from": 408,
    "label": "calls",
    "to": 423
  }, {
    "from": 408,
    "label": "calls",
    "to": 423
  }, {
    "from": 408,
    "label": "calls",
    "to": 423
  }, {
    "from": 408,
    "label": "calls",
    "to": 423
  }, {
    "from": 408,
    "label": "calls",
    "to": 423
  }, {
    "from": 408,
    "label": "calls",
    "to": 423
  }, {
    "from": 408,
    "label": "calls",
    "to": 423
  }, {
    "from": 408,
    "label": "calls",
    "to": 423
  }, {
    "from": 408,
    "label": "calls",
    "to": 423
  }, {
    "from": 408,
    "label": "calls",
    "to": 423
  }, {
    "from": 408,
    "label": "calls",
    "to": 423
  }, {
    "from": 408,
    "label": "calls",
    "to": 418
  }, {
    "from": 408,
    "label": "calls",
    "to": 418
  }, {
    "from": 408,
    "label": "calls",
    "to": 418
  }, {
    "from": 408,
    "label": "calls",
    "to": 418
  }, {
    "from": 408,
    "label": "calls",
    "to": 418
  }, {
    "from": 408,
    "label": "calls",
    "to": 425
  }, {
    "from": 408,
    "label": "calls",
    "to": 419
  }, {
    "from": 408,
    "label": "calls",
    "to": 419
  }, {
    "from": 408,
    "label": "calls",
    "to": 419
  }, {
    "from": 408,
    "label": "calls",
    "to": 419
  }, {
    "from": 408,
    "label": "calls",
    "to": 419
  }, {
    "from": 408,
    "label": "calls",
    "to": 419
  }, {
    "from": 408,
    "label": "calls",
    "to": 419
  }, {
    "from": 408,
    "label": "calls",
    "to": 419
  }, {
    "from": 408,
    "label": "calls",
    "to": 421
  }, {
    "from": 408,
    "label": "calls",
    "to": 421
  }, {
    "from": 408,
    "label": "calls",
    "to": 442
  }, {
    "from": 408,
    "label": "calls",
    "to": 442
  }, {
    "from": 408,
    "label": "calls",
    "to": 454
  }, {
    "from": 408,
    "label": "calls",
    "to": 454
  }, {
    "from": 408,
    "label": "calls",
    "to": 444
  }, {
    "from": 408,
    "label": "calls",
    "to": 444
  }, {
    "from": 408,
    "label": "calls",
    "to": 444
  }, {
    "from": 408,
    "label": "calls",
    "to": 444
  }, {
    "from": 408,
    "label": "calls",
    "to": 444
  }, {
    "from": 408,
    "label": "calls",
    "to": 444
  }, {
    "from": 408,
    "label": "calls",
    "to": 444
  }, {
    "from": 408,
    "label": "calls",
    "to": 444
  }, {
    "from": 408,
    "label": "calls",
    "to": 444
  }, {
    "from": 408,
    "label": "calls",
    "to": 444
  }, {
    "from": 408,
    "label": "calls",
    "to": 444
  }, {
    "from": 408,
    "label": "calls",
    "to": 444
  }, {
    "from": 408,
    "label": "calls",
    "to": 444
  }, {
    "from": 408,
    "label": "calls",
    "to": 444
  }, {
    "from": 408,
    "label": "calls",
    "to": 444
  }, {
    "from": 408,
    "label": "calls",
    "to": 444
  }, {
    "from": 408,
    "label": "calls",
    "to": 444
  }, {
    "from": 408,
    "label": "calls",
    "to": 444
  }, {
    "from": 408,
    "label": "calls",
    "to": 424
  }, {
    "from": 408,
    "label": "calls",
    "to": 473
  }, {
    "from": 408,
    "label": "calls",
    "to": 473
  }, {
    "from": 408,
    "label": "calls",
    "to": 455
  }, {
    "from": 408,
    "label": "calls",
    "to": 455
  }, {
    "from": 408,
    "label": "calls",
    "to": 455
  }, {
    "from": 408,
    "label": "calls",
    "to": 455
  }, {
    "from": 408,
    "label": "calls",
    "to": 455
  }, {
    "from": 408,
    "label": "calls",
    "to": 455
  }, {
    "from": 408,
    "label": "calls",
    "to": 455
  }, {
    "from": 408,
    "label": "calls",
    "to": 471
  }, {
    "from": 408,
    "label": "calls",
    "to": 461
  }, {
    "from": 408,
    "label": "calls",
    "to": 430
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 469
  }, {
    "from": 408,
    "label": "calls",
    "to": 466
  }, {
    "from": 408,
    "label": "calls",
    "to": 462
  }, {
    "from": 408,
    "label": "calls",
    "to": 462
  }, {
    "from": 408,
    "label": "calls",
    "to": 462
  }, {
    "from": 408,
    "label": "calls",
    "to": 456
  }, {
    "from": 408,
    "label": "calls",
    "to": 456
  }, {
    "from": 1,
    "label": "contains",
    "to": 408
  }, {
    "from": 408,
    "label": "declares",
    "to": 3
  }, {
    "from": 408,
    "label": "declares",
    "to": 4
  }, {
    "from": 408,
    "label": "declares",
    "to": 5
  }, {
    "from": 408,
    "label": "declares",
    "to": 14
  }, {
    "from": 408,
    "label": "declares",
    "to": 15
  }, {
    "from": 408,
    "label": "declares",
    "to": 24
  }, {
    "from": 408,
    "label": "declares",
    "to": 25
  }, {
    "from": 408,
    "label": "declares",
    "to": 34
  }, {
    "from": 408,
    "label": "declares",
    "to": 35
  }, {
    "from": 408,
    "label": "declares",
    "to": 44
  }, {
    "from": 408,
    "label": "declares",
    "to": 45
  }, {
    "from": 408,
    "label": "declares",
    "to": 54
  }, {
    "from": 408,
    "label": "declares",
    "to": 55
  }, {
    "from": 408,
    "label": "declares",
    "to": 64
  }, {
    "from": 408,
    "label": "declares",
    "to": 65
  }, {
    "from": 408,
    "label": "declares",
    "to": 74
  }, {
    "from": 408,
    "label": "declares",
    "to": 75
  }, {
    "from": 408,
    "label": "declares",
    "to": 84
  }, {
    "from": 408,
    "label": "declares",
    "to": 85
  }, {
    "from": 408,
    "label": "declares",
    "to": 94
  }, {
    "from": 408,
    "label": "declares",
    "to": 95
  }, {
    "from": 408,
    "label": "declares",
    "to": 104
  }, {
    "from": 408,
    "label": "declares",
    "to": 105
  }, {
    "from": 408,
    "label": "declares",
    "to": 114
  }, {
    "from": 408,
    "label": "declares",
    "to": 115
  }, {
    "from": 408,
    "label": "declares",
    "to": 125
  }, {
    "from": 408,
    "label": "declares",
    "to": 126
  }, {
    "from": 408,
    "label": "declares",
    "to": 127
  }, {
    "from": 408,
    "label": "declares",
    "to": 138
  }, {
    "from": 408,
    "label": "declares",
    "to": 144
  }, {
    "from": 408,
    "label": "declares",
    "to": 146
  }, {
    "from": 408,
    "label": "declares",
    "to": 152
  }, {
    "from": 408,
    "label": "declares",
    "to": 157
  }, {
    "from": 408,
    "label": "declares",
    "to": 159
  }, {
    "from": 408,
    "label": "declares",
    "to": 165
  }, {
    "from": 408,
    "label": "declares",
    "to": 167
  }, {
    "from": 408,
    "label": "declares",
    "to": 169
  }, {
    "from": 408,
    "label": "declares",
    "to": 171
  }, {
    "from": 408,
    "label": "declares",
    "to": 173
  }, {
    "from": 408,
    "label": "declares",
    "to": 175
  }, {
    "from": 408,
    "label": "declares",
    "to": 177
  }, {
    "from": 408,
    "label": "declares",
    "to": 178
  }, {
    "from": 408,
    "label": "declares",
    "to": 201
  }, {
    "from": 408,
    "label": "declares",
    "to": 203
  }, {
    "from": 408,
    "label": "declares",
    "to": 205
  }, {
    "from": 408,
    "label": "declares",
    "to": 207
  }, {
    "from": 408,
    "label": "declares",
    "to": 219
  }, {
    "from": 408,
    "label": "declares",
    "to": 221
  }, {
    "from": 408,
    "label": "declares",
    "to": 223
  }, {
    "from": 408,
    "label": "declares",
    "to": 225
  }, {
    "from": 408,
    "label": "declares",
    "to": 234
  }, {
    "from": 408,
    "label": "declares",
    "to": 242
  }, {
    "from": 408,
    "label": "declares",
    "to": 254
  }, {
    "from": 408,
    "label": "declares",
    "to": 276
  }, {
    "from": 408,
    "label": "declares",
    "to": 278
  }, {
    "from": 408,
    "label": "declares",
    "to": 279
  }, {
    "from": 408,
    "label": "declares",
    "to": 299
  }, {
    "from": 408,
    "label": "declares",
    "to": 300
  }, {
    "from": 408,
    "label": "declares",
    "to": 309
  }, {
    "from": 408,
    "label": "declares",
    "to": 322
  }, {
    "from": 408,
    "label": "declares",
    "to": 323
  }, {
    "from": 408,
    "label": "declares",
    "to": 327
  }, {
    "from": 408,
    "label": "declares",
    "to": 329
  }, {
    "from": 408,
    "label": "declares",
    "to": 331
  }, {
    "from": 408,
    "label": "declares",
    "to": 333
  }, {
    "from": 408,
    "label": "declares",
    "to": 343
  }, {
    "from": 408,
    "label": "declares",
    "to": 345
  }, {
    "from": 408,
    "label": "declares",
    "to": 347
  }, {
    "from": 408,
    "label": "declares",
    "to": 349
  }, {
    "from": 408,
    "label": "declares",
    "to": 359
  }, {
    "from": 408,
    "label": "declares",
    "to": 361
  }, {
    "from": 408,
    "label": "declares",
    "to": 363
  }, {
    "from": 408,
    "label": "declares",
    "to": 365
  }, {
    "from": 408,
    "label": "declares",
    "to": 376
  }, {
    "from": 1,
    "label": "contains",
    "to": 474
  }, {
    "from": 1,
    "label": "contains",
    "to": 475
  }, {
    "from": 475,
    "label": "initializes",
    "to": 476
  }, {
    "from": 476,
    "label": "requires",
    "to": 2
  }, {
    "from": 12,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 12,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 12,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 12,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 12,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 12,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 12,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 12,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 12,
    "label": "hasArgument",
    "to": 74
  }, {
    "from": 12,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 12,
    "label": "hasArgument",
    "to": 94
  }, {
    "from": 12,
    "label": "hasArgument",
    "to": 104
  }, {
    "from": 12,
    "label": "hasArgument",
    "to": 114
  }, {
    "from": 12,
    "label": "hasArgument",
    "to": 125
  }, {
    "from": 12,
    "label": "hasArgument",
    "to": 126
  }, {
    "from": 12,
    "label": "hasArgument",
    "to": 177
  }, {
    "from": 12,
    "label": "hasArgument",
    "to": 278
  }, {
    "from": 22,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 22,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 22,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 22,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 22,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 22,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 22,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 22,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 22,
    "label": "hasArgument",
    "to": 74
  }, {
    "from": 22,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 22,
    "label": "hasArgument",
    "to": 94
  }, {
    "from": 22,
    "label": "hasArgument",
    "to": 104
  }, {
    "from": 22,
    "label": "hasArgument",
    "to": 114
  }, {
    "from": 22,
    "label": "hasArgument",
    "to": 125
  }, {
    "from": 22,
    "label": "hasArgument",
    "to": 126
  }, {
    "from": 22,
    "label": "hasArgument",
    "to": 177
  }, {
    "from": 22,
    "label": "hasArgument",
    "to": 278
  }, {
    "from": 32,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 32,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 32,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 32,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 32,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 32,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 32,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 32,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 32,
    "label": "hasArgument",
    "to": 74
  }, {
    "from": 32,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 32,
    "label": "hasArgument",
    "to": 94
  }, {
    "from": 32,
    "label": "hasArgument",
    "to": 104
  }, {
    "from": 32,
    "label": "hasArgument",
    "to": 114
  }, {
    "from": 32,
    "label": "hasArgument",
    "to": 125
  }, {
    "from": 32,
    "label": "hasArgument",
    "to": 126
  }, {
    "from": 32,
    "label": "hasArgument",
    "to": 177
  }, {
    "from": 32,
    "label": "hasArgument",
    "to": 278
  }, {
    "from": 42,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 42,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 42,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 42,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 42,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 42,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 42,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 42,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 42,
    "label": "hasArgument",
    "to": 74
  }, {
    "from": 42,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 42,
    "label": "hasArgument",
    "to": 94
  }, {
    "from": 42,
    "label": "hasArgument",
    "to": 104
  }, {
    "from": 42,
    "label": "hasArgument",
    "to": 114
  }, {
    "from": 42,
    "label": "hasArgument",
    "to": 125
  }, {
    "from": 42,
    "label": "hasArgument",
    "to": 126
  }, {
    "from": 42,
    "label": "hasArgument",
    "to": 177
  }, {
    "from": 42,
    "label": "hasArgument",
    "to": 278
  }, {
    "from": 52,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 52,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 52,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 52,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 52,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 52,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 52,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 52,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 52,
    "label": "hasArgument",
    "to": 74
  }, {
    "from": 52,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 52,
    "label": "hasArgument",
    "to": 94
  }, {
    "from": 52,
    "label": "hasArgument",
    "to": 104
  }, {
    "from": 52,
    "label": "hasArgument",
    "to": 114
  }, {
    "from": 52,
    "label": "hasArgument",
    "to": 125
  }, {
    "from": 52,
    "label": "hasArgument",
    "to": 126
  }, {
    "from": 52,
    "label": "hasArgument",
    "to": 177
  }, {
    "from": 52,
    "label": "hasArgument",
    "to": 278
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 74
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 94
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 104
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 114
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 125
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 126
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 177
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 278
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 74
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 94
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 104
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 114
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 125
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 126
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 177
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 278
  }, {
    "from": 82,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 82,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 82,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 82,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 82,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 82,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 82,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 82,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 82,
    "label": "hasArgument",
    "to": 74
  }, {
    "from": 82,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 82,
    "label": "hasArgument",
    "to": 94
  }, {
    "from": 82,
    "label": "hasArgument",
    "to": 104
  }, {
    "from": 82,
    "label": "hasArgument",
    "to": 114
  }, {
    "from": 82,
    "label": "hasArgument",
    "to": 125
  }, {
    "from": 82,
    "label": "hasArgument",
    "to": 126
  }, {
    "from": 82,
    "label": "hasArgument",
    "to": 177
  }, {
    "from": 82,
    "label": "hasArgument",
    "to": 278
  }, {
    "from": 92,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 92,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 92,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 92,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 92,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 92,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 92,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 92,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 92,
    "label": "hasArgument",
    "to": 74
  }, {
    "from": 92,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 92,
    "label": "hasArgument",
    "to": 94
  }, {
    "from": 92,
    "label": "hasArgument",
    "to": 104
  }, {
    "from": 92,
    "label": "hasArgument",
    "to": 114
  }, {
    "from": 92,
    "label": "hasArgument",
    "to": 125
  }, {
    "from": 92,
    "label": "hasArgument",
    "to": 126
  }, {
    "from": 92,
    "label": "hasArgument",
    "to": 177
  }, {
    "from": 92,
    "label": "hasArgument",
    "to": 278
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 74
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 94
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 104
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 114
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 125
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 126
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 177
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 278
  }, {
    "from": 112,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 112,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 112,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 112,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 112,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 112,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 112,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 112,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 112,
    "label": "hasArgument",
    "to": 74
  }, {
    "from": 112,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 112,
    "label": "hasArgument",
    "to": 94
  }, {
    "from": 112,
    "label": "hasArgument",
    "to": 104
  }, {
    "from": 112,
    "label": "hasArgument",
    "to": 114
  }, {
    "from": 112,
    "label": "hasArgument",
    "to": 125
  }, {
    "from": 112,
    "label": "hasArgument",
    "to": 126
  }, {
    "from": 112,
    "label": "hasArgument",
    "to": 177
  }, {
    "from": 112,
    "label": "hasArgument",
    "to": 278
  }, {
    "from": 123,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 123,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 123,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 123,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 123,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 123,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 123,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 123,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 123,
    "label": "hasArgument",
    "to": 74
  }, {
    "from": 123,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 123,
    "label": "hasArgument",
    "to": 94
  }, {
    "from": 123,
    "label": "hasArgument",
    "to": 104
  }, {
    "from": 123,
    "label": "hasArgument",
    "to": 114
  }, {
    "from": 123,
    "label": "hasArgument",
    "to": 125
  }, {
    "from": 123,
    "label": "hasArgument",
    "to": 126
  }, {
    "from": 123,
    "label": "hasArgument",
    "to": 177
  }, {
    "from": 123,
    "label": "hasArgument",
    "to": 278
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 74
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 94
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 104
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 114
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 125
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 126
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 177
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 278
  }, {
    "from": 147,
    "label": "hasArgument",
    "to": 144
  }, {
    "from": 160,
    "label": "hasArgument",
    "to": 157
  }, {
    "from": 182,
    "label": "hasArgument",
    "to": 165
  }, {
    "from": 183,
    "label": "hasArgument",
    "to": 167
  }, {
    "from": 184,
    "label": "hasArgument",
    "to": 169
  }, {
    "from": 185,
    "label": "hasArgument",
    "to": 171
  }, {
    "from": 186,
    "label": "hasArgument",
    "to": 173
  }, {
    "from": 187,
    "label": "hasArgument",
    "to": 175
  }, {
    "from": 199,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 199,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 199,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 199,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 199,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 199,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 199,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 199,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 199,
    "label": "hasArgument",
    "to": 74
  }, {
    "from": 199,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 199,
    "label": "hasArgument",
    "to": 94
  }, {
    "from": 199,
    "label": "hasArgument",
    "to": 104
  }, {
    "from": 199,
    "label": "hasArgument",
    "to": 114
  }, {
    "from": 199,
    "label": "hasArgument",
    "to": 125
  }, {
    "from": 199,
    "label": "hasArgument",
    "to": 126
  }, {
    "from": 199,
    "label": "hasArgument",
    "to": 177
  }, {
    "from": 199,
    "label": "hasArgument",
    "to": 278
  }, {
    "from": 208,
    "label": "hasArgument",
    "to": 201
  }, {
    "from": 209,
    "label": "hasArgument",
    "to": 203
  }, {
    "from": 210,
    "label": "hasArgument",
    "to": 205
  }, {
    "from": 226,
    "label": "hasArgument",
    "to": 219
  }, {
    "from": 227,
    "label": "hasArgument",
    "to": 221
  }, {
    "from": 228,
    "label": "hasArgument",
    "to": 223
  }, {
    "from": 284,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 284,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 284,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 284,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 284,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 284,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 284,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 284,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 284,
    "label": "hasArgument",
    "to": 74
  }, {
    "from": 284,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 284,
    "label": "hasArgument",
    "to": 94
  }, {
    "from": 284,
    "label": "hasArgument",
    "to": 104
  }, {
    "from": 284,
    "label": "hasArgument",
    "to": 114
  }, {
    "from": 284,
    "label": "hasArgument",
    "to": 125
  }, {
    "from": 284,
    "label": "hasArgument",
    "to": 126
  }, {
    "from": 284,
    "label": "hasArgument",
    "to": 177
  }, {
    "from": 284,
    "label": "hasArgument",
    "to": 278
  }, {
    "from": 334,
    "label": "hasArgument",
    "to": 327
  }, {
    "from": 335,
    "label": "hasArgument",
    "to": 329
  }, {
    "from": 336,
    "label": "hasArgument",
    "to": 331
  }, {
    "from": 350,
    "label": "hasArgument",
    "to": 343
  }, {
    "from": 351,
    "label": "hasArgument",
    "to": 345
  }, {
    "from": 352,
    "label": "hasArgument",
    "to": 347
  }, {
    "from": 366,
    "label": "hasArgument",
    "to": 359
  }, {
    "from": 367,
    "label": "hasArgument",
    "to": 361
  }, {
    "from": 368,
    "label": "hasArgument",
    "to": 363
  }, {
    "from": 377,
    "label": "hasArgument",
    "to": 5
  }, {
    "from": 377,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 377,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 377,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 377,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 377,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 377,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 377,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 377,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 377,
    "label": "hasArgument",
    "to": 74
  }, {
    "from": 377,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 377,
    "label": "hasArgument",
    "to": 94
  }, {
    "from": 377,
    "label": "hasArgument",
    "to": 104
  }, {
    "from": 377,
    "label": "hasArgument",
    "to": 114
  }, {
    "from": 377,
    "label": "hasArgument",
    "to": 125
  }, {
    "from": 377,
    "label": "hasArgument",
    "to": 126
  }, {
    "from": 377,
    "label": "hasArgument",
    "to": 177
  }, {
    "from": 377,
    "label": "hasArgument",
    "to": 278
  }, {
    "from": 378,
    "label": "hasArgument",
    "to": 15
  }, {
    "from": 378,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 378,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 378,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 378,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 378,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 378,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 378,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 378,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 378,
    "label": "hasArgument",
    "to": 74
  }, {
    "from": 378,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 378,
    "label": "hasArgument",
    "to": 94
  }, {
    "from": 378,
    "label": "hasArgument",
    "to": 104
  }, {
    "from": 378,
    "label": "hasArgument",
    "to": 114
  }, {
    "from": 378,
    "label": "hasArgument",
    "to": 125
  }, {
    "from": 378,
    "label": "hasArgument",
    "to": 126
  }, {
    "from": 378,
    "label": "hasArgument",
    "to": 177
  }, {
    "from": 378,
    "label": "hasArgument",
    "to": 278
  }, {
    "from": 379,
    "label": "hasArgument",
    "to": 25
  }, {
    "from": 379,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 379,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 379,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 379,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 379,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 379,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 379,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 379,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 379,
    "label": "hasArgument",
    "to": 74
  }, {
    "from": 379,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 379,
    "label": "hasArgument",
    "to": 94
  }, {
    "from": 379,
    "label": "hasArgument",
    "to": 104
  }, {
    "from": 379,
    "label": "hasArgument",
    "to": 114
  }, {
    "from": 379,
    "label": "hasArgument",
    "to": 125
  }, {
    "from": 379,
    "label": "hasArgument",
    "to": 126
  }, {
    "from": 379,
    "label": "hasArgument",
    "to": 177
  }, {
    "from": 379,
    "label": "hasArgument",
    "to": 278
  }, {
    "from": 380,
    "label": "hasArgument",
    "to": 35
  }, {
    "from": 380,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 380,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 380,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 380,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 380,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 380,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 380,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 380,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 380,
    "label": "hasArgument",
    "to": 74
  }, {
    "from": 380,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 380,
    "label": "hasArgument",
    "to": 94
  }, {
    "from": 380,
    "label": "hasArgument",
    "to": 104
  }, {
    "from": 380,
    "label": "hasArgument",
    "to": 114
  }, {
    "from": 380,
    "label": "hasArgument",
    "to": 125
  }, {
    "from": 380,
    "label": "hasArgument",
    "to": 126
  }, {
    "from": 380,
    "label": "hasArgument",
    "to": 177
  }, {
    "from": 380,
    "label": "hasArgument",
    "to": 278
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 45
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 74
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 94
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 104
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 114
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 125
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 126
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 177
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 278
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 55
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 74
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 94
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 104
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 114
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 125
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 126
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 177
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 278
  }, {
    "from": 383,
    "label": "hasArgument",
    "to": 65
  }, {
    "from": 383,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 383,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 383,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 383,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 383,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 383,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 383,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 383,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 383,
    "label": "hasArgument",
    "to": 74
  }, {
    "from": 383,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 383,
    "label": "hasArgument",
    "to": 94
  }, {
    "from": 383,
    "label": "hasArgument",
    "to": 104
  }, {
    "from": 383,
    "label": "hasArgument",
    "to": 114
  }, {
    "from": 383,
    "label": "hasArgument",
    "to": 125
  }, {
    "from": 383,
    "label": "hasArgument",
    "to": 126
  }, {
    "from": 383,
    "label": "hasArgument",
    "to": 177
  }, {
    "from": 383,
    "label": "hasArgument",
    "to": 278
  }, {
    "from": 384,
    "label": "hasArgument",
    "to": 75
  }, {
    "from": 384,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 384,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 384,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 384,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 384,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 384,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 384,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 384,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 384,
    "label": "hasArgument",
    "to": 74
  }, {
    "from": 384,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 384,
    "label": "hasArgument",
    "to": 94
  }, {
    "from": 384,
    "label": "hasArgument",
    "to": 104
  }, {
    "from": 384,
    "label": "hasArgument",
    "to": 114
  }, {
    "from": 384,
    "label": "hasArgument",
    "to": 125
  }, {
    "from": 384,
    "label": "hasArgument",
    "to": 126
  }, {
    "from": 384,
    "label": "hasArgument",
    "to": 177
  }, {
    "from": 384,
    "label": "hasArgument",
    "to": 278
  }, {
    "from": 385,
    "label": "hasArgument",
    "to": 85
  }, {
    "from": 385,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 385,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 385,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 385,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 385,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 385,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 385,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 385,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 385,
    "label": "hasArgument",
    "to": 74
  }, {
    "from": 385,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 385,
    "label": "hasArgument",
    "to": 94
  }, {
    "from": 385,
    "label": "hasArgument",
    "to": 104
  }, {
    "from": 385,
    "label": "hasArgument",
    "to": 114
  }, {
    "from": 385,
    "label": "hasArgument",
    "to": 125
  }, {
    "from": 385,
    "label": "hasArgument",
    "to": 126
  }, {
    "from": 385,
    "label": "hasArgument",
    "to": 177
  }, {
    "from": 385,
    "label": "hasArgument",
    "to": 278
  }, {
    "from": 386,
    "label": "hasArgument",
    "to": 95
  }, {
    "from": 386,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 386,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 386,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 386,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 386,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 386,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 386,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 386,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 386,
    "label": "hasArgument",
    "to": 74
  }, {
    "from": 386,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 386,
    "label": "hasArgument",
    "to": 94
  }, {
    "from": 386,
    "label": "hasArgument",
    "to": 104
  }, {
    "from": 386,
    "label": "hasArgument",
    "to": 114
  }, {
    "from": 386,
    "label": "hasArgument",
    "to": 125
  }, {
    "from": 386,
    "label": "hasArgument",
    "to": 126
  }, {
    "from": 386,
    "label": "hasArgument",
    "to": 177
  }, {
    "from": 386,
    "label": "hasArgument",
    "to": 278
  }, {
    "from": 387,
    "label": "hasArgument",
    "to": 105
  }, {
    "from": 387,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 387,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 387,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 387,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 387,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 387,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 387,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 387,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 387,
    "label": "hasArgument",
    "to": 74
  }, {
    "from": 387,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 387,
    "label": "hasArgument",
    "to": 94
  }, {
    "from": 387,
    "label": "hasArgument",
    "to": 104
  }, {
    "from": 387,
    "label": "hasArgument",
    "to": 114
  }, {
    "from": 387,
    "label": "hasArgument",
    "to": 125
  }, {
    "from": 387,
    "label": "hasArgument",
    "to": 126
  }, {
    "from": 387,
    "label": "hasArgument",
    "to": 177
  }, {
    "from": 387,
    "label": "hasArgument",
    "to": 278
  }, {
    "from": 388,
    "label": "hasArgument",
    "to": 115
  }, {
    "from": 388,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 388,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 388,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 388,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 388,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 388,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 388,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 388,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 388,
    "label": "hasArgument",
    "to": 74
  }, {
    "from": 388,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 388,
    "label": "hasArgument",
    "to": 94
  }, {
    "from": 388,
    "label": "hasArgument",
    "to": 104
  }, {
    "from": 388,
    "label": "hasArgument",
    "to": 114
  }, {
    "from": 388,
    "label": "hasArgument",
    "to": 125
  }, {
    "from": 388,
    "label": "hasArgument",
    "to": 126
  }, {
    "from": 388,
    "label": "hasArgument",
    "to": 177
  }, {
    "from": 388,
    "label": "hasArgument",
    "to": 278
  }, {
    "from": 389,
    "label": "hasArgument",
    "to": 127
  }, {
    "from": 389,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 389,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 389,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 389,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 389,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 389,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 389,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 389,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 389,
    "label": "hasArgument",
    "to": 74
  }, {
    "from": 389,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 389,
    "label": "hasArgument",
    "to": 94
  }, {
    "from": 389,
    "label": "hasArgument",
    "to": 104
  }, {
    "from": 389,
    "label": "hasArgument",
    "to": 114
  }, {
    "from": 389,
    "label": "hasArgument",
    "to": 125
  }, {
    "from": 389,
    "label": "hasArgument",
    "to": 126
  }, {
    "from": 389,
    "label": "hasArgument",
    "to": 177
  }, {
    "from": 389,
    "label": "hasArgument",
    "to": 278
  }, {
    "from": 390,
    "label": "hasArgument",
    "to": 138
  }, {
    "from": 391,
    "label": "hasArgument",
    "to": 144
  }, {
    "from": 391,
    "label": "hasArgument",
    "to": 146
  }, {
    "from": 392,
    "label": "hasArgument",
    "to": 152
  }, {
    "from": 393,
    "label": "hasArgument",
    "to": 157
  }, {
    "from": 393,
    "label": "hasArgument",
    "to": 159
  }, {
    "from": 394,
    "label": "hasArgument",
    "to": 165
  }, {
    "from": 394,
    "label": "hasArgument",
    "to": 167
  }, {
    "from": 394,
    "label": "hasArgument",
    "to": 169
  }, {
    "from": 394,
    "label": "hasArgument",
    "to": 171
  }, {
    "from": 394,
    "label": "hasArgument",
    "to": 173
  }, {
    "from": 394,
    "label": "hasArgument",
    "to": 175
  }, {
    "from": 394,
    "label": "hasArgument",
    "to": 178
  }, {
    "from": 394,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 394,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 394,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 394,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 394,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 394,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 394,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 394,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 394,
    "label": "hasArgument",
    "to": 74
  }, {
    "from": 394,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 394,
    "label": "hasArgument",
    "to": 94
  }, {
    "from": 394,
    "label": "hasArgument",
    "to": 104
  }, {
    "from": 394,
    "label": "hasArgument",
    "to": 114
  }, {
    "from": 394,
    "label": "hasArgument",
    "to": 125
  }, {
    "from": 394,
    "label": "hasArgument",
    "to": 126
  }, {
    "from": 394,
    "label": "hasArgument",
    "to": 177
  }, {
    "from": 394,
    "label": "hasArgument",
    "to": 278
  }, {
    "from": 395,
    "label": "hasArgument",
    "to": 201
  }, {
    "from": 395,
    "label": "hasArgument",
    "to": 203
  }, {
    "from": 395,
    "label": "hasArgument",
    "to": 205
  }, {
    "from": 395,
    "label": "hasArgument",
    "to": 207
  }, {
    "from": 396,
    "label": "hasArgument",
    "to": 219
  }, {
    "from": 396,
    "label": "hasArgument",
    "to": 221
  }, {
    "from": 396,
    "label": "hasArgument",
    "to": 223
  }, {
    "from": 396,
    "label": "hasArgument",
    "to": 225
  }, {
    "from": 397,
    "label": "hasArgument",
    "to": 234
  }, {
    "from": 398,
    "label": "hasArgument",
    "to": 242
  }, {
    "from": 399,
    "label": "hasArgument",
    "to": 254
  }, {
    "from": 400,
    "label": "hasArgument",
    "to": 276
  }, {
    "from": 400,
    "label": "hasArgument",
    "to": 279
  }, {
    "from": 400,
    "label": "hasArgument",
    "to": 299
  }, {
    "from": 400,
    "label": "hasArgument",
    "to": 322
  }, {
    "from": 400,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 400,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 400,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 400,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 400,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 400,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 400,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 400,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 400,
    "label": "hasArgument",
    "to": 74
  }, {
    "from": 400,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 400,
    "label": "hasArgument",
    "to": 94
  }, {
    "from": 400,
    "label": "hasArgument",
    "to": 104
  }, {
    "from": 400,
    "label": "hasArgument",
    "to": 114
  }, {
    "from": 400,
    "label": "hasArgument",
    "to": 125
  }, {
    "from": 400,
    "label": "hasArgument",
    "to": 126
  }, {
    "from": 400,
    "label": "hasArgument",
    "to": 177
  }, {
    "from": 400,
    "label": "hasArgument",
    "to": 278
  }, {
    "from": 401,
    "label": "hasArgument",
    "to": 276
  }, {
    "from": 401,
    "label": "hasArgument",
    "to": 299
  }, {
    "from": 401,
    "label": "hasArgument",
    "to": 300
  }, {
    "from": 401,
    "label": "hasArgument",
    "to": 322
  }, {
    "from": 402,
    "label": "hasArgument",
    "to": 309
  }, {
    "from": 403,
    "label": "hasArgument",
    "to": 276
  }, {
    "from": 403,
    "label": "hasArgument",
    "to": 299
  }, {
    "from": 403,
    "label": "hasArgument",
    "to": 322
  }, {
    "from": 403,
    "label": "hasArgument",
    "to": 323
  }, {
    "from": 404,
    "label": "hasArgument",
    "to": 327
  }, {
    "from": 404,
    "label": "hasArgument",
    "to": 329
  }, {
    "from": 404,
    "label": "hasArgument",
    "to": 331
  }, {
    "from": 404,
    "label": "hasArgument",
    "to": 333
  }, {
    "from": 405,
    "label": "hasArgument",
    "to": 343
  }, {
    "from": 405,
    "label": "hasArgument",
    "to": 345
  }, {
    "from": 405,
    "label": "hasArgument",
    "to": 347
  }, {
    "from": 405,
    "label": "hasArgument",
    "to": 349
  }, {
    "from": 406,
    "label": "hasArgument",
    "to": 359
  }, {
    "from": 406,
    "label": "hasArgument",
    "to": 361
  }, {
    "from": 406,
    "label": "hasArgument",
    "to": 363
  }, {
    "from": 406,
    "label": "hasArgument",
    "to": 365
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "matchers_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "match",
    "type": "module"
  }, {
    "id": 3,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 4,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 5,
    "text": "function()\r\n    assert.is_true(match._(nil))\r\n    assert.is_true(match._(true))\r\n    assert.is_true(match._(false))\r\n    assert.is_true(match._(123))\r\n    assert.is_true(match._(\"\"))\r\n    assert.is_true(match._({}))\r\n    assert.is_true(match._(function() end))\r\n  end",
    "type": "function"
  }, {
    "id": 6,
    "text": "assert.is_true(match._(nil))",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "assert.is_true(match._(true))",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "assert.is_true(match._(false))",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "assert.is_true(match._(123))",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "assert.is_true(match._(\"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "assert.is_true(match._({}))",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "assert.is_true(match._(function() end))",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 15,
    "text": "function()\r\n    assert.is_false(match.truthy()(nil))\r\n    assert.is_true(match.truthy()(true))\r\n    assert.is_false(match.truthy()(false))\r\n    assert.is_true(match.truthy()(123))\r\n    assert.is_true(match.truthy()(\"\"))\r\n    assert.is_true(match.truthy()({}))\r\n    assert.is_true(match.truthy()(function() end))\r\n  end",
    "type": "function"
  }, {
    "id": 16,
    "text": "assert.is_false(match.truthy()(nil))",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "assert.is_true(match.truthy()(true))",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "assert.is_false(match.truthy()(false))",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "assert.is_true(match.truthy()(123))",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "assert.is_true(match.truthy()(\"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "assert.is_true(match.truthy()({}))",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "assert.is_true(match.truthy()(function() end))",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 25,
    "text": "function()\r\n    assert.is_true(match.falsy()(nil))\r\n    assert.is_false(match.falsy()(true))\r\n    assert.is_true(match.falsy()(false))\r\n    assert.is_false(match.falsy()(123))\r\n    assert.is_false(match.falsy()(\"\"))\r\n    assert.is_false(match.falsy()({}))\r\n    assert.is_false(match.falsy()(function() end))\r\n  end",
    "type": "function"
  }, {
    "id": 26,
    "text": "assert.is_true(match.falsy()(nil))",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "assert.is_false(match.falsy()(true))",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "assert.is_true(match.falsy()(false))",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "assert.is_false(match.falsy()(123))",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "assert.is_false(match.falsy()(\"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "assert.is_false(match.falsy()({}))",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "assert.is_false(match.falsy()(function() end))",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 35,
    "text": "function()\r\n    assert.is_false(match.is_true()(nil))\r\n    assert.is_true(match.is_true()(true))\r\n    assert.is_false(match.is_true()(false))\r\n    assert.is_false(match.is_true()(123))\r\n    assert.is_false(match.is_true()(\"\"))\r\n    assert.is_false(match.is_true()({}))\r\n    assert.is_false(match.is_true()(function() end))\r\n  end",
    "type": "function"
  }, {
    "id": 36,
    "text": "assert.is_false(match.is_true()(nil))",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "assert.is_true(match.is_true()(true))",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "assert.is_false(match.is_true()(false))",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "assert.is_false(match.is_true()(123))",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "assert.is_false(match.is_true()(\"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "assert.is_false(match.is_true()({}))",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "assert.is_false(match.is_true()(function() end))",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 45,
    "text": "function()\r\n    assert.is_false(match.is_false()(nil))\r\n    assert.is_false(match.is_false()(true))\r\n    assert.is_true(match.is_false()(false))\r\n    assert.is_false(match.is_false()(123))\r\n    assert.is_false(match.is_false()(\"\"))\r\n    assert.is_false(match.is_false()({}))\r\n    assert.is_false(match.is_false()(function() end))\r\n  end",
    "type": "function"
  }, {
    "id": 46,
    "text": "assert.is_false(match.is_false()(nil))",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "assert.is_false(match.is_false()(true))",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "assert.is_true(match.is_false()(false))",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "assert.is_false(match.is_false()(123))",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "assert.is_false(match.is_false()(\"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "assert.is_false(match.is_false()({}))",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "assert.is_false(match.is_false()(function() end))",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 55,
    "text": "function()\r\n    assert.is_true(match.is_nil()(nil))\r\n    assert.is_false(match.is_nil()(true))\r\n    assert.is_false(match.is_nil()(false))\r\n    assert.is_false(match.is_nil()(123))\r\n    assert.is_false(match.is_nil()(\"\"))\r\n    assert.is_false(match.is_nil()({}))\r\n    assert.is_false(match.is_nil()(function() end))\r\n  end",
    "type": "function"
  }, {
    "id": 56,
    "text": "assert.is_true(match.is_nil()(nil))",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "assert.is_false(match.is_nil()(true))",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "assert.is_false(match.is_nil()(false))",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "assert.is_false(match.is_nil()(123))",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "assert.is_false(match.is_nil()(\"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "assert.is_false(match.is_nil()({}))",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "assert.is_false(match.is_nil()(function() end))",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 65,
    "text": "function()\r\n    assert.is_false(match.is_boolean()(nil))\r\n    assert.is_true(match.is_boolean()(true))\r\n    assert.is_true(match.is_boolean()(false))\r\n    assert.is_false(match.is_boolean()(123))\r\n    assert.is_false(match.is_boolean()(\"\"))\r\n    assert.is_false(match.is_boolean()({}))\r\n    assert.is_false(match.is_boolean()(function() end))\r\n  end",
    "type": "function"
  }, {
    "id": 66,
    "text": "assert.is_false(match.is_boolean()(nil))",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "assert.is_true(match.is_boolean()(true))",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "assert.is_true(match.is_boolean()(false))",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "assert.is_false(match.is_boolean()(123))",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "assert.is_false(match.is_boolean()(\"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "assert.is_false(match.is_boolean()({}))",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "assert.is_false(match.is_boolean()(function() end))",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 75,
    "text": "function()\r\n    assert.is_false(match.is_number()(nil))\r\n    assert.is_false(match.is_number()(true))\r\n    assert.is_false(match.is_number()(false))\r\n    assert.is_true(match.is_number()(123))\r\n    assert.is_false(match.is_number()(\"\"))\r\n    assert.is_false(match.is_number()({}))\r\n    assert.is_false(match.is_number()(function() end))\r\n  end",
    "type": "function"
  }, {
    "id": 76,
    "text": "assert.is_false(match.is_number()(nil))",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "assert.is_false(match.is_number()(true))",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "assert.is_false(match.is_number()(false))",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "assert.is_true(match.is_number()(123))",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "assert.is_false(match.is_number()(\"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "assert.is_false(match.is_number()({}))",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "assert.is_false(match.is_number()(function() end))",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 85,
    "text": "function()\r\n    assert.is_false(match.is_string()(nil))\r\n    assert.is_false(match.is_string()(true))\r\n    assert.is_false(match.is_string()(false))\r\n    assert.is_false(match.is_string()(123))\r\n    assert.is_true(match.is_string()(\"\"))\r\n    assert.is_false(match.is_string()({}))\r\n    assert.is_false(match.is_string()(function() end))\r\n  end",
    "type": "function"
  }, {
    "id": 86,
    "text": "assert.is_false(match.is_string()(nil))",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "assert.is_false(match.is_string()(true))",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "assert.is_false(match.is_string()(false))",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "assert.is_false(match.is_string()(123))",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "assert.is_true(match.is_string()(\"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "assert.is_false(match.is_string()({}))",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "assert.is_false(match.is_string()(function() end))",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 94,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 95,
    "text": "function()\r\n    assert.is_false(match.is_boolean()(nil))\r\n    assert.is_false(match.is_table()(nil))\r\n    assert.is_false(match.is_table()(true))\r\n    assert.is_false(match.is_table()(false))\r\n    assert.is_false(match.is_table()(123))\r\n    assert.is_false(match.is_table()(\"\"))\r\n    assert.is_true(match.is_table()({}))\r\n    assert.is_false(match.is_table()(function() end))\r\n  end",
    "type": "function"
  }, {
    "id": 96,
    "text": "assert.is_false(match.is_table()(nil))",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "assert.is_false(match.is_table()(true))",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "assert.is_false(match.is_table()(false))",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "assert.is_false(match.is_table()(123))",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "assert.is_false(match.is_table()(\"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "assert.is_true(match.is_table()({}))",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "assert.is_false(match.is_table()(function() end))",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 104,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 105,
    "text": "function()\r\n    assert.is_false(match.is_function()(nil))\r\n    assert.is_false(match.is_function()(true))\r\n    assert.is_false(match.is_function()(false))\r\n    assert.is_false(match.is_function()(123))\r\n    assert.is_false(match.is_function()(\"\"))\r\n    assert.is_false(match.is_function()({}))\r\n    assert.is_true(match.is_function()(function() end))\r\n  end",
    "type": "function"
  }, {
    "id": 106,
    "text": "assert.is_false(match.is_function()(nil))",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "assert.is_false(match.is_function()(true))",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "assert.is_false(match.is_function()(false))",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "assert.is_false(match.is_function()(123))",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "assert.is_false(match.is_function()(\"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "assert.is_false(match.is_function()({}))",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "assert.is_true(match.is_function()(function() end))",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 114,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 115,
    "text": "function()\r\n    assert.is_true(match.is_userdata()(io.stdout))\r\n    assert.is_false(match.is_userdata()(nil))\r\n    assert.is_false(match.is_userdata()(true))\r\n    assert.is_false(match.is_userdata()(false))\r\n    assert.is_false(match.is_userdata()(123))\r\n    assert.is_false(match.is_userdata()(\"\"))\r\n    assert.is_false(match.is_userdata()({}))\r\n    assert.is_false(match.is_userdata()(function() end))\r\n  end",
    "type": "function"
  }, {
    "id": 116,
    "text": "assert.is_true(match.is_userdata()(io.stdout))",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "assert.is_false(match.is_userdata()(nil))",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "assert.is_false(match.is_userdata()(true))",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "assert.is_false(match.is_userdata()(false))",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "assert.is_false(match.is_userdata()(123))",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "assert.is_false(match.is_userdata()(\"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "assert.is_false(match.is_userdata()({}))",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "assert.is_false(match.is_userdata()(function() end))",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 125,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 126,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 127,
    "text": "function()\r\n    local mythread = coroutine.create(function() end)\r\n    assert.is_true(match.is_thread()(mythread))\r\n    assert.is_false(match.is_thread()(nil))\r\n    assert.is_false(match.is_thread()(true))\r\n    assert.is_false(match.is_thread()(false))\r\n    assert.is_false(match.is_thread()(123))\r\n    assert.is_false(match.is_thread()(\"\"))\r\n    assert.is_false(match.is_thread()({}))\r\n    assert.is_false(match.is_thread()(function() end))\r\n  end",
    "type": "function"
  }, {
    "id": 128,
    "text": "local mythread = coroutine.create(function() end)",
    "type": "statement:localassign"
  }, {
    "id": 129,
    "text": "assert.is_true(match.is_thread()(mythread))",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "assert.is_false(match.is_thread()(nil))",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "assert.is_false(match.is_thread()(true))",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "assert.is_false(match.is_thread()(false))",
    "type": "statement:functioncall"
  }, {
    "id": 133,
    "text": "assert.is_false(match.is_thread()(123))",
    "type": "statement:functioncall"
  }, {
    "id": 134,
    "text": "assert.is_false(match.is_thread()(\"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "assert.is_false(match.is_thread()({}))",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "assert.is_false(match.is_thread()(function() end))",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 138,
    "text": "function()\r\n    local table1 = { derp = false}\r\n    local table2 = table1\r\n    assert.is_true(match.is_equal(table1)(table2))\r\n    assert.is_true(match.is_equal(table2)(table1))\r\n  end",
    "type": "function"
  }, {
    "id": 139,
    "text": "local table1 = { derp = false}",
    "type": "statement:localassign"
  }, {
    "id": 140,
    "text": "local table2 = table1",
    "type": "statement:localassign"
  }, {
    "id": 141,
    "text": "assert.is_true(match.is_equal(table1)(table2))",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "assert.is_true(match.is_equal(table2)(table1))",
    "type": "statement:functioncall"
  }, {
    "id": 143,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 144,
    "text": "function() match.is_equals() end",
    "type": "function"
  }, {
    "id": 145,
    "text": "match.is_equals()",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "function()\r\n    assert.is.error(function() match.is_equals() end)  -- minimum 1 argument\r\n    assert.is_true(match.is_equal(nil)(nil))\r\n    assert.is_false(match.is_equal(\"a string\")(nil))\r\n    assert.is_false(match.is_equal(nil)(\"a string\"))\r\n  end",
    "type": "function"
  }, {
    "id": 147,
    "text": "assert.is.error(function() match.is_equals() end)",
    "type": "statement:functioncall"
  }, {
    "id": 148,
    "text": "assert.is_true(match.is_equal(nil)(nil))",
    "type": "statement:functioncall"
  }, {
    "id": 149,
    "text": "assert.is_false(match.is_equal(\"a string\")(nil))",
    "type": "statement:functioncall"
  }, {
    "id": 150,
    "text": "assert.is_false(match.is_equal(nil)(\"a string\"))",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 152,
    "text": "function()\r\n    local troubleSomeTable = {}\r\n    setmetatable(troubleSomeTable, {__metatable = 0})\r\n    assert.is_true(match.is_same(troubleSomeTable)(troubleSomeTable))\r\n  end",
    "type": "function"
  }, {
    "id": 153,
    "text": "local troubleSomeTable = {}",
    "type": "statement:localassign"
  }, {
    "id": 154,
    "text": "setmetatable(troubleSomeTable, {__metatable = 0})",
    "type": "statement:functioncall"
  }, {
    "id": 155,
    "text": "assert.is_true(match.is_same(troubleSomeTable)(troubleSomeTable))",
    "type": "statement:functioncall"
  }, {
    "id": 156,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 157,
    "text": "function() match.same()() end",
    "type": "function"
  }, {
    "id": 158,
    "text": "match.same()()",
    "type": "statement:functioncall"
  }, {
    "id": 159,
    "text": "function()\r\n    assert.is.error(function() match.same()() end)  -- minimum 1 arguments\r\n    assert.is_true(match.is_same(nil)(nil))\r\n    assert.is_false(match.is_same(\"a string\")(nil))\r\n    assert.is_false(match.is_same(nil)(\"a string\"))\r\n  end",
    "type": "function"
  }, {
    "id": 160,
    "text": "assert.is.error(function() match.same()() end)",
    "type": "statement:functioncall"
  }, {
    "id": 161,
    "text": "assert.is_true(match.is_same(nil)(nil))",
    "type": "statement:functioncall"
  }, {
    "id": 162,
    "text": "assert.is_false(match.is_same(\"a string\")(nil))",
    "type": "statement:functioncall"
  }, {
    "id": 163,
    "text": "assert.is_false(match.is_same(nil)(\"a string\"))",
    "type": "statement:functioncall"
  }, {
    "id": 164,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 165,
    "text": "function() match.is_ref() end",
    "type": "function"
  }, {
    "id": 166,
    "text": "match.is_ref()",
    "type": "statement:functioncall"
  }, {
    "id": 167,
    "text": "function() match.is_ref(0) end",
    "type": "function"
  }, {
    "id": 168,
    "text": "match.is_ref(0)",
    "type": "statement:functioncall"
  }, {
    "id": 169,
    "text": "function() match.is_ref('') end",
    "type": "function"
  }, {
    "id": 170,
    "text": "match.is_ref('')",
    "type": "statement:functioncall"
  }, {
    "id": 171,
    "text": "function() match.is_ref(nil) end",
    "type": "function"
  }, {
    "id": 172,
    "text": "match.is_ref(nil)",
    "type": "statement:functioncall"
  }, {
    "id": 173,
    "text": "function() match.is_ref(true) end",
    "type": "function"
  }, {
    "id": 174,
    "text": "match.is_ref(true)",
    "type": "statement:functioncall"
  }, {
    "id": 175,
    "text": "function() match.is_ref(false) end",
    "type": "function"
  }, {
    "id": 176,
    "text": "match.is_ref(false)",
    "type": "statement:functioncall"
  }, {
    "id": 177,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 178,
    "text": "function()\r\n    local t = {}\r\n    local func = function() end\r\n    local mythread = coroutine.create(func)\r\n    assert.is.error(function() match.is_ref() end)      -- minimum 1 arguments\r\n    assert.is.error(function() match.is_ref(0) end)     -- arg1 must be an object\r\n    assert.is.error(function() match.is_ref('') end)    -- arg1 must be an object\r\n    assert.is.error(function() match.is_ref(nil) end)   -- arg1 must be an object\r\n    assert.is.error(function() match.is_ref(true) end)  -- arg1 must be an object\r\n    assert.is.error(function() match.is_ref(false) end) -- arg1 must be an object\r\n    assert.is_true(match.is_ref(t)(t))\r\n    assert.is_true(match.is_ref(func)(func))\r\n    assert.is_true(match.is_ref(mythread)(mythread))\r\n    assert.is_false(match.is_ref(t)(func))\r\n    assert.is_false(match.is_ref(t)(mythread))\r\n    assert.is_false(match.is_ref(t)(nil))\r\n    assert.is_false(match.is_ref(t)(true))\r\n    assert.is_false(match.is_ref(t)(false))\r\n    assert.is_false(match.is_ref(t)(123))\r\n    assert.is_false(match.is_ref(t)(\"\"))\r\n    assert.is_false(match.is_ref(t)({}))\r\n    assert.is_false(match.is_ref(t)(function() end))\r\n  end",
    "type": "function"
  }, {
    "id": 179,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 180,
    "text": "local func = function() end",
    "type": "statement:localassign"
  }, {
    "id": 181,
    "text": "local mythread = coroutine.create(func)",
    "type": "statement:localassign"
  }, {
    "id": 182,
    "text": "assert.is.error(function() match.is_ref() end)",
    "type": "statement:functioncall"
  }, {
    "id": 183,
    "text": "assert.is.error(function() match.is_ref(0) end)",
    "type": "statement:functioncall"
  }, {
    "id": 184,
    "text": "assert.is.error(function() match.is_ref('') end)",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "assert.is.error(function() match.is_ref(nil) end)",
    "type": "statement:functioncall"
  }, {
    "id": 186,
    "text": "assert.is.error(function() match.is_ref(true) end)",
    "type": "statement:functioncall"
  }, {
    "id": 187,
    "text": "assert.is.error(function() match.is_ref(false) end)",
    "type": "statement:functioncall"
  }, {
    "id": 188,
    "text": "assert.is_true(match.is_ref(t)(t))",
    "type": "statement:functioncall"
  }, {
    "id": 189,
    "text": "assert.is_true(match.is_ref(func)(func))",
    "type": "statement:functioncall"
  }, {
    "id": 190,
    "text": "assert.is_true(match.is_ref(mythread)(mythread))",
    "type": "statement:functioncall"
  }, {
    "id": 191,
    "text": "assert.is_false(match.is_ref(t)(func))",
    "type": "statement:functioncall"
  }, {
    "id": 192,
    "text": "assert.is_false(match.is_ref(t)(mythread))",
    "type": "statement:functioncall"
  }, {
    "id": 193,
    "text": "assert.is_false(match.is_ref(t)(nil))",
    "type": "statement:functioncall"
  }, {
    "id": 194,
    "text": "assert.is_false(match.is_ref(t)(true))",
    "type": "statement:functioncall"
  }, {
    "id": 195,
    "text": "assert.is_false(match.is_ref(t)(false))",
    "type": "statement:functioncall"
  }, {
    "id": 196,
    "text": "assert.is_false(match.is_ref(t)(123))",
    "type": "statement:functioncall"
  }, {
    "id": 197,
    "text": "assert.is_false(match.is_ref(t)(\"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 198,
    "text": "assert.is_false(match.is_ref(t)({}))",
    "type": "statement:functioncall"
  }, {
    "id": 199,
    "text": "assert.is_false(match.is_ref(t)(function() end))",
    "type": "statement:functioncall"
  }, {
    "id": 200,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 201,
    "text": "function() match.matches() end",
    "type": "function"
  }, {
    "id": 202,
    "text": "match.matches()",
    "type": "statement:functioncall"
  }, {
    "id": 203,
    "text": "function() match.matches({}) end",
    "type": "function"
  }, {
    "id": 204,
    "text": "match.matches({})",
    "type": "statement:functioncall"
  }, {
    "id": 205,
    "text": "function() match.matches('s', 's') end",
    "type": "function"
  }, {
    "id": 206,
    "text": "match.matches('s', 's')",
    "type": "statement:functioncall"
  }, {
    "id": 207,
    "text": "function()\r\n    assert.is.error(function() match.matches() end)  -- minimum 1 arguments\r\n    assert.is.error(function() match.matches({}) end)  -- arg1 must be a string\r\n    assert.is.error(function() match.matches('s', 's') end)  -- arg2 must be a number or nil\r\n    assert.is_true(match.matches(\"%w+\")(\"test\"))\r\n    assert.is_true(match.has.match(\"%w+\")(\"test\"))\r\n    assert.is_false(match.matches(\"%d+\")(\"derp\"))\r\n    assert.is_true(match.has_match(\"test\", nil, true)(\"test\"))\r\n    assert.is_false(match.has_match(\"%w+\", nil, true)(\"test\"))\r\n    assert.is_true(match.has_match(\"^test\", 5)(\"123 test\"))\r\n    assert.is_false(match.has_match(\"%d+\", '4')(\"123 test\"))\r\n  end",
    "type": "function"
  }, {
    "id": 208,
    "text": "assert.is.error(function() match.matches() end)",
    "type": "statement:functioncall"
  }, {
    "id": 209,
    "text": "assert.is.error(function() match.matches({}) end)",
    "type": "statement:functioncall"
  }, {
    "id": 210,
    "text": "assert.is.error(function() match.matches('s', 's') end)",
    "type": "statement:functioncall"
  }, {
    "id": 211,
    "text": "assert.is_true(match.matches(\"%w+\")(\"test\"))",
    "type": "statement:functioncall"
  }, {
    "id": 212,
    "text": "assert.is_true(match.has.match(\"%w+\")(\"test\"))",
    "type": "statement:functioncall"
  }, {
    "id": 213,
    "text": "assert.is_false(match.matches(\"%d+\")(\"derp\"))",
    "type": "statement:functioncall"
  }, {
    "id": 214,
    "text": "assert.is_true(match.has_match(\"test\", nil, true)(\"test\"))",
    "type": "statement:functioncall"
  }, {
    "id": 215,
    "text": "assert.is_false(match.has_match(\"%w+\", nil, true)(\"test\"))",
    "type": "statement:functioncall"
  }, {
    "id": 216,
    "text": "assert.is_true(match.has_match(\"^test\", 5)(\"123 test\"))",
    "type": "statement:functioncall"
  }, {
    "id": 217,
    "text": "assert.is_false(match.has_match(\"%d+\", '4')(\"123 test\"))",
    "type": "statement:functioncall"
  }, {
    "id": 218,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 219,
    "text": "function() match.near(0) end",
    "type": "function"
  }, {
    "id": 220,
    "text": "match.near(0)",
    "type": "statement:functioncall"
  }, {
    "id": 221,
    "text": "function() match.near('a', 0) end",
    "type": "function"
  }, {
    "id": 222,
    "text": "match.near('a', 0)",
    "type": "statement:functioncall"
  }, {
    "id": 223,
    "text": "function() match.near(0, 'a') end",
    "type": "function"
  }, {
    "id": 224,
    "text": "match.near(0, 'a')",
    "type": "statement:functioncall"
  }, {
    "id": 225,
    "text": "function()\r\n    assert.is.error(function() match.near(0) end)  -- minimum 2 arguments\r\n    assert.is.error(function() match.near('a', 0) end)  -- arg1 must be convertable to number\r\n    assert.is.error(function() match.near(0, 'a') end)  -- arg2 must be convertable to number\r\n    assert.is_true(match.is.near(1.5, 0.5)(2.0))\r\n    assert.is_true(match.is.near('1.5', '0.5')('2.0'))\r\n    assert.is_true(match.is_not.near(1.5, 0.499)(2.0))\r\n    assert.is_true(match.is_not.near('1.5', '0.499')('2.0'))\r\n  end",
    "type": "function"
  }, {
    "id": 226,
    "text": "assert.is.error(function() match.near(0) end)",
    "type": "statement:functioncall"
  }, {
    "id": 227,
    "text": "assert.is.error(function() match.near('a', 0) end)",
    "type": "statement:functioncall"
  }, {
    "id": 228,
    "text": "assert.is.error(function() match.near(0, 'a') end)",
    "type": "statement:functioncall"
  }, {
    "id": 229,
    "text": "assert.is_true(match.is.near(1.5, 0.5)(2.0))",
    "type": "statement:functioncall"
  }, {
    "id": 230,
    "text": "assert.is_true(match.is.near('1.5', '0.5')('2.0'))",
    "type": "statement:functioncall"
  }, {
    "id": 231,
    "text": "assert.is_true(match.is_not.near(1.5, 0.499)(2.0))",
    "type": "statement:functioncall"
  }, {
    "id": 232,
    "text": "assert.is_true(match.is_not.near('1.5', '0.499')('2.0'))",
    "type": "statement:functioncall"
  }, {
    "id": 233,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 234,
    "text": "function()\r\n    local table2 = { derp = false}\r\n    local table3 = { derp = true }\r\n    local table1 = {table2,table3}\r\n    local tablenotunique = {table2,table2}\r\n    assert.is_true(match.is.unique()(table1))\r\n    assert.is_true(match.is_not.unique()(tablenotunique))\r\n  end",
    "type": "function"
  }, {
    "id": 235,
    "text": "local table2 = { derp = false}",
    "type": "statement:localassign"
  }, {
    "id": 236,
    "text": "local table3 = { derp = true }",
    "type": "statement:localassign"
  }, {
    "id": 237,
    "text": "local table1 = {table2,table3}",
    "type": "statement:localassign"
  }, {
    "id": 238,
    "text": "local tablenotunique = {table2,table2}",
    "type": "statement:localassign"
  }, {
    "id": 239,
    "text": "assert.is_true(match.is.unique()(table1))",
    "type": "statement:functioncall"
  }, {
    "id": 240,
    "text": "assert.is_true(match.is_not.unique()(tablenotunique))",
    "type": "statement:functioncall"
  }, {
    "id": 241,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 242,
    "text": "function()\r\n    assert.is_true(match.is_string()(\"abc\"))\r\n    assert.is_true(match.is_true()(true))\r\n    assert.is_true(match.is_not_string()(123))\r\n    assert.is_true(match.is_nil()(nil))\r\n    assert.is_true(match.is_not_nil()({}))\r\n    assert.is_true(match.is_not_true()(false))\r\n    assert.is_true(match.is_not_false()(true))\r\n\r\n    -- verify that failing match return false\r\n    assert.is_false(match.is_string()(1))\r\n    assert.is_false(match.is_true()(false))\r\n    assert.is_false(match.is_not_string()('string!'))\r\n    assert.is_false(match.is_nil()({}))\r\n    assert.is_false(match.is_not_nil()(nil))\r\n    assert.is_false(match.is_not_true()(true))\r\n    assert.is_false(match.is_not_false()(false))\r\n  end",
    "type": "function"
  }, {
    "id": 243,
    "text": "assert.is_true(match.is_string()(\"abc\"))",
    "type": "statement:functioncall"
  }, {
    "id": 244,
    "text": "assert.is_true(match.is_not_string()(123))",
    "type": "statement:functioncall"
  }, {
    "id": 245,
    "text": "assert.is_true(match.is_not_nil()({}))",
    "type": "statement:functioncall"
  }, {
    "id": 246,
    "text": "assert.is_true(match.is_not_true()(false))",
    "type": "statement:functioncall"
  }, {
    "id": 247,
    "text": "assert.is_true(match.is_not_false()(true))",
    "type": "statement:functioncall"
  }, {
    "id": 248,
    "text": "assert.is_false(match.is_string()(1))",
    "type": "statement:functioncall"
  }, {
    "id": 249,
    "text": "assert.is_false(match.is_not_string()('string!'))",
    "type": "statement:functioncall"
  }, {
    "id": 250,
    "text": "assert.is_false(match.is_not_nil()(nil))",
    "type": "statement:functioncall"
  }, {
    "id": 251,
    "text": "assert.is_false(match.is_not_true()(true))",
    "type": "statement:functioncall"
  }, {
    "id": 252,
    "text": "assert.is_false(match.is_not_false()(false))",
    "type": "statement:functioncall"
  }, {
    "id": 253,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 254,
    "text": "function()\r\n    assert.is_true(match.is.string()(\"abc\"))\r\n    assert.is_true(match.is.True()(true))\r\n    assert.is_true(match.is.Not.string()(123))\r\n    assert.is_true(match.is.Nil()(nil))\r\n    assert.is_true(match.is.Not.Nil()({}))\r\n    assert.is_true(match.is.Not.True()(false))\r\n    assert.is_true(match.is.Not.False()(true))\r\n    assert.is_true(match.equals.Not(true)(false))\r\n    assert.is_true(match.equals.Not.Not(true)(true))\r\n    assert.is_true(match.Not.equals.Not(true)(true))\r\n\r\n    -- verify that failing match return false\r\n    assert.is_false(match.is.string()(1))\r\n    assert.is_false(match.is.True()(false))\r\n    assert.is_false(match.is.Not.string()('string!'))\r\n    assert.is_false(match.is.Nil()({}))\r\n    assert.is_false(match.is.Not.Nil()(nil))\r\n    assert.is_false(match.is.Not.True()(true))\r\n    assert.is_false(match.is.Not.False()(false))\r\n    assert.is_false(match.equals.Not(true)(true))\r\n    assert.is_false(match.equals.Not.Not(true)(false))\r\n    assert.is_false(match.Not.equals.Not(true)(false))\r\n  end",
    "type": "function"
  }, {
    "id": 255,
    "text": "assert.is_true(match.is.string()(\"abc\"))",
    "type": "statement:functioncall"
  }, {
    "id": 256,
    "text": "assert.is_true(match.is.True()(true))",
    "type": "statement:functioncall"
  }, {
    "id": 257,
    "text": "assert.is_true(match.is.Not.string()(123))",
    "type": "statement:functioncall"
  }, {
    "id": 258,
    "text": "assert.is_true(match.is.Nil()(nil))",
    "type": "statement:functioncall"
  }, {
    "id": 259,
    "text": "assert.is_true(match.is.Not.Nil()({}))",
    "type": "statement:functioncall"
  }, {
    "id": 260,
    "text": "assert.is_true(match.is.Not.True()(false))",
    "type": "statement:functioncall"
  }, {
    "id": 261,
    "text": "assert.is_true(match.is.Not.False()(true))",
    "type": "statement:functioncall"
  }, {
    "id": 262,
    "text": "assert.is_true(match.equals.Not(true)(false))",
    "type": "statement:functioncall"
  }, {
    "id": 263,
    "text": "assert.is_true(match.equals.Not.Not(true)(true))",
    "type": "statement:functioncall"
  }, {
    "id": 264,
    "text": "assert.is_true(match.Not.equals.Not(true)(true))",
    "type": "statement:functioncall"
  }, {
    "id": 265,
    "text": "assert.is_false(match.is.string()(1))",
    "type": "statement:functioncall"
  }, {
    "id": 266,
    "text": "assert.is_false(match.is.True()(false))",
    "type": "statement:functioncall"
  }, {
    "id": 267,
    "text": "assert.is_false(match.is.Not.string()('string!'))",
    "type": "statement:functioncall"
  }, {
    "id": 268,
    "text": "assert.is_false(match.is.Nil()({}))",
    "type": "statement:functioncall"
  }, {
    "id": 269,
    "text": "assert.is_false(match.is.Not.Nil()(nil))",
    "type": "statement:functioncall"
  }, {
    "id": 270,
    "text": "assert.is_false(match.is.Not.True()(true))",
    "type": "statement:functioncall"
  }, {
    "id": 271,
    "text": "assert.is_false(match.is.Not.False()(false))",
    "type": "statement:functioncall"
  }, {
    "id": 272,
    "text": "assert.is_false(match.equals.Not(true)(true))",
    "type": "statement:functioncall"
  }, {
    "id": 273,
    "text": "assert.is_false(match.equals.Not.Not(true)(false))",
    "type": "statement:functioncall"
  }, {
    "id": 274,
    "text": "assert.is_false(match.Not.equals.Not(true)(false))",
    "type": "statement:functioncall"
  }, {
    "id": 275,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 276,
    "text": "function() return \"foo\" end",
    "type": "function"
  }, {
    "id": 277,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 278,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 279,
    "text": "function()\r\n    local s = spy.new(function() return \"foo\" end)\r\n    s(1)\r\n    s(nil, \"\")\r\n    s({}, \"\")\r\n    s(function() end, \"\")\r\n    s(1, 2, 3)\r\n    s(\"a\", \"b\", \"c\", \"d\")\r\n    assert.spy(s).was.called_with(match._)\r\n    assert.spy(s).was.called_with(match.is_number())\r\n    assert.spy(s).was.called_with(match.is_number(), match.is_number(), match.is_number())\r\n    assert.spy(s).was_not.called_with(match.is_string())\r\n    assert.spy(s).was.called_with(match.is_string(), match.is_string(), match.is_string(), match.is_string())\r\n    assert.spy(s).was.called_with(match.is_nil(), match._)\r\n    assert.spy(s).was.called_with(match.is_table(), match._)\r\n    assert.spy(s).was.called_with(match.is_function(), match._)\r\n    assert.spy(s).was_not.called_with(match.is_nil())\r\n    assert.spy(s).was_not.called_with(match.is_table())\r\n    assert.spy(s).was_not.called_with(match.is_function())\r\n  end",
    "type": "function"
  }, {
    "id": 280,
    "text": "local s = spy.new(function() return \"foo\" end)",
    "type": "statement:localassign"
  }, {
    "id": 281,
    "text": "s(1)",
    "type": "statement:functioncall"
  }, {
    "id": 282,
    "text": "s(nil, \"\")",
    "type": "statement:functioncall"
  }, {
    "id": 283,
    "text": "s({}, \"\")",
    "type": "statement:functioncall"
  }, {
    "id": 284,
    "text": "s(function() end, \"\")",
    "type": "statement:functioncall"
  }, {
    "id": 285,
    "text": "s(1, 2, 3)",
    "type": "statement:functioncall"
  }, {
    "id": 286,
    "text": "s(\"a\", \"b\", \"c\", \"d\")",
    "type": "statement:functioncall"
  }, {
    "id": 287,
    "text": "assert.spy(s).was.called_with(match._)",
    "type": "statement:functioncall"
  }, {
    "id": 288,
    "text": "assert.spy(s).was.called_with(match.is_number())",
    "type": "statement:functioncall"
  }, {
    "id": 289,
    "text": "assert.spy(s).was.called_with(match.is_number(), match.is_number(), match.is_number())",
    "type": "statement:functioncall"
  }, {
    "id": 290,
    "text": "assert.spy(s).was_not.called_with(match.is_string())",
    "type": "statement:functioncall"
  }, {
    "id": 291,
    "text": "assert.spy(s).was.called_with(match.is_string(), match.is_string(), match.is_string(), match.is_string())",
    "type": "statement:functioncall"
  }, {
    "id": 292,
    "text": "assert.spy(s).was.called_with(match.is_nil(), match._)",
    "type": "statement:functioncall"
  }, {
    "id": 293,
    "text": "assert.spy(s).was.called_with(match.is_table(), match._)",
    "type": "statement:functioncall"
  }, {
    "id": 294,
    "text": "assert.spy(s).was.called_with(match.is_function(), match._)",
    "type": "statement:functioncall"
  }, {
    "id": 295,
    "text": "assert.spy(s).was_not.called_with(match.is_nil())",
    "type": "statement:functioncall"
  }, {
    "id": 296,
    "text": "assert.spy(s).was_not.called_with(match.is_table())",
    "type": "statement:functioncall"
  }, {
    "id": 297,
    "text": "assert.spy(s).was_not.called_with(match.is_function())",
    "type": "statement:functioncall"
  }, {
    "id": 298,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 299,
    "text": "function() return \"foo\" end",
    "type": "function"
  }, {
    "id": 300,
    "text": "function()\r\n    local s = spy.new(function() return \"foo\" end)\r\n    s()\r\n    assert.spy(s).was.returned_with(match._)\r\n    assert.spy(s).was.returned_with(match.is_string())\r\n    assert.spy(s).was.returned_with(match.is_not_number())\r\n    assert.spy(s).was.returned_with(match.is_not_table())\r\n    assert.spy(s).was_not.returned_with(match.is_number())\r\n    assert.spy(s).was_not.returned_with(match.is_table())\r\n  end",
    "type": "function"
  }, {
    "id": 301,
    "text": "s()",
    "type": "statement:functioncall"
  }, {
    "id": 302,
    "text": "assert.spy(s).was.returned_with(match._)",
    "type": "statement:functioncall"
  }, {
    "id": 303,
    "text": "assert.spy(s).was.returned_with(match.is_string())",
    "type": "statement:functioncall"
  }, {
    "id": 304,
    "text": "assert.spy(s).was.returned_with(match.is_not_number())",
    "type": "statement:functioncall"
  }, {
    "id": 305,
    "text": "assert.spy(s).was.returned_with(match.is_not_table())",
    "type": "statement:functioncall"
  }, {
    "id": 306,
    "text": "assert.spy(s).was_not.returned_with(match.is_number())",
    "type": "statement:functioncall"
  }, {
    "id": 307,
    "text": "assert.spy(s).was_not.returned_with(match.is_table())",
    "type": "statement:functioncall"
  }, {
    "id": 308,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 309,
    "text": "function()\r\n    local test = {}\r\n    local s = stub(test, \"key\").returns(\"foo\")\r\n    s.on_call_with(match.is_string()).returns(\"bar\")\r\n    s.on_call_with(match.is_number()).returns(555)\r\n    s.on_call_with(match.is_table()).returns({\"foo\"})\r\n    s(0)\r\n    s(\"\")\r\n    s({})\r\n    assert.spy(s).was.returned_with(555)\r\n    assert.spy(s).was.returned_with(\"bar\")\r\n    assert.spy(s).was.returned_with({\"foo\"})\r\n  end",
    "type": "function"
  }, {
    "id": 310,
    "text": "local test = {}",
    "type": "statement:localassign"
  }, {
    "id": 311,
    "text": "local s = stub(test, \"key\").returns(\"foo\")",
    "type": "statement:localassign"
  }, {
    "id": 312,
    "text": "s.on_call_with(match.is_string()).returns(\"bar\")",
    "type": "statement:functioncall"
  }, {
    "id": 313,
    "text": "s.on_call_with(match.is_number()).returns(555)",
    "type": "statement:functioncall"
  }, {
    "id": 314,
    "text": "s.on_call_with(match.is_table()).returns({\"foo\"})",
    "type": "statement:functioncall"
  }, {
    "id": 315,
    "text": "s(0)",
    "type": "statement:functioncall"
  }, {
    "id": 316,
    "text": "s(\"\")",
    "type": "statement:functioncall"
  }, {
    "id": 317,
    "text": "s({})",
    "type": "statement:functioncall"
  }, {
    "id": 318,
    "text": "assert.spy(s).was.returned_with(555)",
    "type": "statement:functioncall"
  }, {
    "id": 319,
    "text": "assert.spy(s).was.returned_with(\"bar\")",
    "type": "statement:functioncall"
  }, {
    "id": 320,
    "text": "assert.spy(s).was.returned_with({\"foo\"})",
    "type": "statement:functioncall"
  }, {
    "id": 321,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 322,
    "text": "function() return \"foo\" end",
    "type": "function"
  }, {
    "id": 323,
    "text": "function()\r\n    local s = spy.new(function() return \"foo\" end)\r\n    s()\r\n    assert.spy(s).was.returned_with(match._)\r\n    assert.spy(s).was.returned_with(match.is_string())\r\n    assert.spy(s).was.returned_with(match.is_not_nil())\r\n    assert.spy(s).was.returned_with(match.is_not_number())\r\n    assert.spy(s).was.returned_with(match.is_not_table())\r\n    assert.spy(s).was.returned_with(match.is_not_function())\r\n  end",
    "type": "function"
  }, {
    "id": 324,
    "text": "assert.spy(s).was.returned_with(match.is_not_nil())",
    "type": "statement:functioncall"
  }, {
    "id": 325,
    "text": "assert.spy(s).was.returned_with(match.is_not_function())",
    "type": "statement:functioncall"
  }, {
    "id": 326,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 327,
    "text": "function() match.none_of() end",
    "type": "function"
  }, {
    "id": 328,
    "text": "match.none_of()",
    "type": "statement:functioncall"
  }, {
    "id": 329,
    "text": "function() match.none_of('') end",
    "type": "function"
  }, {
    "id": 330,
    "text": "match.none_of('')",
    "type": "statement:functioncall"
  }, {
    "id": 331,
    "text": "function() match.none_of('', 0) end",
    "type": "function"
  }, {
    "id": 332,
    "text": "match.none_of('', 0)",
    "type": "statement:functioncall"
  }, {
    "id": 333,
    "text": "function()\r\n    assert.has.error(function() match.none_of() end)  -- minimum 1 arguments\r\n    assert.has.error(function() match.none_of('') end)  -- arg must be a matcher\r\n    assert.has.error(function() match.none_of('', 0) end)  -- all args must be a match\r\n\r\n    assert.is_false(match.none_of(match.is_string())(''))\r\n    assert.is_true(match.none_of(match.is_number())(''))\r\n    assert.is_true(match.none_of(match.is_number(), match.is_function())(''))\r\n    assert.is_false(match.none_of(match.is_number(), match.is_not_function())(''))\r\n    assert.is_false(match.not_none_of(match.is_number(), match.is_function())(''))\r\n  end",
    "type": "function"
  }, {
    "id": 334,
    "text": "assert.has.error(function() match.none_of() end)",
    "type": "statement:functioncall"
  }, {
    "id": 335,
    "text": "assert.has.error(function() match.none_of('') end)",
    "type": "statement:functioncall"
  }, {
    "id": 336,
    "text": "assert.has.error(function() match.none_of('', 0) end)",
    "type": "statement:functioncall"
  }, {
    "id": 337,
    "text": "assert.is_false(match.none_of(match.is_string())(''))",
    "type": "statement:functioncall"
  }, {
    "id": 338,
    "text": "assert.is_true(match.none_of(match.is_number())(''))",
    "type": "statement:functioncall"
  }, {
    "id": 339,
    "text": "assert.is_true(match.none_of(match.is_number(), match.is_function())(''))",
    "type": "statement:functioncall"
  }, {
    "id": 340,
    "text": "assert.is_false(match.none_of(match.is_number(), match.is_not_function())(''))",
    "type": "statement:functioncall"
  }, {
    "id": 341,
    "text": "assert.is_false(match.not_none_of(match.is_number(), match.is_function())(''))",
    "type": "statement:functioncall"
  }, {
    "id": 342,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 343,
    "text": "function() match.any_of() end",
    "type": "function"
  }, {
    "id": 344,
    "text": "match.any_of()",
    "type": "statement:functioncall"
  }, {
    "id": 345,
    "text": "function() match.any_of('') end",
    "type": "function"
  }, {
    "id": 346,
    "text": "match.any_of('')",
    "type": "statement:functioncall"
  }, {
    "id": 347,
    "text": "function() match.any_of('', 0) end",
    "type": "function"
  }, {
    "id": 348,
    "text": "match.any_of('', 0)",
    "type": "statement:functioncall"
  }, {
    "id": 349,
    "text": "function()\r\n    assert.has.error(function() match.any_of() end)  -- minimum 1 arguments\r\n    assert.has.error(function() match.any_of('') end)  -- arg must be a matcher\r\n    assert.has.error(function() match.any_of('', 0) end)  -- all args must be a match\r\n\r\n    assert.is_true(match.any_of(match.is_string())(''))\r\n    assert.is_false(match.any_of(match.is_number())(''))\r\n    assert.is_false(match.any_of(match.is_number(), match.is_function())(''))\r\n    assert.is_true(match.any_of(match.is_number(), match.is_not_function())(''))\r\n    assert.is_true(match.not_any_of(match.is_number(), match.is_function())(''))\r\n  end",
    "type": "function"
  }, {
    "id": 350,
    "text": "assert.has.error(function() match.any_of() end)",
    "type": "statement:functioncall"
  }, {
    "id": 351,
    "text": "assert.has.error(function() match.any_of('') end)",
    "type": "statement:functioncall"
  }, {
    "id": 352,
    "text": "assert.has.error(function() match.any_of('', 0) end)",
    "type": "statement:functioncall"
  }, {
    "id": 353,
    "text": "assert.is_true(match.any_of(match.is_string())(''))",
    "type": "statement:functioncall"
  }, {
    "id": 354,
    "text": "assert.is_false(match.any_of(match.is_number())(''))",
    "type": "statement:functioncall"
  }, {
    "id": 355,
    "text": "assert.is_false(match.any_of(match.is_number(), match.is_function())(''))",
    "type": "statement:functioncall"
  }, {
    "id": 356,
    "text": "assert.is_true(match.any_of(match.is_number(), match.is_not_function())(''))",
    "type": "statement:functioncall"
  }, {
    "id": 357,
    "text": "assert.is_true(match.not_any_of(match.is_number(), match.is_function())(''))",
    "type": "statement:functioncall"
  }, {
    "id": 358,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 359,
    "text": "function() match.all_of() end",
    "type": "function"
  }, {
    "id": 360,
    "text": "match.all_of()",
    "type": "statement:functioncall"
  }, {
    "id": 361,
    "text": "function() match.all_of('') end",
    "type": "function"
  }, {
    "id": 362,
    "text": "match.all_of('')",
    "type": "statement:functioncall"
  }, {
    "id": 363,
    "text": "function() match.all_of('', 0) end",
    "type": "function"
  }, {
    "id": 364,
    "text": "match.all_of('', 0)",
    "type": "statement:functioncall"
  }, {
    "id": 365,
    "text": "function()\r\n    assert.has.error(function() match.all_of() end)  -- minimum 1 arguments\r\n    assert.has.error(function() match.all_of('') end)  -- arg must be a matcher\r\n    assert.has.error(function() match.all_of('', 0) end)  -- all args must be a match\r\n\r\n    assert.is_true(match.all_of(match.is_string())(''))\r\n    assert.is_false(match.all_of(match.is_number())(''))\r\n    assert.is_false(match.all_of(match.is_number(), match.is_function())(''))\r\n    assert.is_false(match.all_of(match.is_number(), match.is_not_function())(''))\r\n    assert.is_true(match.not_all_of(match.is_number(), match.is_function())(''))\r\n    assert.is_true(match.all_of(match.is_not_number(), match.is_not_function())(''))\r\n  end",
    "type": "function"
  }, {
    "id": 366,
    "text": "assert.has.error(function() match.all_of() end)",
    "type": "statement:functioncall"
  }, {
    "id": 367,
    "text": "assert.has.error(function() match.all_of('') end)",
    "type": "statement:functioncall"
  }, {
    "id": 368,
    "text": "assert.has.error(function() match.all_of('', 0) end)",
    "type": "statement:functioncall"
  }, {
    "id": 369,
    "text": "assert.is_true(match.all_of(match.is_string())(''))",
    "type": "statement:functioncall"
  }, {
    "id": 370,
    "text": "assert.is_false(match.all_of(match.is_number())(''))",
    "type": "statement:functioncall"
  }, {
    "id": 371,
    "text": "assert.is_false(match.all_of(match.is_number(), match.is_function())(''))",
    "type": "statement:functioncall"
  }, {
    "id": 372,
    "text": "assert.is_false(match.all_of(match.is_number(), match.is_not_function())(''))",
    "type": "statement:functioncall"
  }, {
    "id": 373,
    "text": "assert.is_true(match.not_all_of(match.is_number(), match.is_function())(''))",
    "type": "statement:functioncall"
  }, {
    "id": 374,
    "text": "assert.is_true(match.all_of(match.is_not_number(), match.is_not_function())(''))",
    "type": "statement:functioncall"
  }, {
    "id": 375,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 376,
    "text": "function()\r\n  it(\"Checks wildcard() matcher\", function()\r\n    assert.is_true(match._(nil))\r\n    assert.is_true(match._(true))\r\n    assert.is_true(match._(false))\r\n    assert.is_true(match._(123))\r\n    assert.is_true(match._(\"\"))\r\n    assert.is_true(match._({}))\r\n    assert.is_true(match._(function() end))\r\n  end)\r\n\r\n  it(\"Checks truthy() matcher\", function()\r\n    assert.is_false(match.truthy()(nil))\r\n    assert.is_true(match.truthy()(true))\r\n    assert.is_false(match.truthy()(false))\r\n    assert.is_true(match.truthy()(123))\r\n    assert.is_true(match.truthy()(\"\"))\r\n    assert.is_true(match.truthy()({}))\r\n    assert.is_true(match.truthy()(function() end))\r\n  end)\r\n\r\n  it(\"Checks falsy() matcher\", function()\r\n    assert.is_true(match.falsy()(nil))\r\n    assert.is_false(match.falsy()(true))\r\n    assert.is_true(match.falsy()(false))\r\n    assert.is_false(match.falsy()(123))\r\n    assert.is_false(match.falsy()(\"\"))\r\n    assert.is_false(match.falsy()({}))\r\n    assert.is_false(match.falsy()(function() end))\r\n  end)\r\n\r\n  it(\"Checks true() matcher\", function()\r\n    assert.is_false(match.is_true()(nil))\r\n    assert.is_true(match.is_true()(true))\r\n    assert.is_false(match.is_true()(false))\r\n    assert.is_false(match.is_true()(123))\r\n    assert.is_false(match.is_true()(\"\"))\r\n    assert.is_false(match.is_true()({}))\r\n    assert.is_false(match.is_true()(function() end))\r\n  end)\r\n\r\n  it(\"Checks false() matcher\", function()\r\n    assert.is_false(match.is_false()(nil))\r\n    assert.is_false(match.is_false()(true))\r\n    assert.is_true(match.is_false()(false))\r\n    assert.is_false(match.is_false()(123))\r\n    assert.is_false(match.is_false()(\"\"))\r\n    assert.is_false(match.is_false()({}))\r\n    assert.is_false(match.is_false()(function() end))\r\n  end)\r\n\r\n  it(\"Checks nil() matcher\", function()\r\n    assert.is_true(match.is_nil()(nil))\r\n    assert.is_false(match.is_nil()(true))\r\n    assert.is_false(match.is_nil()(false))\r\n    assert.is_false(match.is_nil()(123))\r\n    assert.is_false(match.is_nil()(\"\"))\r\n    assert.is_false(match.is_nil()({}))\r\n    assert.is_false(match.is_nil()(function() end))\r\n  end)\r\n\r\n  it(\"Checks boolean() matcher\", function()\r\n    assert.is_false(match.is_boolean()(nil))\r\n    assert.is_true(match.is_boolean()(true))\r\n    assert.is_true(match.is_boolean()(false))\r\n    assert.is_false(match.is_boolean()(123))\r\n    assert.is_false(match.is_boolean()(\"\"))\r\n    assert.is_false(match.is_boolean()({}))\r\n    assert.is_false(match.is_boolean()(function() end))\r\n  end)\r\n\r\n  it(\"Checks number() matcher\", function()\r\n    assert.is_false(match.is_number()(nil))\r\n    assert.is_false(match.is_number()(true))\r\n    assert.is_false(match.is_number()(false))\r\n    assert.is_true(match.is_number()(123))\r\n    assert.is_false(match.is_number()(\"\"))\r\n    assert.is_false(match.is_number()({}))\r\n    assert.is_false(match.is_number()(function() end))\r\n  end)\r\n\r\n  it(\"Checks string() matcher\", function()\r\n    assert.is_false(match.is_string()(nil))\r\n    assert.is_false(match.is_string()(true))\r\n    assert.is_false(match.is_string()(false))\r\n    assert.is_false(match.is_string()(123))\r\n    assert.is_true(match.is_string()(\"\"))\r\n    assert.is_false(match.is_string()({}))\r\n    assert.is_false(match.is_string()(function() end))\r\n  end)\r\n\r\n  it(\"Checks table() matcher\", function()\r\n    assert.is_false(match.is_boolean()(nil))\r\n    assert.is_false(match.is_table()(nil))\r\n    assert.is_false(match.is_table()(true))\r\n    assert.is_false(match.is_table()(false))\r\n    assert.is_false(match.is_table()(123))\r\n    assert.is_false(match.is_table()(\"\"))\r\n    assert.is_true(match.is_table()({}))\r\n    assert.is_false(match.is_table()(function() end))\r\n  end)\r\n\r\n  it(\"Checks function() matcher\", function()\r\n    assert.is_false(match.is_function()(nil))\r\n    assert.is_false(match.is_function()(true))\r\n    assert.is_false(match.is_function()(false))\r\n    assert.is_false(match.is_function()(123))\r\n    assert.is_false(match.is_function()(\"\"))\r\n    assert.is_false(match.is_function()({}))\r\n    assert.is_true(match.is_function()(function() end))\r\n  end)\r\n\r\n  it(\"Checks userdata() matcher\", function()\r\n    assert.is_true(match.is_userdata()(io.stdout))\r\n    assert.is_false(match.is_userdata()(nil))\r\n    assert.is_false(match.is_userdata()(true))\r\n    assert.is_false(match.is_userdata()(false))\r\n    assert.is_false(match.is_userdata()(123))\r\n    assert.is_false(match.is_userdata()(\"\"))\r\n    assert.is_false(match.is_userdata()({}))\r\n    assert.is_false(match.is_userdata()(function() end))\r\n  end)\r\n\r\n  it(\"Checks thread() matcher\", function()\r\n    local mythread = coroutine.create(function() end)\r\n    assert.is_true(match.is_thread()(mythread))\r\n    assert.is_false(match.is_thread()(nil))\r\n    assert.is_false(match.is_thread()(true))\r\n    assert.is_false(match.is_thread()(false))\r\n    assert.is_false(match.is_thread()(123))\r\n    assert.is_false(match.is_thread()(\"\"))\r\n    assert.is_false(match.is_thread()({}))\r\n    assert.is_false(match.is_thread()(function() end))\r\n  end)\r\n\r\n  it(\"Checks to see if tables 1 and 2 are equal\", function()\r\n    local table1 = { derp = false}\r\n    local table2 = table1\r\n    assert.is_true(match.is_equal(table1)(table2))\r\n    assert.is_true(match.is_equal(table2)(table1))\r\n  end)\r\n\r\n  it(\"Checks equals() matcher to handle nils properly\", function()\r\n    assert.is.error(function() match.is_equals() end)  -- minimum 1 argument\r\n    assert.is_true(match.is_equal(nil)(nil))\r\n    assert.is_false(match.is_equal(\"a string\")(nil))\r\n    assert.is_false(match.is_equal(nil)(\"a string\"))\r\n  end)\r\n\r\n  it(\"Checks the same() matcher for tables with protected metatables\", function()\r\n    local troubleSomeTable = {}\r\n    setmetatable(troubleSomeTable, {__metatable = 0})\r\n    assert.is_true(match.is_same(troubleSomeTable)(troubleSomeTable))\r\n  end)\r\n\r\n  it(\"Checks same() matcher to handle nils properly\", function()\r\n    assert.is.error(function() match.same()() end)  -- minimum 1 arguments\r\n    assert.is_true(match.is_same(nil)(nil))\r\n    assert.is_false(match.is_same(\"a string\")(nil))\r\n    assert.is_false(match.is_same(nil)(\"a string\"))\r\n  end)\r\n\r\n  it(\"Checks ref() matcher\", function()\r\n    local t = {}\r\n    local func = function() end\r\n    local mythread = coroutine.create(func)\r\n    assert.is.error(function() match.is_ref() end)      -- minimum 1 arguments\r\n    assert.is.error(function() match.is_ref(0) end)     -- arg1 must be an object\r\n    assert.is.error(function() match.is_ref('') end)    -- arg1 must be an object\r\n    assert.is.error(function() match.is_ref(nil) end)   -- arg1 must be an object\r\n    assert.is.error(function() match.is_ref(true) end)  -- arg1 must be an object\r\n    assert.is.error(function() match.is_ref(false) end) -- arg1 must be an object\r\n    assert.is_true(match.is_ref(t)(t))\r\n    assert.is_true(match.is_ref(func)(func))\r\n    assert.is_true(match.is_ref(mythread)(mythread))\r\n    assert.is_false(match.is_ref(t)(func))\r\n    assert.is_false(match.is_ref(t)(mythread))\r\n    assert.is_false(match.is_ref(t)(nil))\r\n    assert.is_false(match.is_ref(t)(true))\r\n    assert.is_false(match.is_ref(t)(false))\r\n    assert.is_false(match.is_ref(t)(123))\r\n    assert.is_false(match.is_ref(t)(\"\"))\r\n    assert.is_false(match.is_ref(t)({}))\r\n    assert.is_false(match.is_ref(t)(function() end))\r\n  end)\r\n\r\n  it(\"Checks matches() matcher does string matching\", function()\r\n    assert.is.error(function() match.matches() end)  -- minimum 1 arguments\r\n    assert.is.error(function() match.matches({}) end)  -- arg1 must be a string\r\n    assert.is.error(function() match.matches('s', 's') end)  -- arg2 must be a number or nil\r\n    assert.is_true(match.matches(\"%w+\")(\"test\"))\r\n    assert.is_true(match.has.match(\"%w+\")(\"test\"))\r\n    assert.is_false(match.matches(\"%d+\")(\"derp\"))\r\n    assert.is_true(match.has_match(\"test\", nil, true)(\"test\"))\r\n    assert.is_false(match.has_match(\"%w+\", nil, true)(\"test\"))\r\n    assert.is_true(match.has_match(\"^test\", 5)(\"123 test\"))\r\n    assert.is_false(match.has_match(\"%d+\", '4')(\"123 test\"))\r\n  end)\r\n\r\n  it(\"Checks near() matcher handles tolerances\", function()\r\n    assert.is.error(function() match.near(0) end)  -- minimum 2 arguments\r\n    assert.is.error(function() match.near('a', 0) end)  -- arg1 must be convertable to number\r\n    assert.is.error(function() match.near(0, 'a') end)  -- arg2 must be convertable to number\r\n    assert.is_true(match.is.near(1.5, 0.5)(2.0))\r\n    assert.is_true(match.is.near('1.5', '0.5')('2.0'))\r\n    assert.is_true(match.is_not.near(1.5, 0.499)(2.0))\r\n    assert.is_true(match.is_not.near('1.5', '0.499')('2.0'))\r\n  end)\r\n\r\n  it(\"Checks to see if table1 only contains unique elements\", function()\r\n    local table2 = { derp = false}\r\n    local table3 = { derp = true }\r\n    local table1 = {table2,table3}\r\n    local tablenotunique = {table2,table2}\r\n    assert.is_true(match.is.unique()(table1))\r\n    assert.is_true(match.is_not.unique()(tablenotunique))\r\n  end)\r\n\r\n  it(\"Checks '_' chaining of modifiers and match\", function()\r\n    assert.is_true(match.is_string()(\"abc\"))\r\n    assert.is_true(match.is_true()(true))\r\n    assert.is_true(match.is_not_string()(123))\r\n    assert.is_true(match.is_nil()(nil))\r\n    assert.is_true(match.is_not_nil()({}))\r\n    assert.is_true(match.is_not_true()(false))\r\n    assert.is_true(match.is_not_false()(true))\r\n\r\n    -- verify that failing match return false\r\n    assert.is_false(match.is_string()(1))\r\n    assert.is_false(match.is_true()(false))\r\n    assert.is_false(match.is_not_string()('string!'))\r\n    assert.is_false(match.is_nil()({}))\r\n    assert.is_false(match.is_not_nil()(nil))\r\n    assert.is_false(match.is_not_true()(true))\r\n    assert.is_false(match.is_not_false()(false))\r\n  end)\r\n\r\n  it(\"Checks '.' chaining of modifiers and match\", function()\r\n    assert.is_true(match.is.string()(\"abc\"))\r\n    assert.is_true(match.is.True()(true))\r\n    assert.is_true(match.is.Not.string()(123))\r\n    assert.is_true(match.is.Nil()(nil))\r\n    assert.is_true(match.is.Not.Nil()({}))\r\n    assert.is_true(match.is.Not.True()(false))\r\n    assert.is_true(match.is.Not.False()(true))\r\n    assert.is_true(match.equals.Not(true)(false))\r\n    assert.is_true(match.equals.Not.Not(true)(true))\r\n    assert.is_true(match.Not.equals.Not(true)(true))\r\n\r\n    -- verify that failing match return false\r\n    assert.is_false(match.is.string()(1))\r\n    assert.is_false(match.is.True()(false))\r\n    assert.is_false(match.is.Not.string()('string!'))\r\n    assert.is_false(match.is.Nil()({}))\r\n    assert.is_false(match.is.Not.Nil()(nil))\r\n    assert.is_false(match.is.Not.True()(true))\r\n    assert.is_false(match.is.Not.False()(false))\r\n    assert.is_false(match.equals.Not(true)(true))\r\n    assert.is_false(match.equals.Not.Not(true)(false))\r\n    assert.is_false(match.Not.equals.Not(true)(false))\r\n  end)\r\n\r\n  it(\"Checks called_with() argument matching for spies\", function()\r\n    local s = spy.new(function() return \"foo\" end)\r\n    s(1)\r\n    s(nil, \"\")\r\n    s({}, \"\")\r\n    s(function() end, \"\")\r\n    s(1, 2, 3)\r\n    s(\"a\", \"b\", \"c\", \"d\")\r\n    assert.spy(s).was.called_with(match._)\r\n    assert.spy(s).was.called_with(match.is_number())\r\n    assert.spy(s).was.called_with(match.is_number(), match.is_number(), match.is_number())\r\n    assert.spy(s).was_not.called_with(match.is_string())\r\n    assert.spy(s).was.called_with(match.is_string(), match.is_string(), match.is_string(), match.is_string())\r\n    assert.spy(s).was.called_with(match.is_nil(), match._)\r\n    assert.spy(s).was.called_with(match.is_table(), match._)\r\n    assert.spy(s).was.called_with(match.is_function(), match._)\r\n    assert.spy(s).was_not.called_with(match.is_nil())\r\n    assert.spy(s).was_not.called_with(match.is_table())\r\n    assert.spy(s).was_not.called_with(match.is_function())\r\n  end)\r\n\r\n  it(\"Checks returned_with() argument matching for spies\", function()\r\n    local s = spy.new(function() return \"foo\" end)\r\n    s()\r\n    assert.spy(s).was.returned_with(match._)\r\n    assert.spy(s).was.returned_with(match.is_string())\r\n    assert.spy(s).was.returned_with(match.is_not_number())\r\n    assert.spy(s).was.returned_with(match.is_not_table())\r\n    assert.spy(s).was_not.returned_with(match.is_number())\r\n    assert.spy(s).was_not.returned_with(match.is_table())\r\n  end)\r\n\r\n  it(\"Checks on_call_with() argument matching for stubs\", function()\r\n    local test = {}\r\n    local s = stub(test, \"key\").returns(\"foo\")\r\n    s.on_call_with(match.is_string()).returns(\"bar\")\r\n    s.on_call_with(match.is_number()).returns(555)\r\n    s.on_call_with(match.is_table()).returns({\"foo\"})\r\n    s(0)\r\n    s(\"\")\r\n    s({})\r\n    assert.spy(s).was.returned_with(555)\r\n    assert.spy(s).was.returned_with(\"bar\")\r\n    assert.spy(s).was.returned_with({\"foo\"})\r\n  end)\r\n\r\n  it(\"Checks returned_with() argument matching for spies\", function()\r\n    local s = spy.new(function() return \"foo\" end)\r\n    s()\r\n    assert.spy(s).was.returned_with(match._)\r\n    assert.spy(s).was.returned_with(match.is_string())\r\n    assert.spy(s).was.returned_with(match.is_not_nil())\r\n    assert.spy(s).was.returned_with(match.is_not_number())\r\n    assert.spy(s).was.returned_with(match.is_not_table())\r\n    assert.spy(s).was.returned_with(match.is_not_function())\r\n  end)\r\n\r\n  it(\"Checks none() composite matcher\", function()\r\n    assert.has.error(function() match.none_of() end)  -- minimum 1 arguments\r\n    assert.has.error(function() match.none_of('') end)  -- arg must be a matcher\r\n    assert.has.error(function() match.none_of('', 0) end)  -- all args must be a match\r\n\r\n    assert.is_false(match.none_of(match.is_string())(''))\r\n    assert.is_true(match.none_of(match.is_number())(''))\r\n    assert.is_true(match.none_of(match.is_number(), match.is_function())(''))\r\n    assert.is_false(match.none_of(match.is_number(), match.is_not_function())(''))\r\n    assert.is_false(match.not_none_of(match.is_number(), match.is_function())(''))\r\n  end)\r\n\r\n  it(\"Checks any() composite matcher\", function()\r\n    assert.has.error(function() match.any_of() end)  -- minimum 1 arguments\r\n    assert.has.error(function() match.any_of('') end)  -- arg must be a matcher\r\n    assert.has.error(function() match.any_of('', 0) end)  -- all args must be a match\r\n\r\n    assert.is_true(match.any_of(match.is_string())(''))\r\n    assert.is_false(match.any_of(match.is_number())(''))\r\n    assert.is_false(match.any_of(match.is_number(), match.is_function())(''))\r\n    assert.is_true(match.any_of(match.is_number(), match.is_not_function())(''))\r\n    assert.is_true(match.not_any_of(match.is_number(), match.is_function())(''))\r\n  end)\r\n\r\n  it(\"Checks all() composite matcher\", function()\r\n    assert.has.error(function() match.all_of() end)  -- minimum 1 arguments\r\n    assert.has.error(function() match.all_of('') end)  -- arg must be a matcher\r\n    assert.has.error(function() match.all_of('', 0) end)  -- all args must be a match\r\n\r\n    assert.is_true(match.all_of(match.is_string())(''))\r\n    assert.is_false(match.all_of(match.is_number())(''))\r\n    assert.is_false(match.all_of(match.is_number(), match.is_function())(''))\r\n    assert.is_false(match.all_of(match.is_number(), match.is_not_function())(''))\r\n    assert.is_true(match.not_all_of(match.is_number(), match.is_function())(''))\r\n    assert.is_true(match.all_of(match.is_not_number(), match.is_not_function())(''))\r\n  end)\r\n\r\nend",
    "type": "function"
  }, {
    "id": 377,
    "text": "it(\"Checks wildcard() matcher\", function()\r\n    assert.is_true(match._(nil))\r\n    assert.is_true(match._(true))\r\n    assert.is_true(match._(false))\r\n    assert.is_true(match._(123))\r\n    assert.is_true(match._(\"\"))\r\n    assert.is_true(match._({}))\r\n    assert.is_true(match._(function() end))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 378,
    "text": "it(\"Checks truthy() matcher\", function()\r\n    assert.is_false(match.truthy()(nil))\r\n    assert.is_true(match.truthy()(true))\r\n    assert.is_false(match.truthy()(false))\r\n    assert.is_true(match.truthy()(123))\r\n    assert.is_true(match.truthy()(\"\"))\r\n    assert.is_true(match.truthy()({}))\r\n    assert.is_true(match.truthy()(function() end))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 379,
    "text": "it(\"Checks falsy() matcher\", function()\r\n    assert.is_true(match.falsy()(nil))\r\n    assert.is_false(match.falsy()(true))\r\n    assert.is_true(match.falsy()(false))\r\n    assert.is_false(match.falsy()(123))\r\n    assert.is_false(match.falsy()(\"\"))\r\n    assert.is_false(match.falsy()({}))\r\n    assert.is_false(match.falsy()(function() end))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 380,
    "text": "it(\"Checks true() matcher\", function()\r\n    assert.is_false(match.is_true()(nil))\r\n    assert.is_true(match.is_true()(true))\r\n    assert.is_false(match.is_true()(false))\r\n    assert.is_false(match.is_true()(123))\r\n    assert.is_false(match.is_true()(\"\"))\r\n    assert.is_false(match.is_true()({}))\r\n    assert.is_false(match.is_true()(function() end))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 381,
    "text": "it(\"Checks false() matcher\", function()\r\n    assert.is_false(match.is_false()(nil))\r\n    assert.is_false(match.is_false()(true))\r\n    assert.is_true(match.is_false()(false))\r\n    assert.is_false(match.is_false()(123))\r\n    assert.is_false(match.is_false()(\"\"))\r\n    assert.is_false(match.is_false()({}))\r\n    assert.is_false(match.is_false()(function() end))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 382,
    "text": "it(\"Checks nil() matcher\", function()\r\n    assert.is_true(match.is_nil()(nil))\r\n    assert.is_false(match.is_nil()(true))\r\n    assert.is_false(match.is_nil()(false))\r\n    assert.is_false(match.is_nil()(123))\r\n    assert.is_false(match.is_nil()(\"\"))\r\n    assert.is_false(match.is_nil()({}))\r\n    assert.is_false(match.is_nil()(function() end))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 383,
    "text": "it(\"Checks boolean() matcher\", function()\r\n    assert.is_false(match.is_boolean()(nil))\r\n    assert.is_true(match.is_boolean()(true))\r\n    assert.is_true(match.is_boolean()(false))\r\n    assert.is_false(match.is_boolean()(123))\r\n    assert.is_false(match.is_boolean()(\"\"))\r\n    assert.is_false(match.is_boolean()({}))\r\n    assert.is_false(match.is_boolean()(function() end))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 384,
    "text": "it(\"Checks number() matcher\", function()\r\n    assert.is_false(match.is_number()(nil))\r\n    assert.is_false(match.is_number()(true))\r\n    assert.is_false(match.is_number()(false))\r\n    assert.is_true(match.is_number()(123))\r\n    assert.is_false(match.is_number()(\"\"))\r\n    assert.is_false(match.is_number()({}))\r\n    assert.is_false(match.is_number()(function() end))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 385,
    "text": "it(\"Checks string() matcher\", function()\r\n    assert.is_false(match.is_string()(nil))\r\n    assert.is_false(match.is_string()(true))\r\n    assert.is_false(match.is_string()(false))\r\n    assert.is_false(match.is_string()(123))\r\n    assert.is_true(match.is_string()(\"\"))\r\n    assert.is_false(match.is_string()({}))\r\n    assert.is_false(match.is_string()(function() end))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 386,
    "text": "it(\"Checks table() matcher\", function()\r\n    assert.is_false(match.is_boolean()(nil))\r\n    assert.is_false(match.is_table()(nil))\r\n    assert.is_false(match.is_table()(true))\r\n    assert.is_false(match.is_table()(false))\r\n    assert.is_false(match.is_table()(123))\r\n    assert.is_false(match.is_table()(\"\"))\r\n    assert.is_true(match.is_table()({}))\r\n    assert.is_false(match.is_table()(function() end))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 387,
    "text": "it(\"Checks function() matcher\", function()\r\n    assert.is_false(match.is_function()(nil))\r\n    assert.is_false(match.is_function()(true))\r\n    assert.is_false(match.is_function()(false))\r\n    assert.is_false(match.is_function()(123))\r\n    assert.is_false(match.is_function()(\"\"))\r\n    assert.is_false(match.is_function()({}))\r\n    assert.is_true(match.is_function()(function() end))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 388,
    "text": "it(\"Checks userdata() matcher\", function()\r\n    assert.is_true(match.is_userdata()(io.stdout))\r\n    assert.is_false(match.is_userdata()(nil))\r\n    assert.is_false(match.is_userdata()(true))\r\n    assert.is_false(match.is_userdata()(false))\r\n    assert.is_false(match.is_userdata()(123))\r\n    assert.is_false(match.is_userdata()(\"\"))\r\n    assert.is_false(match.is_userdata()({}))\r\n    assert.is_false(match.is_userdata()(function() end))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 389,
    "text": "it(\"Checks thread() matcher\", function()\r\n    local mythread = coroutine.create(function() end)\r\n    assert.is_true(match.is_thread()(mythread))\r\n    assert.is_false(match.is_thread()(nil))\r\n    assert.is_false(match.is_thread()(true))\r\n    assert.is_false(match.is_thread()(false))\r\n    assert.is_false(match.is_thread()(123))\r\n    assert.is_false(match.is_thread()(\"\"))\r\n    assert.is_false(match.is_thread()({}))\r\n    assert.is_false(match.is_thread()(function() end))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 390,
    "text": "it(\"Checks to see if tables 1 and 2 are equal\", function()\r\n    local table1 = { derp = false}\r\n    local table2 = table1\r\n    assert.is_true(match.is_equal(table1)(table2))\r\n    assert.is_true(match.is_equal(table2)(table1))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 391,
    "text": "it(\"Checks equals() matcher to handle nils properly\", function()\r\n    assert.is.error(function() match.is_equals() end)  -- minimum 1 argument\r\n    assert.is_true(match.is_equal(nil)(nil))\r\n    assert.is_false(match.is_equal(\"a string\")(nil))\r\n    assert.is_false(match.is_equal(nil)(\"a string\"))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 392,
    "text": "it(\"Checks the same() matcher for tables with protected metatables\", function()\r\n    local troubleSomeTable = {}\r\n    setmetatable(troubleSomeTable, {__metatable = 0})\r\n    assert.is_true(match.is_same(troubleSomeTable)(troubleSomeTable))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 393,
    "text": "it(\"Checks same() matcher to handle nils properly\", function()\r\n    assert.is.error(function() match.same()() end)  -- minimum 1 arguments\r\n    assert.is_true(match.is_same(nil)(nil))\r\n    assert.is_false(match.is_same(\"a string\")(nil))\r\n    assert.is_false(match.is_same(nil)(\"a string\"))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 394,
    "text": "it(\"Checks ref() matcher\", function()\r\n    local t = {}\r\n    local func = function() end\r\n    local mythread = coroutine.create(func)\r\n    assert.is.error(function() match.is_ref() end)      -- minimum 1 arguments\r\n    assert.is.error(function() match.is_ref(0) end)     -- arg1 must be an object\r\n    assert.is.error(function() match.is_ref('') end)    -- arg1 must be an object\r\n    assert.is.error(function() match.is_ref(nil) end)   -- arg1 must be an object\r\n    assert.is.error(function() match.is_ref(true) end)  -- arg1 must be an object\r\n    assert.is.error(function() match.is_ref(false) end) -- arg1 must be an object\r\n    assert.is_true(match.is_ref(t)(t))\r\n    assert.is_true(match.is_ref(func)(func))\r\n    assert.is_true(match.is_ref(mythread)(mythread))\r\n    assert.is_false(match.is_ref(t)(func))\r\n    assert.is_false(match.is_ref(t)(mythread))\r\n    assert.is_false(match.is_ref(t)(nil))\r\n    assert.is_false(match.is_ref(t)(true))\r\n    assert.is_false(match.is_ref(t)(false))\r\n    assert.is_false(match.is_ref(t)(123))\r\n    assert.is_false(match.is_ref(t)(\"\"))\r\n    assert.is_false(match.is_ref(t)({}))\r\n    assert.is_false(match.is_ref(t)(function() end))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 395,
    "text": "it(\"Checks matches() matcher does string matching\", function()\r\n    assert.is.error(function() match.matches() end)  -- minimum 1 arguments\r\n    assert.is.error(function() match.matches({}) end)  -- arg1 must be a string\r\n    assert.is.error(function() match.matches('s', 's') end)  -- arg2 must be a number or nil\r\n    assert.is_true(match.matches(\"%w+\")(\"test\"))\r\n    assert.is_true(match.has.match(\"%w+\")(\"test\"))\r\n    assert.is_false(match.matches(\"%d+\")(\"derp\"))\r\n    assert.is_true(match.has_match(\"test\", nil, true)(\"test\"))\r\n    assert.is_false(match.has_match(\"%w+\", nil, true)(\"test\"))\r\n    assert.is_true(match.has_match(\"^test\", 5)(\"123 test\"))\r\n    assert.is_false(match.has_match(\"%d+\", '4')(\"123 test\"))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 396,
    "text": "it(\"Checks near() matcher handles tolerances\", function()\r\n    assert.is.error(function() match.near(0) end)  -- minimum 2 arguments\r\n    assert.is.error(function() match.near('a', 0) end)  -- arg1 must be convertable to number\r\n    assert.is.error(function() match.near(0, 'a') end)  -- arg2 must be convertable to number\r\n    assert.is_true(match.is.near(1.5, 0.5)(2.0))\r\n    assert.is_true(match.is.near('1.5', '0.5')('2.0'))\r\n    assert.is_true(match.is_not.near(1.5, 0.499)(2.0))\r\n    assert.is_true(match.is_not.near('1.5', '0.499')('2.0'))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 397,
    "text": "it(\"Checks to see if table1 only contains unique elements\", function()\r\n    local table2 = { derp = false}\r\n    local table3 = { derp = true }\r\n    local table1 = {table2,table3}\r\n    local tablenotunique = {table2,table2}\r\n    assert.is_true(match.is.unique()(table1))\r\n    assert.is_true(match.is_not.unique()(tablenotunique))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 398,
    "text": "it(\"Checks '_' chaining of modifiers and match\", function()\r\n    assert.is_true(match.is_string()(\"abc\"))\r\n    assert.is_true(match.is_true()(true))\r\n    assert.is_true(match.is_not_string()(123))\r\n    assert.is_true(match.is_nil()(nil))\r\n    assert.is_true(match.is_not_nil()({}))\r\n    assert.is_true(match.is_not_true()(false))\r\n    assert.is_true(match.is_not_false()(true))\r\n\r\n    -- verify that failing match return false\r\n    assert.is_false(match.is_string()(1))\r\n    assert.is_false(match.is_true()(false))\r\n    assert.is_false(match.is_not_string()('string!'))\r\n    assert.is_false(match.is_nil()({}))\r\n    assert.is_false(match.is_not_nil()(nil))\r\n    assert.is_false(match.is_not_true()(true))\r\n    assert.is_false(match.is_not_false()(false))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 399,
    "text": "it(\"Checks '.' chaining of modifiers and match\", function()\r\n    assert.is_true(match.is.string()(\"abc\"))\r\n    assert.is_true(match.is.True()(true))\r\n    assert.is_true(match.is.Not.string()(123))\r\n    assert.is_true(match.is.Nil()(nil))\r\n    assert.is_true(match.is.Not.Nil()({}))\r\n    assert.is_true(match.is.Not.True()(false))\r\n    assert.is_true(match.is.Not.False()(true))\r\n    assert.is_true(match.equals.Not(true)(false))\r\n    assert.is_true(match.equals.Not.Not(true)(true))\r\n    assert.is_true(match.Not.equals.Not(true)(true))\r\n\r\n    -- verify that failing match return false\r\n    assert.is_false(match.is.string()(1))\r\n    assert.is_false(match.is.True()(false))\r\n    assert.is_false(match.is.Not.string()('string!'))\r\n    assert.is_false(match.is.Nil()({}))\r\n    assert.is_false(match.is.Not.Nil()(nil))\r\n    assert.is_false(match.is.Not.True()(true))\r\n    assert.is_false(match.is.Not.False()(false))\r\n    assert.is_false(match.equals.Not(true)(true))\r\n    assert.is_false(match.equals.Not.Not(true)(false))\r\n    assert.is_false(match.Not.equals.Not(true)(false))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 400,
    "text": "it(\"Checks called_with() argument matching for spies\", function()\r\n    local s = spy.new(function() return \"foo\" end)\r\n    s(1)\r\n    s(nil, \"\")\r\n    s({}, \"\")\r\n    s(function() end, \"\")\r\n    s(1, 2, 3)\r\n    s(\"a\", \"b\", \"c\", \"d\")\r\n    assert.spy(s).was.called_with(match._)\r\n    assert.spy(s).was.called_with(match.is_number())\r\n    assert.spy(s).was.called_with(match.is_number(), match.is_number(), match.is_number())\r\n    assert.spy(s).was_not.called_with(match.is_string())\r\n    assert.spy(s).was.called_with(match.is_string(), match.is_string(), match.is_string(), match.is_string())\r\n    assert.spy(s).was.called_with(match.is_nil(), match._)\r\n    assert.spy(s).was.called_with(match.is_table(), match._)\r\n    assert.spy(s).was.called_with(match.is_function(), match._)\r\n    assert.spy(s).was_not.called_with(match.is_nil())\r\n    assert.spy(s).was_not.called_with(match.is_table())\r\n    assert.spy(s).was_not.called_with(match.is_function())\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 401,
    "text": "it(\"Checks returned_with() argument matching for spies\", function()\r\n    local s = spy.new(function() return \"foo\" end)\r\n    s()\r\n    assert.spy(s).was.returned_with(match._)\r\n    assert.spy(s).was.returned_with(match.is_string())\r\n    assert.spy(s).was.returned_with(match.is_not_number())\r\n    assert.spy(s).was.returned_with(match.is_not_table())\r\n    assert.spy(s).was_not.returned_with(match.is_number())\r\n    assert.spy(s).was_not.returned_with(match.is_table())\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 402,
    "text": "it(\"Checks on_call_with() argument matching for stubs\", function()\r\n    local test = {}\r\n    local s = stub(test, \"key\").returns(\"foo\")\r\n    s.on_call_with(match.is_string()).returns(\"bar\")\r\n    s.on_call_with(match.is_number()).returns(555)\r\n    s.on_call_with(match.is_table()).returns({\"foo\"})\r\n    s(0)\r\n    s(\"\")\r\n    s({})\r\n    assert.spy(s).was.returned_with(555)\r\n    assert.spy(s).was.returned_with(\"bar\")\r\n    assert.spy(s).was.returned_with({\"foo\"})\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 403,
    "text": "it(\"Checks returned_with() argument matching for spies\", function()\r\n    local s = spy.new(function() return \"foo\" end)\r\n    s()\r\n    assert.spy(s).was.returned_with(match._)\r\n    assert.spy(s).was.returned_with(match.is_string())\r\n    assert.spy(s).was.returned_with(match.is_not_nil())\r\n    assert.spy(s).was.returned_with(match.is_not_number())\r\n    assert.spy(s).was.returned_with(match.is_not_table())\r\n    assert.spy(s).was.returned_with(match.is_not_function())\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 404,
    "text": "it(\"Checks none() composite matcher\", function()\r\n    assert.has.error(function() match.none_of() end)  -- minimum 1 arguments\r\n    assert.has.error(function() match.none_of('') end)  -- arg must be a matcher\r\n    assert.has.error(function() match.none_of('', 0) end)  -- all args must be a match\r\n\r\n    assert.is_false(match.none_of(match.is_string())(''))\r\n    assert.is_true(match.none_of(match.is_number())(''))\r\n    assert.is_true(match.none_of(match.is_number(), match.is_function())(''))\r\n    assert.is_false(match.none_of(match.is_number(), match.is_not_function())(''))\r\n    assert.is_false(match.not_none_of(match.is_number(), match.is_function())(''))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 405,
    "text": "it(\"Checks any() composite matcher\", function()\r\n    assert.has.error(function() match.any_of() end)  -- minimum 1 arguments\r\n    assert.has.error(function() match.any_of('') end)  -- arg must be a matcher\r\n    assert.has.error(function() match.any_of('', 0) end)  -- all args must be a match\r\n\r\n    assert.is_true(match.any_of(match.is_string())(''))\r\n    assert.is_false(match.any_of(match.is_number())(''))\r\n    assert.is_false(match.any_of(match.is_number(), match.is_function())(''))\r\n    assert.is_true(match.any_of(match.is_number(), match.is_not_function())(''))\r\n    assert.is_true(match.not_any_of(match.is_number(), match.is_function())(''))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 406,
    "text": "it(\"Checks all() composite matcher\", function()\r\n    assert.has.error(function() match.all_of() end)  -- minimum 1 arguments\r\n    assert.has.error(function() match.all_of('') end)  -- arg must be a matcher\r\n    assert.has.error(function() match.all_of('', 0) end)  -- all args must be a match\r\n\r\n    assert.is_true(match.all_of(match.is_string())(''))\r\n    assert.is_false(match.all_of(match.is_number())(''))\r\n    assert.is_false(match.all_of(match.is_number(), match.is_function())(''))\r\n    assert.is_false(match.all_of(match.is_number(), match.is_not_function())(''))\r\n    assert.is_true(match.not_all_of(match.is_number(), match.is_function())(''))\r\n    assert.is_true(match.all_of(match.is_not_number(), match.is_not_function())(''))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 407,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 408,
    "text": "",
    "type": "function container"
  }, {
    "id": 409,
    "text": "is_number",
    "type": "global function"
  }, {
    "id": 410,
    "text": "is_string",
    "type": "global function"
  }, {
    "id": 411,
    "text": "is_equal",
    "type": "global function"
  }, {
    "id": 412,
    "text": "is_not.unique",
    "type": "global function"
  }, {
    "id": 413,
    "text": "has.match",
    "type": "global function"
  }, {
    "id": 414,
    "text": "is_not.near",
    "type": "global function"
  }, {
    "id": 415,
    "text": "is_not_table",
    "type": "global function"
  }, {
    "id": 416,
    "text": "has_match",
    "type": "global function"
  }, {
    "id": 417,
    "text": "is_userdata",
    "type": "global function"
  }, {
    "id": 418,
    "text": "matches",
    "type": "global function"
  }, {
    "id": 419,
    "text": "is_boolean",
    "type": "global function"
  }, {
    "id": 420,
    "text": "falsy",
    "type": "global function"
  }, {
    "id": 421,
    "text": "is.Nil",
    "type": "global function"
  }, {
    "id": 422,
    "text": "is.Not.Nil",
    "type": "global function"
  }, {
    "id": 423,
    "text": "is_nil",
    "type": "global function"
  }, {
    "id": 424,
    "text": "not_all_of",
    "type": "global function"
  }, {
    "id": 425,
    "text": "not_any_of",
    "type": "global function"
  }, {
    "id": 426,
    "text": "is_equals",
    "type": "global function"
  }, {
    "id": 427,
    "text": "equals.Not.Not",
    "type": "global function"
  }, {
    "id": 428,
    "text": "is.Not.True",
    "type": "global function"
  }, {
    "id": 429,
    "text": "same",
    "type": "global function"
  }, {
    "id": 430,
    "text": "is.unique",
    "type": "global function"
  }, {
    "id": 431,
    "text": "all_of",
    "type": "global function"
  }, {
    "id": 432,
    "text": "is_function",
    "type": "global function"
  }, {
    "id": 433,
    "text": "is_true",
    "type": "global function"
  }, {
    "id": 434,
    "text": "is_not_number",
    "type": "global function"
  }, {
    "id": 435,
    "text": "equals.Not",
    "type": "global function"
  }, {
    "id": 436,
    "text": "is_not_false",
    "type": "global function"
  }, {
    "id": 437,
    "text": "is_table",
    "type": "global function"
  }, {
    "id": 438,
    "text": "is_not_nil",
    "type": "global function"
  }, {
    "id": 439,
    "text": "is.Not.False",
    "type": "global function"
  }, {
    "id": 440,
    "text": "any_of",
    "type": "global function"
  }, {
    "id": 441,
    "text": "is_not_true",
    "type": "global function"
  }, {
    "id": 442,
    "text": "Not.equals.Not",
    "type": "global function"
  }, {
    "id": 443,
    "text": "_",
    "type": "global function"
  }, {
    "id": 444,
    "text": "is_ref",
    "type": "global function"
  }, {
    "id": 445,
    "text": "near",
    "type": "global function"
  }, {
    "id": 446,
    "text": "is_same",
    "type": "global function"
  }, {
    "id": 447,
    "text": "not_none_of",
    "type": "global function"
  }, {
    "id": 448,
    "text": "is.Not.string",
    "type": "global function"
  }, {
    "id": 449,
    "text": "is.string",
    "type": "global function"
  }, {
    "id": 450,
    "text": "none_of",
    "type": "global function"
  }, {
    "id": 451,
    "text": "is.near",
    "type": "global function"
  }, {
    "id": 452,
    "text": "is_not_function",
    "type": "global function"
  }, {
    "id": 453,
    "text": "truthy",
    "type": "global function"
  }, {
    "id": 454,
    "text": "is.True",
    "type": "global function"
  }, {
    "id": 455,
    "text": "is_false",
    "type": "global function"
  }, {
    "id": 456,
    "text": "is_not_string",
    "type": "global function"
  }, {
    "id": 457,
    "text": "is_thread",
    "type": "global function"
  }, {
    "id": 458,
    "text": "stub",
    "type": "global function"
  }, {
    "id": 459,
    "text": "it",
    "type": "global function"
  }, {
    "id": 460,
    "text": "is_true",
    "type": "global function"
  }, {
    "id": 461,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 462,
    "text": "on_call_with",
    "type": "global function"
  }, {
    "id": 463,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 464,
    "text": "s",
    "type": "global function"
  }, {
    "id": 465,
    "text": "new",
    "type": "global function"
  }, {
    "id": 466,
    "text": "require",
    "type": "global function"
  }, {
    "id": 467,
    "text": "assert.has.error",
    "type": "global function"
  }, {
    "id": 468,
    "text": "spy",
    "type": "global function"
  }, {
    "id": 469,
    "text": "is_false",
    "type": "global function"
  }, {
    "id": 470,
    "text": "type",
    "type": "global function"
  }, {
    "id": 471,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 472,
    "text": "assert.is.error",
    "type": "global function"
  }, {
    "id": 473,
    "text": "create",
    "type": "global function"
  }, {
    "id": 474,
    "text": "",
    "type": "variable container"
  }, {
    "id": 475,
    "text": "",
    "type": "require container"
  }, {
    "id": 476,
    "text": "",
    "type": "require local variable"
  } ]
}