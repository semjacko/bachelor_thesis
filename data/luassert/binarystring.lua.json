{
  "_filename": "binarystring.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luassert/src/formatters/binarystring.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 9,
    "label": "has",
    "to": 14
  }, {
    "from": 9,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 15,
    "label": "has",
    "to": 20
  }, {
    "from": 9,
    "label": "has",
    "to": 21
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "calls",
    "to": 27
  }, {
    "from": 23,
    "label": "calls",
    "to": 26
  }, {
    "from": 23,
    "label": "calls",
    "to": 24
  }, {
    "from": 23,
    "label": "calls",
    "to": 30
  }, {
    "from": 23,
    "label": "calls",
    "to": 29
  }, {
    "from": 23,
    "label": "calls",
    "to": 29
  }, {
    "from": 23,
    "label": "calls",
    "to": 25
  }, {
    "from": 23,
    "label": "calls",
    "to": 28
  }, {
    "from": 1,
    "label": "contains",
    "to": 23
  }, {
    "from": 23,
    "label": "declares",
    "to": 2
  }, {
    "from": 1,
    "label": "contains",
    "to": 31
  }, {
    "from": 1,
    "label": "contains",
    "to": 32
  }, {
    "from": 31,
    "label": "initializes",
    "to": 33
  }, {
    "from": 33,
    "label": "assigns",
    "to": 34
  }, {
    "from": 1,
    "label": "provides",
    "to": 35
  }, {
    "from": 33,
    "label": "represents",
    "to": 36
  }, {
    "from": 35,
    "label": "provides",
    "to": 36
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "binarystring",
    "type": "module"
  }, {
    "id": 2,
    "text": "function (str)\r\n  if type(str) ~= \"string\" then return nil end\r\n  local result = \"Binary string length; \" .. tostring(#str) .. \" bytes\\n\"\r\n  local i = 1\r\n  local hex = \"\"\r\n  local chr = \"\"\r\n  while i <= #str do\r\n    local byte = str:byte(i)\r\n    hex = string.format(\"%s%2x \", hex, byte)\r\n    if byte < 32 then byte = string.byte(\".\") end\r\n    chr = chr .. string.char(byte)\r\n    if math.floor(i/16) == i/16 or i == #str then\r\n      -- reached end of line\r\n      hex = hex .. string.rep(\" \", 16 * 3 - #hex)\r\n      chr = chr .. string.rep(\" \", 16 - #chr)\r\n\r\n      result = result .. hex:sub(1, 8 * 3) .. \"  \" .. hex:sub(8*3+1, -1) .. \" \" .. chr:sub(1,8) .. \" \" .. chr:sub(9,-1) .. \"\\n\"\r\n\r\n      hex = \"\"\r\n      chr = \"\"\r\n    end\r\n    i = i + 1\r\n  end\r\n  return result\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "if type(str) ~= \"string\" then return nil end",
    "type": "statement:if"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "local result = \"Binary string length; \" .. tostring(#str) .. \" bytes\\n\"",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "local i = 1",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "local hex = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "local chr = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "while i <= #str do\r\n    local byte = str:byte(i)\r\n    hex = string.format(\"%s%2x \", hex, byte)\r\n    if byte < 32 then byte = string.byte(\".\") end\r\n    chr = chr .. string.char(byte)\r\n    if math.floor(i/16) == i/16 or i == #str then\r\n      -- reached end of line\r\n      hex = hex .. string.rep(\" \", 16 * 3 - #hex)\r\n      chr = chr .. string.rep(\" \", 16 - #chr)\r\n\r\n      result = result .. hex:sub(1, 8 * 3) .. \"  \" .. hex:sub(8*3+1, -1) .. \" \" .. chr:sub(1,8) .. \" \" .. chr:sub(9,-1) .. \"\\n\"\r\n\r\n      hex = \"\"\r\n      chr = \"\"\r\n    end\r\n    i = i + 1\r\n  end",
    "type": "statement:while"
  }, {
    "id": 10,
    "text": "local byte = str:byte(i)",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "hex = string.format(\"%s%2x \", hex, byte)",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "if byte < 32 then byte = string.byte(\".\") end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "byte = string.byte(\".\")",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "chr = chr .. string.char(byte)",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "if math.floor(i/16) == i/16 or i == #str then\r\n      -- reached end of line\r\n      hex = hex .. string.rep(\" \", 16 * 3 - #hex)\r\n      chr = chr .. string.rep(\" \", 16 - #chr)\r\n\r\n      result = result .. hex:sub(1, 8 * 3) .. \"  \" .. hex:sub(8*3+1, -1) .. \" \" .. chr:sub(1,8) .. \" \" .. chr:sub(9,-1) .. \"\\n\"\r\n\r\n      hex = \"\"\r\n      chr = \"\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "hex = hex .. string.rep(\" \", 16 * 3 - #hex)",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "chr = chr .. string.rep(\" \", 16 - #chr)",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "result = result .. hex:sub(1, 8 * 3) .. \"  \" .. hex:sub(8*3+1, -1) .. \" \" .. chr:sub(1,8) .. \" \" .. chr:sub(9,-1) .. \"\\n\"",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "hex = \"\"",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "chr = \"\"",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "",
    "type": "function container"
  }, {
    "id": 24,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 25,
    "text": "floor",
    "type": "global function"
  }, {
    "id": 26,
    "text": "byte",
    "type": "global function"
  }, {
    "id": 27,
    "text": "format",
    "type": "global function"
  }, {
    "id": 28,
    "text": "char",
    "type": "global function"
  }, {
    "id": 29,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 30,
    "text": "type",
    "type": "global function"
  }, {
    "id": 31,
    "text": "",
    "type": "variable container"
  }, {
    "id": 32,
    "text": "",
    "type": "require container"
  }, {
    "id": 33,
    "text": "",
    "type": "local variable"
  }, {
    "id": 34,
    "text": "",
    "type": "n/a"
  }, {
    "id": 35,
    "text": "",
    "type": "interface container"
  }, {
    "id": 36,
    "text": "",
    "type": "interface"
  } ]
}