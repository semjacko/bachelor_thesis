{
  "_filename": "core.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luassert/src/matchers/core.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 14,
    "label": "has",
    "to": 20
  }, {
    "from": 14,
    "label": "has",
    "to": 21
  }, {
    "from": 14,
    "label": "has",
    "to": 22
  }, {
    "from": 14,
    "label": "has",
    "to": 3
  }, {
    "from": 14,
    "label": "has",
    "to": 23
  }, {
    "from": 14,
    "label": "has",
    "to": 24
  }, {
    "from": 14,
    "label": "has",
    "to": 3
  }, {
    "from": 14,
    "label": "has",
    "to": 3
  }, {
    "from": 14,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 15
  }, {
    "from": 26,
    "label": "has",
    "to": 16
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 30
  }, {
    "from": 26,
    "label": "has",
    "to": 31
  }, {
    "from": 26,
    "label": "has",
    "to": 32
  }, {
    "from": 26,
    "label": "has",
    "to": 33
  }, {
    "from": 26,
    "label": "has",
    "to": 3
  }, {
    "from": 26,
    "label": "has",
    "to": 34
  }, {
    "from": 26,
    "label": "has",
    "to": 35
  }, {
    "from": 26,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 26,
    "label": "has",
    "to": 24
  }, {
    "from": 26,
    "label": "has",
    "to": 3
  }, {
    "from": 26,
    "label": "has",
    "to": 3
  }, {
    "from": 26,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 15
  }, {
    "from": 39,
    "label": "has",
    "to": 16
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 3
  }, {
    "from": 39,
    "label": "has",
    "to": 3
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 15
  }, {
    "from": 42,
    "label": "has",
    "to": 16
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 3
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 42,
    "label": "has",
    "to": 3
  }, {
    "from": 42,
    "label": "has",
    "to": 3
  }, {
    "from": 42,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 15
  }, {
    "from": 47,
    "label": "has",
    "to": 16
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 47,
    "label": "has",
    "to": 51
  }, {
    "from": 47,
    "label": "has",
    "to": 3
  }, {
    "from": 47,
    "label": "has",
    "to": 3
  }, {
    "from": 47,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 3
  }, {
    "from": 53,
    "label": "has",
    "to": 3
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 3
  }, {
    "from": 55,
    "label": "has",
    "to": 3
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 3
  }, {
    "from": 57,
    "label": "has",
    "to": 3
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 3
  }, {
    "from": 59,
    "label": "has",
    "to": 3
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 3
  }, {
    "from": 62,
    "label": "has",
    "to": 3
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 3
  }, {
    "from": 65,
    "label": "has",
    "to": 3
  }, {
    "from": 66,
    "label": "has",
    "to": 3
  }, {
    "from": 67,
    "label": "has",
    "to": 3
  }, {
    "from": 68,
    "label": "has",
    "to": 3
  }, {
    "from": 69,
    "label": "has",
    "to": 3
  }, {
    "from": 70,
    "label": "has",
    "to": 3
  }, {
    "from": 71,
    "label": "has",
    "to": 3
  }, {
    "from": 72,
    "label": "has",
    "to": 7
  }, {
    "from": 72,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 72,
    "label": "has",
    "to": 3
  }, {
    "from": 72,
    "label": "has",
    "to": 3
  }, {
    "from": 72,
    "label": "has",
    "to": 3
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 23
  }, {
    "from": 74,
    "label": "has",
    "to": 24
  }, {
    "from": 74,
    "label": "has",
    "to": 3
  }, {
    "from": 74,
    "label": "has",
    "to": 3
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 34
  }, {
    "from": 76,
    "label": "has",
    "to": 35
  }, {
    "from": 76,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 76,
    "label": "has",
    "to": 24
  }, {
    "from": 76,
    "label": "has",
    "to": 3
  }, {
    "from": 76,
    "label": "has",
    "to": 3
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 3
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 80,
    "label": "has",
    "to": 3
  }, {
    "from": 80,
    "label": "has",
    "to": 3
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 3
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 3
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 3
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 3
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 90,
    "label": "has",
    "to": 3
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 3
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 14,
    "label": "calls",
    "to": 2
  }, {
    "from": 14,
    "label": "calls",
    "to": 2
  }, {
    "from": 59,
    "label": "calls",
    "to": 104
  }, {
    "from": 14,
    "label": "calls",
    "to": 98
  }, {
    "from": 14,
    "label": "calls",
    "to": 98
  }, {
    "from": 14,
    "label": "calls",
    "to": 98
  }, {
    "from": 26,
    "label": "calls",
    "to": 98
  }, {
    "from": 26,
    "label": "calls",
    "to": 98
  }, {
    "from": 26,
    "label": "calls",
    "to": 98
  }, {
    "from": 39,
    "label": "calls",
    "to": 98
  }, {
    "from": 42,
    "label": "calls",
    "to": 98
  }, {
    "from": 47,
    "label": "calls",
    "to": 98
  }, {
    "from": 47,
    "label": "calls",
    "to": 98
  }, {
    "from": 5,
    "label": "calls",
    "to": 103
  }, {
    "from": 5,
    "label": "calls",
    "to": 103
  }, {
    "from": 2,
    "label": "calls",
    "to": 97
  }, {
    "from": 14,
    "label": "calls",
    "to": 97
  }, {
    "from": 26,
    "label": "calls",
    "to": 97
  }, {
    "from": 26,
    "label": "calls",
    "to": 97
  }, {
    "from": 39,
    "label": "calls",
    "to": 97
  }, {
    "from": 42,
    "label": "calls",
    "to": 97
  }, {
    "from": 47,
    "label": "calls",
    "to": 97
  }, {
    "from": 59,
    "label": "calls",
    "to": 57
  }, {
    "from": 2,
    "label": "calls",
    "to": 96
  }, {
    "from": 5,
    "label": "calls",
    "to": 95
  }, {
    "from": 42,
    "label": "calls",
    "to": 95
  }, {
    "from": 14,
    "label": "calls",
    "to": 100
  }, {
    "from": 14,
    "label": "calls",
    "to": 100
  }, {
    "from": 14,
    "label": "calls",
    "to": 100
  }, {
    "from": 26,
    "label": "calls",
    "to": 100
  }, {
    "from": 26,
    "label": "calls",
    "to": 100
  }, {
    "from": 26,
    "label": "calls",
    "to": 100
  }, {
    "from": 39,
    "label": "calls",
    "to": 100
  }, {
    "from": 42,
    "label": "calls",
    "to": 100
  }, {
    "from": 47,
    "label": "calls",
    "to": 100
  }, {
    "from": 47,
    "label": "calls",
    "to": 100
  }, {
    "from": 14,
    "label": "calls",
    "to": 99
  }, {
    "from": 14,
    "label": "calls",
    "to": 99
  }, {
    "from": 14,
    "label": "calls",
    "to": 99
  }, {
    "from": 26,
    "label": "calls",
    "to": 99
  }, {
    "from": 26,
    "label": "calls",
    "to": 105
  }, {
    "from": 26,
    "label": "calls",
    "to": 105
  }, {
    "from": 26,
    "label": "calls",
    "to": 105
  }, {
    "from": 26,
    "label": "calls",
    "to": 105
  }, {
    "from": 42,
    "label": "calls",
    "to": 105
  }, {
    "from": 42,
    "label": "calls",
    "to": 105
  }, {
    "from": 47,
    "label": "calls",
    "to": 105
  }, {
    "from": 62,
    "label": "calls",
    "to": 105
  }, {
    "from": 94,
    "label": "calls",
    "to": 102
  }, {
    "from": 94,
    "label": "calls",
    "to": 102
  }, {
    "from": 94,
    "label": "calls",
    "to": 102
  }, {
    "from": 94,
    "label": "calls",
    "to": 102
  }, {
    "from": 26,
    "label": "calls",
    "to": 101
  }, {
    "from": 64,
    "label": "calls",
    "to": 62
  }, {
    "from": 65,
    "label": "calls",
    "to": 62
  }, {
    "from": 66,
    "label": "calls",
    "to": 62
  }, {
    "from": 67,
    "label": "calls",
    "to": 62
  }, {
    "from": 68,
    "label": "calls",
    "to": 62
  }, {
    "from": 69,
    "label": "calls",
    "to": 62
  }, {
    "from": 70,
    "label": "calls",
    "to": 62
  }, {
    "from": 71,
    "label": "calls",
    "to": 62
  }, {
    "from": 1,
    "label": "contains",
    "to": 94
  }, {
    "from": 94,
    "label": "declares",
    "to": 2
  }, {
    "from": 94,
    "label": "declares",
    "to": 5
  }, {
    "from": 94,
    "label": "declares",
    "to": 14
  }, {
    "from": 94,
    "label": "declares",
    "to": 26
  }, {
    "from": 94,
    "label": "declares",
    "to": 39
  }, {
    "from": 94,
    "label": "declares",
    "to": 42
  }, {
    "from": 94,
    "label": "declares",
    "to": 47
  }, {
    "from": 94,
    "label": "declares",
    "to": 53
  }, {
    "from": 94,
    "label": "declares",
    "to": 55
  }, {
    "from": 94,
    "label": "declares",
    "to": 57
  }, {
    "from": 94,
    "label": "declares",
    "to": 59
  }, {
    "from": 94,
    "label": "declares",
    "to": 62
  }, {
    "from": 94,
    "label": "declares",
    "to": 64
  }, {
    "from": 94,
    "label": "declares",
    "to": 65
  }, {
    "from": 94,
    "label": "declares",
    "to": 66
  }, {
    "from": 94,
    "label": "declares",
    "to": 67
  }, {
    "from": 94,
    "label": "declares",
    "to": 68
  }, {
    "from": 94,
    "label": "declares",
    "to": 69
  }, {
    "from": 94,
    "label": "declares",
    "to": 70
  }, {
    "from": 94,
    "label": "declares",
    "to": 71
  }, {
    "from": 94,
    "label": "declares",
    "to": 72
  }, {
    "from": 94,
    "label": "declares",
    "to": 74
  }, {
    "from": 94,
    "label": "declares",
    "to": 76
  }, {
    "from": 94,
    "label": "declares",
    "to": 78
  }, {
    "from": 94,
    "label": "declares",
    "to": 80
  }, {
    "from": 94,
    "label": "declares",
    "to": 82
  }, {
    "from": 94,
    "label": "declares",
    "to": 84
  }, {
    "from": 94,
    "label": "declares",
    "to": 86
  }, {
    "from": 94,
    "label": "declares",
    "to": 88
  }, {
    "from": 94,
    "label": "declares",
    "to": 90
  }, {
    "from": 94,
    "label": "declares",
    "to": 92
  }, {
    "from": 1,
    "label": "contains",
    "to": 110
  }, {
    "from": 1,
    "label": "contains",
    "to": 111
  }, {
    "from": 111,
    "label": "initializes",
    "to": 112
  }, {
    "from": 112,
    "label": "requires",
    "to": 106
  }, {
    "from": 111,
    "label": "initializes",
    "to": 113
  }, {
    "from": 113,
    "label": "requires",
    "to": 107
  }, {
    "from": 111,
    "label": "initializes",
    "to": 114
  }, {
    "from": 114,
    "label": "requires",
    "to": 108
  }, {
    "from": 111,
    "label": "initializes",
    "to": 115
  }, {
    "from": 115,
    "label": "requires",
    "to": 109
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "core",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function format(val)\r\n  return astate.format_argument(val) or tostring(val)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "local function unique(state, arguments, level)\r\n  local deep = arguments[1]\r\n  return function(value)\r\n    local list = value\r\n    for k,v in pairs(list) do\r\n      for k2, v2 in pairs(list) do\r\n        if k ~= k2 then\r\n          if deep and util.deepcompare(v, v2, true) then\r\n            return false\r\n          else\r\n            if v == v2 then\r\n              return false\r\n            end\r\n          end\r\n        end\r\n      end\r\n    end\r\n    return true\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local deep = arguments[1]",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "local list = value",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "for k,v in pairs(list) do\r\n      for k2, v2 in pairs(list) do\r\n        if k ~= k2 then\r\n          if deep and util.deepcompare(v, v2, true) then\r\n            return false\r\n          else\r\n            if v == v2 then\r\n              return false\r\n            end\r\n          end\r\n        end\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 9,
    "text": "for k2, v2 in pairs(list) do\r\n        if k ~= k2 then\r\n          if deep and util.deepcompare(v, v2, true) then\r\n            return false\r\n          else\r\n            if v == v2 then\r\n              return false\r\n            end\r\n          end\r\n        end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 10,
    "text": "if k ~= k2 then\r\n          if deep and util.deepcompare(v, v2, true) then\r\n            return false\r\n          else\r\n            if v == v2 then\r\n              return false\r\n            end\r\n          end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "if deep and util.deepcompare(v, v2, true) then\r\n            return false\r\n          else\r\n            if v == v2 then\r\n              return false\r\n            end\r\n          end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "if v == v2 then\r\n              return false\r\n            end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "local function near(state, arguments, level)\r\n  local level = (level or 1) + 1\r\n  local argcnt = arguments.n\r\n  assert(argcnt > 1, s(\"assertion.internal.argtolittle\", { \"near\", 2, tostring(argcnt) }), level)\r\n  local expected = tonumber(arguments[1])\r\n  local tolerance = tonumber(arguments[2])\r\n  local numbertype = \"number or object convertible to a number\"\r\n  assert(expected, s(\"assertion.internal.badargtype\", { 1, \"near\", numbertype, format(arguments[1]) }), level)\r\n  assert(tolerance, s(\"assertion.internal.badargtype\", { 2, \"near\", numbertype, format(arguments[2]) }), level)\r\n\r\n  return function(value)\r\n    local actual = tonumber(value)\r\n    if not actual then return false end\r\n    return (actual >= expected - tolerance and actual <= expected + tolerance)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "local level = (level or 1) + 1",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "local argcnt = arguments.n",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "assert(argcnt > 1, s(\"assertion.internal.argtolittle\", { \"near\", 2, tostring(argcnt) }), level)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "local expected = tonumber(arguments[1])",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "local tolerance = tonumber(arguments[2])",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "local numbertype = \"number or object convertible to a number\"",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "assert(expected, s(\"assertion.internal.badargtype\", { 1, \"near\", numbertype, format(arguments[1]) }), level)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "assert(tolerance, s(\"assertion.internal.badargtype\", { 2, \"near\", numbertype, format(arguments[2]) }), level)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "local actual = tonumber(value)",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "if not actual then return false end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "local function matches(state, arguments, level)\r\n  local level = (level or 1) + 1\r\n  local argcnt = arguments.n\r\n  assert(argcnt > 0, s(\"assertion.internal.argtolittle\", { \"matches\", 1, tostring(argcnt) }), level)\r\n  local pattern = arguments[1]\r\n  local init = arguments[2]\r\n  local plain = arguments[3]\r\n  local stringtype = \"string or object convertible to a string\"\r\n  assert(type(pattern) == \"string\", s(\"assertion.internal.badargtype\", { 1, \"matches\", \"string\", type(arguments[1]) }), level)\r\n  assert(init == nil or tonumber(init), s(\"assertion.internal.badargtype\", { 2, \"matches\", \"number\", type(arguments[2]) }), level)\r\n\r\n  return function(value)\r\n    local actualtype = type(value)\r\n    local actual = nil\r\n    if actualtype == \"string\" or actualtype == \"number\" or\r\n      actualtype == \"table\" and (getmetatable(value) or {}).__tostring then\r\n      actual = tostring(value)\r\n    end\r\n    if not actual then return false end\r\n    return (actual:find(pattern, init, plain) ~= nil)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "assert(argcnt > 0, s(\"assertion.internal.argtolittle\", { \"matches\", 1, tostring(argcnt) }), level)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "local pattern = arguments[1]",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "local init = arguments[2]",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "local plain = arguments[3]",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "local stringtype = \"string or object convertible to a string\"",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "assert(type(pattern) == \"string\", s(\"assertion.internal.badargtype\", { 1, \"matches\", \"string\", type(arguments[1]) }), level)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "assert(init == nil or tonumber(init), s(\"assertion.internal.badargtype\", { 2, \"matches\", \"number\", type(arguments[2]) }), level)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "local actualtype = type(value)",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "local actual = nil",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "if actualtype == \"string\" or actualtype == \"number\" or\r\n      actualtype == \"table\" and (getmetatable(value) or {}).__tostring then\r\n      actual = tostring(value)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "actual = tostring(value)",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "local function equals(state, arguments, level)\r\n  local level = (level or 1) + 1\r\n  local argcnt = arguments.n\r\n  assert(argcnt > 0, s(\"assertion.internal.argtolittle\", { \"equals\", 1, tostring(argcnt) }), level)\r\n  return function(value)\r\n    return value == arguments[1]\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "assert(argcnt > 0, s(\"assertion.internal.argtolittle\", { \"equals\", 1, tostring(argcnt) }), level)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "local function same(state, arguments, level)\r\n  local level = (level or 1) + 1\r\n  local argcnt = arguments.n\r\n  assert(argcnt > 0, s(\"assertion.internal.argtolittle\", { \"same\", 1, tostring(argcnt) }), level)\r\n  return function(value)\r\n    if type(value) == 'table' and type(arguments[1]) == 'table' then\r\n      local result = util.deepcompare(value, arguments[1], true)\r\n      return result\r\n    end\r\n    return value == arguments[1]\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "assert(argcnt > 0, s(\"assertion.internal.argtolittle\", { \"same\", 1, tostring(argcnt) }), level)",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "if type(value) == 'table' and type(arguments[1]) == 'table' then\r\n      local result = util.deepcompare(value, arguments[1], true)\r\n      return result\r\n    end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "local result = util.deepcompare(value, arguments[1], true)",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "local function ref(state, arguments, level)\r\n  local level = (level or 1) + 1\r\n  local argcnt = arguments.n\r\n  local argtype = type(arguments[1])\r\n  local isobject = (argtype == \"table\" or argtype == \"function\" or argtype == \"thread\" or argtype == \"userdata\")\r\n  assert(argcnt > 0, s(\"assertion.internal.argtolittle\", { \"ref\", 1, tostring(argcnt) }), level)\r\n  assert(isobject, s(\"assertion.internal.badargtype\", { 1, \"ref\", \"object\", argtype }), level)\r\n  return function(value)\r\n    return value == arguments[1]\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "local argtype = type(arguments[1])",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "local isobject = (argtype == \"table\" or argtype == \"function\" or argtype == \"thread\" or argtype == \"userdata\")",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "assert(argcnt > 0, s(\"assertion.internal.argtolittle\", { \"ref\", 1, tostring(argcnt) }), level)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "assert(isobject, s(\"assertion.internal.badargtype\", { 1, \"ref\", \"object\", argtype }), level)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "local function is_true(state, arguments, level)\r\n  return function(value)\r\n    return value == true\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "local function is_false(state, arguments, level)\r\n  return function(value)\r\n    return value == false\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "local function truthy(state, arguments, level)\r\n  return function(value)\r\n    return value ~= false and value ~= nil\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "local function falsy(state, arguments, level)\r\n  local is_truthy = truthy(state, arguments, level)\r\n  return function(value)\r\n    return not is_truthy(value)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "local is_truthy = truthy(state, arguments, level)",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "local function is_type(state, arguments, level, etype)\r\n  return function(value)\r\n    return type(value) == etype\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "local function is_nil(state, arguments, level)      return is_type(state, arguments, level, \"nil\")      end",
    "type": "function"
  }, {
    "id": 65,
    "text": "local function is_boolean(state, arguments, level)  return is_type(state, arguments, level, \"boolean\")  end",
    "type": "function"
  }, {
    "id": 66,
    "text": "local function is_number(state, arguments, level)   return is_type(state, arguments, level, \"number\")   end",
    "type": "function"
  }, {
    "id": 67,
    "text": "local function is_string(state, arguments, level)   return is_type(state, arguments, level, \"string\")   end",
    "type": "function"
  }, {
    "id": 68,
    "text": "local function is_table(state, arguments, level)    return is_type(state, arguments, level, \"table\")    end",
    "type": "function"
  }, {
    "id": 69,
    "text": "local function is_function(state, arguments, level) return is_type(state, arguments, level, \"function\") end",
    "type": "function"
  }, {
    "id": 70,
    "text": "local function is_userdata(state, arguments, level) return is_type(state, arguments, level, \"userdata\") end",
    "type": "function"
  }, {
    "id": 71,
    "text": "local function is_thread(state, arguments, level)   return is_type(state, arguments, level, \"thread\")   end",
    "type": "function"
  }, {
    "id": 72,
    "text": "function(value)\r\n    local list = value\r\n    for k,v in pairs(list) do\r\n      for k2, v2 in pairs(list) do\r\n        if k ~= k2 then\r\n          if deep and util.deepcompare(v, v2, true) then\r\n            return false\r\n          else\r\n            if v == v2 then\r\n              return false\r\n            end\r\n          end\r\n        end\r\n      end\r\n    end\r\n    return true\r\n  end",
    "type": "function"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function(value)\r\n    local actual = tonumber(value)\r\n    if not actual then return false end\r\n    return (actual >= expected - tolerance and actual <= expected + tolerance)\r\n  end",
    "type": "function"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "function(value)\r\n    local actualtype = type(value)\r\n    local actual = nil\r\n    if actualtype == \"string\" or actualtype == \"number\" or\r\n      actualtype == \"table\" and (getmetatable(value) or {}).__tostring then\r\n      actual = tostring(value)\r\n    end\r\n    if not actual then return false end\r\n    return (actual:find(pattern, init, plain) ~= nil)\r\n  end",
    "type": "function"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "function(value)\r\n    return value == arguments[1]\r\n  end",
    "type": "function"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "function(value)\r\n    if type(value) == 'table' and type(arguments[1]) == 'table' then\r\n      local result = util.deepcompare(value, arguments[1], true)\r\n      return result\r\n    end\r\n    return value == arguments[1]\r\n  end",
    "type": "function"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "function(value)\r\n    return value == arguments[1]\r\n  end",
    "type": "function"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "function(value)\r\n    return value == true\r\n  end",
    "type": "function"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "function(value)\r\n    return value == false\r\n  end",
    "type": "function"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "function(value)\r\n    return value ~= false and value ~= nil\r\n  end",
    "type": "function"
  }, {
    "id": 89,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 90,
    "text": "function(value)\r\n    return not is_truthy(value)\r\n  end",
    "type": "function"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "function(value)\r\n    return type(value) == etype\r\n  end",
    "type": "function"
  }, {
    "id": 93,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 94,
    "text": "",
    "type": "function container"
  }, {
    "id": 95,
    "text": "deepcompare",
    "type": "global function"
  }, {
    "id": 96,
    "text": "format_argument",
    "type": "global function"
  }, {
    "id": 97,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 98,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 99,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 100,
    "text": "s",
    "type": "global function"
  }, {
    "id": 101,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 102,
    "text": "require",
    "type": "global function"
  }, {
    "id": 103,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 104,
    "text": "is_truthy",
    "type": "global function"
  }, {
    "id": 105,
    "text": "type",
    "type": "global function"
  }, {
    "id": 106,
    "text": "assert)",
    "type": "module"
  }, {
    "id": 107,
    "text": "state)",
    "type": "module"
  }, {
    "id": 108,
    "text": "util)",
    "type": "module"
  }, {
    "id": 109,
    "text": "(say)",
    "type": "module"
  }, {
    "id": 110,
    "text": "",
    "type": "variable container"
  }, {
    "id": 111,
    "text": "",
    "type": "require container"
  }, {
    "id": 112,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 113,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 114,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 115,
    "text": "",
    "type": "require local variable"
  } ]
}