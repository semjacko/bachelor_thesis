{
  "_filename": "stub.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luassert/src/stub.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 6,
    "label": "has",
    "to": 11
  }, {
    "from": 6,
    "label": "has",
    "to": 12
  }, {
    "from": 6,
    "label": "has",
    "to": 13
  }, {
    "from": 6,
    "label": "has",
    "to": 14
  }, {
    "from": 6,
    "label": "has",
    "to": 15
  }, {
    "from": 6,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 6,
    "label": "has",
    "to": 18
  }, {
    "from": 6,
    "label": "has",
    "to": 19
  }, {
    "from": 6,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 20,
    "label": "has",
    "to": 24
  }, {
    "from": 20,
    "label": "has",
    "to": 17
  }, {
    "from": 20,
    "label": "has",
    "to": 17
  }, {
    "from": 6,
    "label": "has",
    "to": 25
  }, {
    "from": 6,
    "label": "has",
    "to": 26
  }, {
    "from": 6,
    "label": "has",
    "to": 27
  }, {
    "from": 6,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 28,
    "label": "has",
    "to": 17
  }, {
    "from": 6,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 17
  }, {
    "from": 33,
    "label": "has",
    "to": 17
  }, {
    "from": 6,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 17
  }, {
    "from": 37,
    "label": "has",
    "to": 17
  }, {
    "from": 6,
    "label": "has",
    "to": 39
  }, {
    "from": 6,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 40,
    "label": "has",
    "to": 17
  }, {
    "from": 40,
    "label": "has",
    "to": 34
  }, {
    "from": 40,
    "label": "has",
    "to": 35
  }, {
    "from": 40,
    "label": "has",
    "to": 44
  }, {
    "from": 40,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 17
  }, {
    "from": 40,
    "label": "has",
    "to": 17
  }, {
    "from": 40,
    "label": "has",
    "to": 44
  }, {
    "from": 40,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 17
  }, {
    "from": 40,
    "label": "has",
    "to": 17
  }, {
    "from": 6,
    "label": "has",
    "to": 17
  }, {
    "from": 6,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 17
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 21
  }, {
    "from": 50,
    "label": "has",
    "to": 22
  }, {
    "from": 50,
    "label": "has",
    "to": 23
  }, {
    "from": 50,
    "label": "has",
    "to": 24
  }, {
    "from": 50,
    "label": "has",
    "to": 17
  }, {
    "from": 50,
    "label": "has",
    "to": 17
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 52,
    "label": "has",
    "to": 17
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 17
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 34
  }, {
    "from": 56,
    "label": "has",
    "to": 35
  }, {
    "from": 56,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 17
  }, {
    "from": 56,
    "label": "has",
    "to": 17
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 17
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 17
  }, {
    "from": 60,
    "label": "has",
    "to": 17
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 17
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 17
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 41
  }, {
    "from": 66,
    "label": "has",
    "to": 42
  }, {
    "from": 66,
    "label": "has",
    "to": 43
  }, {
    "from": 66,
    "label": "has",
    "to": 17
  }, {
    "from": 66,
    "label": "has",
    "to": 34
  }, {
    "from": 66,
    "label": "has",
    "to": 35
  }, {
    "from": 66,
    "label": "has",
    "to": 44
  }, {
    "from": 66,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 17
  }, {
    "from": 66,
    "label": "has",
    "to": 17
  }, {
    "from": 66,
    "label": "has",
    "to": 44
  }, {
    "from": 66,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 17
  }, {
    "from": 66,
    "label": "has",
    "to": 17
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 34
  }, {
    "from": 72,
    "label": "has",
    "to": 35
  }, {
    "from": 72,
    "label": "has",
    "to": 44
  }, {
    "from": 72,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 17
  }, {
    "from": 72,
    "label": "has",
    "to": 17
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 44
  }, {
    "from": 74,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 17
  }, {
    "from": 74,
    "label": "has",
    "to": 17
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 17
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 6,
    "label": "calls",
    "to": 87
  }, {
    "from": 6,
    "label": "calls",
    "to": 87
  }, {
    "from": 6,
    "label": "calls",
    "to": 81
  }, {
    "from": 6,
    "label": "calls",
    "to": 81
  }, {
    "from": 6,
    "label": "calls",
    "to": 88
  }, {
    "from": 6,
    "label": "calls",
    "to": 88
  }, {
    "from": 6,
    "label": "calls",
    "to": 83
  }, {
    "from": 6,
    "label": "calls",
    "to": 83
  }, {
    "from": 6,
    "label": "calls",
    "to": 48
  }, {
    "from": 6,
    "label": "calls",
    "to": 79
  }, {
    "from": 6,
    "label": "calls",
    "to": 91
  }, {
    "from": 6,
    "label": "calls",
    "to": 91
  }, {
    "from": 6,
    "label": "calls",
    "to": 89
  }, {
    "from": 6,
    "label": "calls",
    "to": 80
  }, {
    "from": 6,
    "label": "calls",
    "to": 94
  }, {
    "from": 78,
    "label": "calls",
    "to": 95
  }, {
    "from": 6,
    "label": "calls",
    "to": 85
  }, {
    "from": 6,
    "label": "calls",
    "to": 85
  }, {
    "from": 6,
    "label": "calls",
    "to": 85
  }, {
    "from": 6,
    "label": "calls",
    "to": 85
  }, {
    "from": 6,
    "label": "calls",
    "to": 85
  }, {
    "from": 6,
    "label": "calls",
    "to": 84
  }, {
    "from": 6,
    "label": "calls",
    "to": 86
  }, {
    "from": 6,
    "label": "calls",
    "to": 86
  }, {
    "from": 6,
    "label": "calls",
    "to": 86
  }, {
    "from": 78,
    "label": "calls",
    "to": 93
  }, {
    "from": 78,
    "label": "calls",
    "to": 93
  }, {
    "from": 78,
    "label": "calls",
    "to": 93
  }, {
    "from": 78,
    "label": "calls",
    "to": 93
  }, {
    "from": 6,
    "label": "calls",
    "to": 82
  }, {
    "from": 78,
    "label": "calls",
    "to": 6
  }, {
    "from": 4,
    "label": "contains",
    "to": 78
  }, {
    "from": 78,
    "label": "declares",
    "to": 6
  }, {
    "from": 78,
    "label": "declares",
    "to": 48
  }, {
    "from": 78,
    "label": "declares",
    "to": 50
  }, {
    "from": 78,
    "label": "declares",
    "to": 52
  }, {
    "from": 78,
    "label": "declares",
    "to": 54
  }, {
    "from": 78,
    "label": "declares",
    "to": 56
  }, {
    "from": 78,
    "label": "declares",
    "to": 58
  }, {
    "from": 78,
    "label": "declares",
    "to": 60
  }, {
    "from": 78,
    "label": "declares",
    "to": 62
  }, {
    "from": 78,
    "label": "declares",
    "to": 64
  }, {
    "from": 78,
    "label": "declares",
    "to": 66
  }, {
    "from": 78,
    "label": "declares",
    "to": 68
  }, {
    "from": 78,
    "label": "declares",
    "to": 72
  }, {
    "from": 78,
    "label": "declares",
    "to": 74
  }, {
    "from": 78,
    "label": "declares",
    "to": 76
  }, {
    "from": 4,
    "label": "declares",
    "to": 92
  }, {
    "from": 96,
    "label": "requires",
    "to": 4
  }, {
    "from": 4,
    "label": "contains",
    "to": 97
  }, {
    "from": 4,
    "label": "contains",
    "to": 98
  }, {
    "from": 97,
    "label": "initializes",
    "to": 99
  }, {
    "from": 99,
    "label": "assigns",
    "to": 100
  }, {
    "from": 98,
    "label": "initializes",
    "to": 101
  }, {
    "from": 101,
    "label": "requires",
    "to": 1
  }, {
    "from": 98,
    "label": "initializes",
    "to": 102
  }, {
    "from": 102,
    "label": "requires",
    "to": 3
  }, {
    "from": 98,
    "label": "initializes",
    "to": 103
  }, {
    "from": 103,
    "label": "requires",
    "to": 5
  }, {
    "from": 98,
    "label": "initializes",
    "to": 104
  }, {
    "from": 104,
    "label": "requires",
    "to": 2
  }, {
    "from": 4,
    "label": "provides",
    "to": 105
  }, {
    "from": 90,
    "label": "represents",
    "to": 106
  }, {
    "from": 105,
    "label": "provides",
    "to": 106
  }, {
    "from": 99,
    "label": "contains",
    "to": 6
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "assert",
    "type": "module"
  }, {
    "id": 2,
    "text": "compatibility",
    "type": "module"
  }, {
    "id": 3,
    "text": "spy",
    "type": "module"
  }, {
    "id": 4,
    "text": "stub",
    "type": "module"
  }, {
    "id": 5,
    "text": "util",
    "type": "module"
  }, {
    "id": 6,
    "text": "function stub.new(object, key, ...)\r\n  if object == nil and key == nil then\r\n    -- called without arguments, create a 'blank' stub\r\n    object = {}\r\n    key = \"\"\r\n  end\r\n  local return_values_count = select(\"#\", ...)\r\n  local return_values = {...}\r\n  assert(type(object) == \"table\" and key ~= nil, \"stub.new(): Can only create stub on a table key, call with 2 params; table, key\", util.errorlevel())\r\n  assert(object[key] == nil or util.callable(object[key]), \"stub.new(): The element for which to create a stub must either be callable, or be nil\", util.errorlevel())\r\n  local old_elem = object[key]    -- keep existing element (might be nil!)\r\n\r\n  local fn = (return_values_count == 1 and util.callable(return_values[1]) and return_values[1])\r\n  local defaultfunc = fn or function()\r\n    return unpack(return_values, 1, return_values_count)\r\n  end\r\n  local oncalls = {}\r\n  local callbacks = {}\r\n  local stubfunc = function(...)\r\n    local args = {...}\r\n    args.n = select('#', ...)\r\n    local match = util.matchargs(oncalls, args)\r\n    if match then\r\n      return callbacks[match](...)\r\n    end\r\n    return defaultfunc(...)\r\n  end\r\n\r\n  object[key] = stubfunc          -- set the stubfunction\r\n  local s = spy.on(object, key)   -- create a spy on top of the stub function\r\n  local spy_revert = s.revert     -- keep created revert function\r\n\r\n  s.revert = function(self)       -- wrap revert function to restore original element\r\n    if not self.reverted then\r\n      spy_revert(self)\r\n      object[key] = old_elem\r\n      self.reverted = true\r\n    end\r\n    return old_elem\r\n  end\r\n\r\n  s.returns = function(...)\r\n    local return_args = {...}\r\n    local n = select('#', ...)\r\n    defaultfunc = function()\r\n      return unpack(return_args, 1, n)\r\n    end\r\n    return s\r\n  end\r\n\r\n  s.invokes = function(func)\r\n    defaultfunc = function(...)\r\n      return func(...)\r\n    end\r\n    return s\r\n  end\r\n\r\n  s.by_default = {\r\n    returns = s.returns,\r\n    invokes = s.invokes,\r\n  }\r\n\r\n  s.on_call_with = function(...)\r\n    local match_args = {...}\r\n    match_args.n = select('#', ...)\r\n    match_args = util.copyargs(match_args)\r\n    return {\r\n      returns = function(...)\r\n        local return_args = {...}\r\n        local n = select('#', ...)\r\n        table.insert(oncalls, match_args)\r\n        callbacks[match_args] = function()\r\n          return unpack(return_args, 1, n)\r\n        end\r\n        return s\r\n      end,\r\n      invokes = function(func)\r\n        table.insert(oncalls, match_args)\r\n        callbacks[match_args] = function(...)\r\n          return func(...)\r\n        end\r\n        return s\r\n      end\r\n    }\r\n  end\r\n\r\n  return s\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "if object == nil and key == nil then\r\n    -- called without arguments, create a 'blank' stub\r\n    object = {}\r\n    key = \"\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "object = {}",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "key = \"\"",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "local return_values_count = select(\"#\", ...)",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "local return_values = {...}",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "assert(type(object) == \"table\" and key ~= nil, \"stub.new(): Can only create stub on a table key, call with 2 params; table, key\", util.errorlevel())",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "assert(object[key] == nil or util.callable(object[key]), \"stub.new(): The element for which to create a stub must either be callable, or be nil\", util.errorlevel())",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "local old_elem = object[key]",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "local fn = (return_values_count == 1 and util.callable(return_values[1]) and return_values[1])",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "local defaultfunc = fn or function()\r\n    return unpack(return_values, 1, return_values_count)\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 18,
    "text": "local oncalls = {}",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "local callbacks = {}",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "local stubfunc = function(...)\r\n    local args = {...}\r\n    args.n = select('#', ...)\r\n    local match = util.matchargs(oncalls, args)\r\n    if match then\r\n      return callbacks[match](...)\r\n    end\r\n    return defaultfunc(...)\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "local args = {...}",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "args.n = select('#', ...)",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "local match = util.matchargs(oncalls, args)",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "if match then\r\n      return callbacks[match](...)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "object[key] = stubfunc",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "local s = spy.on(object, key)",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "local spy_revert = s.revert",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "s.revert = function(self)       -- wrap revert function to restore original element\r\n    if not self.reverted then\r\n      spy_revert(self)\r\n      object[key] = old_elem\r\n      self.reverted = true\r\n    end\r\n    return old_elem\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "if not self.reverted then\r\n      spy_revert(self)\r\n      object[key] = old_elem\r\n      self.reverted = true\r\n    end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "spy_revert(self)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "object[key] = old_elem",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "self.reverted = true",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "s.returns = function(...)\r\n    local return_args = {...}\r\n    local n = select('#', ...)\r\n    defaultfunc = function()\r\n      return unpack(return_args, 1, n)\r\n    end\r\n    return s\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "local return_args = {...}",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "local n = select('#', ...)",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "defaultfunc = function()\r\n      return unpack(return_args, 1, n)\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "s.invokes = function(func)\r\n    defaultfunc = function(...)\r\n      return func(...)\r\n    end\r\n    return s\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "defaultfunc = function(...)\r\n      return func(...)\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "s.by_default = {\r\n    returns = s.returns,\r\n    invokes = s.invokes,\r\n  }",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "s.on_call_with = function(...)\r\n    local match_args = {...}\r\n    match_args.n = select('#', ...)\r\n    match_args = util.copyargs(match_args)\r\n    return {\r\n      returns = function(...)\r\n        local return_args = {...}\r\n        local n = select('#', ...)\r\n        table.insert(oncalls, match_args)\r\n        callbacks[match_args] = function()\r\n          return unpack(return_args, 1, n)\r\n        end\r\n        return s\r\n      end,\r\n      invokes = function(func)\r\n        table.insert(oncalls, match_args)\r\n        callbacks[match_args] = function(...)\r\n          return func(...)\r\n        end\r\n        return s\r\n      end\r\n    }\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "local match_args = {...}",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "match_args.n = select('#', ...)",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "match_args = util.copyargs(match_args)",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "table.insert(oncalls, match_args)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "callbacks[match_args] = function()\r\n          return unpack(return_args, 1, n)\r\n        end",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "callbacks[match_args] = function(...)\r\n          return func(...)\r\n        end",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function()\r\n    return unpack(return_values, 1, return_values_count)\r\n  end",
    "type": "function"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function(...)\r\n    local args = {...}\r\n    args.n = select('#', ...)\r\n    local match = util.matchargs(oncalls, args)\r\n    if match then\r\n      return callbacks[match](...)\r\n    end\r\n    return defaultfunc(...)\r\n  end",
    "type": "function"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function(self)       -- wrap revert function to restore original element\r\n    if not self.reverted then\r\n      spy_revert(self)\r\n      object[key] = old_elem\r\n      self.reverted = true\r\n    end\r\n    return old_elem\r\n  end",
    "type": "function"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "function()\r\n      return unpack(return_args, 1, n)\r\n    end",
    "type": "function"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function(...)\r\n    local return_args = {...}\r\n    local n = select('#', ...)\r\n    defaultfunc = function()\r\n      return unpack(return_args, 1, n)\r\n    end\r\n    return s\r\n  end",
    "type": "function"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function(...)\r\n      return func(...)\r\n    end",
    "type": "function"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function(func)\r\n    defaultfunc = function(...)\r\n      return func(...)\r\n    end\r\n    return s\r\n  end",
    "type": "function"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "function()\r\n          return unpack(return_args, 1, n)\r\n        end",
    "type": "function"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "function(...)\r\n          return func(...)\r\n        end",
    "type": "function"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function(...)\r\n    local match_args = {...}\r\n    match_args.n = select('#', ...)\r\n    match_args = util.copyargs(match_args)\r\n    return {\r\n      returns = function(...)\r\n        local return_args = {...}\r\n        local n = select('#', ...)\r\n        table.insert(oncalls, match_args)\r\n        callbacks[match_args] = function()\r\n          return unpack(return_args, 1, n)\r\n        end\r\n        return s\r\n      end,\r\n      invokes = function(func)\r\n        table.insert(oncalls, match_args)\r\n        callbacks[match_args] = function(...)\r\n          return func(...)\r\n        end\r\n        return s\r\n      end\r\n    }\r\n  end",
    "type": "function"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "local function set_stub(state, arguments)\r\n  state.payload = arguments[1]\r\n  state.failure_message = arguments[2]\r\nend",
    "type": "function"
  }, {
    "id": 69,
    "text": "state.payload = arguments[1]",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "state.failure_message = arguments[2]",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "function(...)\r\n        local return_args = {...}\r\n        local n = select('#', ...)\r\n        table.insert(oncalls, match_args)\r\n        callbacks[match_args] = function()\r\n          return unpack(return_args, 1, n)\r\n        end\r\n        return s\r\n      end",
    "type": "function"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function(func)\r\n        table.insert(oncalls, match_args)\r\n        callbacks[match_args] = function(...)\r\n          return func(...)\r\n        end\r\n        return s\r\n      end",
    "type": "function"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "function(self, ...)\r\n    -- stub originally was a function only. Now that it is a module table\r\n    -- the __call method is required for backward compatibility\r\n    return stub.new(...)\r\n  end",
    "type": "function"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "",
    "type": "function container"
  }, {
    "id": 79,
    "text": "copyargs",
    "type": "global function"
  }, {
    "id": 80,
    "text": "on",
    "type": "global function"
  }, {
    "id": 81,
    "text": "callable",
    "type": "global function"
  }, {
    "id": 82,
    "text": "matchargs",
    "type": "global function"
  }, {
    "id": 83,
    "text": "errorlevel",
    "type": "global function"
  }, {
    "id": 84,
    "text": "callbacks[match]",
    "type": "global function"
  }, {
    "id": 85,
    "text": "select",
    "type": "global function"
  }, {
    "id": 86,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 87,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 88,
    "text": "func",
    "type": "global function"
  }, {
    "id": 89,
    "text": "spy_revert",
    "type": "global function"
  }, {
    "id": 90,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 91,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 92,
    "text": "new",
    "type": "global function"
  }, {
    "id": 93,
    "text": "require",
    "type": "global function"
  }, {
    "id": 94,
    "text": "type",
    "type": "global function"
  }, {
    "id": 95,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 96,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 97,
    "text": "",
    "type": "variable container"
  }, {
    "id": 98,
    "text": "",
    "type": "require container"
  }, {
    "id": 99,
    "text": "",
    "type": "local variable"
  }, {
    "id": 100,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 101,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 102,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 103,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 104,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 105,
    "text": "",
    "type": "interface container"
  }, {
    "id": 106,
    "text": "",
    "type": "interface"
  } ]
}