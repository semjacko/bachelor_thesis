{
  "_filename": "assert.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luassert/src/assert.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 6,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 6,
    "label": "has",
    "to": 13
  }, {
    "from": 6,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 15,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 20,
    "label": "has",
    "to": 24
  }, {
    "from": 20,
    "label": "has",
    "to": 25
  }, {
    "from": 20,
    "label": "has",
    "to": 26
  }, {
    "from": 20,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 27,
    "label": "has",
    "to": 31
  }, {
    "from": 27,
    "label": "has",
    "to": 32
  }, {
    "from": 20,
    "label": "has",
    "to": 33
  }, {
    "from": 20,
    "label": "has",
    "to": 24
  }, {
    "from": 20,
    "label": "has",
    "to": 25
  }, {
    "from": 20,
    "label": "has",
    "to": 34
  }, {
    "from": 20,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 15,
    "label": "has",
    "to": 13
  }, {
    "from": 15,
    "label": "has",
    "to": 13
  }, {
    "from": 15,
    "label": "has",
    "to": 13
  }, {
    "from": 15,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 13
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 13
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 44,
    "label": "has",
    "to": 48
  }, {
    "from": 44,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 45
  }, {
    "from": 50,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 59,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 63,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 63,
    "label": "has",
    "to": 68
  }, {
    "from": 59,
    "label": "has",
    "to": 13
  }, {
    "from": 59,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 13
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 13
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 80,
    "label": "has",
    "to": 13
  }, {
    "from": 80,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 13
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "calls",
    "to": 89
  }, {
    "from": 87,
    "label": "calls",
    "to": 89
  }, {
    "from": 6,
    "label": "calls",
    "to": 100
  }, {
    "from": 87,
    "label": "calls",
    "to": 100
  }, {
    "from": 87,
    "label": "calls",
    "to": 88
  }, {
    "from": 87,
    "label": "calls",
    "to": 132
  }, {
    "from": 87,
    "label": "calls",
    "to": 6
  }, {
    "from": 6,
    "label": "calls",
    "to": 120
  }, {
    "from": 87,
    "label": "calls",
    "to": 117
  }, {
    "from": 87,
    "label": "calls",
    "to": 117
  }, {
    "from": 87,
    "label": "calls",
    "to": 96
  }, {
    "from": 87,
    "label": "calls",
    "to": 96
  }, {
    "from": 87,
    "label": "calls",
    "to": 96
  }, {
    "from": 87,
    "label": "calls",
    "to": 92
  }, {
    "from": 87,
    "label": "calls",
    "to": 93
  }, {
    "from": 87,
    "label": "calls",
    "to": 102
  }, {
    "from": 87,
    "label": "calls",
    "to": 102
  }, {
    "from": 87,
    "label": "calls",
    "to": 102
  }, {
    "from": 87,
    "label": "calls",
    "to": 131
  }, {
    "from": 87,
    "label": "calls",
    "to": 131
  }, {
    "from": 87,
    "label": "calls",
    "to": 127
  }, {
    "from": 6,
    "label": "calls",
    "to": 94
  }, {
    "from": 87,
    "label": "calls",
    "to": 94
  }, {
    "from": 87,
    "label": "calls",
    "to": 97
  }, {
    "from": 87,
    "label": "calls",
    "to": 147
  }, {
    "from": 87,
    "label": "calls",
    "to": 147
  }, {
    "from": 87,
    "label": "calls",
    "to": 90
  }, {
    "from": 87,
    "label": "calls",
    "to": 152
  }, {
    "from": 87,
    "label": "calls",
    "to": 152
  }, {
    "from": 87,
    "label": "calls",
    "to": 153
  }, {
    "from": 87,
    "label": "calls",
    "to": 98
  }, {
    "from": 87,
    "label": "calls",
    "to": 118
  }, {
    "from": 87,
    "label": "calls",
    "to": 134
  }, {
    "from": 87,
    "label": "calls",
    "to": 134
  }, {
    "from": 87,
    "label": "calls",
    "to": 134
  }, {
    "from": 87,
    "label": "calls",
    "to": 134
  }, {
    "from": 87,
    "label": "calls",
    "to": 134
  }, {
    "from": 87,
    "label": "calls",
    "to": 91
  }, {
    "from": 6,
    "label": "calls",
    "to": 95
  }, {
    "from": 1,
    "label": "contains",
    "to": 87
  }, {
    "from": 87,
    "label": "declares",
    "to": 6
  }, {
    "from": 87,
    "label": "declares",
    "to": 15
  }, {
    "from": 87,
    "label": "declares",
    "to": 39
  }, {
    "from": 87,
    "label": "declares",
    "to": 43
  }, {
    "from": 87,
    "label": "declares",
    "to": 44
  }, {
    "from": 87,
    "label": "declares",
    "to": 50
  }, {
    "from": 87,
    "label": "declares",
    "to": 53
  }, {
    "from": 87,
    "label": "declares",
    "to": 56
  }, {
    "from": 87,
    "label": "declares",
    "to": 59
  }, {
    "from": 87,
    "label": "declares",
    "to": 70
  }, {
    "from": 87,
    "label": "declares",
    "to": 73
  }, {
    "from": 87,
    "label": "declares",
    "to": 75
  }, {
    "from": 87,
    "label": "declares",
    "to": 78
  }, {
    "from": 87,
    "label": "declares",
    "to": 80
  }, {
    "from": 87,
    "label": "declares",
    "to": 85
  }, {
    "from": 1,
    "label": "declares",
    "to": 99
  }, {
    "from": 1,
    "label": "declares",
    "to": 101
  }, {
    "from": 1,
    "label": "declares",
    "to": 103
  }, {
    "from": 1,
    "label": "declares",
    "to": 104
  }, {
    "from": 1,
    "label": "declares",
    "to": 105
  }, {
    "from": 1,
    "label": "declares",
    "to": 106
  }, {
    "from": 1,
    "label": "declares",
    "to": 107
  }, {
    "from": 1,
    "label": "declares",
    "to": 108
  }, {
    "from": 1,
    "label": "declares",
    "to": 109
  }, {
    "from": 1,
    "label": "declares",
    "to": 110
  }, {
    "from": 1,
    "label": "declares",
    "to": 111
  }, {
    "from": 1,
    "label": "declares",
    "to": 112
  }, {
    "from": 1,
    "label": "declares",
    "to": 113
  }, {
    "from": 1,
    "label": "declares",
    "to": 114
  }, {
    "from": 1,
    "label": "declares",
    "to": 115
  }, {
    "from": 1,
    "label": "declares",
    "to": 116
  }, {
    "from": 1,
    "label": "declares",
    "to": 119
  }, {
    "from": 1,
    "label": "declares",
    "to": 121
  }, {
    "from": 1,
    "label": "declares",
    "to": 122
  }, {
    "from": 1,
    "label": "declares",
    "to": 123
  }, {
    "from": 1,
    "label": "declares",
    "to": 124
  }, {
    "from": 1,
    "label": "declares",
    "to": 125
  }, {
    "from": 1,
    "label": "declares",
    "to": 128
  }, {
    "from": 1,
    "label": "declares",
    "to": 129
  }, {
    "from": 1,
    "label": "declares",
    "to": 130
  }, {
    "from": 1,
    "label": "declares",
    "to": 133
  }, {
    "from": 1,
    "label": "declares",
    "to": 135
  }, {
    "from": 1,
    "label": "declares",
    "to": 136
  }, {
    "from": 1,
    "label": "declares",
    "to": 137
  }, {
    "from": 1,
    "label": "declares",
    "to": 138
  }, {
    "from": 1,
    "label": "declares",
    "to": 139
  }, {
    "from": 1,
    "label": "declares",
    "to": 140
  }, {
    "from": 1,
    "label": "declares",
    "to": 141
  }, {
    "from": 1,
    "label": "declares",
    "to": 142
  }, {
    "from": 1,
    "label": "declares",
    "to": 143
  }, {
    "from": 1,
    "label": "declares",
    "to": 144
  }, {
    "from": 1,
    "label": "declares",
    "to": 145
  }, {
    "from": 1,
    "label": "declares",
    "to": 146
  }, {
    "from": 1,
    "label": "declares",
    "to": 148
  }, {
    "from": 1,
    "label": "declares",
    "to": 149
  }, {
    "from": 1,
    "label": "declares",
    "to": 150
  }, {
    "from": 1,
    "label": "declares",
    "to": 151
  }, {
    "from": 1,
    "label": "contains",
    "to": 154
  }, {
    "from": 1,
    "label": "contains",
    "to": 155
  }, {
    "from": 154,
    "label": "initializes",
    "to": 156
  }, {
    "from": 154,
    "label": "initializes",
    "to": 157
  }, {
    "from": 157,
    "label": "assigns",
    "to": 158
  }, {
    "from": 158,
    "label": "assigns",
    "to": 159
  }, {
    "from": 159,
    "label": "assigns",
    "to": 160
  }, {
    "from": 158,
    "label": "assigns",
    "to": 161
  }, {
    "from": 161,
    "label": "assigns",
    "to": 162
  }, {
    "from": 154,
    "label": "initializes",
    "to": 163
  }, {
    "from": 163,
    "label": "assigns",
    "to": 164
  }, {
    "from": 164,
    "label": "assigns",
    "to": 165
  }, {
    "from": 165,
    "label": "assigns",
    "to": 166
  }, {
    "from": 164,
    "label": "assigns",
    "to": 167
  }, {
    "from": 167,
    "label": "assigns",
    "to": 168
  }, {
    "from": 154,
    "label": "initializes",
    "to": 169
  }, {
    "from": 169,
    "label": "assigns",
    "to": 170
  }, {
    "from": 155,
    "label": "initializes",
    "to": 171
  }, {
    "from": 171,
    "label": "requires",
    "to": 172
  }, {
    "from": 155,
    "label": "initializes",
    "to": 173
  }, {
    "from": 173,
    "label": "requires",
    "to": 4
  }, {
    "from": 155,
    "label": "initializes",
    "to": 174
  }, {
    "from": 174,
    "label": "requires",
    "to": 5
  }, {
    "from": 155,
    "label": "initializes",
    "to": 175
  }, {
    "from": 175,
    "label": "requires",
    "to": 2
  }, {
    "from": 155,
    "label": "initializes",
    "to": 176
  }, {
    "from": 176,
    "label": "requires",
    "to": 3
  }, {
    "from": 1,
    "label": "provides",
    "to": 177
  }, {
    "from": 126,
    "label": "represents",
    "to": 178
  }, {
    "from": 177,
    "label": "provides",
    "to": 178
  }, {
    "from": 180,
    "label": "requires",
    "to": 1
  }, {
    "from": 179,
    "label": "contains",
    "to": 43
  }, {
    "from": 23,
    "label": "hasArgument",
    "to": 160
  }, {
    "from": 23,
    "label": "hasArgument",
    "to": 162
  }, {
    "from": 23,
    "label": "hasArgument",
    "to": 166
  }, {
    "from": 23,
    "label": "hasArgument",
    "to": 168
  }, {
    "from": 32,
    "label": "hasArgument",
    "to": 160
  }, {
    "from": 32,
    "label": "hasArgument",
    "to": 162
  }, {
    "from": 32,
    "label": "hasArgument",
    "to": 166
  }, {
    "from": 32,
    "label": "hasArgument",
    "to": 168
  }, {
    "from": 37,
    "label": "hasArgument",
    "to": 160
  }, {
    "from": 37,
    "label": "hasArgument",
    "to": 162
  }, {
    "from": 37,
    "label": "hasArgument",
    "to": 166
  }, {
    "from": 37,
    "label": "hasArgument",
    "to": 168
  }, {
    "from": 41,
    "label": "hasArgument",
    "to": 160
  }, {
    "from": 41,
    "label": "hasArgument",
    "to": 162
  }, {
    "from": 41,
    "label": "hasArgument",
    "to": 166
  }, {
    "from": 41,
    "label": "hasArgument",
    "to": 168
  }, {
    "from": 54,
    "label": "hasArgument",
    "to": 160
  }, {
    "from": 54,
    "label": "hasArgument",
    "to": 162
  }, {
    "from": 54,
    "label": "hasArgument",
    "to": 166
  }, {
    "from": 54,
    "label": "hasArgument",
    "to": 168
  }, {
    "from": 57,
    "label": "hasArgument",
    "to": 160
  }, {
    "from": 57,
    "label": "hasArgument",
    "to": 162
  }, {
    "from": 57,
    "label": "hasArgument",
    "to": 166
  }, {
    "from": 57,
    "label": "hasArgument",
    "to": 168
  }, {
    "from": 71,
    "label": "hasArgument",
    "to": 160
  }, {
    "from": 71,
    "label": "hasArgument",
    "to": 162
  }, {
    "from": 71,
    "label": "hasArgument",
    "to": 166
  }, {
    "from": 71,
    "label": "hasArgument",
    "to": 168
  }, {
    "from": 76,
    "label": "hasArgument",
    "to": 160
  }, {
    "from": 76,
    "label": "hasArgument",
    "to": 162
  }, {
    "from": 76,
    "label": "hasArgument",
    "to": 166
  }, {
    "from": 76,
    "label": "hasArgument",
    "to": 168
  }, {
    "from": 83,
    "label": "hasArgument",
    "to": 160
  }, {
    "from": 83,
    "label": "hasArgument",
    "to": 162
  }, {
    "from": 83,
    "label": "hasArgument",
    "to": 166
  }, {
    "from": 83,
    "label": "hasArgument",
    "to": 168
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "assert",
    "type": "module"
  }, {
    "id": 2,
    "text": "compatibility",
    "type": "module"
  }, {
    "id": 3,
    "text": "namespaces",
    "type": "module"
  }, {
    "id": 4,
    "text": "state",
    "type": "module"
  }, {
    "id": 5,
    "text": "util",
    "type": "module"
  }, {
    "id": 6,
    "text": "local function geterror(assertion_message, failure_message, args)\r\n  if util.hastostring(failure_message) then\r\n    failure_message = tostring(failure_message)\r\n  elseif failure_message ~= nil then\r\n    failure_message = astate.format_argument(failure_message)\r\n  end\r\n  local message = s(assertion_message, obj:format(args))\r\n  if message and failure_message then\r\n    message = failure_message .. \"\\n\" .. message\r\n  end\r\n  return message or failure_message\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "if util.hastostring(failure_message) then\r\n    failure_message = tostring(failure_message)\r\n  elseif failure_message ~= nil then\r\n    failure_message = astate.format_argument(failure_message)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "failure_message = tostring(failure_message)",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "failure_message = astate.format_argument(failure_message)",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "local message = s(assertion_message, obj:format(args))",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "if message and failure_message then\r\n    message = failure_message .. \"\\n\" .. message\r\n  end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "message = failure_message .. \"\\n\" .. message",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function(self, ...)\r\n    local keys = util.extract_keys(\"assertion\", self.tokens)\r\n\r\n    local assertion\r\n\r\n    for _, key in ipairs(keys) do\r\n      assertion = namespace.assertion[key] or assertion\r\n    end\r\n\r\n    if assertion then\r\n      for _, key in ipairs(keys) do\r\n        if namespace.modifier[key] then\r\n          namespace.modifier[key].callback(self)\r\n        end\r\n      end\r\n\r\n      local arguments = {...}\r\n      arguments.n = select('#', ...) -- add argument count for trailing nils\r\n      local val, retargs = assertion.callback(self, arguments, util.errorlevel())\r\n\r\n      if not val == self.mod then\r\n        local message = assertion.positive_message\r\n        if not self.mod then\r\n          message = assertion.negative_message\r\n        end\r\n        local err = geterror(message, rawget(self,\"failure_message\"), arguments)\r\n        error(err or \"assertion failed!\", util.errorlevel())\r\n      end\r\n\r\n      if retargs then\r\n        return unpack(retargs)\r\n      end\r\n      return ...\r\n    else\r\n      local arguments = {...}\r\n      arguments.n = select('#', ...)\r\n      self.tokens = {}\r\n\r\n      for _, key in ipairs(keys) do\r\n        if namespace.modifier[key] then\r\n          namespace.modifier[key].callback(self, arguments, util.errorlevel())\r\n        end\r\n      end\r\n    end\r\n\r\n    return self\r\n  end",
    "type": "function"
  }, {
    "id": 16,
    "text": "local keys = util.extract_keys(\"assertion\", self.tokens)",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "local assertion",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "for _, key in ipairs(keys) do\r\n      assertion = namespace.assertion[key] or assertion\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 19,
    "text": "assertion = namespace.assertion[key] or assertion",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "if assertion then\r\n      for _, key in ipairs(keys) do\r\n        if namespace.modifier[key] then\r\n          namespace.modifier[key].callback(self)\r\n        end\r\n      end\r\n\r\n      local arguments = {...}\r\n      arguments.n = select('#', ...) -- add argument count for trailing nils\r\n      local val, retargs = assertion.callback(self, arguments, util.errorlevel())\r\n\r\n      if not val == self.mod then\r\n        local message = assertion.positive_message\r\n        if not self.mod then\r\n          message = assertion.negative_message\r\n        end\r\n        local err = geterror(message, rawget(self,\"failure_message\"), arguments)\r\n        error(err or \"assertion failed!\", util.errorlevel())\r\n      end\r\n\r\n      if retargs then\r\n        return unpack(retargs)\r\n      end\r\n      return ...\r\n    else\r\n      local arguments = {...}\r\n      arguments.n = select('#', ...)\r\n      self.tokens = {}\r\n\r\n      for _, key in ipairs(keys) do\r\n        if namespace.modifier[key] then\r\n          namespace.modifier[key].callback(self, arguments, util.errorlevel())\r\n        end\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "for _, key in ipairs(keys) do\r\n        if namespace.modifier[key] then\r\n          namespace.modifier[key].callback(self)\r\n        end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 22,
    "text": "if namespace.modifier[key] then\r\n          namespace.modifier[key].callback(self)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "namespace.modifier[key].callback(self)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "local arguments = {...}",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "arguments.n = select('#', ...)",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "local val, retargs = assertion.callback(self, arguments, util.errorlevel())",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "if not val == self.mod then\r\n        local message = assertion.positive_message\r\n        if not self.mod then\r\n          message = assertion.negative_message\r\n        end\r\n        local err = geterror(message, rawget(self,\"failure_message\"), arguments)\r\n        error(err or \"assertion failed!\", util.errorlevel())\r\n      end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "local message = assertion.positive_message",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "if not self.mod then\r\n          message = assertion.negative_message\r\n        end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "message = assertion.negative_message",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "local err = geterror(message, rawget(self,\"failure_message\"), arguments)",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "error(err or \"assertion failed!\", util.errorlevel())",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "if retargs then\r\n        return unpack(retargs)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "self.tokens = {}",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "for _, key in ipairs(keys) do\r\n        if namespace.modifier[key] then\r\n          namespace.modifier[key].callback(self, arguments, util.errorlevel())\r\n        end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 36,
    "text": "if namespace.modifier[key] then\r\n          namespace.modifier[key].callback(self, arguments, util.errorlevel())\r\n        end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "namespace.modifier[key].callback(self, arguments, util.errorlevel())",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function(self, key)\r\n    for token in key:lower():gmatch('[^_]+') do\r\n      table.insert(self.tokens, token)\r\n    end\r\n\r\n    return self\r\n  end",
    "type": "function"
  }, {
    "id": 40,
    "text": "for token in key:lower():gmatch('[^_]+') do\r\n      table.insert(self.tokens, token)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 41,
    "text": "table.insert(self.tokens, token)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function() return setmetatable({mod=true, tokens={}}, __state_meta) end",
    "type": "function"
  }, {
    "id": 44,
    "text": "function(self, nspace, name, callback, positive_message, negative_message)\r\n    local lowername = name:lower()\r\n    if not namespace[nspace] then\r\n      namespace[nspace] = {}\r\n    end\r\n    namespace[nspace][lowername] = {\r\n      callback = callback,\r\n      name = lowername,\r\n      positive_message=positive_message,\r\n      negative_message=negative_message\r\n    }\r\n  end",
    "type": "function"
  }, {
    "id": 45,
    "text": "local lowername = name:lower()",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "if not namespace[nspace] then\r\n      namespace[nspace] = {}\r\n    end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "namespace[nspace] = {}",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "namespace[nspace][lowername] = {\r\n      callback = callback,\r\n      name = lowername,\r\n      positive_message=positive_message,\r\n      negative_message=negative_message\r\n    }",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function(self, nspace, name)\r\n    local lowername = name:lower()\r\n    if not namespace[nspace] then\r\n      namespace[nspace] = {}\r\n    end\r\n    namespace[nspace][lowername] = nil\r\n  end",
    "type": "function"
  }, {
    "id": 51,
    "text": "namespace[nspace][lowername] = nil",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function(self, callback)\r\n    astate.add_formatter(callback)\r\n  end",
    "type": "function"
  }, {
    "id": 54,
    "text": "astate.add_formatter(callback)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function(self, fmtr)\r\n    astate.remove_formatter(fmtr)\r\n  end",
    "type": "function"
  }, {
    "id": 57,
    "text": "astate.remove_formatter(fmtr)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function(self, args)\r\n    -- args.n specifies the number of arguments in case of 'trailing nil' arguments which get lost\r\n    local nofmt = args.nofmt or {}  -- arguments in this list should not be formatted\r\n    local fmtargs = args.fmtargs or {} -- additional arguments to be passed to formatter\r\n    for i = 1, (args.n or #args) do -- cannot use pairs because table might have nils\r\n      if not nofmt[i] then\r\n        local val = args[i]\r\n        local valfmt = astate.format_argument(val, nil, fmtargs[i])\r\n        if valfmt == nil then valfmt = tostring(val) end -- no formatter found\r\n        args[i] = valfmt\r\n      end\r\n    end\r\n    return args\r\n  end",
    "type": "function"
  }, {
    "id": 60,
    "text": "local nofmt = args.nofmt or {}",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "local fmtargs = args.fmtargs or {}",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "for i = 1, (args.n or #args) do -- cannot use pairs because table might have nils\r\n      if not nofmt[i] then\r\n        local val = args[i]\r\n        local valfmt = astate.format_argument(val, nil, fmtargs[i])\r\n        if valfmt == nil then valfmt = tostring(val) end -- no formatter found\r\n        args[i] = valfmt\r\n      end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 63,
    "text": "if not nofmt[i] then\r\n        local val = args[i]\r\n        local valfmt = astate.format_argument(val, nil, fmtargs[i])\r\n        if valfmt == nil then valfmt = tostring(val) end -- no formatter found\r\n        args[i] = valfmt\r\n      end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "local val = args[i]",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "local valfmt = astate.format_argument(val, nil, fmtargs[i])",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "if valfmt == nil then valfmt = tostring(val) end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "valfmt = tostring(val)",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "args[i] = valfmt",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function(self, name, value)\r\n    astate.set_parameter(name, value)\r\n  end",
    "type": "function"
  }, {
    "id": 71,
    "text": "astate.set_parameter(name, value)",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "function(self, name)\r\n    return astate.get_parameter(name)\r\n  end",
    "type": "function"
  }, {
    "id": 74,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 75,
    "text": "function(self, spy)\r\n    astate.add_spy(spy)\r\n  end",
    "type": "function"
  }, {
    "id": 76,
    "text": "astate.add_spy(spy)",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "function(self)\r\n    return astate.snapshot()\r\n  end",
    "type": "function"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "function(self, bool, message, level, ...)\r\n    if not bool then\r\n      local level = (level or 1) + 1\r\n      error(message or \"assertion failed!\", level)\r\n    end\r\n    return bool , message , level , ...\r\n  end",
    "type": "function"
  }, {
    "id": 81,
    "text": "if not bool then\r\n      local level = (level or 1) + 1\r\n      error(message or \"assertion failed!\", level)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 82,
    "text": "local level = (level or 1) + 1",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "error(message or \"assertion failed!\", level)",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "function(self, key)\r\n    return rawget(self, key) or self.state()[key]\r\n  end",
    "type": "function"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "",
    "type": "function container"
  }, {
    "id": 88,
    "text": "set_parameter",
    "type": "global function"
  }, {
    "id": 89,
    "text": "modifier[key].callback",
    "type": "global function"
  }, {
    "id": 90,
    "text": "add_spy",
    "type": "global function"
  }, {
    "id": 91,
    "text": "remove_formatter",
    "type": "global function"
  }, {
    "id": 92,
    "text": "get_parameter",
    "type": "global function"
  }, {
    "id": 93,
    "text": "add_formatter",
    "type": "global function"
  }, {
    "id": 94,
    "text": "format_argument",
    "type": "global function"
  }, {
    "id": 95,
    "text": "hastostring",
    "type": "global function"
  }, {
    "id": 96,
    "text": "errorlevel",
    "type": "global function"
  }, {
    "id": 97,
    "text": "snapshot",
    "type": "global function"
  }, {
    "id": 98,
    "text": "extract_keys",
    "type": "global function"
  }, {
    "id": 99,
    "text": "not_returned_arguments",
    "type": "global function"
  }, {
    "id": 100,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 101,
    "text": "is_not_nil",
    "type": "global function"
  }, {
    "id": 102,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 103,
    "text": "has_error",
    "type": "global function"
  }, {
    "id": 104,
    "text": "has_no_error",
    "type": "global function"
  }, {
    "id": 105,
    "text": "stub",
    "type": "global function"
  }, {
    "id": 106,
    "text": "returned_arguments",
    "type": "global function"
  }, {
    "id": 107,
    "text": "is_truthy",
    "type": "global function"
  }, {
    "id": 108,
    "text": "is_boolean",
    "type": "global function"
  }, {
    "id": 109,
    "text": "near",
    "type": "global function"
  }, {
    "id": 110,
    "text": "is_true",
    "type": "global function"
  }, {
    "id": 111,
    "text": "not_has_property",
    "type": "global function"
  }, {
    "id": 112,
    "text": "same",
    "type": "global function"
  }, {
    "id": 113,
    "text": "error",
    "type": "global function"
  }, {
    "id": 114,
    "text": "no_error_matches",
    "type": "global function"
  }, {
    "id": 115,
    "text": "has_property",
    "type": "global function"
  }, {
    "id": 116,
    "text": "is_nil",
    "type": "global function"
  }, {
    "id": 117,
    "text": "select",
    "type": "global function"
  }, {
    "id": 118,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 119,
    "text": "does_error_match",
    "type": "global function"
  }, {
    "id": 120,
    "text": "s",
    "type": "global function"
  }, {
    "id": 121,
    "text": "is_string",
    "type": "global function"
  }, {
    "id": 122,
    "text": "are_not_same",
    "type": "global function"
  }, {
    "id": 123,
    "text": "message",
    "type": "global function"
  }, {
    "id": 124,
    "text": "has_match",
    "type": "global function"
  }, {
    "id": 125,
    "text": "is_equal",
    "type": "global function"
  }, {
    "id": 126,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 127,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 128,
    "text": "is_table",
    "type": "global function"
  }, {
    "id": 129,
    "text": "is_not_false",
    "type": "global function"
  }, {
    "id": 130,
    "text": "are_equal",
    "type": "global function"
  }, {
    "id": 131,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 132,
    "text": "callback",
    "type": "global function"
  }, {
    "id": 133,
    "text": "is_number",
    "type": "global function"
  }, {
    "id": 134,
    "text": "require",
    "type": "global function"
  }, {
    "id": 135,
    "text": "is_unique",
    "type": "global function"
  }, {
    "id": 136,
    "text": "has_no_match",
    "type": "global function"
  }, {
    "id": 137,
    "text": "error_matches",
    "type": "global function"
  }, {
    "id": 138,
    "text": "no_has_property",
    "type": "global function"
  }, {
    "id": 139,
    "text": "is_falsy",
    "type": "global function"
  }, {
    "id": 140,
    "text": "equals",
    "type": "global function"
  }, {
    "id": 141,
    "text": "matches_error",
    "type": "global function"
  }, {
    "id": 142,
    "text": "is_not_true",
    "type": "global function"
  }, {
    "id": 143,
    "text": "is_near",
    "type": "global function"
  }, {
    "id": 144,
    "text": "matches",
    "type": "global function"
  }, {
    "id": 145,
    "text": "errors",
    "type": "global function"
  }, {
    "id": 146,
    "text": "truthy",
    "type": "global function"
  }, {
    "id": 147,
    "text": "error",
    "type": "global function"
  }, {
    "id": 148,
    "text": "is_not_string",
    "type": "global function"
  }, {
    "id": 149,
    "text": "is_same",
    "type": "global function"
  }, {
    "id": 150,
    "text": "spy",
    "type": "global function"
  }, {
    "id": 151,
    "text": "is_false",
    "type": "global function"
  }, {
    "id": 152,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 153,
    "text": "state",
    "type": "global function"
  }, {
    "id": 154,
    "text": "",
    "type": "variable container"
  }, {
    "id": 155,
    "text": "",
    "type": "require container"
  }, {
    "id": 156,
    "text": "",
    "type": "local variable"
  }, {
    "id": 157,
    "text": "",
    "type": "local variable"
  }, {
    "id": 158,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 159,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 160,
    "text": "",
    "type": "function"
  }, {
    "id": 161,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 162,
    "text": "",
    "type": "function"
  }, {
    "id": 163,
    "text": "",
    "type": "local variable"
  }, {
    "id": 164,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 165,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 166,
    "text": "",
    "type": "function"
  }, {
    "id": 167,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 168,
    "text": "",
    "type": "function"
  }, {
    "id": 169,
    "text": "",
    "type": "global variable"
  }, {
    "id": 170,
    "text": "",
    "type": "n/a"
  }, {
    "id": 171,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 172,
    "text": "say",
    "type": "module"
  }, {
    "id": 173,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 174,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 175,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 176,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 177,
    "text": "",
    "type": "interface container"
  }, {
    "id": 178,
    "text": "",
    "type": "interface"
  }, {
    "id": 179,
    "text": "",
    "type": "local variable"
  }, {
    "id": 180,
    "text": "",
    "type": "require local variable"
  } ]
}