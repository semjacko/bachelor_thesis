{
  "_filename": "stub_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/luassert/spec/stub_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 12
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 20
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 25,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 32,
    "label": "has",
    "to": 36
  }, {
    "from": 32,
    "label": "has",
    "to": 37
  }, {
    "from": 32,
    "label": "has",
    "to": 38
  }, {
    "from": 32,
    "label": "has",
    "to": 39
  }, {
    "from": 32,
    "label": "has",
    "to": 40
  }, {
    "from": 32,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 42
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 4
  }, {
    "from": 46,
    "label": "has",
    "to": 5
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 44,
    "label": "has",
    "to": 48
  }, {
    "from": 44,
    "label": "has",
    "to": 49
  }, {
    "from": 44,
    "label": "has",
    "to": 48
  }, {
    "from": 44,
    "label": "has",
    "to": 50
  }, {
    "from": 44,
    "label": "has",
    "to": 48
  }, {
    "from": 44,
    "label": "has",
    "to": 51
  }, {
    "from": 44,
    "label": "has",
    "to": 52
  }, {
    "from": 44,
    "label": "has",
    "to": 53
  }, {
    "from": 44,
    "label": "has",
    "to": 52
  }, {
    "from": 44,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 9
  }, {
    "from": 55,
    "label": "has",
    "to": 58
  }, {
    "from": 55,
    "label": "has",
    "to": 33
  }, {
    "from": 55,
    "label": "has",
    "to": 59
  }, {
    "from": 55,
    "label": "has",
    "to": 60
  }, {
    "from": 55,
    "label": "has",
    "to": 60
  }, {
    "from": 55,
    "label": "has",
    "to": 37
  }, {
    "from": 55,
    "label": "has",
    "to": 61
  }, {
    "from": 55,
    "label": "has",
    "to": 62
  }, {
    "from": 55,
    "label": "has",
    "to": 63
  }, {
    "from": 55,
    "label": "has",
    "to": 60
  }, {
    "from": 55,
    "label": "has",
    "to": 64
  }, {
    "from": 55,
    "label": "has",
    "to": 65
  }, {
    "from": 55,
    "label": "has",
    "to": 66
  }, {
    "from": 55,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 33
  }, {
    "from": 68,
    "label": "has",
    "to": 59
  }, {
    "from": 68,
    "label": "has",
    "to": 60
  }, {
    "from": 68,
    "label": "has",
    "to": 60
  }, {
    "from": 68,
    "label": "has",
    "to": 37
  }, {
    "from": 68,
    "label": "has",
    "to": 62
  }, {
    "from": 68,
    "label": "has",
    "to": 63
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 59
  }, {
    "from": 72,
    "label": "has",
    "to": 60
  }, {
    "from": 72,
    "label": "has",
    "to": 60
  }, {
    "from": 72,
    "label": "has",
    "to": 37
  }, {
    "from": 72,
    "label": "has",
    "to": 62
  }, {
    "from": 72,
    "label": "has",
    "to": 63
  }, {
    "from": 72,
    "label": "has",
    "to": 70
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 75,
    "label": "has",
    "to": 33
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 75,
    "label": "has",
    "to": 60
  }, {
    "from": 75,
    "label": "has",
    "to": 78
  }, {
    "from": 75,
    "label": "has",
    "to": 79
  }, {
    "from": 75,
    "label": "has",
    "to": 80
  }, {
    "from": 75,
    "label": "has",
    "to": 81
  }, {
    "from": 75,
    "label": "has",
    "to": 82
  }, {
    "from": 75,
    "label": "has",
    "to": 78
  }, {
    "from": 75,
    "label": "has",
    "to": 83
  }, {
    "from": 75,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 20
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 88,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 92,
    "label": "has",
    "to": 95
  }, {
    "from": 92,
    "label": "has",
    "to": 96
  }, {
    "from": 92,
    "label": "has",
    "to": 97
  }, {
    "from": 92,
    "label": "has",
    "to": 98
  }, {
    "from": 99,
    "label": "has",
    "to": 12
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 12
  }, {
    "from": 101,
    "label": "has",
    "to": 103
  }, {
    "from": 101,
    "label": "has",
    "to": 95
  }, {
    "from": 101,
    "label": "has",
    "to": 96
  }, {
    "from": 101,
    "label": "has",
    "to": 97
  }, {
    "from": 101,
    "label": "has",
    "to": 104
  }, {
    "from": 105,
    "label": "has",
    "to": 12
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 12
  }, {
    "from": 107,
    "label": "has",
    "to": 109
  }, {
    "from": 107,
    "label": "has",
    "to": 103
  }, {
    "from": 107,
    "label": "has",
    "to": 95
  }, {
    "from": 107,
    "label": "has",
    "to": 96
  }, {
    "from": 107,
    "label": "has",
    "to": 97
  }, {
    "from": 107,
    "label": "has",
    "to": 110
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 111,
    "label": "has",
    "to": 94
  }, {
    "from": 111,
    "label": "has",
    "to": 114
  }, {
    "from": 111,
    "label": "has",
    "to": 96
  }, {
    "from": 111,
    "label": "has",
    "to": 97
  }, {
    "from": 111,
    "label": "has",
    "to": 115
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 116,
    "label": "has",
    "to": 103
  }, {
    "from": 116,
    "label": "has",
    "to": 118
  }, {
    "from": 116,
    "label": "has",
    "to": 119
  }, {
    "from": 116,
    "label": "has",
    "to": 97
  }, {
    "from": 116,
    "label": "has",
    "to": 120
  }, {
    "from": 121,
    "label": "has",
    "to": 12
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 12
  }, {
    "from": 123,
    "label": "has",
    "to": 103
  }, {
    "from": 123,
    "label": "has",
    "to": 95
  }, {
    "from": 123,
    "label": "has",
    "to": 96
  }, {
    "from": 123,
    "label": "has",
    "to": 97
  }, {
    "from": 123,
    "label": "has",
    "to": 125
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 126,
    "label": "has",
    "to": 128
  }, {
    "from": 126,
    "label": "has",
    "to": 95
  }, {
    "from": 126,
    "label": "has",
    "to": 129
  }, {
    "from": 126,
    "label": "has",
    "to": 130
  }, {
    "from": 131,
    "label": "has",
    "to": 12
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 134,
    "label": "has",
    "to": 12
  }, {
    "from": 133,
    "label": "has",
    "to": 135
  }, {
    "from": 133,
    "label": "has",
    "to": 95
  }, {
    "from": 133,
    "label": "has",
    "to": 129
  }, {
    "from": 133,
    "label": "has",
    "to": 136
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 137,
    "label": "has",
    "to": 139
  }, {
    "from": 137,
    "label": "has",
    "to": 140
  }, {
    "from": 137,
    "label": "has",
    "to": 141
  }, {
    "from": 137,
    "label": "has",
    "to": 142
  }, {
    "from": 137,
    "label": "has",
    "to": 143
  }, {
    "from": 137,
    "label": "has",
    "to": 144
  }, {
    "from": 137,
    "label": "has",
    "to": 145
  }, {
    "from": 137,
    "label": "has",
    "to": 95
  }, {
    "from": 137,
    "label": "has",
    "to": 96
  }, {
    "from": 137,
    "label": "has",
    "to": 97
  }, {
    "from": 137,
    "label": "has",
    "to": 146
  }, {
    "from": 137,
    "label": "has",
    "to": 147
  }, {
    "from": 137,
    "label": "has",
    "to": 148
  }, {
    "from": 137,
    "label": "has",
    "to": 149
  }, {
    "from": 137,
    "label": "has",
    "to": 150
  }, {
    "from": 151,
    "label": "has",
    "to": 12
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 153,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 12
  }, {
    "from": 153,
    "label": "has",
    "to": 156
  }, {
    "from": 153,
    "label": "has",
    "to": 157
  }, {
    "from": 153,
    "label": "has",
    "to": 158
  }, {
    "from": 153,
    "label": "has",
    "to": 96
  }, {
    "from": 153,
    "label": "has",
    "to": 97
  }, {
    "from": 153,
    "label": "has",
    "to": 159
  }, {
    "from": 153,
    "label": "has",
    "to": 160
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 161,
    "label": "has",
    "to": 154
  }, {
    "from": 161,
    "label": "has",
    "to": 163
  }, {
    "from": 161,
    "label": "has",
    "to": 164
  }, {
    "from": 161,
    "label": "has",
    "to": 165
  }, {
    "from": 161,
    "label": "has",
    "to": 166
  }, {
    "from": 161,
    "label": "has",
    "to": 167
  }, {
    "from": 161,
    "label": "has",
    "to": 168
  }, {
    "from": 161,
    "label": "has",
    "to": 169
  }, {
    "from": 170,
    "label": "has",
    "to": 12
  }, {
    "from": 171,
    "label": "has",
    "to": 162
  }, {
    "from": 171,
    "label": "has",
    "to": 154
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 12
  }, {
    "from": 171,
    "label": "has",
    "to": 164
  }, {
    "from": 171,
    "label": "has",
    "to": 165
  }, {
    "from": 171,
    "label": "has",
    "to": 166
  }, {
    "from": 171,
    "label": "has",
    "to": 173
  }, {
    "from": 171,
    "label": "has",
    "to": 168
  }, {
    "from": 171,
    "label": "has",
    "to": 174
  }, {
    "from": 175,
    "label": "has",
    "to": 176
  }, {
    "from": 175,
    "label": "has",
    "to": 177
  }, {
    "from": 175,
    "label": "has",
    "to": 154
  }, {
    "from": 175,
    "label": "has",
    "to": 178
  }, {
    "from": 175,
    "label": "has",
    "to": 179
  }, {
    "from": 175,
    "label": "has",
    "to": 180
  }, {
    "from": 175,
    "label": "has",
    "to": 181
  }, {
    "from": 175,
    "label": "has",
    "to": 182
  }, {
    "from": 175,
    "label": "has",
    "to": 183
  }, {
    "from": 175,
    "label": "has",
    "to": 167
  }, {
    "from": 175,
    "label": "has",
    "to": 159
  }, {
    "from": 175,
    "label": "has",
    "to": 168
  }, {
    "from": 175,
    "label": "has",
    "to": 184
  }, {
    "from": 185,
    "label": "has",
    "to": 186
  }, {
    "from": 185,
    "label": "has",
    "to": 187
  }, {
    "from": 187,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 12
  }, {
    "from": 185,
    "label": "has",
    "to": 188
  }, {
    "from": 188,
    "label": "has",
    "to": 20
  }, {
    "from": 188,
    "label": "has",
    "to": 21
  }, {
    "from": 188,
    "label": "has",
    "to": 22
  }, {
    "from": 188,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 18
  }, {
    "from": 185,
    "label": "has",
    "to": 189
  }, {
    "from": 189,
    "label": "has",
    "to": 20
  }, {
    "from": 189,
    "label": "has",
    "to": 26
  }, {
    "from": 189,
    "label": "has",
    "to": 27
  }, {
    "from": 189,
    "label": "has",
    "to": 28
  }, {
    "from": 185,
    "label": "has",
    "to": 190
  }, {
    "from": 190,
    "label": "has",
    "to": 33
  }, {
    "from": 190,
    "label": "has",
    "to": 34
  }, {
    "from": 190,
    "label": "has",
    "to": 35
  }, {
    "from": 190,
    "label": "has",
    "to": 36
  }, {
    "from": 190,
    "label": "has",
    "to": 37
  }, {
    "from": 190,
    "label": "has",
    "to": 38
  }, {
    "from": 190,
    "label": "has",
    "to": 39
  }, {
    "from": 190,
    "label": "has",
    "to": 40
  }, {
    "from": 190,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 31
  }, {
    "from": 185,
    "label": "has",
    "to": 191
  }, {
    "from": 191,
    "label": "has",
    "to": 45
  }, {
    "from": 191,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 4
  }, {
    "from": 46,
    "label": "has",
    "to": 5
  }, {
    "from": 191,
    "label": "has",
    "to": 47
  }, {
    "from": 191,
    "label": "has",
    "to": 48
  }, {
    "from": 191,
    "label": "has",
    "to": 49
  }, {
    "from": 191,
    "label": "has",
    "to": 48
  }, {
    "from": 191,
    "label": "has",
    "to": 50
  }, {
    "from": 191,
    "label": "has",
    "to": 48
  }, {
    "from": 191,
    "label": "has",
    "to": 51
  }, {
    "from": 191,
    "label": "has",
    "to": 52
  }, {
    "from": 191,
    "label": "has",
    "to": 53
  }, {
    "from": 191,
    "label": "has",
    "to": 52
  }, {
    "from": 185,
    "label": "has",
    "to": 192
  }, {
    "from": 192,
    "label": "has",
    "to": 56
  }, {
    "from": 192,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 9
  }, {
    "from": 192,
    "label": "has",
    "to": 58
  }, {
    "from": 192,
    "label": "has",
    "to": 33
  }, {
    "from": 192,
    "label": "has",
    "to": 59
  }, {
    "from": 192,
    "label": "has",
    "to": 60
  }, {
    "from": 192,
    "label": "has",
    "to": 60
  }, {
    "from": 192,
    "label": "has",
    "to": 37
  }, {
    "from": 192,
    "label": "has",
    "to": 61
  }, {
    "from": 192,
    "label": "has",
    "to": 62
  }, {
    "from": 192,
    "label": "has",
    "to": 63
  }, {
    "from": 192,
    "label": "has",
    "to": 60
  }, {
    "from": 192,
    "label": "has",
    "to": 64
  }, {
    "from": 192,
    "label": "has",
    "to": 65
  }, {
    "from": 192,
    "label": "has",
    "to": 66
  }, {
    "from": 185,
    "label": "has",
    "to": 193
  }, {
    "from": 193,
    "label": "has",
    "to": 69
  }, {
    "from": 193,
    "label": "has",
    "to": 33
  }, {
    "from": 193,
    "label": "has",
    "to": 59
  }, {
    "from": 193,
    "label": "has",
    "to": 60
  }, {
    "from": 193,
    "label": "has",
    "to": 60
  }, {
    "from": 193,
    "label": "has",
    "to": 37
  }, {
    "from": 193,
    "label": "has",
    "to": 62
  }, {
    "from": 193,
    "label": "has",
    "to": 63
  }, {
    "from": 193,
    "label": "has",
    "to": 70
  }, {
    "from": 185,
    "label": "has",
    "to": 194
  }, {
    "from": 194,
    "label": "has",
    "to": 73
  }, {
    "from": 194,
    "label": "has",
    "to": 59
  }, {
    "from": 194,
    "label": "has",
    "to": 60
  }, {
    "from": 194,
    "label": "has",
    "to": 60
  }, {
    "from": 194,
    "label": "has",
    "to": 37
  }, {
    "from": 194,
    "label": "has",
    "to": 62
  }, {
    "from": 194,
    "label": "has",
    "to": 63
  }, {
    "from": 194,
    "label": "has",
    "to": 70
  }, {
    "from": 185,
    "label": "has",
    "to": 195
  }, {
    "from": 195,
    "label": "has",
    "to": 33
  }, {
    "from": 195,
    "label": "has",
    "to": 76
  }, {
    "from": 195,
    "label": "has",
    "to": 77
  }, {
    "from": 195,
    "label": "has",
    "to": 60
  }, {
    "from": 195,
    "label": "has",
    "to": 78
  }, {
    "from": 195,
    "label": "has",
    "to": 79
  }, {
    "from": 195,
    "label": "has",
    "to": 80
  }, {
    "from": 195,
    "label": "has",
    "to": 81
  }, {
    "from": 195,
    "label": "has",
    "to": 82
  }, {
    "from": 195,
    "label": "has",
    "to": 78
  }, {
    "from": 195,
    "label": "has",
    "to": 83
  }, {
    "from": 185,
    "label": "has",
    "to": 196
  }, {
    "from": 196,
    "label": "has",
    "to": 20
  }, {
    "from": 196,
    "label": "has",
    "to": 86
  }, {
    "from": 185,
    "label": "has",
    "to": 197
  }, {
    "from": 197,
    "label": "has",
    "to": 89
  }, {
    "from": 197,
    "label": "has",
    "to": 90
  }, {
    "from": 185,
    "label": "has",
    "to": 198
  }, {
    "from": 198,
    "label": "has",
    "to": 93
  }, {
    "from": 198,
    "label": "has",
    "to": 94
  }, {
    "from": 198,
    "label": "has",
    "to": 95
  }, {
    "from": 198,
    "label": "has",
    "to": 96
  }, {
    "from": 198,
    "label": "has",
    "to": 97
  }, {
    "from": 185,
    "label": "has",
    "to": 199
  }, {
    "from": 199,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 12
  }, {
    "from": 199,
    "label": "has",
    "to": 103
  }, {
    "from": 199,
    "label": "has",
    "to": 95
  }, {
    "from": 199,
    "label": "has",
    "to": 96
  }, {
    "from": 199,
    "label": "has",
    "to": 97
  }, {
    "from": 185,
    "label": "has",
    "to": 200
  }, {
    "from": 200,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 12
  }, {
    "from": 200,
    "label": "has",
    "to": 109
  }, {
    "from": 200,
    "label": "has",
    "to": 103
  }, {
    "from": 200,
    "label": "has",
    "to": 95
  }, {
    "from": 200,
    "label": "has",
    "to": 96
  }, {
    "from": 200,
    "label": "has",
    "to": 97
  }, {
    "from": 185,
    "label": "has",
    "to": 201
  }, {
    "from": 201,
    "label": "has",
    "to": 112
  }, {
    "from": 201,
    "label": "has",
    "to": 113
  }, {
    "from": 201,
    "label": "has",
    "to": 94
  }, {
    "from": 201,
    "label": "has",
    "to": 114
  }, {
    "from": 201,
    "label": "has",
    "to": 96
  }, {
    "from": 201,
    "label": "has",
    "to": 97
  }, {
    "from": 185,
    "label": "has",
    "to": 202
  }, {
    "from": 202,
    "label": "has",
    "to": 117
  }, {
    "from": 202,
    "label": "has",
    "to": 103
  }, {
    "from": 202,
    "label": "has",
    "to": 118
  }, {
    "from": 202,
    "label": "has",
    "to": 119
  }, {
    "from": 202,
    "label": "has",
    "to": 97
  }, {
    "from": 185,
    "label": "has",
    "to": 203
  }, {
    "from": 203,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 12
  }, {
    "from": 203,
    "label": "has",
    "to": 103
  }, {
    "from": 203,
    "label": "has",
    "to": 95
  }, {
    "from": 203,
    "label": "has",
    "to": 96
  }, {
    "from": 203,
    "label": "has",
    "to": 97
  }, {
    "from": 185,
    "label": "has",
    "to": 204
  }, {
    "from": 204,
    "label": "has",
    "to": 127
  }, {
    "from": 204,
    "label": "has",
    "to": 128
  }, {
    "from": 204,
    "label": "has",
    "to": 95
  }, {
    "from": 204,
    "label": "has",
    "to": 129
  }, {
    "from": 185,
    "label": "has",
    "to": 205
  }, {
    "from": 205,
    "label": "has",
    "to": 134
  }, {
    "from": 134,
    "label": "has",
    "to": 12
  }, {
    "from": 205,
    "label": "has",
    "to": 135
  }, {
    "from": 205,
    "label": "has",
    "to": 95
  }, {
    "from": 205,
    "label": "has",
    "to": 129
  }, {
    "from": 185,
    "label": "has",
    "to": 206
  }, {
    "from": 206,
    "label": "has",
    "to": 138
  }, {
    "from": 206,
    "label": "has",
    "to": 139
  }, {
    "from": 206,
    "label": "has",
    "to": 140
  }, {
    "from": 206,
    "label": "has",
    "to": 141
  }, {
    "from": 206,
    "label": "has",
    "to": 142
  }, {
    "from": 206,
    "label": "has",
    "to": 143
  }, {
    "from": 206,
    "label": "has",
    "to": 144
  }, {
    "from": 206,
    "label": "has",
    "to": 145
  }, {
    "from": 206,
    "label": "has",
    "to": 95
  }, {
    "from": 206,
    "label": "has",
    "to": 96
  }, {
    "from": 206,
    "label": "has",
    "to": 97
  }, {
    "from": 206,
    "label": "has",
    "to": 146
  }, {
    "from": 206,
    "label": "has",
    "to": 147
  }, {
    "from": 206,
    "label": "has",
    "to": 148
  }, {
    "from": 206,
    "label": "has",
    "to": 149
  }, {
    "from": 185,
    "label": "has",
    "to": 207
  }, {
    "from": 207,
    "label": "has",
    "to": 154
  }, {
    "from": 207,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 12
  }, {
    "from": 207,
    "label": "has",
    "to": 156
  }, {
    "from": 207,
    "label": "has",
    "to": 157
  }, {
    "from": 207,
    "label": "has",
    "to": 158
  }, {
    "from": 207,
    "label": "has",
    "to": 96
  }, {
    "from": 207,
    "label": "has",
    "to": 97
  }, {
    "from": 207,
    "label": "has",
    "to": 159
  }, {
    "from": 185,
    "label": "has",
    "to": 208
  }, {
    "from": 208,
    "label": "has",
    "to": 162
  }, {
    "from": 208,
    "label": "has",
    "to": 154
  }, {
    "from": 208,
    "label": "has",
    "to": 163
  }, {
    "from": 208,
    "label": "has",
    "to": 164
  }, {
    "from": 208,
    "label": "has",
    "to": 165
  }, {
    "from": 208,
    "label": "has",
    "to": 166
  }, {
    "from": 208,
    "label": "has",
    "to": 167
  }, {
    "from": 208,
    "label": "has",
    "to": 168
  }, {
    "from": 185,
    "label": "has",
    "to": 209
  }, {
    "from": 209,
    "label": "has",
    "to": 162
  }, {
    "from": 209,
    "label": "has",
    "to": 154
  }, {
    "from": 209,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 12
  }, {
    "from": 209,
    "label": "has",
    "to": 164
  }, {
    "from": 209,
    "label": "has",
    "to": 165
  }, {
    "from": 209,
    "label": "has",
    "to": 166
  }, {
    "from": 209,
    "label": "has",
    "to": 173
  }, {
    "from": 209,
    "label": "has",
    "to": 168
  }, {
    "from": 185,
    "label": "has",
    "to": 210
  }, {
    "from": 210,
    "label": "has",
    "to": 176
  }, {
    "from": 210,
    "label": "has",
    "to": 177
  }, {
    "from": 210,
    "label": "has",
    "to": 154
  }, {
    "from": 210,
    "label": "has",
    "to": 178
  }, {
    "from": 210,
    "label": "has",
    "to": 179
  }, {
    "from": 210,
    "label": "has",
    "to": 180
  }, {
    "from": 210,
    "label": "has",
    "to": 181
  }, {
    "from": 210,
    "label": "has",
    "to": 182
  }, {
    "from": 210,
    "label": "has",
    "to": 183
  }, {
    "from": 210,
    "label": "has",
    "to": 167
  }, {
    "from": 210,
    "label": "has",
    "to": 159
  }, {
    "from": 210,
    "label": "has",
    "to": 168
  }, {
    "from": 185,
    "label": "has",
    "to": 211
  }, {
    "from": 212,
    "label": "calls",
    "to": 214
  }, {
    "from": 212,
    "label": "calls",
    "to": 214
  }, {
    "from": 212,
    "label": "calls",
    "to": 214
  }, {
    "from": 212,
    "label": "calls",
    "to": 214
  }, {
    "from": 212,
    "label": "calls",
    "to": 214
  }, {
    "from": 212,
    "label": "calls",
    "to": 214
  }, {
    "from": 212,
    "label": "calls",
    "to": 214
  }, {
    "from": 212,
    "label": "calls",
    "to": 214
  }, {
    "from": 212,
    "label": "calls",
    "to": 214
  }, {
    "from": 212,
    "label": "calls",
    "to": 214
  }, {
    "from": 212,
    "label": "calls",
    "to": 214
  }, {
    "from": 212,
    "label": "calls",
    "to": 214
  }, {
    "from": 212,
    "label": "calls",
    "to": 214
  }, {
    "from": 212,
    "label": "calls",
    "to": 214
  }, {
    "from": 212,
    "label": "calls",
    "to": 214
  }, {
    "from": 212,
    "label": "calls",
    "to": 214
  }, {
    "from": 212,
    "label": "calls",
    "to": 214
  }, {
    "from": 212,
    "label": "calls",
    "to": 214
  }, {
    "from": 212,
    "label": "calls",
    "to": 214
  }, {
    "from": 212,
    "label": "calls",
    "to": 214
  }, {
    "from": 212,
    "label": "calls",
    "to": 214
  }, {
    "from": 212,
    "label": "calls",
    "to": 214
  }, {
    "from": 212,
    "label": "calls",
    "to": 214
  }, {
    "from": 212,
    "label": "calls",
    "to": 214
  }, {
    "from": 212,
    "label": "calls",
    "to": 214
  }, {
    "from": 212,
    "label": "calls",
    "to": 214
  }, {
    "from": 212,
    "label": "calls",
    "to": 214
  }, {
    "from": 212,
    "label": "calls",
    "to": 216
  }, {
    "from": 212,
    "label": "calls",
    "to": 216
  }, {
    "from": 212,
    "label": "calls",
    "to": 229
  }, {
    "from": 212,
    "label": "calls",
    "to": 230
  }, {
    "from": 212,
    "label": "calls",
    "to": 230
  }, {
    "from": 212,
    "label": "calls",
    "to": 230
  }, {
    "from": 212,
    "label": "calls",
    "to": 230
  }, {
    "from": 212,
    "label": "calls",
    "to": 230
  }, {
    "from": 212,
    "label": "calls",
    "to": 230
  }, {
    "from": 212,
    "label": "calls",
    "to": 225
  }, {
    "from": 212,
    "label": "calls",
    "to": 225
  }, {
    "from": 212,
    "label": "calls",
    "to": 225
  }, {
    "from": 212,
    "label": "calls",
    "to": 7
  }, {
    "from": 212,
    "label": "calls",
    "to": 7
  }, {
    "from": 212,
    "label": "calls",
    "to": 7
  }, {
    "from": 212,
    "label": "calls",
    "to": 7
  }, {
    "from": 212,
    "label": "calls",
    "to": 7
  }, {
    "from": 212,
    "label": "calls",
    "to": 7
  }, {
    "from": 212,
    "label": "calls",
    "to": 7
  }, {
    "from": 212,
    "label": "calls",
    "to": 7
  }, {
    "from": 212,
    "label": "calls",
    "to": 7
  }, {
    "from": 212,
    "label": "calls",
    "to": 7
  }, {
    "from": 212,
    "label": "calls",
    "to": 7
  }, {
    "from": 212,
    "label": "calls",
    "to": 7
  }, {
    "from": 212,
    "label": "calls",
    "to": 217
  }, {
    "from": 212,
    "label": "calls",
    "to": 217
  }, {
    "from": 212,
    "label": "calls",
    "to": 217
  }, {
    "from": 212,
    "label": "calls",
    "to": 217
  }, {
    "from": 212,
    "label": "calls",
    "to": 217
  }, {
    "from": 212,
    "label": "calls",
    "to": 217
  }, {
    "from": 212,
    "label": "calls",
    "to": 217
  }, {
    "from": 212,
    "label": "calls",
    "to": 217
  }, {
    "from": 212,
    "label": "calls",
    "to": 217
  }, {
    "from": 212,
    "label": "calls",
    "to": 217
  }, {
    "from": 212,
    "label": "calls",
    "to": 217
  }, {
    "from": 212,
    "label": "calls",
    "to": 217
  }, {
    "from": 212,
    "label": "calls",
    "to": 217
  }, {
    "from": 212,
    "label": "calls",
    "to": 217
  }, {
    "from": 212,
    "label": "calls",
    "to": 217
  }, {
    "from": 212,
    "label": "calls",
    "to": 217
  }, {
    "from": 212,
    "label": "calls",
    "to": 217
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 231
  }, {
    "from": 212,
    "label": "calls",
    "to": 226
  }, {
    "from": 212,
    "label": "calls",
    "to": 226
  }, {
    "from": 212,
    "label": "calls",
    "to": 226
  }, {
    "from": 212,
    "label": "calls",
    "to": 218
  }, {
    "from": 212,
    "label": "calls",
    "to": 218
  }, {
    "from": 212,
    "label": "calls",
    "to": 218
  }, {
    "from": 212,
    "label": "calls",
    "to": 218
  }, {
    "from": 212,
    "label": "calls",
    "to": 218
  }, {
    "from": 212,
    "label": "calls",
    "to": 218
  }, {
    "from": 212,
    "label": "calls",
    "to": 218
  }, {
    "from": 212,
    "label": "calls",
    "to": 218
  }, {
    "from": 212,
    "label": "calls",
    "to": 218
  }, {
    "from": 212,
    "label": "calls",
    "to": 218
  }, {
    "from": 212,
    "label": "calls",
    "to": 218
  }, {
    "from": 212,
    "label": "calls",
    "to": 218
  }, {
    "from": 212,
    "label": "calls",
    "to": 218
  }, {
    "from": 212,
    "label": "calls",
    "to": 218
  }, {
    "from": 212,
    "label": "calls",
    "to": 218
  }, {
    "from": 212,
    "label": "calls",
    "to": 218
  }, {
    "from": 212,
    "label": "calls",
    "to": 218
  }, {
    "from": 212,
    "label": "calls",
    "to": 213
  }, {
    "from": 212,
    "label": "calls",
    "to": 215
  }, {
    "from": 212,
    "label": "calls",
    "to": 215
  }, {
    "from": 212,
    "label": "calls",
    "to": 215
  }, {
    "from": 212,
    "label": "calls",
    "to": 215
  }, {
    "from": 212,
    "label": "calls",
    "to": 219
  }, {
    "from": 212,
    "label": "calls",
    "to": 219
  }, {
    "from": 212,
    "label": "calls",
    "to": 219
  }, {
    "from": 212,
    "label": "calls",
    "to": 219
  }, {
    "from": 212,
    "label": "calls",
    "to": 219
  }, {
    "from": 212,
    "label": "calls",
    "to": 219
  }, {
    "from": 212,
    "label": "calls",
    "to": 219
  }, {
    "from": 212,
    "label": "calls",
    "to": 219
  }, {
    "from": 212,
    "label": "calls",
    "to": 219
  }, {
    "from": 212,
    "label": "calls",
    "to": 219
  }, {
    "from": 212,
    "label": "calls",
    "to": 219
  }, {
    "from": 212,
    "label": "calls",
    "to": 219
  }, {
    "from": 212,
    "label": "calls",
    "to": 219
  }, {
    "from": 212,
    "label": "calls",
    "to": 219
  }, {
    "from": 212,
    "label": "calls",
    "to": 219
  }, {
    "from": 212,
    "label": "calls",
    "to": 219
  }, {
    "from": 212,
    "label": "calls",
    "to": 219
  }, {
    "from": 212,
    "label": "calls",
    "to": 219
  }, {
    "from": 212,
    "label": "calls",
    "to": 219
  }, {
    "from": 212,
    "label": "calls",
    "to": 219
  }, {
    "from": 212,
    "label": "calls",
    "to": 219
  }, {
    "from": 212,
    "label": "calls",
    "to": 219
  }, {
    "from": 212,
    "label": "calls",
    "to": 219
  }, {
    "from": 212,
    "label": "calls",
    "to": 222
  }, {
    "from": 212,
    "label": "calls",
    "to": 232
  }, {
    "from": 212,
    "label": "calls",
    "to": 232
  }, {
    "from": 212,
    "label": "calls",
    "to": 223
  }, {
    "from": 212,
    "label": "calls",
    "to": 223
  }, {
    "from": 212,
    "label": "calls",
    "to": 223
  }, {
    "from": 212,
    "label": "calls",
    "to": 221
  }, {
    "from": 212,
    "label": "calls",
    "to": 220
  }, {
    "from": 212,
    "label": "calls",
    "to": 228
  }, {
    "from": 212,
    "label": "calls",
    "to": 224
  }, {
    "from": 212,
    "label": "calls",
    "to": 227
  }, {
    "from": 212,
    "label": "calls",
    "to": 227
  }, {
    "from": 212,
    "label": "calls",
    "to": 227
  }, {
    "from": 212,
    "label": "calls",
    "to": 227
  }, {
    "from": 212,
    "label": "calls",
    "to": 227
  }, {
    "from": 212,
    "label": "calls",
    "to": 227
  }, {
    "from": 1,
    "label": "contains",
    "to": 212
  }, {
    "from": 212,
    "label": "declares",
    "to": 3
  }, {
    "from": 212,
    "label": "declares",
    "to": 7
  }, {
    "from": 212,
    "label": "declares",
    "to": 8
  }, {
    "from": 212,
    "label": "declares",
    "to": 10
  }, {
    "from": 212,
    "label": "declares",
    "to": 11
  }, {
    "from": 212,
    "label": "declares",
    "to": 14
  }, {
    "from": 212,
    "label": "declares",
    "to": 17
  }, {
    "from": 212,
    "label": "declares",
    "to": 19
  }, {
    "from": 212,
    "label": "declares",
    "to": 25
  }, {
    "from": 212,
    "label": "declares",
    "to": 30
  }, {
    "from": 212,
    "label": "declares",
    "to": 32
  }, {
    "from": 212,
    "label": "declares",
    "to": 43
  }, {
    "from": 212,
    "label": "declares",
    "to": 44
  }, {
    "from": 212,
    "label": "declares",
    "to": 55
  }, {
    "from": 212,
    "label": "declares",
    "to": 68
  }, {
    "from": 212,
    "label": "declares",
    "to": 72
  }, {
    "from": 212,
    "label": "declares",
    "to": 75
  }, {
    "from": 212,
    "label": "declares",
    "to": 85
  }, {
    "from": 212,
    "label": "declares",
    "to": 88
  }, {
    "from": 212,
    "label": "declares",
    "to": 92
  }, {
    "from": 212,
    "label": "declares",
    "to": 99
  }, {
    "from": 212,
    "label": "declares",
    "to": 101
  }, {
    "from": 212,
    "label": "declares",
    "to": 105
  }, {
    "from": 212,
    "label": "declares",
    "to": 107
  }, {
    "from": 212,
    "label": "declares",
    "to": 111
  }, {
    "from": 212,
    "label": "declares",
    "to": 116
  }, {
    "from": 212,
    "label": "declares",
    "to": 121
  }, {
    "from": 212,
    "label": "declares",
    "to": 123
  }, {
    "from": 212,
    "label": "declares",
    "to": 126
  }, {
    "from": 212,
    "label": "declares",
    "to": 131
  }, {
    "from": 212,
    "label": "declares",
    "to": 133
  }, {
    "from": 212,
    "label": "declares",
    "to": 137
  }, {
    "from": 212,
    "label": "declares",
    "to": 151
  }, {
    "from": 212,
    "label": "declares",
    "to": 153
  }, {
    "from": 212,
    "label": "declares",
    "to": 161
  }, {
    "from": 212,
    "label": "declares",
    "to": 170
  }, {
    "from": 212,
    "label": "declares",
    "to": 171
  }, {
    "from": 212,
    "label": "declares",
    "to": 175
  }, {
    "from": 212,
    "label": "declares",
    "to": 185
  }, {
    "from": 1,
    "label": "contains",
    "to": 233
  }, {
    "from": 1,
    "label": "contains",
    "to": 234
  }, {
    "from": 234,
    "label": "initializes",
    "to": 235
  }, {
    "from": 235,
    "label": "requires",
    "to": 2
  }, {
    "from": 23,
    "label": "hasArgument",
    "to": 17
  }, {
    "from": 41,
    "label": "hasArgument",
    "to": 30
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 99
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 121
  }, {
    "from": 124,
    "label": "hasArgument",
    "to": 99
  }, {
    "from": 124,
    "label": "hasArgument",
    "to": 121
  }, {
    "from": 134,
    "label": "hasArgument",
    "to": 131
  }, {
    "from": 155,
    "label": "hasArgument",
    "to": 151
  }, {
    "from": 172,
    "label": "hasArgument",
    "to": 170
  }, {
    "from": 187,
    "label": "hasArgument",
    "to": 11
  }, {
    "from": 187,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 188,
    "label": "hasArgument",
    "to": 17
  }, {
    "from": 188,
    "label": "hasArgument",
    "to": 19
  }, {
    "from": 189,
    "label": "hasArgument",
    "to": 25
  }, {
    "from": 190,
    "label": "hasArgument",
    "to": 30
  }, {
    "from": 190,
    "label": "hasArgument",
    "to": 32
  }, {
    "from": 191,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 191,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 191,
    "label": "hasArgument",
    "to": 7
  }, {
    "from": 191,
    "label": "hasArgument",
    "to": 43
  }, {
    "from": 192,
    "label": "hasArgument",
    "to": 8
  }, {
    "from": 192,
    "label": "hasArgument",
    "to": 55
  }, {
    "from": 193,
    "label": "hasArgument",
    "to": 68
  }, {
    "from": 194,
    "label": "hasArgument",
    "to": 72
  }, {
    "from": 195,
    "label": "hasArgument",
    "to": 75
  }, {
    "from": 196,
    "label": "hasArgument",
    "to": 85
  }, {
    "from": 197,
    "label": "hasArgument",
    "to": 88
  }, {
    "from": 198,
    "label": "hasArgument",
    "to": 92
  }, {
    "from": 199,
    "label": "hasArgument",
    "to": 99
  }, {
    "from": 199,
    "label": "hasArgument",
    "to": 101
  }, {
    "from": 199,
    "label": "hasArgument",
    "to": 121
  }, {
    "from": 200,
    "label": "hasArgument",
    "to": 105
  }, {
    "from": 200,
    "label": "hasArgument",
    "to": 107
  }, {
    "from": 201,
    "label": "hasArgument",
    "to": 111
  }, {
    "from": 201,
    "label": "hasArgument",
    "to": 10
  }, {
    "from": 202,
    "label": "hasArgument",
    "to": 116
  }, {
    "from": 203,
    "label": "hasArgument",
    "to": 99
  }, {
    "from": 203,
    "label": "hasArgument",
    "to": 121
  }, {
    "from": 203,
    "label": "hasArgument",
    "to": 123
  }, {
    "from": 204,
    "label": "hasArgument",
    "to": 126
  }, {
    "from": 205,
    "label": "hasArgument",
    "to": 131
  }, {
    "from": 205,
    "label": "hasArgument",
    "to": 133
  }, {
    "from": 206,
    "label": "hasArgument",
    "to": 137
  }, {
    "from": 207,
    "label": "hasArgument",
    "to": 151
  }, {
    "from": 207,
    "label": "hasArgument",
    "to": 153
  }, {
    "from": 208,
    "label": "hasArgument",
    "to": 161
  }, {
    "from": 209,
    "label": "hasArgument",
    "to": 170
  }, {
    "from": 209,
    "label": "hasArgument",
    "to": 171
  }, {
    "from": 210,
    "label": "hasArgument",
    "to": 175
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "stub_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "match",
    "type": "module"
  }, {
    "id": 3,
    "text": "function()\r\n      local t = { key = s}\r\n      stub.new(t, \"key\")\r\n    end",
    "type": "function"
  }, {
    "id": 4,
    "text": "local t = { key = s}",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "stub.new(t, \"key\")",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 8,
    "text": "function() calls = calls + 1 end",
    "type": "function"
  }, {
    "id": 9,
    "text": "calls = calls + 1",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "local function foo() end",
    "type": "function"
  }, {
    "id": 11,
    "text": "function()\r\n      return \"derp\"\r\n    end",
    "type": "function"
  }, {
    "id": 12,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function()\r\n    test = {key = function()\r\n      return \"derp\"\r\n    end}\r\n  end",
    "type": "function"
  }, {
    "id": 15,
    "text": "test = {key = function()\r\n      return \"derp\"\r\n    end}",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function() assert.stub(test.key).was.called_with(\"herp\") end",
    "type": "function"
  }, {
    "id": 18,
    "text": "assert.stub(test.key).was.called_with(\"herp\")",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "function()\r\n    stub(test, \"key\")\r\n    test.key(\"derp\")\r\n    assert.stub(test.key).was.called_with(\"derp\")\r\n    assert.errors(function() assert.stub(test.key).was.called_with(\"herp\") end)\r\n  end",
    "type": "function"
  }, {
    "id": 20,
    "text": "stub(test, \"key\")",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "test.key(\"derp\")",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "assert.stub(test.key).was.called_with(\"derp\")",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "assert.errors(function() assert.stub(test.key).was.called_with(\"herp\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function()\r\n     stub(test, \"key\")\r\n     test.key()\r\n     test.key(\"test\")\r\n     assert.stub(test.key).was.called(2)\r\n  end",
    "type": "function"
  }, {
    "id": 26,
    "text": "test.key()",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "test.key(\"test\")",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "assert.stub(test.key).was.called(2)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function() assert.stub(s).was.called_with(5, 6) end",
    "type": "function"
  }, {
    "id": 31,
    "text": "assert.stub(s).was.called_with(5, 6)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "function()\r\n    local s = stub.new(test, \"key\")\r\n\r\n    s(1, 2, 3)\r\n    s(\"a\", \"b\", \"c\")\r\n    assert.stub(s).was.called()\r\n    assert.stub(s).was.called(2) -- twice!\r\n    assert.stub(s).was_not.called(3)\r\n    assert.stub(s).was_not.called_with({1, 2, 3}) -- mind the accolades\r\n    assert.stub(s).was.called_with(1, 2, 3)\r\n    assert.has_error(function() assert.stub(s).was.called_with(5, 6) end)\r\n  end",
    "type": "function"
  }, {
    "id": 33,
    "text": "local s = stub.new(test, \"key\")",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "s(1, 2, 3)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "s(\"a\", \"b\", \"c\")",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "assert.stub(s).was.called()",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "assert.stub(s).was.called(2)",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "assert.stub(s).was_not.called(3)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "assert.stub(s).was_not.called_with({1, 2, 3})",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "assert.stub(s).was.called_with(1, 2, 3)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "assert.has_error(function() assert.stub(s).was.called_with(5, 6) end)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 44,
    "text": "function()\r\n    local s\r\n    local testfunc = function()\r\n      local t = { key = s}\r\n      stub.new(t, \"key\")\r\n    end\r\n    -- try some types to fail\r\n    s = \"some string\";  assert.has_error(testfunc)\r\n    s = 10;             assert.has_error(testfunc)\r\n    s = true;           assert.has_error(testfunc)\r\n    -- try some types to succeed\r\n    s = function() end; assert.has_no_error(testfunc)\r\n    s = setmetatable( {}, { __call = function() end } ); assert.has_no_error(testfunc)\r\n  end",
    "type": "function"
  }, {
    "id": 45,
    "text": "local s",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "local testfunc = function()\r\n      local t = { key = s}\r\n      stub.new(t, \"key\")\r\n    end",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "s = \"some string\"",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "assert.has_error(testfunc)",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "s = 10",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "s = true",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "s = function() end",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "assert.has_no_error(testfunc)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "s = setmetatable( {}, { __call = function() end } )",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "function()\r\n     local calls = 0\r\n     local old = function() calls = calls + 1 end\r\n     test.key = old\r\n     local s = stub.new(test, \"key\")\r\n     assert.is_table(s)\r\n     s()\r\n     s()\r\n     assert.stub(s).was.called(2)  \r\n     assert.are.equal(calls, 0)   -- its a stub, so no calls\r\n     local old_s = s\r\n     s = s:revert()\r\n     s()\r\n     assert.stub(old_s).was.called(2)  -- still two, stub was removed\r\n     assert.are.equal(s, old)\r\n     assert.are.equal(calls, 1)     -- restored, so now 1 call\r\n  end",
    "type": "function"
  }, {
    "id": 56,
    "text": "local calls = 0",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "local old = function() calls = calls + 1 end",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "test.key = old",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "assert.is_table(s)",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "s()",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "assert.are.equal(calls, 0)",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "local old_s = s",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "s = s:revert()",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "assert.stub(old_s).was.called(2)",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "assert.are.equal(s, old)",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "assert.are.equal(calls, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "function()\r\n     test = {}\r\n     local s = stub.new(test, \"key\")\r\n     assert.is_table(s)\r\n     s()\r\n     s()\r\n     assert.stub(s).was.called(2)  \r\n     local old_s = s\r\n     s = s:revert()\r\n     assert.is_nil(s)\r\n  end",
    "type": "function"
  }, {
    "id": 69,
    "text": "test = {}",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "assert.is_nil(s)",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "function()\r\n     local s = stub.new()   -- use no parameters to create a blank\r\n     assert.is_table(s)\r\n     s()\r\n     s()\r\n     assert.stub(s).was.called(2)  \r\n     local old_s = s\r\n     s = s:revert()\r\n     assert.is_nil(s)\r\n  end",
    "type": "function"
  }, {
    "id": 73,
    "text": "local s = stub.new()",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 75,
    "text": "function()\r\n     local s = stub.new(test, \"key\")\r\n     s.returns(\"value\")\r\n     s.on_call_with(\"foo\").returns(\"bar\")\r\n     s()\r\n     s(\"foo\")\r\n     s:clear()\r\n     assert.stub(s).was_not.called()\r\n     assert.stub(s).was_not.returned_with(\"value\")\r\n     assert.stub(s).was_not.returned_with(\"bar\")\r\n     s(\"foo\")\r\n     assert.stub(s).was.returned_with(\"bar\")\r\n  end",
    "type": "function"
  }, {
    "id": 76,
    "text": "s.returns(\"value\")",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "s.on_call_with(\"foo\").returns(\"bar\")",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "s(\"foo\")",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "s:clear()",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "assert.stub(s).was_not.called()",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "assert.stub(s).was_not.returned_with(\"value\")",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "assert.stub(s).was_not.returned_with(\"bar\")",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "assert.stub(s).was.returned_with(\"bar\")",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "function()\r\n    stub(test, \"key\")\r\n\r\n    assert.is_nil(test.key())\r\n  end",
    "type": "function"
  }, {
    "id": 86,
    "text": "assert.is_nil(test.key())",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "function()\r\n    stub(test, \"key\", \"foo\")\r\n\r\n    assert.is.equal(\"foo\", test.key())\r\n  end",
    "type": "function"
  }, {
    "id": 89,
    "text": "stub(test, \"key\", \"foo\")",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "assert.is.equal(\"foo\", test.key())",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "function()\r\n    stub(test, \"key\", \"foo\", nil, \"bar\")\r\n\r\n    local arg1, arg2, arg3 = test.key()\r\n\r\n    assert.is.equal(\"foo\", arg1)\r\n    assert.is.equal(nil, arg2)\r\n    assert.is.equal(\"bar\", arg3)\r\n  end",
    "type": "function"
  }, {
    "id": 93,
    "text": "stub(test, \"key\", \"foo\", nil, \"bar\")",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "local arg1, arg2, arg3 = test.key()",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "assert.is.equal(\"foo\", arg1)",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "assert.is.equal(nil, arg2)",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "assert.is.equal(\"bar\", arg3)",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 99,
    "text": "function(a, b, c)\r\n      return c, b, a\r\n    end",
    "type": "function"
  }, {
    "id": 100,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 101,
    "text": "function()\r\n    stub(test, \"key\", function(a, b, c)\r\n      return c, b, a\r\n    end)\r\n\r\n    local arg1, arg2, arg3 = test.key(\"bar\", nil, \"foo\")\r\n\r\n    assert.is.equal(\"foo\", arg1)\r\n    assert.is.equal(nil, arg2)\r\n    assert.is.equal(\"bar\", arg3)\r\n  end",
    "type": "function"
  }, {
    "id": 102,
    "text": "stub(test, \"key\", function(a, b, c)\r\n      return c, b, a\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "local arg1, arg2, arg3 = test.key(\"bar\", nil, \"foo\")",
    "type": "statement:localassign"
  }, {
    "id": 104,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 105,
    "text": "function(self, a, b, c)\r\n      return c, b, a\r\n    end",
    "type": "function"
  }, {
    "id": 106,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 107,
    "text": "function()\r\n    local callable = setmetatable({}, { __call = function(self, a, b, c)\r\n      return c, b, a\r\n    end})\r\n    stub(test, \"key\", callable)\r\n\r\n    local arg1, arg2, arg3 = test.key(\"bar\", nil, \"foo\")\r\n\r\n    assert.is.equal(\"foo\", arg1)\r\n    assert.is.equal(nil, arg2)\r\n    assert.is.equal(\"bar\", arg3)\r\n  end",
    "type": "function"
  }, {
    "id": 108,
    "text": "local callable = setmetatable({}, { __call = function(self, a, b, c)\r\n      return c, b, a\r\n    end})",
    "type": "statement:localassign"
  }, {
    "id": 109,
    "text": "stub(test, \"key\", callable)",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 111,
    "text": "function()\r\n    local function foo() end\r\n    stub(test, \"key\", foo, nil, \"bar\")\r\n\r\n    local arg1, arg2, arg3 = test.key()\r\n\r\n    assert.is.equal(foo, arg1)\r\n    assert.is.equal(nil, arg2)\r\n    assert.is.equal(\"bar\", arg3)\r\n  end",
    "type": "function"
  }, {
    "id": 112,
    "text": "local function foo() end",
    "type": "statement:localfunction"
  }, {
    "id": 113,
    "text": "stub(test, \"key\", foo, nil, \"bar\")",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "assert.is.equal(foo, arg1)",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 116,
    "text": "function()\r\n    stub(test, \"key\").returns(nil, \"foo\", \"bar\")\r\n\r\n    local arg1, arg2, arg3 = test.key(\"bar\", nil, \"foo\")\r\n\r\n    assert.is.equal(nil, arg1)\r\n    assert.is.equal(\"foo\", arg2)\r\n    assert.is.equal(\"bar\", arg3)\r\n  end",
    "type": "function"
  }, {
    "id": 117,
    "text": "stub(test, \"key\").returns(nil, \"foo\", \"bar\")",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "assert.is.equal(nil, arg1)",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "assert.is.equal(\"foo\", arg2)",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 121,
    "text": "function(a, b, c)\r\n      return c, b, a\r\n    end",
    "type": "function"
  }, {
    "id": 122,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 123,
    "text": "function()\r\n    stub(test, \"key\").invokes(function(a, b, c)\r\n      return c, b, a\r\n    end)\r\n\r\n    local arg1, arg2, arg3 = test.key(\"bar\", nil, \"foo\")\r\n\r\n    assert.is.equal(\"foo\", arg1)\r\n    assert.is.equal(nil, arg2)\r\n    assert.is.equal(\"bar\", arg3)\r\n  end",
    "type": "function"
  }, {
    "id": 124,
    "text": "stub(test, \"key\").invokes(function(a, b, c)\r\n      return c, b, a\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 126,
    "text": "function()\r\n    stub(test, \"key\").by_default.returns(\"foo\", \"bar\")\r\n\r\n    local arg1, arg2 = test.key()\r\n\r\n    assert.is.equal(\"foo\", arg1)\r\n    assert.is.equal(\"bar\", arg2)\r\n  end",
    "type": "function"
  }, {
    "id": 127,
    "text": "stub(test, \"key\").by_default.returns(\"foo\", \"bar\")",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "local arg1, arg2 = test.key()",
    "type": "statement:localassign"
  }, {
    "id": 129,
    "text": "assert.is.equal(\"bar\", arg2)",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 131,
    "text": "function(a, b)\r\n      return b, a\r\n    end",
    "type": "function"
  }, {
    "id": 132,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 133,
    "text": "function()\r\n    stub(test, \"key\").by_default.invokes(function(a, b)\r\n      return b, a\r\n    end)\r\n\r\n    local arg1, arg2 = test.key(\"bar\", \"foo\")\r\n\r\n    assert.is.equal(\"foo\", arg1)\r\n    assert.is.equal(\"bar\", arg2)\r\n  end",
    "type": "function"
  }, {
    "id": 134,
    "text": "stub(test, \"key\").by_default.invokes(function(a, b)\r\n      return b, a\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "local arg1, arg2 = test.key(\"bar\", \"foo\")",
    "type": "statement:localassign"
  }, {
    "id": 136,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 137,
    "text": "function()\r\n    stub(test, \"key\").returns(\"foo bar\")\r\n    test.key.on_call_with(\"bar\").returns(\"foo\", nil, \"bar\")\r\n    test.key.on_call_with(match._, \"foo\").returns(\"foofoo\")\r\n\r\n    local arg1, arg2, arg3 = test.key(\"bar\")\r\n    local foofoo1 = test.key(1, \"foo\")\r\n    local foofoo2 = test.key(2, \"foo\")\r\n    local foofoo3 = test.key(nil, \"foo\")\r\n    local foobar = test.key()\r\n\r\n    assert.is.equal(\"foo\", arg1)\r\n    assert.is.equal(nil, arg2)\r\n    assert.is.equal(\"bar\", arg3)\r\n    assert.is.equal(\"foo bar\", foobar)\r\n    assert.is.equal(\"foofoo\", foofoo1)\r\n    assert.is.equal(\"foofoo\", foofoo2)\r\n    assert.is.equal(\"foofoo\", foofoo3)\r\n  end",
    "type": "function"
  }, {
    "id": 138,
    "text": "stub(test, \"key\").returns(\"foo bar\")",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "test.key.on_call_with(\"bar\").returns(\"foo\", nil, \"bar\")",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "test.key.on_call_with(match._, \"foo\").returns(\"foofoo\")",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "local arg1, arg2, arg3 = test.key(\"bar\")",
    "type": "statement:localassign"
  }, {
    "id": 142,
    "text": "local foofoo1 = test.key(1, \"foo\")",
    "type": "statement:localassign"
  }, {
    "id": 143,
    "text": "local foofoo2 = test.key(2, \"foo\")",
    "type": "statement:localassign"
  }, {
    "id": 144,
    "text": "local foofoo3 = test.key(nil, \"foo\")",
    "type": "statement:localassign"
  }, {
    "id": 145,
    "text": "local foobar = test.key()",
    "type": "statement:localassign"
  }, {
    "id": 146,
    "text": "assert.is.equal(\"foo bar\", foobar)",
    "type": "statement:functioncall"
  }, {
    "id": 147,
    "text": "assert.is.equal(\"foofoo\", foofoo1)",
    "type": "statement:functioncall"
  }, {
    "id": 148,
    "text": "assert.is.equal(\"foofoo\", foofoo2)",
    "type": "statement:functioncall"
  }, {
    "id": 149,
    "text": "assert.is.equal(\"foofoo\", foofoo3)",
    "type": "statement:functioncall"
  }, {
    "id": 150,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 151,
    "text": "function(a, b, c)\r\n      return \"bar\", nil, \"bar\"\r\n    end",
    "type": "function"
  }, {
    "id": 152,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 153,
    "text": "function()\r\n    stub(test, \"key\").returns(\"foo foo\")\r\n    test.key.on_call_with(\"foo\").invokes(function(a, b, c)\r\n      return \"bar\", nil, \"bar\"\r\n    end)\r\n\r\n    local arg1, arg2, arg3 = test.key(\"foo\")\r\n    local foo = test.key()\r\n\r\n    assert.is.equal(\"bar\", arg1)\r\n    assert.is.equal(nil, arg2)\r\n    assert.is.equal(\"bar\", arg3)\r\n    assert.is.equal(\"foo foo\", foo)\r\n  end",
    "type": "function"
  }, {
    "id": 154,
    "text": "stub(test, \"key\").returns(\"foo foo\")",
    "type": "statement:functioncall"
  }, {
    "id": 155,
    "text": "test.key.on_call_with(\"foo\").invokes(function(a, b, c)\r\n      return \"bar\", nil, \"bar\"\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 156,
    "text": "local arg1, arg2, arg3 = test.key(\"foo\")",
    "type": "statement:localassign"
  }, {
    "id": 157,
    "text": "local foo = test.key()",
    "type": "statement:localassign"
  }, {
    "id": 158,
    "text": "assert.is.equal(\"bar\", arg1)",
    "type": "statement:functioncall"
  }, {
    "id": 159,
    "text": "assert.is.equal(\"foo foo\", foo)",
    "type": "statement:functioncall"
  }, {
    "id": 160,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 161,
    "text": "function()\r\n    local t = { foo = { bar = { \"test\" } } }\r\n    stub(test, \"key\").returns(\"foo foo\")\r\n    test.key.on_call_with(t).returns(\"bar\")\r\n    t.foo.bar = \"value\"\r\n\r\n    local bar = test.key({ foo = { bar = { \"test\" } } })\r\n    local foofoo = test.key(t)\r\n\r\n    assert.is.equal(\"bar\", bar)\r\n    assert.is.equal(\"foo foo\", foofoo)\r\n  end",
    "type": "function"
  }, {
    "id": 162,
    "text": "local t = { foo = { bar = { \"test\" } } }",
    "type": "statement:localassign"
  }, {
    "id": 163,
    "text": "test.key.on_call_with(t).returns(\"bar\")",
    "type": "statement:functioncall"
  }, {
    "id": 164,
    "text": "t.foo.bar = \"value\"",
    "type": "statement:assign"
  }, {
    "id": 165,
    "text": "local bar = test.key({ foo = { bar = { \"test\" } } })",
    "type": "statement:localassign"
  }, {
    "id": 166,
    "text": "local foofoo = test.key(t)",
    "type": "statement:localassign"
  }, {
    "id": 167,
    "text": "assert.is.equal(\"bar\", bar)",
    "type": "statement:functioncall"
  }, {
    "id": 168,
    "text": "assert.is.equal(\"foo foo\", foofoo)",
    "type": "statement:functioncall"
  }, {
    "id": 169,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 170,
    "text": "function() return \"bar bar\" end",
    "type": "function"
  }, {
    "id": 171,
    "text": "function()\r\n    local t = { foo = { bar = { \"test\" } } }\r\n    stub(test, \"key\").returns(\"foo foo\")\r\n    test.key.on_call_with(t).invokes(function() return \"bar bar\" end)\r\n    t.foo.bar = \"value\"\r\n\r\n    local bar = test.key({ foo = { bar = { \"test\" } } })\r\n    local foofoo = test.key(t)\r\n\r\n    assert.is.equal(\"bar bar\", bar)\r\n    assert.is.equal(\"foo foo\", foofoo)\r\n  end",
    "type": "function"
  }, {
    "id": 172,
    "text": "test.key.on_call_with(t).invokes(function() return \"bar bar\" end)",
    "type": "statement:functioncall"
  }, {
    "id": 173,
    "text": "assert.is.equal(\"bar bar\", bar)",
    "type": "statement:functioncall"
  }, {
    "id": 174,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 175,
    "text": "function()\r\n    local t1 = { foo = { bar = { \"test\" } } }\r\n    local t2 = { foo = { bar = { \"test\" } } }\r\n    stub(test, \"key\").returns(\"foo foo\")\r\n    test.key.on_call_with(match.is_ref(t1)).returns(\"bar\")\r\n    t1.foo.bar = \"value\"\r\n    t2.foo.bar = \"value\"\r\n\r\n    local bar = test.key(t1)\r\n    local foo = test.key(t2)\r\n    local foofoo = test.key({ foo = { bar = { \"test\" } } })\r\n\r\n    assert.is.equal(\"bar\", bar)\r\n    assert.is.equal(\"foo foo\", foo)\r\n    assert.is.equal(\"foo foo\", foofoo)\r\n  end",
    "type": "function"
  }, {
    "id": 176,
    "text": "local t1 = { foo = { bar = { \"test\" } } }",
    "type": "statement:localassign"
  }, {
    "id": 177,
    "text": "local t2 = { foo = { bar = { \"test\" } } }",
    "type": "statement:localassign"
  }, {
    "id": 178,
    "text": "test.key.on_call_with(match.is_ref(t1)).returns(\"bar\")",
    "type": "statement:functioncall"
  }, {
    "id": 179,
    "text": "t1.foo.bar = \"value\"",
    "type": "statement:assign"
  }, {
    "id": 180,
    "text": "t2.foo.bar = \"value\"",
    "type": "statement:assign"
  }, {
    "id": 181,
    "text": "local bar = test.key(t1)",
    "type": "statement:localassign"
  }, {
    "id": 182,
    "text": "local foo = test.key(t2)",
    "type": "statement:localassign"
  }, {
    "id": 183,
    "text": "local foofoo = test.key({ foo = { bar = { \"test\" } } })",
    "type": "statement:localassign"
  }, {
    "id": 184,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 185,
    "text": "function()\r\n  local test = {}\r\n\r\n  before_each(function()\r\n    test = {key = function()\r\n      return \"derp\"\r\n    end}\r\n  end)\r\n  \r\n  it(\"checks to see if stub keeps track of arguments\", function()\r\n    stub(test, \"key\")\r\n    test.key(\"derp\")\r\n    assert.stub(test.key).was.called_with(\"derp\")\r\n    assert.errors(function() assert.stub(test.key).was.called_with(\"herp\") end)\r\n  end)\r\n\r\n  it(\"checks to see if stub keeps track of number of calls\", function()\r\n     stub(test, \"key\")\r\n     test.key()\r\n     test.key(\"test\")\r\n     assert.stub(test.key).was.called(2)\r\n  end)\r\n\r\n  it(\"checks called() and called_with() assertions\", function()\r\n    local s = stub.new(test, \"key\")\r\n\r\n    s(1, 2, 3)\r\n    s(\"a\", \"b\", \"c\")\r\n    assert.stub(s).was.called()\r\n    assert.stub(s).was.called(2) -- twice!\r\n    assert.stub(s).was_not.called(3)\r\n    assert.stub(s).was_not.called_with({1, 2, 3}) -- mind the accolades\r\n    assert.stub(s).was.called_with(1, 2, 3)\r\n    assert.has_error(function() assert.stub(s).was.called_with(5, 6) end)\r\n  end)\r\n\r\n  it(\"checks stub to fail when spying on non-callable elements\", function()\r\n    local s\r\n    local testfunc = function()\r\n      local t = { key = s}\r\n      stub.new(t, \"key\")\r\n    end\r\n    -- try some types to fail\r\n    s = \"some string\";  assert.has_error(testfunc)\r\n    s = 10;             assert.has_error(testfunc)\r\n    s = true;           assert.has_error(testfunc)\r\n    -- try some types to succeed\r\n    s = function() end; assert.has_no_error(testfunc)\r\n    s = setmetatable( {}, { __call = function() end } ); assert.has_no_error(testfunc)\r\n  end)\r\n\r\n  it(\"checks reverting a stub call\", function()\r\n     local calls = 0\r\n     local old = function() calls = calls + 1 end\r\n     test.key = old\r\n     local s = stub.new(test, \"key\")\r\n     assert.is_table(s)\r\n     s()\r\n     s()\r\n     assert.stub(s).was.called(2)  \r\n     assert.are.equal(calls, 0)   -- its a stub, so no calls\r\n     local old_s = s\r\n     s = s:revert()\r\n     s()\r\n     assert.stub(old_s).was.called(2)  -- still two, stub was removed\r\n     assert.are.equal(s, old)\r\n     assert.are.equal(calls, 1)     -- restored, so now 1 call\r\n  end)\r\n\r\n  it(\"checks reverting a stub call on a nil value\", function()\r\n     test = {}\r\n     local s = stub.new(test, \"key\")\r\n     assert.is_table(s)\r\n     s()\r\n     s()\r\n     assert.stub(s).was.called(2)  \r\n     local old_s = s\r\n     s = s:revert()\r\n     assert.is_nil(s)\r\n  end)\r\n\r\n  it(\"checks creating and reverting a 'blank' stub\", function()\r\n     local s = stub.new()   -- use no parameters to create a blank\r\n     assert.is_table(s)\r\n     s()\r\n     s()\r\n     assert.stub(s).was.called(2)  \r\n     local old_s = s\r\n     s = s:revert()\r\n     assert.is_nil(s)\r\n  end)\r\n\r\n  it(\"checks clearing a stub only clears call history\", function()\r\n     local s = stub.new(test, \"key\")\r\n     s.returns(\"value\")\r\n     s.on_call_with(\"foo\").returns(\"bar\")\r\n     s()\r\n     s(\"foo\")\r\n     s:clear()\r\n     assert.stub(s).was_not.called()\r\n     assert.stub(s).was_not.returned_with(\"value\")\r\n     assert.stub(s).was_not.returned_with(\"bar\")\r\n     s(\"foo\")\r\n     assert.stub(s).was.returned_with(\"bar\")\r\n  end)\r\n\r\n  it(\"returns nil by default\", function()\r\n    stub(test, \"key\")\r\n\r\n    assert.is_nil(test.key())\r\n  end)\r\n\r\n  it(\"returns a given return value\", function()\r\n    stub(test, \"key\", \"foo\")\r\n\r\n    assert.is.equal(\"foo\", test.key())\r\n  end)\r\n\r\n  it(\"returns multiple given values\", function()\r\n    stub(test, \"key\", \"foo\", nil, \"bar\")\r\n\r\n    local arg1, arg2, arg3 = test.key()\r\n\r\n    assert.is.equal(\"foo\", arg1)\r\n    assert.is.equal(nil, arg2)\r\n    assert.is.equal(\"bar\", arg3)\r\n  end)\r\n\r\n  it(\"calls specified stub function\", function()\r\n    stub(test, \"key\", function(a, b, c)\r\n      return c, b, a\r\n    end)\r\n\r\n    local arg1, arg2, arg3 = test.key(\"bar\", nil, \"foo\")\r\n\r\n    assert.is.equal(\"foo\", arg1)\r\n    assert.is.equal(nil, arg2)\r\n    assert.is.equal(\"bar\", arg3)\r\n  end)\r\n\r\n  it(\"calls specified stub callable object\", function()\r\n    local callable = setmetatable({}, { __call = function(self, a, b, c)\r\n      return c, b, a\r\n    end})\r\n    stub(test, \"key\", callable)\r\n\r\n    local arg1, arg2, arg3 = test.key(\"bar\", nil, \"foo\")\r\n\r\n    assert.is.equal(\"foo\", arg1)\r\n    assert.is.equal(nil, arg2)\r\n    assert.is.equal(\"bar\", arg3)\r\n  end)\r\n\r\n  it(\"returning multiple given values overrides stub function\", function()\r\n    local function foo() end\r\n    stub(test, \"key\", foo, nil, \"bar\")\r\n\r\n    local arg1, arg2, arg3 = test.key()\r\n\r\n    assert.is.equal(foo, arg1)\r\n    assert.is.equal(nil, arg2)\r\n    assert.is.equal(\"bar\", arg3)\r\n  end)\r\n\r\n  it(\"returns default stub arguments\", function()\r\n    stub(test, \"key\").returns(nil, \"foo\", \"bar\")\r\n\r\n    local arg1, arg2, arg3 = test.key(\"bar\", nil, \"foo\")\r\n\r\n    assert.is.equal(nil, arg1)\r\n    assert.is.equal(\"foo\", arg2)\r\n    assert.is.equal(\"bar\", arg3)\r\n  end)\r\n\r\n  it(\"invokes default stub function\", function()\r\n    stub(test, \"key\").invokes(function(a, b, c)\r\n      return c, b, a\r\n    end)\r\n\r\n    local arg1, arg2, arg3 = test.key(\"bar\", nil, \"foo\")\r\n\r\n    assert.is.equal(\"foo\", arg1)\r\n    assert.is.equal(nil, arg2)\r\n    assert.is.equal(\"bar\", arg3)\r\n  end)\r\n\r\n  it(\"returns stub arguments by default\", function()\r\n    stub(test, \"key\").by_default.returns(\"foo\", \"bar\")\r\n\r\n    local arg1, arg2 = test.key()\r\n\r\n    assert.is.equal(\"foo\", arg1)\r\n    assert.is.equal(\"bar\", arg2)\r\n  end)\r\n\r\n  it(\"invokes stub function by default\", function()\r\n    stub(test, \"key\").by_default.invokes(function(a, b)\r\n      return b, a\r\n    end)\r\n\r\n    local arg1, arg2 = test.key(\"bar\", \"foo\")\r\n\r\n    assert.is.equal(\"foo\", arg1)\r\n    assert.is.equal(\"bar\", arg2)\r\n  end)\r\n\r\n  it(\"on_call_with returns specified arguments\", function()\r\n    stub(test, \"key\").returns(\"foo bar\")\r\n    test.key.on_call_with(\"bar\").returns(\"foo\", nil, \"bar\")\r\n    test.key.on_call_with(match._, \"foo\").returns(\"foofoo\")\r\n\r\n    local arg1, arg2, arg3 = test.key(\"bar\")\r\n    local foofoo1 = test.key(1, \"foo\")\r\n    local foofoo2 = test.key(2, \"foo\")\r\n    local foofoo3 = test.key(nil, \"foo\")\r\n    local foobar = test.key()\r\n\r\n    assert.is.equal(\"foo\", arg1)\r\n    assert.is.equal(nil, arg2)\r\n    assert.is.equal(\"bar\", arg3)\r\n    assert.is.equal(\"foo bar\", foobar)\r\n    assert.is.equal(\"foofoo\", foofoo1)\r\n    assert.is.equal(\"foofoo\", foofoo2)\r\n    assert.is.equal(\"foofoo\", foofoo3)\r\n  end)\r\n\r\n  it(\"on_call_with invokes stub function\", function()\r\n    stub(test, \"key\").returns(\"foo foo\")\r\n    test.key.on_call_with(\"foo\").invokes(function(a, b, c)\r\n      return \"bar\", nil, \"bar\"\r\n    end)\r\n\r\n    local arg1, arg2, arg3 = test.key(\"foo\")\r\n    local foo = test.key()\r\n\r\n    assert.is.equal(\"bar\", arg1)\r\n    assert.is.equal(nil, arg2)\r\n    assert.is.equal(\"bar\", arg3)\r\n    assert.is.equal(\"foo foo\", foo)\r\n  end)\r\n\r\n  it(\"on_call_with matches arguments for returns\", function()\r\n    local t = { foo = { bar = { \"test\" } } }\r\n    stub(test, \"key\").returns(\"foo foo\")\r\n    test.key.on_call_with(t).returns(\"bar\")\r\n    t.foo.bar = \"value\"\r\n\r\n    local bar = test.key({ foo = { bar = { \"test\" } } })\r\n    local foofoo = test.key(t)\r\n\r\n    assert.is.equal(\"bar\", bar)\r\n    assert.is.equal(\"foo foo\", foofoo)\r\n  end)\r\n\r\n  it(\"on_call_with matches arguments for invokes\", function()\r\n    local t = { foo = { bar = { \"test\" } } }\r\n    stub(test, \"key\").returns(\"foo foo\")\r\n    test.key.on_call_with(t).invokes(function() return \"bar bar\" end)\r\n    t.foo.bar = \"value\"\r\n\r\n    local bar = test.key({ foo = { bar = { \"test\" } } })\r\n    local foofoo = test.key(t)\r\n\r\n    assert.is.equal(\"bar bar\", bar)\r\n    assert.is.equal(\"foo foo\", foofoo)\r\n  end)\r\n\r\n  it(\"on_call_with matches arguments using refs\", function()\r\n    local t1 = { foo = { bar = { \"test\" } } }\r\n    local t2 = { foo = { bar = { \"test\" } } }\r\n    stub(test, \"key\").returns(\"foo foo\")\r\n    test.key.on_call_with(match.is_ref(t1)).returns(\"bar\")\r\n    t1.foo.bar = \"value\"\r\n    t2.foo.bar = \"value\"\r\n\r\n    local bar = test.key(t1)\r\n    local foo = test.key(t2)\r\n    local foofoo = test.key({ foo = { bar = { \"test\" } } })\r\n\r\n    assert.is.equal(\"bar\", bar)\r\n    assert.is.equal(\"foo foo\", foo)\r\n    assert.is.equal(\"foo foo\", foofoo)\r\n  end)\r\n\r\nend",
    "type": "function"
  }, {
    "id": 186,
    "text": "local test = {}",
    "type": "statement:localassign"
  }, {
    "id": 187,
    "text": "before_each(function()\r\n    test = {key = function()\r\n      return \"derp\"\r\n    end}\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 188,
    "text": "it(\"checks to see if stub keeps track of arguments\", function()\r\n    stub(test, \"key\")\r\n    test.key(\"derp\")\r\n    assert.stub(test.key).was.called_with(\"derp\")\r\n    assert.errors(function() assert.stub(test.key).was.called_with(\"herp\") end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 189,
    "text": "it(\"checks to see if stub keeps track of number of calls\", function()\r\n     stub(test, \"key\")\r\n     test.key()\r\n     test.key(\"test\")\r\n     assert.stub(test.key).was.called(2)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 190,
    "text": "it(\"checks called() and called_with() assertions\", function()\r\n    local s = stub.new(test, \"key\")\r\n\r\n    s(1, 2, 3)\r\n    s(\"a\", \"b\", \"c\")\r\n    assert.stub(s).was.called()\r\n    assert.stub(s).was.called(2) -- twice!\r\n    assert.stub(s).was_not.called(3)\r\n    assert.stub(s).was_not.called_with({1, 2, 3}) -- mind the accolades\r\n    assert.stub(s).was.called_with(1, 2, 3)\r\n    assert.has_error(function() assert.stub(s).was.called_with(5, 6) end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 191,
    "text": "it(\"checks stub to fail when spying on non-callable elements\", function()\r\n    local s\r\n    local testfunc = function()\r\n      local t = { key = s}\r\n      stub.new(t, \"key\")\r\n    end\r\n    -- try some types to fail\r\n    s = \"some string\";  assert.has_error(testfunc)\r\n    s = 10;             assert.has_error(testfunc)\r\n    s = true;           assert.has_error(testfunc)\r\n    -- try some types to succeed\r\n    s = function() end; assert.has_no_error(testfunc)\r\n    s = setmetatable( {}, { __call = function() end } ); assert.has_no_error(testfunc)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 192,
    "text": "it(\"checks reverting a stub call\", function()\r\n     local calls = 0\r\n     local old = function() calls = calls + 1 end\r\n     test.key = old\r\n     local s = stub.new(test, \"key\")\r\n     assert.is_table(s)\r\n     s()\r\n     s()\r\n     assert.stub(s).was.called(2)  \r\n     assert.are.equal(calls, 0)   -- its a stub, so no calls\r\n     local old_s = s\r\n     s = s:revert()\r\n     s()\r\n     assert.stub(old_s).was.called(2)  -- still two, stub was removed\r\n     assert.are.equal(s, old)\r\n     assert.are.equal(calls, 1)     -- restored, so now 1 call\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 193,
    "text": "it(\"checks reverting a stub call on a nil value\", function()\r\n     test = {}\r\n     local s = stub.new(test, \"key\")\r\n     assert.is_table(s)\r\n     s()\r\n     s()\r\n     assert.stub(s).was.called(2)  \r\n     local old_s = s\r\n     s = s:revert()\r\n     assert.is_nil(s)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 194,
    "text": "it(\"checks creating and reverting a 'blank' stub\", function()\r\n     local s = stub.new()   -- use no parameters to create a blank\r\n     assert.is_table(s)\r\n     s()\r\n     s()\r\n     assert.stub(s).was.called(2)  \r\n     local old_s = s\r\n     s = s:revert()\r\n     assert.is_nil(s)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 195,
    "text": "it(\"checks clearing a stub only clears call history\", function()\r\n     local s = stub.new(test, \"key\")\r\n     s.returns(\"value\")\r\n     s.on_call_with(\"foo\").returns(\"bar\")\r\n     s()\r\n     s(\"foo\")\r\n     s:clear()\r\n     assert.stub(s).was_not.called()\r\n     assert.stub(s).was_not.returned_with(\"value\")\r\n     assert.stub(s).was_not.returned_with(\"bar\")\r\n     s(\"foo\")\r\n     assert.stub(s).was.returned_with(\"bar\")\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 196,
    "text": "it(\"returns nil by default\", function()\r\n    stub(test, \"key\")\r\n\r\n    assert.is_nil(test.key())\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 197,
    "text": "it(\"returns a given return value\", function()\r\n    stub(test, \"key\", \"foo\")\r\n\r\n    assert.is.equal(\"foo\", test.key())\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 198,
    "text": "it(\"returns multiple given values\", function()\r\n    stub(test, \"key\", \"foo\", nil, \"bar\")\r\n\r\n    local arg1, arg2, arg3 = test.key()\r\n\r\n    assert.is.equal(\"foo\", arg1)\r\n    assert.is.equal(nil, arg2)\r\n    assert.is.equal(\"bar\", arg3)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 199,
    "text": "it(\"calls specified stub function\", function()\r\n    stub(test, \"key\", function(a, b, c)\r\n      return c, b, a\r\n    end)\r\n\r\n    local arg1, arg2, arg3 = test.key(\"bar\", nil, \"foo\")\r\n\r\n    assert.is.equal(\"foo\", arg1)\r\n    assert.is.equal(nil, arg2)\r\n    assert.is.equal(\"bar\", arg3)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 200,
    "text": "it(\"calls specified stub callable object\", function()\r\n    local callable = setmetatable({}, { __call = function(self, a, b, c)\r\n      return c, b, a\r\n    end})\r\n    stub(test, \"key\", callable)\r\n\r\n    local arg1, arg2, arg3 = test.key(\"bar\", nil, \"foo\")\r\n\r\n    assert.is.equal(\"foo\", arg1)\r\n    assert.is.equal(nil, arg2)\r\n    assert.is.equal(\"bar\", arg3)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 201,
    "text": "it(\"returning multiple given values overrides stub function\", function()\r\n    local function foo() end\r\n    stub(test, \"key\", foo, nil, \"bar\")\r\n\r\n    local arg1, arg2, arg3 = test.key()\r\n\r\n    assert.is.equal(foo, arg1)\r\n    assert.is.equal(nil, arg2)\r\n    assert.is.equal(\"bar\", arg3)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 202,
    "text": "it(\"returns default stub arguments\", function()\r\n    stub(test, \"key\").returns(nil, \"foo\", \"bar\")\r\n\r\n    local arg1, arg2, arg3 = test.key(\"bar\", nil, \"foo\")\r\n\r\n    assert.is.equal(nil, arg1)\r\n    assert.is.equal(\"foo\", arg2)\r\n    assert.is.equal(\"bar\", arg3)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 203,
    "text": "it(\"invokes default stub function\", function()\r\n    stub(test, \"key\").invokes(function(a, b, c)\r\n      return c, b, a\r\n    end)\r\n\r\n    local arg1, arg2, arg3 = test.key(\"bar\", nil, \"foo\")\r\n\r\n    assert.is.equal(\"foo\", arg1)\r\n    assert.is.equal(nil, arg2)\r\n    assert.is.equal(\"bar\", arg3)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 204,
    "text": "it(\"returns stub arguments by default\", function()\r\n    stub(test, \"key\").by_default.returns(\"foo\", \"bar\")\r\n\r\n    local arg1, arg2 = test.key()\r\n\r\n    assert.is.equal(\"foo\", arg1)\r\n    assert.is.equal(\"bar\", arg2)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 205,
    "text": "it(\"invokes stub function by default\", function()\r\n    stub(test, \"key\").by_default.invokes(function(a, b)\r\n      return b, a\r\n    end)\r\n\r\n    local arg1, arg2 = test.key(\"bar\", \"foo\")\r\n\r\n    assert.is.equal(\"foo\", arg1)\r\n    assert.is.equal(\"bar\", arg2)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 206,
    "text": "it(\"on_call_with returns specified arguments\", function()\r\n    stub(test, \"key\").returns(\"foo bar\")\r\n    test.key.on_call_with(\"bar\").returns(\"foo\", nil, \"bar\")\r\n    test.key.on_call_with(match._, \"foo\").returns(\"foofoo\")\r\n\r\n    local arg1, arg2, arg3 = test.key(\"bar\")\r\n    local foofoo1 = test.key(1, \"foo\")\r\n    local foofoo2 = test.key(2, \"foo\")\r\n    local foofoo3 = test.key(nil, \"foo\")\r\n    local foobar = test.key()\r\n\r\n    assert.is.equal(\"foo\", arg1)\r\n    assert.is.equal(nil, arg2)\r\n    assert.is.equal(\"bar\", arg3)\r\n    assert.is.equal(\"foo bar\", foobar)\r\n    assert.is.equal(\"foofoo\", foofoo1)\r\n    assert.is.equal(\"foofoo\", foofoo2)\r\n    assert.is.equal(\"foofoo\", foofoo3)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 207,
    "text": "it(\"on_call_with invokes stub function\", function()\r\n    stub(test, \"key\").returns(\"foo foo\")\r\n    test.key.on_call_with(\"foo\").invokes(function(a, b, c)\r\n      return \"bar\", nil, \"bar\"\r\n    end)\r\n\r\n    local arg1, arg2, arg3 = test.key(\"foo\")\r\n    local foo = test.key()\r\n\r\n    assert.is.equal(\"bar\", arg1)\r\n    assert.is.equal(nil, arg2)\r\n    assert.is.equal(\"bar\", arg3)\r\n    assert.is.equal(\"foo foo\", foo)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 208,
    "text": "it(\"on_call_with matches arguments for returns\", function()\r\n    local t = { foo = { bar = { \"test\" } } }\r\n    stub(test, \"key\").returns(\"foo foo\")\r\n    test.key.on_call_with(t).returns(\"bar\")\r\n    t.foo.bar = \"value\"\r\n\r\n    local bar = test.key({ foo = { bar = { \"test\" } } })\r\n    local foofoo = test.key(t)\r\n\r\n    assert.is.equal(\"bar\", bar)\r\n    assert.is.equal(\"foo foo\", foofoo)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 209,
    "text": "it(\"on_call_with matches arguments for invokes\", function()\r\n    local t = { foo = { bar = { \"test\" } } }\r\n    stub(test, \"key\").returns(\"foo foo\")\r\n    test.key.on_call_with(t).invokes(function() return \"bar bar\" end)\r\n    t.foo.bar = \"value\"\r\n\r\n    local bar = test.key({ foo = { bar = { \"test\" } } })\r\n    local foofoo = test.key(t)\r\n\r\n    assert.is.equal(\"bar bar\", bar)\r\n    assert.is.equal(\"foo foo\", foofoo)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 210,
    "text": "it(\"on_call_with matches arguments using refs\", function()\r\n    local t1 = { foo = { bar = { \"test\" } } }\r\n    local t2 = { foo = { bar = { \"test\" } } }\r\n    stub(test, \"key\").returns(\"foo foo\")\r\n    test.key.on_call_with(match.is_ref(t1)).returns(\"bar\")\r\n    t1.foo.bar = \"value\"\r\n    t2.foo.bar = \"value\"\r\n\r\n    local bar = test.key(t1)\r\n    local foo = test.key(t2)\r\n    local foofoo = test.key({ foo = { bar = { \"test\" } } })\r\n\r\n    assert.is.equal(\"bar\", bar)\r\n    assert.is.equal(\"foo foo\", foo)\r\n    assert.is.equal(\"foo foo\", foofoo)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 211,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 212,
    "text": "",
    "type": "function container"
  }, {
    "id": 213,
    "text": "is_ref",
    "type": "global function"
  }, {
    "id": 214,
    "text": "key",
    "type": "global function"
  }, {
    "id": 215,
    "text": "has_error",
    "type": "global function"
  }, {
    "id": 216,
    "text": "has_no_error",
    "type": "global function"
  }, {
    "id": 217,
    "text": "stub",
    "type": "global function"
  }, {
    "id": 218,
    "text": "stub",
    "type": "global function"
  }, {
    "id": 219,
    "text": "it",
    "type": "global function"
  }, {
    "id": 220,
    "text": "before_each",
    "type": "global function"
  }, {
    "id": 221,
    "text": "returns",
    "type": "global function"
  }, {
    "id": 222,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 223,
    "text": "is_nil",
    "type": "global function"
  }, {
    "id": 224,
    "text": "on_call_with",
    "type": "global function"
  }, {
    "id": 225,
    "text": "assert.are.equal",
    "type": "global function"
  }, {
    "id": 226,
    "text": "is_table",
    "type": "global function"
  }, {
    "id": 227,
    "text": "new",
    "type": "global function"
  }, {
    "id": 228,
    "text": "require",
    "type": "global function"
  }, {
    "id": 229,
    "text": "errors",
    "type": "global function"
  }, {
    "id": 230,
    "text": "test.key.on_call_with",
    "type": "global function"
  }, {
    "id": 231,
    "text": "assert.is.equal",
    "type": "global function"
  }, {
    "id": 232,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 233,
    "text": "",
    "type": "variable container"
  }, {
    "id": 234,
    "text": "",
    "type": "require container"
  }, {
    "id": 235,
    "text": "",
    "type": "require local variable"
  } ]
}