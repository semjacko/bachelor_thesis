{
  "_filename": "mocks_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/luassert/spec/mocks_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 8,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 13,
    "label": "has",
    "to": 17
  }, {
    "from": 13,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 14
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 16
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 3
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 3
  }, {
    "from": 24,
    "label": "has",
    "to": 15
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 24,
    "label": "has",
    "to": 29
  }, {
    "from": 24,
    "label": "has",
    "to": 30
  }, {
    "from": 24,
    "label": "has",
    "to": 31
  }, {
    "from": 24,
    "label": "has",
    "to": 32
  }, {
    "from": 24,
    "label": "has",
    "to": 33
  }, {
    "from": 24,
    "label": "has",
    "to": 34
  }, {
    "from": 24,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 9
  }, {
    "from": 36,
    "label": "has",
    "to": 15
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 14
  }, {
    "from": 36,
    "label": "has",
    "to": 17
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 3
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 9
  }, {
    "from": 43,
    "label": "has",
    "to": 10
  }, {
    "from": 43,
    "label": "has",
    "to": 11
  }, {
    "from": 40,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 14
  }, {
    "from": 44,
    "label": "has",
    "to": 15
  }, {
    "from": 44,
    "label": "has",
    "to": 16
  }, {
    "from": 44,
    "label": "has",
    "to": 17
  }, {
    "from": 40,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 14
  }, {
    "from": 45,
    "label": "has",
    "to": 20
  }, {
    "from": 45,
    "label": "has",
    "to": 16
  }, {
    "from": 45,
    "label": "has",
    "to": 21
  }, {
    "from": 40,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 3
  }, {
    "from": 46,
    "label": "has",
    "to": 15
  }, {
    "from": 46,
    "label": "has",
    "to": 26
  }, {
    "from": 46,
    "label": "has",
    "to": 27
  }, {
    "from": 46,
    "label": "has",
    "to": 28
  }, {
    "from": 46,
    "label": "has",
    "to": 29
  }, {
    "from": 46,
    "label": "has",
    "to": 30
  }, {
    "from": 46,
    "label": "has",
    "to": 31
  }, {
    "from": 46,
    "label": "has",
    "to": 32
  }, {
    "from": 46,
    "label": "has",
    "to": 33
  }, {
    "from": 46,
    "label": "has",
    "to": 34
  }, {
    "from": 40,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 9
  }, {
    "from": 47,
    "label": "has",
    "to": 15
  }, {
    "from": 47,
    "label": "has",
    "to": 37
  }, {
    "from": 47,
    "label": "has",
    "to": 14
  }, {
    "from": 47,
    "label": "has",
    "to": 17
  }, {
    "from": 47,
    "label": "has",
    "to": 38
  }, {
    "from": 40,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "calls",
    "to": 57
  }, {
    "from": 49,
    "label": "calls",
    "to": 57
  }, {
    "from": 49,
    "label": "calls",
    "to": 57
  }, {
    "from": 49,
    "label": "calls",
    "to": 57
  }, {
    "from": 49,
    "label": "calls",
    "to": 57
  }, {
    "from": 49,
    "label": "calls",
    "to": 57
  }, {
    "from": 49,
    "label": "calls",
    "to": 60
  }, {
    "from": 49,
    "label": "calls",
    "to": 60
  }, {
    "from": 49,
    "label": "calls",
    "to": 60
  }, {
    "from": 49,
    "label": "calls",
    "to": 60
  }, {
    "from": 49,
    "label": "calls",
    "to": 51
  }, {
    "from": 49,
    "label": "calls",
    "to": 51
  }, {
    "from": 49,
    "label": "calls",
    "to": 51
  }, {
    "from": 49,
    "label": "calls",
    "to": 51
  }, {
    "from": 49,
    "label": "calls",
    "to": 52
  }, {
    "from": 49,
    "label": "calls",
    "to": 52
  }, {
    "from": 49,
    "label": "calls",
    "to": 52
  }, {
    "from": 49,
    "label": "calls",
    "to": 52
  }, {
    "from": 49,
    "label": "calls",
    "to": 52
  }, {
    "from": 49,
    "label": "calls",
    "to": 50
  }, {
    "from": 49,
    "label": "calls",
    "to": 50
  }, {
    "from": 49,
    "label": "calls",
    "to": 50
  }, {
    "from": 49,
    "label": "calls",
    "to": 50
  }, {
    "from": 49,
    "label": "calls",
    "to": 50
  }, {
    "from": 49,
    "label": "calls",
    "to": 53
  }, {
    "from": 49,
    "label": "calls",
    "to": 54
  }, {
    "from": 49,
    "label": "calls",
    "to": 59
  }, {
    "from": 49,
    "label": "calls",
    "to": 59
  }, {
    "from": 49,
    "label": "calls",
    "to": 61
  }, {
    "from": 49,
    "label": "calls",
    "to": 61
  }, {
    "from": 49,
    "label": "calls",
    "to": 61
  }, {
    "from": 49,
    "label": "calls",
    "to": 61
  }, {
    "from": 49,
    "label": "calls",
    "to": 61
  }, {
    "from": 49,
    "label": "calls",
    "to": 61
  }, {
    "from": 49,
    "label": "calls",
    "to": 56
  }, {
    "from": 49,
    "label": "calls",
    "to": 55
  }, {
    "from": 49,
    "label": "calls",
    "to": 58
  }, {
    "from": 49,
    "label": "calls",
    "to": 58
  }, {
    "from": 49,
    "label": "calls",
    "to": 58
  }, {
    "from": 49,
    "label": "calls",
    "to": 58
  }, {
    "from": 49,
    "label": "calls",
    "to": 58
  }, {
    "from": 49,
    "label": "calls",
    "to": 58
  }, {
    "from": 49,
    "label": "calls",
    "to": 58
  }, {
    "from": 49,
    "label": "calls",
    "to": 58
  }, {
    "from": 49,
    "label": "calls",
    "to": 58
  }, {
    "from": 49,
    "label": "calls",
    "to": 58
  }, {
    "from": 49,
    "label": "calls",
    "to": 58
  }, {
    "from": 1,
    "label": "contains",
    "to": 49
  }, {
    "from": 49,
    "label": "declares",
    "to": 2
  }, {
    "from": 49,
    "label": "declares",
    "to": 5
  }, {
    "from": 49,
    "label": "declares",
    "to": 8
  }, {
    "from": 49,
    "label": "declares",
    "to": 13
  }, {
    "from": 49,
    "label": "declares",
    "to": 19
  }, {
    "from": 49,
    "label": "declares",
    "to": 23
  }, {
    "from": 49,
    "label": "declares",
    "to": 24
  }, {
    "from": 49,
    "label": "declares",
    "to": 36
  }, {
    "from": 49,
    "label": "declares",
    "to": 40
  }, {
    "from": 1,
    "label": "contains",
    "to": 62
  }, {
    "from": 1,
    "label": "contains",
    "to": 63
  }, {
    "from": 42,
    "label": "hasArgument",
    "to": 2
  }, {
    "from": 42,
    "label": "hasArgument",
    "to": 5
  }, {
    "from": 43,
    "label": "hasArgument",
    "to": 8
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 13
  }, {
    "from": 45,
    "label": "hasArgument",
    "to": 19
  }, {
    "from": 46,
    "label": "hasArgument",
    "to": 23
  }, {
    "from": 46,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 47,
    "label": "hasArgument",
    "to": 36
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "mocks_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "function()\r\n        return \"derp\"\r\n      end",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "function()\r\n    test = {\r\n      key = function()\r\n        return \"derp\"\r\n      end\r\n    }\r\n  end",
    "type": "function"
  }, {
    "id": 6,
    "text": "test = {\r\n      key = function()\r\n        return \"derp\"\r\n      end\r\n    }",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function()\r\n    local val = tostring(test)\r\n    assert(type(mock(test)) == \"table\")\r\n    assert(tostring(mock(test)) == val)\r\n  end",
    "type": "function"
  }, {
    "id": 9,
    "text": "local val = tostring(test)",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "assert(type(mock(test)) == \"table\")",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "assert(tostring(mock(test)) == val)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function()\r\n    assert(type(test.key) == \"function\")\r\n    mock(test)\r\n    assert(type(test.key) == \"table\")\r\n    assert(test.key() == \"derp\")\r\n  end",
    "type": "function"
  }, {
    "id": 14,
    "text": "assert(type(test.key) == \"function\")",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "mock(test)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "assert(type(test.key) == \"table\")",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "assert(test.key() == \"derp\")",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function()\r\n    assert(type(test.key) == \"function\")\r\n    mock(test, true)\r\n    assert(type(test.key) == \"table\")\r\n    assert(test.key() == nil)\r\n  end",
    "type": "function"
  }, {
    "id": 20,
    "text": "mock(test, true)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "assert(test.key() == nil)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function() return \"foobar\" end",
    "type": "function"
  }, {
    "id": 24,
    "text": "function()\r\n    test.foo = { bar = function() return \"foobar\" end }\r\n    mock(test)\r\n    test.key()\r\n    test.key(\"test\")\r\n    test.foo.bar()\r\n    test.foo.bar(\"hello world\")\r\n    assert.spy(test.key).was.called()\r\n    assert.spy(test.foo.bar).was.called()\r\n    mock.clear(test)\r\n    assert.spy(test.key).was_not.called()\r\n    assert.spy(test.foo.bar).was_not.called()\r\n  end",
    "type": "function"
  }, {
    "id": 25,
    "text": "test.foo = { bar = function() return \"foobar\" end }",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "test.key()",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "test.key(\"test\")",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "test.foo.bar()",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "test.foo.bar(\"hello world\")",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "assert.spy(test.key).was.called()",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "assert.spy(test.foo.bar).was.called()",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "mock.clear(test)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "assert.spy(test.key).was_not.called()",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "assert.spy(test.foo.bar).was_not.called()",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function()\r\n    local val = tostring(test)\r\n    mock(test)\r\n    mock.revert(test)\r\n    assert(type(test.key) == \"function\")\r\n    assert(test.key() == \"derp\")\r\n    assert(tostring(test) == val)\r\n  end",
    "type": "function"
  }, {
    "id": 37,
    "text": "mock.revert(test)",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "assert(tostring(test) == val)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function()\r\n  local test = {}\r\n\r\n  before_each(function()\r\n    test = {\r\n      key = function()\r\n        return \"derp\"\r\n      end\r\n    }\r\n  end)\r\n\r\n  it(\"makes sure we're returning the same table\", function()\r\n    local val = tostring(test)\r\n    assert(type(mock(test)) == \"table\")\r\n    assert(tostring(mock(test)) == val)\r\n  end)\r\n\r\n  it(\"makes sure function calls are spies\", function()\r\n    assert(type(test.key) == \"function\")\r\n    mock(test)\r\n    assert(type(test.key) == \"table\")\r\n    assert(test.key() == \"derp\")\r\n  end)\r\n\r\n  it(\"makes sure function calls are stubs when specified\", function()\r\n    assert(type(test.key) == \"function\")\r\n    mock(test, true)\r\n    assert(type(test.key) == \"table\")\r\n    assert(test.key() == nil)\r\n  end)\r\n\r\n  it(\"makes sure call history can be cleared\", function()\r\n    test.foo = { bar = function() return \"foobar\" end }\r\n    mock(test)\r\n    test.key()\r\n    test.key(\"test\")\r\n    test.foo.bar()\r\n    test.foo.bar(\"hello world\")\r\n    assert.spy(test.key).was.called()\r\n    assert.spy(test.foo.bar).was.called()\r\n    mock.clear(test)\r\n    assert.spy(test.key).was_not.called()\r\n    assert.spy(test.foo.bar).was_not.called()\r\n  end)\r\n\r\n  it(\"makes sure table can be reverted to pre-mock state\", function()\r\n    local val = tostring(test)\r\n    mock(test)\r\n    mock.revert(test)\r\n    assert(type(test.key) == \"function\")\r\n    assert(test.key() == \"derp\")\r\n    assert(tostring(test) == val)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "local test = {}",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "before_each(function()\r\n    test = {\r\n      key = function()\r\n        return \"derp\"\r\n      end\r\n    }\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "it(\"makes sure we're returning the same table\", function()\r\n    local val = tostring(test)\r\n    assert(type(mock(test)) == \"table\")\r\n    assert(tostring(mock(test)) == val)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "it(\"makes sure function calls are spies\", function()\r\n    assert(type(test.key) == \"function\")\r\n    mock(test)\r\n    assert(type(test.key) == \"table\")\r\n    assert(test.key() == \"derp\")\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "it(\"makes sure function calls are stubs when specified\", function()\r\n    assert(type(test.key) == \"function\")\r\n    mock(test, true)\r\n    assert(type(test.key) == \"table\")\r\n    assert(test.key() == nil)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "it(\"makes sure call history can be cleared\", function()\r\n    test.foo = { bar = function() return \"foobar\" end }\r\n    mock(test)\r\n    test.key()\r\n    test.key(\"test\")\r\n    test.foo.bar()\r\n    test.foo.bar(\"hello world\")\r\n    assert.spy(test.key).was.called()\r\n    assert.spy(test.foo.bar).was.called()\r\n    mock.clear(test)\r\n    assert.spy(test.key).was_not.called()\r\n    assert.spy(test.foo.bar).was_not.called()\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "it(\"makes sure table can be reverted to pre-mock state\", function()\r\n    local val = tostring(test)\r\n    mock(test)\r\n    mock.revert(test)\r\n    assert(type(test.key) == \"function\")\r\n    assert(test.key() == \"derp\")\r\n    assert(tostring(test) == val)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "",
    "type": "function container"
  }, {
    "id": 50,
    "text": "key",
    "type": "global function"
  }, {
    "id": 51,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 52,
    "text": "it",
    "type": "global function"
  }, {
    "id": 53,
    "text": "revert",
    "type": "global function"
  }, {
    "id": 54,
    "text": "before_each",
    "type": "global function"
  }, {
    "id": 55,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 56,
    "text": "clear",
    "type": "global function"
  }, {
    "id": 57,
    "text": "mock",
    "type": "global function"
  }, {
    "id": 58,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 59,
    "text": "test.foo.bar",
    "type": "global function"
  }, {
    "id": 60,
    "text": "spy",
    "type": "global function"
  }, {
    "id": 61,
    "text": "type",
    "type": "global function"
  }, {
    "id": 62,
    "text": "",
    "type": "variable container"
  }, {
    "id": 63,
    "text": "",
    "type": "require container"
  } ]
}