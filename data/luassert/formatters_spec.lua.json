{
  "_filename": "formatters_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/luassert/spec/formatters_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 4
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 18,
    "label": "has",
    "to": 22
  }, {
    "from": 18,
    "label": "has",
    "to": 23
  }, {
    "from": 18,
    "label": "has",
    "to": 24
  }, {
    "from": 18,
    "label": "has",
    "to": 25
  }, {
    "from": 18,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 27,
    "label": "has",
    "to": 31
  }, {
    "from": 27,
    "label": "has",
    "to": 32
  }, {
    "from": 27,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 34,
    "label": "has",
    "to": 38
  }, {
    "from": 34,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 40,
    "label": "has",
    "to": 44
  }, {
    "from": 40,
    "label": "has",
    "to": 45
  }, {
    "from": 40,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 51,
    "label": "has",
    "to": 54
  }, {
    "from": 51,
    "label": "has",
    "to": 55
  }, {
    "from": 51,
    "label": "has",
    "to": 56
  }, {
    "from": 51,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 58,
    "label": "has",
    "to": 61
  }, {
    "from": 58,
    "label": "has",
    "to": 54
  }, {
    "from": 58,
    "label": "has",
    "to": 62
  }, {
    "from": 58,
    "label": "has",
    "to": 56
  }, {
    "from": 58,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 64,
    "label": "has",
    "to": 68
  }, {
    "from": 64,
    "label": "has",
    "to": 60
  }, {
    "from": 64,
    "label": "has",
    "to": 61
  }, {
    "from": 64,
    "label": "has",
    "to": 54
  }, {
    "from": 64,
    "label": "has",
    "to": 69
  }, {
    "from": 64,
    "label": "has",
    "to": 56
  }, {
    "from": 64,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 71,
    "label": "has",
    "to": 74
  }, {
    "from": 71,
    "label": "has",
    "to": 75
  }, {
    "from": 71,
    "label": "has",
    "to": 76
  }, {
    "from": 71,
    "label": "has",
    "to": 56
  }, {
    "from": 71,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 78,
    "label": "has",
    "to": 81
  }, {
    "from": 78,
    "label": "has",
    "to": 82
  }, {
    "from": 78,
    "label": "has",
    "to": 83
  }, {
    "from": 78,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 80
  }, {
    "from": 85,
    "label": "has",
    "to": 81
  }, {
    "from": 85,
    "label": "has",
    "to": 83
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 88,
    "label": "has",
    "to": 91
  }, {
    "from": 88,
    "label": "has",
    "to": 92
  }, {
    "from": 88,
    "label": "has",
    "to": 93
  }, {
    "from": 88,
    "label": "has",
    "to": 94
  }, {
    "from": 88,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 96,
    "label": "has",
    "to": 99
  }, {
    "from": 96,
    "label": "has",
    "to": 100
  }, {
    "from": 96,
    "label": "has",
    "to": 101
  }, {
    "from": 96,
    "label": "has",
    "to": 102
  }, {
    "from": 96,
    "label": "has",
    "to": 103
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 8
  }, {
    "from": 106,
    "label": "has",
    "to": 4
  }, {
    "from": 104,
    "label": "has",
    "to": 107
  }, {
    "from": 104,
    "label": "has",
    "to": 108
  }, {
    "from": 104,
    "label": "has",
    "to": 109
  }, {
    "from": 104,
    "label": "has",
    "to": 110
  }, {
    "from": 104,
    "label": "has",
    "to": 111
  }, {
    "from": 104,
    "label": "has",
    "to": 112
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 113,
    "label": "has",
    "to": 115
  }, {
    "from": 113,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 13
  }, {
    "from": 113,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 16
  }, {
    "from": 113,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 19
  }, {
    "from": 118,
    "label": "has",
    "to": 20
  }, {
    "from": 118,
    "label": "has",
    "to": 21
  }, {
    "from": 118,
    "label": "has",
    "to": 22
  }, {
    "from": 118,
    "label": "has",
    "to": 23
  }, {
    "from": 118,
    "label": "has",
    "to": 24
  }, {
    "from": 118,
    "label": "has",
    "to": 25
  }, {
    "from": 113,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 28
  }, {
    "from": 119,
    "label": "has",
    "to": 29
  }, {
    "from": 119,
    "label": "has",
    "to": 30
  }, {
    "from": 119,
    "label": "has",
    "to": 31
  }, {
    "from": 119,
    "label": "has",
    "to": 32
  }, {
    "from": 113,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 35
  }, {
    "from": 120,
    "label": "has",
    "to": 36
  }, {
    "from": 120,
    "label": "has",
    "to": 37
  }, {
    "from": 120,
    "label": "has",
    "to": 38
  }, {
    "from": 113,
    "label": "has",
    "to": 121
  }, {
    "from": 121,
    "label": "has",
    "to": 41
  }, {
    "from": 121,
    "label": "has",
    "to": 42
  }, {
    "from": 121,
    "label": "has",
    "to": 43
  }, {
    "from": 121,
    "label": "has",
    "to": 44
  }, {
    "from": 121,
    "label": "has",
    "to": 45
  }, {
    "from": 113,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 48
  }, {
    "from": 122,
    "label": "has",
    "to": 49
  }, {
    "from": 113,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 52
  }, {
    "from": 123,
    "label": "has",
    "to": 53
  }, {
    "from": 123,
    "label": "has",
    "to": 54
  }, {
    "from": 123,
    "label": "has",
    "to": 55
  }, {
    "from": 123,
    "label": "has",
    "to": 56
  }, {
    "from": 113,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 59
  }, {
    "from": 124,
    "label": "has",
    "to": 60
  }, {
    "from": 124,
    "label": "has",
    "to": 61
  }, {
    "from": 124,
    "label": "has",
    "to": 54
  }, {
    "from": 124,
    "label": "has",
    "to": 62
  }, {
    "from": 124,
    "label": "has",
    "to": 56
  }, {
    "from": 113,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 65
  }, {
    "from": 125,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 125,
    "label": "has",
    "to": 68
  }, {
    "from": 125,
    "label": "has",
    "to": 60
  }, {
    "from": 125,
    "label": "has",
    "to": 61
  }, {
    "from": 125,
    "label": "has",
    "to": 54
  }, {
    "from": 125,
    "label": "has",
    "to": 69
  }, {
    "from": 125,
    "label": "has",
    "to": 56
  }, {
    "from": 113,
    "label": "has",
    "to": 126
  }, {
    "from": 126,
    "label": "has",
    "to": 72
  }, {
    "from": 126,
    "label": "has",
    "to": 73
  }, {
    "from": 126,
    "label": "has",
    "to": 74
  }, {
    "from": 126,
    "label": "has",
    "to": 75
  }, {
    "from": 126,
    "label": "has",
    "to": 76
  }, {
    "from": 126,
    "label": "has",
    "to": 56
  }, {
    "from": 113,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 79
  }, {
    "from": 127,
    "label": "has",
    "to": 80
  }, {
    "from": 127,
    "label": "has",
    "to": 81
  }, {
    "from": 127,
    "label": "has",
    "to": 82
  }, {
    "from": 127,
    "label": "has",
    "to": 83
  }, {
    "from": 113,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 86
  }, {
    "from": 128,
    "label": "has",
    "to": 80
  }, {
    "from": 128,
    "label": "has",
    "to": 81
  }, {
    "from": 128,
    "label": "has",
    "to": 83
  }, {
    "from": 113,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 89
  }, {
    "from": 129,
    "label": "has",
    "to": 90
  }, {
    "from": 129,
    "label": "has",
    "to": 91
  }, {
    "from": 129,
    "label": "has",
    "to": 92
  }, {
    "from": 129,
    "label": "has",
    "to": 93
  }, {
    "from": 129,
    "label": "has",
    "to": 94
  }, {
    "from": 113,
    "label": "has",
    "to": 130
  }, {
    "from": 130,
    "label": "has",
    "to": 97
  }, {
    "from": 130,
    "label": "has",
    "to": 98
  }, {
    "from": 130,
    "label": "has",
    "to": 99
  }, {
    "from": 130,
    "label": "has",
    "to": 100
  }, {
    "from": 130,
    "label": "has",
    "to": 101
  }, {
    "from": 130,
    "label": "has",
    "to": 102
  }, {
    "from": 113,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 105
  }, {
    "from": 131,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 8
  }, {
    "from": 106,
    "label": "has",
    "to": 4
  }, {
    "from": 131,
    "label": "has",
    "to": 107
  }, {
    "from": 131,
    "label": "has",
    "to": 108
  }, {
    "from": 131,
    "label": "has",
    "to": 109
  }, {
    "from": 131,
    "label": "has",
    "to": 110
  }, {
    "from": 131,
    "label": "has",
    "to": 111
  }, {
    "from": 113,
    "label": "has",
    "to": 132
  }, {
    "from": 133,
    "label": "calls",
    "to": 145
  }, {
    "from": 133,
    "label": "calls",
    "to": 148
  }, {
    "from": 133,
    "label": "calls",
    "to": 134
  }, {
    "from": 133,
    "label": "calls",
    "to": 134
  }, {
    "from": 133,
    "label": "calls",
    "to": 135
  }, {
    "from": 133,
    "label": "calls",
    "to": 146
  }, {
    "from": 133,
    "label": "calls",
    "to": 140
  }, {
    "from": 133,
    "label": "calls",
    "to": 140
  }, {
    "from": 133,
    "label": "calls",
    "to": 140
  }, {
    "from": 133,
    "label": "calls",
    "to": 140
  }, {
    "from": 133,
    "label": "calls",
    "to": 140
  }, {
    "from": 133,
    "label": "calls",
    "to": 140
  }, {
    "from": 133,
    "label": "calls",
    "to": 140
  }, {
    "from": 133,
    "label": "calls",
    "to": 140
  }, {
    "from": 133,
    "label": "calls",
    "to": 140
  }, {
    "from": 133,
    "label": "calls",
    "to": 140
  }, {
    "from": 133,
    "label": "calls",
    "to": 140
  }, {
    "from": 133,
    "label": "calls",
    "to": 140
  }, {
    "from": 133,
    "label": "calls",
    "to": 140
  }, {
    "from": 133,
    "label": "calls",
    "to": 140
  }, {
    "from": 133,
    "label": "calls",
    "to": 140
  }, {
    "from": 133,
    "label": "calls",
    "to": 140
  }, {
    "from": 133,
    "label": "calls",
    "to": 140
  }, {
    "from": 133,
    "label": "calls",
    "to": 140
  }, {
    "from": 133,
    "label": "calls",
    "to": 140
  }, {
    "from": 133,
    "label": "calls",
    "to": 140
  }, {
    "from": 133,
    "label": "calls",
    "to": 140
  }, {
    "from": 133,
    "label": "calls",
    "to": 140
  }, {
    "from": 133,
    "label": "calls",
    "to": 140
  }, {
    "from": 133,
    "label": "calls",
    "to": 140
  }, {
    "from": 133,
    "label": "calls",
    "to": 150
  }, {
    "from": 133,
    "label": "calls",
    "to": 150
  }, {
    "from": 133,
    "label": "calls",
    "to": 150
  }, {
    "from": 133,
    "label": "calls",
    "to": 150
  }, {
    "from": 133,
    "label": "calls",
    "to": 147
  }, {
    "from": 133,
    "label": "calls",
    "to": 147
  }, {
    "from": 133,
    "label": "calls",
    "to": 147
  }, {
    "from": 133,
    "label": "calls",
    "to": 147
  }, {
    "from": 133,
    "label": "calls",
    "to": 142
  }, {
    "from": 133,
    "label": "calls",
    "to": 143
  }, {
    "from": 133,
    "label": "calls",
    "to": 143
  }, {
    "from": 133,
    "label": "calls",
    "to": 138
  }, {
    "from": 133,
    "label": "calls",
    "to": 138
  }, {
    "from": 133,
    "label": "calls",
    "to": 138
  }, {
    "from": 133,
    "label": "calls",
    "to": 138
  }, {
    "from": 133,
    "label": "calls",
    "to": 138
  }, {
    "from": 133,
    "label": "calls",
    "to": 138
  }, {
    "from": 133,
    "label": "calls",
    "to": 138
  }, {
    "from": 133,
    "label": "calls",
    "to": 138
  }, {
    "from": 133,
    "label": "calls",
    "to": 138
  }, {
    "from": 133,
    "label": "calls",
    "to": 138
  }, {
    "from": 133,
    "label": "calls",
    "to": 138
  }, {
    "from": 133,
    "label": "calls",
    "to": 138
  }, {
    "from": 133,
    "label": "calls",
    "to": 138
  }, {
    "from": 133,
    "label": "calls",
    "to": 138
  }, {
    "from": 133,
    "label": "calls",
    "to": 136
  }, {
    "from": 133,
    "label": "calls",
    "to": 139
  }, {
    "from": 133,
    "label": "calls",
    "to": 2
  }, {
    "from": 133,
    "label": "calls",
    "to": 2
  }, {
    "from": 133,
    "label": "calls",
    "to": 149
  }, {
    "from": 133,
    "label": "calls",
    "to": 149
  }, {
    "from": 133,
    "label": "calls",
    "to": 149
  }, {
    "from": 133,
    "label": "calls",
    "to": 149
  }, {
    "from": 133,
    "label": "calls",
    "to": 149
  }, {
    "from": 133,
    "label": "calls",
    "to": 149
  }, {
    "from": 133,
    "label": "calls",
    "to": 149
  }, {
    "from": 133,
    "label": "calls",
    "to": 144
  }, {
    "from": 133,
    "label": "calls",
    "to": 151
  }, {
    "from": 133,
    "label": "calls",
    "to": 141
  }, {
    "from": 133,
    "label": "calls",
    "to": 137
  }, {
    "from": 1,
    "label": "contains",
    "to": 133
  }, {
    "from": 133,
    "label": "declares",
    "to": 2
  }, {
    "from": 133,
    "label": "declares",
    "to": 6
  }, {
    "from": 133,
    "label": "declares",
    "to": 7
  }, {
    "from": 133,
    "label": "declares",
    "to": 10
  }, {
    "from": 133,
    "label": "declares",
    "to": 12
  }, {
    "from": 133,
    "label": "declares",
    "to": 15
  }, {
    "from": 133,
    "label": "declares",
    "to": 18
  }, {
    "from": 133,
    "label": "declares",
    "to": 27
  }, {
    "from": 133,
    "label": "declares",
    "to": 34
  }, {
    "from": 133,
    "label": "declares",
    "to": 40
  }, {
    "from": 133,
    "label": "declares",
    "to": 47
  }, {
    "from": 133,
    "label": "declares",
    "to": 51
  }, {
    "from": 133,
    "label": "declares",
    "to": 58
  }, {
    "from": 133,
    "label": "declares",
    "to": 64
  }, {
    "from": 133,
    "label": "declares",
    "to": 71
  }, {
    "from": 133,
    "label": "declares",
    "to": 78
  }, {
    "from": 133,
    "label": "declares",
    "to": 85
  }, {
    "from": 133,
    "label": "declares",
    "to": 88
  }, {
    "from": 133,
    "label": "declares",
    "to": 96
  }, {
    "from": 133,
    "label": "declares",
    "to": 104
  }, {
    "from": 133,
    "label": "declares",
    "to": 113
  }, {
    "from": 1,
    "label": "contains",
    "to": 152
  }, {
    "from": 1,
    "label": "contains",
    "to": 153
  }, {
    "from": 114,
    "label": "hasArgument",
    "to": 10
  }, {
    "from": 116,
    "label": "hasArgument",
    "to": 12
  }, {
    "from": 117,
    "label": "hasArgument",
    "to": 15
  }, {
    "from": 118,
    "label": "hasArgument",
    "to": 18
  }, {
    "from": 118,
    "label": "hasArgument",
    "to": 6
  }, {
    "from": 119,
    "label": "hasArgument",
    "to": 27
  }, {
    "from": 120,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 121,
    "label": "hasArgument",
    "to": 40
  }, {
    "from": 122,
    "label": "hasArgument",
    "to": 47
  }, {
    "from": 123,
    "label": "hasArgument",
    "to": 51
  }, {
    "from": 124,
    "label": "hasArgument",
    "to": 58
  }, {
    "from": 125,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 126,
    "label": "hasArgument",
    "to": 71
  }, {
    "from": 127,
    "label": "hasArgument",
    "to": 78
  }, {
    "from": 128,
    "label": "hasArgument",
    "to": 85
  }, {
    "from": 129,
    "label": "hasArgument",
    "to": 88
  }, {
    "from": 130,
    "label": "hasArgument",
    "to": 96
  }, {
    "from": 131,
    "label": "hasArgument",
    "to": 7
  }, {
    "from": 131,
    "label": "hasArgument",
    "to": 104
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "formatters_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function returnnils()\r\n  -- force the return of nils in an argument array\r\n  local a,b\r\n  return a, b, \"this is not nil\"\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local a,b",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 7,
    "text": "function(value)\r\n      if type(value) == \"string\" then\r\n        return expected\r\n      end\r\n    end",
    "type": "function"
  }, {
    "id": 8,
    "text": "if type(value) == \"string\" then\r\n        return expected\r\n      end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function()\r\n  end",
    "type": "function"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function()\r\n    snapshot = assert:snapshot()\r\n  end",
    "type": "function"
  }, {
    "id": 13,
    "text": "snapshot = assert:snapshot()",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function()\r\n    snapshot:revert()\r\n  end",
    "type": "function"
  }, {
    "id": 16,
    "text": "snapshot:revert()",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function()\r\n    assert.is.same(assert:format({ \"a string\", [\"n\"] = 1 })[1], \"(string) 'a string'\")\r\n    assert.is.same(assert:format({ true, [\"n\"] = 1 })[1], \"(boolean) true\")\r\n    assert.is.same(assert:format({ 1234, [\"n\"] = 1 })[1], \"(number) 1234\")\r\n    assert.is.same(assert:format({ returnnils(), [\"n\"] = 3 })[1], \"(nil)\")\r\n    local f = function() end\r\n    local expected = tostring(f)\r\n    assert.is.same(assert:format({ f, [\"n\"] = 1 })[1]:sub(1, #expected), expected)\r\n  end",
    "type": "function"
  }, {
    "id": 19,
    "text": "assert.is.same(assert:format({ \"a string\", [\"n\"] = 1 })[1], \"(string) 'a string'\")",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "assert.is.same(assert:format({ true, [\"n\"] = 1 })[1], \"(boolean) true\")",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "assert.is.same(assert:format({ 1234, [\"n\"] = 1 })[1], \"(number) 1234\")",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "assert.is.same(assert:format({ returnnils(), [\"n\"] = 3 })[1], \"(nil)\")",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "local f = function() end",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "local expected = tostring(f)",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "assert.is.same(assert:format({ f, [\"n\"] = 1 })[1]:sub(1, #expected), expected)",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function()\r\n    assert.is.same(assert:format({ 1.0, [\"n\"] = 1 })[1], \"(number) \"..tostring(1.0))\r\n    assert.is.same(assert:format({ 23456789012E66, [\"n\"] = 1 })[1], \"(number) 2.3456789012000000698e+76\")\r\n    assert.is.same(assert:format({ 0/0, [\"n\"] = 1 })[1], \"(number) NaN\")\r\n    assert.is.same(assert:format({ 1/0, [\"n\"] = 1 })[1], \"(number) Inf\")\r\n    assert.is.same(assert:format({ -1/0, [\"n\"] = 1 })[1], \"(number) -Inf\")\r\n  end",
    "type": "function"
  }, {
    "id": 28,
    "text": "assert.is.same(assert:format({ 1.0, [\"n\"] = 1 })[1], \"(number) \"..tostring(1.0))",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "assert.is.same(assert:format({ 23456789012E66, [\"n\"] = 1 })[1], \"(number) 2.3456789012000000698e+76\")",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "assert.is.same(assert:format({ 0/0, [\"n\"] = 1 })[1], \"(number) NaN\")",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "assert.is.same(assert:format({ 1/0, [\"n\"] = 1 })[1], \"(number) Inf\")",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "assert.is.same(assert:format({ -1/0, [\"n\"] = 1 })[1], \"(number) -Inf\")",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function()\r\n    assert.is.same(assert:format({ {}, [\"n\"] = 1 })[1], \"(table) { }\")\r\n    assert.is.same(assert:format({ { 2, 3, 4, [-5] = 7}, [\"n\"] = 1 })[1], [[(table) {\r\n  [1] = 2\r\n  [2] = 3\r\n  [3] = 4\r\n  [-5] = 7 }]])\r\n    assert.is.same(assert:format({ { 1, [\"k1\"] = \"v1\", [\"k2\"] = \"v2\"}, [\"n\"] = 1 })[1], [[(table) {\r\n  [1] = 1\r\n  [k1] = 'v1'\r\n  [k2] = 'v2' }]])\r\n    assert.is.same(assert:format({ { \"{\\n }\\n\" }, [\"n\"] = 1 })[1], [[(table) {\r\n  [1] = '{\r\n }\r\n' }]])\r\n  end",
    "type": "function"
  }, {
    "id": 35,
    "text": "assert.is.same(assert:format({ {}, [\"n\"] = 1 })[1], \"(table) { }\")",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "assert.is.same(assert:format({ { 2, 3, 4, [-5] = 7}, [\"n\"] = 1 })[1], [[(table) {\r\n  [1] = 2\r\n  [2] = 3\r\n  [3] = 4\r\n  [-5] = 7 }]])",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "assert.is.same(assert:format({ { 1, [\"k1\"] = \"v1\", [\"k2\"] = \"v2\"}, [\"n\"] = 1 })[1], [[(table) {\r\n  [1] = 1\r\n  [k1] = 'v1'\r\n  [k2] = 'v2' }]])",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "assert.is.same(assert:format({ { \"{\\n }\\n\" }, [\"n\"] = 1 })[1], [[(table) {\r\n  [1] = '{\r\n }\r\n' }]])",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function()\r\n    assert.is.same(assert:format({ { { { { 1 } } } }, [\"n\"] = 1 })[1], [[(table) {\r\n  [1] = {\r\n    [1] = {\r\n      [1] = { ... more } } } }]])\r\n    assert.is.same(assert:format({ { { { } } }, [\"n\"] = 1 })[1], [[(table) {\r\n  [1] = {\r\n    [1] = { } } }]])\r\n    assert:set_parameter(\"TableFormatLevel\", 0)\r\n    assert.is.same(assert:format({ { }, [\"n\"] = 1 })[1], \"(table) { }\")\r\n    assert.is.same(assert:format({ { 1 }, [\"n\"] = 1 })[1], \"(table) { ... more }\")\r\n  end",
    "type": "function"
  }, {
    "id": 41,
    "text": "assert.is.same(assert:format({ { { { { 1 } } } }, [\"n\"] = 1 })[1], [[(table) {\r\n  [1] = {\r\n    [1] = {\r\n      [1] = { ... more } } } }]])",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "assert.is.same(assert:format({ { { { } } }, [\"n\"] = 1 })[1], [[(table) {\r\n  [1] = {\r\n    [1] = { } } }]])",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "assert:set_parameter(\"TableFormatLevel\", 0)",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "assert.is.same(assert:format({ { }, [\"n\"] = 1 })[1], \"(table) { }\")",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "assert.is.same(assert:format({ { 1 }, [\"n\"] = 1 })[1], \"(table) { ... more }\")",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function()\r\n    assert:set_parameter(\"TableFormatLevel\", -1)\r\n    assert.is.same(assert:format({ { { { { 1 } } } }, [\"n\"] = 1 })[1], [[(table) {\r\n  [1] = {\r\n    [1] = {\r\n      [1] = {\r\n        [1] = 1 } } } }]])\r\n  end",
    "type": "function"
  }, {
    "id": 48,
    "text": "assert:set_parameter(\"TableFormatLevel\", -1)",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "assert.is.same(assert:format({ { { { { 1 } } } }, [\"n\"] = 1 })[1], [[(table) {\r\n  [1] = {\r\n    [1] = {\r\n      [1] = {\r\n        [1] = 1 } } } }]])",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "function()\r\n    local t = {{1,2},{3,4}}\r\n    local fmtargs = { {crumbs = {1,2}} }\r\n    local formatted = assert:format({t, n = 1, fmtargs = fmtargs})[1]\r\n    local expected = \"(table) {\\n  [1] = {\\n    [1] = 1\\n    [2] = 2 }\\n *[2] = {\\n   *[1] = 3\\n    [2] = 4 } }\"\r\n    assert.is.equal(expected, formatted)\r\n  end",
    "type": "function"
  }, {
    "id": 52,
    "text": "local t = {{1,2},{3,4}}",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "local fmtargs = { {crumbs = {1,2}} }",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "local formatted = assert:format({t, n = 1, fmtargs = fmtargs})[1]",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "local expected = \"(table) {\\n  [1] = {\\n    [1] = 1\\n    [2] = 2 }\\n *[2] = {\\n   *[1] = 3\\n    [2] = 4 } }\"",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "assert.is.equal(expected, formatted)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function()\r\n    assert:set_parameter(\"TableErrorHighlightCharacter\", \"**\")\r\n    local t = {1,2,3}\r\n    local fmtargs = { {crumbs = {2}} }\r\n    local formatted = assert:format({t, n = 1, fmtargs = fmtargs})[1]\r\n    local expected = \"(table) {\\n  [1] = 1\\n**[2] = 2\\n  [3] = 3 }\"\r\n    assert.is.equal(expected, formatted)\r\n  end",
    "type": "function"
  }, {
    "id": 59,
    "text": "assert:set_parameter(\"TableErrorHighlightCharacter\", \"**\")",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "local t = {1,2,3}",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "local fmtargs = { {crumbs = {2}} }",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "local expected = \"(table) {\\n  [1] = 1\\n**[2] = 2\\n  [3] = 3 }\"",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "function()\r\n    local ok, colors = pcall(require, \"term.colors\")\r\n    if not ok then pending(\"lua term.colors not available\") end\r\n\r\n    assert:set_parameter(\"TableErrorHighlightColor\", \"red\")\r\n    local t = {1,2,3}\r\n    local fmtargs = { {crumbs = {2}} }\r\n    local formatted = assert:format({t, n = 1, fmtargs = fmtargs})[1]\r\n    local expected = string.format(\"(table) {\\n  [1] = 1\\n %s[2] = 2\\n  [3] = 3 }\", colors.red(\"*\"))\r\n    assert.is.equal(expected, formatted)\r\n  end",
    "type": "function"
  }, {
    "id": 65,
    "text": "local ok, colors = pcall(require, \"term.colors\")",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "if not ok then pending(\"lua term.colors not available\") end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "pending(\"lua term.colors not available\")",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "assert:set_parameter(\"TableErrorHighlightColor\", \"red\")",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "local expected = string.format(\"(table) {\\n  [1] = 1\\n %s[2] = 2\\n  [3] = 3 }\", colors.red(\"*\"))",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "function()\r\n    local t = {1,2}\r\n    t[3] = t\r\n    assert:set_parameter(\"TableFormatShowRecursion\", true)\r\n    local formatted = assert:format({t, n = 1})[1]\r\n    local expected = \"(table) {\\n  [1] = 1\\n  [2] = 2\\n  [3] = { ... recursive } }\"\r\n    assert.is.equal(expected, formatted)\r\n  end",
    "type": "function"
  }, {
    "id": 72,
    "text": "local t = {1,2}",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "t[3] = t",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "assert:set_parameter(\"TableFormatShowRecursion\", true)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "local formatted = assert:format({t, n = 1})[1]",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "local expected = \"(table) {\\n  [1] = 1\\n  [2] = 2\\n  [3] = { ... recursive } }\"",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "function()\r\n    local t = { [\"n\"] = 0 }\r\n    local formatted = assert:format(t)\r\n    assert.equals(type(formatted), \"table\")\r\n    formatted.n = nil\r\n    assert.equals(next(formatted), nil)\r\n  end",
    "type": "function"
  }, {
    "id": 79,
    "text": "local t = { [\"n\"] = 0 }",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "local formatted = assert:format(t)",
    "type": "statement:localassign"
  }, {
    "id": 81,
    "text": "assert.equals(type(formatted), \"table\")",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "formatted.n = nil",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "assert.equals(next(formatted), nil)",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "function()\r\n    local t = {}\r\n    local formatted = assert:format(t)\r\n    assert.equals(type(formatted), \"table\")\r\n    assert.equals(next(formatted), nil)\r\n  end",
    "type": "function"
  }, {
    "id": 86,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "function()\r\n    local t = { returnnils(), [\"n\"] = 3 }\r\n    formatted = assert:format(t)\r\n    assert.is.same(type(formatted[1]), \"string\")\r\n    assert.is.same(type(formatted[2]), \"string\")\r\n    assert.is.same(type(formatted[3]), \"string\")\r\n    assert.is.same(type(formatted[4]), \"nil\")\r\n  end",
    "type": "function"
  }, {
    "id": 89,
    "text": "local t = { returnnils(), [\"n\"] = 3 }",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "formatted = assert:format(t)",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "assert.is.same(type(formatted[1]), \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "assert.is.same(type(formatted[2]), \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "assert.is.same(type(formatted[3]), \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "assert.is.same(type(formatted[4]), \"nil\")",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "function()\r\n    local arg1 = \"argument1\"\r\n    local arg2 = \"argument2\"\r\n    local arguments = { arg1, arg2 , [\"n\"] = 2}\r\n    arguments.nofmt = { true } -- first arg not to be formatted\r\n    arguments = assert:format(arguments)\r\n    assert.is.same(arg1, arguments[1])\r\n  end",
    "type": "function"
  }, {
    "id": 97,
    "text": "local arg1 = \"argument1\"",
    "type": "statement:localassign"
  }, {
    "id": 98,
    "text": "local arg2 = \"argument2\"",
    "type": "statement:localassign"
  }, {
    "id": 99,
    "text": "local arguments = { arg1, arg2 , [\"n\"] = 2}",
    "type": "statement:localassign"
  }, {
    "id": 100,
    "text": "arguments.nofmt = { true }",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "arguments = assert:format(arguments)",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "assert.is.same(arg1, arguments[1])",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 104,
    "text": "function()\r\n    local expected = \"formatted result\"\r\n    local f = function(value)\r\n      if type(value) == \"string\" then\r\n        return expected\r\n      end\r\n    end\r\n    local s = spy.new(f)\r\n    \r\n    assert:add_formatter(s)\r\n    assert.are_equal(expected, assert:format({\"some string\"})[1])\r\n    assert.spy(s).was.called(1)\r\n    assert:remove_formatter(s)\r\n  end",
    "type": "function"
  }, {
    "id": 105,
    "text": "local expected = \"formatted result\"",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "local f = function(value)\r\n      if type(value) == \"string\" then\r\n        return expected\r\n      end\r\n    end",
    "type": "statement:localassign"
  }, {
    "id": 107,
    "text": "local s = spy.new(f)",
    "type": "statement:localassign"
  }, {
    "id": 108,
    "text": "assert:add_formatter(s)",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "assert.are_equal(expected, assert:format({\"some string\"})[1])",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "assert.spy(s).was.called(1)",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "assert:remove_formatter(s)",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 113,
    "text": "function()\r\n  setup(function()\r\n  end)\r\n\r\n  local snapshot\r\n\r\n  before_each(function()\r\n    snapshot = assert:snapshot()\r\n  end)\r\n\r\n  after_each(function()\r\n    snapshot:revert()\r\n  end)\r\n  \r\n  it(\"Checks to see if types are returned as strings\", function()\r\n    assert.is.same(assert:format({ \"a string\", [\"n\"] = 1 })[1], \"(string) 'a string'\")\r\n    assert.is.same(assert:format({ true, [\"n\"] = 1 })[1], \"(boolean) true\")\r\n    assert.is.same(assert:format({ 1234, [\"n\"] = 1 })[1], \"(number) 1234\")\r\n    assert.is.same(assert:format({ returnnils(), [\"n\"] = 3 })[1], \"(nil)\")\r\n    local f = function() end\r\n    local expected = tostring(f)\r\n    assert.is.same(assert:format({ f, [\"n\"] = 1 })[1]:sub(1, #expected), expected)\r\n  end)\r\n\r\n  it(\"Checks to see if numbers are serialized correctly\", function()\r\n    assert.is.same(assert:format({ 1.0, [\"n\"] = 1 })[1], \"(number) \"..tostring(1.0))\r\n    assert.is.same(assert:format({ 23456789012E66, [\"n\"] = 1 })[1], \"(number) 2.3456789012000000698e+76\")\r\n    assert.is.same(assert:format({ 0/0, [\"n\"] = 1 })[1], \"(number) NaN\")\r\n    assert.is.same(assert:format({ 1/0, [\"n\"] = 1 })[1], \"(number) Inf\")\r\n    assert.is.same(assert:format({ -1/0, [\"n\"] = 1 })[1], \"(number) -Inf\")\r\n  end)\r\n\r\n  it(\"Checks to see if tables are recursively serialized\", function()\r\n    assert.is.same(assert:format({ {}, [\"n\"] = 1 })[1], \"(table) { }\")\r\n    assert.is.same(assert:format({ { 2, 3, 4, [-5] = 7}, [\"n\"] = 1 })[1], [[(table) {\r\n  [1] = 2\r\n  [2] = 3\r\n  [3] = 4\r\n  [-5] = 7 }]])\r\n    assert.is.same(assert:format({ { 1, [\"k1\"] = \"v1\", [\"k2\"] = \"v2\"}, [\"n\"] = 1 })[1], [[(table) {\r\n  [1] = 1\r\n  [k1] = 'v1'\r\n  [k2] = 'v2' }]])\r\n    assert.is.same(assert:format({ { \"{\\n }\\n\" }, [\"n\"] = 1 })[1], [[(table) {\r\n  [1] = '{\r\n }\r\n' }]])\r\n  end)\r\n\r\n  it(\"Checks to see if TableFormatLevel parameter limits table formatting depth\", function()\r\n    assert.is.same(assert:format({ { { { { 1 } } } }, [\"n\"] = 1 })[1], [[(table) {\r\n  [1] = {\r\n    [1] = {\r\n      [1] = { ... more } } } }]])\r\n    assert.is.same(assert:format({ { { { } } }, [\"n\"] = 1 })[1], [[(table) {\r\n  [1] = {\r\n    [1] = { } } }]])\r\n    assert:set_parameter(\"TableFormatLevel\", 0)\r\n    assert.is.same(assert:format({ { }, [\"n\"] = 1 })[1], \"(table) { }\")\r\n    assert.is.same(assert:format({ { 1 }, [\"n\"] = 1 })[1], \"(table) { ... more }\")\r\n  end)\r\n\r\n  it(\"Checks to see if TableFormatLevel parameter can display all levels\", function()\r\n    assert:set_parameter(\"TableFormatLevel\", -1)\r\n    assert.is.same(assert:format({ { { { { 1 } } } }, [\"n\"] = 1 })[1], [[(table) {\r\n  [1] = {\r\n    [1] = {\r\n      [1] = {\r\n        [1] = 1 } } } }]])\r\n  end)\r\n\r\n\r\n  it(\"Checks to see if error character is applied only to key chain marked with crumbs\", function()\r\n    local t = {{1,2},{3,4}}\r\n    local fmtargs = { {crumbs = {1,2}} }\r\n    local formatted = assert:format({t, n = 1, fmtargs = fmtargs})[1]\r\n    local expected = \"(table) {\\n  [1] = {\\n    [1] = 1\\n    [2] = 2 }\\n *[2] = {\\n   *[1] = 3\\n    [2] = 4 } }\"\r\n    assert.is.equal(expected, formatted)\r\n  end)\r\n\r\n  it(\"Checks to see if TableErrorHighlightCharacter changes error character\", function()\r\n    assert:set_parameter(\"TableErrorHighlightCharacter\", \"**\")\r\n    local t = {1,2,3}\r\n    local fmtargs = { {crumbs = {2}} }\r\n    local formatted = assert:format({t, n = 1, fmtargs = fmtargs})[1]\r\n    local expected = \"(table) {\\n  [1] = 1\\n**[2] = 2\\n  [3] = 3 }\"\r\n    assert.is.equal(expected, formatted)\r\n  end)\r\n\r\n  it(\"Checks to see if TableErrorHighlightColor changes error color\", function()\r\n    local ok, colors = pcall(require, \"term.colors\")\r\n    if not ok then pending(\"lua term.colors not available\") end\r\n\r\n    assert:set_parameter(\"TableErrorHighlightColor\", \"red\")\r\n    local t = {1,2,3}\r\n    local fmtargs = { {crumbs = {2}} }\r\n    local formatted = assert:format({t, n = 1, fmtargs = fmtargs})[1]\r\n    local expected = string.format(\"(table) {\\n  [1] = 1\\n %s[2] = 2\\n  [3] = 3 }\", colors.red(\"*\"))\r\n    assert.is.equal(expected, formatted)\r\n  end)\r\n\r\n  it(\"Checks to see if self referencing tables can be formatted\", function()\r\n    local t = {1,2}\r\n    t[3] = t\r\n    assert:set_parameter(\"TableFormatShowRecursion\", true)\r\n    local formatted = assert:format({t, n = 1})[1]\r\n    local expected = \"(table) {\\n  [1] = 1\\n  [2] = 2\\n  [3] = { ... recursive } }\"\r\n    assert.is.equal(expected, formatted)\r\n  end)\r\n\r\n  it(\"Checks to see if table with 0 count is returned empty/0-count\", function()\r\n    local t = { [\"n\"] = 0 }\r\n    local formatted = assert:format(t)\r\n    assert.equals(type(formatted), \"table\")\r\n    formatted.n = nil\r\n    assert.equals(next(formatted), nil)\r\n  end)\r\n\r\n  it(\"Checks to see if empty table is returned empty\", function()\r\n    local t = {}\r\n    local formatted = assert:format(t)\r\n    assert.equals(type(formatted), \"table\")\r\n    assert.equals(next(formatted), nil)\r\n  end)\r\n\r\n  it(\"Checks to see if table containing nils is returned with same number of entries #test\", function()\r\n    local t = { returnnils(), [\"n\"] = 3 }\r\n    formatted = assert:format(t)\r\n    assert.is.same(type(formatted[1]), \"string\")\r\n    assert.is.same(type(formatted[2]), \"string\")\r\n    assert.is.same(type(formatted[3]), \"string\")\r\n    assert.is.same(type(formatted[4]), \"nil\")\r\n  end)\r\n  \r\n  it(\"checks arguments not being formatted if set to do so\", function()\r\n    local arg1 = \"argument1\"\r\n    local arg2 = \"argument2\"\r\n    local arguments = { arg1, arg2 , [\"n\"] = 2}\r\n    arguments.nofmt = { true } -- first arg not to be formatted\r\n    arguments = assert:format(arguments)\r\n    assert.is.same(arg1, arguments[1])\r\n  end)\r\n  \r\n  it(\"checks extra formatters inserted to be called first\", function()\r\n    local expected = \"formatted result\"\r\n    local f = function(value)\r\n      if type(value) == \"string\" then\r\n        return expected\r\n      end\r\n    end\r\n    local s = spy.new(f)\r\n    \r\n    assert:add_formatter(s)\r\n    assert.are_equal(expected, assert:format({\"some string\"})[1])\r\n    assert.spy(s).was.called(1)\r\n    assert:remove_formatter(s)\r\n  end)\r\n  \r\nend",
    "type": "function"
  }, {
    "id": 114,
    "text": "setup(function()\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "local snapshot",
    "type": "statement:localassign"
  }, {
    "id": 116,
    "text": "before_each(function()\r\n    snapshot = assert:snapshot()\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "after_each(function()\r\n    snapshot:revert()\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "it(\"Checks to see if types are returned as strings\", function()\r\n    assert.is.same(assert:format({ \"a string\", [\"n\"] = 1 })[1], \"(string) 'a string'\")\r\n    assert.is.same(assert:format({ true, [\"n\"] = 1 })[1], \"(boolean) true\")\r\n    assert.is.same(assert:format({ 1234, [\"n\"] = 1 })[1], \"(number) 1234\")\r\n    assert.is.same(assert:format({ returnnils(), [\"n\"] = 3 })[1], \"(nil)\")\r\n    local f = function() end\r\n    local expected = tostring(f)\r\n    assert.is.same(assert:format({ f, [\"n\"] = 1 })[1]:sub(1, #expected), expected)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "it(\"Checks to see if numbers are serialized correctly\", function()\r\n    assert.is.same(assert:format({ 1.0, [\"n\"] = 1 })[1], \"(number) \"..tostring(1.0))\r\n    assert.is.same(assert:format({ 23456789012E66, [\"n\"] = 1 })[1], \"(number) 2.3456789012000000698e+76\")\r\n    assert.is.same(assert:format({ 0/0, [\"n\"] = 1 })[1], \"(number) NaN\")\r\n    assert.is.same(assert:format({ 1/0, [\"n\"] = 1 })[1], \"(number) Inf\")\r\n    assert.is.same(assert:format({ -1/0, [\"n\"] = 1 })[1], \"(number) -Inf\")\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "it(\"Checks to see if tables are recursively serialized\", function()\r\n    assert.is.same(assert:format({ {}, [\"n\"] = 1 })[1], \"(table) { }\")\r\n    assert.is.same(assert:format({ { 2, 3, 4, [-5] = 7}, [\"n\"] = 1 })[1], [[(table) {\r\n  [1] = 2\r\n  [2] = 3\r\n  [3] = 4\r\n  [-5] = 7 }]])\r\n    assert.is.same(assert:format({ { 1, [\"k1\"] = \"v1\", [\"k2\"] = \"v2\"}, [\"n\"] = 1 })[1], [[(table) {\r\n  [1] = 1\r\n  [k1] = 'v1'\r\n  [k2] = 'v2' }]])\r\n    assert.is.same(assert:format({ { \"{\\n }\\n\" }, [\"n\"] = 1 })[1], [[(table) {\r\n  [1] = '{\r\n }\r\n' }]])\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "it(\"Checks to see if TableFormatLevel parameter limits table formatting depth\", function()\r\n    assert.is.same(assert:format({ { { { { 1 } } } }, [\"n\"] = 1 })[1], [[(table) {\r\n  [1] = {\r\n    [1] = {\r\n      [1] = { ... more } } } }]])\r\n    assert.is.same(assert:format({ { { { } } }, [\"n\"] = 1 })[1], [[(table) {\r\n  [1] = {\r\n    [1] = { } } }]])\r\n    assert:set_parameter(\"TableFormatLevel\", 0)\r\n    assert.is.same(assert:format({ { }, [\"n\"] = 1 })[1], \"(table) { }\")\r\n    assert.is.same(assert:format({ { 1 }, [\"n\"] = 1 })[1], \"(table) { ... more }\")\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "it(\"Checks to see if TableFormatLevel parameter can display all levels\", function()\r\n    assert:set_parameter(\"TableFormatLevel\", -1)\r\n    assert.is.same(assert:format({ { { { { 1 } } } }, [\"n\"] = 1 })[1], [[(table) {\r\n  [1] = {\r\n    [1] = {\r\n      [1] = {\r\n        [1] = 1 } } } }]])\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "it(\"Checks to see if error character is applied only to key chain marked with crumbs\", function()\r\n    local t = {{1,2},{3,4}}\r\n    local fmtargs = { {crumbs = {1,2}} }\r\n    local formatted = assert:format({t, n = 1, fmtargs = fmtargs})[1]\r\n    local expected = \"(table) {\\n  [1] = {\\n    [1] = 1\\n    [2] = 2 }\\n *[2] = {\\n   *[1] = 3\\n    [2] = 4 } }\"\r\n    assert.is.equal(expected, formatted)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "it(\"Checks to see if TableErrorHighlightCharacter changes error character\", function()\r\n    assert:set_parameter(\"TableErrorHighlightCharacter\", \"**\")\r\n    local t = {1,2,3}\r\n    local fmtargs = { {crumbs = {2}} }\r\n    local formatted = assert:format({t, n = 1, fmtargs = fmtargs})[1]\r\n    local expected = \"(table) {\\n  [1] = 1\\n**[2] = 2\\n  [3] = 3 }\"\r\n    assert.is.equal(expected, formatted)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "it(\"Checks to see if TableErrorHighlightColor changes error color\", function()\r\n    local ok, colors = pcall(require, \"term.colors\")\r\n    if not ok then pending(\"lua term.colors not available\") end\r\n\r\n    assert:set_parameter(\"TableErrorHighlightColor\", \"red\")\r\n    local t = {1,2,3}\r\n    local fmtargs = { {crumbs = {2}} }\r\n    local formatted = assert:format({t, n = 1, fmtargs = fmtargs})[1]\r\n    local expected = string.format(\"(table) {\\n  [1] = 1\\n %s[2] = 2\\n  [3] = 3 }\", colors.red(\"*\"))\r\n    assert.is.equal(expected, formatted)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "it(\"Checks to see if self referencing tables can be formatted\", function()\r\n    local t = {1,2}\r\n    t[3] = t\r\n    assert:set_parameter(\"TableFormatShowRecursion\", true)\r\n    local formatted = assert:format({t, n = 1})[1]\r\n    local expected = \"(table) {\\n  [1] = 1\\n  [2] = 2\\n  [3] = { ... recursive } }\"\r\n    assert.is.equal(expected, formatted)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "it(\"Checks to see if table with 0 count is returned empty/0-count\", function()\r\n    local t = { [\"n\"] = 0 }\r\n    local formatted = assert:format(t)\r\n    assert.equals(type(formatted), \"table\")\r\n    formatted.n = nil\r\n    assert.equals(next(formatted), nil)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "it(\"Checks to see if empty table is returned empty\", function()\r\n    local t = {}\r\n    local formatted = assert:format(t)\r\n    assert.equals(type(formatted), \"table\")\r\n    assert.equals(next(formatted), nil)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "it(\"Checks to see if table containing nils is returned with same number of entries #test\", function()\r\n    local t = { returnnils(), [\"n\"] = 3 }\r\n    formatted = assert:format(t)\r\n    assert.is.same(type(formatted[1]), \"string\")\r\n    assert.is.same(type(formatted[2]), \"string\")\r\n    assert.is.same(type(formatted[3]), \"string\")\r\n    assert.is.same(type(formatted[4]), \"nil\")\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "it(\"checks arguments not being formatted if set to do so\", function()\r\n    local arg1 = \"argument1\"\r\n    local arg2 = \"argument2\"\r\n    local arguments = { arg1, arg2 , [\"n\"] = 2}\r\n    arguments.nofmt = { true } -- first arg not to be formatted\r\n    arguments = assert:format(arguments)\r\n    assert.is.same(arg1, arguments[1])\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "it(\"checks extra formatters inserted to be called first\", function()\r\n    local expected = \"formatted result\"\r\n    local f = function(value)\r\n      if type(value) == \"string\" then\r\n        return expected\r\n      end\r\n    end\r\n    local s = spy.new(f)\r\n    \r\n    assert:add_formatter(s)\r\n    assert.are_equal(expected, assert:format({\"some string\"})[1])\r\n    assert.spy(s).was.called(1)\r\n    assert:remove_formatter(s)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 133,
    "text": "",
    "type": "function container"
  }, {
    "id": 134,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 135,
    "text": "setup",
    "type": "global function"
  }, {
    "id": 136,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 137,
    "text": "red",
    "type": "global function"
  }, {
    "id": 138,
    "text": "it",
    "type": "global function"
  }, {
    "id": 139,
    "text": "before_each",
    "type": "global function"
  }, {
    "id": 140,
    "text": "assert.is.same",
    "type": "global function"
  }, {
    "id": 141,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 142,
    "text": "new",
    "type": "global function"
  }, {
    "id": 143,
    "text": "next",
    "type": "global function"
  }, {
    "id": 144,
    "text": "pending",
    "type": "global function"
  }, {
    "id": 145,
    "text": "format",
    "type": "global function"
  }, {
    "id": 146,
    "text": "are_equal",
    "type": "global function"
  }, {
    "id": 147,
    "text": "equals",
    "type": "global function"
  }, {
    "id": 148,
    "text": "spy",
    "type": "global function"
  }, {
    "id": 149,
    "text": "type",
    "type": "global function"
  }, {
    "id": 150,
    "text": "assert.is.equal",
    "type": "global function"
  }, {
    "id": 151,
    "text": "after_each",
    "type": "global function"
  }, {
    "id": 152,
    "text": "",
    "type": "variable container"
  }, {
    "id": 153,
    "text": "",
    "type": "require container"
  } ]
}