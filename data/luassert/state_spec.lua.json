{
  "_filename": "state_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/luassert/spec/state_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 4
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 12,
    "label": "has",
    "to": 17
  }, {
    "from": 12,
    "label": "has",
    "to": 18
  }, {
    "from": 12,
    "label": "has",
    "to": 19
  }, {
    "from": 12,
    "label": "has",
    "to": 20
  }, {
    "from": 12,
    "label": "has",
    "to": 21
  }, {
    "from": 12,
    "label": "has",
    "to": 22
  }, {
    "from": 12,
    "label": "has",
    "to": 23
  }, {
    "from": 12,
    "label": "has",
    "to": 24
  }, {
    "from": 12,
    "label": "has",
    "to": 25
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 12,
    "label": "has",
    "to": 17
  }, {
    "from": 12,
    "label": "has",
    "to": 18
  }, {
    "from": 12,
    "label": "has",
    "to": 19
  }, {
    "from": 12,
    "label": "has",
    "to": 26
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 15
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 3
  }, {
    "from": 29,
    "label": "has",
    "to": 4
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 7
  }, {
    "from": 31,
    "label": "has",
    "to": 4
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 28,
    "label": "has",
    "to": 33
  }, {
    "from": 28,
    "label": "has",
    "to": 34
  }, {
    "from": 28,
    "label": "has",
    "to": 35
  }, {
    "from": 28,
    "label": "has",
    "to": 36
  }, {
    "from": 28,
    "label": "has",
    "to": 37
  }, {
    "from": 28,
    "label": "has",
    "to": 20
  }, {
    "from": 28,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 10
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 28,
    "label": "has",
    "to": 39
  }, {
    "from": 28,
    "label": "has",
    "to": 40
  }, {
    "from": 28,
    "label": "has",
    "to": 41
  }, {
    "from": 28,
    "label": "has",
    "to": 42
  }, {
    "from": 28,
    "label": "has",
    "to": 36
  }, {
    "from": 28,
    "label": "has",
    "to": 43
  }, {
    "from": 28,
    "label": "has",
    "to": 25
  }, {
    "from": 28,
    "label": "has",
    "to": 19
  }, {
    "from": 28,
    "label": "has",
    "to": 44
  }, {
    "from": 28,
    "label": "has",
    "to": 37
  }, {
    "from": 28,
    "label": "has",
    "to": 36
  }, {
    "from": 28,
    "label": "has",
    "to": 43
  }, {
    "from": 28,
    "label": "has",
    "to": 26
  }, {
    "from": 28,
    "label": "has",
    "to": 45
  }, {
    "from": 28,
    "label": "has",
    "to": 46
  }, {
    "from": 28,
    "label": "has",
    "to": 43
  }, {
    "from": 28,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 15
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 48,
    "label": "has",
    "to": 53
  }, {
    "from": 48,
    "label": "has",
    "to": 54
  }, {
    "from": 48,
    "label": "has",
    "to": 20
  }, {
    "from": 48,
    "label": "has",
    "to": 53
  }, {
    "from": 48,
    "label": "has",
    "to": 54
  }, {
    "from": 48,
    "label": "has",
    "to": 55
  }, {
    "from": 48,
    "label": "has",
    "to": 56
  }, {
    "from": 48,
    "label": "has",
    "to": 57
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 25
  }, {
    "from": 48,
    "label": "has",
    "to": 53
  }, {
    "from": 48,
    "label": "has",
    "to": 54
  }, {
    "from": 48,
    "label": "has",
    "to": 26
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 60
  }, {
    "from": 65,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 66
  }, {
    "from": 63,
    "label": "has",
    "to": 67
  }, {
    "from": 63,
    "label": "has",
    "to": 15
  }, {
    "from": 63,
    "label": "has",
    "to": 68
  }, {
    "from": 63,
    "label": "has",
    "to": 69
  }, {
    "from": 63,
    "label": "has",
    "to": 70
  }, {
    "from": 63,
    "label": "has",
    "to": 71
  }, {
    "from": 63,
    "label": "has",
    "to": 72
  }, {
    "from": 63,
    "label": "has",
    "to": 73
  }, {
    "from": 63,
    "label": "has",
    "to": 74
  }, {
    "from": 63,
    "label": "has",
    "to": 75
  }, {
    "from": 63,
    "label": "has",
    "to": 26
  }, {
    "from": 63,
    "label": "has",
    "to": 70
  }, {
    "from": 63,
    "label": "has",
    "to": 71
  }, {
    "from": 63,
    "label": "has",
    "to": 76
  }, {
    "from": 63,
    "label": "has",
    "to": 77
  }, {
    "from": 63,
    "label": "has",
    "to": 78
  }, {
    "from": 63,
    "label": "has",
    "to": 79
  }, {
    "from": 63,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 13
  }, {
    "from": 82,
    "label": "has",
    "to": 14
  }, {
    "from": 82,
    "label": "has",
    "to": 15
  }, {
    "from": 82,
    "label": "has",
    "to": 16
  }, {
    "from": 82,
    "label": "has",
    "to": 17
  }, {
    "from": 82,
    "label": "has",
    "to": 18
  }, {
    "from": 82,
    "label": "has",
    "to": 19
  }, {
    "from": 82,
    "label": "has",
    "to": 20
  }, {
    "from": 82,
    "label": "has",
    "to": 21
  }, {
    "from": 82,
    "label": "has",
    "to": 22
  }, {
    "from": 82,
    "label": "has",
    "to": 23
  }, {
    "from": 82,
    "label": "has",
    "to": 24
  }, {
    "from": 82,
    "label": "has",
    "to": 25
  }, {
    "from": 82,
    "label": "has",
    "to": 16
  }, {
    "from": 82,
    "label": "has",
    "to": 17
  }, {
    "from": 82,
    "label": "has",
    "to": 18
  }, {
    "from": 82,
    "label": "has",
    "to": 19
  }, {
    "from": 82,
    "label": "has",
    "to": 26
  }, {
    "from": 82,
    "label": "has",
    "to": 14
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 15
  }, {
    "from": 83,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 3
  }, {
    "from": 29,
    "label": "has",
    "to": 4
  }, {
    "from": 83,
    "label": "has",
    "to": 30
  }, {
    "from": 83,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 7
  }, {
    "from": 31,
    "label": "has",
    "to": 4
  }, {
    "from": 83,
    "label": "has",
    "to": 32
  }, {
    "from": 83,
    "label": "has",
    "to": 33
  }, {
    "from": 83,
    "label": "has",
    "to": 34
  }, {
    "from": 83,
    "label": "has",
    "to": 35
  }, {
    "from": 83,
    "label": "has",
    "to": 36
  }, {
    "from": 83,
    "label": "has",
    "to": 37
  }, {
    "from": 83,
    "label": "has",
    "to": 20
  }, {
    "from": 83,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 10
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 83,
    "label": "has",
    "to": 39
  }, {
    "from": 83,
    "label": "has",
    "to": 40
  }, {
    "from": 83,
    "label": "has",
    "to": 41
  }, {
    "from": 83,
    "label": "has",
    "to": 42
  }, {
    "from": 83,
    "label": "has",
    "to": 36
  }, {
    "from": 83,
    "label": "has",
    "to": 43
  }, {
    "from": 83,
    "label": "has",
    "to": 25
  }, {
    "from": 83,
    "label": "has",
    "to": 19
  }, {
    "from": 83,
    "label": "has",
    "to": 44
  }, {
    "from": 83,
    "label": "has",
    "to": 37
  }, {
    "from": 83,
    "label": "has",
    "to": 36
  }, {
    "from": 83,
    "label": "has",
    "to": 43
  }, {
    "from": 83,
    "label": "has",
    "to": 26
  }, {
    "from": 83,
    "label": "has",
    "to": 45
  }, {
    "from": 83,
    "label": "has",
    "to": 46
  }, {
    "from": 83,
    "label": "has",
    "to": 43
  }, {
    "from": 81,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 15
  }, {
    "from": 84,
    "label": "has",
    "to": 49
  }, {
    "from": 84,
    "label": "has",
    "to": 50
  }, {
    "from": 84,
    "label": "has",
    "to": 51
  }, {
    "from": 84,
    "label": "has",
    "to": 52
  }, {
    "from": 84,
    "label": "has",
    "to": 53
  }, {
    "from": 84,
    "label": "has",
    "to": 54
  }, {
    "from": 84,
    "label": "has",
    "to": 20
  }, {
    "from": 84,
    "label": "has",
    "to": 53
  }, {
    "from": 84,
    "label": "has",
    "to": 54
  }, {
    "from": 84,
    "label": "has",
    "to": 55
  }, {
    "from": 84,
    "label": "has",
    "to": 56
  }, {
    "from": 84,
    "label": "has",
    "to": 57
  }, {
    "from": 84,
    "label": "has",
    "to": 50
  }, {
    "from": 84,
    "label": "has",
    "to": 25
  }, {
    "from": 84,
    "label": "has",
    "to": 53
  }, {
    "from": 84,
    "label": "has",
    "to": 54
  }, {
    "from": 84,
    "label": "has",
    "to": 26
  }, {
    "from": 84,
    "label": "has",
    "to": 49
  }, {
    "from": 84,
    "label": "has",
    "to": 50
  }, {
    "from": 81,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 64
  }, {
    "from": 85,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 60
  }, {
    "from": 65,
    "label": "has",
    "to": 62
  }, {
    "from": 85,
    "label": "has",
    "to": 66
  }, {
    "from": 85,
    "label": "has",
    "to": 67
  }, {
    "from": 85,
    "label": "has",
    "to": 15
  }, {
    "from": 85,
    "label": "has",
    "to": 68
  }, {
    "from": 85,
    "label": "has",
    "to": 69
  }, {
    "from": 85,
    "label": "has",
    "to": 70
  }, {
    "from": 85,
    "label": "has",
    "to": 71
  }, {
    "from": 85,
    "label": "has",
    "to": 72
  }, {
    "from": 85,
    "label": "has",
    "to": 73
  }, {
    "from": 85,
    "label": "has",
    "to": 74
  }, {
    "from": 85,
    "label": "has",
    "to": 75
  }, {
    "from": 85,
    "label": "has",
    "to": 26
  }, {
    "from": 85,
    "label": "has",
    "to": 70
  }, {
    "from": 85,
    "label": "has",
    "to": 71
  }, {
    "from": 85,
    "label": "has",
    "to": 76
  }, {
    "from": 85,
    "label": "has",
    "to": 77
  }, {
    "from": 85,
    "label": "has",
    "to": 78
  }, {
    "from": 85,
    "label": "has",
    "to": 79
  }, {
    "from": 81,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "calls",
    "to": 98
  }, {
    "from": 87,
    "label": "calls",
    "to": 98
  }, {
    "from": 87,
    "label": "calls",
    "to": 98
  }, {
    "from": 87,
    "label": "calls",
    "to": 98
  }, {
    "from": 87,
    "label": "calls",
    "to": 90
  }, {
    "from": 87,
    "label": "calls",
    "to": 94
  }, {
    "from": 87,
    "label": "calls",
    "to": 94
  }, {
    "from": 87,
    "label": "calls",
    "to": 94
  }, {
    "from": 87,
    "label": "calls",
    "to": 91
  }, {
    "from": 87,
    "label": "calls",
    "to": 91
  }, {
    "from": 87,
    "label": "calls",
    "to": 91
  }, {
    "from": 87,
    "label": "calls",
    "to": 91
  }, {
    "from": 87,
    "label": "calls",
    "to": 93
  }, {
    "from": 87,
    "label": "calls",
    "to": 93
  }, {
    "from": 87,
    "label": "calls",
    "to": 93
  }, {
    "from": 87,
    "label": "calls",
    "to": 93
  }, {
    "from": 87,
    "label": "calls",
    "to": 93
  }, {
    "from": 87,
    "label": "calls",
    "to": 93
  }, {
    "from": 87,
    "label": "calls",
    "to": 93
  }, {
    "from": 87,
    "label": "calls",
    "to": 93
  }, {
    "from": 87,
    "label": "calls",
    "to": 93
  }, {
    "from": 87,
    "label": "calls",
    "to": 93
  }, {
    "from": 87,
    "label": "calls",
    "to": 93
  }, {
    "from": 87,
    "label": "calls",
    "to": 95
  }, {
    "from": 87,
    "label": "calls",
    "to": 95
  }, {
    "from": 87,
    "label": "calls",
    "to": 95
  }, {
    "from": 87,
    "label": "calls",
    "to": 95
  }, {
    "from": 87,
    "label": "calls",
    "to": 95
  }, {
    "from": 87,
    "label": "calls",
    "to": 95
  }, {
    "from": 87,
    "label": "calls",
    "to": 95
  }, {
    "from": 87,
    "label": "calls",
    "to": 95
  }, {
    "from": 87,
    "label": "calls",
    "to": 95
  }, {
    "from": 87,
    "label": "calls",
    "to": 95
  }, {
    "from": 87,
    "label": "calls",
    "to": 95
  }, {
    "from": 87,
    "label": "calls",
    "to": 95
  }, {
    "from": 87,
    "label": "calls",
    "to": 95
  }, {
    "from": 87,
    "label": "calls",
    "to": 95
  }, {
    "from": 87,
    "label": "calls",
    "to": 95
  }, {
    "from": 87,
    "label": "calls",
    "to": 95
  }, {
    "from": 87,
    "label": "calls",
    "to": 95
  }, {
    "from": 87,
    "label": "calls",
    "to": 95
  }, {
    "from": 87,
    "label": "calls",
    "to": 95
  }, {
    "from": 87,
    "label": "calls",
    "to": 95
  }, {
    "from": 87,
    "label": "calls",
    "to": 95
  }, {
    "from": 87,
    "label": "calls",
    "to": 95
  }, {
    "from": 87,
    "label": "calls",
    "to": 95
  }, {
    "from": 87,
    "label": "calls",
    "to": 95
  }, {
    "from": 87,
    "label": "calls",
    "to": 95
  }, {
    "from": 87,
    "label": "calls",
    "to": 95
  }, {
    "from": 87,
    "label": "calls",
    "to": 95
  }, {
    "from": 87,
    "label": "calls",
    "to": 95
  }, {
    "from": 87,
    "label": "calls",
    "to": 95
  }, {
    "from": 87,
    "label": "calls",
    "to": 95
  }, {
    "from": 87,
    "label": "calls",
    "to": 97
  }, {
    "from": 87,
    "label": "calls",
    "to": 97
  }, {
    "from": 87,
    "label": "calls",
    "to": 89
  }, {
    "from": 87,
    "label": "calls",
    "to": 89
  }, {
    "from": 87,
    "label": "calls",
    "to": 99
  }, {
    "from": 87,
    "label": "calls",
    "to": 99
  }, {
    "from": 87,
    "label": "calls",
    "to": 99
  }, {
    "from": 87,
    "label": "calls",
    "to": 88
  }, {
    "from": 87,
    "label": "calls",
    "to": 92
  }, {
    "from": 87,
    "label": "calls",
    "to": 96
  }, {
    "from": 87,
    "label": "calls",
    "to": 96
  }, {
    "from": 87,
    "label": "calls",
    "to": 96
  }, {
    "from": 87,
    "label": "calls",
    "to": 96
  }, {
    "from": 1,
    "label": "contains",
    "to": 87
  }, {
    "from": 87,
    "label": "declares",
    "to": 2
  }, {
    "from": 87,
    "label": "declares",
    "to": 6
  }, {
    "from": 87,
    "label": "declares",
    "to": 9
  }, {
    "from": 87,
    "label": "declares",
    "to": 12
  }, {
    "from": 87,
    "label": "declares",
    "to": 28
  }, {
    "from": 87,
    "label": "declares",
    "to": 48
  }, {
    "from": 87,
    "label": "declares",
    "to": 59
  }, {
    "from": 87,
    "label": "declares",
    "to": 61
  }, {
    "from": 87,
    "label": "declares",
    "to": 63
  }, {
    "from": 87,
    "label": "declares",
    "to": 81
  }, {
    "from": 1,
    "label": "contains",
    "to": 100
  }, {
    "from": 1,
    "label": "contains",
    "to": 101
  }, {
    "from": 82,
    "label": "hasArgument",
    "to": 12
  }, {
    "from": 83,
    "label": "hasArgument",
    "to": 2
  }, {
    "from": 83,
    "label": "hasArgument",
    "to": 6
  }, {
    "from": 83,
    "label": "hasArgument",
    "to": 9
  }, {
    "from": 83,
    "label": "hasArgument",
    "to": 28
  }, {
    "from": 84,
    "label": "hasArgument",
    "to": 48
  }, {
    "from": 85,
    "label": "hasArgument",
    "to": 59
  }, {
    "from": 85,
    "label": "hasArgument",
    "to": 61
  }, {
    "from": 85,
    "label": "hasArgument",
    "to": 63
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "state_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "function(value)\r\n        if type(value) == \"string\" then return \"ok\" end\r\n      end",
    "type": "function"
  }, {
    "id": 3,
    "text": "if type(value) == \"string\" then return \"ok\" end",
    "type": "statement:if"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "function(value)\r\n        if type(value) == \"number\" then return \"1\" end\r\n      end",
    "type": "function"
  }, {
    "id": 7,
    "text": "if type(value) == \"number\" then return \"1\" end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function(value)\r\n        if type(value) == \"number\" then return \"2\" end\r\n      end",
    "type": "function"
  }, {
    "id": 10,
    "text": "if type(value) == \"number\" then return \"2\" end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function()\r\n    local start = assert:snapshot()\r\n    assert.is_nil(start.next)\r\n    \r\n    local snapshot1 = assert:snapshot()\r\n    assert.is.table(start.next)\r\n    assert.are.equal(start.next, snapshot1)\r\n    assert.are.equal(start, snapshot1.previous)\r\n    assert.is_nil(snapshot1.next)\r\n    \r\n    local snapshot2 = assert:snapshot()\r\n    assert.is.table(snapshot1.next)\r\n    assert.are.equal(snapshot2, snapshot1.next)\r\n    assert.are.equal(snapshot2.previous, snapshot1)\r\n    assert.is_nil(snapshot2.next)\r\n    \r\n    snapshot2:revert()\r\n    assert.is.table(start.next)\r\n    assert.are.equal(start.next, snapshot1)\r\n    assert.are.equal(start, snapshot1.previous)\r\n    assert.is_nil(snapshot1.next)\r\n    \r\n    snapshot1:revert()\r\n    assert.is_nil(start.next)\r\n  end",
    "type": "function"
  }, {
    "id": 13,
    "text": "local start = assert:snapshot()",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "assert.is_nil(start.next)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "local snapshot1 = assert:snapshot()",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "assert.is.table(start.next)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "assert.are.equal(start.next, snapshot1)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "assert.are.equal(start, snapshot1.previous)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "assert.is_nil(snapshot1.next)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "local snapshot2 = assert:snapshot()",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "assert.is.table(snapshot1.next)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "assert.are.equal(snapshot2, snapshot1.next)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "assert.are.equal(snapshot2.previous, snapshot1)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "assert.is_nil(snapshot2.next)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "snapshot2:revert()",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "snapshot1:revert()",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function()\r\n\r\n    -- add a state level by creating a snapshot\r\n    local snapshot1 = assert:snapshot()\r\n    -- register extra formatters\r\n    local fmt1 = function(value)\r\n        if type(value) == \"string\" then return \"ok\" end\r\n      end\r\n    assert:add_formatter(fmt1)\r\n    local fmt2 = function(value)\r\n        if type(value) == \"number\" then return \"1\" end\r\n      end\r\n    assert:add_formatter(fmt2)\r\n    -- check formatters\r\n    assert.are.equal(#snapshot1.formatters, 2)\r\n    assert.are.equal(snapshot1.formatters[2], fmt1)\r\n    assert.are.equal(snapshot1.formatters[1], fmt2)\r\n    assert.are.equal(\"ok\", assert:format({\"some value\"})[1])\r\n    assert.are.equal(\"1\", assert:format({123})[1])\r\n    \r\n    -- add another state level by creating a snapshot\r\n    local snapshot2 = assert:snapshot()\r\n    -- register extra formatter\r\n    local fmt3 = function(value)\r\n        if type(value) == \"number\" then return \"2\" end\r\n      end\r\n    assert:add_formatter(fmt3)\r\n    assert.are.equal(#snapshot2.formatters, 1)\r\n    assert.are.equal(snapshot2.formatters[1], fmt3)\r\n    -- check formatter newest level\r\n    assert.are.equal(\"2\", assert:format({123})[1])\r\n    -- check formatter previous level\r\n    assert.are.equal(\"ok\", assert:format({\"some value\"})[1])\r\n    -- check formatter initial level\r\n    assert.are.equal(\"(boolean) true\", assert:format({true})[1])\r\n    \r\n    -- revert 1 state up\r\n    snapshot2:revert()\r\n    assert.is_nil(snapshot1.next)\r\n    assert.are.equal(2, #snapshot1.formatters)\r\n    -- check formatter reverted level\r\n    assert.are.equal(\"1\", assert:format({123})[1])\r\n    -- check formatter unchanged level\r\n    assert.are.equal(\"ok\", assert:format({\"some value\"})[1])\r\n    -- check formatter unchanged level\r\n    assert.are.equal(\"(boolean) true\", assert:format({true})[1])\r\n    \r\n    -- revert 1 more up, to initial level\r\n    snapshot1:revert()\r\n    assert.are.equal(\"(number) 123\", assert:format({123})[1])\r\n    assert.are.equal(\"(string) 'some value'\", assert:format({\"some value\"})[1])\r\n    assert.are.equal(\"(boolean) true\", assert:format({true})[1])  \r\n  end",
    "type": "function"
  }, {
    "id": 29,
    "text": "local fmt1 = function(value)\r\n        if type(value) == \"string\" then return \"ok\" end\r\n      end",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "assert:add_formatter(fmt1)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "local fmt2 = function(value)\r\n        if type(value) == \"number\" then return \"1\" end\r\n      end",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "assert:add_formatter(fmt2)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "assert.are.equal(#snapshot1.formatters, 2)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "assert.are.equal(snapshot1.formatters[2], fmt1)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "assert.are.equal(snapshot1.formatters[1], fmt2)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "assert.are.equal(\"ok\", assert:format({\"some value\"})[1])",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "assert.are.equal(\"1\", assert:format({123})[1])",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "local fmt3 = function(value)\r\n        if type(value) == \"number\" then return \"2\" end\r\n      end",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "assert:add_formatter(fmt3)",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "assert.are.equal(#snapshot2.formatters, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "assert.are.equal(snapshot2.formatters[1], fmt3)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "assert.are.equal(\"2\", assert:format({123})[1])",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "assert.are.equal(\"(boolean) true\", assert:format({true})[1])",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "assert.are.equal(2, #snapshot1.formatters)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "assert.are.equal(\"(number) 123\", assert:format({123})[1])",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "assert.are.equal(\"(string) 'some value'\", assert:format({\"some value\"})[1])",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function()\r\n\r\n    -- add a state level by creating a snapshot\r\n    local snapshot1 = assert:snapshot()\r\n    assert.is_nil(assert:get_parameter(\"Test_1\"))\r\n    assert.is_nil(assert:get_parameter(\"Test_2\"))\r\n    assert:set_parameter(\"Test_1\", 1)\r\n    assert:set_parameter(\"Test_2\", 2)\r\n    assert.are.equal(1, assert:get_parameter(\"Test_1\"))\r\n    assert.are.equal(2, assert:get_parameter(\"Test_2\"))\r\n    \r\n    -- add another state level by creating a snapshot\r\n    local snapshot2 = assert:snapshot()\r\n    assert.are.equal(1, assert:get_parameter(\"Test_1\"))\r\n    assert.are.equal(2, assert:get_parameter(\"Test_2\"))\r\n    assert:set_parameter(\"Test_1\", \"one\")\r\n    assert:set_parameter(\"Test_2\", nil)    -- test setting to nil\r\n    assert.are.equal(\"one\", assert:get_parameter(\"Test_1\"))\r\n    assert.is_nil(assert:get_parameter(\"Test_2\"))\r\n    \r\n    -- revert 1 state up\r\n    snapshot2:revert()\r\n    assert.are.equal(1, assert:get_parameter(\"Test_1\"))\r\n    assert.are.equal(2, assert:get_parameter(\"Test_2\"))\r\n    \r\n    -- revert 1 more up, to initial level\r\n    snapshot1:revert()\r\n    assert.is_nil(assert:get_parameter(\"Test_1\"))\r\n    assert.is_nil(assert:get_parameter(\"Test_2\"))\r\n  end",
    "type": "function"
  }, {
    "id": 49,
    "text": "assert.is_nil(assert:get_parameter(\"Test_1\"))",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "assert.is_nil(assert:get_parameter(\"Test_2\"))",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "assert:set_parameter(\"Test_1\", 1)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "assert:set_parameter(\"Test_2\", 2)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "assert.are.equal(1, assert:get_parameter(\"Test_1\"))",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "assert.are.equal(2, assert:get_parameter(\"Test_2\"))",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "assert:set_parameter(\"Test_1\", \"one\")",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "assert:set_parameter(\"Test_2\", nil)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "assert.are.equal(\"one\", assert:get_parameter(\"Test_1\"))",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function() c1 = c1 + 1 end",
    "type": "function"
  }, {
    "id": 60,
    "text": "c1 = c1 + 1",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "function() c2 = c2 + 1 end",
    "type": "function"
  }, {
    "id": 62,
    "text": "c2 = c2 + 1",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "function()\r\n\r\n    local c1, c2 = 0, 0\r\n    local test = {\r\n      f1 = function() c1 = c1 + 1 end,\r\n      f2 = function() c2 = c2 + 1 end,\r\n    }\r\n    local f1 = test.f1\r\n    local f2 = test.f2\r\n    -- add a state level by creating a snapshot\r\n    local snapshot1 = assert:snapshot()\r\n    -- create spy/stub\r\n    local s1 = spy.on(test, \"f1\")\r\n    local s2 = stub(test, \"f2\")\r\n    -- call them both\r\n    test.f1()\r\n    test.f2()\r\n    assert.spy(test.f1).was.called(1)\r\n    assert.spy(test.f2).was.called(1)\r\n    assert.is_equal(1, c1)\r\n    assert.is_equal(0, c2) -- 0, because it's a stub\r\n    \r\n    -- revert to initial level\r\n    snapshot1:revert()\r\n    test.f1()\r\n    test.f2()\r\n    -- check count is still 1 for both\r\n    assert.spy(s1).was.called(1)\r\n    assert.spy(s2).was.called(1)\r\n    assert.is_equal(2, c1)\r\n    assert.is_equal(1, c2) \r\n  end",
    "type": "function"
  }, {
    "id": 64,
    "text": "local c1, c2 = 0, 0",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "local test = {\r\n      f1 = function() c1 = c1 + 1 end,\r\n      f2 = function() c2 = c2 + 1 end,\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "local f1 = test.f1",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "local f2 = test.f2",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "local s1 = spy.on(test, \"f1\")",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "local s2 = stub(test, \"f2\")",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "test.f1()",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "test.f2()",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "assert.spy(test.f1).was.called(1)",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "assert.spy(test.f2).was.called(1)",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "assert.is_equal(1, c1)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "assert.is_equal(0, c2)",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "assert.spy(s1).was.called(1)",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "assert.spy(s2).was.called(1)",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "assert.is_equal(2, c1)",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "assert.is_equal(1, c2)",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "function()\r\n    \r\n  it(\"checks levels created/reverted\", function()\r\n    local start = assert:snapshot()\r\n    assert.is_nil(start.next)\r\n    \r\n    local snapshot1 = assert:snapshot()\r\n    assert.is.table(start.next)\r\n    assert.are.equal(start.next, snapshot1)\r\n    assert.are.equal(start, snapshot1.previous)\r\n    assert.is_nil(snapshot1.next)\r\n    \r\n    local snapshot2 = assert:snapshot()\r\n    assert.is.table(snapshot1.next)\r\n    assert.are.equal(snapshot2, snapshot1.next)\r\n    assert.are.equal(snapshot2.previous, snapshot1)\r\n    assert.is_nil(snapshot2.next)\r\n    \r\n    snapshot2:revert()\r\n    assert.is.table(start.next)\r\n    assert.are.equal(start.next, snapshot1)\r\n    assert.are.equal(start, snapshot1.previous)\r\n    assert.is_nil(snapshot1.next)\r\n    \r\n    snapshot1:revert()\r\n    assert.is_nil(start.next)\r\n  end)\r\n  \r\n  it(\"checks to see if a formatter is reversed\", function()\r\n\r\n    -- add a state level by creating a snapshot\r\n    local snapshot1 = assert:snapshot()\r\n    -- register extra formatters\r\n    local fmt1 = function(value)\r\n        if type(value) == \"string\" then return \"ok\" end\r\n      end\r\n    assert:add_formatter(fmt1)\r\n    local fmt2 = function(value)\r\n        if type(value) == \"number\" then return \"1\" end\r\n      end\r\n    assert:add_formatter(fmt2)\r\n    -- check formatters\r\n    assert.are.equal(#snapshot1.formatters, 2)\r\n    assert.are.equal(snapshot1.formatters[2], fmt1)\r\n    assert.are.equal(snapshot1.formatters[1], fmt2)\r\n    assert.are.equal(\"ok\", assert:format({\"some value\"})[1])\r\n    assert.are.equal(\"1\", assert:format({123})[1])\r\n    \r\n    -- add another state level by creating a snapshot\r\n    local snapshot2 = assert:snapshot()\r\n    -- register extra formatter\r\n    local fmt3 = function(value)\r\n        if type(value) == \"number\" then return \"2\" end\r\n      end\r\n    assert:add_formatter(fmt3)\r\n    assert.are.equal(#snapshot2.formatters, 1)\r\n    assert.are.equal(snapshot2.formatters[1], fmt3)\r\n    -- check formatter newest level\r\n    assert.are.equal(\"2\", assert:format({123})[1])\r\n    -- check formatter previous level\r\n    assert.are.equal(\"ok\", assert:format({\"some value\"})[1])\r\n    -- check formatter initial level\r\n    assert.are.equal(\"(boolean) true\", assert:format({true})[1])\r\n    \r\n    -- revert 1 state up\r\n    snapshot2:revert()\r\n    assert.is_nil(snapshot1.next)\r\n    assert.are.equal(2, #snapshot1.formatters)\r\n    -- check formatter reverted level\r\n    assert.are.equal(\"1\", assert:format({123})[1])\r\n    -- check formatter unchanged level\r\n    assert.are.equal(\"ok\", assert:format({\"some value\"})[1])\r\n    -- check formatter unchanged level\r\n    assert.are.equal(\"(boolean) true\", assert:format({true})[1])\r\n    \r\n    -- revert 1 more up, to initial level\r\n    snapshot1:revert()\r\n    assert.are.equal(\"(number) 123\", assert:format({123})[1])\r\n    assert.are.equal(\"(string) 'some value'\", assert:format({\"some value\"})[1])\r\n    assert.are.equal(\"(boolean) true\", assert:format({true})[1])  \r\n  end)\r\n\r\n  it(\"checks to see if a parameter is reversed\", function()\r\n\r\n    -- add a state level by creating a snapshot\r\n    local snapshot1 = assert:snapshot()\r\n    assert.is_nil(assert:get_parameter(\"Test_1\"))\r\n    assert.is_nil(assert:get_parameter(\"Test_2\"))\r\n    assert:set_parameter(\"Test_1\", 1)\r\n    assert:set_parameter(\"Test_2\", 2)\r\n    assert.are.equal(1, assert:get_parameter(\"Test_1\"))\r\n    assert.are.equal(2, assert:get_parameter(\"Test_2\"))\r\n    \r\n    -- add another state level by creating a snapshot\r\n    local snapshot2 = assert:snapshot()\r\n    assert.are.equal(1, assert:get_parameter(\"Test_1\"))\r\n    assert.are.equal(2, assert:get_parameter(\"Test_2\"))\r\n    assert:set_parameter(\"Test_1\", \"one\")\r\n    assert:set_parameter(\"Test_2\", nil)    -- test setting to nil\r\n    assert.are.equal(\"one\", assert:get_parameter(\"Test_1\"))\r\n    assert.is_nil(assert:get_parameter(\"Test_2\"))\r\n    \r\n    -- revert 1 state up\r\n    snapshot2:revert()\r\n    assert.are.equal(1, assert:get_parameter(\"Test_1\"))\r\n    assert.are.equal(2, assert:get_parameter(\"Test_2\"))\r\n    \r\n    -- revert 1 more up, to initial level\r\n    snapshot1:revert()\r\n    assert.is_nil(assert:get_parameter(\"Test_1\"))\r\n    assert.is_nil(assert:get_parameter(\"Test_2\"))\r\n  end)\r\n\r\n  it(\"checks to see if a spy/stub is reversed\", function()\r\n\r\n    local c1, c2 = 0, 0\r\n    local test = {\r\n      f1 = function() c1 = c1 + 1 end,\r\n      f2 = function() c2 = c2 + 1 end,\r\n    }\r\n    local f1 = test.f1\r\n    local f2 = test.f2\r\n    -- add a state level by creating a snapshot\r\n    local snapshot1 = assert:snapshot()\r\n    -- create spy/stub\r\n    local s1 = spy.on(test, \"f1\")\r\n    local s2 = stub(test, \"f2\")\r\n    -- call them both\r\n    test.f1()\r\n    test.f2()\r\n    assert.spy(test.f1).was.called(1)\r\n    assert.spy(test.f2).was.called(1)\r\n    assert.is_equal(1, c1)\r\n    assert.is_equal(0, c2) -- 0, because it's a stub\r\n    \r\n    -- revert to initial level\r\n    snapshot1:revert()\r\n    test.f1()\r\n    test.f2()\r\n    -- check count is still 1 for both\r\n    assert.spy(s1).was.called(1)\r\n    assert.spy(s2).was.called(1)\r\n    assert.is_equal(2, c1)\r\n    assert.is_equal(1, c2) \r\n  end)\r\n\r\nend",
    "type": "function"
  }, {
    "id": 82,
    "text": "it(\"checks levels created/reverted\", function()\r\n    local start = assert:snapshot()\r\n    assert.is_nil(start.next)\r\n    \r\n    local snapshot1 = assert:snapshot()\r\n    assert.is.table(start.next)\r\n    assert.are.equal(start.next, snapshot1)\r\n    assert.are.equal(start, snapshot1.previous)\r\n    assert.is_nil(snapshot1.next)\r\n    \r\n    local snapshot2 = assert:snapshot()\r\n    assert.is.table(snapshot1.next)\r\n    assert.are.equal(snapshot2, snapshot1.next)\r\n    assert.are.equal(snapshot2.previous, snapshot1)\r\n    assert.is_nil(snapshot2.next)\r\n    \r\n    snapshot2:revert()\r\n    assert.is.table(start.next)\r\n    assert.are.equal(start.next, snapshot1)\r\n    assert.are.equal(start, snapshot1.previous)\r\n    assert.is_nil(snapshot1.next)\r\n    \r\n    snapshot1:revert()\r\n    assert.is_nil(start.next)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "it(\"checks to see if a formatter is reversed\", function()\r\n\r\n    -- add a state level by creating a snapshot\r\n    local snapshot1 = assert:snapshot()\r\n    -- register extra formatters\r\n    local fmt1 = function(value)\r\n        if type(value) == \"string\" then return \"ok\" end\r\n      end\r\n    assert:add_formatter(fmt1)\r\n    local fmt2 = function(value)\r\n        if type(value) == \"number\" then return \"1\" end\r\n      end\r\n    assert:add_formatter(fmt2)\r\n    -- check formatters\r\n    assert.are.equal(#snapshot1.formatters, 2)\r\n    assert.are.equal(snapshot1.formatters[2], fmt1)\r\n    assert.are.equal(snapshot1.formatters[1], fmt2)\r\n    assert.are.equal(\"ok\", assert:format({\"some value\"})[1])\r\n    assert.are.equal(\"1\", assert:format({123})[1])\r\n    \r\n    -- add another state level by creating a snapshot\r\n    local snapshot2 = assert:snapshot()\r\n    -- register extra formatter\r\n    local fmt3 = function(value)\r\n        if type(value) == \"number\" then return \"2\" end\r\n      end\r\n    assert:add_formatter(fmt3)\r\n    assert.are.equal(#snapshot2.formatters, 1)\r\n    assert.are.equal(snapshot2.formatters[1], fmt3)\r\n    -- check formatter newest level\r\n    assert.are.equal(\"2\", assert:format({123})[1])\r\n    -- check formatter previous level\r\n    assert.are.equal(\"ok\", assert:format({\"some value\"})[1])\r\n    -- check formatter initial level\r\n    assert.are.equal(\"(boolean) true\", assert:format({true})[1])\r\n    \r\n    -- revert 1 state up\r\n    snapshot2:revert()\r\n    assert.is_nil(snapshot1.next)\r\n    assert.are.equal(2, #snapshot1.formatters)\r\n    -- check formatter reverted level\r\n    assert.are.equal(\"1\", assert:format({123})[1])\r\n    -- check formatter unchanged level\r\n    assert.are.equal(\"ok\", assert:format({\"some value\"})[1])\r\n    -- check formatter unchanged level\r\n    assert.are.equal(\"(boolean) true\", assert:format({true})[1])\r\n    \r\n    -- revert 1 more up, to initial level\r\n    snapshot1:revert()\r\n    assert.are.equal(\"(number) 123\", assert:format({123})[1])\r\n    assert.are.equal(\"(string) 'some value'\", assert:format({\"some value\"})[1])\r\n    assert.are.equal(\"(boolean) true\", assert:format({true})[1])  \r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "it(\"checks to see if a parameter is reversed\", function()\r\n\r\n    -- add a state level by creating a snapshot\r\n    local snapshot1 = assert:snapshot()\r\n    assert.is_nil(assert:get_parameter(\"Test_1\"))\r\n    assert.is_nil(assert:get_parameter(\"Test_2\"))\r\n    assert:set_parameter(\"Test_1\", 1)\r\n    assert:set_parameter(\"Test_2\", 2)\r\n    assert.are.equal(1, assert:get_parameter(\"Test_1\"))\r\n    assert.are.equal(2, assert:get_parameter(\"Test_2\"))\r\n    \r\n    -- add another state level by creating a snapshot\r\n    local snapshot2 = assert:snapshot()\r\n    assert.are.equal(1, assert:get_parameter(\"Test_1\"))\r\n    assert.are.equal(2, assert:get_parameter(\"Test_2\"))\r\n    assert:set_parameter(\"Test_1\", \"one\")\r\n    assert:set_parameter(\"Test_2\", nil)    -- test setting to nil\r\n    assert.are.equal(\"one\", assert:get_parameter(\"Test_1\"))\r\n    assert.is_nil(assert:get_parameter(\"Test_2\"))\r\n    \r\n    -- revert 1 state up\r\n    snapshot2:revert()\r\n    assert.are.equal(1, assert:get_parameter(\"Test_1\"))\r\n    assert.are.equal(2, assert:get_parameter(\"Test_2\"))\r\n    \r\n    -- revert 1 more up, to initial level\r\n    snapshot1:revert()\r\n    assert.is_nil(assert:get_parameter(\"Test_1\"))\r\n    assert.is_nil(assert:get_parameter(\"Test_2\"))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "it(\"checks to see if a spy/stub is reversed\", function()\r\n\r\n    local c1, c2 = 0, 0\r\n    local test = {\r\n      f1 = function() c1 = c1 + 1 end,\r\n      f2 = function() c2 = c2 + 1 end,\r\n    }\r\n    local f1 = test.f1\r\n    local f2 = test.f2\r\n    -- add a state level by creating a snapshot\r\n    local snapshot1 = assert:snapshot()\r\n    -- create spy/stub\r\n    local s1 = spy.on(test, \"f1\")\r\n    local s2 = stub(test, \"f2\")\r\n    -- call them both\r\n    test.f1()\r\n    test.f2()\r\n    assert.spy(test.f1).was.called(1)\r\n    assert.spy(test.f2).was.called(1)\r\n    assert.is_equal(1, c1)\r\n    assert.is_equal(0, c2) -- 0, because it's a stub\r\n    \r\n    -- revert to initial level\r\n    snapshot1:revert()\r\n    test.f1()\r\n    test.f2()\r\n    -- check count is still 1 for both\r\n    assert.spy(s1).was.called(1)\r\n    assert.spy(s2).was.called(1)\r\n    assert.is_equal(2, c1)\r\n    assert.is_equal(1, c2) \r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "",
    "type": "function container"
  }, {
    "id": 88,
    "text": "on",
    "type": "global function"
  }, {
    "id": 89,
    "text": "f2",
    "type": "global function"
  }, {
    "id": 90,
    "text": "stub",
    "type": "global function"
  }, {
    "id": 91,
    "text": "it",
    "type": "global function"
  }, {
    "id": 92,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 93,
    "text": "is_nil",
    "type": "global function"
  }, {
    "id": 94,
    "text": "assert.is.table",
    "type": "global function"
  }, {
    "id": 95,
    "text": "assert.are.equal",
    "type": "global function"
  }, {
    "id": 96,
    "text": "is_equal",
    "type": "global function"
  }, {
    "id": 97,
    "text": "f1",
    "type": "global function"
  }, {
    "id": 98,
    "text": "spy",
    "type": "global function"
  }, {
    "id": 99,
    "text": "type",
    "type": "global function"
  }, {
    "id": 100,
    "text": "",
    "type": "variable container"
  }, {
    "id": 101,
    "text": "",
    "type": "require container"
  } ]
}