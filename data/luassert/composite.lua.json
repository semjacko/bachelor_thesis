{
  "_filename": "composite.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luassert/src/matchers/composite.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 3
  }, {
    "from": 12,
    "label": "has",
    "to": 4
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 8
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 12,
    "label": "has",
    "to": 8
  }, {
    "from": 12,
    "label": "has",
    "to": 8
  }, {
    "from": 12,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 3
  }, {
    "from": 19,
    "label": "has",
    "to": 4
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 8
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 19,
    "label": "has",
    "to": 8
  }, {
    "from": 19,
    "label": "has",
    "to": 8
  }, {
    "from": 19,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 26,
    "label": "has",
    "to": 8
  }, {
    "from": 26,
    "label": "has",
    "to": 8
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 28,
    "label": "has",
    "to": 8
  }, {
    "from": 28,
    "label": "has",
    "to": 8
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 30,
    "label": "has",
    "to": 8
  }, {
    "from": 30,
    "label": "has",
    "to": 8
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 2,
    "label": "calls",
    "to": 33
  }, {
    "from": 12,
    "label": "calls",
    "to": 33
  }, {
    "from": 19,
    "label": "calls",
    "to": 33
  }, {
    "from": 32,
    "label": "calls",
    "to": 39
  }, {
    "from": 32,
    "label": "calls",
    "to": 39
  }, {
    "from": 32,
    "label": "calls",
    "to": 39
  }, {
    "from": 2,
    "label": "calls",
    "to": 37
  }, {
    "from": 2,
    "label": "calls",
    "to": 37
  }, {
    "from": 12,
    "label": "calls",
    "to": 37
  }, {
    "from": 12,
    "label": "calls",
    "to": 37
  }, {
    "from": 19,
    "label": "calls",
    "to": 37
  }, {
    "from": 19,
    "label": "calls",
    "to": 37
  }, {
    "from": 2,
    "label": "calls",
    "to": 36
  }, {
    "from": 2,
    "label": "calls",
    "to": 36
  }, {
    "from": 12,
    "label": "calls",
    "to": 36
  }, {
    "from": 12,
    "label": "calls",
    "to": 36
  }, {
    "from": 19,
    "label": "calls",
    "to": 36
  }, {
    "from": 19,
    "label": "calls",
    "to": 36
  }, {
    "from": 2,
    "label": "calls",
    "to": 40
  }, {
    "from": 12,
    "label": "calls",
    "to": 40
  }, {
    "from": 19,
    "label": "calls",
    "to": 40
  }, {
    "from": 2,
    "label": "calls",
    "to": 38
  }, {
    "from": 12,
    "label": "calls",
    "to": 38
  }, {
    "from": 19,
    "label": "calls",
    "to": 38
  }, {
    "from": 2,
    "label": "calls",
    "to": 34
  }, {
    "from": 12,
    "label": "calls",
    "to": 34
  }, {
    "from": 19,
    "label": "calls",
    "to": 34
  }, {
    "from": 2,
    "label": "calls",
    "to": 35
  }, {
    "from": 12,
    "label": "calls",
    "to": 35
  }, {
    "from": 19,
    "label": "calls",
    "to": 35
  }, {
    "from": 1,
    "label": "contains",
    "to": 32
  }, {
    "from": 32,
    "label": "declares",
    "to": 2
  }, {
    "from": 32,
    "label": "declares",
    "to": 12
  }, {
    "from": 32,
    "label": "declares",
    "to": 19
  }, {
    "from": 32,
    "label": "declares",
    "to": 26
  }, {
    "from": 32,
    "label": "declares",
    "to": 28
  }, {
    "from": 32,
    "label": "declares",
    "to": 30
  }, {
    "from": 1,
    "label": "contains",
    "to": 43
  }, {
    "from": 1,
    "label": "contains",
    "to": 44
  }, {
    "from": 44,
    "label": "initializes",
    "to": 45
  }, {
    "from": 45,
    "label": "requires",
    "to": 41
  }, {
    "from": 44,
    "label": "initializes",
    "to": 46
  }, {
    "from": 46,
    "label": "requires",
    "to": 47
  }, {
    "from": 44,
    "label": "initializes",
    "to": 48
  }, {
    "from": 48,
    "label": "requires",
    "to": 42
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "composite",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function none(state, arguments, level)\r\n  local level = (level or 1) + 1\r\n  local argcnt = arguments.n\r\n  assert(argcnt > 0, s(\"assertion.internal.argtolittle\", { \"none\", 1, tostring(argcnt) }), level)\r\n  for i = 1, argcnt do\r\n    assert(match.is_matcher(arguments[i]), s(\"assertion.internal.badargtype\", { 1, \"none\", \"matcher\", type(arguments[i]) }), level)\r\n  end\r\n\r\n  return function(value)\r\n    for _, matcher in ipairs(arguments) do\r\n      if matcher(value) then\r\n        return false\r\n      end\r\n    end\r\n    return true\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local level = (level or 1) + 1",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local argcnt = arguments.n",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "assert(argcnt > 0, s(\"assertion.internal.argtolittle\", { \"none\", 1, tostring(argcnt) }), level)",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "for i = 1, argcnt do\r\n    assert(match.is_matcher(arguments[i]), s(\"assertion.internal.badargtype\", { 1, \"none\", \"matcher\", type(arguments[i]) }), level)\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 7,
    "text": "assert(match.is_matcher(arguments[i]), s(\"assertion.internal.badargtype\", { 1, \"none\", \"matcher\", type(arguments[i]) }), level)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 9,
    "text": "for _, matcher in ipairs(arguments) do\r\n      if matcher(value) then\r\n        return false\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 10,
    "text": "if matcher(value) then\r\n        return false\r\n      end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "local function any(state, arguments, level)\r\n  local level = (level or 1) + 1\r\n  local argcnt = arguments.n\r\n  assert(argcnt > 0, s(\"assertion.internal.argtolittle\", { \"any\", 1, tostring(argcnt) }), level)\r\n  for i = 1, argcnt do\r\n    assert(match.is_matcher(arguments[i]), s(\"assertion.internal.badargtype\", { 1, \"any\", \"matcher\", type(arguments[i]) }), level)\r\n  end\r\n\r\n  return function(value)\r\n    for _, matcher in ipairs(arguments) do\r\n      if matcher(value) then\r\n        return true\r\n      end\r\n    end\r\n    return false\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "assert(argcnt > 0, s(\"assertion.internal.argtolittle\", { \"any\", 1, tostring(argcnt) }), level)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "for i = 1, argcnt do\r\n    assert(match.is_matcher(arguments[i]), s(\"assertion.internal.badargtype\", { 1, \"any\", \"matcher\", type(arguments[i]) }), level)\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 15,
    "text": "assert(match.is_matcher(arguments[i]), s(\"assertion.internal.badargtype\", { 1, \"any\", \"matcher\", type(arguments[i]) }), level)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "for _, matcher in ipairs(arguments) do\r\n      if matcher(value) then\r\n        return true\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 17,
    "text": "if matcher(value) then\r\n        return true\r\n      end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "local function all(state, arguments, level)\r\n  local level = (level or 1) + 1\r\n  local argcnt = arguments.n\r\n  assert(argcnt > 0, s(\"assertion.internal.argtolittle\", { \"all\", 1, tostring(argcnt) }), level)\r\n  for i = 1, argcnt do\r\n    assert(match.is_matcher(arguments[i]), s(\"assertion.internal.badargtype\", { 1, \"all\", \"matcher\", type(arguments[i]) }), level)\r\n  end\r\n\r\n  return function(value)\r\n    for _, matcher in ipairs(arguments) do\r\n      if not matcher(value) then\r\n        return false\r\n      end\r\n    end\r\n    return true\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "assert(argcnt > 0, s(\"assertion.internal.argtolittle\", { \"all\", 1, tostring(argcnt) }), level)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "for i = 1, argcnt do\r\n    assert(match.is_matcher(arguments[i]), s(\"assertion.internal.badargtype\", { 1, \"all\", \"matcher\", type(arguments[i]) }), level)\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 22,
    "text": "assert(match.is_matcher(arguments[i]), s(\"assertion.internal.badargtype\", { 1, \"all\", \"matcher\", type(arguments[i]) }), level)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "for _, matcher in ipairs(arguments) do\r\n      if not matcher(value) then\r\n        return false\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 24,
    "text": "if not matcher(value) then\r\n        return false\r\n      end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function(value)\r\n    for _, matcher in ipairs(arguments) do\r\n      if matcher(value) then\r\n        return false\r\n      end\r\n    end\r\n    return true\r\n  end",
    "type": "function"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function(value)\r\n    for _, matcher in ipairs(arguments) do\r\n      if matcher(value) then\r\n        return true\r\n      end\r\n    end\r\n    return false\r\n  end",
    "type": "function"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function(value)\r\n    for _, matcher in ipairs(arguments) do\r\n      if not matcher(value) then\r\n        return false\r\n      end\r\n    end\r\n    return true\r\n  end",
    "type": "function"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "",
    "type": "function container"
  }, {
    "id": 33,
    "text": "is_matcher",
    "type": "global function"
  }, {
    "id": 34,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 35,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 36,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 37,
    "text": "s",
    "type": "global function"
  }, {
    "id": 38,
    "text": "matcher",
    "type": "global function"
  }, {
    "id": 39,
    "text": "require",
    "type": "global function"
  }, {
    "id": 40,
    "text": "type",
    "type": "global function"
  }, {
    "id": 41,
    "text": "assert)",
    "type": "module"
  }, {
    "id": 42,
    "text": "(say)",
    "type": "module"
  }, {
    "id": 43,
    "text": "",
    "type": "variable container"
  }, {
    "id": 44,
    "text": "",
    "type": "require container"
  }, {
    "id": 45,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 46,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 47,
    "text": "match)",
    "type": "module"
  }, {
    "id": 48,
    "text": "",
    "type": "require local variable"
  } ]
}