{
  "_filename": "state.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luassert/src/state.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 8
  }, {
    "from": 4,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 4,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 4,
    "label": "has",
    "to": 13
  }, {
    "from": 4,
    "label": "has",
    "to": 14
  }, {
    "from": 4,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 4,
    "label": "has",
    "to": 18
  }, {
    "from": 4,
    "label": "has",
    "to": 19
  }, {
    "from": 4,
    "label": "has",
    "to": 20
  }, {
    "from": 4,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 22,
    "label": "has",
    "to": 27
  }, {
    "from": 22,
    "label": "has",
    "to": 8
  }, {
    "from": 22,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 32,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 32,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 33
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 40,
    "label": "has",
    "to": 8
  }, {
    "from": 40,
    "label": "has",
    "to": 44
  }, {
    "from": 40,
    "label": "has",
    "to": 8
  }, {
    "from": 40,
    "label": "has",
    "to": 8
  }, {
    "from": 40,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 46,
    "label": "has",
    "to": 49
  }, {
    "from": 46,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 33
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 51,
    "label": "has",
    "to": 8
  }, {
    "from": 51,
    "label": "has",
    "to": 54
  }, {
    "from": 51,
    "label": "has",
    "to": 8
  }, {
    "from": 51,
    "label": "has",
    "to": 8
  }, {
    "from": 51,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "calls",
    "to": 63
  }, {
    "from": 62,
    "label": "calls",
    "to": 63
  }, {
    "from": 62,
    "label": "calls",
    "to": 68
  }, {
    "from": 62,
    "label": "calls",
    "to": 65
  }, {
    "from": 62,
    "label": "calls",
    "to": 67
  }, {
    "from": 62,
    "label": "calls",
    "to": 69
  }, {
    "from": 62,
    "label": "calls",
    "to": 70
  }, {
    "from": 62,
    "label": "calls",
    "to": 70
  }, {
    "from": 62,
    "label": "calls",
    "to": 70
  }, {
    "from": 62,
    "label": "calls",
    "to": 40
  }, {
    "from": 62,
    "label": "calls",
    "to": 66
  }, {
    "from": 62,
    "label": "calls",
    "to": 51
  }, {
    "from": 62,
    "label": "calls",
    "to": 32
  }, {
    "from": 62,
    "label": "calls",
    "to": 22
  }, {
    "from": 62,
    "label": "calls",
    "to": 64
  }, {
    "from": 1,
    "label": "contains",
    "to": 62
  }, {
    "from": 62,
    "label": "declares",
    "to": 4
  }, {
    "from": 62,
    "label": "declares",
    "to": 22
  }, {
    "from": 62,
    "label": "declares",
    "to": 29
  }, {
    "from": 62,
    "label": "declares",
    "to": 32
  }, {
    "from": 62,
    "label": "declares",
    "to": 40
  }, {
    "from": 62,
    "label": "declares",
    "to": 46
  }, {
    "from": 62,
    "label": "declares",
    "to": 51
  }, {
    "from": 62,
    "label": "declares",
    "to": 56
  }, {
    "from": 62,
    "label": "declares",
    "to": 59
  }, {
    "from": 71,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 72
  }, {
    "from": 1,
    "label": "contains",
    "to": 73
  }, {
    "from": 72,
    "label": "initializes",
    "to": 74
  }, {
    "from": 74,
    "label": "assigns",
    "to": 75
  }, {
    "from": 75,
    "label": "assigns",
    "to": 76
  }, {
    "from": 76,
    "label": "assigns",
    "to": 77
  }, {
    "from": 72,
    "label": "initializes",
    "to": 78
  }, {
    "from": 78,
    "label": "assigns",
    "to": 79
  }, {
    "from": 79,
    "label": "assigns",
    "to": 80
  }, {
    "from": 80,
    "label": "assigns",
    "to": 81
  }, {
    "from": 72,
    "label": "initializes",
    "to": 82
  }, {
    "from": 82,
    "label": "assigns",
    "to": 83
  }, {
    "from": 72,
    "label": "initializes",
    "to": 84
  }, {
    "from": 72,
    "label": "initializes",
    "to": 85
  }, {
    "from": 85,
    "label": "assigns",
    "to": 86
  }, {
    "from": 72,
    "label": "initializes",
    "to": 87
  }, {
    "from": 87,
    "label": "assigns",
    "to": 88
  }, {
    "from": 72,
    "label": "initializes",
    "to": 89
  }, {
    "from": 89,
    "label": "assigns",
    "to": 90
  }, {
    "from": 72,
    "label": "initializes",
    "to": 91
  }, {
    "from": 91,
    "label": "assigns",
    "to": 92
  }, {
    "from": 72,
    "label": "initializes",
    "to": 93
  }, {
    "from": 93,
    "label": "assigns",
    "to": 94
  }, {
    "from": 72,
    "label": "initializes",
    "to": 95
  }, {
    "from": 95,
    "label": "assigns",
    "to": 96
  }, {
    "from": 72,
    "label": "initializes",
    "to": 97
  }, {
    "from": 97,
    "label": "assigns",
    "to": 98
  }, {
    "from": 72,
    "label": "initializes",
    "to": 99
  }, {
    "from": 99,
    "label": "assigns",
    "to": 100
  }, {
    "from": 72,
    "label": "initializes",
    "to": 101
  }, {
    "from": 101,
    "label": "assigns",
    "to": 102
  }, {
    "from": 1,
    "label": "provides",
    "to": 103
  }, {
    "from": 85,
    "label": "represents",
    "to": 104
  }, {
    "from": 103,
    "label": "provides",
    "to": 104
  }, {
    "from": 85,
    "label": "contains",
    "to": 2
  }, {
    "from": 85,
    "label": "contains",
    "to": 3
  }, {
    "from": 85,
    "label": "contains",
    "to": 4
  }, {
    "from": 85,
    "label": "contains",
    "to": 22
  }, {
    "from": 85,
    "label": "contains",
    "to": 29
  }, {
    "from": 85,
    "label": "contains",
    "to": 32
  }, {
    "from": 85,
    "label": "contains",
    "to": 40
  }, {
    "from": 85,
    "label": "contains",
    "to": 46
  }, {
    "from": 85,
    "label": "contains",
    "to": 51
  }, {
    "from": 85,
    "label": "contains",
    "to": 56
  }, {
    "from": 10,
    "label": "hasArgument",
    "to": 77
  }, {
    "from": 12,
    "label": "hasArgument",
    "to": 77
  }, {
    "from": 17,
    "label": "hasArgument",
    "to": 77
  }, {
    "from": 18,
    "label": "hasArgument",
    "to": 77
  }, {
    "from": 30,
    "label": "hasArgument",
    "to": 77
  }, {
    "from": 36,
    "label": "hasArgument",
    "to": 77
  }, {
    "from": 38,
    "label": "hasArgument",
    "to": 77
  }, {
    "from": 60,
    "label": "hasArgument",
    "to": 77
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "state",
    "type": "module"
  }, {
    "id": 2,
    "text": "function() return setmetatable({mod=true, tokens={}}, __state_meta) end",
    "type": "function"
  }, {
    "id": 3,
    "text": "function() return setmetatable({mod=true, tokens={}}, state_mt) end",
    "type": "function"
  }, {
    "id": 4,
    "text": "function(self)\r\n  if not self then\r\n    -- no snapshot given, so move 1 up\r\n    self = current\r\n    if not self.previous then\r\n      -- top of list, no previous one, nothing to do\r\n      return\r\n    end\r\n  end\r\n  if getmetatable(self) ~= state_mt then error(\"Value provided is not a valid snapshot\", 2) end\r\n  \r\n  if self.next then\r\n    self.next:revert()\r\n  end\r\n  -- revert formatters in 'last'\r\n  self.formatters = {}\r\n  -- revert parameters in 'last'\r\n  self.parameters = {}\r\n  -- revert spies/stubs in 'last'\r\n  for s,_ in pairs(self.spies) do\r\n    self.spies[s] = nil\r\n    s:revert()\r\n  end\r\n  setmetatable(self, nil) -- invalidate as a snapshot\r\n  current = self.previous\r\n  current.next = nil\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "if not self then\r\n    -- no snapshot given, so move 1 up\r\n    self = current\r\n    if not self.previous then\r\n      -- top of list, no previous one, nothing to do\r\n      return\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "self = current",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "if not self.previous then\r\n      -- top of list, no previous one, nothing to do\r\n      return\r\n    end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 9,
    "text": "if getmetatable(self) ~= state_mt then error(\"Value provided is not a valid snapshot\", 2) end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "error(\"Value provided is not a valid snapshot\", 2)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "if self.next then\r\n    self.next:revert()\r\n  end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "self.next:revert()",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "self.formatters = {}",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "self.parameters = {}",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "for s,_ in pairs(self.spies) do\r\n    self.spies[s] = nil\r\n    s:revert()\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 16,
    "text": "self.spies[s] = nil",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "s:revert()",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "setmetatable(self, nil)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "current = self.previous",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "current.next = nil",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function()\r\n  local s = current\r\n  local new = setmetatable ({\r\n    formatters = {},\r\n    parameters = {},\r\n    spies = setmetatable({}, spies_mt),\r\n    previous = current,\r\n    revert = state.revert,\r\n  }, state_mt)\r\n  if current then current.next = new end\r\n  current = new\r\n  return current\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "local s = current",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "local new = setmetatable ({\r\n    formatters = {},\r\n    parameters = {},\r\n    spies = setmetatable({}, spies_mt),\r\n    previous = current,\r\n    revert = state.revert,\r\n  }, state_mt)",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "if current then current.next = new end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "current.next = new",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "current = new",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function(callback)\r\n  table.insert(current.formatters, 1, callback)\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "table.insert(current.formatters, 1, callback)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function(callback, s)\r\n  s = s or current\r\n  for i, v in ipairs(s.formatters) do\r\n    if v == callback then\r\n      table.remove(s.formatters, i)\r\n      break\r\n    end\r\n  end\r\n  -- wasn't found, so traverse up 1 state\r\n  if s.previous then\r\n    state.remove_formatter(callback, s.previous)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "s = s or current",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "for i, v in ipairs(s.formatters) do\r\n    if v == callback then\r\n      table.remove(s.formatters, i)\r\n      break\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 35,
    "text": "if v == callback then\r\n      table.remove(s.formatters, i)\r\n      break\r\n    end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "table.remove(s.formatters, i)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "if s.previous then\r\n    state.remove_formatter(callback, s.previous)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "state.remove_formatter(callback, s.previous)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function(val, s, fmtargs)\r\n  s = s or current\r\n  for _, fmt in ipairs(s.formatters) do\r\n    local valfmt = fmt(val, fmtargs)\r\n    if valfmt ~= nil then return valfmt end\r\n  end\r\n  -- nothing found, check snapshot 1 up in list\r\n  if s.previous then\r\n    return state.format_argument(val, s.previous, fmtargs)\r\n  end\r\n  return nil -- end of list, couldn't format\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "for _, fmt in ipairs(s.formatters) do\r\n    local valfmt = fmt(val, fmtargs)\r\n    if valfmt ~= nil then return valfmt end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 42,
    "text": "local valfmt = fmt(val, fmtargs)",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "if valfmt ~= nil then return valfmt end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "if s.previous then\r\n    return state.format_argument(val, s.previous, fmtargs)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function(name, value)\r\n  if value == nil then value = nilvalue end\r\n  current.parameters[name] = value\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "if value == nil then value = nilvalue end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "value = nilvalue",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "current.parameters[name] = value",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "function(name, s)\r\n  s = s or current\r\n  local val = s.parameters[name]\r\n  if val == nil and s.previous then\r\n    -- not found, so check 1 up in list\r\n    return state.get_parameter(name, s.previous)\r\n  end\r\n  if val ~= nilvalue then\r\n    return val\r\n  end\r\n  return nil\r\nend",
    "type": "function"
  }, {
    "id": 52,
    "text": "local val = s.parameters[name]",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "if val == nil and s.previous then\r\n    -- not found, so check 1 up in list\r\n    return state.get_parameter(name, s.previous)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "if val ~= nilvalue then\r\n    return val\r\n  end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function(spy)\r\n  current.spies[spy] = true\r\nend",
    "type": "function"
  }, {
    "id": 57,
    "text": "current.spies[spy] = true",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function(self)\r\n    self:revert()\r\n  end",
    "type": "function"
  }, {
    "id": 60,
    "text": "self:revert()",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "",
    "type": "function container"
  }, {
    "id": 63,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 64,
    "text": "fmt",
    "type": "global function"
  }, {
    "id": 65,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 66,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 67,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 68,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 69,
    "text": "error",
    "type": "global function"
  }, {
    "id": 70,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 71,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 72,
    "text": "",
    "type": "variable container"
  }, {
    "id": 73,
    "text": "",
    "type": "require container"
  }, {
    "id": 74,
    "text": "",
    "type": "local variable"
  }, {
    "id": 75,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 76,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 77,
    "text": "",
    "type": "function"
  }, {
    "id": 78,
    "text": "",
    "type": "local variable"
  }, {
    "id": 79,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 80,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 81,
    "text": "",
    "type": "string"
  }, {
    "id": 82,
    "text": "",
    "type": "local variable"
  }, {
    "id": 83,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 84,
    "text": "",
    "type": "local variable"
  }, {
    "id": 85,
    "text": "",
    "type": "local variable"
  }, {
    "id": 86,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 87,
    "text": "",
    "type": "global variable"
  }, {
    "id": 88,
    "text": "",
    "type": "n/a"
  }, {
    "id": 89,
    "text": "",
    "type": "global variable"
  }, {
    "id": 90,
    "text": "",
    "type": "n/a"
  }, {
    "id": 91,
    "text": "",
    "type": "global variable"
  }, {
    "id": 92,
    "text": "",
    "type": "n/a"
  }, {
    "id": 93,
    "text": "",
    "type": "global variable"
  }, {
    "id": 94,
    "text": "",
    "type": "n/a"
  }, {
    "id": 95,
    "text": "",
    "type": "global variable"
  }, {
    "id": 96,
    "text": "",
    "type": "n/a"
  }, {
    "id": 97,
    "text": "",
    "type": "global variable"
  }, {
    "id": 98,
    "text": "",
    "type": "n/a"
  }, {
    "id": 99,
    "text": "",
    "type": "global variable"
  }, {
    "id": 100,
    "text": "",
    "type": "n/a"
  }, {
    "id": 101,
    "text": "",
    "type": "global variable"
  }, {
    "id": 102,
    "text": "",
    "type": "n/a"
  }, {
    "id": 103,
    "text": "",
    "type": "interface container"
  }, {
    "id": 104,
    "text": "",
    "type": "interface"
  } ]
}