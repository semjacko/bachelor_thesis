{
  "_filename": "output_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/luassert/spec/output_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 5
  }, {
    "from": 8,
    "label": "has",
    "to": 6
  }, {
    "from": 8,
    "label": "has",
    "to": 6
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 5
  }, {
    "from": 11,
    "label": "has",
    "to": 6
  }, {
    "from": 11,
    "label": "has",
    "to": 6
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 14,
    "label": "has",
    "to": 5
  }, {
    "from": 14,
    "label": "has",
    "to": 6
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 14,
    "label": "has",
    "to": 6
  }, {
    "from": 14,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 5
  }, {
    "from": 21,
    "label": "has",
    "to": 6
  }, {
    "from": 21,
    "label": "has",
    "to": 19
  }, {
    "from": 21,
    "label": "has",
    "to": 6
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 5
  }, {
    "from": 24,
    "label": "has",
    "to": 6
  }, {
    "from": 24,
    "label": "has",
    "to": 19
  }, {
    "from": 24,
    "label": "has",
    "to": 6
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 25
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 5
  }, {
    "from": 28,
    "label": "has",
    "to": 6
  }, {
    "from": 28,
    "label": "has",
    "to": 19
  }, {
    "from": 28,
    "label": "has",
    "to": 6
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 31,
    "label": "has",
    "to": 35
  }, {
    "from": 31,
    "label": "has",
    "to": 36
  }, {
    "from": 31,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 38,
    "label": "has",
    "to": 42
  }, {
    "from": 38,
    "label": "has",
    "to": 43
  }, {
    "from": 38,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 4
  }, {
    "from": 46,
    "label": "has",
    "to": 5
  }, {
    "from": 46,
    "label": "has",
    "to": 6
  }, {
    "from": 46,
    "label": "has",
    "to": 6
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 32
  }, {
    "from": 47,
    "label": "has",
    "to": 33
  }, {
    "from": 47,
    "label": "has",
    "to": 34
  }, {
    "from": 47,
    "label": "has",
    "to": 35
  }, {
    "from": 47,
    "label": "has",
    "to": 36
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 39
  }, {
    "from": 48,
    "label": "has",
    "to": 40
  }, {
    "from": 48,
    "label": "has",
    "to": 41
  }, {
    "from": 48,
    "label": "has",
    "to": 42
  }, {
    "from": 48,
    "label": "has",
    "to": 43
  }, {
    "from": 45,
    "label": "has",
    "to": 49
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 51,
    "label": "has",
    "to": 54
  }, {
    "from": 51,
    "label": "has",
    "to": 55
  }, {
    "from": 51,
    "label": "has",
    "to": 56
  }, {
    "from": 51,
    "label": "has",
    "to": 57
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 53
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 59,
    "label": "has",
    "to": 42
  }, {
    "from": 59,
    "label": "has",
    "to": 62
  }, {
    "from": 59,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 34
  }, {
    "from": 66,
    "label": "has",
    "to": 42
  }, {
    "from": 66,
    "label": "has",
    "to": 36
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 72,
    "label": "has",
    "to": 75
  }, {
    "from": 72,
    "label": "has",
    "to": 76
  }, {
    "from": 72,
    "label": "has",
    "to": 77
  }, {
    "from": 72,
    "label": "has",
    "to": 78
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 81,
    "label": "has",
    "to": 84
  }, {
    "from": 81,
    "label": "has",
    "to": 42
  }, {
    "from": 81,
    "label": "has",
    "to": 85
  }, {
    "from": 81,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "has",
    "to": 71
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 71
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 88,
    "label": "has",
    "to": 91
  }, {
    "from": 88,
    "label": "has",
    "to": 92
  }, {
    "from": 88,
    "label": "has",
    "to": 93
  }, {
    "from": 88,
    "label": "has",
    "to": 94
  }, {
    "from": 95,
    "label": "has",
    "to": 80
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 80
  }, {
    "from": 96,
    "label": "has",
    "to": 83
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 96,
    "label": "has",
    "to": 99
  }, {
    "from": 96,
    "label": "has",
    "to": 100
  }, {
    "from": 96,
    "label": "has",
    "to": 101
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 9
  }, {
    "from": 103,
    "label": "has",
    "to": 5
  }, {
    "from": 103,
    "label": "has",
    "to": 6
  }, {
    "from": 103,
    "label": "has",
    "to": 6
  }, {
    "from": 102,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 52
  }, {
    "from": 104,
    "label": "has",
    "to": 53
  }, {
    "from": 104,
    "label": "has",
    "to": 54
  }, {
    "from": 104,
    "label": "has",
    "to": 55
  }, {
    "from": 104,
    "label": "has",
    "to": 56
  }, {
    "from": 102,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 60
  }, {
    "from": 105,
    "label": "has",
    "to": 53
  }, {
    "from": 105,
    "label": "has",
    "to": 61
  }, {
    "from": 105,
    "label": "has",
    "to": 42
  }, {
    "from": 105,
    "label": "has",
    "to": 62
  }, {
    "from": 102,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 65
  }, {
    "from": 106,
    "label": "has",
    "to": 68
  }, {
    "from": 106,
    "label": "has",
    "to": 34
  }, {
    "from": 106,
    "label": "has",
    "to": 42
  }, {
    "from": 106,
    "label": "has",
    "to": 36
  }, {
    "from": 102,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 71
  }, {
    "from": 107,
    "label": "has",
    "to": 74
  }, {
    "from": 107,
    "label": "has",
    "to": 75
  }, {
    "from": 107,
    "label": "has",
    "to": 76
  }, {
    "from": 107,
    "label": "has",
    "to": 77
  }, {
    "from": 102,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 80
  }, {
    "from": 108,
    "label": "has",
    "to": 83
  }, {
    "from": 108,
    "label": "has",
    "to": 84
  }, {
    "from": 108,
    "label": "has",
    "to": 42
  }, {
    "from": 108,
    "label": "has",
    "to": 85
  }, {
    "from": 102,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 71
  }, {
    "from": 109,
    "label": "has",
    "to": 90
  }, {
    "from": 109,
    "label": "has",
    "to": 91
  }, {
    "from": 109,
    "label": "has",
    "to": 92
  }, {
    "from": 109,
    "label": "has",
    "to": 93
  }, {
    "from": 102,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 80
  }, {
    "from": 110,
    "label": "has",
    "to": 83
  }, {
    "from": 110,
    "label": "has",
    "to": 98
  }, {
    "from": 110,
    "label": "has",
    "to": 99
  }, {
    "from": 110,
    "label": "has",
    "to": 100
  }, {
    "from": 102,
    "label": "has",
    "to": 111
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 112,
    "label": "has",
    "to": 114
  }, {
    "from": 112,
    "label": "has",
    "to": 98
  }, {
    "from": 112,
    "label": "has",
    "to": 115
  }, {
    "from": 112,
    "label": "has",
    "to": 100
  }, {
    "from": 112,
    "label": "has",
    "to": 116
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 117,
    "label": "has",
    "to": 119
  }, {
    "from": 117,
    "label": "has",
    "to": 120
  }, {
    "from": 117,
    "label": "has",
    "to": 121
  }, {
    "from": 117,
    "label": "has",
    "to": 98
  }, {
    "from": 117,
    "label": "has",
    "to": 122
  }, {
    "from": 117,
    "label": "has",
    "to": 100
  }, {
    "from": 117,
    "label": "has",
    "to": 123
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 12
  }, {
    "from": 125,
    "label": "has",
    "to": 5
  }, {
    "from": 125,
    "label": "has",
    "to": 6
  }, {
    "from": 125,
    "label": "has",
    "to": 6
  }, {
    "from": 124,
    "label": "has",
    "to": 126
  }, {
    "from": 126,
    "label": "has",
    "to": 113
  }, {
    "from": 126,
    "label": "has",
    "to": 114
  }, {
    "from": 126,
    "label": "has",
    "to": 98
  }, {
    "from": 126,
    "label": "has",
    "to": 115
  }, {
    "from": 126,
    "label": "has",
    "to": 100
  }, {
    "from": 124,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 118
  }, {
    "from": 127,
    "label": "has",
    "to": 119
  }, {
    "from": 127,
    "label": "has",
    "to": 120
  }, {
    "from": 127,
    "label": "has",
    "to": 121
  }, {
    "from": 127,
    "label": "has",
    "to": 98
  }, {
    "from": 127,
    "label": "has",
    "to": 122
  }, {
    "from": 127,
    "label": "has",
    "to": 100
  }, {
    "from": 124,
    "label": "has",
    "to": 128
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 129,
    "label": "has",
    "to": 131
  }, {
    "from": 129,
    "label": "has",
    "to": 132
  }, {
    "from": 129,
    "label": "has",
    "to": 133
  }, {
    "from": 129,
    "label": "has",
    "to": 134
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 135,
    "label": "has",
    "to": 137
  }, {
    "from": 135,
    "label": "has",
    "to": 138
  }, {
    "from": 135,
    "label": "has",
    "to": 139
  }, {
    "from": 135,
    "label": "has",
    "to": 140
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 141,
    "label": "has",
    "to": 143
  }, {
    "from": 141,
    "label": "has",
    "to": 144
  }, {
    "from": 141,
    "label": "has",
    "to": 145
  }, {
    "from": 141,
    "label": "has",
    "to": 146
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 147,
    "label": "has",
    "to": 149
  }, {
    "from": 147,
    "label": "has",
    "to": 150
  }, {
    "from": 147,
    "label": "has",
    "to": 151
  }, {
    "from": 147,
    "label": "has",
    "to": 152
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 156,
    "label": "has",
    "to": 158
  }, {
    "from": 156,
    "label": "has",
    "to": 159
  }, {
    "from": 156,
    "label": "has",
    "to": 160
  }, {
    "from": 156,
    "label": "has",
    "to": 161
  }, {
    "from": 156,
    "label": "has",
    "to": 162
  }, {
    "from": 156,
    "label": "has",
    "to": 163
  }, {
    "from": 156,
    "label": "has",
    "to": 164
  }, {
    "from": 156,
    "label": "has",
    "to": 165
  }, {
    "from": 156,
    "label": "has",
    "to": 166
  }, {
    "from": 156,
    "label": "has",
    "to": 167
  }, {
    "from": 156,
    "label": "has",
    "to": 168
  }, {
    "from": 156,
    "label": "has",
    "to": 169
  }, {
    "from": 156,
    "label": "has",
    "to": 170
  }, {
    "from": 156,
    "label": "has",
    "to": 171
  }, {
    "from": 156,
    "label": "has",
    "to": 172
  }, {
    "from": 156,
    "label": "has",
    "to": 173
  }, {
    "from": 156,
    "label": "has",
    "to": 174
  }, {
    "from": 156,
    "label": "has",
    "to": 175
  }, {
    "from": 156,
    "label": "has",
    "to": 176
  }, {
    "from": 156,
    "label": "has",
    "to": 177
  }, {
    "from": 156,
    "label": "has",
    "to": 178
  }, {
    "from": 156,
    "label": "has",
    "to": 179
  }, {
    "from": 156,
    "label": "has",
    "to": 180
  }, {
    "from": 156,
    "label": "has",
    "to": 181
  }, {
    "from": 156,
    "label": "has",
    "to": 182
  }, {
    "from": 156,
    "label": "has",
    "to": 183
  }, {
    "from": 156,
    "label": "has",
    "to": 184
  }, {
    "from": 156,
    "label": "has",
    "to": 185
  }, {
    "from": 156,
    "label": "has",
    "to": 186
  }, {
    "from": 156,
    "label": "has",
    "to": 187
  }, {
    "from": 156,
    "label": "has",
    "to": 188
  }, {
    "from": 156,
    "label": "has",
    "to": 189
  }, {
    "from": 156,
    "label": "has",
    "to": 190
  }, {
    "from": 191,
    "label": "has",
    "to": 192
  }, {
    "from": 191,
    "label": "has",
    "to": 193
  }, {
    "from": 191,
    "label": "has",
    "to": 194
  }, {
    "from": 191,
    "label": "has",
    "to": 195
  }, {
    "from": 191,
    "label": "has",
    "to": 196
  }, {
    "from": 197,
    "label": "has",
    "to": 198
  }, {
    "from": 197,
    "label": "has",
    "to": 199
  }, {
    "from": 197,
    "label": "has",
    "to": 200
  }, {
    "from": 197,
    "label": "has",
    "to": 201
  }, {
    "from": 197,
    "label": "has",
    "to": 202
  }, {
    "from": 203,
    "label": "has",
    "to": 204
  }, {
    "from": 203,
    "label": "has",
    "to": 205
  }, {
    "from": 203,
    "label": "has",
    "to": 206
  }, {
    "from": 203,
    "label": "has",
    "to": 207
  }, {
    "from": 203,
    "label": "has",
    "to": 208
  }, {
    "from": 209,
    "label": "has",
    "to": 210
  }, {
    "from": 209,
    "label": "has",
    "to": 211
  }, {
    "from": 209,
    "label": "has",
    "to": 212
  }, {
    "from": 209,
    "label": "has",
    "to": 213
  }, {
    "from": 209,
    "label": "has",
    "to": 214
  }, {
    "from": 215,
    "label": "has",
    "to": 216
  }, {
    "from": 215,
    "label": "has",
    "to": 217
  }, {
    "from": 215,
    "label": "has",
    "to": 218
  }, {
    "from": 215,
    "label": "has",
    "to": 219
  }, {
    "from": 215,
    "label": "has",
    "to": 220
  }, {
    "from": 221,
    "label": "has",
    "to": 222
  }, {
    "from": 221,
    "label": "has",
    "to": 223
  }, {
    "from": 221,
    "label": "has",
    "to": 224
  }, {
    "from": 221,
    "label": "has",
    "to": 225
  }, {
    "from": 221,
    "label": "has",
    "to": 226
  }, {
    "from": 227,
    "label": "has",
    "to": 228
  }, {
    "from": 227,
    "label": "has",
    "to": 229
  }, {
    "from": 227,
    "label": "has",
    "to": 230
  }, {
    "from": 227,
    "label": "has",
    "to": 231
  }, {
    "from": 227,
    "label": "has",
    "to": 232
  }, {
    "from": 233,
    "label": "has",
    "to": 234
  }, {
    "from": 233,
    "label": "has",
    "to": 235
  }, {
    "from": 233,
    "label": "has",
    "to": 236
  }, {
    "from": 233,
    "label": "has",
    "to": 237
  }, {
    "from": 233,
    "label": "has",
    "to": 238
  }, {
    "from": 239,
    "label": "has",
    "to": 240
  }, {
    "from": 239,
    "label": "has",
    "to": 241
  }, {
    "from": 239,
    "label": "has",
    "to": 242
  }, {
    "from": 239,
    "label": "has",
    "to": 243
  }, {
    "from": 239,
    "label": "has",
    "to": 244
  }, {
    "from": 239,
    "label": "has",
    "to": 245
  }, {
    "from": 239,
    "label": "has",
    "to": 246
  }, {
    "from": 239,
    "label": "has",
    "to": 247
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 250,
    "label": "has",
    "to": 252
  }, {
    "from": 250,
    "label": "has",
    "to": 253
  }, {
    "from": 250,
    "label": "has",
    "to": 254
  }, {
    "from": 250,
    "label": "has",
    "to": 255
  }, {
    "from": 257,
    "label": "has",
    "to": 258
  }, {
    "from": 259,
    "label": "has",
    "to": 258
  }, {
    "from": 261,
    "label": "has",
    "to": 71
  }, {
    "from": 262,
    "label": "has",
    "to": 71
  }, {
    "from": 263,
    "label": "has",
    "to": 264
  }, {
    "from": 263,
    "label": "has",
    "to": 265
  }, {
    "from": 265,
    "label": "has",
    "to": 258
  }, {
    "from": 263,
    "label": "has",
    "to": 266
  }, {
    "from": 266,
    "label": "has",
    "to": 258
  }, {
    "from": 263,
    "label": "has",
    "to": 267
  }, {
    "from": 263,
    "label": "has",
    "to": 268
  }, {
    "from": 268,
    "label": "has",
    "to": 71
  }, {
    "from": 263,
    "label": "has",
    "to": 269
  }, {
    "from": 269,
    "label": "has",
    "to": 71
  }, {
    "from": 263,
    "label": "has",
    "to": 270
  }, {
    "from": 271,
    "label": "has",
    "to": 272
  }, {
    "from": 271,
    "label": "has",
    "to": 273
  }, {
    "from": 271,
    "label": "has",
    "to": 274
  }, {
    "from": 275,
    "label": "has",
    "to": 6
  }, {
    "from": 276,
    "label": "has",
    "to": 277
  }, {
    "from": 277,
    "label": "has",
    "to": 6
  }, {
    "from": 276,
    "label": "has",
    "to": 278
  }, {
    "from": 276,
    "label": "has",
    "to": 279
  }, {
    "from": 276,
    "label": "has",
    "to": 280
  }, {
    "from": 276,
    "label": "has",
    "to": 281
  }, {
    "from": 276,
    "label": "has",
    "to": 282
  }, {
    "from": 276,
    "label": "has",
    "to": 283
  }, {
    "from": 276,
    "label": "has",
    "to": 284
  }, {
    "from": 276,
    "label": "has",
    "to": 285
  }, {
    "from": 276,
    "label": "has",
    "to": 286
  }, {
    "from": 276,
    "label": "has",
    "to": 287
  }, {
    "from": 276,
    "label": "has",
    "to": 288
  }, {
    "from": 289,
    "label": "has",
    "to": 290
  }, {
    "from": 290,
    "label": "has",
    "to": 15
  }, {
    "from": 290,
    "label": "has",
    "to": 16
  }, {
    "from": 290,
    "label": "has",
    "to": 17
  }, {
    "from": 290,
    "label": "has",
    "to": 18
  }, {
    "from": 290,
    "label": "has",
    "to": 5
  }, {
    "from": 290,
    "label": "has",
    "to": 6
  }, {
    "from": 290,
    "label": "has",
    "to": 19
  }, {
    "from": 290,
    "label": "has",
    "to": 6
  }, {
    "from": 289,
    "label": "has",
    "to": 291
  }, {
    "from": 291,
    "label": "has",
    "to": 22
  }, {
    "from": 291,
    "label": "has",
    "to": 5
  }, {
    "from": 291,
    "label": "has",
    "to": 6
  }, {
    "from": 291,
    "label": "has",
    "to": 19
  }, {
    "from": 291,
    "label": "has",
    "to": 6
  }, {
    "from": 289,
    "label": "has",
    "to": 292
  }, {
    "from": 292,
    "label": "has",
    "to": 130
  }, {
    "from": 292,
    "label": "has",
    "to": 131
  }, {
    "from": 292,
    "label": "has",
    "to": 132
  }, {
    "from": 292,
    "label": "has",
    "to": 133
  }, {
    "from": 289,
    "label": "has",
    "to": 293
  }, {
    "from": 293,
    "label": "has",
    "to": 136
  }, {
    "from": 293,
    "label": "has",
    "to": 137
  }, {
    "from": 293,
    "label": "has",
    "to": 138
  }, {
    "from": 293,
    "label": "has",
    "to": 139
  }, {
    "from": 289,
    "label": "has",
    "to": 294
  }, {
    "from": 294,
    "label": "has",
    "to": 142
  }, {
    "from": 294,
    "label": "has",
    "to": 143
  }, {
    "from": 294,
    "label": "has",
    "to": 144
  }, {
    "from": 294,
    "label": "has",
    "to": 145
  }, {
    "from": 289,
    "label": "has",
    "to": 295
  }, {
    "from": 295,
    "label": "has",
    "to": 148
  }, {
    "from": 295,
    "label": "has",
    "to": 149
  }, {
    "from": 295,
    "label": "has",
    "to": 150
  }, {
    "from": 295,
    "label": "has",
    "to": 151
  }, {
    "from": 289,
    "label": "has",
    "to": 296
  }, {
    "from": 296,
    "label": "has",
    "to": 157
  }, {
    "from": 296,
    "label": "has",
    "to": 158
  }, {
    "from": 296,
    "label": "has",
    "to": 159
  }, {
    "from": 296,
    "label": "has",
    "to": 160
  }, {
    "from": 296,
    "label": "has",
    "to": 161
  }, {
    "from": 296,
    "label": "has",
    "to": 162
  }, {
    "from": 296,
    "label": "has",
    "to": 163
  }, {
    "from": 296,
    "label": "has",
    "to": 164
  }, {
    "from": 296,
    "label": "has",
    "to": 165
  }, {
    "from": 296,
    "label": "has",
    "to": 166
  }, {
    "from": 296,
    "label": "has",
    "to": 167
  }, {
    "from": 296,
    "label": "has",
    "to": 168
  }, {
    "from": 296,
    "label": "has",
    "to": 169
  }, {
    "from": 296,
    "label": "has",
    "to": 170
  }, {
    "from": 296,
    "label": "has",
    "to": 171
  }, {
    "from": 296,
    "label": "has",
    "to": 172
  }, {
    "from": 296,
    "label": "has",
    "to": 173
  }, {
    "from": 296,
    "label": "has",
    "to": 174
  }, {
    "from": 296,
    "label": "has",
    "to": 175
  }, {
    "from": 296,
    "label": "has",
    "to": 176
  }, {
    "from": 296,
    "label": "has",
    "to": 177
  }, {
    "from": 296,
    "label": "has",
    "to": 178
  }, {
    "from": 296,
    "label": "has",
    "to": 179
  }, {
    "from": 296,
    "label": "has",
    "to": 180
  }, {
    "from": 296,
    "label": "has",
    "to": 181
  }, {
    "from": 296,
    "label": "has",
    "to": 182
  }, {
    "from": 296,
    "label": "has",
    "to": 183
  }, {
    "from": 296,
    "label": "has",
    "to": 184
  }, {
    "from": 296,
    "label": "has",
    "to": 185
  }, {
    "from": 296,
    "label": "has",
    "to": 186
  }, {
    "from": 296,
    "label": "has",
    "to": 187
  }, {
    "from": 296,
    "label": "has",
    "to": 188
  }, {
    "from": 296,
    "label": "has",
    "to": 189
  }, {
    "from": 289,
    "label": "has",
    "to": 297
  }, {
    "from": 297,
    "label": "has",
    "to": 192
  }, {
    "from": 297,
    "label": "has",
    "to": 193
  }, {
    "from": 297,
    "label": "has",
    "to": 194
  }, {
    "from": 297,
    "label": "has",
    "to": 195
  }, {
    "from": 289,
    "label": "has",
    "to": 298
  }, {
    "from": 298,
    "label": "has",
    "to": 198
  }, {
    "from": 298,
    "label": "has",
    "to": 199
  }, {
    "from": 298,
    "label": "has",
    "to": 200
  }, {
    "from": 298,
    "label": "has",
    "to": 201
  }, {
    "from": 289,
    "label": "has",
    "to": 299
  }, {
    "from": 299,
    "label": "has",
    "to": 204
  }, {
    "from": 299,
    "label": "has",
    "to": 205
  }, {
    "from": 299,
    "label": "has",
    "to": 206
  }, {
    "from": 299,
    "label": "has",
    "to": 207
  }, {
    "from": 289,
    "label": "has",
    "to": 300
  }, {
    "from": 300,
    "label": "has",
    "to": 210
  }, {
    "from": 300,
    "label": "has",
    "to": 211
  }, {
    "from": 300,
    "label": "has",
    "to": 212
  }, {
    "from": 300,
    "label": "has",
    "to": 213
  }, {
    "from": 289,
    "label": "has",
    "to": 301
  }, {
    "from": 301,
    "label": "has",
    "to": 216
  }, {
    "from": 301,
    "label": "has",
    "to": 217
  }, {
    "from": 301,
    "label": "has",
    "to": 218
  }, {
    "from": 301,
    "label": "has",
    "to": 219
  }, {
    "from": 289,
    "label": "has",
    "to": 302
  }, {
    "from": 302,
    "label": "has",
    "to": 222
  }, {
    "from": 302,
    "label": "has",
    "to": 223
  }, {
    "from": 302,
    "label": "has",
    "to": 224
  }, {
    "from": 302,
    "label": "has",
    "to": 225
  }, {
    "from": 289,
    "label": "has",
    "to": 303
  }, {
    "from": 303,
    "label": "has",
    "to": 228
  }, {
    "from": 303,
    "label": "has",
    "to": 229
  }, {
    "from": 303,
    "label": "has",
    "to": 230
  }, {
    "from": 303,
    "label": "has",
    "to": 231
  }, {
    "from": 289,
    "label": "has",
    "to": 304
  }, {
    "from": 304,
    "label": "has",
    "to": 234
  }, {
    "from": 304,
    "label": "has",
    "to": 235
  }, {
    "from": 304,
    "label": "has",
    "to": 236
  }, {
    "from": 304,
    "label": "has",
    "to": 237
  }, {
    "from": 289,
    "label": "has",
    "to": 305
  }, {
    "from": 305,
    "label": "has",
    "to": 240
  }, {
    "from": 305,
    "label": "has",
    "to": 241
  }, {
    "from": 305,
    "label": "has",
    "to": 242
  }, {
    "from": 305,
    "label": "has",
    "to": 243
  }, {
    "from": 305,
    "label": "has",
    "to": 244
  }, {
    "from": 305,
    "label": "has",
    "to": 245
  }, {
    "from": 305,
    "label": "has",
    "to": 246
  }, {
    "from": 289,
    "label": "has",
    "to": 306
  }, {
    "from": 306,
    "label": "has",
    "to": 251
  }, {
    "from": 306,
    "label": "has",
    "to": 252
  }, {
    "from": 306,
    "label": "has",
    "to": 253
  }, {
    "from": 306,
    "label": "has",
    "to": 254
  }, {
    "from": 289,
    "label": "has",
    "to": 307
  }, {
    "from": 307,
    "label": "has",
    "to": 264
  }, {
    "from": 307,
    "label": "has",
    "to": 265
  }, {
    "from": 265,
    "label": "has",
    "to": 258
  }, {
    "from": 307,
    "label": "has",
    "to": 266
  }, {
    "from": 266,
    "label": "has",
    "to": 258
  }, {
    "from": 307,
    "label": "has",
    "to": 267
  }, {
    "from": 307,
    "label": "has",
    "to": 268
  }, {
    "from": 268,
    "label": "has",
    "to": 71
  }, {
    "from": 307,
    "label": "has",
    "to": 269
  }, {
    "from": 269,
    "label": "has",
    "to": 71
  }, {
    "from": 289,
    "label": "has",
    "to": 308
  }, {
    "from": 308,
    "label": "has",
    "to": 272
  }, {
    "from": 308,
    "label": "has",
    "to": 273
  }, {
    "from": 289,
    "label": "has",
    "to": 309
  }, {
    "from": 309,
    "label": "has",
    "to": 277
  }, {
    "from": 277,
    "label": "has",
    "to": 6
  }, {
    "from": 309,
    "label": "has",
    "to": 278
  }, {
    "from": 309,
    "label": "has",
    "to": 279
  }, {
    "from": 309,
    "label": "has",
    "to": 280
  }, {
    "from": 309,
    "label": "has",
    "to": 281
  }, {
    "from": 309,
    "label": "has",
    "to": 282
  }, {
    "from": 309,
    "label": "has",
    "to": 283
  }, {
    "from": 309,
    "label": "has",
    "to": 284
  }, {
    "from": 309,
    "label": "has",
    "to": 285
  }, {
    "from": 309,
    "label": "has",
    "to": 286
  }, {
    "from": 309,
    "label": "has",
    "to": 287
  }, {
    "from": 289,
    "label": "has",
    "to": 310
  }, {
    "from": 311,
    "label": "has",
    "to": 6
  }, {
    "from": 312,
    "label": "has",
    "to": 313
  }, {
    "from": 313,
    "label": "has",
    "to": 314
  }, {
    "from": 313,
    "label": "has",
    "to": 315
  }, {
    "from": 312,
    "label": "has",
    "to": 316
  }, {
    "from": 317,
    "label": "has",
    "to": 318
  }, {
    "from": 317,
    "label": "has",
    "to": 319
  }, {
    "from": 320,
    "label": "has",
    "to": 321
  }, {
    "from": 320,
    "label": "has",
    "to": 322
  }, {
    "from": 320,
    "label": "has",
    "to": 323
  }, {
    "from": 320,
    "label": "has",
    "to": 324
  }, {
    "from": 320,
    "label": "has",
    "to": 325
  }, {
    "from": 320,
    "label": "has",
    "to": 326
  }, {
    "from": 320,
    "label": "has",
    "to": 327
  }, {
    "from": 328,
    "label": "has",
    "to": 329
  }, {
    "from": 328,
    "label": "has",
    "to": 330
  }, {
    "from": 328,
    "label": "has",
    "to": 331
  }, {
    "from": 328,
    "label": "has",
    "to": 332
  }, {
    "from": 328,
    "label": "has",
    "to": 333
  }, {
    "from": 334,
    "label": "has",
    "to": 335
  }, {
    "from": 334,
    "label": "has",
    "to": 336
  }, {
    "from": 334,
    "label": "has",
    "to": 337
  }, {
    "from": 334,
    "label": "has",
    "to": 338
  }, {
    "from": 334,
    "label": "has",
    "to": 339
  }, {
    "from": 340,
    "label": "has",
    "to": 341
  }, {
    "from": 340,
    "label": "has",
    "to": 342
  }, {
    "from": 340,
    "label": "has",
    "to": 343
  }, {
    "from": 340,
    "label": "has",
    "to": 344
  }, {
    "from": 340,
    "label": "has",
    "to": 345
  }, {
    "from": 340,
    "label": "has",
    "to": 346
  }, {
    "from": 347,
    "label": "has",
    "to": 341
  }, {
    "from": 347,
    "label": "has",
    "to": 348
  }, {
    "from": 347,
    "label": "has",
    "to": 349
  }, {
    "from": 347,
    "label": "has",
    "to": 350
  }, {
    "from": 347,
    "label": "has",
    "to": 351
  }, {
    "from": 347,
    "label": "has",
    "to": 352
  }, {
    "from": 353,
    "label": "has",
    "to": 341
  }, {
    "from": 353,
    "label": "has",
    "to": 354
  }, {
    "from": 353,
    "label": "has",
    "to": 355
  }, {
    "from": 353,
    "label": "has",
    "to": 356
  }, {
    "from": 353,
    "label": "has",
    "to": 357
  }, {
    "from": 353,
    "label": "has",
    "to": 358
  }, {
    "from": 359,
    "label": "has",
    "to": 360
  }, {
    "from": 359,
    "label": "has",
    "to": 361
  }, {
    "from": 359,
    "label": "has",
    "to": 362
  }, {
    "from": 359,
    "label": "has",
    "to": 363
  }, {
    "from": 359,
    "label": "has",
    "to": 364
  }, {
    "from": 359,
    "label": "has",
    "to": 365
  }, {
    "from": 359,
    "label": "has",
    "to": 366
  }, {
    "from": 367,
    "label": "has",
    "to": 341
  }, {
    "from": 367,
    "label": "has",
    "to": 368
  }, {
    "from": 367,
    "label": "has",
    "to": 369
  }, {
    "from": 367,
    "label": "has",
    "to": 370
  }, {
    "from": 367,
    "label": "has",
    "to": 371
  }, {
    "from": 367,
    "label": "has",
    "to": 372
  }, {
    "from": 373,
    "label": "has",
    "to": 341
  }, {
    "from": 373,
    "label": "has",
    "to": 374
  }, {
    "from": 373,
    "label": "has",
    "to": 375
  }, {
    "from": 373,
    "label": "has",
    "to": 376
  }, {
    "from": 373,
    "label": "has",
    "to": 377
  }, {
    "from": 373,
    "label": "has",
    "to": 378
  }, {
    "from": 379,
    "label": "has",
    "to": 6
  }, {
    "from": 380,
    "label": "has",
    "to": 277
  }, {
    "from": 277,
    "label": "has",
    "to": 6
  }, {
    "from": 380,
    "label": "has",
    "to": 381
  }, {
    "from": 380,
    "label": "has",
    "to": 382
  }, {
    "from": 380,
    "label": "has",
    "to": 383
  }, {
    "from": 380,
    "label": "has",
    "to": 384
  }, {
    "from": 380,
    "label": "has",
    "to": 385
  }, {
    "from": 380,
    "label": "has",
    "to": 386
  }, {
    "from": 380,
    "label": "has",
    "to": 387
  }, {
    "from": 380,
    "label": "has",
    "to": 388
  }, {
    "from": 380,
    "label": "has",
    "to": 389
  }, {
    "from": 380,
    "label": "has",
    "to": 390
  }, {
    "from": 380,
    "label": "has",
    "to": 391
  }, {
    "from": 392,
    "label": "has",
    "to": 393
  }, {
    "from": 393,
    "label": "has",
    "to": 6
  }, {
    "from": 392,
    "label": "has",
    "to": 394
  }, {
    "from": 394,
    "label": "has",
    "to": 25
  }, {
    "from": 394,
    "label": "has",
    "to": 26
  }, {
    "from": 394,
    "label": "has",
    "to": 5
  }, {
    "from": 394,
    "label": "has",
    "to": 6
  }, {
    "from": 394,
    "label": "has",
    "to": 19
  }, {
    "from": 394,
    "label": "has",
    "to": 6
  }, {
    "from": 392,
    "label": "has",
    "to": 395
  }, {
    "from": 395,
    "label": "has",
    "to": 25
  }, {
    "from": 395,
    "label": "has",
    "to": 29
  }, {
    "from": 395,
    "label": "has",
    "to": 5
  }, {
    "from": 395,
    "label": "has",
    "to": 6
  }, {
    "from": 395,
    "label": "has",
    "to": 19
  }, {
    "from": 395,
    "label": "has",
    "to": 6
  }, {
    "from": 392,
    "label": "has",
    "to": 396
  }, {
    "from": 396,
    "label": "has",
    "to": 313
  }, {
    "from": 313,
    "label": "has",
    "to": 314
  }, {
    "from": 313,
    "label": "has",
    "to": 315
  }, {
    "from": 392,
    "label": "has",
    "to": 397
  }, {
    "from": 397,
    "label": "has",
    "to": 318
  }, {
    "from": 392,
    "label": "has",
    "to": 398
  }, {
    "from": 398,
    "label": "has",
    "to": 321
  }, {
    "from": 398,
    "label": "has",
    "to": 322
  }, {
    "from": 398,
    "label": "has",
    "to": 323
  }, {
    "from": 398,
    "label": "has",
    "to": 324
  }, {
    "from": 398,
    "label": "has",
    "to": 325
  }, {
    "from": 398,
    "label": "has",
    "to": 326
  }, {
    "from": 392,
    "label": "has",
    "to": 399
  }, {
    "from": 399,
    "label": "has",
    "to": 329
  }, {
    "from": 399,
    "label": "has",
    "to": 330
  }, {
    "from": 399,
    "label": "has",
    "to": 331
  }, {
    "from": 399,
    "label": "has",
    "to": 332
  }, {
    "from": 392,
    "label": "has",
    "to": 400
  }, {
    "from": 400,
    "label": "has",
    "to": 335
  }, {
    "from": 400,
    "label": "has",
    "to": 336
  }, {
    "from": 400,
    "label": "has",
    "to": 337
  }, {
    "from": 400,
    "label": "has",
    "to": 338
  }, {
    "from": 392,
    "label": "has",
    "to": 401
  }, {
    "from": 401,
    "label": "has",
    "to": 341
  }, {
    "from": 401,
    "label": "has",
    "to": 342
  }, {
    "from": 401,
    "label": "has",
    "to": 343
  }, {
    "from": 401,
    "label": "has",
    "to": 344
  }, {
    "from": 401,
    "label": "has",
    "to": 345
  }, {
    "from": 392,
    "label": "has",
    "to": 402
  }, {
    "from": 402,
    "label": "has",
    "to": 341
  }, {
    "from": 402,
    "label": "has",
    "to": 348
  }, {
    "from": 402,
    "label": "has",
    "to": 349
  }, {
    "from": 402,
    "label": "has",
    "to": 350
  }, {
    "from": 402,
    "label": "has",
    "to": 351
  }, {
    "from": 392,
    "label": "has",
    "to": 403
  }, {
    "from": 403,
    "label": "has",
    "to": 341
  }, {
    "from": 403,
    "label": "has",
    "to": 354
  }, {
    "from": 403,
    "label": "has",
    "to": 355
  }, {
    "from": 403,
    "label": "has",
    "to": 356
  }, {
    "from": 403,
    "label": "has",
    "to": 357
  }, {
    "from": 392,
    "label": "has",
    "to": 404
  }, {
    "from": 404,
    "label": "has",
    "to": 360
  }, {
    "from": 404,
    "label": "has",
    "to": 361
  }, {
    "from": 404,
    "label": "has",
    "to": 362
  }, {
    "from": 404,
    "label": "has",
    "to": 363
  }, {
    "from": 404,
    "label": "has",
    "to": 364
  }, {
    "from": 404,
    "label": "has",
    "to": 365
  }, {
    "from": 392,
    "label": "has",
    "to": 405
  }, {
    "from": 405,
    "label": "has",
    "to": 341
  }, {
    "from": 405,
    "label": "has",
    "to": 368
  }, {
    "from": 405,
    "label": "has",
    "to": 369
  }, {
    "from": 405,
    "label": "has",
    "to": 370
  }, {
    "from": 405,
    "label": "has",
    "to": 371
  }, {
    "from": 392,
    "label": "has",
    "to": 406
  }, {
    "from": 406,
    "label": "has",
    "to": 341
  }, {
    "from": 406,
    "label": "has",
    "to": 374
  }, {
    "from": 406,
    "label": "has",
    "to": 375
  }, {
    "from": 406,
    "label": "has",
    "to": 376
  }, {
    "from": 406,
    "label": "has",
    "to": 377
  }, {
    "from": 392,
    "label": "has",
    "to": 407
  }, {
    "from": 407,
    "label": "has",
    "to": 277
  }, {
    "from": 277,
    "label": "has",
    "to": 6
  }, {
    "from": 407,
    "label": "has",
    "to": 381
  }, {
    "from": 407,
    "label": "has",
    "to": 382
  }, {
    "from": 407,
    "label": "has",
    "to": 383
  }, {
    "from": 407,
    "label": "has",
    "to": 384
  }, {
    "from": 407,
    "label": "has",
    "to": 385
  }, {
    "from": 407,
    "label": "has",
    "to": 386
  }, {
    "from": 407,
    "label": "has",
    "to": 387
  }, {
    "from": 407,
    "label": "has",
    "to": 388
  }, {
    "from": 407,
    "label": "has",
    "to": 389
  }, {
    "from": 407,
    "label": "has",
    "to": 390
  }, {
    "from": 392,
    "label": "has",
    "to": 408
  }, {
    "from": 409,
    "label": "calls",
    "to": 410
  }, {
    "from": 409,
    "label": "calls",
    "to": 410
  }, {
    "from": 409,
    "label": "calls",
    "to": 410
  }, {
    "from": 409,
    "label": "calls",
    "to": 410
  }, {
    "from": 409,
    "label": "calls",
    "to": 410
  }, {
    "from": 409,
    "label": "calls",
    "to": 429
  }, {
    "from": 409,
    "label": "calls",
    "to": 411
  }, {
    "from": 409,
    "label": "calls",
    "to": 411
  }, {
    "from": 409,
    "label": "calls",
    "to": 411
  }, {
    "from": 409,
    "label": "calls",
    "to": 411
  }, {
    "from": 409,
    "label": "calls",
    "to": 411
  }, {
    "from": 409,
    "label": "calls",
    "to": 411
  }, {
    "from": 409,
    "label": "calls",
    "to": 411
  }, {
    "from": 409,
    "label": "calls",
    "to": 423
  }, {
    "from": 409,
    "label": "calls",
    "to": 423
  }, {
    "from": 409,
    "label": "calls",
    "to": 426
  }, {
    "from": 409,
    "label": "calls",
    "to": 426
  }, {
    "from": 409,
    "label": "calls",
    "to": 426
  }, {
    "from": 409,
    "label": "calls",
    "to": 426
  }, {
    "from": 409,
    "label": "calls",
    "to": 426
  }, {
    "from": 409,
    "label": "calls",
    "to": 426
  }, {
    "from": 409,
    "label": "calls",
    "to": 426
  }, {
    "from": 409,
    "label": "calls",
    "to": 426
  }, {
    "from": 409,
    "label": "calls",
    "to": 426
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 14
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 424
  }, {
    "from": 409,
    "label": "calls",
    "to": 422
  }, {
    "from": 409,
    "label": "calls",
    "to": 422
  }, {
    "from": 409,
    "label": "calls",
    "to": 422
  }, {
    "from": 409,
    "label": "calls",
    "to": 422
  }, {
    "from": 409,
    "label": "calls",
    "to": 422
  }, {
    "from": 409,
    "label": "calls",
    "to": 422
  }, {
    "from": 409,
    "label": "calls",
    "to": 422
  }, {
    "from": 409,
    "label": "calls",
    "to": 422
  }, {
    "from": 409,
    "label": "calls",
    "to": 422
  }, {
    "from": 409,
    "label": "calls",
    "to": 422
  }, {
    "from": 409,
    "label": "calls",
    "to": 422
  }, {
    "from": 409,
    "label": "calls",
    "to": 422
  }, {
    "from": 409,
    "label": "calls",
    "to": 422
  }, {
    "from": 409,
    "label": "calls",
    "to": 422
  }, {
    "from": 409,
    "label": "calls",
    "to": 422
  }, {
    "from": 409,
    "label": "calls",
    "to": 422
  }, {
    "from": 409,
    "label": "calls",
    "to": 422
  }, {
    "from": 409,
    "label": "calls",
    "to": 422
  }, {
    "from": 409,
    "label": "calls",
    "to": 422
  }, {
    "from": 409,
    "label": "calls",
    "to": 422
  }, {
    "from": 409,
    "label": "calls",
    "to": 422
  }, {
    "from": 409,
    "label": "calls",
    "to": 422
  }, {
    "from": 409,
    "label": "calls",
    "to": 422
  }, {
    "from": 409,
    "label": "calls",
    "to": 422
  }, {
    "from": 409,
    "label": "calls",
    "to": 422
  }, {
    "from": 409,
    "label": "calls",
    "to": 422
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 21
  }, {
    "from": 409,
    "label": "calls",
    "to": 412
  }, {
    "from": 409,
    "label": "calls",
    "to": 425
  }, {
    "from": 409,
    "label": "calls",
    "to": 415
  }, {
    "from": 409,
    "label": "calls",
    "to": 420
  }, {
    "from": 409,
    "label": "calls",
    "to": 420
  }, {
    "from": 409,
    "label": "calls",
    "to": 420
  }, {
    "from": 409,
    "label": "calls",
    "to": 413
  }, {
    "from": 409,
    "label": "calls",
    "to": 416
  }, {
    "from": 409,
    "label": "calls",
    "to": 416
  }, {
    "from": 409,
    "label": "calls",
    "to": 416
  }, {
    "from": 409,
    "label": "calls",
    "to": 416
  }, {
    "from": 409,
    "label": "calls",
    "to": 416
  }, {
    "from": 409,
    "label": "calls",
    "to": 416
  }, {
    "from": 409,
    "label": "calls",
    "to": 416
  }, {
    "from": 409,
    "label": "calls",
    "to": 416
  }, {
    "from": 409,
    "label": "calls",
    "to": 416
  }, {
    "from": 409,
    "label": "calls",
    "to": 416
  }, {
    "from": 409,
    "label": "calls",
    "to": 416
  }, {
    "from": 409,
    "label": "calls",
    "to": 416
  }, {
    "from": 409,
    "label": "calls",
    "to": 416
  }, {
    "from": 409,
    "label": "calls",
    "to": 416
  }, {
    "from": 409,
    "label": "calls",
    "to": 416
  }, {
    "from": 409,
    "label": "calls",
    "to": 416
  }, {
    "from": 409,
    "label": "calls",
    "to": 416
  }, {
    "from": 409,
    "label": "calls",
    "to": 416
  }, {
    "from": 409,
    "label": "calls",
    "to": 416
  }, {
    "from": 409,
    "label": "calls",
    "to": 416
  }, {
    "from": 409,
    "label": "calls",
    "to": 416
  }, {
    "from": 409,
    "label": "calls",
    "to": 416
  }, {
    "from": 409,
    "label": "calls",
    "to": 416
  }, {
    "from": 409,
    "label": "calls",
    "to": 416
  }, {
    "from": 409,
    "label": "calls",
    "to": 416
  }, {
    "from": 409,
    "label": "calls",
    "to": 416
  }, {
    "from": 409,
    "label": "calls",
    "to": 416
  }, {
    "from": 409,
    "label": "calls",
    "to": 416
  }, {
    "from": 409,
    "label": "calls",
    "to": 416
  }, {
    "from": 409,
    "label": "calls",
    "to": 416
  }, {
    "from": 409,
    "label": "calls",
    "to": 416
  }, {
    "from": 409,
    "label": "calls",
    "to": 416
  }, {
    "from": 409,
    "label": "calls",
    "to": 416
  }, {
    "from": 409,
    "label": "calls",
    "to": 416
  }, {
    "from": 409,
    "label": "calls",
    "to": 416
  }, {
    "from": 409,
    "label": "calls",
    "to": 416
  }, {
    "from": 409,
    "label": "calls",
    "to": 416
  }, {
    "from": 409,
    "label": "calls",
    "to": 416
  }, {
    "from": 409,
    "label": "calls",
    "to": 416
  }, {
    "from": 409,
    "label": "calls",
    "to": 414
  }, {
    "from": 409,
    "label": "calls",
    "to": 414
  }, {
    "from": 409,
    "label": "calls",
    "to": 414
  }, {
    "from": 409,
    "label": "calls",
    "to": 414
  }, {
    "from": 409,
    "label": "calls",
    "to": 414
  }, {
    "from": 409,
    "label": "calls",
    "to": 414
  }, {
    "from": 409,
    "label": "calls",
    "to": 414
  }, {
    "from": 409,
    "label": "calls",
    "to": 427
  }, {
    "from": 409,
    "label": "calls",
    "to": 427
  }, {
    "from": 409,
    "label": "calls",
    "to": 419
  }, {
    "from": 409,
    "label": "calls",
    "to": 419
  }, {
    "from": 409,
    "label": "calls",
    "to": 419
  }, {
    "from": 409,
    "label": "calls",
    "to": 428
  }, {
    "from": 409,
    "label": "calls",
    "to": 417
  }, {
    "from": 409,
    "label": "calls",
    "to": 3
  }, {
    "from": 409,
    "label": "calls",
    "to": 3
  }, {
    "from": 409,
    "label": "calls",
    "to": 3
  }, {
    "from": 409,
    "label": "calls",
    "to": 3
  }, {
    "from": 409,
    "label": "calls",
    "to": 3
  }, {
    "from": 409,
    "label": "calls",
    "to": 3
  }, {
    "from": 409,
    "label": "calls",
    "to": 3
  }, {
    "from": 409,
    "label": "calls",
    "to": 3
  }, {
    "from": 409,
    "label": "calls",
    "to": 3
  }, {
    "from": 409,
    "label": "calls",
    "to": 3
  }, {
    "from": 409,
    "label": "calls",
    "to": 3
  }, {
    "from": 409,
    "label": "calls",
    "to": 418
  }, {
    "from": 409,
    "label": "calls",
    "to": 418
  }, {
    "from": 409,
    "label": "calls",
    "to": 418
  }, {
    "from": 409,
    "label": "calls",
    "to": 418
  }, {
    "from": 409,
    "label": "calls",
    "to": 418
  }, {
    "from": 409,
    "label": "calls",
    "to": 421
  }, {
    "from": 1,
    "label": "contains",
    "to": 409
  }, {
    "from": 409,
    "label": "declares",
    "to": 3
  }, {
    "from": 409,
    "label": "declares",
    "to": 8
  }, {
    "from": 409,
    "label": "declares",
    "to": 11
  }, {
    "from": 409,
    "label": "declares",
    "to": 14
  }, {
    "from": 409,
    "label": "declares",
    "to": 21
  }, {
    "from": 409,
    "label": "declares",
    "to": 24
  }, {
    "from": 409,
    "label": "declares",
    "to": 28
  }, {
    "from": 409,
    "label": "declares",
    "to": 31
  }, {
    "from": 409,
    "label": "declares",
    "to": 38
  }, {
    "from": 409,
    "label": "declares",
    "to": 45
  }, {
    "from": 409,
    "label": "declares",
    "to": 50
  }, {
    "from": 409,
    "label": "declares",
    "to": 51
  }, {
    "from": 409,
    "label": "declares",
    "to": 58
  }, {
    "from": 409,
    "label": "declares",
    "to": 59
  }, {
    "from": 409,
    "label": "declares",
    "to": 64
  }, {
    "from": 409,
    "label": "declares",
    "to": 66
  }, {
    "from": 409,
    "label": "declares",
    "to": 70
  }, {
    "from": 409,
    "label": "declares",
    "to": 72
  }, {
    "from": 409,
    "label": "declares",
    "to": 79
  }, {
    "from": 409,
    "label": "declares",
    "to": 81
  }, {
    "from": 409,
    "label": "declares",
    "to": 87
  }, {
    "from": 409,
    "label": "declares",
    "to": 88
  }, {
    "from": 409,
    "label": "declares",
    "to": 95
  }, {
    "from": 409,
    "label": "declares",
    "to": 96
  }, {
    "from": 409,
    "label": "declares",
    "to": 102
  }, {
    "from": 409,
    "label": "declares",
    "to": 112
  }, {
    "from": 409,
    "label": "declares",
    "to": 117
  }, {
    "from": 409,
    "label": "declares",
    "to": 124
  }, {
    "from": 409,
    "label": "declares",
    "to": 129
  }, {
    "from": 409,
    "label": "declares",
    "to": 135
  }, {
    "from": 409,
    "label": "declares",
    "to": 141
  }, {
    "from": 409,
    "label": "declares",
    "to": 147
  }, {
    "from": 409,
    "label": "declares",
    "to": 153
  }, {
    "from": 409,
    "label": "declares",
    "to": 154
  }, {
    "from": 409,
    "label": "declares",
    "to": 155
  }, {
    "from": 409,
    "label": "declares",
    "to": 156
  }, {
    "from": 409,
    "label": "declares",
    "to": 191
  }, {
    "from": 409,
    "label": "declares",
    "to": 197
  }, {
    "from": 409,
    "label": "declares",
    "to": 203
  }, {
    "from": 409,
    "label": "declares",
    "to": 209
  }, {
    "from": 409,
    "label": "declares",
    "to": 215
  }, {
    "from": 409,
    "label": "declares",
    "to": 221
  }, {
    "from": 409,
    "label": "declares",
    "to": 227
  }, {
    "from": 409,
    "label": "declares",
    "to": 233
  }, {
    "from": 409,
    "label": "declares",
    "to": 239
  }, {
    "from": 409,
    "label": "declares",
    "to": 248
  }, {
    "from": 409,
    "label": "declares",
    "to": 249
  }, {
    "from": 409,
    "label": "declares",
    "to": 250
  }, {
    "from": 409,
    "label": "declares",
    "to": 256
  }, {
    "from": 409,
    "label": "declares",
    "to": 257
  }, {
    "from": 409,
    "label": "declares",
    "to": 259
  }, {
    "from": 409,
    "label": "declares",
    "to": 260
  }, {
    "from": 409,
    "label": "declares",
    "to": 261
  }, {
    "from": 409,
    "label": "declares",
    "to": 262
  }, {
    "from": 409,
    "label": "declares",
    "to": 263
  }, {
    "from": 409,
    "label": "declares",
    "to": 271
  }, {
    "from": 409,
    "label": "declares",
    "to": 275
  }, {
    "from": 409,
    "label": "declares",
    "to": 276
  }, {
    "from": 409,
    "label": "declares",
    "to": 289
  }, {
    "from": 409,
    "label": "declares",
    "to": 311
  }, {
    "from": 409,
    "label": "declares",
    "to": 312
  }, {
    "from": 409,
    "label": "declares",
    "to": 317
  }, {
    "from": 409,
    "label": "declares",
    "to": 320
  }, {
    "from": 409,
    "label": "declares",
    "to": 328
  }, {
    "from": 409,
    "label": "declares",
    "to": 334
  }, {
    "from": 409,
    "label": "declares",
    "to": 340
  }, {
    "from": 409,
    "label": "declares",
    "to": 347
  }, {
    "from": 409,
    "label": "declares",
    "to": 353
  }, {
    "from": 409,
    "label": "declares",
    "to": 359
  }, {
    "from": 409,
    "label": "declares",
    "to": 367
  }, {
    "from": 409,
    "label": "declares",
    "to": 373
  }, {
    "from": 409,
    "label": "declares",
    "to": 379
  }, {
    "from": 409,
    "label": "declares",
    "to": 380
  }, {
    "from": 409,
    "label": "declares",
    "to": 392
  }, {
    "from": 1,
    "label": "contains",
    "to": 430
  }, {
    "from": 1,
    "label": "contains",
    "to": 431
  }, {
    "from": 431,
    "label": "initializes",
    "to": 432
  }, {
    "from": 432,
    "label": "requires",
    "to": 2
  }, {
    "from": 47,
    "label": "hasArgument",
    "to": 31
  }, {
    "from": 48,
    "label": "hasArgument",
    "to": 38
  }, {
    "from": 104,
    "label": "hasArgument",
    "to": 51
  }, {
    "from": 104,
    "label": "hasArgument",
    "to": 50
  }, {
    "from": 104,
    "label": "hasArgument",
    "to": 58
  }, {
    "from": 104,
    "label": "hasArgument",
    "to": 153
  }, {
    "from": 105,
    "label": "hasArgument",
    "to": 59
  }, {
    "from": 105,
    "label": "hasArgument",
    "to": 50
  }, {
    "from": 105,
    "label": "hasArgument",
    "to": 58
  }, {
    "from": 105,
    "label": "hasArgument",
    "to": 153
  }, {
    "from": 106,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 106,
    "label": "hasArgument",
    "to": 66
  }, {
    "from": 107,
    "label": "hasArgument",
    "to": 70
  }, {
    "from": 107,
    "label": "hasArgument",
    "to": 72
  }, {
    "from": 107,
    "label": "hasArgument",
    "to": 87
  }, {
    "from": 107,
    "label": "hasArgument",
    "to": 261
  }, {
    "from": 107,
    "label": "hasArgument",
    "to": 262
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 79
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 81
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 95
  }, {
    "from": 109,
    "label": "hasArgument",
    "to": 70
  }, {
    "from": 109,
    "label": "hasArgument",
    "to": 87
  }, {
    "from": 109,
    "label": "hasArgument",
    "to": 88
  }, {
    "from": 109,
    "label": "hasArgument",
    "to": 261
  }, {
    "from": 109,
    "label": "hasArgument",
    "to": 262
  }, {
    "from": 110,
    "label": "hasArgument",
    "to": 79
  }, {
    "from": 110,
    "label": "hasArgument",
    "to": 95
  }, {
    "from": 110,
    "label": "hasArgument",
    "to": 96
  }, {
    "from": 126,
    "label": "hasArgument",
    "to": 112
  }, {
    "from": 127,
    "label": "hasArgument",
    "to": 117
  }, {
    "from": 180,
    "label": "hasArgument",
    "to": 154
  }, {
    "from": 180,
    "label": "hasArgument",
    "to": 155
  }, {
    "from": 180,
    "label": "hasArgument",
    "to": 248
  }, {
    "from": 180,
    "label": "hasArgument",
    "to": 249
  }, {
    "from": 180,
    "label": "hasArgument",
    "to": 256
  }, {
    "from": 180,
    "label": "hasArgument",
    "to": 260
  }, {
    "from": 188,
    "label": "hasArgument",
    "to": 154
  }, {
    "from": 188,
    "label": "hasArgument",
    "to": 155
  }, {
    "from": 188,
    "label": "hasArgument",
    "to": 248
  }, {
    "from": 188,
    "label": "hasArgument",
    "to": 249
  }, {
    "from": 188,
    "label": "hasArgument",
    "to": 256
  }, {
    "from": 188,
    "label": "hasArgument",
    "to": 260
  }, {
    "from": 251,
    "label": "hasArgument",
    "to": 154
  }, {
    "from": 251,
    "label": "hasArgument",
    "to": 155
  }, {
    "from": 251,
    "label": "hasArgument",
    "to": 248
  }, {
    "from": 251,
    "label": "hasArgument",
    "to": 249
  }, {
    "from": 251,
    "label": "hasArgument",
    "to": 256
  }, {
    "from": 251,
    "label": "hasArgument",
    "to": 260
  }, {
    "from": 252,
    "label": "hasArgument",
    "to": 154
  }, {
    "from": 252,
    "label": "hasArgument",
    "to": 155
  }, {
    "from": 252,
    "label": "hasArgument",
    "to": 248
  }, {
    "from": 252,
    "label": "hasArgument",
    "to": 249
  }, {
    "from": 252,
    "label": "hasArgument",
    "to": 256
  }, {
    "from": 252,
    "label": "hasArgument",
    "to": 260
  }, {
    "from": 264,
    "label": "hasArgument",
    "to": 154
  }, {
    "from": 264,
    "label": "hasArgument",
    "to": 155
  }, {
    "from": 264,
    "label": "hasArgument",
    "to": 248
  }, {
    "from": 264,
    "label": "hasArgument",
    "to": 249
  }, {
    "from": 264,
    "label": "hasArgument",
    "to": 256
  }, {
    "from": 264,
    "label": "hasArgument",
    "to": 260
  }, {
    "from": 265,
    "label": "hasArgument",
    "to": 257
  }, {
    "from": 265,
    "label": "hasArgument",
    "to": 259
  }, {
    "from": 266,
    "label": "hasArgument",
    "to": 257
  }, {
    "from": 266,
    "label": "hasArgument",
    "to": 259
  }, {
    "from": 267,
    "label": "hasArgument",
    "to": 154
  }, {
    "from": 267,
    "label": "hasArgument",
    "to": 155
  }, {
    "from": 267,
    "label": "hasArgument",
    "to": 248
  }, {
    "from": 267,
    "label": "hasArgument",
    "to": 249
  }, {
    "from": 267,
    "label": "hasArgument",
    "to": 256
  }, {
    "from": 267,
    "label": "hasArgument",
    "to": 260
  }, {
    "from": 268,
    "label": "hasArgument",
    "to": 70
  }, {
    "from": 268,
    "label": "hasArgument",
    "to": 87
  }, {
    "from": 268,
    "label": "hasArgument",
    "to": 261
  }, {
    "from": 268,
    "label": "hasArgument",
    "to": 262
  }, {
    "from": 269,
    "label": "hasArgument",
    "to": 70
  }, {
    "from": 269,
    "label": "hasArgument",
    "to": 87
  }, {
    "from": 269,
    "label": "hasArgument",
    "to": 261
  }, {
    "from": 269,
    "label": "hasArgument",
    "to": 262
  }, {
    "from": 292,
    "label": "hasArgument",
    "to": 129
  }, {
    "from": 293,
    "label": "hasArgument",
    "to": 135
  }, {
    "from": 294,
    "label": "hasArgument",
    "to": 141
  }, {
    "from": 295,
    "label": "hasArgument",
    "to": 147
  }, {
    "from": 296,
    "label": "hasArgument",
    "to": 156
  }, {
    "from": 296,
    "label": "hasArgument",
    "to": 50
  }, {
    "from": 296,
    "label": "hasArgument",
    "to": 58
  }, {
    "from": 296,
    "label": "hasArgument",
    "to": 153
  }, {
    "from": 296,
    "label": "hasArgument",
    "to": 154
  }, {
    "from": 296,
    "label": "hasArgument",
    "to": 155
  }, {
    "from": 296,
    "label": "hasArgument",
    "to": 248
  }, {
    "from": 296,
    "label": "hasArgument",
    "to": 249
  }, {
    "from": 296,
    "label": "hasArgument",
    "to": 256
  }, {
    "from": 296,
    "label": "hasArgument",
    "to": 260
  }, {
    "from": 297,
    "label": "hasArgument",
    "to": 191
  }, {
    "from": 298,
    "label": "hasArgument",
    "to": 197
  }, {
    "from": 299,
    "label": "hasArgument",
    "to": 203
  }, {
    "from": 300,
    "label": "hasArgument",
    "to": 209
  }, {
    "from": 301,
    "label": "hasArgument",
    "to": 215
  }, {
    "from": 302,
    "label": "hasArgument",
    "to": 221
  }, {
    "from": 303,
    "label": "hasArgument",
    "to": 227
  }, {
    "from": 304,
    "label": "hasArgument",
    "to": 233
  }, {
    "from": 305,
    "label": "hasArgument",
    "to": 239
  }, {
    "from": 306,
    "label": "hasArgument",
    "to": 250
  }, {
    "from": 306,
    "label": "hasArgument",
    "to": 154
  }, {
    "from": 306,
    "label": "hasArgument",
    "to": 155
  }, {
    "from": 306,
    "label": "hasArgument",
    "to": 248
  }, {
    "from": 306,
    "label": "hasArgument",
    "to": 249
  }, {
    "from": 306,
    "label": "hasArgument",
    "to": 256
  }, {
    "from": 306,
    "label": "hasArgument",
    "to": 260
  }, {
    "from": 307,
    "label": "hasArgument",
    "to": 70
  }, {
    "from": 307,
    "label": "hasArgument",
    "to": 87
  }, {
    "from": 307,
    "label": "hasArgument",
    "to": 257
  }, {
    "from": 307,
    "label": "hasArgument",
    "to": 259
  }, {
    "from": 307,
    "label": "hasArgument",
    "to": 261
  }, {
    "from": 307,
    "label": "hasArgument",
    "to": 262
  }, {
    "from": 307,
    "label": "hasArgument",
    "to": 263
  }, {
    "from": 307,
    "label": "hasArgument",
    "to": 154
  }, {
    "from": 307,
    "label": "hasArgument",
    "to": 155
  }, {
    "from": 307,
    "label": "hasArgument",
    "to": 248
  }, {
    "from": 307,
    "label": "hasArgument",
    "to": 249
  }, {
    "from": 307,
    "label": "hasArgument",
    "to": 256
  }, {
    "from": 307,
    "label": "hasArgument",
    "to": 260
  }, {
    "from": 308,
    "label": "hasArgument",
    "to": 271
  }, {
    "from": 309,
    "label": "hasArgument",
    "to": 275
  }, {
    "from": 309,
    "label": "hasArgument",
    "to": 276
  }, {
    "from": 309,
    "label": "hasArgument",
    "to": 379
  }, {
    "from": 396,
    "label": "hasArgument",
    "to": 312
  }, {
    "from": 397,
    "label": "hasArgument",
    "to": 317
  }, {
    "from": 398,
    "label": "hasArgument",
    "to": 320
  }, {
    "from": 399,
    "label": "hasArgument",
    "to": 328
  }, {
    "from": 400,
    "label": "hasArgument",
    "to": 334
  }, {
    "from": 401,
    "label": "hasArgument",
    "to": 340
  }, {
    "from": 402,
    "label": "hasArgument",
    "to": 347
  }, {
    "from": 403,
    "label": "hasArgument",
    "to": 353
  }, {
    "from": 404,
    "label": "hasArgument",
    "to": 359
  }, {
    "from": 405,
    "label": "hasArgument",
    "to": 367
  }, {
    "from": 406,
    "label": "hasArgument",
    "to": 373
  }, {
    "from": 407,
    "label": "hasArgument",
    "to": 275
  }, {
    "from": 407,
    "label": "hasArgument",
    "to": 379
  }, {
    "from": 407,
    "label": "hasArgument",
    "to": 380
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "output_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "compatibility",
    "type": "module"
  }, {
    "id": 3,
    "text": "function(...)\r\n    local success, message = pcall(assert.are.equal, ...)\r\n    if message == nil then return nil end\r\n    return tostring(message)\r\n  end",
    "type": "function"
  }, {
    "id": 4,
    "text": "local success, message = pcall(assert.are.equal, ...)",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "if message == nil then return nil end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function(...)\r\n    local success, message = pcall(assert.has_error, ...)\r\n    if message == nil then return nil end\r\n    return tostring(message)\r\n  end",
    "type": "function"
  }, {
    "id": 9,
    "text": "local success, message = pcall(assert.has_error, ...)",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function(...)\r\n    local success, message = pcall(assert.are.same, ...)\r\n    if message == nil then return nil end\r\n    return tostring(message)\r\n  end",
    "type": "function"
  }, {
    "id": 12,
    "text": "local success, message = pcall(assert.are.same, ...)",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function(key, ...)\r\n    local argcnt = select(\"#\", ...)\r\n    local args = {...}\r\n    args[argcnt+1] = key .. \" fails\"\r\n    local success, message = pcall(assert[key], unpack(args, 1, argcnt+1))\r\n    if message == nil then return nil end\r\n    message = tostring(message):gsub(\"\\n.*\", \"\"):gsub(\"^.-:%d+: \", \"\", 1)\r\n    return message\r\n  end",
    "type": "function"
  }, {
    "id": 15,
    "text": "local argcnt = select(\"#\", ...)",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "local args = {...}",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "args[argcnt+1] = key .. \" fails\"",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "local success, message = pcall(assert[key], unpack(args, 1, argcnt+1))",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "message = tostring(message):gsub(\"\\n.*\", \"\"):gsub(\"^.-:%d+: \", \"\", 1)",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function(key, ...)\r\n    local success, message = pcall(assert.message(key .. \" fails\")[key], ...)\r\n    if message == nil then return nil end\r\n    message = tostring(message):gsub(\"\\n.*\", \"\"):gsub(\"^.-:%d+: \", \"\", 1)\r\n    return message\r\n  end",
    "type": "function"
  }, {
    "id": 22,
    "text": "local success, message = pcall(assert.message(key .. \" fails\")[key], ...)",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function(key, args, ...)\r\n      local err = select('#', ...) == 0 and key .. \" failed\" or ...\r\n      local success, message = pcall(assert[ss](test.key, err)[key], unpack(args))\r\n      if message == nil then return nil end\r\n      message = tostring(message):gsub(\"\\n.*\", \"\"):gsub(\"^.-:%d+: \", \"\", 1)\r\n      return message\r\n    end",
    "type": "function"
  }, {
    "id": 25,
    "text": "local err = select('#', ...) == 0 and key .. \" failed\" or ...",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "local success, message = pcall(assert[ss](test.key, err)[key], unpack(args))",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function(key, args, ...)\r\n      local err = select('#', ...) == 0 and key .. \" failed\" or ...\r\n      local success, message = pcall(assert.message(err).spy(test.key)[key], unpack(args))\r\n      if message == nil then return nil end\r\n      message = tostring(message):gsub(\"\\n.*\", \"\"):gsub(\"^.-:%d+: \", \"\", 1)\r\n      return message\r\n    end",
    "type": "function"
  }, {
    "id": 29,
    "text": "local success, message = pcall(assert.message(err).spy(test.key)[key], unpack(args))",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function()\r\n    --assert.are.equal(nil, \"string\")\r\n    local output = getoutput(nil, \"string\")\r\n    local ok = output:find(\"Passed in:\\n%(string%) 'string'\")\r\n    assert(ok, \"Output check 1 failed, comparing nil-string;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n    local ok = output:find(\"Expected:\\n%(nil%)\")\r\n    assert(ok, \"Output check 2 failed, comparing nil-string;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n  end",
    "type": "function"
  }, {
    "id": 32,
    "text": "local output = getoutput(nil, \"string\")",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "local ok = output:find(\"Passed in:\\n%(string%) 'string'\")",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "assert(ok, \"Output check 1 failed, comparing nil-string;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "local ok = output:find(\"Expected:\\n%(nil%)\")",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "assert(ok, \"Output check 2 failed, comparing nil-string;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function()\r\n    --assert.are.equal(\"string\", nil)\r\n    local output = getoutput(\"string\", nil)\r\n    local ok = output:find(\"Passed in:\\n%(nil%)\")\r\n    assert(ok, \"Output check 1 failed, comparing string-nil;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n    local ok = output:find(\"Expected:\\n%(string%) 'string'\")\r\n    assert(ok, \"Output check 2 failed, comparing string-nil;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n  end",
    "type": "function"
  }, {
    "id": 39,
    "text": "local output = getoutput(\"string\", nil)",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "local ok = output:find(\"Passed in:\\n%(nil%)\")",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "assert(ok, \"Output check 1 failed, comparing string-nil;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "local ok = output:find(\"Expected:\\n%(string%) 'string'\")",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "assert(ok, \"Output check 2 failed, comparing string-nil;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function()\r\n  local getoutput = function(...)\r\n    local success, message = pcall(assert.are.equal, ...)\r\n    if message == nil then return nil end\r\n    return tostring(message)\r\n  end\r\n\r\n  it(\"Should compare strings correctly; nil-string\", function()\r\n    --assert.are.equal(nil, \"string\")\r\n    local output = getoutput(nil, \"string\")\r\n    local ok = output:find(\"Passed in:\\n%(string%) 'string'\")\r\n    assert(ok, \"Output check 1 failed, comparing nil-string;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n    local ok = output:find(\"Expected:\\n%(nil%)\")\r\n    assert(ok, \"Output check 2 failed, comparing nil-string;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n  end)\r\n\r\n  it(\"Should compare strings correctly; string-nil\", function()\r\n    --assert.are.equal(\"string\", nil)\r\n    local output = getoutput(\"string\", nil)\r\n    local ok = output:find(\"Passed in:\\n%(nil%)\")\r\n    assert(ok, \"Output check 1 failed, comparing string-nil;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n    local ok = output:find(\"Expected:\\n%(string%) 'string'\")\r\n    assert(ok, \"Output check 2 failed, comparing string-nil;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n  end)\r\n\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "local getoutput = function(...)\r\n    local success, message = pcall(assert.are.equal, ...)\r\n    if message == nil then return nil end\r\n    return tostring(message)\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "it(\"Should compare strings correctly; nil-string\", function()\r\n    --assert.are.equal(nil, \"string\")\r\n    local output = getoutput(nil, \"string\")\r\n    local ok = output:find(\"Passed in:\\n%(string%) 'string'\")\r\n    assert(ok, \"Output check 1 failed, comparing nil-string;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n    local ok = output:find(\"Expected:\\n%(nil%)\")\r\n    assert(ok, \"Output check 2 failed, comparing nil-string;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "it(\"Should compare strings correctly; string-nil\", function()\r\n    --assert.are.equal(\"string\", nil)\r\n    local output = getoutput(\"string\", nil)\r\n    local ok = output:find(\"Passed in:\\n%(nil%)\")\r\n    assert(ok, \"Output check 1 failed, comparing string-nil;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n    local ok = output:find(\"Expected:\\n%(string%) 'string'\")\r\n    assert(ok, \"Output check 2 failed, comparing string-nil;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 51,
    "text": "function()\r\n    --assert.has_error(function() end)\r\n    local output = getoutput(function() end)\r\n    local ok = output:find(\"Caught:\\n%(no error%)\")\r\n    assert(ok, \"Output check 1 failed, comparing noerror-nil;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n    local ok = output:find(\"Expected:\\n%(error%)\")\r\n    assert(ok, \"Output check 2 failed, comparing noerror-nil;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n  end",
    "type": "function"
  }, {
    "id": 52,
    "text": "local output = getoutput(function() end)",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "local ok = output:find(\"Caught:\\n%(no error%)\")",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "assert(ok, \"Output check 1 failed, comparing noerror-nil;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "local ok = output:find(\"Expected:\\n%(error%)\")",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "assert(ok, \"Output check 2 failed, comparing noerror-nil;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 59,
    "text": "function()\r\n    --assert.has_error(function() end, \"string\")\r\n    local output = getoutput(function() end, 'string')\r\n    local ok = output:find(\"Caught:\\n%(no error%)\")\r\n    assert(ok, \"Output check 1 failed, comparing noerror-string;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n    local ok = output:find(\"Expected:\\n%(string%) 'string'\")\r\n    assert(ok, \"Output check 2 failed, comparing noerror-string;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n  end",
    "type": "function"
  }, {
    "id": 60,
    "text": "local output = getoutput(function() end, 'string')",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "assert(ok, \"Output check 1 failed, comparing noerror-string;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "assert(ok, \"Output check 2 failed, comparing noerror-string;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "function() error() end",
    "type": "function"
  }, {
    "id": 65,
    "text": "error()",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "function()\r\n    --assert.has_error(function() error() end, \"string\")\r\n    local output = getoutput(function() error() end, \"string\")\r\n    local ok = output:find(\"Caught:\\n%(nil%)\")\r\n    assert(ok, \"Output check 1 failed, comparing nil-string;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n    local ok = output:find(\"Expected:\\n%(string%) 'string'\")\r\n    assert(ok, \"Output check 2 failed, comparing nil-string;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n  end",
    "type": "function"
  }, {
    "id": 67,
    "text": "local output = getoutput(function() error() end, \"string\")",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "local ok = output:find(\"Caught:\\n%(nil%)\")",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function() error(\"string\") end",
    "type": "function"
  }, {
    "id": 71,
    "text": "error(\"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "function()\r\n    --assert.has_error(function() error(\"string\") end, \"string_\")\r\n    local output = getoutput(function() error(\"string\") end, \"string_\")\r\n    local ok = output:find(\"Caught:\\n%(string%) '.*string'\")\r\n    assert(ok, \"Output check 1 failed, comparing string-string;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n    local ok = output:find(\"Expected:\\n%(string%) 'string_'\")\r\n    assert(ok, \"Output check 2 failed, comparing string-string;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n  end",
    "type": "function"
  }, {
    "id": 73,
    "text": "local output = getoutput(function() error(\"string\") end, \"string_\")",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "local ok = output:find(\"Caught:\\n%(string%) '.*string'\")",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "assert(ok, \"Output check 1 failed, comparing string-string;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "local ok = output:find(\"Expected:\\n%(string%) 'string_'\")",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "assert(ok, \"Output check 2 failed, comparing string-string;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "function() error({}) end",
    "type": "function"
  }, {
    "id": 80,
    "text": "error({})",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "function()\r\n    --assert.has_error(function() error({}) end, \"string\")\r\n    local output = getoutput(function() error({}) end, \"string\")\r\n    local ok = output:find(\"Caught:\\n%(table%) { }\")\r\n    assert(ok, \"Output check 1 failed, comparing table-string;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n    local ok = output:find(\"Expected:\\n%(string%) 'string'\")\r\n    assert(ok, \"Output check 2 failed, comparing table-string;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n  end",
    "type": "function"
  }, {
    "id": 82,
    "text": "local output = getoutput(function() error({}) end, \"string\")",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "local ok = output:find(\"Caught:\\n%(table%) { }\")",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "assert(ok, \"Output check 1 failed, comparing table-string;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "assert(ok, \"Output check 2 failed, comparing table-string;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "function() error(\"string\") end",
    "type": "function"
  }, {
    "id": 88,
    "text": "function()\r\n    --assert.has_error(function() error(\"string\") end, {})\r\n    local output = getoutput(function() error(\"string\") end, {})\r\n    local ok = output:find(\"Caught:\\n%(string%) 'string'\")\r\n    assert(ok, \"Output check 1 failed, comparing string-table;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n    local ok = output:find(\"Expected:\\n%(table%) { }\")\r\n    assert(ok, \"Output check 2 failed, comparing string-table;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n  end",
    "type": "function"
  }, {
    "id": 89,
    "text": "local output = getoutput(function() error(\"string\") end, {})",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "local ok = output:find(\"Caught:\\n%(string%) 'string'\")",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "assert(ok, \"Output check 1 failed, comparing string-table;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "local ok = output:find(\"Expected:\\n%(table%) { }\")",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "assert(ok, \"Output check 2 failed, comparing string-table;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 95,
    "text": "function() error({}) end",
    "type": "function"
  }, {
    "id": 96,
    "text": "function()\r\n    --assert.has_error(function() error({}) end, { \"table\" })\r\n    local output = getoutput(function() error({}) end, { \"table\" })\r\n    local ok = output:find(\"Caught:\\n%(table%) { }\")\r\n    assert(ok, \"Output check 1 failed, comparing table-table;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n    local ok = output:find(\"Expected:\\n%(table%) {\\n  %[1] = 'table' }\")\r\n    assert(ok, \"Output check 2 failed, comparing table-table;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n  end",
    "type": "function"
  }, {
    "id": 97,
    "text": "local output = getoutput(function() error({}) end, { \"table\" })",
    "type": "statement:localassign"
  }, {
    "id": 98,
    "text": "assert(ok, \"Output check 1 failed, comparing table-table;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "local ok = output:find(\"Expected:\\n%(table%) {\\n  %[1] = 'table' }\")",
    "type": "statement:localassign"
  }, {
    "id": 100,
    "text": "assert(ok, \"Output check 2 failed, comparing table-table;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 102,
    "text": "function()\r\n  local getoutput = function(...)\r\n    local success, message = pcall(assert.has_error, ...)\r\n    if message == nil then return nil end\r\n    return tostring(message)\r\n  end\r\n\r\n  it(\"Should report no error caught, but error expected; noerror-nil\", function()\r\n    --assert.has_error(function() end)\r\n    local output = getoutput(function() end)\r\n    local ok = output:find(\"Caught:\\n%(no error%)\")\r\n    assert(ok, \"Output check 1 failed, comparing noerror-nil;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n    local ok = output:find(\"Expected:\\n%(error%)\")\r\n    assert(ok, \"Output check 2 failed, comparing noerror-nil;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n  end)\r\n\r\n  it(\"Should report no error caught, but error string expected; noerror-string\", function()\r\n    --assert.has_error(function() end, \"string\")\r\n    local output = getoutput(function() end, 'string')\r\n    local ok = output:find(\"Caught:\\n%(no error%)\")\r\n    assert(ok, \"Output check 1 failed, comparing noerror-string;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n    local ok = output:find(\"Expected:\\n%(string%) 'string'\")\r\n    assert(ok, \"Output check 2 failed, comparing noerror-string;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n  end)\r\n\r\n  it(\"Should compare error strings correctly; nil-string\", function()\r\n    --assert.has_error(function() error() end, \"string\")\r\n    local output = getoutput(function() error() end, \"string\")\r\n    local ok = output:find(\"Caught:\\n%(nil%)\")\r\n    assert(ok, \"Output check 1 failed, comparing nil-string;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n    local ok = output:find(\"Expected:\\n%(string%) 'string'\")\r\n    assert(ok, \"Output check 2 failed, comparing nil-string;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n  end)\r\n\r\n  it(\"Should compare error strings correctly; string-string\", function()\r\n    --assert.has_error(function() error(\"string\") end, \"string_\")\r\n    local output = getoutput(function() error(\"string\") end, \"string_\")\r\n    local ok = output:find(\"Caught:\\n%(string%) '.*string'\")\r\n    assert(ok, \"Output check 1 failed, comparing string-string;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n    local ok = output:find(\"Expected:\\n%(string%) 'string_'\")\r\n    assert(ok, \"Output check 2 failed, comparing string-string;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n  end)\r\n\r\n  it(\"Should compare error strings correctly; table-string\", function()\r\n    --assert.has_error(function() error({}) end, \"string\")\r\n    local output = getoutput(function() error({}) end, \"string\")\r\n    local ok = output:find(\"Caught:\\n%(table%) { }\")\r\n    assert(ok, \"Output check 1 failed, comparing table-string;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n    local ok = output:find(\"Expected:\\n%(string%) 'string'\")\r\n    assert(ok, \"Output check 2 failed, comparing table-string;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n  end)\r\n\r\n  it(\"Should compare error strings correctly; string-table\", function()\r\n    --assert.has_error(function() error(\"string\") end, {})\r\n    local output = getoutput(function() error(\"string\") end, {})\r\n    local ok = output:find(\"Caught:\\n%(string%) 'string'\")\r\n    assert(ok, \"Output check 1 failed, comparing string-table;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n    local ok = output:find(\"Expected:\\n%(table%) { }\")\r\n    assert(ok, \"Output check 2 failed, comparing string-table;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n  end)\r\n\r\n  it(\"Should compare error objects correctly; table-table\", function()\r\n    --assert.has_error(function() error({}) end, { \"table\" })\r\n    local output = getoutput(function() error({}) end, { \"table\" })\r\n    local ok = output:find(\"Caught:\\n%(table%) { }\")\r\n    assert(ok, \"Output check 1 failed, comparing table-table;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n    local ok = output:find(\"Expected:\\n%(table%) {\\n  %[1] = 'table' }\")\r\n    assert(ok, \"Output check 2 failed, comparing table-table;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n  end)\r\n\r\nend",
    "type": "function"
  }, {
    "id": 103,
    "text": "local getoutput = function(...)\r\n    local success, message = pcall(assert.has_error, ...)\r\n    if message == nil then return nil end\r\n    return tostring(message)\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 104,
    "text": "it(\"Should report no error caught, but error expected; noerror-nil\", function()\r\n    --assert.has_error(function() end)\r\n    local output = getoutput(function() end)\r\n    local ok = output:find(\"Caught:\\n%(no error%)\")\r\n    assert(ok, \"Output check 1 failed, comparing noerror-nil;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n    local ok = output:find(\"Expected:\\n%(error%)\")\r\n    assert(ok, \"Output check 2 failed, comparing noerror-nil;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "it(\"Should report no error caught, but error string expected; noerror-string\", function()\r\n    --assert.has_error(function() end, \"string\")\r\n    local output = getoutput(function() end, 'string')\r\n    local ok = output:find(\"Caught:\\n%(no error%)\")\r\n    assert(ok, \"Output check 1 failed, comparing noerror-string;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n    local ok = output:find(\"Expected:\\n%(string%) 'string'\")\r\n    assert(ok, \"Output check 2 failed, comparing noerror-string;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "it(\"Should compare error strings correctly; nil-string\", function()\r\n    --assert.has_error(function() error() end, \"string\")\r\n    local output = getoutput(function() error() end, \"string\")\r\n    local ok = output:find(\"Caught:\\n%(nil%)\")\r\n    assert(ok, \"Output check 1 failed, comparing nil-string;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n    local ok = output:find(\"Expected:\\n%(string%) 'string'\")\r\n    assert(ok, \"Output check 2 failed, comparing nil-string;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "it(\"Should compare error strings correctly; string-string\", function()\r\n    --assert.has_error(function() error(\"string\") end, \"string_\")\r\n    local output = getoutput(function() error(\"string\") end, \"string_\")\r\n    local ok = output:find(\"Caught:\\n%(string%) '.*string'\")\r\n    assert(ok, \"Output check 1 failed, comparing string-string;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n    local ok = output:find(\"Expected:\\n%(string%) 'string_'\")\r\n    assert(ok, \"Output check 2 failed, comparing string-string;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "it(\"Should compare error strings correctly; table-string\", function()\r\n    --assert.has_error(function() error({}) end, \"string\")\r\n    local output = getoutput(function() error({}) end, \"string\")\r\n    local ok = output:find(\"Caught:\\n%(table%) { }\")\r\n    assert(ok, \"Output check 1 failed, comparing table-string;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n    local ok = output:find(\"Expected:\\n%(string%) 'string'\")\r\n    assert(ok, \"Output check 2 failed, comparing table-string;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "it(\"Should compare error strings correctly; string-table\", function()\r\n    --assert.has_error(function() error(\"string\") end, {})\r\n    local output = getoutput(function() error(\"string\") end, {})\r\n    local ok = output:find(\"Caught:\\n%(string%) 'string'\")\r\n    assert(ok, \"Output check 1 failed, comparing string-table;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n    local ok = output:find(\"Expected:\\n%(table%) { }\")\r\n    assert(ok, \"Output check 2 failed, comparing string-table;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "it(\"Should compare error objects correctly; table-table\", function()\r\n    --assert.has_error(function() error({}) end, { \"table\" })\r\n    local output = getoutput(function() error({}) end, { \"table\" })\r\n    local ok = output:find(\"Caught:\\n%(table%) { }\")\r\n    assert(ok, \"Output check 1 failed, comparing table-table;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n    local ok = output:find(\"Expected:\\n%(table%) {\\n  %[1] = 'table' }\")\r\n    assert(ok, \"Output check 2 failed, comparing table-table;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 112,
    "text": "function()\r\n    -- assert.are.same({1}, {2})\r\n    local output = getoutput({1}, {2})\r\n    local ok = output:find(\"Passed in:\\n(table) {\\n *[1] = 2 }\", nil, true)\r\n    assert(ok, \"Output check 1 failed, comparing table-table;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n    local ok = output:find(\"Expected:\\n(table) {\\n *[1] = 1 }\", nil, true)\r\n    assert(ok, \"Output check 2 failed, comparing table-table;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n  end",
    "type": "function"
  }, {
    "id": 113,
    "text": "local output = getoutput({1}, {2})",
    "type": "statement:localassign"
  }, {
    "id": 114,
    "text": "local ok = output:find(\"Passed in:\\n(table) {\\n *[1] = 2 }\", nil, true)",
    "type": "statement:localassign"
  }, {
    "id": 115,
    "text": "local ok = output:find(\"Expected:\\n(table) {\\n *[1] = 1 }\", nil, true)",
    "type": "statement:localassign"
  }, {
    "id": 116,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 117,
    "text": "function()\r\n    -- assert.are.same(t1, t2)\r\n    local t1 = {1, {\"a\", \"b\", {\"foo\", \"bar\"} }, \"c\"}\r\n    local t2 = {1, {\"a\", \"b\", {\"bar\", \"bar\"} }, \"c\"}\r\n    local output = getoutput(t1, t2)\r\n    local ok = output:find(\"Passed in:\\n.*%*%[2].*%*%[3].*%*%[1] = 'bar'\\n\")\r\n    assert(ok, \"Output check 1 failed, comparing table-table;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n    local ok = output:find(\"Expected:\\n.*%*%[2].*%*%[3].*%*%[1] = 'foo'\\n\")\r\n    assert(ok, \"Output check 2 failed, comparing table-table;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n  end",
    "type": "function"
  }, {
    "id": 118,
    "text": "local t1 = {1, {\"a\", \"b\", {\"foo\", \"bar\"} }, \"c\"}",
    "type": "statement:localassign"
  }, {
    "id": 119,
    "text": "local t2 = {1, {\"a\", \"b\", {\"bar\", \"bar\"} }, \"c\"}",
    "type": "statement:localassign"
  }, {
    "id": 120,
    "text": "local output = getoutput(t1, t2)",
    "type": "statement:localassign"
  }, {
    "id": 121,
    "text": "local ok = output:find(\"Passed in:\\n.*%*%[2].*%*%[3].*%*%[1] = 'bar'\\n\")",
    "type": "statement:localassign"
  }, {
    "id": 122,
    "text": "local ok = output:find(\"Expected:\\n.*%*%[2].*%*%[3].*%*%[1] = 'foo'\\n\")",
    "type": "statement:localassign"
  }, {
    "id": 123,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 124,
    "text": "function()\r\n  local getoutput = function(...)\r\n    local success, message = pcall(assert.are.same, ...)\r\n    if message == nil then return nil end\r\n    return tostring(message)\r\n  end\r\n\r\n  it(\"Should compare tables correctly\", function()\r\n    -- assert.are.same({1}, {2})\r\n    local output = getoutput({1}, {2})\r\n    local ok = output:find(\"Passed in:\\n(table) {\\n *[1] = 2 }\", nil, true)\r\n    assert(ok, \"Output check 1 failed, comparing table-table;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n    local ok = output:find(\"Expected:\\n(table) {\\n *[1] = 1 }\", nil, true)\r\n    assert(ok, \"Output check 2 failed, comparing table-table;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n  end)\r\n\r\n  it(\"Should compare tables correctly and highlight differences\", function()\r\n    -- assert.are.same(t1, t2)\r\n    local t1 = {1, {\"a\", \"b\", {\"foo\", \"bar\"} }, \"c\"}\r\n    local t2 = {1, {\"a\", \"b\", {\"bar\", \"bar\"} }, \"c\"}\r\n    local output = getoutput(t1, t2)\r\n    local ok = output:find(\"Passed in:\\n.*%*%[2].*%*%[3].*%*%[1] = 'bar'\\n\")\r\n    assert(ok, \"Output check 1 failed, comparing table-table;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n    local ok = output:find(\"Expected:\\n.*%*%[2].*%*%[3].*%*%[1] = 'foo'\\n\")\r\n    assert(ok, \"Output check 2 failed, comparing table-table;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n  end)\r\n\r\nend",
    "type": "function"
  }, {
    "id": 125,
    "text": "local getoutput = function(...)\r\n    local success, message = pcall(assert.are.same, ...)\r\n    if message == nil then return nil end\r\n    return tostring(message)\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 126,
    "text": "it(\"Should compare tables correctly\", function()\r\n    -- assert.are.same({1}, {2})\r\n    local output = getoutput({1}, {2})\r\n    local ok = output:find(\"Passed in:\\n(table) {\\n *[1] = 2 }\", nil, true)\r\n    assert(ok, \"Output check 1 failed, comparing table-table;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n    local ok = output:find(\"Expected:\\n(table) {\\n *[1] = 1 }\", nil, true)\r\n    assert(ok, \"Output check 2 failed, comparing table-table;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "it(\"Should compare tables correctly and highlight differences\", function()\r\n    -- assert.are.same(t1, t2)\r\n    local t1 = {1, {\"a\", \"b\", {\"foo\", \"bar\"} }, \"c\"}\r\n    local t2 = {1, {\"a\", \"b\", {\"bar\", \"bar\"} }, \"c\"}\r\n    local output = getoutput(t1, t2)\r\n    local ok = output:find(\"Passed in:\\n.*%*%[2].*%*%[3].*%*%[1] = 'bar'\\n\")\r\n    assert(ok, \"Output check 1 failed, comparing table-table;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n    local ok = output:find(\"Expected:\\n.*%*%[2].*%*%[3].*%*%[1] = 'foo'\\n\")\r\n    assert(ok, \"Output check 2 failed, comparing table-table;\\n    \" .. output:gsub(\"\\n\",\"\\n    \"))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 129,
    "text": "function()\r\n    assert.is_equal(\"is_true fails\", geterror(\"is_true\", false))\r\n    assert.is_equal(\"is_true fails\", geterror2(\"is_true\", false))\r\n    assert.is_equal(\"is_not_true fails\", geterror(\"is_not_true\", true))\r\n    assert.is_equal(\"is_not_true fails\", geterror2(\"is_not_true\", true))\r\n  end",
    "type": "function"
  }, {
    "id": 130,
    "text": "assert.is_equal(\"is_true fails\", geterror(\"is_true\", false))",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "assert.is_equal(\"is_true fails\", geterror2(\"is_true\", false))",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "assert.is_equal(\"is_not_true fails\", geterror(\"is_not_true\", true))",
    "type": "statement:functioncall"
  }, {
    "id": 133,
    "text": "assert.is_equal(\"is_not_true fails\", geterror2(\"is_not_true\", true))",
    "type": "statement:functioncall"
  }, {
    "id": 134,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 135,
    "text": "function()\r\n    assert.is_equal(\"is_false fails\", geterror(\"is_false\", true))\r\n    assert.is_equal(\"is_false fails\", geterror2(\"is_false\", true))\r\n    assert.is_equal(\"is_not_false fails\", geterror(\"is_not_false\", false))\r\n    assert.is_equal(\"is_not_false fails\", geterror2(\"is_not_false\", false))\r\n  end",
    "type": "function"
  }, {
    "id": 136,
    "text": "assert.is_equal(\"is_false fails\", geterror(\"is_false\", true))",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "assert.is_equal(\"is_false fails\", geterror2(\"is_false\", true))",
    "type": "statement:functioncall"
  }, {
    "id": 138,
    "text": "assert.is_equal(\"is_not_false fails\", geterror(\"is_not_false\", false))",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "assert.is_equal(\"is_not_false fails\", geterror2(\"is_not_false\", false))",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 141,
    "text": "function()\r\n    assert.is_equal(\"is_truthy fails\", geterror(\"is_truthy\", false))\r\n    assert.is_equal(\"is_truthy fails\", geterror2(\"is_truthy\", false))\r\n    assert.is_equal(\"is_not_truthy fails\", geterror(\"is_not_truthy\", true))\r\n    assert.is_equal(\"is_not_truthy fails\", geterror2(\"is_not_truthy\", true))\r\n  end",
    "type": "function"
  }, {
    "id": 142,
    "text": "assert.is_equal(\"is_truthy fails\", geterror(\"is_truthy\", false))",
    "type": "statement:functioncall"
  }, {
    "id": 143,
    "text": "assert.is_equal(\"is_truthy fails\", geterror2(\"is_truthy\", false))",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "assert.is_equal(\"is_not_truthy fails\", geterror(\"is_not_truthy\", true))",
    "type": "statement:functioncall"
  }, {
    "id": 145,
    "text": "assert.is_equal(\"is_not_truthy fails\", geterror2(\"is_not_truthy\", true))",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 147,
    "text": "function()\r\n    assert.is_equal(\"is_falsy fails\", geterror(\"is_falsy\", true))\r\n    assert.is_equal(\"is_falsy fails\", geterror2(\"is_falsy\", true))\r\n    assert.is_equal(\"is_not_falsy fails\", geterror(\"is_not_falsy\", false))\r\n    assert.is_equal(\"is_not_falsy fails\", geterror2(\"is_not_falsy\", false))\r\n  end",
    "type": "function"
  }, {
    "id": 148,
    "text": "assert.is_equal(\"is_falsy fails\", geterror(\"is_falsy\", true))",
    "type": "statement:functioncall"
  }, {
    "id": 149,
    "text": "assert.is_equal(\"is_falsy fails\", geterror2(\"is_falsy\", true))",
    "type": "statement:functioncall"
  }, {
    "id": 150,
    "text": "assert.is_equal(\"is_not_falsy fails\", geterror(\"is_not_falsy\", false))",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "assert.is_equal(\"is_not_falsy fails\", geterror2(\"is_not_falsy\", false))",
    "type": "statement:functioncall"
  }, {
    "id": 152,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 153,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 154,
    "text": "function()end",
    "type": "function"
  }, {
    "id": 155,
    "text": "function()end",
    "type": "function"
  }, {
    "id": 156,
    "text": "function()\r\n    assert.is_equal(\"is_boolean fails\", geterror(\"is_boolean\", nil))\r\n    assert.is_equal(\"is_number fails\", geterror(\"is_number\", nil))\r\n    assert.is_equal(\"is_string fails\", geterror(\"is_string\", nil))\r\n    assert.is_equal(\"is_table fails\", geterror(\"is_table\", nil))\r\n    assert.is_equal(\"is_nil fails\", geterror(\"is_nil\", \"nil\"))\r\n    assert.is_equal(\"is_userdata fails\", geterror(\"is_userdata\", nil))\r\n    assert.is_equal(\"is_function fails\", geterror(\"is_function\", nil))\r\n    assert.is_equal(\"is_thread fails\", geterror(\"is_thread\", nil))\r\n\r\n    assert.is_equal(\"is_boolean fails\", geterror2(\"is_boolean\", nil))\r\n    assert.is_equal(\"is_number fails\", geterror2(\"is_number\", nil))\r\n    assert.is_equal(\"is_string fails\", geterror2(\"is_string\", nil))\r\n    assert.is_equal(\"is_table fails\", geterror2(\"is_table\", nil))\r\n    assert.is_equal(\"is_nil fails\", geterror2(\"is_nil\", \"nil\"))\r\n    assert.is_equal(\"is_userdata fails\", geterror2(\"is_userdata\", nil))\r\n    assert.is_equal(\"is_function fails\", geterror2(\"is_function\", nil))\r\n    assert.is_equal(\"is_thread fails\", geterror2(\"is_thread\", nil))\r\n\r\n    local thread = coroutine.create(function() end)\r\n    assert.is_equal(\"is_not_boolean fails\", geterror(\"is_not_boolean\", true))\r\n    assert.is_equal(\"is_not_number fails\", geterror(\"is_not_number\", 0))\r\n    assert.is_equal(\"is_not_string fails\", geterror(\"is_not_string\", ''))\r\n    assert.is_equal(\"is_not_table fails\", geterror(\"is_not_table\", {}))\r\n    assert.is_equal(\"is_not_nil fails\", geterror(\"is_not_nil\", nil))\r\n    assert.is_equal(\"is_not_userdata fails\", geterror(\"is_not_userdata\", io.stdin))\r\n    assert.is_equal(\"is_not_function fails\", geterror(\"is_not_function\", function()end))\r\n    assert.is_equal(\"is_not_thread fails\", geterror(\"is_not_thread\", thread))\r\n\r\n    assert.is_equal(\"is_not_boolean fails\", geterror2(\"is_not_boolean\", true))\r\n    assert.is_equal(\"is_not_number fails\", geterror2(\"is_not_number\", 0))\r\n    assert.is_equal(\"is_not_string fails\", geterror2(\"is_not_string\", ''))\r\n    assert.is_equal(\"is_not_table fails\", geterror2(\"is_not_table\", {}))\r\n    assert.is_equal(\"is_not_nil fails\", geterror2(\"is_not_nil\", nil))\r\n    assert.is_equal(\"is_not_userdata fails\", geterror2(\"is_not_userdata\", io.stdin))\r\n    assert.is_equal(\"is_not_function fails\", geterror2(\"is_not_function\", function()end))\r\n    assert.is_equal(\"is_not_thread fails\", geterror2(\"is_not_thread\", thread))\r\n  end",
    "type": "function"
  }, {
    "id": 157,
    "text": "assert.is_equal(\"is_boolean fails\", geterror(\"is_boolean\", nil))",
    "type": "statement:functioncall"
  }, {
    "id": 158,
    "text": "assert.is_equal(\"is_number fails\", geterror(\"is_number\", nil))",
    "type": "statement:functioncall"
  }, {
    "id": 159,
    "text": "assert.is_equal(\"is_string fails\", geterror(\"is_string\", nil))",
    "type": "statement:functioncall"
  }, {
    "id": 160,
    "text": "assert.is_equal(\"is_table fails\", geterror(\"is_table\", nil))",
    "type": "statement:functioncall"
  }, {
    "id": 161,
    "text": "assert.is_equal(\"is_nil fails\", geterror(\"is_nil\", \"nil\"))",
    "type": "statement:functioncall"
  }, {
    "id": 162,
    "text": "assert.is_equal(\"is_userdata fails\", geterror(\"is_userdata\", nil))",
    "type": "statement:functioncall"
  }, {
    "id": 163,
    "text": "assert.is_equal(\"is_function fails\", geterror(\"is_function\", nil))",
    "type": "statement:functioncall"
  }, {
    "id": 164,
    "text": "assert.is_equal(\"is_thread fails\", geterror(\"is_thread\", nil))",
    "type": "statement:functioncall"
  }, {
    "id": 165,
    "text": "assert.is_equal(\"is_boolean fails\", geterror2(\"is_boolean\", nil))",
    "type": "statement:functioncall"
  }, {
    "id": 166,
    "text": "assert.is_equal(\"is_number fails\", geterror2(\"is_number\", nil))",
    "type": "statement:functioncall"
  }, {
    "id": 167,
    "text": "assert.is_equal(\"is_string fails\", geterror2(\"is_string\", nil))",
    "type": "statement:functioncall"
  }, {
    "id": 168,
    "text": "assert.is_equal(\"is_table fails\", geterror2(\"is_table\", nil))",
    "type": "statement:functioncall"
  }, {
    "id": 169,
    "text": "assert.is_equal(\"is_nil fails\", geterror2(\"is_nil\", \"nil\"))",
    "type": "statement:functioncall"
  }, {
    "id": 170,
    "text": "assert.is_equal(\"is_userdata fails\", geterror2(\"is_userdata\", nil))",
    "type": "statement:functioncall"
  }, {
    "id": 171,
    "text": "assert.is_equal(\"is_function fails\", geterror2(\"is_function\", nil))",
    "type": "statement:functioncall"
  }, {
    "id": 172,
    "text": "assert.is_equal(\"is_thread fails\", geterror2(\"is_thread\", nil))",
    "type": "statement:functioncall"
  }, {
    "id": 173,
    "text": "local thread = coroutine.create(function() end)",
    "type": "statement:localassign"
  }, {
    "id": 174,
    "text": "assert.is_equal(\"is_not_boolean fails\", geterror(\"is_not_boolean\", true))",
    "type": "statement:functioncall"
  }, {
    "id": 175,
    "text": "assert.is_equal(\"is_not_number fails\", geterror(\"is_not_number\", 0))",
    "type": "statement:functioncall"
  }, {
    "id": 176,
    "text": "assert.is_equal(\"is_not_string fails\", geterror(\"is_not_string\", ''))",
    "type": "statement:functioncall"
  }, {
    "id": 177,
    "text": "assert.is_equal(\"is_not_table fails\", geterror(\"is_not_table\", {}))",
    "type": "statement:functioncall"
  }, {
    "id": 178,
    "text": "assert.is_equal(\"is_not_nil fails\", geterror(\"is_not_nil\", nil))",
    "type": "statement:functioncall"
  }, {
    "id": 179,
    "text": "assert.is_equal(\"is_not_userdata fails\", geterror(\"is_not_userdata\", io.stdin))",
    "type": "statement:functioncall"
  }, {
    "id": 180,
    "text": "assert.is_equal(\"is_not_function fails\", geterror(\"is_not_function\", function()end))",
    "type": "statement:functioncall"
  }, {
    "id": 181,
    "text": "assert.is_equal(\"is_not_thread fails\", geterror(\"is_not_thread\", thread))",
    "type": "statement:functioncall"
  }, {
    "id": 182,
    "text": "assert.is_equal(\"is_not_boolean fails\", geterror2(\"is_not_boolean\", true))",
    "type": "statement:functioncall"
  }, {
    "id": 183,
    "text": "assert.is_equal(\"is_not_number fails\", geterror2(\"is_not_number\", 0))",
    "type": "statement:functioncall"
  }, {
    "id": 184,
    "text": "assert.is_equal(\"is_not_string fails\", geterror2(\"is_not_string\", ''))",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "assert.is_equal(\"is_not_table fails\", geterror2(\"is_not_table\", {}))",
    "type": "statement:functioncall"
  }, {
    "id": 186,
    "text": "assert.is_equal(\"is_not_nil fails\", geterror2(\"is_not_nil\", nil))",
    "type": "statement:functioncall"
  }, {
    "id": 187,
    "text": "assert.is_equal(\"is_not_userdata fails\", geterror2(\"is_not_userdata\", io.stdin))",
    "type": "statement:functioncall"
  }, {
    "id": 188,
    "text": "assert.is_equal(\"is_not_function fails\", geterror2(\"is_not_function\", function()end))",
    "type": "statement:functioncall"
  }, {
    "id": 189,
    "text": "assert.is_equal(\"is_not_thread fails\", geterror2(\"is_not_thread\", thread))",
    "type": "statement:functioncall"
  }, {
    "id": 190,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 191,
    "text": "function()\r\n    assert.is_equal(\"equals fails\", geterror(\"equals\", true, false))\r\n    assert.is_equal(\"equals fails\", geterror2(\"equals\", true, false))\r\n    assert.is_equal(\"not_equals fails\", geterror(\"not_equals\", true, true))\r\n    assert.is_equal(\"not_equals fails\", geterror2(\"not_equals\", true, true))\r\n  end",
    "type": "function"
  }, {
    "id": 192,
    "text": "assert.is_equal(\"equals fails\", geterror(\"equals\", true, false))",
    "type": "statement:functioncall"
  }, {
    "id": 193,
    "text": "assert.is_equal(\"equals fails\", geterror2(\"equals\", true, false))",
    "type": "statement:functioncall"
  }, {
    "id": 194,
    "text": "assert.is_equal(\"not_equals fails\", geterror(\"not_equals\", true, true))",
    "type": "statement:functioncall"
  }, {
    "id": 195,
    "text": "assert.is_equal(\"not_equals fails\", geterror2(\"not_equals\", true, true))",
    "type": "statement:functioncall"
  }, {
    "id": 196,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 197,
    "text": "function()\r\n    assert.is_equal(\"same fails\", geterror(\"same\", true, false))\r\n    assert.is_equal(\"same fails\", geterror2(\"same\", true, false))\r\n    assert.is_equal(\"not_same fails\", geterror(\"not_same\", true, true))\r\n    assert.is_equal(\"not_same fails\", geterror2(\"not_same\", true, true))\r\n  end",
    "type": "function"
  }, {
    "id": 198,
    "text": "assert.is_equal(\"same fails\", geterror(\"same\", true, false))",
    "type": "statement:functioncall"
  }, {
    "id": 199,
    "text": "assert.is_equal(\"same fails\", geterror2(\"same\", true, false))",
    "type": "statement:functioncall"
  }, {
    "id": 200,
    "text": "assert.is_equal(\"not_same fails\", geterror(\"not_same\", true, true))",
    "type": "statement:functioncall"
  }, {
    "id": 201,
    "text": "assert.is_equal(\"not_same fails\", geterror2(\"not_same\", true, true))",
    "type": "statement:functioncall"
  }, {
    "id": 202,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 203,
    "text": "function()\r\n    assert.is_equal(\"same fails\", geterror(\"same\", {}, {1}))\r\n    assert.is_equal(\"same fails\", geterror2(\"same\", {}, {1}))\r\n    assert.is_equal(\"not_same fails\", geterror(\"not_same\", {}, {}))\r\n    assert.is_equal(\"not_same fails\", geterror2(\"not_same\", {}, {}))\r\n  end",
    "type": "function"
  }, {
    "id": 204,
    "text": "assert.is_equal(\"same fails\", geterror(\"same\", {}, {1}))",
    "type": "statement:functioncall"
  }, {
    "id": 205,
    "text": "assert.is_equal(\"same fails\", geterror2(\"same\", {}, {1}))",
    "type": "statement:functioncall"
  }, {
    "id": 206,
    "text": "assert.is_equal(\"not_same fails\", geterror(\"not_same\", {}, {}))",
    "type": "statement:functioncall"
  }, {
    "id": 207,
    "text": "assert.is_equal(\"not_same fails\", geterror2(\"not_same\", {}, {}))",
    "type": "statement:functioncall"
  }, {
    "id": 208,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 209,
    "text": "function()\r\n    assert.is_equal(\"unique fails\", geterror(\"unique\", {1, 1}))\r\n    assert.is_equal(\"unique fails\", geterror2(\"unique\", {1, 1}))\r\n    assert.is_equal(\"not_unique fails\", geterror(\"not_unique\", {1, 0}))\r\n    assert.is_equal(\"not_unique fails\", geterror2(\"not_unique\", {1, 0}))\r\n  end",
    "type": "function"
  }, {
    "id": 210,
    "text": "assert.is_equal(\"unique fails\", geterror(\"unique\", {1, 1}))",
    "type": "statement:functioncall"
  }, {
    "id": 211,
    "text": "assert.is_equal(\"unique fails\", geterror2(\"unique\", {1, 1}))",
    "type": "statement:functioncall"
  }, {
    "id": 212,
    "text": "assert.is_equal(\"not_unique fails\", geterror(\"not_unique\", {1, 0}))",
    "type": "statement:functioncall"
  }, {
    "id": 213,
    "text": "assert.is_equal(\"not_unique fails\", geterror2(\"not_unique\", {1, 0}))",
    "type": "statement:functioncall"
  }, {
    "id": 214,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 215,
    "text": "function()\r\n    assert.is_equal(\"unique fails\", geterror(\"unique\", {1, 1}, nil))\r\n    assert.is_equal(\"unique fails\", geterror2(\"unique\", {1, 1}, nil))\r\n    assert.is_equal(\"not_unique fails\", geterror(\"not_unique\", {1, 0}, nil))\r\n    assert.is_equal(\"not_unique fails\", geterror2(\"not_unique\", {1, 0}, nil))\r\n  end",
    "type": "function"
  }, {
    "id": 216,
    "text": "assert.is_equal(\"unique fails\", geterror(\"unique\", {1, 1}, nil))",
    "type": "statement:functioncall"
  }, {
    "id": 217,
    "text": "assert.is_equal(\"unique fails\", geterror2(\"unique\", {1, 1}, nil))",
    "type": "statement:functioncall"
  }, {
    "id": 218,
    "text": "assert.is_equal(\"not_unique fails\", geterror(\"not_unique\", {1, 0}, nil))",
    "type": "statement:functioncall"
  }, {
    "id": 219,
    "text": "assert.is_equal(\"not_unique fails\", geterror2(\"not_unique\", {1, 0}, nil))",
    "type": "statement:functioncall"
  }, {
    "id": 220,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 221,
    "text": "function()\r\n    assert.is_equal(\"unique fails\", geterror(\"unique\", {{1}, {1}}, true))\r\n    assert.is_equal(\"unique fails\", geterror2(\"unique\", {{1}, {1}}, true))\r\n    assert.is_equal(\"not_unique fails\", geterror(\"not_unique\", {{0}, {1}}, true))\r\n    assert.is_equal(\"not_unique fails\", geterror2(\"not_unique\", {{0}, {1}}, true))\r\n  end",
    "type": "function"
  }, {
    "id": 222,
    "text": "assert.is_equal(\"unique fails\", geterror(\"unique\", {{1}, {1}}, true))",
    "type": "statement:functioncall"
  }, {
    "id": 223,
    "text": "assert.is_equal(\"unique fails\", geterror2(\"unique\", {{1}, {1}}, true))",
    "type": "statement:functioncall"
  }, {
    "id": 224,
    "text": "assert.is_equal(\"not_unique fails\", geterror(\"not_unique\", {{0}, {1}}, true))",
    "type": "statement:functioncall"
  }, {
    "id": 225,
    "text": "assert.is_equal(\"not_unique fails\", geterror2(\"not_unique\", {{0}, {1}}, true))",
    "type": "statement:functioncall"
  }, {
    "id": 226,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 227,
    "text": "function()\r\n    local err1 = geterror(\"unique\", {{1}, {1}}, \"unique deep compare 2 fails\", true)\r\n    local err2 = geterror(\"not_unique\", {{0}, {1}}, \"not unique deep compare 2 fails\", true)\r\n    assert.is_equal(\"unique deep compare 2 fails\", err1)\r\n    assert.is_equal(\"not unique deep compare 2 fails\", err2)\r\n  end",
    "type": "function"
  }, {
    "id": 228,
    "text": "local err1 = geterror(\"unique\", {{1}, {1}}, \"unique deep compare 2 fails\", true)",
    "type": "statement:localassign"
  }, {
    "id": 229,
    "text": "local err2 = geterror(\"not_unique\", {{0}, {1}}, \"not unique deep compare 2 fails\", true)",
    "type": "statement:localassign"
  }, {
    "id": 230,
    "text": "assert.is_equal(\"unique deep compare 2 fails\", err1)",
    "type": "statement:functioncall"
  }, {
    "id": 231,
    "text": "assert.is_equal(\"not unique deep compare 2 fails\", err2)",
    "type": "statement:functioncall"
  }, {
    "id": 232,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 233,
    "text": "function()\r\n    assert.is_equal(\"is_near fails\", geterror(\"is_near\", 0, 1, 0.5))\r\n    assert.is_equal(\"is_near fails\", geterror2(\"is_near\", 0, 1, 0.5))\r\n    assert.is_equal(\"is_not_near fails\", geterror(\"is_not_near\", 0, 1, 1.5))\r\n    assert.is_equal(\"is_not_near fails\", geterror2(\"is_not_near\", 0, 1, 1.5))\r\n  end",
    "type": "function"
  }, {
    "id": 234,
    "text": "assert.is_equal(\"is_near fails\", geterror(\"is_near\", 0, 1, 0.5))",
    "type": "statement:functioncall"
  }, {
    "id": 235,
    "text": "assert.is_equal(\"is_near fails\", geterror2(\"is_near\", 0, 1, 0.5))",
    "type": "statement:functioncall"
  }, {
    "id": 236,
    "text": "assert.is_equal(\"is_not_near fails\", geterror(\"is_not_near\", 0, 1, 1.5))",
    "type": "statement:functioncall"
  }, {
    "id": 237,
    "text": "assert.is_equal(\"is_not_near fails\", geterror2(\"is_not_near\", 0, 1, 1.5))",
    "type": "statement:functioncall"
  }, {
    "id": 238,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 239,
    "text": "function()\r\n    assert.is_equal(\"matches fails\", geterror(\"matches\", \"%d+\", \"foobar\"))\r\n    assert.is_equal(\"matches fails\", geterror(\"matches\", \"%d+\", \"0foobar\", 2))\r\n    assert.is_equal(\"matches fails\", geterror(\"matches\", \"%d+\", \"foobar\", 1, true))\r\n    assert.is_equal(\"matches fails\", geterror(\"matches\", \"%d+\", \"foobar\", '2', true))\r\n    assert.is_equal(\"matches fails\", geterror2(\"matches\", \"%d+\", \"foobar\"))\r\n    assert.is_equal(\"no_match fails\", geterror(\"no_match\", \"%w+\", \"12345\"))\r\n    assert.is_equal(\"no_match fails\", geterror2(\"no_match\", \"%w+\", \"12345\"))\r\n  end",
    "type": "function"
  }, {
    "id": 240,
    "text": "assert.is_equal(\"matches fails\", geterror(\"matches\", \"%d+\", \"foobar\"))",
    "type": "statement:functioncall"
  }, {
    "id": 241,
    "text": "assert.is_equal(\"matches fails\", geterror(\"matches\", \"%d+\", \"0foobar\", 2))",
    "type": "statement:functioncall"
  }, {
    "id": 242,
    "text": "assert.is_equal(\"matches fails\", geterror(\"matches\", \"%d+\", \"foobar\", 1, true))",
    "type": "statement:functioncall"
  }, {
    "id": 243,
    "text": "assert.is_equal(\"matches fails\", geterror(\"matches\", \"%d+\", \"foobar\", '2', true))",
    "type": "statement:functioncall"
  }, {
    "id": 244,
    "text": "assert.is_equal(\"matches fails\", geterror2(\"matches\", \"%d+\", \"foobar\"))",
    "type": "statement:functioncall"
  }, {
    "id": 245,
    "text": "assert.is_equal(\"no_match fails\", geterror(\"no_match\", \"%w+\", \"12345\"))",
    "type": "statement:functioncall"
  }, {
    "id": 246,
    "text": "assert.is_equal(\"no_match fails\", geterror2(\"no_match\", \"%w+\", \"12345\"))",
    "type": "statement:functioncall"
  }, {
    "id": 247,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 248,
    "text": "function()end",
    "type": "function"
  }, {
    "id": 249,
    "text": "function()end",
    "type": "function"
  }, {
    "id": 250,
    "text": "function()\r\n    assert.is_equal(\"has_error fails\", geterror(\"has_error\", function()end, nil))\r\n    assert.is_equal(\"has_error fails\", geterror2(\"has_error\", function()end, nil))\r\n    assert.is_equal(\"has_no_error fails\", geterror(\"has_no_error\", error, nil))\r\n    assert.is_equal(\"has_no_error fails\", geterror2(\"has_no_error\", error, nil))\r\n  end",
    "type": "function"
  }, {
    "id": 251,
    "text": "assert.is_equal(\"has_error fails\", geterror(\"has_error\", function()end, nil))",
    "type": "statement:functioncall"
  }, {
    "id": 252,
    "text": "assert.is_equal(\"has_error fails\", geterror2(\"has_error\", function()end, nil))",
    "type": "statement:functioncall"
  }, {
    "id": 253,
    "text": "assert.is_equal(\"has_no_error fails\", geterror(\"has_no_error\", error, nil))",
    "type": "statement:functioncall"
  }, {
    "id": 254,
    "text": "assert.is_equal(\"has_no_error fails\", geterror2(\"has_no_error\", error, nil))",
    "type": "statement:functioncall"
  }, {
    "id": 255,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 256,
    "text": "function()end",
    "type": "function"
  }, {
    "id": 257,
    "text": "function() error(\"1string\") end",
    "type": "function"
  }, {
    "id": 258,
    "text": "error(\"1string\")",
    "type": "statement:functioncall"
  }, {
    "id": 259,
    "text": "function() error(\"1string\") end",
    "type": "function"
  }, {
    "id": 260,
    "text": "function()end",
    "type": "function"
  }, {
    "id": 261,
    "text": "function() error(\"string\") end",
    "type": "function"
  }, {
    "id": 262,
    "text": "function() error(\"string\") end",
    "type": "function"
  }, {
    "id": 263,
    "text": "function()\r\n    assert.is_equal(\"error_matches fails\", geterror(\"error_matches\", function()end, \"\"))\r\n    assert.is_equal(\"error_matches fails\", geterror(\"error_matches\", function() error(\"1string\") end, \"%d+\", 2))\r\n    assert.is_equal(\"error_matches fails\", geterror(\"error_matches\", function() error(\"1string\") end, \"xyz\", 2, true))\r\n    assert.is_equal(\"error_matches fails\", geterror2(\"error_matches\", function()end, \"\"))\r\n    assert.is_equal(\"no_error_matches fails\", geterror(\"no_error_matches\", function() error(\"string\") end, \"string\"))\r\n    assert.is_equal(\"no_error_matches fails\", geterror2(\"no_error_matches\", function() error(\"string\") end, \"string\"))\r\n  end",
    "type": "function"
  }, {
    "id": 264,
    "text": "assert.is_equal(\"error_matches fails\", geterror(\"error_matches\", function()end, \"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 265,
    "text": "assert.is_equal(\"error_matches fails\", geterror(\"error_matches\", function() error(\"1string\") end, \"%d+\", 2))",
    "type": "statement:functioncall"
  }, {
    "id": 266,
    "text": "assert.is_equal(\"error_matches fails\", geterror(\"error_matches\", function() error(\"1string\") end, \"xyz\", 2, true))",
    "type": "statement:functioncall"
  }, {
    "id": 267,
    "text": "assert.is_equal(\"error_matches fails\", geterror2(\"error_matches\", function()end, \"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 268,
    "text": "assert.is_equal(\"no_error_matches fails\", geterror(\"no_error_matches\", function() error(\"string\") end, \"string\"))",
    "type": "statement:functioncall"
  }, {
    "id": 269,
    "text": "assert.is_equal(\"no_error_matches fails\", geterror2(\"no_error_matches\", function() error(\"string\") end, \"string\"))",
    "type": "statement:functioncall"
  }, {
    "id": 270,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 271,
    "text": "function()\r\n    assert.is_equal(\"returned_arguments fails\", geterror2(\"returned_arguments\", 4, 1, 2, 3))\r\n    assert.is_equal(\"not_returned_arguments fails\", geterror2(\"not_returned_arguments\", 4, 1, 2, 3, 4))\r\n  end",
    "type": "function"
  }, {
    "id": 272,
    "text": "assert.is_equal(\"returned_arguments fails\", geterror2(\"returned_arguments\", 4, 1, 2, 3))",
    "type": "statement:functioncall"
  }, {
    "id": 273,
    "text": "assert.is_equal(\"not_returned_arguments fails\", geterror2(\"not_returned_arguments\", 4, 1, 2, 3, 4))",
    "type": "statement:functioncall"
  }, {
    "id": 274,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 275,
    "text": "function(t) return \"empty table\" end",
    "type": "function"
  }, {
    "id": 276,
    "text": "function()\r\n    local t = setmetatable({},{__tostring=function(t) return \"empty table\" end})\r\n    assert.is_equal(\"(table) { }\", geterror(\"is_true\", false, {}))\r\n    assert.is_equal(\"(number) 999\", geterror(\"is_true\", false, 999))\r\n    assert.is_equal(\"(boolean) true\", geterror(\"is_true\", false, true))\r\n    assert.is_equal(\"(boolean) false\", geterror(\"is_true\", false, false))\r\n    assert.is_equal(\"empty table\", geterror(\"is_true\", false, t))\r\n\r\n    assert.is_equal(\"(table) { }\", geterror2(\"is_true\", false, {}))\r\n    assert.is_equal(\"(number) 999\", geterror2(\"is_true\", false, 999))\r\n    assert.is_equal(\"(boolean) true\", geterror2(\"is_true\", false, true))\r\n    assert.is_equal(\"(boolean) false\", geterror2(\"is_true\", false, false))\r\n    assert.is_equal(\"empty table\", geterror2(\"is_true\", false, t))\r\n  end",
    "type": "function"
  }, {
    "id": 277,
    "text": "local t = setmetatable({},{__tostring=function(t) return \"empty table\" end})",
    "type": "statement:localassign"
  }, {
    "id": 278,
    "text": "assert.is_equal(\"(table) { }\", geterror(\"is_true\", false, {}))",
    "type": "statement:functioncall"
  }, {
    "id": 279,
    "text": "assert.is_equal(\"(number) 999\", geterror(\"is_true\", false, 999))",
    "type": "statement:functioncall"
  }, {
    "id": 280,
    "text": "assert.is_equal(\"(boolean) true\", geterror(\"is_true\", false, true))",
    "type": "statement:functioncall"
  }, {
    "id": 281,
    "text": "assert.is_equal(\"(boolean) false\", geterror(\"is_true\", false, false))",
    "type": "statement:functioncall"
  }, {
    "id": 282,
    "text": "assert.is_equal(\"empty table\", geterror(\"is_true\", false, t))",
    "type": "statement:functioncall"
  }, {
    "id": 283,
    "text": "assert.is_equal(\"(table) { }\", geterror2(\"is_true\", false, {}))",
    "type": "statement:functioncall"
  }, {
    "id": 284,
    "text": "assert.is_equal(\"(number) 999\", geterror2(\"is_true\", false, 999))",
    "type": "statement:functioncall"
  }, {
    "id": 285,
    "text": "assert.is_equal(\"(boolean) true\", geterror2(\"is_true\", false, true))",
    "type": "statement:functioncall"
  }, {
    "id": 286,
    "text": "assert.is_equal(\"(boolean) false\", geterror2(\"is_true\", false, false))",
    "type": "statement:functioncall"
  }, {
    "id": 287,
    "text": "assert.is_equal(\"empty table\", geterror2(\"is_true\", false, t))",
    "type": "statement:functioncall"
  }, {
    "id": 288,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 289,
    "text": "function()\r\n  local geterror = function(key, ...)\r\n    local argcnt = select(\"#\", ...)\r\n    local args = {...}\r\n    args[argcnt+1] = key .. \" fails\"\r\n    local success, message = pcall(assert[key], unpack(args, 1, argcnt+1))\r\n    if message == nil then return nil end\r\n    message = tostring(message):gsub(\"\\n.*\", \"\"):gsub(\"^.-:%d+: \", \"\", 1)\r\n    return message\r\n  end\r\n\r\n  local geterror2 = function(key, ...)\r\n    local success, message = pcall(assert.message(key .. \" fails\")[key], ...)\r\n    if message == nil then return nil end\r\n    message = tostring(message):gsub(\"\\n.*\", \"\"):gsub(\"^.-:%d+: \", \"\", 1)\r\n    return message\r\n  end\r\n\r\n  it(\"Should use failure message for is_true assertion\", function()\r\n    assert.is_equal(\"is_true fails\", geterror(\"is_true\", false))\r\n    assert.is_equal(\"is_true fails\", geterror2(\"is_true\", false))\r\n    assert.is_equal(\"is_not_true fails\", geterror(\"is_not_true\", true))\r\n    assert.is_equal(\"is_not_true fails\", geterror2(\"is_not_true\", true))\r\n  end)\r\n\r\n  it(\"Should use failure message for is_false assertion\", function()\r\n    assert.is_equal(\"is_false fails\", geterror(\"is_false\", true))\r\n    assert.is_equal(\"is_false fails\", geterror2(\"is_false\", true))\r\n    assert.is_equal(\"is_not_false fails\", geterror(\"is_not_false\", false))\r\n    assert.is_equal(\"is_not_false fails\", geterror2(\"is_not_false\", false))\r\n  end)\r\n\r\n  it(\"Should use failure message for is_truthy assertion\", function()\r\n    assert.is_equal(\"is_truthy fails\", geterror(\"is_truthy\", false))\r\n    assert.is_equal(\"is_truthy fails\", geterror2(\"is_truthy\", false))\r\n    assert.is_equal(\"is_not_truthy fails\", geterror(\"is_not_truthy\", true))\r\n    assert.is_equal(\"is_not_truthy fails\", geterror2(\"is_not_truthy\", true))\r\n  end)\r\n\r\n  it(\"Should use failure message for is_falsy assertion\", function()\r\n    assert.is_equal(\"is_falsy fails\", geterror(\"is_falsy\", true))\r\n    assert.is_equal(\"is_falsy fails\", geterror2(\"is_falsy\", true))\r\n    assert.is_equal(\"is_not_falsy fails\", geterror(\"is_not_falsy\", false))\r\n    assert.is_equal(\"is_not_falsy fails\", geterror2(\"is_not_falsy\", false))\r\n  end)\r\n\r\n  it(\"Should use failure message for is_type assertions\", function()\r\n    assert.is_equal(\"is_boolean fails\", geterror(\"is_boolean\", nil))\r\n    assert.is_equal(\"is_number fails\", geterror(\"is_number\", nil))\r\n    assert.is_equal(\"is_string fails\", geterror(\"is_string\", nil))\r\n    assert.is_equal(\"is_table fails\", geterror(\"is_table\", nil))\r\n    assert.is_equal(\"is_nil fails\", geterror(\"is_nil\", \"nil\"))\r\n    assert.is_equal(\"is_userdata fails\", geterror(\"is_userdata\", nil))\r\n    assert.is_equal(\"is_function fails\", geterror(\"is_function\", nil))\r\n    assert.is_equal(\"is_thread fails\", geterror(\"is_thread\", nil))\r\n\r\n    assert.is_equal(\"is_boolean fails\", geterror2(\"is_boolean\", nil))\r\n    assert.is_equal(\"is_number fails\", geterror2(\"is_number\", nil))\r\n    assert.is_equal(\"is_string fails\", geterror2(\"is_string\", nil))\r\n    assert.is_equal(\"is_table fails\", geterror2(\"is_table\", nil))\r\n    assert.is_equal(\"is_nil fails\", geterror2(\"is_nil\", \"nil\"))\r\n    assert.is_equal(\"is_userdata fails\", geterror2(\"is_userdata\", nil))\r\n    assert.is_equal(\"is_function fails\", geterror2(\"is_function\", nil))\r\n    assert.is_equal(\"is_thread fails\", geterror2(\"is_thread\", nil))\r\n\r\n    local thread = coroutine.create(function() end)\r\n    assert.is_equal(\"is_not_boolean fails\", geterror(\"is_not_boolean\", true))\r\n    assert.is_equal(\"is_not_number fails\", geterror(\"is_not_number\", 0))\r\n    assert.is_equal(\"is_not_string fails\", geterror(\"is_not_string\", ''))\r\n    assert.is_equal(\"is_not_table fails\", geterror(\"is_not_table\", {}))\r\n    assert.is_equal(\"is_not_nil fails\", geterror(\"is_not_nil\", nil))\r\n    assert.is_equal(\"is_not_userdata fails\", geterror(\"is_not_userdata\", io.stdin))\r\n    assert.is_equal(\"is_not_function fails\", geterror(\"is_not_function\", function()end))\r\n    assert.is_equal(\"is_not_thread fails\", geterror(\"is_not_thread\", thread))\r\n\r\n    assert.is_equal(\"is_not_boolean fails\", geterror2(\"is_not_boolean\", true))\r\n    assert.is_equal(\"is_not_number fails\", geterror2(\"is_not_number\", 0))\r\n    assert.is_equal(\"is_not_string fails\", geterror2(\"is_not_string\", ''))\r\n    assert.is_equal(\"is_not_table fails\", geterror2(\"is_not_table\", {}))\r\n    assert.is_equal(\"is_not_nil fails\", geterror2(\"is_not_nil\", nil))\r\n    assert.is_equal(\"is_not_userdata fails\", geterror2(\"is_not_userdata\", io.stdin))\r\n    assert.is_equal(\"is_not_function fails\", geterror2(\"is_not_function\", function()end))\r\n    assert.is_equal(\"is_not_thread fails\", geterror2(\"is_not_thread\", thread))\r\n  end)\r\n\r\n  it(\"Should use failure message for is_equal assertion\", function()\r\n    assert.is_equal(\"equals fails\", geterror(\"equals\", true, false))\r\n    assert.is_equal(\"equals fails\", geterror2(\"equals\", true, false))\r\n    assert.is_equal(\"not_equals fails\", geterror(\"not_equals\", true, true))\r\n    assert.is_equal(\"not_equals fails\", geterror2(\"not_equals\", true, true))\r\n  end)\r\n\r\n  it(\"Should use failure message for is_same assertion\", function()\r\n    assert.is_equal(\"same fails\", geterror(\"same\", true, false))\r\n    assert.is_equal(\"same fails\", geterror2(\"same\", true, false))\r\n    assert.is_equal(\"not_same fails\", geterror(\"not_same\", true, true))\r\n    assert.is_equal(\"not_same fails\", geterror2(\"not_same\", true, true))\r\n  end)\r\n\r\n  it(\"Should use failure message for is_same assertion: table-table\", function()\r\n    assert.is_equal(\"same fails\", geterror(\"same\", {}, {1}))\r\n    assert.is_equal(\"same fails\", geterror2(\"same\", {}, {1}))\r\n    assert.is_equal(\"not_same fails\", geterror(\"not_same\", {}, {}))\r\n    assert.is_equal(\"not_same fails\", geterror2(\"not_same\", {}, {}))\r\n  end)\r\n\r\n  it(\"Should use failure message for is_unique assertion: shallow compare\", function()\r\n    assert.is_equal(\"unique fails\", geterror(\"unique\", {1, 1}))\r\n    assert.is_equal(\"unique fails\", geterror2(\"unique\", {1, 1}))\r\n    assert.is_equal(\"not_unique fails\", geterror(\"not_unique\", {1, 0}))\r\n    assert.is_equal(\"not_unique fails\", geterror2(\"not_unique\", {1, 0}))\r\n  end)\r\n\r\n  it(\"Should use failure message for is_unique assertion: nil deep compare\", function()\r\n    assert.is_equal(\"unique fails\", geterror(\"unique\", {1, 1}, nil))\r\n    assert.is_equal(\"unique fails\", geterror2(\"unique\", {1, 1}, nil))\r\n    assert.is_equal(\"not_unique fails\", geterror(\"not_unique\", {1, 0}, nil))\r\n    assert.is_equal(\"not_unique fails\", geterror2(\"not_unique\", {1, 0}, nil))\r\n  end)\r\n\r\n  it(\"Should use failure message for is_unique assertion: deep compare\", function()\r\n    assert.is_equal(\"unique fails\", geterror(\"unique\", {{1}, {1}}, true))\r\n    assert.is_equal(\"unique fails\", geterror2(\"unique\", {{1}, {1}}, true))\r\n    assert.is_equal(\"not_unique fails\", geterror(\"not_unique\", {{0}, {1}}, true))\r\n    assert.is_equal(\"not_unique fails\", geterror2(\"not_unique\", {{0}, {1}}, true))\r\n  end)\r\n\r\n  it(\"Should use failure message for is_unique assertion: deep compare 2\", function()\r\n    local err1 = geterror(\"unique\", {{1}, {1}}, \"unique deep compare 2 fails\", true)\r\n    local err2 = geterror(\"not_unique\", {{0}, {1}}, \"not unique deep compare 2 fails\", true)\r\n    assert.is_equal(\"unique deep compare 2 fails\", err1)\r\n    assert.is_equal(\"not unique deep compare 2 fails\", err2)\r\n  end)\r\n\r\n  it(\"Should use failure message for is_near assertion\", function()\r\n    assert.is_equal(\"is_near fails\", geterror(\"is_near\", 0, 1, 0.5))\r\n    assert.is_equal(\"is_near fails\", geterror2(\"is_near\", 0, 1, 0.5))\r\n    assert.is_equal(\"is_not_near fails\", geterror(\"is_not_near\", 0, 1, 1.5))\r\n    assert.is_equal(\"is_not_near fails\", geterror2(\"is_not_near\", 0, 1, 1.5))\r\n  end)\r\n\r\n  it(\"Should use failure message for matches assertion\", function()\r\n    assert.is_equal(\"matches fails\", geterror(\"matches\", \"%d+\", \"foobar\"))\r\n    assert.is_equal(\"matches fails\", geterror(\"matches\", \"%d+\", \"0foobar\", 2))\r\n    assert.is_equal(\"matches fails\", geterror(\"matches\", \"%d+\", \"foobar\", 1, true))\r\n    assert.is_equal(\"matches fails\", geterror(\"matches\", \"%d+\", \"foobar\", '2', true))\r\n    assert.is_equal(\"matches fails\", geterror2(\"matches\", \"%d+\", \"foobar\"))\r\n    assert.is_equal(\"no_match fails\", geterror(\"no_match\", \"%w+\", \"12345\"))\r\n    assert.is_equal(\"no_match fails\", geterror2(\"no_match\", \"%w+\", \"12345\"))\r\n  end)\r\n\r\n  it(\"Should use failure message for has_error assertion\", function()\r\n    assert.is_equal(\"has_error fails\", geterror(\"has_error\", function()end, nil))\r\n    assert.is_equal(\"has_error fails\", geterror2(\"has_error\", function()end, nil))\r\n    assert.is_equal(\"has_no_error fails\", geterror(\"has_no_error\", error, nil))\r\n    assert.is_equal(\"has_no_error fails\", geterror2(\"has_no_error\", error, nil))\r\n  end)\r\n\r\n  it(\"Should use failure message for error_matches assertion\", function()\r\n    assert.is_equal(\"error_matches fails\", geterror(\"error_matches\", function()end, \"\"))\r\n    assert.is_equal(\"error_matches fails\", geterror(\"error_matches\", function() error(\"1string\") end, \"%d+\", 2))\r\n    assert.is_equal(\"error_matches fails\", geterror(\"error_matches\", function() error(\"1string\") end, \"xyz\", 2, true))\r\n    assert.is_equal(\"error_matches fails\", geterror2(\"error_matches\", function()end, \"\"))\r\n    assert.is_equal(\"no_error_matches fails\", geterror(\"no_error_matches\", function() error(\"string\") end, \"string\"))\r\n    assert.is_equal(\"no_error_matches fails\", geterror2(\"no_error_matches\", function() error(\"string\") end, \"string\"))\r\n  end)\r\n\r\n  it(\"Should use failure message for returned_arguments assertion\", function()\r\n    assert.is_equal(\"returned_arguments fails\", geterror2(\"returned_arguments\", 4, 1, 2, 3))\r\n    assert.is_equal(\"not_returned_arguments fails\", geterror2(\"not_returned_arguments\", 4, 1, 2, 3, 4))\r\n  end)\r\n\r\n  it(\"Should convert objects to string\", function()\r\n    local t = setmetatable({},{__tostring=function(t) return \"empty table\" end})\r\n    assert.is_equal(\"(table) { }\", geterror(\"is_true\", false, {}))\r\n    assert.is_equal(\"(number) 999\", geterror(\"is_true\", false, 999))\r\n    assert.is_equal(\"(boolean) true\", geterror(\"is_true\", false, true))\r\n    assert.is_equal(\"(boolean) false\", geterror(\"is_true\", false, false))\r\n    assert.is_equal(\"empty table\", geterror(\"is_true\", false, t))\r\n\r\n    assert.is_equal(\"(table) { }\", geterror2(\"is_true\", false, {}))\r\n    assert.is_equal(\"(number) 999\", geterror2(\"is_true\", false, 999))\r\n    assert.is_equal(\"(boolean) true\", geterror2(\"is_true\", false, true))\r\n    assert.is_equal(\"(boolean) false\", geterror2(\"is_true\", false, false))\r\n    assert.is_equal(\"empty table\", geterror2(\"is_true\", false, t))\r\n  end)\r\n\r\nend",
    "type": "function"
  }, {
    "id": 290,
    "text": "local geterror = function(key, ...)\r\n    local argcnt = select(\"#\", ...)\r\n    local args = {...}\r\n    args[argcnt+1] = key .. \" fails\"\r\n    local success, message = pcall(assert[key], unpack(args, 1, argcnt+1))\r\n    if message == nil then return nil end\r\n    message = tostring(message):gsub(\"\\n.*\", \"\"):gsub(\"^.-:%d+: \", \"\", 1)\r\n    return message\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 291,
    "text": "local geterror2 = function(key, ...)\r\n    local success, message = pcall(assert.message(key .. \" fails\")[key], ...)\r\n    if message == nil then return nil end\r\n    message = tostring(message):gsub(\"\\n.*\", \"\"):gsub(\"^.-:%d+: \", \"\", 1)\r\n    return message\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 292,
    "text": "it(\"Should use failure message for is_true assertion\", function()\r\n    assert.is_equal(\"is_true fails\", geterror(\"is_true\", false))\r\n    assert.is_equal(\"is_true fails\", geterror2(\"is_true\", false))\r\n    assert.is_equal(\"is_not_true fails\", geterror(\"is_not_true\", true))\r\n    assert.is_equal(\"is_not_true fails\", geterror2(\"is_not_true\", true))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 293,
    "text": "it(\"Should use failure message for is_false assertion\", function()\r\n    assert.is_equal(\"is_false fails\", geterror(\"is_false\", true))\r\n    assert.is_equal(\"is_false fails\", geterror2(\"is_false\", true))\r\n    assert.is_equal(\"is_not_false fails\", geterror(\"is_not_false\", false))\r\n    assert.is_equal(\"is_not_false fails\", geterror2(\"is_not_false\", false))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 294,
    "text": "it(\"Should use failure message for is_truthy assertion\", function()\r\n    assert.is_equal(\"is_truthy fails\", geterror(\"is_truthy\", false))\r\n    assert.is_equal(\"is_truthy fails\", geterror2(\"is_truthy\", false))\r\n    assert.is_equal(\"is_not_truthy fails\", geterror(\"is_not_truthy\", true))\r\n    assert.is_equal(\"is_not_truthy fails\", geterror2(\"is_not_truthy\", true))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 295,
    "text": "it(\"Should use failure message for is_falsy assertion\", function()\r\n    assert.is_equal(\"is_falsy fails\", geterror(\"is_falsy\", true))\r\n    assert.is_equal(\"is_falsy fails\", geterror2(\"is_falsy\", true))\r\n    assert.is_equal(\"is_not_falsy fails\", geterror(\"is_not_falsy\", false))\r\n    assert.is_equal(\"is_not_falsy fails\", geterror2(\"is_not_falsy\", false))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 296,
    "text": "it(\"Should use failure message for is_type assertions\", function()\r\n    assert.is_equal(\"is_boolean fails\", geterror(\"is_boolean\", nil))\r\n    assert.is_equal(\"is_number fails\", geterror(\"is_number\", nil))\r\n    assert.is_equal(\"is_string fails\", geterror(\"is_string\", nil))\r\n    assert.is_equal(\"is_table fails\", geterror(\"is_table\", nil))\r\n    assert.is_equal(\"is_nil fails\", geterror(\"is_nil\", \"nil\"))\r\n    assert.is_equal(\"is_userdata fails\", geterror(\"is_userdata\", nil))\r\n    assert.is_equal(\"is_function fails\", geterror(\"is_function\", nil))\r\n    assert.is_equal(\"is_thread fails\", geterror(\"is_thread\", nil))\r\n\r\n    assert.is_equal(\"is_boolean fails\", geterror2(\"is_boolean\", nil))\r\n    assert.is_equal(\"is_number fails\", geterror2(\"is_number\", nil))\r\n    assert.is_equal(\"is_string fails\", geterror2(\"is_string\", nil))\r\n    assert.is_equal(\"is_table fails\", geterror2(\"is_table\", nil))\r\n    assert.is_equal(\"is_nil fails\", geterror2(\"is_nil\", \"nil\"))\r\n    assert.is_equal(\"is_userdata fails\", geterror2(\"is_userdata\", nil))\r\n    assert.is_equal(\"is_function fails\", geterror2(\"is_function\", nil))\r\n    assert.is_equal(\"is_thread fails\", geterror2(\"is_thread\", nil))\r\n\r\n    local thread = coroutine.create(function() end)\r\n    assert.is_equal(\"is_not_boolean fails\", geterror(\"is_not_boolean\", true))\r\n    assert.is_equal(\"is_not_number fails\", geterror(\"is_not_number\", 0))\r\n    assert.is_equal(\"is_not_string fails\", geterror(\"is_not_string\", ''))\r\n    assert.is_equal(\"is_not_table fails\", geterror(\"is_not_table\", {}))\r\n    assert.is_equal(\"is_not_nil fails\", geterror(\"is_not_nil\", nil))\r\n    assert.is_equal(\"is_not_userdata fails\", geterror(\"is_not_userdata\", io.stdin))\r\n    assert.is_equal(\"is_not_function fails\", geterror(\"is_not_function\", function()end))\r\n    assert.is_equal(\"is_not_thread fails\", geterror(\"is_not_thread\", thread))\r\n\r\n    assert.is_equal(\"is_not_boolean fails\", geterror2(\"is_not_boolean\", true))\r\n    assert.is_equal(\"is_not_number fails\", geterror2(\"is_not_number\", 0))\r\n    assert.is_equal(\"is_not_string fails\", geterror2(\"is_not_string\", ''))\r\n    assert.is_equal(\"is_not_table fails\", geterror2(\"is_not_table\", {}))\r\n    assert.is_equal(\"is_not_nil fails\", geterror2(\"is_not_nil\", nil))\r\n    assert.is_equal(\"is_not_userdata fails\", geterror2(\"is_not_userdata\", io.stdin))\r\n    assert.is_equal(\"is_not_function fails\", geterror2(\"is_not_function\", function()end))\r\n    assert.is_equal(\"is_not_thread fails\", geterror2(\"is_not_thread\", thread))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 297,
    "text": "it(\"Should use failure message for is_equal assertion\", function()\r\n    assert.is_equal(\"equals fails\", geterror(\"equals\", true, false))\r\n    assert.is_equal(\"equals fails\", geterror2(\"equals\", true, false))\r\n    assert.is_equal(\"not_equals fails\", geterror(\"not_equals\", true, true))\r\n    assert.is_equal(\"not_equals fails\", geterror2(\"not_equals\", true, true))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 298,
    "text": "it(\"Should use failure message for is_same assertion\", function()\r\n    assert.is_equal(\"same fails\", geterror(\"same\", true, false))\r\n    assert.is_equal(\"same fails\", geterror2(\"same\", true, false))\r\n    assert.is_equal(\"not_same fails\", geterror(\"not_same\", true, true))\r\n    assert.is_equal(\"not_same fails\", geterror2(\"not_same\", true, true))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 299,
    "text": "it(\"Should use failure message for is_same assertion: table-table\", function()\r\n    assert.is_equal(\"same fails\", geterror(\"same\", {}, {1}))\r\n    assert.is_equal(\"same fails\", geterror2(\"same\", {}, {1}))\r\n    assert.is_equal(\"not_same fails\", geterror(\"not_same\", {}, {}))\r\n    assert.is_equal(\"not_same fails\", geterror2(\"not_same\", {}, {}))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 300,
    "text": "it(\"Should use failure message for is_unique assertion: shallow compare\", function()\r\n    assert.is_equal(\"unique fails\", geterror(\"unique\", {1, 1}))\r\n    assert.is_equal(\"unique fails\", geterror2(\"unique\", {1, 1}))\r\n    assert.is_equal(\"not_unique fails\", geterror(\"not_unique\", {1, 0}))\r\n    assert.is_equal(\"not_unique fails\", geterror2(\"not_unique\", {1, 0}))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 301,
    "text": "it(\"Should use failure message for is_unique assertion: nil deep compare\", function()\r\n    assert.is_equal(\"unique fails\", geterror(\"unique\", {1, 1}, nil))\r\n    assert.is_equal(\"unique fails\", geterror2(\"unique\", {1, 1}, nil))\r\n    assert.is_equal(\"not_unique fails\", geterror(\"not_unique\", {1, 0}, nil))\r\n    assert.is_equal(\"not_unique fails\", geterror2(\"not_unique\", {1, 0}, nil))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 302,
    "text": "it(\"Should use failure message for is_unique assertion: deep compare\", function()\r\n    assert.is_equal(\"unique fails\", geterror(\"unique\", {{1}, {1}}, true))\r\n    assert.is_equal(\"unique fails\", geterror2(\"unique\", {{1}, {1}}, true))\r\n    assert.is_equal(\"not_unique fails\", geterror(\"not_unique\", {{0}, {1}}, true))\r\n    assert.is_equal(\"not_unique fails\", geterror2(\"not_unique\", {{0}, {1}}, true))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 303,
    "text": "it(\"Should use failure message for is_unique assertion: deep compare 2\", function()\r\n    local err1 = geterror(\"unique\", {{1}, {1}}, \"unique deep compare 2 fails\", true)\r\n    local err2 = geterror(\"not_unique\", {{0}, {1}}, \"not unique deep compare 2 fails\", true)\r\n    assert.is_equal(\"unique deep compare 2 fails\", err1)\r\n    assert.is_equal(\"not unique deep compare 2 fails\", err2)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 304,
    "text": "it(\"Should use failure message for is_near assertion\", function()\r\n    assert.is_equal(\"is_near fails\", geterror(\"is_near\", 0, 1, 0.5))\r\n    assert.is_equal(\"is_near fails\", geterror2(\"is_near\", 0, 1, 0.5))\r\n    assert.is_equal(\"is_not_near fails\", geterror(\"is_not_near\", 0, 1, 1.5))\r\n    assert.is_equal(\"is_not_near fails\", geterror2(\"is_not_near\", 0, 1, 1.5))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 305,
    "text": "it(\"Should use failure message for matches assertion\", function()\r\n    assert.is_equal(\"matches fails\", geterror(\"matches\", \"%d+\", \"foobar\"))\r\n    assert.is_equal(\"matches fails\", geterror(\"matches\", \"%d+\", \"0foobar\", 2))\r\n    assert.is_equal(\"matches fails\", geterror(\"matches\", \"%d+\", \"foobar\", 1, true))\r\n    assert.is_equal(\"matches fails\", geterror(\"matches\", \"%d+\", \"foobar\", '2', true))\r\n    assert.is_equal(\"matches fails\", geterror2(\"matches\", \"%d+\", \"foobar\"))\r\n    assert.is_equal(\"no_match fails\", geterror(\"no_match\", \"%w+\", \"12345\"))\r\n    assert.is_equal(\"no_match fails\", geterror2(\"no_match\", \"%w+\", \"12345\"))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 306,
    "text": "it(\"Should use failure message for has_error assertion\", function()\r\n    assert.is_equal(\"has_error fails\", geterror(\"has_error\", function()end, nil))\r\n    assert.is_equal(\"has_error fails\", geterror2(\"has_error\", function()end, nil))\r\n    assert.is_equal(\"has_no_error fails\", geterror(\"has_no_error\", error, nil))\r\n    assert.is_equal(\"has_no_error fails\", geterror2(\"has_no_error\", error, nil))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 307,
    "text": "it(\"Should use failure message for error_matches assertion\", function()\r\n    assert.is_equal(\"error_matches fails\", geterror(\"error_matches\", function()end, \"\"))\r\n    assert.is_equal(\"error_matches fails\", geterror(\"error_matches\", function() error(\"1string\") end, \"%d+\", 2))\r\n    assert.is_equal(\"error_matches fails\", geterror(\"error_matches\", function() error(\"1string\") end, \"xyz\", 2, true))\r\n    assert.is_equal(\"error_matches fails\", geterror2(\"error_matches\", function()end, \"\"))\r\n    assert.is_equal(\"no_error_matches fails\", geterror(\"no_error_matches\", function() error(\"string\") end, \"string\"))\r\n    assert.is_equal(\"no_error_matches fails\", geterror2(\"no_error_matches\", function() error(\"string\") end, \"string\"))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 308,
    "text": "it(\"Should use failure message for returned_arguments assertion\", function()\r\n    assert.is_equal(\"returned_arguments fails\", geterror2(\"returned_arguments\", 4, 1, 2, 3))\r\n    assert.is_equal(\"not_returned_arguments fails\", geterror2(\"not_returned_arguments\", 4, 1, 2, 3, 4))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 309,
    "text": "it(\"Should convert objects to string\", function()\r\n    local t = setmetatable({},{__tostring=function(t) return \"empty table\" end})\r\n    assert.is_equal(\"(table) { }\", geterror(\"is_true\", false, {}))\r\n    assert.is_equal(\"(number) 999\", geterror(\"is_true\", false, 999))\r\n    assert.is_equal(\"(boolean) true\", geterror(\"is_true\", false, true))\r\n    assert.is_equal(\"(boolean) false\", geterror(\"is_true\", false, false))\r\n    assert.is_equal(\"empty table\", geterror(\"is_true\", false, t))\r\n\r\n    assert.is_equal(\"(table) { }\", geterror2(\"is_true\", false, {}))\r\n    assert.is_equal(\"(number) 999\", geterror2(\"is_true\", false, 999))\r\n    assert.is_equal(\"(boolean) true\", geterror2(\"is_true\", false, true))\r\n    assert.is_equal(\"(boolean) false\", geterror2(\"is_true\", false, false))\r\n    assert.is_equal(\"empty table\", geterror2(\"is_true\", false, t))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 310,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 311,
    "text": "function() return \"derp\" end",
    "type": "function"
  }, {
    "id": 312,
    "text": "function()\r\n      if ss == \"spy\" then\r\n        spy.on(test, \"key\")\r\n      else\r\n        stub(test, \"key\").returns(\"derp\")\r\n      end\r\n    end",
    "type": "function"
  }, {
    "id": 313,
    "text": "if ss == \"spy\" then\r\n        spy.on(test, \"key\")\r\n      else\r\n        stub(test, \"key\").returns(\"derp\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 314,
    "text": "spy.on(test, \"key\")",
    "type": "statement:functioncall"
  }, {
    "id": 315,
    "text": "stub(test, \"key\").returns(\"derp\")",
    "type": "statement:functioncall"
  }, {
    "id": 316,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 317,
    "text": "function()\r\n      test.key:revert()\r\n    end",
    "type": "function"
  }, {
    "id": 318,
    "text": "test.key:revert()",
    "type": "statement:functioncall"
  }, {
    "id": 319,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 320,
    "text": "function()\r\n      local err1 = geterror(\"was_called\", {}, nil)\r\n      local err2 = geterror2(\"was_called\", {}, nil)\r\n      local ok1 = err1:find(\"^Expected\")\r\n      local ok2 = err2:find(\"^Expected\")\r\n      assert(ok1, \"Output check for called failed\\n    \" .. err1:gsub(\"\\n\",\"\\n    \"))\r\n      assert(ok2, \"Output check for called failed\\n    \" .. err2:gsub(\"\\n\",\"\\n    \"))\r\n    end",
    "type": "function"
  }, {
    "id": 321,
    "text": "local err1 = geterror(\"was_called\", {}, nil)",
    "type": "statement:localassign"
  }, {
    "id": 322,
    "text": "local err2 = geterror2(\"was_called\", {}, nil)",
    "type": "statement:localassign"
  }, {
    "id": 323,
    "text": "local ok1 = err1:find(\"^Expected\")",
    "type": "statement:localassign"
  }, {
    "id": 324,
    "text": "local ok2 = err2:find(\"^Expected\")",
    "type": "statement:localassign"
  }, {
    "id": 325,
    "text": "assert(ok1, \"Output check for called failed\\n    \" .. err1:gsub(\"\\n\",\"\\n    \"))",
    "type": "statement:functioncall"
  }, {
    "id": 326,
    "text": "assert(ok2, \"Output check for called failed\\n    \" .. err2:gsub(\"\\n\",\"\\n    \"))",
    "type": "statement:functioncall"
  }, {
    "id": 327,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 328,
    "text": "function()\r\n      assert.is_equal(\"was_called failed\", geterror(\"was_called\", {}))\r\n      assert.is_equal(\"was_called failed\", geterror2(\"was_called\", {}))\r\n      assert.is_equal(\"was_not_called failed\", geterror(\"was_not_called\", {0}))\r\n      assert.is_equal(\"was_not_called failed\", geterror2(\"was_not_called\", {0}))\r\n    end",
    "type": "function"
  }, {
    "id": 329,
    "text": "assert.is_equal(\"was_called failed\", geterror(\"was_called\", {}))",
    "type": "statement:functioncall"
  }, {
    "id": 330,
    "text": "assert.is_equal(\"was_called failed\", geterror2(\"was_called\", {}))",
    "type": "statement:functioncall"
  }, {
    "id": 331,
    "text": "assert.is_equal(\"was_not_called failed\", geterror(\"was_not_called\", {0}))",
    "type": "statement:functioncall"
  }, {
    "id": 332,
    "text": "assert.is_equal(\"was_not_called failed\", geterror2(\"was_not_called\", {0}))",
    "type": "statement:functioncall"
  }, {
    "id": 333,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 334,
    "text": "function()\r\n      assert.is_equal(\"was_called_at_least failed\", geterror(\"was_called_at_least\", {1}))\r\n      assert.is_equal(\"was_called_at_least failed\", geterror2(\"was_called_at_least\", {1}))\r\n      assert.is_equal(\"was_not_called_at_least failed\", geterror(\"was_not_called_at_least\", {0}))\r\n      assert.is_equal(\"was_not_called_at_least failed\", geterror2(\"was_not_called_at_least\", {0}))\r\n    end",
    "type": "function"
  }, {
    "id": 335,
    "text": "assert.is_equal(\"was_called_at_least failed\", geterror(\"was_called_at_least\", {1}))",
    "type": "statement:functioncall"
  }, {
    "id": 336,
    "text": "assert.is_equal(\"was_called_at_least failed\", geterror2(\"was_called_at_least\", {1}))",
    "type": "statement:functioncall"
  }, {
    "id": 337,
    "text": "assert.is_equal(\"was_not_called_at_least failed\", geterror(\"was_not_called_at_least\", {0}))",
    "type": "statement:functioncall"
  }, {
    "id": 338,
    "text": "assert.is_equal(\"was_not_called_at_least failed\", geterror2(\"was_not_called_at_least\", {0}))",
    "type": "statement:functioncall"
  }, {
    "id": 339,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 340,
    "text": "function()\r\n      test.key()\r\n      assert.is_equal(\"was_called_at_most failed\", geterror(\"was_called_at_most\", {0}))\r\n      assert.is_equal(\"was_called_at_most failed\", geterror2(\"was_called_at_most\", {0}))\r\n      assert.is_equal(\"was_not_called_at_most failed\", geterror(\"was_not_called_at_most\", {1}))\r\n      assert.is_equal(\"was_not_called_at_most failed\", geterror2(\"was_not_called_at_most\", {1}))\r\n    end",
    "type": "function"
  }, {
    "id": 341,
    "text": "test.key()",
    "type": "statement:functioncall"
  }, {
    "id": 342,
    "text": "assert.is_equal(\"was_called_at_most failed\", geterror(\"was_called_at_most\", {0}))",
    "type": "statement:functioncall"
  }, {
    "id": 343,
    "text": "assert.is_equal(\"was_called_at_most failed\", geterror2(\"was_called_at_most\", {0}))",
    "type": "statement:functioncall"
  }, {
    "id": 344,
    "text": "assert.is_equal(\"was_not_called_at_most failed\", geterror(\"was_not_called_at_most\", {1}))",
    "type": "statement:functioncall"
  }, {
    "id": 345,
    "text": "assert.is_equal(\"was_not_called_at_most failed\", geterror2(\"was_not_called_at_most\", {1}))",
    "type": "statement:functioncall"
  }, {
    "id": 346,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 347,
    "text": "function()\r\n      test.key()\r\n      assert.is_equal(\"was_called_more_than failed\", geterror(\"was_called_more_than\", {1}))\r\n      assert.is_equal(\"was_called_more_than failed\", geterror2(\"was_called_more_than\", {1}))\r\n      assert.is_equal(\"was_not_called_more_than failed\", geterror(\"was_not_called_more_than\", {0}))\r\n      assert.is_equal(\"was_not_called_more_than failed\", geterror2(\"was_not_called_more_than\", {0}))\r\n    end",
    "type": "function"
  }, {
    "id": 348,
    "text": "assert.is_equal(\"was_called_more_than failed\", geterror(\"was_called_more_than\", {1}))",
    "type": "statement:functioncall"
  }, {
    "id": 349,
    "text": "assert.is_equal(\"was_called_more_than failed\", geterror2(\"was_called_more_than\", {1}))",
    "type": "statement:functioncall"
  }, {
    "id": 350,
    "text": "assert.is_equal(\"was_not_called_more_than failed\", geterror(\"was_not_called_more_than\", {0}))",
    "type": "statement:functioncall"
  }, {
    "id": 351,
    "text": "assert.is_equal(\"was_not_called_more_than failed\", geterror2(\"was_not_called_more_than\", {0}))",
    "type": "statement:functioncall"
  }, {
    "id": 352,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 353,
    "text": "function()\r\n      test.key()\r\n      assert.is_equal(\"was_called_less_than failed\", geterror(\"was_called_less_than\", {1}))\r\n      assert.is_equal(\"was_called_less_than failed\", geterror2(\"was_called_less_than\", {1}))\r\n      assert.is_equal(\"was_not_called_less_than failed\", geterror(\"was_not_called_less_than\", {2}))\r\n      assert.is_equal(\"was_not_called_less_than failed\", geterror2(\"was_not_called_less_than\", {2}))\r\n    end",
    "type": "function"
  }, {
    "id": 354,
    "text": "assert.is_equal(\"was_called_less_than failed\", geterror(\"was_called_less_than\", {1}))",
    "type": "statement:functioncall"
  }, {
    "id": 355,
    "text": "assert.is_equal(\"was_called_less_than failed\", geterror2(\"was_called_less_than\", {1}))",
    "type": "statement:functioncall"
  }, {
    "id": 356,
    "text": "assert.is_equal(\"was_not_called_less_than failed\", geterror(\"was_not_called_less_than\", {2}))",
    "type": "statement:functioncall"
  }, {
    "id": 357,
    "text": "assert.is_equal(\"was_not_called_less_than failed\", geterror2(\"was_not_called_less_than\", {2}))",
    "type": "statement:functioncall"
  }, {
    "id": 358,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 359,
    "text": "function()\r\n      local err1 = geterror(\"was_called_with\", {}, nil)\r\n      local err2 = geterror(\"was_called_with\", {}, nil)\r\n      local ok1 = err1:find(\"^Function\")\r\n      local ok2 = err2:find(\"^Function\")\r\n      assert(ok1, \"Output check for called_with failed\\n    \" .. err1:gsub(\"\\n\",\"\\n    \"))\r\n      assert(ok2, \"Output check for called_with failed\\n    \" .. err2:gsub(\"\\n\",\"\\n    \"))\r\n    end",
    "type": "function"
  }, {
    "id": 360,
    "text": "local err1 = geterror(\"was_called_with\", {}, nil)",
    "type": "statement:localassign"
  }, {
    "id": 361,
    "text": "local err2 = geterror(\"was_called_with\", {}, nil)",
    "type": "statement:localassign"
  }, {
    "id": 362,
    "text": "local ok1 = err1:find(\"^Function\")",
    "type": "statement:localassign"
  }, {
    "id": 363,
    "text": "local ok2 = err2:find(\"^Function\")",
    "type": "statement:localassign"
  }, {
    "id": 364,
    "text": "assert(ok1, \"Output check for called_with failed\\n    \" .. err1:gsub(\"\\n\",\"\\n    \"))",
    "type": "statement:functioncall"
  }, {
    "id": 365,
    "text": "assert(ok2, \"Output check for called_with failed\\n    \" .. err2:gsub(\"\\n\",\"\\n    \"))",
    "type": "statement:functioncall"
  }, {
    "id": 366,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 367,
    "text": "function()\r\n      test.key()\r\n      assert.is_equal(\"was_called_with failed\", geterror(\"was_called_with\", {1}))\r\n      assert.is_equal(\"was_called_with failed\", geterror2(\"was_called_with\", {1}))\r\n      assert.is_equal(\"was_not_called_with failed\", geterror(\"was_not_called_with\", {}))\r\n      assert.is_equal(\"was_not_called_with failed\", geterror2(\"was_not_called_with\", {}))\r\n    end",
    "type": "function"
  }, {
    "id": 368,
    "text": "assert.is_equal(\"was_called_with failed\", geterror(\"was_called_with\", {1}))",
    "type": "statement:functioncall"
  }, {
    "id": 369,
    "text": "assert.is_equal(\"was_called_with failed\", geterror2(\"was_called_with\", {1}))",
    "type": "statement:functioncall"
  }, {
    "id": 370,
    "text": "assert.is_equal(\"was_not_called_with failed\", geterror(\"was_not_called_with\", {}))",
    "type": "statement:functioncall"
  }, {
    "id": 371,
    "text": "assert.is_equal(\"was_not_called_with failed\", geterror2(\"was_not_called_with\", {}))",
    "type": "statement:functioncall"
  }, {
    "id": 372,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 373,
    "text": "function()\r\n      test.key()\r\n      assert.is_equal(\"was_returned_with failed\", geterror(\"was_returned_with\", {1}))\r\n      assert.is_equal(\"was_returned_with failed\", geterror2(\"was_returned_with\", {1}))\r\n      assert.is_equal(\"was_not_returned_with failed\", geterror(\"was_not_returned_with\", {\"derp\"}))\r\n      assert.is_equal(\"was_not_returned_with failed\", geterror2(\"was_not_returned_with\", {\"derp\"}))\r\n    end",
    "type": "function"
  }, {
    "id": 374,
    "text": "assert.is_equal(\"was_returned_with failed\", geterror(\"was_returned_with\", {1}))",
    "type": "statement:functioncall"
  }, {
    "id": 375,
    "text": "assert.is_equal(\"was_returned_with failed\", geterror2(\"was_returned_with\", {1}))",
    "type": "statement:functioncall"
  }, {
    "id": 376,
    "text": "assert.is_equal(\"was_not_returned_with failed\", geterror(\"was_not_returned_with\", {\"derp\"}))",
    "type": "statement:functioncall"
  }, {
    "id": 377,
    "text": "assert.is_equal(\"was_not_returned_with failed\", geterror2(\"was_not_returned_with\", {\"derp\"}))",
    "type": "statement:functioncall"
  }, {
    "id": 378,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 379,
    "text": "function(t) return \"empty table\" end",
    "type": "function"
  }, {
    "id": 380,
    "text": "function()\r\n      local t = setmetatable({},{__tostring=function(t) return \"empty table\" end})\r\n      assert.is_equal(\"(table) { }\", geterror(\"was_called\", {}, {}))\r\n      assert.is_equal(\"(number) 999\", geterror(\"was_called\", {}, 999))\r\n      assert.is_equal(\"(boolean) true\", geterror(\"was_called\", {}, true))\r\n      assert.is_equal(\"(boolean) false\", geterror(\"was_called\", {}, false))\r\n      assert.is_equal(\"empty table\", geterror(\"was_called\", {}, t))\r\n\r\n      assert.is_equal(\"(table) { }\", geterror2(\"was_called\", {}, {}))\r\n      assert.is_equal(\"(number) 999\", geterror2(\"was_called\", {}, 999))\r\n      assert.is_equal(\"(boolean) true\", geterror2(\"was_called\", {}, true))\r\n      assert.is_equal(\"(boolean) false\", geterror2(\"was_called\", {}, false))\r\n      assert.is_equal(\"empty table\", geterror2(\"was_called\", {}, t))\r\n    end",
    "type": "function"
  }, {
    "id": 381,
    "text": "assert.is_equal(\"(table) { }\", geterror(\"was_called\", {}, {}))",
    "type": "statement:functioncall"
  }, {
    "id": 382,
    "text": "assert.is_equal(\"(number) 999\", geterror(\"was_called\", {}, 999))",
    "type": "statement:functioncall"
  }, {
    "id": 383,
    "text": "assert.is_equal(\"(boolean) true\", geterror(\"was_called\", {}, true))",
    "type": "statement:functioncall"
  }, {
    "id": 384,
    "text": "assert.is_equal(\"(boolean) false\", geterror(\"was_called\", {}, false))",
    "type": "statement:functioncall"
  }, {
    "id": 385,
    "text": "assert.is_equal(\"empty table\", geterror(\"was_called\", {}, t))",
    "type": "statement:functioncall"
  }, {
    "id": 386,
    "text": "assert.is_equal(\"(table) { }\", geterror2(\"was_called\", {}, {}))",
    "type": "statement:functioncall"
  }, {
    "id": 387,
    "text": "assert.is_equal(\"(number) 999\", geterror2(\"was_called\", {}, 999))",
    "type": "statement:functioncall"
  }, {
    "id": 388,
    "text": "assert.is_equal(\"(boolean) true\", geterror2(\"was_called\", {}, true))",
    "type": "statement:functioncall"
  }, {
    "id": 389,
    "text": "assert.is_equal(\"(boolean) false\", geterror2(\"was_called\", {}, false))",
    "type": "statement:functioncall"
  }, {
    "id": 390,
    "text": "assert.is_equal(\"empty table\", geterror2(\"was_called\", {}, t))",
    "type": "statement:functioncall"
  }, {
    "id": 391,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 392,
    "text": "function()\r\n    local test = {key = function() return \"derp\" end}\r\n\r\n    local geterror = function(key, args, ...)\r\n      local err = select('#', ...) == 0 and key .. \" failed\" or ...\r\n      local success, message = pcall(assert[ss](test.key, err)[key], unpack(args))\r\n      if message == nil then return nil end\r\n      message = tostring(message):gsub(\"\\n.*\", \"\"):gsub(\"^.-:%d+: \", \"\", 1)\r\n      return message\r\n    end\r\n\r\n    local geterror2 = function(key, args, ...)\r\n      local err = select('#', ...) == 0 and key .. \" failed\" or ...\r\n      local success, message = pcall(assert.message(err).spy(test.key)[key], unpack(args))\r\n      if message == nil then return nil end\r\n      message = tostring(message):gsub(\"\\n.*\", \"\"):gsub(\"^.-:%d+: \", \"\", 1)\r\n      return message\r\n    end\r\n\r\n    before_each(function()\r\n      if ss == \"spy\" then\r\n        spy.on(test, \"key\")\r\n      else\r\n        stub(test, \"key\").returns(\"derp\")\r\n      end\r\n    end)\r\n\r\n    after_each(function()\r\n      test.key:revert()\r\n    end)\r\n\r\n    it(\"Should use standard failure message if none provided for called\", function()\r\n      local err1 = geterror(\"was_called\", {}, nil)\r\n      local err2 = geterror2(\"was_called\", {}, nil)\r\n      local ok1 = err1:find(\"^Expected\")\r\n      local ok2 = err2:find(\"^Expected\")\r\n      assert(ok1, \"Output check for called failed\\n    \" .. err1:gsub(\"\\n\",\"\\n    \"))\r\n      assert(ok2, \"Output check for called failed\\n    \" .. err2:gsub(\"\\n\",\"\\n    \"))\r\n    end)\r\n\r\n    it(\"Should use failure message for \" .. ss .. \" called assertion\", function()\r\n      assert.is_equal(\"was_called failed\", geterror(\"was_called\", {}))\r\n      assert.is_equal(\"was_called failed\", geterror2(\"was_called\", {}))\r\n      assert.is_equal(\"was_not_called failed\", geterror(\"was_not_called\", {0}))\r\n      assert.is_equal(\"was_not_called failed\", geterror2(\"was_not_called\", {0}))\r\n    end)\r\n\r\n    it(\"Should use failure message for \" .. ss .. \" called_at_least assertion\", function()\r\n      assert.is_equal(\"was_called_at_least failed\", geterror(\"was_called_at_least\", {1}))\r\n      assert.is_equal(\"was_called_at_least failed\", geterror2(\"was_called_at_least\", {1}))\r\n      assert.is_equal(\"was_not_called_at_least failed\", geterror(\"was_not_called_at_least\", {0}))\r\n      assert.is_equal(\"was_not_called_at_least failed\", geterror2(\"was_not_called_at_least\", {0}))\r\n    end)\r\n\r\n    it(\"Should use failure message for \" .. ss .. \" called_at_most assertion\", function()\r\n      test.key()\r\n      assert.is_equal(\"was_called_at_most failed\", geterror(\"was_called_at_most\", {0}))\r\n      assert.is_equal(\"was_called_at_most failed\", geterror2(\"was_called_at_most\", {0}))\r\n      assert.is_equal(\"was_not_called_at_most failed\", geterror(\"was_not_called_at_most\", {1}))\r\n      assert.is_equal(\"was_not_called_at_most failed\", geterror2(\"was_not_called_at_most\", {1}))\r\n    end)\r\n\r\n    it(\"Should use failure message for \" .. ss .. \" called_more_than assertion\", function()\r\n      test.key()\r\n      assert.is_equal(\"was_called_more_than failed\", geterror(\"was_called_more_than\", {1}))\r\n      assert.is_equal(\"was_called_more_than failed\", geterror2(\"was_called_more_than\", {1}))\r\n      assert.is_equal(\"was_not_called_more_than failed\", geterror(\"was_not_called_more_than\", {0}))\r\n      assert.is_equal(\"was_not_called_more_than failed\", geterror2(\"was_not_called_more_than\", {0}))\r\n    end)\r\n\r\n    it(\"Should use failure message for \" .. ss .. \" called_less_than assertion\", function()\r\n      test.key()\r\n      assert.is_equal(\"was_called_less_than failed\", geterror(\"was_called_less_than\", {1}))\r\n      assert.is_equal(\"was_called_less_than failed\", geterror2(\"was_called_less_than\", {1}))\r\n      assert.is_equal(\"was_not_called_less_than failed\", geterror(\"was_not_called_less_than\", {2}))\r\n      assert.is_equal(\"was_not_called_less_than failed\", geterror2(\"was_not_called_less_than\", {2}))\r\n    end)\r\n\r\n    it(\"Should use standard failure message if none provided for called_with\", function()\r\n      local err1 = geterror(\"was_called_with\", {}, nil)\r\n      local err2 = geterror(\"was_called_with\", {}, nil)\r\n      local ok1 = err1:find(\"^Function\")\r\n      local ok2 = err2:find(\"^Function\")\r\n      assert(ok1, \"Output check for called_with failed\\n    \" .. err1:gsub(\"\\n\",\"\\n    \"))\r\n      assert(ok2, \"Output check for called_with failed\\n    \" .. err2:gsub(\"\\n\",\"\\n    \"))\r\n    end)\r\n\r\n    it(\"Should use failure message for \" .. ss .. \" called_with assertion\", function()\r\n      test.key()\r\n      assert.is_equal(\"was_called_with failed\", geterror(\"was_called_with\", {1}))\r\n      assert.is_equal(\"was_called_with failed\", geterror2(\"was_called_with\", {1}))\r\n      assert.is_equal(\"was_not_called_with failed\", geterror(\"was_not_called_with\", {}))\r\n      assert.is_equal(\"was_not_called_with failed\", geterror2(\"was_not_called_with\", {}))\r\n    end)\r\n\r\n    it(\"Should use failure message for \" .. ss .. \" returned_with assertion\", function()\r\n      test.key()\r\n      assert.is_equal(\"was_returned_with failed\", geterror(\"was_returned_with\", {1}))\r\n      assert.is_equal(\"was_returned_with failed\", geterror2(\"was_returned_with\", {1}))\r\n      assert.is_equal(\"was_not_returned_with failed\", geterror(\"was_not_returned_with\", {\"derp\"}))\r\n      assert.is_equal(\"was_not_returned_with failed\", geterror2(\"was_not_returned_with\", {\"derp\"}))\r\n    end)\r\n\r\n    it(\"Should convert objects to string\", function()\r\n      local t = setmetatable({},{__tostring=function(t) return \"empty table\" end})\r\n      assert.is_equal(\"(table) { }\", geterror(\"was_called\", {}, {}))\r\n      assert.is_equal(\"(number) 999\", geterror(\"was_called\", {}, 999))\r\n      assert.is_equal(\"(boolean) true\", geterror(\"was_called\", {}, true))\r\n      assert.is_equal(\"(boolean) false\", geterror(\"was_called\", {}, false))\r\n      assert.is_equal(\"empty table\", geterror(\"was_called\", {}, t))\r\n\r\n      assert.is_equal(\"(table) { }\", geterror2(\"was_called\", {}, {}))\r\n      assert.is_equal(\"(number) 999\", geterror2(\"was_called\", {}, 999))\r\n      assert.is_equal(\"(boolean) true\", geterror2(\"was_called\", {}, true))\r\n      assert.is_equal(\"(boolean) false\", geterror2(\"was_called\", {}, false))\r\n      assert.is_equal(\"empty table\", geterror2(\"was_called\", {}, t))\r\n    end)\r\n\r\n  end",
    "type": "function"
  }, {
    "id": 393,
    "text": "local test = {key = function() return \"derp\" end}",
    "type": "statement:localassign"
  }, {
    "id": 394,
    "text": "local geterror = function(key, args, ...)\r\n      local err = select('#', ...) == 0 and key .. \" failed\" or ...\r\n      local success, message = pcall(assert[ss](test.key, err)[key], unpack(args))\r\n      if message == nil then return nil end\r\n      message = tostring(message):gsub(\"\\n.*\", \"\"):gsub(\"^.-:%d+: \", \"\", 1)\r\n      return message\r\n    end",
    "type": "statement:localassign"
  }, {
    "id": 395,
    "text": "local geterror2 = function(key, args, ...)\r\n      local err = select('#', ...) == 0 and key .. \" failed\" or ...\r\n      local success, message = pcall(assert.message(err).spy(test.key)[key], unpack(args))\r\n      if message == nil then return nil end\r\n      message = tostring(message):gsub(\"\\n.*\", \"\"):gsub(\"^.-:%d+: \", \"\", 1)\r\n      return message\r\n    end",
    "type": "statement:localassign"
  }, {
    "id": 396,
    "text": "before_each(function()\r\n      if ss == \"spy\" then\r\n        spy.on(test, \"key\")\r\n      else\r\n        stub(test, \"key\").returns(\"derp\")\r\n      end\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 397,
    "text": "after_each(function()\r\n      test.key:revert()\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 398,
    "text": "it(\"Should use standard failure message if none provided for called\", function()\r\n      local err1 = geterror(\"was_called\", {}, nil)\r\n      local err2 = geterror2(\"was_called\", {}, nil)\r\n      local ok1 = err1:find(\"^Expected\")\r\n      local ok2 = err2:find(\"^Expected\")\r\n      assert(ok1, \"Output check for called failed\\n    \" .. err1:gsub(\"\\n\",\"\\n    \"))\r\n      assert(ok2, \"Output check for called failed\\n    \" .. err2:gsub(\"\\n\",\"\\n    \"))\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 399,
    "text": "it(\"Should use failure message for \" .. ss .. \" called assertion\", function()\r\n      assert.is_equal(\"was_called failed\", geterror(\"was_called\", {}))\r\n      assert.is_equal(\"was_called failed\", geterror2(\"was_called\", {}))\r\n      assert.is_equal(\"was_not_called failed\", geterror(\"was_not_called\", {0}))\r\n      assert.is_equal(\"was_not_called failed\", geterror2(\"was_not_called\", {0}))\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 400,
    "text": "it(\"Should use failure message for \" .. ss .. \" called_at_least assertion\", function()\r\n      assert.is_equal(\"was_called_at_least failed\", geterror(\"was_called_at_least\", {1}))\r\n      assert.is_equal(\"was_called_at_least failed\", geterror2(\"was_called_at_least\", {1}))\r\n      assert.is_equal(\"was_not_called_at_least failed\", geterror(\"was_not_called_at_least\", {0}))\r\n      assert.is_equal(\"was_not_called_at_least failed\", geterror2(\"was_not_called_at_least\", {0}))\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 401,
    "text": "it(\"Should use failure message for \" .. ss .. \" called_at_most assertion\", function()\r\n      test.key()\r\n      assert.is_equal(\"was_called_at_most failed\", geterror(\"was_called_at_most\", {0}))\r\n      assert.is_equal(\"was_called_at_most failed\", geterror2(\"was_called_at_most\", {0}))\r\n      assert.is_equal(\"was_not_called_at_most failed\", geterror(\"was_not_called_at_most\", {1}))\r\n      assert.is_equal(\"was_not_called_at_most failed\", geterror2(\"was_not_called_at_most\", {1}))\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 402,
    "text": "it(\"Should use failure message for \" .. ss .. \" called_more_than assertion\", function()\r\n      test.key()\r\n      assert.is_equal(\"was_called_more_than failed\", geterror(\"was_called_more_than\", {1}))\r\n      assert.is_equal(\"was_called_more_than failed\", geterror2(\"was_called_more_than\", {1}))\r\n      assert.is_equal(\"was_not_called_more_than failed\", geterror(\"was_not_called_more_than\", {0}))\r\n      assert.is_equal(\"was_not_called_more_than failed\", geterror2(\"was_not_called_more_than\", {0}))\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 403,
    "text": "it(\"Should use failure message for \" .. ss .. \" called_less_than assertion\", function()\r\n      test.key()\r\n      assert.is_equal(\"was_called_less_than failed\", geterror(\"was_called_less_than\", {1}))\r\n      assert.is_equal(\"was_called_less_than failed\", geterror2(\"was_called_less_than\", {1}))\r\n      assert.is_equal(\"was_not_called_less_than failed\", geterror(\"was_not_called_less_than\", {2}))\r\n      assert.is_equal(\"was_not_called_less_than failed\", geterror2(\"was_not_called_less_than\", {2}))\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 404,
    "text": "it(\"Should use standard failure message if none provided for called_with\", function()\r\n      local err1 = geterror(\"was_called_with\", {}, nil)\r\n      local err2 = geterror(\"was_called_with\", {}, nil)\r\n      local ok1 = err1:find(\"^Function\")\r\n      local ok2 = err2:find(\"^Function\")\r\n      assert(ok1, \"Output check for called_with failed\\n    \" .. err1:gsub(\"\\n\",\"\\n    \"))\r\n      assert(ok2, \"Output check for called_with failed\\n    \" .. err2:gsub(\"\\n\",\"\\n    \"))\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 405,
    "text": "it(\"Should use failure message for \" .. ss .. \" called_with assertion\", function()\r\n      test.key()\r\n      assert.is_equal(\"was_called_with failed\", geterror(\"was_called_with\", {1}))\r\n      assert.is_equal(\"was_called_with failed\", geterror2(\"was_called_with\", {1}))\r\n      assert.is_equal(\"was_not_called_with failed\", geterror(\"was_not_called_with\", {}))\r\n      assert.is_equal(\"was_not_called_with failed\", geterror2(\"was_not_called_with\", {}))\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 406,
    "text": "it(\"Should use failure message for \" .. ss .. \" returned_with assertion\", function()\r\n      test.key()\r\n      assert.is_equal(\"was_returned_with failed\", geterror(\"was_returned_with\", {1}))\r\n      assert.is_equal(\"was_returned_with failed\", geterror2(\"was_returned_with\", {1}))\r\n      assert.is_equal(\"was_not_returned_with failed\", geterror(\"was_not_returned_with\", {\"derp\"}))\r\n      assert.is_equal(\"was_not_returned_with failed\", geterror2(\"was_not_returned_with\", {\"derp\"}))\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 407,
    "text": "it(\"Should convert objects to string\", function()\r\n      local t = setmetatable({},{__tostring=function(t) return \"empty table\" end})\r\n      assert.is_equal(\"(table) { }\", geterror(\"was_called\", {}, {}))\r\n      assert.is_equal(\"(number) 999\", geterror(\"was_called\", {}, 999))\r\n      assert.is_equal(\"(boolean) true\", geterror(\"was_called\", {}, true))\r\n      assert.is_equal(\"(boolean) false\", geterror(\"was_called\", {}, false))\r\n      assert.is_equal(\"empty table\", geterror(\"was_called\", {}, t))\r\n\r\n      assert.is_equal(\"(table) { }\", geterror2(\"was_called\", {}, {}))\r\n      assert.is_equal(\"(number) 999\", geterror2(\"was_called\", {}, 999))\r\n      assert.is_equal(\"(boolean) true\", geterror2(\"was_called\", {}, true))\r\n      assert.is_equal(\"(boolean) false\", geterror2(\"was_called\", {}, false))\r\n      assert.is_equal(\"empty table\", geterror2(\"was_called\", {}, t))\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 408,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 409,
    "text": "",
    "type": "function container"
  }, {
    "id": 410,
    "text": "key",
    "type": "global function"
  }, {
    "id": 411,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 412,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 413,
    "text": "on",
    "type": "global function"
  }, {
    "id": 414,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 415,
    "text": "stub",
    "type": "global function"
  }, {
    "id": 416,
    "text": "it",
    "type": "global function"
  }, {
    "id": 417,
    "text": "before_each",
    "type": "global function"
  }, {
    "id": 418,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 419,
    "text": "select",
    "type": "global function"
  }, {
    "id": 420,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 421,
    "text": "assert[ss]",
    "type": "global function"
  }, {
    "id": 422,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 423,
    "text": "message",
    "type": "global function"
  }, {
    "id": 424,
    "text": "is_equal",
    "type": "global function"
  }, {
    "id": 425,
    "text": "require",
    "type": "global function"
  }, {
    "id": 426,
    "text": "error",
    "type": "global function"
  }, {
    "id": 427,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 428,
    "text": "after_each",
    "type": "global function"
  }, {
    "id": 429,
    "text": "create",
    "type": "global function"
  }, {
    "id": 430,
    "text": "",
    "type": "variable container"
  }, {
    "id": 431,
    "text": "",
    "type": "require container"
  }, {
    "id": 432,
    "text": "",
    "type": "require local variable"
  } ]
}