{
  "_filename": "assertions.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luassert/src/assertions.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 9,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 13,
    "label": "has",
    "to": 18
  }, {
    "from": 9,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 9,
    "label": "has",
    "to": 3
  }, {
    "from": 9,
    "label": "has",
    "to": 3
  }, {
    "from": 9,
    "label": "has",
    "to": 3
  }, {
    "from": 9,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 12
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 25,
    "label": "has",
    "to": 29
  }, {
    "from": 25,
    "label": "has",
    "to": 30
  }, {
    "from": 25,
    "label": "has",
    "to": 31
  }, {
    "from": 25,
    "label": "has",
    "to": 32
  }, {
    "from": 25,
    "label": "has",
    "to": 33
  }, {
    "from": 25,
    "label": "has",
    "to": 34
  }, {
    "from": 25,
    "label": "has",
    "to": 35
  }, {
    "from": 25,
    "label": "has",
    "to": 36
  }, {
    "from": 25,
    "label": "has",
    "to": 37
  }, {
    "from": 25,
    "label": "has",
    "to": 38
  }, {
    "from": 25,
    "label": "has",
    "to": 39
  }, {
    "from": 25,
    "label": "has",
    "to": 3
  }, {
    "from": 25,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 26
  }, {
    "from": 41,
    "label": "has",
    "to": 12
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 41,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 41,
    "label": "has",
    "to": 47
  }, {
    "from": 41,
    "label": "has",
    "to": 48
  }, {
    "from": 41,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 41,
    "label": "has",
    "to": 54
  }, {
    "from": 41,
    "label": "has",
    "to": 55
  }, {
    "from": 41,
    "label": "has",
    "to": 56
  }, {
    "from": 41,
    "label": "has",
    "to": 57
  }, {
    "from": 41,
    "label": "has",
    "to": 58
  }, {
    "from": 41,
    "label": "has",
    "to": 59
  }, {
    "from": 41,
    "label": "has",
    "to": 35
  }, {
    "from": 41,
    "label": "has",
    "to": 60
  }, {
    "from": 41,
    "label": "has",
    "to": 61
  }, {
    "from": 41,
    "label": "has",
    "to": 62
  }, {
    "from": 41,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 63,
    "label": "has",
    "to": 66
  }, {
    "from": 63,
    "label": "has",
    "to": 67
  }, {
    "from": 41,
    "label": "has",
    "to": 3
  }, {
    "from": 41,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 26
  }, {
    "from": 69,
    "label": "has",
    "to": 12
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 69,
    "label": "has",
    "to": 35
  }, {
    "from": 69,
    "label": "has",
    "to": 15
  }, {
    "from": 69,
    "label": "has",
    "to": 3
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 26
  }, {
    "from": 73,
    "label": "has",
    "to": 12
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 35
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 75,
    "label": "has",
    "to": 78
  }, {
    "from": 75,
    "label": "has",
    "to": 79
  }, {
    "from": 75,
    "label": "has",
    "to": 15
  }, {
    "from": 73,
    "label": "has",
    "to": 3
  }, {
    "from": 73,
    "label": "has",
    "to": 80
  }, {
    "from": 73,
    "label": "has",
    "to": 35
  }, {
    "from": 73,
    "label": "has",
    "to": 15
  }, {
    "from": 73,
    "label": "has",
    "to": 3
  }, {
    "from": 73,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 18
  }, {
    "from": 82,
    "label": "has",
    "to": 3
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 3
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 26
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 86,
    "label": "has",
    "to": 89
  }, {
    "from": 86,
    "label": "has",
    "to": 90
  }, {
    "from": 86,
    "label": "has",
    "to": 91
  }, {
    "from": 86,
    "label": "has",
    "to": 92
  }, {
    "from": 86,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 86,
    "label": "has",
    "to": 95
  }, {
    "from": 86,
    "label": "has",
    "to": 96
  }, {
    "from": 86,
    "label": "has",
    "to": 97
  }, {
    "from": 86,
    "label": "has",
    "to": 98
  }, {
    "from": 86,
    "label": "has",
    "to": 99
  }, {
    "from": 86,
    "label": "has",
    "to": 100
  }, {
    "from": 86,
    "label": "has",
    "to": 101
  }, {
    "from": 86,
    "label": "has",
    "to": 102
  }, {
    "from": 86,
    "label": "has",
    "to": 103
  }, {
    "from": 86,
    "label": "has",
    "to": 3
  }, {
    "from": 86,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 105,
    "label": "has",
    "to": 95
  }, {
    "from": 104,
    "label": "has",
    "to": 107
  }, {
    "from": 104,
    "label": "has",
    "to": 108
  }, {
    "from": 86,
    "label": "has",
    "to": 3
  }, {
    "from": 86,
    "label": "has",
    "to": 3
  }, {
    "from": 86,
    "label": "has",
    "to": 3
  }, {
    "from": 86,
    "label": "has",
    "to": 109
  }, {
    "from": 110,
    "label": "has",
    "to": 26
  }, {
    "from": 110,
    "label": "has",
    "to": 87
  }, {
    "from": 110,
    "label": "has",
    "to": 12
  }, {
    "from": 110,
    "label": "has",
    "to": 88
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 110,
    "label": "has",
    "to": 112
  }, {
    "from": 110,
    "label": "has",
    "to": 113
  }, {
    "from": 110,
    "label": "has",
    "to": 114
  }, {
    "from": 110,
    "label": "has",
    "to": 115
  }, {
    "from": 110,
    "label": "has",
    "to": 48
  }, {
    "from": 110,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 110,
    "label": "has",
    "to": 54
  }, {
    "from": 110,
    "label": "has",
    "to": 55
  }, {
    "from": 110,
    "label": "has",
    "to": 59
  }, {
    "from": 110,
    "label": "has",
    "to": 92
  }, {
    "from": 110,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 110,
    "label": "has",
    "to": 95
  }, {
    "from": 110,
    "label": "has",
    "to": 96
  }, {
    "from": 110,
    "label": "has",
    "to": 97
  }, {
    "from": 110,
    "label": "has",
    "to": 98
  }, {
    "from": 110,
    "label": "has",
    "to": 119
  }, {
    "from": 110,
    "label": "has",
    "to": 100
  }, {
    "from": 110,
    "label": "has",
    "to": 120
  }, {
    "from": 110,
    "label": "has",
    "to": 102
  }, {
    "from": 110,
    "label": "has",
    "to": 121
  }, {
    "from": 110,
    "label": "has",
    "to": 3
  }, {
    "from": 110,
    "label": "has",
    "to": 122
  }, {
    "from": 110,
    "label": "has",
    "to": 3
  }, {
    "from": 110,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 106
  }, {
    "from": 123,
    "label": "has",
    "to": 95
  }, {
    "from": 110,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 62
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 124,
    "label": "has",
    "to": 126
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 126,
    "label": "has",
    "to": 128
  }, {
    "from": 126,
    "label": "has",
    "to": 129
  }, {
    "from": 126,
    "label": "has",
    "to": 130
  }, {
    "from": 124,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 110,
    "label": "has",
    "to": 3
  }, {
    "from": 110,
    "label": "has",
    "to": 3
  }, {
    "from": 110,
    "label": "has",
    "to": 133
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 134,
    "label": "has",
    "to": 15
  }, {
    "from": 134,
    "label": "has",
    "to": 3
  }, {
    "from": 134,
    "label": "has",
    "to": 136
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 137,
    "label": "has",
    "to": 15
  }, {
    "from": 137,
    "label": "has",
    "to": 3
  }, {
    "from": 137,
    "label": "has",
    "to": 139
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 140,
    "label": "has",
    "to": 37
  }, {
    "from": 140,
    "label": "has",
    "to": 142
  }, {
    "from": 140,
    "label": "has",
    "to": 15
  }, {
    "from": 140,
    "label": "has",
    "to": 3
  }, {
    "from": 140,
    "label": "has",
    "to": 143
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 144,
    "label": "has",
    "to": 146
  }, {
    "from": 144,
    "label": "has",
    "to": 37
  }, {
    "from": 144,
    "label": "has",
    "to": 147
  }, {
    "from": 144,
    "label": "has",
    "to": 142
  }, {
    "from": 144,
    "label": "has",
    "to": 148
  }, {
    "from": 148,
    "label": "has",
    "to": 97
  }, {
    "from": 144,
    "label": "has",
    "to": 3
  }, {
    "from": 144,
    "label": "has",
    "to": 149
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 150,
    "label": "has",
    "to": 152
  }, {
    "from": 153,
    "label": "has",
    "to": 3
  }, {
    "from": 154,
    "label": "has",
    "to": 3
  }, {
    "from": 155,
    "label": "has",
    "to": 3
  }, {
    "from": 156,
    "label": "has",
    "to": 3
  }, {
    "from": 157,
    "label": "has",
    "to": 3
  }, {
    "from": 158,
    "label": "has",
    "to": 3
  }, {
    "from": 159,
    "label": "has",
    "to": 3
  }, {
    "from": 160,
    "label": "has",
    "to": 3
  }, {
    "from": 86,
    "label": "calls",
    "to": 73
  }, {
    "from": 25,
    "label": "calls",
    "to": 2
  }, {
    "from": 25,
    "label": "calls",
    "to": 2
  }, {
    "from": 25,
    "label": "calls",
    "to": 2
  }, {
    "from": 41,
    "label": "calls",
    "to": 2
  }, {
    "from": 25,
    "label": "calls",
    "to": 171
  }, {
    "from": 25,
    "label": "calls",
    "to": 171
  }, {
    "from": 25,
    "label": "calls",
    "to": 171
  }, {
    "from": 25,
    "label": "calls",
    "to": 171
  }, {
    "from": 41,
    "label": "calls",
    "to": 171
  }, {
    "from": 41,
    "label": "calls",
    "to": 171
  }, {
    "from": 41,
    "label": "calls",
    "to": 171
  }, {
    "from": 41,
    "label": "calls",
    "to": 171
  }, {
    "from": 69,
    "label": "calls",
    "to": 171
  }, {
    "from": 73,
    "label": "calls",
    "to": 171
  }, {
    "from": 86,
    "label": "calls",
    "to": 171
  }, {
    "from": 110,
    "label": "calls",
    "to": 171
  }, {
    "from": 110,
    "label": "calls",
    "to": 171
  }, {
    "from": 110,
    "label": "calls",
    "to": 171
  }, {
    "from": 110,
    "label": "calls",
    "to": 171
  }, {
    "from": 9,
    "label": "calls",
    "to": 175
  }, {
    "from": 9,
    "label": "calls",
    "to": 175
  }, {
    "from": 2,
    "label": "calls",
    "to": 169
  }, {
    "from": 25,
    "label": "calls",
    "to": 169
  }, {
    "from": 41,
    "label": "calls",
    "to": 169
  }, {
    "from": 41,
    "label": "calls",
    "to": 169
  }, {
    "from": 69,
    "label": "calls",
    "to": 169
  }, {
    "from": 73,
    "label": "calls",
    "to": 169
  }, {
    "from": 86,
    "label": "calls",
    "to": 169
  }, {
    "from": 86,
    "label": "calls",
    "to": 169
  }, {
    "from": 86,
    "label": "calls",
    "to": 169
  }, {
    "from": 110,
    "label": "calls",
    "to": 169
  }, {
    "from": 110,
    "label": "calls",
    "to": 169
  }, {
    "from": 144,
    "label": "calls",
    "to": 169
  }, {
    "from": 144,
    "label": "calls",
    "to": 169
  }, {
    "from": 25,
    "label": "calls",
    "to": 172
  }, {
    "from": 25,
    "label": "calls",
    "to": 172
  }, {
    "from": 25,
    "label": "calls",
    "to": 172
  }, {
    "from": 41,
    "label": "calls",
    "to": 172
  }, {
    "from": 41,
    "label": "calls",
    "to": 172
  }, {
    "from": 86,
    "label": "calls",
    "to": 172
  }, {
    "from": 110,
    "label": "calls",
    "to": 172
  }, {
    "from": 110,
    "label": "calls",
    "to": 172
  }, {
    "from": 9,
    "label": "calls",
    "to": 164
  }, {
    "from": 73,
    "label": "calls",
    "to": 164
  }, {
    "from": 25,
    "label": "calls",
    "to": 173
  }, {
    "from": 25,
    "label": "calls",
    "to": 173
  }, {
    "from": 25,
    "label": "calls",
    "to": 173
  }, {
    "from": 25,
    "label": "calls",
    "to": 173
  }, {
    "from": 41,
    "label": "calls",
    "to": 173
  }, {
    "from": 41,
    "label": "calls",
    "to": 173
  }, {
    "from": 41,
    "label": "calls",
    "to": 173
  }, {
    "from": 41,
    "label": "calls",
    "to": 173
  }, {
    "from": 69,
    "label": "calls",
    "to": 173
  }, {
    "from": 73,
    "label": "calls",
    "to": 173
  }, {
    "from": 86,
    "label": "calls",
    "to": 173
  }, {
    "from": 110,
    "label": "calls",
    "to": 173
  }, {
    "from": 110,
    "label": "calls",
    "to": 173
  }, {
    "from": 110,
    "label": "calls",
    "to": 173
  }, {
    "from": 110,
    "label": "calls",
    "to": 173
  }, {
    "from": 25,
    "label": "calls",
    "to": 168
  }, {
    "from": 41,
    "label": "calls",
    "to": 168
  }, {
    "from": 69,
    "label": "calls",
    "to": 168
  }, {
    "from": 73,
    "label": "calls",
    "to": 168
  }, {
    "from": 73,
    "label": "calls",
    "to": 168
  }, {
    "from": 134,
    "label": "calls",
    "to": 168
  }, {
    "from": 137,
    "label": "calls",
    "to": 168
  }, {
    "from": 140,
    "label": "calls",
    "to": 168
  }, {
    "from": 86,
    "label": "calls",
    "to": 165
  }, {
    "from": 110,
    "label": "calls",
    "to": 165
  }, {
    "from": 41,
    "label": "calls",
    "to": 167
  }, {
    "from": 86,
    "label": "calls",
    "to": 167
  }, {
    "from": 110,
    "label": "calls",
    "to": 167
  }, {
    "from": 84,
    "label": "calls",
    "to": 82
  }, {
    "from": 86,
    "label": "calls",
    "to": 170
  }, {
    "from": 110,
    "label": "calls",
    "to": 170
  }, {
    "from": 25,
    "label": "calls",
    "to": 162
  }, {
    "from": 41,
    "label": "calls",
    "to": 162
  }, {
    "from": 41,
    "label": "calls",
    "to": 162
  }, {
    "from": 69,
    "label": "calls",
    "to": 162
  }, {
    "from": 73,
    "label": "calls",
    "to": 162
  }, {
    "from": 73,
    "label": "calls",
    "to": 162
  }, {
    "from": 110,
    "label": "calls",
    "to": 162
  }, {
    "from": 9,
    "label": "calls",
    "to": 5
  }, {
    "from": 9,
    "label": "calls",
    "to": 5
  }, {
    "from": 25,
    "label": "calls",
    "to": 5
  }, {
    "from": 41,
    "label": "calls",
    "to": 5
  }, {
    "from": 69,
    "label": "calls",
    "to": 5
  }, {
    "from": 73,
    "label": "calls",
    "to": 5
  }, {
    "from": 73,
    "label": "calls",
    "to": 5
  }, {
    "from": 82,
    "label": "calls",
    "to": 5
  }, {
    "from": 86,
    "label": "calls",
    "to": 5
  }, {
    "from": 110,
    "label": "calls",
    "to": 5
  }, {
    "from": 134,
    "label": "calls",
    "to": 5
  }, {
    "from": 137,
    "label": "calls",
    "to": 5
  }, {
    "from": 140,
    "label": "calls",
    "to": 5
  }, {
    "from": 153,
    "label": "calls",
    "to": 140
  }, {
    "from": 154,
    "label": "calls",
    "to": 140
  }, {
    "from": 155,
    "label": "calls",
    "to": 140
  }, {
    "from": 156,
    "label": "calls",
    "to": 140
  }, {
    "from": 157,
    "label": "calls",
    "to": 140
  }, {
    "from": 158,
    "label": "calls",
    "to": 140
  }, {
    "from": 159,
    "label": "calls",
    "to": 140
  }, {
    "from": 160,
    "label": "calls",
    "to": 140
  }, {
    "from": 9,
    "label": "calls",
    "to": 176
  }, {
    "from": 9,
    "label": "calls",
    "to": 176
  }, {
    "from": 41,
    "label": "calls",
    "to": 176
  }, {
    "from": 41,
    "label": "calls",
    "to": 176
  }, {
    "from": 41,
    "label": "calls",
    "to": 176
  }, {
    "from": 41,
    "label": "calls",
    "to": 176
  }, {
    "from": 41,
    "label": "calls",
    "to": 176
  }, {
    "from": 73,
    "label": "calls",
    "to": 176
  }, {
    "from": 73,
    "label": "calls",
    "to": 176
  }, {
    "from": 86,
    "label": "calls",
    "to": 176
  }, {
    "from": 86,
    "label": "calls",
    "to": 176
  }, {
    "from": 86,
    "label": "calls",
    "to": 176
  }, {
    "from": 86,
    "label": "calls",
    "to": 176
  }, {
    "from": 86,
    "label": "calls",
    "to": 176
  }, {
    "from": 86,
    "label": "calls",
    "to": 176
  }, {
    "from": 110,
    "label": "calls",
    "to": 176
  }, {
    "from": 110,
    "label": "calls",
    "to": 176
  }, {
    "from": 110,
    "label": "calls",
    "to": 176
  }, {
    "from": 110,
    "label": "calls",
    "to": 176
  }, {
    "from": 110,
    "label": "calls",
    "to": 176
  }, {
    "from": 110,
    "label": "calls",
    "to": 176
  }, {
    "from": 110,
    "label": "calls",
    "to": 176
  }, {
    "from": 140,
    "label": "calls",
    "to": 176
  }, {
    "from": 161,
    "label": "calls",
    "to": 174
  }, {
    "from": 161,
    "label": "calls",
    "to": 174
  }, {
    "from": 161,
    "label": "calls",
    "to": 174
  }, {
    "from": 161,
    "label": "calls",
    "to": 174
  }, {
    "from": 2,
    "label": "calls",
    "to": 166
  }, {
    "from": 86,
    "label": "calls",
    "to": 163
  }, {
    "from": 110,
    "label": "calls",
    "to": 163
  }, {
    "from": 1,
    "label": "contains",
    "to": 161
  }, {
    "from": 161,
    "label": "declares",
    "to": 2
  }, {
    "from": 161,
    "label": "declares",
    "to": 5
  }, {
    "from": 161,
    "label": "declares",
    "to": 9
  }, {
    "from": 161,
    "label": "declares",
    "to": 25
  }, {
    "from": 161,
    "label": "declares",
    "to": 41
  }, {
    "from": 161,
    "label": "declares",
    "to": 69
  }, {
    "from": 161,
    "label": "declares",
    "to": 73
  }, {
    "from": 161,
    "label": "declares",
    "to": 82
  }, {
    "from": 161,
    "label": "declares",
    "to": 84
  }, {
    "from": 161,
    "label": "declares",
    "to": 86
  }, {
    "from": 161,
    "label": "declares",
    "to": 110
  }, {
    "from": 161,
    "label": "declares",
    "to": 134
  }, {
    "from": 161,
    "label": "declares",
    "to": 137
  }, {
    "from": 161,
    "label": "declares",
    "to": 140
  }, {
    "from": 161,
    "label": "declares",
    "to": 144
  }, {
    "from": 161,
    "label": "declares",
    "to": 150
  }, {
    "from": 161,
    "label": "declares",
    "to": 153
  }, {
    "from": 161,
    "label": "declares",
    "to": 154
  }, {
    "from": 161,
    "label": "declares",
    "to": 155
  }, {
    "from": 161,
    "label": "declares",
    "to": 156
  }, {
    "from": 161,
    "label": "declares",
    "to": 157
  }, {
    "from": 161,
    "label": "declares",
    "to": 158
  }, {
    "from": 161,
    "label": "declares",
    "to": 159
  }, {
    "from": 161,
    "label": "declares",
    "to": 160
  }, {
    "from": 1,
    "label": "contains",
    "to": 177
  }, {
    "from": 1,
    "label": "contains",
    "to": 178
  }, {
    "from": 178,
    "label": "initializes",
    "to": 179
  }, {
    "from": 179,
    "label": "requires",
    "to": 180
  }, {
    "from": 178,
    "label": "initializes",
    "to": 181
  }, {
    "from": 181,
    "label": "requires",
    "to": 182
  }, {
    "from": 178,
    "label": "initializes",
    "to": 183
  }, {
    "from": 183,
    "label": "requires",
    "to": 184
  }, {
    "from": 178,
    "label": "initializes",
    "to": 185
  }, {
    "from": 185,
    "label": "requires",
    "to": 186
  }, {
    "from": 187,
    "label": "requires",
    "to": 180
  }, {
    "from": 188,
    "label": "requires",
    "to": 180
  }, {
    "from": 189,
    "label": "requires",
    "to": 186
  }, {
    "from": 190,
    "label": "requires",
    "to": 186
  }, {
    "from": 191,
    "label": "requires",
    "to": 186
  }, {
    "from": 192,
    "label": "requires",
    "to": 186
  }, {
    "from": 193,
    "label": "requires",
    "to": 186
  }, {
    "from": 194,
    "label": "requires",
    "to": 186
  }, {
    "from": 195,
    "label": "requires",
    "to": 186
  }, {
    "from": 196,
    "label": "requires",
    "to": 186
  }, {
    "from": 197,
    "label": "requires",
    "to": 186
  }, {
    "from": 198,
    "label": "requires",
    "to": 180
  }, {
    "from": 199,
    "label": "requires",
    "to": 186
  }, {
    "from": 200,
    "label": "requires",
    "to": 180
  }, {
    "from": 201,
    "label": "requires",
    "to": 182
  }, {
    "from": 202,
    "label": "requires",
    "to": 184
  }, {
    "from": 203,
    "label": "requires",
    "to": 186
  }, {
    "from": 204,
    "label": "requires",
    "to": 180
  }, {
    "from": 205,
    "label": "requires",
    "to": 180
  }, {
    "from": 206,
    "label": "requires",
    "to": 184
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "assertions",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function format(val)\r\n  return astate.format_argument(val) or tostring(val)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "local function set_failure_message(state, message)\r\n  if message ~= nil then\r\n    state.failure_message = message\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "if message ~= nil then\r\n    state.failure_message = message\r\n  end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "state.failure_message = message",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "local function unique(state, arguments, level)\r\n  local list = arguments[1]\r\n  local deep\r\n  local argcnt = arguments.n\r\n  if type(arguments[2]) == \"boolean\" or (arguments[2] == nil and argcnt > 2) then\r\n    deep = arguments[2]\r\n    set_failure_message(state, arguments[3])\r\n  else\r\n    if type(arguments[3]) == \"boolean\" then\r\n      deep = arguments[3]\r\n    end\r\n    set_failure_message(state, arguments[2])\r\n  end\r\n  for k,v in pairs(list) do\r\n    for k2, v2 in pairs(list) do\r\n      if k ~= k2 then\r\n        if deep and util.deepcompare(v, v2, true) then\r\n          return false\r\n        else\r\n          if v == v2 then\r\n            return false\r\n          end\r\n        end\r\n      end\r\n    end\r\n  end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "local list = arguments[1]",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "local deep",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "local argcnt = arguments.n",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "if type(arguments[2]) == \"boolean\" or (arguments[2] == nil and argcnt > 2) then\r\n    deep = arguments[2]\r\n    set_failure_message(state, arguments[3])\r\n  else\r\n    if type(arguments[3]) == \"boolean\" then\r\n      deep = arguments[3]\r\n    end\r\n    set_failure_message(state, arguments[2])\r\n  end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "deep = arguments[2]",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "set_failure_message(state, arguments[3])",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "if type(arguments[3]) == \"boolean\" then\r\n      deep = arguments[3]\r\n    end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "deep = arguments[3]",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "set_failure_message(state, arguments[2])",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "for k,v in pairs(list) do\r\n    for k2, v2 in pairs(list) do\r\n      if k ~= k2 then\r\n        if deep and util.deepcompare(v, v2, true) then\r\n          return false\r\n        else\r\n          if v == v2 then\r\n            return false\r\n          end\r\n        end\r\n      end\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 20,
    "text": "for k2, v2 in pairs(list) do\r\n      if k ~= k2 then\r\n        if deep and util.deepcompare(v, v2, true) then\r\n          return false\r\n        else\r\n          if v == v2 then\r\n            return false\r\n          end\r\n        end\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 21,
    "text": "if k ~= k2 then\r\n        if deep and util.deepcompare(v, v2, true) then\r\n          return false\r\n        else\r\n          if v == v2 then\r\n            return false\r\n          end\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "if deep and util.deepcompare(v, v2, true) then\r\n          return false\r\n        else\r\n          if v == v2 then\r\n            return false\r\n          end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "if v == v2 then\r\n            return false\r\n          end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "local function near(state, arguments, level)\r\n  local level = (level or 1) + 1\r\n  local argcnt = arguments.n\r\n  assert(argcnt > 2, s(\"assertion.internal.argtolittle\", { \"near\", 3, tostring(argcnt) }), level)\r\n  local expected = tonumber(arguments[1])\r\n  local actual = tonumber(arguments[2])\r\n  local tolerance = tonumber(arguments[3])\r\n  local numbertype = \"number or object convertible to a number\"\r\n  assert(expected, s(\"assertion.internal.badargtype\", { 1, \"near\", numbertype, format(arguments[1]) }), level)\r\n  assert(actual, s(\"assertion.internal.badargtype\", { 2, \"near\", numbertype, format(arguments[2]) }), level)\r\n  assert(tolerance, s(\"assertion.internal.badargtype\", { 3, \"near\", numbertype, format(arguments[3]) }), level)\r\n  -- switch arguments for proper output message\r\n  util.tinsert(arguments, 1, util.tremove(arguments, 2))\r\n  arguments[3] = tolerance\r\n  arguments.nofmt = arguments.nofmt or {}\r\n  arguments.nofmt[3] = true\r\n  set_failure_message(state, arguments[4])\r\n  return (actual >= expected - tolerance and actual <= expected + tolerance)\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "local level = (level or 1) + 1",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "assert(argcnt > 2, s(\"assertion.internal.argtolittle\", { \"near\", 3, tostring(argcnt) }), level)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "local expected = tonumber(arguments[1])",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "local actual = tonumber(arguments[2])",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "local tolerance = tonumber(arguments[3])",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "local numbertype = \"number or object convertible to a number\"",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "assert(expected, s(\"assertion.internal.badargtype\", { 1, \"near\", numbertype, format(arguments[1]) }), level)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "assert(actual, s(\"assertion.internal.badargtype\", { 2, \"near\", numbertype, format(arguments[2]) }), level)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "assert(tolerance, s(\"assertion.internal.badargtype\", { 3, \"near\", numbertype, format(arguments[3]) }), level)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "util.tinsert(arguments, 1, util.tremove(arguments, 2))",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "arguments[3] = tolerance",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "arguments.nofmt = arguments.nofmt or {}",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "arguments.nofmt[3] = true",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "set_failure_message(state, arguments[4])",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "local function matches(state, arguments, level)\r\n  local level = (level or 1) + 1\r\n  local argcnt = arguments.n\r\n  assert(argcnt > 1, s(\"assertion.internal.argtolittle\", { \"matches\", 2, tostring(argcnt) }), level)\r\n  local pattern = arguments[1]\r\n  local actual = nil\r\n  if util.hastostring(arguments[2]) or type(arguments[2]) == \"number\" then\r\n    actual = tostring(arguments[2])\r\n  end\r\n  local err_message\r\n  local init_arg_num = 3\r\n  for i=3,argcnt,1 do\r\n    if arguments[i] and type(arguments[i]) ~= \"boolean\" and not tonumber(arguments[i]) then\r\n      if i == 3 then init_arg_num = init_arg_num + 1 end\r\n      err_message = util.tremove(arguments, i)\r\n      break\r\n    end\r\n  end\r\n  local init = arguments[3]\r\n  local plain = arguments[4]\r\n  local stringtype = \"string or object convertible to a string\"\r\n  assert(type(pattern) == \"string\", s(\"assertion.internal.badargtype\", { 1, \"matches\", \"string\", type(arguments[1]) }), level)\r\n  assert(actual, s(\"assertion.internal.badargtype\", { 2, \"matches\", stringtype, format(arguments[2]) }), level)\r\n  assert(init == nil or tonumber(init), s(\"assertion.internal.badargtype\", { init_arg_num, \"matches\", \"number\", type(arguments[3]) }), level)\r\n  -- switch arguments for proper output message\r\n  util.tinsert(arguments, 1, util.tremove(arguments, 2))\r\n  set_failure_message(state, err_message)\r\n  local retargs\r\n  local ok\r\n  if plain then\r\n    ok = (actual:find(pattern, init, plain) ~= nil)\r\n    retargs = ok and { pattern } or {}\r\n  else\r\n    retargs = { actual:match(pattern, init) }\r\n    ok = (retargs[1] ~= nil)\r\n  end\r\n  return ok, retargs\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "assert(argcnt > 1, s(\"assertion.internal.argtolittle\", { \"matches\", 2, tostring(argcnt) }), level)",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "local pattern = arguments[1]",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "local actual = nil",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "if util.hastostring(arguments[2]) or type(arguments[2]) == \"number\" then\r\n    actual = tostring(arguments[2])\r\n  end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "actual = tostring(arguments[2])",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "local err_message",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "local init_arg_num = 3",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "for i=3,argcnt,1 do\r\n    if arguments[i] and type(arguments[i]) ~= \"boolean\" and not tonumber(arguments[i]) then\r\n      if i == 3 then init_arg_num = init_arg_num + 1 end\r\n      err_message = util.tremove(arguments, i)\r\n      break\r\n    end\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 50,
    "text": "if arguments[i] and type(arguments[i]) ~= \"boolean\" and not tonumber(arguments[i]) then\r\n      if i == 3 then init_arg_num = init_arg_num + 1 end\r\n      err_message = util.tremove(arguments, i)\r\n      break\r\n    end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "if i == 3 then init_arg_num = init_arg_num + 1 end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "init_arg_num = init_arg_num + 1",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "err_message = util.tremove(arguments, i)",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "local init = arguments[3]",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "local plain = arguments[4]",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "local stringtype = \"string or object convertible to a string\"",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "assert(type(pattern) == \"string\", s(\"assertion.internal.badargtype\", { 1, \"matches\", \"string\", type(arguments[1]) }), level)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "assert(actual, s(\"assertion.internal.badargtype\", { 2, \"matches\", stringtype, format(arguments[2]) }), level)",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "assert(init == nil or tonumber(init), s(\"assertion.internal.badargtype\", { init_arg_num, \"matches\", \"number\", type(arguments[3]) }), level)",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "set_failure_message(state, err_message)",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "local retargs",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "local ok",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "if plain then\r\n    ok = (actual:find(pattern, init, plain) ~= nil)\r\n    retargs = ok and { pattern } or {}\r\n  else\r\n    retargs = { actual:match(pattern, init) }\r\n    ok = (retargs[1] ~= nil)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "ok = (actual:find(pattern, init, plain) ~= nil)",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "retargs = ok and { pattern } or {}",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "retargs = { actual:match(pattern, init) }",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "ok = (retargs[1] ~= nil)",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "local function equals(state, arguments, level)\r\n  local level = (level or 1) + 1\r\n  local argcnt = arguments.n\r\n  assert(argcnt > 1, s(\"assertion.internal.argtolittle\", { \"equals\", 2, tostring(argcnt) }), level)\r\n  local result =  arguments[1] == arguments[2]\r\n  -- switch arguments for proper output message\r\n  util.tinsert(arguments, 1, util.tremove(arguments, 2))\r\n  set_failure_message(state, arguments[3])\r\n  return result\r\nend",
    "type": "function"
  }, {
    "id": 70,
    "text": "assert(argcnt > 1, s(\"assertion.internal.argtolittle\", { \"equals\", 2, tostring(argcnt) }), level)",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "local result =  arguments[1] == arguments[2]",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "local function same(state, arguments, level)\r\n  local level = (level or 1) + 1\r\n  local argcnt = arguments.n\r\n  assert(argcnt > 1, s(\"assertion.internal.argtolittle\", { \"same\", 2, tostring(argcnt) }), level)\r\n  if type(arguments[1]) == 'table' and type(arguments[2]) == 'table' then\r\n    local result, crumbs = util.deepcompare(arguments[1], arguments[2], true)\r\n    -- switch arguments for proper output message\r\n    util.tinsert(arguments, 1, util.tremove(arguments, 2))\r\n    arguments.fmtargs = arguments.fmtargs or {}\r\n    arguments.fmtargs[1] = { crumbs = crumbs }\r\n    arguments.fmtargs[2] = { crumbs = crumbs }\r\n    set_failure_message(state, arguments[3])\r\n    return result\r\n  end\r\n  local result = arguments[1] == arguments[2]\r\n  -- switch arguments for proper output message\r\n  util.tinsert(arguments, 1, util.tremove(arguments, 2))\r\n  set_failure_message(state, arguments[3])\r\n  return result\r\nend",
    "type": "function"
  }, {
    "id": 74,
    "text": "assert(argcnt > 1, s(\"assertion.internal.argtolittle\", { \"same\", 2, tostring(argcnt) }), level)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "if type(arguments[1]) == 'table' and type(arguments[2]) == 'table' then\r\n    local result, crumbs = util.deepcompare(arguments[1], arguments[2], true)\r\n    -- switch arguments for proper output message\r\n    util.tinsert(arguments, 1, util.tremove(arguments, 2))\r\n    arguments.fmtargs = arguments.fmtargs or {}\r\n    arguments.fmtargs[1] = { crumbs = crumbs }\r\n    arguments.fmtargs[2] = { crumbs = crumbs }\r\n    set_failure_message(state, arguments[3])\r\n    return result\r\n  end",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "local result, crumbs = util.deepcompare(arguments[1], arguments[2], true)",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "arguments.fmtargs = arguments.fmtargs or {}",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "arguments.fmtargs[1] = { crumbs = crumbs }",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "arguments.fmtargs[2] = { crumbs = crumbs }",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "local result = arguments[1] == arguments[2]",
    "type": "statement:localassign"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "local function truthy(state, arguments, level)\r\n  set_failure_message(state, arguments[2])\r\n  return arguments[1] ~= false and arguments[1] ~= nil\r\nend",
    "type": "function"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "local function falsy(state, arguments, level)\r\n  return not truthy(state, arguments, level)\r\nend",
    "type": "function"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "local function has_error(state, arguments, level)\r\n  local level = (level or 1) + 1\r\n  local retargs = util.shallowcopy(arguments)\r\n  local func = arguments[1]\r\n  local err_expected = arguments[2]\r\n  local failure_message = arguments[3]\r\n  assert(util.callable(func), s(\"assertion.internal.badargtype\", { 1, \"error\", \"function or callable object\", type(func) }), level)\r\n  local ok, err_actual = pcall(func)\r\n  if type(err_actual) == 'string' then\r\n    -- remove 'path/to/file:line: ' from string\r\n    err_actual = err_actual:gsub('^.-:%d+: ', '', 1)\r\n  end\r\n  retargs[1] = err_actual\r\n  arguments.nofmt = {}\r\n  arguments.n = 2\r\n  arguments[1] = (ok and '(no error)' or err_actual)\r\n  arguments[2] = (err_expected == nil and '(error)' or err_expected)\r\n  arguments.nofmt[1] = ok\r\n  arguments.nofmt[2] = (err_expected == nil)\r\n  set_failure_message(state, failure_message)\r\n\r\n  if ok or err_expected == nil then\r\n    return not ok, retargs\r\n  end\r\n  if type(err_expected) == 'string' then\r\n    -- err_actual must be (convertible to) a string\r\n    if util.hastostring(err_actual) then\r\n      err_actual = tostring(err_actual)\r\n      retargs[1] = err_actual\r\n    end\r\n    if type(err_actual) == 'string' then\r\n      return err_expected == err_actual, retargs\r\n    end\r\n  elseif type(err_expected) == 'number' then\r\n    if type(err_actual) == 'string' then\r\n      return tostring(err_expected) == tostring(tonumber(err_actual)), retargs\r\n    end\r\n  end\r\n  return same(state, {err_expected, err_actual, [\"n\"] = 2}), retargs\r\nend",
    "type": "function"
  }, {
    "id": 87,
    "text": "local retargs = util.shallowcopy(arguments)",
    "type": "statement:localassign"
  }, {
    "id": 88,
    "text": "local func = arguments[1]",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "local err_expected = arguments[2]",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "local failure_message = arguments[3]",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "assert(util.callable(func), s(\"assertion.internal.badargtype\", { 1, \"error\", \"function or callable object\", type(func) }), level)",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "local ok, err_actual = pcall(func)",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "if type(err_actual) == 'string' then\r\n    -- remove 'path/to/file:line: ' from string\r\n    err_actual = err_actual:gsub('^.-:%d+: ', '', 1)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 94,
    "text": "err_actual = err_actual:gsub('^.-:%d+: ', '', 1)",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "retargs[1] = err_actual",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "arguments.nofmt = {}",
    "type": "statement:assign"
  }, {
    "id": 97,
    "text": "arguments.n = 2",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "arguments[1] = (ok and '(no error)' or err_actual)",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "arguments[2] = (err_expected == nil and '(error)' or err_expected)",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "arguments.nofmt[1] = ok",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "arguments.nofmt[2] = (err_expected == nil)",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "set_failure_message(state, failure_message)",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "if ok or err_expected == nil then\r\n    return not ok, retargs\r\n  end",
    "type": "statement:if"
  }, {
    "id": 104,
    "text": "if type(err_expected) == 'string' then\r\n    -- err_actual must be (convertible to) a string\r\n    if util.hastostring(err_actual) then\r\n      err_actual = tostring(err_actual)\r\n      retargs[1] = err_actual\r\n    end\r\n    if type(err_actual) == 'string' then\r\n      return err_expected == err_actual, retargs\r\n    end\r\n  elseif type(err_expected) == 'number' then\r\n    if type(err_actual) == 'string' then\r\n      return tostring(err_expected) == tostring(tonumber(err_actual)), retargs\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 105,
    "text": "if util.hastostring(err_actual) then\r\n      err_actual = tostring(err_actual)\r\n      retargs[1] = err_actual\r\n    end",
    "type": "statement:if"
  }, {
    "id": 106,
    "text": "err_actual = tostring(err_actual)",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "if type(err_actual) == 'string' then\r\n      return err_expected == err_actual, retargs\r\n    end",
    "type": "statement:if"
  }, {
    "id": 108,
    "text": "if type(err_actual) == 'string' then\r\n      return tostring(err_expected) == tostring(tonumber(err_actual)), retargs\r\n    end",
    "type": "statement:if"
  }, {
    "id": 109,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 110,
    "text": "local function error_matches(state, arguments, level)\r\n  local level = (level or 1) + 1\r\n  local retargs = util.shallowcopy(arguments)\r\n  local argcnt = arguments.n\r\n  local func = arguments[1]\r\n  local pattern = arguments[2]\r\n  assert(argcnt > 1, s(\"assertion.internal.argtolittle\", { \"error_matches\", 2, tostring(argcnt) }), level)\r\n  assert(util.callable(func), s(\"assertion.internal.badargtype\", { 1, \"error_matches\", \"function or callable object\", type(func) }), level)\r\n  assert(pattern == nil or type(pattern) == \"string\", s(\"assertion.internal.badargtype\", { 2, \"error\", \"string\", type(pattern) }), level)\r\n\r\n  local failure_message\r\n  local init_arg_num = 3\r\n  for i=3,argcnt,1 do\r\n    if arguments[i] and type(arguments[i]) ~= \"boolean\" and not tonumber(arguments[i]) then\r\n      if i == 3 then init_arg_num = init_arg_num + 1 end\r\n      failure_message = util.tremove(arguments, i)\r\n      break\r\n    end\r\n  end\r\n  local init = arguments[3]\r\n  local plain = arguments[4]\r\n  assert(init == nil or tonumber(init), s(\"assertion.internal.badargtype\", { init_arg_num, \"matches\", \"number\", type(arguments[3]) }), level)\r\n\r\n  local ok, err_actual = pcall(func)\r\n  if type(err_actual) == 'string' then\r\n    -- remove 'path/to/file:line: ' from string\r\n    err_actual = err_actual:gsub('^.-:%d+: ', '', 1)\r\n  end\r\n  retargs[1] = err_actual\r\n  arguments.nofmt = {}\r\n  arguments.n = 2\r\n  arguments[1] = (ok and '(no error)' or err_actual)\r\n  arguments[2] = pattern\r\n  arguments.nofmt[1] = ok\r\n  arguments.nofmt[2] = false\r\n  set_failure_message(state, failure_message)\r\n\r\n  if ok then return not ok, retargs end\r\n  if err_actual == nil and pattern == nil then\r\n    return true, {}\r\n  end\r\n\r\n  -- err_actual must be (convertible to) a string\r\n  if util.hastostring(err_actual) then\r\n    err_actual = tostring(err_actual)\r\n    retargs[1] = err_actual\r\n  end\r\n  if type(err_actual) == 'string' then\r\n    local ok\r\n    local retargs_ok\r\n    if plain then\r\n      retargs_ok = { pattern }\r\n      ok = (err_actual:find(pattern, init, plain) ~= nil)\r\n    else\r\n      retargs_ok = { err_actual:match(pattern, init) }\r\n      ok = (retargs_ok[1] ~= nil)\r\n    end\r\n    if ok then retargs = retargs_ok end\r\n    return ok, retargs\r\n  end\r\n\r\n  return false, retargs\r\nend",
    "type": "function"
  }, {
    "id": 111,
    "text": "local pattern = arguments[2]",
    "type": "statement:localassign"
  }, {
    "id": 112,
    "text": "assert(argcnt > 1, s(\"assertion.internal.argtolittle\", { \"error_matches\", 2, tostring(argcnt) }), level)",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "assert(util.callable(func), s(\"assertion.internal.badargtype\", { 1, \"error_matches\", \"function or callable object\", type(func) }), level)",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "assert(pattern == nil or type(pattern) == \"string\", s(\"assertion.internal.badargtype\", { 2, \"error\", \"string\", type(pattern) }), level)",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "local failure_message",
    "type": "statement:localassign"
  }, {
    "id": 116,
    "text": "for i=3,argcnt,1 do\r\n    if arguments[i] and type(arguments[i]) ~= \"boolean\" and not tonumber(arguments[i]) then\r\n      if i == 3 then init_arg_num = init_arg_num + 1 end\r\n      failure_message = util.tremove(arguments, i)\r\n      break\r\n    end\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 117,
    "text": "if arguments[i] and type(arguments[i]) ~= \"boolean\" and not tonumber(arguments[i]) then\r\n      if i == 3 then init_arg_num = init_arg_num + 1 end\r\n      failure_message = util.tremove(arguments, i)\r\n      break\r\n    end",
    "type": "statement:if"
  }, {
    "id": 118,
    "text": "failure_message = util.tremove(arguments, i)",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "arguments[2] = pattern",
    "type": "statement:assign"
  }, {
    "id": 120,
    "text": "arguments.nofmt[2] = false",
    "type": "statement:assign"
  }, {
    "id": 121,
    "text": "if ok then return not ok, retargs end",
    "type": "statement:if"
  }, {
    "id": 122,
    "text": "if err_actual == nil and pattern == nil then\r\n    return true, {}\r\n  end",
    "type": "statement:if"
  }, {
    "id": 123,
    "text": "if util.hastostring(err_actual) then\r\n    err_actual = tostring(err_actual)\r\n    retargs[1] = err_actual\r\n  end",
    "type": "statement:if"
  }, {
    "id": 124,
    "text": "if type(err_actual) == 'string' then\r\n    local ok\r\n    local retargs_ok\r\n    if plain then\r\n      retargs_ok = { pattern }\r\n      ok = (err_actual:find(pattern, init, plain) ~= nil)\r\n    else\r\n      retargs_ok = { err_actual:match(pattern, init) }\r\n      ok = (retargs_ok[1] ~= nil)\r\n    end\r\n    if ok then retargs = retargs_ok end\r\n    return ok, retargs\r\n  end",
    "type": "statement:if"
  }, {
    "id": 125,
    "text": "local retargs_ok",
    "type": "statement:localassign"
  }, {
    "id": 126,
    "text": "if plain then\r\n      retargs_ok = { pattern }\r\n      ok = (err_actual:find(pattern, init, plain) ~= nil)\r\n    else\r\n      retargs_ok = { err_actual:match(pattern, init) }\r\n      ok = (retargs_ok[1] ~= nil)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 127,
    "text": "retargs_ok = { pattern }",
    "type": "statement:assign"
  }, {
    "id": 128,
    "text": "ok = (err_actual:find(pattern, init, plain) ~= nil)",
    "type": "statement:assign"
  }, {
    "id": 129,
    "text": "retargs_ok = { err_actual:match(pattern, init) }",
    "type": "statement:assign"
  }, {
    "id": 130,
    "text": "ok = (retargs_ok[1] ~= nil)",
    "type": "statement:assign"
  }, {
    "id": 131,
    "text": "if ok then retargs = retargs_ok end",
    "type": "statement:if"
  }, {
    "id": 132,
    "text": "retargs = retargs_ok",
    "type": "statement:assign"
  }, {
    "id": 133,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 134,
    "text": "local function is_true(state, arguments, level)\r\n  util.tinsert(arguments, 2, true)\r\n  set_failure_message(state, arguments[3])\r\n  return arguments[1] == arguments[2]\r\nend",
    "type": "function"
  }, {
    "id": 135,
    "text": "util.tinsert(arguments, 2, true)",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 137,
    "text": "local function is_false(state, arguments, level)\r\n  util.tinsert(arguments, 2, false)\r\n  set_failure_message(state, arguments[3])\r\n  return arguments[1] == arguments[2]\r\nend",
    "type": "function"
  }, {
    "id": 138,
    "text": "util.tinsert(arguments, 2, false)",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 140,
    "text": "local function is_type(state, arguments, level, etype)\r\n  util.tinsert(arguments, 2, \"type \" .. etype)\r\n  arguments.nofmt = arguments.nofmt or {}\r\n  arguments.nofmt[2] = true\r\n  set_failure_message(state, arguments[3])\r\n  return arguments.n > 1 and type(arguments[1]) == etype\r\nend",
    "type": "function"
  }, {
    "id": 141,
    "text": "util.tinsert(arguments, 2, \"type \" .. etype)",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "arguments.nofmt[2] = true",
    "type": "statement:assign"
  }, {
    "id": 143,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 144,
    "text": "local function returned_arguments(state, arguments, level)\r\n  arguments[1] = tostring(arguments[1])\r\n  arguments[2] = tostring(arguments.n - 1)\r\n  arguments.nofmt = arguments.nofmt or {}\r\n  arguments.nofmt[1] = true\r\n  arguments.nofmt[2] = true\r\n  if arguments.n < 2 then arguments.n = 2 end\r\n  return arguments[1] == arguments[2]\r\nend",
    "type": "function"
  }, {
    "id": 145,
    "text": "arguments[1] = tostring(arguments[1])",
    "type": "statement:assign"
  }, {
    "id": 146,
    "text": "arguments[2] = tostring(arguments.n - 1)",
    "type": "statement:assign"
  }, {
    "id": 147,
    "text": "arguments.nofmt[1] = true",
    "type": "statement:assign"
  }, {
    "id": 148,
    "text": "if arguments.n < 2 then arguments.n = 2 end",
    "type": "statement:if"
  }, {
    "id": 149,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 150,
    "text": "local function set_message(state, arguments, level)\r\n  state.failure_message = arguments[1]\r\nend",
    "type": "function"
  }, {
    "id": 151,
    "text": "state.failure_message = arguments[1]",
    "type": "statement:assign"
  }, {
    "id": 152,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 153,
    "text": "local function is_boolean(state, arguments, level)  return is_type(state, arguments, level, \"boolean\")  end",
    "type": "function"
  }, {
    "id": 154,
    "text": "local function is_number(state, arguments, level)   return is_type(state, arguments, level, \"number\")   end",
    "type": "function"
  }, {
    "id": 155,
    "text": "local function is_string(state, arguments, level)   return is_type(state, arguments, level, \"string\")   end",
    "type": "function"
  }, {
    "id": 156,
    "text": "local function is_table(state, arguments, level)    return is_type(state, arguments, level, \"table\")    end",
    "type": "function"
  }, {
    "id": 157,
    "text": "local function is_nil(state, arguments, level)      return is_type(state, arguments, level, \"nil\")      end",
    "type": "function"
  }, {
    "id": 158,
    "text": "local function is_userdata(state, arguments, level) return is_type(state, arguments, level, \"userdata\") end",
    "type": "function"
  }, {
    "id": 159,
    "text": "local function is_function(state, arguments, level) return is_type(state, arguments, level, \"function\") end",
    "type": "function"
  }, {
    "id": 160,
    "text": "local function is_thread(state, arguments, level)   return is_type(state, arguments, level, \"thread\")   end",
    "type": "function"
  }, {
    "id": 161,
    "text": "",
    "type": "function container"
  }, {
    "id": 162,
    "text": "tremove",
    "type": "global function"
  }, {
    "id": 163,
    "text": "callable",
    "type": "global function"
  }, {
    "id": 164,
    "text": "deepcompare",
    "type": "global function"
  }, {
    "id": 165,
    "text": "shallowcopy",
    "type": "global function"
  }, {
    "id": 166,
    "text": "format_argument",
    "type": "global function"
  }, {
    "id": 167,
    "text": "hastostring",
    "type": "global function"
  }, {
    "id": 168,
    "text": "tinsert",
    "type": "global function"
  }, {
    "id": 169,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 170,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 171,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 172,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 173,
    "text": "s",
    "type": "global function"
  }, {
    "id": 174,
    "text": "require",
    "type": "global function"
  }, {
    "id": 175,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 176,
    "text": "type",
    "type": "global function"
  }, {
    "id": 177,
    "text": "",
    "type": "variable container"
  }, {
    "id": 178,
    "text": "",
    "type": "require container"
  }, {
    "id": 179,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 180,
    "text": "assert)",
    "type": "module"
  }, {
    "id": 181,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 182,
    "text": "state)",
    "type": "module"
  }, {
    "id": 183,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 184,
    "text": "util)",
    "type": "module"
  }, {
    "id": 185,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 186,
    "text": "(say)",
    "type": "module"
  }, {
    "id": 187,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 188,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 189,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 190,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 191,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 192,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 193,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 194,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 195,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 196,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 197,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 198,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 199,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 200,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 201,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 202,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 203,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 204,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 205,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 206,
    "text": "",
    "type": "require local variable"
  } ]
}