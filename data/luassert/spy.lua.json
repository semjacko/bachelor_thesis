{
  "_filename": "spy.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luassert/src/spy.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 6
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 9,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 14,
    "label": "has",
    "to": 6
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 15
  }, {
    "from": 20,
    "label": "has",
    "to": 16
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 6
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 15
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 24,
    "label": "has",
    "to": 16
  }, {
    "from": 24,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 33
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 29,
    "label": "has",
    "to": 35
  }, {
    "from": 29,
    "label": "has",
    "to": 36
  }, {
    "from": 29,
    "label": "has",
    "to": 37
  }, {
    "from": 24,
    "label": "has",
    "to": 6
  }, {
    "from": 24,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 15
  }, {
    "from": 39,
    "label": "has",
    "to": 6
  }, {
    "from": 39,
    "label": "has",
    "to": 6
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 15
  }, {
    "from": 41,
    "label": "has",
    "to": 6
  }, {
    "from": 41,
    "label": "has",
    "to": 6
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 15
  }, {
    "from": 43,
    "label": "has",
    "to": 6
  }, {
    "from": 43,
    "label": "has",
    "to": 6
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 15
  }, {
    "from": 45,
    "label": "has",
    "to": 6
  }, {
    "from": 45,
    "label": "has",
    "to": 6
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 47,
    "label": "has",
    "to": 2
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 47,
    "label": "has",
    "to": 6
  }, {
    "from": 47,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 53,
    "label": "has",
    "to": 56
  }, {
    "from": 52,
    "label": "has",
    "to": 6
  }, {
    "from": 52,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 58,
    "label": "has",
    "to": 6
  }, {
    "from": 58,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 6
  }, {
    "from": 62,
    "label": "has",
    "to": 6
  }, {
    "from": 62,
    "label": "has",
    "to": 6
  }, {
    "from": 62,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 6
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 6
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 53,
    "label": "has",
    "to": 56
  }, {
    "from": 73,
    "label": "has",
    "to": 6
  }, {
    "from": 73,
    "label": "has",
    "to": 59
  }, {
    "from": 73,
    "label": "has",
    "to": 60
  }, {
    "from": 73,
    "label": "has",
    "to": 6
  }, {
    "from": 73,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 6
  }, {
    "from": 73,
    "label": "has",
    "to": 6
  }, {
    "from": 73,
    "label": "has",
    "to": 6
  }, {
    "from": 73,
    "label": "has",
    "to": 6
  }, {
    "from": 73,
    "label": "has",
    "to": 6
  }, {
    "from": 70,
    "label": "has",
    "to": 74
  }, {
    "from": 70,
    "label": "has",
    "to": 6
  }, {
    "from": 70,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 6
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 78,
    "label": "has",
    "to": 81
  }, {
    "from": 78,
    "label": "has",
    "to": 82
  }, {
    "from": 78,
    "label": "has",
    "to": 6
  }, {
    "from": 78,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 6
  }, {
    "from": 85,
    "label": "has",
    "to": 6
  }, {
    "from": 86,
    "label": "has",
    "to": 6
  }, {
    "from": 87,
    "label": "has",
    "to": 6
  }, {
    "from": 88,
    "label": "has",
    "to": 6
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 90,
    "label": "calls",
    "to": 92
  }, {
    "from": 24,
    "label": "calls",
    "to": 96
  }, {
    "from": 24,
    "label": "calls",
    "to": 96
  }, {
    "from": 90,
    "label": "calls",
    "to": 106
  }, {
    "from": 14,
    "label": "calls",
    "to": 106
  }, {
    "from": 20,
    "label": "calls",
    "to": 106
  }, {
    "from": 24,
    "label": "calls",
    "to": 106
  }, {
    "from": 24,
    "label": "calls",
    "to": 106
  }, {
    "from": 90,
    "label": "calls",
    "to": 2
  }, {
    "from": 24,
    "label": "calls",
    "to": 95
  }, {
    "from": 90,
    "label": "calls",
    "to": 94
  }, {
    "from": 90,
    "label": "calls",
    "to": 91
  }, {
    "from": 2,
    "label": "calls",
    "to": 91
  }, {
    "from": 90,
    "label": "calls",
    "to": 100
  }, {
    "from": 90,
    "label": "calls",
    "to": 100
  }, {
    "from": 90,
    "label": "calls",
    "to": 101
  }, {
    "from": 2,
    "label": "calls",
    "to": 101
  }, {
    "from": 90,
    "label": "calls",
    "to": 93
  }, {
    "from": 90,
    "label": "calls",
    "to": 93
  }, {
    "from": 39,
    "label": "calls",
    "to": 24
  }, {
    "from": 41,
    "label": "calls",
    "to": 24
  }, {
    "from": 43,
    "label": "calls",
    "to": 24
  }, {
    "from": 45,
    "label": "calls",
    "to": 24
  }, {
    "from": 90,
    "label": "calls",
    "to": 103
  }, {
    "from": 90,
    "label": "calls",
    "to": 108
  }, {
    "from": 90,
    "label": "calls",
    "to": 108
  }, {
    "from": 90,
    "label": "calls",
    "to": 98
  }, {
    "from": 2,
    "label": "calls",
    "to": 98
  }, {
    "from": 14,
    "label": "calls",
    "to": 104
  }, {
    "from": 20,
    "label": "calls",
    "to": 104
  }, {
    "from": 24,
    "label": "calls",
    "to": 104
  }, {
    "from": 90,
    "label": "calls",
    "to": 107
  }, {
    "from": 90,
    "label": "calls",
    "to": 107
  }, {
    "from": 24,
    "label": "calls",
    "to": 107
  }, {
    "from": 24,
    "label": "calls",
    "to": 107
  }, {
    "from": 90,
    "label": "calls",
    "to": 105
  }, {
    "from": 90,
    "label": "calls",
    "to": 105
  }, {
    "from": 90,
    "label": "calls",
    "to": 102
  }, {
    "from": 90,
    "label": "calls",
    "to": 8
  }, {
    "from": 1,
    "label": "contains",
    "to": 90
  }, {
    "from": 90,
    "label": "declares",
    "to": 2
  }, {
    "from": 90,
    "label": "declares",
    "to": 8
  }, {
    "from": 90,
    "label": "declares",
    "to": 9
  }, {
    "from": 90,
    "label": "declares",
    "to": 14
  }, {
    "from": 90,
    "label": "declares",
    "to": 20
  }, {
    "from": 90,
    "label": "declares",
    "to": 24
  }, {
    "from": 90,
    "label": "declares",
    "to": 39
  }, {
    "from": 90,
    "label": "declares",
    "to": 41
  }, {
    "from": 90,
    "label": "declares",
    "to": 43
  }, {
    "from": 90,
    "label": "declares",
    "to": 45
  }, {
    "from": 90,
    "label": "declares",
    "to": 47
  }, {
    "from": 90,
    "label": "declares",
    "to": 52
  }, {
    "from": 90,
    "label": "declares",
    "to": 58
  }, {
    "from": 90,
    "label": "declares",
    "to": 62
  }, {
    "from": 90,
    "label": "declares",
    "to": 66
  }, {
    "from": 90,
    "label": "declares",
    "to": 68
  }, {
    "from": 90,
    "label": "declares",
    "to": 70
  }, {
    "from": 90,
    "label": "declares",
    "to": 76
  }, {
    "from": 90,
    "label": "declares",
    "to": 78
  }, {
    "from": 90,
    "label": "declares",
    "to": 84
  }, {
    "from": 90,
    "label": "declares",
    "to": 85
  }, {
    "from": 90,
    "label": "declares",
    "to": 86
  }, {
    "from": 90,
    "label": "declares",
    "to": 87
  }, {
    "from": 90,
    "label": "declares",
    "to": 88
  }, {
    "from": 1,
    "label": "declares",
    "to": 97
  }, {
    "from": 1,
    "label": "declares",
    "to": 100
  }, {
    "from": 111,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 112
  }, {
    "from": 1,
    "label": "contains",
    "to": 113
  }, {
    "from": 112,
    "label": "initializes",
    "to": 114
  }, {
    "from": 114,
    "label": "assigns",
    "to": 115
  }, {
    "from": 115,
    "label": "assigns",
    "to": 116
  }, {
    "from": 116,
    "label": "assigns",
    "to": 117
  }, {
    "from": 112,
    "label": "initializes",
    "to": 118
  }, {
    "from": 112,
    "label": "initializes",
    "to": 119
  }, {
    "from": 119,
    "label": "assigns",
    "to": 120
  }, {
    "from": 113,
    "label": "initializes",
    "to": 121
  }, {
    "from": 121,
    "label": "requires",
    "to": 109
  }, {
    "from": 113,
    "label": "initializes",
    "to": 122
  }, {
    "from": 122,
    "label": "requires",
    "to": 110
  }, {
    "from": 1,
    "label": "provides",
    "to": 123
  }, {
    "from": 99,
    "label": "represents",
    "to": 124
  }, {
    "from": 123,
    "label": "provides",
    "to": 124
  }, {
    "from": 125,
    "label": "requires",
    "to": 1
  }, {
    "from": 126,
    "label": "requires",
    "to": 1
  }, {
    "from": 127,
    "label": "requires",
    "to": 1
  }, {
    "from": 5,
    "label": "hasArgument",
    "to": 117
  }, {
    "from": 18,
    "label": "hasArgument",
    "to": 117
  }, {
    "from": 22,
    "label": "hasArgument",
    "to": 117
  }, {
    "from": 32,
    "label": "hasArgument",
    "to": 117
  }, {
    "from": 36,
    "label": "hasArgument",
    "to": 117
  }, {
    "from": 37,
    "label": "hasArgument",
    "to": 117
  }, {
    "from": 50,
    "label": "hasArgument",
    "to": 117
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 117
  }, {
    "from": 74,
    "label": "hasArgument",
    "to": 117
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "spy",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function get_returns(...)\r\n      local returnvals = {...}\r\n      returnvals.n = select('#',...)  -- add argument count for trailing nils\r\n      table.insert(self.returnvals, util.copyargs(returnvals))\r\n      return ...\r\n    end",
    "type": "function"
  }, {
    "id": 3,
    "text": "local returnvals = {...}",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "returnvals.n = select('#',...)",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "table.insert(self.returnvals, util.copyargs(returnvals))",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function(count, expected) return count == expected end",
    "type": "function"
  }, {
    "id": 9,
    "text": "local function set_spy(state, arguments, level)\r\n  state.payload = arguments[1]\r\n  if arguments[2] ~= nil then\r\n    state.failure_message = arguments[2]\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "state.payload = arguments[1]",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "if arguments[2] ~= nil then\r\n    state.failure_message = arguments[2]\r\n  end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "state.failure_message = arguments[2]",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "local function returned_with(state, arguments, level)\r\n  local level = (level or 1) + 1\r\n  local payload = rawget(state, \"payload\")\r\n  if payload and payload.returned_with then\r\n    return state.payload:returned_with(arguments)\r\n  else\r\n    error(\"'returned_with' must be chained after 'spy(aspy)'\", level)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "local level = (level or 1) + 1",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "local payload = rawget(state, \"payload\")",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "if payload and payload.returned_with then\r\n    return state.payload:returned_with(arguments)\r\n  else\r\n    error(\"'returned_with' must be chained after 'spy(aspy)'\", level)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "error(\"'returned_with' must be chained after 'spy(aspy)'\", level)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "local function called_with(state, arguments, level)\r\n  local level = (level or 1) + 1\r\n  local payload = rawget(state, \"payload\")\r\n  if payload and payload.called_with then\r\n    return state.payload:called_with(arguments)\r\n  else\r\n    error(\"'called_with' must be chained after 'spy(aspy)'\", level)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "if payload and payload.called_with then\r\n    return state.payload:called_with(arguments)\r\n  else\r\n    error(\"'called_with' must be chained after 'spy(aspy)'\", level)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "error(\"'called_with' must be chained after 'spy(aspy)'\", level)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "local function called(state, arguments, level, compare)\r\n  local level = (level or 1) + 1\r\n  local num_times = arguments[1]\r\n  if not num_times and not state.mod then\r\n    state.mod = true\r\n    num_times = 0\r\n  end\r\n  local payload = rawget(state, \"payload\")\r\n  if payload and type(payload) == \"table\" and payload.called then\r\n    local result, count = state.payload:called(num_times, compare)\r\n    arguments[1] = tostring(num_times or \">0\")\r\n    util.tinsert(arguments, 2, tostring(count))\r\n    arguments.nofmt = arguments.nofmt or {}\r\n    arguments.nofmt[1] = true\r\n    arguments.nofmt[2] = true\r\n    return result\r\n  elseif payload and type(payload) == \"function\" then\r\n    error(\"When calling 'spy(aspy)', 'aspy' must not be the original function, but the spy function replacing the original\", level)\r\n  else\r\n    error(\"'called' must be chained after 'spy(aspy)'\", level)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "local num_times = arguments[1]",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "if not num_times and not state.mod then\r\n    state.mod = true\r\n    num_times = 0\r\n  end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "state.mod = true",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "num_times = 0",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "if payload and type(payload) == \"table\" and payload.called then\r\n    local result, count = state.payload:called(num_times, compare)\r\n    arguments[1] = tostring(num_times or \">0\")\r\n    util.tinsert(arguments, 2, tostring(count))\r\n    arguments.nofmt = arguments.nofmt or {}\r\n    arguments.nofmt[1] = true\r\n    arguments.nofmt[2] = true\r\n    return result\r\n  elseif payload and type(payload) == \"function\" then\r\n    error(\"When calling 'spy(aspy)', 'aspy' must not be the original function, but the spy function replacing the original\", level)\r\n  else\r\n    error(\"'called' must be chained after 'spy(aspy)'\", level)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "local result, count = state.payload:called(num_times, compare)",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "arguments[1] = tostring(num_times or \">0\")",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "util.tinsert(arguments, 2, tostring(count))",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "arguments.nofmt = arguments.nofmt or {}",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "arguments.nofmt[1] = true",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "arguments.nofmt[2] = true",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "error(\"When calling 'spy(aspy)', 'aspy' must not be the original function, but the spy function replacing the original\", level)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "error(\"'called' must be chained after 'spy(aspy)'\", level)",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "local function called_at_least(state, arguments, level)\r\n  local level = (level or 1) + 1\r\n  return called(state, arguments, level, function(count, expected) return count >= expected end)\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "local function called_at_most(state, arguments, level)\r\n  local level = (level or 1) + 1\r\n  return called(state, arguments, level, function(count, expected) return count <= expected end)\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "local function called_more_than(state, arguments, level)\r\n  local level = (level or 1) + 1\r\n  return called(state, arguments, level, function(count, expected) return count > expected end)\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "local function called_less_than(state, arguments, level)\r\n  local level = (level or 1) + 1\r\n  return called(state, arguments, level, function(count, expected) return count < expected end)\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function(self, ...)\r\n    local arguments = {...}\r\n    arguments.n = select('#',...)  -- add argument count for trailing nils\r\n    table.insert(self.calls, util.copyargs(arguments))\r\n    local function get_returns(...)\r\n      local returnvals = {...}\r\n      returnvals.n = select('#',...)  -- add argument count for trailing nils\r\n      table.insert(self.returnvals, util.copyargs(returnvals))\r\n      return ...\r\n    end\r\n    return get_returns(self.callback(...))\r\n  end",
    "type": "function"
  }, {
    "id": 48,
    "text": "local arguments = {...}",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "arguments.n = select('#',...)",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "table.insert(self.calls, util.copyargs(arguments))",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function(self)\r\n        if not self.reverted then\r\n          if self.target_table and self.target_key then\r\n            self.target_table[self.target_key] = self.callback\r\n          end\r\n          self.reverted = true\r\n        end\r\n        return self.callback\r\n      end",
    "type": "function"
  }, {
    "id": 53,
    "text": "if not self.reverted then\r\n          if self.target_table and self.target_key then\r\n            self.target_table[self.target_key] = self.callback\r\n          end\r\n          self.reverted = true\r\n        end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "if self.target_table and self.target_key then\r\n            self.target_table[self.target_key] = self.callback\r\n          end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "self.target_table[self.target_key] = self.callback",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "self.reverted = true",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function(self)\r\n        self.calls = {}\r\n        self.returnvals = {}\r\n        return self\r\n      end",
    "type": "function"
  }, {
    "id": 59,
    "text": "self.calls = {}",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "self.returnvals = {}",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "function(self, times, compare)\r\n        if times or compare then\r\n          local compare = compare or function(count, expected) return count == expected end\r\n          return compare(#self.calls, times), #self.calls\r\n        end\r\n\r\n        return (#self.calls > 0), #self.calls\r\n      end",
    "type": "function"
  }, {
    "id": 63,
    "text": "if times or compare then\r\n          local compare = compare or function(count, expected) return count == expected end\r\n          return compare(#self.calls, times), #self.calls\r\n        end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "local compare = compare or function(count, expected) return count == expected end",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function(self, args)\r\n        return util.matchargs(self.calls, args) ~= nil\r\n      end",
    "type": "function"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "function(self, args)\r\n        return util.matchargs(self.returnvals, args) ~= nil\r\n      end",
    "type": "function"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function(callback)\r\n    if not util.callable(callback) then\r\n      error(\"Cannot spy on type '\" .. type(callback) .. \"', only on functions or callable elements\", util.errorlevel())\r\n    end\r\n    local s = setmetatable({\r\n      calls = {},\r\n      returnvals = {},\r\n      callback = callback,\r\n\r\n      target_table = nil, -- these will be set when using 'spy.on'\r\n      target_key = nil,\r\n\r\n      revert = function(self)\r\n        if not self.reverted then\r\n          if self.target_table and self.target_key then\r\n            self.target_table[self.target_key] = self.callback\r\n          end\r\n          self.reverted = true\r\n        end\r\n        return self.callback\r\n      end,\r\n\r\n      clear = function(self)\r\n        self.calls = {}\r\n        self.returnvals = {}\r\n        return self\r\n      end,\r\n\r\n      called = function(self, times, compare)\r\n        if times or compare then\r\n          local compare = compare or function(count, expected) return count == expected end\r\n          return compare(#self.calls, times), #self.calls\r\n        end\r\n\r\n        return (#self.calls > 0), #self.calls\r\n      end,\r\n\r\n      called_with = function(self, args)\r\n        return util.matchargs(self.calls, args) ~= nil\r\n      end,\r\n\r\n      returned_with = function(self, args)\r\n        return util.matchargs(self.returnvals, args) ~= nil\r\n      end\r\n    }, spy_mt)\r\n    assert:add_spy(s)  -- register with the current state\r\n    return s\r\n  end",
    "type": "function"
  }, {
    "id": 71,
    "text": "if not util.callable(callback) then\r\n      error(\"Cannot spy on type '\" .. type(callback) .. \"', only on functions or callable elements\", util.errorlevel())\r\n    end",
    "type": "statement:if"
  }, {
    "id": 72,
    "text": "error(\"Cannot spy on type '\" .. type(callback) .. \"', only on functions or callable elements\", util.errorlevel())",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "local s = setmetatable({\r\n      calls = {},\r\n      returnvals = {},\r\n      callback = callback,\r\n\r\n      target_table = nil, -- these will be set when using 'spy.on'\r\n      target_key = nil,\r\n\r\n      revert = function(self)\r\n        if not self.reverted then\r\n          if self.target_table and self.target_key then\r\n            self.target_table[self.target_key] = self.callback\r\n          end\r\n          self.reverted = true\r\n        end\r\n        return self.callback\r\n      end,\r\n\r\n      clear = function(self)\r\n        self.calls = {}\r\n        self.returnvals = {}\r\n        return self\r\n      end,\r\n\r\n      called = function(self, times, compare)\r\n        if times or compare then\r\n          local compare = compare or function(count, expected) return count == expected end\r\n          return compare(#self.calls, times), #self.calls\r\n        end\r\n\r\n        return (#self.calls > 0), #self.calls\r\n      end,\r\n\r\n      called_with = function(self, args)\r\n        return util.matchargs(self.calls, args) ~= nil\r\n      end,\r\n\r\n      returned_with = function(self, args)\r\n        return util.matchargs(self.returnvals, args) ~= nil\r\n      end\r\n    }, spy_mt)",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "assert:add_spy(s)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "function(object)\r\n    return type(object) == \"table\" and getmetatable(object) == spy_mt\r\n  end",
    "type": "function"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "function(target_table, target_key)\r\n    local s = spy.new(target_table[target_key])\r\n    target_table[target_key] = s\r\n    -- store original data\r\n    s.target_table = target_table\r\n    s.target_key = target_key\r\n\r\n    return s\r\n  end",
    "type": "function"
  }, {
    "id": 79,
    "text": "local s = spy.new(target_table[target_key])",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "target_table[target_key] = s",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "s.target_table = target_table",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "s.target_key = target_key",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "function(count, expected) return count >= expected end",
    "type": "function"
  }, {
    "id": 85,
    "text": "function(count, expected) return count <= expected end",
    "type": "function"
  }, {
    "id": 86,
    "text": "function(count, expected) return count > expected end",
    "type": "function"
  }, {
    "id": 87,
    "text": "function(count, expected) return count < expected end",
    "type": "function"
  }, {
    "id": 88,
    "text": "function(self, ...)\r\n    return spy.new(...)\r\n  end",
    "type": "function"
  }, {
    "id": 89,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 90,
    "text": "",
    "type": "function container"
  }, {
    "id": 91,
    "text": "copyargs",
    "type": "global function"
  }, {
    "id": 92,
    "text": "callable",
    "type": "global function"
  }, {
    "id": 93,
    "text": "matchargs",
    "type": "global function"
  }, {
    "id": 94,
    "text": "errorlevel",
    "type": "global function"
  }, {
    "id": 95,
    "text": "tinsert",
    "type": "global function"
  }, {
    "id": 96,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 97,
    "text": "on",
    "type": "global function"
  }, {
    "id": 98,
    "text": "select",
    "type": "global function"
  }, {
    "id": 99,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 100,
    "text": "new",
    "type": "global function"
  }, {
    "id": 101,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 102,
    "text": "callback",
    "type": "global function"
  }, {
    "id": 103,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 104,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 105,
    "text": "require",
    "type": "global function"
  }, {
    "id": 106,
    "text": "error",
    "type": "global function"
  }, {
    "id": 107,
    "text": "type",
    "type": "global function"
  }, {
    "id": 108,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 109,
    "text": "assert)",
    "type": "module"
  }, {
    "id": 110,
    "text": "util)",
    "type": "module"
  }, {
    "id": 111,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 112,
    "text": "",
    "type": "variable container"
  }, {
    "id": 113,
    "text": "",
    "type": "require container"
  }, {
    "id": 114,
    "text": "",
    "type": "local variable"
  }, {
    "id": 115,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 116,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 117,
    "text": "",
    "type": "function"
  }, {
    "id": 118,
    "text": "",
    "type": "local variable"
  }, {
    "id": 119,
    "text": "",
    "type": "global variable"
  }, {
    "id": 120,
    "text": "",
    "type": "n/a"
  }, {
    "id": 121,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 122,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 123,
    "text": "",
    "type": "interface container"
  }, {
    "id": 124,
    "text": "",
    "type": "interface"
  }, {
    "id": 125,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 126,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 127,
    "text": "",
    "type": "require local variable"
  } ]
}