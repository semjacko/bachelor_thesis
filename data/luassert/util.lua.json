{
  "_filename": "util.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luassert/src/util.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 5,
    "label": "has",
    "to": 11
  }, {
    "from": 5,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 15
  }, {
    "from": 5,
    "label": "has",
    "to": 16
  }, {
    "from": 5,
    "label": "has",
    "to": 17
  }, {
    "from": 5,
    "label": "has",
    "to": 18
  }, {
    "from": 5,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 5,
    "label": "has",
    "to": 22
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 23
  }, {
    "from": 5,
    "label": "has",
    "to": 24
  }, {
    "from": 5,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 25,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 34
  }, {
    "from": 5,
    "label": "has",
    "to": 35
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 9
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 37,
    "label": "has",
    "to": 9
  }, {
    "from": 37,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 38
  }, {
    "from": 43,
    "label": "has",
    "to": 9
  }, {
    "from": 43,
    "label": "has",
    "to": 39
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 43,
    "label": "has",
    "to": 46
  }, {
    "from": 43,
    "label": "has",
    "to": 9
  }, {
    "from": 43,
    "label": "has",
    "to": 47
  }, {
    "from": 43,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 43,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 43,
    "label": "has",
    "to": 9
  }, {
    "from": 43,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 39
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 44
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 54,
    "label": "has",
    "to": 9
  }, {
    "from": 54,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 55
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 26
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 62,
    "label": "has",
    "to": 66
  }, {
    "from": 60,
    "label": "has",
    "to": 9
  }, {
    "from": 60,
    "label": "has",
    "to": 9
  }, {
    "from": 60,
    "label": "has",
    "to": 9
  }, {
    "from": 60,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 66
  }, {
    "from": 60,
    "label": "has",
    "to": 9
  }, {
    "from": 60,
    "label": "has",
    "to": 9
  }, {
    "from": 60,
    "label": "has",
    "to": 9
  }, {
    "from": 59,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 59,
    "label": "has",
    "to": 9
  }, {
    "from": 59,
    "label": "has",
    "to": 9
  }, {
    "from": 59,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 55
  }, {
    "from": 74,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 26
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 62,
    "label": "has",
    "to": 66
  }, {
    "from": 74,
    "label": "has",
    "to": 9
  }, {
    "from": 74,
    "label": "has",
    "to": 9
  }, {
    "from": 74,
    "label": "has",
    "to": 9
  }, {
    "from": 74,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 66
  }, {
    "from": 74,
    "label": "has",
    "to": 9
  }, {
    "from": 74,
    "label": "has",
    "to": 9
  }, {
    "from": 74,
    "label": "has",
    "to": 9
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 76,
    "label": "has",
    "to": 79
  }, {
    "from": 76,
    "label": "has",
    "to": 80
  }, {
    "from": 76,
    "label": "has",
    "to": 81
  }, {
    "from": 76,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 76,
    "label": "has",
    "to": 85
  }, {
    "from": 76,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 86,
    "label": "has",
    "to": 89
  }, {
    "from": 76,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 76,
    "label": "has",
    "to": 88
  }, {
    "from": 76,
    "label": "has",
    "to": 92
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 87
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 95,
    "label": "has",
    "to": 97
  }, {
    "from": 93,
    "label": "has",
    "to": 9
  }, {
    "from": 93,
    "label": "has",
    "to": 96
  }, {
    "from": 93,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 93,
    "label": "has",
    "to": 100
  }, {
    "from": 93,
    "label": "has",
    "to": 101
  }, {
    "from": 93,
    "label": "has",
    "to": 9
  }, {
    "from": 93,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 9
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 105,
    "label": "has",
    "to": 9
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 107,
    "label": "has",
    "to": 109
  }, {
    "from": 107,
    "label": "has",
    "to": 110
  }, {
    "from": 107,
    "label": "has",
    "to": 111
  }, {
    "from": 107,
    "label": "has",
    "to": 112
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 112,
    "label": "has",
    "to": 114
  }, {
    "from": 112,
    "label": "has",
    "to": 115
  }, {
    "from": 107,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 107,
    "label": "has",
    "to": 9
  }, {
    "from": 107,
    "label": "has",
    "to": 118
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 119,
    "label": "has",
    "to": 121
  }, {
    "from": 119,
    "label": "has",
    "to": 122
  }, {
    "from": 119,
    "label": "has",
    "to": 123
  }, {
    "from": 119,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 124,
    "label": "has",
    "to": 126
  }, {
    "from": 124,
    "label": "has",
    "to": 127
  }, {
    "from": 124,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 128,
    "label": "has",
    "to": 130
  }, {
    "from": 128,
    "label": "has",
    "to": 131
  }, {
    "from": 128,
    "label": "has",
    "to": 132
  }, {
    "from": 124,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 133,
    "label": "has",
    "to": 135
  }, {
    "from": 124,
    "label": "has",
    "to": 130
  }, {
    "from": 119,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 119,
    "label": "has",
    "to": 9
  }, {
    "from": 119,
    "label": "has",
    "to": 138
  }, {
    "from": 74,
    "label": "calls",
    "to": 142
  }, {
    "from": 54,
    "label": "calls",
    "to": 153
  }, {
    "from": 74,
    "label": "calls",
    "to": 153
  }, {
    "from": 74,
    "label": "calls",
    "to": 153
  }, {
    "from": 74,
    "label": "calls",
    "to": 151
  }, {
    "from": 119,
    "label": "calls",
    "to": 154
  }, {
    "from": 5,
    "label": "calls",
    "to": 5
  }, {
    "from": 74,
    "label": "calls",
    "to": 5
  }, {
    "from": 74,
    "label": "calls",
    "to": 149
  }, {
    "from": 74,
    "label": "calls",
    "to": 149
  }, {
    "from": 54,
    "label": "calls",
    "to": 141
  }, {
    "from": 74,
    "label": "calls",
    "to": 141
  }, {
    "from": 74,
    "label": "calls",
    "to": 141
  }, {
    "from": 74,
    "label": "calls",
    "to": 141
  }, {
    "from": 119,
    "label": "calls",
    "to": 107
  }, {
    "from": 43,
    "label": "calls",
    "to": 148
  }, {
    "from": 43,
    "label": "calls",
    "to": 148
  }, {
    "from": 5,
    "label": "calls",
    "to": 150
  }, {
    "from": 119,
    "label": "calls",
    "to": 150
  }, {
    "from": 59,
    "label": "calls",
    "to": 143
  }, {
    "from": 5,
    "label": "calls",
    "to": 146
  }, {
    "from": 43,
    "label": "calls",
    "to": 43
  }, {
    "from": 43,
    "label": "calls",
    "to": 43
  }, {
    "from": 54,
    "label": "calls",
    "to": 43
  }, {
    "from": 107,
    "label": "calls",
    "to": 144
  }, {
    "from": 107,
    "label": "calls",
    "to": 144
  }, {
    "from": 54,
    "label": "calls",
    "to": 37
  }, {
    "from": 76,
    "label": "calls",
    "to": 145
  }, {
    "from": 43,
    "label": "calls",
    "to": 140
  }, {
    "from": 54,
    "label": "calls",
    "to": 140
  }, {
    "from": 5,
    "label": "calls",
    "to": 155
  }, {
    "from": 5,
    "label": "calls",
    "to": 155
  }, {
    "from": 37,
    "label": "calls",
    "to": 155
  }, {
    "from": 43,
    "label": "calls",
    "to": 155
  }, {
    "from": 103,
    "label": "calls",
    "to": 155
  }, {
    "from": 103,
    "label": "calls",
    "to": 155
  }, {
    "from": 105,
    "label": "calls",
    "to": 155
  }, {
    "from": 105,
    "label": "calls",
    "to": 155
  }, {
    "from": 43,
    "label": "calls",
    "to": 152
  }, {
    "from": 54,
    "label": "calls",
    "to": 152
  }, {
    "from": 54,
    "label": "calls",
    "to": 152
  }, {
    "from": 74,
    "label": "calls",
    "to": 152
  }, {
    "from": 119,
    "label": "calls",
    "to": 152
  }, {
    "from": 59,
    "label": "calls",
    "to": 74
  }, {
    "from": 5,
    "label": "calls",
    "to": 147
  }, {
    "from": 5,
    "label": "calls",
    "to": 147
  }, {
    "from": 43,
    "label": "calls",
    "to": 147
  }, {
    "from": 43,
    "label": "calls",
    "to": 147
  }, {
    "from": 103,
    "label": "calls",
    "to": 147
  }, {
    "from": 105,
    "label": "calls",
    "to": 147
  }, {
    "from": 4,
    "label": "contains",
    "to": 139
  }, {
    "from": 139,
    "label": "declares",
    "to": 5
  }, {
    "from": 139,
    "label": "declares",
    "to": 37
  }, {
    "from": 139,
    "label": "declares",
    "to": 43
  }, {
    "from": 139,
    "label": "declares",
    "to": 54
  }, {
    "from": 139,
    "label": "declares",
    "to": 59
  }, {
    "from": 139,
    "label": "declares",
    "to": 74
  }, {
    "from": 139,
    "label": "declares",
    "to": 76
  }, {
    "from": 139,
    "label": "declares",
    "to": 93
  }, {
    "from": 139,
    "label": "declares",
    "to": 103
  }, {
    "from": 139,
    "label": "declares",
    "to": 105
  }, {
    "from": 139,
    "label": "declares",
    "to": 107
  }, {
    "from": 139,
    "label": "declares",
    "to": 119
  }, {
    "from": 156,
    "label": "requires",
    "to": 4
  }, {
    "from": 157,
    "label": "requires",
    "to": 4
  }, {
    "from": 158,
    "label": "requires",
    "to": 4
  }, {
    "from": 4,
    "label": "contains",
    "to": 159
  }, {
    "from": 4,
    "label": "contains",
    "to": 160
  }, {
    "from": 159,
    "label": "initializes",
    "to": 161
  }, {
    "from": 161,
    "label": "assigns",
    "to": 162
  }, {
    "from": 160,
    "label": "initializes",
    "to": 163
  }, {
    "from": 163,
    "label": "requires",
    "to": 3
  }, {
    "from": 160,
    "label": "initializes",
    "to": 164
  }, {
    "from": 164,
    "label": "requires",
    "to": 1
  }, {
    "from": 160,
    "label": "initializes",
    "to": 165
  }, {
    "from": 165,
    "label": "requires",
    "to": 3
  }, {
    "from": 160,
    "label": "initializes",
    "to": 166
  }, {
    "from": 166,
    "label": "requires",
    "to": 1
  }, {
    "from": 160,
    "label": "initializes",
    "to": 167
  }, {
    "from": 167,
    "label": "requires",
    "to": 2
  }, {
    "from": 4,
    "label": "provides",
    "to": 168
  }, {
    "from": 161,
    "label": "represents",
    "to": 169
  }, {
    "from": 168,
    "label": "provides",
    "to": 169
  }, {
    "from": 161,
    "label": "contains",
    "to": 5
  }, {
    "from": 161,
    "label": "contains",
    "to": 37
  }, {
    "from": 161,
    "label": "contains",
    "to": 43
  }, {
    "from": 161,
    "label": "contains",
    "to": 54
  }, {
    "from": 161,
    "label": "contains",
    "to": 59
  }, {
    "from": 161,
    "label": "contains",
    "to": 76
  }, {
    "from": 161,
    "label": "contains",
    "to": 93
  }, {
    "from": 161,
    "label": "contains",
    "to": 103
  }, {
    "from": 161,
    "label": "contains",
    "to": 105
  }, {
    "from": 161,
    "label": "contains",
    "to": 107
  }, {
    "from": 161,
    "label": "contains",
    "to": 119
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "match",
    "type": "module"
  }, {
    "id": 2,
    "text": "namespaces",
    "type": "module"
  }, {
    "id": 3,
    "text": "spy",
    "type": "module"
  }, {
    "id": 4,
    "text": "util",
    "type": "module"
  }, {
    "id": 5,
    "text": "function util.deepcompare(t1,t2,ignore_mt,cycles,thresh1,thresh2)\r\n  local ty1 = type(t1)\r\n  local ty2 = type(t2)\r\n  -- non-table types can be directly compared\r\n  if ty1 ~= 'table' or ty2 ~= 'table' then return t1 == t2 end\r\n  local mt1 = debug.getmetatable(t1)\r\n  local mt2 = debug.getmetatable(t2)\r\n  -- would equality be determined by metatable __eq?\r\n  if mt1 and mt1 == mt2 and mt1.__eq then\r\n    -- then use that unless asked not to\r\n    if not ignore_mt then return t1 == t2 end\r\n  else -- we can skip the deep comparison below if t1 and t2 share identity\r\n    if rawequal(t1, t2) then return true end\r\n  end\r\n\r\n  -- handle recursive tables\r\n  cycles = cycles or {{},{}}\r\n  thresh1, thresh2 = (thresh1 or 1), (thresh2 or 1)\r\n  cycles[1][t1] = (cycles[1][t1] or 0)\r\n  cycles[2][t2] = (cycles[2][t2] or 0)\r\n  if cycles[1][t1] == 1 or cycles[2][t2] == 1 then\r\n    thresh1 = cycles[1][t1] + 1\r\n    thresh2 = cycles[2][t2] + 1\r\n  end\r\n  if cycles[1][t1] > thresh1 and cycles[2][t2] > thresh2 then\r\n    return true\r\n  end\r\n\r\n  cycles[1][t1] = cycles[1][t1] + 1\r\n  cycles[2][t2] = cycles[2][t2] + 1\r\n\r\n  for k1,v1 in next, t1 do\r\n    local v2 = t2[k1]\r\n    if v2 == nil then\r\n      return false, {k1}\r\n    end\r\n\r\n    local same, crumbs = util.deepcompare(v1,v2,nil,cycles,thresh1,thresh2)\r\n    if not same then\r\n      crumbs = crumbs or {}\r\n      table.insert(crumbs, k1)\r\n      return false, crumbs\r\n    end\r\n  end\r\n  for k2,_ in next, t2 do\r\n    -- only check wether each element has a t1 counterpart, actual comparison\r\n    -- has been done in first loop above\r\n    if t1[k2] == nil then return false, {k2} end\r\n  end\r\n\r\n  cycles[1][t1] = cycles[1][t1] - 1\r\n  cycles[2][t2] = cycles[2][t2] - 1\r\n\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local ty1 = type(t1)",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "local ty2 = type(t2)",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "if ty1 ~= 'table' or ty2 ~= 'table' then return t1 == t2 end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 10,
    "text": "local mt1 = debug.getmetatable(t1)",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "local mt2 = debug.getmetatable(t2)",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "if mt1 and mt1 == mt2 and mt1.__eq then\r\n    -- then use that unless asked not to\r\n    if not ignore_mt then return t1 == t2 end\r\n  else -- we can skip the deep comparison below if t1 and t2 share identity\r\n    if rawequal(t1, t2) then return true end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "if not ignore_mt then return t1 == t2 end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "if rawequal(t1, t2) then return true end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "cycles = cycles or {{},{}}",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "thresh1, thresh2 = (thresh1 or 1), (thresh2 or 1)",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "cycles[1][t1] = (cycles[1][t1] or 0)",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "cycles[2][t2] = (cycles[2][t2] or 0)",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "if cycles[1][t1] == 1 or cycles[2][t2] == 1 then\r\n    thresh1 = cycles[1][t1] + 1\r\n    thresh2 = cycles[2][t2] + 1\r\n  end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "thresh1 = cycles[1][t1] + 1",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "thresh2 = cycles[2][t2] + 1",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "if cycles[1][t1] > thresh1 and cycles[2][t2] > thresh2 then\r\n    return true\r\n  end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "cycles[1][t1] = cycles[1][t1] + 1",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "cycles[2][t2] = cycles[2][t2] + 1",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "for k1,v1 in next, t1 do\r\n    local v2 = t2[k1]\r\n    if v2 == nil then\r\n      return false, {k1}\r\n    end\r\n\r\n    local same, crumbs = util.deepcompare(v1,v2,nil,cycles,thresh1,thresh2)\r\n    if not same then\r\n      crumbs = crumbs or {}\r\n      table.insert(crumbs, k1)\r\n      return false, crumbs\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 26,
    "text": "local v2 = t2[k1]",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "if v2 == nil then\r\n      return false, {k1}\r\n    end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "local same, crumbs = util.deepcompare(v1,v2,nil,cycles,thresh1,thresh2)",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "if not same then\r\n      crumbs = crumbs or {}\r\n      table.insert(crumbs, k1)\r\n      return false, crumbs\r\n    end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "crumbs = crumbs or {}",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "table.insert(crumbs, k1)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "for k2,_ in next, t2 do\r\n    -- only check wether each element has a t1 counterpart, actual comparison\r\n    -- has been done in first loop above\r\n    if t1[k2] == nil then return false, {k2} end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 33,
    "text": "if t1[k2] == nil then return false, {k2} end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "cycles[1][t1] = cycles[1][t1] - 1",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "cycles[2][t2] = cycles[2][t2] - 1",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function util.shallowcopy(t)\r\n  if type(t) ~= \"table\" then return t end\r\n  local copy = {}\r\n  for k,v in next, t do\r\n    copy[k] = v\r\n  end\r\n  return copy\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "if type(t) ~= \"table\" then return t end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "local copy = {}",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "for k,v in next, t do\r\n    copy[k] = v\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 41,
    "text": "copy[k] = v",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function util.deepcopy(t, deepmt, cache)\r\n  local spy = require 'luassert.spy'\r\n  if type(t) ~= \"table\" then return t end\r\n  local copy = {}\r\n\r\n  -- handle recursive tables\r\n  local cache = cache or {}\r\n  if cache[t] then return cache[t] end\r\n  cache[t] = copy\r\n\r\n  for k,v in next, t do\r\n    copy[k] = (spy.is_spy(v) and v or util.deepcopy(v, deepmt, cache))\r\n  end\r\n  if deepmt then\r\n    debug.setmetatable(copy, util.deepcopy(debug.getmetatable(t, nil, cache)))\r\n  else\r\n    debug.setmetatable(copy, debug.getmetatable(t))\r\n  end\r\n  return copy\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "local spy = require 'luassert.spy'",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "local cache = cache or {}",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "if cache[t] then return cache[t] end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "cache[t] = copy",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "for k,v in next, t do\r\n    copy[k] = (spy.is_spy(v) and v or util.deepcopy(v, deepmt, cache))\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 49,
    "text": "copy[k] = (spy.is_spy(v) and v or util.deepcopy(v, deepmt, cache))",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "if deepmt then\r\n    debug.setmetatable(copy, util.deepcopy(debug.getmetatable(t, nil, cache)))\r\n  else\r\n    debug.setmetatable(copy, debug.getmetatable(t))\r\n  end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "debug.setmetatable(copy, util.deepcopy(debug.getmetatable(t, nil, cache)))",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "debug.setmetatable(copy, debug.getmetatable(t))",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "function util.copyargs(args)\r\n  local copy = {}\r\n  local match = require 'luassert.match'\r\n  local spy = require 'luassert.spy'\r\n  for k,v in pairs(args) do\r\n    copy[k] = ((match.is_matcher(v) or spy.is_spy(v)) and v or util.deepcopy(v))\r\n  end\r\n  return { vals = copy, refs = util.shallowcopy(args) }\r\nend",
    "type": "function"
  }, {
    "id": 55,
    "text": "local match = require 'luassert.match'",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "for k,v in pairs(args) do\r\n    copy[k] = ((match.is_matcher(v) or spy.is_spy(v)) and v or util.deepcopy(v))\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 57,
    "text": "copy[k] = ((match.is_matcher(v) or spy.is_spy(v)) and v or util.deepcopy(v))",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function util.matchargs(argslist, args)\r\n  local function matches(t1, t2, t1refs)\r\n    local match = require 'luassert.match'\r\n    for k1,v1 in pairs(t1) do\r\n      local v2 = t2[k1]\r\n      if match.is_matcher(v1) then\r\n        if not v1(v2) then return false end\r\n      elseif match.is_matcher(v2) then\r\n        if match.is_ref_matcher(v2) then v1 = t1refs[k1] end\r\n        if not v2(v1) then return false end\r\n      elseif (v2 == nil or not util.deepcompare(v1,v2)) then\r\n        return false\r\n      end\r\n    end\r\n    for k2,v2 in pairs(t2) do\r\n      -- only check wether each element has a t1 counterpart, actual comparison\r\n      -- has been done in first loop above\r\n      local v1 = t1[k2]\r\n      if v1 == nil then\r\n        -- no t1 counterpart, so try to compare using matcher\r\n        if match.is_matcher(v2) then\r\n          if not v2(v1) then return false end\r\n        else\r\n          return false\r\n        end\r\n      end\r\n    end\r\n    return true\r\n  end\r\n  for k,v in ipairs(argslist) do\r\n    if matches(v.vals, args, v.refs) then\r\n      return v\r\n    end\r\n  end\r\n  return nil\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "local function matches(t1, t2, t1refs)\r\n    local match = require 'luassert.match'\r\n    for k1,v1 in pairs(t1) do\r\n      local v2 = t2[k1]\r\n      if match.is_matcher(v1) then\r\n        if not v1(v2) then return false end\r\n      elseif match.is_matcher(v2) then\r\n        if match.is_ref_matcher(v2) then v1 = t1refs[k1] end\r\n        if not v2(v1) then return false end\r\n      elseif (v2 == nil or not util.deepcompare(v1,v2)) then\r\n        return false\r\n      end\r\n    end\r\n    for k2,v2 in pairs(t2) do\r\n      -- only check wether each element has a t1 counterpart, actual comparison\r\n      -- has been done in first loop above\r\n      local v1 = t1[k2]\r\n      if v1 == nil then\r\n        -- no t1 counterpart, so try to compare using matcher\r\n        if match.is_matcher(v2) then\r\n          if not v2(v1) then return false end\r\n        else\r\n          return false\r\n        end\r\n      end\r\n    end\r\n    return true\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 61,
    "text": "for k1,v1 in pairs(t1) do\r\n      local v2 = t2[k1]\r\n      if match.is_matcher(v1) then\r\n        if not v1(v2) then return false end\r\n      elseif match.is_matcher(v2) then\r\n        if match.is_ref_matcher(v2) then v1 = t1refs[k1] end\r\n        if not v2(v1) then return false end\r\n      elseif (v2 == nil or not util.deepcompare(v1,v2)) then\r\n        return false\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 62,
    "text": "if match.is_matcher(v1) then\r\n        if not v1(v2) then return false end\r\n      elseif match.is_matcher(v2) then\r\n        if match.is_ref_matcher(v2) then v1 = t1refs[k1] end\r\n        if not v2(v1) then return false end\r\n      elseif (v2 == nil or not util.deepcompare(v1,v2)) then\r\n        return false\r\n      end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "if not v1(v2) then return false end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "if match.is_ref_matcher(v2) then v1 = t1refs[k1] end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "v1 = t1refs[k1]",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "if not v2(v1) then return false end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "for k2,v2 in pairs(t2) do\r\n      -- only check wether each element has a t1 counterpart, actual comparison\r\n      -- has been done in first loop above\r\n      local v1 = t1[k2]\r\n      if v1 == nil then\r\n        -- no t1 counterpart, so try to compare using matcher\r\n        if match.is_matcher(v2) then\r\n          if not v2(v1) then return false end\r\n        else\r\n          return false\r\n        end\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 68,
    "text": "local v1 = t1[k2]",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "if v1 == nil then\r\n        -- no t1 counterpart, so try to compare using matcher\r\n        if match.is_matcher(v2) then\r\n          if not v2(v1) then return false end\r\n        else\r\n          return false\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "if match.is_matcher(v2) then\r\n          if not v2(v1) then return false end\r\n        else\r\n          return false\r\n        end",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "for k,v in ipairs(argslist) do\r\n    if matches(v.vals, args, v.refs) then\r\n      return v\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 72,
    "text": "if matches(v.vals, args, v.refs) then\r\n      return v\r\n    end",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "local function matches(t1, t2, t1refs)\r\n    local match = require 'luassert.match'\r\n    for k1,v1 in pairs(t1) do\r\n      local v2 = t2[k1]\r\n      if match.is_matcher(v1) then\r\n        if not v1(v2) then return false end\r\n      elseif match.is_matcher(v2) then\r\n        if match.is_ref_matcher(v2) then v1 = t1refs[k1] end\r\n        if not v2(v1) then return false end\r\n      elseif (v2 == nil or not util.deepcompare(v1,v2)) then\r\n        return false\r\n      end\r\n    end\r\n    for k2,v2 in pairs(t2) do\r\n      -- only check wether each element has a t1 counterpart, actual comparison\r\n      -- has been done in first loop above\r\n      local v1 = t1[k2]\r\n      if v1 == nil then\r\n        -- no t1 counterpart, so try to compare using matcher\r\n        if match.is_matcher(v2) then\r\n          if not v2(v1) then return false end\r\n        else\r\n          return false\r\n        end\r\n      end\r\n    end\r\n    return true\r\n  end",
    "type": "function"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "function util.tinsert(...)\r\n  -- check optional POS value\r\n  local args = {...}\r\n  local c = select('#',...)\r\n  local t = args[1]\r\n  local pos = args[2]\r\n  local val = args[3]\r\n  if c < 3 then\r\n    val = pos\r\n    pos = nil\r\n  end\r\n  -- set length indicator n if not present (+1)\r\n  t.n = (t.n or #t) + 1\r\n  if not pos then\r\n    pos = t.n\r\n  elseif pos > t.n then\r\n    -- out of our range\r\n    t[pos] = val\r\n    t.n = pos\r\n  end\r\n  -- shift everything up 1 pos\r\n  for i = t.n, pos + 1, -1 do\r\n    t[i]=t[i-1]\r\n  end\r\n  -- add element to be inserted\r\n  t[pos] = val\r\nend",
    "type": "function"
  }, {
    "id": 77,
    "text": "local args = {...}",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "local c = select('#',...)",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "local t = args[1]",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "local pos = args[2]",
    "type": "statement:localassign"
  }, {
    "id": 81,
    "text": "local val = args[3]",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "if c < 3 then\r\n    val = pos\r\n    pos = nil\r\n  end",
    "type": "statement:if"
  }, {
    "id": 83,
    "text": "val = pos",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "pos = nil",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "t.n = (t.n or #t) + 1",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "if not pos then\r\n    pos = t.n\r\n  elseif pos > t.n then\r\n    -- out of our range\r\n    t[pos] = val\r\n    t.n = pos\r\n  end",
    "type": "statement:if"
  }, {
    "id": 87,
    "text": "pos = t.n",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "t[pos] = val",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "t.n = pos",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "for i = t.n, pos + 1, -1 do\r\n    t[i]=t[i-1]\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 91,
    "text": "t[i]=t[i-1]",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 93,
    "text": "function util.tremove(t, pos)\r\n  -- set length indicator n if not present (+1)\r\n  t.n = t.n or #t\r\n  if not pos then\r\n    pos = t.n\r\n  elseif pos > t.n then\r\n    local removed = t[pos]\r\n    -- out of our range\r\n    t[pos] = nil\r\n    return removed\r\n  end\r\n  local removed = t[pos]\r\n  -- shift everything up 1 pos\r\n  for i = pos, t.n do\r\n    t[i]=t[i+1]\r\n  end\r\n  -- set size, clean last\r\n  t[t.n] = nil\r\n  t.n = t.n - 1\r\n  return removed\r\nend",
    "type": "function"
  }, {
    "id": 94,
    "text": "t.n = t.n or #t",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "if not pos then\r\n    pos = t.n\r\n  elseif pos > t.n then\r\n    local removed = t[pos]\r\n    -- out of our range\r\n    t[pos] = nil\r\n    return removed\r\n  end",
    "type": "statement:if"
  }, {
    "id": 96,
    "text": "local removed = t[pos]",
    "type": "statement:localassign"
  }, {
    "id": 97,
    "text": "t[pos] = nil",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "for i = pos, t.n do\r\n    t[i]=t[i+1]\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 99,
    "text": "t[i]=t[i+1]",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "t[t.n] = nil",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "t.n = t.n - 1",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "function util.callable(object)\r\n  return type(object) == \"function\" or type((debug.getmetatable(object) or {}).__call) == \"function\"\r\nend",
    "type": "function"
  }, {
    "id": 104,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 105,
    "text": "function util.hastostring(object)\r\n  return type(object) == \"string\" or type((debug.getmetatable(object) or {}).__tostring) == \"function\"\r\nend",
    "type": "function"
  }, {
    "id": 106,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 107,
    "text": "function util.errorlevel(level)\r\n  local level = (level or 1) + 1 -- add one to get level of the caller\r\n  local info = debug.getinfo(level)\r\n  local source = (info or {}).source\r\n  local file = source\r\n  while file and (file == source or source == \"=(tail call)\") do\r\n    level = level + 1\r\n    info = debug.getinfo(level)\r\n    source = (info or {}).source\r\n  end\r\n  if level > 1 then level = level - 1 end -- deduct call to errorlevel() itself\r\n  return level\r\nend",
    "type": "function"
  }, {
    "id": 108,
    "text": "local level = (level or 1) + 1",
    "type": "statement:localassign"
  }, {
    "id": 109,
    "text": "local info = debug.getinfo(level)",
    "type": "statement:localassign"
  }, {
    "id": 110,
    "text": "local source = (info or {}).source",
    "type": "statement:localassign"
  }, {
    "id": 111,
    "text": "local file = source",
    "type": "statement:localassign"
  }, {
    "id": 112,
    "text": "while file and (file == source or source == \"=(tail call)\") do\r\n    level = level + 1\r\n    info = debug.getinfo(level)\r\n    source = (info or {}).source\r\n  end",
    "type": "statement:while"
  }, {
    "id": 113,
    "text": "level = level + 1",
    "type": "statement:assign"
  }, {
    "id": 114,
    "text": "info = debug.getinfo(level)",
    "type": "statement:assign"
  }, {
    "id": 115,
    "text": "source = (info or {}).source",
    "type": "statement:assign"
  }, {
    "id": 116,
    "text": "if level > 1 then level = level - 1 end",
    "type": "statement:if"
  }, {
    "id": 117,
    "text": "level = level - 1",
    "type": "statement:assign"
  }, {
    "id": 118,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 119,
    "text": "function util.extract_keys(nspace, tokens)\r\n  local namespace = require 'luassert.namespaces'\r\n\r\n  -- find valid keys by coalescing tokens as needed, starting from the end\r\n  local keys = {}\r\n  local key = nil\r\n  local i = #tokens\r\n  while i > 0 do\r\n    local token = tokens[i]\r\n    key = key and (token .. '_' .. key) or token\r\n\r\n    -- find longest matching key in the given namespace\r\n    local longkey = i > 1 and (tokens[i-1] .. '_' .. key) or nil\r\n    while i > 1 and longkey and namespace[nspace][longkey] do\r\n      key = longkey\r\n      i = i - 1\r\n      token = tokens[i]\r\n      longkey = (token .. '_' .. key)\r\n    end\r\n\r\n    if namespace.modifier[key] or namespace[nspace][key] then\r\n      table.insert(keys, 1, key)\r\n      key = nil\r\n    end\r\n    i = i - 1\r\n  end\r\n\r\n  -- if there's anything left we didn't recognize it\r\n  if key then\r\n    error(\"luassert: unknown modifier/\" .. nspace .. \": '\" .. key ..\"'\", util.errorlevel(2))\r\n  end\r\n\r\n  return keys\r\nend",
    "type": "function"
  }, {
    "id": 120,
    "text": "local namespace = require 'luassert.namespaces'",
    "type": "statement:localassign"
  }, {
    "id": 121,
    "text": "local keys = {}",
    "type": "statement:localassign"
  }, {
    "id": 122,
    "text": "local key = nil",
    "type": "statement:localassign"
  }, {
    "id": 123,
    "text": "local i = #tokens",
    "type": "statement:localassign"
  }, {
    "id": 124,
    "text": "while i > 0 do\r\n    local token = tokens[i]\r\n    key = key and (token .. '_' .. key) or token\r\n\r\n    -- find longest matching key in the given namespace\r\n    local longkey = i > 1 and (tokens[i-1] .. '_' .. key) or nil\r\n    while i > 1 and longkey and namespace[nspace][longkey] do\r\n      key = longkey\r\n      i = i - 1\r\n      token = tokens[i]\r\n      longkey = (token .. '_' .. key)\r\n    end\r\n\r\n    if namespace.modifier[key] or namespace[nspace][key] then\r\n      table.insert(keys, 1, key)\r\n      key = nil\r\n    end\r\n    i = i - 1\r\n  end",
    "type": "statement:while"
  }, {
    "id": 125,
    "text": "local token = tokens[i]",
    "type": "statement:localassign"
  }, {
    "id": 126,
    "text": "key = key and (token .. '_' .. key) or token",
    "type": "statement:assign"
  }, {
    "id": 127,
    "text": "local longkey = i > 1 and (tokens[i-1] .. '_' .. key) or nil",
    "type": "statement:localassign"
  }, {
    "id": 128,
    "text": "while i > 1 and longkey and namespace[nspace][longkey] do\r\n      key = longkey\r\n      i = i - 1\r\n      token = tokens[i]\r\n      longkey = (token .. '_' .. key)\r\n    end",
    "type": "statement:while"
  }, {
    "id": 129,
    "text": "key = longkey",
    "type": "statement:assign"
  }, {
    "id": 130,
    "text": "i = i - 1",
    "type": "statement:assign"
  }, {
    "id": 131,
    "text": "token = tokens[i]",
    "type": "statement:assign"
  }, {
    "id": 132,
    "text": "longkey = (token .. '_' .. key)",
    "type": "statement:assign"
  }, {
    "id": 133,
    "text": "if namespace.modifier[key] or namespace[nspace][key] then\r\n      table.insert(keys, 1, key)\r\n      key = nil\r\n    end",
    "type": "statement:if"
  }, {
    "id": 134,
    "text": "table.insert(keys, 1, key)",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "key = nil",
    "type": "statement:assign"
  }, {
    "id": 136,
    "text": "if key then\r\n    error(\"luassert: unknown modifier/\" .. nspace .. \": '\" .. key ..\"'\", util.errorlevel(2))\r\n  end",
    "type": "statement:if"
  }, {
    "id": 137,
    "text": "error(\"luassert: unknown modifier/\" .. nspace .. \": '\" .. key ..\"'\", util.errorlevel(2))",
    "type": "statement:functioncall"
  }, {
    "id": 138,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 139,
    "text": "",
    "type": "function container"
  }, {
    "id": 140,
    "text": "is_spy",
    "type": "global function"
  }, {
    "id": 141,
    "text": "is_matcher",
    "type": "global function"
  }, {
    "id": 142,
    "text": "is_ref_matcher",
    "type": "global function"
  }, {
    "id": 143,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 144,
    "text": "getinfo",
    "type": "global function"
  }, {
    "id": 145,
    "text": "select",
    "type": "global function"
  }, {
    "id": 146,
    "text": "rawequal",
    "type": "global function"
  }, {
    "id": 147,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 148,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 149,
    "text": "v2",
    "type": "global function"
  }, {
    "id": 150,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 151,
    "text": "v1",
    "type": "global function"
  }, {
    "id": 152,
    "text": "require",
    "type": "global function"
  }, {
    "id": 153,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 154,
    "text": "error",
    "type": "global function"
  }, {
    "id": 155,
    "text": "type",
    "type": "global function"
  }, {
    "id": 156,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 157,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 158,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 159,
    "text": "",
    "type": "variable container"
  }, {
    "id": 160,
    "text": "",
    "type": "require container"
  }, {
    "id": 161,
    "text": "",
    "type": "local variable"
  }, {
    "id": 162,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 163,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 164,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 165,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 166,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 167,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 168,
    "text": "",
    "type": "interface container"
  }, {
    "id": 169,
    "text": "",
    "type": "interface"
  } ]
}