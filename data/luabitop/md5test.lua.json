{
  "_filename": "md5test.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luabitop/md5test.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 4,
    "label": "has",
    "to": 3
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 3
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 3
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 3
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 3
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 3
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 16,
    "label": "has",
    "to": 21
  }, {
    "from": 16,
    "label": "has",
    "to": 22
  }, {
    "from": 16,
    "label": "has",
    "to": 23
  }, {
    "from": 16,
    "label": "has",
    "to": 24
  }, {
    "from": 16,
    "label": "has",
    "to": 25
  }, {
    "from": 16,
    "label": "has",
    "to": 26
  }, {
    "from": 16,
    "label": "has",
    "to": 27
  }, {
    "from": 16,
    "label": "has",
    "to": 28
  }, {
    "from": 16,
    "label": "has",
    "to": 29
  }, {
    "from": 16,
    "label": "has",
    "to": 30
  }, {
    "from": 16,
    "label": "has",
    "to": 31
  }, {
    "from": 16,
    "label": "has",
    "to": 32
  }, {
    "from": 16,
    "label": "has",
    "to": 33
  }, {
    "from": 16,
    "label": "has",
    "to": 34
  }, {
    "from": 16,
    "label": "has",
    "to": 35
  }, {
    "from": 16,
    "label": "has",
    "to": 36
  }, {
    "from": 16,
    "label": "has",
    "to": 37
  }, {
    "from": 16,
    "label": "has",
    "to": 38
  }, {
    "from": 16,
    "label": "has",
    "to": 39
  }, {
    "from": 16,
    "label": "has",
    "to": 40
  }, {
    "from": 16,
    "label": "has",
    "to": 41
  }, {
    "from": 16,
    "label": "has",
    "to": 42
  }, {
    "from": 16,
    "label": "has",
    "to": 43
  }, {
    "from": 16,
    "label": "has",
    "to": 44
  }, {
    "from": 16,
    "label": "has",
    "to": 45
  }, {
    "from": 16,
    "label": "has",
    "to": 46
  }, {
    "from": 16,
    "label": "has",
    "to": 47
  }, {
    "from": 16,
    "label": "has",
    "to": 48
  }, {
    "from": 16,
    "label": "has",
    "to": 49
  }, {
    "from": 16,
    "label": "has",
    "to": 50
  }, {
    "from": 16,
    "label": "has",
    "to": 51
  }, {
    "from": 16,
    "label": "has",
    "to": 52
  }, {
    "from": 16,
    "label": "has",
    "to": 53
  }, {
    "from": 16,
    "label": "has",
    "to": 54
  }, {
    "from": 16,
    "label": "has",
    "to": 55
  }, {
    "from": 16,
    "label": "has",
    "to": 56
  }, {
    "from": 16,
    "label": "has",
    "to": 57
  }, {
    "from": 16,
    "label": "has",
    "to": 58
  }, {
    "from": 16,
    "label": "has",
    "to": 59
  }, {
    "from": 16,
    "label": "has",
    "to": 60
  }, {
    "from": 16,
    "label": "has",
    "to": 61
  }, {
    "from": 16,
    "label": "has",
    "to": 62
  }, {
    "from": 16,
    "label": "has",
    "to": 63
  }, {
    "from": 16,
    "label": "has",
    "to": 64
  }, {
    "from": 16,
    "label": "has",
    "to": 65
  }, {
    "from": 16,
    "label": "has",
    "to": 66
  }, {
    "from": 16,
    "label": "has",
    "to": 67
  }, {
    "from": 16,
    "label": "has",
    "to": 68
  }, {
    "from": 16,
    "label": "has",
    "to": 69
  }, {
    "from": 16,
    "label": "has",
    "to": 70
  }, {
    "from": 16,
    "label": "has",
    "to": 71
  }, {
    "from": 16,
    "label": "has",
    "to": 72
  }, {
    "from": 16,
    "label": "has",
    "to": 73
  }, {
    "from": 16,
    "label": "has",
    "to": 74
  }, {
    "from": 16,
    "label": "has",
    "to": 75
  }, {
    "from": 16,
    "label": "has",
    "to": 76
  }, {
    "from": 16,
    "label": "has",
    "to": 77
  }, {
    "from": 16,
    "label": "has",
    "to": 78
  }, {
    "from": 16,
    "label": "has",
    "to": 79
  }, {
    "from": 16,
    "label": "has",
    "to": 80
  }, {
    "from": 16,
    "label": "has",
    "to": 81
  }, {
    "from": 16,
    "label": "has",
    "to": 3
  }, {
    "from": 16,
    "label": "has",
    "to": 82
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 83,
    "label": "has",
    "to": 85
  }, {
    "from": 83,
    "label": "has",
    "to": 86
  }, {
    "from": 83,
    "label": "has",
    "to": 87
  }, {
    "from": 83,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 88,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 91,
    "label": "has",
    "to": 94
  }, {
    "from": 83,
    "label": "has",
    "to": 3
  }, {
    "from": 83,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 98,
    "label": "has",
    "to": 100
  }, {
    "from": 98,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 98,
    "label": "has",
    "to": 103
  }, {
    "from": 98,
    "label": "has",
    "to": 104
  }, {
    "from": 98,
    "label": "has",
    "to": 105
  }, {
    "from": 98,
    "label": "has",
    "to": 106
  }, {
    "from": 96,
    "label": "has",
    "to": 3
  }, {
    "from": 96,
    "label": "has",
    "to": 107
  }, {
    "from": 6,
    "label": "calls",
    "to": 121
  }, {
    "from": 108,
    "label": "calls",
    "to": 121
  }, {
    "from": 96,
    "label": "calls",
    "to": 110
  }, {
    "from": 96,
    "label": "calls",
    "to": 110
  }, {
    "from": 8,
    "label": "calls",
    "to": 2
  }, {
    "from": 10,
    "label": "calls",
    "to": 2
  }, {
    "from": 12,
    "label": "calls",
    "to": 2
  }, {
    "from": 14,
    "label": "calls",
    "to": 2
  }, {
    "from": 83,
    "label": "calls",
    "to": 16
  }, {
    "from": 16,
    "label": "calls",
    "to": 10
  }, {
    "from": 16,
    "label": "calls",
    "to": 10
  }, {
    "from": 16,
    "label": "calls",
    "to": 10
  }, {
    "from": 16,
    "label": "calls",
    "to": 10
  }, {
    "from": 16,
    "label": "calls",
    "to": 10
  }, {
    "from": 16,
    "label": "calls",
    "to": 10
  }, {
    "from": 16,
    "label": "calls",
    "to": 10
  }, {
    "from": 16,
    "label": "calls",
    "to": 10
  }, {
    "from": 16,
    "label": "calls",
    "to": 10
  }, {
    "from": 16,
    "label": "calls",
    "to": 10
  }, {
    "from": 16,
    "label": "calls",
    "to": 10
  }, {
    "from": 16,
    "label": "calls",
    "to": 10
  }, {
    "from": 16,
    "label": "calls",
    "to": 10
  }, {
    "from": 16,
    "label": "calls",
    "to": 10
  }, {
    "from": 16,
    "label": "calls",
    "to": 10
  }, {
    "from": 16,
    "label": "calls",
    "to": 10
  }, {
    "from": 108,
    "label": "calls",
    "to": 125
  }, {
    "from": 108,
    "label": "calls",
    "to": 125
  }, {
    "from": 108,
    "label": "calls",
    "to": 125
  }, {
    "from": 108,
    "label": "calls",
    "to": 125
  }, {
    "from": 108,
    "label": "calls",
    "to": 125
  }, {
    "from": 108,
    "label": "calls",
    "to": 125
  }, {
    "from": 108,
    "label": "calls",
    "to": 125
  }, {
    "from": 96,
    "label": "calls",
    "to": 125
  }, {
    "from": 16,
    "label": "calls",
    "to": 14
  }, {
    "from": 16,
    "label": "calls",
    "to": 14
  }, {
    "from": 16,
    "label": "calls",
    "to": 14
  }, {
    "from": 16,
    "label": "calls",
    "to": 14
  }, {
    "from": 16,
    "label": "calls",
    "to": 14
  }, {
    "from": 16,
    "label": "calls",
    "to": 14
  }, {
    "from": 16,
    "label": "calls",
    "to": 14
  }, {
    "from": 16,
    "label": "calls",
    "to": 14
  }, {
    "from": 16,
    "label": "calls",
    "to": 14
  }, {
    "from": 16,
    "label": "calls",
    "to": 14
  }, {
    "from": 16,
    "label": "calls",
    "to": 14
  }, {
    "from": 16,
    "label": "calls",
    "to": 14
  }, {
    "from": 16,
    "label": "calls",
    "to": 14
  }, {
    "from": 16,
    "label": "calls",
    "to": 14
  }, {
    "from": 16,
    "label": "calls",
    "to": 14
  }, {
    "from": 16,
    "label": "calls",
    "to": 14
  }, {
    "from": 14,
    "label": "calls",
    "to": 113
  }, {
    "from": 83,
    "label": "calls",
    "to": 114
  }, {
    "from": 83,
    "label": "calls",
    "to": 115
  }, {
    "from": 83,
    "label": "calls",
    "to": 115
  }, {
    "from": 83,
    "label": "calls",
    "to": 115
  }, {
    "from": 83,
    "label": "calls",
    "to": 115
  }, {
    "from": 83,
    "label": "calls",
    "to": 6
  }, {
    "from": 83,
    "label": "calls",
    "to": 6
  }, {
    "from": 83,
    "label": "calls",
    "to": 6
  }, {
    "from": 83,
    "label": "calls",
    "to": 6
  }, {
    "from": 16,
    "label": "calls",
    "to": 12
  }, {
    "from": 16,
    "label": "calls",
    "to": 12
  }, {
    "from": 16,
    "label": "calls",
    "to": 12
  }, {
    "from": 16,
    "label": "calls",
    "to": 12
  }, {
    "from": 16,
    "label": "calls",
    "to": 12
  }, {
    "from": 16,
    "label": "calls",
    "to": 12
  }, {
    "from": 16,
    "label": "calls",
    "to": 12
  }, {
    "from": 16,
    "label": "calls",
    "to": 12
  }, {
    "from": 16,
    "label": "calls",
    "to": 12
  }, {
    "from": 16,
    "label": "calls",
    "to": 12
  }, {
    "from": 16,
    "label": "calls",
    "to": 12
  }, {
    "from": 16,
    "label": "calls",
    "to": 12
  }, {
    "from": 16,
    "label": "calls",
    "to": 12
  }, {
    "from": 16,
    "label": "calls",
    "to": 12
  }, {
    "from": 16,
    "label": "calls",
    "to": 12
  }, {
    "from": 16,
    "label": "calls",
    "to": 12
  }, {
    "from": 8,
    "label": "calls",
    "to": 123
  }, {
    "from": 8,
    "label": "calls",
    "to": 123
  }, {
    "from": 10,
    "label": "calls",
    "to": 123
  }, {
    "from": 10,
    "label": "calls",
    "to": 123
  }, {
    "from": 12,
    "label": "calls",
    "to": 123
  }, {
    "from": 14,
    "label": "calls",
    "to": 123
  }, {
    "from": 2,
    "label": "calls",
    "to": 118
  }, {
    "from": 4,
    "label": "calls",
    "to": 118
  }, {
    "from": 4,
    "label": "calls",
    "to": 118
  }, {
    "from": 108,
    "label": "calls",
    "to": 83
  }, {
    "from": 108,
    "label": "calls",
    "to": 83
  }, {
    "from": 108,
    "label": "calls",
    "to": 83
  }, {
    "from": 108,
    "label": "calls",
    "to": 83
  }, {
    "from": 108,
    "label": "calls",
    "to": 83
  }, {
    "from": 108,
    "label": "calls",
    "to": 83
  }, {
    "from": 108,
    "label": "calls",
    "to": 83
  }, {
    "from": 96,
    "label": "calls",
    "to": 83
  }, {
    "from": 2,
    "label": "calls",
    "to": 122
  }, {
    "from": 4,
    "label": "calls",
    "to": 122
  }, {
    "from": 14,
    "label": "calls",
    "to": 122
  }, {
    "from": 83,
    "label": "calls",
    "to": 122
  }, {
    "from": 83,
    "label": "calls",
    "to": 119
  }, {
    "from": 2,
    "label": "calls",
    "to": 120
  }, {
    "from": 4,
    "label": "calls",
    "to": 120
  }, {
    "from": 4,
    "label": "calls",
    "to": 120
  }, {
    "from": 16,
    "label": "calls",
    "to": 8
  }, {
    "from": 16,
    "label": "calls",
    "to": 8
  }, {
    "from": 16,
    "label": "calls",
    "to": 8
  }, {
    "from": 16,
    "label": "calls",
    "to": 8
  }, {
    "from": 16,
    "label": "calls",
    "to": 8
  }, {
    "from": 16,
    "label": "calls",
    "to": 8
  }, {
    "from": 16,
    "label": "calls",
    "to": 8
  }, {
    "from": 16,
    "label": "calls",
    "to": 8
  }, {
    "from": 16,
    "label": "calls",
    "to": 8
  }, {
    "from": 16,
    "label": "calls",
    "to": 8
  }, {
    "from": 16,
    "label": "calls",
    "to": 8
  }, {
    "from": 16,
    "label": "calls",
    "to": 8
  }, {
    "from": 16,
    "label": "calls",
    "to": 8
  }, {
    "from": 16,
    "label": "calls",
    "to": 8
  }, {
    "from": 16,
    "label": "calls",
    "to": 8
  }, {
    "from": 16,
    "label": "calls",
    "to": 8
  }, {
    "from": 83,
    "label": "calls",
    "to": 4
  }, {
    "from": 83,
    "label": "calls",
    "to": 4
  }, {
    "from": 83,
    "label": "calls",
    "to": 4
  }, {
    "from": 83,
    "label": "calls",
    "to": 4
  }, {
    "from": 83,
    "label": "calls",
    "to": 117
  }, {
    "from": 83,
    "label": "calls",
    "to": 117
  }, {
    "from": 83,
    "label": "calls",
    "to": 117
  }, {
    "from": 6,
    "label": "calls",
    "to": 116
  }, {
    "from": 108,
    "label": "calls",
    "to": 96
  }, {
    "from": 83,
    "label": "calls",
    "to": 112
  }, {
    "from": 16,
    "label": "calls",
    "to": 111
  }, {
    "from": 16,
    "label": "calls",
    "to": 111
  }, {
    "from": 16,
    "label": "calls",
    "to": 111
  }, {
    "from": 16,
    "label": "calls",
    "to": 111
  }, {
    "from": 108,
    "label": "calls",
    "to": 124
  }, {
    "from": 108,
    "label": "calls",
    "to": 109
  }, {
    "from": 4,
    "label": "calls",
    "to": 126
  }, {
    "from": 4,
    "label": "calls",
    "to": 126
  }, {
    "from": 8,
    "label": "calls",
    "to": 126
  }, {
    "from": 10,
    "label": "calls",
    "to": 126
  }, {
    "from": 83,
    "label": "calls",
    "to": 126
  }, {
    "from": 83,
    "label": "calls",
    "to": 126
  }, {
    "from": 83,
    "label": "calls",
    "to": 126
  }, {
    "from": 83,
    "label": "calls",
    "to": 126
  }, {
    "from": 83,
    "label": "calls",
    "to": 126
  }, {
    "from": 1,
    "label": "contains",
    "to": 108
  }, {
    "from": 108,
    "label": "declares",
    "to": 2
  }, {
    "from": 108,
    "label": "declares",
    "to": 4
  }, {
    "from": 108,
    "label": "declares",
    "to": 6
  }, {
    "from": 108,
    "label": "declares",
    "to": 8
  }, {
    "from": 108,
    "label": "declares",
    "to": 10
  }, {
    "from": 108,
    "label": "declares",
    "to": 12
  }, {
    "from": 108,
    "label": "declares",
    "to": 14
  }, {
    "from": 108,
    "label": "declares",
    "to": 16
  }, {
    "from": 108,
    "label": "declares",
    "to": 83
  }, {
    "from": 108,
    "label": "declares",
    "to": 96
  }, {
    "from": 1,
    "label": "contains",
    "to": 127
  }, {
    "from": 1,
    "label": "contains",
    "to": 128
  }, {
    "from": 127,
    "label": "initializes",
    "to": 129
  }, {
    "from": 129,
    "label": "assigns",
    "to": 130
  }, {
    "from": 127,
    "label": "initializes",
    "to": 131
  }, {
    "from": 131,
    "label": "assigns",
    "to": 132
  }, {
    "from": 127,
    "label": "initializes",
    "to": 133
  }, {
    "from": 133,
    "label": "assigns",
    "to": 134
  }, {
    "from": 127,
    "label": "initializes",
    "to": 135
  }, {
    "from": 135,
    "label": "assigns",
    "to": 136
  }, {
    "from": 127,
    "label": "initializes",
    "to": 137
  }, {
    "from": 137,
    "label": "assigns",
    "to": 138
  }, {
    "from": 127,
    "label": "initializes",
    "to": 139
  }, {
    "from": 139,
    "label": "assigns",
    "to": 140
  }, {
    "from": 127,
    "label": "initializes",
    "to": 141
  }, {
    "from": 141,
    "label": "assigns",
    "to": 142
  }, {
    "from": 127,
    "label": "initializes",
    "to": 143
  }, {
    "from": 143,
    "label": "assigns",
    "to": 144
  }, {
    "from": 127,
    "label": "initializes",
    "to": 145
  }, {
    "from": 145,
    "label": "assigns",
    "to": 146
  }, {
    "from": 127,
    "label": "initializes",
    "to": 147
  }, {
    "from": 147,
    "label": "assigns",
    "to": 148
  }, {
    "from": 127,
    "label": "initializes",
    "to": 149
  }, {
    "from": 149,
    "label": "assigns",
    "to": 150
  }, {
    "from": 127,
    "label": "initializes",
    "to": 151
  }, {
    "from": 151,
    "label": "assigns",
    "to": 152
  }, {
    "from": 127,
    "label": "initializes",
    "to": 153
  }, {
    "from": 153,
    "label": "assigns",
    "to": 154
  }, {
    "from": 127,
    "label": "initializes",
    "to": 155
  }, {
    "from": 155,
    "label": "assigns",
    "to": 156
  }, {
    "from": 128,
    "label": "initializes",
    "to": 157
  }, {
    "from": 157,
    "label": "requires",
    "to": 158
  }, {
    "from": 159,
    "label": "requires",
    "to": 158
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "md5test",
    "type": "module"
  }, {
    "id": 2,
    "text": "function rol(a, b) return bor(shl(a, b), shr(a, 32-b)) end",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "function bswap(a)\r\n    return bor(shr(a, 24), band(shr(a, 8), 0xff00),\r\n\t       shl(band(a, 0xff00), 8), shl(a, 24));\r\n  end",
    "type": "function"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "function tohex(a)\r\n    return string.sub(string.format(\"%08x\", a), -8)\r\n  end",
    "type": "function"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "local function tr_f(a, b, c, d, x, s)\r\n  return rol(bxor(d, band(b, bxor(c, d))) + a + x, s) + b\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "local function tr_g(a, b, c, d, x, s)\r\n  return rol(bxor(c, band(d, bxor(b, c))) + a + x, s) + b\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "local function tr_h(a, b, c, d, x, s)\r\n  return rol(bxor(b, c, d) + a + x, s) + b\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "local function tr_i(a, b, c, d, x, s)\r\n  return rol(bxor(c, bor(b, bnot(d))) + a + x, s) + b\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "local function transform(x, a1, b1, c1, d1)\r\n  local a, b, c, d = a1, b1, c1, d1\r\n\r\n  a = tr_f(a, b, c, d, x[ 1] + 0xd76aa478,  7)\r\n  d = tr_f(d, a, b, c, x[ 2] + 0xe8c7b756, 12)\r\n  c = tr_f(c, d, a, b, x[ 3] + 0x242070db, 17)\r\n  b = tr_f(b, c, d, a, x[ 4] + 0xc1bdceee, 22)\r\n  a = tr_f(a, b, c, d, x[ 5] + 0xf57c0faf,  7)\r\n  d = tr_f(d, a, b, c, x[ 6] + 0x4787c62a, 12)\r\n  c = tr_f(c, d, a, b, x[ 7] + 0xa8304613, 17)\r\n  b = tr_f(b, c, d, a, x[ 8] + 0xfd469501, 22)\r\n  a = tr_f(a, b, c, d, x[ 9] + 0x698098d8,  7)\r\n  d = tr_f(d, a, b, c, x[10] + 0x8b44f7af, 12)\r\n  c = tr_f(c, d, a, b, x[11] + 0xffff5bb1, 17)\r\n  b = tr_f(b, c, d, a, x[12] + 0x895cd7be, 22)\r\n  a = tr_f(a, b, c, d, x[13] + 0x6b901122,  7)\r\n  d = tr_f(d, a, b, c, x[14] + 0xfd987193, 12)\r\n  c = tr_f(c, d, a, b, x[15] + 0xa679438e, 17)\r\n  b = tr_f(b, c, d, a, x[16] + 0x49b40821, 22)\r\n\r\n  a = tr_g(a, b, c, d, x[ 2] + 0xf61e2562,  5)\r\n  d = tr_g(d, a, b, c, x[ 7] + 0xc040b340,  9)\r\n  c = tr_g(c, d, a, b, x[12] + 0x265e5a51, 14)\r\n  b = tr_g(b, c, d, a, x[ 1] + 0xe9b6c7aa, 20)\r\n  a = tr_g(a, b, c, d, x[ 6] + 0xd62f105d,  5)\r\n  d = tr_g(d, a, b, c, x[11] + 0x02441453,  9)\r\n  c = tr_g(c, d, a, b, x[16] + 0xd8a1e681, 14)\r\n  b = tr_g(b, c, d, a, x[ 5] + 0xe7d3fbc8, 20)\r\n  a = tr_g(a, b, c, d, x[10] + 0x21e1cde6,  5)\r\n  d = tr_g(d, a, b, c, x[15] + 0xc33707d6,  9)\r\n  c = tr_g(c, d, a, b, x[ 4] + 0xf4d50d87, 14)\r\n  b = tr_g(b, c, d, a, x[ 9] + 0x455a14ed, 20)\r\n  a = tr_g(a, b, c, d, x[14] + 0xa9e3e905,  5)\r\n  d = tr_g(d, a, b, c, x[ 3] + 0xfcefa3f8,  9)\r\n  c = tr_g(c, d, a, b, x[ 8] + 0x676f02d9, 14)\r\n  b = tr_g(b, c, d, a, x[13] + 0x8d2a4c8a, 20)\r\n\r\n  a = tr_h(a, b, c, d, x[ 6] + 0xfffa3942,  4)\r\n  d = tr_h(d, a, b, c, x[ 9] + 0x8771f681, 11)\r\n  c = tr_h(c, d, a, b, x[12] + 0x6d9d6122, 16)\r\n  b = tr_h(b, c, d, a, x[15] + 0xfde5380c, 23)\r\n  a = tr_h(a, b, c, d, x[ 2] + 0xa4beea44,  4)\r\n  d = tr_h(d, a, b, c, x[ 5] + 0x4bdecfa9, 11)\r\n  c = tr_h(c, d, a, b, x[ 8] + 0xf6bb4b60, 16)\r\n  b = tr_h(b, c, d, a, x[11] + 0xbebfbc70, 23)\r\n  a = tr_h(a, b, c, d, x[14] + 0x289b7ec6,  4)\r\n  d = tr_h(d, a, b, c, x[ 1] + 0xeaa127fa, 11)\r\n  c = tr_h(c, d, a, b, x[ 4] + 0xd4ef3085, 16)\r\n  b = tr_h(b, c, d, a, x[ 7] + 0x04881d05, 23)\r\n  a = tr_h(a, b, c, d, x[10] + 0xd9d4d039,  4)\r\n  d = tr_h(d, a, b, c, x[13] + 0xe6db99e5, 11)\r\n  c = tr_h(c, d, a, b, x[16] + 0x1fa27cf8, 16)\r\n  b = tr_h(b, c, d, a, x[ 3] + 0xc4ac5665, 23)\r\n\r\n  a = tr_i(a, b, c, d, x[ 1] + 0xf4292244,  6)\r\n  d = tr_i(d, a, b, c, x[ 8] + 0x432aff97, 10)\r\n  c = tr_i(c, d, a, b, x[15] + 0xab9423a7, 15)\r\n  b = tr_i(b, c, d, a, x[ 6] + 0xfc93a039, 21)\r\n  a = tr_i(a, b, c, d, x[13] + 0x655b59c3,  6)\r\n  d = tr_i(d, a, b, c, x[ 4] + 0x8f0ccc92, 10)\r\n  c = tr_i(c, d, a, b, x[11] + 0xffeff47d, 15)\r\n  b = tr_i(b, c, d, a, x[ 2] + 0x85845dd1, 21)\r\n  a = tr_i(a, b, c, d, x[ 9] + 0x6fa87e4f,  6)\r\n  d = tr_i(d, a, b, c, x[16] + 0xfe2ce6e0, 10)\r\n  c = tr_i(c, d, a, b, x[ 7] + 0xa3014314, 15)\r\n  b = tr_i(b, c, d, a, x[14] + 0x4e0811a1, 21)\r\n  a = tr_i(a, b, c, d, x[ 5] + 0xf7537e82,  6)\r\n  d = tr_i(d, a, b, c, x[12] + 0xbd3af235, 10)\r\n  c = tr_i(c, d, a, b, x[ 3] + 0x2ad7d2bb, 15)\r\n  b = tr_i(b, c, d, a, x[10] + 0xeb86d391, 21)\r\n\r\n  return tobit(a+a1), tobit(b+b1), tobit(c+c1), tobit(d+d1)\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "local a, b, c, d = a1, b1, c1, d1",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "a = tr_f(a, b, c, d, x[ 1] + 0xd76aa478,  7)",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "d = tr_f(d, a, b, c, x[ 2] + 0xe8c7b756, 12)",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "c = tr_f(c, d, a, b, x[ 3] + 0x242070db, 17)",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "b = tr_f(b, c, d, a, x[ 4] + 0xc1bdceee, 22)",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "a = tr_f(a, b, c, d, x[ 5] + 0xf57c0faf,  7)",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "d = tr_f(d, a, b, c, x[ 6] + 0x4787c62a, 12)",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "c = tr_f(c, d, a, b, x[ 7] + 0xa8304613, 17)",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "b = tr_f(b, c, d, a, x[ 8] + 0xfd469501, 22)",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "a = tr_f(a, b, c, d, x[ 9] + 0x698098d8,  7)",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "d = tr_f(d, a, b, c, x[10] + 0x8b44f7af, 12)",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "c = tr_f(c, d, a, b, x[11] + 0xffff5bb1, 17)",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "b = tr_f(b, c, d, a, x[12] + 0x895cd7be, 22)",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "a = tr_f(a, b, c, d, x[13] + 0x6b901122,  7)",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "d = tr_f(d, a, b, c, x[14] + 0xfd987193, 12)",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "c = tr_f(c, d, a, b, x[15] + 0xa679438e, 17)",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "b = tr_f(b, c, d, a, x[16] + 0x49b40821, 22)",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "a = tr_g(a, b, c, d, x[ 2] + 0xf61e2562,  5)",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "d = tr_g(d, a, b, c, x[ 7] + 0xc040b340,  9)",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "c = tr_g(c, d, a, b, x[12] + 0x265e5a51, 14)",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "b = tr_g(b, c, d, a, x[ 1] + 0xe9b6c7aa, 20)",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "a = tr_g(a, b, c, d, x[ 6] + 0xd62f105d,  5)",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "d = tr_g(d, a, b, c, x[11] + 0x02441453,  9)",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "c = tr_g(c, d, a, b, x[16] + 0xd8a1e681, 14)",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "b = tr_g(b, c, d, a, x[ 5] + 0xe7d3fbc8, 20)",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "a = tr_g(a, b, c, d, x[10] + 0x21e1cde6,  5)",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "d = tr_g(d, a, b, c, x[15] + 0xc33707d6,  9)",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "c = tr_g(c, d, a, b, x[ 4] + 0xf4d50d87, 14)",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "b = tr_g(b, c, d, a, x[ 9] + 0x455a14ed, 20)",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "a = tr_g(a, b, c, d, x[14] + 0xa9e3e905,  5)",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "d = tr_g(d, a, b, c, x[ 3] + 0xfcefa3f8,  9)",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "c = tr_g(c, d, a, b, x[ 8] + 0x676f02d9, 14)",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "b = tr_g(b, c, d, a, x[13] + 0x8d2a4c8a, 20)",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "a = tr_h(a, b, c, d, x[ 6] + 0xfffa3942,  4)",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "d = tr_h(d, a, b, c, x[ 9] + 0x8771f681, 11)",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "c = tr_h(c, d, a, b, x[12] + 0x6d9d6122, 16)",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "b = tr_h(b, c, d, a, x[15] + 0xfde5380c, 23)",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "a = tr_h(a, b, c, d, x[ 2] + 0xa4beea44,  4)",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "d = tr_h(d, a, b, c, x[ 5] + 0x4bdecfa9, 11)",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "c = tr_h(c, d, a, b, x[ 8] + 0xf6bb4b60, 16)",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "b = tr_h(b, c, d, a, x[11] + 0xbebfbc70, 23)",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "a = tr_h(a, b, c, d, x[14] + 0x289b7ec6,  4)",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "d = tr_h(d, a, b, c, x[ 1] + 0xeaa127fa, 11)",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "c = tr_h(c, d, a, b, x[ 4] + 0xd4ef3085, 16)",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "b = tr_h(b, c, d, a, x[ 7] + 0x04881d05, 23)",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "a = tr_h(a, b, c, d, x[10] + 0xd9d4d039,  4)",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "d = tr_h(d, a, b, c, x[13] + 0xe6db99e5, 11)",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "c = tr_h(c, d, a, b, x[16] + 0x1fa27cf8, 16)",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "b = tr_h(b, c, d, a, x[ 3] + 0xc4ac5665, 23)",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "a = tr_i(a, b, c, d, x[ 1] + 0xf4292244,  6)",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "d = tr_i(d, a, b, c, x[ 8] + 0x432aff97, 10)",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "c = tr_i(c, d, a, b, x[15] + 0xab9423a7, 15)",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "b = tr_i(b, c, d, a, x[ 6] + 0xfc93a039, 21)",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "a = tr_i(a, b, c, d, x[13] + 0x655b59c3,  6)",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "d = tr_i(d, a, b, c, x[ 4] + 0x8f0ccc92, 10)",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "c = tr_i(c, d, a, b, x[11] + 0xffeff47d, 15)",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "b = tr_i(b, c, d, a, x[ 2] + 0x85845dd1, 21)",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "a = tr_i(a, b, c, d, x[ 9] + 0x6fa87e4f,  6)",
    "type": "statement:assign"
  }, {
    "id": 75,
    "text": "d = tr_i(d, a, b, c, x[16] + 0xfe2ce6e0, 10)",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "c = tr_i(c, d, a, b, x[ 7] + 0xa3014314, 15)",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "b = tr_i(b, c, d, a, x[14] + 0x4e0811a1, 21)",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "a = tr_i(a, b, c, d, x[ 5] + 0xf7537e82,  6)",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "d = tr_i(d, a, b, c, x[12] + 0xbd3af235, 10)",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "c = tr_i(c, d, a, b, x[ 3] + 0x2ad7d2bb, 15)",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "b = tr_i(b, c, d, a, x[10] + 0xeb86d391, 21)",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 83,
    "text": "local function md5(msg)\r\n  local len = #msg\r\n  msg = msg..\"\\128\"..rep(\"\\0\", 63 - band(len + 8, 63))\r\n\t   ..char(band(lshift(len, 3), 255), band(rshift(len, 5), 255),\r\n\t\t  band(rshift(len, 13), 255), band(rshift(len, 21), 255))\r\n\t   ..\"\\0\\0\\0\\0\"\r\n  local a, b, c, d = 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476\r\n  local x, k = {}, 1\r\n  for i=1,#msg,4 do\r\n    local m0, m1, m2, m3 = byte(msg, i, i+3)\r\n    x[k] = bor(m0, lshift(m1, 8), lshift(m2, 16), lshift(m3, 24))\r\n    if k == 16 then\r\n      a, b, c, d = transform(x, a, b, c, d)\r\n      k = 1\r\n    else\r\n      k = k + 1\r\n    end\r\n  end\r\n  return tohex(bswap(a))..tohex(bswap(b))..tohex(bswap(c))..tohex(bswap(d))\r\nend",
    "type": "function"
  }, {
    "id": 84,
    "text": "local len = #msg",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "msg = msg..\"\\128\"..rep(\"\\0\", 63 - band(len + 8, 63))\r\n\t   ..char(band(lshift(len, 3), 255), band(rshift(len, 5), 255),\r\n\t\t  band(rshift(len, 13), 255), band(rshift(len, 21), 255))\r\n\t   ..\"\\0\\0\\0\\0\"",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "local a, b, c, d = 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476",
    "type": "statement:localassign"
  }, {
    "id": 87,
    "text": "local x, k = {}, 1",
    "type": "statement:localassign"
  }, {
    "id": 88,
    "text": "for i=1,#msg,4 do\r\n    local m0, m1, m2, m3 = byte(msg, i, i+3)\r\n    x[k] = bor(m0, lshift(m1, 8), lshift(m2, 16), lshift(m3, 24))\r\n    if k == 16 then\r\n      a, b, c, d = transform(x, a, b, c, d)\r\n      k = 1\r\n    else\r\n      k = k + 1\r\n    end\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 89,
    "text": "local m0, m1, m2, m3 = byte(msg, i, i+3)",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "x[k] = bor(m0, lshift(m1, 8), lshift(m2, 16), lshift(m3, 24))",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "if k == 16 then\r\n      a, b, c, d = transform(x, a, b, c, d)\r\n      k = 1\r\n    else\r\n      k = k + 1\r\n    end",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "a, b, c, d = transform(x, a, b, c, d)",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "k = 1",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "k = k + 1",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "local function bench()\r\n    local n = 80\r\n    repeat\r\n      local tm = os.clock()\r\n      local res\r\n      for i=1,n do\r\n\tres = md5(txt)\r\n      end\r\n      assert(res == 'a831e91e0f70eddcb70dc61c6f82f6cd')\r\n      tm = os.clock() - tm\r\n      if tm > 1 then return tm*(1000000000/(n*#txt)) end\r\n      n = n + n\r\n    until false\r\n  end",
    "type": "function"
  }, {
    "id": 97,
    "text": "local n = 80",
    "type": "statement:localassign"
  }, {
    "id": 98,
    "text": "repeat\r\n      local tm = os.clock()\r\n      local res\r\n      for i=1,n do\r\n\tres = md5(txt)\r\n      end\r\n      assert(res == 'a831e91e0f70eddcb70dc61c6f82f6cd')\r\n      tm = os.clock() - tm\r\n      if tm > 1 then return tm*(1000000000/(n*#txt)) end\r\n      n = n + n\r\n    until false",
    "type": "statement:repeat"
  }, {
    "id": 99,
    "text": "local tm = os.clock()",
    "type": "statement:localassign"
  }, {
    "id": 100,
    "text": "local res",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "for i=1,n do\r\n\tres = md5(txt)\r\n      end",
    "type": "statement:numericfor"
  }, {
    "id": 102,
    "text": "res = md5(txt)",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "assert(res == 'a831e91e0f70eddcb70dc61c6f82f6cd')",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "tm = os.clock() - tm",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "if tm > 1 then return tm*(1000000000/(n*#txt)) end",
    "type": "statement:if"
  }, {
    "id": 106,
    "text": "n = n + n",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 108,
    "text": "",
    "type": "function container"
  }, {
    "id": 109,
    "text": "write",
    "type": "global function"
  }, {
    "id": 110,
    "text": "clock",
    "type": "global function"
  }, {
    "id": 111,
    "text": "tobit",
    "type": "global function"
  }, {
    "id": 112,
    "text": "byte",
    "type": "global function"
  }, {
    "id": 113,
    "text": "bnot",
    "type": "global function"
  }, {
    "id": 114,
    "text": "char",
    "type": "global function"
  }, {
    "id": 115,
    "text": "lshift",
    "type": "global function"
  }, {
    "id": 116,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 117,
    "text": "rshift",
    "type": "global function"
  }, {
    "id": 118,
    "text": "shl",
    "type": "global function"
  }, {
    "id": 119,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 120,
    "text": "shr",
    "type": "global function"
  }, {
    "id": 121,
    "text": "format",
    "type": "global function"
  }, {
    "id": 122,
    "text": "bor",
    "type": "global function"
  }, {
    "id": 123,
    "text": "bxor",
    "type": "global function"
  }, {
    "id": 124,
    "text": "require",
    "type": "global function"
  }, {
    "id": 125,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 126,
    "text": "band",
    "type": "global function"
  }, {
    "id": 127,
    "text": "",
    "type": "variable container"
  }, {
    "id": 128,
    "text": "",
    "type": "require container"
  }, {
    "id": 129,
    "text": "",
    "type": "local variable"
  }, {
    "id": 130,
    "text": "",
    "type": "n/a"
  }, {
    "id": 131,
    "text": "",
    "type": "local variable"
  }, {
    "id": 132,
    "text": "",
    "type": "n/a"
  }, {
    "id": 133,
    "text": "",
    "type": "local variable"
  }, {
    "id": 134,
    "text": "",
    "type": "n/a"
  }, {
    "id": 135,
    "text": "",
    "type": "local variable"
  }, {
    "id": 136,
    "text": "",
    "type": "n/a"
  }, {
    "id": 137,
    "text": "",
    "type": "local variable"
  }, {
    "id": 138,
    "text": "",
    "type": "n/a"
  }, {
    "id": 139,
    "text": "",
    "type": "local variable"
  }, {
    "id": 140,
    "text": "",
    "type": "n/a"
  }, {
    "id": 141,
    "text": "",
    "type": "local variable"
  }, {
    "id": 142,
    "text": "",
    "type": "n/a"
  }, {
    "id": 143,
    "text": "",
    "type": "local variable"
  }, {
    "id": 144,
    "text": "",
    "type": "n/a"
  }, {
    "id": 145,
    "text": "",
    "type": "local variable"
  }, {
    "id": 146,
    "text": "",
    "type": "n/a"
  }, {
    "id": 147,
    "text": "",
    "type": "local variable"
  }, {
    "id": 148,
    "text": "",
    "type": "n/a"
  }, {
    "id": 149,
    "text": "",
    "type": "local variable"
  }, {
    "id": 150,
    "text": "",
    "type": "n/a"
  }, {
    "id": 151,
    "text": "",
    "type": "local variable"
  }, {
    "id": 152,
    "text": "",
    "type": "n/a"
  }, {
    "id": 153,
    "text": "",
    "type": "local variable"
  }, {
    "id": 154,
    "text": "",
    "type": "n/a"
  }, {
    "id": 155,
    "text": "",
    "type": "local variable"
  }, {
    "id": 156,
    "text": "",
    "type": "n/a"
  }, {
    "id": 157,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 158,
    "text": "(bit)",
    "type": "module"
  }, {
    "id": 159,
    "text": "",
    "type": "require local variable"
  } ]
}