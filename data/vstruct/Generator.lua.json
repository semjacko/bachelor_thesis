{
  "_filename": "Generator.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/vstruct/vstruct/ast/Generator.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 14
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 16,
    "label": "has",
    "to": 22
  }, {
    "from": 16,
    "label": "has",
    "to": 23
  }, {
    "from": 16,
    "label": "has",
    "to": 24
  }, {
    "from": 16,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 25,
    "label": "has",
    "to": 29
  }, {
    "from": 25,
    "label": "has",
    "to": 30
  }, {
    "from": 25,
    "label": "has",
    "to": 31
  }, {
    "from": 25,
    "label": "has",
    "to": 10
  }, {
    "from": 25,
    "label": "has",
    "to": 10
  }, {
    "from": 16,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 32,
    "label": "has",
    "to": 36
  }, {
    "from": 32,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 32,
    "label": "has",
    "to": 40
  }, {
    "from": 32,
    "label": "has",
    "to": 41
  }, {
    "from": 32,
    "label": "has",
    "to": 42
  }, {
    "from": 32,
    "label": "has",
    "to": 10
  }, {
    "from": 32,
    "label": "has",
    "to": 10
  }, {
    "from": 16,
    "label": "has",
    "to": 10
  }, {
    "from": 16,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 44,
    "label": "has",
    "to": 28
  }, {
    "from": 44,
    "label": "has",
    "to": 29
  }, {
    "from": 44,
    "label": "has",
    "to": 30
  }, {
    "from": 44,
    "label": "has",
    "to": 31
  }, {
    "from": 44,
    "label": "has",
    "to": 10
  }, {
    "from": 44,
    "label": "has",
    "to": 10
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 46,
    "label": "has",
    "to": 35
  }, {
    "from": 46,
    "label": "has",
    "to": 36
  }, {
    "from": 46,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 46,
    "label": "has",
    "to": 40
  }, {
    "from": 46,
    "label": "has",
    "to": 41
  }, {
    "from": 46,
    "label": "has",
    "to": 42
  }, {
    "from": 46,
    "label": "has",
    "to": 10
  }, {
    "from": 46,
    "label": "has",
    "to": 10
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 53,
    "label": "has",
    "to": 56
  }, {
    "from": 48,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 59,
    "label": "has",
    "to": 62
  }, {
    "from": 58,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 64,
    "label": "has",
    "to": 67
  }, {
    "from": 64,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 69,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 66
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 71
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 80,
    "label": "has",
    "to": 82
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 84,
    "label": "has",
    "to": 87
  }, {
    "from": 84,
    "label": "has",
    "to": 88
  }, {
    "from": 84,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 84,
    "label": "has",
    "to": 91
  }, {
    "from": 84,
    "label": "has",
    "to": 92
  }, {
    "from": 84,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 83,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 96,
    "label": "has",
    "to": 99
  }, {
    "from": 96,
    "label": "has",
    "to": 100
  }, {
    "from": 96,
    "label": "has",
    "to": 101
  }, {
    "from": 96,
    "label": "has",
    "to": 102
  }, {
    "from": 96,
    "label": "has",
    "to": 103
  }, {
    "from": 96,
    "label": "has",
    "to": 104
  }, {
    "from": 96,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 96,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 96,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 96,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 14
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 16,
    "label": "has",
    "to": 22
  }, {
    "from": 16,
    "label": "has",
    "to": 23
  }, {
    "from": 16,
    "label": "has",
    "to": 24
  }, {
    "from": 16,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 25,
    "label": "has",
    "to": 29
  }, {
    "from": 25,
    "label": "has",
    "to": 30
  }, {
    "from": 25,
    "label": "has",
    "to": 31
  }, {
    "from": 25,
    "label": "has",
    "to": 10
  }, {
    "from": 25,
    "label": "has",
    "to": 10
  }, {
    "from": 16,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 32,
    "label": "has",
    "to": 36
  }, {
    "from": 32,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 32,
    "label": "has",
    "to": 40
  }, {
    "from": 32,
    "label": "has",
    "to": 41
  }, {
    "from": 32,
    "label": "has",
    "to": 42
  }, {
    "from": 32,
    "label": "has",
    "to": 10
  }, {
    "from": 32,
    "label": "has",
    "to": 10
  }, {
    "from": 16,
    "label": "has",
    "to": 10
  }, {
    "from": 96,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 53,
    "label": "has",
    "to": 56
  }, {
    "from": 96,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 59,
    "label": "has",
    "to": 62
  }, {
    "from": 96,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 64,
    "label": "has",
    "to": 67
  }, {
    "from": 96,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 96,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 66
  }, {
    "from": 96,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 71
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 96,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 96,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 84,
    "label": "has",
    "to": 87
  }, {
    "from": 84,
    "label": "has",
    "to": 88
  }, {
    "from": 84,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 84,
    "label": "has",
    "to": 91
  }, {
    "from": 84,
    "label": "has",
    "to": 92
  }, {
    "from": 84,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 96,
    "label": "has",
    "to": 10
  }, {
    "from": 96,
    "label": "has",
    "to": 105
  }, {
    "from": 44,
    "label": "calls",
    "to": 114
  }, {
    "from": 46,
    "label": "calls",
    "to": 114
  }, {
    "from": 5,
    "label": "calls",
    "to": 110
  }, {
    "from": 48,
    "label": "calls",
    "to": 110
  }, {
    "from": 16,
    "label": "calls",
    "to": 111
  }, {
    "from": 12,
    "label": "calls",
    "to": 5
  }, {
    "from": 12,
    "label": "calls",
    "to": 5
  }, {
    "from": 16,
    "label": "calls",
    "to": 5
  }, {
    "from": 16,
    "label": "calls",
    "to": 5
  }, {
    "from": 48,
    "label": "calls",
    "to": 5
  }, {
    "from": 48,
    "label": "calls",
    "to": 5
  }, {
    "from": 58,
    "label": "calls",
    "to": 5
  }, {
    "from": 64,
    "label": "calls",
    "to": 5
  }, {
    "from": 69,
    "label": "calls",
    "to": 5
  }, {
    "from": 74,
    "label": "calls",
    "to": 5
  }, {
    "from": 77,
    "label": "calls",
    "to": 5
  }, {
    "from": 80,
    "label": "calls",
    "to": 5
  }, {
    "from": 83,
    "label": "calls",
    "to": 5
  }, {
    "from": 83,
    "label": "calls",
    "to": 5
  }, {
    "from": 44,
    "label": "calls",
    "to": 115
  }, {
    "from": 44,
    "label": "calls",
    "to": 115
  }, {
    "from": 46,
    "label": "calls",
    "to": 115
  }, {
    "from": 5,
    "label": "calls",
    "to": 121
  }, {
    "from": 48,
    "label": "calls",
    "to": 108
  }, {
    "from": 48,
    "label": "calls",
    "to": 108
  }, {
    "from": 16,
    "label": "calls",
    "to": 118
  }, {
    "from": 16,
    "label": "calls",
    "to": 116
  }, {
    "from": 83,
    "label": "calls",
    "to": 116
  }, {
    "from": 106,
    "label": "calls",
    "to": 117
  }, {
    "from": 106,
    "label": "calls",
    "to": 117
  }, {
    "from": 106,
    "label": "calls",
    "to": 117
  }, {
    "from": 44,
    "label": "calls",
    "to": 120
  }, {
    "from": 46,
    "label": "calls",
    "to": 120
  }, {
    "from": 16,
    "label": "calls",
    "to": 109
  }, {
    "from": 44,
    "label": "calls",
    "to": 119
  }, {
    "from": 44,
    "label": "calls",
    "to": 119
  }, {
    "from": 44,
    "label": "calls",
    "to": 119
  }, {
    "from": 46,
    "label": "calls",
    "to": 119
  }, {
    "from": 46,
    "label": "calls",
    "to": 119
  }, {
    "from": 16,
    "label": "calls",
    "to": 113
  }, {
    "from": 44,
    "label": "calls",
    "to": 112
  }, {
    "from": 44,
    "label": "calls",
    "to": 107
  }, {
    "from": 44,
    "label": "calls",
    "to": 107
  }, {
    "from": 46,
    "label": "calls",
    "to": 107
  }, {
    "from": 48,
    "label": "calls",
    "to": 107
  }, {
    "from": 1,
    "label": "contains",
    "to": 106
  }, {
    "from": 106,
    "label": "declares",
    "to": 5
  }, {
    "from": 106,
    "label": "declares",
    "to": 8
  }, {
    "from": 106,
    "label": "declares",
    "to": 12
  }, {
    "from": 106,
    "label": "declares",
    "to": 16
  }, {
    "from": 106,
    "label": "declares",
    "to": 44
  }, {
    "from": 106,
    "label": "declares",
    "to": 46
  }, {
    "from": 106,
    "label": "declares",
    "to": 48
  }, {
    "from": 106,
    "label": "declares",
    "to": 58
  }, {
    "from": 106,
    "label": "declares",
    "to": 64
  }, {
    "from": 106,
    "label": "declares",
    "to": 69
  }, {
    "from": 106,
    "label": "declares",
    "to": 74
  }, {
    "from": 106,
    "label": "declares",
    "to": 77
  }, {
    "from": 106,
    "label": "declares",
    "to": 80
  }, {
    "from": 106,
    "label": "declares",
    "to": 83
  }, {
    "from": 106,
    "label": "declares",
    "to": 96
  }, {
    "from": 1,
    "label": "contains",
    "to": 122
  }, {
    "from": 1,
    "label": "contains",
    "to": 123
  }, {
    "from": 123,
    "label": "initializes",
    "to": 124
  }, {
    "from": 124,
    "label": "requires",
    "to": 4
  }, {
    "from": 123,
    "label": "initializes",
    "to": 125
  }, {
    "from": 125,
    "label": "requires",
    "to": 3
  }, {
    "from": 123,
    "label": "initializes",
    "to": 126
  }, {
    "from": 126,
    "label": "requires",
    "to": 2
  }, {
    "from": 1,
    "label": "provides",
    "to": 127
  }, {
    "from": 127,
    "label": "provides",
    "to": 128
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "Generator",
    "type": "module"
  }, {
    "id": 2,
    "text": "cursor",
    "type": "module"
  }, {
    "id": 3,
    "text": "pack",
    "type": "module"
  }, {
    "id": 4,
    "text": "unpack",
    "type": "module"
  }, {
    "id": 5,
    "text": "local function append(...)\r\n        source[#source+1] = string.rep(\" \", indent)..string.format(...)\r\n    end",
    "type": "function"
  }, {
    "id": 6,
    "text": "source[#source+1] = string.rep(\" \", indent)..string.format(...)",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "local function ref(v)\r\n        data[#data+1] = v\r\n        return #data\r\n    end",
    "type": "function"
  }, {
    "id": 9,
    "text": "data[#data+1] = v",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function Generator:init()\r\n        append('initialize(...)')\r\n        append('')\r\n    end",
    "type": "function"
  }, {
    "id": 13,
    "text": "append('initialize(...)')",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "append('')",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function Generator:finalize()\r\n        append('')\r\n        append('return finalize()')\r\n        \r\n        local s = table.concat(source, \"\\n\")\r\n        local f,err = loadstring(s)\r\n        \r\n        if not f then\r\n            error(err..\"\\n--- internal error in code generator ---\\n--- report this as a bug in vstruct ---\\n\"..s..\"\\n--- internal error in code generator ---\\n\")\r\n        end\r\n        \r\n        local u_env = unpackenv(data)\r\n        local p_env = packenv(data)\r\n        \r\n        local _unpack = unpack\r\n        \r\n        local function unpack(fd, data)\r\n            -- autobox strings\r\n            if type(fd) == \"string\" then\r\n                fd = cursor(fd)\r\n            end\r\n            \r\n            -- fd must have file duck type\r\n            assert(fd.read, \"invalid fd argument to vstruct.unpack: must be a string or file-like object\")\r\n            \r\n            -- data must be true ('return unpacked results')\r\n            -- or false/absent ('create new table')\r\n            -- or a table to fill in\r\n            assert(data == nil or type(data) == \"boolean\" or type(data) == \"table\"\r\n                , \"invalid data argument to vstruct.unpack: if present, must be table or boolean\") \r\n            \r\n            setfenv(f, u_env)\r\n            \r\n            if data == true then\r\n                return _unpack(f(fd, {}))\r\n            else\r\n                return f(fd, data or {})\r\n            end\r\n        end\r\n        \r\n        local function pack(fd, data)\r\n            if fd and not data then\r\n                data,fd = fd,nil\r\n            end\r\n            \r\n            assert(type(data) == \"table\", \"invalid data argument to vstruct.pack: must be a table\")\r\n            \r\n            local realfd\r\n            \r\n            if not fd or type(fd) == \"string\" then\r\n                realfd = cursor(fd or \"\")\r\n            else\r\n                realfd = fd\r\n            end\r\n            \r\n            setfenv(f, p_env)\r\n            local result = f(realfd, data)\r\n            if realfd == fd then\r\n                return result\r\n            else\r\n                return result.str\r\n            end\r\n        end\r\n        \r\n        return { pack=pack, unpack=unpack, source=s }\r\n    end",
    "type": "function"
  }, {
    "id": 17,
    "text": "append('return finalize()')",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "local s = table.concat(source, \"\\n\")",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "local f,err = loadstring(s)",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "if not f then\r\n            error(err..\"\\n--- internal error in code generator ---\\n--- report this as a bug in vstruct ---\\n\"..s..\"\\n--- internal error in code generator ---\\n\")\r\n        end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "error(err..\"\\n--- internal error in code generator ---\\n--- report this as a bug in vstruct ---\\n\"..s..\"\\n--- internal error in code generator ---\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "local u_env = unpackenv(data)",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "local p_env = packenv(data)",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "local _unpack = unpack",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "local function unpack(fd, data)\r\n            -- autobox strings\r\n            if type(fd) == \"string\" then\r\n                fd = cursor(fd)\r\n            end\r\n            \r\n            -- fd must have file duck type\r\n            assert(fd.read, \"invalid fd argument to vstruct.unpack: must be a string or file-like object\")\r\n            \r\n            -- data must be true ('return unpacked results')\r\n            -- or false/absent ('create new table')\r\n            -- or a table to fill in\r\n            assert(data == nil or type(data) == \"boolean\" or type(data) == \"table\"\r\n                , \"invalid data argument to vstruct.unpack: if present, must be table or boolean\") \r\n            \r\n            setfenv(f, u_env)\r\n            \r\n            if data == true then\r\n                return _unpack(f(fd, {}))\r\n            else\r\n                return f(fd, data or {})\r\n            end\r\n        end",
    "type": "statement:localfunction"
  }, {
    "id": 26,
    "text": "if type(fd) == \"string\" then\r\n                fd = cursor(fd)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "fd = cursor(fd)",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "assert(fd.read, \"invalid fd argument to vstruct.unpack: must be a string or file-like object\")",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "assert(data == nil or type(data) == \"boolean\" or type(data) == \"table\"\r\n                , \"invalid data argument to vstruct.unpack: if present, must be table or boolean\")",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "setfenv(f, u_env)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "if data == true then\r\n                return _unpack(f(fd, {}))\r\n            else\r\n                return f(fd, data or {})\r\n            end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "local function pack(fd, data)\r\n            if fd and not data then\r\n                data,fd = fd,nil\r\n            end\r\n            \r\n            assert(type(data) == \"table\", \"invalid data argument to vstruct.pack: must be a table\")\r\n            \r\n            local realfd\r\n            \r\n            if not fd or type(fd) == \"string\" then\r\n                realfd = cursor(fd or \"\")\r\n            else\r\n                realfd = fd\r\n            end\r\n            \r\n            setfenv(f, p_env)\r\n            local result = f(realfd, data)\r\n            if realfd == fd then\r\n                return result\r\n            else\r\n                return result.str\r\n            end\r\n        end",
    "type": "statement:localfunction"
  }, {
    "id": 33,
    "text": "if fd and not data then\r\n                data,fd = fd,nil\r\n            end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "data,fd = fd,nil",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "assert(type(data) == \"table\", \"invalid data argument to vstruct.pack: must be a table\")",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "local realfd",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "if not fd or type(fd) == \"string\" then\r\n                realfd = cursor(fd or \"\")\r\n            else\r\n                realfd = fd\r\n            end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "realfd = cursor(fd or \"\")",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "realfd = fd",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "setfenv(f, p_env)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "local result = f(realfd, data)",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "if realfd == fd then\r\n                return result\r\n            else\r\n                return result.str\r\n            end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "local function unpack(fd, data)\r\n            -- autobox strings\r\n            if type(fd) == \"string\" then\r\n                fd = cursor(fd)\r\n            end\r\n            \r\n            -- fd must have file duck type\r\n            assert(fd.read, \"invalid fd argument to vstruct.unpack: must be a string or file-like object\")\r\n            \r\n            -- data must be true ('return unpacked results')\r\n            -- or false/absent ('create new table')\r\n            -- or a table to fill in\r\n            assert(data == nil or type(data) == \"boolean\" or type(data) == \"table\"\r\n                , \"invalid data argument to vstruct.unpack: if present, must be table or boolean\") \r\n            \r\n            setfenv(f, u_env)\r\n            \r\n            if data == true then\r\n                return _unpack(f(fd, {}))\r\n            else\r\n                return f(fd, data or {})\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "local function pack(fd, data)\r\n            if fd and not data then\r\n                data,fd = fd,nil\r\n            end\r\n            \r\n            assert(type(data) == \"table\", \"invalid data argument to vstruct.pack: must be a table\")\r\n            \r\n            local realfd\r\n            \r\n            if not fd or type(fd) == \"string\" then\r\n                realfd = cursor(fd or \"\")\r\n            else\r\n                realfd = fd\r\n            end\r\n            \r\n            setfenv(f, p_env)\r\n            local result = f(realfd, data)\r\n            if realfd == fd then\r\n                return result\r\n            else\r\n                return result.str\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function Generator:io(name, hasvalue, width, args)\r\n        append('%sio(%q, %s, %s%s%s)'\r\n            , bitpack and \"bp\" or \"\"\r\n            , name\r\n            , tostring(hasvalue)\r\n            , tostring(width)\r\n            , args and \", \" or \"\"\r\n            , args or \"\")\r\n\r\n        if readahead then\r\n            ra_left = ra_left - width * loopmul\r\n            assert(ra_left >= 0\r\n                , string.format(\"code generation consistency failure: readahead=%d, left=%f\"\r\n                    , readahead\r\n                    , ra_left))\r\n            if ra_left == 0 then\r\n                readahead = nil\r\n                ra_left = nil\r\n                append('-- end readahead')\r\n            end\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 49,
    "text": "append('%sio(%q, %s, %s%s%s)'\r\n            , bitpack and \"bp\" or \"\"\r\n            , name\r\n            , tostring(hasvalue)\r\n            , tostring(width)\r\n            , args and \", \" or \"\"\r\n            , args or \"\")",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "if readahead then\r\n            ra_left = ra_left - width * loopmul\r\n            assert(ra_left >= 0\r\n                , string.format(\"code generation consistency failure: readahead=%d, left=%f\"\r\n                    , readahead\r\n                    , ra_left))\r\n            if ra_left == 0 then\r\n                readahead = nil\r\n                ra_left = nil\r\n                append('-- end readahead')\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "ra_left = ra_left - width * loopmul",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "assert(ra_left >= 0\r\n                , string.format(\"code generation consistency failure: readahead=%d, left=%f\"\r\n                    , readahead\r\n                    , ra_left))",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "if ra_left == 0 then\r\n                readahead = nil\r\n                ra_left = nil\r\n                append('-- end readahead')\r\n            end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "readahead = nil",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "ra_left = nil",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "append('-- end readahead')",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function Generator:readahead(n)\r\n        if n and n > 0 and not readahead then\r\n            readahead = n\r\n            ra_left = n * loopmul\r\n            append('readahead(%d)', n)\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 59,
    "text": "if n and n > 0 and not readahead then\r\n            readahead = n\r\n            ra_left = n * loopmul\r\n            append('readahead(%d)', n)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "readahead = n",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "ra_left = n * loopmul",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "append('readahead(%d)', n)",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "function Generator:startloop(n)\r\n        append('for _=1,%d do', n)\r\n        indent = indent + 2\r\n        loopmul = loopmul * n\r\n    end",
    "type": "function"
  }, {
    "id": 65,
    "text": "append('for _=1,%d do', n)",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "indent = indent + 2",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "loopmul = loopmul * n",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function Generator:endloop(n)\r\n        loopmul = loopmul / n\r\n        indent = indent - 2\r\n        append('end')\r\n    end",
    "type": "function"
  }, {
    "id": 70,
    "text": "loopmul = loopmul / n",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "indent = indent - 2",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "append('end')",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function Generator:starttable()\r\n        append('push()')\r\n        indent = indent + 2\r\n    end",
    "type": "function"
  }, {
    "id": 75,
    "text": "append('push()')",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "function Generator:endtable()\r\n        indent = indent - 2\r\n        append('pop()')\r\n    end",
    "type": "function"
  }, {
    "id": 78,
    "text": "append('pop()')",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "function Generator:name(name)\r\n        append('name %q', name)\r\n    end",
    "type": "function"
  }, {
    "id": 81,
    "text": "append('name %q', name)",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 83,
    "text": "function Generator:bitpack(size)\r\n        if size then\r\n            if bitpack then\r\n                error(\"nested bitpacks are not permitted\")\r\n            end\r\n            append('bitpack(%d)', size)\r\n            bitpack = size\r\n            if readahead then\r\n                ra_left = ra_left * 8\r\n            end\r\n        else\r\n            append('bitpack(nil)')\r\n            bitpack = false\r\n            if readahead then\r\n                ra_left = ra_left / 8\r\n            end\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 84,
    "text": "if size then\r\n            if bitpack then\r\n                error(\"nested bitpacks are not permitted\")\r\n            end\r\n            append('bitpack(%d)', size)\r\n            bitpack = size\r\n            if readahead then\r\n                ra_left = ra_left * 8\r\n            end\r\n        else\r\n            append('bitpack(nil)')\r\n            bitpack = false\r\n            if readahead then\r\n                ra_left = ra_left / 8\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 85,
    "text": "if bitpack then\r\n                error(\"nested bitpacks are not permitted\")\r\n            end",
    "type": "statement:if"
  }, {
    "id": 86,
    "text": "error(\"nested bitpacks are not permitted\")",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "append('bitpack(%d)', size)",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "bitpack = size",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "if readahead then\r\n                ra_left = ra_left * 8\r\n            end",
    "type": "statement:if"
  }, {
    "id": 90,
    "text": "ra_left = ra_left * 8",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "append('bitpack(nil)')",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "bitpack = false",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "if readahead then\r\n                ra_left = ra_left / 8\r\n            end",
    "type": "statement:if"
  }, {
    "id": 94,
    "text": "ra_left = ra_left / 8",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "function()\r\n    local Generator = {}\r\n    \r\n    local source = {}\r\n    local data = {}\r\n    local readahead = nil\r\n    local ra_left = nil\r\n    local indent = 0\r\n    local bitpack = false\r\n    local loopmul = 1\r\n    \r\n    local function append(...)\r\n        source[#source+1] = string.rep(\" \", indent)..string.format(...)\r\n    end\r\n    \r\n    local function ref(v)\r\n        data[#data+1] = v\r\n        return #data\r\n    end\r\n    \r\n    function Generator:init()\r\n        append('initialize(...)')\r\n        append('')\r\n    end\r\n    \r\n    function Generator:finalize()\r\n        append('')\r\n        append('return finalize()')\r\n        \r\n        local s = table.concat(source, \"\\n\")\r\n        local f,err = loadstring(s)\r\n        \r\n        if not f then\r\n            error(err..\"\\n--- internal error in code generator ---\\n--- report this as a bug in vstruct ---\\n\"..s..\"\\n--- internal error in code generator ---\\n\")\r\n        end\r\n        \r\n        local u_env = unpackenv(data)\r\n        local p_env = packenv(data)\r\n        \r\n        local _unpack = unpack\r\n        \r\n        local function unpack(fd, data)\r\n            -- autobox strings\r\n            if type(fd) == \"string\" then\r\n                fd = cursor(fd)\r\n            end\r\n            \r\n            -- fd must have file duck type\r\n            assert(fd.read, \"invalid fd argument to vstruct.unpack: must be a string or file-like object\")\r\n            \r\n            -- data must be true ('return unpacked results')\r\n            -- or false/absent ('create new table')\r\n            -- or a table to fill in\r\n            assert(data == nil or type(data) == \"boolean\" or type(data) == \"table\"\r\n                , \"invalid data argument to vstruct.unpack: if present, must be table or boolean\") \r\n            \r\n            setfenv(f, u_env)\r\n            \r\n            if data == true then\r\n                return _unpack(f(fd, {}))\r\n            else\r\n                return f(fd, data or {})\r\n            end\r\n        end\r\n        \r\n        local function pack(fd, data)\r\n            if fd and not data then\r\n                data,fd = fd,nil\r\n            end\r\n            \r\n            assert(type(data) == \"table\", \"invalid data argument to vstruct.pack: must be a table\")\r\n            \r\n            local realfd\r\n            \r\n            if not fd or type(fd) == \"string\" then\r\n                realfd = cursor(fd or \"\")\r\n            else\r\n                realfd = fd\r\n            end\r\n            \r\n            setfenv(f, p_env)\r\n            local result = f(realfd, data)\r\n            if realfd == fd then\r\n                return result\r\n            else\r\n                return result.str\r\n            end\r\n        end\r\n        \r\n        return { pack=pack, unpack=unpack, source=s }\r\n    end\r\n\r\n    function Generator:io(name, hasvalue, width, args)\r\n        append('%sio(%q, %s, %s%s%s)'\r\n            , bitpack and \"bp\" or \"\"\r\n            , name\r\n            , tostring(hasvalue)\r\n            , tostring(width)\r\n            , args and \", \" or \"\"\r\n            , args or \"\")\r\n\r\n        if readahead then\r\n            ra_left = ra_left - width * loopmul\r\n            assert(ra_left >= 0\r\n                , string.format(\"code generation consistency failure: readahead=%d, left=%f\"\r\n                    , readahead\r\n                    , ra_left))\r\n            if ra_left == 0 then\r\n                readahead = nil\r\n                ra_left = nil\r\n                append('-- end readahead')\r\n            end\r\n        end\r\n    end\r\n    \r\n    function Generator:readahead(n)\r\n        if n and n > 0 and not readahead then\r\n            readahead = n\r\n            ra_left = n * loopmul\r\n            append('readahead(%d)', n)\r\n        end\r\n    end\r\n    \r\n    function Generator:startloop(n)\r\n        append('for _=1,%d do', n)\r\n        indent = indent + 2\r\n        loopmul = loopmul * n\r\n    end\r\n    \r\n    function Generator:endloop(n)\r\n        loopmul = loopmul / n\r\n        indent = indent - 2\r\n        append('end')\r\n    end\r\n    \r\n    function Generator:starttable()\r\n        append('push()')\r\n        indent = indent + 2\r\n    end\r\n    \r\n    function Generator:endtable()\r\n        indent = indent - 2\r\n        append('pop()')\r\n    end\r\n    \r\n    function Generator:name(name)\r\n        append('name %q', name)\r\n    end\r\n    \r\n    function Generator:bitpack(size)\r\n        if size then\r\n            if bitpack then\r\n                error(\"nested bitpacks are not permitted\")\r\n            end\r\n            append('bitpack(%d)', size)\r\n            bitpack = size\r\n            if readahead then\r\n                ra_left = ra_left * 8\r\n            end\r\n        else\r\n            append('bitpack(nil)')\r\n            bitpack = false\r\n            if readahead then\r\n                ra_left = ra_left / 8\r\n            end\r\n        end\r\n    end\r\n    \r\n    return Generator\r\nend",
    "type": "function"
  }, {
    "id": 97,
    "text": "local Generator = {}",
    "type": "statement:localassign"
  }, {
    "id": 98,
    "text": "local source = {}",
    "type": "statement:localassign"
  }, {
    "id": 99,
    "text": "local data = {}",
    "type": "statement:localassign"
  }, {
    "id": 100,
    "text": "local readahead = nil",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "local ra_left = nil",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "local indent = 0",
    "type": "statement:localassign"
  }, {
    "id": 103,
    "text": "local bitpack = false",
    "type": "statement:localassign"
  }, {
    "id": 104,
    "text": "local loopmul = 1",
    "type": "statement:localassign"
  }, {
    "id": 105,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 106,
    "text": "",
    "type": "function container"
  }, {
    "id": 107,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 108,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 109,
    "text": "unpackenv",
    "type": "global function"
  }, {
    "id": 110,
    "text": "format",
    "type": "global function"
  }, {
    "id": 111,
    "text": "packenv",
    "type": "global function"
  }, {
    "id": 112,
    "text": "_unpack",
    "type": "global function"
  }, {
    "id": 113,
    "text": "loadstring",
    "type": "global function"
  }, {
    "id": 114,
    "text": "cursor",
    "type": "global function"
  }, {
    "id": 115,
    "text": "f",
    "type": "global function"
  }, {
    "id": 116,
    "text": "error",
    "type": "global function"
  }, {
    "id": 117,
    "text": "require",
    "type": "global function"
  }, {
    "id": 118,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 119,
    "text": "type",
    "type": "global function"
  }, {
    "id": 120,
    "text": "setfenv",
    "type": "global function"
  }, {
    "id": 121,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 122,
    "text": "",
    "type": "variable container"
  }, {
    "id": 123,
    "text": "",
    "type": "require container"
  }, {
    "id": 124,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 125,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 126,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 127,
    "text": "",
    "type": "interface container"
  }, {
    "id": 128,
    "text": "",
    "type": "interface"
  } ]
}