{
  "_filename": "List.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/vstruct/vstruct/ast/List.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 3,
    "label": "has",
    "to": 11
  }, {
    "from": 3,
    "label": "has",
    "to": 12
  }, {
    "from": 3,
    "label": "has",
    "to": 13
  }, {
    "from": 2,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 20,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 20,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 2
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 3,
    "label": "has",
    "to": 11
  }, {
    "from": 3,
    "label": "has",
    "to": 12
  }, {
    "from": 3,
    "label": "has",
    "to": 13
  }, {
    "from": 28,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 28,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 20,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 15,
    "label": "calls",
    "to": 34
  }, {
    "from": 20,
    "label": "calls",
    "to": 34
  }, {
    "from": 1,
    "label": "contains",
    "to": 33
  }, {
    "from": 33,
    "label": "declares",
    "to": 2
  }, {
    "from": 33,
    "label": "declares",
    "to": 15
  }, {
    "from": 33,
    "label": "declares",
    "to": 20
  }, {
    "from": 33,
    "label": "declares",
    "to": 28
  }, {
    "from": 35,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 36
  }, {
    "from": 1,
    "label": "contains",
    "to": 37
  }, {
    "from": 1,
    "label": "provides",
    "to": 38
  }, {
    "from": 38,
    "label": "provides",
    "to": 39
  }, {
    "from": 40,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "List",
    "type": "module"
  }, {
    "id": 2,
    "text": "function List:append(node)\r\n        if node.width then\r\n            if not child then\r\n                child = {\r\n                    tag = \"sublist\";\r\n                    width = 0;\r\n                    show = self.show;\r\n                    unpack = self.unpack;\r\n                    pack = self.pack;\r\n                    gen = self.gen;\r\n                }\r\n                self[#self+1] = child\r\n            end\r\n            \r\n            if self.width then\r\n                self.width = self.width + node.width\r\n            end\r\n            \r\n            child[#child+1] = node\r\n            child.width = child.width + node.width\r\n        else\r\n            child = nil\r\n            self.width = nil\r\n            self[#self+1] = node\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 3,
    "text": "if node.width then\r\n            if not child then\r\n                child = {\r\n                    tag = \"sublist\";\r\n                    width = 0;\r\n                    show = self.show;\r\n                    unpack = self.unpack;\r\n                    pack = self.pack;\r\n                    gen = self.gen;\r\n                }\r\n                self[#self+1] = child\r\n            end\r\n            \r\n            if self.width then\r\n                self.width = self.width + node.width\r\n            end\r\n            \r\n            child[#child+1] = node\r\n            child.width = child.width + node.width\r\n        else\r\n            child = nil\r\n            self.width = nil\r\n            self[#self+1] = node\r\n        end",
    "type": "statement:if"
  }, {
    "id": 4,
    "text": "if not child then\r\n                child = {\r\n                    tag = \"sublist\";\r\n                    width = 0;\r\n                    show = self.show;\r\n                    unpack = self.unpack;\r\n                    pack = self.pack;\r\n                    gen = self.gen;\r\n                }\r\n                self[#self+1] = child\r\n            end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "child = {\r\n                    tag = \"sublist\";\r\n                    width = 0;\r\n                    show = self.show;\r\n                    unpack = self.unpack;\r\n                    pack = self.pack;\r\n                    gen = self.gen;\r\n                }",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "self[#self+1] = child",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "if self.width then\r\n                self.width = self.width + node.width\r\n            end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "self.width = self.width + node.width",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "child[#child+1] = node",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "child.width = child.width + node.width",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "child = nil",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "self.width = nil",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "self[#self+1] = node",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function List:show(data)\r\n        for i,node in ipairs(self) do\r\n            if node.show then\r\n                node:show()\r\n            end\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 16,
    "text": "for i,node in ipairs(self) do\r\n            if node.show then\r\n                node:show()\r\n            end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 17,
    "text": "if node.show then\r\n                node:show()\r\n            end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "node:show()",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function List:gen(generator)\r\n        if self.width then\r\n            generator:readahead(self.width)\r\n        end\r\n        for i,v in ipairs(self) do\r\n            v:gen(generator)\r\n        end\r\n        if self.width then\r\n            generator:readahead(nil)\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 21,
    "text": "if self.width then\r\n            generator:readahead(self.width)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "generator:readahead(self.width)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "for i,v in ipairs(self) do\r\n            v:gen(generator)\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 24,
    "text": "v:gen(generator)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "if self.width then\r\n            generator:readahead(nil)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "generator:readahead(nil)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function()\r\n    local List = {\r\n        tag = \"list\";\r\n        width = 0;\r\n    }\r\n    local child\r\n    \r\n    function List:append(node)\r\n        if node.width then\r\n            if not child then\r\n                child = {\r\n                    tag = \"sublist\";\r\n                    width = 0;\r\n                    show = self.show;\r\n                    unpack = self.unpack;\r\n                    pack = self.pack;\r\n                    gen = self.gen;\r\n                }\r\n                self[#self+1] = child\r\n            end\r\n            \r\n            if self.width then\r\n                self.width = self.width + node.width\r\n            end\r\n            \r\n            child[#child+1] = node\r\n            child.width = child.width + node.width\r\n        else\r\n            child = nil\r\n            self.width = nil\r\n            self[#self+1] = node\r\n        end\r\n    end\r\n    \r\n    function List:show(data)\r\n        for i,node in ipairs(self) do\r\n            if node.show then\r\n                node:show()\r\n            end\r\n        end\r\n    end\r\n    \r\n    function List:gen(generator)\r\n        if self.width then\r\n            generator:readahead(self.width)\r\n        end\r\n        for i,v in ipairs(self) do\r\n            v:gen(generator)\r\n        end\r\n        if self.width then\r\n            generator:readahead(nil)\r\n        end\r\n    end\r\n    \r\n    return List\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "local List = {\r\n        tag = \"list\";\r\n        width = 0;\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "local child",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "",
    "type": "function container"
  }, {
    "id": 34,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 35,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 36,
    "text": "",
    "type": "variable container"
  }, {
    "id": 37,
    "text": "",
    "type": "require container"
  }, {
    "id": 38,
    "text": "",
    "type": "interface container"
  }, {
    "id": 39,
    "text": "",
    "type": "interface"
  }, {
    "id": 40,
    "text": "",
    "type": "require local variable"
  } ]
}