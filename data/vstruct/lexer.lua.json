{
  "_filename": "lexer.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/vstruct/vstruct/lexer.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 3
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 3
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 8,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 3
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 14,
    "label": "has",
    "to": 3
  }, {
    "from": 13,
    "label": "has",
    "to": 21
  }, {
    "from": 13,
    "label": "has",
    "to": 3
  }, {
    "from": 13,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 15
  }, {
    "from": 23,
    "label": "has",
    "to": 3
  }, {
    "from": 23,
    "label": "has",
    "to": 16
  }, {
    "from": 23,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 23,
    "label": "has",
    "to": 3
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 3
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 3
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 27,
    "label": "has",
    "to": 19
  }, {
    "from": 27,
    "label": "has",
    "to": 31
  }, {
    "from": 27,
    "label": "has",
    "to": 3
  }, {
    "from": 27,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 28
  }, {
    "from": 33,
    "label": "has",
    "to": 29
  }, {
    "from": 33,
    "label": "has",
    "to": 3
  }, {
    "from": 33,
    "label": "has",
    "to": 30
  }, {
    "from": 33,
    "label": "has",
    "to": 3
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 4
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 3
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 38,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 3
  }, {
    "from": 38,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 3
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 38,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 3
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 14,
    "label": "has",
    "to": 3
  }, {
    "from": 13,
    "label": "has",
    "to": 21
  }, {
    "from": 13,
    "label": "has",
    "to": 3
  }, {
    "from": 38,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 3
  }, {
    "from": 38,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 3
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 27,
    "label": "has",
    "to": 19
  }, {
    "from": 27,
    "label": "has",
    "to": 31
  }, {
    "from": 27,
    "label": "has",
    "to": 3
  }, {
    "from": 38,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 28
  }, {
    "from": 33,
    "label": "has",
    "to": 29
  }, {
    "from": 33,
    "label": "has",
    "to": 3
  }, {
    "from": 33,
    "label": "has",
    "to": 30
  }, {
    "from": 33,
    "label": "has",
    "to": 3
  }, {
    "from": 38,
    "label": "has",
    "to": 3
  }, {
    "from": 38,
    "label": "has",
    "to": 3
  }, {
    "from": 38,
    "label": "has",
    "to": 42
  }, {
    "from": 8,
    "label": "calls",
    "to": 45
  }, {
    "from": 27,
    "label": "calls",
    "to": 13
  }, {
    "from": 33,
    "label": "calls",
    "to": 13
  }, {
    "from": 43,
    "label": "calls",
    "to": 2
  }, {
    "from": 43,
    "label": "calls",
    "to": 2
  }, {
    "from": 43,
    "label": "calls",
    "to": 2
  }, {
    "from": 43,
    "label": "calls",
    "to": 2
  }, {
    "from": 43,
    "label": "calls",
    "to": 2
  }, {
    "from": 43,
    "label": "calls",
    "to": 2
  }, {
    "from": 43,
    "label": "calls",
    "to": 2
  }, {
    "from": 43,
    "label": "calls",
    "to": 2
  }, {
    "from": 43,
    "label": "calls",
    "to": 2
  }, {
    "from": 43,
    "label": "calls",
    "to": 2
  }, {
    "from": 43,
    "label": "calls",
    "to": 2
  }, {
    "from": 43,
    "label": "calls",
    "to": 2
  }, {
    "from": 43,
    "label": "calls",
    "to": 2
  }, {
    "from": 43,
    "label": "calls",
    "to": 2
  }, {
    "from": 8,
    "label": "calls",
    "to": 44
  }, {
    "from": 8,
    "label": "calls",
    "to": 46
  }, {
    "from": 13,
    "label": "calls",
    "to": 23
  }, {
    "from": 13,
    "label": "calls",
    "to": 23
  }, {
    "from": 8,
    "label": "calls",
    "to": 6
  }, {
    "from": 13,
    "label": "calls",
    "to": 8
  }, {
    "from": 27,
    "label": "calls",
    "to": 8
  }, {
    "from": 33,
    "label": "calls",
    "to": 8
  }, {
    "from": 1,
    "label": "contains",
    "to": 43
  }, {
    "from": 43,
    "label": "declares",
    "to": 2
  }, {
    "from": 43,
    "label": "declares",
    "to": 6
  }, {
    "from": 43,
    "label": "declares",
    "to": 8
  }, {
    "from": 43,
    "label": "declares",
    "to": 13
  }, {
    "from": 43,
    "label": "declares",
    "to": 23
  }, {
    "from": 43,
    "label": "declares",
    "to": 25
  }, {
    "from": 43,
    "label": "declares",
    "to": 27
  }, {
    "from": 43,
    "label": "declares",
    "to": 33
  }, {
    "from": 43,
    "label": "declares",
    "to": 35
  }, {
    "from": 43,
    "label": "declares",
    "to": 37
  }, {
    "from": 43,
    "label": "declares",
    "to": 38
  }, {
    "from": 47,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 48
  }, {
    "from": 1,
    "label": "contains",
    "to": 49
  }, {
    "from": 48,
    "label": "initializes",
    "to": 50
  }, {
    "from": 50,
    "label": "assigns",
    "to": 51
  }, {
    "from": 1,
    "label": "provides",
    "to": 52
  }, {
    "from": 52,
    "label": "provides",
    "to": 53
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "lexer",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function lexeme(name)\r\n\treturn function(pattern)\r\n\t\tlexis[#lexis+1] = { name=name, pattern=\"^\"..pattern }\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "lexis[#lexis+1] = { name=name, pattern=\"^\"..pattern }",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "local function where()\r\n        return (\"character %d ('%s').\"):format(index, source:sub(1,4))\r\n    end",
    "type": "function"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "local function find_match()\r\n        for _,lexeme in ipairs(lexis) do\r\n            if source:match(lexeme.pattern) then\r\n                return lexeme,select(2, source:find(lexeme.pattern))\r\n            end\r\n        end\r\n        error ((\"Lexical error in format string at %s.\"):format(where()))\r\n    end",
    "type": "function"
  }, {
    "id": 9,
    "text": "for _,lexeme in ipairs(lexis) do\r\n            if source:match(lexeme.pattern) then\r\n                return lexeme,select(2, source:find(lexeme.pattern))\r\n            end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 10,
    "text": "if source:match(lexeme.pattern) then\r\n                return lexeme,select(2, source:find(lexeme.pattern))\r\n            end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "error ((\"Lexical error in format string at %s.\"):format(where()))",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "local function eat_whitespace()\r\n        local function aux()\r\n            if #source == 0 then return end\r\n            local match,size = find_match()\r\n            \r\n            if not match.name then\r\n                hadwhitespace = true\r\n                source = source:sub(size+1, -1)\r\n                index = index + size\r\n                return aux()\r\n            end\r\n        end\r\n        hadwhitespace = false\r\n        return aux()\r\n    end",
    "type": "function"
  }, {
    "id": 14,
    "text": "local function aux()\r\n            if #source == 0 then return end\r\n            local match,size = find_match()\r\n            \r\n            if not match.name then\r\n                hadwhitespace = true\r\n                source = source:sub(size+1, -1)\r\n                index = index + size\r\n                return aux()\r\n            end\r\n        end",
    "type": "statement:localfunction"
  }, {
    "id": 15,
    "text": "if #source == 0 then return end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "local match,size = find_match()",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "if not match.name then\r\n                hadwhitespace = true\r\n                source = source:sub(size+1, -1)\r\n                index = index + size\r\n                return aux()\r\n            end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "hadwhitespace = true",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "source = source:sub(size+1, -1)",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "index = index + size",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "hadwhitespace = false",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "local function aux()\r\n            if #source == 0 then return end\r\n            local match,size = find_match()\r\n            \r\n            if not match.name then\r\n                hadwhitespace = true\r\n                source = source:sub(size+1, -1)\r\n                index = index + size\r\n                return aux()\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "local function whitespace()\r\n        return hadwhitespace\r\n    end",
    "type": "function"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "local function next()\r\n       eat_whitespace()\r\n\r\n       if #source == 0 then return nil end\r\n\r\n       local lexeme,size,text = find_match()\r\n\r\n       source = source:sub(size+1, -1)\r\n       index = index+size\r\n\r\n       return { text = text, type = lexeme.name }\r\n   end",
    "type": "function"
  }, {
    "id": 28,
    "text": "eat_whitespace()",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "if #source == 0 then return nil end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "local lexeme,size,text = find_match()",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "index = index+size",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "local function peek()\r\n       eat_whitespace()\r\n\r\n       if #source == 0 then return nil end\r\n\r\n       local lexeme,size,text = find_match()\r\n\r\n       return { text = text, type = lexeme.name }\r\n   end",
    "type": "function"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function(pattern)\r\n\t\tlexis[#lexis+1] = { name=name, pattern=\"^\"..pattern }\r\n\tend",
    "type": "function"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function() return next end",
    "type": "function"
  }, {
    "id": 38,
    "text": "function(source)\r\n    local orig = source\r\n    local index = 1\r\n    local hadwhitespace = false\r\n           \r\n    local function where()\r\n        return (\"character %d ('%s').\"):format(index, source:sub(1,4))\r\n    end\r\n\r\n    local function find_match()\r\n        for _,lexeme in ipairs(lexis) do\r\n            if source:match(lexeme.pattern) then\r\n                return lexeme,select(2, source:find(lexeme.pattern))\r\n            end\r\n        end\r\n        error ((\"Lexical error in format string at %s.\"):format(where()))\r\n    end\r\n\r\n    local function eat_whitespace()\r\n        local function aux()\r\n            if #source == 0 then return end\r\n            local match,size = find_match()\r\n            \r\n            if not match.name then\r\n                hadwhitespace = true\r\n                source = source:sub(size+1, -1)\r\n                index = index + size\r\n                return aux()\r\n            end\r\n        end\r\n        hadwhitespace = false\r\n        return aux()\r\n    end\r\n\r\n    local function whitespace()\r\n        return hadwhitespace\r\n    end\r\n    \r\n   local function next()\r\n       eat_whitespace()\r\n\r\n       if #source == 0 then return nil end\r\n\r\n       local lexeme,size,text = find_match()\r\n\r\n       source = source:sub(size+1, -1)\r\n       index = index+size\r\n\r\n       return { text = text, type = lexeme.name }\r\n   end\r\n\r\n   local function peek()\r\n       eat_whitespace()\r\n\r\n       if #source == 0 then return nil end\r\n\r\n       local lexeme,size,text = find_match()\r\n\r\n       return { text = text, type = lexeme.name }\r\n   end\r\n\r\n   return {\r\n       next = next;\r\n       peek = peek;\r\n       where = where;\r\n       whitespace = whitespace;\r\n       tokens = function() return next end;\r\n   }\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "local orig = source",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "local index = 1",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "local hadwhitespace = false",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "",
    "type": "function container"
  }, {
    "id": 44,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 45,
    "text": "error",
    "type": "global function"
  }, {
    "id": 46,
    "text": "select",
    "type": "global function"
  }, {
    "id": 47,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 48,
    "text": "",
    "type": "variable container"
  }, {
    "id": 49,
    "text": "",
    "type": "require container"
  }, {
    "id": 50,
    "text": "",
    "type": "local variable"
  }, {
    "id": 51,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 52,
    "text": "",
    "type": "interface container"
  }, {
    "id": 53,
    "text": "",
    "type": "interface"
  } ]
}