{
  "_filename": "unpack.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/vstruct/vstruct/unpack.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 4,
    "label": "has",
    "to": 11
  }, {
    "from": 4,
    "label": "has",
    "to": 12
  }, {
    "from": 3,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 17,
    "label": "has",
    "to": 12
  }, {
    "from": 17,
    "label": "has",
    "to": 22
  }, {
    "from": 17,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 24,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 33,
    "label": "has",
    "to": 37
  }, {
    "from": 33,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 43,
    "label": "has",
    "to": 48
  }, {
    "from": 43,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 43,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 53,
    "label": "has",
    "to": 56
  }, {
    "from": 53,
    "label": "has",
    "to": 57
  }, {
    "from": 53,
    "label": "has",
    "to": 58
  }, {
    "from": 53,
    "label": "has",
    "to": 59
  }, {
    "from": 53,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 60,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 60,
    "label": "has",
    "to": 15
  }, {
    "from": 53,
    "label": "has",
    "to": 65
  }, {
    "from": 53,
    "label": "has",
    "to": 66
  }, {
    "from": 52,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 61
  }, {
    "from": 68,
    "label": "has",
    "to": 62
  }, {
    "from": 68,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 68,
    "label": "has",
    "to": 15
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 15
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 76,
    "label": "has",
    "to": 79
  }, {
    "from": 76,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 4,
    "label": "has",
    "to": 11
  }, {
    "from": 4,
    "label": "has",
    "to": 12
  }, {
    "from": 76,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 76,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 17,
    "label": "has",
    "to": 12
  }, {
    "from": 17,
    "label": "has",
    "to": 22
  }, {
    "from": 76,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 76,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 76,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 33,
    "label": "has",
    "to": 37
  }, {
    "from": 76,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 76,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 43,
    "label": "has",
    "to": 48
  }, {
    "from": 43,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 76,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 53,
    "label": "has",
    "to": 56
  }, {
    "from": 53,
    "label": "has",
    "to": 57
  }, {
    "from": 53,
    "label": "has",
    "to": 58
  }, {
    "from": 53,
    "label": "has",
    "to": 59
  }, {
    "from": 53,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 60,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 60,
    "label": "has",
    "to": 15
  }, {
    "from": 53,
    "label": "has",
    "to": 65
  }, {
    "from": 53,
    "label": "has",
    "to": 66
  }, {
    "from": 76,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 76,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 15
  }, {
    "from": 76,
    "label": "has",
    "to": 15
  }, {
    "from": 76,
    "label": "has",
    "to": 80
  }, {
    "from": 17,
    "label": "calls",
    "to": 83
  }, {
    "from": 43,
    "label": "calls",
    "to": 83
  }, {
    "from": 52,
    "label": "calls",
    "to": 83
  }, {
    "from": 70,
    "label": "calls",
    "to": 83
  }, {
    "from": 52,
    "label": "calls",
    "to": 86
  }, {
    "from": 24,
    "label": "calls",
    "to": 82
  }, {
    "from": 52,
    "label": "calls",
    "to": 82
  }, {
    "from": 73,
    "label": "calls",
    "to": 82
  }, {
    "from": 14,
    "label": "calls",
    "to": 87
  }, {
    "from": 81,
    "label": "calls",
    "to": 85
  }, {
    "from": 52,
    "label": "calls",
    "to": 84
  }, {
    "from": 33,
    "label": "calls",
    "to": 3
  }, {
    "from": 43,
    "label": "calls",
    "to": 3
  }, {
    "from": 70,
    "label": "calls",
    "to": 3
  }, {
    "from": 2,
    "label": "contains",
    "to": 81
  }, {
    "from": 81,
    "label": "declares",
    "to": 3
  }, {
    "from": 81,
    "label": "declares",
    "to": 14
  }, {
    "from": 81,
    "label": "declares",
    "to": 17
  }, {
    "from": 81,
    "label": "declares",
    "to": 24
  }, {
    "from": 81,
    "label": "declares",
    "to": 30
  }, {
    "from": 81,
    "label": "declares",
    "to": 33
  }, {
    "from": 81,
    "label": "declares",
    "to": 39
  }, {
    "from": 81,
    "label": "declares",
    "to": 43
  }, {
    "from": 81,
    "label": "declares",
    "to": 52
  }, {
    "from": 81,
    "label": "declares",
    "to": 68
  }, {
    "from": 81,
    "label": "declares",
    "to": 70
  }, {
    "from": 81,
    "label": "declares",
    "to": 73
  }, {
    "from": 81,
    "label": "declares",
    "to": 76
  }, {
    "from": 88,
    "label": "requires",
    "to": 2
  }, {
    "from": 2,
    "label": "contains",
    "to": 89
  }, {
    "from": 2,
    "label": "contains",
    "to": 90
  }, {
    "from": 90,
    "label": "initializes",
    "to": 91
  }, {
    "from": 91,
    "label": "requires",
    "to": 1
  }, {
    "from": 2,
    "label": "provides",
    "to": 92
  }, {
    "from": 92,
    "label": "provides",
    "to": 93
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "io",
    "type": "module"
  }, {
    "id": 2,
    "text": "unpack",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function store(value)\r\n        if not key then\r\n            data[#data+1] = value\r\n        else\r\n            local data = data\r\n            for name in key:gmatch(\"([^%.]+)%.\") do\r\n                if data[name] == nil then\r\n                    data[name] = {}\r\n                end\r\n                data = data[name]\r\n            end\r\n            data[key:match(\"[^%.]+$\")] = value\r\n            key = nil\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 4,
    "text": "if not key then\r\n            data[#data+1] = value\r\n        else\r\n            local data = data\r\n            for name in key:gmatch(\"([^%.]+)%.\") do\r\n                if data[name] == nil then\r\n                    data[name] = {}\r\n                end\r\n                data = data[name]\r\n            end\r\n            data[key:match(\"[^%.]+$\")] = value\r\n            key = nil\r\n        end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "data[#data+1] = value",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "local data = data",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "for name in key:gmatch(\"([^%.]+)%.\") do\r\n                if data[name] == nil then\r\n                    data[name] = {}\r\n                end\r\n                data = data[name]\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 8,
    "text": "if data[name] == nil then\r\n                    data[name] = {}\r\n                end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "data[name] = {}",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "data = data[name]",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "data[key:match(\"[^%.]+$\")] = value",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "key = nil",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function env.ref(id)\r\n        return unpack(refs[id])\r\n    end",
    "type": "function"
  }, {
    "id": 15,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function env.initialize(_fd, _data)\r\n        fd = _fd\r\n        \r\n        buffer,bufsize,bufpos = nil,0,0\r\n        \r\n        data = _data\r\n        stack = {}\r\n        \r\n        key = nil\r\n\r\n        io(\"endianness\", \"host\")\r\n    end",
    "type": "function"
  }, {
    "id": 18,
    "text": "fd = _fd",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "buffer,bufsize,bufpos = nil,0,0",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "data = _data",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "stack = {}",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "io(\"endianness\", \"host\")",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function env.readahead(n)\r\n        assert(bufpos == bufsize, \"internal consistency failure: overlapping readahead\")\r\n        \r\n        buffer = fd:read(n)\r\n        bufsize = n\r\n        bufpos = 0\r\n    end",
    "type": "function"
  }, {
    "id": 25,
    "text": "assert(bufpos == bufsize, \"internal consistency failure: overlapping readahead\")",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "buffer = fd:read(n)",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "bufsize = n",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "bufpos = 0",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function env.name(name)\r\n        key = name\r\n    end",
    "type": "function"
  }, {
    "id": 31,
    "text": "key = name",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function env.push()\r\n        local t = {}\r\n        store(t)\r\n        stack[#stack+1] = data\r\n        data = t\r\n    end",
    "type": "function"
  }, {
    "id": 34,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "store(t)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "stack[#stack+1] = data",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "data = t",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function env.pop()\r\n        data = stack[#stack]\r\n        stack[#stack] = nil\r\n    end",
    "type": "function"
  }, {
    "id": 40,
    "text": "data = stack[#stack]",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "stack[#stack] = nil",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function env.io(name, hasvalue, width, ...)\r\n        local buf\r\n        if bufpos < bufsize and width then\r\n            buf = buffer:sub(bufpos+1, bufpos+width)\r\n            bufpos = bufpos + width\r\n        end\r\n        \r\n        local v = io(name, \"unpack\", fd, buf, ...)\r\n        if v ~= nil then\r\n            store(v)\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 44,
    "text": "local buf",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "if bufpos < bufsize and width then\r\n            buf = buffer:sub(bufpos+1, bufpos+width)\r\n            bufpos = bufpos + width\r\n        end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "buf = buffer:sub(bufpos+1, bufpos+width)",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "bufpos = bufpos + width",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "local v = io(name, \"unpack\", fd, buf, ...)",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "if v ~= nil then\r\n            store(v)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "store(v)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function env.bitpack(width)\r\n        if width then\r\n            assert(bufpos + width <= bufsize, \"not enough bytes in buffer to expand bitpack\")\r\n            bitpack = { string.byte(buffer, bufpos+1, bufpos+width) }\r\n\r\n            local e = io(\"endianness\", \"get\")\r\n            \r\n            local bbit = 7\r\n            local bbyte = e == \"big\" and 1 or #bitpack\r\n            local bdelta = e == \"big\" and 1 or -1\r\n            \r\n            function nextbit()    \r\n                local v = math.floor(bitpack[bbyte]/(2^bbit)) % 2\r\n                \r\n                bbit = (bbit - 1) % 8\r\n                \r\n                if bbit == 7 then -- we just wrapped around\r\n                    bbyte = bbyte + bdelta\r\n                end\r\n\r\n                return v\r\n            end\r\n        else\r\n            bufpos = bufpos + #bitpack\r\n            bitpack = nil\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 53,
    "text": "if width then\r\n            assert(bufpos + width <= bufsize, \"not enough bytes in buffer to expand bitpack\")\r\n            bitpack = { string.byte(buffer, bufpos+1, bufpos+width) }\r\n\r\n            local e = io(\"endianness\", \"get\")\r\n            \r\n            local bbit = 7\r\n            local bbyte = e == \"big\" and 1 or #bitpack\r\n            local bdelta = e == \"big\" and 1 or -1\r\n            \r\n            function nextbit()    \r\n                local v = math.floor(bitpack[bbyte]/(2^bbit)) % 2\r\n                \r\n                bbit = (bbit - 1) % 8\r\n                \r\n                if bbit == 7 then -- we just wrapped around\r\n                    bbyte = bbyte + bdelta\r\n                end\r\n\r\n                return v\r\n            end\r\n        else\r\n            bufpos = bufpos + #bitpack\r\n            bitpack = nil\r\n        end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "assert(bufpos + width <= bufsize, \"not enough bytes in buffer to expand bitpack\")",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "bitpack = { string.byte(buffer, bufpos+1, bufpos+width) }",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "local e = io(\"endianness\", \"get\")",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "local bbit = 7",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "local bbyte = e == \"big\" and 1 or #bitpack",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "local bdelta = e == \"big\" and 1 or -1",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "function nextbit()    \r\n                local v = math.floor(bitpack[bbyte]/(2^bbit)) % 2\r\n                \r\n                bbit = (bbit - 1) % 8\r\n                \r\n                if bbit == 7 then -- we just wrapped around\r\n                    bbyte = bbyte + bdelta\r\n                end\r\n\r\n                return v\r\n            end",
    "type": "statement:globalfunction"
  }, {
    "id": 61,
    "text": "local v = math.floor(bitpack[bbyte]/(2^bbit)) % 2",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "bbit = (bbit - 1) % 8",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "if bbit == 7 then -- we just wrapped around\r\n                    bbyte = bbyte + bdelta\r\n                end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "bbyte = bbyte + bdelta",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "bufpos = bufpos + #bitpack",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "bitpack = nil",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "function nextbit()    \r\n                local v = math.floor(bitpack[bbyte]/(2^bbit)) % 2\r\n                \r\n                bbit = (bbit - 1) % 8\r\n                \r\n                if bbit == 7 then -- we just wrapped around\r\n                    bbyte = bbyte + bdelta\r\n                end\r\n\r\n                return v\r\n            end",
    "type": "function"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function env.bpio(name, hasvalue, width, ...)\r\n        local v = io(name, \"unpackbits\", nextbit, ...)\r\n        if v ~= nil then\r\n            store(v)\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 71,
    "text": "local v = io(name, \"unpackbits\", nextbit, ...)",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "function env.finalize()\r\n        assert(#stack == 0, \"mismatched push/pop in execution\")\r\n        return data\r\n    end",
    "type": "function"
  }, {
    "id": 74,
    "text": "assert(#stack == 0, \"mismatched push/pop in execution\")",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "function(refs)\r\n    local env = {}\r\n    \r\n    local fd,buffer,bufsize,bufpos,data,stack,key\r\n    local bitpack,nextbit\r\n    \r\n    local function store(value)\r\n        if not key then\r\n            data[#data+1] = value\r\n        else\r\n            local data = data\r\n            for name in key:gmatch(\"([^%.]+)%.\") do\r\n                if data[name] == nil then\r\n                    data[name] = {}\r\n                end\r\n                data = data[name]\r\n            end\r\n            data[key:match(\"[^%.]+$\")] = value\r\n            key = nil\r\n        end\r\n    end\r\n    \r\n    function env.ref(id)\r\n        return unpack(refs[id])\r\n    end\r\n    \r\n    function env.initialize(_fd, _data)\r\n        fd = _fd\r\n        \r\n        buffer,bufsize,bufpos = nil,0,0\r\n        \r\n        data = _data\r\n        stack = {}\r\n        \r\n        key = nil\r\n\r\n        io(\"endianness\", \"host\")\r\n    end\r\n    \r\n    function env.readahead(n)\r\n        assert(bufpos == bufsize, \"internal consistency failure: overlapping readahead\")\r\n        \r\n        buffer = fd:read(n)\r\n        bufsize = n\r\n        bufpos = 0\r\n    end\r\n    \r\n    function env.name(name)\r\n        key = name\r\n    end\r\n    \r\n    function env.push()\r\n        local t = {}\r\n        store(t)\r\n        stack[#stack+1] = data\r\n        data = t\r\n    end\r\n    \r\n    function env.pop()\r\n        data = stack[#stack]\r\n        stack[#stack] = nil\r\n    end\r\n    \r\n    function env.io(name, hasvalue, width, ...)\r\n        local buf\r\n        if bufpos < bufsize and width then\r\n            buf = buffer:sub(bufpos+1, bufpos+width)\r\n            bufpos = bufpos + width\r\n        end\r\n        \r\n        local v = io(name, \"unpack\", fd, buf, ...)\r\n        if v ~= nil then\r\n            store(v)\r\n        end\r\n    end\r\n    \r\n    function env.bitpack(width)\r\n        if width then\r\n            assert(bufpos + width <= bufsize, \"not enough bytes in buffer to expand bitpack\")\r\n            bitpack = { string.byte(buffer, bufpos+1, bufpos+width) }\r\n\r\n            local e = io(\"endianness\", \"get\")\r\n            \r\n            local bbit = 7\r\n            local bbyte = e == \"big\" and 1 or #bitpack\r\n            local bdelta = e == \"big\" and 1 or -1\r\n            \r\n            function nextbit()    \r\n                local v = math.floor(bitpack[bbyte]/(2^bbit)) % 2\r\n                \r\n                bbit = (bbit - 1) % 8\r\n                \r\n                if bbit == 7 then -- we just wrapped around\r\n                    bbyte = bbyte + bdelta\r\n                end\r\n\r\n                return v\r\n            end\r\n        else\r\n            bufpos = bufpos + #bitpack\r\n            bitpack = nil\r\n        end\r\n    end\r\n    \r\n    function env.bpio(name, hasvalue, width, ...)\r\n        local v = io(name, \"unpackbits\", nextbit, ...)\r\n        if v ~= nil then\r\n            store(v)\r\n        end\r\n    end\r\n    \r\n    function env.finalize()\r\n        assert(#stack == 0, \"mismatched push/pop in execution\")\r\n        return data\r\n    end\r\n    \r\n    return env\r\nend",
    "type": "function"
  }, {
    "id": 77,
    "text": "local env = {}",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "local fd,buffer,bufsize,bufpos,data,stack,key",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "local bitpack,nextbit",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "",
    "type": "function container"
  }, {
    "id": 82,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 83,
    "text": "io",
    "type": "global function"
  }, {
    "id": 84,
    "text": "floor",
    "type": "global function"
  }, {
    "id": 85,
    "text": "require",
    "type": "global function"
  }, {
    "id": 86,
    "text": "byte",
    "type": "global function"
  }, {
    "id": 87,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 88,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 89,
    "text": "",
    "type": "variable container"
  }, {
    "id": 90,
    "text": "",
    "type": "require container"
  }, {
    "id": 91,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 92,
    "text": "",
    "type": "interface container"
  }, {
    "id": 93,
    "text": "",
    "type": "interface"
  } ]
}