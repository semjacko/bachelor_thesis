{
  "_filename": "struct-test-gen.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/vstruct/vstruct/test/struct-test-gen.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 5,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 12
  }, {
    "from": 5,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 4
  }, {
    "from": 17,
    "label": "has",
    "to": 4
  }, {
    "from": 18,
    "label": "has",
    "to": 4
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 19,
    "label": "has",
    "to": 25
  }, {
    "from": 19,
    "label": "has",
    "to": 4
  }, {
    "from": 19,
    "label": "has",
    "to": 26
  }, {
    "from": 19,
    "label": "has",
    "to": 27
  }, {
    "from": 19,
    "label": "has",
    "to": 28
  }, {
    "from": 19,
    "label": "has",
    "to": 4
  }, {
    "from": 19,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 30,
    "label": "has",
    "to": 35
  }, {
    "from": 30,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 36,
    "label": "has",
    "to": 40
  }, {
    "from": 30,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 43,
    "label": "has",
    "to": 46
  }, {
    "from": 43,
    "label": "has",
    "to": 47
  }, {
    "from": 42,
    "label": "has",
    "to": 48
  }, {
    "from": 42,
    "label": "has",
    "to": 39
  }, {
    "from": 30,
    "label": "has",
    "to": 49
  }, {
    "from": 30,
    "label": "has",
    "to": 4
  }, {
    "from": 30,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 34
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 4
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 4
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 56,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 59,
    "label": "has",
    "to": 62
  }, {
    "from": 59,
    "label": "has",
    "to": 63
  }, {
    "from": 59,
    "label": "has",
    "to": 4
  }, {
    "from": 56,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 64,
    "label": "has",
    "to": 67
  }, {
    "from": 64,
    "label": "has",
    "to": 68
  }, {
    "from": 64,
    "label": "has",
    "to": 69
  }, {
    "from": 64,
    "label": "has",
    "to": 70
  }, {
    "from": 64,
    "label": "has",
    "to": 70
  }, {
    "from": 64,
    "label": "has",
    "to": 70
  }, {
    "from": 56,
    "label": "has",
    "to": 71
  }, {
    "from": 56,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 72,
    "label": "has",
    "to": 75
  }, {
    "from": 72,
    "label": "has",
    "to": 4
  }, {
    "from": 56,
    "label": "has",
    "to": 4
  }, {
    "from": 56,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 60
  }, {
    "from": 77,
    "label": "has",
    "to": 61
  }, {
    "from": 77,
    "label": "has",
    "to": 62
  }, {
    "from": 77,
    "label": "has",
    "to": 63
  }, {
    "from": 77,
    "label": "has",
    "to": 4
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 79,
    "label": "has",
    "to": 73
  }, {
    "from": 79,
    "label": "has",
    "to": 74
  }, {
    "from": 79,
    "label": "has",
    "to": 75
  }, {
    "from": 79,
    "label": "has",
    "to": 4
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 4
  }, {
    "from": 81,
    "label": "has",
    "to": 4
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 83,
    "label": "has",
    "to": 4
  }, {
    "from": 83,
    "label": "has",
    "to": 4
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 4
  }, {
    "from": 85,
    "label": "has",
    "to": 4
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 4
  }, {
    "from": 87,
    "label": "has",
    "to": 4
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 90,
    "label": "has",
    "to": 93
  }, {
    "from": 90,
    "label": "has",
    "to": 94
  }, {
    "from": 90,
    "label": "has",
    "to": 4
  }, {
    "from": 90,
    "label": "has",
    "to": 95
  }, {
    "from": 90,
    "label": "has",
    "to": 4
  }, {
    "from": 90,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 99,
    "label": "has",
    "to": 102
  }, {
    "from": 97,
    "label": "has",
    "to": 4
  }, {
    "from": 97,
    "label": "has",
    "to": 103
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 104,
    "label": "has",
    "to": 4
  }, {
    "from": 104,
    "label": "has",
    "to": 108
  }, {
    "from": 109,
    "label": "has",
    "to": 4
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 4
  }, {
    "from": 111,
    "label": "has",
    "to": 4
  }, {
    "from": 111,
    "label": "has",
    "to": 4
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 114,
    "label": "has",
    "to": 116
  }, {
    "from": 114,
    "label": "has",
    "to": 117
  }, {
    "from": 114,
    "label": "has",
    "to": 118
  }, {
    "from": 114,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 114,
    "label": "has",
    "to": 121
  }, {
    "from": 114,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 4
  }, {
    "from": 114,
    "label": "has",
    "to": 124
  }, {
    "from": 114,
    "label": "has",
    "to": 125
  }, {
    "from": 114,
    "label": "has",
    "to": 126
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 126,
    "label": "has",
    "to": 128
  }, {
    "from": 114,
    "label": "has",
    "to": 129
  }, {
    "from": 114,
    "label": "has",
    "to": 130
  }, {
    "from": 114,
    "label": "has",
    "to": 131
  }, {
    "from": 132,
    "label": "has",
    "to": 4
  }, {
    "from": 133,
    "label": "has",
    "to": 115
  }, {
    "from": 133,
    "label": "has",
    "to": 116
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 133,
    "label": "has",
    "to": 135
  }, {
    "from": 133,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 133,
    "label": "has",
    "to": 121
  }, {
    "from": 133,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 4
  }, {
    "from": 133,
    "label": "has",
    "to": 124
  }, {
    "from": 133,
    "label": "has",
    "to": 136
  }, {
    "from": 133,
    "label": "has",
    "to": 137
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 137,
    "label": "has",
    "to": 139
  }, {
    "from": 133,
    "label": "has",
    "to": 140
  }, {
    "from": 133,
    "label": "has",
    "to": 141
  }, {
    "from": 133,
    "label": "has",
    "to": 142
  }, {
    "from": 143,
    "label": "has",
    "to": 4
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 144,
    "label": "has",
    "to": 146
  }, {
    "from": 144,
    "label": "has",
    "to": 4
  }, {
    "from": 144,
    "label": "has",
    "to": 4
  }, {
    "from": 144,
    "label": "has",
    "to": 147
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 148,
    "label": "has",
    "to": 150
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 150,
    "label": "has",
    "to": 152
  }, {
    "from": 148,
    "label": "has",
    "to": 4
  }, {
    "from": 148,
    "label": "has",
    "to": 153
  }, {
    "from": 154,
    "label": "has",
    "to": 4
  }, {
    "from": 155,
    "label": "has",
    "to": 4
  }, {
    "from": 156,
    "label": "has",
    "to": 4
  }, {
    "from": 157,
    "label": "has",
    "to": 4
  }, {
    "from": 158,
    "label": "has",
    "to": 159
  }, {
    "from": 158,
    "label": "has",
    "to": 160
  }, {
    "from": 158,
    "label": "has",
    "to": 161
  }, {
    "from": 158,
    "label": "has",
    "to": 4
  }, {
    "from": 158,
    "label": "has",
    "to": 162
  }, {
    "from": 163,
    "label": "has",
    "to": 164
  }, {
    "from": 163,
    "label": "has",
    "to": 160
  }, {
    "from": 163,
    "label": "has",
    "to": 161
  }, {
    "from": 163,
    "label": "has",
    "to": 4
  }, {
    "from": 163,
    "label": "has",
    "to": 165
  }, {
    "from": 166,
    "label": "has",
    "to": 167
  }, {
    "from": 166,
    "label": "has",
    "to": 168
  }, {
    "from": 166,
    "label": "has",
    "to": 4
  }, {
    "from": 166,
    "label": "has",
    "to": 169
  }, {
    "from": 170,
    "label": "has",
    "to": 171
  }, {
    "from": 170,
    "label": "has",
    "to": 172
  }, {
    "from": 170,
    "label": "has",
    "to": 4
  }, {
    "from": 170,
    "label": "has",
    "to": 173
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 174,
    "label": "has",
    "to": 4
  }, {
    "from": 174,
    "label": "has",
    "to": 176
  }, {
    "from": 174,
    "label": "has",
    "to": 177
  }, {
    "from": 174,
    "label": "has",
    "to": 178
  }, {
    "from": 174,
    "label": "has",
    "to": 179
  }, {
    "from": 174,
    "label": "has",
    "to": 180
  }, {
    "from": 174,
    "label": "has",
    "to": 4
  }, {
    "from": 174,
    "label": "has",
    "to": 181
  }, {
    "from": 182,
    "label": "has",
    "to": 183
  }, {
    "from": 182,
    "label": "has",
    "to": 184
  }, {
    "from": 182,
    "label": "has",
    "to": 185
  }, {
    "from": 182,
    "label": "has",
    "to": 186
  }, {
    "from": 182,
    "label": "has",
    "to": 187
  }, {
    "from": 182,
    "label": "has",
    "to": 188
  }, {
    "from": 188,
    "label": "has",
    "to": 189
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 189,
    "label": "has",
    "to": 191
  }, {
    "from": 189,
    "label": "has",
    "to": 192
  }, {
    "from": 182,
    "label": "has",
    "to": 193
  }, {
    "from": 193,
    "label": "has",
    "to": 189
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 189,
    "label": "has",
    "to": 191
  }, {
    "from": 189,
    "label": "has",
    "to": 192
  }, {
    "from": 182,
    "label": "has",
    "to": 194
  }, {
    "from": 194,
    "label": "has",
    "to": 195
  }, {
    "from": 195,
    "label": "has",
    "to": 190
  }, {
    "from": 195,
    "label": "has",
    "to": 196
  }, {
    "from": 195,
    "label": "has",
    "to": 197
  }, {
    "from": 182,
    "label": "has",
    "to": 198
  }, {
    "from": 199,
    "label": "has",
    "to": 200
  }, {
    "from": 199,
    "label": "has",
    "to": 184
  }, {
    "from": 199,
    "label": "has",
    "to": 185
  }, {
    "from": 199,
    "label": "has",
    "to": 186
  }, {
    "from": 199,
    "label": "has",
    "to": 201
  }, {
    "from": 199,
    "label": "has",
    "to": 202
  }, {
    "from": 202,
    "label": "has",
    "to": 203
  }, {
    "from": 203,
    "label": "has",
    "to": 190
  }, {
    "from": 203,
    "label": "has",
    "to": 204
  }, {
    "from": 203,
    "label": "has",
    "to": 205
  }, {
    "from": 203,
    "label": "has",
    "to": 206
  }, {
    "from": 199,
    "label": "has",
    "to": 207
  }, {
    "from": 207,
    "label": "has",
    "to": 203
  }, {
    "from": 203,
    "label": "has",
    "to": 190
  }, {
    "from": 203,
    "label": "has",
    "to": 204
  }, {
    "from": 203,
    "label": "has",
    "to": 205
  }, {
    "from": 203,
    "label": "has",
    "to": 206
  }, {
    "from": 199,
    "label": "has",
    "to": 208
  }, {
    "from": 208,
    "label": "has",
    "to": 209
  }, {
    "from": 209,
    "label": "has",
    "to": 190
  }, {
    "from": 209,
    "label": "has",
    "to": 196
  }, {
    "from": 209,
    "label": "has",
    "to": 210
  }, {
    "from": 199,
    "label": "has",
    "to": 211
  }, {
    "from": 212,
    "label": "has",
    "to": 213
  }, {
    "from": 212,
    "label": "has",
    "to": 4
  }, {
    "from": 212,
    "label": "has",
    "to": 214
  }, {
    "from": 215,
    "label": "has",
    "to": 216
  }, {
    "from": 215,
    "label": "has",
    "to": 217
  }, {
    "from": 215,
    "label": "has",
    "to": 218
  }, {
    "from": 215,
    "label": "has",
    "to": 4
  }, {
    "from": 215,
    "label": "has",
    "to": 219
  }, {
    "from": 220,
    "label": "has",
    "to": 221
  }, {
    "from": 220,
    "label": "has",
    "to": 222
  }, {
    "from": 220,
    "label": "has",
    "to": 223
  }, {
    "from": 223,
    "label": "has",
    "to": 224
  }, {
    "from": 223,
    "label": "has",
    "to": 225
  }, {
    "from": 220,
    "label": "has",
    "to": 4
  }, {
    "from": 220,
    "label": "has",
    "to": 226
  }, {
    "from": 227,
    "label": "has",
    "to": 228
  }, {
    "from": 228,
    "label": "has",
    "to": 229
  }, {
    "from": 227,
    "label": "has",
    "to": 4
  }, {
    "from": 227,
    "label": "has",
    "to": 230
  }, {
    "from": 231,
    "label": "has",
    "to": 221
  }, {
    "from": 231,
    "label": "has",
    "to": 232
  }, {
    "from": 232,
    "label": "has",
    "to": 233
  }, {
    "from": 231,
    "label": "has",
    "to": 4
  }, {
    "from": 231,
    "label": "has",
    "to": 234
  }, {
    "from": 235,
    "label": "has",
    "to": 236
  }, {
    "from": 236,
    "label": "has",
    "to": 237
  }, {
    "from": 235,
    "label": "has",
    "to": 4
  }, {
    "from": 235,
    "label": "has",
    "to": 238
  }, {
    "from": 239,
    "label": "has",
    "to": 240
  }, {
    "from": 239,
    "label": "has",
    "to": 241
  }, {
    "from": 241,
    "label": "has",
    "to": 242
  }, {
    "from": 241,
    "label": "has",
    "to": 243
  }, {
    "from": 239,
    "label": "has",
    "to": 244
  }, {
    "from": 244,
    "label": "has",
    "to": 245
  }, {
    "from": 245,
    "label": "has",
    "to": 246
  }, {
    "from": 239,
    "label": "has",
    "to": 4
  }, {
    "from": 239,
    "label": "has",
    "to": 247
  }, {
    "from": 248,
    "label": "has",
    "to": 249
  }, {
    "from": 248,
    "label": "has",
    "to": 250
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 248,
    "label": "has",
    "to": 4
  }, {
    "from": 248,
    "label": "has",
    "to": 252
  }, {
    "from": 253,
    "label": "has",
    "to": 98
  }, {
    "from": 253,
    "label": "has",
    "to": 254
  }, {
    "from": 254,
    "label": "has",
    "to": 255
  }, {
    "from": 253,
    "label": "has",
    "to": 256
  }, {
    "from": 253,
    "label": "has",
    "to": 257
  }, {
    "from": 257,
    "label": "has",
    "to": 258
  }, {
    "from": 253,
    "label": "has",
    "to": 4
  }, {
    "from": 253,
    "label": "has",
    "to": 259
  }, {
    "from": 260,
    "label": "has",
    "to": 261
  }, {
    "from": 260,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 4
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 4
  }, {
    "from": 260,
    "label": "has",
    "to": 4
  }, {
    "from": 260,
    "label": "has",
    "to": 262
  }, {
    "from": 263,
    "label": "has",
    "to": 264
  }, {
    "from": 263,
    "label": "has",
    "to": 261
  }, {
    "from": 263,
    "label": "has",
    "to": 265
  }, {
    "from": 265,
    "label": "has",
    "to": 54
  }, {
    "from": 263,
    "label": "has",
    "to": 4
  }, {
    "from": 263,
    "label": "has",
    "to": 266
  }, {
    "from": 267,
    "label": "has",
    "to": 4
  }, {
    "from": 268,
    "label": "has",
    "to": 4
  }, {
    "from": 269,
    "label": "has",
    "to": 4
  }, {
    "from": 270,
    "label": "has",
    "to": 4
  }, {
    "from": 271,
    "label": "has",
    "to": 95
  }, {
    "from": 271,
    "label": "has",
    "to": 4
  }, {
    "from": 271,
    "label": "has",
    "to": 272
  }, {
    "from": 273,
    "label": "has",
    "to": 4
  }, {
    "from": 273,
    "label": "has",
    "to": 274
  }, {
    "from": 275,
    "label": "has",
    "to": 276
  }, {
    "from": 275,
    "label": "has",
    "to": 277
  }, {
    "from": 275,
    "label": "has",
    "to": 278
  }, {
    "from": 275,
    "label": "has",
    "to": 279
  }, {
    "from": 275,
    "label": "has",
    "to": 280
  }, {
    "from": 275,
    "label": "has",
    "to": 281
  }, {
    "from": 281,
    "label": "has",
    "to": 282
  }, {
    "from": 275,
    "label": "has",
    "to": 4
  }, {
    "from": 275,
    "label": "has",
    "to": 283
  }, {
    "from": 284,
    "label": "has",
    "to": 4
  }, {
    "from": 284,
    "label": "has",
    "to": 285
  }, {
    "from": 286,
    "label": "has",
    "to": 287
  }, {
    "from": 286,
    "label": "has",
    "to": 288
  }, {
    "from": 286,
    "label": "has",
    "to": 4
  }, {
    "from": 286,
    "label": "has",
    "to": 289
  }, {
    "from": 290,
    "label": "has",
    "to": 4
  }, {
    "from": 291,
    "label": "has",
    "to": 4
  }, {
    "from": 292,
    "label": "has",
    "to": 4
  }, {
    "from": 293,
    "label": "has",
    "to": 4
  }, {
    "from": 294,
    "label": "has",
    "to": 4
  }, {
    "from": 295,
    "label": "has",
    "to": 287
  }, {
    "from": 295,
    "label": "has",
    "to": 296
  }, {
    "from": 295,
    "label": "has",
    "to": 4
  }, {
    "from": 295,
    "label": "has",
    "to": 297
  }, {
    "from": 298,
    "label": "has",
    "to": 299
  }, {
    "from": 298,
    "label": "has",
    "to": 4
  }, {
    "from": 298,
    "label": "has",
    "to": 300
  }, {
    "from": 301,
    "label": "has",
    "to": 4
  }, {
    "from": 302,
    "label": "has",
    "to": 4
  }, {
    "from": 302,
    "label": "has",
    "to": 4
  }, {
    "from": 302,
    "label": "has",
    "to": 303
  }, {
    "from": 304,
    "label": "has",
    "to": 305
  }, {
    "from": 304,
    "label": "has",
    "to": 306
  }, {
    "from": 304,
    "label": "has",
    "to": 4
  }, {
    "from": 304,
    "label": "has",
    "to": 307
  }, {
    "from": 308,
    "label": "has",
    "to": 4
  }, {
    "from": 308,
    "label": "has",
    "to": 305
  }, {
    "from": 308,
    "label": "has",
    "to": 306
  }, {
    "from": 308,
    "label": "has",
    "to": 4
  }, {
    "from": 308,
    "label": "has",
    "to": 309
  }, {
    "from": 310,
    "label": "has",
    "to": 311
  }, {
    "from": 310,
    "label": "has",
    "to": 312
  }, {
    "from": 310,
    "label": "has",
    "to": 4
  }, {
    "from": 310,
    "label": "has",
    "to": 313
  }, {
    "from": 310,
    "label": "has",
    "to": 314
  }, {
    "from": 314,
    "label": "has",
    "to": 315
  }, {
    "from": 314,
    "label": "has",
    "to": 316
  }, {
    "from": 314,
    "label": "has",
    "to": 317
  }, {
    "from": 310,
    "label": "has",
    "to": 4
  }, {
    "from": 310,
    "label": "has",
    "to": 318
  }, {
    "from": 319,
    "label": "has",
    "to": 320
  }, {
    "from": 319,
    "label": "has",
    "to": 321
  }, {
    "from": 322,
    "label": "has",
    "to": 261
  }, {
    "from": 322,
    "label": "has",
    "to": 323
  }, {
    "from": 323,
    "label": "has",
    "to": 320
  }, {
    "from": 322,
    "label": "has",
    "to": 4
  }, {
    "from": 322,
    "label": "has",
    "to": 324
  }, {
    "from": 325,
    "label": "has",
    "to": 4
  }, {
    "from": 325,
    "label": "has",
    "to": 326
  }, {
    "from": 327,
    "label": "has",
    "to": 328
  }, {
    "from": 327,
    "label": "has",
    "to": 329
  }, {
    "from": 327,
    "label": "has",
    "to": 4
  }, {
    "from": 327,
    "label": "has",
    "to": 330
  }, {
    "from": 331,
    "label": "has",
    "to": 4
  }, {
    "from": 331,
    "label": "has",
    "to": 332
  }, {
    "from": 333,
    "label": "has",
    "to": 4
  }, {
    "from": 333,
    "label": "has",
    "to": 334
  }, {
    "from": 335,
    "label": "has",
    "to": 4
  }, {
    "from": 335,
    "label": "has",
    "to": 336
  }, {
    "from": 337,
    "label": "has",
    "to": 4
  }, {
    "from": 337,
    "label": "has",
    "to": 338
  }, {
    "from": 339,
    "label": "has",
    "to": 4
  }, {
    "from": 339,
    "label": "has",
    "to": 340
  }, {
    "from": 341,
    "label": "has",
    "to": 342
  }, {
    "from": 341,
    "label": "has",
    "to": 343
  }, {
    "from": 341,
    "label": "has",
    "to": 4
  }, {
    "from": 341,
    "label": "has",
    "to": 344
  }, {
    "from": 345,
    "label": "has",
    "to": 4
  }, {
    "from": 345,
    "label": "has",
    "to": 346
  }, {
    "from": 347,
    "label": "has",
    "to": 348
  }, {
    "from": 347,
    "label": "has",
    "to": 349
  }, {
    "from": 347,
    "label": "has",
    "to": 350
  }, {
    "from": 350,
    "label": "has",
    "to": 351
  }, {
    "from": 350,
    "label": "has",
    "to": 352
  }, {
    "from": 350,
    "label": "has",
    "to": 353
  }, {
    "from": 347,
    "label": "has",
    "to": 354
  }, {
    "from": 354,
    "label": "has",
    "to": 355
  }, {
    "from": 354,
    "label": "has",
    "to": 352
  }, {
    "from": 347,
    "label": "has",
    "to": 356
  }, {
    "from": 347,
    "label": "has",
    "to": 4
  }, {
    "from": 347,
    "label": "has",
    "to": 357
  }, {
    "from": 358,
    "label": "has",
    "to": 359
  }, {
    "from": 358,
    "label": "has",
    "to": 4
  }, {
    "from": 358,
    "label": "has",
    "to": 360
  }, {
    "from": 361,
    "label": "has",
    "to": 4
  }, {
    "from": 361,
    "label": "has",
    "to": 362
  }, {
    "from": 363,
    "label": "has",
    "to": 4
  }, {
    "from": 363,
    "label": "has",
    "to": 364
  }, {
    "from": 365,
    "label": "has",
    "to": 359
  }, {
    "from": 365,
    "label": "has",
    "to": 4
  }, {
    "from": 365,
    "label": "has",
    "to": 366
  }, {
    "from": 367,
    "label": "has",
    "to": 4
  }, {
    "from": 367,
    "label": "has",
    "to": 368
  }, {
    "from": 369,
    "label": "has",
    "to": 342
  }, {
    "from": 369,
    "label": "has",
    "to": 370
  }, {
    "from": 369,
    "label": "has",
    "to": 4
  }, {
    "from": 369,
    "label": "has",
    "to": 371
  }, {
    "from": 372,
    "label": "has",
    "to": 373
  }, {
    "from": 372,
    "label": "has",
    "to": 374
  }, {
    "from": 372,
    "label": "has",
    "to": 279
  }, {
    "from": 372,
    "label": "has",
    "to": 280
  }, {
    "from": 372,
    "label": "has",
    "to": 375
  }, {
    "from": 372,
    "label": "has",
    "to": 376
  }, {
    "from": 372,
    "label": "has",
    "to": 377
  }, {
    "from": 372,
    "label": "has",
    "to": 4
  }, {
    "from": 372,
    "label": "has",
    "to": 378
  }, {
    "from": 379,
    "label": "has",
    "to": 4
  }, {
    "from": 379,
    "label": "has",
    "to": 380
  }, {
    "from": 381,
    "label": "has",
    "to": 4
  }, {
    "from": 381,
    "label": "has",
    "to": 382
  }, {
    "from": 383,
    "label": "has",
    "to": 4
  }, {
    "from": 383,
    "label": "has",
    "to": 384
  }, {
    "from": 385,
    "label": "has",
    "to": 386
  }, {
    "from": 385,
    "label": "has",
    "to": 4
  }, {
    "from": 385,
    "label": "has",
    "to": 387
  }, {
    "from": 388,
    "label": "has",
    "to": 389
  }, {
    "from": 388,
    "label": "has",
    "to": 4
  }, {
    "from": 388,
    "label": "has",
    "to": 390
  }, {
    "from": 391,
    "label": "has",
    "to": 4
  }, {
    "from": 391,
    "label": "has",
    "to": 392
  }, {
    "from": 393,
    "label": "has",
    "to": 394
  }, {
    "from": 394,
    "label": "has",
    "to": 395
  }, {
    "from": 393,
    "label": "has",
    "to": 396
  }, {
    "from": 393,
    "label": "has",
    "to": 397
  }, {
    "from": 397,
    "label": "has",
    "to": 398
  }, {
    "from": 393,
    "label": "has",
    "to": 4
  }, {
    "from": 393,
    "label": "has",
    "to": 399
  }, {
    "from": 400,
    "label": "has",
    "to": 4
  }, {
    "from": 400,
    "label": "has",
    "to": 401
  }, {
    "from": 402,
    "label": "has",
    "to": 403
  }, {
    "from": 402,
    "label": "has",
    "to": 404
  }, {
    "from": 402,
    "label": "has",
    "to": 405
  }, {
    "from": 402,
    "label": "has",
    "to": 406
  }, {
    "from": 402,
    "label": "has",
    "to": 407
  }, {
    "from": 402,
    "label": "has",
    "to": 408
  }, {
    "from": 402,
    "label": "has",
    "to": 409
  }, {
    "from": 402,
    "label": "has",
    "to": 410
  }, {
    "from": 402,
    "label": "has",
    "to": 411
  }, {
    "from": 411,
    "label": "has",
    "to": 412
  }, {
    "from": 411,
    "label": "has",
    "to": 413
  }, {
    "from": 411,
    "label": "has",
    "to": 414
  }, {
    "from": 414,
    "label": "has",
    "to": 415
  }, {
    "from": 411,
    "label": "has",
    "to": 416
  }, {
    "from": 411,
    "label": "has",
    "to": 417
  }, {
    "from": 402,
    "label": "has",
    "to": 418
  }, {
    "from": 402,
    "label": "has",
    "to": 419
  }, {
    "from": 402,
    "label": "has",
    "to": 4
  }, {
    "from": 402,
    "label": "has",
    "to": 420
  }, {
    "from": 421,
    "label": "has",
    "to": 403
  }, {
    "from": 421,
    "label": "has",
    "to": 4
  }, {
    "from": 421,
    "label": "has",
    "to": 422
  }, {
    "from": 423,
    "label": "has",
    "to": 403
  }, {
    "from": 423,
    "label": "has",
    "to": 424
  }, {
    "from": 423,
    "label": "has",
    "to": 425
  }, {
    "from": 423,
    "label": "has",
    "to": 426
  }, {
    "from": 423,
    "label": "has",
    "to": 427
  }, {
    "from": 423,
    "label": "has",
    "to": 4
  }, {
    "from": 423,
    "label": "has",
    "to": 428
  }, {
    "from": 429,
    "label": "has",
    "to": 403
  }, {
    "from": 429,
    "label": "has",
    "to": 430
  }, {
    "from": 429,
    "label": "has",
    "to": 425
  }, {
    "from": 429,
    "label": "has",
    "to": 431
  }, {
    "from": 429,
    "label": "has",
    "to": 432
  }, {
    "from": 429,
    "label": "has",
    "to": 433
  }, {
    "from": 429,
    "label": "has",
    "to": 434
  }, {
    "from": 429,
    "label": "has",
    "to": 435
  }, {
    "from": 429,
    "label": "has",
    "to": 4
  }, {
    "from": 429,
    "label": "has",
    "to": 436
  }, {
    "from": 437,
    "label": "has",
    "to": 403
  }, {
    "from": 437,
    "label": "has",
    "to": 438
  }, {
    "from": 437,
    "label": "has",
    "to": 439
  }, {
    "from": 437,
    "label": "has",
    "to": 440
  }, {
    "from": 437,
    "label": "has",
    "to": 427
  }, {
    "from": 437,
    "label": "has",
    "to": 4
  }, {
    "from": 437,
    "label": "has",
    "to": 441
  }, {
    "from": 442,
    "label": "has",
    "to": 403
  }, {
    "from": 442,
    "label": "has",
    "to": 443
  }, {
    "from": 442,
    "label": "has",
    "to": 444
  }, {
    "from": 442,
    "label": "has",
    "to": 445
  }, {
    "from": 445,
    "label": "has",
    "to": 446
  }, {
    "from": 442,
    "label": "has",
    "to": 447
  }, {
    "from": 442,
    "label": "has",
    "to": 448
  }, {
    "from": 442,
    "label": "has",
    "to": 4
  }, {
    "from": 442,
    "label": "has",
    "to": 449
  }, {
    "from": 450,
    "label": "has",
    "to": 403
  }, {
    "from": 450,
    "label": "has",
    "to": 404
  }, {
    "from": 450,
    "label": "has",
    "to": 405
  }, {
    "from": 450,
    "label": "has",
    "to": 406
  }, {
    "from": 450,
    "label": "has",
    "to": 4
  }, {
    "from": 450,
    "label": "has",
    "to": 451
  }, {
    "from": 452,
    "label": "has",
    "to": 403
  }, {
    "from": 452,
    "label": "has",
    "to": 404
  }, {
    "from": 452,
    "label": "has",
    "to": 453
  }, {
    "from": 452,
    "label": "has",
    "to": 454
  }, {
    "from": 452,
    "label": "has",
    "to": 455
  }, {
    "from": 455,
    "label": "has",
    "to": 446
  }, {
    "from": 452,
    "label": "has",
    "to": 4
  }, {
    "from": 452,
    "label": "has",
    "to": 456
  }, {
    "from": 457,
    "label": "has",
    "to": 403
  }, {
    "from": 457,
    "label": "has",
    "to": 458
  }, {
    "from": 457,
    "label": "has",
    "to": 425
  }, {
    "from": 457,
    "label": "has",
    "to": 459
  }, {
    "from": 457,
    "label": "has",
    "to": 460
  }, {
    "from": 457,
    "label": "has",
    "to": 4
  }, {
    "from": 457,
    "label": "has",
    "to": 461
  }, {
    "from": 462,
    "label": "has",
    "to": 403
  }, {
    "from": 462,
    "label": "has",
    "to": 463
  }, {
    "from": 462,
    "label": "has",
    "to": 425
  }, {
    "from": 462,
    "label": "has",
    "to": 464
  }, {
    "from": 462,
    "label": "has",
    "to": 465
  }, {
    "from": 462,
    "label": "has",
    "to": 466
  }, {
    "from": 462,
    "label": "has",
    "to": 4
  }, {
    "from": 462,
    "label": "has",
    "to": 467
  }, {
    "from": 468,
    "label": "has",
    "to": 403
  }, {
    "from": 468,
    "label": "has",
    "to": 469
  }, {
    "from": 468,
    "label": "has",
    "to": 470
  }, {
    "from": 468,
    "label": "has",
    "to": 471
  }, {
    "from": 468,
    "label": "has",
    "to": 460
  }, {
    "from": 468,
    "label": "has",
    "to": 4
  }, {
    "from": 468,
    "label": "has",
    "to": 472
  }, {
    "from": 473,
    "label": "has",
    "to": 403
  }, {
    "from": 473,
    "label": "has",
    "to": 474
  }, {
    "from": 473,
    "label": "has",
    "to": 475
  }, {
    "from": 473,
    "label": "has",
    "to": 476
  }, {
    "from": 473,
    "label": "has",
    "to": 477
  }, {
    "from": 473,
    "label": "has",
    "to": 4
  }, {
    "from": 473,
    "label": "has",
    "to": 478
  }, {
    "from": 479,
    "label": "has",
    "to": 4
  }, {
    "from": 479,
    "label": "has",
    "to": 480
  }, {
    "from": 481,
    "label": "has",
    "to": 482
  }, {
    "from": 481,
    "label": "has",
    "to": 483
  }, {
    "from": 481,
    "label": "has",
    "to": 484
  }, {
    "from": 484,
    "label": "has",
    "to": 485
  }, {
    "from": 481,
    "label": "has",
    "to": 4
  }, {
    "from": 481,
    "label": "has",
    "to": 486
  }, {
    "from": 487,
    "label": "has",
    "to": 488
  }, {
    "from": 487,
    "label": "has",
    "to": 4
  }, {
    "from": 487,
    "label": "has",
    "to": 489
  }, {
    "from": 490,
    "label": "has",
    "to": 488
  }, {
    "from": 490,
    "label": "has",
    "to": 4
  }, {
    "from": 490,
    "label": "has",
    "to": 491
  }, {
    "from": 492,
    "label": "has",
    "to": 488
  }, {
    "from": 492,
    "label": "has",
    "to": 493
  }, {
    "from": 492,
    "label": "has",
    "to": 494
  }, {
    "from": 494,
    "label": "has",
    "to": 495
  }, {
    "from": 494,
    "label": "has",
    "to": 496
  }, {
    "from": 492,
    "label": "has",
    "to": 4
  }, {
    "from": 492,
    "label": "has",
    "to": 497
  }, {
    "from": 498,
    "label": "has",
    "to": 488
  }, {
    "from": 498,
    "label": "has",
    "to": 499
  }, {
    "from": 498,
    "label": "has",
    "to": 500
  }, {
    "from": 500,
    "label": "has",
    "to": 501
  }, {
    "from": 498,
    "label": "has",
    "to": 4
  }, {
    "from": 498,
    "label": "has",
    "to": 502
  }, {
    "from": 503,
    "label": "calls",
    "to": 506
  }, {
    "from": 503,
    "label": "calls",
    "to": 506
  }, {
    "from": 503,
    "label": "calls",
    "to": 506
  }, {
    "from": 503,
    "label": "calls",
    "to": 506
  }, {
    "from": 503,
    "label": "calls",
    "to": 506
  }, {
    "from": 503,
    "label": "calls",
    "to": 506
  }, {
    "from": 503,
    "label": "calls",
    "to": 506
  }, {
    "from": 503,
    "label": "calls",
    "to": 506
  }, {
    "from": 503,
    "label": "calls",
    "to": 506
  }, {
    "from": 503,
    "label": "calls",
    "to": 506
  }, {
    "from": 503,
    "label": "calls",
    "to": 506
  }, {
    "from": 503,
    "label": "calls",
    "to": 506
  }, {
    "from": 111,
    "label": "calls",
    "to": 520
  }, {
    "from": 19,
    "label": "calls",
    "to": 537
  }, {
    "from": 503,
    "label": "calls",
    "to": 509
  }, {
    "from": 503,
    "label": "calls",
    "to": 509
  }, {
    "from": 503,
    "label": "calls",
    "to": 509
  }, {
    "from": 503,
    "label": "calls",
    "to": 509
  }, {
    "from": 503,
    "label": "calls",
    "to": 509
  }, {
    "from": 503,
    "label": "calls",
    "to": 509
  }, {
    "from": 503,
    "label": "calls",
    "to": 509
  }, {
    "from": 503,
    "label": "calls",
    "to": 182
  }, {
    "from": 182,
    "label": "calls",
    "to": 504
  }, {
    "from": 199,
    "label": "calls",
    "to": 504
  }, {
    "from": 503,
    "label": "calls",
    "to": 510
  }, {
    "from": 18,
    "label": "calls",
    "to": 510
  }, {
    "from": 503,
    "label": "calls",
    "to": 510
  }, {
    "from": 19,
    "label": "calls",
    "to": 521
  }, {
    "from": 56,
    "label": "calls",
    "to": 511
  }, {
    "from": 90,
    "label": "calls",
    "to": 85
  }, {
    "from": 90,
    "label": "calls",
    "to": 512
  }, {
    "from": 503,
    "label": "calls",
    "to": 512
  }, {
    "from": 503,
    "label": "calls",
    "to": 512
  }, {
    "from": 503,
    "label": "calls",
    "to": 512
  }, {
    "from": 52,
    "label": "calls",
    "to": 513
  }, {
    "from": 503,
    "label": "calls",
    "to": 513
  }, {
    "from": 503,
    "label": "calls",
    "to": 513
  }, {
    "from": 85,
    "label": "calls",
    "to": 3
  }, {
    "from": 503,
    "label": "calls",
    "to": 523
  }, {
    "from": 503,
    "label": "calls",
    "to": 523
  }, {
    "from": 503,
    "label": "calls",
    "to": 523
  }, {
    "from": 503,
    "label": "calls",
    "to": 523
  }, {
    "from": 503,
    "label": "calls",
    "to": 523
  }, {
    "from": 503,
    "label": "calls",
    "to": 523
  }, {
    "from": 503,
    "label": "calls",
    "to": 523
  }, {
    "from": 503,
    "label": "calls",
    "to": 523
  }, {
    "from": 166,
    "label": "calls",
    "to": 523
  }, {
    "from": 174,
    "label": "calls",
    "to": 523
  }, {
    "from": 503,
    "label": "calls",
    "to": 523
  }, {
    "from": 114,
    "label": "calls",
    "to": 524
  }, {
    "from": 133,
    "label": "calls",
    "to": 524
  }, {
    "from": 3,
    "label": "calls",
    "to": 542
  }, {
    "from": 503,
    "label": "calls",
    "to": 109
  }, {
    "from": 503,
    "label": "calls",
    "to": 109
  }, {
    "from": 90,
    "label": "calls",
    "to": 522
  }, {
    "from": 503,
    "label": "calls",
    "to": 535
  }, {
    "from": 503,
    "label": "calls",
    "to": 535
  }, {
    "from": 30,
    "label": "calls",
    "to": 51
  }, {
    "from": 30,
    "label": "calls",
    "to": 51
  }, {
    "from": 30,
    "label": "calls",
    "to": 51
  }, {
    "from": 30,
    "label": "calls",
    "to": 51
  }, {
    "from": 30,
    "label": "calls",
    "to": 51
  }, {
    "from": 30,
    "label": "calls",
    "to": 51
  }, {
    "from": 30,
    "label": "calls",
    "to": 51
  }, {
    "from": 30,
    "label": "calls",
    "to": 51
  }, {
    "from": 30,
    "label": "calls",
    "to": 51
  }, {
    "from": 30,
    "label": "calls",
    "to": 51
  }, {
    "from": 30,
    "label": "calls",
    "to": 51
  }, {
    "from": 503,
    "label": "calls",
    "to": 507
  }, {
    "from": 503,
    "label": "calls",
    "to": 507
  }, {
    "from": 503,
    "label": "calls",
    "to": 507
  }, {
    "from": 503,
    "label": "calls",
    "to": 507
  }, {
    "from": 503,
    "label": "calls",
    "to": 507
  }, {
    "from": 503,
    "label": "calls",
    "to": 507
  }, {
    "from": 503,
    "label": "calls",
    "to": 507
  }, {
    "from": 503,
    "label": "calls",
    "to": 507
  }, {
    "from": 503,
    "label": "calls",
    "to": 507
  }, {
    "from": 56,
    "label": "calls",
    "to": 515
  }, {
    "from": 90,
    "label": "calls",
    "to": 541
  }, {
    "from": 174,
    "label": "calls",
    "to": 525
  }, {
    "from": 503,
    "label": "calls",
    "to": 525
  }, {
    "from": 166,
    "label": "calls",
    "to": 526
  }, {
    "from": 174,
    "label": "calls",
    "to": 526
  }, {
    "from": 182,
    "label": "calls",
    "to": 526
  }, {
    "from": 182,
    "label": "calls",
    "to": 526
  }, {
    "from": 199,
    "label": "calls",
    "to": 526
  }, {
    "from": 199,
    "label": "calls",
    "to": 526
  }, {
    "from": 90,
    "label": "calls",
    "to": 87
  }, {
    "from": 90,
    "label": "calls",
    "to": 87
  }, {
    "from": 503,
    "label": "calls",
    "to": 527
  }, {
    "from": 503,
    "label": "calls",
    "to": 90
  }, {
    "from": 503,
    "label": "calls",
    "to": 90
  }, {
    "from": 503,
    "label": "calls",
    "to": 90
  }, {
    "from": 503,
    "label": "calls",
    "to": 90
  }, {
    "from": 503,
    "label": "calls",
    "to": 90
  }, {
    "from": 503,
    "label": "calls",
    "to": 90
  }, {
    "from": 503,
    "label": "calls",
    "to": 90
  }, {
    "from": 503,
    "label": "calls",
    "to": 90
  }, {
    "from": 503,
    "label": "calls",
    "to": 90
  }, {
    "from": 503,
    "label": "calls",
    "to": 56
  }, {
    "from": 182,
    "label": "calls",
    "to": 114
  }, {
    "from": 182,
    "label": "calls",
    "to": 114
  }, {
    "from": 182,
    "label": "calls",
    "to": 114
  }, {
    "from": 503,
    "label": "calls",
    "to": 528
  }, {
    "from": 503,
    "label": "calls",
    "to": 528
  }, {
    "from": 503,
    "label": "calls",
    "to": 528
  }, {
    "from": 503,
    "label": "calls",
    "to": 528
  }, {
    "from": 114,
    "label": "calls",
    "to": 528
  }, {
    "from": 133,
    "label": "calls",
    "to": 528
  }, {
    "from": 503,
    "label": "calls",
    "to": 517
  }, {
    "from": 503,
    "label": "calls",
    "to": 534
  }, {
    "from": 503,
    "label": "calls",
    "to": 530
  }, {
    "from": 5,
    "label": "calls",
    "to": 530
  }, {
    "from": 5,
    "label": "calls",
    "to": 530
  }, {
    "from": 30,
    "label": "calls",
    "to": 530
  }, {
    "from": 503,
    "label": "calls",
    "to": 530
  }, {
    "from": 104,
    "label": "calls",
    "to": 530
  }, {
    "from": 503,
    "label": "calls",
    "to": 530
  }, {
    "from": 503,
    "label": "calls",
    "to": 530
  }, {
    "from": 503,
    "label": "calls",
    "to": 530
  }, {
    "from": 182,
    "label": "calls",
    "to": 530
  }, {
    "from": 182,
    "label": "calls",
    "to": 530
  }, {
    "from": 199,
    "label": "calls",
    "to": 530
  }, {
    "from": 199,
    "label": "calls",
    "to": 530
  }, {
    "from": 503,
    "label": "calls",
    "to": 530
  }, {
    "from": 503,
    "label": "calls",
    "to": 144
  }, {
    "from": 503,
    "label": "calls",
    "to": 144
  }, {
    "from": 30,
    "label": "calls",
    "to": 538
  }, {
    "from": 90,
    "label": "calls",
    "to": 538
  }, {
    "from": 503,
    "label": "calls",
    "to": 538
  }, {
    "from": 503,
    "label": "calls",
    "to": 538
  }, {
    "from": 503,
    "label": "calls",
    "to": 538
  }, {
    "from": 170,
    "label": "calls",
    "to": 166
  }, {
    "from": 503,
    "label": "calls",
    "to": 516
  }, {
    "from": 503,
    "label": "calls",
    "to": 212
  }, {
    "from": 503,
    "label": "calls",
    "to": 212
  }, {
    "from": 503,
    "label": "calls",
    "to": 508
  }, {
    "from": 503,
    "label": "calls",
    "to": 508
  }, {
    "from": 114,
    "label": "calls",
    "to": 132
  }, {
    "from": 133,
    "label": "calls",
    "to": 132
  }, {
    "from": 5,
    "label": "calls",
    "to": 5
  }, {
    "from": 5,
    "label": "calls",
    "to": 5
  }, {
    "from": 114,
    "label": "calls",
    "to": 5
  }, {
    "from": 133,
    "label": "calls",
    "to": 5
  }, {
    "from": 182,
    "label": "calls",
    "to": 533
  }, {
    "from": 199,
    "label": "calls",
    "to": 533
  }, {
    "from": 503,
    "label": "calls",
    "to": 199
  }, {
    "from": 503,
    "label": "calls",
    "to": 532
  }, {
    "from": 503,
    "label": "calls",
    "to": 532
  }, {
    "from": 503,
    "label": "calls",
    "to": 532
  }, {
    "from": 19,
    "label": "calls",
    "to": 536
  }, {
    "from": 52,
    "label": "calls",
    "to": 52
  }, {
    "from": 503,
    "label": "calls",
    "to": 52
  }, {
    "from": 503,
    "label": "calls",
    "to": 104
  }, {
    "from": 56,
    "label": "calls",
    "to": 77
  }, {
    "from": 56,
    "label": "calls",
    "to": 77
  }, {
    "from": 56,
    "label": "calls",
    "to": 77
  }, {
    "from": 56,
    "label": "calls",
    "to": 77
  }, {
    "from": 56,
    "label": "calls",
    "to": 77
  }, {
    "from": 81,
    "label": "calls",
    "to": 77
  }, {
    "from": 83,
    "label": "calls",
    "to": 77
  }, {
    "from": 85,
    "label": "calls",
    "to": 77
  }, {
    "from": 87,
    "label": "calls",
    "to": 77
  }, {
    "from": 51,
    "label": "calls",
    "to": 518
  }, {
    "from": 503,
    "label": "calls",
    "to": 518
  }, {
    "from": 104,
    "label": "calls",
    "to": 518
  }, {
    "from": 503,
    "label": "calls",
    "to": 518
  }, {
    "from": 503,
    "label": "calls",
    "to": 518
  }, {
    "from": 503,
    "label": "calls",
    "to": 518
  }, {
    "from": 503,
    "label": "calls",
    "to": 518
  }, {
    "from": 503,
    "label": "calls",
    "to": 518
  }, {
    "from": 503,
    "label": "calls",
    "to": 518
  }, {
    "from": 503,
    "label": "calls",
    "to": 518
  }, {
    "from": 503,
    "label": "calls",
    "to": 518
  }, {
    "from": 503,
    "label": "calls",
    "to": 518
  }, {
    "from": 503,
    "label": "calls",
    "to": 518
  }, {
    "from": 503,
    "label": "calls",
    "to": 518
  }, {
    "from": 503,
    "label": "calls",
    "to": 531
  }, {
    "from": 503,
    "label": "calls",
    "to": 531
  }, {
    "from": 503,
    "label": "calls",
    "to": 531
  }, {
    "from": 503,
    "label": "calls",
    "to": 531
  }, {
    "from": 503,
    "label": "calls",
    "to": 531
  }, {
    "from": 503,
    "label": "calls",
    "to": 97
  }, {
    "from": 503,
    "label": "calls",
    "to": 148
  }, {
    "from": 503,
    "label": "calls",
    "to": 148
  }, {
    "from": 30,
    "label": "calls",
    "to": 519
  }, {
    "from": 30,
    "label": "calls",
    "to": 519
  }, {
    "from": 30,
    "label": "calls",
    "to": 519
  }, {
    "from": 114,
    "label": "calls",
    "to": 519
  }, {
    "from": 133,
    "label": "calls",
    "to": 519
  }, {
    "from": 503,
    "label": "calls",
    "to": 540
  }, {
    "from": 109,
    "label": "calls",
    "to": 540
  }, {
    "from": 199,
    "label": "calls",
    "to": 133
  }, {
    "from": 199,
    "label": "calls",
    "to": 133
  }, {
    "from": 199,
    "label": "calls",
    "to": 133
  }, {
    "from": 503,
    "label": "calls",
    "to": 529
  }, {
    "from": 5,
    "label": "calls",
    "to": 539
  }, {
    "from": 5,
    "label": "calls",
    "to": 539
  }, {
    "from": 503,
    "label": "calls",
    "to": 539
  }, {
    "from": 30,
    "label": "calls",
    "to": 539
  }, {
    "from": 114,
    "label": "calls",
    "to": 111
  }, {
    "from": 114,
    "label": "calls",
    "to": 111
  }, {
    "from": 133,
    "label": "calls",
    "to": 111
  }, {
    "from": 503,
    "label": "calls",
    "to": 174
  }, {
    "from": 503,
    "label": "calls",
    "to": 174
  }, {
    "from": 503,
    "label": "calls",
    "to": 174
  }, {
    "from": 503,
    "label": "calls",
    "to": 174
  }, {
    "from": 503,
    "label": "calls",
    "to": 174
  }, {
    "from": 182,
    "label": "calls",
    "to": 174
  }, {
    "from": 199,
    "label": "calls",
    "to": 174
  }, {
    "from": 503,
    "label": "calls",
    "to": 514
  }, {
    "from": 30,
    "label": "calls",
    "to": 514
  }, {
    "from": 503,
    "label": "calls",
    "to": 514
  }, {
    "from": 503,
    "label": "calls",
    "to": 514
  }, {
    "from": 503,
    "label": "calls",
    "to": 514
  }, {
    "from": 503,
    "label": "calls",
    "to": 514
  }, {
    "from": 503,
    "label": "calls",
    "to": 514
  }, {
    "from": 182,
    "label": "calls",
    "to": 514
  }, {
    "from": 182,
    "label": "calls",
    "to": 514
  }, {
    "from": 182,
    "label": "calls",
    "to": 514
  }, {
    "from": 199,
    "label": "calls",
    "to": 514
  }, {
    "from": 199,
    "label": "calls",
    "to": 514
  }, {
    "from": 199,
    "label": "calls",
    "to": 514
  }, {
    "from": 503,
    "label": "calls",
    "to": 514
  }, {
    "from": 2,
    "label": "contains",
    "to": 503
  }, {
    "from": 503,
    "label": "declares",
    "to": 3
  }, {
    "from": 503,
    "label": "declares",
    "to": 5
  }, {
    "from": 503,
    "label": "declares",
    "to": 16
  }, {
    "from": 503,
    "label": "declares",
    "to": 17
  }, {
    "from": 503,
    "label": "declares",
    "to": 18
  }, {
    "from": 503,
    "label": "declares",
    "to": 19
  }, {
    "from": 503,
    "label": "declares",
    "to": 30
  }, {
    "from": 503,
    "label": "declares",
    "to": 51
  }, {
    "from": 503,
    "label": "declares",
    "to": 52
  }, {
    "from": 503,
    "label": "declares",
    "to": 56
  }, {
    "from": 503,
    "label": "declares",
    "to": 77
  }, {
    "from": 503,
    "label": "declares",
    "to": 79
  }, {
    "from": 503,
    "label": "declares",
    "to": 81
  }, {
    "from": 503,
    "label": "declares",
    "to": 83
  }, {
    "from": 503,
    "label": "declares",
    "to": 85
  }, {
    "from": 503,
    "label": "declares",
    "to": 87
  }, {
    "from": 503,
    "label": "declares",
    "to": 90
  }, {
    "from": 503,
    "label": "declares",
    "to": 97
  }, {
    "from": 503,
    "label": "declares",
    "to": 104
  }, {
    "from": 503,
    "label": "declares",
    "to": 109
  }, {
    "from": 503,
    "label": "declares",
    "to": 111
  }, {
    "from": 503,
    "label": "declares",
    "to": 114
  }, {
    "from": 503,
    "label": "declares",
    "to": 132
  }, {
    "from": 503,
    "label": "declares",
    "to": 133
  }, {
    "from": 503,
    "label": "declares",
    "to": 143
  }, {
    "from": 503,
    "label": "declares",
    "to": 144
  }, {
    "from": 503,
    "label": "declares",
    "to": 148
  }, {
    "from": 503,
    "label": "declares",
    "to": 154
  }, {
    "from": 503,
    "label": "declares",
    "to": 155
  }, {
    "from": 503,
    "label": "declares",
    "to": 156
  }, {
    "from": 503,
    "label": "declares",
    "to": 157
  }, {
    "from": 503,
    "label": "declares",
    "to": 158
  }, {
    "from": 503,
    "label": "declares",
    "to": 163
  }, {
    "from": 503,
    "label": "declares",
    "to": 166
  }, {
    "from": 503,
    "label": "declares",
    "to": 170
  }, {
    "from": 503,
    "label": "declares",
    "to": 174
  }, {
    "from": 503,
    "label": "declares",
    "to": 182
  }, {
    "from": 503,
    "label": "declares",
    "to": 199
  }, {
    "from": 503,
    "label": "declares",
    "to": 212
  }, {
    "from": 503,
    "label": "declares",
    "to": 215
  }, {
    "from": 503,
    "label": "declares",
    "to": 220
  }, {
    "from": 503,
    "label": "declares",
    "to": 227
  }, {
    "from": 503,
    "label": "declares",
    "to": 231
  }, {
    "from": 503,
    "label": "declares",
    "to": 235
  }, {
    "from": 503,
    "label": "declares",
    "to": 239
  }, {
    "from": 503,
    "label": "declares",
    "to": 248
  }, {
    "from": 503,
    "label": "declares",
    "to": 253
  }, {
    "from": 503,
    "label": "declares",
    "to": 260
  }, {
    "from": 503,
    "label": "declares",
    "to": 263
  }, {
    "from": 503,
    "label": "declares",
    "to": 267
  }, {
    "from": 503,
    "label": "declares",
    "to": 268
  }, {
    "from": 503,
    "label": "declares",
    "to": 269
  }, {
    "from": 503,
    "label": "declares",
    "to": 270
  }, {
    "from": 503,
    "label": "declares",
    "to": 271
  }, {
    "from": 503,
    "label": "declares",
    "to": 273
  }, {
    "from": 503,
    "label": "declares",
    "to": 275
  }, {
    "from": 503,
    "label": "declares",
    "to": 284
  }, {
    "from": 503,
    "label": "declares",
    "to": 286
  }, {
    "from": 503,
    "label": "declares",
    "to": 290
  }, {
    "from": 503,
    "label": "declares",
    "to": 291
  }, {
    "from": 503,
    "label": "declares",
    "to": 292
  }, {
    "from": 503,
    "label": "declares",
    "to": 293
  }, {
    "from": 503,
    "label": "declares",
    "to": 294
  }, {
    "from": 503,
    "label": "declares",
    "to": 295
  }, {
    "from": 503,
    "label": "declares",
    "to": 298
  }, {
    "from": 503,
    "label": "declares",
    "to": 301
  }, {
    "from": 503,
    "label": "declares",
    "to": 302
  }, {
    "from": 503,
    "label": "declares",
    "to": 304
  }, {
    "from": 503,
    "label": "declares",
    "to": 308
  }, {
    "from": 503,
    "label": "declares",
    "to": 310
  }, {
    "from": 503,
    "label": "declares",
    "to": 319
  }, {
    "from": 503,
    "label": "declares",
    "to": 322
  }, {
    "from": 503,
    "label": "declares",
    "to": 325
  }, {
    "from": 503,
    "label": "declares",
    "to": 327
  }, {
    "from": 503,
    "label": "declares",
    "to": 331
  }, {
    "from": 503,
    "label": "declares",
    "to": 333
  }, {
    "from": 503,
    "label": "declares",
    "to": 335
  }, {
    "from": 503,
    "label": "declares",
    "to": 337
  }, {
    "from": 503,
    "label": "declares",
    "to": 339
  }, {
    "from": 503,
    "label": "declares",
    "to": 341
  }, {
    "from": 503,
    "label": "declares",
    "to": 345
  }, {
    "from": 503,
    "label": "declares",
    "to": 347
  }, {
    "from": 503,
    "label": "declares",
    "to": 358
  }, {
    "from": 503,
    "label": "declares",
    "to": 361
  }, {
    "from": 503,
    "label": "declares",
    "to": 363
  }, {
    "from": 503,
    "label": "declares",
    "to": 365
  }, {
    "from": 503,
    "label": "declares",
    "to": 367
  }, {
    "from": 503,
    "label": "declares",
    "to": 369
  }, {
    "from": 503,
    "label": "declares",
    "to": 372
  }, {
    "from": 503,
    "label": "declares",
    "to": 379
  }, {
    "from": 503,
    "label": "declares",
    "to": 381
  }, {
    "from": 503,
    "label": "declares",
    "to": 383
  }, {
    "from": 503,
    "label": "declares",
    "to": 385
  }, {
    "from": 503,
    "label": "declares",
    "to": 388
  }, {
    "from": 503,
    "label": "declares",
    "to": 391
  }, {
    "from": 503,
    "label": "declares",
    "to": 393
  }, {
    "from": 503,
    "label": "declares",
    "to": 400
  }, {
    "from": 503,
    "label": "declares",
    "to": 402
  }, {
    "from": 503,
    "label": "declares",
    "to": 421
  }, {
    "from": 503,
    "label": "declares",
    "to": 423
  }, {
    "from": 503,
    "label": "declares",
    "to": 429
  }, {
    "from": 503,
    "label": "declares",
    "to": 437
  }, {
    "from": 503,
    "label": "declares",
    "to": 442
  }, {
    "from": 503,
    "label": "declares",
    "to": 450
  }, {
    "from": 503,
    "label": "declares",
    "to": 452
  }, {
    "from": 503,
    "label": "declares",
    "to": 457
  }, {
    "from": 503,
    "label": "declares",
    "to": 462
  }, {
    "from": 503,
    "label": "declares",
    "to": 468
  }, {
    "from": 503,
    "label": "declares",
    "to": 473
  }, {
    "from": 503,
    "label": "declares",
    "to": 479
  }, {
    "from": 503,
    "label": "declares",
    "to": 481
  }, {
    "from": 503,
    "label": "declares",
    "to": 487
  }, {
    "from": 503,
    "label": "declares",
    "to": 490
  }, {
    "from": 503,
    "label": "declares",
    "to": 492
  }, {
    "from": 503,
    "label": "declares",
    "to": 498
  }, {
    "from": 2,
    "label": "contains",
    "to": 543
  }, {
    "from": 2,
    "label": "contains",
    "to": 544
  }, {
    "from": 543,
    "label": "initializes",
    "to": 545
  }, {
    "from": 545,
    "label": "assigns",
    "to": 546
  }, {
    "from": 546,
    "label": "assigns",
    "to": 547
  }, {
    "from": 547,
    "label": "assigns",
    "to": 548
  }, {
    "from": 546,
    "label": "assigns",
    "to": 549
  }, {
    "from": 549,
    "label": "assigns",
    "to": 550
  }, {
    "from": 546,
    "label": "assigns",
    "to": 551
  }, {
    "from": 551,
    "label": "assigns",
    "to": 552
  }, {
    "from": 546,
    "label": "assigns",
    "to": 553
  }, {
    "from": 553,
    "label": "assigns",
    "to": 554
  }, {
    "from": 546,
    "label": "assigns",
    "to": 555
  }, {
    "from": 555,
    "label": "assigns",
    "to": 556
  }, {
    "from": 546,
    "label": "assigns",
    "to": 557
  }, {
    "from": 557,
    "label": "assigns",
    "to": 558
  }, {
    "from": 546,
    "label": "assigns",
    "to": 559
  }, {
    "from": 559,
    "label": "assigns",
    "to": 560
  }, {
    "from": 543,
    "label": "initializes",
    "to": 561
  }, {
    "from": 561,
    "label": "assigns",
    "to": 562
  }, {
    "from": 562,
    "label": "assigns",
    "to": 563
  }, {
    "from": 563,
    "label": "assigns",
    "to": 564
  }, {
    "from": 562,
    "label": "assigns",
    "to": 565
  }, {
    "from": 565,
    "label": "assigns",
    "to": 566
  }, {
    "from": 562,
    "label": "assigns",
    "to": 567
  }, {
    "from": 567,
    "label": "assigns",
    "to": 568
  }, {
    "from": 562,
    "label": "assigns",
    "to": 569
  }, {
    "from": 569,
    "label": "assigns",
    "to": 570
  }, {
    "from": 562,
    "label": "assigns",
    "to": 571
  }, {
    "from": 571,
    "label": "assigns",
    "to": 572
  }, {
    "from": 562,
    "label": "assigns",
    "to": 573
  }, {
    "from": 573,
    "label": "assigns",
    "to": 574
  }, {
    "from": 562,
    "label": "assigns",
    "to": 575
  }, {
    "from": 575,
    "label": "assigns",
    "to": 576
  }, {
    "from": 543,
    "label": "initializes",
    "to": 577
  }, {
    "from": 577,
    "label": "assigns",
    "to": 578
  }, {
    "from": 543,
    "label": "initializes",
    "to": 579
  }, {
    "from": 579,
    "label": "assigns",
    "to": 580
  }, {
    "from": 543,
    "label": "initializes",
    "to": 581
  }, {
    "from": 581,
    "label": "assigns",
    "to": 582
  }, {
    "from": 543,
    "label": "initializes",
    "to": 583
  }, {
    "from": 583,
    "label": "assigns",
    "to": 584
  }, {
    "from": 543,
    "label": "initializes",
    "to": 585
  }, {
    "from": 585,
    "label": "assigns",
    "to": 586
  }, {
    "from": 543,
    "label": "initializes",
    "to": 587
  }, {
    "from": 587,
    "label": "assigns",
    "to": 588
  }, {
    "from": 543,
    "label": "initializes",
    "to": 589
  }, {
    "from": 589,
    "label": "assigns",
    "to": 590
  }, {
    "from": 543,
    "label": "initializes",
    "to": 591
  }, {
    "from": 591,
    "label": "assigns",
    "to": 592
  }, {
    "from": 543,
    "label": "initializes",
    "to": 593
  }, {
    "from": 593,
    "label": "assigns",
    "to": 594
  }, {
    "from": 543,
    "label": "initializes",
    "to": 595
  }, {
    "from": 595,
    "label": "assigns",
    "to": 596
  }, {
    "from": 543,
    "label": "initializes",
    "to": 597
  }, {
    "from": 597,
    "label": "assigns",
    "to": 598
  }, {
    "from": 543,
    "label": "initializes",
    "to": 599
  }, {
    "from": 599,
    "label": "assigns",
    "to": 600
  }, {
    "from": 543,
    "label": "initializes",
    "to": 601
  }, {
    "from": 601,
    "label": "assigns",
    "to": 602
  }, {
    "from": 543,
    "label": "initializes",
    "to": 603
  }, {
    "from": 603,
    "label": "assigns",
    "to": 604
  }, {
    "from": 543,
    "label": "initializes",
    "to": 605
  }, {
    "from": 605,
    "label": "assigns",
    "to": 606
  }, {
    "from": 543,
    "label": "initializes",
    "to": 607
  }, {
    "from": 607,
    "label": "assigns",
    "to": 608
  }, {
    "from": 543,
    "label": "initializes",
    "to": 609
  }, {
    "from": 609,
    "label": "assigns",
    "to": 610
  }, {
    "from": 543,
    "label": "initializes",
    "to": 611
  }, {
    "from": 611,
    "label": "assigns",
    "to": 612
  }, {
    "from": 543,
    "label": "initializes",
    "to": 613
  }, {
    "from": 613,
    "label": "assigns",
    "to": 614
  }, {
    "from": 543,
    "label": "initializes",
    "to": 615
  }, {
    "from": 615,
    "label": "assigns",
    "to": 616
  }, {
    "from": 543,
    "label": "initializes",
    "to": 617
  }, {
    "from": 617,
    "label": "assigns",
    "to": 618
  }, {
    "from": 543,
    "label": "initializes",
    "to": 619
  }, {
    "from": 619,
    "label": "assigns",
    "to": 620
  }, {
    "from": 543,
    "label": "initializes",
    "to": 621
  }, {
    "from": 621,
    "label": "assigns",
    "to": 622
  }, {
    "from": 543,
    "label": "initializes",
    "to": 623
  }, {
    "from": 623,
    "label": "assigns",
    "to": 624
  }, {
    "from": 543,
    "label": "initializes",
    "to": 625
  }, {
    "from": 625,
    "label": "assigns",
    "to": 626
  }, {
    "from": 543,
    "label": "initializes",
    "to": 627
  }, {
    "from": 627,
    "label": "assigns",
    "to": 628
  }, {
    "from": 543,
    "label": "initializes",
    "to": 629
  }, {
    "from": 629,
    "label": "assigns",
    "to": 630
  }, {
    "from": 543,
    "label": "initializes",
    "to": 631
  }, {
    "from": 631,
    "label": "assigns",
    "to": 632
  }, {
    "from": 543,
    "label": "initializes",
    "to": 633
  }, {
    "from": 633,
    "label": "assigns",
    "to": 634
  }, {
    "from": 543,
    "label": "initializes",
    "to": 635
  }, {
    "from": 635,
    "label": "assigns",
    "to": 636
  }, {
    "from": 543,
    "label": "initializes",
    "to": 637
  }, {
    "from": 543,
    "label": "initializes",
    "to": 638
  }, {
    "from": 638,
    "label": "assigns",
    "to": 639
  }, {
    "from": 639,
    "label": "assigns",
    "to": 640
  }, {
    "from": 640,
    "label": "assigns",
    "to": 641
  }, {
    "from": 639,
    "label": "assigns",
    "to": 642
  }, {
    "from": 642,
    "label": "assigns",
    "to": 643
  }, {
    "from": 639,
    "label": "assigns",
    "to": 644
  }, {
    "from": 644,
    "label": "assigns",
    "to": 645
  }, {
    "from": 639,
    "label": "assigns",
    "to": 646
  }, {
    "from": 646,
    "label": "assigns",
    "to": 647
  }, {
    "from": 639,
    "label": "assigns",
    "to": 648
  }, {
    "from": 648,
    "label": "assigns",
    "to": 649
  }, {
    "from": 639,
    "label": "assigns",
    "to": 650
  }, {
    "from": 650,
    "label": "assigns",
    "to": 651
  }, {
    "from": 639,
    "label": "assigns",
    "to": 652
  }, {
    "from": 652,
    "label": "assigns",
    "to": 653
  }, {
    "from": 543,
    "label": "initializes",
    "to": 654
  }, {
    "from": 654,
    "label": "assigns",
    "to": 655
  }, {
    "from": 543,
    "label": "initializes",
    "to": 656
  }, {
    "from": 656,
    "label": "assigns",
    "to": 657
  }, {
    "from": 543,
    "label": "initializes",
    "to": 658
  }, {
    "from": 658,
    "label": "assigns",
    "to": 659
  }, {
    "from": 543,
    "label": "initializes",
    "to": 660
  }, {
    "from": 660,
    "label": "assigns",
    "to": 661
  }, {
    "from": 543,
    "label": "initializes",
    "to": 662
  }, {
    "from": 662,
    "label": "assigns",
    "to": 663
  }, {
    "from": 543,
    "label": "initializes",
    "to": 664
  }, {
    "from": 664,
    "label": "assigns",
    "to": 665
  }, {
    "from": 543,
    "label": "initializes",
    "to": 666
  }, {
    "from": 666,
    "label": "assigns",
    "to": 667
  }, {
    "from": 543,
    "label": "initializes",
    "to": 668
  }, {
    "from": 668,
    "label": "assigns",
    "to": 669
  }, {
    "from": 543,
    "label": "initializes",
    "to": 670
  }, {
    "from": 670,
    "label": "assigns",
    "to": 671
  }, {
    "from": 671,
    "label": "assigns",
    "to": 672
  }, {
    "from": 672,
    "label": "assigns",
    "to": 673
  }, {
    "from": 671,
    "label": "assigns",
    "to": 674
  }, {
    "from": 674,
    "label": "assigns",
    "to": 675
  }, {
    "from": 671,
    "label": "assigns",
    "to": 676
  }, {
    "from": 676,
    "label": "assigns",
    "to": 677
  }, {
    "from": 671,
    "label": "assigns",
    "to": 678
  }, {
    "from": 678,
    "label": "assigns",
    "to": 679
  }, {
    "from": 543,
    "label": "initializes",
    "to": 680
  }, {
    "from": 543,
    "label": "initializes",
    "to": 681
  }, {
    "from": 681,
    "label": "assigns",
    "to": 682
  }, {
    "from": 543,
    "label": "initializes",
    "to": 683
  }, {
    "from": 683,
    "label": "assigns",
    "to": 684
  }, {
    "from": 543,
    "label": "initializes",
    "to": 685
  }, {
    "from": 543,
    "label": "initializes",
    "to": 686
  }, {
    "from": 686,
    "label": "assigns",
    "to": 687
  }, {
    "from": 543,
    "label": "initializes",
    "to": 688
  }, {
    "from": 543,
    "label": "initializes",
    "to": 689
  }, {
    "from": 689,
    "label": "assigns",
    "to": 690
  }, {
    "from": 543,
    "label": "initializes",
    "to": 691
  }, {
    "from": 691,
    "label": "assigns",
    "to": 692
  }, {
    "from": 543,
    "label": "initializes",
    "to": 693
  }, {
    "from": 693,
    "label": "assigns",
    "to": 694
  }, {
    "from": 544,
    "label": "initializes",
    "to": 695
  }, {
    "from": 695,
    "label": "requires",
    "to": 505
  }, {
    "from": 544,
    "label": "initializes",
    "to": 696
  }, {
    "from": 696,
    "label": "requires",
    "to": 1
  }, {
    "from": 697,
    "label": "requires",
    "to": 2
  }, {
    "from": 697,
    "label": "requires",
    "to": 2
  }, {
    "from": 697,
    "label": "requires",
    "to": 2
  }, {
    "from": 635,
    "label": "contains",
    "to": 17
  }, {
    "from": 635,
    "label": "contains",
    "to": 18
  }, {
    "from": 635,
    "label": "contains",
    "to": 19
  }, {
    "from": 635,
    "label": "contains",
    "to": 30
  }, {
    "from": 681,
    "label": "contains",
    "to": 154
  }, {
    "from": 681,
    "label": "contains",
    "to": 155
  }, {
    "from": 681,
    "label": "contains",
    "to": 156
  }, {
    "from": 681,
    "label": "contains",
    "to": 157
  }, {
    "from": 681,
    "label": "contains",
    "to": 158
  }, {
    "from": 681,
    "label": "contains",
    "to": 163
  }, {
    "from": 34,
    "label": "hasArgument",
    "to": 641
  }, {
    "from": 34,
    "label": "hasArgument",
    "to": 653
  }, {
    "from": 34,
    "label": "hasArgument",
    "to": 673
  }, {
    "from": 34,
    "label": "hasArgument",
    "to": 675
  }, {
    "from": 34,
    "label": "hasArgument",
    "to": 677
  }, {
    "from": 34,
    "label": "hasArgument",
    "to": 679
  }, {
    "from": 35,
    "label": "hasArgument",
    "to": 641
  }, {
    "from": 35,
    "label": "hasArgument",
    "to": 653
  }, {
    "from": 35,
    "label": "hasArgument",
    "to": 673
  }, {
    "from": 35,
    "label": "hasArgument",
    "to": 675
  }, {
    "from": 35,
    "label": "hasArgument",
    "to": 677
  }, {
    "from": 35,
    "label": "hasArgument",
    "to": 679
  }, {
    "from": 38,
    "label": "hasArgument",
    "to": 641
  }, {
    "from": 38,
    "label": "hasArgument",
    "to": 653
  }, {
    "from": 38,
    "label": "hasArgument",
    "to": 673
  }, {
    "from": 38,
    "label": "hasArgument",
    "to": 675
  }, {
    "from": 38,
    "label": "hasArgument",
    "to": 677
  }, {
    "from": 38,
    "label": "hasArgument",
    "to": 679
  }, {
    "from": 39,
    "label": "hasArgument",
    "to": 641
  }, {
    "from": 39,
    "label": "hasArgument",
    "to": 653
  }, {
    "from": 39,
    "label": "hasArgument",
    "to": 673
  }, {
    "from": 39,
    "label": "hasArgument",
    "to": 675
  }, {
    "from": 39,
    "label": "hasArgument",
    "to": 677
  }, {
    "from": 39,
    "label": "hasArgument",
    "to": 679
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 641
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 653
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 673
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 675
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 677
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 679
  }, {
    "from": 45,
    "label": "hasArgument",
    "to": 641
  }, {
    "from": 45,
    "label": "hasArgument",
    "to": 653
  }, {
    "from": 45,
    "label": "hasArgument",
    "to": 673
  }, {
    "from": 45,
    "label": "hasArgument",
    "to": 675
  }, {
    "from": 45,
    "label": "hasArgument",
    "to": 677
  }, {
    "from": 45,
    "label": "hasArgument",
    "to": 679
  }, {
    "from": 46,
    "label": "hasArgument",
    "to": 641
  }, {
    "from": 46,
    "label": "hasArgument",
    "to": 653
  }, {
    "from": 46,
    "label": "hasArgument",
    "to": 673
  }, {
    "from": 46,
    "label": "hasArgument",
    "to": 675
  }, {
    "from": 46,
    "label": "hasArgument",
    "to": 677
  }, {
    "from": 46,
    "label": "hasArgument",
    "to": 679
  }, {
    "from": 47,
    "label": "hasArgument",
    "to": 641
  }, {
    "from": 47,
    "label": "hasArgument",
    "to": 653
  }, {
    "from": 47,
    "label": "hasArgument",
    "to": 673
  }, {
    "from": 47,
    "label": "hasArgument",
    "to": 675
  }, {
    "from": 47,
    "label": "hasArgument",
    "to": 677
  }, {
    "from": 47,
    "label": "hasArgument",
    "to": 679
  }, {
    "from": 48,
    "label": "hasArgument",
    "to": 641
  }, {
    "from": 48,
    "label": "hasArgument",
    "to": 653
  }, {
    "from": 48,
    "label": "hasArgument",
    "to": 673
  }, {
    "from": 48,
    "label": "hasArgument",
    "to": 675
  }, {
    "from": 48,
    "label": "hasArgument",
    "to": 677
  }, {
    "from": 48,
    "label": "hasArgument",
    "to": 679
  }, {
    "from": 49,
    "label": "hasArgument",
    "to": 641
  }, {
    "from": 49,
    "label": "hasArgument",
    "to": 653
  }, {
    "from": 49,
    "label": "hasArgument",
    "to": 673
  }, {
    "from": 49,
    "label": "hasArgument",
    "to": 675
  }, {
    "from": 49,
    "label": "hasArgument",
    "to": 677
  }, {
    "from": 49,
    "label": "hasArgument",
    "to": 679
  }, {
    "from": 54,
    "label": "hasArgument",
    "to": 641
  }, {
    "from": 54,
    "label": "hasArgument",
    "to": 653
  }, {
    "from": 54,
    "label": "hasArgument",
    "to": 673
  }, {
    "from": 54,
    "label": "hasArgument",
    "to": 675
  }, {
    "from": 54,
    "label": "hasArgument",
    "to": 677
  }, {
    "from": 54,
    "label": "hasArgument",
    "to": 679
  }, {
    "from": 70,
    "label": "hasArgument",
    "to": 641
  }, {
    "from": 70,
    "label": "hasArgument",
    "to": 653
  }, {
    "from": 70,
    "label": "hasArgument",
    "to": 673
  }, {
    "from": 70,
    "label": "hasArgument",
    "to": 675
  }, {
    "from": 70,
    "label": "hasArgument",
    "to": 677
  }, {
    "from": 70,
    "label": "hasArgument",
    "to": 679
  }, {
    "from": 107,
    "label": "hasArgument",
    "to": 641
  }, {
    "from": 107,
    "label": "hasArgument",
    "to": 653
  }, {
    "from": 107,
    "label": "hasArgument",
    "to": 673
  }, {
    "from": 107,
    "label": "hasArgument",
    "to": 675
  }, {
    "from": 107,
    "label": "hasArgument",
    "to": 677
  }, {
    "from": 107,
    "label": "hasArgument",
    "to": 679
  }, {
    "from": 130,
    "label": "hasArgument",
    "to": 641
  }, {
    "from": 130,
    "label": "hasArgument",
    "to": 653
  }, {
    "from": 130,
    "label": "hasArgument",
    "to": 673
  }, {
    "from": 130,
    "label": "hasArgument",
    "to": 675
  }, {
    "from": 130,
    "label": "hasArgument",
    "to": 677
  }, {
    "from": 130,
    "label": "hasArgument",
    "to": 679
  }, {
    "from": 141,
    "label": "hasArgument",
    "to": 641
  }, {
    "from": 141,
    "label": "hasArgument",
    "to": 653
  }, {
    "from": 141,
    "label": "hasArgument",
    "to": 673
  }, {
    "from": 141,
    "label": "hasArgument",
    "to": 675
  }, {
    "from": 141,
    "label": "hasArgument",
    "to": 677
  }, {
    "from": 141,
    "label": "hasArgument",
    "to": 679
  }, {
    "from": 183,
    "label": "hasArgument",
    "to": 641
  }, {
    "from": 183,
    "label": "hasArgument",
    "to": 653
  }, {
    "from": 183,
    "label": "hasArgument",
    "to": 673
  }, {
    "from": 183,
    "label": "hasArgument",
    "to": 675
  }, {
    "from": 183,
    "label": "hasArgument",
    "to": 677
  }, {
    "from": 183,
    "label": "hasArgument",
    "to": 679
  }, {
    "from": 192,
    "label": "hasArgument",
    "to": 641
  }, {
    "from": 192,
    "label": "hasArgument",
    "to": 653
  }, {
    "from": 192,
    "label": "hasArgument",
    "to": 673
  }, {
    "from": 192,
    "label": "hasArgument",
    "to": 675
  }, {
    "from": 192,
    "label": "hasArgument",
    "to": 677
  }, {
    "from": 192,
    "label": "hasArgument",
    "to": 679
  }, {
    "from": 197,
    "label": "hasArgument",
    "to": 641
  }, {
    "from": 197,
    "label": "hasArgument",
    "to": 653
  }, {
    "from": 197,
    "label": "hasArgument",
    "to": 673
  }, {
    "from": 197,
    "label": "hasArgument",
    "to": 675
  }, {
    "from": 197,
    "label": "hasArgument",
    "to": 677
  }, {
    "from": 197,
    "label": "hasArgument",
    "to": 679
  }, {
    "from": 200,
    "label": "hasArgument",
    "to": 641
  }, {
    "from": 200,
    "label": "hasArgument",
    "to": 653
  }, {
    "from": 200,
    "label": "hasArgument",
    "to": 673
  }, {
    "from": 200,
    "label": "hasArgument",
    "to": 675
  }, {
    "from": 200,
    "label": "hasArgument",
    "to": 677
  }, {
    "from": 200,
    "label": "hasArgument",
    "to": 679
  }, {
    "from": 206,
    "label": "hasArgument",
    "to": 641
  }, {
    "from": 206,
    "label": "hasArgument",
    "to": 653
  }, {
    "from": 206,
    "label": "hasArgument",
    "to": 673
  }, {
    "from": 206,
    "label": "hasArgument",
    "to": 675
  }, {
    "from": 206,
    "label": "hasArgument",
    "to": 677
  }, {
    "from": 206,
    "label": "hasArgument",
    "to": 679
  }, {
    "from": 210,
    "label": "hasArgument",
    "to": 641
  }, {
    "from": 210,
    "label": "hasArgument",
    "to": 653
  }, {
    "from": 210,
    "label": "hasArgument",
    "to": 673
  }, {
    "from": 210,
    "label": "hasArgument",
    "to": 675
  }, {
    "from": 210,
    "label": "hasArgument",
    "to": 677
  }, {
    "from": 210,
    "label": "hasArgument",
    "to": 679
  }, {
    "from": 218,
    "label": "hasArgument",
    "to": 641
  }, {
    "from": 218,
    "label": "hasArgument",
    "to": 653
  }, {
    "from": 218,
    "label": "hasArgument",
    "to": 673
  }, {
    "from": 218,
    "label": "hasArgument",
    "to": 675
  }, {
    "from": 218,
    "label": "hasArgument",
    "to": 677
  }, {
    "from": 218,
    "label": "hasArgument",
    "to": 679
  }, {
    "from": 229,
    "label": "hasArgument",
    "to": 641
  }, {
    "from": 229,
    "label": "hasArgument",
    "to": 653
  }, {
    "from": 229,
    "label": "hasArgument",
    "to": 673
  }, {
    "from": 229,
    "label": "hasArgument",
    "to": 675
  }, {
    "from": 229,
    "label": "hasArgument",
    "to": 677
  }, {
    "from": 229,
    "label": "hasArgument",
    "to": 679
  }, {
    "from": 242,
    "label": "hasArgument",
    "to": 641
  }, {
    "from": 242,
    "label": "hasArgument",
    "to": 653
  }, {
    "from": 242,
    "label": "hasArgument",
    "to": 673
  }, {
    "from": 242,
    "label": "hasArgument",
    "to": 675
  }, {
    "from": 242,
    "label": "hasArgument",
    "to": 677
  }, {
    "from": 242,
    "label": "hasArgument",
    "to": 679
  }, {
    "from": 299,
    "label": "hasArgument",
    "to": 641
  }, {
    "from": 299,
    "label": "hasArgument",
    "to": 653
  }, {
    "from": 299,
    "label": "hasArgument",
    "to": 673
  }, {
    "from": 299,
    "label": "hasArgument",
    "to": 675
  }, {
    "from": 299,
    "label": "hasArgument",
    "to": 677
  }, {
    "from": 299,
    "label": "hasArgument",
    "to": 679
  }, {
    "from": 320,
    "label": "hasArgument",
    "to": 641
  }, {
    "from": 320,
    "label": "hasArgument",
    "to": 653
  }, {
    "from": 320,
    "label": "hasArgument",
    "to": 673
  }, {
    "from": 320,
    "label": "hasArgument",
    "to": 675
  }, {
    "from": 320,
    "label": "hasArgument",
    "to": 677
  }, {
    "from": 320,
    "label": "hasArgument",
    "to": 679
  }, {
    "from": 323,
    "label": "hasArgument",
    "to": 319
  }, {
    "from": 323,
    "label": "hasArgument",
    "to": 641
  }, {
    "from": 323,
    "label": "hasArgument",
    "to": 653
  }, {
    "from": 323,
    "label": "hasArgument",
    "to": 673
  }, {
    "from": 323,
    "label": "hasArgument",
    "to": 675
  }, {
    "from": 323,
    "label": "hasArgument",
    "to": 677
  }, {
    "from": 323,
    "label": "hasArgument",
    "to": 679
  }, {
    "from": 343,
    "label": "hasArgument",
    "to": 641
  }, {
    "from": 343,
    "label": "hasArgument",
    "to": 653
  }, {
    "from": 343,
    "label": "hasArgument",
    "to": 673
  }, {
    "from": 343,
    "label": "hasArgument",
    "to": 675
  }, {
    "from": 343,
    "label": "hasArgument",
    "to": 677
  }, {
    "from": 343,
    "label": "hasArgument",
    "to": 679
  }, {
    "from": 351,
    "label": "hasArgument",
    "to": 641
  }, {
    "from": 351,
    "label": "hasArgument",
    "to": 653
  }, {
    "from": 351,
    "label": "hasArgument",
    "to": 673
  }, {
    "from": 351,
    "label": "hasArgument",
    "to": 675
  }, {
    "from": 351,
    "label": "hasArgument",
    "to": 677
  }, {
    "from": 351,
    "label": "hasArgument",
    "to": 679
  }, {
    "from": 355,
    "label": "hasArgument",
    "to": 641
  }, {
    "from": 355,
    "label": "hasArgument",
    "to": 653
  }, {
    "from": 355,
    "label": "hasArgument",
    "to": 673
  }, {
    "from": 355,
    "label": "hasArgument",
    "to": 675
  }, {
    "from": 355,
    "label": "hasArgument",
    "to": 677
  }, {
    "from": 355,
    "label": "hasArgument",
    "to": 679
  }, {
    "from": 356,
    "label": "hasArgument",
    "to": 641
  }, {
    "from": 356,
    "label": "hasArgument",
    "to": 653
  }, {
    "from": 356,
    "label": "hasArgument",
    "to": 673
  }, {
    "from": 356,
    "label": "hasArgument",
    "to": 675
  }, {
    "from": 356,
    "label": "hasArgument",
    "to": 677
  }, {
    "from": 356,
    "label": "hasArgument",
    "to": 679
  }, {
    "from": 376,
    "label": "hasArgument",
    "to": 641
  }, {
    "from": 376,
    "label": "hasArgument",
    "to": 653
  }, {
    "from": 376,
    "label": "hasArgument",
    "to": 673
  }, {
    "from": 376,
    "label": "hasArgument",
    "to": 675
  }, {
    "from": 376,
    "label": "hasArgument",
    "to": 677
  }, {
    "from": 376,
    "label": "hasArgument",
    "to": 679
  }, {
    "from": 413,
    "label": "hasArgument",
    "to": 641
  }, {
    "from": 413,
    "label": "hasArgument",
    "to": 653
  }, {
    "from": 413,
    "label": "hasArgument",
    "to": 673
  }, {
    "from": 413,
    "label": "hasArgument",
    "to": 675
  }, {
    "from": 413,
    "label": "hasArgument",
    "to": 677
  }, {
    "from": 413,
    "label": "hasArgument",
    "to": 679
  }, {
    "from": 415,
    "label": "hasArgument",
    "to": 641
  }, {
    "from": 415,
    "label": "hasArgument",
    "to": 653
  }, {
    "from": 415,
    "label": "hasArgument",
    "to": 673
  }, {
    "from": 415,
    "label": "hasArgument",
    "to": 675
  }, {
    "from": 415,
    "label": "hasArgument",
    "to": 677
  }, {
    "from": 415,
    "label": "hasArgument",
    "to": 679
  }, {
    "from": 485,
    "label": "hasArgument",
    "to": 641
  }, {
    "from": 485,
    "label": "hasArgument",
    "to": 653
  }, {
    "from": 485,
    "label": "hasArgument",
    "to": 673
  }, {
    "from": 485,
    "label": "hasArgument",
    "to": 675
  }, {
    "from": 485,
    "label": "hasArgument",
    "to": 677
  }, {
    "from": 485,
    "label": "hasArgument",
    "to": 679
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "common",
    "type": "module"
  }, {
    "id": 2,
    "text": "struct-test-gen",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function char(x) return char_(x % 256) end",
    "type": "function"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "local function eq(a,b)\r\n   if a == b then return true end\r\n   local t = type(a)\r\n   if t ~= type(b) then return false end\r\n   if t ~= \"table\" then return false end\r\n\r\n   for k,av in pairs(a) do\r\n      local bv = b[k]\r\n      if not eq(av,bv) then\r\n\t return false\r\n      end\r\n   end\r\n   for k,bv in pairs(b) do\r\n      local av = a[k]\r\n      if not eq(av,bv) then\r\n\t return false\r\n      end\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "if a == b then return true end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "local t = type(a)",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "if t ~= type(b) then return false end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "if t ~= \"table\" then return false end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "for k,av in pairs(a) do\r\n      local bv = b[k]\r\n      if not eq(av,bv) then\r\n\t return false\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 11,
    "text": "local bv = b[k]",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "if not eq(av,bv) then\r\n\t return false\r\n      end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "for k,bv in pairs(b) do\r\n      local av = a[k]\r\n      if not eq(av,bv) then\r\n\t return false\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 14,
    "text": "local av = a[k]",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function() return \"nil\" end",
    "type": "function"
  }, {
    "id": 17,
    "text": "function dump.string(s) return (\"%q\"):format(s) end",
    "type": "function"
  }, {
    "id": 18,
    "text": "function dump.boolean(b) return tostring(b) end",
    "type": "function"
  }, {
    "id": 19,
    "text": "function dump.number(x)\r\n   local m, e = math.frexp(x)\t\t--0.5 <= m <= 1, e an int\r\n   for i=1,53 do\t\t\t--scale m to an integer\r\n      if floor(m) == m then break end\r\n      m = m*2\r\n      e = e - 1\r\n   end\r\n\r\n   if e == 0 then return (\"%.0f\"):format(m) end\r\n\r\n   local op = e < 0 and \"/\" or \"*\"\r\n   e = math.abs(e)\r\n   local exp = e > 1 and \"2^\"..e or \"2\"\r\n   return (\"%.0f%s%s\"):format(m, op, exp)\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "local m, e = math.frexp(x)",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "for i=1,53 do\t\t\t--scale m to an integer\r\n      if floor(m) == m then break end\r\n      m = m*2\r\n      e = e - 1\r\n   end",
    "type": "statement:numericfor"
  }, {
    "id": 22,
    "text": "if floor(m) == m then break end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "m = m*2",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "e = e - 1",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "if e == 0 then return (\"%.0f\"):format(m) end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "local op = e < 0 and \"/\" or \"*\"",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "e = math.abs(e)",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "local exp = e > 1 and \"2^\"..e or \"2\"",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function dump.table(t)\r\n   local dumped = {}\r\n\r\n   local pieces = {}\r\n   local function push(x) table.insert(pieces, x) end\r\n\r\n   push(\"{\")\r\n\r\n   for i, v in ipairs(t) do\r\n      if #pieces > 1 then push(\", \") end\r\n      push(dump(v))\r\n      dumped[i] = true\r\n   end\r\n\r\n   for k,v in pairs(t) do\r\n      if not dumped[k] then\r\n\t if #pieces > 1 then push(\", \") end\r\n\t if type(k) == \"string\" and k:match(\"^%a[a-zA-Z0-9_]*$\") then\r\n\t    push(k)\r\n\t else\r\n\t    push(\"[\")\r\n\t    push(dump(k))\r\n\t    push(\"]\")\r\n\t end\r\n\t push(\"=\")\r\n\t push(dump(v))\r\n      end\r\n   end\r\n\r\n   push(\"}\")\r\n   return table.concat(pieces)\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "local dumped = {}",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "local pieces = {}",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "local function push(x) table.insert(pieces, x) end",
    "type": "statement:localfunction"
  }, {
    "id": 34,
    "text": "table.insert(pieces, x)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "push(\"{\")",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "for i, v in ipairs(t) do\r\n      if #pieces > 1 then push(\", \") end\r\n      push(dump(v))\r\n      dumped[i] = true\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 37,
    "text": "if #pieces > 1 then push(\", \") end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "push(\", \")",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "push(dump(v))",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "dumped[i] = true",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "for k,v in pairs(t) do\r\n      if not dumped[k] then\r\n\t if #pieces > 1 then push(\", \") end\r\n\t if type(k) == \"string\" and k:match(\"^%a[a-zA-Z0-9_]*$\") then\r\n\t    push(k)\r\n\t else\r\n\t    push(\"[\")\r\n\t    push(dump(k))\r\n\t    push(\"]\")\r\n\t end\r\n\t push(\"=\")\r\n\t push(dump(v))\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 42,
    "text": "if not dumped[k] then\r\n\t if #pieces > 1 then push(\", \") end\r\n\t if type(k) == \"string\" and k:match(\"^%a[a-zA-Z0-9_]*$\") then\r\n\t    push(k)\r\n\t else\r\n\t    push(\"[\")\r\n\t    push(dump(k))\r\n\t    push(\"]\")\r\n\t end\r\n\t push(\"=\")\r\n\t push(dump(v))\r\n      end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "if type(k) == \"string\" and k:match(\"^%a[a-zA-Z0-9_]*$\") then\r\n\t    push(k)\r\n\t else\r\n\t    push(\"[\")\r\n\t    push(dump(k))\r\n\t    push(\"]\")\r\n\t end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "push(k)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "push(\"[\")",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "push(dump(k))",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "push(\"]\")",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "push(\"=\")",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "push(\"}\")",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "local function push(x) table.insert(pieces, x) end",
    "type": "function"
  }, {
    "id": 52,
    "text": "local function loop(t,...)\r\n\t    if nil == t then return accu end\r\n\t    list.merge(accu, t)\r\n\t    return loop(...)\r\n\t end",
    "type": "function"
  }, {
    "id": 53,
    "text": "if nil == t then return accu end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "list.merge(accu, t)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "local function make_rand(seed)\r\n\r\n   local s10, s11, s12 = 12345,12345,12345\r\n   local s20, s21, s22 = 12345,12345,12345\r\n\r\n   local function rand()\r\n      -- Return the next random number in the range [0,4294967087).\r\n      local p1 = (1403580*s11 - 810728*s10) % 4294967087\r\n      local p2 = (527612*s22 - 1370589*s20) % 4294944443\r\n      s10,s11,s12 = s11,s12,p1\r\n      s20,s21,s22 = s21,s22,p2\r\n      return (p1 - p2) % 4294967087\r\n   end\r\n\r\n   if seed then\r\n      seed = tonumber(seed) or 12345\r\n      local m = 4294967087\r\n      local a = seed % 4294967087\r\n      a = a==a and a or 12345\r\n      s10,s11,s12,s20,s21,s22 = a,a+1,a+2,a+3,a+4,a+5 -- not all zero\r\n      rand(); rand(); rand();\t-- pump out the seed.\r\n   end\r\n\r\n   local frexp = math.frexp\r\n\r\n   local function rand52()\r\n      local hi,lo = rand(), rand()\r\n      local m,e = frexp(hi * 4294967087 + lo) -- 0.5 <= m < 1\r\n      local t = m*2^53 - 2^52\t-- map mantissa to 0 <= t < 2^52 range\r\n      return t\r\n   end\r\n\r\n   return rand52\r\nend",
    "type": "function"
  }, {
    "id": 57,
    "text": "local s10, s11, s12 = 12345,12345,12345",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "local s20, s21, s22 = 12345,12345,12345",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "local function rand()\r\n      -- Return the next random number in the range [0,4294967087).\r\n      local p1 = (1403580*s11 - 810728*s10) % 4294967087\r\n      local p2 = (527612*s22 - 1370589*s20) % 4294944443\r\n      s10,s11,s12 = s11,s12,p1\r\n      s20,s21,s22 = s21,s22,p2\r\n      return (p1 - p2) % 4294967087\r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 60,
    "text": "local p1 = (1403580*s11 - 810728*s10) % 4294967087",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "local p2 = (527612*s22 - 1370589*s20) % 4294944443",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "s10,s11,s12 = s11,s12,p1",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "s20,s21,s22 = s21,s22,p2",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "if seed then\r\n      seed = tonumber(seed) or 12345\r\n      local m = 4294967087\r\n      local a = seed % 4294967087\r\n      a = a==a and a or 12345\r\n      s10,s11,s12,s20,s21,s22 = a,a+1,a+2,a+3,a+4,a+5 -- not all zero\r\n      rand(); rand(); rand();\t-- pump out the seed.\r\n   end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "seed = tonumber(seed) or 12345",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "local m = 4294967087",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "local a = seed % 4294967087",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "a = a==a and a or 12345",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "s10,s11,s12,s20,s21,s22 = a,a+1,a+2,a+3,a+4,a+5",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "rand()",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "local frexp = math.frexp",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "local function rand52()\r\n      local hi,lo = rand(), rand()\r\n      local m,e = frexp(hi * 4294967087 + lo) -- 0.5 <= m < 1\r\n      local t = m*2^53 - 2^52\t-- map mantissa to 0 <= t < 2^52 range\r\n      return t\r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 73,
    "text": "local hi,lo = rand(), rand()",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "local m,e = frexp(hi * 4294967087 + lo)",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "local t = m*2^53 - 2^52",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "local function rand()\r\n      -- Return the next random number in the range [0,4294967087).\r\n      local p1 = (1403580*s11 - 810728*s10) % 4294967087\r\n      local p2 = (527612*s22 - 1370589*s20) % 4294944443\r\n      s10,s11,s12 = s11,s12,p1\r\n      s20,s21,s22 = s21,s22,p2\r\n      return (p1 - p2) % 4294967087\r\n   end",
    "type": "function"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "local function rand52()\r\n      local hi,lo = rand(), rand()\r\n      local m,e = frexp(hi * 4294967087 + lo) -- 0.5 <= m < 1\r\n      local t = m*2^53 - 2^52\t-- map mantissa to 0 <= t < 2^52 range\r\n      return t\r\n   end",
    "type": "function"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "local function byte_rand(rand)\r\n   return function () return rand() % 256 end\r\nend",
    "type": "function"
  }, {
    "id": 82,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 83,
    "text": "local function bool_rand(rand)\r\n   return function () return rand() % 2 == 0 end\r\nend",
    "type": "function"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "local function char_rand(rand)\r\n   return function () return char(rand()) end\r\nend",
    "type": "function"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "local function clamped_rand(rand, lo, hi)\r\n   local wid = hi - lo + 1\r\n   return function () return lo + (rand() % wid) end\r\nend",
    "type": "function"
  }, {
    "id": 88,
    "text": "local wid = hi - lo + 1",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 90,
    "text": "local function string_rand(rand, minlen, maxlen)\r\n   minlen = minlen or 0\r\n   maxlen = maxlen or 512\r\n   local gen_len = clamped_rand(rand, minlen, maxlen)\r\n   local gen_char = char_rand(clamped_rand(rand, 66, 90))\r\n   return function (len)\r\n\t     len = len or gen_len()\r\n\t     return table.concat(list.map(list.range(len), gen_char))\r\n\t  end\r\nend",
    "type": "function"
  }, {
    "id": 91,
    "text": "minlen = minlen or 0",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "maxlen = maxlen or 512",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "local gen_len = clamped_rand(rand, minlen, maxlen)",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "local gen_char = char_rand(clamped_rand(rand, 66, 90))",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "len = len or gen_len()",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "local function int_to_bytes_le(value, nbytes)\r\n   local t = {}\r\n   for i=1,nbytes do\r\n      local r = value % 256\r\n      t[i] = r\r\n      value = (value - r) / 256\r\n   end\r\n   return t\r\nend",
    "type": "function"
  }, {
    "id": 98,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 99,
    "text": "for i=1,nbytes do\r\n      local r = value % 256\r\n      t[i] = r\r\n      value = (value - r) / 256\r\n   end",
    "type": "statement:numericfor"
  }, {
    "id": 100,
    "text": "local r = value % 256",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "t[i] = r",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "value = (value - r) / 256",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 104,
    "text": "local function keys(tab)\r\n   local ks = {}\r\n   for k,_ in pairs(tab) do table.insert(ks, k) end\r\n   return ks\r\nend",
    "type": "function"
  }, {
    "id": 105,
    "text": "local ks = {}",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "for k,_ in pairs(tab) do table.insert(ks, k) end",
    "type": "statement:genericfor"
  }, {
    "id": 107,
    "text": "table.insert(ks, k)",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 109,
    "text": "local function bless(obj, class)\t--make obj an instance of class\r\n   return setmetatable(obj, {__index = class})\r\nend",
    "type": "function"
  }, {
    "id": 110,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 111,
    "text": "local function as_hex(str)\r\n   if not str then return nil end\r\n   return str:gsub('.', function(c)\r\n\t\t\t   return string.format(\"%02X \", c:byte())\r\n\t\t\tend)\r\nend",
    "type": "function"
  }, {
    "id": 112,
    "text": "if not str then return nil end",
    "type": "statement:if"
  }, {
    "id": 113,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 114,
    "text": "local function perform_write_test(test, endian)\r\n   endian = endian or MACHINE_ENDIAN\r\n\r\n   local format = test:get_format(endian)\r\n   local want_data = test:get_data()\r\n   local values = test:get_values()\r\n\r\n   if PREFIX_ENDIAN then\r\n      format = \"=\" .. PREFIX_ENDIAN_SEP .. format\r\n   end\r\n   \r\n   local pcall = pcall\r\n   if not PROTECT_STRUCT then\r\n      pcall = function (f,...) return true, f(...) end\r\n   end\r\n\r\n   local errmsg = nil\r\n\r\n   local success, got_data = pcall(struct.pack, format, values)\r\n   if not success then\r\n      errmsg = got_data\r\n      got_data = nil\r\n   end\r\n\r\n   success = success and eq(got_data, want_data)\r\n\r\n   record(\"random write test\", success, dump {\r\n      got_data = got_data and as_hex(got_data) or nil,\r\n      want_data = as_hex(want_data),\r\n      format = format,\r\n      values = values,\r\n      error = errmsg,\r\n      ok = success\r\n   })\r\nend",
    "type": "function"
  }, {
    "id": 115,
    "text": "endian = endian or MACHINE_ENDIAN",
    "type": "statement:assign"
  }, {
    "id": 116,
    "text": "local format = test:get_format(endian)",
    "type": "statement:localassign"
  }, {
    "id": 117,
    "text": "local want_data = test:get_data()",
    "type": "statement:localassign"
  }, {
    "id": 118,
    "text": "local values = test:get_values()",
    "type": "statement:localassign"
  }, {
    "id": 119,
    "text": "if PREFIX_ENDIAN then\r\n      format = \"=\" .. PREFIX_ENDIAN_SEP .. format\r\n   end",
    "type": "statement:if"
  }, {
    "id": 120,
    "text": "format = \"=\" .. PREFIX_ENDIAN_SEP .. format",
    "type": "statement:assign"
  }, {
    "id": 121,
    "text": "local pcall = pcall",
    "type": "statement:localassign"
  }, {
    "id": 122,
    "text": "if not PROTECT_STRUCT then\r\n      pcall = function (f,...) return true, f(...) end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 123,
    "text": "pcall = function (f,...) return true, f(...) end",
    "type": "statement:assign"
  }, {
    "id": 124,
    "text": "local errmsg = nil",
    "type": "statement:localassign"
  }, {
    "id": 125,
    "text": "local success, got_data = pcall(struct.pack, format, values)",
    "type": "statement:localassign"
  }, {
    "id": 126,
    "text": "if not success then\r\n      errmsg = got_data\r\n      got_data = nil\r\n   end",
    "type": "statement:if"
  }, {
    "id": 127,
    "text": "errmsg = got_data",
    "type": "statement:assign"
  }, {
    "id": 128,
    "text": "got_data = nil",
    "type": "statement:assign"
  }, {
    "id": 129,
    "text": "success = success and eq(got_data, want_data)",
    "type": "statement:assign"
  }, {
    "id": 130,
    "text": "record(\"random write test\", success, dump {\r\n      got_data = got_data and as_hex(got_data) or nil,\r\n      want_data = as_hex(want_data),\r\n      format = format,\r\n      values = values,\r\n      error = errmsg,\r\n      ok = success\r\n   })",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 132,
    "text": "function (f,...) return true, f(...) end",
    "type": "function"
  }, {
    "id": 133,
    "text": "local function perform_read_test(test, endian)\r\n   endian = endian or MACHINE_ENDIAN\r\n\r\n   local format = test:get_format(endian)\r\n   local from_data = test:get_data()\r\n   local want_values = test:get_values()\r\n\r\n   if PREFIX_ENDIAN then\r\n      format = \"=\" .. PREFIX_ENDIAN_SEP .. format\r\n   end\r\n   \r\n   local pcall = pcall\r\n   if not PROTECT_STRUCT then\r\n      pcall = function (f,...) return true, f(...) end\r\n   end\r\n\r\n   local errmsg = nil\r\n\r\n   local success, got_values = pcall(struct.unpack, format, from_data)\r\n   if not success then\r\n      errmsg = got_values\r\n      got_values = nil\r\n   end\r\n\r\n   success = success and eq(got_values, want_values)\r\n\r\n   record(\"random read test\", success, dump {\r\n      got_values = got_values,\r\n      want_values = want_values,\r\n      from_data = as_hex(from_data),\r\n      format = format,\r\n      error = errmsg,\r\n      ok = success\r\n   })\r\nend",
    "type": "function"
  }, {
    "id": 134,
    "text": "local from_data = test:get_data()",
    "type": "statement:localassign"
  }, {
    "id": 135,
    "text": "local want_values = test:get_values()",
    "type": "statement:localassign"
  }, {
    "id": 136,
    "text": "local success, got_values = pcall(struct.unpack, format, from_data)",
    "type": "statement:localassign"
  }, {
    "id": 137,
    "text": "if not success then\r\n      errmsg = got_values\r\n      got_values = nil\r\n   end",
    "type": "statement:if"
  }, {
    "id": 138,
    "text": "errmsg = got_values",
    "type": "statement:assign"
  }, {
    "id": 139,
    "text": "got_values = nil",
    "type": "statement:assign"
  }, {
    "id": 140,
    "text": "success = success and eq(got_values, want_values)",
    "type": "statement:assign"
  }, {
    "id": 141,
    "text": "record(\"random read test\", success, dump {\r\n      got_values = got_values,\r\n      want_values = want_values,\r\n      from_data = as_hex(from_data),\r\n      format = format,\r\n      error = errmsg,\r\n      ok = success\r\n   })",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 143,
    "text": "function (f,...) return true, f(...) end",
    "type": "function"
  }, {
    "id": 144,
    "text": "local function zero_pad_to_length(s, len)\r\n   local pad_len = len - #s\r\n   if pad_len <= 0 then\r\n      return s\r\n   end\r\n   return s .. (\"\\0\"):rep(pad_len)\r\nend",
    "type": "function"
  }, {
    "id": 145,
    "text": "local pad_len = len - #s",
    "type": "statement:localassign"
  }, {
    "id": 146,
    "text": "if pad_len <= 0 then\r\n      return s\r\n   end",
    "type": "statement:if"
  }, {
    "id": 147,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 148,
    "text": "local function cruft_pad_to_length(s, len)\r\n   local cruft = \"cruft\"\r\n   while #s < len do\r\n      local ix = 1 + #s % #cruft\r\n      s = s .. cruft:sub(ix,ix)\r\n   end\r\n   return s\r\nend",
    "type": "function"
  }, {
    "id": 149,
    "text": "local cruft = \"cruft\"",
    "type": "statement:localassign"
  }, {
    "id": 150,
    "text": "while #s < len do\r\n      local ix = 1 + #s % #cruft\r\n      s = s .. cruft:sub(ix,ix)\r\n   end",
    "type": "statement:while"
  }, {
    "id": 151,
    "text": "local ix = 1 + #s % #cruft",
    "type": "statement:localassign"
  }, {
    "id": 152,
    "text": "s = s .. cruft:sub(ix,ix)",
    "type": "statement:assign"
  }, {
    "id": 153,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 154,
    "text": "function EmptyGen.empty(state) return EmptyTest:new() end",
    "type": "function"
  }, {
    "id": 155,
    "text": "function EmptyGen.space(state) return EmptyTest:new{ format = \" \" } end",
    "type": "function"
  }, {
    "id": 156,
    "text": "function EmptyGen.tab(state) return EmptyTest:new{ format = \"\\t\" } end",
    "type": "function"
  }, {
    "id": 157,
    "text": "function EmptyGen.nl(state) return EmptyTest:new{ format = \"\\n\" } end",
    "type": "function"
  }, {
    "id": 158,
    "text": "function EmptyGen.big_endian(state)\r\n      state.endian = \">\"\r\n      local self = EmptyTest:new()\r\n      self.endian = state.endian\r\n      return self\r\n   end",
    "type": "function"
  }, {
    "id": 159,
    "text": "state.endian = \">\"",
    "type": "statement:assign"
  }, {
    "id": 160,
    "text": "local self = EmptyTest:new()",
    "type": "statement:localassign"
  }, {
    "id": 161,
    "text": "self.endian = state.endian",
    "type": "statement:assign"
  }, {
    "id": 162,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 163,
    "text": "function EmptyGen.little_endian(state)\r\n      state.endian = \"<\"\r\n      local self = EmptyTest:new()\r\n      self.endian = state.endian\r\n      return self\r\n   end",
    "type": "function"
  }, {
    "id": 164,
    "text": "state.endian = \"<\"",
    "type": "statement:assign"
  }, {
    "id": 165,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 166,
    "text": "local function gen_random_leaf_for_write(state, w, f)\r\n   local i = 1 + state.rand() % #LeafGen\r\n   local gen = LeafGen[i]\r\n   return gen(state, w or state.width, f or state.precision)\r\nend",
    "type": "function"
  }, {
    "id": 167,
    "text": "local i = 1 + state.rand() % #LeafGen",
    "type": "statement:localassign"
  }, {
    "id": 168,
    "text": "local gen = LeafGen[i]",
    "type": "statement:localassign"
  }, {
    "id": 169,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 170,
    "text": "local function gen_random_leaf_for_read(state, w, f)\r\n   local write,read = gen_random_leaf_for_write(state, w, f)\r\n   read = read or write\r\n   return read\r\nend",
    "type": "function"
  }, {
    "id": 171,
    "text": "local write,read = gen_random_leaf_for_write(state, w, f)",
    "type": "statement:localassign"
  }, {
    "id": 172,
    "text": "read = read or write",
    "type": "statement:assign"
  }, {
    "id": 173,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 174,
    "text": "local function gen_random_test(state, w, f)\r\n   if state.depth >= CONF.MAX_DEPTH then\r\n      return gen_random_leaf(state, w, f)\r\n   end\r\n   state.depth = state.depth + 1\r\n   local i = 1 + state.rand() % #TestGen\r\n   local gen = TestGen[i]\r\n   local t = gen(state, w, f)\r\n   state.depth = state.depth - 1\r\n   return t\r\nend",
    "type": "function"
  }, {
    "id": 175,
    "text": "if state.depth >= CONF.MAX_DEPTH then\r\n      return gen_random_leaf(state, w, f)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 176,
    "text": "state.depth = state.depth + 1",
    "type": "statement:assign"
  }, {
    "id": 177,
    "text": "local i = 1 + state.rand() % #TestGen",
    "type": "statement:localassign"
  }, {
    "id": 178,
    "text": "local gen = TestGen[i]",
    "type": "statement:localassign"
  }, {
    "id": 179,
    "text": "local t = gen(state, w, f)",
    "type": "statement:localassign"
  }, {
    "id": 180,
    "text": "state.depth = state.depth - 1",
    "type": "statement:assign"
  }, {
    "id": 181,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 182,
    "text": "local function main_write()\r\n    test.group \"randomly generated write tests\"\r\n   local state = State:new(CONF.SEED or os.time())\r\n   state.width = CONF.WIDTH\r\n   state.precision = CONF.PRECISION\r\n\r\n   gen_random_leaf = gen_random_leaf_for_write\r\n\r\n   for k,gen in pairs(EmptyGen) do\r\n      for _,e in ipairs{\"<\",\">\"} do\r\n\t state.endian = e\r\n\t local t = gen(state, state.width, state.precision)\r\n\t perform_write_test(t, \"=\")\r\n      end\r\n   end\r\n\r\n   for k,gen in pairs(ScalarGen) do\r\n      for _,e in ipairs{\"<\",\">\"} do\r\n\t state.endian = e\r\n\t local t = gen(state, state.width, state.precision)\r\n\t perform_write_test(t, \"=\")\r\n      end\r\n   end\r\n\r\n   for i=1,CONF.NROF_TESTS do\r\n      for _,e in ipairs{\"<\",\">\"} do\r\n\t state.endian = e\r\n\t local t = gen_random_test(state, state.width, state.precision)\r\n\t perform_write_test(t)\r\n      end\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 183,
    "text": "test.group \"randomly generated write tests\"",
    "type": "statement:functioncall"
  }, {
    "id": 184,
    "text": "local state = State:new(CONF.SEED or os.time())",
    "type": "statement:localassign"
  }, {
    "id": 185,
    "text": "state.width = CONF.WIDTH",
    "type": "statement:assign"
  }, {
    "id": 186,
    "text": "state.precision = CONF.PRECISION",
    "type": "statement:assign"
  }, {
    "id": 187,
    "text": "gen_random_leaf = gen_random_leaf_for_write",
    "type": "statement:assign"
  }, {
    "id": 188,
    "text": "for k,gen in pairs(EmptyGen) do\r\n      for _,e in ipairs{\"<\",\">\"} do\r\n\t state.endian = e\r\n\t local t = gen(state, state.width, state.precision)\r\n\t perform_write_test(t, \"=\")\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 189,
    "text": "for _,e in ipairs{\"<\",\">\"} do\r\n\t state.endian = e\r\n\t local t = gen(state, state.width, state.precision)\r\n\t perform_write_test(t, \"=\")\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 190,
    "text": "state.endian = e",
    "type": "statement:assign"
  }, {
    "id": 191,
    "text": "local t = gen(state, state.width, state.precision)",
    "type": "statement:localassign"
  }, {
    "id": 192,
    "text": "perform_write_test(t, \"=\")",
    "type": "statement:functioncall"
  }, {
    "id": 193,
    "text": "for k,gen in pairs(ScalarGen) do\r\n      for _,e in ipairs{\"<\",\">\"} do\r\n\t state.endian = e\r\n\t local t = gen(state, state.width, state.precision)\r\n\t perform_write_test(t, \"=\")\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 194,
    "text": "for i=1,CONF.NROF_TESTS do\r\n      for _,e in ipairs{\"<\",\">\"} do\r\n\t state.endian = e\r\n\t local t = gen_random_test(state, state.width, state.precision)\r\n\t perform_write_test(t)\r\n      end\r\n   end",
    "type": "statement:numericfor"
  }, {
    "id": 195,
    "text": "for _,e in ipairs{\"<\",\">\"} do\r\n\t state.endian = e\r\n\t local t = gen_random_test(state, state.width, state.precision)\r\n\t perform_write_test(t)\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 196,
    "text": "local t = gen_random_test(state, state.width, state.precision)",
    "type": "statement:localassign"
  }, {
    "id": 197,
    "text": "perform_write_test(t)",
    "type": "statement:functioncall"
  }, {
    "id": 198,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 199,
    "text": "local function main_read()\r\n    test.group \"randomly generated read tests\"\r\n   local state = State:new(CONF.SEED or os.time())\r\n   state.width = CONF.WIDTH\r\n   state.precision = CONF.PRECISION\r\n\r\n   gen_random_leaf = gen_random_leaf_for_read\r\n\r\n   for k,gen in pairs(EmptyGen) do\r\n      for _,e in ipairs{\"<\",\">\"} do\r\n\t state.endian = e\r\n\t local w,r = gen(state, state.width, state.precision)\r\n\t local t = r or w\r\n\t perform_read_test(t, \"=\")\r\n      end\r\n   end\r\n\r\n   for k,gen in pairs(ScalarGen) do\r\n      for _,e in ipairs{\"<\",\">\"} do\r\n\t state.endian = e\r\n\t local w,r = gen(state, state.width, state.precision)\r\n\t local t = r or w\r\n\t perform_read_test(t, \"=\")\r\n      end\r\n   end\r\n\r\n   for i=1,CONF.NROF_TESTS do\r\n      for _,e in ipairs{\"<\",\">\"} do\r\n\t state.endian = e\r\n\t local t = gen_random_test(state, state.width, state.precision)\r\n\t perform_read_test(t)\r\n      end\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 200,
    "text": "test.group \"randomly generated read tests\"",
    "type": "statement:functioncall"
  }, {
    "id": 201,
    "text": "gen_random_leaf = gen_random_leaf_for_read",
    "type": "statement:assign"
  }, {
    "id": 202,
    "text": "for k,gen in pairs(EmptyGen) do\r\n      for _,e in ipairs{\"<\",\">\"} do\r\n\t state.endian = e\r\n\t local w,r = gen(state, state.width, state.precision)\r\n\t local t = r or w\r\n\t perform_read_test(t, \"=\")\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 203,
    "text": "for _,e in ipairs{\"<\",\">\"} do\r\n\t state.endian = e\r\n\t local w,r = gen(state, state.width, state.precision)\r\n\t local t = r or w\r\n\t perform_read_test(t, \"=\")\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 204,
    "text": "local w,r = gen(state, state.width, state.precision)",
    "type": "statement:localassign"
  }, {
    "id": 205,
    "text": "local t = r or w",
    "type": "statement:localassign"
  }, {
    "id": 206,
    "text": "perform_read_test(t, \"=\")",
    "type": "statement:functioncall"
  }, {
    "id": 207,
    "text": "for k,gen in pairs(ScalarGen) do\r\n      for _,e in ipairs{\"<\",\">\"} do\r\n\t state.endian = e\r\n\t local w,r = gen(state, state.width, state.precision)\r\n\t local t = r or w\r\n\t perform_read_test(t, \"=\")\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 208,
    "text": "for i=1,CONF.NROF_TESTS do\r\n      for _,e in ipairs{\"<\",\">\"} do\r\n\t state.endian = e\r\n\t local t = gen_random_test(state, state.width, state.precision)\r\n\t perform_read_test(t)\r\n      end\r\n   end",
    "type": "statement:numericfor"
  }, {
    "id": 209,
    "text": "for _,e in ipairs{\"<\",\">\"} do\r\n\t state.endian = e\r\n\t local t = gen_random_test(state, state.width, state.precision)\r\n\t perform_read_test(t)\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 210,
    "text": "perform_read_test(t)",
    "type": "statement:functioncall"
  }, {
    "id": 211,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 212,
    "text": "local function opt_of_keyword(k)\r\n      local o = k:lower():gsub(\"_\", \"-\")\r\n      return o\r\n   end",
    "type": "function"
  }, {
    "id": 213,
    "text": "local o = k:lower():gsub(\"_\", \"-\")",
    "type": "statement:localassign"
  }, {
    "id": 214,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 215,
    "text": "function (self, value)\r\n\t\t      local t = type(value)\r\n\t\t      local f = dump[t]\r\n\t\t      assert(f, \"don't know how to dump \"..\r\n\t\t\t     \"values of type \"..t)\r\n\t\t      return f(value)\r\n\t\t   end",
    "type": "function"
  }, {
    "id": 216,
    "text": "local t = type(value)",
    "type": "statement:localassign"
  }, {
    "id": 217,
    "text": "local f = dump[t]",
    "type": "statement:localassign"
  }, {
    "id": 218,
    "text": "assert(f, \"don't know how to dump \"..\r\n\t\t\t     \"values of type \"..t)",
    "type": "statement:functioncall"
  }, {
    "id": 219,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 220,
    "text": "function (t)\r\n\t local out = {}\r\n\t local n = #t\r\n\t for i=1,n do\r\n\t    local j = n-i+1\r\n\t    out[j] = t[i]\r\n\t end\r\n\t return out\r\n      end",
    "type": "function"
  }, {
    "id": 221,
    "text": "local out = {}",
    "type": "statement:localassign"
  }, {
    "id": 222,
    "text": "local n = #t",
    "type": "statement:localassign"
  }, {
    "id": 223,
    "text": "for i=1,n do\r\n\t    local j = n-i+1\r\n\t    out[j] = t[i]\r\n\t end",
    "type": "statement:numericfor"
  }, {
    "id": 224,
    "text": "local j = n-i+1",
    "type": "statement:localassign"
  }, {
    "id": 225,
    "text": "out[j] = t[i]",
    "type": "statement:assign"
  }, {
    "id": 226,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 227,
    "text": "function (t, f)\r\n\t for i,v in ipairs(t) do  f(v)  end\r\n\t return t\r\n      end",
    "type": "function"
  }, {
    "id": 228,
    "text": "for i,v in ipairs(t) do  f(v)  end",
    "type": "statement:genericfor"
  }, {
    "id": 229,
    "text": "f(v)",
    "type": "statement:functioncall"
  }, {
    "id": 230,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 231,
    "text": "function (t, f)\r\n\t local out = {}\r\n\t for i,v in ipairs(t) do  out[i] = f(v)  end\r\n\t return out\r\n      end",
    "type": "function"
  }, {
    "id": 232,
    "text": "for i,v in ipairs(t) do  out[i] = f(v)  end",
    "type": "statement:genericfor"
  }, {
    "id": 233,
    "text": "out[i] = f(v)",
    "type": "statement:assign"
  }, {
    "id": 234,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 235,
    "text": "function (t, f, accu)\r\n\t for i,v in ipairs(t) do  accu = f(v, accu)  end\r\n\t return accu\r\n      end",
    "type": "function"
  }, {
    "id": 236,
    "text": "for i,v in ipairs(t) do  accu = f(v, accu)  end",
    "type": "statement:genericfor"
  }, {
    "id": 237,
    "text": "accu = f(v, accu)",
    "type": "statement:assign"
  }, {
    "id": 238,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 239,
    "text": "function (dst, src)\r\n\t local merged = {}\r\n\t for k,v in ipairs(src) do --append the array part\r\n\t    table.insert(dst, v)\r\n\t    merged[k] = true\r\n\t end\r\n\t for k,v in pairs(src) do --overwrite the hash part\r\n\t    if not merged[k] then\r\n\t       dst[k] = v\r\n\t    end\r\n\t end\r\n\t return dst\r\n      end",
    "type": "function"
  }, {
    "id": 240,
    "text": "local merged = {}",
    "type": "statement:localassign"
  }, {
    "id": 241,
    "text": "for k,v in ipairs(src) do --append the array part\r\n\t    table.insert(dst, v)\r\n\t    merged[k] = true\r\n\t end",
    "type": "statement:genericfor"
  }, {
    "id": 242,
    "text": "table.insert(dst, v)",
    "type": "statement:functioncall"
  }, {
    "id": 243,
    "text": "merged[k] = true",
    "type": "statement:assign"
  }, {
    "id": 244,
    "text": "for k,v in pairs(src) do --overwrite the hash part\r\n\t    if not merged[k] then\r\n\t       dst[k] = v\r\n\t    end\r\n\t end",
    "type": "statement:genericfor"
  }, {
    "id": 245,
    "text": "if not merged[k] then\r\n\t       dst[k] = v\r\n\t    end",
    "type": "statement:if"
  }, {
    "id": 246,
    "text": "dst[k] = v",
    "type": "statement:assign"
  }, {
    "id": 247,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 248,
    "text": "function (n)\r\n\t local t={}\r\n\t for i=1,n do t[i] = 0 end\r\n\t return t\r\n      end",
    "type": "function"
  }, {
    "id": 249,
    "text": "local t={}",
    "type": "statement:localassign"
  }, {
    "id": 250,
    "text": "for i=1,n do t[i] = 0 end",
    "type": "statement:numericfor"
  }, {
    "id": 251,
    "text": "t[i] = 0",
    "type": "statement:assign"
  }, {
    "id": 252,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 253,
    "text": "function (first, last, step)\r\n\t local t = {}\r\n\t if nil == last then\r\n\t    first,last,step = 1,first,step\r\n\t end\r\n\t step = step or 1\r\n\t for i=first,last,step do t[#t+1] = i end\r\n\t return t\r\n      end",
    "type": "function"
  }, {
    "id": 254,
    "text": "if nil == last then\r\n\t    first,last,step = 1,first,step\r\n\t end",
    "type": "statement:if"
  }, {
    "id": 255,
    "text": "first,last,step = 1,first,step",
    "type": "statement:assign"
  }, {
    "id": 256,
    "text": "step = step or 1",
    "type": "statement:assign"
  }, {
    "id": 257,
    "text": "for i=first,last,step do t[#t+1] = i end",
    "type": "statement:numericfor"
  }, {
    "id": 258,
    "text": "t[#t+1] = i",
    "type": "statement:assign"
  }, {
    "id": 259,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 260,
    "text": "function (...)\r\n\t local accu = {}\r\n\t local function loop(t,...)\r\n\t    if nil == t then return accu end\r\n\t    list.merge(accu, t)\r\n\t    return loop(...)\r\n\t end\r\n\t return loop(...)\r\n      end",
    "type": "function"
  }, {
    "id": 261,
    "text": "local accu = {}",
    "type": "statement:localassign"
  }, {
    "id": 262,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 263,
    "text": "function (t, count)\r\n\t count = count or 0\r\n\t local accu = {}\r\n\t for i=1,count do list.merge(accu, t) end\r\n\t return accu\r\n      end",
    "type": "function"
  }, {
    "id": 264,
    "text": "count = count or 0",
    "type": "statement:assign"
  }, {
    "id": 265,
    "text": "for i=1,count do list.merge(accu, t) end",
    "type": "statement:numericfor"
  }, {
    "id": 266,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 267,
    "text": "function () return rand() % 256 end",
    "type": "function"
  }, {
    "id": 268,
    "text": "function () return rand() % 2 == 0 end",
    "type": "function"
  }, {
    "id": 269,
    "text": "function () return char(rand()) end",
    "type": "function"
  }, {
    "id": 270,
    "text": "function () return lo + (rand() % wid) end",
    "type": "function"
  }, {
    "id": 271,
    "text": "function (len)\r\n\t     len = len or gen_len()\r\n\t     return table.concat(list.map(list.range(len), gen_char))\r\n\t  end",
    "type": "function"
  }, {
    "id": 272,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 273,
    "text": "function (class, self)\r\n\t return bless(self or {}, class)\r\n      end",
    "type": "function"
  }, {
    "id": 274,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 275,
    "text": "function (self, endian, fmt)\r\n\t local fmt = fmt or self:get_naked()\r\n\t local before, after = self:get_endian()\r\n\t endian = endian or before\r\n\t before = before or endian\r\n\t after = after or before\r\n\t if before ~= endian then\r\n\t    fmt = before..fmt\r\n\t end\r\n\t return fmt, after\r\n      end",
    "type": "function"
  }, {
    "id": 276,
    "text": "local fmt = fmt or self:get_naked()",
    "type": "statement:localassign"
  }, {
    "id": 277,
    "text": "local before, after = self:get_endian()",
    "type": "statement:localassign"
  }, {
    "id": 278,
    "text": "endian = endian or before",
    "type": "statement:assign"
  }, {
    "id": 279,
    "text": "before = before or endian",
    "type": "statement:assign"
  }, {
    "id": 280,
    "text": "after = after or before",
    "type": "statement:assign"
  }, {
    "id": 281,
    "text": "if before ~= endian then\r\n\t    fmt = before..fmt\r\n\t end",
    "type": "statement:if"
  }, {
    "id": 282,
    "text": "fmt = before..fmt",
    "type": "statement:assign"
  }, {
    "id": 283,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 284,
    "text": "function(c)\r\n\t\t\t   return string.format(\"%02X \", c:byte())\r\n\t\t\tend",
    "type": "function"
  }, {
    "id": 285,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 286,
    "text": "function (class, self)\r\n\t    self = Test.new(class, self)\r\n\t    self.is_scalar = true\r\n\t    return self\r\n\t end",
    "type": "function"
  }, {
    "id": 287,
    "text": "self = Test.new(class, self)",
    "type": "statement:assign"
  }, {
    "id": 288,
    "text": "self.is_scalar = true",
    "type": "statement:assign"
  }, {
    "id": 289,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 290,
    "text": "function (self, endian) return self.format end",
    "type": "function"
  }, {
    "id": 291,
    "text": "function (self) return { self.value } end",
    "type": "function"
  }, {
    "id": 292,
    "text": "function (self) return self.data end",
    "type": "function"
  }, {
    "id": 293,
    "text": "function (self) return self.length or 1 end",
    "type": "function"
  }, {
    "id": 294,
    "text": "function (self) return self.endian, self.endian end",
    "type": "function"
  }, {
    "id": 295,
    "text": "function (class, self)\r\n\t self = Test.new(class, self)\r\n\t self.tests = {}\r\n\t return self\r\n      end",
    "type": "function"
  }, {
    "id": 296,
    "text": "self.tests = {}",
    "type": "statement:assign"
  }, {
    "id": 297,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 298,
    "text": "function (self, t)\r\n\t table.insert(self.tests, t)\r\n\t return self\r\n      end",
    "type": "function"
  }, {
    "id": 299,
    "text": "table.insert(self.tests, t)",
    "type": "statement:functioncall"
  }, {
    "id": 300,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 301,
    "text": "function (t) return t:get_data() end",
    "type": "function"
  }, {
    "id": 302,
    "text": "function (self)\r\n\t return table.concat(list.map(self.tests,\r\n\t\t\t\t      function (t) return t:get_data() end))\r\n      end",
    "type": "function"
  }, {
    "id": 303,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 304,
    "text": "function (t) local fmt\r\n\t\t\t\t\t fmt,endian = t:get_format(endian)\r\n\t\t\t\t\t return fmt\r\n\t\t\t\t      end",
    "type": "function"
  }, {
    "id": 305,
    "text": "local fmt",
    "type": "statement:localassign"
  }, {
    "id": 306,
    "text": "fmt,endian = t:get_format(endian)",
    "type": "statement:assign"
  }, {
    "id": 307,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 308,
    "text": "function (self, endian)\r\n\t return table.concat(list.map(self.tests,\r\n\t\t\t\t      function (t) local fmt\r\n\t\t\t\t\t fmt,endian = t:get_format(endian)\r\n\t\t\t\t\t return fmt\r\n\t\t\t\t      end),\r\n\t\t\t     COMPOUND_SEP), endian\r\n      end",
    "type": "function"
  }, {
    "id": 309,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 310,
    "text": "function (self)\r\n\t local n = #(self.tests)\r\n\t if n == 0 then return nil,nil end\r\n\t local before, after\r\n\t for i=1,n do\r\n\t    local b,a = self.tests[i]:get_endian()\r\n\t    before = before or b\r\n\t    after = a or after\r\n\t end\r\n\t return before, after\r\n      end",
    "type": "function"
  }, {
    "id": 311,
    "text": "local n = #(self.tests)",
    "type": "statement:localassign"
  }, {
    "id": 312,
    "text": "if n == 0 then return nil,nil end",
    "type": "statement:if"
  }, {
    "id": 313,
    "text": "local before, after",
    "type": "statement:localassign"
  }, {
    "id": 314,
    "text": "for i=1,n do\r\n\t    local b,a = self.tests[i]:get_endian()\r\n\t    before = before or b\r\n\t    after = a or after\r\n\t end",
    "type": "statement:numericfor"
  }, {
    "id": 315,
    "text": "local b,a = self.tests[i]:get_endian()",
    "type": "statement:localassign"
  }, {
    "id": 316,
    "text": "before = before or b",
    "type": "statement:assign"
  }, {
    "id": 317,
    "text": "after = a or after",
    "type": "statement:assign"
  }, {
    "id": 318,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 319,
    "text": "function (t)\r\n\t\t      list.merge(accu, t:get_values())\r\n\t\t   end",
    "type": "function"
  }, {
    "id": 320,
    "text": "list.merge(accu, t:get_values())",
    "type": "statement:functioncall"
  }, {
    "id": 321,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 322,
    "text": "function (self)\r\n\t local accu = {}\r\n\t list.iter(self.tests,\r\n\t\t   function (t)\r\n\t\t      list.merge(accu, t:get_values())\r\n\t\t   end)\r\n\t return accu\r\n      end",
    "type": "function"
  }, {
    "id": 323,
    "text": "list.iter(self.tests,\r\n\t\t   function (t)\r\n\t\t      list.merge(accu, t:get_values())\r\n\t\t   end)",
    "type": "statement:functioncall"
  }, {
    "id": 324,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 325,
    "text": "function (self)\r\n\t return #(self.tests)\r\n      end",
    "type": "function"
  }, {
    "id": 326,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 327,
    "text": "function (class, self, body)\r\n\t local self = Test.new(class, self)\r\n\t self.body = self.body or body\r\n\t return self\r\n      end",
    "type": "function"
  }, {
    "id": 328,
    "text": "local self = Test.new(class, self)",
    "type": "statement:localassign"
  }, {
    "id": 329,
    "text": "self.body = self.body or body",
    "type": "statement:assign"
  }, {
    "id": 330,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 331,
    "text": "function (self)\r\n\t return self.body:get_naked()\r\n      end",
    "type": "function"
  }, {
    "id": 332,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 333,
    "text": "function (self)\r\n\t return self.body:get_data()\r\n      end",
    "type": "function"
  }, {
    "id": 334,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 335,
    "text": "function (self)\r\n\t return self.body:get_values()\r\n      end",
    "type": "function"
  }, {
    "id": 336,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 337,
    "text": "function (self)\r\n\t return self.body:get_length()\r\n      end",
    "type": "function"
  }, {
    "id": 338,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 339,
    "text": "function (self)\r\n\t return self.body:get_endian()\r\n      end",
    "type": "function"
  }, {
    "id": 340,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 341,
    "text": "function (class, self)\r\n\t self = ProxyTest.new(class, self)\r\n\t assert(self.name, \"NamedTest unnamed\")\r\n\t return self\r\n      end",
    "type": "function"
  }, {
    "id": 342,
    "text": "self = ProxyTest.new(class, self)",
    "type": "statement:assign"
  }, {
    "id": 343,
    "text": "assert(self.name, \"NamedTest unnamed\")",
    "type": "statement:functioncall"
  }, {
    "id": 344,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 345,
    "text": "function (self)\r\n\t return self.name ..\":\" .. self.body:get_naked()\r\n      end",
    "type": "function"
  }, {
    "id": 346,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 347,
    "text": "function (self)\r\n\t local values = self.body:get_values()\r\n\t local key, value\r\n\t for k,v in ipairs(values) do\r\n\t    assert(nil == value,\r\n\t\t   \"NamedTest bound to multiple values\")\r\n\t    value = v\r\n\t    key = k\r\n\t end\r\n\t for k,v in pairs(values) do\r\n\t    assert(nil == value or key == k,\r\n\t\t   \"NamedTest bound to multiple values\")\r\n\t    value = v\r\n\t end\r\n\t assert(nil ~= value, \"NamedTest unbound to a value\")\r\n\t return { [self.name] = value }\r\n      end",
    "type": "function"
  }, {
    "id": 348,
    "text": "local values = self.body:get_values()",
    "type": "statement:localassign"
  }, {
    "id": 349,
    "text": "local key, value",
    "type": "statement:localassign"
  }, {
    "id": 350,
    "text": "for k,v in ipairs(values) do\r\n\t    assert(nil == value,\r\n\t\t   \"NamedTest bound to multiple values\")\r\n\t    value = v\r\n\t    key = k\r\n\t end",
    "type": "statement:genericfor"
  }, {
    "id": 351,
    "text": "assert(nil == value,\r\n\t\t   \"NamedTest bound to multiple values\")",
    "type": "statement:functioncall"
  }, {
    "id": 352,
    "text": "value = v",
    "type": "statement:assign"
  }, {
    "id": 353,
    "text": "key = k",
    "type": "statement:assign"
  }, {
    "id": 354,
    "text": "for k,v in pairs(values) do\r\n\t    assert(nil == value or key == k,\r\n\t\t   \"NamedTest bound to multiple values\")\r\n\t    value = v\r\n\t end",
    "type": "statement:genericfor"
  }, {
    "id": 355,
    "text": "assert(nil == value or key == k,\r\n\t\t   \"NamedTest bound to multiple values\")",
    "type": "statement:functioncall"
  }, {
    "id": 356,
    "text": "assert(nil ~= value, \"NamedTest unbound to a value\")",
    "type": "statement:functioncall"
  }, {
    "id": 357,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 358,
    "text": "function (self, endian)\r\n\t local fmt,after = self.body:get_format(endian)\r\n\t return \"{\"..fmt..\"}\", after\r\n      end",
    "type": "function"
  }, {
    "id": 359,
    "text": "local fmt,after = self.body:get_format(endian)",
    "type": "statement:localassign"
  }, {
    "id": 360,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 361,
    "text": "function (self)\r\n\t return { self.body:get_values() }\r\n      end",
    "type": "function"
  }, {
    "id": 362,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 363,
    "text": "function (self)\r\n\t return 1\r\n      end",
    "type": "function"
  }, {
    "id": 364,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 365,
    "text": "function (self, endian)\r\n\t local fmt,after = self.body:get_format(endian)\r\n\t return \"(\"..fmt..\")\", after\r\n      end",
    "type": "function"
  }, {
    "id": 366,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 367,
    "text": "function (self)\r\n\t return 1\r\n      end",
    "type": "function"
  }, {
    "id": 368,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 369,
    "text": "function (class, self)\r\n\t self = ProxyTest.new(class, self)\r\n\t self.count = self.count or 1\r\n\t return self\r\n      end",
    "type": "function"
  }, {
    "id": 370,
    "text": "self.count = self.count or 1",
    "type": "statement:assign"
  }, {
    "id": 371,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 372,
    "text": "function (self, endian)\r\n\t local before = self.body:get_endian()\r\n\t local fmt, after = self.body:get_format(endian)\r\n\t before = before or endian\r\n\t after = after or before\r\n\t after = self.count > 0 and after or endian\r\n\r\n\t assert(after == before or self.count == 0,\r\n\t\t(\"Non-idempotent left repetition for format '%s'\"):format(fmt))\r\n\t fmt = \"(\"..fmt..\")\"\r\n\t return self.count..TOKEN_SEP..\"*\"..TOKEN_SEP..fmt, after\r\n      end",
    "type": "function"
  }, {
    "id": 373,
    "text": "local before = self.body:get_endian()",
    "type": "statement:localassign"
  }, {
    "id": 374,
    "text": "local fmt, after = self.body:get_format(endian)",
    "type": "statement:localassign"
  }, {
    "id": 375,
    "text": "after = self.count > 0 and after or endian",
    "type": "statement:assign"
  }, {
    "id": 376,
    "text": "assert(after == before or self.count == 0,\r\n\t\t(\"Non-idempotent left repetition for format '%s'\"):format(fmt))",
    "type": "statement:functioncall"
  }, {
    "id": 377,
    "text": "fmt = \"(\"..fmt..\")\"",
    "type": "statement:assign"
  }, {
    "id": 378,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 379,
    "text": "function (self)\r\n\t return self.body:get_data():rep(self.count)\r\n      end",
    "type": "function"
  }, {
    "id": 380,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 381,
    "text": "function (self)\r\n\t return list.rep(self.body:get_values(), self.count)\r\n      end",
    "type": "function"
  }, {
    "id": 382,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 383,
    "text": "function (self)\r\n\t return 1\r\n      end",
    "type": "function"
  }, {
    "id": 384,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 385,
    "text": "function (self)\r\n\t if self.count > 0 then\r\n\t    return self.body:get_endian()\r\n\t end\r\n      end",
    "type": "function"
  }, {
    "id": 386,
    "text": "if self.count > 0 then\r\n\t    return self.body:get_endian()\r\n\t end",
    "type": "statement:if"
  }, {
    "id": 387,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 388,
    "text": "function (class, seed)\r\n\t local self = {\r\n\t    rand = make_rand(seed),\t--data source\r\n\t    endian = nil,\t\t--nil|\">\"|\"<\"\r\n\t    width = 56,\r\n\t    precision = 16,\r\n\t    depth = 0,\t\t\t--recursion depth\r\n\t    uniq = 0\t\t\t--unique name seq\r\n\t }\r\n\t return bless(self, class)\r\n      end",
    "type": "function"
  }, {
    "id": 389,
    "text": "local self = {\r\n\t    rand = make_rand(seed),\t--data source\r\n\t    endian = nil,\t\t--nil|\">\"|\"<\"\r\n\t    width = 56,\r\n\t    precision = 16,\r\n\t    depth = 0,\t\t\t--recursion depth\r\n\t    uniq = 0\t\t\t--unique name seq\r\n\t }",
    "type": "statement:localassign"
  }, {
    "id": 390,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 391,
    "text": "function (self)\r\n\t return self.endian == \">\"\t--XXX: should test vs. native also?\r\n      end",
    "type": "function"
  }, {
    "id": 392,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 393,
    "text": "function (self, t, reverse)\r\n\t if nil == reverse then reverse = self:is_big_endian() end\r\n\r\n\t local chars = list.map(t, char)\r\n\t if reverse then\r\n\t    chars = list.reverse(chars)\r\n\t end\r\n\t return table.concat(chars)\r\n      end",
    "type": "function"
  }, {
    "id": 394,
    "text": "if nil == reverse then reverse = self:is_big_endian() end",
    "type": "statement:if"
  }, {
    "id": 395,
    "text": "reverse = self:is_big_endian()",
    "type": "statement:assign"
  }, {
    "id": 396,
    "text": "local chars = list.map(t, char)",
    "type": "statement:localassign"
  }, {
    "id": 397,
    "text": "if reverse then\r\n\t    chars = list.reverse(chars)\r\n\t end",
    "type": "statement:if"
  }, {
    "id": 398,
    "text": "chars = list.reverse(chars)",
    "type": "statement:assign"
  }, {
    "id": 399,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 400,
    "text": "function (self, val, W, reverse)\r\n\t return self:raw_of_list(int_to_bytes_le(val, W), reverse)\r\n      end",
    "type": "function"
  }, {
    "id": 401,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 402,
    "text": "function (state, w)\r\n\t local W = ceil(w/8)\r\n\t       w = w < MAX_BITS and w or MAX_BITS\r\n\t local value = state.rand()\r\n\t local value = fmod(value,2^w)\r\n\r\n\t local write_bits = {}\r\n\t local read_bits = {}\r\n\t local n = 0\r\n\t local v = value\r\n\r\n\t while n < 8*W do\r\n\t    local r = v % 2\r\n\r\n\t    table.insert(read_bits, r == 1)\r\n\t    if v > 0 then\r\n\t       table.insert(write_bits, r == 1)\r\n\t    end\r\n\r\n\t    v = (v - r) / 2\r\n\t    n = n+1\r\n\t end\r\n\r\n\t local write_test = ScalarTest:new{\r\n\t    endian = state.endian,\r\n\t    format = (\"m%d\"):format(W),\r\n\t    value = write_bits,\r\n\t    data = state:raw_of_int(value, W)\r\n\t }\r\n\t local read_test = ScalarTest:new{\r\n\t    endian = state.endian,\r\n\t    format = (\"m%d\"):format(W),\r\n\t    value = read_bits,\r\n\t    data = state:raw_of_int(value, W)\r\n\t }\r\n\t return write_test, read_test\r\n      end",
    "type": "function"
  }, {
    "id": 403,
    "text": "local W = ceil(w/8)",
    "type": "statement:localassign"
  }, {
    "id": 404,
    "text": "w = w < MAX_BITS and w or MAX_BITS",
    "type": "statement:assign"
  }, {
    "id": 405,
    "text": "local value = state.rand()",
    "type": "statement:localassign"
  }, {
    "id": 406,
    "text": "local value = fmod(value,2^w)",
    "type": "statement:localassign"
  }, {
    "id": 407,
    "text": "local write_bits = {}",
    "type": "statement:localassign"
  }, {
    "id": 408,
    "text": "local read_bits = {}",
    "type": "statement:localassign"
  }, {
    "id": 409,
    "text": "local n = 0",
    "type": "statement:localassign"
  }, {
    "id": 410,
    "text": "local v = value",
    "type": "statement:localassign"
  }, {
    "id": 411,
    "text": "while n < 8*W do\r\n\t    local r = v % 2\r\n\r\n\t    table.insert(read_bits, r == 1)\r\n\t    if v > 0 then\r\n\t       table.insert(write_bits, r == 1)\r\n\t    end\r\n\r\n\t    v = (v - r) / 2\r\n\t    n = n+1\r\n\t end",
    "type": "statement:while"
  }, {
    "id": 412,
    "text": "local r = v % 2",
    "type": "statement:localassign"
  }, {
    "id": 413,
    "text": "table.insert(read_bits, r == 1)",
    "type": "statement:functioncall"
  }, {
    "id": 414,
    "text": "if v > 0 then\r\n\t       table.insert(write_bits, r == 1)\r\n\t    end",
    "type": "statement:if"
  }, {
    "id": 415,
    "text": "table.insert(write_bits, r == 1)",
    "type": "statement:functioncall"
  }, {
    "id": 416,
    "text": "v = (v - r) / 2",
    "type": "statement:assign"
  }, {
    "id": 417,
    "text": "n = n+1",
    "type": "statement:assign"
  }, {
    "id": 418,
    "text": "local write_test = ScalarTest:new{\r\n\t    endian = state.endian,\r\n\t    format = (\"m%d\"):format(W),\r\n\t    value = write_bits,\r\n\t    data = state:raw_of_int(value, W)\r\n\t }",
    "type": "statement:localassign"
  }, {
    "id": 419,
    "text": "local read_test = ScalarTest:new{\r\n\t    endian = state.endian,\r\n\t    format = (\"m%d\"):format(W),\r\n\t    value = read_bits,\r\n\t    data = state:raw_of_int(value, W)\r\n\t }",
    "type": "statement:localassign"
  }, {
    "id": 420,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 421,
    "text": "function (state, w)\r\n\t local W = ceil(w/8)\r\n\t return ScalarTest:new{\r\n\t    format = \"x\"..W,\r\n\t    value = nil,\t\t--?\r\n\t    data = zero_pad_to_length(\"\", W)\r\n\t },\r\n\t ScalarTest:new{\r\n\t    format = \"x\"..W,\r\n\t    value = nil,\t\t--?\r\n\t    data = cruft_pad_to_length(\"\", W)\r\n\t }\r\n      end",
    "type": "function"
  }, {
    "id": 422,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 423,
    "text": "function (state, w)\r\n\t local W = ceil(w/8)\r\n\t local len = W-1\r\n\t local s = string_rand(state.rand)(len)\r\n\r\n\t local write_test = ScalarTest:new{\r\n\t    endian = state.endian,\r\n\t    format = \"z\",\r\n\t    value = s,\r\n\t    data = s..\"\\0\"\r\n\t }\r\n\t local read_test = ScalarTest:new{\r\n\t    endian = state.endian,\r\n\t    format = (\"z%d\"):format(W),\r\n\t    value = s,\r\n\t    data = write_test.data\r\n\t }\r\n\t return write_test, read_test\r\n      end",
    "type": "function"
  }, {
    "id": 424,
    "text": "local len = W-1",
    "type": "statement:localassign"
  }, {
    "id": 425,
    "text": "local s = string_rand(state.rand)(len)",
    "type": "statement:localassign"
  }, {
    "id": 426,
    "text": "local write_test = ScalarTest:new{\r\n\t    endian = state.endian,\r\n\t    format = \"z\",\r\n\t    value = s,\r\n\t    data = s..\"\\0\"\r\n\t }",
    "type": "statement:localassign"
  }, {
    "id": 427,
    "text": "local read_test = ScalarTest:new{\r\n\t    endian = state.endian,\r\n\t    format = (\"z%d\"):format(W),\r\n\t    value = s,\r\n\t    data = write_test.data\r\n\t }",
    "type": "statement:localassign"
  }, {
    "id": 428,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 429,
    "text": "function (state, w)\r\n\t local W = ceil(w/8)\t\t-->0\r\n\t local len = state.rand() % (W)\t-- must be < W\r\n\t local s = string_rand(state.rand)(len)\r\n\r\n\t local data = s..\"\\0\"\r\n\t local write_data = zero_pad_to_length(data, W)\r\n\t local read_data = cruft_pad_to_length(data, W)\r\n\r\n\t local write_test = ScalarTest:new{\r\n\t    endian = state.endian,\r\n\t    format = (\"z%d\"):format(W),\r\n\t    value = s,\r\n\t    data = write_data:sub(1,W)\r\n\t }\r\n\t local read_test = ScalarTest:new{\r\n\t    endian = state.endian,\r\n\t    format = (\"z%d\"):format(W),\r\n\t    value = s,\r\n\t    data = read_data:sub(1,W)\r\n\t }\r\n\t return write_test, read_test\r\n      end",
    "type": "function"
  }, {
    "id": 430,
    "text": "local len = state.rand() % (W)",
    "type": "statement:localassign"
  }, {
    "id": 431,
    "text": "local data = s..\"\\0\"",
    "type": "statement:localassign"
  }, {
    "id": 432,
    "text": "local write_data = zero_pad_to_length(data, W)",
    "type": "statement:localassign"
  }, {
    "id": 433,
    "text": "local read_data = cruft_pad_to_length(data, W)",
    "type": "statement:localassign"
  }, {
    "id": 434,
    "text": "local write_test = ScalarTest:new{\r\n\t    endian = state.endian,\r\n\t    format = (\"z%d\"):format(W),\r\n\t    value = s,\r\n\t    data = write_data:sub(1,W)\r\n\t }",
    "type": "statement:localassign"
  }, {
    "id": 435,
    "text": "local read_test = ScalarTest:new{\r\n\t    endian = state.endian,\r\n\t    format = (\"z%d\"):format(W),\r\n\t    value = s,\r\n\t    data = read_data:sub(1,W)\r\n\t }",
    "type": "statement:localassign"
  }, {
    "id": 436,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 437,
    "text": "function (state, w)\r\n\t local W = ceil(w/8)\t\t-->0\r\n\t local s = string_rand(state.rand)(W-1)\r\n\t local cruft = string_rand(state.rand,1,W)()\r\n\r\n\t local write_test = ScalarTest:new{\r\n\t    endian = state.endian,\r\n\t    format = (\"z%d\"):format(W),\r\n\t    value = s .. cruft,\r\n\t    data = s..\"\\0\"\r\n\t }\r\n\t local read_test = ScalarTest:new{\r\n\t    endian = state.endian,\r\n\t    format = (\"z%d\"):format(W),\r\n\t    value = s,\r\n\t    data = write_test.data\r\n\t }\r\n\t return write_test, read_test\r\n      end",
    "type": "function"
  }, {
    "id": 438,
    "text": "local s = string_rand(state.rand)(W-1)",
    "type": "statement:localassign"
  }, {
    "id": 439,
    "text": "local cruft = string_rand(state.rand,1,W)()",
    "type": "statement:localassign"
  }, {
    "id": 440,
    "text": "local write_test = ScalarTest:new{\r\n\t    endian = state.endian,\r\n\t    format = (\"z%d\"):format(W),\r\n\t    value = s .. cruft,\r\n\t    data = s..\"\\0\"\r\n\t }",
    "type": "statement:localassign"
  }, {
    "id": 441,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 442,
    "text": "function (state, w)\r\n\t local W = ceil(w/8)\r\n\t local value = fmod((state.rand() % 2) * state.rand(), 2^8)\r\n\t local flag = value ~= 0 and w > 0\r\n\t if not flag then value = 0 end\r\n\r\n\t local write_test = ScalarTest:new{\r\n\t    endian = state.endian,\r\n\t    format = (\"b%d\"):format(W),\r\n\t    value = flag,\r\n\t    data = state:raw_of_int(flag and 1 or 0, W)\r\n\t }\r\n\t local read_test = ScalarTest:new{\r\n\t    endian = state.endian,\r\n\t    format = (\"b%d\"):format(W),\r\n\t    value = flag,\r\n\t    data = state:raw_of_int(value, W)\r\n\t }\r\n\t return write_test, read_test\r\n      end",
    "type": "function"
  }, {
    "id": 443,
    "text": "local value = fmod((state.rand() % 2) * state.rand(), 2^8)",
    "type": "statement:localassign"
  }, {
    "id": 444,
    "text": "local flag = value ~= 0 and w > 0",
    "type": "statement:localassign"
  }, {
    "id": 445,
    "text": "if not flag then value = 0 end",
    "type": "statement:if"
  }, {
    "id": 446,
    "text": "value = 0",
    "type": "statement:assign"
  }, {
    "id": 447,
    "text": "local write_test = ScalarTest:new{\r\n\t    endian = state.endian,\r\n\t    format = (\"b%d\"):format(W),\r\n\t    value = flag,\r\n\t    data = state:raw_of_int(flag and 1 or 0, W)\r\n\t }",
    "type": "statement:localassign"
  }, {
    "id": 448,
    "text": "local read_test = ScalarTest:new{\r\n\t    endian = state.endian,\r\n\t    format = (\"b%d\"):format(W),\r\n\t    value = flag,\r\n\t    data = state:raw_of_int(value, W)\r\n\t }",
    "type": "statement:localassign"
  }, {
    "id": 449,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 450,
    "text": "function (state, w)\r\n\t local W = ceil(w/8)\r\n\t       w = w < MAX_BITS and w or MAX_BITS\r\n\t local value = state.rand()\r\n\t local value = fmod(value,2^w)\r\n\t return ScalarTest:new{\r\n\t    endian = state.endian,\r\n\t    format = (\"u%d\"):format(W),\r\n\t    value = value,\r\n\t    data = state:raw_of_int(value, W)\r\n\t }\r\n      end",
    "type": "function"
  }, {
    "id": 451,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 452,
    "text": "function (state, w)\r\n\t local W = ceil(w/8)\r\n\t       w = w < MAX_BITS and w or MAX_BITS\r\n\t local bias = 2^(w-1)\r\n\t local value = (fmod(state.rand(), 2^w) - bias)\r\n\t if w == 0 then value = 0 end\r\n\t return ScalarTest:new{\r\n\t    endian = state.endian,\r\n\t    format = (\"i%d\"):format(W),\r\n\t    value = value,\r\n\t    data = state:raw_of_int(value, W)\r\n\t }\r\n      end",
    "type": "function"
  }, {
    "id": 453,
    "text": "local bias = 2^(w-1)",
    "type": "statement:localassign"
  }, {
    "id": 454,
    "text": "local value = (fmod(state.rand(), 2^w) - bias)",
    "type": "statement:localassign"
  }, {
    "id": 455,
    "text": "if w == 0 then value = 0 end",
    "type": "statement:if"
  }, {
    "id": 456,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 457,
    "text": "function (state, w)\r\n\t local W = ceil(w/8)\r\n\t local len = W\r\n\t local s = string_rand(state.rand)(len)\r\n\r\n\t local write_test = ScalarTest:new{\r\n\t    endian = state.endian,\r\n\t    format = \"s\",\r\n\t    value = s,\r\n\t    data = s\r\n\t }\r\n\t local read_test = ScalarTest:new{\r\n\t    endian = state.endian,\r\n\t    format = (\"s%d\"):format(W),\r\n\t    value = s,\r\n\t    data = write_test.data\r\n\t }\r\n\t return write_test, read_test\r\n      end",
    "type": "function"
  }, {
    "id": 458,
    "text": "local len = W",
    "type": "statement:localassign"
  }, {
    "id": 459,
    "text": "local write_test = ScalarTest:new{\r\n\t    endian = state.endian,\r\n\t    format = \"s\",\r\n\t    value = s,\r\n\t    data = s\r\n\t }",
    "type": "statement:localassign"
  }, {
    "id": 460,
    "text": "local read_test = ScalarTest:new{\r\n\t    endian = state.endian,\r\n\t    format = (\"s%d\"):format(W),\r\n\t    value = s,\r\n\t    data = write_test.data\r\n\t }",
    "type": "statement:localassign"
  }, {
    "id": 461,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 462,
    "text": "function (state, w)\r\n\t local W = ceil(w/8)\r\n\t local len = state.rand() % (W+1)\r\n\t local s = string_rand(state.rand)(len)\r\n\t local pad = (\"\\0\"):rep(W - #s)\r\n\r\n\t local write_test = ScalarTest:new{\r\n\t    endian = state.endian,\r\n\t    format = (\"s%d\"):format(W),\r\n\t    value = s,\r\n\t    data = s .. pad\r\n\t }\r\n\t local read_test = ScalarTest:new{\r\n\t    endian = state.endian,\r\n\t    format = (\"s%d\"):format(W),\r\n\t    value = s .. pad,\r\n\t    data = write_test.data\r\n\t }\r\n\t return write_test, read_test\r\n      end",
    "type": "function"
  }, {
    "id": 463,
    "text": "local len = state.rand() % (W+1)",
    "type": "statement:localassign"
  }, {
    "id": 464,
    "text": "local pad = (\"\\0\"):rep(W - #s)",
    "type": "statement:localassign"
  }, {
    "id": 465,
    "text": "local write_test = ScalarTest:new{\r\n\t    endian = state.endian,\r\n\t    format = (\"s%d\"):format(W),\r\n\t    value = s,\r\n\t    data = s .. pad\r\n\t }",
    "type": "statement:localassign"
  }, {
    "id": 466,
    "text": "local read_test = ScalarTest:new{\r\n\t    endian = state.endian,\r\n\t    format = (\"s%d\"):format(W),\r\n\t    value = s .. pad,\r\n\t    data = write_test.data\r\n\t }",
    "type": "statement:localassign"
  }, {
    "id": 467,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 468,
    "text": "function (state, w)\r\n\t local W = ceil(w/8)\r\n\t local s = string_rand(state.rand)(W)\r\n\t local cruft = string_rand(state.rand,0,W)()\r\n\r\n\t local write_test = ScalarTest:new{\r\n\t    endian = state.endian,\r\n\t    format = (\"s%d\"):format(W),\r\n\t    value = s .. cruft,\r\n\t    data = s\r\n\t }\r\n\t local read_test = ScalarTest:new{\r\n\t    endian = state.endian,\r\n\t    format = (\"s%d\"):format(W),\r\n\t    value = s,\r\n\t    data = write_test.data\r\n\t }\r\n\t return write_test, read_test\r\n      end",
    "type": "function"
  }, {
    "id": 469,
    "text": "local s = string_rand(state.rand)(W)",
    "type": "statement:localassign"
  }, {
    "id": 470,
    "text": "local cruft = string_rand(state.rand,0,W)()",
    "type": "statement:localassign"
  }, {
    "id": 471,
    "text": "local write_test = ScalarTest:new{\r\n\t    endian = state.endian,\r\n\t    format = (\"s%d\"):format(W),\r\n\t    value = s .. cruft,\r\n\t    data = s\r\n\t }",
    "type": "statement:localassign"
  }, {
    "id": 472,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 473,
    "text": "function (state, w)\r\n\t local W = ceil(w/8)\r\n\t       w = w > 4 and 4 or w\r\n\t local count = fmod(state.rand(), 2^w)\r\n\t local count_data = state:raw_of_int(count, W)\r\n\t local s = string_rand(state.rand)(count)\r\n\t return ScalarTest:new{\r\n\t    endian = state.endian,\r\n\t    format = (\"c%d\"):format(W),\r\n\t    value = s,\r\n\t    data = count_data..s\r\n\t }\r\n      end",
    "type": "function"
  }, {
    "id": 474,
    "text": "w = w > 4 and 4 or w",
    "type": "statement:assign"
  }, {
    "id": 475,
    "text": "local count = fmod(state.rand(), 2^w)",
    "type": "statement:localassign"
  }, {
    "id": 476,
    "text": "local count_data = state:raw_of_int(count, W)",
    "type": "statement:localassign"
  }, {
    "id": 477,
    "text": "local s = string_rand(state.rand)(count)",
    "type": "statement:localassign"
  }, {
    "id": 478,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 479,
    "text": "function (...)\r\n\t\treturn gen_random_leaf(...)\r\n\t     end",
    "type": "function"
  }, {
    "id": 480,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 481,
    "text": "function (state,w,f)\r\n\t\t   local n = CONF.COMPOUND_LENGTH\r\n\t\t   local t = CompoundTest:new()\r\n\t\t   for i=1,n do\r\n\t\t      t:add_test(gen_random_test(state, w, f))\r\n\t\t   end\r\n\t\t   return t\r\n\t\tend",
    "type": "function"
  }, {
    "id": 482,
    "text": "local n = CONF.COMPOUND_LENGTH",
    "type": "statement:localassign"
  }, {
    "id": 483,
    "text": "local t = CompoundTest:new()",
    "type": "statement:localassign"
  }, {
    "id": 484,
    "text": "for i=1,n do\r\n\t\t      t:add_test(gen_random_test(state, w, f))\r\n\t\t   end",
    "type": "statement:numericfor"
  }, {
    "id": 485,
    "text": "t:add_test(gen_random_test(state, w, f))",
    "type": "statement:functioncall"
  }, {
    "id": 486,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 487,
    "text": "function (state,w,f)\r\n\t\t   local t = gen_random_test(state, w, f)\r\n\t\t   return NestedTest:new{body = t}\r\n\t\tend",
    "type": "function"
  }, {
    "id": 488,
    "text": "local t = gen_random_test(state, w, f)",
    "type": "statement:localassign"
  }, {
    "id": 489,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 490,
    "text": "function (state,w,f)\r\n\t\t   local t = gen_random_test(state, w, f)\r\n\t\t   return GroupedTest:new{body = t}\r\n\t\tend",
    "type": "function"
  }, {
    "id": 491,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 492,
    "text": "function (state,w,f)\r\n\t\t   local t = gen_random_test(state, w, f)\r\n\t\t   local vs = t:get_values()\r\n\t\t   if #vs == 1 and t.is_scalar then\r\n\t\t      state.uniq = state.uniq + 1\r\n\t\t      t = NamedTest:new{body = t, name=\"u\"..state.uniq}\r\n\t\t   end\r\n\t\t   return t\r\n\t\tend",
    "type": "function"
  }, {
    "id": 493,
    "text": "local vs = t:get_values()",
    "type": "statement:localassign"
  }, {
    "id": 494,
    "text": "if #vs == 1 and t.is_scalar then\r\n\t\t      state.uniq = state.uniq + 1\r\n\t\t      t = NamedTest:new{body = t, name=\"u\"..state.uniq}\r\n\t\t   end",
    "type": "statement:if"
  }, {
    "id": 495,
    "text": "state.uniq = state.uniq + 1",
    "type": "statement:assign"
  }, {
    "id": 496,
    "text": "t = NamedTest:new{body = t, name=\"u\"..state.uniq}",
    "type": "statement:assign"
  }, {
    "id": 497,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 498,
    "text": "function (state,w,f)\r\n\t\t   local t = gen_random_test(state, w, f)\r\n\t\t   local before, after = t:get_endian()\r\n\t\t   if before == after then\r\n\t\t      t = LeftRepetitionTest:new{\r\n\t\t\t body = t,\r\n\t\t\t count = state.rand() % 5\r\n\t\t      }\r\n\t\t   end\r\n\t\t   return t\r\n\t\tend",
    "type": "function"
  }, {
    "id": 499,
    "text": "local before, after = t:get_endian()",
    "type": "statement:localassign"
  }, {
    "id": 500,
    "text": "if before == after then\r\n\t\t      t = LeftRepetitionTest:new{\r\n\t\t\t body = t,\r\n\t\t\t count = state.rand() % 5\r\n\t\t      }\r\n\t\t   end",
    "type": "statement:if"
  }, {
    "id": 501,
    "text": "t = LeftRepetitionTest:new{\r\n\t\t\t body = t,\r\n\t\t\t count = state.rand() % 5\r\n\t\t      }",
    "type": "statement:assign"
  }, {
    "id": 502,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 503,
    "text": "",
    "type": "function container"
  }, {
    "id": 504,
    "text": "group",
    "type": "global function"
  }, {
    "id": 505,
    "text": "vstruct",
    "type": "module"
  }, {
    "id": 506,
    "text": "ceil",
    "type": "global function"
  }, {
    "id": 507,
    "text": "write",
    "type": "global function"
  }, {
    "id": 508,
    "text": "new",
    "type": "global function"
  }, {
    "id": 509,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 510,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 511,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 512,
    "text": "map",
    "type": "global function"
  }, {
    "id": 513,
    "text": "merge",
    "type": "global function"
  }, {
    "id": 514,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 515,
    "text": "frexp",
    "type": "global function"
  }, {
    "id": 516,
    "text": "reverse",
    "type": "global function"
  }, {
    "id": 517,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 518,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 519,
    "text": "dump",
    "type": "global function"
  }, {
    "id": 520,
    "text": "format",
    "type": "global function"
  }, {
    "id": 521,
    "text": "frexp",
    "type": "global function"
  }, {
    "id": 522,
    "text": "gen_len",
    "type": "global function"
  }, {
    "id": 523,
    "text": "rand",
    "type": "global function"
  }, {
    "id": 524,
    "text": "record",
    "type": "global function"
  }, {
    "id": 525,
    "text": "gen_random_leaf",
    "type": "global function"
  }, {
    "id": 526,
    "text": "gen",
    "type": "global function"
  }, {
    "id": 527,
    "text": "loadstring",
    "type": "global function"
  }, {
    "id": 528,
    "text": "f",
    "type": "global function"
  }, {
    "id": 529,
    "text": "iter",
    "type": "global function"
  }, {
    "id": 530,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 531,
    "text": "fmod",
    "type": "global function"
  }, {
    "id": 532,
    "text": "new",
    "type": "global function"
  }, {
    "id": 533,
    "text": "time",
    "type": "global function"
  }, {
    "id": 534,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 535,
    "text": "require",
    "type": "global function"
  }, {
    "id": 536,
    "text": "floor",
    "type": "global function"
  }, {
    "id": 537,
    "text": "abs",
    "type": "global function"
  }, {
    "id": 538,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 539,
    "text": "type",
    "type": "global function"
  }, {
    "id": 540,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 541,
    "text": "range",
    "type": "global function"
  }, {
    "id": 542,
    "text": "char_",
    "type": "global function"
  }, {
    "id": 543,
    "text": "",
    "type": "variable container"
  }, {
    "id": 544,
    "text": "",
    "type": "require container"
  }, {
    "id": 545,
    "text": "",
    "type": "local variable"
  }, {
    "id": 546,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 547,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 548,
    "text": "",
    "type": "boolean"
  }, {
    "id": 549,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 550,
    "text": "",
    "type": "number"
  }, {
    "id": 551,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 552,
    "text": "",
    "type": "number"
  }, {
    "id": 553,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 554,
    "text": "",
    "type": "number"
  }, {
    "id": 555,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 556,
    "text": "",
    "type": "number"
  }, {
    "id": 557,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 558,
    "text": "",
    "type": "boolean"
  }, {
    "id": 559,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 560,
    "text": "",
    "type": "number"
  }, {
    "id": 561,
    "text": "",
    "type": "local variable"
  }, {
    "id": 562,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 563,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 564,
    "text": "",
    "type": "boolean"
  }, {
    "id": 565,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 566,
    "text": "",
    "type": "boolean"
  }, {
    "id": 567,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 568,
    "text": "",
    "type": "boolean"
  }, {
    "id": 569,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 570,
    "text": "",
    "type": "boolean"
  }, {
    "id": 571,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 572,
    "text": "",
    "type": "boolean"
  }, {
    "id": 573,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 574,
    "text": "",
    "type": "boolean"
  }, {
    "id": 575,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 576,
    "text": "",
    "type": "boolean"
  }, {
    "id": 577,
    "text": "",
    "type": "local variable"
  }, {
    "id": 578,
    "text": "",
    "type": "boolean"
  }, {
    "id": 579,
    "text": "",
    "type": "local variable"
  }, {
    "id": 580,
    "text": "",
    "type": "keyword"
  }, {
    "id": 581,
    "text": "",
    "type": "local variable"
  }, {
    "id": 582,
    "text": "",
    "type": "boolean"
  }, {
    "id": 583,
    "text": "",
    "type": "local variable"
  }, {
    "id": 584,
    "text": "",
    "type": "string"
  }, {
    "id": 585,
    "text": "",
    "type": "local variable"
  }, {
    "id": 586,
    "text": "",
    "type": "string"
  }, {
    "id": 587,
    "text": "",
    "type": "local variable"
  }, {
    "id": 588,
    "text": "",
    "type": "number"
  }, {
    "id": 589,
    "text": "",
    "type": "local variable"
  }, {
    "id": 590,
    "text": "",
    "type": "string"
  }, {
    "id": 591,
    "text": "",
    "type": "local variable"
  }, {
    "id": 592,
    "text": "",
    "type": "string"
  }, {
    "id": 593,
    "text": "",
    "type": "local variable"
  }, {
    "id": 594,
    "text": "",
    "type": "n/a"
  }, {
    "id": 595,
    "text": "",
    "type": "local variable"
  }, {
    "id": 596,
    "text": "",
    "type": "n/a"
  }, {
    "id": 597,
    "text": "",
    "type": "local variable"
  }, {
    "id": 598,
    "text": "",
    "type": "n/a"
  }, {
    "id": 599,
    "text": "",
    "type": "local variable"
  }, {
    "id": 600,
    "text": "",
    "type": "n/a"
  }, {
    "id": 601,
    "text": "",
    "type": "local variable"
  }, {
    "id": 602,
    "text": "",
    "type": "n/a"
  }, {
    "id": 603,
    "text": "",
    "type": "local variable"
  }, {
    "id": 604,
    "text": "",
    "type": "n/a"
  }, {
    "id": 605,
    "text": "",
    "type": "local variable"
  }, {
    "id": 606,
    "text": "",
    "type": "n/a"
  }, {
    "id": 607,
    "text": "",
    "type": "local variable"
  }, {
    "id": 608,
    "text": "",
    "type": "n/a"
  }, {
    "id": 609,
    "text": "",
    "type": "local variable"
  }, {
    "id": 610,
    "text": "",
    "type": "n/a"
  }, {
    "id": 611,
    "text": "",
    "type": "local variable"
  }, {
    "id": 612,
    "text": "",
    "type": "n/a"
  }, {
    "id": 613,
    "text": "",
    "type": "local variable"
  }, {
    "id": 614,
    "text": "",
    "type": "n/a"
  }, {
    "id": 615,
    "text": "",
    "type": "local variable"
  }, {
    "id": 616,
    "text": "",
    "type": "n/a"
  }, {
    "id": 617,
    "text": "",
    "type": "local variable"
  }, {
    "id": 618,
    "text": "",
    "type": "n/a"
  }, {
    "id": 619,
    "text": "",
    "type": "local variable"
  }, {
    "id": 620,
    "text": "",
    "type": "n/a"
  }, {
    "id": 621,
    "text": "",
    "type": "local variable"
  }, {
    "id": 622,
    "text": "",
    "type": "n/a"
  }, {
    "id": 623,
    "text": "",
    "type": "local variable"
  }, {
    "id": 624,
    "text": "",
    "type": "n/a"
  }, {
    "id": 625,
    "text": "",
    "type": "local variable"
  }, {
    "id": 626,
    "text": "",
    "type": "n/a"
  }, {
    "id": 627,
    "text": "",
    "type": "local variable"
  }, {
    "id": 628,
    "text": "",
    "type": "n/a"
  }, {
    "id": 629,
    "text": "",
    "type": "local variable"
  }, {
    "id": 630,
    "text": "",
    "type": "n/a"
  }, {
    "id": 631,
    "text": "",
    "type": "local variable"
  }, {
    "id": 632,
    "text": "",
    "type": "n/a"
  }, {
    "id": 633,
    "text": "",
    "type": "local variable"
  }, {
    "id": 634,
    "text": "",
    "type": "n/a"
  }, {
    "id": 635,
    "text": "",
    "type": "local variable"
  }, {
    "id": 636,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 637,
    "text": "",
    "type": "local variable"
  }, {
    "id": 638,
    "text": "",
    "type": "local variable"
  }, {
    "id": 639,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 640,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 641,
    "text": "",
    "type": "function"
  }, {
    "id": 642,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 643,
    "text": "",
    "type": "keyword"
  }, {
    "id": 644,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 645,
    "text": "",
    "type": "keyword"
  }, {
    "id": 646,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 647,
    "text": "",
    "type": "keyword"
  }, {
    "id": 648,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 649,
    "text": "",
    "type": "keyword"
  }, {
    "id": 650,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 651,
    "text": "",
    "type": "keyword"
  }, {
    "id": 652,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 653,
    "text": "",
    "type": "function"
  }, {
    "id": 654,
    "text": "",
    "type": "local variable"
  }, {
    "id": 655,
    "text": "",
    "type": "n/a"
  }, {
    "id": 656,
    "text": "",
    "type": "local variable"
  }, {
    "id": 657,
    "text": "",
    "type": "n/a"
  }, {
    "id": 658,
    "text": "",
    "type": "local variable"
  }, {
    "id": 659,
    "text": "",
    "type": "n/a"
  }, {
    "id": 660,
    "text": "",
    "type": "local variable"
  }, {
    "id": 661,
    "text": "",
    "type": "n/a"
  }, {
    "id": 662,
    "text": "",
    "type": "local variable"
  }, {
    "id": 663,
    "text": "",
    "type": "n/a"
  }, {
    "id": 664,
    "text": "",
    "type": "local variable"
  }, {
    "id": 665,
    "text": "",
    "type": "n/a"
  }, {
    "id": 666,
    "text": "",
    "type": "local variable"
  }, {
    "id": 667,
    "text": "",
    "type": "n/a"
  }, {
    "id": 668,
    "text": "",
    "type": "local variable"
  }, {
    "id": 669,
    "text": "",
    "type": "n/a"
  }, {
    "id": 670,
    "text": "",
    "type": "local variable"
  }, {
    "id": 671,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 672,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 673,
    "text": "",
    "type": "function"
  }, {
    "id": 674,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 675,
    "text": "",
    "type": "function"
  }, {
    "id": 676,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 677,
    "text": "",
    "type": "function"
  }, {
    "id": 678,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 679,
    "text": "",
    "type": "function"
  }, {
    "id": 680,
    "text": "",
    "type": "local variable"
  }, {
    "id": 681,
    "text": "",
    "type": "local variable"
  }, {
    "id": 682,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 683,
    "text": "",
    "type": "local variable"
  }, {
    "id": 684,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 685,
    "text": "",
    "type": "local variable"
  }, {
    "id": 686,
    "text": "",
    "type": "local variable"
  }, {
    "id": 687,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 688,
    "text": "",
    "type": "global variable"
  }, {
    "id": 689,
    "text": "",
    "type": "global variable"
  }, {
    "id": 690,
    "text": "",
    "type": "n/a"
  }, {
    "id": 691,
    "text": "",
    "type": "global variable"
  }, {
    "id": 692,
    "text": "",
    "type": "n/a"
  }, {
    "id": 693,
    "text": "",
    "type": "global variable"
  }, {
    "id": 694,
    "text": "",
    "type": "n/a"
  }, {
    "id": 695,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 696,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 697,
    "text": "",
    "type": "global variable"
  } ]
}