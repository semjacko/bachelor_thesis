{
  "_filename": "ast.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/vstruct/vstruct/ast.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 5
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 3,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 5
  }, {
    "from": 17,
    "label": "has",
    "to": 5
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 18
  }, {
    "from": 22,
    "label": "has",
    "to": 19
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 5
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 5
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 27,
    "label": "has",
    "to": 5
  }, {
    "from": 27,
    "label": "has",
    "to": 5
  }, {
    "from": 27,
    "label": "has",
    "to": 5
  }, {
    "from": 27,
    "label": "has",
    "to": 5
  }, {
    "from": 27,
    "label": "has",
    "to": 5
  }, {
    "from": 27,
    "label": "has",
    "to": 5
  }, {
    "from": 27,
    "label": "has",
    "to": 5
  }, {
    "from": 27,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 5
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 37,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 37,
    "label": "has",
    "to": 43
  }, {
    "from": 37,
    "label": "has",
    "to": 5
  }, {
    "from": 37,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 42
  }, {
    "from": 45,
    "label": "has",
    "to": 49
  }, {
    "from": 45,
    "label": "has",
    "to": 5
  }, {
    "from": 45,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 51,
    "label": "has",
    "to": 54
  }, {
    "from": 51,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 51,
    "label": "has",
    "to": 57
  }, {
    "from": 51,
    "label": "has",
    "to": 58
  }, {
    "from": 51,
    "label": "has",
    "to": 5
  }, {
    "from": 51,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 60,
    "label": "has",
    "to": 5
  }, {
    "from": 60,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 5
  }, {
    "from": 27,
    "label": "calls",
    "to": 17
  }, {
    "from": 17,
    "label": "calls",
    "to": 67
  }, {
    "from": 17,
    "label": "calls",
    "to": 67
  }, {
    "from": 14,
    "label": "calls",
    "to": 80
  }, {
    "from": 17,
    "label": "calls",
    "to": 80
  }, {
    "from": 22,
    "label": "calls",
    "to": 80
  }, {
    "from": 27,
    "label": "calls",
    "to": 80
  }, {
    "from": 37,
    "label": "calls",
    "to": 80
  }, {
    "from": 45,
    "label": "calls",
    "to": 80
  }, {
    "from": 51,
    "label": "calls",
    "to": 80
  }, {
    "from": 3,
    "label": "calls",
    "to": 73
  }, {
    "from": 14,
    "label": "calls",
    "to": 84
  }, {
    "from": 3,
    "label": "calls",
    "to": 81
  }, {
    "from": 33,
    "label": "calls",
    "to": 77
  }, {
    "from": 51,
    "label": "calls",
    "to": 77
  }, {
    "from": 27,
    "label": "calls",
    "to": 70
  }, {
    "from": 51,
    "label": "calls",
    "to": 69
  }, {
    "from": 22,
    "label": "calls",
    "to": 14
  }, {
    "from": 27,
    "label": "calls",
    "to": 14
  }, {
    "from": 60,
    "label": "calls",
    "to": 14
  }, {
    "from": 3,
    "label": "calls",
    "to": 74
  }, {
    "from": 37,
    "label": "calls",
    "to": 74
  }, {
    "from": 17,
    "label": "calls",
    "to": 78
  }, {
    "from": 17,
    "label": "calls",
    "to": 78
  }, {
    "from": 22,
    "label": "calls",
    "to": 78
  }, {
    "from": 33,
    "label": "calls",
    "to": 78
  }, {
    "from": 60,
    "label": "calls",
    "to": 78
  }, {
    "from": 14,
    "label": "calls",
    "to": 82
  }, {
    "from": 66,
    "label": "calls",
    "to": 79
  }, {
    "from": 33,
    "label": "calls",
    "to": 60
  }, {
    "from": 37,
    "label": "calls",
    "to": 60
  }, {
    "from": 37,
    "label": "calls",
    "to": 60
  }, {
    "from": 45,
    "label": "calls",
    "to": 60
  }, {
    "from": 45,
    "label": "calls",
    "to": 60
  }, {
    "from": 51,
    "label": "calls",
    "to": 60
  }, {
    "from": 51,
    "label": "calls",
    "to": 60
  }, {
    "from": 51,
    "label": "calls",
    "to": 60
  }, {
    "from": 51,
    "label": "calls",
    "to": 60
  }, {
    "from": 66,
    "label": "calls",
    "to": 85
  }, {
    "from": 66,
    "label": "calls",
    "to": 85
  }, {
    "from": 66,
    "label": "calls",
    "to": 85
  }, {
    "from": 27,
    "label": "calls",
    "to": 22
  }, {
    "from": 27,
    "label": "calls",
    "to": 37
  }, {
    "from": 27,
    "label": "calls",
    "to": 45
  }, {
    "from": 22,
    "label": "calls",
    "to": 72
  }, {
    "from": 3,
    "label": "calls",
    "to": 71
  }, {
    "from": 17,
    "label": "calls",
    "to": 83
  }, {
    "from": 45,
    "label": "calls",
    "to": 76
  }, {
    "from": 27,
    "label": "calls",
    "to": 33
  }, {
    "from": 27,
    "label": "calls",
    "to": 51
  }, {
    "from": 33,
    "label": "calls",
    "to": 68
  }, {
    "from": 3,
    "label": "calls",
    "to": 27
  }, {
    "from": 22,
    "label": "calls",
    "to": 27
  }, {
    "from": 33,
    "label": "calls",
    "to": 27
  }, {
    "from": 37,
    "label": "calls",
    "to": 27
  }, {
    "from": 45,
    "label": "calls",
    "to": 27
  }, {
    "from": 51,
    "label": "calls",
    "to": 27
  }, {
    "from": 1,
    "label": "contains",
    "to": 66
  }, {
    "from": 66,
    "label": "declares",
    "to": 3
  }, {
    "from": 66,
    "label": "declares",
    "to": 14
  }, {
    "from": 66,
    "label": "declares",
    "to": 17
  }, {
    "from": 66,
    "label": "declares",
    "to": 22
  }, {
    "from": 66,
    "label": "declares",
    "to": 27
  }, {
    "from": 66,
    "label": "declares",
    "to": 33
  }, {
    "from": 66,
    "label": "declares",
    "to": 37
  }, {
    "from": 66,
    "label": "declares",
    "to": 45
  }, {
    "from": 66,
    "label": "declares",
    "to": 51
  }, {
    "from": 66,
    "label": "declares",
    "to": 60
  }, {
    "from": 66,
    "label": "declares",
    "to": 65
  }, {
    "from": 1,
    "label": "contains",
    "to": 86
  }, {
    "from": 1,
    "label": "contains",
    "to": 87
  }, {
    "from": 86,
    "label": "initializes",
    "to": 88
  }, {
    "from": 88,
    "label": "assigns",
    "to": 89
  }, {
    "from": 86,
    "label": "initializes",
    "to": 90
  }, {
    "from": 90,
    "label": "assigns",
    "to": 91
  }, {
    "from": 87,
    "label": "initializes",
    "to": 92
  }, {
    "from": 92,
    "label": "requires",
    "to": 75
  }, {
    "from": 87,
    "label": "initializes",
    "to": 93
  }, {
    "from": 93,
    "label": "requires",
    "to": 2
  }, {
    "from": 1,
    "label": "provides",
    "to": 94
  }, {
    "from": 88,
    "label": "represents",
    "to": 95
  }, {
    "from": 94,
    "label": "provides",
    "to": 95
  }, {
    "from": 96,
    "label": "requires",
    "to": 1
  }, {
    "from": 88,
    "label": "contains",
    "to": 3
  }, {
    "from": 88,
    "label": "contains",
    "to": 14
  }, {
    "from": 88,
    "label": "contains",
    "to": 17
  }, {
    "from": 88,
    "label": "contains",
    "to": 22
  }, {
    "from": 88,
    "label": "contains",
    "to": 27
  }, {
    "from": 88,
    "label": "contains",
    "to": 33
  }, {
    "from": 88,
    "label": "contains",
    "to": 37
  }, {
    "from": 88,
    "label": "contains",
    "to": 45
  }, {
    "from": 88,
    "label": "contains",
    "to": 51
  }, {
    "from": 88,
    "label": "contains",
    "to": 60
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "ast",
    "type": "module"
  }, {
    "id": 2,
    "text": "lexer",
    "type": "module"
  }, {
    "id": 3,
    "text": "function ast.parse(source)\r\n    if struct.cache ~= nil and cache[source] then\r\n        return cache[source]\r\n    end\r\n\r\n    local lex = lexer(source)\r\n    local root = ast.Root(ast.List())\r\n    \r\n    for node in (function() return ast.next(lex) end) do\r\n        root:append(node)\r\n    end\r\n    \r\n    root = root:gen(ast.Generator())\r\n    \r\n    if struct.cache == true then\r\n        cache[source] = root\r\n    end\r\n    \r\n    return root\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "if struct.cache ~= nil and cache[source] then\r\n        return cache[source]\r\n    end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "local lex = lexer(source)",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "local root = ast.Root(ast.List())",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "for node in (function() return ast.next(lex) end) do\r\n        root:append(node)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 9,
    "text": "root:append(node)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "root = root:gen(ast.Generator())",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "if struct.cache == true then\r\n        cache[source] = root\r\n    end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "cache[source] = root",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function ast.error(lex, expected)\r\n    error(\"vstruct: parsing format string at \"..lex.where()..\": expected \"..expected..\", got \"..lex.peek().type)\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "error(\"vstruct: parsing format string at \"..lex.where()..\": expected \"..expected..\", got \"..lex.peek().type)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function ast.name(lex)\r\n    local name = lex.next().text\r\n    local next = lex.peek()\r\n    \r\n    if next and next.type == \"number\" and not lex.whitespace() then\r\n        return ast.IO(name, lex.next().text)\r\n    else\r\n        return ast.IO(name, nil)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "local name = lex.next().text",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "local next = lex.peek()",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "if next and next.type == \"number\" and not lex.whitespace() then\r\n        return ast.IO(name, lex.next().text)\r\n    else\r\n        return ast.IO(name, nil)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function ast.key(lex)\r\n    local name = lex.next().text\r\n    local next = lex.peek()\r\n    \r\n    next = ast.next(lex)\r\n    if next.tag == \"io\" or next.tag == \"table\" then\r\n        return ast.Name(name, next)\r\n    else\r\n        ast.error(lex, \"value (field or table)\")\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "next = ast.next(lex)",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "if next.tag == \"io\" or next.tag == \"table\" then\r\n        return ast.Name(name, next)\r\n    else\r\n        ast.error(lex, \"value (field or table)\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "ast.error(lex, \"value (field or table)\")",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function ast.next(lex)\r\n    local tok = lex.peek()\r\n    \r\n    if not tok then\r\n        return nil\r\n    end\r\n    \r\n    if tok.type == '(' then\r\n        return ast.group(lex)\r\n    \r\n    elseif tok.type == '{' then\r\n        return ast.table(lex)\r\n    \r\n    elseif tok.type == '[' then\r\n        return ast.bitpack(lex)\r\n        \r\n    elseif tok.type == \"name\" then\r\n        return ast.name(lex)\r\n    \r\n    elseif tok.type == \"key\" then\r\n        return ast.key(lex)\r\n        \r\n    elseif tok.type == \"number\" then\r\n        return ast.repetition(lex)\r\n        \r\n    elseif tok.type == \"control\" then\r\n        return ast.control(lex)\r\n        \r\n    else\r\n        ast.error(lex, \"'(', '{', '[', name, number, control, or io specifier\")\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "local tok = lex.peek()",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "if not tok then\r\n        return nil\r\n    end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "if tok.type == '(' then\r\n        return ast.group(lex)\r\n    \r\n    elseif tok.type == '{' then\r\n        return ast.table(lex)\r\n    \r\n    elseif tok.type == '[' then\r\n        return ast.bitpack(lex)\r\n        \r\n    elseif tok.type == \"name\" then\r\n        return ast.name(lex)\r\n    \r\n    elseif tok.type == \"key\" then\r\n        return ast.key(lex)\r\n        \r\n    elseif tok.type == \"number\" then\r\n        return ast.repetition(lex)\r\n        \r\n    elseif tok.type == \"control\" then\r\n        return ast.control(lex)\r\n        \r\n    else\r\n        ast.error(lex, \"'(', '{', '[', name, number, control, or io specifier\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "ast.error(lex, \"'(', '{', '[', name, number, control, or io specifier\")",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function ast.repetition(lex)\r\n    local count = tonumber(lex.next().text)\r\n    ast.require(lex, \"*\");\r\n\r\n    return ast.Repeat(count, ast.next(lex))\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "local count = tonumber(lex.next().text)",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "ast.require(lex, \"*\")",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function ast.group(lex)\r\n    ast.require(lex, '(')\r\n    \r\n    local group = ast.List()\r\n    group.tag = \"group\"\r\n    \r\n    while lex.peek().type ~= ')' do\r\n        group:append(ast.next(lex))\r\n    end\r\n    \r\n    ast.require(lex, ')')\r\n    return group\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "ast.require(lex, '(')",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "local group = ast.List()",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "group.tag = \"group\"",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "while lex.peek().type ~= ')' do\r\n        group:append(ast.next(lex))\r\n    end",
    "type": "statement:while"
  }, {
    "id": 42,
    "text": "group:append(ast.next(lex))",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "ast.require(lex, ')')",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function ast.table(lex)\r\n    ast.require(lex, '{')\r\n    \r\n    local group = ast.Table()\r\n    \r\n    while lex.peek().type ~= '}' do\r\n        group:append(ast.next(lex))\r\n    end\r\n    \r\n    ast.require(lex, '}')\r\n    return group\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "ast.require(lex, '{')",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "local group = ast.Table()",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "while lex.peek().type ~= '}' do\r\n        group:append(ast.next(lex))\r\n    end",
    "type": "statement:while"
  }, {
    "id": 49,
    "text": "ast.require(lex, '}')",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "function ast.bitpack(lex)\r\n    ast.require(lex, \"[\")\r\n    \r\n    local bitpack = ast.Bitpack(tonumber(ast.require(lex, \"number\").text))\r\n    \r\n    ast.require(lex, \"|\")\r\n    \r\n    while lex.peek().type ~= \"]\" do\r\n        bitpack:append(ast.next(lex))\r\n    end\r\n    \r\n    ast.require(lex, \"]\")\r\n    bitpack:finalize()\r\n    return bitpack\r\nend",
    "type": "function"
  }, {
    "id": 52,
    "text": "ast.require(lex, \"[\")",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "local bitpack = ast.Bitpack(tonumber(ast.require(lex, \"number\").text))",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "ast.require(lex, \"|\")",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "while lex.peek().type ~= \"]\" do\r\n        bitpack:append(ast.next(lex))\r\n    end",
    "type": "statement:while"
  }, {
    "id": 56,
    "text": "bitpack:append(ast.next(lex))",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "ast.require(lex, \"]\")",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "bitpack:finalize()",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function ast.require(lex, type)\r\n    local t = lex.next()\r\n    \r\n    if t.type ~= type then\r\n        ast.error(lex, type)\r\n    end\r\n    \r\n    return t\r\nend",
    "type": "function"
  }, {
    "id": 61,
    "text": "local t = lex.next()",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "if t.type ~= type then\r\n        ast.error(lex, type)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "ast.error(lex, type)",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "function() return ast.next(lex) end",
    "type": "function"
  }, {
    "id": 66,
    "text": "",
    "type": "function container"
  }, {
    "id": 67,
    "text": "IO",
    "type": "global function"
  }, {
    "id": 68,
    "text": "Repeat",
    "type": "global function"
  }, {
    "id": 69,
    "text": "Bitpack",
    "type": "global function"
  }, {
    "id": 70,
    "text": "control",
    "type": "global function"
  }, {
    "id": 71,
    "text": "Generator",
    "type": "global function"
  }, {
    "id": 72,
    "text": "Name",
    "type": "global function"
  }, {
    "id": 73,
    "text": "Root",
    "type": "global function"
  }, {
    "id": 74,
    "text": "List",
    "type": "global function"
  }, {
    "id": 75,
    "text": "vstruct",
    "type": "module"
  }, {
    "id": 76,
    "text": "Table",
    "type": "global function"
  }, {
    "id": 77,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 78,
    "text": "next",
    "type": "global function"
  }, {
    "id": 79,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 80,
    "text": "peek",
    "type": "global function"
  }, {
    "id": 81,
    "text": "lexer",
    "type": "global function"
  }, {
    "id": 82,
    "text": "error",
    "type": "global function"
  }, {
    "id": 83,
    "text": "whitespace",
    "type": "global function"
  }, {
    "id": 84,
    "text": "where",
    "type": "global function"
  }, {
    "id": 85,
    "text": "require",
    "type": "global function"
  }, {
    "id": 86,
    "text": "",
    "type": "variable container"
  }, {
    "id": 87,
    "text": "",
    "type": "require container"
  }, {
    "id": 88,
    "text": "",
    "type": "local variable"
  }, {
    "id": 89,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 90,
    "text": "",
    "type": "local variable"
  }, {
    "id": 91,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 92,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 93,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 94,
    "text": "",
    "type": "interface container"
  }, {
    "id": 95,
    "text": "",
    "type": "interface"
  }, {
    "id": 96,
    "text": "",
    "type": "require local variable"
  } ]
}