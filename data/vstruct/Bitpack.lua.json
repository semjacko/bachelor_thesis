{
  "_filename": "Bitpack.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/vstruct/vstruct/ast/Bitpack.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 20,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 20,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 20,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 20,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "calls",
    "to": 28
  }, {
    "from": 3,
    "label": "calls",
    "to": 27
  }, {
    "from": 25,
    "label": "calls",
    "to": 29
  }, {
    "from": 7,
    "label": "calls",
    "to": 26
  }, {
    "from": 7,
    "label": "calls",
    "to": 26
  }, {
    "from": 12,
    "label": "calls",
    "to": 26
  }, {
    "from": 1,
    "label": "contains",
    "to": 25
  }, {
    "from": 25,
    "label": "declares",
    "to": 3
  }, {
    "from": 25,
    "label": "declares",
    "to": 7
  }, {
    "from": 25,
    "label": "declares",
    "to": 12
  }, {
    "from": 25,
    "label": "declares",
    "to": 15
  }, {
    "from": 25,
    "label": "declares",
    "to": 20
  }, {
    "from": 1,
    "label": "contains",
    "to": 30
  }, {
    "from": 1,
    "label": "contains",
    "to": 31
  }, {
    "from": 31,
    "label": "initializes",
    "to": 32
  }, {
    "from": 32,
    "label": "requires",
    "to": 2
  }, {
    "from": 1,
    "label": "provides",
    "to": 33
  }, {
    "from": 33,
    "label": "provides",
    "to": 34
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "Bitpack",
    "type": "module"
  }, {
    "id": 2,
    "text": "List",
    "type": "module"
  }, {
    "id": 3,
    "text": "function Bitpack:show()\r\n        print(\"bitpack\", size)\r\n        children:show()\r\n    end",
    "type": "function"
  }, {
    "id": 4,
    "text": "print(\"bitpack\", size)",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "children:show()",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "function Bitpack:append(node)\r\n        children:append(node)\r\n        assert(children.width, \"bitpacks cannot contain variable-width fields\")\r\n        assert(children.width <= size*8, \"bitpack contents are larger than containing bitpack\")\r\n    end",
    "type": "function"
  }, {
    "id": 8,
    "text": "children:append(node)",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "assert(children.width, \"bitpacks cannot contain variable-width fields\")",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "assert(children.width <= size*8, \"bitpack contents are larger than containing bitpack\")",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function Bitpack:finalize()\r\n        assert(children.width == size*8, \"bitpack contents are smaller than containing bitpack\")\r\n    end",
    "type": "function"
  }, {
    "id": 13,
    "text": "assert(children.width == size*8, \"bitpack contents are smaller than containing bitpack\")",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function Bitpack:gen(generator)\r\n        generator:bitpack(size)\r\n        children:gen(generator)\r\n        generator:bitpack()\r\n    end",
    "type": "function"
  }, {
    "id": 16,
    "text": "generator:bitpack(size)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "children:gen(generator)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "generator:bitpack()",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function(size)\r\n    local Bitpack = {\r\n        tag = \"bitpack\";\r\n        width = size;\r\n    }\r\n    \r\n    local children = List();\r\n    \r\n    function Bitpack:show()\r\n        print(\"bitpack\", size)\r\n        children:show()\r\n    end\r\n    \r\n    function Bitpack:append(node)\r\n        children:append(node)\r\n        assert(children.width, \"bitpacks cannot contain variable-width fields\")\r\n        assert(children.width <= size*8, \"bitpack contents are larger than containing bitpack\")\r\n    end\r\n    \r\n    function Bitpack:finalize()\r\n        assert(children.width == size*8, \"bitpack contents are smaller than containing bitpack\")\r\n    end\r\n    \r\n    function Bitpack:gen(generator)\r\n        generator:bitpack(size)\r\n        children:gen(generator)\r\n        generator:bitpack()\r\n    end\r\n    \r\n    return Bitpack\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "local Bitpack = {\r\n        tag = \"bitpack\";\r\n        width = size;\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "local children = List()",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "",
    "type": "function container"
  }, {
    "id": 26,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 27,
    "text": "print",
    "type": "global function"
  }, {
    "id": 28,
    "text": "require",
    "type": "global function"
  }, {
    "id": 29,
    "text": "List",
    "type": "global function"
  }, {
    "id": 30,
    "text": "",
    "type": "variable container"
  }, {
    "id": 31,
    "text": "",
    "type": "require container"
  }, {
    "id": 32,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 33,
    "text": "",
    "type": "interface container"
  }, {
    "id": 34,
    "text": "",
    "type": "interface"
  } ]
}