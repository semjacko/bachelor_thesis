{
  "_filename": "Table.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/vstruct/vstruct/ast/Table.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 4
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 18,
    "label": "has",
    "to": 4
  }, {
    "from": 15,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 15,
    "label": "has",
    "to": 4
  }, {
    "from": 14,
    "label": "has",
    "to": 25
  }, {
    "from": 14,
    "label": "has",
    "to": 4
  }, {
    "from": 14,
    "label": "has",
    "to": 4
  }, {
    "from": 14,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 16
  }, {
    "from": 27,
    "label": "has",
    "to": 17
  }, {
    "from": 27,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 18,
    "label": "has",
    "to": 4
  }, {
    "from": 27,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 27,
    "label": "has",
    "to": 4
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 19
  }, {
    "from": 29,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 29,
    "label": "has",
    "to": 4
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 24
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 33,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 38,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 18,
    "label": "has",
    "to": 4
  }, {
    "from": 15,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 15,
    "label": "has",
    "to": 4
  }, {
    "from": 14,
    "label": "has",
    "to": 25
  }, {
    "from": 14,
    "label": "has",
    "to": 4
  }, {
    "from": 14,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "calls",
    "to": 46
  }, {
    "from": 27,
    "label": "calls",
    "to": 46
  }, {
    "from": 14,
    "label": "calls",
    "to": 27
  }, {
    "from": 14,
    "label": "calls",
    "to": 27
  }, {
    "from": 42,
    "label": "calls",
    "to": 44
  }, {
    "from": 14,
    "label": "calls",
    "to": 47
  }, {
    "from": 6,
    "label": "calls",
    "to": 43
  }, {
    "from": 42,
    "label": "calls",
    "to": 45
  }, {
    "from": 2,
    "label": "contains",
    "to": 42
  }, {
    "from": 42,
    "label": "declares",
    "to": 3
  }, {
    "from": 42,
    "label": "declares",
    "to": 6
  }, {
    "from": 42,
    "label": "declares",
    "to": 10
  }, {
    "from": 42,
    "label": "declares",
    "to": 14
  }, {
    "from": 42,
    "label": "declares",
    "to": 27
  }, {
    "from": 42,
    "label": "declares",
    "to": 29
  }, {
    "from": 42,
    "label": "declares",
    "to": 31
  }, {
    "from": 42,
    "label": "declares",
    "to": 33
  }, {
    "from": 42,
    "label": "declares",
    "to": 38
  }, {
    "from": 2,
    "label": "contains",
    "to": 48
  }, {
    "from": 2,
    "label": "contains",
    "to": 49
  }, {
    "from": 48,
    "label": "initializes",
    "to": 50
  }, {
    "from": 50,
    "label": "assigns",
    "to": 51
  }, {
    "from": 49,
    "label": "initializes",
    "to": 52
  }, {
    "from": 52,
    "label": "requires",
    "to": 1
  }, {
    "from": 2,
    "label": "provides",
    "to": 53
  }, {
    "from": 53,
    "label": "provides",
    "to": 54
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "List",
    "type": "module"
  }, {
    "id": 2,
    "text": "Table",
    "type": "module"
  }, {
    "id": 3,
    "text": "function Table:append(...)\r\n        return Table.list:append(...)\r\n    end",
    "type": "function"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "function Table:show()\r\n        print(\"table\", Table.width, #Table.list)\r\n        self.list:show()\r\n    end",
    "type": "function"
  }, {
    "id": 7,
    "text": "print(\"table\", Table.width, #Table.list)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "self.list:show()",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function Table:unpack(fd, buf, data)\r\n        local value = {}\r\n        self.list:unpack(fd, buf, value)\r\n        return value\r\n    end",
    "type": "function"
  }, {
    "id": 11,
    "text": "local value = {}",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "self.list:unpack(fd, buf, value)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function Table:pack(fd, data, key)\r\n        local function wrapdata(t)\r\n            local key = nil\r\n            local n = 1\r\n            \r\n            local function next()\r\n                local v\r\n                if key ~= nil then\r\n                    v,key = t[key],nil\r\n                else\r\n                    v,n = t[n],n+1\r\n                end\r\n                return v\r\n            end\r\n            \r\n            local function setkey(self, newkey)\r\n                key = newkey\r\n            end\r\n            \r\n            return setmetatable({ next=next, key=setkey }, WRAPPER)\r\n        end\r\n        \r\n        if getmetatable(data) == WRAPPER then\r\n            return self.list:pack(fd, wrapdata(data:next()), key)\r\n        else\r\n            return self.list:pack(fd, wrapdata(data), key)\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 15,
    "text": "local function wrapdata(t)\r\n            local key = nil\r\n            local n = 1\r\n            \r\n            local function next()\r\n                local v\r\n                if key ~= nil then\r\n                    v,key = t[key],nil\r\n                else\r\n                    v,n = t[n],n+1\r\n                end\r\n                return v\r\n            end\r\n            \r\n            local function setkey(self, newkey)\r\n                key = newkey\r\n            end\r\n            \r\n            return setmetatable({ next=next, key=setkey }, WRAPPER)\r\n        end",
    "type": "statement:localfunction"
  }, {
    "id": 16,
    "text": "local key = nil",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "local n = 1",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "local function next()\r\n                local v\r\n                if key ~= nil then\r\n                    v,key = t[key],nil\r\n                else\r\n                    v,n = t[n],n+1\r\n                end\r\n                return v\r\n            end",
    "type": "statement:localfunction"
  }, {
    "id": 19,
    "text": "local v",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "if key ~= nil then\r\n                    v,key = t[key],nil\r\n                else\r\n                    v,n = t[n],n+1\r\n                end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "v,key = t[key],nil",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "v,n = t[n],n+1",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "local function setkey(self, newkey)\r\n                key = newkey\r\n            end",
    "type": "statement:localfunction"
  }, {
    "id": 24,
    "text": "key = newkey",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "if getmetatable(data) == WRAPPER then\r\n            return self.list:pack(fd, wrapdata(data:next()), key)\r\n        else\r\n            return self.list:pack(fd, wrapdata(data), key)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "local function wrapdata(t)\r\n            local key = nil\r\n            local n = 1\r\n            \r\n            local function next()\r\n                local v\r\n                if key ~= nil then\r\n                    v,key = t[key],nil\r\n                else\r\n                    v,n = t[n],n+1\r\n                end\r\n                return v\r\n            end\r\n            \r\n            local function setkey(self, newkey)\r\n                key = newkey\r\n            end\r\n            \r\n            return setmetatable({ next=next, key=setkey }, WRAPPER)\r\n        end",
    "type": "function"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "local function next()\r\n                local v\r\n                if key ~= nil then\r\n                    v,key = t[key],nil\r\n                else\r\n                    v,n = t[n],n+1\r\n                end\r\n                return v\r\n            end",
    "type": "function"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "local function setkey(self, newkey)\r\n                key = newkey\r\n            end",
    "type": "function"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function Table:gen(generator)\r\n        generator:starttable()\r\n        self.list:gen(generator)\r\n        generator:endtable()\r\n    end",
    "type": "function"
  }, {
    "id": 34,
    "text": "generator:starttable()",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "self.list:gen(generator)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "generator:endtable()",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function()\r\n    local Table = {\r\n        tag = \"table\";\r\n        list = List();\r\n    }\r\n    \r\n    setmetatable(Table, { __index = Table.list })\r\n    \r\n    function Table:append(...)\r\n        return Table.list:append(...)\r\n    end\r\n    \r\n    function Table:show()\r\n        print(\"table\", Table.width, #Table.list)\r\n        self.list:show()\r\n    end\r\n    \r\n    function Table:unpack(fd, buf, data)\r\n        local value = {}\r\n        self.list:unpack(fd, buf, value)\r\n        return value\r\n    end\r\n    \r\n    function Table:pack(fd, data, key)\r\n        local function wrapdata(t)\r\n            local key = nil\r\n            local n = 1\r\n            \r\n            local function next()\r\n                local v\r\n                if key ~= nil then\r\n                    v,key = t[key],nil\r\n                else\r\n                    v,n = t[n],n+1\r\n                end\r\n                return v\r\n            end\r\n            \r\n            local function setkey(self, newkey)\r\n                key = newkey\r\n            end\r\n            \r\n            return setmetatable({ next=next, key=setkey }, WRAPPER)\r\n        end\r\n        \r\n        if getmetatable(data) == WRAPPER then\r\n            return self.list:pack(fd, wrapdata(data:next()), key)\r\n        else\r\n            return self.list:pack(fd, wrapdata(data), key)\r\n        end\r\n    end\r\n    \r\n    function Table:gen(generator)\r\n        generator:starttable()\r\n        self.list:gen(generator)\r\n        generator:endtable()\r\n    end\r\n    \r\n    return Table\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "local Table = {\r\n        tag = \"table\";\r\n        list = List();\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "setmetatable(Table, { __index = Table.list })",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "",
    "type": "function container"
  }, {
    "id": 43,
    "text": "print",
    "type": "global function"
  }, {
    "id": 44,
    "text": "require",
    "type": "global function"
  }, {
    "id": 45,
    "text": "List",
    "type": "global function"
  }, {
    "id": 46,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 47,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 48,
    "text": "",
    "type": "variable container"
  }, {
    "id": 49,
    "text": "",
    "type": "require container"
  }, {
    "id": 50,
    "text": "",
    "type": "local variable"
  }, {
    "id": 51,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 52,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 53,
    "text": "",
    "type": "interface container"
  }, {
    "id": 54,
    "text": "",
    "type": "interface"
  } ]
}