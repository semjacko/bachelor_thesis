{
  "_filename": "common.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/vstruct/vstruct/test/common.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 3
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 8,
    "label": "has",
    "to": 3
  }, {
    "from": 8,
    "label": "has",
    "to": 3
  }, {
    "from": 8,
    "label": "has",
    "to": 3
  }, {
    "from": 8,
    "label": "has",
    "to": 3
  }, {
    "from": 8,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 24,
    "label": "has",
    "to": 30
  }, {
    "from": 24,
    "label": "has",
    "to": 31
  }, {
    "from": 24,
    "label": "has",
    "to": 32
  }, {
    "from": 24,
    "label": "has",
    "to": 33
  }, {
    "from": 24,
    "label": "has",
    "to": 34
  }, {
    "from": 24,
    "label": "has",
    "to": 35
  }, {
    "from": 24,
    "label": "has",
    "to": 36
  }, {
    "from": 24,
    "label": "has",
    "to": 37
  }, {
    "from": 24,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 41,
    "label": "has",
    "to": 51
  }, {
    "from": 41,
    "label": "has",
    "to": 52
  }, {
    "from": 41,
    "label": "has",
    "to": 53
  }, {
    "from": 41,
    "label": "has",
    "to": 54
  }, {
    "from": 39,
    "label": "has",
    "to": 3
  }, {
    "from": 39,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 3
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 3
  }, {
    "from": 59,
    "label": "has",
    "to": 3
  }, {
    "from": 8,
    "label": "calls",
    "to": 73
  }, {
    "from": 8,
    "label": "calls",
    "to": 73
  }, {
    "from": 2,
    "label": "calls",
    "to": 65
  }, {
    "from": 24,
    "label": "calls",
    "to": 5
  }, {
    "from": 24,
    "label": "calls",
    "to": 5
  }, {
    "from": 24,
    "label": "calls",
    "to": 68
  }, {
    "from": 24,
    "label": "calls",
    "to": 68
  }, {
    "from": 24,
    "label": "calls",
    "to": 68
  }, {
    "from": 24,
    "label": "calls",
    "to": 68
  }, {
    "from": 24,
    "label": "calls",
    "to": 72
  }, {
    "from": 24,
    "label": "calls",
    "to": 72
  }, {
    "from": 24,
    "label": "calls",
    "to": 72
  }, {
    "from": 24,
    "label": "calls",
    "to": 72
  }, {
    "from": 39,
    "label": "calls",
    "to": 66
  }, {
    "from": 39,
    "label": "calls",
    "to": 66
  }, {
    "from": 24,
    "label": "calls",
    "to": 64
  }, {
    "from": 24,
    "label": "calls",
    "to": 64
  }, {
    "from": 16,
    "label": "calls",
    "to": 69
  }, {
    "from": 21,
    "label": "calls",
    "to": 69
  }, {
    "from": 39,
    "label": "calls",
    "to": 67
  }, {
    "from": 39,
    "label": "calls",
    "to": 67
  }, {
    "from": 39,
    "label": "calls",
    "to": 67
  }, {
    "from": 39,
    "label": "calls",
    "to": 67
  }, {
    "from": 39,
    "label": "calls",
    "to": 67
  }, {
    "from": 39,
    "label": "calls",
    "to": 67
  }, {
    "from": 39,
    "label": "calls",
    "to": 67
  }, {
    "from": 8,
    "label": "calls",
    "to": 75
  }, {
    "from": 8,
    "label": "calls",
    "to": 75
  }, {
    "from": 8,
    "label": "calls",
    "to": 75
  }, {
    "from": 24,
    "label": "calls",
    "to": 75
  }, {
    "from": 39,
    "label": "calls",
    "to": 75
  }, {
    "from": 56,
    "label": "calls",
    "to": 70
  }, {
    "from": 24,
    "label": "calls",
    "to": 63
  }, {
    "from": 24,
    "label": "calls",
    "to": 63
  }, {
    "from": 2,
    "label": "calls",
    "to": 71
  }, {
    "from": 24,
    "label": "calls",
    "to": 77
  }, {
    "from": 24,
    "label": "calls",
    "to": 77
  }, {
    "from": 61,
    "label": "calls",
    "to": 74
  }, {
    "from": 56,
    "label": "calls",
    "to": 76
  }, {
    "from": 8,
    "label": "calls",
    "to": 8
  }, {
    "from": 8,
    "label": "calls",
    "to": 8
  }, {
    "from": 1,
    "label": "contains",
    "to": 61
  }, {
    "from": 61,
    "label": "declares",
    "to": 2
  }, {
    "from": 61,
    "label": "declares",
    "to": 5
  }, {
    "from": 61,
    "label": "declares",
    "to": 8
  }, {
    "from": 61,
    "label": "declares",
    "to": 16
  }, {
    "from": 61,
    "label": "declares",
    "to": 21
  }, {
    "from": 61,
    "label": "declares",
    "to": 24
  }, {
    "from": 61,
    "label": "declares",
    "to": 39
  }, {
    "from": 61,
    "label": "declares",
    "to": 56
  }, {
    "from": 61,
    "label": "declares",
    "to": 58
  }, {
    "from": 61,
    "label": "declares",
    "to": 59
  }, {
    "from": 61,
    "label": "declares",
    "to": 60
  }, {
    "from": 78,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 79
  }, {
    "from": 1,
    "label": "contains",
    "to": 80
  }, {
    "from": 79,
    "label": "initializes",
    "to": 81
  }, {
    "from": 81,
    "label": "assigns",
    "to": 82
  }, {
    "from": 79,
    "label": "initializes",
    "to": 83
  }, {
    "from": 83,
    "label": "assigns",
    "to": 84
  }, {
    "from": 79,
    "label": "initializes",
    "to": 85
  }, {
    "from": 85,
    "label": "assigns",
    "to": 86
  }, {
    "from": 86,
    "label": "assigns",
    "to": 87
  }, {
    "from": 87,
    "label": "assigns",
    "to": 88
  }, {
    "from": 80,
    "label": "initializes",
    "to": 89
  }, {
    "from": 89,
    "label": "requires",
    "to": 62
  }, {
    "from": 1,
    "label": "provides",
    "to": 90
  }, {
    "from": 85,
    "label": "represents",
    "to": 91
  }, {
    "from": 90,
    "label": "provides",
    "to": 91
  }, {
    "from": 92,
    "label": "requires",
    "to": 1
  }, {
    "from": 93,
    "label": "requires",
    "to": 1
  }, {
    "from": 94,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "common",
    "type": "module"
  }, {
    "id": 2,
    "text": "function test.x(str)\r\n\treturn (str:gsub(\"%X\", \"\"):gsub(\"%x%x\", function(b) return char(tonumber(b, 16)) end))\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "function test.od(str, sep)\r\n\tlocal fmt = \"%02X\"..(sep or \" \")\r\n    return (str:gsub('.', function(c) return fmt:format(c:byte()) end))\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local fmt = \"%02X\"..(sep or \" \")",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function test.eq(x, y)\r\n\tif type(x) ~= type(y) then return false end\r\n\t\r\n\tif type(x) == 'table' then\r\n\t\tfor k,v in pairs(x) do\r\n\t\t\tif not test.eq(v, y[k]) then return false end\r\n\t\tend\r\n\t\tfor k,v in pairs(y) do\r\n\t\t\tif not test.eq(v, x[k]) then return false end\r\n\t\tend\r\n\t\treturn true\r\n\tend\r\n\r\n\treturn x == y\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "if type(x) ~= type(y) then return false end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "if type(x) == 'table' then\r\n\t\tfor k,v in pairs(x) do\r\n\t\t\tif not test.eq(v, y[k]) then return false end\r\n\t\tend\r\n\t\tfor k,v in pairs(y) do\r\n\t\t\tif not test.eq(v, x[k]) then return false end\r\n\t\tend\r\n\t\treturn true\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "for k,v in pairs(x) do\r\n\t\t\tif not test.eq(v, y[k]) then return false end\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 12,
    "text": "if not test.eq(v, y[k]) then return false end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "for k,v in pairs(y) do\r\n\t\t\tif not test.eq(v, x[k]) then return false end\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 14,
    "text": "if not test.eq(v, x[k]) then return false end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function test.group(name)\r\n\tlocal group = { name=name }\r\n\ttable.insert(test.results, group)\r\n\ttest.current_group = group\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "local group = { name=name }",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "table.insert(test.results, group)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "test.current_group = group",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function test.record(name, result, data)\r\n\ttable.insert(test.current_group, { name=name, result=result, message=message, data=data })\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "table.insert(test.current_group, { name=name, result=result, message=message, data=data })",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function test.autotest(name, format, buffer, data, output)\r\n\tlocal eq = test.eq\r\n\tlocal record = test.record\r\n\t\r\n\toutput = output or buffer\r\n\t\r\n\tif type(data) ~= \"table\" then data = {data} end\r\n\t\r\n\tlocal unpacked = vstruct.unpack(format, buffer)\r\n\tlocal packed = vstruct.pack(format, unpacked)\r\n\t\r\n\trecord(name..\" (U )\", eq(unpacked, data), unpack(unpacked))\r\n\trecord(name..\" (UP)\", eq(packed, output), test.od(packed))\r\n\r\n\tlocal packed = vstruct.pack(format, data)\r\n\tlocal unpacked = vstruct.unpack(format, packed)\r\n\t\r\n\trecord(name..\" (P )\", eq(packed, output), test.od(packed))\r\n\trecord(name..\" (PU)\", eq(unpacked, data), unpack(unpacked))\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "local eq = test.eq",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "local record = test.record",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "output = output or buffer",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "if type(data) ~= \"table\" then data = {data} end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "data = {data}",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "local unpacked = vstruct.unpack(format, buffer)",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "local packed = vstruct.pack(format, unpacked)",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "record(name..\" (U )\", eq(unpacked, data), unpack(unpacked))",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "record(name..\" (UP)\", eq(packed, output), test.od(packed))",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "local packed = vstruct.pack(format, data)",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "local unpacked = vstruct.unpack(format, packed)",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "record(name..\" (P )\", eq(packed, output), test.od(packed))",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "record(name..\" (PU)\", eq(unpacked, data), unpack(unpacked))",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function test.report()\r\n    local allfailed = 0\r\n\tfor _,group in ipairs(test.results) do\r\n\t\tlocal failed = 0\r\n\t\tprint(\"\\t=== \"..group.name..\" ===\")\r\n\r\n\t\tfor _,test in ipairs(group) do\r\n\t\t    if not test.result then\r\n\t\t        failed = failed + 1\r\n\t\t        print(\"FAIL\", test.name)\r\n\t\t        if type(test.data) == 'string' and test.data:match(\"%z\") then\r\n\t\t            print(\"\", (test.data:gsub(\"%z\", \".\")))\r\n\t\t        else\r\n\t\t            print(\"\",     test.data)\r\n\t\t        end\r\n\t\t    end\r\n\t\tend\r\n\t\t\r\n\t\tprint(\"\\tTotal: \", #group)\r\n\t\tprint(\"\\tFailed:\", failed)\r\n\t\tprint()\r\n\t\tallfailed = allfailed + failed\r\n\tend\r\n\t\r\n\treturn allfailed\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "local allfailed = 0",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "for _,group in ipairs(test.results) do\r\n\t\tlocal failed = 0\r\n\t\tprint(\"\\t=== \"..group.name..\" ===\")\r\n\r\n\t\tfor _,test in ipairs(group) do\r\n\t\t    if not test.result then\r\n\t\t        failed = failed + 1\r\n\t\t        print(\"FAIL\", test.name)\r\n\t\t        if type(test.data) == 'string' and test.data:match(\"%z\") then\r\n\t\t            print(\"\", (test.data:gsub(\"%z\", \".\")))\r\n\t\t        else\r\n\t\t            print(\"\",     test.data)\r\n\t\t        end\r\n\t\t    end\r\n\t\tend\r\n\t\t\r\n\t\tprint(\"\\tTotal: \", #group)\r\n\t\tprint(\"\\tFailed:\", failed)\r\n\t\tprint()\r\n\t\tallfailed = allfailed + failed\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 42,
    "text": "local failed = 0",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "print(\"\\t=== \"..group.name..\" ===\")",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "for _,test in ipairs(group) do\r\n\t\t    if not test.result then\r\n\t\t        failed = failed + 1\r\n\t\t        print(\"FAIL\", test.name)\r\n\t\t        if type(test.data) == 'string' and test.data:match(\"%z\") then\r\n\t\t            print(\"\", (test.data:gsub(\"%z\", \".\")))\r\n\t\t        else\r\n\t\t            print(\"\",     test.data)\r\n\t\t        end\r\n\t\t    end\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 45,
    "text": "if not test.result then\r\n\t\t        failed = failed + 1\r\n\t\t        print(\"FAIL\", test.name)\r\n\t\t        if type(test.data) == 'string' and test.data:match(\"%z\") then\r\n\t\t            print(\"\", (test.data:gsub(\"%z\", \".\")))\r\n\t\t        else\r\n\t\t            print(\"\",     test.data)\r\n\t\t        end\r\n\t\t    end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "failed = failed + 1",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "print(\"FAIL\", test.name)",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "if type(test.data) == 'string' and test.data:match(\"%z\") then\r\n\t\t            print(\"\", (test.data:gsub(\"%z\", \".\")))\r\n\t\t        else\r\n\t\t            print(\"\",     test.data)\r\n\t\t        end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "print(\"\", (test.data:gsub(\"%z\", \".\")))",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "print(\"\",     test.data)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "print(\"\\tTotal: \", #group)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "print(\"\\tFailed:\", failed)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "print()",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "allfailed = allfailed + failed",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function test.bigendian()\r\n    return string.byte(string.dump(function() end)) == 0x00\r\nend",
    "type": "function"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function(b) return char(tonumber(b, 16)) end",
    "type": "function"
  }, {
    "id": 59,
    "text": "function(c) return fmt:format(c:byte()) end",
    "type": "function"
  }, {
    "id": 60,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 61,
    "text": "",
    "type": "function container"
  }, {
    "id": 62,
    "text": "vstruct",
    "type": "module"
  }, {
    "id": 63,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 64,
    "text": "pack",
    "type": "global function"
  }, {
    "id": 65,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 66,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 67,
    "text": "print",
    "type": "global function"
  }, {
    "id": 68,
    "text": "eq",
    "type": "global function"
  }, {
    "id": 69,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 70,
    "text": "dump",
    "type": "global function"
  }, {
    "id": 71,
    "text": "char",
    "type": "global function"
  }, {
    "id": 72,
    "text": "record",
    "type": "global function"
  }, {
    "id": 73,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 74,
    "text": "require",
    "type": "global function"
  }, {
    "id": 75,
    "text": "type",
    "type": "global function"
  }, {
    "id": 76,
    "text": "byte",
    "type": "global function"
  }, {
    "id": 77,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 78,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 79,
    "text": "",
    "type": "variable container"
  }, {
    "id": 80,
    "text": "",
    "type": "require container"
  }, {
    "id": 81,
    "text": "",
    "type": "local variable"
  }, {
    "id": 82,
    "text": "",
    "type": "n/a"
  }, {
    "id": 83,
    "text": "",
    "type": "local variable"
  }, {
    "id": 84,
    "text": "",
    "type": "n/a"
  }, {
    "id": 85,
    "text": "",
    "type": "local variable"
  }, {
    "id": 86,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 87,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 88,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 89,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 90,
    "text": "",
    "type": "interface container"
  }, {
    "id": 91,
    "text": "",
    "type": "interface"
  }, {
    "id": 92,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 93,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 94,
    "text": "",
    "type": "require local variable"
  } ]
}