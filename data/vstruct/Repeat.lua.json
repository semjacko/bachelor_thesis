{
  "_filename": "Repeat.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/vstruct/vstruct/ast/Repeat.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 6,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 2
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 12,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 2,
    "label": "calls",
    "to": 18
  }, {
    "from": 2,
    "label": "calls",
    "to": 17
  }, {
    "from": 1,
    "label": "contains",
    "to": 16
  }, {
    "from": 16,
    "label": "declares",
    "to": 2
  }, {
    "from": 16,
    "label": "declares",
    "to": 6
  }, {
    "from": 16,
    "label": "declares",
    "to": 12
  }, {
    "from": 1,
    "label": "contains",
    "to": 19
  }, {
    "from": 1,
    "label": "contains",
    "to": 20
  }, {
    "from": 1,
    "label": "provides",
    "to": 21
  }, {
    "from": 21,
    "label": "provides",
    "to": 22
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "Repeat",
    "type": "module"
  }, {
    "id": 2,
    "text": "function Repeat:show()\r\n        io.write(\"repeat\\t\"..tostring(count)..\"\\t\")\r\n        value:show()\r\n    end",
    "type": "function"
  }, {
    "id": 3,
    "text": "io.write(\"repeat\\t\"..tostring(count)..\"\\t\")",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "value:show()",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "function Repeat:gen(generator)\r\n        if count > 0 then\r\n            generator:startloop(count)\r\n            value:gen(generator)\r\n            generator:endloop(count)\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 7,
    "text": "if count > 0 then\r\n            generator:startloop(count)\r\n            value:gen(generator)\r\n            generator:endloop(count)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "generator:startloop(count)",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "value:gen(generator)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "generator:endloop(count)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function(count, value)\r\n    local Repeat = {\r\n        tag = \"repeat\";\r\n        width = (value.width and count * value.width) or nil;\r\n        count = count;\r\n        value = value;\r\n    }\r\n    \r\n    function Repeat:show()\r\n        io.write(\"repeat\\t\"..tostring(count)..\"\\t\")\r\n        value:show()\r\n    end\r\n    \r\n    function Repeat:gen(generator)\r\n        if count > 0 then\r\n            generator:startloop(count)\r\n            value:gen(generator)\r\n            generator:endloop(count)\r\n        end\r\n    end\r\n    \r\n    return Repeat\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "local Repeat = {\r\n        tag = \"repeat\";\r\n        width = (value.width and count * value.width) or nil;\r\n        count = count;\r\n        value = value;\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "",
    "type": "function container"
  }, {
    "id": 17,
    "text": "write",
    "type": "global function"
  }, {
    "id": 18,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 19,
    "text": "",
    "type": "variable container"
  }, {
    "id": 20,
    "text": "",
    "type": "require container"
  }, {
    "id": 21,
    "text": "",
    "type": "interface container"
  }, {
    "id": 22,
    "text": "",
    "type": "interface"
  } ]
}