{
  "_filename": "formatter.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luapretty/src/luapretty/formatter.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "calls",
    "to": 63
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 13,
    "label": "has",
    "to": 17
  }, {
    "from": 13,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 13,
    "label": "has",
    "to": 22
  }, {
    "from": 13,
    "label": "has",
    "to": 17
  }, {
    "from": 13,
    "label": "has",
    "to": 17
  }, {
    "from": 13,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 17
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 17
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 31,
    "label": "has",
    "to": 37
  }, {
    "from": 31,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 31,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 44,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 42,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 55,
    "label": "has",
    "to": 58
  }, {
    "from": 31,
    "label": "has",
    "to": 59
  }, {
    "from": 30,
    "label": "has",
    "to": 17
  }, {
    "from": 28,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 31,
    "label": "has",
    "to": 37
  }, {
    "from": 31,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 31,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 44,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 42,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 55,
    "label": "has",
    "to": 58
  }, {
    "from": 31,
    "label": "has",
    "to": 59
  }, {
    "from": 61,
    "label": "has",
    "to": 17
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 64,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 64,
    "label": "has",
    "to": 70
  }, {
    "from": 63,
    "label": "has",
    "to": 17
  }, {
    "from": 63,
    "label": "has",
    "to": 71
  }, {
    "from": 63,
    "label": "has",
    "to": 72
  }, {
    "from": 63,
    "label": "has",
    "to": 73
  }, {
    "from": 63,
    "label": "has",
    "to": 74
  }, {
    "from": 63,
    "label": "has",
    "to": 75
  }, {
    "from": 63,
    "label": "has",
    "to": 76
  }, {
    "from": 63,
    "label": "has",
    "to": 77
  }, {
    "from": 63,
    "label": "has",
    "to": 78
  }, {
    "from": 63,
    "label": "has",
    "to": 17
  }, {
    "from": 63,
    "label": "has",
    "to": 79
  }, {
    "from": 3,
    "label": "calls",
    "to": 88
  }, {
    "from": 7,
    "label": "calls",
    "to": 88
  }, {
    "from": 13,
    "label": "calls",
    "to": 88
  }, {
    "from": 28,
    "label": "calls",
    "to": 88
  }, {
    "from": 63,
    "label": "calls",
    "to": 84
  }, {
    "from": 63,
    "label": "calls",
    "to": 84
  }, {
    "from": 13,
    "label": "calls",
    "to": 13
  }, {
    "from": 28,
    "label": "calls",
    "to": 13
  }, {
    "from": 28,
    "label": "calls",
    "to": 13
  }, {
    "from": 63,
    "label": "calls",
    "to": 13
  }, {
    "from": 63,
    "label": "calls",
    "to": 95
  }, {
    "from": 63,
    "label": "calls",
    "to": 95
  }, {
    "from": 63,
    "label": "calls",
    "to": 82
  }, {
    "from": 63,
    "label": "calls",
    "to": 3
  }, {
    "from": 28,
    "label": "calls",
    "to": 86
  }, {
    "from": 28,
    "label": "calls",
    "to": 91
  }, {
    "from": 63,
    "label": "calls",
    "to": 90
  }, {
    "from": 7,
    "label": "calls",
    "to": 7
  }, {
    "from": 3,
    "label": "calls",
    "to": 85
  }, {
    "from": 63,
    "label": "calls",
    "to": 85
  }, {
    "from": 7,
    "label": "calls",
    "to": 89
  }, {
    "from": 63,
    "label": "calls",
    "to": 28
  }, {
    "from": 28,
    "label": "calls",
    "to": 96
  }, {
    "from": 28,
    "label": "calls",
    "to": 24
  }, {
    "from": 28,
    "label": "calls",
    "to": 24
  }, {
    "from": 28,
    "label": "calls",
    "to": 26
  }, {
    "from": 80,
    "label": "calls",
    "to": 92
  }, {
    "from": 28,
    "label": "calls",
    "to": 83
  }, {
    "from": 7,
    "label": "calls",
    "to": 93
  }, {
    "from": 13,
    "label": "calls",
    "to": 93
  }, {
    "from": 28,
    "label": "calls",
    "to": 93
  }, {
    "from": 28,
    "label": "calls",
    "to": 93
  }, {
    "from": 28,
    "label": "calls",
    "to": 93
  }, {
    "from": 28,
    "label": "calls",
    "to": 93
  }, {
    "from": 80,
    "label": "calls",
    "to": 94
  }, {
    "from": 80,
    "label": "calls",
    "to": 94
  }, {
    "from": 80,
    "label": "calls",
    "to": 94
  }, {
    "from": 80,
    "label": "calls",
    "to": 94
  }, {
    "from": 80,
    "label": "calls",
    "to": 94
  }, {
    "from": 80,
    "label": "calls",
    "to": 94
  }, {
    "from": 63,
    "label": "calls",
    "to": 94
  }, {
    "from": 63,
    "label": "calls",
    "to": 81
  }, {
    "from": 63,
    "label": "calls",
    "to": 81
  }, {
    "from": 28,
    "label": "calls",
    "to": 87
  }, {
    "from": 1,
    "label": "contains",
    "to": 80
  }, {
    "from": 80,
    "label": "declares",
    "to": 3
  }, {
    "from": 80,
    "label": "declares",
    "to": 7
  }, {
    "from": 80,
    "label": "declares",
    "to": 13
  }, {
    "from": 80,
    "label": "declares",
    "to": 24
  }, {
    "from": 80,
    "label": "declares",
    "to": 26
  }, {
    "from": 80,
    "label": "declares",
    "to": 28
  }, {
    "from": 80,
    "label": "declares",
    "to": 61
  }, {
    "from": 80,
    "label": "declares",
    "to": 63
  }, {
    "from": 1,
    "label": "contains",
    "to": 98
  }, {
    "from": 1,
    "label": "contains",
    "to": 99
  }, {
    "from": 99,
    "label": "initializes",
    "to": 100
  }, {
    "from": 100,
    "label": "requires",
    "to": 101
  }, {
    "from": 99,
    "label": "initializes",
    "to": 102
  }, {
    "from": 102,
    "label": "requires",
    "to": 103
  }, {
    "from": 99,
    "label": "initializes",
    "to": 104
  }, {
    "from": 104,
    "label": "requires",
    "to": 105
  }, {
    "from": 99,
    "label": "initializes",
    "to": 106
  }, {
    "from": 106,
    "label": "requires",
    "to": 107
  }, {
    "from": 99,
    "label": "initializes",
    "to": 108
  }, {
    "from": 108,
    "label": "requires",
    "to": 109
  }, {
    "from": 99,
    "label": "initializes",
    "to": 110
  }, {
    "from": 110,
    "label": "requires",
    "to": 97
  }, {
    "from": 111,
    "label": "requires",
    "to": 101
  }, {
    "from": 112,
    "label": "requires",
    "to": 103
  }, {
    "from": 113,
    "label": "requires",
    "to": 105
  }, {
    "from": 114,
    "label": "requires",
    "to": 107
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "formatter",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function process_text(text,template)\r\n\tlocal result,err=formatter.format_text(text,template);\r\n\tif(not result) then\r\n\t\terror(\"ERROR: \"..err);\r\n\tend\r\n\treturn result\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local function prepare_grammar(tbl)\r\n\tfor key,value in pairs(tbl) do\r\n\t\ttbl[key]=lpeg.C(value)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "for key,value in pairs(tbl) do\r\n\t\ttbl[key]=lpeg.C(value)\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 5,
    "text": "tbl[key]=lpeg.C(value)",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "local function print_table(tbl)\r\n\tfor key,value in pairs(tbl) do\r\n\t\tprint(key,\" \",value)\r\n\t\tif(type(value)==\"table\") then \r\n\t\t\tprint_table(value)\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "for key,value in pairs(tbl) do\r\n\t\tprint(key,\" \",value)\r\n\t\tif(type(value)==\"table\") then \r\n\t\t\tprint_table(value)\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 9,
    "text": "print(key,\" \",value)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "if(type(value)==\"table\") then \r\n\t\t\tprint_table(value)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "print_table(value)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "local function assemble_table(tbl)\r\n\tlocal output=\"\"\r\n\tlocal table_found=false\r\n\tif(templates[tbl['key']]) then\r\n\t\treturn tbl['str']\r\n\tend\r\n\tfor k,v in pairs(tbl) do\r\n\t\tif(type(v)==\"table\") then\r\n\t\t\toutput=output..assemble_table(v)\r\n\t\t\ttable_found=true\r\n\t\tend\r\n\tend\r\n\tif(table_found==false) then\r\n\t\treturn tbl['str']\r\n\tend\r\n\treturn output\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "local output=\"\"",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "local table_found=false",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "if(templates[tbl['key']]) then\r\n\t\treturn tbl['str']\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 18,
    "text": "for k,v in pairs(tbl) do\r\n\t\tif(type(v)==\"table\") then\r\n\t\t\toutput=output..assemble_table(v)\r\n\t\t\ttable_found=true\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 19,
    "text": "if(type(v)==\"table\") then\r\n\t\t\toutput=output..assemble_table(v)\r\n\t\t\ttable_found=true\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "output=output..assemble_table(v)",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "table_found=true",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "if(table_found==false) then\r\n\t\treturn tbl['str']\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function trim(str)\r\n\treturn str:gsub(\"^%s*(.-)%s*$\",\"%1\");\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function trim_ending(str)\r\n\treturn str:gsub(\"^(%s*.-)%s*$\",\"%1\");\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "local function prepare_captures(grammar_tbl,captures_tbl)\r\n\tfor key,value in pairs(grammar_tbl) do\r\n\t\tcaptures_tbl[key]=function(str,...)\r\n\t\t\tif templates[key] then\r\n\t\t\t\tlocal template=nil\r\n\t\t\t\tif(type(templates[key])==\"function\") then\r\n\t\t\t\t\ttemplate=templates[key](str,...)\r\n\t\t\t\telseif(type(templates[key])==\"number\") then\r\n\t\t\t\t\ttemplate=tostring(templates[key])\r\n\t\t\t\telse\r\n\t\t\t\t\ttemplate=templates[key]\r\n\t\t\t\tend\r\n\t\t\t\tlocal values={original_content=str,content=assemble_table({...})}\r\n\t\t\t\tif(values['content']) then\r\n\t\t\t\t\tvalues['trimmed_content']=trim(values['content']);\r\n\t\t\t\telse\r\n\t\t\t\t\tvalues['trimmed_content']=trim(str); -- if assembled node has no children nodes (assemble_table==nil)\r\n\t\t\t\tend\r\n\t\t\t\tfor k,v in ipairs({...}) do\r\n\t\t\t\t\tif(type(v)==\"table\") then\r\n\t\t\t\t\t\tlocal content=assemble_table(v);\r\n\t\t\t\t\t\tif(content:find(\"\\n\")) then -- discards operators, keywords etc.\r\n\t\t\t\t\t\t\tlocal _spaces=\"\"\r\n\t\t\t\t\t\t\tfor spaces in template:gmatch(\"\\n(%s+)$\"..v['key']:lower()) do -- will execute only once\r\n\t\t\t\t\t\t\t\tcontent=trim_ending(content:gsub(\"\\n\",\"\\n\"..spaces));\r\n\t\t\t\t\t\t\t\t_spaces=spaces;\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tif(#_spaces) then\r\n\t\t\t\t\t\t\t\t-- we replaced some spaces\r\n\t\t\t\t\t\t\t\t-- look for a multiline string, we cannot indent it's contents \r\n\t\t\t\t\t\t\t\tlocal change=0; -- byte offset created by replacing the \"replaced\" string by it's original\r\n\t\t\t\t\t\t\t\tfor a,b,c,d in content:gmatch(\"((['\\\"-]?)()%[%[.-\\n.-%]%]())\") do\r\n\t\t\t\t\t\t\t\t\tif(b==\"\") then\r\n\t\t\t\t\t\t\t\t\t\t-- only if the string is not encapsulated in quoted string or in a comment (could be for example \"9\"-[[8\\n]]\" but unlikely)\r\n\t\t\t\t\t\t\t\t\t\tcontent=content:sub(1,c-1-change)..a:gsub(\"\\n\".._spaces,\"\\n\")..content:sub(d-change);\r\n\t\t\t\t\t\t\t\t\t\tchange=change+(a:len()-a:gsub(\"\\n\".._spaces,\"\\n\"):len());\r\n\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tif(values[v['key']:lower()] and type(values[v['key']:lower()]~=\"table\")) then\r\n\t\t\t\t\t\t\t-- multiple cosmo replacements, make a table out of it\r\n\t\t\t\t\t\t\tvalues[v['key']:lower()]={values[v['key']:lower()],content}\r\n\t\t\t\t\t\telseif(values[v['key']:lower()]) then -- if it is already table\r\n\t\t\t\t\t\t\ttable.insert(values[v['key']:lower()],content);\r\n\t\t\t\t\t\telse -- first assignment (string)\r\n\t\t\t\t\t\t\tvalues[v['key']:lower()]=content;\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\tstr=cosmo.fill(template,values);\r\n\t\t\tend\t\r\n\t\t\treturn {key=key,str=str,...}\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "for key,value in pairs(grammar_tbl) do\r\n\t\tcaptures_tbl[key]=function(str,...)\r\n\t\t\tif templates[key] then\r\n\t\t\t\tlocal template=nil\r\n\t\t\t\tif(type(templates[key])==\"function\") then\r\n\t\t\t\t\ttemplate=templates[key](str,...)\r\n\t\t\t\telseif(type(templates[key])==\"number\") then\r\n\t\t\t\t\ttemplate=tostring(templates[key])\r\n\t\t\t\telse\r\n\t\t\t\t\ttemplate=templates[key]\r\n\t\t\t\tend\r\n\t\t\t\tlocal values={original_content=str,content=assemble_table({...})}\r\n\t\t\t\tif(values['content']) then\r\n\t\t\t\t\tvalues['trimmed_content']=trim(values['content']);\r\n\t\t\t\telse\r\n\t\t\t\t\tvalues['trimmed_content']=trim(str); -- if assembled node has no children nodes (assemble_table==nil)\r\n\t\t\t\tend\r\n\t\t\t\tfor k,v in ipairs({...}) do\r\n\t\t\t\t\tif(type(v)==\"table\") then\r\n\t\t\t\t\t\tlocal content=assemble_table(v);\r\n\t\t\t\t\t\tif(content:find(\"\\n\")) then -- discards operators, keywords etc.\r\n\t\t\t\t\t\t\tlocal _spaces=\"\"\r\n\t\t\t\t\t\t\tfor spaces in template:gmatch(\"\\n(%s+)$\"..v['key']:lower()) do -- will execute only once\r\n\t\t\t\t\t\t\t\tcontent=trim_ending(content:gsub(\"\\n\",\"\\n\"..spaces));\r\n\t\t\t\t\t\t\t\t_spaces=spaces;\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tif(#_spaces) then\r\n\t\t\t\t\t\t\t\t-- we replaced some spaces\r\n\t\t\t\t\t\t\t\t-- look for a multiline string, we cannot indent it's contents \r\n\t\t\t\t\t\t\t\tlocal change=0; -- byte offset created by replacing the \"replaced\" string by it's original\r\n\t\t\t\t\t\t\t\tfor a,b,c,d in content:gmatch(\"((['\\\"-]?)()%[%[.-\\n.-%]%]())\") do\r\n\t\t\t\t\t\t\t\t\tif(b==\"\") then\r\n\t\t\t\t\t\t\t\t\t\t-- only if the string is not encapsulated in quoted string or in a comment (could be for example \"9\"-[[8\\n]]\" but unlikely)\r\n\t\t\t\t\t\t\t\t\t\tcontent=content:sub(1,c-1-change)..a:gsub(\"\\n\".._spaces,\"\\n\")..content:sub(d-change);\r\n\t\t\t\t\t\t\t\t\t\tchange=change+(a:len()-a:gsub(\"\\n\".._spaces,\"\\n\"):len());\r\n\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tif(values[v['key']:lower()] and type(values[v['key']:lower()]~=\"table\")) then\r\n\t\t\t\t\t\t\t-- multiple cosmo replacements, make a table out of it\r\n\t\t\t\t\t\t\tvalues[v['key']:lower()]={values[v['key']:lower()],content}\r\n\t\t\t\t\t\telseif(values[v['key']:lower()]) then -- if it is already table\r\n\t\t\t\t\t\t\ttable.insert(values[v['key']:lower()],content);\r\n\t\t\t\t\t\telse -- first assignment (string)\r\n\t\t\t\t\t\t\tvalues[v['key']:lower()]=content;\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\tstr=cosmo.fill(template,values);\r\n\t\t\tend\t\r\n\t\t\treturn {key=key,str=str,...}\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 30,
    "text": "captures_tbl[key]=function(str,...)\r\n\t\t\tif templates[key] then\r\n\t\t\t\tlocal template=nil\r\n\t\t\t\tif(type(templates[key])==\"function\") then\r\n\t\t\t\t\ttemplate=templates[key](str,...)\r\n\t\t\t\telseif(type(templates[key])==\"number\") then\r\n\t\t\t\t\ttemplate=tostring(templates[key])\r\n\t\t\t\telse\r\n\t\t\t\t\ttemplate=templates[key]\r\n\t\t\t\tend\r\n\t\t\t\tlocal values={original_content=str,content=assemble_table({...})}\r\n\t\t\t\tif(values['content']) then\r\n\t\t\t\t\tvalues['trimmed_content']=trim(values['content']);\r\n\t\t\t\telse\r\n\t\t\t\t\tvalues['trimmed_content']=trim(str); -- if assembled node has no children nodes (assemble_table==nil)\r\n\t\t\t\tend\r\n\t\t\t\tfor k,v in ipairs({...}) do\r\n\t\t\t\t\tif(type(v)==\"table\") then\r\n\t\t\t\t\t\tlocal content=assemble_table(v);\r\n\t\t\t\t\t\tif(content:find(\"\\n\")) then -- discards operators, keywords etc.\r\n\t\t\t\t\t\t\tlocal _spaces=\"\"\r\n\t\t\t\t\t\t\tfor spaces in template:gmatch(\"\\n(%s+)$\"..v['key']:lower()) do -- will execute only once\r\n\t\t\t\t\t\t\t\tcontent=trim_ending(content:gsub(\"\\n\",\"\\n\"..spaces));\r\n\t\t\t\t\t\t\t\t_spaces=spaces;\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tif(#_spaces) then\r\n\t\t\t\t\t\t\t\t-- we replaced some spaces\r\n\t\t\t\t\t\t\t\t-- look for a multiline string, we cannot indent it's contents \r\n\t\t\t\t\t\t\t\tlocal change=0; -- byte offset created by replacing the \"replaced\" string by it's original\r\n\t\t\t\t\t\t\t\tfor a,b,c,d in content:gmatch(\"((['\\\"-]?)()%[%[.-\\n.-%]%]())\") do\r\n\t\t\t\t\t\t\t\t\tif(b==\"\") then\r\n\t\t\t\t\t\t\t\t\t\t-- only if the string is not encapsulated in quoted string or in a comment (could be for example \"9\"-[[8\\n]]\" but unlikely)\r\n\t\t\t\t\t\t\t\t\t\tcontent=content:sub(1,c-1-change)..a:gsub(\"\\n\".._spaces,\"\\n\")..content:sub(d-change);\r\n\t\t\t\t\t\t\t\t\t\tchange=change+(a:len()-a:gsub(\"\\n\".._spaces,\"\\n\"):len());\r\n\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tif(values[v['key']:lower()] and type(values[v['key']:lower()]~=\"table\")) then\r\n\t\t\t\t\t\t\t-- multiple cosmo replacements, make a table out of it\r\n\t\t\t\t\t\t\tvalues[v['key']:lower()]={values[v['key']:lower()],content}\r\n\t\t\t\t\t\telseif(values[v['key']:lower()]) then -- if it is already table\r\n\t\t\t\t\t\t\ttable.insert(values[v['key']:lower()],content);\r\n\t\t\t\t\t\telse -- first assignment (string)\r\n\t\t\t\t\t\t\tvalues[v['key']:lower()]=content;\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\tstr=cosmo.fill(template,values);\r\n\t\t\tend\t\r\n\t\t\treturn {key=key,str=str,...}\r\n\t\tend",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "if templates[key] then\r\n\t\t\t\tlocal template=nil\r\n\t\t\t\tif(type(templates[key])==\"function\") then\r\n\t\t\t\t\ttemplate=templates[key](str,...)\r\n\t\t\t\telseif(type(templates[key])==\"number\") then\r\n\t\t\t\t\ttemplate=tostring(templates[key])\r\n\t\t\t\telse\r\n\t\t\t\t\ttemplate=templates[key]\r\n\t\t\t\tend\r\n\t\t\t\tlocal values={original_content=str,content=assemble_table({...})}\r\n\t\t\t\tif(values['content']) then\r\n\t\t\t\t\tvalues['trimmed_content']=trim(values['content']);\r\n\t\t\t\telse\r\n\t\t\t\t\tvalues['trimmed_content']=trim(str); -- if assembled node has no children nodes (assemble_table==nil)\r\n\t\t\t\tend\r\n\t\t\t\tfor k,v in ipairs({...}) do\r\n\t\t\t\t\tif(type(v)==\"table\") then\r\n\t\t\t\t\t\tlocal content=assemble_table(v);\r\n\t\t\t\t\t\tif(content:find(\"\\n\")) then -- discards operators, keywords etc.\r\n\t\t\t\t\t\t\tlocal _spaces=\"\"\r\n\t\t\t\t\t\t\tfor spaces in template:gmatch(\"\\n(%s+)$\"..v['key']:lower()) do -- will execute only once\r\n\t\t\t\t\t\t\t\tcontent=trim_ending(content:gsub(\"\\n\",\"\\n\"..spaces));\r\n\t\t\t\t\t\t\t\t_spaces=spaces;\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tif(#_spaces) then\r\n\t\t\t\t\t\t\t\t-- we replaced some spaces\r\n\t\t\t\t\t\t\t\t-- look for a multiline string, we cannot indent it's contents \r\n\t\t\t\t\t\t\t\tlocal change=0; -- byte offset created by replacing the \"replaced\" string by it's original\r\n\t\t\t\t\t\t\t\tfor a,b,c,d in content:gmatch(\"((['\\\"-]?)()%[%[.-\\n.-%]%]())\") do\r\n\t\t\t\t\t\t\t\t\tif(b==\"\") then\r\n\t\t\t\t\t\t\t\t\t\t-- only if the string is not encapsulated in quoted string or in a comment (could be for example \"9\"-[[8\\n]]\" but unlikely)\r\n\t\t\t\t\t\t\t\t\t\tcontent=content:sub(1,c-1-change)..a:gsub(\"\\n\".._spaces,\"\\n\")..content:sub(d-change);\r\n\t\t\t\t\t\t\t\t\t\tchange=change+(a:len()-a:gsub(\"\\n\".._spaces,\"\\n\"):len());\r\n\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tif(values[v['key']:lower()] and type(values[v['key']:lower()]~=\"table\")) then\r\n\t\t\t\t\t\t\t-- multiple cosmo replacements, make a table out of it\r\n\t\t\t\t\t\t\tvalues[v['key']:lower()]={values[v['key']:lower()],content}\r\n\t\t\t\t\t\telseif(values[v['key']:lower()]) then -- if it is already table\r\n\t\t\t\t\t\t\ttable.insert(values[v['key']:lower()],content);\r\n\t\t\t\t\t\telse -- first assignment (string)\r\n\t\t\t\t\t\t\tvalues[v['key']:lower()]=content;\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\tstr=cosmo.fill(template,values);\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "local template=nil",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "if(type(templates[key])==\"function\") then\r\n\t\t\t\t\ttemplate=templates[key](str,...)\r\n\t\t\t\telseif(type(templates[key])==\"number\") then\r\n\t\t\t\t\ttemplate=tostring(templates[key])\r\n\t\t\t\telse\r\n\t\t\t\t\ttemplate=templates[key]\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "template=templates[key](str,...)",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "template=tostring(templates[key])",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "template=templates[key]",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "local values={original_content=str,content=assemble_table({...})}",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "if(values['content']) then\r\n\t\t\t\t\tvalues['trimmed_content']=trim(values['content']);\r\n\t\t\t\telse\r\n\t\t\t\t\tvalues['trimmed_content']=trim(str); -- if assembled node has no children nodes (assemble_table==nil)\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "values['trimmed_content']=trim(values['content'])",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "values['trimmed_content']=trim(str)",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "for k,v in ipairs({...}) do\r\n\t\t\t\t\tif(type(v)==\"table\") then\r\n\t\t\t\t\t\tlocal content=assemble_table(v);\r\n\t\t\t\t\t\tif(content:find(\"\\n\")) then -- discards operators, keywords etc.\r\n\t\t\t\t\t\t\tlocal _spaces=\"\"\r\n\t\t\t\t\t\t\tfor spaces in template:gmatch(\"\\n(%s+)$\"..v['key']:lower()) do -- will execute only once\r\n\t\t\t\t\t\t\t\tcontent=trim_ending(content:gsub(\"\\n\",\"\\n\"..spaces));\r\n\t\t\t\t\t\t\t\t_spaces=spaces;\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tif(#_spaces) then\r\n\t\t\t\t\t\t\t\t-- we replaced some spaces\r\n\t\t\t\t\t\t\t\t-- look for a multiline string, we cannot indent it's contents \r\n\t\t\t\t\t\t\t\tlocal change=0; -- byte offset created by replacing the \"replaced\" string by it's original\r\n\t\t\t\t\t\t\t\tfor a,b,c,d in content:gmatch(\"((['\\\"-]?)()%[%[.-\\n.-%]%]())\") do\r\n\t\t\t\t\t\t\t\t\tif(b==\"\") then\r\n\t\t\t\t\t\t\t\t\t\t-- only if the string is not encapsulated in quoted string or in a comment (could be for example \"9\"-[[8\\n]]\" but unlikely)\r\n\t\t\t\t\t\t\t\t\t\tcontent=content:sub(1,c-1-change)..a:gsub(\"\\n\".._spaces,\"\\n\")..content:sub(d-change);\r\n\t\t\t\t\t\t\t\t\t\tchange=change+(a:len()-a:gsub(\"\\n\".._spaces,\"\\n\"):len());\r\n\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tif(values[v['key']:lower()] and type(values[v['key']:lower()]~=\"table\")) then\r\n\t\t\t\t\t\t\t-- multiple cosmo replacements, make a table out of it\r\n\t\t\t\t\t\t\tvalues[v['key']:lower()]={values[v['key']:lower()],content}\r\n\t\t\t\t\t\telseif(values[v['key']:lower()]) then -- if it is already table\r\n\t\t\t\t\t\t\ttable.insert(values[v['key']:lower()],content);\r\n\t\t\t\t\t\telse -- first assignment (string)\r\n\t\t\t\t\t\t\tvalues[v['key']:lower()]=content;\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 42,
    "text": "if(type(v)==\"table\") then\r\n\t\t\t\t\t\tlocal content=assemble_table(v);\r\n\t\t\t\t\t\tif(content:find(\"\\n\")) then -- discards operators, keywords etc.\r\n\t\t\t\t\t\t\tlocal _spaces=\"\"\r\n\t\t\t\t\t\t\tfor spaces in template:gmatch(\"\\n(%s+)$\"..v['key']:lower()) do -- will execute only once\r\n\t\t\t\t\t\t\t\tcontent=trim_ending(content:gsub(\"\\n\",\"\\n\"..spaces));\r\n\t\t\t\t\t\t\t\t_spaces=spaces;\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tif(#_spaces) then\r\n\t\t\t\t\t\t\t\t-- we replaced some spaces\r\n\t\t\t\t\t\t\t\t-- look for a multiline string, we cannot indent it's contents \r\n\t\t\t\t\t\t\t\tlocal change=0; -- byte offset created by replacing the \"replaced\" string by it's original\r\n\t\t\t\t\t\t\t\tfor a,b,c,d in content:gmatch(\"((['\\\"-]?)()%[%[.-\\n.-%]%]())\") do\r\n\t\t\t\t\t\t\t\t\tif(b==\"\") then\r\n\t\t\t\t\t\t\t\t\t\t-- only if the string is not encapsulated in quoted string or in a comment (could be for example \"9\"-[[8\\n]]\" but unlikely)\r\n\t\t\t\t\t\t\t\t\t\tcontent=content:sub(1,c-1-change)..a:gsub(\"\\n\".._spaces,\"\\n\")..content:sub(d-change);\r\n\t\t\t\t\t\t\t\t\t\tchange=change+(a:len()-a:gsub(\"\\n\".._spaces,\"\\n\"):len());\r\n\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tif(values[v['key']:lower()] and type(values[v['key']:lower()]~=\"table\")) then\r\n\t\t\t\t\t\t\t-- multiple cosmo replacements, make a table out of it\r\n\t\t\t\t\t\t\tvalues[v['key']:lower()]={values[v['key']:lower()],content}\r\n\t\t\t\t\t\telseif(values[v['key']:lower()]) then -- if it is already table\r\n\t\t\t\t\t\t\ttable.insert(values[v['key']:lower()],content);\r\n\t\t\t\t\t\telse -- first assignment (string)\r\n\t\t\t\t\t\t\tvalues[v['key']:lower()]=content;\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "local content=assemble_table(v)",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "if(content:find(\"\\n\")) then -- discards operators, keywords etc.\r\n\t\t\t\t\t\t\tlocal _spaces=\"\"\r\n\t\t\t\t\t\t\tfor spaces in template:gmatch(\"\\n(%s+)$\"..v['key']:lower()) do -- will execute only once\r\n\t\t\t\t\t\t\t\tcontent=trim_ending(content:gsub(\"\\n\",\"\\n\"..spaces));\r\n\t\t\t\t\t\t\t\t_spaces=spaces;\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tif(#_spaces) then\r\n\t\t\t\t\t\t\t\t-- we replaced some spaces\r\n\t\t\t\t\t\t\t\t-- look for a multiline string, we cannot indent it's contents \r\n\t\t\t\t\t\t\t\tlocal change=0; -- byte offset created by replacing the \"replaced\" string by it's original\r\n\t\t\t\t\t\t\t\tfor a,b,c,d in content:gmatch(\"((['\\\"-]?)()%[%[.-\\n.-%]%]())\") do\r\n\t\t\t\t\t\t\t\t\tif(b==\"\") then\r\n\t\t\t\t\t\t\t\t\t\t-- only if the string is not encapsulated in quoted string or in a comment (could be for example \"9\"-[[8\\n]]\" but unlikely)\r\n\t\t\t\t\t\t\t\t\t\tcontent=content:sub(1,c-1-change)..a:gsub(\"\\n\".._spaces,\"\\n\")..content:sub(d-change);\r\n\t\t\t\t\t\t\t\t\t\tchange=change+(a:len()-a:gsub(\"\\n\".._spaces,\"\\n\"):len());\r\n\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "local _spaces=\"\"",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "for spaces in template:gmatch(\"\\n(%s+)$\"..v['key']:lower()) do -- will execute only once\r\n\t\t\t\t\t\t\t\tcontent=trim_ending(content:gsub(\"\\n\",\"\\n\"..spaces));\r\n\t\t\t\t\t\t\t\t_spaces=spaces;\r\n\t\t\t\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 47,
    "text": "content=trim_ending(content:gsub(\"\\n\",\"\\n\"..spaces))",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "_spaces=spaces",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "if(#_spaces) then\r\n\t\t\t\t\t\t\t\t-- we replaced some spaces\r\n\t\t\t\t\t\t\t\t-- look for a multiline string, we cannot indent it's contents \r\n\t\t\t\t\t\t\t\tlocal change=0; -- byte offset created by replacing the \"replaced\" string by it's original\r\n\t\t\t\t\t\t\t\tfor a,b,c,d in content:gmatch(\"((['\\\"-]?)()%[%[.-\\n.-%]%]())\") do\r\n\t\t\t\t\t\t\t\t\tif(b==\"\") then\r\n\t\t\t\t\t\t\t\t\t\t-- only if the string is not encapsulated in quoted string or in a comment (could be for example \"9\"-[[8\\n]]\" but unlikely)\r\n\t\t\t\t\t\t\t\t\t\tcontent=content:sub(1,c-1-change)..a:gsub(\"\\n\".._spaces,\"\\n\")..content:sub(d-change);\r\n\t\t\t\t\t\t\t\t\t\tchange=change+(a:len()-a:gsub(\"\\n\".._spaces,\"\\n\"):len());\r\n\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "local change=0",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "for a,b,c,d in content:gmatch(\"((['\\\"-]?)()%[%[.-\\n.-%]%]())\") do\r\n\t\t\t\t\t\t\t\t\tif(b==\"\") then\r\n\t\t\t\t\t\t\t\t\t\t-- only if the string is not encapsulated in quoted string or in a comment (could be for example \"9\"-[[8\\n]]\" but unlikely)\r\n\t\t\t\t\t\t\t\t\t\tcontent=content:sub(1,c-1-change)..a:gsub(\"\\n\".._spaces,\"\\n\")..content:sub(d-change);\r\n\t\t\t\t\t\t\t\t\t\tchange=change+(a:len()-a:gsub(\"\\n\".._spaces,\"\\n\"):len());\r\n\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 52,
    "text": "if(b==\"\") then\r\n\t\t\t\t\t\t\t\t\t\t-- only if the string is not encapsulated in quoted string or in a comment (could be for example \"9\"-[[8\\n]]\" but unlikely)\r\n\t\t\t\t\t\t\t\t\t\tcontent=content:sub(1,c-1-change)..a:gsub(\"\\n\".._spaces,\"\\n\")..content:sub(d-change);\r\n\t\t\t\t\t\t\t\t\t\tchange=change+(a:len()-a:gsub(\"\\n\".._spaces,\"\\n\"):len());\r\n\t\t\t\t\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "content=content:sub(1,c-1-change)..a:gsub(\"\\n\".._spaces,\"\\n\")..content:sub(d-change)",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "change=change+(a:len()-a:gsub(\"\\n\".._spaces,\"\\n\"):len())",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "if(values[v['key']:lower()] and type(values[v['key']:lower()]~=\"table\")) then\r\n\t\t\t\t\t\t\t-- multiple cosmo replacements, make a table out of it\r\n\t\t\t\t\t\t\tvalues[v['key']:lower()]={values[v['key']:lower()],content}\r\n\t\t\t\t\t\telseif(values[v['key']:lower()]) then -- if it is already table\r\n\t\t\t\t\t\t\ttable.insert(values[v['key']:lower()],content);\r\n\t\t\t\t\t\telse -- first assignment (string)\r\n\t\t\t\t\t\t\tvalues[v['key']:lower()]=content;\r\n\t\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "values[v['key']:lower()]={values[v['key']:lower()],content}",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "table.insert(values[v['key']:lower()],content)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "values[v['key']:lower()]=content",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "str=cosmo.fill(template,values)",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function(str,...)\r\n\t\t\tif templates[key] then\r\n\t\t\t\tlocal template=nil\r\n\t\t\t\tif(type(templates[key])==\"function\") then\r\n\t\t\t\t\ttemplate=templates[key](str,...)\r\n\t\t\t\telseif(type(templates[key])==\"number\") then\r\n\t\t\t\t\ttemplate=tostring(templates[key])\r\n\t\t\t\telse\r\n\t\t\t\t\ttemplate=templates[key]\r\n\t\t\t\tend\r\n\t\t\t\tlocal values={original_content=str,content=assemble_table({...})}\r\n\t\t\t\tif(values['content']) then\r\n\t\t\t\t\tvalues['trimmed_content']=trim(values['content']);\r\n\t\t\t\telse\r\n\t\t\t\t\tvalues['trimmed_content']=trim(str); -- if assembled node has no children nodes (assemble_table==nil)\r\n\t\t\t\tend\r\n\t\t\t\tfor k,v in ipairs({...}) do\r\n\t\t\t\t\tif(type(v)==\"table\") then\r\n\t\t\t\t\t\tlocal content=assemble_table(v);\r\n\t\t\t\t\t\tif(content:find(\"\\n\")) then -- discards operators, keywords etc.\r\n\t\t\t\t\t\t\tlocal _spaces=\"\"\r\n\t\t\t\t\t\t\tfor spaces in template:gmatch(\"\\n(%s+)$\"..v['key']:lower()) do -- will execute only once\r\n\t\t\t\t\t\t\t\tcontent=trim_ending(content:gsub(\"\\n\",\"\\n\"..spaces));\r\n\t\t\t\t\t\t\t\t_spaces=spaces;\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tif(#_spaces) then\r\n\t\t\t\t\t\t\t\t-- we replaced some spaces\r\n\t\t\t\t\t\t\t\t-- look for a multiline string, we cannot indent it's contents \r\n\t\t\t\t\t\t\t\tlocal change=0; -- byte offset created by replacing the \"replaced\" string by it's original\r\n\t\t\t\t\t\t\t\tfor a,b,c,d in content:gmatch(\"((['\\\"-]?)()%[%[.-\\n.-%]%]())\") do\r\n\t\t\t\t\t\t\t\t\tif(b==\"\") then\r\n\t\t\t\t\t\t\t\t\t\t-- only if the string is not encapsulated in quoted string or in a comment (could be for example \"9\"-[[8\\n]]\" but unlikely)\r\n\t\t\t\t\t\t\t\t\t\tcontent=content:sub(1,c-1-change)..a:gsub(\"\\n\".._spaces,\"\\n\")..content:sub(d-change);\r\n\t\t\t\t\t\t\t\t\t\tchange=change+(a:len()-a:gsub(\"\\n\".._spaces,\"\\n\"):len());\r\n\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tif(values[v['key']:lower()] and type(values[v['key']:lower()]~=\"table\")) then\r\n\t\t\t\t\t\t\t-- multiple cosmo replacements, make a table out of it\r\n\t\t\t\t\t\t\tvalues[v['key']:lower()]={values[v['key']:lower()],content}\r\n\t\t\t\t\t\telseif(values[v['key']:lower()]) then -- if it is already table\r\n\t\t\t\t\t\t\ttable.insert(values[v['key']:lower()],content);\r\n\t\t\t\t\t\telse -- first assignment (string)\r\n\t\t\t\t\t\t\tvalues[v['key']:lower()]=content;\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\tstr=cosmo.fill(template,values);\r\n\t\t\tend\t\r\n\t\t\treturn {key=key,str=str,...}\r\n\t\tend",
    "type": "function"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function format_text(text,template)\r\n\t-- load template!\r\n\tif(template==nil) then\r\n--~ \t\ttemplate=\"templates.lua\"\r\n\t\ttemplates = require\"luapretty.templates.default\"\r\n\telse \r\n--~ \t\tlocal mydir=debug.getinfo(1, \"S\").source:sub(2)\r\n--~ \t\tmydir=mydir:sub(1,mydir:find(\"/[^/]+$\"))\r\n\t\tlocal template_text, errmsg=loadfile(template);\r\n\t\tif(not template_text) then\r\n\t\t\t-- try to find the template file in our directory\r\n\t\t\ttemplate_text, errmsg=loadfile(template);\r\n\t\t\tif(not template_text) then\r\n\t\t\t\treturn nil,\"template file does not exist!\"\r\n\t\t\tend\r\n\t\tend\r\n\t\t\r\n\t\ttemplates = template_text();\t\r\n\tend\r\n\t\r\n\tlocal rules=leg_parser.rules\r\n\t\r\n\trules=leg_grammar.apply({COMMENT=leg_scanner.COMMENT, SPACE=leg_scanner.SPACE},rules)\r\n\t-- CAPTURES!\r\n\tlocal captures_tbl={}\r\n\t\r\n\tprepare_grammar(rules)\r\n\trules['IGNORED']=lpeg.C((lpeg.V'SPACE' + lpeg.V'COMMENT')^0)\r\n\tprepare_captures(rules,captures_tbl)\r\n\r\n\tlocal grammar_with_captures=leg_grammar.apply(rules,nil,captures_tbl)\r\n\t\r\n\tlocal result=lpeg.match(grammar_with_captures,text)\r\n\treturn assemble_table(result), result\r\nend",
    "type": "function"
  }, {
    "id": 64,
    "text": "if(template==nil) then\r\n--~ \t\ttemplate=\"templates.lua\"\r\n\t\ttemplates = require\"luapretty.templates.default\"\r\n\telse \r\n--~ \t\tlocal mydir=debug.getinfo(1, \"S\").source:sub(2)\r\n--~ \t\tmydir=mydir:sub(1,mydir:find(\"/[^/]+$\"))\r\n\t\tlocal template_text, errmsg=loadfile(template);\r\n\t\tif(not template_text) then\r\n\t\t\t-- try to find the template file in our directory\r\n\t\t\ttemplate_text, errmsg=loadfile(template);\r\n\t\t\tif(not template_text) then\r\n\t\t\t\treturn nil,\"template file does not exist!\"\r\n\t\t\tend\r\n\t\tend\r\n\t\t\r\n\t\ttemplates = template_text();\t\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "templates = require\"luapretty.templates.default\"",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "local template_text, errmsg=loadfile(template)",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "if(not template_text) then\r\n\t\t\t-- try to find the template file in our directory\r\n\t\t\ttemplate_text, errmsg=loadfile(template);\r\n\t\t\tif(not template_text) then\r\n\t\t\t\treturn nil,\"template file does not exist!\"\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "template_text, errmsg=loadfile(template)",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "if(not template_text) then\r\n\t\t\t\treturn nil,\"template file does not exist!\"\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "templates = template_text()",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "local rules=leg_parser.rules",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "rules=leg_grammar.apply({COMMENT=leg_scanner.COMMENT, SPACE=leg_scanner.SPACE},rules)",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "local captures_tbl={}",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "prepare_grammar(rules)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "rules['IGNORED']=lpeg.C((lpeg.V'SPACE' + lpeg.V'COMMENT')^0)",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "prepare_captures(rules,captures_tbl)",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "local grammar_with_captures=leg_grammar.apply(rules,nil,captures_tbl)",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "local result=lpeg.match(grammar_with_captures,text)",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "",
    "type": "function container"
  }, {
    "id": 81,
    "text": "apply",
    "type": "global function"
  }, {
    "id": 82,
    "text": "match",
    "type": "global function"
  }, {
    "id": 83,
    "text": "fill",
    "type": "global function"
  }, {
    "id": 84,
    "text": "V",
    "type": "global function"
  }, {
    "id": 85,
    "text": "C",
    "type": "global function"
  }, {
    "id": 86,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 87,
    "text": "templates[key]",
    "type": "global function"
  }, {
    "id": 88,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 89,
    "text": "print",
    "type": "global function"
  }, {
    "id": 90,
    "text": "template_text",
    "type": "global function"
  }, {
    "id": 91,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 92,
    "text": "module",
    "type": "global function"
  }, {
    "id": 93,
    "text": "type",
    "type": "global function"
  }, {
    "id": 94,
    "text": "require",
    "type": "global function"
  }, {
    "id": 95,
    "text": "loadfile",
    "type": "global function"
  }, {
    "id": 96,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 97,
    "text": "(debug)",
    "type": "module"
  }, {
    "id": 98,
    "text": "",
    "type": "variable container"
  }, {
    "id": 99,
    "text": "",
    "type": "require container"
  }, {
    "id": 100,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 101,
    "text": "(lpeg)",
    "type": "module"
  }, {
    "id": 102,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 103,
    "text": "parser)",
    "type": "module"
  }, {
    "id": 104,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 105,
    "text": "grammar)",
    "type": "module"
  }, {
    "id": 106,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 107,
    "text": "scanner)",
    "type": "module"
  }, {
    "id": 108,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 109,
    "text": "(cosmo)",
    "type": "module"
  }, {
    "id": 110,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 111,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 112,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 113,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 114,
    "text": "",
    "type": "require local variable"
  } ]
}