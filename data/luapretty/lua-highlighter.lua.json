{
  "_filename": "lua-highlighter.lua",
  "_isShebang": true,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luapretty/src/lua-highlighter.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "calls",
    "to": 5
  }, {
    "from": 8,
    "label": "calls",
    "to": 5
  }, {
    "from": 2,
    "label": "calls",
    "to": 9
  }, {
    "from": 5,
    "label": "calls",
    "to": 11
  }, {
    "from": 8,
    "label": "calls",
    "to": 11
  }, {
    "from": 8,
    "label": "calls",
    "to": 11
  }, {
    "from": 8,
    "label": "calls",
    "to": 11
  }, {
    "from": 8,
    "label": "calls",
    "to": 11
  }, {
    "from": 8,
    "label": "calls",
    "to": 11
  }, {
    "from": 8,
    "label": "calls",
    "to": 12
  }, {
    "from": 8,
    "label": "calls",
    "to": 12
  }, {
    "from": 8,
    "label": "calls",
    "to": 12
  }, {
    "from": 8,
    "label": "calls",
    "to": 12
  }, {
    "from": 8,
    "label": "calls",
    "to": 12
  }, {
    "from": 8,
    "label": "calls",
    "to": 12
  }, {
    "from": 8,
    "label": "calls",
    "to": 12
  }, {
    "from": 8,
    "label": "calls",
    "to": 13
  }, {
    "from": 8,
    "label": "calls",
    "to": 13
  }, {
    "from": 8,
    "label": "calls",
    "to": 13
  }, {
    "from": 8,
    "label": "calls",
    "to": 2
  }, {
    "from": 8,
    "label": "calls",
    "to": 15
  }, {
    "from": 8,
    "label": "calls",
    "to": 15
  }, {
    "from": 8,
    "label": "calls",
    "to": 15
  }, {
    "from": 8,
    "label": "calls",
    "to": 14
  }, {
    "from": 8,
    "label": "calls",
    "to": 10
  }, {
    "from": 1,
    "label": "contains",
    "to": 8
  }, {
    "from": 8,
    "label": "declares",
    "to": 2
  }, {
    "from": 8,
    "label": "declares",
    "to": 5
  }, {
    "from": 1,
    "label": "contains",
    "to": 17
  }, {
    "from": 1,
    "label": "contains",
    "to": 18
  }, {
    "from": 18,
    "label": "initializes",
    "to": 19
  }, {
    "from": 19,
    "label": "requires",
    "to": 20
  }, {
    "from": 18,
    "label": "initializes",
    "to": 21
  }, {
    "from": 21,
    "label": "requires",
    "to": 16
  }, {
    "from": 18,
    "label": "initializes",
    "to": 22
  }, {
    "from": 22,
    "label": "requires",
    "to": 23
  }, {
    "from": 24,
    "label": "requires",
    "to": 23
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "lua-highlighter",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function process_text(text,with_headers,css_embedded_code,css_link,html_title)\r\n\treturn highlighter.highlight_text(text,nil,with_headers,css_embedded_code,css_link,html_title);\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "local function usage_info(arg)\r\n\tprint(\"\\nUsage: \"..arg[0]..\r\n[[ <input file> [<output file>] [-f]\r\n\r\nArguments:\r\n   <input file>\t\tlua source file to highlight\r\n   <output file>\ttarget file to write highlighted code. If omitted,\r\n\t\t\thighlighted lua code is written to stdout. If target\r\n\t\t\tfile alerady exists, no action will be taken and a\r\n\t\t\twarning message will be printed to stdout (unless the\r\n\t\t\t-f option is present).\r\n   -f, --force\t\tforce rewriting target file if it exists\r\n   -a, --full\t\toutput complete HTML markup with headers and formatted\r\n\t\t\tlua code in the body element. If not set, program will\r\n\t\t\tgenerate only one portion of the HTML markup (the\r\n\t\t\thighlighted code).\r\n   -x, --css-target\tcopy the CSS file given by the -c option to the\r\n\t\t\tspecified location. If both -c and -a options are set,\r\n\t\t\tthe CSS code is both included in the final markup and\r\n\t\t\tcopied to the location provided. If the target CSS file\r\n\t\t\talready exists, it is NOT overwritten unless the -f flag\r\n\t\t\tis in effect. If only the -a option is set (not -c), you\r\n\t\t\tcan use this option to specify a link to external CSS\r\n\t\t\tfile in the final markup (http addresses are accepted)\r\n   -c, --css\t\tuse the given CSS style file. If the output mode is set\r\n\t\t\tto full HTML markup (-a option), the CSS code will be\r\n\t\t\tembedded directly in the generated markup. If the -x\r\n\t\t\toption is also set, the whole css style file will be\r\n\t\t\tcopied to the location  given in the -x parameter. If\r\n\t\t\tneither the -x or -a parameters are set, this option has\r\n\t\t\tno effect.\r\n   -t, --title\t\tif running in full markup mode (-a flag is set), set the\r\n\t\t\tpage's TITLE element to the provided string. If not set,\r\n\t\t\ttitle defaults to the stripped down filename of the lua\r\n\t\t\tsource file without path information. If the -a flag is\r\n\t\t\tnot set, this option has no effect.\r\n]]);\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "print(\"\\nUsage: \"..arg[0]..\r\n[[ <input file> [<output file>] [-f]\r\n\r\nArguments:\r\n   <input file>\t\tlua source file to highlight\r\n   <output file>\ttarget file to write highlighted code. If omitted,\r\n\t\t\thighlighted lua code is written to stdout. If target\r\n\t\t\tfile alerady exists, no action will be taken and a\r\n\t\t\twarning message will be printed to stdout (unless the\r\n\t\t\t-f option is present).\r\n   -f, --force\t\tforce rewriting target file if it exists\r\n   -a, --full\t\toutput complete HTML markup with headers and formatted\r\n\t\t\tlua code in the body element. If not set, program will\r\n\t\t\tgenerate only one portion of the HTML markup (the\r\n\t\t\thighlighted code).\r\n   -x, --css-target\tcopy the CSS file given by the -c option to the\r\n\t\t\tspecified location. If both -c and -a options are set,\r\n\t\t\tthe CSS code is both included in the final markup and\r\n\t\t\tcopied to the location provided. If the target CSS file\r\n\t\t\talready exists, it is NOT overwritten unless the -f flag\r\n\t\t\tis in effect. If only the -a option is set (not -c), you\r\n\t\t\tcan use this option to specify a link to external CSS\r\n\t\t\tfile in the final markup (http addresses are accepted)\r\n   -c, --css\t\tuse the given CSS style file. If the output mode is set\r\n\t\t\tto full HTML markup (-a option), the CSS code will be\r\n\t\t\tembedded directly in the generated markup. If the -x\r\n\t\t\toption is also set, the whole css style file will be\r\n\t\t\tcopied to the location  given in the -x parameter. If\r\n\t\t\tneither the -x or -a parameters are set, this option has\r\n\t\t\tno effect.\r\n   -t, --title\t\tif running in full markup mode (-a flag is set), set the\r\n\t\t\tpage's TITLE element to the provided string. If not set,\r\n\t\t\ttitle defaults to the stripped down filename of the lua\r\n\t\t\tsource file without path information. If the -a flag is\r\n\t\t\tnot set, this option has no effect.\r\n]])",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "",
    "type": "function container"
  }, {
    "id": 9,
    "text": "function highlight_text(text,pt,with_headers,embedded_css_code,css_link,html_title) -- je mozne predat hotovy parse tree (jedine, co musi obsahovat, je kluc kazdej node)\r\n\tlocal rules=leg_parser.rules;\r\n\ttodoi=0\r\n\tbugi=0\r\n\tquestioni=0\r\n\tfixmei=0\r\n\tinfoi=0\r\n\thowi=0\r\n\r\n\tlocal output=\"\";\r\n\t\r\n\tif(pt==nil) then\r\n\t\tlocal captures_tbl={};\r\n\t\t\r\n\t\trules=leg_grammar.apply({COMMENT=leg_scanner.COMMENT, SPACE=leg_scanner.SPACE},rules)\r\n\t\r\n\t\tprepare_grammar(rules);\r\n\t\trules['IGNORED']=lpeg.C((lpeg.V'SPACE' + lpeg.V'COMMENT')^0)\r\n\t\tprepare_captures(rules,captures_tbl);\r\n\r\n\t\tlocal grammar_with_captures=leg_grammar.apply(rules,nil,captures_tbl);\r\n\r\n\t\tpt=lpeg.match(grammar_with_captures,text);\r\n\tend\r\n\t\r\n\t-- initialize parameters\r\n\tif(with_headers) then\r\n\t\tif(html_title==nil) then\r\n\t\t\thtml_title=\"Highlighted code\";\r\n\t\tend\r\n\t\toutput=[[<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n<head>\r\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n<meta name=\"description\" content=\"Highlighted code using Lua Highlighter\" />\r\n<meta name=\"Author\" content=\"Viliam Kubis\" />\r\n<meta name=\"keywords\" content=\"highlight, code\" />\r\n<meta name=\"robots\" content=\"index,follow\" />\r\n<title>]]..sh(html_title)..[[</title>]];\r\n\t\tif(embedded_css_code) then\r\n\t\t\toutput=output..\"<style type='text/css'>\\n\"..embedded_css_code..\"\\n</style>\";\r\n\t\tend\r\n\t\tif(css_link) then\r\n\t\t\toutput=output..\"<link rel='stylesheet' type='text/css' media='all' href='\"..sh(css_link)..\"' />\";\r\n\t\tend\r\n\t\toutput=output..[[\r\n</head>\r\n<body>\r\n]];\r\n\tend\r\n\t\r\n\toutput=output..\"<pre class='highlighted_code'>\"..assemble_table(pt)..\"</pre>\";\r\n\t\r\n\tif(with_headers) then\r\n\t\toutput=output..\"</body></html>\";\r\n\tend\r\n\treturn output, pt\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "getinfo",
    "type": "global function"
  }, {
    "id": 11,
    "text": "print",
    "type": "global function"
  }, {
    "id": 12,
    "text": "open",
    "type": "global function"
  }, {
    "id": 13,
    "text": "error",
    "type": "global function"
  }, {
    "id": 14,
    "text": "get_opts",
    "type": "global function"
  }, {
    "id": 15,
    "text": "require",
    "type": "global function"
  }, {
    "id": 16,
    "text": "(alt_getopt)",
    "type": "module"
  }, {
    "id": 17,
    "text": "",
    "type": "variable container"
  }, {
    "id": 18,
    "text": "",
    "type": "require container"
  }, {
    "id": 19,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 20,
    "text": "highlighter)",
    "type": "module"
  }, {
    "id": 21,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 22,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 23,
    "text": "(debug)",
    "type": "module"
  }, {
    "id": 24,
    "text": "",
    "type": "require local variable"
  } ]
}