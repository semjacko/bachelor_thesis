{
  "_filename": "ast_helper.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luapretty/src/luapretty/ast_helper.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 9,
    "label": "has",
    "to": 4
  }, {
    "from": 9,
    "label": "has",
    "to": 4
  }, {
    "from": 9,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 9,
    "label": "has",
    "to": 4
  }, {
    "from": 9,
    "label": "has",
    "to": 4
  }, {
    "from": 9,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 4
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 20,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 20,
    "label": "has",
    "to": 28
  }, {
    "from": 20,
    "label": "has",
    "to": 29
  }, {
    "from": 20,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 20,
    "label": "has",
    "to": 4
  }, {
    "from": 20,
    "label": "has",
    "to": 32
  }, {
    "from": 20,
    "label": "calls",
    "to": 20
  }, {
    "from": 9,
    "label": "calls",
    "to": 9
  }, {
    "from": 33,
    "label": "calls",
    "to": 36
  }, {
    "from": 20,
    "label": "calls",
    "to": 34
  }, {
    "from": 2,
    "label": "calls",
    "to": 37
  }, {
    "from": 9,
    "label": "calls",
    "to": 37
  }, {
    "from": 20,
    "label": "calls",
    "to": 37
  }, {
    "from": 20,
    "label": "calls",
    "to": 37
  }, {
    "from": 2,
    "label": "calls",
    "to": 35
  }, {
    "from": 9,
    "label": "calls",
    "to": 35
  }, {
    "from": 9,
    "label": "calls",
    "to": 38
  }, {
    "from": 9,
    "label": "calls",
    "to": 2
  }, {
    "from": 9,
    "label": "calls",
    "to": 2
  }, {
    "from": 9,
    "label": "calls",
    "to": 2
  }, {
    "from": 9,
    "label": "calls",
    "to": 2
  }, {
    "from": 9,
    "label": "calls",
    "to": 2
  }, {
    "from": 1,
    "label": "contains",
    "to": 33
  }, {
    "from": 33,
    "label": "declares",
    "to": 2
  }, {
    "from": 33,
    "label": "declares",
    "to": 9
  }, {
    "from": 33,
    "label": "declares",
    "to": 20
  }, {
    "from": 1,
    "label": "contains",
    "to": 39
  }, {
    "from": 1,
    "label": "contains",
    "to": 40
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "ast_helper",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function search(node,key)\r\n\tif(node==nil) then\r\n\t\treturn nil;\r\n\tend\r\n\tfor k,v in pairs(node) do\r\n\t\tif(type(v)==\"table\") then\r\n\t\t\tif(v['key']:lower()==key) then\r\n\t\t\t\treturn v;\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\treturn nil;\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "if(node==nil) then\r\n\t\treturn nil;\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "for k,v in pairs(node) do\r\n\t\tif(type(v)==\"table\") then\r\n\t\t\tif(v['key']:lower()==key) then\r\n\t\t\t\treturn v;\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 6,
    "text": "if(type(v)==\"table\") then\r\n\t\t\tif(v['key']:lower()==key) then\r\n\t\t\t\treturn v;\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "if(v['key']:lower()==key) then\r\n\t\t\t\treturn v;\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function getfunctionnode(ast,functionname)\r\n\tast['key']=tostring(ast['key']);\r\n\r\n\tif(ast['key']:lower()==\"globalfunction\") then\r\n\t\tlocal funcname=search(search(search(ast,\"funcname\"),\"name\"),\"id\");\r\n\t\tif(funcname['str']==functionname) then\r\n\t\t\treturn ast;\r\n\t\tend\r\n\telseif(ast['key']:lower()==\"localfunction\") then\r\n\t\tlocal funcname=search(search(ast,\"name\"),\"id\");\r\n\t\tif(funcname['str']==functionname) then\r\n\t\t\treturn ast;\r\n\t\tend\r\n\tend\r\n\r\n\tfor k,v in pairs(ast) do\r\n\t\tif(type(v)==\"table\") then\r\n\t\t\tlocal ret=getfunctionnode(v,functionname);\r\n\t\t\tif(ret~=nil) then\r\n\t\t\t\treturn ret;\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\treturn nil;\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "ast['key']=tostring(ast['key'])",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "if(ast['key']:lower()==\"globalfunction\") then\r\n\t\tlocal funcname=search(search(search(ast,\"funcname\"),\"name\"),\"id\");\r\n\t\tif(funcname['str']==functionname) then\r\n\t\t\treturn ast;\r\n\t\tend\r\n\telseif(ast['key']:lower()==\"localfunction\") then\r\n\t\tlocal funcname=search(search(ast,\"name\"),\"id\");\r\n\t\tif(funcname['str']==functionname) then\r\n\t\t\treturn ast;\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "local funcname=search(search(search(ast,\"funcname\"),\"name\"),\"id\")",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "if(funcname['str']==functionname) then\r\n\t\t\treturn ast;\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "local funcname=search(search(ast,\"name\"),\"id\")",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "for k,v in pairs(ast) do\r\n\t\tif(type(v)==\"table\") then\r\n\t\t\tlocal ret=getfunctionnode(v,functionname);\r\n\t\t\tif(ret~=nil) then\r\n\t\t\t\treturn ret;\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 16,
    "text": "if(type(v)==\"table\") then\r\n\t\t\tlocal ret=getfunctionnode(v,functionname);\r\n\t\t\tif(ret~=nil) then\r\n\t\t\t\treturn ret;\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "local ret=getfunctionnode(v,functionname)",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "if(ret~=nil) then\r\n\t\t\t\treturn ret;\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function metrics_to_highlighter(tbl,new_tbl)\r\n\tif(type(tbl)~=\"table\") then\r\n\t\treturn tbl;\r\n\tend\r\n\r\n\tnew_tbl=new_tbl or {};\r\n\t\r\n\tlocal table_found=false;\r\n\tfor k,v in ipairs(tbl.data) do \r\n\t\tif(type(v)==\"table\") then \r\n\t\t\tnew_tbl[k]=metrics_to_highlighter(v);\r\n\t\t\ttable_found=true;\r\n\t\tend\r\n\tend\r\n\t\r\n\tnew_tbl['key']=(tbl['key']==\"NEWLINE\" and \"SPACE\" or tbl['key']);\r\n\tnew_tbl['str']=tbl['text'];\r\n\t\r\n\tif(tbl['varid']) then\r\n\t\tnew_tbl['css_extra']=\" pp_js_varid pp_js_var\"..tbl['varid'];\r\n\tend\r\n\treturn new_tbl;\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "if(type(tbl)~=\"table\") then\r\n\t\treturn tbl;\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "new_tbl=new_tbl or {}",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "local table_found=false",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "for k,v in ipairs(tbl.data) do \r\n\t\tif(type(v)==\"table\") then \r\n\t\t\tnew_tbl[k]=metrics_to_highlighter(v);\r\n\t\t\ttable_found=true;\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 25,
    "text": "if(type(v)==\"table\") then \r\n\t\t\tnew_tbl[k]=metrics_to_highlighter(v);\r\n\t\t\ttable_found=true;\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "new_tbl[k]=metrics_to_highlighter(v)",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "table_found=true",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "new_tbl['key']=(tbl['key']==\"NEWLINE\" and \"SPACE\" or tbl['key'])",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "new_tbl['str']=tbl['text']",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "if(tbl['varid']) then\r\n\t\tnew_tbl['css_extra']=\" pp_js_varid pp_js_var\"..tbl['varid'];\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "new_tbl['css_extra']=\" pp_js_varid pp_js_var\"..tbl['varid']",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "",
    "type": "function container"
  }, {
    "id": 34,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 35,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 36,
    "text": "module",
    "type": "global function"
  }, {
    "id": 37,
    "text": "type",
    "type": "global function"
  }, {
    "id": 38,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 39,
    "text": "",
    "type": "variable container"
  }, {
    "id": 40,
    "text": "",
    "type": "require container"
  } ]
}