{
  "_filename": "microbenchmark.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-resty-template/lib/resty/template/microbenchmark.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 5,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 5,
    "label": "has",
    "to": 13
  }, {
    "from": 5,
    "label": "has",
    "to": 14
  }, {
    "from": 5,
    "label": "has",
    "to": 15
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 16
  }, {
    "from": 5,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 5,
    "label": "has",
    "to": 20
  }, {
    "from": 5,
    "label": "has",
    "to": 21
  }, {
    "from": 5,
    "label": "has",
    "to": 15
  }, {
    "from": 5,
    "label": "has",
    "to": 18
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 16
  }, {
    "from": 5,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 5,
    "label": "has",
    "to": 20
  }, {
    "from": 5,
    "label": "has",
    "to": 24
  }, {
    "from": 5,
    "label": "has",
    "to": 15
  }, {
    "from": 5,
    "label": "has",
    "to": 25
  }, {
    "from": 5,
    "label": "has",
    "to": 19
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 16
  }, {
    "from": 5,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 19
  }, {
    "from": 5,
    "label": "has",
    "to": 20
  }, {
    "from": 5,
    "label": "has",
    "to": 28
  }, {
    "from": 5,
    "label": "has",
    "to": 15
  }, {
    "from": 5,
    "label": "has",
    "to": 19
  }, {
    "from": 5,
    "label": "has",
    "to": 23
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 16
  }, {
    "from": 5,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 27
  }, {
    "from": 5,
    "label": "has",
    "to": 20
  }, {
    "from": 5,
    "label": "has",
    "to": 30
  }, {
    "from": 5,
    "label": "has",
    "to": 15
  }, {
    "from": 5,
    "label": "has",
    "to": 19
  }, {
    "from": 5,
    "label": "has",
    "to": 31
  }, {
    "from": 5,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 16
  }, {
    "from": 5,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 5,
    "label": "has",
    "to": 20
  }, {
    "from": 5,
    "label": "has",
    "to": 36
  }, {
    "from": 5,
    "label": "has",
    "to": 15
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 16
  }, {
    "from": 5,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 5,
    "label": "has",
    "to": 20
  }, {
    "from": 5,
    "label": "has",
    "to": 37
  }, {
    "from": 5,
    "label": "has",
    "to": 15
  }, {
    "from": 5,
    "label": "has",
    "to": 38
  }, {
    "from": 5,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 5,
    "label": "has",
    "to": 19
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 16
  }, {
    "from": 5,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 5,
    "label": "has",
    "to": 20
  }, {
    "from": 5,
    "label": "has",
    "to": 43
  }, {
    "from": 5,
    "label": "has",
    "to": 15
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 16
  }, {
    "from": 5,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 5,
    "label": "has",
    "to": 20
  }, {
    "from": 5,
    "label": "has",
    "to": 44
  }, {
    "from": 5,
    "label": "has",
    "to": 15
  }, {
    "from": 5,
    "label": "has",
    "to": 45
  }, {
    "from": 5,
    "label": "has",
    "to": 46
  }, {
    "from": 5,
    "label": "calls",
    "to": 48
  }, {
    "from": 5,
    "label": "calls",
    "to": 48
  }, {
    "from": 5,
    "label": "calls",
    "to": 48
  }, {
    "from": 5,
    "label": "calls",
    "to": 48
  }, {
    "from": 5,
    "label": "calls",
    "to": 48
  }, {
    "from": 5,
    "label": "calls",
    "to": 48
  }, {
    "from": 5,
    "label": "calls",
    "to": 48
  }, {
    "from": 5,
    "label": "calls",
    "to": 48
  }, {
    "from": 5,
    "label": "calls",
    "to": 48
  }, {
    "from": 5,
    "label": "calls",
    "to": 48
  }, {
    "from": 5,
    "label": "calls",
    "to": 48
  }, {
    "from": 5,
    "label": "calls",
    "to": 3
  }, {
    "from": 5,
    "label": "calls",
    "to": 3
  }, {
    "from": 47,
    "label": "calls",
    "to": 51
  }, {
    "from": 5,
    "label": "calls",
    "to": 54
  }, {
    "from": 5,
    "label": "calls",
    "to": 54
  }, {
    "from": 5,
    "label": "calls",
    "to": 54
  }, {
    "from": 5,
    "label": "calls",
    "to": 54
  }, {
    "from": 5,
    "label": "calls",
    "to": 54
  }, {
    "from": 5,
    "label": "calls",
    "to": 54
  }, {
    "from": 5,
    "label": "calls",
    "to": 54
  }, {
    "from": 5,
    "label": "calls",
    "to": 54
  }, {
    "from": 5,
    "label": "calls",
    "to": 54
  }, {
    "from": 5,
    "label": "calls",
    "to": 54
  }, {
    "from": 5,
    "label": "calls",
    "to": 54
  }, {
    "from": 5,
    "label": "calls",
    "to": 54
  }, {
    "from": 5,
    "label": "calls",
    "to": 54
  }, {
    "from": 5,
    "label": "calls",
    "to": 54
  }, {
    "from": 5,
    "label": "calls",
    "to": 54
  }, {
    "from": 5,
    "label": "calls",
    "to": 54
  }, {
    "from": 5,
    "label": "calls",
    "to": 54
  }, {
    "from": 5,
    "label": "calls",
    "to": 54
  }, {
    "from": 5,
    "label": "calls",
    "to": 50
  }, {
    "from": 5,
    "label": "calls",
    "to": 50
  }, {
    "from": 5,
    "label": "calls",
    "to": 50
  }, {
    "from": 5,
    "label": "calls",
    "to": 50
  }, {
    "from": 5,
    "label": "calls",
    "to": 50
  }, {
    "from": 5,
    "label": "calls",
    "to": 50
  }, {
    "from": 5,
    "label": "calls",
    "to": 50
  }, {
    "from": 5,
    "label": "calls",
    "to": 50
  }, {
    "from": 5,
    "label": "calls",
    "to": 50
  }, {
    "from": 5,
    "label": "calls",
    "to": 50
  }, {
    "from": 5,
    "label": "calls",
    "to": 50
  }, {
    "from": 5,
    "label": "calls",
    "to": 55
  }, {
    "from": 47,
    "label": "calls",
    "to": 53
  }, {
    "from": 5,
    "label": "calls",
    "to": 49
  }, {
    "from": 5,
    "label": "calls",
    "to": 49
  }, {
    "from": 5,
    "label": "calls",
    "to": 49
  }, {
    "from": 5,
    "label": "calls",
    "to": 49
  }, {
    "from": 5,
    "label": "calls",
    "to": 49
  }, {
    "from": 5,
    "label": "calls",
    "to": 49
  }, {
    "from": 5,
    "label": "calls",
    "to": 49
  }, {
    "from": 5,
    "label": "calls",
    "to": 49
  }, {
    "from": 5,
    "label": "calls",
    "to": 49
  }, {
    "from": 5,
    "label": "calls",
    "to": 49
  }, {
    "from": 5,
    "label": "calls",
    "to": 52
  }, {
    "from": 5,
    "label": "calls",
    "to": 52
  }, {
    "from": 5,
    "label": "calls",
    "to": 52
  }, {
    "from": 5,
    "label": "calls",
    "to": 52
  }, {
    "from": 5,
    "label": "calls",
    "to": 52
  }, {
    "from": 5,
    "label": "calls",
    "to": 52
  }, {
    "from": 5,
    "label": "calls",
    "to": 52
  }, {
    "from": 5,
    "label": "calls",
    "to": 52
  }, {
    "from": 5,
    "label": "calls",
    "to": 52
  }, {
    "from": 5,
    "label": "calls",
    "to": 52
  }, {
    "from": 5,
    "label": "calls",
    "to": 52
  }, {
    "from": 5,
    "label": "calls",
    "to": 52
  }, {
    "from": 5,
    "label": "calls",
    "to": 52
  }, {
    "from": 5,
    "label": "calls",
    "to": 52
  }, {
    "from": 5,
    "label": "calls",
    "to": 52
  }, {
    "from": 5,
    "label": "calls",
    "to": 52
  }, {
    "from": 5,
    "label": "calls",
    "to": 52
  }, {
    "from": 5,
    "label": "calls",
    "to": 52
  }, {
    "from": 1,
    "label": "contains",
    "to": 47
  }, {
    "from": 47,
    "label": "declares",
    "to": 3
  }, {
    "from": 47,
    "label": "declares",
    "to": 5
  }, {
    "from": 1,
    "label": "contains",
    "to": 56
  }, {
    "from": 1,
    "label": "contains",
    "to": 57
  }, {
    "from": 56,
    "label": "initializes",
    "to": 58
  }, {
    "from": 58,
    "label": "assigns",
    "to": 59
  }, {
    "from": 56,
    "label": "initializes",
    "to": 60
  }, {
    "from": 57,
    "label": "initializes",
    "to": 61
  }, {
    "from": 61,
    "label": "requires",
    "to": 2
  }, {
    "from": 1,
    "label": "provides",
    "to": 62
  }, {
    "from": 5,
    "label": "represents",
    "to": 63
  }, {
    "from": 62,
    "label": "provides",
    "to": 63
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "microbenchmark",
    "type": "module"
  }, {
    "id": 2,
    "text": "template",
    "type": "module"
  }, {
    "id": 3,
    "text": "function() return {} end",
    "type": "function"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "local function run(iterations)\r\n    local gc, total, print, parse, compile, iterations, clock, format = collectgarbage, 0, ngx and ngx.say or print, template.parse, template.compile, iterations or 1000, os.clock, string.format\r\n    local view = [[\r\n    <ul>\r\n    {% for _, v in ipairs(context) do %}\r\n        <li>{{v}}</li>\r\n    {% end %}\r\n    </ul>]]\r\n\r\n    print(format(\"Running %d iterations in each test\", iterations))\r\n\r\n    gc()\r\n    gc()\r\n\r\n    local x = clock()\r\n    for _ = 1, iterations do\r\n        parse(view, true)\r\n    end\r\n    local z = clock() - x\r\n    print(format(\"    Parsing Time: %.6f\", z))\r\n    total = total + z\r\n\r\n    gc()\r\n    gc()\r\n\r\n    x = clock()\r\n    for _ = 1, iterations do\r\n        compile(view, nil, true)\r\n        template.cache = {}\r\n    end\r\n    z = clock() - x\r\n    print(format(\"Compilation Time: %.6f (template)\", z))\r\n    total = total + z\r\n\r\n    compile(view, nil, true)\r\n\r\n    gc()\r\n    gc()\r\n\r\n    x = clock()\r\n    for _ = 1, iterations do\r\n        compile(view, 1, true)\r\n    end\r\n    z = clock() - x\r\n    print(format(\"Compilation Time: %.6f (template, cached)\", z))\r\n    total = total + z\r\n\r\n    local context = { \"Emma\", \"James\", \"Nicholas\", \"Mary\" }\r\n\r\n    template.cache = {}\r\n\r\n    gc()\r\n    gc()\r\n\r\n    x = clock()\r\n    for _ = 1, iterations do\r\n        compile(view, 1, true)(context)\r\n        template.cache = {}\r\n    end\r\n    z = clock() - x\r\n    print(format(\"  Execution Time: %.6f (same template)\", z))\r\n    total = total + z\r\n\r\n    template.cache = {}\r\n    compile(view, 1, true)\r\n\r\n    gc()\r\n    gc()\r\n\r\n    x = clock()\r\n    for _ = 1, iterations do\r\n        compile(view, 1, true)(context)\r\n    end\r\n    z = clock() - x\r\n    print(format(\"  Execution Time: %.6f (same template, cached)\", z))\r\n    total = total + z\r\n\r\n    template.cache = {}\r\n\r\n    local views = new_tab(iterations, 0)\r\n    for i = 1, iterations do\r\n        views[i] = \"<h1>Iteration \" .. i .. \"</h1>\\n\" .. view\r\n    end\r\n\r\n    gc()\r\n    gc()\r\n\r\n    x = clock()\r\n    for i = 1, iterations do\r\n        compile(views[i], i, true)(context)\r\n    end\r\n    z = clock() - x\r\n    print(format(\"  Execution Time: %.6f (different template)\", z))\r\n    total = total + z\r\n\r\n    gc()\r\n    gc()\r\n\r\n    x = clock()\r\n    for i = 1, iterations do\r\n        compile(views[i], i, true)(context)\r\n    end\r\n    z = clock() - x\r\n    print(format(\"  Execution Time: %.6f (different template, cached)\", z))\r\n    total = total + z\r\n\r\n    local contexts = new_tab(iterations, 0)\r\n\r\n    for i = 1, iterations do\r\n        contexts[i] = { \"Emma\", \"James\", \"Nicholas\", \"Mary\" }\r\n    end\r\n\r\n    template.cache = {}\r\n\r\n    gc()\r\n    gc()\r\n\r\n    x = clock()\r\n    for i = 1, iterations do\r\n        compile(views[i], i, true)(contexts[i])\r\n    end\r\n    z = clock() - x\r\n    print(format(\"  Execution Time: %.6f (different template, different context)\", z))\r\n    total = total + z\r\n\r\n    gc()\r\n    gc()\r\n\r\n    x = clock()\r\n    for i = 1, iterations do\r\n        compile(views[i], i, true)(contexts[i])\r\n    end\r\n    z = clock() - x\r\n    print(format(\"  Execution Time: %.6f (different template, different context, cached)\", z))\r\n    total = total + z\r\n    print(format(\"      Total Time: %.6f\", total))\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local gc, total, print, parse, compile, iterations, clock, format = collectgarbage, 0, ngx and ngx.say or print, template.parse, template.compile, iterations or 1000, os.clock, string.format",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "local view = [[\r\n    <ul>\r\n    {% for _, v in ipairs(context) do %}\r\n        <li>{{v}}</li>\r\n    {% end %}\r\n    </ul>]]",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "print(format(\"Running %d iterations in each test\", iterations))",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "gc()",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "local x = clock()",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "for _ = 1, iterations do\r\n        parse(view, true)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 12,
    "text": "parse(view, true)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "local z = clock() - x",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "print(format(\"    Parsing Time: %.6f\", z))",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "total = total + z",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "x = clock()",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "for _ = 1, iterations do\r\n        compile(view, nil, true)\r\n        template.cache = {}\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 18,
    "text": "compile(view, nil, true)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "template.cache = {}",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "z = clock() - x",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "print(format(\"Compilation Time: %.6f (template)\", z))",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "for _ = 1, iterations do\r\n        compile(view, 1, true)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 23,
    "text": "compile(view, 1, true)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "print(format(\"Compilation Time: %.6f (template, cached)\", z))",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "local context = { \"Emma\", \"James\", \"Nicholas\", \"Mary\" }",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "for _ = 1, iterations do\r\n        compile(view, 1, true)(context)\r\n        template.cache = {}\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 27,
    "text": "compile(view, 1, true)(context)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "print(format(\"  Execution Time: %.6f (same template)\", z))",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "for _ = 1, iterations do\r\n        compile(view, 1, true)(context)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 30,
    "text": "print(format(\"  Execution Time: %.6f (same template, cached)\", z))",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "local views = new_tab(iterations, 0)",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "for i = 1, iterations do\r\n        views[i] = \"<h1>Iteration \" .. i .. \"</h1>\\n\" .. view\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 33,
    "text": "views[i] = \"<h1>Iteration \" .. i .. \"</h1>\\n\" .. view",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "for i = 1, iterations do\r\n        compile(views[i], i, true)(context)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 35,
    "text": "compile(views[i], i, true)(context)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "print(format(\"  Execution Time: %.6f (different template)\", z))",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "print(format(\"  Execution Time: %.6f (different template, cached)\", z))",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "local contexts = new_tab(iterations, 0)",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "for i = 1, iterations do\r\n        contexts[i] = { \"Emma\", \"James\", \"Nicholas\", \"Mary\" }\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 40,
    "text": "contexts[i] = { \"Emma\", \"James\", \"Nicholas\", \"Mary\" }",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "for i = 1, iterations do\r\n        compile(views[i], i, true)(contexts[i])\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 42,
    "text": "compile(views[i], i, true)(contexts[i])",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "print(format(\"  Execution Time: %.6f (different template, different context)\", z))",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "print(format(\"  Execution Time: %.6f (different template, different context, cached)\", z))",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "print(format(\"      Total Time: %.6f\", total))",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "",
    "type": "function container"
  }, {
    "id": 48,
    "text": "format",
    "type": "global function"
  }, {
    "id": 49,
    "text": "compile",
    "type": "global function"
  }, {
    "id": 50,
    "text": "print",
    "type": "global function"
  }, {
    "id": 51,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 52,
    "text": "gc",
    "type": "global function"
  }, {
    "id": 53,
    "text": "require",
    "type": "global function"
  }, {
    "id": 54,
    "text": "clock",
    "type": "global function"
  }, {
    "id": 55,
    "text": "parse",
    "type": "global function"
  }, {
    "id": 56,
    "text": "",
    "type": "variable container"
  }, {
    "id": 57,
    "text": "",
    "type": "require container"
  }, {
    "id": 58,
    "text": "",
    "type": "local variable"
  }, {
    "id": 59,
    "text": "",
    "type": "n/a"
  }, {
    "id": 60,
    "text": "",
    "type": "local variable"
  }, {
    "id": 61,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 62,
    "text": "",
    "type": "interface container"
  }, {
    "id": 63,
    "text": "",
    "type": "interface"
  } ]
}