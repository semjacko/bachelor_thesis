{
  "_filename": "puptest.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/pluto/puptest.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 5
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 10,
    "label": "has",
    "to": 19
  }, {
    "from": 10,
    "label": "has",
    "to": 20
  }, {
    "from": 10,
    "label": "has",
    "to": 21
  }, {
    "from": 10,
    "label": "has",
    "to": 22
  }, {
    "from": 10,
    "label": "has",
    "to": 23
  }, {
    "from": 10,
    "label": "has",
    "to": 24
  }, {
    "from": 10,
    "label": "has",
    "to": 25
  }, {
    "from": 10,
    "label": "has",
    "to": 26
  }, {
    "from": 10,
    "label": "has",
    "to": 27
  }, {
    "from": 10,
    "label": "has",
    "to": 28
  }, {
    "from": 10,
    "label": "has",
    "to": 29
  }, {
    "from": 10,
    "label": "has",
    "to": 30
  }, {
    "from": 10,
    "label": "has",
    "to": 31
  }, {
    "from": 10,
    "label": "has",
    "to": 32
  }, {
    "from": 10,
    "label": "has",
    "to": 33
  }, {
    "from": 10,
    "label": "has",
    "to": 34
  }, {
    "from": 10,
    "label": "has",
    "to": 35
  }, {
    "from": 10,
    "label": "has",
    "to": 36
  }, {
    "from": 10,
    "label": "has",
    "to": 37
  }, {
    "from": 10,
    "label": "has",
    "to": 38
  }, {
    "from": 10,
    "label": "has",
    "to": 39
  }, {
    "from": 10,
    "label": "has",
    "to": 40
  }, {
    "from": 10,
    "label": "has",
    "to": 41
  }, {
    "from": 10,
    "label": "has",
    "to": 42
  }, {
    "from": 10,
    "label": "has",
    "to": 43
  }, {
    "from": 10,
    "label": "has",
    "to": 44
  }, {
    "from": 10,
    "label": "has",
    "to": 45
  }, {
    "from": 10,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 10,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 14
  }, {
    "from": 50,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 10,
    "label": "calls",
    "to": 54
  }, {
    "from": 7,
    "label": "calls",
    "to": 71
  }, {
    "from": 10,
    "label": "calls",
    "to": 71
  }, {
    "from": 52,
    "label": "calls",
    "to": 10
  }, {
    "from": 52,
    "label": "calls",
    "to": 56
  }, {
    "from": 52,
    "label": "calls",
    "to": 56
  }, {
    "from": 10,
    "label": "calls",
    "to": 7
  }, {
    "from": 2,
    "label": "calls",
    "to": 58
  }, {
    "from": 2,
    "label": "calls",
    "to": 58
  }, {
    "from": 10,
    "label": "calls",
    "to": 67
  }, {
    "from": 10,
    "label": "calls",
    "to": 61
  }, {
    "from": 10,
    "label": "calls",
    "to": 69
  }, {
    "from": 10,
    "label": "calls",
    "to": 63
  }, {
    "from": 10,
    "label": "calls",
    "to": 63
  }, {
    "from": 10,
    "label": "calls",
    "to": 68
  }, {
    "from": 10,
    "label": "calls",
    "to": 50
  }, {
    "from": 10,
    "label": "calls",
    "to": 50
  }, {
    "from": 10,
    "label": "calls",
    "to": 50
  }, {
    "from": 10,
    "label": "calls",
    "to": 50
  }, {
    "from": 10,
    "label": "calls",
    "to": 50
  }, {
    "from": 10,
    "label": "calls",
    "to": 50
  }, {
    "from": 10,
    "label": "calls",
    "to": 50
  }, {
    "from": 10,
    "label": "calls",
    "to": 50
  }, {
    "from": 10,
    "label": "calls",
    "to": 50
  }, {
    "from": 10,
    "label": "calls",
    "to": 50
  }, {
    "from": 10,
    "label": "calls",
    "to": 50
  }, {
    "from": 10,
    "label": "calls",
    "to": 50
  }, {
    "from": 10,
    "label": "calls",
    "to": 50
  }, {
    "from": 10,
    "label": "calls",
    "to": 50
  }, {
    "from": 10,
    "label": "calls",
    "to": 50
  }, {
    "from": 10,
    "label": "calls",
    "to": 50
  }, {
    "from": 10,
    "label": "calls",
    "to": 50
  }, {
    "from": 10,
    "label": "calls",
    "to": 50
  }, {
    "from": 10,
    "label": "calls",
    "to": 50
  }, {
    "from": 10,
    "label": "calls",
    "to": 50
  }, {
    "from": 10,
    "label": "calls",
    "to": 50
  }, {
    "from": 10,
    "label": "calls",
    "to": 50
  }, {
    "from": 10,
    "label": "calls",
    "to": 50
  }, {
    "from": 10,
    "label": "calls",
    "to": 50
  }, {
    "from": 10,
    "label": "calls",
    "to": 50
  }, {
    "from": 10,
    "label": "calls",
    "to": 50
  }, {
    "from": 10,
    "label": "calls",
    "to": 65
  }, {
    "from": 10,
    "label": "calls",
    "to": 65
  }, {
    "from": 10,
    "label": "calls",
    "to": 65
  }, {
    "from": 10,
    "label": "calls",
    "to": 65
  }, {
    "from": 10,
    "label": "calls",
    "to": 65
  }, {
    "from": 10,
    "label": "calls",
    "to": 66
  }, {
    "from": 10,
    "label": "calls",
    "to": 66
  }, {
    "from": 10,
    "label": "calls",
    "to": 64
  }, {
    "from": 2,
    "label": "calls",
    "to": 62
  }, {
    "from": 10,
    "label": "calls",
    "to": 60
  }, {
    "from": 10,
    "label": "calls",
    "to": 59
  }, {
    "from": 10,
    "label": "calls",
    "to": 2
  }, {
    "from": 10,
    "label": "calls",
    "to": 57
  }, {
    "from": 52,
    "label": "calls",
    "to": 70
  }, {
    "from": 52,
    "label": "calls",
    "to": 53
  }, {
    "from": 52,
    "label": "calls",
    "to": 55
  }, {
    "from": 1,
    "label": "contains",
    "to": 52
  }, {
    "from": 52,
    "label": "declares",
    "to": 2
  }, {
    "from": 52,
    "label": "declares",
    "to": 7
  }, {
    "from": 52,
    "label": "declares",
    "to": 10
  }, {
    "from": 52,
    "label": "declares",
    "to": 50
  }, {
    "from": 1,
    "label": "contains",
    "to": 73
  }, {
    "from": 1,
    "label": "contains",
    "to": 74
  }, {
    "from": 73,
    "label": "initializes",
    "to": 75
  }, {
    "from": 75,
    "label": "assigns",
    "to": 76
  }, {
    "from": 73,
    "label": "initializes",
    "to": 77
  }, {
    "from": 77,
    "label": "assigns",
    "to": 78
  }, {
    "from": 73,
    "label": "initializes",
    "to": 79
  }, {
    "from": 79,
    "label": "assigns",
    "to": 80
  }, {
    "from": 73,
    "label": "initializes",
    "to": 81
  }, {
    "from": 73,
    "label": "initializes",
    "to": 82
  }, {
    "from": 82,
    "label": "assigns",
    "to": 83
  }, {
    "from": 73,
    "label": "initializes",
    "to": 84
  }, {
    "from": 73,
    "label": "initializes",
    "to": 85
  }, {
    "from": 85,
    "label": "assigns",
    "to": 86
  }, {
    "from": 74,
    "label": "initializes",
    "to": 72
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "puptest",
    "type": "module"
  }, {
    "id": 2,
    "text": "function testcounter(counter)\r\n\tlocal a = counter.cur()\r\n\tcounter.inc()\r\n\treturn counter.cur() == a+1\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local a = counter.cur()",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "counter.inc()",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "function testuvinthread(func)\r\n\tlocal success, result = coroutine.resume(func)\r\n\treturn success and result == 5\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "local success, result = coroutine.resume(func)",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function test(rootobj)\r\n\tlocal passed = 0\r\n\tlocal total = 0\r\n\tlocal dotest = function(name,cond)\r\n\t\ttotal = total+1\r\n\t\tif cond then\r\n\t\t\tprint(name, \"  PASSED\")\r\n\t\t\tpassed = passed + 1\r\n\t\telse\r\n\t\t\tprint(name, \"* FAILED\")\r\n\t\tend\r\n\tend\r\n\r\n\t\t\r\n\tdotest(\"Boolean FALSE        \", rootobj.testfalse == false)\r\n\tdotest(\"Boolean TRUE         \", rootobj.testtrue == true)\r\n\tdotest(\"Number 7             \", rootobj.testseven == 7)\r\n\tdotest(\"String 'foobar'      \", rootobj.testfoobar == \"foobar\")\r\n\tdotest(\"Func returning 4     \", rootobj.testfuncreturnsfour() == 4)\r\n\tdotest(\"Nil value            \", rootobj.testnil == nil)\r\n\tdotest(\"Thread resume        \", coroutine.resume(rootobj.testthread) == true,14)\r\n\tdotest(\"Table                \", rootobj.testtbl.a == 2 and rootobj.testtbl[2] == 4);\r\n\tdotest(\"Permanent table      \", rootobj.testperm == permtable)\r\n\tdotest(\"Table metatable      \", rootobj.testmt() == 21)\r\n\tdotest(\"Function env         \", rootobj.testfenv() == 456)\r\n\tdotest(\"Lua closure          \", rootobj.testclosure() == 11)\r\n\tdotest(\"Nil in closure       \", rootobj.testnilclosure() == nil)\r\n\tdotest(\"Nested func          \", rootobj.testnest(1) == 6)\r\n\tdotest(\"Light userdata       \", checkludata(rootobj.testludata))\r\n\tdotest(\"Looped tables        \", \r\n\t\trootobj.testlooptable.testloopb.testloopa == \r\n\t\trootobj.testlooptable)\r\n\tdotest(\"Shared reference     \", rootobj.testsharedrefa.sharedref ==\r\n\t\trootobj.testsharedrefb.sharedref)\r\n\tdotest(\"Identical tables     \", rootobj.testsharedrefa ~= \r\n\t\trootobj.testsharedrefb)\r\n\tdotest(\"Table special persist\", rootobj.testsptable.a == 6)\r\n\tdotest(\"Udata literal persist\", \r\n\t\tunboxinteger(rootobj.testliteraludata) == 71)\r\n\tdotest(\"Udata special persist\", \r\n\t\tunboxboolean(rootobj.testspudata1) == true and\r\n\t\tunboxboolean(rootobj.testspudata2) == false)\r\n\tdotest(\"Shared upvalues      \",\r\n\t\ttestcounter(rootobj.testsharedupval))\r\n\tdotest(\"Open upvalues        \", \r\n\t\ttestuvinthread(rootobj.testuvinthread))\r\n\tdotest(\"Upvalue cycles       \", \r\n\t\trootobj.testuvcycle()[1] == rootobj.testuvcycle()[2])\r\n\tdotest(\"__newindex metamethod\", rootobj.testniinmt.a == 3)\r\n\tdotest(\"Debug info           \", (rootobj.testdebuginfo(2)) == \"foo\")\r\n\tprint()\r\n\tif passed == total then\r\n\t\tprint(\"All tests passed.\")\r\n\telse\r\n\t\tprint(passed .. \"/\" .. total .. \" tests passed.\")\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "local passed = 0",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "local total = 0",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "local dotest = function(name,cond)\r\n\t\ttotal = total+1\r\n\t\tif cond then\r\n\t\t\tprint(name, \"  PASSED\")\r\n\t\t\tpassed = passed + 1\r\n\t\telse\r\n\t\t\tprint(name, \"* FAILED\")\r\n\t\tend\r\n\tend",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "total = total+1",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "if cond then\r\n\t\t\tprint(name, \"  PASSED\")\r\n\t\t\tpassed = passed + 1\r\n\t\telse\r\n\t\t\tprint(name, \"* FAILED\")\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "print(name, \"  PASSED\")",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "passed = passed + 1",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "print(name, \"* FAILED\")",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "dotest(\"Boolean FALSE        \", rootobj.testfalse == false)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "dotest(\"Boolean TRUE         \", rootobj.testtrue == true)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "dotest(\"Number 7             \", rootobj.testseven == 7)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "dotest(\"String 'foobar'      \", rootobj.testfoobar == \"foobar\")",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "dotest(\"Func returning 4     \", rootobj.testfuncreturnsfour() == 4)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "dotest(\"Nil value            \", rootobj.testnil == nil)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "dotest(\"Thread resume        \", coroutine.resume(rootobj.testthread) == true,14)",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "dotest(\"Table                \", rootobj.testtbl.a == 2 and rootobj.testtbl[2] == 4)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "dotest(\"Permanent table      \", rootobj.testperm == permtable)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "dotest(\"Table metatable      \", rootobj.testmt() == 21)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "dotest(\"Function env         \", rootobj.testfenv() == 456)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "dotest(\"Lua closure          \", rootobj.testclosure() == 11)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "dotest(\"Nil in closure       \", rootobj.testnilclosure() == nil)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "dotest(\"Nested func          \", rootobj.testnest(1) == 6)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "dotest(\"Light userdata       \", checkludata(rootobj.testludata))",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "dotest(\"Looped tables        \", \r\n\t\trootobj.testlooptable.testloopb.testloopa == \r\n\t\trootobj.testlooptable)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "dotest(\"Shared reference     \", rootobj.testsharedrefa.sharedref ==\r\n\t\trootobj.testsharedrefb.sharedref)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "dotest(\"Identical tables     \", rootobj.testsharedrefa ~= \r\n\t\trootobj.testsharedrefb)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "dotest(\"Table special persist\", rootobj.testsptable.a == 6)",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "dotest(\"Udata literal persist\", \r\n\t\tunboxinteger(rootobj.testliteraludata) == 71)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "dotest(\"Udata special persist\", \r\n\t\tunboxboolean(rootobj.testspudata1) == true and\r\n\t\tunboxboolean(rootobj.testspudata2) == false)",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "dotest(\"Shared upvalues      \",\r\n\t\ttestcounter(rootobj.testsharedupval))",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "dotest(\"Open upvalues        \", \r\n\t\ttestuvinthread(rootobj.testuvinthread))",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "dotest(\"Upvalue cycles       \", \r\n\t\trootobj.testuvcycle()[1] == rootobj.testuvcycle()[2])",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "dotest(\"__newindex metamethod\", rootobj.testniinmt.a == 3)",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "dotest(\"Debug info           \", (rootobj.testdebuginfo(2)) == \"foo\")",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "print()",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "if passed == total then\r\n\t\tprint(\"All tests passed.\")\r\n\telse\r\n\t\tprint(passed .. \"/\" .. total .. \" tests passed.\")\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "print(\"All tests passed.\")",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "print(passed .. \"/\" .. total .. \" tests passed.\")",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function(name,cond)\r\n\t\ttotal = total+1\r\n\t\tif cond then\r\n\t\t\tprint(name, \"  PASSED\")\r\n\t\t\tpassed = passed + 1\r\n\t\telse\r\n\t\t\tprint(name, \"* FAILED\")\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "",
    "type": "function container"
  }, {
    "id": 53,
    "text": "unpersist",
    "type": "global function"
  }, {
    "id": 54,
    "text": "testmt",
    "type": "global function"
  }, {
    "id": 55,
    "text": "open",
    "type": "global function"
  }, {
    "id": 56,
    "text": "error",
    "type": "global function"
  }, {
    "id": 57,
    "text": "testdebuginfo",
    "type": "global function"
  }, {
    "id": 58,
    "text": "cur",
    "type": "global function"
  }, {
    "id": 59,
    "text": "unboxinteger",
    "type": "global function"
  }, {
    "id": 60,
    "text": "testfuncreturnsfour",
    "type": "global function"
  }, {
    "id": 61,
    "text": "checkludata",
    "type": "global function"
  }, {
    "id": 62,
    "text": "inc",
    "type": "global function"
  }, {
    "id": 63,
    "text": "testuvcycle",
    "type": "global function"
  }, {
    "id": 64,
    "text": "testfenv",
    "type": "global function"
  }, {
    "id": 65,
    "text": "print",
    "type": "global function"
  }, {
    "id": 66,
    "text": "unboxboolean",
    "type": "global function"
  }, {
    "id": 67,
    "text": "testnest",
    "type": "global function"
  }, {
    "id": 68,
    "text": "testclosure",
    "type": "global function"
  }, {
    "id": 69,
    "text": "testnilclosure",
    "type": "global function"
  }, {
    "id": 70,
    "text": "require",
    "type": "global function"
  }, {
    "id": 71,
    "text": "resume",
    "type": "global function"
  }, {
    "id": 72,
    "text": "",
    "type": "global variable"
  }, {
    "id": 73,
    "text": "",
    "type": "variable container"
  }, {
    "id": 74,
    "text": "",
    "type": "require container"
  }, {
    "id": 75,
    "text": "",
    "type": "global variable"
  }, {
    "id": 76,
    "text": "",
    "type": "n/a"
  }, {
    "id": 77,
    "text": "",
    "type": "global variable"
  }, {
    "id": 78,
    "text": "",
    "type": "n/a"
  }, {
    "id": 79,
    "text": "",
    "type": "global variable"
  }, {
    "id": 80,
    "text": "",
    "type": "n/a"
  }, {
    "id": 81,
    "text": "",
    "type": "global variable"
  }, {
    "id": 82,
    "text": "",
    "type": "global variable"
  }, {
    "id": 83,
    "text": "",
    "type": "n/a"
  }, {
    "id": 84,
    "text": "",
    "type": "global variable"
  }, {
    "id": 85,
    "text": "",
    "type": "global variable"
  }, {
    "id": 86,
    "text": "",
    "type": "n/a"
  } ]
}