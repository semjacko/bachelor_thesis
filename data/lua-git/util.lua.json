{
  "_filename": "util.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-git/lua/git/util.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "calls",
    "to": 31
  }, {
    "from": 2,
    "label": "calls",
    "to": 31
  }, {
    "from": 2,
    "label": "calls",
    "to": 31
  }, {
    "from": 3,
    "label": "calls",
    "to": 31
  }, {
    "from": 4,
    "label": "calls",
    "to": 31
  }, {
    "from": 4,
    "label": "calls",
    "to": 31
  }, {
    "from": 4,
    "label": "calls",
    "to": 31
  }, {
    "from": 4,
    "label": "calls",
    "to": 31
  }, {
    "from": 4,
    "label": "calls",
    "to": 31
  }, {
    "from": 4,
    "label": "calls",
    "to": 31
  }, {
    "from": 4,
    "label": "calls",
    "to": 31
  }, {
    "from": 4,
    "label": "calls",
    "to": 31
  }, {
    "from": 4,
    "label": "calls",
    "to": 31
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 6
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 6
  }, {
    "from": 15,
    "label": "has",
    "to": 6
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 6
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 6
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 6
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 6
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 21
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 6
  }, {
    "from": 26,
    "label": "has",
    "to": 6
  }, {
    "from": 26,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 31,
    "label": "has",
    "to": 6
  }, {
    "from": 31,
    "label": "has",
    "to": 6
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 36,
    "label": "has",
    "to": 6
  }, {
    "from": 36,
    "label": "has",
    "to": 40
  }, {
    "from": 36,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 41,
    "label": "has",
    "to": 45
  }, {
    "from": 41,
    "label": "has",
    "to": 46
  }, {
    "from": 41,
    "label": "has",
    "to": 47
  }, {
    "from": 41,
    "label": "has",
    "to": 48
  }, {
    "from": 41,
    "label": "has",
    "to": 49
  }, {
    "from": 41,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 41,
    "label": "has",
    "to": 52
  }, {
    "from": 41,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 41,
    "label": "has",
    "to": 53
  }, {
    "from": 41,
    "label": "has",
    "to": 54
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 41,
    "label": "has",
    "to": 55
  }, {
    "from": 41,
    "label": "has",
    "to": 56
  }, {
    "from": 41,
    "label": "has",
    "to": 57
  }, {
    "from": 36,
    "label": "has",
    "to": 6
  }, {
    "from": 36,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 59,
    "label": "has",
    "to": 6
  }, {
    "from": 59,
    "label": "has",
    "to": 6
  }, {
    "from": 59,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 65,
    "label": "has",
    "to": 68
  }, {
    "from": 65,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 65,
    "label": "has",
    "to": 73
  }, {
    "from": 65,
    "label": "has",
    "to": 6
  }, {
    "from": 65,
    "label": "has",
    "to": 74
  }, {
    "from": 76,
    "label": "has",
    "to": 6
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 78,
    "label": "has",
    "to": 81
  }, {
    "from": 78,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 82,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 78,
    "label": "has",
    "to": 88
  }, {
    "from": 78,
    "label": "has",
    "to": 6
  }, {
    "from": 78,
    "label": "has",
    "to": 89
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 90,
    "label": "has",
    "to": 96
  }, {
    "from": 90,
    "label": "has",
    "to": 6
  }, {
    "from": 90,
    "label": "has",
    "to": 6
  }, {
    "from": 97,
    "label": "has",
    "to": 6
  }, {
    "from": 97,
    "label": "has",
    "to": 6
  }, {
    "from": 98,
    "label": "has",
    "to": 6
  }, {
    "from": 98,
    "label": "has",
    "to": 6
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 6
  }, {
    "from": 99,
    "label": "has",
    "to": 6
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 101,
    "label": "has",
    "to": 6
  }, {
    "from": 101,
    "label": "has",
    "to": 6
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 103,
    "label": "has",
    "to": 6
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 106,
    "label": "has",
    "to": 6
  }, {
    "from": 108,
    "label": "has",
    "to": 6
  }, {
    "from": 109,
    "label": "has",
    "to": 6
  }, {
    "from": 26,
    "label": "calls",
    "to": 24
  }, {
    "from": 97,
    "label": "calls",
    "to": 127
  }, {
    "from": 7,
    "label": "calls",
    "to": 129
  }, {
    "from": 59,
    "label": "calls",
    "to": 129
  }, {
    "from": 103,
    "label": "calls",
    "to": 121
  }, {
    "from": 110,
    "label": "calls",
    "to": 132
  }, {
    "from": 110,
    "label": "calls",
    "to": 132
  }, {
    "from": 36,
    "label": "calls",
    "to": 131
  }, {
    "from": 78,
    "label": "calls",
    "to": 131
  }, {
    "from": 106,
    "label": "calls",
    "to": 120
  }, {
    "from": 78,
    "label": "calls",
    "to": 116
  }, {
    "from": 36,
    "label": "calls",
    "to": 115
  }, {
    "from": 98,
    "label": "calls",
    "to": 115
  }, {
    "from": 110,
    "label": "calls",
    "to": 130
  }, {
    "from": 7,
    "label": "calls",
    "to": 122
  }, {
    "from": 78,
    "label": "calls",
    "to": 122
  }, {
    "from": 90,
    "label": "calls",
    "to": 122
  }, {
    "from": 31,
    "label": "calls",
    "to": 31
  }, {
    "from": 78,
    "label": "calls",
    "to": 76
  }, {
    "from": 98,
    "label": "calls",
    "to": 119
  }, {
    "from": 78,
    "label": "calls",
    "to": 125
  }, {
    "from": 31,
    "label": "calls",
    "to": 26
  }, {
    "from": 36,
    "label": "calls",
    "to": 124
  }, {
    "from": 99,
    "label": "calls",
    "to": 97
  }, {
    "from": 26,
    "label": "calls",
    "to": 19
  }, {
    "from": 31,
    "label": "calls",
    "to": 112
  }, {
    "from": 26,
    "label": "calls",
    "to": 12
  }, {
    "from": 78,
    "label": "calls",
    "to": 117
  }, {
    "from": 16,
    "label": "calls",
    "to": 15
  }, {
    "from": 19,
    "label": "calls",
    "to": 15
  }, {
    "from": 106,
    "label": "calls",
    "to": 106
  }, {
    "from": 19,
    "label": "calls",
    "to": 16
  }, {
    "from": 26,
    "label": "calls",
    "to": 16
  }, {
    "from": 26,
    "label": "calls",
    "to": 16
  }, {
    "from": 76,
    "label": "calls",
    "to": 128
  }, {
    "from": 97,
    "label": "calls",
    "to": 126
  }, {
    "from": 31,
    "label": "calls",
    "to": 113
  }, {
    "from": 59,
    "label": "calls",
    "to": 118
  }, {
    "from": 101,
    "label": "calls",
    "to": 98
  }, {
    "from": 78,
    "label": "calls",
    "to": 123
  }, {
    "from": 31,
    "label": "calls",
    "to": 114
  }, {
    "from": 78,
    "label": "calls",
    "to": 114
  }, {
    "from": 1,
    "label": "contains",
    "to": 110
  }, {
    "from": 110,
    "label": "declares",
    "to": 5
  }, {
    "from": 110,
    "label": "declares",
    "to": 7
  }, {
    "from": 110,
    "label": "declares",
    "to": 12
  }, {
    "from": 110,
    "label": "declares",
    "to": 15
  }, {
    "from": 110,
    "label": "declares",
    "to": 16
  }, {
    "from": 110,
    "label": "declares",
    "to": 19
  }, {
    "from": 110,
    "label": "declares",
    "to": 24
  }, {
    "from": 110,
    "label": "declares",
    "to": 26
  }, {
    "from": 110,
    "label": "declares",
    "to": 31
  }, {
    "from": 110,
    "label": "declares",
    "to": 36
  }, {
    "from": 110,
    "label": "declares",
    "to": 59
  }, {
    "from": 110,
    "label": "declares",
    "to": 65
  }, {
    "from": 110,
    "label": "declares",
    "to": 75
  }, {
    "from": 110,
    "label": "declares",
    "to": 76
  }, {
    "from": 110,
    "label": "declares",
    "to": 78
  }, {
    "from": 110,
    "label": "declares",
    "to": 90
  }, {
    "from": 110,
    "label": "declares",
    "to": 97
  }, {
    "from": 110,
    "label": "declares",
    "to": 98
  }, {
    "from": 110,
    "label": "declares",
    "to": 99
  }, {
    "from": 110,
    "label": "declares",
    "to": 101
  }, {
    "from": 110,
    "label": "declares",
    "to": 103
  }, {
    "from": 110,
    "label": "declares",
    "to": 106
  }, {
    "from": 110,
    "label": "declares",
    "to": 108
  }, {
    "from": 110,
    "label": "declares",
    "to": 109
  }, {
    "from": 133,
    "label": "requires",
    "to": 1
  }, {
    "from": 135,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 136
  }, {
    "from": 1,
    "label": "contains",
    "to": 137
  }, {
    "from": 136,
    "label": "initializes",
    "to": 138
  }, {
    "from": 138,
    "label": "assigns",
    "to": 139
  }, {
    "from": 136,
    "label": "initializes",
    "to": 140
  }, {
    "from": 140,
    "label": "assigns",
    "to": 141
  }, {
    "from": 136,
    "label": "initializes",
    "to": 142
  }, {
    "from": 142,
    "label": "assigns",
    "to": 143
  }, {
    "from": 136,
    "label": "initializes",
    "to": 144
  }, {
    "from": 144,
    "label": "assigns",
    "to": 145
  }, {
    "from": 136,
    "label": "initializes",
    "to": 146
  }, {
    "from": 146,
    "label": "assigns",
    "to": 147
  }, {
    "from": 136,
    "label": "initializes",
    "to": 148
  }, {
    "from": 148,
    "label": "assigns",
    "to": 149
  }, {
    "from": 136,
    "label": "initializes",
    "to": 150
  }, {
    "from": 150,
    "label": "assigns",
    "to": 151
  }, {
    "from": 137,
    "label": "initializes",
    "to": 152
  }, {
    "from": 152,
    "label": "requires",
    "to": 111
  }, {
    "from": 137,
    "label": "initializes",
    "to": 153
  }, {
    "from": 153,
    "label": "requires",
    "to": 134
  }, {
    "from": 154,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "util",
    "type": "module"
  }, {
    "id": 2,
    "text": "function Tree:checkoutTo(path)\n\tutil.make_dir(path)\n\tself:walk(function (entry, entry_path, type)\n\t\tif type == 'tree' then\n\t\t\tutil.make_dir(entry_path)\n\t\telseif type == 'blob' then\n\t\t\tlocal out = assert(io.open(entry_path, 'wb'))\n\t\t\tout:write(entry:content())\n\t\t\tout:close()\n\t\t\tif isPosix then\n\t\t\t\tlocal mode = entry.mode:sub(-3,-1) -- fixme: is this ok?\n\t\t\t\tlocal cmd = 'chmod '..mode..' \"'..entry_path..'\"'\n\t\t\t\tos.execute(cmd)\n\t\t\tend\n\t\telseif type == 'commit' then\n\t\t\t-- this is a submodule referencing a commit,\n\t\t\t-- make a directory for it\n\t\t\tutil.make_dir(entry_path)\n\t\telse\n\t\t\terror('Unknown entry type: ', type)\n\t\tend\n\tend, path)\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function Repo:store_object(data, len, type)\n\tlocal sha = readable_sha(object_sha(data, len, type))\n\tlocal dir = sha:sub(1,2)\n\tlocal file = sha:sub(3)\n\tutil.make_dir(join_path(self.dir, 'objects', dir))\n\tlocal path = join_path(self.dir, 'objects', dir, file)\n\tlocal fo = assert(io.open(path, 'wb'))\n\tlocal header = type .. ' ' .. len .. '\\0'\n\tlocal compressed = deflate()(header .. data, \"finish\")\n\tfo:write(compressed)\n\tfo:close()\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function create(dir)\n\tif not dir:match('%.git.?$') then\n\t\tdir = join_path(dir, '.git')\n\tend\n\t\n\tutil.make_dir(dir)\n\tutil.make_dir(dir .. '/branches')\n\tutil.make_dir(dir .. '/hooks')\n\tutil.make_dir(dir .. '/info')\t\n\tutil.make_dir(dir .. '/objects/info')\n\tutil.make_dir(dir .. '/objects/pack')\n\tutil.make_dir(dir .. '/refs/heads')\n\tutil.make_dir(dir .. '/refs/tags')\n\tutil.make_dir(dir .. '/refs/remotes')\n\n\tdo\n\t\tlocal f = assert(io.open(dir .. \"/HEAD\", \"w\"))\n\t\tf:write(\"ref: refs/heads/master\\n\")\n\t\tf:close()\n\tend\n\n\tlocal refs = {}\n\tlocal packs = {}\n\n\treturn setmetatable({\n\t\tdir = dir,\n\t\trefs = refs,\n\t\tpacks = packs,\n\t}, Repo)\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function correct_separators(path)\n\treturn path:gsub('/', dirsep)\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 7,
    "text": "function join_path(...)\n\tlocal n = select('#', ...)\n\tlocal args = {...}\n\tfor i=1,n do\n\t\targs[i] = args[i]:gsub(dirsep..'?$', '')\n\tend\n\treturn table.concat(args, dirsep, 1, n)\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "local n = select('#', ...)",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "local args = {...}",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "for i=1,n do\n\t\targs[i] = args[i]:gsub(dirsep..'?$', '')\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 11,
    "text": "args[i] = args[i]:gsub(dirsep..'?$', '')",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "local function remove_curr_dir_dots(path)\n\twhile path:match(dirsep .. \"%.\" .. dirsep) do             -- match(\"/%./\")\n\t\tpath = path:gsub(dirsep .. \"%.\" .. dirsep, dirsep)    -- gsub(\"/%./\", \"/\")\n\tend\n\treturn path:gsub(dirsep .. \"%.$\", \"\")                     -- gsub(\"/%.$\", \"\")\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "while path:match(dirsep .. \"%.\" .. dirsep) do             -- match(\"/%./\")\n\t\tpath = path:gsub(dirsep .. \"%.\" .. dirsep, dirsep)    -- gsub(\"/%./\", \"/\")\n\tend",
    "type": "statement:while"
  }, {
    "id": 14,
    "text": "path = path:gsub(dirsep .. \"%.\" .. dirsep, dirsep)",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "local function is_root(path)\n\treturn path:find(\"^[%u%U.]?:?[/\\\\]$\")\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "local function remove_trailing(path)\n\tif path:sub(-1) == dirsep and not is_root(path) then path = path:sub(1,-2) end\n\treturn path\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "if path:sub(-1) == dirsep and not is_root(path) then path = path:sub(1,-2) end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "path = path:sub(1,-2)",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "local function extract_name(path)\n\tif is_root(path) then return path end\n\n\tpath = remove_trailing(path)\n\tpath = path:gsub(\"^.*\" .. dirsep, \"\")\n\treturn path\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "if is_root(path) then return path end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "path = remove_trailing(path)",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "path = path:gsub(\"^.*\" .. dirsep, \"\")",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "local function escape_magic(str)\n\tlocal escaped = str:gsub('[%-%.%+%[%]%(%)%^%%%?%*%^%$]','%%%1')\n\treturn escaped\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "local escaped = str:gsub('[%-%.%+%[%]%(%)%^%%%?%*%^%$]','%%%1')",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "function parent_dir(path)\n\tpath = remove_curr_dir_dots(path)\n\tpath = remove_trailing(path)\n\n\tlocal dir = path:gsub(escape_magic(extract_name(path)) .. \"$\", \"\")\n\tif dir == \"\" then\n\t\treturn nil\n\telse\n\t\treturn remove_trailing(dir)\n\tend\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "path = remove_curr_dir_dots(path)",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "local dir = path:gsub(escape_magic(extract_name(path)) .. \"$\", \"\")",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "if dir == \"\" then\n\t\treturn nil\n\telse\n\t\treturn remove_trailing(dir)\n\tend",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function make_dir(path)\n\tif lfs.attributes(path) then\n\t\treturn true\n\telse\n\t\tlocal par_dir = parent_dir(path)\n\t\tif par_dir then\n\t\t\tassert(make_dir(par_dir))\n\t\tend\n\t\treturn lfs.mkdir(path)\n\tend\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "if lfs.attributes(path) then\n\t\treturn true\n\telse\n\t\tlocal par_dir = parent_dir(path)\n\t\tif par_dir then\n\t\t\tassert(make_dir(par_dir))\n\t\tend\n\t\treturn lfs.mkdir(path)\n\tend",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "local par_dir = parent_dir(path)",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "if par_dir then\n\t\t\tassert(make_dir(par_dir))\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "assert(make_dir(par_dir))",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "function SR:_read(fmt)\r\n    local i,str = self.i,self.str\r\n    local sz = #str\r\n    if i > sz then return nil, \"past end of file\" end\r\n    local res\r\n    if fmt == '*l' or fmt == '*L' then\r\n        local idx = str:find('\\n',i) or (sz+1)\r\n        res = str:sub(i,fmt == '*l' and idx-1 or idx)\r\n        self.i = idx+1\r\n    elseif fmt == '*a' then\r\n        res = str:sub(i)\r\n        self.i = sz+1\r\n    elseif fmt == '*n' then\r\n        local _,i2,i2,idx\r\n        _,idx = str:find ('%s*%d+',i)\r\n        _,i2 = str:find ('^%.%d+',idx+1)\r\n        if i2 then idx = i2 end\r\n        _,i2 = str:find ('^[eE][%+%-]*%d+',idx+1)\r\n        if i2 then idx = i2 end\r\n        local val = str:sub(i,idx)\r\n        res = tonumber(val)\r\n        self.i = idx+1\r\n    elseif type(fmt) == 'number' then\r\n        res = str:sub(i,i+fmt-1)\r\n        self.i = i + fmt\r\n    else\r\n        error(\"bad read format\",2)\r\n    end\r\n    return res\r\n\t\tend",
    "type": "function"
  }, {
    "id": 37,
    "text": "local i,str = self.i,self.str",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "local sz = #str",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "if i > sz then return nil, \"past end of file\" end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "local res",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "if fmt == '*l' or fmt == '*L' then\r\n        local idx = str:find('\\n',i) or (sz+1)\r\n        res = str:sub(i,fmt == '*l' and idx-1 or idx)\r\n        self.i = idx+1\r\n    elseif fmt == '*a' then\r\n        res = str:sub(i)\r\n        self.i = sz+1\r\n    elseif fmt == '*n' then\r\n        local _,i2,i2,idx\r\n        _,idx = str:find ('%s*%d+',i)\r\n        _,i2 = str:find ('^%.%d+',idx+1)\r\n        if i2 then idx = i2 end\r\n        _,i2 = str:find ('^[eE][%+%-]*%d+',idx+1)\r\n        if i2 then idx = i2 end\r\n        local val = str:sub(i,idx)\r\n        res = tonumber(val)\r\n        self.i = idx+1\r\n    elseif type(fmt) == 'number' then\r\n        res = str:sub(i,i+fmt-1)\r\n        self.i = i + fmt\r\n    else\r\n        error(\"bad read format\",2)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "local idx = str:find('\\n',i) or (sz+1)",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "res = str:sub(i,fmt == '*l' and idx-1 or idx)",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "self.i = idx+1",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "res = str:sub(i)",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "self.i = sz+1",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "local _,i2,i2,idx",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "_,idx = str:find ('%s*%d+',i)",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "_,i2 = str:find ('^%.%d+',idx+1)",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "if i2 then idx = i2 end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "idx = i2",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "_,i2 = str:find ('^[eE][%+%-]*%d+',idx+1)",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "local val = str:sub(i,idx)",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "res = tonumber(val)",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "res = str:sub(i,i+fmt-1)",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "self.i = i + fmt",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "error(\"bad read format\",2)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function SR:read(...)\r\n    if select('#',...) == 0 then\r\n        return self:_read('*l')\r\n    else\r\n        local res, fmts = {},{...}\r\n        for i = 1, #fmts do\r\n            res[i] = self:_read(fmts[i])\r\n\t\t\tend\n        return unpack(res)\r\n\t\t\t\tend\n\t\t\tend",
    "type": "function"
  }, {
    "id": 60,
    "text": "if select('#',...) == 0 then\r\n        return self:_read('*l')\r\n    else\r\n        local res, fmts = {},{...}\r\n        for i = 1, #fmts do\r\n            res[i] = self:_read(fmts[i])\r\n\t\t\tend\n        return unpack(res)\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "local res, fmts = {},{...}",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "for i = 1, #fmts do\r\n            res[i] = self:_read(fmts[i])\r\n\t\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 63,
    "text": "res[i] = self:_read(fmts[i])",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "function SR:seek(whence,offset)\r\n    local base\r\n    whence = whence or 'cur'\r\n    offset = offset or 0\r\n    if whence == 'set' then\r\n        base = 1\r\n    elseif whence == 'cur' then\r\n        base = self.i\r\n    elseif whence == 'end' then\r\n        base = #self.str\r\n\tend\n    self.i = base + offset\r\n    return self.i\r\nend",
    "type": "function"
  }, {
    "id": 66,
    "text": "local base",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "whence = whence or 'cur'",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "offset = offset or 0",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "if whence == 'set' then\r\n        base = 1\r\n    elseif whence == 'cur' then\r\n        base = self.i\r\n    elseif whence == 'end' then\r\n        base = #self.str\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "base = 1",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "base = self.i",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "base = #self.str",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "self.i = base + offset",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 75,
    "text": "function SR:close() -- for compatibility only\r\nend",
    "type": "function"
  }, {
    "id": 76,
    "text": "function reader(s)\r\n    return setmetatable({str=s,i=1},SR)\r\nend",
    "type": "function"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "function decompressed(path)\n\tlocal fi = assert(io.open(path, 'rb'))\n\tlocal result = {}\r\n\n\tlocal z = inflate()\n\trepeat\n\t\tlocal str = fi:read(BUF_SIZE)\n\t\tlocal data = z(str)\n\t\tif type(data) == 'string' then\n\t\t\tresult[#result+1] = data\r\n\t\telse print('!!!', data) end\n\tuntil not str\n\tfi:close()\n\r\n\treturn reader(table.concat(result))\r\nend",
    "type": "function"
  }, {
    "id": 79,
    "text": "local fi = assert(io.open(path, 'rb'))",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "local result = {}",
    "type": "statement:localassign"
  }, {
    "id": 81,
    "text": "local z = inflate()",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "repeat\n\t\tlocal str = fi:read(BUF_SIZE)\n\t\tlocal data = z(str)\n\t\tif type(data) == 'string' then\n\t\t\tresult[#result+1] = data\r\n\t\telse print('!!!', data) end\n\tuntil not str",
    "type": "statement:repeat"
  }, {
    "id": 83,
    "text": "local str = fi:read(BUF_SIZE)",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "local data = z(str)",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "if type(data) == 'string' then\n\t\t\tresult[#result+1] = data\r\n\t\telse print('!!!', data) end",
    "type": "statement:if"
  }, {
    "id": 86,
    "text": "result[#result+1] = data",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "print('!!!', data)",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "fi:close()",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 90,
    "text": "function read_until_nul(f)\n\tlocal t = {}\n\trepeat\n\t\tlocal c = f:read(1)\n\t\tif c and c ~= '\\0' then t[#t+1] = c end\n\tuntil not c or c == '\\0'\n\tif #t > 0 then\n\t\treturn table.concat(t)\n\telse\n\t\treturn nil\n\tend\nend",
    "type": "function"
  }, {
    "id": 91,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 92,
    "text": "repeat\n\t\tlocal c = f:read(1)\n\t\tif c and c ~= '\\0' then t[#t+1] = c end\n\tuntil not c or c == '\\0'",
    "type": "statement:repeat"
  }, {
    "id": 93,
    "text": "local c = f:read(1)",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "if c and c ~= '\\0' then t[#t+1] = c end",
    "type": "statement:if"
  }, {
    "id": 95,
    "text": "t[#t+1] = c",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "if #t > 0 then\n\t\treturn table.concat(t)\n\telse\n\t\treturn nil\n\tend",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "function to_hex(s)\n\treturn (s:gsub('.', function(c)\n\t\treturn string.format('%02x', string.byte(c))\n\tend))\nend",
    "type": "function"
  }, {
    "id": 98,
    "text": "function from_hex(s)\n\treturn (s:gsub('..', function(cc)\n\t\treturn string.char(tonumber(cc, 16))\n\tend))\nend",
    "type": "function"
  }, {
    "id": 99,
    "text": "function readable_sha(s)\n\tif #s ~= 40 then return to_hex(s)\n\telse return s end\nend",
    "type": "function"
  }, {
    "id": 100,
    "text": "if #s ~= 40 then return to_hex(s)\n\telse return s end",
    "type": "statement:if"
  }, {
    "id": 101,
    "text": "function binary_sha(s)\n\tif #s ~= 20 then return from_hex(s)\n\telse return s end\nend",
    "type": "function"
  }, {
    "id": 102,
    "text": "if #s ~= 20 then return from_hex(s)\n\telse return s end",
    "type": "statement:if"
  }, {
    "id": 103,
    "text": "function object_sha(data, len, type)\n\tlocal header = type .. ' ' .. len .. '\\0'\n\tlocal res = sha(header .. data)\n\treturn res\nend",
    "type": "function"
  }, {
    "id": 104,
    "text": "local header = type .. ' ' .. len .. '\\0'",
    "type": "statement:localassign"
  }, {
    "id": 105,
    "text": "local res = sha(header .. data)",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "function deflate(data)\n\tlocal c = deflate()\n\treturn c(data, \"finish\")\nend",
    "type": "function"
  }, {
    "id": 107,
    "text": "local c = deflate()",
    "type": "statement:localassign"
  }, {
    "id": 108,
    "text": "function(c)\n\t\treturn string.format('%02x', string.byte(c))\n\tend",
    "type": "function"
  }, {
    "id": 109,
    "text": "function(cc)\n\t\treturn string.char(tonumber(cc, 16))\n\tend",
    "type": "function"
  }, {
    "id": 110,
    "text": "",
    "type": "function container"
  }, {
    "id": 111,
    "text": "lfs",
    "type": "module"
  }, {
    "id": 112,
    "text": "mkdir",
    "type": "global function"
  }, {
    "id": 113,
    "text": "attributes",
    "type": "global function"
  }, {
    "id": 114,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 115,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 116,
    "text": "inflate",
    "type": "global function"
  }, {
    "id": 117,
    "text": "print",
    "type": "global function"
  }, {
    "id": 118,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 119,
    "text": "char",
    "type": "global function"
  }, {
    "id": 120,
    "text": "c",
    "type": "global function"
  }, {
    "id": 121,
    "text": "sha",
    "type": "global function"
  }, {
    "id": 122,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 123,
    "text": "open",
    "type": "global function"
  }, {
    "id": 124,
    "text": "error",
    "type": "global function"
  }, {
    "id": 125,
    "text": "z",
    "type": "global function"
  }, {
    "id": 126,
    "text": "byte",
    "type": "global function"
  }, {
    "id": 127,
    "text": "format",
    "type": "global function"
  }, {
    "id": 128,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 129,
    "text": "select",
    "type": "global function"
  }, {
    "id": 130,
    "text": "module",
    "type": "global function"
  }, {
    "id": 131,
    "text": "type",
    "type": "global function"
  }, {
    "id": 132,
    "text": "require",
    "type": "global function"
  }, {
    "id": 133,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 134,
    "text": "core",
    "type": "module"
  }, {
    "id": 135,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 136,
    "text": "",
    "type": "variable container"
  }, {
    "id": 137,
    "text": "",
    "type": "require container"
  }, {
    "id": 138,
    "text": "",
    "type": "local variable"
  }, {
    "id": 139,
    "text": "",
    "type": "n/a"
  }, {
    "id": 140,
    "text": "",
    "type": "local variable"
  }, {
    "id": 141,
    "text": "",
    "type": "n/a"
  }, {
    "id": 142,
    "text": "",
    "type": "local variable"
  }, {
    "id": 143,
    "text": "",
    "type": "n/a"
  }, {
    "id": 144,
    "text": "",
    "type": "local variable"
  }, {
    "id": 145,
    "text": "",
    "type": "number"
  }, {
    "id": 146,
    "text": "",
    "type": "local variable"
  }, {
    "id": 147,
    "text": "",
    "type": "n/a"
  }, {
    "id": 148,
    "text": "",
    "type": "local variable"
  }, {
    "id": 149,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 150,
    "text": "",
    "type": "global variable"
  }, {
    "id": 151,
    "text": "",
    "type": "n/a"
  }, {
    "id": 152,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 153,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 154,
    "text": "",
    "type": "global variable"
  } ]
}