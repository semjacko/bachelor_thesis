{
  "_filename": "repo.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-git/lua/git/repo.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 14
  }, {
    "from": 10,
    "label": "has",
    "to": 15
  }, {
    "from": 10,
    "label": "has",
    "to": 16
  }, {
    "from": 10,
    "label": "has",
    "to": 17
  }, {
    "from": 5,
    "label": "has",
    "to": 18
  }, {
    "from": 5,
    "label": "has",
    "to": 18
  }, {
    "from": 5,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 7
  }, {
    "from": 20,
    "label": "has",
    "to": 8
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 9
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 20,
    "label": "has",
    "to": 24
  }, {
    "from": 20,
    "label": "has",
    "to": 25
  }, {
    "from": 20,
    "label": "has",
    "to": 26
  }, {
    "from": 20,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 28,
    "label": "has",
    "to": 35
  }, {
    "from": 28,
    "label": "has",
    "to": 18
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 36,
    "label": "has",
    "to": 41
  }, {
    "from": 36,
    "label": "has",
    "to": 42
  }, {
    "from": 36,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 30
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 43,
    "label": "has",
    "to": 46
  }, {
    "from": 43,
    "label": "has",
    "to": 47
  }, {
    "from": 43,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 48,
    "label": "has",
    "to": 53
  }, {
    "from": 48,
    "label": "has",
    "to": 54
  }, {
    "from": 36,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 55
  }, {
    "from": 36,
    "label": "has",
    "to": 18
  }, {
    "from": 36,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 37
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 57,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 60,
    "label": "has",
    "to": 63
  }, {
    "from": 60,
    "label": "has",
    "to": 64
  }, {
    "from": 60,
    "label": "has",
    "to": 65
  }, {
    "from": 60,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 60,
    "label": "has",
    "to": 69
  }, {
    "from": 57,
    "label": "has",
    "to": 35
  }, {
    "from": 57,
    "label": "has",
    "to": 18
  }, {
    "from": 57,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 37
  }, {
    "from": 71,
    "label": "has",
    "to": 35
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 18
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 18
  }, {
    "from": 75,
    "label": "has",
    "to": 7
  }, {
    "from": 75,
    "label": "has",
    "to": 8
  }, {
    "from": 75,
    "label": "has",
    "to": 9
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 18
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 75,
    "label": "has",
    "to": 18
  }, {
    "from": 75,
    "label": "has",
    "to": 18
  }, {
    "from": 75,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 81,
    "label": "has",
    "to": 84
  }, {
    "from": 81,
    "label": "has",
    "to": 85
  }, {
    "from": 81,
    "label": "has",
    "to": 86
  }, {
    "from": 81,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 88,
    "label": "has",
    "to": 35
  }, {
    "from": 81,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 95,
    "label": "has",
    "to": 98
  }, {
    "from": 95,
    "label": "has",
    "to": 99
  }, {
    "from": 95,
    "label": "has",
    "to": 100
  }, {
    "from": 95,
    "label": "has",
    "to": 101
  }, {
    "from": 95,
    "label": "has",
    "to": 102
  }, {
    "from": 95,
    "label": "has",
    "to": 103
  }, {
    "from": 95,
    "label": "has",
    "to": 104
  }, {
    "from": 95,
    "label": "has",
    "to": 105
  }, {
    "from": 95,
    "label": "has",
    "to": 106
  }, {
    "from": 95,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 107,
    "label": "has",
    "to": 109
  }, {
    "from": 107,
    "label": "has",
    "to": 35
  }, {
    "from": 95,
    "label": "has",
    "to": 110
  }, {
    "from": 95,
    "label": "has",
    "to": 111
  }, {
    "from": 95,
    "label": "has",
    "to": 18
  }, {
    "from": 95,
    "label": "has",
    "to": 112
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 113,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 97
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 113,
    "label": "has",
    "to": 110
  }, {
    "from": 113,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 119,
    "label": "has",
    "to": 121
  }, {
    "from": 119,
    "label": "has",
    "to": 122
  }, {
    "from": 119,
    "label": "has",
    "to": 123
  }, {
    "from": 119,
    "label": "has",
    "to": 35
  }, {
    "from": 113,
    "label": "has",
    "to": 111
  }, {
    "from": 113,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 125,
    "label": "has",
    "to": 127
  }, {
    "from": 113,
    "label": "has",
    "to": 128
  }, {
    "from": 113,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 129,
    "label": "has",
    "to": 131
  }, {
    "from": 129,
    "label": "has",
    "to": 132
  }, {
    "from": 129,
    "label": "has",
    "to": 133
  }, {
    "from": 113,
    "label": "has",
    "to": 18
  }, {
    "from": 113,
    "label": "has",
    "to": 134
  }, {
    "from": 36,
    "label": "calls",
    "to": 153
  }, {
    "from": 57,
    "label": "calls",
    "to": 153
  }, {
    "from": 71,
    "label": "calls",
    "to": 153
  }, {
    "from": 20,
    "label": "calls",
    "to": 141
  }, {
    "from": 36,
    "label": "calls",
    "to": 141
  }, {
    "from": 36,
    "label": "calls",
    "to": 141
  }, {
    "from": 57,
    "label": "calls",
    "to": 141
  }, {
    "from": 71,
    "label": "calls",
    "to": 141
  }, {
    "from": 81,
    "label": "calls",
    "to": 141
  }, {
    "from": 81,
    "label": "calls",
    "to": 141
  }, {
    "from": 95,
    "label": "calls",
    "to": 141
  }, {
    "from": 113,
    "label": "calls",
    "to": 141
  }, {
    "from": 5,
    "label": "calls",
    "to": 142
  }, {
    "from": 5,
    "label": "calls",
    "to": 150
  }, {
    "from": 5,
    "label": "calls",
    "to": 139
  }, {
    "from": 75,
    "label": "calls",
    "to": 139
  }, {
    "from": 113,
    "label": "calls",
    "to": 140
  }, {
    "from": 113,
    "label": "calls",
    "to": 138
  }, {
    "from": 113,
    "label": "calls",
    "to": 138
  }, {
    "from": 57,
    "label": "calls",
    "to": 151
  }, {
    "from": 5,
    "label": "calls",
    "to": 149
  }, {
    "from": 75,
    "label": "calls",
    "to": 149
  }, {
    "from": 92,
    "label": "calls",
    "to": 149
  }, {
    "from": 113,
    "label": "calls",
    "to": 149
  }, {
    "from": 20,
    "label": "calls",
    "to": 154
  }, {
    "from": 5,
    "label": "calls",
    "to": 143
  }, {
    "from": 20,
    "label": "calls",
    "to": 143
  }, {
    "from": 20,
    "label": "calls",
    "to": 143
  }, {
    "from": 75,
    "label": "calls",
    "to": 143
  }, {
    "from": 95,
    "label": "calls",
    "to": 143
  }, {
    "from": 113,
    "label": "calls",
    "to": 143
  }, {
    "from": 113,
    "label": "calls",
    "to": 143
  }, {
    "from": 113,
    "label": "calls",
    "to": 143
  }, {
    "from": 113,
    "label": "calls",
    "to": 143
  }, {
    "from": 113,
    "label": "calls",
    "to": 143
  }, {
    "from": 113,
    "label": "calls",
    "to": 143
  }, {
    "from": 113,
    "label": "calls",
    "to": 143
  }, {
    "from": 36,
    "label": "calls",
    "to": 152
  }, {
    "from": 36,
    "label": "calls",
    "to": 152
  }, {
    "from": 113,
    "label": "calls",
    "to": 152
  }, {
    "from": 5,
    "label": "calls",
    "to": 147
  }, {
    "from": 57,
    "label": "calls",
    "to": 147
  }, {
    "from": 36,
    "label": "calls",
    "to": 28
  }, {
    "from": 5,
    "label": "calls",
    "to": 144
  }, {
    "from": 20,
    "label": "calls",
    "to": 144
  }, {
    "from": 36,
    "label": "calls",
    "to": 144
  }, {
    "from": 36,
    "label": "calls",
    "to": 155
  }, {
    "from": 57,
    "label": "calls",
    "to": 155
  }, {
    "from": 71,
    "label": "calls",
    "to": 155
  }, {
    "from": 95,
    "label": "calls",
    "to": 155
  }, {
    "from": 113,
    "label": "calls",
    "to": 155
  }, {
    "from": 135,
    "label": "calls",
    "to": 156
  }, {
    "from": 20,
    "label": "calls",
    "to": 136
  }, {
    "from": 95,
    "label": "calls",
    "to": 136
  }, {
    "from": 95,
    "label": "calls",
    "to": 136
  }, {
    "from": 95,
    "label": "calls",
    "to": 136
  }, {
    "from": 95,
    "label": "calls",
    "to": 136
  }, {
    "from": 95,
    "label": "calls",
    "to": 136
  }, {
    "from": 95,
    "label": "calls",
    "to": 136
  }, {
    "from": 95,
    "label": "calls",
    "to": 136
  }, {
    "from": 95,
    "label": "calls",
    "to": 136
  }, {
    "from": 95,
    "label": "calls",
    "to": 136
  }, {
    "from": 36,
    "label": "calls",
    "to": 146
  }, {
    "from": 135,
    "label": "calls",
    "to": 157
  }, {
    "from": 135,
    "label": "calls",
    "to": 157
  }, {
    "from": 135,
    "label": "calls",
    "to": 157
  }, {
    "from": 135,
    "label": "calls",
    "to": 157
  }, {
    "from": 135,
    "label": "calls",
    "to": 157
  }, {
    "from": 20,
    "label": "calls",
    "to": 145
  }, {
    "from": 20,
    "label": "calls",
    "to": 148
  }, {
    "from": 81,
    "label": "calls",
    "to": 148
  }, {
    "from": 95,
    "label": "calls",
    "to": 148
  }, {
    "from": 113,
    "label": "calls",
    "to": 148
  }, {
    "from": 113,
    "label": "calls",
    "to": 148
  }, {
    "from": 3,
    "label": "contains",
    "to": 135
  }, {
    "from": 135,
    "label": "declares",
    "to": 5
  }, {
    "from": 135,
    "label": "declares",
    "to": 20
  }, {
    "from": 135,
    "label": "declares",
    "to": 28
  }, {
    "from": 135,
    "label": "declares",
    "to": 36
  }, {
    "from": 135,
    "label": "declares",
    "to": 57
  }, {
    "from": 135,
    "label": "declares",
    "to": 71
  }, {
    "from": 135,
    "label": "declares",
    "to": 74
  }, {
    "from": 135,
    "label": "declares",
    "to": 75
  }, {
    "from": 135,
    "label": "declares",
    "to": 81
  }, {
    "from": 135,
    "label": "declares",
    "to": 92
  }, {
    "from": 135,
    "label": "declares",
    "to": 95
  }, {
    "from": 135,
    "label": "declares",
    "to": 113
  }, {
    "from": 3,
    "label": "contains",
    "to": 159
  }, {
    "from": 3,
    "label": "contains",
    "to": 160
  }, {
    "from": 159,
    "label": "initializes",
    "to": 161
  }, {
    "from": 161,
    "label": "assigns",
    "to": 162
  }, {
    "from": 159,
    "label": "initializes",
    "to": 163
  }, {
    "from": 163,
    "label": "assigns",
    "to": 164
  }, {
    "from": 159,
    "label": "initializes",
    "to": 165
  }, {
    "from": 165,
    "label": "assigns",
    "to": 166
  }, {
    "from": 159,
    "label": "initializes",
    "to": 167
  }, {
    "from": 167,
    "label": "assigns",
    "to": 168
  }, {
    "from": 159,
    "label": "initializes",
    "to": 169
  }, {
    "from": 169,
    "label": "assigns",
    "to": 170
  }, {
    "from": 159,
    "label": "initializes",
    "to": 171
  }, {
    "from": 171,
    "label": "assigns",
    "to": 172
  }, {
    "from": 159,
    "label": "initializes",
    "to": 173
  }, {
    "from": 173,
    "label": "assigns",
    "to": 174
  }, {
    "from": 159,
    "label": "initializes",
    "to": 175
  }, {
    "from": 175,
    "label": "assigns",
    "to": 176
  }, {
    "from": 159,
    "label": "initializes",
    "to": 177
  }, {
    "from": 177,
    "label": "assigns",
    "to": 178
  }, {
    "from": 159,
    "label": "initializes",
    "to": 179
  }, {
    "from": 179,
    "label": "assigns",
    "to": 180
  }, {
    "from": 159,
    "label": "initializes",
    "to": 181
  }, {
    "from": 181,
    "label": "assigns",
    "to": 182
  }, {
    "from": 159,
    "label": "initializes",
    "to": 183
  }, {
    "from": 183,
    "label": "assigns",
    "to": 184
  }, {
    "from": 159,
    "label": "initializes",
    "to": 185
  }, {
    "from": 185,
    "label": "assigns",
    "to": 186
  }, {
    "from": 159,
    "label": "initializes",
    "to": 187
  }, {
    "from": 187,
    "label": "assigns",
    "to": 188
  }, {
    "from": 159,
    "label": "initializes",
    "to": 189
  }, {
    "from": 189,
    "label": "assigns",
    "to": 190
  }, {
    "from": 159,
    "label": "initializes",
    "to": 191
  }, {
    "from": 191,
    "label": "assigns",
    "to": 192
  }, {
    "from": 159,
    "label": "initializes",
    "to": 193
  }, {
    "from": 193,
    "label": "assigns",
    "to": 194
  }, {
    "from": 159,
    "label": "initializes",
    "to": 195
  }, {
    "from": 195,
    "label": "assigns",
    "to": 196
  }, {
    "from": 160,
    "label": "initializes",
    "to": 197
  }, {
    "from": 197,
    "label": "requires",
    "to": 4
  }, {
    "from": 160,
    "label": "initializes",
    "to": 198
  }, {
    "from": 198,
    "label": "requires",
    "to": 1
  }, {
    "from": 160,
    "label": "initializes",
    "to": 199
  }, {
    "from": 199,
    "label": "requires",
    "to": 158
  }, {
    "from": 160,
    "label": "initializes",
    "to": 200
  }, {
    "from": 200,
    "label": "requires",
    "to": 2
  }, {
    "from": 160,
    "label": "initializes",
    "to": 201
  }, {
    "from": 201,
    "label": "requires",
    "to": 137
  }, {
    "from": 3,
    "label": "provides",
    "to": 202
  }, {
    "from": 193,
    "label": "represents",
    "to": 203
  }, {
    "from": 202,
    "label": "provides",
    "to": 203
  }, {
    "from": 204,
    "label": "requires",
    "to": 3
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "objects",
    "type": "module"
  }, {
    "id": 2,
    "text": "pack",
    "type": "module"
  }, {
    "id": 3,
    "text": "repo",
    "type": "module"
  }, {
    "id": 4,
    "text": "util",
    "type": "module"
  }, {
    "id": 5,
    "text": "function Repo:raw_object(sha)\n\t-- first, look in 'objects' directory\n\t-- first byte of sha is the directory, the rest is name of object file\n\tsha = readable_sha(sha)\n\tlocal dir = sha:sub(1,2)\n\tlocal file = sha:sub(3)\n\tlocal path = join_path(self.dir, 'objects', dir, file)\n\n\tif not lfs.attributes(path, 'size') then\n\t\t-- then, try to look in packs\n\t\tfor _, pack in ipairs(self.packs) do\n\t\t\tlocal obj, len, typ = pack:get_object(sha)\n\t\t\tif obj then\n\t\t\t\treturn obj, len, typ\n\t\t\tend\n\t\tend\n\t\terror('Object not found in object neither in packs: '..sha)\n\telse\t\t\n\t\t-- the objects are zlib compressed\n\t\tlocal f = decompressed(path)\n\n\t\t-- retrieve the type and length - <type> SP <len> \\0 <data...>\n\t\tlocal content = read_until_nul(f)\n\t\tlocal typ, len = content:match('(%w+) (%d+)')\n\n\t\treturn f, len, typ\n\tend\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "sha = readable_sha(sha)",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "local dir = sha:sub(1,2)",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "local file = sha:sub(3)",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "local path = join_path(self.dir, 'objects', dir, file)",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "if not lfs.attributes(path, 'size') then\n\t\t-- then, try to look in packs\n\t\tfor _, pack in ipairs(self.packs) do\n\t\t\tlocal obj, len, typ = pack:get_object(sha)\n\t\t\tif obj then\n\t\t\t\treturn obj, len, typ\n\t\t\tend\n\t\tend\n\t\terror('Object not found in object neither in packs: '..sha)\n\telse\t\t\n\t\t-- the objects are zlib compressed\n\t\tlocal f = decompressed(path)\n\n\t\t-- retrieve the type and length - <type> SP <len> \\0 <data...>\n\t\tlocal content = read_until_nul(f)\n\t\tlocal typ, len = content:match('(%w+) (%d+)')\n\n\t\treturn f, len, typ\n\tend",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "for _, pack in ipairs(self.packs) do\n\t\t\tlocal obj, len, typ = pack:get_object(sha)\n\t\t\tif obj then\n\t\t\t\treturn obj, len, typ\n\t\t\tend\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 12,
    "text": "local obj, len, typ = pack:get_object(sha)",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "if obj then\n\t\t\t\treturn obj, len, typ\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "error('Object not found in object neither in packs: '..sha)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "local f = decompressed(path)",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "local content = read_until_nul(f)",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "local typ, len = content:match('(%w+) (%d+)')",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function Repo:store_object(data, len, type)\n\tlocal sha = readable_sha(object_sha(data, len, type))\n\tlocal dir = sha:sub(1,2)\n\tlocal file = sha:sub(3)\n\tutil.make_dir(join_path(self.dir, 'objects', dir))\n\tlocal path = join_path(self.dir, 'objects', dir, file)\n\tlocal fo = assert(io.open(path, 'wb'))\n\tlocal header = type .. ' ' .. len .. '\\0'\n\tlocal compressed = deflate()(header .. data, \"finish\")\n\tfo:write(compressed)\n\tfo:close()\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "local sha = readable_sha(object_sha(data, len, type))",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "util.make_dir(join_path(self.dir, 'objects', dir))",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "local fo = assert(io.open(path, 'wb'))",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "local header = type .. ' ' .. len .. '\\0'",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "local compressed = deflate()(header .. data, \"finish\")",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "fo:write(compressed)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "fo:close()",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "local function resolvetag(f)\n\tlocal tag\n\tlocal line = f:read()\n\twhile line do\n\t\ttag = line:match('^object (%x+)$')\n\t\tif tag then break end\n\t\tline = f:read()\n\tend\n\tf:close()\n\treturn tag\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "local tag",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "local line = f:read()",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "while line do\n\t\ttag = line:match('^object (%x+)$')\n\t\tif tag then break end\n\t\tline = f:read()\n\tend",
    "type": "statement:while"
  }, {
    "id": 32,
    "text": "tag = line:match('^object (%x+)$')",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "if tag then break end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "line = f:read()",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "function Repo:commit(sha)\n\tlocal f, len, typ = self:raw_object(sha)\n\twhile typ == 'tag' do\n\t\tsha = assert(resolvetag(f), 'could not parse tag for '..readable_sha(sha))\n\t\tf, len, typ = self:raw_object(sha)\n\tend\n\tassert(typ == 'commit', string.format('%s (%s) is not a commit', sha, typ))\n\n\tlocal commit = { id = sha, repo = self, stored = true, parents = {} }\n\trepeat\n\t\tlocal line = f:read()\n\t\tif not line then break end\n\n\t\tlocal space = line:find(' ') or 0\n\t\tlocal word = line:sub(1, space - 1)\n\t\tlocal afterSpace = line:sub(space + 1)\n\n\t\tif word == 'tree' then\n\t\t\tcommit.tree_sha = afterSpace\n\t\telseif word == 'parent' then\n\t\t\ttable.insert(commit.parents, afterSpace)\n\t\telseif word == 'author' then\n\t\t\tcommit.author = afterSpace\n\t\telseif word == 'committer' then\n\t\t\tcommit.committer = afterSpace\n\t\telseif commit.message then\n\t\t\ttable.insert(commit.message, line)\n\t\telseif line == '' then\n\t\t\tcommit.message = {}\n\t\tend\n\tuntil false -- ends with break\n\tf:close()\n\n\tcommit.message = table.concat(commit.message, '\\n')\n\n\treturn setmetatable(commit, objects.Commit)\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "local f, len, typ = self:raw_object(sha)",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "while typ == 'tag' do\n\t\tsha = assert(resolvetag(f), 'could not parse tag for '..readable_sha(sha))\n\t\tf, len, typ = self:raw_object(sha)\n\tend",
    "type": "statement:while"
  }, {
    "id": 39,
    "text": "sha = assert(resolvetag(f), 'could not parse tag for '..readable_sha(sha))",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "f, len, typ = self:raw_object(sha)",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "assert(typ == 'commit', string.format('%s (%s) is not a commit', sha, typ))",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "local commit = { id = sha, repo = self, stored = true, parents = {} }",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "repeat\n\t\tlocal line = f:read()\n\t\tif not line then break end\n\n\t\tlocal space = line:find(' ') or 0\n\t\tlocal word = line:sub(1, space - 1)\n\t\tlocal afterSpace = line:sub(space + 1)\n\n\t\tif word == 'tree' then\n\t\t\tcommit.tree_sha = afterSpace\n\t\telseif word == 'parent' then\n\t\t\ttable.insert(commit.parents, afterSpace)\n\t\telseif word == 'author' then\n\t\t\tcommit.author = afterSpace\n\t\telseif word == 'committer' then\n\t\t\tcommit.committer = afterSpace\n\t\telseif commit.message then\n\t\t\ttable.insert(commit.message, line)\n\t\telseif line == '' then\n\t\t\tcommit.message = {}\n\t\tend\n\tuntil false",
    "type": "statement:repeat"
  }, {
    "id": 44,
    "text": "if not line then break end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "local space = line:find(' ') or 0",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "local word = line:sub(1, space - 1)",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "local afterSpace = line:sub(space + 1)",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "if word == 'tree' then\n\t\t\tcommit.tree_sha = afterSpace\n\t\telseif word == 'parent' then\n\t\t\ttable.insert(commit.parents, afterSpace)\n\t\telseif word == 'author' then\n\t\t\tcommit.author = afterSpace\n\t\telseif word == 'committer' then\n\t\t\tcommit.committer = afterSpace\n\t\telseif commit.message then\n\t\t\ttable.insert(commit.message, line)\n\t\telseif line == '' then\n\t\t\tcommit.message = {}\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "commit.tree_sha = afterSpace",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "table.insert(commit.parents, afterSpace)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "commit.author = afterSpace",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "commit.committer = afterSpace",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "table.insert(commit.message, line)",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "commit.message = {}",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "commit.message = table.concat(commit.message, '\\n')",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function Repo:tree(sha)\n\tlocal f, len, typ = self:raw_object(sha)\n\tassert(typ == 'tree', string.format('%s (%s) is not a tree', sha, typ))\n\n\tlocal tree = { id = sha, repo = self, stored = true, _entries = {} }\n\n\twhile true do\n\t\tlocal info = read_until_nul(f)\n\t\tif not info then break end\n\t\tlocal entry_sha = to_hex(f:read(20))\n\t\tlocal mode, name = info:match('^(%d+)%s(.+)$')\n\t\tlocal entry_type = 'blob'\n\t\tif mode == '40000' then\n\t\t\tentry_type = 'tree'\n\t\telseif mode == '160000' then\n\t\t\tentry_type = 'commit'\n\t\tend\n\t\ttree._entries[name] = { mode = mode, id = entry_sha, type = entry_type }\n\tend\n\n\tf:close()\n\n\treturn setmetatable(tree, objects.Tree)\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "assert(typ == 'tree', string.format('%s (%s) is not a tree', sha, typ))",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "local tree = { id = sha, repo = self, stored = true, _entries = {} }",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "while true do\n\t\tlocal info = read_until_nul(f)\n\t\tif not info then break end\n\t\tlocal entry_sha = to_hex(f:read(20))\n\t\tlocal mode, name = info:match('^(%d+)%s(.+)$')\n\t\tlocal entry_type = 'blob'\n\t\tif mode == '40000' then\n\t\t\tentry_type = 'tree'\n\t\telseif mode == '160000' then\n\t\t\tentry_type = 'commit'\n\t\tend\n\t\ttree._entries[name] = { mode = mode, id = entry_sha, type = entry_type }\n\tend",
    "type": "statement:while"
  }, {
    "id": 61,
    "text": "local info = read_until_nul(f)",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "if not info then break end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "local entry_sha = to_hex(f:read(20))",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "local mode, name = info:match('^(%d+)%s(.+)$')",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "local entry_type = 'blob'",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "if mode == '40000' then\n\t\t\tentry_type = 'tree'\n\t\telseif mode == '160000' then\n\t\t\tentry_type = 'commit'\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "entry_type = 'tree'",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "entry_type = 'commit'",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "tree._entries[name] = { mode = mode, id = entry_sha, type = entry_type }",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "function Repo:blob(sha)\n\tlocal f, len, typ = self:raw_object(sha)\n\tf:close() -- can be reopened in Blob:content()\n\n\tassert(typ == 'blob', string.format('%s (%s) is not a blob', sha, typ))\n\treturn setmetatable({ \n\t\tid = sha,\n\t\tlen = len,\n\t\trepo = self,\n\t\tstored = true }, objects.Blob)\nend",
    "type": "function"
  }, {
    "id": 72,
    "text": "assert(typ == 'blob', string.format('%s (%s) is not a blob', sha, typ))",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function Repo:head()\n\treturn self:commit(self.refs.HEAD)\nend",
    "type": "function"
  }, {
    "id": 75,
    "text": "function Repo:has_object(sha)\n\tlocal dir = sha:sub(1,2)\n\tlocal file = sha:sub(3)\n\tlocal path = join_path(self.dir, 'objects', dir, file)\n\n\tif lfs.attributes(path, 'size') then return true end\n\n\tfor _, pack in ipairs(self.packs) do\n\t\tlocal has = pack:has_object(sha)\n\t\tif has then return true end\n\tend\n\n\treturn false\nend",
    "type": "function"
  }, {
    "id": 76,
    "text": "if lfs.attributes(path, 'size') then return true end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "for _, pack in ipairs(self.packs) do\n\t\tlocal has = pack:has_object(sha)\n\t\tif has then return true end\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 78,
    "text": "local has = pack:has_object(sha)",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "if has then return true end",
    "type": "statement:if"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "function Repo:checkout(sha, target)\n\tif not target then target = self.workDir end\n\tassert(target, 'target directory not specified')\n\n\tlocal commit = self:commit(sha)\n\tcommit:checkout(target)\n\n\t-- if the repo was checked out using the deepen command (one level of history only)\n\t-- mark the commit's parent as shalow, that is it has no history\n\tif self.isShallow then\n\t\t-- if it has a parent, mark it shallow\n\t\tif commit.parents[1] then\n\t\t\tlocal f = assert(io.open(self.dir .. '/shallow', \"w\"))\n\t\t\tf:write(commit.parents[1], '\\n')\n\t\t\tf:close()\n\t\tend\n\tend\nend",
    "type": "function"
  }, {
    "id": 82,
    "text": "if not target then target = self.workDir end",
    "type": "statement:if"
  }, {
    "id": 83,
    "text": "target = self.workDir",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "assert(target, 'target directory not specified')",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "local commit = self:commit(sha)",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "commit:checkout(target)",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "if self.isShallow then\n\t\t-- if it has a parent, mark it shallow\n\t\tif commit.parents[1] then\n\t\t\tlocal f = assert(io.open(self.dir .. '/shallow', \"w\"))\n\t\t\tf:write(commit.parents[1], '\\n')\n\t\t\tf:close()\n\t\tend\n\tend",
    "type": "statement:if"
  }, {
    "id": 88,
    "text": "if commit.parents[1] then\n\t\t\tlocal f = assert(io.open(self.dir .. '/shallow', \"w\"))\n\t\t\tf:write(commit.parents[1], '\\n')\n\t\t\tf:close()\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 89,
    "text": "local f = assert(io.open(self.dir .. '/shallow', \"w\"))",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "f:write(commit.parents[1], '\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "function Repo:close()\n\tfor _, pack in ipairs(self.packs) do\n\t\tpack:close()\n\tend\nend",
    "type": "function"
  }, {
    "id": 93,
    "text": "for _, pack in ipairs(self.packs) do\n\t\tpack:close()\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 94,
    "text": "pack:close()",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "function create(dir)\n\tif not dir:match('%.git.?$') then\n\t\tdir = join_path(dir, '.git')\n\tend\n\t\n\tutil.make_dir(dir)\n\tutil.make_dir(dir .. '/branches')\n\tutil.make_dir(dir .. '/hooks')\n\tutil.make_dir(dir .. '/info')\t\n\tutil.make_dir(dir .. '/objects/info')\n\tutil.make_dir(dir .. '/objects/pack')\n\tutil.make_dir(dir .. '/refs/heads')\n\tutil.make_dir(dir .. '/refs/tags')\n\tutil.make_dir(dir .. '/refs/remotes')\n\n\tdo\n\t\tlocal f = assert(io.open(dir .. \"/HEAD\", \"w\"))\n\t\tf:write(\"ref: refs/heads/master\\n\")\n\t\tf:close()\n\tend\n\n\tlocal refs = {}\n\tlocal packs = {}\n\n\treturn setmetatable({\n\t\tdir = dir,\n\t\trefs = refs,\n\t\tpacks = packs,\n\t}, Repo)\nend",
    "type": "function"
  }, {
    "id": 96,
    "text": "if not dir:match('%.git.?$') then\n\t\tdir = join_path(dir, '.git')\n\tend",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "dir = join_path(dir, '.git')",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "util.make_dir(dir)",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "util.make_dir(dir .. '/branches')",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "util.make_dir(dir .. '/hooks')",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "util.make_dir(dir .. '/info')",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "util.make_dir(dir .. '/objects/info')",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "util.make_dir(dir .. '/objects/pack')",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "util.make_dir(dir .. '/refs/heads')",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "util.make_dir(dir .. '/refs/tags')",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "util.make_dir(dir .. '/refs/remotes')",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "do\n\t\tlocal f = assert(io.open(dir .. \"/HEAD\", \"w\"))\n\t\tf:write(\"ref: refs/heads/master\\n\")\n\t\tf:close()\n\tend",
    "type": "statement:do"
  }, {
    "id": 108,
    "text": "local f = assert(io.open(dir .. \"/HEAD\", \"w\"))",
    "type": "statement:localassign"
  }, {
    "id": 109,
    "text": "f:write(\"ref: refs/heads/master\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "local refs = {}",
    "type": "statement:localassign"
  }, {
    "id": 111,
    "text": "local packs = {}",
    "type": "statement:localassign"
  }, {
    "id": 112,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 113,
    "text": "function open(dir)\n\tlocal workDir = dir\n\tif not dir:match('%.git.?$') then\n\t\tdir = join_path(dir, '.git')\n\telse\n\t\tworkDir = nil -- no working directory, working directly with repo\n\tend\n\n\tlocal refs = {}\n\tfor _,d in ipairs{'refs/heads', 'refs/tags'} do\n\t\tfor fn in lfs.dir(join_path(dir, d)) do\n\t\t\tif fn ~= '.' and fn ~= '..' then\n\t\t\t\tlocal path = join_path(dir, d, fn)\n\t\t\t\tlocal f = assert(io.open(path), 'rb')\n\t\t\t\tlocal ref = f:read()\n\t\t\t\trefs[join_path(d, fn)] = ref\n\t\t\t\tf:close()\n\t\t\tend\n\t\tend\n\tend\n\n\tlocal packs = {}\n\tfor fn in lfs.dir(join_path(dir, 'objects/pack')) do\n\t\tif fn:match('%.pack$') then\n\t\t\tlocal path = join_path(dir, 'objects/pack', fn)\n\t\t\ttable.insert(packs, pack.open(path))\n\t\tend\n\tend\n\n\tlocal head = io.open(join_path(dir, 'HEAD'), 'rb')\n\tif head then\n\t\tlocal src = head:read()\n\t\tlocal HEAD = src:match('ref: (.-)$')\n\t\trefs.HEAD = refs[HEAD]\n\t\thead:close()\n\tend\n\n\treturn setmetatable({\n\t\tdir = dir,\n\t\tworkDir = workDir,\n\t\trefs = refs,\n\t\tpacks = packs,\n\t}, Repo)\nend",
    "type": "function"
  }, {
    "id": 114,
    "text": "local workDir = dir",
    "type": "statement:localassign"
  }, {
    "id": 115,
    "text": "if not dir:match('%.git.?$') then\n\t\tdir = join_path(dir, '.git')\n\telse\n\t\tworkDir = nil -- no working directory, working directly with repo\n\tend",
    "type": "statement:if"
  }, {
    "id": 116,
    "text": "workDir = nil",
    "type": "statement:assign"
  }, {
    "id": 117,
    "text": "for _,d in ipairs{'refs/heads', 'refs/tags'} do\n\t\tfor fn in lfs.dir(join_path(dir, d)) do\n\t\t\tif fn ~= '.' and fn ~= '..' then\n\t\t\t\tlocal path = join_path(dir, d, fn)\n\t\t\t\tlocal f = assert(io.open(path), 'rb')\n\t\t\t\tlocal ref = f:read()\n\t\t\t\trefs[join_path(d, fn)] = ref\n\t\t\t\tf:close()\n\t\t\tend\n\t\tend\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 118,
    "text": "for fn in lfs.dir(join_path(dir, d)) do\n\t\t\tif fn ~= '.' and fn ~= '..' then\n\t\t\t\tlocal path = join_path(dir, d, fn)\n\t\t\t\tlocal f = assert(io.open(path), 'rb')\n\t\t\t\tlocal ref = f:read()\n\t\t\t\trefs[join_path(d, fn)] = ref\n\t\t\t\tf:close()\n\t\t\tend\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 119,
    "text": "if fn ~= '.' and fn ~= '..' then\n\t\t\t\tlocal path = join_path(dir, d, fn)\n\t\t\t\tlocal f = assert(io.open(path), 'rb')\n\t\t\t\tlocal ref = f:read()\n\t\t\t\trefs[join_path(d, fn)] = ref\n\t\t\t\tf:close()\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 120,
    "text": "local path = join_path(dir, d, fn)",
    "type": "statement:localassign"
  }, {
    "id": 121,
    "text": "local f = assert(io.open(path), 'rb')",
    "type": "statement:localassign"
  }, {
    "id": 122,
    "text": "local ref = f:read()",
    "type": "statement:localassign"
  }, {
    "id": 123,
    "text": "refs[join_path(d, fn)] = ref",
    "type": "statement:assign"
  }, {
    "id": 124,
    "text": "for fn in lfs.dir(join_path(dir, 'objects/pack')) do\n\t\tif fn:match('%.pack$') then\n\t\t\tlocal path = join_path(dir, 'objects/pack', fn)\n\t\t\ttable.insert(packs, pack.open(path))\n\t\tend\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 125,
    "text": "if fn:match('%.pack$') then\n\t\t\tlocal path = join_path(dir, 'objects/pack', fn)\n\t\t\ttable.insert(packs, pack.open(path))\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 126,
    "text": "local path = join_path(dir, 'objects/pack', fn)",
    "type": "statement:localassign"
  }, {
    "id": 127,
    "text": "table.insert(packs, pack.open(path))",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "local head = io.open(join_path(dir, 'HEAD'), 'rb')",
    "type": "statement:localassign"
  }, {
    "id": 129,
    "text": "if head then\n\t\tlocal src = head:read()\n\t\tlocal HEAD = src:match('ref: (.-)$')\n\t\trefs.HEAD = refs[HEAD]\n\t\thead:close()\n\tend",
    "type": "statement:if"
  }, {
    "id": 130,
    "text": "local src = head:read()",
    "type": "statement:localassign"
  }, {
    "id": 131,
    "text": "local HEAD = src:match('ref: (.-)$')",
    "type": "statement:localassign"
  }, {
    "id": 132,
    "text": "refs.HEAD = refs[HEAD]",
    "type": "statement:assign"
  }, {
    "id": 133,
    "text": "head:close()",
    "type": "statement:functioncall"
  }, {
    "id": 134,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 135,
    "text": "",
    "type": "function container"
  }, {
    "id": 136,
    "text": "function make_dir(path)\n\tif lfs.attributes(path) then\n\t\treturn true\n\telse\n\t\tlocal par_dir = parent_dir(path)\n\t\tif par_dir then\n\t\t\tassert(make_dir(par_dir))\n\t\tend\n\t\treturn lfs.mkdir(path)\n\tend\nend",
    "type": "function"
  }, {
    "id": 137,
    "text": "lfs",
    "type": "module"
  }, {
    "id": 138,
    "text": "dir",
    "type": "global function"
  }, {
    "id": 139,
    "text": "attributes",
    "type": "global function"
  }, {
    "id": 140,
    "text": "open",
    "type": "global function"
  }, {
    "id": 141,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 142,
    "text": "decompressed",
    "type": "global function"
  }, {
    "id": 143,
    "text": "join_path",
    "type": "global function"
  }, {
    "id": 144,
    "text": "readable_sha",
    "type": "global function"
  }, {
    "id": 145,
    "text": "deflate",
    "type": "global function"
  }, {
    "id": 146,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 147,
    "text": "read_until_nul",
    "type": "global function"
  }, {
    "id": 148,
    "text": "open",
    "type": "global function"
  }, {
    "id": 149,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 150,
    "text": "error",
    "type": "global function"
  }, {
    "id": 151,
    "text": "to_hex",
    "type": "global function"
  }, {
    "id": 152,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 153,
    "text": "format",
    "type": "global function"
  }, {
    "id": 154,
    "text": "object_sha",
    "type": "global function"
  }, {
    "id": 155,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 156,
    "text": "module",
    "type": "global function"
  }, {
    "id": 157,
    "text": "require",
    "type": "global function"
  }, {
    "id": 158,
    "text": "core",
    "type": "module"
  }, {
    "id": 159,
    "text": "",
    "type": "variable container"
  }, {
    "id": 160,
    "text": "",
    "type": "require container"
  }, {
    "id": 161,
    "text": "",
    "type": "local variable"
  }, {
    "id": 162,
    "text": "",
    "type": "n/a"
  }, {
    "id": 163,
    "text": "",
    "type": "local variable"
  }, {
    "id": 164,
    "text": "",
    "type": "n/a"
  }, {
    "id": 165,
    "text": "",
    "type": "local variable"
  }, {
    "id": 166,
    "text": "",
    "type": "n/a"
  }, {
    "id": 167,
    "text": "",
    "type": "local variable"
  }, {
    "id": 168,
    "text": "",
    "type": "n/a"
  }, {
    "id": 169,
    "text": "",
    "type": "local variable"
  }, {
    "id": 170,
    "text": "",
    "type": "n/a"
  }, {
    "id": 171,
    "text": "",
    "type": "local variable"
  }, {
    "id": 172,
    "text": "",
    "type": "n/a"
  }, {
    "id": 173,
    "text": "",
    "type": "local variable"
  }, {
    "id": 174,
    "text": "",
    "type": "n/a"
  }, {
    "id": 175,
    "text": "",
    "type": "local variable"
  }, {
    "id": 176,
    "text": "",
    "type": "n/a"
  }, {
    "id": 177,
    "text": "",
    "type": "local variable"
  }, {
    "id": 178,
    "text": "",
    "type": "n/a"
  }, {
    "id": 179,
    "text": "",
    "type": "local variable"
  }, {
    "id": 180,
    "text": "",
    "type": "n/a"
  }, {
    "id": 181,
    "text": "",
    "type": "local variable"
  }, {
    "id": 182,
    "text": "",
    "type": "n/a"
  }, {
    "id": 183,
    "text": "",
    "type": "local variable"
  }, {
    "id": 184,
    "text": "",
    "type": "n/a"
  }, {
    "id": 185,
    "text": "",
    "type": "local variable"
  }, {
    "id": 186,
    "text": "",
    "type": "n/a"
  }, {
    "id": 187,
    "text": "",
    "type": "local variable"
  }, {
    "id": 188,
    "text": "",
    "type": "n/a"
  }, {
    "id": 189,
    "text": "",
    "type": "local variable"
  }, {
    "id": 190,
    "text": "",
    "type": "n/a"
  }, {
    "id": 191,
    "text": "",
    "type": "local variable"
  }, {
    "id": 192,
    "text": "",
    "type": "n/a"
  }, {
    "id": 193,
    "text": "",
    "type": "global variable"
  }, {
    "id": 194,
    "text": "",
    "type": "n/a"
  }, {
    "id": 195,
    "text": "",
    "type": "global variable"
  }, {
    "id": 196,
    "text": "",
    "type": "n/a"
  }, {
    "id": 197,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 198,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 199,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 200,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 201,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 202,
    "text": "",
    "type": "interface container"
  }, {
    "id": 203,
    "text": "",
    "type": "interface"
  }, {
    "id": 204,
    "text": "",
    "type": "global variable"
  } ]
}