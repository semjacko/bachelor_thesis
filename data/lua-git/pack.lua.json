{
  "_filename": "pack.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-git/lua/git/pack.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 7,
    "label": "has",
    "to": 5
  }, {
    "from": 7,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 8
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 13
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 17,
    "label": "has",
    "to": 5
  }, {
    "from": 17,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 23,
    "label": "has",
    "to": 27
  }, {
    "from": 23,
    "label": "has",
    "to": 28
  }, {
    "from": 23,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 23,
    "label": "has",
    "to": 33
  }, {
    "from": 23,
    "label": "has",
    "to": 5
  }, {
    "from": 23,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 5
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 8
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 38,
    "label": "has",
    "to": 5
  }, {
    "from": 38,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 45,
    "label": "has",
    "to": 49
  }, {
    "from": 45,
    "label": "has",
    "to": 50
  }, {
    "from": 45,
    "label": "has",
    "to": 51
  }, {
    "from": 45,
    "label": "has",
    "to": 52
  }, {
    "from": 45,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 55,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 55,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 55,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 55,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 55,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 55,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 55,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 55,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 55,
    "label": "has",
    "to": 74
  }, {
    "from": 55,
    "label": "has",
    "to": 75
  }, {
    "from": 55,
    "label": "has",
    "to": 76
  }, {
    "from": 55,
    "label": "has",
    "to": 77
  }, {
    "from": 55,
    "label": "has",
    "to": 78
  }, {
    "from": 55,
    "label": "has",
    "to": 79
  }, {
    "from": 55,
    "label": "has",
    "to": 76
  }, {
    "from": 55,
    "label": "has",
    "to": 80
  }, {
    "from": 53,
    "label": "has",
    "to": 81
  }, {
    "from": 45,
    "label": "has",
    "to": 82
  }, {
    "from": 45,
    "label": "has",
    "to": 83
  }, {
    "from": 45,
    "label": "has",
    "to": 84
  }, {
    "from": 45,
    "label": "has",
    "to": 5
  }, {
    "from": 45,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 86,
    "label": "has",
    "to": 27
  }, {
    "from": 86,
    "label": "has",
    "to": 90
  }, {
    "from": 86,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 91,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 91,
    "label": "has",
    "to": 96
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 91,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 91,
    "label": "has",
    "to": 100
  }, {
    "from": 86,
    "label": "has",
    "to": 5
  }, {
    "from": 86,
    "label": "has",
    "to": 5
  }, {
    "from": 86,
    "label": "has",
    "to": 5
  }, {
    "from": 86,
    "label": "has",
    "to": 101
  }, {
    "from": 102,
    "label": "has",
    "to": 5
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 104,
    "label": "has",
    "to": 108
  }, {
    "from": 104,
    "label": "has",
    "to": 109
  }, {
    "from": 104,
    "label": "has",
    "to": 5
  }, {
    "from": 104,
    "label": "has",
    "to": 110
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 112,
    "label": "has",
    "to": 108
  }, {
    "from": 112,
    "label": "has",
    "to": 114
  }, {
    "from": 111,
    "label": "has",
    "to": 115
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 116,
    "label": "has",
    "to": 118
  }, {
    "from": 116,
    "label": "has",
    "to": 119
  }, {
    "from": 116,
    "label": "has",
    "to": 120
  }, {
    "from": 116,
    "label": "has",
    "to": 121
  }, {
    "from": 116,
    "label": "has",
    "to": 122
  }, {
    "from": 116,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 123,
    "label": "has",
    "to": 125
  }, {
    "from": 116,
    "label": "has",
    "to": 126
  }, {
    "from": 116,
    "label": "has",
    "to": 127
  }, {
    "from": 116,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 96
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 116,
    "label": "has",
    "to": 130
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 116,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 132,
    "label": "has",
    "to": 134
  }, {
    "from": 116,
    "label": "has",
    "to": 135
  }, {
    "from": 116,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 116,
    "label": "has",
    "to": 138
  }, {
    "from": 116,
    "label": "has",
    "to": 139
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 140,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 113
  }, {
    "from": 142,
    "label": "has",
    "to": 108
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 142,
    "label": "has",
    "to": 144
  }, {
    "from": 140,
    "label": "has",
    "to": 145
  }, {
    "from": 140,
    "label": "has",
    "to": 146
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 147,
    "label": "has",
    "to": 149
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 150,
    "label": "has",
    "to": 152
  }, {
    "from": 150,
    "label": "has",
    "to": 153
  }, {
    "from": 150,
    "label": "has",
    "to": 154
  }, {
    "from": 150,
    "label": "has",
    "to": 121
  }, {
    "from": 150,
    "label": "has",
    "to": 155
  }, {
    "from": 150,
    "label": "has",
    "to": 156
  }, {
    "from": 150,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 157,
    "label": "has",
    "to": 159
  }, {
    "from": 150,
    "label": "has",
    "to": 160
  }, {
    "from": 150,
    "label": "has",
    "to": 161
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 161,
    "label": "has",
    "to": 163
  }, {
    "from": 161,
    "label": "has",
    "to": 164
  }, {
    "from": 150,
    "label": "has",
    "to": 5
  }, {
    "from": 150,
    "label": "has",
    "to": 165
  }, {
    "from": 7,
    "label": "calls",
    "to": 173
  }, {
    "from": 7,
    "label": "calls",
    "to": 173
  }, {
    "from": 17,
    "label": "calls",
    "to": 173
  }, {
    "from": 17,
    "label": "calls",
    "to": 173
  }, {
    "from": 38,
    "label": "calls",
    "to": 173
  }, {
    "from": 45,
    "label": "calls",
    "to": 173
  }, {
    "from": 45,
    "label": "calls",
    "to": 173
  }, {
    "from": 45,
    "label": "calls",
    "to": 173
  }, {
    "from": 45,
    "label": "calls",
    "to": 173
  }, {
    "from": 45,
    "label": "calls",
    "to": 173
  }, {
    "from": 45,
    "label": "calls",
    "to": 173
  }, {
    "from": 45,
    "label": "calls",
    "to": 173
  }, {
    "from": 45,
    "label": "calls",
    "to": 173
  }, {
    "from": 45,
    "label": "calls",
    "to": 168
  }, {
    "from": 45,
    "label": "calls",
    "to": 168
  }, {
    "from": 116,
    "label": "calls",
    "to": 168
  }, {
    "from": 116,
    "label": "calls",
    "to": 168
  }, {
    "from": 150,
    "label": "calls",
    "to": 168
  }, {
    "from": 150,
    "label": "calls",
    "to": 168
  }, {
    "from": 150,
    "label": "calls",
    "to": 168
  }, {
    "from": 116,
    "label": "calls",
    "to": 2
  }, {
    "from": 116,
    "label": "calls",
    "to": 2
  }, {
    "from": 116,
    "label": "calls",
    "to": 2
  }, {
    "from": 150,
    "label": "calls",
    "to": 2
  }, {
    "from": 150,
    "label": "calls",
    "to": 2
  }, {
    "from": 45,
    "label": "calls",
    "to": 38
  }, {
    "from": 45,
    "label": "calls",
    "to": 38
  }, {
    "from": 45,
    "label": "calls",
    "to": 175
  }, {
    "from": 86,
    "label": "calls",
    "to": 175
  }, {
    "from": 45,
    "label": "calls",
    "to": 176
  }, {
    "from": 45,
    "label": "calls",
    "to": 176
  }, {
    "from": 35,
    "label": "calls",
    "to": 23
  }, {
    "from": 86,
    "label": "calls",
    "to": 23
  }, {
    "from": 86,
    "label": "calls",
    "to": 23
  }, {
    "from": 45,
    "label": "calls",
    "to": 177
  }, {
    "from": 104,
    "label": "calls",
    "to": 177
  }, {
    "from": 7,
    "label": "calls",
    "to": 169
  }, {
    "from": 17,
    "label": "calls",
    "to": 169
  }, {
    "from": 38,
    "label": "calls",
    "to": 169
  }, {
    "from": 23,
    "label": "calls",
    "to": 178
  }, {
    "from": 86,
    "label": "calls",
    "to": 17
  }, {
    "from": 150,
    "label": "calls",
    "to": 174
  }, {
    "from": 150,
    "label": "calls",
    "to": 174
  }, {
    "from": 166,
    "label": "calls",
    "to": 184
  }, {
    "from": 86,
    "label": "calls",
    "to": 7
  }, {
    "from": 23,
    "label": "calls",
    "to": 167
  }, {
    "from": 104,
    "label": "calls",
    "to": 171
  }, {
    "from": 104,
    "label": "calls",
    "to": 170
  }, {
    "from": 140,
    "label": "calls",
    "to": 181
  }, {
    "from": 86,
    "label": "calls",
    "to": 172
  }, {
    "from": 102,
    "label": "calls",
    "to": 172
  }, {
    "from": 104,
    "label": "calls",
    "to": 172
  }, {
    "from": 140,
    "label": "calls",
    "to": 172
  }, {
    "from": 23,
    "label": "calls",
    "to": 179
  }, {
    "from": 45,
    "label": "calls",
    "to": 179
  }, {
    "from": 45,
    "label": "calls",
    "to": 179
  }, {
    "from": 150,
    "label": "calls",
    "to": 182
  }, {
    "from": 166,
    "label": "calls",
    "to": 183
  }, {
    "from": 86,
    "label": "calls",
    "to": 35
  }, {
    "from": 7,
    "label": "calls",
    "to": 180
  }, {
    "from": 86,
    "label": "calls",
    "to": 45
  }, {
    "from": 86,
    "label": "calls",
    "to": 45
  }, {
    "from": 23,
    "label": "calls",
    "to": 185
  }, {
    "from": 45,
    "label": "calls",
    "to": 185
  }, {
    "from": 7,
    "label": "calls",
    "to": 186
  }, {
    "from": 7,
    "label": "calls",
    "to": 186
  }, {
    "from": 7,
    "label": "calls",
    "to": 186
  }, {
    "from": 7,
    "label": "calls",
    "to": 186
  }, {
    "from": 17,
    "label": "calls",
    "to": 186
  }, {
    "from": 17,
    "label": "calls",
    "to": 186
  }, {
    "from": 17,
    "label": "calls",
    "to": 186
  }, {
    "from": 38,
    "label": "calls",
    "to": 186
  }, {
    "from": 38,
    "label": "calls",
    "to": 186
  }, {
    "from": 45,
    "label": "calls",
    "to": 186
  }, {
    "from": 45,
    "label": "calls",
    "to": 186
  }, {
    "from": 45,
    "label": "calls",
    "to": 186
  }, {
    "from": 45,
    "label": "calls",
    "to": 186
  }, {
    "from": 45,
    "label": "calls",
    "to": 186
  }, {
    "from": 45,
    "label": "calls",
    "to": 186
  }, {
    "from": 45,
    "label": "calls",
    "to": 186
  }, {
    "from": 45,
    "label": "calls",
    "to": 186
  }, {
    "from": 1,
    "label": "contains",
    "to": 166
  }, {
    "from": 166,
    "label": "declares",
    "to": 2
  }, {
    "from": 166,
    "label": "declares",
    "to": 7
  }, {
    "from": 166,
    "label": "declares",
    "to": 17
  }, {
    "from": 166,
    "label": "declares",
    "to": 23
  }, {
    "from": 166,
    "label": "declares",
    "to": 35
  }, {
    "from": 166,
    "label": "declares",
    "to": 38
  }, {
    "from": 166,
    "label": "declares",
    "to": 45
  }, {
    "from": 166,
    "label": "declares",
    "to": 86
  }, {
    "from": 166,
    "label": "declares",
    "to": 102
  }, {
    "from": 166,
    "label": "declares",
    "to": 104
  }, {
    "from": 166,
    "label": "declares",
    "to": 111
  }, {
    "from": 166,
    "label": "declares",
    "to": 116
  }, {
    "from": 166,
    "label": "declares",
    "to": 140
  }, {
    "from": 166,
    "label": "declares",
    "to": 147
  }, {
    "from": 166,
    "label": "declares",
    "to": 150
  }, {
    "from": 1,
    "label": "contains",
    "to": 187
  }, {
    "from": 1,
    "label": "contains",
    "to": 188
  }, {
    "from": 187,
    "label": "initializes",
    "to": 189
  }, {
    "from": 189,
    "label": "assigns",
    "to": 190
  }, {
    "from": 187,
    "label": "initializes",
    "to": 191
  }, {
    "from": 191,
    "label": "assigns",
    "to": 192
  }, {
    "from": 187,
    "label": "initializes",
    "to": 193
  }, {
    "from": 193,
    "label": "assigns",
    "to": 194
  }, {
    "from": 187,
    "label": "initializes",
    "to": 195
  }, {
    "from": 195,
    "label": "assigns",
    "to": 196
  }, {
    "from": 187,
    "label": "initializes",
    "to": 197
  }, {
    "from": 197,
    "label": "assigns",
    "to": 198
  }, {
    "from": 187,
    "label": "initializes",
    "to": 199
  }, {
    "from": 199,
    "label": "assigns",
    "to": 200
  }, {
    "from": 187,
    "label": "initializes",
    "to": 201
  }, {
    "from": 201,
    "label": "assigns",
    "to": 202
  }, {
    "from": 187,
    "label": "initializes",
    "to": 203
  }, {
    "from": 203,
    "label": "assigns",
    "to": 204
  }, {
    "from": 187,
    "label": "initializes",
    "to": 205
  }, {
    "from": 205,
    "label": "assigns",
    "to": 206
  }, {
    "from": 187,
    "label": "initializes",
    "to": 207
  }, {
    "from": 207,
    "label": "assigns",
    "to": 208
  }, {
    "from": 187,
    "label": "initializes",
    "to": 209
  }, {
    "from": 209,
    "label": "assigns",
    "to": 210
  }, {
    "from": 187,
    "label": "initializes",
    "to": 211
  }, {
    "from": 211,
    "label": "assigns",
    "to": 212
  }, {
    "from": 187,
    "label": "initializes",
    "to": 213
  }, {
    "from": 213,
    "label": "assigns",
    "to": 214
  }, {
    "from": 187,
    "label": "initializes",
    "to": 215
  }, {
    "from": 215,
    "label": "assigns",
    "to": 216
  }, {
    "from": 187,
    "label": "initializes",
    "to": 217
  }, {
    "from": 217,
    "label": "assigns",
    "to": 218
  }, {
    "from": 187,
    "label": "initializes",
    "to": 219
  }, {
    "from": 219,
    "label": "assigns",
    "to": 220
  }, {
    "from": 187,
    "label": "initializes",
    "to": 221
  }, {
    "from": 221,
    "label": "assigns",
    "to": 222
  }, {
    "from": 187,
    "label": "initializes",
    "to": 223
  }, {
    "from": 223,
    "label": "assigns",
    "to": 224
  }, {
    "from": 187,
    "label": "initializes",
    "to": 225
  }, {
    "from": 225,
    "label": "assigns",
    "to": 226
  }, {
    "from": 187,
    "label": "initializes",
    "to": 227
  }, {
    "from": 227,
    "label": "assigns",
    "to": 228
  }, {
    "from": 187,
    "label": "initializes",
    "to": 229
  }, {
    "from": 229,
    "label": "assigns",
    "to": 230
  }, {
    "from": 187,
    "label": "initializes",
    "to": 231
  }, {
    "from": 231,
    "label": "assigns",
    "to": 232
  }, {
    "from": 187,
    "label": "initializes",
    "to": 233
  }, {
    "from": 233,
    "label": "assigns",
    "to": 234
  }, {
    "from": 234,
    "label": "assigns",
    "to": 235
  }, {
    "from": 234,
    "label": "assigns",
    "to": 236
  }, {
    "from": 234,
    "label": "assigns",
    "to": 237
  }, {
    "from": 234,
    "label": "assigns",
    "to": 238
  }, {
    "from": 234,
    "label": "assigns",
    "to": 239
  }, {
    "from": 234,
    "label": "assigns",
    "to": 240
  }, {
    "from": 234,
    "label": "assigns",
    "to": 241
  }, {
    "from": 187,
    "label": "initializes",
    "to": 242
  }, {
    "from": 242,
    "label": "assigns",
    "to": 243
  }, {
    "from": 187,
    "label": "initializes",
    "to": 244
  }, {
    "from": 244,
    "label": "assigns",
    "to": 245
  }, {
    "from": 188,
    "label": "initializes",
    "to": 246
  }, {
    "from": 246,
    "label": "requires",
    "to": 247
  }, {
    "from": 1,
    "label": "provides",
    "to": 248
  }, {
    "from": 242,
    "label": "represents",
    "to": 249
  }, {
    "from": 248,
    "label": "provides",
    "to": 249
  }, {
    "from": 250,
    "label": "requires",
    "to": 247
  }, {
    "from": 251,
    "label": "requires",
    "to": 1
  }, {
    "from": 252,
    "label": "requires",
    "to": 247
  }, {
    "from": 253,
    "label": "requires",
    "to": 1
  }, {
    "from": 242,
    "label": "contains",
    "to": 150
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "pack",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function read_int(f)\r\n\tlocal s = f:read(4)\r\n\tlocal a,b,c,d = s:byte(1,4)\r\n\treturn a*256^3 + b*256^2 + c*256 + d\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local s = f:read(4)",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local a,b,c,d = s:byte(1,4)",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "local function read_object_header(f)\r\n\tlocal b = ord(f:read(1))\r\n\tlocal type = band(rshift(b, 4), 0x7)\r\n\tlocal len = band(b, 0xF)\r\n\tlocal ofs = 0\r\n\twhile band(b, 0x80) ~= 0 do\r\n\t\tb = ord(f:read(1))\r\n\t\tlen = len + lshift(band(b, 0x7F), ofs * 7 + 4)\r\n\t\tofs = ofs + 1\r\n\tend\r\n\treturn len, type\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "local b = ord(f:read(1))",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "local type = band(rshift(b, 4), 0x7)",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "local len = band(b, 0xF)",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "local ofs = 0",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "while band(b, 0x80) ~= 0 do\r\n\t\tb = ord(f:read(1))\r\n\t\tlen = len + lshift(band(b, 0x7F), ofs * 7 + 4)\r\n\t\tofs = ofs + 1\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 13,
    "text": "b = ord(f:read(1))",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "len = len + lshift(band(b, 0x7F), ofs * 7 + 4)",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "ofs = ofs + 1",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "local function read_delta_header(f)\r\n\tlocal b = ord(f:read(1))\r\n\tlocal offset = band(b, 0x7F)\r\n\twhile band(b, 0x80) ~= 0 do\r\n\t\toffset = offset + 1\r\n\t\tb = ord(f:read(1))\r\n\t\toffset = lshift(offset, 7) + band(b, 0x7F)\r\n\tend\r\n\treturn offset\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "local offset = band(b, 0x7F)",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "while band(b, 0x80) ~= 0 do\r\n\t\toffset = offset + 1\r\n\t\tb = ord(f:read(1))\r\n\t\toffset = lshift(offset, 7) + band(b, 0x7F)\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 20,
    "text": "offset = offset + 1",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "offset = lshift(offset, 7) + band(b, 0x7F)",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "local function uncompress_by_len(f, size)\r\n\tlocal z = core.inflate()\r\n\tlocal chunks = {}\r\n\tlocal CHUNK_SIZE = 1024\r\n\tlocal curr_pos = f:seek()\r\n\tlocal inflated, eof, total\r\n\t-- read until end of zlib-compresed stream\r\n\twhile not eof do\r\n\t\tlocal data = f:read(CHUNK_SIZE)\r\n\t\tinflated, eof, total = z(data)\r\n\t\tinsert(chunks, inflated)\r\n\tend\r\n\t-- repair the current position in stream\r\n\tf:seek('set', curr_pos + total)\r\n\treturn concat(chunks)\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "local z = core.inflate()",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "local chunks = {}",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "local CHUNK_SIZE = 1024",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "local curr_pos = f:seek()",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "local inflated, eof, total",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "while not eof do\r\n\t\tlocal data = f:read(CHUNK_SIZE)\r\n\t\tinflated, eof, total = z(data)\r\n\t\tinsert(chunks, inflated)\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 30,
    "text": "local data = f:read(CHUNK_SIZE)",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "inflated, eof, total = z(data)",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "insert(chunks, inflated)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "f:seek('set', curr_pos + total)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "local function unpack_object(f, len, type)\r\n\tlocal data = uncompress_by_len(f, len)\r\n\treturn data, len, type\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "local data = uncompress_by_len(f, len)",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "local function delta_size(f)\r\n\tlocal size = 0\r\n\tlocal i = 0\r\n\trepeat\r\n\t\tlocal b = ord(f:read(1))\r\n\t\tsize = size + lshift(band(b, 0x7F), i)\r\n\t\ti = i + 7\r\n\tuntil band(b, 0x80) == 0\r\n\treturn size\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "local size = 0",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "local i = 0",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "repeat\r\n\t\tlocal b = ord(f:read(1))\r\n\t\tsize = size + lshift(band(b, 0x7F), i)\r\n\t\ti = i + 7\r\n\tuntil band(b, 0x80) == 0",
    "type": "statement:repeat"
  }, {
    "id": 42,
    "text": "size = size + lshift(band(b, 0x7F), i)",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "i = i + 7",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "local function patch_object(base, delta, base_type)\r\n\t-- insert delta codes into temporary file\r\n\tlocal df = reader(delta)\r\n\r\n\t-- retrieve original and result size (for checks)\r\n\tlocal orig_size = delta_size(df)\r\n\tassert(#base == orig_size, fmt('#base(%d) ~= orig_size(%d)', #base, orig_size))\r\n\r\n\tlocal result_size = delta_size(df)\r\n\tlocal size = result_size\r\n\r\n\tlocal result = {}\r\n\r\n\t-- process the delta codes\r\n\tlocal cmd = df:read(1)\r\n\twhile cmd do\r\n\t\tcmd = ord(cmd)\r\n\t\tif cmd == 0 then\r\n\t\t\terror('unexpected delta code 0')\r\n\t\telseif band(cmd, 0x80) ~= 0 then -- copy a selected part of base data\r\n\t\t\tlocal cp_off, cp_size = 0, 0\r\n\t\t\t-- retrieve offset\r\n\t\t\tif band(cmd, 0x01) ~= 0 then cp_off = ord(df:read(1)) end\r\n\t\t\tif band(cmd, 0x02) ~= 0 then cp_off = cp_off + ord(df:read(1))*256 end\r\n\t\t\tif band(cmd, 0x04) ~= 0 then cp_off = cp_off + ord(df:read(1))*256^2 end\r\n\t\t\tif band(cmd, 0x08) ~= 0 then cp_off = cp_off + ord(df:read(1))*256^3 end\r\n\t\t\t-- retrieve size\r\n\t\t\tif band(cmd, 0x10) ~= 0 then cp_size = ord(df:read(1)) end\r\n\t\t\tif band(cmd, 0x20) ~= 0 then cp_size = cp_size + ord(df:read(1))*256 end\r\n\t\t\tif band(cmd, 0x40) ~= 0 then cp_size = cp_size + ord(df:read(1))*256^2 end\r\n\t\t\tif cp_size == 0 then cp_size = 0x10000 end\r\n\t\t\tif cp_off + cp_size > #base or cp_size > size then break end\r\n\t\t\t-- get the data and append it to result\r\n\t\t\tlocal data = base:sub(cp_off + 1, cp_off + cp_size)\r\n\t\t\tinsert(result, data)\r\n\t\t\tsize = size - cp_size\r\n\t\telse -- insert new data\r\n\t\t\tif cmd > size then break end\r\n\t\t\tlocal data = df:read(cmd)\r\n\t\t\tinsert(result, data)\r\n\t\t\tsize = size - cmd\r\n\t\tend\r\n\t\tcmd = df:read(1)\r\n\tend\r\n\r\n\tdf:close()\r\n\r\n\tresult = concat(result)\r\n\tassert(#result == result_size, fmt('#result(%d) ~= result_size(%d)', #result, result_size))\r\n\treturn result, result_size, base_type\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "local df = reader(delta)",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "local orig_size = delta_size(df)",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "assert(#base == orig_size, fmt('#base(%d) ~= orig_size(%d)', #base, orig_size))",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "local result_size = delta_size(df)",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "local size = result_size",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "local result = {}",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "local cmd = df:read(1)",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "while cmd do\r\n\t\tcmd = ord(cmd)\r\n\t\tif cmd == 0 then\r\n\t\t\terror('unexpected delta code 0')\r\n\t\telseif band(cmd, 0x80) ~= 0 then -- copy a selected part of base data\r\n\t\t\tlocal cp_off, cp_size = 0, 0\r\n\t\t\t-- retrieve offset\r\n\t\t\tif band(cmd, 0x01) ~= 0 then cp_off = ord(df:read(1)) end\r\n\t\t\tif band(cmd, 0x02) ~= 0 then cp_off = cp_off + ord(df:read(1))*256 end\r\n\t\t\tif band(cmd, 0x04) ~= 0 then cp_off = cp_off + ord(df:read(1))*256^2 end\r\n\t\t\tif band(cmd, 0x08) ~= 0 then cp_off = cp_off + ord(df:read(1))*256^3 end\r\n\t\t\t-- retrieve size\r\n\t\t\tif band(cmd, 0x10) ~= 0 then cp_size = ord(df:read(1)) end\r\n\t\t\tif band(cmd, 0x20) ~= 0 then cp_size = cp_size + ord(df:read(1))*256 end\r\n\t\t\tif band(cmd, 0x40) ~= 0 then cp_size = cp_size + ord(df:read(1))*256^2 end\r\n\t\t\tif cp_size == 0 then cp_size = 0x10000 end\r\n\t\t\tif cp_off + cp_size > #base or cp_size > size then break end\r\n\t\t\t-- get the data and append it to result\r\n\t\t\tlocal data = base:sub(cp_off + 1, cp_off + cp_size)\r\n\t\t\tinsert(result, data)\r\n\t\t\tsize = size - cp_size\r\n\t\telse -- insert new data\r\n\t\t\tif cmd > size then break end\r\n\t\t\tlocal data = df:read(cmd)\r\n\t\t\tinsert(result, data)\r\n\t\t\tsize = size - cmd\r\n\t\tend\r\n\t\tcmd = df:read(1)\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 54,
    "text": "cmd = ord(cmd)",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "if cmd == 0 then\r\n\t\t\terror('unexpected delta code 0')\r\n\t\telseif band(cmd, 0x80) ~= 0 then -- copy a selected part of base data\r\n\t\t\tlocal cp_off, cp_size = 0, 0\r\n\t\t\t-- retrieve offset\r\n\t\t\tif band(cmd, 0x01) ~= 0 then cp_off = ord(df:read(1)) end\r\n\t\t\tif band(cmd, 0x02) ~= 0 then cp_off = cp_off + ord(df:read(1))*256 end\r\n\t\t\tif band(cmd, 0x04) ~= 0 then cp_off = cp_off + ord(df:read(1))*256^2 end\r\n\t\t\tif band(cmd, 0x08) ~= 0 then cp_off = cp_off + ord(df:read(1))*256^3 end\r\n\t\t\t-- retrieve size\r\n\t\t\tif band(cmd, 0x10) ~= 0 then cp_size = ord(df:read(1)) end\r\n\t\t\tif band(cmd, 0x20) ~= 0 then cp_size = cp_size + ord(df:read(1))*256 end\r\n\t\t\tif band(cmd, 0x40) ~= 0 then cp_size = cp_size + ord(df:read(1))*256^2 end\r\n\t\t\tif cp_size == 0 then cp_size = 0x10000 end\r\n\t\t\tif cp_off + cp_size > #base or cp_size > size then break end\r\n\t\t\t-- get the data and append it to result\r\n\t\t\tlocal data = base:sub(cp_off + 1, cp_off + cp_size)\r\n\t\t\tinsert(result, data)\r\n\t\t\tsize = size - cp_size\r\n\t\telse -- insert new data\r\n\t\t\tif cmd > size then break end\r\n\t\t\tlocal data = df:read(cmd)\r\n\t\t\tinsert(result, data)\r\n\t\t\tsize = size - cmd\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "error('unexpected delta code 0')",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "local cp_off, cp_size = 0, 0",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "if band(cmd, 0x01) ~= 0 then cp_off = ord(df:read(1)) end",
    "type": "statement:if"
  }, {
    "id": 59,
    "text": "cp_off = ord(df:read(1))",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "if band(cmd, 0x02) ~= 0 then cp_off = cp_off + ord(df:read(1))*256 end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "cp_off = cp_off + ord(df:read(1))*256",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "if band(cmd, 0x04) ~= 0 then cp_off = cp_off + ord(df:read(1))*256^2 end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "cp_off = cp_off + ord(df:read(1))*256^2",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "if band(cmd, 0x08) ~= 0 then cp_off = cp_off + ord(df:read(1))*256^3 end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "cp_off = cp_off + ord(df:read(1))*256^3",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "if band(cmd, 0x10) ~= 0 then cp_size = ord(df:read(1)) end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "cp_size = ord(df:read(1))",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "if band(cmd, 0x20) ~= 0 then cp_size = cp_size + ord(df:read(1))*256 end",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "cp_size = cp_size + ord(df:read(1))*256",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "if band(cmd, 0x40) ~= 0 then cp_size = cp_size + ord(df:read(1))*256^2 end",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "cp_size = cp_size + ord(df:read(1))*256^2",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "if cp_size == 0 then cp_size = 0x10000 end",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "cp_size = 0x10000",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "if cp_off + cp_size > #base or cp_size > size then break end",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "local data = base:sub(cp_off + 1, cp_off + cp_size)",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "insert(result, data)",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "size = size - cp_size",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "if cmd > size then break end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "local data = df:read(cmd)",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "size = size - cmd",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "cmd = df:read(1)",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "df:close()",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "result = concat(result)",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "assert(#result == result_size, fmt('#result(%d) ~= result_size(%d)', #result, result_size))",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "function Pack:read_object(offset, ignore_data)\r\n\tlocal f = self.pack_file\r\n\tif offset then\r\n\t\tf:seek('set', offset)\r\n\tend\r\n\tlocal curr_pos = f:seek()\r\n\r\n\tlocal len, type = read_object_header(f)\r\n\tif type < 5 then -- commit, tree, blob, tag\r\n\t\treturn unpack_object(f, len, type)\r\n\telseif type == 6 then -- ofs_delta\r\n\t\tlocal offset = read_delta_header(f)\r\n\t\tlocal delta_data = uncompress_by_len(f, len)\r\n\t\tif not ignore_data then\r\n\t\t\t-- the offset is negative from the current location\r\n\t\t\tlocal base, base_len, base_type = self:read_object(curr_pos - offset)\r\n\t\t\treturn patch_object(base, delta_data, base_type)\r\n\t\tend\r\n\telseif type == 7 then -- ref_delta\r\n\t\tlocal sha = f:read(20)\r\n\t\tlocal delta_data = uncompress_by_len(f, len)\r\n\t\tif not ignore_data then\r\n\t\t\t-- lookup the object in the pack by sha\r\n\t\t\t-- FIXME: maybe lookup in repo/other packs\r\n\t\t\tlocal base_offset = self.index[binary_sha(sha)]\r\n\t\t\tlocal base, base_len, base_type = self:read_object(base_offset)\r\n\t\t\treturn patch_object(base, delta_data, base_type)\r\n\t\tend\r\n\telse\r\n\t\terror('unknown object type: '..type)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 87,
    "text": "local f = self.pack_file",
    "type": "statement:localassign"
  }, {
    "id": 88,
    "text": "if offset then\r\n\t\tf:seek('set', offset)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 89,
    "text": "f:seek('set', offset)",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "local len, type = read_object_header(f)",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "if type < 5 then -- commit, tree, blob, tag\r\n\t\treturn unpack_object(f, len, type)\r\n\telseif type == 6 then -- ofs_delta\r\n\t\tlocal offset = read_delta_header(f)\r\n\t\tlocal delta_data = uncompress_by_len(f, len)\r\n\t\tif not ignore_data then\r\n\t\t\t-- the offset is negative from the current location\r\n\t\t\tlocal base, base_len, base_type = self:read_object(curr_pos - offset)\r\n\t\t\treturn patch_object(base, delta_data, base_type)\r\n\t\tend\r\n\telseif type == 7 then -- ref_delta\r\n\t\tlocal sha = f:read(20)\r\n\t\tlocal delta_data = uncompress_by_len(f, len)\r\n\t\tif not ignore_data then\r\n\t\t\t-- lookup the object in the pack by sha\r\n\t\t\t-- FIXME: maybe lookup in repo/other packs\r\n\t\t\tlocal base_offset = self.index[binary_sha(sha)]\r\n\t\t\tlocal base, base_len, base_type = self:read_object(base_offset)\r\n\t\t\treturn patch_object(base, delta_data, base_type)\r\n\t\tend\r\n\telse\r\n\t\terror('unknown object type: '..type)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "local offset = read_delta_header(f)",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "local delta_data = uncompress_by_len(f, len)",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "if not ignore_data then\r\n\t\t\t-- the offset is negative from the current location\r\n\t\t\tlocal base, base_len, base_type = self:read_object(curr_pos - offset)\r\n\t\t\treturn patch_object(base, delta_data, base_type)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 95,
    "text": "local base, base_len, base_type = self:read_object(curr_pos - offset)",
    "type": "statement:localassign"
  }, {
    "id": 96,
    "text": "local sha = f:read(20)",
    "type": "statement:localassign"
  }, {
    "id": 97,
    "text": "if not ignore_data then\r\n\t\t\t-- lookup the object in the pack by sha\r\n\t\t\t-- FIXME: maybe lookup in repo/other packs\r\n\t\t\tlocal base_offset = self.index[binary_sha(sha)]\r\n\t\t\tlocal base, base_len, base_type = self:read_object(base_offset)\r\n\t\t\treturn patch_object(base, delta_data, base_type)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 98,
    "text": "local base_offset = self.index[binary_sha(sha)]",
    "type": "statement:localassign"
  }, {
    "id": 99,
    "text": "local base, base_len, base_type = self:read_object(base_offset)",
    "type": "statement:localassign"
  }, {
    "id": 100,
    "text": "error('unknown object type: '..type)",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 102,
    "text": "function Pack:has_object(sha)\r\n\treturn self.index[binary_sha(sha)] ~= nil\r\nend",
    "type": "function"
  }, {
    "id": 103,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 104,
    "text": "function Pack:get_object(sha)\r\n\tlocal offset = self.index[binary_sha(sha)]\r\n\tif not offset then\r\n\t\tprint('!!! Failed to find object', readable_sha(sha))\r\n\tend\r\n\r\n\tlocal data, len, type = self:read_object(offset)\r\n\tlocal f = reader(data)\r\n\r\n\treturn f, len, types[type]\r\nend",
    "type": "function"
  }, {
    "id": 105,
    "text": "local offset = self.index[binary_sha(sha)]",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "if not offset then\r\n\t\tprint('!!! Failed to find object', readable_sha(sha))\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 107,
    "text": "print('!!! Failed to find object', readable_sha(sha))",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "local data, len, type = self:read_object(offset)",
    "type": "statement:localassign"
  }, {
    "id": 109,
    "text": "local f = reader(data)",
    "type": "statement:localassign"
  }, {
    "id": 110,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 111,
    "text": "function Pack:unpack(repo)\r\n\tfor i=1, self.nobjects do\r\n\t\tlocal offset = self.offsets[i]\r\n\t\tlocal data, len, type = self:read_object(offset)\r\n\t\trepo:store_object(data, len, types[type])\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 112,
    "text": "for i=1, self.nobjects do\r\n\t\tlocal offset = self.offsets[i]\r\n\t\tlocal data, len, type = self:read_object(offset)\r\n\t\trepo:store_object(data, len, types[type])\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 113,
    "text": "local offset = self.offsets[i]",
    "type": "statement:localassign"
  }, {
    "id": 114,
    "text": "repo:store_object(data, len, types[type])",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 116,
    "text": "function Pack:parse_index(index_file)\r\n\tlocal f = index_file\r\n\r\n\tlocal head = f:read(4)\r\n\tassert(head == '\\255tOc', \"Incorrect header: \" .. head)\r\n\tlocal version = read_int(f)\r\n\tassert(version == 2, \"Incorrect version: \" .. version)\r\n\r\n\t-- first the fanout table (how many objects are in the index, whose\r\n\t-- first byte is below or equal to i)\r\n\tlocal fanout = {}\r\n\tfor i=0, 255 do\r\n\t\tlocal nobjs = read_int(f)\r\n\t\tfanout[i] = nobjs\r\n\tend\r\n\r\n\t-- the last element in fanout is the number of all objects in index\r\n\tlocal count = fanout[255]\r\n\r\n\t-- then come the sorted object names (=sha hash)\r\n\tlocal tmp = {}\r\n\tfor i=1,count do\r\n\t\tlocal sha = f:read(20)\r\n\t\ttmp[i] = { sha = sha }\r\n\tend\r\n\r\n\t-- then the CRCs (assume ok, skip them)\r\n\tfor i=1, count do\r\n\t\tlocal crc = f:read(4)\r\n\tend\r\n\r\n\t-- then come the offsets - read just the 32bit ones, does not handle packs > 2G\r\n\tfor i=1, count do\r\n\t\tlocal offset = read_int(f)\r\n\t\ttmp[i].offset = offset\r\n\tend\r\n\r\n\t-- construct the lookup table\r\n\tlocal lookup = {}\r\n\tfor i=1, count do\r\n\t\tlookup[tmp[i].sha] = tmp[i].offset\r\n\tend\r\n\tself.index = lookup\r\nend",
    "type": "function"
  }, {
    "id": 117,
    "text": "local f = index_file",
    "type": "statement:localassign"
  }, {
    "id": 118,
    "text": "local head = f:read(4)",
    "type": "statement:localassign"
  }, {
    "id": 119,
    "text": "assert(head == '\\255tOc', \"Incorrect header: \" .. head)",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "local version = read_int(f)",
    "type": "statement:localassign"
  }, {
    "id": 121,
    "text": "assert(version == 2, \"Incorrect version: \" .. version)",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "local fanout = {}",
    "type": "statement:localassign"
  }, {
    "id": 123,
    "text": "for i=0, 255 do\r\n\t\tlocal nobjs = read_int(f)\r\n\t\tfanout[i] = nobjs\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 124,
    "text": "local nobjs = read_int(f)",
    "type": "statement:localassign"
  }, {
    "id": 125,
    "text": "fanout[i] = nobjs",
    "type": "statement:assign"
  }, {
    "id": 126,
    "text": "local count = fanout[255]",
    "type": "statement:localassign"
  }, {
    "id": 127,
    "text": "local tmp = {}",
    "type": "statement:localassign"
  }, {
    "id": 128,
    "text": "for i=1,count do\r\n\t\tlocal sha = f:read(20)\r\n\t\ttmp[i] = { sha = sha }\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 129,
    "text": "tmp[i] = { sha = sha }",
    "type": "statement:assign"
  }, {
    "id": 130,
    "text": "for i=1, count do\r\n\t\tlocal crc = f:read(4)\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 131,
    "text": "local crc = f:read(4)",
    "type": "statement:localassign"
  }, {
    "id": 132,
    "text": "for i=1, count do\r\n\t\tlocal offset = read_int(f)\r\n\t\ttmp[i].offset = offset\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 133,
    "text": "local offset = read_int(f)",
    "type": "statement:localassign"
  }, {
    "id": 134,
    "text": "tmp[i].offset = offset",
    "type": "statement:assign"
  }, {
    "id": 135,
    "text": "local lookup = {}",
    "type": "statement:localassign"
  }, {
    "id": 136,
    "text": "for i=1, count do\r\n\t\tlookup[tmp[i].sha] = tmp[i].offset\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 137,
    "text": "lookup[tmp[i].sha] = tmp[i].offset",
    "type": "statement:assign"
  }, {
    "id": 138,
    "text": "self.index = lookup",
    "type": "statement:assign"
  }, {
    "id": 139,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 140,
    "text": "function Pack:construct_index(path)\r\n\tlocal index = {}\r\n\tfor i=1, self.nobjects do\r\n\t\tlocal offset = self.offsets[i]\r\n\t\tlocal data, len, type = self:read_object(offset)\r\n\t\tlocal sha = object_sha(data, len, types[type])\r\n\t\tindex[binary_sha(sha)] = offset\r\n\tend\r\n\tself.index = index\r\nend",
    "type": "function"
  }, {
    "id": 141,
    "text": "local index = {}",
    "type": "statement:localassign"
  }, {
    "id": 142,
    "text": "for i=1, self.nobjects do\r\n\t\tlocal offset = self.offsets[i]\r\n\t\tlocal data, len, type = self:read_object(offset)\r\n\t\tlocal sha = object_sha(data, len, types[type])\r\n\t\tindex[binary_sha(sha)] = offset\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 143,
    "text": "local sha = object_sha(data, len, types[type])",
    "type": "statement:localassign"
  }, {
    "id": 144,
    "text": "index[binary_sha(sha)] = offset",
    "type": "statement:assign"
  }, {
    "id": 145,
    "text": "self.index = index",
    "type": "statement:assign"
  }, {
    "id": 146,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 147,
    "text": "function Pack:close()\r\n\tself.pack_file:close()\r\nend",
    "type": "function"
  }, {
    "id": 148,
    "text": "self.pack_file:close()",
    "type": "statement:functioncall"
  }, {
    "id": 149,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 150,
    "text": "function Pack.open(path)\r\n\tlocal fp = assert(io.open(path, 'rb')) -- stays open\r\n\t\r\n\t-- read the pack header\r\n\tlocal head = fp:read(4)\r\n\tassert(head == 'PACK', \"Incorrect header: \" .. head)\r\n\tlocal version = read_int(fp)\r\n\tassert(version == 2, \"Incorrect version: \" .. version)\r\n\tlocal nobj = read_int(fp)\r\n\r\n\tlocal pack = setmetatable({\r\n\t\toffsets = {},\r\n\t\tnobjects = nobj,\r\n\t\tpack_file = fp,\r\n\t}, Pack)\r\n\t\r\n\t-- fill the offsets by traversing through the pack\r\n\tfor i=1,nobj do\r\n\t\tpack.offsets[i] = fp:seek()\r\n\t\t-- ignore the object data, we only need the offset in the pack\r\n\t\tpack:read_object(nil, true)\r\n\tend\r\n\r\n\t-- read the index\r\n\tlocal fi = io.open((path:gsub('%.pack$', '.idx')), 'rb')\r\n\tif fi then\r\n\t\tpack:parse_index(fi)\r\n\t\tfi:close()\r\n\telse\r\n\t\tpack:construct_index(path)\r\n\tend\r\n\r\n\treturn pack\r\nend",
    "type": "function"
  }, {
    "id": 151,
    "text": "local fp = assert(io.open(path, 'rb'))",
    "type": "statement:localassign"
  }, {
    "id": 152,
    "text": "local head = fp:read(4)",
    "type": "statement:localassign"
  }, {
    "id": 153,
    "text": "assert(head == 'PACK', \"Incorrect header: \" .. head)",
    "type": "statement:functioncall"
  }, {
    "id": 154,
    "text": "local version = read_int(fp)",
    "type": "statement:localassign"
  }, {
    "id": 155,
    "text": "local nobj = read_int(fp)",
    "type": "statement:localassign"
  }, {
    "id": 156,
    "text": "local pack = setmetatable({\r\n\t\toffsets = {},\r\n\t\tnobjects = nobj,\r\n\t\tpack_file = fp,\r\n\t}, Pack)",
    "type": "statement:localassign"
  }, {
    "id": 157,
    "text": "for i=1,nobj do\r\n\t\tpack.offsets[i] = fp:seek()\r\n\t\t-- ignore the object data, we only need the offset in the pack\r\n\t\tpack:read_object(nil, true)\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 158,
    "text": "pack.offsets[i] = fp:seek()",
    "type": "statement:assign"
  }, {
    "id": 159,
    "text": "pack:read_object(nil, true)",
    "type": "statement:functioncall"
  }, {
    "id": 160,
    "text": "local fi = io.open((path:gsub('%.pack$', '.idx')), 'rb')",
    "type": "statement:localassign"
  }, {
    "id": 161,
    "text": "if fi then\r\n\t\tpack:parse_index(fi)\r\n\t\tfi:close()\r\n\telse\r\n\t\tpack:construct_index(path)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 162,
    "text": "pack:parse_index(fi)",
    "type": "statement:functioncall"
  }, {
    "id": 163,
    "text": "fi:close()",
    "type": "statement:functioncall"
  }, {
    "id": 164,
    "text": "pack:construct_index(path)",
    "type": "statement:functioncall"
  }, {
    "id": 165,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 166,
    "text": "",
    "type": "function container"
  }, {
    "id": 167,
    "text": "inflate",
    "type": "global function"
  }, {
    "id": 168,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 169,
    "text": "lshift",
    "type": "global function"
  }, {
    "id": 170,
    "text": "print",
    "type": "global function"
  }, {
    "id": 171,
    "text": "readable_sha",
    "type": "global function"
  }, {
    "id": 172,
    "text": "binary_sha",
    "type": "global function"
  }, {
    "id": 173,
    "text": "ord",
    "type": "global function"
  }, {
    "id": 174,
    "text": "open",
    "type": "global function"
  }, {
    "id": 175,
    "text": "error",
    "type": "global function"
  }, {
    "id": 176,
    "text": "fmt",
    "type": "global function"
  }, {
    "id": 177,
    "text": "reader",
    "type": "global function"
  }, {
    "id": 178,
    "text": "z",
    "type": "global function"
  }, {
    "id": 179,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 180,
    "text": "rshift",
    "type": "global function"
  }, {
    "id": 181,
    "text": "object_sha",
    "type": "global function"
  }, {
    "id": 182,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 183,
    "text": "module",
    "type": "global function"
  }, {
    "id": 184,
    "text": "require",
    "type": "global function"
  }, {
    "id": 185,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 186,
    "text": "band",
    "type": "global function"
  }, {
    "id": 187,
    "text": "",
    "type": "variable container"
  }, {
    "id": 188,
    "text": "",
    "type": "require container"
  }, {
    "id": 189,
    "text": "",
    "type": "local variable"
  }, {
    "id": 190,
    "text": "",
    "type": "n/a"
  }, {
    "id": 191,
    "text": "",
    "type": "local variable"
  }, {
    "id": 192,
    "text": "",
    "type": "n/a"
  }, {
    "id": 193,
    "text": "",
    "type": "local variable"
  }, {
    "id": 194,
    "text": "",
    "type": "n/a"
  }, {
    "id": 195,
    "text": "",
    "type": "local variable"
  }, {
    "id": 196,
    "text": "",
    "type": "n/a"
  }, {
    "id": 197,
    "text": "",
    "type": "local variable"
  }, {
    "id": 198,
    "text": "",
    "type": "n/a"
  }, {
    "id": 199,
    "text": "",
    "type": "local variable"
  }, {
    "id": 200,
    "text": "",
    "type": "n/a"
  }, {
    "id": 201,
    "text": "",
    "type": "local variable"
  }, {
    "id": 202,
    "text": "",
    "type": "n/a"
  }, {
    "id": 203,
    "text": "",
    "type": "local variable"
  }, {
    "id": 204,
    "text": "",
    "type": "n/a"
  }, {
    "id": 205,
    "text": "",
    "type": "local variable"
  }, {
    "id": 206,
    "text": "",
    "type": "n/a"
  }, {
    "id": 207,
    "text": "",
    "type": "local variable"
  }, {
    "id": 208,
    "text": "",
    "type": "n/a"
  }, {
    "id": 209,
    "text": "",
    "type": "local variable"
  }, {
    "id": 210,
    "text": "",
    "type": "n/a"
  }, {
    "id": 211,
    "text": "",
    "type": "local variable"
  }, {
    "id": 212,
    "text": "",
    "type": "n/a"
  }, {
    "id": 213,
    "text": "",
    "type": "local variable"
  }, {
    "id": 214,
    "text": "",
    "type": "n/a"
  }, {
    "id": 215,
    "text": "",
    "type": "local variable"
  }, {
    "id": 216,
    "text": "",
    "type": "n/a"
  }, {
    "id": 217,
    "text": "",
    "type": "local variable"
  }, {
    "id": 218,
    "text": "",
    "type": "n/a"
  }, {
    "id": 219,
    "text": "",
    "type": "local variable"
  }, {
    "id": 220,
    "text": "",
    "type": "n/a"
  }, {
    "id": 221,
    "text": "",
    "type": "local variable"
  }, {
    "id": 222,
    "text": "",
    "type": "n/a"
  }, {
    "id": 223,
    "text": "",
    "type": "local variable"
  }, {
    "id": 224,
    "text": "",
    "type": "n/a"
  }, {
    "id": 225,
    "text": "",
    "type": "local variable"
  }, {
    "id": 226,
    "text": "",
    "type": "n/a"
  }, {
    "id": 227,
    "text": "",
    "type": "local variable"
  }, {
    "id": 228,
    "text": "",
    "type": "n/a"
  }, {
    "id": 229,
    "text": "",
    "type": "local variable"
  }, {
    "id": 230,
    "text": "",
    "type": "n/a"
  }, {
    "id": 231,
    "text": "",
    "type": "local variable"
  }, {
    "id": 232,
    "text": "",
    "type": "n/a"
  }, {
    "id": 233,
    "text": "",
    "type": "local variable"
  }, {
    "id": 234,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 235,
    "text": "",
    "type": "string"
  }, {
    "id": 236,
    "text": "",
    "type": "string"
  }, {
    "id": 237,
    "text": "",
    "type": "string"
  }, {
    "id": 238,
    "text": "",
    "type": "string"
  }, {
    "id": 239,
    "text": "",
    "type": "string"
  }, {
    "id": 240,
    "text": "",
    "type": "string"
  }, {
    "id": 241,
    "text": "",
    "type": "string"
  }, {
    "id": 242,
    "text": "",
    "type": "global variable"
  }, {
    "id": 243,
    "text": "",
    "type": "n/a"
  }, {
    "id": 244,
    "text": "",
    "type": "global variable"
  }, {
    "id": 245,
    "text": "",
    "type": "n/a"
  }, {
    "id": 246,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 247,
    "text": "core",
    "type": "module"
  }, {
    "id": 248,
    "text": "",
    "type": "interface container"
  }, {
    "id": 249,
    "text": "",
    "type": "interface"
  }, {
    "id": 250,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 251,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 252,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 253,
    "text": "",
    "type": "global variable"
  } ]
}