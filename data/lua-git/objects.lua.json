{
  "_filename": "objects.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-git/lua/git/objects.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 4
  }, {
    "from": 8,
    "label": "has",
    "to": 4
  }, {
    "from": 10,
    "label": "has",
    "to": 4
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 10,
    "label": "has",
    "to": 4
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 4
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 20,
    "label": "has",
    "to": 4
  }, {
    "from": 20,
    "label": "has",
    "to": 4
  }, {
    "from": 20,
    "label": "has",
    "to": 4
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 25,
    "label": "has",
    "to": 34
  }, {
    "from": 25,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 41,
    "label": "has",
    "to": 45
  }, {
    "from": 41,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 46,
    "label": "has",
    "to": 49
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 51,
    "label": "has",
    "to": 4
  }, {
    "from": 51,
    "label": "has",
    "to": 4
  }, {
    "from": 51,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 11
  }, {
    "from": 57,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 57,
    "label": "has",
    "to": 4
  }, {
    "from": 58,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 41,
    "label": "has",
    "to": 45
  }, {
    "from": 41,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 46,
    "label": "has",
    "to": 49
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 50
  }, {
    "from": 5,
    "label": "calls",
    "to": 61
  }, {
    "from": 25,
    "label": "calls",
    "to": 61
  }, {
    "from": 38,
    "label": "calls",
    "to": 61
  }, {
    "from": 36,
    "label": "calls",
    "to": 63
  }, {
    "from": 10,
    "label": "calls",
    "to": 67
  }, {
    "from": 38,
    "label": "calls",
    "to": 65
  }, {
    "from": 10,
    "label": "calls",
    "to": 66
  }, {
    "from": 20,
    "label": "calls",
    "to": 66
  }, {
    "from": 38,
    "label": "calls",
    "to": 66
  }, {
    "from": 36,
    "label": "calls",
    "to": 36
  }, {
    "from": 25,
    "label": "calls",
    "to": 36
  }, {
    "from": 38,
    "label": "calls",
    "to": 64
  }, {
    "from": 38,
    "label": "calls",
    "to": 60
  }, {
    "from": 38,
    "label": "calls",
    "to": 60
  }, {
    "from": 38,
    "label": "calls",
    "to": 60
  }, {
    "from": 36,
    "label": "calls",
    "to": 62
  }, {
    "from": 59,
    "label": "calls",
    "to": 70
  }, {
    "from": 25,
    "label": "calls",
    "to": 69
  }, {
    "from": 59,
    "label": "calls",
    "to": 68
  }, {
    "from": 1,
    "label": "contains",
    "to": 59
  }, {
    "from": 59,
    "label": "declares",
    "to": 3
  }, {
    "from": 59,
    "label": "declares",
    "to": 5
  }, {
    "from": 59,
    "label": "declares",
    "to": 8
  }, {
    "from": 59,
    "label": "declares",
    "to": 10
  }, {
    "from": 59,
    "label": "declares",
    "to": 20
  }, {
    "from": 59,
    "label": "declares",
    "to": 25
  }, {
    "from": 59,
    "label": "declares",
    "to": 36
  }, {
    "from": 59,
    "label": "declares",
    "to": 38
  }, {
    "from": 59,
    "label": "declares",
    "to": 51
  }, {
    "from": 59,
    "label": "declares",
    "to": 57
  }, {
    "from": 59,
    "label": "declares",
    "to": 58
  }, {
    "from": 1,
    "label": "contains",
    "to": 71
  }, {
    "from": 1,
    "label": "contains",
    "to": 72
  }, {
    "from": 71,
    "label": "initializes",
    "to": 73
  }, {
    "from": 73,
    "label": "assigns",
    "to": 74
  }, {
    "from": 71,
    "label": "initializes",
    "to": 75
  }, {
    "from": 75,
    "label": "assigns",
    "to": 76
  }, {
    "from": 71,
    "label": "initializes",
    "to": 77
  }, {
    "from": 77,
    "label": "assigns",
    "to": 78
  }, {
    "from": 71,
    "label": "initializes",
    "to": 79
  }, {
    "from": 79,
    "label": "assigns",
    "to": 80
  }, {
    "from": 71,
    "label": "initializes",
    "to": 81
  }, {
    "from": 81,
    "label": "assigns",
    "to": 82
  }, {
    "from": 71,
    "label": "initializes",
    "to": 83
  }, {
    "from": 83,
    "label": "assigns",
    "to": 84
  }, {
    "from": 71,
    "label": "initializes",
    "to": 85
  }, {
    "from": 85,
    "label": "assigns",
    "to": 86
  }, {
    "from": 71,
    "label": "initializes",
    "to": 87
  }, {
    "from": 87,
    "label": "assigns",
    "to": 88
  }, {
    "from": 71,
    "label": "initializes",
    "to": 89
  }, {
    "from": 89,
    "label": "assigns",
    "to": 90
  }, {
    "from": 71,
    "label": "initializes",
    "to": 91
  }, {
    "from": 91,
    "label": "assigns",
    "to": 92
  }, {
    "from": 71,
    "label": "initializes",
    "to": 93
  }, {
    "from": 93,
    "label": "assigns",
    "to": 94
  }, {
    "from": 71,
    "label": "initializes",
    "to": 95
  }, {
    "from": 95,
    "label": "assigns",
    "to": 96
  }, {
    "from": 71,
    "label": "initializes",
    "to": 97
  }, {
    "from": 97,
    "label": "assigns",
    "to": 98
  }, {
    "from": 71,
    "label": "initializes",
    "to": 99
  }, {
    "from": 99,
    "label": "assigns",
    "to": 100
  }, {
    "from": 71,
    "label": "initializes",
    "to": 101
  }, {
    "from": 101,
    "label": "assigns",
    "to": 102
  }, {
    "from": 71,
    "label": "initializes",
    "to": 103
  }, {
    "from": 103,
    "label": "assigns",
    "to": 104
  }, {
    "from": 71,
    "label": "initializes",
    "to": 105
  }, {
    "from": 105,
    "label": "assigns",
    "to": 106
  }, {
    "from": 71,
    "label": "initializes",
    "to": 107
  }, {
    "from": 107,
    "label": "assigns",
    "to": 108
  }, {
    "from": 72,
    "label": "initializes",
    "to": 109
  }, {
    "from": 109,
    "label": "requires",
    "to": 2
  }, {
    "from": 110,
    "label": "requires",
    "to": 1
  }, {
    "from": 111,
    "label": "requires",
    "to": 1
  }, {
    "from": 101,
    "label": "contains",
    "to": 8
  }, {
    "from": 40,
    "label": "hasArgument",
    "to": 58
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "objects",
    "type": "module"
  }, {
    "id": 2,
    "text": "util",
    "type": "module"
  }, {
    "id": 3,
    "text": "function Commit:tree()\n\treturn self.repo:tree(self.tree_sha)\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "function Commit:checkout(path)\n\tassert(path, 'path argument missing')\n\tself:tree():checkoutTo(path)\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "assert(path, 'path argument missing')",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "self:tree():checkoutTo(path)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "function (t,k)\n\tif Tree[k] then return Tree[k] end\n\treturn t:entry(k)\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "if Tree[k] then return Tree[k] end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "function Tree:entries()\n\treturn function(t, n)\n\t\tlocal n, entry = next(t, n)\n\t\tif entry then\n\t\t\tlocal object\n\t\t\tif entry.type == 'tree' then\n\t\t\t\tobject = self.repo:tree(entry.id)\n\t\t\telseif entry.type == 'blob' then\n\t\t\t\tobject = self.repo:blob(entry.id)\n\t\t\t\tobject.mode = entry.mode\n\t\t\telseif entry.type == 'commit' then\n\t\t\t\t-- this is possibly a commit in a submodule, \n\t\t\t\t-- do not retrieve it from current repo\n\t\t\t\tobject = entry\n\t\t\telse\n\t\t\t\terror('Unknown entry type: ' .. entry.type)\n\t\t\tend\n\t\t\treturn n, entry.type, object\n\t\tend\n\tend, self._entries\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "local n, entry = next(t, n)",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "if entry then\n\t\t\tlocal object\n\t\t\tif entry.type == 'tree' then\n\t\t\t\tobject = self.repo:tree(entry.id)\n\t\t\telseif entry.type == 'blob' then\n\t\t\t\tobject = self.repo:blob(entry.id)\n\t\t\t\tobject.mode = entry.mode\n\t\t\telseif entry.type == 'commit' then\n\t\t\t\t-- this is possibly a commit in a submodule, \n\t\t\t\t-- do not retrieve it from current repo\n\t\t\t\tobject = entry\n\t\t\telse\n\t\t\t\terror('Unknown entry type: ' .. entry.type)\n\t\t\tend\n\t\t\treturn n, entry.type, object\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "local object",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "if entry.type == 'tree' then\n\t\t\t\tobject = self.repo:tree(entry.id)\n\t\t\telseif entry.type == 'blob' then\n\t\t\t\tobject = self.repo:blob(entry.id)\n\t\t\t\tobject.mode = entry.mode\n\t\t\telseif entry.type == 'commit' then\n\t\t\t\t-- this is possibly a commit in a submodule, \n\t\t\t\t-- do not retrieve it from current repo\n\t\t\t\tobject = entry\n\t\t\telse\n\t\t\t\terror('Unknown entry type: ' .. entry.type)\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "object = self.repo:tree(entry.id)",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "object = self.repo:blob(entry.id)",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "object.mode = entry.mode",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "object = entry",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "error('Unknown entry type: ' .. entry.type)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "function Tree:entry(n)\n\tlocal e = self._entries[n]\n\tif not e then return end\n\tif e.type == 'tree' then\n\t\treturn self.repo:tree(e.id)\n\telseif e.type == 'commit' then\n\t\treturn self.repo:commit(e.id)\n\telseif e.type == 'blob' then\n\t\treturn self.repo:blob(e.id)\n\telse\n\t\terror('Unknown entry type: ' .. e.type)\n\tend\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "local e = self._entries[n]",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "if not e then return end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "if e.type == 'tree' then\n\t\treturn self.repo:tree(e.id)\n\telseif e.type == 'commit' then\n\t\treturn self.repo:commit(e.id)\n\telseif e.type == 'blob' then\n\t\treturn self.repo:blob(e.id)\n\telse\n\t\terror('Unknown entry type: ' .. e.type)\n\tend",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "error('Unknown entry type: ' .. e.type)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "function Tree:walk(func, path)\n\tpath = path or '.'\n\tassert(type(func) == \"function\", \"argument is not a function\")\n\tlocal function walk(tree, path)\n\t\tfor name, type, entry in tree:entries() do\n\t\t\tlocal entry_path = join_path(path, name)\n\t\t\tfunc(entry, entry_path, type)\n\n\t\t\tif type == \"tree\" then\n\t\t\t\twalk(entry, entry_path)\n\t\t\tend\n\t\tend\n\tend\n\twalk(self, path)\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "path = path or '.'",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "assert(type(func) == \"function\", \"argument is not a function\")",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "local function walk(tree, path)\n\t\tfor name, type, entry in tree:entries() do\n\t\t\tlocal entry_path = join_path(path, name)\n\t\t\tfunc(entry, entry_path, type)\n\n\t\t\tif type == \"tree\" then\n\t\t\t\twalk(entry, entry_path)\n\t\t\tend\n\t\tend\n\tend",
    "type": "statement:localfunction"
  }, {
    "id": 29,
    "text": "for name, type, entry in tree:entries() do\n\t\t\tlocal entry_path = join_path(path, name)\n\t\t\tfunc(entry, entry_path, type)\n\n\t\t\tif type == \"tree\" then\n\t\t\t\twalk(entry, entry_path)\n\t\t\tend\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 30,
    "text": "local entry_path = join_path(path, name)",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "func(entry, entry_path, type)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "if type == \"tree\" then\n\t\t\t\twalk(entry, entry_path)\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "walk(entry, entry_path)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "walk(self, path)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "local function walk(tree, path)\n\t\tfor name, type, entry in tree:entries() do\n\t\t\tlocal entry_path = join_path(path, name)\n\t\t\tfunc(entry, entry_path, type)\n\n\t\t\tif type == \"tree\" then\n\t\t\t\twalk(entry, entry_path)\n\t\t\tend\n\t\tend\n\tend",
    "type": "function"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function Tree:checkoutTo(path)\n\tutil.make_dir(path)\n\tself:walk(function (entry, entry_path, type)\n\t\tif type == 'tree' then\n\t\t\tutil.make_dir(entry_path)\n\t\telseif type == 'blob' then\n\t\t\tlocal out = assert(io.open(entry_path, 'wb'))\n\t\t\tout:write(entry:content())\n\t\t\tout:close()\n\t\t\tif isPosix then\n\t\t\t\tlocal mode = entry.mode:sub(-3,-1) -- fixme: is this ok?\n\t\t\t\tlocal cmd = 'chmod '..mode..' \"'..entry_path..'\"'\n\t\t\t\tos.execute(cmd)\n\t\t\tend\n\t\telseif type == 'commit' then\n\t\t\t-- this is a submodule referencing a commit,\n\t\t\t-- make a directory for it\n\t\t\tutil.make_dir(entry_path)\n\t\telse\n\t\t\terror('Unknown entry type: ', type)\n\t\tend\n\tend, path)\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "util.make_dir(path)",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "self:walk(function (entry, entry_path, type)\n\t\tif type == 'tree' then\n\t\t\tutil.make_dir(entry_path)\n\t\telseif type == 'blob' then\n\t\t\tlocal out = assert(io.open(entry_path, 'wb'))\n\t\t\tout:write(entry:content())\n\t\t\tout:close()\n\t\t\tif isPosix then\n\t\t\t\tlocal mode = entry.mode:sub(-3,-1) -- fixme: is this ok?\n\t\t\t\tlocal cmd = 'chmod '..mode..' \"'..entry_path..'\"'\n\t\t\t\tos.execute(cmd)\n\t\t\tend\n\t\telseif type == 'commit' then\n\t\t\t-- this is a submodule referencing a commit,\n\t\t\t-- make a directory for it\n\t\t\tutil.make_dir(entry_path)\n\t\telse\n\t\t\terror('Unknown entry type: ', type)\n\t\tend\n\tend, path)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "if type == 'tree' then\n\t\t\tutil.make_dir(entry_path)\n\t\telseif type == 'blob' then\n\t\t\tlocal out = assert(io.open(entry_path, 'wb'))\n\t\t\tout:write(entry:content())\n\t\t\tout:close()\n\t\t\tif isPosix then\n\t\t\t\tlocal mode = entry.mode:sub(-3,-1) -- fixme: is this ok?\n\t\t\t\tlocal cmd = 'chmod '..mode..' \"'..entry_path..'\"'\n\t\t\t\tos.execute(cmd)\n\t\t\tend\n\t\telseif type == 'commit' then\n\t\t\t-- this is a submodule referencing a commit,\n\t\t\t-- make a directory for it\n\t\t\tutil.make_dir(entry_path)\n\t\telse\n\t\t\terror('Unknown entry type: ', type)\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "util.make_dir(entry_path)",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "local out = assert(io.open(entry_path, 'wb'))",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "out:write(entry:content())",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "out:close()",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "if isPosix then\n\t\t\t\tlocal mode = entry.mode:sub(-3,-1) -- fixme: is this ok?\n\t\t\t\tlocal cmd = 'chmod '..mode..' \"'..entry_path..'\"'\n\t\t\t\tos.execute(cmd)\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "local mode = entry.mode:sub(-3,-1)",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "local cmd = 'chmod '..mode..' \"'..entry_path..'\"'",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "os.execute(cmd)",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "error('Unknown entry type: ', type)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "function Blob:content()\n\tif self.stored then\n\t\tlocal f = self.repo:raw_object(self.id)\n\t\tlocal ret = f:read('*a') or \"\"\r\n\t\tf:close()\n\t\treturn ret\n\telse\n\t\treturn self.data\n\tend\nend",
    "type": "function"
  }, {
    "id": 52,
    "text": "if self.stored then\n\t\tlocal f = self.repo:raw_object(self.id)\n\t\tlocal ret = f:read('*a') or \"\"\r\n\t\tf:close()\n\t\treturn ret\n\telse\n\t\treturn self.data\n\tend",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "local f = self.repo:raw_object(self.id)",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "local ret = f:read('*a') or \"\"",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function(t, n)\n\t\tlocal n, entry = next(t, n)\n\t\tif entry then\n\t\t\tlocal object\n\t\t\tif entry.type == 'tree' then\n\t\t\t\tobject = self.repo:tree(entry.id)\n\t\t\telseif entry.type == 'blob' then\n\t\t\t\tobject = self.repo:blob(entry.id)\n\t\t\t\tobject.mode = entry.mode\n\t\t\telseif entry.type == 'commit' then\n\t\t\t\t-- this is possibly a commit in a submodule, \n\t\t\t\t-- do not retrieve it from current repo\n\t\t\t\tobject = entry\n\t\t\telse\n\t\t\t\terror('Unknown entry type: ' .. entry.type)\n\t\t\tend\n\t\t\treturn n, entry.type, object\n\t\tend\n\tend",
    "type": "function"
  }, {
    "id": 58,
    "text": "function (entry, entry_path, type)\n\t\tif type == 'tree' then\n\t\t\tutil.make_dir(entry_path)\n\t\telseif type == 'blob' then\n\t\t\tlocal out = assert(io.open(entry_path, 'wb'))\n\t\t\tout:write(entry:content())\n\t\t\tout:close()\n\t\t\tif isPosix then\n\t\t\t\tlocal mode = entry.mode:sub(-3,-1) -- fixme: is this ok?\n\t\t\t\tlocal cmd = 'chmod '..mode..' \"'..entry_path..'\"'\n\t\t\t\tos.execute(cmd)\n\t\t\tend\n\t\telseif type == 'commit' then\n\t\t\t-- this is a submodule referencing a commit,\n\t\t\t-- make a directory for it\n\t\t\tutil.make_dir(entry_path)\n\t\telse\n\t\t\terror('Unknown entry type: ', type)\n\t\tend\n\tend",
    "type": "function"
  }, {
    "id": 59,
    "text": "",
    "type": "function container"
  }, {
    "id": 60,
    "text": "function make_dir(path)\n\tif lfs.attributes(path) then\n\t\treturn true\n\telse\n\t\tlocal par_dir = parent_dir(path)\n\t\tif par_dir then\n\t\t\tassert(make_dir(par_dir))\n\t\tend\n\t\treturn lfs.mkdir(path)\n\tend\nend",
    "type": "function"
  }, {
    "id": 61,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 62,
    "text": "func",
    "type": "global function"
  }, {
    "id": 63,
    "text": "join_path",
    "type": "global function"
  }, {
    "id": 64,
    "text": "execute",
    "type": "global function"
  }, {
    "id": 65,
    "text": "open",
    "type": "global function"
  }, {
    "id": 66,
    "text": "error",
    "type": "global function"
  }, {
    "id": 67,
    "text": "next",
    "type": "global function"
  }, {
    "id": 68,
    "text": "module",
    "type": "global function"
  }, {
    "id": 69,
    "text": "type",
    "type": "global function"
  }, {
    "id": 70,
    "text": "require",
    "type": "global function"
  }, {
    "id": 71,
    "text": "",
    "type": "variable container"
  }, {
    "id": 72,
    "text": "",
    "type": "require container"
  }, {
    "id": 73,
    "text": "",
    "type": "local variable"
  }, {
    "id": 74,
    "text": "",
    "type": "n/a"
  }, {
    "id": 75,
    "text": "",
    "type": "local variable"
  }, {
    "id": 76,
    "text": "",
    "type": "n/a"
  }, {
    "id": 77,
    "text": "",
    "type": "local variable"
  }, {
    "id": 78,
    "text": "",
    "type": "n/a"
  }, {
    "id": 79,
    "text": "",
    "type": "local variable"
  }, {
    "id": 80,
    "text": "",
    "type": "n/a"
  }, {
    "id": 81,
    "text": "",
    "type": "local variable"
  }, {
    "id": 82,
    "text": "",
    "type": "n/a"
  }, {
    "id": 83,
    "text": "",
    "type": "local variable"
  }, {
    "id": 84,
    "text": "",
    "type": "n/a"
  }, {
    "id": 85,
    "text": "",
    "type": "local variable"
  }, {
    "id": 86,
    "text": "",
    "type": "n/a"
  }, {
    "id": 87,
    "text": "",
    "type": "local variable"
  }, {
    "id": 88,
    "text": "",
    "type": "n/a"
  }, {
    "id": 89,
    "text": "",
    "type": "local variable"
  }, {
    "id": 90,
    "text": "",
    "type": "n/a"
  }, {
    "id": 91,
    "text": "",
    "type": "local variable"
  }, {
    "id": 92,
    "text": "",
    "type": "n/a"
  }, {
    "id": 93,
    "text": "",
    "type": "local variable"
  }, {
    "id": 94,
    "text": "",
    "type": "n/a"
  }, {
    "id": 95,
    "text": "",
    "type": "local variable"
  }, {
    "id": 96,
    "text": "",
    "type": "n/a"
  }, {
    "id": 97,
    "text": "",
    "type": "global variable"
  }, {
    "id": 98,
    "text": "",
    "type": "n/a"
  }, {
    "id": 99,
    "text": "",
    "type": "global variable"
  }, {
    "id": 100,
    "text": "",
    "type": "n/a"
  }, {
    "id": 101,
    "text": "",
    "type": "global variable"
  }, {
    "id": 102,
    "text": "",
    "type": "n/a"
  }, {
    "id": 103,
    "text": "",
    "type": "global variable"
  }, {
    "id": 104,
    "text": "",
    "type": "n/a"
  }, {
    "id": 105,
    "text": "",
    "type": "global variable"
  }, {
    "id": 106,
    "text": "",
    "type": "n/a"
  }, {
    "id": 107,
    "text": "",
    "type": "global variable"
  }, {
    "id": 108,
    "text": "",
    "type": "n/a"
  }, {
    "id": 109,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 110,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 111,
    "text": "",
    "type": "global variable"
  } ]
}