{
  "_filename": "protocol.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-git/lua/git/protocol.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 11,
    "label": "has",
    "to": 15
  }, {
    "from": 11,
    "label": "has",
    "to": 16
  }, {
    "from": 11,
    "label": "has",
    "to": 15
  }, {
    "from": 2,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 2,
    "label": "has",
    "to": 15
  }, {
    "from": 2,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 12
  }, {
    "from": 22,
    "label": "has",
    "to": 13
  }, {
    "from": 22,
    "label": "has",
    "to": 14
  }, {
    "from": 22,
    "label": "has",
    "to": 15
  }, {
    "from": 22,
    "label": "has",
    "to": 16
  }, {
    "from": 22,
    "label": "has",
    "to": 15
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 18
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 27,
    "label": "has",
    "to": 31
  }, {
    "from": 27,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 26,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 36,
    "label": "has",
    "to": 15
  }, {
    "from": 36,
    "label": "has",
    "to": 15
  }, {
    "from": 36,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 41,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 41,
    "label": "has",
    "to": 51
  }, {
    "from": 41,
    "label": "has",
    "to": 52
  }, {
    "from": 41,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 53,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 57
  }, {
    "from": 53,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 41,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 41,
    "label": "has",
    "to": 64
  }, {
    "from": 41,
    "label": "has",
    "to": 65
  }, {
    "from": 41,
    "label": "has",
    "to": 66
  }, {
    "from": 41,
    "label": "has",
    "to": 67
  }, {
    "from": 41,
    "label": "has",
    "to": 68
  }, {
    "from": 41,
    "label": "has",
    "to": 69
  }, {
    "from": 41,
    "label": "has",
    "to": 70
  }, {
    "from": 41,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 73,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 76,
    "label": "has",
    "to": 80
  }, {
    "from": 41,
    "label": "has",
    "to": 81
  }, {
    "from": 41,
    "label": "has",
    "to": 82
  }, {
    "from": 41,
    "label": "has",
    "to": 83
  }, {
    "from": 41,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 84,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 87,
    "label": "has",
    "to": 90
  }, {
    "from": 87,
    "label": "has",
    "to": 91
  }, {
    "from": 87,
    "label": "has",
    "to": 92
  }, {
    "from": 41,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 41,
    "label": "has",
    "to": 15
  }, {
    "from": 41,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 96,
    "label": "has",
    "to": 99
  }, {
    "from": 96,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 100,
    "label": "has",
    "to": 102
  }, {
    "from": 96,
    "label": "has",
    "to": 15
  }, {
    "from": 96,
    "label": "has",
    "to": 103
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 102
  }, {
    "from": 104,
    "label": "has",
    "to": 107
  }, {
    "from": 104,
    "label": "has",
    "to": 42
  }, {
    "from": 104,
    "label": "has",
    "to": 43
  }, {
    "from": 104,
    "label": "has",
    "to": 108
  }, {
    "from": 104,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 46
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 48
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 104,
    "label": "has",
    "to": 82
  }, {
    "from": 104,
    "label": "has",
    "to": 15
  }, {
    "from": 104,
    "label": "has",
    "to": 112
  }, {
    "from": 113,
    "label": "has",
    "to": 94
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 41,
    "label": "calls",
    "to": 2
  }, {
    "from": 104,
    "label": "calls",
    "to": 2
  }, {
    "from": 2,
    "label": "calls",
    "to": 136
  }, {
    "from": 2,
    "label": "calls",
    "to": 121
  }, {
    "from": 2,
    "label": "calls",
    "to": 121
  }, {
    "from": 2,
    "label": "calls",
    "to": 121
  }, {
    "from": 2,
    "label": "calls",
    "to": 121
  }, {
    "from": 41,
    "label": "calls",
    "to": 121
  }, {
    "from": 41,
    "label": "calls",
    "to": 121
  }, {
    "from": 41,
    "label": "calls",
    "to": 121
  }, {
    "from": 41,
    "label": "calls",
    "to": 121
  }, {
    "from": 96,
    "label": "calls",
    "to": 121
  }, {
    "from": 104,
    "label": "calls",
    "to": 121
  }, {
    "from": 41,
    "label": "calls",
    "to": 127
  }, {
    "from": 36,
    "label": "calls",
    "to": 122
  }, {
    "from": 36,
    "label": "calls",
    "to": 122
  }, {
    "from": 41,
    "label": "calls",
    "to": 129
  }, {
    "from": 41,
    "label": "calls",
    "to": 129
  }, {
    "from": 2,
    "label": "calls",
    "to": 123
  }, {
    "from": 41,
    "label": "calls",
    "to": 131
  }, {
    "from": 41,
    "label": "calls",
    "to": 120
  }, {
    "from": 96,
    "label": "calls",
    "to": 119
  }, {
    "from": 104,
    "label": "calls",
    "to": 119
  }, {
    "from": 41,
    "label": "calls",
    "to": 124
  }, {
    "from": 115,
    "label": "calls",
    "to": 140
  }, {
    "from": 115,
    "label": "calls",
    "to": 140
  }, {
    "from": 115,
    "label": "calls",
    "to": 140
  }, {
    "from": 96,
    "label": "calls",
    "to": 41
  }, {
    "from": 26,
    "label": "calls",
    "to": 125
  }, {
    "from": 36,
    "label": "calls",
    "to": 128
  }, {
    "from": 36,
    "label": "calls",
    "to": 126
  }, {
    "from": 41,
    "label": "calls",
    "to": 126
  }, {
    "from": 41,
    "label": "calls",
    "to": 130
  }, {
    "from": 41,
    "label": "calls",
    "to": 130
  }, {
    "from": 96,
    "label": "calls",
    "to": 130
  }, {
    "from": 104,
    "label": "calls",
    "to": 130
  }, {
    "from": 41,
    "label": "calls",
    "to": 135
  }, {
    "from": 41,
    "label": "calls",
    "to": 26
  }, {
    "from": 115,
    "label": "calls",
    "to": 139
  }, {
    "from": 26,
    "label": "calls",
    "to": 138
  }, {
    "from": 41,
    "label": "calls",
    "to": 134
  }, {
    "from": 2,
    "label": "calls",
    "to": 118
  }, {
    "from": 41,
    "label": "calls",
    "to": 137
  }, {
    "from": 26,
    "label": "calls",
    "to": 133
  }, {
    "from": 96,
    "label": "calls",
    "to": 133
  }, {
    "from": 41,
    "label": "calls",
    "to": 36
  }, {
    "from": 41,
    "label": "calls",
    "to": 132
  }, {
    "from": 1,
    "label": "contains",
    "to": 115
  }, {
    "from": 115,
    "label": "declares",
    "to": 2
  }, {
    "from": 115,
    "label": "declares",
    "to": 20
  }, {
    "from": 115,
    "label": "declares",
    "to": 22
  }, {
    "from": 115,
    "label": "declares",
    "to": 24
  }, {
    "from": 115,
    "label": "declares",
    "to": 26
  }, {
    "from": 115,
    "label": "declares",
    "to": 36
  }, {
    "from": 115,
    "label": "declares",
    "to": 41
  }, {
    "from": 115,
    "label": "declares",
    "to": 96
  }, {
    "from": 115,
    "label": "declares",
    "to": 104
  }, {
    "from": 115,
    "label": "declares",
    "to": 113
  }, {
    "from": 1,
    "label": "contains",
    "to": 141
  }, {
    "from": 1,
    "label": "contains",
    "to": 142
  }, {
    "from": 141,
    "label": "initializes",
    "to": 143
  }, {
    "from": 143,
    "label": "assigns",
    "to": 144
  }, {
    "from": 141,
    "label": "initializes",
    "to": 145
  }, {
    "from": 145,
    "label": "assigns",
    "to": 146
  }, {
    "from": 141,
    "label": "initializes",
    "to": 147
  }, {
    "from": 147,
    "label": "assigns",
    "to": 148
  }, {
    "from": 141,
    "label": "initializes",
    "to": 149
  }, {
    "from": 149,
    "label": "assigns",
    "to": 150
  }, {
    "from": 141,
    "label": "initializes",
    "to": 151
  }, {
    "from": 151,
    "label": "assigns",
    "to": 152
  }, {
    "from": 141,
    "label": "initializes",
    "to": 153
  }, {
    "from": 153,
    "label": "assigns",
    "to": 154
  }, {
    "from": 141,
    "label": "initializes",
    "to": 155
  }, {
    "from": 155,
    "label": "assigns",
    "to": 156
  }, {
    "from": 141,
    "label": "initializes",
    "to": 157
  }, {
    "from": 157,
    "label": "assigns",
    "to": 158
  }, {
    "from": 141,
    "label": "initializes",
    "to": 159
  }, {
    "from": 159,
    "label": "assigns",
    "to": 160
  }, {
    "from": 141,
    "label": "initializes",
    "to": 161
  }, {
    "from": 161,
    "label": "assigns",
    "to": 162
  }, {
    "from": 141,
    "label": "initializes",
    "to": 163
  }, {
    "from": 163,
    "label": "assigns",
    "to": 164
  }, {
    "from": 141,
    "label": "initializes",
    "to": 165
  }, {
    "from": 165,
    "label": "assigns",
    "to": 166
  }, {
    "from": 141,
    "label": "initializes",
    "to": 167
  }, {
    "from": 167,
    "label": "assigns",
    "to": 168
  }, {
    "from": 141,
    "label": "initializes",
    "to": 169
  }, {
    "from": 169,
    "label": "assigns",
    "to": 170
  }, {
    "from": 141,
    "label": "initializes",
    "to": 171
  }, {
    "from": 171,
    "label": "assigns",
    "to": 172
  }, {
    "from": 141,
    "label": "initializes",
    "to": 173
  }, {
    "from": 173,
    "label": "assigns",
    "to": 174
  }, {
    "from": 141,
    "label": "initializes",
    "to": 175
  }, {
    "from": 175,
    "label": "assigns",
    "to": 176
  }, {
    "from": 141,
    "label": "initializes",
    "to": 177
  }, {
    "from": 177,
    "label": "assigns",
    "to": 178
  }, {
    "from": 141,
    "label": "initializes",
    "to": 179
  }, {
    "from": 179,
    "label": "assigns",
    "to": 180
  }, {
    "from": 141,
    "label": "initializes",
    "to": 181
  }, {
    "from": 181,
    "label": "assigns",
    "to": 182
  }, {
    "from": 142,
    "label": "initializes",
    "to": 183
  }, {
    "from": 183,
    "label": "requires",
    "to": 117
  }, {
    "from": 142,
    "label": "initializes",
    "to": 184
  }, {
    "from": 184,
    "label": "requires",
    "to": 185
  }, {
    "from": 142,
    "label": "initializes",
    "to": 186
  }, {
    "from": 186,
    "label": "requires",
    "to": 116
  }, {
    "from": 187,
    "label": "requires",
    "to": 1
  }, {
    "from": 93,
    "label": "hasArgument",
    "to": 113
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "protocol",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function git_connect(host)\r\n\tlocal sock = assert(socket.connect(host, GIT_PORT))\r\n\tlocal gitsocket = {}\r\n\r\n\tfunction gitsocket:send(data)\r\n\t\tif not data then -- flush packet\r\n\t\t\tsock:send('0000')\r\n\t\telse\r\n\t\t\tlocal len = #data + 4\r\n\t\t\tlen = string.format(\"%04x\", len)\r\n\t\t\tassert(sock:send(len .. data))\r\n\t\tend\r\n\tend\r\n\r\n\tfunction gitsocket:receive()\r\n\t\tlocal len = assert(sock:receive(4))\r\n\t\tlen = tonumber(len, 16)\r\n\t\tif len == 0 then return end -- flush packet\r\n\t\tlocal data = assert(sock:receive(len - 4))\r\n\t\treturn data\r\n\tend\r\n\r\n\tfunction gitsocket:close()\r\n\t\tsock:close()\r\n\tend\r\n\r\n\treturn gitsocket\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local sock = assert(socket.connect(host, GIT_PORT))",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local gitsocket = {}",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "function gitsocket:send(data)\r\n\t\tif not data then -- flush packet\r\n\t\t\tsock:send('0000')\r\n\t\telse\r\n\t\t\tlocal len = #data + 4\r\n\t\t\tlen = string.format(\"%04x\", len)\r\n\t\t\tassert(sock:send(len .. data))\r\n\t\tend\r\n\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 6,
    "text": "if not data then -- flush packet\r\n\t\t\tsock:send('0000')\r\n\t\telse\r\n\t\t\tlocal len = #data + 4\r\n\t\t\tlen = string.format(\"%04x\", len)\r\n\t\t\tassert(sock:send(len .. data))\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "sock:send('0000')",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "local len = #data + 4",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "len = string.format(\"%04x\", len)",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "assert(sock:send(len .. data))",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "function gitsocket:receive()\r\n\t\tlocal len = assert(sock:receive(4))\r\n\t\tlen = tonumber(len, 16)\r\n\t\tif len == 0 then return end -- flush packet\r\n\t\tlocal data = assert(sock:receive(len - 4))\r\n\t\treturn data\r\n\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 12,
    "text": "local len = assert(sock:receive(4))",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "len = tonumber(len, 16)",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "if len == 0 then return end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 16,
    "text": "local data = assert(sock:receive(len - 4))",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "function gitsocket:close()\r\n\t\tsock:close()\r\n\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 18,
    "text": "sock:close()",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function gitsocket:send(data)\r\n\t\tif not data then -- flush packet\r\n\t\t\tsock:send('0000')\r\n\t\telse\r\n\t\t\tlocal len = #data + 4\r\n\t\t\tlen = string.format(\"%04x\", len)\r\n\t\t\tassert(sock:send(len .. data))\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function gitsocket:receive()\r\n\t\tlocal len = assert(sock:receive(4))\r\n\t\tlen = tonumber(len, 16)\r\n\t\tif len == 0 then return end -- flush packet\r\n\t\tlocal data = assert(sock:receive(len - 4))\r\n\t\treturn data\r\n\tend",
    "type": "function"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function gitsocket:close()\r\n\t\tsock:close()\r\n\tend",
    "type": "function"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "local function addFinalizer(object, finalizer)\r\n\tif _VERSION <= \"Lua 5.1\" then\r\n\t\tlocal gc = newproxy(true)\r\n\t\tgetmetatable(gc).__gc = finalizer\r\n\t\tobject.__gc = gc\r\n\telse\r\n\t\tlocal mt = getmetatable(object)\r\n\t\tif mt then mt.__gc = finalizer\r\n\t\telse setmetatable(object, {__gc = finalizer})\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "if _VERSION <= \"Lua 5.1\" then\r\n\t\tlocal gc = newproxy(true)\r\n\t\tgetmetatable(gc).__gc = finalizer\r\n\t\tobject.__gc = gc\r\n\telse\r\n\t\tlocal mt = getmetatable(object)\r\n\t\tif mt then mt.__gc = finalizer\r\n\t\telse setmetatable(object, {__gc = finalizer})\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "local gc = newproxy(true)",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "getmetatable(gc).__gc = finalizer",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "object.__gc = gc",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "local mt = getmetatable(object)",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "if mt then mt.__gc = finalizer\r\n\t\telse setmetatable(object, {__gc = finalizer})\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "mt.__gc = finalizer",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "setmetatable(object, {__gc = finalizer})",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "local function tmpname()\r\n\tif not isPosix then\r\n\t\tlocal prefix = os.getenv(\"TEMP\")\r\n\t\tlocal name = os.tmpname()\r\n\t\treturn join_path(prefix, name)\r\n\telse\r\n\t\treturn os.tmpname()\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "if not isPosix then\r\n\t\tlocal prefix = os.getenv(\"TEMP\")\r\n\t\tlocal name = os.tmpname()\r\n\t\treturn join_path(prefix, name)\r\n\telse\r\n\t\treturn os.tmpname()\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "local prefix = os.getenv(\"TEMP\")",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "local name = os.tmpname()",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "local function git_fetch(host, path, repo, head, supress_progress)\r\n\tlocal s = git_connect(host)\r\n\ts:send('git-upload-pack '..path..'\\0host='..host..'\\0')\r\n\r\n\tlocal refs, refsbyname = {}, {}\r\n\trepeat\r\n\t\tlocal ref = s:receive()\r\n\t\tif ref then\r\n\t\t\tlocal sha, name = ref:sub(1,40), ref:sub(42, -2)\r\n\t\t\trefs[sha] = name\r\n\t\t\trefsbyname[name] = sha\r\n\t\tend\r\n\tuntil not ref\r\n\r\n\tlocal wantedSha\r\n\tlocal headsha = head and refsbyname[head]\r\n\r\n\tfor sha, ref in pairs(refs) do\r\n\t\t-- we implicitly want this ref\r\n\t\tlocal wantObject = true \r\n\t\t-- unless we ask for a specific head\r\n\t\tif headsha then         \r\n\t\t\tif sha ~= headsha then\r\n\t\t\t\twantObject = false\r\n\t\t\telse\r\n\t\t\t\twantedSha = sha\r\n\t\t\tend\r\n\t\tend\r\n\t\t-- or we already have it\r\n\t\tif repo and repo:has_object(sha) then\r\n\t\t\twantObject = false\r\n\t\tend\r\n\t\tif wantObject then\r\n\t\t\ts:send('want '..sha..' multi_ack_detailed side-band-64k ofs-delta\\n')\r\n\t\tend\r\n\tend\r\n\r\n\tif head and not wantedSha then\r\n\t\terror(\"Server does not have \"..head)\r\n\tend\r\n\r\n\ts:send('deepen 1')\r\n\ts:send()\r\n\twhile s:receive() do end\r\n\ts:send('done\\n')\r\n\t\r\n\tassert(s:receive() == \"NAK\\n\")\r\n\t\r\n\tlocal packname = tmpname() .. '.pack'\r\n\tlocal packfile = assert(io.open(packname, 'wb'))\r\n\trepeat\r\n\t\tlocal got = s:receive()\r\n\t\tif got then\r\n\t\t\t-- get sideband channel, 1=pack data, 2=progress, 3=error\r\n\t\t\tlocal cmd = string.byte(got:sub(1,1))\r\n\t\t\tlocal data = got:sub(2)\r\n\t\t\tif cmd == 1 then\r\n\t\t\t\tpackfile:write(data)\r\n\t\t\telseif cmd == 2 then\r\n\t\t\t\tif not supress_progress then io.write(data) end\r\n\t\t\telse\r\n\t\t\t\terror(data)\r\n\t\t\tend\r\n\t\tend\r\n\tuntil not got\r\n\r\n\tpackfile:close()\r\n\ts:close()\r\n\r\n\tlocal pack = Pack.open(packname)\r\n\tif repo then\r\n\t\tpack:unpack(repo)\r\n\t\trepo.isShallow = true\r\n\t\tif wantedSha then\r\n\t\t\tlocal headfile = correct_separators(join_path(repo.dir, head))\r\n\t\t\tassert(make_dir(parent_dir(headfile)))\r\n\t\t\tlocal f = assert(io.open(headfile, 'wb'))\r\n\t\t\tf:write(wantedSha)\r\n\t\t\tf:close()\r\n\t\tend\r\n\tend\r\n\r\n\taddFinalizer(pack, function()\r\n\t\tos.remove(packname)\r\n\tend)\r\n\r\n\treturn pack, wantedSha\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "local s = git_connect(host)",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "s:send('git-upload-pack '..path..'\\0host='..host..'\\0')",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "local refs, refsbyname = {}, {}",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "repeat\r\n\t\tlocal ref = s:receive()\r\n\t\tif ref then\r\n\t\t\tlocal sha, name = ref:sub(1,40), ref:sub(42, -2)\r\n\t\t\trefs[sha] = name\r\n\t\t\trefsbyname[name] = sha\r\n\t\tend\r\n\tuntil not ref",
    "type": "statement:repeat"
  }, {
    "id": 46,
    "text": "local ref = s:receive()",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "if ref then\r\n\t\t\tlocal sha, name = ref:sub(1,40), ref:sub(42, -2)\r\n\t\t\trefs[sha] = name\r\n\t\t\trefsbyname[name] = sha\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "local sha, name = ref:sub(1,40), ref:sub(42, -2)",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "refs[sha] = name",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "refsbyname[name] = sha",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "local wantedSha",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "local headsha = head and refsbyname[head]",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "for sha, ref in pairs(refs) do\r\n\t\t-- we implicitly want this ref\r\n\t\tlocal wantObject = true \r\n\t\t-- unless we ask for a specific head\r\n\t\tif headsha then         \r\n\t\t\tif sha ~= headsha then\r\n\t\t\t\twantObject = false\r\n\t\t\telse\r\n\t\t\t\twantedSha = sha\r\n\t\t\tend\r\n\t\tend\r\n\t\t-- or we already have it\r\n\t\tif repo and repo:has_object(sha) then\r\n\t\t\twantObject = false\r\n\t\tend\r\n\t\tif wantObject then\r\n\t\t\ts:send('want '..sha..' multi_ack_detailed side-band-64k ofs-delta\\n')\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 54,
    "text": "local wantObject = true",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "if headsha then         \r\n\t\t\tif sha ~= headsha then\r\n\t\t\t\twantObject = false\r\n\t\t\telse\r\n\t\t\t\twantedSha = sha\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "if sha ~= headsha then\r\n\t\t\t\twantObject = false\r\n\t\t\telse\r\n\t\t\t\twantedSha = sha\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "wantObject = false",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "wantedSha = sha",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "if repo and repo:has_object(sha) then\r\n\t\t\twantObject = false\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "if wantObject then\r\n\t\t\ts:send('want '..sha..' multi_ack_detailed side-band-64k ofs-delta\\n')\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "s:send('want '..sha..' multi_ack_detailed side-band-64k ofs-delta\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "if head and not wantedSha then\r\n\t\terror(\"Server does not have \"..head)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "error(\"Server does not have \"..head)",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "s:send('deepen 1')",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "s:send()",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "while s:receive() do end",
    "type": "statement:while"
  }, {
    "id": 67,
    "text": "s:send('done\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "assert(s:receive() == \"NAK\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "local packname = tmpname() .. '.pack'",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "local packfile = assert(io.open(packname, 'wb'))",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "repeat\r\n\t\tlocal got = s:receive()\r\n\t\tif got then\r\n\t\t\t-- get sideband channel, 1=pack data, 2=progress, 3=error\r\n\t\t\tlocal cmd = string.byte(got:sub(1,1))\r\n\t\t\tlocal data = got:sub(2)\r\n\t\t\tif cmd == 1 then\r\n\t\t\t\tpackfile:write(data)\r\n\t\t\telseif cmd == 2 then\r\n\t\t\t\tif not supress_progress then io.write(data) end\r\n\t\t\telse\r\n\t\t\t\terror(data)\r\n\t\t\tend\r\n\t\tend\r\n\tuntil not got",
    "type": "statement:repeat"
  }, {
    "id": 72,
    "text": "local got = s:receive()",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "if got then\r\n\t\t\t-- get sideband channel, 1=pack data, 2=progress, 3=error\r\n\t\t\tlocal cmd = string.byte(got:sub(1,1))\r\n\t\t\tlocal data = got:sub(2)\r\n\t\t\tif cmd == 1 then\r\n\t\t\t\tpackfile:write(data)\r\n\t\t\telseif cmd == 2 then\r\n\t\t\t\tif not supress_progress then io.write(data) end\r\n\t\t\telse\r\n\t\t\t\terror(data)\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "local cmd = string.byte(got:sub(1,1))",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "local data = got:sub(2)",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "if cmd == 1 then\r\n\t\t\t\tpackfile:write(data)\r\n\t\t\telseif cmd == 2 then\r\n\t\t\t\tif not supress_progress then io.write(data) end\r\n\t\t\telse\r\n\t\t\t\terror(data)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "packfile:write(data)",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "if not supress_progress then io.write(data) end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "io.write(data)",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "error(data)",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "packfile:close()",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "s:close()",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "local pack = Pack.open(packname)",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "if repo then\r\n\t\tpack:unpack(repo)\r\n\t\trepo.isShallow = true\r\n\t\tif wantedSha then\r\n\t\t\tlocal headfile = correct_separators(join_path(repo.dir, head))\r\n\t\t\tassert(make_dir(parent_dir(headfile)))\r\n\t\t\tlocal f = assert(io.open(headfile, 'wb'))\r\n\t\t\tf:write(wantedSha)\r\n\t\t\tf:close()\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 85,
    "text": "pack:unpack(repo)",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "repo.isShallow = true",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "if wantedSha then\r\n\t\t\tlocal headfile = correct_separators(join_path(repo.dir, head))\r\n\t\t\tassert(make_dir(parent_dir(headfile)))\r\n\t\t\tlocal f = assert(io.open(headfile, 'wb'))\r\n\t\t\tf:write(wantedSha)\r\n\t\t\tf:close()\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 88,
    "text": "local headfile = correct_separators(join_path(repo.dir, head))",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "assert(make_dir(parent_dir(headfile)))",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "local f = assert(io.open(headfile, 'wb'))",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "f:write(wantedSha)",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "addFinalizer(pack, function()\r\n\t\tos.remove(packname)\r\n\tend)",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "os.remove(packname)",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "function fetch(url, repo, head, supress_progress)\r\n\tif repo then assert(getmetatable(repo) == Repo, \"arg #2 is not a repository\") end\r\n\turl = urllib.parse(url)\r\n\tif url.scheme == 'git' then\r\n\t\tlocal pack, sha = git_fetch(url.host, url.path, repo, head, supress_progress)\r\n\t\treturn pack, sha\r\n\telse\r\n\t\terror('unsupported scheme: '..url.scheme)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 97,
    "text": "if repo then assert(getmetatable(repo) == Repo, \"arg #2 is not a repository\") end",
    "type": "statement:if"
  }, {
    "id": 98,
    "text": "assert(getmetatable(repo) == Repo, \"arg #2 is not a repository\")",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "url = urllib.parse(url)",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "if url.scheme == 'git' then\r\n\t\tlocal pack, sha = git_fetch(url.host, url.path, repo, head, supress_progress)\r\n\t\treturn pack, sha\r\n\telse\r\n\t\terror('unsupported scheme: '..url.scheme)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 101,
    "text": "local pack, sha = git_fetch(url.host, url.path, repo, head, supress_progress)",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "error('unsupported scheme: '..url.scheme)",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 104,
    "text": "function remotes(url)\r\n\t-- TODO: refactor common code\r\n\turl = assert(urllib.parse(url))\r\n\r\n\tif url.scheme ~= 'git' then\r\n\t\terror('unsupported scheme: '..url.scheme)\r\n\tend\r\n\r\n\tlocal host, path = url.host, url.path\r\n\r\n\tlocal s = git_connect(host)\r\n\ts:send('git-upload-pack '..path..'\\0host='..host..'\\0')\r\n\r\n\tlocal remote = {}\r\n\trepeat\r\n\t\tlocal ref = s:receive()\r\n\t\tif ref then\r\n\t\t\tlocal sha, name = ref:sub(1,40), ref:sub(42, -2)\r\n\t\t\tremote[name] = sha\r\n\t\tend\r\n\tuntil not ref\r\n\r\n\ts:close()\r\n\r\n\treturn remote\r\nend",
    "type": "function"
  }, {
    "id": 105,
    "text": "url = assert(urllib.parse(url))",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "if url.scheme ~= 'git' then\r\n\t\terror('unsupported scheme: '..url.scheme)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 107,
    "text": "local host, path = url.host, url.path",
    "type": "statement:localassign"
  }, {
    "id": 108,
    "text": "local remote = {}",
    "type": "statement:localassign"
  }, {
    "id": 109,
    "text": "repeat\r\n\t\tlocal ref = s:receive()\r\n\t\tif ref then\r\n\t\t\tlocal sha, name = ref:sub(1,40), ref:sub(42, -2)\r\n\t\t\tremote[name] = sha\r\n\t\tend\r\n\tuntil not ref",
    "type": "statement:repeat"
  }, {
    "id": 110,
    "text": "if ref then\r\n\t\t\tlocal sha, name = ref:sub(1,40), ref:sub(42, -2)\r\n\t\t\tremote[name] = sha\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 111,
    "text": "remote[name] = sha",
    "type": "statement:assign"
  }, {
    "id": 112,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 113,
    "text": "function()\r\n\t\tos.remove(packname)\r\n\tend",
    "type": "function"
  }, {
    "id": 114,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 115,
    "text": "",
    "type": "function container"
  }, {
    "id": 116,
    "text": "lfs",
    "type": "module"
  }, {
    "id": 117,
    "text": "socket",
    "type": "module"
  }, {
    "id": 118,
    "text": "connect",
    "type": "global function"
  }, {
    "id": 119,
    "text": "parse",
    "type": "global function"
  }, {
    "id": 120,
    "text": "write",
    "type": "global function"
  }, {
    "id": 121,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 122,
    "text": "tmpname",
    "type": "global function"
  }, {
    "id": 123,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 124,
    "text": "open",
    "type": "global function"
  }, {
    "id": 125,
    "text": "newproxy",
    "type": "global function"
  }, {
    "id": 126,
    "text": "join_path",
    "type": "global function"
  }, {
    "id": 127,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 128,
    "text": "getenv",
    "type": "global function"
  }, {
    "id": 129,
    "text": "open",
    "type": "global function"
  }, {
    "id": 130,
    "text": "error",
    "type": "global function"
  }, {
    "id": 131,
    "text": "make_dir",
    "type": "global function"
  }, {
    "id": 132,
    "text": "correct_separators",
    "type": "global function"
  }, {
    "id": 133,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 134,
    "text": "byte",
    "type": "global function"
  }, {
    "id": 135,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 136,
    "text": "format",
    "type": "global function"
  }, {
    "id": 137,
    "text": "parent_dir",
    "type": "global function"
  }, {
    "id": 138,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 139,
    "text": "module",
    "type": "global function"
  }, {
    "id": 140,
    "text": "require",
    "type": "global function"
  }, {
    "id": 141,
    "text": "",
    "type": "variable container"
  }, {
    "id": 142,
    "text": "",
    "type": "require container"
  }, {
    "id": 143,
    "text": "",
    "type": "local variable"
  }, {
    "id": 144,
    "text": "",
    "type": "n/a"
  }, {
    "id": 145,
    "text": "",
    "type": "local variable"
  }, {
    "id": 146,
    "text": "",
    "type": "n/a"
  }, {
    "id": 147,
    "text": "",
    "type": "local variable"
  }, {
    "id": 148,
    "text": "",
    "type": "n/a"
  }, {
    "id": 149,
    "text": "",
    "type": "local variable"
  }, {
    "id": 150,
    "text": "",
    "type": "n/a"
  }, {
    "id": 151,
    "text": "",
    "type": "local variable"
  }, {
    "id": 152,
    "text": "",
    "type": "n/a"
  }, {
    "id": 153,
    "text": "",
    "type": "local variable"
  }, {
    "id": 154,
    "text": "",
    "type": "n/a"
  }, {
    "id": 155,
    "text": "",
    "type": "local variable"
  }, {
    "id": 156,
    "text": "",
    "type": "n/a"
  }, {
    "id": 157,
    "text": "",
    "type": "local variable"
  }, {
    "id": 158,
    "text": "",
    "type": "n/a"
  }, {
    "id": 159,
    "text": "",
    "type": "local variable"
  }, {
    "id": 160,
    "text": "",
    "type": "n/a"
  }, {
    "id": 161,
    "text": "",
    "type": "local variable"
  }, {
    "id": 162,
    "text": "",
    "type": "n/a"
  }, {
    "id": 163,
    "text": "",
    "type": "local variable"
  }, {
    "id": 164,
    "text": "",
    "type": "n/a"
  }, {
    "id": 165,
    "text": "",
    "type": "local variable"
  }, {
    "id": 166,
    "text": "",
    "type": "n/a"
  }, {
    "id": 167,
    "text": "",
    "type": "local variable"
  }, {
    "id": 168,
    "text": "",
    "type": "n/a"
  }, {
    "id": 169,
    "text": "",
    "type": "local variable"
  }, {
    "id": 170,
    "text": "",
    "type": "n/a"
  }, {
    "id": 171,
    "text": "",
    "type": "local variable"
  }, {
    "id": 172,
    "text": "",
    "type": "n/a"
  }, {
    "id": 173,
    "text": "",
    "type": "local variable"
  }, {
    "id": 174,
    "text": "",
    "type": "n/a"
  }, {
    "id": 175,
    "text": "",
    "type": "local variable"
  }, {
    "id": 176,
    "text": "",
    "type": "n/a"
  }, {
    "id": 177,
    "text": "",
    "type": "local variable"
  }, {
    "id": 178,
    "text": "",
    "type": "n/a"
  }, {
    "id": 179,
    "text": "",
    "type": "local variable"
  }, {
    "id": 180,
    "text": "",
    "type": "n/a"
  }, {
    "id": 181,
    "text": "",
    "type": "local variable"
  }, {
    "id": 182,
    "text": "",
    "type": "number"
  }, {
    "id": 183,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 184,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 185,
    "text": "url",
    "type": "module"
  }, {
    "id": 186,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 187,
    "text": "",
    "type": "global variable"
  } ]
}