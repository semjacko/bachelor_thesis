{
  "_filename": "util.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luadocer/src/luadocer/util.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "calls",
    "to": 39
  }, {
    "from": 2,
    "label": "calls",
    "to": 39
  }, {
    "from": 2,
    "label": "calls",
    "to": 39
  }, {
    "from": 2,
    "label": "calls",
    "to": 39
  }, {
    "from": 2,
    "label": "calls",
    "to": 42
  }, {
    "from": 2,
    "label": "calls",
    "to": 42
  }, {
    "from": 2,
    "label": "calls",
    "to": 42
  }, {
    "from": 2,
    "label": "calls",
    "to": 42
  }, {
    "from": 3,
    "label": "calls",
    "to": 90
  }, {
    "from": 4,
    "label": "calls",
    "to": 71
  }, {
    "from": 5,
    "label": "calls",
    "to": 21
  }, {
    "from": 8,
    "label": "calls",
    "to": 18
  }, {
    "from": 9,
    "label": "calls",
    "to": 18
  }, {
    "from": 9,
    "label": "calls",
    "to": 18
  }, {
    "from": 6,
    "label": "calls",
    "to": 21
  }, {
    "from": 8,
    "label": "calls",
    "to": 16
  }, {
    "from": 6,
    "label": "calls",
    "to": 10
  }, {
    "from": 7,
    "label": "calls",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 11
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 11
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 11
  }, {
    "from": 18,
    "label": "has",
    "to": 11
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 23,
    "label": "has",
    "to": 28
  }, {
    "from": 23,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 21,
    "label": "has",
    "to": 11
  }, {
    "from": 21,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 11
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 42,
    "label": "has",
    "to": 46
  }, {
    "from": 42,
    "label": "has",
    "to": 47
  }, {
    "from": 42,
    "label": "has",
    "to": 48
  }, {
    "from": 42,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 49,
    "label": "has",
    "to": 53
  }, {
    "from": 49,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 49,
    "label": "has",
    "to": 56
  }, {
    "from": 49,
    "label": "has",
    "to": 57
  }, {
    "from": 49,
    "label": "has",
    "to": 58
  }, {
    "from": 49,
    "label": "has",
    "to": 59
  }, {
    "from": 42,
    "label": "has",
    "to": 11
  }, {
    "from": 42,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 63,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 63,
    "label": "has",
    "to": 69
  }, {
    "from": 61,
    "label": "has",
    "to": 11
  }, {
    "from": 61,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 71,
    "label": "has",
    "to": 75
  }, {
    "from": 71,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 76,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 80,
    "label": "has",
    "to": 82
  }, {
    "from": 76,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 11
  }, {
    "from": 76,
    "label": "has",
    "to": 84
  }, {
    "from": 76,
    "label": "has",
    "to": 85
  }, {
    "from": 71,
    "label": "has",
    "to": 11
  }, {
    "from": 71,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 11
  }, {
    "from": 87,
    "label": "has",
    "to": 11
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 90,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 93,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 97,
    "label": "has",
    "to": 100
  }, {
    "from": 97,
    "label": "has",
    "to": 101
  }, {
    "from": 93,
    "label": "has",
    "to": 102
  }, {
    "from": 90,
    "label": "has",
    "to": 11
  }, {
    "from": 90,
    "label": "has",
    "to": 102
  }, {
    "from": 90,
    "label": "has",
    "to": 11
  }, {
    "from": 90,
    "label": "has",
    "to": 103
  }, {
    "from": 104,
    "label": "has",
    "to": 73
  }, {
    "from": 104,
    "label": "has",
    "to": 74
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 108,
    "label": "has",
    "to": 11
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 61,
    "label": "calls",
    "to": 117
  }, {
    "from": 42,
    "label": "calls",
    "to": 125
  }, {
    "from": 90,
    "label": "calls",
    "to": 112
  }, {
    "from": 90,
    "label": "calls",
    "to": 112
  }, {
    "from": 90,
    "label": "calls",
    "to": 112
  }, {
    "from": 61,
    "label": "calls",
    "to": 119
  }, {
    "from": 61,
    "label": "calls",
    "to": 119
  }, {
    "from": 21,
    "label": "calls",
    "to": 128
  }, {
    "from": 71,
    "label": "calls",
    "to": 121
  }, {
    "from": 21,
    "label": "calls",
    "to": 114
  }, {
    "from": 21,
    "label": "calls",
    "to": 114
  }, {
    "from": 21,
    "label": "calls",
    "to": 114
  }, {
    "from": 21,
    "label": "calls",
    "to": 114
  }, {
    "from": 21,
    "label": "calls",
    "to": 123
  }, {
    "from": 21,
    "label": "calls",
    "to": 123
  }, {
    "from": 42,
    "label": "calls",
    "to": 123
  }, {
    "from": 42,
    "label": "calls",
    "to": 123
  }, {
    "from": 42,
    "label": "calls",
    "to": 123
  }, {
    "from": 42,
    "label": "calls",
    "to": 123
  }, {
    "from": 90,
    "label": "calls",
    "to": 116
  }, {
    "from": 90,
    "label": "calls",
    "to": 116
  }, {
    "from": 90,
    "label": "calls",
    "to": 116
  }, {
    "from": 71,
    "label": "calls",
    "to": 120
  }, {
    "from": 21,
    "label": "calls",
    "to": 124
  }, {
    "from": 21,
    "label": "calls",
    "to": 124
  }, {
    "from": 42,
    "label": "calls",
    "to": 113
  }, {
    "from": 42,
    "label": "calls",
    "to": 113
  }, {
    "from": 61,
    "label": "calls",
    "to": 118
  }, {
    "from": 110,
    "label": "calls",
    "to": 130
  }, {
    "from": 110,
    "label": "calls",
    "to": 130
  }, {
    "from": 71,
    "label": "calls",
    "to": 130
  }, {
    "from": 71,
    "label": "calls",
    "to": 130
  }, {
    "from": 71,
    "label": "calls",
    "to": 129
  }, {
    "from": 71,
    "label": "calls",
    "to": 131
  }, {
    "from": 110,
    "label": "calls",
    "to": 126
  }, {
    "from": 16,
    "label": "calls",
    "to": 122
  }, {
    "from": 18,
    "label": "calls",
    "to": 122
  }, {
    "from": 21,
    "label": "calls",
    "to": 122
  }, {
    "from": 42,
    "label": "calls",
    "to": 122
  }, {
    "from": 90,
    "label": "calls",
    "to": 127
  }, {
    "from": 10,
    "label": "calls",
    "to": 115
  }, {
    "from": 13,
    "label": "calls",
    "to": 115
  }, {
    "from": 39,
    "label": "calls",
    "to": 115
  }, {
    "from": 61,
    "label": "calls",
    "to": 115
  }, {
    "from": 90,
    "label": "calls",
    "to": 115
  }, {
    "from": 90,
    "label": "calls",
    "to": 115
  }, {
    "from": 13,
    "label": "calls",
    "to": 10
  }, {
    "from": 16,
    "label": "calls",
    "to": 10
  }, {
    "from": 90,
    "label": "calls",
    "to": 87
  }, {
    "from": 1,
    "label": "contains",
    "to": 110
  }, {
    "from": 110,
    "label": "declares",
    "to": 10
  }, {
    "from": 110,
    "label": "declares",
    "to": 13
  }, {
    "from": 110,
    "label": "declares",
    "to": 16
  }, {
    "from": 110,
    "label": "declares",
    "to": 18
  }, {
    "from": 110,
    "label": "declares",
    "to": 21
  }, {
    "from": 110,
    "label": "declares",
    "to": 39
  }, {
    "from": 110,
    "label": "declares",
    "to": 42
  }, {
    "from": 110,
    "label": "declares",
    "to": 61
  }, {
    "from": 110,
    "label": "declares",
    "to": 71
  }, {
    "from": 110,
    "label": "declares",
    "to": 87
  }, {
    "from": 110,
    "label": "declares",
    "to": 90
  }, {
    "from": 110,
    "label": "declares",
    "to": 104
  }, {
    "from": 110,
    "label": "declares",
    "to": 106
  }, {
    "from": 110,
    "label": "declares",
    "to": 108
  }, {
    "from": 111,
    "label": "calls",
    "to": 90
  }, {
    "from": 132,
    "label": "requires",
    "to": 1
  }, {
    "from": 133,
    "label": "requires",
    "to": 1
  }, {
    "from": 134,
    "label": "requires",
    "to": 1
  }, {
    "from": 135,
    "label": "requires",
    "to": 1
  }, {
    "from": 136,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 137
  }, {
    "from": 1,
    "label": "contains",
    "to": 138
  }, {
    "from": 137,
    "label": "initializes",
    "to": 139
  }, {
    "from": 139,
    "label": "assigns",
    "to": 140
  }, {
    "from": 137,
    "label": "initializes",
    "to": 141
  }, {
    "from": 141,
    "label": "assigns",
    "to": 142
  }, {
    "from": 137,
    "label": "initializes",
    "to": 143
  }, {
    "from": 143,
    "label": "assigns",
    "to": 144
  }, {
    "from": 137,
    "label": "initializes",
    "to": 145
  }, {
    "from": 145,
    "label": "assigns",
    "to": 146
  }, {
    "from": 137,
    "label": "initializes",
    "to": 147
  }, {
    "from": 147,
    "label": "assigns",
    "to": 148
  }, {
    "from": 137,
    "label": "initializes",
    "to": 149
  }, {
    "from": 149,
    "label": "assigns",
    "to": 150
  }, {
    "from": 137,
    "label": "initializes",
    "to": 151
  }, {
    "from": 151,
    "label": "assigns",
    "to": 152
  }, {
    "from": 137,
    "label": "initializes",
    "to": 153
  }, {
    "from": 153,
    "label": "assigns",
    "to": 154
  }, {
    "from": 137,
    "label": "initializes",
    "to": 155
  }, {
    "from": 155,
    "label": "assigns",
    "to": 156
  }, {
    "from": 138,
    "label": "initializes",
    "to": 157
  }, {
    "from": 157,
    "label": "requires",
    "to": 158
  }, {
    "from": 138,
    "label": "initializes",
    "to": 159
  }, {
    "from": 159,
    "label": "requires",
    "to": 160
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "util",
    "type": "module"
  }, {
    "id": 2,
    "text": "function start (doc)\r\n\tlocal todo = \"<TODO>\"\r\n\r\n\t-- Process files\r\n\tfor i, file_doc in ipairs(doc.files) do\r\n\t\t-- assembly the filename\r\n\t\tlocal filename = out_file(file_doc.name)\r\n\t\tluadoc.logger:info(string.format(\"generating file `%s'\", filename))\r\n\r\n\t\t-- TODO: confirm file overwrite\r\n\t\tlocal f = lfs.open(filename, \"w\")\r\n\t\tassert(f, string.format(\"could not open `%s' for writing\", filename))\r\n\r\n\t\tfor _, block in ipairs(file_doc.doc) do\r\n\r\n\t\t\t-- write reorganized comments\r\n\t\t\tf:write(string.rep(\"-\", 80)..\"\\n\")\r\n\t\t\t\r\n\t\t\t-- description\r\n\t\t\tf:write(util.comment(util.wrap(block.description, 77)))\r\n\t\t\tf:write(\"\\n\")\r\n\t\t\t\r\n\t\t\tif block.class == \"function\" then\r\n\t\t\t\t-- parameters\r\n\t\t\t\ttable.foreachi(block.param, function (_, param_name)\r\n\t\t\t\t\tf:write(util.comment(util.wrap(string.format(\"@param %s %s\", param_name, block.param[param_name] or todo), 77)))\r\n\t\t\t\t\tf:write(\"\\n\")\r\n\t\t\t\tend)\r\n\t\t\t\t\r\n\t\t\t\t-- return\r\n\t\t\t\tif type(block.ret) == \"table\" then\r\n\t\t\t\t\ttable.foreachi(block.ret, function (_, ret)\r\n\t\t\t\t\t\tf:write(util.comment(util.wrap(string.format(\"@return %s\", ret), 77))..\"\\n\")\r\n\t\t\t\t\tend)\r\n\t\t\t\telse\r\n\t\t\t\t\tf:write(util.comment(util.wrap(string.format(\"@return %s\", block.ret or todo), 77))..\"\\n\")\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\t-- TODO: usage\r\n\t\t\t-- TODO: see\r\n\r\n\t\t\t-- write code\r\n\t\t\tfor _, line in ipairs(block.code) do\r\n\t\t\t\tf:write(line..\"\\n\")\r\n\t\t\tend\r\n\t\tend\r\n\t\t\r\n\t\tf:close()\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function start (doc)\r\n\t-- store global template helper functions in the doc object\r\n\t---------------\r\n\t-- Convert special charecters into HTML entities, this fixes MANY html-injection bugs on many pages\r\n\t-- @author Viliam Kubis\r\n\tdoc.sh=function (text)\r\n\r\n\t\tif text~= nil then\r\n\t\t\ttext = text:gsub(lfs.currentdir(), \"\")\r\n\t\tend\r\n\t\tif(text==nil) then\r\n\t\t\treturn nil;\r\n\t\tend\r\n\t\tif(type(text)~=\"string\") then\r\n\t\t\treturn text;\r\n\t\tend\r\n\t\ttext=text:gsub(\"&\",\"&amp;\");\r\n\t  \ttext=text:gsub(\"&#\",\"&#38;&#35;\");\r\n\t\ttext=text:gsub(\"<\",\"&lt;\");\r\n\t\ttext=text:gsub(\">\",\"&gt;\");\r\n\t\ttext=text:gsub(\"\\\"\",\"&#34;\");\r\n\t\ttext=text:gsub(\"'\",\"&#39;\");\r\n\t\treturn text;\r\n\tend;\r\n--KOSA\r\n---\r\n-- Helper for indexOfFunctions/Tables\r\n\tdoc.pathprefix=function(paths)\r\n\t\tlocal prefix\r\n\t\tlocal newpref=''\r\n\t\tfor k,v in pairs(paths) do\t\r\n\t\t\tv.path = v.path:gsub(lfs.currentdir(), \"\")\r\n\t\t--OKA\r\n\t\t\tif(prefix==nil)then\r\n\t\t\t\t\r\n\t\t\telseif(prefix~=v.path)then\r\n\t\t\t\tlocal split1 = {}\r\n\t\t\t\tlocal split2 = {}\r\n\t\t\t\tfor _,split in pairs(strsplit('/',prefix))do\r\n\t\t\t\t\ttable.insert(split1,split)\r\n\t\t\t\tend\r\n\t\t\t\tfor _,split in pairs(strsplit('/',v.path))do\r\n\t\t\t\t\ttable.insert(split2,split)\r\n\t\t\t\tend\r\n\t\t\t\tif(#split1 > #split2)then\r\n\t\t\t\t\tfor index,str in pairs(split2) do\r\n\t\t\t\t\t\tif(split1[index]==str)then\r\n\t\t\t\t\t\t\tif(newpref=='')then\r\n\t\t\t\t\t\t\t\tnewpref = '/' .. str\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tnewpref = newpref  .. '/' .. str\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\telse\r\n\t\t\t\t\tfor index,str in pairs(split1) do\r\n\t\t\t\t\t\tif(split2[index]==str)then\r\n\t\t\t\t\t\t\tif(newpref=='')then\r\n\t\t\t\t\t\t\t\tnewpref = '/' .. str\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tnewpref = newpref  .. '/' ..  str\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\t\tend\r\n\t\t\t\tprefix = newpref\t\t\t\r\n\t\t\t\tnewpref=''\r\n\t\t\tend\r\n\t\tend\r\n\r\n\t\treturn prefix\r\n\tend;\r\n---\r\n-- Helper for indexOfFunctions/\t\r\n\tdoc.pathsuffix=function(common,full)\r\n\t\tlocal suffix\r\n\t\tif(full == common or common==nil)then\r\n\t\t\treturn ''\r\n\t\tend\r\n\t\tsuffix = string.sub(full,string.len(common)+1)\r\n\t\treturn suffix\r\n\tend;\r\n-------------------------------------------------------------------\t\r\n\t-- Generate index file\r\n\tif (#doc.files > 0 or #doc.modules > 0) and (not options.noindexpage) then\r\n\r\n\t\t-- KARASEK\r\n\t\tif options.plantuml_path ~= nil then \r\n\t\t\tdoc.diagram = 1 \t\t\t\t\t-- add 'UML diagrams' option to menu \r\n\t\tend\r\n\r\n\t\tif options.syntax_check == \"write\" then\r\n\t\t\tdoc.check = 1 \t\t\t\t\t-- add 'Static analysis' option to menu \r\n\t\tend\r\n\t\t\r\n\t\tlocal filename = options.output_dir..\"index.html\"\r\n\t\tlogger:info(string.format(\"generating file `%s'\", filename))\r\n\t\tlocal f = lfs.open(filename, \"w\")\r\n\t\tassert(f, string.format(\"could not open `%s' for writing\", filename))\r\n\t\tio.output(f)\r\n\t\tinclude(\"index.lp\", { doc = doc, os=os })\r\n\t\tf:close()\r\n\tend\r\n\t\r\n\t-- Generate list of modules (will not be accesible when nomodules=on)\r\n\tlocal filename = options.output_dir..\"list_of_modules.html\"\r\n\tlogger:info(string.format(\"generating file `%s'\", filename))\r\n\tlocal f = lfs.open(filename, \"w\")\r\n\tassert(f, string.format(\"could not open `%s' for writing\", filename))\r\n\tio.output(f)\r\n\tinclude(\"list_of_modules.lp\", { doc = doc })\r\n\tf:close()\r\n\t\r\n\t-- Generate list of files (will not be accesible when nofiles=on)\r\n\tlocal filename = options.output_dir..\"list_of_files.html\"\r\n\tlogger:info(string.format(\"generating file `%s'\", filename))\r\n\tlocal f = lfs.open(filename, \"w\")\r\n\tassert(f, string.format(\"could not open `%s' for writing\", filename))\r\n\tio.output(f)\r\n\tinclude(\"list_of_files.lp\", { doc = doc })\r\n\tf:close()\r\n\r\n\t-- generate module hierarchy\r\n\tlocal module_hierarchy={};\r\n\tfor _, modulename in ipairs(doc.modules) do\r\n\t\tlocal last=modulename:gsub(\"%..+$\",\"\");\r\n\t\tif(last~=modulename) then --nazov s bodkou\r\n\t\t\tlocal key=modulename:match(\"(.+)%..+$\");\r\n\t\t\tif(not module_hierarchy[key]) then\r\n\t\t\t\tmodule_hierarchy[key]={modulename:match(\"[^.]+$\")};\r\n\t\t\telse\r\n\t\t\t\ttable.insert(module_hierarchy[key],modulename:match(\"[^.]+$\"));\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\tfor k,v in pairs(module_hierarchy) do\r\n\t\tlocal filename = options.output_dir..\"module_hierarchy/\"..k..\".html\" -- WARNING: might not be safe! Module name could contain special characters..\r\n\t\tlogger:info(string.format(\"generating file `%s'\", filename))\r\n\t\tlocal f = lfs.open(filename, \"w\")\r\n\t\tassert(f, string.format(\"could not open `%s' for writing\", filename))\r\n\t\tio.output(f)\r\n\t\tinclude(\"module_hierarchy.lp\", { doc = doc, modname=k, hierarchy=v })\r\n\t\tf:close()\r\n\tend\r\n\tmodule_hierarchy=nil;\r\n\t\r\n\t-- generate file listing for each subdirectory in the project\r\n\tlocal file_hierarchy={};\r\n\tfor _, filename in ipairs(doc.files) do\r\n\t\tlocal last=filename:gsub(\"/.+$\",\"\");\r\n\r\n\t\tif(last~=filename) then --nazov v adresari\r\n\t\t\tlocal key=filename:match(\"(.+)/.+$\");\r\n\t\t\tif(not file_hierarchy[key]) then\r\n\t\t\t\tfile_hierarchy[key]={filename:match(\"[^/]+$\")};\r\n\t\t\telse\r\n\t\t\t\ttable.insert(file_hierarchy[key],filename:match(\"[^/]+$\"));\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\t\r\n\tfor k,v in pairs(file_hierarchy) do\r\n\t\tk = k:gsub(lfs.currentdir(), \"\")\r\n    k = cutPathToSources(k)\r\n\t\tlocal filename = options.output_dir..\"files\"..k..\"/file_listing.lua.lua.lua.html\";  -- NOT OK if the directory contains file named file_listing.lua.lua.lua.lua -> becomes file_listing.lua.lua.lua.html -> TODO: generate unique filename somehow or store in a different folder (e.g listings/)\r\n\r\n\t\tlogger:info(string.format(\"generating file `%s'\", filename))\r\n\t\tlocal f = lfs.open(filename, \"w\")\r\n\t\tassert(f, string.format(\"could not open `%s' for writing\", filename))\r\n\t\tio.output(f)\r\n\t\tinclude(\"file_listing.lp\", { doc = doc, fname=k, hierarchy=v })\r\n\t\tf:close()\r\n\tend\r\n\r\n\t-- KARASEK\r\n\t-- static check\r\n\tif options.syntax_check == \"print\" then  \t\t-- if 'print' was on stdin then just print to stdout \r\n\t\tprint(\"Start syntax analysis...\");\r\n\r\n\t\tfor _, filepath in ipairs(doc.files) do\t\r\n\t\t\tos.execute(\"luacheck \" .. filepath)\r\n\t\tend\r\n\tend\r\n\r\n\tlocal analysis_results = {}\r\n\tif options.syntax_check == \"write\" then \r\n\t\tio.stdout:write(\"Syntax analysis...\\r\")\r\n\t\tio.stdout:flush()\r\n\t\t\r\n\t\tfor _, filepath in ipairs(doc.files) do\r\n\r\n\t\t\tlocal temp_file = filepath:gsub('.%w*$', '') .. \"_checking\" \t\t\t-- we need make temporary file of luacheck report\r\n\t\t\tos.execute(\"luacheck --no-color \" .. filepath .. \" > \" .. temp_file) \t-- execute analysis\r\n\t\t\t\r\n\t\t\tlocal result = pkio.ReadFile(temp_file) \t-- add analysis to table\r\n\t\t\tanalysis_results[#analysis_results+1] = {}\r\n\t\t\t\r\n\t\t\tif (string.match(result, \"Failure\")) then \t\t\t\t\t\t-- if we find \"Failure\" in result text it has warnings or errors\r\n\t\t\t\tanalysis_results[#analysis_results].name = filepath:gsub(lfs.currentdir(), \"\")\r\n\t\t\t\tanalysis_results[#analysis_results].status = 'Failure'\r\n\t\t\t\t\r\n\t\t\t\tlocal temp_result = result:gsub('^Checking(.+)Failure(.+)Total:(.+)', '%2')\r\n\t\t\t\ttemp_result = temp_result:gsub(filepath .. \":\", \"\")\r\n\r\n\t\t\t\tanalysis_results[#analysis_results].result = temp_result:gsub(\"%s%s+\",'\\n')\r\n\t\t\t\tanalysis_results[#analysis_results].info = result:gsub('^.+Total:', 'Total:')\r\n\t\t\telse -- if not then it's OK\r\n\t\t\t\tanalysis_results[#analysis_results].name = filepath:gsub(lfs.currentdir(), \"\")\r\n\t\t\tend\r\n\t\t\tos.remove(temp_file) \t\t\t\t\t\t\t\t\t\t\t\t\t-- remove that temporary file\r\n\t\tend\r\n\r\n\t\t-- DEBUG PRINT\r\n\t\t-- for k,v in ipairs(analysis_results) do\r\n\t\t-- \tprint(analysis_results[k])\r\n\t\t-- end\r\n\t\t\t\r\n\t\tio.stdout:write(\"Start syntax analysis...\\tOK\\n\")\r\n\t\tio.stdout:flush()\r\n\tend\r\n\r\n\t-- generate diagrams\r\n\tlocal diagram_results = {}\r\n\tlocal settings = {}\t\r\n\r\n\tif options.plantuml_path ~= nil then \r\n\t\tio.stdout:write(\"Generating diagrams... \\r\")\r\n\t\tio.stdout:flush()\r\n\r\n\t\tfor _, filepath in ipairs(doc.files) do\t\r\n\t\t\t\r\n\t\t\tlocal text = pkio.ReadFile(filepath)\r\n\t\t\tsettings.plantuml_path = options.plantuml_path .. \" %s\"\r\n\t\t\tsettings.dir_path = util.getabsolutepath(options.output_dir) .. '/'\r\n\t\t\tsettings.current_file = filepath\r\n      \r\n      settings.extended_path = cutPathToSources(filepath)\r\n      \r\n\t\t\t-- parse extended_path\r\n\t\t\tsettings.extended_path = settings.extended_path:gsub(\"^(.+)/.-$\",\"%1/\")\r\n\t\t\tsettings.extended_path = settings.extended_path:gsub(\"^\\/\",\"\")\r\n\t\t\t\r\n\t\t\tsettings.file_format = \"svg\"\r\n\t\t\tdiagram_results = luaplantuml.process_text(text, settings)\r\n\t\tend\r\n\t\t-- DEBUG PRINT\r\n\t\t-- for _, v in ipairs(diagram_results) do\r\n\t\t-- \tprint(v.name .. ' CESTA: ' .. v.path .. '  STRING: ' .. v.uml_string)\r\n\t\t-- end\r\n\t\tio.stdout:write(\"Generating diagrams...\\t\\tOK\\n\")\r\n\t\tio.stdout:flush()\r\n\tend\r\n\r\n\t--MODIFICATION \\\\\\ (Ivan Simko) pridane globalne metriky ... a metriky ulozene do kazdej file_doc tabulky\r\n\tio.stdout:write(\"Generating metrics...\\r\")\r\n\tio.stdout:flush()\r\n\r\n\t--MODIFIED BY: Martin Nagy - edited global metrics generation (through metrics.templates)\r\n\tlocal fileList = {} --Created file list to generate metrics\r\n\r\n\tfor _, filepath in ipairs(doc.files) do\r\n\t\ttable.insert(fileList, filepath)\r\n\tend\r\n\r\n\t--Generate metrics to globalMetrics\r\n\tlocal globalMetrics = template.createASTAndMerge(fileList, options.files)\r\n\r\n\t--Loop to extend AST with literate module\r\n\tfor _, filepath in ipairs(doc.files) do\r\n\t    \r\n\t    local text = pkio.ReadFile(filepath)\r\n\t    local formatted_text = formatter.format_text(text);\r\n\r\n\t    -- potrebne nahradit windows newlines za unix newlines, inak dvojite nove riadky!! [LEG zoberie ako SPACE separatne \\r aj \\n, moderne browsery ciste \\r interpretuju ako newline -> dvojite nove riadky]\r\n\t    formatted_text = formatted_text:gsub(\"\\r\\n\",\"\\n\");\r\n\t    \r\n\t    local AST = globalMetrics.file_AST_list[cutPathToSources(filepath)] --Using generated AST instead of creating new one\r\n      \r\n\t    local file_doc = doc.files[filepath]\r\n\t    file_doc.metricsAST = AST\r\n\t    file_doc.formatted_text = formatted_text;\r\n\r\n\t    comments.extendAST(AST) --MODIFIED BY: Michal Juranyi\r\n\tend\r\n   \r\n        --MODIFIED BY: Michal Juranyi\r\n\t--_ listOfFunctions is globalMetrics.functionDefinitions table converted to associative array\r\n\tlocal listOfFunctions = {}\r\n\r\n\tfor _,fun in ipairs(globalMetrics.functionDefinitions) do\r\n\t\tfun.docstring = comments.findDocstring(fun)\r\n\t\tlistOfFunctions[fun.name] = fun\r\n\tend\r\n\r\n\tliterate.functions = listOfFunctions\r\n        --END OF MODIFICATION BY MJ\r\n\r\n\t-- Process modules\r\n\tif not options.nomodules then\r\n\t\tfor _, modulename in ipairs(doc.modules) do\r\n\t\t\tlocal module_doc = doc.modules[modulename]\r\n\r\n\t\t\t-- assembly the filename\r\n\t\t\tlocal filename = out_module(modulename)\r\n\t\t\tlogger:info(string.format(\"generating file `%s'\", filename))\r\n\t\t\t\r\n\t\t\tlocal f = lfs.open(filename, \"w\")\r\n\t\t\tassert(f, string.format(\"could not open `%s' for writing\", filename))\r\n\t\t\tio.output(f)\r\n\t\t\tinclude(\"module.lp\", { doc = doc, module_doc = module_doc, globalMetrics= globalMetrics} )\r\n\t\t\tf:close()\r\n\t\tend\r\n\t\tio.stdout:write(\"Generating metrics...\\t\\tOK\\n\")\r\n\t\tio.stdout:flush()\r\n\tend\r\n\t\r\n\t-- MODIF (Ivan Simko) - odstranene ! -> tableofFunctions a tableOfMetrics\r\n\t\r\n\t-- Process files\r\n\tif not options.nofiles then\r\n\t\tfor _, filepath in ipairs(doc.files) do\r\n\t\t\tdoc.files[filepath].name = doc.files[filepath].name:gsub(lfs.currentdir(), \"\")\r\n\t\t\tlocal file_doc = doc.files[filepath]\r\n\t\t\tfile_doc.file_name=file_doc.name:match(\"[^/]+$\");\r\n\t\t\tfile_doc.name = file_doc.name:gsub(lfs.currentdir(), \"\")\r\n      file_doc.name = cutPathToSources(file_doc.name)\r\n\t\t\t--MODIFICATION \\\\\\ (Ivan Simko) -> variables formatted_text and metricsAST are taken from file_doc\r\n\t\t\tlocal highlighter_pt=nil;\r\n\t\t\tif(file_doc.formatted_text) then\r\n\t\t\t\t-- convert the metrics parse tree to highlighter-compatible parse tree and pass the result as the parse tree to use during the highlighting process\r\n\t\t\t\tfile_doc.prettyprint, highlighter_pt = highlighter.highlight_text(file_doc.formatted_text,ast_helper.metrics_to_highlighter(file_doc.metricsAST)) -- set prettyprinted text of file_doc (the whole file)\r\n\t\t\t\t-- highlighter_pt now contains modified compatible parse-tree\r\n\t\t\t\t\r\n\t\t\t\t-- VYTVORIT PRETTYPRINT PRE KAZDU FUNKCIU SEPARATNE!\r\n\t\t\t\t-- crazy tabulka.. numericke kluce maju textove hodnoty, ktore su textove kluce do tej istej tabulky.. v ktorych je samotna dokumentacia funkcie\r\n\t\t\t\t-- tiez vytvorit separatnu dokumentacnu stranku pre kazdu funkciu!\r\n\t\t\t\tfor pos, func_name in ipairs(file_doc.functions) do\r\n\t\t\t\t\tlocal functionNode = ast_helper.metrics_to_highlighter(file_doc.metricsAST.luaDoc_functions[func_name]) or {}\r\n\t\t\t\t\t--file_doc['functions'][func_name]['prettyprint']=highlighter.assemble_table(ast_helper.getfunctionnode(highlighter_pt,func_name) or {});\r\n\t\t\t\t\tfile_doc['functions'][func_name]['prettyprint']=highlighter.assemble_table(functionNode);\r\n\t\t\t\t\t-- vygenerujeme unikatny nazov suboru pre tuto funkciu\r\n\r\n\t\t\t\t\tlocal filename = out_function(file_doc.name,func_name,pos);\r\n\t\t\t\t\tfile_doc['functions'][func_name]['detail_link']=filename;\r\n\r\n\t\t\t\t\t-- KARASEK\r\n\t\t\t\t\tif options.plantuml_path ~= nil then \r\n\t\t\t\t\t\tfor _, v in ipairs(diagram_results) do\r\n\r\n\t\t\t\t\t\t\tif v.name == \"global\" then \t\t-- add global UML path\r\n\t\t\t\t\t\t\t\tfile_doc.uml = v.path\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tif v.name == func_name then \t-- add function UML path\r\n\t\t\t\t\t\t\t\tfile_doc['functions'][func_name]['uml']=v.path;\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\r\n\t\t\t\t\tlogger:info(string.format(\"generating function detail: file `%s'\", filename))\r\n      \r\n\t\t\t\t\tlocal f = lfs.open(options.output_dir:gsub(\"/+\",\"/\")..\"files\"..file_doc.name:gsub(\"[^\\/]+$\",\"\")..filename, \"w\")\r\n\t\t\t\t\t\r\n\t\t\t\t\tassert(f, string.format(\"could not open `%s' for writing\", filename))\r\n\t\t\t\t\tio.output(f)\r\n\r\n\t\t\t\t\tinclude(\"function_detail.lp\", { doc = doc, file_doc = file_doc, func=file_doc['functions'][func_name], metricsAST = file_doc.metricsAST, globalMetrics = globalMetrics} )\r\n\t\t\t\t\tf:close()\r\n\t\t\t\tend\r\n\t\t\tend\r\n\r\n                        --MODIFIED BY:  Michal Juranyi\r\n\t\t\tliterate.filename = file_doc.name\r\n                        file_doc.literate = literate.literate(file_doc.metricsAST)\r\n                        --END OF MODIFICATION BY MJ\r\n\t\t\t\r\n\t\t\tfor _, funcinfo in pairs({}) do -- not working!! functionlister.getTableOfFunctions(text,true)) do\t\t-- appendinf function informations to the tableOfFunctions\r\n\t\t\t\tfuncinfo.path = filepath:gsub(lfs.currentdir(), \"\")\t\t\t\t\t\t\t\t\t\t\t\t\t-- set path\r\n\r\n\t\t\t\tmetricinfo.NOF = metricinfo.NOF + 1\t\t\t\t\t\t\t\t\t\t\t-- set metrics about functions\r\n\t\t\t\tif funcinfo.fcntype == \"global\" then metricinfo.NOGF = metricinfo.NOGF + 1 end\r\n\t\t\t\tif funcinfo.fcntype == \"local\"  then metricinfo.NOLF = metricinfo.NOLF + 1 end\r\n\t\t\tend\r\n\t\t\t--print(\"processing: \"..filepath) --TODO DELETE STATIC LOG PRINT\r\n\t\t\t--MODIFICATION ///\r\n      \r\n      local fname = cutPathToSources(file_doc.name)\r\n\t\t\t\r\n\t\t\t-- assembly the filename\r\n\t\t\tlocal filename = out_file(fname:gsub(lfs.currentdir(), \"\"))\r\n\r\n\t\t\tlogger:info(string.format(\"generating file `%s'\", filename))\r\n      \r\n\t\t\tlocal f = lfs.open(filename, \"w\")\r\n\t\t\tassert(f, string.format(\"could not open `%s' for writing\", filename))\r\n\t\t\tio.output(f)\r\n\t\t\t-- call the file template)\r\n\t\t\tinclude(\"file.lp\", {doc = doc, file_doc = file_doc, globalMetrics = globalMetrics} )\r\n\t\t\tf:close()\r\n\t\tend\r\n\tend\r\n\t\r\n\t-- /// MODIFICATION \\\\\\\r\n\t-- FUNCTIONS\r\n\t-- MODIF (Ivan Simko) - removed ! ->   table.sort(tableOfFunctions,functionlister.comparator)\r\n\tlocal functions = { name = \"index.html\" }\r\n\tlocal f = lfs.open(options.output_dir..\"functionlist/index.html\", \"w\")\r\n\tassert(f, string.format(\"could not open functionlist/index.html for writing\"))\r\n\tio.output(f)\r\n\r\n\t--Create parameter list to make documentation (parameters represents templates)\r\n\tlocal functionsParam = {\r\n\t\tdoc = doc,\r\n\t\tfunctionList = funcTableTemplate.createFunctionTableList(globalMetrics, \"functionDefinitions\", false),\r\n\t\tdocFunctionList = funcTableTemplate.createDocumentedFunctionTableList(globalMetrics, \"functionDefinitions\", 1, false),\r\n\t\tnDocFunctionList = funcTableTemplate.createDocumentedFunctionTableList(globalMetrics, \"functionDefinitions\", 0, false)\r\n\t}\r\n\r\n\t--Adding links to templates to make documentation interactive\r\n\tfunctionsParam.functionList = addLinksToTemplate(functionsParam.functionList)\r\n\tfunctionsParam.docFunctionList = addLinksToTemplate(functionsParam.docFunctionList)\r\n\tfunctionsParam.nDocFunctionList = addLinksToTemplate(functionsParam.nDocFunctionList)\r\n\r\n\tinclude(\"indexOfFunctions.lp\", functionsParam) -- -- MODIF (Ivan Simko) - added globalMetrics\r\n\tf:close()\r\n\t\r\n\t-- METRICS\r\n\tlocal metrics = { name = \"index.html\" }\r\n\tlocal f = lfs.open(options.output_dir..\"metrics/index.html\", \"w\")\r\n\tassert(f, string.format(\"could not open metrics/index.html for writing\"))\r\n\tio.output(f)\r\n\r\n\t--Create parameter list to make documentation (parameters represents templates)\r\n\tlocal metricsParam = {\r\n\t\tdoc = doc,\r\n\t\tLOCTable = docTemplates.createLOCTable(globalMetrics.LOC, globalMetrics.fileNum, globalMetrics.moduleNum),\r\n\t\tdocMetricsTable = docTemplates.createDocMetricsTable(globalMetrics.documentMetrics),\r\n\t\thalsteadTable = docTemplates.createHalsteadTable(globalMetrics.halstead),\r\n\t\tstatementsTable = docTemplates.createStatementsTable(globalMetrics.statements),\r\n\t\tfunctionsTable = docTemplates.createFunctionsTable(globalMetrics, globalMetrics.fileNum),\r\n\t\tmoduleLenGraph = docTemplates.createModuleLenGraph(globalMetrics, false),\r\n\t\tfileLenGraph = docTemplates.createFileLenGraph(globalMetrics, false),\r\n\t\tcouplingTable = docTemplates.createCouplingTable(globalMetrics)\r\n\t}\r\n\r\n\tinclude(\"indexOfMetrics.lp\", metricsParam ) -- MODIF (Ivan Simko) - added globalMetrics\r\n\tf:close()\r\n\t-- \\\\\\ MODIFICATION ///\r\n  \r\n  -- SMELLS - Martin Nagy  \r\n\tlocal f = lfs.open(options.output_dir..\"smells/index.html\", \"w\")\r\n\tassert(f, string.format(\"could not open smells/index.html for writing\"))\r\n\tio.output(f)\r\n\r\n\t--Create parameter list to make documentation (parameters represents templates)\r\n\tlocal smellsParam = {\r\n\t\tdoc = doc,\r\n\t\tlongMethodTable = smellTemplates.createLongMethodTable(globalMetrics),\r\n\t\tcycloTable = smellTemplates.createCycloTable(globalMetrics),\r\n\t\tmanyParamsTable = smellTemplates.createManyParamsTable(globalMetrics),\r\n\t\tmoduleTables = smellTemplates.createModuleTables(globalMetrics),\r\n\t\tMITable = smellTemplates.createMITable(globalMetrics),\r\n\t\tlongLinesTable = smellTemplates.createLongLinesTable(globalMetrics),\r\n\t\ttablesWithManyFieldsTable = smellTemplates.createTablesWithManyFieldsTable(globalMetrics),\r\n\t\tfunctionDepthTable = smellTemplates.createFunctionDepthTable(globalMetrics),\r\n\t\ttableDepthTable = smellTemplates.createTableDepthTable(globalMetrics),\r\n\t\tupvaluesTable = smellTemplates.createUpvaluesTable(globalMetrics),\r\n\r\n\t\tlongMethodGraph = smellTemplates.createLongMethodGraph(globalMetrics, false),\r\n\t\tcycloGraph = smellTemplates.createCycloGraph(globalMetrics, false),\r\n\t\tmanyParamsGraph = smellTemplates.createManyParamsGraph(globalMetrics, false),\r\n\t\tlongLinesGraph = smellTemplates.createLongLinesGraph(globalMetrics, false),\r\n\t\ttablesWithManyFieldsGraph = smellTemplates.createTablesWithManyFieldsGraph(globalMetrics, false),\r\n\t\tfunctionDepthGraph = smellTemplates.createFunctionDepthGraph(globalMetrics, false),\r\n\t\ttableDepthGraph = smellTemplates.createTableDepthGraph(globalMetrics, false),\r\n\t\tupvaluesGraph = smellTemplates.createUpvaluesGraph(globalMetrics, false),\r\n\t}\r\n\r\n\tinclude(\"indexOfSmells.lp\", smellsParam ) \r\n\tf:close()\r\n  -- END OF SMELLS\r\n\r\n\r\n\t-- /// MODIFICATION \\\\\\\r\n\t-- TABLES\r\n\tlocal tables = { name = \"index.html\" }\r\n\tlocal f = lfs.open(options.output_dir..\"tablelist/index.html\", \"w\")\r\n\tassert(f, string.format(\"could not open tablelist/index.html for writing\"))\r\n\tio.output(f)\r\n\r\n\t--Create parameter list to make documentation (parameters represents templates)\r\n\tlocal tableParam = {\r\n\t\tdoc = doc,\r\n\t\ttableList = funcTableTemplate.createFunctionTableList(globalMetrics, \"tables\", false),\r\n\t\tdocTableList = funcTableTemplate.createDocumentedFunctionTableList(globalMetrics, \"tables\", 1, false),\r\n\t\tnDocTableList = funcTableTemplate.createDocumentedFunctionTableList(globalMetrics, \"tables\", 0, false)\r\n\t} \r\n\r\n\ttableParam.tableList = addLinksToTemplate(tableParam.tableList)\r\n\ttableParam.docTableList = addLinksToTemplate(tableParam.docTableList)\r\n\ttableParam.nDocTableList = addLinksToTemplate(tableParam.nDocTableList)\r\n\r\n\tinclude(\"indexOfTables.lp\", tableParam)\r\n\tf:close()\r\n\t-- \\\\\\ MODIFICATION ///\r\n\r\n--KOSA\r\n\t-- custom comments\r\n\tlocal tables = { name = \"customs.html\" }\r\n\tlocal f = lfs.open(options.output_dir..\"customcommentlist/customs.html\", \"w\")\r\n\tassert(f, string.format(\"could not open customcommentlist/customs.html for writing\"))\r\n\tio.output(f)\r\n\r\n\t--Create parameter list to make documentation (parameters represents templates)\r\n\tlocal customParam = {\r\n\t\tdoc = doc,\r\n\t\ttodoComments = luadocerTemplates.createCustomCommentList(doc, \"todo\", file_link),\r\n\t\tbugComments = luadocerTemplates.createCustomCommentList(doc, \"bug\", file_link),\r\n\t\tquestionComments = luadocerTemplates.createCustomCommentList(doc, \"question\", file_link),\r\n\t\tfixmeComments = luadocerTemplates.createCustomCommentList(doc, \"fixme\", file_link),\r\n\t\tinfoComments = luadocerTemplates.createCustomCommentList(doc, \"info\", file_link),\r\n\t\thowComments = luadocerTemplates.createCustomCommentList(doc, \"how\", file_link)\r\n\t}\r\n\r\n\tinclude(\"custom.lp\", customParam)\r\n\tf:close()\r\n\t-- \\\\\\ MODIFICATION ///\r\n\r\n--KARASEK\r\n\t--CHECK\r\n\tlocal checks = { name = \"index.html\" }\r\n\tlocal f = lfs.open(options.output_dir..\"check/index.html\", \"w\")\r\n\tassert(f, string.format(\"could not open diagram/index.html for writing\"))\r\n\tio.output(f)\r\n\tinclude(\"indexOfChecks.lp\", { doc = doc, checks = analysis_results} ) -- -- MODIF (Ivan Simko) - added globalMetrics\r\n\tf:close()\r\n\r\n\t--DIAGRAMS\r\n\tlocal diagrams = { name = \"index.html\" }\r\n\tlocal f = lfs.open(options.output_dir..\"diagram/index.html\", \"w\")\r\n\tassert(f, string.format(\"could not open diagram/index.html for writing\"))\r\n\tio.output(f)\r\n\r\n\t--Create parameter list to make documentation (parameters represents templates)\r\n\tlocal diagramParam = {\r\n\t\tdoc = doc,\r\n\t\tglobalDiagram = luadocerTemplates.createUMLDiagrams(diagram_results, true, link),\r\n\t\tfunctionDiagram = luadocerTemplates.createUMLDiagrams(diagram_results, false, link)\r\n\t}\r\n\r\n\tinclude(\"indexOfDiagrams.lp\", diagramParam ) -- -- MODIF (Ivan Simko) - added globalMetrics\r\n\tf:close()\r\n\r\n\r\n\t-- copy extra files\r\n\tfile_copy(\"literate.js\") --MODIFIED BY: Michal Juranyi\r\n\tfile_copy(\"luadoc.css\");\r\n\tfile_copy(\"jquery.js\");\r\n\tfile_copy(\"prettyprint.js\");\r\n\tfile_copy(\"menu.js\");\r\n\tfile_copy(\"highcharts.js\")\r\n\tfile_copy(\"jquery-ui.min.js\")\r\n\tfile_copy(\"indexOfFunctions.css\")\r\n\tfile_copy(\"jquery-ui-1.8.11.custom.css\")\t\r\n\tfile_copy(\"fileIcon.jpg\")\t\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function main (files, options)\r\n\tlogger = util.loadlogengine(options)\r\n\r\n\t-- load config file\r\n\tif options.config ~= nil then\r\n\t\t-- load specified config file\r\n\t\tdofile(options.config)\r\n\telse\r\n\t\t-- load default config file\r\n\t\trequire(\"luadocer.config\")\r\n\tend\r\n\t\r\n\tlocal taglet = require(options.taglet)\r\n\tlocal doclet = require(options.doclet)\r\n\r\n\t-- analyze input\r\n\ttaglet.options = options\r\n\ttaglet.logger = logger\r\n\tlocal doc = taglet.start(files)\r\n\r\n\t-- generate output\r\n\tdoclet.options = options\r\n\tdoclet.logger = logger\r\n\t-- Viliam Kubis 19.04.2011 - added the charset option\r\n\tif(not options.charset) then\r\n\t\toptions.charset=\"UTF-8\";\r\n\tend\r\n\tdoc.charset=options.charset;\r\n\t-- Viliam Kubis 19.04.2011 - added the project name option\r\n\tdoc.project_name=options.project_name;\r\n\t\r\n\tdoclet.start(doc)\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "local function see (tag, block, text)\r\n\t-- see is always an array\r\n\tblock[tag] = block[tag] or {}\r\n\t\r\n\t-- remove trailing \".\"\r\n\ttext = string.gsub(text, \"(.*)%.$\", \"%1\")\r\n\t\r\n\tlocal s = util.split(\"%s*,%s*\", text)\t\t\t\r\n\t\r\n\ttable.foreachi(s, function (_, v)\r\n\t\ttable.insert(block[tag], v)\r\n\tend)\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local function check_function (line)\r\n\tline = util.trim(line)\r\n\r\n\tlocal info = table.foreachi(function_patterns, function (_, pattern)\r\n\t\tlocal r, _, l, id, param = string.find(line, pattern)\r\n\t\tif r ~= nil then\r\n\t\t\treturn {\r\n\t\t\t\tname = id,\r\n\t\t\t\tprivate = (l == \"local\"),\r\n\t\t\t\tparam = util.split(\"%s*,%s*\", param),\r\n\t\t\t}\r\n\t\tend\r\n\tend)\r\n\r\n\t-- TODO: remove these assert's?\r\n\tif info ~= nil then\r\n\t\tassert(info.name, \"function name undefined\")\r\n\t\tassert(info.param, string.format(\"undefined parameter list for function `%s'\", info.name))\r\n\tend\r\n\r\n\treturn info\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "local function check_module (line, currentmodule)\r\n\tline = util.trim(line)\r\n\t\r\n\t-- module\"x.y\"\r\n\t-- module'x.y'\r\n\t-- module[[x.y]]\r\n\t-- module(\"x.y\")\r\n\t-- module('x.y')\r\n\t-- module([[x.y]])\r\n\t-- module(...)\r\n\r\n\tlocal r, _, modulename = string.find(line, \"^module%s*[%s\\\"'(%[]+([^,\\\"')%]]+)\")\r\n\tif r then\r\n\t\t-- found module definition\r\n\t\tlogger:debug(string.format(\"found module `%s'\", modulename))\r\n\t\treturn modulename\r\n\tend\r\n\treturn currentmodule\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "local function parse_comment (block, first_line)\r\n\t-- get the first non-empty line of code\r\n\tlocal code = table.foreachi(block.code, function(_, line)\r\n\t\tif not util.line_empty(line) then\r\n\t\t\t-- `local' declarations are ignored in two cases:\r\n\t\t\t-- when the `nolocals' option is turned on; and\r\n\t\t\t-- when the first block of a file is parsed (this is\r\n\t\t\t--\tnecessary to avoid confusion between the top\r\n\t\t\t--\tlocal declarations and the `module' definition.\r\n\t\t\tif (options.nolocals or first_line) and line:find\"^%s*local\" then\r\n\t\t\t\treturn\r\n\t\t\tend\r\n\t\t\treturn line\r\n\t\tend\r\n\tend)\r\n\t\r\n\t-- parse first line of code\r\n\tif code ~= nil then\r\n\t\tlocal func_info = check_function(code)\r\n\t\tlocal module_name = check_module(code)\r\n\t\tif func_info then\r\n\t\t\tblock.class = \"function\"\r\n\t\t\tblock.name = func_info.name\r\n\t\t\tblock.param = func_info.param\r\n\t\t\tblock.private = func_info.private\r\n\t\telseif module_name then\r\n\t\t\tblock.class = \"module\"\r\n\t\t\tblock.name = module_name\r\n\t\t\tblock.param = {}\r\n\t\telse\r\n\t\t\tblock.param = {}\r\n\t\tend\r\n\telse\r\n\t\t-- TODO: comment without any code. Does this means we are dealing\r\n\t\t-- with a file comment?\r\n\tend\r\n\r\n\t-- parse @ tags\r\n\tlocal currenttag = \"description\"\r\n\tlocal currenttext\r\n\tlocal expdone=false\r\n\ttable.foreachi(block.comment, function (_, line)\r\n\tlocal expdone=false\t\r\n\t\tlocal r, style, tag, text,extra = luacomments_wrapper(line)\r\n\t\tif(style==\"explua\")then\r\n\t\t\tif(tag==\"table\")then\r\n\t\t\t\tcurrenttag=\"class\"\r\n\t\t\t\tcurrenttext=\"table\"\r\n\t\t\t\ttags.handle(currenttag,block,currenttext)\r\n\t\t\t\tcurrenttag=\"name\"\r\n\t\t\t\tcurrenttext=\"tabulka\"\r\n\t\t\t\ttags.handle(currenttag,block,currenttext)\r\n\t\t\t\tcurrenttag=\"description\"\r\n\t\t\t\tcurrenttext=extra\r\n\t\t\t\ttags.handle(currenttag,block,currenttext)\r\n\t\t\t\texpdone=true\r\n\t\t\telseif(tag==\"module\")then\r\n\t\t\t\tcurrenttag=\"class\"\r\n\t\t\t\tcurrenttext=\"module\"\r\n\t\t\t\ttags.handle(currenttag,block,currenttext)\r\n\t\t\t\tcurrenttag=\"name\"\r\n\t\t\t\tcurrenttext=text\r\n\t\t\t\ttags.handle(currenttag,block,currenttext)\r\n\t\t\t\tcurrenttag=\"description\"\r\n\t\t\t\tcurrenttext=extra\r\n\t\t\t\ttags.handle(currenttag,block,currenttext)\r\n\t\t\t\texpdone=true\r\n\t\t\telseif(tag==\"param\" )then\r\n\t\t\t\tif(not block.types)then block.types={} end\r\n\t\t\t\tlocal _,_,pname=string.find(text,\"^([_%w%.]+)\")\r\n\t\t\t\tif(extra and extra~=\"\")then\r\n\t\t\t\t\tblock.types[pname]={}\r\n\t\t\t\t\tfor k,v in pairs(extra) do\r\n\t\t\t\t\t\ttable.insert(block.types[pname],v)\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\telseif(tag==\"return\" )then\r\n\t\t\t\tif(not block.rettypes)then block.rettypes={} end\r\n\t\t\t\tfor k,v in pairs(extra) do\r\n\t\t\t\t\ttable.insert(block.rettypes,v)\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\t\tif(not expdone)then\r\n\t\t\tif r ~= nil then\r\n\t\t\t\t-- found new tag, add previous one, and start a new one\r\n\t\t\t\t-- TODO: what to do with invalid tags? issue an error? or log a warning?\r\n\t\t\t\ttags.handle(currenttag, block, currenttext)\r\n\t\t\t\t\r\n\t\t\t\tcurrenttag = tag\r\n\t\t\t\tcurrenttext = text\r\n\t\t\telse\r\n\t\t\t\tif(not text) then\r\n\t\t\t\t\ttext=\"\"\r\n\t\t\t\tend\r\n\t\t\t\tcurrenttext = util.concat(currenttext, text)\r\n\t\t\t\tassert(string.sub(currenttext, 1, 1) ~= \" \", string.format(\"`%s', `%s'\", currenttext, text))\r\n\t\t\tend \r\n\t\tend\r\n\r\n\tend)\r\n\ttags.handle(currenttag, block, currenttext)\r\n\t-- extracts summary information from the description\r\n\tblock.summary = parse_summary(block.description)\r\n\tassert(string.sub(block.description, 1, 1) ~= \" \", string.format(\"`%s'\", block.description))\r\n\t\r\n\treturn block\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function parse_file (filepath, doc)\r\n\tlocal blocks = {}\r\n\tlocal modulename = nil\r\n\t\r\n\t-- read each line\r\n\tlocal f = io.open(filepath, \"r\")\r\n\tlocal i = 1\r\n\tlocal line = f:read()\r\n\tlocal first = true\r\n\twhile line ~= nil do\r\n\r\n\t\tif string.find(line, \"^[\\t ]*%-%-%-\") then\r\n\t\t\t-- reached a luadoc block\r\n\t\t\tlocal block\r\n\t\t\tline, block, modulename = parse_block(f, line, modulename, first)\r\n\t\t\ttable.insert(blocks, block)\r\n\t\telse\r\n\t\t\t-- look for a module definition\r\n\t\t\tmodulename = check_module(line, modulename)\r\n\t\t\t\r\n\t\t\t-- TODO: keep beginning of file somewhere\r\n\t\t\t\r\n\t\t\tline = f:read()\r\n\t\tend\r\n\t\tfirst = false\r\n\t\ti = i + 1\r\n\tend\r\n\tf:close()\r\n\t-- store blocks in file hierarchy\r\n\tassert(doc.files[filepath] == nil, string.format(\"doc for file `%s' already defined\", filepath))\r\n\ttable.insert(doc.files, filepath)\r\n\tdoc.files[filepath] = {\r\n\t\ttype = \"file\",\r\n\t\tname = filepath,\r\n\t\tdoc = blocks,\r\n--\t\tfunctions = class_iterator(blocks, \"function\"),\r\n--\t\ttables = class_iterator(blocks, \"table\"),\r\n\t}\r\n--\r\n\tlocal first = doc.files[filepath].doc[1]\r\n\tif first and modulename then\r\n\t\tdoc.files[filepath].author = first.author\r\n\t\tdoc.files[filepath].copyright = first.copyright\r\n\t\tdoc.files[filepath].description = first.description\r\n\t\tdoc.files[filepath].release = first.release\r\n\t\tdoc.files[filepath].summary = first.summary\r\n\tend\r\n\r\n\t-- if module definition is found, store in module hierarchy\r\n\tif modulename ~= nil then\r\n\t\tif modulename == \"...\" then\r\n\t\t\t\tmodulename = string.gsub (filepath, \"%.lua$\", \"\")\r\n\t\t\t\tmodulename = string.gsub (modulename, \"/\", \".\")\r\n\t\tend\r\n\t\tif doc.modules[modulename] ~= nil then\r\n\t\t\t-- module is already defined, just add the blocks\r\n\t\t\ttable.foreachi(blocks, function (_, v)\r\n\t\t\t\ttable.insert(doc.modules[modulename].doc, v)\r\n\t\t\tend)\r\n\t\telse\r\n\t\t\t-- TODO: put this in a different module\r\n\t\t\ttable.insert(doc.modules, modulename)\r\n\t\t\tdoc.modules[modulename] = {\r\n\t\t\t\ttype = \"module\",\r\n\t\t\t\tname = modulename,\r\n\t\t\t\tdoc = blocks,\r\n--\t\t\t\tfunctions = class_iterator(blocks, \"function\"),\r\n--\t\t\t\ttables = class_iterator(blocks, \"table\"),\r\n\t\t\t\tauthor = first and first.author,\r\n\t\t\t\tcopyright = first and first.copyright,\r\n\t\t\t\tdescription = \"\",\r\n\t\t\t\trelease = first and first.release,\r\n\t\t\t\tsummary = \"\",\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t-- find module description\r\n\t\t\tfor m in class_iterator(blocks, \"module\")() do\r\n\t\t\t\tdoc.modules[modulename].description = util.concat(\r\n\t\t\t\t\tdoc.modules[modulename].description, \r\n\t\t\t\t\tm.description)\r\n\t\t\t\tdoc.modules[modulename].summary = util.concat(\r\n\t\t\t\t\tdoc.modules[modulename].summary, \r\n\t\t\t\t\tm.summary)\r\n\t\t\t\tif m.author then\r\n\t\t\t\t\tdoc.modules[modulename].author = m.author\r\n\t\t\t\tend\r\n\t\t\t\tif m.copyright then\r\n\t\t\t\t\tdoc.modules[modulename].copyright = m.copyright\r\n\t\t\t\tend\r\n\t\t\t\tif m.release then\r\n\t\t\t\t\tdoc.modules[modulename].release = m.release\r\n\t\t\t\tend\r\n\t\t\t\tif m.name then\r\n\t\t\t\t\tdoc.modules[modulename].name = m.name\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tdoc.modules[modulename].description = doc.modules[modulename].description or (first and first.description) or \"\"\r\n\t\t\tdoc.modules[modulename].summary = doc.modules[modulename].summary or (first and first.summary) or \"\"\r\n\t\tend\r\n\t\t\r\n\t\t-- make functions table\r\n\t\tdoc.modules[modulename].functions = {}\r\n\t\tfor f in class_iterator(blocks, \"function\")() do\r\n\t\t\ttable.insert(doc.modules[modulename].functions, f.name)\r\n\t\t\tdoc.modules[modulename].functions[f.name] = f\r\n\t\tend\r\n\t\t\r\n\t\t-- make tables table\r\n\t\tdoc.modules[modulename].tables = {}\r\n\t\tfor t in class_iterator(blocks, \"table\")() do\r\n\t\t\ttable.insert(doc.modules[modulename].tables, t.name)\r\n\t\t\tdoc.modules[modulename].tables[t.name] = t\r\n\t\tend\r\n\tend\r\n\t\r\n\t-- make functions table\r\n\tdoc.files[filepath].functions = {}\r\n\tfor f in class_iterator(blocks, \"function\")() do\r\n\t\ttable.insert(doc.files[filepath].functions, f.name)\r\n\t\tdoc.files[filepath].functions[f.name] = f\r\n\tend\r\n\t\r\n\t-- make tables table\r\n\tdoc.files[filepath].tables = {}\r\n\tfor t in class_iterator(blocks, \"table\")() do\r\n\t\ttable.insert(doc.files[filepath].tables, t.name)\r\n\t\tdoc.files[filepath].tables[t.name] = t\r\n\tend\r\n\t\r\n\treturn doc\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "function trim (s)\r\n\treturn (string.gsub(s, \"^%s*(.-)%s*$\", \"%1\"))\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function trim_comment (s)\r\n\ts = string.gsub(s, \"%-%-+(.*)$\", \"%1\")\r\n\treturn trim(s)\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "s = string.gsub(s, \"%-%-+(.*)$\", \"%1\")",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function line_empty (line)\r\n\treturn (string.len(trim(line)) == 0)\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function concat (str1, str2)\r\n\tif str1 == nil or string.len(str1) == 0 then\r\n\t\treturn str2\r\n\telse\r\n\t\treturn str1 .. \" \" .. str2\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "if str1 == nil or string.len(str1) == 0 then\r\n\t\treturn str2\r\n\telse\r\n\t\treturn str1 .. \" \" .. str2\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function split(delim, text)\r\n\tlocal list = {}\r\n\tif string.len(text) > 0 then\r\n\t\tdelim = delim or \"\"\r\n\t\tlocal pos = 1\r\n\t\t-- if delim matches empty string then it would give an endless loop\r\n\t\tif string.find(\"\", delim, 1) and delim ~= \"\" then \r\n\t\t\terror(\"delim matches empty string!\")\r\n\t\tend\r\n\t\tlocal first, last\r\n\t\twhile 1 do\r\n\t\t\tif delim ~= \"\" then \r\n\t\t\t\tfirst, last = string.find(text, delim, pos)\r\n\t\t\telse\r\n\t\t\t\tfirst, last = string.find(text, \"%s+\", pos)\r\n\t\t\t\tif first == 1 then\r\n\t\t\t\t\tpos = last+1\r\n\t\t\t\t\tfirst, last = string.find(text, \"%s+\", pos)\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tif first then -- found?\r\n\t\t\t\ttable.insert(list, string.sub(text, pos, first-1))\r\n\t\t\t\tpos = last+1\r\n\t\t\telse\r\n\t\t\t\ttable.insert(list, string.sub(text, pos))\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\treturn list\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "local list = {}",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "if string.len(text) > 0 then\r\n\t\tdelim = delim or \"\"\r\n\t\tlocal pos = 1\r\n\t\t-- if delim matches empty string then it would give an endless loop\r\n\t\tif string.find(\"\", delim, 1) and delim ~= \"\" then \r\n\t\t\terror(\"delim matches empty string!\")\r\n\t\tend\r\n\t\tlocal first, last\r\n\t\twhile 1 do\r\n\t\t\tif delim ~= \"\" then \r\n\t\t\t\tfirst, last = string.find(text, delim, pos)\r\n\t\t\telse\r\n\t\t\t\tfirst, last = string.find(text, \"%s+\", pos)\r\n\t\t\t\tif first == 1 then\r\n\t\t\t\t\tpos = last+1\r\n\t\t\t\t\tfirst, last = string.find(text, \"%s+\", pos)\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tif first then -- found?\r\n\t\t\t\ttable.insert(list, string.sub(text, pos, first-1))\r\n\t\t\t\tpos = last+1\r\n\t\t\telse\r\n\t\t\t\ttable.insert(list, string.sub(text, pos))\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "delim = delim or \"\"",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "local pos = 1",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "if string.find(\"\", delim, 1) and delim ~= \"\" then \r\n\t\t\terror(\"delim matches empty string!\")\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "error(\"delim matches empty string!\")",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "local first, last",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "while 1 do\r\n\t\t\tif delim ~= \"\" then \r\n\t\t\t\tfirst, last = string.find(text, delim, pos)\r\n\t\t\telse\r\n\t\t\t\tfirst, last = string.find(text, \"%s+\", pos)\r\n\t\t\t\tif first == 1 then\r\n\t\t\t\t\tpos = last+1\r\n\t\t\t\t\tfirst, last = string.find(text, \"%s+\", pos)\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tif first then -- found?\r\n\t\t\t\ttable.insert(list, string.sub(text, pos, first-1))\r\n\t\t\t\tpos = last+1\r\n\t\t\telse\r\n\t\t\t\ttable.insert(list, string.sub(text, pos))\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:while"
  }, {
    "id": 30,
    "text": "if delim ~= \"\" then \r\n\t\t\t\tfirst, last = string.find(text, delim, pos)\r\n\t\t\telse\r\n\t\t\t\tfirst, last = string.find(text, \"%s+\", pos)\r\n\t\t\t\tif first == 1 then\r\n\t\t\t\t\tpos = last+1\r\n\t\t\t\t\tfirst, last = string.find(text, \"%s+\", pos)\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "first, last = string.find(text, delim, pos)",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "first, last = string.find(text, \"%s+\", pos)",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "if first == 1 then\r\n\t\t\t\t\tpos = last+1\r\n\t\t\t\t\tfirst, last = string.find(text, \"%s+\", pos)\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "pos = last+1",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "if first then -- found?\r\n\t\t\t\ttable.insert(list, string.sub(text, pos, first-1))\r\n\t\t\t\tpos = last+1\r\n\t\t\telse\r\n\t\t\t\ttable.insert(list, string.sub(text, pos))\r\n\t\t\t\tbreak\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "table.insert(list, string.sub(text, pos, first-1))",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "table.insert(list, string.sub(text, pos))",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function comment (text)\r\n\ttext = string.gsub(text, \"\\n\", \"\\n-- \")\r\n\treturn \"-- \" .. text\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "text = string.gsub(text, \"\\n\", \"\\n-- \")",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function wrap(s, w, i1, i2)\r\n\tw = w or 80\r\n\ti1 = i1 or 0\r\n\ti2 = i2 or 0\r\n\tassert(i1 < w and i2 < w, \"the indents must be less than the line width\")\r\n\ts = string.rep(\" \", i1) .. s\r\n\tlocal lstart, len = 1, string.len(s)\r\n\twhile len - lstart > w do\r\n\t\tlocal i = lstart + w\r\n\t\twhile i > lstart and string.sub(s, i, i) ~= \" \" do i = i - 1 end\r\n\t\tlocal j = i\r\n\t\twhile j > lstart and string.sub(s, j, j) == \" \" do j = j - 1 end\r\n\t\ts = string.sub(s, 1, j) .. \"\\n\" .. string.rep(\" \", i2) ..\r\n\t\t\tstring.sub(s, i + 1, -1)\r\n\t\tlocal change = i2 + 1 - (i - j)\r\n\t\tlstart = j + change\r\n\t\tlen = len + change\r\n\tend\r\n\treturn s\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "w = w or 80",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "i1 = i1 or 0",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "i2 = i2 or 0",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "assert(i1 < w and i2 < w, \"the indents must be less than the line width\")",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "s = string.rep(\" \", i1) .. s",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "local lstart, len = 1, string.len(s)",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "while len - lstart > w do\r\n\t\tlocal i = lstart + w\r\n\t\twhile i > lstart and string.sub(s, i, i) ~= \" \" do i = i - 1 end\r\n\t\tlocal j = i\r\n\t\twhile j > lstart and string.sub(s, j, j) == \" \" do j = j - 1 end\r\n\t\ts = string.sub(s, 1, j) .. \"\\n\" .. string.rep(\" \", i2) ..\r\n\t\t\tstring.sub(s, i + 1, -1)\r\n\t\tlocal change = i2 + 1 - (i - j)\r\n\t\tlstart = j + change\r\n\t\tlen = len + change\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 50,
    "text": "local i = lstart + w",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "while i > lstart and string.sub(s, i, i) ~= \" \" do i = i - 1 end",
    "type": "statement:while"
  }, {
    "id": 52,
    "text": "i = i - 1",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "local j = i",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "while j > lstart and string.sub(s, j, j) == \" \" do j = j - 1 end",
    "type": "statement:while"
  }, {
    "id": 55,
    "text": "j = j - 1",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "s = string.sub(s, 1, j) .. \"\\n\" .. string.rep(\" \", i2) ..\r\n\t\t\tstring.sub(s, i + 1, -1)",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "local change = i2 + 1 - (i - j)",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "lstart = j + change",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "len = len + change",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function lfs.open (filename, mode)\r\n\tlocal f = io.open(filename, mode)\r\n\tif f == nil then\r\n\t\tfilename = string.gsub(filename, \"\\\\\", \"/\")\r\n\t\tlocal dir = \"\"\r\n\t\tfor d in string.gfind(filename, \".-/\") do\r\n\t\t\tdir = dir .. d\r\n\t\t\tlfs.mkdir(dir)\r\n\t\tend\r\n\t\tf = io.open(filename, mode)\r\n\tend\r\n\treturn f\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "local f = io.open(filename, mode)",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "if f == nil then\r\n\t\tfilename = string.gsub(filename, \"\\\\\", \"/\")\r\n\t\tlocal dir = \"\"\r\n\t\tfor d in string.gfind(filename, \".-/\") do\r\n\t\t\tdir = dir .. d\r\n\t\t\tlfs.mkdir(dir)\r\n\t\tend\r\n\t\tf = io.open(filename, mode)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "filename = string.gsub(filename, \"\\\\\", \"/\")",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "local dir = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "for d in string.gfind(filename, \".-/\") do\r\n\t\t\tdir = dir .. d\r\n\t\t\tlfs.mkdir(dir)\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 67,
    "text": "dir = dir .. d",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "lfs.mkdir(dir)",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "f = io.open(filename, mode)",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "function loadlogengine(options)\r\n\tlocal logenabled = pcall(function()\r\n\t\trequire \"logging\"\r\n\t\trequire \"logging.console\"\r\n\tend)\r\n\t\r\n\tlocal logging = logenabled and logging\r\n\t\r\n\tif logenabled then\r\n\t\tif options.filelog then\r\n\t\t\tlogger = logging.file(\"luadocer.log\") -- use this to get a file log\r\n\t\telse\r\n\t\t\tlogger = logging.console(\"[%level] %message\\n\")\r\n\t\tend\r\n\t\r\n\t\tif options.verbose then\r\n\t\t\tlogger:setLevel(logging.INFO)\r\n\t\telse\r\n\t\t\tlogger:setLevel(logging.WARN)\r\n\t\tend\r\n\t\t\r\n\telse\r\n\t\tnoop = {__index=function(...)\r\n\t\t\treturn function(...)\r\n\t\t\t\t-- noop\r\n\t\t\tend\r\n\t\tend}\r\n\t\t\r\n\t\tlogger = {} \r\n\t\tsetmetatable(logger, noop)\r\n\tend\r\n\t\r\n\treturn logger\r\nend",
    "type": "function"
  }, {
    "id": 72,
    "text": "local logenabled = pcall(function()\r\n\t\trequire \"logging\"\r\n\t\trequire \"logging.console\"\r\n\tend)",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "require \"logging\"",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "require \"logging.console\"",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "local logging = logenabled and logging",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "if logenabled then\r\n\t\tif options.filelog then\r\n\t\t\tlogger = logging.file(\"luadocer.log\") -- use this to get a file log\r\n\t\telse\r\n\t\t\tlogger = logging.console(\"[%level] %message\\n\")\r\n\t\tend\r\n\t\r\n\t\tif options.verbose then\r\n\t\t\tlogger:setLevel(logging.INFO)\r\n\t\telse\r\n\t\t\tlogger:setLevel(logging.WARN)\r\n\t\tend\r\n\t\t\r\n\telse\r\n\t\tnoop = {__index=function(...)\r\n\t\t\treturn function(...)\r\n\t\t\t\t-- noop\r\n\t\t\tend\r\n\t\tend}\r\n\t\t\r\n\t\tlogger = {} \r\n\t\tsetmetatable(logger, noop)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "if options.filelog then\r\n\t\t\tlogger = logging.file(\"luadocer.log\") -- use this to get a file log\r\n\t\telse\r\n\t\t\tlogger = logging.console(\"[%level] %message\\n\")\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "logger = logging.file(\"luadocer.log\")",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "logger = logging.console(\"[%level] %message\\n\")",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "if options.verbose then\r\n\t\t\tlogger:setLevel(logging.INFO)\r\n\t\telse\r\n\t\t\tlogger:setLevel(logging.WARN)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "logger:setLevel(logging.INFO)",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "logger:setLevel(logging.WARN)",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "noop = {__index=function(...)\r\n\t\t\treturn function(...)\r\n\t\t\t\t-- noop\r\n\t\t\tend\r\n\t\tend}",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "logger = {}",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "setmetatable(logger, noop)",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "local function isrelative(p)\r\n\tif(p:match(\".\")~=\"/\" or p:match(\"/%.%.?/\")) then\r\n\t\treturn true\r\n\tend\r\n\treturn false\r\nend",
    "type": "function"
  }, {
    "id": 88,
    "text": "if(p:match(\".\")~=\"/\" or p:match(\"/%.%.?/\")) then\r\n\t\treturn true\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 89,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 90,
    "text": "function getabsolutepath(n)\t\t\t\r\n\tlocal original_path = lfs.currentdir()\r\n\r\n\tlocal real_path=''\r\n\tif(isrelative(n)) then\r\n\t\t\r\n\t\tif(n:match(\".\")~=\"/\") then \t\t--prvy znak nie je / => path nie je absolutna\r\n\t\t\treal_path = lfs.currentdir()\r\n\t\tend\r\n\r\n\t\t\r\n\t\tfor v in string.gmatch(n,\"[^/]+\") do\r\n\t\t\tif(v ==\"..\") then \r\n\t\t\t\treal_path = real_path .. \"/\\.\\.\"\r\n \t\t\t\tlfs.chdir(real_path)\t\t\t\t\r\n\t\t\t\treal_path =lfs.currentdir()\r\n\t\t\telseif(v~=\".\") then\r\n\t\t\t\treal_path = real_path .. \"/\" ..  v\r\n\t\t\tend\r\n\r\n\t\tend\r\n\tlfs.chdir(original_path)\r\n\r\n\t\treturn (string.gsub(real_path,\"[/]+\",'/'))\t\t--replace multi-slahes with one simple slash. like : /////    ->  /\r\n\tend\r\n\tlfs.chdir(original_path)\t\r\n\treturn (string.gsub(n,\"[/]+\",'/'))\r\nend",
    "type": "function"
  }, {
    "id": 91,
    "text": "local original_path = lfs.currentdir()",
    "type": "statement:localassign"
  }, {
    "id": 92,
    "text": "local real_path=''",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "if(isrelative(n)) then\r\n\t\t\r\n\t\tif(n:match(\".\")~=\"/\") then \t\t--prvy znak nie je / => path nie je absolutna\r\n\t\t\treal_path = lfs.currentdir()\r\n\t\tend\r\n\r\n\t\t\r\n\t\tfor v in string.gmatch(n,\"[^/]+\") do\r\n\t\t\tif(v ==\"..\") then \r\n\t\t\t\treal_path = real_path .. \"/\\.\\.\"\r\n \t\t\t\tlfs.chdir(real_path)\t\t\t\t\r\n\t\t\t\treal_path =lfs.currentdir()\r\n\t\t\telseif(v~=\".\") then\r\n\t\t\t\treal_path = real_path .. \"/\" ..  v\r\n\t\t\tend\r\n\r\n\t\tend\r\n\tlfs.chdir(original_path)\r\n\r\n\t\treturn (string.gsub(real_path,\"[/]+\",'/'))\t\t--replace multi-slahes with one simple slash. like : /////    ->  /\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 94,
    "text": "if(n:match(\".\")~=\"/\") then \t\t--prvy znak nie je / => path nie je absolutna\r\n\t\t\treal_path = lfs.currentdir()\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 95,
    "text": "real_path = lfs.currentdir()",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "for v in string.gmatch(n,\"[^/]+\") do\r\n\t\t\tif(v ==\"..\") then \r\n\t\t\t\treal_path = real_path .. \"/\\.\\.\"\r\n \t\t\t\tlfs.chdir(real_path)\t\t\t\t\r\n\t\t\t\treal_path =lfs.currentdir()\r\n\t\t\telseif(v~=\".\") then\r\n\t\t\t\treal_path = real_path .. \"/\" ..  v\r\n\t\t\tend\r\n\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 97,
    "text": "if(v ==\"..\") then \r\n\t\t\t\treal_path = real_path .. \"/\\.\\.\"\r\n \t\t\t\tlfs.chdir(real_path)\t\t\t\t\r\n\t\t\t\treal_path =lfs.currentdir()\r\n\t\t\telseif(v~=\".\") then\r\n\t\t\t\treal_path = real_path .. \"/\" ..  v\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 98,
    "text": "real_path = real_path .. \"/\\.\\.\"",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "lfs.chdir(real_path)",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "real_path =lfs.currentdir()",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "real_path = real_path .. \"/\" ..  v",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "lfs.chdir(original_path)",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 104,
    "text": "function()\r\n\t\trequire \"logging\"\r\n\t\trequire \"logging.console\"\r\n\tend",
    "type": "function"
  }, {
    "id": 105,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 106,
    "text": "function(...)\r\n\t\t\t\t-- noop\r\n\t\t\tend",
    "type": "function"
  }, {
    "id": 107,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 108,
    "text": "function(...)\r\n\t\t\treturn function(...)\r\n\t\t\t\t-- noop\r\n\t\t\tend\r\n\t\tend",
    "type": "function"
  }, {
    "id": 109,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 110,
    "text": "",
    "type": "function container"
  }, {
    "id": 111,
    "text": "local function process_options (arg)\r\n\tlocal files = {}\r\n\tlocal options = require \"luadocer.config\"\r\n\tlocal i = 1\r\n\twhile i < #arg or i == #arg do\r\n\t\tlocal argi = arg[i]\r\n\t\tif string.sub (argi, 1, 1) ~= '-' then\r\n--KOSA\r\n\t\t\ttable.insert (files, util.getabsolutepath(argi))\r\n\t\telse\r\n\t\t\tlocal opt = string.sub (argi, 2)\r\n\t\t\tif string.sub (opt, 1, 1) == '-' then\r\n\t\t\t\topt = string.gsub (opt, \"%-\", \"\")\r\n\t\t\tend\r\n\t\t\tif OPTIONS[opt] then\r\n\t\t\t\tif OPTIONS[opt] (arg, i, options) then\r\n\t\t\t\t\ti = i + 1\r\n\t\t\t\tend\r\n\t\t\telse\r\n\t\t\t\toptions[opt] = 1\r\n\t\t\tend\r\n\t\tend\r\n\t\ti = i+1\r\n\tend\r\n\toptions.files = files\r\n\treturn files, options\r\nend",
    "type": "function"
  }, {
    "id": 112,
    "text": "currentdir",
    "type": "global function"
  }, {
    "id": 113,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 114,
    "text": "find",
    "type": "global function"
  }, {
    "id": 115,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 116,
    "text": "chdir",
    "type": "global function"
  }, {
    "id": 117,
    "text": "gfind",
    "type": "global function"
  }, {
    "id": 118,
    "text": "mkdir",
    "type": "global function"
  }, {
    "id": 119,
    "text": "open",
    "type": "global function"
  }, {
    "id": 120,
    "text": "console",
    "type": "global function"
  }, {
    "id": 121,
    "text": "file",
    "type": "global function"
  }, {
    "id": 122,
    "text": "len",
    "type": "global function"
  }, {
    "id": 123,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 124,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 125,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 126,
    "text": "module",
    "type": "global function"
  }, {
    "id": 127,
    "text": "gmatch",
    "type": "global function"
  }, {
    "id": 128,
    "text": "error",
    "type": "global function"
  }, {
    "id": 129,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 130,
    "text": "require",
    "type": "global function"
  }, {
    "id": 131,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 132,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 133,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 134,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 135,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 136,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 137,
    "text": "",
    "type": "variable container"
  }, {
    "id": 138,
    "text": "",
    "type": "require container"
  }, {
    "id": 139,
    "text": "",
    "type": "local variable"
  }, {
    "id": 140,
    "text": "",
    "type": "n/a"
  }, {
    "id": 141,
    "text": "",
    "type": "local variable"
  }, {
    "id": 142,
    "text": "",
    "type": "n/a"
  }, {
    "id": 143,
    "text": "",
    "type": "local variable"
  }, {
    "id": 144,
    "text": "",
    "type": "n/a"
  }, {
    "id": 145,
    "text": "",
    "type": "local variable"
  }, {
    "id": 146,
    "text": "",
    "type": "n/a"
  }, {
    "id": 147,
    "text": "",
    "type": "local variable"
  }, {
    "id": 148,
    "text": "",
    "type": "n/a"
  }, {
    "id": 149,
    "text": "",
    "type": "local variable"
  }, {
    "id": 150,
    "text": "",
    "type": "n/a"
  }, {
    "id": 151,
    "text": "",
    "type": "local variable"
  }, {
    "id": 152,
    "text": "",
    "type": "n/a"
  }, {
    "id": 153,
    "text": "",
    "type": "local variable"
  }, {
    "id": 154,
    "text": "",
    "type": "n/a"
  }, {
    "id": 155,
    "text": "",
    "type": "local variable"
  }, {
    "id": 156,
    "text": "",
    "type": "n/a"
  }, {
    "id": 157,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 158,
    "text": "(lfs)",
    "type": "module"
  }, {
    "id": 159,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 160,
    "text": "(re)",
    "type": "module"
  } ]
}