{
  "_filename": "luadocer.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luadocer/src/luadocer.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 13,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 19,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 17,
    "label": "has",
    "to": 28
  }, {
    "from": 13,
    "label": "has",
    "to": 29
  }, {
    "from": 13,
    "label": "has",
    "to": 30
  }, {
    "from": 13,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 32,
    "label": "has",
    "to": 30
  }, {
    "from": 32,
    "label": "has",
    "to": 37
  }, {
    "from": 32,
    "label": "has",
    "to": 30
  }, {
    "from": 32,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 39,
    "label": "has",
    "to": 43
  }, {
    "from": 39,
    "label": "has",
    "to": 30
  }, {
    "from": 39,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 40
  }, {
    "from": 45,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 30
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 30
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 30
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 56,
    "label": "has",
    "to": 30
  }, {
    "from": 56,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 30
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 30
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 30
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 13,
    "label": "calls",
    "to": 74
  }, {
    "from": 4,
    "label": "calls",
    "to": 70
  }, {
    "from": 13,
    "label": "calls",
    "to": 73
  }, {
    "from": 4,
    "label": "calls",
    "to": 76
  }, {
    "from": 7,
    "label": "calls",
    "to": 76
  }, {
    "from": 32,
    "label": "calls",
    "to": 75
  }, {
    "from": 32,
    "label": "calls",
    "to": 7
  }, {
    "from": 13,
    "label": "calls",
    "to": 3
  }, {
    "from": 13,
    "label": "calls",
    "to": 71
  }, {
    "from": 69,
    "label": "calls",
    "to": 32
  }, {
    "from": 69,
    "label": "calls",
    "to": 77
  }, {
    "from": 69,
    "label": "calls",
    "to": 77
  }, {
    "from": 13,
    "label": "calls",
    "to": 77
  }, {
    "from": 69,
    "label": "calls",
    "to": 72
  }, {
    "from": 69,
    "label": "calls",
    "to": 72
  }, {
    "from": 13,
    "label": "calls",
    "to": 72
  }, {
    "from": 13,
    "label": "calls",
    "to": 72
  }, {
    "from": 13,
    "label": "calls",
    "to": 72
  }, {
    "from": 32,
    "label": "calls",
    "to": 13
  }, {
    "from": 2,
    "label": "contains",
    "to": 69
  }, {
    "from": 69,
    "label": "declares",
    "to": 4
  }, {
    "from": 69,
    "label": "declares",
    "to": 7
  }, {
    "from": 69,
    "label": "declares",
    "to": 10
  }, {
    "from": 69,
    "label": "declares",
    "to": 13
  }, {
    "from": 69,
    "label": "declares",
    "to": 32
  }, {
    "from": 69,
    "label": "declares",
    "to": 39
  }, {
    "from": 69,
    "label": "declares",
    "to": 45
  }, {
    "from": 69,
    "label": "declares",
    "to": 48
  }, {
    "from": 69,
    "label": "declares",
    "to": 52
  }, {
    "from": 69,
    "label": "declares",
    "to": 56
  }, {
    "from": 69,
    "label": "declares",
    "to": 60
  }, {
    "from": 69,
    "label": "declares",
    "to": 63
  }, {
    "from": 69,
    "label": "declares",
    "to": 66
  }, {
    "from": 2,
    "label": "declares",
    "to": 75
  }, {
    "from": 78,
    "label": "requires",
    "to": 2
  }, {
    "from": 80,
    "label": "requires",
    "to": 2
  }, {
    "from": 81,
    "label": "requires",
    "to": 2
  }, {
    "from": 2,
    "label": "contains",
    "to": 82
  }, {
    "from": 2,
    "label": "contains",
    "to": 83
  }, {
    "from": 82,
    "label": "initializes",
    "to": 84
  }, {
    "from": 84,
    "label": "assigns",
    "to": 85
  }, {
    "from": 85,
    "label": "assigns",
    "to": 86
  }, {
    "from": 86,
    "label": "assigns",
    "to": 87
  }, {
    "from": 85,
    "label": "assigns",
    "to": 88
  }, {
    "from": 88,
    "label": "assigns",
    "to": 89
  }, {
    "from": 85,
    "label": "assigns",
    "to": 90
  }, {
    "from": 90,
    "label": "assigns",
    "to": 91
  }, {
    "from": 85,
    "label": "assigns",
    "to": 92
  }, {
    "from": 92,
    "label": "assigns",
    "to": 93
  }, {
    "from": 85,
    "label": "assigns",
    "to": 94
  }, {
    "from": 94,
    "label": "assigns",
    "to": 95
  }, {
    "from": 85,
    "label": "assigns",
    "to": 96
  }, {
    "from": 96,
    "label": "assigns",
    "to": 97
  }, {
    "from": 85,
    "label": "assigns",
    "to": 98
  }, {
    "from": 98,
    "label": "assigns",
    "to": 99
  }, {
    "from": 85,
    "label": "assigns",
    "to": 100
  }, {
    "from": 100,
    "label": "assigns",
    "to": 101
  }, {
    "from": 85,
    "label": "assigns",
    "to": 102
  }, {
    "from": 102,
    "label": "assigns",
    "to": 103
  }, {
    "from": 85,
    "label": "assigns",
    "to": 104
  }, {
    "from": 104,
    "label": "assigns",
    "to": 105
  }, {
    "from": 85,
    "label": "assigns",
    "to": 106
  }, {
    "from": 106,
    "label": "assigns",
    "to": 107
  }, {
    "from": 85,
    "label": "assigns",
    "to": 108
  }, {
    "from": 108,
    "label": "assigns",
    "to": 109
  }, {
    "from": 85,
    "label": "assigns",
    "to": 110
  }, {
    "from": 110,
    "label": "assigns",
    "to": 111
  }, {
    "from": 85,
    "label": "assigns",
    "to": 112
  }, {
    "from": 112,
    "label": "assigns",
    "to": 113
  }, {
    "from": 83,
    "label": "initializes",
    "to": 114
  }, {
    "from": 114,
    "label": "requires",
    "to": 115
  }, {
    "from": 83,
    "label": "initializes",
    "to": 116
  }, {
    "from": 116,
    "label": "requires",
    "to": 1
  }, {
    "from": 83,
    "label": "initializes",
    "to": 79
  }, {
    "from": 5,
    "label": "hasArgument",
    "to": 87
  }, {
    "from": 5,
    "label": "hasArgument",
    "to": 89
  }, {
    "from": 5,
    "label": "hasArgument",
    "to": 91
  }, {
    "from": 5,
    "label": "hasArgument",
    "to": 93
  }, {
    "from": 5,
    "label": "hasArgument",
    "to": 95
  }, {
    "from": 5,
    "label": "hasArgument",
    "to": 97
  }, {
    "from": 5,
    "label": "hasArgument",
    "to": 111
  }, {
    "from": 5,
    "label": "hasArgument",
    "to": 113
  }, {
    "from": 8,
    "label": "hasArgument",
    "to": 87
  }, {
    "from": 8,
    "label": "hasArgument",
    "to": 89
  }, {
    "from": 8,
    "label": "hasArgument",
    "to": 91
  }, {
    "from": 8,
    "label": "hasArgument",
    "to": 93
  }, {
    "from": 8,
    "label": "hasArgument",
    "to": 95
  }, {
    "from": 8,
    "label": "hasArgument",
    "to": 97
  }, {
    "from": 8,
    "label": "hasArgument",
    "to": 111
  }, {
    "from": 8,
    "label": "hasArgument",
    "to": 113
  }, {
    "from": 20,
    "label": "hasArgument",
    "to": 87
  }, {
    "from": 20,
    "label": "hasArgument",
    "to": 89
  }, {
    "from": 20,
    "label": "hasArgument",
    "to": 91
  }, {
    "from": 20,
    "label": "hasArgument",
    "to": 93
  }, {
    "from": 20,
    "label": "hasArgument",
    "to": 95
  }, {
    "from": 20,
    "label": "hasArgument",
    "to": 97
  }, {
    "from": 20,
    "label": "hasArgument",
    "to": 111
  }, {
    "from": 20,
    "label": "hasArgument",
    "to": 113
  }, {
    "from": 36,
    "label": "hasArgument",
    "to": 87
  }, {
    "from": 36,
    "label": "hasArgument",
    "to": 89
  }, {
    "from": 36,
    "label": "hasArgument",
    "to": 91
  }, {
    "from": 36,
    "label": "hasArgument",
    "to": 93
  }, {
    "from": 36,
    "label": "hasArgument",
    "to": 95
  }, {
    "from": 36,
    "label": "hasArgument",
    "to": 97
  }, {
    "from": 36,
    "label": "hasArgument",
    "to": 111
  }, {
    "from": 36,
    "label": "hasArgument",
    "to": 113
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "config",
    "type": "module"
  }, {
    "id": 2,
    "text": "luadocer",
    "type": "module"
  }, {
    "id": 3,
    "text": "function getabsolutepath(n)\t\t\t\r\n\tlocal original_path = lfs.currentdir()\r\n\r\n\tlocal real_path=''\r\n\tif(isrelative(n)) then\r\n\t\t\r\n\t\tif(n:match(\".\")~=\"/\") then \t\t--prvy znak nie je / => path nie je absolutna\r\n\t\t\treal_path = lfs.currentdir()\r\n\t\tend\r\n\r\n\t\t\r\n\t\tfor v in string.gmatch(n,\"[^/]+\") do\r\n\t\t\tif(v ==\"..\") then \r\n\t\t\t\treal_path = real_path .. \"/\\.\\.\"\r\n \t\t\t\tlfs.chdir(real_path)\t\t\t\t\r\n\t\t\t\treal_path =lfs.currentdir()\r\n\t\t\telseif(v~=\".\") then\r\n\t\t\t\treal_path = real_path .. \"/\" ..  v\r\n\t\t\tend\r\n\r\n\t\tend\r\n\tlfs.chdir(original_path)\r\n\r\n\t\treturn (string.gsub(real_path,\"[/]+\",'/'))\t\t--replace multi-slahes with one simple slash. like : /////    ->  /\r\n\tend\r\n\tlfs.chdir(original_path)\t\r\n\treturn (string.gsub(n,\"[/]+\",'/'))\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local function print_version ()\r\n\tprint (string.format(\"%s\\n%s\\n%s\", \r\n\t\tluadoc._VERSION, \r\n\t\tluadoc._DESCRIPTION, \r\n\t\tluadoc._COPYRIGHT))\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "print (string.format(\"%s\\n%s\\n%s\", \r\n\t\tluadoc._VERSION, \r\n\t\tluadoc._DESCRIPTION, \r\n\t\tluadoc._COPYRIGHT))",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "local function print_help ()\r\n\tprint (\"Usage: \"..arg[0]..[[ [options|files]\r\nGenerate documentation from files. Available options are:\r\n  -d path                      output directory path\r\n  -t path                      template directory path\r\n  -u path \t\t\tgenerate UML diagrams with PlantUML\r\n  \t\t\t\tpath to 'plantuml.jar'\r\n  -s print/write \t\tstatic analysis of source codes (require luacheck)\r\n  \t\t\t\t'print' for output print, 'write' for add analysis to documentation\r\n  -c charset                   source files encoding, defaults to UTF-8\r\n  -p project name              project name, not displayed if left empty\r\n  -h, --help                   print this help and exit\r\n      --noindexpage            do not generate global index page\r\n      --nofiles                do not generate documentation for files\r\n      --nomodules              do not generate documentation for modules\r\n      --doclet doclet_module   doclet module to generate output\r\n      --taglet taglet_module   taglet module to parse input code\r\n  -q, --quiet                  suppress all normal output\r\n  -v, --version                print version information]])\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "print (\"Usage: \"..arg[0]..[[ [options|files]\r\nGenerate documentation from files. Available options are:\r\n  -d path                      output directory path\r\n  -t path                      template directory path\r\n  -u path \t\t\tgenerate UML diagrams with PlantUML\r\n  \t\t\t\tpath to 'plantuml.jar'\r\n  -s print/write \t\tstatic analysis of source codes (require luacheck)\r\n  \t\t\t\t'print' for output print, 'write' for add analysis to documentation\r\n  -c charset                   source files encoding, defaults to UTF-8\r\n  -p project name              project name, not displayed if left empty\r\n  -h, --help                   print this help and exit\r\n      --noindexpage            do not generate global index page\r\n      --nofiles                do not generate documentation for files\r\n      --nomodules              do not generate documentation for modules\r\n      --doclet doclet_module   doclet module to generate output\r\n      --taglet taglet_module   taglet module to parse input code\r\n  -q, --quiet                  suppress all normal output\r\n  -v, --version                print version information]])",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "local function off_messages (arg, i, options)\r\n\toptions.verbose = nil\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "options.verbose = nil",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "local function process_options (arg)\r\n\tlocal files = {}\r\n\tlocal options = require \"luadocer.config\"\r\n\tlocal i = 1\r\n\twhile i < #arg or i == #arg do\r\n\t\tlocal argi = arg[i]\r\n\t\tif string.sub (argi, 1, 1) ~= '-' then\r\n--KOSA\r\n\t\t\ttable.insert (files, util.getabsolutepath(argi))\r\n\t\telse\r\n\t\t\tlocal opt = string.sub (argi, 2)\r\n\t\t\tif string.sub (opt, 1, 1) == '-' then\r\n\t\t\t\topt = string.gsub (opt, \"%-\", \"\")\r\n\t\t\tend\r\n\t\t\tif OPTIONS[opt] then\r\n\t\t\t\tif OPTIONS[opt] (arg, i, options) then\r\n\t\t\t\t\ti = i + 1\r\n\t\t\t\tend\r\n\t\t\telse\r\n\t\t\t\toptions[opt] = 1\r\n\t\t\tend\r\n\t\tend\r\n\t\ti = i+1\r\n\tend\r\n\toptions.files = files\r\n\treturn files, options\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "local files = {}",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "local options = require \"luadocer.config\"",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "local i = 1",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "while i < #arg or i == #arg do\r\n\t\tlocal argi = arg[i]\r\n\t\tif string.sub (argi, 1, 1) ~= '-' then\r\n--KOSA\r\n\t\t\ttable.insert (files, util.getabsolutepath(argi))\r\n\t\telse\r\n\t\t\tlocal opt = string.sub (argi, 2)\r\n\t\t\tif string.sub (opt, 1, 1) == '-' then\r\n\t\t\t\topt = string.gsub (opt, \"%-\", \"\")\r\n\t\t\tend\r\n\t\t\tif OPTIONS[opt] then\r\n\t\t\t\tif OPTIONS[opt] (arg, i, options) then\r\n\t\t\t\t\ti = i + 1\r\n\t\t\t\tend\r\n\t\t\telse\r\n\t\t\t\toptions[opt] = 1\r\n\t\t\tend\r\n\t\tend\r\n\t\ti = i+1\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 18,
    "text": "local argi = arg[i]",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "if string.sub (argi, 1, 1) ~= '-' then\r\n--KOSA\r\n\t\t\ttable.insert (files, util.getabsolutepath(argi))\r\n\t\telse\r\n\t\t\tlocal opt = string.sub (argi, 2)\r\n\t\t\tif string.sub (opt, 1, 1) == '-' then\r\n\t\t\t\topt = string.gsub (opt, \"%-\", \"\")\r\n\t\t\tend\r\n\t\t\tif OPTIONS[opt] then\r\n\t\t\t\tif OPTIONS[opt] (arg, i, options) then\r\n\t\t\t\t\ti = i + 1\r\n\t\t\t\tend\r\n\t\t\telse\r\n\t\t\t\toptions[opt] = 1\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "table.insert (files, util.getabsolutepath(argi))",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "local opt = string.sub (argi, 2)",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "if string.sub (opt, 1, 1) == '-' then\r\n\t\t\t\topt = string.gsub (opt, \"%-\", \"\")\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "opt = string.gsub (opt, \"%-\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "if OPTIONS[opt] then\r\n\t\t\t\tif OPTIONS[opt] (arg, i, options) then\r\n\t\t\t\t\ti = i + 1\r\n\t\t\t\tend\r\n\t\t\telse\r\n\t\t\t\toptions[opt] = 1\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "if OPTIONS[opt] (arg, i, options) then\r\n\t\t\t\t\ti = i + 1\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "options[opt] = 1",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "i = i+1",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "options.files = files",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function main (arg)\r\n\r\n\t-- TODO test\r\n\tpackage.path = \"/home/domco/Desktop/Skola/Repository/luametrics/src/?.lua;/home/domco/Desktop/Skola/Repository/luametrics/src//?/init.lua;\" .. package.path\r\n\t--package.cpath = \"/home/domco/Desktop/Skola/Repository/luametrics/src/?.so;/home/domco/Desktop/Skola/Repository/luametrics/src/?.dll;/home/domco/Desktop/Skola/Repository/luametrics/src/?/init.so\" .. package.cpath\r\n\r\n\t-- Process options\r\n\tlocal argc = #arg\r\n\tif argc < 1 then\r\n\t\tprint_help ()\r\n\t\treturn\r\n\tend\r\n\tlocal files, options = process_options (arg)\r\n\t\r\n\treturn luadocer.main(files, options)\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "package.path = \"/home/domco/Desktop/Skola/Repository/luametrics/src/?.lua;/home/domco/Desktop/Skola/Repository/luametrics/src//?/init.lua;\" .. package.path",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "local argc = #arg",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "if argc < 1 then\r\n\t\tprint_help ()\r\n\t\treturn\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "print_help ()",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "local files, options = process_options (arg)",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function (arg, i, options)\r\n\t\tlocal dir = arg[i+1]\r\n\t\tif string.sub (dir, -2) ~= \"/\" then\r\n\t\t\tdir = dir..'/'\r\n\t\tend\r\n\t\toptions.output_dir = dir\r\n\t\treturn 1\r\n\tend",
    "type": "function"
  }, {
    "id": 40,
    "text": "local dir = arg[i+1]",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "if string.sub (dir, -2) ~= \"/\" then\r\n\t\t\tdir = dir..'/'\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "dir = dir..'/'",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "options.output_dir = dir",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function (arg, i, options)\r\n\t\tlocal dir = arg[i+1]\r\n\t\tif string.sub (dir, -2) ~= \"/\" then\r\n\t\t\tdir = dir..'/'\r\n\t\tend\r\n\t\toptions.template_dir = dir\r\n\t\treturn 1\r\n\tend",
    "type": "function"
  }, {
    "id": 46,
    "text": "options.template_dir = dir",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function(arg,i,options)\r\n\t\tlocal charset = arg[i+1];\r\n\t\toptions.charset=charset;\r\n\t\treturn 1;\r\n\tend",
    "type": "function"
  }, {
    "id": 49,
    "text": "local charset = arg[i+1]",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "options.charset=charset",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function(arg,i,options)\r\n\t\tlocal pn = arg[i+1];\r\n\t\toptions.project_name=pn;\r\n\t\treturn 1;\r\n\tend",
    "type": "function"
  }, {
    "id": 53,
    "text": "local pn = arg[i+1]",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "options.project_name=pn",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function(arg,i,options)\r\n\t\tlocal path = arg[i+1];\r\n\t\toptions.plantuml_path=path;\r\n\t\treturn 1;\r\n\tend",
    "type": "function"
  }, {
    "id": 57,
    "text": "local path = arg[i+1]",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "options.plantuml_path=path",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function(arg, i, options)\r\n\t\toptions.syntax_check=arg[i+1];\r\n\t\treturn 1;\r\n\tend",
    "type": "function"
  }, {
    "id": 61,
    "text": "options.syntax_check=arg[i+1]",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function (arg, i, options)\r\n\t\toptions.doclet = arg[i+1]\r\n\t\treturn 1\r\n\tend",
    "type": "function"
  }, {
    "id": 64,
    "text": "options.doclet = arg[i+1]",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function (arg, i, options)\r\n\t\toptions.taglet = arg[i+1]\r\n\t\treturn 1\r\n\tend",
    "type": "function"
  }, {
    "id": 67,
    "text": "options.taglet = arg[i+1]",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "",
    "type": "function container"
  }, {
    "id": 70,
    "text": "format",
    "type": "global function"
  }, {
    "id": 71,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 72,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 73,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 74,
    "text": "OPTIONS[opt]",
    "type": "global function"
  }, {
    "id": 75,
    "text": "main",
    "type": "global function"
  }, {
    "id": 76,
    "text": "print",
    "type": "global function"
  }, {
    "id": 77,
    "text": "require",
    "type": "global function"
  }, {
    "id": 78,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 79,
    "text": "",
    "type": "global variable"
  }, {
    "id": 80,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 81,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 82,
    "text": "",
    "type": "variable container"
  }, {
    "id": 83,
    "text": "",
    "type": "require container"
  }, {
    "id": 84,
    "text": "",
    "type": "local variable"
  }, {
    "id": 85,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 86,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 87,
    "text": "",
    "type": "function"
  }, {
    "id": 88,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 89,
    "text": "",
    "type": "function"
  }, {
    "id": 90,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 91,
    "text": "",
    "type": "function"
  }, {
    "id": 92,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 93,
    "text": "",
    "type": "function"
  }, {
    "id": 94,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 95,
    "text": "",
    "type": "function"
  }, {
    "id": 96,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 97,
    "text": "",
    "type": "function"
  }, {
    "id": 98,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 99,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 100,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 101,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 102,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 103,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 104,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 105,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 106,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 107,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 108,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 109,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 110,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 111,
    "text": "",
    "type": "function"
  }, {
    "id": 112,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 113,
    "text": "",
    "type": "function"
  }, {
    "id": 114,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 115,
    "text": "util)",
    "type": "module"
  }, {
    "id": 116,
    "text": "",
    "type": "require local variable"
  } ]
}