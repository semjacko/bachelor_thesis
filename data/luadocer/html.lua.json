{
  "_filename": "html.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luadocer/src/luadocer/doclet/html.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 8,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 8,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 18,
    "label": "has",
    "to": 22
  }, {
    "from": 17,
    "label": "has",
    "to": 11
  }, {
    "from": 17,
    "label": "has",
    "to": 11
  }, {
    "from": 17,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 11
  }, {
    "from": 24,
    "label": "has",
    "to": 11
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 26,
    "label": "has",
    "to": 11
  }, {
    "from": 26,
    "label": "has",
    "to": 11
  }, {
    "from": 26,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 33,
    "label": "has",
    "to": 37
  }, {
    "from": 33,
    "label": "has",
    "to": 38
  }, {
    "from": 33,
    "label": "has",
    "to": 39
  }, {
    "from": 33,
    "label": "has",
    "to": 40
  }, {
    "from": 33,
    "label": "has",
    "to": 41
  }, {
    "from": 33,
    "label": "has",
    "to": 42
  }, {
    "from": 33,
    "label": "has",
    "to": 43
  }, {
    "from": 33,
    "label": "has",
    "to": 44
  }, {
    "from": 33,
    "label": "has",
    "to": 45
  }, {
    "from": 33,
    "label": "has",
    "to": 46
  }, {
    "from": 33,
    "label": "has",
    "to": 47
  }, {
    "from": 33,
    "label": "has",
    "to": 48
  }, {
    "from": 33,
    "label": "has",
    "to": 49
  }, {
    "from": 33,
    "label": "has",
    "to": 50
  }, {
    "from": 33,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 51,
    "label": "has",
    "to": 11
  }, {
    "from": 51,
    "label": "has",
    "to": 11
  }, {
    "from": 33,
    "label": "has",
    "to": 54
  }, {
    "from": 33,
    "label": "has",
    "to": 11
  }, {
    "from": 33,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 52
  }, {
    "from": 56,
    "label": "has",
    "to": 53
  }, {
    "from": 56,
    "label": "has",
    "to": 11
  }, {
    "from": 56,
    "label": "has",
    "to": 11
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 58,
    "label": "has",
    "to": 61
  }, {
    "from": 58,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 58,
    "label": "has",
    "to": 11
  }, {
    "from": 58,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 65,
    "label": "has",
    "to": 61
  }, {
    "from": 65,
    "label": "has",
    "to": 68
  }, {
    "from": 65,
    "label": "has",
    "to": 11
  }, {
    "from": 65,
    "label": "has",
    "to": 69
  }, {
    "from": 65,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 65,
    "label": "has",
    "to": 11
  }, {
    "from": 65,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 73,
    "label": "has",
    "to": 61
  }, {
    "from": 73,
    "label": "has",
    "to": 76
  }, {
    "from": 73,
    "label": "has",
    "to": 77
  }, {
    "from": 73,
    "label": "has",
    "to": 78
  }, {
    "from": 73,
    "label": "has",
    "to": 79
  }, {
    "from": 73,
    "label": "has",
    "to": 80
  }, {
    "from": 73,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 73,
    "label": "has",
    "to": 81
  }, {
    "from": 73,
    "label": "has",
    "to": 82
  }, {
    "from": 73,
    "label": "has",
    "to": 11
  }, {
    "from": 73,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 67
  }, {
    "from": 84,
    "label": "has",
    "to": 61
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 84,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 84,
    "label": "has",
    "to": 11
  }, {
    "from": 84,
    "label": "has",
    "to": 90
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 84,
    "label": "has",
    "to": 93
  }, {
    "from": 84,
    "label": "has",
    "to": 94
  }, {
    "from": 84,
    "label": "has",
    "to": 11
  }, {
    "from": 84,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 84,
    "label": "has",
    "to": 11
  }, {
    "from": 84,
    "label": "has",
    "to": 97
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 98,
    "label": "has",
    "to": 67
  }, {
    "from": 98,
    "label": "has",
    "to": 100
  }, {
    "from": 98,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 98,
    "label": "has",
    "to": 11
  }, {
    "from": 98,
    "label": "has",
    "to": 103
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 104,
    "label": "has",
    "to": 107
  }, {
    "from": 104,
    "label": "has",
    "to": 108
  }, {
    "from": 104,
    "label": "has",
    "to": 109
  }, {
    "from": 104,
    "label": "has",
    "to": 11
  }, {
    "from": 104,
    "label": "has",
    "to": 110
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 111,
    "label": "has",
    "to": 114
  }, {
    "from": 111,
    "label": "has",
    "to": 115
  }, {
    "from": 111,
    "label": "has",
    "to": 11
  }, {
    "from": 111,
    "label": "has",
    "to": 116
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 117,
    "label": "has",
    "to": 119
  }, {
    "from": 117,
    "label": "has",
    "to": 120
  }, {
    "from": 117,
    "label": "has",
    "to": 121
  }, {
    "from": 117,
    "label": "has",
    "to": 31
  }, {
    "from": 117,
    "label": "has",
    "to": 122
  }, {
    "from": 117,
    "label": "has",
    "to": 123
  }, {
    "from": 117,
    "label": "has",
    "to": 31
  }, {
    "from": 117,
    "label": "has",
    "to": 124
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 125,
    "label": "has",
    "to": 127
  }, {
    "from": 125,
    "label": "has",
    "to": 109
  }, {
    "from": 125,
    "label": "has",
    "to": 11
  }, {
    "from": 125,
    "label": "has",
    "to": 128
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 129,
    "label": "has",
    "to": 133
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 134,
    "label": "has",
    "to": 136
  }, {
    "from": 134,
    "label": "has",
    "to": 137
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 134,
    "label": "has",
    "to": 139
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 139,
    "label": "has",
    "to": 141
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 141,
    "label": "has",
    "to": 144
  }, {
    "from": 141,
    "label": "has",
    "to": 145
  }, {
    "from": 134,
    "label": "has",
    "to": 11
  }, {
    "from": 134,
    "label": "has",
    "to": 146
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 147,
    "label": "has",
    "to": 149
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 150,
    "label": "has",
    "to": 152
  }, {
    "from": 147,
    "label": "has",
    "to": 11
  }, {
    "from": 147,
    "label": "has",
    "to": 153
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 155,
    "label": "has",
    "to": 158
  }, {
    "from": 155,
    "label": "has",
    "to": 11
  }, {
    "from": 155,
    "label": "has",
    "to": 159
  }, {
    "from": 155,
    "label": "has",
    "to": 11
  }, {
    "from": 155,
    "label": "has",
    "to": 160
  }, {
    "from": 155,
    "label": "has",
    "to": 161
  }, {
    "from": 155,
    "label": "has",
    "to": 162
  }, {
    "from": 155,
    "label": "has",
    "to": 163
  }, {
    "from": 155,
    "label": "has",
    "to": 164
  }, {
    "from": 155,
    "label": "has",
    "to": 165
  }, {
    "from": 155,
    "label": "has",
    "to": 11
  }, {
    "from": 154,
    "label": "has",
    "to": 166
  }, {
    "from": 166,
    "label": "has",
    "to": 167
  }, {
    "from": 166,
    "label": "has",
    "to": 168
  }, {
    "from": 166,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 169,
    "label": "has",
    "to": 171
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 171,
    "label": "has",
    "to": 173
  }, {
    "from": 171,
    "label": "has",
    "to": 174
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 171,
    "label": "has",
    "to": 176
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 171,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 179,
    "label": "has",
    "to": 180
  }, {
    "from": 180,
    "label": "has",
    "to": 181
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 181,
    "label": "has",
    "to": 183
  }, {
    "from": 178,
    "label": "has",
    "to": 184
  }, {
    "from": 184,
    "label": "has",
    "to": 185
  }, {
    "from": 185,
    "label": "has",
    "to": 186
  }, {
    "from": 186,
    "label": "has",
    "to": 182
  }, {
    "from": 186,
    "label": "has",
    "to": 187
  }, {
    "from": 171,
    "label": "has",
    "to": 188
  }, {
    "from": 171,
    "label": "has",
    "to": 189
  }, {
    "from": 166,
    "label": "has",
    "to": 11
  }, {
    "from": 154,
    "label": "has",
    "to": 190
  }, {
    "from": 190,
    "label": "has",
    "to": 191
  }, {
    "from": 190,
    "label": "has",
    "to": 192
  }, {
    "from": 190,
    "label": "has",
    "to": 11
  }, {
    "from": 190,
    "label": "has",
    "to": 193
  }, {
    "from": 190,
    "label": "has",
    "to": 11
  }, {
    "from": 154,
    "label": "has",
    "to": 194
  }, {
    "from": 194,
    "label": "has",
    "to": 195
  }, {
    "from": 195,
    "label": "has",
    "to": 196
  }, {
    "from": 194,
    "label": "has",
    "to": 197
  }, {
    "from": 197,
    "label": "has",
    "to": 198
  }, {
    "from": 194,
    "label": "has",
    "to": 199
  }, {
    "from": 194,
    "label": "has",
    "to": 200
  }, {
    "from": 194,
    "label": "has",
    "to": 201
  }, {
    "from": 194,
    "label": "has",
    "to": 202
  }, {
    "from": 194,
    "label": "has",
    "to": 203
  }, {
    "from": 194,
    "label": "has",
    "to": 204
  }, {
    "from": 194,
    "label": "has",
    "to": 31
  }, {
    "from": 154,
    "label": "has",
    "to": 205
  }, {
    "from": 154,
    "label": "has",
    "to": 200
  }, {
    "from": 154,
    "label": "has",
    "to": 201
  }, {
    "from": 154,
    "label": "has",
    "to": 202
  }, {
    "from": 154,
    "label": "has",
    "to": 203
  }, {
    "from": 154,
    "label": "has",
    "to": 206
  }, {
    "from": 154,
    "label": "has",
    "to": 31
  }, {
    "from": 154,
    "label": "has",
    "to": 207
  }, {
    "from": 154,
    "label": "has",
    "to": 200
  }, {
    "from": 154,
    "label": "has",
    "to": 201
  }, {
    "from": 154,
    "label": "has",
    "to": 202
  }, {
    "from": 154,
    "label": "has",
    "to": 203
  }, {
    "from": 154,
    "label": "has",
    "to": 208
  }, {
    "from": 154,
    "label": "has",
    "to": 31
  }, {
    "from": 154,
    "label": "has",
    "to": 209
  }, {
    "from": 154,
    "label": "has",
    "to": 210
  }, {
    "from": 210,
    "label": "has",
    "to": 211
  }, {
    "from": 210,
    "label": "has",
    "to": 212
  }, {
    "from": 212,
    "label": "has",
    "to": 213
  }, {
    "from": 212,
    "label": "has",
    "to": 214
  }, {
    "from": 214,
    "label": "has",
    "to": 215
  }, {
    "from": 214,
    "label": "has",
    "to": 216
  }, {
    "from": 154,
    "label": "has",
    "to": 217
  }, {
    "from": 217,
    "label": "has",
    "to": 218
  }, {
    "from": 217,
    "label": "has",
    "to": 200
  }, {
    "from": 217,
    "label": "has",
    "to": 201
  }, {
    "from": 217,
    "label": "has",
    "to": 202
  }, {
    "from": 217,
    "label": "has",
    "to": 203
  }, {
    "from": 217,
    "label": "has",
    "to": 219
  }, {
    "from": 217,
    "label": "has",
    "to": 31
  }, {
    "from": 154,
    "label": "has",
    "to": 220
  }, {
    "from": 154,
    "label": "has",
    "to": 221
  }, {
    "from": 154,
    "label": "has",
    "to": 222
  }, {
    "from": 222,
    "label": "has",
    "to": 223
  }, {
    "from": 222,
    "label": "has",
    "to": 224
  }, {
    "from": 224,
    "label": "has",
    "to": 225
  }, {
    "from": 224,
    "label": "has",
    "to": 226
  }, {
    "from": 226,
    "label": "has",
    "to": 227
  }, {
    "from": 226,
    "label": "has",
    "to": 228
  }, {
    "from": 154,
    "label": "has",
    "to": 229
  }, {
    "from": 229,
    "label": "has",
    "to": 230
  }, {
    "from": 229,
    "label": "has",
    "to": 231
  }, {
    "from": 229,
    "label": "has",
    "to": 232
  }, {
    "from": 229,
    "label": "has",
    "to": 200
  }, {
    "from": 229,
    "label": "has",
    "to": 201
  }, {
    "from": 229,
    "label": "has",
    "to": 202
  }, {
    "from": 229,
    "label": "has",
    "to": 203
  }, {
    "from": 229,
    "label": "has",
    "to": 233
  }, {
    "from": 229,
    "label": "has",
    "to": 31
  }, {
    "from": 154,
    "label": "has",
    "to": 234
  }, {
    "from": 234,
    "label": "has",
    "to": 235
  }, {
    "from": 234,
    "label": "has",
    "to": 236
  }, {
    "from": 236,
    "label": "has",
    "to": 237
  }, {
    "from": 154,
    "label": "has",
    "to": 238
  }, {
    "from": 154,
    "label": "has",
    "to": 239
  }, {
    "from": 239,
    "label": "has",
    "to": 240
  }, {
    "from": 239,
    "label": "has",
    "to": 241
  }, {
    "from": 239,
    "label": "has",
    "to": 242
  }, {
    "from": 242,
    "label": "has",
    "to": 243
  }, {
    "from": 242,
    "label": "has",
    "to": 244
  }, {
    "from": 242,
    "label": "has",
    "to": 245
  }, {
    "from": 242,
    "label": "has",
    "to": 246
  }, {
    "from": 242,
    "label": "has",
    "to": 247
  }, {
    "from": 247,
    "label": "has",
    "to": 248
  }, {
    "from": 247,
    "label": "has",
    "to": 249
  }, {
    "from": 247,
    "label": "has",
    "to": 250
  }, {
    "from": 247,
    "label": "has",
    "to": 251
  }, {
    "from": 247,
    "label": "has",
    "to": 252
  }, {
    "from": 247,
    "label": "has",
    "to": 253
  }, {
    "from": 247,
    "label": "has",
    "to": 248
  }, {
    "from": 242,
    "label": "has",
    "to": 254
  }, {
    "from": 239,
    "label": "has",
    "to": 255
  }, {
    "from": 239,
    "label": "has",
    "to": 241
  }, {
    "from": 154,
    "label": "has",
    "to": 256
  }, {
    "from": 154,
    "label": "has",
    "to": 257
  }, {
    "from": 154,
    "label": "has",
    "to": 258
  }, {
    "from": 258,
    "label": "has",
    "to": 259
  }, {
    "from": 258,
    "label": "has",
    "to": 241
  }, {
    "from": 258,
    "label": "has",
    "to": 260
  }, {
    "from": 260,
    "label": "has",
    "to": 261
  }, {
    "from": 260,
    "label": "has",
    "to": 262
  }, {
    "from": 260,
    "label": "has",
    "to": 263
  }, {
    "from": 260,
    "label": "has",
    "to": 264
  }, {
    "from": 260,
    "label": "has",
    "to": 265
  }, {
    "from": 260,
    "label": "has",
    "to": 266
  }, {
    "from": 260,
    "label": "has",
    "to": 267
  }, {
    "from": 260,
    "label": "has",
    "to": 268
  }, {
    "from": 260,
    "label": "has",
    "to": 269
  }, {
    "from": 258,
    "label": "has",
    "to": 270
  }, {
    "from": 258,
    "label": "has",
    "to": 241
  }, {
    "from": 154,
    "label": "has",
    "to": 271
  }, {
    "from": 154,
    "label": "has",
    "to": 241
  }, {
    "from": 154,
    "label": "has",
    "to": 272
  }, {
    "from": 154,
    "label": "has",
    "to": 273
  }, {
    "from": 273,
    "label": "has",
    "to": 274
  }, {
    "from": 154,
    "label": "has",
    "to": 275
  }, {
    "from": 154,
    "label": "has",
    "to": 276
  }, {
    "from": 276,
    "label": "has",
    "to": 261
  }, {
    "from": 276,
    "label": "has",
    "to": 277
  }, {
    "from": 276,
    "label": "has",
    "to": 278
  }, {
    "from": 276,
    "label": "has",
    "to": 279
  }, {
    "from": 276,
    "label": "has",
    "to": 280
  }, {
    "from": 276,
    "label": "has",
    "to": 281
  }, {
    "from": 276,
    "label": "has",
    "to": 282
  }, {
    "from": 276,
    "label": "has",
    "to": 283
  }, {
    "from": 154,
    "label": "has",
    "to": 284
  }, {
    "from": 154,
    "label": "has",
    "to": 285
  }, {
    "from": 285,
    "label": "has",
    "to": 286
  }, {
    "from": 285,
    "label": "has",
    "to": 287
  }, {
    "from": 154,
    "label": "has",
    "to": 288
  }, {
    "from": 154,
    "label": "has",
    "to": 289
  }, {
    "from": 289,
    "label": "has",
    "to": 290
  }, {
    "from": 290,
    "label": "has",
    "to": 93
  }, {
    "from": 290,
    "label": "has",
    "to": 291
  }, {
    "from": 290,
    "label": "has",
    "to": 200
  }, {
    "from": 290,
    "label": "has",
    "to": 201
  }, {
    "from": 290,
    "label": "has",
    "to": 202
  }, {
    "from": 290,
    "label": "has",
    "to": 203
  }, {
    "from": 290,
    "label": "has",
    "to": 292
  }, {
    "from": 290,
    "label": "has",
    "to": 31
  }, {
    "from": 289,
    "label": "has",
    "to": 293
  }, {
    "from": 289,
    "label": "has",
    "to": 241
  }, {
    "from": 154,
    "label": "has",
    "to": 294
  }, {
    "from": 294,
    "label": "has",
    "to": 295
  }, {
    "from": 295,
    "label": "has",
    "to": 296
  }, {
    "from": 295,
    "label": "has",
    "to": 280
  }, {
    "from": 295,
    "label": "has",
    "to": 297
  }, {
    "from": 295,
    "label": "has",
    "to": 298
  }, {
    "from": 295,
    "label": "has",
    "to": 299
  }, {
    "from": 295,
    "label": "has",
    "to": 300
  }, {
    "from": 295,
    "label": "has",
    "to": 301
  }, {
    "from": 301,
    "label": "has",
    "to": 302
  }, {
    "from": 301,
    "label": "has",
    "to": 303
  }, {
    "from": 303,
    "label": "has",
    "to": 304
  }, {
    "from": 303,
    "label": "has",
    "to": 305
  }, {
    "from": 303,
    "label": "has",
    "to": 306
  }, {
    "from": 303,
    "label": "has",
    "to": 307
  }, {
    "from": 303,
    "label": "has",
    "to": 308
  }, {
    "from": 308,
    "label": "has",
    "to": 309
  }, {
    "from": 309,
    "label": "has",
    "to": 310
  }, {
    "from": 310,
    "label": "has",
    "to": 311
  }, {
    "from": 309,
    "label": "has",
    "to": 312
  }, {
    "from": 312,
    "label": "has",
    "to": 313
  }, {
    "from": 303,
    "label": "has",
    "to": 314
  }, {
    "from": 303,
    "label": "has",
    "to": 315
  }, {
    "from": 303,
    "label": "has",
    "to": 202
  }, {
    "from": 303,
    "label": "has",
    "to": 203
  }, {
    "from": 303,
    "label": "has",
    "to": 316
  }, {
    "from": 303,
    "label": "has",
    "to": 31
  }, {
    "from": 295,
    "label": "has",
    "to": 317
  }, {
    "from": 295,
    "label": "has",
    "to": 318
  }, {
    "from": 295,
    "label": "has",
    "to": 319
  }, {
    "from": 319,
    "label": "has",
    "to": 320
  }, {
    "from": 319,
    "label": "has",
    "to": 321
  }, {
    "from": 319,
    "label": "has",
    "to": 322
  }, {
    "from": 322,
    "label": "has",
    "to": 323
  }, {
    "from": 319,
    "label": "has",
    "to": 324
  }, {
    "from": 324,
    "label": "has",
    "to": 325
  }, {
    "from": 295,
    "label": "has",
    "to": 326
  }, {
    "from": 295,
    "label": "has",
    "to": 327
  }, {
    "from": 295,
    "label": "has",
    "to": 200
  }, {
    "from": 295,
    "label": "has",
    "to": 201
  }, {
    "from": 295,
    "label": "has",
    "to": 202
  }, {
    "from": 295,
    "label": "has",
    "to": 203
  }, {
    "from": 295,
    "label": "has",
    "to": 328
  }, {
    "from": 295,
    "label": "has",
    "to": 31
  }, {
    "from": 154,
    "label": "has",
    "to": 329
  }, {
    "from": 154,
    "label": "has",
    "to": 330
  }, {
    "from": 154,
    "label": "has",
    "to": 331
  }, {
    "from": 154,
    "label": "has",
    "to": 203
  }, {
    "from": 154,
    "label": "has",
    "to": 332
  }, {
    "from": 154,
    "label": "has",
    "to": 333
  }, {
    "from": 154,
    "label": "has",
    "to": 334
  }, {
    "from": 154,
    "label": "has",
    "to": 335
  }, {
    "from": 154,
    "label": "has",
    "to": 336
  }, {
    "from": 154,
    "label": "has",
    "to": 31
  }, {
    "from": 154,
    "label": "has",
    "to": 337
  }, {
    "from": 154,
    "label": "has",
    "to": 338
  }, {
    "from": 154,
    "label": "has",
    "to": 339
  }, {
    "from": 154,
    "label": "has",
    "to": 203
  }, {
    "from": 154,
    "label": "has",
    "to": 340
  }, {
    "from": 154,
    "label": "has",
    "to": 341
  }, {
    "from": 154,
    "label": "has",
    "to": 31
  }, {
    "from": 154,
    "label": "has",
    "to": 342
  }, {
    "from": 154,
    "label": "has",
    "to": 343
  }, {
    "from": 154,
    "label": "has",
    "to": 203
  }, {
    "from": 154,
    "label": "has",
    "to": 344
  }, {
    "from": 154,
    "label": "has",
    "to": 345
  }, {
    "from": 154,
    "label": "has",
    "to": 31
  }, {
    "from": 154,
    "label": "has",
    "to": 346
  }, {
    "from": 154,
    "label": "has",
    "to": 347
  }, {
    "from": 154,
    "label": "has",
    "to": 348
  }, {
    "from": 154,
    "label": "has",
    "to": 203
  }, {
    "from": 154,
    "label": "has",
    "to": 349
  }, {
    "from": 154,
    "label": "has",
    "to": 350
  }, {
    "from": 154,
    "label": "has",
    "to": 351
  }, {
    "from": 154,
    "label": "has",
    "to": 352
  }, {
    "from": 154,
    "label": "has",
    "to": 353
  }, {
    "from": 154,
    "label": "has",
    "to": 31
  }, {
    "from": 154,
    "label": "has",
    "to": 354
  }, {
    "from": 154,
    "label": "has",
    "to": 355
  }, {
    "from": 154,
    "label": "has",
    "to": 356
  }, {
    "from": 154,
    "label": "has",
    "to": 203
  }, {
    "from": 154,
    "label": "has",
    "to": 357
  }, {
    "from": 154,
    "label": "has",
    "to": 358
  }, {
    "from": 154,
    "label": "has",
    "to": 31
  }, {
    "from": 154,
    "label": "has",
    "to": 359
  }, {
    "from": 154,
    "label": "has",
    "to": 360
  }, {
    "from": 154,
    "label": "has",
    "to": 361
  }, {
    "from": 154,
    "label": "has",
    "to": 203
  }, {
    "from": 154,
    "label": "has",
    "to": 362
  }, {
    "from": 154,
    "label": "has",
    "to": 31
  }, {
    "from": 154,
    "label": "has",
    "to": 363
  }, {
    "from": 154,
    "label": "has",
    "to": 364
  }, {
    "from": 154,
    "label": "has",
    "to": 361
  }, {
    "from": 154,
    "label": "has",
    "to": 203
  }, {
    "from": 154,
    "label": "has",
    "to": 365
  }, {
    "from": 154,
    "label": "has",
    "to": 366
  }, {
    "from": 154,
    "label": "has",
    "to": 31
  }, {
    "from": 154,
    "label": "has",
    "to": 367
  }, {
    "from": 154,
    "label": "has",
    "to": 368
  }, {
    "from": 154,
    "label": "has",
    "to": 369
  }, {
    "from": 154,
    "label": "has",
    "to": 370
  }, {
    "from": 154,
    "label": "has",
    "to": 371
  }, {
    "from": 154,
    "label": "has",
    "to": 372
  }, {
    "from": 154,
    "label": "has",
    "to": 373
  }, {
    "from": 154,
    "label": "has",
    "to": 374
  }, {
    "from": 154,
    "label": "has",
    "to": 375
  }, {
    "from": 154,
    "label": "has",
    "to": 376
  }, {
    "from": 154,
    "label": "has",
    "to": 377
  }, {
    "from": 378,
    "label": "has",
    "to": 156
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 378,
    "label": "has",
    "to": 158
  }, {
    "from": 378,
    "label": "has",
    "to": 11
  }, {
    "from": 378,
    "label": "has",
    "to": 159
  }, {
    "from": 378,
    "label": "has",
    "to": 11
  }, {
    "from": 378,
    "label": "has",
    "to": 160
  }, {
    "from": 378,
    "label": "has",
    "to": 161
  }, {
    "from": 378,
    "label": "has",
    "to": 162
  }, {
    "from": 378,
    "label": "has",
    "to": 163
  }, {
    "from": 378,
    "label": "has",
    "to": 164
  }, {
    "from": 378,
    "label": "has",
    "to": 165
  }, {
    "from": 378,
    "label": "has",
    "to": 11
  }, {
    "from": 378,
    "label": "has",
    "to": 379
  }, {
    "from": 380,
    "label": "has",
    "to": 167
  }, {
    "from": 380,
    "label": "has",
    "to": 168
  }, {
    "from": 380,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 169,
    "label": "has",
    "to": 171
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 171,
    "label": "has",
    "to": 173
  }, {
    "from": 171,
    "label": "has",
    "to": 174
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 171,
    "label": "has",
    "to": 176
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 171,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 179,
    "label": "has",
    "to": 180
  }, {
    "from": 180,
    "label": "has",
    "to": 181
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 181,
    "label": "has",
    "to": 183
  }, {
    "from": 178,
    "label": "has",
    "to": 184
  }, {
    "from": 184,
    "label": "has",
    "to": 185
  }, {
    "from": 185,
    "label": "has",
    "to": 186
  }, {
    "from": 186,
    "label": "has",
    "to": 182
  }, {
    "from": 186,
    "label": "has",
    "to": 187
  }, {
    "from": 171,
    "label": "has",
    "to": 188
  }, {
    "from": 171,
    "label": "has",
    "to": 189
  }, {
    "from": 380,
    "label": "has",
    "to": 11
  }, {
    "from": 380,
    "label": "has",
    "to": 381
  }, {
    "from": 382,
    "label": "has",
    "to": 191
  }, {
    "from": 382,
    "label": "has",
    "to": 192
  }, {
    "from": 382,
    "label": "has",
    "to": 11
  }, {
    "from": 382,
    "label": "has",
    "to": 193
  }, {
    "from": 382,
    "label": "has",
    "to": 11
  }, {
    "from": 382,
    "label": "has",
    "to": 383
  }, {
    "from": 384,
    "label": "has",
    "to": 11
  }, {
    "from": 385,
    "label": "has",
    "to": 386
  }, {
    "from": 385,
    "label": "has",
    "to": 11
  }, {
    "from": 385,
    "label": "has",
    "to": 387
  }, {
    "from": 388,
    "label": "has",
    "to": 389
  }, {
    "from": 388,
    "label": "has",
    "to": 11
  }, {
    "from": 388,
    "label": "has",
    "to": 386
  }, {
    "from": 388,
    "label": "has",
    "to": 11
  }, {
    "from": 388,
    "label": "has",
    "to": 390
  }, {
    "from": 391,
    "label": "has",
    "to": 63
  }, {
    "from": 392,
    "label": "has",
    "to": 71
  }, {
    "from": 393,
    "label": "has",
    "to": 71
  }, {
    "from": 154,
    "label": "calls",
    "to": 111
  }, {
    "from": 33,
    "label": "calls",
    "to": 453
  }, {
    "from": 65,
    "label": "calls",
    "to": 453
  }, {
    "from": 65,
    "label": "calls",
    "to": 453
  }, {
    "from": 73,
    "label": "calls",
    "to": 453
  }, {
    "from": 84,
    "label": "calls",
    "to": 453
  }, {
    "from": 84,
    "label": "calls",
    "to": 453
  }, {
    "from": 84,
    "label": "calls",
    "to": 453
  }, {
    "from": 98,
    "label": "calls",
    "to": 453
  }, {
    "from": 98,
    "label": "calls",
    "to": 453
  }, {
    "from": 154,
    "label": "calls",
    "to": 453
  }, {
    "from": 154,
    "label": "calls",
    "to": 453
  }, {
    "from": 154,
    "label": "calls",
    "to": 453
  }, {
    "from": 154,
    "label": "calls",
    "to": 453
  }, {
    "from": 154,
    "label": "calls",
    "to": 453
  }, {
    "from": 154,
    "label": "calls",
    "to": 453
  }, {
    "from": 154,
    "label": "calls",
    "to": 453
  }, {
    "from": 154,
    "label": "calls",
    "to": 453
  }, {
    "from": 154,
    "label": "calls",
    "to": 453
  }, {
    "from": 154,
    "label": "calls",
    "to": 453
  }, {
    "from": 154,
    "label": "calls",
    "to": 453
  }, {
    "from": 154,
    "label": "calls",
    "to": 453
  }, {
    "from": 154,
    "label": "calls",
    "to": 453
  }, {
    "from": 154,
    "label": "calls",
    "to": 453
  }, {
    "from": 154,
    "label": "calls",
    "to": 453
  }, {
    "from": 154,
    "label": "calls",
    "to": 427
  }, {
    "from": 154,
    "label": "calls",
    "to": 449
  }, {
    "from": 154,
    "label": "calls",
    "to": 407
  }, {
    "from": 154,
    "label": "calls",
    "to": 125
  }, {
    "from": 33,
    "label": "calls",
    "to": 415
  }, {
    "from": 84,
    "label": "calls",
    "to": 415
  }, {
    "from": 134,
    "label": "calls",
    "to": 415
  }, {
    "from": 134,
    "label": "calls",
    "to": 415
  }, {
    "from": 154,
    "label": "calls",
    "to": 117
  }, {
    "from": 154,
    "label": "calls",
    "to": 117
  }, {
    "from": 154,
    "label": "calls",
    "to": 117
  }, {
    "from": 154,
    "label": "calls",
    "to": 117
  }, {
    "from": 154,
    "label": "calls",
    "to": 117
  }, {
    "from": 154,
    "label": "calls",
    "to": 117
  }, {
    "from": 154,
    "label": "calls",
    "to": 117
  }, {
    "from": 154,
    "label": "calls",
    "to": 117
  }, {
    "from": 154,
    "label": "calls",
    "to": 117
  }, {
    "from": 154,
    "label": "calls",
    "to": 117
  }, {
    "from": 154,
    "label": "calls",
    "to": 452
  }, {
    "from": 147,
    "label": "calls",
    "to": 454
  }, {
    "from": 154,
    "label": "calls",
    "to": 454
  }, {
    "from": 154,
    "label": "calls",
    "to": 454
  }, {
    "from": 154,
    "label": "calls",
    "to": 454
  }, {
    "from": 154,
    "label": "calls",
    "to": 454
  }, {
    "from": 154,
    "label": "calls",
    "to": 454
  }, {
    "from": 154,
    "label": "calls",
    "to": 454
  }, {
    "from": 154,
    "label": "calls",
    "to": 454
  }, {
    "from": 154,
    "label": "calls",
    "to": 454
  }, {
    "from": 154,
    "label": "calls",
    "to": 454
  }, {
    "from": 154,
    "label": "calls",
    "to": 454
  }, {
    "from": 154,
    "label": "calls",
    "to": 454
  }, {
    "from": 154,
    "label": "calls",
    "to": 454
  }, {
    "from": 154,
    "label": "calls",
    "to": 397
  }, {
    "from": 154,
    "label": "calls",
    "to": 397
  }, {
    "from": 154,
    "label": "calls",
    "to": 397
  }, {
    "from": 154,
    "label": "calls",
    "to": 455
  }, {
    "from": 33,
    "label": "calls",
    "to": 26
  }, {
    "from": 98,
    "label": "calls",
    "to": 84
  }, {
    "from": 98,
    "label": "calls",
    "to": 84
  }, {
    "from": 154,
    "label": "calls",
    "to": 448
  }, {
    "from": 154,
    "label": "calls",
    "to": 431
  }, {
    "from": 154,
    "label": "calls",
    "to": 33
  }, {
    "from": 154,
    "label": "calls",
    "to": 33
  }, {
    "from": 154,
    "label": "calls",
    "to": 33
  }, {
    "from": 154,
    "label": "calls",
    "to": 33
  }, {
    "from": 154,
    "label": "calls",
    "to": 33
  }, {
    "from": 154,
    "label": "calls",
    "to": 33
  }, {
    "from": 154,
    "label": "calls",
    "to": 33
  }, {
    "from": 154,
    "label": "calls",
    "to": 33
  }, {
    "from": 154,
    "label": "calls",
    "to": 33
  }, {
    "from": 154,
    "label": "calls",
    "to": 33
  }, {
    "from": 154,
    "label": "calls",
    "to": 33
  }, {
    "from": 154,
    "label": "calls",
    "to": 33
  }, {
    "from": 154,
    "label": "calls",
    "to": 33
  }, {
    "from": 154,
    "label": "calls",
    "to": 33
  }, {
    "from": 154,
    "label": "calls",
    "to": 33
  }, {
    "from": 154,
    "label": "calls",
    "to": 395
  }, {
    "from": 154,
    "label": "calls",
    "to": 395
  }, {
    "from": 154,
    "label": "calls",
    "to": 395
  }, {
    "from": 154,
    "label": "calls",
    "to": 395
  }, {
    "from": 154,
    "label": "calls",
    "to": 395
  }, {
    "from": 154,
    "label": "calls",
    "to": 395
  }, {
    "from": 154,
    "label": "calls",
    "to": 408
  }, {
    "from": 58,
    "label": "calls",
    "to": 401
  }, {
    "from": 73,
    "label": "calls",
    "to": 401
  }, {
    "from": 73,
    "label": "calls",
    "to": 401
  }, {
    "from": 147,
    "label": "calls",
    "to": 401
  }, {
    "from": 154,
    "label": "calls",
    "to": 401
  }, {
    "from": 154,
    "label": "calls",
    "to": 401
  }, {
    "from": 154,
    "label": "calls",
    "to": 401
  }, {
    "from": 154,
    "label": "calls",
    "to": 401
  }, {
    "from": 154,
    "label": "calls",
    "to": 401
  }, {
    "from": 154,
    "label": "calls",
    "to": 401
  }, {
    "from": 154,
    "label": "calls",
    "to": 401
  }, {
    "from": 154,
    "label": "calls",
    "to": 401
  }, {
    "from": 154,
    "label": "calls",
    "to": 401
  }, {
    "from": 154,
    "label": "calls",
    "to": 104
  }, {
    "from": 154,
    "label": "calls",
    "to": 445
  }, {
    "from": 154,
    "label": "calls",
    "to": 437
  }, {
    "from": 8,
    "label": "calls",
    "to": 439
  }, {
    "from": 8,
    "label": "calls",
    "to": 439
  }, {
    "from": 17,
    "label": "calls",
    "to": 439
  }, {
    "from": 17,
    "label": "calls",
    "to": 439
  }, {
    "from": 33,
    "label": "calls",
    "to": 439
  }, {
    "from": 134,
    "label": "calls",
    "to": 439
  }, {
    "from": 134,
    "label": "calls",
    "to": 439
  }, {
    "from": 134,
    "label": "calls",
    "to": 439
  }, {
    "from": 154,
    "label": "calls",
    "to": 439
  }, {
    "from": 17,
    "label": "calls",
    "to": 8
  }, {
    "from": 154,
    "label": "calls",
    "to": 450
  }, {
    "from": 154,
    "label": "calls",
    "to": 417
  }, {
    "from": 154,
    "label": "calls",
    "to": 396
  }, {
    "from": 154,
    "label": "calls",
    "to": 396
  }, {
    "from": 154,
    "label": "calls",
    "to": 429
  }, {
    "from": 154,
    "label": "calls",
    "to": 403
  }, {
    "from": 394,
    "label": "calls",
    "to": 462
  }, {
    "from": 129,
    "label": "calls",
    "to": 462
  }, {
    "from": 154,
    "label": "calls",
    "to": 462
  }, {
    "from": 154,
    "label": "calls",
    "to": 416
  }, {
    "from": 154,
    "label": "calls",
    "to": 444
  }, {
    "from": 33,
    "label": "calls",
    "to": 423
  }, {
    "from": 98,
    "label": "calls",
    "to": 423
  }, {
    "from": 154,
    "label": "calls",
    "to": 423
  }, {
    "from": 154,
    "label": "calls",
    "to": 423
  }, {
    "from": 154,
    "label": "calls",
    "to": 423
  }, {
    "from": 154,
    "label": "calls",
    "to": 423
  }, {
    "from": 154,
    "label": "calls",
    "to": 423
  }, {
    "from": 154,
    "label": "calls",
    "to": 423
  }, {
    "from": 154,
    "label": "calls",
    "to": 423
  }, {
    "from": 154,
    "label": "calls",
    "to": 423
  }, {
    "from": 154,
    "label": "calls",
    "to": 423
  }, {
    "from": 154,
    "label": "calls",
    "to": 423
  }, {
    "from": 154,
    "label": "calls",
    "to": 423
  }, {
    "from": 154,
    "label": "calls",
    "to": 423
  }, {
    "from": 154,
    "label": "calls",
    "to": 423
  }, {
    "from": 154,
    "label": "calls",
    "to": 423
  }, {
    "from": 154,
    "label": "calls",
    "to": 423
  }, {
    "from": 154,
    "label": "calls",
    "to": 423
  }, {
    "from": 154,
    "label": "calls",
    "to": 423
  }, {
    "from": 154,
    "label": "calls",
    "to": 423
  }, {
    "from": 154,
    "label": "calls",
    "to": 423
  }, {
    "from": 154,
    "label": "calls",
    "to": 423
  }, {
    "from": 154,
    "label": "calls",
    "to": 423
  }, {
    "from": 154,
    "label": "calls",
    "to": 423
  }, {
    "from": 154,
    "label": "calls",
    "to": 423
  }, {
    "from": 154,
    "label": "calls",
    "to": 404
  }, {
    "from": 154,
    "label": "calls",
    "to": 412
  }, {
    "from": 154,
    "label": "calls",
    "to": 134
  }, {
    "from": 154,
    "label": "calls",
    "to": 134
  }, {
    "from": 154,
    "label": "calls",
    "to": 24
  }, {
    "from": 154,
    "label": "calls",
    "to": 24
  }, {
    "from": 154,
    "label": "calls",
    "to": 24
  }, {
    "from": 154,
    "label": "calls",
    "to": 24
  }, {
    "from": 154,
    "label": "calls",
    "to": 24
  }, {
    "from": 154,
    "label": "calls",
    "to": 24
  }, {
    "from": 24,
    "label": "calls",
    "to": 73
  }, {
    "from": 84,
    "label": "calls",
    "to": 73
  }, {
    "from": 154,
    "label": "calls",
    "to": 424
  }, {
    "from": 154,
    "label": "calls",
    "to": 456
  }, {
    "from": 154,
    "label": "calls",
    "to": 409
  }, {
    "from": 154,
    "label": "calls",
    "to": 460
  }, {
    "from": 154,
    "label": "calls",
    "to": 460
  }, {
    "from": 154,
    "label": "calls",
    "to": 422
  }, {
    "from": 73,
    "label": "calls",
    "to": 17
  }, {
    "from": 147,
    "label": "calls",
    "to": 17
  }, {
    "from": 154,
    "label": "calls",
    "to": 17
  }, {
    "from": 154,
    "label": "calls",
    "to": 17
  }, {
    "from": 154,
    "label": "calls",
    "to": 17
  }, {
    "from": 154,
    "label": "calls",
    "to": 17
  }, {
    "from": 154,
    "label": "calls",
    "to": 17
  }, {
    "from": 154,
    "label": "calls",
    "to": 428
  }, {
    "from": 26,
    "label": "calls",
    "to": 430
  }, {
    "from": 154,
    "label": "calls",
    "to": 425
  }, {
    "from": 154,
    "label": "calls",
    "to": 440
  }, {
    "from": 394,
    "label": "calls",
    "to": 457
  }, {
    "from": 17,
    "label": "calls",
    "to": 458
  }, {
    "from": 84,
    "label": "calls",
    "to": 458
  }, {
    "from": 84,
    "label": "calls",
    "to": 458
  }, {
    "from": 129,
    "label": "calls",
    "to": 458
  }, {
    "from": 154,
    "label": "calls",
    "to": 458
  }, {
    "from": 154,
    "label": "calls",
    "to": 458
  }, {
    "from": 154,
    "label": "calls",
    "to": 458
  }, {
    "from": 154,
    "label": "calls",
    "to": 458
  }, {
    "from": 154,
    "label": "calls",
    "to": 458
  }, {
    "from": 154,
    "label": "calls",
    "to": 458
  }, {
    "from": 154,
    "label": "calls",
    "to": 458
  }, {
    "from": 154,
    "label": "calls",
    "to": 458
  }, {
    "from": 154,
    "label": "calls",
    "to": 418
  }, {
    "from": 154,
    "label": "calls",
    "to": 432
  }, {
    "from": 154,
    "label": "calls",
    "to": 432
  }, {
    "from": 154,
    "label": "calls",
    "to": 432
  }, {
    "from": 154,
    "label": "calls",
    "to": 432
  }, {
    "from": 154,
    "label": "calls",
    "to": 432
  }, {
    "from": 154,
    "label": "calls",
    "to": 432
  }, {
    "from": 154,
    "label": "calls",
    "to": 432
  }, {
    "from": 154,
    "label": "calls",
    "to": 432
  }, {
    "from": 154,
    "label": "calls",
    "to": 432
  }, {
    "from": 154,
    "label": "calls",
    "to": 432
  }, {
    "from": 154,
    "label": "calls",
    "to": 432
  }, {
    "from": 154,
    "label": "calls",
    "to": 432
  }, {
    "from": 154,
    "label": "calls",
    "to": 432
  }, {
    "from": 154,
    "label": "calls",
    "to": 432
  }, {
    "from": 154,
    "label": "calls",
    "to": 432
  }, {
    "from": 26,
    "label": "calls",
    "to": 433
  }, {
    "from": 134,
    "label": "calls",
    "to": 459
  }, {
    "from": 24,
    "label": "calls",
    "to": 426
  }, {
    "from": 26,
    "label": "calls",
    "to": 426
  }, {
    "from": 33,
    "label": "calls",
    "to": 426
  }, {
    "from": 58,
    "label": "calls",
    "to": 426
  }, {
    "from": 65,
    "label": "calls",
    "to": 426
  }, {
    "from": 73,
    "label": "calls",
    "to": 426
  }, {
    "from": 73,
    "label": "calls",
    "to": 426
  }, {
    "from": 73,
    "label": "calls",
    "to": 426
  }, {
    "from": 73,
    "label": "calls",
    "to": 426
  }, {
    "from": 104,
    "label": "calls",
    "to": 426
  }, {
    "from": 104,
    "label": "calls",
    "to": 426
  }, {
    "from": 111,
    "label": "calls",
    "to": 426
  }, {
    "from": 111,
    "label": "calls",
    "to": 426
  }, {
    "from": 154,
    "label": "calls",
    "to": 443
  }, {
    "from": 154,
    "label": "calls",
    "to": 451
  }, {
    "from": 154,
    "label": "calls",
    "to": 446
  }, {
    "from": 154,
    "label": "calls",
    "to": 446
  }, {
    "from": 154,
    "label": "calls",
    "to": 434
  }, {
    "from": 154,
    "label": "calls",
    "to": 405
  }, {
    "from": 33,
    "label": "calls",
    "to": 398
  }, {
    "from": 134,
    "label": "calls",
    "to": 447
  }, {
    "from": 134,
    "label": "calls",
    "to": 447
  }, {
    "from": 154,
    "label": "calls",
    "to": 447
  }, {
    "from": 154,
    "label": "calls",
    "to": 447
  }, {
    "from": 154,
    "label": "calls",
    "to": 447
  }, {
    "from": 154,
    "label": "calls",
    "to": 447
  }, {
    "from": 154,
    "label": "calls",
    "to": 447
  }, {
    "from": 117,
    "label": "calls",
    "to": 433
  }, {
    "from": 117,
    "label": "calls",
    "to": 433
  }, {
    "from": 154,
    "label": "calls",
    "to": 433
  }, {
    "from": 154,
    "label": "calls",
    "to": 433
  }, {
    "from": 154,
    "label": "calls",
    "to": 433
  }, {
    "from": 154,
    "label": "calls",
    "to": 433
  }, {
    "from": 154,
    "label": "calls",
    "to": 433
  }, {
    "from": 154,
    "label": "calls",
    "to": 433
  }, {
    "from": 154,
    "label": "calls",
    "to": 433
  }, {
    "from": 154,
    "label": "calls",
    "to": 433
  }, {
    "from": 154,
    "label": "calls",
    "to": 433
  }, {
    "from": 154,
    "label": "calls",
    "to": 433
  }, {
    "from": 154,
    "label": "calls",
    "to": 433
  }, {
    "from": 154,
    "label": "calls",
    "to": 433
  }, {
    "from": 154,
    "label": "calls",
    "to": 433
  }, {
    "from": 154,
    "label": "calls",
    "to": 433
  }, {
    "from": 154,
    "label": "calls",
    "to": 433
  }, {
    "from": 154,
    "label": "calls",
    "to": 406
  }, {
    "from": 129,
    "label": "calls",
    "to": 129
  }, {
    "from": 154,
    "label": "calls",
    "to": 411
  }, {
    "from": 154,
    "label": "calls",
    "to": 420
  }, {
    "from": 154,
    "label": "calls",
    "to": 420
  }, {
    "from": 154,
    "label": "calls",
    "to": 413
  }, {
    "from": 84,
    "label": "calls",
    "to": 65
  }, {
    "from": 98,
    "label": "calls",
    "to": 65
  }, {
    "from": 154,
    "label": "calls",
    "to": 441
  }, {
    "from": 154,
    "label": "calls",
    "to": 414
  }, {
    "from": 154,
    "label": "calls",
    "to": 419
  }, {
    "from": 154,
    "label": "calls",
    "to": 435
  }, {
    "from": 154,
    "label": "calls",
    "to": 435
  }, {
    "from": 154,
    "label": "calls",
    "to": 435
  }, {
    "from": 154,
    "label": "calls",
    "to": 435
  }, {
    "from": 84,
    "label": "calls",
    "to": 438
  }, {
    "from": 154,
    "label": "calls",
    "to": 438
  }, {
    "from": 394,
    "label": "calls",
    "to": 461
  }, {
    "from": 394,
    "label": "calls",
    "to": 461
  }, {
    "from": 394,
    "label": "calls",
    "to": 461
  }, {
    "from": 394,
    "label": "calls",
    "to": 461
  }, {
    "from": 394,
    "label": "calls",
    "to": 461
  }, {
    "from": 394,
    "label": "calls",
    "to": 461
  }, {
    "from": 394,
    "label": "calls",
    "to": 461
  }, {
    "from": 394,
    "label": "calls",
    "to": 461
  }, {
    "from": 394,
    "label": "calls",
    "to": 461
  }, {
    "from": 394,
    "label": "calls",
    "to": 461
  }, {
    "from": 394,
    "label": "calls",
    "to": 461
  }, {
    "from": 394,
    "label": "calls",
    "to": 461
  }, {
    "from": 394,
    "label": "calls",
    "to": 461
  }, {
    "from": 394,
    "label": "calls",
    "to": 461
  }, {
    "from": 394,
    "label": "calls",
    "to": 461
  }, {
    "from": 394,
    "label": "calls",
    "to": 461
  }, {
    "from": 394,
    "label": "calls",
    "to": 461
  }, {
    "from": 394,
    "label": "calls",
    "to": 461
  }, {
    "from": 394,
    "label": "calls",
    "to": 461
  }, {
    "from": 394,
    "label": "calls",
    "to": 461
  }, {
    "from": 394,
    "label": "calls",
    "to": 461
  }, {
    "from": 154,
    "label": "calls",
    "to": 399
  }, {
    "from": 154,
    "label": "calls",
    "to": 421
  }, {
    "from": 1,
    "label": "contains",
    "to": 394
  }, {
    "from": 394,
    "label": "declares",
    "to": 8
  }, {
    "from": 394,
    "label": "declares",
    "to": 17
  }, {
    "from": 394,
    "label": "declares",
    "to": 24
  }, {
    "from": 394,
    "label": "declares",
    "to": 26
  }, {
    "from": 394,
    "label": "declares",
    "to": 33
  }, {
    "from": 394,
    "label": "declares",
    "to": 56
  }, {
    "from": 394,
    "label": "declares",
    "to": 58
  }, {
    "from": 394,
    "label": "declares",
    "to": 65
  }, {
    "from": 394,
    "label": "declares",
    "to": 73
  }, {
    "from": 394,
    "label": "declares",
    "to": 84
  }, {
    "from": 394,
    "label": "declares",
    "to": 98
  }, {
    "from": 394,
    "label": "declares",
    "to": 104
  }, {
    "from": 394,
    "label": "declares",
    "to": 111
  }, {
    "from": 394,
    "label": "declares",
    "to": 117
  }, {
    "from": 394,
    "label": "declares",
    "to": 125
  }, {
    "from": 394,
    "label": "declares",
    "to": 129
  }, {
    "from": 394,
    "label": "declares",
    "to": 134
  }, {
    "from": 394,
    "label": "declares",
    "to": 147
  }, {
    "from": 394,
    "label": "declares",
    "to": 154
  }, {
    "from": 394,
    "label": "declares",
    "to": 378
  }, {
    "from": 394,
    "label": "declares",
    "to": 380
  }, {
    "from": 394,
    "label": "declares",
    "to": 382
  }, {
    "from": 394,
    "label": "declares",
    "to": 384
  }, {
    "from": 394,
    "label": "declares",
    "to": 385
  }, {
    "from": 394,
    "label": "declares",
    "to": 388
  }, {
    "from": 394,
    "label": "declares",
    "to": 391
  }, {
    "from": 394,
    "label": "declares",
    "to": 392
  }, {
    "from": 394,
    "label": "declares",
    "to": 393
  }, {
    "from": 1,
    "label": "contains",
    "to": 463
  }, {
    "from": 1,
    "label": "contains",
    "to": 464
  }, {
    "from": 463,
    "label": "initializes",
    "to": 465
  }, {
    "from": 465,
    "label": "assigns",
    "to": 466
  }, {
    "from": 463,
    "label": "initializes",
    "to": 467
  }, {
    "from": 467,
    "label": "assigns",
    "to": 468
  }, {
    "from": 463,
    "label": "initializes",
    "to": 469
  }, {
    "from": 469,
    "label": "assigns",
    "to": 470
  }, {
    "from": 463,
    "label": "initializes",
    "to": 471
  }, {
    "from": 471,
    "label": "assigns",
    "to": 472
  }, {
    "from": 463,
    "label": "initializes",
    "to": 473
  }, {
    "from": 473,
    "label": "assigns",
    "to": 474
  }, {
    "from": 463,
    "label": "initializes",
    "to": 475
  }, {
    "from": 475,
    "label": "assigns",
    "to": 476
  }, {
    "from": 463,
    "label": "initializes",
    "to": 477
  }, {
    "from": 477,
    "label": "assigns",
    "to": 478
  }, {
    "from": 463,
    "label": "initializes",
    "to": 479
  }, {
    "from": 479,
    "label": "assigns",
    "to": 480
  }, {
    "from": 463,
    "label": "initializes",
    "to": 481
  }, {
    "from": 481,
    "label": "assigns",
    "to": 482
  }, {
    "from": 463,
    "label": "initializes",
    "to": 483
  }, {
    "from": 483,
    "label": "assigns",
    "to": 484
  }, {
    "from": 463,
    "label": "initializes",
    "to": 485
  }, {
    "from": 485,
    "label": "assigns",
    "to": 486
  }, {
    "from": 463,
    "label": "initializes",
    "to": 487
  }, {
    "from": 487,
    "label": "assigns",
    "to": 488
  }, {
    "from": 463,
    "label": "initializes",
    "to": 489
  }, {
    "from": 489,
    "label": "assigns",
    "to": 490
  }, {
    "from": 463,
    "label": "initializes",
    "to": 491
  }, {
    "from": 491,
    "label": "assigns",
    "to": 492
  }, {
    "from": 463,
    "label": "initializes",
    "to": 493
  }, {
    "from": 493,
    "label": "assigns",
    "to": 494
  }, {
    "from": 464,
    "label": "initializes",
    "to": 495
  }, {
    "from": 495,
    "label": "requires",
    "to": 4
  }, {
    "from": 464,
    "label": "initializes",
    "to": 496
  }, {
    "from": 496,
    "label": "requires",
    "to": 400
  }, {
    "from": 464,
    "label": "initializes",
    "to": 497
  }, {
    "from": 497,
    "label": "requires",
    "to": 5
  }, {
    "from": 464,
    "label": "initializes",
    "to": 498
  }, {
    "from": 498,
    "label": "requires",
    "to": 6
  }, {
    "from": 464,
    "label": "initializes",
    "to": 499
  }, {
    "from": 499,
    "label": "requires",
    "to": 7
  }, {
    "from": 464,
    "label": "initializes",
    "to": 500
  }, {
    "from": 500,
    "label": "requires",
    "to": 402
  }, {
    "from": 464,
    "label": "initializes",
    "to": 501
  }, {
    "from": 501,
    "label": "requires",
    "to": 436
  }, {
    "from": 464,
    "label": "initializes",
    "to": 502
  }, {
    "from": 502,
    "label": "requires",
    "to": 503
  }, {
    "from": 464,
    "label": "initializes",
    "to": 504
  }, {
    "from": 504,
    "label": "requires",
    "to": 505
  }, {
    "from": 464,
    "label": "initializes",
    "to": 506
  }, {
    "from": 506,
    "label": "requires",
    "to": 507
  }, {
    "from": 464,
    "label": "initializes",
    "to": 508
  }, {
    "from": 508,
    "label": "requires",
    "to": 509
  }, {
    "from": 464,
    "label": "initializes",
    "to": 510
  }, {
    "from": 510,
    "label": "requires",
    "to": 3
  }, {
    "from": 464,
    "label": "initializes",
    "to": 511
  }, {
    "from": 511,
    "label": "requires",
    "to": 3
  }, {
    "from": 464,
    "label": "initializes",
    "to": 512
  }, {
    "from": 512,
    "label": "requires",
    "to": 442
  }, {
    "from": 464,
    "label": "initializes",
    "to": 513
  }, {
    "from": 513,
    "label": "requires",
    "to": 410
  }, {
    "from": 464,
    "label": "initializes",
    "to": 514
  }, {
    "from": 514,
    "label": "requires",
    "to": 3
  }, {
    "from": 464,
    "label": "initializes",
    "to": 515
  }, {
    "from": 515,
    "label": "requires",
    "to": 516
  }, {
    "from": 464,
    "label": "initializes",
    "to": 517
  }, {
    "from": 517,
    "label": "requires",
    "to": 518
  }, {
    "from": 464,
    "label": "initializes",
    "to": 519
  }, {
    "from": 519,
    "label": "requires",
    "to": 520
  }, {
    "from": 464,
    "label": "initializes",
    "to": 521
  }, {
    "from": 521,
    "label": "requires",
    "to": 2
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 391
  }, {
    "from": 70,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 70,
    "label": "hasArgument",
    "to": 393
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "html",
    "type": "module"
  }, {
    "id": 2,
    "text": "templates",
    "type": "module"
  }, {
    "id": 3,
    "text": "init",
    "type": "module"
  }, {
    "id": 4,
    "text": "io",
    "type": "module"
  }, {
    "id": 5,
    "text": "lp",
    "type": "module"
  }, {
    "id": 6,
    "text": "util",
    "type": "module"
  }, {
    "id": 7,
    "text": "luadocer",
    "type": "module"
  }, {
    "id": 8,
    "text": "local function customStringFind(sample, pattern)\r\n  local i = 1\r\n  \r\n  if(#pattern > #sample) then  --If path to root directory is longer than path to file\r\n    return nil \r\n  end\r\n  \r\n  for i = 1, #pattern do --Looping trough paths and looking for match\r\n    \r\n    local sampleChar = string.sub(sample, i, i)\r\n    local patternChar = string.sub(pattern, i, i)\r\n    \r\n    if(sampleChar ~= patternChar) then --If paths does not match\r\n      return nil\r\n    end\r\n  end\r\n  \r\n  return (#pattern + 1) --If paths matches returns start of sample which is not included in pattern\r\n  \r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "local i = 1",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "if(#pattern > #sample) then  --If path to root directory is longer than path to file\r\n    return nil \r\n  end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 12,
    "text": "for i = 1, #pattern do --Looping trough paths and looking for match\r\n    \r\n    local sampleChar = string.sub(sample, i, i)\r\n    local patternChar = string.sub(pattern, i, i)\r\n    \r\n    if(sampleChar ~= patternChar) then --If paths does not match\r\n      return nil\r\n    end\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 13,
    "text": "local sampleChar = string.sub(sample, i, i)",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "local patternChar = string.sub(pattern, i, i)",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "if(sampleChar ~= patternChar) then --If paths does not match\r\n      return nil\r\n    end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function cutPathToSources(path)\r\n  \r\n  for _, name in pairs(options.files) do\r\n\r\n    local index = name:match('^.*()/') --Checks for last /\r\n    name = string.sub(name, 0, index)\r\n\r\n    local res = customStringFind(path, name)\r\n    if(res ~= nil) then --If file is in directory\r\n      \r\n      return ('/' .. string.sub(path, res)) --Returns substring\r\n      \r\n    end\r\n  end\r\n  \r\n  return path --If ndirectory does not contain file returns full path\r\n  \r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "for _, name in pairs(options.files) do\r\n\r\n    local index = name:match('^.*()/') --Checks for last /\r\n    name = string.sub(name, 0, index)\r\n\r\n    local res = customStringFind(path, name)\r\n    if(res ~= nil) then --If file is in directory\r\n      \r\n      return ('/' .. string.sub(path, res)) --Returns substring\r\n      \r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 19,
    "text": "local index = name:match('^.*()/')",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "name = string.sub(name, 0, index)",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "local res = customStringFind(path, name)",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "if(res ~= nil) then --If file is in directory\r\n      \r\n      return ('/' .. string.sub(path, res)) --Returns substring\r\n      \r\n    end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "local function addLinksToTemplate(template)\r\n\r\n\t--Find sequence of chars representing link to another file in documentation and substitute for working link\r\n\treturn string.gsub(template, \"#|type=fileLink|to=([^|].-)|from=([^|].-)|#\", function(a, b) return file_link(a, b) end)\r\n\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "local function search (path, name)\r\n\r\n  for c in string.gfind(path, \"[^;]+\") do\r\n    c = string.gsub(c, \"%?\", name)\r\n    local f = io.open(c)\r\n    if f then   -- file exist?\r\n      f:close()\r\n      return c\r\n    end\r\n  end\r\n  return nil    -- file not found\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "for c in string.gfind(path, \"[^;]+\") do\r\n    c = string.gsub(c, \"%?\", name)\r\n    local f = io.open(c)\r\n    if f then   -- file exist?\r\n      f:close()\r\n      return c\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 28,
    "text": "c = string.gsub(c, \"%?\", name)",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "local f = io.open(c)",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "if f then   -- file exist?\r\n      f:close()\r\n      return c\r\n    end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function include (template, env)\r\n\t-- template_dir is relative to package.path\r\n\tlocal templatepath = options.template_dir .. template\r\n\ttemplatepath = templatepath:gsub(\"\\/\\/\",\"\\/\")\r\n\t-- search using package.path (modified to search .lp instead of .lua\r\n\tlocal search_path = string.gsub(package.path, \"%.lua\", \"\")\r\n\tlocal templatepath = search(search_path, templatepath)\r\n\r\n\tassert(templatepath, string.format(\"template `%s' not found\", template))\r\n\r\n\tenv = env or {}\r\n\tenv.table = table\r\n\tenv.io = io\r\n\tenv.lp = lp\r\n\tenv.ipairs = ipairs\r\n\tenv.pairs = pairs\r\n\tenv.tonumber = tonumber\r\n\tenv.tostring = tostring\r\n\tenv.string = string\r\n\tenv.type = type\r\n\tenv.luadoc = luadoc\r\n\tenv.options = options\r\n\tenv.roundNumber = function(number)\r\n\t\tlocal index = string.find(number,'%.')\r\n\t\tif (index) then\r\n\t\t\treturn string.sub(number, 1, index + 2)\r\n\t\telse\r\n\t\t\treturn number\r\n\t\tend\r\n\tend\r\n\tenv.getUniqueId = getUniqueId\r\n\treturn lp.include(templatepath, env)\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "local templatepath = options.template_dir .. template",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "templatepath = templatepath:gsub(\"\\/\\/\",\"\\/\")",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "local search_path = string.gsub(package.path, \"%.lua\", \"\")",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "local templatepath = search(search_path, templatepath)",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "assert(templatepath, string.format(\"template `%s' not found\", template))",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "env = env or {}",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "env.table = table",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "env.io = io",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "env.lp = lp",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "env.ipairs = ipairs",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "env.pairs = pairs",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "env.tonumber = tonumber",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "env.tostring = tostring",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "env.string = string",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "env.type = type",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "env.luadoc = luadoc",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "env.options = options",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "env.roundNumber = function(number)\r\n\t\tlocal index = string.find(number,'%.')\r\n\t\tif (index) then\r\n\t\t\treturn string.sub(number, 1, index + 2)\r\n\t\telse\r\n\t\t\treturn number\r\n\t\tend\r\n\tend",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "local index = string.find(number,'%.')",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "if (index) then\r\n\t\t\treturn string.sub(number, 1, index + 2)\r\n\t\telse\r\n\t\t\treturn number\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "env.getUniqueId = getUniqueId",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function(number)\r\n\t\tlocal index = string.find(number,'%.')\r\n\t\tif (index) then\r\n\t\t\treturn string.sub(number, 1, index + 2)\r\n\t\telse\r\n\t\t\treturn number\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function link (html, from)\r\n\thtml = html:gsub(lfs.currentdir(), \"\")\r\n\tlocal h = html\r\n  \r\n\tfrom = from or \"\"\r\n  \r\n\tstring.gsub(from, \"/\", function () h = \"../\" .. h end)\r\n\r\n\treturn h\r\nend",
    "type": "function"
  }, {
    "id": 59,
    "text": "html = html:gsub(lfs.currentdir(), \"\")",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "local h = html",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "from = from or \"\"",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "string.gsub(from, \"/\", function () h = \"../\" .. h end)",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "h = \"../\" .. h",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "function module_link (modulename, doc, from)\r\n\t-- TODO: replace \".\" by \"/\" to create directories?\r\n\t-- TODO: how to deal with module names with \"/\"?\r\n\tassert(modulename)\r\n\tassert(doc)\r\n\tfrom = from or \"\"\r\n\t\r\n\tif doc.modules[modulename] == nil then\r\n--\t\tlogger:error(string.format(\"unresolved reference to module `%s'\", modulename))\r\n\t\treturn\r\n\tend\r\n\t\r\n\tlocal href = \"modules/\" .. modulename .. \".html\"\r\n\tstring.gsub(from, \"/\", function () href = \"../\" .. href end)\r\n\treturn href\r\nend",
    "type": "function"
  }, {
    "id": 66,
    "text": "assert(modulename)",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "assert(doc)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "if doc.modules[modulename] == nil then\r\n--\t\tlogger:error(string.format(\"unresolved reference to module `%s'\", modulename))\r\n\t\treturn\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "local href = \"modules/\" .. modulename .. \".html\"",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "string.gsub(from, \"/\", function () href = \"../\" .. href end)",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "href = \"../\" .. href",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "function file_link (to, from)\r\n\tto = to:gsub(lfs.currentdir(), \"\")\r\n\tassert(to)\r\n\tfrom = from or \"\"\r\n\t\r\n  \tto = cutPathToSources(to)\r\n  \r\n\tlocal href = to\r\n\t\r\n\thref = string.gsub(href, \"lua$\", \"html\")\r\n\thref = string.gsub(href, \"luadoc$\", \"html\")\r\n\thref = \"files/\t\" .. href\r\n\tstring.gsub(from, \"/\", function () href = \"../\" .. href end)\r\n\thref = href:gsub(lfs.currentdir(), \"\")\r\n\r\n\thref = string.gsub(href, \"\\t\", \"\")\r\n\r\n\treturn href\r\nend",
    "type": "function"
  }, {
    "id": 74,
    "text": "to = to:gsub(lfs.currentdir(), \"\")",
    "type": "statement:assign"
  }, {
    "id": 75,
    "text": "assert(to)",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "to = cutPathToSources(to)",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "local href = to",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "href = string.gsub(href, \"lua$\", \"html\")",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "href = string.gsub(href, \"luadoc$\", \"html\")",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "href = \"files/\t\" .. href",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "href = href:gsub(lfs.currentdir(), \"\")",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "href = string.gsub(href, \"\\t\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "function link_to (fname, doc, module_doc, file_doc, from, kind)\r\n\tassert(fname)\r\n\tassert(doc)\r\n\tfrom = from or \"\"\r\n\tkind = kind or \"functions\"\r\n\tif file_doc then\r\n\t\tfor _, func_name in pairs(file_doc[kind]) do\r\n\t\t\tif func_name == fname then\r\n\r\n\t\t\t\treturn file_link(file_doc.name, from) .. \"#\" .. fname\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\t\r\n\tlocal _, _, modulename, fname = string.find(fname, \"^(.-)[%.%:]?([^%.%:]*)$\")\r\n\tassert(fname)\r\n\r\n\t-- if fname does not specify a module, use the module_doc\r\n\tif string.len(modulename) == 0 and module_doc then\r\n\t\tmodulename = module_doc.name\r\n\tend\r\n\r\n\tlocal module_doc = doc.modules[modulename]\r\n\tif not module_doc then\r\n--\t\tlogger:error(string.format(\"unresolved reference to function `%s': module `%s' not found\", fname, modulename))\r\n\t\treturn\r\n\tend\r\n\t\r\n\tfor _, func_name in pairs(module_doc[kind]) do\r\n\r\n\t\tif func_name == fname then\r\n\t\t\treturn module_link(modulename, doc, from) .. \"#\" .. fname\r\n\t\tend\r\n\tend\r\n\t\r\n--\tlogger:error(string.format(\"unresolved reference to function `%s' of module `%s'\", fname, modulename))\r\nend",
    "type": "function"
  }, {
    "id": 85,
    "text": "assert(fname)",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "kind = kind or \"functions\"",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "if file_doc then\r\n\t\tfor _, func_name in pairs(file_doc[kind]) do\r\n\t\t\tif func_name == fname then\r\n\r\n\t\t\t\treturn file_link(file_doc.name, from) .. \"#\" .. fname\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 88,
    "text": "for _, func_name in pairs(file_doc[kind]) do\r\n\t\t\tif func_name == fname then\r\n\r\n\t\t\t\treturn file_link(file_doc.name, from) .. \"#\" .. fname\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 89,
    "text": "if func_name == fname then\r\n\r\n\t\t\t\treturn file_link(file_doc.name, from) .. \"#\" .. fname\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 90,
    "text": "local _, _, modulename, fname = string.find(fname, \"^(.-)[%.%:]?([^%.%:]*)$\")",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "if string.len(modulename) == 0 and module_doc then\r\n\t\tmodulename = module_doc.name\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "modulename = module_doc.name",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "local module_doc = doc.modules[modulename]",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "if not module_doc then\r\n--\t\tlogger:error(string.format(\"unresolved reference to function `%s': module `%s' not found\", fname, modulename))\r\n\t\treturn\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 95,
    "text": "for _, func_name in pairs(module_doc[kind]) do\r\n\r\n\t\tif func_name == fname then\r\n\t\t\treturn module_link(modulename, doc, from) .. \"#\" .. fname\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 96,
    "text": "if func_name == fname then\r\n\t\t\treturn module_link(modulename, doc, from) .. \"#\" .. fname\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 98,
    "text": "function symbol_link (symbol, doc, module_doc, file_doc, from)\r\n\tassert(symbol)\r\n\tassert(doc)\r\n\t\r\n\tlocal href = \r\n--\t\tfile_link(symbol, from) or\r\n\t\tmodule_link(symbol, doc, from) or \r\n\t\tlink_to(symbol, doc, module_doc, file_doc, from, \"functions\") or\r\n\t\tlink_to(symbol, doc, module_doc, file_doc, from, \"tables\")\r\n\t\r\n\tif not href then\r\n\t\tlogger:error(string.format(\"unresolved reference to symbol `%s'\", symbol))\r\n\tend\r\n\t\r\n\treturn href or \"\"\r\nend",
    "type": "function"
  }, {
    "id": 99,
    "text": "assert(symbol)",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "local href = \r\n--\t\tfile_link(symbol, from) or\r\n\t\tmodule_link(symbol, doc, from) or \r\n\t\tlink_to(symbol, doc, module_doc, file_doc, from, \"functions\") or\r\n\t\tlink_to(symbol, doc, module_doc, file_doc, from, \"tables\")",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "if not href then\r\n\t\tlogger:error(string.format(\"unresolved reference to symbol `%s'\", symbol))\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 102,
    "text": "logger:error(string.format(\"unresolved reference to symbol `%s'\", symbol))",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 104,
    "text": "function out_file (filename)\r\n\tlocal h = filename\r\n\th = string.gsub(h, \"lua$\", \"html\")\r\n\th = string.gsub(h, \"luadoc$\", \"html\")\r\n\th = \"files\" .. h\r\n--\th = options.output_dir .. string.gsub (h, \"^.-([%w_]+%.html)$\", \"%1\")\r\n\th = options.output_dir .. h\r\n\r\n\treturn h\r\nend",
    "type": "function"
  }, {
    "id": 105,
    "text": "local h = filename",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "h = string.gsub(h, \"lua$\", \"html\")",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "h = string.gsub(h, \"luadoc$\", \"html\")",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "h = \"files\" .. h",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "h = options.output_dir .. h",
    "type": "statement:assign"
  }, {
    "id": 110,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 111,
    "text": "function out_function (filename,func_name,unique_id)\r\n\r\n\tlocal h = filename:match(\"[^/\\]+$\");\r\n\tfunc_name=func_name:gsub(\"[^A-Za-z0-9_]\",\"\");\r\n\th = string.gsub(h, \"%.lua$\", unique_id..func_name..\".html\")\r\n\th = string.gsub(h, \"%.luadoc$\", unique_id..func_name..\".html\")\r\n\treturn h\r\nend",
    "type": "function"
  }, {
    "id": 112,
    "text": "local h = filename:match(\"[^/\\]+$\")",
    "type": "statement:localassign"
  }, {
    "id": 113,
    "text": "func_name=func_name:gsub(\"[^A-Za-z0-9_]\",\"\")",
    "type": "statement:assign"
  }, {
    "id": 114,
    "text": "h = string.gsub(h, \"%.lua$\", unique_id..func_name..\".html\")",
    "type": "statement:assign"
  }, {
    "id": 115,
    "text": "h = string.gsub(h, \"%.luadoc$\", unique_id..func_name..\".html\")",
    "type": "statement:assign"
  }, {
    "id": 116,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 117,
    "text": "function file_copy(file)\r\n\tlocal  temp = options.template_dir..file\r\n\ttemp = temp:gsub(\"\\/\\/\",\"\\/\")\r\n\r\n\tlocal f = lfs.open(options.template_dir..file, \"rb\") --binary open is significant in windows systems\r\n\t\r\n\tlocal data=f:read(\"*all\");\r\n\tf:close();\r\n\tf=lfs.open(options.output_dir..file, \"wb\")\r\n\tf:write(data);\r\n\tf:close();\r\nend",
    "type": "function"
  }, {
    "id": 118,
    "text": "local  temp = options.template_dir..file",
    "type": "statement:localassign"
  }, {
    "id": 119,
    "text": "temp = temp:gsub(\"\\/\\/\",\"\\/\")",
    "type": "statement:assign"
  }, {
    "id": 120,
    "text": "local f = lfs.open(options.template_dir..file, \"rb\")",
    "type": "statement:localassign"
  }, {
    "id": 121,
    "text": "local data=f:read(\"*all\")",
    "type": "statement:localassign"
  }, {
    "id": 122,
    "text": "f=lfs.open(options.output_dir..file, \"wb\")",
    "type": "statement:assign"
  }, {
    "id": 123,
    "text": "f:write(data)",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 125,
    "text": "function out_module (modulename)\r\n\tlocal h = modulename .. \".html\"\r\n\th = \"modules/\" .. h\r\n\th = options.output_dir .. h\r\n\treturn h\r\nend",
    "type": "function"
  }, {
    "id": 126,
    "text": "local h = modulename .. \".html\"",
    "type": "statement:localassign"
  }, {
    "id": 127,
    "text": "h = \"modules/\" .. h",
    "type": "statement:assign"
  }, {
    "id": 128,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 129,
    "text": "local function print_table(tbl)\r\n\tfor key,value in pairs(tbl) do\r\n\t--\tprint(key,\" \",value);\r\n\t\tif(type(value)==\"table\") then \r\n\t\t\tprint_table(value);\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 130,
    "text": "for key,value in pairs(tbl) do\r\n\t--\tprint(key,\" \",value);\r\n\t\tif(type(value)==\"table\") then \r\n\t\t\tprint_table(value);\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 131,
    "text": "if(type(value)==\"table\") then \r\n\t\t\tprint_table(value);\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 132,
    "text": "print_table(value)",
    "type": "statement:functioncall"
  }, {
    "id": 133,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 134,
    "text": "function strsplit(delimiter, text)\r\n  local list = {}\r\n  local pos = 1\r\n  if string.find(\"\", delimiter, 1) then -- this would result in endless loops\r\n    error(\"delimiter matches empty string!\")\r\n  end\r\n  while 1 do\r\n    local first, last = string.find(text, delimiter, pos)\r\n    if first then -- found?\r\n    if(string.sub(text, pos, first-1) ~='')then\r\n      table.insert(list, string.sub(text, pos, first-1))\r\n     end \r\n      pos = last+1\r\n    else\r\n      table.insert(list, string.sub(text, pos))\r\n      break\r\n    end\r\n  end\r\n  return list\r\nend",
    "type": "function"
  }, {
    "id": 135,
    "text": "local list = {}",
    "type": "statement:localassign"
  }, {
    "id": 136,
    "text": "local pos = 1",
    "type": "statement:localassign"
  }, {
    "id": 137,
    "text": "if string.find(\"\", delimiter, 1) then -- this would result in endless loops\r\n    error(\"delimiter matches empty string!\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 138,
    "text": "error(\"delimiter matches empty string!\")",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "while 1 do\r\n    local first, last = string.find(text, delimiter, pos)\r\n    if first then -- found?\r\n    if(string.sub(text, pos, first-1) ~='')then\r\n      table.insert(list, string.sub(text, pos, first-1))\r\n     end \r\n      pos = last+1\r\n    else\r\n      table.insert(list, string.sub(text, pos))\r\n      break\r\n    end\r\n  end",
    "type": "statement:while"
  }, {
    "id": 140,
    "text": "local first, last = string.find(text, delimiter, pos)",
    "type": "statement:localassign"
  }, {
    "id": 141,
    "text": "if first then -- found?\r\n    if(string.sub(text, pos, first-1) ~='')then\r\n      table.insert(list, string.sub(text, pos, first-1))\r\n     end \r\n      pos = last+1\r\n    else\r\n      table.insert(list, string.sub(text, pos))\r\n      break\r\n    end",
    "type": "statement:if"
  }, {
    "id": 142,
    "text": "if(string.sub(text, pos, first-1) ~='')then\r\n      table.insert(list, string.sub(text, pos, first-1))\r\n     end",
    "type": "statement:if"
  }, {
    "id": 143,
    "text": "table.insert(list, string.sub(text, pos, first-1))",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "pos = last+1",
    "type": "statement:assign"
  }, {
    "id": 145,
    "text": "table.insert(list, string.sub(text, pos))",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 147,
    "text": "function check(string)\r\n\tlocal filepath_temp = {}\r\n\tif string ~= nil then\r\n\t\tfor k,v in ipairs(string) do\r\n\t\t\tfilepath_temp[k] = v:gsub(lfs.currentdir(), \"\")\r\n      \r\n      filepath_temp[k] = cutPathToSources(filepath_temp[k])\r\n      \r\n\t\tend\r\n\tend\r\n\treturn filepath_temp\r\nend",
    "type": "function"
  }, {
    "id": 148,
    "text": "local filepath_temp = {}",
    "type": "statement:localassign"
  }, {
    "id": 149,
    "text": "if string ~= nil then\r\n\t\tfor k,v in ipairs(string) do\r\n\t\t\tfilepath_temp[k] = v:gsub(lfs.currentdir(), \"\")\r\n      \r\n      filepath_temp[k] = cutPathToSources(filepath_temp[k])\r\n      \r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 150,
    "text": "for k,v in ipairs(string) do\r\n\t\t\tfilepath_temp[k] = v:gsub(lfs.currentdir(), \"\")\r\n      \r\n      filepath_temp[k] = cutPathToSources(filepath_temp[k])\r\n      \r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 151,
    "text": "filepath_temp[k] = v:gsub(lfs.currentdir(), \"\")",
    "type": "statement:assign"
  }, {
    "id": 152,
    "text": "filepath_temp[k] = cutPathToSources(filepath_temp[k])",
    "type": "statement:assign"
  }, {
    "id": 153,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 154,
    "text": "function start (doc)\r\n\t-- store global template helper functions in the doc object\r\n\t---------------\r\n\t-- Convert special charecters into HTML entities, this fixes MANY html-injection bugs on many pages\r\n\t-- @author Viliam Kubis\r\n\tdoc.sh=function (text)\r\n\r\n\t\tif text~= nil then\r\n\t\t\ttext = text:gsub(lfs.currentdir(), \"\")\r\n\t\tend\r\n\t\tif(text==nil) then\r\n\t\t\treturn nil;\r\n\t\tend\r\n\t\tif(type(text)~=\"string\") then\r\n\t\t\treturn text;\r\n\t\tend\r\n\t\ttext=text:gsub(\"&\",\"&amp;\");\r\n\t  \ttext=text:gsub(\"&#\",\"&#38;&#35;\");\r\n\t\ttext=text:gsub(\"<\",\"&lt;\");\r\n\t\ttext=text:gsub(\">\",\"&gt;\");\r\n\t\ttext=text:gsub(\"\\\"\",\"&#34;\");\r\n\t\ttext=text:gsub(\"'\",\"&#39;\");\r\n\t\treturn text;\r\n\tend;\r\n--KOSA\r\n---\r\n-- Helper for indexOfFunctions/Tables\r\n\tdoc.pathprefix=function(paths)\r\n\t\tlocal prefix\r\n\t\tlocal newpref=''\r\n\t\tfor k,v in pairs(paths) do\t\r\n\t\t\tv.path = v.path:gsub(lfs.currentdir(), \"\")\r\n\t\t--OKA\r\n\t\t\tif(prefix==nil)then\r\n\t\t\t\t\r\n\t\t\telseif(prefix~=v.path)then\r\n\t\t\t\tlocal split1 = {}\r\n\t\t\t\tlocal split2 = {}\r\n\t\t\t\tfor _,split in pairs(strsplit('/',prefix))do\r\n\t\t\t\t\ttable.insert(split1,split)\r\n\t\t\t\tend\r\n\t\t\t\tfor _,split in pairs(strsplit('/',v.path))do\r\n\t\t\t\t\ttable.insert(split2,split)\r\n\t\t\t\tend\r\n\t\t\t\tif(#split1 > #split2)then\r\n\t\t\t\t\tfor index,str in pairs(split2) do\r\n\t\t\t\t\t\tif(split1[index]==str)then\r\n\t\t\t\t\t\t\tif(newpref=='')then\r\n\t\t\t\t\t\t\t\tnewpref = '/' .. str\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tnewpref = newpref  .. '/' .. str\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\telse\r\n\t\t\t\t\tfor index,str in pairs(split1) do\r\n\t\t\t\t\t\tif(split2[index]==str)then\r\n\t\t\t\t\t\t\tif(newpref=='')then\r\n\t\t\t\t\t\t\t\tnewpref = '/' .. str\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tnewpref = newpref  .. '/' ..  str\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\t\tend\r\n\t\t\t\tprefix = newpref\t\t\t\r\n\t\t\t\tnewpref=''\r\n\t\t\tend\r\n\t\tend\r\n\r\n\t\treturn prefix\r\n\tend;\r\n---\r\n-- Helper for indexOfFunctions/\t\r\n\tdoc.pathsuffix=function(common,full)\r\n\t\tlocal suffix\r\n\t\tif(full == common or common==nil)then\r\n\t\t\treturn ''\r\n\t\tend\r\n\t\tsuffix = string.sub(full,string.len(common)+1)\r\n\t\treturn suffix\r\n\tend;\r\n-------------------------------------------------------------------\t\r\n\t-- Generate index file\r\n\tif (#doc.files > 0 or #doc.modules > 0) and (not options.noindexpage) then\r\n\r\n\t\t-- KARASEK\r\n\t\tif options.plantuml_path ~= nil then \r\n\t\t\tdoc.diagram = 1 \t\t\t\t\t-- add 'UML diagrams' option to menu \r\n\t\tend\r\n\r\n\t\tif options.syntax_check == \"write\" then\r\n\t\t\tdoc.check = 1 \t\t\t\t\t-- add 'Static analysis' option to menu \r\n\t\tend\r\n\t\t\r\n\t\tlocal filename = options.output_dir..\"index.html\"\r\n\t\tlogger:info(string.format(\"generating file `%s'\", filename))\r\n\t\tlocal f = lfs.open(filename, \"w\")\r\n\t\tassert(f, string.format(\"could not open `%s' for writing\", filename))\r\n\t\tio.output(f)\r\n\t\tinclude(\"index.lp\", { doc = doc, os=os })\r\n\t\tf:close()\r\n\tend\r\n\t\r\n\t-- Generate list of modules (will not be accesible when nomodules=on)\r\n\tlocal filename = options.output_dir..\"list_of_modules.html\"\r\n\tlogger:info(string.format(\"generating file `%s'\", filename))\r\n\tlocal f = lfs.open(filename, \"w\")\r\n\tassert(f, string.format(\"could not open `%s' for writing\", filename))\r\n\tio.output(f)\r\n\tinclude(\"list_of_modules.lp\", { doc = doc })\r\n\tf:close()\r\n\t\r\n\t-- Generate list of files (will not be accesible when nofiles=on)\r\n\tlocal filename = options.output_dir..\"list_of_files.html\"\r\n\tlogger:info(string.format(\"generating file `%s'\", filename))\r\n\tlocal f = lfs.open(filename, \"w\")\r\n\tassert(f, string.format(\"could not open `%s' for writing\", filename))\r\n\tio.output(f)\r\n\tinclude(\"list_of_files.lp\", { doc = doc })\r\n\tf:close()\r\n\r\n\t-- generate module hierarchy\r\n\tlocal module_hierarchy={};\r\n\tfor _, modulename in ipairs(doc.modules) do\r\n\t\tlocal last=modulename:gsub(\"%..+$\",\"\");\r\n\t\tif(last~=modulename) then --nazov s bodkou\r\n\t\t\tlocal key=modulename:match(\"(.+)%..+$\");\r\n\t\t\tif(not module_hierarchy[key]) then\r\n\t\t\t\tmodule_hierarchy[key]={modulename:match(\"[^.]+$\")};\r\n\t\t\telse\r\n\t\t\t\ttable.insert(module_hierarchy[key],modulename:match(\"[^.]+$\"));\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\tfor k,v in pairs(module_hierarchy) do\r\n\t\tlocal filename = options.output_dir..\"module_hierarchy/\"..k..\".html\" -- WARNING: might not be safe! Module name could contain special characters..\r\n\t\tlogger:info(string.format(\"generating file `%s'\", filename))\r\n\t\tlocal f = lfs.open(filename, \"w\")\r\n\t\tassert(f, string.format(\"could not open `%s' for writing\", filename))\r\n\t\tio.output(f)\r\n\t\tinclude(\"module_hierarchy.lp\", { doc = doc, modname=k, hierarchy=v })\r\n\t\tf:close()\r\n\tend\r\n\tmodule_hierarchy=nil;\r\n\t\r\n\t-- generate file listing for each subdirectory in the project\r\n\tlocal file_hierarchy={};\r\n\tfor _, filename in ipairs(doc.files) do\r\n\t\tlocal last=filename:gsub(\"/.+$\",\"\");\r\n\r\n\t\tif(last~=filename) then --nazov v adresari\r\n\t\t\tlocal key=filename:match(\"(.+)/.+$\");\r\n\t\t\tif(not file_hierarchy[key]) then\r\n\t\t\t\tfile_hierarchy[key]={filename:match(\"[^/]+$\")};\r\n\t\t\telse\r\n\t\t\t\ttable.insert(file_hierarchy[key],filename:match(\"[^/]+$\"));\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\t\r\n\tfor k,v in pairs(file_hierarchy) do\r\n\t\tk = k:gsub(lfs.currentdir(), \"\")\r\n    k = cutPathToSources(k)\r\n\t\tlocal filename = options.output_dir..\"files\"..k..\"/file_listing.lua.lua.lua.html\";  -- NOT OK if the directory contains file named file_listing.lua.lua.lua.lua -> becomes file_listing.lua.lua.lua.html -> TODO: generate unique filename somehow or store in a different folder (e.g listings/)\r\n\r\n\t\tlogger:info(string.format(\"generating file `%s'\", filename))\r\n\t\tlocal f = lfs.open(filename, \"w\")\r\n\t\tassert(f, string.format(\"could not open `%s' for writing\", filename))\r\n\t\tio.output(f)\r\n\t\tinclude(\"file_listing.lp\", { doc = doc, fname=k, hierarchy=v })\r\n\t\tf:close()\r\n\tend\r\n\r\n\t-- KARASEK\r\n\t-- static check\r\n\tif options.syntax_check == \"print\" then  \t\t-- if 'print' was on stdin then just print to stdout \r\n\t\tprint(\"Start syntax analysis...\");\r\n\r\n\t\tfor _, filepath in ipairs(doc.files) do\t\r\n\t\t\tos.execute(\"luacheck \" .. filepath)\r\n\t\tend\r\n\tend\r\n\r\n\tlocal analysis_results = {}\r\n\tif options.syntax_check == \"write\" then \r\n\t\tio.stdout:write(\"Syntax analysis...\\r\")\r\n\t\tio.stdout:flush()\r\n\t\t\r\n\t\tfor _, filepath in ipairs(doc.files) do\r\n\r\n\t\t\tlocal temp_file = filepath:gsub('.%w*$', '') .. \"_checking\" \t\t\t-- we need make temporary file of luacheck report\r\n\t\t\tos.execute(\"luacheck --no-color \" .. filepath .. \" > \" .. temp_file) \t-- execute analysis\r\n\t\t\t\r\n\t\t\tlocal result = pkio.ReadFile(temp_file) \t-- add analysis to table\r\n\t\t\tanalysis_results[#analysis_results+1] = {}\r\n\t\t\t\r\n\t\t\tif (string.match(result, \"Failure\")) then \t\t\t\t\t\t-- if we find \"Failure\" in result text it has warnings or errors\r\n\t\t\t\tanalysis_results[#analysis_results].name = filepath:gsub(lfs.currentdir(), \"\")\r\n\t\t\t\tanalysis_results[#analysis_results].status = 'Failure'\r\n\t\t\t\t\r\n\t\t\t\tlocal temp_result = result:gsub('^Checking(.+)Failure(.+)Total:(.+)', '%2')\r\n\t\t\t\ttemp_result = temp_result:gsub(filepath .. \":\", \"\")\r\n\r\n\t\t\t\tanalysis_results[#analysis_results].result = temp_result:gsub(\"%s%s+\",'\\n')\r\n\t\t\t\tanalysis_results[#analysis_results].info = result:gsub('^.+Total:', 'Total:')\r\n\t\t\telse -- if not then it's OK\r\n\t\t\t\tanalysis_results[#analysis_results].name = filepath:gsub(lfs.currentdir(), \"\")\r\n\t\t\tend\r\n\t\t\tos.remove(temp_file) \t\t\t\t\t\t\t\t\t\t\t\t\t-- remove that temporary file\r\n\t\tend\r\n\r\n\t\t-- DEBUG PRINT\r\n\t\t-- for k,v in ipairs(analysis_results) do\r\n\t\t-- \tprint(analysis_results[k])\r\n\t\t-- end\r\n\t\t\t\r\n\t\tio.stdout:write(\"Start syntax analysis...\\tOK\\n\")\r\n\t\tio.stdout:flush()\r\n\tend\r\n\r\n\t-- generate diagrams\r\n\tlocal diagram_results = {}\r\n\tlocal settings = {}\t\r\n\r\n\tif options.plantuml_path ~= nil then \r\n\t\tio.stdout:write(\"Generating diagrams... \\r\")\r\n\t\tio.stdout:flush()\r\n\r\n\t\tfor _, filepath in ipairs(doc.files) do\t\r\n\t\t\t\r\n\t\t\tlocal text = pkio.ReadFile(filepath)\r\n\t\t\tsettings.plantuml_path = options.plantuml_path .. \" %s\"\r\n\t\t\tsettings.dir_path = util.getabsolutepath(options.output_dir) .. '/'\r\n\t\t\tsettings.current_file = filepath\r\n      \r\n      settings.extended_path = cutPathToSources(filepath)\r\n      \r\n\t\t\t-- parse extended_path\r\n\t\t\tsettings.extended_path = settings.extended_path:gsub(\"^(.+)/.-$\",\"%1/\")\r\n\t\t\tsettings.extended_path = settings.extended_path:gsub(\"^\\/\",\"\")\r\n\t\t\t\r\n\t\t\tsettings.file_format = \"svg\"\r\n\t\t\tdiagram_results = luaplantuml.process_text(text, settings)\r\n\t\tend\r\n\t\t-- DEBUG PRINT\r\n\t\t-- for _, v in ipairs(diagram_results) do\r\n\t\t-- \tprint(v.name .. ' CESTA: ' .. v.path .. '  STRING: ' .. v.uml_string)\r\n\t\t-- end\r\n\t\tio.stdout:write(\"Generating diagrams...\\t\\tOK\\n\")\r\n\t\tio.stdout:flush()\r\n\tend\r\n\r\n\t--MODIFICATION \\\\\\ (Ivan Simko) pridane globalne metriky ... a metriky ulozene do kazdej file_doc tabulky\r\n\tio.stdout:write(\"Generating metrics...\\r\")\r\n\tio.stdout:flush()\r\n\r\n\t--MODIFIED BY: Martin Nagy - edited global metrics generation (through metrics.templates)\r\n\tlocal fileList = {} --Created file list to generate metrics\r\n\r\n\tfor _, filepath in ipairs(doc.files) do\r\n\t\ttable.insert(fileList, filepath)\r\n\tend\r\n\r\n\t--Generate metrics to globalMetrics\r\n\tlocal globalMetrics = template.createASTAndMerge(fileList, options.files)\r\n\r\n\t--Loop to extend AST with literate module\r\n\tfor _, filepath in ipairs(doc.files) do\r\n\t    \r\n\t    local text = pkio.ReadFile(filepath)\r\n\t    local formatted_text = formatter.format_text(text);\r\n\r\n\t    -- potrebne nahradit windows newlines za unix newlines, inak dvojite nove riadky!! [LEG zoberie ako SPACE separatne \\r aj \\n, moderne browsery ciste \\r interpretuju ako newline -> dvojite nove riadky]\r\n\t    formatted_text = formatted_text:gsub(\"\\r\\n\",\"\\n\");\r\n\t    \r\n\t    local AST = globalMetrics.file_AST_list[cutPathToSources(filepath)] --Using generated AST instead of creating new one\r\n      \r\n\t    local file_doc = doc.files[filepath]\r\n\t    file_doc.metricsAST = AST\r\n\t    file_doc.formatted_text = formatted_text;\r\n\r\n\t    comments.extendAST(AST) --MODIFIED BY: Michal Juranyi\r\n\tend\r\n   \r\n        --MODIFIED BY: Michal Juranyi\r\n\t--_ listOfFunctions is globalMetrics.functionDefinitions table converted to associative array\r\n\tlocal listOfFunctions = {}\r\n\r\n\tfor _,fun in ipairs(globalMetrics.functionDefinitions) do\r\n\t\tfun.docstring = comments.findDocstring(fun)\r\n\t\tlistOfFunctions[fun.name] = fun\r\n\tend\r\n\r\n\tliterate.functions = listOfFunctions\r\n        --END OF MODIFICATION BY MJ\r\n\r\n\t-- Process modules\r\n\tif not options.nomodules then\r\n\t\tfor _, modulename in ipairs(doc.modules) do\r\n\t\t\tlocal module_doc = doc.modules[modulename]\r\n\r\n\t\t\t-- assembly the filename\r\n\t\t\tlocal filename = out_module(modulename)\r\n\t\t\tlogger:info(string.format(\"generating file `%s'\", filename))\r\n\t\t\t\r\n\t\t\tlocal f = lfs.open(filename, \"w\")\r\n\t\t\tassert(f, string.format(\"could not open `%s' for writing\", filename))\r\n\t\t\tio.output(f)\r\n\t\t\tinclude(\"module.lp\", { doc = doc, module_doc = module_doc, globalMetrics= globalMetrics} )\r\n\t\t\tf:close()\r\n\t\tend\r\n\t\tio.stdout:write(\"Generating metrics...\\t\\tOK\\n\")\r\n\t\tio.stdout:flush()\r\n\tend\r\n\t\r\n\t-- MODIF (Ivan Simko) - odstranene ! -> tableofFunctions a tableOfMetrics\r\n\t\r\n\t-- Process files\r\n\tif not options.nofiles then\r\n\t\tfor _, filepath in ipairs(doc.files) do\r\n\t\t\tdoc.files[filepath].name = doc.files[filepath].name:gsub(lfs.currentdir(), \"\")\r\n\t\t\tlocal file_doc = doc.files[filepath]\r\n\t\t\tfile_doc.file_name=file_doc.name:match(\"[^/]+$\");\r\n\t\t\tfile_doc.name = file_doc.name:gsub(lfs.currentdir(), \"\")\r\n      file_doc.name = cutPathToSources(file_doc.name)\r\n\t\t\t--MODIFICATION \\\\\\ (Ivan Simko) -> variables formatted_text and metricsAST are taken from file_doc\r\n\t\t\tlocal highlighter_pt=nil;\r\n\t\t\tif(file_doc.formatted_text) then\r\n\t\t\t\t-- convert the metrics parse tree to highlighter-compatible parse tree and pass the result as the parse tree to use during the highlighting process\r\n\t\t\t\tfile_doc.prettyprint, highlighter_pt = highlighter.highlight_text(file_doc.formatted_text,ast_helper.metrics_to_highlighter(file_doc.metricsAST)) -- set prettyprinted text of file_doc (the whole file)\r\n\t\t\t\t-- highlighter_pt now contains modified compatible parse-tree\r\n\t\t\t\t\r\n\t\t\t\t-- VYTVORIT PRETTYPRINT PRE KAZDU FUNKCIU SEPARATNE!\r\n\t\t\t\t-- crazy tabulka.. numericke kluce maju textove hodnoty, ktore su textove kluce do tej istej tabulky.. v ktorych je samotna dokumentacia funkcie\r\n\t\t\t\t-- tiez vytvorit separatnu dokumentacnu stranku pre kazdu funkciu!\r\n\t\t\t\tfor pos, func_name in ipairs(file_doc.functions) do\r\n\t\t\t\t\tlocal functionNode = ast_helper.metrics_to_highlighter(file_doc.metricsAST.luaDoc_functions[func_name]) or {}\r\n\t\t\t\t\t--file_doc['functions'][func_name]['prettyprint']=highlighter.assemble_table(ast_helper.getfunctionnode(highlighter_pt,func_name) or {});\r\n\t\t\t\t\tfile_doc['functions'][func_name]['prettyprint']=highlighter.assemble_table(functionNode);\r\n\t\t\t\t\t-- vygenerujeme unikatny nazov suboru pre tuto funkciu\r\n\r\n\t\t\t\t\tlocal filename = out_function(file_doc.name,func_name,pos);\r\n\t\t\t\t\tfile_doc['functions'][func_name]['detail_link']=filename;\r\n\r\n\t\t\t\t\t-- KARASEK\r\n\t\t\t\t\tif options.plantuml_path ~= nil then \r\n\t\t\t\t\t\tfor _, v in ipairs(diagram_results) do\r\n\r\n\t\t\t\t\t\t\tif v.name == \"global\" then \t\t-- add global UML path\r\n\t\t\t\t\t\t\t\tfile_doc.uml = v.path\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tif v.name == func_name then \t-- add function UML path\r\n\t\t\t\t\t\t\t\tfile_doc['functions'][func_name]['uml']=v.path;\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\r\n\t\t\t\t\tlogger:info(string.format(\"generating function detail: file `%s'\", filename))\r\n      \r\n\t\t\t\t\tlocal f = lfs.open(options.output_dir:gsub(\"/+\",\"/\")..\"files\"..file_doc.name:gsub(\"[^\\/]+$\",\"\")..filename, \"w\")\r\n\t\t\t\t\t\r\n\t\t\t\t\tassert(f, string.format(\"could not open `%s' for writing\", filename))\r\n\t\t\t\t\tio.output(f)\r\n\r\n\t\t\t\t\tinclude(\"function_detail.lp\", { doc = doc, file_doc = file_doc, func=file_doc['functions'][func_name], metricsAST = file_doc.metricsAST, globalMetrics = globalMetrics} )\r\n\t\t\t\t\tf:close()\r\n\t\t\t\tend\r\n\t\t\tend\r\n\r\n                        --MODIFIED BY:  Michal Juranyi\r\n\t\t\tliterate.filename = file_doc.name\r\n                        file_doc.literate = literate.literate(file_doc.metricsAST)\r\n                        --END OF MODIFICATION BY MJ\r\n\t\t\t\r\n\t\t\tfor _, funcinfo in pairs({}) do -- not working!! functionlister.getTableOfFunctions(text,true)) do\t\t-- appendinf function informations to the tableOfFunctions\r\n\t\t\t\tfuncinfo.path = filepath:gsub(lfs.currentdir(), \"\")\t\t\t\t\t\t\t\t\t\t\t\t\t-- set path\r\n\r\n\t\t\t\tmetricinfo.NOF = metricinfo.NOF + 1\t\t\t\t\t\t\t\t\t\t\t-- set metrics about functions\r\n\t\t\t\tif funcinfo.fcntype == \"global\" then metricinfo.NOGF = metricinfo.NOGF + 1 end\r\n\t\t\t\tif funcinfo.fcntype == \"local\"  then metricinfo.NOLF = metricinfo.NOLF + 1 end\r\n\t\t\tend\r\n\t\t\t--print(\"processing: \"..filepath) --TODO DELETE STATIC LOG PRINT\r\n\t\t\t--MODIFICATION ///\r\n      \r\n      local fname = cutPathToSources(file_doc.name)\r\n\t\t\t\r\n\t\t\t-- assembly the filename\r\n\t\t\tlocal filename = out_file(fname:gsub(lfs.currentdir(), \"\"))\r\n\r\n\t\t\tlogger:info(string.format(\"generating file `%s'\", filename))\r\n      \r\n\t\t\tlocal f = lfs.open(filename, \"w\")\r\n\t\t\tassert(f, string.format(\"could not open `%s' for writing\", filename))\r\n\t\t\tio.output(f)\r\n\t\t\t-- call the file template)\r\n\t\t\tinclude(\"file.lp\", {doc = doc, file_doc = file_doc, globalMetrics = globalMetrics} )\r\n\t\t\tf:close()\r\n\t\tend\r\n\tend\r\n\t\r\n\t-- /// MODIFICATION \\\\\\\r\n\t-- FUNCTIONS\r\n\t-- MODIF (Ivan Simko) - removed ! ->   table.sort(tableOfFunctions,functionlister.comparator)\r\n\tlocal functions = { name = \"index.html\" }\r\n\tlocal f = lfs.open(options.output_dir..\"functionlist/index.html\", \"w\")\r\n\tassert(f, string.format(\"could not open functionlist/index.html for writing\"))\r\n\tio.output(f)\r\n\r\n\t--Create parameter list to make documentation (parameters represents templates)\r\n\tlocal functionsParam = {\r\n\t\tdoc = doc,\r\n\t\tfunctionList = funcTableTemplate.createFunctionTableList(globalMetrics, \"functionDefinitions\", false),\r\n\t\tdocFunctionList = funcTableTemplate.createDocumentedFunctionTableList(globalMetrics, \"functionDefinitions\", 1, false),\r\n\t\tnDocFunctionList = funcTableTemplate.createDocumentedFunctionTableList(globalMetrics, \"functionDefinitions\", 0, false)\r\n\t}\r\n\r\n\t--Adding links to templates to make documentation interactive\r\n\tfunctionsParam.functionList = addLinksToTemplate(functionsParam.functionList)\r\n\tfunctionsParam.docFunctionList = addLinksToTemplate(functionsParam.docFunctionList)\r\n\tfunctionsParam.nDocFunctionList = addLinksToTemplate(functionsParam.nDocFunctionList)\r\n\r\n\tinclude(\"indexOfFunctions.lp\", functionsParam) -- -- MODIF (Ivan Simko) - added globalMetrics\r\n\tf:close()\r\n\t\r\n\t-- METRICS\r\n\tlocal metrics = { name = \"index.html\" }\r\n\tlocal f = lfs.open(options.output_dir..\"metrics/index.html\", \"w\")\r\n\tassert(f, string.format(\"could not open metrics/index.html for writing\"))\r\n\tio.output(f)\r\n\r\n\t--Create parameter list to make documentation (parameters represents templates)\r\n\tlocal metricsParam = {\r\n\t\tdoc = doc,\r\n\t\tLOCTable = docTemplates.createLOCTable(globalMetrics.LOC, globalMetrics.fileNum, globalMetrics.moduleNum),\r\n\t\tdocMetricsTable = docTemplates.createDocMetricsTable(globalMetrics.documentMetrics),\r\n\t\thalsteadTable = docTemplates.createHalsteadTable(globalMetrics.halstead),\r\n\t\tstatementsTable = docTemplates.createStatementsTable(globalMetrics.statements),\r\n\t\tfunctionsTable = docTemplates.createFunctionsTable(globalMetrics, globalMetrics.fileNum),\r\n\t\tmoduleLenGraph = docTemplates.createModuleLenGraph(globalMetrics, false),\r\n\t\tfileLenGraph = docTemplates.createFileLenGraph(globalMetrics, false),\r\n\t\tcouplingTable = docTemplates.createCouplingTable(globalMetrics)\r\n\t}\r\n\r\n\tinclude(\"indexOfMetrics.lp\", metricsParam ) -- MODIF (Ivan Simko) - added globalMetrics\r\n\tf:close()\r\n\t-- \\\\\\ MODIFICATION ///\r\n  \r\n  -- SMELLS - Martin Nagy  \r\n\tlocal f = lfs.open(options.output_dir..\"smells/index.html\", \"w\")\r\n\tassert(f, string.format(\"could not open smells/index.html for writing\"))\r\n\tio.output(f)\r\n\r\n\t--Create parameter list to make documentation (parameters represents templates)\r\n\tlocal smellsParam = {\r\n\t\tdoc = doc,\r\n\t\tlongMethodTable = smellTemplates.createLongMethodTable(globalMetrics),\r\n\t\tcycloTable = smellTemplates.createCycloTable(globalMetrics),\r\n\t\tmanyParamsTable = smellTemplates.createManyParamsTable(globalMetrics),\r\n\t\tmoduleTables = smellTemplates.createModuleTables(globalMetrics),\r\n\t\tMITable = smellTemplates.createMITable(globalMetrics),\r\n\t\tlongLinesTable = smellTemplates.createLongLinesTable(globalMetrics),\r\n\t\ttablesWithManyFieldsTable = smellTemplates.createTablesWithManyFieldsTable(globalMetrics),\r\n\t\tfunctionDepthTable = smellTemplates.createFunctionDepthTable(globalMetrics),\r\n\t\ttableDepthTable = smellTemplates.createTableDepthTable(globalMetrics),\r\n\t\tupvaluesTable = smellTemplates.createUpvaluesTable(globalMetrics),\r\n\r\n\t\tlongMethodGraph = smellTemplates.createLongMethodGraph(globalMetrics, false),\r\n\t\tcycloGraph = smellTemplates.createCycloGraph(globalMetrics, false),\r\n\t\tmanyParamsGraph = smellTemplates.createManyParamsGraph(globalMetrics, false),\r\n\t\tlongLinesGraph = smellTemplates.createLongLinesGraph(globalMetrics, false),\r\n\t\ttablesWithManyFieldsGraph = smellTemplates.createTablesWithManyFieldsGraph(globalMetrics, false),\r\n\t\tfunctionDepthGraph = smellTemplates.createFunctionDepthGraph(globalMetrics, false),\r\n\t\ttableDepthGraph = smellTemplates.createTableDepthGraph(globalMetrics, false),\r\n\t\tupvaluesGraph = smellTemplates.createUpvaluesGraph(globalMetrics, false),\r\n\t}\r\n\r\n\tinclude(\"indexOfSmells.lp\", smellsParam ) \r\n\tf:close()\r\n  -- END OF SMELLS\r\n\r\n\r\n\t-- /// MODIFICATION \\\\\\\r\n\t-- TABLES\r\n\tlocal tables = { name = \"index.html\" }\r\n\tlocal f = lfs.open(options.output_dir..\"tablelist/index.html\", \"w\")\r\n\tassert(f, string.format(\"could not open tablelist/index.html for writing\"))\r\n\tio.output(f)\r\n\r\n\t--Create parameter list to make documentation (parameters represents templates)\r\n\tlocal tableParam = {\r\n\t\tdoc = doc,\r\n\t\ttableList = funcTableTemplate.createFunctionTableList(globalMetrics, \"tables\", false),\r\n\t\tdocTableList = funcTableTemplate.createDocumentedFunctionTableList(globalMetrics, \"tables\", 1, false),\r\n\t\tnDocTableList = funcTableTemplate.createDocumentedFunctionTableList(globalMetrics, \"tables\", 0, false)\r\n\t} \r\n\r\n\ttableParam.tableList = addLinksToTemplate(tableParam.tableList)\r\n\ttableParam.docTableList = addLinksToTemplate(tableParam.docTableList)\r\n\ttableParam.nDocTableList = addLinksToTemplate(tableParam.nDocTableList)\r\n\r\n\tinclude(\"indexOfTables.lp\", tableParam)\r\n\tf:close()\r\n\t-- \\\\\\ MODIFICATION ///\r\n\r\n--KOSA\r\n\t-- custom comments\r\n\tlocal tables = { name = \"customs.html\" }\r\n\tlocal f = lfs.open(options.output_dir..\"customcommentlist/customs.html\", \"w\")\r\n\tassert(f, string.format(\"could not open customcommentlist/customs.html for writing\"))\r\n\tio.output(f)\r\n\r\n\t--Create parameter list to make documentation (parameters represents templates)\r\n\tlocal customParam = {\r\n\t\tdoc = doc,\r\n\t\ttodoComments = luadocerTemplates.createCustomCommentList(doc, \"todo\", file_link),\r\n\t\tbugComments = luadocerTemplates.createCustomCommentList(doc, \"bug\", file_link),\r\n\t\tquestionComments = luadocerTemplates.createCustomCommentList(doc, \"question\", file_link),\r\n\t\tfixmeComments = luadocerTemplates.createCustomCommentList(doc, \"fixme\", file_link),\r\n\t\tinfoComments = luadocerTemplates.createCustomCommentList(doc, \"info\", file_link),\r\n\t\thowComments = luadocerTemplates.createCustomCommentList(doc, \"how\", file_link)\r\n\t}\r\n\r\n\tinclude(\"custom.lp\", customParam)\r\n\tf:close()\r\n\t-- \\\\\\ MODIFICATION ///\r\n\r\n--KARASEK\r\n\t--CHECK\r\n\tlocal checks = { name = \"index.html\" }\r\n\tlocal f = lfs.open(options.output_dir..\"check/index.html\", \"w\")\r\n\tassert(f, string.format(\"could not open diagram/index.html for writing\"))\r\n\tio.output(f)\r\n\tinclude(\"indexOfChecks.lp\", { doc = doc, checks = analysis_results} ) -- -- MODIF (Ivan Simko) - added globalMetrics\r\n\tf:close()\r\n\r\n\t--DIAGRAMS\r\n\tlocal diagrams = { name = \"index.html\" }\r\n\tlocal f = lfs.open(options.output_dir..\"diagram/index.html\", \"w\")\r\n\tassert(f, string.format(\"could not open diagram/index.html for writing\"))\r\n\tio.output(f)\r\n\r\n\t--Create parameter list to make documentation (parameters represents templates)\r\n\tlocal diagramParam = {\r\n\t\tdoc = doc,\r\n\t\tglobalDiagram = luadocerTemplates.createUMLDiagrams(diagram_results, true, link),\r\n\t\tfunctionDiagram = luadocerTemplates.createUMLDiagrams(diagram_results, false, link)\r\n\t}\r\n\r\n\tinclude(\"indexOfDiagrams.lp\", diagramParam ) -- -- MODIF (Ivan Simko) - added globalMetrics\r\n\tf:close()\r\n\r\n\r\n\t-- copy extra files\r\n\tfile_copy(\"literate.js\") --MODIFIED BY: Michal Juranyi\r\n\tfile_copy(\"luadoc.css\");\r\n\tfile_copy(\"jquery.js\");\r\n\tfile_copy(\"prettyprint.js\");\r\n\tfile_copy(\"menu.js\");\r\n\tfile_copy(\"highcharts.js\")\r\n\tfile_copy(\"jquery-ui.min.js\")\r\n\tfile_copy(\"indexOfFunctions.css\")\r\n\tfile_copy(\"jquery-ui-1.8.11.custom.css\")\t\r\n\tfile_copy(\"fileIcon.jpg\")\t\r\nend",
    "type": "function"
  }, {
    "id": 155,
    "text": "doc.sh=function (text)\r\n\r\n\t\tif text~= nil then\r\n\t\t\ttext = text:gsub(lfs.currentdir(), \"\")\r\n\t\tend\r\n\t\tif(text==nil) then\r\n\t\t\treturn nil;\r\n\t\tend\r\n\t\tif(type(text)~=\"string\") then\r\n\t\t\treturn text;\r\n\t\tend\r\n\t\ttext=text:gsub(\"&\",\"&amp;\");\r\n\t  \ttext=text:gsub(\"&#\",\"&#38;&#35;\");\r\n\t\ttext=text:gsub(\"<\",\"&lt;\");\r\n\t\ttext=text:gsub(\">\",\"&gt;\");\r\n\t\ttext=text:gsub(\"\\\"\",\"&#34;\");\r\n\t\ttext=text:gsub(\"'\",\"&#39;\");\r\n\t\treturn text;\r\n\tend",
    "type": "statement:assign"
  }, {
    "id": 156,
    "text": "if text~= nil then\r\n\t\t\ttext = text:gsub(lfs.currentdir(), \"\")\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 157,
    "text": "text = text:gsub(lfs.currentdir(), \"\")",
    "type": "statement:assign"
  }, {
    "id": 158,
    "text": "if(text==nil) then\r\n\t\t\treturn nil;\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 159,
    "text": "if(type(text)~=\"string\") then\r\n\t\t\treturn text;\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 160,
    "text": "text=text:gsub(\"&\",\"&amp;\")",
    "type": "statement:assign"
  }, {
    "id": 161,
    "text": "text=text:gsub(\"&#\",\"&#38;&#35;\")",
    "type": "statement:assign"
  }, {
    "id": 162,
    "text": "text=text:gsub(\"<\",\"&lt;\")",
    "type": "statement:assign"
  }, {
    "id": 163,
    "text": "text=text:gsub(\">\",\"&gt;\")",
    "type": "statement:assign"
  }, {
    "id": 164,
    "text": "text=text:gsub(\"\\\"\",\"&#34;\")",
    "type": "statement:assign"
  }, {
    "id": 165,
    "text": "text=text:gsub(\"'\",\"&#39;\")",
    "type": "statement:assign"
  }, {
    "id": 166,
    "text": "doc.pathprefix=function(paths)\r\n\t\tlocal prefix\r\n\t\tlocal newpref=''\r\n\t\tfor k,v in pairs(paths) do\t\r\n\t\t\tv.path = v.path:gsub(lfs.currentdir(), \"\")\r\n\t\t--OKA\r\n\t\t\tif(prefix==nil)then\r\n\t\t\t\t\r\n\t\t\telseif(prefix~=v.path)then\r\n\t\t\t\tlocal split1 = {}\r\n\t\t\t\tlocal split2 = {}\r\n\t\t\t\tfor _,split in pairs(strsplit('/',prefix))do\r\n\t\t\t\t\ttable.insert(split1,split)\r\n\t\t\t\tend\r\n\t\t\t\tfor _,split in pairs(strsplit('/',v.path))do\r\n\t\t\t\t\ttable.insert(split2,split)\r\n\t\t\t\tend\r\n\t\t\t\tif(#split1 > #split2)then\r\n\t\t\t\t\tfor index,str in pairs(split2) do\r\n\t\t\t\t\t\tif(split1[index]==str)then\r\n\t\t\t\t\t\t\tif(newpref=='')then\r\n\t\t\t\t\t\t\t\tnewpref = '/' .. str\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tnewpref = newpref  .. '/' .. str\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\telse\r\n\t\t\t\t\tfor index,str in pairs(split1) do\r\n\t\t\t\t\t\tif(split2[index]==str)then\r\n\t\t\t\t\t\t\tif(newpref=='')then\r\n\t\t\t\t\t\t\t\tnewpref = '/' .. str\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tnewpref = newpref  .. '/' ..  str\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\t\tend\r\n\t\t\t\tprefix = newpref\t\t\t\r\n\t\t\t\tnewpref=''\r\n\t\t\tend\r\n\t\tend\r\n\r\n\t\treturn prefix\r\n\tend",
    "type": "statement:assign"
  }, {
    "id": 167,
    "text": "local prefix",
    "type": "statement:localassign"
  }, {
    "id": 168,
    "text": "local newpref=''",
    "type": "statement:localassign"
  }, {
    "id": 169,
    "text": "for k,v in pairs(paths) do\t\r\n\t\t\tv.path = v.path:gsub(lfs.currentdir(), \"\")\r\n\t\t--OKA\r\n\t\t\tif(prefix==nil)then\r\n\t\t\t\t\r\n\t\t\telseif(prefix~=v.path)then\r\n\t\t\t\tlocal split1 = {}\r\n\t\t\t\tlocal split2 = {}\r\n\t\t\t\tfor _,split in pairs(strsplit('/',prefix))do\r\n\t\t\t\t\ttable.insert(split1,split)\r\n\t\t\t\tend\r\n\t\t\t\tfor _,split in pairs(strsplit('/',v.path))do\r\n\t\t\t\t\ttable.insert(split2,split)\r\n\t\t\t\tend\r\n\t\t\t\tif(#split1 > #split2)then\r\n\t\t\t\t\tfor index,str in pairs(split2) do\r\n\t\t\t\t\t\tif(split1[index]==str)then\r\n\t\t\t\t\t\t\tif(newpref=='')then\r\n\t\t\t\t\t\t\t\tnewpref = '/' .. str\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tnewpref = newpref  .. '/' .. str\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\telse\r\n\t\t\t\t\tfor index,str in pairs(split1) do\r\n\t\t\t\t\t\tif(split2[index]==str)then\r\n\t\t\t\t\t\t\tif(newpref=='')then\r\n\t\t\t\t\t\t\t\tnewpref = '/' .. str\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tnewpref = newpref  .. '/' ..  str\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\t\tend\r\n\t\t\t\tprefix = newpref\t\t\t\r\n\t\t\t\tnewpref=''\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 170,
    "text": "v.path = v.path:gsub(lfs.currentdir(), \"\")",
    "type": "statement:assign"
  }, {
    "id": 171,
    "text": "if(prefix==nil)then\r\n\t\t\t\t\r\n\t\t\telseif(prefix~=v.path)then\r\n\t\t\t\tlocal split1 = {}\r\n\t\t\t\tlocal split2 = {}\r\n\t\t\t\tfor _,split in pairs(strsplit('/',prefix))do\r\n\t\t\t\t\ttable.insert(split1,split)\r\n\t\t\t\tend\r\n\t\t\t\tfor _,split in pairs(strsplit('/',v.path))do\r\n\t\t\t\t\ttable.insert(split2,split)\r\n\t\t\t\tend\r\n\t\t\t\tif(#split1 > #split2)then\r\n\t\t\t\t\tfor index,str in pairs(split2) do\r\n\t\t\t\t\t\tif(split1[index]==str)then\r\n\t\t\t\t\t\t\tif(newpref=='')then\r\n\t\t\t\t\t\t\t\tnewpref = '/' .. str\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tnewpref = newpref  .. '/' .. str\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\telse\r\n\t\t\t\t\tfor index,str in pairs(split1) do\r\n\t\t\t\t\t\tif(split2[index]==str)then\r\n\t\t\t\t\t\t\tif(newpref=='')then\r\n\t\t\t\t\t\t\t\tnewpref = '/' .. str\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tnewpref = newpref  .. '/' ..  str\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\t\tend\r\n\t\t\t\tprefix = newpref\t\t\t\r\n\t\t\t\tnewpref=''\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 172,
    "text": "local split1 = {}",
    "type": "statement:localassign"
  }, {
    "id": 173,
    "text": "local split2 = {}",
    "type": "statement:localassign"
  }, {
    "id": 174,
    "text": "for _,split in pairs(strsplit('/',prefix))do\r\n\t\t\t\t\ttable.insert(split1,split)\r\n\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 175,
    "text": "table.insert(split1,split)",
    "type": "statement:functioncall"
  }, {
    "id": 176,
    "text": "for _,split in pairs(strsplit('/',v.path))do\r\n\t\t\t\t\ttable.insert(split2,split)\r\n\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 177,
    "text": "table.insert(split2,split)",
    "type": "statement:functioncall"
  }, {
    "id": 178,
    "text": "if(#split1 > #split2)then\r\n\t\t\t\t\tfor index,str in pairs(split2) do\r\n\t\t\t\t\t\tif(split1[index]==str)then\r\n\t\t\t\t\t\t\tif(newpref=='')then\r\n\t\t\t\t\t\t\t\tnewpref = '/' .. str\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tnewpref = newpref  .. '/' .. str\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\telse\r\n\t\t\t\t\tfor index,str in pairs(split1) do\r\n\t\t\t\t\t\tif(split2[index]==str)then\r\n\t\t\t\t\t\t\tif(newpref=='')then\r\n\t\t\t\t\t\t\t\tnewpref = '/' .. str\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tnewpref = newpref  .. '/' ..  str\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 179,
    "text": "for index,str in pairs(split2) do\r\n\t\t\t\t\t\tif(split1[index]==str)then\r\n\t\t\t\t\t\t\tif(newpref=='')then\r\n\t\t\t\t\t\t\t\tnewpref = '/' .. str\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tnewpref = newpref  .. '/' .. str\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 180,
    "text": "if(split1[index]==str)then\r\n\t\t\t\t\t\t\tif(newpref=='')then\r\n\t\t\t\t\t\t\t\tnewpref = '/' .. str\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tnewpref = newpref  .. '/' .. str\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 181,
    "text": "if(newpref=='')then\r\n\t\t\t\t\t\t\t\tnewpref = '/' .. str\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tnewpref = newpref  .. '/' .. str\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 182,
    "text": "newpref = '/' .. str",
    "type": "statement:assign"
  }, {
    "id": 183,
    "text": "newpref = newpref  .. '/' .. str",
    "type": "statement:assign"
  }, {
    "id": 184,
    "text": "for index,str in pairs(split1) do\r\n\t\t\t\t\t\tif(split2[index]==str)then\r\n\t\t\t\t\t\t\tif(newpref=='')then\r\n\t\t\t\t\t\t\t\tnewpref = '/' .. str\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tnewpref = newpref  .. '/' ..  str\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 185,
    "text": "if(split2[index]==str)then\r\n\t\t\t\t\t\t\tif(newpref=='')then\r\n\t\t\t\t\t\t\t\tnewpref = '/' .. str\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tnewpref = newpref  .. '/' ..  str\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 186,
    "text": "if(newpref=='')then\r\n\t\t\t\t\t\t\t\tnewpref = '/' .. str\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tnewpref = newpref  .. '/' ..  str\r\n\t\t\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 187,
    "text": "newpref = newpref  .. '/' ..  str",
    "type": "statement:assign"
  }, {
    "id": 188,
    "text": "prefix = newpref",
    "type": "statement:assign"
  }, {
    "id": 189,
    "text": "newpref=''",
    "type": "statement:assign"
  }, {
    "id": 190,
    "text": "doc.pathsuffix=function(common,full)\r\n\t\tlocal suffix\r\n\t\tif(full == common or common==nil)then\r\n\t\t\treturn ''\r\n\t\tend\r\n\t\tsuffix = string.sub(full,string.len(common)+1)\r\n\t\treturn suffix\r\n\tend",
    "type": "statement:assign"
  }, {
    "id": 191,
    "text": "local suffix",
    "type": "statement:localassign"
  }, {
    "id": 192,
    "text": "if(full == common or common==nil)then\r\n\t\t\treturn ''\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 193,
    "text": "suffix = string.sub(full,string.len(common)+1)",
    "type": "statement:assign"
  }, {
    "id": 194,
    "text": "if (#doc.files > 0 or #doc.modules > 0) and (not options.noindexpage) then\r\n\r\n\t\t-- KARASEK\r\n\t\tif options.plantuml_path ~= nil then \r\n\t\t\tdoc.diagram = 1 \t\t\t\t\t-- add 'UML diagrams' option to menu \r\n\t\tend\r\n\r\n\t\tif options.syntax_check == \"write\" then\r\n\t\t\tdoc.check = 1 \t\t\t\t\t-- add 'Static analysis' option to menu \r\n\t\tend\r\n\t\t\r\n\t\tlocal filename = options.output_dir..\"index.html\"\r\n\t\tlogger:info(string.format(\"generating file `%s'\", filename))\r\n\t\tlocal f = lfs.open(filename, \"w\")\r\n\t\tassert(f, string.format(\"could not open `%s' for writing\", filename))\r\n\t\tio.output(f)\r\n\t\tinclude(\"index.lp\", { doc = doc, os=os })\r\n\t\tf:close()\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 195,
    "text": "if options.plantuml_path ~= nil then \r\n\t\t\tdoc.diagram = 1 \t\t\t\t\t-- add 'UML diagrams' option to menu \r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 196,
    "text": "doc.diagram = 1",
    "type": "statement:assign"
  }, {
    "id": 197,
    "text": "if options.syntax_check == \"write\" then\r\n\t\t\tdoc.check = 1 \t\t\t\t\t-- add 'Static analysis' option to menu \r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 198,
    "text": "doc.check = 1",
    "type": "statement:assign"
  }, {
    "id": 199,
    "text": "local filename = options.output_dir..\"index.html\"",
    "type": "statement:localassign"
  }, {
    "id": 200,
    "text": "logger:info(string.format(\"generating file `%s'\", filename))",
    "type": "statement:functioncall"
  }, {
    "id": 201,
    "text": "local f = lfs.open(filename, \"w\")",
    "type": "statement:localassign"
  }, {
    "id": 202,
    "text": "assert(f, string.format(\"could not open `%s' for writing\", filename))",
    "type": "statement:functioncall"
  }, {
    "id": 203,
    "text": "io.output(f)",
    "type": "statement:functioncall"
  }, {
    "id": 204,
    "text": "include(\"index.lp\", { doc = doc, os=os })",
    "type": "statement:functioncall"
  }, {
    "id": 205,
    "text": "local filename = options.output_dir..\"list_of_modules.html\"",
    "type": "statement:localassign"
  }, {
    "id": 206,
    "text": "include(\"list_of_modules.lp\", { doc = doc })",
    "type": "statement:functioncall"
  }, {
    "id": 207,
    "text": "local filename = options.output_dir..\"list_of_files.html\"",
    "type": "statement:localassign"
  }, {
    "id": 208,
    "text": "include(\"list_of_files.lp\", { doc = doc })",
    "type": "statement:functioncall"
  }, {
    "id": 209,
    "text": "local module_hierarchy={}",
    "type": "statement:localassign"
  }, {
    "id": 210,
    "text": "for _, modulename in ipairs(doc.modules) do\r\n\t\tlocal last=modulename:gsub(\"%..+$\",\"\");\r\n\t\tif(last~=modulename) then --nazov s bodkou\r\n\t\t\tlocal key=modulename:match(\"(.+)%..+$\");\r\n\t\t\tif(not module_hierarchy[key]) then\r\n\t\t\t\tmodule_hierarchy[key]={modulename:match(\"[^.]+$\")};\r\n\t\t\telse\r\n\t\t\t\ttable.insert(module_hierarchy[key],modulename:match(\"[^.]+$\"));\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 211,
    "text": "local last=modulename:gsub(\"%..+$\",\"\")",
    "type": "statement:localassign"
  }, {
    "id": 212,
    "text": "if(last~=modulename) then --nazov s bodkou\r\n\t\t\tlocal key=modulename:match(\"(.+)%..+$\");\r\n\t\t\tif(not module_hierarchy[key]) then\r\n\t\t\t\tmodule_hierarchy[key]={modulename:match(\"[^.]+$\")};\r\n\t\t\telse\r\n\t\t\t\ttable.insert(module_hierarchy[key],modulename:match(\"[^.]+$\"));\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 213,
    "text": "local key=modulename:match(\"(.+)%..+$\")",
    "type": "statement:localassign"
  }, {
    "id": 214,
    "text": "if(not module_hierarchy[key]) then\r\n\t\t\t\tmodule_hierarchy[key]={modulename:match(\"[^.]+$\")};\r\n\t\t\telse\r\n\t\t\t\ttable.insert(module_hierarchy[key],modulename:match(\"[^.]+$\"));\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 215,
    "text": "module_hierarchy[key]={modulename:match(\"[^.]+$\")}",
    "type": "statement:assign"
  }, {
    "id": 216,
    "text": "table.insert(module_hierarchy[key],modulename:match(\"[^.]+$\"))",
    "type": "statement:functioncall"
  }, {
    "id": 217,
    "text": "for k,v in pairs(module_hierarchy) do\r\n\t\tlocal filename = options.output_dir..\"module_hierarchy/\"..k..\".html\" -- WARNING: might not be safe! Module name could contain special characters..\r\n\t\tlogger:info(string.format(\"generating file `%s'\", filename))\r\n\t\tlocal f = lfs.open(filename, \"w\")\r\n\t\tassert(f, string.format(\"could not open `%s' for writing\", filename))\r\n\t\tio.output(f)\r\n\t\tinclude(\"module_hierarchy.lp\", { doc = doc, modname=k, hierarchy=v })\r\n\t\tf:close()\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 218,
    "text": "local filename = options.output_dir..\"module_hierarchy/\"..k..\".html\"",
    "type": "statement:localassign"
  }, {
    "id": 219,
    "text": "include(\"module_hierarchy.lp\", { doc = doc, modname=k, hierarchy=v })",
    "type": "statement:functioncall"
  }, {
    "id": 220,
    "text": "module_hierarchy=nil",
    "type": "statement:assign"
  }, {
    "id": 221,
    "text": "local file_hierarchy={}",
    "type": "statement:localassign"
  }, {
    "id": 222,
    "text": "for _, filename in ipairs(doc.files) do\r\n\t\tlocal last=filename:gsub(\"/.+$\",\"\");\r\n\r\n\t\tif(last~=filename) then --nazov v adresari\r\n\t\t\tlocal key=filename:match(\"(.+)/.+$\");\r\n\t\t\tif(not file_hierarchy[key]) then\r\n\t\t\t\tfile_hierarchy[key]={filename:match(\"[^/]+$\")};\r\n\t\t\telse\r\n\t\t\t\ttable.insert(file_hierarchy[key],filename:match(\"[^/]+$\"));\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 223,
    "text": "local last=filename:gsub(\"/.+$\",\"\")",
    "type": "statement:localassign"
  }, {
    "id": 224,
    "text": "if(last~=filename) then --nazov v adresari\r\n\t\t\tlocal key=filename:match(\"(.+)/.+$\");\r\n\t\t\tif(not file_hierarchy[key]) then\r\n\t\t\t\tfile_hierarchy[key]={filename:match(\"[^/]+$\")};\r\n\t\t\telse\r\n\t\t\t\ttable.insert(file_hierarchy[key],filename:match(\"[^/]+$\"));\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 225,
    "text": "local key=filename:match(\"(.+)/.+$\")",
    "type": "statement:localassign"
  }, {
    "id": 226,
    "text": "if(not file_hierarchy[key]) then\r\n\t\t\t\tfile_hierarchy[key]={filename:match(\"[^/]+$\")};\r\n\t\t\telse\r\n\t\t\t\ttable.insert(file_hierarchy[key],filename:match(\"[^/]+$\"));\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 227,
    "text": "file_hierarchy[key]={filename:match(\"[^/]+$\")}",
    "type": "statement:assign"
  }, {
    "id": 228,
    "text": "table.insert(file_hierarchy[key],filename:match(\"[^/]+$\"))",
    "type": "statement:functioncall"
  }, {
    "id": 229,
    "text": "for k,v in pairs(file_hierarchy) do\r\n\t\tk = k:gsub(lfs.currentdir(), \"\")\r\n    k = cutPathToSources(k)\r\n\t\tlocal filename = options.output_dir..\"files\"..k..\"/file_listing.lua.lua.lua.html\";  -- NOT OK if the directory contains file named file_listing.lua.lua.lua.lua -> becomes file_listing.lua.lua.lua.html -> TODO: generate unique filename somehow or store in a different folder (e.g listings/)\r\n\r\n\t\tlogger:info(string.format(\"generating file `%s'\", filename))\r\n\t\tlocal f = lfs.open(filename, \"w\")\r\n\t\tassert(f, string.format(\"could not open `%s' for writing\", filename))\r\n\t\tio.output(f)\r\n\t\tinclude(\"file_listing.lp\", { doc = doc, fname=k, hierarchy=v })\r\n\t\tf:close()\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 230,
    "text": "k = k:gsub(lfs.currentdir(), \"\")",
    "type": "statement:assign"
  }, {
    "id": 231,
    "text": "k = cutPathToSources(k)",
    "type": "statement:assign"
  }, {
    "id": 232,
    "text": "local filename = options.output_dir..\"files\"..k..\"/file_listing.lua.lua.lua.html\"",
    "type": "statement:localassign"
  }, {
    "id": 233,
    "text": "include(\"file_listing.lp\", { doc = doc, fname=k, hierarchy=v })",
    "type": "statement:functioncall"
  }, {
    "id": 234,
    "text": "if options.syntax_check == \"print\" then  \t\t-- if 'print' was on stdin then just print to stdout \r\n\t\tprint(\"Start syntax analysis...\");\r\n\r\n\t\tfor _, filepath in ipairs(doc.files) do\t\r\n\t\t\tos.execute(\"luacheck \" .. filepath)\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 235,
    "text": "print(\"Start syntax analysis...\")",
    "type": "statement:functioncall"
  }, {
    "id": 236,
    "text": "for _, filepath in ipairs(doc.files) do\t\r\n\t\t\tos.execute(\"luacheck \" .. filepath)\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 237,
    "text": "os.execute(\"luacheck \" .. filepath)",
    "type": "statement:functioncall"
  }, {
    "id": 238,
    "text": "local analysis_results = {}",
    "type": "statement:localassign"
  }, {
    "id": 239,
    "text": "if options.syntax_check == \"write\" then \r\n\t\tio.stdout:write(\"Syntax analysis...\\r\")\r\n\t\tio.stdout:flush()\r\n\t\t\r\n\t\tfor _, filepath in ipairs(doc.files) do\r\n\r\n\t\t\tlocal temp_file = filepath:gsub('.%w*$', '') .. \"_checking\" \t\t\t-- we need make temporary file of luacheck report\r\n\t\t\tos.execute(\"luacheck --no-color \" .. filepath .. \" > \" .. temp_file) \t-- execute analysis\r\n\t\t\t\r\n\t\t\tlocal result = pkio.ReadFile(temp_file) \t-- add analysis to table\r\n\t\t\tanalysis_results[#analysis_results+1] = {}\r\n\t\t\t\r\n\t\t\tif (string.match(result, \"Failure\")) then \t\t\t\t\t\t-- if we find \"Failure\" in result text it has warnings or errors\r\n\t\t\t\tanalysis_results[#analysis_results].name = filepath:gsub(lfs.currentdir(), \"\")\r\n\t\t\t\tanalysis_results[#analysis_results].status = 'Failure'\r\n\t\t\t\t\r\n\t\t\t\tlocal temp_result = result:gsub('^Checking(.+)Failure(.+)Total:(.+)', '%2')\r\n\t\t\t\ttemp_result = temp_result:gsub(filepath .. \":\", \"\")\r\n\r\n\t\t\t\tanalysis_results[#analysis_results].result = temp_result:gsub(\"%s%s+\",'\\n')\r\n\t\t\t\tanalysis_results[#analysis_results].info = result:gsub('^.+Total:', 'Total:')\r\n\t\t\telse -- if not then it's OK\r\n\t\t\t\tanalysis_results[#analysis_results].name = filepath:gsub(lfs.currentdir(), \"\")\r\n\t\t\tend\r\n\t\t\tos.remove(temp_file) \t\t\t\t\t\t\t\t\t\t\t\t\t-- remove that temporary file\r\n\t\tend\r\n\r\n\t\t-- DEBUG PRINT\r\n\t\t-- for k,v in ipairs(analysis_results) do\r\n\t\t-- \tprint(analysis_results[k])\r\n\t\t-- end\r\n\t\t\t\r\n\t\tio.stdout:write(\"Start syntax analysis...\\tOK\\n\")\r\n\t\tio.stdout:flush()\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 240,
    "text": "io.stdout:write(\"Syntax analysis...\\r\")",
    "type": "statement:functioncall"
  }, {
    "id": 241,
    "text": "io.stdout:flush()",
    "type": "statement:functioncall"
  }, {
    "id": 242,
    "text": "for _, filepath in ipairs(doc.files) do\r\n\r\n\t\t\tlocal temp_file = filepath:gsub('.%w*$', '') .. \"_checking\" \t\t\t-- we need make temporary file of luacheck report\r\n\t\t\tos.execute(\"luacheck --no-color \" .. filepath .. \" > \" .. temp_file) \t-- execute analysis\r\n\t\t\t\r\n\t\t\tlocal result = pkio.ReadFile(temp_file) \t-- add analysis to table\r\n\t\t\tanalysis_results[#analysis_results+1] = {}\r\n\t\t\t\r\n\t\t\tif (string.match(result, \"Failure\")) then \t\t\t\t\t\t-- if we find \"Failure\" in result text it has warnings or errors\r\n\t\t\t\tanalysis_results[#analysis_results].name = filepath:gsub(lfs.currentdir(), \"\")\r\n\t\t\t\tanalysis_results[#analysis_results].status = 'Failure'\r\n\t\t\t\t\r\n\t\t\t\tlocal temp_result = result:gsub('^Checking(.+)Failure(.+)Total:(.+)', '%2')\r\n\t\t\t\ttemp_result = temp_result:gsub(filepath .. \":\", \"\")\r\n\r\n\t\t\t\tanalysis_results[#analysis_results].result = temp_result:gsub(\"%s%s+\",'\\n')\r\n\t\t\t\tanalysis_results[#analysis_results].info = result:gsub('^.+Total:', 'Total:')\r\n\t\t\telse -- if not then it's OK\r\n\t\t\t\tanalysis_results[#analysis_results].name = filepath:gsub(lfs.currentdir(), \"\")\r\n\t\t\tend\r\n\t\t\tos.remove(temp_file) \t\t\t\t\t\t\t\t\t\t\t\t\t-- remove that temporary file\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 243,
    "text": "local temp_file = filepath:gsub('.%w*$', '') .. \"_checking\"",
    "type": "statement:localassign"
  }, {
    "id": 244,
    "text": "os.execute(\"luacheck --no-color \" .. filepath .. \" > \" .. temp_file)",
    "type": "statement:functioncall"
  }, {
    "id": 245,
    "text": "local result = pkio.ReadFile(temp_file)",
    "type": "statement:localassign"
  }, {
    "id": 246,
    "text": "analysis_results[#analysis_results+1] = {}",
    "type": "statement:assign"
  }, {
    "id": 247,
    "text": "if (string.match(result, \"Failure\")) then \t\t\t\t\t\t-- if we find \"Failure\" in result text it has warnings or errors\r\n\t\t\t\tanalysis_results[#analysis_results].name = filepath:gsub(lfs.currentdir(), \"\")\r\n\t\t\t\tanalysis_results[#analysis_results].status = 'Failure'\r\n\t\t\t\t\r\n\t\t\t\tlocal temp_result = result:gsub('^Checking(.+)Failure(.+)Total:(.+)', '%2')\r\n\t\t\t\ttemp_result = temp_result:gsub(filepath .. \":\", \"\")\r\n\r\n\t\t\t\tanalysis_results[#analysis_results].result = temp_result:gsub(\"%s%s+\",'\\n')\r\n\t\t\t\tanalysis_results[#analysis_results].info = result:gsub('^.+Total:', 'Total:')\r\n\t\t\telse -- if not then it's OK\r\n\t\t\t\tanalysis_results[#analysis_results].name = filepath:gsub(lfs.currentdir(), \"\")\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 248,
    "text": "analysis_results[#analysis_results].name = filepath:gsub(lfs.currentdir(), \"\")",
    "type": "statement:assign"
  }, {
    "id": 249,
    "text": "analysis_results[#analysis_results].status = 'Failure'",
    "type": "statement:assign"
  }, {
    "id": 250,
    "text": "local temp_result = result:gsub('^Checking(.+)Failure(.+)Total:(.+)', '%2')",
    "type": "statement:localassign"
  }, {
    "id": 251,
    "text": "temp_result = temp_result:gsub(filepath .. \":\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 252,
    "text": "analysis_results[#analysis_results].result = temp_result:gsub(\"%s%s+\",'\\n')",
    "type": "statement:assign"
  }, {
    "id": 253,
    "text": "analysis_results[#analysis_results].info = result:gsub('^.+Total:', 'Total:')",
    "type": "statement:assign"
  }, {
    "id": 254,
    "text": "os.remove(temp_file)",
    "type": "statement:functioncall"
  }, {
    "id": 255,
    "text": "io.stdout:write(\"Start syntax analysis...\\tOK\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 256,
    "text": "local diagram_results = {}",
    "type": "statement:localassign"
  }, {
    "id": 257,
    "text": "local settings = {}",
    "type": "statement:localassign"
  }, {
    "id": 258,
    "text": "if options.plantuml_path ~= nil then \r\n\t\tio.stdout:write(\"Generating diagrams... \\r\")\r\n\t\tio.stdout:flush()\r\n\r\n\t\tfor _, filepath in ipairs(doc.files) do\t\r\n\t\t\t\r\n\t\t\tlocal text = pkio.ReadFile(filepath)\r\n\t\t\tsettings.plantuml_path = options.plantuml_path .. \" %s\"\r\n\t\t\tsettings.dir_path = util.getabsolutepath(options.output_dir) .. '/'\r\n\t\t\tsettings.current_file = filepath\r\n      \r\n      settings.extended_path = cutPathToSources(filepath)\r\n      \r\n\t\t\t-- parse extended_path\r\n\t\t\tsettings.extended_path = settings.extended_path:gsub(\"^(.+)/.-$\",\"%1/\")\r\n\t\t\tsettings.extended_path = settings.extended_path:gsub(\"^\\/\",\"\")\r\n\t\t\t\r\n\t\t\tsettings.file_format = \"svg\"\r\n\t\t\tdiagram_results = luaplantuml.process_text(text, settings)\r\n\t\tend\r\n\t\t-- DEBUG PRINT\r\n\t\t-- for _, v in ipairs(diagram_results) do\r\n\t\t-- \tprint(v.name .. ' CESTA: ' .. v.path .. '  STRING: ' .. v.uml_string)\r\n\t\t-- end\r\n\t\tio.stdout:write(\"Generating diagrams...\\t\\tOK\\n\")\r\n\t\tio.stdout:flush()\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 259,
    "text": "io.stdout:write(\"Generating diagrams... \\r\")",
    "type": "statement:functioncall"
  }, {
    "id": 260,
    "text": "for _, filepath in ipairs(doc.files) do\t\r\n\t\t\t\r\n\t\t\tlocal text = pkio.ReadFile(filepath)\r\n\t\t\tsettings.plantuml_path = options.plantuml_path .. \" %s\"\r\n\t\t\tsettings.dir_path = util.getabsolutepath(options.output_dir) .. '/'\r\n\t\t\tsettings.current_file = filepath\r\n      \r\n      settings.extended_path = cutPathToSources(filepath)\r\n      \r\n\t\t\t-- parse extended_path\r\n\t\t\tsettings.extended_path = settings.extended_path:gsub(\"^(.+)/.-$\",\"%1/\")\r\n\t\t\tsettings.extended_path = settings.extended_path:gsub(\"^\\/\",\"\")\r\n\t\t\t\r\n\t\t\tsettings.file_format = \"svg\"\r\n\t\t\tdiagram_results = luaplantuml.process_text(text, settings)\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 261,
    "text": "local text = pkio.ReadFile(filepath)",
    "type": "statement:localassign"
  }, {
    "id": 262,
    "text": "settings.plantuml_path = options.plantuml_path .. \" %s\"",
    "type": "statement:assign"
  }, {
    "id": 263,
    "text": "settings.dir_path = util.getabsolutepath(options.output_dir) .. '/'",
    "type": "statement:assign"
  }, {
    "id": 264,
    "text": "settings.current_file = filepath",
    "type": "statement:assign"
  }, {
    "id": 265,
    "text": "settings.extended_path = cutPathToSources(filepath)",
    "type": "statement:assign"
  }, {
    "id": 266,
    "text": "settings.extended_path = settings.extended_path:gsub(\"^(.+)/.-$\",\"%1/\")",
    "type": "statement:assign"
  }, {
    "id": 267,
    "text": "settings.extended_path = settings.extended_path:gsub(\"^\\/\",\"\")",
    "type": "statement:assign"
  }, {
    "id": 268,
    "text": "settings.file_format = \"svg\"",
    "type": "statement:assign"
  }, {
    "id": 269,
    "text": "diagram_results = luaplantuml.process_text(text, settings)",
    "type": "statement:assign"
  }, {
    "id": 270,
    "text": "io.stdout:write(\"Generating diagrams...\\t\\tOK\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 271,
    "text": "io.stdout:write(\"Generating metrics...\\r\")",
    "type": "statement:functioncall"
  }, {
    "id": 272,
    "text": "local fileList = {}",
    "type": "statement:localassign"
  }, {
    "id": 273,
    "text": "for _, filepath in ipairs(doc.files) do\r\n\t\ttable.insert(fileList, filepath)\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 274,
    "text": "table.insert(fileList, filepath)",
    "type": "statement:functioncall"
  }, {
    "id": 275,
    "text": "local globalMetrics = template.createASTAndMerge(fileList, options.files)",
    "type": "statement:localassign"
  }, {
    "id": 276,
    "text": "for _, filepath in ipairs(doc.files) do\r\n\t    \r\n\t    local text = pkio.ReadFile(filepath)\r\n\t    local formatted_text = formatter.format_text(text);\r\n\r\n\t    -- potrebne nahradit windows newlines za unix newlines, inak dvojite nove riadky!! [LEG zoberie ako SPACE separatne \\r aj \\n, moderne browsery ciste \\r interpretuju ako newline -> dvojite nove riadky]\r\n\t    formatted_text = formatted_text:gsub(\"\\r\\n\",\"\\n\");\r\n\t    \r\n\t    local AST = globalMetrics.file_AST_list[cutPathToSources(filepath)] --Using generated AST instead of creating new one\r\n      \r\n\t    local file_doc = doc.files[filepath]\r\n\t    file_doc.metricsAST = AST\r\n\t    file_doc.formatted_text = formatted_text;\r\n\r\n\t    comments.extendAST(AST) --MODIFIED BY: Michal Juranyi\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 277,
    "text": "local formatted_text = formatter.format_text(text)",
    "type": "statement:localassign"
  }, {
    "id": 278,
    "text": "formatted_text = formatted_text:gsub(\"\\r\\n\",\"\\n\")",
    "type": "statement:assign"
  }, {
    "id": 279,
    "text": "local AST = globalMetrics.file_AST_list[cutPathToSources(filepath)]",
    "type": "statement:localassign"
  }, {
    "id": 280,
    "text": "local file_doc = doc.files[filepath]",
    "type": "statement:localassign"
  }, {
    "id": 281,
    "text": "file_doc.metricsAST = AST",
    "type": "statement:assign"
  }, {
    "id": 282,
    "text": "file_doc.formatted_text = formatted_text",
    "type": "statement:assign"
  }, {
    "id": 283,
    "text": "comments.extendAST(AST)",
    "type": "statement:functioncall"
  }, {
    "id": 284,
    "text": "local listOfFunctions = {}",
    "type": "statement:localassign"
  }, {
    "id": 285,
    "text": "for _,fun in ipairs(globalMetrics.functionDefinitions) do\r\n\t\tfun.docstring = comments.findDocstring(fun)\r\n\t\tlistOfFunctions[fun.name] = fun\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 286,
    "text": "fun.docstring = comments.findDocstring(fun)",
    "type": "statement:assign"
  }, {
    "id": 287,
    "text": "listOfFunctions[fun.name] = fun",
    "type": "statement:assign"
  }, {
    "id": 288,
    "text": "literate.functions = listOfFunctions",
    "type": "statement:assign"
  }, {
    "id": 289,
    "text": "if not options.nomodules then\r\n\t\tfor _, modulename in ipairs(doc.modules) do\r\n\t\t\tlocal module_doc = doc.modules[modulename]\r\n\r\n\t\t\t-- assembly the filename\r\n\t\t\tlocal filename = out_module(modulename)\r\n\t\t\tlogger:info(string.format(\"generating file `%s'\", filename))\r\n\t\t\t\r\n\t\t\tlocal f = lfs.open(filename, \"w\")\r\n\t\t\tassert(f, string.format(\"could not open `%s' for writing\", filename))\r\n\t\t\tio.output(f)\r\n\t\t\tinclude(\"module.lp\", { doc = doc, module_doc = module_doc, globalMetrics= globalMetrics} )\r\n\t\t\tf:close()\r\n\t\tend\r\n\t\tio.stdout:write(\"Generating metrics...\\t\\tOK\\n\")\r\n\t\tio.stdout:flush()\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 290,
    "text": "for _, modulename in ipairs(doc.modules) do\r\n\t\t\tlocal module_doc = doc.modules[modulename]\r\n\r\n\t\t\t-- assembly the filename\r\n\t\t\tlocal filename = out_module(modulename)\r\n\t\t\tlogger:info(string.format(\"generating file `%s'\", filename))\r\n\t\t\t\r\n\t\t\tlocal f = lfs.open(filename, \"w\")\r\n\t\t\tassert(f, string.format(\"could not open `%s' for writing\", filename))\r\n\t\t\tio.output(f)\r\n\t\t\tinclude(\"module.lp\", { doc = doc, module_doc = module_doc, globalMetrics= globalMetrics} )\r\n\t\t\tf:close()\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 291,
    "text": "local filename = out_module(modulename)",
    "type": "statement:localassign"
  }, {
    "id": 292,
    "text": "include(\"module.lp\", { doc = doc, module_doc = module_doc, globalMetrics= globalMetrics} )",
    "type": "statement:functioncall"
  }, {
    "id": 293,
    "text": "io.stdout:write(\"Generating metrics...\\t\\tOK\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 294,
    "text": "if not options.nofiles then\r\n\t\tfor _, filepath in ipairs(doc.files) do\r\n\t\t\tdoc.files[filepath].name = doc.files[filepath].name:gsub(lfs.currentdir(), \"\")\r\n\t\t\tlocal file_doc = doc.files[filepath]\r\n\t\t\tfile_doc.file_name=file_doc.name:match(\"[^/]+$\");\r\n\t\t\tfile_doc.name = file_doc.name:gsub(lfs.currentdir(), \"\")\r\n      file_doc.name = cutPathToSources(file_doc.name)\r\n\t\t\t--MODIFICATION \\\\\\ (Ivan Simko) -> variables formatted_text and metricsAST are taken from file_doc\r\n\t\t\tlocal highlighter_pt=nil;\r\n\t\t\tif(file_doc.formatted_text) then\r\n\t\t\t\t-- convert the metrics parse tree to highlighter-compatible parse tree and pass the result as the parse tree to use during the highlighting process\r\n\t\t\t\tfile_doc.prettyprint, highlighter_pt = highlighter.highlight_text(file_doc.formatted_text,ast_helper.metrics_to_highlighter(file_doc.metricsAST)) -- set prettyprinted text of file_doc (the whole file)\r\n\t\t\t\t-- highlighter_pt now contains modified compatible parse-tree\r\n\t\t\t\t\r\n\t\t\t\t-- VYTVORIT PRETTYPRINT PRE KAZDU FUNKCIU SEPARATNE!\r\n\t\t\t\t-- crazy tabulka.. numericke kluce maju textove hodnoty, ktore su textove kluce do tej istej tabulky.. v ktorych je samotna dokumentacia funkcie\r\n\t\t\t\t-- tiez vytvorit separatnu dokumentacnu stranku pre kazdu funkciu!\r\n\t\t\t\tfor pos, func_name in ipairs(file_doc.functions) do\r\n\t\t\t\t\tlocal functionNode = ast_helper.metrics_to_highlighter(file_doc.metricsAST.luaDoc_functions[func_name]) or {}\r\n\t\t\t\t\t--file_doc['functions'][func_name]['prettyprint']=highlighter.assemble_table(ast_helper.getfunctionnode(highlighter_pt,func_name) or {});\r\n\t\t\t\t\tfile_doc['functions'][func_name]['prettyprint']=highlighter.assemble_table(functionNode);\r\n\t\t\t\t\t-- vygenerujeme unikatny nazov suboru pre tuto funkciu\r\n\r\n\t\t\t\t\tlocal filename = out_function(file_doc.name,func_name,pos);\r\n\t\t\t\t\tfile_doc['functions'][func_name]['detail_link']=filename;\r\n\r\n\t\t\t\t\t-- KARASEK\r\n\t\t\t\t\tif options.plantuml_path ~= nil then \r\n\t\t\t\t\t\tfor _, v in ipairs(diagram_results) do\r\n\r\n\t\t\t\t\t\t\tif v.name == \"global\" then \t\t-- add global UML path\r\n\t\t\t\t\t\t\t\tfile_doc.uml = v.path\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tif v.name == func_name then \t-- add function UML path\r\n\t\t\t\t\t\t\t\tfile_doc['functions'][func_name]['uml']=v.path;\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\r\n\t\t\t\t\tlogger:info(string.format(\"generating function detail: file `%s'\", filename))\r\n      \r\n\t\t\t\t\tlocal f = lfs.open(options.output_dir:gsub(\"/+\",\"/\")..\"files\"..file_doc.name:gsub(\"[^\\/]+$\",\"\")..filename, \"w\")\r\n\t\t\t\t\t\r\n\t\t\t\t\tassert(f, string.format(\"could not open `%s' for writing\", filename))\r\n\t\t\t\t\tio.output(f)\r\n\r\n\t\t\t\t\tinclude(\"function_detail.lp\", { doc = doc, file_doc = file_doc, func=file_doc['functions'][func_name], metricsAST = file_doc.metricsAST, globalMetrics = globalMetrics} )\r\n\t\t\t\t\tf:close()\r\n\t\t\t\tend\r\n\t\t\tend\r\n\r\n                        --MODIFIED BY:  Michal Juranyi\r\n\t\t\tliterate.filename = file_doc.name\r\n                        file_doc.literate = literate.literate(file_doc.metricsAST)\r\n                        --END OF MODIFICATION BY MJ\r\n\t\t\t\r\n\t\t\tfor _, funcinfo in pairs({}) do -- not working!! functionlister.getTableOfFunctions(text,true)) do\t\t-- appendinf function informations to the tableOfFunctions\r\n\t\t\t\tfuncinfo.path = filepath:gsub(lfs.currentdir(), \"\")\t\t\t\t\t\t\t\t\t\t\t\t\t-- set path\r\n\r\n\t\t\t\tmetricinfo.NOF = metricinfo.NOF + 1\t\t\t\t\t\t\t\t\t\t\t-- set metrics about functions\r\n\t\t\t\tif funcinfo.fcntype == \"global\" then metricinfo.NOGF = metricinfo.NOGF + 1 end\r\n\t\t\t\tif funcinfo.fcntype == \"local\"  then metricinfo.NOLF = metricinfo.NOLF + 1 end\r\n\t\t\tend\r\n\t\t\t--print(\"processing: \"..filepath) --TODO DELETE STATIC LOG PRINT\r\n\t\t\t--MODIFICATION ///\r\n      \r\n      local fname = cutPathToSources(file_doc.name)\r\n\t\t\t\r\n\t\t\t-- assembly the filename\r\n\t\t\tlocal filename = out_file(fname:gsub(lfs.currentdir(), \"\"))\r\n\r\n\t\t\tlogger:info(string.format(\"generating file `%s'\", filename))\r\n      \r\n\t\t\tlocal f = lfs.open(filename, \"w\")\r\n\t\t\tassert(f, string.format(\"could not open `%s' for writing\", filename))\r\n\t\t\tio.output(f)\r\n\t\t\t-- call the file template)\r\n\t\t\tinclude(\"file.lp\", {doc = doc, file_doc = file_doc, globalMetrics = globalMetrics} )\r\n\t\t\tf:close()\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 295,
    "text": "for _, filepath in ipairs(doc.files) do\r\n\t\t\tdoc.files[filepath].name = doc.files[filepath].name:gsub(lfs.currentdir(), \"\")\r\n\t\t\tlocal file_doc = doc.files[filepath]\r\n\t\t\tfile_doc.file_name=file_doc.name:match(\"[^/]+$\");\r\n\t\t\tfile_doc.name = file_doc.name:gsub(lfs.currentdir(), \"\")\r\n      file_doc.name = cutPathToSources(file_doc.name)\r\n\t\t\t--MODIFICATION \\\\\\ (Ivan Simko) -> variables formatted_text and metricsAST are taken from file_doc\r\n\t\t\tlocal highlighter_pt=nil;\r\n\t\t\tif(file_doc.formatted_text) then\r\n\t\t\t\t-- convert the metrics parse tree to highlighter-compatible parse tree and pass the result as the parse tree to use during the highlighting process\r\n\t\t\t\tfile_doc.prettyprint, highlighter_pt = highlighter.highlight_text(file_doc.formatted_text,ast_helper.metrics_to_highlighter(file_doc.metricsAST)) -- set prettyprinted text of file_doc (the whole file)\r\n\t\t\t\t-- highlighter_pt now contains modified compatible parse-tree\r\n\t\t\t\t\r\n\t\t\t\t-- VYTVORIT PRETTYPRINT PRE KAZDU FUNKCIU SEPARATNE!\r\n\t\t\t\t-- crazy tabulka.. numericke kluce maju textove hodnoty, ktore su textove kluce do tej istej tabulky.. v ktorych je samotna dokumentacia funkcie\r\n\t\t\t\t-- tiez vytvorit separatnu dokumentacnu stranku pre kazdu funkciu!\r\n\t\t\t\tfor pos, func_name in ipairs(file_doc.functions) do\r\n\t\t\t\t\tlocal functionNode = ast_helper.metrics_to_highlighter(file_doc.metricsAST.luaDoc_functions[func_name]) or {}\r\n\t\t\t\t\t--file_doc['functions'][func_name]['prettyprint']=highlighter.assemble_table(ast_helper.getfunctionnode(highlighter_pt,func_name) or {});\r\n\t\t\t\t\tfile_doc['functions'][func_name]['prettyprint']=highlighter.assemble_table(functionNode);\r\n\t\t\t\t\t-- vygenerujeme unikatny nazov suboru pre tuto funkciu\r\n\r\n\t\t\t\t\tlocal filename = out_function(file_doc.name,func_name,pos);\r\n\t\t\t\t\tfile_doc['functions'][func_name]['detail_link']=filename;\r\n\r\n\t\t\t\t\t-- KARASEK\r\n\t\t\t\t\tif options.plantuml_path ~= nil then \r\n\t\t\t\t\t\tfor _, v in ipairs(diagram_results) do\r\n\r\n\t\t\t\t\t\t\tif v.name == \"global\" then \t\t-- add global UML path\r\n\t\t\t\t\t\t\t\tfile_doc.uml = v.path\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tif v.name == func_name then \t-- add function UML path\r\n\t\t\t\t\t\t\t\tfile_doc['functions'][func_name]['uml']=v.path;\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\r\n\t\t\t\t\tlogger:info(string.format(\"generating function detail: file `%s'\", filename))\r\n      \r\n\t\t\t\t\tlocal f = lfs.open(options.output_dir:gsub(\"/+\",\"/\")..\"files\"..file_doc.name:gsub(\"[^\\/]+$\",\"\")..filename, \"w\")\r\n\t\t\t\t\t\r\n\t\t\t\t\tassert(f, string.format(\"could not open `%s' for writing\", filename))\r\n\t\t\t\t\tio.output(f)\r\n\r\n\t\t\t\t\tinclude(\"function_detail.lp\", { doc = doc, file_doc = file_doc, func=file_doc['functions'][func_name], metricsAST = file_doc.metricsAST, globalMetrics = globalMetrics} )\r\n\t\t\t\t\tf:close()\r\n\t\t\t\tend\r\n\t\t\tend\r\n\r\n                        --MODIFIED BY:  Michal Juranyi\r\n\t\t\tliterate.filename = file_doc.name\r\n                        file_doc.literate = literate.literate(file_doc.metricsAST)\r\n                        --END OF MODIFICATION BY MJ\r\n\t\t\t\r\n\t\t\tfor _, funcinfo in pairs({}) do -- not working!! functionlister.getTableOfFunctions(text,true)) do\t\t-- appendinf function informations to the tableOfFunctions\r\n\t\t\t\tfuncinfo.path = filepath:gsub(lfs.currentdir(), \"\")\t\t\t\t\t\t\t\t\t\t\t\t\t-- set path\r\n\r\n\t\t\t\tmetricinfo.NOF = metricinfo.NOF + 1\t\t\t\t\t\t\t\t\t\t\t-- set metrics about functions\r\n\t\t\t\tif funcinfo.fcntype == \"global\" then metricinfo.NOGF = metricinfo.NOGF + 1 end\r\n\t\t\t\tif funcinfo.fcntype == \"local\"  then metricinfo.NOLF = metricinfo.NOLF + 1 end\r\n\t\t\tend\r\n\t\t\t--print(\"processing: \"..filepath) --TODO DELETE STATIC LOG PRINT\r\n\t\t\t--MODIFICATION ///\r\n      \r\n      local fname = cutPathToSources(file_doc.name)\r\n\t\t\t\r\n\t\t\t-- assembly the filename\r\n\t\t\tlocal filename = out_file(fname:gsub(lfs.currentdir(), \"\"))\r\n\r\n\t\t\tlogger:info(string.format(\"generating file `%s'\", filename))\r\n      \r\n\t\t\tlocal f = lfs.open(filename, \"w\")\r\n\t\t\tassert(f, string.format(\"could not open `%s' for writing\", filename))\r\n\t\t\tio.output(f)\r\n\t\t\t-- call the file template)\r\n\t\t\tinclude(\"file.lp\", {doc = doc, file_doc = file_doc, globalMetrics = globalMetrics} )\r\n\t\t\tf:close()\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 296,
    "text": "doc.files[filepath].name = doc.files[filepath].name:gsub(lfs.currentdir(), \"\")",
    "type": "statement:assign"
  }, {
    "id": 297,
    "text": "file_doc.file_name=file_doc.name:match(\"[^/]+$\")",
    "type": "statement:assign"
  }, {
    "id": 298,
    "text": "file_doc.name = file_doc.name:gsub(lfs.currentdir(), \"\")",
    "type": "statement:assign"
  }, {
    "id": 299,
    "text": "file_doc.name = cutPathToSources(file_doc.name)",
    "type": "statement:assign"
  }, {
    "id": 300,
    "text": "local highlighter_pt=nil",
    "type": "statement:localassign"
  }, {
    "id": 301,
    "text": "if(file_doc.formatted_text) then\r\n\t\t\t\t-- convert the metrics parse tree to highlighter-compatible parse tree and pass the result as the parse tree to use during the highlighting process\r\n\t\t\t\tfile_doc.prettyprint, highlighter_pt = highlighter.highlight_text(file_doc.formatted_text,ast_helper.metrics_to_highlighter(file_doc.metricsAST)) -- set prettyprinted text of file_doc (the whole file)\r\n\t\t\t\t-- highlighter_pt now contains modified compatible parse-tree\r\n\t\t\t\t\r\n\t\t\t\t-- VYTVORIT PRETTYPRINT PRE KAZDU FUNKCIU SEPARATNE!\r\n\t\t\t\t-- crazy tabulka.. numericke kluce maju textove hodnoty, ktore su textove kluce do tej istej tabulky.. v ktorych je samotna dokumentacia funkcie\r\n\t\t\t\t-- tiez vytvorit separatnu dokumentacnu stranku pre kazdu funkciu!\r\n\t\t\t\tfor pos, func_name in ipairs(file_doc.functions) do\r\n\t\t\t\t\tlocal functionNode = ast_helper.metrics_to_highlighter(file_doc.metricsAST.luaDoc_functions[func_name]) or {}\r\n\t\t\t\t\t--file_doc['functions'][func_name]['prettyprint']=highlighter.assemble_table(ast_helper.getfunctionnode(highlighter_pt,func_name) or {});\r\n\t\t\t\t\tfile_doc['functions'][func_name]['prettyprint']=highlighter.assemble_table(functionNode);\r\n\t\t\t\t\t-- vygenerujeme unikatny nazov suboru pre tuto funkciu\r\n\r\n\t\t\t\t\tlocal filename = out_function(file_doc.name,func_name,pos);\r\n\t\t\t\t\tfile_doc['functions'][func_name]['detail_link']=filename;\r\n\r\n\t\t\t\t\t-- KARASEK\r\n\t\t\t\t\tif options.plantuml_path ~= nil then \r\n\t\t\t\t\t\tfor _, v in ipairs(diagram_results) do\r\n\r\n\t\t\t\t\t\t\tif v.name == \"global\" then \t\t-- add global UML path\r\n\t\t\t\t\t\t\t\tfile_doc.uml = v.path\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tif v.name == func_name then \t-- add function UML path\r\n\t\t\t\t\t\t\t\tfile_doc['functions'][func_name]['uml']=v.path;\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\r\n\t\t\t\t\tlogger:info(string.format(\"generating function detail: file `%s'\", filename))\r\n      \r\n\t\t\t\t\tlocal f = lfs.open(options.output_dir:gsub(\"/+\",\"/\")..\"files\"..file_doc.name:gsub(\"[^\\/]+$\",\"\")..filename, \"w\")\r\n\t\t\t\t\t\r\n\t\t\t\t\tassert(f, string.format(\"could not open `%s' for writing\", filename))\r\n\t\t\t\t\tio.output(f)\r\n\r\n\t\t\t\t\tinclude(\"function_detail.lp\", { doc = doc, file_doc = file_doc, func=file_doc['functions'][func_name], metricsAST = file_doc.metricsAST, globalMetrics = globalMetrics} )\r\n\t\t\t\t\tf:close()\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 302,
    "text": "file_doc.prettyprint, highlighter_pt = highlighter.highlight_text(file_doc.formatted_text,ast_helper.metrics_to_highlighter(file_doc.metricsAST))",
    "type": "statement:assign"
  }, {
    "id": 303,
    "text": "for pos, func_name in ipairs(file_doc.functions) do\r\n\t\t\t\t\tlocal functionNode = ast_helper.metrics_to_highlighter(file_doc.metricsAST.luaDoc_functions[func_name]) or {}\r\n\t\t\t\t\t--file_doc['functions'][func_name]['prettyprint']=highlighter.assemble_table(ast_helper.getfunctionnode(highlighter_pt,func_name) or {});\r\n\t\t\t\t\tfile_doc['functions'][func_name]['prettyprint']=highlighter.assemble_table(functionNode);\r\n\t\t\t\t\t-- vygenerujeme unikatny nazov suboru pre tuto funkciu\r\n\r\n\t\t\t\t\tlocal filename = out_function(file_doc.name,func_name,pos);\r\n\t\t\t\t\tfile_doc['functions'][func_name]['detail_link']=filename;\r\n\r\n\t\t\t\t\t-- KARASEK\r\n\t\t\t\t\tif options.plantuml_path ~= nil then \r\n\t\t\t\t\t\tfor _, v in ipairs(diagram_results) do\r\n\r\n\t\t\t\t\t\t\tif v.name == \"global\" then \t\t-- add global UML path\r\n\t\t\t\t\t\t\t\tfile_doc.uml = v.path\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tif v.name == func_name then \t-- add function UML path\r\n\t\t\t\t\t\t\t\tfile_doc['functions'][func_name]['uml']=v.path;\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\r\n\t\t\t\t\tlogger:info(string.format(\"generating function detail: file `%s'\", filename))\r\n      \r\n\t\t\t\t\tlocal f = lfs.open(options.output_dir:gsub(\"/+\",\"/\")..\"files\"..file_doc.name:gsub(\"[^\\/]+$\",\"\")..filename, \"w\")\r\n\t\t\t\t\t\r\n\t\t\t\t\tassert(f, string.format(\"could not open `%s' for writing\", filename))\r\n\t\t\t\t\tio.output(f)\r\n\r\n\t\t\t\t\tinclude(\"function_detail.lp\", { doc = doc, file_doc = file_doc, func=file_doc['functions'][func_name], metricsAST = file_doc.metricsAST, globalMetrics = globalMetrics} )\r\n\t\t\t\t\tf:close()\r\n\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 304,
    "text": "local functionNode = ast_helper.metrics_to_highlighter(file_doc.metricsAST.luaDoc_functions[func_name]) or {}",
    "type": "statement:localassign"
  }, {
    "id": 305,
    "text": "file_doc['functions'][func_name]['prettyprint']=highlighter.assemble_table(functionNode)",
    "type": "statement:assign"
  }, {
    "id": 306,
    "text": "local filename = out_function(file_doc.name,func_name,pos)",
    "type": "statement:localassign"
  }, {
    "id": 307,
    "text": "file_doc['functions'][func_name]['detail_link']=filename",
    "type": "statement:assign"
  }, {
    "id": 308,
    "text": "if options.plantuml_path ~= nil then \r\n\t\t\t\t\t\tfor _, v in ipairs(diagram_results) do\r\n\r\n\t\t\t\t\t\t\tif v.name == \"global\" then \t\t-- add global UML path\r\n\t\t\t\t\t\t\t\tfile_doc.uml = v.path\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tif v.name == func_name then \t-- add function UML path\r\n\t\t\t\t\t\t\t\tfile_doc['functions'][func_name]['uml']=v.path;\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 309,
    "text": "for _, v in ipairs(diagram_results) do\r\n\r\n\t\t\t\t\t\t\tif v.name == \"global\" then \t\t-- add global UML path\r\n\t\t\t\t\t\t\t\tfile_doc.uml = v.path\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tif v.name == func_name then \t-- add function UML path\r\n\t\t\t\t\t\t\t\tfile_doc['functions'][func_name]['uml']=v.path;\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 310,
    "text": "if v.name == \"global\" then \t\t-- add global UML path\r\n\t\t\t\t\t\t\t\tfile_doc.uml = v.path\r\n\t\t\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 311,
    "text": "file_doc.uml = v.path",
    "type": "statement:assign"
  }, {
    "id": 312,
    "text": "if v.name == func_name then \t-- add function UML path\r\n\t\t\t\t\t\t\t\tfile_doc['functions'][func_name]['uml']=v.path;\r\n\t\t\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 313,
    "text": "file_doc['functions'][func_name]['uml']=v.path",
    "type": "statement:assign"
  }, {
    "id": 314,
    "text": "logger:info(string.format(\"generating function detail: file `%s'\", filename))",
    "type": "statement:functioncall"
  }, {
    "id": 315,
    "text": "local f = lfs.open(options.output_dir:gsub(\"/+\",\"/\")..\"files\"..file_doc.name:gsub(\"[^\\/]+$\",\"\")..filename, \"w\")",
    "type": "statement:localassign"
  }, {
    "id": 316,
    "text": "include(\"function_detail.lp\", { doc = doc, file_doc = file_doc, func=file_doc['functions'][func_name], metricsAST = file_doc.metricsAST, globalMetrics = globalMetrics} )",
    "type": "statement:functioncall"
  }, {
    "id": 317,
    "text": "literate.filename = file_doc.name",
    "type": "statement:assign"
  }, {
    "id": 318,
    "text": "file_doc.literate = literate.literate(file_doc.metricsAST)",
    "type": "statement:assign"
  }, {
    "id": 319,
    "text": "for _, funcinfo in pairs({}) do -- not working!! functionlister.getTableOfFunctions(text,true)) do\t\t-- appendinf function informations to the tableOfFunctions\r\n\t\t\t\tfuncinfo.path = filepath:gsub(lfs.currentdir(), \"\")\t\t\t\t\t\t\t\t\t\t\t\t\t-- set path\r\n\r\n\t\t\t\tmetricinfo.NOF = metricinfo.NOF + 1\t\t\t\t\t\t\t\t\t\t\t-- set metrics about functions\r\n\t\t\t\tif funcinfo.fcntype == \"global\" then metricinfo.NOGF = metricinfo.NOGF + 1 end\r\n\t\t\t\tif funcinfo.fcntype == \"local\"  then metricinfo.NOLF = metricinfo.NOLF + 1 end\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 320,
    "text": "funcinfo.path = filepath:gsub(lfs.currentdir(), \"\")",
    "type": "statement:assign"
  }, {
    "id": 321,
    "text": "metricinfo.NOF = metricinfo.NOF + 1",
    "type": "statement:assign"
  }, {
    "id": 322,
    "text": "if funcinfo.fcntype == \"global\" then metricinfo.NOGF = metricinfo.NOGF + 1 end",
    "type": "statement:if"
  }, {
    "id": 323,
    "text": "metricinfo.NOGF = metricinfo.NOGF + 1",
    "type": "statement:assign"
  }, {
    "id": 324,
    "text": "if funcinfo.fcntype == \"local\"  then metricinfo.NOLF = metricinfo.NOLF + 1 end",
    "type": "statement:if"
  }, {
    "id": 325,
    "text": "metricinfo.NOLF = metricinfo.NOLF + 1",
    "type": "statement:assign"
  }, {
    "id": 326,
    "text": "local fname = cutPathToSources(file_doc.name)",
    "type": "statement:localassign"
  }, {
    "id": 327,
    "text": "local filename = out_file(fname:gsub(lfs.currentdir(), \"\"))",
    "type": "statement:localassign"
  }, {
    "id": 328,
    "text": "include(\"file.lp\", {doc = doc, file_doc = file_doc, globalMetrics = globalMetrics} )",
    "type": "statement:functioncall"
  }, {
    "id": 329,
    "text": "local functions = { name = \"index.html\" }",
    "type": "statement:localassign"
  }, {
    "id": 330,
    "text": "local f = lfs.open(options.output_dir..\"functionlist/index.html\", \"w\")",
    "type": "statement:localassign"
  }, {
    "id": 331,
    "text": "assert(f, string.format(\"could not open functionlist/index.html for writing\"))",
    "type": "statement:functioncall"
  }, {
    "id": 332,
    "text": "local functionsParam = {\r\n\t\tdoc = doc,\r\n\t\tfunctionList = funcTableTemplate.createFunctionTableList(globalMetrics, \"functionDefinitions\", false),\r\n\t\tdocFunctionList = funcTableTemplate.createDocumentedFunctionTableList(globalMetrics, \"functionDefinitions\", 1, false),\r\n\t\tnDocFunctionList = funcTableTemplate.createDocumentedFunctionTableList(globalMetrics, \"functionDefinitions\", 0, false)\r\n\t}",
    "type": "statement:localassign"
  }, {
    "id": 333,
    "text": "functionsParam.functionList = addLinksToTemplate(functionsParam.functionList)",
    "type": "statement:assign"
  }, {
    "id": 334,
    "text": "functionsParam.docFunctionList = addLinksToTemplate(functionsParam.docFunctionList)",
    "type": "statement:assign"
  }, {
    "id": 335,
    "text": "functionsParam.nDocFunctionList = addLinksToTemplate(functionsParam.nDocFunctionList)",
    "type": "statement:assign"
  }, {
    "id": 336,
    "text": "include(\"indexOfFunctions.lp\", functionsParam)",
    "type": "statement:functioncall"
  }, {
    "id": 337,
    "text": "local metrics = { name = \"index.html\" }",
    "type": "statement:localassign"
  }, {
    "id": 338,
    "text": "local f = lfs.open(options.output_dir..\"metrics/index.html\", \"w\")",
    "type": "statement:localassign"
  }, {
    "id": 339,
    "text": "assert(f, string.format(\"could not open metrics/index.html for writing\"))",
    "type": "statement:functioncall"
  }, {
    "id": 340,
    "text": "local metricsParam = {\r\n\t\tdoc = doc,\r\n\t\tLOCTable = docTemplates.createLOCTable(globalMetrics.LOC, globalMetrics.fileNum, globalMetrics.moduleNum),\r\n\t\tdocMetricsTable = docTemplates.createDocMetricsTable(globalMetrics.documentMetrics),\r\n\t\thalsteadTable = docTemplates.createHalsteadTable(globalMetrics.halstead),\r\n\t\tstatementsTable = docTemplates.createStatementsTable(globalMetrics.statements),\r\n\t\tfunctionsTable = docTemplates.createFunctionsTable(globalMetrics, globalMetrics.fileNum),\r\n\t\tmoduleLenGraph = docTemplates.createModuleLenGraph(globalMetrics, false),\r\n\t\tfileLenGraph = docTemplates.createFileLenGraph(globalMetrics, false),\r\n\t\tcouplingTable = docTemplates.createCouplingTable(globalMetrics)\r\n\t}",
    "type": "statement:localassign"
  }, {
    "id": 341,
    "text": "include(\"indexOfMetrics.lp\", metricsParam )",
    "type": "statement:functioncall"
  }, {
    "id": 342,
    "text": "local f = lfs.open(options.output_dir..\"smells/index.html\", \"w\")",
    "type": "statement:localassign"
  }, {
    "id": 343,
    "text": "assert(f, string.format(\"could not open smells/index.html for writing\"))",
    "type": "statement:functioncall"
  }, {
    "id": 344,
    "text": "local smellsParam = {\r\n\t\tdoc = doc,\r\n\t\tlongMethodTable = smellTemplates.createLongMethodTable(globalMetrics),\r\n\t\tcycloTable = smellTemplates.createCycloTable(globalMetrics),\r\n\t\tmanyParamsTable = smellTemplates.createManyParamsTable(globalMetrics),\r\n\t\tmoduleTables = smellTemplates.createModuleTables(globalMetrics),\r\n\t\tMITable = smellTemplates.createMITable(globalMetrics),\r\n\t\tlongLinesTable = smellTemplates.createLongLinesTable(globalMetrics),\r\n\t\ttablesWithManyFieldsTable = smellTemplates.createTablesWithManyFieldsTable(globalMetrics),\r\n\t\tfunctionDepthTable = smellTemplates.createFunctionDepthTable(globalMetrics),\r\n\t\ttableDepthTable = smellTemplates.createTableDepthTable(globalMetrics),\r\n\t\tupvaluesTable = smellTemplates.createUpvaluesTable(globalMetrics),\r\n\r\n\t\tlongMethodGraph = smellTemplates.createLongMethodGraph(globalMetrics, false),\r\n\t\tcycloGraph = smellTemplates.createCycloGraph(globalMetrics, false),\r\n\t\tmanyParamsGraph = smellTemplates.createManyParamsGraph(globalMetrics, false),\r\n\t\tlongLinesGraph = smellTemplates.createLongLinesGraph(globalMetrics, false),\r\n\t\ttablesWithManyFieldsGraph = smellTemplates.createTablesWithManyFieldsGraph(globalMetrics, false),\r\n\t\tfunctionDepthGraph = smellTemplates.createFunctionDepthGraph(globalMetrics, false),\r\n\t\ttableDepthGraph = smellTemplates.createTableDepthGraph(globalMetrics, false),\r\n\t\tupvaluesGraph = smellTemplates.createUpvaluesGraph(globalMetrics, false),\r\n\t}",
    "type": "statement:localassign"
  }, {
    "id": 345,
    "text": "include(\"indexOfSmells.lp\", smellsParam )",
    "type": "statement:functioncall"
  }, {
    "id": 346,
    "text": "local tables = { name = \"index.html\" }",
    "type": "statement:localassign"
  }, {
    "id": 347,
    "text": "local f = lfs.open(options.output_dir..\"tablelist/index.html\", \"w\")",
    "type": "statement:localassign"
  }, {
    "id": 348,
    "text": "assert(f, string.format(\"could not open tablelist/index.html for writing\"))",
    "type": "statement:functioncall"
  }, {
    "id": 349,
    "text": "local tableParam = {\r\n\t\tdoc = doc,\r\n\t\ttableList = funcTableTemplate.createFunctionTableList(globalMetrics, \"tables\", false),\r\n\t\tdocTableList = funcTableTemplate.createDocumentedFunctionTableList(globalMetrics, \"tables\", 1, false),\r\n\t\tnDocTableList = funcTableTemplate.createDocumentedFunctionTableList(globalMetrics, \"tables\", 0, false)\r\n\t}",
    "type": "statement:localassign"
  }, {
    "id": 350,
    "text": "tableParam.tableList = addLinksToTemplate(tableParam.tableList)",
    "type": "statement:assign"
  }, {
    "id": 351,
    "text": "tableParam.docTableList = addLinksToTemplate(tableParam.docTableList)",
    "type": "statement:assign"
  }, {
    "id": 352,
    "text": "tableParam.nDocTableList = addLinksToTemplate(tableParam.nDocTableList)",
    "type": "statement:assign"
  }, {
    "id": 353,
    "text": "include(\"indexOfTables.lp\", tableParam)",
    "type": "statement:functioncall"
  }, {
    "id": 354,
    "text": "local tables = { name = \"customs.html\" }",
    "type": "statement:localassign"
  }, {
    "id": 355,
    "text": "local f = lfs.open(options.output_dir..\"customcommentlist/customs.html\", \"w\")",
    "type": "statement:localassign"
  }, {
    "id": 356,
    "text": "assert(f, string.format(\"could not open customcommentlist/customs.html for writing\"))",
    "type": "statement:functioncall"
  }, {
    "id": 357,
    "text": "local customParam = {\r\n\t\tdoc = doc,\r\n\t\ttodoComments = luadocerTemplates.createCustomCommentList(doc, \"todo\", file_link),\r\n\t\tbugComments = luadocerTemplates.createCustomCommentList(doc, \"bug\", file_link),\r\n\t\tquestionComments = luadocerTemplates.createCustomCommentList(doc, \"question\", file_link),\r\n\t\tfixmeComments = luadocerTemplates.createCustomCommentList(doc, \"fixme\", file_link),\r\n\t\tinfoComments = luadocerTemplates.createCustomCommentList(doc, \"info\", file_link),\r\n\t\thowComments = luadocerTemplates.createCustomCommentList(doc, \"how\", file_link)\r\n\t}",
    "type": "statement:localassign"
  }, {
    "id": 358,
    "text": "include(\"custom.lp\", customParam)",
    "type": "statement:functioncall"
  }, {
    "id": 359,
    "text": "local checks = { name = \"index.html\" }",
    "type": "statement:localassign"
  }, {
    "id": 360,
    "text": "local f = lfs.open(options.output_dir..\"check/index.html\", \"w\")",
    "type": "statement:localassign"
  }, {
    "id": 361,
    "text": "assert(f, string.format(\"could not open diagram/index.html for writing\"))",
    "type": "statement:functioncall"
  }, {
    "id": 362,
    "text": "include(\"indexOfChecks.lp\", { doc = doc, checks = analysis_results} )",
    "type": "statement:functioncall"
  }, {
    "id": 363,
    "text": "local diagrams = { name = \"index.html\" }",
    "type": "statement:localassign"
  }, {
    "id": 364,
    "text": "local f = lfs.open(options.output_dir..\"diagram/index.html\", \"w\")",
    "type": "statement:localassign"
  }, {
    "id": 365,
    "text": "local diagramParam = {\r\n\t\tdoc = doc,\r\n\t\tglobalDiagram = luadocerTemplates.createUMLDiagrams(diagram_results, true, link),\r\n\t\tfunctionDiagram = luadocerTemplates.createUMLDiagrams(diagram_results, false, link)\r\n\t}",
    "type": "statement:localassign"
  }, {
    "id": 366,
    "text": "include(\"indexOfDiagrams.lp\", diagramParam )",
    "type": "statement:functioncall"
  }, {
    "id": 367,
    "text": "file_copy(\"literate.js\")",
    "type": "statement:functioncall"
  }, {
    "id": 368,
    "text": "file_copy(\"luadoc.css\")",
    "type": "statement:functioncall"
  }, {
    "id": 369,
    "text": "file_copy(\"jquery.js\")",
    "type": "statement:functioncall"
  }, {
    "id": 370,
    "text": "file_copy(\"prettyprint.js\")",
    "type": "statement:functioncall"
  }, {
    "id": 371,
    "text": "file_copy(\"menu.js\")",
    "type": "statement:functioncall"
  }, {
    "id": 372,
    "text": "file_copy(\"highcharts.js\")",
    "type": "statement:functioncall"
  }, {
    "id": 373,
    "text": "file_copy(\"jquery-ui.min.js\")",
    "type": "statement:functioncall"
  }, {
    "id": 374,
    "text": "file_copy(\"indexOfFunctions.css\")",
    "type": "statement:functioncall"
  }, {
    "id": 375,
    "text": "file_copy(\"jquery-ui-1.8.11.custom.css\")",
    "type": "statement:functioncall"
  }, {
    "id": 376,
    "text": "file_copy(\"fileIcon.jpg\")",
    "type": "statement:functioncall"
  }, {
    "id": 377,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 378,
    "text": "function (text)\r\n\r\n\t\tif text~= nil then\r\n\t\t\ttext = text:gsub(lfs.currentdir(), \"\")\r\n\t\tend\r\n\t\tif(text==nil) then\r\n\t\t\treturn nil;\r\n\t\tend\r\n\t\tif(type(text)~=\"string\") then\r\n\t\t\treturn text;\r\n\t\tend\r\n\t\ttext=text:gsub(\"&\",\"&amp;\");\r\n\t  \ttext=text:gsub(\"&#\",\"&#38;&#35;\");\r\n\t\ttext=text:gsub(\"<\",\"&lt;\");\r\n\t\ttext=text:gsub(\">\",\"&gt;\");\r\n\t\ttext=text:gsub(\"\\\"\",\"&#34;\");\r\n\t\ttext=text:gsub(\"'\",\"&#39;\");\r\n\t\treturn text;\r\n\tend",
    "type": "function"
  }, {
    "id": 379,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 380,
    "text": "function(paths)\r\n\t\tlocal prefix\r\n\t\tlocal newpref=''\r\n\t\tfor k,v in pairs(paths) do\t\r\n\t\t\tv.path = v.path:gsub(lfs.currentdir(), \"\")\r\n\t\t--OKA\r\n\t\t\tif(prefix==nil)then\r\n\t\t\t\t\r\n\t\t\telseif(prefix~=v.path)then\r\n\t\t\t\tlocal split1 = {}\r\n\t\t\t\tlocal split2 = {}\r\n\t\t\t\tfor _,split in pairs(strsplit('/',prefix))do\r\n\t\t\t\t\ttable.insert(split1,split)\r\n\t\t\t\tend\r\n\t\t\t\tfor _,split in pairs(strsplit('/',v.path))do\r\n\t\t\t\t\ttable.insert(split2,split)\r\n\t\t\t\tend\r\n\t\t\t\tif(#split1 > #split2)then\r\n\t\t\t\t\tfor index,str in pairs(split2) do\r\n\t\t\t\t\t\tif(split1[index]==str)then\r\n\t\t\t\t\t\t\tif(newpref=='')then\r\n\t\t\t\t\t\t\t\tnewpref = '/' .. str\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tnewpref = newpref  .. '/' .. str\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\telse\r\n\t\t\t\t\tfor index,str in pairs(split1) do\r\n\t\t\t\t\t\tif(split2[index]==str)then\r\n\t\t\t\t\t\t\tif(newpref=='')then\r\n\t\t\t\t\t\t\t\tnewpref = '/' .. str\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tnewpref = newpref  .. '/' ..  str\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\t\tend\r\n\t\t\t\tprefix = newpref\t\t\t\r\n\t\t\t\tnewpref=''\r\n\t\t\tend\r\n\t\tend\r\n\r\n\t\treturn prefix\r\n\tend",
    "type": "function"
  }, {
    "id": 381,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 382,
    "text": "function(common,full)\r\n\t\tlocal suffix\r\n\t\tif(full == common or common==nil)then\r\n\t\t\treturn ''\r\n\t\tend\r\n\t\tsuffix = string.sub(full,string.len(common)+1)\r\n\t\treturn suffix\r\n\tend",
    "type": "function"
  }, {
    "id": 383,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 384,
    "text": "function(a, b) return file_link(a, b) end",
    "type": "function"
  }, {
    "id": 385,
    "text": "function()\r\n\t\tid = id + 1\r\n\t\treturn id\r\n\tend",
    "type": "function"
  }, {
    "id": 386,
    "text": "id = id + 1",
    "type": "statement:assign"
  }, {
    "id": 387,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 388,
    "text": "function()\r\n\tlocal id = 0\r\n\treturn function()\r\n\t\tid = id + 1\r\n\t\treturn id\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 389,
    "text": "local id = 0",
    "type": "statement:localassign"
  }, {
    "id": 390,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 391,
    "text": "function () h = \"../\" .. h end",
    "type": "function"
  }, {
    "id": 392,
    "text": "function () href = \"../\" .. href end",
    "type": "function"
  }, {
    "id": 393,
    "text": "function () href = \"../\" .. href end",
    "type": "function"
  }, {
    "id": 394,
    "text": "",
    "type": "function container"
  }, {
    "id": 395,
    "text": "local function createCustomCommentList(doc, commentType, fileLink)\r\n  \r\n  local commentTable = \"<ul>\"\r\n  local typeCompare = commentType .. \"s\"\r\n  local from = \"customcommentlist/custom.lp\" --File from where links will be created\r\n\r\n  for k,file in pairs(doc.files) do \r\n\r\n\tif(type(file) == \"table\") then --Looping through file tables\r\n\r\n\t  if(file.metricsAST) then --For file AST list\r\n\r\n\t\tif(#file.metricsAST.metrics.documentMetrics[typeCompare] > 0) then --If custom comments exists in file\r\n\r\n\t\t  --Add link to file where comments appear\r\n\t\t  commentTable = commentTable .. \"<li><a href='\" .. doc.sh(fileLink(file.name,from)) .. \"'>.\" ..\r\n\t\t\tfile.name .. \"</a><br><ol>\"\r\n\r\n\t\t  for k,v in pairs(file.metricsAST.metrics.documentMetrics) do\r\n\r\n\t\t\tif(k == typeCompare and #v > 0)then\r\n\r\n\t\t\t  for i, comment in ipairs(v) do\r\n\r\n\t\t\t\t--Add all custom comments entries of type\r\n\t\t\t\tcommentTable = commentTable .. \"<li><a href='\" .. doc.sh(fileLink(file.name,from)) ..\r\n\t\t\t\t  \"#\" .. commentType .. i .. \"'>\" .. comment.parsed.text .. \"</a></li>\"\r\n\r\n\t\t\t  end\r\n\t\t\tend\r\n\t\t  end\r\n\r\n\t\t  --Close table entry\r\n\t\t  commentTable = commentTable .. \"</ol><br /></li>\"\r\n\r\n\t\tend\r\n\t  end\r\n\tend\r\n  end\r\n\r\n  return commentTable .. \"</ul>\"\r\n\r\nend",
    "type": "function"
  }, {
    "id": 396,
    "text": "local function createUMLDiagrams(diagrams, global, link)\r\n  \r\n  local diagram = \"\"\r\n  local globVal = nil --Default is not global\r\n\r\n  if global then globVal = \"global\" end --If global is set overwrite value\r\n\r\n  for _, v in ipairs(diagrams) do --For each entry in diagram list\r\n\r\n\tif (v.name:match(\"global\") == globVal) then --If diagram is global or local (based to parameter)\r\n\r\n\t\t--Diagram CSS styles\r\n\t\tdiagram = diagram .. \"<pre style='text-decoration: underline;font-size: 150%;'>\"\r\n\r\n\t\t--Add diagram title\r\n\t\tif v.name == \"global\" then\r\n\t\t\tdiagram = diagram .. \"Global diagram</pre>\"\r\n\t\telse\r\n\t\t\tdiagram = diagram .. \"Function \" .. v.name .. \" diagram</pre>\"\r\n\t\tend\r\n\r\n\t\t--Add diagram with link to picture\r\n\t\tdiagram = diagram .. \"<a href = '\" .. link((v.path:gsub(\"^/\",\"../\")),\"diagram/index.html\") .. \"'>\" ..\r\n\t\t\t\"<img src='\" .. link((v.path:gsub(\"^/\",\"../\")),\"diagram/index.html\") .. \"'  width=auto> </a><br>\"\r\n\r\n\t\t--Add posibility to show PlantUML syntax\r\n\t\tdiagram = diagram .. \"<a href='#' class='toggle_source' \" ..\r\n\t\t\t\"onclick='$(this).next().slideToggle(); return false;'><h2>Show / Hide PlantUML syntax</h2>\" ..\r\n\t\t\t\"</a><div class='syntax' style='display: none'><pre>\" .. v.uml_string .. \"</pre></div><br>\"\r\n\r\n\tend\r\n  end\r\n\r\n  --Return all local / global diagrams\r\n  return diagram\r\n\r\nend",
    "type": "function"
  }, {
    "id": 397,
    "text": "function ReadFile(_sFileName)\r\n\tlocal f = io.input(_sFileName)\r\n\tlocal sData_ = f:read(\"*a\")\r\n\tf:close()\r\n\treturn sData_\r\nend",
    "type": "function"
  }, {
    "id": 398,
    "text": "function include (filename, env)\r\n\t-- read the whole contents of the file\r\n\tlocal fh = assert (open (filename))\r\n\tlocal src = fh:read(\"*a\")\r\n\tfh:close()\r\n\t-- translates the file into a function\r\n\tlocal prog = compile (src, '@'..filename)\r\n\tlocal _env\r\n\tif env then\r\n\t\t_env = getfenv (prog)\r\n\t\tsetfenv (prog, env)\r\n\tend\r\n\tprog ()\r\nend",
    "type": "function"
  }, {
    "id": 399,
    "text": "function getabsolutepath(n)\t\t\t\r\n\tlocal original_path = lfs.currentdir()\r\n\r\n\tlocal real_path=''\r\n\tif(isrelative(n)) then\r\n\t\t\r\n\t\tif(n:match(\".\")~=\"/\") then \t\t--prvy znak nie je / => path nie je absolutna\r\n\t\t\treal_path = lfs.currentdir()\r\n\t\tend\r\n\r\n\t\t\r\n\t\tfor v in string.gmatch(n,\"[^/]+\") do\r\n\t\t\tif(v ==\"..\") then \r\n\t\t\t\treal_path = real_path .. \"/\\.\\.\"\r\n \t\t\t\tlfs.chdir(real_path)\t\t\t\t\r\n\t\t\t\treal_path =lfs.currentdir()\r\n\t\t\telseif(v~=\".\") then\r\n\t\t\t\treal_path = real_path .. \"/\" ..  v\r\n\t\t\tend\r\n\r\n\t\tend\r\n\tlfs.chdir(original_path)\r\n\r\n\t\treturn (string.gsub(real_path,\"[/]+\",'/'))\t\t--replace multi-slahes with one simple slash. like : /////    ->  /\r\n\tend\r\n\tlfs.chdir(original_path)\t\r\n\treturn (string.gsub(n,\"[/]+\",'/'))\r\nend",
    "type": "function"
  }, {
    "id": 400,
    "text": "lfs",
    "type": "module"
  }, {
    "id": 401,
    "text": "currentdir",
    "type": "global function"
  }, {
    "id": 402,
    "text": "string",
    "type": "module"
  }, {
    "id": 403,
    "text": "match",
    "type": "global function"
  }, {
    "id": 404,
    "text": "createTablesWithManyFieldsGraph",
    "type": "global function"
  }, {
    "id": 405,
    "text": "format_text",
    "type": "global function"
  }, {
    "id": 406,
    "text": "createUpvaluesGraph",
    "type": "global function"
  }, {
    "id": 407,
    "text": "createTableDepthGraph",
    "type": "global function"
  }, {
    "id": 408,
    "text": "highlight_text",
    "type": "global function"
  }, {
    "id": 409,
    "text": "createTablesWithManyFieldsTable",
    "type": "global function"
  }, {
    "id": 410,
    "text": "comments",
    "type": "module"
  }, {
    "id": 411,
    "text": "findDocstring",
    "type": "global function"
  }, {
    "id": 412,
    "text": "createFunctionsTable",
    "type": "global function"
  }, {
    "id": 413,
    "text": "createFileLenGraph",
    "type": "global function"
  }, {
    "id": 414,
    "text": "createLongLinesTable",
    "type": "global function"
  }, {
    "id": 415,
    "text": "find",
    "type": "global function"
  }, {
    "id": 416,
    "text": "createFunctionDepthGraph",
    "type": "global function"
  }, {
    "id": 417,
    "text": "createModuleLenGraph",
    "type": "global function"
  }, {
    "id": 418,
    "text": "createStatementsTable",
    "type": "global function"
  }, {
    "id": 419,
    "text": "createTableDepthTable",
    "type": "global function"
  }, {
    "id": 420,
    "text": "createFunctionTableList",
    "type": "global function"
  }, {
    "id": 421,
    "text": "createLongMethodGraph",
    "type": "global function"
  }, {
    "id": 422,
    "text": "createLOCTable",
    "type": "global function"
  }, {
    "id": 423,
    "text": "format",
    "type": "global function"
  }, {
    "id": 424,
    "text": "createMITable",
    "type": "global function"
  }, {
    "id": 425,
    "text": "createCycloTable",
    "type": "global function"
  }, {
    "id": 426,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 427,
    "text": "createLongLinesGraph",
    "type": "global function"
  }, {
    "id": 428,
    "text": "createCouplingTable",
    "type": "global function"
  }, {
    "id": 429,
    "text": "process_text",
    "type": "global function"
  }, {
    "id": 430,
    "text": "gfind",
    "type": "global function"
  }, {
    "id": 431,
    "text": "createModuleTables",
    "type": "global function"
  }, {
    "id": 432,
    "text": "output",
    "type": "global function"
  }, {
    "id": 433,
    "text": "open",
    "type": "global function"
  }, {
    "id": 434,
    "text": "assemble_table",
    "type": "global function"
  }, {
    "id": 435,
    "text": "createDocumentedFunctionTableList",
    "type": "global function"
  }, {
    "id": 436,
    "text": "table",
    "type": "module"
  }, {
    "id": 437,
    "text": "createFunctionDepthTable",
    "type": "global function"
  }, {
    "id": 438,
    "text": "len",
    "type": "global function"
  }, {
    "id": 439,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 440,
    "text": "createManyParamsTable",
    "type": "global function"
  }, {
    "id": 441,
    "text": "createDocMetricsTable",
    "type": "global function"
  }, {
    "id": 442,
    "text": "literate",
    "type": "module"
  }, {
    "id": 443,
    "text": "literate",
    "type": "global function"
  }, {
    "id": 444,
    "text": "createHalsteadTable",
    "type": "global function"
  }, {
    "id": 445,
    "text": "createCycloGraph",
    "type": "global function"
  }, {
    "id": 446,
    "text": "metrics_to_highlighter",
    "type": "global function"
  }, {
    "id": 447,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 448,
    "text": "extendAST",
    "type": "global function"
  }, {
    "id": 449,
    "text": "createASTAndMerge",
    "type": "global function"
  }, {
    "id": 450,
    "text": "createUpvaluesTable",
    "type": "global function"
  }, {
    "id": 451,
    "text": "createManyParamsGraph",
    "type": "global function"
  }, {
    "id": 452,
    "text": "createLongMethodTable",
    "type": "global function"
  }, {
    "id": 453,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 454,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 455,
    "text": "print",
    "type": "global function"
  }, {
    "id": 456,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 457,
    "text": "module",
    "type": "global function"
  }, {
    "id": 458,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 459,
    "text": "error",
    "type": "global function"
  }, {
    "id": 460,
    "text": "execute",
    "type": "global function"
  }, {
    "id": 461,
    "text": "require",
    "type": "global function"
  }, {
    "id": 462,
    "text": "type",
    "type": "global function"
  }, {
    "id": 463,
    "text": "",
    "type": "variable container"
  }, {
    "id": 464,
    "text": "",
    "type": "require container"
  }, {
    "id": 465,
    "text": "",
    "type": "local variable"
  }, {
    "id": 466,
    "text": "",
    "type": "n/a"
  }, {
    "id": 467,
    "text": "",
    "type": "local variable"
  }, {
    "id": 468,
    "text": "",
    "type": "n/a"
  }, {
    "id": 469,
    "text": "",
    "type": "local variable"
  }, {
    "id": 470,
    "text": "",
    "type": "n/a"
  }, {
    "id": 471,
    "text": "",
    "type": "local variable"
  }, {
    "id": 472,
    "text": "",
    "type": "n/a"
  }, {
    "id": 473,
    "text": "",
    "type": "local variable"
  }, {
    "id": 474,
    "text": "",
    "type": "n/a"
  }, {
    "id": 475,
    "text": "",
    "type": "local variable"
  }, {
    "id": 476,
    "text": "",
    "type": "n/a"
  }, {
    "id": 477,
    "text": "",
    "type": "local variable"
  }, {
    "id": 478,
    "text": "",
    "type": "n/a"
  }, {
    "id": 479,
    "text": "",
    "type": "local variable"
  }, {
    "id": 480,
    "text": "",
    "type": "n/a"
  }, {
    "id": 481,
    "text": "",
    "type": "local variable"
  }, {
    "id": 482,
    "text": "",
    "type": "n/a"
  }, {
    "id": 483,
    "text": "",
    "type": "local variable"
  }, {
    "id": 484,
    "text": "",
    "type": "n/a"
  }, {
    "id": 485,
    "text": "",
    "type": "local variable"
  }, {
    "id": 486,
    "text": "",
    "type": "n/a"
  }, {
    "id": 487,
    "text": "",
    "type": "local variable"
  }, {
    "id": 488,
    "text": "",
    "type": "n/a"
  }, {
    "id": 489,
    "text": "",
    "type": "local variable"
  }, {
    "id": 490,
    "text": "",
    "type": "n/a"
  }, {
    "id": 491,
    "text": "",
    "type": "local variable"
  }, {
    "id": 492,
    "text": "",
    "type": "n/a"
  }, {
    "id": 493,
    "text": "",
    "type": "local variable"
  }, {
    "id": 494,
    "text": "",
    "type": "n/a"
  }, {
    "id": 495,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 496,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 497,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 498,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 499,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 500,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 501,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 502,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 503,
    "text": "highlighter)",
    "type": "module"
  }, {
    "id": 504,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 505,
    "text": "formatter)",
    "type": "module"
  }, {
    "id": 506,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 507,
    "text": "ast_helper)",
    "type": "module"
  }, {
    "id": 508,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 509,
    "text": "io)",
    "type": "module"
  }, {
    "id": 510,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 511,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 512,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 513,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 514,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 515,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 516,
    "text": "docMetricsTemplates",
    "type": "module"
  }, {
    "id": 517,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 518,
    "text": "smellTemplates",
    "type": "module"
  }, {
    "id": 519,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 520,
    "text": "funcTableTemplates",
    "type": "module"
  }, {
    "id": 521,
    "text": "",
    "type": "require local variable"
  } ]
}