{
  "_filename": "session.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/cgilua/src/cgilua/session.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 4
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 4
  }, {
    "from": 12,
    "label": "has",
    "to": 4
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 4
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 19,
    "label": "has",
    "to": 4
  }, {
    "from": 19,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 9
  }, {
    "from": 30,
    "label": "has",
    "to": 4
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 4
  }, {
    "from": 30,
    "label": "has",
    "to": 4
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 9
  }, {
    "from": 34,
    "label": "has",
    "to": 4
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 34,
    "label": "has",
    "to": 39
  }, {
    "from": 34,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 41,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 41,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 56,
    "label": "has",
    "to": 60
  }, {
    "from": 56,
    "label": "has",
    "to": 61
  }, {
    "from": 56,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 56,
    "label": "has",
    "to": 15
  }, {
    "from": 56,
    "label": "has",
    "to": 64
  }, {
    "from": 56,
    "label": "has",
    "to": 65
  }, {
    "from": 56,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 67,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 68
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 73,
    "label": "has",
    "to": 4
  }, {
    "from": 71,
    "label": "has",
    "to": 76
  }, {
    "from": 71,
    "label": "has",
    "to": 77
  }, {
    "from": 71,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 71,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 68
  }, {
    "from": 82,
    "label": "has",
    "to": 75
  }, {
    "from": 82,
    "label": "has",
    "to": 4
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 84,
    "label": "has",
    "to": 88
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 89,
    "label": "has",
    "to": 4
  }, {
    "from": 89,
    "label": "has",
    "to": 92
  }, {
    "from": 89,
    "label": "has",
    "to": 93
  }, {
    "from": 89,
    "label": "has",
    "to": 94
  }, {
    "from": 95,
    "label": "has",
    "to": 38
  }, {
    "from": 6,
    "label": "calls",
    "to": 116
  }, {
    "from": 34,
    "label": "calls",
    "to": 107
  }, {
    "from": 34,
    "label": "calls",
    "to": 108
  }, {
    "from": 56,
    "label": "calls",
    "to": 108
  }, {
    "from": 56,
    "label": "calls",
    "to": 98
  }, {
    "from": 67,
    "label": "calls",
    "to": 8
  }, {
    "from": 56,
    "label": "calls",
    "to": 114
  }, {
    "from": 41,
    "label": "calls",
    "to": 109
  }, {
    "from": 71,
    "label": "calls",
    "to": 41
  }, {
    "from": 19,
    "label": "calls",
    "to": 115
  }, {
    "from": 41,
    "label": "calls",
    "to": 99
  }, {
    "from": 56,
    "label": "calls",
    "to": 110
  }, {
    "from": 71,
    "label": "calls",
    "to": 102
  }, {
    "from": 96,
    "label": "calls",
    "to": 111
  }, {
    "from": 56,
    "label": "calls",
    "to": 103
  }, {
    "from": 8,
    "label": "calls",
    "to": 3
  }, {
    "from": 30,
    "label": "calls",
    "to": 3
  }, {
    "from": 34,
    "label": "calls",
    "to": 3
  }, {
    "from": 8,
    "label": "calls",
    "to": 6
  }, {
    "from": 30,
    "label": "calls",
    "to": 6
  }, {
    "from": 34,
    "label": "calls",
    "to": 6
  }, {
    "from": 19,
    "label": "calls",
    "to": 12
  }, {
    "from": 19,
    "label": "calls",
    "to": 12
  }, {
    "from": 12,
    "label": "calls",
    "to": 123
  }, {
    "from": 34,
    "label": "calls",
    "to": 123
  }, {
    "from": 56,
    "label": "calls",
    "to": 123
  }, {
    "from": 89,
    "label": "calls",
    "to": 71
  }, {
    "from": 56,
    "label": "calls",
    "to": 118
  }, {
    "from": 19,
    "label": "calls",
    "to": 119
  }, {
    "from": 30,
    "label": "calls",
    "to": 105
  }, {
    "from": 3,
    "label": "calls",
    "to": 120
  }, {
    "from": 84,
    "label": "calls",
    "to": 34
  }, {
    "from": 17,
    "label": "calls",
    "to": 100
  }, {
    "from": 89,
    "label": "calls",
    "to": 104
  }, {
    "from": 84,
    "label": "calls",
    "to": 112
  }, {
    "from": 41,
    "label": "calls",
    "to": 113
  }, {
    "from": 56,
    "label": "calls",
    "to": 113
  }, {
    "from": 19,
    "label": "calls",
    "to": 17
  }, {
    "from": 19,
    "label": "calls",
    "to": 17
  }, {
    "from": 30,
    "label": "calls",
    "to": 117
  }, {
    "from": 71,
    "label": "calls",
    "to": 30
  }, {
    "from": 8,
    "label": "calls",
    "to": 121
  }, {
    "from": 41,
    "label": "calls",
    "to": 121
  }, {
    "from": 56,
    "label": "calls",
    "to": 121
  }, {
    "from": 41,
    "label": "calls",
    "to": 122
  }, {
    "from": 26,
    "label": "calls",
    "to": 101
  }, {
    "from": 52,
    "label": "calls",
    "to": 101
  }, {
    "from": 96,
    "label": "calls",
    "to": 124
  }, {
    "from": 96,
    "label": "calls",
    "to": 124
  }, {
    "from": 41,
    "label": "calls",
    "to": 106
  }, {
    "from": 71,
    "label": "calls",
    "to": 19
  }, {
    "from": 2,
    "label": "contains",
    "to": 96
  }, {
    "from": 96,
    "label": "declares",
    "to": 3
  }, {
    "from": 96,
    "label": "declares",
    "to": 6
  }, {
    "from": 96,
    "label": "declares",
    "to": 8
  }, {
    "from": 96,
    "label": "declares",
    "to": 12
  }, {
    "from": 96,
    "label": "declares",
    "to": 17
  }, {
    "from": 96,
    "label": "declares",
    "to": 19
  }, {
    "from": 96,
    "label": "declares",
    "to": 26
  }, {
    "from": 96,
    "label": "declares",
    "to": 30
  }, {
    "from": 96,
    "label": "declares",
    "to": 34
  }, {
    "from": 96,
    "label": "declares",
    "to": 41
  }, {
    "from": 96,
    "label": "declares",
    "to": 52
  }, {
    "from": 96,
    "label": "declares",
    "to": 56
  }, {
    "from": 96,
    "label": "declares",
    "to": 67
  }, {
    "from": 96,
    "label": "declares",
    "to": 71
  }, {
    "from": 96,
    "label": "declares",
    "to": 82
  }, {
    "from": 96,
    "label": "declares",
    "to": 84
  }, {
    "from": 96,
    "label": "declares",
    "to": 89
  }, {
    "from": 96,
    "label": "declares",
    "to": 95
  }, {
    "from": 2,
    "label": "contains",
    "to": 125
  }, {
    "from": 2,
    "label": "contains",
    "to": 126
  }, {
    "from": 125,
    "label": "initializes",
    "to": 127
  }, {
    "from": 127,
    "label": "assigns",
    "to": 128
  }, {
    "from": 125,
    "label": "initializes",
    "to": 129
  }, {
    "from": 129,
    "label": "assigns",
    "to": 130
  }, {
    "from": 125,
    "label": "initializes",
    "to": 131
  }, {
    "from": 131,
    "label": "assigns",
    "to": 132
  }, {
    "from": 125,
    "label": "initializes",
    "to": 133
  }, {
    "from": 133,
    "label": "assigns",
    "to": 134
  }, {
    "from": 125,
    "label": "initializes",
    "to": 135
  }, {
    "from": 135,
    "label": "assigns",
    "to": 136
  }, {
    "from": 125,
    "label": "initializes",
    "to": 137
  }, {
    "from": 137,
    "label": "assigns",
    "to": 138
  }, {
    "from": 125,
    "label": "initializes",
    "to": 139
  }, {
    "from": 139,
    "label": "assigns",
    "to": 140
  }, {
    "from": 125,
    "label": "initializes",
    "to": 141
  }, {
    "from": 141,
    "label": "assigns",
    "to": 142
  }, {
    "from": 125,
    "label": "initializes",
    "to": 143
  }, {
    "from": 143,
    "label": "assigns",
    "to": 144
  }, {
    "from": 125,
    "label": "initializes",
    "to": 145
  }, {
    "from": 145,
    "label": "assigns",
    "to": 146
  }, {
    "from": 125,
    "label": "initializes",
    "to": 147
  }, {
    "from": 147,
    "label": "assigns",
    "to": 148
  }, {
    "from": 125,
    "label": "initializes",
    "to": 149
  }, {
    "from": 149,
    "label": "assigns",
    "to": 150
  }, {
    "from": 125,
    "label": "initializes",
    "to": 151
  }, {
    "from": 151,
    "label": "assigns",
    "to": 152
  }, {
    "from": 125,
    "label": "initializes",
    "to": 153
  }, {
    "from": 153,
    "label": "assigns",
    "to": 154
  }, {
    "from": 125,
    "label": "initializes",
    "to": 155
  }, {
    "from": 155,
    "label": "assigns",
    "to": 156
  }, {
    "from": 125,
    "label": "initializes",
    "to": 157
  }, {
    "from": 157,
    "label": "assigns",
    "to": 158
  }, {
    "from": 125,
    "label": "initializes",
    "to": 159
  }, {
    "from": 159,
    "label": "assigns",
    "to": 160
  }, {
    "from": 125,
    "label": "initializes",
    "to": 161
  }, {
    "from": 161,
    "label": "assigns",
    "to": 162
  }, {
    "from": 125,
    "label": "initializes",
    "to": 163
  }, {
    "from": 163,
    "label": "assigns",
    "to": 164
  }, {
    "from": 125,
    "label": "initializes",
    "to": 165
  }, {
    "from": 165,
    "label": "assigns",
    "to": 166
  }, {
    "from": 125,
    "label": "initializes",
    "to": 167
  }, {
    "from": 167,
    "label": "assigns",
    "to": 168
  }, {
    "from": 125,
    "label": "initializes",
    "to": 169
  }, {
    "from": 169,
    "label": "assigns",
    "to": 170
  }, {
    "from": 125,
    "label": "initializes",
    "to": 171
  }, {
    "from": 171,
    "label": "assigns",
    "to": 172
  }, {
    "from": 125,
    "label": "initializes",
    "to": 173
  }, {
    "from": 173,
    "label": "assigns",
    "to": 174
  }, {
    "from": 125,
    "label": "initializes",
    "to": 175
  }, {
    "from": 175,
    "label": "assigns",
    "to": 176
  }, {
    "from": 125,
    "label": "initializes",
    "to": 177
  }, {
    "from": 177,
    "label": "assigns",
    "to": 178
  }, {
    "from": 125,
    "label": "initializes",
    "to": 179
  }, {
    "from": 179,
    "label": "assigns",
    "to": 180
  }, {
    "from": 125,
    "label": "initializes",
    "to": 181
  }, {
    "from": 181,
    "label": "assigns",
    "to": 182
  }, {
    "from": 126,
    "label": "initializes",
    "to": 183
  }, {
    "from": 183,
    "label": "requires",
    "to": 97
  }, {
    "from": 126,
    "label": "initializes",
    "to": 184
  }, {
    "from": 184,
    "label": "requires",
    "to": 1
  }, {
    "from": 37,
    "label": "hasArgument",
    "to": 95
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "serialize",
    "type": "module"
  }, {
    "id": 2,
    "text": "session",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function check_id (id)\r\n\treturn id and (strfind (id, \"^%d+$\") ~= nil)\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "local function filename (id)\r\n\treturn format (\"%s/%s.lua\", root_dir, id)\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function delete (id)\r\n\tif not check_id (id) then\r\n\t\treturn nil, INVALID_SESSION_ID\r\n\tend\r\n\tremove (filename (id))\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "if not check_id (id) then\r\n\t\treturn nil, INVALID_SESSION_ID\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "remove (filename (id))",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "local function find (file)\r\n\tlocal fh = _open (root_dir..\"/\"..file)\r\n\tif fh then\r\n\t\tfh:close ()\r\n\t\treturn true\r\n\telse\r\n\t\treturn false\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "local fh = _open (root_dir..\"/\"..file)",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "if fh then\r\n\t\tfh:close ()\r\n\t\treturn true\r\n\telse\r\n\t\treturn false\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "fh:close ()",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "local function new_id ()\r\n\treturn rand (999999999)\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function new ()\r\n\tlocal id = new_id ()\r\n\tif find (id..\".lua\") then\r\n\t\trepeat\r\n\t\t\tid = new_id (id)\r\n\t\tuntil not find (id..\".lua\")\r\n\t\trandseed (mod (id, 999999999))\r\n\tend\r\n\treturn id\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "local id = new_id ()",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "if find (id..\".lua\") then\r\n\t\trepeat\r\n\t\t\tid = new_id (id)\r\n\t\tuntil not find (id..\".lua\")\r\n\t\trandseed (mod (id, 999999999))\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "repeat\r\n\t\t\tid = new_id (id)\r\n\t\tuntil not find (id..\".lua\")",
    "type": "statement:repeat"
  }, {
    "id": 23,
    "text": "id = new_id (id)",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "randseed (mod (id, 999999999))",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function setidgenerator (func)\r\n\tif type (func) == \"function\" then\r\n\t\tnew_id = func\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "if type (func) == \"function\" then\r\n\t\tnew_id = func\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "new_id = func",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function load (id)\r\n\tif not check_id (id) then\r\n\t\treturn nil, INVALID_SESSION_ID\r\n\tend\r\n\tlocal f, err = loadfile (filename (id))\r\n\tif not f then\r\n\t\treturn nil, err\r\n\telse\r\n\t\treturn f()\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "local f, err = loadfile (filename (id))",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "if not f then\r\n\t\treturn nil, err\r\n\telse\r\n\t\treturn f()\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function save (id, data)\r\n\tif not check_id (id) then\r\n\t\treturn nil, INVALID_SESSION_ID\r\n\tend\r\n\tlocal fh = assert (_open (filename (id), \"w+\"))\r\n\tfh:write \"return \"\r\n\tserialize (data, function (s) fh:write(s) end)\r\n\tfh:close()\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "local fh = assert (_open (filename (id), \"w+\"))",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "fh:write \"return \"",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "serialize (data, function (s) fh:write(s) end)",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "fh:write(s)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "fh:close()",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function cleanup ()\r\n\tlocal rem = {}\r\n\tlocal now = time ()\r\n\tfor file in dir (root_dir) do\r\n\t\tlocal attr = attributes(root_dir..\"/\"..file)\r\n\t\tif attr and attr.mode == 'file' then\r\n\t\t\tif attr.modification + timeout < now then\r\n\t\t\t\ttinsert (rem, file)\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\tfor _, file in ipairs (rem) do\r\n\t\tremove (root_dir..\"/\"..file)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "local rem = {}",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "local now = time ()",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "for file in dir (root_dir) do\r\n\t\tlocal attr = attributes(root_dir..\"/\"..file)\r\n\t\tif attr and attr.mode == 'file' then\r\n\t\t\tif attr.modification + timeout < now then\r\n\t\t\t\ttinsert (rem, file)\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 45,
    "text": "local attr = attributes(root_dir..\"/\"..file)",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "if attr and attr.mode == 'file' then\r\n\t\t\tif attr.modification + timeout < now then\r\n\t\t\t\ttinsert (rem, file)\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "if attr.modification + timeout < now then\r\n\t\t\t\ttinsert (rem, file)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "tinsert (rem, file)",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "for _, file in ipairs (rem) do\r\n\t\tremove (root_dir..\"/\"..file)\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 50,
    "text": "remove (root_dir..\"/\"..file)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function setsessiontimeout (t)\r\n\tif type (t) == \"number\" then\r\n\t\ttimeout = t\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "if type (t) == \"number\" then\r\n\t\ttimeout = t\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "timeout = t",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function setsessiondir (path)\r\n\tpath = gsub (path, \"[/\\\\]$\", \"\")\r\n\t-- Make sure the given path is a directory\r\n\tif not attributes (path, \"mode\") then\r\n\t\tassert (mkdir (path))\r\n\tend\r\n\t-- Make sure it can create a new file in the given directory\r\n\tlocal test_file = path..\"/\".._G.cgilua.tmpname()\r\n\tlocal fh, err = _open (test_file, \"w\")\r\n\tif not fh then\r\n\t\terror (\"Could not open a file in session directory: \"..\r\n\t\t\ttostring(err), 2)\r\n\tend\r\n\tfh:close ()\r\n\tremove (test_file)\r\n\troot_dir = path\r\nend",
    "type": "function"
  }, {
    "id": 57,
    "text": "path = gsub (path, \"[/\\\\]$\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "if not attributes (path, \"mode\") then\r\n\t\tassert (mkdir (path))\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 59,
    "text": "assert (mkdir (path))",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "local test_file = path..\"/\".._G.cgilua.tmpname()",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "local fh, err = _open (test_file, \"w\")",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "if not fh then\r\n\t\terror (\"Could not open a file in session directory: \"..\r\n\t\t\ttostring(err), 2)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "error (\"Could not open a file in session directory: \"..\r\n\t\t\ttostring(err), 2)",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "remove (test_file)",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "root_dir = path",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "function destroy ()\r\n\tdata = {} -- removes data from session table to avoid recreation by `close'\r\n\tdelete (id)\r\nend",
    "type": "function"
  }, {
    "id": 68,
    "text": "data = {}",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "delete (id)",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "function open ()\r\n\t-- Redefine cgilua.mkurlpath to manage the session identification\r\n\tlocal mkurlpath = _G.cgilua.mkurlpath\r\n\tfunction _G.cgilua.mkurlpath (script, data)\r\n\t\tif not data then\r\n\t\t\tdata = {}\r\n\t\tend\r\n\t\tdata[ID_NAME] = id\r\n\t\treturn mkurlpath (script, data)\r\n\tend\r\n\r\n\tcleanup()\r\n\r\n\tid = _G.cgilua.QUERY[ID_NAME] or new()\r\n\tif id then\r\n\t\t_G.cgilua.QUERY[ID_NAME] = nil\r\n\t\t_G.cgilua.session.data = load (id) or {}\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 72,
    "text": "local mkurlpath = _G.cgilua.mkurlpath",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "function _G.cgilua.mkurlpath (script, data)\r\n\t\tif not data then\r\n\t\t\tdata = {}\r\n\t\tend\r\n\t\tdata[ID_NAME] = id\r\n\t\treturn mkurlpath (script, data)\r\n\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 74,
    "text": "if not data then\r\n\t\t\tdata = {}\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "data[ID_NAME] = id",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "cleanup()",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "id = _G.cgilua.QUERY[ID_NAME] or new()",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "if id then\r\n\t\t_G.cgilua.QUERY[ID_NAME] = nil\r\n\t\t_G.cgilua.session.data = load (id) or {}\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "_G.cgilua.QUERY[ID_NAME] = nil",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "_G.cgilua.session.data = load (id) or {}",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "function _G.cgilua.mkurlpath (script, data)\r\n\t\tif not data then\r\n\t\t\tdata = {}\r\n\t\tend\r\n\t\tdata[ID_NAME] = id\r\n\t\treturn mkurlpath (script, data)\r\n\tend",
    "type": "function"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "function close ()\r\n\tif next (_G.cgilua.session.data) then\r\n\t\tsave (id, _G.cgilua.session.data)\r\n\t\tid = nil\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 85,
    "text": "if next (_G.cgilua.session.data) then\r\n\t\tsave (id, _G.cgilua.session.data)\r\n\t\tid = nil\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 86,
    "text": "save (id, _G.cgilua.session.data)",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "id = nil",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 89,
    "text": "function _G.cgilua.enablesession ()\r\n\tif already_enabled then -- avoid misuse when a script calls another one\r\n\t\treturn\r\n\telse\r\n\t\talready_enabled = true\r\n\tend\r\n\topen ()\r\n\t_G.cgilua.addclosefunction (close)\r\nend",
    "type": "function"
  }, {
    "id": 90,
    "text": "if already_enabled then -- avoid misuse when a script calls another one\r\n\t\treturn\r\n\telse\r\n\t\talready_enabled = true\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 91,
    "text": "already_enabled = true",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "open ()",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "_G.cgilua.addclosefunction (close)",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 95,
    "text": "function (s) fh:write(s) end",
    "type": "function"
  }, {
    "id": 96,
    "text": "",
    "type": "function container"
  }, {
    "id": 97,
    "text": "lfs",
    "type": "module"
  }, {
    "id": 98,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 99,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 100,
    "text": "rand",
    "type": "global function"
  }, {
    "id": 101,
    "text": "type",
    "type": "global function"
  }, {
    "id": 102,
    "text": "mkurlpath",
    "type": "global function"
  }, {
    "id": 103,
    "text": "_G.cgilua.tmpname",
    "type": "global function"
  }, {
    "id": 104,
    "text": "_G.cgilua.addclosefunction",
    "type": "global function"
  }, {
    "id": 105,
    "text": "loadfile",
    "type": "global function"
  }, {
    "id": 106,
    "text": "tinsert",
    "type": "global function"
  }, {
    "id": 107,
    "text": "serialize",
    "type": "global function"
  }, {
    "id": 108,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 109,
    "text": "time",
    "type": "global function"
  }, {
    "id": 110,
    "text": "mkdir",
    "type": "global function"
  }, {
    "id": 111,
    "text": "module",
    "type": "global function"
  }, {
    "id": 112,
    "text": "next",
    "type": "global function"
  }, {
    "id": 113,
    "text": "attributes",
    "type": "global function"
  }, {
    "id": 114,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 115,
    "text": "randseed",
    "type": "global function"
  }, {
    "id": 116,
    "text": "format",
    "type": "global function"
  }, {
    "id": 117,
    "text": "f",
    "type": "global function"
  }, {
    "id": 118,
    "text": "error",
    "type": "global function"
  }, {
    "id": 119,
    "text": "mod",
    "type": "global function"
  }, {
    "id": 120,
    "text": "strfind",
    "type": "global function"
  }, {
    "id": 121,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 122,
    "text": "dir",
    "type": "global function"
  }, {
    "id": 123,
    "text": "_open",
    "type": "global function"
  }, {
    "id": 124,
    "text": "require",
    "type": "global function"
  }, {
    "id": 125,
    "text": "",
    "type": "variable container"
  }, {
    "id": 126,
    "text": "",
    "type": "require container"
  }, {
    "id": 127,
    "text": "",
    "type": "local variable"
  }, {
    "id": 128,
    "text": "",
    "type": "n/a"
  }, {
    "id": 129,
    "text": "",
    "type": "local variable"
  }, {
    "id": 130,
    "text": "",
    "type": "n/a"
  }, {
    "id": 131,
    "text": "",
    "type": "local variable"
  }, {
    "id": 132,
    "text": "",
    "type": "n/a"
  }, {
    "id": 133,
    "text": "",
    "type": "local variable"
  }, {
    "id": 134,
    "text": "",
    "type": "n/a"
  }, {
    "id": 135,
    "text": "",
    "type": "local variable"
  }, {
    "id": 136,
    "text": "",
    "type": "n/a"
  }, {
    "id": 137,
    "text": "",
    "type": "local variable"
  }, {
    "id": 138,
    "text": "",
    "type": "n/a"
  }, {
    "id": 139,
    "text": "",
    "type": "local variable"
  }, {
    "id": 140,
    "text": "",
    "type": "n/a"
  }, {
    "id": 141,
    "text": "",
    "type": "local variable"
  }, {
    "id": 142,
    "text": "",
    "type": "n/a"
  }, {
    "id": 143,
    "text": "",
    "type": "local variable"
  }, {
    "id": 144,
    "text": "",
    "type": "n/a"
  }, {
    "id": 145,
    "text": "",
    "type": "local variable"
  }, {
    "id": 146,
    "text": "",
    "type": "n/a"
  }, {
    "id": 147,
    "text": "",
    "type": "local variable"
  }, {
    "id": 148,
    "text": "",
    "type": "n/a"
  }, {
    "id": 149,
    "text": "",
    "type": "local variable"
  }, {
    "id": 150,
    "text": "",
    "type": "n/a"
  }, {
    "id": 151,
    "text": "",
    "type": "local variable"
  }, {
    "id": 152,
    "text": "",
    "type": "n/a"
  }, {
    "id": 153,
    "text": "",
    "type": "local variable"
  }, {
    "id": 154,
    "text": "",
    "type": "n/a"
  }, {
    "id": 155,
    "text": "",
    "type": "local variable"
  }, {
    "id": 156,
    "text": "",
    "type": "n/a"
  }, {
    "id": 157,
    "text": "",
    "type": "local variable"
  }, {
    "id": 158,
    "text": "",
    "type": "n/a"
  }, {
    "id": 159,
    "text": "",
    "type": "local variable"
  }, {
    "id": 160,
    "text": "",
    "type": "n/a"
  }, {
    "id": 161,
    "text": "",
    "type": "local variable"
  }, {
    "id": 162,
    "text": "",
    "type": "n/a"
  }, {
    "id": 163,
    "text": "",
    "type": "local variable"
  }, {
    "id": 164,
    "text": "",
    "type": "n/a"
  }, {
    "id": 165,
    "text": "",
    "type": "local variable"
  }, {
    "id": 166,
    "text": "",
    "type": "n/a"
  }, {
    "id": 167,
    "text": "",
    "type": "local variable"
  }, {
    "id": 168,
    "text": "",
    "type": "n/a"
  }, {
    "id": 169,
    "text": "",
    "type": "local variable"
  }, {
    "id": 170,
    "text": "",
    "type": "n/a"
  }, {
    "id": 171,
    "text": "",
    "type": "local variable"
  }, {
    "id": 172,
    "text": "",
    "type": "string"
  }, {
    "id": 173,
    "text": "",
    "type": "local variable"
  }, {
    "id": 174,
    "text": "",
    "type": "keyword"
  }, {
    "id": 175,
    "text": "",
    "type": "local variable"
  }, {
    "id": 176,
    "text": "",
    "type": "number"
  }, {
    "id": 177,
    "text": "",
    "type": "local variable"
  }, {
    "id": 178,
    "text": "",
    "type": "string"
  }, {
    "id": 179,
    "text": "",
    "type": "local variable"
  }, {
    "id": 180,
    "text": "",
    "type": "keyword"
  }, {
    "id": 181,
    "text": "",
    "type": "local variable"
  }, {
    "id": 182,
    "text": "",
    "type": "boolean"
  }, {
    "id": 183,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 184,
    "text": "",
    "type": "require local variable"
  } ]
}