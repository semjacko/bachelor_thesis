{
  "_filename": "env.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/cgilua/tests/env.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "calls",
    "to": 10
  }, {
    "from": 8,
    "label": "calls",
    "to": 13
  }, {
    "from": 8,
    "label": "calls",
    "to": 9
  }, {
    "from": 8,
    "label": "calls",
    "to": 14
  }, {
    "from": 8,
    "label": "calls",
    "to": 12
  }, {
    "from": 8,
    "label": "calls",
    "to": 12
  }, {
    "from": 8,
    "label": "calls",
    "to": 12
  }, {
    "from": 8,
    "label": "calls",
    "to": 11
  }, {
    "from": 1,
    "label": "contains",
    "to": 8
  }, {
    "from": 8,
    "label": "declares",
    "to": 2
  }, {
    "from": 1,
    "label": "contains",
    "to": 15
  }, {
    "from": 1,
    "label": "contains",
    "to": 16
  }, {
    "from": 15,
    "label": "initializes",
    "to": 17
  }, {
    "from": 17,
    "label": "assigns",
    "to": 18
  }, {
    "from": 15,
    "label": "initializes",
    "to": 19
  }, {
    "from": 19,
    "label": "assigns",
    "to": 20
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "env",
    "type": "module"
  }, {
    "id": 2,
    "text": "function ()\r\n\tput [[\r\n<p>\r\n<small>\r\n<a href=\"test_main.html\">Main</a>]]\r\n\tfor _, test in ipairs{\r\n\t\t\t{ \"Get\", \"test_main.lua\", {ab = \"cd\", ef = \"gh\"} },\r\n\t\t\t{ \"Cookies\", \"test_cookies.lua\", },\r\n\t\t\t{ \"FileSystem\", \"test_fs.lua\", },\r\n\t\t\t{ \"Libraries\", \"test_lib.lua\", },\r\n\t\t\t{ \"Session\", \"test_session.lua\", },\r\n\t\t\t{ \"Variables\", \"test_variables.lp\", },\r\n\t\t} do\r\n\t\tput (string.format (' &middot; <a href=\"%s\">%s</a>',\r\n\t\t\tmkurlpath (test[2], test[3]), test[1]))\r\n\tend\r\n\tput [[\r\n</small>]]\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "put [[\r\n<p>\r\n<small>\r\n<a href=\"test_main.html\">Main</a>]]",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "for _, test in ipairs{\r\n\t\t\t{ \"Get\", \"test_main.lua\", {ab = \"cd\", ef = \"gh\"} },\r\n\t\t\t{ \"Cookies\", \"test_cookies.lua\", },\r\n\t\t\t{ \"FileSystem\", \"test_fs.lua\", },\r\n\t\t\t{ \"Libraries\", \"test_lib.lua\", },\r\n\t\t\t{ \"Session\", \"test_session.lua\", },\r\n\t\t\t{ \"Variables\", \"test_variables.lp\", },\r\n\t\t} do\r\n\t\tput (string.format (' &middot; <a href=\"%s\">%s</a>',\r\n\t\t\tmkurlpath (test[2], test[3]), test[1]))\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 5,
    "text": "put (string.format (' &middot; <a href=\"%s\">%s</a>',\r\n\t\t\tmkurlpath (test[2], test[3]), test[1]))",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "put [[\r\n</small>]]",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "",
    "type": "function container"
  }, {
    "id": 9,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 10,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 11,
    "text": "mkurlpath",
    "type": "global function"
  }, {
    "id": 12,
    "text": "put",
    "type": "global function"
  }, {
    "id": 13,
    "text": "format",
    "type": "global function"
  }, {
    "id": 14,
    "text": "addclosefunction",
    "type": "global function"
  }, {
    "id": 15,
    "text": "",
    "type": "variable container"
  }, {
    "id": 16,
    "text": "",
    "type": "require container"
  }, {
    "id": 17,
    "text": "",
    "type": "local variable"
  }, {
    "id": 18,
    "text": "",
    "type": "n/a"
  }, {
    "id": 19,
    "text": "",
    "type": "local variable"
  }, {
    "id": 20,
    "text": "",
    "type": "n/a"
  } ]
}