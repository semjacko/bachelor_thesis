{
  "_filename": "loader.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/cgilua/src/cgilua/loader.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 5,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 18,
    "label": "has",
    "to": 22
  }, {
    "from": 12,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 23,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 23,
    "label": "has",
    "to": 33
  }, {
    "from": 23,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 34,
    "label": "has",
    "to": 38
  }, {
    "from": 5,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 39,
    "label": "has",
    "to": 43
  }, {
    "from": 5,
    "label": "has",
    "to": 44
  }, {
    "from": 5,
    "label": "has",
    "to": 45
  }, {
    "from": 5,
    "label": "calls",
    "to": 50
  }, {
    "from": 5,
    "label": "calls",
    "to": 50
  }, {
    "from": 5,
    "label": "calls",
    "to": 50
  }, {
    "from": 5,
    "label": "calls",
    "to": 50
  }, {
    "from": 5,
    "label": "calls",
    "to": 50
  }, {
    "from": 5,
    "label": "calls",
    "to": 50
  }, {
    "from": 5,
    "label": "calls",
    "to": 50
  }, {
    "from": 5,
    "label": "calls",
    "to": 50
  }, {
    "from": 5,
    "label": "calls",
    "to": 50
  }, {
    "from": 5,
    "label": "calls",
    "to": 50
  }, {
    "from": 5,
    "label": "calls",
    "to": 50
  }, {
    "from": 5,
    "label": "calls",
    "to": 50
  }, {
    "from": 2,
    "label": "calls",
    "to": 53
  }, {
    "from": 5,
    "label": "calls",
    "to": 55
  }, {
    "from": 46,
    "label": "calls",
    "to": 58
  }, {
    "from": 46,
    "label": "calls",
    "to": 51
  }, {
    "from": 5,
    "label": "calls",
    "to": 47
  }, {
    "from": 5,
    "label": "calls",
    "to": 47
  }, {
    "from": 5,
    "label": "calls",
    "to": 47
  }, {
    "from": 5,
    "label": "calls",
    "to": 47
  }, {
    "from": 5,
    "label": "calls",
    "to": 56
  }, {
    "from": 5,
    "label": "calls",
    "to": 56
  }, {
    "from": 5,
    "label": "calls",
    "to": 56
  }, {
    "from": 5,
    "label": "calls",
    "to": 56
  }, {
    "from": 5,
    "label": "calls",
    "to": 54
  }, {
    "from": 5,
    "label": "calls",
    "to": 54
  }, {
    "from": 5,
    "label": "calls",
    "to": 54
  }, {
    "from": 5,
    "label": "calls",
    "to": 49
  }, {
    "from": 5,
    "label": "calls",
    "to": 52
  }, {
    "from": 1,
    "label": "contains",
    "to": 46
  }, {
    "from": 46,
    "label": "declares",
    "to": 2
  }, {
    "from": 46,
    "label": "declares",
    "to": 5
  }, {
    "from": 1,
    "label": "declares",
    "to": 48
  }, {
    "from": 1,
    "label": "declares",
    "to": 57
  }, {
    "from": 1,
    "label": "contains",
    "to": 60
  }, {
    "from": 1,
    "label": "contains",
    "to": 61
  }, {
    "from": 61,
    "label": "initializes",
    "to": 59
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "loader",
    "type": "module"
  }, {
    "id": 2,
    "text": "function init()\r\n   -- Loads the user configuration\r\n   cgilua.doif (CGILUA_CONF..\"/config.lua\")\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "cgilua.doif (CGILUA_CONF..\"/config.lua\")",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "function run()\r\n   local servervariable = cgilua.servervariable\r\n   cgilua.script_vpath = cgilua.script_vpath or servervariable\"PATH_INFO\"\r\n\r\n   if cgilua.script_vpath == nil or cgilua.script_vpath == \"\" then\r\n      cgilua.script_vpath = \"/\"\r\n   end\r\n\r\n   local document_root = cgilua.pdir or servervariable\"DOCUMENT_ROOT\"\r\n\r\n   if not cgilua.script_path then\r\n      if CGILUA_ISDIRECT then -- the launcher is associated with scripts (Xavante, mod_lua or isapi usually)\r\n\t if servervariable\"PATH_TRANSLATED\" ~= \"\" then\r\n\t    cgilua.script_path = servervariable\"PATH_TRANSLATED\"\r\n\t else\r\n\t    cgilua.script_path = servervariable\"SCRIPT_FILENAME\"\r\n\t end\r\n      else -- the launcher executable is present in the URL (CGI or FastCGI only)\r\n\t if document_root == nil or document_root == \"\" then\r\n\t    -- tries to obtain documents_root from the server\r\n\t    local path_info = cgilua.script_vpath\r\n\t    if path_info == nil or path_info == \"\" or path_info == \"/\" then\r\n\t       document_root = cgilua.pdir or servervariable\"PATH_TRANSLATED\"\r\n\t    else\r\n\t       if string.find(servervariable(\"SERVER_SOFTWARE\"), \"IIS\") then\r\n\t\t  path_info = string.gsub(path_info, \"/\", \"\\\\\")\r\n\t       end\r\n\t       document_root = cgilua.pdir or string.gsub(servervariable\"PATH_TRANSLATED\", path_info, \"\")\r\n\t    end\r\n\t end\r\n\t if cgilua.use_executable_name then\r\n\t    -- looks for a Lua script with the same name as the executable\r\n\t    local _, name = cgilua.splitpath(servervariable\"SCRIPT_NAME\")\r\n\t    name = string.gsub(name, \"%.[^%.]-$\",\"\")\r\n\t\tif name and lfs.attributes(document_root..\"/\"..name..\".lua\") then\r\n\t\t\tcgilua.script_path = document_root..\"/\"..name..\".lua\"\r\n\t\tend\r\n\t else\r\n\t    -- uses /index.lua then /index.lp as the default script\r\n\t    if cgilua.script_vpath == \"/\" then\r\n\t       if lfs.attributes(document_root..\"/index.lua\") then\r\n\t\t  cgilua.script_vpath = \"/index.lua\"\r\n\t       elseif lfs.attributes(document_root..\"/index.lp\") then\r\n\t\t  cgilua.script_vpath = \"/index.lp\"\r\n\t       else\r\n\t\t  error(\"Kepler is correctly configured, but you didn't provide a script!\")\r\n\t       end                    \r\n\t    end\r\n\t    -- checks if PATH_INFO refers to a valid file and ajusts the settings accordingly\r\n\t    local filepath, path_info = string.match (cgilua.script_vpath, \"^([^%.]-%.[^/]+)(.*)\")\r\n\t    if filepath and lfs.attributes(document_root..filepath) then\r\n\t       -- if one is found use it\r\n\t       cgilua.script_path = document_root..filepath\r\n\t       cgilua.script_vpath = path_info\r\n\t       cgilua.urlpath = cgilua.urlpath or servervariable\"SCRIPT_NAME\"..filepath\r\n\t    else\r\n\t       -- otherwise go with the current PATH_INFO\r\n\t       cgilua.script_path = document_root..cgilua.script_vpath\r\n\t    end\r\n\t end\r\n      end\r\n   end\r\n   \r\n   -- define other cgilua vars so mkurlpath can work correctly\r\n   if cgilua.script_vpath then\r\n      cgilua.script_vdir = cgilua.splitpath (cgilua.script_vpath)\r\n      cgilua.urlpath = cgilua.urlpath or servervariable\"SCRIPT_NAME\"\r\n   else\r\n      cgilua.script_vdir = cgilua.splitpath (servervariable\"SCRIPT_NAME\")\r\n      cgilua.urlpath = cgilua.urlpath or \"\"\r\n   end\r\n\r\n   cgilua.script_pdir, cgilua.script_file = cgilua.splitpath (cgilua.script_path)\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local servervariable = cgilua.servervariable",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "cgilua.script_vpath = cgilua.script_vpath or servervariable\"PATH_INFO\"",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "if cgilua.script_vpath == nil or cgilua.script_vpath == \"\" then\r\n      cgilua.script_vpath = \"/\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "cgilua.script_vpath = \"/\"",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "local document_root = cgilua.pdir or servervariable\"DOCUMENT_ROOT\"",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "if not cgilua.script_path then\r\n      if CGILUA_ISDIRECT then -- the launcher is associated with scripts (Xavante, mod_lua or isapi usually)\r\n\t if servervariable\"PATH_TRANSLATED\" ~= \"\" then\r\n\t    cgilua.script_path = servervariable\"PATH_TRANSLATED\"\r\n\t else\r\n\t    cgilua.script_path = servervariable\"SCRIPT_FILENAME\"\r\n\t end\r\n      else -- the launcher executable is present in the URL (CGI or FastCGI only)\r\n\t if document_root == nil or document_root == \"\" then\r\n\t    -- tries to obtain documents_root from the server\r\n\t    local path_info = cgilua.script_vpath\r\n\t    if path_info == nil or path_info == \"\" or path_info == \"/\" then\r\n\t       document_root = cgilua.pdir or servervariable\"PATH_TRANSLATED\"\r\n\t    else\r\n\t       if string.find(servervariable(\"SERVER_SOFTWARE\"), \"IIS\") then\r\n\t\t  path_info = string.gsub(path_info, \"/\", \"\\\\\")\r\n\t       end\r\n\t       document_root = cgilua.pdir or string.gsub(servervariable\"PATH_TRANSLATED\", path_info, \"\")\r\n\t    end\r\n\t end\r\n\t if cgilua.use_executable_name then\r\n\t    -- looks for a Lua script with the same name as the executable\r\n\t    local _, name = cgilua.splitpath(servervariable\"SCRIPT_NAME\")\r\n\t    name = string.gsub(name, \"%.[^%.]-$\",\"\")\r\n\t\tif name and lfs.attributes(document_root..\"/\"..name..\".lua\") then\r\n\t\t\tcgilua.script_path = document_root..\"/\"..name..\".lua\"\r\n\t\tend\r\n\t else\r\n\t    -- uses /index.lua then /index.lp as the default script\r\n\t    if cgilua.script_vpath == \"/\" then\r\n\t       if lfs.attributes(document_root..\"/index.lua\") then\r\n\t\t  cgilua.script_vpath = \"/index.lua\"\r\n\t       elseif lfs.attributes(document_root..\"/index.lp\") then\r\n\t\t  cgilua.script_vpath = \"/index.lp\"\r\n\t       else\r\n\t\t  error(\"Kepler is correctly configured, but you didn't provide a script!\")\r\n\t       end                    \r\n\t    end\r\n\t    -- checks if PATH_INFO refers to a valid file and ajusts the settings accordingly\r\n\t    local filepath, path_info = string.match (cgilua.script_vpath, \"^([^%.]-%.[^/]+)(.*)\")\r\n\t    if filepath and lfs.attributes(document_root..filepath) then\r\n\t       -- if one is found use it\r\n\t       cgilua.script_path = document_root..filepath\r\n\t       cgilua.script_vpath = path_info\r\n\t       cgilua.urlpath = cgilua.urlpath or servervariable\"SCRIPT_NAME\"..filepath\r\n\t    else\r\n\t       -- otherwise go with the current PATH_INFO\r\n\t       cgilua.script_path = document_root..cgilua.script_vpath\r\n\t    end\r\n\t end\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "if CGILUA_ISDIRECT then -- the launcher is associated with scripts (Xavante, mod_lua or isapi usually)\r\n\t if servervariable\"PATH_TRANSLATED\" ~= \"\" then\r\n\t    cgilua.script_path = servervariable\"PATH_TRANSLATED\"\r\n\t else\r\n\t    cgilua.script_path = servervariable\"SCRIPT_FILENAME\"\r\n\t end\r\n      else -- the launcher executable is present in the URL (CGI or FastCGI only)\r\n\t if document_root == nil or document_root == \"\" then\r\n\t    -- tries to obtain documents_root from the server\r\n\t    local path_info = cgilua.script_vpath\r\n\t    if path_info == nil or path_info == \"\" or path_info == \"/\" then\r\n\t       document_root = cgilua.pdir or servervariable\"PATH_TRANSLATED\"\r\n\t    else\r\n\t       if string.find(servervariable(\"SERVER_SOFTWARE\"), \"IIS\") then\r\n\t\t  path_info = string.gsub(path_info, \"/\", \"\\\\\")\r\n\t       end\r\n\t       document_root = cgilua.pdir or string.gsub(servervariable\"PATH_TRANSLATED\", path_info, \"\")\r\n\t    end\r\n\t end\r\n\t if cgilua.use_executable_name then\r\n\t    -- looks for a Lua script with the same name as the executable\r\n\t    local _, name = cgilua.splitpath(servervariable\"SCRIPT_NAME\")\r\n\t    name = string.gsub(name, \"%.[^%.]-$\",\"\")\r\n\t\tif name and lfs.attributes(document_root..\"/\"..name..\".lua\") then\r\n\t\t\tcgilua.script_path = document_root..\"/\"..name..\".lua\"\r\n\t\tend\r\n\t else\r\n\t    -- uses /index.lua then /index.lp as the default script\r\n\t    if cgilua.script_vpath == \"/\" then\r\n\t       if lfs.attributes(document_root..\"/index.lua\") then\r\n\t\t  cgilua.script_vpath = \"/index.lua\"\r\n\t       elseif lfs.attributes(document_root..\"/index.lp\") then\r\n\t\t  cgilua.script_vpath = \"/index.lp\"\r\n\t       else\r\n\t\t  error(\"Kepler is correctly configured, but you didn't provide a script!\")\r\n\t       end                    \r\n\t    end\r\n\t    -- checks if PATH_INFO refers to a valid file and ajusts the settings accordingly\r\n\t    local filepath, path_info = string.match (cgilua.script_vpath, \"^([^%.]-%.[^/]+)(.*)\")\r\n\t    if filepath and lfs.attributes(document_root..filepath) then\r\n\t       -- if one is found use it\r\n\t       cgilua.script_path = document_root..filepath\r\n\t       cgilua.script_vpath = path_info\r\n\t       cgilua.urlpath = cgilua.urlpath or servervariable\"SCRIPT_NAME\"..filepath\r\n\t    else\r\n\t       -- otherwise go with the current PATH_INFO\r\n\t       cgilua.script_path = document_root..cgilua.script_vpath\r\n\t    end\r\n\t end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "if servervariable\"PATH_TRANSLATED\" ~= \"\" then\r\n\t    cgilua.script_path = servervariable\"PATH_TRANSLATED\"\r\n\t else\r\n\t    cgilua.script_path = servervariable\"SCRIPT_FILENAME\"\r\n\t end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "cgilua.script_path = servervariable\"PATH_TRANSLATED\"",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "cgilua.script_path = servervariable\"SCRIPT_FILENAME\"",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "if document_root == nil or document_root == \"\" then\r\n\t    -- tries to obtain documents_root from the server\r\n\t    local path_info = cgilua.script_vpath\r\n\t    if path_info == nil or path_info == \"\" or path_info == \"/\" then\r\n\t       document_root = cgilua.pdir or servervariable\"PATH_TRANSLATED\"\r\n\t    else\r\n\t       if string.find(servervariable(\"SERVER_SOFTWARE\"), \"IIS\") then\r\n\t\t  path_info = string.gsub(path_info, \"/\", \"\\\\\")\r\n\t       end\r\n\t       document_root = cgilua.pdir or string.gsub(servervariable\"PATH_TRANSLATED\", path_info, \"\")\r\n\t    end\r\n\t end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "local path_info = cgilua.script_vpath",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "if path_info == nil or path_info == \"\" or path_info == \"/\" then\r\n\t       document_root = cgilua.pdir or servervariable\"PATH_TRANSLATED\"\r\n\t    else\r\n\t       if string.find(servervariable(\"SERVER_SOFTWARE\"), \"IIS\") then\r\n\t\t  path_info = string.gsub(path_info, \"/\", \"\\\\\")\r\n\t       end\r\n\t       document_root = cgilua.pdir or string.gsub(servervariable\"PATH_TRANSLATED\", path_info, \"\")\r\n\t    end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "document_root = cgilua.pdir or servervariable\"PATH_TRANSLATED\"",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "if string.find(servervariable(\"SERVER_SOFTWARE\"), \"IIS\") then\r\n\t\t  path_info = string.gsub(path_info, \"/\", \"\\\\\")\r\n\t       end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "path_info = string.gsub(path_info, \"/\", \"\\\\\")",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "document_root = cgilua.pdir or string.gsub(servervariable\"PATH_TRANSLATED\", path_info, \"\")",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "if cgilua.use_executable_name then\r\n\t    -- looks for a Lua script with the same name as the executable\r\n\t    local _, name = cgilua.splitpath(servervariable\"SCRIPT_NAME\")\r\n\t    name = string.gsub(name, \"%.[^%.]-$\",\"\")\r\n\t\tif name and lfs.attributes(document_root..\"/\"..name..\".lua\") then\r\n\t\t\tcgilua.script_path = document_root..\"/\"..name..\".lua\"\r\n\t\tend\r\n\t else\r\n\t    -- uses /index.lua then /index.lp as the default script\r\n\t    if cgilua.script_vpath == \"/\" then\r\n\t       if lfs.attributes(document_root..\"/index.lua\") then\r\n\t\t  cgilua.script_vpath = \"/index.lua\"\r\n\t       elseif lfs.attributes(document_root..\"/index.lp\") then\r\n\t\t  cgilua.script_vpath = \"/index.lp\"\r\n\t       else\r\n\t\t  error(\"Kepler is correctly configured, but you didn't provide a script!\")\r\n\t       end                    \r\n\t    end\r\n\t    -- checks if PATH_INFO refers to a valid file and ajusts the settings accordingly\r\n\t    local filepath, path_info = string.match (cgilua.script_vpath, \"^([^%.]-%.[^/]+)(.*)\")\r\n\t    if filepath and lfs.attributes(document_root..filepath) then\r\n\t       -- if one is found use it\r\n\t       cgilua.script_path = document_root..filepath\r\n\t       cgilua.script_vpath = path_info\r\n\t       cgilua.urlpath = cgilua.urlpath or servervariable\"SCRIPT_NAME\"..filepath\r\n\t    else\r\n\t       -- otherwise go with the current PATH_INFO\r\n\t       cgilua.script_path = document_root..cgilua.script_vpath\r\n\t    end\r\n\t end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "local _, name = cgilua.splitpath(servervariable\"SCRIPT_NAME\")",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "name = string.gsub(name, \"%.[^%.]-$\",\"\")",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "if name and lfs.attributes(document_root..\"/\"..name..\".lua\") then\r\n\t\t\tcgilua.script_path = document_root..\"/\"..name..\".lua\"\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "cgilua.script_path = document_root..\"/\"..name..\".lua\"",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "if cgilua.script_vpath == \"/\" then\r\n\t       if lfs.attributes(document_root..\"/index.lua\") then\r\n\t\t  cgilua.script_vpath = \"/index.lua\"\r\n\t       elseif lfs.attributes(document_root..\"/index.lp\") then\r\n\t\t  cgilua.script_vpath = \"/index.lp\"\r\n\t       else\r\n\t\t  error(\"Kepler is correctly configured, but you didn't provide a script!\")\r\n\t       end                    \r\n\t    end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "if lfs.attributes(document_root..\"/index.lua\") then\r\n\t\t  cgilua.script_vpath = \"/index.lua\"\r\n\t       elseif lfs.attributes(document_root..\"/index.lp\") then\r\n\t\t  cgilua.script_vpath = \"/index.lp\"\r\n\t       else\r\n\t\t  error(\"Kepler is correctly configured, but you didn't provide a script!\")\r\n\t       end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "cgilua.script_vpath = \"/index.lua\"",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "cgilua.script_vpath = \"/index.lp\"",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "error(\"Kepler is correctly configured, but you didn't provide a script!\")",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "local filepath, path_info = string.match (cgilua.script_vpath, \"^([^%.]-%.[^/]+)(.*)\")",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "if filepath and lfs.attributes(document_root..filepath) then\r\n\t       -- if one is found use it\r\n\t       cgilua.script_path = document_root..filepath\r\n\t       cgilua.script_vpath = path_info\r\n\t       cgilua.urlpath = cgilua.urlpath or servervariable\"SCRIPT_NAME\"..filepath\r\n\t    else\r\n\t       -- otherwise go with the current PATH_INFO\r\n\t       cgilua.script_path = document_root..cgilua.script_vpath\r\n\t    end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "cgilua.script_path = document_root..filepath",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "cgilua.script_vpath = path_info",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "cgilua.urlpath = cgilua.urlpath or servervariable\"SCRIPT_NAME\"..filepath",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "cgilua.script_path = document_root..cgilua.script_vpath",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "if cgilua.script_vpath then\r\n      cgilua.script_vdir = cgilua.splitpath (cgilua.script_vpath)\r\n      cgilua.urlpath = cgilua.urlpath or servervariable\"SCRIPT_NAME\"\r\n   else\r\n      cgilua.script_vdir = cgilua.splitpath (servervariable\"SCRIPT_NAME\")\r\n      cgilua.urlpath = cgilua.urlpath or \"\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "cgilua.script_vdir = cgilua.splitpath (cgilua.script_vpath)",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "cgilua.urlpath = cgilua.urlpath or servervariable\"SCRIPT_NAME\"",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "cgilua.script_vdir = cgilua.splitpath (servervariable\"SCRIPT_NAME\")",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "cgilua.urlpath = cgilua.urlpath or \"\"",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "cgilua.script_pdir, cgilua.script_file = cgilua.splitpath (cgilua.script_path)",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "",
    "type": "function container"
  }, {
    "id": 47,
    "text": "attributes",
    "type": "global function"
  }, {
    "id": 48,
    "text": "run",
    "type": "global function"
  }, {
    "id": 49,
    "text": "find",
    "type": "global function"
  }, {
    "id": 50,
    "text": "servervariable",
    "type": "global function"
  }, {
    "id": 51,
    "text": "module",
    "type": "global function"
  }, {
    "id": 52,
    "text": "match",
    "type": "global function"
  }, {
    "id": 53,
    "text": "doif",
    "type": "global function"
  }, {
    "id": 54,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 55,
    "text": "error",
    "type": "global function"
  }, {
    "id": 56,
    "text": "splitpath",
    "type": "global function"
  }, {
    "id": 57,
    "text": "init",
    "type": "global function"
  }, {
    "id": 58,
    "text": "require",
    "type": "global function"
  }, {
    "id": 59,
    "text": "",
    "type": "global variable"
  }, {
    "id": 60,
    "text": "",
    "type": "variable container"
  }, {
    "id": 61,
    "text": "",
    "type": "require container"
  } ]
}