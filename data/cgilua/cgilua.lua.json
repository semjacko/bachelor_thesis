{
  "_filename": "cgilua.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/cgilua/src/cgilua/cgilua.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 8
  }, {
    "from": 4,
    "label": "has",
    "to": 9
  }, {
    "from": 4,
    "label": "has",
    "to": 8
  }, {
    "from": 4,
    "label": "has",
    "to": 10
  }, {
    "from": 4,
    "label": "has",
    "to": 11
  }, {
    "from": 4,
    "label": "has",
    "to": 12
  }, {
    "from": 4,
    "label": "has",
    "to": 13
  }, {
    "from": 4,
    "label": "has",
    "to": 14
  }, {
    "from": 4,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 13
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 24,
    "label": "has",
    "to": 17
  }, {
    "from": 24,
    "label": "has",
    "to": 17
  }, {
    "from": 24,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 17
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 32,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 38,
    "label": "has",
    "to": 42
  }, {
    "from": 38,
    "label": "has",
    "to": 43
  }, {
    "from": 38,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 17
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 17
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 49,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 53,
    "label": "has",
    "to": 56
  }, {
    "from": 49,
    "label": "has",
    "to": 17
  }, {
    "from": 49,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 58,
    "label": "has",
    "to": 17
  }, {
    "from": 58,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 64,
    "label": "has",
    "to": 67
  }, {
    "from": 62,
    "label": "has",
    "to": 17
  }, {
    "from": 62,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 17
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 69,
    "label": "has",
    "to": 17
  }, {
    "from": 69,
    "label": "has",
    "to": 73
  }, {
    "from": 69,
    "label": "has",
    "to": 17
  }, {
    "from": 69,
    "label": "has",
    "to": 74
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 81,
    "label": "has",
    "to": 17
  }, {
    "from": 81,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 85,
    "label": "has",
    "to": 88
  }, {
    "from": 85,
    "label": "has",
    "to": 89
  }, {
    "from": 85,
    "label": "has",
    "to": 90
  }, {
    "from": 85,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 85,
    "label": "has",
    "to": 17
  }, {
    "from": 85,
    "label": "has",
    "to": 93
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 94,
    "label": "has",
    "to": 96
  }, {
    "from": 94,
    "label": "has",
    "to": 97
  }, {
    "from": 94,
    "label": "has",
    "to": 98
  }, {
    "from": 99,
    "label": "has",
    "to": 17
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 99,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 102,
    "label": "has",
    "to": 104
  }, {
    "from": 102,
    "label": "has",
    "to": 105
  }, {
    "from": 99,
    "label": "has",
    "to": 106
  }, {
    "from": 99,
    "label": "has",
    "to": 107
  }, {
    "from": 99,
    "label": "has",
    "to": 108
  }, {
    "from": 99,
    "label": "has",
    "to": 109
  }, {
    "from": 110,
    "label": "has",
    "to": 17
  }, {
    "from": 110,
    "label": "has",
    "to": 66
  }, {
    "from": 110,
    "label": "has",
    "to": 107
  }, {
    "from": 110,
    "label": "has",
    "to": 97
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 112,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 114,
    "label": "has",
    "to": 116
  }, {
    "from": 112,
    "label": "has",
    "to": 117
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 118,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 28
  }, {
    "from": 118,
    "label": "has",
    "to": 121
  }, {
    "from": 118,
    "label": "has",
    "to": 17
  }, {
    "from": 118,
    "label": "has",
    "to": 17
  }, {
    "from": 118,
    "label": "has",
    "to": 122
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 123,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 123,
    "label": "has",
    "to": 17
  }, {
    "from": 123,
    "label": "has",
    "to": 127
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 128,
    "label": "has",
    "to": 17
  }, {
    "from": 128,
    "label": "has",
    "to": 130
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 131,
    "label": "has",
    "to": 17
  }, {
    "from": 131,
    "label": "has",
    "to": 133
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 134,
    "label": "has",
    "to": 136
  }, {
    "from": 134,
    "label": "has",
    "to": 137
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 134,
    "label": "has",
    "to": 139
  }, {
    "from": 134,
    "label": "has",
    "to": 140
  }, {
    "from": 134,
    "label": "has",
    "to": 141
  }, {
    "from": 142,
    "label": "has",
    "to": 100
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 142,
    "label": "has",
    "to": 144
  }, {
    "from": 144,
    "label": "has",
    "to": 103
  }, {
    "from": 144,
    "label": "has",
    "to": 104
  }, {
    "from": 144,
    "label": "has",
    "to": 105
  }, {
    "from": 142,
    "label": "has",
    "to": 106
  }, {
    "from": 142,
    "label": "has",
    "to": 145
  }, {
    "from": 142,
    "label": "has",
    "to": 108
  }, {
    "from": 142,
    "label": "has",
    "to": 146
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 147,
    "label": "has",
    "to": 149
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 147,
    "label": "has",
    "to": 151
  }, {
    "from": 147,
    "label": "has",
    "to": 152
  }, {
    "from": 147,
    "label": "has",
    "to": 153
  }, {
    "from": 147,
    "label": "has",
    "to": 154
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 155,
    "label": "has",
    "to": 17
  }, {
    "from": 155,
    "label": "has",
    "to": 157
  }, {
    "from": 158,
    "label": "has",
    "to": 159
  }, {
    "from": 158,
    "label": "has",
    "to": 17
  }, {
    "from": 158,
    "label": "has",
    "to": 160
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 161,
    "label": "has",
    "to": 163
  }, {
    "from": 163,
    "label": "has",
    "to": 164
  }, {
    "from": 163,
    "label": "has",
    "to": 165
  }, {
    "from": 161,
    "label": "has",
    "to": 166
  }, {
    "from": 167,
    "label": "has",
    "to": 162
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 168,
    "label": "has",
    "to": 169
  }, {
    "from": 168,
    "label": "has",
    "to": 165
  }, {
    "from": 167,
    "label": "has",
    "to": 170
  }, {
    "from": 171,
    "label": "has",
    "to": 162
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 172,
    "label": "has",
    "to": 165
  }, {
    "from": 171,
    "label": "has",
    "to": 174
  }, {
    "from": 175,
    "label": "has",
    "to": 176
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 175,
    "label": "has",
    "to": 178
  }, {
    "from": 179,
    "label": "has",
    "to": 162
  }, {
    "from": 179,
    "label": "has",
    "to": 180
  }, {
    "from": 180,
    "label": "has",
    "to": 181
  }, {
    "from": 180,
    "label": "has",
    "to": 165
  }, {
    "from": 179,
    "label": "has",
    "to": 182
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 184,
    "label": "has",
    "to": 185
  }, {
    "from": 183,
    "label": "has",
    "to": 186
  }, {
    "from": 187,
    "label": "has",
    "to": 188
  }, {
    "from": 187,
    "label": "has",
    "to": 189
  }, {
    "from": 187,
    "label": "has",
    "to": 190
  }, {
    "from": 187,
    "label": "has",
    "to": 191
  }, {
    "from": 187,
    "label": "has",
    "to": 192
  }, {
    "from": 187,
    "label": "has",
    "to": 193
  }, {
    "from": 187,
    "label": "has",
    "to": 194
  }, {
    "from": 187,
    "label": "has",
    "to": 195
  }, {
    "from": 187,
    "label": "has",
    "to": 196
  }, {
    "from": 187,
    "label": "has",
    "to": 197
  }, {
    "from": 197,
    "label": "has",
    "to": 198
  }, {
    "from": 197,
    "label": "has",
    "to": 199
  }, {
    "from": 197,
    "label": "has",
    "to": 200
  }, {
    "from": 197,
    "label": "has",
    "to": 201
  }, {
    "from": 201,
    "label": "has",
    "to": 105
  }, {
    "from": 187,
    "label": "has",
    "to": 202
  }, {
    "from": 203,
    "label": "has",
    "to": 204
  }, {
    "from": 203,
    "label": "has",
    "to": 205
  }, {
    "from": 203,
    "label": "has",
    "to": 206
  }, {
    "from": 203,
    "label": "has",
    "to": 207
  }, {
    "from": 203,
    "label": "has",
    "to": 208
  }, {
    "from": 208,
    "label": "has",
    "to": 209
  }, {
    "from": 203,
    "label": "has",
    "to": 210
  }, {
    "from": 210,
    "label": "has",
    "to": 211
  }, {
    "from": 203,
    "label": "has",
    "to": 212
  }, {
    "from": 212,
    "label": "has",
    "to": 213
  }, {
    "from": 203,
    "label": "has",
    "to": 214
  }, {
    "from": 203,
    "label": "has",
    "to": 17
  }, {
    "from": 203,
    "label": "has",
    "to": 215
  }, {
    "from": 203,
    "label": "has",
    "to": 216
  }, {
    "from": 216,
    "label": "has",
    "to": 217
  }, {
    "from": 203,
    "label": "has",
    "to": 218
  }, {
    "from": 203,
    "label": "has",
    "to": 219
  }, {
    "from": 219,
    "label": "has",
    "to": 220
  }, {
    "from": 203,
    "label": "has",
    "to": 221
  }, {
    "from": 203,
    "label": "has",
    "to": 222
  }, {
    "from": 222,
    "label": "has",
    "to": 17
  }, {
    "from": 203,
    "label": "has",
    "to": 223
  }, {
    "from": 203,
    "label": "has",
    "to": 224
  }, {
    "from": 224,
    "label": "has",
    "to": 225
  }, {
    "from": 203,
    "label": "has",
    "to": 226
  }, {
    "from": 203,
    "label": "has",
    "to": 227
  }, {
    "from": 203,
    "label": "has",
    "to": 17
  }, {
    "from": 203,
    "label": "has",
    "to": 228
  }, {
    "from": 229,
    "label": "has",
    "to": 100
  }, {
    "from": 229,
    "label": "has",
    "to": 101
  }, {
    "from": 229,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 102,
    "label": "has",
    "to": 104
  }, {
    "from": 102,
    "label": "has",
    "to": 105
  }, {
    "from": 229,
    "label": "has",
    "to": 106
  }, {
    "from": 229,
    "label": "has",
    "to": 107
  }, {
    "from": 229,
    "label": "has",
    "to": 108
  }, {
    "from": 229,
    "label": "has",
    "to": 230
  }, {
    "from": 231,
    "label": "has",
    "to": 66
  }, {
    "from": 231,
    "label": "has",
    "to": 107
  }, {
    "from": 231,
    "label": "has",
    "to": 97
  }, {
    "from": 231,
    "label": "has",
    "to": 232
  }, {
    "from": 233,
    "label": "has",
    "to": 209
  }, {
    "from": 234,
    "label": "has",
    "to": 211
  }, {
    "from": 235,
    "label": "has",
    "to": 220
  }, {
    "from": 236,
    "label": "has",
    "to": 17
  }, {
    "from": 237,
    "label": "has",
    "to": 225
  }, {
    "from": 158,
    "label": "calls",
    "to": 155
  }, {
    "from": 238,
    "label": "calls",
    "to": 268
  }, {
    "from": 30,
    "label": "calls",
    "to": 268
  }, {
    "from": 112,
    "label": "calls",
    "to": 248
  }, {
    "from": 128,
    "label": "calls",
    "to": 248
  }, {
    "from": 131,
    "label": "calls",
    "to": 248
  }, {
    "from": 49,
    "label": "calls",
    "to": 250
  }, {
    "from": 187,
    "label": "calls",
    "to": 251
  }, {
    "from": 134,
    "label": "calls",
    "to": 242
  }, {
    "from": 123,
    "label": "calls",
    "to": 30
  }, {
    "from": 123,
    "label": "calls",
    "to": 30
  }, {
    "from": 134,
    "label": "calls",
    "to": 30
  }, {
    "from": 134,
    "label": "calls",
    "to": 30
  }, {
    "from": 134,
    "label": "calls",
    "to": 30
  }, {
    "from": 134,
    "label": "calls",
    "to": 30
  }, {
    "from": 62,
    "label": "calls",
    "to": 49
  }, {
    "from": 203,
    "label": "calls",
    "to": 49
  }, {
    "from": 203,
    "label": "calls",
    "to": 49
  }, {
    "from": 203,
    "label": "calls",
    "to": 49
  }, {
    "from": 203,
    "label": "calls",
    "to": 49
  }, {
    "from": 203,
    "label": "calls",
    "to": 49
  }, {
    "from": 203,
    "label": "calls",
    "to": 49
  }, {
    "from": 203,
    "label": "calls",
    "to": 49
  }, {
    "from": 203,
    "label": "calls",
    "to": 49
  }, {
    "from": 238,
    "label": "calls",
    "to": 269
  }, {
    "from": 175,
    "label": "calls",
    "to": 270
  }, {
    "from": 62,
    "label": "calls",
    "to": 58
  }, {
    "from": 94,
    "label": "calls",
    "to": 58
  }, {
    "from": 110,
    "label": "calls",
    "to": 58
  }, {
    "from": 203,
    "label": "calls",
    "to": 245
  }, {
    "from": 99,
    "label": "calls",
    "to": 45
  }, {
    "from": 142,
    "label": "calls",
    "to": 45
  }, {
    "from": 142,
    "label": "calls",
    "to": 45
  }, {
    "from": 112,
    "label": "calls",
    "to": 252
  }, {
    "from": 203,
    "label": "calls",
    "to": 252
  }, {
    "from": 203,
    "label": "calls",
    "to": 252
  }, {
    "from": 134,
    "label": "calls",
    "to": 289
  }, {
    "from": 183,
    "label": "calls",
    "to": 272
  }, {
    "from": 203,
    "label": "calls",
    "to": 187
  }, {
    "from": 238,
    "label": "calls",
    "to": 254
  }, {
    "from": 99,
    "label": "calls",
    "to": 16
  }, {
    "from": 142,
    "label": "calls",
    "to": 16
  }, {
    "from": 38,
    "label": "calls",
    "to": 256
  }, {
    "from": 112,
    "label": "calls",
    "to": 147
  }, {
    "from": 203,
    "label": "calls",
    "to": 147
  }, {
    "from": 203,
    "label": "calls",
    "to": 147
  }, {
    "from": 238,
    "label": "calls",
    "to": 282
  }, {
    "from": 62,
    "label": "calls",
    "to": 282
  }, {
    "from": 123,
    "label": "calls",
    "to": 282
  }, {
    "from": 161,
    "label": "calls",
    "to": 282
  }, {
    "from": 167,
    "label": "calls",
    "to": 282
  }, {
    "from": 171,
    "label": "calls",
    "to": 282
  }, {
    "from": 179,
    "label": "calls",
    "to": 282
  }, {
    "from": 16,
    "label": "calls",
    "to": 287
  }, {
    "from": 238,
    "label": "calls",
    "to": 239
  }, {
    "from": 49,
    "label": "calls",
    "to": 260
  }, {
    "from": 85,
    "label": "calls",
    "to": 286
  }, {
    "from": 203,
    "label": "calls",
    "to": 246
  }, {
    "from": 203,
    "label": "calls",
    "to": 246
  }, {
    "from": 24,
    "label": "calls",
    "to": 118
  }, {
    "from": 238,
    "label": "calls",
    "to": 298
  }, {
    "from": 238,
    "label": "calls",
    "to": 259
  }, {
    "from": 238,
    "label": "calls",
    "to": 259
  }, {
    "from": 24,
    "label": "calls",
    "to": 123
  }, {
    "from": 147,
    "label": "calls",
    "to": 284
  }, {
    "from": 155,
    "label": "calls",
    "to": 284
  }, {
    "from": 62,
    "label": "calls",
    "to": 283
  }, {
    "from": 118,
    "label": "calls",
    "to": 257
  }, {
    "from": 147,
    "label": "calls",
    "to": 257
  }, {
    "from": 112,
    "label": "calls",
    "to": 292
  }, {
    "from": 238,
    "label": "calls",
    "to": 255
  }, {
    "from": 238,
    "label": "calls",
    "to": 255
  }, {
    "from": 238,
    "label": "calls",
    "to": 255
  }, {
    "from": 32,
    "label": "calls",
    "to": 255
  }, {
    "from": 147,
    "label": "calls",
    "to": 255
  }, {
    "from": 147,
    "label": "calls",
    "to": 255
  }, {
    "from": 161,
    "label": "calls",
    "to": 255
  }, {
    "from": 167,
    "label": "calls",
    "to": 255
  }, {
    "from": 171,
    "label": "calls",
    "to": 255
  }, {
    "from": 179,
    "label": "calls",
    "to": 255
  }, {
    "from": 158,
    "label": "calls",
    "to": 296
  }, {
    "from": 38,
    "label": "calls",
    "to": 280
  }, {
    "from": 203,
    "label": "calls",
    "to": 158
  }, {
    "from": 238,
    "label": "calls",
    "to": 288
  }, {
    "from": 38,
    "label": "calls",
    "to": 288
  }, {
    "from": 38,
    "label": "calls",
    "to": 288
  }, {
    "from": 45,
    "label": "calls",
    "to": 288
  }, {
    "from": 203,
    "label": "calls",
    "to": 112
  }, {
    "from": 24,
    "label": "calls",
    "to": 299
  }, {
    "from": 147,
    "label": "calls",
    "to": 299
  }, {
    "from": 155,
    "label": "calls",
    "to": 299
  }, {
    "from": 203,
    "label": "calls",
    "to": 261
  }, {
    "from": 32,
    "label": "calls",
    "to": 290
  }, {
    "from": 62,
    "label": "calls",
    "to": 290
  }, {
    "from": 99,
    "label": "calls",
    "to": 290
  }, {
    "from": 142,
    "label": "calls",
    "to": 290
  }, {
    "from": 161,
    "label": "calls",
    "to": 290
  }, {
    "from": 167,
    "label": "calls",
    "to": 290
  }, {
    "from": 171,
    "label": "calls",
    "to": 290
  }, {
    "from": 179,
    "label": "calls",
    "to": 290
  }, {
    "from": 187,
    "label": "calls",
    "to": 290
  }, {
    "from": 147,
    "label": "calls",
    "to": 266
  }, {
    "from": 147,
    "label": "calls",
    "to": 266
  }, {
    "from": 238,
    "label": "calls",
    "to": 276
  }, {
    "from": 238,
    "label": "calls",
    "to": 276
  }, {
    "from": 238,
    "label": "calls",
    "to": 276
  }, {
    "from": 203,
    "label": "calls",
    "to": 293
  }, {
    "from": 99,
    "label": "calls",
    "to": 19
  }, {
    "from": 110,
    "label": "calls",
    "to": 19
  }, {
    "from": 24,
    "label": "calls",
    "to": 281
  }, {
    "from": 24,
    "label": "calls",
    "to": 281
  }, {
    "from": 49,
    "label": "calls",
    "to": 274
  }, {
    "from": 94,
    "label": "calls",
    "to": 22
  }, {
    "from": 112,
    "label": "calls",
    "to": 99
  }, {
    "from": 69,
    "label": "calls",
    "to": 302
  }, {
    "from": 85,
    "label": "calls",
    "to": 302
  }, {
    "from": 99,
    "label": "calls",
    "to": 302
  }, {
    "from": 142,
    "label": "calls",
    "to": 302
  }, {
    "from": 238,
    "label": "calls",
    "to": 295
  }, {
    "from": 238,
    "label": "calls",
    "to": 295
  }, {
    "from": 238,
    "label": "calls",
    "to": 295
  }, {
    "from": 238,
    "label": "calls",
    "to": 295
  }, {
    "from": 238,
    "label": "calls",
    "to": 295
  }, {
    "from": 238,
    "label": "calls",
    "to": 295
  }, {
    "from": 32,
    "label": "calls",
    "to": 295
  }, {
    "from": 238,
    "label": "calls",
    "to": 240
  }, {
    "from": 238,
    "label": "calls",
    "to": 297
  }, {
    "from": 19,
    "label": "calls",
    "to": 297
  }, {
    "from": 22,
    "label": "calls",
    "to": 297
  }, {
    "from": 47,
    "label": "calls",
    "to": 285
  }, {
    "from": 62,
    "label": "calls",
    "to": 294
  }, {
    "from": 94,
    "label": "calls",
    "to": 241
  }, {
    "from": 110,
    "label": "calls",
    "to": 241
  }, {
    "from": 38,
    "label": "calls",
    "to": 247
  }, {
    "from": 58,
    "label": "calls",
    "to": 300
  }, {
    "from": 187,
    "label": "calls",
    "to": 301
  }, {
    "from": 69,
    "label": "calls",
    "to": 62
  }, {
    "from": 49,
    "label": "calls",
    "to": 264
  }, {
    "from": 49,
    "label": "calls",
    "to": 264
  }, {
    "from": 238,
    "label": "calls",
    "to": 303
  }, {
    "from": 238,
    "label": "calls",
    "to": 303
  }, {
    "from": 238,
    "label": "calls",
    "to": 303
  }, {
    "from": 238,
    "label": "calls",
    "to": 303
  }, {
    "from": 85,
    "label": "calls",
    "to": 265
  }, {
    "from": 171,
    "label": "calls",
    "to": 265
  }, {
    "from": 179,
    "label": "calls",
    "to": 265
  }, {
    "from": 24,
    "label": "calls",
    "to": 243
  }, {
    "from": 118,
    "label": "calls",
    "to": 243
  }, {
    "from": 1,
    "label": "contains",
    "to": 238
  }, {
    "from": 238,
    "label": "declares",
    "to": 4
  }, {
    "from": 238,
    "label": "declares",
    "to": 16
  }, {
    "from": 238,
    "label": "declares",
    "to": 19
  }, {
    "from": 238,
    "label": "declares",
    "to": 22
  }, {
    "from": 238,
    "label": "declares",
    "to": 24
  }, {
    "from": 238,
    "label": "declares",
    "to": 30
  }, {
    "from": 238,
    "label": "declares",
    "to": 32
  }, {
    "from": 238,
    "label": "declares",
    "to": 38
  }, {
    "from": 238,
    "label": "declares",
    "to": 45
  }, {
    "from": 238,
    "label": "declares",
    "to": 47
  }, {
    "from": 238,
    "label": "declares",
    "to": 49
  }, {
    "from": 238,
    "label": "declares",
    "to": 58
  }, {
    "from": 238,
    "label": "declares",
    "to": 62
  }, {
    "from": 238,
    "label": "declares",
    "to": 69
  }, {
    "from": 238,
    "label": "declares",
    "to": 75
  }, {
    "from": 238,
    "label": "declares",
    "to": 78
  }, {
    "from": 238,
    "label": "declares",
    "to": 81
  }, {
    "from": 238,
    "label": "declares",
    "to": 85
  }, {
    "from": 238,
    "label": "declares",
    "to": 94
  }, {
    "from": 238,
    "label": "declares",
    "to": 99
  }, {
    "from": 238,
    "label": "declares",
    "to": 110
  }, {
    "from": 238,
    "label": "declares",
    "to": 112
  }, {
    "from": 238,
    "label": "declares",
    "to": 118
  }, {
    "from": 238,
    "label": "declares",
    "to": 123
  }, {
    "from": 238,
    "label": "declares",
    "to": 128
  }, {
    "from": 238,
    "label": "declares",
    "to": 131
  }, {
    "from": 238,
    "label": "declares",
    "to": 134
  }, {
    "from": 238,
    "label": "declares",
    "to": 142
  }, {
    "from": 238,
    "label": "declares",
    "to": 147
  }, {
    "from": 238,
    "label": "declares",
    "to": 155
  }, {
    "from": 238,
    "label": "declares",
    "to": 158
  }, {
    "from": 238,
    "label": "declares",
    "to": 161
  }, {
    "from": 238,
    "label": "declares",
    "to": 167
  }, {
    "from": 238,
    "label": "declares",
    "to": 171
  }, {
    "from": 238,
    "label": "declares",
    "to": 175
  }, {
    "from": 238,
    "label": "declares",
    "to": 179
  }, {
    "from": 238,
    "label": "declares",
    "to": 183
  }, {
    "from": 238,
    "label": "declares",
    "to": 187
  }, {
    "from": 238,
    "label": "declares",
    "to": 203
  }, {
    "from": 238,
    "label": "declares",
    "to": 229
  }, {
    "from": 238,
    "label": "declares",
    "to": 231
  }, {
    "from": 238,
    "label": "declares",
    "to": 233
  }, {
    "from": 238,
    "label": "declares",
    "to": 234
  }, {
    "from": 238,
    "label": "declares",
    "to": 235
  }, {
    "from": 238,
    "label": "declares",
    "to": 236
  }, {
    "from": 238,
    "label": "declares",
    "to": 237
  }, {
    "from": 1,
    "label": "declares",
    "to": 249
  }, {
    "from": 1,
    "label": "declares",
    "to": 253
  }, {
    "from": 1,
    "label": "declares",
    "to": 258
  }, {
    "from": 1,
    "label": "declares",
    "to": 262
  }, {
    "from": 1,
    "label": "declares",
    "to": 263
  }, {
    "from": 1,
    "label": "declares",
    "to": 267
  }, {
    "from": 1,
    "label": "declares",
    "to": 271
  }, {
    "from": 1,
    "label": "declares",
    "to": 273
  }, {
    "from": 1,
    "label": "declares",
    "to": 275
  }, {
    "from": 1,
    "label": "declares",
    "to": 277
  }, {
    "from": 1,
    "label": "declares",
    "to": 278
  }, {
    "from": 1,
    "label": "declares",
    "to": 279
  }, {
    "from": 1,
    "label": "declares",
    "to": 291
  }, {
    "from": 1,
    "label": "contains",
    "to": 304
  }, {
    "from": 1,
    "label": "contains",
    "to": 305
  }, {
    "from": 304,
    "label": "initializes",
    "to": 306
  }, {
    "from": 306,
    "label": "assigns",
    "to": 307
  }, {
    "from": 304,
    "label": "initializes",
    "to": 308
  }, {
    "from": 308,
    "label": "assigns",
    "to": 309
  }, {
    "from": 304,
    "label": "initializes",
    "to": 310
  }, {
    "from": 310,
    "label": "assigns",
    "to": 311
  }, {
    "from": 304,
    "label": "initializes",
    "to": 312
  }, {
    "from": 312,
    "label": "assigns",
    "to": 313
  }, {
    "from": 304,
    "label": "initializes",
    "to": 314
  }, {
    "from": 314,
    "label": "assigns",
    "to": 315
  }, {
    "from": 304,
    "label": "initializes",
    "to": 316
  }, {
    "from": 316,
    "label": "assigns",
    "to": 317
  }, {
    "from": 304,
    "label": "initializes",
    "to": 318
  }, {
    "from": 318,
    "label": "assigns",
    "to": 319
  }, {
    "from": 304,
    "label": "initializes",
    "to": 320
  }, {
    "from": 320,
    "label": "assigns",
    "to": 321
  }, {
    "from": 304,
    "label": "initializes",
    "to": 322
  }, {
    "from": 322,
    "label": "assigns",
    "to": 323
  }, {
    "from": 304,
    "label": "initializes",
    "to": 324
  }, {
    "from": 324,
    "label": "assigns",
    "to": 325
  }, {
    "from": 304,
    "label": "initializes",
    "to": 326
  }, {
    "from": 326,
    "label": "assigns",
    "to": 327
  }, {
    "from": 304,
    "label": "initializes",
    "to": 328
  }, {
    "from": 328,
    "label": "assigns",
    "to": 329
  }, {
    "from": 304,
    "label": "initializes",
    "to": 330
  }, {
    "from": 330,
    "label": "assigns",
    "to": 331
  }, {
    "from": 304,
    "label": "initializes",
    "to": 332
  }, {
    "from": 332,
    "label": "assigns",
    "to": 333
  }, {
    "from": 304,
    "label": "initializes",
    "to": 334
  }, {
    "from": 334,
    "label": "assigns",
    "to": 335
  }, {
    "from": 304,
    "label": "initializes",
    "to": 336
  }, {
    "from": 336,
    "label": "assigns",
    "to": 337
  }, {
    "from": 304,
    "label": "initializes",
    "to": 338
  }, {
    "from": 338,
    "label": "assigns",
    "to": 339
  }, {
    "from": 304,
    "label": "initializes",
    "to": 340
  }, {
    "from": 340,
    "label": "assigns",
    "to": 341
  }, {
    "from": 304,
    "label": "initializes",
    "to": 342
  }, {
    "from": 342,
    "label": "assigns",
    "to": 343
  }, {
    "from": 304,
    "label": "initializes",
    "to": 344
  }, {
    "from": 344,
    "label": "assigns",
    "to": 345
  }, {
    "from": 304,
    "label": "initializes",
    "to": 346
  }, {
    "from": 346,
    "label": "assigns",
    "to": 347
  }, {
    "from": 304,
    "label": "initializes",
    "to": 348
  }, {
    "from": 348,
    "label": "assigns",
    "to": 349
  }, {
    "from": 304,
    "label": "initializes",
    "to": 350
  }, {
    "from": 350,
    "label": "assigns",
    "to": 351
  }, {
    "from": 304,
    "label": "initializes",
    "to": 352
  }, {
    "from": 352,
    "label": "assigns",
    "to": 353
  }, {
    "from": 304,
    "label": "initializes",
    "to": 354
  }, {
    "from": 354,
    "label": "assigns",
    "to": 355
  }, {
    "from": 304,
    "label": "initializes",
    "to": 356
  }, {
    "from": 356,
    "label": "assigns",
    "to": 357
  }, {
    "from": 304,
    "label": "initializes",
    "to": 358
  }, {
    "from": 358,
    "label": "assigns",
    "to": 359
  }, {
    "from": 304,
    "label": "initializes",
    "to": 360
  }, {
    "from": 360,
    "label": "assigns",
    "to": 361
  }, {
    "from": 304,
    "label": "initializes",
    "to": 362
  }, {
    "from": 362,
    "label": "assigns",
    "to": 363
  }, {
    "from": 304,
    "label": "initializes",
    "to": 364
  }, {
    "from": 364,
    "label": "assigns",
    "to": 365
  }, {
    "from": 304,
    "label": "initializes",
    "to": 366
  }, {
    "from": 366,
    "label": "assigns",
    "to": 367
  }, {
    "from": 304,
    "label": "initializes",
    "to": 368
  }, {
    "from": 368,
    "label": "assigns",
    "to": 369
  }, {
    "from": 304,
    "label": "initializes",
    "to": 370
  }, {
    "from": 370,
    "label": "assigns",
    "to": 371
  }, {
    "from": 304,
    "label": "initializes",
    "to": 372
  }, {
    "from": 372,
    "label": "assigns",
    "to": 373
  }, {
    "from": 304,
    "label": "initializes",
    "to": 374
  }, {
    "from": 374,
    "label": "assigns",
    "to": 375
  }, {
    "from": 304,
    "label": "initializes",
    "to": 376
  }, {
    "from": 376,
    "label": "assigns",
    "to": 377
  }, {
    "from": 304,
    "label": "initializes",
    "to": 378
  }, {
    "from": 378,
    "label": "assigns",
    "to": 379
  }, {
    "from": 304,
    "label": "initializes",
    "to": 380
  }, {
    "from": 380,
    "label": "assigns",
    "to": 381
  }, {
    "from": 304,
    "label": "initializes",
    "to": 382
  }, {
    "from": 382,
    "label": "assigns",
    "to": 383
  }, {
    "from": 304,
    "label": "initializes",
    "to": 384
  }, {
    "from": 384,
    "label": "assigns",
    "to": 385
  }, {
    "from": 304,
    "label": "initializes",
    "to": 386
  }, {
    "from": 386,
    "label": "assigns",
    "to": 387
  }, {
    "from": 304,
    "label": "initializes",
    "to": 388
  }, {
    "from": 388,
    "label": "assigns",
    "to": 389
  }, {
    "from": 304,
    "label": "initializes",
    "to": 390
  }, {
    "from": 304,
    "label": "initializes",
    "to": 391
  }, {
    "from": 304,
    "label": "initializes",
    "to": 392
  }, {
    "from": 304,
    "label": "initializes",
    "to": 393
  }, {
    "from": 304,
    "label": "initializes",
    "to": 394
  }, {
    "from": 394,
    "label": "assigns",
    "to": 395
  }, {
    "from": 304,
    "label": "initializes",
    "to": 396
  }, {
    "from": 396,
    "label": "assigns",
    "to": 397
  }, {
    "from": 304,
    "label": "initializes",
    "to": 398
  }, {
    "from": 398,
    "label": "assigns",
    "to": 399
  }, {
    "from": 305,
    "label": "initializes",
    "to": 400
  }, {
    "from": 400,
    "label": "requires",
    "to": 3
  }, {
    "from": 305,
    "label": "initializes",
    "to": 401
  }, {
    "from": 401,
    "label": "requires",
    "to": 2
  }, {
    "from": 305,
    "label": "initializes",
    "to": 402
  }, {
    "from": 402,
    "label": "requires",
    "to": 244
  }, {
    "from": 305,
    "label": "initializes",
    "to": 403
  }, {
    "from": 403,
    "label": "requires",
    "to": 404
  }, {
    "from": 208,
    "label": "hasArgument",
    "to": 233
  }, {
    "from": 210,
    "label": "hasArgument",
    "to": 234
  }, {
    "from": 219,
    "label": "hasArgument",
    "to": 235
  }, {
    "from": 224,
    "label": "hasArgument",
    "to": 237
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "cgilua",
    "type": "module"
  }, {
    "id": 2,
    "text": "lp",
    "type": "module"
  }, {
    "id": 3,
    "text": "urlcode",
    "type": "module"
  }, {
    "id": 4,
    "text": "function (msg)\r\n\r\n    if type(msg) ~= \"string\" and type(msg) ~= \"number\" then\r\n        msg = format (\"bad argument #1 to 'error' (string expected, got %s)\", type(msg))\r\n    end\r\n  \r\n        -- Logging error\r\n        SAPI.Response.errorlog (msg)\r\n        SAPI.Response.errorlog (\" \")\r\n\r\n        SAPI.Response.errorlog (SAPI.Request.servervariable\"REMOTE_ADDR\")\r\n        SAPI.Response.errorlog (\" \")\r\n\r\n        SAPI.Response.errorlog (date())\r\n        SAPI.Response.errorlog (\"\\n\")\r\n\r\n        -- Building user message\r\n        msg = gsub (gsub (msg, \"\\n\", \"<br>\\n\"), \"\\t\", \"&nbsp;&nbsp;\")\r\n        SAPI.Response.contenttype (\"text/html\")\r\n        SAPI.Response.write (\"<html><head><title>CGILua Error</title></head><body>\" .. msg .. \"</body></html>\")\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "if type(msg) ~= \"string\" and type(msg) ~= \"number\" then\r\n        msg = format (\"bad argument #1 to 'error' (string expected, got %s)\", type(msg))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "msg = format (\"bad argument #1 to 'error' (string expected, got %s)\", type(msg))",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "SAPI.Response.errorlog (msg)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "SAPI.Response.errorlog (\" \")",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "SAPI.Response.errorlog (SAPI.Request.servervariable\"REMOTE_ADDR\")",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "SAPI.Response.errorlog (date())",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "SAPI.Response.errorlog (\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "msg = gsub (gsub (msg, \"\\n\", \"<br>\\n\"), \"\\t\", \"&nbsp;&nbsp;\")",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "SAPI.Response.contenttype (\"text/html\")",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "SAPI.Response.write (\"<html><head><title>CGILua Error</title></head><body>\" .. msg .. \"</body></html>\")",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function header(...)\r\n   return SAPI.Response.header(...)\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function contentheader (type, subtype)\r\n        SAPI.Response.contenttype (type..'/'..subtype)\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "SAPI.Response.contenttype (type..'/'..subtype)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function htmlheader()\r\n        SAPI.Response.contenttype (\"text/html\")\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function redirect (url, args)\r\n        if strfind(url,\"^https?:\") then\r\n                local params=\"\"\r\n                if args then\r\n                        params = \"?\"..urlcode.encodetable(args)\r\n                end\r\n                return SAPI.Response.redirect(url..params)\r\n        else\r\n                return SAPI.Response.redirect(mkabsoluteurl(mkurlpath(url,args)))\r\n        end\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "if strfind(url,\"^https?:\") then\r\n                local params=\"\"\r\n                if args then\r\n                        params = \"?\"..urlcode.encodetable(args)\r\n                end\r\n                return SAPI.Response.redirect(url..params)\r\n        else\r\n                return SAPI.Response.redirect(mkabsoluteurl(mkurlpath(url,args)))\r\n        end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "local params=\"\"",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "if args then\r\n                        params = \"?\"..urlcode.encodetable(args)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "params = \"?\"..urlcode.encodetable(args)",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function servervariable(...)\r\n   return SAPI.Request.servervariable(...)\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function errorlog (msg, level)\r\n        local t = type(msg)\r\n        if t == \"string\" or t == \"number\" then\r\n                SAPI.Response.errorlog (msg, level)\r\n        else\r\n                error (\"bad argument #1 to `cgilua.errorlog' (string expected, got \"..t..\")\", 2)\r\n        end\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "local t = type(msg)",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "if t == \"string\" or t == \"number\" then\r\n                SAPI.Response.errorlog (msg, level)\r\n        else\r\n                error (\"bad argument #1 to `cgilua.errorlog' (string expected, got \"..t..\")\", 2)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "SAPI.Response.errorlog (msg, level)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "error (\"bad argument #1 to `cgilua.errorlog' (string expected, got \"..t..\")\", 2)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function print (...)\r\n        local args = { ... }\r\n        for i = 1, select(\"#\",...) do\r\n                args[i] = tostring(args[i])\r\n        end\r\n        SAPI.Response.write (concat(args,\"\\t\"))\r\n        SAPI.Response.write (\"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "local args = { ... }",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "for i = 1, select(\"#\",...) do\r\n                args[i] = tostring(args[i])\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 41,
    "text": "args[i] = tostring(args[i])",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "SAPI.Response.write (concat(args,\"\\t\"))",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "SAPI.Response.write (\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function put (...)\r\n   return SAPI.Response.write(...)\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function _geterrorhandler(msg)\r\n    return _errorhandler(msg)\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function pcall (f)\r\n        local results = {xpcall (f, _geterrorhandler)}\r\n        local ok = results[1]\r\n        tremove(results, 1)\r\n        if ok then\r\n                if #results == 0 then results = { true } end\r\n                return unpack(results)\r\n        else\r\n                _erroroutput (unpack(results))\r\n        end\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "local results = {xpcall (f, _geterrorhandler)}",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "local ok = results[1]",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "tremove(results, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "if ok then\r\n                if #results == 0 then results = { true } end\r\n                return unpack(results)\r\n        else\r\n                _erroroutput (unpack(results))\r\n        end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "if #results == 0 then results = { true } end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "results = { true }",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "_erroroutput (unpack(results))",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "local function buildscriptenv()\r\n  local env = { print = _M.print, write = _M.put }\r\n  setmetatable(env, { __index = _G, __newindex = _G })\r\n  return env\r\nend",
    "type": "function"
  }, {
    "id": 59,
    "text": "local env = { print = _M.print, write = _M.put }",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "setmetatable(env, { __index = _G, __newindex = _G })",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "function doscript (filename)\r\n  local f, err = _G.loadfile(filename)\r\n  if not f then\r\n    error (format (\"Cannot execute `%s'. Exiting.\\n%s\", filename, err))\r\n  else\r\n    local env = buildscriptenv()\r\n    setfenv(f, env)\r\n    return pcall(f)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 63,
    "text": "local f, err = _G.loadfile(filename)",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "if not f then\r\n    error (format (\"Cannot execute `%s'. Exiting.\\n%s\", filename, err))\r\n  else\r\n    local env = buildscriptenv()\r\n    setfenv(f, env)\r\n    return pcall(f)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "error (format (\"Cannot execute `%s'. Exiting.\\n%s\", filename, err))",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "local env = buildscriptenv()",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "setfenv(f, env)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function doif (filename)\r\n        if not filename then return end    -- no file\r\n        local f, err = _open(filename)\r\n        if not f then return nil, err end    -- no file (or unreadable file)\r\n        f:close()\r\n        return doscript (filename)\r\nend",
    "type": "function"
  }, {
    "id": 70,
    "text": "if not filename then return end",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "local f, err = _open(filename)",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "if not f then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 75,
    "text": "function setmaxinput(nbytes)\r\n        _maxinput = nbytes\r\nend",
    "type": "function"
  }, {
    "id": 76,
    "text": "_maxinput = nbytes",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "function setmaxfilesize(nbytes)\r\n        _maxfilesize = nbytes\r\nend",
    "type": "function"
  }, {
    "id": 79,
    "text": "_maxfilesize = nbytes",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "function()\r\n    local tempname = os_tmpname()\r\n    -- Lua os.tmpname returns a full path in Unix, but not in Windows\r\n    -- so we strip the eventual prefix\r\n    tempname = gsub(tempname, \"(/tmp/)\", \"\")\r\n    return tempname\r\nend",
    "type": "function"
  }, {
    "id": 82,
    "text": "local tempname = os_tmpname()",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "tempname = gsub(tempname, \"(/tmp/)\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "function tmpfile(dir, namefunction)\r\n    dir = dir or tmp_path\r\n    namefunction = namefunction or tmpname\r\n    local tempname = namefunction()\r\n    local filename = dir..\"/\"..tempname\r\n    local file, err = _open(filename, \"wb+\")\r\n    if file then\r\n        tinsert(_tmpfiles, {name = filename, file = file})\r\n    end\r\n    return file, err\r\nend",
    "type": "function"
  }, {
    "id": 86,
    "text": "dir = dir or tmp_path",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "namefunction = namefunction or tmpname",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "local tempname = namefunction()",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "local filename = dir..\"/\"..tempname",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "local file, err = _open(filename, \"wb+\")",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "if file then\r\n        tinsert(_tmpfiles, {name = filename, file = file})\r\n    end",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "tinsert(_tmpfiles, {name = filename, file = file})",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 94,
    "text": "function handlelp (filename, env)\r\n  env = env or buildscriptenv()\r\n  htmlheader ()\r\n  lp.include (filename, env)\r\nend",
    "type": "function"
  }, {
    "id": 95,
    "text": "env = env or buildscriptenv()",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "htmlheader ()",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "lp.include (filename, env)",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 99,
    "text": "function buildplainhandler (type, subtype)\r\n        return function (filename)\r\n                local fh, err = _open (filename, \"rb\")\r\n        local contents = \"\"\r\n        if fh then\r\n            contents = fh:read(\"*a\")\r\n            fh:close()\r\n        else\r\n            error(err)\r\n        end\r\n        header(\"Content-Lenght\", #contents)\r\n                contentheader (type, subtype)\r\n                put (contents)\r\n        end\r\nend",
    "type": "function"
  }, {
    "id": 100,
    "text": "local fh, err = _open (filename, \"rb\")",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "local contents = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "if fh then\r\n            contents = fh:read(\"*a\")\r\n            fh:close()\r\n        else\r\n            error(err)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 103,
    "text": "contents = fh:read(\"*a\")",
    "type": "statement:assign"
  }, {
    "id": 104,
    "text": "fh:close()",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "error(err)",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "header(\"Content-Lenght\", #contents)",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "contentheader (type, subtype)",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "put (contents)",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 110,
    "text": "function buildprocesshandler (type, subtype)\r\n        return function (filename)\r\n                 local env = buildscriptenv()\r\n                 contentheader (type, subtype)\r\n                 lp.include (filename, env)\r\n        end\r\nend",
    "type": "function"
  }, {
    "id": 111,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 112,
    "text": "local function buildhandlers()\r\n    local mime = _G.require \"cgilua.mime\"\r\n    for ext, mediatype in pairs(mime) do\r\n        local t, st = match(mediatype, \"([^/]*)/([^/]*)\")\r\n        addscripthandler(ext, buildplainhandler(t, st))\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 113,
    "text": "local mime = _G.require \"cgilua.mime\"",
    "type": "statement:localassign"
  }, {
    "id": 114,
    "text": "for ext, mediatype in pairs(mime) do\r\n        local t, st = match(mediatype, \"([^/]*)/([^/]*)\")\r\n        addscripthandler(ext, buildplainhandler(t, st))\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 115,
    "text": "local t, st = match(mediatype, \"([^/]*)/([^/]*)\")",
    "type": "statement:localassign"
  }, {
    "id": 116,
    "text": "addscripthandler(ext, buildplainhandler(t, st))",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 118,
    "text": "function mkurlpath (script, args)\r\n        -- URL-encode the parameters to be passed do the script\r\n        local params = \"\"\r\n        if args then\r\n                params = \"?\"..urlcode.encodetable(args)\r\n        end\r\n        if strsub(script,1,1) == \"/\" then\r\n                return script .. params\r\n        else\r\n                return script_vdir .. script .. params\r\n        end\r\nend",
    "type": "function"
  }, {
    "id": 119,
    "text": "local params = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 120,
    "text": "if args then\r\n                params = \"?\"..urlcode.encodetable(args)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 121,
    "text": "if strsub(script,1,1) == \"/\" then\r\n                return script .. params\r\n        else\r\n                return script_vdir .. script .. params\r\n        end",
    "type": "statement:if"
  }, {
    "id": 122,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 123,
    "text": "function mkabsoluteurl (path, protocol)\r\n        protocol = protocol or \"http\"\r\n        if path:sub(1,1) ~= '/' then\r\n                path = '/'..path\r\n        end\r\n        return format(\"%s://%s:%s%s\",\r\n                protocol,\r\n                servervariable\"SERVER_NAME\",\r\n                servervariable\"SERVER_PORT\",\r\n                path)\r\nend",
    "type": "function"
  }, {
    "id": 124,
    "text": "protocol = protocol or \"http\"",
    "type": "statement:assign"
  }, {
    "id": 125,
    "text": "if path:sub(1,1) ~= '/' then\r\n                path = '/'..path\r\n        end",
    "type": "statement:if"
  }, {
    "id": 126,
    "text": "path = '/'..path",
    "type": "statement:assign"
  }, {
    "id": 127,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 128,
    "text": "function splitonlast (path, sep)\r\n        local dir,file = match(path,\"^(.-)([^:/\\\\]*)$\")\r\n        return dir,file\r\nend",
    "type": "function"
  }, {
    "id": 129,
    "text": "local dir,file = match(path,\"^(.-)([^:/\\\\]*)$\")",
    "type": "statement:localassign"
  }, {
    "id": 130,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 131,
    "text": "function splitonfirst(path, sep)\r\n    local first, rest = match(path, \"^/([^:/\\\\]*)(.*)\")\r\n    return first, rest\r\nend",
    "type": "function"
  }, {
    "id": 132,
    "text": "local first, rest = match(path, \"^/([^:/\\\\]*)(.*)\")",
    "type": "statement:localassign"
  }, {
    "id": 133,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 134,
    "text": "local function getparams ()\r\n    requestmethod = servervariable\"REQUEST_METHOD\"\r\n        -- Fill in the POST table.\r\n        POST = {}\r\n        if  requestmethod == \"POST\" then\r\n                post.parsedata {\r\n                        read = SAPI.Request.getpostdata,\r\n                        discardinput = ap and ap.discard_request_body,\r\n                        content_type = servervariable\"CONTENT_TYPE\",\r\n                        content_length = servervariable\"CONTENT_LENGTH\",\r\n                        maxinput = _maxinput,\r\n                        maxfilesize = _maxfilesize,\r\n                        args = POST,\r\n                }\r\n        end\r\n        -- Fill in the QUERY table.\r\n        QUERY = {}\r\n        urlcode.parsequery (servervariable\"QUERY_STRING\", QUERY)\r\nend",
    "type": "function"
  }, {
    "id": 135,
    "text": "requestmethod = servervariable\"REQUEST_METHOD\"",
    "type": "statement:assign"
  }, {
    "id": 136,
    "text": "POST = {}",
    "type": "statement:assign"
  }, {
    "id": 137,
    "text": "if  requestmethod == \"POST\" then\r\n                post.parsedata {\r\n                        read = SAPI.Request.getpostdata,\r\n                        discardinput = ap and ap.discard_request_body,\r\n                        content_type = servervariable\"CONTENT_TYPE\",\r\n                        content_length = servervariable\"CONTENT_LENGTH\",\r\n                        maxinput = _maxinput,\r\n                        maxfilesize = _maxfilesize,\r\n                        args = POST,\r\n                }\r\n        end",
    "type": "statement:if"
  }, {
    "id": 138,
    "text": "post.parsedata {\r\n                        read = SAPI.Request.getpostdata,\r\n                        discardinput = ap and ap.discard_request_body,\r\n                        content_type = servervariable\"CONTENT_TYPE\",\r\n                        content_length = servervariable\"CONTENT_LENGTH\",\r\n                        maxinput = _maxinput,\r\n                        maxfilesize = _maxfilesize,\r\n                        args = POST,\r\n                }",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "QUERY = {}",
    "type": "statement:assign"
  }, {
    "id": 140,
    "text": "urlcode.parsequery (servervariable\"QUERY_STRING\", QUERY)",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 142,
    "text": "local function default_handler (filename)\r\n        local fh, err = _open (filename, \"rb\")\r\n    local contents\r\n    if fh then\r\n        contents = fh:read(\"*a\")\r\n        fh:close()\r\n    else\r\n        error(err)\r\n    end\r\n    header(\"Content-Lenght\", #contents)\r\n    put (\"\\n\")\r\n        put (contents)\r\nend",
    "type": "function"
  }, {
    "id": 143,
    "text": "local contents",
    "type": "statement:localassign"
  }, {
    "id": 144,
    "text": "if fh then\r\n        contents = fh:read(\"*a\")\r\n        fh:close()\r\n    else\r\n        error(err)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 145,
    "text": "put (\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 147,
    "text": "function addscripthandler (file_extension, func)\r\n        assert (type(file_extension) == \"string\", \"File extension must be a string\")\r\n        if strfind (file_extension, '%.', 1) then\r\n                file_extension = strsub (file_extension, 2)\r\n        end\r\n        file_extension = strlower(file_extension)\r\n        assert (type(func) == \"function\", \"Handler must be a function\")\r\n\r\n        _script_handlers[file_extension] = func\r\nend",
    "type": "function"
  }, {
    "id": 148,
    "text": "assert (type(file_extension) == \"string\", \"File extension must be a string\")",
    "type": "statement:functioncall"
  }, {
    "id": 149,
    "text": "if strfind (file_extension, '%.', 1) then\r\n                file_extension = strsub (file_extension, 2)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 150,
    "text": "file_extension = strsub (file_extension, 2)",
    "type": "statement:assign"
  }, {
    "id": 151,
    "text": "file_extension = strlower(file_extension)",
    "type": "statement:assign"
  }, {
    "id": 152,
    "text": "assert (type(func) == \"function\", \"Handler must be a function\")",
    "type": "statement:functioncall"
  }, {
    "id": 153,
    "text": "_script_handlers[file_extension] = func",
    "type": "statement:assign"
  }, {
    "id": 154,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 155,
    "text": "function getscripthandler (path)\r\n        local i,f, ext = strfind (path, \"%.([^.]+)$\")\r\n        return _script_handlers[strlower(ext or '')]\r\nend",
    "type": "function"
  }, {
    "id": 156,
    "text": "local i,f, ext = strfind (path, \"%.([^.]+)$\")",
    "type": "statement:localassign"
  }, {
    "id": 157,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 158,
    "text": "function handle (path)\r\n        local h = getscripthandler (path) or default_handler\r\n    return h (path)\r\nend",
    "type": "function"
  }, {
    "id": 159,
    "text": "local h = getscripthandler (path) or default_handler",
    "type": "statement:localassign"
  }, {
    "id": 160,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 161,
    "text": "function seterrorhandler (f)\r\n        local tf = type(f)\r\n        if tf == \"function\" then\r\n                _errorhandler = f\r\n        else\r\n                error (format (\"Invalid type: expected `function', got `%s'\", tf))\r\n        end\r\nend",
    "type": "function"
  }, {
    "id": 162,
    "text": "local tf = type(f)",
    "type": "statement:localassign"
  }, {
    "id": 163,
    "text": "if tf == \"function\" then\r\n                _errorhandler = f\r\n        else\r\n                error (format (\"Invalid type: expected `function', got `%s'\", tf))\r\n        end",
    "type": "statement:if"
  }, {
    "id": 164,
    "text": "_errorhandler = f",
    "type": "statement:assign"
  }, {
    "id": 165,
    "text": "error (format (\"Invalid type: expected `function', got `%s'\", tf))",
    "type": "statement:functioncall"
  }, {
    "id": 166,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 167,
    "text": "function seterroroutput (f)\r\n        local tf = type(f)\r\n        if tf == \"function\" then\r\n                _erroroutput = f\r\n        else\r\n                error (format (\"Invalid type: expected `function', got `%s'\", tf))\r\n        end\r\nend",
    "type": "function"
  }, {
    "id": 168,
    "text": "if tf == \"function\" then\r\n                _erroroutput = f\r\n        else\r\n                error (format (\"Invalid type: expected `function', got `%s'\", tf))\r\n        end",
    "type": "statement:if"
  }, {
    "id": 169,
    "text": "_erroroutput = f",
    "type": "statement:assign"
  }, {
    "id": 170,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 171,
    "text": "function addclosefunction (f)\r\n        local tf = type(f)\r\n        if tf == \"function\" then\r\n                tinsert (_close_functions, f)\r\n        else\r\n                error (format (\"Invalid type: expected `function', got `%s'\", tf))\r\n        end\r\nend",
    "type": "function"
  }, {
    "id": 172,
    "text": "if tf == \"function\" then\r\n                tinsert (_close_functions, f)\r\n        else\r\n                error (format (\"Invalid type: expected `function', got `%s'\", tf))\r\n        end",
    "type": "statement:if"
  }, {
    "id": 173,
    "text": "tinsert (_close_functions, f)",
    "type": "statement:functioncall"
  }, {
    "id": 174,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 175,
    "text": "local function close()\r\n        for i = #_close_functions, 1, -1 do\r\n                _close_functions[i]()\r\n        end\r\nend",
    "type": "function"
  }, {
    "id": 176,
    "text": "for i = #_close_functions, 1, -1 do\r\n                _close_functions[i]()\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 177,
    "text": "_close_functions[i]()",
    "type": "statement:functioncall"
  }, {
    "id": 178,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 179,
    "text": "function addopenfunction (f)\r\n        local tf = type(f)\r\n        if tf == \"function\" then\r\n                tinsert (_open_functions, f)\r\n        else\r\n                error (format (\"Invalid type: expected `function', got `%s'\", tf))\r\n        end\r\nend",
    "type": "function"
  }, {
    "id": 180,
    "text": "if tf == \"function\" then\r\n                tinsert (_open_functions, f)\r\n        else\r\n                error (format (\"Invalid type: expected `function', got `%s'\", tf))\r\n        end",
    "type": "statement:if"
  }, {
    "id": 181,
    "text": "tinsert (_open_functions, f)",
    "type": "statement:functioncall"
  }, {
    "id": 182,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 183,
    "text": "local function open()\r\n        for i = #_open_functions, 1, -1 do\r\n                _open_functions[i]()\r\n        end\r\nend",
    "type": "function"
  }, {
    "id": 184,
    "text": "for i = #_open_functions, 1, -1 do\r\n                _open_functions[i]()\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 185,
    "text": "_open_functions[i]()",
    "type": "statement:functioncall"
  }, {
    "id": 186,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 187,
    "text": "local function reset ()\r\n        script_path = false\r\n        script_vpath, pdir, use_executable_name, urlpath, script_vdir, script_pdir,\r\n          script_file, authentication, app_name = \r\n               nil, nil, nil, nil, nil, nil, nil, nil, nil\r\n        _maxfilesize = _default_maxfilesize\r\n        _maxinput = _default_maxinput\r\n        -- Error Handling\r\n        _errorhandler = _default_errorhandler\r\n        _erroroutput = _default_erroroutput\r\n        -- Handlers\r\n        _script_handlers = {}\r\n        _open_functions = {}\r\n        _close_functions = {}\r\n\t-- clean temporary files\r\n\tfor i, v in ipairs(_tmpfiles) do\r\n\t  _tmpfiles[i] = nil\r\n\t  v.file:close()\r\n\t  local _, err = remove(v.name)\r\n\t  if err then\r\n\t    error(err)\r\n\t  end\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 188,
    "text": "script_path = false",
    "type": "statement:assign"
  }, {
    "id": 189,
    "text": "script_vpath, pdir, use_executable_name, urlpath, script_vdir, script_pdir,\r\n          script_file, authentication, app_name = \r\n               nil, nil, nil, nil, nil, nil, nil, nil, nil",
    "type": "statement:assign"
  }, {
    "id": 190,
    "text": "_maxfilesize = _default_maxfilesize",
    "type": "statement:assign"
  }, {
    "id": 191,
    "text": "_maxinput = _default_maxinput",
    "type": "statement:assign"
  }, {
    "id": 192,
    "text": "_errorhandler = _default_errorhandler",
    "type": "statement:assign"
  }, {
    "id": 193,
    "text": "_erroroutput = _default_erroroutput",
    "type": "statement:assign"
  }, {
    "id": 194,
    "text": "_script_handlers = {}",
    "type": "statement:assign"
  }, {
    "id": 195,
    "text": "_open_functions = {}",
    "type": "statement:assign"
  }, {
    "id": 196,
    "text": "_close_functions = {}",
    "type": "statement:assign"
  }, {
    "id": 197,
    "text": "for i, v in ipairs(_tmpfiles) do\r\n\t  _tmpfiles[i] = nil\r\n\t  v.file:close()\r\n\t  local _, err = remove(v.name)\r\n\t  if err then\r\n\t    error(err)\r\n\t  end\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 198,
    "text": "_tmpfiles[i] = nil",
    "type": "statement:assign"
  }, {
    "id": 199,
    "text": "v.file:close()",
    "type": "statement:functioncall"
  }, {
    "id": 200,
    "text": "local _, err = remove(v.name)",
    "type": "statement:localassign"
  }, {
    "id": 201,
    "text": "if err then\r\n\t    error(err)\r\n\t  end",
    "type": "statement:if"
  }, {
    "id": 202,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 203,
    "text": "function main ()\r\n        SAPI = _G.SAPI\r\n        buildhandlers()    \r\n        -- Default handler values\r\n        addscripthandler (\"lua\", doscript)\r\n        addscripthandler (\"lp\", handlelp)\r\n        -- Looks for an optional loader module\r\n        pcall (function () _G.require\"cgilua.loader\" end)\r\n\r\n        -- post.lua needs to be loaded after cgilua.lua is compiled\r\n        pcall (function () _G.require\"cgilua.post\" end)\r\n\r\n        if loader then\r\n                loader.init()\r\n        end\r\n    \r\n        -- Build QUERY/POST tables\r\n        if not pcall (getparams) then return nil end\r\n\r\n        local result\r\n        -- Executes the optional loader module\r\n        if loader then\r\n                loader.run()\r\n        end\r\n\r\n        -- Changing curent directory to the script's \"physical\" dir\r\n        local curr_dir = lfs.currentdir ()\r\n        pcall (function () lfs.chdir (script_pdir) end)\r\n\r\n        -- Opening functions\r\n        pcall (open)\r\n\r\n        -- Executes the script\r\n        result, err = pcall (function () return handle (script_file) end)\r\n    \r\n        -- Closing functions\r\n        pcall (close)\r\n        -- Changing to original directory\r\n        pcall (function () lfs.chdir (curr_dir) end)\r\n\r\n        -- Cleanup\r\n        reset ()\r\n        if result then -- script executed ok!\r\n                return result\r\n        end\r\nend",
    "type": "function"
  }, {
    "id": 204,
    "text": "SAPI = _G.SAPI",
    "type": "statement:assign"
  }, {
    "id": 205,
    "text": "buildhandlers()",
    "type": "statement:functioncall"
  }, {
    "id": 206,
    "text": "addscripthandler (\"lua\", doscript)",
    "type": "statement:functioncall"
  }, {
    "id": 207,
    "text": "addscripthandler (\"lp\", handlelp)",
    "type": "statement:functioncall"
  }, {
    "id": 208,
    "text": "pcall (function () _G.require\"cgilua.loader\" end)",
    "type": "statement:functioncall"
  }, {
    "id": 209,
    "text": "_G.require\"cgilua.loader\"",
    "type": "statement:functioncall"
  }, {
    "id": 210,
    "text": "pcall (function () _G.require\"cgilua.post\" end)",
    "type": "statement:functioncall"
  }, {
    "id": 211,
    "text": "_G.require\"cgilua.post\"",
    "type": "statement:functioncall"
  }, {
    "id": 212,
    "text": "if loader then\r\n                loader.init()\r\n        end",
    "type": "statement:if"
  }, {
    "id": 213,
    "text": "loader.init()",
    "type": "statement:functioncall"
  }, {
    "id": 214,
    "text": "if not pcall (getparams) then return nil end",
    "type": "statement:if"
  }, {
    "id": 215,
    "text": "local result",
    "type": "statement:localassign"
  }, {
    "id": 216,
    "text": "if loader then\r\n                loader.run()\r\n        end",
    "type": "statement:if"
  }, {
    "id": 217,
    "text": "loader.run()",
    "type": "statement:functioncall"
  }, {
    "id": 218,
    "text": "local curr_dir = lfs.currentdir ()",
    "type": "statement:localassign"
  }, {
    "id": 219,
    "text": "pcall (function () lfs.chdir (script_pdir) end)",
    "type": "statement:functioncall"
  }, {
    "id": 220,
    "text": "lfs.chdir (script_pdir)",
    "type": "statement:functioncall"
  }, {
    "id": 221,
    "text": "pcall (open)",
    "type": "statement:functioncall"
  }, {
    "id": 222,
    "text": "result, err = pcall (function () return handle (script_file) end)",
    "type": "statement:assign"
  }, {
    "id": 223,
    "text": "pcall (close)",
    "type": "statement:functioncall"
  }, {
    "id": 224,
    "text": "pcall (function () lfs.chdir (curr_dir) end)",
    "type": "statement:functioncall"
  }, {
    "id": 225,
    "text": "lfs.chdir (curr_dir)",
    "type": "statement:functioncall"
  }, {
    "id": 226,
    "text": "reset ()",
    "type": "statement:functioncall"
  }, {
    "id": 227,
    "text": "if result then -- script executed ok!\r\n                return result\r\n        end",
    "type": "statement:if"
  }, {
    "id": 228,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 229,
    "text": "function (filename)\r\n                local fh, err = _open (filename, \"rb\")\r\n        local contents = \"\"\r\n        if fh then\r\n            contents = fh:read(\"*a\")\r\n            fh:close()\r\n        else\r\n            error(err)\r\n        end\r\n        header(\"Content-Lenght\", #contents)\r\n                contentheader (type, subtype)\r\n                put (contents)\r\n        end",
    "type": "function"
  }, {
    "id": 230,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 231,
    "text": "function (filename)\r\n                 local env = buildscriptenv()\r\n                 contentheader (type, subtype)\r\n                 lp.include (filename, env)\r\n        end",
    "type": "function"
  }, {
    "id": 232,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 233,
    "text": "function () _G.require\"cgilua.loader\" end",
    "type": "function"
  }, {
    "id": 234,
    "text": "function () _G.require\"cgilua.post\" end",
    "type": "function"
  }, {
    "id": 235,
    "text": "function () lfs.chdir (script_pdir) end",
    "type": "function"
  }, {
    "id": 236,
    "text": "function () return handle (script_file) end",
    "type": "function"
  }, {
    "id": 237,
    "text": "function () lfs.chdir (curr_dir) end",
    "type": "function"
  }, {
    "id": 238,
    "text": "",
    "type": "function container"
  }, {
    "id": 239,
    "text": "function setoutfunc (f)\r\n\toutfunc = f\r\nend",
    "type": "function"
  }, {
    "id": 240,
    "text": "function setcompatmode (c)\r\n\tcompatmode = c\r\nend",
    "type": "function"
  }, {
    "id": 241,
    "text": "function include (filename, env)\r\n\t-- read the whole contents of the file\r\n\tlocal fh = assert (open (filename))\r\n\tlocal src = fh:read(\"*a\")\r\n\tfh:close()\r\n\tif src:sub(1,3) == BOM then src = src:sub(4) end\r\n\t-- translates the file into a function\r\n\tlocal prog = compile (src, '@'..filename)\r\n\tlocal _env\r\n\tif env then\r\n\t\t_env = getfenv (prog)\r\n\t\tsetfenv (prog, env)\r\n\tend\r\n\tprog ()\r\nend",
    "type": "function"
  }, {
    "id": 242,
    "text": "function parsequery (query, args)\r\n\tif type(query) == \"string\" then\r\n\t\tlocal insertfield, unescape = insertfield, unescape\r\n\t\tstring.gsub (query, \"([^&=]+)=([^&=]*)&?\",\r\n\t\t\tfunction (key, val)\r\n\t\t\t\tinsertfield (args, unescape(key), unescape(val))\r\n\t\t\tend)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 243,
    "text": "function encodetable (args)\r\n  if args == nil or next(args) == nil then   -- no args or empty args?\r\n    return \"\"\r\n  end\r\n  local strp = \"\"\r\n for key, vals in pairs(args) do\r\n    if type(vals) ~= \"table\" then\r\n      vals = {vals}\r\n    end\r\n    for i,val in ipairs(vals) do\r\n      strp = strp..\"&\"..escape(key)..\"=\"..escape(val)\r\n    end\r\n  end\r\n  -- remove first & \r\n  return string.sub(strp,2)\r\nend",
    "type": "function"
  }, {
    "id": 244,
    "text": "lfs",
    "type": "module"
  }, {
    "id": 245,
    "text": "currentdir",
    "type": "global function"
  }, {
    "id": 246,
    "text": "chdir",
    "type": "global function"
  }, {
    "id": 247,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 248,
    "text": "match",
    "type": "global function"
  }, {
    "id": 249,
    "text": "errorlog",
    "type": "global function"
  }, {
    "id": 250,
    "text": "tremove",
    "type": "global function"
  }, {
    "id": 251,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 252,
    "text": "require",
    "type": "global function"
  }, {
    "id": 253,
    "text": "redirect",
    "type": "global function"
  }, {
    "id": 254,
    "text": "os_tmpname",
    "type": "global function"
  }, {
    "id": 255,
    "text": "type",
    "type": "global function"
  }, {
    "id": 256,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 257,
    "text": "strsub",
    "type": "global function"
  }, {
    "id": 258,
    "text": "mkurlpath",
    "type": "global function"
  }, {
    "id": 259,
    "text": "getenv",
    "type": "global function"
  }, {
    "id": 260,
    "text": "xpcall",
    "type": "global function"
  }, {
    "id": 261,
    "text": "run",
    "type": "global function"
  }, {
    "id": 262,
    "text": "put",
    "type": "global function"
  }, {
    "id": 263,
    "text": "enablesession",
    "type": "global function"
  }, {
    "id": 264,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 265,
    "text": "tinsert",
    "type": "global function"
  }, {
    "id": 266,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 267,
    "text": "handle",
    "type": "global function"
  }, {
    "id": 268,
    "text": "SAPI.Request.servervariable",
    "type": "global function"
  }, {
    "id": 269,
    "text": "module",
    "type": "global function"
  }, {
    "id": 270,
    "text": "_close_functions[i]",
    "type": "global function"
  }, {
    "id": 271,
    "text": "mkabsoluteurl",
    "type": "global function"
  }, {
    "id": 272,
    "text": "_open_functions[i]",
    "type": "global function"
  }, {
    "id": 273,
    "text": "splitonfirst",
    "type": "global function"
  }, {
    "id": 274,
    "text": "_erroroutput",
    "type": "global function"
  }, {
    "id": 275,
    "text": "doif",
    "type": "global function"
  }, {
    "id": 276,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 277,
    "text": "htmlheader",
    "type": "global function"
  }, {
    "id": 278,
    "text": "addclosefunction",
    "type": "global function"
  }, {
    "id": 279,
    "text": "servervariable",
    "type": "global function"
  }, {
    "id": 280,
    "text": "select",
    "type": "global function"
  }, {
    "id": 281,
    "text": "SAPI.Response.redirect",
    "type": "global function"
  }, {
    "id": 282,
    "text": "format",
    "type": "global function"
  }, {
    "id": 283,
    "text": "setfenv",
    "type": "global function"
  }, {
    "id": 284,
    "text": "strlower",
    "type": "global function"
  }, {
    "id": 285,
    "text": "_errorhandler",
    "type": "global function"
  }, {
    "id": 286,
    "text": "namefunction",
    "type": "global function"
  }, {
    "id": 287,
    "text": "SAPI.Response.header",
    "type": "global function"
  }, {
    "id": 288,
    "text": "SAPI.Response.write",
    "type": "global function"
  }, {
    "id": 289,
    "text": "parsedata",
    "type": "global function"
  }, {
    "id": 290,
    "text": "error",
    "type": "global function"
  }, {
    "id": 291,
    "text": "splitpath",
    "type": "global function"
  }, {
    "id": 292,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 293,
    "text": "init",
    "type": "global function"
  }, {
    "id": 294,
    "text": "loadfile",
    "type": "global function"
  }, {
    "id": 295,
    "text": "SAPI.Response.errorlog",
    "type": "global function"
  }, {
    "id": 296,
    "text": "h",
    "type": "global function"
  }, {
    "id": 297,
    "text": "SAPI.Response.contenttype",
    "type": "global function"
  }, {
    "id": 298,
    "text": "date",
    "type": "global function"
  }, {
    "id": 299,
    "text": "strfind",
    "type": "global function"
  }, {
    "id": 300,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 301,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 302,
    "text": "_open",
    "type": "global function"
  }, {
    "id": 303,
    "text": "require",
    "type": "global function"
  }, {
    "id": 304,
    "text": "",
    "type": "variable container"
  }, {
    "id": 305,
    "text": "",
    "type": "require container"
  }, {
    "id": 306,
    "text": "",
    "type": "local variable"
  }, {
    "id": 307,
    "text": "",
    "type": "n/a"
  }, {
    "id": 308,
    "text": "",
    "type": "local variable"
  }, {
    "id": 309,
    "text": "",
    "type": "n/a"
  }, {
    "id": 310,
    "text": "",
    "type": "local variable"
  }, {
    "id": 311,
    "text": "",
    "type": "n/a"
  }, {
    "id": 312,
    "text": "",
    "type": "local variable"
  }, {
    "id": 313,
    "text": "",
    "type": "n/a"
  }, {
    "id": 314,
    "text": "",
    "type": "local variable"
  }, {
    "id": 315,
    "text": "",
    "type": "n/a"
  }, {
    "id": 316,
    "text": "",
    "type": "local variable"
  }, {
    "id": 317,
    "text": "",
    "type": "n/a"
  }, {
    "id": 318,
    "text": "",
    "type": "local variable"
  }, {
    "id": 319,
    "text": "",
    "type": "n/a"
  }, {
    "id": 320,
    "text": "",
    "type": "local variable"
  }, {
    "id": 321,
    "text": "",
    "type": "n/a"
  }, {
    "id": 322,
    "text": "",
    "type": "local variable"
  }, {
    "id": 323,
    "text": "",
    "type": "n/a"
  }, {
    "id": 324,
    "text": "",
    "type": "local variable"
  }, {
    "id": 325,
    "text": "",
    "type": "n/a"
  }, {
    "id": 326,
    "text": "",
    "type": "local variable"
  }, {
    "id": 327,
    "text": "",
    "type": "n/a"
  }, {
    "id": 328,
    "text": "",
    "type": "local variable"
  }, {
    "id": 329,
    "text": "",
    "type": "n/a"
  }, {
    "id": 330,
    "text": "",
    "type": "local variable"
  }, {
    "id": 331,
    "text": "",
    "type": "n/a"
  }, {
    "id": 332,
    "text": "",
    "type": "local variable"
  }, {
    "id": 333,
    "text": "",
    "type": "n/a"
  }, {
    "id": 334,
    "text": "",
    "type": "local variable"
  }, {
    "id": 335,
    "text": "",
    "type": "n/a"
  }, {
    "id": 336,
    "text": "",
    "type": "local variable"
  }, {
    "id": 337,
    "text": "",
    "type": "n/a"
  }, {
    "id": 338,
    "text": "",
    "type": "local variable"
  }, {
    "id": 339,
    "text": "",
    "type": "n/a"
  }, {
    "id": 340,
    "text": "",
    "type": "local variable"
  }, {
    "id": 341,
    "text": "",
    "type": "n/a"
  }, {
    "id": 342,
    "text": "",
    "type": "local variable"
  }, {
    "id": 343,
    "text": "",
    "type": "n/a"
  }, {
    "id": 344,
    "text": "",
    "type": "local variable"
  }, {
    "id": 345,
    "text": "",
    "type": "n/a"
  }, {
    "id": 346,
    "text": "",
    "type": "local variable"
  }, {
    "id": 347,
    "text": "",
    "type": "n/a"
  }, {
    "id": 348,
    "text": "",
    "type": "local variable"
  }, {
    "id": 349,
    "text": "",
    "type": "n/a"
  }, {
    "id": 350,
    "text": "",
    "type": "local variable"
  }, {
    "id": 351,
    "text": "",
    "type": "n/a"
  }, {
    "id": 352,
    "text": "",
    "type": "local variable"
  }, {
    "id": 353,
    "text": "",
    "type": "n/a"
  }, {
    "id": 354,
    "text": "",
    "type": "local variable"
  }, {
    "id": 355,
    "text": "",
    "type": "n/a"
  }, {
    "id": 356,
    "text": "",
    "type": "local variable"
  }, {
    "id": 357,
    "text": "",
    "type": "n/a"
  }, {
    "id": 358,
    "text": "",
    "type": "local variable"
  }, {
    "id": 359,
    "text": "",
    "type": "n/a"
  }, {
    "id": 360,
    "text": "",
    "type": "local variable"
  }, {
    "id": 361,
    "text": "",
    "type": "n/a"
  }, {
    "id": 362,
    "text": "",
    "type": "local variable"
  }, {
    "id": 363,
    "text": "",
    "type": "n/a"
  }, {
    "id": 364,
    "text": "",
    "type": "local variable"
  }, {
    "id": 365,
    "text": "",
    "type": "n/a"
  }, {
    "id": 366,
    "text": "",
    "type": "local variable"
  }, {
    "id": 367,
    "text": "",
    "type": "n/a"
  }, {
    "id": 368,
    "text": "",
    "type": "local variable"
  }, {
    "id": 369,
    "text": "",
    "type": "n/a"
  }, {
    "id": 370,
    "text": "",
    "type": "local variable"
  }, {
    "id": 371,
    "text": "",
    "type": "n/a"
  }, {
    "id": 372,
    "text": "",
    "type": "local variable"
  }, {
    "id": 373,
    "text": "",
    "type": "number"
  }, {
    "id": 374,
    "text": "",
    "type": "local variable"
  }, {
    "id": 375,
    "text": "",
    "type": "n/a"
  }, {
    "id": 376,
    "text": "",
    "type": "local variable"
  }, {
    "id": 377,
    "text": "",
    "type": "number"
  }, {
    "id": 378,
    "text": "",
    "type": "local variable"
  }, {
    "id": 379,
    "text": "",
    "type": "n/a"
  }, {
    "id": 380,
    "text": "",
    "type": "local variable"
  }, {
    "id": 381,
    "text": "",
    "type": "n/a"
  }, {
    "id": 382,
    "text": "",
    "type": "local variable"
  }, {
    "id": 383,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 384,
    "text": "",
    "type": "local variable"
  }, {
    "id": 385,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 386,
    "text": "",
    "type": "local variable"
  }, {
    "id": 387,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 388,
    "text": "",
    "type": "local variable"
  }, {
    "id": 389,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 390,
    "text": "",
    "type": "global variable"
  }, {
    "id": 391,
    "text": "",
    "type": "global variable"
  }, {
    "id": 392,
    "text": "",
    "type": "global variable"
  }, {
    "id": 393,
    "text": "",
    "type": "global variable"
  }, {
    "id": 394,
    "text": "",
    "type": "global variable"
  }, {
    "id": 395,
    "text": "",
    "type": "n/a"
  }, {
    "id": 396,
    "text": "",
    "type": "global variable"
  }, {
    "id": 397,
    "text": "",
    "type": "n/a"
  }, {
    "id": 398,
    "text": "",
    "type": "global variable"
  }, {
    "id": 399,
    "text": "",
    "type": "n/a"
  }, {
    "id": 400,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 401,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 402,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 403,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 404,
    "text": "debug",
    "type": "module"
  } ]
}