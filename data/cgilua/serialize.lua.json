{
  "_filename": "serialize.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/cgilua/src/cgilua/serialize.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 2,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 2,
    "label": "has",
    "to": 20
  }, {
    "from": 2,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 2,
    "label": "has",
    "to": 24
  }, {
    "from": 2,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 2,
    "label": "has",
    "to": 29
  }, {
    "from": 2,
    "label": "has",
    "to": 30
  }, {
    "from": 2,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 31,
    "label": "has",
    "to": 35
  }, {
    "from": 2,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 24
  }, {
    "from": 2,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 28
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 37,
    "label": "has",
    "to": 41
  }, {
    "from": 37,
    "label": "has",
    "to": 42
  }, {
    "from": 37,
    "label": "has",
    "to": 43
  }, {
    "from": 2,
    "label": "has",
    "to": 44
  }, {
    "from": 2,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 43
  }, {
    "from": 2,
    "label": "has",
    "to": 48
  }, {
    "from": 2,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 43
  }, {
    "from": 2,
    "label": "has",
    "to": 52
  }, {
    "from": 2,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 42
  }, {
    "from": 53,
    "label": "has",
    "to": 43
  }, {
    "from": 2,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 2,
    "label": "has",
    "to": 57
  }, {
    "from": 2,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 61,
    "label": "has",
    "to": 64
  }, {
    "from": 61,
    "label": "has",
    "to": 65
  }, {
    "from": 59,
    "label": "has",
    "to": 66
  }, {
    "from": 2,
    "label": "calls",
    "to": 72
  }, {
    "from": 2,
    "label": "calls",
    "to": 75
  }, {
    "from": 2,
    "label": "calls",
    "to": 75
  }, {
    "from": 2,
    "label": "calls",
    "to": 75
  }, {
    "from": 67,
    "label": "calls",
    "to": 75
  }, {
    "from": 67,
    "label": "calls",
    "to": 75
  }, {
    "from": 2,
    "label": "calls",
    "to": 69
  }, {
    "from": 2,
    "label": "calls",
    "to": 69
  }, {
    "from": 2,
    "label": "calls",
    "to": 69
  }, {
    "from": 2,
    "label": "calls",
    "to": 74
  }, {
    "from": 2,
    "label": "calls",
    "to": 74
  }, {
    "from": 2,
    "label": "calls",
    "to": 74
  }, {
    "from": 2,
    "label": "calls",
    "to": 74
  }, {
    "from": 2,
    "label": "calls",
    "to": 74
  }, {
    "from": 2,
    "label": "calls",
    "to": 74
  }, {
    "from": 2,
    "label": "calls",
    "to": 74
  }, {
    "from": 2,
    "label": "calls",
    "to": 74
  }, {
    "from": 2,
    "label": "calls",
    "to": 74
  }, {
    "from": 2,
    "label": "calls",
    "to": 74
  }, {
    "from": 2,
    "label": "calls",
    "to": 74
  }, {
    "from": 2,
    "label": "calls",
    "to": 74
  }, {
    "from": 2,
    "label": "calls",
    "to": 74
  }, {
    "from": 2,
    "label": "calls",
    "to": 74
  }, {
    "from": 2,
    "label": "calls",
    "to": 74
  }, {
    "from": 2,
    "label": "calls",
    "to": 74
  }, {
    "from": 2,
    "label": "calls",
    "to": 74
  }, {
    "from": 2,
    "label": "calls",
    "to": 74
  }, {
    "from": 67,
    "label": "calls",
    "to": 74
  }, {
    "from": 67,
    "label": "calls",
    "to": 74
  }, {
    "from": 67,
    "label": "calls",
    "to": 74
  }, {
    "from": 67,
    "label": "calls",
    "to": 74
  }, {
    "from": 2,
    "label": "calls",
    "to": 76
  }, {
    "from": 2,
    "label": "calls",
    "to": 76
  }, {
    "from": 67,
    "label": "calls",
    "to": 68
  }, {
    "from": 67,
    "label": "calls",
    "to": 68
  }, {
    "from": 67,
    "label": "calls",
    "to": 68
  }, {
    "from": 2,
    "label": "calls",
    "to": 59
  }, {
    "from": 2,
    "label": "calls",
    "to": 59
  }, {
    "from": 2,
    "label": "calls",
    "to": 59
  }, {
    "from": 2,
    "label": "calls",
    "to": 59
  }, {
    "from": 2,
    "label": "calls",
    "to": 59
  }, {
    "from": 2,
    "label": "calls",
    "to": 70
  }, {
    "from": 2,
    "label": "calls",
    "to": 71
  }, {
    "from": 67,
    "label": "calls",
    "to": 71
  }, {
    "from": 2,
    "label": "calls",
    "to": 73
  }, {
    "from": 67,
    "label": "calls",
    "to": 2
  }, {
    "from": 1,
    "label": "contains",
    "to": 67
  }, {
    "from": 67,
    "label": "declares",
    "to": 2
  }, {
    "from": 67,
    "label": "declares",
    "to": 59
  }, {
    "from": 1,
    "label": "contains",
    "to": 77
  }, {
    "from": 1,
    "label": "contains",
    "to": 78
  }, {
    "from": 77,
    "label": "initializes",
    "to": 79
  }, {
    "from": 79,
    "label": "assigns",
    "to": 80
  }, {
    "from": 77,
    "label": "initializes",
    "to": 81
  }, {
    "from": 81,
    "label": "assigns",
    "to": 82
  }, {
    "from": 77,
    "label": "initializes",
    "to": 83
  }, {
    "from": 83,
    "label": "assigns",
    "to": 84
  }, {
    "from": 77,
    "label": "initializes",
    "to": 85
  }, {
    "from": 85,
    "label": "assigns",
    "to": 86
  }, {
    "from": 77,
    "label": "initializes",
    "to": 87
  }, {
    "from": 87,
    "label": "assigns",
    "to": 88
  }, {
    "from": 77,
    "label": "initializes",
    "to": 89
  }, {
    "from": 89,
    "label": "assigns",
    "to": 90
  }, {
    "from": 77,
    "label": "initializes",
    "to": 91
  }, {
    "from": 91,
    "label": "assigns",
    "to": 92
  }, {
    "from": 77,
    "label": "initializes",
    "to": 93
  }, {
    "from": 93,
    "label": "assigns",
    "to": 94
  }, {
    "from": 77,
    "label": "initializes",
    "to": 95
  }, {
    "from": 95,
    "label": "assigns",
    "to": 96
  }, {
    "from": 1,
    "label": "provides",
    "to": 97
  }, {
    "from": 2,
    "label": "represents",
    "to": 98
  }, {
    "from": 97,
    "label": "provides",
    "to": 98
  }, {
    "from": 99,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "serialize",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function tabledump (tab, outf, ind, pre)\r\n\tlocal sep_n, sep, _n = \",\\n\", \", \", \"\\n\"\r\n\tif (not ind) or (ind == \"\") then ind = \"\"; sep_n = \", \"; _n = \"\" end\r\n\tif not pre then pre = \"\" end\r\n\toutf (\"{\")\r\n\tlocal p = pre..ind\r\n\t-- prepare list of keys\r\n\tlocal keys = { boolean = {}, number = {}, string = {} }\r\n\tlocal total = 0\r\n\tfor key in pairs (tab) do\r\n\t\ttotal = total + 1\r\n\t\tlocal t = type(key)\r\n\t\tif t == \"string\" then\r\n\t\t\ttinsert (keys.string, key)\r\n\t\telse\r\n\t\t\tkeys[t][key] = true\r\n\t\tend\r\n\tend\r\n\tlocal many = total > 5\r\n\tif not many then sep_n = sep; _n = \" \" end\r\n\toutf (_n)\r\n\t-- serialize entries with numeric keys\r\n\tif many then\r\n\t\tlocal _f,_s,_v = ipairs(tab)\r\n\t\tif _f(_s,_v) then outf (p) end\r\n\tend\r\n\tlocal num = keys.number\r\n\tlocal ok = false\r\n\t-- entries with automatic index\r\n\tfor key, val in ipairs (tab) do\r\n\t\tvalue (val, outf, ind, p)\r\n\t\toutf (sep)\r\n\t\tnum[key] = nil\r\n\t\tok = true\r\n\tend\r\n\tif ok and many then outf (_n) end\r\n\t-- entries with explicit index\r\n\tfor key in pairs (num) do\r\n\t\tif many then outf (p) end\r\n\t\toutf (\"[\")\r\n\t\toutf (key)\r\n\t\toutf (\"] = \")\r\n\t\tvalue (tab[key], outf, ind, p)\r\n\t\toutf (sep_n)\r\n\tend\r\n\t-- serialize entries with boolean keys\r\n\tlocal tr = keys.boolean[true]\r\n\tif tr then\r\n\t\toutf (format (\"%s[true] = \", many and p or ''))\r\n\t\tvalue (tab[true], outf, ind, p)\r\n\t\toutf (sep_n)\r\n\tend\r\n\tlocal fa = keys.boolean[false]\r\n\tif fa then\r\n\t\toutf (format (\"%s[false] = \", many and p or ''))\r\n\t\tvalue (tab[false], outf, ind, p)\r\n\t\toutf (sep_n)\r\n\tend\r\n\t-- serialize entries with string keys\r\n\tsort (keys.string)\r\n\tfor _, key in ipairs (keys.string) do\r\n\t\toutf (format (\"%s[%q] = \", many and p or '', key))\r\n\t\tvalue (tab[key], outf, ind, p)\r\n\t\toutf (sep_n)\r\n\tend\r\n\tif many then outf (pre) end\r\n\toutf (\"}\")\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local sep_n, sep, _n = \",\\n\", \", \", \"\\n\"",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "if (not ind) or (ind == \"\") then ind = \"\"; sep_n = \", \"; _n = \"\" end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "ind = \"\"",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "sep_n = \", \"",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "_n = \"\"",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "if not pre then pre = \"\" end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "pre = \"\"",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "outf (\"{\")",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "local p = pre..ind",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "local keys = { boolean = {}, number = {}, string = {} }",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "local total = 0",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "for key in pairs (tab) do\r\n\t\ttotal = total + 1\r\n\t\tlocal t = type(key)\r\n\t\tif t == \"string\" then\r\n\t\t\ttinsert (keys.string, key)\r\n\t\telse\r\n\t\t\tkeys[t][key] = true\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 15,
    "text": "total = total + 1",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "local t = type(key)",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "if t == \"string\" then\r\n\t\t\ttinsert (keys.string, key)\r\n\t\telse\r\n\t\t\tkeys[t][key] = true\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "tinsert (keys.string, key)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "keys[t][key] = true",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "local many = total > 5",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "if not many then sep_n = sep; _n = \" \" end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "sep_n = sep",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "_n = \" \"",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "outf (_n)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "if many then\r\n\t\tlocal _f,_s,_v = ipairs(tab)\r\n\t\tif _f(_s,_v) then outf (p) end\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "local _f,_s,_v = ipairs(tab)",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "if _f(_s,_v) then outf (p) end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "outf (p)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "local num = keys.number",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "local ok = false",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "for key, val in ipairs (tab) do\r\n\t\tvalue (val, outf, ind, p)\r\n\t\toutf (sep)\r\n\t\tnum[key] = nil\r\n\t\tok = true\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 32,
    "text": "value (val, outf, ind, p)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "outf (sep)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "num[key] = nil",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "ok = true",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "if ok and many then outf (_n) end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "for key in pairs (num) do\r\n\t\tif many then outf (p) end\r\n\t\toutf (\"[\")\r\n\t\toutf (key)\r\n\t\toutf (\"] = \")\r\n\t\tvalue (tab[key], outf, ind, p)\r\n\t\toutf (sep_n)\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 38,
    "text": "if many then outf (p) end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "outf (\"[\")",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "outf (key)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "outf (\"] = \")",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "value (tab[key], outf, ind, p)",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "outf (sep_n)",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "local tr = keys.boolean[true]",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "if tr then\r\n\t\toutf (format (\"%s[true] = \", many and p or ''))\r\n\t\tvalue (tab[true], outf, ind, p)\r\n\t\toutf (sep_n)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "outf (format (\"%s[true] = \", many and p or ''))",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "value (tab[true], outf, ind, p)",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "local fa = keys.boolean[false]",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "if fa then\r\n\t\toutf (format (\"%s[false] = \", many and p or ''))\r\n\t\tvalue (tab[false], outf, ind, p)\r\n\t\toutf (sep_n)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "outf (format (\"%s[false] = \", many and p or ''))",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "value (tab[false], outf, ind, p)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "sort (keys.string)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "for _, key in ipairs (keys.string) do\r\n\t\toutf (format (\"%s[%q] = \", many and p or '', key))\r\n\t\tvalue (tab[key], outf, ind, p)\r\n\t\toutf (sep_n)\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 54,
    "text": "outf (format (\"%s[%q] = \", many and p or '', key))",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "if many then outf (pre) end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "outf (pre)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "outf (\"}\")",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function (v, outf, ind, pre)\r\n\tlocal t = type (v)\r\n\tif t == \"string\" then\r\n\t\toutf (format (\"%q\", v))\r\n\telseif t == \"number\" then\r\n\t\toutf (tostring(v))\r\n\telseif t == \"boolean\" then\r\n\t\toutf (tostring(v))\r\n\telseif t == \"table\" then\r\n\t\ttabledump (v, outf, ind, pre)\r\n\telse\r\n\t\toutf (format (\"%q\", tostring(v)))\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "local t = type (v)",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "if t == \"string\" then\r\n\t\toutf (format (\"%q\", v))\r\n\telseif t == \"number\" then\r\n\t\toutf (tostring(v))\r\n\telseif t == \"boolean\" then\r\n\t\toutf (tostring(v))\r\n\telseif t == \"table\" then\r\n\t\ttabledump (v, outf, ind, pre)\r\n\telse\r\n\t\toutf (format (\"%q\", tostring(v)))\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "outf (format (\"%q\", v))",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "outf (tostring(v))",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "tabledump (v, outf, ind, pre)",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "outf (format (\"%q\", tostring(v)))",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "",
    "type": "function container"
  }, {
    "id": 68,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 69,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 70,
    "text": "_f",
    "type": "global function"
  }, {
    "id": 71,
    "text": "type",
    "type": "global function"
  }, {
    "id": 72,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 73,
    "text": "tinsert",
    "type": "global function"
  }, {
    "id": 74,
    "text": "outf",
    "type": "global function"
  }, {
    "id": 75,
    "text": "format",
    "type": "global function"
  }, {
    "id": 76,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 77,
    "text": "",
    "type": "variable container"
  }, {
    "id": 78,
    "text": "",
    "type": "require container"
  }, {
    "id": 79,
    "text": "",
    "type": "local variable"
  }, {
    "id": 80,
    "text": "",
    "type": "n/a"
  }, {
    "id": 81,
    "text": "",
    "type": "local variable"
  }, {
    "id": 82,
    "text": "",
    "type": "n/a"
  }, {
    "id": 83,
    "text": "",
    "type": "local variable"
  }, {
    "id": 84,
    "text": "",
    "type": "n/a"
  }, {
    "id": 85,
    "text": "",
    "type": "local variable"
  }, {
    "id": 86,
    "text": "",
    "type": "n/a"
  }, {
    "id": 87,
    "text": "",
    "type": "local variable"
  }, {
    "id": 88,
    "text": "",
    "type": "n/a"
  }, {
    "id": 89,
    "text": "",
    "type": "local variable"
  }, {
    "id": 90,
    "text": "",
    "type": "n/a"
  }, {
    "id": 91,
    "text": "",
    "type": "local variable"
  }, {
    "id": 92,
    "text": "",
    "type": "keyword"
  }, {
    "id": 93,
    "text": "",
    "type": "global variable"
  }, {
    "id": 94,
    "text": "",
    "type": "n/a"
  }, {
    "id": 95,
    "text": "",
    "type": "global variable"
  }, {
    "id": 96,
    "text": "",
    "type": "n/a"
  }, {
    "id": 97,
    "text": "",
    "type": "interface container"
  }, {
    "id": 98,
    "text": "",
    "type": "interface"
  }, {
    "id": 99,
    "text": "",
    "type": "require local variable"
  } ]
}