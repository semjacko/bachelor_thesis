{
  "_filename": "readuntil.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/cgilua/src/cgilua/readuntil.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 7,
    "label": "has",
    "to": 18
  }, {
    "from": 7,
    "label": "has",
    "to": 19
  }, {
    "from": 2,
    "label": "has",
    "to": 20
  }, {
    "from": 2,
    "label": "has",
    "to": 21
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 5
  }, {
    "from": 23,
    "label": "has",
    "to": 6
  }, {
    "from": 23,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 7,
    "label": "has",
    "to": 18
  }, {
    "from": 7,
    "label": "has",
    "to": 19
  }, {
    "from": 23,
    "label": "has",
    "to": 20
  }, {
    "from": 23,
    "label": "has",
    "to": 21
  }, {
    "from": 23,
    "label": "has",
    "to": 4
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "calls",
    "to": 27
  }, {
    "from": 2,
    "label": "calls",
    "to": 29
  }, {
    "from": 2,
    "label": "calls",
    "to": 29
  }, {
    "from": 2,
    "label": "calls",
    "to": 28
  }, {
    "from": 2,
    "label": "calls",
    "to": 28
  }, {
    "from": 2,
    "label": "calls",
    "to": 28
  }, {
    "from": 2,
    "label": "calls",
    "to": 28
  }, {
    "from": 2,
    "label": "calls",
    "to": 31
  }, {
    "from": 2,
    "label": "calls",
    "to": 30
  }, {
    "from": 2,
    "label": "calls",
    "to": 30
  }, {
    "from": 2,
    "label": "calls",
    "to": 26
  }, {
    "from": 2,
    "label": "calls",
    "to": 26
  }, {
    "from": 2,
    "label": "calls",
    "to": 26
  }, {
    "from": 2,
    "label": "calls",
    "to": 26
  }, {
    "from": 2,
    "label": "calls",
    "to": 26
  }, {
    "from": 1,
    "label": "contains",
    "to": 25
  }, {
    "from": 25,
    "label": "declares",
    "to": 2
  }, {
    "from": 25,
    "label": "declares",
    "to": 23
  }, {
    "from": 32,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 33
  }, {
    "from": 1,
    "label": "contains",
    "to": 34
  }, {
    "from": 33,
    "label": "initializes",
    "to": 35
  }, {
    "from": 35,
    "label": "assigns",
    "to": 36
  }, {
    "from": 33,
    "label": "initializes",
    "to": 37
  }, {
    "from": 37,
    "label": "assigns",
    "to": 38
  }, {
    "from": 33,
    "label": "initializes",
    "to": 39
  }, {
    "from": 39,
    "label": "assigns",
    "to": 40
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "readuntil",
    "type": "module"
  }, {
    "id": 2,
    "text": "function iterate (inp)\r\n\tlocal current = \"\"\r\n\treturn function (del, out)\r\n\t\tlocal dellen = strlen(del) \r\n\t\tlocal i, e\r\n\t\twhile true do\r\n\t\t\ti, e = strfind(current, del, 1, 1)\r\n\t\t\tif i then break end\r\n\t\t\tlocal new = inp()\r\n\t\t\tif not new then break end\r\n\t\t\tdo\t -- handle borders\r\n\t\t\t\tlocal endcurrent = strsub(current, -dellen+1)\r\n\t\t\t\tlocal border = endcurrent .. strsub(new, 1, dellen-1)\r\n\t\t\t\tif strlen(current) < dellen or strlen(new) < dellen or\r\n\t\t\t\t\t strfind(border, del, 1, 1) then\r\n\t\t\t\t\t-- move last part of `current' to new block\r\n\t\t\t\t\tcurrent = strsub(current, 1, -dellen)\r\n\t\t\t\t\tnew = endcurrent .. new\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tout(current)\r\n\t\t\tcurrent = new\r\n\t\tend\r\n\t\tout(strsub(current, 1, (i or 0) - 1))\r\n\t\tcurrent = strsub(current, (e or strlen(current)) + 1)\r\n\t\treturn (i ~= nil)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local current = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "local dellen = strlen(del)",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "local i, e",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "while true do\r\n\t\t\ti, e = strfind(current, del, 1, 1)\r\n\t\t\tif i then break end\r\n\t\t\tlocal new = inp()\r\n\t\t\tif not new then break end\r\n\t\t\tdo\t -- handle borders\r\n\t\t\t\tlocal endcurrent = strsub(current, -dellen+1)\r\n\t\t\t\tlocal border = endcurrent .. strsub(new, 1, dellen-1)\r\n\t\t\t\tif strlen(current) < dellen or strlen(new) < dellen or\r\n\t\t\t\t\t strfind(border, del, 1, 1) then\r\n\t\t\t\t\t-- move last part of `current' to new block\r\n\t\t\t\t\tcurrent = strsub(current, 1, -dellen)\r\n\t\t\t\t\tnew = endcurrent .. new\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tout(current)\r\n\t\t\tcurrent = new\r\n\t\tend",
    "type": "statement:while"
  }, {
    "id": 8,
    "text": "i, e = strfind(current, del, 1, 1)",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "if i then break end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "local new = inp()",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "if not new then break end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "do\t -- handle borders\r\n\t\t\t\tlocal endcurrent = strsub(current, -dellen+1)\r\n\t\t\t\tlocal border = endcurrent .. strsub(new, 1, dellen-1)\r\n\t\t\t\tif strlen(current) < dellen or strlen(new) < dellen or\r\n\t\t\t\t\t strfind(border, del, 1, 1) then\r\n\t\t\t\t\t-- move last part of `current' to new block\r\n\t\t\t\t\tcurrent = strsub(current, 1, -dellen)\r\n\t\t\t\t\tnew = endcurrent .. new\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:do"
  }, {
    "id": 13,
    "text": "local endcurrent = strsub(current, -dellen+1)",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "local border = endcurrent .. strsub(new, 1, dellen-1)",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "if strlen(current) < dellen or strlen(new) < dellen or\r\n\t\t\t\t\t strfind(border, del, 1, 1) then\r\n\t\t\t\t\t-- move last part of `current' to new block\r\n\t\t\t\t\tcurrent = strsub(current, 1, -dellen)\r\n\t\t\t\t\tnew = endcurrent .. new\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "current = strsub(current, 1, -dellen)",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "new = endcurrent .. new",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "out(current)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "current = new",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "out(strsub(current, 1, (i or 0) - 1))",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "current = strsub(current, (e or strlen(current)) + 1)",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function (del, out)\r\n\t\tlocal dellen = strlen(del) \r\n\t\tlocal i, e\r\n\t\twhile true do\r\n\t\t\ti, e = strfind(current, del, 1, 1)\r\n\t\t\tif i then break end\r\n\t\t\tlocal new = inp()\r\n\t\t\tif not new then break end\r\n\t\t\tdo\t -- handle borders\r\n\t\t\t\tlocal endcurrent = strsub(current, -dellen+1)\r\n\t\t\t\tlocal border = endcurrent .. strsub(new, 1, dellen-1)\r\n\t\t\t\tif strlen(current) < dellen or strlen(new) < dellen or\r\n\t\t\t\t\t strfind(border, del, 1, 1) then\r\n\t\t\t\t\t-- move last part of `current' to new block\r\n\t\t\t\t\tcurrent = strsub(current, 1, -dellen)\r\n\t\t\t\t\tnew = endcurrent .. new\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tout(current)\r\n\t\t\tcurrent = new\r\n\t\tend\r\n\t\tout(strsub(current, 1, (i or 0) - 1))\r\n\t\tcurrent = strsub(current, (e or strlen(current)) + 1)\r\n\t\treturn (i ~= nil)\r\n\tend",
    "type": "function"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "",
    "type": "function container"
  }, {
    "id": 26,
    "text": "strsub",
    "type": "global function"
  }, {
    "id": 27,
    "text": "module",
    "type": "global function"
  }, {
    "id": 28,
    "text": "strlen",
    "type": "global function"
  }, {
    "id": 29,
    "text": "out",
    "type": "global function"
  }, {
    "id": 30,
    "text": "strfind",
    "type": "global function"
  }, {
    "id": 31,
    "text": "inp",
    "type": "global function"
  }, {
    "id": 32,
    "text": "",
    "type": "global variable"
  }, {
    "id": 33,
    "text": "",
    "type": "variable container"
  }, {
    "id": 34,
    "text": "",
    "type": "require container"
  }, {
    "id": 35,
    "text": "",
    "type": "local variable"
  }, {
    "id": 36,
    "text": "",
    "type": "n/a"
  }, {
    "id": 37,
    "text": "",
    "type": "local variable"
  }, {
    "id": 38,
    "text": "",
    "type": "n/a"
  }, {
    "id": 39,
    "text": "",
    "type": "local variable"
  }, {
    "id": 40,
    "text": "",
    "type": "n/a"
  } ]
}