{
  "_filename": "authentication.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/cgilua/src/cgilua/authentication.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "calls",
    "to": 91
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 10,
    "label": "has",
    "to": 5
  }, {
    "from": 10,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 17,
    "label": "has",
    "to": 22
  }, {
    "from": 17,
    "label": "has",
    "to": 5
  }, {
    "from": 17,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 24,
    "label": "has",
    "to": 29
  }, {
    "from": 24,
    "label": "has",
    "to": 30
  }, {
    "from": 24,
    "label": "has",
    "to": 5
  }, {
    "from": 24,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 33,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 39,
    "label": "has",
    "to": 43
  }, {
    "from": 32,
    "label": "has",
    "to": 5
  }, {
    "from": 32,
    "label": "has",
    "to": 5
  }, {
    "from": 32,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 45,
    "label": "has",
    "to": 5
  }, {
    "from": 45,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 54,
    "label": "has",
    "to": 57
  }, {
    "from": 54,
    "label": "has",
    "to": 58
  }, {
    "from": 50,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 56
  }, {
    "from": 60,
    "label": "has",
    "to": 58
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 60,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 64,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 67,
    "label": "has",
    "to": 72
  }, {
    "from": 67,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 71
  }, {
    "from": 64,
    "label": "has",
    "to": 5
  }, {
    "from": 64,
    "label": "has",
    "to": 5
  }, {
    "from": 64,
    "label": "has",
    "to": 5
  }, {
    "from": 64,
    "label": "has",
    "to": 5
  }, {
    "from": 64,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 35
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 37
  }, {
    "from": 77,
    "label": "has",
    "to": 38
  }, {
    "from": 76,
    "label": "has",
    "to": 58
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 76,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 76,
    "label": "has",
    "to": 5
  }, {
    "from": 76,
    "label": "has",
    "to": 5
  }, {
    "from": 76,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 5
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 84,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 84,
    "label": "has",
    "to": 5
  }, {
    "from": 84,
    "label": "has",
    "to": 90
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 91,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 91,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 91,
    "label": "has",
    "to": 98
  }, {
    "from": 32,
    "label": "calls",
    "to": 106
  }, {
    "from": 76,
    "label": "calls",
    "to": 10
  }, {
    "from": 32,
    "label": "calls",
    "to": 101
  }, {
    "from": 76,
    "label": "calls",
    "to": 101
  }, {
    "from": 76,
    "label": "calls",
    "to": 109
  }, {
    "from": 10,
    "label": "calls",
    "to": 113
  }, {
    "from": 76,
    "label": "calls",
    "to": 113
  }, {
    "from": 24,
    "label": "calls",
    "to": 108
  }, {
    "from": 24,
    "label": "calls",
    "to": 108
  }, {
    "from": 50,
    "label": "calls",
    "to": 102
  }, {
    "from": 60,
    "label": "calls",
    "to": 102
  }, {
    "from": 50,
    "label": "calls",
    "to": 100
  }, {
    "from": 76,
    "label": "calls",
    "to": 111
  }, {
    "from": 84,
    "label": "calls",
    "to": 111
  }, {
    "from": 82,
    "label": "calls",
    "to": 76
  }, {
    "from": 99,
    "label": "calls",
    "to": 119
  }, {
    "from": 99,
    "label": "calls",
    "to": 119
  }, {
    "from": 99,
    "label": "calls",
    "to": 119
  }, {
    "from": 17,
    "label": "calls",
    "to": 107
  }, {
    "from": 17,
    "label": "calls",
    "to": 117
  }, {
    "from": 17,
    "label": "calls",
    "to": 117
  }, {
    "from": 17,
    "label": "calls",
    "to": 117
  }, {
    "from": 17,
    "label": "calls",
    "to": 117
  }, {
    "from": 24,
    "label": "calls",
    "to": 117
  }, {
    "from": 24,
    "label": "calls",
    "to": 117
  }, {
    "from": 24,
    "label": "calls",
    "to": 117
  }, {
    "from": 32,
    "label": "calls",
    "to": 117
  }, {
    "from": 32,
    "label": "calls",
    "to": 117
  }, {
    "from": 84,
    "label": "calls",
    "to": 117
  }, {
    "from": 64,
    "label": "calls",
    "to": 60
  }, {
    "from": 64,
    "label": "calls",
    "to": 60
  }, {
    "from": 45,
    "label": "calls",
    "to": 17
  }, {
    "from": 76,
    "label": "calls",
    "to": 110
  }, {
    "from": 32,
    "label": "calls",
    "to": 4
  }, {
    "from": 76,
    "label": "calls",
    "to": 4
  }, {
    "from": 10,
    "label": "calls",
    "to": 116
  }, {
    "from": 10,
    "label": "calls",
    "to": 116
  }, {
    "from": 10,
    "label": "calls",
    "to": 116
  }, {
    "from": 32,
    "label": "calls",
    "to": 116
  }, {
    "from": 45,
    "label": "calls",
    "to": 116
  }, {
    "from": 24,
    "label": "calls",
    "to": 118
  }, {
    "from": 24,
    "label": "calls",
    "to": 105
  }, {
    "from": 45,
    "label": "calls",
    "to": 104
  }, {
    "from": 50,
    "label": "calls",
    "to": 45
  }, {
    "from": 84,
    "label": "calls",
    "to": 45
  }, {
    "from": 84,
    "label": "calls",
    "to": 45
  }, {
    "from": 50,
    "label": "calls",
    "to": 7
  }, {
    "from": 50,
    "label": "calls",
    "to": 7
  }, {
    "from": 60,
    "label": "calls",
    "to": 7
  }, {
    "from": 76,
    "label": "calls",
    "to": 7
  }, {
    "from": 99,
    "label": "calls",
    "to": 112
  }, {
    "from": 60,
    "label": "calls",
    "to": 50
  }, {
    "from": 64,
    "label": "calls",
    "to": 50
  }, {
    "from": 24,
    "label": "calls",
    "to": 115
  }, {
    "from": 64,
    "label": "calls",
    "to": 32
  }, {
    "from": 32,
    "label": "calls",
    "to": 24
  }, {
    "from": 64,
    "label": "calls",
    "to": 114
  }, {
    "from": 1,
    "label": "contains",
    "to": 99
  }, {
    "from": 99,
    "label": "declares",
    "to": 4
  }, {
    "from": 99,
    "label": "declares",
    "to": 7
  }, {
    "from": 99,
    "label": "declares",
    "to": 10
  }, {
    "from": 99,
    "label": "declares",
    "to": 17
  }, {
    "from": 99,
    "label": "declares",
    "to": 24
  }, {
    "from": 99,
    "label": "declares",
    "to": 32
  }, {
    "from": 99,
    "label": "declares",
    "to": 45
  }, {
    "from": 99,
    "label": "declares",
    "to": 50
  }, {
    "from": 99,
    "label": "declares",
    "to": 60
  }, {
    "from": 99,
    "label": "declares",
    "to": 64
  }, {
    "from": 99,
    "label": "declares",
    "to": 76
  }, {
    "from": 99,
    "label": "declares",
    "to": 82
  }, {
    "from": 99,
    "label": "declares",
    "to": 84
  }, {
    "from": 99,
    "label": "declares",
    "to": 91
  }, {
    "from": 120,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 121
  }, {
    "from": 1,
    "label": "contains",
    "to": 122
  }, {
    "from": 121,
    "label": "initializes",
    "to": 123
  }, {
    "from": 123,
    "label": "assigns",
    "to": 124
  }, {
    "from": 121,
    "label": "initializes",
    "to": 125
  }, {
    "from": 125,
    "label": "assigns",
    "to": 126
  }, {
    "from": 121,
    "label": "initializes",
    "to": 127
  }, {
    "from": 127,
    "label": "assigns",
    "to": 128
  }, {
    "from": 121,
    "label": "initializes",
    "to": 129
  }, {
    "from": 129,
    "label": "assigns",
    "to": 130
  }, {
    "from": 121,
    "label": "initializes",
    "to": 131
  }, {
    "from": 121,
    "label": "initializes",
    "to": 132
  }, {
    "from": 121,
    "label": "initializes",
    "to": 133
  }, {
    "from": 122,
    "label": "initializes",
    "to": 134
  }, {
    "from": 134,
    "label": "requires",
    "to": 2
  }, {
    "from": 122,
    "label": "initializes",
    "to": 135
  }, {
    "from": 135,
    "label": "requires",
    "to": 103
  }, {
    "from": 122,
    "label": "initializes",
    "to": 120
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "authentication",
    "type": "module"
  }, {
    "id": 2,
    "text": "mime",
    "type": "module"
  }, {
    "id": 3,
    "text": "",
    "type": "function container"
  }, {
    "id": 4,
    "text": "function getToken()\r\n    return cgilua.QUERY[configuration.tokenName]\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "function setToken(token)\r\n    cgilua.QUERY[configuration.tokenName] = token\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "cgilua.QUERY[configuration.tokenName] = token",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function currentURL()\r\n    local script_name = cgilua.servervariable\"SCRIPT_NAME\"\r\n    local path_info = cgilua.servervariable\"PATH_INFO\" or \"\"\r\n    local query_string = cgilua.servervariable\"QUERY_STRING\" or \"\"\r\n    if query_string ~= \"\" then\r\n        query_string = \"?\"..query_string\r\n    end\r\n    return cgilua.mkabsoluteurl(script_name..path_info..query_string)\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "local script_name = cgilua.servervariable\"SCRIPT_NAME\"",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "local path_info = cgilua.servervariable\"PATH_INFO\" or \"\"",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "local query_string = cgilua.servervariable\"QUERY_STRING\" or \"\"",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "if query_string ~= \"\" then\r\n        query_string = \"?\"..query_string\r\n    end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "query_string = \"?\"..query_string",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function encodeURLbase64(str)\r\n\tlocal b64str = mime.b64(str)\r\n\tlocal urlb64str = string.gsub(b64str,\"=\",\"\")\r\n\turlb64str = string.gsub(urlb64str,\"+\",\"*\")\r\n\turlb64str = string.gsub(urlb64str,\"/\",\"-\")\r\n\turlb64str = string.gsub(urlb64str,\" \",\"_\")\r\n\treturn urlb64str\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "local b64str = mime.b64(str)",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "local urlb64str = string.gsub(b64str,\"=\",\"\")",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "urlb64str = string.gsub(urlb64str,\"+\",\"*\")",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "urlb64str = string.gsub(urlb64str,\"/\",\"-\")",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "urlb64str = string.gsub(urlb64str,\" \",\"_\")",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function decodeURLbase64(urlb64str)\r\n\tlocal b64str = string.gsub(urlb64str,\"*\",\"+\")\r\n\tb64str = string.gsub(b64str,\"-\",\"/\")\r\n\tb64str = string.gsub(b64str,\"_\",\" \")\r\n\tlocal b64strPadLen = math.fmod(4 - math.fmod(string.len(b64str), 4), 4)\r\n\tb64str = b64str..string.rep(\"=\", b64strPadLen)\r\n\tlocal str = mime.unb64(b64str)\r\n\treturn str\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "local b64str = string.gsub(urlb64str,\"*\",\"+\")",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "b64str = string.gsub(b64str,\"-\",\"/\")",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "b64str = string.gsub(b64str,\"_\",\" \")",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "local b64strPadLen = math.fmod(4 - math.fmod(string.len(b64str), 4), 4)",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "b64str = b64str..string.rep(\"=\", b64strPadLen)",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "local str = mime.unb64(b64str)",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function username()\r\n\tif authenticatedUser == nil then\r\n\t\tlocal authenticatedUserData\r\n        local token\r\n\t\tif configuration.tokenPersistence == \"url\" then\r\n            token = getToken()\r\n\t\telseif configuration.tokenPersistence == \"cookie\" then\r\n\t\t\ttoken = cgilua.cookies.get(configuration.tokenName)\r\n\t\tend\r\n        if token then\r\n            authenticatedUserData = md5.decrypt(decodeURLbase64(token), configuration.criptKey)\r\n            -- check if IP in crypted data match with client IP\r\n            local authenticatedUserIP = authenticatedUserData and string.gsub(authenticatedUserData, \",.*$\",\"\") or nil\r\n            if authenticatedUserIP ~= cgilua.servervariable(\"REMOTE_ADDR\") then\r\n                return nil\r\n            end\r\n            authenticatedUser=authenticatedUserData and string.gsub(authenticatedUserData, \"^.*,\", \"\") or nil\r\n        end\r\n\tend\r\n\treturn authenticatedUser\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "if authenticatedUser == nil then\r\n\t\tlocal authenticatedUserData\r\n        local token\r\n\t\tif configuration.tokenPersistence == \"url\" then\r\n            token = getToken()\r\n\t\telseif configuration.tokenPersistence == \"cookie\" then\r\n\t\t\ttoken = cgilua.cookies.get(configuration.tokenName)\r\n\t\tend\r\n        if token then\r\n            authenticatedUserData = md5.decrypt(decodeURLbase64(token), configuration.criptKey)\r\n            -- check if IP in crypted data match with client IP\r\n            local authenticatedUserIP = authenticatedUserData and string.gsub(authenticatedUserData, \",.*$\",\"\") or nil\r\n            if authenticatedUserIP ~= cgilua.servervariable(\"REMOTE_ADDR\") then\r\n                return nil\r\n            end\r\n            authenticatedUser=authenticatedUserData and string.gsub(authenticatedUserData, \"^.*,\", \"\") or nil\r\n        end\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "local authenticatedUserData",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "local token",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "if configuration.tokenPersistence == \"url\" then\r\n            token = getToken()\r\n\t\telseif configuration.tokenPersistence == \"cookie\" then\r\n\t\t\ttoken = cgilua.cookies.get(configuration.tokenName)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "token = getToken()",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "token = cgilua.cookies.get(configuration.tokenName)",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "if token then\r\n            authenticatedUserData = md5.decrypt(decodeURLbase64(token), configuration.criptKey)\r\n            -- check if IP in crypted data match with client IP\r\n            local authenticatedUserIP = authenticatedUserData and string.gsub(authenticatedUserData, \",.*$\",\"\") or nil\r\n            if authenticatedUserIP ~= cgilua.servervariable(\"REMOTE_ADDR\") then\r\n                return nil\r\n            end\r\n            authenticatedUser=authenticatedUserData and string.gsub(authenticatedUserData, \"^.*,\", \"\") or nil\r\n        end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "authenticatedUserData = md5.decrypt(decodeURLbase64(token), configuration.criptKey)",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "local authenticatedUserIP = authenticatedUserData and string.gsub(authenticatedUserData, \",.*$\",\"\") or nil",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "if authenticatedUserIP ~= cgilua.servervariable(\"REMOTE_ADDR\") then\r\n                return nil\r\n            end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "authenticatedUser=authenticatedUserData and string.gsub(authenticatedUserData, \"^.*,\", \"\") or nil",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "local function cryptUserData()\r\n    if authenticatedUser then\r\n        local userData = cgilua.servervariable(\"REMOTE_ADDR\") ..\",\".. authenticatedUser\r\n        local cryptedUserData = encodeURLbase64(md5.crypt(userData, configuration.criptKey))\r\n        return cryptedUserData\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "if authenticatedUser then\r\n        local userData = cgilua.servervariable(\"REMOTE_ADDR\") ..\",\".. authenticatedUser\r\n        local cryptedUserData = encodeURLbase64(md5.crypt(userData, configuration.criptKey))\r\n        return cryptedUserData\r\n    end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "local userData = cgilua.servervariable(\"REMOTE_ADDR\") ..\",\".. authenticatedUser",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "local cryptedUserData = encodeURLbase64(md5.crypt(userData, configuration.criptKey))",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "local function setUser(username)\r\n\tauthenticatedUser = username\r\n    if username then\r\n        local cryptedUserData = cryptUserData()\r\n        if configuration.tokenPersistence == \"url\" then\r\n            setToken(cryptedUserData)\r\n            cgilua.cookies.delete(configuration.tokenName) -- removes an eventual previous cookie token\r\n        elseif configuration.tokenPersistence == \"cookie\" then\r\n            cgilua.cookies.set(configuration.tokenName, cryptedUserData)\r\n            setToken() -- remove an eventual previous token from the URLs\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "authenticatedUser = username",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "if username then\r\n        local cryptedUserData = cryptUserData()\r\n        if configuration.tokenPersistence == \"url\" then\r\n            setToken(cryptedUserData)\r\n            cgilua.cookies.delete(configuration.tokenName) -- removes an eventual previous cookie token\r\n        elseif configuration.tokenPersistence == \"cookie\" then\r\n            cgilua.cookies.set(configuration.tokenName, cryptedUserData)\r\n            setToken() -- remove an eventual previous token from the URLs\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "local cryptedUserData = cryptUserData()",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "if configuration.tokenPersistence == \"url\" then\r\n            setToken(cryptedUserData)\r\n            cgilua.cookies.delete(configuration.tokenName) -- removes an eventual previous cookie token\r\n        elseif configuration.tokenPersistence == \"cookie\" then\r\n            cgilua.cookies.set(configuration.tokenName, cryptedUserData)\r\n            setToken() -- remove an eventual previous token from the URLs\r\n        end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "setToken(cryptedUserData)",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "cgilua.cookies.delete(configuration.tokenName)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "cgilua.cookies.set(configuration.tokenName, cryptedUserData)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "setToken()",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function logout()\r\n    setUser()\r\n    cgilua.cookies.delete(configuration.tokenName)\r\n    setToken()\r\n    cgilua.QUERY.logout = nil\r\nend",
    "type": "function"
  }, {
    "id": 61,
    "text": "setUser()",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "cgilua.QUERY.logout = nil",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "function check(name, pass)\r\n    name = name or cgilua.POST.user\r\n    pass = pass or cgilua.POST.pass\r\n\tif name then\r\n        -- Tries to authenticate the user using the configured method\r\n\t\tlocal retauth,errauth = _check(name, pass)\r\n\t\tif  retauth then\r\n\t\t\tsetUser(name)\r\n\t\t\treturn true\r\n\t\telse\r\n\t\t\tlogout()\r\n\t\t\treturn false, errauth\r\n\t\tend\r\n\telse\r\n\t\tlocal authuser = username()\r\n\t\tif authuser then\r\n\t\t\tif cgilua.QUERY.logout ~= nil then\r\n\t\t\t\tlogout()\r\n\t\t\t\treturn false\r\n\t\t\tend\r\n\t\tend\r\n\t\treturn authuser\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 65,
    "text": "name = name or cgilua.POST.user",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "pass = pass or cgilua.POST.pass",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "if name then\r\n        -- Tries to authenticate the user using the configured method\r\n\t\tlocal retauth,errauth = _check(name, pass)\r\n\t\tif  retauth then\r\n\t\t\tsetUser(name)\r\n\t\t\treturn true\r\n\t\telse\r\n\t\t\tlogout()\r\n\t\t\treturn false, errauth\r\n\t\tend\r\n\telse\r\n\t\tlocal authuser = username()\r\n\t\tif authuser then\r\n\t\t\tif cgilua.QUERY.logout ~= nil then\r\n\t\t\t\tlogout()\r\n\t\t\t\treturn false\r\n\t\t\tend\r\n\t\tend\r\n\t\treturn authuser\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "local retauth,errauth = _check(name, pass)",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "if  retauth then\r\n\t\t\tsetUser(name)\r\n\t\t\treturn true\r\n\t\telse\r\n\t\t\tlogout()\r\n\t\t\treturn false, errauth\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "setUser(name)",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "logout()",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "local authuser = username()",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "if authuser then\r\n\t\t\tif cgilua.QUERY.logout ~= nil then\r\n\t\t\t\tlogout()\r\n\t\t\t\treturn false\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "if cgilua.QUERY.logout ~= nil then\r\n\t\t\t\tlogout()\r\n\t\t\t\treturn false\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "function checkURL(ref, tologout)\r\n    local token\r\n    if configuration.tokenPersistence == \"url\" then\r\n        token = getToken()\r\n    elseif configuration.tokenPersistence == \"cookie\" then\r\n        token = cgilua.cookies.get(configuration.tokenName)\r\n    end\r\n\r\n    -- As HTTP header referer information can violate privacy, \r\n    -- some browsers allow the user to disable the sending of referer information.\r\n    -- Some proxy and firewall software will also filter out referer information,\r\n    -- to avoid leaking the location of non-public websites.\r\n    -- So we send the current URL as an URL parameter to the login URL.     \r\n\tsetToken()\r\n\tlocal args = {ref = ref or currentURL(), logout = tologout}\r\n\tif string.find(configuration.checkURL, \"^https?:\") then\r\n\t\tlocal params = \"?\"..urlcode.encodetable(args)\r\n\t\treturn configuration.checkURL..params\r\n\tend\r\n\treturn cgilua.mkabsoluteurl(cgilua.mkurlpath(configuration.checkURL, args))\r\nend",
    "type": "function"
  }, {
    "id": 77,
    "text": "if configuration.tokenPersistence == \"url\" then\r\n        token = getToken()\r\n    elseif configuration.tokenPersistence == \"cookie\" then\r\n        token = cgilua.cookies.get(configuration.tokenName)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "local args = {ref = ref or currentURL(), logout = tologout}",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "if string.find(configuration.checkURL, \"^https?:\") then\r\n\t\tlocal params = \"?\"..urlcode.encodetable(args)\r\n\t\treturn configuration.checkURL..params\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 80,
    "text": "local params = \"?\"..urlcode.encodetable(args)",
    "type": "statement:localassign"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "function logoutURL()\r\n\treturn checkURL(nil, 1)\r\nend",
    "type": "function"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "function refURL()\r\n    local url\r\n    local baseURL = cgilua.QUERY.ref or configuration.checkURL\r\n    if string.find(baseURL, \"\\?\") then\r\n        url = string.gsub(baseURL, \"\\?\", \"?\"..configuration.tokenName..\"=\"..cryptUserData()..\"&\")\r\n    else\r\n        url = baseURL..\"?\"..configuration.tokenName..\"=\"..cryptUserData()\r\n    end\r\n\treturn url\r\nend",
    "type": "function"
  }, {
    "id": 85,
    "text": "local url",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "local baseURL = cgilua.QUERY.ref or configuration.checkURL",
    "type": "statement:localassign"
  }, {
    "id": 87,
    "text": "if string.find(baseURL, \"\\?\") then\r\n        url = string.gsub(baseURL, \"\\?\", \"?\"..configuration.tokenName..\"=\"..cryptUserData()..\"&\")\r\n    else\r\n        url = baseURL..\"?\"..configuration.tokenName..\"=\"..cryptUserData()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 88,
    "text": "url = string.gsub(baseURL, \"\\?\", \"?\"..configuration.tokenName..\"=\"..cryptUserData()..\"&\")",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "url = baseURL..\"?\"..configuration.tokenName..\"=\"..cryptUserData()",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 91,
    "text": "function configure(options, methods)\r\n    configuration = options\r\n    local method = methods[options.method] or {}\r\n    \r\n    if method.check then\r\n        _check = method.check\r\n    end\r\n    if method.username then\r\n        username = method.username\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 92,
    "text": "configuration = options",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "local method = methods[options.method] or {}",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "if method.check then\r\n        _check = method.check\r\n    end",
    "type": "statement:if"
  }, {
    "id": 95,
    "text": "_check = method.check",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "if method.username then\r\n        username = method.username\r\n    end",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "username = method.username",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 99,
    "text": "",
    "type": "function container"
  }, {
    "id": 100,
    "text": "function set (name, value, options)\r\n  header(\"Set-Cookie\", build(name, value, options))\r\nend",
    "type": "function"
  }, {
    "id": 101,
    "text": "function get (name)\r\n  local cookies = servervariable\"HTTP_COOKIE\" or \"\"\r\n  cookies = \";\" .. cookies .. \";\"\r\n  cookies = gsub(cookies, \"%s*;%s*\", \";\")   -- remove extra spaces\r\n  local pattern = \";\" .. name .. \"=(.-);\"\r\n  local _, __, value = strfind(cookies, pattern)\r\n  return value and unescape(value)\r\nend",
    "type": "function"
  }, {
    "id": 102,
    "text": "function delete (name, options)\r\n  options = options or {}\r\n  options.expires = 1\r\n  set(name, \"xxx\", options)\r\nend",
    "type": "function"
  }, {
    "id": 103,
    "text": "md5",
    "type": "module"
  }, {
    "id": 104,
    "text": "crypt",
    "type": "global function"
  }, {
    "id": 105,
    "text": "unb64",
    "type": "global function"
  }, {
    "id": 106,
    "text": "decrypt",
    "type": "global function"
  }, {
    "id": 107,
    "text": "b64",
    "type": "global function"
  }, {
    "id": 108,
    "text": "fmod",
    "type": "global function"
  }, {
    "id": 109,
    "text": "mkurlpath",
    "type": "global function"
  }, {
    "id": 110,
    "text": "encodetable",
    "type": "global function"
  }, {
    "id": 111,
    "text": "find",
    "type": "global function"
  }, {
    "id": 112,
    "text": "module",
    "type": "global function"
  }, {
    "id": 113,
    "text": "mkabsoluteurl",
    "type": "global function"
  }, {
    "id": 114,
    "text": "_check",
    "type": "global function"
  }, {
    "id": 115,
    "text": "len",
    "type": "global function"
  }, {
    "id": 116,
    "text": "servervariable",
    "type": "global function"
  }, {
    "id": 117,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 118,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 119,
    "text": "require",
    "type": "global function"
  }, {
    "id": 120,
    "text": "",
    "type": "global variable"
  }, {
    "id": 121,
    "text": "",
    "type": "variable container"
  }, {
    "id": 122,
    "text": "",
    "type": "require container"
  }, {
    "id": 123,
    "text": "",
    "type": "local variable"
  }, {
    "id": 124,
    "text": "",
    "type": "n/a"
  }, {
    "id": 125,
    "text": "",
    "type": "local variable"
  }, {
    "id": 126,
    "text": "",
    "type": "n/a"
  }, {
    "id": 127,
    "text": "",
    "type": "local variable"
  }, {
    "id": 128,
    "text": "",
    "type": "n/a"
  }, {
    "id": 129,
    "text": "",
    "type": "local variable"
  }, {
    "id": 130,
    "text": "",
    "type": "n/a"
  }, {
    "id": 131,
    "text": "",
    "type": "local variable"
  }, {
    "id": 132,
    "text": "",
    "type": "local variable"
  }, {
    "id": 133,
    "text": "",
    "type": "local variable"
  }, {
    "id": 134,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 135,
    "text": "",
    "type": "require local variable"
  } ]
}