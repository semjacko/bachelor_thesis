{
  "_filename": "download.lua",
  "_isShebang": true,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/cgilua/tests/download.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 9,
    "label": "has",
    "to": 15
  }, {
    "from": 9,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 7
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 23,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 23,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 22,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 7
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 17,
    "label": "calls",
    "to": 48
  }, {
    "from": 37,
    "label": "calls",
    "to": 48
  }, {
    "from": 37,
    "label": "calls",
    "to": 43
  }, {
    "from": 17,
    "label": "calls",
    "to": 51
  }, {
    "from": 22,
    "label": "calls",
    "to": 38
  }, {
    "from": 37,
    "label": "calls",
    "to": 46
  }, {
    "from": 37,
    "label": "calls",
    "to": 46
  }, {
    "from": 9,
    "label": "calls",
    "to": 45
  }, {
    "from": 22,
    "label": "calls",
    "to": 47
  }, {
    "from": 17,
    "label": "calls",
    "to": 41
  }, {
    "from": 22,
    "label": "calls",
    "to": 41
  }, {
    "from": 17,
    "label": "calls",
    "to": 39
  }, {
    "from": 37,
    "label": "calls",
    "to": 39
  }, {
    "from": 17,
    "label": "calls",
    "to": 9
  }, {
    "from": 37,
    "label": "calls",
    "to": 49
  }, {
    "from": 2,
    "label": "calls",
    "to": 40
  }, {
    "from": 22,
    "label": "calls",
    "to": 52
  }, {
    "from": 22,
    "label": "calls",
    "to": 44
  }, {
    "from": 22,
    "label": "calls",
    "to": 44
  }, {
    "from": 9,
    "label": "calls",
    "to": 42
  }, {
    "from": 37,
    "label": "calls",
    "to": 22
  }, {
    "from": 37,
    "label": "calls",
    "to": 50
  }, {
    "from": 9,
    "label": "calls",
    "to": 2
  }, {
    "from": 37,
    "label": "calls",
    "to": 17
  }, {
    "from": 1,
    "label": "contains",
    "to": 37
  }, {
    "from": 37,
    "label": "declares",
    "to": 2
  }, {
    "from": 37,
    "label": "declares",
    "to": 9
  }, {
    "from": 37,
    "label": "declares",
    "to": 17
  }, {
    "from": 37,
    "label": "declares",
    "to": 22
  }, {
    "from": 37,
    "label": "declares",
    "to": 35
  }, {
    "from": 1,
    "label": "contains",
    "to": 54
  }, {
    "from": 1,
    "label": "contains",
    "to": 55
  }, {
    "from": 55,
    "label": "initializes",
    "to": 53
  }, {
    "from": 53,
    "label": "requires",
    "to": 56
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "download",
    "type": "module"
  }, {
    "id": 2,
    "text": "function receive (connection)\r\n\tconnection:settimeout(0)\r\n\tlocal s, status = connection:receive (2^10)\r\n\tif status == \"timeout\" then\r\n\t\tcoroutine.yield (connection)\r\n\tend\r\n\treturn s, status\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "connection:settimeout(0)",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "local s, status = connection:receive (2^10)",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "if status == \"timeout\" then\r\n\t\tcoroutine.yield (connection)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "coroutine.yield (connection)",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function download (host, file, outfile)\r\n\t--local f = assert (io.open (outfile, \"w\"))\r\n\tlocal c = assert (socket.connect (host, 80))\r\n\tc:send (\"GET \"..file..\" HTTP/1.0\\r\\n\\r\\n\")\r\n\twhile true do\r\n\t\tlocal s, status = receive (c)\r\n\t\t--f:write (s)\r\n\t\tif status == \"closed\" then\r\n\t\t\tbreak\r\n\t\tend\r\n\tend\r\n\tc:close()\r\n\t--f:close()\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "local c = assert (socket.connect (host, 80))",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "c:send (\"GET \"..file..\" HTTP/1.0\\r\\n\\r\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "while true do\r\n\t\tlocal s, status = receive (c)\r\n\t\t--f:write (s)\r\n\t\tif status == \"closed\" then\r\n\t\t\tbreak\r\n\t\tend\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 13,
    "text": "local s, status = receive (c)",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "if status == \"closed\" then\r\n\t\t\tbreak\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "c:close()",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function get (host, file, outfile)\r\n\tprint (string.format (\"Downloading %s from %s to %s\", file, host, outfile))\r\n\tlocal co = coroutine.create (function ()\r\n\t\treturn download (host, file, outfile)\r\n\tend)\r\n\ttable.insert (threads, co)\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "print (string.format (\"Downloading %s from %s to %s\", file, host, outfile))",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "local co = coroutine.create (function ()\r\n\t\treturn download (host, file, outfile)\r\n\tend)",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "table.insert (threads, co)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function dispatcher ()\r\n\twhile true do\r\n\t\tlocal n = table.getn (threads)\r\n\t\tif n == 0 then\r\n\t\t\tbreak\r\n\t\tend\r\n\t\tlocal connections = {}\r\n\t\tfor i = 1, n do\r\n\t\t\tlocal status, res = coroutine.resume (threads[i])\r\n\t\t\tif not res then\r\n\t\t\t\ttable.remove (threads, i)\r\n\t\t\t\tbreak\r\n\t\t\telse\r\n\t\t\t\ttable.insert (connections, res)\r\n\t\t\tend\r\n\t\tend\r\n\t\tif table.getn (connections) == n then\r\n\t\t\tsocket.select (connections)\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "while true do\r\n\t\tlocal n = table.getn (threads)\r\n\t\tif n == 0 then\r\n\t\t\tbreak\r\n\t\tend\r\n\t\tlocal connections = {}\r\n\t\tfor i = 1, n do\r\n\t\t\tlocal status, res = coroutine.resume (threads[i])\r\n\t\t\tif not res then\r\n\t\t\t\ttable.remove (threads, i)\r\n\t\t\t\tbreak\r\n\t\t\telse\r\n\t\t\t\ttable.insert (connections, res)\r\n\t\t\tend\r\n\t\tend\r\n\t\tif table.getn (connections) == n then\r\n\t\t\tsocket.select (connections)\r\n\t\tend\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 24,
    "text": "local n = table.getn (threads)",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "if n == 0 then\r\n\t\t\tbreak\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "local connections = {}",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "for i = 1, n do\r\n\t\t\tlocal status, res = coroutine.resume (threads[i])\r\n\t\t\tif not res then\r\n\t\t\t\ttable.remove (threads, i)\r\n\t\t\t\tbreak\r\n\t\t\telse\r\n\t\t\t\ttable.insert (connections, res)\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 28,
    "text": "local status, res = coroutine.resume (threads[i])",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "if not res then\r\n\t\t\t\ttable.remove (threads, i)\r\n\t\t\t\tbreak\r\n\t\t\telse\r\n\t\t\t\ttable.insert (connections, res)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "table.remove (threads, i)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "table.insert (connections, res)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "if table.getn (connections) == n then\r\n\t\t\tsocket.select (connections)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "socket.select (connections)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function ()\r\n\t\treturn download (host, file, outfile)\r\n\tend",
    "type": "function"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "",
    "type": "function container"
  }, {
    "id": 38,
    "text": "resume",
    "type": "global function"
  }, {
    "id": 39,
    "text": "print",
    "type": "global function"
  }, {
    "id": 40,
    "text": "yield",
    "type": "global function"
  }, {
    "id": 41,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 42,
    "text": "connect",
    "type": "global function"
  }, {
    "id": 43,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 44,
    "text": "getn",
    "type": "global function"
  }, {
    "id": 45,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 46,
    "text": "find",
    "type": "global function"
  }, {
    "id": 47,
    "text": "select",
    "type": "global function"
  }, {
    "id": 48,
    "text": "format",
    "type": "global function"
  }, {
    "id": 49,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 50,
    "text": "require",
    "type": "global function"
  }, {
    "id": 51,
    "text": "create",
    "type": "global function"
  }, {
    "id": 52,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 53,
    "text": "",
    "type": "global variable"
  }, {
    "id": 54,
    "text": "",
    "type": "variable container"
  }, {
    "id": 55,
    "text": "",
    "type": "require container"
  }, {
    "id": 56,
    "text": "luasocket",
    "type": "module"
  } ]
}