{
  "_filename": "stir.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/shake/src/shake/stir.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 11,
    "label": "has",
    "to": 9
  }, {
    "from": 11,
    "label": "has",
    "to": 9
  }, {
    "from": 11,
    "label": "has",
    "to": 9
  }, {
    "from": 11,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 9
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 21,
    "label": "has",
    "to": 26
  }, {
    "from": 17,
    "label": "has",
    "to": 9
  }, {
    "from": 17,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 9
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 9
  }, {
    "from": 31,
    "label": "has",
    "to": 9
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 9
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 35,
    "label": "has",
    "to": 39
  }, {
    "from": 35,
    "label": "has",
    "to": 40
  }, {
    "from": 35,
    "label": "has",
    "to": 41
  }, {
    "from": 35,
    "label": "has",
    "to": 42
  }, {
    "from": 35,
    "label": "has",
    "to": 43
  }, {
    "from": 35,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 35,
    "label": "has",
    "to": 48
  }, {
    "from": 35,
    "label": "has",
    "to": 9
  }, {
    "from": 35,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 9
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 53,
    "label": "has",
    "to": 56
  }, {
    "from": 53,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 57,
    "label": "has",
    "to": 60
  }, {
    "from": 53,
    "label": "has",
    "to": 9
  }, {
    "from": 53,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 62,
    "label": "has",
    "to": 65
  }, {
    "from": 62,
    "label": "has",
    "to": 9
  }, {
    "from": 62,
    "label": "has",
    "to": 9
  }, {
    "from": 62,
    "label": "has",
    "to": 66
  }, {
    "from": 2,
    "label": "calls",
    "to": 78
  }, {
    "from": 2,
    "label": "calls",
    "to": 81
  }, {
    "from": 2,
    "label": "calls",
    "to": 85
  }, {
    "from": 2,
    "label": "calls",
    "to": 85
  }, {
    "from": 67,
    "label": "calls",
    "to": 71
  }, {
    "from": 67,
    "label": "calls",
    "to": 71
  }, {
    "from": 67,
    "label": "calls",
    "to": 71
  }, {
    "from": 67,
    "label": "calls",
    "to": 71
  }, {
    "from": 67,
    "label": "calls",
    "to": 71
  }, {
    "from": 67,
    "label": "calls",
    "to": 71
  }, {
    "from": 67,
    "label": "calls",
    "to": 71
  }, {
    "from": 67,
    "label": "calls",
    "to": 71
  }, {
    "from": 53,
    "label": "calls",
    "to": 50
  }, {
    "from": 17,
    "label": "calls",
    "to": 28
  }, {
    "from": 2,
    "label": "calls",
    "to": 2
  }, {
    "from": 2,
    "label": "calls",
    "to": 2
  }, {
    "from": 67,
    "label": "calls",
    "to": 69
  }, {
    "from": 67,
    "label": "calls",
    "to": 76
  }, {
    "from": 67,
    "label": "calls",
    "to": 76
  }, {
    "from": 67,
    "label": "calls",
    "to": 76
  }, {
    "from": 67,
    "label": "calls",
    "to": 76
  }, {
    "from": 11,
    "label": "calls",
    "to": 79
  }, {
    "from": 17,
    "label": "calls",
    "to": 79
  }, {
    "from": 67,
    "label": "calls",
    "to": 84
  }, {
    "from": 67,
    "label": "calls",
    "to": 84
  }, {
    "from": 67,
    "label": "calls",
    "to": 84
  }, {
    "from": 67,
    "label": "calls",
    "to": 84
  }, {
    "from": 67,
    "label": "calls",
    "to": 77
  }, {
    "from": 67,
    "label": "calls",
    "to": 77
  }, {
    "from": 67,
    "label": "calls",
    "to": 77
  }, {
    "from": 17,
    "label": "calls",
    "to": 73
  }, {
    "from": 67,
    "label": "calls",
    "to": 74
  }, {
    "from": 67,
    "label": "calls",
    "to": 74
  }, {
    "from": 67,
    "label": "calls",
    "to": 74
  }, {
    "from": 67,
    "label": "calls",
    "to": 74
  }, {
    "from": 67,
    "label": "calls",
    "to": 74
  }, {
    "from": 67,
    "label": "calls",
    "to": 74
  }, {
    "from": 35,
    "label": "calls",
    "to": 72
  }, {
    "from": 35,
    "label": "calls",
    "to": 72
  }, {
    "from": 35,
    "label": "calls",
    "to": 72
  }, {
    "from": 35,
    "label": "calls",
    "to": 72
  }, {
    "from": 11,
    "label": "calls",
    "to": 11
  }, {
    "from": 67,
    "label": "calls",
    "to": 11
  }, {
    "from": 67,
    "label": "calls",
    "to": 70
  }, {
    "from": 67,
    "label": "calls",
    "to": 70
  }, {
    "from": 67,
    "label": "calls",
    "to": 80
  }, {
    "from": 67,
    "label": "calls",
    "to": 17
  }, {
    "from": 2,
    "label": "calls",
    "to": 83
  }, {
    "from": 2,
    "label": "calls",
    "to": 83
  }, {
    "from": 11,
    "label": "calls",
    "to": 83
  }, {
    "from": 11,
    "label": "calls",
    "to": 83
  }, {
    "from": 53,
    "label": "calls",
    "to": 35
  }, {
    "from": 67,
    "label": "calls",
    "to": 75
  }, {
    "from": 67,
    "label": "calls",
    "to": 75
  }, {
    "from": 2,
    "label": "calls",
    "to": 82
  }, {
    "from": 1,
    "label": "contains",
    "to": 67
  }, {
    "from": 67,
    "label": "declares",
    "to": 2
  }, {
    "from": 67,
    "label": "declares",
    "to": 11
  }, {
    "from": 67,
    "label": "declares",
    "to": 17
  }, {
    "from": 67,
    "label": "declares",
    "to": 28
  }, {
    "from": 67,
    "label": "declares",
    "to": 30
  }, {
    "from": 67,
    "label": "declares",
    "to": 31
  }, {
    "from": 67,
    "label": "declares",
    "to": 33
  }, {
    "from": 67,
    "label": "declares",
    "to": 35
  }, {
    "from": 67,
    "label": "declares",
    "to": 50
  }, {
    "from": 67,
    "label": "declares",
    "to": 53
  }, {
    "from": 67,
    "label": "declares",
    "to": 62
  }, {
    "from": 86,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 87
  }, {
    "from": 1,
    "label": "contains",
    "to": 88
  }, {
    "from": 87,
    "label": "initializes",
    "to": 89
  }, {
    "from": 89,
    "label": "assigns",
    "to": 90
  }, {
    "from": 87,
    "label": "initializes",
    "to": 91
  }, {
    "from": 91,
    "label": "assigns",
    "to": 92
  }, {
    "from": 87,
    "label": "initializes",
    "to": 93
  }, {
    "from": 93,
    "label": "assigns",
    "to": 94
  }, {
    "from": 87,
    "label": "initializes",
    "to": 95
  }, {
    "from": 95,
    "label": "assigns",
    "to": 96
  }, {
    "from": 87,
    "label": "initializes",
    "to": 97
  }, {
    "from": 97,
    "label": "assigns",
    "to": 98
  }, {
    "from": 87,
    "label": "initializes",
    "to": 99
  }, {
    "from": 99,
    "label": "assigns",
    "to": 100
  }, {
    "from": 87,
    "label": "initializes",
    "to": 101
  }, {
    "from": 101,
    "label": "assigns",
    "to": 102
  }, {
    "from": 87,
    "label": "initializes",
    "to": 103
  }, {
    "from": 103,
    "label": "assigns",
    "to": 104
  }, {
    "from": 87,
    "label": "initializes",
    "to": 105
  }, {
    "from": 105,
    "label": "assigns",
    "to": 106
  }, {
    "from": 87,
    "label": "initializes",
    "to": 107
  }, {
    "from": 107,
    "label": "assigns",
    "to": 108
  }, {
    "from": 87,
    "label": "initializes",
    "to": 109
  }, {
    "from": 109,
    "label": "assigns",
    "to": 110
  }, {
    "from": 87,
    "label": "initializes",
    "to": 111
  }, {
    "from": 111,
    "label": "assigns",
    "to": 112
  }, {
    "from": 112,
    "label": "assigns",
    "to": 113
  }, {
    "from": 113,
    "label": "assigns",
    "to": 114
  }, {
    "from": 112,
    "label": "assigns",
    "to": 115
  }, {
    "from": 115,
    "label": "assigns",
    "to": 116
  }, {
    "from": 112,
    "label": "assigns",
    "to": 117
  }, {
    "from": 117,
    "label": "assigns",
    "to": 118
  }, {
    "from": 112,
    "label": "assigns",
    "to": 119
  }, {
    "from": 119,
    "label": "assigns",
    "to": 120
  }, {
    "from": 112,
    "label": "assigns",
    "to": 121
  }, {
    "from": 121,
    "label": "assigns",
    "to": 122
  }, {
    "from": 112,
    "label": "assigns",
    "to": 123
  }, {
    "from": 123,
    "label": "assigns",
    "to": 124
  }, {
    "from": 112,
    "label": "assigns",
    "to": 125
  }, {
    "from": 125,
    "label": "assigns",
    "to": 126
  }, {
    "from": 112,
    "label": "assigns",
    "to": 127
  }, {
    "from": 127,
    "label": "assigns",
    "to": 128
  }, {
    "from": 112,
    "label": "assigns",
    "to": 129
  }, {
    "from": 129,
    "label": "assigns",
    "to": 130
  }, {
    "from": 112,
    "label": "assigns",
    "to": 131
  }, {
    "from": 131,
    "label": "assigns",
    "to": 132
  }, {
    "from": 112,
    "label": "assigns",
    "to": 133
  }, {
    "from": 133,
    "label": "assigns",
    "to": 134
  }, {
    "from": 112,
    "label": "assigns",
    "to": 135
  }, {
    "from": 135,
    "label": "assigns",
    "to": 136
  }, {
    "from": 112,
    "label": "assigns",
    "to": 137
  }, {
    "from": 137,
    "label": "assigns",
    "to": 138
  }, {
    "from": 112,
    "label": "assigns",
    "to": 139
  }, {
    "from": 139,
    "label": "assigns",
    "to": 140
  }, {
    "from": 112,
    "label": "assigns",
    "to": 141
  }, {
    "from": 141,
    "label": "assigns",
    "to": 142
  }, {
    "from": 112,
    "label": "assigns",
    "to": 143
  }, {
    "from": 143,
    "label": "assigns",
    "to": 144
  }, {
    "from": 112,
    "label": "assigns",
    "to": 145
  }, {
    "from": 145,
    "label": "assigns",
    "to": 146
  }, {
    "from": 112,
    "label": "assigns",
    "to": 147
  }, {
    "from": 147,
    "label": "assigns",
    "to": 148
  }, {
    "from": 87,
    "label": "initializes",
    "to": 149
  }, {
    "from": 149,
    "label": "assigns",
    "to": 150
  }, {
    "from": 87,
    "label": "initializes",
    "to": 151
  }, {
    "from": 151,
    "label": "assigns",
    "to": 152
  }, {
    "from": 87,
    "label": "initializes",
    "to": 153
  }, {
    "from": 153,
    "label": "assigns",
    "to": 154
  }, {
    "from": 87,
    "label": "initializes",
    "to": 155
  }, {
    "from": 155,
    "label": "assigns",
    "to": 156
  }, {
    "from": 87,
    "label": "initializes",
    "to": 157
  }, {
    "from": 157,
    "label": "assigns",
    "to": 158
  }, {
    "from": 87,
    "label": "initializes",
    "to": 159
  }, {
    "from": 159,
    "label": "assigns",
    "to": 160
  }, {
    "from": 87,
    "label": "initializes",
    "to": 161
  }, {
    "from": 161,
    "label": "assigns",
    "to": 162
  }, {
    "from": 87,
    "label": "initializes",
    "to": 163
  }, {
    "from": 163,
    "label": "assigns",
    "to": 164
  }, {
    "from": 87,
    "label": "initializes",
    "to": 165
  }, {
    "from": 165,
    "label": "assigns",
    "to": 166
  }, {
    "from": 87,
    "label": "initializes",
    "to": 167
  }, {
    "from": 167,
    "label": "assigns",
    "to": 168
  }, {
    "from": 87,
    "label": "initializes",
    "to": 169
  }, {
    "from": 169,
    "label": "assigns",
    "to": 170
  }, {
    "from": 88,
    "label": "initializes",
    "to": 171
  }, {
    "from": 171,
    "label": "requires",
    "to": 68
  }, {
    "from": 88,
    "label": "initializes",
    "to": 172
  }, {
    "from": 172,
    "label": "requires",
    "to": 173
  }, {
    "from": 88,
    "label": "initializes",
    "to": 174
  }, {
    "from": 174,
    "label": "requires",
    "to": 175
  }, {
    "from": 88,
    "label": "initializes",
    "to": 176
  }, {
    "from": 176,
    "label": "requires",
    "to": 177
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "stir",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function list2string(t, level)\r\n  level = level or 0\r\n  local indent = string.rep('  ', level)\r\n  \r\n  if type(t) == 'string' then\r\n    return string.format('%q', tostring(t))\r\n    --return scanner.text2string(t)\r\n  elseif type(t) ~= 'table' then\r\n    return tostring(t)\r\n  else\r\n    local str = '{'\r\n    \r\n    for k, v in pairs(t) do\r\n      str = str..'\\n'..indent..'  ['..list2string(k)..'] = '\r\n        ..list2string(v, level + 1)\r\n    end\r\n    \r\n    return str..'\\n'..indent..'}'\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "level = level or 0",
    "type": "statement:assign"
  }, {
    "id": 4,
    "text": "local indent = string.rep('  ', level)",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "if type(t) == 'string' then\r\n    return string.format('%q', tostring(t))\r\n    --return scanner.text2string(t)\r\n  elseif type(t) ~= 'table' then\r\n    return tostring(t)\r\n  else\r\n    local str = '{'\r\n    \r\n    for k, v in pairs(t) do\r\n      str = str..'\\n'..indent..'  ['..list2string(k)..'] = '\r\n        ..list2string(v, level + 1)\r\n    end\r\n    \r\n    return str..'\\n'..indent..'}'\r\n  end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "local str = '{'",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "for k, v in pairs(t) do\r\n      str = str..'\\n'..indent..'  ['..list2string(k)..'] = '\r\n        ..list2string(v, level + 1)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 8,
    "text": "str = str..'\\n'..indent..'  ['..list2string(k)..'] = '\r\n        ..list2string(v, level + 1)",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "local function removeNewline(comment)\r\n  if type(comment) == 'string' then -- it's a single comment\r\n    if comment:sub(-1, -1) == '\\n' then\r\n      return comment:sub(1, -2)\r\n    else\r\n      return comment\r\n    end\r\n  elseif type(comment) == 'table' then -- it's a list of comments\r\n    for i, v in ipairs(comment) do\r\n      comment[i] = removeNewline(v) \r\n    end\r\n    \r\n    return comment\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "if type(comment) == 'string' then -- it's a single comment\r\n    if comment:sub(-1, -1) == '\\n' then\r\n      return comment:sub(1, -2)\r\n    else\r\n      return comment\r\n    end\r\n  elseif type(comment) == 'table' then -- it's a list of comments\r\n    for i, v in ipairs(comment) do\r\n      comment[i] = removeNewline(v) \r\n    end\r\n    \r\n    return comment\r\n  end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "if comment:sub(-1, -1) == '\\n' then\r\n      return comment:sub(1, -2)\r\n    else\r\n      return comment\r\n    end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "for i, v in ipairs(comment) do\r\n      comment[i] = removeNewline(v) \r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 15,
    "text": "comment[i] = removeNewline(v)",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "local function getOuterOp(list)\r\n  local stack = {}\r\n  \r\n  local function makeNode(index, node)\r\n    return { index = index, node = node }\r\n  end\r\n  \r\n  for i, v in ipairs(list) do\r\n    if ops[v] then -- it's an operator, and in this case, binary\r\n      local top, op = stack[#stack], ops[v]\r\n      while top \r\n        and ((op.right and op.precedence < ops[top.node].precedence)\r\n          or (op.left and op.precedence <= ops[top.node].precedence)) do\r\n        \r\n        table.remove(stack)\r\n        \r\n        top = stack[#stack]\r\n      end\r\n      \r\n      stack[#stack + 1] = makeNode(i, v)\r\n    end\r\n  end\r\n  \r\n  -- getting the outmost operator's index\r\n  return stack[1] and stack[1].index\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "local stack = {}",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "local function makeNode(index, node)\r\n    return { index = index, node = node }\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 20,
    "text": "for i, v in ipairs(list) do\r\n    if ops[v] then -- it's an operator, and in this case, binary\r\n      local top, op = stack[#stack], ops[v]\r\n      while top \r\n        and ((op.right and op.precedence < ops[top.node].precedence)\r\n          or (op.left and op.precedence <= ops[top.node].precedence)) do\r\n        \r\n        table.remove(stack)\r\n        \r\n        top = stack[#stack]\r\n      end\r\n      \r\n      stack[#stack + 1] = makeNode(i, v)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 21,
    "text": "if ops[v] then -- it's an operator, and in this case, binary\r\n      local top, op = stack[#stack], ops[v]\r\n      while top \r\n        and ((op.right and op.precedence < ops[top.node].precedence)\r\n          or (op.left and op.precedence <= ops[top.node].precedence)) do\r\n        \r\n        table.remove(stack)\r\n        \r\n        top = stack[#stack]\r\n      end\r\n      \r\n      stack[#stack + 1] = makeNode(i, v)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "local top, op = stack[#stack], ops[v]",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "while top \r\n        and ((op.right and op.precedence < ops[top.node].precedence)\r\n          or (op.left and op.precedence <= ops[top.node].precedence)) do\r\n        \r\n        table.remove(stack)\r\n        \r\n        top = stack[#stack]\r\n      end",
    "type": "statement:while"
  }, {
    "id": 24,
    "text": "table.remove(stack)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "top = stack[#stack]",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "stack[#stack + 1] = makeNode(i, v)",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "local function makeNode(index, node)\r\n    return { index = index, node = node }\r\n  end",
    "type": "function"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function() return nil end",
    "type": "function"
  }, {
    "id": 31,
    "text": "function (exp1, op, exp2)\r\n  return { exp1 = exp1, op = op, exp2 = exp2 }\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function (comment, start, line, msg, finish)\r\n              return {\r\n                start = start,\r\n                comment = (comment ~= nil) and removeNewline(comment) or nil,\r\n                exp = line,\r\n                msg = msg,\r\n                finish = finish,\r\n              }\r\n            end",
    "type": "function"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "local function buildNewAssert(info, assertName, errorName)\r\n  local exp1, op, exp2 = info.exp.exp1, info.exp.op, info.exp.exp2\r\n  local comment, msg, text = info.comment, info.msg, info.text\r\n  \r\n  local newassert = ''\r\n  \r\n  local str1 = scanner.text2string(exp1)\r\n  local str2 = (exp2 == nil) and 'nil' or scanner.text2string(exp2)\r\n  local com = (comment == nil) and 'nil' or scanner.text2string(comment)\r\n  local textStr = scanner.text2string(text)\r\n  local func\r\n  if not op then\r\n    func = [[(function () assert_not_nil(a) end)]]\r\n  elseif op == '==' then\r\n    func = [[(function () assert_equal(a, b) end)]]\r\n  elseif op == '~=' then\r\n    func = [[(function () assert_not_equal(a, b) end)]]\r\n  end\r\n  local stir = [[xpcall((function () local a = ]] .. exp1 .. [[; local b = ]] ..\r\n      (exp2 or 'nil') .. [[; return ]]..newassert..assertName..'(a'\r\n    ..', '..(op and '\"'..op..'\"' or 'nil')\r\n    ..', b '\r\n    ..', '..(msg or 'nil')\r\n    ..', '..str1\r\n    ..', '..str2\r\n    ..', '..com\r\n    ..', '..textStr\r\n    ..', '..func\r\n  ..[[) end), (function (e) ]]..newassert..errorName..[[(]] \r\n    ..str1\r\n    ..', '..(op and '\"'..op..'\"' or 'nil')\r\n    ..', '..str2\r\n    ..', '..(msg or 'nil')\r\n    ..', '..com\r\n    ..', '..textStr .. [[, debug.traceback()) end))]]\r\n  --print(stir)\r\n  return stir\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "local exp1, op, exp2 = info.exp.exp1, info.exp.op, info.exp.exp2",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "local comment, msg, text = info.comment, info.msg, info.text",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "local newassert = ''",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "local str1 = scanner.text2string(exp1)",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "local str2 = (exp2 == nil) and 'nil' or scanner.text2string(exp2)",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "local com = (comment == nil) and 'nil' or scanner.text2string(comment)",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "local textStr = scanner.text2string(text)",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "local func",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "if not op then\r\n    func = [[(function () assert_not_nil(a) end)]]\r\n  elseif op == '==' then\r\n    func = [[(function () assert_equal(a, b) end)]]\r\n  elseif op == '~=' then\r\n    func = [[(function () assert_not_equal(a, b) end)]]\r\n  end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "func = [[(function () assert_not_nil(a) end)]]",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "func = [[(function () assert_equal(a, b) end)]]",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "func = [[(function () assert_not_equal(a, b) end)]]",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "local stir = [[xpcall((function () local a = ]] .. exp1 .. [[; local b = ]] ..\r\n      (exp2 or 'nil') .. [[; return ]]..newassert..assertName..'(a'\r\n    ..', '..(op and '\"'..op..'\"' or 'nil')\r\n    ..', b '\r\n    ..', '..(msg or 'nil')\r\n    ..', '..str1\r\n    ..', '..str2\r\n    ..', '..com\r\n    ..', '..textStr\r\n    ..', '..func\r\n  ..[[) end), (function (e) ]]..newassert..errorName..[[(]] \r\n    ..str1\r\n    ..', '..(op and '\"'..op..'\"' or 'nil')\r\n    ..', '..str2\r\n    ..', '..(msg or 'nil')\r\n    ..', '..com\r\n    ..', '..textStr .. [[, debug.traceback()) end))]]",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "local function sub(str, new_str, i, j)\r\n  i, j = i or 1, j or #str\r\n  \r\n  return str:sub(1, i - 1)..new_str..str:sub(j)\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "i, j = i or 1, j or #str",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function stir(input, assertName, errorName)\r\n  assertName = assertName or '___STIR_assert'\r\n  errorName = errorName or '___STIR_error'\r\n  local asserts = ALL:match(input)\r\n  \r\n  for i = #asserts, 1, -1 do\r\n    local v = asserts[i]\r\n    \r\n    v.text = input:sub(v.start, v.finish)\r\n    input = sub(input, buildNewAssert(v, assertName, errorName), v.start, v.finish)\r\n  end\r\n  \r\n  return input\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "assertName = assertName or '___STIR_assert'",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "errorName = errorName or '___STIR_error'",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "local asserts = ALL:match(input)",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "for i = #asserts, 1, -1 do\r\n    local v = asserts[i]\r\n    \r\n    v.text = input:sub(v.start, v.finish)\r\n    input = sub(input, buildNewAssert(v, assertName, errorName), v.start, v.finish)\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 58,
    "text": "local v = asserts[i]",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "v.text = input:sub(v.start, v.finish)",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "input = sub(input, buildNewAssert(v, assertName, errorName), v.start, v.finish)",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "function (...)\r\n      local infix = { ... }\r\n      local outerOp = getOuterOp(infix)\r\n      \r\n      if OP:match(infix[outerOp] or '') then\r\n        -- return the left side, the operator, and the right side separately\r\n        return table.concat(infix, ' ', 1, outerOp - 1), \r\n               infix[outerOp],\r\n               table.concat(infix, ' ', outerOp + 1)\r\n      else -- return the whole expression\r\n        return table.concat(infix, ' ')\r\n      end\r\n    end",
    "type": "function"
  }, {
    "id": 63,
    "text": "local infix = { ... }",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "local outerOp = getOuterOp(infix)",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "if OP:match(infix[outerOp] or '') then\r\n        -- return the left side, the operator, and the right side separately\r\n        return table.concat(infix, ' ', 1, outerOp - 1), \r\n               infix[outerOp],\r\n               table.concat(infix, ' ', outerOp + 1)\r\n      else -- return the whole expression\r\n        return table.concat(infix, ' ')\r\n      end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "",
    "type": "function container"
  }, {
    "id": 68,
    "text": "lpeg",
    "type": "module"
  }, {
    "id": 69,
    "text": "Ct",
    "type": "global function"
  }, {
    "id": 70,
    "text": "apply",
    "type": "global function"
  }, {
    "id": 71,
    "text": "P",
    "type": "global function"
  }, {
    "id": 72,
    "text": "text2string",
    "type": "global function"
  }, {
    "id": 73,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 74,
    "text": "C",
    "type": "global function"
  }, {
    "id": 75,
    "text": "Cp",
    "type": "global function"
  }, {
    "id": 76,
    "text": "V",
    "type": "global function"
  }, {
    "id": 77,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 78,
    "text": "format",
    "type": "global function"
  }, {
    "id": 79,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 80,
    "text": "module",
    "type": "global function"
  }, {
    "id": 81,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 82,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 83,
    "text": "type",
    "type": "global function"
  }, {
    "id": 84,
    "text": "require",
    "type": "global function"
  }, {
    "id": 85,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 86,
    "text": "",
    "type": "global variable"
  }, {
    "id": 87,
    "text": "",
    "type": "variable container"
  }, {
    "id": 88,
    "text": "",
    "type": "require container"
  }, {
    "id": 89,
    "text": "",
    "type": "local variable"
  }, {
    "id": 90,
    "text": "",
    "type": "n/a"
  }, {
    "id": 91,
    "text": "",
    "type": "local variable"
  }, {
    "id": 92,
    "text": "",
    "type": "n/a"
  }, {
    "id": 93,
    "text": "",
    "type": "local variable"
  }, {
    "id": 94,
    "text": "",
    "type": "n/a"
  }, {
    "id": 95,
    "text": "",
    "type": "local variable"
  }, {
    "id": 96,
    "text": "",
    "type": "n/a"
  }, {
    "id": 97,
    "text": "",
    "type": "local variable"
  }, {
    "id": 98,
    "text": "",
    "type": "n/a"
  }, {
    "id": 99,
    "text": "",
    "type": "local variable"
  }, {
    "id": 100,
    "text": "",
    "type": "n/a"
  }, {
    "id": 101,
    "text": "",
    "type": "local variable"
  }, {
    "id": 102,
    "text": "",
    "type": "n/a"
  }, {
    "id": 103,
    "text": "",
    "type": "local variable"
  }, {
    "id": 104,
    "text": "",
    "type": "n/a"
  }, {
    "id": 105,
    "text": "",
    "type": "local variable"
  }, {
    "id": 106,
    "text": "",
    "type": "n/a"
  }, {
    "id": 107,
    "text": "",
    "type": "local variable"
  }, {
    "id": 108,
    "text": "",
    "type": "n/a"
  }, {
    "id": 109,
    "text": "",
    "type": "local variable"
  }, {
    "id": 110,
    "text": "",
    "type": "n/a"
  }, {
    "id": 111,
    "text": "",
    "type": "local variable"
  }, {
    "id": 112,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 113,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 114,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 115,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 116,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 117,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 118,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 119,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 120,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 121,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 122,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 123,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 124,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 125,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 126,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 127,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 128,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 129,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 130,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 131,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 132,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 133,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 134,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 135,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 136,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 137,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 138,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 139,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 140,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 141,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 142,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 143,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 144,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 145,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 146,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 147,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 148,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 149,
    "text": "",
    "type": "local variable"
  }, {
    "id": 150,
    "text": "",
    "type": "n/a"
  }, {
    "id": 151,
    "text": "",
    "type": "local variable"
  }, {
    "id": 152,
    "text": "",
    "type": "n/a"
  }, {
    "id": 153,
    "text": "",
    "type": "local variable"
  }, {
    "id": 154,
    "text": "",
    "type": "n/a"
  }, {
    "id": 155,
    "text": "",
    "type": "local variable"
  }, {
    "id": 156,
    "text": "",
    "type": "n/a"
  }, {
    "id": 157,
    "text": "",
    "type": "local variable"
  }, {
    "id": 158,
    "text": "",
    "type": "n/a"
  }, {
    "id": 159,
    "text": "",
    "type": "local variable"
  }, {
    "id": 160,
    "text": "",
    "type": "n/a"
  }, {
    "id": 161,
    "text": "",
    "type": "local variable"
  }, {
    "id": 162,
    "text": "",
    "type": "n/a"
  }, {
    "id": 163,
    "text": "",
    "type": "local variable"
  }, {
    "id": 164,
    "text": "",
    "type": "n/a"
  }, {
    "id": 165,
    "text": "",
    "type": "local variable"
  }, {
    "id": 166,
    "text": "",
    "type": "n/a"
  }, {
    "id": 167,
    "text": "",
    "type": "local variable"
  }, {
    "id": 168,
    "text": "",
    "type": "n/a"
  }, {
    "id": 169,
    "text": "",
    "type": "local variable"
  }, {
    "id": 170,
    "text": "",
    "type": "n/a"
  }, {
    "id": 171,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 172,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 173,
    "text": "scanner",
    "type": "module"
  }, {
    "id": 174,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 175,
    "text": "parser",
    "type": "module"
  }, {
    "id": 176,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 177,
    "text": "grammar",
    "type": "module"
  } ]
}