{
  "_filename": "shake.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/shake/src/shake/shake.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "calls",
    "to": 191
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 9
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 9
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 13,
    "label": "has",
    "to": 17
  }, {
    "from": 13,
    "label": "has",
    "to": 18
  }, {
    "from": 13,
    "label": "has",
    "to": 19
  }, {
    "from": 13,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 13,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 13,
    "label": "has",
    "to": 29
  }, {
    "from": 13,
    "label": "has",
    "to": 30
  }, {
    "from": 13,
    "label": "has",
    "to": 31
  }, {
    "from": 13,
    "label": "has",
    "to": 32
  }, {
    "from": 13,
    "label": "has",
    "to": 33
  }, {
    "from": 13,
    "label": "has",
    "to": 34
  }, {
    "from": 13,
    "label": "has",
    "to": 35
  }, {
    "from": 13,
    "label": "has",
    "to": 36
  }, {
    "from": 13,
    "label": "has",
    "to": 37
  }, {
    "from": 13,
    "label": "has",
    "to": 9
  }, {
    "from": 13,
    "label": "has",
    "to": 38
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 40,
    "label": "has",
    "to": 9
  }, {
    "from": 40,
    "label": "has",
    "to": 9
  }, {
    "from": 40,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 47,
    "label": "has",
    "to": 9
  }, {
    "from": 47,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 52,
    "label": "has",
    "to": 56
  }, {
    "from": 52,
    "label": "has",
    "to": 57
  }, {
    "from": 52,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 58,
    "label": "has",
    "to": 61
  }, {
    "from": 58,
    "label": "has",
    "to": 62
  }, {
    "from": 58,
    "label": "has",
    "to": 63
  }, {
    "from": 58,
    "label": "has",
    "to": 64
  }, {
    "from": 58,
    "label": "has",
    "to": 65
  }, {
    "from": 58,
    "label": "has",
    "to": 66
  }, {
    "from": 58,
    "label": "has",
    "to": 67
  }, {
    "from": 58,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 9
  }, {
    "from": 58,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 9
  }, {
    "from": 58,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 9
  }, {
    "from": 58,
    "label": "has",
    "to": 71
  }, {
    "from": 58,
    "label": "has",
    "to": 72
  }, {
    "from": 58,
    "label": "has",
    "to": 73
  }, {
    "from": 58,
    "label": "has",
    "to": 74
  }, {
    "from": 58,
    "label": "has",
    "to": 16
  }, {
    "from": 58,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 16
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 77,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 77,
    "label": "has",
    "to": 82
  }, {
    "from": 75,
    "label": "has",
    "to": 73
  }, {
    "from": 58,
    "label": "has",
    "to": 83
  }, {
    "from": 58,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 9
  }, {
    "from": 58,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 85,
    "label": "has",
    "to": 61
  }, {
    "from": 58,
    "label": "has",
    "to": 88
  }, {
    "from": 58,
    "label": "has",
    "to": 89
  }, {
    "from": 58,
    "label": "has",
    "to": 90
  }, {
    "from": 58,
    "label": "has",
    "to": 91
  }, {
    "from": 58,
    "label": "has",
    "to": 92
  }, {
    "from": 58,
    "label": "has",
    "to": 93
  }, {
    "from": 58,
    "label": "has",
    "to": 94
  }, {
    "from": 58,
    "label": "has",
    "to": 95
  }, {
    "from": 58,
    "label": "has",
    "to": 96
  }, {
    "from": 52,
    "label": "has",
    "to": 9
  }, {
    "from": 52,
    "label": "has",
    "to": 97
  }, {
    "from": 98,
    "label": "has",
    "to": 9
  }, {
    "from": 99,
    "label": "has",
    "to": 9
  }, {
    "from": 100,
    "label": "has",
    "to": 9
  }, {
    "from": 101,
    "label": "has",
    "to": 76
  }, {
    "from": 101,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 16
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 77,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 77,
    "label": "has",
    "to": 82
  }, {
    "from": 101,
    "label": "has",
    "to": 73
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 9
  }, {
    "from": 103,
    "label": "has",
    "to": 9
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 106,
    "label": "has",
    "to": 56
  }, {
    "from": 106,
    "label": "has",
    "to": 108
  }, {
    "from": 106,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 110,
    "label": "has",
    "to": 112
  }, {
    "from": 110,
    "label": "has",
    "to": 113
  }, {
    "from": 110,
    "label": "has",
    "to": 112
  }, {
    "from": 110,
    "label": "has",
    "to": 114
  }, {
    "from": 110,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 112
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 116,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 116,
    "label": "has",
    "to": 121
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 122,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 122,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 110,
    "label": "has",
    "to": 129
  }, {
    "from": 106,
    "label": "has",
    "to": 130
  }, {
    "from": 106,
    "label": "has",
    "to": 112
  }, {
    "from": 106,
    "label": "has",
    "to": 131
  }, {
    "from": 106,
    "label": "has",
    "to": 132
  }, {
    "from": 106,
    "label": "has",
    "to": 133
  }, {
    "from": 106,
    "label": "has",
    "to": 112
  }, {
    "from": 106,
    "label": "has",
    "to": 9
  }, {
    "from": 106,
    "label": "has",
    "to": 134
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 135,
    "label": "has",
    "to": 137
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 135,
    "label": "has",
    "to": 9
  }, {
    "from": 135,
    "label": "has",
    "to": 139
  }, {
    "from": 140,
    "label": "has",
    "to": 9
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 142,
    "label": "has",
    "to": 9
  }, {
    "from": 142,
    "label": "has",
    "to": 144
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 142,
    "label": "has",
    "to": 146
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 146,
    "label": "has",
    "to": 148
  }, {
    "from": 146,
    "label": "has",
    "to": 149
  }, {
    "from": 142,
    "label": "has",
    "to": 150
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 151,
    "label": "has",
    "to": 153
  }, {
    "from": 142,
    "label": "has",
    "to": 154
  }, {
    "from": 142,
    "label": "has",
    "to": 155
  }, {
    "from": 142,
    "label": "has",
    "to": 156
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 157,
    "label": "has",
    "to": 159
  }, {
    "from": 142,
    "label": "has",
    "to": 160
  }, {
    "from": 160,
    "label": "has",
    "to": 161
  }, {
    "from": 142,
    "label": "has",
    "to": 162
  }, {
    "from": 163,
    "label": "has",
    "to": 164
  }, {
    "from": 163,
    "label": "has",
    "to": 54
  }, {
    "from": 163,
    "label": "has",
    "to": 9
  }, {
    "from": 163,
    "label": "has",
    "to": 165
  }, {
    "from": 166,
    "label": "has",
    "to": 41
  }, {
    "from": 166,
    "label": "has",
    "to": 42
  }, {
    "from": 166,
    "label": "has",
    "to": 167
  }, {
    "from": 167,
    "label": "has",
    "to": 44
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 166,
    "label": "has",
    "to": 9
  }, {
    "from": 166,
    "label": "has",
    "to": 9
  }, {
    "from": 166,
    "label": "has",
    "to": 169
  }, {
    "from": 170,
    "label": "has",
    "to": 171
  }, {
    "from": 170,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 172,
    "label": "has",
    "to": 62
  }, {
    "from": 172,
    "label": "has",
    "to": 63
  }, {
    "from": 172,
    "label": "has",
    "to": 64
  }, {
    "from": 172,
    "label": "has",
    "to": 174
  }, {
    "from": 172,
    "label": "has",
    "to": 175
  }, {
    "from": 172,
    "label": "has",
    "to": 176
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 177,
    "label": "has",
    "to": 178
  }, {
    "from": 177,
    "label": "has",
    "to": 148
  }, {
    "from": 177,
    "label": "has",
    "to": 79
  }, {
    "from": 177,
    "label": "has",
    "to": 179
  }, {
    "from": 177,
    "label": "has",
    "to": 180
  }, {
    "from": 180,
    "label": "has",
    "to": 181
  }, {
    "from": 180,
    "label": "has",
    "to": 182
  }, {
    "from": 182,
    "label": "has",
    "to": 183
  }, {
    "from": 177,
    "label": "has",
    "to": 184
  }, {
    "from": 176,
    "label": "has",
    "to": 185
  }, {
    "from": 172,
    "label": "has",
    "to": 83
  }, {
    "from": 172,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 9
  }, {
    "from": 172,
    "label": "has",
    "to": 186
  }, {
    "from": 186,
    "label": "has",
    "to": 187
  }, {
    "from": 172,
    "label": "has",
    "to": 94
  }, {
    "from": 172,
    "label": "has",
    "to": 95
  }, {
    "from": 172,
    "label": "has",
    "to": 96
  }, {
    "from": 170,
    "label": "has",
    "to": 188
  }, {
    "from": 189,
    "label": "has",
    "to": 177
  }, {
    "from": 177,
    "label": "has",
    "to": 178
  }, {
    "from": 177,
    "label": "has",
    "to": 148
  }, {
    "from": 177,
    "label": "has",
    "to": 79
  }, {
    "from": 177,
    "label": "has",
    "to": 179
  }, {
    "from": 177,
    "label": "has",
    "to": 180
  }, {
    "from": 180,
    "label": "has",
    "to": 181
  }, {
    "from": 180,
    "label": "has",
    "to": 182
  }, {
    "from": 182,
    "label": "has",
    "to": 183
  }, {
    "from": 177,
    "label": "has",
    "to": 184
  }, {
    "from": 189,
    "label": "has",
    "to": 185
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 191,
    "label": "has",
    "to": 192
  }, {
    "from": 191,
    "label": "has",
    "to": 193
  }, {
    "from": 191,
    "label": "has",
    "to": 9
  }, {
    "from": 191,
    "label": "has",
    "to": 194
  }, {
    "from": 195,
    "label": "has",
    "to": 196
  }, {
    "from": 195,
    "label": "has",
    "to": 197
  }, {
    "from": 198,
    "label": "has",
    "to": 199
  }, {
    "from": 198,
    "label": "has",
    "to": 9
  }, {
    "from": 198,
    "label": "has",
    "to": 200
  }, {
    "from": 198,
    "label": "has",
    "to": 201
  }, {
    "from": 198,
    "label": "has",
    "to": 202
  }, {
    "from": 202,
    "label": "has",
    "to": 9
  }, {
    "from": 198,
    "label": "has",
    "to": 203
  }, {
    "from": 198,
    "label": "has",
    "to": 204
  }, {
    "from": 198,
    "label": "has",
    "to": 205
  }, {
    "from": 198,
    "label": "has",
    "to": 9
  }, {
    "from": 198,
    "label": "has",
    "to": 206
  }, {
    "from": 207,
    "label": "has",
    "to": 9
  }, {
    "from": 208,
    "label": "has",
    "to": 9
  }, {
    "from": 209,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 209,
    "label": "has",
    "to": 17
  }, {
    "from": 209,
    "label": "has",
    "to": 18
  }, {
    "from": 209,
    "label": "has",
    "to": 19
  }, {
    "from": 209,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 209,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 209,
    "label": "has",
    "to": 29
  }, {
    "from": 209,
    "label": "has",
    "to": 30
  }, {
    "from": 209,
    "label": "has",
    "to": 31
  }, {
    "from": 209,
    "label": "has",
    "to": 32
  }, {
    "from": 209,
    "label": "has",
    "to": 33
  }, {
    "from": 209,
    "label": "has",
    "to": 34
  }, {
    "from": 209,
    "label": "has",
    "to": 35
  }, {
    "from": 209,
    "label": "has",
    "to": 36
  }, {
    "from": 209,
    "label": "has",
    "to": 37
  }, {
    "from": 209,
    "label": "has",
    "to": 9
  }, {
    "from": 209,
    "label": "has",
    "to": 210
  }, {
    "from": 211,
    "label": "has",
    "to": 9
  }, {
    "from": 212,
    "label": "has",
    "to": 62
  }, {
    "from": 212,
    "label": "has",
    "to": 63
  }, {
    "from": 212,
    "label": "has",
    "to": 64
  }, {
    "from": 212,
    "label": "has",
    "to": 65
  }, {
    "from": 212,
    "label": "has",
    "to": 66
  }, {
    "from": 212,
    "label": "has",
    "to": 67
  }, {
    "from": 212,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 9
  }, {
    "from": 212,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 9
  }, {
    "from": 212,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 9
  }, {
    "from": 212,
    "label": "has",
    "to": 71
  }, {
    "from": 212,
    "label": "has",
    "to": 72
  }, {
    "from": 212,
    "label": "has",
    "to": 73
  }, {
    "from": 212,
    "label": "has",
    "to": 74
  }, {
    "from": 212,
    "label": "has",
    "to": 16
  }, {
    "from": 212,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 16
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 77,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 77,
    "label": "has",
    "to": 82
  }, {
    "from": 75,
    "label": "has",
    "to": 73
  }, {
    "from": 212,
    "label": "has",
    "to": 83
  }, {
    "from": 212,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 9
  }, {
    "from": 212,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 85,
    "label": "has",
    "to": 61
  }, {
    "from": 212,
    "label": "has",
    "to": 88
  }, {
    "from": 212,
    "label": "has",
    "to": 89
  }, {
    "from": 212,
    "label": "has",
    "to": 90
  }, {
    "from": 212,
    "label": "has",
    "to": 91
  }, {
    "from": 212,
    "label": "has",
    "to": 92
  }, {
    "from": 212,
    "label": "has",
    "to": 93
  }, {
    "from": 212,
    "label": "has",
    "to": 94
  }, {
    "from": 212,
    "label": "has",
    "to": 95
  }, {
    "from": 212,
    "label": "has",
    "to": 96
  }, {
    "from": 212,
    "label": "has",
    "to": 213
  }, {
    "from": 214,
    "label": "has",
    "to": 144
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 214,
    "label": "has",
    "to": 146
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 146,
    "label": "has",
    "to": 148
  }, {
    "from": 146,
    "label": "has",
    "to": 149
  }, {
    "from": 214,
    "label": "has",
    "to": 150
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 151,
    "label": "has",
    "to": 153
  }, {
    "from": 214,
    "label": "has",
    "to": 154
  }, {
    "from": 214,
    "label": "has",
    "to": 155
  }, {
    "from": 214,
    "label": "has",
    "to": 215
  }, {
    "from": 216,
    "label": "has",
    "to": 161
  }, {
    "from": 217,
    "label": "has",
    "to": 156
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 157,
    "label": "has",
    "to": 159
  }, {
    "from": 217,
    "label": "has",
    "to": 160
  }, {
    "from": 160,
    "label": "has",
    "to": 161
  }, {
    "from": 217,
    "label": "has",
    "to": 218
  }, {
    "from": 219,
    "label": "has",
    "to": 9
  }, {
    "from": 220,
    "label": "has",
    "to": 9
  }, {
    "from": 39,
    "label": "calls",
    "to": 229
  }, {
    "from": 106,
    "label": "calls",
    "to": 229
  }, {
    "from": 135,
    "label": "calls",
    "to": 229
  }, {
    "from": 170,
    "label": "calls",
    "to": 229
  }, {
    "from": 135,
    "label": "calls",
    "to": 247
  }, {
    "from": 170,
    "label": "calls",
    "to": 247
  }, {
    "from": 39,
    "label": "calls",
    "to": 231
  }, {
    "from": 103,
    "label": "calls",
    "to": 231
  }, {
    "from": 106,
    "label": "calls",
    "to": 231
  }, {
    "from": 39,
    "label": "calls",
    "to": 232
  }, {
    "from": 170,
    "label": "calls",
    "to": 232
  }, {
    "from": 13,
    "label": "calls",
    "to": 208
  }, {
    "from": 106,
    "label": "calls",
    "to": 234
  }, {
    "from": 106,
    "label": "calls",
    "to": 234
  }, {
    "from": 106,
    "label": "calls",
    "to": 234
  }, {
    "from": 106,
    "label": "calls",
    "to": 234
  }, {
    "from": 47,
    "label": "calls",
    "to": 40
  }, {
    "from": 39,
    "label": "calls",
    "to": 40
  }, {
    "from": 40,
    "label": "calls",
    "to": 39
  }, {
    "from": 39,
    "label": "calls",
    "to": 39
  }, {
    "from": 195,
    "label": "calls",
    "to": 170
  }, {
    "from": 47,
    "label": "calls",
    "to": 235
  }, {
    "from": 198,
    "label": "calls",
    "to": 235
  }, {
    "from": 221,
    "label": "calls",
    "to": 236
  }, {
    "from": 39,
    "label": "calls",
    "to": 226
  }, {
    "from": 39,
    "label": "calls",
    "to": 226
  }, {
    "from": 39,
    "label": "calls",
    "to": 226
  }, {
    "from": 163,
    "label": "calls",
    "to": 226
  }, {
    "from": 142,
    "label": "calls",
    "to": 140
  }, {
    "from": 13,
    "label": "calls",
    "to": 11
  }, {
    "from": 39,
    "label": "calls",
    "to": 11
  }, {
    "from": 39,
    "label": "calls",
    "to": 11
  }, {
    "from": 170,
    "label": "calls",
    "to": 166
  }, {
    "from": 40,
    "label": "calls",
    "to": 224
  }, {
    "from": 166,
    "label": "calls",
    "to": 224
  }, {
    "from": 142,
    "label": "calls",
    "to": 238
  }, {
    "from": 170,
    "label": "calls",
    "to": 238
  }, {
    "from": 170,
    "label": "calls",
    "to": 238
  }, {
    "from": 170,
    "label": "calls",
    "to": 142
  }, {
    "from": 170,
    "label": "calls",
    "to": 142
  }, {
    "from": 103,
    "label": "calls",
    "to": 239
  }, {
    "from": 39,
    "label": "calls",
    "to": 240
  }, {
    "from": 39,
    "label": "calls",
    "to": 240
  }, {
    "from": 142,
    "label": "calls",
    "to": 135
  }, {
    "from": 170,
    "label": "calls",
    "to": 135
  }, {
    "from": 39,
    "label": "calls",
    "to": 3
  }, {
    "from": 39,
    "label": "calls",
    "to": 3
  }, {
    "from": 166,
    "label": "calls",
    "to": 163
  }, {
    "from": 39,
    "label": "calls",
    "to": 47
  }, {
    "from": 198,
    "label": "calls",
    "to": 237
  }, {
    "from": 39,
    "label": "calls",
    "to": 230
  }, {
    "from": 221,
    "label": "calls",
    "to": 242
  }, {
    "from": 106,
    "label": "calls",
    "to": 103
  }, {
    "from": 106,
    "label": "calls",
    "to": 103
  }, {
    "from": 13,
    "label": "calls",
    "to": 207
  }, {
    "from": 39,
    "label": "calls",
    "to": 243
  }, {
    "from": 163,
    "label": "calls",
    "to": 243
  }, {
    "from": 198,
    "label": "calls",
    "to": 243
  }, {
    "from": 106,
    "label": "calls",
    "to": 198
  }, {
    "from": 106,
    "label": "calls",
    "to": 198
  }, {
    "from": 191,
    "label": "calls",
    "to": 244
  }, {
    "from": 198,
    "label": "calls",
    "to": 244
  }, {
    "from": 39,
    "label": "calls",
    "to": 245
  }, {
    "from": 163,
    "label": "calls",
    "to": 245
  }, {
    "from": 47,
    "label": "calls",
    "to": 241
  }, {
    "from": 221,
    "label": "calls",
    "to": 246
  }, {
    "from": 221,
    "label": "calls",
    "to": 246
  }, {
    "from": 221,
    "label": "calls",
    "to": 246
  }, {
    "from": 221,
    "label": "calls",
    "to": 246
  }, {
    "from": 221,
    "label": "calls",
    "to": 246
  }, {
    "from": 39,
    "label": "calls",
    "to": 13
  }, {
    "from": 39,
    "label": "calls",
    "to": 13
  }, {
    "from": 47,
    "label": "calls",
    "to": 228
  }, {
    "from": 1,
    "label": "contains",
    "to": 221
  }, {
    "from": 221,
    "label": "declares",
    "to": 3
  }, {
    "from": 221,
    "label": "declares",
    "to": 11
  }, {
    "from": 221,
    "label": "declares",
    "to": 13
  }, {
    "from": 221,
    "label": "declares",
    "to": 39
  }, {
    "from": 221,
    "label": "declares",
    "to": 40
  }, {
    "from": 221,
    "label": "declares",
    "to": 47
  }, {
    "from": 221,
    "label": "declares",
    "to": 52
  }, {
    "from": 221,
    "label": "declares",
    "to": 98
  }, {
    "from": 221,
    "label": "declares",
    "to": 99
  }, {
    "from": 221,
    "label": "declares",
    "to": 100
  }, {
    "from": 221,
    "label": "declares",
    "to": 101
  }, {
    "from": 221,
    "label": "declares",
    "to": 103
  }, {
    "from": 221,
    "label": "declares",
    "to": 106
  }, {
    "from": 221,
    "label": "declares",
    "to": 135
  }, {
    "from": 221,
    "label": "declares",
    "to": 140
  }, {
    "from": 221,
    "label": "declares",
    "to": 142
  }, {
    "from": 221,
    "label": "declares",
    "to": 163
  }, {
    "from": 221,
    "label": "declares",
    "to": 166
  }, {
    "from": 221,
    "label": "declares",
    "to": 170
  }, {
    "from": 221,
    "label": "declares",
    "to": 189
  }, {
    "from": 221,
    "label": "declares",
    "to": 191
  }, {
    "from": 221,
    "label": "declares",
    "to": 195
  }, {
    "from": 221,
    "label": "declares",
    "to": 198
  }, {
    "from": 221,
    "label": "declares",
    "to": 207
  }, {
    "from": 221,
    "label": "declares",
    "to": 208
  }, {
    "from": 221,
    "label": "declares",
    "to": 209
  }, {
    "from": 221,
    "label": "declares",
    "to": 211
  }, {
    "from": 221,
    "label": "declares",
    "to": 212
  }, {
    "from": 221,
    "label": "declares",
    "to": 214
  }, {
    "from": 221,
    "label": "declares",
    "to": 216
  }, {
    "from": 221,
    "label": "declares",
    "to": 217
  }, {
    "from": 221,
    "label": "declares",
    "to": 219
  }, {
    "from": 221,
    "label": "declares",
    "to": 220
  }, {
    "from": 222,
    "label": "calls",
    "to": 191
  }, {
    "from": 222,
    "label": "calls",
    "to": 191
  }, {
    "from": 222,
    "label": "calls",
    "to": 191
  }, {
    "from": 248,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 249
  }, {
    "from": 1,
    "label": "contains",
    "to": 250
  }, {
    "from": 249,
    "label": "initializes",
    "to": 251
  }, {
    "from": 251,
    "label": "assigns",
    "to": 252
  }, {
    "from": 249,
    "label": "initializes",
    "to": 253
  }, {
    "from": 253,
    "label": "assigns",
    "to": 254
  }, {
    "from": 249,
    "label": "initializes",
    "to": 255
  }, {
    "from": 255,
    "label": "assigns",
    "to": 256
  }, {
    "from": 249,
    "label": "initializes",
    "to": 257
  }, {
    "from": 257,
    "label": "assigns",
    "to": 258
  }, {
    "from": 249,
    "label": "initializes",
    "to": 259
  }, {
    "from": 259,
    "label": "assigns",
    "to": 260
  }, {
    "from": 249,
    "label": "initializes",
    "to": 261
  }, {
    "from": 261,
    "label": "assigns",
    "to": 262
  }, {
    "from": 249,
    "label": "initializes",
    "to": 263
  }, {
    "from": 263,
    "label": "assigns",
    "to": 264
  }, {
    "from": 249,
    "label": "initializes",
    "to": 265
  }, {
    "from": 265,
    "label": "assigns",
    "to": 266
  }, {
    "from": 249,
    "label": "initializes",
    "to": 267
  }, {
    "from": 267,
    "label": "assigns",
    "to": 268
  }, {
    "from": 249,
    "label": "initializes",
    "to": 269
  }, {
    "from": 269,
    "label": "assigns",
    "to": 270
  }, {
    "from": 249,
    "label": "initializes",
    "to": 271
  }, {
    "from": 271,
    "label": "assigns",
    "to": 272
  }, {
    "from": 249,
    "label": "initializes",
    "to": 273
  }, {
    "from": 273,
    "label": "assigns",
    "to": 274
  }, {
    "from": 249,
    "label": "initializes",
    "to": 275
  }, {
    "from": 275,
    "label": "assigns",
    "to": 276
  }, {
    "from": 249,
    "label": "initializes",
    "to": 277
  }, {
    "from": 277,
    "label": "assigns",
    "to": 278
  }, {
    "from": 249,
    "label": "initializes",
    "to": 279
  }, {
    "from": 279,
    "label": "assigns",
    "to": 280
  }, {
    "from": 249,
    "label": "initializes",
    "to": 281
  }, {
    "from": 281,
    "label": "assigns",
    "to": 282
  }, {
    "from": 249,
    "label": "initializes",
    "to": 283
  }, {
    "from": 283,
    "label": "assigns",
    "to": 284
  }, {
    "from": 249,
    "label": "initializes",
    "to": 285
  }, {
    "from": 285,
    "label": "assigns",
    "to": 286
  }, {
    "from": 249,
    "label": "initializes",
    "to": 287
  }, {
    "from": 287,
    "label": "assigns",
    "to": 288
  }, {
    "from": 249,
    "label": "initializes",
    "to": 289
  }, {
    "from": 249,
    "label": "initializes",
    "to": 290
  }, {
    "from": 249,
    "label": "initializes",
    "to": 291
  }, {
    "from": 250,
    "label": "initializes",
    "to": 292
  }, {
    "from": 292,
    "label": "requires",
    "to": 223
  }, {
    "from": 250,
    "label": "initializes",
    "to": 293
  }, {
    "from": 293,
    "label": "requires",
    "to": 233
  }, {
    "from": 250,
    "label": "initializes",
    "to": 294
  }, {
    "from": 294,
    "label": "requires",
    "to": 227
  }, {
    "from": 250,
    "label": "initializes",
    "to": 295
  }, {
    "from": 295,
    "label": "requires",
    "to": 225
  }, {
    "from": 250,
    "label": "initializes",
    "to": 248
  }, {
    "from": 248,
    "label": "requires",
    "to": 1
  }, {
    "from": 202,
    "label": "hasArgument",
    "to": 220
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "shake",
    "type": "module"
  }, {
    "id": 2,
    "text": "",
    "type": "function container"
  }, {
    "id": 3,
    "text": "local function _newsuite(s, filename, title, errmsg)\r\n    local source = {}\r\n    filename = filename or \"\"\r\n    if not errmsg then\r\n        for line in s:gmatch(\"(.-)\\r?\\n\") do\r\n\t\t\tsource[#source + 1] = line\r\n        end\r\n    end\r\n    return {title = title, filename = filename, passed = 0, failed = 0, error = errmsg, source = source, contexts = {} }\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local source = {}",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "filename = filename or \"\"",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "if not errmsg then\r\n        for line in s:gmatch(\"(.-)\\r?\\n\") do\r\n\t\t\tsource[#source + 1] = line\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "for line in s:gmatch(\"(.-)\\r?\\n\") do\r\n\t\t\tsource[#source + 1] = line\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 8,
    "text": "source[#source + 1] = line",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "local function _newcontext(...)\r\n    return {output = {...}, passed = 0, failed = 0, tests = {} }\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function _newassert(suite, context)\r\n    return function(val1, op, val2, msg, exp1, exp2, comments)\r\n        if comments then\r\n            context = _newcontext(comments)\r\n            suite.contexts[#suite.contexts + 1] = context\r\n        end        \r\n      \r\n        local test = { message = msg or \"\" }\r\n        context.tests[#context.tests + 1] = test\r\n\r\n        local PASSED = false\r\n\r\n        if not op then\r\n          PASSED = val1\r\n        elseif op == '==' then\r\n          PASSED = val1 == val2\r\n        elseif op == '~=' then\r\n          PASSED = val1 ~= val2\r\n        end\r\n\r\n        if PASSED then\r\n          context.passed = context.passed + 1\r\n          suite.passed = suite.passed + 1\r\n        else\r\n          context.failed = context.failed + 1\r\n          suite.failed = suite.failed + 1\r\n        end\r\n\r\n        test.val1 = val1\r\n        test.op = op\r\n        test.val2 = val2\r\n        test.exp1 = exp1\r\n        test.exp2 = exp2\r\n        test.msg = msg\r\n        test.passed = PASSED\r\n        test.linenumber = getinfo(2, \"l\").currentline\r\n        test.traceback = traceback(\"\", 2)\r\n        return PASSED, msg\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "if comments then\r\n            context = _newcontext(comments)\r\n            suite.contexts[#suite.contexts + 1] = context\r\n        end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "context = _newcontext(comments)",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "suite.contexts[#suite.contexts + 1] = context",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "local test = { message = msg or \"\" }",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "context.tests[#context.tests + 1] = test",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "local PASSED = false",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "if not op then\r\n          PASSED = val1\r\n        elseif op == '==' then\r\n          PASSED = val1 == val2\r\n        elseif op == '~=' then\r\n          PASSED = val1 ~= val2\r\n        end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "PASSED = val1",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "PASSED = val1 == val2",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "PASSED = val1 ~= val2",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "if PASSED then\r\n          context.passed = context.passed + 1\r\n          suite.passed = suite.passed + 1\r\n        else\r\n          context.failed = context.failed + 1\r\n          suite.failed = suite.failed + 1\r\n        end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "context.passed = context.passed + 1",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "suite.passed = suite.passed + 1",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "context.failed = context.failed + 1",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "suite.failed = suite.failed + 1",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "test.val1 = val1",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "test.op = op",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "test.val2 = val2",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "test.exp1 = exp1",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "test.exp2 = exp2",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "test.msg = msg",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "test.passed = PASSED",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "test.linenumber = getinfo(2, \"l\").currentline",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "test.traceback = traceback(\"\", 2)",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 40,
    "text": "local function _loadfile(self, filename, title)\r\n    local file, func, errmsg\r\n    file, errmsg = io.open(filename)\r\n    if not file then\r\n        return nil, errmsg\r\n    else\r\n        local str = file:read'*a'\r\n        func, errmsg = _loadstring(self, str, filename, title)\r\n    end\r\n    return func, errmsg\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "local file, func, errmsg",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "file, errmsg = io.open(filename)",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "if not file then\r\n        return nil, errmsg\r\n    else\r\n        local str = file:read'*a'\r\n        func, errmsg = _loadstring(self, str, filename, title)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "local str = file:read'*a'",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "func, errmsg = _loadstring(self, str, filename, title)",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "local function _dofile(self, filename, title)\r\n    local results = {pcall(_loadfile(self, filename, title))}\r\n    if results[1] then\r\n        table.remove(results, 1)\r\n    end\r\n    return unpack(results)\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "local results = {pcall(_loadfile(self, filename, title))}",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "if results[1] then\r\n        table.remove(results, 1)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "table.remove(results, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function _loadstring(self, s, chunckname, title)\r\n    local s2 = string.gsub(s, \"^#![^\\n]*\\n\", \"-- keeps one line in place of an eventual one with a #! at the start\\n\")\r\n    s2 = stir(s2)\r\n    f, errmsg = loadstring(s2, chunckname)\r\n\r\n    local results = self.results\r\n    title = title or \"\"\r\n    if not f then\r\n        -- error loading the string\r\n        errmsg = string.gsub(errmsg, '%[string \"'..chunckname..'\"%]', chunckname)\r\n        results.suites[#results.suites + 1] = _newsuite(s, chunckname, title, errmsg)\r\n        results.errors = results.errors + 1\r\n    else return function(...)\r\n        -- runs the test suite\r\n        local _print = _G.print\r\n        local _write = _G.io.write\r\n        local ___STIR_assert = _G.___STIR_assert\r\n        \r\n        local lf = _G.loadfile\r\n        local df = _G.dofile\r\n\t\tlocal ls = _G.loadstring\r\n\r\n        _G.loadfile = function(name) return _loadfile(self, name, title) end\r\n        _G.dofile = function (name) return _dofile(self, name, title) end\r\n\t\t_G.loadstring = function(str, name) return _loadstring(self, str, name, title) end\r\n\t\r\n        \r\n        local suite = _newsuite(s, chunckname, title)\r\n\r\n        local context = _newcontext(\"\")\r\n        _G.___STIR_assert = _newassert(suite, context) -- so assertions works even without a previous context\r\n\t_G.___STIR_error = error\r\n        suite.contexts[#suite.contexts + 1] = context\r\n        \r\n        -- separate contexts at every print or io.write\r\n        -- keeping the output stored in the context table\r\n        _G.print = function(...)\r\n            local context = suite.contexts[#suite.contexts]\r\n            if context.passed + context.failed > 0 then\r\n                -- create a new context if there was an assert before the previous context\r\n                context = _newcontext(...)\r\n                suite.contexts[#suite.contexts + 1] = context\r\n            else\r\n\t\t-- converts all parameters to strings\r\n\t\tlocal temp = {}\r\n\t\tfor i = 1, _G.select('#',...) do\r\n\t\t\ttable.insert(temp, _G.tostring(_G.select(i,...)))\r\n\t\tend\r\n\t\t-- and concatenates them\r\n\t\tcontext.output[#context.output + 1] = table.concat(temp, \"\\t\")\r\n            end\r\n            _G.___STIR_assert = _newassert(suite, context)\r\n        end\r\n        \r\n        _G.io.write = _G.print\r\n        \r\n        -- executes the suite\r\n        local res, errmsg = xpcall(f, function(err) return err end)\r\n        if not res then\r\n            -- error executing the suite\r\n            errmsg = errmsg or \"\"\r\n            suite.error = string.gsub(errmsg, '%[string \"'..chunckname..'\"%]', chunckname)\r\n            results.errors = results.errors + 1\r\n        end\r\n        results.passed = results.passed + suite.passed\r\n        results.failed = results.failed + suite.failed\r\n        results.suites[#results.suites + 1] = suite\r\n\r\n        -- restores the environment\r\n        _G.loadfile = lf\r\n        _G.dofile = df\r\n\t\t_G.loadstring = ls\r\n        _G.print = _print\r\n        _G.io.write = _write\r\n        _G.___STIR_assert = ___STIR_assert\r\n        end -- returned function\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "local s2 = string.gsub(s, \"^#![^\\n]*\\n\", \"-- keeps one line in place of an eventual one with a #! at the start\\n\")",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "s2 = stir(s2)",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "f, errmsg = loadstring(s2, chunckname)",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "local results = self.results",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "title = title or \"\"",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "if not f then\r\n        -- error loading the string\r\n        errmsg = string.gsub(errmsg, '%[string \"'..chunckname..'\"%]', chunckname)\r\n        results.suites[#results.suites + 1] = _newsuite(s, chunckname, title, errmsg)\r\n        results.errors = results.errors + 1\r\n    else return function(...)\r\n        -- runs the test suite\r\n        local _print = _G.print\r\n        local _write = _G.io.write\r\n        local ___STIR_assert = _G.___STIR_assert\r\n        \r\n        local lf = _G.loadfile\r\n        local df = _G.dofile\r\n\t\tlocal ls = _G.loadstring\r\n\r\n        _G.loadfile = function(name) return _loadfile(self, name, title) end\r\n        _G.dofile = function (name) return _dofile(self, name, title) end\r\n\t\t_G.loadstring = function(str, name) return _loadstring(self, str, name, title) end\r\n\t\r\n        \r\n        local suite = _newsuite(s, chunckname, title)\r\n\r\n        local context = _newcontext(\"\")\r\n        _G.___STIR_assert = _newassert(suite, context) -- so assertions works even without a previous context\r\n\t_G.___STIR_error = error\r\n        suite.contexts[#suite.contexts + 1] = context\r\n        \r\n        -- separate contexts at every print or io.write\r\n        -- keeping the output stored in the context table\r\n        _G.print = function(...)\r\n            local context = suite.contexts[#suite.contexts]\r\n            if context.passed + context.failed > 0 then\r\n                -- create a new context if there was an assert before the previous context\r\n                context = _newcontext(...)\r\n                suite.contexts[#suite.contexts + 1] = context\r\n            else\r\n\t\t-- converts all parameters to strings\r\n\t\tlocal temp = {}\r\n\t\tfor i = 1, _G.select('#',...) do\r\n\t\t\ttable.insert(temp, _G.tostring(_G.select(i,...)))\r\n\t\tend\r\n\t\t-- and concatenates them\r\n\t\tcontext.output[#context.output + 1] = table.concat(temp, \"\\t\")\r\n            end\r\n            _G.___STIR_assert = _newassert(suite, context)\r\n        end\r\n        \r\n        _G.io.write = _G.print\r\n        \r\n        -- executes the suite\r\n        local res, errmsg = xpcall(f, function(err) return err end)\r\n        if not res then\r\n            -- error executing the suite\r\n            errmsg = errmsg or \"\"\r\n            suite.error = string.gsub(errmsg, '%[string \"'..chunckname..'\"%]', chunckname)\r\n            results.errors = results.errors + 1\r\n        end\r\n        results.passed = results.passed + suite.passed\r\n        results.failed = results.failed + suite.failed\r\n        results.suites[#results.suites + 1] = suite\r\n\r\n        -- restores the environment\r\n        _G.loadfile = lf\r\n        _G.dofile = df\r\n\t\t_G.loadstring = ls\r\n        _G.print = _print\r\n        _G.io.write = _write\r\n        _G.___STIR_assert = ___STIR_assert\r\n        end -- returned function\r\n    end",
    "type": "statement:if"
  }, {
    "id": 59,
    "text": "errmsg = string.gsub(errmsg, '%[string \"'..chunckname..'\"%]', chunckname)",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "results.suites[#results.suites + 1] = _newsuite(s, chunckname, title, errmsg)",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "results.errors = results.errors + 1",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "local _print = _G.print",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "local _write = _G.io.write",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "local ___STIR_assert = _G.___STIR_assert",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "local lf = _G.loadfile",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "local df = _G.dofile",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "local ls = _G.loadstring",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "_G.loadfile = function(name) return _loadfile(self, name, title) end",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "_G.dofile = function (name) return _dofile(self, name, title) end",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "_G.loadstring = function(str, name) return _loadstring(self, str, name, title) end",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "local suite = _newsuite(s, chunckname, title)",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "local context = _newcontext(\"\")",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "_G.___STIR_assert = _newassert(suite, context)",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "_G.___STIR_error = error",
    "type": "statement:assign"
  }, {
    "id": 75,
    "text": "_G.print = function(...)\r\n            local context = suite.contexts[#suite.contexts]\r\n            if context.passed + context.failed > 0 then\r\n                -- create a new context if there was an assert before the previous context\r\n                context = _newcontext(...)\r\n                suite.contexts[#suite.contexts + 1] = context\r\n            else\r\n\t\t-- converts all parameters to strings\r\n\t\tlocal temp = {}\r\n\t\tfor i = 1, _G.select('#',...) do\r\n\t\t\ttable.insert(temp, _G.tostring(_G.select(i,...)))\r\n\t\tend\r\n\t\t-- and concatenates them\r\n\t\tcontext.output[#context.output + 1] = table.concat(temp, \"\\t\")\r\n            end\r\n            _G.___STIR_assert = _newassert(suite, context)\r\n        end",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "local context = suite.contexts[#suite.contexts]",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "if context.passed + context.failed > 0 then\r\n                -- create a new context if there was an assert before the previous context\r\n                context = _newcontext(...)\r\n                suite.contexts[#suite.contexts + 1] = context\r\n            else\r\n\t\t-- converts all parameters to strings\r\n\t\tlocal temp = {}\r\n\t\tfor i = 1, _G.select('#',...) do\r\n\t\t\ttable.insert(temp, _G.tostring(_G.select(i,...)))\r\n\t\tend\r\n\t\t-- and concatenates them\r\n\t\tcontext.output[#context.output + 1] = table.concat(temp, \"\\t\")\r\n            end",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "context = _newcontext(...)",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "local temp = {}",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "for i = 1, _G.select('#',...) do\r\n\t\t\ttable.insert(temp, _G.tostring(_G.select(i,...)))\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 81,
    "text": "table.insert(temp, _G.tostring(_G.select(i,...)))",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "context.output[#context.output + 1] = table.concat(temp, \"\\t\")",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "_G.io.write = _G.print",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "local res, errmsg = xpcall(f, function(err) return err end)",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "if not res then\r\n            -- error executing the suite\r\n            errmsg = errmsg or \"\"\r\n            suite.error = string.gsub(errmsg, '%[string \"'..chunckname..'\"%]', chunckname)\r\n            results.errors = results.errors + 1\r\n        end",
    "type": "statement:if"
  }, {
    "id": 86,
    "text": "errmsg = errmsg or \"\"",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "suite.error = string.gsub(errmsg, '%[string \"'..chunckname..'\"%]', chunckname)",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "results.passed = results.passed + suite.passed",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "results.failed = results.failed + suite.failed",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "results.suites[#results.suites + 1] = suite",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "_G.loadfile = lf",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "_G.dofile = df",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "_G.loadstring = ls",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "_G.print = _print",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "_G.io.write = _write",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "_G.___STIR_assert = ___STIR_assert",
    "type": "statement:assign"
  }, {
    "id": 97,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 98,
    "text": "function(name) return _loadfile(self, name, title) end",
    "type": "function"
  }, {
    "id": 99,
    "text": "function (name) return _dofile(self, name, title) end",
    "type": "function"
  }, {
    "id": 100,
    "text": "function(str, name) return _loadstring(self, str, name, title) end",
    "type": "function"
  }, {
    "id": 101,
    "text": "function(...)\r\n            local context = suite.contexts[#suite.contexts]\r\n            if context.passed + context.failed > 0 then\r\n                -- create a new context if there was an assert before the previous context\r\n                context = _newcontext(...)\r\n                suite.contexts[#suite.contexts + 1] = context\r\n            else\r\n\t\t-- converts all parameters to strings\r\n\t\tlocal temp = {}\r\n\t\tfor i = 1, _G.select('#',...) do\r\n\t\t\ttable.insert(temp, _G.tostring(_G.select(i,...)))\r\n\t\tend\r\n\t\t-- and concatenates them\r\n\t\tcontext.output[#context.output + 1] = table.concat(temp, \"\\t\")\r\n            end\r\n            _G.___STIR_assert = _newassert(suite, context)\r\n        end",
    "type": "function"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "local function _tostring(s)\r\n\tif _G.type(s) == \"string\" then\r\n\t\treturn [[\"]]..s..[[\"]]\r\n\telse\r\n\t\treturn _G.tostring(s)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 104,
    "text": "if _G.type(s) == \"string\" then\r\n\t\treturn [[\"]]..s..[[\"]]\r\n\telse\r\n\t\treturn _G.tostring(s)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 105,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 106,
    "text": "local function _summary(self, sep)\r\n    local out = {}\r\n    local results = self.results\r\n    sep = sep or \"\\n\"\r\n    for cs, suite in ipairs(results.suites) do\r\n        if suite.error then\r\n            out[#out + 1] = \">>>>>>>>>>>>>>>>   \"..suite.title..\" \"..suite.filename..\" has an error!!!\"..\"   <<<<<<<<<<<<<<<<\"\r\n            out[#out + 1] = \"\"\r\n            out[#out + 1] = suite.error\r\n            out[#out + 1] = \"\"\r\n        elseif suite.failed > 0 then\r\n            out[#out + 1] = \"----------------   \"..suite.title..\" \"..suite.filename..\" failed!\"..\"   ----------------\"\r\n            for cg, context in ipairs(suite.contexts) do\r\n                if context.failed > 0 then\r\n                    out[#out + 1] = \"\"\r\n                    for _, output in ipairs(context.output) do\r\n                        out[#out + 1] = _G.tostring(output)\r\n                    end\r\n                    if context.comments then\r\n                      out[#out + 1] = context.comments\r\n                    end\r\n                    for ct, test in ipairs (context.tests) do\r\n                        if not test.passed then\r\n                            if suite.source[test.linenumber] then\r\n                                out[#out + 1] = \"   #\"..test.linenumber..\" \"..suite.source[test.linenumber]\r\n                            end\r\n                            \r\n                            if not isTerminal(test.exp1, test.val1) then\r\n                                out[#out + 1] = \"   \"..test.exp1..\" -> \".._tostring(test.val1)\r\n                            end\r\n                            \r\n                            if not isTerminal(test.exp2, test.val2) then\r\n                                out[#out + 1] = \"   \"..test.exp2..\" -> \".._tostring(test.val2)\r\n                            end\r\n                        end\r\n                    end\r\n                end\r\n            end\r\n        else\r\n            out[#out + 1] = \"-> \"..suite.title..\" \"..suite.filename..\" OK!\"\r\n        end\r\n    end\r\n    out[#out + 1] = \"_________________\"\r\n    out[#out + 1] = \"\"\r\n    out[#out + 1] = \"Tests: \"..results.failed + results.passed\r\n    out[#out + 1] = \"Failures: \"..results.failed\r\n    out[#out + 1] = \"Errors: \"..results.errors\r\n    out[#out + 1] = \"\"\r\n    return table.concat(out, sep)\r\nend",
    "type": "function"
  }, {
    "id": 107,
    "text": "local out = {}",
    "type": "statement:localassign"
  }, {
    "id": 108,
    "text": "sep = sep or \"\\n\"",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "for cs, suite in ipairs(results.suites) do\r\n        if suite.error then\r\n            out[#out + 1] = \">>>>>>>>>>>>>>>>   \"..suite.title..\" \"..suite.filename..\" has an error!!!\"..\"   <<<<<<<<<<<<<<<<\"\r\n            out[#out + 1] = \"\"\r\n            out[#out + 1] = suite.error\r\n            out[#out + 1] = \"\"\r\n        elseif suite.failed > 0 then\r\n            out[#out + 1] = \"----------------   \"..suite.title..\" \"..suite.filename..\" failed!\"..\"   ----------------\"\r\n            for cg, context in ipairs(suite.contexts) do\r\n                if context.failed > 0 then\r\n                    out[#out + 1] = \"\"\r\n                    for _, output in ipairs(context.output) do\r\n                        out[#out + 1] = _G.tostring(output)\r\n                    end\r\n                    if context.comments then\r\n                      out[#out + 1] = context.comments\r\n                    end\r\n                    for ct, test in ipairs (context.tests) do\r\n                        if not test.passed then\r\n                            if suite.source[test.linenumber] then\r\n                                out[#out + 1] = \"   #\"..test.linenumber..\" \"..suite.source[test.linenumber]\r\n                            end\r\n                            \r\n                            if not isTerminal(test.exp1, test.val1) then\r\n                                out[#out + 1] = \"   \"..test.exp1..\" -> \".._tostring(test.val1)\r\n                            end\r\n                            \r\n                            if not isTerminal(test.exp2, test.val2) then\r\n                                out[#out + 1] = \"   \"..test.exp2..\" -> \".._tostring(test.val2)\r\n                            end\r\n                        end\r\n                    end\r\n                end\r\n            end\r\n        else\r\n            out[#out + 1] = \"-> \"..suite.title..\" \"..suite.filename..\" OK!\"\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 110,
    "text": "if suite.error then\r\n            out[#out + 1] = \">>>>>>>>>>>>>>>>   \"..suite.title..\" \"..suite.filename..\" has an error!!!\"..\"   <<<<<<<<<<<<<<<<\"\r\n            out[#out + 1] = \"\"\r\n            out[#out + 1] = suite.error\r\n            out[#out + 1] = \"\"\r\n        elseif suite.failed > 0 then\r\n            out[#out + 1] = \"----------------   \"..suite.title..\" \"..suite.filename..\" failed!\"..\"   ----------------\"\r\n            for cg, context in ipairs(suite.contexts) do\r\n                if context.failed > 0 then\r\n                    out[#out + 1] = \"\"\r\n                    for _, output in ipairs(context.output) do\r\n                        out[#out + 1] = _G.tostring(output)\r\n                    end\r\n                    if context.comments then\r\n                      out[#out + 1] = context.comments\r\n                    end\r\n                    for ct, test in ipairs (context.tests) do\r\n                        if not test.passed then\r\n                            if suite.source[test.linenumber] then\r\n                                out[#out + 1] = \"   #\"..test.linenumber..\" \"..suite.source[test.linenumber]\r\n                            end\r\n                            \r\n                            if not isTerminal(test.exp1, test.val1) then\r\n                                out[#out + 1] = \"   \"..test.exp1..\" -> \".._tostring(test.val1)\r\n                            end\r\n                            \r\n                            if not isTerminal(test.exp2, test.val2) then\r\n                                out[#out + 1] = \"   \"..test.exp2..\" -> \".._tostring(test.val2)\r\n                            end\r\n                        end\r\n                    end\r\n                end\r\n            end\r\n        else\r\n            out[#out + 1] = \"-> \"..suite.title..\" \"..suite.filename..\" OK!\"\r\n        end",
    "type": "statement:if"
  }, {
    "id": 111,
    "text": "out[#out + 1] = \">>>>>>>>>>>>>>>>   \"..suite.title..\" \"..suite.filename..\" has an error!!!\"..\"   <<<<<<<<<<<<<<<<\"",
    "type": "statement:assign"
  }, {
    "id": 112,
    "text": "out[#out + 1] = \"\"",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "out[#out + 1] = suite.error",
    "type": "statement:assign"
  }, {
    "id": 114,
    "text": "out[#out + 1] = \"----------------   \"..suite.title..\" \"..suite.filename..\" failed!\"..\"   ----------------\"",
    "type": "statement:assign"
  }, {
    "id": 115,
    "text": "for cg, context in ipairs(suite.contexts) do\r\n                if context.failed > 0 then\r\n                    out[#out + 1] = \"\"\r\n                    for _, output in ipairs(context.output) do\r\n                        out[#out + 1] = _G.tostring(output)\r\n                    end\r\n                    if context.comments then\r\n                      out[#out + 1] = context.comments\r\n                    end\r\n                    for ct, test in ipairs (context.tests) do\r\n                        if not test.passed then\r\n                            if suite.source[test.linenumber] then\r\n                                out[#out + 1] = \"   #\"..test.linenumber..\" \"..suite.source[test.linenumber]\r\n                            end\r\n                            \r\n                            if not isTerminal(test.exp1, test.val1) then\r\n                                out[#out + 1] = \"   \"..test.exp1..\" -> \".._tostring(test.val1)\r\n                            end\r\n                            \r\n                            if not isTerminal(test.exp2, test.val2) then\r\n                                out[#out + 1] = \"   \"..test.exp2..\" -> \".._tostring(test.val2)\r\n                            end\r\n                        end\r\n                    end\r\n                end\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 116,
    "text": "if context.failed > 0 then\r\n                    out[#out + 1] = \"\"\r\n                    for _, output in ipairs(context.output) do\r\n                        out[#out + 1] = _G.tostring(output)\r\n                    end\r\n                    if context.comments then\r\n                      out[#out + 1] = context.comments\r\n                    end\r\n                    for ct, test in ipairs (context.tests) do\r\n                        if not test.passed then\r\n                            if suite.source[test.linenumber] then\r\n                                out[#out + 1] = \"   #\"..test.linenumber..\" \"..suite.source[test.linenumber]\r\n                            end\r\n                            \r\n                            if not isTerminal(test.exp1, test.val1) then\r\n                                out[#out + 1] = \"   \"..test.exp1..\" -> \".._tostring(test.val1)\r\n                            end\r\n                            \r\n                            if not isTerminal(test.exp2, test.val2) then\r\n                                out[#out + 1] = \"   \"..test.exp2..\" -> \".._tostring(test.val2)\r\n                            end\r\n                        end\r\n                    end\r\n                end",
    "type": "statement:if"
  }, {
    "id": 117,
    "text": "for _, output in ipairs(context.output) do\r\n                        out[#out + 1] = _G.tostring(output)\r\n                    end",
    "type": "statement:genericfor"
  }, {
    "id": 118,
    "text": "out[#out + 1] = _G.tostring(output)",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "if context.comments then\r\n                      out[#out + 1] = context.comments\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 120,
    "text": "out[#out + 1] = context.comments",
    "type": "statement:assign"
  }, {
    "id": 121,
    "text": "for ct, test in ipairs (context.tests) do\r\n                        if not test.passed then\r\n                            if suite.source[test.linenumber] then\r\n                                out[#out + 1] = \"   #\"..test.linenumber..\" \"..suite.source[test.linenumber]\r\n                            end\r\n                            \r\n                            if not isTerminal(test.exp1, test.val1) then\r\n                                out[#out + 1] = \"   \"..test.exp1..\" -> \".._tostring(test.val1)\r\n                            end\r\n                            \r\n                            if not isTerminal(test.exp2, test.val2) then\r\n                                out[#out + 1] = \"   \"..test.exp2..\" -> \".._tostring(test.val2)\r\n                            end\r\n                        end\r\n                    end",
    "type": "statement:genericfor"
  }, {
    "id": 122,
    "text": "if not test.passed then\r\n                            if suite.source[test.linenumber] then\r\n                                out[#out + 1] = \"   #\"..test.linenumber..\" \"..suite.source[test.linenumber]\r\n                            end\r\n                            \r\n                            if not isTerminal(test.exp1, test.val1) then\r\n                                out[#out + 1] = \"   \"..test.exp1..\" -> \".._tostring(test.val1)\r\n                            end\r\n                            \r\n                            if not isTerminal(test.exp2, test.val2) then\r\n                                out[#out + 1] = \"   \"..test.exp2..\" -> \".._tostring(test.val2)\r\n                            end\r\n                        end",
    "type": "statement:if"
  }, {
    "id": 123,
    "text": "if suite.source[test.linenumber] then\r\n                                out[#out + 1] = \"   #\"..test.linenumber..\" \"..suite.source[test.linenumber]\r\n                            end",
    "type": "statement:if"
  }, {
    "id": 124,
    "text": "out[#out + 1] = \"   #\"..test.linenumber..\" \"..suite.source[test.linenumber]",
    "type": "statement:assign"
  }, {
    "id": 125,
    "text": "if not isTerminal(test.exp1, test.val1) then\r\n                                out[#out + 1] = \"   \"..test.exp1..\" -> \".._tostring(test.val1)\r\n                            end",
    "type": "statement:if"
  }, {
    "id": 126,
    "text": "out[#out + 1] = \"   \"..test.exp1..\" -> \".._tostring(test.val1)",
    "type": "statement:assign"
  }, {
    "id": 127,
    "text": "if not isTerminal(test.exp2, test.val2) then\r\n                                out[#out + 1] = \"   \"..test.exp2..\" -> \".._tostring(test.val2)\r\n                            end",
    "type": "statement:if"
  }, {
    "id": 128,
    "text": "out[#out + 1] = \"   \"..test.exp2..\" -> \".._tostring(test.val2)",
    "type": "statement:assign"
  }, {
    "id": 129,
    "text": "out[#out + 1] = \"-> \"..suite.title..\" \"..suite.filename..\" OK!\"",
    "type": "statement:assign"
  }, {
    "id": 130,
    "text": "out[#out + 1] = \"_________________\"",
    "type": "statement:assign"
  }, {
    "id": 131,
    "text": "out[#out + 1] = \"Tests: \"..results.failed + results.passed",
    "type": "statement:assign"
  }, {
    "id": 132,
    "text": "out[#out + 1] = \"Failures: \"..results.failed",
    "type": "statement:assign"
  }, {
    "id": 133,
    "text": "out[#out + 1] = \"Errors: \"..results.errors",
    "type": "statement:assign"
  }, {
    "id": 134,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 135,
    "text": "local function _newcontext_tsc(...)\r\n   local args = { ... }\r\n   for i = 1, #args do args[i] = tostring(args[i]) end\r\n   return { parent = 0, name = table.concat(args, \", \"), context = true }\r\nend",
    "type": "function"
  }, {
    "id": 136,
    "text": "local args = { ... }",
    "type": "statement:localassign"
  }, {
    "id": 137,
    "text": "for i = 1, #args do args[i] = tostring(args[i]) end",
    "type": "statement:numericfor"
  }, {
    "id": 138,
    "text": "args[i] = tostring(args[i])",
    "type": "statement:assign"
  }, {
    "id": 139,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 140,
    "text": "local function transform_comments(s)\r\n  return s:gsub(\"%-%-%s*\", \"\"):gsub(\"\\n\", \", \"):gsub(\"\\r\", \"\")\r\nend",
    "type": "function"
  }, {
    "id": 141,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 142,
    "text": "function _newassert_tsc(contexts, context)\r\n    local parent = #contexts\r\n    return function(val1, op, val2, msg, exp1, exp2, comments, str, func)\r\n        if context then context.has_asserts = true end\r\n\r\n        if comments then\r\n            context = _newcontext_tsc(transform_comments(comments))\r\n            contexts[#contexts + 1] = context\r\n            parent = #contexts\r\n        end        \r\n        \r\n\tif not msg then\r\n\t  if op then msg = (exp1 .. ' ' .. op .. ' ' .. exp2) else msg = exp1 end\r\n\tend\r\n\r\n        local test = { parent = parent, name = msg, test = func }\r\n        contexts[#contexts + 1] = test\r\n\r\n        --test.linenumber = getinfo(2, \"l\").currentline\r\n        --test.traceback = traceback(\"\", 2)\r\n      end, function (str1, op, str2, msg, com, str, e)\r\n\t     if not msg then\r\n\t       if op then msg = (str1 .. ' ' .. op .. ' ' .. str2) else msg = str1 end\r\n\t     end\r\n\t     contexts[#contexts + 1] =\r\n\t       { parent = parent, name = msg, test = function () error(e) end } \r\n\t   end\r\nend",
    "type": "function"
  }, {
    "id": 143,
    "text": "local parent = #contexts",
    "type": "statement:localassign"
  }, {
    "id": 144,
    "text": "if context then context.has_asserts = true end",
    "type": "statement:if"
  }, {
    "id": 145,
    "text": "context.has_asserts = true",
    "type": "statement:assign"
  }, {
    "id": 146,
    "text": "if comments then\r\n            context = _newcontext_tsc(transform_comments(comments))\r\n            contexts[#contexts + 1] = context\r\n            parent = #contexts\r\n        end",
    "type": "statement:if"
  }, {
    "id": 147,
    "text": "context = _newcontext_tsc(transform_comments(comments))",
    "type": "statement:assign"
  }, {
    "id": 148,
    "text": "contexts[#contexts + 1] = context",
    "type": "statement:assign"
  }, {
    "id": 149,
    "text": "parent = #contexts",
    "type": "statement:assign"
  }, {
    "id": 150,
    "text": "if not msg then\r\n\t  if op then msg = (exp1 .. ' ' .. op .. ' ' .. exp2) else msg = exp1 end\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 151,
    "text": "if op then msg = (exp1 .. ' ' .. op .. ' ' .. exp2) else msg = exp1 end",
    "type": "statement:if"
  }, {
    "id": 152,
    "text": "msg = (exp1 .. ' ' .. op .. ' ' .. exp2)",
    "type": "statement:assign"
  }, {
    "id": 153,
    "text": "msg = exp1",
    "type": "statement:assign"
  }, {
    "id": 154,
    "text": "local test = { parent = parent, name = msg, test = func }",
    "type": "statement:localassign"
  }, {
    "id": 155,
    "text": "contexts[#contexts + 1] = test",
    "type": "statement:assign"
  }, {
    "id": 156,
    "text": "if not msg then\r\n\t       if op then msg = (str1 .. ' ' .. op .. ' ' .. str2) else msg = str1 end\r\n\t     end",
    "type": "statement:if"
  }, {
    "id": 157,
    "text": "if op then msg = (str1 .. ' ' .. op .. ' ' .. str2) else msg = str1 end",
    "type": "statement:if"
  }, {
    "id": 158,
    "text": "msg = (str1 .. ' ' .. op .. ' ' .. str2)",
    "type": "statement:assign"
  }, {
    "id": 159,
    "text": "msg = str1",
    "type": "statement:assign"
  }, {
    "id": 160,
    "text": "contexts[#contexts + 1] =\r\n\t       { parent = parent, name = msg, test = function () error(e) end }",
    "type": "statement:assign"
  }, {
    "id": 161,
    "text": "error(e)",
    "type": "statement:functioncall"
  }, {
    "id": 162,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 163,
    "text": "local function _loadstring_tsc(s, name)\r\n    local s2 = string.gsub(s, \"^#![^\\n]*\\n\", \r\n        \"-- keeps one line in place of an eventual one with a #! at the start\\n\")\r\n    s2 = stir(s2) ; --print(s2)\r\n    return loadstring(s2, name)\r\nend",
    "type": "function"
  }, {
    "id": 164,
    "text": "local s2 = string.gsub(s, \"^#![^\\n]*\\n\", \r\n        \"-- keeps one line in place of an eventual one with a #! at the start\\n\")",
    "type": "statement:localassign"
  }, {
    "id": 165,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 166,
    "text": "local function _loadfile_tsc(filename)\r\n    local file, func, errmsg\r\n    file, errmsg = io.open(filename)\r\n    if not file then\r\n        return nil, errmsg\r\n    else\r\n        local str = file:read'*a'\r\n        func, errmsg = _loadstring_tsc(str, filename)\r\n    end\r\n    return func, errmsg\r\nend",
    "type": "function"
  }, {
    "id": 167,
    "text": "if not file then\r\n        return nil, errmsg\r\n    else\r\n        local str = file:read'*a'\r\n        func, errmsg = _loadstring_tsc(str, filename)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 168,
    "text": "func, errmsg = _loadstring_tsc(str, filename)",
    "type": "statement:assign"
  }, {
    "id": 169,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 170,
    "text": "local function _test(filename, contexts)\r\n    f, errmsg = _loadfile_tsc(filename)\r\n    if not f then\r\n       error(\"cannot load file \" .. filename .. \": \" .. errmsg)\r\n    else\r\n        -- runs the test suite\r\n        local _print = _G.print\r\n        local _write = _G.io.write\r\n        local ___STIR_assert = _G.___STIR_assert\r\n        --local lf = _G.loadfile\r\n        --local df = _G.dofile\r\n        --local ls = _G.loadstring\r\n        --local ds = _G.dostring\r\n        --_G.loadfile = _loadfile\r\n        --_G.dofile = _dofile\r\n        --_G.loadstring = _loadstring\r\n        --_G.dostring = _dostring\r\n        \r\n        local context \r\n        _G.___STIR_assert, _G.___STIR_error = _newassert_tsc(contexts, context) -- so assertions works even without a previous context\r\n        \r\n        -- separate contexts at every print or io.write\r\n        -- keeping the output stored in the context table\r\n        _G.print = function(...)\r\n            if (not context) or context.has_asserts then\r\n                -- create a new context if there was an assert before the previous context\r\n                context = _newcontext_tsc(...)\r\n                contexts[#contexts + 1] = context\r\n            else\r\n                -- converts all parameters to strings\r\n                local temp = {}\r\n                local args = { context.name, ... }\r\n                for i = 1, #args do \r\n                   local s = tostring(args[i])\r\n                   if s ~= \"\" then temp[#temp + 1] = s end\r\n                end\r\n                -- and concatenates them\r\n                context.name = table.concat(temp, \", \")\r\n            end\r\n            _G.___STIR_assert = _newassert_tsc(contexts, context)\r\n        end\r\n        \r\n        _G.io.write = _G.print\r\n        \r\n        -- executes the suite\r\n        local res, errmsg = xpcall(f, function(err) return err end)\r\n        if not res then\r\n            -- error executing the suite\r\n            error(\"cannot load contexts from file \" .. filename .. \": \" .. errmsg)\r\n        end\r\n\r\n        -- restores the environment\r\n        --_G.loadfile = lf\r\n        --_G.dofile = df\r\n        --_G.loadstring = ls\r\n        --_G.dostring = ds\r\n        _G.print = _print\r\n        _G.io.write = _write\r\n        _G.___STIR_assert = ___STIR_assert\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 171,
    "text": "f, errmsg = _loadfile_tsc(filename)",
    "type": "statement:assign"
  }, {
    "id": 172,
    "text": "if not f then\r\n       error(\"cannot load file \" .. filename .. \": \" .. errmsg)\r\n    else\r\n        -- runs the test suite\r\n        local _print = _G.print\r\n        local _write = _G.io.write\r\n        local ___STIR_assert = _G.___STIR_assert\r\n        --local lf = _G.loadfile\r\n        --local df = _G.dofile\r\n        --local ls = _G.loadstring\r\n        --local ds = _G.dostring\r\n        --_G.loadfile = _loadfile\r\n        --_G.dofile = _dofile\r\n        --_G.loadstring = _loadstring\r\n        --_G.dostring = _dostring\r\n        \r\n        local context \r\n        _G.___STIR_assert, _G.___STIR_error = _newassert_tsc(contexts, context) -- so assertions works even without a previous context\r\n        \r\n        -- separate contexts at every print or io.write\r\n        -- keeping the output stored in the context table\r\n        _G.print = function(...)\r\n            if (not context) or context.has_asserts then\r\n                -- create a new context if there was an assert before the previous context\r\n                context = _newcontext_tsc(...)\r\n                contexts[#contexts + 1] = context\r\n            else\r\n                -- converts all parameters to strings\r\n                local temp = {}\r\n                local args = { context.name, ... }\r\n                for i = 1, #args do \r\n                   local s = tostring(args[i])\r\n                   if s ~= \"\" then temp[#temp + 1] = s end\r\n                end\r\n                -- and concatenates them\r\n                context.name = table.concat(temp, \", \")\r\n            end\r\n            _G.___STIR_assert = _newassert_tsc(contexts, context)\r\n        end\r\n        \r\n        _G.io.write = _G.print\r\n        \r\n        -- executes the suite\r\n        local res, errmsg = xpcall(f, function(err) return err end)\r\n        if not res then\r\n            -- error executing the suite\r\n            error(\"cannot load contexts from file \" .. filename .. \": \" .. errmsg)\r\n        end\r\n\r\n        -- restores the environment\r\n        --_G.loadfile = lf\r\n        --_G.dofile = df\r\n        --_G.loadstring = ls\r\n        --_G.dostring = ds\r\n        _G.print = _print\r\n        _G.io.write = _write\r\n        _G.___STIR_assert = ___STIR_assert\r\n    end",
    "type": "statement:if"
  }, {
    "id": 173,
    "text": "error(\"cannot load file \" .. filename .. \": \" .. errmsg)",
    "type": "statement:functioncall"
  }, {
    "id": 174,
    "text": "local context",
    "type": "statement:localassign"
  }, {
    "id": 175,
    "text": "_G.___STIR_assert, _G.___STIR_error = _newassert_tsc(contexts, context)",
    "type": "statement:assign"
  }, {
    "id": 176,
    "text": "_G.print = function(...)\r\n            if (not context) or context.has_asserts then\r\n                -- create a new context if there was an assert before the previous context\r\n                context = _newcontext_tsc(...)\r\n                contexts[#contexts + 1] = context\r\n            else\r\n                -- converts all parameters to strings\r\n                local temp = {}\r\n                local args = { context.name, ... }\r\n                for i = 1, #args do \r\n                   local s = tostring(args[i])\r\n                   if s ~= \"\" then temp[#temp + 1] = s end\r\n                end\r\n                -- and concatenates them\r\n                context.name = table.concat(temp, \", \")\r\n            end\r\n            _G.___STIR_assert = _newassert_tsc(contexts, context)\r\n        end",
    "type": "statement:assign"
  }, {
    "id": 177,
    "text": "if (not context) or context.has_asserts then\r\n                -- create a new context if there was an assert before the previous context\r\n                context = _newcontext_tsc(...)\r\n                contexts[#contexts + 1] = context\r\n            else\r\n                -- converts all parameters to strings\r\n                local temp = {}\r\n                local args = { context.name, ... }\r\n                for i = 1, #args do \r\n                   local s = tostring(args[i])\r\n                   if s ~= \"\" then temp[#temp + 1] = s end\r\n                end\r\n                -- and concatenates them\r\n                context.name = table.concat(temp, \", \")\r\n            end",
    "type": "statement:if"
  }, {
    "id": 178,
    "text": "context = _newcontext_tsc(...)",
    "type": "statement:assign"
  }, {
    "id": 179,
    "text": "local args = { context.name, ... }",
    "type": "statement:localassign"
  }, {
    "id": 180,
    "text": "for i = 1, #args do \r\n                   local s = tostring(args[i])\r\n                   if s ~= \"\" then temp[#temp + 1] = s end\r\n                end",
    "type": "statement:numericfor"
  }, {
    "id": 181,
    "text": "local s = tostring(args[i])",
    "type": "statement:localassign"
  }, {
    "id": 182,
    "text": "if s ~= \"\" then temp[#temp + 1] = s end",
    "type": "statement:if"
  }, {
    "id": 183,
    "text": "temp[#temp + 1] = s",
    "type": "statement:assign"
  }, {
    "id": 184,
    "text": "context.name = table.concat(temp, \", \")",
    "type": "statement:assign"
  }, {
    "id": 185,
    "text": "_G.___STIR_assert = _newassert_tsc(contexts, context)",
    "type": "statement:assign"
  }, {
    "id": 186,
    "text": "if not res then\r\n            -- error executing the suite\r\n            error(\"cannot load contexts from file \" .. filename .. \": \" .. errmsg)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 187,
    "text": "error(\"cannot load contexts from file \" .. filename .. \": \" .. errmsg)",
    "type": "statement:functioncall"
  }, {
    "id": 188,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 189,
    "text": "function(...)\r\n            if (not context) or context.has_asserts then\r\n                -- create a new context if there was an assert before the previous context\r\n                context = _newcontext_tsc(...)\r\n                contexts[#contexts + 1] = context\r\n            else\r\n                -- converts all parameters to strings\r\n                local temp = {}\r\n                local args = { context.name, ... }\r\n                for i = 1, #args do \r\n                   local s = tostring(args[i])\r\n                   if s ~= \"\" then temp[#temp + 1] = s end\r\n                end\r\n                -- and concatenates them\r\n                context.name = table.concat(temp, \", \")\r\n            end\r\n            _G.___STIR_assert = _newassert_tsc(contexts, context)\r\n        end",
    "type": "function"
  }, {
    "id": 190,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 191,
    "text": "function runner()\r\n    local runner = {results = {passed = 0, failed = 0, errors = 0, suites = {} } }\r\n    setmetatable(runner, {__index = {test = _dofile, summary = _summary} })\r\n    return runner\r\nend",
    "type": "function"
  }, {
    "id": 192,
    "text": "local runner = {results = {passed = 0, failed = 0, errors = 0, suites = {} } }",
    "type": "statement:localassign"
  }, {
    "id": 193,
    "text": "setmetatable(runner, {__index = {test = _dofile, summary = _summary} })",
    "type": "statement:functioncall"
  }, {
    "id": 194,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 195,
    "text": "function load_contexts(filename, contexts)\r\n  _test(filename, contexts)\r\nend",
    "type": "function"
  }, {
    "id": 196,
    "text": "_test(filename, contexts)",
    "type": "statement:functioncall"
  }, {
    "id": 197,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 198,
    "text": "function isTerminal(exp, val)\r\n    if not exp then return true end\r\n    local chunk = loadstring('return '..exp)\r\n    local env = {}\r\n    setmetatable(env, {__index = function() return \"___nil___\" end})\r\n    setfenv(chunk, env)\r\n    local status, ret = pcall(chunk)\r\n    if status then\r\n        return ret == val\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 199,
    "text": "if not exp then return true end",
    "type": "statement:if"
  }, {
    "id": 200,
    "text": "local chunk = loadstring('return '..exp)",
    "type": "statement:localassign"
  }, {
    "id": 201,
    "text": "local env = {}",
    "type": "statement:localassign"
  }, {
    "id": 202,
    "text": "setmetatable(env, {__index = function() return \"___nil___\" end})",
    "type": "statement:functioncall"
  }, {
    "id": 203,
    "text": "setfenv(chunk, env)",
    "type": "statement:functioncall"
  }, {
    "id": 204,
    "text": "local status, ret = pcall(chunk)",
    "type": "statement:localassign"
  }, {
    "id": 205,
    "text": "if status then\r\n        return ret == val\r\n    end",
    "type": "statement:if"
  }, {
    "id": 206,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 207,
    "text": "function() return {linenumber = \"???\"} end",
    "type": "function"
  }, {
    "id": 208,
    "text": "function() return \"No traceback information: debug is not available\" end",
    "type": "function"
  }, {
    "id": 209,
    "text": "function(val1, op, val2, msg, exp1, exp2, comments)\r\n        if comments then\r\n            context = _newcontext(comments)\r\n            suite.contexts[#suite.contexts + 1] = context\r\n        end        \r\n      \r\n        local test = { message = msg or \"\" }\r\n        context.tests[#context.tests + 1] = test\r\n\r\n        local PASSED = false\r\n\r\n        if not op then\r\n          PASSED = val1\r\n        elseif op == '==' then\r\n          PASSED = val1 == val2\r\n        elseif op == '~=' then\r\n          PASSED = val1 ~= val2\r\n        end\r\n\r\n        if PASSED then\r\n          context.passed = context.passed + 1\r\n          suite.passed = suite.passed + 1\r\n        else\r\n          context.failed = context.failed + 1\r\n          suite.failed = suite.failed + 1\r\n        end\r\n\r\n        test.val1 = val1\r\n        test.op = op\r\n        test.val2 = val2\r\n        test.exp1 = exp1\r\n        test.exp2 = exp2\r\n        test.msg = msg\r\n        test.passed = PASSED\r\n        test.linenumber = getinfo(2, \"l\").currentline\r\n        test.traceback = traceback(\"\", 2)\r\n        return PASSED, msg\r\n    end",
    "type": "function"
  }, {
    "id": 210,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 211,
    "text": "function(err) return err end",
    "type": "function"
  }, {
    "id": 212,
    "text": "function(...)\r\n        -- runs the test suite\r\n        local _print = _G.print\r\n        local _write = _G.io.write\r\n        local ___STIR_assert = _G.___STIR_assert\r\n        \r\n        local lf = _G.loadfile\r\n        local df = _G.dofile\r\n\t\tlocal ls = _G.loadstring\r\n\r\n        _G.loadfile = function(name) return _loadfile(self, name, title) end\r\n        _G.dofile = function (name) return _dofile(self, name, title) end\r\n\t\t_G.loadstring = function(str, name) return _loadstring(self, str, name, title) end\r\n\t\r\n        \r\n        local suite = _newsuite(s, chunckname, title)\r\n\r\n        local context = _newcontext(\"\")\r\n        _G.___STIR_assert = _newassert(suite, context) -- so assertions works even without a previous context\r\n\t_G.___STIR_error = error\r\n        suite.contexts[#suite.contexts + 1] = context\r\n        \r\n        -- separate contexts at every print or io.write\r\n        -- keeping the output stored in the context table\r\n        _G.print = function(...)\r\n            local context = suite.contexts[#suite.contexts]\r\n            if context.passed + context.failed > 0 then\r\n                -- create a new context if there was an assert before the previous context\r\n                context = _newcontext(...)\r\n                suite.contexts[#suite.contexts + 1] = context\r\n            else\r\n\t\t-- converts all parameters to strings\r\n\t\tlocal temp = {}\r\n\t\tfor i = 1, _G.select('#',...) do\r\n\t\t\ttable.insert(temp, _G.tostring(_G.select(i,...)))\r\n\t\tend\r\n\t\t-- and concatenates them\r\n\t\tcontext.output[#context.output + 1] = table.concat(temp, \"\\t\")\r\n            end\r\n            _G.___STIR_assert = _newassert(suite, context)\r\n        end\r\n        \r\n        _G.io.write = _G.print\r\n        \r\n        -- executes the suite\r\n        local res, errmsg = xpcall(f, function(err) return err end)\r\n        if not res then\r\n            -- error executing the suite\r\n            errmsg = errmsg or \"\"\r\n            suite.error = string.gsub(errmsg, '%[string \"'..chunckname..'\"%]', chunckname)\r\n            results.errors = results.errors + 1\r\n        end\r\n        results.passed = results.passed + suite.passed\r\n        results.failed = results.failed + suite.failed\r\n        results.suites[#results.suites + 1] = suite\r\n\r\n        -- restores the environment\r\n        _G.loadfile = lf\r\n        _G.dofile = df\r\n\t\t_G.loadstring = ls\r\n        _G.print = _print\r\n        _G.io.write = _write\r\n        _G.___STIR_assert = ___STIR_assert\r\n        end",
    "type": "function"
  }, {
    "id": 213,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 214,
    "text": "function(val1, op, val2, msg, exp1, exp2, comments, str, func)\r\n        if context then context.has_asserts = true end\r\n\r\n        if comments then\r\n            context = _newcontext_tsc(transform_comments(comments))\r\n            contexts[#contexts + 1] = context\r\n            parent = #contexts\r\n        end        \r\n        \r\n\tif not msg then\r\n\t  if op then msg = (exp1 .. ' ' .. op .. ' ' .. exp2) else msg = exp1 end\r\n\tend\r\n\r\n        local test = { parent = parent, name = msg, test = func }\r\n        contexts[#contexts + 1] = test\r\n\r\n        --test.linenumber = getinfo(2, \"l\").currentline\r\n        --test.traceback = traceback(\"\", 2)\r\n      end",
    "type": "function"
  }, {
    "id": 215,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 216,
    "text": "function () error(e) end",
    "type": "function"
  }, {
    "id": 217,
    "text": "function (str1, op, str2, msg, com, str, e)\r\n\t     if not msg then\r\n\t       if op then msg = (str1 .. ' ' .. op .. ' ' .. str2) else msg = str1 end\r\n\t     end\r\n\t     contexts[#contexts + 1] =\r\n\t       { parent = parent, name = msg, test = function () error(e) end } \r\n\t   end",
    "type": "function"
  }, {
    "id": 218,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 219,
    "text": "function(err) return err end",
    "type": "function"
  }, {
    "id": 220,
    "text": "function() return \"___nil___\" end",
    "type": "function"
  }, {
    "id": 221,
    "text": "",
    "type": "function container"
  }, {
    "id": 222,
    "text": "",
    "type": "function container"
  }, {
    "id": 223,
    "text": "io",
    "type": "module"
  }, {
    "id": 224,
    "text": "open",
    "type": "global function"
  }, {
    "id": 225,
    "text": "string",
    "type": "module"
  }, {
    "id": 226,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 227,
    "text": "table",
    "type": "module"
  }, {
    "id": 228,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 229,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 230,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 231,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 232,
    "text": "xpcall",
    "type": "global function"
  }, {
    "id": 233,
    "text": "lfs",
    "type": "module"
  }, {
    "id": 234,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 235,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 236,
    "text": "module",
    "type": "global function"
  }, {
    "id": 237,
    "text": "setfenv",
    "type": "global function"
  }, {
    "id": 238,
    "text": "error",
    "type": "global function"
  }, {
    "id": 239,
    "text": "type",
    "type": "global function"
  }, {
    "id": 240,
    "text": "select",
    "type": "global function"
  }, {
    "id": 241,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 242,
    "text": "next",
    "type": "global function"
  }, {
    "id": 243,
    "text": "loadstring",
    "type": "global function"
  }, {
    "id": 244,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 245,
    "text": "stir",
    "type": "global function"
  }, {
    "id": 246,
    "text": "require",
    "type": "global function"
  }, {
    "id": 247,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 248,
    "text": "",
    "type": "global variable"
  }, {
    "id": 249,
    "text": "",
    "type": "variable container"
  }, {
    "id": 250,
    "text": "",
    "type": "require container"
  }, {
    "id": 251,
    "text": "",
    "type": "local variable"
  }, {
    "id": 252,
    "text": "",
    "type": "n/a"
  }, {
    "id": 253,
    "text": "",
    "type": "local variable"
  }, {
    "id": 254,
    "text": "",
    "type": "n/a"
  }, {
    "id": 255,
    "text": "",
    "type": "local variable"
  }, {
    "id": 256,
    "text": "",
    "type": "n/a"
  }, {
    "id": 257,
    "text": "",
    "type": "local variable"
  }, {
    "id": 258,
    "text": "",
    "type": "n/a"
  }, {
    "id": 259,
    "text": "",
    "type": "local variable"
  }, {
    "id": 260,
    "text": "",
    "type": "n/a"
  }, {
    "id": 261,
    "text": "",
    "type": "local variable"
  }, {
    "id": 262,
    "text": "",
    "type": "n/a"
  }, {
    "id": 263,
    "text": "",
    "type": "local variable"
  }, {
    "id": 264,
    "text": "",
    "type": "n/a"
  }, {
    "id": 265,
    "text": "",
    "type": "local variable"
  }, {
    "id": 266,
    "text": "",
    "type": "n/a"
  }, {
    "id": 267,
    "text": "",
    "type": "local variable"
  }, {
    "id": 268,
    "text": "",
    "type": "n/a"
  }, {
    "id": 269,
    "text": "",
    "type": "local variable"
  }, {
    "id": 270,
    "text": "",
    "type": "n/a"
  }, {
    "id": 271,
    "text": "",
    "type": "local variable"
  }, {
    "id": 272,
    "text": "",
    "type": "n/a"
  }, {
    "id": 273,
    "text": "",
    "type": "local variable"
  }, {
    "id": 274,
    "text": "",
    "type": "n/a"
  }, {
    "id": 275,
    "text": "",
    "type": "local variable"
  }, {
    "id": 276,
    "text": "",
    "type": "n/a"
  }, {
    "id": 277,
    "text": "",
    "type": "local variable"
  }, {
    "id": 278,
    "text": "",
    "type": "n/a"
  }, {
    "id": 279,
    "text": "",
    "type": "local variable"
  }, {
    "id": 280,
    "text": "",
    "type": "n/a"
  }, {
    "id": 281,
    "text": "",
    "type": "local variable"
  }, {
    "id": 282,
    "text": "",
    "type": "n/a"
  }, {
    "id": 283,
    "text": "",
    "type": "local variable"
  }, {
    "id": 284,
    "text": "",
    "type": "n/a"
  }, {
    "id": 285,
    "text": "",
    "type": "local variable"
  }, {
    "id": 286,
    "text": "",
    "type": "n/a"
  }, {
    "id": 287,
    "text": "",
    "type": "local variable"
  }, {
    "id": 288,
    "text": "",
    "type": "n/a"
  }, {
    "id": 289,
    "text": "",
    "type": "global variable"
  }, {
    "id": 290,
    "text": "",
    "type": "global variable"
  }, {
    "id": 291,
    "text": "",
    "type": "global variable"
  }, {
    "id": 292,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 293,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 294,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 295,
    "text": "",
    "type": "require local variable"
  } ]
}