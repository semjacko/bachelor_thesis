{
  "_filename": "helper.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/shake/src/apps/shake/helper.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 6,
    "label": "has",
    "to": 11
  }, {
    "from": 6,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 14
  }, {
    "from": 2,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 15
  }, {
    "from": 18,
    "label": "has",
    "to": 15
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 18,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 15
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 33
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 29,
    "label": "has",
    "to": 35
  }, {
    "from": 29,
    "label": "has",
    "to": 36
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 26,
    "label": "has",
    "to": 37
  }, {
    "from": 24,
    "label": "has",
    "to": 38
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 39
  }, {
    "from": 24,
    "label": "has",
    "to": 40
  }, {
    "from": 24,
    "label": "has",
    "to": 41
  }, {
    "from": 24,
    "label": "has",
    "to": 42
  }, {
    "from": 24,
    "label": "has",
    "to": 37
  }, {
    "from": 24,
    "label": "has",
    "to": 43
  }, {
    "from": 24,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 15
  }, {
    "from": 45,
    "label": "has",
    "to": 25
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 52,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 52,
    "label": "has",
    "to": 59
  }, {
    "from": 51,
    "label": "has",
    "to": 60
  }, {
    "from": 51,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 61,
    "label": "has",
    "to": 64
  }, {
    "from": 61,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 61,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 61,
    "label": "has",
    "to": 69
  }, {
    "from": 61,
    "label": "has",
    "to": 70
  }, {
    "from": 61,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 61,
    "label": "has",
    "to": 73
  }, {
    "from": 61,
    "label": "has",
    "to": 74
  }, {
    "from": 61,
    "label": "has",
    "to": 75
  }, {
    "from": 61,
    "label": "has",
    "to": 76
  }, {
    "from": 61,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 61,
    "label": "has",
    "to": 80
  }, {
    "from": 51,
    "label": "has",
    "to": 81
  }, {
    "from": 45,
    "label": "has",
    "to": 82
  }, {
    "from": 83,
    "label": "has",
    "to": 15
  }, {
    "from": 83,
    "label": "has",
    "to": 25
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 27
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 33
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 29,
    "label": "has",
    "to": 35
  }, {
    "from": 29,
    "label": "has",
    "to": 36
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 84,
    "label": "has",
    "to": 37
  }, {
    "from": 83,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "has",
    "to": 15
  }, {
    "from": 87,
    "label": "has",
    "to": 25
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 88,
    "label": "has",
    "to": 91
  }, {
    "from": 88,
    "label": "has",
    "to": 92
  }, {
    "from": 87,
    "label": "has",
    "to": 93
  }, {
    "from": 94,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "has",
    "to": 25
  }, {
    "from": 96,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 33
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 29,
    "label": "has",
    "to": 35
  }, {
    "from": 29,
    "label": "has",
    "to": 36
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 26,
    "label": "has",
    "to": 37
  }, {
    "from": 96,
    "label": "has",
    "to": 38
  }, {
    "from": 96,
    "label": "has",
    "to": 27
  }, {
    "from": 96,
    "label": "has",
    "to": 39
  }, {
    "from": 96,
    "label": "has",
    "to": 40
  }, {
    "from": 96,
    "label": "has",
    "to": 41
  }, {
    "from": 96,
    "label": "has",
    "to": 42
  }, {
    "from": 96,
    "label": "has",
    "to": 37
  }, {
    "from": 96,
    "label": "has",
    "to": 43
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 98,
    "label": "has",
    "to": 25
  }, {
    "from": 98,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 52,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 52,
    "label": "has",
    "to": 59
  }, {
    "from": 51,
    "label": "has",
    "to": 60
  }, {
    "from": 51,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 61,
    "label": "has",
    "to": 64
  }, {
    "from": 61,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 61,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 61,
    "label": "has",
    "to": 69
  }, {
    "from": 61,
    "label": "has",
    "to": 70
  }, {
    "from": 61,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 61,
    "label": "has",
    "to": 73
  }, {
    "from": 61,
    "label": "has",
    "to": 74
  }, {
    "from": 61,
    "label": "has",
    "to": 75
  }, {
    "from": 61,
    "label": "has",
    "to": 76
  }, {
    "from": 61,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 61,
    "label": "has",
    "to": 80
  }, {
    "from": 51,
    "label": "has",
    "to": 81
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 100,
    "label": "has",
    "to": 25
  }, {
    "from": 100,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 27
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 33
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 29,
    "label": "has",
    "to": 35
  }, {
    "from": 29,
    "label": "has",
    "to": 36
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 84,
    "label": "has",
    "to": 37
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 102,
    "label": "has",
    "to": 25
  }, {
    "from": 102,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 88,
    "label": "has",
    "to": 91
  }, {
    "from": 88,
    "label": "has",
    "to": 92
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 2,
    "label": "calls",
    "to": 105
  }, {
    "from": 2,
    "label": "calls",
    "to": 105
  }, {
    "from": 2,
    "label": "calls",
    "to": 105
  }, {
    "from": 18,
    "label": "calls",
    "to": 107
  }, {
    "from": 24,
    "label": "calls",
    "to": 107
  }, {
    "from": 45,
    "label": "calls",
    "to": 107
  }, {
    "from": 45,
    "label": "calls",
    "to": 107
  }, {
    "from": 45,
    "label": "calls",
    "to": 107
  }, {
    "from": 45,
    "label": "calls",
    "to": 107
  }, {
    "from": 83,
    "label": "calls",
    "to": 107
  }, {
    "from": 2,
    "label": "calls",
    "to": 108
  }, {
    "from": 2,
    "label": "calls",
    "to": 108
  }, {
    "from": 2,
    "label": "calls",
    "to": 110
  }, {
    "from": 18,
    "label": "calls",
    "to": 110
  }, {
    "from": 45,
    "label": "calls",
    "to": 110
  }, {
    "from": 2,
    "label": "calls",
    "to": 112
  }, {
    "from": 2,
    "label": "calls",
    "to": 112
  }, {
    "from": 2,
    "label": "calls",
    "to": 112
  }, {
    "from": 16,
    "label": "calls",
    "to": 112
  }, {
    "from": 45,
    "label": "calls",
    "to": 112
  }, {
    "from": 45,
    "label": "calls",
    "to": 112
  }, {
    "from": 18,
    "label": "calls",
    "to": 109
  }, {
    "from": 18,
    "label": "calls",
    "to": 109
  }, {
    "from": 24,
    "label": "calls",
    "to": 109
  }, {
    "from": 24,
    "label": "calls",
    "to": 109
  }, {
    "from": 24,
    "label": "calls",
    "to": 109
  }, {
    "from": 24,
    "label": "calls",
    "to": 109
  }, {
    "from": 24,
    "label": "calls",
    "to": 109
  }, {
    "from": 24,
    "label": "calls",
    "to": 109
  }, {
    "from": 24,
    "label": "calls",
    "to": 109
  }, {
    "from": 24,
    "label": "calls",
    "to": 109
  }, {
    "from": 24,
    "label": "calls",
    "to": 109
  }, {
    "from": 24,
    "label": "calls",
    "to": 109
  }, {
    "from": 24,
    "label": "calls",
    "to": 109
  }, {
    "from": 24,
    "label": "calls",
    "to": 109
  }, {
    "from": 24,
    "label": "calls",
    "to": 109
  }, {
    "from": 24,
    "label": "calls",
    "to": 109
  }, {
    "from": 24,
    "label": "calls",
    "to": 109
  }, {
    "from": 24,
    "label": "calls",
    "to": 109
  }, {
    "from": 24,
    "label": "calls",
    "to": 109
  }, {
    "from": 24,
    "label": "calls",
    "to": 109
  }, {
    "from": 24,
    "label": "calls",
    "to": 109
  }, {
    "from": 24,
    "label": "calls",
    "to": 109
  }, {
    "from": 45,
    "label": "calls",
    "to": 109
  }, {
    "from": 45,
    "label": "calls",
    "to": 109
  }, {
    "from": 45,
    "label": "calls",
    "to": 109
  }, {
    "from": 45,
    "label": "calls",
    "to": 109
  }, {
    "from": 45,
    "label": "calls",
    "to": 109
  }, {
    "from": 45,
    "label": "calls",
    "to": 109
  }, {
    "from": 45,
    "label": "calls",
    "to": 109
  }, {
    "from": 45,
    "label": "calls",
    "to": 109
  }, {
    "from": 45,
    "label": "calls",
    "to": 109
  }, {
    "from": 45,
    "label": "calls",
    "to": 109
  }, {
    "from": 45,
    "label": "calls",
    "to": 109
  }, {
    "from": 45,
    "label": "calls",
    "to": 109
  }, {
    "from": 45,
    "label": "calls",
    "to": 109
  }, {
    "from": 45,
    "label": "calls",
    "to": 109
  }, {
    "from": 45,
    "label": "calls",
    "to": 109
  }, {
    "from": 45,
    "label": "calls",
    "to": 109
  }, {
    "from": 83,
    "label": "calls",
    "to": 109
  }, {
    "from": 83,
    "label": "calls",
    "to": 109
  }, {
    "from": 83,
    "label": "calls",
    "to": 109
  }, {
    "from": 83,
    "label": "calls",
    "to": 109
  }, {
    "from": 83,
    "label": "calls",
    "to": 109
  }, {
    "from": 83,
    "label": "calls",
    "to": 109
  }, {
    "from": 83,
    "label": "calls",
    "to": 109
  }, {
    "from": 83,
    "label": "calls",
    "to": 109
  }, {
    "from": 83,
    "label": "calls",
    "to": 109
  }, {
    "from": 83,
    "label": "calls",
    "to": 109
  }, {
    "from": 83,
    "label": "calls",
    "to": 109
  }, {
    "from": 83,
    "label": "calls",
    "to": 109
  }, {
    "from": 87,
    "label": "calls",
    "to": 109
  }, {
    "from": 87,
    "label": "calls",
    "to": 109
  }, {
    "from": 87,
    "label": "calls",
    "to": 109
  }, {
    "from": 87,
    "label": "calls",
    "to": 109
  }, {
    "from": 2,
    "label": "calls",
    "to": 111
  }, {
    "from": 16,
    "label": "calls",
    "to": 111
  }, {
    "from": 16,
    "label": "calls",
    "to": 2
  }, {
    "from": 18,
    "label": "calls",
    "to": 106
  }, {
    "from": 24,
    "label": "calls",
    "to": 106
  }, {
    "from": 45,
    "label": "calls",
    "to": 16
  }, {
    "from": 1,
    "label": "contains",
    "to": 104
  }, {
    "from": 104,
    "label": "declares",
    "to": 2
  }, {
    "from": 104,
    "label": "declares",
    "to": 16
  }, {
    "from": 104,
    "label": "declares",
    "to": 18
  }, {
    "from": 104,
    "label": "declares",
    "to": 24
  }, {
    "from": 104,
    "label": "declares",
    "to": 45
  }, {
    "from": 104,
    "label": "declares",
    "to": 83
  }, {
    "from": 104,
    "label": "declares",
    "to": 87
  }, {
    "from": 104,
    "label": "declares",
    "to": 94
  }, {
    "from": 104,
    "label": "declares",
    "to": 96
  }, {
    "from": 104,
    "label": "declares",
    "to": 98
  }, {
    "from": 104,
    "label": "declares",
    "to": 100
  }, {
    "from": 104,
    "label": "declares",
    "to": 102
  }, {
    "from": 1,
    "label": "contains",
    "to": 113
  }, {
    "from": 1,
    "label": "contains",
    "to": 114
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "helper",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function _expandtable(t)\n    local s = \"{\"\n    for i,v in pairs (t) do\n        s = s..\"<br />\\n\"\n        if type(v) == \"table\" then\n            local vv = \"{<br />\\n\"\n            for a,b in pairs(v) do\n                vv = string.format (\"%s  %s = %s,<br />\\n\", vv, a, tostring(b))\n            end\n            v = vv..\" },\"\n            s = s..string.format (\" %s = %s\", i, tostring(v))\n        else\n            s = s..string.format (\" %s = %s,\", i, tostring(v))\n        end\n    end\n    if next(t) then\n        s = s..\"<br />\\n\"\n    end\n    s = s..\"}<br />\\n\"\n    return s\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local s = \"{\"",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "for i,v in pairs (t) do\n        s = s..\"<br />\\n\"\n        if type(v) == \"table\" then\n            local vv = \"{<br />\\n\"\n            for a,b in pairs(v) do\n                vv = string.format (\"%s  %s = %s,<br />\\n\", vv, a, tostring(b))\n            end\n            v = vv..\" },\"\n            s = s..string.format (\" %s = %s\", i, tostring(v))\n        else\n            s = s..string.format (\" %s = %s,\", i, tostring(v))\n        end\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 5,
    "text": "s = s..\"<br />\\n\"",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "if type(v) == \"table\" then\n            local vv = \"{<br />\\n\"\n            for a,b in pairs(v) do\n                vv = string.format (\"%s  %s = %s,<br />\\n\", vv, a, tostring(b))\n            end\n            v = vv..\" },\"\n            s = s..string.format (\" %s = %s\", i, tostring(v))\n        else\n            s = s..string.format (\" %s = %s,\", i, tostring(v))\n        end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "local vv = \"{<br />\\n\"",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "for a,b in pairs(v) do\n                vv = string.format (\"%s  %s = %s,<br />\\n\", vv, a, tostring(b))\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 9,
    "text": "vv = string.format (\"%s  %s = %s,<br />\\n\", vv, a, tostring(b))",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "v = vv..\" },\"",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "s = s..string.format (\" %s = %s\", i, tostring(v))",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "s = s..string.format (\" %s = %s,\", i, tostring(v))",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "if next(t) then\n        s = s..\"<br />\\n\"\n    end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "s = s..\"}<br />\\n\"",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 16,
    "text": "local function _tostring(obj)\n    if type(obj) == \"table\" then\n        return _expandtable(obj)\n    else\n        return tostring(obj)\n    end\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "if type(obj) == \"table\" then\n        return _expandtable(obj)\n    else\n        return tostring(obj)\n    end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "function ListModules(modules)\n\treturn function()\n\t\tif not next(modules) then\r\n\t\t    cgilua.put(\"<li><strong>(No modules)</strong></li>\")\r\n\t\telse\r\n\t\t    for _, module_name in ipairs(modules) do\r\n\t\t        cgilua.put([[<li><strong><a href=\"]]..cgilua.mkurlpath(\"module/\"..module_name)..\n\t\t        \t[[\">]]..module_name..[[</a></strong></li>]])\r\n\t\t    end\r\n\t\tend\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "if not next(modules) then\r\n\t\t    cgilua.put(\"<li><strong>(No modules)</strong></li>\")\r\n\t\telse\r\n\t\t    for _, module_name in ipairs(modules) do\r\n\t\t        cgilua.put([[<li><strong><a href=\"]]..cgilua.mkurlpath(\"module/\"..module_name)..\n\t\t        \t[[\">]]..module_name..[[</a></strong></li>]])\r\n\t\t    end\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "cgilua.put(\"<li><strong>(No modules)</strong></li>\")",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "for _, module_name in ipairs(modules) do\r\n\t\t        cgilua.put([[<li><strong><a href=\"]]..cgilua.mkurlpath(\"module/\"..module_name)..\n\t\t        \t[[\">]]..module_name..[[</a></strong></li>]])\r\n\t\t    end",
    "type": "statement:genericfor"
  }, {
    "id": 22,
    "text": "cgilua.put([[<li><strong><a href=\"]]..cgilua.mkurlpath(\"module/\"..module_name)..\n\t\t        \t[[\">]]..module_name..[[</a></strong></li>]])",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function ReportModules(run)\r\n   return function()\r\n   local results = run.results\r\n   for cs, suite in ipairs(results.suites) do\r\n       cgilua.put(\"<tr>\\n\")\r\n       cgilua.put(\"<th><strong>\"..[[<a href=\"]]..cgilua.mkurlpath(\"module/\"..suite.title)..[[\">]]..suite.title..[[</a></strong></th>]]..\"\\n\"..\"</strong></th>\\n\")\r\n       if suite.error then\r\n           cgilua.put([[<td>]]..suite.passed + suite.failed..\"</td>\\n\")\r\n           cgilua.put([[<td]]..(((suite.failed > 0) and [[ class=\"failed\">]]..suite.failed) or \">\")..\"</td>\\n\")\r\n           cgilua.put([[<td class=\"error\">1</td>]]..\"\\n\")\r\n       elseif suite.failed > 0 then\r\n           cgilua.put([[<td>]]..suite.passed + suite.failed..\"</td>\\n\")\r\n           cgilua.put([[<td class=\"failed\">]]..suite.failed..\"</td>\\n\")\r\n           cgilua.put([[<td class=\"noerror\"></td>]]..\"\\n\")\r\n       else\r\n           cgilua.put([[<td class=\"passed\">]]..suite.passed + suite.failed..\"</td>\\n\")\r\n           cgilua.put([[<td class=\"passed\"></td>]]..\"\\n\")\r\n           cgilua.put([[<td class=\"noerror\"></td>]]..\"\\n\")\r\n       end\r\n       cgilua.put(\"</tr>\\n\")\r\n   end\r\n   cgilua.put(\"<tfoot>\")\r\n   cgilua.put(\"<tr>\\n\")\r\n   cgilua.put(\"<th><strong>Totals</strong></th>\\n\")\r\n   cgilua.put(\"<td>\"..results.failed + results.passed..\"</td>\\n\")\r\n   cgilua.put([[<td class=\"]]..((results.failed > 0) and ([[failed\">]]..results.failed) or [[passed\">]])..\"</td>\\n\")\r\n   cgilua.put([[<td class=\"]]..((results.errors > 0) and ([[error\">]]..results.errors) or [[noerror\">]])..\"</td>\\n\")\r\n   cgilua.put(\"</tr>\\n\")\r\n   cgilua.put(\"</tfoot>\")\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "local results = run.results",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "for cs, suite in ipairs(results.suites) do\r\n       cgilua.put(\"<tr>\\n\")\r\n       cgilua.put(\"<th><strong>\"..[[<a href=\"]]..cgilua.mkurlpath(\"module/\"..suite.title)..[[\">]]..suite.title..[[</a></strong></th>]]..\"\\n\"..\"</strong></th>\\n\")\r\n       if suite.error then\r\n           cgilua.put([[<td>]]..suite.passed + suite.failed..\"</td>\\n\")\r\n           cgilua.put([[<td]]..(((suite.failed > 0) and [[ class=\"failed\">]]..suite.failed) or \">\")..\"</td>\\n\")\r\n           cgilua.put([[<td class=\"error\">1</td>]]..\"\\n\")\r\n       elseif suite.failed > 0 then\r\n           cgilua.put([[<td>]]..suite.passed + suite.failed..\"</td>\\n\")\r\n           cgilua.put([[<td class=\"failed\">]]..suite.failed..\"</td>\\n\")\r\n           cgilua.put([[<td class=\"noerror\"></td>]]..\"\\n\")\r\n       else\r\n           cgilua.put([[<td class=\"passed\">]]..suite.passed + suite.failed..\"</td>\\n\")\r\n           cgilua.put([[<td class=\"passed\"></td>]]..\"\\n\")\r\n           cgilua.put([[<td class=\"noerror\"></td>]]..\"\\n\")\r\n       end\r\n       cgilua.put(\"</tr>\\n\")\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 27,
    "text": "cgilua.put(\"<tr>\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "cgilua.put(\"<th><strong>\"..[[<a href=\"]]..cgilua.mkurlpath(\"module/\"..suite.title)..[[\">]]..suite.title..[[</a></strong></th>]]..\"\\n\"..\"</strong></th>\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "if suite.error then\r\n           cgilua.put([[<td>]]..suite.passed + suite.failed..\"</td>\\n\")\r\n           cgilua.put([[<td]]..(((suite.failed > 0) and [[ class=\"failed\">]]..suite.failed) or \">\")..\"</td>\\n\")\r\n           cgilua.put([[<td class=\"error\">1</td>]]..\"\\n\")\r\n       elseif suite.failed > 0 then\r\n           cgilua.put([[<td>]]..suite.passed + suite.failed..\"</td>\\n\")\r\n           cgilua.put([[<td class=\"failed\">]]..suite.failed..\"</td>\\n\")\r\n           cgilua.put([[<td class=\"noerror\"></td>]]..\"\\n\")\r\n       else\r\n           cgilua.put([[<td class=\"passed\">]]..suite.passed + suite.failed..\"</td>\\n\")\r\n           cgilua.put([[<td class=\"passed\"></td>]]..\"\\n\")\r\n           cgilua.put([[<td class=\"noerror\"></td>]]..\"\\n\")\r\n       end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "cgilua.put([[<td>]]..suite.passed + suite.failed..\"</td>\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "cgilua.put([[<td]]..(((suite.failed > 0) and [[ class=\"failed\">]]..suite.failed) or \">\")..\"</td>\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "cgilua.put([[<td class=\"error\">1</td>]]..\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "cgilua.put([[<td class=\"failed\">]]..suite.failed..\"</td>\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "cgilua.put([[<td class=\"noerror\"></td>]]..\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "cgilua.put([[<td class=\"passed\">]]..suite.passed + suite.failed..\"</td>\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "cgilua.put([[<td class=\"passed\"></td>]]..\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "cgilua.put(\"</tr>\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "cgilua.put(\"<tfoot>\")",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "cgilua.put(\"<th><strong>Totals</strong></th>\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "cgilua.put(\"<td>\"..results.failed + results.passed..\"</td>\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "cgilua.put([[<td class=\"]]..((results.failed > 0) and ([[failed\">]]..results.failed) or [[passed\">]])..\"</td>\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "cgilua.put([[<td class=\"]]..((results.errors > 0) and ([[error\">]]..results.errors) or [[noerror\">]])..\"</td>\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "cgilua.put(\"</tfoot>\")",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function ReportModule(run)\r\n   return function()\r\n       local results = run.results\r\n       for _, suite in ipairs(results.suites) do\r\n           if suite.error == -1 then\r\n               cgilua.put(\"<p><strong>ERROR</strong>:</p>\")\r\n               cgilua.put(\"<p>\"..suite.error..\"</p>\")\r\n           else\r\n               for _, context in ipairs(suite.contexts) do\n                   if next(context.tests) then\r\n                       if context.output[1] ~= \"\" or context.comments then\r\n                           cgilua.put([[<div class=\"shakecontext\">]]..\"\\n\")\r\n                           for _, output in ipairs(context.output) do\r\n                               if output and output ~= \"\" then\r\n                                   cgilua.put([[<div class=\"shakeoutput\">]]..tostring(output)..\"</div>\\n\")\r\n                               end\r\n                           end\r\n                           if context.comments and context.comments ~= \"\" then\r\n                               cgilua.put([[<div class=\"shakecomment\">]]..context.comments..\"</div>\\n\")\r\n                           end\r\n                           cgilua.put(\"</div>\")\r\n                       end\r\n                       cgilua.put([[\r\n                       <table class=\"shake\">\r\n                           <thead>\r\n                               <tr>\r\n                                   <th scope=\"col\">Line #</th>\r\n                                   <th scope=\"col\"></th>\r\n                                   <th scope=\"col\"><strong>Expected</strong></th>\r\n                                   <th scope=\"col\"><strong>Actual</strong></th>\r\n                                   <th scope=\"col\"><strong>Message</strong></th>\r\n                               </tr>\r\n                           </thead>]])\r\n                       for _, test in ipairs (context.tests) do\r\n                           local linenumber = test.linenumber or \"???\"\r\n                           local op = test.op\r\n                           local val2 = tostring(test.val2)\r\n                           \r\n                           if not op then\r\n                               val2 = \"<em><strong>True value</strong></em>\"\r\n                           end\r\n                           \r\n                           if not op or op == \"==\" then\r\n                               op = \"\"\r\n                           end\r\n                           \r\n                           cgilua.put(\"<tr>\")\r\n                           local testclass = \"passed\"\r\n                           if not test.passed then\r\n                               testclass = \"failed\"\r\n                           end\r\n                           cgilua.put([[<td class=\"]]..testclass..[[\">]]..linenumber..\"</td>\")\r\n                           cgilua.put([[<td class=\"]]..testclass..[[\">]]..test.exp1..\"</td>\")\r\n                           cgilua.put([[<td class=\"]]..testclass..[[\">]]..op..val2..\"</td>\")\r\n                           cgilua.put([[<td class=\"]]..testclass..[[\">]].._tostring(test.val1)..\"</td>\")\r\n                           if not test.passed then\r\n                               cgilua.put([[<td class=\"]]..testclass..[[\">]]..(test.msg or \"\")..\"</td>\")\r\n                           else\r\n                               cgilua.put([[<td class=\"]]..testclass..[[\">]]..\"</td>\")\r\n                           end\r\n                           cgilua.put(\"</tr>\")\r\n                       end\r\n                       cgilua.put(\"</table>\")\r\n                   end\r\n               end\r\n           end\r\n       end\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "for _, suite in ipairs(results.suites) do\r\n           if suite.error == -1 then\r\n               cgilua.put(\"<p><strong>ERROR</strong>:</p>\")\r\n               cgilua.put(\"<p>\"..suite.error..\"</p>\")\r\n           else\r\n               for _, context in ipairs(suite.contexts) do\n                   if next(context.tests) then\r\n                       if context.output[1] ~= \"\" or context.comments then\r\n                           cgilua.put([[<div class=\"shakecontext\">]]..\"\\n\")\r\n                           for _, output in ipairs(context.output) do\r\n                               if output and output ~= \"\" then\r\n                                   cgilua.put([[<div class=\"shakeoutput\">]]..tostring(output)..\"</div>\\n\")\r\n                               end\r\n                           end\r\n                           if context.comments and context.comments ~= \"\" then\r\n                               cgilua.put([[<div class=\"shakecomment\">]]..context.comments..\"</div>\\n\")\r\n                           end\r\n                           cgilua.put(\"</div>\")\r\n                       end\r\n                       cgilua.put([[\r\n                       <table class=\"shake\">\r\n                           <thead>\r\n                               <tr>\r\n                                   <th scope=\"col\">Line #</th>\r\n                                   <th scope=\"col\"></th>\r\n                                   <th scope=\"col\"><strong>Expected</strong></th>\r\n                                   <th scope=\"col\"><strong>Actual</strong></th>\r\n                                   <th scope=\"col\"><strong>Message</strong></th>\r\n                               </tr>\r\n                           </thead>]])\r\n                       for _, test in ipairs (context.tests) do\r\n                           local linenumber = test.linenumber or \"???\"\r\n                           local op = test.op\r\n                           local val2 = tostring(test.val2)\r\n                           \r\n                           if not op then\r\n                               val2 = \"<em><strong>True value</strong></em>\"\r\n                           end\r\n                           \r\n                           if not op or op == \"==\" then\r\n                               op = \"\"\r\n                           end\r\n                           \r\n                           cgilua.put(\"<tr>\")\r\n                           local testclass = \"passed\"\r\n                           if not test.passed then\r\n                               testclass = \"failed\"\r\n                           end\r\n                           cgilua.put([[<td class=\"]]..testclass..[[\">]]..linenumber..\"</td>\")\r\n                           cgilua.put([[<td class=\"]]..testclass..[[\">]]..test.exp1..\"</td>\")\r\n                           cgilua.put([[<td class=\"]]..testclass..[[\">]]..op..val2..\"</td>\")\r\n                           cgilua.put([[<td class=\"]]..testclass..[[\">]].._tostring(test.val1)..\"</td>\")\r\n                           if not test.passed then\r\n                               cgilua.put([[<td class=\"]]..testclass..[[\">]]..(test.msg or \"\")..\"</td>\")\r\n                           else\r\n                               cgilua.put([[<td class=\"]]..testclass..[[\">]]..\"</td>\")\r\n                           end\r\n                           cgilua.put(\"</tr>\")\r\n                       end\r\n                       cgilua.put(\"</table>\")\r\n                   end\r\n               end\r\n           end\r\n       end",
    "type": "statement:genericfor"
  }, {
    "id": 47,
    "text": "if suite.error == -1 then\r\n               cgilua.put(\"<p><strong>ERROR</strong>:</p>\")\r\n               cgilua.put(\"<p>\"..suite.error..\"</p>\")\r\n           else\r\n               for _, context in ipairs(suite.contexts) do\n                   if next(context.tests) then\r\n                       if context.output[1] ~= \"\" or context.comments then\r\n                           cgilua.put([[<div class=\"shakecontext\">]]..\"\\n\")\r\n                           for _, output in ipairs(context.output) do\r\n                               if output and output ~= \"\" then\r\n                                   cgilua.put([[<div class=\"shakeoutput\">]]..tostring(output)..\"</div>\\n\")\r\n                               end\r\n                           end\r\n                           if context.comments and context.comments ~= \"\" then\r\n                               cgilua.put([[<div class=\"shakecomment\">]]..context.comments..\"</div>\\n\")\r\n                           end\r\n                           cgilua.put(\"</div>\")\r\n                       end\r\n                       cgilua.put([[\r\n                       <table class=\"shake\">\r\n                           <thead>\r\n                               <tr>\r\n                                   <th scope=\"col\">Line #</th>\r\n                                   <th scope=\"col\"></th>\r\n                                   <th scope=\"col\"><strong>Expected</strong></th>\r\n                                   <th scope=\"col\"><strong>Actual</strong></th>\r\n                                   <th scope=\"col\"><strong>Message</strong></th>\r\n                               </tr>\r\n                           </thead>]])\r\n                       for _, test in ipairs (context.tests) do\r\n                           local linenumber = test.linenumber or \"???\"\r\n                           local op = test.op\r\n                           local val2 = tostring(test.val2)\r\n                           \r\n                           if not op then\r\n                               val2 = \"<em><strong>True value</strong></em>\"\r\n                           end\r\n                           \r\n                           if not op or op == \"==\" then\r\n                               op = \"\"\r\n                           end\r\n                           \r\n                           cgilua.put(\"<tr>\")\r\n                           local testclass = \"passed\"\r\n                           if not test.passed then\r\n                               testclass = \"failed\"\r\n                           end\r\n                           cgilua.put([[<td class=\"]]..testclass..[[\">]]..linenumber..\"</td>\")\r\n                           cgilua.put([[<td class=\"]]..testclass..[[\">]]..test.exp1..\"</td>\")\r\n                           cgilua.put([[<td class=\"]]..testclass..[[\">]]..op..val2..\"</td>\")\r\n                           cgilua.put([[<td class=\"]]..testclass..[[\">]].._tostring(test.val1)..\"</td>\")\r\n                           if not test.passed then\r\n                               cgilua.put([[<td class=\"]]..testclass..[[\">]]..(test.msg or \"\")..\"</td>\")\r\n                           else\r\n                               cgilua.put([[<td class=\"]]..testclass..[[\">]]..\"</td>\")\r\n                           end\r\n                           cgilua.put(\"</tr>\")\r\n                       end\r\n                       cgilua.put(\"</table>\")\r\n                   end\r\n               end\r\n           end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "cgilua.put(\"<p><strong>ERROR</strong>:</p>\")",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "cgilua.put(\"<p>\"..suite.error..\"</p>\")",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "for _, context in ipairs(suite.contexts) do\n                   if next(context.tests) then\r\n                       if context.output[1] ~= \"\" or context.comments then\r\n                           cgilua.put([[<div class=\"shakecontext\">]]..\"\\n\")\r\n                           for _, output in ipairs(context.output) do\r\n                               if output and output ~= \"\" then\r\n                                   cgilua.put([[<div class=\"shakeoutput\">]]..tostring(output)..\"</div>\\n\")\r\n                               end\r\n                           end\r\n                           if context.comments and context.comments ~= \"\" then\r\n                               cgilua.put([[<div class=\"shakecomment\">]]..context.comments..\"</div>\\n\")\r\n                           end\r\n                           cgilua.put(\"</div>\")\r\n                       end\r\n                       cgilua.put([[\r\n                       <table class=\"shake\">\r\n                           <thead>\r\n                               <tr>\r\n                                   <th scope=\"col\">Line #</th>\r\n                                   <th scope=\"col\"></th>\r\n                                   <th scope=\"col\"><strong>Expected</strong></th>\r\n                                   <th scope=\"col\"><strong>Actual</strong></th>\r\n                                   <th scope=\"col\"><strong>Message</strong></th>\r\n                               </tr>\r\n                           </thead>]])\r\n                       for _, test in ipairs (context.tests) do\r\n                           local linenumber = test.linenumber or \"???\"\r\n                           local op = test.op\r\n                           local val2 = tostring(test.val2)\r\n                           \r\n                           if not op then\r\n                               val2 = \"<em><strong>True value</strong></em>\"\r\n                           end\r\n                           \r\n                           if not op or op == \"==\" then\r\n                               op = \"\"\r\n                           end\r\n                           \r\n                           cgilua.put(\"<tr>\")\r\n                           local testclass = \"passed\"\r\n                           if not test.passed then\r\n                               testclass = \"failed\"\r\n                           end\r\n                           cgilua.put([[<td class=\"]]..testclass..[[\">]]..linenumber..\"</td>\")\r\n                           cgilua.put([[<td class=\"]]..testclass..[[\">]]..test.exp1..\"</td>\")\r\n                           cgilua.put([[<td class=\"]]..testclass..[[\">]]..op..val2..\"</td>\")\r\n                           cgilua.put([[<td class=\"]]..testclass..[[\">]].._tostring(test.val1)..\"</td>\")\r\n                           if not test.passed then\r\n                               cgilua.put([[<td class=\"]]..testclass..[[\">]]..(test.msg or \"\")..\"</td>\")\r\n                           else\r\n                               cgilua.put([[<td class=\"]]..testclass..[[\">]]..\"</td>\")\r\n                           end\r\n                           cgilua.put(\"</tr>\")\r\n                       end\r\n                       cgilua.put(\"</table>\")\r\n                   end\r\n               end",
    "type": "statement:genericfor"
  }, {
    "id": 51,
    "text": "if next(context.tests) then\r\n                       if context.output[1] ~= \"\" or context.comments then\r\n                           cgilua.put([[<div class=\"shakecontext\">]]..\"\\n\")\r\n                           for _, output in ipairs(context.output) do\r\n                               if output and output ~= \"\" then\r\n                                   cgilua.put([[<div class=\"shakeoutput\">]]..tostring(output)..\"</div>\\n\")\r\n                               end\r\n                           end\r\n                           if context.comments and context.comments ~= \"\" then\r\n                               cgilua.put([[<div class=\"shakecomment\">]]..context.comments..\"</div>\\n\")\r\n                           end\r\n                           cgilua.put(\"</div>\")\r\n                       end\r\n                       cgilua.put([[\r\n                       <table class=\"shake\">\r\n                           <thead>\r\n                               <tr>\r\n                                   <th scope=\"col\">Line #</th>\r\n                                   <th scope=\"col\"></th>\r\n                                   <th scope=\"col\"><strong>Expected</strong></th>\r\n                                   <th scope=\"col\"><strong>Actual</strong></th>\r\n                                   <th scope=\"col\"><strong>Message</strong></th>\r\n                               </tr>\r\n                           </thead>]])\r\n                       for _, test in ipairs (context.tests) do\r\n                           local linenumber = test.linenumber or \"???\"\r\n                           local op = test.op\r\n                           local val2 = tostring(test.val2)\r\n                           \r\n                           if not op then\r\n                               val2 = \"<em><strong>True value</strong></em>\"\r\n                           end\r\n                           \r\n                           if not op or op == \"==\" then\r\n                               op = \"\"\r\n                           end\r\n                           \r\n                           cgilua.put(\"<tr>\")\r\n                           local testclass = \"passed\"\r\n                           if not test.passed then\r\n                               testclass = \"failed\"\r\n                           end\r\n                           cgilua.put([[<td class=\"]]..testclass..[[\">]]..linenumber..\"</td>\")\r\n                           cgilua.put([[<td class=\"]]..testclass..[[\">]]..test.exp1..\"</td>\")\r\n                           cgilua.put([[<td class=\"]]..testclass..[[\">]]..op..val2..\"</td>\")\r\n                           cgilua.put([[<td class=\"]]..testclass..[[\">]].._tostring(test.val1)..\"</td>\")\r\n                           if not test.passed then\r\n                               cgilua.put([[<td class=\"]]..testclass..[[\">]]..(test.msg or \"\")..\"</td>\")\r\n                           else\r\n                               cgilua.put([[<td class=\"]]..testclass..[[\">]]..\"</td>\")\r\n                           end\r\n                           cgilua.put(\"</tr>\")\r\n                       end\r\n                       cgilua.put(\"</table>\")\r\n                   end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "if context.output[1] ~= \"\" or context.comments then\r\n                           cgilua.put([[<div class=\"shakecontext\">]]..\"\\n\")\r\n                           for _, output in ipairs(context.output) do\r\n                               if output and output ~= \"\" then\r\n                                   cgilua.put([[<div class=\"shakeoutput\">]]..tostring(output)..\"</div>\\n\")\r\n                               end\r\n                           end\r\n                           if context.comments and context.comments ~= \"\" then\r\n                               cgilua.put([[<div class=\"shakecomment\">]]..context.comments..\"</div>\\n\")\r\n                           end\r\n                           cgilua.put(\"</div>\")\r\n                       end",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "cgilua.put([[<div class=\"shakecontext\">]]..\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "for _, output in ipairs(context.output) do\r\n                               if output and output ~= \"\" then\r\n                                   cgilua.put([[<div class=\"shakeoutput\">]]..tostring(output)..\"</div>\\n\")\r\n                               end\r\n                           end",
    "type": "statement:genericfor"
  }, {
    "id": 55,
    "text": "if output and output ~= \"\" then\r\n                                   cgilua.put([[<div class=\"shakeoutput\">]]..tostring(output)..\"</div>\\n\")\r\n                               end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "cgilua.put([[<div class=\"shakeoutput\">]]..tostring(output)..\"</div>\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "if context.comments and context.comments ~= \"\" then\r\n                               cgilua.put([[<div class=\"shakecomment\">]]..context.comments..\"</div>\\n\")\r\n                           end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "cgilua.put([[<div class=\"shakecomment\">]]..context.comments..\"</div>\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "cgilua.put(\"</div>\")",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "cgilua.put([[\r\n                       <table class=\"shake\">\r\n                           <thead>\r\n                               <tr>\r\n                                   <th scope=\"col\">Line #</th>\r\n                                   <th scope=\"col\"></th>\r\n                                   <th scope=\"col\"><strong>Expected</strong></th>\r\n                                   <th scope=\"col\"><strong>Actual</strong></th>\r\n                                   <th scope=\"col\"><strong>Message</strong></th>\r\n                               </tr>\r\n                           </thead>]])",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "for _, test in ipairs (context.tests) do\r\n                           local linenumber = test.linenumber or \"???\"\r\n                           local op = test.op\r\n                           local val2 = tostring(test.val2)\r\n                           \r\n                           if not op then\r\n                               val2 = \"<em><strong>True value</strong></em>\"\r\n                           end\r\n                           \r\n                           if not op or op == \"==\" then\r\n                               op = \"\"\r\n                           end\r\n                           \r\n                           cgilua.put(\"<tr>\")\r\n                           local testclass = \"passed\"\r\n                           if not test.passed then\r\n                               testclass = \"failed\"\r\n                           end\r\n                           cgilua.put([[<td class=\"]]..testclass..[[\">]]..linenumber..\"</td>\")\r\n                           cgilua.put([[<td class=\"]]..testclass..[[\">]]..test.exp1..\"</td>\")\r\n                           cgilua.put([[<td class=\"]]..testclass..[[\">]]..op..val2..\"</td>\")\r\n                           cgilua.put([[<td class=\"]]..testclass..[[\">]].._tostring(test.val1)..\"</td>\")\r\n                           if not test.passed then\r\n                               cgilua.put([[<td class=\"]]..testclass..[[\">]]..(test.msg or \"\")..\"</td>\")\r\n                           else\r\n                               cgilua.put([[<td class=\"]]..testclass..[[\">]]..\"</td>\")\r\n                           end\r\n                           cgilua.put(\"</tr>\")\r\n                       end",
    "type": "statement:genericfor"
  }, {
    "id": 62,
    "text": "local linenumber = test.linenumber or \"???\"",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "local op = test.op",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "local val2 = tostring(test.val2)",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "if not op then\r\n                               val2 = \"<em><strong>True value</strong></em>\"\r\n                           end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "val2 = \"<em><strong>True value</strong></em>\"",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "if not op or op == \"==\" then\r\n                               op = \"\"\r\n                           end",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "op = \"\"",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "cgilua.put(\"<tr>\")",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "local testclass = \"passed\"",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "if not test.passed then\r\n                               testclass = \"failed\"\r\n                           end",
    "type": "statement:if"
  }, {
    "id": 72,
    "text": "testclass = \"failed\"",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "cgilua.put([[<td class=\"]]..testclass..[[\">]]..linenumber..\"</td>\")",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "cgilua.put([[<td class=\"]]..testclass..[[\">]]..test.exp1..\"</td>\")",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "cgilua.put([[<td class=\"]]..testclass..[[\">]]..op..val2..\"</td>\")",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "cgilua.put([[<td class=\"]]..testclass..[[\">]].._tostring(test.val1)..\"</td>\")",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "if not test.passed then\r\n                               cgilua.put([[<td class=\"]]..testclass..[[\">]]..(test.msg or \"\")..\"</td>\")\r\n                           else\r\n                               cgilua.put([[<td class=\"]]..testclass..[[\">]]..\"</td>\")\r\n                           end",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "cgilua.put([[<td class=\"]]..testclass..[[\">]]..(test.msg or \"\")..\"</td>\")",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "cgilua.put([[<td class=\"]]..testclass..[[\">]]..\"</td>\")",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "cgilua.put(\"</tr>\")",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "cgilua.put(\"</table>\")",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 83,
    "text": "function ModuleSummary(run)\r\n   return function()\r\n   local results = run.results\r\n   for cs, suite in ipairs(results.suites) do\r\n       cgilua.put(\"<tr>\\n\")\r\n       cgilua.put(\"<th><strong>\"..suite.title..\"</strong></th>\\n\")\r\n       if suite.error then\r\n           cgilua.put([[<td>]]..suite.passed + suite.failed..\"</td>\\n\")\r\n           cgilua.put([[<td]]..(((suite.failed > 0) and [[ class=\"failed\">]]..suite.failed) or \">\")..\"</td>\\n\")\r\n           cgilua.put([[<td class=\"error\">1</td>]]..\"\\n\")\r\n       elseif suite.failed > 0 then\r\n           cgilua.put([[<td>]]..suite.passed + suite.failed..\"</td>\\n\")\r\n           cgilua.put([[<td class=\"failed\">]]..suite.failed..\"</td>\\n\")\r\n           cgilua.put([[<td class=\"noerror\"></td>]]..\"\\n\")\r\n       else\r\n           cgilua.put([[<td class=\"passed\">]]..suite.passed + suite.failed..\"</td>\\n\")\r\n           cgilua.put([[<td class=\"passed\"></td>]]..\"\\n\")\r\n           cgilua.put([[<td class=\"noerror\"></td>]]..\"\\n\")\r\n       end\r\n       cgilua.put(\"</tr>\\n\")\r\n   end\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 84,
    "text": "for cs, suite in ipairs(results.suites) do\r\n       cgilua.put(\"<tr>\\n\")\r\n       cgilua.put(\"<th><strong>\"..suite.title..\"</strong></th>\\n\")\r\n       if suite.error then\r\n           cgilua.put([[<td>]]..suite.passed + suite.failed..\"</td>\\n\")\r\n           cgilua.put([[<td]]..(((suite.failed > 0) and [[ class=\"failed\">]]..suite.failed) or \">\")..\"</td>\\n\")\r\n           cgilua.put([[<td class=\"error\">1</td>]]..\"\\n\")\r\n       elseif suite.failed > 0 then\r\n           cgilua.put([[<td>]]..suite.passed + suite.failed..\"</td>\\n\")\r\n           cgilua.put([[<td class=\"failed\">]]..suite.failed..\"</td>\\n\")\r\n           cgilua.put([[<td class=\"noerror\"></td>]]..\"\\n\")\r\n       else\r\n           cgilua.put([[<td class=\"passed\">]]..suite.passed + suite.failed..\"</td>\\n\")\r\n           cgilua.put([[<td class=\"passed\"></td>]]..\"\\n\")\r\n           cgilua.put([[<td class=\"noerror\"></td>]]..\"\\n\")\r\n       end\r\n       cgilua.put(\"</tr>\\n\")\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 85,
    "text": "cgilua.put(\"<th><strong>\"..suite.title..\"</strong></th>\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "function ShakeSummary(run)\n\treturn function()\r\n\t\tlocal results = run.results\r\n\t\tif results.errors > 0 or results.failed > 0 then\r\n\t\t    cgilua.put(\"<p>Shake output:</p>\")\r\n\t\t    cgilua.put([[<pre class=\"example\">]])\r\n\t\t    cgilua.put(run:summary())\r\n\t\t    cgilua.put(\"</pre>\")\r\n\t\tend\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 88,
    "text": "if results.errors > 0 or results.failed > 0 then\r\n\t\t    cgilua.put(\"<p>Shake output:</p>\")\r\n\t\t    cgilua.put([[<pre class=\"example\">]])\r\n\t\t    cgilua.put(run:summary())\r\n\t\t    cgilua.put(\"</pre>\")\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 89,
    "text": "cgilua.put(\"<p>Shake output:</p>\")",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "cgilua.put([[<pre class=\"example\">]])",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "cgilua.put(run:summary())",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "cgilua.put(\"</pre>\")",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 94,
    "text": "function()\n\t\tif not next(modules) then\r\n\t\t    cgilua.put(\"<li><strong>(No modules)</strong></li>\")\r\n\t\telse\r\n\t\t    for _, module_name in ipairs(modules) do\r\n\t\t        cgilua.put([[<li><strong><a href=\"]]..cgilua.mkurlpath(\"module/\"..module_name)..\n\t\t        \t[[\">]]..module_name..[[</a></strong></li>]])\r\n\t\t    end\r\n\t\tend\n\tend",
    "type": "function"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "function()\r\n   local results = run.results\r\n   for cs, suite in ipairs(results.suites) do\r\n       cgilua.put(\"<tr>\\n\")\r\n       cgilua.put(\"<th><strong>\"..[[<a href=\"]]..cgilua.mkurlpath(\"module/\"..suite.title)..[[\">]]..suite.title..[[</a></strong></th>]]..\"\\n\"..\"</strong></th>\\n\")\r\n       if suite.error then\r\n           cgilua.put([[<td>]]..suite.passed + suite.failed..\"</td>\\n\")\r\n           cgilua.put([[<td]]..(((suite.failed > 0) and [[ class=\"failed\">]]..suite.failed) or \">\")..\"</td>\\n\")\r\n           cgilua.put([[<td class=\"error\">1</td>]]..\"\\n\")\r\n       elseif suite.failed > 0 then\r\n           cgilua.put([[<td>]]..suite.passed + suite.failed..\"</td>\\n\")\r\n           cgilua.put([[<td class=\"failed\">]]..suite.failed..\"</td>\\n\")\r\n           cgilua.put([[<td class=\"noerror\"></td>]]..\"\\n\")\r\n       else\r\n           cgilua.put([[<td class=\"passed\">]]..suite.passed + suite.failed..\"</td>\\n\")\r\n           cgilua.put([[<td class=\"passed\"></td>]]..\"\\n\")\r\n           cgilua.put([[<td class=\"noerror\"></td>]]..\"\\n\")\r\n       end\r\n       cgilua.put(\"</tr>\\n\")\r\n   end\r\n   cgilua.put(\"<tfoot>\")\r\n   cgilua.put(\"<tr>\\n\")\r\n   cgilua.put(\"<th><strong>Totals</strong></th>\\n\")\r\n   cgilua.put(\"<td>\"..results.failed + results.passed..\"</td>\\n\")\r\n   cgilua.put([[<td class=\"]]..((results.failed > 0) and ([[failed\">]]..results.failed) or [[passed\">]])..\"</td>\\n\")\r\n   cgilua.put([[<td class=\"]]..((results.errors > 0) and ([[error\">]]..results.errors) or [[noerror\">]])..\"</td>\\n\")\r\n   cgilua.put(\"</tr>\\n\")\r\n   cgilua.put(\"</tfoot>\")\r\n   end",
    "type": "function"
  }, {
    "id": 97,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 98,
    "text": "function()\r\n       local results = run.results\r\n       for _, suite in ipairs(results.suites) do\r\n           if suite.error == -1 then\r\n               cgilua.put(\"<p><strong>ERROR</strong>:</p>\")\r\n               cgilua.put(\"<p>\"..suite.error..\"</p>\")\r\n           else\r\n               for _, context in ipairs(suite.contexts) do\n                   if next(context.tests) then\r\n                       if context.output[1] ~= \"\" or context.comments then\r\n                           cgilua.put([[<div class=\"shakecontext\">]]..\"\\n\")\r\n                           for _, output in ipairs(context.output) do\r\n                               if output and output ~= \"\" then\r\n                                   cgilua.put([[<div class=\"shakeoutput\">]]..tostring(output)..\"</div>\\n\")\r\n                               end\r\n                           end\r\n                           if context.comments and context.comments ~= \"\" then\r\n                               cgilua.put([[<div class=\"shakecomment\">]]..context.comments..\"</div>\\n\")\r\n                           end\r\n                           cgilua.put(\"</div>\")\r\n                       end\r\n                       cgilua.put([[\r\n                       <table class=\"shake\">\r\n                           <thead>\r\n                               <tr>\r\n                                   <th scope=\"col\">Line #</th>\r\n                                   <th scope=\"col\"></th>\r\n                                   <th scope=\"col\"><strong>Expected</strong></th>\r\n                                   <th scope=\"col\"><strong>Actual</strong></th>\r\n                                   <th scope=\"col\"><strong>Message</strong></th>\r\n                               </tr>\r\n                           </thead>]])\r\n                       for _, test in ipairs (context.tests) do\r\n                           local linenumber = test.linenumber or \"???\"\r\n                           local op = test.op\r\n                           local val2 = tostring(test.val2)\r\n                           \r\n                           if not op then\r\n                               val2 = \"<em><strong>True value</strong></em>\"\r\n                           end\r\n                           \r\n                           if not op or op == \"==\" then\r\n                               op = \"\"\r\n                           end\r\n                           \r\n                           cgilua.put(\"<tr>\")\r\n                           local testclass = \"passed\"\r\n                           if not test.passed then\r\n                               testclass = \"failed\"\r\n                           end\r\n                           cgilua.put([[<td class=\"]]..testclass..[[\">]]..linenumber..\"</td>\")\r\n                           cgilua.put([[<td class=\"]]..testclass..[[\">]]..test.exp1..\"</td>\")\r\n                           cgilua.put([[<td class=\"]]..testclass..[[\">]]..op..val2..\"</td>\")\r\n                           cgilua.put([[<td class=\"]]..testclass..[[\">]].._tostring(test.val1)..\"</td>\")\r\n                           if not test.passed then\r\n                               cgilua.put([[<td class=\"]]..testclass..[[\">]]..(test.msg or \"\")..\"</td>\")\r\n                           else\r\n                               cgilua.put([[<td class=\"]]..testclass..[[\">]]..\"</td>\")\r\n                           end\r\n                           cgilua.put(\"</tr>\")\r\n                       end\r\n                       cgilua.put(\"</table>\")\r\n                   end\r\n               end\r\n           end\r\n       end\r\n   end",
    "type": "function"
  }, {
    "id": 99,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 100,
    "text": "function()\r\n   local results = run.results\r\n   for cs, suite in ipairs(results.suites) do\r\n       cgilua.put(\"<tr>\\n\")\r\n       cgilua.put(\"<th><strong>\"..suite.title..\"</strong></th>\\n\")\r\n       if suite.error then\r\n           cgilua.put([[<td>]]..suite.passed + suite.failed..\"</td>\\n\")\r\n           cgilua.put([[<td]]..(((suite.failed > 0) and [[ class=\"failed\">]]..suite.failed) or \">\")..\"</td>\\n\")\r\n           cgilua.put([[<td class=\"error\">1</td>]]..\"\\n\")\r\n       elseif suite.failed > 0 then\r\n           cgilua.put([[<td>]]..suite.passed + suite.failed..\"</td>\\n\")\r\n           cgilua.put([[<td class=\"failed\">]]..suite.failed..\"</td>\\n\")\r\n           cgilua.put([[<td class=\"noerror\"></td>]]..\"\\n\")\r\n       else\r\n           cgilua.put([[<td class=\"passed\">]]..suite.passed + suite.failed..\"</td>\\n\")\r\n           cgilua.put([[<td class=\"passed\"></td>]]..\"\\n\")\r\n           cgilua.put([[<td class=\"noerror\"></td>]]..\"\\n\")\r\n       end\r\n       cgilua.put(\"</tr>\\n\")\r\n   end\r\n   end",
    "type": "function"
  }, {
    "id": 101,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 102,
    "text": "function()\r\n\t\tlocal results = run.results\r\n\t\tif results.errors > 0 or results.failed > 0 then\r\n\t\t    cgilua.put(\"<p>Shake output:</p>\")\r\n\t\t    cgilua.put([[<pre class=\"example\">]])\r\n\t\t    cgilua.put(run:summary())\r\n\t\t    cgilua.put(\"</pre>\")\r\n\t\tend\n\tend",
    "type": "function"
  }, {
    "id": 103,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 104,
    "text": "",
    "type": "function container"
  }, {
    "id": 105,
    "text": "format",
    "type": "global function"
  }, {
    "id": 106,
    "text": "mkurlpath",
    "type": "global function"
  }, {
    "id": 107,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 108,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 109,
    "text": "put",
    "type": "global function"
  }, {
    "id": 110,
    "text": "next",
    "type": "global function"
  }, {
    "id": 111,
    "text": "type",
    "type": "global function"
  }, {
    "id": 112,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 113,
    "text": "",
    "type": "variable container"
  }, {
    "id": 114,
    "text": "",
    "type": "require container"
  } ]
}