{
  "_filename": "alt_getopt.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/alt-getopt/alt_getopt.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 8
  }, {
    "from": 17,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 24,
    "label": "has",
    "to": 29
  }, {
    "from": 24,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 24,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 37,
    "label": "has",
    "to": 42
  }, {
    "from": 37,
    "label": "has",
    "to": 43
  }, {
    "from": 37,
    "label": "has",
    "to": 44
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 43
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 45,
    "label": "has",
    "to": 43
  }, {
    "from": 45,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 49
  }, {
    "from": 34,
    "label": "has",
    "to": 50
  }, {
    "from": 34,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 43
  }, {
    "from": 53,
    "label": "has",
    "to": 49
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 53,
    "label": "has",
    "to": 48
  }, {
    "from": 53,
    "label": "has",
    "to": 43
  }, {
    "from": 53,
    "label": "has",
    "to": 35
  }, {
    "from": 53,
    "label": "has",
    "to": 49
  }, {
    "from": 53,
    "label": "has",
    "to": 56
  }, {
    "from": 53,
    "label": "has",
    "to": 43
  }, {
    "from": 53,
    "label": "has",
    "to": 49
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 24,
    "label": "has",
    "to": 8
  }, {
    "from": 24,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 5
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 58,
    "label": "has",
    "to": 8
  }, {
    "from": 58,
    "label": "has",
    "to": 64
  }, {
    "from": 58,
    "label": "calls",
    "to": 70
  }, {
    "from": 17,
    "label": "calls",
    "to": 14
  }, {
    "from": 17,
    "label": "calls",
    "to": 14
  }, {
    "from": 24,
    "label": "calls",
    "to": 2
  }, {
    "from": 14,
    "label": "calls",
    "to": 10
  }, {
    "from": 24,
    "label": "calls",
    "to": 10
  }, {
    "from": 24,
    "label": "calls",
    "to": 10
  }, {
    "from": 24,
    "label": "calls",
    "to": 10
  }, {
    "from": 65,
    "label": "calls",
    "to": 69
  }, {
    "from": 17,
    "label": "calls",
    "to": 67
  }, {
    "from": 24,
    "label": "calls",
    "to": 17
  }, {
    "from": 24,
    "label": "calls",
    "to": 17
  }, {
    "from": 24,
    "label": "calls",
    "to": 17
  }, {
    "from": 10,
    "label": "calls",
    "to": 66
  }, {
    "from": 58,
    "label": "calls",
    "to": 24
  }, {
    "from": 24,
    "label": "calls",
    "to": 68
  }, {
    "from": 1,
    "label": "contains",
    "to": 65
  }, {
    "from": 65,
    "label": "declares",
    "to": 2
  }, {
    "from": 65,
    "label": "declares",
    "to": 10
  }, {
    "from": 65,
    "label": "declares",
    "to": 14
  }, {
    "from": 65,
    "label": "declares",
    "to": 17
  }, {
    "from": 65,
    "label": "declares",
    "to": 24
  }, {
    "from": 65,
    "label": "declares",
    "to": 58
  }, {
    "from": 1,
    "label": "contains",
    "to": 71
  }, {
    "from": 1,
    "label": "contains",
    "to": 72
  }, {
    "from": 71,
    "label": "initializes",
    "to": 73
  }, {
    "from": 73,
    "label": "assigns",
    "to": 74
  }, {
    "from": 71,
    "label": "initializes",
    "to": 75
  }, {
    "from": 75,
    "label": "assigns",
    "to": 76
  }, {
    "from": 71,
    "label": "initializes",
    "to": 77
  }, {
    "from": 77,
    "label": "assigns",
    "to": 78
  }, {
    "from": 71,
    "label": "initializes",
    "to": 79
  }, {
    "from": 79,
    "label": "assigns",
    "to": 80
  }, {
    "from": 71,
    "label": "initializes",
    "to": 81
  }, {
    "from": 81,
    "label": "assigns",
    "to": 82
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "alt_getopt",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function convert_short2long (opts)\r\n   local i = 1\r\n   local len = #opts\r\n   local ret = {}\r\n\r\n   for short_opt, accept_arg in opts:gmatch(\"(%w)(:?)\") do\r\n      ret[short_opt]=#accept_arg\r\n   end\r\n\r\n   return ret\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local i = 1",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local len = #opts",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local ret = {}",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "for short_opt, accept_arg in opts:gmatch(\"(%w)(:?)\") do\r\n      ret[short_opt]=#accept_arg\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 7,
    "text": "ret[short_opt]=#accept_arg",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "local function exit_with_error (msg, exit_status)\r\n   io.stderr:write (msg)\r\n   os.exit (exit_status)\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "io.stderr:write (msg)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "os.exit (exit_status)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "local function err_unknown_opt (opt)\r\n   exit_with_error (\"Unknown option `-\" ..\r\n\t\t    (#opt > 1 and \"-\" or \"\") .. opt .. \"'\\n\", 1)\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "exit_with_error (\"Unknown option `-\" ..\r\n\t\t    (#opt > 1 and \"-\" or \"\") .. opt .. \"'\\n\", 1)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "local function canonize (options, opt)\r\n   if not options [opt] then\r\n      err_unknown_opt (opt)\r\n   end\r\n\r\n   while type (options [opt]) == \"string\" do\r\n      opt = options [opt]\r\n\r\n      if not options [opt] then\r\n\t err_unknown_opt (opt)\r\n      end\r\n   end\r\n\r\n   return opt\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "if not options [opt] then\r\n      err_unknown_opt (opt)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "err_unknown_opt (opt)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "while type (options [opt]) == \"string\" do\r\n      opt = options [opt]\r\n\r\n      if not options [opt] then\r\n\t err_unknown_opt (opt)\r\n      end\r\n   end",
    "type": "statement:while"
  }, {
    "id": 21,
    "text": "opt = options [opt]",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "if not options [opt] then\r\n\t err_unknown_opt (opt)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function get_ordered_opts (arg, sh_opts, long_opts)\r\n   local i      = 1\r\n   local count  = 1\r\n   local opts   = {}\r\n   local optarg = {}\r\n\r\n   local options = convert_short2long (sh_opts)\r\n   for k,v in pairs (long_opts) do\r\n      options [k] = v\r\n   end\r\n\r\n   while i <= #arg do\r\n      local a = arg [i]\r\n\r\n      if a == \"--\" then\r\n\t i = i + 1\r\n\t break\r\n\r\n      elseif a == \"-\" then\r\n\t break\r\n\r\n      elseif a:sub (1, 2) == \"--\" then\r\n\t local pos = a:find (\"=\", 1, true)\r\n\r\n\t if pos then\r\n\t    local opt = a:sub (3, pos-1)\r\n\r\n\t    opt = canonize (options, opt)\r\n\r\n\t    if options [opt] == 0 then\r\n\t       exit_with_error (\"Bad usage of option `\" .. a .. \"'\\n\", 1)\r\n\t    end\r\n\r\n\t    optarg [count] = a:sub (pos+1)\r\n\t    opts [count] = opt\r\n\t else\r\n\t    local opt = a:sub (3)\r\n\r\n\t    opt = canonize (options, opt)\r\n\r\n\t    if options [opt] == 0 then\r\n\t       opts [count] = opt\r\n\t    else\r\n\t       if i == #arg then\r\n\t\t  exit_with_error (\"Missed value for option `\" .. a .. \"'\\n\", 1)\r\n\t       end\r\n\r\n\t       optarg [count] = arg [i+1]\r\n\t       opts [count] = opt\r\n\t       i = i + 1\r\n\t    end\r\n\t end\r\n\t count = count + 1\r\n\r\n      elseif a:sub (1, 1) == \"-\" then\r\n\t local j\r\n\t for j=2,a:len () do\r\n\t    local opt = canonize (options, a:sub (j, j))\r\n\r\n\t    if options [opt] == 0 then\r\n\t       opts [count] = opt\r\n\t       count = count + 1\r\n\t    elseif a:len () == j then\r\n\t       if i == #arg then\r\n\t\t  exit_with_error (\"Missed value for option `-\" .. opt .. \"'\\n\", 1)\r\n\t       end\r\n\r\n\t       optarg [count] = arg [i+1]\r\n\t       opts [count] = opt\r\n\t       i = i + 1\r\n\t       count = count + 1\r\n\t       break\r\n\t    else\r\n\t       optarg [count] = a:sub (j+1)\r\n\t       opts [count] = opt\r\n\t       count = count + 1\r\n\t       break\r\n\t    end\r\n\t end\r\n      else\r\n\t break\r\n      end\r\n\r\n      i = i + 1\r\n   end\r\n\r\n   return opts,i,optarg\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "local i      = 1",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "local count  = 1",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "local opts   = {}",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "local optarg = {}",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "local options = convert_short2long (sh_opts)",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "for k,v in pairs (long_opts) do\r\n      options [k] = v\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 31,
    "text": "options [k] = v",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "while i <= #arg do\r\n      local a = arg [i]\r\n\r\n      if a == \"--\" then\r\n\t i = i + 1\r\n\t break\r\n\r\n      elseif a == \"-\" then\r\n\t break\r\n\r\n      elseif a:sub (1, 2) == \"--\" then\r\n\t local pos = a:find (\"=\", 1, true)\r\n\r\n\t if pos then\r\n\t    local opt = a:sub (3, pos-1)\r\n\r\n\t    opt = canonize (options, opt)\r\n\r\n\t    if options [opt] == 0 then\r\n\t       exit_with_error (\"Bad usage of option `\" .. a .. \"'\\n\", 1)\r\n\t    end\r\n\r\n\t    optarg [count] = a:sub (pos+1)\r\n\t    opts [count] = opt\r\n\t else\r\n\t    local opt = a:sub (3)\r\n\r\n\t    opt = canonize (options, opt)\r\n\r\n\t    if options [opt] == 0 then\r\n\t       opts [count] = opt\r\n\t    else\r\n\t       if i == #arg then\r\n\t\t  exit_with_error (\"Missed value for option `\" .. a .. \"'\\n\", 1)\r\n\t       end\r\n\r\n\t       optarg [count] = arg [i+1]\r\n\t       opts [count] = opt\r\n\t       i = i + 1\r\n\t    end\r\n\t end\r\n\t count = count + 1\r\n\r\n      elseif a:sub (1, 1) == \"-\" then\r\n\t local j\r\n\t for j=2,a:len () do\r\n\t    local opt = canonize (options, a:sub (j, j))\r\n\r\n\t    if options [opt] == 0 then\r\n\t       opts [count] = opt\r\n\t       count = count + 1\r\n\t    elseif a:len () == j then\r\n\t       if i == #arg then\r\n\t\t  exit_with_error (\"Missed value for option `-\" .. opt .. \"'\\n\", 1)\r\n\t       end\r\n\r\n\t       optarg [count] = arg [i+1]\r\n\t       opts [count] = opt\r\n\t       i = i + 1\r\n\t       count = count + 1\r\n\t       break\r\n\t    else\r\n\t       optarg [count] = a:sub (j+1)\r\n\t       opts [count] = opt\r\n\t       count = count + 1\r\n\t       break\r\n\t    end\r\n\t end\r\n      else\r\n\t break\r\n      end\r\n\r\n      i = i + 1\r\n   end",
    "type": "statement:while"
  }, {
    "id": 33,
    "text": "local a = arg [i]",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "if a == \"--\" then\r\n\t i = i + 1\r\n\t break\r\n\r\n      elseif a == \"-\" then\r\n\t break\r\n\r\n      elseif a:sub (1, 2) == \"--\" then\r\n\t local pos = a:find (\"=\", 1, true)\r\n\r\n\t if pos then\r\n\t    local opt = a:sub (3, pos-1)\r\n\r\n\t    opt = canonize (options, opt)\r\n\r\n\t    if options [opt] == 0 then\r\n\t       exit_with_error (\"Bad usage of option `\" .. a .. \"'\\n\", 1)\r\n\t    end\r\n\r\n\t    optarg [count] = a:sub (pos+1)\r\n\t    opts [count] = opt\r\n\t else\r\n\t    local opt = a:sub (3)\r\n\r\n\t    opt = canonize (options, opt)\r\n\r\n\t    if options [opt] == 0 then\r\n\t       opts [count] = opt\r\n\t    else\r\n\t       if i == #arg then\r\n\t\t  exit_with_error (\"Missed value for option `\" .. a .. \"'\\n\", 1)\r\n\t       end\r\n\r\n\t       optarg [count] = arg [i+1]\r\n\t       opts [count] = opt\r\n\t       i = i + 1\r\n\t    end\r\n\t end\r\n\t count = count + 1\r\n\r\n      elseif a:sub (1, 1) == \"-\" then\r\n\t local j\r\n\t for j=2,a:len () do\r\n\t    local opt = canonize (options, a:sub (j, j))\r\n\r\n\t    if options [opt] == 0 then\r\n\t       opts [count] = opt\r\n\t       count = count + 1\r\n\t    elseif a:len () == j then\r\n\t       if i == #arg then\r\n\t\t  exit_with_error (\"Missed value for option `-\" .. opt .. \"'\\n\", 1)\r\n\t       end\r\n\r\n\t       optarg [count] = arg [i+1]\r\n\t       opts [count] = opt\r\n\t       i = i + 1\r\n\t       count = count + 1\r\n\t       break\r\n\t    else\r\n\t       optarg [count] = a:sub (j+1)\r\n\t       opts [count] = opt\r\n\t       count = count + 1\r\n\t       break\r\n\t    end\r\n\t end\r\n      else\r\n\t break\r\n      end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "local pos = a:find (\"=\", 1, true)",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "if pos then\r\n\t    local opt = a:sub (3, pos-1)\r\n\r\n\t    opt = canonize (options, opt)\r\n\r\n\t    if options [opt] == 0 then\r\n\t       exit_with_error (\"Bad usage of option `\" .. a .. \"'\\n\", 1)\r\n\t    end\r\n\r\n\t    optarg [count] = a:sub (pos+1)\r\n\t    opts [count] = opt\r\n\t else\r\n\t    local opt = a:sub (3)\r\n\r\n\t    opt = canonize (options, opt)\r\n\r\n\t    if options [opt] == 0 then\r\n\t       opts [count] = opt\r\n\t    else\r\n\t       if i == #arg then\r\n\t\t  exit_with_error (\"Missed value for option `\" .. a .. \"'\\n\", 1)\r\n\t       end\r\n\r\n\t       optarg [count] = arg [i+1]\r\n\t       opts [count] = opt\r\n\t       i = i + 1\r\n\t    end\r\n\t end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "local opt = a:sub (3, pos-1)",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "opt = canonize (options, opt)",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "if options [opt] == 0 then\r\n\t       exit_with_error (\"Bad usage of option `\" .. a .. \"'\\n\", 1)\r\n\t    end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "exit_with_error (\"Bad usage of option `\" .. a .. \"'\\n\", 1)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "optarg [count] = a:sub (pos+1)",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "opts [count] = opt",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "local opt = a:sub (3)",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "if options [opt] == 0 then\r\n\t       opts [count] = opt\r\n\t    else\r\n\t       if i == #arg then\r\n\t\t  exit_with_error (\"Missed value for option `\" .. a .. \"'\\n\", 1)\r\n\t       end\r\n\r\n\t       optarg [count] = arg [i+1]\r\n\t       opts [count] = opt\r\n\t       i = i + 1\r\n\t    end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "if i == #arg then\r\n\t\t  exit_with_error (\"Missed value for option `\" .. a .. \"'\\n\", 1)\r\n\t       end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "exit_with_error (\"Missed value for option `\" .. a .. \"'\\n\", 1)",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "optarg [count] = arg [i+1]",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "count = count + 1",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "local j",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "for j=2,a:len () do\r\n\t    local opt = canonize (options, a:sub (j, j))\r\n\r\n\t    if options [opt] == 0 then\r\n\t       opts [count] = opt\r\n\t       count = count + 1\r\n\t    elseif a:len () == j then\r\n\t       if i == #arg then\r\n\t\t  exit_with_error (\"Missed value for option `-\" .. opt .. \"'\\n\", 1)\r\n\t       end\r\n\r\n\t       optarg [count] = arg [i+1]\r\n\t       opts [count] = opt\r\n\t       i = i + 1\r\n\t       count = count + 1\r\n\t       break\r\n\t    else\r\n\t       optarg [count] = a:sub (j+1)\r\n\t       opts [count] = opt\r\n\t       count = count + 1\r\n\t       break\r\n\t    end\r\n\t end",
    "type": "statement:numericfor"
  }, {
    "id": 52,
    "text": "local opt = canonize (options, a:sub (j, j))",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "if options [opt] == 0 then\r\n\t       opts [count] = opt\r\n\t       count = count + 1\r\n\t    elseif a:len () == j then\r\n\t       if i == #arg then\r\n\t\t  exit_with_error (\"Missed value for option `-\" .. opt .. \"'\\n\", 1)\r\n\t       end\r\n\r\n\t       optarg [count] = arg [i+1]\r\n\t       opts [count] = opt\r\n\t       i = i + 1\r\n\t       count = count + 1\r\n\t       break\r\n\t    else\r\n\t       optarg [count] = a:sub (j+1)\r\n\t       opts [count] = opt\r\n\t       count = count + 1\r\n\t       break\r\n\t    end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "if i == #arg then\r\n\t\t  exit_with_error (\"Missed value for option `-\" .. opt .. \"'\\n\", 1)\r\n\t       end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "exit_with_error (\"Missed value for option `-\" .. opt .. \"'\\n\", 1)",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "optarg [count] = a:sub (j+1)",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function get_opts (arg, sh_opts, long_opts)\r\n   local ret = {}\r\n\r\n   local opts,optind,optarg = get_ordered_opts (arg, sh_opts, long_opts)\r\n   for i,v in ipairs (opts) do\r\n      if optarg [i] then\r\n\t ret [v] = optarg [i]\r\n      else\r\n\t ret [v] = 1\r\n      end\r\n   end\r\n\r\n   return ret,optind\r\nend",
    "type": "function"
  }, {
    "id": 59,
    "text": "local opts,optind,optarg = get_ordered_opts (arg, sh_opts, long_opts)",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "for i,v in ipairs (opts) do\r\n      if optarg [i] then\r\n\t ret [v] = optarg [i]\r\n      else\r\n\t ret [v] = 1\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 61,
    "text": "if optarg [i] then\r\n\t ret [v] = optarg [i]\r\n      else\r\n\t ret [v] = 1\r\n      end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "ret [v] = optarg [i]",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "ret [v] = 1",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "",
    "type": "function container"
  }, {
    "id": 66,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 67,
    "text": "type",
    "type": "global function"
  }, {
    "id": 68,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 69,
    "text": "module",
    "type": "global function"
  }, {
    "id": 70,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 71,
    "text": "",
    "type": "variable container"
  }, {
    "id": 72,
    "text": "",
    "type": "require container"
  }, {
    "id": 73,
    "text": "",
    "type": "local variable"
  }, {
    "id": 74,
    "text": "",
    "type": "n/a"
  }, {
    "id": 75,
    "text": "",
    "type": "local variable"
  }, {
    "id": 76,
    "text": "",
    "type": "n/a"
  }, {
    "id": 77,
    "text": "",
    "type": "local variable"
  }, {
    "id": 78,
    "text": "",
    "type": "n/a"
  }, {
    "id": 79,
    "text": "",
    "type": "local variable"
  }, {
    "id": 80,
    "text": "",
    "type": "n/a"
  }, {
    "id": 81,
    "text": "",
    "type": "local variable"
  }, {
    "id": 82,
    "text": "",
    "type": "n/a"
  } ]
}