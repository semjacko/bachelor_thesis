{
  "_filename": "test_metadata.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lzmq-ffi/test/test_metadata.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 3
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 4,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 8
  }, {
    "from": 4,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 8
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 8
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 15,
    "label": "has",
    "to": 8
  }, {
    "from": 4,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 8
  }, {
    "from": 4,
    "label": "has",
    "to": 22
  }, {
    "from": 4,
    "label": "has",
    "to": 23
  }, {
    "from": 4,
    "label": "has",
    "to": 24
  }, {
    "from": 4,
    "label": "has",
    "to": 25
  }, {
    "from": 4,
    "label": "has",
    "to": 26
  }, {
    "from": 4,
    "label": "has",
    "to": 27
  }, {
    "from": 4,
    "label": "has",
    "to": 28
  }, {
    "from": 4,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 33
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 4,
    "label": "has",
    "to": 37
  }, {
    "from": 4,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 6
  }, {
    "from": 39,
    "label": "has",
    "to": 7
  }, {
    "from": 39,
    "label": "has",
    "to": 8
  }, {
    "from": 39,
    "label": "has",
    "to": 9
  }, {
    "from": 39,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 39,
    "label": "has",
    "to": 8
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 8
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 16
  }, {
    "from": 43,
    "label": "has",
    "to": 8
  }, {
    "from": 43,
    "label": "has",
    "to": 17
  }, {
    "from": 43,
    "label": "has",
    "to": 8
  }, {
    "from": 43,
    "label": "has",
    "to": 18
  }, {
    "from": 43,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 43,
    "label": "has",
    "to": 8
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 8
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 47,
    "label": "has",
    "to": 51
  }, {
    "from": 47,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 47,
    "label": "has",
    "to": 8
  }, {
    "from": 47,
    "label": "has",
    "to": 54
  }, {
    "from": 47,
    "label": "has",
    "to": 55
  }, {
    "from": 47,
    "label": "has",
    "to": 56
  }, {
    "from": 47,
    "label": "has",
    "to": 57
  }, {
    "from": 47,
    "label": "has",
    "to": 58
  }, {
    "from": 47,
    "label": "has",
    "to": 59
  }, {
    "from": 47,
    "label": "has",
    "to": 60
  }, {
    "from": 47,
    "label": "has",
    "to": 61
  }, {
    "from": 47,
    "label": "has",
    "to": 62
  }, {
    "from": 47,
    "label": "has",
    "to": 63
  }, {
    "from": 47,
    "label": "has",
    "to": 64
  }, {
    "from": 47,
    "label": "has",
    "to": 65
  }, {
    "from": 47,
    "label": "has",
    "to": 66
  }, {
    "from": 47,
    "label": "has",
    "to": 67
  }, {
    "from": 47,
    "label": "has",
    "to": 68
  }, {
    "from": 47,
    "label": "has",
    "to": 69
  }, {
    "from": 47,
    "label": "has",
    "to": 70
  }, {
    "from": 47,
    "label": "has",
    "to": 71
  }, {
    "from": 47,
    "label": "has",
    "to": 72
  }, {
    "from": 4,
    "label": "calls",
    "to": 45
  }, {
    "from": 4,
    "label": "calls",
    "to": 45
  }, {
    "from": 73,
    "label": "calls",
    "to": 82
  }, {
    "from": 4,
    "label": "calls",
    "to": 83
  }, {
    "from": 4,
    "label": "calls",
    "to": 83
  }, {
    "from": 47,
    "label": "calls",
    "to": 83
  }, {
    "from": 47,
    "label": "calls",
    "to": 83
  }, {
    "from": 47,
    "label": "calls",
    "to": 83
  }, {
    "from": 47,
    "label": "calls",
    "to": 83
  }, {
    "from": 47,
    "label": "calls",
    "to": 83
  }, {
    "from": 47,
    "label": "calls",
    "to": 83
  }, {
    "from": 47,
    "label": "calls",
    "to": 83
  }, {
    "from": 4,
    "label": "calls",
    "to": 87
  }, {
    "from": 47,
    "label": "calls",
    "to": 75
  }, {
    "from": 47,
    "label": "calls",
    "to": 78
  }, {
    "from": 4,
    "label": "calls",
    "to": 74
  }, {
    "from": 4,
    "label": "calls",
    "to": 79
  }, {
    "from": 4,
    "label": "calls",
    "to": 79
  }, {
    "from": 47,
    "label": "calls",
    "to": 79
  }, {
    "from": 73,
    "label": "calls",
    "to": 79
  }, {
    "from": 73,
    "label": "calls",
    "to": 79
  }, {
    "from": 4,
    "label": "calls",
    "to": 43
  }, {
    "from": 4,
    "label": "calls",
    "to": 39
  }, {
    "from": 73,
    "label": "calls",
    "to": 80
  }, {
    "from": 47,
    "label": "calls",
    "to": 76
  }, {
    "from": 4,
    "label": "calls",
    "to": 41
  }, {
    "from": 47,
    "label": "calls",
    "to": 86
  }, {
    "from": 47,
    "label": "calls",
    "to": 86
  }, {
    "from": 47,
    "label": "calls",
    "to": 86
  }, {
    "from": 47,
    "label": "calls",
    "to": 86
  }, {
    "from": 47,
    "label": "calls",
    "to": 84
  }, {
    "from": 4,
    "label": "calls",
    "to": 85
  }, {
    "from": 47,
    "label": "calls",
    "to": 85
  }, {
    "from": 47,
    "label": "calls",
    "to": 85
  }, {
    "from": 4,
    "label": "calls",
    "to": 81
  }, {
    "from": 4,
    "label": "calls",
    "to": 77
  }, {
    "from": 4,
    "label": "calls",
    "to": 77
  }, {
    "from": 3,
    "label": "contains",
    "to": 73
  }, {
    "from": 73,
    "label": "declares",
    "to": 4
  }, {
    "from": 73,
    "label": "declares",
    "to": 39
  }, {
    "from": 73,
    "label": "declares",
    "to": 41
  }, {
    "from": 73,
    "label": "declares",
    "to": 43
  }, {
    "from": 73,
    "label": "declares",
    "to": 45
  }, {
    "from": 73,
    "label": "declares",
    "to": 47
  }, {
    "from": 3,
    "label": "contains",
    "to": 88
  }, {
    "from": 3,
    "label": "contains",
    "to": 89
  }, {
    "from": 88,
    "label": "initializes",
    "to": 90
  }, {
    "from": 88,
    "label": "initializes",
    "to": 91
  }, {
    "from": 88,
    "label": "initializes",
    "to": 92
  }, {
    "from": 92,
    "label": "assigns",
    "to": 93
  }, {
    "from": 88,
    "label": "initializes",
    "to": 94
  }, {
    "from": 89,
    "label": "initializes",
    "to": 95
  }, {
    "from": 95,
    "label": "requires",
    "to": 1
  }, {
    "from": 89,
    "label": "initializes",
    "to": 96
  }, {
    "from": 96,
    "label": "requires",
    "to": 1
  }, {
    "from": 89,
    "label": "initializes",
    "to": 97
  }, {
    "from": 97,
    "label": "requires",
    "to": 2
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "lzmq",
    "type": "module"
  }, {
    "id": 2,
    "text": "threads",
    "type": "module"
  }, {
    "id": 3,
    "text": "test_metadata",
    "type": "module"
  }, {
    "id": 4,
    "text": "local function zap_handler(pipe)\r\n\r\n  local function recv_zap(sok)\r\n    local msg, err = sok:recv_all()\r\n    if not msg then return nil, err end\r\n\r\n    local req = {\r\n      version    = msg[1]; -- Version number, must be \"1.0\"\r\n      sequence   = msg[2]; -- Sequence number of request\r\n      domain     = msg[3]; -- Server socket domain\r\n      address    = msg[4]; -- Client IP address\r\n      identity   = msg[5]; -- Server socket idenntity\r\n      mechanism  = msg[6]; -- Security mechansim\r\n    }\r\n    if req.mechanism == \"PLAIN\" then\r\n      req.username = msg[7];   -- PLAIN user name\r\n      req.password = msg[8];   -- PLAIN password, in clear text\r\n    elseif req.mechanism == \"CURVE\" then\r\n      req.client_key = msg[7]; -- CURVE client public key\r\n    end\r\n    return req\r\n  end\r\n\r\n  local function mpair(k, v)\r\n    -- mpair support values shorter than 255\r\n    return string.char(#k) .. k .. \"\\000\\000\\000\" .. string.char(#v) .. v\r\n  end\r\n\r\n  local function zmeta(t)\r\n    if not t then return \"\" end\r\n    if type(t) == \"string\" then return t end\r\n    local s = \"\"\r\n    for k, v in pairs(t) do s = s .. mpair(k,v) end\r\n    return s\r\n  end\r\n\r\n  local function send_zap(sok, req, status, text, user, meta)\r\n    return sok:sendx(req.version, req.sequence, status, text, user or \"\", zmeta(meta))\r\n  end\r\n\r\n  --===========================================================================\r\n\r\n  local zmq = require \"lzmq\"\r\n\r\n  local ctx = pipe:context()\r\n  local handler, err = ctx:socket{zmq.REP,\r\n    bind = \"inproc://zeromq.zap.01\",\r\n    linger = 0,\r\n  }\r\n  zmq.assert(handler, err)\r\n\r\n  pipe:send(\"start\")\r\n\r\n  local metadata = {\r\n    Hello = \"World\";\r\n    World = \"Hello\";\r\n  }\r\n\r\n  print(\"Start ZAP handler\")\r\n\r\n  -- Process ZAP requests forever\r\n  while true do\r\n    local req, err = recv_zap(handler)\r\n\r\n    if not req then break end --Terminating\r\n\r\n    assert (req.version   == \"1.0\" )\r\n    assert (req.mechanism == \"NULL\")\r\n\r\n    if req.domain == \"DOMAIN\" then\r\n      send_zap(handler, req,\r\n        \"200\", \"OK\",\r\n        \"anonymous\", metadata\r\n      )\r\n    else\r\n      send_zap(handler, req.version,\r\n        \"400\", \"BAD DOMAIN\",\r\n        \"\", \"\"\r\n      )\r\n    end\r\n  end\r\n\r\n  print(\"Stop ZAP handler\")\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "local function recv_zap(sok)\r\n    local msg, err = sok:recv_all()\r\n    if not msg then return nil, err end\r\n\r\n    local req = {\r\n      version    = msg[1]; -- Version number, must be \"1.0\"\r\n      sequence   = msg[2]; -- Sequence number of request\r\n      domain     = msg[3]; -- Server socket domain\r\n      address    = msg[4]; -- Client IP address\r\n      identity   = msg[5]; -- Server socket idenntity\r\n      mechanism  = msg[6]; -- Security mechansim\r\n    }\r\n    if req.mechanism == \"PLAIN\" then\r\n      req.username = msg[7];   -- PLAIN user name\r\n      req.password = msg[8];   -- PLAIN password, in clear text\r\n    elseif req.mechanism == \"CURVE\" then\r\n      req.client_key = msg[7]; -- CURVE client public key\r\n    end\r\n    return req\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 6,
    "text": "local msg, err = sok:recv_all()",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "if not msg then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 9,
    "text": "local req = {\r\n      version    = msg[1]; -- Version number, must be \"1.0\"\r\n      sequence   = msg[2]; -- Sequence number of request\r\n      domain     = msg[3]; -- Server socket domain\r\n      address    = msg[4]; -- Client IP address\r\n      identity   = msg[5]; -- Server socket idenntity\r\n      mechanism  = msg[6]; -- Security mechansim\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "if req.mechanism == \"PLAIN\" then\r\n      req.username = msg[7];   -- PLAIN user name\r\n      req.password = msg[8];   -- PLAIN password, in clear text\r\n    elseif req.mechanism == \"CURVE\" then\r\n      req.client_key = msg[7]; -- CURVE client public key\r\n    end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "req.username = msg[7]",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "req.password = msg[8]",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "req.client_key = msg[7]",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "local function mpair(k, v)\r\n    -- mpair support values shorter than 255\r\n    return string.char(#k) .. k .. \"\\000\\000\\000\" .. string.char(#v) .. v\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 15,
    "text": "local function zmeta(t)\r\n    if not t then return \"\" end\r\n    if type(t) == \"string\" then return t end\r\n    local s = \"\"\r\n    for k, v in pairs(t) do s = s .. mpair(k,v) end\r\n    return s\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 16,
    "text": "if not t then return \"\" end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "if type(t) == \"string\" then return t end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "local s = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "for k, v in pairs(t) do s = s .. mpair(k,v) end",
    "type": "statement:genericfor"
  }, {
    "id": 20,
    "text": "s = s .. mpair(k,v)",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "local function send_zap(sok, req, status, text, user, meta)\r\n    return sok:sendx(req.version, req.sequence, status, text, user or \"\", zmeta(meta))\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 22,
    "text": "local zmq = require \"lzmq\"",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "local ctx = pipe:context()",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "local handler, err = ctx:socket{zmq.REP,\r\n    bind = \"inproc://zeromq.zap.01\",\r\n    linger = 0,\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "zmq.assert(handler, err)",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "pipe:send(\"start\")",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "local metadata = {\r\n    Hello = \"World\";\r\n    World = \"Hello\";\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "print(\"Start ZAP handler\")",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "while true do\r\n    local req, err = recv_zap(handler)\r\n\r\n    if not req then break end --Terminating\r\n\r\n    assert (req.version   == \"1.0\" )\r\n    assert (req.mechanism == \"NULL\")\r\n\r\n    if req.domain == \"DOMAIN\" then\r\n      send_zap(handler, req,\r\n        \"200\", \"OK\",\r\n        \"anonymous\", metadata\r\n      )\r\n    else\r\n      send_zap(handler, req.version,\r\n        \"400\", \"BAD DOMAIN\",\r\n        \"\", \"\"\r\n      )\r\n    end\r\n  end",
    "type": "statement:while"
  }, {
    "id": 30,
    "text": "local req, err = recv_zap(handler)",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "if not req then break end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "assert (req.version   == \"1.0\" )",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "assert (req.mechanism == \"NULL\")",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "if req.domain == \"DOMAIN\" then\r\n      send_zap(handler, req,\r\n        \"200\", \"OK\",\r\n        \"anonymous\", metadata\r\n      )\r\n    else\r\n      send_zap(handler, req.version,\r\n        \"400\", \"BAD DOMAIN\",\r\n        \"\", \"\"\r\n      )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "send_zap(handler, req,\r\n        \"200\", \"OK\",\r\n        \"anonymous\", metadata\r\n      )",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "send_zap(handler, req.version,\r\n        \"400\", \"BAD DOMAIN\",\r\n        \"\", \"\"\r\n      )",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "print(\"Stop ZAP handler\")",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "local function recv_zap(sok)\r\n    local msg, err = sok:recv_all()\r\n    if not msg then return nil, err end\r\n\r\n    local req = {\r\n      version    = msg[1]; -- Version number, must be \"1.0\"\r\n      sequence   = msg[2]; -- Sequence number of request\r\n      domain     = msg[3]; -- Server socket domain\r\n      address    = msg[4]; -- Client IP address\r\n      identity   = msg[5]; -- Server socket idenntity\r\n      mechanism  = msg[6]; -- Security mechansim\r\n    }\r\n    if req.mechanism == \"PLAIN\" then\r\n      req.username = msg[7];   -- PLAIN user name\r\n      req.password = msg[8];   -- PLAIN password, in clear text\r\n    elseif req.mechanism == \"CURVE\" then\r\n      req.client_key = msg[7]; -- CURVE client public key\r\n    end\r\n    return req\r\n  end",
    "type": "function"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "local function mpair(k, v)\r\n    -- mpair support values shorter than 255\r\n    return string.char(#k) .. k .. \"\\000\\000\\000\" .. string.char(#v) .. v\r\n  end",
    "type": "function"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "local function zmeta(t)\r\n    if not t then return \"\" end\r\n    if type(t) == \"string\" then return t end\r\n    local s = \"\"\r\n    for k, v in pairs(t) do s = s .. mpair(k,v) end\r\n    return s\r\n  end",
    "type": "function"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "local function send_zap(sok, req, status, text, user, meta)\r\n    return sok:sendx(req.version, req.sequence, status, text, user or \"\", zmeta(meta))\r\n  end",
    "type": "function"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "local function main()\r\n\r\n  local zmq      = require \"lzmq\"\r\n  local zthreads = require \"lzmq.threads\"\r\n  local zassert  = zmq.assert\r\n\r\n  local msg = zmq.msg_init()\r\n  if not msg.gets then\r\n    print(\"This version does not support zmq_msg_gets version!\")\r\n    return\r\n  end\r\n\r\n  ctx = zassert(zmq.context())\r\n\r\n  local pipe\r\n  zap_thread, pipe = zthreads.fork(ctx, string.dump(zap_handler))\r\n  assert(zap_thread, pipe)\r\n  pipe:set_rcvtimeo(500)\r\n  assert(zap_thread:start())\r\n  assert(pipe:recv() == \"start\")\r\n\r\n  local server, err = ctx:socket{zmq.DEALER,\r\n    zap_domain = \"DOMAIN\",\r\n    bind  = \"tcp://127.0.0.1:9001\",\r\n  }\r\n  zassert (server, err)\r\n\r\n  local client, err = ctx:socket{zmq.DEALER,\r\n    connect = \"tcp://127.0.0.1:9001\",\r\n  }\r\n  zassert (client, err)\r\n\r\n  client:send(\"This is a message\")\r\n\r\n  local msg = zassert(server:recv_new_msg())\r\n  assert(msg:gets(\"Hello\")       == \"World\")\r\n  assert(msg:gets(\"World\")       == \"Hello\")\r\n  assert(msg:gets(\"Socket-Type\") == \"DEALER\")\r\n  assert(msg:gets(\"User-Id\")     == \"anonymous\")\r\n  msg:close()\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "local zmq      = require \"lzmq\"",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "local zthreads = require \"lzmq.threads\"",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "local zassert  = zmq.assert",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "local msg = zmq.msg_init()",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "if not msg.gets then\r\n    print(\"This version does not support zmq_msg_gets version!\")\r\n    return\r\n  end",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "print(\"This version does not support zmq_msg_gets version!\")",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "ctx = zassert(zmq.context())",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "local pipe",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "zap_thread, pipe = zthreads.fork(ctx, string.dump(zap_handler))",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "assert(zap_thread, pipe)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "pipe:set_rcvtimeo(500)",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "assert(zap_thread:start())",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "assert(pipe:recv() == \"start\")",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "local server, err = ctx:socket{zmq.DEALER,\r\n    zap_domain = \"DOMAIN\",\r\n    bind  = \"tcp://127.0.0.1:9001\",\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "zassert (server, err)",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "local client, err = ctx:socket{zmq.DEALER,\r\n    connect = \"tcp://127.0.0.1:9001\",\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "zassert (client, err)",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "client:send(\"This is a message\")",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "local msg = zassert(server:recv_new_msg())",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "assert(msg:gets(\"Hello\")       == \"World\")",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "assert(msg:gets(\"World\")       == \"Hello\")",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "assert(msg:gets(\"Socket-Type\") == \"DEALER\")",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "assert(msg:gets(\"User-Id\")     == \"anonymous\")",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "msg:close()",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "",
    "type": "function container"
  }, {
    "id": 74,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 75,
    "text": "context",
    "type": "global function"
  }, {
    "id": 76,
    "text": "msg_init",
    "type": "global function"
  }, {
    "id": 77,
    "text": "char",
    "type": "global function"
  }, {
    "id": 78,
    "text": "fork",
    "type": "global function"
  }, {
    "id": 79,
    "text": "print",
    "type": "global function"
  }, {
    "id": 80,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 81,
    "text": "type",
    "type": "global function"
  }, {
    "id": 82,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 83,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 84,
    "text": "dump",
    "type": "global function"
  }, {
    "id": 85,
    "text": "require",
    "type": "global function"
  }, {
    "id": 86,
    "text": "zassert",
    "type": "global function"
  }, {
    "id": 87,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 88,
    "text": "",
    "type": "variable container"
  }, {
    "id": 89,
    "text": "",
    "type": "require container"
  }, {
    "id": 90,
    "text": "",
    "type": "local variable"
  }, {
    "id": 91,
    "text": "",
    "type": "local variable"
  }, {
    "id": 92,
    "text": "",
    "type": "local variable"
  }, {
    "id": 93,
    "text": "",
    "type": "n/a"
  }, {
    "id": 94,
    "text": "",
    "type": "local variable"
  }, {
    "id": 95,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 96,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 97,
    "text": "",
    "type": "require local variable"
  } ]
}