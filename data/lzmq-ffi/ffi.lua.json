{
  "_filename": "ffi.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lzmq-ffi/src/lua/lzmq/ffi.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 4,
    "label": "has",
    "to": 11
  }, {
    "from": 4,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 11
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 11
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 11
  }, {
    "from": 17,
    "label": "has",
    "to": 11
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 11
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 11
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 11
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 11
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 11
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 11
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 11
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 33,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 38,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 38,
    "label": "has",
    "to": 11
  }, {
    "from": 38,
    "label": "has",
    "to": 48
  }, {
    "from": 38,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 38,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 51
  }, {
    "from": 38,
    "label": "has",
    "to": 11
  }, {
    "from": 38,
    "label": "has",
    "to": 11
  }, {
    "from": 38,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 60,
    "label": "has",
    "to": 63
  }, {
    "from": 60,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 61
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 11
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 72,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 11
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 76,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 76,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 76,
    "label": "has",
    "to": 83
  }, {
    "from": 76,
    "label": "has",
    "to": 11
  }, {
    "from": 76,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 11
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 78
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 88,
    "label": "has",
    "to": 92
  }, {
    "from": 88,
    "label": "has",
    "to": 11
  }, {
    "from": 88,
    "label": "has",
    "to": 93
  }, {
    "from": 94,
    "label": "has",
    "to": 11
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "has",
    "to": 89
  }, {
    "from": 96,
    "label": "has",
    "to": 11
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 98,
    "label": "has",
    "to": 89
  }, {
    "from": 98,
    "label": "has",
    "to": 11
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 100,
    "label": "has",
    "to": 89
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 100,
    "label": "has",
    "to": 102
  }, {
    "from": 100,
    "label": "has",
    "to": 11
  }, {
    "from": 100,
    "label": "has",
    "to": 11
  }, {
    "from": 100,
    "label": "has",
    "to": 103
  }, {
    "from": 104,
    "label": "has",
    "to": 89
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 104,
    "label": "has",
    "to": 11
  }, {
    "from": 104,
    "label": "has",
    "to": 107
  }, {
    "from": 108,
    "label": "has",
    "to": 11
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 110,
    "label": "has",
    "to": 11
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 112,
    "label": "has",
    "to": 89
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 112,
    "label": "has",
    "to": 115
  }, {
    "from": 112,
    "label": "has",
    "to": 116
  }, {
    "from": 112,
    "label": "has",
    "to": 11
  }, {
    "from": 112,
    "label": "has",
    "to": 117
  }, {
    "from": 112,
    "label": "has",
    "to": 118
  }, {
    "from": 112,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 121,
    "label": "has",
    "to": 55
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 122,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 51
  }, {
    "from": 119,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 125,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 119,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 129,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 112,
    "label": "has",
    "to": 11
  }, {
    "from": 112,
    "label": "has",
    "to": 11
  }, {
    "from": 112,
    "label": "has",
    "to": 11
  }, {
    "from": 112,
    "label": "has",
    "to": 131
  }, {
    "from": 112,
    "label": "has",
    "to": 11
  }, {
    "from": 112,
    "label": "has",
    "to": 132
  }, {
    "from": 133,
    "label": "has",
    "to": 89
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 133,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 133,
    "label": "has",
    "to": 11
  }, {
    "from": 133,
    "label": "has",
    "to": 137
  }, {
    "from": 138,
    "label": "has",
    "to": 89
  }, {
    "from": 138,
    "label": "has",
    "to": 11
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 140,
    "label": "has",
    "to": 89
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 140,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 140,
    "label": "has",
    "to": 11
  }, {
    "from": 140,
    "label": "has",
    "to": 144
  }, {
    "from": 145,
    "label": "has",
    "to": 11
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 147,
    "label": "has",
    "to": 77
  }, {
    "from": 147,
    "label": "has",
    "to": 11
  }, {
    "from": 147,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 149,
    "label": "has",
    "to": 151
  }, {
    "from": 148,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 148,
    "label": "has",
    "to": 154
  }, {
    "from": 147,
    "label": "has",
    "to": 155
  }, {
    "from": 147,
    "label": "has",
    "to": 156
  }, {
    "from": 147,
    "label": "has",
    "to": 11
  }, {
    "from": 147,
    "label": "has",
    "to": 157
  }, {
    "from": 158,
    "label": "has",
    "to": 11
  }, {
    "from": 158,
    "label": "has",
    "to": 159
  }, {
    "from": 160,
    "label": "has",
    "to": 161
  }, {
    "from": 160,
    "label": "has",
    "to": 162
  }, {
    "from": 162,
    "label": "has",
    "to": 150
  }, {
    "from": 160,
    "label": "has",
    "to": 163
  }, {
    "from": 160,
    "label": "has",
    "to": 164
  }, {
    "from": 164,
    "label": "has",
    "to": 165
  }, {
    "from": 160,
    "label": "has",
    "to": 166
  }, {
    "from": 166,
    "label": "has",
    "to": 167
  }, {
    "from": 160,
    "label": "has",
    "to": 168
  }, {
    "from": 168,
    "label": "has",
    "to": 169
  }, {
    "from": 160,
    "label": "has",
    "to": 170
  }, {
    "from": 170,
    "label": "has",
    "to": 171
  }, {
    "from": 160,
    "label": "has",
    "to": 11
  }, {
    "from": 160,
    "label": "has",
    "to": 11
  }, {
    "from": 160,
    "label": "has",
    "to": 172
  }, {
    "from": 173,
    "label": "has",
    "to": 11
  }, {
    "from": 173,
    "label": "has",
    "to": 174
  }, {
    "from": 175,
    "label": "has",
    "to": 11
  }, {
    "from": 175,
    "label": "has",
    "to": 34
  }, {
    "from": 175,
    "label": "has",
    "to": 176
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 176,
    "label": "has",
    "to": 178
  }, {
    "from": 175,
    "label": "has",
    "to": 11
  }, {
    "from": 175,
    "label": "has",
    "to": 11
  }, {
    "from": 175,
    "label": "has",
    "to": 179
  }, {
    "from": 175,
    "label": "has",
    "to": 180
  }, {
    "from": 180,
    "label": "has",
    "to": 181
  }, {
    "from": 180,
    "label": "has",
    "to": 182
  }, {
    "from": 175,
    "label": "has",
    "to": 11
  }, {
    "from": 175,
    "label": "has",
    "to": 11
  }, {
    "from": 175,
    "label": "has",
    "to": 183
  }, {
    "from": 184,
    "label": "has",
    "to": 185
  }, {
    "from": 184,
    "label": "has",
    "to": 186
  }, {
    "from": 184,
    "label": "has",
    "to": 187
  }, {
    "from": 184,
    "label": "has",
    "to": 188
  }, {
    "from": 184,
    "label": "has",
    "to": 189
  }, {
    "from": 184,
    "label": "has",
    "to": 190
  }, {
    "from": 184,
    "label": "has",
    "to": 191
  }, {
    "from": 191,
    "label": "has",
    "to": 192
  }, {
    "from": 191,
    "label": "has",
    "to": 193
  }, {
    "from": 191,
    "label": "has",
    "to": 194
  }, {
    "from": 191,
    "label": "has",
    "to": 195
  }, {
    "from": 195,
    "label": "has",
    "to": 196
  }, {
    "from": 195,
    "label": "has",
    "to": 197
  }, {
    "from": 197,
    "label": "has",
    "to": 198
  }, {
    "from": 191,
    "label": "has",
    "to": 199
  }, {
    "from": 184,
    "label": "has",
    "to": 11
  }, {
    "from": 184,
    "label": "has",
    "to": 11
  }, {
    "from": 184,
    "label": "has",
    "to": 200
  }, {
    "from": 201,
    "label": "has",
    "to": 34
  }, {
    "from": 201,
    "label": "has",
    "to": 202
  }, {
    "from": 201,
    "label": "has",
    "to": 102
  }, {
    "from": 201,
    "label": "has",
    "to": 11
  }, {
    "from": 201,
    "label": "has",
    "to": 11
  }, {
    "from": 201,
    "label": "has",
    "to": 203
  }, {
    "from": 204,
    "label": "has",
    "to": 34
  }, {
    "from": 204,
    "label": "has",
    "to": 205
  }, {
    "from": 204,
    "label": "has",
    "to": 206
  }, {
    "from": 204,
    "label": "has",
    "to": 11
  }, {
    "from": 204,
    "label": "has",
    "to": 207
  }, {
    "from": 204,
    "label": "has",
    "to": 208
  }, {
    "from": 208,
    "label": "has",
    "to": 209
  }, {
    "from": 204,
    "label": "has",
    "to": 11
  }, {
    "from": 204,
    "label": "has",
    "to": 210
  }, {
    "from": 204,
    "label": "has",
    "to": 211
  }, {
    "from": 204,
    "label": "has",
    "to": 209
  }, {
    "from": 204,
    "label": "has",
    "to": 11
  }, {
    "from": 204,
    "label": "has",
    "to": 212
  }, {
    "from": 213,
    "label": "has",
    "to": 214
  }, {
    "from": 213,
    "label": "has",
    "to": 215
  }, {
    "from": 213,
    "label": "has",
    "to": 216
  }, {
    "from": 213,
    "label": "has",
    "to": 217
  }, {
    "from": 213,
    "label": "has",
    "to": 218
  }, {
    "from": 213,
    "label": "has",
    "to": 11
  }, {
    "from": 213,
    "label": "has",
    "to": 219
  }, {
    "from": 219,
    "label": "has",
    "to": 220
  }, {
    "from": 219,
    "label": "has",
    "to": 221
  }, {
    "from": 219,
    "label": "has",
    "to": 222
  }, {
    "from": 213,
    "label": "has",
    "to": 11
  }, {
    "from": 213,
    "label": "has",
    "to": 223
  }, {
    "from": 213,
    "label": "has",
    "to": 224
  }, {
    "from": 213,
    "label": "has",
    "to": 11
  }, {
    "from": 213,
    "label": "has",
    "to": 11
  }, {
    "from": 213,
    "label": "has",
    "to": 225
  }, {
    "from": 226,
    "label": "has",
    "to": 11
  }, {
    "from": 226,
    "label": "has",
    "to": 227
  }, {
    "from": 228,
    "label": "has",
    "to": 11
  }, {
    "from": 228,
    "label": "has",
    "to": 229
  }, {
    "from": 230,
    "label": "has",
    "to": 231
  }, {
    "from": 230,
    "label": "has",
    "to": 11
  }, {
    "from": 230,
    "label": "has",
    "to": 232
  }, {
    "from": 233,
    "label": "has",
    "to": 11
  }, {
    "from": 233,
    "label": "has",
    "to": 234
  }, {
    "from": 235,
    "label": "has",
    "to": 236
  }, {
    "from": 235,
    "label": "has",
    "to": 237
  }, {
    "from": 237,
    "label": "has",
    "to": 238
  }, {
    "from": 237,
    "label": "has",
    "to": 239
  }, {
    "from": 237,
    "label": "has",
    "to": 240
  }, {
    "from": 237,
    "label": "has",
    "to": 241
  }, {
    "from": 235,
    "label": "has",
    "to": 11
  }, {
    "from": 235,
    "label": "has",
    "to": 11
  }, {
    "from": 235,
    "label": "has",
    "to": 242
  }, {
    "from": 243,
    "label": "has",
    "to": 244
  }, {
    "from": 243,
    "label": "has",
    "to": 245
  }, {
    "from": 245,
    "label": "has",
    "to": 246
  }, {
    "from": 243,
    "label": "has",
    "to": 11
  }, {
    "from": 243,
    "label": "has",
    "to": 11
  }, {
    "from": 243,
    "label": "has",
    "to": 11
  }, {
    "from": 243,
    "label": "has",
    "to": 247
  }, {
    "from": 248,
    "label": "has",
    "to": 34
  }, {
    "from": 248,
    "label": "has",
    "to": 249
  }, {
    "from": 248,
    "label": "has",
    "to": 250
  }, {
    "from": 248,
    "label": "has",
    "to": 251
  }, {
    "from": 248,
    "label": "has",
    "to": 252
  }, {
    "from": 248,
    "label": "has",
    "to": 11
  }, {
    "from": 248,
    "label": "has",
    "to": 11
  }, {
    "from": 248,
    "label": "has",
    "to": 253
  }, {
    "from": 254,
    "label": "has",
    "to": 11
  }, {
    "from": 254,
    "label": "has",
    "to": 255
  }, {
    "from": 256,
    "label": "has",
    "to": 257
  }, {
    "from": 256,
    "label": "has",
    "to": 258
  }, {
    "from": 256,
    "label": "has",
    "to": 259
  }, {
    "from": 259,
    "label": "has",
    "to": 260
  }, {
    "from": 256,
    "label": "has",
    "to": 11
  }, {
    "from": 256,
    "label": "has",
    "to": 11
  }, {
    "from": 256,
    "label": "has",
    "to": 261
  }, {
    "from": 262,
    "label": "has",
    "to": 34
  }, {
    "from": 262,
    "label": "has",
    "to": 11
  }, {
    "from": 262,
    "label": "has",
    "to": 263
  }, {
    "from": 264,
    "label": "has",
    "to": 11
  }, {
    "from": 264,
    "label": "has",
    "to": 34
  }, {
    "from": 264,
    "label": "has",
    "to": 265
  }, {
    "from": 264,
    "label": "has",
    "to": 266
  }, {
    "from": 264,
    "label": "has",
    "to": 11
  }, {
    "from": 264,
    "label": "has",
    "to": 11
  }, {
    "from": 264,
    "label": "has",
    "to": 267
  }, {
    "from": 268,
    "label": "has",
    "to": 11
  }, {
    "from": 268,
    "label": "has",
    "to": 34
  }, {
    "from": 268,
    "label": "has",
    "to": 269
  }, {
    "from": 268,
    "label": "has",
    "to": 178
  }, {
    "from": 268,
    "label": "has",
    "to": 11
  }, {
    "from": 268,
    "label": "has",
    "to": 11
  }, {
    "from": 268,
    "label": "has",
    "to": 270
  }, {
    "from": 271,
    "label": "has",
    "to": 272
  }, {
    "from": 271,
    "label": "has",
    "to": 11
  }, {
    "from": 271,
    "label": "has",
    "to": 273
  }, {
    "from": 271,
    "label": "has",
    "to": 274
  }, {
    "from": 274,
    "label": "has",
    "to": 275
  }, {
    "from": 274,
    "label": "has",
    "to": 276
  }, {
    "from": 271,
    "label": "has",
    "to": 11
  }, {
    "from": 271,
    "label": "has",
    "to": 11
  }, {
    "from": 271,
    "label": "has",
    "to": 277
  }, {
    "from": 278,
    "label": "has",
    "to": 11
  }, {
    "from": 279,
    "label": "has",
    "to": 11
  }, {
    "from": 280,
    "label": "has",
    "to": 281
  }, {
    "from": 280,
    "label": "has",
    "to": 282
  }, {
    "from": 280,
    "label": "has",
    "to": 11
  }, {
    "from": 280,
    "label": "has",
    "to": 11
  }, {
    "from": 280,
    "label": "has",
    "to": 283
  }, {
    "from": 284,
    "label": "has",
    "to": 34
  }, {
    "from": 284,
    "label": "has",
    "to": 86
  }, {
    "from": 284,
    "label": "has",
    "to": 11
  }, {
    "from": 284,
    "label": "has",
    "to": 285
  }, {
    "from": 286,
    "label": "has",
    "to": 11
  }, {
    "from": 286,
    "label": "has",
    "to": 287
  }, {
    "from": 288,
    "label": "has",
    "to": 289
  }, {
    "from": 289,
    "label": "has",
    "to": 290
  }, {
    "from": 288,
    "label": "has",
    "to": 291
  }, {
    "from": 291,
    "label": "has",
    "to": 292
  }, {
    "from": 288,
    "label": "has",
    "to": 293
  }, {
    "from": 288,
    "label": "has",
    "to": 294
  }, {
    "from": 288,
    "label": "has",
    "to": 178
  }, {
    "from": 288,
    "label": "has",
    "to": 11
  }, {
    "from": 288,
    "label": "has",
    "to": 11
  }, {
    "from": 288,
    "label": "has",
    "to": 295
  }, {
    "from": 296,
    "label": "has",
    "to": 297
  }, {
    "from": 296,
    "label": "has",
    "to": 298
  }, {
    "from": 296,
    "label": "has",
    "to": 299
  }, {
    "from": 296,
    "label": "has",
    "to": 300
  }, {
    "from": 296,
    "label": "has",
    "to": 301
  }, {
    "from": 296,
    "label": "has",
    "to": 302
  }, {
    "from": 296,
    "label": "has",
    "to": 303
  }, {
    "from": 296,
    "label": "has",
    "to": 304
  }, {
    "from": 296,
    "label": "has",
    "to": 305
  }, {
    "from": 296,
    "label": "has",
    "to": 102
  }, {
    "from": 296,
    "label": "has",
    "to": 11
  }, {
    "from": 296,
    "label": "has",
    "to": 11
  }, {
    "from": 296,
    "label": "has",
    "to": 306
  }, {
    "from": 307,
    "label": "has",
    "to": 308
  }, {
    "from": 307,
    "label": "has",
    "to": 309
  }, {
    "from": 309,
    "label": "has",
    "to": 310
  }, {
    "from": 309,
    "label": "has",
    "to": 311
  }, {
    "from": 309,
    "label": "has",
    "to": 312
  }, {
    "from": 307,
    "label": "has",
    "to": 206
  }, {
    "from": 307,
    "label": "has",
    "to": 11
  }, {
    "from": 307,
    "label": "has",
    "to": 11
  }, {
    "from": 307,
    "label": "has",
    "to": 313
  }, {
    "from": 314,
    "label": "has",
    "to": 11
  }, {
    "from": 314,
    "label": "has",
    "to": 315
  }, {
    "from": 316,
    "label": "has",
    "to": 11
  }, {
    "from": 316,
    "label": "has",
    "to": 317
  }, {
    "from": 318,
    "label": "has",
    "to": 77
  }, {
    "from": 318,
    "label": "has",
    "to": 11
  }, {
    "from": 318,
    "label": "has",
    "to": 319
  }, {
    "from": 318,
    "label": "has",
    "to": 320
  }, {
    "from": 318,
    "label": "has",
    "to": 11
  }, {
    "from": 318,
    "label": "has",
    "to": 321
  }, {
    "from": 322,
    "label": "has",
    "to": 11
  }, {
    "from": 322,
    "label": "has",
    "to": 323
  }, {
    "from": 324,
    "label": "has",
    "to": 11
  }, {
    "from": 324,
    "label": "has",
    "to": 34
  }, {
    "from": 324,
    "label": "has",
    "to": 325
  }, {
    "from": 325,
    "label": "has",
    "to": 326
  }, {
    "from": 324,
    "label": "has",
    "to": 327
  }, {
    "from": 324,
    "label": "has",
    "to": 328
  }, {
    "from": 328,
    "label": "has",
    "to": 329
  }, {
    "from": 328,
    "label": "has",
    "to": 206
  }, {
    "from": 328,
    "label": "has",
    "to": 330
  }, {
    "from": 328,
    "label": "has",
    "to": 331
  }, {
    "from": 328,
    "label": "has",
    "to": 332
  }, {
    "from": 328,
    "label": "has",
    "to": 333
  }, {
    "from": 328,
    "label": "has",
    "to": 332
  }, {
    "from": 324,
    "label": "has",
    "to": 11
  }, {
    "from": 324,
    "label": "has",
    "to": 11
  }, {
    "from": 324,
    "label": "has",
    "to": 11
  }, {
    "from": 324,
    "label": "has",
    "to": 11
  }, {
    "from": 324,
    "label": "has",
    "to": 334
  }, {
    "from": 335,
    "label": "has",
    "to": 34
  }, {
    "from": 335,
    "label": "has",
    "to": 11
  }, {
    "from": 335,
    "label": "has",
    "to": 336
  }, {
    "from": 337,
    "label": "has",
    "to": 34
  }, {
    "from": 337,
    "label": "has",
    "to": 338
  }, {
    "from": 337,
    "label": "has",
    "to": 339
  }, {
    "from": 337,
    "label": "has",
    "to": 11
  }, {
    "from": 337,
    "label": "has",
    "to": 340
  }, {
    "from": 337,
    "label": "has",
    "to": 341
  }, {
    "from": 341,
    "label": "has",
    "to": 342
  }, {
    "from": 337,
    "label": "has",
    "to": 343
  }, {
    "from": 343,
    "label": "has",
    "to": 344
  }, {
    "from": 337,
    "label": "has",
    "to": 345
  }, {
    "from": 337,
    "label": "has",
    "to": 346
  }, {
    "from": 337,
    "label": "has",
    "to": 347
  }, {
    "from": 337,
    "label": "has",
    "to": 11
  }, {
    "from": 337,
    "label": "has",
    "to": 348
  }, {
    "from": 349,
    "label": "has",
    "to": 34
  }, {
    "from": 349,
    "label": "has",
    "to": 11
  }, {
    "from": 349,
    "label": "has",
    "to": 350
  }, {
    "from": 351,
    "label": "has",
    "to": 352
  }, {
    "from": 352,
    "label": "has",
    "to": 353
  }, {
    "from": 351,
    "label": "has",
    "to": 354
  }, {
    "from": 351,
    "label": "has",
    "to": 355
  }, {
    "from": 351,
    "label": "has",
    "to": 356
  }, {
    "from": 351,
    "label": "has",
    "to": 338
  }, {
    "from": 351,
    "label": "has",
    "to": 357
  }, {
    "from": 357,
    "label": "has",
    "to": 358
  }, {
    "from": 351,
    "label": "has",
    "to": 11
  }, {
    "from": 351,
    "label": "has",
    "to": 340
  }, {
    "from": 351,
    "label": "has",
    "to": 206
  }, {
    "from": 351,
    "label": "has",
    "to": 11
  }, {
    "from": 351,
    "label": "has",
    "to": 359
  }, {
    "from": 359,
    "label": "has",
    "to": 360
  }, {
    "from": 351,
    "label": "has",
    "to": 361
  }, {
    "from": 361,
    "label": "has",
    "to": 362
  }, {
    "from": 351,
    "label": "has",
    "to": 363
  }, {
    "from": 351,
    "label": "has",
    "to": 345
  }, {
    "from": 351,
    "label": "has",
    "to": 346
  }, {
    "from": 351,
    "label": "has",
    "to": 347
  }, {
    "from": 351,
    "label": "has",
    "to": 11
  }, {
    "from": 351,
    "label": "has",
    "to": 364
  }, {
    "from": 365,
    "label": "has",
    "to": 34
  }, {
    "from": 365,
    "label": "has",
    "to": 366
  }, {
    "from": 366,
    "label": "has",
    "to": 367
  }, {
    "from": 365,
    "label": "has",
    "to": 368
  }, {
    "from": 365,
    "label": "has",
    "to": 102
  }, {
    "from": 365,
    "label": "has",
    "to": 11
  }, {
    "from": 365,
    "label": "has",
    "to": 11
  }, {
    "from": 365,
    "label": "has",
    "to": 369
  }, {
    "from": 370,
    "label": "has",
    "to": 231
  }, {
    "from": 370,
    "label": "has",
    "to": 11
  }, {
    "from": 370,
    "label": "has",
    "to": 371
  }, {
    "from": 372,
    "label": "has",
    "to": 34
  }, {
    "from": 372,
    "label": "has",
    "to": 366
  }, {
    "from": 366,
    "label": "has",
    "to": 367
  }, {
    "from": 372,
    "label": "has",
    "to": 373
  }, {
    "from": 372,
    "label": "has",
    "to": 102
  }, {
    "from": 372,
    "label": "has",
    "to": 11
  }, {
    "from": 372,
    "label": "has",
    "to": 374
  }, {
    "from": 372,
    "label": "has",
    "to": 11
  }, {
    "from": 372,
    "label": "has",
    "to": 375
  }, {
    "from": 376,
    "label": "has",
    "to": 34
  }, {
    "from": 376,
    "label": "has",
    "to": 11
  }, {
    "from": 376,
    "label": "has",
    "to": 377
  }, {
    "from": 378,
    "label": "has",
    "to": 34
  }, {
    "from": 378,
    "label": "has",
    "to": 379
  }, {
    "from": 378,
    "label": "has",
    "to": 11
  }, {
    "from": 378,
    "label": "has",
    "to": 380
  }, {
    "from": 381,
    "label": "has",
    "to": 34
  }, {
    "from": 381,
    "label": "has",
    "to": 382
  }, {
    "from": 381,
    "label": "has",
    "to": 383
  }, {
    "from": 381,
    "label": "has",
    "to": 11
  }, {
    "from": 381,
    "label": "has",
    "to": 11
  }, {
    "from": 381,
    "label": "has",
    "to": 384
  }, {
    "from": 385,
    "label": "has",
    "to": 34
  }, {
    "from": 385,
    "label": "has",
    "to": 386
  }, {
    "from": 385,
    "label": "has",
    "to": 383
  }, {
    "from": 385,
    "label": "has",
    "to": 11
  }, {
    "from": 385,
    "label": "has",
    "to": 11
  }, {
    "from": 385,
    "label": "has",
    "to": 387
  }, {
    "from": 388,
    "label": "has",
    "to": 34
  }, {
    "from": 388,
    "label": "has",
    "to": 389
  }, {
    "from": 388,
    "label": "has",
    "to": 390
  }, {
    "from": 388,
    "label": "has",
    "to": 11
  }, {
    "from": 388,
    "label": "has",
    "to": 11
  }, {
    "from": 388,
    "label": "has",
    "to": 391
  }, {
    "from": 392,
    "label": "has",
    "to": 393
  }, {
    "from": 392,
    "label": "has",
    "to": 11
  }, {
    "from": 392,
    "label": "has",
    "to": 394
  }, {
    "from": 395,
    "label": "has",
    "to": 396
  }, {
    "from": 395,
    "label": "has",
    "to": 397
  }, {
    "from": 395,
    "label": "has",
    "to": 11
  }, {
    "from": 395,
    "label": "has",
    "to": 398
  }, {
    "from": 395,
    "label": "has",
    "to": 399
  }, {
    "from": 399,
    "label": "has",
    "to": 400
  }, {
    "from": 395,
    "label": "has",
    "to": 401
  }, {
    "from": 395,
    "label": "has",
    "to": 11
  }, {
    "from": 395,
    "label": "has",
    "to": 402
  }, {
    "from": 403,
    "label": "has",
    "to": 404
  }, {
    "from": 403,
    "label": "has",
    "to": 11
  }, {
    "from": 403,
    "label": "has",
    "to": 11
  }, {
    "from": 403,
    "label": "has",
    "to": 405
  }, {
    "from": 406,
    "label": "has",
    "to": 407
  }, {
    "from": 406,
    "label": "has",
    "to": 11
  }, {
    "from": 406,
    "label": "has",
    "to": 11
  }, {
    "from": 406,
    "label": "has",
    "to": 408
  }, {
    "from": 409,
    "label": "has",
    "to": 410
  }, {
    "from": 409,
    "label": "has",
    "to": 411
  }, {
    "from": 409,
    "label": "has",
    "to": 412
  }, {
    "from": 409,
    "label": "has",
    "to": 413
  }, {
    "from": 409,
    "label": "has",
    "to": 414
  }, {
    "from": 409,
    "label": "has",
    "to": 415
  }, {
    "from": 415,
    "label": "has",
    "to": 416
  }, {
    "from": 415,
    "label": "has",
    "to": 417
  }, {
    "from": 415,
    "label": "has",
    "to": 418
  }, {
    "from": 415,
    "label": "has",
    "to": 419
  }, {
    "from": 409,
    "label": "has",
    "to": 420
  }, {
    "from": 409,
    "label": "has",
    "to": 421
  }, {
    "from": 409,
    "label": "has",
    "to": 422
  }, {
    "from": 409,
    "label": "has",
    "to": 423
  }, {
    "from": 409,
    "label": "has",
    "to": 11
  }, {
    "from": 409,
    "label": "has",
    "to": 424
  }, {
    "from": 425,
    "label": "has",
    "to": 426
  }, {
    "from": 425,
    "label": "has",
    "to": 414
  }, {
    "from": 425,
    "label": "has",
    "to": 427
  }, {
    "from": 425,
    "label": "has",
    "to": 428
  }, {
    "from": 425,
    "label": "has",
    "to": 11
  }, {
    "from": 425,
    "label": "has",
    "to": 429
  }, {
    "from": 425,
    "label": "has",
    "to": 430
  }, {
    "from": 425,
    "label": "has",
    "to": 11
  }, {
    "from": 425,
    "label": "has",
    "to": 431
  }, {
    "from": 425,
    "label": "has",
    "to": 432
  }, {
    "from": 425,
    "label": "has",
    "to": 433
  }, {
    "from": 425,
    "label": "has",
    "to": 434
  }, {
    "from": 425,
    "label": "has",
    "to": 435
  }, {
    "from": 425,
    "label": "has",
    "to": 11
  }, {
    "from": 425,
    "label": "has",
    "to": 436
  }, {
    "from": 425,
    "label": "has",
    "to": 437
  }, {
    "from": 425,
    "label": "has",
    "to": 438
  }, {
    "from": 425,
    "label": "has",
    "to": 439
  }, {
    "from": 425,
    "label": "has",
    "to": 440
  }, {
    "from": 425,
    "label": "has",
    "to": 441
  }, {
    "from": 425,
    "label": "has",
    "to": 11
  }, {
    "from": 425,
    "label": "has",
    "to": 442
  }, {
    "from": 443,
    "label": "has",
    "to": 444
  }, {
    "from": 444,
    "label": "has",
    "to": 414
  }, {
    "from": 444,
    "label": "has",
    "to": 445
  }, {
    "from": 444,
    "label": "has",
    "to": 446
  }, {
    "from": 444,
    "label": "has",
    "to": 447
  }, {
    "from": 444,
    "label": "has",
    "to": 448
  }, {
    "from": 444,
    "label": "has",
    "to": 449
  }, {
    "from": 443,
    "label": "has",
    "to": 11
  }, {
    "from": 443,
    "label": "has",
    "to": 450
  }, {
    "from": 451,
    "label": "has",
    "to": 11
  }, {
    "from": 451,
    "label": "has",
    "to": 452
  }, {
    "from": 453,
    "label": "has",
    "to": 454
  }, {
    "from": 453,
    "label": "has",
    "to": 455
  }, {
    "from": 453,
    "label": "has",
    "to": 456
  }, {
    "from": 453,
    "label": "has",
    "to": 102
  }, {
    "from": 453,
    "label": "has",
    "to": 11
  }, {
    "from": 453,
    "label": "has",
    "to": 457
  }, {
    "from": 453,
    "label": "has",
    "to": 458
  }, {
    "from": 458,
    "label": "has",
    "to": 459
  }, {
    "from": 458,
    "label": "has",
    "to": 460
  }, {
    "from": 460,
    "label": "has",
    "to": 461
  }, {
    "from": 460,
    "label": "has",
    "to": 462
  }, {
    "from": 462,
    "label": "has",
    "to": 463
  }, {
    "from": 460,
    "label": "has",
    "to": 464
  }, {
    "from": 453,
    "label": "has",
    "to": 11
  }, {
    "from": 453,
    "label": "has",
    "to": 465
  }, {
    "from": 466,
    "label": "has",
    "to": 467
  }, {
    "from": 466,
    "label": "has",
    "to": 468
  }, {
    "from": 466,
    "label": "has",
    "to": 469
  }, {
    "from": 469,
    "label": "has",
    "to": 470
  }, {
    "from": 469,
    "label": "has",
    "to": 471
  }, {
    "from": 466,
    "label": "has",
    "to": 11
  }, {
    "from": 466,
    "label": "has",
    "to": 11
  }, {
    "from": 466,
    "label": "has",
    "to": 472
  }, {
    "from": 473,
    "label": "has",
    "to": 474
  }, {
    "from": 473,
    "label": "has",
    "to": 475
  }, {
    "from": 476,
    "label": "has",
    "to": 11
  }, {
    "from": 476,
    "label": "has",
    "to": 477
  }, {
    "from": 478,
    "label": "has",
    "to": 479
  }, {
    "from": 478,
    "label": "has",
    "to": 480
  }, {
    "from": 478,
    "label": "has",
    "to": 11
  }, {
    "from": 478,
    "label": "has",
    "to": 481
  }, {
    "from": 482,
    "label": "has",
    "to": 483
  }, {
    "from": 482,
    "label": "has",
    "to": 484
  }, {
    "from": 482,
    "label": "has",
    "to": 485
  }, {
    "from": 482,
    "label": "has",
    "to": 11
  }, {
    "from": 482,
    "label": "has",
    "to": 486
  }, {
    "from": 487,
    "label": "has",
    "to": 488
  }, {
    "from": 488,
    "label": "has",
    "to": 489
  }, {
    "from": 488,
    "label": "has",
    "to": 485
  }, {
    "from": 487,
    "label": "has",
    "to": 11
  }, {
    "from": 487,
    "label": "has",
    "to": 490
  }, {
    "from": 491,
    "label": "has",
    "to": 492
  }, {
    "from": 491,
    "label": "has",
    "to": 493
  }, {
    "from": 493,
    "label": "has",
    "to": 494
  }, {
    "from": 491,
    "label": "has",
    "to": 11
  }, {
    "from": 491,
    "label": "has",
    "to": 11
  }, {
    "from": 491,
    "label": "has",
    "to": 11
  }, {
    "from": 491,
    "label": "has",
    "to": 495
  }, {
    "from": 496,
    "label": "has",
    "to": 11
  }, {
    "from": 496,
    "label": "has",
    "to": 497
  }, {
    "from": 498,
    "label": "has",
    "to": 11
  }, {
    "from": 498,
    "label": "has",
    "to": 499
  }, {
    "from": 500,
    "label": "has",
    "to": 11
  }, {
    "from": 500,
    "label": "has",
    "to": 501
  }, {
    "from": 502,
    "label": "has",
    "to": 503
  }, {
    "from": 502,
    "label": "has",
    "to": 11
  }, {
    "from": 502,
    "label": "has",
    "to": 504
  }, {
    "from": 505,
    "label": "has",
    "to": 506
  }, {
    "from": 505,
    "label": "has",
    "to": 11
  }, {
    "from": 505,
    "label": "has",
    "to": 507
  }, {
    "from": 505,
    "label": "has",
    "to": 508
  }, {
    "from": 508,
    "label": "has",
    "to": 509
  }, {
    "from": 505,
    "label": "has",
    "to": 510
  }, {
    "from": 510,
    "label": "has",
    "to": 511
  }, {
    "from": 505,
    "label": "has",
    "to": 11
  }, {
    "from": 505,
    "label": "has",
    "to": 512
  }, {
    "from": 513,
    "label": "has",
    "to": 11
  }, {
    "from": 513,
    "label": "has",
    "to": 514
  }, {
    "from": 515,
    "label": "has",
    "to": 11
  }, {
    "from": 515,
    "label": "has",
    "to": 516
  }, {
    "from": 517,
    "label": "has",
    "to": 11
  }, {
    "from": 518,
    "label": "has",
    "to": 11
  }, {
    "from": 519,
    "label": "has",
    "to": 11
  }, {
    "from": 520,
    "label": "has",
    "to": 521
  }, {
    "from": 520,
    "label": "has",
    "to": 102
  }, {
    "from": 520,
    "label": "has",
    "to": 11
  }, {
    "from": 520,
    "label": "has",
    "to": 11
  }, {
    "from": 520,
    "label": "has",
    "to": 522
  }, {
    "from": 523,
    "label": "has",
    "to": 524
  }, {
    "from": 523,
    "label": "has",
    "to": 525
  }, {
    "from": 523,
    "label": "has",
    "to": 102
  }, {
    "from": 523,
    "label": "has",
    "to": 11
  }, {
    "from": 523,
    "label": "has",
    "to": 11
  }, {
    "from": 523,
    "label": "has",
    "to": 526
  }, {
    "from": 527,
    "label": "has",
    "to": 524
  }, {
    "from": 527,
    "label": "has",
    "to": 528
  }, {
    "from": 527,
    "label": "has",
    "to": 529
  }, {
    "from": 527,
    "label": "has",
    "to": 102
  }, {
    "from": 527,
    "label": "has",
    "to": 11
  }, {
    "from": 527,
    "label": "has",
    "to": 11
  }, {
    "from": 527,
    "label": "has",
    "to": 530
  }, {
    "from": 531,
    "label": "has",
    "to": 532
  }, {
    "from": 531,
    "label": "has",
    "to": 533
  }, {
    "from": 531,
    "label": "has",
    "to": 11
  }, {
    "from": 531,
    "label": "has",
    "to": 11
  }, {
    "from": 531,
    "label": "has",
    "to": 534
  }, {
    "from": 535,
    "label": "has",
    "to": 11
  }, {
    "from": 535,
    "label": "has",
    "to": 536
  }, {
    "from": 537,
    "label": "has",
    "to": 51
  }, {
    "from": 538,
    "label": "has",
    "to": 34
  }, {
    "from": 538,
    "label": "has",
    "to": 176
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 176,
    "label": "has",
    "to": 178
  }, {
    "from": 538,
    "label": "has",
    "to": 11
  }, {
    "from": 538,
    "label": "has",
    "to": 11
  }, {
    "from": 538,
    "label": "has",
    "to": 179
  }, {
    "from": 538,
    "label": "has",
    "to": 180
  }, {
    "from": 180,
    "label": "has",
    "to": 181
  }, {
    "from": 180,
    "label": "has",
    "to": 182
  }, {
    "from": 538,
    "label": "has",
    "to": 11
  }, {
    "from": 538,
    "label": "has",
    "to": 11
  }, {
    "from": 538,
    "label": "has",
    "to": 539
  }, {
    "from": 540,
    "label": "has",
    "to": 34
  }, {
    "from": 540,
    "label": "has",
    "to": 265
  }, {
    "from": 540,
    "label": "has",
    "to": 266
  }, {
    "from": 540,
    "label": "has",
    "to": 11
  }, {
    "from": 540,
    "label": "has",
    "to": 11
  }, {
    "from": 540,
    "label": "has",
    "to": 541
  }, {
    "from": 542,
    "label": "has",
    "to": 34
  }, {
    "from": 542,
    "label": "has",
    "to": 269
  }, {
    "from": 542,
    "label": "has",
    "to": 178
  }, {
    "from": 542,
    "label": "has",
    "to": 11
  }, {
    "from": 542,
    "label": "has",
    "to": 11
  }, {
    "from": 542,
    "label": "has",
    "to": 543
  }, {
    "from": 544,
    "label": "has",
    "to": 34
  }, {
    "from": 544,
    "label": "has",
    "to": 325
  }, {
    "from": 325,
    "label": "has",
    "to": 326
  }, {
    "from": 544,
    "label": "has",
    "to": 327
  }, {
    "from": 544,
    "label": "has",
    "to": 328
  }, {
    "from": 328,
    "label": "has",
    "to": 329
  }, {
    "from": 328,
    "label": "has",
    "to": 206
  }, {
    "from": 328,
    "label": "has",
    "to": 330
  }, {
    "from": 328,
    "label": "has",
    "to": 331
  }, {
    "from": 328,
    "label": "has",
    "to": 332
  }, {
    "from": 328,
    "label": "has",
    "to": 333
  }, {
    "from": 328,
    "label": "has",
    "to": 332
  }, {
    "from": 544,
    "label": "has",
    "to": 11
  }, {
    "from": 544,
    "label": "has",
    "to": 11
  }, {
    "from": 544,
    "label": "has",
    "to": 11
  }, {
    "from": 544,
    "label": "has",
    "to": 11
  }, {
    "from": 544,
    "label": "has",
    "to": 545
  }, {
    "from": 546,
    "label": "has",
    "to": 11
  }, {
    "from": 547,
    "label": "has",
    "to": 11
  }, {
    "from": 98,
    "label": "calls",
    "to": 589
  }, {
    "from": 268,
    "label": "calls",
    "to": 596
  }, {
    "from": 33,
    "label": "calls",
    "to": 607
  }, {
    "from": 33,
    "label": "calls",
    "to": 607
  }, {
    "from": 38,
    "label": "calls",
    "to": 607
  }, {
    "from": 60,
    "label": "calls",
    "to": 607
  }, {
    "from": 60,
    "label": "calls",
    "to": 607
  }, {
    "from": 60,
    "label": "calls",
    "to": 607
  }, {
    "from": 104,
    "label": "calls",
    "to": 607
  }, {
    "from": 133,
    "label": "calls",
    "to": 607
  }, {
    "from": 160,
    "label": "calls",
    "to": 607
  }, {
    "from": 175,
    "label": "calls",
    "to": 607
  }, {
    "from": 175,
    "label": "calls",
    "to": 607
  }, {
    "from": 184,
    "label": "calls",
    "to": 607
  }, {
    "from": 184,
    "label": "calls",
    "to": 607
  }, {
    "from": 184,
    "label": "calls",
    "to": 607
  }, {
    "from": 201,
    "label": "calls",
    "to": 607
  }, {
    "from": 204,
    "label": "calls",
    "to": 607
  }, {
    "from": 213,
    "label": "calls",
    "to": 607
  }, {
    "from": 213,
    "label": "calls",
    "to": 607
  }, {
    "from": 248,
    "label": "calls",
    "to": 607
  }, {
    "from": 248,
    "label": "calls",
    "to": 607
  }, {
    "from": 248,
    "label": "calls",
    "to": 607
  }, {
    "from": 262,
    "label": "calls",
    "to": 607
  }, {
    "from": 264,
    "label": "calls",
    "to": 607
  }, {
    "from": 268,
    "label": "calls",
    "to": 607
  }, {
    "from": 271,
    "label": "calls",
    "to": 607
  }, {
    "from": 284,
    "label": "calls",
    "to": 607
  }, {
    "from": 324,
    "label": "calls",
    "to": 607
  }, {
    "from": 324,
    "label": "calls",
    "to": 607
  }, {
    "from": 335,
    "label": "calls",
    "to": 607
  }, {
    "from": 337,
    "label": "calls",
    "to": 607
  }, {
    "from": 349,
    "label": "calls",
    "to": 607
  }, {
    "from": 351,
    "label": "calls",
    "to": 607
  }, {
    "from": 365,
    "label": "calls",
    "to": 607
  }, {
    "from": 372,
    "label": "calls",
    "to": 607
  }, {
    "from": 376,
    "label": "calls",
    "to": 607
  }, {
    "from": 378,
    "label": "calls",
    "to": 607
  }, {
    "from": 381,
    "label": "calls",
    "to": 607
  }, {
    "from": 385,
    "label": "calls",
    "to": 607
  }, {
    "from": 388,
    "label": "calls",
    "to": 607
  }, {
    "from": 392,
    "label": "calls",
    "to": 607
  }, {
    "from": 409,
    "label": "calls",
    "to": 607
  }, {
    "from": 409,
    "label": "calls",
    "to": 607
  }, {
    "from": 425,
    "label": "calls",
    "to": 607
  }, {
    "from": 453,
    "label": "calls",
    "to": 607
  }, {
    "from": 478,
    "label": "calls",
    "to": 607
  }, {
    "from": 482,
    "label": "calls",
    "to": 607
  }, {
    "from": 184,
    "label": "calls",
    "to": 597
  }, {
    "from": 505,
    "label": "calls",
    "to": 597
  }, {
    "from": 4,
    "label": "calls",
    "to": 608
  }, {
    "from": 4,
    "label": "calls",
    "to": 608
  }, {
    "from": 100,
    "label": "calls",
    "to": 576
  }, {
    "from": 4,
    "label": "calls",
    "to": 598
  }, {
    "from": 425,
    "label": "calls",
    "to": 406
  }, {
    "from": 453,
    "label": "calls",
    "to": 406
  }, {
    "from": 38,
    "label": "calls",
    "to": 599
  }, {
    "from": 112,
    "label": "calls",
    "to": 599
  }, {
    "from": 88,
    "label": "calls",
    "to": 574
  }, {
    "from": 175,
    "label": "calls",
    "to": 600
  }, {
    "from": 271,
    "label": "calls",
    "to": 600
  }, {
    "from": 76,
    "label": "calls",
    "to": 601
  }, {
    "from": 147,
    "label": "calls",
    "to": 601
  }, {
    "from": 548,
    "label": "calls",
    "to": 4
  }, {
    "from": 230,
    "label": "calls",
    "to": 618
  }, {
    "from": 370,
    "label": "calls",
    "to": 618
  }, {
    "from": 385,
    "label": "calls",
    "to": 587
  }, {
    "from": 38,
    "label": "calls",
    "to": 594
  }, {
    "from": 104,
    "label": "calls",
    "to": 594
  }, {
    "from": 160,
    "label": "calls",
    "to": 594
  }, {
    "from": 502,
    "label": "calls",
    "to": 594
  }, {
    "from": 531,
    "label": "calls",
    "to": 573
  }, {
    "from": 307,
    "label": "calls",
    "to": 553
  }, {
    "from": 27,
    "label": "calls",
    "to": 578
  }, {
    "from": 515,
    "label": "calls",
    "to": 578
  }, {
    "from": 76,
    "label": "calls",
    "to": 72
  }, {
    "from": 88,
    "label": "calls",
    "to": 72
  }, {
    "from": 381,
    "label": "calls",
    "to": 570
  }, {
    "from": 22,
    "label": "calls",
    "to": 590
  }, {
    "from": 548,
    "label": "calls",
    "to": 568
  }, {
    "from": 548,
    "label": "calls",
    "to": 568
  }, {
    "from": 392,
    "label": "calls",
    "to": 568
  }, {
    "from": 395,
    "label": "calls",
    "to": 568
  }, {
    "from": 262,
    "label": "calls",
    "to": 566
  }, {
    "from": 548,
    "label": "calls",
    "to": 175
  }, {
    "from": 548,
    "label": "calls",
    "to": 175
  }, {
    "from": 548,
    "label": "calls",
    "to": 175
  }, {
    "from": 548,
    "label": "calls",
    "to": 175
  }, {
    "from": 548,
    "label": "calls",
    "to": 602
  }, {
    "from": 29,
    "label": "calls",
    "to": 591
  }, {
    "from": 515,
    "label": "calls",
    "to": 591
  }, {
    "from": 235,
    "label": "calls",
    "to": 612
  }, {
    "from": 548,
    "label": "calls",
    "to": 619
  }, {
    "from": 324,
    "label": "calls",
    "to": 609
  }, {
    "from": 324,
    "label": "calls",
    "to": 609
  }, {
    "from": 324,
    "label": "calls",
    "to": 609
  }, {
    "from": 112,
    "label": "calls",
    "to": 554
  }, {
    "from": 175,
    "label": "calls",
    "to": 610
  }, {
    "from": 175,
    "label": "calls",
    "to": 610
  }, {
    "from": 505,
    "label": "calls",
    "to": 515
  }, {
    "from": 337,
    "label": "calls",
    "to": 551
  }, {
    "from": 351,
    "label": "calls",
    "to": 551
  }, {
    "from": 351,
    "label": "calls",
    "to": 551
  }, {
    "from": 351,
    "label": "calls",
    "to": 551
  }, {
    "from": 395,
    "label": "calls",
    "to": 551
  }, {
    "from": 17,
    "label": "calls",
    "to": 567
  }, {
    "from": 31,
    "label": "calls",
    "to": 567
  }, {
    "from": 515,
    "label": "calls",
    "to": 567
  }, {
    "from": 248,
    "label": "calls",
    "to": 564
  }, {
    "from": 498,
    "label": "calls",
    "to": 496
  }, {
    "from": 365,
    "label": "calls",
    "to": 560
  }, {
    "from": 453,
    "label": "calls",
    "to": 604
  }, {
    "from": 520,
    "label": "calls",
    "to": 556
  }, {
    "from": 204,
    "label": "calls",
    "to": 555
  }, {
    "from": 372,
    "label": "calls",
    "to": 555
  }, {
    "from": 527,
    "label": "calls",
    "to": 593
  }, {
    "from": 204,
    "label": "calls",
    "to": 549
  }, {
    "from": 372,
    "label": "calls",
    "to": 549
  }, {
    "from": 376,
    "label": "calls",
    "to": 549
  }, {
    "from": 147,
    "label": "calls",
    "to": 585
  }, {
    "from": 204,
    "label": "calls",
    "to": 550
  }, {
    "from": 204,
    "label": "calls",
    "to": 550
  }, {
    "from": 548,
    "label": "calls",
    "to": 550
  }, {
    "from": 548,
    "label": "calls",
    "to": 550
  }, {
    "from": 318,
    "label": "calls",
    "to": 550
  }, {
    "from": 337,
    "label": "calls",
    "to": 550
  }, {
    "from": 351,
    "label": "calls",
    "to": 550
  }, {
    "from": 38,
    "label": "calls",
    "to": 21
  }, {
    "from": 100,
    "label": "calls",
    "to": 21
  }, {
    "from": 112,
    "label": "calls",
    "to": 21
  }, {
    "from": 175,
    "label": "calls",
    "to": 21
  }, {
    "from": 175,
    "label": "calls",
    "to": 21
  }, {
    "from": 184,
    "label": "calls",
    "to": 21
  }, {
    "from": 201,
    "label": "calls",
    "to": 21
  }, {
    "from": 204,
    "label": "calls",
    "to": 21
  }, {
    "from": 204,
    "label": "calls",
    "to": 21
  }, {
    "from": 213,
    "label": "calls",
    "to": 21
  }, {
    "from": 248,
    "label": "calls",
    "to": 21
  }, {
    "from": 264,
    "label": "calls",
    "to": 21
  }, {
    "from": 268,
    "label": "calls",
    "to": 21
  }, {
    "from": 288,
    "label": "calls",
    "to": 21
  }, {
    "from": 296,
    "label": "calls",
    "to": 21
  }, {
    "from": 307,
    "label": "calls",
    "to": 21
  }, {
    "from": 324,
    "label": "calls",
    "to": 21
  }, {
    "from": 324,
    "label": "calls",
    "to": 21
  }, {
    "from": 324,
    "label": "calls",
    "to": 21
  }, {
    "from": 351,
    "label": "calls",
    "to": 21
  }, {
    "from": 365,
    "label": "calls",
    "to": 21
  }, {
    "from": 372,
    "label": "calls",
    "to": 21
  }, {
    "from": 381,
    "label": "calls",
    "to": 21
  }, {
    "from": 385,
    "label": "calls",
    "to": 21
  }, {
    "from": 388,
    "label": "calls",
    "to": 21
  }, {
    "from": 453,
    "label": "calls",
    "to": 21
  }, {
    "from": 491,
    "label": "calls",
    "to": 21
  }, {
    "from": 520,
    "label": "calls",
    "to": 21
  }, {
    "from": 523,
    "label": "calls",
    "to": 21
  }, {
    "from": 527,
    "label": "calls",
    "to": 21
  }, {
    "from": 531,
    "label": "calls",
    "to": 21
  }, {
    "from": 38,
    "label": "calls",
    "to": 557
  }, {
    "from": 104,
    "label": "calls",
    "to": 557
  }, {
    "from": 160,
    "label": "calls",
    "to": 557
  }, {
    "from": 173,
    "label": "calls",
    "to": 557
  }, {
    "from": 403,
    "label": "calls",
    "to": 557
  }, {
    "from": 406,
    "label": "calls",
    "to": 557
  }, {
    "from": 523,
    "label": "calls",
    "to": 558
  }, {
    "from": 17,
    "label": "calls",
    "to": 620
  }, {
    "from": 38,
    "label": "calls",
    "to": 562
  }, {
    "from": 478,
    "label": "calls",
    "to": 575
  }, {
    "from": 17,
    "label": "calls",
    "to": 616
  }, {
    "from": 88,
    "label": "calls",
    "to": 33
  }, {
    "from": 96,
    "label": "calls",
    "to": 33
  }, {
    "from": 98,
    "label": "calls",
    "to": 33
  }, {
    "from": 100,
    "label": "calls",
    "to": 33
  }, {
    "from": 104,
    "label": "calls",
    "to": 33
  }, {
    "from": 112,
    "label": "calls",
    "to": 33
  }, {
    "from": 133,
    "label": "calls",
    "to": 33
  }, {
    "from": 138,
    "label": "calls",
    "to": 33
  }, {
    "from": 138,
    "label": "calls",
    "to": 33
  }, {
    "from": 548,
    "label": "calls",
    "to": 611
  }, {
    "from": 548,
    "label": "calls",
    "to": 611
  }, {
    "from": 288,
    "label": "calls",
    "to": 586
  }, {
    "from": 147,
    "label": "calls",
    "to": 572
  }, {
    "from": 160,
    "label": "calls",
    "to": 572
  }, {
    "from": 264,
    "label": "calls",
    "to": 614
  }, {
    "from": 204,
    "label": "calls",
    "to": 581
  }, {
    "from": 349,
    "label": "calls",
    "to": 581
  }, {
    "from": 38,
    "label": "calls",
    "to": 615
  }, {
    "from": 72,
    "label": "calls",
    "to": 615
  }, {
    "from": 548,
    "label": "calls",
    "to": 615
  }, {
    "from": 112,
    "label": "calls",
    "to": 615
  }, {
    "from": 138,
    "label": "calls",
    "to": 615
  }, {
    "from": 548,
    "label": "calls",
    "to": 615
  }, {
    "from": 548,
    "label": "calls",
    "to": 615
  }, {
    "from": 548,
    "label": "calls",
    "to": 615
  }, {
    "from": 548,
    "label": "calls",
    "to": 615
  }, {
    "from": 548,
    "label": "calls",
    "to": 615
  }, {
    "from": 548,
    "label": "calls",
    "to": 615
  }, {
    "from": 548,
    "label": "calls",
    "to": 615
  }, {
    "from": 548,
    "label": "calls",
    "to": 615
  }, {
    "from": 548,
    "label": "calls",
    "to": 615
  }, {
    "from": 548,
    "label": "calls",
    "to": 268
  }, {
    "from": 548,
    "label": "calls",
    "to": 268
  }, {
    "from": 548,
    "label": "calls",
    "to": 268
  }, {
    "from": 548,
    "label": "calls",
    "to": 268
  }, {
    "from": 388,
    "label": "calls",
    "to": 584
  }, {
    "from": 19,
    "label": "calls",
    "to": 3
  }, {
    "from": 548,
    "label": "calls",
    "to": 613
  }, {
    "from": 505,
    "label": "calls",
    "to": 613
  }, {
    "from": 505,
    "label": "calls",
    "to": 613
  }, {
    "from": 505,
    "label": "calls",
    "to": 613
  }, {
    "from": 395,
    "label": "calls",
    "to": 592
  }, {
    "from": 38,
    "label": "calls",
    "to": 577
  }, {
    "from": 160,
    "label": "calls",
    "to": 577
  }, {
    "from": 160,
    "label": "calls",
    "to": 577
  }, {
    "from": 548,
    "label": "calls",
    "to": 577
  }, {
    "from": 314,
    "label": "calls",
    "to": 577
  }, {
    "from": 318,
    "label": "calls",
    "to": 577
  }, {
    "from": 296,
    "label": "calls",
    "to": 583
  }, {
    "from": 453,
    "label": "calls",
    "to": 583
  }, {
    "from": 335,
    "label": "calls",
    "to": 559
  }, {
    "from": 38,
    "label": "calls",
    "to": 15
  }, {
    "from": 19,
    "label": "calls",
    "to": 17
  }, {
    "from": 76,
    "label": "calls",
    "to": 563
  }, {
    "from": 204,
    "label": "calls",
    "to": 580
  }, {
    "from": 548,
    "label": "calls",
    "to": 580
  }, {
    "from": 307,
    "label": "calls",
    "to": 580
  }, {
    "from": 38,
    "label": "calls",
    "to": 603
  }, {
    "from": 38,
    "label": "calls",
    "to": 603
  }, {
    "from": 112,
    "label": "calls",
    "to": 603
  }, {
    "from": 112,
    "label": "calls",
    "to": 603
  }, {
    "from": 175,
    "label": "calls",
    "to": 603
  }, {
    "from": 175,
    "label": "calls",
    "to": 603
  }, {
    "from": 184,
    "label": "calls",
    "to": 603
  }, {
    "from": 248,
    "label": "calls",
    "to": 603
  }, {
    "from": 271,
    "label": "calls",
    "to": 603
  }, {
    "from": 271,
    "label": "calls",
    "to": 603
  }, {
    "from": 288,
    "label": "calls",
    "to": 603
  }, {
    "from": 307,
    "label": "calls",
    "to": 603
  }, {
    "from": 403,
    "label": "calls",
    "to": 603
  }, {
    "from": 409,
    "label": "calls",
    "to": 603
  }, {
    "from": 409,
    "label": "calls",
    "to": 603
  }, {
    "from": 453,
    "label": "calls",
    "to": 603
  }, {
    "from": 505,
    "label": "calls",
    "to": 603
  }, {
    "from": 548,
    "label": "calls",
    "to": 264
  }, {
    "from": 548,
    "label": "calls",
    "to": 264
  }, {
    "from": 548,
    "label": "calls",
    "to": 264
  }, {
    "from": 548,
    "label": "calls",
    "to": 264
  }, {
    "from": 548,
    "label": "calls",
    "to": 264
  }, {
    "from": 548,
    "label": "calls",
    "to": 324
  }, {
    "from": 548,
    "label": "calls",
    "to": 324
  }, {
    "from": 337,
    "label": "calls",
    "to": 579
  }, {
    "from": 337,
    "label": "calls",
    "to": 579
  }, {
    "from": 351,
    "label": "calls",
    "to": 579
  }, {
    "from": 351,
    "label": "calls",
    "to": 579
  }, {
    "from": 351,
    "label": "calls",
    "to": 579
  }, {
    "from": 351,
    "label": "calls",
    "to": 579
  }, {
    "from": 378,
    "label": "calls",
    "to": 579
  }, {
    "from": 491,
    "label": "calls",
    "to": 571
  }, {
    "from": 288,
    "label": "calls",
    "to": 19
  }, {
    "from": 307,
    "label": "calls",
    "to": 595
  }, {
    "from": 337,
    "label": "calls",
    "to": 595
  }, {
    "from": 351,
    "label": "calls",
    "to": 595
  }, {
    "from": 482,
    "label": "calls",
    "to": 582
  }, {
    "from": 487,
    "label": "calls",
    "to": 582
  }, {
    "from": 548,
    "label": "calls",
    "to": 621
  }, {
    "from": 548,
    "label": "calls",
    "to": 621
  }, {
    "from": 22,
    "label": "calls",
    "to": 621
  }, {
    "from": 38,
    "label": "calls",
    "to": 621
  }, {
    "from": 112,
    "label": "calls",
    "to": 621
  }, {
    "from": 314,
    "label": "calls",
    "to": 621
  }, {
    "from": 392,
    "label": "calls",
    "to": 621
  }, {
    "from": 476,
    "label": "calls",
    "to": 621
  }, {
    "from": 502,
    "label": "calls",
    "to": 621
  }, {
    "from": 226,
    "label": "calls",
    "to": 605
  }, {
    "from": 228,
    "label": "calls",
    "to": 605
  }, {
    "from": 324,
    "label": "calls",
    "to": 605
  }, {
    "from": 505,
    "label": "calls",
    "to": 605
  }, {
    "from": 296,
    "label": "calls",
    "to": 617
  }, {
    "from": 243,
    "label": "calls",
    "to": 606
  }, {
    "from": 243,
    "label": "calls",
    "to": 606
  }, {
    "from": 324,
    "label": "calls",
    "to": 622
  }, {
    "from": 365,
    "label": "calls",
    "to": 622
  }, {
    "from": 372,
    "label": "calls",
    "to": 622
  }, {
    "from": 505,
    "label": "calls",
    "to": 622
  }, {
    "from": 409,
    "label": "calls",
    "to": 403
  }, {
    "from": 425,
    "label": "calls",
    "to": 403
  }, {
    "from": 443,
    "label": "calls",
    "to": 403
  }, {
    "from": 201,
    "label": "calls",
    "to": 552
  }, {
    "from": 2,
    "label": "contains",
    "to": 548
  }, {
    "from": 548,
    "label": "declares",
    "to": 4
  }, {
    "from": 548,
    "label": "declares",
    "to": 13
  }, {
    "from": 548,
    "label": "declares",
    "to": 15
  }, {
    "from": 548,
    "label": "declares",
    "to": 17
  }, {
    "from": 548,
    "label": "declares",
    "to": 19
  }, {
    "from": 548,
    "label": "declares",
    "to": 21
  }, {
    "from": 548,
    "label": "declares",
    "to": 22
  }, {
    "from": 548,
    "label": "declares",
    "to": 25
  }, {
    "from": 548,
    "label": "declares",
    "to": 27
  }, {
    "from": 548,
    "label": "declares",
    "to": 29
  }, {
    "from": 548,
    "label": "declares",
    "to": 31
  }, {
    "from": 548,
    "label": "declares",
    "to": 33
  }, {
    "from": 548,
    "label": "declares",
    "to": 38
  }, {
    "from": 548,
    "label": "declares",
    "to": 60
  }, {
    "from": 548,
    "label": "declares",
    "to": 65
  }, {
    "from": 548,
    "label": "declares",
    "to": 67
  }, {
    "from": 548,
    "label": "declares",
    "to": 70
  }, {
    "from": 548,
    "label": "declares",
    "to": 72
  }, {
    "from": 548,
    "label": "declares",
    "to": 76
  }, {
    "from": 548,
    "label": "declares",
    "to": 85
  }, {
    "from": 548,
    "label": "declares",
    "to": 88
  }, {
    "from": 548,
    "label": "declares",
    "to": 94
  }, {
    "from": 548,
    "label": "declares",
    "to": 96
  }, {
    "from": 548,
    "label": "declares",
    "to": 98
  }, {
    "from": 548,
    "label": "declares",
    "to": 100
  }, {
    "from": 548,
    "label": "declares",
    "to": 104
  }, {
    "from": 548,
    "label": "declares",
    "to": 108
  }, {
    "from": 548,
    "label": "declares",
    "to": 110
  }, {
    "from": 548,
    "label": "declares",
    "to": 112
  }, {
    "from": 548,
    "label": "declares",
    "to": 133
  }, {
    "from": 548,
    "label": "declares",
    "to": 138
  }, {
    "from": 548,
    "label": "declares",
    "to": 140
  }, {
    "from": 548,
    "label": "declares",
    "to": 145
  }, {
    "from": 548,
    "label": "declares",
    "to": 147
  }, {
    "from": 548,
    "label": "declares",
    "to": 158
  }, {
    "from": 548,
    "label": "declares",
    "to": 160
  }, {
    "from": 548,
    "label": "declares",
    "to": 173
  }, {
    "from": 548,
    "label": "declares",
    "to": 175
  }, {
    "from": 548,
    "label": "declares",
    "to": 184
  }, {
    "from": 548,
    "label": "declares",
    "to": 201
  }, {
    "from": 548,
    "label": "declares",
    "to": 204
  }, {
    "from": 548,
    "label": "declares",
    "to": 213
  }, {
    "from": 548,
    "label": "declares",
    "to": 226
  }, {
    "from": 548,
    "label": "declares",
    "to": 228
  }, {
    "from": 548,
    "label": "declares",
    "to": 230
  }, {
    "from": 548,
    "label": "declares",
    "to": 233
  }, {
    "from": 548,
    "label": "declares",
    "to": 235
  }, {
    "from": 548,
    "label": "declares",
    "to": 243
  }, {
    "from": 548,
    "label": "declares",
    "to": 248
  }, {
    "from": 548,
    "label": "declares",
    "to": 254
  }, {
    "from": 548,
    "label": "declares",
    "to": 256
  }, {
    "from": 548,
    "label": "declares",
    "to": 262
  }, {
    "from": 548,
    "label": "declares",
    "to": 264
  }, {
    "from": 548,
    "label": "declares",
    "to": 268
  }, {
    "from": 548,
    "label": "declares",
    "to": 271
  }, {
    "from": 548,
    "label": "declares",
    "to": 278
  }, {
    "from": 548,
    "label": "declares",
    "to": 279
  }, {
    "from": 548,
    "label": "declares",
    "to": 280
  }, {
    "from": 548,
    "label": "declares",
    "to": 284
  }, {
    "from": 548,
    "label": "declares",
    "to": 286
  }, {
    "from": 548,
    "label": "declares",
    "to": 288
  }, {
    "from": 548,
    "label": "declares",
    "to": 296
  }, {
    "from": 548,
    "label": "declares",
    "to": 307
  }, {
    "from": 548,
    "label": "declares",
    "to": 314
  }, {
    "from": 548,
    "label": "declares",
    "to": 316
  }, {
    "from": 548,
    "label": "declares",
    "to": 318
  }, {
    "from": 548,
    "label": "declares",
    "to": 322
  }, {
    "from": 548,
    "label": "declares",
    "to": 324
  }, {
    "from": 548,
    "label": "declares",
    "to": 335
  }, {
    "from": 548,
    "label": "declares",
    "to": 337
  }, {
    "from": 548,
    "label": "declares",
    "to": 349
  }, {
    "from": 548,
    "label": "declares",
    "to": 351
  }, {
    "from": 548,
    "label": "declares",
    "to": 365
  }, {
    "from": 548,
    "label": "declares",
    "to": 370
  }, {
    "from": 548,
    "label": "declares",
    "to": 372
  }, {
    "from": 548,
    "label": "declares",
    "to": 376
  }, {
    "from": 548,
    "label": "declares",
    "to": 378
  }, {
    "from": 548,
    "label": "declares",
    "to": 381
  }, {
    "from": 548,
    "label": "declares",
    "to": 385
  }, {
    "from": 548,
    "label": "declares",
    "to": 388
  }, {
    "from": 548,
    "label": "declares",
    "to": 392
  }, {
    "from": 548,
    "label": "declares",
    "to": 395
  }, {
    "from": 548,
    "label": "declares",
    "to": 403
  }, {
    "from": 548,
    "label": "declares",
    "to": 406
  }, {
    "from": 548,
    "label": "declares",
    "to": 409
  }, {
    "from": 548,
    "label": "declares",
    "to": 425
  }, {
    "from": 548,
    "label": "declares",
    "to": 443
  }, {
    "from": 548,
    "label": "declares",
    "to": 451
  }, {
    "from": 548,
    "label": "declares",
    "to": 453
  }, {
    "from": 548,
    "label": "declares",
    "to": 466
  }, {
    "from": 548,
    "label": "declares",
    "to": 473
  }, {
    "from": 548,
    "label": "declares",
    "to": 476
  }, {
    "from": 548,
    "label": "declares",
    "to": 478
  }, {
    "from": 548,
    "label": "declares",
    "to": 482
  }, {
    "from": 548,
    "label": "declares",
    "to": 487
  }, {
    "from": 548,
    "label": "declares",
    "to": 491
  }, {
    "from": 548,
    "label": "declares",
    "to": 496
  }, {
    "from": 548,
    "label": "declares",
    "to": 498
  }, {
    "from": 548,
    "label": "declares",
    "to": 500
  }, {
    "from": 548,
    "label": "declares",
    "to": 502
  }, {
    "from": 548,
    "label": "declares",
    "to": 505
  }, {
    "from": 548,
    "label": "declares",
    "to": 513
  }, {
    "from": 548,
    "label": "declares",
    "to": 515
  }, {
    "from": 548,
    "label": "declares",
    "to": 517
  }, {
    "from": 548,
    "label": "declares",
    "to": 518
  }, {
    "from": 548,
    "label": "declares",
    "to": 519
  }, {
    "from": 548,
    "label": "declares",
    "to": 520
  }, {
    "from": 548,
    "label": "declares",
    "to": 523
  }, {
    "from": 548,
    "label": "declares",
    "to": 527
  }, {
    "from": 548,
    "label": "declares",
    "to": 531
  }, {
    "from": 548,
    "label": "declares",
    "to": 535
  }, {
    "from": 548,
    "label": "declares",
    "to": 537
  }, {
    "from": 548,
    "label": "declares",
    "to": 538
  }, {
    "from": 548,
    "label": "declares",
    "to": 540
  }, {
    "from": 548,
    "label": "declares",
    "to": 542
  }, {
    "from": 548,
    "label": "declares",
    "to": 544
  }, {
    "from": 548,
    "label": "declares",
    "to": 546
  }, {
    "from": 548,
    "label": "declares",
    "to": 547
  }, {
    "from": 2,
    "label": "declares",
    "to": 551
  }, {
    "from": 2,
    "label": "declares",
    "to": 561
  }, {
    "from": 2,
    "label": "declares",
    "to": 565
  }, {
    "from": 2,
    "label": "declares",
    "to": 569
  }, {
    "from": 2,
    "label": "declares",
    "to": 577
  }, {
    "from": 2,
    "label": "declares",
    "to": 588
  }, {
    "from": 2,
    "label": "declares",
    "to": 592
  }, {
    "from": 623,
    "label": "requires",
    "to": 2
  }, {
    "from": 2,
    "label": "contains",
    "to": 625
  }, {
    "from": 2,
    "label": "contains",
    "to": 626
  }, {
    "from": 625,
    "label": "initializes",
    "to": 627
  }, {
    "from": 627,
    "label": "assigns",
    "to": 628
  }, {
    "from": 625,
    "label": "initializes",
    "to": 629
  }, {
    "from": 625,
    "label": "initializes",
    "to": 630
  }, {
    "from": 630,
    "label": "assigns",
    "to": 631
  }, {
    "from": 625,
    "label": "initializes",
    "to": 632
  }, {
    "from": 625,
    "label": "initializes",
    "to": 633
  }, {
    "from": 633,
    "label": "assigns",
    "to": 634
  }, {
    "from": 625,
    "label": "initializes",
    "to": 635
  }, {
    "from": 635,
    "label": "assigns",
    "to": 636
  }, {
    "from": 625,
    "label": "initializes",
    "to": 637
  }, {
    "from": 625,
    "label": "initializes",
    "to": 638
  }, {
    "from": 625,
    "label": "initializes",
    "to": 639
  }, {
    "from": 639,
    "label": "assigns",
    "to": 640
  }, {
    "from": 625,
    "label": "initializes",
    "to": 641
  }, {
    "from": 641,
    "label": "assigns",
    "to": 642
  }, {
    "from": 625,
    "label": "initializes",
    "to": 643
  }, {
    "from": 643,
    "label": "assigns",
    "to": 644
  }, {
    "from": 625,
    "label": "initializes",
    "to": 645
  }, {
    "from": 645,
    "label": "assigns",
    "to": 646
  }, {
    "from": 625,
    "label": "initializes",
    "to": 647
  }, {
    "from": 647,
    "label": "assigns",
    "to": 648
  }, {
    "from": 625,
    "label": "initializes",
    "to": 649
  }, {
    "from": 649,
    "label": "assigns",
    "to": 650
  }, {
    "from": 625,
    "label": "initializes",
    "to": 651
  }, {
    "from": 651,
    "label": "assigns",
    "to": 652
  }, {
    "from": 625,
    "label": "initializes",
    "to": 653
  }, {
    "from": 653,
    "label": "assigns",
    "to": 654
  }, {
    "from": 625,
    "label": "initializes",
    "to": 655
  }, {
    "from": 655,
    "label": "assigns",
    "to": 656
  }, {
    "from": 625,
    "label": "initializes",
    "to": 657
  }, {
    "from": 657,
    "label": "assigns",
    "to": 658
  }, {
    "from": 625,
    "label": "initializes",
    "to": 659
  }, {
    "from": 659,
    "label": "assigns",
    "to": 660
  }, {
    "from": 625,
    "label": "initializes",
    "to": 661
  }, {
    "from": 661,
    "label": "assigns",
    "to": 662
  }, {
    "from": 626,
    "label": "initializes",
    "to": 663
  }, {
    "from": 663,
    "label": "requires",
    "to": 1
  }, {
    "from": 626,
    "label": "initializes",
    "to": 664
  }, {
    "from": 664,
    "label": "requires",
    "to": 2
  }, {
    "from": 2,
    "label": "provides",
    "to": 665
  }, {
    "from": 624,
    "label": "represents",
    "to": 666
  }, {
    "from": 665,
    "label": "provides",
    "to": 666
  }, {
    "from": 649,
    "label": "contains",
    "to": 491
  }, {
    "from": 649,
    "label": "contains",
    "to": 496
  }, {
    "from": 649,
    "label": "contains",
    "to": 498
  }, {
    "from": 649,
    "label": "contains",
    "to": 500
  }, {
    "from": 649,
    "label": "contains",
    "to": 502
  }, {
    "from": 649,
    "label": "contains",
    "to": 505
  }, {
    "from": 649,
    "label": "contains",
    "to": 513
  }, {
    "from": 649,
    "label": "contains",
    "to": 515
  }, {
    "from": 649,
    "label": "contains",
    "to": 517
  }, {
    "from": 649,
    "label": "contains",
    "to": 518
  }, {
    "from": 649,
    "label": "contains",
    "to": 519
  }, {
    "from": 649,
    "label": "contains",
    "to": 520
  }, {
    "from": 649,
    "label": "contains",
    "to": 523
  }, {
    "from": 649,
    "label": "contains",
    "to": 527
  }, {
    "from": 649,
    "label": "contains",
    "to": 531
  }, {
    "from": 50,
    "label": "hasArgument",
    "to": 537
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "api",
    "type": "module"
  }, {
    "id": 2,
    "text": "ffi",
    "type": "module"
  }, {
    "id": 3,
    "text": "function (ptr)\r\n  void_array[0] = ptr\r\n  return ffi.string(char_ptr, ptr_size)\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local function lua_version()\r\n  if not lua_version_t then \r\n    local version = rawget(_G,\"_VERSION\")\r\n    local maj,min = version:match(\"^Lua (%d+)%.(%d+)$\")\r\n    if maj then                         lua_version_t = {tonumber(maj),tonumber(min)}\r\n    elseif not math.mod then            lua_version_t = {5,2}\r\n    elseif table.pack and not pack then lua_version_t = {5,2}\r\n    else                                lua_version_t = {5,2} end\r\n  end\r\n  return lua_version_t[1], lua_version_t[2]\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "if not lua_version_t then \r\n    local version = rawget(_G,\"_VERSION\")\r\n    local maj,min = version:match(\"^Lua (%d+)%.(%d+)$\")\r\n    if maj then                         lua_version_t = {tonumber(maj),tonumber(min)}\r\n    elseif not math.mod then            lua_version_t = {5,2}\r\n    elseif table.pack and not pack then lua_version_t = {5,2}\r\n    else                                lua_version_t = {5,2} end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "local version = rawget(_G,\"_VERSION\")",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "local maj,min = version:match(\"^Lua (%d+)%.(%d+)$\")",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "if maj then                         lua_version_t = {tonumber(maj),tonumber(min)}\r\n    elseif not math.mod then            lua_version_t = {5,2}\r\n    elseif table.pack and not pack then lua_version_t = {5,2}\r\n    else                                lua_version_t = {5,2} end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "lua_version_t = {tonumber(maj),tonumber(min)}",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "lua_version_t = {5,2}",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function() \r\n    return setmetatable({}, mt)\r\n  end",
    "type": "function"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function() \r\n    return setmetatable({}, mt)\r\n  end",
    "type": "function"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "local function bintohex(str)\r\n  return (string.gsub(str, \".\", function(p)\r\n    return (string.format(\"%.2x\", string.byte(p)))\r\n  end))\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "local function ptrtohex(ptr)\r\n  return bintohex(api.ptrtostr(ptr))\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "local function zerror(...) return Error:new(...) end",
    "type": "function"
  }, {
    "id": 22,
    "text": "function Error:new(no)\r\n  local o = setmetatable({\r\n    errno = no or api.zmq_errno();\r\n  }, self)\r\n  return o\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "local o = setmetatable({\r\n    errno = no or api.zmq_errno();\r\n  }, self)",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function Error:no()\r\n  return self.errno\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function Error:msg()\r\n  return api.zmq_strerror(self.errno)\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function Error:mnemo()\r\n  return api.zmq_mnemoerror(self.errno)\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function Error:__tostring()\r\n  return string.format(\"[%s] %s (%d)\", self:mnemo(), self:msg(), self:no())\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "local function check_context(self)\r\n  assert(not self:closed())\r\n  if self.shutdowned then assert(not self:shutdowned()) end\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "assert(not self:closed())",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "if self.shutdowned then assert(not self:shutdowned()) end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "assert(not self:shutdowned())",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function Context:new(ptr)\r\n  local ctx, opt\r\n  if ptr then\r\n    if(type(ptr) == 'table')then\r\n      opt,ptr = ptr\r\n    else\r\n      ctx = api.deserialize_ptr(ptr)\r\n      assert(ptr == api.serialize_ptr(ctx)) -- ensure correct convert\r\n    end\r\n  end\r\n  if not ctx then\r\n    ctx = api.zmq_ctx_new()\r\n    if not ctx then return nil, zerror() end\r\n  end\r\n\r\n  local o = setmetatable({\r\n    _private = {\r\n      owner   = not ptr;\r\n      sockets = make_weak_kv();\r\n      ctx     = ctx;\r\n      scount  = 0;\r\n    }\r\n  }, self)\r\n\r\n  if not HAS_GC_TABLE then\r\n    ffi.gc(ctx, function() o:destroy() end)\r\n  end\r\n\r\n  if opt then\r\n    for k, v in pairs(opt) do\r\n      if type(k) == 'string' then\r\n        local fn = o['set_' .. k]\r\n        if fn then\r\n          local ok, err = fn(o, v)\r\n          if not ok then\r\n            o:destroy()\r\n            return nil, err\r\n          end\r\n        end\r\n      end\r\n    end\r\n  end\r\n\r\n  return o\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "local ctx, opt",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "if ptr then\r\n    if(type(ptr) == 'table')then\r\n      opt,ptr = ptr\r\n    else\r\n      ctx = api.deserialize_ptr(ptr)\r\n      assert(ptr == api.serialize_ptr(ctx)) -- ensure correct convert\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "if(type(ptr) == 'table')then\r\n      opt,ptr = ptr\r\n    else\r\n      ctx = api.deserialize_ptr(ptr)\r\n      assert(ptr == api.serialize_ptr(ctx)) -- ensure correct convert\r\n    end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "opt,ptr = ptr",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "ctx = api.deserialize_ptr(ptr)",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "assert(ptr == api.serialize_ptr(ctx))",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "if not ctx then\r\n    ctx = api.zmq_ctx_new()\r\n    if not ctx then return nil, zerror() end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "ctx = api.zmq_ctx_new()",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "if not ctx then return nil, zerror() end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "local o = setmetatable({\r\n    _private = {\r\n      owner   = not ptr;\r\n      sockets = make_weak_kv();\r\n      ctx     = ctx;\r\n      scount  = 0;\r\n    }\r\n  }, self)",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "if not HAS_GC_TABLE then\r\n    ffi.gc(ctx, function() o:destroy() end)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "ffi.gc(ctx, function() o:destroy() end)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "o:destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "if opt then\r\n    for k, v in pairs(opt) do\r\n      if type(k) == 'string' then\r\n        local fn = o['set_' .. k]\r\n        if fn then\r\n          local ok, err = fn(o, v)\r\n          if not ok then\r\n            o:destroy()\r\n            return nil, err\r\n          end\r\n        end\r\n      end\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "for k, v in pairs(opt) do\r\n      if type(k) == 'string' then\r\n        local fn = o['set_' .. k]\r\n        if fn then\r\n          local ok, err = fn(o, v)\r\n          if not ok then\r\n            o:destroy()\r\n            return nil, err\r\n          end\r\n        end\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 54,
    "text": "if type(k) == 'string' then\r\n        local fn = o['set_' .. k]\r\n        if fn then\r\n          local ok, err = fn(o, v)\r\n          if not ok then\r\n            o:destroy()\r\n            return nil, err\r\n          end\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "local fn = o['set_' .. k]",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "if fn then\r\n          local ok, err = fn(o, v)\r\n          if not ok then\r\n            o:destroy()\r\n            return nil, err\r\n          end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "local ok, err = fn(o, v)",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "if not ok then\r\n            o:destroy()\r\n            return nil, err\r\n          end",
    "type": "statement:if"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function Context:_inc_socket_count(n)\r\n  assert((n == 1) or (n == -1))\r\n  self._private.scount = self._private.scount + n\r\n  assert(self._private.scount >= 0)\r\nend",
    "type": "function"
  }, {
    "id": 61,
    "text": "assert((n == 1) or (n == -1))",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "self._private.scount = self._private.scount + n",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "assert(self._private.scount >= 0)",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "function Context:_inc_socket_count(n)\r\n  assert((n == 1) or (n == -1))\r\nend",
    "type": "function"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "function Context:_remove_socket(skt)\r\n  self._private.sockets[skt:handle()] = nil\r\nend",
    "type": "function"
  }, {
    "id": 68,
    "text": "self._private.sockets[skt:handle()] = nil",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function Context:closed()\r\n  return not self._private.ctx\r\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "local function Context_cleanup(self, linger)\r\n  for _, skt in pairs(self._private.sockets) do\r\n    skt:close(linger)\r\n  end\r\n  -- lua can remove skt from sockets but do not call finalizer\r\n  -- for skt._private.skt so we enforce gc\r\n  -- collectgarbage(\"collect\")\r\n  -- collectgarbage(\"collect\")\r\nend",
    "type": "function"
  }, {
    "id": 73,
    "text": "for _, skt in pairs(self._private.sockets) do\r\n    skt:close(linger)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 74,
    "text": "skt:close(linger)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "function Context:destroy(linger)\r\n  if self:closed() then return true end\r\n  Context_cleanup(self, linger)\r\n\r\n  if self._private.on_close then\r\n    pcall(self._private.on_close)\r\n  end\r\n\r\n  if self._private.owner then\r\n    api.zmq_ctx_term(self._private.ctx)\r\n  end\r\n  self._private.ctx = nil\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 77,
    "text": "if self:closed() then return true end",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "Context_cleanup(self, linger)",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "if self._private.on_close then\r\n    pcall(self._private.on_close)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 80,
    "text": "pcall(self._private.on_close)",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "if self._private.owner then\r\n    api.zmq_ctx_term(self._private.ctx)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 82,
    "text": "api.zmq_ctx_term(self._private.ctx)",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "self._private.ctx = nil",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "function Context:on_close(fn)\r\n  self._private.on_close = fn\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 86,
    "text": "self._private.on_close = fn",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "function Context:shutdown(linger)\r\n  check_context(self)\r\n  Context_cleanup(self, linger)\r\n\r\n  if self._private.owner then\r\n    api.zmq_ctx_shutdown(self._private.ctx)\r\n  end\r\n  self._private.shutdown = true\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 89,
    "text": "check_context(self)",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "if self._private.owner then\r\n    api.zmq_ctx_shutdown(self._private.ctx)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 91,
    "text": "api.zmq_ctx_shutdown(self._private.ctx)",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "self._private.shutdown = true",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 94,
    "text": "function Context:shutdowned()\r\n  return not not self._private.shutdown\r\nend",
    "type": "function"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "function Context:handle()\r\n  check_context(self)\r\n  return self._private.ctx\r\nend",
    "type": "function"
  }, {
    "id": 97,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 98,
    "text": "function Context:get(option)\r\n  check_context(self)\r\n  return api.zmq_ctx_get(self._private.ctx, option)\r\nend",
    "type": "function"
  }, {
    "id": 99,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 100,
    "text": "function Context:set(option, value)\r\n  check_context(self)\r\n  local ret = api.zmq_ctx_set(self._private.ctx, option, value)\r\n  if ret == -1 then return nil, zerror() end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 101,
    "text": "local ret = api.zmq_ctx_set(self._private.ctx, option, value)",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "if ret == -1 then return nil, zerror() end",
    "type": "statement:if"
  }, {
    "id": 103,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 104,
    "text": "function Context:lightuserdata()\r\n  check_context(self)\r\n  local ptr = api.serialize_ptr(self._private.ctx)\r\n  assert(self._private.ctx == api.deserialize_ptr(ptr))\r\n  return ptr\r\nend",
    "type": "function"
  }, {
    "id": 105,
    "text": "local ptr = api.serialize_ptr(self._private.ctx)",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "assert(self._private.ctx == api.deserialize_ptr(ptr))",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 108,
    "text": "function(self)\r\n    return self:get(optid)\r\n  end",
    "type": "function"
  }, {
    "id": 109,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 110,
    "text": "function(self, value)\r\n    return self:set(optid, value)\r\n  end",
    "type": "function"
  }, {
    "id": 111,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 112,
    "text": "function Context:socket(stype, opt)\r\n  check_context(self)\r\n  if type(stype) == \"table\" then\r\n    stype, opt = stype[1], stype\r\n  end\r\n  local skt = api.zmq_socket(self._private.ctx, stype)\r\n  if not skt then return nil, zerror() end\r\n  local o = setmetatable({\r\n    _private = {\r\n      ctx = self;\r\n      skt = skt;\r\n    }\r\n  },Socket)\r\n  self:_inc_socket_count(1)\r\n\r\n  -- if not HAS_GC_TABLE then\r\n  --   ffi.gc(skt, function() o:close() end)\r\n  -- end\r\n\r\n  if opt then\r\n    for k, v in pairs(opt) do\r\n      if type(k) == 'string' then\r\n        local fn = o['set_' .. k]\r\n        if fn then\r\n          local ok, err, ext = fn(o, v)\r\n          if not ok then\r\n            o:destroy()\r\n            return nil, err, ext\r\n          end\r\n        end\r\n      end\r\n    end\r\n\r\n    if opt.bind then\r\n      local ok, err, ext = o:bind(opt.bind)\r\n      if not ok then\r\n        o:close()\r\n        return ok, err, ext\r\n      end\r\n    end\r\n\r\n    if opt.connect then\r\n      local ok, err, ext = o:connect(opt.connect)\r\n      if not ok then\r\n        o:close()\r\n        return ok, err, ext\r\n      end\r\n    end\r\n\r\n  end\r\n\r\n  self:autoclose(o)\r\n  return o\r\nend",
    "type": "function"
  }, {
    "id": 113,
    "text": "if type(stype) == \"table\" then\r\n    stype, opt = stype[1], stype\r\n  end",
    "type": "statement:if"
  }, {
    "id": 114,
    "text": "stype, opt = stype[1], stype",
    "type": "statement:assign"
  }, {
    "id": 115,
    "text": "local skt = api.zmq_socket(self._private.ctx, stype)",
    "type": "statement:localassign"
  }, {
    "id": 116,
    "text": "if not skt then return nil, zerror() end",
    "type": "statement:if"
  }, {
    "id": 117,
    "text": "local o = setmetatable({\r\n    _private = {\r\n      ctx = self;\r\n      skt = skt;\r\n    }\r\n  },Socket)",
    "type": "statement:localassign"
  }, {
    "id": 118,
    "text": "self:_inc_socket_count(1)",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "if opt then\r\n    for k, v in pairs(opt) do\r\n      if type(k) == 'string' then\r\n        local fn = o['set_' .. k]\r\n        if fn then\r\n          local ok, err, ext = fn(o, v)\r\n          if not ok then\r\n            o:destroy()\r\n            return nil, err, ext\r\n          end\r\n        end\r\n      end\r\n    end\r\n\r\n    if opt.bind then\r\n      local ok, err, ext = o:bind(opt.bind)\r\n      if not ok then\r\n        o:close()\r\n        return ok, err, ext\r\n      end\r\n    end\r\n\r\n    if opt.connect then\r\n      local ok, err, ext = o:connect(opt.connect)\r\n      if not ok then\r\n        o:close()\r\n        return ok, err, ext\r\n      end\r\n    end\r\n\r\n  end",
    "type": "statement:if"
  }, {
    "id": 120,
    "text": "for k, v in pairs(opt) do\r\n      if type(k) == 'string' then\r\n        local fn = o['set_' .. k]\r\n        if fn then\r\n          local ok, err, ext = fn(o, v)\r\n          if not ok then\r\n            o:destroy()\r\n            return nil, err, ext\r\n          end\r\n        end\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 121,
    "text": "if type(k) == 'string' then\r\n        local fn = o['set_' .. k]\r\n        if fn then\r\n          local ok, err, ext = fn(o, v)\r\n          if not ok then\r\n            o:destroy()\r\n            return nil, err, ext\r\n          end\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 122,
    "text": "if fn then\r\n          local ok, err, ext = fn(o, v)\r\n          if not ok then\r\n            o:destroy()\r\n            return nil, err, ext\r\n          end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 123,
    "text": "local ok, err, ext = fn(o, v)",
    "type": "statement:localassign"
  }, {
    "id": 124,
    "text": "if not ok then\r\n            o:destroy()\r\n            return nil, err, ext\r\n          end",
    "type": "statement:if"
  }, {
    "id": 125,
    "text": "if opt.bind then\r\n      local ok, err, ext = o:bind(opt.bind)\r\n      if not ok then\r\n        o:close()\r\n        return ok, err, ext\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 126,
    "text": "local ok, err, ext = o:bind(opt.bind)",
    "type": "statement:localassign"
  }, {
    "id": 127,
    "text": "if not ok then\r\n        o:close()\r\n        return ok, err, ext\r\n      end",
    "type": "statement:if"
  }, {
    "id": 128,
    "text": "o:close()",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "if opt.connect then\r\n      local ok, err, ext = o:connect(opt.connect)\r\n      if not ok then\r\n        o:close()\r\n        return ok, err, ext\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 130,
    "text": "local ok, err, ext = o:connect(opt.connect)",
    "type": "statement:localassign"
  }, {
    "id": 131,
    "text": "self:autoclose(o)",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 133,
    "text": "function Context:autoclose(skt)\r\n  check_context(self)\r\n  assert(self == skt._private.ctx)\r\n  if not skt:closed() then\r\n    self._private.sockets[skt:handle()] = skt\r\n  end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 134,
    "text": "assert(self == skt._private.ctx)",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "if not skt:closed() then\r\n    self._private.sockets[skt:handle()] = skt\r\n  end",
    "type": "statement:if"
  }, {
    "id": 136,
    "text": "self._private.sockets[skt:handle()] = skt",
    "type": "statement:assign"
  }, {
    "id": 137,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 138,
    "text": "function Context:socket_count()\r\n    check_context(self)\r\n    return self._private.scount\r\n  end",
    "type": "function"
  }, {
    "id": 139,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 140,
    "text": "function Context:socket_count()\r\n    check_context(self)\r\n    local cnt = 0\r\n    for _ in pairs(self._private.sockets) do\r\n      cnt = cnt + 1;\r\n    end\r\n    return cnt\r\n  end",
    "type": "function"
  }, {
    "id": 141,
    "text": "local cnt = 0",
    "type": "statement:localassign"
  }, {
    "id": 142,
    "text": "for _ in pairs(self._private.sockets) do\r\n      cnt = cnt + 1;\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 143,
    "text": "cnt = cnt + 1",
    "type": "statement:assign"
  }, {
    "id": 144,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 145,
    "text": "function Socket:closed()\r\n  return not self._private\r\nend",
    "type": "function"
  }, {
    "id": 146,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 147,
    "text": "function Socket:close(linger)\r\n  if self:closed() then return true end\r\n\r\n  if self._private.on_close then\r\n    pcall(self._private.on_close)\r\n  end\r\n\r\n  if not self._private.dont_destroy then\r\n    if self._private.ctx then\r\n      self._private.ctx:_remove_socket(self)\r\n      self._private.ctx:_inc_socket_count(-1)\r\n    end\r\n\r\n    if linger then\r\n      api.zmq_skt_setopt_int(self._private.skt, ZMQ_LINGER, linger)\r\n    end\r\n\r\n    api.zmq_close(self._private.skt)\r\n  end\r\n\r\n  self._private.skt = nil\r\n  self._private = nil\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 148,
    "text": "if not self._private.dont_destroy then\r\n    if self._private.ctx then\r\n      self._private.ctx:_remove_socket(self)\r\n      self._private.ctx:_inc_socket_count(-1)\r\n    end\r\n\r\n    if linger then\r\n      api.zmq_skt_setopt_int(self._private.skt, ZMQ_LINGER, linger)\r\n    end\r\n\r\n    api.zmq_close(self._private.skt)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 149,
    "text": "if self._private.ctx then\r\n      self._private.ctx:_remove_socket(self)\r\n      self._private.ctx:_inc_socket_count(-1)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 150,
    "text": "self._private.ctx:_remove_socket(self)",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "self._private.ctx:_inc_socket_count(-1)",
    "type": "statement:functioncall"
  }, {
    "id": 152,
    "text": "if linger then\r\n      api.zmq_skt_setopt_int(self._private.skt, ZMQ_LINGER, linger)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 153,
    "text": "api.zmq_skt_setopt_int(self._private.skt, ZMQ_LINGER, linger)",
    "type": "statement:functioncall"
  }, {
    "id": 154,
    "text": "api.zmq_close(self._private.skt)",
    "type": "statement:functioncall"
  }, {
    "id": 155,
    "text": "self._private.skt = nil",
    "type": "statement:assign"
  }, {
    "id": 156,
    "text": "self._private = nil",
    "type": "statement:assign"
  }, {
    "id": 157,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 158,
    "text": "function Socket:handle()\r\n  return self._private.skt\r\nend",
    "type": "function"
  }, {
    "id": 159,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 160,
    "text": "function Socket:reset_handle(h, own, close)\r\n  local skt = self._private.skt\r\n\r\n  if self._private.ctx then\r\n    self._private.ctx:_remove_socket(self)\r\n  end\r\n\r\n  self._private.skt = assert(api.deserialize_ptr(h))\r\n  if own ~= nil then \r\n    self._private.dont_destroy = not own\r\n  end\r\n\r\n  if not self._private.dont_destroy then\r\n    ffi.gc(self._private.skt, api.zmq_close)\r\n  end\r\n\r\n  if self._private.ctx then\r\n    self._private.ctx:autoclose(self)\r\n  end\r\n\r\n  if close then\r\n    api.zmq_close(skt)\r\n    return true\r\n  end\r\n\r\n  return api.serialize_ptr(ffi.gc(skt, nil))\r\nend",
    "type": "function"
  }, {
    "id": 161,
    "text": "local skt = self._private.skt",
    "type": "statement:localassign"
  }, {
    "id": 162,
    "text": "if self._private.ctx then\r\n    self._private.ctx:_remove_socket(self)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 163,
    "text": "self._private.skt = assert(api.deserialize_ptr(h))",
    "type": "statement:assign"
  }, {
    "id": 164,
    "text": "if own ~= nil then \r\n    self._private.dont_destroy = not own\r\n  end",
    "type": "statement:if"
  }, {
    "id": 165,
    "text": "self._private.dont_destroy = not own",
    "type": "statement:assign"
  }, {
    "id": 166,
    "text": "if not self._private.dont_destroy then\r\n    ffi.gc(self._private.skt, api.zmq_close)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 167,
    "text": "ffi.gc(self._private.skt, api.zmq_close)",
    "type": "statement:functioncall"
  }, {
    "id": 168,
    "text": "if self._private.ctx then\r\n    self._private.ctx:autoclose(self)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 169,
    "text": "self._private.ctx:autoclose(self)",
    "type": "statement:functioncall"
  }, {
    "id": 170,
    "text": "if close then\r\n    api.zmq_close(skt)\r\n    return true\r\n  end",
    "type": "statement:if"
  }, {
    "id": 171,
    "text": "api.zmq_close(skt)",
    "type": "statement:functioncall"
  }, {
    "id": 172,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 173,
    "text": "function Socket:lightuserdata()\r\n  return api.serialize_ptr(self:handle())\r\nend",
    "type": "function"
  }, {
    "id": 174,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 175,
    "text": "local function gen_skt_bind(bind)\r\n  return function(self, addr)\r\n    assert(not self:closed())\r\n    if type(addr) == 'string' then\r\n      local ret = bind(self._private.skt, addr)\r\n      if -1 == ret then return nil, zerror() end\r\n      return true\r\n    end\r\n    assert(type(addr) == 'table')\r\n    for _, a in ipairs(addr) do\r\n      local ret = bind(self._private.skt, a)\r\n      if -1 == ret then return nil, zerror(), a end\r\n    end\r\n    return true\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 176,
    "text": "if type(addr) == 'string' then\r\n      local ret = bind(self._private.skt, addr)\r\n      if -1 == ret then return nil, zerror() end\r\n      return true\r\n    end",
    "type": "statement:if"
  }, {
    "id": 177,
    "text": "local ret = bind(self._private.skt, addr)",
    "type": "statement:localassign"
  }, {
    "id": 178,
    "text": "if -1 == ret then return nil, zerror() end",
    "type": "statement:if"
  }, {
    "id": 179,
    "text": "assert(type(addr) == 'table')",
    "type": "statement:functioncall"
  }, {
    "id": 180,
    "text": "for _, a in ipairs(addr) do\r\n      local ret = bind(self._private.skt, a)\r\n      if -1 == ret then return nil, zerror(), a end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 181,
    "text": "local ret = bind(self._private.skt, a)",
    "type": "statement:localassign"
  }, {
    "id": 182,
    "text": "if -1 == ret then return nil, zerror(), a end",
    "type": "statement:if"
  }, {
    "id": 183,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 184,
    "text": "function Socket:bind_to_random_port(address, port, tries)\r\n  port  = port or RANDOM_PORT_BASE\r\n  tries = tries or (RANDOM_PORT_MAX - port + 1)\r\n\r\n  assert(type(address) == 'string')\r\n  assert((port > 0) and (port <= RANDOM_PORT_MAX), \"invalid port number\")\r\n  assert(tries > 0, \"invalid max tries value\")\r\n\r\n  local ok, err\r\n  while((port <= RANDOM_PORT_MAX)and(tries > 0))do\r\n    local a = address .. ':' .. tostring(port)\r\n    ok, err = self:bind(a)\r\n    if ok then return port end\r\n\r\n    if (err:no() ~= ERRORS.EADDRINUSE) and (err:no() ~= ERRORS.EACCES) then\r\n      local msg = err:msg()\r\n      if msg ~= \"Address in use\" then \r\n        if not msg:lower():find(\"address .- in use\") then\r\n          break\r\n        end\r\n      end\r\n    end\r\n\r\n    port, tries = port + 1, tries - 1\r\n  end\r\n\r\n  return nil, err or zerror(ERRORS.EINVAL)\r\nend",
    "type": "function"
  }, {
    "id": 185,
    "text": "port  = port or RANDOM_PORT_BASE",
    "type": "statement:assign"
  }, {
    "id": 186,
    "text": "tries = tries or (RANDOM_PORT_MAX - port + 1)",
    "type": "statement:assign"
  }, {
    "id": 187,
    "text": "assert(type(address) == 'string')",
    "type": "statement:functioncall"
  }, {
    "id": 188,
    "text": "assert((port > 0) and (port <= RANDOM_PORT_MAX), \"invalid port number\")",
    "type": "statement:functioncall"
  }, {
    "id": 189,
    "text": "assert(tries > 0, \"invalid max tries value\")",
    "type": "statement:functioncall"
  }, {
    "id": 190,
    "text": "local ok, err",
    "type": "statement:localassign"
  }, {
    "id": 191,
    "text": "while((port <= RANDOM_PORT_MAX)and(tries > 0))do\r\n    local a = address .. ':' .. tostring(port)\r\n    ok, err = self:bind(a)\r\n    if ok then return port end\r\n\r\n    if (err:no() ~= ERRORS.EADDRINUSE) and (err:no() ~= ERRORS.EACCES) then\r\n      local msg = err:msg()\r\n      if msg ~= \"Address in use\" then \r\n        if not msg:lower():find(\"address .- in use\") then\r\n          break\r\n        end\r\n      end\r\n    end\r\n\r\n    port, tries = port + 1, tries - 1\r\n  end",
    "type": "statement:while"
  }, {
    "id": 192,
    "text": "local a = address .. ':' .. tostring(port)",
    "type": "statement:localassign"
  }, {
    "id": 193,
    "text": "ok, err = self:bind(a)",
    "type": "statement:assign"
  }, {
    "id": 194,
    "text": "if ok then return port end",
    "type": "statement:if"
  }, {
    "id": 195,
    "text": "if (err:no() ~= ERRORS.EADDRINUSE) and (err:no() ~= ERRORS.EACCES) then\r\n      local msg = err:msg()\r\n      if msg ~= \"Address in use\" then \r\n        if not msg:lower():find(\"address .- in use\") then\r\n          break\r\n        end\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 196,
    "text": "local msg = err:msg()",
    "type": "statement:localassign"
  }, {
    "id": 197,
    "text": "if msg ~= \"Address in use\" then \r\n        if not msg:lower():find(\"address .- in use\") then\r\n          break\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 198,
    "text": "if not msg:lower():find(\"address .- in use\") then\r\n          break\r\n        end",
    "type": "statement:if"
  }, {
    "id": 199,
    "text": "port, tries = port + 1, tries - 1",
    "type": "statement:assign"
  }, {
    "id": 200,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 201,
    "text": "function Socket:send(msg, flags)\r\n  assert(not self:closed())\r\n  local ret = api.zmq_send(self._private.skt, msg, flags)\r\n  if ret == -1 then return nil, zerror() end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 202,
    "text": "local ret = api.zmq_send(self._private.skt, msg, flags)",
    "type": "statement:localassign"
  }, {
    "id": 203,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 204,
    "text": "function Socket:recv(flags)\r\n  assert(not self:closed())\r\n  local msg = api.zmq_msg_init(tmp_msg)\r\n  if not msg then return nil, zerror() end\r\n  local ret = api.zmq_msg_recv(msg, self._private.skt, flags)\r\n  if ret == -1 then\r\n    api.zmq_msg_close(msg)\r\n    return nil, zerror()\r\n  end\r\n  local data = api.zmq_msg_get_data(msg)\r\n  local more = api.zmq_msg_more(msg)\r\n  api.zmq_msg_close(msg)\r\n  return data, more ~= 0\r\nend",
    "type": "function"
  }, {
    "id": 205,
    "text": "local msg = api.zmq_msg_init(tmp_msg)",
    "type": "statement:localassign"
  }, {
    "id": 206,
    "text": "if not msg then return nil, zerror() end",
    "type": "statement:if"
  }, {
    "id": 207,
    "text": "local ret = api.zmq_msg_recv(msg, self._private.skt, flags)",
    "type": "statement:localassign"
  }, {
    "id": 208,
    "text": "if ret == -1 then\r\n    api.zmq_msg_close(msg)\r\n    return nil, zerror()\r\n  end",
    "type": "statement:if"
  }, {
    "id": 209,
    "text": "api.zmq_msg_close(msg)",
    "type": "statement:functioncall"
  }, {
    "id": 210,
    "text": "local data = api.zmq_msg_get_data(msg)",
    "type": "statement:localassign"
  }, {
    "id": 211,
    "text": "local more = api.zmq_msg_more(msg)",
    "type": "statement:localassign"
  }, {
    "id": 212,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 213,
    "text": "function Socket:send_all(msg, flags, i, n)\r\n  flags = flags or 0\r\n  i = i or 1\r\n  n = n or #msg\r\n  assert(n >= i, \"invalid range\")\r\n\r\n  if(flags ~= 0) and (flags ~= FLAGS.ZMQ_SNDMORE) then\r\n    return nil, zerror(ERRORS.ENOTSUP)\r\n  end\r\n  for i = i, n - 1 do\r\n    local str = assert(msg[i])\r\n    local ok, err = self:send(str, FLAGS.ZMQ_SNDMORE)\r\n    if not ok then return nil, err, i end\r\n  end\r\n  local ok, err = self:send(msg[n], flags)\r\n  if not ok then return nil, err, n end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 214,
    "text": "flags = flags or 0",
    "type": "statement:assign"
  }, {
    "id": 215,
    "text": "i = i or 1",
    "type": "statement:assign"
  }, {
    "id": 216,
    "text": "n = n or #msg",
    "type": "statement:assign"
  }, {
    "id": 217,
    "text": "assert(n >= i, \"invalid range\")",
    "type": "statement:functioncall"
  }, {
    "id": 218,
    "text": "if(flags ~= 0) and (flags ~= FLAGS.ZMQ_SNDMORE) then\r\n    return nil, zerror(ERRORS.ENOTSUP)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 219,
    "text": "for i = i, n - 1 do\r\n    local str = assert(msg[i])\r\n    local ok, err = self:send(str, FLAGS.ZMQ_SNDMORE)\r\n    if not ok then return nil, err, i end\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 220,
    "text": "local str = assert(msg[i])",
    "type": "statement:localassign"
  }, {
    "id": 221,
    "text": "local ok, err = self:send(str, FLAGS.ZMQ_SNDMORE)",
    "type": "statement:localassign"
  }, {
    "id": 222,
    "text": "if not ok then return nil, err, i end",
    "type": "statement:if"
  }, {
    "id": 223,
    "text": "local ok, err = self:send(msg[n], flags)",
    "type": "statement:localassign"
  }, {
    "id": 224,
    "text": "if not ok then return nil, err, n end",
    "type": "statement:if"
  }, {
    "id": 225,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 226,
    "text": "function Socket:sendx(...)\r\n  return self:send_all({...}, 0, 1, select(\"#\", ...))\r\nend",
    "type": "function"
  }, {
    "id": 227,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 228,
    "text": "function Socket:sendx_more(...)\r\n  return self:send_all({...}, FLAGS.ZMQ_SNDMORE, 1, select(\"#\", ...))\r\nend",
    "type": "function"
  }, {
    "id": 229,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 230,
    "text": "function Socket:send_more(msg, flags)\r\n  flags = bit.bor(flags or 0, FLAGS.ZMQ_SNDMORE)\r\n  return self:send(msg, flags)\r\nend",
    "type": "function"
  }, {
    "id": 231,
    "text": "flags = bit.bor(flags or 0, FLAGS.ZMQ_SNDMORE)",
    "type": "statement:assign"
  }, {
    "id": 232,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 233,
    "text": "function Socket:send_msg(msg, flags)\r\n  return msg:send(self, flags)\r\nend",
    "type": "function"
  }, {
    "id": 234,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 235,
    "text": "function Socket:recv_all(flags)\r\n  local res = {}\r\n  while true do\r\n    local data, more = self:recv(flags)\r\n    if not data then return nil, more end\r\n    table.insert(res, data)\r\n    if not more then break end\r\n  end\r\n  return res\r\nend",
    "type": "function"
  }, {
    "id": 236,
    "text": "local res = {}",
    "type": "statement:localassign"
  }, {
    "id": 237,
    "text": "while true do\r\n    local data, more = self:recv(flags)\r\n    if not data then return nil, more end\r\n    table.insert(res, data)\r\n    if not more then break end\r\n  end",
    "type": "statement:while"
  }, {
    "id": 238,
    "text": "local data, more = self:recv(flags)",
    "type": "statement:localassign"
  }, {
    "id": 239,
    "text": "if not data then return nil, more end",
    "type": "statement:if"
  }, {
    "id": 240,
    "text": "table.insert(res, data)",
    "type": "statement:functioncall"
  }, {
    "id": 241,
    "text": "if not more then break end",
    "type": "statement:if"
  }, {
    "id": 242,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 243,
    "text": "function Socket:recvx(flags)\r\n  local ok, err, t = self:recv_all(flags)\r\n  if not ok then\r\n    if t then return nil, err, unpack(t) end\r\n    return nil, err\r\n  end\r\n  return unpack(ok)\r\nend",
    "type": "function"
  }, {
    "id": 244,
    "text": "local ok, err, t = self:recv_all(flags)",
    "type": "statement:localassign"
  }, {
    "id": 245,
    "text": "if not ok then\r\n    if t then return nil, err, unpack(t) end\r\n    return nil, err\r\n  end",
    "type": "statement:if"
  }, {
    "id": 246,
    "text": "if t then return nil, err, unpack(t) end",
    "type": "statement:if"
  }, {
    "id": 247,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 248,
    "text": "function Socket:recv_len(len, flags)\r\n  assert(not self:closed())\r\n  assert(type(len) == \"number\")\r\n  assert(len >= 0)\r\n\r\n  local data, len = api.zmq_recv(self._private.skt, len, flags)\r\n  if not data then return nil, zerror() end\r\n\r\n  return data, self:more(), len\r\nend",
    "type": "function"
  }, {
    "id": 249,
    "text": "assert(type(len) == \"number\")",
    "type": "statement:functioncall"
  }, {
    "id": 250,
    "text": "assert(len >= 0)",
    "type": "statement:functioncall"
  }, {
    "id": 251,
    "text": "local data, len = api.zmq_recv(self._private.skt, len, flags)",
    "type": "statement:localassign"
  }, {
    "id": 252,
    "text": "if not data then return nil, zerror() end",
    "type": "statement:if"
  }, {
    "id": 253,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 254,
    "text": "function Socket:recv_msg(msg, flags)\r\n  return msg:recv(self, flags)\r\nend",
    "type": "function"
  }, {
    "id": 255,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 256,
    "text": "function Socket:recv_new_msg(flags)\r\n  local msg = Message:new()\r\n  local ok, err = msg:recv(self, flags)\r\n  if not ok then\r\n    msg:close()\r\n    return nil, err\r\n  end\r\n  return msg, err\r\nend",
    "type": "function"
  }, {
    "id": 257,
    "text": "local msg = Message:new()",
    "type": "statement:localassign"
  }, {
    "id": 258,
    "text": "local ok, err = msg:recv(self, flags)",
    "type": "statement:localassign"
  }, {
    "id": 259,
    "text": "if not ok then\r\n    msg:close()\r\n    return nil, err\r\n  end",
    "type": "statement:if"
  }, {
    "id": 260,
    "text": "msg:close()",
    "type": "statement:functioncall"
  }, {
    "id": 261,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 262,
    "text": "function Socket:recv_event(flags)\r\n  assert(not self:closed())\r\n  return api.zmq_recv_event(self._private.skt, flags)\r\nend",
    "type": "function"
  }, {
    "id": 263,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 264,
    "text": "local function gen_getopt(getopt)\r\n  return function(self, option)\r\n    assert(not self:closed())\r\n    local val = getopt(self._private.skt, option)\r\n    if not val then return nil, zerror() end\r\n    return val\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 265,
    "text": "local val = getopt(self._private.skt, option)",
    "type": "statement:localassign"
  }, {
    "id": 266,
    "text": "if not val then return nil, zerror() end",
    "type": "statement:if"
  }, {
    "id": 267,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 268,
    "text": "local function gen_setopt(setopt)\r\n  return function(self, option, value)\r\n    assert(not self:closed())\r\n    local ret = setopt(self._private.skt, option, value)\r\n    if -1 == ret then return nil, zerror() end\r\n    return true\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 269,
    "text": "local ret = setopt(self._private.skt, option, value)",
    "type": "statement:localassign"
  }, {
    "id": 270,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 271,
    "text": "function Socket:setopt_str_arr(optname, optval)\r\n  if type(optval) == \"string\" then\r\n    return self:setopt_str(optname, optval)\r\n  end\r\n  assert(type(optval) == \"table\")\r\n  for _, str in ipairs(optval) do\r\n    local ok, err = self:setopt_str(optname, str)\r\n    if not ok then return nil, err, str end\r\n  end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 272,
    "text": "if type(optval) == \"string\" then\r\n    return self:setopt_str(optname, optval)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 273,
    "text": "assert(type(optval) == \"table\")",
    "type": "statement:functioncall"
  }, {
    "id": 274,
    "text": "for _, str in ipairs(optval) do\r\n    local ok, err = self:setopt_str(optname, str)\r\n    if not ok then return nil, err, str end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 275,
    "text": "local ok, err = self:setopt_str(optname, str)",
    "type": "statement:localassign"
  }, {
    "id": 276,
    "text": "if not ok then return nil, err, str end",
    "type": "statement:if"
  }, {
    "id": 277,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 278,
    "text": "function(self) return self[getname](self, optid) end",
    "type": "function"
  }, {
    "id": 279,
    "text": "function(self, value) return self[setname](self, optid, value) end",
    "type": "function"
  }, {
    "id": 280,
    "text": "function Socket:more()\r\n  local more, err = self:rcvmore()\r\n  if not more then return nil, err end\r\n  return more ~= 0\r\nend",
    "type": "function"
  }, {
    "id": 281,
    "text": "local more, err = self:rcvmore()",
    "type": "statement:localassign"
  }, {
    "id": 282,
    "text": "if not more then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 283,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 284,
    "text": "function Socket:on_close(fn)\r\n  assert(not self:closed())\r\n  self._private.on_close = fn\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 285,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 286,
    "text": "function Socket:context()\r\n  return self._private.ctx\r\nend",
    "type": "function"
  }, {
    "id": 287,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 288,
    "text": "function Socket:monitor(addr, events)\r\n  if type(addr) == 'number' then\r\n    events, addr = addr\r\n  end\r\n\r\n  if not addr then\r\n    addr = \"inproc://lzmq.monitor.\" .. ptrtohex(self._private.skt)\r\n  end\r\n\r\n  events = events or api.EVENTS.ZMQ_EVENT_ALL\r\n\r\n  local ret = api.zmq_socket_monitor(self._private.skt, addr, events)\r\n  if -1 == ret then return nil, zerror() end\r\n\r\n  return addr  \r\nend",
    "type": "function"
  }, {
    "id": 289,
    "text": "if type(addr) == 'number' then\r\n    events, addr = addr\r\n  end",
    "type": "statement:if"
  }, {
    "id": 290,
    "text": "events, addr = addr",
    "type": "statement:assign"
  }, {
    "id": 291,
    "text": "if not addr then\r\n    addr = \"inproc://lzmq.monitor.\" .. ptrtohex(self._private.skt)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 292,
    "text": "addr = \"inproc://lzmq.monitor.\" .. ptrtohex(self._private.skt)",
    "type": "statement:assign"
  }, {
    "id": 293,
    "text": "events = events or api.EVENTS.ZMQ_EVENT_ALL",
    "type": "statement:assign"
  }, {
    "id": 294,
    "text": "local ret = api.zmq_socket_monitor(self._private.skt, addr, events)",
    "type": "statement:localassign"
  }, {
    "id": 295,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 296,
    "text": "function Socket:poll(timeout, events)\r\n  timeout = timeout or -1\r\n  events  = events or ZMQ_POLLIN\r\n\r\n  poll_item[0].socket  = self._private.skt\r\n  poll_item[0].fd      = 0\r\n  poll_item[0].events  = events\r\n  poll_item[0].revents = 0\r\n\r\n  local ret = api.zmq_poll(poll_item, 1, timeout)\r\n\r\n  poll_item[0].socket  = api.NULL\r\n  local revents = poll_item[0].revents\r\n\r\n  if ret == -1 then return nil, zerror() end\r\n\r\n  return (bit.band(events, revents) ~= 0), revents\r\nend",
    "type": "function"
  }, {
    "id": 297,
    "text": "timeout = timeout or -1",
    "type": "statement:assign"
  }, {
    "id": 298,
    "text": "events  = events or ZMQ_POLLIN",
    "type": "statement:assign"
  }, {
    "id": 299,
    "text": "poll_item[0].socket  = self._private.skt",
    "type": "statement:assign"
  }, {
    "id": 300,
    "text": "poll_item[0].fd      = 0",
    "type": "statement:assign"
  }, {
    "id": 301,
    "text": "poll_item[0].events  = events",
    "type": "statement:assign"
  }, {
    "id": 302,
    "text": "poll_item[0].revents = 0",
    "type": "statement:assign"
  }, {
    "id": 303,
    "text": "local ret = api.zmq_poll(poll_item, 1, timeout)",
    "type": "statement:localassign"
  }, {
    "id": 304,
    "text": "poll_item[0].socket  = api.NULL",
    "type": "statement:assign"
  }, {
    "id": 305,
    "text": "local revents = poll_item[0].revents",
    "type": "statement:localassign"
  }, {
    "id": 306,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 307,
    "text": "function Message:new(str_or_len)\r\n  local msg\r\n  if not str_or_len then\r\n    msg = api.zmq_msg_init()\r\n  elseif type(str_or_len) == \"number\" then\r\n    msg = api.zmq_msg_init_size(str_or_len)\r\n  else\r\n    msg = api.zmq_msg_init_string(str_or_len)\r\n  end\r\n  if not msg then return nil, zerror() end\r\n  return Message:wrap(msg)\r\nend",
    "type": "function"
  }, {
    "id": 308,
    "text": "local msg",
    "type": "statement:localassign"
  }, {
    "id": 309,
    "text": "if not str_or_len then\r\n    msg = api.zmq_msg_init()\r\n  elseif type(str_or_len) == \"number\" then\r\n    msg = api.zmq_msg_init_size(str_or_len)\r\n  else\r\n    msg = api.zmq_msg_init_string(str_or_len)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 310,
    "text": "msg = api.zmq_msg_init()",
    "type": "statement:assign"
  }, {
    "id": 311,
    "text": "msg = api.zmq_msg_init_size(str_or_len)",
    "type": "statement:assign"
  }, {
    "id": 312,
    "text": "msg = api.zmq_msg_init_string(str_or_len)",
    "type": "statement:assign"
  }, {
    "id": 313,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 314,
    "text": "function Message:wrap(msg)\r\n  return setmetatable({\r\n    _private = {\r\n      msg = ffi.gc(msg, api.zmq_msg_close);\r\n    }\r\n  }, self)\r\nend",
    "type": "function"
  }, {
    "id": 315,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 316,
    "text": "function Message:closed()\r\n  return not self._private.msg\r\nend",
    "type": "function"
  }, {
    "id": 317,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 318,
    "text": "function Message:close()\r\n  if self:closed() then return true end\r\n  api.zmq_msg_close(ffi.gc(self._private.msg, nil))\r\n  self._private.msg = nil\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 319,
    "text": "api.zmq_msg_close(ffi.gc(self._private.msg, nil))",
    "type": "statement:functioncall"
  }, {
    "id": 320,
    "text": "self._private.msg = nil",
    "type": "statement:assign"
  }, {
    "id": 321,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 322,
    "text": "function Message:handle()\r\n  return self._private.msg\r\nend",
    "type": "function"
  }, {
    "id": 323,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 324,
    "text": "local function gen_move(move)\r\n  return function (self, ...)\r\n    assert(not self:closed())\r\n    if select(\"#\", ...) > 0 then assert((...)) end\r\n    local msg = ...\r\n    if not msg then\r\n      msg = move(self._private.msg)\r\n      if not msg then return nil, zerror() end\r\n      msg = Message:wrap(msg)\r\n    elseif getmetatable(msg) == Message then\r\n      if not move(self._private.msg, msg._private.msg) then\r\n        return nil, zerror()\r\n      end\r\n      msg = self\r\n    else\r\n      if not move(self._private.msg, msg) then\r\n        return nil, zerror()\r\n      end\r\n      msg = self\r\n    end\r\n    return msg\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 325,
    "text": "if select(\"#\", ...) > 0 then assert((...)) end",
    "type": "statement:if"
  }, {
    "id": 326,
    "text": "assert((...))",
    "type": "statement:functioncall"
  }, {
    "id": 327,
    "text": "local msg = ...",
    "type": "statement:localassign"
  }, {
    "id": 328,
    "text": "if not msg then\r\n      msg = move(self._private.msg)\r\n      if not msg then return nil, zerror() end\r\n      msg = Message:wrap(msg)\r\n    elseif getmetatable(msg) == Message then\r\n      if not move(self._private.msg, msg._private.msg) then\r\n        return nil, zerror()\r\n      end\r\n      msg = self\r\n    else\r\n      if not move(self._private.msg, msg) then\r\n        return nil, zerror()\r\n      end\r\n      msg = self\r\n    end",
    "type": "statement:if"
  }, {
    "id": 329,
    "text": "msg = move(self._private.msg)",
    "type": "statement:assign"
  }, {
    "id": 330,
    "text": "msg = Message:wrap(msg)",
    "type": "statement:assign"
  }, {
    "id": 331,
    "text": "if not move(self._private.msg, msg._private.msg) then\r\n        return nil, zerror()\r\n      end",
    "type": "statement:if"
  }, {
    "id": 332,
    "text": "msg = self",
    "type": "statement:assign"
  }, {
    "id": 333,
    "text": "if not move(self._private.msg, msg) then\r\n        return nil, zerror()\r\n      end",
    "type": "statement:if"
  }, {
    "id": 334,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 335,
    "text": "function Message:size()\r\n  assert(not self:closed())\r\n  return api.zmq_msg_size(self._private.msg)\r\nend",
    "type": "function"
  }, {
    "id": 336,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 337,
    "text": "function Message:set_size(nsize)\r\n  assert(not self:closed())\r\n  local osize = self:size()\r\n  if nsize == osize then return true end\r\n  local msg = api.zmq_msg_init_size(tmp_msg, nsize)\r\n  if nsize > osize then nsize = osize end\r\n\r\n  if nsize > 0 then\r\n    ffi.copy(\r\n      api.zmq_msg_data(msg),\r\n      api.zmq_msg_data(self._private.msg),\r\n      nsize\r\n    )\r\n  end\r\n\r\n  tmp_msg = self._private.msg\r\n  api.zmq_msg_close(tmp_msg)\r\n\r\n  -- we do not need set ffi.gc because of tmp_msg already set this\r\n  self._private.msg = msg\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 338,
    "text": "local osize = self:size()",
    "type": "statement:localassign"
  }, {
    "id": 339,
    "text": "if nsize == osize then return true end",
    "type": "statement:if"
  }, {
    "id": 340,
    "text": "local msg = api.zmq_msg_init_size(tmp_msg, nsize)",
    "type": "statement:localassign"
  }, {
    "id": 341,
    "text": "if nsize > osize then nsize = osize end",
    "type": "statement:if"
  }, {
    "id": 342,
    "text": "nsize = osize",
    "type": "statement:assign"
  }, {
    "id": 343,
    "text": "if nsize > 0 then\r\n    ffi.copy(\r\n      api.zmq_msg_data(msg),\r\n      api.zmq_msg_data(self._private.msg),\r\n      nsize\r\n    )\r\n  end",
    "type": "statement:if"
  }, {
    "id": 344,
    "text": "ffi.copy(\r\n      api.zmq_msg_data(msg),\r\n      api.zmq_msg_data(self._private.msg),\r\n      nsize\r\n    )",
    "type": "statement:functioncall"
  }, {
    "id": 345,
    "text": "tmp_msg = self._private.msg",
    "type": "statement:assign"
  }, {
    "id": 346,
    "text": "api.zmq_msg_close(tmp_msg)",
    "type": "statement:functioncall"
  }, {
    "id": 347,
    "text": "self._private.msg = msg",
    "type": "statement:assign"
  }, {
    "id": 348,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 349,
    "text": "function Message:data()\r\n  assert(not self:closed())\r\n  return api.zmq_msg_get_data(self._private.msg)\r\nend",
    "type": "function"
  }, {
    "id": 350,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 351,
    "text": "function Message:set_data(pos, str)\r\n  if not str then str, pos = pos end\r\n  pos = pos or 1\r\n  assert(pos > 0)\r\n\r\n  local nsize = pos + #str - 1\r\n  local osize = self:size()\r\n  if nsize <= osize then\r\n    ffi.copy(\r\n      api.zmq_msg_data(self._private.msg, pos - 1),\r\n      str, #str\r\n    )\r\n    return true\r\n  end\r\n  local msg = api.zmq_msg_init_size(tmp_msg, nsize)\r\n  if not msg then return nil, zerror() end\r\n  if osize > pos then osize = pos end\r\n  if osize > 0 then\r\n    ffi.copy(\r\n      api.zmq_msg_data(msg),\r\n      api.zmq_msg_data(self._private.msg),\r\n      osize\r\n    )\r\n  end\r\n  ffi.copy(api.zmq_msg_data(msg, pos - 1),str)\r\n\r\n  tmp_msg = self._private.msg\r\n  api.zmq_msg_close(tmp_msg)\r\n\r\n  -- we do not need set ffi.gc because of tmp_msg already set this\r\n  self._private.msg = msg\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 352,
    "text": "if not str then str, pos = pos end",
    "type": "statement:if"
  }, {
    "id": 353,
    "text": "str, pos = pos",
    "type": "statement:assign"
  }, {
    "id": 354,
    "text": "pos = pos or 1",
    "type": "statement:assign"
  }, {
    "id": 355,
    "text": "assert(pos > 0)",
    "type": "statement:functioncall"
  }, {
    "id": 356,
    "text": "local nsize = pos + #str - 1",
    "type": "statement:localassign"
  }, {
    "id": 357,
    "text": "if nsize <= osize then\r\n    ffi.copy(\r\n      api.zmq_msg_data(self._private.msg, pos - 1),\r\n      str, #str\r\n    )\r\n    return true\r\n  end",
    "type": "statement:if"
  }, {
    "id": 358,
    "text": "ffi.copy(\r\n      api.zmq_msg_data(self._private.msg, pos - 1),\r\n      str, #str\r\n    )",
    "type": "statement:functioncall"
  }, {
    "id": 359,
    "text": "if osize > pos then osize = pos end",
    "type": "statement:if"
  }, {
    "id": 360,
    "text": "osize = pos",
    "type": "statement:assign"
  }, {
    "id": 361,
    "text": "if osize > 0 then\r\n    ffi.copy(\r\n      api.zmq_msg_data(msg),\r\n      api.zmq_msg_data(self._private.msg),\r\n      osize\r\n    )\r\n  end",
    "type": "statement:if"
  }, {
    "id": 362,
    "text": "ffi.copy(\r\n      api.zmq_msg_data(msg),\r\n      api.zmq_msg_data(self._private.msg),\r\n      osize\r\n    )",
    "type": "statement:functioncall"
  }, {
    "id": 363,
    "text": "ffi.copy(api.zmq_msg_data(msg, pos - 1),str)",
    "type": "statement:functioncall"
  }, {
    "id": 364,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 365,
    "text": "function Message:send(skt, flags)\r\n  assert(not self:closed())\r\n  if getmetatable(skt) == Socket then\r\n    skt = skt:handle()\r\n  end\r\n  local ret = api.zmq_msg_send(self._private.msg, skt, flags or 0)\r\n  if ret == -1 then return nil, zerror() end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 366,
    "text": "if getmetatable(skt) == Socket then\r\n    skt = skt:handle()\r\n  end",
    "type": "statement:if"
  }, {
    "id": 367,
    "text": "skt = skt:handle()",
    "type": "statement:assign"
  }, {
    "id": 368,
    "text": "local ret = api.zmq_msg_send(self._private.msg, skt, flags or 0)",
    "type": "statement:localassign"
  }, {
    "id": 369,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 370,
    "text": "function Message:send_more(skt, flags)\r\n  flags = bit.bor(flags or 0, FLAGS.ZMQ_SNDMORE)\r\n  return self:send(skt, flags)\r\nend",
    "type": "function"
  }, {
    "id": 371,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 372,
    "text": "function Message:recv(skt, flags)\r\n  assert(not self:closed())\r\n  if getmetatable(skt) == Socket then\r\n    skt = skt:handle()\r\n  end\r\n  local ret = api.zmq_msg_recv(self._private.msg, skt, flags or 0)\r\n  if ret == -1 then return nil, zerror() end\r\n  local more = api.zmq_msg_more(self._private.msg)\r\n  return self, more ~= 0\r\nend",
    "type": "function"
  }, {
    "id": 373,
    "text": "local ret = api.zmq_msg_recv(self._private.msg, skt, flags or 0)",
    "type": "statement:localassign"
  }, {
    "id": 374,
    "text": "local more = api.zmq_msg_more(self._private.msg)",
    "type": "statement:localassign"
  }, {
    "id": 375,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 376,
    "text": "function Message:more()\r\n  assert(not self:closed())\r\n  return api.zmq_msg_more(self._private.msg) ~= 0\r\nend",
    "type": "function"
  }, {
    "id": 377,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 378,
    "text": "function Message:pointer(...)\r\n  assert(not self:closed())\r\n  local ptr = api.zmq_msg_data(self._private.msg, ...)\r\n  return ptr\r\nend",
    "type": "function"
  }, {
    "id": 379,
    "text": "local ptr = api.zmq_msg_data(self._private.msg, ...)",
    "type": "statement:localassign"
  }, {
    "id": 380,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 381,
    "text": "function Message:set(option, value)\r\n  assert(not self:closed())\r\n  local ret = api.zmq_msg_set(self._private.msg, option, value)\r\n  if ret ~= -1 then return nil, zerror() end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 382,
    "text": "local ret = api.zmq_msg_set(self._private.msg, option, value)",
    "type": "statement:localassign"
  }, {
    "id": 383,
    "text": "if ret ~= -1 then return nil, zerror() end",
    "type": "statement:if"
  }, {
    "id": 384,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 385,
    "text": "function Message:get(option)\r\n  assert(not self:closed())\r\n  local ret = api.zmq_msg_get(self._private.msg, option)\r\n  if ret ~= -1 then return nil, zerror() end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 386,
    "text": "local ret = api.zmq_msg_get(self._private.msg, option)",
    "type": "statement:localassign"
  }, {
    "id": 387,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 388,
    "text": "function Message:gets(option)\r\n  assert(not self:closed())\r\n  local value = api.zmq_msg_gets(self._private.msg, option)\r\n  if not value then return nil, zerror() end\r\n  return value\r\nend",
    "type": "function"
  }, {
    "id": 389,
    "text": "local value = api.zmq_msg_gets(self._private.msg, option)",
    "type": "statement:localassign"
  }, {
    "id": 390,
    "text": "if not value then return nil, zerror() end",
    "type": "statement:if"
  }, {
    "id": 391,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 392,
    "text": "function Poller:new(n)\r\n  assert((n or 0) >= 0)\r\n\r\n  return setmetatable({\r\n    _private = {\r\n      items   = n and ffi.new(api.vla_pollitem_t, n);\r\n      size    = n or 0;\r\n      nitems  = 0;\r\n      sockets = {};\r\n    }\r\n  },self)\r\nend",
    "type": "function"
  }, {
    "id": 393,
    "text": "assert((n or 0) >= 0)",
    "type": "statement:functioncall"
  }, {
    "id": 394,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 395,
    "text": "function Poller:ensure(n)\r\n  local empty = self._private.size - self._private.nitems\r\n  if n <= empty then return true end\r\n  local new = ffi.new(api.vla_pollitem_t, self._private.size + (n - empty))\r\n  if self._private.items then\r\n    ffi.copy(new, self._private.items, ffi.sizeof(api.zmq_pollitem_t) * self._private.nitems)\r\n  end\r\n  self._private.items = new\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 396,
    "text": "local empty = self._private.size - self._private.nitems",
    "type": "statement:localassign"
  }, {
    "id": 397,
    "text": "if n <= empty then return true end",
    "type": "statement:if"
  }, {
    "id": 398,
    "text": "local new = ffi.new(api.vla_pollitem_t, self._private.size + (n - empty))",
    "type": "statement:localassign"
  }, {
    "id": 399,
    "text": "if self._private.items then\r\n    ffi.copy(new, self._private.items, ffi.sizeof(api.zmq_pollitem_t) * self._private.nitems)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 400,
    "text": "ffi.copy(new, self._private.items, ffi.sizeof(api.zmq_pollitem_t) * self._private.nitems)",
    "type": "statement:functioncall"
  }, {
    "id": 401,
    "text": "self._private.items = new",
    "type": "statement:assign"
  }, {
    "id": 402,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 403,
    "text": "local function skt2id(skt)\r\n  if type(skt) == \"number\" then\r\n    return skt\r\n  end\r\n  return api.serialize_ptr(skt:handle())\r\nend",
    "type": "function"
  }, {
    "id": 404,
    "text": "if type(skt) == \"number\" then\r\n    return skt\r\n  end",
    "type": "statement:if"
  }, {
    "id": 405,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 406,
    "text": "local function item2id(item)\r\n  if item.socket == api.NULL then\r\n    return item.fd\r\n  end\r\n  return api.serialize_ptr(item.socket)\r\nend",
    "type": "function"
  }, {
    "id": 407,
    "text": "if item.socket == api.NULL then\r\n    return item.fd\r\n  end",
    "type": "statement:if"
  }, {
    "id": 408,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 409,
    "text": "function Poller:add(skt, events, cb)\r\n  assert(type(events) == 'number')\r\n  assert(cb)\r\n  self:ensure(1)\r\n  local n = self._private.nitems\r\n  local h = skt2id(skt)\r\n  if type(skt) == \"number\" then\r\n    self._private.items[n].socket = api.NULL\r\n    self._private.items[n].fd     = skt\r\n  else\r\n    self._private.items[n].socket = skt:handle()\r\n    self._private.items[n].fd     = 0\r\n  end\r\n  self._private.items[n].events  = events\r\n  self._private.items[n].revents = 0\r\n  self._private.sockets[h] = {skt, cb, n}\r\n  self._private.nitems = n + 1\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 410,
    "text": "assert(type(events) == 'number')",
    "type": "statement:functioncall"
  }, {
    "id": 411,
    "text": "assert(cb)",
    "type": "statement:functioncall"
  }, {
    "id": 412,
    "text": "self:ensure(1)",
    "type": "statement:functioncall"
  }, {
    "id": 413,
    "text": "local n = self._private.nitems",
    "type": "statement:localassign"
  }, {
    "id": 414,
    "text": "local h = skt2id(skt)",
    "type": "statement:localassign"
  }, {
    "id": 415,
    "text": "if type(skt) == \"number\" then\r\n    self._private.items[n].socket = api.NULL\r\n    self._private.items[n].fd     = skt\r\n  else\r\n    self._private.items[n].socket = skt:handle()\r\n    self._private.items[n].fd     = 0\r\n  end",
    "type": "statement:if"
  }, {
    "id": 416,
    "text": "self._private.items[n].socket = api.NULL",
    "type": "statement:assign"
  }, {
    "id": 417,
    "text": "self._private.items[n].fd     = skt",
    "type": "statement:assign"
  }, {
    "id": 418,
    "text": "self._private.items[n].socket = skt:handle()",
    "type": "statement:assign"
  }, {
    "id": 419,
    "text": "self._private.items[n].fd     = 0",
    "type": "statement:assign"
  }, {
    "id": 420,
    "text": "self._private.items[n].events  = events",
    "type": "statement:assign"
  }, {
    "id": 421,
    "text": "self._private.items[n].revents = 0",
    "type": "statement:assign"
  }, {
    "id": 422,
    "text": "self._private.sockets[h] = {skt, cb, n}",
    "type": "statement:assign"
  }, {
    "id": 423,
    "text": "self._private.nitems = n + 1",
    "type": "statement:assign"
  }, {
    "id": 424,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 425,
    "text": "function Poller:remove(skt)\r\n  local items, nitems, sockets = self._private.items, self._private.nitems, self._private.sockets\r\n  local h = skt2id(skt)\r\n  local params = sockets[h]\r\n  if not params  then return true end\r\n\r\n  sockets[h] = nil\r\n\r\n  if nitems == 0 then return true end\r\n  local skt_no =  params[3]\r\n  assert(skt_no < nitems)\r\n  \r\n  nitems = nitems - 1\r\n  self._private.nitems = nitems\r\n\r\n  -- if we remove last socket\r\n  if skt_no == nitems then return true end\r\n\r\n  -- find last struct in array and copy it to removed item\r\n  local last_item  = items[ nitems ]\r\n  local last_param = sockets[ item2id(last_item) ]\r\n\r\n  last_param[3] = skt_no\r\n  items[ skt_no ].socket = last_item.socket\r\n  items[ skt_no ].fd     = last_item.fd\r\n  items[ skt_no ].events = last_item.events\r\n\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 426,
    "text": "local items, nitems, sockets = self._private.items, self._private.nitems, self._private.sockets",
    "type": "statement:localassign"
  }, {
    "id": 427,
    "text": "local params = sockets[h]",
    "type": "statement:localassign"
  }, {
    "id": 428,
    "text": "if not params  then return true end",
    "type": "statement:if"
  }, {
    "id": 429,
    "text": "sockets[h] = nil",
    "type": "statement:assign"
  }, {
    "id": 430,
    "text": "if nitems == 0 then return true end",
    "type": "statement:if"
  }, {
    "id": 431,
    "text": "local skt_no =  params[3]",
    "type": "statement:localassign"
  }, {
    "id": 432,
    "text": "assert(skt_no < nitems)",
    "type": "statement:functioncall"
  }, {
    "id": 433,
    "text": "nitems = nitems - 1",
    "type": "statement:assign"
  }, {
    "id": 434,
    "text": "self._private.nitems = nitems",
    "type": "statement:assign"
  }, {
    "id": 435,
    "text": "if skt_no == nitems then return true end",
    "type": "statement:if"
  }, {
    "id": 436,
    "text": "local last_item  = items[ nitems ]",
    "type": "statement:localassign"
  }, {
    "id": 437,
    "text": "local last_param = sockets[ item2id(last_item) ]",
    "type": "statement:localassign"
  }, {
    "id": 438,
    "text": "last_param[3] = skt_no",
    "type": "statement:assign"
  }, {
    "id": 439,
    "text": "items[ skt_no ].socket = last_item.socket",
    "type": "statement:assign"
  }, {
    "id": 440,
    "text": "items[ skt_no ].fd     = last_item.fd",
    "type": "statement:assign"
  }, {
    "id": 441,
    "text": "items[ skt_no ].events = last_item.events",
    "type": "statement:assign"
  }, {
    "id": 442,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 443,
    "text": "function Poller:modify(skt, events, cb)\r\n  if events ~= 0 and cb then\r\n    local h = skt2id(skt)\r\n    local params = self._private.sockets[h]\r\n    if not params then return self:add(skt, events, cb) end\r\n    self._private.items[ params[3] ].events  = events\r\n    params[2] = cb\r\n  else\r\n    self:remove(skt)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 444,
    "text": "if events ~= 0 and cb then\r\n    local h = skt2id(skt)\r\n    local params = self._private.sockets[h]\r\n    if not params then return self:add(skt, events, cb) end\r\n    self._private.items[ params[3] ].events  = events\r\n    params[2] = cb\r\n  else\r\n    self:remove(skt)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 445,
    "text": "local params = self._private.sockets[h]",
    "type": "statement:localassign"
  }, {
    "id": 446,
    "text": "if not params then return self:add(skt, events, cb) end",
    "type": "statement:if"
  }, {
    "id": 447,
    "text": "self._private.items[ params[3] ].events  = events",
    "type": "statement:assign"
  }, {
    "id": 448,
    "text": "params[2] = cb",
    "type": "statement:assign"
  }, {
    "id": 449,
    "text": "self:remove(skt)",
    "type": "statement:functioncall"
  }, {
    "id": 450,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 451,
    "text": "function Poller:count()\r\n  return self._private.nitems\r\nend",
    "type": "function"
  }, {
    "id": 452,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 453,
    "text": "function Poller:poll(timeout)\r\n  assert(type(timeout) == 'number')\r\n\r\n  local items, nitems = self._private.items, self._private.nitems\r\n  local ret = api.zmq_poll(items, nitems, timeout)\r\n  if ret == -1 then return nil, zerror() end\r\n  local n = 0\r\n  for i = nitems-1, 0, -1 do\r\n    local item = items[i]\r\n    if item.revents ~= 0 then\r\n      local params = self._private.sockets[item2id(item)]\r\n      if params then\r\n        params[2](params[1], item.revents)\r\n      end\r\n      n = n + 1\r\n    end\r\n  end\r\n  return n\r\nend",
    "type": "function"
  }, {
    "id": 454,
    "text": "assert(type(timeout) == 'number')",
    "type": "statement:functioncall"
  }, {
    "id": 455,
    "text": "local items, nitems = self._private.items, self._private.nitems",
    "type": "statement:localassign"
  }, {
    "id": 456,
    "text": "local ret = api.zmq_poll(items, nitems, timeout)",
    "type": "statement:localassign"
  }, {
    "id": 457,
    "text": "local n = 0",
    "type": "statement:localassign"
  }, {
    "id": 458,
    "text": "for i = nitems-1, 0, -1 do\r\n    local item = items[i]\r\n    if item.revents ~= 0 then\r\n      local params = self._private.sockets[item2id(item)]\r\n      if params then\r\n        params[2](params[1], item.revents)\r\n      end\r\n      n = n + 1\r\n    end\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 459,
    "text": "local item = items[i]",
    "type": "statement:localassign"
  }, {
    "id": 460,
    "text": "if item.revents ~= 0 then\r\n      local params = self._private.sockets[item2id(item)]\r\n      if params then\r\n        params[2](params[1], item.revents)\r\n      end\r\n      n = n + 1\r\n    end",
    "type": "statement:if"
  }, {
    "id": 461,
    "text": "local params = self._private.sockets[item2id(item)]",
    "type": "statement:localassign"
  }, {
    "id": 462,
    "text": "if params then\r\n        params[2](params[1], item.revents)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 463,
    "text": "params[2](params[1], item.revents)",
    "type": "statement:functioncall"
  }, {
    "id": 464,
    "text": "n = n + 1",
    "type": "statement:assign"
  }, {
    "id": 465,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 466,
    "text": "function Poller:start()\r\n  local status, err\r\n  self._private.is_running = true\r\n  while self._private.is_running do\r\n    status, err = self:poll(-1)\r\n    if not status then\r\n      return nil, err\r\n    end\r\n  end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 467,
    "text": "local status, err",
    "type": "statement:localassign"
  }, {
    "id": 468,
    "text": "self._private.is_running = true",
    "type": "statement:assign"
  }, {
    "id": 469,
    "text": "while self._private.is_running do\r\n    status, err = self:poll(-1)\r\n    if not status then\r\n      return nil, err\r\n    end\r\n  end",
    "type": "statement:while"
  }, {
    "id": 470,
    "text": "status, err = self:poll(-1)",
    "type": "statement:assign"
  }, {
    "id": 471,
    "text": "if not status then\r\n      return nil, err\r\n    end",
    "type": "statement:if"
  }, {
    "id": 472,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 473,
    "text": "function Poller:stop()\r\n  self._private.is_running = nil\r\nend",
    "type": "function"
  }, {
    "id": 474,
    "text": "self._private.is_running = nil",
    "type": "statement:assign"
  }, {
    "id": 475,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 476,
    "text": "function StopWatch:new()\r\n  return setmetatable({\r\n    _private = {}\r\n  }, self)\r\nend",
    "type": "function"
  }, {
    "id": 477,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 478,
    "text": "function StopWatch:start()\r\n  assert(not self._private.timer, \"timer alrady started\")\r\n  self._private.timer = api.zmq_stopwatch_start()\r\n  return self\r\nend",
    "type": "function"
  }, {
    "id": 479,
    "text": "assert(not self._private.timer, \"timer alrady started\")",
    "type": "statement:functioncall"
  }, {
    "id": 480,
    "text": "self._private.timer = api.zmq_stopwatch_start()",
    "type": "statement:assign"
  }, {
    "id": 481,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 482,
    "text": "function StopWatch:stop()\r\n  assert(self._private.timer, \"timer not started\")\r\n  local elapsed = api.zmq_stopwatch_stop(self._private.timer)\r\n  self._private.timer = nil\r\n  return elapsed\r\nend",
    "type": "function"
  }, {
    "id": 483,
    "text": "assert(self._private.timer, \"timer not started\")",
    "type": "statement:functioncall"
  }, {
    "id": 484,
    "text": "local elapsed = api.zmq_stopwatch_stop(self._private.timer)",
    "type": "statement:localassign"
  }, {
    "id": 485,
    "text": "self._private.timer = nil",
    "type": "statement:assign"
  }, {
    "id": 486,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 487,
    "text": "function StopWatch:close()\r\n  if self._private.timer then\r\n    api.zmq_stopwatch_stop(self._private.timer)\r\n    self._private.timer = nil\r\n  end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 488,
    "text": "if self._private.timer then\r\n    api.zmq_stopwatch_stop(self._private.timer)\r\n    self._private.timer = nil\r\n  end",
    "type": "statement:if"
  }, {
    "id": 489,
    "text": "api.zmq_stopwatch_stop(self._private.timer)",
    "type": "statement:functioncall"
  }, {
    "id": 490,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 491,
    "text": "function zmq.version(unpack)\r\n  local mj,mn,pt = api.zmq_version()\r\n  if mj then\r\n    if unpack then return mj,mn,pt end\r\n    return {mj,mn,pt}\r\n  end\r\n  return nil, zerror()\r\nend",
    "type": "function"
  }, {
    "id": 492,
    "text": "local mj,mn,pt = api.zmq_version()",
    "type": "statement:localassign"
  }, {
    "id": 493,
    "text": "if mj then\r\n    if unpack then return mj,mn,pt end\r\n    return {mj,mn,pt}\r\n  end",
    "type": "statement:if"
  }, {
    "id": 494,
    "text": "if unpack then return mj,mn,pt end",
    "type": "statement:if"
  }, {
    "id": 495,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 496,
    "text": "function zmq.context(opt)\r\n  return Context:new(opt)\r\nend",
    "type": "function"
  }, {
    "id": 497,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 498,
    "text": "function zmq.init(n)\r\n  return zmq.context{io_threads = n}\r\nend",
    "type": "function"
  }, {
    "id": 499,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 500,
    "text": "function zmq.init_ctx(ctx)\r\n  return Context:new(ctx)\r\nend",
    "type": "function"
  }, {
    "id": 501,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 502,
    "text": "function zmq.init_socket(skt)\r\n  local o = setmetatable({\r\n    _private = {\r\n      dont_destroy = true;\r\n      skt          = api.deserialize_ptr(skt);\r\n    }\r\n  },Socket)\r\n\r\n  return o\r\nend",
    "type": "function"
  }, {
    "id": 503,
    "text": "local o = setmetatable({\r\n    _private = {\r\n      dont_destroy = true;\r\n      skt          = api.deserialize_ptr(skt);\r\n    }\r\n  },Socket)",
    "type": "statement:localassign"
  }, {
    "id": 504,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 505,
    "text": "function zmq.assert(...)\r\n  if ... then return ... end\r\n  local err = select(2, ...)\r\n  if getmetatable(err) == Error then error(tostring(err), 2) end\r\n  if type(err) == 'number'      then error(zmq.strerror(err), 2) end\r\n  return error(err or \"assertion failed!\", 2)\r\nend",
    "type": "function"
  }, {
    "id": 506,
    "text": "if ... then return ... end",
    "type": "statement:if"
  }, {
    "id": 507,
    "text": "local err = select(2, ...)",
    "type": "statement:localassign"
  }, {
    "id": 508,
    "text": "if getmetatable(err) == Error then error(tostring(err), 2) end",
    "type": "statement:if"
  }, {
    "id": 509,
    "text": "error(tostring(err), 2)",
    "type": "statement:functioncall"
  }, {
    "id": 510,
    "text": "if type(err) == 'number'      then error(zmq.strerror(err), 2) end",
    "type": "statement:if"
  }, {
    "id": 511,
    "text": "error(zmq.strerror(err), 2)",
    "type": "statement:functioncall"
  }, {
    "id": 512,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 513,
    "text": "function zmq.error(no)\r\n  return Error:new(no)\r\nend",
    "type": "function"
  }, {
    "id": 514,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 515,
    "text": "function zmq.strerror(no)\r\n  return string.format(\"[%s] %s (%d)\", \r\n    api.zmq_mnemoerror(no),\r\n    api.zmq_strerror(no),\r\n    no\r\n  )\r\nend",
    "type": "function"
  }, {
    "id": 516,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 517,
    "text": "function zmq.msg_init()          return Message:new()     end",
    "type": "function"
  }, {
    "id": 518,
    "text": "function zmq.msg_init_size(size) return Message:new(size) end",
    "type": "function"
  }, {
    "id": 519,
    "text": "function zmq.msg_init_data(str)  return Message:new(str)  end",
    "type": "function"
  }, {
    "id": 520,
    "text": "function zmq.device(dtype, frontend, backend)\r\n  local ret = api.zmq_device(dtype, frontend:handle(), backend:handle())\r\n  if ret == -1 then return nil, zerror() end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 521,
    "text": "local ret = api.zmq_device(dtype, frontend:handle(), backend:handle())",
    "type": "statement:localassign"
  }, {
    "id": 522,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 523,
    "text": "function zmq.proxy(frontend, backend, capture)\r\n  capture = capture and capture:handle() or api.NULL\r\n  local ret = api.zmq_proxy(frontend:handle(), backend:handle(), capture)\r\n  if ret == -1 then return nil, zerror() end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 524,
    "text": "capture = capture and capture:handle() or api.NULL",
    "type": "statement:assign"
  }, {
    "id": 525,
    "text": "local ret = api.zmq_proxy(frontend:handle(), backend:handle(), capture)",
    "type": "statement:localassign"
  }, {
    "id": 526,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 527,
    "text": "function zmq.proxy_steerable(frontend, backend, capture, control)\r\n  capture = capture and capture:handle() or api.NULL\r\n  control = control and control:handle() or api.NULL\r\n  local ret = api.zmq_proxy_steerable(frontend:handle(), backend:handle(), capture, control)\r\n  if ret == -1 then return nil, zerror() end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 528,
    "text": "control = control and control:handle() or api.NULL",
    "type": "statement:assign"
  }, {
    "id": 529,
    "text": "local ret = api.zmq_proxy_steerable(frontend:handle(), backend:handle(), capture, control)",
    "type": "statement:localassign"
  }, {
    "id": 530,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 531,
    "text": "function zmq.curve_keypair(...)\r\n  local pub, sec = api.zmq_curve_keypair(...)\r\n  if pub == -1 then return nil, zerror() end\r\n  return pub, sec\r\nend",
    "type": "function"
  }, {
    "id": 532,
    "text": "local pub, sec = api.zmq_curve_keypair(...)",
    "type": "statement:localassign"
  }, {
    "id": 533,
    "text": "if pub == -1 then return nil, zerror() end",
    "type": "statement:if"
  }, {
    "id": 534,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 535,
    "text": "function(p)\r\n    return (string.format(\"%.2x\", string.byte(p)))\r\n  end",
    "type": "function"
  }, {
    "id": 536,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 537,
    "text": "function() o:destroy() end",
    "type": "function"
  }, {
    "id": 538,
    "text": "function(self, addr)\r\n    assert(not self:closed())\r\n    if type(addr) == 'string' then\r\n      local ret = bind(self._private.skt, addr)\r\n      if -1 == ret then return nil, zerror() end\r\n      return true\r\n    end\r\n    assert(type(addr) == 'table')\r\n    for _, a in ipairs(addr) do\r\n      local ret = bind(self._private.skt, a)\r\n      if -1 == ret then return nil, zerror(), a end\r\n    end\r\n    return true\r\n  end",
    "type": "function"
  }, {
    "id": 539,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 540,
    "text": "function(self, option)\r\n    assert(not self:closed())\r\n    local val = getopt(self._private.skt, option)\r\n    if not val then return nil, zerror() end\r\n    return val\r\n  end",
    "type": "function"
  }, {
    "id": 541,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 542,
    "text": "function(self, option, value)\r\n    assert(not self:closed())\r\n    local ret = setopt(self._private.skt, option, value)\r\n    if -1 == ret then return nil, zerror() end\r\n    return true\r\n  end",
    "type": "function"
  }, {
    "id": 543,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 544,
    "text": "function (self, ...)\r\n    assert(not self:closed())\r\n    if select(\"#\", ...) > 0 then assert((...)) end\r\n    local msg = ...\r\n    if not msg then\r\n      msg = move(self._private.msg)\r\n      if not msg then return nil, zerror() end\r\n      msg = Message:wrap(msg)\r\n    elseif getmetatable(msg) == Message then\r\n      if not move(self._private.msg, msg._private.msg) then\r\n        return nil, zerror()\r\n      end\r\n      msg = self\r\n    else\r\n      if not move(self._private.msg, msg) then\r\n        return nil, zerror()\r\n      end\r\n      msg = self\r\n    end\r\n    return msg\r\n  end",
    "type": "function"
  }, {
    "id": 545,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 546,
    "text": "function(n) return Poller:new(n) end",
    "type": "function"
  }, {
    "id": 547,
    "text": "function() return StopWatch:new() end",
    "type": "function"
  }, {
    "id": 548,
    "text": "",
    "type": "function container"
  }, {
    "id": 549,
    "text": "zmq_msg_more",
    "type": "global function"
  }, {
    "id": 550,
    "text": "zmq_msg_close",
    "type": "global function"
  }, {
    "id": 551,
    "text": "copy",
    "type": "global function"
  }, {
    "id": 552,
    "text": "zmq_send",
    "type": "global function"
  }, {
    "id": 553,
    "text": "zmq_msg_init_string",
    "type": "global function"
  }, {
    "id": 554,
    "text": "zmq_socket",
    "type": "global function"
  }, {
    "id": 555,
    "text": "zmq_msg_recv",
    "type": "global function"
  }, {
    "id": 556,
    "text": "zmq_device",
    "type": "global function"
  }, {
    "id": 557,
    "text": "serialize_ptr",
    "type": "global function"
  }, {
    "id": 558,
    "text": "zmq_proxy",
    "type": "global function"
  }, {
    "id": 559,
    "text": "zmq_msg_size",
    "type": "global function"
  }, {
    "id": 560,
    "text": "zmq_msg_send",
    "type": "global function"
  }, {
    "id": 561,
    "text": "cdef",
    "type": "global function"
  }, {
    "id": 562,
    "text": "zmq_ctx_new",
    "type": "global function"
  }, {
    "id": 563,
    "text": "zmq_ctx_term",
    "type": "global function"
  }, {
    "id": 564,
    "text": "zmq_recv",
    "type": "global function"
  }, {
    "id": 565,
    "text": "string",
    "type": "global function"
  }, {
    "id": 566,
    "text": "zmq_recv_event",
    "type": "global function"
  }, {
    "id": 567,
    "text": "format",
    "type": "global function"
  }, {
    "id": 568,
    "text": "new",
    "type": "global function"
  }, {
    "id": 569,
    "text": "cast",
    "type": "global function"
  }, {
    "id": 570,
    "text": "zmq_msg_set",
    "type": "global function"
  }, {
    "id": 571,
    "text": "zmq_version",
    "type": "global function"
  }, {
    "id": 572,
    "text": "zmq_close",
    "type": "global function"
  }, {
    "id": 573,
    "text": "zmq_curve_keypair",
    "type": "global function"
  }, {
    "id": 574,
    "text": "zmq_ctx_shutdown",
    "type": "global function"
  }, {
    "id": 575,
    "text": "zmq_stopwatch_start",
    "type": "global function"
  }, {
    "id": 576,
    "text": "zmq_ctx_set",
    "type": "global function"
  }, {
    "id": 577,
    "text": "gc",
    "type": "global function"
  }, {
    "id": 578,
    "text": "zmq_strerror",
    "type": "global function"
  }, {
    "id": 579,
    "text": "zmq_msg_data",
    "type": "global function"
  }, {
    "id": 580,
    "text": "zmq_msg_init",
    "type": "global function"
  }, {
    "id": 581,
    "text": "zmq_msg_get_data",
    "type": "global function"
  }, {
    "id": 582,
    "text": "zmq_stopwatch_stop",
    "type": "global function"
  }, {
    "id": 583,
    "text": "zmq_poll",
    "type": "global function"
  }, {
    "id": 584,
    "text": "zmq_msg_gets",
    "type": "global function"
  }, {
    "id": 585,
    "text": "zmq_skt_setopt_int",
    "type": "global function"
  }, {
    "id": 586,
    "text": "zmq_socket_monitor",
    "type": "global function"
  }, {
    "id": 587,
    "text": "zmq_msg_get",
    "type": "global function"
  }, {
    "id": 588,
    "text": "typeof",
    "type": "global function"
  }, {
    "id": 589,
    "text": "zmq_ctx_get",
    "type": "global function"
  }, {
    "id": 590,
    "text": "zmq_errno",
    "type": "global function"
  }, {
    "id": 591,
    "text": "zmq_mnemoerror",
    "type": "global function"
  }, {
    "id": 592,
    "text": "sizeof",
    "type": "global function"
  }, {
    "id": 593,
    "text": "zmq_proxy_steerable",
    "type": "global function"
  }, {
    "id": 594,
    "text": "deserialize_ptr",
    "type": "global function"
  }, {
    "id": 595,
    "text": "zmq_msg_init_size",
    "type": "global function"
  }, {
    "id": 596,
    "text": "setopt",
    "type": "global function"
  }, {
    "id": 597,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 598,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 599,
    "text": "fn",
    "type": "global function"
  }, {
    "id": 600,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 601,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 602,
    "text": "self[getname]",
    "type": "global function"
  }, {
    "id": 603,
    "text": "type",
    "type": "global function"
  }, {
    "id": 604,
    "text": "params[2]",
    "type": "global function"
  }, {
    "id": 605,
    "text": "select",
    "type": "global function"
  }, {
    "id": 606,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 607,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 608,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 609,
    "text": "move",
    "type": "global function"
  }, {
    "id": 610,
    "text": "bind",
    "type": "global function"
  }, {
    "id": 611,
    "text": "require",
    "type": "global function"
  }, {
    "id": 612,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 613,
    "text": "error",
    "type": "global function"
  }, {
    "id": 614,
    "text": "getopt",
    "type": "global function"
  }, {
    "id": 615,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 616,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 617,
    "text": "band",
    "type": "global function"
  }, {
    "id": 618,
    "text": "bor",
    "type": "global function"
  }, {
    "id": 619,
    "text": "self[setname]",
    "type": "global function"
  }, {
    "id": 620,
    "text": "byte",
    "type": "global function"
  }, {
    "id": 621,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 622,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 623,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 624,
    "text": "",
    "type": "local variable"
  }, {
    "id": 625,
    "text": "",
    "type": "variable container"
  }, {
    "id": 626,
    "text": "",
    "type": "require container"
  }, {
    "id": 627,
    "text": "",
    "type": "local variable"
  }, {
    "id": 628,
    "text": "",
    "type": "string"
  }, {
    "id": 629,
    "text": "",
    "type": "local variable"
  }, {
    "id": 630,
    "text": "",
    "type": "local variable"
  }, {
    "id": 631,
    "text": "",
    "type": "n/a"
  }, {
    "id": 632,
    "text": "",
    "type": "local variable"
  }, {
    "id": 633,
    "text": "",
    "type": "local variable"
  }, {
    "id": 634,
    "text": "",
    "type": "n/a"
  }, {
    "id": 635,
    "text": "",
    "type": "local variable"
  }, {
    "id": 636,
    "text": "",
    "type": "n/a"
  }, {
    "id": 637,
    "text": "",
    "type": "local variable"
  }, {
    "id": 638,
    "text": "",
    "type": "local variable"
  }, {
    "id": 639,
    "text": "",
    "type": "local variable"
  }, {
    "id": 640,
    "text": "",
    "type": "n/a"
  }, {
    "id": 641,
    "text": "",
    "type": "local variable"
  }, {
    "id": 642,
    "text": "",
    "type": "n/a"
  }, {
    "id": 643,
    "text": "",
    "type": "local variable"
  }, {
    "id": 644,
    "text": "",
    "type": "n/a"
  }, {
    "id": 645,
    "text": "",
    "type": "local variable"
  }, {
    "id": 646,
    "text": "",
    "type": "n/a"
  }, {
    "id": 647,
    "text": "",
    "type": "local variable"
  }, {
    "id": 648,
    "text": "",
    "type": "n/a"
  }, {
    "id": 649,
    "text": "",
    "type": "local variable"
  }, {
    "id": 650,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 651,
    "text": "",
    "type": "local variable"
  }, {
    "id": 652,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 653,
    "text": "",
    "type": "local variable"
  }, {
    "id": 654,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 655,
    "text": "",
    "type": "local variable"
  }, {
    "id": 656,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 657,
    "text": "",
    "type": "local variable"
  }, {
    "id": 658,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 659,
    "text": "",
    "type": "local variable"
  }, {
    "id": 660,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 661,
    "text": "",
    "type": "local variable"
  }, {
    "id": 662,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 663,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 664,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 665,
    "text": "",
    "type": "interface container"
  }, {
    "id": 666,
    "text": "",
    "type": "interface"
  } ]
}