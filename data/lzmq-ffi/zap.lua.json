{
  "_filename": "zap.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lzmq-ffi/examples/zap.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 8
  }, {
    "from": 4,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 7
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 25,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 29
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "calls",
    "to": 14
  }, {
    "from": 37,
    "label": "calls",
    "to": 40
  }, {
    "from": 37,
    "label": "calls",
    "to": 40
  }, {
    "from": 37,
    "label": "calls",
    "to": 40
  }, {
    "from": 37,
    "label": "calls",
    "to": 4
  }, {
    "from": 37,
    "label": "calls",
    "to": 41
  }, {
    "from": 37,
    "label": "calls",
    "to": 41
  }, {
    "from": 37,
    "label": "calls",
    "to": 39
  }, {
    "from": 37,
    "label": "calls",
    "to": 38
  }, {
    "from": 37,
    "label": "calls",
    "to": 38
  }, {
    "from": 37,
    "label": "calls",
    "to": 38
  }, {
    "from": 37,
    "label": "calls",
    "to": 38
  }, {
    "from": 37,
    "label": "calls",
    "to": 38
  }, {
    "from": 37,
    "label": "calls",
    "to": 38
  }, {
    "from": 37,
    "label": "calls",
    "to": 38
  }, {
    "from": 1,
    "label": "contains",
    "to": 37
  }, {
    "from": 37,
    "label": "declares",
    "to": 4
  }, {
    "from": 37,
    "label": "declares",
    "to": 14
  }, {
    "from": 37,
    "label": "declares",
    "to": 16
  }, {
    "from": 37,
    "label": "declares",
    "to": 21
  }, {
    "from": 37,
    "label": "declares",
    "to": 25
  }, {
    "from": 37,
    "label": "declares",
    "to": 31
  }, {
    "from": 37,
    "label": "declares",
    "to": 35
  }, {
    "from": 1,
    "label": "contains",
    "to": 42
  }, {
    "from": 1,
    "label": "contains",
    "to": 43
  }, {
    "from": 42,
    "label": "initializes",
    "to": 44
  }, {
    "from": 44,
    "label": "assigns",
    "to": 45
  }, {
    "from": 42,
    "label": "initializes",
    "to": 46
  }, {
    "from": 46,
    "label": "assigns",
    "to": 47
  }, {
    "from": 43,
    "label": "initializes",
    "to": 48
  }, {
    "from": 48,
    "label": "requires",
    "to": 2
  }, {
    "from": 43,
    "label": "initializes",
    "to": 49
  }, {
    "from": 49,
    "label": "requires",
    "to": 3
  }, {
    "from": 33,
    "label": "hasArgument",
    "to": 25
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "zap",
    "type": "module"
  }, {
    "id": 2,
    "text": "lzmq",
    "type": "module"
  }, {
    "id": 3,
    "text": "loop",
    "type": "module"
  }, {
    "id": 4,
    "text": "local function recv_zap(sok)\r\n  local msg, err = sok:recv_all()\r\n  if not msg then return nil, err end\r\n  local req = {\r\n    version    = msg[1]; -- Version number, must be \"1.0\"\r\n    sequence   = msg[2]; -- Sequence number of request\r\n    domain     = msg[3]; -- Server socket domain\r\n    address    = msg[4]; -- Client IP address\r\n    identity   = msg[5]; -- Server socket idenntity\r\n    mechanism  = msg[6]; -- Security mechansim\r\n  }\r\n  if req.mechanism == \"PLAIN\" then\r\n    req.username = msg[7];   -- PLAIN user name\r\n    req.password = msg[8];   -- PLAIN password, in clear text\r\n  elseif req.mechanism == \"CURVE\" then\r\n    req.client_key = msg[7]; -- CURVE client public key\r\n  end\r\n  return req\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "local msg, err = sok:recv_all()",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "if not msg then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 8,
    "text": "local req = {\r\n    version    = msg[1]; -- Version number, must be \"1.0\"\r\n    sequence   = msg[2]; -- Sequence number of request\r\n    domain     = msg[3]; -- Server socket domain\r\n    address    = msg[4]; -- Client IP address\r\n    identity   = msg[5]; -- Server socket idenntity\r\n    mechanism  = msg[6]; -- Security mechansim\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "if req.mechanism == \"PLAIN\" then\r\n    req.username = msg[7];   -- PLAIN user name\r\n    req.password = msg[8];   -- PLAIN password, in clear text\r\n  elseif req.mechanism == \"CURVE\" then\r\n    req.client_key = msg[7]; -- CURVE client public key\r\n  end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "req.username = msg[7]",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "req.password = msg[8]",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "req.client_key = msg[7]",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "local function send_zap(sok, req, status, text, user, meta)\r\n  return sok:sendx(req.version, req.sequence, status, text, user or \"\", meta or \"\")\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function(sok)\r\n  local req = zmq.assert(recv_zap(sok))\r\n  print(\"Accept :\", req.address)\r\n  -- accept all connections\r\n  zmq.assert(send_zap(sok, req, \"200\", \"welcome\")) \r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "local req = zmq.assert(recv_zap(sok))",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "print(\"Accept :\", req.address)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "zmq.assert(send_zap(sok, req, \"200\", \"welcome\"))",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function(sok)\r\n  print(\"SERVER: \", (zmq.assert(sok:recv())))\r\n  sok:send(\", world!\")\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "print(\"SERVER: \", (zmq.assert(sok:recv())))",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "sok:send(\", world!\")",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function(sok, ev)\r\n    if ev == zmq.POLLOUT then sok:send(\"Hello\")\r\n    else \r\n      print(\"CLIENT: \", (zmq.assert(sok:recv())))\r\n      loop:interrupt()\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 26,
    "text": "if ev == zmq.POLLOUT then sok:send(\"Hello\")\r\n    else \r\n      print(\"CLIENT: \", (zmq.assert(sok:recv())))\r\n      loop:interrupt()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "sok:send(\"Hello\")",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "print(\"CLIENT: \", (zmq.assert(sok:recv())))",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "loop:interrupt()",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function()\r\n  -- try connect to server\r\n  local client = zmq.assert(loop:create_socket(zmq.REQ, {\r\n    connect = \"tcp://127.0.0.1:9000\"\r\n  }))\r\n  loop:add_socket(client, zmq.POLLOUT + zmq.POLLIN, function(sok, ev)\r\n    if ev == zmq.POLLOUT then sok:send(\"Hello\")\r\n    else \r\n      print(\"CLIENT: \", (zmq.assert(sok:recv())))\r\n      loop:interrupt()\r\n    end\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "local client = zmq.assert(loop:create_socket(zmq.REQ, {\r\n    connect = \"tcp://127.0.0.1:9000\"\r\n  }))",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "loop:add_socket(client, zmq.POLLOUT + zmq.POLLIN, function(sok, ev)\r\n    if ev == zmq.POLLOUT then sok:send(\"Hello\")\r\n    else \r\n      print(\"CLIENT: \", (zmq.assert(sok:recv())))\r\n      loop:interrupt()\r\n    end\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function()\r\n  loop:interrupt()\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "",
    "type": "function container"
  }, {
    "id": 38,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 39,
    "text": "new",
    "type": "global function"
  }, {
    "id": 40,
    "text": "print",
    "type": "global function"
  }, {
    "id": 41,
    "text": "require",
    "type": "global function"
  }, {
    "id": 42,
    "text": "",
    "type": "variable container"
  }, {
    "id": 43,
    "text": "",
    "type": "require container"
  }, {
    "id": 44,
    "text": "",
    "type": "local variable"
  }, {
    "id": 45,
    "text": "",
    "type": "n/a"
  }, {
    "id": 46,
    "text": "",
    "type": "local variable"
  }, {
    "id": 47,
    "text": "",
    "type": "n/a"
  }, {
    "id": 48,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 49,
    "text": "",
    "type": "require local variable"
  } ]
}