{
  "_filename": "api.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lzmq-ffi/src/lua/lzmq/ffi/api.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 3,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 4
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 7
  }, {
    "from": 13,
    "label": "has",
    "to": 8
  }, {
    "from": 12,
    "label": "has",
    "to": 9
  }, {
    "from": 12,
    "label": "has",
    "to": 10
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 9
  }, {
    "from": 16,
    "label": "has",
    "to": 9
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 9
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 9
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 9
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 23,
    "label": "has",
    "to": 9
  }, {
    "from": 23,
    "label": "has",
    "to": 27
  }, {
    "from": 23,
    "label": "has",
    "to": 9
  }, {
    "from": 23,
    "label": "has",
    "to": 28
  }, {
    "from": 23,
    "label": "has",
    "to": 9
  }, {
    "from": 23,
    "label": "has",
    "to": 9
  }, {
    "from": 23,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 9
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 9
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 9
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 37,
    "label": "has",
    "to": 9
  }, {
    "from": 37,
    "label": "has",
    "to": 41
  }, {
    "from": 37,
    "label": "has",
    "to": 9
  }, {
    "from": 37,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 9
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 43,
    "label": "has",
    "to": 48
  }, {
    "from": 43,
    "label": "has",
    "to": 9
  }, {
    "from": 43,
    "label": "has",
    "to": 9
  }, {
    "from": 43,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 9
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 9
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 9
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 9
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 9
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 9
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 63,
    "label": "has",
    "to": 9
  }, {
    "from": 63,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 9
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 9
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 9
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 9
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 78,
    "label": "has",
    "to": 9
  }, {
    "from": 78,
    "label": "has",
    "to": 81
  }, {
    "from": 78,
    "label": "has",
    "to": 9
  }, {
    "from": 78,
    "label": "has",
    "to": 82
  }, {
    "from": 83,
    "label": "has",
    "to": 9
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 9
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 85,
    "label": "has",
    "to": 9
  }, {
    "from": 85,
    "label": "has",
    "to": 88
  }, {
    "from": 89,
    "label": "has",
    "to": 9
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 89,
    "label": "has",
    "to": 92
  }, {
    "from": 89,
    "label": "has",
    "to": 9
  }, {
    "from": 89,
    "label": "has",
    "to": 9
  }, {
    "from": 89,
    "label": "has",
    "to": 93
  }, {
    "from": 94,
    "label": "has",
    "to": 9
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 96,
    "label": "has",
    "to": 99
  }, {
    "from": 96,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 96,
    "label": "has",
    "to": 9
  }, {
    "from": 96,
    "label": "has",
    "to": 9
  }, {
    "from": 96,
    "label": "has",
    "to": 9
  }, {
    "from": 96,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 9
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 105,
    "label": "has",
    "to": 9
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 107,
    "label": "has",
    "to": 9
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 109,
    "label": "has",
    "to": 9
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 111,
    "label": "has",
    "to": 9
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 113,
    "label": "has",
    "to": 115
  }, {
    "from": 113,
    "label": "has",
    "to": 116
  }, {
    "from": 113,
    "label": "has",
    "to": 9
  }, {
    "from": 113,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 113,
    "label": "has",
    "to": 9
  }, {
    "from": 113,
    "label": "has",
    "to": 119
  }, {
    "from": 120,
    "label": "has",
    "to": 9
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 122,
    "label": "has",
    "to": 9
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 124,
    "label": "has",
    "to": 9
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 126,
    "label": "has",
    "to": 128
  }, {
    "from": 126,
    "label": "has",
    "to": 9
  }, {
    "from": 126,
    "label": "has",
    "to": 9
  }, {
    "from": 126,
    "label": "has",
    "to": 129
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 130,
    "label": "has",
    "to": 133
  }, {
    "from": 130,
    "label": "has",
    "to": 134
  }, {
    "from": 130,
    "label": "has",
    "to": 9
  }, {
    "from": 130,
    "label": "has",
    "to": 9
  }, {
    "from": 130,
    "label": "has",
    "to": 135
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 136,
    "label": "has",
    "to": 138
  }, {
    "from": 136,
    "label": "has",
    "to": 139
  }, {
    "from": 136,
    "label": "has",
    "to": 9
  }, {
    "from": 136,
    "label": "has",
    "to": 140
  }, {
    "from": 136,
    "label": "has",
    "to": 9
  }, {
    "from": 136,
    "label": "has",
    "to": 141
  }, {
    "from": 142,
    "label": "has",
    "to": 9
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 144,
    "label": "has",
    "to": 146
  }, {
    "from": 147,
    "label": "has",
    "to": 9
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 147,
    "label": "has",
    "to": 149
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 149,
    "label": "has",
    "to": 151
  }, {
    "from": 149,
    "label": "has",
    "to": 152
  }, {
    "from": 147,
    "label": "has",
    "to": 9
  }, {
    "from": 147,
    "label": "has",
    "to": 153
  }, {
    "from": 147,
    "label": "has",
    "to": 154
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 147,
    "label": "has",
    "to": 9
  }, {
    "from": 147,
    "label": "has",
    "to": 9
  }, {
    "from": 147,
    "label": "has",
    "to": 157
  }, {
    "from": 158,
    "label": "has",
    "to": 159
  }, {
    "from": 158,
    "label": "has",
    "to": 160
  }, {
    "from": 161,
    "label": "has",
    "to": 9
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 163,
    "label": "has",
    "to": 164
  }, {
    "from": 163,
    "label": "has",
    "to": 165
  }, {
    "from": 163,
    "label": "has",
    "to": 9
  }, {
    "from": 163,
    "label": "has",
    "to": 166
  }, {
    "from": 167,
    "label": "has",
    "to": 9
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 169,
    "label": "has",
    "to": 9
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 171,
    "label": "has",
    "to": 9
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 173,
    "label": "has",
    "to": 9
  }, {
    "from": 173,
    "label": "has",
    "to": 174
  }, {
    "from": 175,
    "label": "has",
    "to": 9
  }, {
    "from": 175,
    "label": "has",
    "to": 176
  }, {
    "from": 177,
    "label": "has",
    "to": 178
  }, {
    "from": 177,
    "label": "has",
    "to": 179
  }, {
    "from": 177,
    "label": "has",
    "to": 9
  }, {
    "from": 177,
    "label": "has",
    "to": 9
  }, {
    "from": 177,
    "label": "has",
    "to": 180
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 182,
    "label": "has",
    "to": 183
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 181,
    "label": "has",
    "to": 9
  }, {
    "from": 181,
    "label": "has",
    "to": 9
  }, {
    "from": 181,
    "label": "has",
    "to": 185
  }, {
    "from": 186,
    "label": "has",
    "to": 187
  }, {
    "from": 186,
    "label": "has",
    "to": 188
  }, {
    "from": 186,
    "label": "has",
    "to": 189
  }, {
    "from": 186,
    "label": "has",
    "to": 190
  }, {
    "from": 190,
    "label": "has",
    "to": 191
  }, {
    "from": 186,
    "label": "has",
    "to": 9
  }, {
    "from": 186,
    "label": "has",
    "to": 192
  }, {
    "from": 193,
    "label": "has",
    "to": 194
  }, {
    "from": 193,
    "label": "has",
    "to": 188
  }, {
    "from": 193,
    "label": "has",
    "to": 195
  }, {
    "from": 193,
    "label": "has",
    "to": 196
  }, {
    "from": 196,
    "label": "has",
    "to": 197
  }, {
    "from": 193,
    "label": "has",
    "to": 9
  }, {
    "from": 193,
    "label": "has",
    "to": 198
  }, {
    "from": 199,
    "label": "has",
    "to": 200
  }, {
    "from": 199,
    "label": "has",
    "to": 201
  }, {
    "from": 199,
    "label": "has",
    "to": 202
  }, {
    "from": 199,
    "label": "has",
    "to": 203
  }, {
    "from": 199,
    "label": "has",
    "to": 9
  }, {
    "from": 199,
    "label": "has",
    "to": 204
  }, {
    "from": 199,
    "label": "has",
    "to": 9
  }, {
    "from": 199,
    "label": "has",
    "to": 205
  }, {
    "from": 199,
    "label": "has",
    "to": 206
  }, {
    "from": 199,
    "label": "has",
    "to": 207
  }, {
    "from": 199,
    "label": "has",
    "to": 208
  }, {
    "from": 199,
    "label": "has",
    "to": 9
  }, {
    "from": 199,
    "label": "has",
    "to": 209
  }, {
    "from": 210,
    "label": "has",
    "to": 211
  }, {
    "from": 210,
    "label": "has",
    "to": 212
  }, {
    "from": 210,
    "label": "has",
    "to": 9
  }, {
    "from": 210,
    "label": "has",
    "to": 213
  }, {
    "from": 210,
    "label": "has",
    "to": 214
  }, {
    "from": 214,
    "label": "has",
    "to": 215
  }, {
    "from": 210,
    "label": "has",
    "to": 9
  }, {
    "from": 210,
    "label": "has",
    "to": 216
  }, {
    "from": 210,
    "label": "has",
    "to": 217
  }, {
    "from": 210,
    "label": "has",
    "to": 218
  }, {
    "from": 210,
    "label": "has",
    "to": 219
  }, {
    "from": 210,
    "label": "has",
    "to": 220
  }, {
    "from": 220,
    "label": "has",
    "to": 221
  }, {
    "from": 210,
    "label": "has",
    "to": 215
  }, {
    "from": 210,
    "label": "has",
    "to": 9
  }, {
    "from": 210,
    "label": "has",
    "to": 222
  }, {
    "from": 223,
    "label": "has",
    "to": 211
  }, {
    "from": 223,
    "label": "has",
    "to": 212
  }, {
    "from": 223,
    "label": "has",
    "to": 9
  }, {
    "from": 223,
    "label": "has",
    "to": 213
  }, {
    "from": 223,
    "label": "has",
    "to": 214
  }, {
    "from": 214,
    "label": "has",
    "to": 215
  }, {
    "from": 223,
    "label": "has",
    "to": 9
  }, {
    "from": 223,
    "label": "has",
    "to": 224
  }, {
    "from": 223,
    "label": "has",
    "to": 225
  }, {
    "from": 223,
    "label": "has",
    "to": 226
  }, {
    "from": 223,
    "label": "has",
    "to": 227
  }, {
    "from": 223,
    "label": "has",
    "to": 228
  }, {
    "from": 223,
    "label": "has",
    "to": 214
  }, {
    "from": 214,
    "label": "has",
    "to": 215
  }, {
    "from": 223,
    "label": "has",
    "to": 9
  }, {
    "from": 223,
    "label": "has",
    "to": 229
  }, {
    "from": 223,
    "label": "has",
    "to": 215
  }, {
    "from": 223,
    "label": "has",
    "to": 9
  }, {
    "from": 223,
    "label": "has",
    "to": 230
  }, {
    "from": 231,
    "label": "has",
    "to": 9
  }, {
    "from": 231,
    "label": "has",
    "to": 232
  }, {
    "from": 233,
    "label": "has",
    "to": 9
  }, {
    "from": 233,
    "label": "has",
    "to": 234
  }, {
    "from": 235,
    "label": "has",
    "to": 9
  }, {
    "from": 235,
    "label": "has",
    "to": 236
  }, {
    "from": 237,
    "label": "has",
    "to": 45
  }, {
    "from": 237,
    "label": "has",
    "to": 46
  }, {
    "from": 237,
    "label": "has",
    "to": 9
  }, {
    "from": 237,
    "label": "has",
    "to": 47
  }, {
    "from": 237,
    "label": "has",
    "to": 238
  }, {
    "from": 239,
    "label": "has",
    "to": 86
  }, {
    "from": 239,
    "label": "has",
    "to": 87
  }, {
    "from": 239,
    "label": "has",
    "to": 9
  }, {
    "from": 239,
    "label": "has",
    "to": 240
  }, {
    "from": 241,
    "label": "has",
    "to": 90
  }, {
    "from": 241,
    "label": "has",
    "to": 91
  }, {
    "from": 241,
    "label": "has",
    "to": 92
  }, {
    "from": 241,
    "label": "has",
    "to": 9
  }, {
    "from": 241,
    "label": "has",
    "to": 9
  }, {
    "from": 241,
    "label": "has",
    "to": 242
  }, {
    "from": 243,
    "label": "has",
    "to": 148
  }, {
    "from": 243,
    "label": "has",
    "to": 149
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 149,
    "label": "has",
    "to": 151
  }, {
    "from": 149,
    "label": "has",
    "to": 152
  }, {
    "from": 243,
    "label": "has",
    "to": 9
  }, {
    "from": 243,
    "label": "has",
    "to": 153
  }, {
    "from": 243,
    "label": "has",
    "to": 154
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 243,
    "label": "has",
    "to": 9
  }, {
    "from": 243,
    "label": "has",
    "to": 9
  }, {
    "from": 243,
    "label": "has",
    "to": 244
  }, {
    "from": 85,
    "label": "calls",
    "to": 280
  }, {
    "from": 94,
    "label": "calls",
    "to": 280
  }, {
    "from": 245,
    "label": "calls",
    "to": 281
  }, {
    "from": 245,
    "label": "calls",
    "to": 281
  }, {
    "from": 245,
    "label": "calls",
    "to": 281
  }, {
    "from": 210,
    "label": "calls",
    "to": 281
  }, {
    "from": 210,
    "label": "calls",
    "to": 281
  }, {
    "from": 210,
    "label": "calls",
    "to": 281
  }, {
    "from": 30,
    "label": "calls",
    "to": 282
  }, {
    "from": 233,
    "label": "calls",
    "to": 282
  }, {
    "from": 122,
    "label": "calls",
    "to": 283
  }, {
    "from": 76,
    "label": "calls",
    "to": 305
  }, {
    "from": 3,
    "label": "calls",
    "to": 262
  }, {
    "from": 12,
    "label": "calls",
    "to": 262
  }, {
    "from": 147,
    "label": "calls",
    "to": 263
  }, {
    "from": 136,
    "label": "calls",
    "to": 292
  }, {
    "from": 245,
    "label": "calls",
    "to": 147
  }, {
    "from": 245,
    "label": "calls",
    "to": 147
  }, {
    "from": 186,
    "label": "calls",
    "to": 311
  }, {
    "from": 245,
    "label": "calls",
    "to": 261
  }, {
    "from": 245,
    "label": "calls",
    "to": 261
  }, {
    "from": 245,
    "label": "calls",
    "to": 261
  }, {
    "from": 245,
    "label": "calls",
    "to": 261
  }, {
    "from": 85,
    "label": "calls",
    "to": 261
  }, {
    "from": 89,
    "label": "calls",
    "to": 261
  }, {
    "from": 245,
    "label": "calls",
    "to": 261
  }, {
    "from": 161,
    "label": "calls",
    "to": 142
  }, {
    "from": 210,
    "label": "calls",
    "to": 142
  }, {
    "from": 210,
    "label": "calls",
    "to": 142
  }, {
    "from": 147,
    "label": "calls",
    "to": 126
  }, {
    "from": 210,
    "label": "calls",
    "to": 126
  }, {
    "from": 210,
    "label": "calls",
    "to": 126
  }, {
    "from": 245,
    "label": "calls",
    "to": 19
  }, {
    "from": 61,
    "label": "calls",
    "to": 265
  }, {
    "from": 19,
    "label": "calls",
    "to": 257
  }, {
    "from": 19,
    "label": "calls",
    "to": 257
  }, {
    "from": 19,
    "label": "calls",
    "to": 257
  }, {
    "from": 245,
    "label": "calls",
    "to": 257
  }, {
    "from": 85,
    "label": "calls",
    "to": 257
  }, {
    "from": 89,
    "label": "calls",
    "to": 257
  }, {
    "from": 89,
    "label": "calls",
    "to": 257
  }, {
    "from": 96,
    "label": "calls",
    "to": 257
  }, {
    "from": 96,
    "label": "calls",
    "to": 257
  }, {
    "from": 113,
    "label": "calls",
    "to": 257
  }, {
    "from": 126,
    "label": "calls",
    "to": 257
  }, {
    "from": 130,
    "label": "calls",
    "to": 257
  }, {
    "from": 181,
    "label": "calls",
    "to": 257
  }, {
    "from": 181,
    "label": "calls",
    "to": 257
  }, {
    "from": 199,
    "label": "calls",
    "to": 257
  }, {
    "from": 199,
    "label": "calls",
    "to": 257
  }, {
    "from": 199,
    "label": "calls",
    "to": 257
  }, {
    "from": 199,
    "label": "calls",
    "to": 257
  }, {
    "from": 245,
    "label": "calls",
    "to": 257
  }, {
    "from": 245,
    "label": "calls",
    "to": 257
  }, {
    "from": 245,
    "label": "calls",
    "to": 257
  }, {
    "from": 245,
    "label": "calls",
    "to": 257
  }, {
    "from": 177,
    "label": "calls",
    "to": 291
  }, {
    "from": 63,
    "label": "calls",
    "to": 259
  }, {
    "from": 69,
    "label": "calls",
    "to": 259
  }, {
    "from": 69,
    "label": "calls",
    "to": 259
  }, {
    "from": 78,
    "label": "calls",
    "to": 259
  }, {
    "from": 83,
    "label": "calls",
    "to": 259
  }, {
    "from": 147,
    "label": "calls",
    "to": 144
  }, {
    "from": 210,
    "label": "calls",
    "to": 144
  }, {
    "from": 210,
    "label": "calls",
    "to": 144
  }, {
    "from": 210,
    "label": "calls",
    "to": 144
  }, {
    "from": 210,
    "label": "calls",
    "to": 144
  }, {
    "from": 210,
    "label": "calls",
    "to": 144
  }, {
    "from": 245,
    "label": "calls",
    "to": 266
  }, {
    "from": 245,
    "label": "calls",
    "to": 266
  }, {
    "from": 69,
    "label": "calls",
    "to": 267
  }, {
    "from": 186,
    "label": "calls",
    "to": 181
  }, {
    "from": 193,
    "label": "calls",
    "to": 181
  }, {
    "from": 245,
    "label": "calls",
    "to": 254
  }, {
    "from": 158,
    "label": "calls",
    "to": 254
  }, {
    "from": 210,
    "label": "calls",
    "to": 254
  }, {
    "from": 210,
    "label": "calls",
    "to": 254
  }, {
    "from": 210,
    "label": "calls",
    "to": 254
  }, {
    "from": 171,
    "label": "calls",
    "to": 268
  }, {
    "from": 52,
    "label": "calls",
    "to": 288
  }, {
    "from": 55,
    "label": "calls",
    "to": 287
  }, {
    "from": 186,
    "label": "calls",
    "to": 269
  }, {
    "from": 193,
    "label": "calls",
    "to": 269
  }, {
    "from": 210,
    "label": "calls",
    "to": 167
  }, {
    "from": 210,
    "label": "calls",
    "to": 167
  }, {
    "from": 210,
    "label": "calls",
    "to": 167
  }, {
    "from": 245,
    "label": "calls",
    "to": 3
  }, {
    "from": 175,
    "label": "calls",
    "to": 284
  }, {
    "from": 3,
    "label": "calls",
    "to": 294
  }, {
    "from": 12,
    "label": "calls",
    "to": 294
  }, {
    "from": 245,
    "label": "calls",
    "to": 294
  }, {
    "from": 43,
    "label": "calls",
    "to": 294
  }, {
    "from": 186,
    "label": "calls",
    "to": 294
  }, {
    "from": 193,
    "label": "calls",
    "to": 294
  }, {
    "from": 245,
    "label": "calls",
    "to": 12
  }, {
    "from": 245,
    "label": "calls",
    "to": 290
  }, {
    "from": 245,
    "label": "calls",
    "to": 290
  }, {
    "from": 245,
    "label": "calls",
    "to": 43
  }, {
    "from": 245,
    "label": "calls",
    "to": 43
  }, {
    "from": 245,
    "label": "calls",
    "to": 43
  }, {
    "from": 245,
    "label": "calls",
    "to": 43
  }, {
    "from": 245,
    "label": "calls",
    "to": 43
  }, {
    "from": 245,
    "label": "calls",
    "to": 43
  }, {
    "from": 163,
    "label": "calls",
    "to": 130
  }, {
    "from": 57,
    "label": "calls",
    "to": 271
  }, {
    "from": 89,
    "label": "calls",
    "to": 309
  }, {
    "from": 96,
    "label": "calls",
    "to": 309
  }, {
    "from": 210,
    "label": "calls",
    "to": 171
  }, {
    "from": 109,
    "label": "calls",
    "to": 298
  }, {
    "from": 83,
    "label": "calls",
    "to": 308
  }, {
    "from": 74,
    "label": "calls",
    "to": 299
  }, {
    "from": 50,
    "label": "calls",
    "to": 296
  }, {
    "from": 163,
    "label": "calls",
    "to": 158
  }, {
    "from": 245,
    "label": "calls",
    "to": 85
  }, {
    "from": 245,
    "label": "calls",
    "to": 85
  }, {
    "from": 245,
    "label": "calls",
    "to": 85
  }, {
    "from": 67,
    "label": "calls",
    "to": 278
  }, {
    "from": 231,
    "label": "calls",
    "to": 272
  }, {
    "from": 69,
    "label": "calls",
    "to": 297
  }, {
    "from": 111,
    "label": "calls",
    "to": 293
  }, {
    "from": 144,
    "label": "calls",
    "to": 304
  }, {
    "from": 245,
    "label": "calls",
    "to": 16
  }, {
    "from": 245,
    "label": "calls",
    "to": 256
  }, {
    "from": 52,
    "label": "calls",
    "to": 256
  }, {
    "from": 96,
    "label": "calls",
    "to": 256
  }, {
    "from": 113,
    "label": "calls",
    "to": 256
  }, {
    "from": 161,
    "label": "calls",
    "to": 256
  }, {
    "from": 177,
    "label": "calls",
    "to": 256
  }, {
    "from": 186,
    "label": "calls",
    "to": 256
  }, {
    "from": 193,
    "label": "calls",
    "to": 256
  }, {
    "from": 199,
    "label": "calls",
    "to": 256
  }, {
    "from": 199,
    "label": "calls",
    "to": 256
  }, {
    "from": 199,
    "label": "calls",
    "to": 256
  }, {
    "from": 199,
    "label": "calls",
    "to": 256
  }, {
    "from": 210,
    "label": "calls",
    "to": 256
  }, {
    "from": 245,
    "label": "calls",
    "to": 300
  }, {
    "from": 245,
    "label": "calls",
    "to": 300
  }, {
    "from": 173,
    "label": "calls",
    "to": 273
  }, {
    "from": 142,
    "label": "calls",
    "to": 274
  }, {
    "from": 63,
    "label": "calls",
    "to": 275
  }, {
    "from": 245,
    "label": "calls",
    "to": 89
  }, {
    "from": 245,
    "label": "calls",
    "to": 89
  }, {
    "from": 245,
    "label": "calls",
    "to": 89
  }, {
    "from": 245,
    "label": "calls",
    "to": 89
  }, {
    "from": 19,
    "label": "calls",
    "to": 301
  }, {
    "from": 193,
    "label": "calls",
    "to": 307
  }, {
    "from": 199,
    "label": "calls",
    "to": 307
  }, {
    "from": 199,
    "label": "calls",
    "to": 307
  }, {
    "from": 120,
    "label": "calls",
    "to": 276
  }, {
    "from": 158,
    "label": "calls",
    "to": 136
  }, {
    "from": 161,
    "label": "calls",
    "to": 136
  }, {
    "from": 210,
    "label": "calls",
    "to": 136
  }, {
    "from": 210,
    "label": "calls",
    "to": 136
  }, {
    "from": 245,
    "label": "calls",
    "to": 260
  }, {
    "from": 245,
    "label": "calls",
    "to": 260
  }, {
    "from": 245,
    "label": "calls",
    "to": 260
  }, {
    "from": 245,
    "label": "calls",
    "to": 260
  }, {
    "from": 245,
    "label": "calls",
    "to": 260
  }, {
    "from": 245,
    "label": "calls",
    "to": 260
  }, {
    "from": 245,
    "label": "calls",
    "to": 260
  }, {
    "from": 245,
    "label": "calls",
    "to": 260
  }, {
    "from": 245,
    "label": "calls",
    "to": 260
  }, {
    "from": 245,
    "label": "calls",
    "to": 260
  }, {
    "from": 245,
    "label": "calls",
    "to": 260
  }, {
    "from": 245,
    "label": "calls",
    "to": 260
  }, {
    "from": 245,
    "label": "calls",
    "to": 260
  }, {
    "from": 245,
    "label": "calls",
    "to": 260
  }, {
    "from": 245,
    "label": "calls",
    "to": 260
  }, {
    "from": 245,
    "label": "calls",
    "to": 260
  }, {
    "from": 245,
    "label": "calls",
    "to": 255
  }, {
    "from": 245,
    "label": "calls",
    "to": 255
  }, {
    "from": 245,
    "label": "calls",
    "to": 255
  }, {
    "from": 245,
    "label": "calls",
    "to": 255
  }, {
    "from": 245,
    "label": "calls",
    "to": 255
  }, {
    "from": 245,
    "label": "calls",
    "to": 255
  }, {
    "from": 245,
    "label": "calls",
    "to": 255
  }, {
    "from": 245,
    "label": "calls",
    "to": 255
  }, {
    "from": 245,
    "label": "calls",
    "to": 255
  }, {
    "from": 245,
    "label": "calls",
    "to": 255
  }, {
    "from": 105,
    "label": "calls",
    "to": 303
  }, {
    "from": 107,
    "label": "calls",
    "to": 285
  }, {
    "from": 78,
    "label": "calls",
    "to": 306
  }, {
    "from": 169,
    "label": "calls",
    "to": 286
  }, {
    "from": 167,
    "label": "calls",
    "to": 295
  }, {
    "from": 245,
    "label": "calls",
    "to": 258
  }, {
    "from": 30,
    "label": "calls",
    "to": 258
  }, {
    "from": 32,
    "label": "calls",
    "to": 258
  }, {
    "from": 32,
    "label": "calls",
    "to": 258
  }, {
    "from": 245,
    "label": "calls",
    "to": 258
  }, {
    "from": 245,
    "label": "calls",
    "to": 258
  }, {
    "from": 136,
    "label": "calls",
    "to": 258
  }, {
    "from": 136,
    "label": "calls",
    "to": 258
  }, {
    "from": 210,
    "label": "calls",
    "to": 258
  }, {
    "from": 59,
    "label": "calls",
    "to": 277
  }, {
    "from": 199,
    "label": "calls",
    "to": 310
  }, {
    "from": 210,
    "label": "calls",
    "to": 161
  }, {
    "from": 245,
    "label": "calls",
    "to": 23
  }, {
    "from": 245,
    "label": "calls",
    "to": 23
  }, {
    "from": 113,
    "label": "calls",
    "to": 302
  }, {
    "from": 124,
    "label": "calls",
    "to": 270
  }, {
    "from": 130,
    "label": "calls",
    "to": 289
  }, {
    "from": 3,
    "label": "calls",
    "to": 264
  }, {
    "from": 12,
    "label": "calls",
    "to": 264
  }, {
    "from": 245,
    "label": "calls",
    "to": 264
  }, {
    "from": 245,
    "label": "calls",
    "to": 264
  }, {
    "from": 43,
    "label": "calls",
    "to": 264
  }, {
    "from": 126,
    "label": "calls",
    "to": 279
  }, {
    "from": 103,
    "label": "calls",
    "to": 312
  }, {
    "from": 233,
    "label": "calls",
    "to": 313
  }, {
    "from": 1,
    "label": "contains",
    "to": 245
  }, {
    "from": 245,
    "label": "declares",
    "to": 3
  }, {
    "from": 245,
    "label": "declares",
    "to": 12
  }, {
    "from": 245,
    "label": "declares",
    "to": 16
  }, {
    "from": 245,
    "label": "declares",
    "to": 19
  }, {
    "from": 245,
    "label": "declares",
    "to": 23
  }, {
    "from": 245,
    "label": "declares",
    "to": 30
  }, {
    "from": 245,
    "label": "declares",
    "to": 32
  }, {
    "from": 245,
    "label": "declares",
    "to": 34
  }, {
    "from": 245,
    "label": "declares",
    "to": 37
  }, {
    "from": 245,
    "label": "declares",
    "to": 43
  }, {
    "from": 245,
    "label": "declares",
    "to": 50
  }, {
    "from": 245,
    "label": "declares",
    "to": 52
  }, {
    "from": 245,
    "label": "declares",
    "to": 55
  }, {
    "from": 245,
    "label": "declares",
    "to": 57
  }, {
    "from": 245,
    "label": "declares",
    "to": 59
  }, {
    "from": 245,
    "label": "declares",
    "to": 61
  }, {
    "from": 245,
    "label": "declares",
    "to": 63
  }, {
    "from": 245,
    "label": "declares",
    "to": 67
  }, {
    "from": 245,
    "label": "declares",
    "to": 69
  }, {
    "from": 245,
    "label": "declares",
    "to": 71
  }, {
    "from": 245,
    "label": "declares",
    "to": 74
  }, {
    "from": 245,
    "label": "declares",
    "to": 76
  }, {
    "from": 245,
    "label": "declares",
    "to": 78
  }, {
    "from": 245,
    "label": "declares",
    "to": 83
  }, {
    "from": 245,
    "label": "declares",
    "to": 85
  }, {
    "from": 245,
    "label": "declares",
    "to": 89
  }, {
    "from": 245,
    "label": "declares",
    "to": 94
  }, {
    "from": 245,
    "label": "declares",
    "to": 96
  }, {
    "from": 245,
    "label": "declares",
    "to": 103
  }, {
    "from": 245,
    "label": "declares",
    "to": 105
  }, {
    "from": 245,
    "label": "declares",
    "to": 107
  }, {
    "from": 245,
    "label": "declares",
    "to": 109
  }, {
    "from": 245,
    "label": "declares",
    "to": 111
  }, {
    "from": 245,
    "label": "declares",
    "to": 113
  }, {
    "from": 245,
    "label": "declares",
    "to": 120
  }, {
    "from": 245,
    "label": "declares",
    "to": 122
  }, {
    "from": 245,
    "label": "declares",
    "to": 124
  }, {
    "from": 245,
    "label": "declares",
    "to": 126
  }, {
    "from": 245,
    "label": "declares",
    "to": 130
  }, {
    "from": 245,
    "label": "declares",
    "to": 136
  }, {
    "from": 245,
    "label": "declares",
    "to": 142
  }, {
    "from": 245,
    "label": "declares",
    "to": 144
  }, {
    "from": 245,
    "label": "declares",
    "to": 147
  }, {
    "from": 245,
    "label": "declares",
    "to": 158
  }, {
    "from": 245,
    "label": "declares",
    "to": 161
  }, {
    "from": 245,
    "label": "declares",
    "to": 163
  }, {
    "from": 245,
    "label": "declares",
    "to": 167
  }, {
    "from": 245,
    "label": "declares",
    "to": 169
  }, {
    "from": 245,
    "label": "declares",
    "to": 171
  }, {
    "from": 245,
    "label": "declares",
    "to": 173
  }, {
    "from": 245,
    "label": "declares",
    "to": 175
  }, {
    "from": 245,
    "label": "declares",
    "to": 177
  }, {
    "from": 245,
    "label": "declares",
    "to": 181
  }, {
    "from": 245,
    "label": "declares",
    "to": 186
  }, {
    "from": 245,
    "label": "declares",
    "to": 193
  }, {
    "from": 245,
    "label": "declares",
    "to": 199
  }, {
    "from": 245,
    "label": "declares",
    "to": 210
  }, {
    "from": 245,
    "label": "declares",
    "to": 223
  }, {
    "from": 245,
    "label": "declares",
    "to": 231
  }, {
    "from": 245,
    "label": "declares",
    "to": 233
  }, {
    "from": 245,
    "label": "declares",
    "to": 235
  }, {
    "from": 245,
    "label": "declares",
    "to": 237
  }, {
    "from": 245,
    "label": "declares",
    "to": 239
  }, {
    "from": 245,
    "label": "declares",
    "to": 241
  }, {
    "from": 245,
    "label": "declares",
    "to": 243
  }, {
    "from": 246,
    "label": "calls",
    "to": 34
  }, {
    "from": 1,
    "label": "contains",
    "to": 314
  }, {
    "from": 1,
    "label": "contains",
    "to": 315
  }, {
    "from": 314,
    "label": "initializes",
    "to": 316
  }, {
    "from": 316,
    "label": "assigns",
    "to": 317
  }, {
    "from": 314,
    "label": "initializes",
    "to": 318
  }, {
    "from": 318,
    "label": "assigns",
    "to": 319
  }, {
    "from": 314,
    "label": "initializes",
    "to": 320
  }, {
    "from": 314,
    "label": "initializes",
    "to": 321
  }, {
    "from": 321,
    "label": "assigns",
    "to": 322
  }, {
    "from": 314,
    "label": "initializes",
    "to": 323
  }, {
    "from": 314,
    "label": "initializes",
    "to": 324
  }, {
    "from": 324,
    "label": "assigns",
    "to": 325
  }, {
    "from": 314,
    "label": "initializes",
    "to": 326
  }, {
    "from": 326,
    "label": "assigns",
    "to": 327
  }, {
    "from": 314,
    "label": "initializes",
    "to": 328
  }, {
    "from": 328,
    "label": "assigns",
    "to": 329
  }, {
    "from": 314,
    "label": "initializes",
    "to": 330
  }, {
    "from": 330,
    "label": "assigns",
    "to": 331
  }, {
    "from": 314,
    "label": "initializes",
    "to": 332
  }, {
    "from": 332,
    "label": "assigns",
    "to": 333
  }, {
    "from": 314,
    "label": "initializes",
    "to": 334
  }, {
    "from": 334,
    "label": "assigns",
    "to": 335
  }, {
    "from": 314,
    "label": "initializes",
    "to": 336
  }, {
    "from": 336,
    "label": "assigns",
    "to": 337
  }, {
    "from": 314,
    "label": "initializes",
    "to": 338
  }, {
    "from": 338,
    "label": "assigns",
    "to": 339
  }, {
    "from": 314,
    "label": "initializes",
    "to": 340
  }, {
    "from": 340,
    "label": "assigns",
    "to": 341
  }, {
    "from": 314,
    "label": "initializes",
    "to": 342
  }, {
    "from": 342,
    "label": "assigns",
    "to": 343
  }, {
    "from": 314,
    "label": "initializes",
    "to": 344
  }, {
    "from": 344,
    "label": "assigns",
    "to": 345
  }, {
    "from": 314,
    "label": "initializes",
    "to": 346
  }, {
    "from": 346,
    "label": "assigns",
    "to": 347
  }, {
    "from": 314,
    "label": "initializes",
    "to": 348
  }, {
    "from": 348,
    "label": "assigns",
    "to": 349
  }, {
    "from": 314,
    "label": "initializes",
    "to": 350
  }, {
    "from": 350,
    "label": "assigns",
    "to": 351
  }, {
    "from": 314,
    "label": "initializes",
    "to": 352
  }, {
    "from": 352,
    "label": "assigns",
    "to": 353
  }, {
    "from": 314,
    "label": "initializes",
    "to": 354
  }, {
    "from": 354,
    "label": "assigns",
    "to": 355
  }, {
    "from": 314,
    "label": "initializes",
    "to": 356
  }, {
    "from": 314,
    "label": "initializes",
    "to": 357
  }, {
    "from": 314,
    "label": "initializes",
    "to": 358
  }, {
    "from": 358,
    "label": "assigns",
    "to": 359
  }, {
    "from": 314,
    "label": "initializes",
    "to": 360
  }, {
    "from": 360,
    "label": "assigns",
    "to": 361
  }, {
    "from": 314,
    "label": "initializes",
    "to": 362
  }, {
    "from": 314,
    "label": "initializes",
    "to": 363
  }, {
    "from": 314,
    "label": "initializes",
    "to": 364
  }, {
    "from": 364,
    "label": "assigns",
    "to": 365
  }, {
    "from": 314,
    "label": "initializes",
    "to": 366
  }, {
    "from": 366,
    "label": "assigns",
    "to": 367
  }, {
    "from": 314,
    "label": "initializes",
    "to": 368
  }, {
    "from": 368,
    "label": "assigns",
    "to": 369
  }, {
    "from": 314,
    "label": "initializes",
    "to": 370
  }, {
    "from": 370,
    "label": "assigns",
    "to": 371
  }, {
    "from": 314,
    "label": "initializes",
    "to": 372
  }, {
    "from": 372,
    "label": "assigns",
    "to": 373
  }, {
    "from": 314,
    "label": "initializes",
    "to": 374
  }, {
    "from": 314,
    "label": "initializes",
    "to": 375
  }, {
    "from": 314,
    "label": "initializes",
    "to": 376
  }, {
    "from": 376,
    "label": "assigns",
    "to": 377
  }, {
    "from": 314,
    "label": "initializes",
    "to": 378
  }, {
    "from": 378,
    "label": "assigns",
    "to": 379
  }, {
    "from": 314,
    "label": "initializes",
    "to": 380
  }, {
    "from": 380,
    "label": "assigns",
    "to": 381
  }, {
    "from": 314,
    "label": "initializes",
    "to": 382
  }, {
    "from": 382,
    "label": "assigns",
    "to": 383
  }, {
    "from": 314,
    "label": "initializes",
    "to": 384
  }, {
    "from": 384,
    "label": "assigns",
    "to": 385
  }, {
    "from": 314,
    "label": "initializes",
    "to": 386
  }, {
    "from": 386,
    "label": "assigns",
    "to": 387
  }, {
    "from": 314,
    "label": "initializes",
    "to": 388
  }, {
    "from": 388,
    "label": "assigns",
    "to": 389
  }, {
    "from": 314,
    "label": "initializes",
    "to": 390
  }, {
    "from": 390,
    "label": "assigns",
    "to": 391
  }, {
    "from": 314,
    "label": "initializes",
    "to": 392
  }, {
    "from": 392,
    "label": "assigns",
    "to": 393
  }, {
    "from": 314,
    "label": "initializes",
    "to": 394
  }, {
    "from": 394,
    "label": "assigns",
    "to": 395
  }, {
    "from": 314,
    "label": "initializes",
    "to": 396
  }, {
    "from": 396,
    "label": "assigns",
    "to": 397
  }, {
    "from": 314,
    "label": "initializes",
    "to": 398
  }, {
    "from": 398,
    "label": "assigns",
    "to": 399
  }, {
    "from": 314,
    "label": "initializes",
    "to": 400
  }, {
    "from": 400,
    "label": "assigns",
    "to": 401
  }, {
    "from": 314,
    "label": "initializes",
    "to": 402
  }, {
    "from": 402,
    "label": "assigns",
    "to": 403
  }, {
    "from": 314,
    "label": "initializes",
    "to": 404
  }, {
    "from": 404,
    "label": "assigns",
    "to": 405
  }, {
    "from": 314,
    "label": "initializes",
    "to": 406
  }, {
    "from": 406,
    "label": "assigns",
    "to": 407
  }, {
    "from": 314,
    "label": "initializes",
    "to": 408
  }, {
    "from": 408,
    "label": "assigns",
    "to": 409
  }, {
    "from": 315,
    "label": "initializes",
    "to": 410
  }, {
    "from": 410,
    "label": "requires",
    "to": 2
  }, {
    "from": 1,
    "label": "provides",
    "to": 411
  }, {
    "from": 358,
    "label": "represents",
    "to": 412
  }, {
    "from": 411,
    "label": "provides",
    "to": 412
  }, {
    "from": 413,
    "label": "requires",
    "to": 1
  }, {
    "from": 358,
    "label": "represents",
    "to": 415
  }, {
    "from": 358,
    "label": "contains",
    "to": 19
  }, {
    "from": 414,
    "label": "contains",
    "to": 19
  }, {
    "from": 358,
    "label": "contains",
    "to": 50
  }, {
    "from": 414,
    "label": "contains",
    "to": 50
  }, {
    "from": 358,
    "label": "contains",
    "to": 52
  }, {
    "from": 414,
    "label": "contains",
    "to": 52
  }, {
    "from": 358,
    "label": "contains",
    "to": 55
  }, {
    "from": 414,
    "label": "contains",
    "to": 55
  }, {
    "from": 358,
    "label": "contains",
    "to": 57
  }, {
    "from": 414,
    "label": "contains",
    "to": 57
  }, {
    "from": 358,
    "label": "contains",
    "to": 59
  }, {
    "from": 414,
    "label": "contains",
    "to": 59
  }, {
    "from": 358,
    "label": "contains",
    "to": 61
  }, {
    "from": 414,
    "label": "contains",
    "to": 61
  }, {
    "from": 358,
    "label": "contains",
    "to": 63
  }, {
    "from": 414,
    "label": "contains",
    "to": 63
  }, {
    "from": 358,
    "label": "contains",
    "to": 67
  }, {
    "from": 414,
    "label": "contains",
    "to": 67
  }, {
    "from": 358,
    "label": "contains",
    "to": 69
  }, {
    "from": 414,
    "label": "contains",
    "to": 69
  }, {
    "from": 358,
    "label": "contains",
    "to": 71
  }, {
    "from": 414,
    "label": "contains",
    "to": 71
  }, {
    "from": 358,
    "label": "contains",
    "to": 74
  }, {
    "from": 414,
    "label": "contains",
    "to": 74
  }, {
    "from": 358,
    "label": "contains",
    "to": 76
  }, {
    "from": 414,
    "label": "contains",
    "to": 76
  }, {
    "from": 358,
    "label": "contains",
    "to": 78
  }, {
    "from": 414,
    "label": "contains",
    "to": 78
  }, {
    "from": 358,
    "label": "contains",
    "to": 83
  }, {
    "from": 414,
    "label": "contains",
    "to": 83
  }, {
    "from": 358,
    "label": "contains",
    "to": 94
  }, {
    "from": 414,
    "label": "contains",
    "to": 94
  }, {
    "from": 358,
    "label": "contains",
    "to": 96
  }, {
    "from": 414,
    "label": "contains",
    "to": 96
  }, {
    "from": 358,
    "label": "contains",
    "to": 103
  }, {
    "from": 414,
    "label": "contains",
    "to": 103
  }, {
    "from": 358,
    "label": "contains",
    "to": 105
  }, {
    "from": 414,
    "label": "contains",
    "to": 105
  }, {
    "from": 358,
    "label": "contains",
    "to": 107
  }, {
    "from": 414,
    "label": "contains",
    "to": 107
  }, {
    "from": 358,
    "label": "contains",
    "to": 109
  }, {
    "from": 414,
    "label": "contains",
    "to": 109
  }, {
    "from": 358,
    "label": "contains",
    "to": 111
  }, {
    "from": 414,
    "label": "contains",
    "to": 111
  }, {
    "from": 358,
    "label": "contains",
    "to": 113
  }, {
    "from": 414,
    "label": "contains",
    "to": 113
  }, {
    "from": 358,
    "label": "contains",
    "to": 120
  }, {
    "from": 414,
    "label": "contains",
    "to": 120
  }, {
    "from": 358,
    "label": "contains",
    "to": 122
  }, {
    "from": 414,
    "label": "contains",
    "to": 122
  }, {
    "from": 358,
    "label": "contains",
    "to": 124
  }, {
    "from": 414,
    "label": "contains",
    "to": 124
  }, {
    "from": 358,
    "label": "contains",
    "to": 126
  }, {
    "from": 414,
    "label": "contains",
    "to": 126
  }, {
    "from": 358,
    "label": "contains",
    "to": 130
  }, {
    "from": 414,
    "label": "contains",
    "to": 130
  }, {
    "from": 358,
    "label": "contains",
    "to": 136
  }, {
    "from": 414,
    "label": "contains",
    "to": 136
  }, {
    "from": 358,
    "label": "contains",
    "to": 142
  }, {
    "from": 414,
    "label": "contains",
    "to": 142
  }, {
    "from": 358,
    "label": "contains",
    "to": 144
  }, {
    "from": 414,
    "label": "contains",
    "to": 144
  }, {
    "from": 358,
    "label": "contains",
    "to": 158
  }, {
    "from": 414,
    "label": "contains",
    "to": 158
  }, {
    "from": 358,
    "label": "contains",
    "to": 161
  }, {
    "from": 414,
    "label": "contains",
    "to": 161
  }, {
    "from": 358,
    "label": "contains",
    "to": 163
  }, {
    "from": 414,
    "label": "contains",
    "to": 163
  }, {
    "from": 358,
    "label": "contains",
    "to": 167
  }, {
    "from": 414,
    "label": "contains",
    "to": 167
  }, {
    "from": 358,
    "label": "contains",
    "to": 169
  }, {
    "from": 414,
    "label": "contains",
    "to": 169
  }, {
    "from": 358,
    "label": "contains",
    "to": 171
  }, {
    "from": 414,
    "label": "contains",
    "to": 171
  }, {
    "from": 358,
    "label": "contains",
    "to": 173
  }, {
    "from": 414,
    "label": "contains",
    "to": 173
  }, {
    "from": 358,
    "label": "contains",
    "to": 175
  }, {
    "from": 414,
    "label": "contains",
    "to": 175
  }, {
    "from": 358,
    "label": "contains",
    "to": 177
  }, {
    "from": 414,
    "label": "contains",
    "to": 177
  }, {
    "from": 358,
    "label": "contains",
    "to": 186
  }, {
    "from": 414,
    "label": "contains",
    "to": 186
  }, {
    "from": 358,
    "label": "contains",
    "to": 193
  }, {
    "from": 414,
    "label": "contains",
    "to": 193
  }, {
    "from": 358,
    "label": "contains",
    "to": 199
  }, {
    "from": 414,
    "label": "contains",
    "to": 199
  }, {
    "from": 358,
    "label": "contains",
    "to": 210
  }, {
    "from": 414,
    "label": "contains",
    "to": 210
  }, {
    "from": 358,
    "label": "contains",
    "to": 223
  }, {
    "from": 414,
    "label": "contains",
    "to": 223
  }, {
    "from": 358,
    "label": "contains",
    "to": 231
  }, {
    "from": 414,
    "label": "contains",
    "to": 231
  }, {
    "from": 358,
    "label": "contains",
    "to": 233
  }, {
    "from": 414,
    "label": "contains",
    "to": 233
  }, {
    "from": 358,
    "label": "contains",
    "to": 235
  }, {
    "from": 414,
    "label": "contains",
    "to": 235
  }, {
    "from": 358,
    "label": "contains",
    "to": 247
  }, {
    "from": 358,
    "label": "contains",
    "to": 248
  }, {
    "from": 358,
    "label": "contains",
    "to": 249
  }, {
    "from": 358,
    "label": "contains",
    "to": 250
  }, {
    "from": 358,
    "label": "contains",
    "to": 251
  }, {
    "from": 358,
    "label": "contains",
    "to": 252
  }, {
    "from": 358,
    "label": "contains",
    "to": 253
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "api",
    "type": "module"
  }, {
    "id": 2,
    "text": "ffi",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function orequire(...)\r\n  local err = \"\"\r\n  for _, name in ipairs{...} do\r\n    local ok, mod = pcall(require, name)\r\n    if ok then return mod, name end\r\n    err = err .. \"\\n\" .. mod\r\n  end\r\n  error(err)\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local err = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "for _, name in ipairs{...} do\r\n    local ok, mod = pcall(require, name)\r\n    if ok then return mod, name end\r\n    err = err .. \"\\n\" .. mod\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 6,
    "text": "local ok, mod = pcall(require, name)",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "if ok then return mod, name end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "err = err .. \"\\n\" .. mod",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 10,
    "text": "error(err)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "local function oload(t)\r\n  local err = \"\"\r\n  for _, name in ipairs(t) do\r\n    local ok, mod = pcall(ffi.load, name)\r\n    if ok then return mod, name end\r\n    err = err .. \"\\n\" .. mod\r\n  end\r\n  error(err)\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "for _, name in ipairs(t) do\r\n    local ok, mod = pcall(ffi.load, name)\r\n    if ok then return mod, name end\r\n    err = err .. \"\\n\" .. mod\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 14,
    "text": "local ok, mod = pcall(ffi.load, name)",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "local function IF(cond, true_v, false_v)\r\n  if cond then return true_v end\r\n  return false_v\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "if cond then return true_v end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function _M.zmq_version()\r\n  local major, minor, patch = ffi.new(aint_t, 0), ffi.new(aint_t, 0), ffi.new(aint_t, 0)\r\n  libzmq3.zmq_version(major, minor, patch)\r\n  return major[0], minor[0], patch[0]\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "local major, minor, patch = ffi.new(aint_t, 0), ffi.new(aint_t, 0), ffi.new(aint_t, 0)",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "libzmq3.zmq_version(major, minor, patch)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function (major, minor, patch)\r\n  if ZMQ_VERSION_MAJOR < major then return false end\r\n  if ZMQ_VERSION_MAJOR > major then return true  end\r\n  if ZMQ_VERSION_MINOR < minor then return false end\r\n  if ZMQ_VERSION_MINOR > minor then return true  end\r\n  if ZMQ_VERSION_PATCH < patch then return false  end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "if ZMQ_VERSION_MAJOR < major then return false end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "if ZMQ_VERSION_MAJOR > major then return true  end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "if ZMQ_VERSION_MINOR < minor then return false end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "if ZMQ_VERSION_MINOR > minor then return true  end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "if ZMQ_VERSION_PATCH < patch then return false  end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "local function ptrtoint(ptr)\r\n  return tonumber(ffi.cast(uintptr_t, ptr))\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "local function inttoptr(val)\r\n  return ffi.cast(pvoid_t, ffi.cast(uintptr_t, val))\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function (ptr)\r\n  void_array[0] = ptr\r\n  return ffi.string(char_ptr, ptr_size)\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "void_array[0] = ptr",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function (str)\r\n  if type(str) == 'string' then\r\n    assert(#str == ptr_size)\r\n    ffi.copy(char_ptr, str, ptr_size)\r\n    return void_array[0]\r\n  end\r\n\r\n  -- we can support also lightuserdata\r\n  assert(type(str) == 'userdata')\r\n  return ffi.cast(pvoid_t, str)\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "if type(str) == 'string' then\r\n    assert(#str == ptr_size)\r\n    ffi.copy(char_ptr, str, ptr_size)\r\n    return void_array[0]\r\n  end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "assert(#str == ptr_size)",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "ffi.copy(char_ptr, str, ptr_size)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "assert(type(str) == 'userdata')",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "local function pget(lib, elem)\r\n  local ok, err = pcall(function()\r\n    local m = lib[elem]\r\n    if nil ~= m then return m end\r\n    error(\"not found\")\r\n  end)\r\n  if ok then return err end\r\n  return nil, err\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "local ok, err = pcall(function()\r\n    local m = lib[elem]\r\n    if nil ~= m then return m end\r\n    error(\"not found\")\r\n  end)",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "local m = lib[elem]",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "if nil ~= m then return m end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "error(\"not found\")",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "if ok then return err end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function _M.zmq_errno()\r\n  return libzmq3.zmq_errno()\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function _M.zmq_strerror(errnum)\r\n  local str = libzmq3.zmq_strerror (errnum);\r\n  return ffi.string(str)\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "local str = libzmq3.zmq_strerror (errnum)",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "function _M.zmq_poll(items, nitems, timeout)\r\n  return libzmq3.zmq_poll(items, nitems, timeout)\r\nend",
    "type": "function"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function _M.zmq_device(dtype, frontend, backend)\r\n  return libzmq3.zmq_device(dtype, frontend, backend)\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function _M.zmq_proxy(frontend, backend, capture)\r\n  return libzmq3.zmq_proxy(frontend, backend, capture)\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function _M.zmq_proxy_steerable(frontend, backend, capture, control)\r\n  return libzmq3.zmq_proxy_steerable(frontend, backend, capture, control)\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function _M.zmq_ctx_new()\r\n  local ctx = libzmq3.zmq_ctx_new()\r\n  ffi.gc(ctx, _M.zmq_ctx_term)\r\n  return ctx\r\nend",
    "type": "function"
  }, {
    "id": 64,
    "text": "local ctx = libzmq3.zmq_ctx_new()",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "ffi.gc(ctx, _M.zmq_ctx_term)",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "function _M.zmq_ctx_shutdown(ctx)\r\n  return libzmq3.zmq_ctx_shutdown(ctx)\r\nend",
    "type": "function"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function _M.zmq_ctx_term(ctx)\r\n  return libzmq3.zmq_ctx_term(ffi.gc(ctx, nil))\r\nend",
    "type": "function"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "function _M.zmq_ctx_term(ctx)\r\n  libzmq3.zmq_ctx_destroy(ffi.gc(ctx, nil))\r\nend",
    "type": "function"
  }, {
    "id": 72,
    "text": "libzmq3.zmq_ctx_destroy(ffi.gc(ctx, nil))",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function _M.zmq_ctx_get(ctx, option)\r\n  return libzmq3.zmq_ctx_get(ctx, option)\r\nend",
    "type": "function"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "function _M.zmq_ctx_set(ctx, option, value)\r\n  return libzmq3.zmq_ctx_set(ctx, option, value)\r\nend",
    "type": "function"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "function _M.zmq_socket(ctx, stype)\r\n  local skt = libzmq3.zmq_socket(ctx, stype)\r\n  if NULL == skt then return nil end\r\n  ffi.gc(skt, _M.zmq_close)\r\n  return skt\r\nend",
    "type": "function"
  }, {
    "id": 79,
    "text": "local skt = libzmq3.zmq_socket(ctx, stype)",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "if NULL == skt then return nil end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "ffi.gc(skt, _M.zmq_close)",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 83,
    "text": "function _M.zmq_close(skt)\r\n  return libzmq3.zmq_close(ffi.gc(skt,nil))\r\nend",
    "type": "function"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "local function gen_setopt_int(t, ct)\r\n  return function (skt, option, optval) \r\n    local size = ffi.sizeof(t)\r\n    local val  = ffi.new(ct, optval)\r\n    return libzmq3.zmq_setsockopt(skt, option, val, size)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 86,
    "text": "local size = ffi.sizeof(t)",
    "type": "statement:localassign"
  }, {
    "id": 87,
    "text": "local val  = ffi.new(ct, optval)",
    "type": "statement:localassign"
  }, {
    "id": 88,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 89,
    "text": "local function gen_getopt_int(t, ct)\r\n  return function (skt, option) \r\n    local size = ffi.new(asize_t, ffi.sizeof(t))\r\n    local val  = ffi.new(ct, 0)\r\n    if -1 ~= libzmq3.zmq_getsockopt(skt, option, val, size) then\r\n      return val[0]\r\n    end\r\n    return\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 90,
    "text": "local size = ffi.new(asize_t, ffi.sizeof(t))",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "local val  = ffi.new(ct, 0)",
    "type": "statement:localassign"
  }, {
    "id": 92,
    "text": "if -1 ~= libzmq3.zmq_getsockopt(skt, option, val, size) then\r\n      return val[0]\r\n    end",
    "type": "statement:if"
  }, {
    "id": 93,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 94,
    "text": "function _M.zmq_skt_setopt_str(skt, option, optval)\r\n  return libzmq3.zmq_setsockopt(skt, option, optval, #optval)\r\nend",
    "type": "function"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "function _M.zmq_skt_getopt_str(skt, option)\r\n  local len  = 255\r\n  local val  = ffi.new(vla_char_t, len)\r\n  local size = ffi.new(asize_t, len)\r\n  if -1 ~= libzmq3.zmq_getsockopt(skt, option, val, size) then\r\n    if size[0] > 0 then\r\n      return ffi.string(val, size[0] - 1)\r\n    end\r\n    return \"\"\r\n  end\r\n  return\r\nend",
    "type": "function"
  }, {
    "id": 97,
    "text": "local len  = 255",
    "type": "statement:localassign"
  }, {
    "id": 98,
    "text": "local val  = ffi.new(vla_char_t, len)",
    "type": "statement:localassign"
  }, {
    "id": 99,
    "text": "local size = ffi.new(asize_t, len)",
    "type": "statement:localassign"
  }, {
    "id": 100,
    "text": "if -1 ~= libzmq3.zmq_getsockopt(skt, option, val, size) then\r\n    if size[0] > 0 then\r\n      return ffi.string(val, size[0] - 1)\r\n    end\r\n    return \"\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 101,
    "text": "if size[0] > 0 then\r\n      return ffi.string(val, size[0] - 1)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "function _M.zmq_connect(skt, addr)\r\n  return libzmq3.zmq_connect(skt, addr)\r\nend",
    "type": "function"
  }, {
    "id": 104,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 105,
    "text": "function _M.zmq_bind(skt, addr)\r\n  return libzmq3.zmq_bind(skt, addr)\r\nend",
    "type": "function"
  }, {
    "id": 106,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 107,
    "text": "function _M.zmq_unbind(skt, addr)\r\n  return libzmq3.zmq_unbind(skt, addr)\r\nend",
    "type": "function"
  }, {
    "id": 108,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 109,
    "text": "function _M.zmq_disconnect(skt, addr)\r\n  return libzmq3.zmq_disconnect(skt, addr)\r\nend",
    "type": "function"
  }, {
    "id": 110,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 111,
    "text": "function _M.zmq_send(skt, data, flags)\r\n  return libzmq3.zmq_send(skt, data, #data, flags or 0)\r\nend",
    "type": "function"
  }, {
    "id": 112,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 113,
    "text": "function _M.zmq_recv(skt, len, flags)\r\n  local buf = ffi.new(vla_char_t, len)\r\n  local flen = libzmq3.zmq_recv(skt, buf, len, flags or 0)\r\n  if flen < 0 then return end\r\n  if len > flen then len = flen end\r\n  return ffi.string(buf, len), flen\r\nend",
    "type": "function"
  }, {
    "id": 114,
    "text": "local buf = ffi.new(vla_char_t, len)",
    "type": "statement:localassign"
  }, {
    "id": 115,
    "text": "local flen = libzmq3.zmq_recv(skt, buf, len, flags or 0)",
    "type": "statement:localassign"
  }, {
    "id": 116,
    "text": "if flen < 0 then return end",
    "type": "statement:if"
  }, {
    "id": 117,
    "text": "if len > flen then len = flen end",
    "type": "statement:if"
  }, {
    "id": 118,
    "text": "len = flen",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 120,
    "text": "function _M.zmq_sendmsg(skt, msg, flags) \r\n  return libzmq3.zmq_sendmsg(skt, msg, flags)\r\nend",
    "type": "function"
  }, {
    "id": 121,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 122,
    "text": "function _M.zmq_recvmsg(skt, msg, flags)\r\n  return libzmq3.zmq_recvmsg(skt, msg, flags)\r\nend",
    "type": "function"
  }, {
    "id": 123,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 124,
    "text": "function _M.zmq_socket_monitor(skt, addr, events)\r\n  return libzmq3.zmq_socket_monitor(skt, addr, events)\r\nend",
    "type": "function"
  }, {
    "id": 125,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 126,
    "text": "function _M.zmq_msg_init(msg)\r\n  msg = msg or ffi.new(zmq_msg_t)\r\n  if 0 == libzmq3.zmq_msg_init(msg) then\r\n    return msg\r\n  end\r\n  return\r\nend",
    "type": "function"
  }, {
    "id": 127,
    "text": "msg = msg or ffi.new(zmq_msg_t)",
    "type": "statement:assign"
  }, {
    "id": 128,
    "text": "if 0 == libzmq3.zmq_msg_init(msg) then\r\n    return msg\r\n  end",
    "type": "statement:if"
  }, {
    "id": 129,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 130,
    "text": "function _M.zmq_msg_init_size(msg, len)\r\n  if not len then msg, len  = nil, msg end\r\n  local msg = msg or ffi.new(zmq_msg_t)\r\n  if 0 == libzmq3.zmq_msg_init_size(msg, len) then\r\n    return msg\r\n  end\r\n  return\r\nend",
    "type": "function"
  }, {
    "id": 131,
    "text": "if not len then msg, len  = nil, msg end",
    "type": "statement:if"
  }, {
    "id": 132,
    "text": "msg, len  = nil, msg",
    "type": "statement:assign"
  }, {
    "id": 133,
    "text": "local msg = msg or ffi.new(zmq_msg_t)",
    "type": "statement:localassign"
  }, {
    "id": 134,
    "text": "if 0 == libzmq3.zmq_msg_init_size(msg, len) then\r\n    return msg\r\n  end",
    "type": "statement:if"
  }, {
    "id": 135,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 136,
    "text": "function _M.zmq_msg_data(msg, pos)\r\n  local ptr = libzmq3.zmq_msg_data(msg)\r\n  pos = pos or 0\r\n  if pos == 0 then return ptr end\r\n  ptr = ffi.cast(pchar_t, ptr) + pos\r\n  return ffi.cast(pvoid_t, ptr)\r\nend",
    "type": "function"
  }, {
    "id": 137,
    "text": "local ptr = libzmq3.zmq_msg_data(msg)",
    "type": "statement:localassign"
  }, {
    "id": 138,
    "text": "pos = pos or 0",
    "type": "statement:assign"
  }, {
    "id": 139,
    "text": "if pos == 0 then return ptr end",
    "type": "statement:if"
  }, {
    "id": 140,
    "text": "ptr = ffi.cast(pchar_t, ptr) + pos",
    "type": "statement:assign"
  }, {
    "id": 141,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 142,
    "text": "function _M.zmq_msg_size(msg)\r\n  return libzmq3.zmq_msg_size(msg)\r\nend",
    "type": "function"
  }, {
    "id": 143,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 144,
    "text": "function _M.zmq_msg_close(msg)\r\n  libzmq3.zmq_msg_close(msg)\r\nend",
    "type": "function"
  }, {
    "id": 145,
    "text": "libzmq3.zmq_msg_close(msg)",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 147,
    "text": "local function get_msg_copy(copy)\r\n  return function (dest, src)\r\n    local new = false\r\n    if not src then \r\n      new, src = true, dest\r\n      dest = _M.zmq_msg_init()\r\n      if not dest then return end\r\n    end\r\n    local ret = copy(dest, src)\r\n    if ret == -1 then\r\n      if new then _M.zmq_msg_close(dest) end\r\n      return\r\n    end\r\n    return dest\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 148,
    "text": "local new = false",
    "type": "statement:localassign"
  }, {
    "id": 149,
    "text": "if not src then \r\n      new, src = true, dest\r\n      dest = _M.zmq_msg_init()\r\n      if not dest then return end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 150,
    "text": "new, src = true, dest",
    "type": "statement:assign"
  }, {
    "id": 151,
    "text": "dest = _M.zmq_msg_init()",
    "type": "statement:assign"
  }, {
    "id": 152,
    "text": "if not dest then return end",
    "type": "statement:if"
  }, {
    "id": 153,
    "text": "local ret = copy(dest, src)",
    "type": "statement:localassign"
  }, {
    "id": 154,
    "text": "if ret == -1 then\r\n      if new then _M.zmq_msg_close(dest) end\r\n      return\r\n    end",
    "type": "statement:if"
  }, {
    "id": 155,
    "text": "if new then _M.zmq_msg_close(dest) end",
    "type": "statement:if"
  }, {
    "id": 156,
    "text": "_M.zmq_msg_close(dest)",
    "type": "statement:functioncall"
  }, {
    "id": 157,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 158,
    "text": "function _M.zmq_msg_set_data(msg, str)\r\n  ffi.copy(_M.zmq_msg_data(msg), str)\r\nend",
    "type": "function"
  }, {
    "id": 159,
    "text": "ffi.copy(_M.zmq_msg_data(msg), str)",
    "type": "statement:functioncall"
  }, {
    "id": 160,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 161,
    "text": "function _M.zmq_msg_get_data(msg)\r\n  return ffi.string(_M.zmq_msg_data(msg), _M.zmq_msg_size(msg))\r\nend",
    "type": "function"
  }, {
    "id": 162,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 163,
    "text": "function _M.zmq_msg_init_string(str)\r\n  local msg = _M.zmq_msg_init_size(#str)\r\n  _M.zmq_msg_set_data(msg, str)\r\n  return msg\r\nend",
    "type": "function"
  }, {
    "id": 164,
    "text": "local msg = _M.zmq_msg_init_size(#str)",
    "type": "statement:localassign"
  }, {
    "id": 165,
    "text": "_M.zmq_msg_set_data(msg, str)",
    "type": "statement:functioncall"
  }, {
    "id": 166,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 167,
    "text": "function _M.zmq_msg_recv(msg, skt, flags)\r\n  return libzmq3.zmq_msg_recv(msg, skt, flags or 0)\r\nend",
    "type": "function"
  }, {
    "id": 168,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 169,
    "text": "function _M.zmq_msg_send(msg, skt, flags)\r\n  return libzmq3.zmq_msg_send(msg, skt, flags or 0)\r\nend",
    "type": "function"
  }, {
    "id": 170,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 171,
    "text": "function _M.zmq_msg_more(msg)\r\n  return libzmq3.zmq_msg_more(msg)\r\nend",
    "type": "function"
  }, {
    "id": 172,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 173,
    "text": "function _M.zmq_msg_get(msg, option)\r\n  return libzmq3.zmq_msg_get(msg, option)\r\nend",
    "type": "function"
  }, {
    "id": 174,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 175,
    "text": "function _M.zmq_msg_set(msg, option, optval)\r\n  return libzmq3.zmq_msg_set(msg, option, optval)\r\nend",
    "type": "function"
  }, {
    "id": 176,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 177,
    "text": "function _M.zmq_msg_gets(msg, option)\r\n  local value = libzmq3.zmq_msg_gets(msg, option)\r\n  if value == NULL then return end\r\n  return ffi.string(value)\r\nend",
    "type": "function"
  }, {
    "id": 178,
    "text": "local value = libzmq3.zmq_msg_gets(msg, option)",
    "type": "statement:localassign"
  }, {
    "id": 179,
    "text": "if value == NULL then return end",
    "type": "statement:if"
  }, {
    "id": 180,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 181,
    "text": "local function alloc_z85_buff(len)\r\n  if len <= TMP_BUF_SIZE then\r\n    if not tmp_buf then\r\n      tmp_buf = ffi.new(vla_char_t, TMP_BUF_SIZE)\r\n    end\r\n    return tmp_buf\r\n  end\r\n  return ffi.new(vla_char_t, len)\r\nend",
    "type": "function"
  }, {
    "id": 182,
    "text": "if len <= TMP_BUF_SIZE then\r\n    if not tmp_buf then\r\n      tmp_buf = ffi.new(vla_char_t, TMP_BUF_SIZE)\r\n    end\r\n    return tmp_buf\r\n  end",
    "type": "statement:if"
  }, {
    "id": 183,
    "text": "if not tmp_buf then\r\n      tmp_buf = ffi.new(vla_char_t, TMP_BUF_SIZE)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 184,
    "text": "tmp_buf = ffi.new(vla_char_t, TMP_BUF_SIZE)",
    "type": "statement:assign"
  }, {
    "id": 185,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 186,
    "text": "function _M.zmq_z85_encode(data)\r\n  local len = math.floor(#data * 1.25 + 1.0001)\r\n  local buf = alloc_z85_buff(len)\r\n  local ret = libzmq3.zmq_z85_encode(buf, data, #data)\r\n  if ret == NULL then error(\"size of the block must be divisible by 4\") end\r\n  return ffi.string(buf, len - 1)\r\nend",
    "type": "function"
  }, {
    "id": 187,
    "text": "local len = math.floor(#data * 1.25 + 1.0001)",
    "type": "statement:localassign"
  }, {
    "id": 188,
    "text": "local buf = alloc_z85_buff(len)",
    "type": "statement:localassign"
  }, {
    "id": 189,
    "text": "local ret = libzmq3.zmq_z85_encode(buf, data, #data)",
    "type": "statement:localassign"
  }, {
    "id": 190,
    "text": "if ret == NULL then error(\"size of the block must be divisible by 4\") end",
    "type": "statement:if"
  }, {
    "id": 191,
    "text": "error(\"size of the block must be divisible by 4\")",
    "type": "statement:functioncall"
  }, {
    "id": 192,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 193,
    "text": "function _M.zmq_z85_decode(data)\r\n  local len = math.floor(#data * 0.8 + 0.0001)\r\n  local buf = alloc_z85_buff(len)\r\n  local ret = libzmq3.zmq_z85_decode(buf, data)\r\n  if ret == NULL then error(\"size of the block must be divisible by 5\") end\r\n  return ffi.string(buf, len)\r\nend",
    "type": "function"
  }, {
    "id": 194,
    "text": "local len = math.floor(#data * 0.8 + 0.0001)",
    "type": "statement:localassign"
  }, {
    "id": 195,
    "text": "local ret = libzmq3.zmq_z85_decode(buf, data)",
    "type": "statement:localassign"
  }, {
    "id": 196,
    "text": "if ret == NULL then error(\"size of the block must be divisible by 5\") end",
    "type": "statement:if"
  }, {
    "id": 197,
    "text": "error(\"size of the block must be divisible by 5\")",
    "type": "statement:functioncall"
  }, {
    "id": 198,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 199,
    "text": "function _M.zmq_curve_keypair(as_binary)\r\n  local public_key = ffi.new(vla_char_t, 41)\r\n  local secret_key = ffi.new(vla_char_t, 41)\r\n  local ret = libzmq3.zmq_curve_keypair(public_key, secret_key)\r\n  if ret == -1 then return -1 end\r\n  if not as_binary then\r\n    return ffi.string(public_key, 40), ffi.string(secret_key, 40)\r\n  end\r\n  local public_key_bin = ffi.new(vla_char_t, 32)\r\n  local secret_key_bin = ffi.new(vla_char_t, 32)\r\n\r\n  libzmq3.zmq_z85_decode(public_key_bin, public_key)\r\n  libzmq3.zmq_z85_decode(secret_key_bin, secret_key)\r\n\r\n  return ffi.string(public_key_bin, 32), ffi.string(secret_key_bin, 32)\r\nend",
    "type": "function"
  }, {
    "id": 200,
    "text": "local public_key = ffi.new(vla_char_t, 41)",
    "type": "statement:localassign"
  }, {
    "id": 201,
    "text": "local secret_key = ffi.new(vla_char_t, 41)",
    "type": "statement:localassign"
  }, {
    "id": 202,
    "text": "local ret = libzmq3.zmq_curve_keypair(public_key, secret_key)",
    "type": "statement:localassign"
  }, {
    "id": 203,
    "text": "if ret == -1 then return -1 end",
    "type": "statement:if"
  }, {
    "id": 204,
    "text": "if not as_binary then\r\n    return ffi.string(public_key, 40), ffi.string(secret_key, 40)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 205,
    "text": "local public_key_bin = ffi.new(vla_char_t, 32)",
    "type": "statement:localassign"
  }, {
    "id": 206,
    "text": "local secret_key_bin = ffi.new(vla_char_t, 32)",
    "type": "statement:localassign"
  }, {
    "id": 207,
    "text": "libzmq3.zmq_z85_decode(public_key_bin, public_key)",
    "type": "statement:functioncall"
  }, {
    "id": 208,
    "text": "libzmq3.zmq_z85_decode(secret_key_bin, secret_key)",
    "type": "statement:functioncall"
  }, {
    "id": 209,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 210,
    "text": "function _M.zmq_recv_event(skt, flags)\r\n    local msg = _M.zmq_msg_init(msg)\r\n    if not msg then return end\r\n\r\n    local ret = _M.zmq_msg_recv(msg, skt, flags)\r\n    if ret == -1 then\r\n      _M.zmq_msg_close(msg)\r\n      return\r\n    end\r\n\r\n    assert(_M.zmq_msg_size(msg) >= event_size)\r\n    assert(_M.zmq_msg_more(msg) == 0)\r\n\r\n    ffi.copy(event, _M.zmq_msg_data(msg), event_size)\r\n    local addr\r\n    if event.data.connected.addr ~= NULL then\r\n      addr = ffi.string(event.data.connected.addr)\r\n    end\r\n\r\n    _M.zmq_msg_close(msg)\r\n    return event.event, event.data.connected.fd, addr\r\n  end",
    "type": "function"
  }, {
    "id": 211,
    "text": "local msg = _M.zmq_msg_init(msg)",
    "type": "statement:localassign"
  }, {
    "id": 212,
    "text": "if not msg then return end",
    "type": "statement:if"
  }, {
    "id": 213,
    "text": "local ret = _M.zmq_msg_recv(msg, skt, flags)",
    "type": "statement:localassign"
  }, {
    "id": 214,
    "text": "if ret == -1 then\r\n      _M.zmq_msg_close(msg)\r\n      return\r\n    end",
    "type": "statement:if"
  }, {
    "id": 215,
    "text": "_M.zmq_msg_close(msg)",
    "type": "statement:functioncall"
  }, {
    "id": 216,
    "text": "assert(_M.zmq_msg_size(msg) >= event_size)",
    "type": "statement:functioncall"
  }, {
    "id": 217,
    "text": "assert(_M.zmq_msg_more(msg) == 0)",
    "type": "statement:functioncall"
  }, {
    "id": 218,
    "text": "ffi.copy(event, _M.zmq_msg_data(msg), event_size)",
    "type": "statement:functioncall"
  }, {
    "id": 219,
    "text": "local addr",
    "type": "statement:localassign"
  }, {
    "id": 220,
    "text": "if event.data.connected.addr ~= NULL then\r\n      addr = ffi.string(event.data.connected.addr)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 221,
    "text": "addr = ffi.string(event.data.connected.addr)",
    "type": "statement:assign"
  }, {
    "id": 222,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 223,
    "text": "function _M.zmq_recv_event(skt, flags)\r\n    local msg = _M.zmq_msg_init(msg)\r\n    if not msg then return end\r\n\r\n    local ret = _M.zmq_msg_recv(msg, skt, flags)\r\n    if ret == -1 then\r\n      _M.zmq_msg_close(msg)\r\n      return\r\n    end\r\n\r\n    -- assert(_M.zmq_msg_more(msg) ~= 0)\r\n\r\n    local buf  = ffi.cast(pchar_t, _M.zmq_msg_data(msg))\r\n    assert(_M.zmq_msg_size(msg) == (int16_size + int32_size))\r\n\r\n    ffi.copy(event, buf, int16_size)\r\n    ffi.copy(value, buf + int16_size, int32_size)\r\n\r\n    ret = _M.zmq_msg_recv(msg, skt, _M.FLAGS.ZMQ_DONTWAIT)\r\n    if ret == -1 then\r\n      _M.zmq_msg_close(msg)\r\n      return\r\n    end\r\n\r\n    local addr = _M.zmq_msg_get_data(msg)\r\n    _M.zmq_msg_close(msg)\r\n\r\n    -- assert(_M.zmq_msg_more(msg) == 0)\r\n\r\n    return event[0], value[0], addr\r\n  end",
    "type": "function"
  }, {
    "id": 224,
    "text": "local buf  = ffi.cast(pchar_t, _M.zmq_msg_data(msg))",
    "type": "statement:localassign"
  }, {
    "id": 225,
    "text": "assert(_M.zmq_msg_size(msg) == (int16_size + int32_size))",
    "type": "statement:functioncall"
  }, {
    "id": 226,
    "text": "ffi.copy(event, buf, int16_size)",
    "type": "statement:functioncall"
  }, {
    "id": 227,
    "text": "ffi.copy(value, buf + int16_size, int32_size)",
    "type": "statement:functioncall"
  }, {
    "id": 228,
    "text": "ret = _M.zmq_msg_recv(msg, skt, _M.FLAGS.ZMQ_DONTWAIT)",
    "type": "statement:assign"
  }, {
    "id": 229,
    "text": "local addr = _M.zmq_msg_get_data(msg)",
    "type": "statement:localassign"
  }, {
    "id": 230,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 231,
    "text": "function _M.zmq_stopwatch_start()\r\n    return libzmq3.zmq_stopwatch_start()\r\n  end",
    "type": "function"
  }, {
    "id": 232,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 233,
    "text": "function _M.zmq_stopwatch_stop(watch)\r\n    return tonumber(libzmq3.zmq_stopwatch_stop(watch))\r\n  end",
    "type": "function"
  }, {
    "id": 234,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 235,
    "text": "function _M.zmq_mnemoerror(errno)\r\n  return ERRORS_MNEMO[errno] or \"UNKNOWN\"\r\nend",
    "type": "function"
  }, {
    "id": 236,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 237,
    "text": "function()\r\n    local m = lib[elem]\r\n    if nil ~= m then return m end\r\n    error(\"not found\")\r\n  end",
    "type": "function"
  }, {
    "id": 238,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 239,
    "text": "function (skt, option, optval) \r\n    local size = ffi.sizeof(t)\r\n    local val  = ffi.new(ct, optval)\r\n    return libzmq3.zmq_setsockopt(skt, option, val, size)\r\n  end",
    "type": "function"
  }, {
    "id": 240,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 241,
    "text": "function (skt, option) \r\n    local size = ffi.new(asize_t, ffi.sizeof(t))\r\n    local val  = ffi.new(ct, 0)\r\n    if -1 ~= libzmq3.zmq_getsockopt(skt, option, val, size) then\r\n      return val[0]\r\n    end\r\n    return\r\n  end",
    "type": "function"
  }, {
    "id": 242,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 243,
    "text": "function (dest, src)\r\n    local new = false\r\n    if not src then \r\n      new, src = true, dest\r\n      dest = _M.zmq_msg_init()\r\n      if not dest then return end\r\n    end\r\n    local ret = copy(dest, src)\r\n    if ret == -1 then\r\n      if new then _M.zmq_msg_close(dest) end\r\n      return\r\n    end\r\n    return dest\r\n  end",
    "type": "function"
  }, {
    "id": 244,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 245,
    "text": "",
    "type": "function container"
  }, {
    "id": 246,
    "text": "local function ptrtohex(ptr)\r\n  return bintohex(api.ptrtostr(ptr))\r\nend",
    "type": "function"
  }, {
    "id": 247,
    "text": "function _M.begin()\r\n  local total_tc = 0\r\n  local total_tests = 0\r\n\r\n  msgs = {} -- e\r\n\r\n  for tcname in lunit.testcases() do\r\n    total_tc = total_tc + 1\r\n    for testname, test in lunit.tests(tcname) do\r\n      total_tests = total_tests + 1\r\n    end\r\n  end\r\n\r\n  printformat(\"Loaded testsuite with %d tests in %d testcases.\\n\\n\", total_tests, total_tc)\r\nend",
    "type": "function"
  }, {
    "id": 248,
    "text": "function _M.run(testcasename, testname)\r\n  io.write(rfill(testcasename .. '.' .. testname, 70)) io.flush()\r\nend",
    "type": "function"
  }, {
    "id": 249,
    "text": "function _M.err(fullname, message, traceback)\r\n  io.write(\" - error!\\n\")\r\n  io.write(\"Error! (\"..fullname..\"):\\n\"..message..\"\\n\\t\"..table.concat(traceback, \"\\n\\t\"), \"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 250,
    "text": "function _M.fail(fullname, where, message, usermessage)\r\n  io.write(\" - fail!\\n\")\r\n  io.write(string.format(\"Failure (%s): %s\\n%s: %s\", fullname, usermessage or \"\", where, message), \"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 251,
    "text": "function _M.skip(fullname, where, message, usermessage)\r\n  io.write(\" - skip!\\n\")\r\n  io.write(string.format(\"Skip (%s): %s\\n%s: %s\", fullname, usermessage or \"\", where, message), \"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 252,
    "text": "function _M.pass(testcasename, testname)\r\n  io.write(\" - pass!\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 253,
    "text": "function _M.done()\r\n  printformat(\"\\n\\n%d Assertions checked.\\n\", lunit.stats.assertions )\r\n  print()\r\n\r\n  printformat(\"Testsuite finished (%d passed, %d failed, %d errors, %d skipped).\\n\",\r\n      lunit.stats.passed, lunit.stats.failed, lunit.stats.errors, lunit.stats.skipped )\r\nend",
    "type": "function"
  }, {
    "id": 254,
    "text": "copy",
    "type": "global function"
  }, {
    "id": 255,
    "text": "cdef",
    "type": "global function"
  }, {
    "id": 256,
    "text": "string",
    "type": "global function"
  }, {
    "id": 257,
    "text": "new",
    "type": "global function"
  }, {
    "id": 258,
    "text": "cast",
    "type": "global function"
  }, {
    "id": 259,
    "text": "gc",
    "type": "global function"
  }, {
    "id": 260,
    "text": "typeof",
    "type": "global function"
  }, {
    "id": 261,
    "text": "sizeof",
    "type": "global function"
  }, {
    "id": 262,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 263,
    "text": "copy",
    "type": "global function"
  }, {
    "id": 264,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 265,
    "text": "zmq_proxy_steerable",
    "type": "global function"
  }, {
    "id": 266,
    "text": "type",
    "type": "global function"
  }, {
    "id": 267,
    "text": "zmq_ctx_term",
    "type": "global function"
  }, {
    "id": 268,
    "text": "zmq_msg_more",
    "type": "global function"
  }, {
    "id": 269,
    "text": "floor",
    "type": "global function"
  }, {
    "id": 270,
    "text": "zmq_socket_monitor",
    "type": "global function"
  }, {
    "id": 271,
    "text": "zmq_device",
    "type": "global function"
  }, {
    "id": 272,
    "text": "zmq_stopwatch_start",
    "type": "global function"
  }, {
    "id": 273,
    "text": "zmq_msg_get",
    "type": "global function"
  }, {
    "id": 274,
    "text": "zmq_msg_size",
    "type": "global function"
  }, {
    "id": 275,
    "text": "zmq_ctx_new",
    "type": "global function"
  }, {
    "id": 276,
    "text": "zmq_sendmsg",
    "type": "global function"
  }, {
    "id": 277,
    "text": "zmq_proxy",
    "type": "global function"
  }, {
    "id": 278,
    "text": "zmq_ctx_shutdown",
    "type": "global function"
  }, {
    "id": 279,
    "text": "zmq_msg_init",
    "type": "global function"
  }, {
    "id": 280,
    "text": "zmq_setsockopt",
    "type": "global function"
  }, {
    "id": 281,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 282,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 283,
    "text": "zmq_recvmsg",
    "type": "global function"
  }, {
    "id": 284,
    "text": "zmq_msg_set",
    "type": "global function"
  }, {
    "id": 285,
    "text": "zmq_unbind",
    "type": "global function"
  }, {
    "id": 286,
    "text": "zmq_msg_send",
    "type": "global function"
  }, {
    "id": 287,
    "text": "zmq_poll",
    "type": "global function"
  }, {
    "id": 288,
    "text": "zmq_strerror",
    "type": "global function"
  }, {
    "id": 289,
    "text": "zmq_msg_init_size",
    "type": "global function"
  }, {
    "id": 290,
    "text": "require",
    "type": "global function"
  }, {
    "id": 291,
    "text": "zmq_msg_gets",
    "type": "global function"
  }, {
    "id": 292,
    "text": "zmq_msg_data",
    "type": "global function"
  }, {
    "id": 293,
    "text": "zmq_send",
    "type": "global function"
  }, {
    "id": 294,
    "text": "error",
    "type": "global function"
  }, {
    "id": 295,
    "text": "zmq_msg_recv",
    "type": "global function"
  }, {
    "id": 296,
    "text": "zmq_errno",
    "type": "global function"
  }, {
    "id": 297,
    "text": "zmq_ctx_destroy",
    "type": "global function"
  }, {
    "id": 298,
    "text": "zmq_disconnect",
    "type": "global function"
  }, {
    "id": 299,
    "text": "zmq_ctx_get",
    "type": "global function"
  }, {
    "id": 300,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 301,
    "text": "zmq_version",
    "type": "global function"
  }, {
    "id": 302,
    "text": "zmq_recv",
    "type": "global function"
  }, {
    "id": 303,
    "text": "zmq_bind",
    "type": "global function"
  }, {
    "id": 304,
    "text": "zmq_msg_close",
    "type": "global function"
  }, {
    "id": 305,
    "text": "zmq_ctx_set",
    "type": "global function"
  }, {
    "id": 306,
    "text": "zmq_socket",
    "type": "global function"
  }, {
    "id": 307,
    "text": "zmq_z85_decode",
    "type": "global function"
  }, {
    "id": 308,
    "text": "zmq_close",
    "type": "global function"
  }, {
    "id": 309,
    "text": "zmq_getsockopt",
    "type": "global function"
  }, {
    "id": 310,
    "text": "zmq_curve_keypair",
    "type": "global function"
  }, {
    "id": 311,
    "text": "zmq_z85_encode",
    "type": "global function"
  }, {
    "id": 312,
    "text": "zmq_connect",
    "type": "global function"
  }, {
    "id": 313,
    "text": "zmq_stopwatch_stop",
    "type": "global function"
  }, {
    "id": 314,
    "text": "",
    "type": "variable container"
  }, {
    "id": 315,
    "text": "",
    "type": "require container"
  }, {
    "id": 316,
    "text": "",
    "type": "local variable"
  }, {
    "id": 317,
    "text": "",
    "type": "n/a"
  }, {
    "id": 318,
    "text": "",
    "type": "local variable"
  }, {
    "id": 319,
    "text": "",
    "type": "n/a"
  }, {
    "id": 320,
    "text": "",
    "type": "local variable"
  }, {
    "id": 321,
    "text": "",
    "type": "local variable"
  }, {
    "id": 322,
    "text": "",
    "type": "n/a"
  }, {
    "id": 323,
    "text": "",
    "type": "local variable"
  }, {
    "id": 324,
    "text": "",
    "type": "local variable"
  }, {
    "id": 325,
    "text": "",
    "type": "n/a"
  }, {
    "id": 326,
    "text": "",
    "type": "local variable"
  }, {
    "id": 327,
    "text": "",
    "type": "n/a"
  }, {
    "id": 328,
    "text": "",
    "type": "local variable"
  }, {
    "id": 329,
    "text": "",
    "type": "n/a"
  }, {
    "id": 330,
    "text": "",
    "type": "local variable"
  }, {
    "id": 331,
    "text": "",
    "type": "n/a"
  }, {
    "id": 332,
    "text": "",
    "type": "local variable"
  }, {
    "id": 333,
    "text": "",
    "type": "n/a"
  }, {
    "id": 334,
    "text": "",
    "type": "local variable"
  }, {
    "id": 335,
    "text": "",
    "type": "n/a"
  }, {
    "id": 336,
    "text": "",
    "type": "local variable"
  }, {
    "id": 337,
    "text": "",
    "type": "n/a"
  }, {
    "id": 338,
    "text": "",
    "type": "local variable"
  }, {
    "id": 339,
    "text": "",
    "type": "n/a"
  }, {
    "id": 340,
    "text": "",
    "type": "local variable"
  }, {
    "id": 341,
    "text": "",
    "type": "n/a"
  }, {
    "id": 342,
    "text": "",
    "type": "local variable"
  }, {
    "id": 343,
    "text": "",
    "type": "n/a"
  }, {
    "id": 344,
    "text": "",
    "type": "local variable"
  }, {
    "id": 345,
    "text": "",
    "type": "n/a"
  }, {
    "id": 346,
    "text": "",
    "type": "local variable"
  }, {
    "id": 347,
    "text": "",
    "type": "n/a"
  }, {
    "id": 348,
    "text": "",
    "type": "local variable"
  }, {
    "id": 349,
    "text": "",
    "type": "n/a"
  }, {
    "id": 350,
    "text": "",
    "type": "local variable"
  }, {
    "id": 351,
    "text": "",
    "type": "n/a"
  }, {
    "id": 352,
    "text": "",
    "type": "local variable"
  }, {
    "id": 353,
    "text": "",
    "type": "n/a"
  }, {
    "id": 354,
    "text": "",
    "type": "local variable"
  }, {
    "id": 355,
    "text": "",
    "type": "n/a"
  }, {
    "id": 356,
    "text": "",
    "type": "local variable"
  }, {
    "id": 357,
    "text": "",
    "type": "local variable"
  }, {
    "id": 358,
    "text": "",
    "type": "local variable"
  }, {
    "id": 359,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 360,
    "text": "",
    "type": "local variable"
  }, {
    "id": 361,
    "text": "",
    "type": "n/a"
  }, {
    "id": 362,
    "text": "",
    "type": "local variable"
  }, {
    "id": 363,
    "text": "",
    "type": "local variable"
  }, {
    "id": 364,
    "text": "",
    "type": "local variable"
  }, {
    "id": 365,
    "text": "",
    "type": "n/a"
  }, {
    "id": 366,
    "text": "",
    "type": "local variable"
  }, {
    "id": 367,
    "text": "",
    "type": "n/a"
  }, {
    "id": 368,
    "text": "",
    "type": "local variable"
  }, {
    "id": 369,
    "text": "",
    "type": "n/a"
  }, {
    "id": 370,
    "text": "",
    "type": "local variable"
  }, {
    "id": 371,
    "text": "",
    "type": "n/a"
  }, {
    "id": 372,
    "text": "",
    "type": "local variable"
  }, {
    "id": 373,
    "text": "",
    "type": "n/a"
  }, {
    "id": 374,
    "text": "",
    "type": "local variable"
  }, {
    "id": 375,
    "text": "",
    "type": "local variable"
  }, {
    "id": 376,
    "text": "",
    "type": "local variable"
  }, {
    "id": 377,
    "text": "",
    "type": "n/a"
  }, {
    "id": 378,
    "text": "",
    "type": "local variable"
  }, {
    "id": 379,
    "text": "",
    "type": "n/a"
  }, {
    "id": 380,
    "text": "",
    "type": "local variable"
  }, {
    "id": 381,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 382,
    "text": "",
    "type": "global variable"
  }, {
    "id": 383,
    "text": "",
    "type": "n/a"
  }, {
    "id": 384,
    "text": "",
    "type": "global variable"
  }, {
    "id": 385,
    "text": "",
    "type": "n/a"
  }, {
    "id": 386,
    "text": "",
    "type": "global variable"
  }, {
    "id": 387,
    "text": "",
    "type": "n/a"
  }, {
    "id": 388,
    "text": "",
    "type": "global variable"
  }, {
    "id": 389,
    "text": "",
    "type": "n/a"
  }, {
    "id": 390,
    "text": "",
    "type": "global variable"
  }, {
    "id": 391,
    "text": "",
    "type": "n/a"
  }, {
    "id": 392,
    "text": "",
    "type": "global variable"
  }, {
    "id": 393,
    "text": "",
    "type": "n/a"
  }, {
    "id": 394,
    "text": "",
    "type": "global variable"
  }, {
    "id": 395,
    "text": "",
    "type": "n/a"
  }, {
    "id": 396,
    "text": "",
    "type": "global variable"
  }, {
    "id": 397,
    "text": "",
    "type": "n/a"
  }, {
    "id": 398,
    "text": "",
    "type": "global variable"
  }, {
    "id": 399,
    "text": "",
    "type": "n/a"
  }, {
    "id": 400,
    "text": "",
    "type": "global variable"
  }, {
    "id": 401,
    "text": "",
    "type": "n/a"
  }, {
    "id": 402,
    "text": "",
    "type": "global variable"
  }, {
    "id": 403,
    "text": "",
    "type": "n/a"
  }, {
    "id": 404,
    "text": "",
    "type": "global variable"
  }, {
    "id": 405,
    "text": "",
    "type": "n/a"
  }, {
    "id": 406,
    "text": "",
    "type": "global variable"
  }, {
    "id": 407,
    "text": "",
    "type": "n/a"
  }, {
    "id": 408,
    "text": "",
    "type": "global variable"
  }, {
    "id": 409,
    "text": "",
    "type": "n/a"
  }, {
    "id": 410,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 411,
    "text": "",
    "type": "interface container"
  }, {
    "id": 412,
    "text": "",
    "type": "interface"
  }, {
    "id": 413,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 414,
    "text": "",
    "type": "local variable"
  }, {
    "id": 415,
    "text": "",
    "type": "interface"
  } ]
}