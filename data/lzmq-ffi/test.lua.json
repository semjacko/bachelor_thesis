{
  "_filename": "test.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lzmq-ffi/test/test.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 5,
    "label": "has",
    "to": 11
  }, {
    "from": 5,
    "label": "has",
    "to": 12
  }, {
    "from": 5,
    "label": "has",
    "to": 13
  }, {
    "from": 5,
    "label": "has",
    "to": 14
  }, {
    "from": 5,
    "label": "has",
    "to": 15
  }, {
    "from": 5,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 17,
    "label": "has",
    "to": 22
  }, {
    "from": 17,
    "label": "has",
    "to": 23
  }, {
    "from": 17,
    "label": "has",
    "to": 24
  }, {
    "from": 17,
    "label": "has",
    "to": 25
  }, {
    "from": 17,
    "label": "has",
    "to": 26
  }, {
    "from": 17,
    "label": "has",
    "to": 25
  }, {
    "from": 17,
    "label": "has",
    "to": 27
  }, {
    "from": 17,
    "label": "has",
    "to": 28
  }, {
    "from": 17,
    "label": "has",
    "to": 29
  }, {
    "from": 17,
    "label": "has",
    "to": 30
  }, {
    "from": 17,
    "label": "has",
    "to": 31
  }, {
    "from": 17,
    "label": "has",
    "to": 32
  }, {
    "from": 17,
    "label": "has",
    "to": 31
  }, {
    "from": 17,
    "label": "has",
    "to": 33
  }, {
    "from": 17,
    "label": "has",
    "to": 34
  }, {
    "from": 17,
    "label": "has",
    "to": 35
  }, {
    "from": 17,
    "label": "has",
    "to": 36
  }, {
    "from": 17,
    "label": "has",
    "to": 37
  }, {
    "from": 17,
    "label": "has",
    "to": 33
  }, {
    "from": 17,
    "label": "has",
    "to": 38
  }, {
    "from": 17,
    "label": "has",
    "to": 39
  }, {
    "from": 17,
    "label": "has",
    "to": 40
  }, {
    "from": 17,
    "label": "has",
    "to": 41
  }, {
    "from": 17,
    "label": "has",
    "to": 42
  }, {
    "from": 17,
    "label": "has",
    "to": 22
  }, {
    "from": 17,
    "label": "has",
    "to": 43
  }, {
    "from": 17,
    "label": "has",
    "to": 44
  }, {
    "from": 17,
    "label": "has",
    "to": 45
  }, {
    "from": 17,
    "label": "has",
    "to": 25
  }, {
    "from": 17,
    "label": "has",
    "to": 46
  }, {
    "from": 17,
    "label": "has",
    "to": 47
  }, {
    "from": 17,
    "label": "has",
    "to": 48
  }, {
    "from": 17,
    "label": "has",
    "to": 49
  }, {
    "from": 17,
    "label": "has",
    "to": 46
  }, {
    "from": 17,
    "label": "has",
    "to": 47
  }, {
    "from": 17,
    "label": "has",
    "to": 50
  }, {
    "from": 17,
    "label": "has",
    "to": 51
  }, {
    "from": 17,
    "label": "has",
    "to": 28
  }, {
    "from": 17,
    "label": "has",
    "to": 29
  }, {
    "from": 17,
    "label": "has",
    "to": 52
  }, {
    "from": 17,
    "label": "has",
    "to": 53
  }, {
    "from": 17,
    "label": "has",
    "to": 54
  }, {
    "from": 17,
    "label": "has",
    "to": 55
  }, {
    "from": 17,
    "label": "has",
    "to": 56
  }, {
    "from": 17,
    "label": "has",
    "to": 57
  }, {
    "from": 17,
    "label": "has",
    "to": 58
  }, {
    "from": 17,
    "label": "has",
    "to": 59
  }, {
    "from": 17,
    "label": "has",
    "to": 25
  }, {
    "from": 17,
    "label": "has",
    "to": 28
  }, {
    "from": 17,
    "label": "has",
    "to": 29
  }, {
    "from": 17,
    "label": "has",
    "to": 60
  }, {
    "from": 17,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 62,
    "label": "has",
    "to": 65
  }, {
    "from": 62,
    "label": "has",
    "to": 66
  }, {
    "from": 62,
    "label": "has",
    "to": 67
  }, {
    "from": 62,
    "label": "has",
    "to": 68
  }, {
    "from": 62,
    "label": "has",
    "to": 69
  }, {
    "from": 62,
    "label": "has",
    "to": 70
  }, {
    "from": 62,
    "label": "has",
    "to": 71
  }, {
    "from": 62,
    "label": "has",
    "to": 72
  }, {
    "from": 62,
    "label": "has",
    "to": 73
  }, {
    "from": 62,
    "label": "has",
    "to": 74
  }, {
    "from": 62,
    "label": "has",
    "to": 75
  }, {
    "from": 62,
    "label": "has",
    "to": 76
  }, {
    "from": 62,
    "label": "has",
    "to": 66
  }, {
    "from": 62,
    "label": "has",
    "to": 77
  }, {
    "from": 62,
    "label": "has",
    "to": 78
  }, {
    "from": 62,
    "label": "has",
    "to": 79
  }, {
    "from": 62,
    "label": "has",
    "to": 80
  }, {
    "from": 62,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 64
  }, {
    "from": 82,
    "label": "has",
    "to": 65
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 82,
    "label": "has",
    "to": 85
  }, {
    "from": 82,
    "label": "has",
    "to": 86
  }, {
    "from": 82,
    "label": "has",
    "to": 87
  }, {
    "from": 82,
    "label": "has",
    "to": 88
  }, {
    "from": 82,
    "label": "has",
    "to": 89
  }, {
    "from": 82,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 82,
    "label": "has",
    "to": 92
  }, {
    "from": 82,
    "label": "has",
    "to": 93
  }, {
    "from": 82,
    "label": "has",
    "to": 78
  }, {
    "from": 82,
    "label": "has",
    "to": 94
  }, {
    "from": 82,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 96,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 96,
    "label": "has",
    "to": 101
  }, {
    "from": 96,
    "label": "has",
    "to": 64
  }, {
    "from": 96,
    "label": "has",
    "to": 84
  }, {
    "from": 96,
    "label": "has",
    "to": 102
  }, {
    "from": 96,
    "label": "has",
    "to": 78
  }, {
    "from": 96,
    "label": "has",
    "to": 64
  }, {
    "from": 96,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 84
  }, {
    "from": 96,
    "label": "has",
    "to": 104
  }, {
    "from": 96,
    "label": "has",
    "to": 78
  }, {
    "from": 96,
    "label": "has",
    "to": 64
  }, {
    "from": 96,
    "label": "has",
    "to": 105
  }, {
    "from": 96,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 84
  }, {
    "from": 106,
    "label": "has",
    "to": 102
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 96,
    "label": "has",
    "to": 104
  }, {
    "from": 96,
    "label": "has",
    "to": 108
  }, {
    "from": 96,
    "label": "has",
    "to": 78
  }, {
    "from": 96,
    "label": "has",
    "to": 109
  }, {
    "from": 96,
    "label": "has",
    "to": 110
  }, {
    "from": 111,
    "label": "has",
    "to": 98
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 113,
    "label": "has",
    "to": 100
  }, {
    "from": 113,
    "label": "has",
    "to": 100
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 115,
    "label": "has",
    "to": 64
  }, {
    "from": 115,
    "label": "has",
    "to": 117
  }, {
    "from": 115,
    "label": "has",
    "to": 118
  }, {
    "from": 115,
    "label": "has",
    "to": 119
  }, {
    "from": 115,
    "label": "has",
    "to": 120
  }, {
    "from": 115,
    "label": "has",
    "to": 121
  }, {
    "from": 115,
    "label": "has",
    "to": 122
  }, {
    "from": 115,
    "label": "has",
    "to": 123
  }, {
    "from": 115,
    "label": "has",
    "to": 124
  }, {
    "from": 115,
    "label": "has",
    "to": 125
  }, {
    "from": 115,
    "label": "has",
    "to": 126
  }, {
    "from": 115,
    "label": "has",
    "to": 127
  }, {
    "from": 115,
    "label": "has",
    "to": 128
  }, {
    "from": 115,
    "label": "has",
    "to": 129
  }, {
    "from": 115,
    "label": "has",
    "to": 130
  }, {
    "from": 115,
    "label": "has",
    "to": 131
  }, {
    "from": 115,
    "label": "has",
    "to": 132
  }, {
    "from": 115,
    "label": "has",
    "to": 133
  }, {
    "from": 115,
    "label": "has",
    "to": 134
  }, {
    "from": 115,
    "label": "has",
    "to": 135
  }, {
    "from": 115,
    "label": "has",
    "to": 136
  }, {
    "from": 115,
    "label": "has",
    "to": 137
  }, {
    "from": 115,
    "label": "has",
    "to": 138
  }, {
    "from": 115,
    "label": "has",
    "to": 139
  }, {
    "from": 115,
    "label": "has",
    "to": 140
  }, {
    "from": 115,
    "label": "has",
    "to": 141
  }, {
    "from": 115,
    "label": "has",
    "to": 134
  }, {
    "from": 115,
    "label": "has",
    "to": 135
  }, {
    "from": 115,
    "label": "has",
    "to": 136
  }, {
    "from": 115,
    "label": "has",
    "to": 136
  }, {
    "from": 115,
    "label": "has",
    "to": 142
  }, {
    "from": 115,
    "label": "has",
    "to": 119
  }, {
    "from": 115,
    "label": "has",
    "to": 143
  }, {
    "from": 115,
    "label": "has",
    "to": 134
  }, {
    "from": 115,
    "label": "has",
    "to": 135
  }, {
    "from": 115,
    "label": "has",
    "to": 136
  }, {
    "from": 115,
    "label": "has",
    "to": 144
  }, {
    "from": 115,
    "label": "has",
    "to": 145
  }, {
    "from": 115,
    "label": "has",
    "to": 146
  }, {
    "from": 115,
    "label": "has",
    "to": 78
  }, {
    "from": 115,
    "label": "has",
    "to": 147
  }, {
    "from": 115,
    "label": "has",
    "to": 148
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 149,
    "label": "has",
    "to": 151
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 149,
    "label": "has",
    "to": 153
  }, {
    "from": 149,
    "label": "has",
    "to": 154
  }, {
    "from": 149,
    "label": "has",
    "to": 155
  }, {
    "from": 149,
    "label": "has",
    "to": 156
  }, {
    "from": 149,
    "label": "has",
    "to": 157
  }, {
    "from": 149,
    "label": "has",
    "to": 158
  }, {
    "from": 149,
    "label": "has",
    "to": 119
  }, {
    "from": 149,
    "label": "has",
    "to": 159
  }, {
    "from": 149,
    "label": "has",
    "to": 64
  }, {
    "from": 149,
    "label": "has",
    "to": 160
  }, {
    "from": 149,
    "label": "has",
    "to": 161
  }, {
    "from": 149,
    "label": "has",
    "to": 162
  }, {
    "from": 162,
    "label": "has",
    "to": 163
  }, {
    "from": 162,
    "label": "has",
    "to": 164
  }, {
    "from": 162,
    "label": "has",
    "to": 165
  }, {
    "from": 162,
    "label": "has",
    "to": 166
  }, {
    "from": 162,
    "label": "has",
    "to": 167
  }, {
    "from": 149,
    "label": "has",
    "to": 168
  }, {
    "from": 149,
    "label": "has",
    "to": 169
  }, {
    "from": 149,
    "label": "has",
    "to": 170
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 171,
    "label": "has",
    "to": 173
  }, {
    "from": 171,
    "label": "has",
    "to": 174
  }, {
    "from": 171,
    "label": "has",
    "to": 175
  }, {
    "from": 171,
    "label": "has",
    "to": 176
  }, {
    "from": 171,
    "label": "has",
    "to": 177
  }, {
    "from": 171,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 178,
    "label": "has",
    "to": 180
  }, {
    "from": 171,
    "label": "has",
    "to": 181
  }, {
    "from": 171,
    "label": "has",
    "to": 182
  }, {
    "from": 171,
    "label": "has",
    "to": 183
  }, {
    "from": 171,
    "label": "has",
    "to": 184
  }, {
    "from": 171,
    "label": "has",
    "to": 185
  }, {
    "from": 171,
    "label": "has",
    "to": 186
  }, {
    "from": 186,
    "label": "has",
    "to": 187
  }, {
    "from": 186,
    "label": "has",
    "to": 188
  }, {
    "from": 186,
    "label": "has",
    "to": 189
  }, {
    "from": 186,
    "label": "has",
    "to": 190
  }, {
    "from": 186,
    "label": "has",
    "to": 191
  }, {
    "from": 186,
    "label": "has",
    "to": 192
  }, {
    "from": 192,
    "label": "has",
    "to": 193
  }, {
    "from": 186,
    "label": "has",
    "to": 194
  }, {
    "from": 186,
    "label": "has",
    "to": 195
  }, {
    "from": 186,
    "label": "has",
    "to": 196
  }, {
    "from": 186,
    "label": "has",
    "to": 197
  }, {
    "from": 186,
    "label": "has",
    "to": 198
  }, {
    "from": 186,
    "label": "has",
    "to": 199
  }, {
    "from": 186,
    "label": "has",
    "to": 200
  }, {
    "from": 186,
    "label": "has",
    "to": 183
  }, {
    "from": 186,
    "label": "has",
    "to": 201
  }, {
    "from": 171,
    "label": "has",
    "to": 202
  }, {
    "from": 171,
    "label": "has",
    "to": 203
  }, {
    "from": 171,
    "label": "has",
    "to": 204
  }, {
    "from": 171,
    "label": "has",
    "to": 205
  }, {
    "from": 171,
    "label": "has",
    "to": 206
  }, {
    "from": 171,
    "label": "has",
    "to": 207
  }, {
    "from": 171,
    "label": "has",
    "to": 208
  }, {
    "from": 171,
    "label": "has",
    "to": 207
  }, {
    "from": 171,
    "label": "has",
    "to": 209
  }, {
    "from": 171,
    "label": "has",
    "to": 210
  }, {
    "from": 211,
    "label": "has",
    "to": 212
  }, {
    "from": 211,
    "label": "has",
    "to": 213
  }, {
    "from": 211,
    "label": "has",
    "to": 214
  }, {
    "from": 211,
    "label": "has",
    "to": 215
  }, {
    "from": 215,
    "label": "has",
    "to": 216
  }, {
    "from": 211,
    "label": "has",
    "to": 217
  }, {
    "from": 211,
    "label": "has",
    "to": 218
  }, {
    "from": 211,
    "label": "has",
    "to": 219
  }, {
    "from": 211,
    "label": "has",
    "to": 220
  }, {
    "from": 211,
    "label": "has",
    "to": 221
  }, {
    "from": 211,
    "label": "has",
    "to": 215
  }, {
    "from": 215,
    "label": "has",
    "to": 216
  }, {
    "from": 211,
    "label": "has",
    "to": 222
  }, {
    "from": 211,
    "label": "has",
    "to": 218
  }, {
    "from": 211,
    "label": "has",
    "to": 223
  }, {
    "from": 211,
    "label": "has",
    "to": 220
  }, {
    "from": 211,
    "label": "has",
    "to": 224
  }, {
    "from": 211,
    "label": "has",
    "to": 225
  }, {
    "from": 211,
    "label": "has",
    "to": 226
  }, {
    "from": 227,
    "label": "has",
    "to": 228
  }, {
    "from": 227,
    "label": "has",
    "to": 229
  }, {
    "from": 227,
    "label": "has",
    "to": 230
  }, {
    "from": 227,
    "label": "has",
    "to": 231
  }, {
    "from": 227,
    "label": "has",
    "to": 214
  }, {
    "from": 227,
    "label": "has",
    "to": 213
  }, {
    "from": 227,
    "label": "has",
    "to": 232
  }, {
    "from": 232,
    "label": "has",
    "to": 233
  }, {
    "from": 227,
    "label": "has",
    "to": 234
  }, {
    "from": 234,
    "label": "has",
    "to": 235
  }, {
    "from": 234,
    "label": "has",
    "to": 236
  }, {
    "from": 234,
    "label": "has",
    "to": 237
  }, {
    "from": 234,
    "label": "has",
    "to": 238
  }, {
    "from": 238,
    "label": "has",
    "to": 239
  }, {
    "from": 238,
    "label": "has",
    "to": 240
  }, {
    "from": 238,
    "label": "has",
    "to": 241
  }, {
    "from": 238,
    "label": "has",
    "to": 242
  }, {
    "from": 238,
    "label": "has",
    "to": 243
  }, {
    "from": 243,
    "label": "has",
    "to": 236
  }, {
    "from": 243,
    "label": "has",
    "to": 244
  }, {
    "from": 243,
    "label": "has",
    "to": 245
  }, {
    "from": 243,
    "label": "has",
    "to": 237
  }, {
    "from": 243,
    "label": "has",
    "to": 246
  }, {
    "from": 246,
    "label": "has",
    "to": 247
  }, {
    "from": 227,
    "label": "has",
    "to": 248
  }, {
    "from": 248,
    "label": "has",
    "to": 235
  }, {
    "from": 248,
    "label": "has",
    "to": 249
  }, {
    "from": 248,
    "label": "has",
    "to": 237
  }, {
    "from": 248,
    "label": "has",
    "to": 250
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 250,
    "label": "has",
    "to": 216
  }, {
    "from": 250,
    "label": "has",
    "to": 239
  }, {
    "from": 250,
    "label": "has",
    "to": 252
  }, {
    "from": 227,
    "label": "has",
    "to": 253
  }, {
    "from": 227,
    "label": "has",
    "to": 254
  }, {
    "from": 227,
    "label": "has",
    "to": 255
  }, {
    "from": 227,
    "label": "has",
    "to": 256
  }, {
    "from": 227,
    "label": "has",
    "to": 257
  }, {
    "from": 258,
    "label": "has",
    "to": 235
  }, {
    "from": 258,
    "label": "has",
    "to": 236
  }, {
    "from": 258,
    "label": "has",
    "to": 237
  }, {
    "from": 258,
    "label": "has",
    "to": 238
  }, {
    "from": 238,
    "label": "has",
    "to": 239
  }, {
    "from": 238,
    "label": "has",
    "to": 240
  }, {
    "from": 238,
    "label": "has",
    "to": 241
  }, {
    "from": 238,
    "label": "has",
    "to": 242
  }, {
    "from": 238,
    "label": "has",
    "to": 243
  }, {
    "from": 243,
    "label": "has",
    "to": 236
  }, {
    "from": 243,
    "label": "has",
    "to": 244
  }, {
    "from": 243,
    "label": "has",
    "to": 245
  }, {
    "from": 243,
    "label": "has",
    "to": 237
  }, {
    "from": 243,
    "label": "has",
    "to": 246
  }, {
    "from": 246,
    "label": "has",
    "to": 247
  }, {
    "from": 258,
    "label": "has",
    "to": 259
  }, {
    "from": 260,
    "label": "has",
    "to": 235
  }, {
    "from": 260,
    "label": "has",
    "to": 249
  }, {
    "from": 260,
    "label": "has",
    "to": 237
  }, {
    "from": 260,
    "label": "has",
    "to": 250
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 250,
    "label": "has",
    "to": 216
  }, {
    "from": 250,
    "label": "has",
    "to": 239
  }, {
    "from": 250,
    "label": "has",
    "to": 252
  }, {
    "from": 260,
    "label": "has",
    "to": 261
  }, {
    "from": 262,
    "label": "has",
    "to": 263
  }, {
    "from": 262,
    "label": "has",
    "to": 264
  }, {
    "from": 262,
    "label": "has",
    "to": 265
  }, {
    "from": 262,
    "label": "has",
    "to": 266
  }, {
    "from": 262,
    "label": "has",
    "to": 267
  }, {
    "from": 267,
    "label": "has",
    "to": 268
  }, {
    "from": 267,
    "label": "has",
    "to": 269
  }, {
    "from": 262,
    "label": "has",
    "to": 270
  }, {
    "from": 270,
    "label": "has",
    "to": 271
  }, {
    "from": 262,
    "label": "has",
    "to": 272
  }, {
    "from": 272,
    "label": "has",
    "to": 273
  }, {
    "from": 262,
    "label": "has",
    "to": 274
  }, {
    "from": 262,
    "label": "has",
    "to": 275
  }, {
    "from": 262,
    "label": "has",
    "to": 276
  }, {
    "from": 262,
    "label": "has",
    "to": 277
  }, {
    "from": 262,
    "label": "has",
    "to": 278
  }, {
    "from": 262,
    "label": "has",
    "to": 279
  }, {
    "from": 280,
    "label": "has",
    "to": 216
  }, {
    "from": 281,
    "label": "has",
    "to": 216
  }, {
    "from": 282,
    "label": "has",
    "to": 233
  }, {
    "from": 282,
    "label": "has",
    "to": 283
  }, {
    "from": 284,
    "label": "has",
    "to": 236
  }, {
    "from": 284,
    "label": "has",
    "to": 244
  }, {
    "from": 284,
    "label": "has",
    "to": 245
  }, {
    "from": 284,
    "label": "has",
    "to": 237
  }, {
    "from": 284,
    "label": "has",
    "to": 246
  }, {
    "from": 246,
    "label": "has",
    "to": 247
  }, {
    "from": 284,
    "label": "has",
    "to": 285
  }, {
    "from": 289,
    "label": "has",
    "to": 268
  }, {
    "from": 289,
    "label": "has",
    "to": 269
  }, {
    "from": 289,
    "label": "has",
    "to": 290
  }, {
    "from": 291,
    "label": "has",
    "to": 271
  }, {
    "from": 292,
    "label": "has",
    "to": 273
  }, {
    "from": 293,
    "label": "has",
    "to": 294
  }, {
    "from": 293,
    "label": "has",
    "to": 295
  }, {
    "from": 293,
    "label": "has",
    "to": 296
  }, {
    "from": 293,
    "label": "has",
    "to": 297
  }, {
    "from": 293,
    "label": "has",
    "to": 298
  }, {
    "from": 299,
    "label": "has",
    "to": 300
  }, {
    "from": 299,
    "label": "has",
    "to": 301
  }, {
    "from": 302,
    "label": "has",
    "to": 303
  }, {
    "from": 302,
    "label": "has",
    "to": 295
  }, {
    "from": 302,
    "label": "has",
    "to": 296
  }, {
    "from": 302,
    "label": "has",
    "to": 304
  }, {
    "from": 305,
    "label": "has",
    "to": 306
  }, {
    "from": 305,
    "label": "has",
    "to": 307
  }, {
    "from": 305,
    "label": "has",
    "to": 308
  }, {
    "from": 309,
    "label": "has",
    "to": 310
  }, {
    "from": 309,
    "label": "has",
    "to": 311
  }, {
    "from": 312,
    "label": "has",
    "to": 313
  }, {
    "from": 312,
    "label": "has",
    "to": 314
  }, {
    "from": 315,
    "label": "has",
    "to": 316
  }, {
    "from": 315,
    "label": "has",
    "to": 317
  }, {
    "from": 315,
    "label": "has",
    "to": 318
  }, {
    "from": 315,
    "label": "has",
    "to": 295
  }, {
    "from": 315,
    "label": "has",
    "to": 296
  }, {
    "from": 315,
    "label": "has",
    "to": 319
  }, {
    "from": 315,
    "label": "has",
    "to": 320
  }, {
    "from": 315,
    "label": "has",
    "to": 321
  }, {
    "from": 315,
    "label": "has",
    "to": 322
  }, {
    "from": 315,
    "label": "has",
    "to": 323
  }, {
    "from": 315,
    "label": "has",
    "to": 324
  }, {
    "from": 315,
    "label": "has",
    "to": 325
  }, {
    "from": 315,
    "label": "has",
    "to": 326
  }, {
    "from": 315,
    "label": "has",
    "to": 323
  }, {
    "from": 315,
    "label": "has",
    "to": 327
  }, {
    "from": 328,
    "label": "has",
    "to": 329
  }, {
    "from": 328,
    "label": "has",
    "to": 330
  }, {
    "from": 328,
    "label": "has",
    "to": 321
  }, {
    "from": 328,
    "label": "has",
    "to": 322
  }, {
    "from": 328,
    "label": "has",
    "to": 323
  }, {
    "from": 328,
    "label": "has",
    "to": 331
  }, {
    "from": 332,
    "label": "has",
    "to": 316
  }, {
    "from": 332,
    "label": "has",
    "to": 333
  }, {
    "from": 332,
    "label": "has",
    "to": 318
  }, {
    "from": 332,
    "label": "has",
    "to": 295
  }, {
    "from": 332,
    "label": "has",
    "to": 296
  }, {
    "from": 332,
    "label": "has",
    "to": 319
  }, {
    "from": 332,
    "label": "has",
    "to": 321
  }, {
    "from": 332,
    "label": "has",
    "to": 323
  }, {
    "from": 332,
    "label": "has",
    "to": 334
  }, {
    "from": 335,
    "label": "has",
    "to": 336
  }, {
    "from": 335,
    "label": "has",
    "to": 337
  }, {
    "from": 335,
    "label": "has",
    "to": 338
  }, {
    "from": 335,
    "label": "has",
    "to": 339
  }, {
    "from": 335,
    "label": "has",
    "to": 340
  }, {
    "from": 335,
    "label": "has",
    "to": 341
  }, {
    "from": 335,
    "label": "has",
    "to": 342
  }, {
    "from": 335,
    "label": "has",
    "to": 343
  }, {
    "from": 335,
    "label": "has",
    "to": 344
  }, {
    "from": 344,
    "label": "has",
    "to": 345
  }, {
    "from": 344,
    "label": "has",
    "to": 346
  }, {
    "from": 344,
    "label": "has",
    "to": 347
  }, {
    "from": 344,
    "label": "has",
    "to": 348
  }, {
    "from": 335,
    "label": "has",
    "to": 349
  }, {
    "from": 335,
    "label": "has",
    "to": 350
  }, {
    "from": 335,
    "label": "has",
    "to": 351
  }, {
    "from": 335,
    "label": "has",
    "to": 352
  }, {
    "from": 335,
    "label": "has",
    "to": 353
  }, {
    "from": 353,
    "label": "has",
    "to": 354
  }, {
    "from": 335,
    "label": "has",
    "to": 355
  }, {
    "from": 335,
    "label": "has",
    "to": 356
  }, {
    "from": 357,
    "label": "has",
    "to": 358
  }, {
    "from": 357,
    "label": "has",
    "to": 359
  }, {
    "from": 357,
    "label": "has",
    "to": 360
  }, {
    "from": 357,
    "label": "has",
    "to": 361
  }, {
    "from": 357,
    "label": "has",
    "to": 362
  }, {
    "from": 357,
    "label": "has",
    "to": 363
  }, {
    "from": 364,
    "label": "has",
    "to": 313
  }, {
    "from": 364,
    "label": "has",
    "to": 365
  }, {
    "from": 366,
    "label": "has",
    "to": 367
  }, {
    "from": 366,
    "label": "has",
    "to": 295
  }, {
    "from": 366,
    "label": "has",
    "to": 296
  }, {
    "from": 366,
    "label": "has",
    "to": 368
  }, {
    "from": 366,
    "label": "has",
    "to": 369
  }, {
    "from": 366,
    "label": "has",
    "to": 297
  }, {
    "from": 366,
    "label": "has",
    "to": 370
  }, {
    "from": 371,
    "label": "has",
    "to": 372
  }, {
    "from": 371,
    "label": "has",
    "to": 373
  }, {
    "from": 374,
    "label": "has",
    "to": 303
  }, {
    "from": 374,
    "label": "has",
    "to": 295
  }, {
    "from": 374,
    "label": "has",
    "to": 296
  }, {
    "from": 374,
    "label": "has",
    "to": 375
  }, {
    "from": 374,
    "label": "has",
    "to": 376
  }, {
    "from": 377,
    "label": "calls",
    "to": 17
  }, {
    "from": 171,
    "label": "calls",
    "to": 400
  }, {
    "from": 5,
    "label": "calls",
    "to": 397
  }, {
    "from": 5,
    "label": "calls",
    "to": 397
  }, {
    "from": 5,
    "label": "calls",
    "to": 397
  }, {
    "from": 5,
    "label": "calls",
    "to": 397
  }, {
    "from": 5,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 17,
    "label": "calls",
    "to": 397
  }, {
    "from": 62,
    "label": "calls",
    "to": 397
  }, {
    "from": 62,
    "label": "calls",
    "to": 397
  }, {
    "from": 62,
    "label": "calls",
    "to": 397
  }, {
    "from": 62,
    "label": "calls",
    "to": 397
  }, {
    "from": 62,
    "label": "calls",
    "to": 397
  }, {
    "from": 62,
    "label": "calls",
    "to": 397
  }, {
    "from": 62,
    "label": "calls",
    "to": 397
  }, {
    "from": 62,
    "label": "calls",
    "to": 397
  }, {
    "from": 62,
    "label": "calls",
    "to": 397
  }, {
    "from": 62,
    "label": "calls",
    "to": 397
  }, {
    "from": 62,
    "label": "calls",
    "to": 397
  }, {
    "from": 62,
    "label": "calls",
    "to": 397
  }, {
    "from": 62,
    "label": "calls",
    "to": 397
  }, {
    "from": 62,
    "label": "calls",
    "to": 397
  }, {
    "from": 62,
    "label": "calls",
    "to": 397
  }, {
    "from": 62,
    "label": "calls",
    "to": 397
  }, {
    "from": 62,
    "label": "calls",
    "to": 397
  }, {
    "from": 82,
    "label": "calls",
    "to": 397
  }, {
    "from": 82,
    "label": "calls",
    "to": 397
  }, {
    "from": 82,
    "label": "calls",
    "to": 397
  }, {
    "from": 82,
    "label": "calls",
    "to": 397
  }, {
    "from": 82,
    "label": "calls",
    "to": 397
  }, {
    "from": 82,
    "label": "calls",
    "to": 397
  }, {
    "from": 82,
    "label": "calls",
    "to": 397
  }, {
    "from": 82,
    "label": "calls",
    "to": 397
  }, {
    "from": 96,
    "label": "calls",
    "to": 397
  }, {
    "from": 96,
    "label": "calls",
    "to": 397
  }, {
    "from": 96,
    "label": "calls",
    "to": 397
  }, {
    "from": 96,
    "label": "calls",
    "to": 397
  }, {
    "from": 115,
    "label": "calls",
    "to": 397
  }, {
    "from": 115,
    "label": "calls",
    "to": 397
  }, {
    "from": 115,
    "label": "calls",
    "to": 397
  }, {
    "from": 115,
    "label": "calls",
    "to": 397
  }, {
    "from": 115,
    "label": "calls",
    "to": 397
  }, {
    "from": 115,
    "label": "calls",
    "to": 397
  }, {
    "from": 115,
    "label": "calls",
    "to": 397
  }, {
    "from": 115,
    "label": "calls",
    "to": 397
  }, {
    "from": 115,
    "label": "calls",
    "to": 397
  }, {
    "from": 115,
    "label": "calls",
    "to": 397
  }, {
    "from": 115,
    "label": "calls",
    "to": 397
  }, {
    "from": 115,
    "label": "calls",
    "to": 397
  }, {
    "from": 115,
    "label": "calls",
    "to": 397
  }, {
    "from": 115,
    "label": "calls",
    "to": 397
  }, {
    "from": 115,
    "label": "calls",
    "to": 397
  }, {
    "from": 115,
    "label": "calls",
    "to": 397
  }, {
    "from": 115,
    "label": "calls",
    "to": 397
  }, {
    "from": 115,
    "label": "calls",
    "to": 397
  }, {
    "from": 115,
    "label": "calls",
    "to": 397
  }, {
    "from": 115,
    "label": "calls",
    "to": 397
  }, {
    "from": 115,
    "label": "calls",
    "to": 397
  }, {
    "from": 115,
    "label": "calls",
    "to": 397
  }, {
    "from": 115,
    "label": "calls",
    "to": 397
  }, {
    "from": 115,
    "label": "calls",
    "to": 397
  }, {
    "from": 115,
    "label": "calls",
    "to": 397
  }, {
    "from": 115,
    "label": "calls",
    "to": 397
  }, {
    "from": 115,
    "label": "calls",
    "to": 397
  }, {
    "from": 115,
    "label": "calls",
    "to": 397
  }, {
    "from": 115,
    "label": "calls",
    "to": 397
  }, {
    "from": 115,
    "label": "calls",
    "to": 397
  }, {
    "from": 115,
    "label": "calls",
    "to": 397
  }, {
    "from": 149,
    "label": "calls",
    "to": 397
  }, {
    "from": 149,
    "label": "calls",
    "to": 397
  }, {
    "from": 149,
    "label": "calls",
    "to": 397
  }, {
    "from": 149,
    "label": "calls",
    "to": 397
  }, {
    "from": 149,
    "label": "calls",
    "to": 397
  }, {
    "from": 149,
    "label": "calls",
    "to": 397
  }, {
    "from": 149,
    "label": "calls",
    "to": 397
  }, {
    "from": 149,
    "label": "calls",
    "to": 397
  }, {
    "from": 149,
    "label": "calls",
    "to": 397
  }, {
    "from": 149,
    "label": "calls",
    "to": 397
  }, {
    "from": 149,
    "label": "calls",
    "to": 397
  }, {
    "from": 171,
    "label": "calls",
    "to": 397
  }, {
    "from": 171,
    "label": "calls",
    "to": 397
  }, {
    "from": 171,
    "label": "calls",
    "to": 397
  }, {
    "from": 171,
    "label": "calls",
    "to": 397
  }, {
    "from": 171,
    "label": "calls",
    "to": 397
  }, {
    "from": 171,
    "label": "calls",
    "to": 397
  }, {
    "from": 171,
    "label": "calls",
    "to": 397
  }, {
    "from": 171,
    "label": "calls",
    "to": 397
  }, {
    "from": 171,
    "label": "calls",
    "to": 397
  }, {
    "from": 171,
    "label": "calls",
    "to": 397
  }, {
    "from": 171,
    "label": "calls",
    "to": 397
  }, {
    "from": 171,
    "label": "calls",
    "to": 397
  }, {
    "from": 171,
    "label": "calls",
    "to": 397
  }, {
    "from": 171,
    "label": "calls",
    "to": 397
  }, {
    "from": 171,
    "label": "calls",
    "to": 397
  }, {
    "from": 171,
    "label": "calls",
    "to": 397
  }, {
    "from": 171,
    "label": "calls",
    "to": 397
  }, {
    "from": 171,
    "label": "calls",
    "to": 397
  }, {
    "from": 211,
    "label": "calls",
    "to": 397
  }, {
    "from": 211,
    "label": "calls",
    "to": 397
  }, {
    "from": 211,
    "label": "calls",
    "to": 397
  }, {
    "from": 211,
    "label": "calls",
    "to": 397
  }, {
    "from": 211,
    "label": "calls",
    "to": 397
  }, {
    "from": 211,
    "label": "calls",
    "to": 397
  }, {
    "from": 211,
    "label": "calls",
    "to": 397
  }, {
    "from": 258,
    "label": "calls",
    "to": 397
  }, {
    "from": 258,
    "label": "calls",
    "to": 397
  }, {
    "from": 258,
    "label": "calls",
    "to": 397
  }, {
    "from": 258,
    "label": "calls",
    "to": 397
  }, {
    "from": 258,
    "label": "calls",
    "to": 397
  }, {
    "from": 258,
    "label": "calls",
    "to": 397
  }, {
    "from": 260,
    "label": "calls",
    "to": 397
  }, {
    "from": 227,
    "label": "calls",
    "to": 397
  }, {
    "from": 262,
    "label": "calls",
    "to": 397
  }, {
    "from": 262,
    "label": "calls",
    "to": 397
  }, {
    "from": 262,
    "label": "calls",
    "to": 397
  }, {
    "from": 262,
    "label": "calls",
    "to": 397
  }, {
    "from": 262,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 397
  }, {
    "from": 377,
    "label": "calls",
    "to": 211
  }, {
    "from": 149,
    "label": "calls",
    "to": 390
  }, {
    "from": 62,
    "label": "calls",
    "to": 380
  }, {
    "from": 82,
    "label": "calls",
    "to": 380
  }, {
    "from": 96,
    "label": "calls",
    "to": 380
  }, {
    "from": 96,
    "label": "calls",
    "to": 380
  }, {
    "from": 96,
    "label": "calls",
    "to": 380
  }, {
    "from": 115,
    "label": "calls",
    "to": 380
  }, {
    "from": 149,
    "label": "calls",
    "to": 380
  }, {
    "from": 377,
    "label": "calls",
    "to": 96
  }, {
    "from": 149,
    "label": "calls",
    "to": 406
  }, {
    "from": 17,
    "label": "calls",
    "to": 386
  }, {
    "from": 17,
    "label": "calls",
    "to": 386
  }, {
    "from": 377,
    "label": "calls",
    "to": 82
  }, {
    "from": 171,
    "label": "calls",
    "to": 383
  }, {
    "from": 377,
    "label": "calls",
    "to": 391
  }, {
    "from": 5,
    "label": "calls",
    "to": 391
  }, {
    "from": 5,
    "label": "calls",
    "to": 391
  }, {
    "from": 17,
    "label": "calls",
    "to": 391
  }, {
    "from": 17,
    "label": "calls",
    "to": 391
  }, {
    "from": 62,
    "label": "calls",
    "to": 391
  }, {
    "from": 62,
    "label": "calls",
    "to": 391
  }, {
    "from": 82,
    "label": "calls",
    "to": 391
  }, {
    "from": 82,
    "label": "calls",
    "to": 391
  }, {
    "from": 96,
    "label": "calls",
    "to": 391
  }, {
    "from": 96,
    "label": "calls",
    "to": 391
  }, {
    "from": 115,
    "label": "calls",
    "to": 391
  }, {
    "from": 115,
    "label": "calls",
    "to": 391
  }, {
    "from": 149,
    "label": "calls",
    "to": 391
  }, {
    "from": 149,
    "label": "calls",
    "to": 391
  }, {
    "from": 171,
    "label": "calls",
    "to": 391
  }, {
    "from": 171,
    "label": "calls",
    "to": 391
  }, {
    "from": 171,
    "label": "calls",
    "to": 391
  }, {
    "from": 171,
    "label": "calls",
    "to": 391
  }, {
    "from": 171,
    "label": "calls",
    "to": 391
  }, {
    "from": 171,
    "label": "calls",
    "to": 391
  }, {
    "from": 171,
    "label": "calls",
    "to": 391
  }, {
    "from": 211,
    "label": "calls",
    "to": 391
  }, {
    "from": 211,
    "label": "calls",
    "to": 391
  }, {
    "from": 227,
    "label": "calls",
    "to": 391
  }, {
    "from": 227,
    "label": "calls",
    "to": 391
  }, {
    "from": 262,
    "label": "calls",
    "to": 391
  }, {
    "from": 262,
    "label": "calls",
    "to": 391
  }, {
    "from": 377,
    "label": "calls",
    "to": 404
  }, {
    "from": 377,
    "label": "calls",
    "to": 404
  }, {
    "from": 377,
    "label": "calls",
    "to": 404
  }, {
    "from": 377,
    "label": "calls",
    "to": 404
  }, {
    "from": 377,
    "label": "calls",
    "to": 404
  }, {
    "from": 377,
    "label": "calls",
    "to": 404
  }, {
    "from": 377,
    "label": "calls",
    "to": 404
  }, {
    "from": 377,
    "label": "calls",
    "to": 404
  }, {
    "from": 377,
    "label": "calls",
    "to": 404
  }, {
    "from": 377,
    "label": "calls",
    "to": 404
  }, {
    "from": 377,
    "label": "calls",
    "to": 62
  }, {
    "from": 115,
    "label": "calls",
    "to": 379
  }, {
    "from": 115,
    "label": "calls",
    "to": 379
  }, {
    "from": 115,
    "label": "calls",
    "to": 379
  }, {
    "from": 171,
    "label": "calls",
    "to": 379
  }, {
    "from": 377,
    "label": "calls",
    "to": 393
  }, {
    "from": 377,
    "label": "calls",
    "to": 149
  }, {
    "from": 149,
    "label": "calls",
    "to": 405
  }, {
    "from": 211,
    "label": "calls",
    "to": 385
  }, {
    "from": 227,
    "label": "calls",
    "to": 385
  }, {
    "from": 262,
    "label": "calls",
    "to": 385
  }, {
    "from": 377,
    "label": "calls",
    "to": 115
  }, {
    "from": 377,
    "label": "calls",
    "to": 262
  }, {
    "from": 377,
    "label": "calls",
    "to": 262
  }, {
    "from": 377,
    "label": "calls",
    "to": 262
  }, {
    "from": 377,
    "label": "calls",
    "to": 262
  }, {
    "from": 377,
    "label": "calls",
    "to": 262
  }, {
    "from": 262,
    "label": "calls",
    "to": 398
  }, {
    "from": 262,
    "label": "calls",
    "to": 402
  }, {
    "from": 5,
    "label": "calls",
    "to": 389
  }, {
    "from": 149,
    "label": "calls",
    "to": 389
  }, {
    "from": 17,
    "label": "calls",
    "to": 387
  }, {
    "from": 17,
    "label": "calls",
    "to": 387
  }, {
    "from": 377,
    "label": "calls",
    "to": 387
  }, {
    "from": 377,
    "label": "calls",
    "to": 387
  }, {
    "from": 377,
    "label": "calls",
    "to": 387
  }, {
    "from": 5,
    "label": "calls",
    "to": 392
  }, {
    "from": 5,
    "label": "calls",
    "to": 392
  }, {
    "from": 5,
    "label": "calls",
    "to": 392
  }, {
    "from": 17,
    "label": "calls",
    "to": 392
  }, {
    "from": 17,
    "label": "calls",
    "to": 392
  }, {
    "from": 17,
    "label": "calls",
    "to": 392
  }, {
    "from": 62,
    "label": "calls",
    "to": 392
  }, {
    "from": 149,
    "label": "calls",
    "to": 392
  }, {
    "from": 171,
    "label": "calls",
    "to": 392
  }, {
    "from": 171,
    "label": "calls",
    "to": 392
  }, {
    "from": 171,
    "label": "calls",
    "to": 392
  }, {
    "from": 171,
    "label": "calls",
    "to": 392
  }, {
    "from": 171,
    "label": "calls",
    "to": 392
  }, {
    "from": 377,
    "label": "calls",
    "to": 392
  }, {
    "from": 377,
    "label": "calls",
    "to": 392
  }, {
    "from": 377,
    "label": "calls",
    "to": 171
  }, {
    "from": 377,
    "label": "calls",
    "to": 171
  }, {
    "from": 262,
    "label": "calls",
    "to": 399
  }, {
    "from": 211,
    "label": "calls",
    "to": 394
  }, {
    "from": 96,
    "label": "calls",
    "to": 111
  }, {
    "from": 96,
    "label": "calls",
    "to": 113
  }, {
    "from": 96,
    "label": "calls",
    "to": 113
  }, {
    "from": 377,
    "label": "calls",
    "to": 403
  }, {
    "from": 377,
    "label": "calls",
    "to": 403
  }, {
    "from": 377,
    "label": "calls",
    "to": 403
  }, {
    "from": 377,
    "label": "calls",
    "to": 403
  }, {
    "from": 377,
    "label": "calls",
    "to": 403
  }, {
    "from": 377,
    "label": "calls",
    "to": 382
  }, {
    "from": 17,
    "label": "calls",
    "to": 384
  }, {
    "from": 17,
    "label": "calls",
    "to": 384
  }, {
    "from": 17,
    "label": "calls",
    "to": 384
  }, {
    "from": 377,
    "label": "calls",
    "to": 384
  }, {
    "from": 377,
    "label": "calls",
    "to": 384
  }, {
    "from": 377,
    "label": "calls",
    "to": 384
  }, {
    "from": 62,
    "label": "calls",
    "to": 381
  }, {
    "from": 113,
    "label": "calls",
    "to": 396
  }, {
    "from": 113,
    "label": "calls",
    "to": 396
  }, {
    "from": 111,
    "label": "calls",
    "to": 407
  }, {
    "from": 377,
    "label": "calls",
    "to": 5
  }, {
    "from": 377,
    "label": "calls",
    "to": 227
  }, {
    "from": 149,
    "label": "calls",
    "to": 395
  }, {
    "from": 149,
    "label": "calls",
    "to": 395
  }, {
    "from": 149,
    "label": "calls",
    "to": 395
  }, {
    "from": 377,
    "label": "calls",
    "to": 401
  }, {
    "from": 377,
    "label": "calls",
    "to": 401
  }, {
    "from": 377,
    "label": "calls",
    "to": 401
  }, {
    "from": 377,
    "label": "calls",
    "to": 401
  }, {
    "from": 377,
    "label": "calls",
    "to": 401
  }, {
    "from": 5,
    "label": "calls",
    "to": 388
  }, {
    "from": 377,
    "label": "calls",
    "to": 378
  }, {
    "from": 4,
    "label": "contains",
    "to": 377
  }, {
    "from": 377,
    "label": "declares",
    "to": 5
  }, {
    "from": 377,
    "label": "declares",
    "to": 17
  }, {
    "from": 377,
    "label": "declares",
    "to": 62
  }, {
    "from": 377,
    "label": "declares",
    "to": 82
  }, {
    "from": 377,
    "label": "declares",
    "to": 96
  }, {
    "from": 377,
    "label": "declares",
    "to": 111
  }, {
    "from": 377,
    "label": "declares",
    "to": 113
  }, {
    "from": 377,
    "label": "declares",
    "to": 115
  }, {
    "from": 377,
    "label": "declares",
    "to": 149
  }, {
    "from": 377,
    "label": "declares",
    "to": 171
  }, {
    "from": 377,
    "label": "declares",
    "to": 211
  }, {
    "from": 377,
    "label": "declares",
    "to": 227
  }, {
    "from": 377,
    "label": "declares",
    "to": 258
  }, {
    "from": 377,
    "label": "declares",
    "to": 260
  }, {
    "from": 377,
    "label": "declares",
    "to": 262
  }, {
    "from": 377,
    "label": "declares",
    "to": 280
  }, {
    "from": 377,
    "label": "declares",
    "to": 281
  }, {
    "from": 377,
    "label": "declares",
    "to": 282
  }, {
    "from": 377,
    "label": "declares",
    "to": 284
  }, {
    "from": 377,
    "label": "declares",
    "to": 286
  }, {
    "from": 377,
    "label": "declares",
    "to": 287
  }, {
    "from": 377,
    "label": "declares",
    "to": 288
  }, {
    "from": 377,
    "label": "declares",
    "to": 289
  }, {
    "from": 377,
    "label": "declares",
    "to": 291
  }, {
    "from": 377,
    "label": "declares",
    "to": 292
  }, {
    "from": 377,
    "label": "declares",
    "to": 293
  }, {
    "from": 377,
    "label": "declares",
    "to": 299
  }, {
    "from": 377,
    "label": "declares",
    "to": 302
  }, {
    "from": 377,
    "label": "declares",
    "to": 305
  }, {
    "from": 377,
    "label": "declares",
    "to": 309
  }, {
    "from": 377,
    "label": "declares",
    "to": 312
  }, {
    "from": 377,
    "label": "declares",
    "to": 315
  }, {
    "from": 377,
    "label": "declares",
    "to": 328
  }, {
    "from": 377,
    "label": "declares",
    "to": 332
  }, {
    "from": 377,
    "label": "declares",
    "to": 335
  }, {
    "from": 377,
    "label": "declares",
    "to": 357
  }, {
    "from": 377,
    "label": "declares",
    "to": 364
  }, {
    "from": 377,
    "label": "declares",
    "to": 366
  }, {
    "from": 377,
    "label": "declares",
    "to": 371
  }, {
    "from": 377,
    "label": "declares",
    "to": 374
  }, {
    "from": 4,
    "label": "contains",
    "to": 409
  }, {
    "from": 4,
    "label": "contains",
    "to": 410
  }, {
    "from": 409,
    "label": "initializes",
    "to": 411
  }, {
    "from": 411,
    "label": "assigns",
    "to": 412
  }, {
    "from": 409,
    "label": "initializes",
    "to": 413
  }, {
    "from": 413,
    "label": "assigns",
    "to": 414
  }, {
    "from": 414,
    "label": "assigns",
    "to": 415
  }, {
    "from": 415,
    "label": "assigns",
    "to": 416
  }, {
    "from": 414,
    "label": "assigns",
    "to": 417
  }, {
    "from": 417,
    "label": "assigns",
    "to": 418
  }, {
    "from": 414,
    "label": "assigns",
    "to": 419
  }, {
    "from": 419,
    "label": "assigns",
    "to": 420
  }, {
    "from": 414,
    "label": "assigns",
    "to": 421
  }, {
    "from": 421,
    "label": "assigns",
    "to": 422
  }, {
    "from": 409,
    "label": "initializes",
    "to": 423
  }, {
    "from": 409,
    "label": "initializes",
    "to": 424
  }, {
    "from": 409,
    "label": "initializes",
    "to": 425
  }, {
    "from": 425,
    "label": "assigns",
    "to": 426
  }, {
    "from": 409,
    "label": "initializes",
    "to": 427
  }, {
    "from": 427,
    "label": "assigns",
    "to": 428
  }, {
    "from": 409,
    "label": "initializes",
    "to": 429
  }, {
    "from": 429,
    "label": "assigns",
    "to": 430
  }, {
    "from": 409,
    "label": "initializes",
    "to": 431
  }, {
    "from": 431,
    "label": "assigns",
    "to": 432
  }, {
    "from": 409,
    "label": "initializes",
    "to": 433
  }, {
    "from": 433,
    "label": "assigns",
    "to": 434
  }, {
    "from": 410,
    "label": "initializes",
    "to": 435
  }, {
    "from": 435,
    "label": "requires",
    "to": 1
  }, {
    "from": 410,
    "label": "initializes",
    "to": 436
  }, {
    "from": 436,
    "label": "requires",
    "to": 3
  }, {
    "from": 410,
    "label": "initializes",
    "to": 437
  }, {
    "from": 437,
    "label": "requires",
    "to": 2
  }, {
    "from": 410,
    "label": "initializes",
    "to": 438
  }, {
    "from": 438,
    "label": "requires",
    "to": 3
  }, {
    "from": 410,
    "label": "initializes",
    "to": 408
  }, {
    "from": 6,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 6,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 6,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 10,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 10,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 10,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 11,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 11,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 11,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 12,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 12,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 12,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 13,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 13,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 13,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 14,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 14,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 14,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 15,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 15,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 15,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 18,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 18,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 18,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 22,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 22,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 22,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 23,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 23,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 23,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 24,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 24,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 24,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 25,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 25,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 25,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 26,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 26,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 26,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 27,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 27,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 27,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 28,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 28,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 28,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 29,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 29,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 29,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 31,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 31,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 31,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 32,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 32,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 32,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 34,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 34,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 34,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 35,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 35,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 35,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 36,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 36,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 36,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 37,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 37,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 37,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 38,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 38,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 38,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 39,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 39,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 39,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 41,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 41,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 41,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 42,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 42,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 42,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 43,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 43,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 43,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 45,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 45,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 45,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 46,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 46,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 46,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 47,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 47,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 47,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 49,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 49,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 49,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 50,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 50,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 50,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 51,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 51,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 51,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 54,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 54,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 54,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 56,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 56,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 56,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 57,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 57,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 57,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 58,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 58,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 58,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 59,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 59,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 59,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 60,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 60,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 60,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 63,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 63,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 63,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 65,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 65,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 65,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 66,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 66,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 66,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 67,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 67,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 67,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 68,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 68,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 68,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 70,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 70,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 70,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 71,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 71,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 71,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 73,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 73,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 73,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 74,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 74,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 74,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 75,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 75,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 75,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 76,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 76,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 76,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 77,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 77,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 77,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 78,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 78,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 78,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 79,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 79,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 79,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 80,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 80,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 80,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 83,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 83,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 83,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 85,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 85,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 85,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 86,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 86,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 86,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 87,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 87,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 87,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 88,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 88,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 88,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 91,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 91,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 91,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 92,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 92,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 92,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 93,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 93,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 93,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 94,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 94,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 94,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 101,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 101,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 101,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 104,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 104,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 104,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 109,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 109,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 109,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 116,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 116,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 116,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 119,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 119,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 119,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 120,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 120,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 120,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 121,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 121,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 121,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 125,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 125,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 125,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 126,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 126,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 126,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 127,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 127,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 127,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 128,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 128,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 128,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 129,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 129,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 129,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 130,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 130,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 130,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 131,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 131,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 131,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 132,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 132,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 132,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 133,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 133,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 133,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 134,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 134,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 134,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 135,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 135,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 135,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 137,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 137,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 137,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 138,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 138,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 138,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 139,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 139,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 139,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 140,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 140,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 140,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 141,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 141,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 141,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 143,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 143,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 143,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 144,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 144,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 144,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 145,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 145,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 145,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 146,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 146,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 146,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 147,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 147,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 147,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 150,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 150,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 150,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 152,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 152,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 152,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 155,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 155,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 155,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 156,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 156,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 156,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 159,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 159,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 159,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 161,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 161,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 161,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 163,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 163,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 163,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 164,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 164,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 164,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 165,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 165,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 165,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 166,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 166,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 166,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 167,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 167,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 167,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 168,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 168,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 168,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 169,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 169,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 169,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 172,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 172,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 172,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 179,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 179,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 179,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 180,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 180,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 180,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 181,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 181,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 181,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 182,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 182,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 182,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 183,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 183,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 183,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 184,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 184,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 184,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 185,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 185,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 185,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 187,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 187,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 187,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 188,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 188,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 188,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 190,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 190,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 190,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 196,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 196,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 196,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 197,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 197,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 197,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 198,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 198,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 198,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 199,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 199,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 199,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 200,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 200,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 200,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 201,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 201,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 201,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 202,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 202,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 202,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 203,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 203,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 203,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 204,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 204,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 204,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 205,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 205,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 205,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 206,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 206,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 206,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 207,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 207,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 207,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 208,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 208,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 208,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 209,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 209,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 209,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 212,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 212,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 212,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 215,
    "label": "hasArgument",
    "to": 280
  }, {
    "from": 215,
    "label": "hasArgument",
    "to": 281
  }, {
    "from": 215,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 215,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 215,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 217,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 217,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 217,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 218,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 218,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 218,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 219,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 219,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 219,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 220,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 220,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 220,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 222,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 222,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 222,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 223,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 223,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 223,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 224,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 224,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 224,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 225,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 225,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 225,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 228,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 228,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 228,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 235,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 235,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 235,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 236,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 236,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 236,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 239,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 239,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 239,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 240,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 240,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 240,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 241,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 241,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 241,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 243,
    "label": "hasArgument",
    "to": 284
  }, {
    "from": 243,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 243,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 243,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 244,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 244,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 244,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 245,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 245,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 245,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 247,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 247,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 247,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 252,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 252,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 252,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 253,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 253,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 253,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 254,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 254,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 254,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 255,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 255,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 255,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 256,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 256,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 256,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 263,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 263,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 263,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 264,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 264,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 264,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 266,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 266,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 266,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 268,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 268,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 268,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 269,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 269,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 269,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 270,
    "label": "hasArgument",
    "to": 291
  }, {
    "from": 270,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 270,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 270,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 271,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 271,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 271,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 272,
    "label": "hasArgument",
    "to": 292
  }, {
    "from": 272,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 272,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 272,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 273,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 273,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 273,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 274,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 274,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 274,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 275,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 275,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 275,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 276,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 276,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 276,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 277,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 277,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 277,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 278,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 278,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 278,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 295,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 295,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 295,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 296,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 296,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 296,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 297,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 297,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 297,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 300,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 300,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 300,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 307,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 307,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 307,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 310,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 310,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 310,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 313,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 313,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 313,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 318,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 318,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 318,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 319,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 319,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 319,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 320,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 320,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 320,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 321,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 321,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 321,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 322,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 322,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 322,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 323,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 323,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 323,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 324,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 324,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 324,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 325,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 325,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 325,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 326,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 326,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 326,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 330,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 330,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 330,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 337,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 337,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 337,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 339,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 339,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 339,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 341,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 341,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 341,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 346,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 346,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 346,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 347,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 347,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 347,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 348,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 348,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 348,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 349,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 349,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 349,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 350,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 350,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 350,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 351,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 351,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 351,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 352,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 352,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 352,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 354,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 354,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 354,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 355,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 355,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 355,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 358,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 358,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 358,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 359,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 359,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 359,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 360,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 360,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 360,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 361,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 361,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 361,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 362,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 362,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 362,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 368,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 368,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 368,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 369,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 369,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 369,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 372,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 372,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 372,
    "label": "hasArgument",
    "to": 422
  }, {
    "from": 375,
    "label": "hasArgument",
    "to": 418
  }, {
    "from": 375,
    "label": "hasArgument",
    "to": 420
  }, {
    "from": 375,
    "label": "hasArgument",
    "to": 422
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "lzmq",
    "type": "module"
  }, {
    "id": 2,
    "text": "timer",
    "type": "module"
  }, {
    "id": 3,
    "text": "loop",
    "type": "module"
  }, {
    "id": 4,
    "text": "test",
    "type": "module"
  }, {
    "id": 5,
    "text": "function Test_Assert()\r\n  print(\"\\n\\nTest_Assert ...\")\r\n  local ok1, msg1 = pcall(zmq.assert, false, zmq.error(zmq.errors.EINVAL));    -- object\r\n  local ok2, msg2 = pcall(zmq.assert, false, zmq.errors.EINVAL);               -- number\r\n  local ok3, msg3 = pcall(zmq.assert, false, zmq.strerror(zmq.errors.EINVAL)); -- string\r\n  assert(not ok1)\r\n  assert(not ok2)\r\n  assert(not ok3)\r\n  assert(msg1 == msg2)\r\n  assert(msg1 == msg3)\r\n  print(\"Test_Assert done!\")\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "print(\"\\n\\nTest_Assert ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "local ok1, msg1 = pcall(zmq.assert, false, zmq.error(zmq.errors.EINVAL))",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "local ok2, msg2 = pcall(zmq.assert, false, zmq.errors.EINVAL)",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "local ok3, msg3 = pcall(zmq.assert, false, zmq.strerror(zmq.errors.EINVAL))",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "assert(not ok1)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "assert(not ok2)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "assert(not ok3)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "assert(msg1 == msg2)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "assert(msg1 == msg3)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "print(\"Test_Assert done!\")",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function Test_Message()\r\n  print(\"\\n\\nTest_Message ...\")\r\n\r\n  local msg1 = assert(zmq.msg_init())\r\n  local msg2 = assert(zmq.msg_init_size(255))\r\n  local msg3 = assert(zmq.msg_init_data(\"Hello world!\"))\r\n  assert(not msg1:closed())\r\n  assert(not msg2:closed())\r\n  assert(not msg3:closed())\r\n  assert(msg1:close())\r\n  assert(msg1:closed())\r\n  assert(msg1:close())\r\n  assert(not pcall(msg1.data, msg1)) -- no AV\r\n  assert(msg2:close())\r\n  assert(msg3:close())\r\n\r\n  msg1 = assert(zmq.msg_init_size(10))\r\n  assert(msg1:size() == 10)\r\n  assert(msg1:set_data(\"Hello\"))\r\n  assert(msg1:size() == 10)\r\n  local data = assert(msg1:data())\r\n  assert(#data == 10)\r\n  assert(data:sub(1, 5) == 'Hello')\r\n\r\n  assert(msg1:set_data(6, \", world!\")) -- append and resize buffer\r\n  assert(msg1:size() == 13)\r\n  local data = assert(msg1:data())\r\n  assert(#data == 13)\r\n  assert(data == \"Hello, world!\")\r\n  \r\n  msg2 = assert(zmq.msg_init())\r\n  assert(msg2 == msg2:move(msg1))\r\n\r\n  assert(msg1:size() == 0)\r\n  assert(not msg1:closed())\r\n  assert(msg1:set_data(\"hi\"))\r\n  assert(msg1:size() == 2)\r\n  assert(msg1:data() == \"hi\")\r\n  assert(msg1:close())\r\n\r\n\r\n  assert(msg2:size() == #data)\r\n  assert(msg2:data() == data)\r\n\r\n  msg3 = assert(zmq.msg_init())\r\n  assert(msg3 == msg3:copy(msg2))\r\n\r\n  assert(msg2:size() == #data)\r\n  assert(msg2:data() == data)\r\n  assert(msg3:size() == #data)\r\n  assert(msg3:data() == data)\r\n\r\n  assert(msg2:close())\r\n  assert(msg3:close())\r\n  \r\n  msg1 = assert(zmq.msg_init_data(\"hello world\"))\r\n  msg2 = assert(msg1:copy())\r\n  assert(msg1:data() == msg2:data())\r\n  msg3 = assert(msg1:move())\r\n  assert(msg3:data() == msg2:data())\r\n  assert(msg1:data() == \"\")\r\n\r\n  assert(not pcall(msg2.copy, msg, nil))\r\n  assert(not pcall(msg3.move, msg, nil))\r\n\r\n  assert(msg1:close())\r\n  assert(msg2:close())\r\n  assert(msg3:close())\r\n\r\n  print(\"Test_Message done!\")\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "print(\"\\n\\nTest_Message ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "local msg1 = assert(zmq.msg_init())",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "local msg2 = assert(zmq.msg_init_size(255))",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "local msg3 = assert(zmq.msg_init_data(\"Hello world!\"))",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "assert(not msg1:closed())",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "assert(not msg2:closed())",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "assert(not msg3:closed())",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "assert(msg1:close())",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "assert(msg1:closed())",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "assert(not pcall(msg1.data, msg1))",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "assert(msg2:close())",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "assert(msg3:close())",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "msg1 = assert(zmq.msg_init_size(10))",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "assert(msg1:size() == 10)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "assert(msg1:set_data(\"Hello\"))",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "local data = assert(msg1:data())",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "assert(#data == 10)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "assert(data:sub(1, 5) == 'Hello')",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "assert(msg1:set_data(6, \", world!\"))",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "assert(msg1:size() == 13)",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "assert(#data == 13)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "assert(data == \"Hello, world!\")",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "msg2 = assert(zmq.msg_init())",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "assert(msg2 == msg2:move(msg1))",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "assert(msg1:size() == 0)",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "assert(msg1:set_data(\"hi\"))",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "assert(msg1:size() == 2)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "assert(msg1:data() == \"hi\")",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "assert(msg2:size() == #data)",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "assert(msg2:data() == data)",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "msg3 = assert(zmq.msg_init())",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "assert(msg3 == msg3:copy(msg2))",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "assert(msg3:size() == #data)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "assert(msg3:data() == data)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "msg1 = assert(zmq.msg_init_data(\"hello world\"))",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "msg2 = assert(msg1:copy())",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "assert(msg1:data() == msg2:data())",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "msg3 = assert(msg1:move())",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "assert(msg3:data() == msg2:data())",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "assert(msg1:data() == \"\")",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "assert(not pcall(msg2.copy, msg, nil))",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "assert(not pcall(msg3.move, msg, nil))",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "print(\"Test_Message done!\")",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "function Test_Context()\r\n  print(\"\\n\\nTest_Context ...\")\r\n  local ctx = zmq.context()\r\n  assert(ctx:set_io_threads(2))\r\n  assert(ctx:get_io_threads() == 2)\r\n  assert(ctx:set_max_sockets(252))\r\n  assert(ctx:get_max_sockets() == 252)\r\n\r\n  local ctx2 = assert(zmq.init_ctx( assert(ctx:lightuserdata()) ))\r\n  assert(ctx:lightuserdata()   ~= ctx2:lightuserdata()  )\r\n  assert(ctx:get_io_threads()  == ctx2:get_io_threads()  )\r\n  assert(ctx:get_max_sockets() == ctx2:get_max_sockets() )\r\n  assert(not ctx2:closed())\r\n  assert(ctx2:destroy())\r\n  assert(ctx2:closed())\r\n  assert(not pcall(ctx2.get_io_threads, ctx2))\r\n  assert(ctx:get_io_threads() == 2)\r\n\r\n  assert(not ctx:closed())\r\n  assert(ctx:destroy())\r\n  assert(ctx:closed())\r\n  print(\"Test_Context done!\")\r\nend",
    "type": "function"
  }, {
    "id": 63,
    "text": "print(\"\\n\\nTest_Context ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "local ctx = zmq.context()",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "assert(ctx:set_io_threads(2))",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "assert(ctx:get_io_threads() == 2)",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "assert(ctx:set_max_sockets(252))",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "assert(ctx:get_max_sockets() == 252)",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "local ctx2 = assert(zmq.init_ctx( assert(ctx:lightuserdata()) ))",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "assert(ctx:lightuserdata()   ~= ctx2:lightuserdata()  )",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "assert(ctx:get_io_threads()  == ctx2:get_io_threads()  )",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "assert(ctx:get_max_sockets() == ctx2:get_max_sockets() )",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "assert(not ctx2:closed())",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "assert(ctx2:destroy())",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "assert(ctx2:closed())",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "assert(not pcall(ctx2.get_io_threads, ctx2))",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "assert(not ctx:closed())",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "assert(ctx:destroy())",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "assert(ctx:closed())",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "print(\"Test_Context done!\")",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "function Test_Sockopt()\r\n  print(\"\\n\\nTest_Sockopt ...\")\r\n  \r\n  local ctx = zmq.context()\r\n  assert(ctx:set_io_threads(2))\r\n  local skt = ctx:socket(zmq.SUB)\r\n  assert(skt:set_subscribe(\"sub 1\"))\r\n  assert(skt:set_subscribe(\"sub 2\"))\r\n  assert(skt:set_subscribe{\"sub 3\"; \"sub 3\"})\r\n\r\n  assert(skt:set_unsubscribe{\"sub 1\", \"sub 2\"})\r\n  local ok, err, no = skt:set_unsubscribe{\"sub 3\", \"sub 1\"}\r\n  if not ok then assert(no == 2) end\r\n\r\n  assert(skt:set_unsubscribe(\"sub 3\"))\r\n\r\n  skt:close()\r\n  assert(ctx:destroy())\r\n\r\n  print(\"Test_Sockopt done!\")\r\nend",
    "type": "function"
  }, {
    "id": 83,
    "text": "print(\"\\n\\nTest_Sockopt ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "local skt = ctx:socket(zmq.SUB)",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "assert(skt:set_subscribe(\"sub 1\"))",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "assert(skt:set_subscribe(\"sub 2\"))",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "assert(skt:set_subscribe{\"sub 3\"; \"sub 3\"})",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "assert(skt:set_unsubscribe{\"sub 1\", \"sub 2\"})",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "local ok, err, no = skt:set_unsubscribe{\"sub 3\", \"sub 1\"}",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "if not ok then assert(no == 2) end",
    "type": "statement:if"
  }, {
    "id": 91,
    "text": "assert(no == 2)",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "assert(skt:set_unsubscribe(\"sub 3\"))",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "skt:close()",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "print(\"Test_Sockopt done!\")",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "function Test_SockAutoclose()\r\n  local function weak_ptr(val)\r\n    return setmetatable({value = val},{__mode = 'v'})\r\n  end\r\n\r\n  local function gc_collect()\r\n    collectgarbage(\"collect\")\r\n    collectgarbage(\"collect\")\r\n  end\r\n\r\n  print(\"\\n\\nTest_SockAutoclose ...\")\r\n\r\n  local ctx = zmq.context()\r\n  local skt = ctx:socket(zmq.SUB)\r\n  ctx:autoclose(skt)\r\n  assert(ctx:destroy())\r\n\r\n  local ctx = zmq.context()\r\n  do local skt = ctx:socket(zmq.SUB) end\r\n  gc_collect()\r\n  assert(ctx:destroy())\r\n\r\n  local ctx = zmq.context()\r\n  local ptr\r\n  do\r\n    local skt = ctx:socket(zmq.SUB)\r\n    ctx:autoclose(skt)\r\n    ptr = weak_ptr(skt)\r\n  end\r\n  gc_collect()\r\n  assert(ptr.value == nil)\r\n  assert(ctx:destroy())\r\n\r\n  print(\"Test_SockAutoclose done!\")\r\nend",
    "type": "function"
  }, {
    "id": 97,
    "text": "local function weak_ptr(val)\r\n    return setmetatable({value = val},{__mode = 'v'})\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 98,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 99,
    "text": "local function gc_collect()\r\n    collectgarbage(\"collect\")\r\n    collectgarbage(\"collect\")\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 100,
    "text": "collectgarbage(\"collect\")",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "print(\"\\n\\nTest_SockAutoclose ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "ctx:autoclose(skt)",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "do local skt = ctx:socket(zmq.SUB) end",
    "type": "statement:do"
  }, {
    "id": 104,
    "text": "gc_collect()",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "local ptr",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "do\r\n    local skt = ctx:socket(zmq.SUB)\r\n    ctx:autoclose(skt)\r\n    ptr = weak_ptr(skt)\r\n  end",
    "type": "statement:do"
  }, {
    "id": 107,
    "text": "ptr = weak_ptr(skt)",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "assert(ptr.value == nil)",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "print(\"Test_SockAutoclose done!\")",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 111,
    "text": "local function weak_ptr(val)\r\n    return setmetatable({value = val},{__mode = 'v'})\r\n  end",
    "type": "function"
  }, {
    "id": 112,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 113,
    "text": "local function gc_collect()\r\n    collectgarbage(\"collect\")\r\n    collectgarbage(\"collect\")\r\n  end",
    "type": "function"
  }, {
    "id": 114,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 115,
    "text": "function Test_Bind_Connect()\r\n  print(\"\\n\\nTest_Bind_Connect ...\")\r\n\r\n  local ctx = zmq.context()\r\n  local pub = ctx:socket(zmq.PUB)\r\n  local ok, err, str = pub:bind{\r\n    ECHO_ADDR;\r\n    \"inproc://pub.test.1\";\r\n    \"inproc://pub.test.2\";\r\n    \"error address\";\r\n    \"inproc://pub.test.3\";\r\n  }\r\n  assert(not ok)\r\n  assert(str == \"error address\")\r\n  pub:bind(\"inproc://pub.test.3\")\r\n  \r\n  local sub1 = ctx:socket(zmq.SUB)\r\n  local sub2 = ctx:socket(zmq.SUB)\r\n  local sub3 = ctx:socket(zmq.SUB)\r\n  assert(sub1:set_subscribe(\"\"))\r\n  assert(sub2:set_subscribe(\"\"))\r\n  assert(sub3:set_subscribe(\"\"))\r\n  assert(sub1:set_rcvtimeo(100))\r\n  assert(sub2:set_rcvtimeo(100))\r\n  assert(sub3:set_rcvtimeo(100))\r\n  \r\n  assert(sub1:connect(\"inproc://pub.test.1\"))\r\n  assert(sub2:connect(\"inproc://pub.test.2\"))\r\n  assert(sub3:connect(\"inproc://pub.test.3\"))\r\n  ztimer.sleep(1000)\r\n  assert(pub:send(\"hello\"))\r\n  assert( \"hello\" == \r\n  assert(sub1:recv()))\r\n  assert( \"hello\" == \r\n  assert(sub2:recv()))\r\n  assert( \"hello\" == \r\n  assert(sub3:recv()))\r\n\r\n  sub2:close()\r\n  sub3:close()\r\n\r\n\r\n  assert(sub1:connect(ECHO_ADDR))\r\n  ztimer.sleep(1000)\r\n\r\n  assert(pub:send(\"hello\"))\r\n  assert( \"hello\" == \r\n  assert(sub1:recv()))\r\n  assert( \"hello\" == \r\n  assert(sub1:recv()))\r\n\r\n  ok, err, str = sub1:disconnect{\r\n    ECHO_ADDR;\r\n    \"inproc://pub.test.3\";\r\n  }\r\n  assert(not ok)\r\n  assert(str == \"inproc://pub.test.3\")\r\n  ztimer.sleep(1000)\r\n\r\n  assert(pub:send(\"hello\"))\r\n  assert( \"hello\" == \r\n  assert(sub1:recv()))\r\n  assert(not sub1:recv())\r\n\r\n  sub1:close()\r\n  pub:close()\r\n\r\n  assert(ctx:destroy())\r\n\r\n  print(\"Test_Bind_Connect done!\")\r\nend",
    "type": "function"
  }, {
    "id": 116,
    "text": "print(\"\\n\\nTest_Bind_Connect ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "local pub = ctx:socket(zmq.PUB)",
    "type": "statement:localassign"
  }, {
    "id": 118,
    "text": "local ok, err, str = pub:bind{\r\n    ECHO_ADDR;\r\n    \"inproc://pub.test.1\";\r\n    \"inproc://pub.test.2\";\r\n    \"error address\";\r\n    \"inproc://pub.test.3\";\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 119,
    "text": "assert(not ok)",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "assert(str == \"error address\")",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "pub:bind(\"inproc://pub.test.3\")",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "local sub1 = ctx:socket(zmq.SUB)",
    "type": "statement:localassign"
  }, {
    "id": 123,
    "text": "local sub2 = ctx:socket(zmq.SUB)",
    "type": "statement:localassign"
  }, {
    "id": 124,
    "text": "local sub3 = ctx:socket(zmq.SUB)",
    "type": "statement:localassign"
  }, {
    "id": 125,
    "text": "assert(sub1:set_subscribe(\"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "assert(sub2:set_subscribe(\"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "assert(sub3:set_subscribe(\"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "assert(sub1:set_rcvtimeo(100))",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "assert(sub2:set_rcvtimeo(100))",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "assert(sub3:set_rcvtimeo(100))",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "assert(sub1:connect(\"inproc://pub.test.1\"))",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "assert(sub2:connect(\"inproc://pub.test.2\"))",
    "type": "statement:functioncall"
  }, {
    "id": 133,
    "text": "assert(sub3:connect(\"inproc://pub.test.3\"))",
    "type": "statement:functioncall"
  }, {
    "id": 134,
    "text": "ztimer.sleep(1000)",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "assert(pub:send(\"hello\"))",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "assert( \"hello\" == \r\n  assert(sub1:recv()))",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "assert( \"hello\" == \r\n  assert(sub2:recv()))",
    "type": "statement:functioncall"
  }, {
    "id": 138,
    "text": "assert( \"hello\" == \r\n  assert(sub3:recv()))",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "sub2:close()",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "sub3:close()",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "assert(sub1:connect(ECHO_ADDR))",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "ok, err, str = sub1:disconnect{\r\n    ECHO_ADDR;\r\n    \"inproc://pub.test.3\";\r\n  }",
    "type": "statement:assign"
  }, {
    "id": 143,
    "text": "assert(str == \"inproc://pub.test.3\")",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "assert(not sub1:recv())",
    "type": "statement:functioncall"
  }, {
    "id": 145,
    "text": "sub1:close()",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "pub:close()",
    "type": "statement:functioncall"
  }, {
    "id": 147,
    "text": "print(\"Test_Bind_Connect done!\")",
    "type": "statement:functioncall"
  }, {
    "id": 148,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 149,
    "text": "function Test_Error()\r\n  print(\"\\n\\nTest_Error ...\")\r\n\r\n  for k, v in pairs(zmq.errors) do\r\n    assert(zmq.errors[v] == k)\r\n  end\r\n\r\n  local zassert = zmq.assert\r\n  local err = zmq.error(zmq.errors.EAGAIN)\r\n  assert(err:no()    == zmq.errors.EAGAIN)\r\n  assert(err:mnemo() == \"EAGAIN\")\r\n  local str_err = tostring(err)\r\n  local ok, msg = pcall( zassert, false, err )\r\n  assert(not ok)\r\n  assert(string.find(msg, str_err, 1, true))\r\n\r\n  local ctx = zmq.context();\r\n  local ok, err = ctx:set(89, 89)\r\n  assert(ok == nil)\r\n  if type(err) == 'string' then\r\n    assert(err:sub(2,7) == 'EINVAL')\r\n  elseif type(err) == 'number' then\r\n    assert(err == zmq.errors.EINVAL)\r\n  else \r\n    assert(type(err)   == 'userdata')\r\n    assert(err:mnemo() == 'EINVAL')\r\n    assert(err:no()    == zmq.errors.EINVAL)\r\n  end\r\n  ctx:destroy()\r\n  print(\"Test_Error done!\")\r\nend",
    "type": "function"
  }, {
    "id": 150,
    "text": "print(\"\\n\\nTest_Error ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "for k, v in pairs(zmq.errors) do\r\n    assert(zmq.errors[v] == k)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 152,
    "text": "assert(zmq.errors[v] == k)",
    "type": "statement:functioncall"
  }, {
    "id": 153,
    "text": "local zassert = zmq.assert",
    "type": "statement:localassign"
  }, {
    "id": 154,
    "text": "local err = zmq.error(zmq.errors.EAGAIN)",
    "type": "statement:localassign"
  }, {
    "id": 155,
    "text": "assert(err:no()    == zmq.errors.EAGAIN)",
    "type": "statement:functioncall"
  }, {
    "id": 156,
    "text": "assert(err:mnemo() == \"EAGAIN\")",
    "type": "statement:functioncall"
  }, {
    "id": 157,
    "text": "local str_err = tostring(err)",
    "type": "statement:localassign"
  }, {
    "id": 158,
    "text": "local ok, msg = pcall( zassert, false, err )",
    "type": "statement:localassign"
  }, {
    "id": 159,
    "text": "assert(string.find(msg, str_err, 1, true))",
    "type": "statement:functioncall"
  }, {
    "id": 160,
    "text": "local ok, err = ctx:set(89, 89)",
    "type": "statement:localassign"
  }, {
    "id": 161,
    "text": "assert(ok == nil)",
    "type": "statement:functioncall"
  }, {
    "id": 162,
    "text": "if type(err) == 'string' then\r\n    assert(err:sub(2,7) == 'EINVAL')\r\n  elseif type(err) == 'number' then\r\n    assert(err == zmq.errors.EINVAL)\r\n  else \r\n    assert(type(err)   == 'userdata')\r\n    assert(err:mnemo() == 'EINVAL')\r\n    assert(err:no()    == zmq.errors.EINVAL)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 163,
    "text": "assert(err:sub(2,7) == 'EINVAL')",
    "type": "statement:functioncall"
  }, {
    "id": 164,
    "text": "assert(err == zmq.errors.EINVAL)",
    "type": "statement:functioncall"
  }, {
    "id": 165,
    "text": "assert(type(err)   == 'userdata')",
    "type": "statement:functioncall"
  }, {
    "id": 166,
    "text": "assert(err:mnemo() == 'EINVAL')",
    "type": "statement:functioncall"
  }, {
    "id": 167,
    "text": "assert(err:no()    == zmq.errors.EINVAL)",
    "type": "statement:functioncall"
  }, {
    "id": 168,
    "text": "ctx:destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 169,
    "text": "print(\"Test_Error done!\")",
    "type": "statement:functioncall"
  }, {
    "id": 170,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 171,
    "text": "local function Test_Timer(timer)\r\n  print(\"\\n\\nTest_Timer ...\")\r\n\r\n  local COUNT    = 100\r\n  local INTERVAL = 100\r\n  local DELTA    = 50\r\n\r\n  local name = timer:is_absolute() and 'absolute' or 'monotonic';\r\n\r\n  local max_delta, totla_delta, totla_delta2 = 0, 0, 0\r\n\r\n  if timer:is_absolute() then\r\n    assert( timer == timer:set(ztimer.absolute_time() + INTERVAL) )\r\n  else\r\n    assert( timer == timer:set(INTERVAL) )\r\n  end\r\n\r\n  assert(not timer:started())\r\n  assert(not timer:closed())\r\n  assert(not pcall(timer.elapsed, timer))\r\n  assert(not pcall(timer.rest, timer))\r\n  assert(timer == timer:start())\r\n\r\n  for i = 1, COUNT do\r\n\r\n    timer:start()\r\n    ztimer.sleep(INTERVAL + DELTA)\r\n    local elapsed = timer:elapsed()\r\n    assert(timer:rest() == 0)\r\n\r\n    local delta = math.abs(elapsed - (INTERVAL + DELTA))\r\n    if delta > max_delta then max_delta = delta end\r\n    totla_delta = totla_delta + delta\r\n    totla_delta2 = totla_delta2 + (elapsed - (INTERVAL + DELTA))\r\n\r\n    assert(timer:start())\r\n    assert(timer:started())\r\n    assert(timer:setted())\r\n    assert(not pcall(timer.start, start))\r\n    assert(timer:stop())\r\n    assert(not pcall(timer.elapsed, timer))\r\n    assert(not pcall(timer.rest,  timer))\r\n  end\r\n\r\n  print(\"timer: \", name)\r\n  print(\"Max delta    : \", max_delta)\r\n  print(\"Avg delta    : \", totla_delta2/1000)\r\n  print(\"Avg abs delta: \", totla_delta/1000)\r\n  print(\"----------------------------------\")\r\n\r\n  assert(timer:close())\r\n  assert(timer:closed())\r\n  assert(timer:close())\r\n\r\n  print(\"Test_Timer done!\")\r\nend",
    "type": "function"
  }, {
    "id": 172,
    "text": "print(\"\\n\\nTest_Timer ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 173,
    "text": "local COUNT    = 100",
    "type": "statement:localassign"
  }, {
    "id": 174,
    "text": "local INTERVAL = 100",
    "type": "statement:localassign"
  }, {
    "id": 175,
    "text": "local DELTA    = 50",
    "type": "statement:localassign"
  }, {
    "id": 176,
    "text": "local name = timer:is_absolute() and 'absolute' or 'monotonic'",
    "type": "statement:localassign"
  }, {
    "id": 177,
    "text": "local max_delta, totla_delta, totla_delta2 = 0, 0, 0",
    "type": "statement:localassign"
  }, {
    "id": 178,
    "text": "if timer:is_absolute() then\r\n    assert( timer == timer:set(ztimer.absolute_time() + INTERVAL) )\r\n  else\r\n    assert( timer == timer:set(INTERVAL) )\r\n  end",
    "type": "statement:if"
  }, {
    "id": 179,
    "text": "assert( timer == timer:set(ztimer.absolute_time() + INTERVAL) )",
    "type": "statement:functioncall"
  }, {
    "id": 180,
    "text": "assert( timer == timer:set(INTERVAL) )",
    "type": "statement:functioncall"
  }, {
    "id": 181,
    "text": "assert(not timer:started())",
    "type": "statement:functioncall"
  }, {
    "id": 182,
    "text": "assert(not timer:closed())",
    "type": "statement:functioncall"
  }, {
    "id": 183,
    "text": "assert(not pcall(timer.elapsed, timer))",
    "type": "statement:functioncall"
  }, {
    "id": 184,
    "text": "assert(not pcall(timer.rest, timer))",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "assert(timer == timer:start())",
    "type": "statement:functioncall"
  }, {
    "id": 186,
    "text": "for i = 1, COUNT do\r\n\r\n    timer:start()\r\n    ztimer.sleep(INTERVAL + DELTA)\r\n    local elapsed = timer:elapsed()\r\n    assert(timer:rest() == 0)\r\n\r\n    local delta = math.abs(elapsed - (INTERVAL + DELTA))\r\n    if delta > max_delta then max_delta = delta end\r\n    totla_delta = totla_delta + delta\r\n    totla_delta2 = totla_delta2 + (elapsed - (INTERVAL + DELTA))\r\n\r\n    assert(timer:start())\r\n    assert(timer:started())\r\n    assert(timer:setted())\r\n    assert(not pcall(timer.start, start))\r\n    assert(timer:stop())\r\n    assert(not pcall(timer.elapsed, timer))\r\n    assert(not pcall(timer.rest,  timer))\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 187,
    "text": "timer:start()",
    "type": "statement:functioncall"
  }, {
    "id": 188,
    "text": "ztimer.sleep(INTERVAL + DELTA)",
    "type": "statement:functioncall"
  }, {
    "id": 189,
    "text": "local elapsed = timer:elapsed()",
    "type": "statement:localassign"
  }, {
    "id": 190,
    "text": "assert(timer:rest() == 0)",
    "type": "statement:functioncall"
  }, {
    "id": 191,
    "text": "local delta = math.abs(elapsed - (INTERVAL + DELTA))",
    "type": "statement:localassign"
  }, {
    "id": 192,
    "text": "if delta > max_delta then max_delta = delta end",
    "type": "statement:if"
  }, {
    "id": 193,
    "text": "max_delta = delta",
    "type": "statement:assign"
  }, {
    "id": 194,
    "text": "totla_delta = totla_delta + delta",
    "type": "statement:assign"
  }, {
    "id": 195,
    "text": "totla_delta2 = totla_delta2 + (elapsed - (INTERVAL + DELTA))",
    "type": "statement:assign"
  }, {
    "id": 196,
    "text": "assert(timer:start())",
    "type": "statement:functioncall"
  }, {
    "id": 197,
    "text": "assert(timer:started())",
    "type": "statement:functioncall"
  }, {
    "id": 198,
    "text": "assert(timer:setted())",
    "type": "statement:functioncall"
  }, {
    "id": 199,
    "text": "assert(not pcall(timer.start, start))",
    "type": "statement:functioncall"
  }, {
    "id": 200,
    "text": "assert(timer:stop())",
    "type": "statement:functioncall"
  }, {
    "id": 201,
    "text": "assert(not pcall(timer.rest,  timer))",
    "type": "statement:functioncall"
  }, {
    "id": 202,
    "text": "print(\"timer: \", name)",
    "type": "statement:functioncall"
  }, {
    "id": 203,
    "text": "print(\"Max delta    : \", max_delta)",
    "type": "statement:functioncall"
  }, {
    "id": 204,
    "text": "print(\"Avg delta    : \", totla_delta2/1000)",
    "type": "statement:functioncall"
  }, {
    "id": 205,
    "text": "print(\"Avg abs delta: \", totla_delta/1000)",
    "type": "statement:functioncall"
  }, {
    "id": 206,
    "text": "print(\"----------------------------------\")",
    "type": "statement:functioncall"
  }, {
    "id": 207,
    "text": "assert(timer:close())",
    "type": "statement:functioncall"
  }, {
    "id": 208,
    "text": "assert(timer:closed())",
    "type": "statement:functioncall"
  }, {
    "id": 209,
    "text": "print(\"Test_Timer done!\")",
    "type": "statement:functioncall"
  }, {
    "id": 210,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 211,
    "text": "function Test_loop()\r\n  print(\"\\n\\nTest_loop ...\")\r\n  local loop = zloop.new()\r\n  local flag1,flag2,flag3\r\n  loop:add_once(10, function() flag1 = true end)\r\n  assert(0 == loop:flush(100)) -- flush only io events\r\n  assert(not flag1)\r\n  assert(1 == loop:sleep_ex(100))\r\n  assert(flag1)\r\n  flag1 = false\r\n  loop:add_once(10, function() flag1 = true end)\r\n  loop.sleep(100)\r\n  assert(not flag1)\r\n  assert(1 == loop:sleep_ex(0))\r\n  assert(flag1)\r\n  loop:destroy()\r\n  print(\"Test_loop done\")\r\nend",
    "type": "function"
  }, {
    "id": 212,
    "text": "print(\"\\n\\nTest_loop ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 213,
    "text": "local loop = zloop.new()",
    "type": "statement:localassign"
  }, {
    "id": 214,
    "text": "local flag1,flag2,flag3",
    "type": "statement:localassign"
  }, {
    "id": 215,
    "text": "loop:add_once(10, function() flag1 = true end)",
    "type": "statement:functioncall"
  }, {
    "id": 216,
    "text": "flag1 = true",
    "type": "statement:assign"
  }, {
    "id": 217,
    "text": "assert(0 == loop:flush(100))",
    "type": "statement:functioncall"
  }, {
    "id": 218,
    "text": "assert(not flag1)",
    "type": "statement:functioncall"
  }, {
    "id": 219,
    "text": "assert(1 == loop:sleep_ex(100))",
    "type": "statement:functioncall"
  }, {
    "id": 220,
    "text": "assert(flag1)",
    "type": "statement:functioncall"
  }, {
    "id": 221,
    "text": "flag1 = false",
    "type": "statement:assign"
  }, {
    "id": 222,
    "text": "loop.sleep(100)",
    "type": "statement:functioncall"
  }, {
    "id": 223,
    "text": "assert(1 == loop:sleep_ex(0))",
    "type": "statement:functioncall"
  }, {
    "id": 224,
    "text": "loop:destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 225,
    "text": "print(\"Test_loop done\")",
    "type": "statement:functioncall"
  }, {
    "id": 226,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 227,
    "text": "function Test_Remove_ev()\r\n  print(\"\\n\\nTest_Remove_ev ...\")\r\n\r\n  local c = 0\r\n  local N = 10\r\n  local T = 100\r\n  local flag1,flag2,flag3\r\n\r\n  local loop = zloop.new()\r\n\r\n  local ext_ev = loop:add_interval(T, function()\r\n    flag3 = false\r\n  end)\r\n\r\n  local function fn2(ev, loop) \r\n    assert(c < N)\r\n    assert(flag1, \"event 1 does not stop\")\r\n\r\n    c = c + 1\r\n    if c == N then\r\n      ev:reset()     -- remove self\r\n      ext_ev:reset() -- remove ext\r\n\r\n      assert(flag3 == false, \"ext_ev does not work\")\r\n\r\n      c, flag2, flag3 = 0, true, true\r\n\r\n      loop:add_interval(T, function()\r\n        assert(flag1, \"event 1 does not stop\")\r\n        assert(flag2, \"event 1 does not stop\")\r\n        assert(flag3, \"event 1 does not stop\")\r\n        c = c + 1\r\n        if c == N then\r\n          loop:interrupt()\r\n        end\r\n      end)\r\n\r\n    end\r\n  end\r\n\r\n  local function fn1(ev, loop) \r\n    assert(c < N)\r\n    flag3 = true --  ext_ev should set to false\r\n\r\n    c = c + 1\r\n    if c == N then\r\n      c = 0\r\n      flag1 = true\r\n      ev:reset()\r\n      loop:add_interval(T, fn2)\r\n    end\r\n  end\r\n\r\n  loop:add_interval(T, fn1)\r\n\r\n  loop:start()\r\n\r\n  assert(flag1 and flag2)\r\n\r\n  print(\"Test_Remove_ev done!\")\r\nend",
    "type": "function"
  }, {
    "id": 228,
    "text": "print(\"\\n\\nTest_Remove_ev ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 229,
    "text": "local c = 0",
    "type": "statement:localassign"
  }, {
    "id": 230,
    "text": "local N = 10",
    "type": "statement:localassign"
  }, {
    "id": 231,
    "text": "local T = 100",
    "type": "statement:localassign"
  }, {
    "id": 232,
    "text": "local ext_ev = loop:add_interval(T, function()\r\n    flag3 = false\r\n  end)",
    "type": "statement:localassign"
  }, {
    "id": 233,
    "text": "flag3 = false",
    "type": "statement:assign"
  }, {
    "id": 234,
    "text": "local function fn2(ev, loop) \r\n    assert(c < N)\r\n    assert(flag1, \"event 1 does not stop\")\r\n\r\n    c = c + 1\r\n    if c == N then\r\n      ev:reset()     -- remove self\r\n      ext_ev:reset() -- remove ext\r\n\r\n      assert(flag3 == false, \"ext_ev does not work\")\r\n\r\n      c, flag2, flag3 = 0, true, true\r\n\r\n      loop:add_interval(T, function()\r\n        assert(flag1, \"event 1 does not stop\")\r\n        assert(flag2, \"event 1 does not stop\")\r\n        assert(flag3, \"event 1 does not stop\")\r\n        c = c + 1\r\n        if c == N then\r\n          loop:interrupt()\r\n        end\r\n      end)\r\n\r\n    end\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 235,
    "text": "assert(c < N)",
    "type": "statement:functioncall"
  }, {
    "id": 236,
    "text": "assert(flag1, \"event 1 does not stop\")",
    "type": "statement:functioncall"
  }, {
    "id": 237,
    "text": "c = c + 1",
    "type": "statement:assign"
  }, {
    "id": 238,
    "text": "if c == N then\r\n      ev:reset()     -- remove self\r\n      ext_ev:reset() -- remove ext\r\n\r\n      assert(flag3 == false, \"ext_ev does not work\")\r\n\r\n      c, flag2, flag3 = 0, true, true\r\n\r\n      loop:add_interval(T, function()\r\n        assert(flag1, \"event 1 does not stop\")\r\n        assert(flag2, \"event 1 does not stop\")\r\n        assert(flag3, \"event 1 does not stop\")\r\n        c = c + 1\r\n        if c == N then\r\n          loop:interrupt()\r\n        end\r\n      end)\r\n\r\n    end",
    "type": "statement:if"
  }, {
    "id": 239,
    "text": "ev:reset()",
    "type": "statement:functioncall"
  }, {
    "id": 240,
    "text": "ext_ev:reset()",
    "type": "statement:functioncall"
  }, {
    "id": 241,
    "text": "assert(flag3 == false, \"ext_ev does not work\")",
    "type": "statement:functioncall"
  }, {
    "id": 242,
    "text": "c, flag2, flag3 = 0, true, true",
    "type": "statement:assign"
  }, {
    "id": 243,
    "text": "loop:add_interval(T, function()\r\n        assert(flag1, \"event 1 does not stop\")\r\n        assert(flag2, \"event 1 does not stop\")\r\n        assert(flag3, \"event 1 does not stop\")\r\n        c = c + 1\r\n        if c == N then\r\n          loop:interrupt()\r\n        end\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 244,
    "text": "assert(flag2, \"event 1 does not stop\")",
    "type": "statement:functioncall"
  }, {
    "id": 245,
    "text": "assert(flag3, \"event 1 does not stop\")",
    "type": "statement:functioncall"
  }, {
    "id": 246,
    "text": "if c == N then\r\n          loop:interrupt()\r\n        end",
    "type": "statement:if"
  }, {
    "id": 247,
    "text": "loop:interrupt()",
    "type": "statement:functioncall"
  }, {
    "id": 248,
    "text": "local function fn1(ev, loop) \r\n    assert(c < N)\r\n    flag3 = true --  ext_ev should set to false\r\n\r\n    c = c + 1\r\n    if c == N then\r\n      c = 0\r\n      flag1 = true\r\n      ev:reset()\r\n      loop:add_interval(T, fn2)\r\n    end\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 249,
    "text": "flag3 = true",
    "type": "statement:assign"
  }, {
    "id": 250,
    "text": "if c == N then\r\n      c = 0\r\n      flag1 = true\r\n      ev:reset()\r\n      loop:add_interval(T, fn2)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 251,
    "text": "c = 0",
    "type": "statement:assign"
  }, {
    "id": 252,
    "text": "loop:add_interval(T, fn2)",
    "type": "statement:functioncall"
  }, {
    "id": 253,
    "text": "loop:add_interval(T, fn1)",
    "type": "statement:functioncall"
  }, {
    "id": 254,
    "text": "loop:start()",
    "type": "statement:functioncall"
  }, {
    "id": 255,
    "text": "assert(flag1 and flag2)",
    "type": "statement:functioncall"
  }, {
    "id": 256,
    "text": "print(\"Test_Remove_ev done!\")",
    "type": "statement:functioncall"
  }, {
    "id": 257,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 258,
    "text": "local function fn2(ev, loop) \r\n    assert(c < N)\r\n    assert(flag1, \"event 1 does not stop\")\r\n\r\n    c = c + 1\r\n    if c == N then\r\n      ev:reset()     -- remove self\r\n      ext_ev:reset() -- remove ext\r\n\r\n      assert(flag3 == false, \"ext_ev does not work\")\r\n\r\n      c, flag2, flag3 = 0, true, true\r\n\r\n      loop:add_interval(T, function()\r\n        assert(flag1, \"event 1 does not stop\")\r\n        assert(flag2, \"event 1 does not stop\")\r\n        assert(flag3, \"event 1 does not stop\")\r\n        c = c + 1\r\n        if c == N then\r\n          loop:interrupt()\r\n        end\r\n      end)\r\n\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 259,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 260,
    "text": "local function fn1(ev, loop) \r\n    assert(c < N)\r\n    flag3 = true --  ext_ev should set to false\r\n\r\n    c = c + 1\r\n    if c == N then\r\n      c = 0\r\n      flag1 = true\r\n      ev:reset()\r\n      loop:add_interval(T, fn2)\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 261,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 262,
    "text": "local function TestServer(t)\r\n  assert(t.name and t.srv and t.cli_send and t.cli_recv)\r\n\r\n  print(\"\\n\\n\" .. t.name .. \" ...\")\r\n  local main_loop = zloop.new()\r\n\r\n  assert(main_loop:add_new_bind(zmq.REP, ECHO_ADDR, t.srv))\r\n\r\n  local cli = assert(main_loop:add_new_connect(zmq.REQ, ECHO_ADDR, function(skt)\r\n    t.cli_recv(skt)\r\n    main_loop:interrupt()\r\n  end))\r\n\r\n  main_loop:add_once(200, function() t.cli_send(cli) end)\r\n\r\n  main_loop:add_once(30000, function() assert(false, \"FAIL: TIMEOUT!\") end)\r\n\r\n  main_loop:start()\r\n\r\n  main_loop:destroy()\r\n  \r\n  assert(cli:closed())\r\n\r\n  main_loop.sleep(500) -- for TCP time to release IP address\r\n  print(t.name .. \" done!\");\r\nend",
    "type": "function"
  }, {
    "id": 263,
    "text": "assert(t.name and t.srv and t.cli_send and t.cli_recv)",
    "type": "statement:functioncall"
  }, {
    "id": 264,
    "text": "print(\"\\n\\n\" .. t.name .. \" ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 265,
    "text": "local main_loop = zloop.new()",
    "type": "statement:localassign"
  }, {
    "id": 266,
    "text": "assert(main_loop:add_new_bind(zmq.REP, ECHO_ADDR, t.srv))",
    "type": "statement:functioncall"
  }, {
    "id": 267,
    "text": "local cli = assert(main_loop:add_new_connect(zmq.REQ, ECHO_ADDR, function(skt)\r\n    t.cli_recv(skt)\r\n    main_loop:interrupt()\r\n  end))",
    "type": "statement:localassign"
  }, {
    "id": 268,
    "text": "t.cli_recv(skt)",
    "type": "statement:functioncall"
  }, {
    "id": 269,
    "text": "main_loop:interrupt()",
    "type": "statement:functioncall"
  }, {
    "id": 270,
    "text": "main_loop:add_once(200, function() t.cli_send(cli) end)",
    "type": "statement:functioncall"
  }, {
    "id": 271,
    "text": "t.cli_send(cli)",
    "type": "statement:functioncall"
  }, {
    "id": 272,
    "text": "main_loop:add_once(30000, function() assert(false, \"FAIL: TIMEOUT!\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 273,
    "text": "assert(false, \"FAIL: TIMEOUT!\")",
    "type": "statement:functioncall"
  }, {
    "id": 274,
    "text": "main_loop:start()",
    "type": "statement:functioncall"
  }, {
    "id": 275,
    "text": "main_loop:destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 276,
    "text": "assert(cli:closed())",
    "type": "statement:functioncall"
  }, {
    "id": 277,
    "text": "main_loop.sleep(500)",
    "type": "statement:functioncall"
  }, {
    "id": 278,
    "text": "print(t.name .. \" done!\")",
    "type": "statement:functioncall"
  }, {
    "id": 279,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 280,
    "text": "function() flag1 = true end",
    "type": "function"
  }, {
    "id": 281,
    "text": "function() flag1 = true end",
    "type": "function"
  }, {
    "id": 282,
    "text": "function()\r\n    flag3 = false\r\n  end",
    "type": "function"
  }, {
    "id": 283,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 284,
    "text": "function()\r\n        assert(flag1, \"event 1 does not stop\")\r\n        assert(flag2, \"event 1 does not stop\")\r\n        assert(flag3, \"event 1 does not stop\")\r\n        c = c + 1\r\n        if c == N then\r\n          loop:interrupt()\r\n        end\r\n      end",
    "type": "function"
  }, {
    "id": 285,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 286,
    "text": "function(skt) end",
    "type": "function"
  }, {
    "id": 287,
    "text": "function(skt) end",
    "type": "function"
  }, {
    "id": 288,
    "text": "function(skt) end",
    "type": "function"
  }, {
    "id": 289,
    "text": "function(skt)\r\n    t.cli_recv(skt)\r\n    main_loop:interrupt()\r\n  end",
    "type": "function"
  }, {
    "id": 290,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 291,
    "text": "function() t.cli_send(cli) end",
    "type": "function"
  }, {
    "id": 292,
    "text": "function() assert(false, \"FAIL: TIMEOUT!\") end",
    "type": "function"
  }, {
    "id": 293,
    "text": "function(skt)\r\n    local msg, more = assert(print_msg(\"SRV RECV: \",skt:recv()))\r\n    assert(more       == false)\r\n    assert(skt:more() == false)\r\n    assert(skt:send(msg))\r\n  end",
    "type": "function"
  }, {
    "id": 294,
    "text": "local msg, more = assert(print_msg(\"SRV RECV: \",skt:recv()))",
    "type": "statement:localassign"
  }, {
    "id": 295,
    "text": "assert(more       == false)",
    "type": "statement:functioncall"
  }, {
    "id": 296,
    "text": "assert(skt:more() == false)",
    "type": "statement:functioncall"
  }, {
    "id": 297,
    "text": "assert(skt:send(msg))",
    "type": "statement:functioncall"
  }, {
    "id": 298,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 299,
    "text": "function(skt)\r\n    assert(skt:send('hello'))\r\n  end",
    "type": "function"
  }, {
    "id": 300,
    "text": "assert(skt:send('hello'))",
    "type": "statement:functioncall"
  }, {
    "id": 301,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 302,
    "text": "function(skt)\r\n    local msg, more = assert(print_msg(\"CLI RECV: \", skt:recv()))\r\n    assert(more       == false)\r\n    assert(skt:more() == false)\r\n  end",
    "type": "function"
  }, {
    "id": 303,
    "text": "local msg, more = assert(print_msg(\"CLI RECV: \", skt:recv()))",
    "type": "statement:localassign"
  }, {
    "id": 304,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 305,
    "text": "function(skt)\r\n    local msg = assert(print_msg(\"SRV RECV: \",skt:recv_all()))\r\n    assert(skt:send_all(msg))\r\n  end",
    "type": "function"
  }, {
    "id": 306,
    "text": "local msg = assert(print_msg(\"SRV RECV: \",skt:recv_all()))",
    "type": "statement:localassign"
  }, {
    "id": 307,
    "text": "assert(skt:send_all(msg))",
    "type": "statement:functioncall"
  }, {
    "id": 308,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 309,
    "text": "function(skt)\r\n    assert(skt:send_all{'hello','world'})\r\n  end",
    "type": "function"
  }, {
    "id": 310,
    "text": "assert(skt:send_all{'hello','world'})",
    "type": "statement:functioncall"
  }, {
    "id": 311,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 312,
    "text": "function(skt)\r\n    assert(print_msg(\"CLI RECV: \", skt:recv_all()))\r\n  end",
    "type": "function"
  }, {
    "id": 313,
    "text": "assert(print_msg(\"CLI RECV: \", skt:recv_all()))",
    "type": "statement:functioncall"
  }, {
    "id": 314,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 315,
    "text": "function(skt)\r\n    local msg = assert(zmq.msg_init())\r\n    local msg2, more = assert(print_msg(\"SRV RECV: \",skt:recv_msg(msg)))\r\n    assert(msg == msg2)\r\n    assert(more       == false)\r\n    assert(skt:more() == false)\r\n    assert(msg:more() == false)\r\n    assert(skt:send_msg(msg))\r\n    assert(not msg:closed())\r\n    assert(msg:size() == 0)\r\n    assert(msg:close())\r\n\r\n    assert(msg:closed())\r\n    assert(not pcall(msg.size, msg))\r\n    assert(not pcall(msg.more, msg))\r\n    assert(msg:close())\r\n  end",
    "type": "function"
  }, {
    "id": 316,
    "text": "local msg = assert(zmq.msg_init())",
    "type": "statement:localassign"
  }, {
    "id": 317,
    "text": "local msg2, more = assert(print_msg(\"SRV RECV: \",skt:recv_msg(msg)))",
    "type": "statement:localassign"
  }, {
    "id": 318,
    "text": "assert(msg == msg2)",
    "type": "statement:functioncall"
  }, {
    "id": 319,
    "text": "assert(msg:more() == false)",
    "type": "statement:functioncall"
  }, {
    "id": 320,
    "text": "assert(skt:send_msg(msg))",
    "type": "statement:functioncall"
  }, {
    "id": 321,
    "text": "assert(not msg:closed())",
    "type": "statement:functioncall"
  }, {
    "id": 322,
    "text": "assert(msg:size() == 0)",
    "type": "statement:functioncall"
  }, {
    "id": 323,
    "text": "assert(msg:close())",
    "type": "statement:functioncall"
  }, {
    "id": 324,
    "text": "assert(msg:closed())",
    "type": "statement:functioncall"
  }, {
    "id": 325,
    "text": "assert(not pcall(msg.size, msg))",
    "type": "statement:functioncall"
  }, {
    "id": 326,
    "text": "assert(not pcall(msg.more, msg))",
    "type": "statement:functioncall"
  }, {
    "id": 327,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 328,
    "text": "function(skt)\r\n    local msg = assert(zmq.msg_init_data('hello'))\r\n    assert(msg:send(skt))\r\n    assert(not msg:closed())\r\n    assert(msg:size() == 0)\r\n    assert(msg:close())\r\n  end",
    "type": "function"
  }, {
    "id": 329,
    "text": "local msg = assert(zmq.msg_init_data('hello'))",
    "type": "statement:localassign"
  }, {
    "id": 330,
    "text": "assert(msg:send(skt))",
    "type": "statement:functioncall"
  }, {
    "id": 331,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 332,
    "text": "function(skt)\r\n    local msg = assert(zmq.msg_init())\r\n    local msg2, more = assert(print_msg(\"CLI RECV: \", msg:recv(skt)))\r\n    assert(msg == msg2)\r\n    assert(more       == false)\r\n    assert(skt:more() == false)\r\n    assert(msg:more() == false)\r\n    assert(not msg:closed())\r\n    assert(msg:close())\r\n  end",
    "type": "function"
  }, {
    "id": 333,
    "text": "local msg2, more = assert(print_msg(\"CLI RECV: \", msg:recv(skt)))",
    "type": "statement:localassign"
  }, {
    "id": 334,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 335,
    "text": "function(skt) \r\n    local msg1, more = assert(skt:recv())\r\n    assert(more == skt:more() and more == true)\r\n    local msg2, more = assert(skt:recv_new_msg())\r\n    assert(more == skt:more() and more == msg2:more() and more == true)\r\n    local msg3, more = assert(zmq.msg_init():recv(skt))\r\n    assert(more == skt:more() and more == msg3:more() and more == true)\r\n    local msgs = {}\r\n    local t = {}\r\n    repeat \r\n      local msg, more = assert(skt:recv())\r\n      assert(more == skt:more())\r\n      table.insert(msgs, msg)\r\n      table.insert(t, msg)\r\n    until not more\r\n\r\n    table.insert(t, 1, msg3:data())\r\n    table.insert(t, 1, msg2:data())\r\n    table.insert(t, 1, msg1)\r\n    print_msg(\"SRV RECV: \",t)\r\n\r\n    for i = 1, #t-1 do assert(skt:send_more(t[i])) end\r\n    assert(skt:send(t[#t]))\r\n  end",
    "type": "function"
  }, {
    "id": 336,
    "text": "local msg1, more = assert(skt:recv())",
    "type": "statement:localassign"
  }, {
    "id": 337,
    "text": "assert(more == skt:more() and more == true)",
    "type": "statement:functioncall"
  }, {
    "id": 338,
    "text": "local msg2, more = assert(skt:recv_new_msg())",
    "type": "statement:localassign"
  }, {
    "id": 339,
    "text": "assert(more == skt:more() and more == msg2:more() and more == true)",
    "type": "statement:functioncall"
  }, {
    "id": 340,
    "text": "local msg3, more = assert(zmq.msg_init():recv(skt))",
    "type": "statement:localassign"
  }, {
    "id": 341,
    "text": "assert(more == skt:more() and more == msg3:more() and more == true)",
    "type": "statement:functioncall"
  }, {
    "id": 342,
    "text": "local msgs = {}",
    "type": "statement:localassign"
  }, {
    "id": 343,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 344,
    "text": "repeat \r\n      local msg, more = assert(skt:recv())\r\n      assert(more == skt:more())\r\n      table.insert(msgs, msg)\r\n      table.insert(t, msg)\r\n    until not more",
    "type": "statement:repeat"
  }, {
    "id": 345,
    "text": "local msg, more = assert(skt:recv())",
    "type": "statement:localassign"
  }, {
    "id": 346,
    "text": "assert(more == skt:more())",
    "type": "statement:functioncall"
  }, {
    "id": 347,
    "text": "table.insert(msgs, msg)",
    "type": "statement:functioncall"
  }, {
    "id": 348,
    "text": "table.insert(t, msg)",
    "type": "statement:functioncall"
  }, {
    "id": 349,
    "text": "table.insert(t, 1, msg3:data())",
    "type": "statement:functioncall"
  }, {
    "id": 350,
    "text": "table.insert(t, 1, msg2:data())",
    "type": "statement:functioncall"
  }, {
    "id": 351,
    "text": "table.insert(t, 1, msg1)",
    "type": "statement:functioncall"
  }, {
    "id": 352,
    "text": "print_msg(\"SRV RECV: \",t)",
    "type": "statement:functioncall"
  }, {
    "id": 353,
    "text": "for i = 1, #t-1 do assert(skt:send_more(t[i])) end",
    "type": "statement:numericfor"
  }, {
    "id": 354,
    "text": "assert(skt:send_more(t[i]))",
    "type": "statement:functioncall"
  }, {
    "id": 355,
    "text": "assert(skt:send(t[#t]))",
    "type": "statement:functioncall"
  }, {
    "id": 356,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 357,
    "text": "function(skt)\r\n    zmq.msg_init_data('Hello'):send_more(skt)\r\n    skt:send_more(\", \")\r\n    zmq.msg_init_data('world'):send(skt, zmq.SNDMORE)\r\n    skt:send(\"!!!\", zmq.SNDMORE)\r\n    skt:send(\"\")\r\n  end",
    "type": "function"
  }, {
    "id": 358,
    "text": "zmq.msg_init_data('Hello'):send_more(skt)",
    "type": "statement:functioncall"
  }, {
    "id": 359,
    "text": "skt:send_more(\", \")",
    "type": "statement:functioncall"
  }, {
    "id": 360,
    "text": "zmq.msg_init_data('world'):send(skt, zmq.SNDMORE)",
    "type": "statement:functioncall"
  }, {
    "id": 361,
    "text": "skt:send(\"!!!\", zmq.SNDMORE)",
    "type": "statement:functioncall"
  }, {
    "id": 362,
    "text": "skt:send(\"\")",
    "type": "statement:functioncall"
  }, {
    "id": 363,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 364,
    "text": "function(skt)\r\n    assert(print_msg(\"CLI RECV: \", skt:recv_all()))\r\n  end",
    "type": "function"
  }, {
    "id": 365,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 366,
    "text": "function(skt)\r\n    local msg, more, len = assert(print_msg(\"SRV RECV: \", skt:recv_len(16)))\r\n    assert(more       == false)\r\n    assert(skt:more() == false)\r\n    assert(len == 32)\r\n    assert(#msg == 16)\r\n    assert(skt:send(msg))\r\n  end",
    "type": "function"
  }, {
    "id": 367,
    "text": "local msg, more, len = assert(print_msg(\"SRV RECV: \", skt:recv_len(16)))",
    "type": "statement:localassign"
  }, {
    "id": 368,
    "text": "assert(len == 32)",
    "type": "statement:functioncall"
  }, {
    "id": 369,
    "text": "assert(#msg == 16)",
    "type": "statement:functioncall"
  }, {
    "id": 370,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 371,
    "text": "function(skt)\r\n    assert(skt:send(('0'):rep(32)))\r\n  end",
    "type": "function"
  }, {
    "id": 372,
    "text": "assert(skt:send(('0'):rep(32)))",
    "type": "statement:functioncall"
  }, {
    "id": 373,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 374,
    "text": "function(skt)\r\n    local msg, more = assert(print_msg(\"CLI RECV: \", skt:recv()))\r\n    assert(more       == false)\r\n    assert(skt:more() == false)\r\n    assert(skt:send(('0'):rep(8)))\r\n  end",
    "type": "function"
  }, {
    "id": 375,
    "text": "assert(skt:send(('0'):rep(8)))",
    "type": "statement:functioncall"
  }, {
    "id": 376,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 377,
    "text": "",
    "type": "function container"
  }, {
    "id": 378,
    "text": "absolute",
    "type": "global function"
  }, {
    "id": 379,
    "text": "sleep",
    "type": "global function"
  }, {
    "id": 380,
    "text": "context",
    "type": "global function"
  }, {
    "id": 381,
    "text": "init_ctx",
    "type": "global function"
  }, {
    "id": 382,
    "text": "monotonic",
    "type": "global function"
  }, {
    "id": 383,
    "text": "absolute_time",
    "type": "global function"
  }, {
    "id": 384,
    "text": "msg_init",
    "type": "global function"
  }, {
    "id": 385,
    "text": "new",
    "type": "global function"
  }, {
    "id": 386,
    "text": "msg_init_size",
    "type": "global function"
  }, {
    "id": 387,
    "text": "msg_init_data",
    "type": "global function"
  }, {
    "id": 388,
    "text": "strerror",
    "type": "global function"
  }, {
    "id": 389,
    "text": "error",
    "type": "global function"
  }, {
    "id": 390,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 391,
    "text": "print",
    "type": "global function"
  }, {
    "id": 392,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 393,
    "text": "print_version",
    "type": "global function"
  }, {
    "id": 394,
    "text": "sleep",
    "type": "global function"
  }, {
    "id": 395,
    "text": "type",
    "type": "global function"
  }, {
    "id": 396,
    "text": "collectgarbage",
    "type": "global function"
  }, {
    "id": 397,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 398,
    "text": "cli_send",
    "type": "global function"
  }, {
    "id": 399,
    "text": "sleep",
    "type": "global function"
  }, {
    "id": 400,
    "text": "abs",
    "type": "global function"
  }, {
    "id": 401,
    "text": "require",
    "type": "global function"
  }, {
    "id": 402,
    "text": "cli_recv",
    "type": "global function"
  }, {
    "id": 403,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 404,
    "text": "print_msg",
    "type": "global function"
  }, {
    "id": 405,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 406,
    "text": "find",
    "type": "global function"
  }, {
    "id": 407,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 408,
    "text": "",
    "type": "global variable"
  }, {
    "id": 409,
    "text": "",
    "type": "variable container"
  }, {
    "id": 410,
    "text": "",
    "type": "require container"
  }, {
    "id": 411,
    "text": "",
    "type": "local variable"
  }, {
    "id": 412,
    "text": "",
    "type": "n/a"
  }, {
    "id": 413,
    "text": "",
    "type": "local variable"
  }, {
    "id": 414,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 415,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 416,
    "text": "",
    "type": "string"
  }, {
    "id": 417,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 418,
    "text": "",
    "type": "function"
  }, {
    "id": 419,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 420,
    "text": "",
    "type": "function"
  }, {
    "id": 421,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 422,
    "text": "",
    "type": "function"
  }, {
    "id": 423,
    "text": "",
    "type": "global variable"
  }, {
    "id": 424,
    "text": "",
    "type": "global variable"
  }, {
    "id": 425,
    "text": "",
    "type": "global variable"
  }, {
    "id": 426,
    "text": "",
    "type": "n/a"
  }, {
    "id": 427,
    "text": "",
    "type": "global variable"
  }, {
    "id": 428,
    "text": "",
    "type": "n/a"
  }, {
    "id": 429,
    "text": "",
    "type": "global variable"
  }, {
    "id": 430,
    "text": "",
    "type": "n/a"
  }, {
    "id": 431,
    "text": "",
    "type": "global variable"
  }, {
    "id": 432,
    "text": "",
    "type": "n/a"
  }, {
    "id": 433,
    "text": "",
    "type": "global variable"
  }, {
    "id": 434,
    "text": "",
    "type": "n/a"
  }, {
    "id": 435,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 436,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 437,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 438,
    "text": "",
    "type": "require local variable"
  } ]
}