{
  "_filename": "list.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-stdlib/src/list.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "calls",
    "to": 48
  }, {
    "from": 4,
    "label": "calls",
    "to": 61
  }, {
    "from": 4,
    "label": "calls",
    "to": 61
  }, {
    "from": 5,
    "label": "calls",
    "to": 18
  }, {
    "from": 6,
    "label": "calls",
    "to": 18
  }, {
    "from": 4,
    "label": "calls",
    "to": 18
  }, {
    "from": 4,
    "label": "calls",
    "to": 18
  }, {
    "from": 3,
    "label": "calls",
    "to": 7
  }, {
    "from": 3,
    "label": "calls",
    "to": 48
  }, {
    "from": 5,
    "label": "calls",
    "to": 58
  }, {
    "from": 4,
    "label": "calls",
    "to": 20
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 9
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 13,
    "label": "has",
    "to": 9
  }, {
    "from": 13,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 9
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 9
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 9
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 24,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 24,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 24,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 24,
    "label": "has",
    "to": 9
  }, {
    "from": 24,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 9
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 9
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 9
  }, {
    "from": 40,
    "label": "has",
    "to": 9
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 9
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 9
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 48,
    "label": "has",
    "to": 9
  }, {
    "from": 48,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 49
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 54,
    "label": "has",
    "to": 9
  }, {
    "from": 54,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 25
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 34
  }, {
    "from": 58,
    "label": "has",
    "to": 9
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 9
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 61,
    "label": "has",
    "to": 9
  }, {
    "from": 61,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 9
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 9
  }, {
    "from": 70,
    "label": "has",
    "to": 9
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 72,
    "label": "has",
    "to": 9
  }, {
    "from": 72,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 77,
    "label": "has",
    "to": 9
  }, {
    "from": 77,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 25
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 82,
    "label": "has",
    "to": 9
  }, {
    "from": 82,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 86,
    "label": "has",
    "to": 89
  }, {
    "from": 86,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 91,
    "label": "has",
    "to": 94
  }, {
    "from": 86,
    "label": "has",
    "to": 9
  }, {
    "from": 86,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 86,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 78
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 99,
    "label": "has",
    "to": 102
  }, {
    "from": 97,
    "label": "has",
    "to": 9
  }, {
    "from": 97,
    "label": "has",
    "to": 9
  }, {
    "from": 86,
    "label": "has",
    "to": 9
  }, {
    "from": 86,
    "label": "has",
    "to": 103
  }, {
    "from": 104,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 78
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 99,
    "label": "has",
    "to": 102
  }, {
    "from": 104,
    "label": "has",
    "to": 9
  }, {
    "from": 104,
    "label": "has",
    "to": 9
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 106,
    "label": "has",
    "to": 25
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 107,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 106,
    "label": "has",
    "to": 9
  }, {
    "from": 106,
    "label": "has",
    "to": 111
  }, {
    "from": 112,
    "label": "has",
    "to": 25
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 108
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 112,
    "label": "has",
    "to": 9
  }, {
    "from": 112,
    "label": "has",
    "to": 116
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 117,
    "label": "has",
    "to": 9
  }, {
    "from": 117,
    "label": "has",
    "to": 9
  }, {
    "from": 117,
    "label": "has",
    "to": 120
  }, {
    "from": 117,
    "label": "has",
    "to": 9
  }, {
    "from": 117,
    "label": "has",
    "to": 9
  }, {
    "from": 117,
    "label": "has",
    "to": 9
  }, {
    "from": 117,
    "label": "has",
    "to": 121
  }, {
    "from": 122,
    "label": "has",
    "to": 9
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 124,
    "label": "has",
    "to": 10
  }, {
    "from": 124,
    "label": "has",
    "to": 11
  }, {
    "from": 124,
    "label": "has",
    "to": 9
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 126,
    "label": "has",
    "to": 15
  }, {
    "from": 126,
    "label": "has",
    "to": 16
  }, {
    "from": 126,
    "label": "has",
    "to": 9
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 128,
    "label": "has",
    "to": 9
  }, {
    "from": 129,
    "label": "has",
    "to": 9
  }, {
    "from": 130,
    "label": "has",
    "to": 9
  }, {
    "from": 131,
    "label": "has",
    "to": 9
  }, {
    "from": 132,
    "label": "has",
    "to": 9
  }, {
    "from": 40,
    "label": "calls",
    "to": 148
  }, {
    "from": 72,
    "label": "calls",
    "to": 153
  }, {
    "from": 61,
    "label": "calls",
    "to": 152
  }, {
    "from": 86,
    "label": "calls",
    "to": 82
  }, {
    "from": 68,
    "label": "calls",
    "to": 20
  }, {
    "from": 61,
    "label": "calls",
    "to": 18
  }, {
    "from": 70,
    "label": "calls",
    "to": 18
  }, {
    "from": 22,
    "label": "calls",
    "to": 143
  }, {
    "from": 86,
    "label": "calls",
    "to": 137
  }, {
    "from": 20,
    "label": "calls",
    "to": 144
  }, {
    "from": 38,
    "label": "calls",
    "to": 147
  }, {
    "from": 40,
    "label": "calls",
    "to": 147
  }, {
    "from": 54,
    "label": "calls",
    "to": 146
  }, {
    "from": 86,
    "label": "calls",
    "to": 150
  }, {
    "from": 106,
    "label": "calls",
    "to": 150
  }, {
    "from": 112,
    "label": "calls",
    "to": 150
  }, {
    "from": 42,
    "label": "calls",
    "to": 155
  }, {
    "from": 44,
    "label": "calls",
    "to": 155
  }, {
    "from": 61,
    "label": "calls",
    "to": 155
  }, {
    "from": 24,
    "label": "calls",
    "to": 141
  }, {
    "from": 44,
    "label": "calls",
    "to": 141
  }, {
    "from": 48,
    "label": "calls",
    "to": 141
  }, {
    "from": 58,
    "label": "calls",
    "to": 141
  }, {
    "from": 72,
    "label": "calls",
    "to": 141
  }, {
    "from": 82,
    "label": "calls",
    "to": 141
  }, {
    "from": 104,
    "label": "calls",
    "to": 141
  }, {
    "from": 36,
    "label": "calls",
    "to": 24
  }, {
    "from": 48,
    "label": "calls",
    "to": 7
  }, {
    "from": 48,
    "label": "calls",
    "to": 7
  }, {
    "from": 77,
    "label": "calls",
    "to": 7
  }, {
    "from": 18,
    "label": "calls",
    "to": 145
  }, {
    "from": 20,
    "label": "calls",
    "to": 145
  }, {
    "from": 82,
    "label": "calls",
    "to": 149
  }, {
    "from": 122,
    "label": "calls",
    "to": 154
  }, {
    "from": 133,
    "label": "calls",
    "to": 138
  }, {
    "from": 68,
    "label": "calls",
    "to": 61
  }, {
    "from": 117,
    "label": "calls",
    "to": 140
  }, {
    "from": 133,
    "label": "calls",
    "to": 151
  }, {
    "from": 133,
    "label": "calls",
    "to": 151
  }, {
    "from": 104,
    "label": "calls",
    "to": 104
  }, {
    "from": 86,
    "label": "calls",
    "to": 104
  }, {
    "from": 133,
    "label": "calls",
    "to": 117
  }, {
    "from": 133,
    "label": "calls",
    "to": 117
  }, {
    "from": 1,
    "label": "contains",
    "to": 133
  }, {
    "from": 133,
    "label": "declares",
    "to": 7
  }, {
    "from": 133,
    "label": "declares",
    "to": 13
  }, {
    "from": 133,
    "label": "declares",
    "to": 18
  }, {
    "from": 133,
    "label": "declares",
    "to": 20
  }, {
    "from": 133,
    "label": "declares",
    "to": 22
  }, {
    "from": 133,
    "label": "declares",
    "to": 24
  }, {
    "from": 133,
    "label": "declares",
    "to": 36
  }, {
    "from": 133,
    "label": "declares",
    "to": 38
  }, {
    "from": 133,
    "label": "declares",
    "to": 40
  }, {
    "from": 133,
    "label": "declares",
    "to": 42
  }, {
    "from": 133,
    "label": "declares",
    "to": 44
  }, {
    "from": 133,
    "label": "declares",
    "to": 48
  }, {
    "from": 133,
    "label": "declares",
    "to": 54
  }, {
    "from": 133,
    "label": "declares",
    "to": 58
  }, {
    "from": 133,
    "label": "declares",
    "to": 61
  }, {
    "from": 133,
    "label": "declares",
    "to": 68
  }, {
    "from": 133,
    "label": "declares",
    "to": 70
  }, {
    "from": 133,
    "label": "declares",
    "to": 72
  }, {
    "from": 133,
    "label": "declares",
    "to": 77
  }, {
    "from": 133,
    "label": "declares",
    "to": 82
  }, {
    "from": 133,
    "label": "declares",
    "to": 86
  }, {
    "from": 133,
    "label": "declares",
    "to": 104
  }, {
    "from": 133,
    "label": "declares",
    "to": 106
  }, {
    "from": 133,
    "label": "declares",
    "to": 112
  }, {
    "from": 133,
    "label": "declares",
    "to": 117
  }, {
    "from": 133,
    "label": "declares",
    "to": 122
  }, {
    "from": 133,
    "label": "declares",
    "to": 124
  }, {
    "from": 133,
    "label": "declares",
    "to": 126
  }, {
    "from": 133,
    "label": "declares",
    "to": 128
  }, {
    "from": 133,
    "label": "declares",
    "to": 129
  }, {
    "from": 133,
    "label": "declares",
    "to": 130
  }, {
    "from": 133,
    "label": "declares",
    "to": 131
  }, {
    "from": 133,
    "label": "declares",
    "to": 132
  }, {
    "from": 134,
    "label": "calls",
    "to": 7
  }, {
    "from": 135,
    "label": "calls",
    "to": 38
  }, {
    "from": 1,
    "label": "declares",
    "to": 136
  }, {
    "from": 1,
    "label": "declares",
    "to": 139
  }, {
    "from": 1,
    "label": "declares",
    "to": 142
  }, {
    "from": 1,
    "label": "declares",
    "to": 146
  }, {
    "from": 156,
    "label": "requires",
    "to": 1
  }, {
    "from": 156,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 157
  }, {
    "from": 1,
    "label": "contains",
    "to": 158
  }, {
    "from": 157,
    "label": "initializes",
    "to": 159
  }, {
    "from": 159,
    "label": "assigns",
    "to": 160
  }, {
    "from": 157,
    "label": "initializes",
    "to": 161
  }, {
    "from": 161,
    "label": "assigns",
    "to": 162
  }, {
    "from": 157,
    "label": "initializes",
    "to": 163
  }, {
    "from": 163,
    "label": "assigns",
    "to": 164
  }, {
    "from": 158,
    "label": "initializes",
    "to": 156
  }, {
    "from": 158,
    "label": "initializes",
    "to": 156
  }, {
    "from": 156,
    "label": "requires",
    "to": 1
  }, {
    "from": 156,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "list",
    "type": "module"
  }, {
    "id": 2,
    "text": "function _G.bind (f, ...)\r\n  local fix = {...}\r\n  return function (...)\r\n           return f (unpack (list.concat (fix, {...})))\r\n         end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local function makeOptions (t)\r\n  t = list.concat (t or {},\r\n                   {Option {{\"version\", \"V\"},\r\n                            \"output version information and exit\"},\r\n                    Option {{\"help\", \"h\"},\r\n                            \"display this help and exit\"}}\r\n               )\r\n  local name = {}\r\n  for v in list.elems (t) do\r\n    for j, s in pairs (v.name) do\r\n      if name[s] then\r\n        warn (\"duplicate option '%s'\", s)\r\n      end\r\n      name[s] = v\r\n    end\r\n  end\r\n  t.name = name\r\n  return t\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function usageInfo (header, optDesc, pageWidth)\r\n  pageWidth = pageWidth or 78\r\n  -- Format the usage info for a single option\r\n  -- @param opt the Option table\r\n  -- @return options\r\n  -- @return description\r\n  local function fmtOpt (opt)\r\n    local function fmtName (o)\r\n      return \"-\" .. o\r\n    end\r\n    local function fmtArg ()\r\n      if opt.type == nil then\r\n        return \"\"\r\n      elseif opt.type == \"Req\" then\r\n        return \"=\" .. opt.var\r\n      else\r\n        return \"[=\" .. opt.var .. \"]\"\r\n      end\r\n    end\r\n    local textName = list.reverse (list.map (fmtName, opt.name))\r\n    textName[#textName] = textName[#textName] .. fmtArg ()\r\n    return {table.concat ({table.concat (textName, \", \")}, \", \"),\r\n      opt.desc}\r\n  end\r\n  local function sameLen (xs)\r\n    local n = math.max (unpack (list.map (string.len, xs)))\r\n    for i, v in pairs (xs) do\r\n      xs[i] = string.sub (v .. string.rep (\" \", n), 1, n)\r\n    end\r\n    return xs, n\r\n  end\r\n  local function paste (x, y)\r\n    return \"  \" .. x .. \"  \" .. y\r\n  end\r\n  local function wrapper (w, i)\r\n    return function (s)\r\n             return string.wrap (s, w, i, 0)\r\n           end\r\n  end\r\n  local optText = \"\"\r\n  if #optDesc > 0 then\r\n    local cols = list.transpose (list.map (fmtOpt, optDesc))\r\n    local width\r\n    cols[1], width = sameLen (cols[1])\r\n    cols[2] = list.map (wrapper (pageWidth, width + 4), cols[2])\r\n    optText = \"\\n\\n\" ..\r\n      table.concat (list.mapWith (paste,\r\n                                  list.transpose ({sameLen (cols[1]),\r\n                                                    cols[2]})),\r\n                    \"\\n\")\r\n  end\r\n  return header .. optText\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "local function fmtOpt (opt)\r\n    local function fmtName (o)\r\n      return \"-\" .. o\r\n    end\r\n    local function fmtArg ()\r\n      if opt.type == nil then\r\n        return \"\"\r\n      elseif opt.type == \"Req\" then\r\n        return \"=\" .. opt.var\r\n      else\r\n        return \"[=\" .. opt.var .. \"]\"\r\n      end\r\n    end\r\n    local textName = list.reverse (list.map (fmtName, opt.name))\r\n    textName[#textName] = textName[#textName] .. fmtArg ()\r\n    return {table.concat ({table.concat (textName, \", \")}, \", \"),\r\n      opt.desc}\r\n  end",
    "type": "function"
  }, {
    "id": 6,
    "text": "local function sameLen (xs)\r\n    local n = math.max (unpack (list.map (string.len, xs)))\r\n    for i, v in pairs (xs) do\r\n      xs[i] = string.sub (v .. string.rep (\" \", n), 1, n)\r\n    end\r\n    return xs, n\r\n  end",
    "type": "function"
  }, {
    "id": 7,
    "text": "function elems (l)\r\n  local n = 0\r\n  return function (l)\r\n           n = n + 1\r\n           if n <= #l then\r\n             return l[n]\r\n           end\r\n         end,\r\n  l, true\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "local n = 0",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 10,
    "text": "n = n + 1",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "if n <= #l then\r\n             return l[n]\r\n           end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function relems (l)\r\n  local n = #l + 1\r\n  return function (l)\r\n           n = n - 1\r\n           if n > 0 then\r\n             return l[n]\r\n           end\r\n         end,\r\n  l, true\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "local n = #l + 1",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "n = n - 1",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "if n > 0 then\r\n             return l[n]\r\n           end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function map (f, l)\r\n  return _G.map (f, elems, l)\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function mapWith (f, l)\r\n  return _G.map (compose (f, unpack), elems, l)\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function filter (p, l)\r\n  return _G.filter (p, elems, l)\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function slice (l, from, to)\r\n  local m = {}\r\n  local len = #l\r\n  from = from or 1\r\n  to = to or len\r\n  if from < 0 then\r\n    from = from + len + 1\r\n  end\r\n  if to < 0 then\r\n    to = to + len + 1\r\n  end\r\n  for i = from, to do\r\n    table.insert (m, l[i])\r\n  end\r\n  return m\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "local m = {}",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "local len = #l",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "from = from or 1",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "to = to or len",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "if from < 0 then\r\n    from = from + len + 1\r\n  end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "from = from + len + 1",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "if to < 0 then\r\n    to = to + len + 1\r\n  end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "to = to + len + 1",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "for i = from, to do\r\n    table.insert (m, l[i])\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 34,
    "text": "table.insert (m, l[i])",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function tail (l)\r\n  return slice (l, 2)\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function foldl (f, e, l)\r\n  return _G.fold (f, e, elems, l)\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function foldr (f, e, l)\r\n  return _G.fold (function (x, y) return f (y, x) end,\r\n                  e, relems, l)\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function cons (l, x)\r\n  return {x, unpack (l)}\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function append (l, x)\r\n  local r = {unpack (l)}\r\n  table.insert (r, x)\r\n  return r\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "local r = {unpack (l)}",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "table.insert (r, x)",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function concat (...)\r\n  local r = {}\r\n  for l in elems ({...}) do\r\n    for v in elems (l) do\r\n      table.insert (r, v)\r\n    end\r\n  end\r\n  return r\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "local r = {}",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "for l in elems ({...}) do\r\n    for v in elems (l) do\r\n      table.insert (r, v)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 51,
    "text": "for v in elems (l) do\r\n      table.insert (r, v)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 52,
    "text": "table.insert (r, v)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "function rep (l, n)\r\n  local r = {}\r\n  for i = 1, n do\r\n    r = list.concat (r, l)\r\n  end\r\n  return r\r\nend",
    "type": "function"
  }, {
    "id": 55,
    "text": "for i = 1, n do\r\n    r = list.concat (r, l)\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 56,
    "text": "r = list.concat (r, l)",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function reverse (l)\r\n  local m = {}\r\n  for i = #l, 1, -1 do\r\n    table.insert (m, l[i])\r\n  end\r\n  return m\r\nend",
    "type": "function"
  }, {
    "id": 59,
    "text": "for i = #l, 1, -1 do\r\n    table.insert (m, l[i])\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function transpose (ls)\r\n  local ms, len = {}, #ls\r\n  for i = 1, math.max (unpack (map (function (l) return #l end, ls))) do\r\n    ms[i] = {}\r\n    for j = 1, len do\r\n      ms[i][j] = ls[j][i]\r\n    end\r\n  end\r\n  return ms\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "local ms, len = {}, #ls",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "for i = 1, math.max (unpack (map (function (l) return #l end, ls))) do\r\n    ms[i] = {}\r\n    for j = 1, len do\r\n      ms[i][j] = ls[j][i]\r\n    end\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 64,
    "text": "ms[i] = {}",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "for j = 1, len do\r\n      ms[i][j] = ls[j][i]\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 66,
    "text": "ms[i][j] = ls[j][i]",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "function zipWith (f, ls)\r\n  return mapWith (f, transpose (ls))\r\nend",
    "type": "function"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function project (f, l)\r\n  return map (function (t) return t[f] end, l)\r\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "function enpair (t)\r\n  local ls = {}\r\n  for i, v in pairs (t) do\r\n    table.insert (ls, {i, v})\r\n  end\r\n  return ls\r\nend",
    "type": "function"
  }, {
    "id": 73,
    "text": "local ls = {}",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "for i, v in pairs (t) do\r\n    table.insert (ls, {i, v})\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 75,
    "text": "table.insert (ls, {i, v})",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "function depair (ls)\r\n  local t = {}\r\n  for v in elems (ls) do\r\n    t[v[1]] = v[2]\r\n  end\r\n  return t\r\nend",
    "type": "function"
  }, {
    "id": 78,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "for v in elems (ls) do\r\n    t[v[1]] = v[2]\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 80,
    "text": "t[v[1]] = v[2]",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "function flatten (l)\r\n  local m = {}\r\n  for v in ileaves (l) do\r\n    table.insert (m, v)\r\n  end\r\n  return m\r\nend",
    "type": "function"
  }, {
    "id": 83,
    "text": "for v in ileaves (l) do\r\n    table.insert (m, v)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 84,
    "text": "table.insert (m, v)",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "function shape (s, l)\r\n  l = flatten (l)\r\n  -- Check the shape and calculate the size of the zero, if any\r\n  local size = 1\r\n  local zero\r\n  for i, v in ipairs (s) do\r\n    if v == 0 then\r\n      if zero then -- bad shape: two zeros\r\n        return nil\r\n      else\r\n        zero = i\r\n      end\r\n    else\r\n      size = size * v\r\n    end\r\n  end\r\n  if zero then\r\n    s[zero] = math.ceil (#l / size)\r\n  end\r\n  local function fill (i, d)\r\n    if d > #s then\r\n      return l[i], i + 1\r\n    else\r\n      local t = {}\r\n      for j = 1, s[d] do\r\n        local e\r\n        e, i = fill (i, d + 1)\r\n        table.insert (t, e)\r\n      end\r\n      return t, i\r\n    end\r\n  end\r\n  return (fill (1, 1))\r\nend",
    "type": "function"
  }, {
    "id": 87,
    "text": "l = flatten (l)",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "local size = 1",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "local zero",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "for i, v in ipairs (s) do\r\n    if v == 0 then\r\n      if zero then -- bad shape: two zeros\r\n        return nil\r\n      else\r\n        zero = i\r\n      end\r\n    else\r\n      size = size * v\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 91,
    "text": "if v == 0 then\r\n      if zero then -- bad shape: two zeros\r\n        return nil\r\n      else\r\n        zero = i\r\n      end\r\n    else\r\n      size = size * v\r\n    end",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "if zero then -- bad shape: two zeros\r\n        return nil\r\n      else\r\n        zero = i\r\n      end",
    "type": "statement:if"
  }, {
    "id": 93,
    "text": "zero = i",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "size = size * v",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "if zero then\r\n    s[zero] = math.ceil (#l / size)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 96,
    "text": "s[zero] = math.ceil (#l / size)",
    "type": "statement:assign"
  }, {
    "id": 97,
    "text": "local function fill (i, d)\r\n    if d > #s then\r\n      return l[i], i + 1\r\n    else\r\n      local t = {}\r\n      for j = 1, s[d] do\r\n        local e\r\n        e, i = fill (i, d + 1)\r\n        table.insert (t, e)\r\n      end\r\n      return t, i\r\n    end\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 98,
    "text": "if d > #s then\r\n      return l[i], i + 1\r\n    else\r\n      local t = {}\r\n      for j = 1, s[d] do\r\n        local e\r\n        e, i = fill (i, d + 1)\r\n        table.insert (t, e)\r\n      end\r\n      return t, i\r\n    end",
    "type": "statement:if"
  }, {
    "id": 99,
    "text": "for j = 1, s[d] do\r\n        local e\r\n        e, i = fill (i, d + 1)\r\n        table.insert (t, e)\r\n      end",
    "type": "statement:numericfor"
  }, {
    "id": 100,
    "text": "local e",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "e, i = fill (i, d + 1)",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "table.insert (t, e)",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 104,
    "text": "local function fill (i, d)\r\n    if d > #s then\r\n      return l[i], i + 1\r\n    else\r\n      local t = {}\r\n      for j = 1, s[d] do\r\n        local e\r\n        e, i = fill (i, d + 1)\r\n        table.insert (t, e)\r\n      end\r\n      return t, i\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 105,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 106,
    "text": "function indexKey (f, l)\r\n  local m = {}\r\n  for i, v in ipairs (l) do\r\n    local k = v[f]\r\n    if k then\r\n      m[k] = i\r\n    end\r\n  end\r\n  return m\r\nend",
    "type": "function"
  }, {
    "id": 107,
    "text": "for i, v in ipairs (l) do\r\n    local k = v[f]\r\n    if k then\r\n      m[k] = i\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 108,
    "text": "local k = v[f]",
    "type": "statement:localassign"
  }, {
    "id": 109,
    "text": "if k then\r\n      m[k] = i\r\n    end",
    "type": "statement:if"
  }, {
    "id": 110,
    "text": "m[k] = i",
    "type": "statement:assign"
  }, {
    "id": 111,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 112,
    "text": "function indexValue (f, l)\r\n  local m = {}\r\n  for i, v in ipairs (l) do\r\n    local k = v[f]\r\n    if k then\r\n      m[k] = v\r\n    end\r\n  end\r\n  return m\r\nend",
    "type": "function"
  }, {
    "id": 113,
    "text": "for i, v in ipairs (l) do\r\n    local k = v[f]\r\n    if k then\r\n      m[k] = v\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 114,
    "text": "if k then\r\n      m[k] = v\r\n    end",
    "type": "statement:if"
  }, {
    "id": 115,
    "text": "m[k] = v",
    "type": "statement:assign"
  }, {
    "id": 116,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 117,
    "text": "function compare (l, m)\r\n  for i = 1, math.min (#l, #m) do\r\n    if l[i] < m[i] then\r\n      return -1\r\n    elseif l[i] > m[i] then\r\n      return 1\r\n    end\r\n  end\r\n  if #l < #m then\r\n    return -1\r\n  elseif #l > #m then\r\n    return 1\r\n  end\r\n  return 0\r\nend",
    "type": "function"
  }, {
    "id": 118,
    "text": "for i = 1, math.min (#l, #m) do\r\n    if l[i] < m[i] then\r\n      return -1\r\n    elseif l[i] > m[i] then\r\n      return 1\r\n    end\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 119,
    "text": "if l[i] < m[i] then\r\n      return -1\r\n    elseif l[i] > m[i] then\r\n      return 1\r\n    end",
    "type": "statement:if"
  }, {
    "id": 120,
    "text": "if #l < #m then\r\n    return -1\r\n  elseif #l > #m then\r\n    return 1\r\n  end",
    "type": "statement:if"
  }, {
    "id": 121,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 122,
    "text": "function new (l)\r\n  return setmetatable (l, metatable)\r\nend",
    "type": "function"
  }, {
    "id": 123,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 124,
    "text": "function (l)\r\n           n = n + 1\r\n           if n <= #l then\r\n             return l[n]\r\n           end\r\n         end",
    "type": "function"
  }, {
    "id": 125,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 126,
    "text": "function (l)\r\n           n = n - 1\r\n           if n > 0 then\r\n             return l[n]\r\n           end\r\n         end",
    "type": "function"
  }, {
    "id": 127,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 128,
    "text": "function (x, y) return f (y, x) end",
    "type": "function"
  }, {
    "id": 129,
    "text": "function (l) return #l end",
    "type": "function"
  }, {
    "id": 130,
    "text": "function (t) return t[f] end",
    "type": "function"
  }, {
    "id": 131,
    "text": "function (l, m) return compare (l, m) < 0 end",
    "type": "function"
  }, {
    "id": 132,
    "text": "function (l, m) return compare (l, m) <= 0 end",
    "type": "function"
  }, {
    "id": 133,
    "text": "",
    "type": "function container"
  }, {
    "id": 134,
    "text": "function new (l)\r\n  local s = setmetatable ({contents={}}, metatable)\r\n  for e in list.elems (l) do\r\n    insert (s, e)\r\n  end\r\n  return s\r\nend",
    "type": "function"
  }, {
    "id": 135,
    "text": "function metatable.__index (tr, i)\r\n  -- FIXME: the following doesn't treat list keys correctly\r\n  --        e.g. tr[{{1, 2}, {3, 4}}], maybe flatten first?\r\n  if type (i) == \"table\" and #i > 0 then\r\n    return list.foldl (op[\"[]\"], tr, i)\r\n  else\r\n    return rawget (tr, i)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 136,
    "text": "map",
    "type": "global function"
  }, {
    "id": 137,
    "text": "ceil",
    "type": "global function"
  }, {
    "id": 138,
    "text": "module",
    "type": "global function"
  }, {
    "id": 139,
    "text": "elems",
    "type": "global function"
  }, {
    "id": 140,
    "text": "min",
    "type": "global function"
  }, {
    "id": 141,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 142,
    "text": "flatten",
    "type": "global function"
  }, {
    "id": 143,
    "text": "filter",
    "type": "global function"
  }, {
    "id": 144,
    "text": "compose",
    "type": "global function"
  }, {
    "id": 145,
    "text": "map",
    "type": "global function"
  }, {
    "id": 146,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 147,
    "text": "fold",
    "type": "global function"
  }, {
    "id": 148,
    "text": "f",
    "type": "global function"
  }, {
    "id": 149,
    "text": "ileaves",
    "type": "global function"
  }, {
    "id": 150,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 151,
    "text": "require",
    "type": "global function"
  }, {
    "id": 152,
    "text": "max",
    "type": "global function"
  }, {
    "id": 153,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 154,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 155,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 156,
    "text": "",
    "type": "global variable"
  }, {
    "id": 157,
    "text": "",
    "type": "variable container"
  }, {
    "id": 158,
    "text": "",
    "type": "require container"
  }, {
    "id": 159,
    "text": "",
    "type": "global variable"
  }, {
    "id": 160,
    "text": "",
    "type": "n/a"
  }, {
    "id": 161,
    "text": "",
    "type": "global variable"
  }, {
    "id": 162,
    "text": "",
    "type": "n/a"
  }, {
    "id": 163,
    "text": "",
    "type": "global variable"
  }, {
    "id": 164,
    "text": "",
    "type": "n/a"
  } ]
}