{
  "_filename": "xml.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-stdlib/src/xml.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 7,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 7,
    "label": "has",
    "to": 15
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 16
  }, {
    "from": 2,
    "label": "has",
    "to": 17
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 18
  }, {
    "from": 2,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 5
  }, {
    "from": 19,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 21
  }, {
    "from": 2,
    "label": "has",
    "to": 22
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 23
  }, {
    "from": 2,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 26
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 6
  }, {
    "from": 28,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 7,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 7,
    "label": "has",
    "to": 15
  }, {
    "from": 28,
    "label": "has",
    "to": 5
  }, {
    "from": 28,
    "label": "has",
    "to": 5
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 16
  }, {
    "from": 30,
    "label": "has",
    "to": 17
  }, {
    "from": 30,
    "label": "has",
    "to": 5
  }, {
    "from": 30,
    "label": "has",
    "to": 5
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 20
  }, {
    "from": 32,
    "label": "has",
    "to": 5
  }, {
    "from": 32,
    "label": "has",
    "to": 5
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 18
  }, {
    "from": 34,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 5
  }, {
    "from": 19,
    "label": "has",
    "to": 5
  }, {
    "from": 34,
    "label": "has",
    "to": 21
  }, {
    "from": 34,
    "label": "has",
    "to": 22
  }, {
    "from": 34,
    "label": "has",
    "to": 5
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 23
  }, {
    "from": 36,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 36,
    "label": "has",
    "to": 5
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 26
  }, {
    "from": 38,
    "label": "has",
    "to": 5
  }, {
    "from": 38,
    "label": "has",
    "to": 5
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 2,
    "label": "calls",
    "to": 45
  }, {
    "from": 2,
    "label": "calls",
    "to": 45
  }, {
    "from": 2,
    "label": "calls",
    "to": 45
  }, {
    "from": 2,
    "label": "calls",
    "to": 45
  }, {
    "from": 2,
    "label": "calls",
    "to": 43
  }, {
    "from": 2,
    "label": "calls",
    "to": 44
  }, {
    "from": 2,
    "label": "calls",
    "to": 42
  }, {
    "from": 2,
    "label": "calls",
    "to": 48
  }, {
    "from": 40,
    "label": "calls",
    "to": 46
  }, {
    "from": 40,
    "label": "calls",
    "to": 46
  }, {
    "from": 2,
    "label": "calls",
    "to": 41
  }, {
    "from": 2,
    "label": "calls",
    "to": 41
  }, {
    "from": 2,
    "label": "calls",
    "to": 41
  }, {
    "from": 2,
    "label": "calls",
    "to": 47
  }, {
    "from": 2,
    "label": "calls",
    "to": 47
  }, {
    "from": 2,
    "label": "calls",
    "to": 47
  }, {
    "from": 2,
    "label": "calls",
    "to": 47
  }, {
    "from": 2,
    "label": "calls",
    "to": 47
  }, {
    "from": 1,
    "label": "contains",
    "to": 40
  }, {
    "from": 40,
    "label": "declares",
    "to": 2
  }, {
    "from": 40,
    "label": "declares",
    "to": 28
  }, {
    "from": 40,
    "label": "declares",
    "to": 30
  }, {
    "from": 40,
    "label": "declares",
    "to": 32
  }, {
    "from": 40,
    "label": "declares",
    "to": 34
  }, {
    "from": 40,
    "label": "declares",
    "to": 36
  }, {
    "from": 40,
    "label": "declares",
    "to": 38
  }, {
    "from": 1,
    "label": "contains",
    "to": 50
  }, {
    "from": 1,
    "label": "contains",
    "to": 51
  }, {
    "from": 51,
    "label": "initializes",
    "to": 49
  }, {
    "from": 51,
    "label": "initializes",
    "to": 49
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "xml",
    "type": "module"
  }, {
    "id": 2,
    "text": "function string.writeXML (t, indent, spacing)\r\n  indent = indent or \"\\t\"\r\n  spacing = spacing or \"\"\r\n  return render (t,\r\n                 function (x)\r\n                   spacing = spacing .. indent\r\n                   if x.tag then\r\n                     local s = \"<\" .. x.tag\r\n                     if type (x.attr) == \"table\" then\r\n                       for i, v in pairs (x.attr) do\r\n                         if type (i) ~= \"number\" then\r\n                           -- luaexpat gives names of attributes in list elements\r\n                           s = s .. \" \" .. tostring (i) .. \"=\" .. string.format (\"%q\", tostring (v))\r\n                         end\r\n                       end\r\n                     end\r\n                     if #x == 0 then\r\n                       s = s .. \" /\"\r\n                     end\r\n                     s = s .. \">\"\r\n                     return s\r\n                   end\r\n                   return \"\"\r\n                 end,\r\n                 function (x)\r\n                   spacing = string.gsub (spacing, indent .. \"$\", \"\")\r\n                   if x.tag and #x > 0 then\r\n                     return spacing .. \"</\" .. x.tag .. \">\"\r\n                   end\r\n                   return \"\"\r\n                 end,\r\n                 function (s)\r\n                   s = tostring (s)\r\n                   s = string.gsub (s, \"&([%S]+)\",\r\n                                    function (s)\r\n                                      if not string.match (s, \"^#?%w+;\") then\r\n                                        return \"&amp;\" .. s\r\n                                      else\r\n                                        return \"&\" .. s\r\n                                      end\r\n                                    end)\r\n                   s = string.gsub (s, \"<\", \"&lt;\")\r\n                   s = string.gsub (s, \">\", \"&gt;\")\r\n                   return s\r\n                 end,\r\n                 function (x, i, v, is, vs)\r\n                   local s = \"\"\r\n                   if type (i) == \"number\" then\r\n                     s = spacing .. vs\r\n                   end\r\n                   return s\r\n                 end,\r\n                 function (_, i, _, j)\r\n                   if type (i) == \"number\" or type (j) == \"number\" then\r\n                     return \"\\n\"\r\n                   end\r\n                   return \"\"\r\n                 end)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "indent = indent or \"\\t\"",
    "type": "statement:assign"
  }, {
    "id": 4,
    "text": "spacing = spacing or \"\"",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "spacing = spacing .. indent",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "if x.tag then\r\n                     local s = \"<\" .. x.tag\r\n                     if type (x.attr) == \"table\" then\r\n                       for i, v in pairs (x.attr) do\r\n                         if type (i) ~= \"number\" then\r\n                           -- luaexpat gives names of attributes in list elements\r\n                           s = s .. \" \" .. tostring (i) .. \"=\" .. string.format (\"%q\", tostring (v))\r\n                         end\r\n                       end\r\n                     end\r\n                     if #x == 0 then\r\n                       s = s .. \" /\"\r\n                     end\r\n                     s = s .. \">\"\r\n                     return s\r\n                   end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "local s = \"<\" .. x.tag",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "if type (x.attr) == \"table\" then\r\n                       for i, v in pairs (x.attr) do\r\n                         if type (i) ~= \"number\" then\r\n                           -- luaexpat gives names of attributes in list elements\r\n                           s = s .. \" \" .. tostring (i) .. \"=\" .. string.format (\"%q\", tostring (v))\r\n                         end\r\n                       end\r\n                     end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "for i, v in pairs (x.attr) do\r\n                         if type (i) ~= \"number\" then\r\n                           -- luaexpat gives names of attributes in list elements\r\n                           s = s .. \" \" .. tostring (i) .. \"=\" .. string.format (\"%q\", tostring (v))\r\n                         end\r\n                       end",
    "type": "statement:genericfor"
  }, {
    "id": 11,
    "text": "if type (i) ~= \"number\" then\r\n                           -- luaexpat gives names of attributes in list elements\r\n                           s = s .. \" \" .. tostring (i) .. \"=\" .. string.format (\"%q\", tostring (v))\r\n                         end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "s = s .. \" \" .. tostring (i) .. \"=\" .. string.format (\"%q\", tostring (v))",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "if #x == 0 then\r\n                       s = s .. \" /\"\r\n                     end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "s = s .. \" /\"",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "s = s .. \">\"",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "spacing = string.gsub (spacing, indent .. \"$\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "if x.tag and #x > 0 then\r\n                     return spacing .. \"</\" .. x.tag .. \">\"\r\n                   end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "s = tostring (s)",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "s = string.gsub (s, \"&([%S]+)\",\r\n                                    function (s)\r\n                                      if not string.match (s, \"^#?%w+;\") then\r\n                                        return \"&amp;\" .. s\r\n                                      else\r\n                                        return \"&\" .. s\r\n                                      end\r\n                                    end)",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "if not string.match (s, \"^#?%w+;\") then\r\n                                        return \"&amp;\" .. s\r\n                                      else\r\n                                        return \"&\" .. s\r\n                                      end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "s = string.gsub (s, \"<\", \"&lt;\")",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "s = string.gsub (s, \">\", \"&gt;\")",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "local s = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "if type (i) == \"number\" then\r\n                     s = spacing .. vs\r\n                   end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "s = spacing .. vs",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "if type (i) == \"number\" or type (j) == \"number\" then\r\n                     return \"\\n\"\r\n                   end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function (x)\r\n                   spacing = spacing .. indent\r\n                   if x.tag then\r\n                     local s = \"<\" .. x.tag\r\n                     if type (x.attr) == \"table\" then\r\n                       for i, v in pairs (x.attr) do\r\n                         if type (i) ~= \"number\" then\r\n                           -- luaexpat gives names of attributes in list elements\r\n                           s = s .. \" \" .. tostring (i) .. \"=\" .. string.format (\"%q\", tostring (v))\r\n                         end\r\n                       end\r\n                     end\r\n                     if #x == 0 then\r\n                       s = s .. \" /\"\r\n                     end\r\n                     s = s .. \">\"\r\n                     return s\r\n                   end\r\n                   return \"\"\r\n                 end",
    "type": "function"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function (x)\r\n                   spacing = string.gsub (spacing, indent .. \"$\", \"\")\r\n                   if x.tag and #x > 0 then\r\n                     return spacing .. \"</\" .. x.tag .. \">\"\r\n                   end\r\n                   return \"\"\r\n                 end",
    "type": "function"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function (s)\r\n                                      if not string.match (s, \"^#?%w+;\") then\r\n                                        return \"&amp;\" .. s\r\n                                      else\r\n                                        return \"&\" .. s\r\n                                      end\r\n                                    end",
    "type": "function"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function (s)\r\n                   s = tostring (s)\r\n                   s = string.gsub (s, \"&([%S]+)\",\r\n                                    function (s)\r\n                                      if not string.match (s, \"^#?%w+;\") then\r\n                                        return \"&amp;\" .. s\r\n                                      else\r\n                                        return \"&\" .. s\r\n                                      end\r\n                                    end)\r\n                   s = string.gsub (s, \"<\", \"&lt;\")\r\n                   s = string.gsub (s, \">\", \"&gt;\")\r\n                   return s\r\n                 end",
    "type": "function"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function (x, i, v, is, vs)\r\n                   local s = \"\"\r\n                   if type (i) == \"number\" then\r\n                     s = spacing .. vs\r\n                   end\r\n                   return s\r\n                 end",
    "type": "function"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function (_, i, _, j)\r\n                   if type (i) == \"number\" or type (j) == \"number\" then\r\n                     return \"\\n\"\r\n                   end\r\n                   return \"\"\r\n                 end",
    "type": "function"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "",
    "type": "function container"
  }, {
    "id": 41,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 42,
    "text": "match",
    "type": "global function"
  }, {
    "id": 43,
    "text": "format",
    "type": "global function"
  }, {
    "id": 44,
    "text": "render",
    "type": "global function"
  }, {
    "id": 45,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 46,
    "text": "require",
    "type": "global function"
  }, {
    "id": 47,
    "text": "type",
    "type": "global function"
  }, {
    "id": 48,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 49,
    "text": "",
    "type": "global variable"
  }, {
    "id": 50,
    "text": "",
    "type": "variable container"
  }, {
    "id": 51,
    "text": "",
    "type": "require container"
  } ]
}