{
  "_filename": "debug_ext.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-stdlib/src/debug_ext.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 14,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 14,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 23,
    "label": "has",
    "to": 27
  }, {
    "from": 23,
    "label": "has",
    "to": 28
  }, {
    "from": 14,
    "label": "has",
    "to": 29
  }, {
    "from": 14,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "calls",
    "to": 2
  }, {
    "from": 2,
    "label": "calls",
    "to": 42
  }, {
    "from": 31,
    "label": "calls",
    "to": 37
  }, {
    "from": 14,
    "label": "calls",
    "to": 41
  }, {
    "from": 14,
    "label": "calls",
    "to": 40
  }, {
    "from": 2,
    "label": "calls",
    "to": 34
  }, {
    "from": 2,
    "label": "calls",
    "to": 32
  }, {
    "from": 31,
    "label": "calls",
    "to": 33
  }, {
    "from": 2,
    "label": "calls",
    "to": 39
  }, {
    "from": 2,
    "label": "calls",
    "to": 39
  }, {
    "from": 2,
    "label": "calls",
    "to": 39
  }, {
    "from": 31,
    "label": "calls",
    "to": 39
  }, {
    "from": 31,
    "label": "calls",
    "to": 38
  }, {
    "from": 31,
    "label": "calls",
    "to": 38
  }, {
    "from": 31,
    "label": "calls",
    "to": 38
  }, {
    "from": 14,
    "label": "calls",
    "to": 35
  }, {
    "from": 14,
    "label": "calls",
    "to": 35
  }, {
    "from": 2,
    "label": "calls",
    "to": 36
  }, {
    "from": 14,
    "label": "calls",
    "to": 36
  }, {
    "from": 1,
    "label": "contains",
    "to": 31
  }, {
    "from": 31,
    "label": "declares",
    "to": 2
  }, {
    "from": 31,
    "label": "declares",
    "to": 11
  }, {
    "from": 31,
    "label": "declares",
    "to": 14
  }, {
    "from": 1,
    "label": "contains",
    "to": 44
  }, {
    "from": 1,
    "label": "contains",
    "to": 45
  }, {
    "from": 44,
    "label": "initializes",
    "to": 46
  }, {
    "from": 46,
    "label": "assigns",
    "to": 47
  }, {
    "from": 44,
    "label": "initializes",
    "to": 48
  }, {
    "from": 48,
    "label": "assigns",
    "to": 49
  }, {
    "from": 45,
    "label": "initializes",
    "to": 43
  }, {
    "from": 45,
    "label": "initializes",
    "to": 43
  }, {
    "from": 45,
    "label": "initializes",
    "to": 43
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "debug_ext",
    "type": "module"
  }, {
    "id": 2,
    "text": "function say (n, ...)\r\n  local level = 1\r\n  local arg = {n, ...}\r\n  if type (arg[1]) == \"number\" then\r\n    level = arg[1]\r\n    table.remove (arg, 1)\r\n  end\r\n  if _DEBUG and\r\n    ((type (_DEBUG) == \"table\" and type (_DEBUG.level) == \"number\" and\r\n      _DEBUG.level >= level)\r\n       or level <= 1) then\r\n    io.writelines (io.stderr, table.concat (list.map (tostring, arg), \"\\t\"))\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local level = 1",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local arg = {n, ...}",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "if type (arg[1]) == \"number\" then\r\n    level = arg[1]\r\n    table.remove (arg, 1)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "level = arg[1]",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "table.remove (arg, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "if _DEBUG and\r\n    ((type (_DEBUG) == \"table\" and type (_DEBUG.level) == \"number\" and\r\n      _DEBUG.level >= level)\r\n       or level <= 1) then\r\n    io.writelines (io.stderr, table.concat (list.map (tostring, arg), \"\\t\"))\r\n  end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "io.writelines (io.stderr, table.concat (list.map (tostring, arg), \"\\t\"))",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function (self, ...)\r\n     say (1, ...)\r\n   end",
    "type": "function"
  }, {
    "id": 12,
    "text": "say (1, ...)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function trace (event)\r\n  local t = getinfo (3)\r\n  local s = \" >>> \" .. string.rep (\" \", level)\r\n  if t ~= nil and t.currentline >= 0 then\r\n    s = s .. t.short_src .. \":\" .. t.currentline .. \" \"\r\n  end\r\n  t = getinfo (2)\r\n  if event == \"call\" then\r\n    level = level + 1\r\n  else\r\n    level = math.max (level - 1, 0)\r\n  end\r\n  if t.what == \"main\" then\r\n    if event == \"call\" then\r\n      s = s .. \"begin \" .. t.short_src\r\n    else\r\n      s = s .. \"end \" .. t.short_src\r\n    end\r\n  elseif t.what == \"Lua\" then\r\n    s = s .. event .. \" \" .. (t.name or \"(Lua)\") .. \" <\" ..\r\n      t.linedefined .. \":\" .. t.short_src .. \">\"\r\n  else\r\n    s = s .. event .. \" \" .. (t.name or \"(C)\") .. \" [\" .. t.what .. \"]\"\r\n  end\r\n  io.writelines (io.stderr, s)\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "local t = getinfo (3)",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "local s = \" >>> \" .. string.rep (\" \", level)",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "if t ~= nil and t.currentline >= 0 then\r\n    s = s .. t.short_src .. \":\" .. t.currentline .. \" \"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "s = s .. t.short_src .. \":\" .. t.currentline .. \" \"",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "t = getinfo (2)",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "if event == \"call\" then\r\n    level = level + 1\r\n  else\r\n    level = math.max (level - 1, 0)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "level = level + 1",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "level = math.max (level - 1, 0)",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "if t.what == \"main\" then\r\n    if event == \"call\" then\r\n      s = s .. \"begin \" .. t.short_src\r\n    else\r\n      s = s .. \"end \" .. t.short_src\r\n    end\r\n  elseif t.what == \"Lua\" then\r\n    s = s .. event .. \" \" .. (t.name or \"(Lua)\") .. \" <\" ..\r\n      t.linedefined .. \":\" .. t.short_src .. \">\"\r\n  else\r\n    s = s .. event .. \" \" .. (t.name or \"(C)\") .. \" [\" .. t.what .. \"]\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "if event == \"call\" then\r\n      s = s .. \"begin \" .. t.short_src\r\n    else\r\n      s = s .. \"end \" .. t.short_src\r\n    end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "s = s .. \"begin \" .. t.short_src",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "s = s .. \"end \" .. t.short_src",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "s = s .. event .. \" \" .. (t.name or \"(Lua)\") .. \" <\" ..\r\n      t.linedefined .. \":\" .. t.short_src .. \">\"",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "s = s .. event .. \" \" .. (t.name or \"(C)\") .. \" [\" .. t.what .. \"]\"",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "io.writelines (io.stderr, s)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "",
    "type": "function container"
  }, {
    "id": 32,
    "text": "map",
    "type": "global function"
  }, {
    "id": 33,
    "text": "module",
    "type": "global function"
  }, {
    "id": 34,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 35,
    "text": "getinfo",
    "type": "global function"
  }, {
    "id": 36,
    "text": "writelines",
    "type": "global function"
  }, {
    "id": 37,
    "text": "sethook",
    "type": "global function"
  }, {
    "id": 38,
    "text": "require",
    "type": "global function"
  }, {
    "id": 39,
    "text": "type",
    "type": "global function"
  }, {
    "id": 40,
    "text": "max",
    "type": "global function"
  }, {
    "id": 41,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 42,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 43,
    "text": "",
    "type": "global variable"
  }, {
    "id": 44,
    "text": "",
    "type": "variable container"
  }, {
    "id": 45,
    "text": "",
    "type": "require container"
  }, {
    "id": 46,
    "text": "",
    "type": "local variable"
  }, {
    "id": 47,
    "text": "",
    "type": "number"
  }, {
    "id": 48,
    "text": "",
    "type": "global variable"
  }, {
    "id": 49,
    "text": "",
    "type": "n/a"
  } ]
}