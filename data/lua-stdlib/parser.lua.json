{
  "_filename": "parser.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-stdlib/src/parser.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 10,
    "label": "has",
    "to": 15
  }, {
    "from": 10,
    "label": "has",
    "to": 16
  }, {
    "from": 6,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 2,
    "label": "has",
    "to": 19
  }, {
    "from": 2,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 19
  }, {
    "from": 24,
    "label": "has",
    "to": 19
  }, {
    "from": 21,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 27,
    "label": "has",
    "to": 31
  }, {
    "from": 27,
    "label": "has",
    "to": 19
  }, {
    "from": 27,
    "label": "has",
    "to": 32
  }, {
    "from": 27,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 29
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 32
  }, {
    "from": 27,
    "label": "has",
    "to": 19
  }, {
    "from": 21,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 19
  }, {
    "from": 39,
    "label": "has",
    "to": 19
  }, {
    "from": 39,
    "label": "has",
    "to": 19
  }, {
    "from": 39,
    "label": "has",
    "to": 19
  }, {
    "from": 39,
    "label": "has",
    "to": 19
  }, {
    "from": 21,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 42,
    "label": "has",
    "to": 19
  }, {
    "from": 42,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 42,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 52,
    "label": "has",
    "to": 57
  }, {
    "from": 42,
    "label": "has",
    "to": 19
  }, {
    "from": 21,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 28
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 58,
    "label": "has",
    "to": 19
  }, {
    "from": 58,
    "label": "has",
    "to": 19
  }, {
    "from": 21,
    "label": "has",
    "to": 19
  }, {
    "from": 21,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 25
  }, {
    "from": 64,
    "label": "has",
    "to": 26
  }, {
    "from": 64,
    "label": "has",
    "to": 19
  }, {
    "from": 64,
    "label": "has",
    "to": 19
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 28
  }, {
    "from": 66,
    "label": "has",
    "to": 29
  }, {
    "from": 66,
    "label": "has",
    "to": 30
  }, {
    "from": 66,
    "label": "has",
    "to": 31
  }, {
    "from": 66,
    "label": "has",
    "to": 19
  }, {
    "from": 66,
    "label": "has",
    "to": 32
  }, {
    "from": 66,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 29
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 32
  }, {
    "from": 66,
    "label": "has",
    "to": 19
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 68,
    "label": "has",
    "to": 19
  }, {
    "from": 68,
    "label": "has",
    "to": 19
  }, {
    "from": 68,
    "label": "has",
    "to": 19
  }, {
    "from": 68,
    "label": "has",
    "to": 19
  }, {
    "from": 68,
    "label": "has",
    "to": 19
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 43
  }, {
    "from": 70,
    "label": "has",
    "to": 44
  }, {
    "from": 70,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 70,
    "label": "has",
    "to": 19
  }, {
    "from": 70,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 70,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 52,
    "label": "has",
    "to": 57
  }, {
    "from": 70,
    "label": "has",
    "to": 19
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 59
  }, {
    "from": 72,
    "label": "has",
    "to": 28
  }, {
    "from": 72,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 72,
    "label": "has",
    "to": 19
  }, {
    "from": 72,
    "label": "has",
    "to": 19
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 21,
    "label": "calls",
    "to": 66
  }, {
    "from": 64,
    "label": "calls",
    "to": 68
  }, {
    "from": 66,
    "label": "calls",
    "to": 68
  }, {
    "from": 66,
    "label": "calls",
    "to": 68
  }, {
    "from": 66,
    "label": "calls",
    "to": 68
  }, {
    "from": 70,
    "label": "calls",
    "to": 68
  }, {
    "from": 2,
    "label": "calls",
    "to": 89
  }, {
    "from": 2,
    "label": "calls",
    "to": 89
  }, {
    "from": 2,
    "label": "calls",
    "to": 84
  }, {
    "from": 21,
    "label": "calls",
    "to": 70
  }, {
    "from": 21,
    "label": "calls",
    "to": 72
  }, {
    "from": 21,
    "label": "calls",
    "to": 72
  }, {
    "from": 70,
    "label": "calls",
    "to": 83
  }, {
    "from": 74,
    "label": "calls",
    "to": 80
  }, {
    "from": 21,
    "label": "calls",
    "to": 90
  }, {
    "from": 21,
    "label": "calls",
    "to": 90
  }, {
    "from": 2,
    "label": "calls",
    "to": 85
  }, {
    "from": 21,
    "label": "calls",
    "to": 64
  }, {
    "from": 66,
    "label": "calls",
    "to": 81
  }, {
    "from": 70,
    "label": "calls",
    "to": 81
  }, {
    "from": 2,
    "label": "calls",
    "to": 77
  }, {
    "from": 2,
    "label": "calls",
    "to": 75
  }, {
    "from": 2,
    "label": "calls",
    "to": 82
  }, {
    "from": 2,
    "label": "calls",
    "to": 82
  }, {
    "from": 74,
    "label": "calls",
    "to": 78
  }, {
    "from": 70,
    "label": "calls",
    "to": 79
  }, {
    "from": 21,
    "label": "calls",
    "to": 79
  }, {
    "from": 2,
    "label": "calls",
    "to": 88
  }, {
    "from": 2,
    "label": "calls",
    "to": 88
  }, {
    "from": 2,
    "label": "calls",
    "to": 88
  }, {
    "from": 74,
    "label": "calls",
    "to": 87
  }, {
    "from": 2,
    "label": "calls",
    "to": 86
  }, {
    "from": 21,
    "label": "calls",
    "to": 76
  }, {
    "from": 21,
    "label": "calls",
    "to": 76
  }, {
    "from": 1,
    "label": "contains",
    "to": 74
  }, {
    "from": 74,
    "label": "declares",
    "to": 2
  }, {
    "from": 74,
    "label": "declares",
    "to": 21
  }, {
    "from": 74,
    "label": "declares",
    "to": 64
  }, {
    "from": 74,
    "label": "declares",
    "to": 66
  }, {
    "from": 74,
    "label": "declares",
    "to": 68
  }, {
    "from": 74,
    "label": "declares",
    "to": 70
  }, {
    "from": 74,
    "label": "declares",
    "to": 72
  }, {
    "from": 1,
    "label": "contains",
    "to": 92
  }, {
    "from": 1,
    "label": "contains",
    "to": 93
  }, {
    "from": 92,
    "label": "initializes",
    "to": 94
  }, {
    "from": 94,
    "label": "assigns",
    "to": 95
  }, {
    "from": 93,
    "label": "initializes",
    "to": 91
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "parser",
    "type": "module"
  }, {
    "id": 2,
    "text": "function Parser:_init (grammar)\r\n  local init = table.clone_rename (self._init, grammar)\r\n  -- Reformat the abstract syntax rules\r\n  for rname, rule in pairs (init.grammar) do\r\n    if name ~= \"lexemes\" then\r\n      for pnum, prod in ipairs (rule) do\r\n        local abstract\r\n        for i, v in pairs (prod) do\r\n          if type (i) == \"string\" and i ~= \"action\" then\r\n            if abstract then\r\n              print (prod)\r\n              die (\"more than one abstract rule for \" .. rname .. \".\"\r\n                   .. tostring (pnum))\r\n            else\r\n              if type (v) ~= \"table\" then\r\n                die (\"bad abstract syntax rule of type \" .. type (v))\r\n              end\r\n              abstract = {ty = i, template = v}\r\n              prod[i] = nil\r\n            end\r\n          end\r\n        end\r\n        if abstract then\r\n          prod.abstract = abstract\r\n        end\r\n      end\r\n    end\r\n  end\r\n  return table.merge (self, init)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local init = table.clone_rename (self._init, grammar)",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "for rname, rule in pairs (init.grammar) do\r\n    if name ~= \"lexemes\" then\r\n      for pnum, prod in ipairs (rule) do\r\n        local abstract\r\n        for i, v in pairs (prod) do\r\n          if type (i) == \"string\" and i ~= \"action\" then\r\n            if abstract then\r\n              print (prod)\r\n              die (\"more than one abstract rule for \" .. rname .. \".\"\r\n                   .. tostring (pnum))\r\n            else\r\n              if type (v) ~= \"table\" then\r\n                die (\"bad abstract syntax rule of type \" .. type (v))\r\n              end\r\n              abstract = {ty = i, template = v}\r\n              prod[i] = nil\r\n            end\r\n          end\r\n        end\r\n        if abstract then\r\n          prod.abstract = abstract\r\n        end\r\n      end\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 5,
    "text": "if name ~= \"lexemes\" then\r\n      for pnum, prod in ipairs (rule) do\r\n        local abstract\r\n        for i, v in pairs (prod) do\r\n          if type (i) == \"string\" and i ~= \"action\" then\r\n            if abstract then\r\n              print (prod)\r\n              die (\"more than one abstract rule for \" .. rname .. \".\"\r\n                   .. tostring (pnum))\r\n            else\r\n              if type (v) ~= \"table\" then\r\n                die (\"bad abstract syntax rule of type \" .. type (v))\r\n              end\r\n              abstract = {ty = i, template = v}\r\n              prod[i] = nil\r\n            end\r\n          end\r\n        end\r\n        if abstract then\r\n          prod.abstract = abstract\r\n        end\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "for pnum, prod in ipairs (rule) do\r\n        local abstract\r\n        for i, v in pairs (prod) do\r\n          if type (i) == \"string\" and i ~= \"action\" then\r\n            if abstract then\r\n              print (prod)\r\n              die (\"more than one abstract rule for \" .. rname .. \".\"\r\n                   .. tostring (pnum))\r\n            else\r\n              if type (v) ~= \"table\" then\r\n                die (\"bad abstract syntax rule of type \" .. type (v))\r\n              end\r\n              abstract = {ty = i, template = v}\r\n              prod[i] = nil\r\n            end\r\n          end\r\n        end\r\n        if abstract then\r\n          prod.abstract = abstract\r\n        end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 7,
    "text": "local abstract",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "for i, v in pairs (prod) do\r\n          if type (i) == \"string\" and i ~= \"action\" then\r\n            if abstract then\r\n              print (prod)\r\n              die (\"more than one abstract rule for \" .. rname .. \".\"\r\n                   .. tostring (pnum))\r\n            else\r\n              if type (v) ~= \"table\" then\r\n                die (\"bad abstract syntax rule of type \" .. type (v))\r\n              end\r\n              abstract = {ty = i, template = v}\r\n              prod[i] = nil\r\n            end\r\n          end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 9,
    "text": "if type (i) == \"string\" and i ~= \"action\" then\r\n            if abstract then\r\n              print (prod)\r\n              die (\"more than one abstract rule for \" .. rname .. \".\"\r\n                   .. tostring (pnum))\r\n            else\r\n              if type (v) ~= \"table\" then\r\n                die (\"bad abstract syntax rule of type \" .. type (v))\r\n              end\r\n              abstract = {ty = i, template = v}\r\n              prod[i] = nil\r\n            end\r\n          end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "if abstract then\r\n              print (prod)\r\n              die (\"more than one abstract rule for \" .. rname .. \".\"\r\n                   .. tostring (pnum))\r\n            else\r\n              if type (v) ~= \"table\" then\r\n                die (\"bad abstract syntax rule of type \" .. type (v))\r\n              end\r\n              abstract = {ty = i, template = v}\r\n              prod[i] = nil\r\n            end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "print (prod)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "die (\"more than one abstract rule for \" .. rname .. \".\"\r\n                   .. tostring (pnum))",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "if type (v) ~= \"table\" then\r\n                die (\"bad abstract syntax rule of type \" .. type (v))\r\n              end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "die (\"bad abstract syntax rule of type \" .. type (v))",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "abstract = {ty = i, template = v}",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "prod[i] = nil",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "if abstract then\r\n          prod.abstract = abstract\r\n        end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "prod.abstract = abstract",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function Parser:parse (start, token, from)\r\n\r\n  local grammar = self.grammar -- for consistency and brevity\r\n  local rule, symbol -- functions called before they are defined\r\n\r\n  -- Try to parse an optional symbol.\r\n  -- @param sym the symbol being tried\r\n  -- @param from the index of the token to start from\r\n  -- @return the resulting parse tree, or false if empty\r\n  -- @return the index of the first unused token, or false to\r\n  -- indicate failure\r\n  local function optional (sym, from)\r\n    local tree, to = symbol (sym, from)\r\n    if to then\r\n      return tree, to\r\n    else\r\n      return false, from\r\n    end\r\n  end\r\n\r\n  -- Try to parse a list of symbols.\r\n  -- @param sym the symbol being tried\r\n  -- @param sep the list separator\r\n  -- @param from the index of the token to start from\r\n  -- @return the resulting parse tree, or false if empty\r\n  -- @return the index of the first unused token, or false to\r\n  -- indicate failure\r\n  local function list (sym, sep, from)\r\n    local tree, to\r\n    tree, from = symbol (sym, from)\r\n    local list = {tree}\r\n    if from == false then\r\n      return list, false\r\n    end\r\n    to = from\r\n    repeat\r\n      if sep ~= \"\" then\r\n        tree, from = symbol (sep, from)\r\n      end\r\n      if from then\r\n        tree, from = symbol (sym, from)\r\n        if from then\r\n          table.insert (list, tree)\r\n          to = from\r\n        end\r\n      end\r\n    until from == false\r\n    return list, to\r\n  end\r\n\r\n  -- Try to parse a given symbol.\r\n  -- @param sym the symbol being tried\r\n  -- @param from the index of the token to start from\r\n  -- @return tree the resulting parse tree, or false if empty\r\n  -- @return the index of the first unused token, or false to\r\n  -- indicate failure\r\n  symbol = function (sym, from) -- declared at the top\r\n    if string.sub (sym, -4, -1) == \"_opt\" then -- optional symbol\r\n      return optional (string.sub (sym, 1, -5), from)\r\n    elseif string.find (sym, \"_list.-$\") then -- list\r\n      local _, _, subsym, sep = string.find (sym, \"^(.*)_list_?(.-)$\")\r\n      return list (subsym, sep, from)\r\n    elseif grammar[sym] then -- non-terminal\r\n      return rule (sym, from)\r\n    elseif token[from] and -- not end of token list\r\n      ((grammar.lexemes[sym] and sym == token[from].ty) or\r\n       -- lexeme\r\n       sym == token[from].tok) -- literal terminal\r\n    then\r\n      return token[from].tok, from + 1 -- advance to next token\r\n    else\r\n      return false, false\r\n    end\r\n  end\r\n\r\n  -- Try a production.\r\n  -- @param name the name of the current rule\r\n  -- @param prod the production (list of symbols) being tried\r\n  -- @param from the index of the token to start from\r\n  -- @return the parse tree (incomplete if to is false)\r\n  -- @return the index of the first unused token, or false to\r\n  -- indicate failure\r\n  local function production (name, prod, from)\r\n    local tree = {ty = name}\r\n    local to = from\r\n    for prod in list.elems (prod) do\r\n      local sym\r\n      sym, to = symbol (prod, to)\r\n      if to then\r\n        table.insert (tree, sym)\r\n      else\r\n        return tree, false\r\n      end\r\n    end\r\n    if prod.action then\r\n      tree = prod.action (tree, token, to)\r\n    end\r\n    if prod.abstract then\r\n      local ntree = {}\r\n      ntree.ty = prod.abstract.ty\r\n      for i, n in prod.abstract.template do\r\n        ntree[i] = tree[n]\r\n      end\r\n      tree = ntree\r\n    end\r\n    return tree, to\r\n  end\r\n\r\n  -- Parse according to a particular rule.\r\n  -- @param name the name of the rule to try\r\n  -- @param from the index of the token to start from\r\n  -- @return parse tree\r\n  -- @return the index of the first unused token, or false to\r\n  -- indicate failure\r\n  rule = function (name, from) -- declared at the top\r\n    local alt = grammar[name]\r\n    local tree, to\r\n    for alt in list.elems (alt) do\r\n      tree, to = production (name, alt, from)\r\n      if to then\r\n        return tree, to\r\n      end\r\n    end\r\n    return tree, false\r\n  end\r\n\r\n  return rule (start, 1, from or 1)\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "local grammar = self.grammar",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "local rule, symbol",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "local function optional (sym, from)\r\n    local tree, to = symbol (sym, from)\r\n    if to then\r\n      return tree, to\r\n    else\r\n      return false, from\r\n    end\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 25,
    "text": "local tree, to = symbol (sym, from)",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "if to then\r\n      return tree, to\r\n    else\r\n      return false, from\r\n    end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "local function list (sym, sep, from)\r\n    local tree, to\r\n    tree, from = symbol (sym, from)\r\n    local list = {tree}\r\n    if from == false then\r\n      return list, false\r\n    end\r\n    to = from\r\n    repeat\r\n      if sep ~= \"\" then\r\n        tree, from = symbol (sep, from)\r\n      end\r\n      if from then\r\n        tree, from = symbol (sym, from)\r\n        if from then\r\n          table.insert (list, tree)\r\n          to = from\r\n        end\r\n      end\r\n    until from == false\r\n    return list, to\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 28,
    "text": "local tree, to",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "tree, from = symbol (sym, from)",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "local list = {tree}",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "if from == false then\r\n      return list, false\r\n    end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "to = from",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "repeat\r\n      if sep ~= \"\" then\r\n        tree, from = symbol (sep, from)\r\n      end\r\n      if from then\r\n        tree, from = symbol (sym, from)\r\n        if from then\r\n          table.insert (list, tree)\r\n          to = from\r\n        end\r\n      end\r\n    until from == false",
    "type": "statement:repeat"
  }, {
    "id": 34,
    "text": "if sep ~= \"\" then\r\n        tree, from = symbol (sep, from)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "tree, from = symbol (sep, from)",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "if from then\r\n        tree, from = symbol (sym, from)\r\n        if from then\r\n          table.insert (list, tree)\r\n          to = from\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "if from then\r\n          table.insert (list, tree)\r\n          to = from\r\n        end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "table.insert (list, tree)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "symbol = function (sym, from) -- declared at the top\r\n    if string.sub (sym, -4, -1) == \"_opt\" then -- optional symbol\r\n      return optional (string.sub (sym, 1, -5), from)\r\n    elseif string.find (sym, \"_list.-$\") then -- list\r\n      local _, _, subsym, sep = string.find (sym, \"^(.*)_list_?(.-)$\")\r\n      return list (subsym, sep, from)\r\n    elseif grammar[sym] then -- non-terminal\r\n      return rule (sym, from)\r\n    elseif token[from] and -- not end of token list\r\n      ((grammar.lexemes[sym] and sym == token[from].ty) or\r\n       -- lexeme\r\n       sym == token[from].tok) -- literal terminal\r\n    then\r\n      return token[from].tok, from + 1 -- advance to next token\r\n    else\r\n      return false, false\r\n    end\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "if string.sub (sym, -4, -1) == \"_opt\" then -- optional symbol\r\n      return optional (string.sub (sym, 1, -5), from)\r\n    elseif string.find (sym, \"_list.-$\") then -- list\r\n      local _, _, subsym, sep = string.find (sym, \"^(.*)_list_?(.-)$\")\r\n      return list (subsym, sep, from)\r\n    elseif grammar[sym] then -- non-terminal\r\n      return rule (sym, from)\r\n    elseif token[from] and -- not end of token list\r\n      ((grammar.lexemes[sym] and sym == token[from].ty) or\r\n       -- lexeme\r\n       sym == token[from].tok) -- literal terminal\r\n    then\r\n      return token[from].tok, from + 1 -- advance to next token\r\n    else\r\n      return false, false\r\n    end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "local _, _, subsym, sep = string.find (sym, \"^(.*)_list_?(.-)$\")",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "local function production (name, prod, from)\r\n    local tree = {ty = name}\r\n    local to = from\r\n    for prod in list.elems (prod) do\r\n      local sym\r\n      sym, to = symbol (prod, to)\r\n      if to then\r\n        table.insert (tree, sym)\r\n      else\r\n        return tree, false\r\n      end\r\n    end\r\n    if prod.action then\r\n      tree = prod.action (tree, token, to)\r\n    end\r\n    if prod.abstract then\r\n      local ntree = {}\r\n      ntree.ty = prod.abstract.ty\r\n      for i, n in prod.abstract.template do\r\n        ntree[i] = tree[n]\r\n      end\r\n      tree = ntree\r\n    end\r\n    return tree, to\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 43,
    "text": "local tree = {ty = name}",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "local to = from",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "for prod in list.elems (prod) do\r\n      local sym\r\n      sym, to = symbol (prod, to)\r\n      if to then\r\n        table.insert (tree, sym)\r\n      else\r\n        return tree, false\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 46,
    "text": "local sym",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "sym, to = symbol (prod, to)",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "if to then\r\n        table.insert (tree, sym)\r\n      else\r\n        return tree, false\r\n      end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "table.insert (tree, sym)",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "if prod.action then\r\n      tree = prod.action (tree, token, to)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "tree = prod.action (tree, token, to)",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "if prod.abstract then\r\n      local ntree = {}\r\n      ntree.ty = prod.abstract.ty\r\n      for i, n in prod.abstract.template do\r\n        ntree[i] = tree[n]\r\n      end\r\n      tree = ntree\r\n    end",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "local ntree = {}",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "ntree.ty = prod.abstract.ty",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "for i, n in prod.abstract.template do\r\n        ntree[i] = tree[n]\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 56,
    "text": "ntree[i] = tree[n]",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "tree = ntree",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "rule = function (name, from) -- declared at the top\r\n    local alt = grammar[name]\r\n    local tree, to\r\n    for alt in list.elems (alt) do\r\n      tree, to = production (name, alt, from)\r\n      if to then\r\n        return tree, to\r\n      end\r\n    end\r\n    return tree, false\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "local alt = grammar[name]",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "for alt in list.elems (alt) do\r\n      tree, to = production (name, alt, from)\r\n      if to then\r\n        return tree, to\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 61,
    "text": "tree, to = production (name, alt, from)",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "if to then\r\n        return tree, to\r\n      end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "local function optional (sym, from)\r\n    local tree, to = symbol (sym, from)\r\n    if to then\r\n      return tree, to\r\n    else\r\n      return false, from\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "local function list (sym, sep, from)\r\n    local tree, to\r\n    tree, from = symbol (sym, from)\r\n    local list = {tree}\r\n    if from == false then\r\n      return list, false\r\n    end\r\n    to = from\r\n    repeat\r\n      if sep ~= \"\" then\r\n        tree, from = symbol (sep, from)\r\n      end\r\n      if from then\r\n        tree, from = symbol (sym, from)\r\n        if from then\r\n          table.insert (list, tree)\r\n          to = from\r\n        end\r\n      end\r\n    until from == false\r\n    return list, to\r\n  end",
    "type": "function"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "function (sym, from) -- declared at the top\r\n    if string.sub (sym, -4, -1) == \"_opt\" then -- optional symbol\r\n      return optional (string.sub (sym, 1, -5), from)\r\n    elseif string.find (sym, \"_list.-$\") then -- list\r\n      local _, _, subsym, sep = string.find (sym, \"^(.*)_list_?(.-)$\")\r\n      return list (subsym, sep, from)\r\n    elseif grammar[sym] then -- non-terminal\r\n      return rule (sym, from)\r\n    elseif token[from] and -- not end of token list\r\n      ((grammar.lexemes[sym] and sym == token[from].ty) or\r\n       -- lexeme\r\n       sym == token[from].tok) -- literal terminal\r\n    then\r\n      return token[from].tok, from + 1 -- advance to next token\r\n    else\r\n      return false, false\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "local function production (name, prod, from)\r\n    local tree = {ty = name}\r\n    local to = from\r\n    for prod in list.elems (prod) do\r\n      local sym\r\n      sym, to = symbol (prod, to)\r\n      if to then\r\n        table.insert (tree, sym)\r\n      else\r\n        return tree, false\r\n      end\r\n    end\r\n    if prod.action then\r\n      tree = prod.action (tree, token, to)\r\n    end\r\n    if prod.abstract then\r\n      local ntree = {}\r\n      ntree.ty = prod.abstract.ty\r\n      for i, n in prod.abstract.template do\r\n        ntree[i] = tree[n]\r\n      end\r\n      tree = ntree\r\n    end\r\n    return tree, to\r\n  end",
    "type": "function"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "function (name, from) -- declared at the top\r\n    local alt = grammar[name]\r\n    local tree, to\r\n    for alt in list.elems (alt) do\r\n      tree, to = production (name, alt, from)\r\n      if to then\r\n        return tree, to\r\n      end\r\n    end\r\n    return tree, false\r\n  end",
    "type": "function"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "",
    "type": "function container"
  }, {
    "id": 75,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 76,
    "text": "find",
    "type": "global function"
  }, {
    "id": 77,
    "text": "print",
    "type": "global function"
  }, {
    "id": 78,
    "text": "module",
    "type": "global function"
  }, {
    "id": 79,
    "text": "elems",
    "type": "global function"
  }, {
    "id": 80,
    "text": "Object",
    "type": "global function"
  }, {
    "id": 81,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 82,
    "text": "die",
    "type": "global function"
  }, {
    "id": 83,
    "text": "action",
    "type": "global function"
  }, {
    "id": 84,
    "text": "clone_rename",
    "type": "global function"
  }, {
    "id": 85,
    "text": "merge",
    "type": "global function"
  }, {
    "id": 86,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 87,
    "text": "require",
    "type": "global function"
  }, {
    "id": 88,
    "text": "type",
    "type": "global function"
  }, {
    "id": 89,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 90,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 91,
    "text": "",
    "type": "global variable"
  }, {
    "id": 92,
    "text": "",
    "type": "variable container"
  }, {
    "id": 93,
    "text": "",
    "type": "require container"
  }, {
    "id": 94,
    "text": "",
    "type": "global variable"
  }, {
    "id": 95,
    "text": "",
    "type": "n/a"
  } ]
}