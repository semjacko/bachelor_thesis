{
  "_filename": "fstable.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-stdlib/src/fstable.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 8,
    "label": "has",
    "to": 6
  }, {
    "from": 8,
    "label": "has",
    "to": 6
  }, {
    "from": 8,
    "label": "has",
    "to": 6
  }, {
    "from": 8,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 9
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 16,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 21,
    "label": "has",
    "to": 25
  }, {
    "from": 21,
    "label": "has",
    "to": 26
  }, {
    "from": 21,
    "label": "has",
    "to": 27
  }, {
    "from": 21,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 21,
    "label": "has",
    "to": 30
  }, {
    "from": 14,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 6
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 32,
    "label": "has",
    "to": 6
  }, {
    "from": 32,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 33
  }, {
    "from": 37,
    "label": "has",
    "to": 6
  }, {
    "from": 37,
    "label": "has",
    "to": 34
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 6
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 40,
    "label": "has",
    "to": 45
  }, {
    "from": 40,
    "label": "has",
    "to": 46
  }, {
    "from": 40,
    "label": "has",
    "to": 47
  }, {
    "from": 40,
    "label": "has",
    "to": 48
  }, {
    "from": 40,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 40,
    "label": "has",
    "to": 6
  }, {
    "from": 40,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 34
  }, {
    "from": 53,
    "label": "has",
    "to": 35
  }, {
    "from": 53,
    "label": "has",
    "to": 6
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 34
  }, {
    "from": 55,
    "label": "has",
    "to": 38
  }, {
    "from": 55,
    "label": "has",
    "to": 6
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "calls",
    "to": 40
  }, {
    "from": 57,
    "label": "calls",
    "to": 40
  }, {
    "from": 40,
    "label": "calls",
    "to": 75
  }, {
    "from": 40,
    "label": "calls",
    "to": 60
  }, {
    "from": 57,
    "label": "calls",
    "to": 70
  }, {
    "from": 57,
    "label": "calls",
    "to": 71
  }, {
    "from": 57,
    "label": "calls",
    "to": 71
  }, {
    "from": 57,
    "label": "calls",
    "to": 71
  }, {
    "from": 40,
    "label": "calls",
    "to": 71
  }, {
    "from": 57,
    "label": "calls",
    "to": 72
  }, {
    "from": 57,
    "label": "calls",
    "to": 72
  }, {
    "from": 40,
    "label": "calls",
    "to": 72
  }, {
    "from": 57,
    "label": "calls",
    "to": 67
  }, {
    "from": 57,
    "label": "calls",
    "to": 63
  }, {
    "from": 57,
    "label": "calls",
    "to": 63
  }, {
    "from": 40,
    "label": "calls",
    "to": 76
  }, {
    "from": 57,
    "label": "calls",
    "to": 65
  }, {
    "from": 57,
    "label": "calls",
    "to": 61
  }, {
    "from": 57,
    "label": "calls",
    "to": 68
  }, {
    "from": 57,
    "label": "calls",
    "to": 62
  }, {
    "from": 57,
    "label": "calls",
    "to": 69
  }, {
    "from": 40,
    "label": "calls",
    "to": 77
  }, {
    "from": 57,
    "label": "calls",
    "to": 66
  }, {
    "from": 57,
    "label": "calls",
    "to": 64
  }, {
    "from": 40,
    "label": "calls",
    "to": 64
  }, {
    "from": 57,
    "label": "calls",
    "to": 74
  }, {
    "from": 57,
    "label": "calls",
    "to": 74
  }, {
    "from": 57,
    "label": "calls",
    "to": 74
  }, {
    "from": 57,
    "label": "calls",
    "to": 74
  }, {
    "from": 57,
    "label": "calls",
    "to": 73
  }, {
    "from": 57,
    "label": "calls",
    "to": 73
  }, {
    "from": 57,
    "label": "calls",
    "to": 73
  }, {
    "from": 57,
    "label": "calls",
    "to": 73
  }, {
    "from": 57,
    "label": "calls",
    "to": 73
  }, {
    "from": 57,
    "label": "calls",
    "to": 2
  }, {
    "from": 57,
    "label": "calls",
    "to": 2
  }, {
    "from": 57,
    "label": "calls",
    "to": 78
  }, {
    "from": 57,
    "label": "calls",
    "to": 78
  }, {
    "from": 57,
    "label": "calls",
    "to": 78
  }, {
    "from": 57,
    "label": "calls",
    "to": 78
  }, {
    "from": 57,
    "label": "calls",
    "to": 78
  }, {
    "from": 1,
    "label": "contains",
    "to": 57
  }, {
    "from": 57,
    "label": "declares",
    "to": 2
  }, {
    "from": 57,
    "label": "declares",
    "to": 8
  }, {
    "from": 57,
    "label": "declares",
    "to": 14
  }, {
    "from": 57,
    "label": "declares",
    "to": 32
  }, {
    "from": 57,
    "label": "declares",
    "to": 37
  }, {
    "from": 57,
    "label": "declares",
    "to": 40
  }, {
    "from": 57,
    "label": "declares",
    "to": 53
  }, {
    "from": 57,
    "label": "declares",
    "to": 55
  }, {
    "from": 1,
    "label": "contains",
    "to": 80
  }, {
    "from": 1,
    "label": "contains",
    "to": 81
  }, {
    "from": 80,
    "label": "initializes",
    "to": 82
  }, {
    "from": 82,
    "label": "assigns",
    "to": 83
  }, {
    "from": 80,
    "label": "initializes",
    "to": 84
  }, {
    "from": 84,
    "label": "assigns",
    "to": 85
  }, {
    "from": 80,
    "label": "initializes",
    "to": 86
  }, {
    "from": 86,
    "label": "assigns",
    "to": 87
  }, {
    "from": 80,
    "label": "initializes",
    "to": 88
  }, {
    "from": 88,
    "label": "assigns",
    "to": 89
  }, {
    "from": 80,
    "label": "initializes",
    "to": 90
  }, {
    "from": 90,
    "label": "assigns",
    "to": 91
  }, {
    "from": 81,
    "label": "initializes",
    "to": 79
  }, {
    "from": 81,
    "label": "initializes",
    "to": 79
  }, {
    "from": 81,
    "label": "initializes",
    "to": 79
  }, {
    "from": 81,
    "label": "initializes",
    "to": 79
  }, {
    "from": 81,
    "label": "initializes",
    "to": 79
  }, {
    "from": 82,
    "label": "contains",
    "to": 8
  }, {
    "from": 92,
    "label": "contains",
    "to": 8
  }, {
    "from": 93,
    "label": "contains",
    "to": 8
  }, {
    "from": 94,
    "label": "contains",
    "to": 8
  }, {
    "from": 82,
    "label": "contains",
    "to": 14
  }, {
    "from": 92,
    "label": "contains",
    "to": 14
  }, {
    "from": 93,
    "label": "contains",
    "to": 14
  }, {
    "from": 94,
    "label": "contains",
    "to": 14
  }, {
    "from": 82,
    "label": "contains",
    "to": 32
  }, {
    "from": 92,
    "label": "contains",
    "to": 32
  }, {
    "from": 93,
    "label": "contains",
    "to": 32
  }, {
    "from": 94,
    "label": "contains",
    "to": 32
  }, {
    "from": 82,
    "label": "contains",
    "to": 37
  }, {
    "from": 92,
    "label": "contains",
    "to": 37
  }, {
    "from": 93,
    "label": "contains",
    "to": 37
  }, {
    "from": 94,
    "label": "contains",
    "to": 37
  }, {
    "from": 82,
    "label": "contains",
    "to": 58
  }, {
    "from": 82,
    "label": "contains",
    "to": 59
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "fstable",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function fsnext (dir)\r\n  local f\r\n  repeat\r\n    f = dir:next ()\r\n  until f ~= \".\" and f ~= \"..\"\r\n  return f\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local f",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "repeat\r\n    f = dir:next ()\r\n  until f ~= \".\" and f ~= \"..\"",
    "type": "statement:repeat"
  }, {
    "id": 5,
    "text": "f = dir:next ()",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function (t, k)\r\n  local path = io.catfile (getmetatable (t).directory, k)\r\n  local attrs = lfs.attributes (path)\r\n  if attrs then\r\n    if attrs.mode == \"file\" then\r\n      return io.slurp (path)\r\n    elseif attrs.mode == \"directory\" then\r\n      return new (path)\r\n    end\r\n  end\r\n  return attrs\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "local path = io.catfile (getmetatable (t).directory, k)",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "local attrs = lfs.attributes (path)",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "if attrs then\r\n    if attrs.mode == \"file\" then\r\n      return io.slurp (path)\r\n    elseif attrs.mode == \"directory\" then\r\n      return new (path)\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "if attrs.mode == \"file\" then\r\n      return io.slurp (path)\r\n    elseif attrs.mode == \"directory\" then\r\n      return new (path)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function (t, k, v)\r\n  local ty = type (v)\r\n  if ty == \"thread\" or ty == \"function\" or ty == \"userdata\" then\r\n    error (\"cannot persist a \" .. ty .. \"\")\r\n  elseif type (k) ~= \"string\" then\r\n    error (\"keys of persistent tables must be of type string\")\r\n  else\r\n    k = string.gsub (k, package.dirsep, \"_\")\r\n    local path = io.catfile (getmetatable (t).directory, k)\r\n    local vm = getmetatable (v)\r\n    if v == nil then\r\n      os.remove (path)\r\n    elseif type (v) ~= \"table\" then\r\n      local h = io.open (path, \"w\")\r\n      h:write (tostring (v))\r\n      h:close ()\r\n    elseif type (vm) == \"table\" and vm.metatable == metatable then\r\n      -- To match Lua semantics we'd hardlink, but that's not allowed for directories\r\n      local ok, errmsg = posix.link (vm.directory, path, true)\r\n    else\r\n      local ok, errmsg = lfs.mkdir (path)\r\n      if not ok then\r\n        error (errmsg)\r\n      end\r\n      new (path, v)\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "local ty = type (v)",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "if ty == \"thread\" or ty == \"function\" or ty == \"userdata\" then\r\n    error (\"cannot persist a \" .. ty .. \"\")\r\n  elseif type (k) ~= \"string\" then\r\n    error (\"keys of persistent tables must be of type string\")\r\n  else\r\n    k = string.gsub (k, package.dirsep, \"_\")\r\n    local path = io.catfile (getmetatable (t).directory, k)\r\n    local vm = getmetatable (v)\r\n    if v == nil then\r\n      os.remove (path)\r\n    elseif type (v) ~= \"table\" then\r\n      local h = io.open (path, \"w\")\r\n      h:write (tostring (v))\r\n      h:close ()\r\n    elseif type (vm) == \"table\" and vm.metatable == metatable then\r\n      -- To match Lua semantics we'd hardlink, but that's not allowed for directories\r\n      local ok, errmsg = posix.link (vm.directory, path, true)\r\n    else\r\n      local ok, errmsg = lfs.mkdir (path)\r\n      if not ok then\r\n        error (errmsg)\r\n      end\r\n      new (path, v)\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "error (\"cannot persist a \" .. ty .. \"\")",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "error (\"keys of persistent tables must be of type string\")",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "k = string.gsub (k, package.dirsep, \"_\")",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "local vm = getmetatable (v)",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "if v == nil then\r\n      os.remove (path)\r\n    elseif type (v) ~= \"table\" then\r\n      local h = io.open (path, \"w\")\r\n      h:write (tostring (v))\r\n      h:close ()\r\n    elseif type (vm) == \"table\" and vm.metatable == metatable then\r\n      -- To match Lua semantics we'd hardlink, but that's not allowed for directories\r\n      local ok, errmsg = posix.link (vm.directory, path, true)\r\n    else\r\n      local ok, errmsg = lfs.mkdir (path)\r\n      if not ok then\r\n        error (errmsg)\r\n      end\r\n      new (path, v)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "os.remove (path)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "local h = io.open (path, \"w\")",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "h:write (tostring (v))",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "h:close ()",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "local ok, errmsg = posix.link (vm.directory, path, true)",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "local ok, errmsg = lfs.mkdir (path)",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "if not ok then\r\n        error (errmsg)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "error (errmsg)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "new (path, v)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function (t)\r\n  local _, dir = lfs.dir (getmetatable (t).directory)\r\n  return function (dir)\r\n           local f = fsnext (dir)\r\n           if f then\r\n             return f, t[f]\r\n           end\r\n         end,\r\n  dir\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "local _, dir = lfs.dir (getmetatable (t).directory)",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "local f = fsnext (dir)",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "if f then\r\n             return f, t[f]\r\n           end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function (t)\r\n  local _, dir = lfs.dir (getmetatable (t).directory)\r\n  return function (dir, i)\r\n           local f = fsnext (dir)\r\n           if f then\r\n             return i + 1, f\r\n           end\r\n         end,\r\n  dir, 0\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "if f then\r\n             return i + 1, f\r\n           end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function new (path, t)\r\n  if not path:find (\"^\" .. package.dirsep) then\r\n    path = io.catfile (lfs.currentdir (), path)\r\n  end\r\n  if lfs.attributes (path, \"mode\") ~= \"directory\" then\r\n    error (\"`\" .. path .. \"' does not exist or is not a directory\")\r\n  end\r\n  local m = table.clone (metatable)\r\n  m.directory = path\r\n  m.metatable = metatable\r\n  local d = setmetatable ({}, m)\r\n  if t then\r\n    for i, v in pairs (t) do\r\n      d[i] = v\r\n    end\r\n  end\r\n  return d\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "if not path:find (\"^\" .. package.dirsep) then\r\n    path = io.catfile (lfs.currentdir (), path)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "path = io.catfile (lfs.currentdir (), path)",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "if lfs.attributes (path, \"mode\") ~= \"directory\" then\r\n    error (\"`\" .. path .. \"' does not exist or is not a directory\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "error (\"`\" .. path .. \"' does not exist or is not a directory\")",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "local m = table.clone (metatable)",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "m.directory = path",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "m.metatable = metatable",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "local d = setmetatable ({}, m)",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "if t then\r\n    for i, v in pairs (t) do\r\n      d[i] = v\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "for i, v in pairs (t) do\r\n      d[i] = v\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 51,
    "text": "d[i] = v",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function (dir)\r\n           local f = fsnext (dir)\r\n           if f then\r\n             return f, t[f]\r\n           end\r\n         end",
    "type": "function"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "function (dir, i)\r\n           local f = fsnext (dir)\r\n           if f then\r\n             return i + 1, f\r\n           end\r\n         end",
    "type": "function"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "",
    "type": "function container"
  }, {
    "id": 58,
    "text": "function metatable.__index (tr, i)\r\n  -- FIXME: the following doesn't treat list keys correctly\r\n  --        e.g. tr[{{1, 2}, {3, 4}}], maybe flatten first?\r\n  if type (i) == \"table\" and #i > 0 then\r\n    return list.foldl (op[\"[]\"], tr, i)\r\n  else\r\n    return rawget (tr, i)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 59,
    "text": "function metatable.__newindex (tr, i, v)\r\n  if type (i) == \"table\" then\r\n    for n = 1, #i - 1 do\r\n      if getmetatable (tr[i[n]]) ~= metatable then\r\n        rawset (tr, i[n], tree.new ())\r\n      end\r\n      tr = tr[i[n]]\r\n    end\r\n    rawset (tr, i[#i], v)\r\n  else\r\n    rawset (tr, i, v)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "currentdir",
    "type": "global function"
  }, {
    "id": 61,
    "text": "mkdir",
    "type": "global function"
  }, {
    "id": 62,
    "text": "link",
    "type": "global function"
  }, {
    "id": 63,
    "text": "dir",
    "type": "global function"
  }, {
    "id": 64,
    "text": "attributes",
    "type": "global function"
  }, {
    "id": 65,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 66,
    "text": "module",
    "type": "global function"
  }, {
    "id": 67,
    "text": "slurp",
    "type": "global function"
  }, {
    "id": 68,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 69,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 70,
    "text": "open",
    "type": "global function"
  }, {
    "id": 71,
    "text": "error",
    "type": "global function"
  }, {
    "id": 72,
    "text": "catfile",
    "type": "global function"
  }, {
    "id": 73,
    "text": "require",
    "type": "global function"
  }, {
    "id": 74,
    "text": "type",
    "type": "global function"
  }, {
    "id": 75,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 76,
    "text": "clone",
    "type": "global function"
  }, {
    "id": 77,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 78,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 79,
    "text": "",
    "type": "global variable"
  }, {
    "id": 80,
    "text": "",
    "type": "variable container"
  }, {
    "id": 81,
    "text": "",
    "type": "require container"
  }, {
    "id": 82,
    "text": "",
    "type": "local variable"
  }, {
    "id": 83,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 84,
    "text": "",
    "type": "global variable"
  }, {
    "id": 85,
    "text": "",
    "type": "n/a"
  }, {
    "id": 86,
    "text": "",
    "type": "global variable"
  }, {
    "id": 87,
    "text": "",
    "type": "n/a"
  }, {
    "id": 88,
    "text": "",
    "type": "global variable"
  }, {
    "id": 89,
    "text": "",
    "type": "n/a"
  }, {
    "id": 90,
    "text": "",
    "type": "global variable"
  }, {
    "id": 91,
    "text": "",
    "type": "n/a"
  }, {
    "id": 92,
    "text": "",
    "type": "local variable"
  }, {
    "id": 93,
    "text": "",
    "type": "local variable"
  }, {
    "id": 94,
    "text": "",
    "type": "local variable"
  } ]
}