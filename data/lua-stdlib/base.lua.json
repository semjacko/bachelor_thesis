{
  "_filename": "base.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-stdlib/src/base.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 14
  }, {
    "from": 10,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 10,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 12
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 12
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 12
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 12
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 12
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 32,
    "label": "has",
    "to": 36
  }, {
    "from": 32,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 32,
    "label": "has",
    "to": 40
  }, {
    "from": 29,
    "label": "has",
    "to": 12
  }, {
    "from": 29,
    "label": "has",
    "to": 12
  }, {
    "from": 29,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 12
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 12
  }, {
    "from": 44,
    "label": "has",
    "to": 12
  }, {
    "from": 44,
    "label": "has",
    "to": 12
  }, {
    "from": 44,
    "label": "has",
    "to": 12
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 12
  }, {
    "from": 44,
    "label": "has",
    "to": 12
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 12
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 47,
    "label": "has",
    "to": 51
  }, {
    "from": 47,
    "label": "has",
    "to": 12
  }, {
    "from": 47,
    "label": "has",
    "to": 52
  }, {
    "from": 47,
    "label": "has",
    "to": 12
  }, {
    "from": 47,
    "label": "has",
    "to": 53
  }, {
    "from": 47,
    "label": "has",
    "to": 12
  }, {
    "from": 47,
    "label": "has",
    "to": 12
  }, {
    "from": 47,
    "label": "has",
    "to": 54
  }, {
    "from": 47,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 47,
    "label": "has",
    "to": 57
  }, {
    "from": 47,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 47,
    "label": "has",
    "to": 58
  }, {
    "from": 47,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 56
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 47,
    "label": "has",
    "to": 61
  }, {
    "from": 47,
    "label": "has",
    "to": 12
  }, {
    "from": 47,
    "label": "has",
    "to": 62
  }, {
    "from": 47,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 47,
    "label": "has",
    "to": 12
  }, {
    "from": 47,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 12
  }, {
    "from": 66,
    "label": "has",
    "to": 12
  }, {
    "from": 66,
    "label": "has",
    "to": 12
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 73,
    "label": "has",
    "to": 78
  }, {
    "from": 73,
    "label": "has",
    "to": 79
  }, {
    "from": 70,
    "label": "has",
    "to": 12
  }, {
    "from": 70,
    "label": "has",
    "to": 12
  }, {
    "from": 70,
    "label": "has",
    "to": 12
  }, {
    "from": 70,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 12
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 83,
    "label": "has",
    "to": 12
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 12
  }, {
    "from": 85,
    "label": "has",
    "to": 12
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 12
  }, {
    "from": 88,
    "label": "has",
    "to": 12
  }, {
    "from": 88,
    "label": "has",
    "to": 12
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 91,
    "label": "has",
    "to": 12
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 91,
    "label": "has",
    "to": 12
  }, {
    "from": 91,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 12
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 97,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 100,
    "label": "has",
    "to": 102
  }, {
    "from": 97,
    "label": "has",
    "to": 12
  }, {
    "from": 97,
    "label": "has",
    "to": 103
  }, {
    "from": 104,
    "label": "has",
    "to": 12
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 106,
    "label": "has",
    "to": 12
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 106,
    "label": "has",
    "to": 108
  }, {
    "from": 106,
    "label": "has",
    "to": 12
  }, {
    "from": 106,
    "label": "has",
    "to": 109
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 110,
    "label": "has",
    "to": 112
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 113,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 115,
    "label": "has",
    "to": 117
  }, {
    "from": 115,
    "label": "has",
    "to": 118
  }, {
    "from": 113,
    "label": "has",
    "to": 119
  }, {
    "from": 113,
    "label": "has",
    "to": 120
  }, {
    "from": 110,
    "label": "has",
    "to": 12
  }, {
    "from": 110,
    "label": "has",
    "to": 121
  }, {
    "from": 122,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 113,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 115,
    "label": "has",
    "to": 117
  }, {
    "from": 115,
    "label": "has",
    "to": 118
  }, {
    "from": 113,
    "label": "has",
    "to": 119
  }, {
    "from": 113,
    "label": "has",
    "to": 120
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 124,
    "label": "has",
    "to": 12
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 126,
    "label": "has",
    "to": 12
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 117
  }, {
    "from": 130,
    "label": "has",
    "to": 132
  }, {
    "from": 128,
    "label": "has",
    "to": 12
  }, {
    "from": 128,
    "label": "has",
    "to": 133
  }, {
    "from": 134,
    "label": "has",
    "to": 130
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 117
  }, {
    "from": 130,
    "label": "has",
    "to": 132
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 136,
    "label": "has",
    "to": 12
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 138,
    "label": "has",
    "to": 12
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 140,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 140,
    "label": "has",
    "to": 12
  }, {
    "from": 140,
    "label": "has",
    "to": 144
  }, {
    "from": 145,
    "label": "has",
    "to": 141
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 146,
    "label": "has",
    "to": 148
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 145,
    "label": "has",
    "to": 12
  }, {
    "from": 145,
    "label": "has",
    "to": 150
  }, {
    "from": 151,
    "label": "has",
    "to": 141
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 153,
    "label": "has",
    "to": 143
  }, {
    "from": 151,
    "label": "has",
    "to": 12
  }, {
    "from": 151,
    "label": "has",
    "to": 154
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 155,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 155,
    "label": "has",
    "to": 12
  }, {
    "from": 155,
    "label": "has",
    "to": 159
  }, {
    "from": 160,
    "label": "has",
    "to": 161
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 162,
    "label": "has",
    "to": 163
  }, {
    "from": 161,
    "label": "has",
    "to": 164
  }, {
    "from": 160,
    "label": "has",
    "to": 12
  }, {
    "from": 160,
    "label": "has",
    "to": 165
  }, {
    "from": 166,
    "label": "has",
    "to": 167
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 166,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 166,
    "label": "has",
    "to": 171
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 166,
    "label": "has",
    "to": 173
  }, {
    "from": 173,
    "label": "has",
    "to": 174
  }, {
    "from": 166,
    "label": "has",
    "to": 175
  }, {
    "from": 166,
    "label": "has",
    "to": 176
  }, {
    "from": 177,
    "label": "has",
    "to": 178
  }, {
    "from": 177,
    "label": "has",
    "to": 179
  }, {
    "from": 177,
    "label": "has",
    "to": 180
  }, {
    "from": 181,
    "label": "has",
    "to": 12
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 183,
    "label": "has",
    "to": 12
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 185,
    "label": "has",
    "to": 12
  }, {
    "from": 185,
    "label": "has",
    "to": 186
  }, {
    "from": 187,
    "label": "has",
    "to": 12
  }, {
    "from": 187,
    "label": "has",
    "to": 188
  }, {
    "from": 189,
    "label": "has",
    "to": 12
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 191,
    "label": "has",
    "to": 12
  }, {
    "from": 191,
    "label": "has",
    "to": 192
  }, {
    "from": 193,
    "label": "has",
    "to": 12
  }, {
    "from": 193,
    "label": "has",
    "to": 194
  }, {
    "from": 195,
    "label": "has",
    "to": 12
  }, {
    "from": 195,
    "label": "has",
    "to": 196
  }, {
    "from": 197,
    "label": "has",
    "to": 12
  }, {
    "from": 197,
    "label": "has",
    "to": 198
  }, {
    "from": 199,
    "label": "has",
    "to": 12
  }, {
    "from": 199,
    "label": "has",
    "to": 200
  }, {
    "from": 201,
    "label": "has",
    "to": 12
  }, {
    "from": 201,
    "label": "has",
    "to": 202
  }, {
    "from": 203,
    "label": "has",
    "to": 12
  }, {
    "from": 204,
    "label": "has",
    "to": 12
  }, {
    "from": 205,
    "label": "has",
    "to": 12
  }, {
    "from": 205,
    "label": "has",
    "to": 206
  }, {
    "from": 207,
    "label": "has",
    "to": 45
  }, {
    "from": 207,
    "label": "has",
    "to": 12
  }, {
    "from": 207,
    "label": "has",
    "to": 12
  }, {
    "from": 207,
    "label": "has",
    "to": 208
  }, {
    "from": 209,
    "label": "has",
    "to": 50
  }, {
    "from": 209,
    "label": "has",
    "to": 51
  }, {
    "from": 209,
    "label": "has",
    "to": 12
  }, {
    "from": 209,
    "label": "has",
    "to": 210
  }, {
    "from": 211,
    "label": "has",
    "to": 52
  }, {
    "from": 211,
    "label": "has",
    "to": 12
  }, {
    "from": 211,
    "label": "has",
    "to": 212
  }, {
    "from": 213,
    "label": "has",
    "to": 53
  }, {
    "from": 213,
    "label": "has",
    "to": 12
  }, {
    "from": 213,
    "label": "has",
    "to": 12
  }, {
    "from": 213,
    "label": "has",
    "to": 214
  }, {
    "from": 215,
    "label": "has",
    "to": 54
  }, {
    "from": 215,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 215,
    "label": "has",
    "to": 57
  }, {
    "from": 215,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 215,
    "label": "has",
    "to": 58
  }, {
    "from": 215,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 56
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 215,
    "label": "has",
    "to": 61
  }, {
    "from": 215,
    "label": "has",
    "to": 12
  }, {
    "from": 215,
    "label": "has",
    "to": 216
  }, {
    "from": 217,
    "label": "has",
    "to": 62
  }, {
    "from": 217,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 217,
    "label": "has",
    "to": 12
  }, {
    "from": 217,
    "label": "has",
    "to": 218
  }, {
    "from": 219,
    "label": "has",
    "to": 12
  }, {
    "from": 219,
    "label": "has",
    "to": 220
  }, {
    "from": 221,
    "label": "has",
    "to": 12
  }, {
    "from": 221,
    "label": "has",
    "to": 222
  }, {
    "from": 223,
    "label": "has",
    "to": 92
  }, {
    "from": 223,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 223,
    "label": "has",
    "to": 12
  }, {
    "from": 223,
    "label": "has",
    "to": 224
  }, {
    "from": 225,
    "label": "has",
    "to": 98
  }, {
    "from": 225,
    "label": "has",
    "to": 99
  }, {
    "from": 225,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 100,
    "label": "has",
    "to": 102
  }, {
    "from": 225,
    "label": "has",
    "to": 12
  }, {
    "from": 225,
    "label": "has",
    "to": 226
  }, {
    "from": 227,
    "label": "has",
    "to": 107
  }, {
    "from": 227,
    "label": "has",
    "to": 108
  }, {
    "from": 227,
    "label": "has",
    "to": 12
  }, {
    "from": 227,
    "label": "has",
    "to": 228
  }, {
    "from": 91,
    "label": "calls",
    "to": 249
  }, {
    "from": 47,
    "label": "calls",
    "to": 250
  }, {
    "from": 70,
    "label": "calls",
    "to": 250
  }, {
    "from": 160,
    "label": "calls",
    "to": 250
  }, {
    "from": 166,
    "label": "calls",
    "to": 250
  }, {
    "from": 42,
    "label": "calls",
    "to": 251
  }, {
    "from": 44,
    "label": "calls",
    "to": 251
  }, {
    "from": 47,
    "label": "calls",
    "to": 251
  }, {
    "from": 10,
    "label": "calls",
    "to": 234
  }, {
    "from": 10,
    "label": "calls",
    "to": 234
  }, {
    "from": 47,
    "label": "calls",
    "to": 235
  }, {
    "from": 70,
    "label": "calls",
    "to": 235
  }, {
    "from": 70,
    "label": "calls",
    "to": 235
  }, {
    "from": 97,
    "label": "calls",
    "to": 235
  }, {
    "from": 166,
    "label": "calls",
    "to": 235
  }, {
    "from": 70,
    "label": "calls",
    "to": 253
  }, {
    "from": 70,
    "label": "calls",
    "to": 253
  }, {
    "from": 136,
    "label": "calls",
    "to": 128
  }, {
    "from": 138,
    "label": "calls",
    "to": 128
  }, {
    "from": 177,
    "label": "calls",
    "to": 236
  }, {
    "from": 97,
    "label": "calls",
    "to": 237
  }, {
    "from": 29,
    "label": "calls",
    "to": 231
  }, {
    "from": 29,
    "label": "calls",
    "to": 255
  }, {
    "from": 29,
    "label": "calls",
    "to": 255
  }, {
    "from": 29,
    "label": "calls",
    "to": 239
  }, {
    "from": 29,
    "label": "calls",
    "to": 239
  }, {
    "from": 88,
    "label": "calls",
    "to": 256
  }, {
    "from": 24,
    "label": "calls",
    "to": 240
  }, {
    "from": 229,
    "label": "calls",
    "to": 241
  }, {
    "from": 20,
    "label": "calls",
    "to": 231
  }, {
    "from": 85,
    "label": "calls",
    "to": 230
  }, {
    "from": 110,
    "label": "calls",
    "to": 242
  }, {
    "from": 110,
    "label": "calls",
    "to": 242
  }, {
    "from": 110,
    "label": "calls",
    "to": 242
  }, {
    "from": 128,
    "label": "calls",
    "to": 242
  }, {
    "from": 166,
    "label": "calls",
    "to": 258
  }, {
    "from": 140,
    "label": "calls",
    "to": 259
  }, {
    "from": 145,
    "label": "calls",
    "to": 259
  }, {
    "from": 151,
    "label": "calls",
    "to": 259
  }, {
    "from": 155,
    "label": "calls",
    "to": 259
  }, {
    "from": 85,
    "label": "calls",
    "to": 260
  }, {
    "from": 145,
    "label": "calls",
    "to": 260
  }, {
    "from": 155,
    "label": "calls",
    "to": 260
  }, {
    "from": 29,
    "label": "calls",
    "to": 42
  }, {
    "from": 29,
    "label": "calls",
    "to": 42
  }, {
    "from": 229,
    "label": "calls",
    "to": 263
  }, {
    "from": 229,
    "label": "calls",
    "to": 263
  }, {
    "from": 229,
    "label": "calls",
    "to": 263
  }, {
    "from": 229,
    "label": "calls",
    "to": 263
  }, {
    "from": 10,
    "label": "calls",
    "to": 263
  }, {
    "from": 29,
    "label": "calls",
    "to": 267
  }, {
    "from": 70,
    "label": "calls",
    "to": 267
  }, {
    "from": 29,
    "label": "calls",
    "to": 243
  }, {
    "from": 66,
    "label": "calls",
    "to": 243
  }, {
    "from": 85,
    "label": "calls",
    "to": 272
  }, {
    "from": 91,
    "label": "calls",
    "to": 272
  }, {
    "from": 91,
    "label": "calls",
    "to": 272
  }, {
    "from": 177,
    "label": "calls",
    "to": 272
  }, {
    "from": 29,
    "label": "calls",
    "to": 261
  }, {
    "from": 160,
    "label": "calls",
    "to": 262
  }, {
    "from": 177,
    "label": "calls",
    "to": 262
  }, {
    "from": 22,
    "label": "calls",
    "to": 20
  }, {
    "from": 10,
    "label": "calls",
    "to": 20
  }, {
    "from": 10,
    "label": "calls",
    "to": 20
  }, {
    "from": 124,
    "label": "calls",
    "to": 110
  }, {
    "from": 126,
    "label": "calls",
    "to": 110
  }, {
    "from": 24,
    "label": "calls",
    "to": 264
  }, {
    "from": 29,
    "label": "calls",
    "to": 264
  }, {
    "from": 47,
    "label": "calls",
    "to": 264
  }, {
    "from": 47,
    "label": "calls",
    "to": 264
  }, {
    "from": 47,
    "label": "calls",
    "to": 264
  }, {
    "from": 47,
    "label": "calls",
    "to": 264
  }, {
    "from": 66,
    "label": "calls",
    "to": 264
  }, {
    "from": 70,
    "label": "calls",
    "to": 264
  }, {
    "from": 70,
    "label": "calls",
    "to": 264
  }, {
    "from": 70,
    "label": "calls",
    "to": 264
  }, {
    "from": 70,
    "label": "calls",
    "to": 264
  }, {
    "from": 70,
    "label": "calls",
    "to": 264
  }, {
    "from": 110,
    "label": "calls",
    "to": 264
  }, {
    "from": 128,
    "label": "calls",
    "to": 264
  }, {
    "from": 110,
    "label": "calls",
    "to": 238
  }, {
    "from": 128,
    "label": "calls",
    "to": 238
  }, {
    "from": 110,
    "label": "calls",
    "to": 122
  }, {
    "from": 128,
    "label": "calls",
    "to": 122
  }, {
    "from": 10,
    "label": "calls",
    "to": 22
  }, {
    "from": 10,
    "label": "calls",
    "to": 22
  }, {
    "from": 70,
    "label": "calls",
    "to": 265
  }, {
    "from": 20,
    "label": "calls",
    "to": 252
  }, {
    "from": 66,
    "label": "calls",
    "to": 266
  }, {
    "from": 70,
    "label": "calls",
    "to": 254
  }, {
    "from": 42,
    "label": "calls",
    "to": 268
  }, {
    "from": 110,
    "label": "calls",
    "to": 244
  }, {
    "from": 140,
    "label": "calls",
    "to": 244
  }, {
    "from": 145,
    "label": "calls",
    "to": 244
  }, {
    "from": 151,
    "label": "calls",
    "to": 244
  }, {
    "from": 110,
    "label": "calls",
    "to": 245
  }, {
    "from": 104,
    "label": "calls",
    "to": 271
  }, {
    "from": 110,
    "label": "calls",
    "to": 269
  }, {
    "from": 128,
    "label": "calls",
    "to": 269
  }, {
    "from": 29,
    "label": "calls",
    "to": 246
  }, {
    "from": 97,
    "label": "calls",
    "to": 270
  }, {
    "from": 47,
    "label": "calls",
    "to": 257
  }, {
    "from": 22,
    "label": "calls",
    "to": 247
  }, {
    "from": 88,
    "label": "calls",
    "to": 248
  }, {
    "from": 24,
    "label": "calls",
    "to": 273
  }, {
    "from": 29,
    "label": "calls",
    "to": 274
  }, {
    "from": 151,
    "label": "calls",
    "to": 275
  }, {
    "from": 1,
    "label": "contains",
    "to": 229
  }, {
    "from": 229,
    "label": "declares",
    "to": 10
  }, {
    "from": 229,
    "label": "declares",
    "to": 20
  }, {
    "from": 229,
    "label": "declares",
    "to": 22
  }, {
    "from": 229,
    "label": "declares",
    "to": 24
  }, {
    "from": 229,
    "label": "declares",
    "to": 29
  }, {
    "from": 229,
    "label": "declares",
    "to": 42
  }, {
    "from": 229,
    "label": "declares",
    "to": 44
  }, {
    "from": 229,
    "label": "declares",
    "to": 47
  }, {
    "from": 229,
    "label": "declares",
    "to": 66
  }, {
    "from": 229,
    "label": "declares",
    "to": 70
  }, {
    "from": 229,
    "label": "declares",
    "to": 81
  }, {
    "from": 229,
    "label": "declares",
    "to": 83
  }, {
    "from": 229,
    "label": "declares",
    "to": 85
  }, {
    "from": 229,
    "label": "declares",
    "to": 88
  }, {
    "from": 229,
    "label": "declares",
    "to": 91
  }, {
    "from": 229,
    "label": "declares",
    "to": 97
  }, {
    "from": 229,
    "label": "declares",
    "to": 104
  }, {
    "from": 229,
    "label": "declares",
    "to": 106
  }, {
    "from": 229,
    "label": "declares",
    "to": 110
  }, {
    "from": 229,
    "label": "declares",
    "to": 122
  }, {
    "from": 229,
    "label": "declares",
    "to": 124
  }, {
    "from": 229,
    "label": "declares",
    "to": 126
  }, {
    "from": 229,
    "label": "declares",
    "to": 128
  }, {
    "from": 229,
    "label": "declares",
    "to": 134
  }, {
    "from": 229,
    "label": "declares",
    "to": 136
  }, {
    "from": 229,
    "label": "declares",
    "to": 138
  }, {
    "from": 229,
    "label": "declares",
    "to": 140
  }, {
    "from": 229,
    "label": "declares",
    "to": 145
  }, {
    "from": 229,
    "label": "declares",
    "to": 151
  }, {
    "from": 229,
    "label": "declares",
    "to": 155
  }, {
    "from": 229,
    "label": "declares",
    "to": 160
  }, {
    "from": 229,
    "label": "declares",
    "to": 166
  }, {
    "from": 229,
    "label": "declares",
    "to": 177
  }, {
    "from": 229,
    "label": "declares",
    "to": 181
  }, {
    "from": 229,
    "label": "declares",
    "to": 183
  }, {
    "from": 229,
    "label": "declares",
    "to": 185
  }, {
    "from": 229,
    "label": "declares",
    "to": 187
  }, {
    "from": 229,
    "label": "declares",
    "to": 189
  }, {
    "from": 229,
    "label": "declares",
    "to": 191
  }, {
    "from": 229,
    "label": "declares",
    "to": 193
  }, {
    "from": 229,
    "label": "declares",
    "to": 195
  }, {
    "from": 229,
    "label": "declares",
    "to": 197
  }, {
    "from": 229,
    "label": "declares",
    "to": 199
  }, {
    "from": 229,
    "label": "declares",
    "to": 201
  }, {
    "from": 229,
    "label": "declares",
    "to": 203
  }, {
    "from": 229,
    "label": "declares",
    "to": 204
  }, {
    "from": 229,
    "label": "declares",
    "to": 205
  }, {
    "from": 229,
    "label": "declares",
    "to": 207
  }, {
    "from": 229,
    "label": "declares",
    "to": 209
  }, {
    "from": 229,
    "label": "declares",
    "to": 211
  }, {
    "from": 229,
    "label": "declares",
    "to": 213
  }, {
    "from": 229,
    "label": "declares",
    "to": 215
  }, {
    "from": 229,
    "label": "declares",
    "to": 217
  }, {
    "from": 229,
    "label": "declares",
    "to": 219
  }, {
    "from": 229,
    "label": "declares",
    "to": 221
  }, {
    "from": 229,
    "label": "declares",
    "to": 223
  }, {
    "from": 229,
    "label": "declares",
    "to": 225
  }, {
    "from": 229,
    "label": "declares",
    "to": 227
  }, {
    "from": 1,
    "label": "contains",
    "to": 276
  }, {
    "from": 1,
    "label": "contains",
    "to": 277
  }, {
    "from": 276,
    "label": "initializes",
    "to": 278
  }, {
    "from": 278,
    "label": "assigns",
    "to": 279
  }, {
    "from": 276,
    "label": "initializes",
    "to": 280
  }, {
    "from": 280,
    "label": "assigns",
    "to": 281
  }, {
    "from": 276,
    "label": "initializes",
    "to": 282
  }, {
    "from": 282,
    "label": "assigns",
    "to": 283
  }, {
    "from": 276,
    "label": "initializes",
    "to": 284
  }, {
    "from": 284,
    "label": "assigns",
    "to": 285
  }, {
    "from": 276,
    "label": "initializes",
    "to": 286
  }, {
    "from": 286,
    "label": "assigns",
    "to": 287
  }, {
    "from": 276,
    "label": "initializes",
    "to": 288
  }, {
    "from": 288,
    "label": "assigns",
    "to": 289
  }, {
    "from": 276,
    "label": "initializes",
    "to": 290
  }, {
    "from": 290,
    "label": "assigns",
    "to": 291
  }, {
    "from": 276,
    "label": "initializes",
    "to": 292
  }, {
    "from": 292,
    "label": "assigns",
    "to": 293
  }, {
    "from": 276,
    "label": "initializes",
    "to": 294
  }, {
    "from": 294,
    "label": "assigns",
    "to": 295
  }, {
    "from": 276,
    "label": "initializes",
    "to": 296
  }, {
    "from": 296,
    "label": "assigns",
    "to": 297
  }, {
    "from": 276,
    "label": "initializes",
    "to": 298
  }, {
    "from": 298,
    "label": "assigns",
    "to": 299
  }, {
    "from": 276,
    "label": "initializes",
    "to": 300
  }, {
    "from": 300,
    "label": "assigns",
    "to": 301
  }, {
    "from": 276,
    "label": "initializes",
    "to": 302
  }, {
    "from": 302,
    "label": "assigns",
    "to": 303
  }, {
    "from": 277,
    "label": "initializes",
    "to": 304
  }, {
    "from": 304,
    "label": "requires",
    "to": 305
  }, {
    "from": 277,
    "label": "initializes",
    "to": 306
  }, {
    "from": 306,
    "label": "requires",
    "to": 9
  }, {
    "from": 277,
    "label": "initializes",
    "to": 306
  }, {
    "from": 306,
    "label": "requires",
    "to": 4
  }, {
    "from": 277,
    "label": "initializes",
    "to": 306
  }, {
    "from": 306,
    "label": "requires",
    "to": 8
  }, {
    "from": 277,
    "label": "initializes",
    "to": 306
  }, {
    "from": 306,
    "label": "requires",
    "to": 7
  }, {
    "from": 307,
    "label": "initializes",
    "to": 306
  }, {
    "from": 306,
    "label": "requires",
    "to": 2
  }, {
    "from": 307,
    "label": "initializes",
    "to": 306
  }, {
    "from": 306,
    "label": "requires",
    "to": 3
  }, {
    "from": 307,
    "label": "initializes",
    "to": 306
  }, {
    "from": 306,
    "label": "requires",
    "to": 8
  }, {
    "from": 308,
    "label": "initializes",
    "to": 306
  }, {
    "from": 306,
    "label": "requires",
    "to": 3
  }, {
    "from": 308,
    "label": "initializes",
    "to": 306
  }, {
    "from": 306,
    "label": "requires",
    "to": 9
  }, {
    "from": 308,
    "label": "initializes",
    "to": 306
  }, {
    "from": 306,
    "label": "requires",
    "to": 3
  }, {
    "from": 308,
    "label": "initializes",
    "to": 306
  }, {
    "from": 306,
    "label": "requires",
    "to": 232
  }, {
    "from": 308,
    "label": "initializes",
    "to": 306
  }, {
    "from": 306,
    "label": "requires",
    "to": 233
  }, {
    "from": 309,
    "label": "initializes",
    "to": 306
  }, {
    "from": 306,
    "label": "requires",
    "to": 1
  }, {
    "from": 309,
    "label": "initializes",
    "to": 306
  }, {
    "from": 306,
    "label": "requires",
    "to": 4
  }, {
    "from": 309,
    "label": "initializes",
    "to": 306
  }, {
    "from": 306,
    "label": "requires",
    "to": 8
  }, {
    "from": 309,
    "label": "initializes",
    "to": 306
  }, {
    "from": 306,
    "label": "requires",
    "to": 5
  }, {
    "from": 310,
    "label": "initializes",
    "to": 306
  }, {
    "from": 306,
    "label": "requires",
    "to": 1
  }, {
    "from": 310,
    "label": "initializes",
    "to": 306
  }, {
    "from": 306,
    "label": "requires",
    "to": 6
  }, {
    "from": 311,
    "label": "initializes",
    "to": 306
  }, {
    "from": 306,
    "label": "requires",
    "to": 1
  }, {
    "from": 311,
    "label": "initializes",
    "to": 306
  }, {
    "from": 306,
    "label": "requires",
    "to": 9
  }, {
    "from": 312,
    "label": "initializes",
    "to": 306
  }, {
    "from": 306,
    "label": "requires",
    "to": 9
  }, {
    "from": 313,
    "label": "initializes",
    "to": 306
  }, {
    "from": 306,
    "label": "requires",
    "to": 5
  }, {
    "from": 314,
    "label": "initializes",
    "to": 306
  }, {
    "from": 306,
    "label": "requires",
    "to": 4
  }, {
    "from": 315,
    "label": "initializes",
    "to": 306
  }, {
    "from": 306,
    "label": "requires",
    "to": 4
  }, {
    "from": 316,
    "label": "initializes",
    "to": 306
  }, {
    "from": 306,
    "label": "requires",
    "to": 1
  }, {
    "from": 316,
    "label": "initializes",
    "to": 306
  }, {
    "from": 306,
    "label": "requires",
    "to": 8
  }, {
    "from": 317,
    "label": "initializes",
    "to": 306
  }, {
    "from": 306,
    "label": "requires",
    "to": 318
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "base",
    "type": "module"
  }, {
    "id": 2,
    "text": "debug_init",
    "type": "module"
  }, {
    "id": 3,
    "text": "io_ext",
    "type": "module"
  }, {
    "id": 4,
    "text": "list",
    "type": "module"
  }, {
    "id": 5,
    "text": "object",
    "type": "module"
  }, {
    "id": 6,
    "text": "package_ext",
    "type": "module"
  }, {
    "id": 7,
    "text": "strbuf",
    "type": "module"
  }, {
    "id": 8,
    "text": "string_ext",
    "type": "module"
  }, {
    "id": 9,
    "text": "table_ext",
    "type": "module"
  }, {
    "id": 10,
    "text": "function _G.require_version (module, min, too_big, pattern)\r\n  local function version_to_list (v)\r\n    return list.new (string.split (v, \"%.\"))\r\n  end\r\n  local function module_version (module, pattern)\r\n    return version_to_list (string.match (module.version or module._VERSION,\r\n                                          pattern or \".*[%.%d]+\"))\r\n  end\r\n  local m = require (module)\r\n  if min then\r\n    assert (module_version (m, pattern) >= version_to_list (min))\r\n  end\r\n  if too_big then\r\n    assert (module_version (m, pattern) < version_to_list (too_big))\r\n  end\r\n  return m\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "local function version_to_list (v)\r\n    return list.new (string.split (v, \"%.\"))\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 12,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 13,
    "text": "local function module_version (module, pattern)\r\n    return version_to_list (string.match (module.version or module._VERSION,\r\n                                          pattern or \".*[%.%d]+\"))\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 14,
    "text": "local m = require (module)",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "if min then\r\n    assert (module_version (m, pattern) >= version_to_list (min))\r\n  end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "assert (module_version (m, pattern) >= version_to_list (min))",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "if too_big then\r\n    assert (module_version (m, pattern) < version_to_list (too_big))\r\n  end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "assert (module_version (m, pattern) < version_to_list (too_big))",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "local function version_to_list (v)\r\n    return list.new (string.split (v, \"%.\"))\r\n  end",
    "type": "function"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "local function module_version (module, pattern)\r\n    return version_to_list (string.match (module.version or module._VERSION,\r\n                                          pattern or \".*[%.%d]+\"))\r\n  end",
    "type": "function"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function _G.metamethod (x, n)\r\n  local _, m = pcall (function (x)\r\n                        return getmetatable (x)[n]\r\n                      end,\r\n                      x)\r\n  if type (m) ~= \"function\" then\r\n    m = nil\r\n  end\r\n  return m\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "local _, m = pcall (function (x)\r\n                        return getmetatable (x)[n]\r\n                      end,\r\n                      x)",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "if type (m) ~= \"function\" then\r\n    m = nil\r\n  end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "m = nil",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function _G.render (x, open, close, elem, pair, sep, roots)\r\n  local function stop_roots (x)\r\n    return roots[x] or render (x, open, close, elem, pair, sep, table.clone (roots))\r\n  end\r\n  roots = roots or {}\r\n  if type (x) ~= \"table\" or metamethod (x, \"__tostring\") then\r\n    return elem (x)\r\n  else\r\n    local s = strbuf.new ()\r\n    s = s .. open (x)\r\n    roots[x] = elem (x)\r\n    local i, v = nil, nil\r\n    for j, w in pairs (x) do\r\n      s = s .. sep (x, i, v, j, w) .. pair (x, j, w, stop_roots (j), stop_roots (w))\r\n      i, v = j, w\r\n    end\r\n    s = s .. sep(x, i, v, nil, nil) .. close (x)\r\n    return s:tostring ()\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "local function stop_roots (x)\r\n    return roots[x] or render (x, open, close, elem, pair, sep, table.clone (roots))\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 31,
    "text": "roots = roots or {}",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "if type (x) ~= \"table\" or metamethod (x, \"__tostring\") then\r\n    return elem (x)\r\n  else\r\n    local s = strbuf.new ()\r\n    s = s .. open (x)\r\n    roots[x] = elem (x)\r\n    local i, v = nil, nil\r\n    for j, w in pairs (x) do\r\n      s = s .. sep (x, i, v, j, w) .. pair (x, j, w, stop_roots (j), stop_roots (w))\r\n      i, v = j, w\r\n    end\r\n    s = s .. sep(x, i, v, nil, nil) .. close (x)\r\n    return s:tostring ()\r\n  end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "local s = strbuf.new ()",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "s = s .. open (x)",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "roots[x] = elem (x)",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "local i, v = nil, nil",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "for j, w in pairs (x) do\r\n      s = s .. sep (x, i, v, j, w) .. pair (x, j, w, stop_roots (j), stop_roots (w))\r\n      i, v = j, w\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 38,
    "text": "s = s .. sep (x, i, v, j, w) .. pair (x, j, w, stop_roots (j), stop_roots (w))",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "i, v = j, w",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "s = s .. sep(x, i, v, nil, nil) .. close (x)",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "local function stop_roots (x)\r\n    return roots[x] or render (x, open, close, elem, pair, sep, table.clone (roots))\r\n  end",
    "type": "function"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function _G.tostring (x)\r\n  return render (x,\r\n                 function () return \"{\" end,\r\n                 function () return \"}\" end,\r\n                 _tostring,\r\n                 function (t, _, _, i, v)\r\n                   return i .. \"=\" .. v\r\n                 end,\r\n                 function (_, i, _, j)\r\n                   if i and j then\r\n                     return \",\"\r\n                   end\r\n                   return \"\"\r\n                 end)\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "if i and j then\r\n                     return \",\"\r\n                   end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function _G.prettytostring (t, indent, spacing)\r\n  indent = indent or \"\\t\"\r\n  spacing = spacing or \"\"\r\n  return render (t,\r\n                 function ()\r\n                   local s = spacing .. \"{\"\r\n                   spacing = spacing .. indent\r\n                   return s\r\n                 end,\r\n                 function ()\r\n                   spacing = string.gsub (spacing, indent .. \"$\", \"\")\r\n                   return spacing .. \"}\"\r\n                 end,\r\n                 function (x)\r\n                   if type (x) == \"string\" then\r\n                     return string.format (\"%q\", x)\r\n                   else\r\n                     return tostring (x)\r\n                   end\r\n                 end,\r\n                 function (x, i, v, is, vs)\r\n                   local s = spacing .. \"[\"\r\n                   if type (i) == \"table\" then\r\n                     s = s .. \"\\n\"\r\n                   end\r\n                   s = s .. is\r\n                   if type (i) == \"table\" then\r\n                     s = s .. \"\\n\"\r\n                   end\r\n                   s = s .. \"] =\"\r\n                   if type (v) == \"table\" then\r\n                     s = s .. \"\\n\"\r\n                   else\r\n                     s = s .. \" \"\r\n                   end\r\n                   s = s .. vs\r\n                   return s\r\n                 end,\r\n                 function (_, i)\r\n                   local s = \"\\n\"\r\n                   if i then\r\n                     s = \",\" .. s\r\n                   end\r\n                   return s\r\n                 end)\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "indent = indent or \"\\t\"",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "spacing = spacing or \"\"",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "local s = spacing .. \"{\"",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "spacing = spacing .. indent",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "spacing = string.gsub (spacing, indent .. \"$\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "if type (x) == \"string\" then\r\n                     return string.format (\"%q\", x)\r\n                   else\r\n                     return tostring (x)\r\n                   end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "local s = spacing .. \"[\"",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "if type (i) == \"table\" then\r\n                     s = s .. \"\\n\"\r\n                   end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "s = s .. \"\\n\"",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "s = s .. is",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "s = s .. \"] =\"",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "if type (v) == \"table\" then\r\n                     s = s .. \"\\n\"\r\n                   else\r\n                     s = s .. \" \"\r\n                   end",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "s = s .. \" \"",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "s = s .. vs",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "local s = \"\\n\"",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "if i then\r\n                     s = \",\" .. s\r\n                   end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "s = \",\" .. s",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function _G.totable (x)\r\n  local m = metamethod (x, \"__totable\")\r\n  if m then\r\n    return m (x)\r\n  elseif type (x) == \"table\" then\r\n    return x\r\n  else\r\n    return nil\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "local m = metamethod (x, \"__totable\")",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "if m then\r\n    return m (x)\r\n  elseif type (x) == \"table\" then\r\n    return x\r\n  else\r\n    return nil\r\n  end",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function _G.pickle (x)\r\n  if type (x) == \"string\" then\r\n    return string.format (\"%q\", x)\r\n  elseif type (x) == \"number\" or type (x) == \"boolean\" or\r\n    type (x) == \"nil\" then\r\n    return tostring (x)\r\n  else\r\n    x = totable (x) or x\r\n    if type (x) == \"table\" then\r\n      local s, sep = \"{\", \"\"\r\n      for i, v in pairs (x) do\r\n        s = s .. sep .. \"[\" .. pickle (i) .. \"]=\" .. pickle (v)\r\n        sep = \",\"\r\n      end\r\n      s = s .. \"}\"\r\n      return s\r\n    else\r\n      die (\"cannot pickle \" .. tostring (x))\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "if type (x) == \"string\" then\r\n    return string.format (\"%q\", x)\r\n  elseif type (x) == \"number\" or type (x) == \"boolean\" or\r\n    type (x) == \"nil\" then\r\n    return tostring (x)\r\n  else\r\n    x = totable (x) or x\r\n    if type (x) == \"table\" then\r\n      local s, sep = \"{\", \"\"\r\n      for i, v in pairs (x) do\r\n        s = s .. sep .. \"[\" .. pickle (i) .. \"]=\" .. pickle (v)\r\n        sep = \",\"\r\n      end\r\n      s = s .. \"}\"\r\n      return s\r\n    else\r\n      die (\"cannot pickle \" .. tostring (x))\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 72,
    "text": "x = totable (x) or x",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "if type (x) == \"table\" then\r\n      local s, sep = \"{\", \"\"\r\n      for i, v in pairs (x) do\r\n        s = s .. sep .. \"[\" .. pickle (i) .. \"]=\" .. pickle (v)\r\n        sep = \",\"\r\n      end\r\n      s = s .. \"}\"\r\n      return s\r\n    else\r\n      die (\"cannot pickle \" .. tostring (x))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "local s, sep = \"{\", \"\"",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "for i, v in pairs (x) do\r\n        s = s .. sep .. \"[\" .. pickle (i) .. \"]=\" .. pickle (v)\r\n        sep = \",\"\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 76,
    "text": "s = s .. sep .. \"[\" .. pickle (i) .. \"]=\" .. pickle (v)",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "sep = \",\"",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "s = s .. \"}\"",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "die (\"cannot pickle \" .. tostring (x))",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "function _G.id (...)\r\n  return ...\r\nend",
    "type": "function"
  }, {
    "id": 82,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 83,
    "text": "function _G.pack (...)\r\n  return {...}\r\nend",
    "type": "function"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "function _G.bind (f, ...)\r\n  local fix = {...}\r\n  return function (...)\r\n           return f (unpack (list.concat (fix, {...})))\r\n         end\r\nend",
    "type": "function"
  }, {
    "id": 86,
    "text": "local fix = {...}",
    "type": "statement:localassign"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "function _G.curry (f, n)\r\n  if n <= 1 then\r\n    return f\r\n  else\r\n    return function (x)\r\n             return curry (bind (f, x), n - 1)\r\n           end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 89,
    "text": "if n <= 1 then\r\n    return f\r\n  else\r\n    return function (x)\r\n             return curry (bind (f, x), n - 1)\r\n           end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 90,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 91,
    "text": "function _G.compose (...)\r\n  local arg = {...}\r\n  local fns, n = arg, #arg\r\n  return function (...)\r\n           local arg = {...}\r\n           for i = n, 1, -1 do\r\n             arg = {fns[i] (unpack (arg))}\r\n           end\r\n           return unpack (arg)\r\n         end\r\nend",
    "type": "function"
  }, {
    "id": 92,
    "text": "local arg = {...}",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "local fns, n = arg, #arg",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "for i = n, 1, -1 do\r\n             arg = {fns[i] (unpack (arg))}\r\n           end",
    "type": "statement:numericfor"
  }, {
    "id": 95,
    "text": "arg = {fns[i] (unpack (arg))}",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "function _G.memoize (fn)\r\n  return setmetatable ({}, {\r\n    __call = function (self, ...)\r\n               local k = tostring ({...})\r\n               local v = self[k]\r\n               if v == nil then\r\n                 v = fn (...)\r\n                 self[k] = v\r\n               end\r\n               return v\r\n             end\r\n  })\r\nend",
    "type": "function"
  }, {
    "id": 98,
    "text": "local k = tostring ({...})",
    "type": "statement:localassign"
  }, {
    "id": 99,
    "text": "local v = self[k]",
    "type": "statement:localassign"
  }, {
    "id": 100,
    "text": "if v == nil then\r\n                 v = fn (...)\r\n                 self[k] = v\r\n               end",
    "type": "statement:if"
  }, {
    "id": 101,
    "text": "v = fn (...)",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "self[k] = v",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 104,
    "text": "function _G.eval (s)\r\n  return loadstring (\"return \" .. s)()\r\nend",
    "type": "function"
  }, {
    "id": 105,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 106,
    "text": "function _G.ripairs (t)\r\n  return function (t, n)\r\n           n = n - 1\r\n           if n > 0 then\r\n             return n, t[n]\r\n           end\r\n         end,\r\n  t, #t + 1\r\nend",
    "type": "function"
  }, {
    "id": 107,
    "text": "n = n - 1",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "if n > 0 then\r\n             return n, t[n]\r\n           end",
    "type": "statement:if"
  }, {
    "id": 109,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 110,
    "text": "local function _nodes (it, tr)\r\n  local p = {}\r\n  local function visit (n)\r\n    if type (n) == \"table\" then\r\n      coroutine.yield (\"branch\", p, n)\r\n      for i, v in it (n) do\r\n        table.insert (p, i)\r\n        visit (v)\r\n        table.remove (p)\r\n      end\r\n      coroutine.yield (\"join\", p, n)\r\n    else\r\n      coroutine.yield (\"leaf\", p, n)\r\n    end\r\n  end\r\n  return coroutine.wrap (visit), tr\r\nend",
    "type": "function"
  }, {
    "id": 111,
    "text": "local p = {}",
    "type": "statement:localassign"
  }, {
    "id": 112,
    "text": "local function visit (n)\r\n    if type (n) == \"table\" then\r\n      coroutine.yield (\"branch\", p, n)\r\n      for i, v in it (n) do\r\n        table.insert (p, i)\r\n        visit (v)\r\n        table.remove (p)\r\n      end\r\n      coroutine.yield (\"join\", p, n)\r\n    else\r\n      coroutine.yield (\"leaf\", p, n)\r\n    end\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 113,
    "text": "if type (n) == \"table\" then\r\n      coroutine.yield (\"branch\", p, n)\r\n      for i, v in it (n) do\r\n        table.insert (p, i)\r\n        visit (v)\r\n        table.remove (p)\r\n      end\r\n      coroutine.yield (\"join\", p, n)\r\n    else\r\n      coroutine.yield (\"leaf\", p, n)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 114,
    "text": "coroutine.yield (\"branch\", p, n)",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "for i, v in it (n) do\r\n        table.insert (p, i)\r\n        visit (v)\r\n        table.remove (p)\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 116,
    "text": "table.insert (p, i)",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "visit (v)",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "table.remove (p)",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "coroutine.yield (\"join\", p, n)",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "coroutine.yield (\"leaf\", p, n)",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 122,
    "text": "local function visit (n)\r\n    if type (n) == \"table\" then\r\n      coroutine.yield (\"branch\", p, n)\r\n      for i, v in it (n) do\r\n        table.insert (p, i)\r\n        visit (v)\r\n        table.remove (p)\r\n      end\r\n      coroutine.yield (\"join\", p, n)\r\n    else\r\n      coroutine.yield (\"leaf\", p, n)\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 123,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 124,
    "text": "function _G.nodes (tr)\r\n  return _nodes (pairs, tr)\r\nend",
    "type": "function"
  }, {
    "id": 125,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 126,
    "text": "function _G.inodes (tr)\r\n  return _nodes (ipairs, tr)\r\nend",
    "type": "function"
  }, {
    "id": 127,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 128,
    "text": "local function _leaves (it, tr)\r\n  local function visit (n)\r\n    if type (n) == \"table\" then\r\n      for _, v in it (n) do\r\n        visit (v)\r\n      end\r\n    else\r\n      coroutine.yield (n)\r\n    end\r\n  end\r\n  return coroutine.wrap (visit), tr\r\nend",
    "type": "function"
  }, {
    "id": 129,
    "text": "local function visit (n)\r\n    if type (n) == \"table\" then\r\n      for _, v in it (n) do\r\n        visit (v)\r\n      end\r\n    else\r\n      coroutine.yield (n)\r\n    end\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 130,
    "text": "if type (n) == \"table\" then\r\n      for _, v in it (n) do\r\n        visit (v)\r\n      end\r\n    else\r\n      coroutine.yield (n)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 131,
    "text": "for _, v in it (n) do\r\n        visit (v)\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 132,
    "text": "coroutine.yield (n)",
    "type": "statement:functioncall"
  }, {
    "id": 133,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 134,
    "text": "local function visit (n)\r\n    if type (n) == \"table\" then\r\n      for _, v in it (n) do\r\n        visit (v)\r\n      end\r\n    else\r\n      coroutine.yield (n)\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 135,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 136,
    "text": "function _G.ileaves (tr)\r\n  return _leaves (ipairs, tr)\r\nend",
    "type": "function"
  }, {
    "id": 137,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 138,
    "text": "function _G.leaves (tr)\r\n  return _leaves (pairs, tr)\r\nend",
    "type": "function"
  }, {
    "id": 139,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 140,
    "text": "function _G.collect (i, ...)\r\n  local t = {}\r\n  for e in i (...) do\r\n    table.insert (t, e)\r\n  end\r\n  return t\r\nend",
    "type": "function"
  }, {
    "id": 141,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 142,
    "text": "for e in i (...) do\r\n    table.insert (t, e)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 143,
    "text": "table.insert (t, e)",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 145,
    "text": "function _G.map (f, i, ...)\r\n  local t = {}\r\n  for e in i (...) do\r\n    local r = f (e)\r\n    if r then\r\n      table.insert (t, r)\r\n    end\r\n  end\r\n  return t\r\nend",
    "type": "function"
  }, {
    "id": 146,
    "text": "for e in i (...) do\r\n    local r = f (e)\r\n    if r then\r\n      table.insert (t, r)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 147,
    "text": "local r = f (e)",
    "type": "statement:localassign"
  }, {
    "id": 148,
    "text": "if r then\r\n      table.insert (t, r)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 149,
    "text": "table.insert (t, r)",
    "type": "statement:functioncall"
  }, {
    "id": 150,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 151,
    "text": "function _G.filter (p, i, ...)\r\n  local t = {}\r\n  for e in i (...) do\r\n    if p (e) then\r\n      table.insert (t, e)\r\n    end\r\n  end\r\n  return t\r\nend",
    "type": "function"
  }, {
    "id": 152,
    "text": "for e in i (...) do\r\n    if p (e) then\r\n      table.insert (t, e)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 153,
    "text": "if p (e) then\r\n      table.insert (t, e)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 154,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 155,
    "text": "function _G.fold (f, d, i, ...)\r\n  local r = d\r\n  for e in i (...) do\r\n    r = f (r, e)\r\n  end\r\n  return r\r\nend",
    "type": "function"
  }, {
    "id": 156,
    "text": "local r = d",
    "type": "statement:localassign"
  }, {
    "id": 157,
    "text": "for e in i (...) do\r\n    r = f (r, e)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 158,
    "text": "r = f (r, e)",
    "type": "statement:assign"
  }, {
    "id": 159,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 160,
    "text": "function _G.assert (v, f, ...)\r\n  if not v then\r\n    if f == nil then\r\n      f = \"\"\r\n    end\r\n    error (string.format (f, ...))\r\n  end\r\n  return v\r\nend",
    "type": "function"
  }, {
    "id": 161,
    "text": "if not v then\r\n    if f == nil then\r\n      f = \"\"\r\n    end\r\n    error (string.format (f, ...))\r\n  end",
    "type": "statement:if"
  }, {
    "id": 162,
    "text": "if f == nil then\r\n      f = \"\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 163,
    "text": "f = \"\"",
    "type": "statement:assign"
  }, {
    "id": 164,
    "text": "error (string.format (f, ...))",
    "type": "statement:functioncall"
  }, {
    "id": 165,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 166,
    "text": "function _G.warn (...)\r\n  if prog.name then\r\n    io.stderr:write (prog.name .. \":\")\r\n  end\r\n  if prog.file then\r\n    io.stderr:write (prog.file .. \":\")\r\n  end\r\n  if prog.line then\r\n    io.stderr:write (tostring (prog.line) .. \":\")\r\n  end\r\n  if prog.name or prog.file or prog.line then\r\n    io.stderr:write (\" \")\r\n  end\r\n  io.writelines (io.stderr, string.format (...))\r\nend",
    "type": "function"
  }, {
    "id": 167,
    "text": "if prog.name then\r\n    io.stderr:write (prog.name .. \":\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 168,
    "text": "io.stderr:write (prog.name .. \":\")",
    "type": "statement:functioncall"
  }, {
    "id": 169,
    "text": "if prog.file then\r\n    io.stderr:write (prog.file .. \":\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 170,
    "text": "io.stderr:write (prog.file .. \":\")",
    "type": "statement:functioncall"
  }, {
    "id": 171,
    "text": "if prog.line then\r\n    io.stderr:write (tostring (prog.line) .. \":\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 172,
    "text": "io.stderr:write (tostring (prog.line) .. \":\")",
    "type": "statement:functioncall"
  }, {
    "id": 173,
    "text": "if prog.name or prog.file or prog.line then\r\n    io.stderr:write (\" \")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 174,
    "text": "io.stderr:write (\" \")",
    "type": "statement:functioncall"
  }, {
    "id": 175,
    "text": "io.writelines (io.stderr, string.format (...))",
    "type": "statement:functioncall"
  }, {
    "id": 176,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 177,
    "text": "function _G.die (...)\r\n  warn (unpack (arg))\r\n  error ()\r\nend",
    "type": "function"
  }, {
    "id": 178,
    "text": "warn (unpack (arg))",
    "type": "statement:functioncall"
  }, {
    "id": 179,
    "text": "error ()",
    "type": "statement:functioncall"
  }, {
    "id": 180,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 181,
    "text": "function (t, s)\r\n  return t[s]\r\nend",
    "type": "function"
  }, {
    "id": 182,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 183,
    "text": "function (a, b)\r\n  return a + b\r\nend",
    "type": "function"
  }, {
    "id": 184,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 185,
    "text": "function (a, b)\r\n  return a - b\r\nend",
    "type": "function"
  }, {
    "id": 186,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 187,
    "text": "function (a, b)\r\n  return a * b\r\nend",
    "type": "function"
  }, {
    "id": 188,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 189,
    "text": "function (a, b)\r\n  return a / b\r\nend",
    "type": "function"
  }, {
    "id": 190,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 191,
    "text": "function (a, b)\r\n  return a and b\r\nend",
    "type": "function"
  }, {
    "id": 192,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 193,
    "text": "function (a, b)\r\n  return a or b\r\nend",
    "type": "function"
  }, {
    "id": 194,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 195,
    "text": "function (a)\r\n  return not a\r\nend",
    "type": "function"
  }, {
    "id": 196,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 197,
    "text": "function (a, b)\r\n  return a == b\r\nend",
    "type": "function"
  }, {
    "id": 198,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 199,
    "text": "function (a, b)\r\n  return a ~= b\r\nend",
    "type": "function"
  }, {
    "id": 200,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 201,
    "text": "function (x)\r\n                        return getmetatable (x)[n]\r\n                      end",
    "type": "function"
  }, {
    "id": 202,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 203,
    "text": "function () return \"{\" end",
    "type": "function"
  }, {
    "id": 204,
    "text": "function () return \"}\" end",
    "type": "function"
  }, {
    "id": 205,
    "text": "function (t, _, _, i, v)\r\n                   return i .. \"=\" .. v\r\n                 end",
    "type": "function"
  }, {
    "id": 206,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 207,
    "text": "function (_, i, _, j)\r\n                   if i and j then\r\n                     return \",\"\r\n                   end\r\n                   return \"\"\r\n                 end",
    "type": "function"
  }, {
    "id": 208,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 209,
    "text": "function ()\r\n                   local s = spacing .. \"{\"\r\n                   spacing = spacing .. indent\r\n                   return s\r\n                 end",
    "type": "function"
  }, {
    "id": 210,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 211,
    "text": "function ()\r\n                   spacing = string.gsub (spacing, indent .. \"$\", \"\")\r\n                   return spacing .. \"}\"\r\n                 end",
    "type": "function"
  }, {
    "id": 212,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 213,
    "text": "function (x)\r\n                   if type (x) == \"string\" then\r\n                     return string.format (\"%q\", x)\r\n                   else\r\n                     return tostring (x)\r\n                   end\r\n                 end",
    "type": "function"
  }, {
    "id": 214,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 215,
    "text": "function (x, i, v, is, vs)\r\n                   local s = spacing .. \"[\"\r\n                   if type (i) == \"table\" then\r\n                     s = s .. \"\\n\"\r\n                   end\r\n                   s = s .. is\r\n                   if type (i) == \"table\" then\r\n                     s = s .. \"\\n\"\r\n                   end\r\n                   s = s .. \"] =\"\r\n                   if type (v) == \"table\" then\r\n                     s = s .. \"\\n\"\r\n                   else\r\n                     s = s .. \" \"\r\n                   end\r\n                   s = s .. vs\r\n                   return s\r\n                 end",
    "type": "function"
  }, {
    "id": 216,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 217,
    "text": "function (_, i)\r\n                   local s = \"\\n\"\r\n                   if i then\r\n                     s = \",\" .. s\r\n                   end\r\n                   return s\r\n                 end",
    "type": "function"
  }, {
    "id": 218,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 219,
    "text": "function (...)\r\n           return f (unpack (list.concat (fix, {...})))\r\n         end",
    "type": "function"
  }, {
    "id": 220,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 221,
    "text": "function (x)\r\n             return curry (bind (f, x), n - 1)\r\n           end",
    "type": "function"
  }, {
    "id": 222,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 223,
    "text": "function (...)\r\n           local arg = {...}\r\n           for i = n, 1, -1 do\r\n             arg = {fns[i] (unpack (arg))}\r\n           end\r\n           return unpack (arg)\r\n         end",
    "type": "function"
  }, {
    "id": 224,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 225,
    "text": "function (self, ...)\r\n               local k = tostring ({...})\r\n               local v = self[k]\r\n               if v == nil then\r\n                 v = fn (...)\r\n                 self[k] = v\r\n               end\r\n               return v\r\n             end",
    "type": "function"
  }, {
    "id": 226,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 227,
    "text": "function (t, n)\r\n           n = n - 1\r\n           if n > 0 then\r\n             return n, t[n]\r\n           end\r\n         end",
    "type": "function"
  }, {
    "id": 228,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 229,
    "text": "",
    "type": "function container"
  }, {
    "id": 230,
    "text": "function concat (...)\r\n  local r = {}\r\n  for l in elems ({...}) do\r\n    for v in elems (l) do\r\n      table.insert (r, v)\r\n    end\r\n  end\r\n  return r\r\nend",
    "type": "function"
  }, {
    "id": 231,
    "text": "function new ()\r\n  return setmetatable ({}, metatable)\r\nend",
    "type": "function"
  }, {
    "id": 232,
    "text": "lfs",
    "type": "module"
  }, {
    "id": 233,
    "text": "posix",
    "type": "module"
  }, {
    "id": 234,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 235,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 236,
    "text": "warn",
    "type": "global function"
  }, {
    "id": 237,
    "text": "fn",
    "type": "global function"
  }, {
    "id": 238,
    "text": "wrap",
    "type": "global function"
  }, {
    "id": 239,
    "text": "sep",
    "type": "global function"
  }, {
    "id": 240,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 241,
    "text": "module",
    "type": "global function"
  }, {
    "id": 242,
    "text": "yield",
    "type": "global function"
  }, {
    "id": 243,
    "text": "metamethod",
    "type": "global function"
  }, {
    "id": 244,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 245,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 246,
    "text": "close",
    "type": "global function"
  }, {
    "id": 247,
    "text": "match",
    "type": "global function"
  }, {
    "id": 248,
    "text": "bind",
    "type": "global function"
  }, {
    "id": 249,
    "text": "fns[i]",
    "type": "global function"
  }, {
    "id": 250,
    "text": "format",
    "type": "global function"
  }, {
    "id": 251,
    "text": "render",
    "type": "global function"
  }, {
    "id": 252,
    "text": "split",
    "type": "global function"
  }, {
    "id": 253,
    "text": "pickle",
    "type": "global function"
  }, {
    "id": 254,
    "text": "die",
    "type": "global function"
  }, {
    "id": 255,
    "text": "elem",
    "type": "global function"
  }, {
    "id": 256,
    "text": "curry",
    "type": "global function"
  }, {
    "id": 257,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 258,
    "text": "writelines",
    "type": "global function"
  }, {
    "id": 259,
    "text": "i",
    "type": "global function"
  }, {
    "id": 260,
    "text": "f",
    "type": "global function"
  }, {
    "id": 261,
    "text": "open",
    "type": "global function"
  }, {
    "id": 262,
    "text": "error",
    "type": "global function"
  }, {
    "id": 263,
    "text": "require",
    "type": "global function"
  }, {
    "id": 264,
    "text": "type",
    "type": "global function"
  }, {
    "id": 265,
    "text": "totable",
    "type": "global function"
  }, {
    "id": 266,
    "text": "m",
    "type": "global function"
  }, {
    "id": 267,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 268,
    "text": "clone",
    "type": "global function"
  }, {
    "id": 269,
    "text": "it",
    "type": "global function"
  }, {
    "id": 270,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 271,
    "text": "loadstring",
    "type": "global function"
  }, {
    "id": 272,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 273,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 274,
    "text": "pair",
    "type": "global function"
  }, {
    "id": 275,
    "text": "p",
    "type": "global function"
  }, {
    "id": 276,
    "text": "",
    "type": "variable container"
  }, {
    "id": 277,
    "text": "",
    "type": "require container"
  }, {
    "id": 278,
    "text": "",
    "type": "local variable"
  }, {
    "id": 279,
    "text": "",
    "type": "n/a"
  }, {
    "id": 280,
    "text": "",
    "type": "global variable"
  }, {
    "id": 281,
    "text": "",
    "type": "n/a"
  }, {
    "id": 282,
    "text": "",
    "type": "global variable"
  }, {
    "id": 283,
    "text": "",
    "type": "n/a"
  }, {
    "id": 284,
    "text": "",
    "type": "global variable"
  }, {
    "id": 285,
    "text": "",
    "type": "n/a"
  }, {
    "id": 286,
    "text": "",
    "type": "global variable"
  }, {
    "id": 287,
    "text": "",
    "type": "n/a"
  }, {
    "id": 288,
    "text": "",
    "type": "global variable"
  }, {
    "id": 289,
    "text": "",
    "type": "n/a"
  }, {
    "id": 290,
    "text": "",
    "type": "global variable"
  }, {
    "id": 291,
    "text": "",
    "type": "n/a"
  }, {
    "id": 292,
    "text": "",
    "type": "global variable"
  }, {
    "id": 293,
    "text": "",
    "type": "n/a"
  }, {
    "id": 294,
    "text": "",
    "type": "global variable"
  }, {
    "id": 295,
    "text": "",
    "type": "n/a"
  }, {
    "id": 296,
    "text": "",
    "type": "global variable"
  }, {
    "id": 297,
    "text": "",
    "type": "n/a"
  }, {
    "id": 298,
    "text": "",
    "type": "global variable"
  }, {
    "id": 299,
    "text": "",
    "type": "n/a"
  }, {
    "id": 300,
    "text": "",
    "type": "global variable"
  }, {
    "id": 301,
    "text": "",
    "type": "n/a"
  }, {
    "id": 302,
    "text": "",
    "type": "global variable"
  }, {
    "id": 303,
    "text": "",
    "type": "n/a"
  }, {
    "id": 304,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 305,
    "text": "(module)",
    "type": "module"
  }, {
    "id": 306,
    "text": "",
    "type": "global variable"
  }, {
    "id": 307,
    "text": "",
    "type": "require container"
  }, {
    "id": 308,
    "text": "",
    "type": "require container"
  }, {
    "id": 309,
    "text": "",
    "type": "require container"
  }, {
    "id": 310,
    "text": "",
    "type": "require container"
  }, {
    "id": 311,
    "text": "",
    "type": "require container"
  }, {
    "id": 312,
    "text": "",
    "type": "require container"
  }, {
    "id": 313,
    "text": "",
    "type": "require container"
  }, {
    "id": 314,
    "text": "",
    "type": "require container"
  }, {
    "id": 315,
    "text": "",
    "type": "require container"
  }, {
    "id": 316,
    "text": "",
    "type": "require container"
  }, {
    "id": 317,
    "text": "",
    "type": "require container"
  }, {
    "id": 318,
    "text": "std",
    "type": "module"
  } ]
}