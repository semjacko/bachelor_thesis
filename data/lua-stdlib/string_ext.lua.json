{
  "_filename": "string_ext.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-stdlib/src/string_ext.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 4
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 4
  }, {
    "from": 10,
    "label": "has",
    "to": 4
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 4
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 4
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 4
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 18,
    "label": "has",
    "to": 4
  }, {
    "from": 18,
    "label": "has",
    "to": 4
  }, {
    "from": 18,
    "label": "has",
    "to": 4
  }, {
    "from": 18,
    "label": "has",
    "to": 4
  }, {
    "from": 18,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 4
  }, {
    "from": 23,
    "label": "has",
    "to": 4
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 4
  }, {
    "from": 26,
    "label": "has",
    "to": 4
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 30,
    "label": "has",
    "to": 34
  }, {
    "from": 30,
    "label": "has",
    "to": 35
  }, {
    "from": 30,
    "label": "has",
    "to": 36
  }, {
    "from": 30,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 37,
    "label": "has",
    "to": 41
  }, {
    "from": 37,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 37,
    "label": "has",
    "to": 44
  }, {
    "from": 37,
    "label": "has",
    "to": 45
  }, {
    "from": 37,
    "label": "has",
    "to": 46
  }, {
    "from": 37,
    "label": "has",
    "to": 47
  }, {
    "from": 30,
    "label": "has",
    "to": 4
  }, {
    "from": 30,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 49,
    "label": "has",
    "to": 53
  }, {
    "from": 49,
    "label": "has",
    "to": 54
  }, {
    "from": 49,
    "label": "has",
    "to": 55
  }, {
    "from": 49,
    "label": "has",
    "to": 56
  }, {
    "from": 49,
    "label": "has",
    "to": 57
  }, {
    "from": 49,
    "label": "has",
    "to": 4
  }, {
    "from": 49,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 4
  }, {
    "from": 59,
    "label": "has",
    "to": 4
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 4
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 64,
    "label": "has",
    "to": 67
  }, {
    "from": 64,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 64,
    "label": "has",
    "to": 4
  }, {
    "from": 64,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 66
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 74,
    "label": "has",
    "to": 4
  }, {
    "from": 74,
    "label": "has",
    "to": 78
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 4
  }, {
    "from": 79,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 80
  }, {
    "from": 82,
    "label": "has",
    "to": 4
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 4
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 4
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 49,
    "label": "calls",
    "to": 23
  }, {
    "from": 26,
    "label": "calls",
    "to": 104
  }, {
    "from": 30,
    "label": "calls",
    "to": 89
  }, {
    "from": 84,
    "label": "calls",
    "to": 82
  }, {
    "from": 88,
    "label": "calls",
    "to": 90
  }, {
    "from": 88,
    "label": "calls",
    "to": 90
  }, {
    "from": 49,
    "label": "calls",
    "to": 90
  }, {
    "from": 49,
    "label": "calls",
    "to": 90
  }, {
    "from": 49,
    "label": "calls",
    "to": 103
  }, {
    "from": 49,
    "label": "calls",
    "to": 103
  }, {
    "from": 64,
    "label": "calls",
    "to": 59
  }, {
    "from": 10,
    "label": "calls",
    "to": 94
  }, {
    "from": 88,
    "label": "calls",
    "to": 106
  }, {
    "from": 26,
    "label": "calls",
    "to": 106
  }, {
    "from": 26,
    "label": "calls",
    "to": 106
  }, {
    "from": 30,
    "label": "calls",
    "to": 106
  }, {
    "from": 30,
    "label": "calls",
    "to": 106
  }, {
    "from": 30,
    "label": "calls",
    "to": 106
  }, {
    "from": 30,
    "label": "calls",
    "to": 106
  }, {
    "from": 74,
    "label": "calls",
    "to": 106
  }, {
    "from": 23,
    "label": "calls",
    "to": 102
  }, {
    "from": 10,
    "label": "calls",
    "to": 101
  }, {
    "from": 12,
    "label": "calls",
    "to": 101
  }, {
    "from": 14,
    "label": "calls",
    "to": 101
  }, {
    "from": 16,
    "label": "calls",
    "to": 101
  }, {
    "from": 79,
    "label": "calls",
    "to": 101
  }, {
    "from": 82,
    "label": "calls",
    "to": 101
  }, {
    "from": 74,
    "label": "calls",
    "to": 64
  }, {
    "from": 30,
    "label": "calls",
    "to": 100
  }, {
    "from": 88,
    "label": "calls",
    "to": 108
  }, {
    "from": 26,
    "label": "calls",
    "to": 91
  }, {
    "from": 30,
    "label": "calls",
    "to": 91
  }, {
    "from": 30,
    "label": "calls",
    "to": 91
  }, {
    "from": 88,
    "label": "calls",
    "to": 107
  }, {
    "from": 88,
    "label": "calls",
    "to": 107
  }, {
    "from": 88,
    "label": "calls",
    "to": 99
  }, {
    "from": 18,
    "label": "calls",
    "to": 98
  }, {
    "from": 18,
    "label": "calls",
    "to": 98
  }, {
    "from": 49,
    "label": "calls",
    "to": 97
  }, {
    "from": 59,
    "label": "calls",
    "to": 93
  }, {
    "from": 88,
    "label": "calls",
    "to": 92
  }, {
    "from": 64,
    "label": "calls",
    "to": 95
  }, {
    "from": 74,
    "label": "calls",
    "to": 95
  }, {
    "from": 84,
    "label": "calls",
    "to": 79
  }, {
    "from": 74,
    "label": "calls",
    "to": 96
  }, {
    "from": 74,
    "label": "calls",
    "to": 105
  }, {
    "from": 59,
    "label": "calls",
    "to": 62
  }, {
    "from": 1,
    "label": "contains",
    "to": 88
  }, {
    "from": 88,
    "label": "declares",
    "to": 2
  }, {
    "from": 88,
    "label": "declares",
    "to": 6
  }, {
    "from": 88,
    "label": "declares",
    "to": 8
  }, {
    "from": 88,
    "label": "declares",
    "to": 10
  }, {
    "from": 88,
    "label": "declares",
    "to": 12
  }, {
    "from": 88,
    "label": "declares",
    "to": 14
  }, {
    "from": 88,
    "label": "declares",
    "to": 16
  }, {
    "from": 88,
    "label": "declares",
    "to": 18
  }, {
    "from": 88,
    "label": "declares",
    "to": 23
  }, {
    "from": 88,
    "label": "declares",
    "to": 26
  }, {
    "from": 88,
    "label": "declares",
    "to": 30
  }, {
    "from": 88,
    "label": "declares",
    "to": 49
  }, {
    "from": 88,
    "label": "declares",
    "to": 59
  }, {
    "from": 88,
    "label": "declares",
    "to": 62
  }, {
    "from": 88,
    "label": "declares",
    "to": 64
  }, {
    "from": 88,
    "label": "declares",
    "to": 74
  }, {
    "from": 88,
    "label": "declares",
    "to": 79
  }, {
    "from": 88,
    "label": "declares",
    "to": 82
  }, {
    "from": 88,
    "label": "declares",
    "to": 84
  }, {
    "from": 88,
    "label": "declares",
    "to": 86
  }, {
    "from": 109,
    "label": "requires",
    "to": 1
  }, {
    "from": 109,
    "label": "requires",
    "to": 1
  }, {
    "from": 109,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 110
  }, {
    "from": 1,
    "label": "contains",
    "to": 111
  }, {
    "from": 110,
    "label": "initializes",
    "to": 112
  }, {
    "from": 112,
    "label": "assigns",
    "to": 113
  }, {
    "from": 110,
    "label": "initializes",
    "to": 114
  }, {
    "from": 114,
    "label": "assigns",
    "to": 115
  }, {
    "from": 110,
    "label": "initializes",
    "to": 116
  }, {
    "from": 116,
    "label": "assigns",
    "to": 117
  }, {
    "from": 110,
    "label": "initializes",
    "to": 118
  }, {
    "from": 118,
    "label": "assigns",
    "to": 119
  }, {
    "from": 110,
    "label": "initializes",
    "to": 120
  }, {
    "from": 120,
    "label": "assigns",
    "to": 121
  }, {
    "from": 109,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "string_ext",
    "type": "module"
  }, {
    "id": 2,
    "text": "function (s, i)\r\n  if type (i) == \"number\" then\r\n    return sub (s, i, i)\r\n    -- Fall back to old metamethods\r\n  elseif type (old__index) == \"function\" then\r\n    return old__index (s, i)\r\n  else\r\n    return old__index[i]\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "if type (i) == \"number\" then\r\n    return sub (s, i, i)\r\n    -- Fall back to old metamethods\r\n  elseif type (old__index) == \"function\" then\r\n    return old__index (s, i)\r\n  else\r\n    return old__index[i]\r\n  end",
    "type": "statement:if"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "function (s, c)\r\n  return s .. c\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function (s, o)\r\n  return tostring (s) .. tostring (o)\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function caps (s)\r\n  return (gsub (s, \"(%w)([%w]*)\",\r\n                function (l, ls)\r\n                  return upper (l) .. ls\r\n                end))\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function chomp (s)\r\n  return (gsub (s, \"\\n$\", \"\"))\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function escapePattern (s)\r\n  return (gsub (s, \"(%W)\", \"%%%1\"))\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function escapeShell (s)\r\n  return (gsub (s, \"([ %(%)%\\\\%[%]\\\"'])\", \"\\\\%1\"))\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function ordinalSuffix (n)\r\n  n = math.mod (n, 100)\r\n  local d = math.mod (n, 10)\r\n  if d == 1 and n ~= 11 then\r\n    return \"st\"\r\n  elseif d == 2 and n ~= 12 then\r\n    return \"nd\"\r\n  elseif d == 3 and n ~= 13 then\r\n    return \"rd\"\r\n  else\r\n    return \"th\"\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "n = math.mod (n, 100)",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "local d = math.mod (n, 10)",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "if d == 1 and n ~= 11 then\r\n    return \"st\"\r\n  elseif d == 2 and n ~= 12 then\r\n    return \"nd\"\r\n  elseif d == 3 and n ~= 13 then\r\n    return \"rd\"\r\n  else\r\n    return \"th\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function format (f, arg1, ...)\r\n  if arg1 == nil then\r\n    return f\r\n  else\r\n    return _format (f, arg1, ...)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "if arg1 == nil then\r\n    return f\r\n  else\r\n    return _format (f, arg1, ...)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function pad (s, w, p)\r\n  p = rep (p or \" \", math.abs (w))\r\n  if w < 0 then\r\n    return sub (p .. s, w)\r\n  end\r\n  return sub (s .. p, 1, w)\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "p = rep (p or \" \", math.abs (w))",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "if w < 0 then\r\n    return sub (p .. s, w)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function wrap (s, w, ind, ind1)\r\n  w = w or 78\r\n  ind = ind or 0\r\n  ind1 = ind1 or ind\r\n  assert (ind1 < w and ind < w,\r\n          \"the indents must be less than the line width\")\r\n  s = rep (\" \", ind1) .. s\r\n  local lstart, len = 1, len (s)\r\n  while len - lstart > w - ind do\r\n    local i = lstart + w - ind\r\n    while i > lstart and sub (s, i, i) ~= \" \" do\r\n      i = i - 1\r\n    end\r\n    local j = i\r\n    while j > lstart and sub (s, j, j) == \" \" do\r\n      j = j - 1\r\n    end\r\n    s = sub (s, 1, j) .. \"\\n\" .. rep (\" \", ind) ..\r\n      sub (s, i + 1, -1)\r\n    local change = ind + 1 - (i - j)\r\n    lstart = j + change\r\n    len = len + change\r\n  end\r\n  return s\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "w = w or 78",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "ind = ind or 0",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "ind1 = ind1 or ind",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "assert (ind1 < w and ind < w,\r\n          \"the indents must be less than the line width\")",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "s = rep (\" \", ind1) .. s",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "local lstart, len = 1, len (s)",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "while len - lstart > w - ind do\r\n    local i = lstart + w - ind\r\n    while i > lstart and sub (s, i, i) ~= \" \" do\r\n      i = i - 1\r\n    end\r\n    local j = i\r\n    while j > lstart and sub (s, j, j) == \" \" do\r\n      j = j - 1\r\n    end\r\n    s = sub (s, 1, j) .. \"\\n\" .. rep (\" \", ind) ..\r\n      sub (s, i + 1, -1)\r\n    local change = ind + 1 - (i - j)\r\n    lstart = j + change\r\n    len = len + change\r\n  end",
    "type": "statement:while"
  }, {
    "id": 38,
    "text": "local i = lstart + w - ind",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "while i > lstart and sub (s, i, i) ~= \" \" do\r\n      i = i - 1\r\n    end",
    "type": "statement:while"
  }, {
    "id": 40,
    "text": "i = i - 1",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "local j = i",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "while j > lstart and sub (s, j, j) == \" \" do\r\n      j = j - 1\r\n    end",
    "type": "statement:while"
  }, {
    "id": 43,
    "text": "j = j - 1",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "s = sub (s, 1, j) .. \"\\n\" .. rep (\" \", ind) ..\r\n      sub (s, i + 1, -1)",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "local change = ind + 1 - (i - j)",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "lstart = j + change",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "len = len + change",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function numbertosi (n)\r\n  local SIprefix = {\r\n    [-8] = \"y\", [-7] = \"z\", [-6] = \"a\", [-5] = \"f\",\r\n    [-4] = \"p\", [-3] = \"n\", [-2] = \"mu\", [-1] = \"m\",\r\n    [0] = \"\", [1] = \"k\", [2] = \"M\", [3] = \"G\",\r\n    [4] = \"T\", [5] = \"P\", [6] = \"E\", [7] = \"Z\",\r\n    [8] = \"Y\"\r\n  }\r\n  local t = format(\"% #.2e\", n)\r\n  local _, _, m, e = t:find(\".(.%...)e(.+)\")\r\n  local man, exp = tonumber (m), tonumber (e)\r\n  local siexp = math.floor (exp / 3)\r\n  local shift = exp - siexp * 3\r\n  local s = SIprefix[siexp] or \"e\" .. tostring (siexp)\r\n  man = man * (10 ^ shift)\r\n  return tostring (man) .. s\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "local SIprefix = {\r\n    [-8] = \"y\", [-7] = \"z\", [-6] = \"a\", [-5] = \"f\",\r\n    [-4] = \"p\", [-3] = \"n\", [-2] = \"mu\", [-1] = \"m\",\r\n    [0] = \"\", [1] = \"k\", [2] = \"M\", [3] = \"G\",\r\n    [4] = \"T\", [5] = \"P\", [6] = \"E\", [7] = \"Z\",\r\n    [8] = \"Y\"\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "local t = format(\"% #.2e\", n)",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "local _, _, m, e = t:find(\".(.%...)e(.+)\")",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "local man, exp = tonumber (m), tonumber (e)",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "local siexp = math.floor (exp / 3)",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "local shift = exp - siexp * 3",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "local s = SIprefix[siexp] or \"e\" .. tostring (siexp)",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "man = man * (10 ^ shift)",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function tfind (s, p, init, plain)\r\n  local function pack (from, to, ...)\r\n    return from, to, {...}\r\n  end\r\n  return pack (p.find (s, p, init, plain))\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "local function pack (from, to, ...)\r\n    return from, to, {...}\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "local function pack (from, to, ...)\r\n    return from, to, {...}\r\n  end",
    "type": "function"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "function finds (s, p, init, plain)\r\n  init = init or 1\r\n  local l = {}\r\n  local from, to, r\r\n  repeat\r\n    from, to, r = tfind (s, p, init, plain)\r\n    if from ~= nil then\r\n      table.insert (l, {from, to, capt = r})\r\n      init = to + 1\r\n    end\r\n  until not from\r\n  return l\r\nend",
    "type": "function"
  }, {
    "id": 65,
    "text": "init = init or 1",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "local l = {}",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "local from, to, r",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "repeat\r\n    from, to, r = tfind (s, p, init, plain)\r\n    if from ~= nil then\r\n      table.insert (l, {from, to, capt = r})\r\n      init = to + 1\r\n    end\r\n  until not from",
    "type": "statement:repeat"
  }, {
    "id": 69,
    "text": "from, to, r = tfind (s, p, init, plain)",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "if from ~= nil then\r\n      table.insert (l, {from, to, capt = r})\r\n      init = to + 1\r\n    end",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "table.insert (l, {from, to, capt = r})",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "init = to + 1",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function split (s, sep)\r\n  -- finds gets a list of {from, to, capt = {}} lists; we then\r\n  -- flatten the result, discarding the captures, and prepend 0 (1\r\n  -- before the first character) and append 0 (1 after the last\r\n  -- character), and then read off the result in pairs.\r\n  local pairs = list.concat ({0}, list.flatten (finds (s, sep)), {0})\r\n  local l = {}\r\n  for i = 1, #pairs, 2 do\r\n    table.insert (l, sub (s, pairs[i] + 1, pairs[i + 1] - 1))\r\n  end\r\n  return l\r\nend",
    "type": "function"
  }, {
    "id": 75,
    "text": "local pairs = list.concat ({0}, list.flatten (finds (s, sep)), {0})",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "for i = 1, #pairs, 2 do\r\n    table.insert (l, sub (s, pairs[i] + 1, pairs[i + 1] - 1))\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 77,
    "text": "table.insert (l, sub (s, pairs[i] + 1, pairs[i + 1] - 1))",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "function ltrim (s, r)\r\n  r = r or \"%s+\"\r\n  return (gsub (s, \"^\" .. r, \"\"))\r\nend",
    "type": "function"
  }, {
    "id": 80,
    "text": "r = r or \"%s+\"",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "function rtrim (s, r)\r\n  r = r or \"%s+\"\r\n  return (gsub (s, r .. \"$\", \"\"))\r\nend",
    "type": "function"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "function trim (s, r)\r\n  return rtrim (ltrim (s, r), r)\r\nend",
    "type": "function"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "function (l, ls)\r\n                  return upper (l) .. ls\r\n                end",
    "type": "function"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "",
    "type": "function container"
  }, {
    "id": 89,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 90,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 91,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 92,
    "text": "module",
    "type": "global function"
  }, {
    "id": 93,
    "text": "find",
    "type": "global function"
  }, {
    "id": 94,
    "text": "upper",
    "type": "global function"
  }, {
    "id": 95,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 96,
    "text": "flatten",
    "type": "global function"
  }, {
    "id": 97,
    "text": "floor",
    "type": "global function"
  }, {
    "id": 98,
    "text": "mod",
    "type": "global function"
  }, {
    "id": 99,
    "text": "old__index",
    "type": "global function"
  }, {
    "id": 100,
    "text": "len",
    "type": "global function"
  }, {
    "id": 101,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 102,
    "text": "_format",
    "type": "global function"
  }, {
    "id": 103,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 104,
    "text": "abs",
    "type": "global function"
  }, {
    "id": 105,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 106,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 107,
    "text": "type",
    "type": "global function"
  }, {
    "id": 108,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 109,
    "text": "",
    "type": "global variable"
  }, {
    "id": 110,
    "text": "",
    "type": "variable container"
  }, {
    "id": 111,
    "text": "",
    "type": "require container"
  }, {
    "id": 112,
    "text": "",
    "type": "local variable"
  }, {
    "id": 113,
    "text": "",
    "type": "n/a"
  }, {
    "id": 114,
    "text": "",
    "type": "local variable"
  }, {
    "id": 115,
    "text": "",
    "type": "n/a"
  }, {
    "id": 116,
    "text": "",
    "type": "global variable"
  }, {
    "id": 117,
    "text": "",
    "type": "n/a"
  }, {
    "id": 118,
    "text": "",
    "type": "global variable"
  }, {
    "id": 119,
    "text": "",
    "type": "n/a"
  }, {
    "id": 120,
    "text": "",
    "type": "global variable"
  }, {
    "id": 121,
    "text": "",
    "type": "n/a"
  } ]
}