{
  "_filename": "File.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-testmore/src/Test/Builder/Tester/File.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 18,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 24,
    "label": "has",
    "to": 9
  }, {
    "from": 24,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 25
  }, {
    "from": 30,
    "label": "has",
    "to": 26
  }, {
    "from": 30,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 30,
    "label": "has",
    "to": 9
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 11,
    "label": "calls",
    "to": 71
  }, {
    "from": 24,
    "label": "calls",
    "to": 71
  }, {
    "from": 30,
    "label": "calls",
    "to": 71
  }, {
    "from": 33,
    "label": "calls",
    "to": 72
  }, {
    "from": 33,
    "label": "calls",
    "to": 72
  }, {
    "from": 6,
    "label": "calls",
    "to": 73
  }, {
    "from": 1,
    "label": "contains",
    "to": 33
  }, {
    "from": 33,
    "label": "declares",
    "to": 6
  }, {
    "from": 33,
    "label": "declares",
    "to": 11
  }, {
    "from": 33,
    "label": "declares",
    "to": 14
  }, {
    "from": 33,
    "label": "declares",
    "to": 18
  }, {
    "from": 33,
    "label": "declares",
    "to": 24
  }, {
    "from": 33,
    "label": "declares",
    "to": 30
  }, {
    "from": 1,
    "label": "contains",
    "to": 75
  }, {
    "from": 1,
    "label": "contains",
    "to": 76
  }, {
    "from": 75,
    "label": "initializes",
    "to": 77
  }, {
    "from": 77,
    "label": "assigns",
    "to": 78
  }, {
    "from": 75,
    "label": "initializes",
    "to": 79
  }, {
    "from": 79,
    "label": "assigns",
    "to": 80
  }, {
    "from": 75,
    "label": "initializes",
    "to": 81
  }, {
    "from": 76,
    "label": "initializes",
    "to": 82
  }, {
    "from": 82,
    "label": "requires",
    "to": 70
  }, {
    "from": 76,
    "label": "initializes",
    "to": 83
  }, {
    "from": 83,
    "label": "requires",
    "to": 2
  }, {
    "from": 1,
    "label": "provides",
    "to": 84
  }, {
    "from": 74,
    "label": "represents",
    "to": 85
  }, {
    "from": 84,
    "label": "provides",
    "to": 85
  }, {
    "from": 87,
    "label": "requires",
    "to": 1
  }, {
    "from": 88,
    "label": "requires",
    "to": 1
  }, {
    "from": 79,
    "label": "contains",
    "to": 3
  }, {
    "from": 79,
    "label": "contains",
    "to": 4
  }, {
    "from": 79,
    "label": "contains",
    "to": 5
  }, {
    "from": 74,
    "label": "contains",
    "to": 6
  }, {
    "from": 79,
    "label": "contains",
    "to": 6
  }, {
    "from": 86,
    "label": "contains",
    "to": 6
  }, {
    "from": 89,
    "label": "contains",
    "to": 6
  }, {
    "from": 90,
    "label": "contains",
    "to": 6
  }, {
    "from": 79,
    "label": "contains",
    "to": 34
  }, {
    "from": 79,
    "label": "contains",
    "to": 35
  }, {
    "from": 79,
    "label": "contains",
    "to": 36
  }, {
    "from": 79,
    "label": "contains",
    "to": 37
  }, {
    "from": 79,
    "label": "contains",
    "to": 38
  }, {
    "from": 79,
    "label": "contains",
    "to": 39
  }, {
    "from": 79,
    "label": "contains",
    "to": 40
  }, {
    "from": 79,
    "label": "contains",
    "to": 41
  }, {
    "from": 79,
    "label": "contains",
    "to": 42
  }, {
    "from": 79,
    "label": "contains",
    "to": 43
  }, {
    "from": 79,
    "label": "contains",
    "to": 44
  }, {
    "from": 79,
    "label": "contains",
    "to": 45
  }, {
    "from": 79,
    "label": "contains",
    "to": 46
  }, {
    "from": 79,
    "label": "contains",
    "to": 47
  }, {
    "from": 79,
    "label": "contains",
    "to": 48
  }, {
    "from": 79,
    "label": "contains",
    "to": 49
  }, {
    "from": 79,
    "label": "contains",
    "to": 50
  }, {
    "from": 79,
    "label": "contains",
    "to": 51
  }, {
    "from": 79,
    "label": "contains",
    "to": 52
  }, {
    "from": 79,
    "label": "contains",
    "to": 53
  }, {
    "from": 79,
    "label": "contains",
    "to": 54
  }, {
    "from": 79,
    "label": "contains",
    "to": 55
  }, {
    "from": 79,
    "label": "contains",
    "to": 56
  }, {
    "from": 79,
    "label": "contains",
    "to": 57
  }, {
    "from": 79,
    "label": "contains",
    "to": 58
  }, {
    "from": 79,
    "label": "contains",
    "to": 59
  }, {
    "from": 79,
    "label": "contains",
    "to": 60
  }, {
    "from": 79,
    "label": "contains",
    "to": 61
  }, {
    "from": 79,
    "label": "contains",
    "to": 62
  }, {
    "from": 79,
    "label": "contains",
    "to": 63
  }, {
    "from": 79,
    "label": "contains",
    "to": 64
  }, {
    "from": 79,
    "label": "contains",
    "to": 65
  }, {
    "from": 79,
    "label": "contains",
    "to": 66
  }, {
    "from": 79,
    "label": "contains",
    "to": 67
  }, {
    "from": 79,
    "label": "contains",
    "to": 68
  }, {
    "from": 79,
    "label": "contains",
    "to": 69
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "File",
    "type": "module"
  }, {
    "id": 2,
    "text": "Builder",
    "type": "module"
  }, {
    "id": 3,
    "text": "function m.create ()\r\n    local tb = require 'Test.Builder'.create()\r\n    tb:output(io.tmpfile())\r\n    tb:failure_output(io.tmpfile())\r\n    tb:todo_output(io.tmpfile())\r\n\r\n    function tb:read (stream)\r\n        if     stream == 'out' then\r\n            local f = self:output()\r\n            f:seek 'set'\r\n            local out = f:read '*a'\r\n            f:close()\r\n            self:output(io.tmpfile())\r\n            return out\r\n        elseif stream == 'err' then\r\n            local f = self:failure_output()\r\n            f:seek 'set'\r\n            local out = f:read '*a'\r\n            f:close()\r\n            self:failure_output(io.tmpfile())\r\n            return out\r\n        elseif stream == 'todo' then\r\n            local f = self:todo_output()\r\n            f:seek 'set'\r\n            local out = f:read '*a'\r\n            f:close()\r\n            self:todo_output(io.tmpfile())\r\n            return out\r\n        else\r\n            self:output():close()\r\n            self:output(io.tmpfile())\r\n            self:failure_output():close()\r\n            self:failure_output(io.tmpfile())\r\n            self:todo_output():close()\r\n            self:todo_output(io.tmpfile())\r\n        end\r\n    end\r\n\r\n    return tb\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function m.init (sock)\r\n    tb:output(sock)\r\n    tb:failure_output(sock)\r\n    tb:todo_output(sock)\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function m.puts (sock, str)\r\n    assert(sock:send(str))\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function m.new (_type)\r\n    local o = setmetatable({ type = _type }, { __index = m })\r\n    o:reset()\r\n    return o\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "local o = setmetatable({ type = _type }, { __index = m })",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "o:reset()",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function m:write (...)\r\n    self.got = self.got .. tconcat({...})\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "self.got = self.got .. tconcat({...})",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function m:reset ()\r\n    self.got = ''\r\n    self.wanted = {}\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "self.got = ''",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "self.wanted = {}",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function m:expect (...)\r\n    local arg = {...}\r\n    local wanted = self.wanted\r\n    for i = 1, #arg do\r\n        wanted[#wanted+1] = arg[i]\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "local arg = {...}",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "local wanted = self.wanted",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "for i = 1, #arg do\r\n        wanted[#wanted+1] = arg[i]\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 22,
    "text": "wanted[#wanted+1] = arg[i]",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function m:check ()\r\n    local got = self.got\r\n    local wanted = tconcat(self.wanted, \"\\n\")\r\n    if wanted ~= '' then\r\n        wanted = wanted .. \"\\n\"\r\n    end\r\n    return got == wanted\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "local got = self.got",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "local wanted = tconcat(self.wanted, \"\\n\")",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "if wanted ~= '' then\r\n        wanted = wanted .. \"\\n\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "wanted = wanted .. \"\\n\"",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function m:complaint ()\r\n    local type = self.type\r\n    local got = self.got\r\n    local wanted = tconcat(self.wanted, \"\\n\")\r\n    if wanted ~= '' then\r\n        wanted = wanted .. \"\\n\"\r\n    end\r\n    return type .. \" is:\"\r\n     .. \"\\n\" .. got\r\n     .. \"\\nnot:\"\r\n     .. \"\\n\" .. wanted\r\n     .. \"\\nhas expected\"\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "local type = self.type",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "",
    "type": "function container"
  }, {
    "id": 34,
    "text": "function m.test_out (...)\r\n    if not testing then\r\n        _start_testing()\r\n    end\r\n    out:expect(...)\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "function m.test_err (...)\r\n    if not testing then\r\n        _start_testing()\r\n    end\r\n    err:expect(...)\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "function m.test_fail (offset)\r\n    offset = offset or 0\r\n    if not testing then\r\n        _start_testing()\r\n    end\r\n    local info = debug.getinfo(2)\r\n    local prog = info.short_src\r\n    local line = info.currentline + offset\r\n    err:expect(\"#     Failed test (\" .. prog .. \" at line \" .. line .. \")\")\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "function m.test_diag (...)\r\n    local arg = {...}\r\n    if not testing then\r\n        _start_testing()\r\n    end\r\n    for i = 1, #arg do\r\n        err:expect(\"# \" .. arg[i])\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "function m.test_test (args)\r\n    local mess\r\n    if type(args) == 'table' then\r\n        mess = args[1]\r\n    else\r\n        mess = args\r\n        args = {}\r\n    end\r\n\r\n    if not testing then\r\n        error \"Not testing.  You must declare output with a test function first.\"\r\n    end\r\n\r\n    -- okay, reconnect the test suite back to the saved handles\r\n    tb:output(original_output_handle)\r\n    tb:failure_output(original_failure_handle)\r\n    tb:todo_output(original_todo_handle)\r\n\r\n    -- restore the test no, etc, back to the original point\r\n    tb:current_test(testing_num)\r\n    testing = false\r\n\r\n    -- check the output we've stashed\r\n    local pass = (args.skip_out or out:check())\r\n             and (args.skip_err or err:check())\r\n    tb:ok(pass, mess)\r\n    if not pass then\r\n        -- print out the diagnostic information about why this\r\n        -- test failed\r\n        if not out:check() then\r\n            tb:diag(out:complaint())\r\n        end\r\n        if not err:check() then\r\n            tb:diag(err:complaint())\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "function m.line_num ()\r\n    return debug.getinfo(2).currentline\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "function m.puts (f, str)\r\n    f:write(str)\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "function m.create ()\r\n    local o = {\r\n        data = setmetatable({}, { __index = m }),\r\n    }\r\n    setmetatable(o, {\r\n        __index = function (t, k)\r\n                        return rawget(t, 'data')[k]\r\n                  end,\r\n        __newindex = function (t, k, v)\r\n                        rawget(o, 'data')[k] = v\r\n                  end,\r\n    })\r\n    o:reset()\r\n    return o\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "function m.new ()\r\n    test = test or m.create()\r\n    return test\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "function m.plan (arg)\r\n    tb:plan(arg)\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "function m.done_testing (num_tests)\r\n    tb:done_testing(num_tests)\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "function m.skip_all (reason)\r\n    tb:skip_all(reason)\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "function m.BAIL_OUT (reason)\r\n    tb:BAIL_OUT(reason)\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "function m.ok (test, name)\r\n    tb:ok(test, name)\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "function m.nok (test, name)\r\n    tb:ok(not test, name)\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "function m.is (got, expected, name)\r\n    local pass = got == expected\r\n    tb:ok(pass, name)\r\n    if not pass then\r\n        tb:diag(\"         got: \" .. tostring(got)\r\n           .. \"\\n    expected: \" .. tostring(expected))\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "function m.isnt (got, expected, name)\r\n    local pass = got ~= expected\r\n    tb:ok(pass, name)\r\n    if not pass then\r\n        tb:diag(\"         got: \" .. tostring(got)\r\n           .. \"\\n    expected: anything else\")\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "function m.like (got, pattern, name)\r\n    if type(pattern) ~= 'string' then\r\n        tb:ok(false, name)\r\n        tb:diag(\"pattern isn't a string : \" .. tostring(pattern))\r\n        return\r\n    end\r\n    got = tostring(got)\r\n    local pass = got:match(pattern)\r\n    tb:ok(pass, name)\r\n    if not pass then\r\n        tb:diag(\"                  '\" .. got .. \"'\"\r\n           .. \"\\n    doesn't match '\" .. pattern .. \"'\")\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 52,
    "text": "function m.unlike (got, pattern, name)\r\n    if type(pattern) ~= 'string' then\r\n        tb:ok(false, name)\r\n        tb:diag(\"pattern isn't a string : \" .. tostring(pattern))\r\n        return\r\n    end\r\n    got = tostring(got)\r\n    local pass = not got:match(pattern)\r\n    tb:ok(pass, name)\r\n    if not pass then\r\n        tb:diag(\"                  '\" .. got .. \"'\"\r\n           .. \"\\n          matches '\" .. pattern .. \"'\")\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "function m.cmp_ok (this, op, that, name)\r\n    local f = cmp[op]\r\n    if not f then\r\n        tb:ok(false, name)\r\n        tb:diag(\"unknown operator : \" .. tostring(op))\r\n        return\r\n    end\r\n    local pass = f(this, that)\r\n    tb:ok(pass, name)\r\n    if not pass then\r\n        tb:diag(\"    \" .. tostring(this)\r\n           .. \"\\n        \" .. op\r\n           .. \"\\n    \" .. tostring(that))\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "function m.type_ok (val, t, name)\r\n    if type(t) ~= 'string' then\r\n        tb:ok(false, name)\r\n        tb:diag(\"type isn't a string : \" .. tostring(t))\r\n        return\r\n    end\r\n    if type(val) == t then\r\n        tb:ok(true, name)\r\n    else\r\n        tb:ok(false, name)\r\n        tb:diag(\"    \" .. tostring(val) .. \" isn't a '\" .. t ..\"' it's a '\" .. type(val) .. \"'\")\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 55,
    "text": "function m.subtest (name, func)\r\n    tb:subtest(name, func)\r\nend",
    "type": "function"
  }, {
    "id": 56,
    "text": "function m.pass (name)\r\n    tb:ok(true, name)\r\nend",
    "type": "function"
  }, {
    "id": 57,
    "text": "function m.fail (name)\r\n    tb:ok(false, name)\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "function m.require_ok (mod)\r\n    local r, msg = pcall(require, mod)\r\n    tb:ok(r, \"require '\" .. tostring(mod) .. \"'\")\r\n    if not r then\r\n        tb:diag(\"    \" .. msg)\r\n    end\r\n    return r\r\nend",
    "type": "function"
  }, {
    "id": 59,
    "text": "function m.eq_array (got, expected, name)\r\n    if type(got) ~= 'table' then\r\n        tb:ok(false, name)\r\n        tb:diag(\"got value isn't a table : \" .. tostring(got))\r\n        return\r\n    elseif type(expected) ~= 'table' then\r\n        tb:ok(false, name)\r\n        tb:diag(\"expected value isn't a table : \" .. tostring(expected))\r\n        return\r\n    end\r\n    for i = 1, #expected do\r\n        local v = expected[i]\r\n        local val = got[i]\r\n        if val ~= v then\r\n            tb:ok(false, name)\r\n            tb:diag(\"    at index: \" .. tostring(i)\r\n               .. \"\\n         got: \" .. tostring(val)\r\n               .. \"\\n    expected: \" .. tostring(v))\r\n            return\r\n        end\r\n    end\r\n    local extra = #got - #expected\r\n    if extra ~= 0 then\r\n        tb:ok(false, name)\r\n        tb:diag(\"    \" .. tostring(extra) .. \" unexpected item(s)\")\r\n    else\r\n        tb:ok(true, name)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "function m.is_deeply (got, expected, name)\r\n    if type(got) ~= 'table' then\r\n        tb:ok(false, name)\r\n        tb:diag(\"got value isn't a table : \" .. tostring(got))\r\n        return\r\n    elseif type(expected) ~= 'table' then\r\n        tb:ok(false, name)\r\n        tb:diag(\"expected value isn't a table : \" .. tostring(expected))\r\n        return\r\n    end\r\n    local msg1\r\n    local msg2\r\n    local seen = {}\r\n\r\n    local function deep_eq (t1, t2, key_path)\r\n        if t1 == t2 or seen[t1] then\r\n            return true\r\n        end\r\n        seen[t1] = true\r\n        for k, v2 in pairs(t2) do\r\n            local v1 = t1[k]\r\n            if type(v1) == 'table' and type(v2) == 'table' then\r\n                local r = deep_eq(v1, v2, key_path .. \".\" .. tostring(k))\r\n                if not r then\r\n                    return false\r\n                end\r\n            else\r\n                if v1 ~= v2 then\r\n                    key_path = key_path .. \".\" .. tostring(k)\r\n                    msg1 = \"     got\" .. key_path .. \": \" .. tostring(v1)\r\n                    msg2 = \"expected\" .. key_path .. \": \" .. tostring(v2)\r\n                    return false\r\n                end\r\n            end\r\n        end\r\n        for k in pairs(t1) do\r\n            local v2 = t2[k]\r\n            if v2 == nil then\r\n                key_path = key_path .. \".\" .. tostring(k)\r\n                msg1 = \"     got\" .. key_path .. \": \" .. tostring(t1[k])\r\n                msg2 = \"expected\" .. key_path .. \": \" .. tostring(v2)\r\n                return false\r\n            end\r\n        end\r\n        return true\r\n    end -- deep_eq\r\n\r\n    local pass = deep_eq(got, expected, '')\r\n    tb:ok(pass, name)\r\n    if not pass then\r\n        tb:diag(\"    Tables begin differing at:\")\r\n        tb:diag(\"    \" .. msg1)\r\n        tb:diag(\"    \" .. msg2)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 61,
    "text": "function m.error_is (code, arg2, arg3, arg4)\r\n    local params, expected, name\r\n    if type(arg2) == 'table' then\r\n        params = arg2\r\n        expected = arg3\r\n        name = arg4\r\n    else\r\n        params = {}\r\n        expected = arg2\r\n        name = arg3\r\n    end\r\n    if type(code) == 'string' then\r\n        local msg\r\n        code, msg = loadstring(code)\r\n        if not code then\r\n            tb:ok(false, name)\r\n            tb:diag(\"    can't compile code :\"\r\n               .. \"\\n    \" .. msg)\r\n            return\r\n        end\r\n    end\r\n    local r, msg = pcall(code, unpack(params))\r\n    if r then\r\n        tb:ok(false, name)\r\n        tb:diag(\"    unexpected success\"\r\n           .. \"\\n    expected: \" .. tostring(expected))\r\n    else\r\n        local pass = msg == expected\r\n        tb:ok(pass, name)\r\n        if not pass then\r\n            tb:diag(\"         got: \" .. msg\r\n               .. \"\\n    expected: \" .. tostring(expected))\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "function m.error_like (code, arg2, arg3, arg4)\r\n    local params, pattern, name\r\n    if type(arg2) == 'table' then\r\n        params = arg2\r\n        pattern = arg3\r\n        name = arg4\r\n    else\r\n        params = {}\r\n        pattern = arg2\r\n        name = arg3\r\n    end\r\n    if type(code) == 'string' then\r\n        local msg\r\n        code, msg = loadstring(code)\r\n        if not code then\r\n            tb:ok(false, name)\r\n            tb:diag(\"    can't compile code :\"\r\n               .. \"\\n    \" .. msg)\r\n            return\r\n        end\r\n    end\r\n    local r, msg = pcall(code, unpack(params))\r\n    if r then\r\n        tb:ok(false, name)\r\n        tb:diag(\"    unexpected success\"\r\n           .. \"\\n    expected: \" .. tostring(pattern))\r\n    else\r\n        if type(pattern) ~= 'string' then\r\n            tb:ok(false, name)\r\n            tb:diag(\"pattern isn't a string : \" .. tostring(pattern))\r\n            return\r\n        end\r\n        local pass = msg:match(pattern)\r\n        tb:ok(pass, name)\r\n        if not pass then\r\n            tb:diag(\"                  '\" .. msg .. \"'\"\r\n               .. \"\\n    doesn't match '\" .. pattern .. \"'\")\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 63,
    "text": "function m.lives_ok (code, arg2, arg3)\r\n    local params, name\r\n    if type(arg2) == 'table' then\r\n        params = arg2\r\n        name = arg3\r\n    else\r\n        params = {}\r\n        name = arg2\r\n    end\r\n    if type(code) == 'string' then\r\n        local msg\r\n        code, msg = loadstring(code)\r\n        if not code then\r\n            tb:ok(false, name)\r\n            tb:diag(\"    can't compile code :\"\r\n               .. \"\\n    \" .. msg)\r\n            return\r\n        end\r\n    end\r\n    local r, msg = pcall(code, unpack(params))\r\n    tb:ok(r, name)\r\n    if not r then\r\n        tb:diag(\"    \" .. msg)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 64,
    "text": "function m.diag (msg)\r\n    tb:diag(msg)\r\nend",
    "type": "function"
  }, {
    "id": 65,
    "text": "function m.note (msg)\r\n    tb:note(msg)\r\nend",
    "type": "function"
  }, {
    "id": 66,
    "text": "function m.skip (reason, count)\r\n    count = count or 1\r\n    for i = 1, count do\r\n        tb:skip(reason)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "function m.todo_skip (reason, count)\r\n    count = count or 1\r\n    for i = 1, count do\r\n        tb:todo_skip(reason)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 68,
    "text": "function m.skip_rest (reason)\r\n    tb:skip_rest(reason)\r\nend",
    "type": "function"
  }, {
    "id": 69,
    "text": "function m.todo (reason, count)\r\n    tb:todo(reason, count)\r\nend",
    "type": "function"
  }, {
    "id": 70,
    "text": "table",
    "type": "module"
  }, {
    "id": 71,
    "text": "tconcat",
    "type": "global function"
  }, {
    "id": 72,
    "text": "require",
    "type": "global function"
  }, {
    "id": 73,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 74,
    "text": "",
    "type": "local variable"
  }, {
    "id": 75,
    "text": "",
    "type": "variable container"
  }, {
    "id": 76,
    "text": "",
    "type": "require container"
  }, {
    "id": 77,
    "text": "",
    "type": "local variable"
  }, {
    "id": 78,
    "text": "",
    "type": "n/a"
  }, {
    "id": 79,
    "text": "",
    "type": "local variable"
  }, {
    "id": 80,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 81,
    "text": "",
    "type": "global variable"
  }, {
    "id": 82,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 83,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 84,
    "text": "",
    "type": "interface container"
  }, {
    "id": 85,
    "text": "",
    "type": "interface"
  }, {
    "id": 86,
    "text": "",
    "type": "local variable"
  }, {
    "id": 87,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 88,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 89,
    "text": "",
    "type": "local variable"
  }, {
    "id": 90,
    "text": "",
    "type": "local variable"
  } ]
}