{
  "_filename": "document_metrics.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luametrics/src/metrics/captures/document_metrics.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 3,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 18,
    "label": "has",
    "to": 22
  }, {
    "from": 18,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 23,
    "label": "has",
    "to": 27
  }, {
    "from": 18,
    "label": "has",
    "to": 28
  }, {
    "from": 13,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 17
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 21
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 24
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 26
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 31,
    "label": "has",
    "to": 35
  }, {
    "from": 31,
    "label": "has",
    "to": 26
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 31,
    "label": "has",
    "to": 35
  }, {
    "from": 12,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 37,
    "label": "has",
    "to": 41
  }, {
    "from": 37,
    "label": "has",
    "to": 42
  }, {
    "from": 37,
    "label": "has",
    "to": 43
  }, {
    "from": 37,
    "label": "has",
    "to": 44
  }, {
    "from": 37,
    "label": "has",
    "to": 45
  }, {
    "from": 37,
    "label": "has",
    "to": 46
  }, {
    "from": 37,
    "label": "has",
    "to": 47
  }, {
    "from": 37,
    "label": "has",
    "to": 48
  }, {
    "from": 37,
    "label": "has",
    "to": 49
  }, {
    "from": 37,
    "label": "has",
    "to": 50
  }, {
    "from": 37,
    "label": "has",
    "to": 51
  }, {
    "from": 37,
    "label": "has",
    "to": 52
  }, {
    "from": 37,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 37,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 37,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 37,
    "label": "has",
    "to": 63
  }, {
    "from": 37,
    "label": "has",
    "to": 64
  }, {
    "from": 37,
    "label": "has",
    "to": 65
  }, {
    "from": 37,
    "label": "has",
    "to": 10
  }, {
    "from": 37,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 67,
    "label": "has",
    "to": 70
  }, {
    "from": 67,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 67,
    "label": "has",
    "to": 10
  }, {
    "from": 67,
    "label": "has",
    "to": 78
  }, {
    "from": 79,
    "label": "has",
    "to": 68
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 70
  }, {
    "from": 79,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 72
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 74
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 79,
    "label": "has",
    "to": 10
  }, {
    "from": 79,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 10
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 91,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 91,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 91,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 91,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 91,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 89,
    "label": "has",
    "to": 10
  }, {
    "from": 89,
    "label": "has",
    "to": 104
  }, {
    "from": 3,
    "label": "calls",
    "to": 111
  }, {
    "from": 12,
    "label": "calls",
    "to": 111
  }, {
    "from": 105,
    "label": "calls",
    "to": 107
  }, {
    "from": 105,
    "label": "calls",
    "to": 107
  }, {
    "from": 105,
    "label": "calls",
    "to": 110
  }, {
    "from": 105,
    "label": "calls",
    "to": 110
  }, {
    "from": 105,
    "label": "calls",
    "to": 110
  }, {
    "from": 105,
    "label": "calls",
    "to": 110
  }, {
    "from": 105,
    "label": "calls",
    "to": 110
  }, {
    "from": 12,
    "label": "calls",
    "to": 12
  }, {
    "from": 105,
    "label": "calls",
    "to": 12
  }, {
    "from": 105,
    "label": "calls",
    "to": 109
  }, {
    "from": 105,
    "label": "calls",
    "to": 112
  }, {
    "from": 105,
    "label": "calls",
    "to": 106
  }, {
    "from": 105,
    "label": "calls",
    "to": 106
  }, {
    "from": 105,
    "label": "calls",
    "to": 106
  }, {
    "from": 105,
    "label": "calls",
    "to": 106
  }, {
    "from": 3,
    "label": "calls",
    "to": 114
  }, {
    "from": 12,
    "label": "calls",
    "to": 114
  }, {
    "from": 105,
    "label": "calls",
    "to": 113
  }, {
    "from": 105,
    "label": "calls",
    "to": 113
  }, {
    "from": 12,
    "label": "calls",
    "to": 115
  }, {
    "from": 12,
    "label": "calls",
    "to": 115
  }, {
    "from": 12,
    "label": "calls",
    "to": 115
  }, {
    "from": 105,
    "label": "calls",
    "to": 115
  }, {
    "from": 105,
    "label": "calls",
    "to": 115
  }, {
    "from": 105,
    "label": "calls",
    "to": 115
  }, {
    "from": 105,
    "label": "calls",
    "to": 115
  }, {
    "from": 105,
    "label": "calls",
    "to": 115
  }, {
    "from": 105,
    "label": "calls",
    "to": 115
  }, {
    "from": 105,
    "label": "calls",
    "to": 115
  }, {
    "from": 105,
    "label": "calls",
    "to": 115
  }, {
    "from": 105,
    "label": "calls",
    "to": 115
  }, {
    "from": 105,
    "label": "calls",
    "to": 115
  }, {
    "from": 3,
    "label": "calls",
    "to": 3
  }, {
    "from": 12,
    "label": "calls",
    "to": 3
  }, {
    "from": 12,
    "label": "calls",
    "to": 3
  }, {
    "from": 1,
    "label": "contains",
    "to": 105
  }, {
    "from": 105,
    "label": "declares",
    "to": 3
  }, {
    "from": 105,
    "label": "declares",
    "to": 12
  }, {
    "from": 105,
    "label": "declares",
    "to": 37
  }, {
    "from": 105,
    "label": "declares",
    "to": 67
  }, {
    "from": 105,
    "label": "declares",
    "to": 79
  }, {
    "from": 105,
    "label": "declares",
    "to": 86
  }, {
    "from": 105,
    "label": "declares",
    "to": 89
  }, {
    "from": 1,
    "label": "contains",
    "to": 116
  }, {
    "from": 1,
    "label": "contains",
    "to": 117
  }, {
    "from": 116,
    "label": "initializes",
    "to": 118
  }, {
    "from": 118,
    "label": "assigns",
    "to": 119
  }, {
    "from": 116,
    "label": "initializes",
    "to": 120
  }, {
    "from": 120,
    "label": "assigns",
    "to": 121
  }, {
    "from": 116,
    "label": "initializes",
    "to": 122
  }, {
    "from": 122,
    "label": "assigns",
    "to": 123
  }, {
    "from": 116,
    "label": "initializes",
    "to": 124
  }, {
    "from": 124,
    "label": "assigns",
    "to": 125
  }, {
    "from": 116,
    "label": "initializes",
    "to": 126
  }, {
    "from": 126,
    "label": "assigns",
    "to": 127
  }, {
    "from": 116,
    "label": "initializes",
    "to": 128
  }, {
    "from": 128,
    "label": "assigns",
    "to": 129
  }, {
    "from": 116,
    "label": "initializes",
    "to": 130
  }, {
    "from": 130,
    "label": "assigns",
    "to": 131
  }, {
    "from": 116,
    "label": "initializes",
    "to": 132
  }, {
    "from": 132,
    "label": "assigns",
    "to": 133
  }, {
    "from": 116,
    "label": "initializes",
    "to": 134
  }, {
    "from": 134,
    "label": "assigns",
    "to": 135
  }, {
    "from": 116,
    "label": "initializes",
    "to": 136
  }, {
    "from": 136,
    "label": "assigns",
    "to": 137
  }, {
    "from": 116,
    "label": "initializes",
    "to": 138
  }, {
    "from": 138,
    "label": "assigns",
    "to": 139
  }, {
    "from": 116,
    "label": "initializes",
    "to": 140
  }, {
    "from": 140,
    "label": "assigns",
    "to": 141
  }, {
    "from": 116,
    "label": "initializes",
    "to": 142
  }, {
    "from": 142,
    "label": "assigns",
    "to": 143
  }, {
    "from": 116,
    "label": "initializes",
    "to": 144
  }, {
    "from": 144,
    "label": "assigns",
    "to": 145
  }, {
    "from": 116,
    "label": "initializes",
    "to": 146
  }, {
    "from": 146,
    "label": "assigns",
    "to": 147
  }, {
    "from": 116,
    "label": "initializes",
    "to": 148
  }, {
    "from": 148,
    "label": "assigns",
    "to": 149
  }, {
    "from": 116,
    "label": "initializes",
    "to": 150
  }, {
    "from": 150,
    "label": "assigns",
    "to": 151
  }, {
    "from": 116,
    "label": "initializes",
    "to": 152
  }, {
    "from": 152,
    "label": "assigns",
    "to": 153
  }, {
    "from": 116,
    "label": "initializes",
    "to": 154
  }, {
    "from": 154,
    "label": "assigns",
    "to": 155
  }, {
    "from": 117,
    "label": "initializes",
    "to": 156
  }, {
    "from": 156,
    "label": "requires",
    "to": 2
  }, {
    "from": 117,
    "label": "initializes",
    "to": 157
  }, {
    "from": 157,
    "label": "requires",
    "to": 108
  }, {
    "from": 158,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "document_metrics",
    "type": "module"
  }, {
    "id": 2,
    "text": "utils",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function searchFieldID(ast)\r\n\tlocal res=nil\r\n\tif type(ast.data) == \"table\"  then\r\n\t\tif(ast.key==\"ID\" and ast.parent.tag==\"_FieldID\")then\r\n\t\t \treturn ast.text \r\n\t\tend\r\n\t\tfor _,v in ipairs(ast.data) do\r\n\t\t\tres  = searchFieldID(v)\r\n\t\t\tif(res)then\r\n\t\t\t\treturn res\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local res=nil",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "if type(ast.data) == \"table\"  then\r\n\t\tif(ast.key==\"ID\" and ast.parent.tag==\"_FieldID\")then\r\n\t\t \treturn ast.text \r\n\t\tend\r\n\t\tfor _,v in ipairs(ast.data) do\r\n\t\t\tres  = searchFieldID(v)\r\n\t\t\tif(res)then\r\n\t\t\t\treturn res\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "if(ast.key==\"ID\" and ast.parent.tag==\"_FieldID\")then\r\n\t\t \treturn ast.text \r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "for _,v in ipairs(ast.data) do\r\n\t\t\tres  = searchFieldID(v)\r\n\t\t\tif(res)then\r\n\t\t\t\treturn res\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 8,
    "text": "res  = searchFieldID(v)",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "if(res)then\r\n\t\t\t\treturn res\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "local function travers(data,AST)\r\n\tif type(data.data) == \"table\" and #data.data > 0 then\r\n\t\tfor _,v in ipairs(data.data) do\r\n\t\t\ttravers(v,AST)\r\n\t\tend\r\n\t\r\n\t\tif data.key == \"Function\" then\r\n\r\n\t\t\tlocal name\r\n\t\t\tif(data.isGlobal==nil)then\r\n\r\n\t\t\t\tlocal whatisthis= data.parent.parent.parent\r\n\t\t\t\tif(whatisthis.tag==\"_FieldID\")then\t\r\n\t\t\t\t\tname=searchFieldID(whatisthis)\r\n\t\t\t\tend\r\n\t\t\t\tdata.isGlobal=nil\r\n\t\t\t\tif(name)then\r\n\t\t\t\t\tdata.name=name \r\n\t\t\t\t\tdata.fcntype=\"table-field\"\t\t\t\t\r\n\t\t\t\telse \r\n\t\t\t\t\tdata.name=\"#anonymous#\"\r\n\t\t\t\t\tdata.fcntype=\"anonymous\"\r\n\t\t\t\tend\r\n\t\t\t\ttable.insert(AST.metrics.functionDefinitions,data)\r\n\t\t\tend\r\n\t\tend\r\n\r\n\t\t if data.key==\"TableConstructor\" then\r\n\t\t\tlocal name\r\n\t\t\tlocal whatisthis=data.parent.parent.parent\r\n\r\n\t\t\tif(whatisthis.tag==\"_FieldID\")then\r\n\t\t\t\tname=searchFieldID(whatisthis)\t\t\r\n\t\t\t\tif(name)then\r\n\t\t\t\t\tdata.name=name \r\n\t\t\t\t\tdata.ttype=\"table-field\"\t\t\t\t\r\n\t\t\t\telse \r\n\t\t\t\t\tdata.name=\"#anonymous#\"\r\n\t\t\t\t\tdata.ttype=\"anonymous\"\r\n\t\t\t\tend\r\n\t\t\t\ttable.insert(AST.metrics.docutables,data)\t\t\t\t\r\n\t\t\telseif(whatisthis.tag==\"_FieldExp\")then\r\n\t\t\t\tdata.name=\"#anonymous#\"\r\n\t\t\t\tdata.ttype=\"anonymous\"\r\n\t\t\t\ttable.insert(AST.metrics.docutables,data)\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\r\n\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "if type(data.data) == \"table\" and #data.data > 0 then\r\n\t\tfor _,v in ipairs(data.data) do\r\n\t\t\ttravers(v,AST)\r\n\t\tend\r\n\t\r\n\t\tif data.key == \"Function\" then\r\n\r\n\t\t\tlocal name\r\n\t\t\tif(data.isGlobal==nil)then\r\n\r\n\t\t\t\tlocal whatisthis= data.parent.parent.parent\r\n\t\t\t\tif(whatisthis.tag==\"_FieldID\")then\t\r\n\t\t\t\t\tname=searchFieldID(whatisthis)\r\n\t\t\t\tend\r\n\t\t\t\tdata.isGlobal=nil\r\n\t\t\t\tif(name)then\r\n\t\t\t\t\tdata.name=name \r\n\t\t\t\t\tdata.fcntype=\"table-field\"\t\t\t\t\r\n\t\t\t\telse \r\n\t\t\t\t\tdata.name=\"#anonymous#\"\r\n\t\t\t\t\tdata.fcntype=\"anonymous\"\r\n\t\t\t\tend\r\n\t\t\t\ttable.insert(AST.metrics.functionDefinitions,data)\r\n\t\t\tend\r\n\t\tend\r\n\r\n\t\t if data.key==\"TableConstructor\" then\r\n\t\t\tlocal name\r\n\t\t\tlocal whatisthis=data.parent.parent.parent\r\n\r\n\t\t\tif(whatisthis.tag==\"_FieldID\")then\r\n\t\t\t\tname=searchFieldID(whatisthis)\t\t\r\n\t\t\t\tif(name)then\r\n\t\t\t\t\tdata.name=name \r\n\t\t\t\t\tdata.ttype=\"table-field\"\t\t\t\t\r\n\t\t\t\telse \r\n\t\t\t\t\tdata.name=\"#anonymous#\"\r\n\t\t\t\t\tdata.ttype=\"anonymous\"\r\n\t\t\t\tend\r\n\t\t\t\ttable.insert(AST.metrics.docutables,data)\t\t\t\t\r\n\t\t\telseif(whatisthis.tag==\"_FieldExp\")then\r\n\t\t\t\tdata.name=\"#anonymous#\"\r\n\t\t\t\tdata.ttype=\"anonymous\"\r\n\t\t\t\ttable.insert(AST.metrics.docutables,data)\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "for _,v in ipairs(data.data) do\r\n\t\t\ttravers(v,AST)\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 15,
    "text": "travers(v,AST)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "if data.key == \"Function\" then\r\n\r\n\t\t\tlocal name\r\n\t\t\tif(data.isGlobal==nil)then\r\n\r\n\t\t\t\tlocal whatisthis= data.parent.parent.parent\r\n\t\t\t\tif(whatisthis.tag==\"_FieldID\")then\t\r\n\t\t\t\t\tname=searchFieldID(whatisthis)\r\n\t\t\t\tend\r\n\t\t\t\tdata.isGlobal=nil\r\n\t\t\t\tif(name)then\r\n\t\t\t\t\tdata.name=name \r\n\t\t\t\t\tdata.fcntype=\"table-field\"\t\t\t\t\r\n\t\t\t\telse \r\n\t\t\t\t\tdata.name=\"#anonymous#\"\r\n\t\t\t\t\tdata.fcntype=\"anonymous\"\r\n\t\t\t\tend\r\n\t\t\t\ttable.insert(AST.metrics.functionDefinitions,data)\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "local name",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "if(data.isGlobal==nil)then\r\n\r\n\t\t\t\tlocal whatisthis= data.parent.parent.parent\r\n\t\t\t\tif(whatisthis.tag==\"_FieldID\")then\t\r\n\t\t\t\t\tname=searchFieldID(whatisthis)\r\n\t\t\t\tend\r\n\t\t\t\tdata.isGlobal=nil\r\n\t\t\t\tif(name)then\r\n\t\t\t\t\tdata.name=name \r\n\t\t\t\t\tdata.fcntype=\"table-field\"\t\t\t\t\r\n\t\t\t\telse \r\n\t\t\t\t\tdata.name=\"#anonymous#\"\r\n\t\t\t\t\tdata.fcntype=\"anonymous\"\r\n\t\t\t\tend\r\n\t\t\t\ttable.insert(AST.metrics.functionDefinitions,data)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "local whatisthis= data.parent.parent.parent",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "if(whatisthis.tag==\"_FieldID\")then\t\r\n\t\t\t\t\tname=searchFieldID(whatisthis)\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "name=searchFieldID(whatisthis)",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "data.isGlobal=nil",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "if(name)then\r\n\t\t\t\t\tdata.name=name \r\n\t\t\t\t\tdata.fcntype=\"table-field\"\t\t\t\t\r\n\t\t\t\telse \r\n\t\t\t\t\tdata.name=\"#anonymous#\"\r\n\t\t\t\t\tdata.fcntype=\"anonymous\"\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "data.name=name",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "data.fcntype=\"table-field\"",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "data.name=\"#anonymous#\"",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "data.fcntype=\"anonymous\"",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "table.insert(AST.metrics.functionDefinitions,data)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "if data.key==\"TableConstructor\" then\r\n\t\t\tlocal name\r\n\t\t\tlocal whatisthis=data.parent.parent.parent\r\n\r\n\t\t\tif(whatisthis.tag==\"_FieldID\")then\r\n\t\t\t\tname=searchFieldID(whatisthis)\t\t\r\n\t\t\t\tif(name)then\r\n\t\t\t\t\tdata.name=name \r\n\t\t\t\t\tdata.ttype=\"table-field\"\t\t\t\t\r\n\t\t\t\telse \r\n\t\t\t\t\tdata.name=\"#anonymous#\"\r\n\t\t\t\t\tdata.ttype=\"anonymous\"\r\n\t\t\t\tend\r\n\t\t\t\ttable.insert(AST.metrics.docutables,data)\t\t\t\t\r\n\t\t\telseif(whatisthis.tag==\"_FieldExp\")then\r\n\t\t\t\tdata.name=\"#anonymous#\"\r\n\t\t\t\tdata.ttype=\"anonymous\"\r\n\t\t\t\ttable.insert(AST.metrics.docutables,data)\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "local whatisthis=data.parent.parent.parent",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "if(whatisthis.tag==\"_FieldID\")then\r\n\t\t\t\tname=searchFieldID(whatisthis)\t\t\r\n\t\t\t\tif(name)then\r\n\t\t\t\t\tdata.name=name \r\n\t\t\t\t\tdata.ttype=\"table-field\"\t\t\t\t\r\n\t\t\t\telse \r\n\t\t\t\t\tdata.name=\"#anonymous#\"\r\n\t\t\t\t\tdata.ttype=\"anonymous\"\r\n\t\t\t\tend\r\n\t\t\t\ttable.insert(AST.metrics.docutables,data)\t\t\t\t\r\n\t\t\telseif(whatisthis.tag==\"_FieldExp\")then\r\n\t\t\t\tdata.name=\"#anonymous#\"\r\n\t\t\t\tdata.ttype=\"anonymous\"\r\n\t\t\t\ttable.insert(AST.metrics.docutables,data)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "if(name)then\r\n\t\t\t\t\tdata.name=name \r\n\t\t\t\t\tdata.ttype=\"table-field\"\t\t\t\t\r\n\t\t\t\telse \r\n\t\t\t\t\tdata.name=\"#anonymous#\"\r\n\t\t\t\t\tdata.ttype=\"anonymous\"\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "data.ttype=\"table-field\"",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "data.ttype=\"anonymous\"",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "table.insert(AST.metrics.docutables,data)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function(data)\r\n\tdata.metrics.documentMetrics = { \r\n\t\tdocumentedFunctionsCounter =  0 , \r\n\t\tnondocumentedFunctionsCounter = 0,\r\n\t\tdocumentedTablesCounter = 0, \r\n\t\tnondocumentedTablesCounter = 0,\r\n\t\ttodos = {},\r\n\t\tquestions = {},\r\n\t\tbugs = {},\r\n\t\tfixmes={},\r\n\t\tinfos={},\r\n\t\thows={}\t\r\n\t}\r\n\r\n\r\n\tdata.metrics.docutables={}\r\n\r\n\r\n-- searching recursive\r\n\ttravers(data,data)\r\n \r\n\r\n--^ `custom comment metrics` some custom comment metrics\r\n\tdata.metrics.documentMetrics.todos = TODOs\r\n\tdata.metrics.documentMetrics.bugs = BUGs\r\n\tdata.metrics.documentMetrics.questions = QUESTIONs\r\n\tdata.metrics.documentMetrics.fixmes = FIXMEs\r\n\tdata.metrics.documentMetrics.infos = INFOs\r\n\tdata.metrics.documentMetrics.hows = HOWs\r\n\r\n\tTODOs={}\r\n\tBUGs = {}\r\n \tQUESTIONs = {} \r\n \tFIXMEs={}\r\n \tINFOs={}\r\n \tHOWs={}\r\n--v \r\n\r\n-- insert tables from current file into global docutables  table \r\n\tfor k,v in pairs(docutables) do\r\n\t\ttable.insert(data.metrics.docutables,v)\r\n\tend\r\n\r\n-- count metric FUNCTIONS\r\n\tif(data.metrics.functionDefinitions ~=nil) then\r\n\t\tfor k,v in pairs(data.metrics.functionDefinitions) do\r\n\t\t\tif(v.documented==1)then\r\n\t\t\t\tdata.metrics.documentMetrics.documentedFunctionsCounter = data.metrics.documentMetrics.documentedFunctionsCounter +1\r\n\t\t\telse\r\n\t\t\t\tdata.metrics.documentMetrics.nondocumentedFunctionsCounter = data.metrics.documentMetrics.nondocumentedFunctionsCounter +1\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\r\n--count metric TABLES --number of constructors (documented/commented tables are in luaDoc_tables)\r\n\tif(data.luaDoc_tables~=nil)then\r\n\t\tfor k,v in pairs(data.luaDoc_tables) do\t\r\n\t\t\tdata.metrics.documentMetrics.documentedTablesCounter = data.metrics.documentMetrics.documentedTablesCounter +1\t\t\t\r\n\t\tend\r\n\tend\r\n-- count non documented tables number of all constructors- documented\r\n\tdata.metrics.documentMetrics.nondocumentedTablesCounter  = \ttableConstructorCount - data.metrics.documentMetrics.documentedTablesCounter \t\r\n\ttableConstructorCount = 0\r\n\tdocutables={}\r\n\treturn data\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "data.metrics.documentMetrics = { \r\n\t\tdocumentedFunctionsCounter =  0 , \r\n\t\tnondocumentedFunctionsCounter = 0,\r\n\t\tdocumentedTablesCounter = 0, \r\n\t\tnondocumentedTablesCounter = 0,\r\n\t\ttodos = {},\r\n\t\tquestions = {},\r\n\t\tbugs = {},\r\n\t\tfixmes={},\r\n\t\tinfos={},\r\n\t\thows={}\t\r\n\t}",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "data.metrics.docutables={}",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "travers(data,data)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "data.metrics.documentMetrics.todos = TODOs",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "data.metrics.documentMetrics.bugs = BUGs",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "data.metrics.documentMetrics.questions = QUESTIONs",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "data.metrics.documentMetrics.fixmes = FIXMEs",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "data.metrics.documentMetrics.infos = INFOs",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "data.metrics.documentMetrics.hows = HOWs",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "TODOs={}",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "BUGs = {}",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "QUESTIONs = {}",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "FIXMEs={}",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "INFOs={}",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "HOWs={}",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "for k,v in pairs(docutables) do\r\n\t\ttable.insert(data.metrics.docutables,v)\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 54,
    "text": "table.insert(data.metrics.docutables,v)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "if(data.metrics.functionDefinitions ~=nil) then\r\n\t\tfor k,v in pairs(data.metrics.functionDefinitions) do\r\n\t\t\tif(v.documented==1)then\r\n\t\t\t\tdata.metrics.documentMetrics.documentedFunctionsCounter = data.metrics.documentMetrics.documentedFunctionsCounter +1\r\n\t\t\telse\r\n\t\t\t\tdata.metrics.documentMetrics.nondocumentedFunctionsCounter = data.metrics.documentMetrics.nondocumentedFunctionsCounter +1\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "for k,v in pairs(data.metrics.functionDefinitions) do\r\n\t\t\tif(v.documented==1)then\r\n\t\t\t\tdata.metrics.documentMetrics.documentedFunctionsCounter = data.metrics.documentMetrics.documentedFunctionsCounter +1\r\n\t\t\telse\r\n\t\t\t\tdata.metrics.documentMetrics.nondocumentedFunctionsCounter = data.metrics.documentMetrics.nondocumentedFunctionsCounter +1\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 57,
    "text": "if(v.documented==1)then\r\n\t\t\t\tdata.metrics.documentMetrics.documentedFunctionsCounter = data.metrics.documentMetrics.documentedFunctionsCounter +1\r\n\t\t\telse\r\n\t\t\t\tdata.metrics.documentMetrics.nondocumentedFunctionsCounter = data.metrics.documentMetrics.nondocumentedFunctionsCounter +1\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "data.metrics.documentMetrics.documentedFunctionsCounter = data.metrics.documentMetrics.documentedFunctionsCounter +1",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "data.metrics.documentMetrics.nondocumentedFunctionsCounter = data.metrics.documentMetrics.nondocumentedFunctionsCounter +1",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "if(data.luaDoc_tables~=nil)then\r\n\t\tfor k,v in pairs(data.luaDoc_tables) do\t\r\n\t\t\tdata.metrics.documentMetrics.documentedTablesCounter = data.metrics.documentMetrics.documentedTablesCounter +1\t\t\t\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "for k,v in pairs(data.luaDoc_tables) do\t\r\n\t\t\tdata.metrics.documentMetrics.documentedTablesCounter = data.metrics.documentMetrics.documentedTablesCounter +1\t\t\t\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 62,
    "text": "data.metrics.documentMetrics.documentedTablesCounter = data.metrics.documentMetrics.documentedTablesCounter +1",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "data.metrics.documentMetrics.nondocumentedTablesCounter  = \ttableConstructorCount - data.metrics.documentMetrics.documentedTablesCounter",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "tableConstructorCount = 0",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "docutables={}",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "function(data)\r\n\r\n\tlocal varlist,explist\r\n\r\n\tvarlist = utils.searchForTagItem(\"VarList\",data.data)\r\n\texplist = utils.searchForTagItem(\"ExpList\",data.data)\r\n\r\n\tfor k,v in pairs(explist.data) do\r\n\t\t\r\n\t\tlocal node = utils.searchForTagItem_recursive(\"TableConstructor\",v,2)\r\n\t\tif(node and varlist.data[k]) then\r\n\t\t\tlocal varname = varlist.data[k]\r\n\t\tif(varname.text:match(\"[%.%[]\"))then\r\n\t\t\t\ttable.insert(docutables,{ttype='table-field', name=varname.text, text=node.text,Expnode=node.parent.parent}) \r\n\t\telse\r\n--TODO set tables ttype property to correct value(global/local). See module metrics.captures.block \r\n\t\t\t\ttable.insert(docutables,{ttype='', name=varname.text, text=node.text,Expnode=node.parent.parent}) --node.parent.parent is the Exp node for future creating total tabl definitions table\r\n\t\tend\t\r\n\tend\r\n\t\t\r\n\tend\r\n\treturn data\r\nend",
    "type": "function"
  }, {
    "id": 68,
    "text": "local varlist,explist",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "varlist = utils.searchForTagItem(\"VarList\",data.data)",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "explist = utils.searchForTagItem(\"ExpList\",data.data)",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "for k,v in pairs(explist.data) do\r\n\t\t\r\n\t\tlocal node = utils.searchForTagItem_recursive(\"TableConstructor\",v,2)\r\n\t\tif(node and varlist.data[k]) then\r\n\t\t\tlocal varname = varlist.data[k]\r\n\t\tif(varname.text:match(\"[%.%[]\"))then\r\n\t\t\t\ttable.insert(docutables,{ttype='table-field', name=varname.text, text=node.text,Expnode=node.parent.parent}) \r\n\t\telse\r\n--TODO set tables ttype property to correct value(global/local). See module metrics.captures.block \r\n\t\t\t\ttable.insert(docutables,{ttype='', name=varname.text, text=node.text,Expnode=node.parent.parent}) --node.parent.parent is the Exp node for future creating total tabl definitions table\r\n\t\tend\t\r\n\tend\r\n\t\t\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 72,
    "text": "local node = utils.searchForTagItem_recursive(\"TableConstructor\",v,2)",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "if(node and varlist.data[k]) then\r\n\t\t\tlocal varname = varlist.data[k]\r\n\t\tif(varname.text:match(\"[%.%[]\"))then\r\n\t\t\t\ttable.insert(docutables,{ttype='table-field', name=varname.text, text=node.text,Expnode=node.parent.parent}) \r\n\t\telse\r\n--TODO set tables ttype property to correct value(global/local). See module metrics.captures.block \r\n\t\t\t\ttable.insert(docutables,{ttype='', name=varname.text, text=node.text,Expnode=node.parent.parent}) --node.parent.parent is the Exp node for future creating total tabl definitions table\r\n\t\tend\t\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "local varname = varlist.data[k]",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "if(varname.text:match(\"[%.%[]\"))then\r\n\t\t\t\ttable.insert(docutables,{ttype='table-field', name=varname.text, text=node.text,Expnode=node.parent.parent}) \r\n\t\telse\r\n--TODO set tables ttype property to correct value(global/local). See module metrics.captures.block \r\n\t\t\t\ttable.insert(docutables,{ttype='', name=varname.text, text=node.text,Expnode=node.parent.parent}) --node.parent.parent is the Exp node for future creating total tabl definitions table\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "table.insert(docutables,{ttype='table-field', name=varname.text, text=node.text,Expnode=node.parent.parent})",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "table.insert(docutables,{ttype='', name=varname.text, text=node.text,Expnode=node.parent.parent})",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "function(data)\r\n\tlocal varlist,explist\r\n\t\tvarlist = utils.searchForTagItem(\"NameList\",data.data)\r\n\t\texplist = utils.searchForTagItem(\"ExpList\",data.data)\r\n\t\tif(explist and varlist) then\r\n\t\t\tfor k,v in pairs(explist.data) do\r\n\r\n\t\t\t\tlocal node = utils.searchForTagItem_recursive(\"TableConstructor\",v,2)\r\n\t\t\t\tif(node and varlist.data[k]) then\r\n\t\t\t\tlocal varname = varlist.data[k]\r\n\t\t\t\ttable.insert(docutables,{ttype='local', name=varname.text, text=node.text,Expnode=node.parent.parent})--node.parent.parent is the Exp node for future creating total tabl definitions table\r\n\t\t\t\tend\r\n\r\n\t\t\tend\r\n\t\tend\r\n\treturn(data)\r\nend",
    "type": "function"
  }, {
    "id": 80,
    "text": "varlist = utils.searchForTagItem(\"NameList\",data.data)",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "if(explist and varlist) then\r\n\t\t\tfor k,v in pairs(explist.data) do\r\n\r\n\t\t\t\tlocal node = utils.searchForTagItem_recursive(\"TableConstructor\",v,2)\r\n\t\t\t\tif(node and varlist.data[k]) then\r\n\t\t\t\tlocal varname = varlist.data[k]\r\n\t\t\t\ttable.insert(docutables,{ttype='local', name=varname.text, text=node.text,Expnode=node.parent.parent})--node.parent.parent is the Exp node for future creating total tabl definitions table\r\n\t\t\t\tend\r\n\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 82,
    "text": "for k,v in pairs(explist.data) do\r\n\r\n\t\t\t\tlocal node = utils.searchForTagItem_recursive(\"TableConstructor\",v,2)\r\n\t\t\t\tif(node and varlist.data[k]) then\r\n\t\t\t\tlocal varname = varlist.data[k]\r\n\t\t\t\ttable.insert(docutables,{ttype='local', name=varname.text, text=node.text,Expnode=node.parent.parent})--node.parent.parent is the Exp node for future creating total tabl definitions table\r\n\t\t\t\tend\r\n\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 83,
    "text": "if(node and varlist.data[k]) then\r\n\t\t\t\tlocal varname = varlist.data[k]\r\n\t\t\t\ttable.insert(docutables,{ttype='local', name=varname.text, text=node.text,Expnode=node.parent.parent})--node.parent.parent is the Exp node for future creating total tabl definitions table\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 84,
    "text": "table.insert(docutables,{ttype='local', name=varname.text, text=node.text,Expnode=node.parent.parent})",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "function(data)\r\n\ttableConstructorCount = tableConstructorCount +1\r\n\treturn data\r\nend",
    "type": "function"
  }, {
    "id": 87,
    "text": "tableConstructorCount = tableConstructorCount +1",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 89,
    "text": "function(data)\r\n\tdata.parsed=comments.Parse(data.text)\r\n\tif(data.parsed and data.parsed.style==\"custom\")then\r\n\t\tif(data.parsed.type == \"todo\")then\r\n\t\t\ttable.insert(TODOs,data)\r\n\t\tend\r\n\t\tif(data.parsed.type == \"bug\")then\r\n\t\t\ttable.insert(BUGs,data)\r\n\t\tend\r\n\t\tif(data.parsed.type == \"question\")then\r\n\t\t\ttable.insert(QUESTIONs,data)\r\n\t\tend\r\n\t\tif(data.parsed.type == \"fixme\")then\r\n\t\t\ttable.insert(FIXMEs,data)\r\n\t\tend\r\n\t\tif(data.parsed.type == \"how\")then\r\n\t\t\ttable.insert(HOWs,data)\r\n\t\tend\r\n\t\tif(data.parsed.type == \"info\")then\r\n\t\t\ttable.insert(INFOs,data)\r\n\t\tend\r\n\tend\r\n\r\nreturn data\r\nend",
    "type": "function"
  }, {
    "id": 90,
    "text": "data.parsed=comments.Parse(data.text)",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "if(data.parsed and data.parsed.style==\"custom\")then\r\n\t\tif(data.parsed.type == \"todo\")then\r\n\t\t\ttable.insert(TODOs,data)\r\n\t\tend\r\n\t\tif(data.parsed.type == \"bug\")then\r\n\t\t\ttable.insert(BUGs,data)\r\n\t\tend\r\n\t\tif(data.parsed.type == \"question\")then\r\n\t\t\ttable.insert(QUESTIONs,data)\r\n\t\tend\r\n\t\tif(data.parsed.type == \"fixme\")then\r\n\t\t\ttable.insert(FIXMEs,data)\r\n\t\tend\r\n\t\tif(data.parsed.type == \"how\")then\r\n\t\t\ttable.insert(HOWs,data)\r\n\t\tend\r\n\t\tif(data.parsed.type == \"info\")then\r\n\t\t\ttable.insert(INFOs,data)\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "if(data.parsed.type == \"todo\")then\r\n\t\t\ttable.insert(TODOs,data)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 93,
    "text": "table.insert(TODOs,data)",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "if(data.parsed.type == \"bug\")then\r\n\t\t\ttable.insert(BUGs,data)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 95,
    "text": "table.insert(BUGs,data)",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "if(data.parsed.type == \"question\")then\r\n\t\t\ttable.insert(QUESTIONs,data)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "table.insert(QUESTIONs,data)",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "if(data.parsed.type == \"fixme\")then\r\n\t\t\ttable.insert(FIXMEs,data)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 99,
    "text": "table.insert(FIXMEs,data)",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "if(data.parsed.type == \"how\")then\r\n\t\t\ttable.insert(HOWs,data)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 101,
    "text": "table.insert(HOWs,data)",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "if(data.parsed.type == \"info\")then\r\n\t\t\ttable.insert(INFOs,data)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 103,
    "text": "table.insert(INFOs,data)",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 105,
    "text": "",
    "type": "function container"
  }, {
    "id": 106,
    "text": "function searchForTagItem(tagname, data)\r\n\tfor j,l in pairs(data) do\r\n\t\tif (l.tag == tagname) then\r\n\t\t\treturn l\t\r\n\t\tend\r\n\tend\r\n\treturn nil\r\nend",
    "type": "function"
  }, {
    "id": 107,
    "text": "function searchForTagItem_recursive(tagname, node, maxdepth)\r\n\tif (node == nil) then return nil end\r\n\tlocal j,l\r\n\tif (maxdepth ~= nil) then maxdepth = maxdepth -1 end\r\n\tfor j,l in pairs(node.data) do\r\n\t\tif (l.tag == tagname) then\r\n\t\t\treturn l\r\n\t\telseif (l.data ~= nil) then\r\n\t\t\tif (maxdepth == nil or maxdepth > 0) then\r\n\t\t\t\tlocal tmp = searchForTagItem_recursive(tagname, l, maxdepth)\r\n\t\t\t\tif (tmp ~= nil) then return tmp end\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\treturn nil\r\nend",
    "type": "function"
  }, {
    "id": 108,
    "text": "comments",
    "type": "module"
  }, {
    "id": 109,
    "text": "Parse",
    "type": "global function"
  }, {
    "id": 110,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 111,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 112,
    "text": "module",
    "type": "global function"
  }, {
    "id": 113,
    "text": "require",
    "type": "global function"
  }, {
    "id": 114,
    "text": "type",
    "type": "global function"
  }, {
    "id": 115,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 116,
    "text": "",
    "type": "variable container"
  }, {
    "id": 117,
    "text": "",
    "type": "require container"
  }, {
    "id": 118,
    "text": "",
    "type": "local variable"
  }, {
    "id": 119,
    "text": "",
    "type": "n/a"
  }, {
    "id": 120,
    "text": "",
    "type": "local variable"
  }, {
    "id": 121,
    "text": "",
    "type": "n/a"
  }, {
    "id": 122,
    "text": "",
    "type": "local variable"
  }, {
    "id": 123,
    "text": "",
    "type": "n/a"
  }, {
    "id": 124,
    "text": "",
    "type": "local variable"
  }, {
    "id": 125,
    "text": "",
    "type": "n/a"
  }, {
    "id": 126,
    "text": "",
    "type": "local variable"
  }, {
    "id": 127,
    "text": "",
    "type": "n/a"
  }, {
    "id": 128,
    "text": "",
    "type": "local variable"
  }, {
    "id": 129,
    "text": "",
    "type": "n/a"
  }, {
    "id": 130,
    "text": "",
    "type": "local variable"
  }, {
    "id": 131,
    "text": "",
    "type": "n/a"
  }, {
    "id": 132,
    "text": "",
    "type": "local variable"
  }, {
    "id": 133,
    "text": "",
    "type": "n/a"
  }, {
    "id": 134,
    "text": "",
    "type": "local variable"
  }, {
    "id": 135,
    "text": "",
    "type": "n/a"
  }, {
    "id": 136,
    "text": "",
    "type": "local variable"
  }, {
    "id": 137,
    "text": "",
    "type": "n/a"
  }, {
    "id": 138,
    "text": "",
    "type": "local variable"
  }, {
    "id": 139,
    "text": "",
    "type": "number"
  }, {
    "id": 140,
    "text": "",
    "type": "local variable"
  }, {
    "id": 141,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 142,
    "text": "",
    "type": "local variable"
  }, {
    "id": 143,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 144,
    "text": "",
    "type": "local variable"
  }, {
    "id": 145,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 146,
    "text": "",
    "type": "local variable"
  }, {
    "id": 147,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 148,
    "text": "",
    "type": "local variable"
  }, {
    "id": 149,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 150,
    "text": "",
    "type": "local variable"
  }, {
    "id": 151,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 152,
    "text": "",
    "type": "local variable"
  }, {
    "id": 153,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 154,
    "text": "",
    "type": "global variable"
  }, {
    "id": 155,
    "text": "",
    "type": "n/a"
  }, {
    "id": 156,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 157,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 158,
    "text": "",
    "type": "require local variable"
  } ]
}