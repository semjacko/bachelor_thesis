{
  "_filename": "smells.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luametrics/src/metrics/captures/smells.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 3
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 3
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 3
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 14,
    "label": "has",
    "to": 25
  }, {
    "from": 14,
    "label": "has",
    "to": 26
  }, {
    "from": 14,
    "label": "has",
    "to": 27
  }, {
    "from": 14,
    "label": "has",
    "to": 28
  }, {
    "from": 14,
    "label": "has",
    "to": 3
  }, {
    "from": 14,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 30,
    "label": "has",
    "to": 34
  }, {
    "from": 30,
    "label": "has",
    "to": 35
  }, {
    "from": 30,
    "label": "has",
    "to": 36
  }, {
    "from": 30,
    "label": "has",
    "to": 37
  }, {
    "from": 30,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 38,
    "label": "has",
    "to": 42
  }, {
    "from": 38,
    "label": "has",
    "to": 43
  }, {
    "from": 38,
    "label": "has",
    "to": 44
  }, {
    "from": 30,
    "label": "has",
    "to": 45
  }, {
    "from": 30,
    "label": "has",
    "to": 46
  }, {
    "from": 30,
    "label": "has",
    "to": 3
  }, {
    "from": 30,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 48,
    "label": "has",
    "to": 53
  }, {
    "from": 48,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 48,
    "label": "has",
    "to": 3
  }, {
    "from": 48,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 58,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 58,
    "label": "has",
    "to": 3
  }, {
    "from": 58,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 66,
    "label": "has",
    "to": 70
  }, {
    "from": 66,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 66,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 66,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 73
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 66,
    "label": "has",
    "to": 81
  }, {
    "from": 66,
    "label": "has",
    "to": 82
  }, {
    "from": 66,
    "label": "has",
    "to": 83
  }, {
    "from": 66,
    "label": "has",
    "to": 84
  }, {
    "from": 66,
    "label": "has",
    "to": 85
  }, {
    "from": 66,
    "label": "has",
    "to": 86
  }, {
    "from": 66,
    "label": "has",
    "to": 87
  }, {
    "from": 66,
    "label": "has",
    "to": 88
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 89,
    "label": "has",
    "to": 3
  }, {
    "from": 89,
    "label": "has",
    "to": 93
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 94,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 96,
    "label": "has",
    "to": 99
  }, {
    "from": 94,
    "label": "has",
    "to": 3
  }, {
    "from": 94,
    "label": "has",
    "to": 3
  }, {
    "from": 94,
    "label": "has",
    "to": 100
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 101,
    "label": "has",
    "to": 95
  }, {
    "from": 101,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 103,
    "label": "has",
    "to": 106
  }, {
    "from": 101,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 101,
    "label": "has",
    "to": 3
  }, {
    "from": 101,
    "label": "has",
    "to": 109
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 111,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 111,
    "label": "has",
    "to": 116
  }, {
    "from": 111,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 117,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 120,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 120,
    "label": "has",
    "to": 124
  }, {
    "from": 117,
    "label": "has",
    "to": 125
  }, {
    "from": 110,
    "label": "has",
    "to": 3
  }, {
    "from": 110,
    "label": "has",
    "to": 126
  }, {
    "from": 110,
    "label": "has",
    "to": 127
  }, {
    "from": 128,
    "label": "has",
    "to": 3
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 130,
    "label": "has",
    "to": 3
  }, {
    "from": 130,
    "label": "has",
    "to": 132
  }, {
    "from": 130,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 130,
    "label": "has",
    "to": 3
  }, {
    "from": 130,
    "label": "has",
    "to": 135
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 136,
    "label": "has",
    "to": 138
  }, {
    "from": 136,
    "label": "has",
    "to": 139
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 140,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 140,
    "label": "has",
    "to": 144
  }, {
    "from": 140,
    "label": "has",
    "to": 145
  }, {
    "from": 140,
    "label": "has",
    "to": 146
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 147,
    "label": "has",
    "to": 150
  }, {
    "from": 146,
    "label": "has",
    "to": 151
  }, {
    "from": 140,
    "label": "has",
    "to": 152
  }, {
    "from": 140,
    "label": "has",
    "to": 153
  }, {
    "from": 140,
    "label": "has",
    "to": 154
  }, {
    "from": 154,
    "label": "has",
    "to": 113
  }, {
    "from": 140,
    "label": "has",
    "to": 155
  }, {
    "from": 140,
    "label": "has",
    "to": 156
  }, {
    "from": 140,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 158,
    "label": "has",
    "to": 159
  }, {
    "from": 157,
    "label": "has",
    "to": 160
  }, {
    "from": 160,
    "label": "has",
    "to": 161
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 160,
    "label": "has",
    "to": 163
  }, {
    "from": 157,
    "label": "has",
    "to": 164
  }, {
    "from": 140,
    "label": "has",
    "to": 165
  }, {
    "from": 140,
    "label": "has",
    "to": 166
  }, {
    "from": 136,
    "label": "has",
    "to": 3
  }, {
    "from": 136,
    "label": "has",
    "to": 167
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 136,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 169,
    "label": "has",
    "to": 171
  }, {
    "from": 136,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 172,
    "label": "has",
    "to": 174
  }, {
    "from": 136,
    "label": "has",
    "to": 175
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 176,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 178,
    "label": "has",
    "to": 180
  }, {
    "from": 180,
    "label": "has",
    "to": 181
  }, {
    "from": 180,
    "label": "has",
    "to": 182
  }, {
    "from": 180,
    "label": "has",
    "to": 183
  }, {
    "from": 178,
    "label": "has",
    "to": 184
  }, {
    "from": 176,
    "label": "has",
    "to": 3
  }, {
    "from": 176,
    "label": "has",
    "to": 185
  }, {
    "from": 186,
    "label": "has",
    "to": 187
  }, {
    "from": 186,
    "label": "has",
    "to": 188
  }, {
    "from": 188,
    "label": "has",
    "to": 189
  }, {
    "from": 188,
    "label": "has",
    "to": 190
  }, {
    "from": 188,
    "label": "has",
    "to": 191
  }, {
    "from": 188,
    "label": "has",
    "to": 192
  }, {
    "from": 186,
    "label": "has",
    "to": 3
  }, {
    "from": 186,
    "label": "has",
    "to": 193
  }, {
    "from": 194,
    "label": "has",
    "to": 195
  }, {
    "from": 194,
    "label": "has",
    "to": 3
  }, {
    "from": 110,
    "label": "calls",
    "to": 101
  }, {
    "from": 136,
    "label": "calls",
    "to": 101
  }, {
    "from": 14,
    "label": "calls",
    "to": 203
  }, {
    "from": 14,
    "label": "calls",
    "to": 203
  }, {
    "from": 30,
    "label": "calls",
    "to": 203
  }, {
    "from": 66,
    "label": "calls",
    "to": 203
  }, {
    "from": 66,
    "label": "calls",
    "to": 203
  }, {
    "from": 66,
    "label": "calls",
    "to": 203
  }, {
    "from": 66,
    "label": "calls",
    "to": 203
  }, {
    "from": 94,
    "label": "calls",
    "to": 203
  }, {
    "from": 130,
    "label": "calls",
    "to": 203
  }, {
    "from": 136,
    "label": "calls",
    "to": 203
  }, {
    "from": 176,
    "label": "calls",
    "to": 203
  }, {
    "from": 176,
    "label": "calls",
    "to": 203
  }, {
    "from": 186,
    "label": "calls",
    "to": 203
  }, {
    "from": 94,
    "label": "calls",
    "to": 94
  }, {
    "from": 101,
    "label": "calls",
    "to": 94
  }, {
    "from": 11,
    "label": "calls",
    "to": 200
  }, {
    "from": 136,
    "label": "calls",
    "to": 128
  }, {
    "from": 30,
    "label": "calls",
    "to": 11
  }, {
    "from": 66,
    "label": "calls",
    "to": 11
  }, {
    "from": 14,
    "label": "calls",
    "to": 206
  }, {
    "from": 14,
    "label": "calls",
    "to": 206
  }, {
    "from": 14,
    "label": "calls",
    "to": 206
  }, {
    "from": 30,
    "label": "calls",
    "to": 202
  }, {
    "from": 58,
    "label": "calls",
    "to": 48
  }, {
    "from": 58,
    "label": "calls",
    "to": 204
  }, {
    "from": 48,
    "label": "calls",
    "to": 205
  }, {
    "from": 14,
    "label": "calls",
    "to": 209
  }, {
    "from": 14,
    "label": "calls",
    "to": 209
  }, {
    "from": 14,
    "label": "calls",
    "to": 209
  }, {
    "from": 58,
    "label": "calls",
    "to": 209
  }, {
    "from": 130,
    "label": "calls",
    "to": 209
  }, {
    "from": 136,
    "label": "calls",
    "to": 209
  }, {
    "from": 136,
    "label": "calls",
    "to": 209
  }, {
    "from": 176,
    "label": "calls",
    "to": 209
  }, {
    "from": 186,
    "label": "calls",
    "to": 209
  }, {
    "from": 30,
    "label": "calls",
    "to": 199
  }, {
    "from": 30,
    "label": "calls",
    "to": 199
  }, {
    "from": 136,
    "label": "calls",
    "to": 136
  }, {
    "from": 186,
    "label": "calls",
    "to": 136
  }, {
    "from": 136,
    "label": "calls",
    "to": 130
  }, {
    "from": 136,
    "label": "calls",
    "to": 130
  }, {
    "from": 30,
    "label": "calls",
    "to": 201
  }, {
    "from": 196,
    "label": "calls",
    "to": 208
  }, {
    "from": 110,
    "label": "calls",
    "to": 110
  }, {
    "from": 136,
    "label": "calls",
    "to": 110
  }, {
    "from": 186,
    "label": "calls",
    "to": 176
  }, {
    "from": 48,
    "label": "calls",
    "to": 207
  }, {
    "from": 196,
    "label": "calls",
    "to": 66
  }, {
    "from": 66,
    "label": "calls",
    "to": 58
  }, {
    "from": 101,
    "label": "calls",
    "to": 89
  }, {
    "from": 1,
    "label": "contains",
    "to": 196
  }, {
    "from": 196,
    "label": "declares",
    "to": 2
  }, {
    "from": 196,
    "label": "declares",
    "to": 5
  }, {
    "from": 196,
    "label": "declares",
    "to": 7
  }, {
    "from": 196,
    "label": "declares",
    "to": 9
  }, {
    "from": 196,
    "label": "declares",
    "to": 11
  }, {
    "from": 196,
    "label": "declares",
    "to": 14
  }, {
    "from": 196,
    "label": "declares",
    "to": 30
  }, {
    "from": 196,
    "label": "declares",
    "to": 48
  }, {
    "from": 196,
    "label": "declares",
    "to": 58
  }, {
    "from": 196,
    "label": "declares",
    "to": 66
  }, {
    "from": 196,
    "label": "declares",
    "to": 89
  }, {
    "from": 196,
    "label": "declares",
    "to": 94
  }, {
    "from": 196,
    "label": "declares",
    "to": 101
  }, {
    "from": 196,
    "label": "declares",
    "to": 110
  }, {
    "from": 196,
    "label": "declares",
    "to": 128
  }, {
    "from": 196,
    "label": "declares",
    "to": 130
  }, {
    "from": 196,
    "label": "declares",
    "to": 136
  }, {
    "from": 196,
    "label": "declares",
    "to": 176
  }, {
    "from": 196,
    "label": "declares",
    "to": 186
  }, {
    "from": 196,
    "label": "declares",
    "to": 194
  }, {
    "from": 197,
    "label": "calls",
    "to": 14
  }, {
    "from": 197,
    "label": "calls",
    "to": 30
  }, {
    "from": 197,
    "label": "calls",
    "to": 186
  }, {
    "from": 1,
    "label": "contains",
    "to": 211
  }, {
    "from": 1,
    "label": "contains",
    "to": 212
  }, {
    "from": 211,
    "label": "initializes",
    "to": 213
  }, {
    "from": 213,
    "label": "assigns",
    "to": 214
  }, {
    "from": 211,
    "label": "initializes",
    "to": 215
  }, {
    "from": 215,
    "label": "assigns",
    "to": 216
  }, {
    "from": 211,
    "label": "initializes",
    "to": 217
  }, {
    "from": 217,
    "label": "assigns",
    "to": 218
  }, {
    "from": 211,
    "label": "initializes",
    "to": 219
  }, {
    "from": 219,
    "label": "assigns",
    "to": 220
  }, {
    "from": 211,
    "label": "initializes",
    "to": 221
  }, {
    "from": 221,
    "label": "assigns",
    "to": 222
  }, {
    "from": 211,
    "label": "initializes",
    "to": 223
  }, {
    "from": 223,
    "label": "assigns",
    "to": 224
  }, {
    "from": 211,
    "label": "initializes",
    "to": 225
  }, {
    "from": 225,
    "label": "assigns",
    "to": 226
  }, {
    "from": 211,
    "label": "initializes",
    "to": 227
  }, {
    "from": 227,
    "label": "assigns",
    "to": 228
  }, {
    "from": 211,
    "label": "initializes",
    "to": 229
  }, {
    "from": 229,
    "label": "assigns",
    "to": 230
  }, {
    "from": 230,
    "label": "assigns",
    "to": 231
  }, {
    "from": 231,
    "label": "assigns",
    "to": 232
  }, {
    "from": 212,
    "label": "initializes",
    "to": 233
  }, {
    "from": 233,
    "label": "requires",
    "to": 198
  }, {
    "from": 1,
    "label": "provides",
    "to": 234
  }, {
    "from": 210,
    "label": "represents",
    "to": 235
  }, {
    "from": 234,
    "label": "provides",
    "to": 235
  }, {
    "from": 66,
    "label": "represents",
    "to": 236
  }, {
    "from": 234,
    "label": "provides",
    "to": 236
  }, {
    "from": 30,
    "label": "represents",
    "to": 237
  }, {
    "from": 234,
    "label": "provides",
    "to": 237
  }, {
    "from": 14,
    "label": "represents",
    "to": 238
  }, {
    "from": 234,
    "label": "provides",
    "to": 238
  }, {
    "from": 186,
    "label": "represents",
    "to": 239
  }, {
    "from": 234,
    "label": "provides",
    "to": 239
  }, {
    "from": 240,
    "label": "requires",
    "to": 1
  }, {
    "from": 11,
    "label": "represents",
    "to": 241
  }, {
    "from": 22,
    "label": "hasArgument",
    "to": 232
  }, {
    "from": 23,
    "label": "hasArgument",
    "to": 232
  }, {
    "from": 24,
    "label": "hasArgument",
    "to": 232
  }, {
    "from": 25,
    "label": "hasArgument",
    "to": 232
  }, {
    "from": 26,
    "label": "hasArgument",
    "to": 232
  }, {
    "from": 27,
    "label": "hasArgument",
    "to": 232
  }, {
    "from": 64,
    "label": "hasArgument",
    "to": 232
  }, {
    "from": 126,
    "label": "hasArgument",
    "to": 232
  }, {
    "from": 134,
    "label": "hasArgument",
    "to": 232
  }, {
    "from": 141,
    "label": "hasArgument",
    "to": 232
  }, {
    "from": 145,
    "label": "hasArgument",
    "to": 232
  }, {
    "from": 156,
    "label": "hasArgument",
    "to": 232
  }, {
    "from": 168,
    "label": "hasArgument",
    "to": 232
  }, {
    "from": 182,
    "label": "hasArgument",
    "to": 232
  }, {
    "from": 190,
    "label": "hasArgument",
    "to": 232
  }, {
    "from": 192,
    "label": "hasArgument",
    "to": 232
  }, {
    "from": 195,
    "label": "hasArgument",
    "to": 232
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "smells",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function compareLOSC(functionA, functionB)\r\n  \r\n  return functionA.LOSC > functionB.LOSC\r\n  \r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "local function compareNOA(functionA, functionB)\r\n  \r\n  return functionA.NOA > functionB.NOA\r\n  \r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "local function compareCyc(functionA, functionB)\r\n  \r\n  return functionA.cyclomatic > functionB.cyclomatic\r\n  \r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "local function compareHal(functionA, functionB)\r\n  \r\n  return functionA.EFF > functionB.EFF\r\n  \r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "local function round(num, numDecimalPlaces)\r\n  \r\n  local mult = 10^(numDecimalPlaces or 0)\r\n  return math.floor(num * mult + 0.5) / mult\r\n  \r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "local mult = 10^(numDecimalPlaces or 0)",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "local function countFunctionSmells(file_metricsAST_list)\r\n  \r\n  local functionCount = 0\r\n  \r\n  --Create return object\r\n  local smell = {\r\n    longMethod = {},\r\n    cyclomatic = {},\r\n    manyParameters = {},\r\n    totalFunctions = 0\r\n  }\r\n  \r\n\tfor filename, AST in pairs(file_metricsAST_list) do --Loop through ASTs of files\r\n    \r\n\t\tfor _, fun in pairs(AST.metrics.blockdata.fundefs) do --Loop through functions\r\n\r\n      --Select Global, local or functions in general\r\n\t\t\tif (fun.tag == 'GlobalFunction' or fun.tag == 'LocalFunction' or fun.tag == 'Function') then\r\n        \r\n        functionCount = functionCount + 1\r\n        \r\n        --Only for taged functions (Not anonymous and table field)\r\n        if(fun.fcntype == 'global' or fun.fcntype == 'local') then\r\n          \r\n          --Insert data to tables to use independently\r\n          table.insert(smell.longMethod, {file = filename, name = fun.name, LOC = fun.metrics.LOC.lines, LOSC = fun.metrics.LOC.lines_code})\r\n          table.insert(smell.cyclomatic, {file = filename, name = fun.name, cyclomatic = (fun.metrics.cyclomatic.decisions or 1)})\r\n          table.insert(smell.manyParameters, {file = filename, name = fun.name, NOA = fun.metrics.infoflow.arguments_in})\r\n          \r\n        end\r\n\t\t\tend\t\r\n\t\tend\r\n\tend\r\n  \r\n  --Sort each table descending\r\n  table.sort(smell.longMethod, compareLOSC)\r\n  table.sort(smell.cyclomatic, compareCyc)\r\n  table.sort(smell.manyParameters, compareNOA)\r\n  \r\n  smell.totalFunctions = functionCount\r\n  \r\n  return smell\r\n  \r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "local functionCount = 0",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "local smell = {\r\n    longMethod = {},\r\n    cyclomatic = {},\r\n    manyParameters = {},\r\n    totalFunctions = 0\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "for filename, AST in pairs(file_metricsAST_list) do --Loop through ASTs of files\r\n    \r\n\t\tfor _, fun in pairs(AST.metrics.blockdata.fundefs) do --Loop through functions\r\n\r\n      --Select Global, local or functions in general\r\n\t\t\tif (fun.tag == 'GlobalFunction' or fun.tag == 'LocalFunction' or fun.tag == 'Function') then\r\n        \r\n        functionCount = functionCount + 1\r\n        \r\n        --Only for taged functions (Not anonymous and table field)\r\n        if(fun.fcntype == 'global' or fun.fcntype == 'local') then\r\n          \r\n          --Insert data to tables to use independently\r\n          table.insert(smell.longMethod, {file = filename, name = fun.name, LOC = fun.metrics.LOC.lines, LOSC = fun.metrics.LOC.lines_code})\r\n          table.insert(smell.cyclomatic, {file = filename, name = fun.name, cyclomatic = (fun.metrics.cyclomatic.decisions or 1)})\r\n          table.insert(smell.manyParameters, {file = filename, name = fun.name, NOA = fun.metrics.infoflow.arguments_in})\r\n          \r\n        end\r\n\t\t\tend\t\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 18,
    "text": "for _, fun in pairs(AST.metrics.blockdata.fundefs) do --Loop through functions\r\n\r\n      --Select Global, local or functions in general\r\n\t\t\tif (fun.tag == 'GlobalFunction' or fun.tag == 'LocalFunction' or fun.tag == 'Function') then\r\n        \r\n        functionCount = functionCount + 1\r\n        \r\n        --Only for taged functions (Not anonymous and table field)\r\n        if(fun.fcntype == 'global' or fun.fcntype == 'local') then\r\n          \r\n          --Insert data to tables to use independently\r\n          table.insert(smell.longMethod, {file = filename, name = fun.name, LOC = fun.metrics.LOC.lines, LOSC = fun.metrics.LOC.lines_code})\r\n          table.insert(smell.cyclomatic, {file = filename, name = fun.name, cyclomatic = (fun.metrics.cyclomatic.decisions or 1)})\r\n          table.insert(smell.manyParameters, {file = filename, name = fun.name, NOA = fun.metrics.infoflow.arguments_in})\r\n          \r\n        end\r\n\t\t\tend\t\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 19,
    "text": "if (fun.tag == 'GlobalFunction' or fun.tag == 'LocalFunction' or fun.tag == 'Function') then\r\n        \r\n        functionCount = functionCount + 1\r\n        \r\n        --Only for taged functions (Not anonymous and table field)\r\n        if(fun.fcntype == 'global' or fun.fcntype == 'local') then\r\n          \r\n          --Insert data to tables to use independently\r\n          table.insert(smell.longMethod, {file = filename, name = fun.name, LOC = fun.metrics.LOC.lines, LOSC = fun.metrics.LOC.lines_code})\r\n          table.insert(smell.cyclomatic, {file = filename, name = fun.name, cyclomatic = (fun.metrics.cyclomatic.decisions or 1)})\r\n          table.insert(smell.manyParameters, {file = filename, name = fun.name, NOA = fun.metrics.infoflow.arguments_in})\r\n          \r\n        end\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "functionCount = functionCount + 1",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "if(fun.fcntype == 'global' or fun.fcntype == 'local') then\r\n          \r\n          --Insert data to tables to use independently\r\n          table.insert(smell.longMethod, {file = filename, name = fun.name, LOC = fun.metrics.LOC.lines, LOSC = fun.metrics.LOC.lines_code})\r\n          table.insert(smell.cyclomatic, {file = filename, name = fun.name, cyclomatic = (fun.metrics.cyclomatic.decisions or 1)})\r\n          table.insert(smell.manyParameters, {file = filename, name = fun.name, NOA = fun.metrics.infoflow.arguments_in})\r\n          \r\n        end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "table.insert(smell.longMethod, {file = filename, name = fun.name, LOC = fun.metrics.LOC.lines, LOSC = fun.metrics.LOC.lines_code})",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "table.insert(smell.cyclomatic, {file = filename, name = fun.name, cyclomatic = (fun.metrics.cyclomatic.decisions or 1)})",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "table.insert(smell.manyParameters, {file = filename, name = fun.name, NOA = fun.metrics.infoflow.arguments_in})",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "table.sort(smell.longMethod, compareLOSC)",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "table.sort(smell.cyclomatic, compareCyc)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "table.sort(smell.manyParameters, compareNOA)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "smell.totalFunctions = functionCount",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "local function countMI(file_metricsAST_list)\r\n  \r\n  --variable preparation\r\n  local MI = 0\r\n  local cyclomatic = 0\r\n  local halsteadVol = 0\r\n  local LOSC = 0\r\n  local comments = 0\r\n  local commentPerc = 0\r\n  local files = 0\r\n  \r\n  for filename, AST in pairs(file_metricsAST_list) do --Loop through ASTs of files\r\n    \r\n    files = files + 1\r\n    if(AST.metrics.cyclomatic ~= nil) then --Count cyclomatic complexity\r\n      cyclomatic = cyclomatic + (AST.metrics.cyclomatic.decisions_all or 0)\r\n    end\r\n    halsteadVol = halsteadVol + AST.metrics.halstead.VOL --Count halstead volume\r\n    LOSC = LOSC + AST.metrics.LOC.lines_code --Lines of source code\r\n    comments = comments + AST.metrics.LOC.lines_comment --Count comment lines\r\n    \r\n\tend\r\n  \r\n  --Count maintainability index\r\n  commentPerc = comments / LOSC\r\n  MI = 171 \r\n          - (5.2 * math.log(halsteadVol / files))\r\n          - (0.23 * (cyclomatic / files))\r\n          - (16.2 * math.log(LOSC / files))\r\n          + (50 * math.sin(math.sqrt(2.4 * (commentPerc / files))))\r\n  \r\n  return round(MI, 2) -- Round on 2 decimal places\r\n  \r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "local MI = 0",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "local cyclomatic = 0",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "local halsteadVol = 0",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "local LOSC = 0",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "local comments = 0",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "local commentPerc = 0",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "local files = 0",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "for filename, AST in pairs(file_metricsAST_list) do --Loop through ASTs of files\r\n    \r\n    files = files + 1\r\n    if(AST.metrics.cyclomatic ~= nil) then --Count cyclomatic complexity\r\n      cyclomatic = cyclomatic + (AST.metrics.cyclomatic.decisions_all or 0)\r\n    end\r\n    halsteadVol = halsteadVol + AST.metrics.halstead.VOL --Count halstead volume\r\n    LOSC = LOSC + AST.metrics.LOC.lines_code --Lines of source code\r\n    comments = comments + AST.metrics.LOC.lines_comment --Count comment lines\r\n    \r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 39,
    "text": "files = files + 1",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "if(AST.metrics.cyclomatic ~= nil) then --Count cyclomatic complexity\r\n      cyclomatic = cyclomatic + (AST.metrics.cyclomatic.decisions_all or 0)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "cyclomatic = cyclomatic + (AST.metrics.cyclomatic.decisions_all or 0)",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "halsteadVol = halsteadVol + AST.metrics.halstead.VOL",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "LOSC = LOSC + AST.metrics.LOC.lines_code",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "comments = comments + AST.metrics.LOC.lines_comment",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "commentPerc = comments / LOSC",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "MI = 171 \r\n          - (5.2 * math.log(halsteadVol / files))\r\n          - (0.23 * (cyclomatic / files))\r\n          - (16.2 * math.log(LOSC / files))\r\n          + (50 * math.sin(math.sqrt(2.4 * (commentPerc / files))))",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function lineSplit(text)\r\n        if sep == nil then\r\n                sep = \"%s\"\r\n        end\r\n        local table={} ; i=1\r\n\r\n\t\ttext = string.gsub( text, \"\\t\", \"    \")\r\n\r\n        for str in string.gmatch(text, \"([^\\n]*)\\n?\") do -- '+' is for skipping over empty lines\r\n                table[i] = str\r\n                i = i + 1\r\n        end\r\n        return table\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "if sep == nil then\r\n                sep = \"%s\"\r\n        end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "sep = \"%s\"",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "local table={}",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "i=1",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "text = string.gsub( text, \"\\t\", \"    \")",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "for str in string.gmatch(text, \"([^\\n]*)\\n?\") do -- '+' is for skipping over empty lines\r\n                table[i] = str\r\n                i = i + 1\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 55,
    "text": "table[i] = str",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "local function lineLength(codeText)\r\n  local lines = lineSplit(codeText)\r\n\r\n  local longLines = {}\r\n  for key, line in ipairs(lines) do\r\n    actualLineLength = #line\r\n    if(actualLineLength > maxLineLength) then\r\n      table.insert( longLines, { lineNumber = key, length = actualLineLength }) \r\n    end\r\n  end\r\n\r\n  return longLines\r\nend",
    "type": "function"
  }, {
    "id": 59,
    "text": "local lines = lineSplit(codeText)",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "local longLines = {}",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "for key, line in ipairs(lines) do\r\n    actualLineLength = #line\r\n    if(actualLineLength > maxLineLength) then\r\n      table.insert( longLines, { lineNumber = key, length = actualLineLength }) \r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 62,
    "text": "actualLineLength = #line",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "if(actualLineLength > maxLineLength) then\r\n      table.insert( longLines, { lineNumber = key, length = actualLineLength }) \r\n    end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "table.insert( longLines, { lineNumber = key, length = actualLineLength })",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "local function countFileSmells(funcAST)\r\n  \r\n  local RFC = 0 --Response for class - Sum of no. executed methods and no. methods in class (file)\r\n  local CBO = 0 --Coupling between module (file) and other big modules in whole project\r\n  local WMC = 0 --Weighted method per class - sum of cyclomatic complexity of functions in class (file)\r\n  local NOM = 0 --No. methods in class (file)\r\n  \r\n  --Count RFC\r\n  for name, value in pairs(funcAST.metrics.functionExecutions) do\r\n    \r\n    for name, value in pairs(value) do\r\n      RFC = RFC + 1\r\n    end\r\n    \r\n  end\r\n    \r\n  --Count CBO (without math module)\r\n  for name, value in pairs(funcAST.metrics.moduleCalls) do\r\n    \r\n    if(name ~= 'math') then -- something is wrong - math etc. module calls contains math but not table string etc...\r\n      \r\n      CBO = CBO + 1\r\n        \r\n    end\r\n    \r\n  end\r\n  \r\n  --Add RFC and count WMC and NOM\r\n  for _, fun in pairs(funcAST.metrics.blockdata.fundefs) do\r\n    \r\n    if (fun.tag == 'GlobalFunction' or fun.tag == 'LocalFunction' or fun.tag == 'Function') then\r\n      \r\n      RFC = RFC + 1\r\n        \r\n      WMC = WMC + (fun.metrics.cyclomatic.decisions or 1)\r\n      NOM = NOM + 1\r\n        \r\n    end\r\n  end\r\n    \r\n  --Add smell counts back to AST\r\n  funcAST.smells = {}\r\n  funcAST.smells.RFC = RFC\r\n  funcAST.smells.WMC = WMC\r\n  funcAST.smells.NOM = NOM\r\n  funcAST.smells.responseToNOM = round((RFC / NOM), 2)\r\n  funcAST.smells.CBO = CBO\r\n  -- TODO pridane\r\n  funcAST.smells.longLines = lineLength(funcAST.text)\r\n\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "local RFC = 0",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "local CBO = 0",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "local WMC = 0",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "local NOM = 0",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "for name, value in pairs(funcAST.metrics.functionExecutions) do\r\n    \r\n    for name, value in pairs(value) do\r\n      RFC = RFC + 1\r\n    end\r\n    \r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 72,
    "text": "for name, value in pairs(value) do\r\n      RFC = RFC + 1\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 73,
    "text": "RFC = RFC + 1",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "for name, value in pairs(funcAST.metrics.moduleCalls) do\r\n    \r\n    if(name ~= 'math') then -- something is wrong - math etc. module calls contains math but not table string etc...\r\n      \r\n      CBO = CBO + 1\r\n        \r\n    end\r\n    \r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 75,
    "text": "if(name ~= 'math') then -- something is wrong - math etc. module calls contains math but not table string etc...\r\n      \r\n      CBO = CBO + 1\r\n        \r\n    end",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "CBO = CBO + 1",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "for _, fun in pairs(funcAST.metrics.blockdata.fundefs) do\r\n    \r\n    if (fun.tag == 'GlobalFunction' or fun.tag == 'LocalFunction' or fun.tag == 'Function') then\r\n      \r\n      RFC = RFC + 1\r\n        \r\n      WMC = WMC + (fun.metrics.cyclomatic.decisions or 1)\r\n      NOM = NOM + 1\r\n        \r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 78,
    "text": "if (fun.tag == 'GlobalFunction' or fun.tag == 'LocalFunction' or fun.tag == 'Function') then\r\n      \r\n      RFC = RFC + 1\r\n        \r\n      WMC = WMC + (fun.metrics.cyclomatic.decisions or 1)\r\n      NOM = NOM + 1\r\n        \r\n    end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "WMC = WMC + (fun.metrics.cyclomatic.decisions or 1)",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "NOM = NOM + 1",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "funcAST.smells = {}",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "funcAST.smells.RFC = RFC",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "funcAST.smells.WMC = WMC",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "funcAST.smells.NOM = NOM",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "funcAST.smells.responseToNOM = round((RFC / NOM), 2)",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "funcAST.smells.CBO = CBO",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "funcAST.smells.longLines = lineLength(funcAST.text)",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 89,
    "text": "local function findStatement(ast)\r\n\tlocal node = ast\r\n\r\n\twhile(node.key ~= \"Stat\" and node.key ~= \"LastStat\" and node.key ~= \"FunctionCall\") do\r\n\t\tnode = node.parent \r\n\tend\r\n\r\n\treturn node\r\nend",
    "type": "function"
  }, {
    "id": 90,
    "text": "local node = ast",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "while(node.key ~= \"Stat\" and node.key ~= \"LastStat\" and node.key ~= \"FunctionCall\") do\r\n\t\tnode = node.parent \r\n\tend",
    "type": "statement:while"
  }, {
    "id": 92,
    "text": "node = node.parent",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 94,
    "text": "local function findName(ast)\r\n\tlocal name = nil\r\n\t\r\n\t-- loop throught childs and find node key Name\r\n\tfor k,v in pairs(ast.data) do\r\n\t\tif(v.key == \"Name\") then\r\n\t\t\treturn v.text\r\n\t\tend\r\n\r\n\t\t-- continue in recursion when key is not Name\r\n\t\tname = findName(v)\r\n\t\tif(name) then\r\n\t\t\t-- return when name was found)\r\n\t\t\treturn name\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 95,
    "text": "local name = nil",
    "type": "statement:localassign"
  }, {
    "id": 96,
    "text": "for k,v in pairs(ast.data) do\r\n\t\tif(v.key == \"Name\") then\r\n\t\t\treturn v.text\r\n\t\tend\r\n\r\n\t\t-- continue in recursion when key is not Name\r\n\t\tname = findName(v)\r\n\t\tif(name) then\r\n\t\t\t-- return when name was found)\r\n\t\t\treturn name\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 97,
    "text": "if(v.key == \"Name\") then\r\n\t\t\treturn v.text\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 98,
    "text": "name = findName(v)",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "if(name) then\r\n\t\t\t-- return when name was found)\r\n\t\t\treturn name\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 100,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 101,
    "text": "local function findTableName(ast)\r\n\tlocal stat = findStatement(ast)\r\n\tlocal name = nil\r\n\r\n\t-- in return statement is not possible to create table with name\r\n\tif(stat.key == \"LastStat\") then \r\n\t\tname = \"#AnonymousReturn\"\r\n\telseif(stat.key == \"FunctionCall\") then\r\n\t\tname = \"#AnonymousFunctionParameter\"\r\n\telse \r\n\t\tname = findName(stat)\r\n\tend\r\n\r\n\tif(name == nil) then\r\n\t\tname = \"Anonymous\"\r\n\tend\r\n\treturn name\r\nend",
    "type": "function"
  }, {
    "id": 102,
    "text": "local stat = findStatement(ast)",
    "type": "statement:localassign"
  }, {
    "id": 103,
    "text": "if(stat.key == \"LastStat\") then \r\n\t\tname = \"#AnonymousReturn\"\r\n\telseif(stat.key == \"FunctionCall\") then\r\n\t\tname = \"#AnonymousFunctionParameter\"\r\n\telse \r\n\t\tname = findName(stat)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 104,
    "text": "name = \"#AnonymousReturn\"",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "name = \"#AnonymousFunctionParameter\"",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "name = findName(stat)",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "if(name == nil) then\r\n\t\tname = \"Anonymous\"\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 108,
    "text": "name = \"Anonymous\"",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 110,
    "text": "local function findParent(ast, smellsTable)\r\n\tif(ast.key == \"TableConstructor\") then\t\t\r\n\t\t-- get and store name for table, when unknown\t\t\t\r\n\t\tif(ast.name == nil)then\r\n\t\t\tast.name = findTableName(ast)\r\n\t\tend\t\r\n\t\t-- initialize cont of fields to 0\r\n\t\tif(not ast.metrics.fieldsCount) then ast.metrics.fieldsCount = 0 end\r\n\r\n\t\tast.metrics.fieldsCount = ast.metrics.fieldsCount + 1\r\n\t\t-- check count of fields\r\n\t\tif(ast.metrics.fieldsCount > maxTableFields) then\r\n\t\t\t-- create table\r\n\t\t\tif(not smellsTable.tableSmells.manyFields) then smellsTable.tableSmells.manyFields = {} end\r\n\t\t\t-- create table\r\n\t\t\tif(not smellsTable.tableSmells.manyFields[ast.name]) then \r\n\t\t\t\tsmellsTable.tableSmells.manyFields[ast.name] = {} \r\n\t\t\t\t-- initialize count of tables with many fields to 0\r\n\t\t\t\tif(not smellsTable.tableSmells.manyFields.count) then smellsTable.tableSmells.manyFields.count = 0 end\r\n\t\t\t\t-- increase ount of tables with many fields\r\n\t\t\t\tsmellsTable.tableSmells.manyFields.count = smellsTable.tableSmells.manyFields.count + 1\r\n\t\t\tend\r\n\t\t\t-- store count of fields to smells table\r\n\t\t\tsmellsTable.tableSmells.manyFields[ast.name].count = ast.metrics.fieldsCount\r\n\t\tend\r\n\t\treturn\r\n\tend\r\n\r\n\t-- when no table contructor, continue in recursion\r\n\tfindParent(ast.parent, smellsTable)\r\nend",
    "type": "function"
  }, {
    "id": 111,
    "text": "if(ast.key == \"TableConstructor\") then\t\t\r\n\t\t-- get and store name for table, when unknown\t\t\t\r\n\t\tif(ast.name == nil)then\r\n\t\t\tast.name = findTableName(ast)\r\n\t\tend\t\r\n\t\t-- initialize cont of fields to 0\r\n\t\tif(not ast.metrics.fieldsCount) then ast.metrics.fieldsCount = 0 end\r\n\r\n\t\tast.metrics.fieldsCount = ast.metrics.fieldsCount + 1\r\n\t\t-- check count of fields\r\n\t\tif(ast.metrics.fieldsCount > maxTableFields) then\r\n\t\t\t-- create table\r\n\t\t\tif(not smellsTable.tableSmells.manyFields) then smellsTable.tableSmells.manyFields = {} end\r\n\t\t\t-- create table\r\n\t\t\tif(not smellsTable.tableSmells.manyFields[ast.name]) then \r\n\t\t\t\tsmellsTable.tableSmells.manyFields[ast.name] = {} \r\n\t\t\t\t-- initialize count of tables with many fields to 0\r\n\t\t\t\tif(not smellsTable.tableSmells.manyFields.count) then smellsTable.tableSmells.manyFields.count = 0 end\r\n\t\t\t\t-- increase ount of tables with many fields\r\n\t\t\t\tsmellsTable.tableSmells.manyFields.count = smellsTable.tableSmells.manyFields.count + 1\r\n\t\t\tend\r\n\t\t\t-- store count of fields to smells table\r\n\t\t\tsmellsTable.tableSmells.manyFields[ast.name].count = ast.metrics.fieldsCount\r\n\t\tend\r\n\t\treturn\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 112,
    "text": "if(ast.name == nil)then\r\n\t\t\tast.name = findTableName(ast)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 113,
    "text": "ast.name = findTableName(ast)",
    "type": "statement:assign"
  }, {
    "id": 114,
    "text": "if(not ast.metrics.fieldsCount) then ast.metrics.fieldsCount = 0 end",
    "type": "statement:if"
  }, {
    "id": 115,
    "text": "ast.metrics.fieldsCount = 0",
    "type": "statement:assign"
  }, {
    "id": 116,
    "text": "ast.metrics.fieldsCount = ast.metrics.fieldsCount + 1",
    "type": "statement:assign"
  }, {
    "id": 117,
    "text": "if(ast.metrics.fieldsCount > maxTableFields) then\r\n\t\t\t-- create table\r\n\t\t\tif(not smellsTable.tableSmells.manyFields) then smellsTable.tableSmells.manyFields = {} end\r\n\t\t\t-- create table\r\n\t\t\tif(not smellsTable.tableSmells.manyFields[ast.name]) then \r\n\t\t\t\tsmellsTable.tableSmells.manyFields[ast.name] = {} \r\n\t\t\t\t-- initialize count of tables with many fields to 0\r\n\t\t\t\tif(not smellsTable.tableSmells.manyFields.count) then smellsTable.tableSmells.manyFields.count = 0 end\r\n\t\t\t\t-- increase ount of tables with many fields\r\n\t\t\t\tsmellsTable.tableSmells.manyFields.count = smellsTable.tableSmells.manyFields.count + 1\r\n\t\t\tend\r\n\t\t\t-- store count of fields to smells table\r\n\t\t\tsmellsTable.tableSmells.manyFields[ast.name].count = ast.metrics.fieldsCount\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 118,
    "text": "if(not smellsTable.tableSmells.manyFields) then smellsTable.tableSmells.manyFields = {} end",
    "type": "statement:if"
  }, {
    "id": 119,
    "text": "smellsTable.tableSmells.manyFields = {}",
    "type": "statement:assign"
  }, {
    "id": 120,
    "text": "if(not smellsTable.tableSmells.manyFields[ast.name]) then \r\n\t\t\t\tsmellsTable.tableSmells.manyFields[ast.name] = {} \r\n\t\t\t\t-- initialize count of tables with many fields to 0\r\n\t\t\t\tif(not smellsTable.tableSmells.manyFields.count) then smellsTable.tableSmells.manyFields.count = 0 end\r\n\t\t\t\t-- increase ount of tables with many fields\r\n\t\t\t\tsmellsTable.tableSmells.manyFields.count = smellsTable.tableSmells.manyFields.count + 1\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 121,
    "text": "smellsTable.tableSmells.manyFields[ast.name] = {}",
    "type": "statement:assign"
  }, {
    "id": 122,
    "text": "if(not smellsTable.tableSmells.manyFields.count) then smellsTable.tableSmells.manyFields.count = 0 end",
    "type": "statement:if"
  }, {
    "id": 123,
    "text": "smellsTable.tableSmells.manyFields.count = 0",
    "type": "statement:assign"
  }, {
    "id": 124,
    "text": "smellsTable.tableSmells.manyFields.count = smellsTable.tableSmells.manyFields.count + 1",
    "type": "statement:assign"
  }, {
    "id": 125,
    "text": "smellsTable.tableSmells.manyFields[ast.name].count = ast.metrics.fieldsCount",
    "type": "statement:assign"
  }, {
    "id": 126,
    "text": "findParent(ast.parent, smellsTable)",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 128,
    "text": "local function isFunction(key)\r\n\treturn (key == \"Function\" or key == \"GlobalFunction\" or key == \"LocalFunction\")\r\nend",
    "type": "function"
  }, {
    "id": 129,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 130,
    "text": "function copyParents(parentTable)\r\n\r\n\tif(parentTable == nil) then\r\n\t\treturn nil\r\n\tend\r\n\r\n\tlocal newTable = {}\r\n\r\n\t-- loop throught parents and copy each one\r\n\tfor k,v in pairs(parentTable) do\r\n\t\ttable.insert( newTable, k, v )\r\n\tend\r\n\r\n\treturn newTable\r\nend",
    "type": "function"
  }, {
    "id": 131,
    "text": "if(parentTable == nil) then\r\n\t\treturn nil\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 132,
    "text": "local newTable = {}",
    "type": "statement:localassign"
  }, {
    "id": 133,
    "text": "for k,v in pairs(parentTable) do\r\n\t\ttable.insert( newTable, k, v )\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 134,
    "text": "table.insert( newTable, k, v )",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 136,
    "text": "local function recursive(ast, functionNesting, tableNesting, smellsTable)\r\n\r\n\t-- set true when nesting level of function is increased, decrease nesting level and remove last parent after return from childs, when this was true\r\n\tlocal insertedF = false\r\n\t-- set true when nesting level of table is increased, decrease nesting level and remove last parent after return from childs, when this was true\r\n\tlocal insertedT = false\r\n\r\n\tif(ast) then\r\n\t\tif(ast.key == \"Field\") then \r\n\t\t\t-- search for table constructor\r\n\t\t\tfindParent(ast, smellsTable)\t\t\t\r\n\t\telseif (isFunction(ast.key)) then\r\n\t\t\t\r\n\t\t\tif(ast.metrics == nil) then\r\n\t\t\t\tast.metrics = {}\r\n\t\t\tend\r\n\r\n\t\t\t-- store nesting level to current node\r\n\t\t\tast.metrics.depth = functionNesting.level\r\n\t\t\t-- insert node name as parent for next nested functions\r\n\t\t\ttable.insert(functionNesting.parents, ast.name)\r\n\r\n\t\t\t-- check function nesting level\r\n\t\t\tif(functionNesting.level > maxFunctionNesting) then\r\n\t\t\t\tif(not smellsTable.functionSmells[ast.name]) then \r\n\t\t\t\t\tif(not smellsTable.functionSmells.count) then smellsTable.functionSmells.count = 0 end\r\n\t\t\t\t\t-- increase total count of nested functions\r\n\t\t\t\t\tsmellsTable.functionSmells.count = smellsTable.functionSmells.count + 1\r\n\t\t\t\tend\r\n\r\n\t\t\t\t-- store function name, level, parents in smells table\r\n\t\t\t\tsmellsTable.functionSmells[ast.name] = { level = functionNesting.level, parents = copyParents(functionNesting.parents) }\r\n\t\t\tend\r\n\r\n\t\t\t-- increase nesting level\r\n\t\t\tfunctionNesting.level = functionNesting.level + 1\r\n\t\t\t-- set true for decrease nesting level after recursion\r\n\t\t\tinsertedF = true\r\n\t\telseif (ast.key == \"TableConstructor\") then\r\n\t\t\tif(ast.name == nil) then\r\n\t\t\t\t-- find and store table name, when unknown\r\n\t\t\t\tast.name = findTableName(ast)\r\n\t\t\tend\t\r\n\r\n\t\t\t-- store nesting level for table\r\n\t\t\tast.metrics.depth = tableNesting.level\r\n\t\t\t-- insert node name as parent for next nested functions\r\n\t\t\ttable.insert(tableNesting.parents, ast.name)\t\r\n\r\n\r\n\t\t\t-- check table nesting level\r\n\t\t\tif(tableNesting.level > maxTableNesting) then\r\n\t\t\t\tif(not smellsTable.tableSmells.depth) then smellsTable.tableSmells.depth = {} end\r\n\r\n\t\t\t\tif(not smellsTable.tableSmells.depth[ast.name]) then \r\n\t\t\t\t\tif(not smellsTable.tableSmells.depth.count) then smellsTable.tableSmells.depth.count = 0 end\r\n\t\t\t\t\t-- increase total count of nested tables\r\n\t\t\t\t\tsmellsTable.tableSmells.depth.count = smellsTable.tableSmells.depth.count + 1\r\n\t\t\t\tend\r\n\r\n\t\t\t\t-- store table name, level, parents in smells table\r\n\t\t\t\tsmellsTable.tableSmells.depth[ast.name] = { level = tableNesting.level, parents = copyParents(tableNesting.parents) }\r\n\t\t\tend\r\n\r\n\t\t\t-- increase nesting level\r\n\t\t\ttableNesting.level = tableNesting.level + 1\t\r\n\t\t\t-- set true for decrease nesting level after recursion\r\n\t\t\tinsertedT = true\r\n\t\t\r\n\t\tend\r\n\telse\r\n\t\t-- stop recursion when ast node is nil\r\n\t\treturn\r\n\tend\r\n\r\n\t-- continue in recursion\r\n\tfor key, child in pairs(ast.data) do\r\n\t\trecursive(child, functionNesting, tableNesting, smellsTable)\r\n\tend\r\n\r\n\t-- when function nesting level was increased\r\n\tif(insertedF) then\r\n\t\tfunctionNesting.level = functionNesting.level - 1\r\n\t\tfunctionNesting.parents[#functionNesting.parents] = nil -- remove last item\r\n\tend\r\n\r\n\t-- when table nesting level was increased\r\n\tif(insertedT) then\r\n\t\ttableNesting.level = tableNesting.level - 1\r\n\t\ttableNesting.parents[#tableNesting.parents] = nil -- remove last item\r\n\tend\r\n\r\nend",
    "type": "function"
  }, {
    "id": 137,
    "text": "local insertedF = false",
    "type": "statement:localassign"
  }, {
    "id": 138,
    "text": "local insertedT = false",
    "type": "statement:localassign"
  }, {
    "id": 139,
    "text": "if(ast) then\r\n\t\tif(ast.key == \"Field\") then \r\n\t\t\t-- search for table constructor\r\n\t\t\tfindParent(ast, smellsTable)\t\t\t\r\n\t\telseif (isFunction(ast.key)) then\r\n\t\t\t\r\n\t\t\tif(ast.metrics == nil) then\r\n\t\t\t\tast.metrics = {}\r\n\t\t\tend\r\n\r\n\t\t\t-- store nesting level to current node\r\n\t\t\tast.metrics.depth = functionNesting.level\r\n\t\t\t-- insert node name as parent for next nested functions\r\n\t\t\ttable.insert(functionNesting.parents, ast.name)\r\n\r\n\t\t\t-- check function nesting level\r\n\t\t\tif(functionNesting.level > maxFunctionNesting) then\r\n\t\t\t\tif(not smellsTable.functionSmells[ast.name]) then \r\n\t\t\t\t\tif(not smellsTable.functionSmells.count) then smellsTable.functionSmells.count = 0 end\r\n\t\t\t\t\t-- increase total count of nested functions\r\n\t\t\t\t\tsmellsTable.functionSmells.count = smellsTable.functionSmells.count + 1\r\n\t\t\t\tend\r\n\r\n\t\t\t\t-- store function name, level, parents in smells table\r\n\t\t\t\tsmellsTable.functionSmells[ast.name] = { level = functionNesting.level, parents = copyParents(functionNesting.parents) }\r\n\t\t\tend\r\n\r\n\t\t\t-- increase nesting level\r\n\t\t\tfunctionNesting.level = functionNesting.level + 1\r\n\t\t\t-- set true for decrease nesting level after recursion\r\n\t\t\tinsertedF = true\r\n\t\telseif (ast.key == \"TableConstructor\") then\r\n\t\t\tif(ast.name == nil) then\r\n\t\t\t\t-- find and store table name, when unknown\r\n\t\t\t\tast.name = findTableName(ast)\r\n\t\t\tend\t\r\n\r\n\t\t\t-- store nesting level for table\r\n\t\t\tast.metrics.depth = tableNesting.level\r\n\t\t\t-- insert node name as parent for next nested functions\r\n\t\t\ttable.insert(tableNesting.parents, ast.name)\t\r\n\r\n\r\n\t\t\t-- check table nesting level\r\n\t\t\tif(tableNesting.level > maxTableNesting) then\r\n\t\t\t\tif(not smellsTable.tableSmells.depth) then smellsTable.tableSmells.depth = {} end\r\n\r\n\t\t\t\tif(not smellsTable.tableSmells.depth[ast.name]) then \r\n\t\t\t\t\tif(not smellsTable.tableSmells.depth.count) then smellsTable.tableSmells.depth.count = 0 end\r\n\t\t\t\t\t-- increase total count of nested tables\r\n\t\t\t\t\tsmellsTable.tableSmells.depth.count = smellsTable.tableSmells.depth.count + 1\r\n\t\t\t\tend\r\n\r\n\t\t\t\t-- store table name, level, parents in smells table\r\n\t\t\t\tsmellsTable.tableSmells.depth[ast.name] = { level = tableNesting.level, parents = copyParents(tableNesting.parents) }\r\n\t\t\tend\r\n\r\n\t\t\t-- increase nesting level\r\n\t\t\ttableNesting.level = tableNesting.level + 1\t\r\n\t\t\t-- set true for decrease nesting level after recursion\r\n\t\t\tinsertedT = true\r\n\t\t\r\n\t\tend\r\n\telse\r\n\t\t-- stop recursion when ast node is nil\r\n\t\treturn\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 140,
    "text": "if(ast.key == \"Field\") then \r\n\t\t\t-- search for table constructor\r\n\t\t\tfindParent(ast, smellsTable)\t\t\t\r\n\t\telseif (isFunction(ast.key)) then\r\n\t\t\t\r\n\t\t\tif(ast.metrics == nil) then\r\n\t\t\t\tast.metrics = {}\r\n\t\t\tend\r\n\r\n\t\t\t-- store nesting level to current node\r\n\t\t\tast.metrics.depth = functionNesting.level\r\n\t\t\t-- insert node name as parent for next nested functions\r\n\t\t\ttable.insert(functionNesting.parents, ast.name)\r\n\r\n\t\t\t-- check function nesting level\r\n\t\t\tif(functionNesting.level > maxFunctionNesting) then\r\n\t\t\t\tif(not smellsTable.functionSmells[ast.name]) then \r\n\t\t\t\t\tif(not smellsTable.functionSmells.count) then smellsTable.functionSmells.count = 0 end\r\n\t\t\t\t\t-- increase total count of nested functions\r\n\t\t\t\t\tsmellsTable.functionSmells.count = smellsTable.functionSmells.count + 1\r\n\t\t\t\tend\r\n\r\n\t\t\t\t-- store function name, level, parents in smells table\r\n\t\t\t\tsmellsTable.functionSmells[ast.name] = { level = functionNesting.level, parents = copyParents(functionNesting.parents) }\r\n\t\t\tend\r\n\r\n\t\t\t-- increase nesting level\r\n\t\t\tfunctionNesting.level = functionNesting.level + 1\r\n\t\t\t-- set true for decrease nesting level after recursion\r\n\t\t\tinsertedF = true\r\n\t\telseif (ast.key == \"TableConstructor\") then\r\n\t\t\tif(ast.name == nil) then\r\n\t\t\t\t-- find and store table name, when unknown\r\n\t\t\t\tast.name = findTableName(ast)\r\n\t\t\tend\t\r\n\r\n\t\t\t-- store nesting level for table\r\n\t\t\tast.metrics.depth = tableNesting.level\r\n\t\t\t-- insert node name as parent for next nested functions\r\n\t\t\ttable.insert(tableNesting.parents, ast.name)\t\r\n\r\n\r\n\t\t\t-- check table nesting level\r\n\t\t\tif(tableNesting.level > maxTableNesting) then\r\n\t\t\t\tif(not smellsTable.tableSmells.depth) then smellsTable.tableSmells.depth = {} end\r\n\r\n\t\t\t\tif(not smellsTable.tableSmells.depth[ast.name]) then \r\n\t\t\t\t\tif(not smellsTable.tableSmells.depth.count) then smellsTable.tableSmells.depth.count = 0 end\r\n\t\t\t\t\t-- increase total count of nested tables\r\n\t\t\t\t\tsmellsTable.tableSmells.depth.count = smellsTable.tableSmells.depth.count + 1\r\n\t\t\t\tend\r\n\r\n\t\t\t\t-- store table name, level, parents in smells table\r\n\t\t\t\tsmellsTable.tableSmells.depth[ast.name] = { level = tableNesting.level, parents = copyParents(tableNesting.parents) }\r\n\t\t\tend\r\n\r\n\t\t\t-- increase nesting level\r\n\t\t\ttableNesting.level = tableNesting.level + 1\t\r\n\t\t\t-- set true for decrease nesting level after recursion\r\n\t\t\tinsertedT = true\r\n\t\t\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 141,
    "text": "findParent(ast, smellsTable)",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "if(ast.metrics == nil) then\r\n\t\t\t\tast.metrics = {}\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 143,
    "text": "ast.metrics = {}",
    "type": "statement:assign"
  }, {
    "id": 144,
    "text": "ast.metrics.depth = functionNesting.level",
    "type": "statement:assign"
  }, {
    "id": 145,
    "text": "table.insert(functionNesting.parents, ast.name)",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "if(functionNesting.level > maxFunctionNesting) then\r\n\t\t\t\tif(not smellsTable.functionSmells[ast.name]) then \r\n\t\t\t\t\tif(not smellsTable.functionSmells.count) then smellsTable.functionSmells.count = 0 end\r\n\t\t\t\t\t-- increase total count of nested functions\r\n\t\t\t\t\tsmellsTable.functionSmells.count = smellsTable.functionSmells.count + 1\r\n\t\t\t\tend\r\n\r\n\t\t\t\t-- store function name, level, parents in smells table\r\n\t\t\t\tsmellsTable.functionSmells[ast.name] = { level = functionNesting.level, parents = copyParents(functionNesting.parents) }\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 147,
    "text": "if(not smellsTable.functionSmells[ast.name]) then \r\n\t\t\t\t\tif(not smellsTable.functionSmells.count) then smellsTable.functionSmells.count = 0 end\r\n\t\t\t\t\t-- increase total count of nested functions\r\n\t\t\t\t\tsmellsTable.functionSmells.count = smellsTable.functionSmells.count + 1\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 148,
    "text": "if(not smellsTable.functionSmells.count) then smellsTable.functionSmells.count = 0 end",
    "type": "statement:if"
  }, {
    "id": 149,
    "text": "smellsTable.functionSmells.count = 0",
    "type": "statement:assign"
  }, {
    "id": 150,
    "text": "smellsTable.functionSmells.count = smellsTable.functionSmells.count + 1",
    "type": "statement:assign"
  }, {
    "id": 151,
    "text": "smellsTable.functionSmells[ast.name] = { level = functionNesting.level, parents = copyParents(functionNesting.parents) }",
    "type": "statement:assign"
  }, {
    "id": 152,
    "text": "functionNesting.level = functionNesting.level + 1",
    "type": "statement:assign"
  }, {
    "id": 153,
    "text": "insertedF = true",
    "type": "statement:assign"
  }, {
    "id": 154,
    "text": "if(ast.name == nil) then\r\n\t\t\t\t-- find and store table name, when unknown\r\n\t\t\t\tast.name = findTableName(ast)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 155,
    "text": "ast.metrics.depth = tableNesting.level",
    "type": "statement:assign"
  }, {
    "id": 156,
    "text": "table.insert(tableNesting.parents, ast.name)",
    "type": "statement:functioncall"
  }, {
    "id": 157,
    "text": "if(tableNesting.level > maxTableNesting) then\r\n\t\t\t\tif(not smellsTable.tableSmells.depth) then smellsTable.tableSmells.depth = {} end\r\n\r\n\t\t\t\tif(not smellsTable.tableSmells.depth[ast.name]) then \r\n\t\t\t\t\tif(not smellsTable.tableSmells.depth.count) then smellsTable.tableSmells.depth.count = 0 end\r\n\t\t\t\t\t-- increase total count of nested tables\r\n\t\t\t\t\tsmellsTable.tableSmells.depth.count = smellsTable.tableSmells.depth.count + 1\r\n\t\t\t\tend\r\n\r\n\t\t\t\t-- store table name, level, parents in smells table\r\n\t\t\t\tsmellsTable.tableSmells.depth[ast.name] = { level = tableNesting.level, parents = copyParents(tableNesting.parents) }\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 158,
    "text": "if(not smellsTable.tableSmells.depth) then smellsTable.tableSmells.depth = {} end",
    "type": "statement:if"
  }, {
    "id": 159,
    "text": "smellsTable.tableSmells.depth = {}",
    "type": "statement:assign"
  }, {
    "id": 160,
    "text": "if(not smellsTable.tableSmells.depth[ast.name]) then \r\n\t\t\t\t\tif(not smellsTable.tableSmells.depth.count) then smellsTable.tableSmells.depth.count = 0 end\r\n\t\t\t\t\t-- increase total count of nested tables\r\n\t\t\t\t\tsmellsTable.tableSmells.depth.count = smellsTable.tableSmells.depth.count + 1\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 161,
    "text": "if(not smellsTable.tableSmells.depth.count) then smellsTable.tableSmells.depth.count = 0 end",
    "type": "statement:if"
  }, {
    "id": 162,
    "text": "smellsTable.tableSmells.depth.count = 0",
    "type": "statement:assign"
  }, {
    "id": 163,
    "text": "smellsTable.tableSmells.depth.count = smellsTable.tableSmells.depth.count + 1",
    "type": "statement:assign"
  }, {
    "id": 164,
    "text": "smellsTable.tableSmells.depth[ast.name] = { level = tableNesting.level, parents = copyParents(tableNesting.parents) }",
    "type": "statement:assign"
  }, {
    "id": 165,
    "text": "tableNesting.level = tableNesting.level + 1",
    "type": "statement:assign"
  }, {
    "id": 166,
    "text": "insertedT = true",
    "type": "statement:assign"
  }, {
    "id": 167,
    "text": "for key, child in pairs(ast.data) do\r\n\t\trecursive(child, functionNesting, tableNesting, smellsTable)\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 168,
    "text": "recursive(child, functionNesting, tableNesting, smellsTable)",
    "type": "statement:functioncall"
  }, {
    "id": 169,
    "text": "if(insertedF) then\r\n\t\tfunctionNesting.level = functionNesting.level - 1\r\n\t\tfunctionNesting.parents[#functionNesting.parents] = nil -- remove last item\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 170,
    "text": "functionNesting.level = functionNesting.level - 1",
    "type": "statement:assign"
  }, {
    "id": 171,
    "text": "functionNesting.parents[#functionNesting.parents] = nil",
    "type": "statement:assign"
  }, {
    "id": 172,
    "text": "if(insertedT) then\r\n\t\ttableNesting.level = tableNesting.level - 1\r\n\t\ttableNesting.parents[#tableNesting.parents] = nil -- remove last item\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 173,
    "text": "tableNesting.level = tableNesting.level - 1",
    "type": "statement:assign"
  }, {
    "id": 174,
    "text": "tableNesting.parents[#tableNesting.parents] = nil",
    "type": "statement:assign"
  }, {
    "id": 175,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 176,
    "text": "local function getUpvalues(ast)\r\n\tupvalues = {info = {}, functions = {}, totalUsages = 0}\r\n\r\n\t-- loop throught all functions\r\n\tfor k, functionTable in pairs(ast.metrics.blockdata.fundefs) do\r\n\t\tupvaluesCount = 0\r\n\r\n\t\t-- loop throught all remotes\r\n\t\tfor name, vars in pairs(functionTable.metrics.blockdata.remotes) do\r\n\t\t\tupvaluesCount = upvaluesCount + 1\r\n\t\t\t-- \r\n\t\t\t--[[for _, node in pairs(vars) do\r\n\t\t\t\tif (node.isRead) then\r\n\t\t\t\t\tupvaluesCount = upvaluesCount + 1\r\n\t\t\t\t\tbreak\r\n\t\t\t\tend\t\t\r\n\t\t\tend --]] \r\n\r\n\t\t\t-- store info like function name, variable name and usage count, and create easy access to count of total upvalues\r\n\t\t\ttable.insert(upvalues.info, {functionName = functionTable.name, varName = name, usages = #vars})\r\n\t\t\tupvalues.totalUsages = upvalues.totalUsages + #vars\r\n\r\n\t\t\t--upvalues[fileName][table.name][name] = #vars\r\n\t\tend\r\n\r\n\t\t-- store count of variables in function\r\n\t\tupvalues.functions[functionTable.name] = upvaluesCount\r\n\t\t\r\n\tend\r\n\r\n\treturn upvalues\r\n\r\nend",
    "type": "function"
  }, {
    "id": 177,
    "text": "upvalues = {info = {}, functions = {}, totalUsages = 0}",
    "type": "statement:assign"
  }, {
    "id": 178,
    "text": "for k, functionTable in pairs(ast.metrics.blockdata.fundefs) do\r\n\t\tupvaluesCount = 0\r\n\r\n\t\t-- loop throught all remotes\r\n\t\tfor name, vars in pairs(functionTable.metrics.blockdata.remotes) do\r\n\t\t\tupvaluesCount = upvaluesCount + 1\r\n\t\t\t-- \r\n\t\t\t--[[for _, node in pairs(vars) do\r\n\t\t\t\tif (node.isRead) then\r\n\t\t\t\t\tupvaluesCount = upvaluesCount + 1\r\n\t\t\t\t\tbreak\r\n\t\t\t\tend\t\t\r\n\t\t\tend --]] \r\n\r\n\t\t\t-- store info like function name, variable name and usage count, and create easy access to count of total upvalues\r\n\t\t\ttable.insert(upvalues.info, {functionName = functionTable.name, varName = name, usages = #vars})\r\n\t\t\tupvalues.totalUsages = upvalues.totalUsages + #vars\r\n\r\n\t\t\t--upvalues[fileName][table.name][name] = #vars\r\n\t\tend\r\n\r\n\t\t-- store count of variables in function\r\n\t\tupvalues.functions[functionTable.name] = upvaluesCount\r\n\t\t\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 179,
    "text": "upvaluesCount = 0",
    "type": "statement:assign"
  }, {
    "id": 180,
    "text": "for name, vars in pairs(functionTable.metrics.blockdata.remotes) do\r\n\t\t\tupvaluesCount = upvaluesCount + 1\r\n\t\t\t-- \r\n\t\t\t--[[for _, node in pairs(vars) do\r\n\t\t\t\tif (node.isRead) then\r\n\t\t\t\t\tupvaluesCount = upvaluesCount + 1\r\n\t\t\t\t\tbreak\r\n\t\t\t\tend\t\t\r\n\t\t\tend --]] \r\n\r\n\t\t\t-- store info like function name, variable name and usage count, and create easy access to count of total upvalues\r\n\t\t\ttable.insert(upvalues.info, {functionName = functionTable.name, varName = name, usages = #vars})\r\n\t\t\tupvalues.totalUsages = upvalues.totalUsages + #vars\r\n\r\n\t\t\t--upvalues[fileName][table.name][name] = #vars\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 181,
    "text": "upvaluesCount = upvaluesCount + 1",
    "type": "statement:assign"
  }, {
    "id": 182,
    "text": "table.insert(upvalues.info, {functionName = functionTable.name, varName = name, usages = #vars})",
    "type": "statement:functioncall"
  }, {
    "id": 183,
    "text": "upvalues.totalUsages = upvalues.totalUsages + #vars",
    "type": "statement:assign"
  }, {
    "id": 184,
    "text": "upvalues.functions[functionTable.name] = upvaluesCount",
    "type": "statement:assign"
  }, {
    "id": 185,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 186,
    "text": "local function getSmells(AST_list)\r\n\r\n\t-- table with number keys (1,2,3,....) and values (file name, smells, upvalues)\r\n\tlocal result = {}\r\n\r\n\t-- loop throught list of file AST\r\n\tfor file, ast in pairs(AST_list) do\r\n\t\tlocal smellsTable = {tableSmells = {manyFields = {count = 0}, depth = {count = 0}}, functionSmells = {count = 0}}\r\n\t\trecursive(ast, {level = 0, parents = {}}, {level = 0, parents = {}}, smellsTable)\r\n\t\t-- get upvalues from blockdata\r\n\t\tlocal upvalues = getUpvalues(ast)\r\n\t\ttable.insert(result, {file = file, smells = smellsTable, upvalues = upvalues})\r\n\r\n\tend\r\n\r\n\treturn result\r\n\r\nend",
    "type": "function"
  }, {
    "id": 187,
    "text": "local result = {}",
    "type": "statement:localassign"
  }, {
    "id": 188,
    "text": "for file, ast in pairs(AST_list) do\r\n\t\tlocal smellsTable = {tableSmells = {manyFields = {count = 0}, depth = {count = 0}}, functionSmells = {count = 0}}\r\n\t\trecursive(ast, {level = 0, parents = {}}, {level = 0, parents = {}}, smellsTable)\r\n\t\t-- get upvalues from blockdata\r\n\t\tlocal upvalues = getUpvalues(ast)\r\n\t\ttable.insert(result, {file = file, smells = smellsTable, upvalues = upvalues})\r\n\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 189,
    "text": "local smellsTable = {tableSmells = {manyFields = {count = 0}, depth = {count = 0}}, functionSmells = {count = 0}}",
    "type": "statement:localassign"
  }, {
    "id": 190,
    "text": "recursive(ast, {level = 0, parents = {}}, {level = 0, parents = {}}, smellsTable)",
    "type": "statement:functioncall"
  }, {
    "id": 191,
    "text": "local upvalues = getUpvalues(ast)",
    "type": "statement:localassign"
  }, {
    "id": 192,
    "text": "table.insert(result, {file = file, smells = smellsTable, upvalues = upvalues})",
    "type": "statement:functioncall"
  }, {
    "id": 193,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 194,
    "text": "function(data) countFileSmells(data) return data end",
    "type": "function"
  }, {
    "id": 195,
    "text": "countFileSmells(data)",
    "type": "statement:functioncall"
  }, {
    "id": 196,
    "text": "",
    "type": "function container"
  }, {
    "id": 197,
    "text": "function doGlobalMetrics(file_metricsAST_list)\r\n\r\n\t-- keep AST lists\r\n\tlocal returnObject = {}\r\n\treturnObject.file_AST_list = file_metricsAST_list\r\n\r\n\t--- function declarations\r\n\tlocal total_function_definitions = {}\r\n\r\n\tlocal anonymouscounter=0   -- for naming anonymous functions\r\n\tlocal anonymouscounterT = 0 -- for naming anonymous  tables\r\n\tfor filename, AST in pairs(file_metricsAST_list) do\r\n\t\tfor _, fun in pairs(AST.metrics.blockdata.fundefs) do\r\n\r\n\t\t\t-- edit to suit luadoc expectations\r\n\t\t\tif (fun.tag == 'GlobalFunction' or fun.tag == 'LocalFunction' or fun.tag == 'Function') then\r\n-- anonymous function type\r\n\t\t\t\tif(fun.name==\"#anonymous#\")then\r\n\t\t\t\t\tanonymouscounter=anonymouscounter+1\r\n\t\t\t\t\tfun.name = fun.name .. anonymouscounter\r\n\t\t\t\t\tfun.path = filename\r\n\t\t\t\telseif(fun.name:match(\"[%.%[]\") or fun.isGlobal==nil)then\r\n-- table-field function type\r\n\t\t\t\t\tfun.fcntype = 'table-field'\r\n\t\t\t\telseif (fun.isGlobal) then fun.fcntype = 'global' else fun.fcntype = 'local' end\r\n\t\t\t\t\tfun.path = filename\r\n\t\t\t\t\ttable.insert(total_function_definitions, fun)\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\ttable.sort(total_function_definitions, utils.compare_functions_by_name)\r\n\treturnObject.functionDefinitions = total_function_definitions\r\n\r\n\r\n-- ^ `tables` list of tables in files , concatenate luaDoc_tables and docutables\r\n\tlocal total_table_definitions = {}\r\n\tlocal set = {}\r\n\tfor filename, AST in pairs(file_metricsAST_list) do\r\n\r\n\t-- concatenate two tables by  Exp node tables\r\n\r\n\t\tfor k,tabl in pairs(AST.luaDoc_tables) do\r\n\t\t\ttabl.path=filename\r\n\t\t\ttabl.name = k\r\n\t\t\ttable.insert(total_table_definitions, tabl)\r\n\t\t\tset[tabl] = true\r\n\t\tend\r\n\t\tfor k,tabl in pairs(AST.metrics.docutables) do\r\n\t\t\tif(tabl.ttype==\"anonymous\")then\r\n\t\t\t\tanonymouscounterT=anonymouscounterT+1\r\n\t\t\t \ttabl.name = tabl.name .. anonymouscounterT\r\n\t\t\tend\r\n\t\t\tif (not tabl.Expnode) then\r\n\t\t\t \ttabl.path = filename\r\n\t\t\t\ttable.insert(total_table_definitions, tabl)\r\n\t\t\telseif(set[tabl.Expnode]~=true)then\r\n\t\t\t\ttabl.path = filename\r\n\t\t\t\ttable.insert(total_table_definitions, tabl)\r\n\t\t\t\tset[tabl.Expnode] = true\r\n\t\t\tend\r\n\t\tend\r\n \tend\r\n\treturnObject.tables = total_table_definitions\r\n\r\n\r\n\r\n\t-- merge number of lines metrics\r\n\treturnObject.LOC = {}\r\n\r\n\tfor filename, AST in pairs(file_metricsAST_list) do\r\n\r\n\t\tfor name, count in pairs(AST.metrics.LOC) do\r\n\t\t\tif not returnObject.LOC[name] then returnObject.LOC[name] = 0 end\r\n\t\t\treturnObject.LOC[name] = returnObject.LOC[name] + count\r\n\t\tend\r\n\r\n\tend\r\n\t-- combine halstead metrics\r\n\r\n\tlocal operators, operands = {}, {}\r\n\r\n\tfor filename, AST in pairs(file_metricsAST_list) do\r\n\t\tfor name, count in pairs(AST.metrics.halstead.operators) do\r\n\t\t\tif (operators[name] == nil) then\r\n\t\t\t\toperators[name] = count\r\n\t\t\telse\r\n\t\t\t\toperators[name] = operators[name] + count\r\n\t\t\tend\r\n\t\tend\r\n\t\tfor name, count in pairs(AST.metrics.halstead.operands) do\r\n\t\t\tif (operands[name] == nil) then\r\n\t\t\t\toperands[name] = count\r\n\t\t\telse\r\n\t\t\t\toperands[name] = operands[name] + count\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\r\n\tlocal number_of_operators = 0\r\n\tlocal unique_operators = 0\r\n\tfor op, count in pairs(operators) do\r\n\t\tunique_operators = unique_operators + 1\r\n\t\tnumber_of_operators = number_of_operators + count\r\n\tend\r\n\r\n\tlocal number_of_operands = 0\r\n\tlocal unique_operands = 0\r\n\tfor op, count in pairs(operands) do\r\n\t\tunique_operands = unique_operands + 1\r\n\t\tnumber_of_operands = number_of_operands + count\r\n\tend\r\n\r\n\treturnObject.halstead = {}\r\n\r\n\thalstead_capt.calculateHalstead(returnObject.halstead, operators, operands)\r\n\r\n\t-- instability metric for each module\r\n\t-- \t\tafferent and efferent coupling --- instability metric\r\n\t-- \t\tafferent - connection to other modules\r\n\t-- \t\tefferent - connetions from other modules\r\n\r\n\tfor currentFilename, currentAST in pairs(file_metricsAST_list) do\r\n\r\n\t\tcurrentAST.metrics.coupling = {}\r\n\t\tcurrentAST.metrics.coupling.afferent_coupling = 0\r\n\t\tcurrentAST.metrics.coupling.efferent_coupling = 0\r\n\r\n\t\tlocal currentName = currentAST.metrics.currentModuleName or filename\r\n\r\n\t\tfor name in pairs(currentAST.metrics.moduleCalls) do\r\n\t\t\tcurrentAST.metrics.coupling.afferent_coupling = currentAST.metrics.coupling.afferent_coupling + 1\r\n\t\tend\r\n\r\n\t\tfor filename, AST in pairs(file_metricsAST_list) do\r\n\t\t\tif (filename ~= currentFilename) then\r\n\t\t\t\tif (AST.metrics.moduleCalls[currentName]) then currentAST.metrics.coupling.efferent_coupling = currentAST.metrics.coupling.efferent_coupling + 1 end\r\n\t\t\tend\r\n\t\tend\r\n\r\n\t\tcurrentAST.metrics.coupling.instability = currentAST.metrics.coupling.afferent_coupling / (currentAST.metrics.coupling.efferent_coupling + currentAST.metrics.coupling.afferent_coupling)\r\n\r\n\tend\r\n\r\n\t-- statement metrics\r\n\r\n\treturnObject.statements = {}\r\n\r\n\tfor filename, AST in pairs(file_metricsAST_list) do\r\n\r\n\t\tfor name, stats in pairs(AST.metrics.statements) do\r\n\t\t\tif not returnObject.statements[name] then returnObject.statements[name] = {} end\r\n\t\t\tfor _, stat in pairs(stats) do\r\n\t\t\t\ttable.insert(returnObject.statements[name], stat)\r\n\t\t\tend\r\n\t\tend\r\n\r\n\tend\r\n\r\n\t-- merge moduleDefinitions\r\n\treturnObject.moduleDefinitions = {}\r\n\r\n\tfor filename, AST in pairs(file_metricsAST_list) do\r\n\t\tfor exec, moduleRef in pairs(AST.metrics.moduleDefinitions) do\r\n\t\t\tif (moduleRef.moduleName) then\r\n\t\t\t\ttable.insert(returnObject.moduleDefinitions, moduleRef)\r\n\t\t\tend\r\n\t\tend\r\n\r\n\tend\r\n\r\n\r\n\t--merge document metrics\r\n\treturnObject.documentMetrics={}\r\n\tfor filename, AST in pairs(file_metricsAST_list) do\r\n\t\tfor name, count in pairs(AST.metrics.documentMetrics) do\r\n\t\t\tif( type(count)==\"table\")then\r\n\t\t\t\tif not returnObject.documentMetrics[name] then returnObject.documentMetrics[name]={} end\r\n\t\t\t\tfor _,v in pairs(count) do\r\n\t\t\t\t\ttable.insert(returnObject.documentMetrics[name],v)\r\n\t\t\t\tend\r\n\t\t\telse\r\n\t\t\t\tif not returnObject.documentMetrics[name] then returnObject.documentMetrics[name] = 0 end\r\n\t\t\t\treturnObject.documentMetrics[name]=returnObject.documentMetrics[name]+count\r\n\t\t\tend\r\n\t\tend\r\n\tend\t\t\r\n  \r\n  --merge code smells\r\n  returnObject.documentSmells = {} --Document smells sub-table\r\n  returnObject.documentSmells.MI = smells_capt.countMI(file_metricsAST_list) --Add maintainability index\r\n  returnObject.documentSmells.functionSmells = smells_capt.countFunctionSmells(file_metricsAST_list) --Add function smells eg: LOC, cyclomatic, halstead etc.\r\n  returnObject.documentSmells.moduleSmells = {} --Module smells sub-table\r\n  returnObject.documentSmells.smellsTable = smells_capt.getSmells(file_metricsAST_list)\r\n\r\n\r\n  for filename, AST in pairs(file_metricsAST_list) do --Merge smells in modules to sub-table\r\n    table.insert(returnObject.documentSmells.moduleSmells, {file = filename, RFC = AST.smells.RFC, WMC = AST.smells.WMC, NOM = AST.smells.NOM, responseToNOM = AST.smells.responseToNOM, CBO = AST.smells.CBO, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlongLines = AST.smells.longLines })\r\n  end\r\n\r\n\treturn returnObject\r\nend",
    "type": "function"
  }, {
    "id": 198,
    "text": "math",
    "type": "module"
  }, {
    "id": 199,
    "text": "log",
    "type": "global function"
  }, {
    "id": 200,
    "text": "floor",
    "type": "global function"
  }, {
    "id": 201,
    "text": "sqrt",
    "type": "global function"
  }, {
    "id": 202,
    "text": "sin",
    "type": "global function"
  }, {
    "id": 203,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 204,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 205,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 206,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 207,
    "text": "gmatch",
    "type": "global function"
  }, {
    "id": 208,
    "text": "require",
    "type": "global function"
  }, {
    "id": 209,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 210,
    "text": "",
    "type": "global variable"
  }, {
    "id": 211,
    "text": "",
    "type": "variable container"
  }, {
    "id": 212,
    "text": "",
    "type": "require container"
  }, {
    "id": 213,
    "text": "",
    "type": "local variable"
  }, {
    "id": 214,
    "text": "",
    "type": "n/a"
  }, {
    "id": 215,
    "text": "",
    "type": "local variable"
  }, {
    "id": 216,
    "text": "",
    "type": "n/a"
  }, {
    "id": 217,
    "text": "",
    "type": "local variable"
  }, {
    "id": 218,
    "text": "",
    "type": "n/a"
  }, {
    "id": 219,
    "text": "",
    "type": "local variable"
  }, {
    "id": 220,
    "text": "",
    "type": "number"
  }, {
    "id": 221,
    "text": "",
    "type": "local variable"
  }, {
    "id": 222,
    "text": "",
    "type": "number"
  }, {
    "id": 223,
    "text": "",
    "type": "local variable"
  }, {
    "id": 224,
    "text": "",
    "type": "number"
  }, {
    "id": 225,
    "text": "",
    "type": "local variable"
  }, {
    "id": 226,
    "text": "",
    "type": "number"
  }, {
    "id": 227,
    "text": "",
    "type": "local variable"
  }, {
    "id": 228,
    "text": "",
    "type": "number"
  }, {
    "id": 229,
    "text": "",
    "type": "local variable"
  }, {
    "id": 230,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 231,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 232,
    "text": "",
    "type": "function"
  }, {
    "id": 233,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 234,
    "text": "",
    "type": "interface container"
  }, {
    "id": 235,
    "text": "",
    "type": "interface"
  }, {
    "id": 236,
    "text": "",
    "type": "interface"
  }, {
    "id": 237,
    "text": "",
    "type": "interface"
  }, {
    "id": 238,
    "text": "",
    "type": "interface"
  }, {
    "id": 239,
    "text": "",
    "type": "interface"
  }, {
    "id": 240,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 241,
    "text": "",
    "type": "interface"
  } ]
}