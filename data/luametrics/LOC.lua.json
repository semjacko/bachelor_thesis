{
  "_filename": "LOC.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luametrics/src/metrics/captures/LOC.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 15,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 21,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 33
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 26,
    "label": "has",
    "to": 37
  }, {
    "from": 25,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 38,
    "label": "has",
    "to": 43
  }, {
    "from": 38,
    "label": "has",
    "to": 44
  }, {
    "from": 38,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 38,
    "label": "has",
    "to": 47
  }, {
    "from": 38,
    "label": "has",
    "to": 48
  }, {
    "from": 38,
    "label": "has",
    "to": 49
  }, {
    "from": 38,
    "label": "has",
    "to": 50
  }, {
    "from": 38,
    "label": "has",
    "to": 51
  }, {
    "from": 38,
    "label": "has",
    "to": 52
  }, {
    "from": 21,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 46
  }, {
    "from": 53,
    "label": "has",
    "to": 47
  }, {
    "from": 53,
    "label": "has",
    "to": 48
  }, {
    "from": 53,
    "label": "has",
    "to": 56
  }, {
    "from": 53,
    "label": "has",
    "to": 57
  }, {
    "from": 53,
    "label": "has",
    "to": 51
  }, {
    "from": 53,
    "label": "has",
    "to": 52
  }, {
    "from": 21,
    "label": "has",
    "to": 43
  }, {
    "from": 21,
    "label": "has",
    "to": 58
  }, {
    "from": 21,
    "label": "has",
    "to": 59
  }, {
    "from": 21,
    "label": "has",
    "to": 60
  }, {
    "from": 21,
    "label": "has",
    "to": 61
  }, {
    "from": 21,
    "label": "has",
    "to": 62
  }, {
    "from": 21,
    "label": "has",
    "to": 63
  }, {
    "from": 21,
    "label": "has",
    "to": 64
  }, {
    "from": 21,
    "label": "has",
    "to": 65
  }, {
    "from": 21,
    "label": "has",
    "to": 66
  }, {
    "from": 21,
    "label": "has",
    "to": 67
  }, {
    "from": 21,
    "label": "has",
    "to": 68
  }, {
    "from": 21,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 69,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 75,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 75,
    "label": "has",
    "to": 80
  }, {
    "from": 75,
    "label": "has",
    "to": 81
  }, {
    "from": 69,
    "label": "has",
    "to": 82
  }, {
    "from": 69,
    "label": "has",
    "to": 83
  }, {
    "from": 69,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 15,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 15,
    "label": "has",
    "to": 88
  }, {
    "from": 15,
    "label": "has",
    "to": 89
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 90,
    "label": "has",
    "to": 93
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 94,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 94,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 98,
    "label": "has",
    "to": 101
  }, {
    "from": 94,
    "label": "has",
    "to": 102
  }, {
    "from": 94,
    "label": "has",
    "to": 92
  }, {
    "from": 94,
    "label": "has",
    "to": 103
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 104,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 91
  }, {
    "from": 108,
    "label": "has",
    "to": 92
  }, {
    "from": 104,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 95
  }, {
    "from": 109,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 109,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 98,
    "label": "has",
    "to": 101
  }, {
    "from": 109,
    "label": "has",
    "to": 102
  }, {
    "from": 109,
    "label": "has",
    "to": 92
  }, {
    "from": 104,
    "label": "has",
    "to": 92
  }, {
    "from": 104,
    "label": "has",
    "to": 110
  }, {
    "from": 15,
    "label": "calls",
    "to": 11
  }, {
    "from": 15,
    "label": "calls",
    "to": 11
  }, {
    "from": 15,
    "label": "calls",
    "to": 11
  }, {
    "from": 15,
    "label": "calls",
    "to": 11
  }, {
    "from": 15,
    "label": "calls",
    "to": 11
  }, {
    "from": 15,
    "label": "calls",
    "to": 11
  }, {
    "from": 15,
    "label": "calls",
    "to": 11
  }, {
    "from": 15,
    "label": "calls",
    "to": 11
  }, {
    "from": 15,
    "label": "calls",
    "to": 11
  }, {
    "from": 15,
    "label": "calls",
    "to": 11
  }, {
    "from": 15,
    "label": "calls",
    "to": 11
  }, {
    "from": 15,
    "label": "calls",
    "to": 11
  }, {
    "from": 15,
    "label": "calls",
    "to": 11
  }, {
    "from": 15,
    "label": "calls",
    "to": 11
  }, {
    "from": 15,
    "label": "calls",
    "to": 11
  }, {
    "from": 15,
    "label": "calls",
    "to": 11
  }, {
    "from": 15,
    "label": "calls",
    "to": 11
  }, {
    "from": 15,
    "label": "calls",
    "to": 11
  }, {
    "from": 15,
    "label": "calls",
    "to": 11
  }, {
    "from": 15,
    "label": "calls",
    "to": 11
  }, {
    "from": 15,
    "label": "calls",
    "to": 11
  }, {
    "from": 15,
    "label": "calls",
    "to": 11
  }, {
    "from": 15,
    "label": "calls",
    "to": 11
  }, {
    "from": 15,
    "label": "calls",
    "to": 11
  }, {
    "from": 15,
    "label": "calls",
    "to": 11
  }, {
    "from": 15,
    "label": "calls",
    "to": 11
  }, {
    "from": 15,
    "label": "calls",
    "to": 11
  }, {
    "from": 15,
    "label": "calls",
    "to": 11
  }, {
    "from": 15,
    "label": "calls",
    "to": 11
  }, {
    "from": 15,
    "label": "calls",
    "to": 11
  }, {
    "from": 15,
    "label": "calls",
    "to": 11
  }, {
    "from": 15,
    "label": "calls",
    "to": 11
  }, {
    "from": 15,
    "label": "calls",
    "to": 115
  }, {
    "from": 15,
    "label": "calls",
    "to": 115
  }, {
    "from": 111,
    "label": "calls",
    "to": 115
  }, {
    "from": 111,
    "label": "calls",
    "to": 115
  }, {
    "from": 15,
    "label": "calls",
    "to": 3
  }, {
    "from": 15,
    "label": "calls",
    "to": 3
  }, {
    "from": 3,
    "label": "calls",
    "to": 116
  }, {
    "from": 111,
    "label": "calls",
    "to": 117
  }, {
    "from": 111,
    "label": "calls",
    "to": 15
  }, {
    "from": 111,
    "label": "calls",
    "to": 15
  }, {
    "from": 15,
    "label": "calls",
    "to": 118
  }, {
    "from": 15,
    "label": "calls",
    "to": 118
  }, {
    "from": 111,
    "label": "calls",
    "to": 119
  }, {
    "from": 111,
    "label": "calls",
    "to": 119
  }, {
    "from": 111,
    "label": "calls",
    "to": 119
  }, {
    "from": 3,
    "label": "calls",
    "to": 113
  }, {
    "from": 15,
    "label": "calls",
    "to": 112
  }, {
    "from": 15,
    "label": "calls",
    "to": 112
  }, {
    "from": 15,
    "label": "calls",
    "to": 112
  }, {
    "from": 1,
    "label": "contains",
    "to": 111
  }, {
    "from": 111,
    "label": "declares",
    "to": 3
  }, {
    "from": 111,
    "label": "declares",
    "to": 11
  }, {
    "from": 111,
    "label": "declares",
    "to": 15
  }, {
    "from": 111,
    "label": "declares",
    "to": 90
  }, {
    "from": 111,
    "label": "declares",
    "to": 94
  }, {
    "from": 111,
    "label": "declares",
    "to": 104
  }, {
    "from": 1,
    "label": "contains",
    "to": 120
  }, {
    "from": 1,
    "label": "contains",
    "to": 121
  }, {
    "from": 120,
    "label": "initializes",
    "to": 122
  }, {
    "from": 122,
    "label": "assigns",
    "to": 123
  }, {
    "from": 120,
    "label": "initializes",
    "to": 124
  }, {
    "from": 124,
    "label": "assigns",
    "to": 125
  }, {
    "from": 120,
    "label": "initializes",
    "to": 126
  }, {
    "from": 126,
    "label": "assigns",
    "to": 127
  }, {
    "from": 120,
    "label": "initializes",
    "to": 128
  }, {
    "from": 128,
    "label": "assigns",
    "to": 129
  }, {
    "from": 120,
    "label": "initializes",
    "to": 130
  }, {
    "from": 130,
    "label": "assigns",
    "to": 131
  }, {
    "from": 120,
    "label": "initializes",
    "to": 132
  }, {
    "from": 132,
    "label": "assigns",
    "to": 133
  }, {
    "from": 120,
    "label": "initializes",
    "to": 134
  }, {
    "from": 134,
    "label": "assigns",
    "to": 135
  }, {
    "from": 120,
    "label": "initializes",
    "to": 136
  }, {
    "from": 136,
    "label": "assigns",
    "to": 137
  }, {
    "from": 121,
    "label": "initializes",
    "to": 138
  }, {
    "from": 138,
    "label": "requires",
    "to": 114
  }, {
    "from": 121,
    "label": "initializes",
    "to": 139
  }, {
    "from": 139,
    "label": "requires",
    "to": 2
  }, {
    "from": 140,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "LOC",
    "type": "module"
  }, {
    "id": 2,
    "text": "utils",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function alterNode(node, block)\r\n\tlocal comment, fullComment = utils.getComment(block)\r\n\tlocal index = string.find(fullComment, '\\n')\r\n\tif (index) then\r\n\t\tnode.metrics.LOC.lines  = node.metrics.LOC.lines - 1\r\n\t\tnode.metrics.LOC.lines_code  = node.metrics.LOC.lines_code - 1\r\n\t\tnode.metrics.LOC.lines_nonempty  = node.metrics.LOC.lines_nonempty - 1\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local comment, fullComment = utils.getComment(block)",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local index = string.find(fullComment, '\\n')",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "if (index) then\r\n\t\tnode.metrics.LOC.lines  = node.metrics.LOC.lines - 1\r\n\t\tnode.metrics.LOC.lines_code  = node.metrics.LOC.lines_code - 1\r\n\t\tnode.metrics.LOC.lines_nonempty  = node.metrics.LOC.lines_nonempty - 1\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "node.metrics.LOC.lines  = node.metrics.LOC.lines - 1",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "node.metrics.LOC.lines_code  = node.metrics.LOC.lines_code - 1",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "node.metrics.LOC.lines_nonempty  = node.metrics.LOC.lines_nonempty - 1",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "local function addCount(array, name, count)\r\n\tif (array) then\r\n\t\tarray[name] = array[name] + count\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "if (array) then\r\n\t\tarray[name] = array[name] + count\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "array[name] = array[name] + count",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "local function doMetrics(node)\r\n\tlocal children = node.data\r\n\tlocal key, value\r\n\tlocal moduleMetrics = nil\r\n\t\r\n\tlocal LOC = {\r\n\t\tlines = 0\t\t\t\t-- total number of lines\r\n\t\r\n\t\t,lines_nonempty = 0\t\t-- number of non-empty lines ( code or comments )\r\n\t\t,lines_blank = 0\t\t-- number of empty lines \r\n\t\r\n\t\t,lines_code = 0\t\t\t-- number of lines with code ( nonempty without comments ) ( comment can be at the end of line )\r\n\t\t,lines_comment = 0\t\t-- number of comment lines ( inline too )\r\n\t}\r\n\t\r\n\tfor key, value in pairs(children) do\r\n\t\r\n\t\tif (value.tag == 'IGNORED') then\r\n\t\t\t\r\n\t\t\t-- IGNORED means whitespace\r\n\t\t\t-- count number of lines and other measures\r\n\t\t\t\r\n\t\t\tlocal only_newline = false\r\n\t\t\tlocal only_comment = false\r\n\t\t\t\r\n\t\t\tlocal children, key, value = value.data\r\n\t\t\tfor key, value in pairs(children) do\r\n\t\t\t\r\n\t\t\t\tif (value.tag == 'NEWLINE') then \r\n\t\t\t\t\taddCount(LOC, 'lines', 1)\r\n\t\t\t\t\taddCount(moduleMetrics, 'lines', 1)\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (only_newline) then\r\n\t\t\t\t\t\taddCount(LOC, 'lines_blank', 1)\r\n\t\t\t\t\t\taddCount(moduleMetrics, 'lines_blank', 1)\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\taddCount(LOC, 'lines_nonempty', 1)\r\n\t\t\t\t\t\taddCount(moduleMetrics, 'lines_nonempty', 1)\r\n\t\t\t\t\t\tif (not only_comment) then\r\n\t\t\t\t\t\t\taddCount(LOC, 'lines_code', 1)\r\n\t\t\t\t\t\t\taddCount(moduleMetrics, 'lines_code', 1)\r\n\t\t\t\t\t\tend\t\r\n\t\t\t\t\tend\t\r\n\t\t\t\t\tonly_newline = true\r\n\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\t\tif (value.tag == 'COMMENT') then\r\n\t\t\t\t\taddCount(LOC, 'lines_comment', 1)\r\n\t\t\t\t\taddCount(moduleMetrics, 'lines_comment', 1)\r\n\t\t\t\t\tif (only_newline) then\r\n\t\t\t\t\t\tonly_comment = true\r\n\t\t\t\t\tend\r\n\t\t\t\t\tonly_newline = false\r\n\t\t\t\t\t\r\n\t\t\t\t\t-- count number of lines in multiline comments\r\n\t\t\t\t\tlocal count = 0\r\n\t\t\t\t\tfor w in string.gmatch(value.text, \"\\n\") do\r\n\t\t\t\t\t\tcount = count + 1\t\t\t\t\t\t\r\n\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\t\taddCount(LOC, 'lines', count)\r\n\t\t\t\t\taddCount(moduleMetrics, 'lines', count)\r\n\t\t\t\t\taddCount(LOC, 'lines_comment', count)\r\n\t\t\t\t\taddCount(moduleMetrics, 'lines_comment', count)\r\n\t\t\t\t\taddCount(LOC, 'lines_nonempty', count) -- BLANK ??\r\n\t\t\t\t\taddCount(moduleMetrics, 'lines_nonempty', count) \r\n\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\tend\t\t\t\r\n\t\t\t\r\n\t\telse \r\n\t\t\t\r\n\t\t\tif (value.tag == 'STRING') then\r\n\t\t\t\tlocal count =0\r\n\t\t\t\tfor w in string.gmatch(value.text, \"\\n\") do\r\n\t\t\t\t\tcount = count + 1\r\n\t\t\t\tend\r\n\t\t\t\taddCount(LOC, 'lines', count)\r\n\t\t\t\taddCount(moduleMetrics, 'lines', count)\r\n\t\t\t\taddCount(LOC, 'lines_code', count)\r\n\t\t\t\taddCount(moduleMetrics, 'lines_code', count)\r\n\t\t\t\taddCount(LOC, 'lines_nonempty', count)\r\n\t\t\t\taddCount(moduleMetrics, 'lines_nonempty', count) \r\n\t\t\tend\r\n\t\t\t\r\n\t\t\t-- TRY MODULE DEFINITION\r\n\r\n\t\t\tonly_newline = false\r\n\t\t\tonly_comment = false\r\n\t\t\r\n\t\t\taddCount(LOC, 'lines', value.metrics.LOC.lines)\r\n\t\t\taddCount(LOC, 'lines_comment', value.metrics.LOC.lines_comment)\r\n\t\t\taddCount(LOC, 'lines_blank', value.metrics.LOC.lines_blank)\r\n\t\t\taddCount(LOC, 'lines_nonempty', value.metrics.LOC.lines_nonempty)\r\n\t\t\taddCount(LOC, 'lines_code', value.metrics.LOC.lines_code)\r\n\t\t\t\r\n\t\t\taddCount(moduleMetrics, 'lines', value.metrics.LOC.lines)\r\n\t\t\taddCount(moduleMetrics, 'lines_comment', value.metrics.LOC.lines_comment)\r\n\t\t\taddCount(moduleMetrics, 'lines_blank', value.metrics.LOC.lines_blank)\r\n\t\t\taddCount(moduleMetrics, 'lines_nonempty', value.metrics.LOC.lines_nonempty)\r\n\t\t\taddCount(moduleMetrics, 'lines_code', value.metrics.LOC.lines_code)\r\n\t\t\t\r\n\t\t\tif (value.tag == 'Stat') then\r\n\t\t\t\tlocal stat = value.data[1]\r\n\t\t\t\tlocal block = utils.searchForTagItem('Block', stat.data)\r\n\t\t\t\tif (block) then\r\n\t\t\t\t\talterNode(stat, block)\r\n\t\t\t\tend\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif (stat.tag == 'FunctionCall') then\r\n\t\t\t\tif (stat.data[1].data[1].text == 'module') then\r\n\t\t\t\t\tlocal exec = stat.data[1]\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleDefinitions[exec] = {}\r\n\t\t\t\t\tif (moduleDefinitions[exec].metrics == nil) then moduleDefinitions[exec].metrics = {} end\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleDefinitions[exec].LOC = {\r\n\t\t\t\t\t\tlines = 0,\r\n\t\t\t\t\t\tlines_comment = 0,\r\n\t\t\t\t\t\tlines_code = 0,\r\n\t\t\t\t\t\tlines_blank = 0,\r\n\t\t\t\t\t\tlines_nonempty = 0\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleMetrics = moduleDefinitions[exec].LOC\r\n\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\tend\r\n\t\t\t\t\r\n\t\t\telseif (value.tag == 'GlobalFunction' or value.tag == 'LocalFunction' or value.tag == 'Function') then\r\n\t\t\t\tlocal funcbody = utils.searchForTagItem('FuncBody', value.data)\r\n\t\t\t\tlocal block = utils.searchForTagItem('Block', funcbody.data)\r\n\t\t\t\tif (block) then\r\n\t\t\t\t\talterNode(value, block)\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\t\r\n\tend\r\n\t\r\n\tif (node.metrics == nil) then node.metrics = {} end\r\n\tnode.metrics.LOC \t\t\t\t= LOC\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "local children = node.data",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "local key, value",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "local moduleMetrics = nil",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "local LOC = {\r\n\t\tlines = 0\t\t\t\t-- total number of lines\r\n\t\r\n\t\t,lines_nonempty = 0\t\t-- number of non-empty lines ( code or comments )\r\n\t\t,lines_blank = 0\t\t-- number of empty lines \r\n\t\r\n\t\t,lines_code = 0\t\t\t-- number of lines with code ( nonempty without comments ) ( comment can be at the end of line )\r\n\t\t,lines_comment = 0\t\t-- number of comment lines ( inline too )\r\n\t}",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "for key, value in pairs(children) do\r\n\t\r\n\t\tif (value.tag == 'IGNORED') then\r\n\t\t\t\r\n\t\t\t-- IGNORED means whitespace\r\n\t\t\t-- count number of lines and other measures\r\n\t\t\t\r\n\t\t\tlocal only_newline = false\r\n\t\t\tlocal only_comment = false\r\n\t\t\t\r\n\t\t\tlocal children, key, value = value.data\r\n\t\t\tfor key, value in pairs(children) do\r\n\t\t\t\r\n\t\t\t\tif (value.tag == 'NEWLINE') then \r\n\t\t\t\t\taddCount(LOC, 'lines', 1)\r\n\t\t\t\t\taddCount(moduleMetrics, 'lines', 1)\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (only_newline) then\r\n\t\t\t\t\t\taddCount(LOC, 'lines_blank', 1)\r\n\t\t\t\t\t\taddCount(moduleMetrics, 'lines_blank', 1)\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\taddCount(LOC, 'lines_nonempty', 1)\r\n\t\t\t\t\t\taddCount(moduleMetrics, 'lines_nonempty', 1)\r\n\t\t\t\t\t\tif (not only_comment) then\r\n\t\t\t\t\t\t\taddCount(LOC, 'lines_code', 1)\r\n\t\t\t\t\t\t\taddCount(moduleMetrics, 'lines_code', 1)\r\n\t\t\t\t\t\tend\t\r\n\t\t\t\t\tend\t\r\n\t\t\t\t\tonly_newline = true\r\n\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\t\tif (value.tag == 'COMMENT') then\r\n\t\t\t\t\taddCount(LOC, 'lines_comment', 1)\r\n\t\t\t\t\taddCount(moduleMetrics, 'lines_comment', 1)\r\n\t\t\t\t\tif (only_newline) then\r\n\t\t\t\t\t\tonly_comment = true\r\n\t\t\t\t\tend\r\n\t\t\t\t\tonly_newline = false\r\n\t\t\t\t\t\r\n\t\t\t\t\t-- count number of lines in multiline comments\r\n\t\t\t\t\tlocal count = 0\r\n\t\t\t\t\tfor w in string.gmatch(value.text, \"\\n\") do\r\n\t\t\t\t\t\tcount = count + 1\t\t\t\t\t\t\r\n\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\t\taddCount(LOC, 'lines', count)\r\n\t\t\t\t\taddCount(moduleMetrics, 'lines', count)\r\n\t\t\t\t\taddCount(LOC, 'lines_comment', count)\r\n\t\t\t\t\taddCount(moduleMetrics, 'lines_comment', count)\r\n\t\t\t\t\taddCount(LOC, 'lines_nonempty', count) -- BLANK ??\r\n\t\t\t\t\taddCount(moduleMetrics, 'lines_nonempty', count) \r\n\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\tend\t\t\t\r\n\t\t\t\r\n\t\telse \r\n\t\t\t\r\n\t\t\tif (value.tag == 'STRING') then\r\n\t\t\t\tlocal count =0\r\n\t\t\t\tfor w in string.gmatch(value.text, \"\\n\") do\r\n\t\t\t\t\tcount = count + 1\r\n\t\t\t\tend\r\n\t\t\t\taddCount(LOC, 'lines', count)\r\n\t\t\t\taddCount(moduleMetrics, 'lines', count)\r\n\t\t\t\taddCount(LOC, 'lines_code', count)\r\n\t\t\t\taddCount(moduleMetrics, 'lines_code', count)\r\n\t\t\t\taddCount(LOC, 'lines_nonempty', count)\r\n\t\t\t\taddCount(moduleMetrics, 'lines_nonempty', count) \r\n\t\t\tend\r\n\t\t\t\r\n\t\t\t-- TRY MODULE DEFINITION\r\n\r\n\t\t\tonly_newline = false\r\n\t\t\tonly_comment = false\r\n\t\t\r\n\t\t\taddCount(LOC, 'lines', value.metrics.LOC.lines)\r\n\t\t\taddCount(LOC, 'lines_comment', value.metrics.LOC.lines_comment)\r\n\t\t\taddCount(LOC, 'lines_blank', value.metrics.LOC.lines_blank)\r\n\t\t\taddCount(LOC, 'lines_nonempty', value.metrics.LOC.lines_nonempty)\r\n\t\t\taddCount(LOC, 'lines_code', value.metrics.LOC.lines_code)\r\n\t\t\t\r\n\t\t\taddCount(moduleMetrics, 'lines', value.metrics.LOC.lines)\r\n\t\t\taddCount(moduleMetrics, 'lines_comment', value.metrics.LOC.lines_comment)\r\n\t\t\taddCount(moduleMetrics, 'lines_blank', value.metrics.LOC.lines_blank)\r\n\t\t\taddCount(moduleMetrics, 'lines_nonempty', value.metrics.LOC.lines_nonempty)\r\n\t\t\taddCount(moduleMetrics, 'lines_code', value.metrics.LOC.lines_code)\r\n\t\t\t\r\n\t\t\tif (value.tag == 'Stat') then\r\n\t\t\t\tlocal stat = value.data[1]\r\n\t\t\t\tlocal block = utils.searchForTagItem('Block', stat.data)\r\n\t\t\t\tif (block) then\r\n\t\t\t\t\talterNode(stat, block)\r\n\t\t\t\tend\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif (stat.tag == 'FunctionCall') then\r\n\t\t\t\tif (stat.data[1].data[1].text == 'module') then\r\n\t\t\t\t\tlocal exec = stat.data[1]\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleDefinitions[exec] = {}\r\n\t\t\t\t\tif (moduleDefinitions[exec].metrics == nil) then moduleDefinitions[exec].metrics = {} end\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleDefinitions[exec].LOC = {\r\n\t\t\t\t\t\tlines = 0,\r\n\t\t\t\t\t\tlines_comment = 0,\r\n\t\t\t\t\t\tlines_code = 0,\r\n\t\t\t\t\t\tlines_blank = 0,\r\n\t\t\t\t\t\tlines_nonempty = 0\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleMetrics = moduleDefinitions[exec].LOC\r\n\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\tend\r\n\t\t\t\t\r\n\t\t\telseif (value.tag == 'GlobalFunction' or value.tag == 'LocalFunction' or value.tag == 'Function') then\r\n\t\t\t\tlocal funcbody = utils.searchForTagItem('FuncBody', value.data)\r\n\t\t\t\tlocal block = utils.searchForTagItem('Block', funcbody.data)\r\n\t\t\t\tif (block) then\r\n\t\t\t\t\talterNode(value, block)\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\t\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 21,
    "text": "if (value.tag == 'IGNORED') then\r\n\t\t\t\r\n\t\t\t-- IGNORED means whitespace\r\n\t\t\t-- count number of lines and other measures\r\n\t\t\t\r\n\t\t\tlocal only_newline = false\r\n\t\t\tlocal only_comment = false\r\n\t\t\t\r\n\t\t\tlocal children, key, value = value.data\r\n\t\t\tfor key, value in pairs(children) do\r\n\t\t\t\r\n\t\t\t\tif (value.tag == 'NEWLINE') then \r\n\t\t\t\t\taddCount(LOC, 'lines', 1)\r\n\t\t\t\t\taddCount(moduleMetrics, 'lines', 1)\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (only_newline) then\r\n\t\t\t\t\t\taddCount(LOC, 'lines_blank', 1)\r\n\t\t\t\t\t\taddCount(moduleMetrics, 'lines_blank', 1)\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\taddCount(LOC, 'lines_nonempty', 1)\r\n\t\t\t\t\t\taddCount(moduleMetrics, 'lines_nonempty', 1)\r\n\t\t\t\t\t\tif (not only_comment) then\r\n\t\t\t\t\t\t\taddCount(LOC, 'lines_code', 1)\r\n\t\t\t\t\t\t\taddCount(moduleMetrics, 'lines_code', 1)\r\n\t\t\t\t\t\tend\t\r\n\t\t\t\t\tend\t\r\n\t\t\t\t\tonly_newline = true\r\n\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\t\tif (value.tag == 'COMMENT') then\r\n\t\t\t\t\taddCount(LOC, 'lines_comment', 1)\r\n\t\t\t\t\taddCount(moduleMetrics, 'lines_comment', 1)\r\n\t\t\t\t\tif (only_newline) then\r\n\t\t\t\t\t\tonly_comment = true\r\n\t\t\t\t\tend\r\n\t\t\t\t\tonly_newline = false\r\n\t\t\t\t\t\r\n\t\t\t\t\t-- count number of lines in multiline comments\r\n\t\t\t\t\tlocal count = 0\r\n\t\t\t\t\tfor w in string.gmatch(value.text, \"\\n\") do\r\n\t\t\t\t\t\tcount = count + 1\t\t\t\t\t\t\r\n\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\t\taddCount(LOC, 'lines', count)\r\n\t\t\t\t\taddCount(moduleMetrics, 'lines', count)\r\n\t\t\t\t\taddCount(LOC, 'lines_comment', count)\r\n\t\t\t\t\taddCount(moduleMetrics, 'lines_comment', count)\r\n\t\t\t\t\taddCount(LOC, 'lines_nonempty', count) -- BLANK ??\r\n\t\t\t\t\taddCount(moduleMetrics, 'lines_nonempty', count) \r\n\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\tend\t\t\t\r\n\t\t\t\r\n\t\telse \r\n\t\t\t\r\n\t\t\tif (value.tag == 'STRING') then\r\n\t\t\t\tlocal count =0\r\n\t\t\t\tfor w in string.gmatch(value.text, \"\\n\") do\r\n\t\t\t\t\tcount = count + 1\r\n\t\t\t\tend\r\n\t\t\t\taddCount(LOC, 'lines', count)\r\n\t\t\t\taddCount(moduleMetrics, 'lines', count)\r\n\t\t\t\taddCount(LOC, 'lines_code', count)\r\n\t\t\t\taddCount(moduleMetrics, 'lines_code', count)\r\n\t\t\t\taddCount(LOC, 'lines_nonempty', count)\r\n\t\t\t\taddCount(moduleMetrics, 'lines_nonempty', count) \r\n\t\t\tend\r\n\t\t\t\r\n\t\t\t-- TRY MODULE DEFINITION\r\n\r\n\t\t\tonly_newline = false\r\n\t\t\tonly_comment = false\r\n\t\t\r\n\t\t\taddCount(LOC, 'lines', value.metrics.LOC.lines)\r\n\t\t\taddCount(LOC, 'lines_comment', value.metrics.LOC.lines_comment)\r\n\t\t\taddCount(LOC, 'lines_blank', value.metrics.LOC.lines_blank)\r\n\t\t\taddCount(LOC, 'lines_nonempty', value.metrics.LOC.lines_nonempty)\r\n\t\t\taddCount(LOC, 'lines_code', value.metrics.LOC.lines_code)\r\n\t\t\t\r\n\t\t\taddCount(moduleMetrics, 'lines', value.metrics.LOC.lines)\r\n\t\t\taddCount(moduleMetrics, 'lines_comment', value.metrics.LOC.lines_comment)\r\n\t\t\taddCount(moduleMetrics, 'lines_blank', value.metrics.LOC.lines_blank)\r\n\t\t\taddCount(moduleMetrics, 'lines_nonempty', value.metrics.LOC.lines_nonempty)\r\n\t\t\taddCount(moduleMetrics, 'lines_code', value.metrics.LOC.lines_code)\r\n\t\t\t\r\n\t\t\tif (value.tag == 'Stat') then\r\n\t\t\t\tlocal stat = value.data[1]\r\n\t\t\t\tlocal block = utils.searchForTagItem('Block', stat.data)\r\n\t\t\t\tif (block) then\r\n\t\t\t\t\talterNode(stat, block)\r\n\t\t\t\tend\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif (stat.tag == 'FunctionCall') then\r\n\t\t\t\tif (stat.data[1].data[1].text == 'module') then\r\n\t\t\t\t\tlocal exec = stat.data[1]\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleDefinitions[exec] = {}\r\n\t\t\t\t\tif (moduleDefinitions[exec].metrics == nil) then moduleDefinitions[exec].metrics = {} end\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleDefinitions[exec].LOC = {\r\n\t\t\t\t\t\tlines = 0,\r\n\t\t\t\t\t\tlines_comment = 0,\r\n\t\t\t\t\t\tlines_code = 0,\r\n\t\t\t\t\t\tlines_blank = 0,\r\n\t\t\t\t\t\tlines_nonempty = 0\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleMetrics = moduleDefinitions[exec].LOC\r\n\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\tend\r\n\t\t\t\t\r\n\t\t\telseif (value.tag == 'GlobalFunction' or value.tag == 'LocalFunction' or value.tag == 'Function') then\r\n\t\t\t\tlocal funcbody = utils.searchForTagItem('FuncBody', value.data)\r\n\t\t\t\tlocal block = utils.searchForTagItem('Block', funcbody.data)\r\n\t\t\t\tif (block) then\r\n\t\t\t\t\talterNode(value, block)\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "local only_newline = false",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "local only_comment = false",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "local children, key, value = value.data",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "for key, value in pairs(children) do\r\n\t\t\t\r\n\t\t\t\tif (value.tag == 'NEWLINE') then \r\n\t\t\t\t\taddCount(LOC, 'lines', 1)\r\n\t\t\t\t\taddCount(moduleMetrics, 'lines', 1)\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (only_newline) then\r\n\t\t\t\t\t\taddCount(LOC, 'lines_blank', 1)\r\n\t\t\t\t\t\taddCount(moduleMetrics, 'lines_blank', 1)\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\taddCount(LOC, 'lines_nonempty', 1)\r\n\t\t\t\t\t\taddCount(moduleMetrics, 'lines_nonempty', 1)\r\n\t\t\t\t\t\tif (not only_comment) then\r\n\t\t\t\t\t\t\taddCount(LOC, 'lines_code', 1)\r\n\t\t\t\t\t\t\taddCount(moduleMetrics, 'lines_code', 1)\r\n\t\t\t\t\t\tend\t\r\n\t\t\t\t\tend\t\r\n\t\t\t\t\tonly_newline = true\r\n\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\t\tif (value.tag == 'COMMENT') then\r\n\t\t\t\t\taddCount(LOC, 'lines_comment', 1)\r\n\t\t\t\t\taddCount(moduleMetrics, 'lines_comment', 1)\r\n\t\t\t\t\tif (only_newline) then\r\n\t\t\t\t\t\tonly_comment = true\r\n\t\t\t\t\tend\r\n\t\t\t\t\tonly_newline = false\r\n\t\t\t\t\t\r\n\t\t\t\t\t-- count number of lines in multiline comments\r\n\t\t\t\t\tlocal count = 0\r\n\t\t\t\t\tfor w in string.gmatch(value.text, \"\\n\") do\r\n\t\t\t\t\t\tcount = count + 1\t\t\t\t\t\t\r\n\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\t\taddCount(LOC, 'lines', count)\r\n\t\t\t\t\taddCount(moduleMetrics, 'lines', count)\r\n\t\t\t\t\taddCount(LOC, 'lines_comment', count)\r\n\t\t\t\t\taddCount(moduleMetrics, 'lines_comment', count)\r\n\t\t\t\t\taddCount(LOC, 'lines_nonempty', count) -- BLANK ??\r\n\t\t\t\t\taddCount(moduleMetrics, 'lines_nonempty', count) \r\n\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 26,
    "text": "if (value.tag == 'NEWLINE') then \r\n\t\t\t\t\taddCount(LOC, 'lines', 1)\r\n\t\t\t\t\taddCount(moduleMetrics, 'lines', 1)\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (only_newline) then\r\n\t\t\t\t\t\taddCount(LOC, 'lines_blank', 1)\r\n\t\t\t\t\t\taddCount(moduleMetrics, 'lines_blank', 1)\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\taddCount(LOC, 'lines_nonempty', 1)\r\n\t\t\t\t\t\taddCount(moduleMetrics, 'lines_nonempty', 1)\r\n\t\t\t\t\t\tif (not only_comment) then\r\n\t\t\t\t\t\t\taddCount(LOC, 'lines_code', 1)\r\n\t\t\t\t\t\t\taddCount(moduleMetrics, 'lines_code', 1)\r\n\t\t\t\t\t\tend\t\r\n\t\t\t\t\tend\t\r\n\t\t\t\t\tonly_newline = true\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "addCount(LOC, 'lines', 1)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "addCount(moduleMetrics, 'lines', 1)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "if (only_newline) then\r\n\t\t\t\t\t\taddCount(LOC, 'lines_blank', 1)\r\n\t\t\t\t\t\taddCount(moduleMetrics, 'lines_blank', 1)\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\taddCount(LOC, 'lines_nonempty', 1)\r\n\t\t\t\t\t\taddCount(moduleMetrics, 'lines_nonempty', 1)\r\n\t\t\t\t\t\tif (not only_comment) then\r\n\t\t\t\t\t\t\taddCount(LOC, 'lines_code', 1)\r\n\t\t\t\t\t\t\taddCount(moduleMetrics, 'lines_code', 1)\r\n\t\t\t\t\t\tend\t\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "addCount(LOC, 'lines_blank', 1)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "addCount(moduleMetrics, 'lines_blank', 1)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "addCount(LOC, 'lines_nonempty', 1)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "addCount(moduleMetrics, 'lines_nonempty', 1)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "if (not only_comment) then\r\n\t\t\t\t\t\t\taddCount(LOC, 'lines_code', 1)\r\n\t\t\t\t\t\t\taddCount(moduleMetrics, 'lines_code', 1)\r\n\t\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "addCount(LOC, 'lines_code', 1)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "addCount(moduleMetrics, 'lines_code', 1)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "only_newline = true",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "if (value.tag == 'COMMENT') then\r\n\t\t\t\t\taddCount(LOC, 'lines_comment', 1)\r\n\t\t\t\t\taddCount(moduleMetrics, 'lines_comment', 1)\r\n\t\t\t\t\tif (only_newline) then\r\n\t\t\t\t\t\tonly_comment = true\r\n\t\t\t\t\tend\r\n\t\t\t\t\tonly_newline = false\r\n\t\t\t\t\t\r\n\t\t\t\t\t-- count number of lines in multiline comments\r\n\t\t\t\t\tlocal count = 0\r\n\t\t\t\t\tfor w in string.gmatch(value.text, \"\\n\") do\r\n\t\t\t\t\t\tcount = count + 1\t\t\t\t\t\t\r\n\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\t\taddCount(LOC, 'lines', count)\r\n\t\t\t\t\taddCount(moduleMetrics, 'lines', count)\r\n\t\t\t\t\taddCount(LOC, 'lines_comment', count)\r\n\t\t\t\t\taddCount(moduleMetrics, 'lines_comment', count)\r\n\t\t\t\t\taddCount(LOC, 'lines_nonempty', count) -- BLANK ??\r\n\t\t\t\t\taddCount(moduleMetrics, 'lines_nonempty', count) \r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "addCount(LOC, 'lines_comment', 1)",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "addCount(moduleMetrics, 'lines_comment', 1)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "if (only_newline) then\r\n\t\t\t\t\t\tonly_comment = true\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "only_comment = true",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "only_newline = false",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "local count = 0",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "for w in string.gmatch(value.text, \"\\n\") do\r\n\t\t\t\t\t\tcount = count + 1\t\t\t\t\t\t\r\n\t\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 46,
    "text": "count = count + 1",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "addCount(LOC, 'lines', count)",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "addCount(moduleMetrics, 'lines', count)",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "addCount(LOC, 'lines_comment', count)",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "addCount(moduleMetrics, 'lines_comment', count)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "addCount(LOC, 'lines_nonempty', count)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "addCount(moduleMetrics, 'lines_nonempty', count)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "if (value.tag == 'STRING') then\r\n\t\t\t\tlocal count =0\r\n\t\t\t\tfor w in string.gmatch(value.text, \"\\n\") do\r\n\t\t\t\t\tcount = count + 1\r\n\t\t\t\tend\r\n\t\t\t\taddCount(LOC, 'lines', count)\r\n\t\t\t\taddCount(moduleMetrics, 'lines', count)\r\n\t\t\t\taddCount(LOC, 'lines_code', count)\r\n\t\t\t\taddCount(moduleMetrics, 'lines_code', count)\r\n\t\t\t\taddCount(LOC, 'lines_nonempty', count)\r\n\t\t\t\taddCount(moduleMetrics, 'lines_nonempty', count) \r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "local count =0",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "for w in string.gmatch(value.text, \"\\n\") do\r\n\t\t\t\t\tcount = count + 1\r\n\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 56,
    "text": "addCount(LOC, 'lines_code', count)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "addCount(moduleMetrics, 'lines_code', count)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "only_comment = false",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "addCount(LOC, 'lines', value.metrics.LOC.lines)",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "addCount(LOC, 'lines_comment', value.metrics.LOC.lines_comment)",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "addCount(LOC, 'lines_blank', value.metrics.LOC.lines_blank)",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "addCount(LOC, 'lines_nonempty', value.metrics.LOC.lines_nonempty)",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "addCount(LOC, 'lines_code', value.metrics.LOC.lines_code)",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "addCount(moduleMetrics, 'lines', value.metrics.LOC.lines)",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "addCount(moduleMetrics, 'lines_comment', value.metrics.LOC.lines_comment)",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "addCount(moduleMetrics, 'lines_blank', value.metrics.LOC.lines_blank)",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "addCount(moduleMetrics, 'lines_nonempty', value.metrics.LOC.lines_nonempty)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "addCount(moduleMetrics, 'lines_code', value.metrics.LOC.lines_code)",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "if (value.tag == 'Stat') then\r\n\t\t\t\tlocal stat = value.data[1]\r\n\t\t\t\tlocal block = utils.searchForTagItem('Block', stat.data)\r\n\t\t\t\tif (block) then\r\n\t\t\t\t\talterNode(stat, block)\r\n\t\t\t\tend\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif (stat.tag == 'FunctionCall') then\r\n\t\t\t\tif (stat.data[1].data[1].text == 'module') then\r\n\t\t\t\t\tlocal exec = stat.data[1]\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleDefinitions[exec] = {}\r\n\t\t\t\t\tif (moduleDefinitions[exec].metrics == nil) then moduleDefinitions[exec].metrics = {} end\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleDefinitions[exec].LOC = {\r\n\t\t\t\t\t\tlines = 0,\r\n\t\t\t\t\t\tlines_comment = 0,\r\n\t\t\t\t\t\tlines_code = 0,\r\n\t\t\t\t\t\tlines_blank = 0,\r\n\t\t\t\t\t\tlines_nonempty = 0\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleMetrics = moduleDefinitions[exec].LOC\r\n\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\tend\r\n\t\t\t\t\r\n\t\t\telseif (value.tag == 'GlobalFunction' or value.tag == 'LocalFunction' or value.tag == 'Function') then\r\n\t\t\t\tlocal funcbody = utils.searchForTagItem('FuncBody', value.data)\r\n\t\t\t\tlocal block = utils.searchForTagItem('Block', funcbody.data)\r\n\t\t\t\tif (block) then\r\n\t\t\t\t\talterNode(value, block)\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "local stat = value.data[1]",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "local block = utils.searchForTagItem('Block', stat.data)",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "if (block) then\r\n\t\t\t\t\talterNode(stat, block)\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "alterNode(stat, block)",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "if (stat.tag == 'FunctionCall') then\r\n\t\t\t\tif (stat.data[1].data[1].text == 'module') then\r\n\t\t\t\t\tlocal exec = stat.data[1]\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleDefinitions[exec] = {}\r\n\t\t\t\t\tif (moduleDefinitions[exec].metrics == nil) then moduleDefinitions[exec].metrics = {} end\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleDefinitions[exec].LOC = {\r\n\t\t\t\t\t\tlines = 0,\r\n\t\t\t\t\t\tlines_comment = 0,\r\n\t\t\t\t\t\tlines_code = 0,\r\n\t\t\t\t\t\tlines_blank = 0,\r\n\t\t\t\t\t\tlines_nonempty = 0\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleMetrics = moduleDefinitions[exec].LOC\r\n\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "if (stat.data[1].data[1].text == 'module') then\r\n\t\t\t\t\tlocal exec = stat.data[1]\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleDefinitions[exec] = {}\r\n\t\t\t\t\tif (moduleDefinitions[exec].metrics == nil) then moduleDefinitions[exec].metrics = {} end\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleDefinitions[exec].LOC = {\r\n\t\t\t\t\t\tlines = 0,\r\n\t\t\t\t\t\tlines_comment = 0,\r\n\t\t\t\t\t\tlines_code = 0,\r\n\t\t\t\t\t\tlines_blank = 0,\r\n\t\t\t\t\t\tlines_nonempty = 0\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleMetrics = moduleDefinitions[exec].LOC\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "local exec = stat.data[1]",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "moduleDefinitions[exec] = {}",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "if (moduleDefinitions[exec].metrics == nil) then moduleDefinitions[exec].metrics = {} end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "moduleDefinitions[exec].metrics = {}",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "moduleDefinitions[exec].LOC = {\r\n\t\t\t\t\t\tlines = 0,\r\n\t\t\t\t\t\tlines_comment = 0,\r\n\t\t\t\t\t\tlines_code = 0,\r\n\t\t\t\t\t\tlines_blank = 0,\r\n\t\t\t\t\t\tlines_nonempty = 0\r\n\t\t\t\t\t}",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "moduleMetrics = moduleDefinitions[exec].LOC",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "local funcbody = utils.searchForTagItem('FuncBody', value.data)",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "local block = utils.searchForTagItem('Block', funcbody.data)",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "if (block) then\r\n\t\t\t\t\talterNode(value, block)\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 85,
    "text": "alterNode(value, block)",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "if (node.metrics == nil) then node.metrics = {} end",
    "type": "statement:if"
  }, {
    "id": 87,
    "text": "node.metrics = {}",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "node.metrics.LOC \t\t\t\t= LOC",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 90,
    "text": "function (data) \r\n\t\t\tdoMetrics(data)\r\n\t\t\treturn data \r\n\t\tend",
    "type": "function"
  }, {
    "id": 91,
    "text": "doMetrics(data)",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 93,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 94,
    "text": "function (node) \r\n\t\tdoMetrics(node)\r\n\t\t\r\n\t\tif not node.metrics.moduleDefinitions then node.metrics.moduleDefinitions = {} end\r\n\t\t\r\n\t\tfor exec, data in pairs(moduleDefinitions) do\r\n\t\t\tif not node.metrics.moduleDefinitions[exec] then node.metrics.moduleDefinitions[exec] = {} end\r\n\t\t\tnode.metrics.moduleDefinitions[exec].LOC = data.LOC\r\n\t\tend\t\r\n\t\t\r\n\t\tmoduleDefinitions = {}\r\n\t\t\r\n\t\treturn node \r\n\tend",
    "type": "function"
  }, {
    "id": 95,
    "text": "doMetrics(node)",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "if not node.metrics.moduleDefinitions then node.metrics.moduleDefinitions = {} end",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "node.metrics.moduleDefinitions = {}",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "for exec, data in pairs(moduleDefinitions) do\r\n\t\t\tif not node.metrics.moduleDefinitions[exec] then node.metrics.moduleDefinitions[exec] = {} end\r\n\t\t\tnode.metrics.moduleDefinitions[exec].LOC = data.LOC\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 99,
    "text": "if not node.metrics.moduleDefinitions[exec] then node.metrics.moduleDefinitions[exec] = {} end",
    "type": "statement:if"
  }, {
    "id": 100,
    "text": "node.metrics.moduleDefinitions[exec] = {}",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "node.metrics.moduleDefinitions[exec].LOC = data.LOC",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "moduleDefinitions = {}",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 104,
    "text": "function()\r\n\tlocal key,value\r\n\tlocal new_table = {}\r\n\tfor key,value in pairs(keys) do\r\n\t\tnew_table[key] = function (data) \r\n\t\t\tdoMetrics(data)\r\n\t\t\treturn data \r\n\t\tend\r\n\tend\r\n\t\r\n\tnew_table[1] = function (node) \r\n\t\tdoMetrics(node)\r\n\t\t\r\n\t\tif not node.metrics.moduleDefinitions then node.metrics.moduleDefinitions = {} end\r\n\t\t\r\n\t\tfor exec, data in pairs(moduleDefinitions) do\r\n\t\t\tif not node.metrics.moduleDefinitions[exec] then node.metrics.moduleDefinitions[exec] = {} end\r\n\t\t\tnode.metrics.moduleDefinitions[exec].LOC = data.LOC\r\n\t\tend\t\r\n\t\t\r\n\t\tmoduleDefinitions = {}\r\n\t\t\r\n\t\treturn node \r\n\tend\r\n\t\r\n\treturn new_table\r\nend",
    "type": "function"
  }, {
    "id": 105,
    "text": "local key,value",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "local new_table = {}",
    "type": "statement:localassign"
  }, {
    "id": 107,
    "text": "for key,value in pairs(keys) do\r\n\t\tnew_table[key] = function (data) \r\n\t\t\tdoMetrics(data)\r\n\t\t\treturn data \r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 108,
    "text": "new_table[key] = function (data) \r\n\t\t\tdoMetrics(data)\r\n\t\t\treturn data \r\n\t\tend",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "new_table[1] = function (node) \r\n\t\tdoMetrics(node)\r\n\t\t\r\n\t\tif not node.metrics.moduleDefinitions then node.metrics.moduleDefinitions = {} end\r\n\t\t\r\n\t\tfor exec, data in pairs(moduleDefinitions) do\r\n\t\t\tif not node.metrics.moduleDefinitions[exec] then node.metrics.moduleDefinitions[exec] = {} end\r\n\t\t\tnode.metrics.moduleDefinitions[exec].LOC = data.LOC\r\n\t\tend\t\r\n\t\t\r\n\t\tmoduleDefinitions = {}\r\n\t\t\r\n\t\treturn node \r\n\tend",
    "type": "statement:assign"
  }, {
    "id": 110,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 111,
    "text": "",
    "type": "function container"
  }, {
    "id": 112,
    "text": "function searchForTagItem(tagname, data)\r\n\tfor j,l in pairs(data) do\r\n\t\tif (l.tag == tagname) then\r\n\t\t\treturn l\t\r\n\t\tend\r\n\tend\r\n\treturn nil\r\nend",
    "type": "function"
  }, {
    "id": 113,
    "text": "function getComment(node)\r\n\t\r\n\tlocal comment = ''\r\n\tlocal fullIGNORED = ''\r\n\tlocal ignore\r\n\tlocal order = node.order\r\n\tlocal currNode = node\r\n\tlocal comment_table = {}\r\n\tlocal numberOfLines = 0\r\n\t\r\n\twhile (true) do\r\n\t\twhile (order == 1 or order == 0) do\r\n\t\t\tcurrNode = currNode.parent\r\n\t\t\tif (currNode == nil) then return nil end\r\n\t\t\torder = currNode.order\t\t\t\r\n\t\tend\t\r\n\r\n\t\tif (currNode.tag == 'STARTPOINT') then return nil end\r\n\t\r\n\t\torder = order - 1\r\n\r\n\t\twhile (order ~= 0) do\r\n\t\t\tignore = currNode.parent.data[order]\r\n\t\t\tif (ignore.tag == 'IGNORED') then\r\n\t\t\t\tfor k,v in pairs(ignore.data) do\r\n\t\t\t\t\tif (type(v) == 'table') then\r\n\t\t\t\t\t\tif (v.tag == 'COMMENT') then\r\n\t\t\t\t\t\t\tcomment = comment .. v.text .. '\\n'\r\n\t\t\t\t\t\t\tnumberOfLines = numberOfLines + 1\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tfullIGNORED = fullIGNORED .. v.text\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\torder = order - 1\r\n\t\t\telse\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\tend\r\n\t\t\r\n\t\tif (order ~= 0) then\r\n\t\t\tbreak\r\n\t\tend\t\r\n\t\t\t\r\n\tend\r\n\t\r\n\tif (comment == '') then comment = nil end\r\n\treturn comment, fullIGNORED,numberOfLines\r\nend",
    "type": "function"
  }, {
    "id": 114,
    "text": "lpeg",
    "type": "module"
  }, {
    "id": 115,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 116,
    "text": "find",
    "type": "global function"
  }, {
    "id": 117,
    "text": "module",
    "type": "global function"
  }, {
    "id": 118,
    "text": "gmatch",
    "type": "global function"
  }, {
    "id": 119,
    "text": "require",
    "type": "global function"
  }, {
    "id": 120,
    "text": "",
    "type": "variable container"
  }, {
    "id": 121,
    "text": "",
    "type": "require container"
  }, {
    "id": 122,
    "text": "",
    "type": "local variable"
  }, {
    "id": 123,
    "text": "",
    "type": "n/a"
  }, {
    "id": 124,
    "text": "",
    "type": "local variable"
  }, {
    "id": 125,
    "text": "",
    "type": "n/a"
  }, {
    "id": 126,
    "text": "",
    "type": "local variable"
  }, {
    "id": 127,
    "text": "",
    "type": "n/a"
  }, {
    "id": 128,
    "text": "",
    "type": "local variable"
  }, {
    "id": 129,
    "text": "",
    "type": "n/a"
  }, {
    "id": 130,
    "text": "",
    "type": "local variable"
  }, {
    "id": 131,
    "text": "",
    "type": "n/a"
  }, {
    "id": 132,
    "text": "",
    "type": "local variable"
  }, {
    "id": 133,
    "text": "",
    "type": "n/a"
  }, {
    "id": 134,
    "text": "",
    "type": "local variable"
  }, {
    "id": 135,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 136,
    "text": "",
    "type": "global variable"
  }, {
    "id": 137,
    "text": "",
    "type": "n/a"
  }, {
    "id": 138,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 139,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 140,
    "text": "",
    "type": "require local variable"
  } ]
}