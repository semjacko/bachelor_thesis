{
  "_filename": "smellTemplates.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luametrics/src/metrics/templates/smellTemplates.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 5,
    "label": "has",
    "to": 11
  }, {
    "from": 3,
    "label": "has",
    "to": 12
  }, {
    "from": 3,
    "label": "has",
    "to": 13
  }, {
    "from": 3,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 6
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 8
  }, {
    "from": 18,
    "label": "has",
    "to": 9
  }, {
    "from": 18,
    "label": "has",
    "to": 10
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 15,
    "label": "has",
    "to": 12
  }, {
    "from": 15,
    "label": "has",
    "to": 13
  }, {
    "from": 15,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 6
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 8
  }, {
    "from": 24,
    "label": "has",
    "to": 9
  }, {
    "from": 24,
    "label": "has",
    "to": 10
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 21,
    "label": "has",
    "to": 12
  }, {
    "from": 21,
    "label": "has",
    "to": 13
  }, {
    "from": 21,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 6
  }, {
    "from": 29,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 9
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 10
  }, {
    "from": 29,
    "label": "has",
    "to": 35
  }, {
    "from": 29,
    "label": "has",
    "to": 36
  }, {
    "from": 29,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 9
  }, {
    "from": 37,
    "label": "has",
    "to": 34
  }, {
    "from": 37,
    "label": "has",
    "to": 10
  }, {
    "from": 29,
    "label": "has",
    "to": 38
  }, {
    "from": 29,
    "label": "has",
    "to": 36
  }, {
    "from": 29,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 9
  }, {
    "from": 39,
    "label": "has",
    "to": 34
  }, {
    "from": 39,
    "label": "has",
    "to": 10
  }, {
    "from": 29,
    "label": "has",
    "to": 40
  }, {
    "from": 29,
    "label": "has",
    "to": 36
  }, {
    "from": 29,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 9
  }, {
    "from": 41,
    "label": "has",
    "to": 34
  }, {
    "from": 41,
    "label": "has",
    "to": 10
  }, {
    "from": 29,
    "label": "has",
    "to": 42
  }, {
    "from": 29,
    "label": "has",
    "to": 36
  }, {
    "from": 29,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 9
  }, {
    "from": 43,
    "label": "has",
    "to": 34
  }, {
    "from": 43,
    "label": "has",
    "to": 10
  }, {
    "from": 29,
    "label": "has",
    "to": 44
  }, {
    "from": 29,
    "label": "has",
    "to": 36
  }, {
    "from": 29,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 9
  }, {
    "from": 45,
    "label": "has",
    "to": 34
  }, {
    "from": 45,
    "label": "has",
    "to": 10
  }, {
    "from": 29,
    "label": "has",
    "to": 46
  }, {
    "from": 29,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 36
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 9
  }, {
    "from": 49,
    "label": "has",
    "to": 34
  }, {
    "from": 49,
    "label": "has",
    "to": 10
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 36
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 9
  }, {
    "from": 51,
    "label": "has",
    "to": 34
  }, {
    "from": 51,
    "label": "has",
    "to": 10
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 48,
    "label": "has",
    "to": 36
  }, {
    "from": 48,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 9
  }, {
    "from": 53,
    "label": "has",
    "to": 34
  }, {
    "from": 53,
    "label": "has",
    "to": 10
  }, {
    "from": 48,
    "label": "has",
    "to": 54
  }, {
    "from": 48,
    "label": "has",
    "to": 36
  }, {
    "from": 48,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 9
  }, {
    "from": 55,
    "label": "has",
    "to": 34
  }, {
    "from": 55,
    "label": "has",
    "to": 10
  }, {
    "from": 48,
    "label": "has",
    "to": 56
  }, {
    "from": 29,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 57,
    "label": "has",
    "to": 60
  }, {
    "from": 29,
    "label": "has",
    "to": 12
  }, {
    "from": 29,
    "label": "has",
    "to": 61
  }, {
    "from": 29,
    "label": "has",
    "to": 62
  }, {
    "from": 27,
    "label": "has",
    "to": 13
  }, {
    "from": 27,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 64,
    "label": "has",
    "to": 6
  }, {
    "from": 64,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 8
  }, {
    "from": 67,
    "label": "has",
    "to": 9
  }, {
    "from": 67,
    "label": "has",
    "to": 10
  }, {
    "from": 64,
    "label": "has",
    "to": 68
  }, {
    "from": 64,
    "label": "has",
    "to": 69
  }, {
    "from": 64,
    "label": "has",
    "to": 70
  }, {
    "from": 64,
    "label": "has",
    "to": 71
  }, {
    "from": 64,
    "label": "has",
    "to": 72
  }, {
    "from": 64,
    "label": "has",
    "to": 73
  }, {
    "from": 64,
    "label": "has",
    "to": 12
  }, {
    "from": 64,
    "label": "has",
    "to": 13
  }, {
    "from": 64,
    "label": "has",
    "to": 74
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 6
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 10
  }, {
    "from": 80,
    "label": "has",
    "to": 9
  }, {
    "from": 80,
    "label": "has",
    "to": 8
  }, {
    "from": 79,
    "label": "has",
    "to": 81
  }, {
    "from": 75,
    "label": "has",
    "to": 12
  }, {
    "from": 75,
    "label": "has",
    "to": 13
  }, {
    "from": 75,
    "label": "has",
    "to": 82
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 83,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 6
  }, {
    "from": 85,
    "label": "has",
    "to": 78
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 83,
    "label": "has",
    "to": 12
  }, {
    "from": 83,
    "label": "has",
    "to": 13
  }, {
    "from": 83,
    "label": "has",
    "to": 89
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 6
  }, {
    "from": 92,
    "label": "has",
    "to": 78
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 90,
    "label": "has",
    "to": 12
  }, {
    "from": 90,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 90,
    "label": "has",
    "to": 13
  }, {
    "from": 90,
    "label": "has",
    "to": 101
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 102,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 6
  }, {
    "from": 104,
    "label": "has",
    "to": 78
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 102,
    "label": "has",
    "to": 12
  }, {
    "from": 102,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 102,
    "label": "has",
    "to": 13
  }, {
    "from": 102,
    "label": "has",
    "to": 111
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 112,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 78
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 112,
    "label": "has",
    "to": 12
  }, {
    "from": 112,
    "label": "has",
    "to": 13
  }, {
    "from": 112,
    "label": "has",
    "to": 117
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 118,
    "label": "has",
    "to": 120
  }, {
    "from": 118,
    "label": "has",
    "to": 121
  }, {
    "from": 118,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 122,
    "label": "has",
    "to": 124
  }, {
    "from": 122,
    "label": "has",
    "to": 125
  }, {
    "from": 118,
    "label": "has",
    "to": 13
  }, {
    "from": 118,
    "label": "has",
    "to": 126
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 127,
    "label": "has",
    "to": 121
  }, {
    "from": 127,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 123
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 127,
    "label": "has",
    "to": 13
  }, {
    "from": 127,
    "label": "has",
    "to": 131
  }, {
    "from": 132,
    "label": "has",
    "to": 128
  }, {
    "from": 132,
    "label": "has",
    "to": 121
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 123
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 132,
    "label": "has",
    "to": 13
  }, {
    "from": 132,
    "label": "has",
    "to": 135
  }, {
    "from": 136,
    "label": "has",
    "to": 128
  }, {
    "from": 136,
    "label": "has",
    "to": 121
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 137,
    "label": "has",
    "to": 139
  }, {
    "from": 136,
    "label": "has",
    "to": 13
  }, {
    "from": 136,
    "label": "has",
    "to": 140
  }, {
    "from": 141,
    "label": "has",
    "to": 128
  }, {
    "from": 141,
    "label": "has",
    "to": 121
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 143,
    "label": "has",
    "to": 138
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 141,
    "label": "has",
    "to": 13
  }, {
    "from": 141,
    "label": "has",
    "to": 145
  }, {
    "from": 146,
    "label": "has",
    "to": 128
  }, {
    "from": 146,
    "label": "has",
    "to": 121
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 148,
    "label": "has",
    "to": 138
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 146,
    "label": "has",
    "to": 13
  }, {
    "from": 146,
    "label": "has",
    "to": 150
  }, {
    "from": 151,
    "label": "has",
    "to": 128
  }, {
    "from": 151,
    "label": "has",
    "to": 121
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 153,
    "label": "has",
    "to": 138
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 151,
    "label": "has",
    "to": 13
  }, {
    "from": 151,
    "label": "has",
    "to": 155
  }, {
    "from": 156,
    "label": "has",
    "to": 119
  }, {
    "from": 156,
    "label": "has",
    "to": 120
  }, {
    "from": 156,
    "label": "has",
    "to": 121
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 138
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 157,
    "label": "has",
    "to": 159
  }, {
    "from": 156,
    "label": "has",
    "to": 13
  }, {
    "from": 156,
    "label": "has",
    "to": 160
  }, {
    "from": 90,
    "label": "calls",
    "to": 166
  }, {
    "from": 102,
    "label": "calls",
    "to": 166
  }, {
    "from": 3,
    "label": "calls",
    "to": 164
  }, {
    "from": 15,
    "label": "calls",
    "to": 164
  }, {
    "from": 21,
    "label": "calls",
    "to": 164
  }, {
    "from": 27,
    "label": "calls",
    "to": 164
  }, {
    "from": 27,
    "label": "calls",
    "to": 164
  }, {
    "from": 27,
    "label": "calls",
    "to": 164
  }, {
    "from": 27,
    "label": "calls",
    "to": 164
  }, {
    "from": 27,
    "label": "calls",
    "to": 164
  }, {
    "from": 27,
    "label": "calls",
    "to": 164
  }, {
    "from": 27,
    "label": "calls",
    "to": 164
  }, {
    "from": 27,
    "label": "calls",
    "to": 164
  }, {
    "from": 27,
    "label": "calls",
    "to": 164
  }, {
    "from": 27,
    "label": "calls",
    "to": 164
  }, {
    "from": 27,
    "label": "calls",
    "to": 164
  }, {
    "from": 27,
    "label": "calls",
    "to": 164
  }, {
    "from": 27,
    "label": "calls",
    "to": 164
  }, {
    "from": 64,
    "label": "calls",
    "to": 164
  }, {
    "from": 64,
    "label": "calls",
    "to": 164
  }, {
    "from": 64,
    "label": "calls",
    "to": 164
  }, {
    "from": 64,
    "label": "calls",
    "to": 164
  }, {
    "from": 75,
    "label": "calls",
    "to": 164
  }, {
    "from": 83,
    "label": "calls",
    "to": 164
  }, {
    "from": 90,
    "label": "calls",
    "to": 164
  }, {
    "from": 102,
    "label": "calls",
    "to": 164
  }, {
    "from": 112,
    "label": "calls",
    "to": 164
  }, {
    "from": 3,
    "label": "calls",
    "to": 162
  }, {
    "from": 15,
    "label": "calls",
    "to": 162
  }, {
    "from": 21,
    "label": "calls",
    "to": 162
  }, {
    "from": 27,
    "label": "calls",
    "to": 162
  }, {
    "from": 64,
    "label": "calls",
    "to": 162
  }, {
    "from": 75,
    "label": "calls",
    "to": 162
  }, {
    "from": 83,
    "label": "calls",
    "to": 162
  }, {
    "from": 90,
    "label": "calls",
    "to": 162
  }, {
    "from": 102,
    "label": "calls",
    "to": 162
  }, {
    "from": 112,
    "label": "calls",
    "to": 162
  }, {
    "from": 161,
    "label": "calls",
    "to": 168
  }, {
    "from": 83,
    "label": "calls",
    "to": 169
  }, {
    "from": 90,
    "label": "calls",
    "to": 169
  }, {
    "from": 90,
    "label": "calls",
    "to": 169
  }, {
    "from": 102,
    "label": "calls",
    "to": 169
  }, {
    "from": 102,
    "label": "calls",
    "to": 169
  }, {
    "from": 118,
    "label": "calls",
    "to": 165
  }, {
    "from": 127,
    "label": "calls",
    "to": 165
  }, {
    "from": 132,
    "label": "calls",
    "to": 165
  }, {
    "from": 136,
    "label": "calls",
    "to": 165
  }, {
    "from": 141,
    "label": "calls",
    "to": 165
  }, {
    "from": 146,
    "label": "calls",
    "to": 165
  }, {
    "from": 151,
    "label": "calls",
    "to": 165
  }, {
    "from": 156,
    "label": "calls",
    "to": 165
  }, {
    "from": 3,
    "label": "calls",
    "to": 167
  }, {
    "from": 15,
    "label": "calls",
    "to": 167
  }, {
    "from": 21,
    "label": "calls",
    "to": 167
  }, {
    "from": 27,
    "label": "calls",
    "to": 167
  }, {
    "from": 27,
    "label": "calls",
    "to": 167
  }, {
    "from": 75,
    "label": "calls",
    "to": 167
  }, {
    "from": 75,
    "label": "calls",
    "to": 167
  }, {
    "from": 83,
    "label": "calls",
    "to": 167
  }, {
    "from": 83,
    "label": "calls",
    "to": 167
  }, {
    "from": 90,
    "label": "calls",
    "to": 167
  }, {
    "from": 90,
    "label": "calls",
    "to": 167
  }, {
    "from": 90,
    "label": "calls",
    "to": 167
  }, {
    "from": 90,
    "label": "calls",
    "to": 167
  }, {
    "from": 102,
    "label": "calls",
    "to": 167
  }, {
    "from": 102,
    "label": "calls",
    "to": 167
  }, {
    "from": 102,
    "label": "calls",
    "to": 167
  }, {
    "from": 102,
    "label": "calls",
    "to": 167
  }, {
    "from": 112,
    "label": "calls",
    "to": 167
  }, {
    "from": 112,
    "label": "calls",
    "to": 167
  }, {
    "from": 118,
    "label": "calls",
    "to": 167
  }, {
    "from": 127,
    "label": "calls",
    "to": 167
  }, {
    "from": 132,
    "label": "calls",
    "to": 167
  }, {
    "from": 136,
    "label": "calls",
    "to": 167
  }, {
    "from": 141,
    "label": "calls",
    "to": 167
  }, {
    "from": 146,
    "label": "calls",
    "to": 167
  }, {
    "from": 151,
    "label": "calls",
    "to": 167
  }, {
    "from": 156,
    "label": "calls",
    "to": 167
  }, {
    "from": 3,
    "label": "calls",
    "to": 163
  }, {
    "from": 15,
    "label": "calls",
    "to": 163
  }, {
    "from": 21,
    "label": "calls",
    "to": 163
  }, {
    "from": 27,
    "label": "calls",
    "to": 163
  }, {
    "from": 64,
    "label": "calls",
    "to": 163
  }, {
    "from": 64,
    "label": "calls",
    "to": 163
  }, {
    "from": 75,
    "label": "calls",
    "to": 163
  }, {
    "from": 83,
    "label": "calls",
    "to": 163
  }, {
    "from": 90,
    "label": "calls",
    "to": 163
  }, {
    "from": 102,
    "label": "calls",
    "to": 163
  }, {
    "from": 112,
    "label": "calls",
    "to": 163
  }, {
    "from": 1,
    "label": "contains",
    "to": 161
  }, {
    "from": 161,
    "label": "declares",
    "to": 3
  }, {
    "from": 161,
    "label": "declares",
    "to": 15
  }, {
    "from": 161,
    "label": "declares",
    "to": 21
  }, {
    "from": 161,
    "label": "declares",
    "to": 27
  }, {
    "from": 161,
    "label": "declares",
    "to": 64
  }, {
    "from": 161,
    "label": "declares",
    "to": 75
  }, {
    "from": 161,
    "label": "declares",
    "to": 83
  }, {
    "from": 161,
    "label": "declares",
    "to": 90
  }, {
    "from": 161,
    "label": "declares",
    "to": 102
  }, {
    "from": 161,
    "label": "declares",
    "to": 112
  }, {
    "from": 161,
    "label": "declares",
    "to": 118
  }, {
    "from": 161,
    "label": "declares",
    "to": 127
  }, {
    "from": 161,
    "label": "declares",
    "to": 132
  }, {
    "from": 161,
    "label": "declares",
    "to": 136
  }, {
    "from": 161,
    "label": "declares",
    "to": 141
  }, {
    "from": 161,
    "label": "declares",
    "to": 146
  }, {
    "from": 161,
    "label": "declares",
    "to": 151
  }, {
    "from": 161,
    "label": "declares",
    "to": 156
  }, {
    "from": 170,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 171
  }, {
    "from": 1,
    "label": "contains",
    "to": 172
  }, {
    "from": 172,
    "label": "initializes",
    "to": 173
  }, {
    "from": 173,
    "label": "requires",
    "to": 2
  }, {
    "from": 1,
    "label": "provides",
    "to": 174
  }, {
    "from": 3,
    "label": "represents",
    "to": 175
  }, {
    "from": 174,
    "label": "provides",
    "to": 175
  }, {
    "from": 15,
    "label": "represents",
    "to": 176
  }, {
    "from": 174,
    "label": "provides",
    "to": 176
  }, {
    "from": 21,
    "label": "represents",
    "to": 177
  }, {
    "from": 174,
    "label": "provides",
    "to": 177
  }, {
    "from": 27,
    "label": "represents",
    "to": 178
  }, {
    "from": 174,
    "label": "provides",
    "to": 178
  }, {
    "from": 64,
    "label": "represents",
    "to": 179
  }, {
    "from": 174,
    "label": "provides",
    "to": 179
  }, {
    "from": 75,
    "label": "represents",
    "to": 180
  }, {
    "from": 174,
    "label": "provides",
    "to": 180
  }, {
    "from": 83,
    "label": "represents",
    "to": 181
  }, {
    "from": 174,
    "label": "provides",
    "to": 181
  }, {
    "from": 90,
    "label": "represents",
    "to": 182
  }, {
    "from": 174,
    "label": "provides",
    "to": 182
  }, {
    "from": 102,
    "label": "represents",
    "to": 183
  }, {
    "from": 174,
    "label": "provides",
    "to": 183
  }, {
    "from": 112,
    "label": "represents",
    "to": 184
  }, {
    "from": 174,
    "label": "provides",
    "to": 184
  }, {
    "from": 118,
    "label": "represents",
    "to": 185
  }, {
    "from": 174,
    "label": "provides",
    "to": 185
  }, {
    "from": 127,
    "label": "represents",
    "to": 186
  }, {
    "from": 174,
    "label": "provides",
    "to": 186
  }, {
    "from": 132,
    "label": "represents",
    "to": 187
  }, {
    "from": 174,
    "label": "provides",
    "to": 187
  }, {
    "from": 136,
    "label": "represents",
    "to": 188
  }, {
    "from": 174,
    "label": "provides",
    "to": 188
  }, {
    "from": 141,
    "label": "represents",
    "to": 189
  }, {
    "from": 174,
    "label": "provides",
    "to": 189
  }, {
    "from": 146,
    "label": "represents",
    "to": 190
  }, {
    "from": 174,
    "label": "provides",
    "to": 190
  }, {
    "from": 151,
    "label": "represents",
    "to": 191
  }, {
    "from": 174,
    "label": "provides",
    "to": 191
  }, {
    "from": 156,
    "label": "represents",
    "to": 192
  }, {
    "from": 174,
    "label": "provides",
    "to": 192
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "smellTemplates",
    "type": "module"
  }, {
    "id": 2,
    "text": "utils",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function createLongMethodTable(globalMetrics)\r\n\r\n\t--Create table header\r\n\tlocal smellTable = utils.createTable(\"smell_table\", {\"File path\", \"Function\", \"Lines of code\", \"Lines of source code\"})\r\n\r\n\t--Add rows to table\r\n\tfor _, n in pairs(globalMetrics.documentSmells.functionSmells.longMethod) do\r\n\r\n\t\tlocal color = nil\r\n\r\n\t\t--Set background color according to value\r\n\t\tif(n.LOSC > 55) then color = \"RED\" elseif(n.LOSC >= 45) then color = \"ORANGE\" else color = \"GREEN\" end\r\n\r\n\t\tsmellTable = smellTable .. utils.addTableRow({n.file, n.name, n.LOC, n.LOSC}, true, color)\r\n\r\n\tend\r\n\r\n\t--Close table\r\n\tsmellTable = smellTable .. utils.closeTable()\r\n\r\n\treturn smellTable\r\n\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local smellTable = utils.createTable(\"smell_table\", {\"File path\", \"Function\", \"Lines of code\", \"Lines of source code\"})",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "for _, n in pairs(globalMetrics.documentSmells.functionSmells.longMethod) do\r\n\r\n\t\tlocal color = nil\r\n\r\n\t\t--Set background color according to value\r\n\t\tif(n.LOSC > 55) then color = \"RED\" elseif(n.LOSC >= 45) then color = \"ORANGE\" else color = \"GREEN\" end\r\n\r\n\t\tsmellTable = smellTable .. utils.addTableRow({n.file, n.name, n.LOC, n.LOSC}, true, color)\r\n\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 6,
    "text": "local color = nil",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "if(n.LOSC > 55) then color = \"RED\" elseif(n.LOSC >= 45) then color = \"ORANGE\" else color = \"GREEN\" end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "color = \"RED\"",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "color = \"ORANGE\"",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "color = \"GREEN\"",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "smellTable = smellTable .. utils.addTableRow({n.file, n.name, n.LOC, n.LOSC}, true, color)",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "smellTable = smellTable .. utils.closeTable()",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "local function createCycloTable(globalMetrics)\r\n\r\n\t--Create table header\r\n\tlocal smellTable = utils.createTable(\"smell_table\", {\"File path\", \"Function\", \"Cyclomatic complexity\"})\r\n\r\n\t--Add rows to table\r\n\tfor _, n in pairs(globalMetrics.documentSmells.functionSmells.cyclomatic) do\r\n\r\n\t\tlocal color = nil\r\n\r\n\t\t--Set background color according to value\r\n\t\tif(n.cyclomatic > 20) then color = \"RED\" elseif(n.cyclomatic >= 11) then color = \"ORANGE\" else color = \"GREEN\" end\r\n\r\n\t\tsmellTable = smellTable .. utils.addTableRow({n.file, n.name, n.cyclomatic}, true, color)\r\n\r\n\tend\r\n\r\n\t--Close table\r\n\tsmellTable = smellTable .. utils.closeTable()\r\n\r\n\treturn smellTable\r\n\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "local smellTable = utils.createTable(\"smell_table\", {\"File path\", \"Function\", \"Cyclomatic complexity\"})",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "for _, n in pairs(globalMetrics.documentSmells.functionSmells.cyclomatic) do\r\n\r\n\t\tlocal color = nil\r\n\r\n\t\t--Set background color according to value\r\n\t\tif(n.cyclomatic > 20) then color = \"RED\" elseif(n.cyclomatic >= 11) then color = \"ORANGE\" else color = \"GREEN\" end\r\n\r\n\t\tsmellTable = smellTable .. utils.addTableRow({n.file, n.name, n.cyclomatic}, true, color)\r\n\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 18,
    "text": "if(n.cyclomatic > 20) then color = \"RED\" elseif(n.cyclomatic >= 11) then color = \"ORANGE\" else color = \"GREEN\" end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "smellTable = smellTable .. utils.addTableRow({n.file, n.name, n.cyclomatic}, true, color)",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "local function createManyParamsTable(globalMetrics)\r\n\r\n\t--Create table header\r\n\tlocal smellTable = utils.createTable(\"smell_table\", {\"File path\", \"Function\", \"Number of Parameters\"})\r\n\r\n\t--Add rows to table\r\n\tfor _, n in pairs(globalMetrics.documentSmells.functionSmells.manyParameters) do\r\n\r\n\t\tlocal color = nil\r\n\r\n\t\t--Set background color according to value\r\n\t\tif(n.NOA > 10) then color = \"RED\" elseif(n.NOA >= 5) then color = \"ORANGE\" else color = \"GREEN\" end\r\n\r\n\t\tsmellTable = smellTable .. utils.addTableRow({n.file, n.name, n.NOA}, true, color)\r\n\r\n\tend\r\n\r\n\t--Close table\r\n\tsmellTable = smellTable .. utils.closeTable()\r\n\r\n\treturn smellTable\r\n\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "local smellTable = utils.createTable(\"smell_table\", {\"File path\", \"Function\", \"Number of Parameters\"})",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "for _, n in pairs(globalMetrics.documentSmells.functionSmells.manyParameters) do\r\n\r\n\t\tlocal color = nil\r\n\r\n\t\t--Set background color according to value\r\n\t\tif(n.NOA > 10) then color = \"RED\" elseif(n.NOA >= 5) then color = \"ORANGE\" else color = \"GREEN\" end\r\n\r\n\t\tsmellTable = smellTable .. utils.addTableRow({n.file, n.name, n.NOA}, true, color)\r\n\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 24,
    "text": "if(n.NOA > 10) then color = \"RED\" elseif(n.NOA >= 5) then color = \"ORANGE\" else color = \"GREEN\" end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "smellTable = smellTable .. utils.addTableRow({n.file, n.name, n.NOA}, true, color)",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "local function createModuleTables(globalMetrics)\r\n\r\n\tlocal result = \"\"\r\n\r\n\tfor _, s in pairs(globalMetrics.documentSmells.moduleSmells) do --Loop through modules\r\n\r\n\t\t--Create title above table\r\n\t\tresult = result .. \"<div style='float:left; display: block'><h3>\" .. s.file .. \"</h3>\"\r\n\r\n\t\t--Create table header\r\n\t\tlocal smellTable = utils.createTable(\"smell_table\", {\"Criteria\", \"Value\"})\r\n\t\tlocal count = 0\r\n\r\n\t\t--Response for module\r\n\t\tlocal color = nil --Set background color if condition fits and add table row\r\n\t\tif(s.RFC > 100) then color = \"ORANGE\" count = count + 1 else color = \"GREEN\" end\r\n\t\tsmellTable = smellTable .. utils.addTableRow({\"Response for module\", s.RFC}, false, color)\r\n\r\n\t\t--Coupling between modules\r\n\t\tcolor = nil --Set background color if condition fits and add table row\r\n\t\tif(s.CBO > 5) then color = \"ORANGE\" count = count + 1 else color = \"GREEN\" end\r\n\t\tsmellTable = smellTable .. utils.addTableRow({\"Coupling between modules\", s.CBO}, false, color)\r\n\r\n\t\t--Response for module / number of methods\r\n\t\tcolor = nil --Set background color if condition fits and add table row\r\n\t\tif(s.responseToNOM > 5) then color = \"ORANGE\" count = count + 1 else color = \"GREEN\" end\r\n\t\tsmellTable = smellTable .. utils.addTableRow({\"Response for module / number of methods\", s.responseToNOM}, false, color)\r\n\r\n\t\t--Weighted methods per module\r\n\t\tcolor = nil --Set background color if condition fits and add table row\r\n\t\tif(s.WMC > 100) then color = \"ORANGE\" count = count + 1 else color = \"GREEN\" end\r\n\t\tsmellTable = smellTable .. utils.addTableRow({\"Weighted methods per module\", s.WMC}, false, color)\r\n\r\n\t\t--Number of methods\r\n\t\tcolor = nil --Set background color if condition fits and add table row\r\n\t\tif(s.NOM > 40) then color = \"ORANGE\" count = count + 1 else color = \"GREEN\" end\r\n\t\tsmellTable = smellTable .. utils.addTableRow({\"Number of methods\", s.NOM}, false, color)\r\n\r\n\t\t--Number of long lines\r\n\t\tcolor = nil --Set background color if condition fits and add table row\r\n\t\tif(#s.longLines > 10) then color = \"ORANGE\" count = count + 1 else color = \"GREEN\" end\r\n\t\tsmellTable = smellTable .. utils.addTableRow({\"Number of long lines\", #s.longLines}, false, color)\r\n\r\n\t\tfor k,v in pairs(globalMetrics.documentSmells.smellsTable) do\r\n\r\n\t\t\tif(v.file == s.file) then\r\n\r\n\t\t\t\t--table with many fields\r\n\t\t\t\tcolor = nil --Set background color if condition fits and add table row\r\n\t\t\t\tif(v.smells.tableSmells.manyFields.count >= 1) then color = \"ORANGE\" count = count + 1 else color = \"GREEN\" end\r\n\t\t\t\tsmellTable = smellTable .. utils.addTableRow({\"Number of tables with many fields\", v.smells.tableSmells.manyFields.count}, false, color)\r\n\r\n\t\t\t\t--function depth\r\n\t\t\t\tcolor = nil --Set background color if condition fits and add table row\r\n\t\t\t\tif(v.smells.functionSmells.count >= 1) then color = \"ORANGE\" count = count + 1 else color = \"GREEN\" end\r\n\t\t\t\tsmellTable = smellTable .. utils.addTableRow({\"Number of functions with high nesting level\", v.smells.functionSmells.count}, false, color)\r\n\r\n\t\t\t\t--table depth\r\n\t\t\t\tcolor = nil --Set background color if condition fits and add table row\r\n\t\t\t\tif(v.smells.tableSmells.depth.count >= 1) then color = \"ORANGE\" count = count + 1 else color = \"GREEN\" end\r\n\t\t\t\tsmellTable = smellTable .. utils.addTableRow({\"Number of tables with high nesting level\", v.smells.tableSmells.depth.count}, false, color)\r\n\r\n\t\t\t\t--upvlues\r\n\t\t\t\tcolor = nil --Set background color if condition fits and add table row\r\n\t\t\t\tif(#v.upvalues.info > 5) then color = \"ORANGE\" count = count + 1 else color = \"GREEN\" end\r\n\t\t\t\tsmellTable = smellTable .. utils.addTableRow({\"Number of upvalues\", #v.upvalues.info}, false, color)\r\n\t\t\t\t\r\n\r\n\t\t\tend\r\n\r\n\t\tend\r\n\r\n\t\t--If at least 2 conditions fits prints Error result with background set\r\n\t\tif(count >= 5) then\r\n\t\t\tsmellTable = smellTable .. utils.addTableRow({\"Result\", \"Refactor soon!\"}, false, \"RED\")\r\n\t\telseif(count > 1) then\t\t\t\r\n\t\t\tsmellTable = smellTable .. utils.addTableRow({\"Result\", \"Refactor!\"}, false, \"ORANGE\")\t\t\r\n\t\telse\r\n\t\t\tsmellTable = smellTable .. utils.addTableRow({\"Result\", \"O.K.\"}, false, \"GREEN\")\r\n\t\tend\r\n\r\n\t\t--Close table\r\n\t\tsmellTable = smellTable .. utils.closeTable()\r\n\r\n\t\tresult = result .. smellTable\r\n\r\n\t\tresult = result .. \"</div><div style='clear:both;'></div>\"\r\n\r\n\tend\r\n\r\n\treturn result\r\n\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "local result = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "for _, s in pairs(globalMetrics.documentSmells.moduleSmells) do --Loop through modules\r\n\r\n\t\t--Create title above table\r\n\t\tresult = result .. \"<div style='float:left; display: block'><h3>\" .. s.file .. \"</h3>\"\r\n\r\n\t\t--Create table header\r\n\t\tlocal smellTable = utils.createTable(\"smell_table\", {\"Criteria\", \"Value\"})\r\n\t\tlocal count = 0\r\n\r\n\t\t--Response for module\r\n\t\tlocal color = nil --Set background color if condition fits and add table row\r\n\t\tif(s.RFC > 100) then color = \"ORANGE\" count = count + 1 else color = \"GREEN\" end\r\n\t\tsmellTable = smellTable .. utils.addTableRow({\"Response for module\", s.RFC}, false, color)\r\n\r\n\t\t--Coupling between modules\r\n\t\tcolor = nil --Set background color if condition fits and add table row\r\n\t\tif(s.CBO > 5) then color = \"ORANGE\" count = count + 1 else color = \"GREEN\" end\r\n\t\tsmellTable = smellTable .. utils.addTableRow({\"Coupling between modules\", s.CBO}, false, color)\r\n\r\n\t\t--Response for module / number of methods\r\n\t\tcolor = nil --Set background color if condition fits and add table row\r\n\t\tif(s.responseToNOM > 5) then color = \"ORANGE\" count = count + 1 else color = \"GREEN\" end\r\n\t\tsmellTable = smellTable .. utils.addTableRow({\"Response for module / number of methods\", s.responseToNOM}, false, color)\r\n\r\n\t\t--Weighted methods per module\r\n\t\tcolor = nil --Set background color if condition fits and add table row\r\n\t\tif(s.WMC > 100) then color = \"ORANGE\" count = count + 1 else color = \"GREEN\" end\r\n\t\tsmellTable = smellTable .. utils.addTableRow({\"Weighted methods per module\", s.WMC}, false, color)\r\n\r\n\t\t--Number of methods\r\n\t\tcolor = nil --Set background color if condition fits and add table row\r\n\t\tif(s.NOM > 40) then color = \"ORANGE\" count = count + 1 else color = \"GREEN\" end\r\n\t\tsmellTable = smellTable .. utils.addTableRow({\"Number of methods\", s.NOM}, false, color)\r\n\r\n\t\t--Number of long lines\r\n\t\tcolor = nil --Set background color if condition fits and add table row\r\n\t\tif(#s.longLines > 10) then color = \"ORANGE\" count = count + 1 else color = \"GREEN\" end\r\n\t\tsmellTable = smellTable .. utils.addTableRow({\"Number of long lines\", #s.longLines}, false, color)\r\n\r\n\t\tfor k,v in pairs(globalMetrics.documentSmells.smellsTable) do\r\n\r\n\t\t\tif(v.file == s.file) then\r\n\r\n\t\t\t\t--table with many fields\r\n\t\t\t\tcolor = nil --Set background color if condition fits and add table row\r\n\t\t\t\tif(v.smells.tableSmells.manyFields.count >= 1) then color = \"ORANGE\" count = count + 1 else color = \"GREEN\" end\r\n\t\t\t\tsmellTable = smellTable .. utils.addTableRow({\"Number of tables with many fields\", v.smells.tableSmells.manyFields.count}, false, color)\r\n\r\n\t\t\t\t--function depth\r\n\t\t\t\tcolor = nil --Set background color if condition fits and add table row\r\n\t\t\t\tif(v.smells.functionSmells.count >= 1) then color = \"ORANGE\" count = count + 1 else color = \"GREEN\" end\r\n\t\t\t\tsmellTable = smellTable .. utils.addTableRow({\"Number of functions with high nesting level\", v.smells.functionSmells.count}, false, color)\r\n\r\n\t\t\t\t--table depth\r\n\t\t\t\tcolor = nil --Set background color if condition fits and add table row\r\n\t\t\t\tif(v.smells.tableSmells.depth.count >= 1) then color = \"ORANGE\" count = count + 1 else color = \"GREEN\" end\r\n\t\t\t\tsmellTable = smellTable .. utils.addTableRow({\"Number of tables with high nesting level\", v.smells.tableSmells.depth.count}, false, color)\r\n\r\n\t\t\t\t--upvlues\r\n\t\t\t\tcolor = nil --Set background color if condition fits and add table row\r\n\t\t\t\tif(#v.upvalues.info > 5) then color = \"ORANGE\" count = count + 1 else color = \"GREEN\" end\r\n\t\t\t\tsmellTable = smellTable .. utils.addTableRow({\"Number of upvalues\", #v.upvalues.info}, false, color)\r\n\t\t\t\t\r\n\r\n\t\t\tend\r\n\r\n\t\tend\r\n\r\n\t\t--If at least 2 conditions fits prints Error result with background set\r\n\t\tif(count >= 5) then\r\n\t\t\tsmellTable = smellTable .. utils.addTableRow({\"Result\", \"Refactor soon!\"}, false, \"RED\")\r\n\t\telseif(count > 1) then\t\t\t\r\n\t\t\tsmellTable = smellTable .. utils.addTableRow({\"Result\", \"Refactor!\"}, false, \"ORANGE\")\t\t\r\n\t\telse\r\n\t\t\tsmellTable = smellTable .. utils.addTableRow({\"Result\", \"O.K.\"}, false, \"GREEN\")\r\n\t\tend\r\n\r\n\t\t--Close table\r\n\t\tsmellTable = smellTable .. utils.closeTable()\r\n\r\n\t\tresult = result .. smellTable\r\n\r\n\t\tresult = result .. \"</div><div style='clear:both;'></div>\"\r\n\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 30,
    "text": "result = result .. \"<div style='float:left; display: block'><h3>\" .. s.file .. \"</h3>\"",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "local smellTable = utils.createTable(\"smell_table\", {\"Criteria\", \"Value\"})",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "local count = 0",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "if(s.RFC > 100) then color = \"ORANGE\" count = count + 1 else color = \"GREEN\" end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "count = count + 1",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "smellTable = smellTable .. utils.addTableRow({\"Response for module\", s.RFC}, false, color)",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "color = nil",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "if(s.CBO > 5) then color = \"ORANGE\" count = count + 1 else color = \"GREEN\" end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "smellTable = smellTable .. utils.addTableRow({\"Coupling between modules\", s.CBO}, false, color)",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "if(s.responseToNOM > 5) then color = \"ORANGE\" count = count + 1 else color = \"GREEN\" end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "smellTable = smellTable .. utils.addTableRow({\"Response for module / number of methods\", s.responseToNOM}, false, color)",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "if(s.WMC > 100) then color = \"ORANGE\" count = count + 1 else color = \"GREEN\" end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "smellTable = smellTable .. utils.addTableRow({\"Weighted methods per module\", s.WMC}, false, color)",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "if(s.NOM > 40) then color = \"ORANGE\" count = count + 1 else color = \"GREEN\" end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "smellTable = smellTable .. utils.addTableRow({\"Number of methods\", s.NOM}, false, color)",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "if(#s.longLines > 10) then color = \"ORANGE\" count = count + 1 else color = \"GREEN\" end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "smellTable = smellTable .. utils.addTableRow({\"Number of long lines\", #s.longLines}, false, color)",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "for k,v in pairs(globalMetrics.documentSmells.smellsTable) do\r\n\r\n\t\t\tif(v.file == s.file) then\r\n\r\n\t\t\t\t--table with many fields\r\n\t\t\t\tcolor = nil --Set background color if condition fits and add table row\r\n\t\t\t\tif(v.smells.tableSmells.manyFields.count >= 1) then color = \"ORANGE\" count = count + 1 else color = \"GREEN\" end\r\n\t\t\t\tsmellTable = smellTable .. utils.addTableRow({\"Number of tables with many fields\", v.smells.tableSmells.manyFields.count}, false, color)\r\n\r\n\t\t\t\t--function depth\r\n\t\t\t\tcolor = nil --Set background color if condition fits and add table row\r\n\t\t\t\tif(v.smells.functionSmells.count >= 1) then color = \"ORANGE\" count = count + 1 else color = \"GREEN\" end\r\n\t\t\t\tsmellTable = smellTable .. utils.addTableRow({\"Number of functions with high nesting level\", v.smells.functionSmells.count}, false, color)\r\n\r\n\t\t\t\t--table depth\r\n\t\t\t\tcolor = nil --Set background color if condition fits and add table row\r\n\t\t\t\tif(v.smells.tableSmells.depth.count >= 1) then color = \"ORANGE\" count = count + 1 else color = \"GREEN\" end\r\n\t\t\t\tsmellTable = smellTable .. utils.addTableRow({\"Number of tables with high nesting level\", v.smells.tableSmells.depth.count}, false, color)\r\n\r\n\t\t\t\t--upvlues\r\n\t\t\t\tcolor = nil --Set background color if condition fits and add table row\r\n\t\t\t\tif(#v.upvalues.info > 5) then color = \"ORANGE\" count = count + 1 else color = \"GREEN\" end\r\n\t\t\t\tsmellTable = smellTable .. utils.addTableRow({\"Number of upvalues\", #v.upvalues.info}, false, color)\r\n\t\t\t\t\r\n\r\n\t\t\tend\r\n\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 48,
    "text": "if(v.file == s.file) then\r\n\r\n\t\t\t\t--table with many fields\r\n\t\t\t\tcolor = nil --Set background color if condition fits and add table row\r\n\t\t\t\tif(v.smells.tableSmells.manyFields.count >= 1) then color = \"ORANGE\" count = count + 1 else color = \"GREEN\" end\r\n\t\t\t\tsmellTable = smellTable .. utils.addTableRow({\"Number of tables with many fields\", v.smells.tableSmells.manyFields.count}, false, color)\r\n\r\n\t\t\t\t--function depth\r\n\t\t\t\tcolor = nil --Set background color if condition fits and add table row\r\n\t\t\t\tif(v.smells.functionSmells.count >= 1) then color = \"ORANGE\" count = count + 1 else color = \"GREEN\" end\r\n\t\t\t\tsmellTable = smellTable .. utils.addTableRow({\"Number of functions with high nesting level\", v.smells.functionSmells.count}, false, color)\r\n\r\n\t\t\t\t--table depth\r\n\t\t\t\tcolor = nil --Set background color if condition fits and add table row\r\n\t\t\t\tif(v.smells.tableSmells.depth.count >= 1) then color = \"ORANGE\" count = count + 1 else color = \"GREEN\" end\r\n\t\t\t\tsmellTable = smellTable .. utils.addTableRow({\"Number of tables with high nesting level\", v.smells.tableSmells.depth.count}, false, color)\r\n\r\n\t\t\t\t--upvlues\r\n\t\t\t\tcolor = nil --Set background color if condition fits and add table row\r\n\t\t\t\tif(#v.upvalues.info > 5) then color = \"ORANGE\" count = count + 1 else color = \"GREEN\" end\r\n\t\t\t\tsmellTable = smellTable .. utils.addTableRow({\"Number of upvalues\", #v.upvalues.info}, false, color)\r\n\t\t\t\t\r\n\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "if(v.smells.tableSmells.manyFields.count >= 1) then color = \"ORANGE\" count = count + 1 else color = \"GREEN\" end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "smellTable = smellTable .. utils.addTableRow({\"Number of tables with many fields\", v.smells.tableSmells.manyFields.count}, false, color)",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "if(v.smells.functionSmells.count >= 1) then color = \"ORANGE\" count = count + 1 else color = \"GREEN\" end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "smellTable = smellTable .. utils.addTableRow({\"Number of functions with high nesting level\", v.smells.functionSmells.count}, false, color)",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "if(v.smells.tableSmells.depth.count >= 1) then color = \"ORANGE\" count = count + 1 else color = \"GREEN\" end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "smellTable = smellTable .. utils.addTableRow({\"Number of tables with high nesting level\", v.smells.tableSmells.depth.count}, false, color)",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "if(#v.upvalues.info > 5) then color = \"ORANGE\" count = count + 1 else color = \"GREEN\" end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "smellTable = smellTable .. utils.addTableRow({\"Number of upvalues\", #v.upvalues.info}, false, color)",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "if(count >= 5) then\r\n\t\t\tsmellTable = smellTable .. utils.addTableRow({\"Result\", \"Refactor soon!\"}, false, \"RED\")\r\n\t\telseif(count > 1) then\t\t\t\r\n\t\t\tsmellTable = smellTable .. utils.addTableRow({\"Result\", \"Refactor!\"}, false, \"ORANGE\")\t\t\r\n\t\telse\r\n\t\t\tsmellTable = smellTable .. utils.addTableRow({\"Result\", \"O.K.\"}, false, \"GREEN\")\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "smellTable = smellTable .. utils.addTableRow({\"Result\", \"Refactor soon!\"}, false, \"RED\")",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "smellTable = smellTable .. utils.addTableRow({\"Result\", \"Refactor!\"}, false, \"ORANGE\")",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "smellTable = smellTable .. utils.addTableRow({\"Result\", \"O.K.\"}, false, \"GREEN\")",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "result = result .. smellTable",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "result = result .. \"</div><div style='clear:both;'></div>\"",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "local function createMITable(globalMetrics)\r\n\r\n\tlocal smellTable = \"<p><table class='smell_table'>\"\r\n\tlocal MI = globalMetrics.documentSmells.MI\r\n\tlocal color = nil\r\n\r\n\t--Maintainability index table with background color\r\n\tif(MI < 65) then color = \"RED\" elseif(MI < 85) then color = \"ORANGE\" else color = \"GREEN\" end\r\n\tsmellTable = smellTable .. utils.addTableRow({\"Maintainability index\", MI}, false, color)\r\n\r\n\tsmellTable = smellTable .. utils.closeTable() .. \"</p>\"\r\n\r\n\t--Explanation of maintainability index in table\r\n\tsmellTable = smellTable .. utils.createTable(\"smell_table\", {\"Maintainability\", \"Score\"})\r\n\tsmellTable = smellTable .. utils.addTableRow({\"Highly maintainable\", \">85\"}, false, \"GREEN\")\r\n\tsmellTable = smellTable .. utils.addTableRow({\"Moderately maintainable\", \">65 and <85\"}, false, \"ORANGE\")\r\n\tsmellTable = smellTable .. utils.addTableRow({\"Difficult to maintain\", \"<65\"}, false, \"RED\")\r\n\tsmellTable = smellTable .. utils.closeTable()\r\n\r\n\treturn smellTable\r\n\r\nend",
    "type": "function"
  }, {
    "id": 65,
    "text": "local smellTable = \"<p><table class='smell_table'>\"",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "local MI = globalMetrics.documentSmells.MI",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "if(MI < 65) then color = \"RED\" elseif(MI < 85) then color = \"ORANGE\" else color = \"GREEN\" end",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "smellTable = smellTable .. utils.addTableRow({\"Maintainability index\", MI}, false, color)",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "smellTable = smellTable .. utils.closeTable() .. \"</p>\"",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "smellTable = smellTable .. utils.createTable(\"smell_table\", {\"Maintainability\", \"Score\"})",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "smellTable = smellTable .. utils.addTableRow({\"Highly maintainable\", \">85\"}, false, \"GREEN\")",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "smellTable = smellTable .. utils.addTableRow({\"Moderately maintainable\", \">65 and <85\"}, false, \"ORANGE\")",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "smellTable = smellTable .. utils.addTableRow({\"Difficult to maintain\", \"<65\"}, false, \"RED\")",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 75,
    "text": "local function createLongLinesTable(globalMetrics)\r\n\r\n\t--Create table header\r\n\tlocal smellTable = utils.createTable(\"smell_table\", {\"File path\", \"Line number\", \"Length of line\"})\r\n\r\n\tfor _, s in pairs(globalMetrics.documentSmells.moduleSmells) do\r\n\t\tlocal color = nil\r\n\r\n\t\t--Set background color according to value\r\n\t\t--if(n.NOA > 10) then color = \"RED\" elseif(n.NOA >= 5) then color = \"ORANGE\" else color = \"GREEN\" end\r\n\t\tcolor = \"WHITE\"\r\n\t\t--smellTable = smellTable .. utils.addTableRow({n.file, n.name, n.NOA}, true, color)\r\n\t\tfor k,v in pairs(s.longLines) do\r\n\t\t\tif(v.length < 110) then color = \"GREEN\" elseif(v.length < 150) then color = \"ORANGE\" else color = \"RED\" end\r\n\t\t\tsmellTable = smellTable .. utils.addTableRow({s.file, v.lineNumber, v.length}, false, color)\r\n\t\tend\r\n\tend\r\n\r\n\t--Close table\r\n\tsmellTable = smellTable .. utils.closeTable()\r\n\r\n\treturn smellTable\r\nend",
    "type": "function"
  }, {
    "id": 76,
    "text": "local smellTable = utils.createTable(\"smell_table\", {\"File path\", \"Line number\", \"Length of line\"})",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "for _, s in pairs(globalMetrics.documentSmells.moduleSmells) do\r\n\t\tlocal color = nil\r\n\r\n\t\t--Set background color according to value\r\n\t\t--if(n.NOA > 10) then color = \"RED\" elseif(n.NOA >= 5) then color = \"ORANGE\" else color = \"GREEN\" end\r\n\t\tcolor = \"WHITE\"\r\n\t\t--smellTable = smellTable .. utils.addTableRow({n.file, n.name, n.NOA}, true, color)\r\n\t\tfor k,v in pairs(s.longLines) do\r\n\t\t\tif(v.length < 110) then color = \"GREEN\" elseif(v.length < 150) then color = \"ORANGE\" else color = \"RED\" end\r\n\t\t\tsmellTable = smellTable .. utils.addTableRow({s.file, v.lineNumber, v.length}, false, color)\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 78,
    "text": "color = \"WHITE\"",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "for k,v in pairs(s.longLines) do\r\n\t\t\tif(v.length < 110) then color = \"GREEN\" elseif(v.length < 150) then color = \"ORANGE\" else color = \"RED\" end\r\n\t\t\tsmellTable = smellTable .. utils.addTableRow({s.file, v.lineNumber, v.length}, false, color)\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 80,
    "text": "if(v.length < 110) then color = \"GREEN\" elseif(v.length < 150) then color = \"ORANGE\" else color = \"RED\" end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "smellTable = smellTable .. utils.addTableRow({s.file, v.lineNumber, v.length}, false, color)",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 83,
    "text": "local function createTablesWithManyFieldsTable(globalMetrics)\r\n\r\n\t--Create table header\r\n\tlocal smellTable = utils.createTable(\"smell_table\", {\"File path\", \"Table name\", \"Table fields\"})\r\n\r\n\tfor _, s in pairs(globalMetrics.documentSmells.smellsTable) do\r\n\t\tlocal color = nil\r\n\r\n\t\t--Set background color\r\n\t\tcolor = \"WHITE\"\r\n\t\r\n\t\tfor k,v in pairs(s.smells.tableSmells.manyFields) do\r\n\t\t\tif( type(v) == \"table\") then --variable is a table (count is not table)\t\t\t\t\t\r\n\t\t\t\tsmellTable = smellTable .. utils.addTableRow({s.file, k, v.count}, false, color)\r\n\t\t\tend\r\n\t\tend\r\n\r\n\tend\r\n\r\n\t--Close table\r\n\tsmellTable = smellTable .. utils.closeTable()\r\n\r\n\treturn smellTable\r\n\r\nend",
    "type": "function"
  }, {
    "id": 84,
    "text": "local smellTable = utils.createTable(\"smell_table\", {\"File path\", \"Table name\", \"Table fields\"})",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "for _, s in pairs(globalMetrics.documentSmells.smellsTable) do\r\n\t\tlocal color = nil\r\n\r\n\t\t--Set background color\r\n\t\tcolor = \"WHITE\"\r\n\t\r\n\t\tfor k,v in pairs(s.smells.tableSmells.manyFields) do\r\n\t\t\tif( type(v) == \"table\") then --variable is a table (count is not table)\t\t\t\t\t\r\n\t\t\t\tsmellTable = smellTable .. utils.addTableRow({s.file, k, v.count}, false, color)\r\n\t\t\tend\r\n\t\tend\r\n\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 86,
    "text": "for k,v in pairs(s.smells.tableSmells.manyFields) do\r\n\t\t\tif( type(v) == \"table\") then --variable is a table (count is not table)\t\t\t\t\t\r\n\t\t\t\tsmellTable = smellTable .. utils.addTableRow({s.file, k, v.count}, false, color)\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 87,
    "text": "if( type(v) == \"table\") then --variable is a table (count is not table)\t\t\t\t\t\r\n\t\t\t\tsmellTable = smellTable .. utils.addTableRow({s.file, k, v.count}, false, color)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 88,
    "text": "smellTable = smellTable .. utils.addTableRow({s.file, k, v.count}, false, color)",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 90,
    "text": "local function createFunctionDepthTable(globalMetrics)\r\n\r\n\t--Create table header\r\n\tlocal smellTable = utils.createTable(\"smell_table\", {\"File path\", \"Function name\", \"Function nesting level\"})\r\n\r\n\r\n\tfor _, s in pairs(globalMetrics.documentSmells.smellsTable) do\r\n\t\tlocal color = nil\r\n\r\n\t\t--Set background color \r\n\t\tcolor = \"WHITE\"\r\n\t\r\n\t\tfor k,v in pairs(s.smells.functionSmells) do\r\n\t\t\tif( type(v) == \"table\") then --variable is a table (count is not table)\t\r\n\t\t\t\tsmellTable = smellTable .. utils.addTableRow({s.file, k, v.level}, false, color)\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\r\n\t--Close table\r\n\tsmellTable = smellTable .. utils.closeTable()\r\n\r\n\t-- create parent tree\r\n\tfor _, s in pairs(globalMetrics.documentSmells.smellsTable) do\r\n\t\tfor k,v in pairs(s.smells.functionSmells) do\t\r\n\r\n\t\t\tif(type(v) == \"table\") then --variable is a table (count is not table)\r\n\t\t\t\tif(v.parents) then -- if no parents, then no smell\r\n\t\t\t\t\tsmellTable = smellTable .. utils.drawParentTree(v.parents, \"function\")\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\t\r\n\tend\r\n\r\n\treturn smellTable\r\n\r\nend",
    "type": "function"
  }, {
    "id": 91,
    "text": "local smellTable = utils.createTable(\"smell_table\", {\"File path\", \"Function name\", \"Function nesting level\"})",
    "type": "statement:localassign"
  }, {
    "id": 92,
    "text": "for _, s in pairs(globalMetrics.documentSmells.smellsTable) do\r\n\t\tlocal color = nil\r\n\r\n\t\t--Set background color \r\n\t\tcolor = \"WHITE\"\r\n\t\r\n\t\tfor k,v in pairs(s.smells.functionSmells) do\r\n\t\t\tif( type(v) == \"table\") then --variable is a table (count is not table)\t\r\n\t\t\t\tsmellTable = smellTable .. utils.addTableRow({s.file, k, v.level}, false, color)\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 93,
    "text": "for k,v in pairs(s.smells.functionSmells) do\r\n\t\t\tif( type(v) == \"table\") then --variable is a table (count is not table)\t\r\n\t\t\t\tsmellTable = smellTable .. utils.addTableRow({s.file, k, v.level}, false, color)\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 94,
    "text": "if( type(v) == \"table\") then --variable is a table (count is not table)\t\r\n\t\t\t\tsmellTable = smellTable .. utils.addTableRow({s.file, k, v.level}, false, color)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 95,
    "text": "smellTable = smellTable .. utils.addTableRow({s.file, k, v.level}, false, color)",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "for _, s in pairs(globalMetrics.documentSmells.smellsTable) do\r\n\t\tfor k,v in pairs(s.smells.functionSmells) do\t\r\n\r\n\t\t\tif(type(v) == \"table\") then --variable is a table (count is not table)\r\n\t\t\t\tif(v.parents) then -- if no parents, then no smell\r\n\t\t\t\t\tsmellTable = smellTable .. utils.drawParentTree(v.parents, \"function\")\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\t\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 97,
    "text": "for k,v in pairs(s.smells.functionSmells) do\t\r\n\r\n\t\t\tif(type(v) == \"table\") then --variable is a table (count is not table)\r\n\t\t\t\tif(v.parents) then -- if no parents, then no smell\r\n\t\t\t\t\tsmellTable = smellTable .. utils.drawParentTree(v.parents, \"function\")\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 98,
    "text": "if(type(v) == \"table\") then --variable is a table (count is not table)\r\n\t\t\t\tif(v.parents) then -- if no parents, then no smell\r\n\t\t\t\t\tsmellTable = smellTable .. utils.drawParentTree(v.parents, \"function\")\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 99,
    "text": "if(v.parents) then -- if no parents, then no smell\r\n\t\t\t\t\tsmellTable = smellTable .. utils.drawParentTree(v.parents, \"function\")\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 100,
    "text": "smellTable = smellTable .. utils.drawParentTree(v.parents, \"function\")",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 102,
    "text": "local function createTableDepthTable(globalMetrics)\r\n\r\n\t--Create table header\r\n\tlocal smellTable = utils.createTable(\"smell_table\", {\"File path\", \"Table name\", \"Table nesting level\"})\r\n\r\n\r\n\tfor _, s in pairs(globalMetrics.documentSmells.smellsTable) do\r\n\t\tlocal color = nil\r\n\r\n\t\t--Set background color \r\n\t\tcolor = \"WHITE\"\r\n\r\n\t\tfor k,v in pairs(s.smells.tableSmells.depth) do\r\n\t\t\tif( type(v) == \"table\") then --variable is a table (count is not table)\t\r\n\t\t\t\tsmellTable = smellTable .. utils.addTableRow({s.file, k, v.level}, false, color)\r\n\t\t\tend\r\n\t\t\r\n\t\tend\r\n\tend\r\n\r\n\t--Close table\r\n\tsmellTable = smellTable .. utils.closeTable()\r\n\r\n\t-- create parent tree\r\n\tfor _, s in pairs(globalMetrics.documentSmells.smellsTable) do\r\n\t\tfor k,v in pairs(s.smells.tableSmells.depth) do\t\r\n\r\n\t\t\tif(type(v) == \"table\") then --variable is a table (count is not table)\r\n\t\t\t\tif(v.parents) then -- if no parents, then no smell\r\n\t\t\t\t\tsmellTable = smellTable .. utils.drawParentTree(v.parents, \"Table\")\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\t\r\n\tend\r\n\r\n\treturn smellTable\r\n\r\nend",
    "type": "function"
  }, {
    "id": 103,
    "text": "local smellTable = utils.createTable(\"smell_table\", {\"File path\", \"Table name\", \"Table nesting level\"})",
    "type": "statement:localassign"
  }, {
    "id": 104,
    "text": "for _, s in pairs(globalMetrics.documentSmells.smellsTable) do\r\n\t\tlocal color = nil\r\n\r\n\t\t--Set background color \r\n\t\tcolor = \"WHITE\"\r\n\r\n\t\tfor k,v in pairs(s.smells.tableSmells.depth) do\r\n\t\t\tif( type(v) == \"table\") then --variable is a table (count is not table)\t\r\n\t\t\t\tsmellTable = smellTable .. utils.addTableRow({s.file, k, v.level}, false, color)\r\n\t\t\tend\r\n\t\t\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 105,
    "text": "for k,v in pairs(s.smells.tableSmells.depth) do\r\n\t\t\tif( type(v) == \"table\") then --variable is a table (count is not table)\t\r\n\t\t\t\tsmellTable = smellTable .. utils.addTableRow({s.file, k, v.level}, false, color)\r\n\t\t\tend\r\n\t\t\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 106,
    "text": "for _, s in pairs(globalMetrics.documentSmells.smellsTable) do\r\n\t\tfor k,v in pairs(s.smells.tableSmells.depth) do\t\r\n\r\n\t\t\tif(type(v) == \"table\") then --variable is a table (count is not table)\r\n\t\t\t\tif(v.parents) then -- if no parents, then no smell\r\n\t\t\t\t\tsmellTable = smellTable .. utils.drawParentTree(v.parents, \"Table\")\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\t\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 107,
    "text": "for k,v in pairs(s.smells.tableSmells.depth) do\t\r\n\r\n\t\t\tif(type(v) == \"table\") then --variable is a table (count is not table)\r\n\t\t\t\tif(v.parents) then -- if no parents, then no smell\r\n\t\t\t\t\tsmellTable = smellTable .. utils.drawParentTree(v.parents, \"Table\")\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 108,
    "text": "if(type(v) == \"table\") then --variable is a table (count is not table)\r\n\t\t\t\tif(v.parents) then -- if no parents, then no smell\r\n\t\t\t\t\tsmellTable = smellTable .. utils.drawParentTree(v.parents, \"Table\")\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 109,
    "text": "if(v.parents) then -- if no parents, then no smell\r\n\t\t\t\t\tsmellTable = smellTable .. utils.drawParentTree(v.parents, \"Table\")\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 110,
    "text": "smellTable = smellTable .. utils.drawParentTree(v.parents, \"Table\")",
    "type": "statement:assign"
  }, {
    "id": 111,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 112,
    "text": "local function createUpvaluesTable(globalMetrics)\r\n\r\n\t--Create table header\r\n\tlocal smellTable = utils.createTable(\"smell_table\", {\"File path\", \"Function name\", \"Upvalue\", \"Number of uses\"})\t\r\n\r\n\tfor _, s in pairs(globalMetrics.documentSmells.smellsTable) do\r\n\t\tfor k, v in pairs(s.upvalues.info) do\r\n\t\t\tcolor = \"WHITE\"\r\n\t\t\tsmellTable = smellTable .. utils.addTableRow({s.file, v.functionName, v.varName, v.usages}, true, color)\t\t\t\r\n\t\tend\r\n\tend\r\n\r\n\t--Close table\r\n\tsmellTable = smellTable .. utils.closeTable()\r\n\r\n\treturn smellTable\r\n\r\nend",
    "type": "function"
  }, {
    "id": 113,
    "text": "local smellTable = utils.createTable(\"smell_table\", {\"File path\", \"Function name\", \"Upvalue\", \"Number of uses\"})",
    "type": "statement:localassign"
  }, {
    "id": 114,
    "text": "for _, s in pairs(globalMetrics.documentSmells.smellsTable) do\r\n\t\tfor k, v in pairs(s.upvalues.info) do\r\n\t\t\tcolor = \"WHITE\"\r\n\t\t\tsmellTable = smellTable .. utils.addTableRow({s.file, v.functionName, v.varName, v.usages}, true, color)\t\t\t\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 115,
    "text": "for k, v in pairs(s.upvalues.info) do\r\n\t\t\tcolor = \"WHITE\"\r\n\t\t\tsmellTable = smellTable .. utils.addTableRow({s.file, v.functionName, v.varName, v.usages}, true, color)\t\t\t\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 116,
    "text": "smellTable = smellTable .. utils.addTableRow({s.file, v.functionName, v.varName, v.usages}, true, color)",
    "type": "statement:assign"
  }, {
    "id": 117,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 118,
    "text": "local function createLongMethodGraph(globalMetrics, withScript)\r\n\t\r\n\tlocal seriesData1 = \"\"\r\n\tlocal seriesData2 = \"\"\r\n\tlocal xAxis = \"\"\r\n\r\n\t--Loop to create series from data\r\n\tfor _, n in pairs(globalMetrics.documentSmells.functionSmells.longMethod) do\r\n\t\txAxis = xAxis .. \"'\" .. n.name .. \"', \" --Name of functions to x axis\r\n\t\tseriesData1 = seriesData1 .. n.LOC .. \", \" --Lines of code in function\r\n\t\tseriesData2 = seriesData2 .. n.LOSC .. \", \" --Lines of source code in function\r\n\tend\r\n\r\n\t--Create graph\r\n\treturn utils.createBarGraph('Lines of code in functions', '(Sorted descending)', globalMetrics.documentSmells.functionSmells.totalFunctions, xAxis, 'Lines of code', {'Total', 'Source code'}, {seriesData1, seriesData2}, 45, 55, withScript)\r\n\r\nend",
    "type": "function"
  }, {
    "id": 119,
    "text": "local seriesData1 = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 120,
    "text": "local seriesData2 = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 121,
    "text": "local xAxis = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 122,
    "text": "for _, n in pairs(globalMetrics.documentSmells.functionSmells.longMethod) do\r\n\t\txAxis = xAxis .. \"'\" .. n.name .. \"', \" --Name of functions to x axis\r\n\t\tseriesData1 = seriesData1 .. n.LOC .. \", \" --Lines of code in function\r\n\t\tseriesData2 = seriesData2 .. n.LOSC .. \", \" --Lines of source code in function\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 123,
    "text": "xAxis = xAxis .. \"'\" .. n.name .. \"', \"",
    "type": "statement:assign"
  }, {
    "id": 124,
    "text": "seriesData1 = seriesData1 .. n.LOC .. \", \"",
    "type": "statement:assign"
  }, {
    "id": 125,
    "text": "seriesData2 = seriesData2 .. n.LOSC .. \", \"",
    "type": "statement:assign"
  }, {
    "id": 126,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 127,
    "text": "local function createCycloGraph(globalMetrics, withScript)\r\n\t\r\n\tlocal seriesData = \"\"\r\n\tlocal xAxis = \"\"\r\n\r\n\t--Loop to create series from data\r\n\tfor _, n in pairs(globalMetrics.documentSmells.functionSmells.cyclomatic) do\r\n\t\txAxis = xAxis .. \"'\" .. n.name .. \"', \" --Name of functions to x axis\r\n\t\tseriesData = seriesData .. n.cyclomatic .. \", \" --Cyclomatic complexity in function\r\n\tend\r\n\r\n\t--Create graph\r\n\treturn utils.createBarGraph('Cyclomatic complexity of functions', '(Sorted descending)', globalMetrics.documentSmells.functionSmells.totalFunctions, xAxis, 'Cyclomatic complexity', {'Cyclomatic complexity'}, {seriesData}, 11, 21, withScript)\r\n\r\nend",
    "type": "function"
  }, {
    "id": 128,
    "text": "local seriesData = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 129,
    "text": "for _, n in pairs(globalMetrics.documentSmells.functionSmells.cyclomatic) do\r\n\t\txAxis = xAxis .. \"'\" .. n.name .. \"', \" --Name of functions to x axis\r\n\t\tseriesData = seriesData .. n.cyclomatic .. \", \" --Cyclomatic complexity in function\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 130,
    "text": "seriesData = seriesData .. n.cyclomatic .. \", \"",
    "type": "statement:assign"
  }, {
    "id": 131,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 132,
    "text": "local function createManyParamsGraph(globalMetrics, withScript)\r\n\t\r\n\tlocal seriesData = \"\"\r\n\tlocal xAxis = \"\"\r\n\r\n\t--Loop to create series from data\r\n\tfor _, n in pairs(globalMetrics.documentSmells.functionSmells.manyParameters) do\r\n\t\txAxis = xAxis .. \"'\" .. n.name .. \"', \" --Name of functions to x axis\r\n\t\tseriesData = seriesData .. n.NOA .. \", \" --Cyclomatic complexity in function\r\n\tend\r\n\r\n\t--Create graph\r\n\treturn utils.createBarGraph('Number of parameters in functions', '(Sorted descending)', globalMetrics.documentSmells.functionSmells.totalFunctions, xAxis, 'Number of Parameters', {'Number of Parameters'}, {seriesData}, 5, 10, withScript)\r\n\r\nend",
    "type": "function"
  }, {
    "id": 133,
    "text": "for _, n in pairs(globalMetrics.documentSmells.functionSmells.manyParameters) do\r\n\t\txAxis = xAxis .. \"'\" .. n.name .. \"', \" --Name of functions to x axis\r\n\t\tseriesData = seriesData .. n.NOA .. \", \" --Cyclomatic complexity in function\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 134,
    "text": "seriesData = seriesData .. n.NOA .. \", \"",
    "type": "statement:assign"
  }, {
    "id": 135,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 136,
    "text": "local function createLongLinesGraph(globalMetrics, withScript)\r\n\t\r\n\tlocal seriesData = \"\"\r\n\tlocal xAxis = \"\"\r\n\r\n\t--Loop to create series from data\r\n\tfor k, v in pairs(globalMetrics.documentSmells.moduleSmells) do\r\n\t\txAxis = xAxis .. \"'\" .. v.file .. \"', \" --Name of functions to x axis\r\n\t\tseriesData = seriesData .. #v.longLines .. \", \" --Count of long lines in file\r\n\tend\r\n\r\n\t--Create graph\r\n\treturn utils.createBarGraph('Count of long lines in modules', '', #globalMetrics.documentSmells.moduleSmells, xAxis, 'Count of long lines', {'Count of long lines'}, {seriesData}, 2, 7, withScript)\r\n\r\nend",
    "type": "function"
  }, {
    "id": 137,
    "text": "for k, v in pairs(globalMetrics.documentSmells.moduleSmells) do\r\n\t\txAxis = xAxis .. \"'\" .. v.file .. \"', \" --Name of functions to x axis\r\n\t\tseriesData = seriesData .. #v.longLines .. \", \" --Count of long lines in file\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 138,
    "text": "xAxis = xAxis .. \"'\" .. v.file .. \"', \"",
    "type": "statement:assign"
  }, {
    "id": 139,
    "text": "seriesData = seriesData .. #v.longLines .. \", \"",
    "type": "statement:assign"
  }, {
    "id": 140,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 141,
    "text": "local function createTablesWithManyFieldsGraph(globalMetrics, withScript)\r\n\t\r\n\tlocal seriesData = \"\"\r\n\tlocal xAxis = \"\"\r\n\r\n\t--Loop to create series from data\t\r\n\tfor k, v in pairs(globalMetrics.documentSmells.smellsTable) do\r\n\t\tif(v.smells.tableSmells.manyFields) then -- when smells were detected\r\n\t\t\txAxis = xAxis .. \"'\" .. v.file .. \"', \" --Name of functions to x axis\r\n\t\t\tseriesData = seriesData .. v.smells.tableSmells.manyFields.count .. \", \" --Count of tables with many fields in file\r\n\t\tend\t\t\r\n\tend\r\n\r\n\t--Create graph\r\n\treturn utils.createBarGraph('Count of tables with many fields in modules', '',  #globalMetrics.documentSmells.smellsTable , xAxis, 'Count of tables with many fields', {'Count of tables with many fields'}, {seriesData}, 2, 7, withScript)\r\n\r\nend",
    "type": "function"
  }, {
    "id": 142,
    "text": "for k, v in pairs(globalMetrics.documentSmells.smellsTable) do\r\n\t\tif(v.smells.tableSmells.manyFields) then -- when smells were detected\r\n\t\t\txAxis = xAxis .. \"'\" .. v.file .. \"', \" --Name of functions to x axis\r\n\t\t\tseriesData = seriesData .. v.smells.tableSmells.manyFields.count .. \", \" --Count of tables with many fields in file\r\n\t\tend\t\t\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 143,
    "text": "if(v.smells.tableSmells.manyFields) then -- when smells were detected\r\n\t\t\txAxis = xAxis .. \"'\" .. v.file .. \"', \" --Name of functions to x axis\r\n\t\t\tseriesData = seriesData .. v.smells.tableSmells.manyFields.count .. \", \" --Count of tables with many fields in file\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 144,
    "text": "seriesData = seriesData .. v.smells.tableSmells.manyFields.count .. \", \"",
    "type": "statement:assign"
  }, {
    "id": 145,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 146,
    "text": "local function createFunctionDepthGraph(globalMetrics, withScript)\r\n\t\t\t\r\n\tlocal seriesData = \"\"\r\n\tlocal xAxis = \"\"\r\n\r\n\t--Loop to create series from data\t\r\n\tfor k, v in pairs(globalMetrics.documentSmells.smellsTable) do\r\n\t\tif(v.smells.functionSmells) then -- when smells were detected\r\n\t\t\txAxis = xAxis .. \"'\" .. v.file .. \"', \" --Name of functions to x axis\r\n\t\t\tseriesData = seriesData .. v.smells.functionSmells.count .. \", \" --Count of functions with high nesting level in file\r\n\t\tend\t\t\r\n\tend\r\n\r\n\t--Create graph\r\n\treturn utils.createBarGraph('Count of function with high nesting level', '',  #globalMetrics.documentSmells.smellsTable , xAxis, 'Count of function with high nesting level', {'Count of function with high nesting level'}, {seriesData}, 2, 7, withScript)\r\n\r\nend",
    "type": "function"
  }, {
    "id": 147,
    "text": "for k, v in pairs(globalMetrics.documentSmells.smellsTable) do\r\n\t\tif(v.smells.functionSmells) then -- when smells were detected\r\n\t\t\txAxis = xAxis .. \"'\" .. v.file .. \"', \" --Name of functions to x axis\r\n\t\t\tseriesData = seriesData .. v.smells.functionSmells.count .. \", \" --Count of functions with high nesting level in file\r\n\t\tend\t\t\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 148,
    "text": "if(v.smells.functionSmells) then -- when smells were detected\r\n\t\t\txAxis = xAxis .. \"'\" .. v.file .. \"', \" --Name of functions to x axis\r\n\t\t\tseriesData = seriesData .. v.smells.functionSmells.count .. \", \" --Count of functions with high nesting level in file\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 149,
    "text": "seriesData = seriesData .. v.smells.functionSmells.count .. \", \"",
    "type": "statement:assign"
  }, {
    "id": 150,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 151,
    "text": "local function createTableDepthGraph(globalMetrics, withScript)\r\n\t\t\r\n\tlocal seriesData = \"\"\r\n\tlocal xAxis = \"\"\r\n\r\n\t--Loop to create series from data\t\r\n\tfor k, v in pairs(globalMetrics.documentSmells.smellsTable) do\r\n\t\tif(v.smells.tableSmells.depth) then -- when smells were detected\r\n\t\t\txAxis = xAxis .. \"'\" .. v.file .. \"', \" --Name of functions to x axis\r\n\t\t\tseriesData = seriesData .. v.smells.tableSmells.depth.count .. \", \" --Count of tables with high nesting level in file\r\n\t\tend\t\t\r\n\tend\r\n\r\n\t--Create graph\r\n\treturn utils.createBarGraph('Count of tables with high nesting level', '',  #globalMetrics.documentSmells.smellsTable , xAxis, 'Count of tables with high nesting level', {'Count of tables with high nesting level'}, {seriesData}, 2, 7, withScript)\r\n\r\nend",
    "type": "function"
  }, {
    "id": 152,
    "text": "for k, v in pairs(globalMetrics.documentSmells.smellsTable) do\r\n\t\tif(v.smells.tableSmells.depth) then -- when smells were detected\r\n\t\t\txAxis = xAxis .. \"'\" .. v.file .. \"', \" --Name of functions to x axis\r\n\t\t\tseriesData = seriesData .. v.smells.tableSmells.depth.count .. \", \" --Count of tables with high nesting level in file\r\n\t\tend\t\t\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 153,
    "text": "if(v.smells.tableSmells.depth) then -- when smells were detected\r\n\t\t\txAxis = xAxis .. \"'\" .. v.file .. \"', \" --Name of functions to x axis\r\n\t\t\tseriesData = seriesData .. v.smells.tableSmells.depth.count .. \", \" --Count of tables with high nesting level in file\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 154,
    "text": "seriesData = seriesData .. v.smells.tableSmells.depth.count .. \", \"",
    "type": "statement:assign"
  }, {
    "id": 155,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 156,
    "text": "local function createUpvaluesGraph(globalMetrics, withScript)\r\n\t\t\t\r\n\tlocal seriesData1 = \"\"\r\n\tlocal seriesData2 = \"\"\r\n\tlocal xAxis = \"\"\r\n\r\n\t--Loop to create series from data\t\r\n\tfor k, v in pairs(globalMetrics.documentSmells.smellsTable) do\r\n\t\t\txAxis = xAxis .. \"'\" .. v.file .. \"', \" --Name of functions to x axis\r\n\t\t\tseriesData1 = seriesData1 .. #v.upvalues.info .. \", \" --Count of variables with upvalue in file\r\n\t\t\tseriesData2 = seriesData2 .. v.upvalues.totalUsages .. \", \" --Count of total usages of variables with upvalue in file\r\n\tend\r\n\r\n\t--Create graph\r\n\treturn utils.createBarGraph('Count of variables with upvalue', '',  (#globalMetrics.documentSmells.smellsTable) * 2 , xAxis, 'Count of upvalues', {\"Total usages of variables with upvalue\", 'Total variables with upvalue'}, {seriesData2,seriesData1}, 5, 10, withScript)\r\nend",
    "type": "function"
  }, {
    "id": 157,
    "text": "for k, v in pairs(globalMetrics.documentSmells.smellsTable) do\r\n\t\t\txAxis = xAxis .. \"'\" .. v.file .. \"', \" --Name of functions to x axis\r\n\t\t\tseriesData1 = seriesData1 .. #v.upvalues.info .. \", \" --Count of variables with upvalue in file\r\n\t\t\tseriesData2 = seriesData2 .. v.upvalues.totalUsages .. \", \" --Count of total usages of variables with upvalue in file\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 158,
    "text": "seriesData1 = seriesData1 .. #v.upvalues.info .. \", \"",
    "type": "statement:assign"
  }, {
    "id": 159,
    "text": "seriesData2 = seriesData2 .. v.upvalues.totalUsages .. \", \"",
    "type": "statement:assign"
  }, {
    "id": 160,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 161,
    "text": "",
    "type": "function container"
  }, {
    "id": 162,
    "text": "local function createTable(tableClass, collumnNames, style)\r\n\t\r\n\tlocal result = addTableCSS(tableClass) --Add CSS styles from file to template\r\n\tlocal style = style or \"\"\r\n\r\n\t--Create HTML table starting tag with table row starting tag\r\n\tresult = result .. \"<table class='\" .. tableClass .. \"' style='\" .. style .. \"'><tr>\"\r\n\r\n\tfor i = 1, #collumnNames do --Add each collumn to template\r\n\t\tresult = result .. \"<th>\" .. collumnNames[i] .. \"</th>\"\r\n\tend\r\n\r\n\tresult = result .. \"</tr>\" --Close table row tag\r\n\r\n\treturn result\r\n\r\nend",
    "type": "function"
  }, {
    "id": 163,
    "text": "local function closeTable()\r\n\treturn \"</table>\"\r\nend",
    "type": "function"
  }, {
    "id": 164,
    "text": "local function addTableRow(collumns, withLink, color)\r\n\r\n\tlocal result = \"<tr>\" --Starting HTML tag of the row\r\n\tlocal start = 1\r\n\tlocal bg = color or \"WHITE\" --Default color of data collumns\r\n\r\n\tif(withLink) then --If link to the file will be provided in first collumn\r\n\t\tresult = result .. \"<td class='file'>\" .. \r\n\t\t\t\"<img src='../fileIcon.jpg' title='\" .. collumns[1] .. \"' />\" ..\r\n\t\t\t\"</td>\"\r\n\t\tstart = 2\r\n\tend\r\n\r\n\tresult = result .. \"<td class='name' nowrap>\" .. collumns[start] .. \"</td>\" --Name of the data in the row\r\n\r\n\tfor i = start + 1, #collumns do --For each data entry create new collumn in table, with background set\r\n\t\tresult = result .. \"<td class='value' bgcolor='\" .. bg .. \"'><center>\" .. collumns[i] .. \"</center></td>\" \r\n\tend\r\n\r\n\tresult = result .. \"</tr>\" --Close HTML tag of the row\r\n\r\n\treturn result\r\n\r\nend",
    "type": "function"
  }, {
    "id": 165,
    "text": "local function createBarGraph(title, subtitle, height, xAxis, yAxis, seriesName, seriesData, green, orange, withScript)\r\n\t\r\n\tlocal result = \"\"\r\n\tlocal div = \"bar_graph_\" .. math.random(2, 955) --Random graph ID to prevent errors when more graphs will be on one site\r\n\tlocal graphHeight = height * 20\r\n\r\n\t--Create box where graph will be rendered\r\n\tresult = result .. \"<div id='\" .. div .. \"' style='width: 800px; height: \" .. graphHeight .. \"px; min-height: 400px; margin: 0 auto'></div><script>\"\r\n\r\n\tif(withScript or withScript == nil) then --Include JavaScript script from file\r\n\t\tresult = result .. getGraph()\r\n\tend\r\n\r\n\t--Create graph object in JavaScript\r\n\tresult = result .. \"Highcharts.chart('\" .. div .. \"', { chart: { type: 'bar' }, \" ..\r\n\t\t\"title: { text: '\" .. title .. \"' }, subtitle: { text: '\" .. subtitle .. \"' }, \" ..\r\n\t\t\"xAxis: { categories: [ \" .. xAxis .. \" ], title: { text: null } }, \" ..\r\n\t\t\"yAxis: { min: 0, title: { text: '\" .. yAxis .. \"', align: 'high' }, labels: { overflow: 'justify' } }, \" ..\r\n\t\t\"plotOptions: { bar: { dataLabels: { enabled: true } } }, \" ..\r\n\t\t\"legend: { layout: 'vertical', align: 'right', verticalAlign: 'top', x: -40, y: 80, floating: true, borderWidth: 1, backgroundColor: '#FFFFFF', shadow: true }, \" ..\r\n\t\t\"credits: { enabled: true }, \" ..\r\n\t\t\"series: [\"\r\n\r\n\t\tfor i = 1, #seriesName do --Add series to object with color borders of data values\r\n\r\n\t\t\tresult = result .. \"{ name: '\" .. seriesName[i] .. \"', data: [\" .. seriesData[i] .. \"],\" ..\r\n\t\t\t\t\"zones: [{ value: \" .. green .. \", color: 'green'}, \" ..\r\n\t\t\t\t\t\"{ value: \" .. orange .. \", color: 'orange'}, \" ..\r\n\t\t\t\t\t\"{ color: 'red' }]},\"\r\n\r\n\t\tend\r\n\r\n\t\tresult = result .. \"]});</script>\" -- Close JavaScript object and HTML script tag\r\n\r\n\t\treturn result\r\n\r\nend",
    "type": "function"
  }, {
    "id": 166,
    "text": "local function drawParentTree(parents, prefix)\r\n\r\n\tif(not prefix) then prefix = \"\" end\r\n\r\n\tlocal result = \"\"\r\n\tlocal endTags = \"\"\r\n\r\n\tif(#parents == 0) then\r\n\t\treturn \"\"\r\n\tend\r\n\r\n\tresult = result .. \"<ul class='menulist' style='list-style-type: none;'><li><a href='#' class='toggler' onclick='return parent_toggle(this);'>[+]</a> \" \r\n\t\t\t.. prefix .. \" \" .. parents[#parents] .. \" is nested in:\"\r\n\tendTags = \"</li></ul>\" .. endTags\r\n\r\n\tfor _ ,p in pairs(parents) do --Loop throung parents trees under project\r\n\t\tresult = result .. \"<ul style='list-style-type: none; display:none;'><li> \"\r\n\t\tif(p ~= parents[#parents]) then\r\n\t\t\tresult = result .. \"<a href='#' class='toggler' onclick='return parent_toggle(this);'>[+]</a> \"\r\n\t\tend\r\n\t\tresult = result .. prefix .. \" \" .. p\r\n\t\tendTags = \"</li></ul>\" .. endTags\r\n\tend\r\n\r\n\tresult = result .. endTags\r\n\r\n\treturn result\r\n\r\nend",
    "type": "function"
  }, {
    "id": 167,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 168,
    "text": "require",
    "type": "global function"
  }, {
    "id": 169,
    "text": "type",
    "type": "global function"
  }, {
    "id": 170,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 171,
    "text": "",
    "type": "variable container"
  }, {
    "id": 172,
    "text": "",
    "type": "require container"
  }, {
    "id": 173,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 174,
    "text": "",
    "type": "interface container"
  }, {
    "id": 175,
    "text": "",
    "type": "interface"
  }, {
    "id": 176,
    "text": "",
    "type": "interface"
  }, {
    "id": 177,
    "text": "",
    "type": "interface"
  }, {
    "id": 178,
    "text": "",
    "type": "interface"
  }, {
    "id": 179,
    "text": "",
    "type": "interface"
  }, {
    "id": 180,
    "text": "",
    "type": "interface"
  }, {
    "id": 181,
    "text": "",
    "type": "interface"
  }, {
    "id": 182,
    "text": "",
    "type": "interface"
  }, {
    "id": 183,
    "text": "",
    "type": "interface"
  }, {
    "id": 184,
    "text": "",
    "type": "interface"
  }, {
    "id": 185,
    "text": "",
    "type": "interface"
  }, {
    "id": 186,
    "text": "",
    "type": "interface"
  }, {
    "id": 187,
    "text": "",
    "type": "interface"
  }, {
    "id": 188,
    "text": "",
    "type": "interface"
  }, {
    "id": 189,
    "text": "",
    "type": "interface"
  }, {
    "id": 190,
    "text": "",
    "type": "interface"
  }, {
    "id": 191,
    "text": "",
    "type": "interface"
  }, {
    "id": 192,
    "text": "",
    "type": "interface"
  } ]
}