{
  "_filename": "docMetricsTemplates.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luametrics/src/metrics/templates/docMetricsTemplates.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 3,
    "label": "has",
    "to": 11
  }, {
    "from": 3,
    "label": "has",
    "to": 12
  }, {
    "from": 3,
    "label": "has",
    "to": 13
  }, {
    "from": 3,
    "label": "has",
    "to": 14
  }, {
    "from": 3,
    "label": "has",
    "to": 15
  }, {
    "from": 3,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 17,
    "label": "has",
    "to": 24
  }, {
    "from": 17,
    "label": "has",
    "to": 25
  }, {
    "from": 17,
    "label": "has",
    "to": 26
  }, {
    "from": 17,
    "label": "has",
    "to": 27
  }, {
    "from": 17,
    "label": "has",
    "to": 28
  }, {
    "from": 17,
    "label": "has",
    "to": 29
  }, {
    "from": 17,
    "label": "has",
    "to": 30
  }, {
    "from": 17,
    "label": "has",
    "to": 31
  }, {
    "from": 17,
    "label": "has",
    "to": 32
  }, {
    "from": 17,
    "label": "has",
    "to": 33
  }, {
    "from": 17,
    "label": "has",
    "to": 34
  }, {
    "from": 17,
    "label": "has",
    "to": 35
  }, {
    "from": 17,
    "label": "has",
    "to": 36
  }, {
    "from": 17,
    "label": "has",
    "to": 14
  }, {
    "from": 17,
    "label": "has",
    "to": 15
  }, {
    "from": 17,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 38,
    "label": "has",
    "to": 42
  }, {
    "from": 38,
    "label": "has",
    "to": 43
  }, {
    "from": 38,
    "label": "has",
    "to": 44
  }, {
    "from": 38,
    "label": "has",
    "to": 45
  }, {
    "from": 38,
    "label": "has",
    "to": 46
  }, {
    "from": 38,
    "label": "has",
    "to": 47
  }, {
    "from": 38,
    "label": "has",
    "to": 48
  }, {
    "from": 38,
    "label": "has",
    "to": 49
  }, {
    "from": 38,
    "label": "has",
    "to": 50
  }, {
    "from": 38,
    "label": "has",
    "to": 14
  }, {
    "from": 38,
    "label": "has",
    "to": 15
  }, {
    "from": 38,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 52,
    "label": "has",
    "to": 14
  }, {
    "from": 52,
    "label": "has",
    "to": 15
  }, {
    "from": 52,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 57,
    "label": "has",
    "to": 60
  }, {
    "from": 57,
    "label": "has",
    "to": 61
  }, {
    "from": 57,
    "label": "has",
    "to": 62
  }, {
    "from": 57,
    "label": "has",
    "to": 63
  }, {
    "from": 57,
    "label": "has",
    "to": 64
  }, {
    "from": 57,
    "label": "has",
    "to": 65
  }, {
    "from": 57,
    "label": "has",
    "to": 66
  }, {
    "from": 57,
    "label": "has",
    "to": 67
  }, {
    "from": 57,
    "label": "has",
    "to": 68
  }, {
    "from": 57,
    "label": "has",
    "to": 69
  }, {
    "from": 57,
    "label": "has",
    "to": 70
  }, {
    "from": 57,
    "label": "has",
    "to": 71
  }, {
    "from": 57,
    "label": "has",
    "to": 72
  }, {
    "from": 57,
    "label": "has",
    "to": 73
  }, {
    "from": 57,
    "label": "has",
    "to": 74
  }, {
    "from": 57,
    "label": "has",
    "to": 75
  }, {
    "from": 57,
    "label": "has",
    "to": 76
  }, {
    "from": 57,
    "label": "has",
    "to": 77
  }, {
    "from": 57,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 81
  }, {
    "from": 79,
    "label": "has",
    "to": 82
  }, {
    "from": 79,
    "label": "has",
    "to": 83
  }, {
    "from": 79,
    "label": "has",
    "to": 84
  }, {
    "from": 79,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 85,
    "label": "has",
    "to": 88
  }, {
    "from": 85,
    "label": "has",
    "to": 89
  }, {
    "from": 85,
    "label": "has",
    "to": 90
  }, {
    "from": 85,
    "label": "has",
    "to": 91
  }, {
    "from": 85,
    "label": "has",
    "to": 92
  }, {
    "from": 85,
    "label": "has",
    "to": 93
  }, {
    "from": 85,
    "label": "has",
    "to": 94
  }, {
    "from": 85,
    "label": "has",
    "to": 95
  }, {
    "from": 85,
    "label": "has",
    "to": 96
  }, {
    "from": 85,
    "label": "has",
    "to": 97
  }, {
    "from": 57,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 98,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 100,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 100,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 100,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 57,
    "label": "has",
    "to": 109
  }, {
    "from": 57,
    "label": "has",
    "to": 110
  }, {
    "from": 57,
    "label": "has",
    "to": 111
  }, {
    "from": 57,
    "label": "has",
    "to": 112
  }, {
    "from": 57,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 113,
    "label": "has",
    "to": 115
  }, {
    "from": 113,
    "label": "has",
    "to": 116
  }, {
    "from": 57,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 117,
    "label": "has",
    "to": 119
  }, {
    "from": 117,
    "label": "has",
    "to": 120
  }, {
    "from": 117,
    "label": "has",
    "to": 121
  }, {
    "from": 117,
    "label": "has",
    "to": 122
  }, {
    "from": 57,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 123,
    "label": "has",
    "to": 125
  }, {
    "from": 123,
    "label": "has",
    "to": 126
  }, {
    "from": 123,
    "label": "has",
    "to": 127
  }, {
    "from": 123,
    "label": "has",
    "to": 128
  }, {
    "from": 57,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 129,
    "label": "has",
    "to": 131
  }, {
    "from": 129,
    "label": "has",
    "to": 132
  }, {
    "from": 129,
    "label": "has",
    "to": 133
  }, {
    "from": 129,
    "label": "has",
    "to": 134
  }, {
    "from": 57,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 135,
    "label": "has",
    "to": 137
  }, {
    "from": 57,
    "label": "has",
    "to": 14
  }, {
    "from": 57,
    "label": "has",
    "to": 15
  }, {
    "from": 57,
    "label": "has",
    "to": 138
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 139,
    "label": "has",
    "to": 141
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 139,
    "label": "has",
    "to": 15
  }, {
    "from": 139,
    "label": "has",
    "to": 143
  }, {
    "from": 144,
    "label": "has",
    "to": 140
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 144,
    "label": "has",
    "to": 15
  }, {
    "from": 144,
    "label": "has",
    "to": 147
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 148,
    "label": "has",
    "to": 150
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 150,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 153,
    "label": "has",
    "to": 155
  }, {
    "from": 153,
    "label": "has",
    "to": 156
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 153,
    "label": "has",
    "to": 158
  }, {
    "from": 158,
    "label": "has",
    "to": 157
  }, {
    "from": 153,
    "label": "has",
    "to": 159
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 159,
    "label": "has",
    "to": 161
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 159,
    "label": "has",
    "to": 163
  }, {
    "from": 163,
    "label": "has",
    "to": 164
  }, {
    "from": 163,
    "label": "has",
    "to": 165
  }, {
    "from": 163,
    "label": "has",
    "to": 166
  }, {
    "from": 166,
    "label": "has",
    "to": 167
  }, {
    "from": 166,
    "label": "has",
    "to": 168
  }, {
    "from": 163,
    "label": "has",
    "to": 169
  }, {
    "from": 159,
    "label": "has",
    "to": 170
  }, {
    "from": 153,
    "label": "has",
    "to": 171
  }, {
    "from": 150,
    "label": "has",
    "to": 172
  }, {
    "from": 148,
    "label": "has",
    "to": 15
  }, {
    "from": 148,
    "label": "has",
    "to": 173
  }, {
    "from": 3,
    "label": "calls",
    "to": 177
  }, {
    "from": 17,
    "label": "calls",
    "to": 177
  }, {
    "from": 38,
    "label": "calls",
    "to": 177
  }, {
    "from": 52,
    "label": "calls",
    "to": 177
  }, {
    "from": 57,
    "label": "calls",
    "to": 177
  }, {
    "from": 3,
    "label": "calls",
    "to": 176
  }, {
    "from": 17,
    "label": "calls",
    "to": 176
  }, {
    "from": 38,
    "label": "calls",
    "to": 176
  }, {
    "from": 52,
    "label": "calls",
    "to": 176
  }, {
    "from": 57,
    "label": "calls",
    "to": 176
  }, {
    "from": 174,
    "label": "calls",
    "to": 181
  }, {
    "from": 52,
    "label": "calls",
    "to": 180
  }, {
    "from": 57,
    "label": "calls",
    "to": 180
  }, {
    "from": 57,
    "label": "calls",
    "to": 180
  }, {
    "from": 139,
    "label": "calls",
    "to": 180
  }, {
    "from": 144,
    "label": "calls",
    "to": 180
  }, {
    "from": 148,
    "label": "calls",
    "to": 180
  }, {
    "from": 148,
    "label": "calls",
    "to": 180
  }, {
    "from": 148,
    "label": "calls",
    "to": 180
  }, {
    "from": 148,
    "label": "calls",
    "to": 180
  }, {
    "from": 148,
    "label": "calls",
    "to": 180
  }, {
    "from": 148,
    "label": "calls",
    "to": 180
  }, {
    "from": 148,
    "label": "calls",
    "to": 180
  }, {
    "from": 148,
    "label": "calls",
    "to": 180
  }, {
    "from": 139,
    "label": "calls",
    "to": 179
  }, {
    "from": 144,
    "label": "calls",
    "to": 179
  }, {
    "from": 3,
    "label": "calls",
    "to": 178
  }, {
    "from": 3,
    "label": "calls",
    "to": 178
  }, {
    "from": 3,
    "label": "calls",
    "to": 178
  }, {
    "from": 3,
    "label": "calls",
    "to": 178
  }, {
    "from": 3,
    "label": "calls",
    "to": 178
  }, {
    "from": 3,
    "label": "calls",
    "to": 178
  }, {
    "from": 3,
    "label": "calls",
    "to": 178
  }, {
    "from": 3,
    "label": "calls",
    "to": 178
  }, {
    "from": 17,
    "label": "calls",
    "to": 178
  }, {
    "from": 17,
    "label": "calls",
    "to": 178
  }, {
    "from": 17,
    "label": "calls",
    "to": 178
  }, {
    "from": 17,
    "label": "calls",
    "to": 178
  }, {
    "from": 17,
    "label": "calls",
    "to": 178
  }, {
    "from": 17,
    "label": "calls",
    "to": 178
  }, {
    "from": 17,
    "label": "calls",
    "to": 178
  }, {
    "from": 17,
    "label": "calls",
    "to": 178
  }, {
    "from": 17,
    "label": "calls",
    "to": 178
  }, {
    "from": 17,
    "label": "calls",
    "to": 178
  }, {
    "from": 17,
    "label": "calls",
    "to": 178
  }, {
    "from": 17,
    "label": "calls",
    "to": 178
  }, {
    "from": 38,
    "label": "calls",
    "to": 178
  }, {
    "from": 38,
    "label": "calls",
    "to": 178
  }, {
    "from": 38,
    "label": "calls",
    "to": 178
  }, {
    "from": 38,
    "label": "calls",
    "to": 178
  }, {
    "from": 38,
    "label": "calls",
    "to": 178
  }, {
    "from": 38,
    "label": "calls",
    "to": 178
  }, {
    "from": 38,
    "label": "calls",
    "to": 178
  }, {
    "from": 38,
    "label": "calls",
    "to": 178
  }, {
    "from": 38,
    "label": "calls",
    "to": 178
  }, {
    "from": 38,
    "label": "calls",
    "to": 178
  }, {
    "from": 38,
    "label": "calls",
    "to": 178
  }, {
    "from": 52,
    "label": "calls",
    "to": 178
  }, {
    "from": 57,
    "label": "calls",
    "to": 178
  }, {
    "from": 57,
    "label": "calls",
    "to": 178
  }, {
    "from": 57,
    "label": "calls",
    "to": 178
  }, {
    "from": 57,
    "label": "calls",
    "to": 178
  }, {
    "from": 57,
    "label": "calls",
    "to": 178
  }, {
    "from": 57,
    "label": "calls",
    "to": 178
  }, {
    "from": 57,
    "label": "calls",
    "to": 178
  }, {
    "from": 57,
    "label": "calls",
    "to": 178
  }, {
    "from": 57,
    "label": "calls",
    "to": 178
  }, {
    "from": 57,
    "label": "calls",
    "to": 178
  }, {
    "from": 57,
    "label": "calls",
    "to": 178
  }, {
    "from": 57,
    "label": "calls",
    "to": 178
  }, {
    "from": 57,
    "label": "calls",
    "to": 178
  }, {
    "from": 57,
    "label": "calls",
    "to": 178
  }, {
    "from": 57,
    "label": "calls",
    "to": 178
  }, {
    "from": 57,
    "label": "calls",
    "to": 178
  }, {
    "from": 57,
    "label": "calls",
    "to": 178
  }, {
    "from": 57,
    "label": "calls",
    "to": 178
  }, {
    "from": 57,
    "label": "calls",
    "to": 178
  }, {
    "from": 57,
    "label": "calls",
    "to": 178
  }, {
    "from": 57,
    "label": "calls",
    "to": 178
  }, {
    "from": 57,
    "label": "calls",
    "to": 178
  }, {
    "from": 57,
    "label": "calls",
    "to": 178
  }, {
    "from": 3,
    "label": "calls",
    "to": 175
  }, {
    "from": 17,
    "label": "calls",
    "to": 175
  }, {
    "from": 17,
    "label": "calls",
    "to": 175
  }, {
    "from": 38,
    "label": "calls",
    "to": 175
  }, {
    "from": 38,
    "label": "calls",
    "to": 175
  }, {
    "from": 38,
    "label": "calls",
    "to": 175
  }, {
    "from": 38,
    "label": "calls",
    "to": 175
  }, {
    "from": 38,
    "label": "calls",
    "to": 175
  }, {
    "from": 38,
    "label": "calls",
    "to": 175
  }, {
    "from": 38,
    "label": "calls",
    "to": 175
  }, {
    "from": 57,
    "label": "calls",
    "to": 175
  }, {
    "from": 57,
    "label": "calls",
    "to": 175
  }, {
    "from": 57,
    "label": "calls",
    "to": 175
  }, {
    "from": 57,
    "label": "calls",
    "to": 175
  }, {
    "from": 57,
    "label": "calls",
    "to": 175
  }, {
    "from": 57,
    "label": "calls",
    "to": 175
  }, {
    "from": 57,
    "label": "calls",
    "to": 175
  }, {
    "from": 57,
    "label": "calls",
    "to": 175
  }, {
    "from": 57,
    "label": "calls",
    "to": 175
  }, {
    "from": 57,
    "label": "calls",
    "to": 175
  }, {
    "from": 57,
    "label": "calls",
    "to": 175
  }, {
    "from": 57,
    "label": "calls",
    "to": 175
  }, {
    "from": 57,
    "label": "calls",
    "to": 175
  }, {
    "from": 57,
    "label": "calls",
    "to": 175
  }, {
    "from": 57,
    "label": "calls",
    "to": 175
  }, {
    "from": 57,
    "label": "calls",
    "to": 175
  }, {
    "from": 57,
    "label": "calls",
    "to": 175
  }, {
    "from": 57,
    "label": "calls",
    "to": 175
  }, {
    "from": 1,
    "label": "contains",
    "to": 174
  }, {
    "from": 174,
    "label": "declares",
    "to": 3
  }, {
    "from": 174,
    "label": "declares",
    "to": 17
  }, {
    "from": 174,
    "label": "declares",
    "to": 38
  }, {
    "from": 174,
    "label": "declares",
    "to": 52
  }, {
    "from": 174,
    "label": "declares",
    "to": 57
  }, {
    "from": 174,
    "label": "declares",
    "to": 139
  }, {
    "from": 174,
    "label": "declares",
    "to": 144
  }, {
    "from": 174,
    "label": "declares",
    "to": 148
  }, {
    "from": 1,
    "label": "contains",
    "to": 182
  }, {
    "from": 1,
    "label": "contains",
    "to": 183
  }, {
    "from": 183,
    "label": "initializes",
    "to": 184
  }, {
    "from": 184,
    "label": "requires",
    "to": 2
  }, {
    "from": 1,
    "label": "provides",
    "to": 185
  }, {
    "from": 3,
    "label": "represents",
    "to": 186
  }, {
    "from": 185,
    "label": "provides",
    "to": 186
  }, {
    "from": 17,
    "label": "represents",
    "to": 187
  }, {
    "from": 185,
    "label": "provides",
    "to": 187
  }, {
    "from": 38,
    "label": "represents",
    "to": 188
  }, {
    "from": 185,
    "label": "provides",
    "to": 188
  }, {
    "from": 52,
    "label": "represents",
    "to": 189
  }, {
    "from": 185,
    "label": "provides",
    "to": 189
  }, {
    "from": 57,
    "label": "represents",
    "to": 190
  }, {
    "from": 185,
    "label": "provides",
    "to": 190
  }, {
    "from": 139,
    "label": "represents",
    "to": 191
  }, {
    "from": 185,
    "label": "provides",
    "to": 191
  }, {
    "from": 144,
    "label": "represents",
    "to": 192
  }, {
    "from": 185,
    "label": "provides",
    "to": 192
  }, {
    "from": 148,
    "label": "represents",
    "to": 193
  }, {
    "from": 185,
    "label": "provides",
    "to": 193
  }, {
    "from": 194,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "docMetricsTemplates",
    "type": "module"
  }, {
    "id": 2,
    "text": "utils",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function createLOCTable(LOC, fileNum, moduleNum)\r\n\r\n\t--Create table header\r\n\tlocal metricsTable = utils.createTable(\"metric_index\", {\"Lines of code\", \"Value\"})\r\n\r\n\tif (fileNum and moduleNum) then\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Number of files\", fileNum}, false)\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Number of modules\", moduleNum}, false)\r\n\tend\r\n\r\n\t--Add lines to table\r\n\tmetricsTable = metricsTable .. utils.addTableRow({\"Lines Total\", LOC.lines}, false)\r\n\tmetricsTable = metricsTable .. utils.addTableRow({\"Executable code lines\", LOC.lines_code}, false)\r\n\tmetricsTable = metricsTable .. utils.addTableRow({\"Commented lines\", LOC.lines_comment}, false)\r\n\tmetricsTable = metricsTable .. utils.addTableRow({\"Blank lines\", LOC.lines_blank}, false)\r\n\tmetricsTable = metricsTable .. utils.addTableRow({\"Nonempty lines\", LOC.lines_nonempty}, false)\r\n\tmetricsTable = metricsTable .. utils.addTableRow({\"Comment percentage\", utils.round(LOC.lines_comment / LOC.lines_code) * 100 .. \"%\"}, false)\r\n\r\n\t--Close table\r\n\tmetricsTable = metricsTable .. utils.closeTable()\r\n\r\n\treturn metricsTable\r\n\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local metricsTable = utils.createTable(\"metric_index\", {\"Lines of code\", \"Value\"})",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "if (fileNum and moduleNum) then\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Number of files\", fileNum}, false)\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Number of modules\", moduleNum}, false)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Number of files\", fileNum}, false)",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Number of modules\", moduleNum}, false)",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Lines Total\", LOC.lines}, false)",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Executable code lines\", LOC.lines_code}, false)",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Commented lines\", LOC.lines_comment}, false)",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Blank lines\", LOC.lines_blank}, false)",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Nonempty lines\", LOC.lines_nonempty}, false)",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Comment percentage\", utils.round(LOC.lines_comment / LOC.lines_code) * 100 .. \"%\"}, false)",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "metricsTable = metricsTable .. utils.closeTable()",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "local function createDocMetricsTable(documentMetrics)\r\n\t\r\n\t--If documented + not documented tables != 0 count percentage else 0 (Prevent dividing by 0)\r\n\tif ((documentMetrics.nondocumentedTablesCounter + documentMetrics.documentedTablesCounter) ~= 0) then\r\n\t\tcommTablePercentage = utils.round(documentMetrics.documentedTablesCounter/(documentMetrics.nondocumentedTablesCounter + documentMetrics.documentedTablesCounter))*100 \r\n\telse\r\n\t\tcommTablePercentage = 0\r\n\tend\r\n\r\n\t--If documented + not documented functions != 0 count percentage else 0 (Prevent dividing by 0)\r\n\tif((documentMetrics.nondocumentedFunctionsCounter + documentMetrics.documentedFunctionsCounter)~=0)then\r\n\t\tcommFunctionPercentage = utils.round(documentMetrics.documentedFunctionsCounter/(documentMetrics.nondocumentedFunctionsCounter + documentMetrics.documentedFunctionsCounter))*100\r\n\telse\r\n\t\tcommFunctionPercentage = 0\r\n\tend\r\n\r\n\t--Create table header\r\n\tlocal metricsTable = utils.createTable(\"metric_index\", {\"Document metrics\", \"Value\"})\r\n\r\n\t--Add rows to table\r\n\tmetricsTable = metricsTable .. utils.addTableRow({\"Number of all documented functions\", documentMetrics.documentedFunctionsCounter}, false)\r\n\tmetricsTable = metricsTable .. utils.addTableRow({\"Number of all nondocumented functions\", documentMetrics.nondocumentedFunctionsCounter}, false)\r\n\tmetricsTable = metricsTable .. utils.addTableRow({\"Documented function percentage\", commFunctionPercentage .. \"%\"}, false)\r\n\tmetricsTable = metricsTable .. utils.addTableRow({\"Number of all documented tables\", documentMetrics.documentedTablesCounter}, false)\r\n\tmetricsTable = metricsTable .. utils.addTableRow({\"Number of all nondocumented tables\", documentMetrics.nondocumentedTablesCounter}, false) \r\n\tmetricsTable = metricsTable .. utils.addTableRow({\"Documented table percentage\", commTablePercentage .. \"%\"}, false)\r\n\tmetricsTable = metricsTable .. utils.addTableRow({\"Number of TODO comments\", #documentMetrics.todos}, false)\r\n\tmetricsTable = metricsTable .. utils.addTableRow({\"Number of bug comments\", #documentMetrics.bugs}, false)\r\n\tmetricsTable = metricsTable .. utils.addTableRow({\"Number of question comments\", #documentMetrics.questions}, false)\r\n\tmetricsTable = metricsTable .. utils.addTableRow({\"Number of fixme comments\", #documentMetrics.fixmes}, false)\r\n\tmetricsTable = metricsTable .. utils.addTableRow({\"Number of how comments\", #documentMetrics.hows}, false)\r\n\tmetricsTable = metricsTable .. utils.addTableRow({\"Number of info comments\", #documentMetrics.infos}, false)\r\n\r\n\t--Close table\r\n\tmetricsTable = metricsTable .. utils.closeTable()\r\n\r\n\treturn metricsTable\r\n\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "if ((documentMetrics.nondocumentedTablesCounter + documentMetrics.documentedTablesCounter) ~= 0) then\r\n\t\tcommTablePercentage = utils.round(documentMetrics.documentedTablesCounter/(documentMetrics.nondocumentedTablesCounter + documentMetrics.documentedTablesCounter))*100 \r\n\telse\r\n\t\tcommTablePercentage = 0\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "commTablePercentage = utils.round(documentMetrics.documentedTablesCounter/(documentMetrics.nondocumentedTablesCounter + documentMetrics.documentedTablesCounter))*100",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "commTablePercentage = 0",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "if((documentMetrics.nondocumentedFunctionsCounter + documentMetrics.documentedFunctionsCounter)~=0)then\r\n\t\tcommFunctionPercentage = utils.round(documentMetrics.documentedFunctionsCounter/(documentMetrics.nondocumentedFunctionsCounter + documentMetrics.documentedFunctionsCounter))*100\r\n\telse\r\n\t\tcommFunctionPercentage = 0\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "commFunctionPercentage = utils.round(documentMetrics.documentedFunctionsCounter/(documentMetrics.nondocumentedFunctionsCounter + documentMetrics.documentedFunctionsCounter))*100",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "commFunctionPercentage = 0",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "local metricsTable = utils.createTable(\"metric_index\", {\"Document metrics\", \"Value\"})",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Number of all documented functions\", documentMetrics.documentedFunctionsCounter}, false)",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Number of all nondocumented functions\", documentMetrics.nondocumentedFunctionsCounter}, false)",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Documented function percentage\", commFunctionPercentage .. \"%\"}, false)",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Number of all documented tables\", documentMetrics.documentedTablesCounter}, false)",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Number of all nondocumented tables\", documentMetrics.nondocumentedTablesCounter}, false)",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Documented table percentage\", commTablePercentage .. \"%\"}, false)",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Number of TODO comments\", #documentMetrics.todos}, false)",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Number of bug comments\", #documentMetrics.bugs}, false)",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Number of question comments\", #documentMetrics.questions}, false)",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Number of fixme comments\", #documentMetrics.fixmes}, false)",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Number of how comments\", #documentMetrics.hows}, false)",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Number of info comments\", #documentMetrics.infos}, false)",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "local function createHalsteadTable(halstead)\r\n\t\r\n\t--Create table header\r\n\tlocal metricsTable = utils.createTable(\"metric_index\", {\"Halstead metrics\", \"Value\"})\r\n\r\n\t--Add rows to table\r\n\tmetricsTable = metricsTable .. utils.addTableRow({\"Number of operators\", halstead.number_of_operators}, false)\r\n\tmetricsTable = metricsTable .. utils.addTableRow({\"Number of operands\", halstead.number_of_operands}, false)\r\n\tmetricsTable = metricsTable .. utils.addTableRow({\"Number of unique operators\", halstead.unique_operators}, false)\r\n\tmetricsTable = metricsTable .. utils.addTableRow({\"Number of unique operands\", halstead.unique_operands}, false)\r\n\tmetricsTable = metricsTable .. utils.addTableRow({\"LTH - Halstead length\", utils.round(halstead.LTH)}, false)\r\n\tmetricsTable = metricsTable .. utils.addTableRow({\"VOC - Halstead vocabulary\", utils.round(halstead.VOC)}, false)\r\n\tmetricsTable = metricsTable .. utils.addTableRow({\"DIF - Halstead difficulty\", utils.round(halstead.DIF)}, false)\r\n\tmetricsTable = metricsTable .. utils.addTableRow({\"VOL - Halstead volume\", utils.round(halstead.VOL)}, false)\r\n\tmetricsTable = metricsTable .. utils.addTableRow({\"EFF - Halstead Effort\", utils.round(halstead.EFF)}, false)\r\n\tmetricsTable = metricsTable .. utils.addTableRow({\"BUG - Halstead bugs\", utils.round(halstead.BUG)}, false)\r\n\tmetricsTable = metricsTable .. utils.addTableRow({\"Time - Halstead Time\", utils.round(halstead.time)}, false)\r\n\r\n\t--Close table\r\n\tmetricsTable = metricsTable .. utils.closeTable()\r\n\r\n\treturn metricsTable\r\n\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "local metricsTable = utils.createTable(\"metric_index\", {\"Halstead metrics\", \"Value\"})",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Number of operators\", halstead.number_of_operators}, false)",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Number of operands\", halstead.number_of_operands}, false)",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Number of unique operators\", halstead.unique_operators}, false)",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Number of unique operands\", halstead.unique_operands}, false)",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"LTH - Halstead length\", utils.round(halstead.LTH)}, false)",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"VOC - Halstead vocabulary\", utils.round(halstead.VOC)}, false)",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"DIF - Halstead difficulty\", utils.round(halstead.DIF)}, false)",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"VOL - Halstead volume\", utils.round(halstead.VOL)}, false)",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"EFF - Halstead Effort\", utils.round(halstead.EFF)}, false)",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"BUG - Halstead bugs\", utils.round(halstead.BUG)}, false)",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Time - Halstead Time\", utils.round(halstead.time)}, false)",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "local function createStatementsTable(statements)\r\n\t\r\n\t--Create table header\r\n\tlocal metricsTable = utils.createTable(\"metric_index\", {\"Statement usage\", \"Value\"})\r\n\r\n\t--Add rows to table in loop\r\n\tfor name, stats in pairs(statements) do\r\n\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({name, #stats}, false)\r\n\r\n\tend\r\n\r\n\t--Close table\r\n\tmetricsTable = metricsTable .. utils.closeTable()\r\n\r\n\treturn metricsTable\r\n\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "local metricsTable = utils.createTable(\"metric_index\", {\"Statement usage\", \"Value\"})",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "for name, stats in pairs(statements) do\r\n\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({name, #stats}, false)\r\n\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 55,
    "text": "metricsTable = metricsTable .. utils.addTableRow({name, #stats}, false)",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "local function createFunctionsTable(globalMetrics, fileNum)\r\n\r\n\t--Create local references\r\n\tlocal funDefinitions = globalMetrics.functionDefinitions\r\n\tlocal file_AST_list = globalMetrics.file_AST_list\r\n\r\n\t--Prepare variables for statistics about functions\r\n\tcount_all = #funDefinitions\r\n\tcount_global = 0\r\n\tcount_local = 0\r\n\t\r\n\tcount_lines = 0\r\n\tcount_lines_code = 0\r\n\tcount_lines_comment = 0\r\n\tcount_lines_blank = 0\r\n\tcount_lines_nonempty = 0\r\n\t\r\n\tcount_global_lines = 0\r\n\tcount_global_lines_code = 0\r\n\tcount_global_lines_comment = 0\r\n\tcount_global_lines_blank = 0\r\n\tcount_global_lines_nonempty = 0\r\n\t\r\n\tcount_local_lines = 0\r\n\tcount_local_lines_code = 0\r\n\tcount_local_lines_comment = 0\r\n\tcount_local_lines_blank = 0\r\n\tcount_local_lines_nonempty = 0\r\n\t\t\r\n\t\r\n\tfor _, fun in pairs(funDefinitions) do --Loop through functions\r\n\r\n\t\t--Global and Local functions statistics\r\n\t\tif (fun.tag == 'GlobalFunction' or fun.tag == 'LocalFunction') then \r\n\t\t\tcount_lines         = count_lines             + fun.metrics.LOC.lines\r\n\t\t\tcount_lines_code    = count_lines_code        + fun.metrics.LOC.lines_code\r\n\t\t\tcount_lines_comment = count_lines_comment + fun.metrics.LOC.lines_comment\r\n\t\t\tcount_lines_blank = count_lines_blank     + fun.metrics.LOC.lines_blank\r\n\t\t\tcount_lines_nonempty= count_lines_nonempty    + fun.metrics.LOC.lines_nonempty\r\n\t\r\n\t\t\tif (fun.isGlobal) then --Global functions statistics\r\n\t\t\t\tcount_global = count_global + 1\r\n\t\t\t\tcount_global_lines            = count_global_lines            + fun.metrics.LOC.lines\r\n\t\t\t\tcount_global_lines_code     = count_global_lines_code     + fun.metrics.LOC.lines_code\r\n\t\t\t\tcount_global_lines_comment    = count_global_lines_comment    + fun.metrics.LOC.lines_comment\r\n\t\t\t\tcount_global_lines_blank    = count_global_lines_blank        + fun.metrics.LOC.lines_blank\r\n\t\t\t\tcount_global_lines_nonempty = count_global_lines_nonempty + fun.metrics.LOC.lines_nonempty\r\n\t\t\telse --Local functions statistics\r\n\t\t\t\tcount_local = count_local + 1\r\n\t\t\t\tcount_local_lines             = count_local_lines             + fun.metrics.LOC.lines\r\n\t\t\t\tcount_local_lines_code        = count_local_lines_code        + fun.metrics.LOC.lines_code\r\n\t\t\t\tcount_local_lines_comment     = count_local_lines_comment + fun.metrics.LOC.lines_comment\r\n\t\t\t\tcount_local_lines_blank     = count_local_lines_blank     + fun.metrics.LOC.lines_blank\r\n\t\t\t\tcount_local_lines_nonempty    = count_local_lines_nonempty    + fun.metrics.LOC.lines_nonempty\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\t\r\n\t--File with max functions and min functions\r\n\tif (file_AST_list) then \r\n\t\tmin_fun_in_modulem, max_fun_in_module = nil, nil\r\n\t\tfor filename, AST in pairs(file_AST_list) do\r\n\t\t\tif (max_fun_in_module == nil) then max_fun_in_module = { AST.metrics.currentModuleName or filename, #AST.metrics.functionDefinitions } end\r\n\t\t\tif (min_fun_in_module == nil) then min_fun_in_module = { AST.metrics.currentModuleName or filename, #AST.metrics.functionDefinitions } end\r\n\t\t\t\r\n\t\t\tif (max_fun_in_module[2] <    #AST.metrics.functionDefinitions ) then\r\n\t\t\t\tmax_fun_in_module = { AST.metrics.currentModuleName or filename,    #AST.metrics.functionDefinitions }\r\n\t\t\tend\r\n\t\t\tif (min_fun_in_module[2] >    #AST.metrics.functionDefinitions ) then\r\n\t\t\t\tmin_fun_in_module = { AST.metrics.currentModuleName or filename,    #AST.metrics.functionDefinitions }\r\n\t\t\tend\r\n\t\t\t\r\n\t\tend\r\n\tend\r\n\r\n\t--Create table header\r\n\tlocal metricsTable = utils.createTable(\"metric_index\", {\"Function metrics\", \"Value\"}, \"width: 570px;\")\r\n\r\n\t--Add table rows\r\n\tmetricsTable = metricsTable .. utils.addTableRow({\"Number of all functions\", count_all}, false)\r\n\tmetricsTable = metricsTable .. utils.addTableRow({\"Number of all global functions\", count_global}, false)\r\n\tmetricsTable = metricsTable .. utils.addTableRow({\"Number of all local functions\", count_local}, false)\r\n\t\r\n\tif (fileNum) then\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Average number of functions per file\", utils.round(count_all / fileNum)}, false)\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Average number of global function per file\", utils.round(count_global / fileNum)}, false)\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Average number of local functions per file\", utils.round(count_local / fileNum)}, false)\r\n\tend \r\n\r\n\tif (count_all > 0) then --If there are any functions\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Average number of lines for function\", utils.round(count_lines / count_all)}, false)\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Average number of code lines for function\", utils.round(count_lines_code / count_all)}, false)\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Average number of comment lines for function\", utils.round(count_lines_comment / count_all)}, false)\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Average number of blank lines for function\", utils.round(count_lines_blank / count_all)}, false)\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Average number of nonempty lines for function\", utils.round(count_lines_nonempty / count_all)}, false)\r\n\tend\r\n\r\n\tif count_global > 0 then --If there are any global functions\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Average number of lines for global function\", utils.round(count_global_lines / count_global)}, false)\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Average number of code lines for global function\", utils.round(count_global_lines_code / count_global)}, false)\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Average number of comment lines for global function\", utils.round(count_global_lines_comment / count_global)}, false)\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Average number of blank lines for global function\", utils.round(count_global_lines_blank / count_global)}, false)\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Average number of nonempty lines for global function\", utils.round(count_global_lines_nonempty / count_global)}, false)\r\n\tend\r\n\r\n\tif count_local > 0 then --If there are any local functions\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Average number of lines for local function\", utils.round(count_local_lines / count_local)}, false)\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Average number of code lines for local function\", utils.round(count_local_lines_code / count_local)}, false)\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Average number of comment lines for local function\", utils.round(count_local_lines_comment / count_local)}, false)\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Average number of blank lines for local function\", utils.round(count_local_lines_blank / count_local)}, false)\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Average number of nonempty lines for local function\", utils.round(count_local_lines_nonempty / count_local)}, false)\r\n\tend\r\n\r\n\tif (file_AST_list) then\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Maximum number of functions in module\", max_fun_in_module[1] .. \" \" .. max_fun_in_module[2]}, false)\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Minimum number of functions in module\", min_fun_in_module[1] .. \" \" .. min_fun_in_module[2]}, false)         \r\n\tend\r\n\t\t\r\n\t--Close table\r\n\tmetricsTable = metricsTable .. utils.closeTable()\r\n\r\n\treturn metricsTable\r\n\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "local funDefinitions = globalMetrics.functionDefinitions",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "local file_AST_list = globalMetrics.file_AST_list",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "count_all = #funDefinitions",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "count_global = 0",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "count_local = 0",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "count_lines = 0",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "count_lines_code = 0",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "count_lines_comment = 0",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "count_lines_blank = 0",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "count_lines_nonempty = 0",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "count_global_lines = 0",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "count_global_lines_code = 0",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "count_global_lines_comment = 0",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "count_global_lines_blank = 0",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "count_global_lines_nonempty = 0",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "count_local_lines = 0",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "count_local_lines_code = 0",
    "type": "statement:assign"
  }, {
    "id": 75,
    "text": "count_local_lines_comment = 0",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "count_local_lines_blank = 0",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "count_local_lines_nonempty = 0",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "for _, fun in pairs(funDefinitions) do --Loop through functions\r\n\r\n\t\t--Global and Local functions statistics\r\n\t\tif (fun.tag == 'GlobalFunction' or fun.tag == 'LocalFunction') then \r\n\t\t\tcount_lines         = count_lines             + fun.metrics.LOC.lines\r\n\t\t\tcount_lines_code    = count_lines_code        + fun.metrics.LOC.lines_code\r\n\t\t\tcount_lines_comment = count_lines_comment + fun.metrics.LOC.lines_comment\r\n\t\t\tcount_lines_blank = count_lines_blank     + fun.metrics.LOC.lines_blank\r\n\t\t\tcount_lines_nonempty= count_lines_nonempty    + fun.metrics.LOC.lines_nonempty\r\n\t\r\n\t\t\tif (fun.isGlobal) then --Global functions statistics\r\n\t\t\t\tcount_global = count_global + 1\r\n\t\t\t\tcount_global_lines            = count_global_lines            + fun.metrics.LOC.lines\r\n\t\t\t\tcount_global_lines_code     = count_global_lines_code     + fun.metrics.LOC.lines_code\r\n\t\t\t\tcount_global_lines_comment    = count_global_lines_comment    + fun.metrics.LOC.lines_comment\r\n\t\t\t\tcount_global_lines_blank    = count_global_lines_blank        + fun.metrics.LOC.lines_blank\r\n\t\t\t\tcount_global_lines_nonempty = count_global_lines_nonempty + fun.metrics.LOC.lines_nonempty\r\n\t\t\telse --Local functions statistics\r\n\t\t\t\tcount_local = count_local + 1\r\n\t\t\t\tcount_local_lines             = count_local_lines             + fun.metrics.LOC.lines\r\n\t\t\t\tcount_local_lines_code        = count_local_lines_code        + fun.metrics.LOC.lines_code\r\n\t\t\t\tcount_local_lines_comment     = count_local_lines_comment + fun.metrics.LOC.lines_comment\r\n\t\t\t\tcount_local_lines_blank     = count_local_lines_blank     + fun.metrics.LOC.lines_blank\r\n\t\t\t\tcount_local_lines_nonempty    = count_local_lines_nonempty    + fun.metrics.LOC.lines_nonempty\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 79,
    "text": "if (fun.tag == 'GlobalFunction' or fun.tag == 'LocalFunction') then \r\n\t\t\tcount_lines         = count_lines             + fun.metrics.LOC.lines\r\n\t\t\tcount_lines_code    = count_lines_code        + fun.metrics.LOC.lines_code\r\n\t\t\tcount_lines_comment = count_lines_comment + fun.metrics.LOC.lines_comment\r\n\t\t\tcount_lines_blank = count_lines_blank     + fun.metrics.LOC.lines_blank\r\n\t\t\tcount_lines_nonempty= count_lines_nonempty    + fun.metrics.LOC.lines_nonempty\r\n\t\r\n\t\t\tif (fun.isGlobal) then --Global functions statistics\r\n\t\t\t\tcount_global = count_global + 1\r\n\t\t\t\tcount_global_lines            = count_global_lines            + fun.metrics.LOC.lines\r\n\t\t\t\tcount_global_lines_code     = count_global_lines_code     + fun.metrics.LOC.lines_code\r\n\t\t\t\tcount_global_lines_comment    = count_global_lines_comment    + fun.metrics.LOC.lines_comment\r\n\t\t\t\tcount_global_lines_blank    = count_global_lines_blank        + fun.metrics.LOC.lines_blank\r\n\t\t\t\tcount_global_lines_nonempty = count_global_lines_nonempty + fun.metrics.LOC.lines_nonempty\r\n\t\t\telse --Local functions statistics\r\n\t\t\t\tcount_local = count_local + 1\r\n\t\t\t\tcount_local_lines             = count_local_lines             + fun.metrics.LOC.lines\r\n\t\t\t\tcount_local_lines_code        = count_local_lines_code        + fun.metrics.LOC.lines_code\r\n\t\t\t\tcount_local_lines_comment     = count_local_lines_comment + fun.metrics.LOC.lines_comment\r\n\t\t\t\tcount_local_lines_blank     = count_local_lines_blank     + fun.metrics.LOC.lines_blank\r\n\t\t\t\tcount_local_lines_nonempty    = count_local_lines_nonempty    + fun.metrics.LOC.lines_nonempty\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 80,
    "text": "count_lines         = count_lines             + fun.metrics.LOC.lines",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "count_lines_code    = count_lines_code        + fun.metrics.LOC.lines_code",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "count_lines_comment = count_lines_comment + fun.metrics.LOC.lines_comment",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "count_lines_blank = count_lines_blank     + fun.metrics.LOC.lines_blank",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "count_lines_nonempty= count_lines_nonempty    + fun.metrics.LOC.lines_nonempty",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "if (fun.isGlobal) then --Global functions statistics\r\n\t\t\t\tcount_global = count_global + 1\r\n\t\t\t\tcount_global_lines            = count_global_lines            + fun.metrics.LOC.lines\r\n\t\t\t\tcount_global_lines_code     = count_global_lines_code     + fun.metrics.LOC.lines_code\r\n\t\t\t\tcount_global_lines_comment    = count_global_lines_comment    + fun.metrics.LOC.lines_comment\r\n\t\t\t\tcount_global_lines_blank    = count_global_lines_blank        + fun.metrics.LOC.lines_blank\r\n\t\t\t\tcount_global_lines_nonempty = count_global_lines_nonempty + fun.metrics.LOC.lines_nonempty\r\n\t\t\telse --Local functions statistics\r\n\t\t\t\tcount_local = count_local + 1\r\n\t\t\t\tcount_local_lines             = count_local_lines             + fun.metrics.LOC.lines\r\n\t\t\t\tcount_local_lines_code        = count_local_lines_code        + fun.metrics.LOC.lines_code\r\n\t\t\t\tcount_local_lines_comment     = count_local_lines_comment + fun.metrics.LOC.lines_comment\r\n\t\t\t\tcount_local_lines_blank     = count_local_lines_blank     + fun.metrics.LOC.lines_blank\r\n\t\t\t\tcount_local_lines_nonempty    = count_local_lines_nonempty    + fun.metrics.LOC.lines_nonempty\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 86,
    "text": "count_global = count_global + 1",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "count_global_lines            = count_global_lines            + fun.metrics.LOC.lines",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "count_global_lines_code     = count_global_lines_code     + fun.metrics.LOC.lines_code",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "count_global_lines_comment    = count_global_lines_comment    + fun.metrics.LOC.lines_comment",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "count_global_lines_blank    = count_global_lines_blank        + fun.metrics.LOC.lines_blank",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "count_global_lines_nonempty = count_global_lines_nonempty + fun.metrics.LOC.lines_nonempty",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "count_local = count_local + 1",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "count_local_lines             = count_local_lines             + fun.metrics.LOC.lines",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "count_local_lines_code        = count_local_lines_code        + fun.metrics.LOC.lines_code",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "count_local_lines_comment     = count_local_lines_comment + fun.metrics.LOC.lines_comment",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "count_local_lines_blank     = count_local_lines_blank     + fun.metrics.LOC.lines_blank",
    "type": "statement:assign"
  }, {
    "id": 97,
    "text": "count_local_lines_nonempty    = count_local_lines_nonempty    + fun.metrics.LOC.lines_nonempty",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "if (file_AST_list) then \r\n\t\tmin_fun_in_modulem, max_fun_in_module = nil, nil\r\n\t\tfor filename, AST in pairs(file_AST_list) do\r\n\t\t\tif (max_fun_in_module == nil) then max_fun_in_module = { AST.metrics.currentModuleName or filename, #AST.metrics.functionDefinitions } end\r\n\t\t\tif (min_fun_in_module == nil) then min_fun_in_module = { AST.metrics.currentModuleName or filename, #AST.metrics.functionDefinitions } end\r\n\t\t\t\r\n\t\t\tif (max_fun_in_module[2] <    #AST.metrics.functionDefinitions ) then\r\n\t\t\t\tmax_fun_in_module = { AST.metrics.currentModuleName or filename,    #AST.metrics.functionDefinitions }\r\n\t\t\tend\r\n\t\t\tif (min_fun_in_module[2] >    #AST.metrics.functionDefinitions ) then\r\n\t\t\t\tmin_fun_in_module = { AST.metrics.currentModuleName or filename,    #AST.metrics.functionDefinitions }\r\n\t\t\tend\r\n\t\t\t\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 99,
    "text": "min_fun_in_modulem, max_fun_in_module = nil, nil",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "for filename, AST in pairs(file_AST_list) do\r\n\t\t\tif (max_fun_in_module == nil) then max_fun_in_module = { AST.metrics.currentModuleName or filename, #AST.metrics.functionDefinitions } end\r\n\t\t\tif (min_fun_in_module == nil) then min_fun_in_module = { AST.metrics.currentModuleName or filename, #AST.metrics.functionDefinitions } end\r\n\t\t\t\r\n\t\t\tif (max_fun_in_module[2] <    #AST.metrics.functionDefinitions ) then\r\n\t\t\t\tmax_fun_in_module = { AST.metrics.currentModuleName or filename,    #AST.metrics.functionDefinitions }\r\n\t\t\tend\r\n\t\t\tif (min_fun_in_module[2] >    #AST.metrics.functionDefinitions ) then\r\n\t\t\t\tmin_fun_in_module = { AST.metrics.currentModuleName or filename,    #AST.metrics.functionDefinitions }\r\n\t\t\tend\r\n\t\t\t\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 101,
    "text": "if (max_fun_in_module == nil) then max_fun_in_module = { AST.metrics.currentModuleName or filename, #AST.metrics.functionDefinitions } end",
    "type": "statement:if"
  }, {
    "id": 102,
    "text": "max_fun_in_module = { AST.metrics.currentModuleName or filename, #AST.metrics.functionDefinitions }",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "if (min_fun_in_module == nil) then min_fun_in_module = { AST.metrics.currentModuleName or filename, #AST.metrics.functionDefinitions } end",
    "type": "statement:if"
  }, {
    "id": 104,
    "text": "min_fun_in_module = { AST.metrics.currentModuleName or filename, #AST.metrics.functionDefinitions }",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "if (max_fun_in_module[2] <    #AST.metrics.functionDefinitions ) then\r\n\t\t\t\tmax_fun_in_module = { AST.metrics.currentModuleName or filename,    #AST.metrics.functionDefinitions }\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 106,
    "text": "max_fun_in_module = { AST.metrics.currentModuleName or filename,    #AST.metrics.functionDefinitions }",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "if (min_fun_in_module[2] >    #AST.metrics.functionDefinitions ) then\r\n\t\t\t\tmin_fun_in_module = { AST.metrics.currentModuleName or filename,    #AST.metrics.functionDefinitions }\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 108,
    "text": "min_fun_in_module = { AST.metrics.currentModuleName or filename,    #AST.metrics.functionDefinitions }",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "local metricsTable = utils.createTable(\"metric_index\", {\"Function metrics\", \"Value\"}, \"width: 570px;\")",
    "type": "statement:localassign"
  }, {
    "id": 110,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Number of all functions\", count_all}, false)",
    "type": "statement:assign"
  }, {
    "id": 111,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Number of all global functions\", count_global}, false)",
    "type": "statement:assign"
  }, {
    "id": 112,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Number of all local functions\", count_local}, false)",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "if (fileNum) then\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Average number of functions per file\", utils.round(count_all / fileNum)}, false)\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Average number of global function per file\", utils.round(count_global / fileNum)}, false)\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Average number of local functions per file\", utils.round(count_local / fileNum)}, false)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 114,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Average number of functions per file\", utils.round(count_all / fileNum)}, false)",
    "type": "statement:assign"
  }, {
    "id": 115,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Average number of global function per file\", utils.round(count_global / fileNum)}, false)",
    "type": "statement:assign"
  }, {
    "id": 116,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Average number of local functions per file\", utils.round(count_local / fileNum)}, false)",
    "type": "statement:assign"
  }, {
    "id": 117,
    "text": "if (count_all > 0) then --If there are any functions\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Average number of lines for function\", utils.round(count_lines / count_all)}, false)\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Average number of code lines for function\", utils.round(count_lines_code / count_all)}, false)\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Average number of comment lines for function\", utils.round(count_lines_comment / count_all)}, false)\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Average number of blank lines for function\", utils.round(count_lines_blank / count_all)}, false)\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Average number of nonempty lines for function\", utils.round(count_lines_nonempty / count_all)}, false)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 118,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Average number of lines for function\", utils.round(count_lines / count_all)}, false)",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Average number of code lines for function\", utils.round(count_lines_code / count_all)}, false)",
    "type": "statement:assign"
  }, {
    "id": 120,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Average number of comment lines for function\", utils.round(count_lines_comment / count_all)}, false)",
    "type": "statement:assign"
  }, {
    "id": 121,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Average number of blank lines for function\", utils.round(count_lines_blank / count_all)}, false)",
    "type": "statement:assign"
  }, {
    "id": 122,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Average number of nonempty lines for function\", utils.round(count_lines_nonempty / count_all)}, false)",
    "type": "statement:assign"
  }, {
    "id": 123,
    "text": "if count_global > 0 then --If there are any global functions\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Average number of lines for global function\", utils.round(count_global_lines / count_global)}, false)\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Average number of code lines for global function\", utils.round(count_global_lines_code / count_global)}, false)\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Average number of comment lines for global function\", utils.round(count_global_lines_comment / count_global)}, false)\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Average number of blank lines for global function\", utils.round(count_global_lines_blank / count_global)}, false)\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Average number of nonempty lines for global function\", utils.round(count_global_lines_nonempty / count_global)}, false)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 124,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Average number of lines for global function\", utils.round(count_global_lines / count_global)}, false)",
    "type": "statement:assign"
  }, {
    "id": 125,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Average number of code lines for global function\", utils.round(count_global_lines_code / count_global)}, false)",
    "type": "statement:assign"
  }, {
    "id": 126,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Average number of comment lines for global function\", utils.round(count_global_lines_comment / count_global)}, false)",
    "type": "statement:assign"
  }, {
    "id": 127,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Average number of blank lines for global function\", utils.round(count_global_lines_blank / count_global)}, false)",
    "type": "statement:assign"
  }, {
    "id": 128,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Average number of nonempty lines for global function\", utils.round(count_global_lines_nonempty / count_global)}, false)",
    "type": "statement:assign"
  }, {
    "id": 129,
    "text": "if count_local > 0 then --If there are any local functions\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Average number of lines for local function\", utils.round(count_local_lines / count_local)}, false)\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Average number of code lines for local function\", utils.round(count_local_lines_code / count_local)}, false)\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Average number of comment lines for local function\", utils.round(count_local_lines_comment / count_local)}, false)\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Average number of blank lines for local function\", utils.round(count_local_lines_blank / count_local)}, false)\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Average number of nonempty lines for local function\", utils.round(count_local_lines_nonempty / count_local)}, false)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 130,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Average number of lines for local function\", utils.round(count_local_lines / count_local)}, false)",
    "type": "statement:assign"
  }, {
    "id": 131,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Average number of code lines for local function\", utils.round(count_local_lines_code / count_local)}, false)",
    "type": "statement:assign"
  }, {
    "id": 132,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Average number of comment lines for local function\", utils.round(count_local_lines_comment / count_local)}, false)",
    "type": "statement:assign"
  }, {
    "id": 133,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Average number of blank lines for local function\", utils.round(count_local_lines_blank / count_local)}, false)",
    "type": "statement:assign"
  }, {
    "id": 134,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Average number of nonempty lines for local function\", utils.round(count_local_lines_nonempty / count_local)}, false)",
    "type": "statement:assign"
  }, {
    "id": 135,
    "text": "if (file_AST_list) then\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Maximum number of functions in module\", max_fun_in_module[1] .. \" \" .. max_fun_in_module[2]}, false)\r\n\t\tmetricsTable = metricsTable .. utils.addTableRow({\"Minimum number of functions in module\", min_fun_in_module[1] .. \" \" .. min_fun_in_module[2]}, false)         \r\n\tend",
    "type": "statement:if"
  }, {
    "id": 136,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Maximum number of functions in module\", max_fun_in_module[1] .. \" \" .. max_fun_in_module[2]}, false)",
    "type": "statement:assign"
  }, {
    "id": 137,
    "text": "metricsTable = metricsTable .. utils.addTableRow({\"Minimum number of functions in module\", min_fun_in_module[1] .. \" \" .. min_fun_in_module[2]}, false)",
    "type": "statement:assign"
  }, {
    "id": 138,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 139,
    "text": "local function createModuleLenGraph(globalMetrics, withLink)\r\n\t\r\n\tlocal data = \"\"\r\n\r\n\t--Create data string for JavaScript function ('key', value)\r\n\tfor _, moduleRef in pairs(globalMetrics.moduleDefinitions) do\r\n\t\tdata = data .. \"['\" .. moduleRef.moduleName .. \"', \" .. moduleRef.LOC.lines .. \"], \"\r\n\tend\r\n\r\n\treturn utils.createPieGraph(\"Module lengths\", data, withLink)\r\n\r\nend",
    "type": "function"
  }, {
    "id": 140,
    "text": "local data = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 141,
    "text": "for _, moduleRef in pairs(globalMetrics.moduleDefinitions) do\r\n\t\tdata = data .. \"['\" .. moduleRef.moduleName .. \"', \" .. moduleRef.LOC.lines .. \"], \"\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 142,
    "text": "data = data .. \"['\" .. moduleRef.moduleName .. \"', \" .. moduleRef.LOC.lines .. \"], \"",
    "type": "statement:assign"
  }, {
    "id": 143,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 144,
    "text": "local function createFileLenGraph(globalMetrics, withLink)\r\n\t\r\n\tlocal data = \"\"\r\n\r\n\t--Create data string for JavaScript function ('key', value)\r\n\tfor filename, AST in pairs(globalMetrics.file_AST_list) do\r\n\t\tdata = data .. \"['\" .. filename .. \"', \" .. AST.metrics.LOC.lines .. \"], \"\r\n\tend\r\n\r\n\treturn utils.createPieGraph(\"File lengths\", data, withLink)\r\n\r\nend",
    "type": "function"
  }, {
    "id": 145,
    "text": "for filename, AST in pairs(globalMetrics.file_AST_list) do\r\n\t\tdata = data .. \"['\" .. filename .. \"', \" .. AST.metrics.LOC.lines .. \"], \"\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 146,
    "text": "data = data .. \"['\" .. filename .. \"', \" .. AST.metrics.LOC.lines .. \"], \"",
    "type": "statement:assign"
  }, {
    "id": 147,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 148,
    "text": "local function createCouplingTable(globalMetrics)\r\n\t\r\n\t--Create title and css styles\r\n\tlocal metricsTable = \"<h2>Module dependency</h2>\" ..\r\n\t\t\"<div style='min-width: 800px; background-color: #F0F0F0; text-align: center; font-size: 16px; font-weight: bold; margin-bottom: 15px;'> Module\" .. \r\n\t\t\t\"<div style='width: 600px; float: right;'> Dependeds on module\" ..\r\n\t\t\t\t\"<div style='width: 300px; float: right;'> Function or variable - used n times\" ..\r\n\t\t\"</div> <div style='clear: right;'></div></div><div style='clear: right;'></div></div>\"\r\n\r\n\tfor filename, fileAST in pairs(globalMetrics.file_AST_list) do\r\n\r\n\t\t--Style to determine files\r\n\t\tmetricsTable = metricsTable .. \"<div style='min-width: 800px; border-bottom: 1px #F0F0F0 solid; margin-bottom: 2px;'>\"\r\n\t\t\r\n\t\tfor exec, moduleDef in pairs(fileAST.metrics.moduleDefinitions) do \r\n\t\t\t\t\t\t\r\n\t\t\tif moduleDef.moduleName then --If module exists\r\n\t\t\t\t\t\r\n\t\t\t\t--Main module on which is dependend\r\n\t\t\t\tmetricsTable = metricsTable .. moduleDef.moduleName .. \"<div style='width: 600px; float: right; '>\"\r\n\t\t\t\t\r\n\t\t\t\tlocal modules = {}\r\n\t\t\t\t\t\t\r\n\t\t\t\tfor moduleName in pairs(moduleDef.moduleCalls) do modules[moduleName] = true end\r\n\t\t\t\tfor moduleName in pairs(moduleDef.moduleReferences) do modules[moduleName] = true end\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t--Submodules of main module which is dependend\r\n\t\t\t\tfor moduleName in pairs(modules) do\r\n\t\t\t\t\r\n\t\t\t\t\tmetricsTable = metricsTable .. \"<div style='border-bottom: 1px #F0F0F0 solid;'>\" ..    moduleName ..\r\n\t\t\t\t\t\t\"<div style='width: 300px; float: right;'>\"\r\n\t\t\t\t\r\n\t\t\t\t\tfor funName, count in pairs(moduleDef.moduleCalls[moduleName] or {}) do\r\n\r\n\t\t\t\t\t\tmetricsTable = metricsTable .. \"<span style='color: #bcbcbc;'>function</span>\" .. funName ..\r\n\t\t\t\t\t\t\t\"<div style='float: right;'>\" .. count .. \"</div><br /><div style='clear: right;'></div>\"\r\n\r\n\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor varName, fullInfo in pairs(fileAST.metrics.moduleReferences[moduleName] or {}) do \r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlocal countAll = 0\r\n\t\t\t\t\t\tlocal divString = \"\"\r\n\r\n\t\t\t\t\t\t--functions in submodule on which is dependend\r\n\t\t\t\t\t\tfor fullname, count in pairs(fullInfo) do \r\n\r\n\t\t\t\t\t\t\tcountAll = countAll + count\r\n\t\t\t\t\t\t\tdivString = divString .. \"<div style='width: 245px; float:right;'>\" .. fullname ..\r\n\t\t\t\t\t\t\t\t\"<div style='float: right;'>\".. count .. \"</div></div><div style='clear: right;'></div>\"\r\n\r\n\t\t\t\t\t\tend\r\n\r\n\t\t\t\t\t\t--Variable dependency\r\n\t\t\t\t\t\tmetricsTable = metricsTable .. \"<a class='rollVariable'>[+]</a><span style='color: #bcbcbc;'>\" ..\r\n\t\t\t\t\t\t\t\"Variable</span>\" .. varName .. \"<div style='float: right;'>\" .. countAll .. \"</div>\" ..\r\n\t\t\t\t\t\t\t\"<div style='display: none;'><%=divString%></div><div style='clear: right;'></div>\"\r\n\t\r\n\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\t\tmetricsTable = metricsTable .. \"</div><div style='clear: right;'></div></div>\"\r\n\t\t\t\t\t\r\n\t\t\t\tend\r\n\t\t\t\t\t\t\r\n\t\t\t\tmetricsTable = metricsTable .. \"</div><div style='clear: right;'></div>\"\r\n\t\t\t\t\t\t\r\n\t\t\tend\r\n\t\tend\r\n\t\t\t\t\t\t\r\n\t\tmetricsTable = metricsTable .. \"</div>\"\r\n\r\n\tend\r\n\r\n\treturn metricsTable\r\n\r\nend",
    "type": "function"
  }, {
    "id": 149,
    "text": "local metricsTable = \"<h2>Module dependency</h2>\" ..\r\n\t\t\"<div style='min-width: 800px; background-color: #F0F0F0; text-align: center; font-size: 16px; font-weight: bold; margin-bottom: 15px;'> Module\" .. \r\n\t\t\t\"<div style='width: 600px; float: right;'> Dependeds on module\" ..\r\n\t\t\t\t\"<div style='width: 300px; float: right;'> Function or variable - used n times\" ..\r\n\t\t\"</div> <div style='clear: right;'></div></div><div style='clear: right;'></div></div>\"",
    "type": "statement:localassign"
  }, {
    "id": 150,
    "text": "for filename, fileAST in pairs(globalMetrics.file_AST_list) do\r\n\r\n\t\t--Style to determine files\r\n\t\tmetricsTable = metricsTable .. \"<div style='min-width: 800px; border-bottom: 1px #F0F0F0 solid; margin-bottom: 2px;'>\"\r\n\t\t\r\n\t\tfor exec, moduleDef in pairs(fileAST.metrics.moduleDefinitions) do \r\n\t\t\t\t\t\t\r\n\t\t\tif moduleDef.moduleName then --If module exists\r\n\t\t\t\t\t\r\n\t\t\t\t--Main module on which is dependend\r\n\t\t\t\tmetricsTable = metricsTable .. moduleDef.moduleName .. \"<div style='width: 600px; float: right; '>\"\r\n\t\t\t\t\r\n\t\t\t\tlocal modules = {}\r\n\t\t\t\t\t\t\r\n\t\t\t\tfor moduleName in pairs(moduleDef.moduleCalls) do modules[moduleName] = true end\r\n\t\t\t\tfor moduleName in pairs(moduleDef.moduleReferences) do modules[moduleName] = true end\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t--Submodules of main module which is dependend\r\n\t\t\t\tfor moduleName in pairs(modules) do\r\n\t\t\t\t\r\n\t\t\t\t\tmetricsTable = metricsTable .. \"<div style='border-bottom: 1px #F0F0F0 solid;'>\" ..    moduleName ..\r\n\t\t\t\t\t\t\"<div style='width: 300px; float: right;'>\"\r\n\t\t\t\t\r\n\t\t\t\t\tfor funName, count in pairs(moduleDef.moduleCalls[moduleName] or {}) do\r\n\r\n\t\t\t\t\t\tmetricsTable = metricsTable .. \"<span style='color: #bcbcbc;'>function</span>\" .. funName ..\r\n\t\t\t\t\t\t\t\"<div style='float: right;'>\" .. count .. \"</div><br /><div style='clear: right;'></div>\"\r\n\r\n\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor varName, fullInfo in pairs(fileAST.metrics.moduleReferences[moduleName] or {}) do \r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlocal countAll = 0\r\n\t\t\t\t\t\tlocal divString = \"\"\r\n\r\n\t\t\t\t\t\t--functions in submodule on which is dependend\r\n\t\t\t\t\t\tfor fullname, count in pairs(fullInfo) do \r\n\r\n\t\t\t\t\t\t\tcountAll = countAll + count\r\n\t\t\t\t\t\t\tdivString = divString .. \"<div style='width: 245px; float:right;'>\" .. fullname ..\r\n\t\t\t\t\t\t\t\t\"<div style='float: right;'>\".. count .. \"</div></div><div style='clear: right;'></div>\"\r\n\r\n\t\t\t\t\t\tend\r\n\r\n\t\t\t\t\t\t--Variable dependency\r\n\t\t\t\t\t\tmetricsTable = metricsTable .. \"<a class='rollVariable'>[+]</a><span style='color: #bcbcbc;'>\" ..\r\n\t\t\t\t\t\t\t\"Variable</span>\" .. varName .. \"<div style='float: right;'>\" .. countAll .. \"</div>\" ..\r\n\t\t\t\t\t\t\t\"<div style='display: none;'><%=divString%></div><div style='clear: right;'></div>\"\r\n\t\r\n\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\t\tmetricsTable = metricsTable .. \"</div><div style='clear: right;'></div></div>\"\r\n\t\t\t\t\t\r\n\t\t\t\tend\r\n\t\t\t\t\t\t\r\n\t\t\t\tmetricsTable = metricsTable .. \"</div><div style='clear: right;'></div>\"\r\n\t\t\t\t\t\t\r\n\t\t\tend\r\n\t\tend\r\n\t\t\t\t\t\t\r\n\t\tmetricsTable = metricsTable .. \"</div>\"\r\n\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 151,
    "text": "metricsTable = metricsTable .. \"<div style='min-width: 800px; border-bottom: 1px #F0F0F0 solid; margin-bottom: 2px;'>\"",
    "type": "statement:assign"
  }, {
    "id": 152,
    "text": "for exec, moduleDef in pairs(fileAST.metrics.moduleDefinitions) do \r\n\t\t\t\t\t\t\r\n\t\t\tif moduleDef.moduleName then --If module exists\r\n\t\t\t\t\t\r\n\t\t\t\t--Main module on which is dependend\r\n\t\t\t\tmetricsTable = metricsTable .. moduleDef.moduleName .. \"<div style='width: 600px; float: right; '>\"\r\n\t\t\t\t\r\n\t\t\t\tlocal modules = {}\r\n\t\t\t\t\t\t\r\n\t\t\t\tfor moduleName in pairs(moduleDef.moduleCalls) do modules[moduleName] = true end\r\n\t\t\t\tfor moduleName in pairs(moduleDef.moduleReferences) do modules[moduleName] = true end\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t--Submodules of main module which is dependend\r\n\t\t\t\tfor moduleName in pairs(modules) do\r\n\t\t\t\t\r\n\t\t\t\t\tmetricsTable = metricsTable .. \"<div style='border-bottom: 1px #F0F0F0 solid;'>\" ..    moduleName ..\r\n\t\t\t\t\t\t\"<div style='width: 300px; float: right;'>\"\r\n\t\t\t\t\r\n\t\t\t\t\tfor funName, count in pairs(moduleDef.moduleCalls[moduleName] or {}) do\r\n\r\n\t\t\t\t\t\tmetricsTable = metricsTable .. \"<span style='color: #bcbcbc;'>function</span>\" .. funName ..\r\n\t\t\t\t\t\t\t\"<div style='float: right;'>\" .. count .. \"</div><br /><div style='clear: right;'></div>\"\r\n\r\n\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor varName, fullInfo in pairs(fileAST.metrics.moduleReferences[moduleName] or {}) do \r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlocal countAll = 0\r\n\t\t\t\t\t\tlocal divString = \"\"\r\n\r\n\t\t\t\t\t\t--functions in submodule on which is dependend\r\n\t\t\t\t\t\tfor fullname, count in pairs(fullInfo) do \r\n\r\n\t\t\t\t\t\t\tcountAll = countAll + count\r\n\t\t\t\t\t\t\tdivString = divString .. \"<div style='width: 245px; float:right;'>\" .. fullname ..\r\n\t\t\t\t\t\t\t\t\"<div style='float: right;'>\".. count .. \"</div></div><div style='clear: right;'></div>\"\r\n\r\n\t\t\t\t\t\tend\r\n\r\n\t\t\t\t\t\t--Variable dependency\r\n\t\t\t\t\t\tmetricsTable = metricsTable .. \"<a class='rollVariable'>[+]</a><span style='color: #bcbcbc;'>\" ..\r\n\t\t\t\t\t\t\t\"Variable</span>\" .. varName .. \"<div style='float: right;'>\" .. countAll .. \"</div>\" ..\r\n\t\t\t\t\t\t\t\"<div style='display: none;'><%=divString%></div><div style='clear: right;'></div>\"\r\n\t\r\n\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\t\tmetricsTable = metricsTable .. \"</div><div style='clear: right;'></div></div>\"\r\n\t\t\t\t\t\r\n\t\t\t\tend\r\n\t\t\t\t\t\t\r\n\t\t\t\tmetricsTable = metricsTable .. \"</div><div style='clear: right;'></div>\"\r\n\t\t\t\t\t\t\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 153,
    "text": "if moduleDef.moduleName then --If module exists\r\n\t\t\t\t\t\r\n\t\t\t\t--Main module on which is dependend\r\n\t\t\t\tmetricsTable = metricsTable .. moduleDef.moduleName .. \"<div style='width: 600px; float: right; '>\"\r\n\t\t\t\t\r\n\t\t\t\tlocal modules = {}\r\n\t\t\t\t\t\t\r\n\t\t\t\tfor moduleName in pairs(moduleDef.moduleCalls) do modules[moduleName] = true end\r\n\t\t\t\tfor moduleName in pairs(moduleDef.moduleReferences) do modules[moduleName] = true end\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t--Submodules of main module which is dependend\r\n\t\t\t\tfor moduleName in pairs(modules) do\r\n\t\t\t\t\r\n\t\t\t\t\tmetricsTable = metricsTable .. \"<div style='border-bottom: 1px #F0F0F0 solid;'>\" ..    moduleName ..\r\n\t\t\t\t\t\t\"<div style='width: 300px; float: right;'>\"\r\n\t\t\t\t\r\n\t\t\t\t\tfor funName, count in pairs(moduleDef.moduleCalls[moduleName] or {}) do\r\n\r\n\t\t\t\t\t\tmetricsTable = metricsTable .. \"<span style='color: #bcbcbc;'>function</span>\" .. funName ..\r\n\t\t\t\t\t\t\t\"<div style='float: right;'>\" .. count .. \"</div><br /><div style='clear: right;'></div>\"\r\n\r\n\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor varName, fullInfo in pairs(fileAST.metrics.moduleReferences[moduleName] or {}) do \r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlocal countAll = 0\r\n\t\t\t\t\t\tlocal divString = \"\"\r\n\r\n\t\t\t\t\t\t--functions in submodule on which is dependend\r\n\t\t\t\t\t\tfor fullname, count in pairs(fullInfo) do \r\n\r\n\t\t\t\t\t\t\tcountAll = countAll + count\r\n\t\t\t\t\t\t\tdivString = divString .. \"<div style='width: 245px; float:right;'>\" .. fullname ..\r\n\t\t\t\t\t\t\t\t\"<div style='float: right;'>\".. count .. \"</div></div><div style='clear: right;'></div>\"\r\n\r\n\t\t\t\t\t\tend\r\n\r\n\t\t\t\t\t\t--Variable dependency\r\n\t\t\t\t\t\tmetricsTable = metricsTable .. \"<a class='rollVariable'>[+]</a><span style='color: #bcbcbc;'>\" ..\r\n\t\t\t\t\t\t\t\"Variable</span>\" .. varName .. \"<div style='float: right;'>\" .. countAll .. \"</div>\" ..\r\n\t\t\t\t\t\t\t\"<div style='display: none;'><%=divString%></div><div style='clear: right;'></div>\"\r\n\t\r\n\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\t\tmetricsTable = metricsTable .. \"</div><div style='clear: right;'></div></div>\"\r\n\t\t\t\t\t\r\n\t\t\t\tend\r\n\t\t\t\t\t\t\r\n\t\t\t\tmetricsTable = metricsTable .. \"</div><div style='clear: right;'></div>\"\r\n\t\t\t\t\t\t\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 154,
    "text": "metricsTable = metricsTable .. moduleDef.moduleName .. \"<div style='width: 600px; float: right; '>\"",
    "type": "statement:assign"
  }, {
    "id": 155,
    "text": "local modules = {}",
    "type": "statement:localassign"
  }, {
    "id": 156,
    "text": "for moduleName in pairs(moduleDef.moduleCalls) do modules[moduleName] = true end",
    "type": "statement:genericfor"
  }, {
    "id": 157,
    "text": "modules[moduleName] = true",
    "type": "statement:assign"
  }, {
    "id": 158,
    "text": "for moduleName in pairs(moduleDef.moduleReferences) do modules[moduleName] = true end",
    "type": "statement:genericfor"
  }, {
    "id": 159,
    "text": "for moduleName in pairs(modules) do\r\n\t\t\t\t\r\n\t\t\t\t\tmetricsTable = metricsTable .. \"<div style='border-bottom: 1px #F0F0F0 solid;'>\" ..    moduleName ..\r\n\t\t\t\t\t\t\"<div style='width: 300px; float: right;'>\"\r\n\t\t\t\t\r\n\t\t\t\t\tfor funName, count in pairs(moduleDef.moduleCalls[moduleName] or {}) do\r\n\r\n\t\t\t\t\t\tmetricsTable = metricsTable .. \"<span style='color: #bcbcbc;'>function</span>\" .. funName ..\r\n\t\t\t\t\t\t\t\"<div style='float: right;'>\" .. count .. \"</div><br /><div style='clear: right;'></div>\"\r\n\r\n\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor varName, fullInfo in pairs(fileAST.metrics.moduleReferences[moduleName] or {}) do \r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlocal countAll = 0\r\n\t\t\t\t\t\tlocal divString = \"\"\r\n\r\n\t\t\t\t\t\t--functions in submodule on which is dependend\r\n\t\t\t\t\t\tfor fullname, count in pairs(fullInfo) do \r\n\r\n\t\t\t\t\t\t\tcountAll = countAll + count\r\n\t\t\t\t\t\t\tdivString = divString .. \"<div style='width: 245px; float:right;'>\" .. fullname ..\r\n\t\t\t\t\t\t\t\t\"<div style='float: right;'>\".. count .. \"</div></div><div style='clear: right;'></div>\"\r\n\r\n\t\t\t\t\t\tend\r\n\r\n\t\t\t\t\t\t--Variable dependency\r\n\t\t\t\t\t\tmetricsTable = metricsTable .. \"<a class='rollVariable'>[+]</a><span style='color: #bcbcbc;'>\" ..\r\n\t\t\t\t\t\t\t\"Variable</span>\" .. varName .. \"<div style='float: right;'>\" .. countAll .. \"</div>\" ..\r\n\t\t\t\t\t\t\t\"<div style='display: none;'><%=divString%></div><div style='clear: right;'></div>\"\r\n\t\r\n\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\t\tmetricsTable = metricsTable .. \"</div><div style='clear: right;'></div></div>\"\r\n\t\t\t\t\t\r\n\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 160,
    "text": "metricsTable = metricsTable .. \"<div style='border-bottom: 1px #F0F0F0 solid;'>\" ..    moduleName ..\r\n\t\t\t\t\t\t\"<div style='width: 300px; float: right;'>\"",
    "type": "statement:assign"
  }, {
    "id": 161,
    "text": "for funName, count in pairs(moduleDef.moduleCalls[moduleName] or {}) do\r\n\r\n\t\t\t\t\t\tmetricsTable = metricsTable .. \"<span style='color: #bcbcbc;'>function</span>\" .. funName ..\r\n\t\t\t\t\t\t\t\"<div style='float: right;'>\" .. count .. \"</div><br /><div style='clear: right;'></div>\"\r\n\r\n\t\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 162,
    "text": "metricsTable = metricsTable .. \"<span style='color: #bcbcbc;'>function</span>\" .. funName ..\r\n\t\t\t\t\t\t\t\"<div style='float: right;'>\" .. count .. \"</div><br /><div style='clear: right;'></div>\"",
    "type": "statement:assign"
  }, {
    "id": 163,
    "text": "for varName, fullInfo in pairs(fileAST.metrics.moduleReferences[moduleName] or {}) do \r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlocal countAll = 0\r\n\t\t\t\t\t\tlocal divString = \"\"\r\n\r\n\t\t\t\t\t\t--functions in submodule on which is dependend\r\n\t\t\t\t\t\tfor fullname, count in pairs(fullInfo) do \r\n\r\n\t\t\t\t\t\t\tcountAll = countAll + count\r\n\t\t\t\t\t\t\tdivString = divString .. \"<div style='width: 245px; float:right;'>\" .. fullname ..\r\n\t\t\t\t\t\t\t\t\"<div style='float: right;'>\".. count .. \"</div></div><div style='clear: right;'></div>\"\r\n\r\n\t\t\t\t\t\tend\r\n\r\n\t\t\t\t\t\t--Variable dependency\r\n\t\t\t\t\t\tmetricsTable = metricsTable .. \"<a class='rollVariable'>[+]</a><span style='color: #bcbcbc;'>\" ..\r\n\t\t\t\t\t\t\t\"Variable</span>\" .. varName .. \"<div style='float: right;'>\" .. countAll .. \"</div>\" ..\r\n\t\t\t\t\t\t\t\"<div style='display: none;'><%=divString%></div><div style='clear: right;'></div>\"\r\n\t\r\n\t\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 164,
    "text": "local countAll = 0",
    "type": "statement:localassign"
  }, {
    "id": 165,
    "text": "local divString = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 166,
    "text": "for fullname, count in pairs(fullInfo) do \r\n\r\n\t\t\t\t\t\t\tcountAll = countAll + count\r\n\t\t\t\t\t\t\tdivString = divString .. \"<div style='width: 245px; float:right;'>\" .. fullname ..\r\n\t\t\t\t\t\t\t\t\"<div style='float: right;'>\".. count .. \"</div></div><div style='clear: right;'></div>\"\r\n\r\n\t\t\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 167,
    "text": "countAll = countAll + count",
    "type": "statement:assign"
  }, {
    "id": 168,
    "text": "divString = divString .. \"<div style='width: 245px; float:right;'>\" .. fullname ..\r\n\t\t\t\t\t\t\t\t\"<div style='float: right;'>\".. count .. \"</div></div><div style='clear: right;'></div>\"",
    "type": "statement:assign"
  }, {
    "id": 169,
    "text": "metricsTable = metricsTable .. \"<a class='rollVariable'>[+]</a><span style='color: #bcbcbc;'>\" ..\r\n\t\t\t\t\t\t\t\"Variable</span>\" .. varName .. \"<div style='float: right;'>\" .. countAll .. \"</div>\" ..\r\n\t\t\t\t\t\t\t\"<div style='display: none;'><%=divString%></div><div style='clear: right;'></div>\"",
    "type": "statement:assign"
  }, {
    "id": 170,
    "text": "metricsTable = metricsTable .. \"</div><div style='clear: right;'></div></div>\"",
    "type": "statement:assign"
  }, {
    "id": 171,
    "text": "metricsTable = metricsTable .. \"</div><div style='clear: right;'></div>\"",
    "type": "statement:assign"
  }, {
    "id": 172,
    "text": "metricsTable = metricsTable .. \"</div>\"",
    "type": "statement:assign"
  }, {
    "id": 173,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 174,
    "text": "",
    "type": "function container"
  }, {
    "id": 175,
    "text": "local function round(num)\r\n\t\r\n\treturn math.floor(num * 100 + 0.5) / 100\r\n\t\r\nend",
    "type": "function"
  }, {
    "id": 176,
    "text": "local function createTable(tableClass, collumnNames, style)\r\n\t\r\n\tlocal result = addTableCSS(tableClass) --Add CSS styles from file to template\r\n\tlocal style = style or \"\"\r\n\r\n\t--Create HTML table starting tag with table row starting tag\r\n\tresult = result .. \"<table class='\" .. tableClass .. \"' style='\" .. style .. \"'><tr>\"\r\n\r\n\tfor i = 1, #collumnNames do --Add each collumn to template\r\n\t\tresult = result .. \"<th>\" .. collumnNames[i] .. \"</th>\"\r\n\tend\r\n\r\n\tresult = result .. \"</tr>\" --Close table row tag\r\n\r\n\treturn result\r\n\r\nend",
    "type": "function"
  }, {
    "id": 177,
    "text": "local function closeTable()\r\n\treturn \"</table>\"\r\nend",
    "type": "function"
  }, {
    "id": 178,
    "text": "local function addTableRow(collumns, withLink, color)\r\n\r\n\tlocal result = \"<tr>\" --Starting HTML tag of the row\r\n\tlocal start = 1\r\n\tlocal bg = color or \"WHITE\" --Default color of data collumns\r\n\r\n\tif(withLink) then --If link to the file will be provided in first collumn\r\n\t\tresult = result .. \"<td class='file'>\" .. \r\n\t\t\t\"<img src='../fileIcon.jpg' title='\" .. collumns[1] .. \"' />\" ..\r\n\t\t\t\"</td>\"\r\n\t\tstart = 2\r\n\tend\r\n\r\n\tresult = result .. \"<td class='name' nowrap>\" .. collumns[start] .. \"</td>\" --Name of the data in the row\r\n\r\n\tfor i = start + 1, #collumns do --For each data entry create new collumn in table, with background set\r\n\t\tresult = result .. \"<td class='value' bgcolor='\" .. bg .. \"'><center>\" .. collumns[i] .. \"</center></td>\" \r\n\tend\r\n\r\n\tresult = result .. \"</tr>\" --Close HTML tag of the row\r\n\r\n\treturn result\r\n\r\nend",
    "type": "function"
  }, {
    "id": 179,
    "text": "local function createPieGraph(title, data, withScript)\r\n \r\n\tlocal result = \"\"\r\n\tlocal div = \"pie_graph_\" .. math.random(2, 955)\t--Random graph ID to prevent errors when more graphs will be on one site\r\n\r\n\t--Create box where graph will be rendered\r\n\tresult = result .. \"<div style='margin: 20px;' id='\" .. div .. \"'></div><script>\"\r\n\r\n\tif(withScript or withScript == nil) then --Include JavaScript script from file\r\n\t\tresult = result .. getGraph()\r\n\tend\r\n\r\n\t--Create graph object in JavaScript with specified data and closing HTML script tag\r\n\tresult = result .. \"Highcharts.chart('\" .. div .. \"', {\" ..\r\n        \"chart: { plotBackgroundColor: null, plotBorderWidth: null, plotShadow: false, type: 'pie' },\" ..\r\n        \"title: { text: '\" .. title .. \"' },\" ..\r\n        \"tooltip: { formatter: function() { return '<b>' + this.point.name + '</b>: ' + this.y + ' lines'; } },\" ..\r\n        \"plotOptions: { pie: { allowPointSelect: true, cursor: 'pointer',\" ..\r\n            \"dataLabels: { enabled: true }, showInLegend: true } },\" ..\r\n        \"series: [{ type: 'pie', name: 'Lines', colorByPoint: true,\" ..\r\n\t\t\t\"data: [\" .. data .. \"]}]});</script>\"\r\n\r\n\treturn result\r\n\r\nend",
    "type": "function"
  }, {
    "id": 180,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 181,
    "text": "require",
    "type": "global function"
  }, {
    "id": 182,
    "text": "",
    "type": "variable container"
  }, {
    "id": 183,
    "text": "",
    "type": "require container"
  }, {
    "id": 184,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 185,
    "text": "",
    "type": "interface container"
  }, {
    "id": 186,
    "text": "",
    "type": "interface"
  }, {
    "id": 187,
    "text": "",
    "type": "interface"
  }, {
    "id": 188,
    "text": "",
    "type": "interface"
  }, {
    "id": 189,
    "text": "",
    "type": "interface"
  }, {
    "id": 190,
    "text": "",
    "type": "interface"
  }, {
    "id": 191,
    "text": "",
    "type": "interface"
  }, {
    "id": 192,
    "text": "",
    "type": "interface"
  }, {
    "id": 193,
    "text": "",
    "type": "interface"
  }, {
    "id": 194,
    "text": "",
    "type": "require local variable"
  } ]
}