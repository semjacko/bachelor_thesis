{
  "_filename": "block.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luametrics/src/metrics/captures/block.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 6,
    "label": "has",
    "to": 13
  }, {
    "from": 6,
    "label": "has",
    "to": 14
  }, {
    "from": 3,
    "label": "has",
    "to": 15
  }, {
    "from": 3,
    "label": "has",
    "to": 16
  }, {
    "from": 3,
    "label": "has",
    "to": 17
  }, {
    "from": 3,
    "label": "has",
    "to": 18
  }, {
    "from": 3,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 3,
    "label": "has",
    "to": 21
  }, {
    "from": 3,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 3,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 3,
    "label": "has",
    "to": 35
  }, {
    "from": 3,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 38,
    "label": "has",
    "to": 42
  }, {
    "from": 38,
    "label": "has",
    "to": 43
  }, {
    "from": 38,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 38,
    "label": "has",
    "to": 47
  }, {
    "from": 38,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 38,
    "label": "has",
    "to": 46
  }, {
    "from": 38,
    "label": "has",
    "to": 50
  }, {
    "from": 38,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 46
  }, {
    "from": 38,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 53,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 53,
    "label": "has",
    "to": 60
  }, {
    "from": 53,
    "label": "has",
    "to": 61
  }, {
    "from": 53,
    "label": "has",
    "to": 62
  }, {
    "from": 53,
    "label": "has",
    "to": 63
  }, {
    "from": 3,
    "label": "has",
    "to": 64
  }, {
    "from": 3,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 66,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 71,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 75
  }, {
    "from": 71,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 78,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 78,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 78,
    "label": "has",
    "to": 85
  }, {
    "from": 78,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 86,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 86,
    "label": "has",
    "to": 91
  }, {
    "from": 78,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 88
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 90
  }, {
    "from": 92,
    "label": "has",
    "to": 95
  }, {
    "from": 78,
    "label": "has",
    "to": 96
  }, {
    "from": 78,
    "label": "has",
    "to": 97
  }, {
    "from": 71,
    "label": "has",
    "to": 98
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 99,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 99,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 99,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 99,
    "label": "has",
    "to": 108
  }, {
    "from": 99,
    "label": "has",
    "to": 109
  }, {
    "from": 99,
    "label": "has",
    "to": 110
  }, {
    "from": 99,
    "label": "has",
    "to": 111
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 111,
    "label": "has",
    "to": 114
  }, {
    "from": 111,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 115,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 115,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 115,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 115,
    "label": "has",
    "to": 124
  }, {
    "from": 115,
    "label": "has",
    "to": 125
  }, {
    "from": 115,
    "label": "has",
    "to": 126
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 115,
    "label": "has",
    "to": 128
  }, {
    "from": 99,
    "label": "has",
    "to": 129
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 131,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 133,
    "label": "has",
    "to": 135
  }, {
    "from": 130,
    "label": "has",
    "to": 16
  }, {
    "from": 130,
    "label": "has",
    "to": 16
  }, {
    "from": 130,
    "label": "has",
    "to": 16
  }, {
    "from": 130,
    "label": "has",
    "to": 16
  }, {
    "from": 130,
    "label": "has",
    "to": 136
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 138,
    "label": "has",
    "to": 140
  }, {
    "from": 138,
    "label": "has",
    "to": 141
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 141,
    "label": "has",
    "to": 143
  }, {
    "from": 138,
    "label": "has",
    "to": 144
  }, {
    "from": 138,
    "label": "has",
    "to": 145
  }, {
    "from": 137,
    "label": "has",
    "to": 146
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 137,
    "label": "has",
    "to": 148
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 149,
    "label": "has",
    "to": 151
  }, {
    "from": 149,
    "label": "has",
    "to": 152
  }, {
    "from": 149,
    "label": "has",
    "to": 153
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 149,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 155,
    "label": "has",
    "to": 157
  }, {
    "from": 155,
    "label": "has",
    "to": 158
  }, {
    "from": 158,
    "label": "has",
    "to": 159
  }, {
    "from": 155,
    "label": "has",
    "to": 160
  }, {
    "from": 155,
    "label": "has",
    "to": 161
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 155,
    "label": "has",
    "to": 163
  }, {
    "from": 155,
    "label": "has",
    "to": 164
  }, {
    "from": 164,
    "label": "has",
    "to": 165
  }, {
    "from": 164,
    "label": "has",
    "to": 166
  }, {
    "from": 166,
    "label": "has",
    "to": 167
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 167,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 169,
    "label": "has",
    "to": 171
  }, {
    "from": 169,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 169,
    "label": "has",
    "to": 174
  }, {
    "from": 169,
    "label": "has",
    "to": 175
  }, {
    "from": 169,
    "label": "has",
    "to": 176
  }, {
    "from": 169,
    "label": "has",
    "to": 177
  }, {
    "from": 169,
    "label": "has",
    "to": 178
  }, {
    "from": 155,
    "label": "has",
    "to": 179
  }, {
    "from": 155,
    "label": "has",
    "to": 180
  }, {
    "from": 149,
    "label": "has",
    "to": 16
  }, {
    "from": 149,
    "label": "has",
    "to": 181
  }, {
    "from": 182,
    "label": "has",
    "to": 183
  }, {
    "from": 182,
    "label": "has",
    "to": 184
  }, {
    "from": 182,
    "label": "has",
    "to": 185
  }, {
    "from": 182,
    "label": "has",
    "to": 186
  }, {
    "from": 186,
    "label": "has",
    "to": 187
  }, {
    "from": 186,
    "label": "has",
    "to": 188
  }, {
    "from": 188,
    "label": "has",
    "to": 189
  }, {
    "from": 188,
    "label": "has",
    "to": 190
  }, {
    "from": 186,
    "label": "has",
    "to": 191
  }, {
    "from": 186,
    "label": "has",
    "to": 192
  }, {
    "from": 192,
    "label": "has",
    "to": 193
  }, {
    "from": 193,
    "label": "has",
    "to": 194
  }, {
    "from": 193,
    "label": "has",
    "to": 195
  }, {
    "from": 193,
    "label": "has",
    "to": 196
  }, {
    "from": 192,
    "label": "has",
    "to": 197
  }, {
    "from": 192,
    "label": "has",
    "to": 198
  }, {
    "from": 192,
    "label": "has",
    "to": 199
  }, {
    "from": 199,
    "label": "has",
    "to": 200
  }, {
    "from": 192,
    "label": "has",
    "to": 201
  }, {
    "from": 186,
    "label": "has",
    "to": 202
  }, {
    "from": 182,
    "label": "has",
    "to": 203
  }, {
    "from": 203,
    "label": "has",
    "to": 204
  }, {
    "from": 203,
    "label": "has",
    "to": 205
  }, {
    "from": 203,
    "label": "has",
    "to": 206
  }, {
    "from": 206,
    "label": "has",
    "to": 207
  }, {
    "from": 203,
    "label": "has",
    "to": 208
  }, {
    "from": 203,
    "label": "has",
    "to": 209
  }, {
    "from": 203,
    "label": "has",
    "to": 210
  }, {
    "from": 210,
    "label": "has",
    "to": 211
  }, {
    "from": 210,
    "label": "has",
    "to": 212
  }, {
    "from": 212,
    "label": "has",
    "to": 213
  }, {
    "from": 212,
    "label": "has",
    "to": 214
  }, {
    "from": 212,
    "label": "has",
    "to": 215
  }, {
    "from": 212,
    "label": "has",
    "to": 216
  }, {
    "from": 212,
    "label": "has",
    "to": 217
  }, {
    "from": 210,
    "label": "has",
    "to": 218
  }, {
    "from": 210,
    "label": "has",
    "to": 219
  }, {
    "from": 219,
    "label": "has",
    "to": 220
  }, {
    "from": 219,
    "label": "has",
    "to": 221
  }, {
    "from": 219,
    "label": "has",
    "to": 222
  }, {
    "from": 222,
    "label": "has",
    "to": 223
  }, {
    "from": 223,
    "label": "has",
    "to": 224
  }, {
    "from": 210,
    "label": "has",
    "to": 218
  }, {
    "from": 203,
    "label": "has",
    "to": 218
  }, {
    "from": 182,
    "label": "has",
    "to": 225
  }, {
    "from": 226,
    "label": "has",
    "to": 150
  }, {
    "from": 226,
    "label": "has",
    "to": 227
  }, {
    "from": 226,
    "label": "has",
    "to": 228
  }, {
    "from": 226,
    "label": "has",
    "to": 229
  }, {
    "from": 226,
    "label": "has",
    "to": 230
  }, {
    "from": 230,
    "label": "has",
    "to": 231
  }, {
    "from": 231,
    "label": "has",
    "to": 232
  }, {
    "from": 231,
    "label": "has",
    "to": 233
  }, {
    "from": 231,
    "label": "has",
    "to": 233
  }, {
    "from": 231,
    "label": "has",
    "to": 234
  }, {
    "from": 231,
    "label": "has",
    "to": 235
  }, {
    "from": 231,
    "label": "has",
    "to": 236
  }, {
    "from": 226,
    "label": "has",
    "to": 16
  }, {
    "from": 226,
    "label": "has",
    "to": 237
  }, {
    "from": 238,
    "label": "has",
    "to": 239
  }, {
    "from": 238,
    "label": "has",
    "to": 240
  }, {
    "from": 238,
    "label": "has",
    "to": 241
  }, {
    "from": 238,
    "label": "has",
    "to": 242
  }, {
    "from": 242,
    "label": "has",
    "to": 243
  }, {
    "from": 243,
    "label": "has",
    "to": 244
  }, {
    "from": 243,
    "label": "has",
    "to": 245
  }, {
    "from": 245,
    "label": "has",
    "to": 246
  }, {
    "from": 245,
    "label": "has",
    "to": 247
  }, {
    "from": 247,
    "label": "has",
    "to": 248
  }, {
    "from": 247,
    "label": "has",
    "to": 249
  }, {
    "from": 247,
    "label": "has",
    "to": 250
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 251,
    "label": "has",
    "to": 252
  }, {
    "from": 250,
    "label": "has",
    "to": 253
  }, {
    "from": 253,
    "label": "has",
    "to": 254
  }, {
    "from": 245,
    "label": "has",
    "to": 255
  }, {
    "from": 245,
    "label": "has",
    "to": 256
  }, {
    "from": 256,
    "label": "has",
    "to": 257
  }, {
    "from": 256,
    "label": "has",
    "to": 258
  }, {
    "from": 256,
    "label": "has",
    "to": 259
  }, {
    "from": 256,
    "label": "has",
    "to": 260
  }, {
    "from": 256,
    "label": "has",
    "to": 261
  }, {
    "from": 245,
    "label": "has",
    "to": 262
  }, {
    "from": 245,
    "label": "has",
    "to": 263
  }, {
    "from": 263,
    "label": "has",
    "to": 168
  }, {
    "from": 263,
    "label": "has",
    "to": 264
  }, {
    "from": 264,
    "label": "has",
    "to": 170
  }, {
    "from": 264,
    "label": "has",
    "to": 171
  }, {
    "from": 264,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 264,
    "label": "has",
    "to": 174
  }, {
    "from": 264,
    "label": "has",
    "to": 265
  }, {
    "from": 265,
    "label": "has",
    "to": 266
  }, {
    "from": 265,
    "label": "has",
    "to": 267
  }, {
    "from": 265,
    "label": "has",
    "to": 268
  }, {
    "from": 265,
    "label": "has",
    "to": 269
  }, {
    "from": 243,
    "label": "has",
    "to": 270
  }, {
    "from": 270,
    "label": "has",
    "to": 271
  }, {
    "from": 243,
    "label": "has",
    "to": 272
  }, {
    "from": 243,
    "label": "has",
    "to": 273
  }, {
    "from": 273,
    "label": "has",
    "to": 274
  }, {
    "from": 243,
    "label": "has",
    "to": 275
  }, {
    "from": 275,
    "label": "has",
    "to": 276
  }, {
    "from": 275,
    "label": "has",
    "to": 277
  }, {
    "from": 242,
    "label": "has",
    "to": 278
  }, {
    "from": 278,
    "label": "has",
    "to": 279
  }, {
    "from": 238,
    "label": "has",
    "to": 16
  }, {
    "from": 238,
    "label": "has",
    "to": 280
  }, {
    "from": 281,
    "label": "has",
    "to": 282
  }, {
    "from": 282,
    "label": "has",
    "to": 283
  }, {
    "from": 283,
    "label": "has",
    "to": 284
  }, {
    "from": 282,
    "label": "has",
    "to": 285
  }, {
    "from": 285,
    "label": "has",
    "to": 286
  }, {
    "from": 281,
    "label": "has",
    "to": 287
  }, {
    "from": 281,
    "label": "has",
    "to": 288
  }, {
    "from": 289,
    "label": "has",
    "to": 290
  }, {
    "from": 289,
    "label": "has",
    "to": 16
  }, {
    "from": 289,
    "label": "has",
    "to": 291
  }, {
    "from": 291,
    "label": "has",
    "to": 292
  }, {
    "from": 291,
    "label": "has",
    "to": 293
  }, {
    "from": 291,
    "label": "has",
    "to": 294
  }, {
    "from": 294,
    "label": "has",
    "to": 295
  }, {
    "from": 295,
    "label": "has",
    "to": 296
  }, {
    "from": 294,
    "label": "has",
    "to": 297
  }, {
    "from": 291,
    "label": "has",
    "to": 298
  }, {
    "from": 298,
    "label": "has",
    "to": 299
  }, {
    "from": 299,
    "label": "has",
    "to": 300
  }, {
    "from": 298,
    "label": "has",
    "to": 301
  }, {
    "from": 291,
    "label": "has",
    "to": 287
  }, {
    "from": 291,
    "label": "has",
    "to": 302
  }, {
    "from": 302,
    "label": "has",
    "to": 303
  }, {
    "from": 302,
    "label": "has",
    "to": 293
  }, {
    "from": 302,
    "label": "has",
    "to": 304
  }, {
    "from": 304,
    "label": "has",
    "to": 295
  }, {
    "from": 295,
    "label": "has",
    "to": 296
  }, {
    "from": 304,
    "label": "has",
    "to": 297
  }, {
    "from": 302,
    "label": "has",
    "to": 305
  }, {
    "from": 305,
    "label": "has",
    "to": 299
  }, {
    "from": 299,
    "label": "has",
    "to": 300
  }, {
    "from": 305,
    "label": "has",
    "to": 301
  }, {
    "from": 302,
    "label": "has",
    "to": 306
  }, {
    "from": 289,
    "label": "has",
    "to": 307
  }, {
    "from": 308,
    "label": "has",
    "to": 309
  }, {
    "from": 308,
    "label": "has",
    "to": 310
  }, {
    "from": 310,
    "label": "has",
    "to": 311
  }, {
    "from": 310,
    "label": "has",
    "to": 312
  }, {
    "from": 312,
    "label": "has",
    "to": 313
  }, {
    "from": 312,
    "label": "has",
    "to": 314
  }, {
    "from": 308,
    "label": "has",
    "to": 16
  }, {
    "from": 308,
    "label": "has",
    "to": 315
  }, {
    "from": 316,
    "label": "has",
    "to": 317
  }, {
    "from": 316,
    "label": "has",
    "to": 318
  }, {
    "from": 318,
    "label": "has",
    "to": 227
  }, {
    "from": 318,
    "label": "has",
    "to": 319
  }, {
    "from": 318,
    "label": "has",
    "to": 320
  }, {
    "from": 320,
    "label": "has",
    "to": 321
  }, {
    "from": 321,
    "label": "has",
    "to": 322
  }, {
    "from": 321,
    "label": "has",
    "to": 323
  }, {
    "from": 318,
    "label": "has",
    "to": 324
  }, {
    "from": 324,
    "label": "has",
    "to": 325
  }, {
    "from": 325,
    "label": "has",
    "to": 326
  }, {
    "from": 324,
    "label": "has",
    "to": 327
  }, {
    "from": 316,
    "label": "has",
    "to": 328
  }, {
    "from": 316,
    "label": "has",
    "to": 329
  }, {
    "from": 329,
    "label": "has",
    "to": 330
  }, {
    "from": 330,
    "label": "has",
    "to": 331
  }, {
    "from": 330,
    "label": "has",
    "to": 332
  }, {
    "from": 330,
    "label": "has",
    "to": 333
  }, {
    "from": 330,
    "label": "has",
    "to": 334
  }, {
    "from": 334,
    "label": "has",
    "to": 335
  }, {
    "from": 330,
    "label": "has",
    "to": 336
  }, {
    "from": 336,
    "label": "has",
    "to": 337
  }, {
    "from": 330,
    "label": "has",
    "to": 338
  }, {
    "from": 338,
    "label": "has",
    "to": 339
  }, {
    "from": 338,
    "label": "has",
    "to": 340
  }, {
    "from": 316,
    "label": "has",
    "to": 16
  }, {
    "from": 316,
    "label": "has",
    "to": 341
  }, {
    "from": 342,
    "label": "has",
    "to": 343
  }, {
    "from": 342,
    "label": "has",
    "to": 16
  }, {
    "from": 342,
    "label": "has",
    "to": 344
  }, {
    "from": 345,
    "label": "has",
    "to": 346
  }, {
    "from": 345,
    "label": "has",
    "to": 16
  }, {
    "from": 345,
    "label": "has",
    "to": 343
  }, {
    "from": 345,
    "label": "has",
    "to": 16
  }, {
    "from": 345,
    "label": "has",
    "to": 347
  }, {
    "from": 348,
    "label": "has",
    "to": 349
  }, {
    "from": 349,
    "label": "has",
    "to": 350
  }, {
    "from": 350,
    "label": "has",
    "to": 309
  }, {
    "from": 350,
    "label": "has",
    "to": 351
  }, {
    "from": 351,
    "label": "has",
    "to": 352
  }, {
    "from": 350,
    "label": "has",
    "to": 353
  }, {
    "from": 353,
    "label": "has",
    "to": 354
  }, {
    "from": 350,
    "label": "has",
    "to": 309
  }, {
    "from": 350,
    "label": "has",
    "to": 355
  }, {
    "from": 355,
    "label": "has",
    "to": 356
  }, {
    "from": 349,
    "label": "has",
    "to": 357
  }, {
    "from": 357,
    "label": "has",
    "to": 358
  }, {
    "from": 358,
    "label": "has",
    "to": 147
  }, {
    "from": 348,
    "label": "has",
    "to": 359
  }, {
    "from": 359,
    "label": "has",
    "to": 360
  }, {
    "from": 360,
    "label": "has",
    "to": 361
  }, {
    "from": 360,
    "label": "has",
    "to": 362
  }, {
    "from": 360,
    "label": "has",
    "to": 363
  }, {
    "from": 360,
    "label": "has",
    "to": 364
  }, {
    "from": 360,
    "label": "has",
    "to": 365
  }, {
    "from": 360,
    "label": "has",
    "to": 361
  }, {
    "from": 360,
    "label": "has",
    "to": 362
  }, {
    "from": 360,
    "label": "has",
    "to": 363
  }, {
    "from": 360,
    "label": "has",
    "to": 366
  }, {
    "from": 360,
    "label": "has",
    "to": 367
  }, {
    "from": 348,
    "label": "has",
    "to": 368
  }, {
    "from": 368,
    "label": "has",
    "to": 369
  }, {
    "from": 348,
    "label": "has",
    "to": 370
  }, {
    "from": 370,
    "label": "has",
    "to": 371
  }, {
    "from": 370,
    "label": "has",
    "to": 372
  }, {
    "from": 372,
    "label": "has",
    "to": 373
  }, {
    "from": 373,
    "label": "has",
    "to": 147
  }, {
    "from": 348,
    "label": "has",
    "to": 374
  }, {
    "from": 374,
    "label": "has",
    "to": 375
  }, {
    "from": 375,
    "label": "has",
    "to": 376
  }, {
    "from": 375,
    "label": "has",
    "to": 377
  }, {
    "from": 377,
    "label": "has",
    "to": 378
  }, {
    "from": 348,
    "label": "has",
    "to": 379
  }, {
    "from": 380,
    "label": "has",
    "to": 381
  }, {
    "from": 380,
    "label": "has",
    "to": 382
  }, {
    "from": 380,
    "label": "has",
    "to": 383
  }, {
    "from": 383,
    "label": "has",
    "to": 384
  }, {
    "from": 383,
    "label": "has",
    "to": 385
  }, {
    "from": 385,
    "label": "has",
    "to": 386
  }, {
    "from": 385,
    "label": "has",
    "to": 387
  }, {
    "from": 385,
    "label": "has",
    "to": 388
  }, {
    "from": 383,
    "label": "has",
    "to": 389
  }, {
    "from": 383,
    "label": "has",
    "to": 390
  }, {
    "from": 383,
    "label": "has",
    "to": 391
  }, {
    "from": 391,
    "label": "has",
    "to": 147
  }, {
    "from": 380,
    "label": "has",
    "to": 392
  }, {
    "from": 393,
    "label": "has",
    "to": 394
  }, {
    "from": 393,
    "label": "has",
    "to": 395
  }, {
    "from": 393,
    "label": "has",
    "to": 396
  }, {
    "from": 396,
    "label": "has",
    "to": 397
  }, {
    "from": 396,
    "label": "has",
    "to": 398
  }, {
    "from": 393,
    "label": "has",
    "to": 399
  }, {
    "from": 400,
    "label": "has",
    "to": 401
  }, {
    "from": 400,
    "label": "has",
    "to": 402
  }, {
    "from": 400,
    "label": "has",
    "to": 403
  }, {
    "from": 404,
    "label": "has",
    "to": 401
  }, {
    "from": 404,
    "label": "has",
    "to": 402
  }, {
    "from": 404,
    "label": "has",
    "to": 405
  }, {
    "from": 406,
    "label": "has",
    "to": 402
  }, {
    "from": 406,
    "label": "has",
    "to": 407
  }, {
    "from": 408,
    "label": "has",
    "to": 409
  }, {
    "from": 408,
    "label": "has",
    "to": 410
  }, {
    "from": 410,
    "label": "has",
    "to": 411
  }, {
    "from": 408,
    "label": "has",
    "to": 381
  }, {
    "from": 408,
    "label": "has",
    "to": 412
  }, {
    "from": 413,
    "label": "has",
    "to": 414
  }, {
    "from": 413,
    "label": "has",
    "to": 415
  }, {
    "from": 413,
    "label": "has",
    "to": 211
  }, {
    "from": 413,
    "label": "has",
    "to": 416
  }, {
    "from": 416,
    "label": "has",
    "to": 208
  }, {
    "from": 416,
    "label": "has",
    "to": 417
  }, {
    "from": 416,
    "label": "has",
    "to": 418
  }, {
    "from": 416,
    "label": "has",
    "to": 419
  }, {
    "from": 416,
    "label": "has",
    "to": 420
  }, {
    "from": 416,
    "label": "has",
    "to": 421
  }, {
    "from": 416,
    "label": "has",
    "to": 422
  }, {
    "from": 413,
    "label": "has",
    "to": 423
  }, {
    "from": 423,
    "label": "has",
    "to": 424
  }, {
    "from": 423,
    "label": "has",
    "to": 425
  }, {
    "from": 423,
    "label": "has",
    "to": 357
  }, {
    "from": 357,
    "label": "has",
    "to": 358
  }, {
    "from": 358,
    "label": "has",
    "to": 147
  }, {
    "from": 413,
    "label": "has",
    "to": 381
  }, {
    "from": 413,
    "label": "has",
    "to": 426
  }, {
    "from": 427,
    "label": "has",
    "to": 428
  }, {
    "from": 427,
    "label": "has",
    "to": 415
  }, {
    "from": 427,
    "label": "has",
    "to": 429
  }, {
    "from": 429,
    "label": "has",
    "to": 430
  }, {
    "from": 429,
    "label": "has",
    "to": 208
  }, {
    "from": 429,
    "label": "has",
    "to": 417
  }, {
    "from": 429,
    "label": "has",
    "to": 211
  }, {
    "from": 429,
    "label": "has",
    "to": 431
  }, {
    "from": 431,
    "label": "has",
    "to": 213
  }, {
    "from": 431,
    "label": "has",
    "to": 432
  }, {
    "from": 431,
    "label": "has",
    "to": 215
  }, {
    "from": 431,
    "label": "has",
    "to": 216
  }, {
    "from": 431,
    "label": "has",
    "to": 433
  }, {
    "from": 429,
    "label": "has",
    "to": 434
  }, {
    "from": 434,
    "label": "has",
    "to": 424
  }, {
    "from": 434,
    "label": "has",
    "to": 435
  }, {
    "from": 434,
    "label": "has",
    "to": 436
  }, {
    "from": 436,
    "label": "has",
    "to": 437
  }, {
    "from": 437,
    "label": "has",
    "to": 147
  }, {
    "from": 427,
    "label": "has",
    "to": 381
  }, {
    "from": 427,
    "label": "has",
    "to": 438
  }, {
    "from": 439,
    "label": "has",
    "to": 381
  }, {
    "from": 439,
    "label": "has",
    "to": 440
  }, {
    "from": 441,
    "label": "has",
    "to": 442
  }, {
    "from": 441,
    "label": "has",
    "to": 443
  }, {
    "from": 441,
    "label": "has",
    "to": 444
  }, {
    "from": 441,
    "label": "has",
    "to": 445
  }, {
    "from": 441,
    "label": "has",
    "to": 446
  }, {
    "from": 441,
    "label": "has",
    "to": 447
  }, {
    "from": 447,
    "label": "has",
    "to": 448
  }, {
    "from": 447,
    "label": "has",
    "to": 449
  }, {
    "from": 447,
    "label": "has",
    "to": 252
  }, {
    "from": 441,
    "label": "has",
    "to": 450
  }, {
    "from": 441,
    "label": "has",
    "to": 451
  }, {
    "from": 441,
    "label": "has",
    "to": 452
  }, {
    "from": 452,
    "label": "has",
    "to": 254
  }, {
    "from": 441,
    "label": "has",
    "to": 453
  }, {
    "from": 441,
    "label": "has",
    "to": 454
  }, {
    "from": 441,
    "label": "has",
    "to": 455
  }, {
    "from": 441,
    "label": "has",
    "to": 456
  }, {
    "from": 441,
    "label": "has",
    "to": 457
  }, {
    "from": 441,
    "label": "has",
    "to": 458
  }, {
    "from": 458,
    "label": "has",
    "to": 459
  }, {
    "from": 441,
    "label": "has",
    "to": 460
  }, {
    "from": 460,
    "label": "has",
    "to": 461
  }, {
    "from": 461,
    "label": "has",
    "to": 462
  }, {
    "from": 460,
    "label": "has",
    "to": 463
  }, {
    "from": 460,
    "label": "has",
    "to": 464
  }, {
    "from": 460,
    "label": "has",
    "to": 465
  }, {
    "from": 460,
    "label": "has",
    "to": 466
  }, {
    "from": 460,
    "label": "has",
    "to": 467
  }, {
    "from": 441,
    "label": "has",
    "to": 468
  }, {
    "from": 441,
    "label": "has",
    "to": 469
  }, {
    "from": 441,
    "label": "has",
    "to": 470
  }, {
    "from": 441,
    "label": "has",
    "to": 471
  }, {
    "from": 441,
    "label": "has",
    "to": 16
  }, {
    "from": 441,
    "label": "has",
    "to": 472
  }, {
    "from": 473,
    "label": "has",
    "to": 474
  }, {
    "from": 473,
    "label": "has",
    "to": 475
  }, {
    "from": 473,
    "label": "has",
    "to": 476
  }, {
    "from": 473,
    "label": "has",
    "to": 477
  }, {
    "from": 473,
    "label": "has",
    "to": 478
  }, {
    "from": 473,
    "label": "has",
    "to": 479
  }, {
    "from": 473,
    "label": "has",
    "to": 480
  }, {
    "from": 473,
    "label": "has",
    "to": 481
  }, {
    "from": 473,
    "label": "has",
    "to": 482
  }, {
    "from": 473,
    "label": "has",
    "to": 483
  }, {
    "from": 483,
    "label": "has",
    "to": 484
  }, {
    "from": 473,
    "label": "has",
    "to": 485
  }, {
    "from": 473,
    "label": "has",
    "to": 486
  }, {
    "from": 473,
    "label": "has",
    "to": 487
  }, {
    "from": 473,
    "label": "has",
    "to": 488
  }, {
    "from": 473,
    "label": "has",
    "to": 489
  }, {
    "from": 473,
    "label": "has",
    "to": 490
  }, {
    "from": 473,
    "label": "has",
    "to": 491
  }, {
    "from": 473,
    "label": "has",
    "to": 492
  }, {
    "from": 492,
    "label": "has",
    "to": 493
  }, {
    "from": 473,
    "label": "has",
    "to": 494
  }, {
    "from": 494,
    "label": "has",
    "to": 495
  }, {
    "from": 473,
    "label": "has",
    "to": 496
  }, {
    "from": 496,
    "label": "has",
    "to": 497
  }, {
    "from": 473,
    "label": "has",
    "to": 498
  }, {
    "from": 498,
    "label": "has",
    "to": 499
  }, {
    "from": 473,
    "label": "has",
    "to": 500
  }, {
    "from": 500,
    "label": "has",
    "to": 501
  }, {
    "from": 500,
    "label": "has",
    "to": 502
  }, {
    "from": 500,
    "label": "has",
    "to": 503
  }, {
    "from": 473,
    "label": "has",
    "to": 504
  }, {
    "from": 504,
    "label": "has",
    "to": 505
  }, {
    "from": 504,
    "label": "has",
    "to": 506
  }, {
    "from": 473,
    "label": "has",
    "to": 507
  }, {
    "from": 507,
    "label": "has",
    "to": 508
  }, {
    "from": 473,
    "label": "has",
    "to": 16
  }, {
    "from": 473,
    "label": "has",
    "to": 509
  }, {
    "from": 3,
    "label": "calls",
    "to": 513
  }, {
    "from": 130,
    "label": "calls",
    "to": 513
  }, {
    "from": 149,
    "label": "calls",
    "to": 513
  }, {
    "from": 149,
    "label": "calls",
    "to": 513
  }, {
    "from": 182,
    "label": "calls",
    "to": 513
  }, {
    "from": 182,
    "label": "calls",
    "to": 513
  }, {
    "from": 238,
    "label": "calls",
    "to": 513
  }, {
    "from": 238,
    "label": "calls",
    "to": 513
  }, {
    "from": 510,
    "label": "calls",
    "to": 513
  }, {
    "from": 510,
    "label": "calls",
    "to": 513
  }, {
    "from": 510,
    "label": "calls",
    "to": 513
  }, {
    "from": 3,
    "label": "calls",
    "to": 226
  }, {
    "from": 149,
    "label": "calls",
    "to": 226
  }, {
    "from": 149,
    "label": "calls",
    "to": 226
  }, {
    "from": 182,
    "label": "calls",
    "to": 226
  }, {
    "from": 238,
    "label": "calls",
    "to": 226
  }, {
    "from": 182,
    "label": "calls",
    "to": 511
  }, {
    "from": 182,
    "label": "calls",
    "to": 511
  }, {
    "from": 182,
    "label": "calls",
    "to": 511
  }, {
    "from": 238,
    "label": "calls",
    "to": 511
  }, {
    "from": 238,
    "label": "calls",
    "to": 511
  }, {
    "from": 510,
    "label": "calls",
    "to": 511
  }, {
    "from": 510,
    "label": "calls",
    "to": 511
  }, {
    "from": 3,
    "label": "calls",
    "to": 516
  }, {
    "from": 3,
    "label": "calls",
    "to": 516
  }, {
    "from": 3,
    "label": "calls",
    "to": 516
  }, {
    "from": 3,
    "label": "calls",
    "to": 516
  }, {
    "from": 3,
    "label": "calls",
    "to": 516
  }, {
    "from": 3,
    "label": "calls",
    "to": 516
  }, {
    "from": 71,
    "label": "calls",
    "to": 516
  }, {
    "from": 71,
    "label": "calls",
    "to": 516
  }, {
    "from": 71,
    "label": "calls",
    "to": 516
  }, {
    "from": 71,
    "label": "calls",
    "to": 516
  }, {
    "from": 71,
    "label": "calls",
    "to": 516
  }, {
    "from": 71,
    "label": "calls",
    "to": 516
  }, {
    "from": 71,
    "label": "calls",
    "to": 516
  }, {
    "from": 99,
    "label": "calls",
    "to": 516
  }, {
    "from": 99,
    "label": "calls",
    "to": 516
  }, {
    "from": 149,
    "label": "calls",
    "to": 516
  }, {
    "from": 182,
    "label": "calls",
    "to": 516
  }, {
    "from": 182,
    "label": "calls",
    "to": 516
  }, {
    "from": 182,
    "label": "calls",
    "to": 516
  }, {
    "from": 226,
    "label": "calls",
    "to": 516
  }, {
    "from": 238,
    "label": "calls",
    "to": 516
  }, {
    "from": 238,
    "label": "calls",
    "to": 516
  }, {
    "from": 238,
    "label": "calls",
    "to": 516
  }, {
    "from": 281,
    "label": "calls",
    "to": 516
  }, {
    "from": 289,
    "label": "calls",
    "to": 516
  }, {
    "from": 289,
    "label": "calls",
    "to": 516
  }, {
    "from": 289,
    "label": "calls",
    "to": 516
  }, {
    "from": 289,
    "label": "calls",
    "to": 516
  }, {
    "from": 289,
    "label": "calls",
    "to": 516
  }, {
    "from": 510,
    "label": "calls",
    "to": 516
  }, {
    "from": 510,
    "label": "calls",
    "to": 516
  }, {
    "from": 510,
    "label": "calls",
    "to": 516
  }, {
    "from": 510,
    "label": "calls",
    "to": 516
  }, {
    "from": 510,
    "label": "calls",
    "to": 516
  }, {
    "from": 510,
    "label": "calls",
    "to": 516
  }, {
    "from": 510,
    "label": "calls",
    "to": 516
  }, {
    "from": 510,
    "label": "calls",
    "to": 516
  }, {
    "from": 510,
    "label": "calls",
    "to": 516
  }, {
    "from": 510,
    "label": "calls",
    "to": 516
  }, {
    "from": 510,
    "label": "calls",
    "to": 516
  }, {
    "from": 510,
    "label": "calls",
    "to": 516
  }, {
    "from": 510,
    "label": "calls",
    "to": 516
  }, {
    "from": 510,
    "label": "calls",
    "to": 516
  }, {
    "from": 510,
    "label": "calls",
    "to": 516
  }, {
    "from": 510,
    "label": "calls",
    "to": 516
  }, {
    "from": 308,
    "label": "calls",
    "to": 516
  }, {
    "from": 316,
    "label": "calls",
    "to": 516
  }, {
    "from": 316,
    "label": "calls",
    "to": 516
  }, {
    "from": 316,
    "label": "calls",
    "to": 516
  }, {
    "from": 510,
    "label": "calls",
    "to": 516
  }, {
    "from": 510,
    "label": "calls",
    "to": 516
  }, {
    "from": 510,
    "label": "calls",
    "to": 516
  }, {
    "from": 510,
    "label": "calls",
    "to": 516
  }, {
    "from": 510,
    "label": "calls",
    "to": 516
  }, {
    "from": 510,
    "label": "calls",
    "to": 516
  }, {
    "from": 510,
    "label": "calls",
    "to": 516
  }, {
    "from": 510,
    "label": "calls",
    "to": 516
  }, {
    "from": 510,
    "label": "calls",
    "to": 516
  }, {
    "from": 510,
    "label": "calls",
    "to": 516
  }, {
    "from": 3,
    "label": "calls",
    "to": 524
  }, {
    "from": 3,
    "label": "calls",
    "to": 524
  }, {
    "from": 3,
    "label": "calls",
    "to": 524
  }, {
    "from": 149,
    "label": "calls",
    "to": 524
  }, {
    "from": 238,
    "label": "calls",
    "to": 524
  }, {
    "from": 238,
    "label": "calls",
    "to": 524
  }, {
    "from": 510,
    "label": "calls",
    "to": 182
  }, {
    "from": 510,
    "label": "calls",
    "to": 182
  }, {
    "from": 510,
    "label": "calls",
    "to": 182
  }, {
    "from": 149,
    "label": "calls",
    "to": 514
  }, {
    "from": 182,
    "label": "calls",
    "to": 514
  }, {
    "from": 510,
    "label": "calls",
    "to": 514
  }, {
    "from": 510,
    "label": "calls",
    "to": 316
  }, {
    "from": 3,
    "label": "calls",
    "to": 518
  }, {
    "from": 3,
    "label": "calls",
    "to": 518
  }, {
    "from": 3,
    "label": "calls",
    "to": 518
  }, {
    "from": 3,
    "label": "calls",
    "to": 518
  }, {
    "from": 99,
    "label": "calls",
    "to": 518
  }, {
    "from": 149,
    "label": "calls",
    "to": 518
  }, {
    "from": 149,
    "label": "calls",
    "to": 518
  }, {
    "from": 238,
    "label": "calls",
    "to": 518
  }, {
    "from": 238,
    "label": "calls",
    "to": 518
  }, {
    "from": 238,
    "label": "calls",
    "to": 518
  }, {
    "from": 510,
    "label": "calls",
    "to": 238
  }, {
    "from": 289,
    "label": "calls",
    "to": 520
  }, {
    "from": 289,
    "label": "calls",
    "to": 520
  }, {
    "from": 71,
    "label": "calls",
    "to": 71
  }, {
    "from": 510,
    "label": "calls",
    "to": 71
  }, {
    "from": 510,
    "label": "calls",
    "to": 71
  }, {
    "from": 149,
    "label": "calls",
    "to": 515
  }, {
    "from": 137,
    "label": "calls",
    "to": 99
  }, {
    "from": 137,
    "label": "calls",
    "to": 99
  }, {
    "from": 182,
    "label": "calls",
    "to": 99
  }, {
    "from": 182,
    "label": "calls",
    "to": 99
  }, {
    "from": 238,
    "label": "calls",
    "to": 99
  }, {
    "from": 238,
    "label": "calls",
    "to": 99
  }, {
    "from": 510,
    "label": "calls",
    "to": 99
  }, {
    "from": 510,
    "label": "calls",
    "to": 99
  }, {
    "from": 510,
    "label": "calls",
    "to": 99
  }, {
    "from": 510,
    "label": "calls",
    "to": 522
  }, {
    "from": 308,
    "label": "calls",
    "to": 519
  }, {
    "from": 137,
    "label": "calls",
    "to": 66
  }, {
    "from": 182,
    "label": "calls",
    "to": 66
  }, {
    "from": 182,
    "label": "calls",
    "to": 66
  }, {
    "from": 238,
    "label": "calls",
    "to": 66
  }, {
    "from": 238,
    "label": "calls",
    "to": 66
  }, {
    "from": 510,
    "label": "calls",
    "to": 66
  }, {
    "from": 510,
    "label": "calls",
    "to": 66
  }, {
    "from": 510,
    "label": "calls",
    "to": 66
  }, {
    "from": 510,
    "label": "calls",
    "to": 66
  }, {
    "from": 510,
    "label": "calls",
    "to": 66
  }, {
    "from": 238,
    "label": "calls",
    "to": 512
  }, {
    "from": 149,
    "label": "calls",
    "to": 130
  }, {
    "from": 66,
    "label": "calls",
    "to": 528
  }, {
    "from": 71,
    "label": "calls",
    "to": 528
  }, {
    "from": 71,
    "label": "calls",
    "to": 528
  }, {
    "from": 71,
    "label": "calls",
    "to": 528
  }, {
    "from": 71,
    "label": "calls",
    "to": 528
  }, {
    "from": 99,
    "label": "calls",
    "to": 528
  }, {
    "from": 99,
    "label": "calls",
    "to": 528
  }, {
    "from": 99,
    "label": "calls",
    "to": 528
  }, {
    "from": 99,
    "label": "calls",
    "to": 528
  }, {
    "from": 130,
    "label": "calls",
    "to": 528
  }, {
    "from": 137,
    "label": "calls",
    "to": 528
  }, {
    "from": 137,
    "label": "calls",
    "to": 528
  }, {
    "from": 149,
    "label": "calls",
    "to": 528
  }, {
    "from": 182,
    "label": "calls",
    "to": 528
  }, {
    "from": 182,
    "label": "calls",
    "to": 528
  }, {
    "from": 182,
    "label": "calls",
    "to": 528
  }, {
    "from": 182,
    "label": "calls",
    "to": 528
  }, {
    "from": 182,
    "label": "calls",
    "to": 528
  }, {
    "from": 226,
    "label": "calls",
    "to": 528
  }, {
    "from": 226,
    "label": "calls",
    "to": 528
  }, {
    "from": 226,
    "label": "calls",
    "to": 528
  }, {
    "from": 238,
    "label": "calls",
    "to": 528
  }, {
    "from": 289,
    "label": "calls",
    "to": 528
  }, {
    "from": 289,
    "label": "calls",
    "to": 528
  }, {
    "from": 510,
    "label": "calls",
    "to": 528
  }, {
    "from": 510,
    "label": "calls",
    "to": 528
  }, {
    "from": 510,
    "label": "calls",
    "to": 528
  }, {
    "from": 510,
    "label": "calls",
    "to": 528
  }, {
    "from": 510,
    "label": "calls",
    "to": 528
  }, {
    "from": 510,
    "label": "calls",
    "to": 528
  }, {
    "from": 510,
    "label": "calls",
    "to": 528
  }, {
    "from": 510,
    "label": "calls",
    "to": 528
  }, {
    "from": 510,
    "label": "calls",
    "to": 528
  }, {
    "from": 510,
    "label": "calls",
    "to": 528
  }, {
    "from": 510,
    "label": "calls",
    "to": 528
  }, {
    "from": 510,
    "label": "calls",
    "to": 528
  }, {
    "from": 510,
    "label": "calls",
    "to": 528
  }, {
    "from": 510,
    "label": "calls",
    "to": 528
  }, {
    "from": 510,
    "label": "calls",
    "to": 528
  }, {
    "from": 510,
    "label": "calls",
    "to": 528
  }, {
    "from": 510,
    "label": "calls",
    "to": 528
  }, {
    "from": 510,
    "label": "calls",
    "to": 528
  }, {
    "from": 510,
    "label": "calls",
    "to": 528
  }, {
    "from": 510,
    "label": "calls",
    "to": 528
  }, {
    "from": 510,
    "label": "calls",
    "to": 528
  }, {
    "from": 510,
    "label": "calls",
    "to": 528
  }, {
    "from": 182,
    "label": "calls",
    "to": 308
  }, {
    "from": 182,
    "label": "calls",
    "to": 308
  }, {
    "from": 182,
    "label": "calls",
    "to": 308
  }, {
    "from": 510,
    "label": "calls",
    "to": 308
  }, {
    "from": 510,
    "label": "calls",
    "to": 308
  }, {
    "from": 510,
    "label": "calls",
    "to": 308
  }, {
    "from": 510,
    "label": "calls",
    "to": 308
  }, {
    "from": 510,
    "label": "calls",
    "to": 308
  }, {
    "from": 510,
    "label": "calls",
    "to": 308
  }, {
    "from": 510,
    "label": "calls",
    "to": 308
  }, {
    "from": 510,
    "label": "calls",
    "to": 308
  }, {
    "from": 308,
    "label": "calls",
    "to": 521
  }, {
    "from": 182,
    "label": "calls",
    "to": 289
  }, {
    "from": 182,
    "label": "calls",
    "to": 289
  }, {
    "from": 238,
    "label": "calls",
    "to": 289
  }, {
    "from": 289,
    "label": "calls",
    "to": 289
  }, {
    "from": 289,
    "label": "calls",
    "to": 289
  }, {
    "from": 510,
    "label": "calls",
    "to": 289
  }, {
    "from": 510,
    "label": "calls",
    "to": 289
  }, {
    "from": 510,
    "label": "calls",
    "to": 289
  }, {
    "from": 510,
    "label": "calls",
    "to": 289
  }, {
    "from": 510,
    "label": "calls",
    "to": 289
  }, {
    "from": 281,
    "label": "calls",
    "to": 523
  }, {
    "from": 149,
    "label": "calls",
    "to": 137
  }, {
    "from": 182,
    "label": "calls",
    "to": 137
  }, {
    "from": 238,
    "label": "calls",
    "to": 137
  }, {
    "from": 510,
    "label": "calls",
    "to": 137
  }, {
    "from": 510,
    "label": "calls",
    "to": 137
  }, {
    "from": 3,
    "label": "calls",
    "to": 525
  }, {
    "from": 510,
    "label": "calls",
    "to": 149
  }, {
    "from": 510,
    "label": "calls",
    "to": 149
  }, {
    "from": 308,
    "label": "calls",
    "to": 527
  }, {
    "from": 510,
    "label": "calls",
    "to": 526
  }, {
    "from": 3,
    "label": "calls",
    "to": 517
  }, {
    "from": 99,
    "label": "calls",
    "to": 517
  }, {
    "from": 149,
    "label": "calls",
    "to": 517
  }, {
    "from": 238,
    "label": "calls",
    "to": 517
  }, {
    "from": 182,
    "label": "calls",
    "to": 281
  }, {
    "from": 182,
    "label": "calls",
    "to": 281
  }, {
    "from": 238,
    "label": "calls",
    "to": 281
  }, {
    "from": 510,
    "label": "calls",
    "to": 281
  }, {
    "from": 510,
    "label": "calls",
    "to": 281
  }, {
    "from": 510,
    "label": "calls",
    "to": 281
  }, {
    "from": 510,
    "label": "calls",
    "to": 281
  }, {
    "from": 510,
    "label": "calls",
    "to": 281
  }, {
    "from": 1,
    "label": "contains",
    "to": 510
  }, {
    "from": 510,
    "label": "declares",
    "to": 3
  }, {
    "from": 510,
    "label": "declares",
    "to": 66
  }, {
    "from": 510,
    "label": "declares",
    "to": 71
  }, {
    "from": 510,
    "label": "declares",
    "to": 99
  }, {
    "from": 510,
    "label": "declares",
    "to": 130
  }, {
    "from": 510,
    "label": "declares",
    "to": 137
  }, {
    "from": 510,
    "label": "declares",
    "to": 149
  }, {
    "from": 510,
    "label": "declares",
    "to": 182
  }, {
    "from": 510,
    "label": "declares",
    "to": 226
  }, {
    "from": 510,
    "label": "declares",
    "to": 238
  }, {
    "from": 510,
    "label": "declares",
    "to": 281
  }, {
    "from": 510,
    "label": "declares",
    "to": 289
  }, {
    "from": 510,
    "label": "declares",
    "to": 308
  }, {
    "from": 510,
    "label": "declares",
    "to": 316
  }, {
    "from": 510,
    "label": "declares",
    "to": 342
  }, {
    "from": 510,
    "label": "declares",
    "to": 345
  }, {
    "from": 510,
    "label": "declares",
    "to": 348
  }, {
    "from": 510,
    "label": "declares",
    "to": 380
  }, {
    "from": 510,
    "label": "declares",
    "to": 393
  }, {
    "from": 510,
    "label": "declares",
    "to": 400
  }, {
    "from": 510,
    "label": "declares",
    "to": 404
  }, {
    "from": 510,
    "label": "declares",
    "to": 406
  }, {
    "from": 510,
    "label": "declares",
    "to": 408
  }, {
    "from": 510,
    "label": "declares",
    "to": 413
  }, {
    "from": 510,
    "label": "declares",
    "to": 427
  }, {
    "from": 510,
    "label": "declares",
    "to": 439
  }, {
    "from": 510,
    "label": "declares",
    "to": 441
  }, {
    "from": 510,
    "label": "declares",
    "to": 473
  }, {
    "from": 1,
    "label": "contains",
    "to": 529
  }, {
    "from": 1,
    "label": "contains",
    "to": 530
  }, {
    "from": 529,
    "label": "initializes",
    "to": 531
  }, {
    "from": 531,
    "label": "assigns",
    "to": 532
  }, {
    "from": 529,
    "label": "initializes",
    "to": 533
  }, {
    "from": 533,
    "label": "assigns",
    "to": 534
  }, {
    "from": 529,
    "label": "initializes",
    "to": 535
  }, {
    "from": 535,
    "label": "assigns",
    "to": 536
  }, {
    "from": 529,
    "label": "initializes",
    "to": 537
  }, {
    "from": 537,
    "label": "assigns",
    "to": 538
  }, {
    "from": 529,
    "label": "initializes",
    "to": 539
  }, {
    "from": 539,
    "label": "assigns",
    "to": 540
  }, {
    "from": 529,
    "label": "initializes",
    "to": 541
  }, {
    "from": 541,
    "label": "assigns",
    "to": 542
  }, {
    "from": 529,
    "label": "initializes",
    "to": 543
  }, {
    "from": 543,
    "label": "assigns",
    "to": 544
  }, {
    "from": 529,
    "label": "initializes",
    "to": 545
  }, {
    "from": 545,
    "label": "assigns",
    "to": 546
  }, {
    "from": 529,
    "label": "initializes",
    "to": 547
  }, {
    "from": 547,
    "label": "assigns",
    "to": 548
  }, {
    "from": 529,
    "label": "initializes",
    "to": 549
  }, {
    "from": 549,
    "label": "assigns",
    "to": 550
  }, {
    "from": 529,
    "label": "initializes",
    "to": 551
  }, {
    "from": 551,
    "label": "assigns",
    "to": 552
  }, {
    "from": 529,
    "label": "initializes",
    "to": 553
  }, {
    "from": 553,
    "label": "assigns",
    "to": 554
  }, {
    "from": 529,
    "label": "initializes",
    "to": 555
  }, {
    "from": 555,
    "label": "assigns",
    "to": 556
  }, {
    "from": 529,
    "label": "initializes",
    "to": 557
  }, {
    "from": 557,
    "label": "assigns",
    "to": 558
  }, {
    "from": 529,
    "label": "initializes",
    "to": 559
  }, {
    "from": 559,
    "label": "assigns",
    "to": 560
  }, {
    "from": 529,
    "label": "initializes",
    "to": 561
  }, {
    "from": 561,
    "label": "assigns",
    "to": 562
  }, {
    "from": 529,
    "label": "initializes",
    "to": 563
  }, {
    "from": 563,
    "label": "assigns",
    "to": 564
  }, {
    "from": 529,
    "label": "initializes",
    "to": 565
  }, {
    "from": 565,
    "label": "assigns",
    "to": 566
  }, {
    "from": 529,
    "label": "initializes",
    "to": 567
  }, {
    "from": 567,
    "label": "assigns",
    "to": 568
  }, {
    "from": 529,
    "label": "initializes",
    "to": 569
  }, {
    "from": 569,
    "label": "assigns",
    "to": 570
  }, {
    "from": 570,
    "label": "assigns",
    "to": 571
  }, {
    "from": 571,
    "label": "assigns",
    "to": 572
  }, {
    "from": 570,
    "label": "assigns",
    "to": 573
  }, {
    "from": 573,
    "label": "assigns",
    "to": 574
  }, {
    "from": 570,
    "label": "assigns",
    "to": 575
  }, {
    "from": 575,
    "label": "assigns",
    "to": 576
  }, {
    "from": 570,
    "label": "assigns",
    "to": 577
  }, {
    "from": 577,
    "label": "assigns",
    "to": 578
  }, {
    "from": 570,
    "label": "assigns",
    "to": 579
  }, {
    "from": 579,
    "label": "assigns",
    "to": 580
  }, {
    "from": 570,
    "label": "assigns",
    "to": 581
  }, {
    "from": 581,
    "label": "assigns",
    "to": 582
  }, {
    "from": 570,
    "label": "assigns",
    "to": 583
  }, {
    "from": 583,
    "label": "assigns",
    "to": 584
  }, {
    "from": 570,
    "label": "assigns",
    "to": 585
  }, {
    "from": 585,
    "label": "assigns",
    "to": 586
  }, {
    "from": 570,
    "label": "assigns",
    "to": 587
  }, {
    "from": 587,
    "label": "assigns",
    "to": 588
  }, {
    "from": 570,
    "label": "assigns",
    "to": 589
  }, {
    "from": 589,
    "label": "assigns",
    "to": 590
  }, {
    "from": 529,
    "label": "initializes",
    "to": 591
  }, {
    "from": 591,
    "label": "assigns",
    "to": 592
  }, {
    "from": 530,
    "label": "initializes",
    "to": 593
  }, {
    "from": 593,
    "label": "requires",
    "to": 2
  }, {
    "from": 594,
    "label": "requires",
    "to": 1
  }, {
    "from": 69,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 69,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 69,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 69,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 69,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 69,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 69,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 69,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 69,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 69,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 88,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 88,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 88,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 88,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 88,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 88,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 88,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 88,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 88,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 88,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 90,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 90,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 90,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 90,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 90,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 90,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 90,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 90,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 90,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 90,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 97,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 97,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 97,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 97,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 97,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 97,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 97,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 97,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 97,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 97,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 123,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 123,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 123,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 123,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 123,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 123,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 123,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 123,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 123,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 123,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 124,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 124,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 124,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 124,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 124,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 124,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 124,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 124,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 124,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 124,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 125,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 125,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 125,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 125,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 125,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 125,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 125,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 125,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 125,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 125,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 135,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 135,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 135,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 135,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 135,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 135,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 135,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 135,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 135,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 135,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 139,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 139,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 139,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 139,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 139,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 139,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 139,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 139,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 139,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 139,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 140,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 140,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 140,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 140,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 140,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 140,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 140,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 140,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 140,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 140,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 144,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 144,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 144,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 144,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 144,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 144,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 144,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 144,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 144,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 144,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 145,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 145,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 145,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 145,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 145,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 145,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 145,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 145,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 145,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 145,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 147,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 147,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 147,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 147,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 147,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 147,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 147,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 147,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 147,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 147,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 174,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 174,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 174,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 174,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 174,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 174,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 174,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 174,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 174,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 174,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 180,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 180,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 180,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 180,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 180,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 180,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 180,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 180,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 180,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 180,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 194,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 194,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 194,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 194,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 194,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 194,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 194,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 194,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 194,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 194,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 195,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 195,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 195,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 195,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 195,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 195,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 195,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 195,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 195,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 195,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 196,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 196,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 196,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 196,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 196,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 196,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 196,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 196,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 196,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 196,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 197,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 197,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 197,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 197,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 197,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 197,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 197,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 197,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 197,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 197,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 198,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 198,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 198,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 198,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 198,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 198,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 198,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 198,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 198,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 198,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 200,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 200,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 200,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 200,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 200,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 200,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 200,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 200,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 200,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 200,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 201,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 201,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 201,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 201,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 201,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 201,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 201,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 201,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 201,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 201,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 213,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 213,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 213,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 213,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 213,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 213,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 213,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 213,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 213,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 213,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 214,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 214,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 214,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 214,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 214,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 214,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 214,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 214,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 214,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 214,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 216,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 216,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 216,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 216,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 216,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 216,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 216,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 216,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 216,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 216,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 217,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 217,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 217,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 217,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 217,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 217,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 217,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 217,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 217,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 217,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 218,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 218,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 218,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 218,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 218,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 218,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 218,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 218,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 218,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 218,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 220,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 220,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 220,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 220,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 220,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 220,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 220,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 220,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 220,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 220,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 221,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 221,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 221,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 221,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 221,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 221,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 221,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 221,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 221,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 221,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 224,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 224,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 224,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 224,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 224,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 224,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 224,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 224,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 224,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 224,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 233,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 233,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 233,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 233,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 233,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 233,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 233,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 233,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 233,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 233,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 234,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 234,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 234,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 234,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 234,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 234,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 234,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 234,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 234,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 234,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 252,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 252,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 252,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 252,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 252,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 252,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 252,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 252,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 252,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 252,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 254,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 254,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 254,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 254,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 254,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 254,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 254,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 254,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 254,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 254,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 272,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 272,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 272,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 272,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 272,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 272,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 272,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 272,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 272,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 272,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 274,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 274,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 274,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 274,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 274,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 274,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 274,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 274,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 274,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 274,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 276,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 276,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 276,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 276,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 276,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 276,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 276,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 276,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 276,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 276,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 277,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 277,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 277,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 277,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 277,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 277,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 277,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 277,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 277,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 277,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 279,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 279,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 279,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 279,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 279,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 279,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 279,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 279,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 279,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 279,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 286,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 286,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 286,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 286,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 286,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 286,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 286,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 286,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 286,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 286,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 292,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 292,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 292,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 292,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 292,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 292,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 292,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 292,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 292,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 292,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 301,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 301,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 301,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 301,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 301,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 301,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 301,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 301,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 301,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 301,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 303,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 303,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 303,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 303,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 303,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 303,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 303,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 303,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 303,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 303,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 313,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 313,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 313,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 313,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 313,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 313,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 313,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 313,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 313,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 313,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 314,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 314,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 314,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 314,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 314,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 314,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 314,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 314,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 314,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 314,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 352,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 352,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 352,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 352,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 352,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 352,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 352,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 352,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 352,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 352,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 356,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 356,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 356,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 356,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 356,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 356,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 356,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 356,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 356,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 356,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 364,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 364,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 364,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 364,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 364,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 364,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 364,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 364,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 364,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 364,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 366,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 366,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 366,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 366,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 366,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 366,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 366,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 366,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 366,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 366,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 369,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 369,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 369,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 369,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 369,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 369,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 369,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 369,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 369,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 369,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 371,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 371,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 371,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 371,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 371,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 371,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 371,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 371,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 371,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 371,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 376,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 376,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 376,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 376,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 376,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 376,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 376,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 376,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 376,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 376,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 378,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 378,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 378,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 378,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 378,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 378,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 378,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 378,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 378,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 378,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 386,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 386,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 386,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 386,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 386,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 386,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 386,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 386,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 386,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 386,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 387,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 387,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 387,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 387,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 387,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 387,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 387,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 387,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 387,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 387,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 388,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 388,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 388,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 388,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 388,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 388,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 388,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 388,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 388,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 388,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 389,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 389,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 389,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 389,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 389,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 389,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 389,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 389,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 389,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 389,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 390,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 390,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 390,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 390,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 390,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 390,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 390,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 390,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 390,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 390,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 394,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 394,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 394,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 394,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 394,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 394,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 394,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 394,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 394,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 394,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 397,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 397,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 397,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 397,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 397,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 397,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 397,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 397,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 397,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 397,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 398,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 398,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 398,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 398,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 398,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 398,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 398,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 398,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 398,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 398,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 401,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 401,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 401,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 401,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 401,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 401,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 401,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 401,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 401,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 401,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 402,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 402,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 402,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 402,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 402,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 402,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 402,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 402,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 402,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 402,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 411,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 411,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 411,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 411,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 411,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 411,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 411,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 411,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 411,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 411,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 418,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 418,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 418,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 418,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 418,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 418,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 418,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 418,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 418,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 418,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 419,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 419,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 419,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 419,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 419,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 419,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 419,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 419,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 419,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 419,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 421,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 421,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 421,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 421,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 421,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 421,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 421,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 421,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 421,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 421,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 422,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 422,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 422,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 422,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 422,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 422,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 422,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 422,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 422,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 422,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 424,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 424,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 424,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 424,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 424,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 424,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 424,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 424,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 424,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 424,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 425,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 425,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 425,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 425,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 425,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 425,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 425,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 425,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 425,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 425,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 432,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 432,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 432,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 432,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 432,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 432,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 432,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 432,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 432,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 432,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 433,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 433,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 433,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 433,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 433,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 433,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 433,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 433,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 433,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 433,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 435,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 435,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 435,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 435,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 435,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 435,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 435,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 435,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 435,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 435,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 449,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 449,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 449,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 449,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 449,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 449,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 449,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 449,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 449,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 449,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 482,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 482,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 482,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 482,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 482,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 482,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 482,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 482,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 482,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 482,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 495,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 495,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 495,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 495,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 495,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 495,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 495,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 495,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 495,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 495,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 501,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 501,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 501,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 501,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 501,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 501,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 501,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 501,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 501,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 501,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 502,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 502,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 502,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 502,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 502,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 502,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 502,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 502,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 502,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 502,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 503,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 503,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 503,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 503,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 503,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 503,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 503,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 503,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 503,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 503,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 505,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 505,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 505,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 505,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 505,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 505,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 505,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 505,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 505,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 505,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 506,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 506,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 506,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 506,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 506,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 506,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 506,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 506,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 506,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 506,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 508,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 508,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 508,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 508,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 508,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 508,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 508,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 508,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 508,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 508,
    "label": "hasArgument",
    "to": 590
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "block",
    "type": "module"
  }, {
    "id": 2,
    "text": "utils",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function evaluate_require_execs(node, secondary_nodes, nodeName, scopeArray, data) \t\t--- node assign operacie (Name) a data {args} (prefixExp celeho volania)\r\n\r\n\tlocal name\t\t\t-- FULL name of variable assigned to ! ... leftname when searching for functions and variables\r\n\tlocal modulename\t-- FULL name of required module\r\n\r\n\tif (node.tag == 'STRING' ) then -- if node is a STRING node - require function was not part of an assign, defines a new variable\r\n\t\tname = string.sub(node.text, 2 , string.len(node.text) -1) -- delete '' and \"\" \r\n\t\tmodulename = name\r\n\telse\r\n\t\tname = node.text\r\n\t\tif (secondary_nodes) then \r\n\t\t\tfor k,v in pairs (secondary_nodes) do\r\n\t\t\t\tname = name .. v.text\r\n\t\t\tend\r\n\t\tend\r\n\t\tmodulename = utils.searchForTagItem_recursive('STRING', data[1], 5)\r\n\t\tmodulename = string.sub(modulename.text, 2 , string.len(modulename.text) -1)\r\n\tend\r\n\t\r\n\tif (not modulename) then return end -- require does not contain string with its name but only a variable (subject to future dynamic analysis)\r\n\t\r\n\tlocal index\r\n\r\n\t-- evaluate function calls of a referenced module\r\n\tlocal functions = {}\r\n\tif (total_moduleCalls[modulename] == nil) then total_moduleCalls[modulename] = {} end\r\n\tlocal moduleref = total_moduleCalls[modulename]\r\n\t\t\r\n\tfor callName, node in pairs(total_execs_stack) do\r\n\t\tindex = string.find(callName, name)\r\n\t\tif (index == 1) then\r\n\t\t\tlocal rightname = string.sub(callName, index + string.len(name) + 1)\r\n\t\t\tfunctions[rightname] = node\r\n\t\t\tfor _, node in pairs(node) do\r\n\t\t\t\tnode.metrics.module_functionCall = {}\r\n\t\t\t\tnode.metrics.module_functionCall.moduleName = modulename\r\n\t\t\t\tnode.metrics.module_functionCall.functionName = rightname\r\n\t\t\tend\t\t\t\r\n\t\tend\r\n\tend\r\n\t\r\n\tfor key, value in pairs(functions) do\r\n\t\tif (moduleref[key] == nil) then moduleref[key] = 0 end\r\n\t\tmoduleref[key] = moduleref[key] + table.getn(value)\r\n\tend\r\n\t\r\n\t-- evaluate variables of a references module .. the same scope as the beginning of a variable (jedna.dva = require 'aa') - scope of 'jedna'\r\n\tlocal variables = {}\r\n\t\r\n\tfor _ ,var in pairs(scopeArray[nodeName]) do\r\n\t\t-- build name for variable (join parts into one string ( one.two.three ) (var is only a reference to node Name 'one')\r\n\t\tlocal varName = var.text\r\n\t\tif (var.parent.tag == '_PrefixExp') then\r\n\t\t\tnameNode, secondaryNodes = process_PrefixExpChildren(var.parent.data)\r\n\t\t\tfor k,v in pairs(secondaryNodes) do \t\t\t\t\r\n\t\t\t\tvarName = varName .. v.text\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\t-- split name into left.mid.right parts (left+mid = localmodulename)\r\n\t\t\tlocal leftname = var.text\r\n\t\t\ti = 1\r\n\t\t\twhile (leftname ~= name and i<#secondaryNodes + 1) do \r\n\t\t\t\tleftname = leftname .. secondaryNodes[i].text\r\n\t\t\t\ti = i + 1\r\n\t\t\tend\r\n\t\t\tlocal midname\r\n\t\t\tif (i < #secondaryNodes + 1) then \r\n\t\t\t\tmidname = secondaryNodes[i].text\r\n\t\t\tend\r\n\t\t\ti = i + 1\r\n\t\t\tlocal rightname = ''\r\n\t\t\twhile (i<#secondaryNodes + 1) do \r\n\t\t\t\trightname = rightname .. secondaryNodes[i].text\r\n\t\t\t\ti = i + 1\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tif (midname) then\r\n\t\t\t\t-- compare with local variable holding the module\r\n\t\t\t\tmidname = string.sub(midname, 2) -- get rid of the dot in .variable\r\n\t\t\t\tif (variables[midname] == nil) then variables[midname] = {} end\r\n\t\t\t\tif (variables[midname][midname..rightname] == nil) then \r\n\t\t\t\t\tvariables[midname][midname..rightname] = 1 \r\n\t\t\t\telse\r\n\t\t\t\t\tvariables[midname][midname..rightname] = variables[midname][midname..rightname] + 1\r\n\t\t\t\tend\r\n\t\t\t\tvar.metrics.module_reference = {}\r\n\t\t\t\tvar.metrics.module_reference.moduleName = modulename\r\n\t\t\t\tvar.metrics.module_reference.referenceName = midname\r\n\t\t\t\tvar.metrics.module_reference.referenceName_full = midname .. rightname\r\n\t\t\tend\r\n\t\t\t\r\n\t\tend\t\r\n\tend\r\n\t\r\n\ttotal_moduleReferences[modulename] = variables\r\n\t\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local name",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local modulename",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "if (node.tag == 'STRING' ) then -- if node is a STRING node - require function was not part of an assign, defines a new variable\r\n\t\tname = string.sub(node.text, 2 , string.len(node.text) -1) -- delete '' and \"\" \r\n\t\tmodulename = name\r\n\telse\r\n\t\tname = node.text\r\n\t\tif (secondary_nodes) then \r\n\t\t\tfor k,v in pairs (secondary_nodes) do\r\n\t\t\t\tname = name .. v.text\r\n\t\t\tend\r\n\t\tend\r\n\t\tmodulename = utils.searchForTagItem_recursive('STRING', data[1], 5)\r\n\t\tmodulename = string.sub(modulename.text, 2 , string.len(modulename.text) -1)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "name = string.sub(node.text, 2 , string.len(node.text) -1)",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "modulename = name",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "name = node.text",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "if (secondary_nodes) then \r\n\t\t\tfor k,v in pairs (secondary_nodes) do\r\n\t\t\t\tname = name .. v.text\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "for k,v in pairs (secondary_nodes) do\r\n\t\t\t\tname = name .. v.text\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 12,
    "text": "name = name .. v.text",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "modulename = utils.searchForTagItem_recursive('STRING', data[1], 5)",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "modulename = string.sub(modulename.text, 2 , string.len(modulename.text) -1)",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "if (not modulename) then return end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 17,
    "text": "local index",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "local functions = {}",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "if (total_moduleCalls[modulename] == nil) then total_moduleCalls[modulename] = {} end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "total_moduleCalls[modulename] = {}",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "local moduleref = total_moduleCalls[modulename]",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "for callName, node in pairs(total_execs_stack) do\r\n\t\tindex = string.find(callName, name)\r\n\t\tif (index == 1) then\r\n\t\t\tlocal rightname = string.sub(callName, index + string.len(name) + 1)\r\n\t\t\tfunctions[rightname] = node\r\n\t\t\tfor _, node in pairs(node) do\r\n\t\t\t\tnode.metrics.module_functionCall = {}\r\n\t\t\t\tnode.metrics.module_functionCall.moduleName = modulename\r\n\t\t\t\tnode.metrics.module_functionCall.functionName = rightname\r\n\t\t\tend\t\t\t\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 23,
    "text": "index = string.find(callName, name)",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "if (index == 1) then\r\n\t\t\tlocal rightname = string.sub(callName, index + string.len(name) + 1)\r\n\t\t\tfunctions[rightname] = node\r\n\t\t\tfor _, node in pairs(node) do\r\n\t\t\t\tnode.metrics.module_functionCall = {}\r\n\t\t\t\tnode.metrics.module_functionCall.moduleName = modulename\r\n\t\t\t\tnode.metrics.module_functionCall.functionName = rightname\r\n\t\t\tend\t\t\t\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "local rightname = string.sub(callName, index + string.len(name) + 1)",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "functions[rightname] = node",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "for _, node in pairs(node) do\r\n\t\t\t\tnode.metrics.module_functionCall = {}\r\n\t\t\t\tnode.metrics.module_functionCall.moduleName = modulename\r\n\t\t\t\tnode.metrics.module_functionCall.functionName = rightname\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 28,
    "text": "node.metrics.module_functionCall = {}",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "node.metrics.module_functionCall.moduleName = modulename",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "node.metrics.module_functionCall.functionName = rightname",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "for key, value in pairs(functions) do\r\n\t\tif (moduleref[key] == nil) then moduleref[key] = 0 end\r\n\t\tmoduleref[key] = moduleref[key] + table.getn(value)\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 32,
    "text": "if (moduleref[key] == nil) then moduleref[key] = 0 end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "moduleref[key] = 0",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "moduleref[key] = moduleref[key] + table.getn(value)",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "local variables = {}",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "for _ ,var in pairs(scopeArray[nodeName]) do\r\n\t\t-- build name for variable (join parts into one string ( one.two.three ) (var is only a reference to node Name 'one')\r\n\t\tlocal varName = var.text\r\n\t\tif (var.parent.tag == '_PrefixExp') then\r\n\t\t\tnameNode, secondaryNodes = process_PrefixExpChildren(var.parent.data)\r\n\t\t\tfor k,v in pairs(secondaryNodes) do \t\t\t\t\r\n\t\t\t\tvarName = varName .. v.text\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\t-- split name into left.mid.right parts (left+mid = localmodulename)\r\n\t\t\tlocal leftname = var.text\r\n\t\t\ti = 1\r\n\t\t\twhile (leftname ~= name and i<#secondaryNodes + 1) do \r\n\t\t\t\tleftname = leftname .. secondaryNodes[i].text\r\n\t\t\t\ti = i + 1\r\n\t\t\tend\r\n\t\t\tlocal midname\r\n\t\t\tif (i < #secondaryNodes + 1) then \r\n\t\t\t\tmidname = secondaryNodes[i].text\r\n\t\t\tend\r\n\t\t\ti = i + 1\r\n\t\t\tlocal rightname = ''\r\n\t\t\twhile (i<#secondaryNodes + 1) do \r\n\t\t\t\trightname = rightname .. secondaryNodes[i].text\r\n\t\t\t\ti = i + 1\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tif (midname) then\r\n\t\t\t\t-- compare with local variable holding the module\r\n\t\t\t\tmidname = string.sub(midname, 2) -- get rid of the dot in .variable\r\n\t\t\t\tif (variables[midname] == nil) then variables[midname] = {} end\r\n\t\t\t\tif (variables[midname][midname..rightname] == nil) then \r\n\t\t\t\t\tvariables[midname][midname..rightname] = 1 \r\n\t\t\t\telse\r\n\t\t\t\t\tvariables[midname][midname..rightname] = variables[midname][midname..rightname] + 1\r\n\t\t\t\tend\r\n\t\t\t\tvar.metrics.module_reference = {}\r\n\t\t\t\tvar.metrics.module_reference.moduleName = modulename\r\n\t\t\t\tvar.metrics.module_reference.referenceName = midname\r\n\t\t\t\tvar.metrics.module_reference.referenceName_full = midname .. rightname\r\n\t\t\tend\r\n\t\t\t\r\n\t\tend\t\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 37,
    "text": "local varName = var.text",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "if (var.parent.tag == '_PrefixExp') then\r\n\t\t\tnameNode, secondaryNodes = process_PrefixExpChildren(var.parent.data)\r\n\t\t\tfor k,v in pairs(secondaryNodes) do \t\t\t\t\r\n\t\t\t\tvarName = varName .. v.text\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\t-- split name into left.mid.right parts (left+mid = localmodulename)\r\n\t\t\tlocal leftname = var.text\r\n\t\t\ti = 1\r\n\t\t\twhile (leftname ~= name and i<#secondaryNodes + 1) do \r\n\t\t\t\tleftname = leftname .. secondaryNodes[i].text\r\n\t\t\t\ti = i + 1\r\n\t\t\tend\r\n\t\t\tlocal midname\r\n\t\t\tif (i < #secondaryNodes + 1) then \r\n\t\t\t\tmidname = secondaryNodes[i].text\r\n\t\t\tend\r\n\t\t\ti = i + 1\r\n\t\t\tlocal rightname = ''\r\n\t\t\twhile (i<#secondaryNodes + 1) do \r\n\t\t\t\trightname = rightname .. secondaryNodes[i].text\r\n\t\t\t\ti = i + 1\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tif (midname) then\r\n\t\t\t\t-- compare with local variable holding the module\r\n\t\t\t\tmidname = string.sub(midname, 2) -- get rid of the dot in .variable\r\n\t\t\t\tif (variables[midname] == nil) then variables[midname] = {} end\r\n\t\t\t\tif (variables[midname][midname..rightname] == nil) then \r\n\t\t\t\t\tvariables[midname][midname..rightname] = 1 \r\n\t\t\t\telse\r\n\t\t\t\t\tvariables[midname][midname..rightname] = variables[midname][midname..rightname] + 1\r\n\t\t\t\tend\r\n\t\t\t\tvar.metrics.module_reference = {}\r\n\t\t\t\tvar.metrics.module_reference.moduleName = modulename\r\n\t\t\t\tvar.metrics.module_reference.referenceName = midname\r\n\t\t\t\tvar.metrics.module_reference.referenceName_full = midname .. rightname\r\n\t\t\tend\r\n\t\t\t\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "nameNode, secondaryNodes = process_PrefixExpChildren(var.parent.data)",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "for k,v in pairs(secondaryNodes) do \t\t\t\t\r\n\t\t\t\tvarName = varName .. v.text\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 41,
    "text": "varName = varName .. v.text",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "local leftname = var.text",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "i = 1",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "while (leftname ~= name and i<#secondaryNodes + 1) do \r\n\t\t\t\tleftname = leftname .. secondaryNodes[i].text\r\n\t\t\t\ti = i + 1\r\n\t\t\tend",
    "type": "statement:while"
  }, {
    "id": 45,
    "text": "leftname = leftname .. secondaryNodes[i].text",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "local midname",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "if (i < #secondaryNodes + 1) then \r\n\t\t\t\tmidname = secondaryNodes[i].text\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "midname = secondaryNodes[i].text",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "local rightname = ''",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "while (i<#secondaryNodes + 1) do \r\n\t\t\t\trightname = rightname .. secondaryNodes[i].text\r\n\t\t\t\ti = i + 1\r\n\t\t\tend",
    "type": "statement:while"
  }, {
    "id": 52,
    "text": "rightname = rightname .. secondaryNodes[i].text",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "if (midname) then\r\n\t\t\t\t-- compare with local variable holding the module\r\n\t\t\t\tmidname = string.sub(midname, 2) -- get rid of the dot in .variable\r\n\t\t\t\tif (variables[midname] == nil) then variables[midname] = {} end\r\n\t\t\t\tif (variables[midname][midname..rightname] == nil) then \r\n\t\t\t\t\tvariables[midname][midname..rightname] = 1 \r\n\t\t\t\telse\r\n\t\t\t\t\tvariables[midname][midname..rightname] = variables[midname][midname..rightname] + 1\r\n\t\t\t\tend\r\n\t\t\t\tvar.metrics.module_reference = {}\r\n\t\t\t\tvar.metrics.module_reference.moduleName = modulename\r\n\t\t\t\tvar.metrics.module_reference.referenceName = midname\r\n\t\t\t\tvar.metrics.module_reference.referenceName_full = midname .. rightname\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "midname = string.sub(midname, 2)",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "if (variables[midname] == nil) then variables[midname] = {} end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "variables[midname] = {}",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "if (variables[midname][midname..rightname] == nil) then \r\n\t\t\t\t\tvariables[midname][midname..rightname] = 1 \r\n\t\t\t\telse\r\n\t\t\t\t\tvariables[midname][midname..rightname] = variables[midname][midname..rightname] + 1\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "variables[midname][midname..rightname] = 1",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "variables[midname][midname..rightname] = variables[midname][midname..rightname] + 1",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "var.metrics.module_reference = {}",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "var.metrics.module_reference.moduleName = modulename",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "var.metrics.module_reference.referenceName = midname",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "var.metrics.module_reference.referenceName_full = midname .. rightname",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "total_moduleReferences[modulename] = variables",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "local function addItemToArray(array, name, node)\r\n\r\n\tif (array[name] == nil) then array[name] = {} end\r\n\ttable.insert(array[name], node)\r\n\t\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "if (array[name] == nil) then array[name] = {} end",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "array[name] = {}",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "table.insert(array[name], node)",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "local function merge_tables(new_table, stack1, stack2)\r\n\t\r\n\t-- get keys from both tables\r\n\t\r\n\tlocal keys = {}\r\n\t\r\n\tif (stack1 ~=  nil) then\r\n\t\tfor key, _ in pairs(stack1) do\r\n\t\t\tkeys[key] = true\r\n\t\tend\r\n\tend\r\n\t\r\n\tif (stack2 ~= nil) then\r\n\t\tfor key, _ in pairs(stack2) do\r\n\t\t\tkeys[key] = true\r\n\t\tend\r\n\tend\r\n\t\r\n\t-- go over keys and merge values\r\n\t\r\n\tfor key, _ in pairs(keys) do\r\n\t\tif (new_table[key] == nil) then new_table[key] = {} end\r\n\t\tif (new_table[key].nodes == nil) then new_table[key].nodes = {} end\r\n\t\tif (new_table[key].parents == nil) then new_table[key].parents = {} end\r\n\t\t\r\n\t\tlocal s1_next_nodes, s2_next_nodes\r\n\t\r\n\t\tif (stack1 ~= nil and stack1[key] ~= nil) then\r\n\t\t\tfor k,v in pairs(stack1[key].nodes) do\r\n\t\t\t\ttable.insert(new_table[key].nodes, v)\r\n\t\t\tend\r\n\t\t\tfor k,v in pairs(stack1[key].parents) do\r\n\t\t\t\ttable.insert(new_table[key].parents, v)\r\n\t\t\tend\r\n\t\t\ts1_next_nodes = stack1[key].next_nodes\r\n\t\tend\r\n\t\t\r\n\t\tif (stack2 ~= nil and stack2[key] ~= nil) then\r\n\t\t\tfor k,v in pairs(stack2[key].nodes) do\r\n\t\t\t\ttable.insert(new_table[key].nodes, v)\r\n\t\t\tend\r\n\t\t\tfor k,v in pairs(stack2[key].parents) do\r\n\t\t\t\ttable.insert(new_table[key].parents, v)\r\n\t\t\tend\r\n\t\t\ts2_next_nodes = stack2[key].next_nodes\r\n\t\tend\r\n\t\r\n\t\t-- create table for next_nodes - array of nodes in +1 depth\r\n\t\r\n\t\tnew_table[key].next_nodes = {}\r\n\t\r\n\t\t-- recursion\r\n\t\t\t\r\n\t\tmerge_tables(new_table[key].next_nodes, s1_next_nodes, s2_next_nodes )\r\n\t\r\n\tend\r\n\r\nend",
    "type": "function"
  }, {
    "id": 72,
    "text": "local keys = {}",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "if (stack1 ~=  nil) then\r\n\t\tfor key, _ in pairs(stack1) do\r\n\t\t\tkeys[key] = true\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "for key, _ in pairs(stack1) do\r\n\t\t\tkeys[key] = true\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 75,
    "text": "keys[key] = true",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "if (stack2 ~= nil) then\r\n\t\tfor key, _ in pairs(stack2) do\r\n\t\t\tkeys[key] = true\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "for key, _ in pairs(stack2) do\r\n\t\t\tkeys[key] = true\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 78,
    "text": "for key, _ in pairs(keys) do\r\n\t\tif (new_table[key] == nil) then new_table[key] = {} end\r\n\t\tif (new_table[key].nodes == nil) then new_table[key].nodes = {} end\r\n\t\tif (new_table[key].parents == nil) then new_table[key].parents = {} end\r\n\t\t\r\n\t\tlocal s1_next_nodes, s2_next_nodes\r\n\t\r\n\t\tif (stack1 ~= nil and stack1[key] ~= nil) then\r\n\t\t\tfor k,v in pairs(stack1[key].nodes) do\r\n\t\t\t\ttable.insert(new_table[key].nodes, v)\r\n\t\t\tend\r\n\t\t\tfor k,v in pairs(stack1[key].parents) do\r\n\t\t\t\ttable.insert(new_table[key].parents, v)\r\n\t\t\tend\r\n\t\t\ts1_next_nodes = stack1[key].next_nodes\r\n\t\tend\r\n\t\t\r\n\t\tif (stack2 ~= nil and stack2[key] ~= nil) then\r\n\t\t\tfor k,v in pairs(stack2[key].nodes) do\r\n\t\t\t\ttable.insert(new_table[key].nodes, v)\r\n\t\t\tend\r\n\t\t\tfor k,v in pairs(stack2[key].parents) do\r\n\t\t\t\ttable.insert(new_table[key].parents, v)\r\n\t\t\tend\r\n\t\t\ts2_next_nodes = stack2[key].next_nodes\r\n\t\tend\r\n\t\r\n\t\t-- create table for next_nodes - array of nodes in +1 depth\r\n\t\r\n\t\tnew_table[key].next_nodes = {}\r\n\t\r\n\t\t-- recursion\r\n\t\t\t\r\n\t\tmerge_tables(new_table[key].next_nodes, s1_next_nodes, s2_next_nodes )\r\n\t\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 79,
    "text": "if (new_table[key] == nil) then new_table[key] = {} end",
    "type": "statement:if"
  }, {
    "id": 80,
    "text": "new_table[key] = {}",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "if (new_table[key].nodes == nil) then new_table[key].nodes = {} end",
    "type": "statement:if"
  }, {
    "id": 82,
    "text": "new_table[key].nodes = {}",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "if (new_table[key].parents == nil) then new_table[key].parents = {} end",
    "type": "statement:if"
  }, {
    "id": 84,
    "text": "new_table[key].parents = {}",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "local s1_next_nodes, s2_next_nodes",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "if (stack1 ~= nil and stack1[key] ~= nil) then\r\n\t\t\tfor k,v in pairs(stack1[key].nodes) do\r\n\t\t\t\ttable.insert(new_table[key].nodes, v)\r\n\t\t\tend\r\n\t\t\tfor k,v in pairs(stack1[key].parents) do\r\n\t\t\t\ttable.insert(new_table[key].parents, v)\r\n\t\t\tend\r\n\t\t\ts1_next_nodes = stack1[key].next_nodes\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 87,
    "text": "for k,v in pairs(stack1[key].nodes) do\r\n\t\t\t\ttable.insert(new_table[key].nodes, v)\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 88,
    "text": "table.insert(new_table[key].nodes, v)",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "for k,v in pairs(stack1[key].parents) do\r\n\t\t\t\ttable.insert(new_table[key].parents, v)\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 90,
    "text": "table.insert(new_table[key].parents, v)",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "s1_next_nodes = stack1[key].next_nodes",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "if (stack2 ~= nil and stack2[key] ~= nil) then\r\n\t\t\tfor k,v in pairs(stack2[key].nodes) do\r\n\t\t\t\ttable.insert(new_table[key].nodes, v)\r\n\t\t\tend\r\n\t\t\tfor k,v in pairs(stack2[key].parents) do\r\n\t\t\t\ttable.insert(new_table[key].parents, v)\r\n\t\t\tend\r\n\t\t\ts2_next_nodes = stack2[key].next_nodes\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 93,
    "text": "for k,v in pairs(stack2[key].nodes) do\r\n\t\t\t\ttable.insert(new_table[key].nodes, v)\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 94,
    "text": "for k,v in pairs(stack2[key].parents) do\r\n\t\t\t\ttable.insert(new_table[key].parents, v)\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 95,
    "text": "s2_next_nodes = stack2[key].next_nodes",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "new_table[key].next_nodes = {}",
    "type": "statement:assign"
  }, {
    "id": 97,
    "text": "merge_tables(new_table[key].next_nodes, s1_next_nodes, s2_next_nodes )",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 99,
    "text": "local function addItemToHighlightArray(stack, name, next_nodes)\r\n\r\n\tlocal node_name = name.text\r\n\r\n\t-- require 'modulename' - is inserted with full modulename STRING ... we want to match this to the appropriate nodes with name by its first. name\r\n\tlocal index = string.find(node_name, '%.')\r\n\tif (index) then node_name = string.sub(node_name, 2, index - 1)\tend\r\n\t---\r\n\r\n\tif (stack[node_name] == nil) then stack[node_name] = {} end\r\n\tif (stack[node_name].nodes == nil) then stack[node_name].nodes = {} end\r\n\ttable.insert(stack[node_name].nodes, name)\r\n\tstack[node_name].parents = {}\r\n\t\r\n\tlocal parents = {name}\r\n\t\r\n\tif (next_nodes) then\t\r\n\t\tif (stack[node_name].next_nodes == nil) then stack[node_name].next_nodes = {} end\r\n\t\tlocal current = stack[node_name].next_nodes\r\n\t\t\t\t\r\n\t\tfor k, node in pairs(next_nodes) do\r\n\t\t\tif (current[node.text] == nil) then\tcurrent[node.text] = {}\tend\r\n\t\t\tif (current[node.text].nodes == nil) then current[node.text].nodes = {} end\r\n\t\t\tif (current[node.text].parents == nil) then current[node.text].parents = {} end\r\n\t\r\n\t\t\tfor _,parentNode in pairs(parents) do table.insert(current[node.text].parents, parentNode) end\r\n\t\t\ttable.insert(current[node.text].nodes, node)\r\n\t\t\ttable.insert(parents, node)\r\n\t\r\n\t\t\tif (current[node.text].next_nodes == nil) then current[node.text].next_nodes = {} end\r\n\t\t\tcurrent = current[node.text].next_nodes\r\n\t\tend\r\n\tend\r\n\r\nend",
    "type": "function"
  }, {
    "id": 100,
    "text": "local node_name = name.text",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "local index = string.find(node_name, '%.')",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "if (index) then node_name = string.sub(node_name, 2, index - 1)\tend",
    "type": "statement:if"
  }, {
    "id": 103,
    "text": "node_name = string.sub(node_name, 2, index - 1)",
    "type": "statement:assign"
  }, {
    "id": 104,
    "text": "if (stack[node_name] == nil) then stack[node_name] = {} end",
    "type": "statement:if"
  }, {
    "id": 105,
    "text": "stack[node_name] = {}",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "if (stack[node_name].nodes == nil) then stack[node_name].nodes = {} end",
    "type": "statement:if"
  }, {
    "id": 107,
    "text": "stack[node_name].nodes = {}",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "table.insert(stack[node_name].nodes, name)",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "stack[node_name].parents = {}",
    "type": "statement:assign"
  }, {
    "id": 110,
    "text": "local parents = {name}",
    "type": "statement:localassign"
  }, {
    "id": 111,
    "text": "if (next_nodes) then\t\r\n\t\tif (stack[node_name].next_nodes == nil) then stack[node_name].next_nodes = {} end\r\n\t\tlocal current = stack[node_name].next_nodes\r\n\t\t\t\t\r\n\t\tfor k, node in pairs(next_nodes) do\r\n\t\t\tif (current[node.text] == nil) then\tcurrent[node.text] = {}\tend\r\n\t\t\tif (current[node.text].nodes == nil) then current[node.text].nodes = {} end\r\n\t\t\tif (current[node.text].parents == nil) then current[node.text].parents = {} end\r\n\t\r\n\t\t\tfor _,parentNode in pairs(parents) do table.insert(current[node.text].parents, parentNode) end\r\n\t\t\ttable.insert(current[node.text].nodes, node)\r\n\t\t\ttable.insert(parents, node)\r\n\t\r\n\t\t\tif (current[node.text].next_nodes == nil) then current[node.text].next_nodes = {} end\r\n\t\t\tcurrent = current[node.text].next_nodes\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 112,
    "text": "if (stack[node_name].next_nodes == nil) then stack[node_name].next_nodes = {} end",
    "type": "statement:if"
  }, {
    "id": 113,
    "text": "stack[node_name].next_nodes = {}",
    "type": "statement:assign"
  }, {
    "id": 114,
    "text": "local current = stack[node_name].next_nodes",
    "type": "statement:localassign"
  }, {
    "id": 115,
    "text": "for k, node in pairs(next_nodes) do\r\n\t\t\tif (current[node.text] == nil) then\tcurrent[node.text] = {}\tend\r\n\t\t\tif (current[node.text].nodes == nil) then current[node.text].nodes = {} end\r\n\t\t\tif (current[node.text].parents == nil) then current[node.text].parents = {} end\r\n\t\r\n\t\t\tfor _,parentNode in pairs(parents) do table.insert(current[node.text].parents, parentNode) end\r\n\t\t\ttable.insert(current[node.text].nodes, node)\r\n\t\t\ttable.insert(parents, node)\r\n\t\r\n\t\t\tif (current[node.text].next_nodes == nil) then current[node.text].next_nodes = {} end\r\n\t\t\tcurrent = current[node.text].next_nodes\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 116,
    "text": "if (current[node.text] == nil) then\tcurrent[node.text] = {}\tend",
    "type": "statement:if"
  }, {
    "id": 117,
    "text": "current[node.text] = {}",
    "type": "statement:assign"
  }, {
    "id": 118,
    "text": "if (current[node.text].nodes == nil) then current[node.text].nodes = {} end",
    "type": "statement:if"
  }, {
    "id": 119,
    "text": "current[node.text].nodes = {}",
    "type": "statement:assign"
  }, {
    "id": 120,
    "text": "if (current[node.text].parents == nil) then current[node.text].parents = {} end",
    "type": "statement:if"
  }, {
    "id": 121,
    "text": "current[node.text].parents = {}",
    "type": "statement:assign"
  }, {
    "id": 122,
    "text": "for _,parentNode in pairs(parents) do table.insert(current[node.text].parents, parentNode) end",
    "type": "statement:genericfor"
  }, {
    "id": 123,
    "text": "table.insert(current[node.text].parents, parentNode)",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "table.insert(current[node.text].nodes, node)",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "table.insert(parents, node)",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "if (current[node.text].next_nodes == nil) then current[node.text].next_nodes = {} end",
    "type": "statement:if"
  }, {
    "id": 127,
    "text": "current[node.text].next_nodes = {}",
    "type": "statement:assign"
  }, {
    "id": 128,
    "text": "current = current[node.text].next_nodes",
    "type": "statement:assign"
  }, {
    "id": 129,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 130,
    "text": "local function checkAndAddFunctionDeclaration(name, expression)\r\n\tif (expression == nil) then \r\n\t\treturn nil\r\n\telse\r\n\t\tlocal fun = utils.searchForTagItem_recursive('Function', expression, 3)\t\r\n\t\tif (fun) then\r\n\t\t\tfun.name = name.text\r\n\t\t\ttable.insert(total_function_def , fun )\r\n\t\t\t\r\n\t\t\treturn fun\r\n\t\telse\r\n\t\t\treturn nil\r\n\t\tend\r\n\tend\r\n\treturn nil\t\r\nend",
    "type": "function"
  }, {
    "id": 131,
    "text": "if (expression == nil) then \r\n\t\treturn nil\r\n\telse\r\n\t\tlocal fun = utils.searchForTagItem_recursive('Function', expression, 3)\t\r\n\t\tif (fun) then\r\n\t\t\tfun.name = name.text\r\n\t\t\ttable.insert(total_function_def , fun )\r\n\t\t\t\r\n\t\t\treturn fun\r\n\t\telse\r\n\t\t\treturn nil\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 132,
    "text": "local fun = utils.searchForTagItem_recursive('Function', expression, 3)",
    "type": "statement:localassign"
  }, {
    "id": 133,
    "text": "if (fun) then\r\n\t\t\tfun.name = name.text\r\n\t\t\ttable.insert(total_function_def , fun )\r\n\t\t\t\r\n\t\t\treturn fun\r\n\t\telse\r\n\t\t\treturn nil\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 134,
    "text": "fun.name = name.text",
    "type": "statement:assign"
  }, {
    "id": 135,
    "text": "table.insert(total_function_def , fun )",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 137,
    "text": "local function newVariable(node, text, secondary_nodes, isRead)\r\n\t\t\r\n\tif (locals_stack[text]==nil) then\t\t\t\t\t\t\t-- if variable was not defined before - it belongs to the 'remotes' variables\r\n\t\taddItemToArray(remotes_stack, text, node)\r\n\t\taddItemToHighlightArray(highlight_remote, node, secondary_nodes)\r\n\t\r\n\t\tif (isRead) then -- variable is read from\r\n\t\t\tnode.isRead = true\r\n\t\telse -- write\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\tnode.isWritten = true\r\n\t\tend\r\n\telse\r\n\t\ttable.insert(locals_stack[text], node)\t\t\t\t\t-- the variable is local - table was defined before\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-- insert it into the table (table holds froup of nodes corresponding to the variable with the same text)\r\n\t\taddItemToHighlightArray(highlight_local, node, secondary_nodes)\t\r\n\tend\r\n\t\r\n\tif (moduleMetrics) then\r\n\t\ttable.insert(moduleMetrics.variables, node)\r\n\tend\r\n\t\r\nend",
    "type": "function"
  }, {
    "id": 138,
    "text": "if (locals_stack[text]==nil) then\t\t\t\t\t\t\t-- if variable was not defined before - it belongs to the 'remotes' variables\r\n\t\taddItemToArray(remotes_stack, text, node)\r\n\t\taddItemToHighlightArray(highlight_remote, node, secondary_nodes)\r\n\t\r\n\t\tif (isRead) then -- variable is read from\r\n\t\t\tnode.isRead = true\r\n\t\telse -- write\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\tnode.isWritten = true\r\n\t\tend\r\n\telse\r\n\t\ttable.insert(locals_stack[text], node)\t\t\t\t\t-- the variable is local - table was defined before\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-- insert it into the table (table holds froup of nodes corresponding to the variable with the same text)\r\n\t\taddItemToHighlightArray(highlight_local, node, secondary_nodes)\t\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 139,
    "text": "addItemToArray(remotes_stack, text, node)",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "addItemToHighlightArray(highlight_remote, node, secondary_nodes)",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "if (isRead) then -- variable is read from\r\n\t\t\tnode.isRead = true\r\n\t\telse -- write\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\tnode.isWritten = true\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 142,
    "text": "node.isRead = true",
    "type": "statement:assign"
  }, {
    "id": 143,
    "text": "node.isWritten = true",
    "type": "statement:assign"
  }, {
    "id": 144,
    "text": "table.insert(locals_stack[text], node)",
    "type": "statement:functioncall"
  }, {
    "id": 145,
    "text": "addItemToHighlightArray(highlight_local, node, secondary_nodes)",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "if (moduleMetrics) then\r\n\t\ttable.insert(moduleMetrics.variables, node)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 147,
    "text": "table.insert(moduleMetrics.variables, node)",
    "type": "statement:functioncall"
  }, {
    "id": 148,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 149,
    "text": "local function processAssign(node, isLocal)\r\n\r\n\tlocal results = {}\r\n\t\r\n\tlocal nameList = utils.getNamesFromNameList(node.nameList)\r\n\t\r\n\tlocal expList = {}\r\n\tif (node.expList) then expList = utils.getExpsFromExpsList(node.expList) end\r\n\t\r\n\tfor k,v in pairs(nameList) do\r\n\t\t\r\n\t\tlocal functionNode = checkAndAddFunctionDeclaration(v,expList[k])\r\n\t\tlocal secondary_nodes\r\n\t\t\r\n\t\tif (v.tag == 'Var') then -- if normal assign (not local) find the 'Var' node instead of a Name node\r\n\t\t\tv, secondary_nodes = process_PrefixExpChildren(v.data[1].data)\t\t-- v.data[1].data is table of _PrefixExp's children\r\n\t\tend\r\n\t\t\r\n\t\tv.functionNode = functionNode\r\n\t\tif functionNode then functionNode.assignNode = v end\r\n\t\t\r\n\t\t-- check right side of assign for function call\r\n\t\t-- test for 'require' function call\r\n\t\tlocal getPrefixExp = utils.searchForTagItem_recursive('_PrefixExp', expList[k], 3)\r\n\t\tif (getPrefixExp) then\r\n\t\t\tlocal name, results, isFunctionCall, args = process_PrefixExpChildren(getPrefixExp.data)\r\n\t\t\tif (isFunctionCall) then\r\n\t\t\t\tif (name.text == 'require') then \r\n\t\r\n\t\t\t\t\tlocal modulename = utils.searchForTagItem_recursive('STRING', args, 5)\r\n\t\t\t\t\tif (modulename) then\r\n\t\t\t\t\t\tlocal nodeName = string.sub(modulename.text, 2, string.len(modulename.text) -1) -- delete '' and \"\" from beginning and end\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tlocal index = string.find(nodeName, '%.')\r\n\t\t\t\t\t\tif (index) then nodeName = string.sub(nodeName, 0, index - 1) end\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tnewVariable(modulename, nodeName, nil, true) -- set callbacks for node ... evaluate_require_execs is called with node as argument when 'end of scope' happens\r\n\t\t\t\t\t\tnode_callbacks[v] = {}\r\n\t\t\t\t\t\tnode_callbacks[v].sec_nodes = secondary_nodes\r\n\t\t\t\t\t\tnode_callbacks[v].fun = evaluate_require_execs\r\n\t\t\t\t\t\tnode_callbacks[v].call_data = {args}\r\n\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\t\t\r\n\t\t-- create table to be returned\r\n\t\tlocal str = v.text\r\n\t\ttable.insert(results, {str, v, secondary_nodes})\r\n\t\t\r\n\tend\t\r\n\treturn results\r\nend",
    "type": "function"
  }, {
    "id": 150,
    "text": "local results = {}",
    "type": "statement:localassign"
  }, {
    "id": 151,
    "text": "local nameList = utils.getNamesFromNameList(node.nameList)",
    "type": "statement:localassign"
  }, {
    "id": 152,
    "text": "local expList = {}",
    "type": "statement:localassign"
  }, {
    "id": 153,
    "text": "if (node.expList) then expList = utils.getExpsFromExpsList(node.expList) end",
    "type": "statement:if"
  }, {
    "id": 154,
    "text": "expList = utils.getExpsFromExpsList(node.expList)",
    "type": "statement:assign"
  }, {
    "id": 155,
    "text": "for k,v in pairs(nameList) do\r\n\t\t\r\n\t\tlocal functionNode = checkAndAddFunctionDeclaration(v,expList[k])\r\n\t\tlocal secondary_nodes\r\n\t\t\r\n\t\tif (v.tag == 'Var') then -- if normal assign (not local) find the 'Var' node instead of a Name node\r\n\t\t\tv, secondary_nodes = process_PrefixExpChildren(v.data[1].data)\t\t-- v.data[1].data is table of _PrefixExp's children\r\n\t\tend\r\n\t\t\r\n\t\tv.functionNode = functionNode\r\n\t\tif functionNode then functionNode.assignNode = v end\r\n\t\t\r\n\t\t-- check right side of assign for function call\r\n\t\t-- test for 'require' function call\r\n\t\tlocal getPrefixExp = utils.searchForTagItem_recursive('_PrefixExp', expList[k], 3)\r\n\t\tif (getPrefixExp) then\r\n\t\t\tlocal name, results, isFunctionCall, args = process_PrefixExpChildren(getPrefixExp.data)\r\n\t\t\tif (isFunctionCall) then\r\n\t\t\t\tif (name.text == 'require') then \r\n\t\r\n\t\t\t\t\tlocal modulename = utils.searchForTagItem_recursive('STRING', args, 5)\r\n\t\t\t\t\tif (modulename) then\r\n\t\t\t\t\t\tlocal nodeName = string.sub(modulename.text, 2, string.len(modulename.text) -1) -- delete '' and \"\" from beginning and end\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tlocal index = string.find(nodeName, '%.')\r\n\t\t\t\t\t\tif (index) then nodeName = string.sub(nodeName, 0, index - 1) end\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tnewVariable(modulename, nodeName, nil, true) -- set callbacks for node ... evaluate_require_execs is called with node as argument when 'end of scope' happens\r\n\t\t\t\t\t\tnode_callbacks[v] = {}\r\n\t\t\t\t\t\tnode_callbacks[v].sec_nodes = secondary_nodes\r\n\t\t\t\t\t\tnode_callbacks[v].fun = evaluate_require_execs\r\n\t\t\t\t\t\tnode_callbacks[v].call_data = {args}\r\n\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\t\t\r\n\t\t-- create table to be returned\r\n\t\tlocal str = v.text\r\n\t\ttable.insert(results, {str, v, secondary_nodes})\r\n\t\t\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 156,
    "text": "local functionNode = checkAndAddFunctionDeclaration(v,expList[k])",
    "type": "statement:localassign"
  }, {
    "id": 157,
    "text": "local secondary_nodes",
    "type": "statement:localassign"
  }, {
    "id": 158,
    "text": "if (v.tag == 'Var') then -- if normal assign (not local) find the 'Var' node instead of a Name node\r\n\t\t\tv, secondary_nodes = process_PrefixExpChildren(v.data[1].data)\t\t-- v.data[1].data is table of _PrefixExp's children\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 159,
    "text": "v, secondary_nodes = process_PrefixExpChildren(v.data[1].data)",
    "type": "statement:assign"
  }, {
    "id": 160,
    "text": "v.functionNode = functionNode",
    "type": "statement:assign"
  }, {
    "id": 161,
    "text": "if functionNode then functionNode.assignNode = v end",
    "type": "statement:if"
  }, {
    "id": 162,
    "text": "functionNode.assignNode = v",
    "type": "statement:assign"
  }, {
    "id": 163,
    "text": "local getPrefixExp = utils.searchForTagItem_recursive('_PrefixExp', expList[k], 3)",
    "type": "statement:localassign"
  }, {
    "id": 164,
    "text": "if (getPrefixExp) then\r\n\t\t\tlocal name, results, isFunctionCall, args = process_PrefixExpChildren(getPrefixExp.data)\r\n\t\t\tif (isFunctionCall) then\r\n\t\t\t\tif (name.text == 'require') then \r\n\t\r\n\t\t\t\t\tlocal modulename = utils.searchForTagItem_recursive('STRING', args, 5)\r\n\t\t\t\t\tif (modulename) then\r\n\t\t\t\t\t\tlocal nodeName = string.sub(modulename.text, 2, string.len(modulename.text) -1) -- delete '' and \"\" from beginning and end\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tlocal index = string.find(nodeName, '%.')\r\n\t\t\t\t\t\tif (index) then nodeName = string.sub(nodeName, 0, index - 1) end\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tnewVariable(modulename, nodeName, nil, true) -- set callbacks for node ... evaluate_require_execs is called with node as argument when 'end of scope' happens\r\n\t\t\t\t\t\tnode_callbacks[v] = {}\r\n\t\t\t\t\t\tnode_callbacks[v].sec_nodes = secondary_nodes\r\n\t\t\t\t\t\tnode_callbacks[v].fun = evaluate_require_execs\r\n\t\t\t\t\t\tnode_callbacks[v].call_data = {args}\r\n\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 165,
    "text": "local name, results, isFunctionCall, args = process_PrefixExpChildren(getPrefixExp.data)",
    "type": "statement:localassign"
  }, {
    "id": 166,
    "text": "if (isFunctionCall) then\r\n\t\t\t\tif (name.text == 'require') then \r\n\t\r\n\t\t\t\t\tlocal modulename = utils.searchForTagItem_recursive('STRING', args, 5)\r\n\t\t\t\t\tif (modulename) then\r\n\t\t\t\t\t\tlocal nodeName = string.sub(modulename.text, 2, string.len(modulename.text) -1) -- delete '' and \"\" from beginning and end\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tlocal index = string.find(nodeName, '%.')\r\n\t\t\t\t\t\tif (index) then nodeName = string.sub(nodeName, 0, index - 1) end\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tnewVariable(modulename, nodeName, nil, true) -- set callbacks for node ... evaluate_require_execs is called with node as argument when 'end of scope' happens\r\n\t\t\t\t\t\tnode_callbacks[v] = {}\r\n\t\t\t\t\t\tnode_callbacks[v].sec_nodes = secondary_nodes\r\n\t\t\t\t\t\tnode_callbacks[v].fun = evaluate_require_execs\r\n\t\t\t\t\t\tnode_callbacks[v].call_data = {args}\r\n\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 167,
    "text": "if (name.text == 'require') then \r\n\t\r\n\t\t\t\t\tlocal modulename = utils.searchForTagItem_recursive('STRING', args, 5)\r\n\t\t\t\t\tif (modulename) then\r\n\t\t\t\t\t\tlocal nodeName = string.sub(modulename.text, 2, string.len(modulename.text) -1) -- delete '' and \"\" from beginning and end\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tlocal index = string.find(nodeName, '%.')\r\n\t\t\t\t\t\tif (index) then nodeName = string.sub(nodeName, 0, index - 1) end\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tnewVariable(modulename, nodeName, nil, true) -- set callbacks for node ... evaluate_require_execs is called with node as argument when 'end of scope' happens\r\n\t\t\t\t\t\tnode_callbacks[v] = {}\r\n\t\t\t\t\t\tnode_callbacks[v].sec_nodes = secondary_nodes\r\n\t\t\t\t\t\tnode_callbacks[v].fun = evaluate_require_execs\r\n\t\t\t\t\t\tnode_callbacks[v].call_data = {args}\r\n\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 168,
    "text": "local modulename = utils.searchForTagItem_recursive('STRING', args, 5)",
    "type": "statement:localassign"
  }, {
    "id": 169,
    "text": "if (modulename) then\r\n\t\t\t\t\t\tlocal nodeName = string.sub(modulename.text, 2, string.len(modulename.text) -1) -- delete '' and \"\" from beginning and end\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tlocal index = string.find(nodeName, '%.')\r\n\t\t\t\t\t\tif (index) then nodeName = string.sub(nodeName, 0, index - 1) end\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tnewVariable(modulename, nodeName, nil, true) -- set callbacks for node ... evaluate_require_execs is called with node as argument when 'end of scope' happens\r\n\t\t\t\t\t\tnode_callbacks[v] = {}\r\n\t\t\t\t\t\tnode_callbacks[v].sec_nodes = secondary_nodes\r\n\t\t\t\t\t\tnode_callbacks[v].fun = evaluate_require_execs\r\n\t\t\t\t\t\tnode_callbacks[v].call_data = {args}\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 170,
    "text": "local nodeName = string.sub(modulename.text, 2, string.len(modulename.text) -1)",
    "type": "statement:localassign"
  }, {
    "id": 171,
    "text": "local index = string.find(nodeName, '%.')",
    "type": "statement:localassign"
  }, {
    "id": 172,
    "text": "if (index) then nodeName = string.sub(nodeName, 0, index - 1) end",
    "type": "statement:if"
  }, {
    "id": 173,
    "text": "nodeName = string.sub(nodeName, 0, index - 1)",
    "type": "statement:assign"
  }, {
    "id": 174,
    "text": "newVariable(modulename, nodeName, nil, true)",
    "type": "statement:functioncall"
  }, {
    "id": 175,
    "text": "node_callbacks[v] = {}",
    "type": "statement:assign"
  }, {
    "id": 176,
    "text": "node_callbacks[v].sec_nodes = secondary_nodes",
    "type": "statement:assign"
  }, {
    "id": 177,
    "text": "node_callbacks[v].fun = evaluate_require_execs",
    "type": "statement:assign"
  }, {
    "id": 178,
    "text": "node_callbacks[v].call_data = {args}",
    "type": "statement:assign"
  }, {
    "id": 179,
    "text": "local str = v.text",
    "type": "statement:localassign"
  }, {
    "id": 180,
    "text": "table.insert(results, {str, v, secondary_nodes})",
    "type": "statement:functioncall"
  }, {
    "id": 181,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 182,
    "text": "local function processFunction(node)\r\n\t-- get Block and ParList nodes for function\r\n\tlocal block = utils.searchForTagItem_recursive('Block', node, 2) \r\n\tlocal parlist = utils.searchForTagItem_recursive('ParList', node, 2) \r\n\tnode.metrics.blockdata = block.metrics.blockdata\r\n\t\r\n\t-- treat function as an Assign operation - the name of a function is left side of assign operation\r\n\tif (node.name) then -- funkcie function()... check needed because function() without names are processed together in with Assign operations (later)\r\n\t\tlocal nameBlock, secondaryNames = utils.searchForTagItem('Name', node.data)\r\n\t\t\r\n\t\tif (nameBlock == nil) then\r\n\t\t\tlocal funcname = utils.searchForTagItem('FuncName', node.data)\r\n\t\t\tnameBlock, secondaryNames = process_PrefixExpChildren(funcname.data)\r\n\t\tend\r\n\t\t\r\n\t\tnameBlock.functionNode = node\r\n\t\t\r\n\t\t-- correct setting of isLocal or isGlobal value for function\r\n\t\t\r\n\t\tif (node.tag == 'LocalFunction') then\r\n\t\t\tif (locals_stack[nameBlock.text] ~= nil) then\r\n\t\t\t\ttable.insert(all_locals_stack, {nameBlock.text,locals_stack[nameBlock.text]})\r\n\t\t\t\tendScopeOfVariable(locals_stack, nameBlock.text)\r\n\t\t\t\thighLightVariable(highlight_local, nameBlock.text)\r\n\t\t\tend\r\n\t\t\taddItemToArray(locals_stack, nameBlock.text, nameBlock)\r\n\t\t\taddItemToHighlightArray(highlight_local, nameBlock, secondaryNames)\r\n\t\t\tif (moduleMetrics) then\r\n\t\t\t\ttable.insert(moduleMetrics.variables, nameBlock)\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tnewVariable(nameBlock, nameBlock.text, secondaryNames, false)\r\n\t\tend\r\n\t\tnameNode = nameBlock\t\t\r\n\tend\r\n\t\r\n\t\r\n\t-- body of a function - set function arguments as local variables , and do 'end of scope' (highlight them)\r\n\tif (block ~= nil and parlist ~= nil) then\r\n\t\t-- get table of variables from nameList\r\n\t\t\t\t\t\t\r\n\t\tlocal k,v, names\r\n\t\tlocal nameList = utils.searchForTagItem('NameList', parlist.data)\r\n\t\tif (nameList) then\r\n\t\t\tnames = utils.getNamesFromNameList(nameList)\r\n\t\tend\r\n\t\t\t\t\t\t\t\r\n\t\t-- get table containing remote variables for function (from its block)\r\n\t\tlocal remotes = block.metrics.blockdata.remotes\t\t\r\n\t\tlocal highlight_remotes_block = block.metrics.blockdata.highlight_remote\r\n\t\tif (names ~= nil ) then\r\n\t\t\t-- if remote variable is an argument of a function - call endScopeOfVariable functino that takes care of them (delete them from arrays and highlights them)\r\n\t\t\t-- this variable is a temporary holder\r\n\t\t\tlocal holder = {}\r\n\t\t\t\r\n\t\t\tfor k,v in pairs(names) do\r\n\t\t\t\taddItemToArray(remotes, v.text, v)\r\n\t\t\t\taddItemToHighlightArray(highlight_remotes_block, v, nil)\r\n\t\t\t\t\r\n\t\t\t\t-- number and throw aray\r\n\t\t\t\t\r\n\t\t\t\tholder[v.text] = remotes[v.text]\r\n\t\t\t\t\r\n\t\t\t\tendScopeOfVariable(remotes, v.text)\r\n\t\t\t\thighLightVariable(highlight_remotes_block, v.text)\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tdoRecursion(block.parent)\r\n\t\t\t\r\n\t\t\t-- remotes set earlier are actualy local variables for the block !\r\n\t\t\t-- dane remotes su v skutocnosti lokalne premenne pre dany block !\r\n\t\t\t\r\n\t\t\t-- only for that one block !\r\n\t\t\t\r\n\t\t\tfor k,v in pairs(holder) do\r\n\t\t\t\ttable.insert(block.metrics.blockdata.locals, { k, v })\r\n\t\t\t\ttable.insert(block.metrics.blockdata.locals_total, {k,v} )\r\n\t\t\t\tif (moduleMetrics) then\r\n\t\t\t\t\tfor _, node in pairs(v) do\r\n\t\t\t\t\t\ttable.insert(moduleMetrics.variables, v)\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\t\r\n\t\telse\r\n\t\t\tdoRecursion(block.parent)\r\n\t\tend\r\n\telse\t\t\r\n\t\tdoRecursion(block.parent)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 183,
    "text": "local block = utils.searchForTagItem_recursive('Block', node, 2)",
    "type": "statement:localassign"
  }, {
    "id": 184,
    "text": "local parlist = utils.searchForTagItem_recursive('ParList', node, 2)",
    "type": "statement:localassign"
  }, {
    "id": 185,
    "text": "node.metrics.blockdata = block.metrics.blockdata",
    "type": "statement:assign"
  }, {
    "id": 186,
    "text": "if (node.name) then -- funkcie function()... check needed because function() without names are processed together in with Assign operations (later)\r\n\t\tlocal nameBlock, secondaryNames = utils.searchForTagItem('Name', node.data)\r\n\t\t\r\n\t\tif (nameBlock == nil) then\r\n\t\t\tlocal funcname = utils.searchForTagItem('FuncName', node.data)\r\n\t\t\tnameBlock, secondaryNames = process_PrefixExpChildren(funcname.data)\r\n\t\tend\r\n\t\t\r\n\t\tnameBlock.functionNode = node\r\n\t\t\r\n\t\t-- correct setting of isLocal or isGlobal value for function\r\n\t\t\r\n\t\tif (node.tag == 'LocalFunction') then\r\n\t\t\tif (locals_stack[nameBlock.text] ~= nil) then\r\n\t\t\t\ttable.insert(all_locals_stack, {nameBlock.text,locals_stack[nameBlock.text]})\r\n\t\t\t\tendScopeOfVariable(locals_stack, nameBlock.text)\r\n\t\t\t\thighLightVariable(highlight_local, nameBlock.text)\r\n\t\t\tend\r\n\t\t\taddItemToArray(locals_stack, nameBlock.text, nameBlock)\r\n\t\t\taddItemToHighlightArray(highlight_local, nameBlock, secondaryNames)\r\n\t\t\tif (moduleMetrics) then\r\n\t\t\t\ttable.insert(moduleMetrics.variables, nameBlock)\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tnewVariable(nameBlock, nameBlock.text, secondaryNames, false)\r\n\t\tend\r\n\t\tnameNode = nameBlock\t\t\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 187,
    "text": "local nameBlock, secondaryNames = utils.searchForTagItem('Name', node.data)",
    "type": "statement:localassign"
  }, {
    "id": 188,
    "text": "if (nameBlock == nil) then\r\n\t\t\tlocal funcname = utils.searchForTagItem('FuncName', node.data)\r\n\t\t\tnameBlock, secondaryNames = process_PrefixExpChildren(funcname.data)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 189,
    "text": "local funcname = utils.searchForTagItem('FuncName', node.data)",
    "type": "statement:localassign"
  }, {
    "id": 190,
    "text": "nameBlock, secondaryNames = process_PrefixExpChildren(funcname.data)",
    "type": "statement:assign"
  }, {
    "id": 191,
    "text": "nameBlock.functionNode = node",
    "type": "statement:assign"
  }, {
    "id": 192,
    "text": "if (node.tag == 'LocalFunction') then\r\n\t\t\tif (locals_stack[nameBlock.text] ~= nil) then\r\n\t\t\t\ttable.insert(all_locals_stack, {nameBlock.text,locals_stack[nameBlock.text]})\r\n\t\t\t\tendScopeOfVariable(locals_stack, nameBlock.text)\r\n\t\t\t\thighLightVariable(highlight_local, nameBlock.text)\r\n\t\t\tend\r\n\t\t\taddItemToArray(locals_stack, nameBlock.text, nameBlock)\r\n\t\t\taddItemToHighlightArray(highlight_local, nameBlock, secondaryNames)\r\n\t\t\tif (moduleMetrics) then\r\n\t\t\t\ttable.insert(moduleMetrics.variables, nameBlock)\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tnewVariable(nameBlock, nameBlock.text, secondaryNames, false)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 193,
    "text": "if (locals_stack[nameBlock.text] ~= nil) then\r\n\t\t\t\ttable.insert(all_locals_stack, {nameBlock.text,locals_stack[nameBlock.text]})\r\n\t\t\t\tendScopeOfVariable(locals_stack, nameBlock.text)\r\n\t\t\t\thighLightVariable(highlight_local, nameBlock.text)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 194,
    "text": "table.insert(all_locals_stack, {nameBlock.text,locals_stack[nameBlock.text]})",
    "type": "statement:functioncall"
  }, {
    "id": 195,
    "text": "endScopeOfVariable(locals_stack, nameBlock.text)",
    "type": "statement:functioncall"
  }, {
    "id": 196,
    "text": "highLightVariable(highlight_local, nameBlock.text)",
    "type": "statement:functioncall"
  }, {
    "id": 197,
    "text": "addItemToArray(locals_stack, nameBlock.text, nameBlock)",
    "type": "statement:functioncall"
  }, {
    "id": 198,
    "text": "addItemToHighlightArray(highlight_local, nameBlock, secondaryNames)",
    "type": "statement:functioncall"
  }, {
    "id": 199,
    "text": "if (moduleMetrics) then\r\n\t\t\t\ttable.insert(moduleMetrics.variables, nameBlock)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 200,
    "text": "table.insert(moduleMetrics.variables, nameBlock)",
    "type": "statement:functioncall"
  }, {
    "id": 201,
    "text": "newVariable(nameBlock, nameBlock.text, secondaryNames, false)",
    "type": "statement:functioncall"
  }, {
    "id": 202,
    "text": "nameNode = nameBlock",
    "type": "statement:assign"
  }, {
    "id": 203,
    "text": "if (block ~= nil and parlist ~= nil) then\r\n\t\t-- get table of variables from nameList\r\n\t\t\t\t\t\t\r\n\t\tlocal k,v, names\r\n\t\tlocal nameList = utils.searchForTagItem('NameList', parlist.data)\r\n\t\tif (nameList) then\r\n\t\t\tnames = utils.getNamesFromNameList(nameList)\r\n\t\tend\r\n\t\t\t\t\t\t\t\r\n\t\t-- get table containing remote variables for function (from its block)\r\n\t\tlocal remotes = block.metrics.blockdata.remotes\t\t\r\n\t\tlocal highlight_remotes_block = block.metrics.blockdata.highlight_remote\r\n\t\tif (names ~= nil ) then\r\n\t\t\t-- if remote variable is an argument of a function - call endScopeOfVariable functino that takes care of them (delete them from arrays and highlights them)\r\n\t\t\t-- this variable is a temporary holder\r\n\t\t\tlocal holder = {}\r\n\t\t\t\r\n\t\t\tfor k,v in pairs(names) do\r\n\t\t\t\taddItemToArray(remotes, v.text, v)\r\n\t\t\t\taddItemToHighlightArray(highlight_remotes_block, v, nil)\r\n\t\t\t\t\r\n\t\t\t\t-- number and throw aray\r\n\t\t\t\t\r\n\t\t\t\tholder[v.text] = remotes[v.text]\r\n\t\t\t\t\r\n\t\t\t\tendScopeOfVariable(remotes, v.text)\r\n\t\t\t\thighLightVariable(highlight_remotes_block, v.text)\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tdoRecursion(block.parent)\r\n\t\t\t\r\n\t\t\t-- remotes set earlier are actualy local variables for the block !\r\n\t\t\t-- dane remotes su v skutocnosti lokalne premenne pre dany block !\r\n\t\t\t\r\n\t\t\t-- only for that one block !\r\n\t\t\t\r\n\t\t\tfor k,v in pairs(holder) do\r\n\t\t\t\ttable.insert(block.metrics.blockdata.locals, { k, v })\r\n\t\t\t\ttable.insert(block.metrics.blockdata.locals_total, {k,v} )\r\n\t\t\t\tif (moduleMetrics) then\r\n\t\t\t\t\tfor _, node in pairs(v) do\r\n\t\t\t\t\t\ttable.insert(moduleMetrics.variables, v)\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\t\r\n\t\telse\r\n\t\t\tdoRecursion(block.parent)\r\n\t\tend\r\n\telse\t\t\r\n\t\tdoRecursion(block.parent)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 204,
    "text": "local k,v, names",
    "type": "statement:localassign"
  }, {
    "id": 205,
    "text": "local nameList = utils.searchForTagItem('NameList', parlist.data)",
    "type": "statement:localassign"
  }, {
    "id": 206,
    "text": "if (nameList) then\r\n\t\t\tnames = utils.getNamesFromNameList(nameList)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 207,
    "text": "names = utils.getNamesFromNameList(nameList)",
    "type": "statement:assign"
  }, {
    "id": 208,
    "text": "local remotes = block.metrics.blockdata.remotes",
    "type": "statement:localassign"
  }, {
    "id": 209,
    "text": "local highlight_remotes_block = block.metrics.blockdata.highlight_remote",
    "type": "statement:localassign"
  }, {
    "id": 210,
    "text": "if (names ~= nil ) then\r\n\t\t\t-- if remote variable is an argument of a function - call endScopeOfVariable functino that takes care of them (delete them from arrays and highlights them)\r\n\t\t\t-- this variable is a temporary holder\r\n\t\t\tlocal holder = {}\r\n\t\t\t\r\n\t\t\tfor k,v in pairs(names) do\r\n\t\t\t\taddItemToArray(remotes, v.text, v)\r\n\t\t\t\taddItemToHighlightArray(highlight_remotes_block, v, nil)\r\n\t\t\t\t\r\n\t\t\t\t-- number and throw aray\r\n\t\t\t\t\r\n\t\t\t\tholder[v.text] = remotes[v.text]\r\n\t\t\t\t\r\n\t\t\t\tendScopeOfVariable(remotes, v.text)\r\n\t\t\t\thighLightVariable(highlight_remotes_block, v.text)\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tdoRecursion(block.parent)\r\n\t\t\t\r\n\t\t\t-- remotes set earlier are actualy local variables for the block !\r\n\t\t\t-- dane remotes su v skutocnosti lokalne premenne pre dany block !\r\n\t\t\t\r\n\t\t\t-- only for that one block !\r\n\t\t\t\r\n\t\t\tfor k,v in pairs(holder) do\r\n\t\t\t\ttable.insert(block.metrics.blockdata.locals, { k, v })\r\n\t\t\t\ttable.insert(block.metrics.blockdata.locals_total, {k,v} )\r\n\t\t\t\tif (moduleMetrics) then\r\n\t\t\t\t\tfor _, node in pairs(v) do\r\n\t\t\t\t\t\ttable.insert(moduleMetrics.variables, v)\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\t\r\n\t\telse\r\n\t\t\tdoRecursion(block.parent)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 211,
    "text": "local holder = {}",
    "type": "statement:localassign"
  }, {
    "id": 212,
    "text": "for k,v in pairs(names) do\r\n\t\t\t\taddItemToArray(remotes, v.text, v)\r\n\t\t\t\taddItemToHighlightArray(highlight_remotes_block, v, nil)\r\n\t\t\t\t\r\n\t\t\t\t-- number and throw aray\r\n\t\t\t\t\r\n\t\t\t\tholder[v.text] = remotes[v.text]\r\n\t\t\t\t\r\n\t\t\t\tendScopeOfVariable(remotes, v.text)\r\n\t\t\t\thighLightVariable(highlight_remotes_block, v.text)\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 213,
    "text": "addItemToArray(remotes, v.text, v)",
    "type": "statement:functioncall"
  }, {
    "id": 214,
    "text": "addItemToHighlightArray(highlight_remotes_block, v, nil)",
    "type": "statement:functioncall"
  }, {
    "id": 215,
    "text": "holder[v.text] = remotes[v.text]",
    "type": "statement:assign"
  }, {
    "id": 216,
    "text": "endScopeOfVariable(remotes, v.text)",
    "type": "statement:functioncall"
  }, {
    "id": 217,
    "text": "highLightVariable(highlight_remotes_block, v.text)",
    "type": "statement:functioncall"
  }, {
    "id": 218,
    "text": "doRecursion(block.parent)",
    "type": "statement:functioncall"
  }, {
    "id": 219,
    "text": "for k,v in pairs(holder) do\r\n\t\t\t\ttable.insert(block.metrics.blockdata.locals, { k, v })\r\n\t\t\t\ttable.insert(block.metrics.blockdata.locals_total, {k,v} )\r\n\t\t\t\tif (moduleMetrics) then\r\n\t\t\t\t\tfor _, node in pairs(v) do\r\n\t\t\t\t\t\ttable.insert(moduleMetrics.variables, v)\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 220,
    "text": "table.insert(block.metrics.blockdata.locals, { k, v })",
    "type": "statement:functioncall"
  }, {
    "id": 221,
    "text": "table.insert(block.metrics.blockdata.locals_total, {k,v} )",
    "type": "statement:functioncall"
  }, {
    "id": 222,
    "text": "if (moduleMetrics) then\r\n\t\t\t\t\tfor _, node in pairs(v) do\r\n\t\t\t\t\t\ttable.insert(moduleMetrics.variables, v)\r\n\t\t\t\t\tend\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 223,
    "text": "for _, node in pairs(v) do\r\n\t\t\t\t\t\ttable.insert(moduleMetrics.variables, v)\r\n\t\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 224,
    "text": "table.insert(moduleMetrics.variables, v)",
    "type": "statement:functioncall"
  }, {
    "id": 225,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 226,
    "text": "function process_PrefixExpChildren(children)\r\n\t\r\n\tlocal results = {}\r\n\tlocal name = nil\r\n\tlocal isFunctionCall = nil\r\n\tlocal args = nil\r\n\t\r\n\tfor k, child in pairs(children) do\r\n\r\n\t\tif (child.tag == 'Name') then\r\n\t\t\tname = child\r\n\t\telseif (child.tag == '_PrefixExpDot') then\r\n\t\t\ttable.insert(results, child)\r\n\t\telseif (child.tag == 'IGNORED') then\r\n\t\telseif (child.tag == '_PrefixExpSquare') then\r\n\t\t\ttable.insert(results, child)\r\n\t\telseif (child.tag == '_PrefixExpColon') then\r\n\t\t\ttable.insert(results, child.data[3])\r\n\t\t\tbreak\r\n\t\telseif (child.tag == '_PrefixExpArgs') then\r\n\t\t\targs = child\r\n\t\t\tisFunctionCall = true\r\n\t\t\tbreak\r\n\t\telse\r\n\t\t\tbreak\r\n\t\tend\r\n\tend\r\n\treturn name, results, isFunctionCall, args\r\nend",
    "type": "function"
  }, {
    "id": 227,
    "text": "local name = nil",
    "type": "statement:localassign"
  }, {
    "id": 228,
    "text": "local isFunctionCall = nil",
    "type": "statement:localassign"
  }, {
    "id": 229,
    "text": "local args = nil",
    "type": "statement:localassign"
  }, {
    "id": 230,
    "text": "for k, child in pairs(children) do\r\n\r\n\t\tif (child.tag == 'Name') then\r\n\t\t\tname = child\r\n\t\telseif (child.tag == '_PrefixExpDot') then\r\n\t\t\ttable.insert(results, child)\r\n\t\telseif (child.tag == 'IGNORED') then\r\n\t\telseif (child.tag == '_PrefixExpSquare') then\r\n\t\t\ttable.insert(results, child)\r\n\t\telseif (child.tag == '_PrefixExpColon') then\r\n\t\t\ttable.insert(results, child.data[3])\r\n\t\t\tbreak\r\n\t\telseif (child.tag == '_PrefixExpArgs') then\r\n\t\t\targs = child\r\n\t\t\tisFunctionCall = true\r\n\t\t\tbreak\r\n\t\telse\r\n\t\t\tbreak\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 231,
    "text": "if (child.tag == 'Name') then\r\n\t\t\tname = child\r\n\t\telseif (child.tag == '_PrefixExpDot') then\r\n\t\t\ttable.insert(results, child)\r\n\t\telseif (child.tag == 'IGNORED') then\r\n\t\telseif (child.tag == '_PrefixExpSquare') then\r\n\t\t\ttable.insert(results, child)\r\n\t\telseif (child.tag == '_PrefixExpColon') then\r\n\t\t\ttable.insert(results, child.data[3])\r\n\t\t\tbreak\r\n\t\telseif (child.tag == '_PrefixExpArgs') then\r\n\t\t\targs = child\r\n\t\t\tisFunctionCall = true\r\n\t\t\tbreak\r\n\t\telse\r\n\t\t\tbreak\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 232,
    "text": "name = child",
    "type": "statement:assign"
  }, {
    "id": 233,
    "text": "table.insert(results, child)",
    "type": "statement:functioncall"
  }, {
    "id": 234,
    "text": "table.insert(results, child.data[3])",
    "type": "statement:functioncall"
  }, {
    "id": 235,
    "text": "args = child",
    "type": "statement:assign"
  }, {
    "id": 236,
    "text": "isFunctionCall = true",
    "type": "statement:assign"
  }, {
    "id": 237,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 238,
    "text": "local function process_PrefixExp(node)\r\n\tlocal names = {}\r\n\t\r\n\tlocal name, secondary_names = process_PrefixExpChildren(node.data)\r\n\t\r\n\tlocal args = utils.searchForTagItem('_PrefixExpArgs', node.data)\r\n\tif (args) then \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-- IS A FUNCTION CALL\r\n\t\tif (name) then\r\n\t\t\tlocal text = name.text\r\n\t\t\t\r\n\t\t\t-- check if this call is 'module' call - remember the name of this module\r\n\t\t\tif (text == 'module') then \r\n\t\t\t\t-- is package.seeall ?\r\n\t\t\t\t\r\n\t\t\t\tlocal explist = utils.searchForTagItem('ExpList', args.data[1].data)\r\n\t\t\t\tif (explist) then\r\n\t\t\t\t\tlocal exps = utils.searchForTagArray('Exp', explist.data)\r\n\t\t\t\t\tlocal packageSeall = exps[#exps]\r\n\t\t\t\t\r\n\t\t\t\t\tif (not (packageSeall and packageSeall.text == 'package.seeall')) then  \t\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\t\t-- end of scope for all global variables, and highlight them -- TODO whatif package.seeall ?\r\n\t\t\t\t\t\tfor k,v in pairs(remotes_stack) do\r\n\t\t\t\t\t\t\tendScopeOfVariable(remotes_stack, k, true)\t\r\n\t\t\t\t\t\tend\t\t\t\t\t\r\n\t\t\t\t\t\tfor k, v in pairs(highlight_remote) do\r\n\t\t\t\t\t\t\thighLightVariable(highlight_remote, k)\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\r\n\t\t\t\t-- begin collection of module variables\r\n\t\t\t\t\r\n\t\t\t\tlocal modulename = utils.searchForTagItem_recursive('STRING', node, 6)\r\n\t\t\t\r\n\t\t\t\tif (modulename) then \r\n\t\t\t\t\tmodulename = string.sub(modulename.text, 2, string.len(modulename.text) -1 )\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tmoduleDefinitions[node] = {}\r\n\t\t\t\t\tmoduleDefinitions[node].moduleName = modulename\r\n\t\t\t\t\tmoduleDefinitions[node].references = {\r\n\t\t\t\t\t\tvariables = {},\r\n\t\t\t\t\t\texecs = {}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmoduleMetrics = moduleDefinitions[node].references\t\t\t\t\t\r\n\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\t\r\n\t\t\telseif (text == 'require') then -- this is a require call\r\n\t\t\t\t-- make sure it is not a part of an assign\r\n\t\t\t\tlocal helper = node.parent.parent.parent.parent\r\n\t\t\t\tif (helper.tag ~= 'LocalAssign' and helper.tag ~= 'Assign') then \r\n\t\t\t\t\tlocal modulename = utils.searchForTagItem_recursive('STRING', args, 5)\r\n\t\t\t\t\tif (modulename) then\r\n\t\t\t\t\t\t-- require function defines local variable with arguments name\r\n\t\t\t\t\t\tlocal nodeName = string.sub(modulename.text, 2, string.len(modulename.text) -1) -- delete '' and \"\" from beginning and end\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tlocal index = string.find(nodeName, '%.')\r\n\t\t\t\t\t\tif (index) then nodeName = string.sub(nodeName, 0, index - 1) end\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tnewVariable(modulename, nodeName, nil, true)\r\n\t\t\t\t\t\tif (name.text == 'require') then -- set callback arguments for node ... called when 'end of scope' is run - function evaluate_require_execs is called with the node and arguments\r\n\t\t\t\t\t\t\tnode_callbacks[modulename] = {}\r\n\t\t\t\t\t\t\tnode_callbacks[modulename].sec_nodes = nil\r\n\t\t\t\t\t\t\tnode_callbacks[modulename].fun = evaluate_require_execs\r\n\t\t\t\t\t\t\tnode_callbacks[modulename].call_data = {nil}\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\t-- build function name from secondary nodes\r\n\t\t\tfor k,v in pairs(secondary_names) do text = text .. v.text end\r\n\t\t\r\n\t\t\taddItemToArray(total_execs_stack, text, node)\r\n\t\t\tif (moduleMetrics) then\r\n\t\t\t\taddItemToArray(moduleMetrics.execs, text, node)\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tif (highlight_local[name.text] == nil) then\r\n\t\t\t\taddItemToHighlightArray(highlight_remote, name, secondary_names)\r\n\t\t\telse\r\n\t\t\t\taddItemToHighlightArray(highlight_local, name, secondary_names)\r\n\t\t\tend\r\n\t\tend\r\n\telse\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-- PREMENNA\r\n\t\tif (name ~= nil) then\r\n\t\t\ttable.insert(names, {name.text, name, secondary_names})\r\n\t\tend\r\n\tend\r\n\t\r\n\treturn names\r\nend",
    "type": "function"
  }, {
    "id": 239,
    "text": "local names = {}",
    "type": "statement:localassign"
  }, {
    "id": 240,
    "text": "local name, secondary_names = process_PrefixExpChildren(node.data)",
    "type": "statement:localassign"
  }, {
    "id": 241,
    "text": "local args = utils.searchForTagItem('_PrefixExpArgs', node.data)",
    "type": "statement:localassign"
  }, {
    "id": 242,
    "text": "if (args) then \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-- IS A FUNCTION CALL\r\n\t\tif (name) then\r\n\t\t\tlocal text = name.text\r\n\t\t\t\r\n\t\t\t-- check if this call is 'module' call - remember the name of this module\r\n\t\t\tif (text == 'module') then \r\n\t\t\t\t-- is package.seeall ?\r\n\t\t\t\t\r\n\t\t\t\tlocal explist = utils.searchForTagItem('ExpList', args.data[1].data)\r\n\t\t\t\tif (explist) then\r\n\t\t\t\t\tlocal exps = utils.searchForTagArray('Exp', explist.data)\r\n\t\t\t\t\tlocal packageSeall = exps[#exps]\r\n\t\t\t\t\r\n\t\t\t\t\tif (not (packageSeall and packageSeall.text == 'package.seeall')) then  \t\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\t\t-- end of scope for all global variables, and highlight them -- TODO whatif package.seeall ?\r\n\t\t\t\t\t\tfor k,v in pairs(remotes_stack) do\r\n\t\t\t\t\t\t\tendScopeOfVariable(remotes_stack, k, true)\t\r\n\t\t\t\t\t\tend\t\t\t\t\t\r\n\t\t\t\t\t\tfor k, v in pairs(highlight_remote) do\r\n\t\t\t\t\t\t\thighLightVariable(highlight_remote, k)\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\r\n\t\t\t\t-- begin collection of module variables\r\n\t\t\t\t\r\n\t\t\t\tlocal modulename = utils.searchForTagItem_recursive('STRING', node, 6)\r\n\t\t\t\r\n\t\t\t\tif (modulename) then \r\n\t\t\t\t\tmodulename = string.sub(modulename.text, 2, string.len(modulename.text) -1 )\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tmoduleDefinitions[node] = {}\r\n\t\t\t\t\tmoduleDefinitions[node].moduleName = modulename\r\n\t\t\t\t\tmoduleDefinitions[node].references = {\r\n\t\t\t\t\t\tvariables = {},\r\n\t\t\t\t\t\texecs = {}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmoduleMetrics = moduleDefinitions[node].references\t\t\t\t\t\r\n\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\t\r\n\t\t\telseif (text == 'require') then -- this is a require call\r\n\t\t\t\t-- make sure it is not a part of an assign\r\n\t\t\t\tlocal helper = node.parent.parent.parent.parent\r\n\t\t\t\tif (helper.tag ~= 'LocalAssign' and helper.tag ~= 'Assign') then \r\n\t\t\t\t\tlocal modulename = utils.searchForTagItem_recursive('STRING', args, 5)\r\n\t\t\t\t\tif (modulename) then\r\n\t\t\t\t\t\t-- require function defines local variable with arguments name\r\n\t\t\t\t\t\tlocal nodeName = string.sub(modulename.text, 2, string.len(modulename.text) -1) -- delete '' and \"\" from beginning and end\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tlocal index = string.find(nodeName, '%.')\r\n\t\t\t\t\t\tif (index) then nodeName = string.sub(nodeName, 0, index - 1) end\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tnewVariable(modulename, nodeName, nil, true)\r\n\t\t\t\t\t\tif (name.text == 'require') then -- set callback arguments for node ... called when 'end of scope' is run - function evaluate_require_execs is called with the node and arguments\r\n\t\t\t\t\t\t\tnode_callbacks[modulename] = {}\r\n\t\t\t\t\t\t\tnode_callbacks[modulename].sec_nodes = nil\r\n\t\t\t\t\t\t\tnode_callbacks[modulename].fun = evaluate_require_execs\r\n\t\t\t\t\t\t\tnode_callbacks[modulename].call_data = {nil}\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\t-- build function name from secondary nodes\r\n\t\t\tfor k,v in pairs(secondary_names) do text = text .. v.text end\r\n\t\t\r\n\t\t\taddItemToArray(total_execs_stack, text, node)\r\n\t\t\tif (moduleMetrics) then\r\n\t\t\t\taddItemToArray(moduleMetrics.execs, text, node)\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tif (highlight_local[name.text] == nil) then\r\n\t\t\t\taddItemToHighlightArray(highlight_remote, name, secondary_names)\r\n\t\t\telse\r\n\t\t\t\taddItemToHighlightArray(highlight_local, name, secondary_names)\r\n\t\t\tend\r\n\t\tend\r\n\telse\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-- PREMENNA\r\n\t\tif (name ~= nil) then\r\n\t\t\ttable.insert(names, {name.text, name, secondary_names})\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 243,
    "text": "if (name) then\r\n\t\t\tlocal text = name.text\r\n\t\t\t\r\n\t\t\t-- check if this call is 'module' call - remember the name of this module\r\n\t\t\tif (text == 'module') then \r\n\t\t\t\t-- is package.seeall ?\r\n\t\t\t\t\r\n\t\t\t\tlocal explist = utils.searchForTagItem('ExpList', args.data[1].data)\r\n\t\t\t\tif (explist) then\r\n\t\t\t\t\tlocal exps = utils.searchForTagArray('Exp', explist.data)\r\n\t\t\t\t\tlocal packageSeall = exps[#exps]\r\n\t\t\t\t\r\n\t\t\t\t\tif (not (packageSeall and packageSeall.text == 'package.seeall')) then  \t\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\t\t-- end of scope for all global variables, and highlight them -- TODO whatif package.seeall ?\r\n\t\t\t\t\t\tfor k,v in pairs(remotes_stack) do\r\n\t\t\t\t\t\t\tendScopeOfVariable(remotes_stack, k, true)\t\r\n\t\t\t\t\t\tend\t\t\t\t\t\r\n\t\t\t\t\t\tfor k, v in pairs(highlight_remote) do\r\n\t\t\t\t\t\t\thighLightVariable(highlight_remote, k)\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\r\n\t\t\t\t-- begin collection of module variables\r\n\t\t\t\t\r\n\t\t\t\tlocal modulename = utils.searchForTagItem_recursive('STRING', node, 6)\r\n\t\t\t\r\n\t\t\t\tif (modulename) then \r\n\t\t\t\t\tmodulename = string.sub(modulename.text, 2, string.len(modulename.text) -1 )\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tmoduleDefinitions[node] = {}\r\n\t\t\t\t\tmoduleDefinitions[node].moduleName = modulename\r\n\t\t\t\t\tmoduleDefinitions[node].references = {\r\n\t\t\t\t\t\tvariables = {},\r\n\t\t\t\t\t\texecs = {}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmoduleMetrics = moduleDefinitions[node].references\t\t\t\t\t\r\n\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\t\r\n\t\t\telseif (text == 'require') then -- this is a require call\r\n\t\t\t\t-- make sure it is not a part of an assign\r\n\t\t\t\tlocal helper = node.parent.parent.parent.parent\r\n\t\t\t\tif (helper.tag ~= 'LocalAssign' and helper.tag ~= 'Assign') then \r\n\t\t\t\t\tlocal modulename = utils.searchForTagItem_recursive('STRING', args, 5)\r\n\t\t\t\t\tif (modulename) then\r\n\t\t\t\t\t\t-- require function defines local variable with arguments name\r\n\t\t\t\t\t\tlocal nodeName = string.sub(modulename.text, 2, string.len(modulename.text) -1) -- delete '' and \"\" from beginning and end\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tlocal index = string.find(nodeName, '%.')\r\n\t\t\t\t\t\tif (index) then nodeName = string.sub(nodeName, 0, index - 1) end\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tnewVariable(modulename, nodeName, nil, true)\r\n\t\t\t\t\t\tif (name.text == 'require') then -- set callback arguments for node ... called when 'end of scope' is run - function evaluate_require_execs is called with the node and arguments\r\n\t\t\t\t\t\t\tnode_callbacks[modulename] = {}\r\n\t\t\t\t\t\t\tnode_callbacks[modulename].sec_nodes = nil\r\n\t\t\t\t\t\t\tnode_callbacks[modulename].fun = evaluate_require_execs\r\n\t\t\t\t\t\t\tnode_callbacks[modulename].call_data = {nil}\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\t-- build function name from secondary nodes\r\n\t\t\tfor k,v in pairs(secondary_names) do text = text .. v.text end\r\n\t\t\r\n\t\t\taddItemToArray(total_execs_stack, text, node)\r\n\t\t\tif (moduleMetrics) then\r\n\t\t\t\taddItemToArray(moduleMetrics.execs, text, node)\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tif (highlight_local[name.text] == nil) then\r\n\t\t\t\taddItemToHighlightArray(highlight_remote, name, secondary_names)\r\n\t\t\telse\r\n\t\t\t\taddItemToHighlightArray(highlight_local, name, secondary_names)\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 244,
    "text": "local text = name.text",
    "type": "statement:localassign"
  }, {
    "id": 245,
    "text": "if (text == 'module') then \r\n\t\t\t\t-- is package.seeall ?\r\n\t\t\t\t\r\n\t\t\t\tlocal explist = utils.searchForTagItem('ExpList', args.data[1].data)\r\n\t\t\t\tif (explist) then\r\n\t\t\t\t\tlocal exps = utils.searchForTagArray('Exp', explist.data)\r\n\t\t\t\t\tlocal packageSeall = exps[#exps]\r\n\t\t\t\t\r\n\t\t\t\t\tif (not (packageSeall and packageSeall.text == 'package.seeall')) then  \t\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\t\t-- end of scope for all global variables, and highlight them -- TODO whatif package.seeall ?\r\n\t\t\t\t\t\tfor k,v in pairs(remotes_stack) do\r\n\t\t\t\t\t\t\tendScopeOfVariable(remotes_stack, k, true)\t\r\n\t\t\t\t\t\tend\t\t\t\t\t\r\n\t\t\t\t\t\tfor k, v in pairs(highlight_remote) do\r\n\t\t\t\t\t\t\thighLightVariable(highlight_remote, k)\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\r\n\t\t\t\t-- begin collection of module variables\r\n\t\t\t\t\r\n\t\t\t\tlocal modulename = utils.searchForTagItem_recursive('STRING', node, 6)\r\n\t\t\t\r\n\t\t\t\tif (modulename) then \r\n\t\t\t\t\tmodulename = string.sub(modulename.text, 2, string.len(modulename.text) -1 )\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tmoduleDefinitions[node] = {}\r\n\t\t\t\t\tmoduleDefinitions[node].moduleName = modulename\r\n\t\t\t\t\tmoduleDefinitions[node].references = {\r\n\t\t\t\t\t\tvariables = {},\r\n\t\t\t\t\t\texecs = {}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmoduleMetrics = moduleDefinitions[node].references\t\t\t\t\t\r\n\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\t\r\n\t\t\telseif (text == 'require') then -- this is a require call\r\n\t\t\t\t-- make sure it is not a part of an assign\r\n\t\t\t\tlocal helper = node.parent.parent.parent.parent\r\n\t\t\t\tif (helper.tag ~= 'LocalAssign' and helper.tag ~= 'Assign') then \r\n\t\t\t\t\tlocal modulename = utils.searchForTagItem_recursive('STRING', args, 5)\r\n\t\t\t\t\tif (modulename) then\r\n\t\t\t\t\t\t-- require function defines local variable with arguments name\r\n\t\t\t\t\t\tlocal nodeName = string.sub(modulename.text, 2, string.len(modulename.text) -1) -- delete '' and \"\" from beginning and end\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tlocal index = string.find(nodeName, '%.')\r\n\t\t\t\t\t\tif (index) then nodeName = string.sub(nodeName, 0, index - 1) end\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tnewVariable(modulename, nodeName, nil, true)\r\n\t\t\t\t\t\tif (name.text == 'require') then -- set callback arguments for node ... called when 'end of scope' is run - function evaluate_require_execs is called with the node and arguments\r\n\t\t\t\t\t\t\tnode_callbacks[modulename] = {}\r\n\t\t\t\t\t\t\tnode_callbacks[modulename].sec_nodes = nil\r\n\t\t\t\t\t\t\tnode_callbacks[modulename].fun = evaluate_require_execs\r\n\t\t\t\t\t\t\tnode_callbacks[modulename].call_data = {nil}\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 246,
    "text": "local explist = utils.searchForTagItem('ExpList', args.data[1].data)",
    "type": "statement:localassign"
  }, {
    "id": 247,
    "text": "if (explist) then\r\n\t\t\t\t\tlocal exps = utils.searchForTagArray('Exp', explist.data)\r\n\t\t\t\t\tlocal packageSeall = exps[#exps]\r\n\t\t\t\t\r\n\t\t\t\t\tif (not (packageSeall and packageSeall.text == 'package.seeall')) then  \t\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\t\t-- end of scope for all global variables, and highlight them -- TODO whatif package.seeall ?\r\n\t\t\t\t\t\tfor k,v in pairs(remotes_stack) do\r\n\t\t\t\t\t\t\tendScopeOfVariable(remotes_stack, k, true)\t\r\n\t\t\t\t\t\tend\t\t\t\t\t\r\n\t\t\t\t\t\tfor k, v in pairs(highlight_remote) do\r\n\t\t\t\t\t\t\thighLightVariable(highlight_remote, k)\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\t\tend\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 248,
    "text": "local exps = utils.searchForTagArray('Exp', explist.data)",
    "type": "statement:localassign"
  }, {
    "id": 249,
    "text": "local packageSeall = exps[#exps]",
    "type": "statement:localassign"
  }, {
    "id": 250,
    "text": "if (not (packageSeall and packageSeall.text == 'package.seeall')) then  \t\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\t\t-- end of scope for all global variables, and highlight them -- TODO whatif package.seeall ?\r\n\t\t\t\t\t\tfor k,v in pairs(remotes_stack) do\r\n\t\t\t\t\t\t\tendScopeOfVariable(remotes_stack, k, true)\t\r\n\t\t\t\t\t\tend\t\t\t\t\t\r\n\t\t\t\t\t\tfor k, v in pairs(highlight_remote) do\r\n\t\t\t\t\t\t\thighLightVariable(highlight_remote, k)\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 251,
    "text": "for k,v in pairs(remotes_stack) do\r\n\t\t\t\t\t\t\tendScopeOfVariable(remotes_stack, k, true)\t\r\n\t\t\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 252,
    "text": "endScopeOfVariable(remotes_stack, k, true)",
    "type": "statement:functioncall"
  }, {
    "id": 253,
    "text": "for k, v in pairs(highlight_remote) do\r\n\t\t\t\t\t\t\thighLightVariable(highlight_remote, k)\r\n\t\t\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 254,
    "text": "highLightVariable(highlight_remote, k)",
    "type": "statement:functioncall"
  }, {
    "id": 255,
    "text": "local modulename = utils.searchForTagItem_recursive('STRING', node, 6)",
    "type": "statement:localassign"
  }, {
    "id": 256,
    "text": "if (modulename) then \r\n\t\t\t\t\tmodulename = string.sub(modulename.text, 2, string.len(modulename.text) -1 )\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tmoduleDefinitions[node] = {}\r\n\t\t\t\t\tmoduleDefinitions[node].moduleName = modulename\r\n\t\t\t\t\tmoduleDefinitions[node].references = {\r\n\t\t\t\t\t\tvariables = {},\r\n\t\t\t\t\t\texecs = {}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmoduleMetrics = moduleDefinitions[node].references\t\t\t\t\t\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 257,
    "text": "modulename = string.sub(modulename.text, 2, string.len(modulename.text) -1 )",
    "type": "statement:assign"
  }, {
    "id": 258,
    "text": "moduleDefinitions[node] = {}",
    "type": "statement:assign"
  }, {
    "id": 259,
    "text": "moduleDefinitions[node].moduleName = modulename",
    "type": "statement:assign"
  }, {
    "id": 260,
    "text": "moduleDefinitions[node].references = {\r\n\t\t\t\t\t\tvariables = {},\r\n\t\t\t\t\t\texecs = {}\r\n\t\t\t\t\t}",
    "type": "statement:assign"
  }, {
    "id": 261,
    "text": "moduleMetrics = moduleDefinitions[node].references",
    "type": "statement:assign"
  }, {
    "id": 262,
    "text": "local helper = node.parent.parent.parent.parent",
    "type": "statement:localassign"
  }, {
    "id": 263,
    "text": "if (helper.tag ~= 'LocalAssign' and helper.tag ~= 'Assign') then \r\n\t\t\t\t\tlocal modulename = utils.searchForTagItem_recursive('STRING', args, 5)\r\n\t\t\t\t\tif (modulename) then\r\n\t\t\t\t\t\t-- require function defines local variable with arguments name\r\n\t\t\t\t\t\tlocal nodeName = string.sub(modulename.text, 2, string.len(modulename.text) -1) -- delete '' and \"\" from beginning and end\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tlocal index = string.find(nodeName, '%.')\r\n\t\t\t\t\t\tif (index) then nodeName = string.sub(nodeName, 0, index - 1) end\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tnewVariable(modulename, nodeName, nil, true)\r\n\t\t\t\t\t\tif (name.text == 'require') then -- set callback arguments for node ... called when 'end of scope' is run - function evaluate_require_execs is called with the node and arguments\r\n\t\t\t\t\t\t\tnode_callbacks[modulename] = {}\r\n\t\t\t\t\t\t\tnode_callbacks[modulename].sec_nodes = nil\r\n\t\t\t\t\t\t\tnode_callbacks[modulename].fun = evaluate_require_execs\r\n\t\t\t\t\t\t\tnode_callbacks[modulename].call_data = {nil}\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 264,
    "text": "if (modulename) then\r\n\t\t\t\t\t\t-- require function defines local variable with arguments name\r\n\t\t\t\t\t\tlocal nodeName = string.sub(modulename.text, 2, string.len(modulename.text) -1) -- delete '' and \"\" from beginning and end\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tlocal index = string.find(nodeName, '%.')\r\n\t\t\t\t\t\tif (index) then nodeName = string.sub(nodeName, 0, index - 1) end\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tnewVariable(modulename, nodeName, nil, true)\r\n\t\t\t\t\t\tif (name.text == 'require') then -- set callback arguments for node ... called when 'end of scope' is run - function evaluate_require_execs is called with the node and arguments\r\n\t\t\t\t\t\t\tnode_callbacks[modulename] = {}\r\n\t\t\t\t\t\t\tnode_callbacks[modulename].sec_nodes = nil\r\n\t\t\t\t\t\t\tnode_callbacks[modulename].fun = evaluate_require_execs\r\n\t\t\t\t\t\t\tnode_callbacks[modulename].call_data = {nil}\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 265,
    "text": "if (name.text == 'require') then -- set callback arguments for node ... called when 'end of scope' is run - function evaluate_require_execs is called with the node and arguments\r\n\t\t\t\t\t\t\tnode_callbacks[modulename] = {}\r\n\t\t\t\t\t\t\tnode_callbacks[modulename].sec_nodes = nil\r\n\t\t\t\t\t\t\tnode_callbacks[modulename].fun = evaluate_require_execs\r\n\t\t\t\t\t\t\tnode_callbacks[modulename].call_data = {nil}\r\n\t\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 266,
    "text": "node_callbacks[modulename] = {}",
    "type": "statement:assign"
  }, {
    "id": 267,
    "text": "node_callbacks[modulename].sec_nodes = nil",
    "type": "statement:assign"
  }, {
    "id": 268,
    "text": "node_callbacks[modulename].fun = evaluate_require_execs",
    "type": "statement:assign"
  }, {
    "id": 269,
    "text": "node_callbacks[modulename].call_data = {nil}",
    "type": "statement:assign"
  }, {
    "id": 270,
    "text": "for k,v in pairs(secondary_names) do text = text .. v.text end",
    "type": "statement:genericfor"
  }, {
    "id": 271,
    "text": "text = text .. v.text",
    "type": "statement:assign"
  }, {
    "id": 272,
    "text": "addItemToArray(total_execs_stack, text, node)",
    "type": "statement:functioncall"
  }, {
    "id": 273,
    "text": "if (moduleMetrics) then\r\n\t\t\t\taddItemToArray(moduleMetrics.execs, text, node)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 274,
    "text": "addItemToArray(moduleMetrics.execs, text, node)",
    "type": "statement:functioncall"
  }, {
    "id": 275,
    "text": "if (highlight_local[name.text] == nil) then\r\n\t\t\t\taddItemToHighlightArray(highlight_remote, name, secondary_names)\r\n\t\t\telse\r\n\t\t\t\taddItemToHighlightArray(highlight_local, name, secondary_names)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 276,
    "text": "addItemToHighlightArray(highlight_remote, name, secondary_names)",
    "type": "statement:functioncall"
  }, {
    "id": 277,
    "text": "addItemToHighlightArray(highlight_local, name, secondary_names)",
    "type": "statement:functioncall"
  }, {
    "id": 278,
    "text": "if (name ~= nil) then\r\n\t\t\ttable.insert(names, {name.text, name, secondary_names})\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 279,
    "text": "table.insert(names, {name.text, name, secondary_names})",
    "type": "statement:functioncall"
  }, {
    "id": 280,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 281,
    "text": "function endScopeOfVariable(stack, text, setGlobal)\r\n\tfor k,v in pairs(stack[text]) do\r\n\t\tif (v.functionNode) then\r\n\t\t\tv.functionNode.isGlobal = setGlobal or false\r\n\t\tend\r\n\t\tif (node_callbacks[v] ~= nil) then node_callbacks[v].fun(v, node_callbacks[v].secondary_nodes, text, stack, node_callbacks[v].call_data) end\r\n\tend\r\n\tstack[text] = nil\r\nend",
    "type": "function"
  }, {
    "id": 282,
    "text": "for k,v in pairs(stack[text]) do\r\n\t\tif (v.functionNode) then\r\n\t\t\tv.functionNode.isGlobal = setGlobal or false\r\n\t\tend\r\n\t\tif (node_callbacks[v] ~= nil) then node_callbacks[v].fun(v, node_callbacks[v].secondary_nodes, text, stack, node_callbacks[v].call_data) end\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 283,
    "text": "if (v.functionNode) then\r\n\t\t\tv.functionNode.isGlobal = setGlobal or false\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 284,
    "text": "v.functionNode.isGlobal = setGlobal or false",
    "type": "statement:assign"
  }, {
    "id": 285,
    "text": "if (node_callbacks[v] ~= nil) then node_callbacks[v].fun(v, node_callbacks[v].secondary_nodes, text, stack, node_callbacks[v].call_data) end",
    "type": "statement:if"
  }, {
    "id": 286,
    "text": "node_callbacks[v].fun(v, node_callbacks[v].secondary_nodes, text, stack, node_callbacks[v].call_data)",
    "type": "statement:functioncall"
  }, {
    "id": 287,
    "text": "stack[text] = nil",
    "type": "statement:assign"
  }, {
    "id": 288,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 289,
    "text": "function highLightVariable(stack, text)\r\n\tif (stack == nil) then return {} end\r\n\t\t\t\r\n\tif (text) then \r\n\t\thighLightVariable(stack[text].next_nodes, nil)\r\n\t\t\r\n\t\tlocal id = id_generator()\r\n\t\tfor k,v in pairs(stack[text].nodes) do\r\n\t\t\tif (v.tag == '_PrefixExpSquare') then v = v.data[1] end\r\n\t\t\tv.varid = id\r\n\t\tend\r\n\t\tfor k,v in pairs(stack[text].parents) do\r\n\t\t\tif (v.secid == nil) then v.secid = {} end\r\n\t\t\ttable.insert(v.secid, id)\r\n\t\tend\r\n\t\tstack[text] = nil\r\n\telse\r\n\t\tfor k,v in pairs(stack) do\r\n\t\t\thighLightVariable(v.next_nodes, nil)\r\n\t\t\t\r\n\t\t\tlocal id = id_generator()\r\n\t\t\tfor k,v in pairs(v.nodes) do\r\n\t\t\t\tif (v.tag == '_PrefixExpSquare') then v = v.data[1] end -- if in square brackets then highlight only left bracket [ ...  inside can be a variable\r\n\t\t\t\tv.varid = id\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tfor k,v in pairs(v.parents) do\r\n\t\t\t\tif (v.secid == nil) then v.secid = {} end\r\n\t\t\t\ttable.insert(v.secid, id)\r\n\t\t\tend\r\n\t\t\tstack[k] = nil\r\n\t\tend\r\n\tend\t\r\nend",
    "type": "function"
  }, {
    "id": 290,
    "text": "if (stack == nil) then return {} end",
    "type": "statement:if"
  }, {
    "id": 291,
    "text": "if (text) then \r\n\t\thighLightVariable(stack[text].next_nodes, nil)\r\n\t\t\r\n\t\tlocal id = id_generator()\r\n\t\tfor k,v in pairs(stack[text].nodes) do\r\n\t\t\tif (v.tag == '_PrefixExpSquare') then v = v.data[1] end\r\n\t\t\tv.varid = id\r\n\t\tend\r\n\t\tfor k,v in pairs(stack[text].parents) do\r\n\t\t\tif (v.secid == nil) then v.secid = {} end\r\n\t\t\ttable.insert(v.secid, id)\r\n\t\tend\r\n\t\tstack[text] = nil\r\n\telse\r\n\t\tfor k,v in pairs(stack) do\r\n\t\t\thighLightVariable(v.next_nodes, nil)\r\n\t\t\t\r\n\t\t\tlocal id = id_generator()\r\n\t\t\tfor k,v in pairs(v.nodes) do\r\n\t\t\t\tif (v.tag == '_PrefixExpSquare') then v = v.data[1] end -- if in square brackets then highlight only left bracket [ ...  inside can be a variable\r\n\t\t\t\tv.varid = id\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tfor k,v in pairs(v.parents) do\r\n\t\t\t\tif (v.secid == nil) then v.secid = {} end\r\n\t\t\t\ttable.insert(v.secid, id)\r\n\t\t\tend\r\n\t\t\tstack[k] = nil\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 292,
    "text": "highLightVariable(stack[text].next_nodes, nil)",
    "type": "statement:functioncall"
  }, {
    "id": 293,
    "text": "local id = id_generator()",
    "type": "statement:localassign"
  }, {
    "id": 294,
    "text": "for k,v in pairs(stack[text].nodes) do\r\n\t\t\tif (v.tag == '_PrefixExpSquare') then v = v.data[1] end\r\n\t\t\tv.varid = id\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 295,
    "text": "if (v.tag == '_PrefixExpSquare') then v = v.data[1] end",
    "type": "statement:if"
  }, {
    "id": 296,
    "text": "v = v.data[1]",
    "type": "statement:assign"
  }, {
    "id": 297,
    "text": "v.varid = id",
    "type": "statement:assign"
  }, {
    "id": 298,
    "text": "for k,v in pairs(stack[text].parents) do\r\n\t\t\tif (v.secid == nil) then v.secid = {} end\r\n\t\t\ttable.insert(v.secid, id)\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 299,
    "text": "if (v.secid == nil) then v.secid = {} end",
    "type": "statement:if"
  }, {
    "id": 300,
    "text": "v.secid = {}",
    "type": "statement:assign"
  }, {
    "id": 301,
    "text": "table.insert(v.secid, id)",
    "type": "statement:functioncall"
  }, {
    "id": 302,
    "text": "for k,v in pairs(stack) do\r\n\t\t\thighLightVariable(v.next_nodes, nil)\r\n\t\t\t\r\n\t\t\tlocal id = id_generator()\r\n\t\t\tfor k,v in pairs(v.nodes) do\r\n\t\t\t\tif (v.tag == '_PrefixExpSquare') then v = v.data[1] end -- if in square brackets then highlight only left bracket [ ...  inside can be a variable\r\n\t\t\t\tv.varid = id\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tfor k,v in pairs(v.parents) do\r\n\t\t\t\tif (v.secid == nil) then v.secid = {} end\r\n\t\t\t\ttable.insert(v.secid, id)\r\n\t\t\tend\r\n\t\t\tstack[k] = nil\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 303,
    "text": "highLightVariable(v.next_nodes, nil)",
    "type": "statement:functioncall"
  }, {
    "id": 304,
    "text": "for k,v in pairs(v.nodes) do\r\n\t\t\t\tif (v.tag == '_PrefixExpSquare') then v = v.data[1] end -- if in square brackets then highlight only left bracket [ ...  inside can be a variable\r\n\t\t\t\tv.varid = id\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 305,
    "text": "for k,v in pairs(v.parents) do\r\n\t\t\t\tif (v.secid == nil) then v.secid = {} end\r\n\t\t\t\ttable.insert(v.secid, id)\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 306,
    "text": "stack[k] = nil",
    "type": "statement:assign"
  }, {
    "id": 307,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 308,
    "text": "function doRecursion(node)\r\n\r\n\t-- go recursively over each node in tree\r\n\t-- for each node call its function defined in actions table\r\n\t-- if function is not defined - call function ELSE defined in actions table\r\n\r\n\tlocal k,v\r\n\tfor k,v in pairs(node.data) do\r\n\t\tlocal tag = v.tag\t\t\r\n\t\tif (type(actions[tag])=='function') then\r\n\t\t\tactions[tag](v)\r\n\t\telse\r\n\t\t\tactions.ELSE(v)\r\n\t\tend\r\n\tend\r\n\treturn\r\nend",
    "type": "function"
  }, {
    "id": 309,
    "text": "local k,v",
    "type": "statement:localassign"
  }, {
    "id": 310,
    "text": "for k,v in pairs(node.data) do\r\n\t\tlocal tag = v.tag\t\t\r\n\t\tif (type(actions[tag])=='function') then\r\n\t\t\tactions[tag](v)\r\n\t\telse\r\n\t\t\tactions.ELSE(v)\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 311,
    "text": "local tag = v.tag",
    "type": "statement:localassign"
  }, {
    "id": 312,
    "text": "if (type(actions[tag])=='function') then\r\n\t\t\tactions[tag](v)\r\n\t\telse\r\n\t\t\tactions.ELSE(v)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 313,
    "text": "actions[tag](v)",
    "type": "statement:functioncall"
  }, {
    "id": 314,
    "text": "actions.ELSE(v)",
    "type": "statement:functioncall"
  }, {
    "id": 315,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 316,
    "text": "local function getModuleDependency(references)\r\n\t\r\n\tlocal moduleCalls = {}\r\n\r\n\tfor name, execs in pairs(references.execs) do\r\n\t\tlocal name = nil\r\n\t\tlocal fname = nil\r\n\t\tfor _, exec in pairs(execs) do\r\n\t\t\tif (exec.metrics.module_functionCall) then \r\n\t\t\t\tname = exec.metrics.module_functionCall.moduleName\r\n\t\t\t\tfname = exec.metrics.module_functionCall.functionName\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\tend\r\n\t\tif (name) then \r\n\t\t\tif not moduleCalls[name] then moduleCalls[name] = {} end\r\n\t\t\tmoduleCalls[name][fname] = #execs\r\n\t\tend\r\n\tend\r\n\t\r\n\tlocal moduleReferences = {}\r\n\t\r\n\tfor _, node in pairs(references.variables) do\r\n\t\tif (node.metrics and node.metrics.module_reference) then\r\n\t\t\tlocal name = node.metrics.module_reference.moduleName\r\n\t\t\tlocal refname = node.metrics.module_reference.referenceName\r\n\t\t\tlocal refname_full = node.metrics.module_reference.referenceName_full\r\n\t\t\t\r\n\t\t\tif not moduleReferences[name] then moduleReferences[name] = {} end\r\n\t\t\tif not moduleReferences[name][refname] then moduleReferences[name][refname] = {} end\r\n\t\t\t\r\n\t\t\tif not moduleReferences[name][refname][refname_full] then \r\n\t\t\t\tmoduleReferences[name][refname][refname_full] = 1 \r\n\t\t\telse\r\n\t\t\t\tmoduleReferences[name][refname][refname_full] = moduleReferences[name][refname][refname_full] + 1\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\t\r\n\treturn moduleCalls, moduleReferences\r\n\r\nend",
    "type": "function"
  }, {
    "id": 317,
    "text": "local moduleCalls = {}",
    "type": "statement:localassign"
  }, {
    "id": 318,
    "text": "for name, execs in pairs(references.execs) do\r\n\t\tlocal name = nil\r\n\t\tlocal fname = nil\r\n\t\tfor _, exec in pairs(execs) do\r\n\t\t\tif (exec.metrics.module_functionCall) then \r\n\t\t\t\tname = exec.metrics.module_functionCall.moduleName\r\n\t\t\t\tfname = exec.metrics.module_functionCall.functionName\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\tend\r\n\t\tif (name) then \r\n\t\t\tif not moduleCalls[name] then moduleCalls[name] = {} end\r\n\t\t\tmoduleCalls[name][fname] = #execs\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 319,
    "text": "local fname = nil",
    "type": "statement:localassign"
  }, {
    "id": 320,
    "text": "for _, exec in pairs(execs) do\r\n\t\t\tif (exec.metrics.module_functionCall) then \r\n\t\t\t\tname = exec.metrics.module_functionCall.moduleName\r\n\t\t\t\tfname = exec.metrics.module_functionCall.functionName\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 321,
    "text": "if (exec.metrics.module_functionCall) then \r\n\t\t\t\tname = exec.metrics.module_functionCall.moduleName\r\n\t\t\t\tfname = exec.metrics.module_functionCall.functionName\r\n\t\t\t\tbreak\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 322,
    "text": "name = exec.metrics.module_functionCall.moduleName",
    "type": "statement:assign"
  }, {
    "id": 323,
    "text": "fname = exec.metrics.module_functionCall.functionName",
    "type": "statement:assign"
  }, {
    "id": 324,
    "text": "if (name) then \r\n\t\t\tif not moduleCalls[name] then moduleCalls[name] = {} end\r\n\t\t\tmoduleCalls[name][fname] = #execs\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 325,
    "text": "if not moduleCalls[name] then moduleCalls[name] = {} end",
    "type": "statement:if"
  }, {
    "id": 326,
    "text": "moduleCalls[name] = {}",
    "type": "statement:assign"
  }, {
    "id": 327,
    "text": "moduleCalls[name][fname] = #execs",
    "type": "statement:assign"
  }, {
    "id": 328,
    "text": "local moduleReferences = {}",
    "type": "statement:localassign"
  }, {
    "id": 329,
    "text": "for _, node in pairs(references.variables) do\r\n\t\tif (node.metrics and node.metrics.module_reference) then\r\n\t\t\tlocal name = node.metrics.module_reference.moduleName\r\n\t\t\tlocal refname = node.metrics.module_reference.referenceName\r\n\t\t\tlocal refname_full = node.metrics.module_reference.referenceName_full\r\n\t\t\t\r\n\t\t\tif not moduleReferences[name] then moduleReferences[name] = {} end\r\n\t\t\tif not moduleReferences[name][refname] then moduleReferences[name][refname] = {} end\r\n\t\t\t\r\n\t\t\tif not moduleReferences[name][refname][refname_full] then \r\n\t\t\t\tmoduleReferences[name][refname][refname_full] = 1 \r\n\t\t\telse\r\n\t\t\t\tmoduleReferences[name][refname][refname_full] = moduleReferences[name][refname][refname_full] + 1\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 330,
    "text": "if (node.metrics and node.metrics.module_reference) then\r\n\t\t\tlocal name = node.metrics.module_reference.moduleName\r\n\t\t\tlocal refname = node.metrics.module_reference.referenceName\r\n\t\t\tlocal refname_full = node.metrics.module_reference.referenceName_full\r\n\t\t\t\r\n\t\t\tif not moduleReferences[name] then moduleReferences[name] = {} end\r\n\t\t\tif not moduleReferences[name][refname] then moduleReferences[name][refname] = {} end\r\n\t\t\t\r\n\t\t\tif not moduleReferences[name][refname][refname_full] then \r\n\t\t\t\tmoduleReferences[name][refname][refname_full] = 1 \r\n\t\t\telse\r\n\t\t\t\tmoduleReferences[name][refname][refname_full] = moduleReferences[name][refname][refname_full] + 1\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 331,
    "text": "local name = node.metrics.module_reference.moduleName",
    "type": "statement:localassign"
  }, {
    "id": 332,
    "text": "local refname = node.metrics.module_reference.referenceName",
    "type": "statement:localassign"
  }, {
    "id": 333,
    "text": "local refname_full = node.metrics.module_reference.referenceName_full",
    "type": "statement:localassign"
  }, {
    "id": 334,
    "text": "if not moduleReferences[name] then moduleReferences[name] = {} end",
    "type": "statement:if"
  }, {
    "id": 335,
    "text": "moduleReferences[name] = {}",
    "type": "statement:assign"
  }, {
    "id": 336,
    "text": "if not moduleReferences[name][refname] then moduleReferences[name][refname] = {} end",
    "type": "statement:if"
  }, {
    "id": 337,
    "text": "moduleReferences[name][refname] = {}",
    "type": "statement:assign"
  }, {
    "id": 338,
    "text": "if not moduleReferences[name][refname][refname_full] then \r\n\t\t\t\tmoduleReferences[name][refname][refname_full] = 1 \r\n\t\t\telse\r\n\t\t\t\tmoduleReferences[name][refname][refname_full] = moduleReferences[name][refname][refname_full] + 1\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 339,
    "text": "moduleReferences[name][refname][refname_full] = 1",
    "type": "statement:assign"
  }, {
    "id": 340,
    "text": "moduleReferences[name][refname][refname_full] = moduleReferences[name][refname][refname_full] + 1",
    "type": "statement:assign"
  }, {
    "id": 341,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 342,
    "text": "function()\r\n\t\tid = id + 1\r\n\t\treturn id\r\n\tend",
    "type": "function"
  }, {
    "id": 343,
    "text": "id = id + 1",
    "type": "statement:assign"
  }, {
    "id": 344,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 345,
    "text": "function()\r\n\tlocal id = 0;\r\n\treturn function()\r\n\t\tid = id + 1\r\n\t\treturn id\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 346,
    "text": "local id = 0",
    "type": "statement:localassign"
  }, {
    "id": 347,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 348,
    "text": "function(node)\r\n\t\t-- do not go into a new block - only copy and evaluate its already generated values\r\n\t\t\r\n\t\t-- go over defined remote(=not local) variables defined in this block\r\n\t\tfor i,j in pairs(node.metrics.blockdata.remotes) do\r\n\t\t\r\n\t\t\t-- check whether variable was not defined before\r\n\t\t\t-- if defined - the variable is local\r\n\t\t\t-- otherwise the variable is remote\r\n\t\t\t-- put the variable into the correct local table\r\n\t\t\tif (locals_stack[i] ~= nil) then\r\n\t\t\t\tlocal k,v\r\n\t\t\t\tfor k,v in pairs(j) do\r\n\t\t\t\t\ttable.insert(locals_stack[i], v)\r\n\t\t\t\tend\r\n\t\t\telse\r\n\t\t\t\tif (remotes_stack[i] == nil ) then remotes_stack[i] = {} end\r\n\t\t\t\tlocal k,v\r\n\t\t\t\tfor k,v in pairs(j) do\r\n\t\t\t\t\ttable.insert(remotes_stack[i], v)\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tif (moduleMetrics) then\r\n\t\t\t\tfor _, node in pairs(j) do\r\n\t\t\t\t\ttable.insert(moduleMetrics.variables, node)\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\t\r\n\t\tend\r\n\t\t\r\n\t\t-- copy data\r\n\t\tfor i,j in pairs(node.metrics.blockdata.highlight_remote) do\r\n\t\t\tif (locals_stack[i] ~= nil) then \t-- local\r\n\t\t\t\tlocal new_table = {}\r\n\t\t\t\tlocal to_merge = {}\r\n\t\t\t\tto_merge[i] = j\r\n\t\t\t\tmerge_tables(new_table, highlight_local, to_merge)\r\n\t\t\t\thighlight_local = new_table\r\n\t\t\telse \t\t\t\t\t\t\t\t-- remote\r\n\t\t\t\tlocal new_table = {}\r\n\t\t\t\tlocal to_merge = {}\r\n\t\t\t\tto_merge[i] = j\r\n\t\t\t\tmerge_tables(new_table, highlight_remote, to_merge)\r\n\t\t\t\thighlight_remote = new_table\r\n\t\t\tend\r\n\t\tend\r\n\t\t\r\n\t\t-- copy data\r\n\t\tfor i,j in pairs(node.metrics.blockdata.fundefs) do\r\n\t\t\ttable.insert(total_function_def , j)\r\n\t\tend\r\n\t\t\r\n\t\t-- copy data\r\n\t\tfor i,j in pairs(node.metrics.blockdata.locals_total) do\r\n\t\t\ttable.insert(total_locals_stack, j)\r\n\t\t\tif (moduleMetrics) then\r\n\t\t\t\tfor _, node in pairs(j[2]) do\r\n\t\t\t\t\ttable.insert(moduleMetrics.variables, node)\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\t\t\r\n\t\t-- copy data\r\n\t\tfor i,j in pairs(node.metrics.blockdata.execs) do\r\n\t\t\tfor _, callF in pairs(j) do\r\n\t\t\t\taddItemToArray(total_execs_stack, i, callF)\r\n\t\t\t\tif (moduleMetrics) then\r\n\t\t\t\t\taddItemToArray(moduleMetrics.execs, i, callF)\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\t\t\r\n\tend",
    "type": "function"
  }, {
    "id": 349,
    "text": "for i,j in pairs(node.metrics.blockdata.remotes) do\r\n\t\t\r\n\t\t\t-- check whether variable was not defined before\r\n\t\t\t-- if defined - the variable is local\r\n\t\t\t-- otherwise the variable is remote\r\n\t\t\t-- put the variable into the correct local table\r\n\t\t\tif (locals_stack[i] ~= nil) then\r\n\t\t\t\tlocal k,v\r\n\t\t\t\tfor k,v in pairs(j) do\r\n\t\t\t\t\ttable.insert(locals_stack[i], v)\r\n\t\t\t\tend\r\n\t\t\telse\r\n\t\t\t\tif (remotes_stack[i] == nil ) then remotes_stack[i] = {} end\r\n\t\t\t\tlocal k,v\r\n\t\t\t\tfor k,v in pairs(j) do\r\n\t\t\t\t\ttable.insert(remotes_stack[i], v)\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tif (moduleMetrics) then\r\n\t\t\t\tfor _, node in pairs(j) do\r\n\t\t\t\t\ttable.insert(moduleMetrics.variables, node)\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\t\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 350,
    "text": "if (locals_stack[i] ~= nil) then\r\n\t\t\t\tlocal k,v\r\n\t\t\t\tfor k,v in pairs(j) do\r\n\t\t\t\t\ttable.insert(locals_stack[i], v)\r\n\t\t\t\tend\r\n\t\t\telse\r\n\t\t\t\tif (remotes_stack[i] == nil ) then remotes_stack[i] = {} end\r\n\t\t\t\tlocal k,v\r\n\t\t\t\tfor k,v in pairs(j) do\r\n\t\t\t\t\ttable.insert(remotes_stack[i], v)\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 351,
    "text": "for k,v in pairs(j) do\r\n\t\t\t\t\ttable.insert(locals_stack[i], v)\r\n\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 352,
    "text": "table.insert(locals_stack[i], v)",
    "type": "statement:functioncall"
  }, {
    "id": 353,
    "text": "if (remotes_stack[i] == nil ) then remotes_stack[i] = {} end",
    "type": "statement:if"
  }, {
    "id": 354,
    "text": "remotes_stack[i] = {}",
    "type": "statement:assign"
  }, {
    "id": 355,
    "text": "for k,v in pairs(j) do\r\n\t\t\t\t\ttable.insert(remotes_stack[i], v)\r\n\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 356,
    "text": "table.insert(remotes_stack[i], v)",
    "type": "statement:functioncall"
  }, {
    "id": 357,
    "text": "if (moduleMetrics) then\r\n\t\t\t\tfor _, node in pairs(j) do\r\n\t\t\t\t\ttable.insert(moduleMetrics.variables, node)\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 358,
    "text": "for _, node in pairs(j) do\r\n\t\t\t\t\ttable.insert(moduleMetrics.variables, node)\r\n\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 359,
    "text": "for i,j in pairs(node.metrics.blockdata.highlight_remote) do\r\n\t\t\tif (locals_stack[i] ~= nil) then \t-- local\r\n\t\t\t\tlocal new_table = {}\r\n\t\t\t\tlocal to_merge = {}\r\n\t\t\t\tto_merge[i] = j\r\n\t\t\t\tmerge_tables(new_table, highlight_local, to_merge)\r\n\t\t\t\thighlight_local = new_table\r\n\t\t\telse \t\t\t\t\t\t\t\t-- remote\r\n\t\t\t\tlocal new_table = {}\r\n\t\t\t\tlocal to_merge = {}\r\n\t\t\t\tto_merge[i] = j\r\n\t\t\t\tmerge_tables(new_table, highlight_remote, to_merge)\r\n\t\t\t\thighlight_remote = new_table\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 360,
    "text": "if (locals_stack[i] ~= nil) then \t-- local\r\n\t\t\t\tlocal new_table = {}\r\n\t\t\t\tlocal to_merge = {}\r\n\t\t\t\tto_merge[i] = j\r\n\t\t\t\tmerge_tables(new_table, highlight_local, to_merge)\r\n\t\t\t\thighlight_local = new_table\r\n\t\t\telse \t\t\t\t\t\t\t\t-- remote\r\n\t\t\t\tlocal new_table = {}\r\n\t\t\t\tlocal to_merge = {}\r\n\t\t\t\tto_merge[i] = j\r\n\t\t\t\tmerge_tables(new_table, highlight_remote, to_merge)\r\n\t\t\t\thighlight_remote = new_table\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 361,
    "text": "local new_table = {}",
    "type": "statement:localassign"
  }, {
    "id": 362,
    "text": "local to_merge = {}",
    "type": "statement:localassign"
  }, {
    "id": 363,
    "text": "to_merge[i] = j",
    "type": "statement:assign"
  }, {
    "id": 364,
    "text": "merge_tables(new_table, highlight_local, to_merge)",
    "type": "statement:functioncall"
  }, {
    "id": 365,
    "text": "highlight_local = new_table",
    "type": "statement:assign"
  }, {
    "id": 366,
    "text": "merge_tables(new_table, highlight_remote, to_merge)",
    "type": "statement:functioncall"
  }, {
    "id": 367,
    "text": "highlight_remote = new_table",
    "type": "statement:assign"
  }, {
    "id": 368,
    "text": "for i,j in pairs(node.metrics.blockdata.fundefs) do\r\n\t\t\ttable.insert(total_function_def , j)\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 369,
    "text": "table.insert(total_function_def , j)",
    "type": "statement:functioncall"
  }, {
    "id": 370,
    "text": "for i,j in pairs(node.metrics.blockdata.locals_total) do\r\n\t\t\ttable.insert(total_locals_stack, j)\r\n\t\t\tif (moduleMetrics) then\r\n\t\t\t\tfor _, node in pairs(j[2]) do\r\n\t\t\t\t\ttable.insert(moduleMetrics.variables, node)\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 371,
    "text": "table.insert(total_locals_stack, j)",
    "type": "statement:functioncall"
  }, {
    "id": 372,
    "text": "if (moduleMetrics) then\r\n\t\t\t\tfor _, node in pairs(j[2]) do\r\n\t\t\t\t\ttable.insert(moduleMetrics.variables, node)\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 373,
    "text": "for _, node in pairs(j[2]) do\r\n\t\t\t\t\ttable.insert(moduleMetrics.variables, node)\r\n\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 374,
    "text": "for i,j in pairs(node.metrics.blockdata.execs) do\r\n\t\t\tfor _, callF in pairs(j) do\r\n\t\t\t\taddItemToArray(total_execs_stack, i, callF)\r\n\t\t\t\tif (moduleMetrics) then\r\n\t\t\t\t\taddItemToArray(moduleMetrics.execs, i, callF)\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 375,
    "text": "for _, callF in pairs(j) do\r\n\t\t\t\taddItemToArray(total_execs_stack, i, callF)\r\n\t\t\t\tif (moduleMetrics) then\r\n\t\t\t\t\taddItemToArray(moduleMetrics.execs, i, callF)\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 376,
    "text": "addItemToArray(total_execs_stack, i, callF)",
    "type": "statement:functioncall"
  }, {
    "id": 377,
    "text": "if (moduleMetrics) then\r\n\t\t\t\t\taddItemToArray(moduleMetrics.execs, i, callF)\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 378,
    "text": "addItemToArray(moduleMetrics.execs, i, callF)",
    "type": "statement:functioncall"
  }, {
    "id": 379,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 380,
    "text": "function(node)\r\n\t\tdoRecursion(node) -- evaluate the right side of assign first\r\n\t\tlocal names = processAssign(node, true) -- get names of variables defined\r\n\t\t\r\n\t\t-- evaluate the list of assigned variables from right side - in reverse order\r\n\t\t-- (local a, a = 6, 7) - first the right 'a' gets defined as 7, and then the left 'a' is defined as 6\r\n\t\tfor i = #names, 1, -1 do\r\n\t\t\t---\r\n\t\t\tlocal text, node = names[i][1], names[i][2]\r\n\t\t\t\r\n\t\t\tif (locals_stack[text] ~= nil) then\r\n\t\t\t\t-- variable was defined as local before\r\n\t\t\t\t-- insert the previous declaration into all_locals_stack and assign ID numbers to it\r\n\t\t\t\t-- endScopeOfVariable deletes the record from locals_stack table\r\n\t\t\t\ttable.insert(all_locals_stack, {text,locals_stack[text]})\r\n\t\t\t\tendScopeOfVariable(locals_stack, text)\r\n\t\t\t\thighLightVariable(highlight_local, text)\r\n\t\t\tend\r\n\t\t\t-- insert the newly defined variable into locals_stack\r\n\t\t\taddItemToArray(locals_stack, text, node)\r\n\t\t\taddItemToHighlightArray(highlight_local, node, nil)\r\n\t\t\tif (moduleMetrics) then\r\n\t\t\t\ttable.insert(moduleMetrics.variables, node)\r\n\t\t\tend\r\n\t\t\t----\r\n\t\tend\r\n\t\t\r\n\tend",
    "type": "function"
  }, {
    "id": 381,
    "text": "doRecursion(node)",
    "type": "statement:functioncall"
  }, {
    "id": 382,
    "text": "local names = processAssign(node, true)",
    "type": "statement:localassign"
  }, {
    "id": 383,
    "text": "for i = #names, 1, -1 do\r\n\t\t\t---\r\n\t\t\tlocal text, node = names[i][1], names[i][2]\r\n\t\t\t\r\n\t\t\tif (locals_stack[text] ~= nil) then\r\n\t\t\t\t-- variable was defined as local before\r\n\t\t\t\t-- insert the previous declaration into all_locals_stack and assign ID numbers to it\r\n\t\t\t\t-- endScopeOfVariable deletes the record from locals_stack table\r\n\t\t\t\ttable.insert(all_locals_stack, {text,locals_stack[text]})\r\n\t\t\t\tendScopeOfVariable(locals_stack, text)\r\n\t\t\t\thighLightVariable(highlight_local, text)\r\n\t\t\tend\r\n\t\t\t-- insert the newly defined variable into locals_stack\r\n\t\t\taddItemToArray(locals_stack, text, node)\r\n\t\t\taddItemToHighlightArray(highlight_local, node, nil)\r\n\t\t\tif (moduleMetrics) then\r\n\t\t\t\ttable.insert(moduleMetrics.variables, node)\r\n\t\t\tend\r\n\t\t\t----\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 384,
    "text": "local text, node = names[i][1], names[i][2]",
    "type": "statement:localassign"
  }, {
    "id": 385,
    "text": "if (locals_stack[text] ~= nil) then\r\n\t\t\t\t-- variable was defined as local before\r\n\t\t\t\t-- insert the previous declaration into all_locals_stack and assign ID numbers to it\r\n\t\t\t\t-- endScopeOfVariable deletes the record from locals_stack table\r\n\t\t\t\ttable.insert(all_locals_stack, {text,locals_stack[text]})\r\n\t\t\t\tendScopeOfVariable(locals_stack, text)\r\n\t\t\t\thighLightVariable(highlight_local, text)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 386,
    "text": "table.insert(all_locals_stack, {text,locals_stack[text]})",
    "type": "statement:functioncall"
  }, {
    "id": 387,
    "text": "endScopeOfVariable(locals_stack, text)",
    "type": "statement:functioncall"
  }, {
    "id": 388,
    "text": "highLightVariable(highlight_local, text)",
    "type": "statement:functioncall"
  }, {
    "id": 389,
    "text": "addItemToArray(locals_stack, text, node)",
    "type": "statement:functioncall"
  }, {
    "id": 390,
    "text": "addItemToHighlightArray(highlight_local, node, nil)",
    "type": "statement:functioncall"
  }, {
    "id": 391,
    "text": "if (moduleMetrics) then\r\n\t\t\t\ttable.insert(moduleMetrics.variables, node)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 392,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 393,
    "text": "function(node)\r\n\t\t -- evaluate the right side of assign operation\r\n\t\tdoRecursion(node.expList)\r\n\t\t\r\n\t\t-- evaluate the left side of assign operation\r\n\t\tlocal names = processAssign(node, false) \r\n\t\tfor i = #names, 1, -1 do\r\n\t\t\tnewVariable(names[i][2], names[i][1], names[i][3], false)\r\n\t\t\tdoRecursion(names[i][2].parent) -- all others can be normaly evaluated ... names[i][2].parent is _PrefixExp - recursion evaluates nested immediately (without evaluating the 'recursed' node) \r\n\t\t\t\t\t\t\t\t\t\t\t-- dalsie uz mozeme normalne prechadzat do dalsich urovni, names[i][2].parent je _PrefixExp - rekurzia okamzite ide do hlbky teda dany node uz neskuma (alebo Name co nas netrapi)\r\n\t\tend\t\t\t\r\n\tend",
    "type": "function"
  }, {
    "id": 394,
    "text": "doRecursion(node.expList)",
    "type": "statement:functioncall"
  }, {
    "id": 395,
    "text": "local names = processAssign(node, false)",
    "type": "statement:localassign"
  }, {
    "id": 396,
    "text": "for i = #names, 1, -1 do\r\n\t\t\tnewVariable(names[i][2], names[i][1], names[i][3], false)\r\n\t\t\tdoRecursion(names[i][2].parent) -- all others can be normaly evaluated ... names[i][2].parent is _PrefixExp - recursion evaluates nested immediately (without evaluating the 'recursed' node) \r\n\t\t\t\t\t\t\t\t\t\t\t-- dalsie uz mozeme normalne prechadzat do dalsich urovni, names[i][2].parent je _PrefixExp - rekurzia okamzite ide do hlbky teda dany node uz neskuma (alebo Name co nas netrapi)\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 397,
    "text": "newVariable(names[i][2], names[i][1], names[i][3], false)",
    "type": "statement:functioncall"
  }, {
    "id": 398,
    "text": "doRecursion(names[i][2].parent)",
    "type": "statement:functioncall"
  }, {
    "id": 399,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 400,
    "text": "function(node)\r\n\t\ttable.insert(total_function_def, node)\r\n\t\tprocessFunction(node)\r\n\t\t-- doRecursion is called inside the processFunction to make sure of proper handling of function's arguments\r\n\tend",
    "type": "function"
  }, {
    "id": 401,
    "text": "table.insert(total_function_def, node)",
    "type": "statement:functioncall"
  }, {
    "id": 402,
    "text": "processFunction(node)",
    "type": "statement:functioncall"
  }, {
    "id": 403,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 404,
    "text": "function(node)\r\n\t\ttable.insert(total_function_def, node)\r\n\t\tprocessFunction(node)\r\n\t\t-- doRecursion is called inside the processFunction to make sure of proper handling of function's arguments\r\n\tend",
    "type": "function"
  }, {
    "id": 405,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 406,
    "text": "function(node)\r\n\t\tprocessFunction(node)\r\n\t\t-- doRecursion is called inside the processFunction to make sure of proper handling of function's arguments\r\n\tend",
    "type": "function"
  }, {
    "id": 407,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 408,
    "text": "function(node)\r\n\t\tlocal names = process_PrefixExp(node)\r\n\t\tfor i,j in pairs(names) do\r\n\t\t\tnewVariable(j[2], j[1], j[3], true)\r\n\t\tend\r\n\t\tdoRecursion(node)\r\n\tend",
    "type": "function"
  }, {
    "id": 409,
    "text": "local names = process_PrefixExp(node)",
    "type": "statement:localassign"
  }, {
    "id": 410,
    "text": "for i,j in pairs(names) do\r\n\t\t\tnewVariable(j[2], j[1], j[3], true)\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 411,
    "text": "newVariable(j[2], j[1], j[3], true)",
    "type": "statement:functioncall"
  }, {
    "id": 412,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 413,
    "text": "function(node)\r\n\t\tlocal nameNode = utils.searchForTagItem('Name', node.data)\r\n\t\tlocal block = utils.searchForTagItem_recursive('Block', node)\r\n\t\tlocal holder = {}\r\n\t\t\r\n\t\tif (nameNode and block) then\r\n\t\t\tlocal remotes = block.metrics.blockdata.remotes\t\r\n\t\t\tlocal highlight_remotes_secondary = block.metrics.blockdata.highlight_remote\t\t\t\t\r\n\t\t\taddItemToArray(remotes, nameNode.text, nameNode)\r\n\t\t\taddItemToHighlightArray(highlight_remotes_secondary, nameNode, nil)\r\n\t\t\t-- number and throw array .. same as with function arguments\r\n\t\t\t\r\n\t\t\tholder[nameNode.text] = remotes[nameNode.text]\r\n\t\t\t\r\n\t\t\tendScopeOfVariable(remotes, nameNode.text)\r\n\t\t\thighLightVariable(highlight_remotes_secondary, nameNode.text)\r\n\t\t\t\r\n\t\tend\t\t\t\r\n\t\t\r\n\t\tfor i,j in pairs(holder) do\r\n\t\t\ttable.insert(block.metrics.blockdata.locals, { i, j })\r\n\t\t\ttable.insert(block.metrics.blockdata.locals_total, {i, j} )\r\n\t\t\tif (moduleMetrics) then\r\n\t\t\t\tfor _, node in pairs(j) do\r\n\t\t\t\t\ttable.insert(moduleMetrics.variables, node)\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\t\t\r\n\t\tdoRecursion(node)\r\n\tend",
    "type": "function"
  }, {
    "id": 414,
    "text": "local nameNode = utils.searchForTagItem('Name', node.data)",
    "type": "statement:localassign"
  }, {
    "id": 415,
    "text": "local block = utils.searchForTagItem_recursive('Block', node)",
    "type": "statement:localassign"
  }, {
    "id": 416,
    "text": "if (nameNode and block) then\r\n\t\t\tlocal remotes = block.metrics.blockdata.remotes\t\r\n\t\t\tlocal highlight_remotes_secondary = block.metrics.blockdata.highlight_remote\t\t\t\t\r\n\t\t\taddItemToArray(remotes, nameNode.text, nameNode)\r\n\t\t\taddItemToHighlightArray(highlight_remotes_secondary, nameNode, nil)\r\n\t\t\t-- number and throw array .. same as with function arguments\r\n\t\t\t\r\n\t\t\tholder[nameNode.text] = remotes[nameNode.text]\r\n\t\t\t\r\n\t\t\tendScopeOfVariable(remotes, nameNode.text)\r\n\t\t\thighLightVariable(highlight_remotes_secondary, nameNode.text)\r\n\t\t\t\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 417,
    "text": "local highlight_remotes_secondary = block.metrics.blockdata.highlight_remote",
    "type": "statement:localassign"
  }, {
    "id": 418,
    "text": "addItemToArray(remotes, nameNode.text, nameNode)",
    "type": "statement:functioncall"
  }, {
    "id": 419,
    "text": "addItemToHighlightArray(highlight_remotes_secondary, nameNode, nil)",
    "type": "statement:functioncall"
  }, {
    "id": 420,
    "text": "holder[nameNode.text] = remotes[nameNode.text]",
    "type": "statement:assign"
  }, {
    "id": 421,
    "text": "endScopeOfVariable(remotes, nameNode.text)",
    "type": "statement:functioncall"
  }, {
    "id": 422,
    "text": "highLightVariable(highlight_remotes_secondary, nameNode.text)",
    "type": "statement:functioncall"
  }, {
    "id": 423,
    "text": "for i,j in pairs(holder) do\r\n\t\t\ttable.insert(block.metrics.blockdata.locals, { i, j })\r\n\t\t\ttable.insert(block.metrics.blockdata.locals_total, {i, j} )\r\n\t\t\tif (moduleMetrics) then\r\n\t\t\t\tfor _, node in pairs(j) do\r\n\t\t\t\t\ttable.insert(moduleMetrics.variables, node)\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 424,
    "text": "table.insert(block.metrics.blockdata.locals, { i, j })",
    "type": "statement:functioncall"
  }, {
    "id": 425,
    "text": "table.insert(block.metrics.blockdata.locals_total, {i, j} )",
    "type": "statement:functioncall"
  }, {
    "id": 426,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 427,
    "text": "function(node)\r\n\t\tlocal nameList = utils.searchForTagItem('NameList', node.data)\r\n\t\tlocal block = utils.searchForTagItem_recursive('Block', node)\r\n\t\t\r\n\t\tif (nameList and block) then\r\n\t\t\tlocal names = utils.getNamesFromNameList(nameList)\r\n\t\t\tlocal remotes = block.metrics.blockdata.remotes\r\n\t\t\tlocal highlight_remotes_secondary = block.metrics.blockdata.highlight_remote\t\t\t\r\n\t\t\tlocal holder = {}\r\n\t\t\t\r\n\t\t\tfor k,v in pairs(names) do\r\n\t\t\t\taddItemToArray(remotes, v.text, v)\t\t\t\t\r\n\t\t\t\taddItemToHighlightArray(highlight_remotes_secondary, v, nil)\r\n\t\t\t\t-- number and throw array ... same as with function arguments\r\n\t\t\t\t\r\n\t\t\t\tholder[v.text] = remotes[v.text]\r\n\t\t\t\t\r\n\t\t\t\tendScopeOfVariable(remotes, v.text)\r\n\t\t\t\thighLightVariable(highlight_remotes_secondary, v.text)\r\n\t\t\tend\t\t\t\r\n\t\t\t\r\n\t\t\t-- obnovit remotes kedze pre funkciu stale su remote -- TODO - a v skutocnosti su to local\r\n\t\t\t-- len pre dany block (tento - nie block funkcie) uz niesu podstatne - a teda boli zmazane funkciou endScopeOfVariable\r\n\t\t\t\r\n\t\t\tfor i,j in pairs(holder) do\r\n\t\t\t\ttable.insert(block.metrics.blockdata.locals, { i, j })\r\n\t\t\t\ttable.insert(block.metrics.blockdata.locals_total, {i,j} )\r\n\t\t\t\tif (moduleMetrics) then\r\n\t\t\t\t\tfor _, node in pairs(j) do\r\n\t\t\t\t\t\r\n\t\t\t\t\t\ttable.insert(moduleMetrics.variables, node)\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\t\tdoRecursion(node)\r\n\tend",
    "type": "function"
  }, {
    "id": 428,
    "text": "local nameList = utils.searchForTagItem('NameList', node.data)",
    "type": "statement:localassign"
  }, {
    "id": 429,
    "text": "if (nameList and block) then\r\n\t\t\tlocal names = utils.getNamesFromNameList(nameList)\r\n\t\t\tlocal remotes = block.metrics.blockdata.remotes\r\n\t\t\tlocal highlight_remotes_secondary = block.metrics.blockdata.highlight_remote\t\t\t\r\n\t\t\tlocal holder = {}\r\n\t\t\t\r\n\t\t\tfor k,v in pairs(names) do\r\n\t\t\t\taddItemToArray(remotes, v.text, v)\t\t\t\t\r\n\t\t\t\taddItemToHighlightArray(highlight_remotes_secondary, v, nil)\r\n\t\t\t\t-- number and throw array ... same as with function arguments\r\n\t\t\t\t\r\n\t\t\t\tholder[v.text] = remotes[v.text]\r\n\t\t\t\t\r\n\t\t\t\tendScopeOfVariable(remotes, v.text)\r\n\t\t\t\thighLightVariable(highlight_remotes_secondary, v.text)\r\n\t\t\tend\t\t\t\r\n\t\t\t\r\n\t\t\t-- obnovit remotes kedze pre funkciu stale su remote -- TODO - a v skutocnosti su to local\r\n\t\t\t-- len pre dany block (tento - nie block funkcie) uz niesu podstatne - a teda boli zmazane funkciou endScopeOfVariable\r\n\t\t\t\r\n\t\t\tfor i,j in pairs(holder) do\r\n\t\t\t\ttable.insert(block.metrics.blockdata.locals, { i, j })\r\n\t\t\t\ttable.insert(block.metrics.blockdata.locals_total, {i,j} )\r\n\t\t\t\tif (moduleMetrics) then\r\n\t\t\t\t\tfor _, node in pairs(j) do\r\n\t\t\t\t\t\r\n\t\t\t\t\t\ttable.insert(moduleMetrics.variables, node)\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 430,
    "text": "local names = utils.getNamesFromNameList(nameList)",
    "type": "statement:localassign"
  }, {
    "id": 431,
    "text": "for k,v in pairs(names) do\r\n\t\t\t\taddItemToArray(remotes, v.text, v)\t\t\t\t\r\n\t\t\t\taddItemToHighlightArray(highlight_remotes_secondary, v, nil)\r\n\t\t\t\t-- number and throw array ... same as with function arguments\r\n\t\t\t\t\r\n\t\t\t\tholder[v.text] = remotes[v.text]\r\n\t\t\t\t\r\n\t\t\t\tendScopeOfVariable(remotes, v.text)\r\n\t\t\t\thighLightVariable(highlight_remotes_secondary, v.text)\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 432,
    "text": "addItemToHighlightArray(highlight_remotes_secondary, v, nil)",
    "type": "statement:functioncall"
  }, {
    "id": 433,
    "text": "highLightVariable(highlight_remotes_secondary, v.text)",
    "type": "statement:functioncall"
  }, {
    "id": 434,
    "text": "for i,j in pairs(holder) do\r\n\t\t\t\ttable.insert(block.metrics.blockdata.locals, { i, j })\r\n\t\t\t\ttable.insert(block.metrics.blockdata.locals_total, {i,j} )\r\n\t\t\t\tif (moduleMetrics) then\r\n\t\t\t\t\tfor _, node in pairs(j) do\r\n\t\t\t\t\t\r\n\t\t\t\t\t\ttable.insert(moduleMetrics.variables, node)\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 435,
    "text": "table.insert(block.metrics.blockdata.locals_total, {i,j} )",
    "type": "statement:functioncall"
  }, {
    "id": 436,
    "text": "if (moduleMetrics) then\r\n\t\t\t\t\tfor _, node in pairs(j) do\r\n\t\t\t\t\t\r\n\t\t\t\t\t\ttable.insert(moduleMetrics.variables, node)\r\n\t\t\t\t\tend\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 437,
    "text": "for _, node in pairs(j) do\r\n\t\t\t\t\t\r\n\t\t\t\t\t\ttable.insert(moduleMetrics.variables, node)\r\n\t\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 438,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 439,
    "text": "function(node)\r\n\t\tdoRecursion(node)\r\n\tend",
    "type": "function"
  }, {
    "id": 440,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 441,
    "text": "function(data)\r\n\t\r\n\t\tlocal chunk = data.data[1]\r\n\t\tlocal block = nil\r\n\t\t\r\n\t\tblock = utils.searchForTagItem_recursive('Block', data, 2)\r\n\t\t\r\n\t\t-- EOF - call endScopeOfVariable to all remaining variables - causes its proper numbering and handling\r\n\t\t\r\n\t\tlocal backup_stack = {}\r\n\t\tlocal remote_stack = block.metrics.blockdata.remotes\r\n\t\tfor k,v in pairs(remotes_stack) do\r\n\t\t\tbackup_stack[k] = backup_stack[k] or {}\t\t\t\r\n\t\t\ttable.insert(backup_stack[k], v)\r\n\t\t\tendScopeOfVariable(remotes_stack, k, true)\t\r\n\t\tend\t\r\n\t\tblock.metrics.blockdata.remotes = backup_stack\r\n\t\t\r\n\t\tlocal highlight_remote = block.metrics.blockdata.highlight_remote\r\n\t\tfor k, v in pairs(highlight_remote) do\r\n\t\t\thighLightVariable(highlight_remote, k)\r\n\t\tend\r\n\r\n\t\t-- save all\r\n\t\tdata.metrics.functionExecutions = block.metrics.blockdata.execs\r\n\t\tdata.metrics.functionDefinitions = block.metrics.blockdata.fundefs\r\n\t\tdata.metrics.moduleCalls = total_moduleCalls\r\n\t\tdata.metrics.moduleReferences = total_moduleReferences\r\n\t\t\r\n\t\tdata.metrics.blockdata = block.metrics.blockdata\r\n\t\t\r\n\t\t-- save defined module names\r\n\t\t\r\n\t\tif not data.metrics.moduleDefinitions then data.metrics.moduleDefinitions = {} end\r\n\t\t\r\n\t\tfor exec, moduleDef in pairs(moduleDefinitions) do\r\n\t\t\tif not data.metrics.moduleDefinitions[exec] then data.metrics.moduleDefinitions[exec] = {} end\r\n\t\t\t\r\n\t\t\tdata.metrics.moduleDefinitions[exec].moduleName = moduleDef.moduleName\r\n\t\t\t\r\n\t\t\tlocal moduleCalls, moduleReferences = getModuleDependency(moduleDef.references)\r\n\t\t\t\r\n\t\t\tdata.metrics.moduleDefinitions[exec].moduleCalls = moduleCalls\r\n\t\t\tdata.metrics.moduleDefinitions[exec].moduleReferences = moduleReferences\r\n\t\t\t\r\n\t\t\tdata.metrics.currentModuleName = moduleDef.moduleName\r\n\t\tend\r\n\t\t\r\n\t\t-- reset data for next run\r\n\t\t\r\n\t\tnode_callbacks = {}\r\n\t\ttotal_moduleCalls = {}\r\n\t\ttotal_moduleReferences = {}\r\n\t\tmoduleDefinitions = {}\r\n\t\t\r\n\t\treturn data\r\n\tend",
    "type": "function"
  }, {
    "id": 442,
    "text": "local chunk = data.data[1]",
    "type": "statement:localassign"
  }, {
    "id": 443,
    "text": "local block = nil",
    "type": "statement:localassign"
  }, {
    "id": 444,
    "text": "block = utils.searchForTagItem_recursive('Block', data, 2)",
    "type": "statement:assign"
  }, {
    "id": 445,
    "text": "local backup_stack = {}",
    "type": "statement:localassign"
  }, {
    "id": 446,
    "text": "local remote_stack = block.metrics.blockdata.remotes",
    "type": "statement:localassign"
  }, {
    "id": 447,
    "text": "for k,v in pairs(remotes_stack) do\r\n\t\t\tbackup_stack[k] = backup_stack[k] or {}\t\t\t\r\n\t\t\ttable.insert(backup_stack[k], v)\r\n\t\t\tendScopeOfVariable(remotes_stack, k, true)\t\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 448,
    "text": "backup_stack[k] = backup_stack[k] or {}",
    "type": "statement:assign"
  }, {
    "id": 449,
    "text": "table.insert(backup_stack[k], v)",
    "type": "statement:functioncall"
  }, {
    "id": 450,
    "text": "block.metrics.blockdata.remotes = backup_stack",
    "type": "statement:assign"
  }, {
    "id": 451,
    "text": "local highlight_remote = block.metrics.blockdata.highlight_remote",
    "type": "statement:localassign"
  }, {
    "id": 452,
    "text": "for k, v in pairs(highlight_remote) do\r\n\t\t\thighLightVariable(highlight_remote, k)\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 453,
    "text": "data.metrics.functionExecutions = block.metrics.blockdata.execs",
    "type": "statement:assign"
  }, {
    "id": 454,
    "text": "data.metrics.functionDefinitions = block.metrics.blockdata.fundefs",
    "type": "statement:assign"
  }, {
    "id": 455,
    "text": "data.metrics.moduleCalls = total_moduleCalls",
    "type": "statement:assign"
  }, {
    "id": 456,
    "text": "data.metrics.moduleReferences = total_moduleReferences",
    "type": "statement:assign"
  }, {
    "id": 457,
    "text": "data.metrics.blockdata = block.metrics.blockdata",
    "type": "statement:assign"
  }, {
    "id": 458,
    "text": "if not data.metrics.moduleDefinitions then data.metrics.moduleDefinitions = {} end",
    "type": "statement:if"
  }, {
    "id": 459,
    "text": "data.metrics.moduleDefinitions = {}",
    "type": "statement:assign"
  }, {
    "id": 460,
    "text": "for exec, moduleDef in pairs(moduleDefinitions) do\r\n\t\t\tif not data.metrics.moduleDefinitions[exec] then data.metrics.moduleDefinitions[exec] = {} end\r\n\t\t\t\r\n\t\t\tdata.metrics.moduleDefinitions[exec].moduleName = moduleDef.moduleName\r\n\t\t\t\r\n\t\t\tlocal moduleCalls, moduleReferences = getModuleDependency(moduleDef.references)\r\n\t\t\t\r\n\t\t\tdata.metrics.moduleDefinitions[exec].moduleCalls = moduleCalls\r\n\t\t\tdata.metrics.moduleDefinitions[exec].moduleReferences = moduleReferences\r\n\t\t\t\r\n\t\t\tdata.metrics.currentModuleName = moduleDef.moduleName\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 461,
    "text": "if not data.metrics.moduleDefinitions[exec] then data.metrics.moduleDefinitions[exec] = {} end",
    "type": "statement:if"
  }, {
    "id": 462,
    "text": "data.metrics.moduleDefinitions[exec] = {}",
    "type": "statement:assign"
  }, {
    "id": 463,
    "text": "data.metrics.moduleDefinitions[exec].moduleName = moduleDef.moduleName",
    "type": "statement:assign"
  }, {
    "id": 464,
    "text": "local moduleCalls, moduleReferences = getModuleDependency(moduleDef.references)",
    "type": "statement:localassign"
  }, {
    "id": 465,
    "text": "data.metrics.moduleDefinitions[exec].moduleCalls = moduleCalls",
    "type": "statement:assign"
  }, {
    "id": 466,
    "text": "data.metrics.moduleDefinitions[exec].moduleReferences = moduleReferences",
    "type": "statement:assign"
  }, {
    "id": 467,
    "text": "data.metrics.currentModuleName = moduleDef.moduleName",
    "type": "statement:assign"
  }, {
    "id": 468,
    "text": "node_callbacks = {}",
    "type": "statement:assign"
  }, {
    "id": 469,
    "text": "total_moduleCalls = {}",
    "type": "statement:assign"
  }, {
    "id": 470,
    "text": "total_moduleReferences = {}",
    "type": "statement:assign"
  }, {
    "id": 471,
    "text": "moduleDefinitions = {}",
    "type": "statement:assign"
  }, {
    "id": 472,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 473,
    "text": "function(data)\t\r\n\t\t-- reset data when starting to evaluate a new block\r\n\t\t\r\n\t\ttotal_locals_stack = {}\r\n\t\tall_locals_stack = {}\r\n\t\tlocals_stack = {}\r\n\t\tremotes_stack = {}\t\r\n\t\t\r\n\t\thighlight_local = {}\r\n\t\thighlight_remote = {}\r\n\t\t\r\n\t\ttotal_execs_stack = {}\r\n\t\ttotal_function_def = {}\r\n\t\t\r\n\t\t-- start\r\n\t\t\r\n\t\tdoRecursion(data)\r\n\t\t\r\n\t\t-- prepare tables to store information in\r\n\t\t\r\n\t\tif (data.metrics == nil) then data.metrics ={} end\r\n\t\t\r\n\t\tdata.metrics.blockdata = {}\t\t\r\n\t\tdata.metrics.blockdata.locals = {}\r\n\t\tdata.metrics.blockdata.locals_total = {}\r\n\t\tdata.metrics.blockdata.remotes = {}\r\n\t\t\r\n\t\tdata.metrics.blockdata.highlight_remote = {}\r\n\t\t\r\n\t\tdata.metrics.blockdata.execs = {}\r\n\t\tdata.metrics.blockdata.fundefs = {}\r\n\t\t\r\n\t\t-- copy/store data\r\n\t\t\r\n\t\tfor k,v in pairs(total_execs_stack) do\r\n\t\t\tdata.metrics.blockdata.execs[k] = v\r\n\t\tend\r\n\t\t\r\n\t\tfor k,v in pairs(total_function_def) do\r\n\t\t\ttable.insert(data.metrics.blockdata.fundefs, v)\r\n\t\tend\r\n\t\t\r\n\t\t-- format ==> { name , {nodes} }\r\n\t\tfor k,v in pairs(remotes_stack) do\r\n\t\t\tdata.metrics.blockdata.remotes[k] = v\r\n\t\tend\r\n\t\t\r\n\t\t-- store not numbered references to variable (because it's scope did not start here')\t\t\r\n\t\tfor k,v in pairs(highlight_remote) do\r\n\t\t\tdata.metrics.blockdata.highlight_remote[k] = v\r\n\t\tend\r\n\t\t\r\n\t\t-- copy last values into total locals stack .... then number and delete them\r\n\t\t-- metrics.blockdata.LOCALS = ALL LOCALS STACK\r\n\t\t-- highlight remaining local variables\r\n\t\t\r\n\t\t-- prekopirovanie poslednych hodnot do total locals stack a ich nasledne ocislovanie a zmazanie z locals stack\r\n\t\t-- metrics.blockdata.LOCALS = ALL LOCALS STACK\r\n\t\t-- priradenie ID este nepriradenym lokalnym premennym\r\n\t\tfor k,v in pairs(locals_stack) do\r\n\t\t\ttable.insert(all_locals_stack, {k,v})\r\n\t\t\tendScopeOfVariable(locals_stack, k)\r\n\t\t\thighLightVariable(highlight_local, k)\r\n\t\tend\t\t\r\n\t\t\r\n\t\t-- format ==> { _ , {name , {nodes} }\r\n\t\tfor k,v in pairs(all_locals_stack) do\r\n\t\t\ttable.insert(total_locals_stack, v)\r\n\t\t\ttable.insert(data.metrics.blockdata.locals, v)\r\n\t\tend\r\n\t\t\t\r\n\t\tfor k,v in pairs(total_locals_stack) do\r\n\t\t\ttable.insert(data.metrics.blockdata.locals_total, v)\r\n\t\tend\r\n\t\t\t\t\t\r\n\t\treturn data\r\n\tend",
    "type": "function"
  }, {
    "id": 474,
    "text": "total_locals_stack = {}",
    "type": "statement:assign"
  }, {
    "id": 475,
    "text": "all_locals_stack = {}",
    "type": "statement:assign"
  }, {
    "id": 476,
    "text": "locals_stack = {}",
    "type": "statement:assign"
  }, {
    "id": 477,
    "text": "remotes_stack = {}",
    "type": "statement:assign"
  }, {
    "id": 478,
    "text": "highlight_local = {}",
    "type": "statement:assign"
  }, {
    "id": 479,
    "text": "highlight_remote = {}",
    "type": "statement:assign"
  }, {
    "id": 480,
    "text": "total_execs_stack = {}",
    "type": "statement:assign"
  }, {
    "id": 481,
    "text": "total_function_def = {}",
    "type": "statement:assign"
  }, {
    "id": 482,
    "text": "doRecursion(data)",
    "type": "statement:functioncall"
  }, {
    "id": 483,
    "text": "if (data.metrics == nil) then data.metrics ={} end",
    "type": "statement:if"
  }, {
    "id": 484,
    "text": "data.metrics ={}",
    "type": "statement:assign"
  }, {
    "id": 485,
    "text": "data.metrics.blockdata = {}",
    "type": "statement:assign"
  }, {
    "id": 486,
    "text": "data.metrics.blockdata.locals = {}",
    "type": "statement:assign"
  }, {
    "id": 487,
    "text": "data.metrics.blockdata.locals_total = {}",
    "type": "statement:assign"
  }, {
    "id": 488,
    "text": "data.metrics.blockdata.remotes = {}",
    "type": "statement:assign"
  }, {
    "id": 489,
    "text": "data.metrics.blockdata.highlight_remote = {}",
    "type": "statement:assign"
  }, {
    "id": 490,
    "text": "data.metrics.blockdata.execs = {}",
    "type": "statement:assign"
  }, {
    "id": 491,
    "text": "data.metrics.blockdata.fundefs = {}",
    "type": "statement:assign"
  }, {
    "id": 492,
    "text": "for k,v in pairs(total_execs_stack) do\r\n\t\t\tdata.metrics.blockdata.execs[k] = v\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 493,
    "text": "data.metrics.blockdata.execs[k] = v",
    "type": "statement:assign"
  }, {
    "id": 494,
    "text": "for k,v in pairs(total_function_def) do\r\n\t\t\ttable.insert(data.metrics.blockdata.fundefs, v)\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 495,
    "text": "table.insert(data.metrics.blockdata.fundefs, v)",
    "type": "statement:functioncall"
  }, {
    "id": 496,
    "text": "for k,v in pairs(remotes_stack) do\r\n\t\t\tdata.metrics.blockdata.remotes[k] = v\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 497,
    "text": "data.metrics.blockdata.remotes[k] = v",
    "type": "statement:assign"
  }, {
    "id": 498,
    "text": "for k,v in pairs(highlight_remote) do\r\n\t\t\tdata.metrics.blockdata.highlight_remote[k] = v\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 499,
    "text": "data.metrics.blockdata.highlight_remote[k] = v",
    "type": "statement:assign"
  }, {
    "id": 500,
    "text": "for k,v in pairs(locals_stack) do\r\n\t\t\ttable.insert(all_locals_stack, {k,v})\r\n\t\t\tendScopeOfVariable(locals_stack, k)\r\n\t\t\thighLightVariable(highlight_local, k)\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 501,
    "text": "table.insert(all_locals_stack, {k,v})",
    "type": "statement:functioncall"
  }, {
    "id": 502,
    "text": "endScopeOfVariable(locals_stack, k)",
    "type": "statement:functioncall"
  }, {
    "id": 503,
    "text": "highLightVariable(highlight_local, k)",
    "type": "statement:functioncall"
  }, {
    "id": 504,
    "text": "for k,v in pairs(all_locals_stack) do\r\n\t\t\ttable.insert(total_locals_stack, v)\r\n\t\t\ttable.insert(data.metrics.blockdata.locals, v)\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 505,
    "text": "table.insert(total_locals_stack, v)",
    "type": "statement:functioncall"
  }, {
    "id": 506,
    "text": "table.insert(data.metrics.blockdata.locals, v)",
    "type": "statement:functioncall"
  }, {
    "id": 507,
    "text": "for k,v in pairs(total_locals_stack) do\r\n\t\t\ttable.insert(data.metrics.blockdata.locals_total, v)\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 508,
    "text": "table.insert(data.metrics.blockdata.locals_total, v)",
    "type": "statement:functioncall"
  }, {
    "id": 509,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 510,
    "text": "",
    "type": "function container"
  }, {
    "id": 511,
    "text": "function searchForTagItem(tagname, data)\r\n\tfor j,l in pairs(data) do\r\n\t\tif (l.tag == tagname) then\r\n\t\t\treturn l\t\r\n\t\tend\r\n\tend\r\n\treturn nil\r\nend",
    "type": "function"
  }, {
    "id": 512,
    "text": "function searchForTagArray(tagname, data)\r\n\tlocal nodes = {}\r\n\tfor j,l in pairs(data) do\r\n\t\tif (l.tag == tagname) then\r\n\t\t\ttable.insert(nodes, l)\t\r\n\t\tend\r\n\tend\r\n\treturn nodes\r\nend",
    "type": "function"
  }, {
    "id": 513,
    "text": "function searchForTagItem_recursive(tagname, node, maxdepth)\r\n\tif (node == nil) then return nil end\r\n\tlocal j,l\r\n\tif (maxdepth ~= nil) then maxdepth = maxdepth -1 end\r\n\tfor j,l in pairs(node.data) do\r\n\t\tif (l.tag == tagname) then\r\n\t\t\treturn l\r\n\t\telseif (l.data ~= nil) then\r\n\t\t\tif (maxdepth == nil or maxdepth > 0) then\r\n\t\t\t\tlocal tmp = searchForTagItem_recursive(tagname, l, maxdepth)\r\n\t\t\t\tif (tmp ~= nil) then return tmp end\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\treturn nil\r\nend",
    "type": "function"
  }, {
    "id": 514,
    "text": "function getNamesFromNameList(nameList)\r\n\tlocal names = {}\r\n\tfor i,j in pairs(nameList.data) do\r\n\t\tif (j.tag == 'Name' or j.tag == 'Var') then\r\n\t\t\ttable.insert(names, j)\r\n\t\tend\r\n\tend\r\n\treturn names\r\nend",
    "type": "function"
  }, {
    "id": 515,
    "text": "function getExpsFromExpsList(expList)\r\n\tlocal names = {}\r\n\tfor i,j in pairs(expList.data) do\r\n\t\tif (j.tag == 'Exp') then\r\n\t\t\ttable.insert(names, j)\r\n\t\tend\r\n\tend\r\n\treturn names\r\nend",
    "type": "function"
  }, {
    "id": 516,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 517,
    "text": "find",
    "type": "global function"
  }, {
    "id": 518,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 519,
    "text": "ELSE",
    "type": "global function"
  }, {
    "id": 520,
    "text": "id_generator",
    "type": "global function"
  }, {
    "id": 521,
    "text": "actions[tag]",
    "type": "global function"
  }, {
    "id": 522,
    "text": "module",
    "type": "global function"
  }, {
    "id": 523,
    "text": "fun",
    "type": "global function"
  }, {
    "id": 524,
    "text": "len",
    "type": "global function"
  }, {
    "id": 525,
    "text": "getn",
    "type": "global function"
  }, {
    "id": 526,
    "text": "require",
    "type": "global function"
  }, {
    "id": 527,
    "text": "type",
    "type": "global function"
  }, {
    "id": 528,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 529,
    "text": "",
    "type": "variable container"
  }, {
    "id": 530,
    "text": "",
    "type": "require container"
  }, {
    "id": 531,
    "text": "",
    "type": "local variable"
  }, {
    "id": 532,
    "text": "",
    "type": "n/a"
  }, {
    "id": 533,
    "text": "",
    "type": "local variable"
  }, {
    "id": 534,
    "text": "",
    "type": "n/a"
  }, {
    "id": 535,
    "text": "",
    "type": "local variable"
  }, {
    "id": 536,
    "text": "",
    "type": "n/a"
  }, {
    "id": 537,
    "text": "",
    "type": "local variable"
  }, {
    "id": 538,
    "text": "",
    "type": "n/a"
  }, {
    "id": 539,
    "text": "",
    "type": "local variable"
  }, {
    "id": 540,
    "text": "",
    "type": "n/a"
  }, {
    "id": 541,
    "text": "",
    "type": "local variable"
  }, {
    "id": 542,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 543,
    "text": "",
    "type": "local variable"
  }, {
    "id": 544,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 545,
    "text": "",
    "type": "local variable"
  }, {
    "id": 546,
    "text": "",
    "type": "keyword"
  }, {
    "id": 547,
    "text": "",
    "type": "local variable"
  }, {
    "id": 548,
    "text": "",
    "type": "keyword"
  }, {
    "id": 549,
    "text": "",
    "type": "local variable"
  }, {
    "id": 550,
    "text": "",
    "type": "keyword"
  }, {
    "id": 551,
    "text": "",
    "type": "local variable"
  }, {
    "id": 552,
    "text": "",
    "type": "keyword"
  }, {
    "id": 553,
    "text": "",
    "type": "local variable"
  }, {
    "id": 554,
    "text": "",
    "type": "keyword"
  }, {
    "id": 555,
    "text": "",
    "type": "local variable"
  }, {
    "id": 556,
    "text": "",
    "type": "keyword"
  }, {
    "id": 557,
    "text": "",
    "type": "local variable"
  }, {
    "id": 558,
    "text": "",
    "type": "keyword"
  }, {
    "id": 559,
    "text": "",
    "type": "local variable"
  }, {
    "id": 560,
    "text": "",
    "type": "keyword"
  }, {
    "id": 561,
    "text": "",
    "type": "local variable"
  }, {
    "id": 562,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 563,
    "text": "",
    "type": "local variable"
  }, {
    "id": 564,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 565,
    "text": "",
    "type": "local variable"
  }, {
    "id": 566,
    "text": "",
    "type": "keyword"
  }, {
    "id": 567,
    "text": "",
    "type": "local variable"
  }, {
    "id": 568,
    "text": "",
    "type": "n/a"
  }, {
    "id": 569,
    "text": "",
    "type": "local variable"
  }, {
    "id": 570,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 571,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 572,
    "text": "",
    "type": "function"
  }, {
    "id": 573,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 574,
    "text": "",
    "type": "function"
  }, {
    "id": 575,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 576,
    "text": "",
    "type": "function"
  }, {
    "id": 577,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 578,
    "text": "",
    "type": "function"
  }, {
    "id": 579,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 580,
    "text": "",
    "type": "function"
  }, {
    "id": 581,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 582,
    "text": "",
    "type": "function"
  }, {
    "id": 583,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 584,
    "text": "",
    "type": "function"
  }, {
    "id": 585,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 586,
    "text": "",
    "type": "function"
  }, {
    "id": 587,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 588,
    "text": "",
    "type": "function"
  }, {
    "id": 589,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 590,
    "text": "",
    "type": "function"
  }, {
    "id": 591,
    "text": "",
    "type": "global variable"
  }, {
    "id": 592,
    "text": "",
    "type": "n/a"
  }, {
    "id": 593,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 594,
    "text": "",
    "type": "require local variable"
  } ]
}