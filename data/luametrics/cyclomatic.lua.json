{
  "_filename": "cyclomatic.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luametrics/src/metrics/captures/cyclomatic.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 3,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 17,
    "label": "has",
    "to": 22
  }, {
    "from": 13,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 24,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 28,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 32,
    "label": "has",
    "to": 36
  }, {
    "from": 32,
    "label": "has",
    "to": 37
  }, {
    "from": 32,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 32,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 32,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 34
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 50
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 52,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 52,
    "label": "has",
    "to": 59
  }, {
    "from": 52,
    "label": "has",
    "to": 60
  }, {
    "from": 52,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 52,
    "label": "has",
    "to": 63
  }, {
    "from": 52,
    "label": "has",
    "to": 64
  }, {
    "from": 52,
    "label": "has",
    "to": 34
  }, {
    "from": 52,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 50
  }, {
    "from": 66,
    "label": "has",
    "to": 53
  }, {
    "from": 66,
    "label": "has",
    "to": 54
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 34
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 50
  }, {
    "from": 70,
    "label": "has",
    "to": 53
  }, {
    "from": 70,
    "label": "has",
    "to": 54
  }, {
    "from": 70,
    "label": "has",
    "to": 67
  }, {
    "from": 70,
    "label": "has",
    "to": 68
  }, {
    "from": 70,
    "label": "has",
    "to": 34
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 50
  }, {
    "from": 72,
    "label": "has",
    "to": 53
  }, {
    "from": 72,
    "label": "has",
    "to": 54
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 72,
    "label": "has",
    "to": 63
  }, {
    "from": 72,
    "label": "has",
    "to": 64
  }, {
    "from": 72,
    "label": "has",
    "to": 34
  }, {
    "from": 72,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 50
  }, {
    "from": 76,
    "label": "has",
    "to": 53
  }, {
    "from": 76,
    "label": "has",
    "to": 54
  }, {
    "from": 76,
    "label": "has",
    "to": 73
  }, {
    "from": 76,
    "label": "has",
    "to": 74
  }, {
    "from": 76,
    "label": "has",
    "to": 63
  }, {
    "from": 76,
    "label": "has",
    "to": 64
  }, {
    "from": 76,
    "label": "has",
    "to": 34
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 50
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 78,
    "label": "has",
    "to": 34
  }, {
    "from": 78,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 50
  }, {
    "from": 82,
    "label": "has",
    "to": 79
  }, {
    "from": 82,
    "label": "has",
    "to": 80
  }, {
    "from": 82,
    "label": "has",
    "to": 34
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 50
  }, {
    "from": 84,
    "label": "has",
    "to": 79
  }, {
    "from": 84,
    "label": "has",
    "to": 80
  }, {
    "from": 84,
    "label": "has",
    "to": 34
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 86,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 50
  }, {
    "from": 90,
    "label": "has",
    "to": 34
  }, {
    "from": 86,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 50
  }, {
    "from": 91,
    "label": "has",
    "to": 53
  }, {
    "from": 91,
    "label": "has",
    "to": 54
  }, {
    "from": 91,
    "label": "has",
    "to": 55
  }, {
    "from": 91,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 91,
    "label": "has",
    "to": 59
  }, {
    "from": 91,
    "label": "has",
    "to": 60
  }, {
    "from": 91,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 91,
    "label": "has",
    "to": 63
  }, {
    "from": 91,
    "label": "has",
    "to": 64
  }, {
    "from": 91,
    "label": "has",
    "to": 34
  }, {
    "from": 86,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 50
  }, {
    "from": 92,
    "label": "has",
    "to": 53
  }, {
    "from": 92,
    "label": "has",
    "to": 54
  }, {
    "from": 92,
    "label": "has",
    "to": 67
  }, {
    "from": 92,
    "label": "has",
    "to": 68
  }, {
    "from": 92,
    "label": "has",
    "to": 34
  }, {
    "from": 86,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 50
  }, {
    "from": 93,
    "label": "has",
    "to": 53
  }, {
    "from": 93,
    "label": "has",
    "to": 54
  }, {
    "from": 93,
    "label": "has",
    "to": 67
  }, {
    "from": 93,
    "label": "has",
    "to": 68
  }, {
    "from": 93,
    "label": "has",
    "to": 34
  }, {
    "from": 86,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 50
  }, {
    "from": 94,
    "label": "has",
    "to": 53
  }, {
    "from": 94,
    "label": "has",
    "to": 54
  }, {
    "from": 94,
    "label": "has",
    "to": 73
  }, {
    "from": 94,
    "label": "has",
    "to": 74
  }, {
    "from": 94,
    "label": "has",
    "to": 63
  }, {
    "from": 94,
    "label": "has",
    "to": 64
  }, {
    "from": 94,
    "label": "has",
    "to": 34
  }, {
    "from": 86,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 50
  }, {
    "from": 95,
    "label": "has",
    "to": 53
  }, {
    "from": 95,
    "label": "has",
    "to": 54
  }, {
    "from": 95,
    "label": "has",
    "to": 73
  }, {
    "from": 95,
    "label": "has",
    "to": 74
  }, {
    "from": 95,
    "label": "has",
    "to": 63
  }, {
    "from": 95,
    "label": "has",
    "to": 64
  }, {
    "from": 95,
    "label": "has",
    "to": 34
  }, {
    "from": 86,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 50
  }, {
    "from": 96,
    "label": "has",
    "to": 79
  }, {
    "from": 96,
    "label": "has",
    "to": 80
  }, {
    "from": 96,
    "label": "has",
    "to": 34
  }, {
    "from": 86,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 50
  }, {
    "from": 97,
    "label": "has",
    "to": 79
  }, {
    "from": 97,
    "label": "has",
    "to": 80
  }, {
    "from": 97,
    "label": "has",
    "to": 34
  }, {
    "from": 86,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 50
  }, {
    "from": 98,
    "label": "has",
    "to": 79
  }, {
    "from": 98,
    "label": "has",
    "to": 80
  }, {
    "from": 98,
    "label": "has",
    "to": 34
  }, {
    "from": 86,
    "label": "has",
    "to": 34
  }, {
    "from": 86,
    "label": "has",
    "to": 99
  }, {
    "from": 100,
    "label": "calls",
    "to": 13
  }, {
    "from": 100,
    "label": "calls",
    "to": 13
  }, {
    "from": 100,
    "label": "calls",
    "to": 13
  }, {
    "from": 100,
    "label": "calls",
    "to": 13
  }, {
    "from": 100,
    "label": "calls",
    "to": 13
  }, {
    "from": 100,
    "label": "calls",
    "to": 13
  }, {
    "from": 100,
    "label": "calls",
    "to": 13
  }, {
    "from": 100,
    "label": "calls",
    "to": 13
  }, {
    "from": 100,
    "label": "calls",
    "to": 13
  }, {
    "from": 100,
    "label": "calls",
    "to": 103
  }, {
    "from": 32,
    "label": "calls",
    "to": 104
  }, {
    "from": 13,
    "label": "calls",
    "to": 105
  }, {
    "from": 32,
    "label": "calls",
    "to": 105
  }, {
    "from": 32,
    "label": "calls",
    "to": 105
  }, {
    "from": 100,
    "label": "calls",
    "to": 105
  }, {
    "from": 100,
    "label": "calls",
    "to": 105
  }, {
    "from": 32,
    "label": "calls",
    "to": 106
  }, {
    "from": 32,
    "label": "calls",
    "to": 106
  }, {
    "from": 13,
    "label": "calls",
    "to": 3
  }, {
    "from": 13,
    "label": "calls",
    "to": 3
  }, {
    "from": 13,
    "label": "calls",
    "to": 3
  }, {
    "from": 13,
    "label": "calls",
    "to": 3
  }, {
    "from": 100,
    "label": "calls",
    "to": 3
  }, {
    "from": 100,
    "label": "calls",
    "to": 3
  }, {
    "from": 100,
    "label": "calls",
    "to": 3
  }, {
    "from": 100,
    "label": "calls",
    "to": 3
  }, {
    "from": 100,
    "label": "calls",
    "to": 3
  }, {
    "from": 100,
    "label": "calls",
    "to": 3
  }, {
    "from": 100,
    "label": "calls",
    "to": 3
  }, {
    "from": 100,
    "label": "calls",
    "to": 3
  }, {
    "from": 100,
    "label": "calls",
    "to": 3
  }, {
    "from": 100,
    "label": "calls",
    "to": 3
  }, {
    "from": 100,
    "label": "calls",
    "to": 3
  }, {
    "from": 100,
    "label": "calls",
    "to": 3
  }, {
    "from": 100,
    "label": "calls",
    "to": 3
  }, {
    "from": 100,
    "label": "calls",
    "to": 3
  }, {
    "from": 100,
    "label": "calls",
    "to": 3
  }, {
    "from": 100,
    "label": "calls",
    "to": 3
  }, {
    "from": 100,
    "label": "calls",
    "to": 3
  }, {
    "from": 100,
    "label": "calls",
    "to": 3
  }, {
    "from": 100,
    "label": "calls",
    "to": 3
  }, {
    "from": 100,
    "label": "calls",
    "to": 3
  }, {
    "from": 100,
    "label": "calls",
    "to": 3
  }, {
    "from": 100,
    "label": "calls",
    "to": 3
  }, {
    "from": 32,
    "label": "calls",
    "to": 32
  }, {
    "from": 100,
    "label": "calls",
    "to": 32
  }, {
    "from": 100,
    "label": "calls",
    "to": 32
  }, {
    "from": 100,
    "label": "calls",
    "to": 32
  }, {
    "from": 100,
    "label": "calls",
    "to": 107
  }, {
    "from": 100,
    "label": "calls",
    "to": 101
  }, {
    "from": 100,
    "label": "calls",
    "to": 101
  }, {
    "from": 32,
    "label": "calls",
    "to": 102
  }, {
    "from": 32,
    "label": "calls",
    "to": 102
  }, {
    "from": 100,
    "label": "calls",
    "to": 102
  }, {
    "from": 100,
    "label": "calls",
    "to": 108
  }, {
    "from": 100,
    "label": "calls",
    "to": 108
  }, {
    "from": 100,
    "label": "calls",
    "to": 28
  }, {
    "from": 100,
    "label": "calls",
    "to": 28
  }, {
    "from": 100,
    "label": "calls",
    "to": 28
  }, {
    "from": 100,
    "label": "calls",
    "to": 24
  }, {
    "from": 100,
    "label": "calls",
    "to": 24
  }, {
    "from": 100,
    "label": "calls",
    "to": 24
  }, {
    "from": 1,
    "label": "contains",
    "to": 100
  }, {
    "from": 100,
    "label": "declares",
    "to": 3
  }, {
    "from": 100,
    "label": "declares",
    "to": 13
  }, {
    "from": 100,
    "label": "declares",
    "to": 24
  }, {
    "from": 100,
    "label": "declares",
    "to": 28
  }, {
    "from": 100,
    "label": "declares",
    "to": 32
  }, {
    "from": 100,
    "label": "declares",
    "to": 49
  }, {
    "from": 100,
    "label": "declares",
    "to": 52
  }, {
    "from": 100,
    "label": "declares",
    "to": 66
  }, {
    "from": 100,
    "label": "declares",
    "to": 70
  }, {
    "from": 100,
    "label": "declares",
    "to": 72
  }, {
    "from": 100,
    "label": "declares",
    "to": 76
  }, {
    "from": 100,
    "label": "declares",
    "to": 78
  }, {
    "from": 100,
    "label": "declares",
    "to": 82
  }, {
    "from": 100,
    "label": "declares",
    "to": 84
  }, {
    "from": 100,
    "label": "declares",
    "to": 86
  }, {
    "from": 1,
    "label": "contains",
    "to": 109
  }, {
    "from": 1,
    "label": "contains",
    "to": 110
  }, {
    "from": 109,
    "label": "initializes",
    "to": 111
  }, {
    "from": 111,
    "label": "assigns",
    "to": 112
  }, {
    "from": 109,
    "label": "initializes",
    "to": 113
  }, {
    "from": 113,
    "label": "assigns",
    "to": 114
  }, {
    "from": 109,
    "label": "initializes",
    "to": 115
  }, {
    "from": 115,
    "label": "assigns",
    "to": 116
  }, {
    "from": 109,
    "label": "initializes",
    "to": 117
  }, {
    "from": 117,
    "label": "assigns",
    "to": 118
  }, {
    "from": 109,
    "label": "initializes",
    "to": 119
  }, {
    "from": 119,
    "label": "assigns",
    "to": 120
  }, {
    "from": 110,
    "label": "initializes",
    "to": 121
  }, {
    "from": 121,
    "label": "requires",
    "to": 2
  }, {
    "from": 123,
    "label": "requires",
    "to": 1
  }, {
    "from": 122,
    "label": "contains",
    "to": 52
  }, {
    "from": 122,
    "label": "contains",
    "to": 66
  }, {
    "from": 122,
    "label": "contains",
    "to": 70
  }, {
    "from": 122,
    "label": "contains",
    "to": 72
  }, {
    "from": 122,
    "label": "contains",
    "to": 76
  }, {
    "from": 122,
    "label": "contains",
    "to": 78
  }, {
    "from": 122,
    "label": "contains",
    "to": 82
  }, {
    "from": 122,
    "label": "contains",
    "to": 84
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "cyclomatic",
    "type": "module"
  }, {
    "id": 2,
    "text": "utils",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function add(node, name, count)\r\n\tcount = count or 0\r\n\r\n\tif (not node.metrics) then node.metrics = {} end\r\n\tif (not node.metrics.cyclomatic) then node.metrics.cyclomatic = {} end\r\n\t\r\n\tif (node.metrics.cyclomatic[name]) then\r\n\t\tnode.metrics.cyclomatic[name] = node.metrics.cyclomatic[name] + count\r\n\telse\r\n\t\tnode.metrics.cyclomatic[name] = count \r\n\tend\r\n\t\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "count = count or 0",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "if (not node.metrics) then node.metrics = {} end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "node.metrics = {}",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "if (not node.metrics.cyclomatic) then node.metrics.cyclomatic = {} end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "node.metrics.cyclomatic = {}",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "if (node.metrics.cyclomatic[name]) then\r\n\t\tnode.metrics.cyclomatic[name] = node.metrics.cyclomatic[name] + count\r\n\telse\r\n\t\tnode.metrics.cyclomatic[name] = count \r\n\tend",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "node.metrics.cyclomatic[name] = node.metrics.cyclomatic[name] + count",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "node.metrics.cyclomatic[name] = count",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "local function copyData(node)\r\n\t\r\n\tlocal children = node.data\r\n\t\r\n\tlocal NOTcopyFrom = {\r\n\t\tFunction \t\t= true, \r\n\t\tGlobalFunction \t= true, \r\n\t\tLocalFunction \t= true, \r\n\t\tAssign \t\t\t= true, \r\n\t\tLocalAssign \t= true,\r\n\t}\r\n\t\r\n\tfor _, child in pairs(children) do\r\n\t\tif (child.metrics and child.metrics.cyclomatic) then \r\n\t\t\tif (NOTcopyFrom[child.tag] == nil) then\r\n\t\t\t\tadd(node, 'decisions',  child.metrics.cyclomatic.decisions or 0)\r\n\t\t\t\tadd(node, 'conditions',  child.metrics.cyclomatic.conditions or 0)\r\n\t\t\tend\r\n\t\t\tadd(node, 'decisions_all',  child.metrics.cyclomatic.decisions_all or 0)\r\n\t\t\tadd(node, 'conditions_all',  child.metrics.cyclomatic.conditions_all or 0)\r\n\t\tend\r\n\tend\r\n\t\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "local children = node.data",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "local NOTcopyFrom = {\r\n\t\tFunction \t\t= true, \r\n\t\tGlobalFunction \t= true, \r\n\t\tLocalFunction \t= true, \r\n\t\tAssign \t\t\t= true, \r\n\t\tLocalAssign \t= true,\r\n\t}",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "for _, child in pairs(children) do\r\n\t\tif (child.metrics and child.metrics.cyclomatic) then \r\n\t\t\tif (NOTcopyFrom[child.tag] == nil) then\r\n\t\t\t\tadd(node, 'decisions',  child.metrics.cyclomatic.decisions or 0)\r\n\t\t\t\tadd(node, 'conditions',  child.metrics.cyclomatic.conditions or 0)\r\n\t\t\tend\r\n\t\t\tadd(node, 'decisions_all',  child.metrics.cyclomatic.decisions_all or 0)\r\n\t\t\tadd(node, 'conditions_all',  child.metrics.cyclomatic.conditions_all or 0)\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 17,
    "text": "if (child.metrics and child.metrics.cyclomatic) then \r\n\t\t\tif (NOTcopyFrom[child.tag] == nil) then\r\n\t\t\t\tadd(node, 'decisions',  child.metrics.cyclomatic.decisions or 0)\r\n\t\t\t\tadd(node, 'conditions',  child.metrics.cyclomatic.conditions or 0)\r\n\t\t\tend\r\n\t\t\tadd(node, 'decisions_all',  child.metrics.cyclomatic.decisions_all or 0)\r\n\t\t\tadd(node, 'conditions_all',  child.metrics.cyclomatic.conditions_all or 0)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "if (NOTcopyFrom[child.tag] == nil) then\r\n\t\t\t\tadd(node, 'decisions',  child.metrics.cyclomatic.decisions or 0)\r\n\t\t\t\tadd(node, 'conditions',  child.metrics.cyclomatic.conditions or 0)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "add(node, 'decisions',  child.metrics.cyclomatic.decisions or 0)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "add(node, 'conditions',  child.metrics.cyclomatic.conditions or 0)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "add(node, 'decisions_all',  child.metrics.cyclomatic.decisions_all or 0)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "add(node, 'conditions_all',  child.metrics.cyclomatic.conditions_all or 0)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "local function setLowerBound(node)\r\n\tif (not node.metrics) then node.metrics = {} end\r\n\tif (not node.metrics.cyclomatic) then node.metrics.cyclomatic = {} end\r\n\t\r\n\t\r\n\tnode.metrics.cyclomatic.lowerBound = (node.metrics.cyclomatic.decisions or 0) + 1\r\n\tnode.metrics.cyclomatic.lowerBound_all = (node.metrics.cyclomatic.decisions_all or 0) + 1\r\n\t\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "node.metrics.cyclomatic.lowerBound = (node.metrics.cyclomatic.decisions or 0) + 1",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "node.metrics.cyclomatic.lowerBound_all = (node.metrics.cyclomatic.decisions_all or 0) + 1",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "local function setUpperBound(node)\r\n\tif (not node.metrics) then node.metrics = {} end\r\n\tif (not node.metrics.cyclomatic) then node.metrics.cyclomatic = {} end\r\n\t\r\n\tnode.metrics.cyclomatic.upperBound = (node.metrics.cyclomatic.conditions or 0) + 1\r\n\tnode.metrics.cyclomatic.upperBound_all = (node.metrics.cyclomatic.conditions_all or 0) + 1\r\n\t\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "node.metrics.cyclomatic.upperBound = (node.metrics.cyclomatic.conditions or 0) + 1",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "node.metrics.cyclomatic.upperBound_all = (node.metrics.cyclomatic.conditions_all or 0) + 1",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "local function countConditions(expression)\r\n\tif (not expression) then return end\r\n\t\r\n\tlocal simpleExps = utils.searchForTagArray('_SimpleExp', expression.data)\r\n\t\r\n\tlocal binops = utils.searchForTagArray('BinOp', expression.data)\r\n\tlocal count_and_or = 0\r\n\tif (not string.find(expression.text, '^%(')) then count_and_or = 1 end\r\n\t\r\n\tfor _, op in pairs(binops) do\r\n\t\tlocal key = op.data[1].key\r\n\t\tif (key == 'AND' or key == 'OR') then\r\n\t\t\tcount_and_or = count_and_or + 1\r\n\t\tend\r\n\tend\r\n\t\r\n\tfor _, simpleExp in pairs(simpleExps) do\r\n\t\tif (string.find(simpleExp.text, '^%(')) then\r\n\t\t\tlocal current_exp = utils.searchForTagItem_recursive('Exp', simpleExp, 3)\r\n\t\t\tcount_and_or = count_and_or + countConditions(current_exp)\r\n\t\tend\r\n\tend\r\n\treturn count_and_or\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "if (not expression) then return end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 35,
    "text": "local simpleExps = utils.searchForTagArray('_SimpleExp', expression.data)",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "local binops = utils.searchForTagArray('BinOp', expression.data)",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "local count_and_or = 0",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "if (not string.find(expression.text, '^%(')) then count_and_or = 1 end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "count_and_or = 1",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "for _, op in pairs(binops) do\r\n\t\tlocal key = op.data[1].key\r\n\t\tif (key == 'AND' or key == 'OR') then\r\n\t\t\tcount_and_or = count_and_or + 1\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 41,
    "text": "local key = op.data[1].key",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "if (key == 'AND' or key == 'OR') then\r\n\t\t\tcount_and_or = count_and_or + 1\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "count_and_or = count_and_or + 1",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "for _, simpleExp in pairs(simpleExps) do\r\n\t\tif (string.find(simpleExp.text, '^%(')) then\r\n\t\t\tlocal current_exp = utils.searchForTagItem_recursive('Exp', simpleExp, 3)\r\n\t\t\tcount_and_or = count_and_or + countConditions(current_exp)\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 45,
    "text": "if (string.find(simpleExp.text, '^%(')) then\r\n\t\t\tlocal current_exp = utils.searchForTagItem_recursive('Exp', simpleExp, 3)\r\n\t\t\tcount_and_or = count_and_or + countConditions(current_exp)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "local current_exp = utils.searchForTagItem_recursive('Exp', simpleExp, 3)",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "count_and_or = count_and_or + countConditions(current_exp)",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function (node) \r\n\t\t\tcopyData(node)\r\n\t\t\treturn node \r\n\t\tend",
    "type": "function"
  }, {
    "id": 50,
    "text": "copyData(node)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function(node)\r\n\t\tcopyData(node)\r\n\t\tadd(node, 'decisions', 1)\r\n\t\tadd(node, 'decisions_all', 1)\r\n\t\t\r\n\t\tlocal if_else = utils.searchForTagArray_key('ELSEIF', node.data)\r\n\t\tif (#if_else > 0) then \r\n\t\t\tadd(node, 'decisions', #if_else)\r\n\t\t\tadd(node, 'decisions_all', #if_else)\r\n\t\tend\r\n \t\t\r\n \t\tlocal count = 0\r\n \t\tlocal exps = utils.searchForTagArray('Exp', node.data)\r\n \t\tfor _, expression in pairs(exps) do\r\n\t\t\tcount = count + countConditions(expression)\r\n\t\tend\r\n\t\t\r\n\t\tadd(node, 'conditions', count)\r\n\t\tadd(node, 'conditions_all', count)\r\n\t\t\r\n\t\treturn node\r\n\tend",
    "type": "function"
  }, {
    "id": 53,
    "text": "add(node, 'decisions', 1)",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "add(node, 'decisions_all', 1)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "local if_else = utils.searchForTagArray_key('ELSEIF', node.data)",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "if (#if_else > 0) then \r\n\t\t\tadd(node, 'decisions', #if_else)\r\n\t\t\tadd(node, 'decisions_all', #if_else)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "add(node, 'decisions', #if_else)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "add(node, 'decisions_all', #if_else)",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "local count = 0",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "local exps = utils.searchForTagArray('Exp', node.data)",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "for _, expression in pairs(exps) do\r\n\t\t\tcount = count + countConditions(expression)\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 62,
    "text": "count = count + countConditions(expression)",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "add(node, 'conditions', count)",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "add(node, 'conditions_all', count)",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function(node)\r\n\t\tcopyData(node)\r\n\t\tadd(node, 'decisions', 1)\r\n\t\tadd(node, 'decisions_all', 1)\r\n\t\tadd(node, 'conditions', 1)\r\n\t\tadd(node, 'conditions_all', 1)\r\n\t\treturn node\r\n\tend",
    "type": "function"
  }, {
    "id": 67,
    "text": "add(node, 'conditions', 1)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "add(node, 'conditions_all', 1)",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function(node)\r\n\t\tcopyData(node)\r\n\t\tadd(node, 'decisions', 1)\r\n\t\tadd(node, 'decisions_all', 1)\r\n\t\tadd(node, 'conditions', 1)\r\n\t\tadd(node, 'conditions_all', 1)\r\n\t\treturn node\r\n\tend",
    "type": "function"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "function(node)\t\r\n\t\tcopyData(node)\r\n\t\tadd(node, 'decisions', 1)\r\n\t\tadd(node, 'decisions_all', 1)\r\n\t\t\r\n\t\tlocal exps = utils.searchForTagItem('Exp', node.data)\r\n\t\tlocal count = countConditions(exps)\r\n\t\tadd(node, 'conditions', count)\r\n\t\tadd(node, 'conditions_all', count)\r\n\t\t\r\n\t\treturn node\r\n\tend",
    "type": "function"
  }, {
    "id": 73,
    "text": "local exps = utils.searchForTagItem('Exp', node.data)",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "local count = countConditions(exps)",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "function(node)\t\r\n\t\tcopyData(node)\r\n\t\tadd(node, 'decisions', 1)\r\n\t\tadd(node, 'decisions_all', 1)\r\n\t\t\r\n\t\tlocal exps = utils.searchForTagItem('Exp', node.data)\r\n\t\tlocal count = countConditions(exps)\r\n\t\tadd(node, 'conditions', count)\r\n\t\tadd(node, 'conditions_all', count)\r\n\t\t\r\n\t\treturn node\r\n\tend",
    "type": "function"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "function(node)\r\n\t\tcopyData(node)\r\n\t\tsetLowerBound(node)\r\n\t\tsetUpperBound(node)\r\n\t\treturn node\r\n\tend",
    "type": "function"
  }, {
    "id": 79,
    "text": "setLowerBound(node)",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "setUpperBound(node)",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "function(node)\r\n\t\tcopyData(node)\r\n\t\tsetLowerBound(node)\r\n\t\tsetUpperBound(node)\r\n\t\treturn node\r\n\tend",
    "type": "function"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "function(node)\r\n\t\tcopyData(node)\r\n\t\tsetLowerBound(node)\r\n\t\tsetUpperBound(node)\r\n\t\treturn node\r\n\tend",
    "type": "function"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "function()\r\n\tlocal key,value\r\n\tlocal capture_table = {}\r\n\tfor key,value in pairs(keys) do\r\n\t\tcapture_table[key] = function (node) \r\n\t\t\tcopyData(node)\r\n\t\t\treturn node \r\n\t\tend\r\n\tend\r\n\t\r\n\tcapture_table.If = function(node)\r\n\t\tcopyData(node)\r\n\t\tadd(node, 'decisions', 1)\r\n\t\tadd(node, 'decisions_all', 1)\r\n\t\t\r\n\t\tlocal if_else = utils.searchForTagArray_key('ELSEIF', node.data)\r\n\t\tif (#if_else > 0) then \r\n\t\t\tadd(node, 'decisions', #if_else)\r\n\t\t\tadd(node, 'decisions_all', #if_else)\r\n\t\tend\r\n \t\t\r\n \t\tlocal count = 0\r\n \t\tlocal exps = utils.searchForTagArray('Exp', node.data)\r\n \t\tfor _, expression in pairs(exps) do\r\n\t\t\tcount = count + countConditions(expression)\r\n\t\tend\r\n\t\t\r\n\t\tadd(node, 'conditions', count)\r\n\t\tadd(node, 'conditions_all', count)\r\n\t\t\r\n\t\treturn node\r\n\tend\r\n\t\r\n\tcapture_table.NumericFor = function(node)\r\n\t\tcopyData(node)\r\n\t\tadd(node, 'decisions', 1)\r\n\t\tadd(node, 'decisions_all', 1)\r\n\t\tadd(node, 'conditions', 1)\r\n\t\tadd(node, 'conditions_all', 1)\r\n\t\treturn node\r\n\tend\r\n\t\r\n\tcapture_table.GenericFor = function(node)\r\n\t\tcopyData(node)\r\n\t\tadd(node, 'decisions', 1)\r\n\t\tadd(node, 'decisions_all', 1)\r\n\t\tadd(node, 'conditions', 1)\r\n\t\tadd(node, 'conditions_all', 1)\r\n\t\treturn node\r\n\tend\r\n\t\r\n\tcapture_table.While = function(node)\t\r\n\t\tcopyData(node)\r\n\t\tadd(node, 'decisions', 1)\r\n\t\tadd(node, 'decisions_all', 1)\r\n\t\t\r\n\t\tlocal exps = utils.searchForTagItem('Exp', node.data)\r\n\t\tlocal count = countConditions(exps)\r\n\t\tadd(node, 'conditions', count)\r\n\t\tadd(node, 'conditions_all', count)\r\n\t\t\r\n\t\treturn node\r\n\tend\r\n\t\r\n\tcapture_table.Repeat = function(node)\t\r\n\t\tcopyData(node)\r\n\t\tadd(node, 'decisions', 1)\r\n\t\tadd(node, 'decisions_all', 1)\r\n\t\t\r\n\t\tlocal exps = utils.searchForTagItem('Exp', node.data)\r\n\t\tlocal count = countConditions(exps)\r\n\t\tadd(node, 'conditions', count)\r\n\t\tadd(node, 'conditions_all', count)\r\n\t\t\r\n\t\treturn node\r\n\tend\r\n\t\r\n\t\r\n\tcapture_table.Function = function(node)\r\n\t\tcopyData(node)\r\n\t\tsetLowerBound(node)\r\n\t\tsetUpperBound(node)\r\n\t\treturn node\r\n\tend\r\n\t\r\n\tcapture_table.LocalFunction = function(node)\r\n\t\tcopyData(node)\r\n\t\tsetLowerBound(node)\r\n\t\tsetUpperBound(node)\r\n\t\treturn node\r\n\tend\r\n\t\r\n\tcapture_table.GlobalFunction = function(node)\r\n\t\tcopyData(node)\r\n\t\tsetLowerBound(node)\r\n\t\tsetUpperBound(node)\r\n\t\treturn node\r\n\tend\r\n\t\r\n\treturn capture_table\r\nend",
    "type": "function"
  }, {
    "id": 87,
    "text": "local key,value",
    "type": "statement:localassign"
  }, {
    "id": 88,
    "text": "local capture_table = {}",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "for key,value in pairs(keys) do\r\n\t\tcapture_table[key] = function (node) \r\n\t\t\tcopyData(node)\r\n\t\t\treturn node \r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 90,
    "text": "capture_table[key] = function (node) \r\n\t\t\tcopyData(node)\r\n\t\t\treturn node \r\n\t\tend",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "capture_table.If = function(node)\r\n\t\tcopyData(node)\r\n\t\tadd(node, 'decisions', 1)\r\n\t\tadd(node, 'decisions_all', 1)\r\n\t\t\r\n\t\tlocal if_else = utils.searchForTagArray_key('ELSEIF', node.data)\r\n\t\tif (#if_else > 0) then \r\n\t\t\tadd(node, 'decisions', #if_else)\r\n\t\t\tadd(node, 'decisions_all', #if_else)\r\n\t\tend\r\n \t\t\r\n \t\tlocal count = 0\r\n \t\tlocal exps = utils.searchForTagArray('Exp', node.data)\r\n \t\tfor _, expression in pairs(exps) do\r\n\t\t\tcount = count + countConditions(expression)\r\n\t\tend\r\n\t\t\r\n\t\tadd(node, 'conditions', count)\r\n\t\tadd(node, 'conditions_all', count)\r\n\t\t\r\n\t\treturn node\r\n\tend",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "capture_table.NumericFor = function(node)\r\n\t\tcopyData(node)\r\n\t\tadd(node, 'decisions', 1)\r\n\t\tadd(node, 'decisions_all', 1)\r\n\t\tadd(node, 'conditions', 1)\r\n\t\tadd(node, 'conditions_all', 1)\r\n\t\treturn node\r\n\tend",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "capture_table.GenericFor = function(node)\r\n\t\tcopyData(node)\r\n\t\tadd(node, 'decisions', 1)\r\n\t\tadd(node, 'decisions_all', 1)\r\n\t\tadd(node, 'conditions', 1)\r\n\t\tadd(node, 'conditions_all', 1)\r\n\t\treturn node\r\n\tend",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "capture_table.While = function(node)\t\r\n\t\tcopyData(node)\r\n\t\tadd(node, 'decisions', 1)\r\n\t\tadd(node, 'decisions_all', 1)\r\n\t\t\r\n\t\tlocal exps = utils.searchForTagItem('Exp', node.data)\r\n\t\tlocal count = countConditions(exps)\r\n\t\tadd(node, 'conditions', count)\r\n\t\tadd(node, 'conditions_all', count)\r\n\t\t\r\n\t\treturn node\r\n\tend",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "capture_table.Repeat = function(node)\t\r\n\t\tcopyData(node)\r\n\t\tadd(node, 'decisions', 1)\r\n\t\tadd(node, 'decisions_all', 1)\r\n\t\t\r\n\t\tlocal exps = utils.searchForTagItem('Exp', node.data)\r\n\t\tlocal count = countConditions(exps)\r\n\t\tadd(node, 'conditions', count)\r\n\t\tadd(node, 'conditions_all', count)\r\n\t\t\r\n\t\treturn node\r\n\tend",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "capture_table.Function = function(node)\r\n\t\tcopyData(node)\r\n\t\tsetLowerBound(node)\r\n\t\tsetUpperBound(node)\r\n\t\treturn node\r\n\tend",
    "type": "statement:assign"
  }, {
    "id": 97,
    "text": "capture_table.LocalFunction = function(node)\r\n\t\tcopyData(node)\r\n\t\tsetLowerBound(node)\r\n\t\tsetUpperBound(node)\r\n\t\treturn node\r\n\tend",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "capture_table.GlobalFunction = function(node)\r\n\t\tcopyData(node)\r\n\t\tsetLowerBound(node)\r\n\t\tsetUpperBound(node)\r\n\t\treturn node\r\n\tend",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 100,
    "text": "",
    "type": "function container"
  }, {
    "id": 101,
    "text": "function searchForTagItem(tagname, data)\r\n\tfor j,l in pairs(data) do\r\n\t\tif (l.tag == tagname) then\r\n\t\t\treturn l\t\r\n\t\tend\r\n\tend\r\n\treturn nil\r\nend",
    "type": "function"
  }, {
    "id": 102,
    "text": "function searchForTagArray(tagname, data)\r\n\tlocal nodes = {}\r\n\tfor j,l in pairs(data) do\r\n\t\tif (l.tag == tagname) then\r\n\t\t\ttable.insert(nodes, l)\t\r\n\t\tend\r\n\tend\r\n\treturn nodes\r\nend",
    "type": "function"
  }, {
    "id": 103,
    "text": "function searchForTagArray_key(key, data)\r\n\tlocal nodes = {}\r\n\tfor j,l in pairs(data) do\r\n\t\tif (l.key == key) then\r\n\t\t\ttable.insert(nodes, l)\t\r\n\t\tend\r\n\tend\r\n\treturn nodes\r\nend",
    "type": "function"
  }, {
    "id": 104,
    "text": "function searchForTagItem_recursive(tagname, node, maxdepth)\r\n\tif (node == nil) then return nil end\r\n\tlocal j,l\r\n\tif (maxdepth ~= nil) then maxdepth = maxdepth -1 end\r\n\tfor j,l in pairs(node.data) do\r\n\t\tif (l.tag == tagname) then\r\n\t\t\treturn l\r\n\t\telseif (l.data ~= nil) then\r\n\t\t\tif (maxdepth == nil or maxdepth > 0) then\r\n\t\t\t\tlocal tmp = searchForTagItem_recursive(tagname, l, maxdepth)\r\n\t\t\t\tif (tmp ~= nil) then return tmp end\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\treturn nil\r\nend",
    "type": "function"
  }, {
    "id": 105,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 106,
    "text": "find",
    "type": "global function"
  }, {
    "id": 107,
    "text": "module",
    "type": "global function"
  }, {
    "id": 108,
    "text": "require",
    "type": "global function"
  }, {
    "id": 109,
    "text": "",
    "type": "variable container"
  }, {
    "id": 110,
    "text": "",
    "type": "require container"
  }, {
    "id": 111,
    "text": "",
    "type": "local variable"
  }, {
    "id": 112,
    "text": "",
    "type": "n/a"
  }, {
    "id": 113,
    "text": "",
    "type": "local variable"
  }, {
    "id": 114,
    "text": "",
    "type": "n/a"
  }, {
    "id": 115,
    "text": "",
    "type": "local variable"
  }, {
    "id": 116,
    "text": "",
    "type": "n/a"
  }, {
    "id": 117,
    "text": "",
    "type": "local variable"
  }, {
    "id": 118,
    "text": "",
    "type": "n/a"
  }, {
    "id": 119,
    "text": "",
    "type": "global variable"
  }, {
    "id": 120,
    "text": "",
    "type": "n/a"
  }, {
    "id": 121,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 122,
    "text": "",
    "type": "local variable"
  }, {
    "id": 123,
    "text": "",
    "type": "require local variable"
  } ]
}