{
  "_filename": "lookup.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luametrics/src/metrics/lookup.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 4
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 10,
    "label": "has",
    "to": 8
  }, {
    "from": 10,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 4
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 16,
    "label": "has",
    "to": 8
  }, {
    "from": 16,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 4
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 22,
    "label": "has",
    "to": 8
  }, {
    "from": 22,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 4
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 28,
    "label": "has",
    "to": 8
  }, {
    "from": 28,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 4
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 34,
    "label": "has",
    "to": 8
  }, {
    "from": 34,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 4
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 40,
    "label": "has",
    "to": 8
  }, {
    "from": 40,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 4
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 46,
    "label": "has",
    "to": 8
  }, {
    "from": 46,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 4
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 52,
    "label": "has",
    "to": 8
  }, {
    "from": 52,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 4
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 58,
    "label": "has",
    "to": 8
  }, {
    "from": 58,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 4
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 62,
    "label": "has",
    "to": 8
  }, {
    "from": 62,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 4
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 68,
    "label": "has",
    "to": 8
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 69
  }, {
    "from": 72,
    "label": "has",
    "to": 4
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 72,
    "label": "has",
    "to": 8
  }, {
    "from": 72,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 4
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 77,
    "label": "has",
    "to": 8
  }, {
    "from": 77,
    "label": "has",
    "to": 82
  }, {
    "from": 83,
    "label": "has",
    "to": 69
  }, {
    "from": 83,
    "label": "has",
    "to": 4
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 83,
    "label": "has",
    "to": 8
  }, {
    "from": 83,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 4
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 88,
    "label": "has",
    "to": 8
  }, {
    "from": 88,
    "label": "has",
    "to": 94
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 95,
    "label": "has",
    "to": 4
  }, {
    "from": 95,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 95,
    "label": "has",
    "to": 8
  }, {
    "from": 95,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 59
  }, {
    "from": 103,
    "label": "has",
    "to": 4
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 103,
    "label": "has",
    "to": 8
  }, {
    "from": 103,
    "label": "has",
    "to": 109
  }, {
    "from": 110,
    "label": "has",
    "to": 69
  }, {
    "from": 110,
    "label": "has",
    "to": 4
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 110,
    "label": "has",
    "to": 112
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 112,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 32
  }, {
    "from": 110,
    "label": "has",
    "to": 8
  }, {
    "from": 110,
    "label": "has",
    "to": 116
  }, {
    "from": 117,
    "label": "has",
    "to": 17
  }, {
    "from": 117,
    "label": "has",
    "to": 4
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 117,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 119,
    "label": "has",
    "to": 121
  }, {
    "from": 121,
    "label": "has",
    "to": 32
  }, {
    "from": 117,
    "label": "has",
    "to": 8
  }, {
    "from": 117,
    "label": "has",
    "to": 122
  }, {
    "from": 123,
    "label": "has",
    "to": 23
  }, {
    "from": 123,
    "label": "has",
    "to": 4
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 123,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 125,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 38
  }, {
    "from": 123,
    "label": "has",
    "to": 8
  }, {
    "from": 123,
    "label": "has",
    "to": 128
  }, {
    "from": 129,
    "label": "has",
    "to": 63
  }, {
    "from": 129,
    "label": "has",
    "to": 4
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 129,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 131,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 81
  }, {
    "from": 129,
    "label": "has",
    "to": 8
  }, {
    "from": 129,
    "label": "has",
    "to": 134
  }, {
    "from": 135,
    "label": "has",
    "to": 69
  }, {
    "from": 135,
    "label": "has",
    "to": 4
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 135,
    "label": "has",
    "to": 8
  }, {
    "from": 135,
    "label": "has",
    "to": 143
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 144,
    "label": "has",
    "to": 4
  }, {
    "from": 144,
    "label": "has",
    "to": 146
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 147,
    "label": "has",
    "to": 149
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 149,
    "label": "has",
    "to": 151
  }, {
    "from": 151,
    "label": "has",
    "to": 7
  }, {
    "from": 144,
    "label": "has",
    "to": 8
  }, {
    "from": 144,
    "label": "has",
    "to": 152
  }, {
    "from": 153,
    "label": "has",
    "to": 11
  }, {
    "from": 153,
    "label": "has",
    "to": 4
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 153,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 148
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 156,
    "label": "has",
    "to": 150
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 7
  }, {
    "from": 153,
    "label": "has",
    "to": 8
  }, {
    "from": 153,
    "label": "has",
    "to": 158
  }, {
    "from": 159,
    "label": "has",
    "to": 69
  }, {
    "from": 159,
    "label": "has",
    "to": 4
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 159,
    "label": "has",
    "to": 161
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 161,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 81
  }, {
    "from": 159,
    "label": "has",
    "to": 8
  }, {
    "from": 159,
    "label": "has",
    "to": 163
  }, {
    "from": 164,
    "label": "has",
    "to": 11
  }, {
    "from": 164,
    "label": "has",
    "to": 4
  }, {
    "from": 164,
    "label": "has",
    "to": 165
  }, {
    "from": 164,
    "label": "has",
    "to": 166
  }, {
    "from": 166,
    "label": "has",
    "to": 111
  }, {
    "from": 166,
    "label": "has",
    "to": 167
  }, {
    "from": 167,
    "label": "has",
    "to": 56
  }, {
    "from": 164,
    "label": "has",
    "to": 8
  }, {
    "from": 164,
    "label": "has",
    "to": 168
  }, {
    "from": 169,
    "label": "has",
    "to": 96
  }, {
    "from": 169,
    "label": "has",
    "to": 4
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 170,
    "label": "has",
    "to": 171
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 173,
    "label": "has",
    "to": 150
  }, {
    "from": 173,
    "label": "has",
    "to": 174
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 174,
    "label": "has",
    "to": 176
  }, {
    "from": 176,
    "label": "has",
    "to": 32
  }, {
    "from": 169,
    "label": "has",
    "to": 8
  }, {
    "from": 169,
    "label": "has",
    "to": 177
  }, {
    "from": 178,
    "label": "has",
    "to": 11
  }, {
    "from": 178,
    "label": "has",
    "to": 4
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 178,
    "label": "has",
    "to": 180
  }, {
    "from": 180,
    "label": "has",
    "to": 113
  }, {
    "from": 180,
    "label": "has",
    "to": 121
  }, {
    "from": 121,
    "label": "has",
    "to": 32
  }, {
    "from": 178,
    "label": "has",
    "to": 8
  }, {
    "from": 178,
    "label": "has",
    "to": 181
  }, {
    "from": 182,
    "label": "has",
    "to": 11
  }, {
    "from": 182,
    "label": "has",
    "to": 4
  }, {
    "from": 182,
    "label": "has",
    "to": 165
  }, {
    "from": 182,
    "label": "has",
    "to": 183
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 183,
    "label": "has",
    "to": 185
  }, {
    "from": 185,
    "label": "has",
    "to": 75
  }, {
    "from": 182,
    "label": "has",
    "to": 8
  }, {
    "from": 182,
    "label": "has",
    "to": 186
  }, {
    "from": 187,
    "label": "has",
    "to": 59
  }, {
    "from": 187,
    "label": "has",
    "to": 188
  }, {
    "from": 187,
    "label": "has",
    "to": 189
  }, {
    "from": 187,
    "label": "has",
    "to": 8
  }, {
    "from": 187,
    "label": "has",
    "to": 190
  }, {
    "from": 187,
    "label": "has",
    "to": 191
  }, {
    "from": 187,
    "label": "has",
    "to": 8
  }, {
    "from": 187,
    "label": "has",
    "to": 192
  }, {
    "from": 187,
    "label": "has",
    "to": 193
  }, {
    "from": 187,
    "label": "has",
    "to": 8
  }, {
    "from": 187,
    "label": "has",
    "to": 194
  }, {
    "from": 187,
    "label": "has",
    "to": 195
  }, {
    "from": 187,
    "label": "has",
    "to": 8
  }, {
    "from": 187,
    "label": "has",
    "to": 8
  }, {
    "from": 187,
    "label": "has",
    "to": 196
  }, {
    "from": 197,
    "label": "has",
    "to": 59
  }, {
    "from": 197,
    "label": "has",
    "to": 4
  }, {
    "from": 197,
    "label": "has",
    "to": 198
  }, {
    "from": 197,
    "label": "has",
    "to": 199
  }, {
    "from": 197,
    "label": "has",
    "to": 8
  }, {
    "from": 197,
    "label": "has",
    "to": 200
  }, {
    "from": 197,
    "label": "has",
    "to": 8
  }, {
    "from": 197,
    "label": "has",
    "to": 201
  }, {
    "from": 2,
    "label": "calls",
    "to": 203
  }, {
    "from": 10,
    "label": "calls",
    "to": 203
  }, {
    "from": 16,
    "label": "calls",
    "to": 203
  }, {
    "from": 22,
    "label": "calls",
    "to": 203
  }, {
    "from": 28,
    "label": "calls",
    "to": 203
  }, {
    "from": 34,
    "label": "calls",
    "to": 203
  }, {
    "from": 40,
    "label": "calls",
    "to": 203
  }, {
    "from": 46,
    "label": "calls",
    "to": 203
  }, {
    "from": 52,
    "label": "calls",
    "to": 203
  }, {
    "from": 58,
    "label": "calls",
    "to": 203
  }, {
    "from": 62,
    "label": "calls",
    "to": 203
  }, {
    "from": 68,
    "label": "calls",
    "to": 203
  }, {
    "from": 72,
    "label": "calls",
    "to": 203
  }, {
    "from": 77,
    "label": "calls",
    "to": 203
  }, {
    "from": 83,
    "label": "calls",
    "to": 203
  }, {
    "from": 95,
    "label": "calls",
    "to": 203
  }, {
    "from": 103,
    "label": "calls",
    "to": 203
  }, {
    "from": 110,
    "label": "calls",
    "to": 203
  }, {
    "from": 117,
    "label": "calls",
    "to": 203
  }, {
    "from": 123,
    "label": "calls",
    "to": 203
  }, {
    "from": 129,
    "label": "calls",
    "to": 203
  }, {
    "from": 135,
    "label": "calls",
    "to": 203
  }, {
    "from": 144,
    "label": "calls",
    "to": 203
  }, {
    "from": 153,
    "label": "calls",
    "to": 203
  }, {
    "from": 159,
    "label": "calls",
    "to": 203
  }, {
    "from": 164,
    "label": "calls",
    "to": 203
  }, {
    "from": 169,
    "label": "calls",
    "to": 203
  }, {
    "from": 178,
    "label": "calls",
    "to": 203
  }, {
    "from": 182,
    "label": "calls",
    "to": 203
  }, {
    "from": 187,
    "label": "calls",
    "to": 203
  }, {
    "from": 197,
    "label": "calls",
    "to": 203
  }, {
    "from": 2,
    "label": "calls",
    "to": 204
  }, {
    "from": 10,
    "label": "calls",
    "to": 204
  }, {
    "from": 16,
    "label": "calls",
    "to": 204
  }, {
    "from": 22,
    "label": "calls",
    "to": 204
  }, {
    "from": 28,
    "label": "calls",
    "to": 204
  }, {
    "from": 34,
    "label": "calls",
    "to": 204
  }, {
    "from": 40,
    "label": "calls",
    "to": 204
  }, {
    "from": 46,
    "label": "calls",
    "to": 204
  }, {
    "from": 52,
    "label": "calls",
    "to": 204
  }, {
    "from": 58,
    "label": "calls",
    "to": 204
  }, {
    "from": 62,
    "label": "calls",
    "to": 204
  }, {
    "from": 68,
    "label": "calls",
    "to": 204
  }, {
    "from": 72,
    "label": "calls",
    "to": 204
  }, {
    "from": 77,
    "label": "calls",
    "to": 204
  }, {
    "from": 83,
    "label": "calls",
    "to": 204
  }, {
    "from": 88,
    "label": "calls",
    "to": 204
  }, {
    "from": 88,
    "label": "calls",
    "to": 204
  }, {
    "from": 95,
    "label": "calls",
    "to": 204
  }, {
    "from": 95,
    "label": "calls",
    "to": 204
  }, {
    "from": 103,
    "label": "calls",
    "to": 204
  }, {
    "from": 103,
    "label": "calls",
    "to": 204
  }, {
    "from": 110,
    "label": "calls",
    "to": 204
  }, {
    "from": 110,
    "label": "calls",
    "to": 204
  }, {
    "from": 117,
    "label": "calls",
    "to": 204
  }, {
    "from": 117,
    "label": "calls",
    "to": 204
  }, {
    "from": 123,
    "label": "calls",
    "to": 204
  }, {
    "from": 123,
    "label": "calls",
    "to": 204
  }, {
    "from": 129,
    "label": "calls",
    "to": 204
  }, {
    "from": 129,
    "label": "calls",
    "to": 204
  }, {
    "from": 135,
    "label": "calls",
    "to": 204
  }, {
    "from": 135,
    "label": "calls",
    "to": 204
  }, {
    "from": 135,
    "label": "calls",
    "to": 204
  }, {
    "from": 144,
    "label": "calls",
    "to": 204
  }, {
    "from": 144,
    "label": "calls",
    "to": 204
  }, {
    "from": 144,
    "label": "calls",
    "to": 204
  }, {
    "from": 153,
    "label": "calls",
    "to": 204
  }, {
    "from": 153,
    "label": "calls",
    "to": 204
  }, {
    "from": 153,
    "label": "calls",
    "to": 204
  }, {
    "from": 159,
    "label": "calls",
    "to": 204
  }, {
    "from": 159,
    "label": "calls",
    "to": 204
  }, {
    "from": 164,
    "label": "calls",
    "to": 204
  }, {
    "from": 164,
    "label": "calls",
    "to": 204
  }, {
    "from": 169,
    "label": "calls",
    "to": 204
  }, {
    "from": 169,
    "label": "calls",
    "to": 204
  }, {
    "from": 169,
    "label": "calls",
    "to": 204
  }, {
    "from": 169,
    "label": "calls",
    "to": 204
  }, {
    "from": 178,
    "label": "calls",
    "to": 204
  }, {
    "from": 178,
    "label": "calls",
    "to": 204
  }, {
    "from": 182,
    "label": "calls",
    "to": 204
  }, {
    "from": 182,
    "label": "calls",
    "to": 204
  }, {
    "from": 129,
    "label": "calls",
    "to": 62
  }, {
    "from": 123,
    "label": "calls",
    "to": 22
  }, {
    "from": 178,
    "label": "calls",
    "to": 164
  }, {
    "from": 144,
    "label": "calls",
    "to": 2
  }, {
    "from": 153,
    "label": "calls",
    "to": 2
  }, {
    "from": 169,
    "label": "calls",
    "to": 2
  }, {
    "from": 110,
    "label": "calls",
    "to": 68
  }, {
    "from": 164,
    "label": "calls",
    "to": 68
  }, {
    "from": 117,
    "label": "calls",
    "to": 16
  }, {
    "from": 129,
    "label": "calls",
    "to": 77
  }, {
    "from": 164,
    "label": "calls",
    "to": 153
  }, {
    "from": 182,
    "label": "calls",
    "to": 153
  }, {
    "from": 2,
    "label": "calls",
    "to": 205
  }, {
    "from": 10,
    "label": "calls",
    "to": 205
  }, {
    "from": 16,
    "label": "calls",
    "to": 205
  }, {
    "from": 22,
    "label": "calls",
    "to": 205
  }, {
    "from": 28,
    "label": "calls",
    "to": 205
  }, {
    "from": 34,
    "label": "calls",
    "to": 205
  }, {
    "from": 40,
    "label": "calls",
    "to": 205
  }, {
    "from": 46,
    "label": "calls",
    "to": 205
  }, {
    "from": 52,
    "label": "calls",
    "to": 205
  }, {
    "from": 58,
    "label": "calls",
    "to": 205
  }, {
    "from": 62,
    "label": "calls",
    "to": 205
  }, {
    "from": 68,
    "label": "calls",
    "to": 205
  }, {
    "from": 72,
    "label": "calls",
    "to": 205
  }, {
    "from": 77,
    "label": "calls",
    "to": 205
  }, {
    "from": 83,
    "label": "calls",
    "to": 205
  }, {
    "from": 95,
    "label": "calls",
    "to": 205
  }, {
    "from": 103,
    "label": "calls",
    "to": 205
  }, {
    "from": 110,
    "label": "calls",
    "to": 205
  }, {
    "from": 117,
    "label": "calls",
    "to": 205
  }, {
    "from": 123,
    "label": "calls",
    "to": 205
  }, {
    "from": 129,
    "label": "calls",
    "to": 205
  }, {
    "from": 135,
    "label": "calls",
    "to": 205
  }, {
    "from": 144,
    "label": "calls",
    "to": 205
  }, {
    "from": 153,
    "label": "calls",
    "to": 205
  }, {
    "from": 159,
    "label": "calls",
    "to": 205
  }, {
    "from": 164,
    "label": "calls",
    "to": 205
  }, {
    "from": 169,
    "label": "calls",
    "to": 205
  }, {
    "from": 178,
    "label": "calls",
    "to": 205
  }, {
    "from": 182,
    "label": "calls",
    "to": 205
  }, {
    "from": 117,
    "label": "calls",
    "to": 40
  }, {
    "from": 123,
    "label": "calls",
    "to": 40
  }, {
    "from": 159,
    "label": "calls",
    "to": 129
  }, {
    "from": 182,
    "label": "calls",
    "to": 72
  }, {
    "from": 159,
    "label": "calls",
    "to": 83
  }, {
    "from": 144,
    "label": "calls",
    "to": 46
  }, {
    "from": 153,
    "label": "calls",
    "to": 46
  }, {
    "from": 153,
    "label": "calls",
    "to": 10
  }, {
    "from": 110,
    "label": "calls",
    "to": 58
  }, {
    "from": 178,
    "label": "calls",
    "to": 58
  }, {
    "from": 169,
    "label": "calls",
    "to": 110
  }, {
    "from": 1,
    "label": "contains",
    "to": 202
  }, {
    "from": 202,
    "label": "declares",
    "to": 2
  }, {
    "from": 202,
    "label": "declares",
    "to": 10
  }, {
    "from": 202,
    "label": "declares",
    "to": 16
  }, {
    "from": 202,
    "label": "declares",
    "to": 22
  }, {
    "from": 202,
    "label": "declares",
    "to": 28
  }, {
    "from": 202,
    "label": "declares",
    "to": 34
  }, {
    "from": 202,
    "label": "declares",
    "to": 40
  }, {
    "from": 202,
    "label": "declares",
    "to": 46
  }, {
    "from": 202,
    "label": "declares",
    "to": 52
  }, {
    "from": 202,
    "label": "declares",
    "to": 58
  }, {
    "from": 202,
    "label": "declares",
    "to": 62
  }, {
    "from": 202,
    "label": "declares",
    "to": 68
  }, {
    "from": 202,
    "label": "declares",
    "to": 72
  }, {
    "from": 202,
    "label": "declares",
    "to": 77
  }, {
    "from": 202,
    "label": "declares",
    "to": 83
  }, {
    "from": 202,
    "label": "declares",
    "to": 88
  }, {
    "from": 202,
    "label": "declares",
    "to": 95
  }, {
    "from": 202,
    "label": "declares",
    "to": 103
  }, {
    "from": 202,
    "label": "declares",
    "to": 110
  }, {
    "from": 202,
    "label": "declares",
    "to": 117
  }, {
    "from": 202,
    "label": "declares",
    "to": 123
  }, {
    "from": 202,
    "label": "declares",
    "to": 129
  }, {
    "from": 202,
    "label": "declares",
    "to": 135
  }, {
    "from": 202,
    "label": "declares",
    "to": 144
  }, {
    "from": 202,
    "label": "declares",
    "to": 153
  }, {
    "from": 202,
    "label": "declares",
    "to": 159
  }, {
    "from": 202,
    "label": "declares",
    "to": 164
  }, {
    "from": 202,
    "label": "declares",
    "to": 169
  }, {
    "from": 202,
    "label": "declares",
    "to": 178
  }, {
    "from": 202,
    "label": "declares",
    "to": 182
  }, {
    "from": 202,
    "label": "declares",
    "to": 187
  }, {
    "from": 202,
    "label": "declares",
    "to": 197
  }, {
    "from": 1,
    "label": "contains",
    "to": 206
  }, {
    "from": 1,
    "label": "contains",
    "to": 207
  }, {
    "from": 206,
    "label": "initializes",
    "to": 208
  }, {
    "from": 208,
    "label": "assigns",
    "to": 209
  }, {
    "from": 206,
    "label": "initializes",
    "to": 210
  }, {
    "from": 210,
    "label": "assigns",
    "to": 211
  }, {
    "from": 206,
    "label": "initializes",
    "to": 212
  }, {
    "from": 212,
    "label": "assigns",
    "to": 213
  }, {
    "from": 206,
    "label": "initializes",
    "to": 214
  }, {
    "from": 214,
    "label": "assigns",
    "to": 215
  }, {
    "from": 1,
    "label": "provides",
    "to": 216
  }, {
    "from": 214,
    "label": "represents",
    "to": 217
  }, {
    "from": 216,
    "label": "provides",
    "to": 217
  }, {
    "from": 214,
    "label": "contains",
    "to": 2
  }, {
    "from": 214,
    "label": "contains",
    "to": 10
  }, {
    "from": 214,
    "label": "contains",
    "to": 16
  }, {
    "from": 214,
    "label": "contains",
    "to": 22
  }, {
    "from": 214,
    "label": "contains",
    "to": 28
  }, {
    "from": 214,
    "label": "contains",
    "to": 34
  }, {
    "from": 214,
    "label": "contains",
    "to": 40
  }, {
    "from": 214,
    "label": "contains",
    "to": 46
  }, {
    "from": 214,
    "label": "contains",
    "to": 52
  }, {
    "from": 214,
    "label": "contains",
    "to": 58
  }, {
    "from": 214,
    "label": "contains",
    "to": 62
  }, {
    "from": 214,
    "label": "contains",
    "to": 68
  }, {
    "from": 214,
    "label": "contains",
    "to": 72
  }, {
    "from": 214,
    "label": "contains",
    "to": 77
  }, {
    "from": 214,
    "label": "contains",
    "to": 83
  }, {
    "from": 214,
    "label": "contains",
    "to": 88
  }, {
    "from": 214,
    "label": "contains",
    "to": 95
  }, {
    "from": 214,
    "label": "contains",
    "to": 103
  }, {
    "from": 214,
    "label": "contains",
    "to": 110
  }, {
    "from": 214,
    "label": "contains",
    "to": 117
  }, {
    "from": 214,
    "label": "contains",
    "to": 123
  }, {
    "from": 214,
    "label": "contains",
    "to": 129
  }, {
    "from": 214,
    "label": "contains",
    "to": 135
  }, {
    "from": 214,
    "label": "contains",
    "to": 144
  }, {
    "from": 214,
    "label": "contains",
    "to": 153
  }, {
    "from": 214,
    "label": "contains",
    "to": 159
  }, {
    "from": 214,
    "label": "contains",
    "to": 164
  }, {
    "from": 214,
    "label": "contains",
    "to": 169
  }, {
    "from": 214,
    "label": "contains",
    "to": 178
  }, {
    "from": 214,
    "label": "contains",
    "to": 182
  }, {
    "from": 214,
    "label": "contains",
    "to": 187
  }, {
    "from": 214,
    "label": "contains",
    "to": 197
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "lookup",
    "type": "module"
  }, {
    "id": 2,
    "text": "function lookup.getSimpleExpsFromExp(exp)\r\n  assert(exp.tag == \"Exp\", \"[table].tag is not Exp\")\r\n  local tbl = {}\r\n    -- [Exp][_SimpleExp]\r\n  for _,simpleExp in pairs(exp.data) do\r\n    if (simpleExp.tag == '_SimpleExp') then\r\n      table.insert(tbl, simpleExp)\r\n    end\r\n  end\r\n  return tbl\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "assert(exp.tag == \"Exp\", \"[table].tag is not Exp\")",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "local tbl = {}",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "for _,simpleExp in pairs(exp.data) do\r\n    if (simpleExp.tag == '_SimpleExp') then\r\n      table.insert(tbl, simpleExp)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 6,
    "text": "if (simpleExp.tag == '_SimpleExp') then\r\n      table.insert(tbl, simpleExp)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "table.insert(tbl, simpleExp)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function lookup.getExpListsFromAssign(assign)\r\n  assert(assign.tag == \"LocalAssign\" or assign.tag == \"Assign\", \"[table].tag is not LocalAssign nor Assign\")\r\n  local tbl = {}\r\n    -- ([LocalAssign] | [Assign]) [ExpList]\r\n  for _,expList in pairs(assign.data) do\r\n    if (expList.tag == 'ExpList') then\r\n      table.insert(tbl, expList)\r\n    end\r\n  end\r\n  return tbl\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "assert(assign.tag == \"LocalAssign\" or assign.tag == \"Assign\", \"[table].tag is not LocalAssign nor Assign\")",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "for _,expList in pairs(assign.data) do\r\n    if (expList.tag == 'ExpList') then\r\n      table.insert(tbl, expList)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 13,
    "text": "if (expList.tag == 'ExpList') then\r\n      table.insert(tbl, expList)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "table.insert(tbl, expList)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function lookup.getNameListsFromLocalAssign(localAssign)\r\n  assert(localAssign.tag == \"LocalAssign\", \"[table].tag is not LocalAssign\")\r\n  local tbl = {}\r\n    -- [LocalAssign][NameList]\r\n  for _,nameList in pairs(localAssign.data) do\r\n    if (nameList.tag == 'NameList') then\r\n      table.insert(tbl, nameList)\r\n    end\r\n  end\r\n  return tbl\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "assert(localAssign.tag == \"LocalAssign\", \"[table].tag is not LocalAssign\")",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "for _,nameList in pairs(localAssign.data) do\r\n    if (nameList.tag == 'NameList') then\r\n      table.insert(tbl, nameList)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 19,
    "text": "if (nameList.tag == 'NameList') then\r\n      table.insert(tbl, nameList)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "table.insert(tbl, nameList)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function lookup.getVarListsFromAssign(assign)\r\n  assert(assign.tag == \"Assign\", \"[table].tag is not Assign\")\r\n  local tbl = {}\r\n    -- [Assign][VarList]\r\n  for _,varList in pairs(assign.data) do\r\n    if (varList.tag == 'VarList') then\r\n      table.insert(tbl, varList)\r\n    end\r\n  end\r\n  return tbl\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "assert(assign.tag == \"Assign\", \"[table].tag is not Assign\")",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "for _,varList in pairs(assign.data) do\r\n    if (varList.tag == 'VarList') then\r\n      table.insert(tbl, varList)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 25,
    "text": "if (varList.tag == 'VarList') then\r\n      table.insert(tbl, varList)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "table.insert(tbl, varList)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function lookup.getNamesFromNameList(nameList)\r\n  assert(nameList.tag == \"NameList\", \"[table].tag is not NameList\")\r\n  local tbl = {}\r\n    -- [NameList][Name]\r\n  for _,name in pairs(nameList.data) do\r\n    if (name.tag == 'Name') then\r\n      table.insert(tbl, name)\r\n    end\r\n  end\r\n  return tbl\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "assert(nameList.tag == \"NameList\", \"[table].tag is not NameList\")",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "for _,name in pairs(nameList.data) do\r\n    if (name.tag == 'Name') then\r\n      table.insert(tbl, name)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 31,
    "text": "if (name.tag == 'Name') then\r\n      table.insert(tbl, name)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "table.insert(tbl, name)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function lookup.getVarsFromVarList(varList)\r\n  assert(varList.tag == \"VarList\", \"[table].tag is not VarList\")\r\n  local tbl = {}\r\n    -- [VarList][Var]\r\n  for _,var in pairs(varList.data) do\r\n    if (var.tag == 'Var') then\r\n      table.insert(tbl, var)\r\n    end\r\n  end\r\n  return tbl\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "assert(varList.tag == \"VarList\", \"[table].tag is not VarList\")",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "for _,var in pairs(varList.data) do\r\n    if (var.tag == 'Var') then\r\n      table.insert(tbl, var)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 37,
    "text": "if (var.tag == 'Var') then\r\n      table.insert(tbl, var)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "table.insert(tbl, var)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function lookup.getNamesOrVarsFromList(list)\r\n  assert(list.tag == \"NameList\" or list.tag == \"VarList\", \"[table].tag is not NameList nor VarList\")\r\n  local tbl = {}\r\n    -- ([NameList][Name]) | ([VarList][Var])\r\n  for _,nameVar in pairs(list.data) do\r\n    if (nameVar.tag == 'Name' or nameVar.tag == 'Var') then\r\n      table.insert(tbl, nameVar)\r\n    end\r\n  end\r\n  return tbl\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "assert(list.tag == \"NameList\" or list.tag == \"VarList\", \"[table].tag is not NameList nor VarList\")",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "for _,nameVar in pairs(list.data) do\r\n    if (nameVar.tag == 'Name' or nameVar.tag == 'Var') then\r\n      table.insert(tbl, nameVar)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 43,
    "text": "if (nameVar.tag == 'Name' or nameVar.tag == 'Var') then\r\n      table.insert(tbl, nameVar)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "table.insert(tbl, nameVar)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function lookup.getExpsFromExpsList(expList)\r\n  assert(expList.tag == \"ExpList\", \"[table].tag is not ExpList\")\r\n  local tbl = {}\r\n    -- [ExpList][Exp]\r\n  for _,exp in pairs(expList.data) do\r\n    if (exp.tag == 'Exp') then\r\n      table.insert(tbl, exp)\r\n    end\r\n  end\r\n  return tbl\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "assert(expList.tag == \"ExpList\", \"[table].tag is not ExpList\")",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "for _,exp in pairs(expList.data) do\r\n    if (exp.tag == 'Exp') then\r\n      table.insert(tbl, exp)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 49,
    "text": "if (exp.tag == 'Exp') then\r\n      table.insert(tbl, exp)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "table.insert(tbl, exp)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function lookup.getPrefixExpFromFunctionCall(functionCall)\r\n  assert(functionCall.tag == \"FunctionCall\", \"[table].tag is not FunctionCall\")\r\n  local tbl = {}\r\n    -- [FunctionCall][_PrefixExp]\r\n  for _,prefixExp in pairs(functionCall.data) do\r\n    if (prefixExp.tag == '_PrefixExp') then\r\n      table.insert(tbl, prefixExp)\r\n    end       \r\n  end\r\n  return tbl\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "assert(functionCall.tag == \"FunctionCall\", \"[table].tag is not FunctionCall\")",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "for _,prefixExp in pairs(functionCall.data) do\r\n    if (prefixExp.tag == '_PrefixExp') then\r\n      table.insert(tbl, prefixExp)\r\n    end       \r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 55,
    "text": "if (prefixExp.tag == '_PrefixExp') then\r\n      table.insert(tbl, prefixExp)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "table.insert(tbl, prefixExp)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function lookup.getNamesFromPrefixExp(prefixExp)\r\n  assert(prefixExp.tag == \"_PrefixExp\", \"[table].tag is not _PrefixExp\")\r\n  local tbl = {}\r\n    -- [_PrefixExp][Name]\r\n  for _,name in pairs(prefixExp.data) do\r\n    if (name.tag == 'Name') then\r\n      table.insert(tbl, name)\r\n    end       \r\n  end\r\n  return tbl\r\nend",
    "type": "function"
  }, {
    "id": 59,
    "text": "assert(prefixExp.tag == \"_PrefixExp\", \"[table].tag is not _PrefixExp\")",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "for _,name in pairs(prefixExp.data) do\r\n    if (name.tag == 'Name') then\r\n      table.insert(tbl, name)\r\n    end       \r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "function lookup.getFuncBodyFromFunction(func)\r\n  assert(func.tag == \"Function\", \"[table].tag is not Function\")\r\n  local tbl = {}\r\n    -- [Function][FuncBody]\r\n  for _,funcBody in pairs(func.data) do\r\n    if (funcBody.tag == 'FuncBody') then\r\n      table.insert(tbl, funcBody)\r\n    end\r\n  end\r\n  return tbl\r\nend",
    "type": "function"
  }, {
    "id": 63,
    "text": "assert(func.tag == \"Function\", \"[table].tag is not Function\")",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "for _,funcBody in pairs(func.data) do\r\n    if (funcBody.tag == 'FuncBody') then\r\n      table.insert(tbl, funcBody)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 65,
    "text": "if (funcBody.tag == 'FuncBody') then\r\n      table.insert(tbl, funcBody)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "table.insert(tbl, funcBody)",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "function lookup.getPrefixExpsFromSimpleExp(simpleExp)\r\n  assert(simpleExp.tag == \"_SimpleExp\", \"[table].tag is not _SimpleExp\")\r\n  local tbl = {}\r\n    -- [_SimpleExp][_PrefixExp]\r\n  for _,prefixExp in pairs(simpleExp.data) do\r\n    if (prefixExp.tag == '_PrefixExp') then\r\n      table.insert(tbl, prefixExp)\r\n    end\r\n  end\r\n  return tbl\r\nend",
    "type": "function"
  }, {
    "id": 69,
    "text": "assert(simpleExp.tag == \"_SimpleExp\", \"[table].tag is not _SimpleExp\")",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "for _,prefixExp in pairs(simpleExp.data) do\r\n    if (prefixExp.tag == '_PrefixExp') then\r\n      table.insert(tbl, prefixExp)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "function lookup.getTableConstructorsFromSimpleExp(simpleExp)\r\n  assert(simpleExp.tag == \"_SimpleExp\", \"[table].tag is not _SimpleExp\")\r\n  local tbl = {}\r\n    -- [_SimpleExp][TableContructor]\r\n  for _,tblConstr in pairs(simpleExp.data) do\r\n    if (tblConstr.tag == 'TableConstructor') then\r\n      table.insert(tbl, tblConstr)\r\n    end\r\n  end\r\n  return tbl\r\nend",
    "type": "function"
  }, {
    "id": 73,
    "text": "for _,tblConstr in pairs(simpleExp.data) do\r\n    if (tblConstr.tag == 'TableConstructor') then\r\n      table.insert(tbl, tblConstr)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 74,
    "text": "if (tblConstr.tag == 'TableConstructor') then\r\n      table.insert(tbl, tblConstr)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "table.insert(tbl, tblConstr)",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "function lookup.getParListsFromFuncBody(funcBody)\r\n  assert(funcBody.tag == \"FuncBody\", \"[table].tag is not FuncBody\")\r\n  local tbl = {}\r\n    -- [FuncBody][ParList]\r\n  for _,parList in pairs(funcBody.data) do\r\n    if (parList.tag == 'ParList') then\r\n      table.insert(tbl, parList)\r\n    end\r\n  end\r\n  return tbl\r\nend",
    "type": "function"
  }, {
    "id": 78,
    "text": "assert(funcBody.tag == \"FuncBody\", \"[table].tag is not FuncBody\")",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "for _,parList in pairs(funcBody.data) do\r\n    if (parList.tag == 'ParList') then\r\n      table.insert(tbl, parList)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 80,
    "text": "if (parList.tag == 'ParList') then\r\n      table.insert(tbl, parList)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "table.insert(tbl, parList)",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 83,
    "text": "function lookup.getFunctionsFromSimpleExp(simpleExp)\r\n  assert(simpleExp.tag == \"_SimpleExp\", \"[table].tag is not _SimpleExp\")\r\n  local tbl = {}\r\n    -- [_SimpleExp][Function]\r\n  for _,func in pairs(simpleExp.data) do\r\n    if (func.tag == 'Function') then\r\n      table.insert(tbl, func)\r\n    end\r\n  end\r\n  return tbl\r\nend",
    "type": "function"
  }, {
    "id": 84,
    "text": "for _,func in pairs(simpleExp.data) do\r\n    if (func.tag == 'Function') then\r\n      table.insert(tbl, func)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 85,
    "text": "if (func.tag == 'Function') then\r\n      table.insert(tbl, func)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 86,
    "text": "table.insert(tbl, func)",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "function lookup.getBlockFromFunction(func)\r\n  local tbl = {}\r\n    -- [Function][FuncBody][Block]\r\n  for _,funcBody in pairs(func.data) do\r\n    if (funcBody.tag == 'FuncBody') then\r\n      for _,block in pairs(funcBody.data) do\r\n        if (block.tag == 'Block') then\r\n          tbl = block\r\n          break\r\n        end\r\n      end\r\n      break\r\n    end\r\n  end\r\n  return tbl\r\nend",
    "type": "function"
  }, {
    "id": 89,
    "text": "for _,funcBody in pairs(func.data) do\r\n    if (funcBody.tag == 'FuncBody') then\r\n      for _,block in pairs(funcBody.data) do\r\n        if (block.tag == 'Block') then\r\n          tbl = block\r\n          break\r\n        end\r\n      end\r\n      break\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 90,
    "text": "if (funcBody.tag == 'FuncBody') then\r\n      for _,block in pairs(funcBody.data) do\r\n        if (block.tag == 'Block') then\r\n          tbl = block\r\n          break\r\n        end\r\n      end\r\n      break\r\n    end",
    "type": "statement:if"
  }, {
    "id": 91,
    "text": "for _,block in pairs(funcBody.data) do\r\n        if (block.tag == 'Block') then\r\n          tbl = block\r\n          break\r\n        end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 92,
    "text": "if (block.tag == 'Block') then\r\n          tbl = block\r\n          break\r\n        end",
    "type": "statement:if"
  }, {
    "id": 93,
    "text": "tbl = block",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 95,
    "text": "function lookup.getIDsFromField(field)\r\n  assert(field.tag == \"Field\", \"[table].tag is not Field\")\r\n  local tbl = {}\r\n    -- [Field][_FieldID][ID]  \r\n  for _,fieldID in pairs(field.data) do\r\n    if (fieldID.tag == '_FieldID') then\r\n      for _,id in pairs(fieldID.data) do\r\n        if (id.tag == 'ID') then\r\n          table.insert(tbl, id)\r\n        end\r\n      end\r\n    end\r\n  end\r\n  return tbl\r\nend",
    "type": "function"
  }, {
    "id": 96,
    "text": "assert(field.tag == \"Field\", \"[table].tag is not Field\")",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "for _,fieldID in pairs(field.data) do\r\n    if (fieldID.tag == '_FieldID') then\r\n      for _,id in pairs(fieldID.data) do\r\n        if (id.tag == 'ID') then\r\n          table.insert(tbl, id)\r\n        end\r\n      end\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 98,
    "text": "if (fieldID.tag == '_FieldID') then\r\n      for _,id in pairs(fieldID.data) do\r\n        if (id.tag == 'ID') then\r\n          table.insert(tbl, id)\r\n        end\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 99,
    "text": "for _,id in pairs(fieldID.data) do\r\n        if (id.tag == 'ID') then\r\n          table.insert(tbl, id)\r\n        end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 100,
    "text": "if (id.tag == 'ID') then\r\n          table.insert(tbl, id)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 101,
    "text": "table.insert(tbl, id)",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "function lookup.getArgsFromPrefixExp(prefixExp)\r\n  assert(prefixExp.tag == \"_PrefixExp\", \"[table].tag is not _PrefixExp\")\r\n  local tbl = {}\r\n    -- [_PrefixExp][_PrefixExpArgs][Args]\r\n  for _,prefixExpArg in pairs(prefixExp.data) do\r\n    if (prefixExpArg.tag == '_PrefixExpArgs') then\r\n      for _,arg in pairs(prefixExpArg.data) do\r\n        if (arg.tag == 'Args') then\r\n          table.insert(tbl, arg)\r\n        end\r\n      end\r\n    end\r\n  end\r\n  return tbl\r\nend",
    "type": "function"
  }, {
    "id": 104,
    "text": "for _,prefixExpArg in pairs(prefixExp.data) do\r\n    if (prefixExpArg.tag == '_PrefixExpArgs') then\r\n      for _,arg in pairs(prefixExpArg.data) do\r\n        if (arg.tag == 'Args') then\r\n          table.insert(tbl, arg)\r\n        end\r\n      end\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 105,
    "text": "if (prefixExpArg.tag == '_PrefixExpArgs') then\r\n      for _,arg in pairs(prefixExpArg.data) do\r\n        if (arg.tag == 'Args') then\r\n          table.insert(tbl, arg)\r\n        end\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 106,
    "text": "for _,arg in pairs(prefixExpArg.data) do\r\n        if (arg.tag == 'Args') then\r\n          table.insert(tbl, arg)\r\n        end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 107,
    "text": "if (arg.tag == 'Args') then\r\n          table.insert(tbl, arg)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 108,
    "text": "table.insert(tbl, arg)",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 110,
    "text": "function lookup.getNamesFromSimpleExp(simpleExp)\r\n  assert(simpleExp.tag == \"_SimpleExp\", \"[table].tag is not _SimpleExp\")\r\n  local tbl = {}\r\n    -- [_SimpleExp][_PrefixExp][Name]\r\n  local prefixExps = lookup.getPrefixExpsFromSimpleExp(simpleExp)\r\n  for _,prefixExp in pairs(prefixExps) do\r\n    local names = lookup.getNamesFromPrefixExp(prefixExp)\r\n    for _,name in pairs(names) do\r\n      if (name.tag == 'Name') then\r\n        table.insert(tbl, name)\r\n      end\r\n    end\r\n  end\r\n  return tbl\r\nend",
    "type": "function"
  }, {
    "id": 111,
    "text": "local prefixExps = lookup.getPrefixExpsFromSimpleExp(simpleExp)",
    "type": "statement:localassign"
  }, {
    "id": 112,
    "text": "for _,prefixExp in pairs(prefixExps) do\r\n    local names = lookup.getNamesFromPrefixExp(prefixExp)\r\n    for _,name in pairs(names) do\r\n      if (name.tag == 'Name') then\r\n        table.insert(tbl, name)\r\n      end\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 113,
    "text": "local names = lookup.getNamesFromPrefixExp(prefixExp)",
    "type": "statement:localassign"
  }, {
    "id": 114,
    "text": "for _,name in pairs(names) do\r\n      if (name.tag == 'Name') then\r\n        table.insert(tbl, name)\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 115,
    "text": "if (name.tag == 'Name') then\r\n        table.insert(tbl, name)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 116,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 117,
    "text": "function lookup.getLeftNamesFromLocalAssign(localAssign)\r\n  assert(localAssign.tag == \"LocalAssign\", \"[table].tag is not LocalAssign\")\r\n  local tbl = {}  \r\n    -- [LocalAssign][NameList][Name]\r\n  local nameLists = lookup.getNameListsFromLocalAssign(localAssign)  \r\n  for _,nameList in pairs(nameLists) do\r\n    local names = lookup.getNamesOrVarsFromList(nameList)\r\n    for _,name in pairs(names) do\r\n      table.insert(tbl, name)\r\n    end\r\n  end\r\n  return tbl\r\nend",
    "type": "function"
  }, {
    "id": 118,
    "text": "local nameLists = lookup.getNameListsFromLocalAssign(localAssign)",
    "type": "statement:localassign"
  }, {
    "id": 119,
    "text": "for _,nameList in pairs(nameLists) do\r\n    local names = lookup.getNamesOrVarsFromList(nameList)\r\n    for _,name in pairs(names) do\r\n      table.insert(tbl, name)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 120,
    "text": "local names = lookup.getNamesOrVarsFromList(nameList)",
    "type": "statement:localassign"
  }, {
    "id": 121,
    "text": "for _,name in pairs(names) do\r\n      table.insert(tbl, name)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 122,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 123,
    "text": "function lookup.getLeftVarsFromAssign(assign)\r\n  assert(assign.tag == \"Assign\", \"[table].tag is not Assign\")\r\n  local tbl = {}  \r\n    -- [Assign][VarList][Var]\r\n  local varLists = lookup.getVarListsFromAssign(assign)  \r\n  for _,varList in pairs(varLists) do\r\n    local vars = lookup.getNamesOrVarsFromList(varList)\r\n    for _,var in pairs(vars) do\r\n      table.insert(tbl, var)\r\n    end\r\n  end\r\n  return tbl\r\nend",
    "type": "function"
  }, {
    "id": 124,
    "text": "local varLists = lookup.getVarListsFromAssign(assign)",
    "type": "statement:localassign"
  }, {
    "id": 125,
    "text": "for _,varList in pairs(varLists) do\r\n    local vars = lookup.getNamesOrVarsFromList(varList)\r\n    for _,var in pairs(vars) do\r\n      table.insert(tbl, var)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 126,
    "text": "local vars = lookup.getNamesOrVarsFromList(varList)",
    "type": "statement:localassign"
  }, {
    "id": 127,
    "text": "for _,var in pairs(vars) do\r\n      table.insert(tbl, var)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 128,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 129,
    "text": "function lookup.getParListsFromFunction(func)\r\n  assert(func.tag == \"Function\", \"[table].tag is not Function\")\r\n  local tbl = {}\r\n    -- [Function][FuncBody][ParList]\r\n  local funcBodies = lookup.getFuncBodyFromFunction(func)  \r\n  for _,funcBody in pairs(funcBodies) do\r\n    local parLists = lookup.getParListsFromFuncBody(funcBody)\r\n    for _,parList in pairs(parLists) do\r\n      table.insert(tbl, parList)\r\n    end \r\n  end    \r\n  return tbl\r\nend",
    "type": "function"
  }, {
    "id": 130,
    "text": "local funcBodies = lookup.getFuncBodyFromFunction(func)",
    "type": "statement:localassign"
  }, {
    "id": 131,
    "text": "for _,funcBody in pairs(funcBodies) do\r\n    local parLists = lookup.getParListsFromFuncBody(funcBody)\r\n    for _,parList in pairs(parLists) do\r\n      table.insert(tbl, parList)\r\n    end \r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 132,
    "text": "local parLists = lookup.getParListsFromFuncBody(funcBody)",
    "type": "statement:localassign"
  }, {
    "id": 133,
    "text": "for _,parList in pairs(parLists) do\r\n      table.insert(tbl, parList)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 134,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 135,
    "text": "function lookup.getFieldsFromSimpleExp(simpleExp)\r\n  assert(simpleExp.tag == \"_SimpleExp\", \"[table].tag is not _SimpleExp\")\r\n  local tbl = {}\r\n    -- [_SimpleExp][TableConstructor][FieldList][Field]\r\n  for _,tblConstr in pairs(simpleExp.data) do\r\n    if (tblConstr.tag == 'TableConstructor') then\r\n      for _,fieldList in pairs(tblConstr.data) do\r\n        if (fieldList.tag == 'FieldList') then\r\n          for _,field in pairs(fieldList.data) do\r\n            if (field.tag == 'Field') then\r\n              table.insert(tbl, field)\r\n            end\r\n          end\r\n        end\r\n      end\r\n    end\r\n  end\r\n  return tbl\r\nend",
    "type": "function"
  }, {
    "id": 136,
    "text": "for _,tblConstr in pairs(simpleExp.data) do\r\n    if (tblConstr.tag == 'TableConstructor') then\r\n      for _,fieldList in pairs(tblConstr.data) do\r\n        if (fieldList.tag == 'FieldList') then\r\n          for _,field in pairs(fieldList.data) do\r\n            if (field.tag == 'Field') then\r\n              table.insert(tbl, field)\r\n            end\r\n          end\r\n        end\r\n      end\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 137,
    "text": "if (tblConstr.tag == 'TableConstructor') then\r\n      for _,fieldList in pairs(tblConstr.data) do\r\n        if (fieldList.tag == 'FieldList') then\r\n          for _,field in pairs(fieldList.data) do\r\n            if (field.tag == 'Field') then\r\n              table.insert(tbl, field)\r\n            end\r\n          end\r\n        end\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 138,
    "text": "for _,fieldList in pairs(tblConstr.data) do\r\n        if (fieldList.tag == 'FieldList') then\r\n          for _,field in pairs(fieldList.data) do\r\n            if (field.tag == 'Field') then\r\n              table.insert(tbl, field)\r\n            end\r\n          end\r\n        end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 139,
    "text": "if (fieldList.tag == 'FieldList') then\r\n          for _,field in pairs(fieldList.data) do\r\n            if (field.tag == 'Field') then\r\n              table.insert(tbl, field)\r\n            end\r\n          end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 140,
    "text": "for _,field in pairs(fieldList.data) do\r\n            if (field.tag == 'Field') then\r\n              table.insert(tbl, field)\r\n            end\r\n          end",
    "type": "statement:genericfor"
  }, {
    "id": 141,
    "text": "if (field.tag == 'Field') then\r\n              table.insert(tbl, field)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 142,
    "text": "table.insert(tbl, field)",
    "type": "statement:functioncall"
  }, {
    "id": 143,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 144,
    "text": "function lookup.getSimpleExpsFromLastStat(lastStat)\r\n  assert(lastStat.tag == \"LastStat\", \"[table].tag is not LastStat\")\r\n  local tbl = {}\r\n    -- [LastStat][ExpList][Exp][_SimpleExp]\r\n  for _,expList in pairs(lastStat.data) do\r\n    if (expList.tag == 'ExpList') then\r\n      local exps = lookup.getExpsFromExpsList(expList)\r\n      for _,exp in pairs(exps) do\r\n        local simpleExps = lookup.getSimpleExpsFromExp(exp)\r\n        for _,simpleExp in pairs(simpleExps) do\r\n          table.insert(tbl, simpleExp)\r\n        end\r\n      end\r\n    end\r\n  end\r\n  return tbl\r\nend",
    "type": "function"
  }, {
    "id": 145,
    "text": "assert(lastStat.tag == \"LastStat\", \"[table].tag is not LastStat\")",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "for _,expList in pairs(lastStat.data) do\r\n    if (expList.tag == 'ExpList') then\r\n      local exps = lookup.getExpsFromExpsList(expList)\r\n      for _,exp in pairs(exps) do\r\n        local simpleExps = lookup.getSimpleExpsFromExp(exp)\r\n        for _,simpleExp in pairs(simpleExps) do\r\n          table.insert(tbl, simpleExp)\r\n        end\r\n      end\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 147,
    "text": "if (expList.tag == 'ExpList') then\r\n      local exps = lookup.getExpsFromExpsList(expList)\r\n      for _,exp in pairs(exps) do\r\n        local simpleExps = lookup.getSimpleExpsFromExp(exp)\r\n        for _,simpleExp in pairs(simpleExps) do\r\n          table.insert(tbl, simpleExp)\r\n        end\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 148,
    "text": "local exps = lookup.getExpsFromExpsList(expList)",
    "type": "statement:localassign"
  }, {
    "id": 149,
    "text": "for _,exp in pairs(exps) do\r\n        local simpleExps = lookup.getSimpleExpsFromExp(exp)\r\n        for _,simpleExp in pairs(simpleExps) do\r\n          table.insert(tbl, simpleExp)\r\n        end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 150,
    "text": "local simpleExps = lookup.getSimpleExpsFromExp(exp)",
    "type": "statement:localassign"
  }, {
    "id": 151,
    "text": "for _,simpleExp in pairs(simpleExps) do\r\n          table.insert(tbl, simpleExp)\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 152,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 153,
    "text": "function lookup.getSimpleExpsFromAssign(assign)\r\n  assert(assign.tag == \"LocalAssign\" or assign.tag == \"Assign\", \"[table].tag is not LocalAssign nor Assign\")\r\n  local tbl = {}\r\n    -- ([LocalAssign] | [Assign]) [ExpList][Exp][_SimpleExp]\r\n  local expLists = lookup.getExpListsFromAssign(assign)\r\n  for _,expList in pairs(expLists) do    \r\n    local exps = lookup.getExpsFromExpsList(expList)\r\n    for _,exp in pairs(exps) do\r\n      local simpleExps = lookup.getSimpleExpsFromExp(exp)\r\n      for _,simpleExp in pairs(simpleExps) do\r\n        table.insert(tbl, simpleExp)\r\n      end\r\n    end\r\n  end\r\n  return tbl\r\nend",
    "type": "function"
  }, {
    "id": 154,
    "text": "local expLists = lookup.getExpListsFromAssign(assign)",
    "type": "statement:localassign"
  }, {
    "id": 155,
    "text": "for _,expList in pairs(expLists) do    \r\n    local exps = lookup.getExpsFromExpsList(expList)\r\n    for _,exp in pairs(exps) do\r\n      local simpleExps = lookup.getSimpleExpsFromExp(exp)\r\n      for _,simpleExp in pairs(simpleExps) do\r\n        table.insert(tbl, simpleExp)\r\n      end\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 156,
    "text": "for _,exp in pairs(exps) do\r\n      local simpleExps = lookup.getSimpleExpsFromExp(exp)\r\n      for _,simpleExp in pairs(simpleExps) do\r\n        table.insert(tbl, simpleExp)\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 157,
    "text": "for _,simpleExp in pairs(simpleExps) do\r\n        table.insert(tbl, simpleExp)\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 158,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 159,
    "text": "function lookup.getParListsFromSimpleExp(simpleExp)\r\n  assert(simpleExp.tag == \"_SimpleExp\", \"[table].tag is not _SimpleExp\")\r\n  local tbl = {}\r\n    -- [_SimpleExp][Function][FuncBody][ParList]\r\n  local functions = lookup.getFunctionsFromSimpleExp(simpleExp)\r\n  for _,func in pairs(functions) do\r\n    local parLists = lookup.getParListsFromFunction(func)\r\n    for _,parList in pairs(parLists) do\r\n      table.insert(tbl, parList)\r\n    end\r\n  end\r\n  return tbl\r\nend",
    "type": "function"
  }, {
    "id": 160,
    "text": "local functions = lookup.getFunctionsFromSimpleExp(simpleExp)",
    "type": "statement:localassign"
  }, {
    "id": 161,
    "text": "for _,func in pairs(functions) do\r\n    local parLists = lookup.getParListsFromFunction(func)\r\n    for _,parList in pairs(parLists) do\r\n      table.insert(tbl, parList)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 162,
    "text": "local parLists = lookup.getParListsFromFunction(func)",
    "type": "statement:localassign"
  }, {
    "id": 163,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 164,
    "text": "function lookup.getPrefixExpsFromAssign(assign)\r\n  assert(assign.tag == \"LocalAssign\" or assign.tag == \"Assign\", \"[table].tag is not LocalAssign nor Assign\")\r\n  local tbl = {}\r\n    -- ([LocalAssign] | [Assign]) [ExpList][Exp][_SimpleExp][_PrefixExp]\r\n  local simpleExps = lookup.getSimpleExpsFromAssign(assign)\r\n  for _,simpleExp in pairs(simpleExps) do\r\n    local prefixExps = lookup.getPrefixExpsFromSimpleExp(simpleExp)\r\n    for _,prefixExp in pairs(prefixExps) do\r\n      table.insert(tbl, prefixExp)\r\n    end    \r\n  end\r\n  return tbl\r\nend",
    "type": "function"
  }, {
    "id": 165,
    "text": "local simpleExps = lookup.getSimpleExpsFromAssign(assign)",
    "type": "statement:localassign"
  }, {
    "id": 166,
    "text": "for _,simpleExp in pairs(simpleExps) do\r\n    local prefixExps = lookup.getPrefixExpsFromSimpleExp(simpleExp)\r\n    for _,prefixExp in pairs(prefixExps) do\r\n      table.insert(tbl, prefixExp)\r\n    end    \r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 167,
    "text": "for _,prefixExp in pairs(prefixExps) do\r\n      table.insert(tbl, prefixExp)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 168,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 169,
    "text": "function lookup.getNamesFromField(field)\r\n  assert(field.tag == \"Field\", \"[table].tag is not Field\")\r\n  local tbl = {}\r\n    -- [Field][_FieldID][Exp][_SimpleExp][_PrefixExp][Name]\r\n  for _,fieldID in pairs(field.data) do\r\n    if (fieldID.tag == '_FieldID') then\r\n      for _,exp in pairs(fieldID.data) do\r\n        if (exp.tag == 'Exp') then\r\n          local simpleExps = lookup.getSimpleExpsFromExp(exp)\r\n          for _,simpleExp in pairs(simpleExps) do\r\n            local names = lookup.getNamesFromSimpleExp(simpleExp)\r\n            for _,name in pairs(names) do\r\n              table.insert(tbl, name)\r\n            end\r\n          end\r\n        end\r\n      end\r\n    end\r\n  end \r\n  return tbl\r\nend",
    "type": "function"
  }, {
    "id": 170,
    "text": "for _,fieldID in pairs(field.data) do\r\n    if (fieldID.tag == '_FieldID') then\r\n      for _,exp in pairs(fieldID.data) do\r\n        if (exp.tag == 'Exp') then\r\n          local simpleExps = lookup.getSimpleExpsFromExp(exp)\r\n          for _,simpleExp in pairs(simpleExps) do\r\n            local names = lookup.getNamesFromSimpleExp(simpleExp)\r\n            for _,name in pairs(names) do\r\n              table.insert(tbl, name)\r\n            end\r\n          end\r\n        end\r\n      end\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 171,
    "text": "if (fieldID.tag == '_FieldID') then\r\n      for _,exp in pairs(fieldID.data) do\r\n        if (exp.tag == 'Exp') then\r\n          local simpleExps = lookup.getSimpleExpsFromExp(exp)\r\n          for _,simpleExp in pairs(simpleExps) do\r\n            local names = lookup.getNamesFromSimpleExp(simpleExp)\r\n            for _,name in pairs(names) do\r\n              table.insert(tbl, name)\r\n            end\r\n          end\r\n        end\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 172,
    "text": "for _,exp in pairs(fieldID.data) do\r\n        if (exp.tag == 'Exp') then\r\n          local simpleExps = lookup.getSimpleExpsFromExp(exp)\r\n          for _,simpleExp in pairs(simpleExps) do\r\n            local names = lookup.getNamesFromSimpleExp(simpleExp)\r\n            for _,name in pairs(names) do\r\n              table.insert(tbl, name)\r\n            end\r\n          end\r\n        end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 173,
    "text": "if (exp.tag == 'Exp') then\r\n          local simpleExps = lookup.getSimpleExpsFromExp(exp)\r\n          for _,simpleExp in pairs(simpleExps) do\r\n            local names = lookup.getNamesFromSimpleExp(simpleExp)\r\n            for _,name in pairs(names) do\r\n              table.insert(tbl, name)\r\n            end\r\n          end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 174,
    "text": "for _,simpleExp in pairs(simpleExps) do\r\n            local names = lookup.getNamesFromSimpleExp(simpleExp)\r\n            for _,name in pairs(names) do\r\n              table.insert(tbl, name)\r\n            end\r\n          end",
    "type": "statement:genericfor"
  }, {
    "id": 175,
    "text": "local names = lookup.getNamesFromSimpleExp(simpleExp)",
    "type": "statement:localassign"
  }, {
    "id": 176,
    "text": "for _,name in pairs(names) do\r\n              table.insert(tbl, name)\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 177,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 178,
    "text": "function lookup.getRightNamesFromAssign(assign)\r\n  assert(assign.tag == \"LocalAssign\" or assign.tag == \"Assign\", \"[table].tag is not LocalAssign nor Assign\")\r\n  local tbl = {}\r\n    -- ([LocalAssign] | [Assign]) [ExpList][Exp][_SimpleExp][_PrefixExp][Name]  \r\n  local prefixExps = lookup.getPrefixExpsFromAssign(assign)\r\n  for _,prefixExp in pairs(prefixExps) do\r\n    local names = lookup.getNamesFromPrefixExp(prefixExp)\r\n    for _,name in pairs(names) do\r\n      table.insert(tbl, name)\r\n    end\r\n  end\r\n  return tbl\r\nend",
    "type": "function"
  }, {
    "id": 179,
    "text": "local prefixExps = lookup.getPrefixExpsFromAssign(assign)",
    "type": "statement:localassign"
  }, {
    "id": 180,
    "text": "for _,prefixExp in pairs(prefixExps) do\r\n    local names = lookup.getNamesFromPrefixExp(prefixExp)\r\n    for _,name in pairs(names) do\r\n      table.insert(tbl, name)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 181,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 182,
    "text": "function lookup.getTableConstructorsFromAssign(assign)\r\n  assert(assign.tag == \"LocalAssign\" or assign.tag == \"Assign\", \"[table].tag is not LocalAssign nor Assign\")\r\n  local tbl = {}\r\n    -- ([LocalAssign] | [Assign]) [ExpList][Exp][_SimpleExp][TableConstructor]\r\n  local simpleExps = lookup.getSimpleExpsFromAssign(assign)\r\n  for _,simpleExp in pairs(simpleExps) do\r\n    local tblConstrs = lookup.getTableConstructorsFromSimpleExp(simpleExp)\r\n    for _,tblConstr in pairs(tblConstrs) do\r\n      table.insert(tbl, tblConstr)\r\n    end\r\n  end\r\n  return tbl\r\nend",
    "type": "function"
  }, {
    "id": 183,
    "text": "for _,simpleExp in pairs(simpleExps) do\r\n    local tblConstrs = lookup.getTableConstructorsFromSimpleExp(simpleExp)\r\n    for _,tblConstr in pairs(tblConstrs) do\r\n      table.insert(tbl, tblConstr)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 184,
    "text": "local tblConstrs = lookup.getTableConstructorsFromSimpleExp(simpleExp)",
    "type": "statement:localassign"
  }, {
    "id": 185,
    "text": "for _,tblConstr in pairs(tblConstrs) do\r\n      table.insert(tbl, tblConstr)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 186,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 187,
    "text": "function lookup.getLocalAssignsFromPrefixExp(prefixExp)\r\n  assert(prefixExp.tag == \"_PrefixExp\", \"[table].tag is not _PrefixExp\")\r\n  \r\n    -- [LocalAssign][ExpList][Exp][_SimpleExp][_PrefixExp]\r\n  local simpleExp = prefixExp.parent\r\n  if (simpleExp.tag ~= '_SimpleExp') then return nil end\r\n  \r\n  local exp = simpleExp.parent\r\n  if (exp.tag ~= 'Exp') then return nil end\r\n  \r\n  local expList = exp.parent\r\n  if (expList.tag ~= 'ExpList') then return nil end\r\n  \r\n  local localAssign = expList.parent\r\n  if (localAssign.tag ~= 'LocalAssign') then return nil end\r\n\r\n  return localAssign\r\nend",
    "type": "function"
  }, {
    "id": 188,
    "text": "local simpleExp = prefixExp.parent",
    "type": "statement:localassign"
  }, {
    "id": 189,
    "text": "if (simpleExp.tag ~= '_SimpleExp') then return nil end",
    "type": "statement:if"
  }, {
    "id": 190,
    "text": "local exp = simpleExp.parent",
    "type": "statement:localassign"
  }, {
    "id": 191,
    "text": "if (exp.tag ~= 'Exp') then return nil end",
    "type": "statement:if"
  }, {
    "id": 192,
    "text": "local expList = exp.parent",
    "type": "statement:localassign"
  }, {
    "id": 193,
    "text": "if (expList.tag ~= 'ExpList') then return nil end",
    "type": "statement:if"
  }, {
    "id": 194,
    "text": "local localAssign = expList.parent",
    "type": "statement:localassign"
  }, {
    "id": 195,
    "text": "if (localAssign.tag ~= 'LocalAssign') then return nil end",
    "type": "statement:if"
  }, {
    "id": 196,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 197,
    "text": "function lookup.getLocalAssignsFromPrefixExp1(prefixExp)\r\n  assert(prefixExp.tag == \"_PrefixExp\", \"[table].tag is not _PrefixExp\")\r\n  local tbl = {}\r\n    -- [LocalAssign][ExpList][Exp][_SimpleExp][_PrefixExp]  \r\n  local localAssign = prefixExp.parent.parent.parent.parent\r\n  if (localAssign.tag ~= 'LocalAssign') then return tbl end\r\n  \r\n  tbl = localAssign  \r\n  \r\n  return tbl\r\nend",
    "type": "function"
  }, {
    "id": 198,
    "text": "local localAssign = prefixExp.parent.parent.parent.parent",
    "type": "statement:localassign"
  }, {
    "id": 199,
    "text": "if (localAssign.tag ~= 'LocalAssign') then return tbl end",
    "type": "statement:if"
  }, {
    "id": 200,
    "text": "tbl = localAssign",
    "type": "statement:assign"
  }, {
    "id": 201,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 202,
    "text": "",
    "type": "function container"
  }, {
    "id": 203,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 204,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 205,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 206,
    "text": "",
    "type": "variable container"
  }, {
    "id": 207,
    "text": "",
    "type": "require container"
  }, {
    "id": 208,
    "text": "",
    "type": "local variable"
  }, {
    "id": 209,
    "text": "",
    "type": "n/a"
  }, {
    "id": 210,
    "text": "",
    "type": "local variable"
  }, {
    "id": 211,
    "text": "",
    "type": "n/a"
  }, {
    "id": 212,
    "text": "",
    "type": "local variable"
  }, {
    "id": 213,
    "text": "",
    "type": "n/a"
  }, {
    "id": 214,
    "text": "",
    "type": "local variable"
  }, {
    "id": 215,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 216,
    "text": "",
    "type": "interface container"
  }, {
    "id": 217,
    "text": "",
    "type": "interface"
  } ]
}