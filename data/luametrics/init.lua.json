{
  "_filename": "init.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luametrics/src/metrics/templates/init.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 3
  }, {
    "from": 9,
    "label": "calls",
    "to": 45
  }, {
    "from": 9,
    "label": "calls",
    "to": 51
  }, {
    "from": 9,
    "label": "calls",
    "to": 46
  }, {
    "from": 9,
    "label": "calls",
    "to": 41
  }, {
    "from": 9,
    "label": "calls",
    "to": 52
  }, {
    "from": 9,
    "label": "calls",
    "to": 52
  }, {
    "from": 9,
    "label": "calls",
    "to": 52
  }, {
    "from": 9,
    "label": "calls",
    "to": 52
  }, {
    "from": 9,
    "label": "calls",
    "to": 52
  }, {
    "from": 9,
    "label": "calls",
    "to": 52
  }, {
    "from": 9,
    "label": "calls",
    "to": 52
  }, {
    "from": 9,
    "label": "calls",
    "to": 52
  }, {
    "from": 9,
    "label": "calls",
    "to": 52
  }, {
    "from": 9,
    "label": "calls",
    "to": 52
  }, {
    "from": 9,
    "label": "calls",
    "to": 52
  }, {
    "from": 9,
    "label": "calls",
    "to": 52
  }, {
    "from": 9,
    "label": "calls",
    "to": 52
  }, {
    "from": 9,
    "label": "calls",
    "to": 52
  }, {
    "from": 9,
    "label": "calls",
    "to": 52
  }, {
    "from": 9,
    "label": "calls",
    "to": 52
  }, {
    "from": 9,
    "label": "calls",
    "to": 52
  }, {
    "from": 9,
    "label": "calls",
    "to": 47
  }, {
    "from": 9,
    "label": "calls",
    "to": 47
  }, {
    "from": 9,
    "label": "calls",
    "to": 47
  }, {
    "from": 9,
    "label": "calls",
    "to": 47
  }, {
    "from": 9,
    "label": "calls",
    "to": 47
  }, {
    "from": 9,
    "label": "calls",
    "to": 47
  }, {
    "from": 9,
    "label": "calls",
    "to": 47
  }, {
    "from": 9,
    "label": "calls",
    "to": 47
  }, {
    "from": 9,
    "label": "calls",
    "to": 47
  }, {
    "from": 9,
    "label": "calls",
    "to": 47
  }, {
    "from": 9,
    "label": "calls",
    "to": 47
  }, {
    "from": 3,
    "label": "contains",
    "to": 9
  }, {
    "from": 9,
    "label": "declares",
    "to": 6
  }, {
    "from": 9,
    "label": "declares",
    "to": 7
  }, {
    "from": 9,
    "label": "declares",
    "to": 8
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 13
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 19,
    "label": "has",
    "to": 13
  }, {
    "from": 19,
    "label": "has",
    "to": 13
  }, {
    "from": 19,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 30,
    "label": "has",
    "to": 34
  }, {
    "from": 30,
    "label": "has",
    "to": 35
  }, {
    "from": 28,
    "label": "has",
    "to": 36
  }, {
    "from": 28,
    "label": "has",
    "to": 37
  }, {
    "from": 28,
    "label": "has",
    "to": 38
  }, {
    "from": 28,
    "label": "has",
    "to": 13
  }, {
    "from": 28,
    "label": "has",
    "to": 39
  }, {
    "from": 19,
    "label": "calls",
    "to": 10
  }, {
    "from": 19,
    "label": "calls",
    "to": 48
  }, {
    "from": 28,
    "label": "calls",
    "to": 48
  }, {
    "from": 28,
    "label": "calls",
    "to": 40
  }, {
    "from": 28,
    "label": "calls",
    "to": 44
  }, {
    "from": 19,
    "label": "calls",
    "to": 49
  }, {
    "from": 9,
    "label": "calls",
    "to": 52
  }, {
    "from": 9,
    "label": "calls",
    "to": 52
  }, {
    "from": 9,
    "label": "calls",
    "to": 52
  }, {
    "from": 9,
    "label": "calls",
    "to": 52
  }, {
    "from": 9,
    "label": "calls",
    "to": 52
  }, {
    "from": 28,
    "label": "calls",
    "to": 19
  }, {
    "from": 10,
    "label": "calls",
    "to": 50
  }, {
    "from": 10,
    "label": "calls",
    "to": 50
  }, {
    "from": 19,
    "label": "calls",
    "to": 50
  }, {
    "from": 19,
    "label": "calls",
    "to": 50
  }, {
    "from": 19,
    "label": "calls",
    "to": 50
  }, {
    "from": 28,
    "label": "calls",
    "to": 43
  }, {
    "from": 9,
    "label": "declares",
    "to": 10
  }, {
    "from": 9,
    "label": "declares",
    "to": 19
  }, {
    "from": 9,
    "label": "declares",
    "to": 28
  }, {
    "from": 3,
    "label": "contains",
    "to": 53
  }, {
    "from": 3,
    "label": "contains",
    "to": 54
  }, {
    "from": 53,
    "label": "initializes",
    "to": 55
  }, {
    "from": 53,
    "label": "initializes",
    "to": 56
  }, {
    "from": 53,
    "label": "initializes",
    "to": 57
  }, {
    "from": 53,
    "label": "initializes",
    "to": 58
  }, {
    "from": 53,
    "label": "initializes",
    "to": 59
  }, {
    "from": 53,
    "label": "initializes",
    "to": 60
  }, {
    "from": 53,
    "label": "initializes",
    "to": 61
  }, {
    "from": 53,
    "label": "initializes",
    "to": 62
  }, {
    "from": 54,
    "label": "initializes",
    "to": 63
  }, {
    "from": 54,
    "label": "initializes",
    "to": 64
  }, {
    "from": 54,
    "label": "initializes",
    "to": 65
  }, {
    "from": 54,
    "label": "initializes",
    "to": 66
  }, {
    "from": 54,
    "label": "initializes",
    "to": 67
  }, {
    "from": 54,
    "label": "initializes",
    "to": 68
  }, {
    "from": 54,
    "label": "initializes",
    "to": 69
  }, {
    "from": 54,
    "label": "initializes",
    "to": 70
  }, {
    "from": 54,
    "label": "initializes",
    "to": 71
  }, {
    "from": 54,
    "label": "initializes",
    "to": 72
  }, {
    "from": 54,
    "label": "initializes",
    "to": 73
  }, {
    "from": 54,
    "label": "initializes",
    "to": 74
  }, {
    "from": 54,
    "label": "initializes",
    "to": 75
  }, {
    "from": 54,
    "label": "initializes",
    "to": 76
  }, {
    "from": 54,
    "label": "initializes",
    "to": 77
  }, {
    "from": 54,
    "label": "initializes",
    "to": 78
  }, {
    "from": 54,
    "label": "initializes",
    "to": 79
  }, {
    "from": 3,
    "label": "contains",
    "to": 80
  }, {
    "from": 3,
    "label": "contains",
    "to": 81
  }, {
    "from": 81,
    "label": "initializes",
    "to": 82
  }, {
    "from": 82,
    "label": "requires",
    "to": 42
  }, {
    "from": 81,
    "label": "initializes",
    "to": 83
  }, {
    "from": 83,
    "label": "requires",
    "to": 5
  }, {
    "from": 81,
    "label": "initializes",
    "to": 84
  }, {
    "from": 84,
    "label": "requires",
    "to": 1
  }, {
    "from": 81,
    "label": "initializes",
    "to": 85
  }, {
    "from": 85,
    "label": "requires",
    "to": 4
  }, {
    "from": 81,
    "label": "initializes",
    "to": 86
  }, {
    "from": 86,
    "label": "requires",
    "to": 2
  }, {
    "from": 3,
    "label": "provides",
    "to": 87
  }, {
    "from": 28,
    "label": "represents",
    "to": 88
  }, {
    "from": 87,
    "label": "provides",
    "to": 88
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "docMetricsTemplates",
    "type": "module"
  }, {
    "id": 2,
    "text": "funcTableTemplates",
    "type": "module"
  }, {
    "id": 3,
    "text": "init",
    "type": "module"
  }, {
    "id": 4,
    "text": "smellTemplates",
    "type": "module"
  }, {
    "id": 5,
    "text": "utils",
    "type": "module"
  }, {
    "id": 6,
    "text": "function(...)\r\n\treturn {...}\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function processText(code)\r\n\r\n\tlocal result = patt:match(code)[1]\r\n\r\n\treturn result\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function doGlobalMetrics(file_metricsAST_list)\r\n\r\n\t-- keep AST lists\r\n\tlocal returnObject = {}\r\n\treturnObject.file_AST_list = file_metricsAST_list\r\n\r\n\t--- function declarations\r\n\tlocal total_function_definitions = {}\r\n\r\n\tlocal anonymouscounter=0   -- for naming anonymous functions\r\n\tlocal anonymouscounterT = 0 -- for naming anonymous  tables\r\n\tfor filename, AST in pairs(file_metricsAST_list) do\r\n\t\tfor _, fun in pairs(AST.metrics.blockdata.fundefs) do\r\n\r\n\t\t\t-- edit to suit luadoc expectations\r\n\t\t\tif (fun.tag == 'GlobalFunction' or fun.tag == 'LocalFunction' or fun.tag == 'Function') then\r\n-- anonymous function type\r\n\t\t\t\tif(fun.name==\"#anonymous#\")then\r\n\t\t\t\t\tanonymouscounter=anonymouscounter+1\r\n\t\t\t\t\tfun.name = fun.name .. anonymouscounter\r\n\t\t\t\t\tfun.path = filename\r\n\t\t\t\telseif(fun.name:match(\"[%.%[]\") or fun.isGlobal==nil)then\r\n-- table-field function type\r\n\t\t\t\t\tfun.fcntype = 'table-field'\r\n\t\t\t\telseif (fun.isGlobal) then fun.fcntype = 'global' else fun.fcntype = 'local' end\r\n\t\t\t\t\tfun.path = filename\r\n\t\t\t\t\ttable.insert(total_function_definitions, fun)\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\ttable.sort(total_function_definitions, utils.compare_functions_by_name)\r\n\treturnObject.functionDefinitions = total_function_definitions\r\n\r\n\r\n-- ^ `tables` list of tables in files , concatenate luaDoc_tables and docutables\r\n\tlocal total_table_definitions = {}\r\n\tlocal set = {}\r\n\tfor filename, AST in pairs(file_metricsAST_list) do\r\n\r\n\t-- concatenate two tables by  Exp node tables\r\n\r\n\t\tfor k,tabl in pairs(AST.luaDoc_tables) do\r\n\t\t\ttabl.path=filename\r\n\t\t\ttabl.name = k\r\n\t\t\ttable.insert(total_table_definitions, tabl)\r\n\t\t\tset[tabl] = true\r\n\t\tend\r\n\t\tfor k,tabl in pairs(AST.metrics.docutables) do\r\n\t\t\tif(tabl.ttype==\"anonymous\")then\r\n\t\t\t\tanonymouscounterT=anonymouscounterT+1\r\n\t\t\t \ttabl.name = tabl.name .. anonymouscounterT\r\n\t\t\tend\r\n\t\t\tif (not tabl.Expnode) then\r\n\t\t\t \ttabl.path = filename\r\n\t\t\t\ttable.insert(total_table_definitions, tabl)\r\n\t\t\telseif(set[tabl.Expnode]~=true)then\r\n\t\t\t\ttabl.path = filename\r\n\t\t\t\ttable.insert(total_table_definitions, tabl)\r\n\t\t\t\tset[tabl.Expnode] = true\r\n\t\t\tend\r\n\t\tend\r\n \tend\r\n\treturnObject.tables = total_table_definitions\r\n\r\n\r\n\r\n\t-- merge number of lines metrics\r\n\treturnObject.LOC = {}\r\n\r\n\tfor filename, AST in pairs(file_metricsAST_list) do\r\n\r\n\t\tfor name, count in pairs(AST.metrics.LOC) do\r\n\t\t\tif not returnObject.LOC[name] then returnObject.LOC[name] = 0 end\r\n\t\t\treturnObject.LOC[name] = returnObject.LOC[name] + count\r\n\t\tend\r\n\r\n\tend\r\n\t-- combine halstead metrics\r\n\r\n\tlocal operators, operands = {}, {}\r\n\r\n\tfor filename, AST in pairs(file_metricsAST_list) do\r\n\t\tfor name, count in pairs(AST.metrics.halstead.operators) do\r\n\t\t\tif (operators[name] == nil) then\r\n\t\t\t\toperators[name] = count\r\n\t\t\telse\r\n\t\t\t\toperators[name] = operators[name] + count\r\n\t\t\tend\r\n\t\tend\r\n\t\tfor name, count in pairs(AST.metrics.halstead.operands) do\r\n\t\t\tif (operands[name] == nil) then\r\n\t\t\t\toperands[name] = count\r\n\t\t\telse\r\n\t\t\t\toperands[name] = operands[name] + count\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\r\n\tlocal number_of_operators = 0\r\n\tlocal unique_operators = 0\r\n\tfor op, count in pairs(operators) do\r\n\t\tunique_operators = unique_operators + 1\r\n\t\tnumber_of_operators = number_of_operators + count\r\n\tend\r\n\r\n\tlocal number_of_operands = 0\r\n\tlocal unique_operands = 0\r\n\tfor op, count in pairs(operands) do\r\n\t\tunique_operands = unique_operands + 1\r\n\t\tnumber_of_operands = number_of_operands + count\r\n\tend\r\n\r\n\treturnObject.halstead = {}\r\n\r\n\thalstead_capt.calculateHalstead(returnObject.halstead, operators, operands)\r\n\r\n\t-- instability metric for each module\r\n\t-- \t\tafferent and efferent coupling --- instability metric\r\n\t-- \t\tafferent - connection to other modules\r\n\t-- \t\tefferent - connetions from other modules\r\n\r\n\tfor currentFilename, currentAST in pairs(file_metricsAST_list) do\r\n\r\n\t\tcurrentAST.metrics.coupling = {}\r\n\t\tcurrentAST.metrics.coupling.afferent_coupling = 0\r\n\t\tcurrentAST.metrics.coupling.efferent_coupling = 0\r\n\r\n\t\tlocal currentName = currentAST.metrics.currentModuleName or filename\r\n\r\n\t\tfor name in pairs(currentAST.metrics.moduleCalls) do\r\n\t\t\tcurrentAST.metrics.coupling.afferent_coupling = currentAST.metrics.coupling.afferent_coupling + 1\r\n\t\tend\r\n\r\n\t\tfor filename, AST in pairs(file_metricsAST_list) do\r\n\t\t\tif (filename ~= currentFilename) then\r\n\t\t\t\tif (AST.metrics.moduleCalls[currentName]) then currentAST.metrics.coupling.efferent_coupling = currentAST.metrics.coupling.efferent_coupling + 1 end\r\n\t\t\tend\r\n\t\tend\r\n\r\n\t\tcurrentAST.metrics.coupling.instability = currentAST.metrics.coupling.afferent_coupling / (currentAST.metrics.coupling.efferent_coupling + currentAST.metrics.coupling.afferent_coupling)\r\n\r\n\tend\r\n\r\n\t-- statement metrics\r\n\r\n\treturnObject.statements = {}\r\n\r\n\tfor filename, AST in pairs(file_metricsAST_list) do\r\n\r\n\t\tfor name, stats in pairs(AST.metrics.statements) do\r\n\t\t\tif not returnObject.statements[name] then returnObject.statements[name] = {} end\r\n\t\t\tfor _, stat in pairs(stats) do\r\n\t\t\t\ttable.insert(returnObject.statements[name], stat)\r\n\t\t\tend\r\n\t\tend\r\n\r\n\tend\r\n\r\n\t-- merge moduleDefinitions\r\n\treturnObject.moduleDefinitions = {}\r\n\r\n\tfor filename, AST in pairs(file_metricsAST_list) do\r\n\t\tfor exec, moduleRef in pairs(AST.metrics.moduleDefinitions) do\r\n\t\t\tif (moduleRef.moduleName) then\r\n\t\t\t\ttable.insert(returnObject.moduleDefinitions, moduleRef)\r\n\t\t\tend\r\n\t\tend\r\n\r\n\tend\r\n\r\n\r\n\t--merge document metrics\r\n\treturnObject.documentMetrics={}\r\n\tfor filename, AST in pairs(file_metricsAST_list) do\r\n\t\tfor name, count in pairs(AST.metrics.documentMetrics) do\r\n\t\t\tif( type(count)==\"table\")then\r\n\t\t\t\tif not returnObject.documentMetrics[name] then returnObject.documentMetrics[name]={} end\r\n\t\t\t\tfor _,v in pairs(count) do\r\n\t\t\t\t\ttable.insert(returnObject.documentMetrics[name],v)\r\n\t\t\t\tend\r\n\t\t\telse\r\n\t\t\t\tif not returnObject.documentMetrics[name] then returnObject.documentMetrics[name] = 0 end\r\n\t\t\t\treturnObject.documentMetrics[name]=returnObject.documentMetrics[name]+count\r\n\t\t\tend\r\n\t\tend\r\n\tend\t\t\r\n  \r\n  --merge code smells\r\n  returnObject.documentSmells = {} --Document smells sub-table\r\n  returnObject.documentSmells.MI = smells_capt.countMI(file_metricsAST_list) --Add maintainability index\r\n  returnObject.documentSmells.functionSmells = smells_capt.countFunctionSmells(file_metricsAST_list) --Add function smells eg: LOC, cyclomatic, halstead etc.\r\n  returnObject.documentSmells.moduleSmells = {} --Module smells sub-table\r\n  returnObject.documentSmells.smellsTable = smells_capt.getSmells(file_metricsAST_list)\r\n\r\n\r\n  for filename, AST in pairs(file_metricsAST_list) do --Merge smells in modules to sub-table\r\n    table.insert(returnObject.documentSmells.moduleSmells, {file = filename, RFC = AST.smells.RFC, WMC = AST.smells.WMC, NOM = AST.smells.NOM, responseToNOM = AST.smells.responseToNOM, CBO = AST.smells.CBO, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlongLines = AST.smells.longLines })\r\n  end\r\n\r\n\treturn returnObject\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "",
    "type": "function container"
  }, {
    "id": 10,
    "text": "local function customStringFind(sample, pattern)\r\n\tlocal i = 1\r\n\r\n\tif(#pattern > #sample) then --If path to root directory is longer than path to file\r\n\t\treturn nil \r\n\tend\r\n\r\n\tfor i = 1, #pattern do --Looping trough paths and looking for match\r\n\r\n\t\tlocal sampleChar = string.sub(sample, i, i)\r\n\t\tlocal patternChar = string.sub(pattern, i, i)\r\n\r\n\t\tif(sampleChar ~= patternChar) then --If paths does not match\r\n\t\t\treturn nil\r\n\t\tend\r\n\tend\r\n\r\n\treturn (#pattern + 1) --If paths matches returns start of sample which is not included in pattern\r\n\t\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "local i = 1",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "if(#pattern > #sample) then --If path to root directory is longer than path to file\r\n\t\treturn nil \r\n\tend",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 14,
    "text": "for i = 1, #pattern do --Looping trough paths and looking for match\r\n\r\n\t\tlocal sampleChar = string.sub(sample, i, i)\r\n\t\tlocal patternChar = string.sub(pattern, i, i)\r\n\r\n\t\tif(sampleChar ~= patternChar) then --If paths does not match\r\n\t\t\treturn nil\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 15,
    "text": "local sampleChar = string.sub(sample, i, i)",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "local patternChar = string.sub(pattern, i, i)",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "if(sampleChar ~= patternChar) then --If paths does not match\r\n\t\t\treturn nil\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function cutPathToSources(path, directiories)\r\n\t\r\n\tif(directiories == nil) then --If directory list not provided\r\n\t\t\r\n\t\tlocal index = string.find(path, \"/[^/]*[[/].[^/]*]?$\")\r\n\t\treturn string.sub(path, index) --Returns subpath of last directory and filename eg: /directory/file.lua\r\n\r\n\tend\r\n\r\n\tfor _, name in pairs(directiories) do --Loops through directories\r\n\r\n\t\tlocal index = name:match('^.*()/') --Checks for last /\r\n\t\tname = string.sub(name, 0, index)\r\n\r\n\t\tlocal res = customStringFind(path, name)\r\n\t\tif(res ~= nil) then --If file is in directory\r\n\t\t\t\r\n\t\t\treturn ('/' .. string.sub(path, res)) --Returns substring\r\n\t\t\t\r\n\t\tend\r\n\tend\r\n\t\r\n\treturn path --If none of the directories contains file returns full path\r\n\t\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "if(directiories == nil) then --If directory list not provided\r\n\t\t\r\n\t\tlocal index = string.find(path, \"/[^/]*[[/].[^/]*]?$\")\r\n\t\treturn string.sub(path, index) --Returns subpath of last directory and filename eg: /directory/file.lua\r\n\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "local index = string.find(path, \"/[^/]*[[/].[^/]*]?$\")",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "for _, name in pairs(directiories) do --Loops through directories\r\n\r\n\t\tlocal index = name:match('^.*()/') --Checks for last /\r\n\t\tname = string.sub(name, 0, index)\r\n\r\n\t\tlocal res = customStringFind(path, name)\r\n\t\tif(res ~= nil) then --If file is in directory\r\n\t\t\t\r\n\t\t\treturn ('/' .. string.sub(path, res)) --Returns substring\r\n\t\t\t\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 23,
    "text": "local index = name:match('^.*()/')",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "name = string.sub(name, 0, index)",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "local res = customStringFind(path, name)",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "if(res ~= nil) then --If file is in directory\r\n\t\t\t\r\n\t\t\treturn ('/' .. string.sub(path, res)) --Returns substring\r\n\t\t\t\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "local function createASTAndMerge(fileList, directiories)\r\n\r\n\tlocal metricsAST_results = {} --Create table for ASTs\r\n\r\n\tfor _, filepath in pairs(fileList) do --Loop through files in fileList\r\n\r\n\t\tlocal text = utils.readFile(filepath) --Reads file\r\n\t\tlocal formatted_text = text:gsub(\"\\r\\n\",\"\\n\"); --Substracts windows newlines (\\r\\n) with linux ones (\\n) to prevent failures\r\n\t\tlocal AST = metrics.processText(formatted_text) --Create AST\r\n\t\t\t\r\n\t\tfilepath = cutPathToSources(filepath, directiories) --Cut path to file to only contain filename and directory\r\n\r\n\t\tmetricsAST_results[filepath] = AST --Save AST in temp table\r\n\r\n\tend\r\n\r\n\tlocal globalMetrics = metrics.doGlobalMetrics(metricsAST_results) --Create return object with all metrics and ASTs of project\r\n\r\n\tglobalMetrics.moduleNum = #globalMetrics.moduleDefinitions --Add number of modules\r\n\tglobalMetrics.fileNum = #fileList --Add number of files\r\n\r\n\treturn globalMetrics\r\n\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "local metricsAST_results = {}",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "for _, filepath in pairs(fileList) do --Loop through files in fileList\r\n\r\n\t\tlocal text = utils.readFile(filepath) --Reads file\r\n\t\tlocal formatted_text = text:gsub(\"\\r\\n\",\"\\n\"); --Substracts windows newlines (\\r\\n) with linux ones (\\n) to prevent failures\r\n\t\tlocal AST = metrics.processText(formatted_text) --Create AST\r\n\t\t\t\r\n\t\tfilepath = cutPathToSources(filepath, directiories) --Cut path to file to only contain filename and directory\r\n\r\n\t\tmetricsAST_results[filepath] = AST --Save AST in temp table\r\n\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 31,
    "text": "local text = utils.readFile(filepath)",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "local formatted_text = text:gsub(\"\\r\\n\",\"\\n\")",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "local AST = metrics.processText(formatted_text)",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "filepath = cutPathToSources(filepath, directiories)",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "metricsAST_results[filepath] = AST",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "local globalMetrics = metrics.doGlobalMetrics(metricsAST_results)",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "globalMetrics.moduleNum = #globalMetrics.moduleDefinitions",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "globalMetrics.fileNum = #fileList",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "local function readFile(_sFileName)\r\n\r\n\tlocal f = io.input(_sFileName)\r\n\tlocal sData_ = f:read(\"*a\")\r\n\tf:close()\r\n\treturn sData_\r\n\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "apply",
    "type": "global function"
  }, {
    "id": 42,
    "text": "metrics",
    "type": "module"
  }, {
    "id": 43,
    "text": "processText",
    "type": "global function"
  }, {
    "id": 44,
    "text": "doGlobalMetrics",
    "type": "global function"
  }, {
    "id": 45,
    "text": "setmaxstack",
    "type": "global function"
  }, {
    "id": 46,
    "text": "P",
    "type": "global function"
  }, {
    "id": 47,
    "text": "pipe",
    "type": "global function"
  }, {
    "id": 48,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 49,
    "text": "find",
    "type": "global function"
  }, {
    "id": 50,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 51,
    "text": "module",
    "type": "global function"
  }, {
    "id": 52,
    "text": "require",
    "type": "global function"
  }, {
    "id": 53,
    "text": "",
    "type": "variable container"
  }, {
    "id": 54,
    "text": "",
    "type": "require container"
  }, {
    "id": 55,
    "text": "",
    "type": "local variable"
  }, {
    "id": 56,
    "text": "",
    "type": "local variable"
  }, {
    "id": 57,
    "text": "",
    "type": "local variable"
  }, {
    "id": 58,
    "text": "",
    "type": "local variable"
  }, {
    "id": 59,
    "text": "",
    "type": "local variable"
  }, {
    "id": 60,
    "text": "",
    "type": "local variable"
  }, {
    "id": 61,
    "text": "",
    "type": "local variable"
  }, {
    "id": 62,
    "text": "",
    "type": "local variable"
  }, {
    "id": 63,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 64,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 65,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 66,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 67,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 68,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 69,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 70,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 71,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 72,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 73,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 74,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 75,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 76,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 77,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 78,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 79,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 80,
    "text": "",
    "type": "variable container"
  }, {
    "id": 81,
    "text": "",
    "type": "require container"
  }, {
    "id": 82,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 83,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 84,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 85,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 86,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 87,
    "text": "",
    "type": "interface container"
  }, {
    "id": 88,
    "text": "",
    "type": "interface"
  } ]
}