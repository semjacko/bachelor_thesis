{
  "_filename": "statements.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luametrics/src/metrics/captures/statements.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 9,
    "label": "has",
    "to": 13
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 19,
    "label": "has",
    "to": 24
  }, {
    "from": 15,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 30
  }, {
    "from": 26,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 26,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 36,
    "label": "has",
    "to": 41
  }, {
    "from": 36,
    "label": "has",
    "to": 42
  }, {
    "from": 25,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 43,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 49,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 49,
    "label": "has",
    "to": 34
  }, {
    "from": 15,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 15,
    "label": "has",
    "to": 55
  }, {
    "from": 15,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 5
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 60,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 64,
    "label": "has",
    "to": 67
  }, {
    "from": 60,
    "label": "has",
    "to": 68
  }, {
    "from": 60,
    "label": "has",
    "to": 5
  }, {
    "from": 60,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 58
  }, {
    "from": 74,
    "label": "has",
    "to": 5
  }, {
    "from": 70,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 61
  }, {
    "from": 75,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 75,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 64,
    "label": "has",
    "to": 67
  }, {
    "from": 75,
    "label": "has",
    "to": 68
  }, {
    "from": 75,
    "label": "has",
    "to": 5
  }, {
    "from": 70,
    "label": "has",
    "to": 5
  }, {
    "from": 70,
    "label": "has",
    "to": 76
  }, {
    "from": 3,
    "label": "calls",
    "to": 3
  }, {
    "from": 15,
    "label": "calls",
    "to": 3
  }, {
    "from": 77,
    "label": "calls",
    "to": 80
  }, {
    "from": 15,
    "label": "calls",
    "to": 78
  }, {
    "from": 15,
    "label": "calls",
    "to": 78
  }, {
    "from": 3,
    "label": "calls",
    "to": 79
  }, {
    "from": 15,
    "label": "calls",
    "to": 79
  }, {
    "from": 15,
    "label": "calls",
    "to": 79
  }, {
    "from": 15,
    "label": "calls",
    "to": 79
  }, {
    "from": 77,
    "label": "calls",
    "to": 79
  }, {
    "from": 77,
    "label": "calls",
    "to": 79
  }, {
    "from": 77,
    "label": "calls",
    "to": 81
  }, {
    "from": 77,
    "label": "calls",
    "to": 81
  }, {
    "from": 3,
    "label": "calls",
    "to": 82
  }, {
    "from": 15,
    "label": "calls",
    "to": 82
  }, {
    "from": 15,
    "label": "calls",
    "to": 82
  }, {
    "from": 15,
    "label": "calls",
    "to": 82
  }, {
    "from": 15,
    "label": "calls",
    "to": 82
  }, {
    "from": 15,
    "label": "calls",
    "to": 82
  }, {
    "from": 77,
    "label": "calls",
    "to": 15
  }, {
    "from": 77,
    "label": "calls",
    "to": 15
  }, {
    "from": 1,
    "label": "contains",
    "to": 77
  }, {
    "from": 77,
    "label": "declares",
    "to": 3
  }, {
    "from": 77,
    "label": "declares",
    "to": 15
  }, {
    "from": 77,
    "label": "declares",
    "to": 57
  }, {
    "from": 77,
    "label": "declares",
    "to": 60
  }, {
    "from": 77,
    "label": "declares",
    "to": 70
  }, {
    "from": 1,
    "label": "contains",
    "to": 83
  }, {
    "from": 1,
    "label": "contains",
    "to": 84
  }, {
    "from": 83,
    "label": "initializes",
    "to": 85
  }, {
    "from": 85,
    "label": "assigns",
    "to": 86
  }, {
    "from": 83,
    "label": "initializes",
    "to": 87
  }, {
    "from": 87,
    "label": "assigns",
    "to": 88
  }, {
    "from": 83,
    "label": "initializes",
    "to": 89
  }, {
    "from": 89,
    "label": "assigns",
    "to": 90
  }, {
    "from": 83,
    "label": "initializes",
    "to": 91
  }, {
    "from": 91,
    "label": "assigns",
    "to": 92
  }, {
    "from": 83,
    "label": "initializes",
    "to": 93
  }, {
    "from": 93,
    "label": "assigns",
    "to": 94
  }, {
    "from": 83,
    "label": "initializes",
    "to": 95
  }, {
    "from": 95,
    "label": "assigns",
    "to": 96
  }, {
    "from": 84,
    "label": "initializes",
    "to": 97
  }, {
    "from": 97,
    "label": "requires",
    "to": 2
  }, {
    "from": 98,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "statements",
    "type": "module"
  }, {
    "id": 2,
    "text": "utils",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function countReturnStatements(node,statements)\r\n\tif(node == nil)then return 0 end\r\n\t\r\n\tlocal count = 0\r\n\tlocal k,v\r\n\r\n\tfor k,v in pairs(node)do\r\n\t\tif( v.tag ~='GlobalFunction' and v.tag ~= 'LocalFunction' and v.tag ~= 'Function')then\t\r\n\t\t\tif(v.tag == 'keyword' and v.text == 'return')then \r\n\t\t\t\tcount = count + 1\r\n\t\t\t\ttable.insert(statements[\"return\"],v)\r\n\t\t\tend\r\n \t\t\tcountReturnStatements(v.data,statements)\r\n\t\tend\r\n\r\n\tend\r\n\treturn \r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "if(node == nil)then return 0 end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "local count = 0",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "local k,v",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "for k,v in pairs(node)do\r\n\t\tif( v.tag ~='GlobalFunction' and v.tag ~= 'LocalFunction' and v.tag ~= 'Function')then\t\r\n\t\t\tif(v.tag == 'keyword' and v.text == 'return')then \r\n\t\t\t\tcount = count + 1\r\n\t\t\t\ttable.insert(statements[\"return\"],v)\r\n\t\t\tend\r\n \t\t\tcountReturnStatements(v.data,statements)\r\n\t\tend\r\n\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 9,
    "text": "if( v.tag ~='GlobalFunction' and v.tag ~= 'LocalFunction' and v.tag ~= 'Function')then\t\r\n\t\t\tif(v.tag == 'keyword' and v.text == 'return')then \r\n\t\t\t\tcount = count + 1\r\n\t\t\t\ttable.insert(statements[\"return\"],v)\r\n\t\t\tend\r\n \t\t\tcountReturnStatements(v.data,statements)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "if(v.tag == 'keyword' and v.text == 'return')then \r\n\t\t\t\tcount = count + 1\r\n\t\t\t\ttable.insert(statements[\"return\"],v)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "count = count + 1",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "table.insert(statements[\"return\"],v)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "countReturnStatements(v.data,statements)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "local function countStatements(node)\r\n\tlocal children = node.data\r\n\tlocal moduleMetrics = nil\r\n\t\r\n\tlocal statements = {}\r\n\t\r\n\r\n-- doplnil : Peter Kosa  \r\n--counts number of return points in function\r\n\t\tif(node.tag == \"GlobalFunction\" or node.tag ==\"LocalFunction\" or node.tag==\"Function\")then\r\n\t\t\tlocal fbody = utils.searchForTagItem('FuncBody', node.data)\r\n\t\t\tlocal fblock =  utils.searchForTagItem('Block', fbody.data)\r\n\t\t\t\r\n\t\t\tif (not statements[\"return\"]) then statements[\"return\"] = {} end\r\n\t\t\tcountReturnStatements(fblock.data,statements)\r\n\t\tend\r\n----------------------\t\t\r\n\t\r\n\tfor _, child in pairs(children) do\r\n\t\t\r\n\t\tif (child.tag == 'Stat') then\r\n\t\t\tlocal stat = child.data[1]\t\r\n\t\t\tif (not statements[stat.tag]) then statements[stat.tag] = {} end\r\n\t\t\ttable.insert(statements[stat.tag], stat)\r\n\t\t\t\r\n\t\t\tif (moduleMetrics) then \r\n\t\t\t\tif (not moduleMetrics[stat.tag]) then moduleMetrics[stat.tag] = {} end\r\n\t\t\t\ttable.insert(moduleMetrics[stat.tag], stat)\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tif (stat.tag == 'FunctionCall') then\r\n\t\t\t\tif (stat.data[1].data[1].text == 'module') then\r\n\t\t\t\t\tlocal exec = stat.data[1]\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleDefinitions[exec] = {}\r\n\t\t\t\t\tif (moduleDefinitions[exec].metrics == nil) then moduleDefinitions[exec].metrics = {} end\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleDefinitions[exec].statements = {}\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleMetrics = moduleDefinitions[exec].statements\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\t\r\n\t\t\r\n\t\tfor key, stats in pairs(child.metrics.statements) do\r\n\t\t\tif (not statements[key]) then statements[key] = {} end\r\n\t\t\tfor _, stat in pairs(stats) do\r\n\t\t\t\ttable.insert(statements[key], stat)\r\n\t\t\t\tif (moduleMetrics) then \r\n-- modifikoval Peter Kosa,  aby v HTML tabulke : \"Statement usage\" nebolo slovo \"keyword\" ale \"return\"\t\t\t\t\r\n\t\t\t\t\tif(stat.tag == 'keyword' and stat.text == 'return') then\r\n\t\t\t\t\t\tif (not moduleMetrics[\"return\"]) then moduleMetrics[\"return\"] = {} end\r\n\t\t\t\t\t\ttable.insert(moduleMetrics[\"return\"], stat)\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tif (not moduleMetrics[stat.tag]) then moduleMetrics[stat.tag] = {} end\r\n\t\t\t\t\t\ttable.insert(moduleMetrics[stat.tag], stat)\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\t\t\r\n\tend\r\n\r\n\tif (node.metrics == nil) then node.metrics = {} end\r\n\tnode.metrics.statements = statements\t\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "local children = node.data",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "local moduleMetrics = nil",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "local statements = {}",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "if(node.tag == \"GlobalFunction\" or node.tag ==\"LocalFunction\" or node.tag==\"Function\")then\r\n\t\t\tlocal fbody = utils.searchForTagItem('FuncBody', node.data)\r\n\t\t\tlocal fblock =  utils.searchForTagItem('Block', fbody.data)\r\n\t\t\t\r\n\t\t\tif (not statements[\"return\"]) then statements[\"return\"] = {} end\r\n\t\t\tcountReturnStatements(fblock.data,statements)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "local fbody = utils.searchForTagItem('FuncBody', node.data)",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "local fblock =  utils.searchForTagItem('Block', fbody.data)",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "if (not statements[\"return\"]) then statements[\"return\"] = {} end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "statements[\"return\"] = {}",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "countReturnStatements(fblock.data,statements)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "for _, child in pairs(children) do\r\n\t\t\r\n\t\tif (child.tag == 'Stat') then\r\n\t\t\tlocal stat = child.data[1]\t\r\n\t\t\tif (not statements[stat.tag]) then statements[stat.tag] = {} end\r\n\t\t\ttable.insert(statements[stat.tag], stat)\r\n\t\t\t\r\n\t\t\tif (moduleMetrics) then \r\n\t\t\t\tif (not moduleMetrics[stat.tag]) then moduleMetrics[stat.tag] = {} end\r\n\t\t\t\ttable.insert(moduleMetrics[stat.tag], stat)\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tif (stat.tag == 'FunctionCall') then\r\n\t\t\t\tif (stat.data[1].data[1].text == 'module') then\r\n\t\t\t\t\tlocal exec = stat.data[1]\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleDefinitions[exec] = {}\r\n\t\t\t\t\tif (moduleDefinitions[exec].metrics == nil) then moduleDefinitions[exec].metrics = {} end\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleDefinitions[exec].statements = {}\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleMetrics = moduleDefinitions[exec].statements\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\t\r\n\t\t\r\n\t\tfor key, stats in pairs(child.metrics.statements) do\r\n\t\t\tif (not statements[key]) then statements[key] = {} end\r\n\t\t\tfor _, stat in pairs(stats) do\r\n\t\t\t\ttable.insert(statements[key], stat)\r\n\t\t\t\tif (moduleMetrics) then \r\n-- modifikoval Peter Kosa,  aby v HTML tabulke : \"Statement usage\" nebolo slovo \"keyword\" ale \"return\"\t\t\t\t\r\n\t\t\t\t\tif(stat.tag == 'keyword' and stat.text == 'return') then\r\n\t\t\t\t\t\tif (not moduleMetrics[\"return\"]) then moduleMetrics[\"return\"] = {} end\r\n\t\t\t\t\t\ttable.insert(moduleMetrics[\"return\"], stat)\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tif (not moduleMetrics[stat.tag]) then moduleMetrics[stat.tag] = {} end\r\n\t\t\t\t\t\ttable.insert(moduleMetrics[stat.tag], stat)\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\t\t\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 26,
    "text": "if (child.tag == 'Stat') then\r\n\t\t\tlocal stat = child.data[1]\t\r\n\t\t\tif (not statements[stat.tag]) then statements[stat.tag] = {} end\r\n\t\t\ttable.insert(statements[stat.tag], stat)\r\n\t\t\t\r\n\t\t\tif (moduleMetrics) then \r\n\t\t\t\tif (not moduleMetrics[stat.tag]) then moduleMetrics[stat.tag] = {} end\r\n\t\t\t\ttable.insert(moduleMetrics[stat.tag], stat)\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tif (stat.tag == 'FunctionCall') then\r\n\t\t\t\tif (stat.data[1].data[1].text == 'module') then\r\n\t\t\t\t\tlocal exec = stat.data[1]\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleDefinitions[exec] = {}\r\n\t\t\t\t\tif (moduleDefinitions[exec].metrics == nil) then moduleDefinitions[exec].metrics = {} end\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleDefinitions[exec].statements = {}\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleMetrics = moduleDefinitions[exec].statements\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "local stat = child.data[1]",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "if (not statements[stat.tag]) then statements[stat.tag] = {} end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "statements[stat.tag] = {}",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "table.insert(statements[stat.tag], stat)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "if (moduleMetrics) then \r\n\t\t\t\tif (not moduleMetrics[stat.tag]) then moduleMetrics[stat.tag] = {} end\r\n\t\t\t\ttable.insert(moduleMetrics[stat.tag], stat)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "if (not moduleMetrics[stat.tag]) then moduleMetrics[stat.tag] = {} end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "moduleMetrics[stat.tag] = {}",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "table.insert(moduleMetrics[stat.tag], stat)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "if (stat.tag == 'FunctionCall') then\r\n\t\t\t\tif (stat.data[1].data[1].text == 'module') then\r\n\t\t\t\t\tlocal exec = stat.data[1]\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleDefinitions[exec] = {}\r\n\t\t\t\t\tif (moduleDefinitions[exec].metrics == nil) then moduleDefinitions[exec].metrics = {} end\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleDefinitions[exec].statements = {}\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleMetrics = moduleDefinitions[exec].statements\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "if (stat.data[1].data[1].text == 'module') then\r\n\t\t\t\t\tlocal exec = stat.data[1]\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleDefinitions[exec] = {}\r\n\t\t\t\t\tif (moduleDefinitions[exec].metrics == nil) then moduleDefinitions[exec].metrics = {} end\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleDefinitions[exec].statements = {}\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleMetrics = moduleDefinitions[exec].statements\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "local exec = stat.data[1]",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "moduleDefinitions[exec] = {}",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "if (moduleDefinitions[exec].metrics == nil) then moduleDefinitions[exec].metrics = {} end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "moduleDefinitions[exec].metrics = {}",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "moduleDefinitions[exec].statements = {}",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "moduleMetrics = moduleDefinitions[exec].statements",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "for key, stats in pairs(child.metrics.statements) do\r\n\t\t\tif (not statements[key]) then statements[key] = {} end\r\n\t\t\tfor _, stat in pairs(stats) do\r\n\t\t\t\ttable.insert(statements[key], stat)\r\n\t\t\t\tif (moduleMetrics) then \r\n-- modifikoval Peter Kosa,  aby v HTML tabulke : \"Statement usage\" nebolo slovo \"keyword\" ale \"return\"\t\t\t\t\r\n\t\t\t\t\tif(stat.tag == 'keyword' and stat.text == 'return') then\r\n\t\t\t\t\t\tif (not moduleMetrics[\"return\"]) then moduleMetrics[\"return\"] = {} end\r\n\t\t\t\t\t\ttable.insert(moduleMetrics[\"return\"], stat)\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tif (not moduleMetrics[stat.tag]) then moduleMetrics[stat.tag] = {} end\r\n\t\t\t\t\t\ttable.insert(moduleMetrics[stat.tag], stat)\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 44,
    "text": "if (not statements[key]) then statements[key] = {} end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "statements[key] = {}",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "for _, stat in pairs(stats) do\r\n\t\t\t\ttable.insert(statements[key], stat)\r\n\t\t\t\tif (moduleMetrics) then \r\n-- modifikoval Peter Kosa,  aby v HTML tabulke : \"Statement usage\" nebolo slovo \"keyword\" ale \"return\"\t\t\t\t\r\n\t\t\t\t\tif(stat.tag == 'keyword' and stat.text == 'return') then\r\n\t\t\t\t\t\tif (not moduleMetrics[\"return\"]) then moduleMetrics[\"return\"] = {} end\r\n\t\t\t\t\t\ttable.insert(moduleMetrics[\"return\"], stat)\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tif (not moduleMetrics[stat.tag]) then moduleMetrics[stat.tag] = {} end\r\n\t\t\t\t\t\ttable.insert(moduleMetrics[stat.tag], stat)\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 47,
    "text": "table.insert(statements[key], stat)",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "if (moduleMetrics) then \r\n-- modifikoval Peter Kosa,  aby v HTML tabulke : \"Statement usage\" nebolo slovo \"keyword\" ale \"return\"\t\t\t\t\r\n\t\t\t\t\tif(stat.tag == 'keyword' and stat.text == 'return') then\r\n\t\t\t\t\t\tif (not moduleMetrics[\"return\"]) then moduleMetrics[\"return\"] = {} end\r\n\t\t\t\t\t\ttable.insert(moduleMetrics[\"return\"], stat)\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tif (not moduleMetrics[stat.tag]) then moduleMetrics[stat.tag] = {} end\r\n\t\t\t\t\t\ttable.insert(moduleMetrics[stat.tag], stat)\r\n\t\t\t\t\tend\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "if(stat.tag == 'keyword' and stat.text == 'return') then\r\n\t\t\t\t\t\tif (not moduleMetrics[\"return\"]) then moduleMetrics[\"return\"] = {} end\r\n\t\t\t\t\t\ttable.insert(moduleMetrics[\"return\"], stat)\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tif (not moduleMetrics[stat.tag]) then moduleMetrics[stat.tag] = {} end\r\n\t\t\t\t\t\ttable.insert(moduleMetrics[stat.tag], stat)\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "if (not moduleMetrics[\"return\"]) then moduleMetrics[\"return\"] = {} end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "moduleMetrics[\"return\"] = {}",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "table.insert(moduleMetrics[\"return\"], stat)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "if (node.metrics == nil) then node.metrics = {} end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "node.metrics = {}",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "node.metrics.statements = statements",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function (data) \r\n\t\t\t\tcountStatements(data)\r\n\t\t\t\treturn data \r\n\t\t\tend",
    "type": "function"
  }, {
    "id": 58,
    "text": "countStatements(data)",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function (node) \r\n\t\tcountStatements(node)\r\n\t\t\r\n\t\tif not node.metrics.moduleDefinitions then node.metrics.moduleDefinitions = {} end\r\n\t\t\r\n\t\tfor exec, data in pairs(moduleDefinitions) do\r\n\t\t\tif not node.metrics.moduleDefinitions[exec] then node.metrics.moduleDefinitions[exec] = {} end\r\n\t\t\tnode.metrics.moduleDefinitions[exec].statements = data.statements\r\n\t\tend\t\r\n\t\t\r\n\t\tmoduleDefinitions = {}\r\n\t\t\r\n\t\treturn node \r\n\tend",
    "type": "function"
  }, {
    "id": 61,
    "text": "countStatements(node)",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "if not node.metrics.moduleDefinitions then node.metrics.moduleDefinitions = {} end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "node.metrics.moduleDefinitions = {}",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "for exec, data in pairs(moduleDefinitions) do\r\n\t\t\tif not node.metrics.moduleDefinitions[exec] then node.metrics.moduleDefinitions[exec] = {} end\r\n\t\t\tnode.metrics.moduleDefinitions[exec].statements = data.statements\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 65,
    "text": "if not node.metrics.moduleDefinitions[exec] then node.metrics.moduleDefinitions[exec] = {} end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "node.metrics.moduleDefinitions[exec] = {}",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "node.metrics.moduleDefinitions[exec].statements = data.statements",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "moduleDefinitions = {}",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function()\r\n\tlocal key,value\r\n\tlocal new_table = {}\r\n\tfor key,value in pairs(keys) do\r\n\t\tnew_table[key] = function (data) \r\n\t\t\t\tcountStatements(data)\r\n\t\t\t\treturn data \r\n\t\t\tend\r\n\tend\r\n\t\r\n\tnew_table[1] = function (node) \r\n\t\tcountStatements(node)\r\n\t\t\r\n\t\tif not node.metrics.moduleDefinitions then node.metrics.moduleDefinitions = {} end\r\n\t\t\r\n\t\tfor exec, data in pairs(moduleDefinitions) do\r\n\t\t\tif not node.metrics.moduleDefinitions[exec] then node.metrics.moduleDefinitions[exec] = {} end\r\n\t\t\tnode.metrics.moduleDefinitions[exec].statements = data.statements\r\n\t\tend\t\r\n\t\t\r\n\t\tmoduleDefinitions = {}\r\n\t\t\r\n\t\treturn node \r\n\tend\r\n\t\r\n\treturn new_table\r\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "local key,value",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "local new_table = {}",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "for key,value in pairs(keys) do\r\n\t\tnew_table[key] = function (data) \r\n\t\t\t\tcountStatements(data)\r\n\t\t\t\treturn data \r\n\t\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 74,
    "text": "new_table[key] = function (data) \r\n\t\t\t\tcountStatements(data)\r\n\t\t\t\treturn data \r\n\t\t\tend",
    "type": "statement:assign"
  }, {
    "id": 75,
    "text": "new_table[1] = function (node) \r\n\t\tcountStatements(node)\r\n\t\t\r\n\t\tif not node.metrics.moduleDefinitions then node.metrics.moduleDefinitions = {} end\r\n\t\t\r\n\t\tfor exec, data in pairs(moduleDefinitions) do\r\n\t\t\tif not node.metrics.moduleDefinitions[exec] then node.metrics.moduleDefinitions[exec] = {} end\r\n\t\t\tnode.metrics.moduleDefinitions[exec].statements = data.statements\r\n\t\tend\t\r\n\t\t\r\n\t\tmoduleDefinitions = {}\r\n\t\t\r\n\t\treturn node \r\n\tend",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "",
    "type": "function container"
  }, {
    "id": 78,
    "text": "function searchForTagItem(tagname, data)\r\n\tfor j,l in pairs(data) do\r\n\t\tif (l.tag == tagname) then\r\n\t\t\treturn l\t\r\n\t\tend\r\n\tend\r\n\treturn nil\r\nend",
    "type": "function"
  }, {
    "id": 79,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 80,
    "text": "module",
    "type": "global function"
  }, {
    "id": 81,
    "text": "require",
    "type": "global function"
  }, {
    "id": 82,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 83,
    "text": "",
    "type": "variable container"
  }, {
    "id": 84,
    "text": "",
    "type": "require container"
  }, {
    "id": 85,
    "text": "",
    "type": "local variable"
  }, {
    "id": 86,
    "text": "",
    "type": "n/a"
  }, {
    "id": 87,
    "text": "",
    "type": "local variable"
  }, {
    "id": 88,
    "text": "",
    "type": "n/a"
  }, {
    "id": 89,
    "text": "",
    "type": "local variable"
  }, {
    "id": 90,
    "text": "",
    "type": "n/a"
  }, {
    "id": 91,
    "text": "",
    "type": "local variable"
  }, {
    "id": 92,
    "text": "",
    "type": "n/a"
  }, {
    "id": 93,
    "text": "",
    "type": "local variable"
  }, {
    "id": 94,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 95,
    "text": "",
    "type": "global variable"
  }, {
    "id": 96,
    "text": "",
    "type": "n/a"
  }, {
    "id": 97,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 98,
    "text": "",
    "type": "require local variable"
  } ]
}