{
  "_filename": "halstead.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luametrics/src/metrics/captures/halstead.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 8,
    "label": "has",
    "to": 14
  }, {
    "from": 8,
    "label": "has",
    "to": 15
  }, {
    "from": 8,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 8,
    "label": "has",
    "to": 19
  }, {
    "from": 8,
    "label": "has",
    "to": 20
  }, {
    "from": 8,
    "label": "has",
    "to": 21
  }, {
    "from": 8,
    "label": "has",
    "to": 22
  }, {
    "from": 8,
    "label": "has",
    "to": 23
  }, {
    "from": 8,
    "label": "has",
    "to": 24
  }, {
    "from": 8,
    "label": "has",
    "to": 25
  }, {
    "from": 8,
    "label": "has",
    "to": 26
  }, {
    "from": 8,
    "label": "has",
    "to": 27
  }, {
    "from": 8,
    "label": "has",
    "to": 28
  }, {
    "from": 8,
    "label": "has",
    "to": 29
  }, {
    "from": 8,
    "label": "has",
    "to": 30
  }, {
    "from": 8,
    "label": "has",
    "to": 31
  }, {
    "from": 8,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 33,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 41,
    "label": "has",
    "to": 46
  }, {
    "from": 41,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 41,
    "label": "has",
    "to": 49
  }, {
    "from": 37,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 37,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 37,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 33,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 33,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 33,
    "label": "has",
    "to": 64
  }, {
    "from": 33,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 48
  }, {
    "from": 33,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 67,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 68
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 71,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 74,
    "label": "has",
    "to": 77
  }, {
    "from": 71,
    "label": "has",
    "to": 78
  }, {
    "from": 71,
    "label": "has",
    "to": 69
  }, {
    "from": 71,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 80,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 80,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 81
  }, {
    "from": 85,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "has",
    "to": 81
  }, {
    "from": 87,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 89,
    "label": "has",
    "to": 93
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 94,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 94,
    "label": "has",
    "to": 98
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 99,
    "label": "has",
    "to": 103
  }, {
    "from": 104,
    "label": "has",
    "to": 100
  }, {
    "from": 104,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 106,
    "label": "has",
    "to": 108
  }, {
    "from": 106,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 68
  }, {
    "from": 110,
    "label": "has",
    "to": 69
  }, {
    "from": 106,
    "label": "has",
    "to": 111
  }, {
    "from": 111,
    "label": "has",
    "to": 68
  }, {
    "from": 111,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 111,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 74,
    "label": "has",
    "to": 77
  }, {
    "from": 111,
    "label": "has",
    "to": 78
  }, {
    "from": 111,
    "label": "has",
    "to": 69
  }, {
    "from": 106,
    "label": "has",
    "to": 69
  }, {
    "from": 106,
    "label": "has",
    "to": 112
  }, {
    "from": 33,
    "label": "calls",
    "to": 119
  }, {
    "from": 8,
    "label": "calls",
    "to": 117
  }, {
    "from": 8,
    "label": "calls",
    "to": 117
  }, {
    "from": 33,
    "label": "calls",
    "to": 8
  }, {
    "from": 33,
    "label": "calls",
    "to": 8
  }, {
    "from": 33,
    "label": "calls",
    "to": 8
  }, {
    "from": 113,
    "label": "calls",
    "to": 116
  }, {
    "from": 8,
    "label": "calls",
    "to": 118
  }, {
    "from": 8,
    "label": "calls",
    "to": 118
  }, {
    "from": 113,
    "label": "calls",
    "to": 118
  }, {
    "from": 33,
    "label": "calls",
    "to": 118
  }, {
    "from": 33,
    "label": "calls",
    "to": 118
  }, {
    "from": 33,
    "label": "calls",
    "to": 118
  }, {
    "from": 113,
    "label": "calls",
    "to": 118
  }, {
    "from": 113,
    "label": "calls",
    "to": 118
  }, {
    "from": 113,
    "label": "calls",
    "to": 120
  }, {
    "from": 113,
    "label": "calls",
    "to": 115
  }, {
    "from": 33,
    "label": "calls",
    "to": 122
  }, {
    "from": 113,
    "label": "calls",
    "to": 121
  }, {
    "from": 113,
    "label": "calls",
    "to": 121
  }, {
    "from": 113,
    "label": "calls",
    "to": 121
  }, {
    "from": 113,
    "label": "calls",
    "to": 3
  }, {
    "from": 113,
    "label": "calls",
    "to": 3
  }, {
    "from": 113,
    "label": "calls",
    "to": 3
  }, {
    "from": 113,
    "label": "calls",
    "to": 3
  }, {
    "from": 113,
    "label": "calls",
    "to": 3
  }, {
    "from": 113,
    "label": "calls",
    "to": 3
  }, {
    "from": 113,
    "label": "calls",
    "to": 3
  }, {
    "from": 113,
    "label": "calls",
    "to": 3
  }, {
    "from": 113,
    "label": "calls",
    "to": 3
  }, {
    "from": 113,
    "label": "calls",
    "to": 3
  }, {
    "from": 113,
    "label": "calls",
    "to": 3
  }, {
    "from": 113,
    "label": "calls",
    "to": 3
  }, {
    "from": 113,
    "label": "calls",
    "to": 3
  }, {
    "from": 113,
    "label": "calls",
    "to": 3
  }, {
    "from": 33,
    "label": "calls",
    "to": 3
  }, {
    "from": 33,
    "label": "calls",
    "to": 3
  }, {
    "from": 33,
    "label": "calls",
    "to": 3
  }, {
    "from": 33,
    "label": "calls",
    "to": 3
  }, {
    "from": 113,
    "label": "calls",
    "to": 33
  }, {
    "from": 113,
    "label": "calls",
    "to": 33
  }, {
    "from": 1,
    "label": "contains",
    "to": 113
  }, {
    "from": 113,
    "label": "declares",
    "to": 3
  }, {
    "from": 113,
    "label": "declares",
    "to": 8
  }, {
    "from": 113,
    "label": "declares",
    "to": 33
  }, {
    "from": 113,
    "label": "declares",
    "to": 67
  }, {
    "from": 113,
    "label": "declares",
    "to": 71
  }, {
    "from": 113,
    "label": "declares",
    "to": 80
  }, {
    "from": 113,
    "label": "declares",
    "to": 85
  }, {
    "from": 113,
    "label": "declares",
    "to": 87
  }, {
    "from": 113,
    "label": "declares",
    "to": 89
  }, {
    "from": 113,
    "label": "declares",
    "to": 94
  }, {
    "from": 113,
    "label": "declares",
    "to": 99
  }, {
    "from": 113,
    "label": "declares",
    "to": 104
  }, {
    "from": 113,
    "label": "declares",
    "to": 106
  }, {
    "from": 114,
    "label": "calls",
    "to": 8
  }, {
    "from": 1,
    "label": "contains",
    "to": 123
  }, {
    "from": 1,
    "label": "contains",
    "to": 124
  }, {
    "from": 123,
    "label": "initializes",
    "to": 125
  }, {
    "from": 125,
    "label": "assigns",
    "to": 126
  }, {
    "from": 123,
    "label": "initializes",
    "to": 127
  }, {
    "from": 127,
    "label": "assigns",
    "to": 128
  }, {
    "from": 123,
    "label": "initializes",
    "to": 129
  }, {
    "from": 129,
    "label": "assigns",
    "to": 130
  }, {
    "from": 123,
    "label": "initializes",
    "to": 131
  }, {
    "from": 131,
    "label": "assigns",
    "to": 132
  }, {
    "from": 123,
    "label": "initializes",
    "to": 133
  }, {
    "from": 133,
    "label": "assigns",
    "to": 134
  }, {
    "from": 123,
    "label": "initializes",
    "to": 135
  }, {
    "from": 135,
    "label": "assigns",
    "to": 136
  }, {
    "from": 123,
    "label": "initializes",
    "to": 137
  }, {
    "from": 137,
    "label": "assigns",
    "to": 138
  }, {
    "from": 138,
    "label": "assigns",
    "to": 139
  }, {
    "from": 139,
    "label": "assigns",
    "to": 140
  }, {
    "from": 138,
    "label": "assigns",
    "to": 141
  }, {
    "from": 141,
    "label": "assigns",
    "to": 142
  }, {
    "from": 138,
    "label": "assigns",
    "to": 143
  }, {
    "from": 143,
    "label": "assigns",
    "to": 144
  }, {
    "from": 138,
    "label": "assigns",
    "to": 145
  }, {
    "from": 145,
    "label": "assigns",
    "to": 146
  }, {
    "from": 138,
    "label": "assigns",
    "to": 147
  }, {
    "from": 147,
    "label": "assigns",
    "to": 148
  }, {
    "from": 138,
    "label": "assigns",
    "to": 149
  }, {
    "from": 149,
    "label": "assigns",
    "to": 150
  }, {
    "from": 138,
    "label": "assigns",
    "to": 151
  }, {
    "from": 151,
    "label": "assigns",
    "to": 152
  }, {
    "from": 123,
    "label": "initializes",
    "to": 153
  }, {
    "from": 153,
    "label": "assigns",
    "to": 154
  }, {
    "from": 124,
    "label": "initializes",
    "to": 155
  }, {
    "from": 155,
    "label": "requires",
    "to": 2
  }, {
    "from": 124,
    "label": "initializes",
    "to": 156
  }, {
    "from": 156,
    "label": "requires",
    "to": 157
  }, {
    "from": 158,
    "label": "requires",
    "to": 1
  }, {
    "from": 48,
    "label": "hasArgument",
    "to": 140
  }, {
    "from": 48,
    "label": "hasArgument",
    "to": 142
  }, {
    "from": 48,
    "label": "hasArgument",
    "to": 144
  }, {
    "from": 48,
    "label": "hasArgument",
    "to": 146
  }, {
    "from": 48,
    "label": "hasArgument",
    "to": 148
  }, {
    "from": 48,
    "label": "hasArgument",
    "to": 150
  }, {
    "from": 48,
    "label": "hasArgument",
    "to": 152
  }, {
    "from": 51,
    "label": "hasArgument",
    "to": 140
  }, {
    "from": 51,
    "label": "hasArgument",
    "to": 142
  }, {
    "from": 51,
    "label": "hasArgument",
    "to": 144
  }, {
    "from": 51,
    "label": "hasArgument",
    "to": 146
  }, {
    "from": 51,
    "label": "hasArgument",
    "to": 148
  }, {
    "from": 51,
    "label": "hasArgument",
    "to": 150
  }, {
    "from": 51,
    "label": "hasArgument",
    "to": 152
  }, {
    "from": 53,
    "label": "hasArgument",
    "to": 140
  }, {
    "from": 53,
    "label": "hasArgument",
    "to": 142
  }, {
    "from": 53,
    "label": "hasArgument",
    "to": 144
  }, {
    "from": 53,
    "label": "hasArgument",
    "to": 146
  }, {
    "from": 53,
    "label": "hasArgument",
    "to": 148
  }, {
    "from": 53,
    "label": "hasArgument",
    "to": 150
  }, {
    "from": 53,
    "label": "hasArgument",
    "to": 152
  }, {
    "from": 55,
    "label": "hasArgument",
    "to": 140
  }, {
    "from": 55,
    "label": "hasArgument",
    "to": 142
  }, {
    "from": 55,
    "label": "hasArgument",
    "to": 144
  }, {
    "from": 55,
    "label": "hasArgument",
    "to": 146
  }, {
    "from": 55,
    "label": "hasArgument",
    "to": 148
  }, {
    "from": 55,
    "label": "hasArgument",
    "to": 150
  }, {
    "from": 55,
    "label": "hasArgument",
    "to": 152
  }, {
    "from": 57,
    "label": "hasArgument",
    "to": 140
  }, {
    "from": 57,
    "label": "hasArgument",
    "to": 142
  }, {
    "from": 57,
    "label": "hasArgument",
    "to": 144
  }, {
    "from": 57,
    "label": "hasArgument",
    "to": 146
  }, {
    "from": 57,
    "label": "hasArgument",
    "to": 148
  }, {
    "from": 57,
    "label": "hasArgument",
    "to": 150
  }, {
    "from": 57,
    "label": "hasArgument",
    "to": 152
  }, {
    "from": 59,
    "label": "hasArgument",
    "to": 140
  }, {
    "from": 59,
    "label": "hasArgument",
    "to": 142
  }, {
    "from": 59,
    "label": "hasArgument",
    "to": 144
  }, {
    "from": 59,
    "label": "hasArgument",
    "to": 146
  }, {
    "from": 59,
    "label": "hasArgument",
    "to": 148
  }, {
    "from": 59,
    "label": "hasArgument",
    "to": 150
  }, {
    "from": 59,
    "label": "hasArgument",
    "to": 152
  }, {
    "from": 64,
    "label": "hasArgument",
    "to": 140
  }, {
    "from": 64,
    "label": "hasArgument",
    "to": 142
  }, {
    "from": 64,
    "label": "hasArgument",
    "to": 144
  }, {
    "from": 64,
    "label": "hasArgument",
    "to": 146
  }, {
    "from": 64,
    "label": "hasArgument",
    "to": 148
  }, {
    "from": 64,
    "label": "hasArgument",
    "to": 150
  }, {
    "from": 64,
    "label": "hasArgument",
    "to": 152
  }, {
    "from": 68,
    "label": "hasArgument",
    "to": 140
  }, {
    "from": 68,
    "label": "hasArgument",
    "to": 142
  }, {
    "from": 68,
    "label": "hasArgument",
    "to": 144
  }, {
    "from": 68,
    "label": "hasArgument",
    "to": 146
  }, {
    "from": 68,
    "label": "hasArgument",
    "to": 148
  }, {
    "from": 68,
    "label": "hasArgument",
    "to": 150
  }, {
    "from": 68,
    "label": "hasArgument",
    "to": 152
  }, {
    "from": 81,
    "label": "hasArgument",
    "to": 140
  }, {
    "from": 81,
    "label": "hasArgument",
    "to": 142
  }, {
    "from": 81,
    "label": "hasArgument",
    "to": 144
  }, {
    "from": 81,
    "label": "hasArgument",
    "to": 146
  }, {
    "from": 81,
    "label": "hasArgument",
    "to": 148
  }, {
    "from": 81,
    "label": "hasArgument",
    "to": 150
  }, {
    "from": 81,
    "label": "hasArgument",
    "to": 152
  }, {
    "from": 83,
    "label": "hasArgument",
    "to": 140
  }, {
    "from": 83,
    "label": "hasArgument",
    "to": 142
  }, {
    "from": 83,
    "label": "hasArgument",
    "to": 144
  }, {
    "from": 83,
    "label": "hasArgument",
    "to": 146
  }, {
    "from": 83,
    "label": "hasArgument",
    "to": 148
  }, {
    "from": 83,
    "label": "hasArgument",
    "to": 150
  }, {
    "from": 83,
    "label": "hasArgument",
    "to": 152
  }, {
    "from": 92,
    "label": "hasArgument",
    "to": 140
  }, {
    "from": 92,
    "label": "hasArgument",
    "to": 142
  }, {
    "from": 92,
    "label": "hasArgument",
    "to": 144
  }, {
    "from": 92,
    "label": "hasArgument",
    "to": 146
  }, {
    "from": 92,
    "label": "hasArgument",
    "to": 148
  }, {
    "from": 92,
    "label": "hasArgument",
    "to": 150
  }, {
    "from": 92,
    "label": "hasArgument",
    "to": 152
  }, {
    "from": 97,
    "label": "hasArgument",
    "to": 140
  }, {
    "from": 97,
    "label": "hasArgument",
    "to": 142
  }, {
    "from": 97,
    "label": "hasArgument",
    "to": 144
  }, {
    "from": 97,
    "label": "hasArgument",
    "to": 146
  }, {
    "from": 97,
    "label": "hasArgument",
    "to": 148
  }, {
    "from": 97,
    "label": "hasArgument",
    "to": 150
  }, {
    "from": 97,
    "label": "hasArgument",
    "to": 152
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 140
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 142
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 144
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 146
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 148
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 150
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 152
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 140
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 142
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 144
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 146
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 148
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 150
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 152
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "halstead",
    "type": "module"
  }, {
    "id": 2,
    "text": "utils",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function add(array, opText, count)\r\n\tif (array[opText] == nil) then \r\n\t\tarray[opText] = count or 1\r\n\telse\r\n\t\tarray[opText] = array[opText] + (count or 1)\r\n\tend\t\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "if (array[opText] == nil) then \r\n\t\tarray[opText] = count or 1\r\n\telse\r\n\t\tarray[opText] = array[opText] + (count or 1)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "array[opText] = count or 1",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "array[opText] = array[opText] + (count or 1)",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function calculateHalstead(metricsHalstead, operators, operands)\r\n\r\n\tlocal number_of_operators = 0\r\n\tlocal unique_operators = 0\r\n\tfor op, count in pairs(operators) do \r\n\t\tunique_operators = unique_operators + 1\r\n\t\tnumber_of_operators = number_of_operators + count\r\n\tend\r\n\t\r\n\tlocal number_of_operands = 0\r\n\tlocal unique_operands = 0\r\n\tfor op, count in pairs(operands) do \r\n\t\tunique_operands = unique_operands + 1\r\n\t\tnumber_of_operands = number_of_operands + count\r\n\tend\r\n\r\n\tmetricsHalstead.operators = operators\r\n\tmetricsHalstead.operands = operands\r\n\t\r\n\tmetricsHalstead.number_of_operators = number_of_operators\r\n\tmetricsHalstead.number_of_operands = number_of_operands\r\n\tmetricsHalstead.unique_operands = unique_operands\r\n\tmetricsHalstead.unique_operators = unique_operators\r\n\t\r\n\tmetricsHalstead.LTH = number_of_operators + number_of_operands\r\n\tmetricsHalstead.VOC = unique_operands + unique_operators\r\n\tmetricsHalstead.DIF = (unique_operators / 2) * (number_of_operands/unique_operands)\r\n\t\r\n\tmetricsHalstead.VOL = metricsHalstead.LTH * (math.log(metricsHalstead.VOC) / math.log(2) )\r\n\tmetricsHalstead.EFF = metricsHalstead.DIF * metricsHalstead.VOL\r\n\tmetricsHalstead.BUG = metricsHalstead.VOL/3000\r\n\tmetricsHalstead.time = metricsHalstead.EFF / 18\r\n\t\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "local number_of_operators = 0",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "local unique_operators = 0",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "for op, count in pairs(operators) do \r\n\t\tunique_operators = unique_operators + 1\r\n\t\tnumber_of_operators = number_of_operators + count\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 12,
    "text": "unique_operators = unique_operators + 1",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "number_of_operators = number_of_operators + count",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "local number_of_operands = 0",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "local unique_operands = 0",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "for op, count in pairs(operands) do \r\n\t\tunique_operands = unique_operands + 1\r\n\t\tnumber_of_operands = number_of_operands + count\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 17,
    "text": "unique_operands = unique_operands + 1",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "number_of_operands = number_of_operands + count",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "metricsHalstead.operators = operators",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "metricsHalstead.operands = operands",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "metricsHalstead.number_of_operators = number_of_operators",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "metricsHalstead.number_of_operands = number_of_operands",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "metricsHalstead.unique_operands = unique_operands",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "metricsHalstead.unique_operators = unique_operators",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "metricsHalstead.LTH = number_of_operators + number_of_operands",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "metricsHalstead.VOC = unique_operands + unique_operators",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "metricsHalstead.DIF = (unique_operators / 2) * (number_of_operands/unique_operands)",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "metricsHalstead.VOL = metricsHalstead.LTH * (math.log(metricsHalstead.VOC) / math.log(2) )",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "metricsHalstead.EFF = metricsHalstead.DIF * metricsHalstead.VOL",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "metricsHalstead.BUG = metricsHalstead.VOL/3000",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "metricsHalstead.time = metricsHalstead.EFF / 18",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "local function doHalstead(node)\r\n\tlocal operators = {}\t\t\t\t-- > {string_operator, number of times used}\r\n\tlocal operands = {}\t\t\t\t\t-- > {string operand , number of times used}\r\n\t\r\n\tlocal moduleMetrics = nil\r\n\r\n\tfor _, value in pairs(node.data) do\r\n\t\t\r\n\t\t-- check if current statement is function 'module'\r\n\t\tif (value.tag == 'Stat') then\r\n\t\t\tlocal stat = value.data[1]\r\n\t\t\tif (stat.tag == 'FunctionCall') then\r\n\t\t\t\tif (stat.data[1].data[1].text == 'module') then\r\n\t\t\t\t\tlocal exec = stat.data[1]\r\n\t\t\t\t\t\r\n\t\t\t\t\t-- set moduleMetrics variable - all next child nodes will also add its operator and operand values to moduleMetrics variable\r\n\t\t\t\t\t-- module is only from module function call downwards\r\n\t\t\t\t\tmoduleDefinitions[exec] = {}\r\n\t\t\t\t\tif (moduleDefinitions[exec].metrics == nil) then moduleDefinitions[exec].metrics = {} end\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleDefinitions[exec].halstead = {\r\n\t\t\t\t\t\toperators = {},\r\n\t\t\t\t\t\toperands = {}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (moduleMetrics) then \r\n\t\t\t\t\t\tcalculateHalstead(moduleMetrics, moduleMetrics.operators, moduleMetrics.operands)\r\n\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleMetrics = moduleDefinitions[exec].halstead\r\n\t\t\t\tend\t\r\n\t\t\tend\r\n\t\tend\r\n\t\t\r\n\t\tfor k,v in pairs(value.metrics.halstead.operators) do\r\n\t\t\tadd(operators, k, v)\r\n\t\t\tif (moduleMetrics) then \r\n\t\t\t\tadd(moduleMetrics.operators, k, v)\r\n\t\t\tend\r\n\t\tend\r\n\t\t\r\n\t\tfor k,v in pairs(value.metrics.halstead.operands) do\r\n\t\t\tadd(operands, k, v)\r\n\t\t\tif (moduleMetrics) then \r\n\t\t\t\tadd(moduleMetrics.operands, k, v)\r\n\t\t\tend\r\n\t\tend\r\n\t\t\r\n\t\t\r\n\t\tif (type(actions[value.tag]) == 'function') then actions[value.tag](value, operators, operands) end\r\n\t\t\r\n\tend\r\n\t\r\n\tif (node.metrics == nil) then node.metrics = {} end\r\n\tif (node.metrics.halstead == nil) then node.metrics.halstead = {} end\r\n\t\r\n\tcalculateHalstead(node.metrics.halstead, operators, operands)\r\n\tif (moduleMetrics) then \r\n\t\tcalculateHalstead(moduleMetrics, moduleMetrics.operators, moduleMetrics.operands)\r\n\tend\r\n\t\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "local operators = {}",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "local operands = {}",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "local moduleMetrics = nil",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "for _, value in pairs(node.data) do\r\n\t\t\r\n\t\t-- check if current statement is function 'module'\r\n\t\tif (value.tag == 'Stat') then\r\n\t\t\tlocal stat = value.data[1]\r\n\t\t\tif (stat.tag == 'FunctionCall') then\r\n\t\t\t\tif (stat.data[1].data[1].text == 'module') then\r\n\t\t\t\t\tlocal exec = stat.data[1]\r\n\t\t\t\t\t\r\n\t\t\t\t\t-- set moduleMetrics variable - all next child nodes will also add its operator and operand values to moduleMetrics variable\r\n\t\t\t\t\t-- module is only from module function call downwards\r\n\t\t\t\t\tmoduleDefinitions[exec] = {}\r\n\t\t\t\t\tif (moduleDefinitions[exec].metrics == nil) then moduleDefinitions[exec].metrics = {} end\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleDefinitions[exec].halstead = {\r\n\t\t\t\t\t\toperators = {},\r\n\t\t\t\t\t\toperands = {}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (moduleMetrics) then \r\n\t\t\t\t\t\tcalculateHalstead(moduleMetrics, moduleMetrics.operators, moduleMetrics.operands)\r\n\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleMetrics = moduleDefinitions[exec].halstead\r\n\t\t\t\tend\t\r\n\t\t\tend\r\n\t\tend\r\n\t\t\r\n\t\tfor k,v in pairs(value.metrics.halstead.operators) do\r\n\t\t\tadd(operators, k, v)\r\n\t\t\tif (moduleMetrics) then \r\n\t\t\t\tadd(moduleMetrics.operators, k, v)\r\n\t\t\tend\r\n\t\tend\r\n\t\t\r\n\t\tfor k,v in pairs(value.metrics.halstead.operands) do\r\n\t\t\tadd(operands, k, v)\r\n\t\t\tif (moduleMetrics) then \r\n\t\t\t\tadd(moduleMetrics.operands, k, v)\r\n\t\t\tend\r\n\t\tend\r\n\t\t\r\n\t\t\r\n\t\tif (type(actions[value.tag]) == 'function') then actions[value.tag](value, operators, operands) end\r\n\t\t\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 38,
    "text": "if (value.tag == 'Stat') then\r\n\t\t\tlocal stat = value.data[1]\r\n\t\t\tif (stat.tag == 'FunctionCall') then\r\n\t\t\t\tif (stat.data[1].data[1].text == 'module') then\r\n\t\t\t\t\tlocal exec = stat.data[1]\r\n\t\t\t\t\t\r\n\t\t\t\t\t-- set moduleMetrics variable - all next child nodes will also add its operator and operand values to moduleMetrics variable\r\n\t\t\t\t\t-- module is only from module function call downwards\r\n\t\t\t\t\tmoduleDefinitions[exec] = {}\r\n\t\t\t\t\tif (moduleDefinitions[exec].metrics == nil) then moduleDefinitions[exec].metrics = {} end\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleDefinitions[exec].halstead = {\r\n\t\t\t\t\t\toperators = {},\r\n\t\t\t\t\t\toperands = {}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (moduleMetrics) then \r\n\t\t\t\t\t\tcalculateHalstead(moduleMetrics, moduleMetrics.operators, moduleMetrics.operands)\r\n\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleMetrics = moduleDefinitions[exec].halstead\r\n\t\t\t\tend\t\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "local stat = value.data[1]",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "if (stat.tag == 'FunctionCall') then\r\n\t\t\t\tif (stat.data[1].data[1].text == 'module') then\r\n\t\t\t\t\tlocal exec = stat.data[1]\r\n\t\t\t\t\t\r\n\t\t\t\t\t-- set moduleMetrics variable - all next child nodes will also add its operator and operand values to moduleMetrics variable\r\n\t\t\t\t\t-- module is only from module function call downwards\r\n\t\t\t\t\tmoduleDefinitions[exec] = {}\r\n\t\t\t\t\tif (moduleDefinitions[exec].metrics == nil) then moduleDefinitions[exec].metrics = {} end\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleDefinitions[exec].halstead = {\r\n\t\t\t\t\t\toperators = {},\r\n\t\t\t\t\t\toperands = {}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (moduleMetrics) then \r\n\t\t\t\t\t\tcalculateHalstead(moduleMetrics, moduleMetrics.operators, moduleMetrics.operands)\r\n\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleMetrics = moduleDefinitions[exec].halstead\r\n\t\t\t\tend\t\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "if (stat.data[1].data[1].text == 'module') then\r\n\t\t\t\t\tlocal exec = stat.data[1]\r\n\t\t\t\t\t\r\n\t\t\t\t\t-- set moduleMetrics variable - all next child nodes will also add its operator and operand values to moduleMetrics variable\r\n\t\t\t\t\t-- module is only from module function call downwards\r\n\t\t\t\t\tmoduleDefinitions[exec] = {}\r\n\t\t\t\t\tif (moduleDefinitions[exec].metrics == nil) then moduleDefinitions[exec].metrics = {} end\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleDefinitions[exec].halstead = {\r\n\t\t\t\t\t\toperators = {},\r\n\t\t\t\t\t\toperands = {}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (moduleMetrics) then \r\n\t\t\t\t\t\tcalculateHalstead(moduleMetrics, moduleMetrics.operators, moduleMetrics.operands)\r\n\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\t\tmoduleMetrics = moduleDefinitions[exec].halstead\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "local exec = stat.data[1]",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "moduleDefinitions[exec] = {}",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "if (moduleDefinitions[exec].metrics == nil) then moduleDefinitions[exec].metrics = {} end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "moduleDefinitions[exec].metrics = {}",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "moduleDefinitions[exec].halstead = {\r\n\t\t\t\t\t\toperators = {},\r\n\t\t\t\t\t\toperands = {}\r\n\t\t\t\t\t}",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "if (moduleMetrics) then \r\n\t\t\t\t\t\tcalculateHalstead(moduleMetrics, moduleMetrics.operators, moduleMetrics.operands)\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "calculateHalstead(moduleMetrics, moduleMetrics.operators, moduleMetrics.operands)",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "moduleMetrics = moduleDefinitions[exec].halstead",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "for k,v in pairs(value.metrics.halstead.operators) do\r\n\t\t\tadd(operators, k, v)\r\n\t\t\tif (moduleMetrics) then \r\n\t\t\t\tadd(moduleMetrics.operators, k, v)\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 51,
    "text": "add(operators, k, v)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "if (moduleMetrics) then \r\n\t\t\t\tadd(moduleMetrics.operators, k, v)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "add(moduleMetrics.operators, k, v)",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "for k,v in pairs(value.metrics.halstead.operands) do\r\n\t\t\tadd(operands, k, v)\r\n\t\t\tif (moduleMetrics) then \r\n\t\t\t\tadd(moduleMetrics.operands, k, v)\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 55,
    "text": "add(operands, k, v)",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "if (moduleMetrics) then \r\n\t\t\t\tadd(moduleMetrics.operands, k, v)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "add(moduleMetrics.operands, k, v)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "if (type(actions[value.tag]) == 'function') then actions[value.tag](value, operators, operands) end",
    "type": "statement:if"
  }, {
    "id": 59,
    "text": "actions[value.tag](value, operators, operands)",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "if (node.metrics == nil) then node.metrics = {} end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "node.metrics = {}",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "if (node.metrics.halstead == nil) then node.metrics.halstead = {} end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "node.metrics.halstead = {}",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "calculateHalstead(node.metrics.halstead, operators, operands)",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "if (moduleMetrics) then \r\n\t\tcalculateHalstead(moduleMetrics, moduleMetrics.operators, moduleMetrics.operands)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "function (node) \r\n\t\t\tdoHalstead(node)\r\n\t\t\treturn node \r\n\t\tend",
    "type": "function"
  }, {
    "id": 68,
    "text": "doHalstead(node)",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "function (node) \r\n\t\tdoHalstead(node)\r\n\t\t\r\n\t\tif not node.metrics.moduleDefinitions then node.metrics.moduleDefinitions = {} end\r\n\t\t\r\n\t\tfor exec, data in pairs(moduleDefinitions) do\r\n\t\t\tif not node.metrics.moduleDefinitions[exec] then node.metrics.moduleDefinitions[exec] = {} end\r\n\t\t\tnode.metrics.moduleDefinitions[exec].halstead = data.halstead\r\n\t\tend\t\r\n\t\t\r\n\t\tmoduleDefinitions = {}\r\n\t\t\r\n\t\treturn node \r\n\tend",
    "type": "function"
  }, {
    "id": 72,
    "text": "if not node.metrics.moduleDefinitions then node.metrics.moduleDefinitions = {} end",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "node.metrics.moduleDefinitions = {}",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "for exec, data in pairs(moduleDefinitions) do\r\n\t\t\tif not node.metrics.moduleDefinitions[exec] then node.metrics.moduleDefinitions[exec] = {} end\r\n\t\t\tnode.metrics.moduleDefinitions[exec].halstead = data.halstead\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 75,
    "text": "if not node.metrics.moduleDefinitions[exec] then node.metrics.moduleDefinitions[exec] = {} end",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "node.metrics.moduleDefinitions[exec] = {}",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "node.metrics.moduleDefinitions[exec].halstead = data.halstead",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "moduleDefinitions = {}",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "function(node, operators, operands)\r\n\t\t\t-- operand - identifier\r\n\t\t\tadd(operands, node.text)\r\n\t\t\tif (moduleMetrics) then \r\n\t\t\t\tadd(moduleMetrics.operands, node.text)\r\n\t\t\tend\r\n\t\tend",
    "type": "function"
  }, {
    "id": 81,
    "text": "add(operands, node.text)",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "if (moduleMetrics) then \r\n\t\t\t\tadd(moduleMetrics.operands, node.text)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 83,
    "text": "add(moduleMetrics.operands, node.text)",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "function(node, operators, operands)\r\n\t\t\t-- operand - constant\r\n\t\t\tadd(operands, node.text)\r\n\t\t\tif (moduleMetrics) then \r\n\t\t\t\tadd(moduleMetrics.operands, node.text)\r\n\t\t\tend\r\n\t\tend",
    "type": "function"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "function(node, operators, operands)\r\n\t\t\t-- operand - constant\r\n\t\t\tadd(operands, node.text)\r\n\t\t\tif (moduleMetrics) then \r\n\t\t\t\tadd(moduleMetrics.operands, node.text)\r\n\t\t\tend\r\n\t\tend",
    "type": "function"
  }, {
    "id": 88,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 89,
    "text": "function(node, operators, operands)\r\n\t\t\t-- operand - identifier\r\n\t\t\tlocal names = utils.getNamesFromNameList(node)\r\n\t\t\tfor _, name in pairs(names) do\r\n\t\t\t\tadd(operands, name.text)\r\n\t\t\t\tif (moduleMetrics) then \r\n\t\t\t\tadd(moduleMetrics.operands, node.text)\r\n\t\t\tend\r\n\t\t\tend\r\n\t\tend",
    "type": "function"
  }, {
    "id": 90,
    "text": "local names = utils.getNamesFromNameList(node)",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "for _, name in pairs(names) do\r\n\t\t\t\tadd(operands, name.text)\r\n\t\t\t\tif (moduleMetrics) then \r\n\t\t\t\tadd(moduleMetrics.operands, node.text)\r\n\t\t\tend\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 92,
    "text": "add(operands, name.text)",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 94,
    "text": "function(node, operators, operands)\r\n\t\t\t-- it's name is operand - identifier\r\n\t\t\tlocal nameNode = utils.searchForTagItem('Name', node.data)\r\n\t\t\tif (nameNode) then\r\n\t\t\t\tadd(operands, nameNode.text)\r\n\t\t\t\tif (moduleMetrics) then \r\n\t\t\t\tadd(moduleMetrics.operands, node.text)\r\n\t\t\tend\r\n\t\t\tend\r\n\t\tend",
    "type": "function"
  }, {
    "id": 95,
    "text": "local nameNode = utils.searchForTagItem('Name', node.data)",
    "type": "statement:localassign"
  }, {
    "id": 96,
    "text": "if (nameNode) then\r\n\t\t\t\tadd(operands, nameNode.text)\r\n\t\t\t\tif (moduleMetrics) then \r\n\t\t\t\tadd(moduleMetrics.operands, node.text)\r\n\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "add(operands, nameNode.text)",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 99,
    "text": "function(node, operators, operands)\r\n\t\t\t-- operator - parts reserved for language Lua\r\n\t\t\tadd(operators, node.text)\r\n\t\t\tif (moduleMetrics) then \r\n\t\t\t\tadd(moduleMetrics.operators, node.text)\r\n\t\t\tend\r\n\t\tend",
    "type": "function"
  }, {
    "id": 100,
    "text": "add(operators, node.text)",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "if (moduleMetrics) then \r\n\t\t\t\tadd(moduleMetrics.operators, node.text)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 102,
    "text": "add(moduleMetrics.operators, node.text)",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 104,
    "text": "function(node, operators, operands)\r\n\t\t\t-- operator - parts reserved for language Lua\r\n\t\t\tadd(operators, node.text)\r\n\t\t\tif (moduleMetrics) then \r\n\t\t\t\tadd(moduleMetrics.operators, node.text)\r\n\t\t\tend\r\n\t\tend",
    "type": "function"
  }, {
    "id": 105,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 106,
    "text": "function()\r\n\tlocal key,value\r\n\tlocal new_table = {}\r\n\tfor key,value in pairs(keys) do\r\n\t\tnew_table[key] = function (node) \r\n\t\t\tdoHalstead(node)\r\n\t\t\treturn node \r\n\t\tend\r\n\tend\t\r\n\t\r\n\tnew_table[1] = function (node) \r\n\t\tdoHalstead(node)\r\n\t\t\r\n\t\tif not node.metrics.moduleDefinitions then node.metrics.moduleDefinitions = {} end\r\n\t\t\r\n\t\tfor exec, data in pairs(moduleDefinitions) do\r\n\t\t\tif not node.metrics.moduleDefinitions[exec] then node.metrics.moduleDefinitions[exec] = {} end\r\n\t\t\tnode.metrics.moduleDefinitions[exec].halstead = data.halstead\r\n\t\tend\t\r\n\t\t\r\n\t\tmoduleDefinitions = {}\r\n\t\t\r\n\t\treturn node \r\n\tend\r\n\t\r\n\treturn new_table\r\nend",
    "type": "function"
  }, {
    "id": 107,
    "text": "local key,value",
    "type": "statement:localassign"
  }, {
    "id": 108,
    "text": "local new_table = {}",
    "type": "statement:localassign"
  }, {
    "id": 109,
    "text": "for key,value in pairs(keys) do\r\n\t\tnew_table[key] = function (node) \r\n\t\t\tdoHalstead(node)\r\n\t\t\treturn node \r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 110,
    "text": "new_table[key] = function (node) \r\n\t\t\tdoHalstead(node)\r\n\t\t\treturn node \r\n\t\tend",
    "type": "statement:assign"
  }, {
    "id": 111,
    "text": "new_table[1] = function (node) \r\n\t\tdoHalstead(node)\r\n\t\t\r\n\t\tif not node.metrics.moduleDefinitions then node.metrics.moduleDefinitions = {} end\r\n\t\t\r\n\t\tfor exec, data in pairs(moduleDefinitions) do\r\n\t\t\tif not node.metrics.moduleDefinitions[exec] then node.metrics.moduleDefinitions[exec] = {} end\r\n\t\t\tnode.metrics.moduleDefinitions[exec].halstead = data.halstead\r\n\t\tend\t\r\n\t\t\r\n\t\tmoduleDefinitions = {}\r\n\t\t\r\n\t\treturn node \r\n\tend",
    "type": "statement:assign"
  }, {
    "id": 112,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 113,
    "text": "",
    "type": "function container"
  }, {
    "id": 114,
    "text": "function doGlobalMetrics(file_metricsAST_list)\r\n\r\n\t-- keep AST lists\r\n\tlocal returnObject = {}\r\n\treturnObject.file_AST_list = file_metricsAST_list\r\n\r\n\t--- function declarations\r\n\tlocal total_function_definitions = {}\r\n\r\n\tlocal anonymouscounter=0   -- for naming anonymous functions\r\n\tlocal anonymouscounterT = 0 -- for naming anonymous  tables\r\n\tfor filename, AST in pairs(file_metricsAST_list) do\r\n\t\tfor _, fun in pairs(AST.metrics.blockdata.fundefs) do\r\n\r\n\t\t\t-- edit to suit luadoc expectations\r\n\t\t\tif (fun.tag == 'GlobalFunction' or fun.tag == 'LocalFunction' or fun.tag == 'Function') then\r\n-- anonymous function type\r\n\t\t\t\tif(fun.name==\"#anonymous#\")then\r\n\t\t\t\t\tanonymouscounter=anonymouscounter+1\r\n\t\t\t\t\tfun.name = fun.name .. anonymouscounter\r\n\t\t\t\t\tfun.path = filename\r\n\t\t\t\telseif(fun.name:match(\"[%.%[]\") or fun.isGlobal==nil)then\r\n-- table-field function type\r\n\t\t\t\t\tfun.fcntype = 'table-field'\r\n\t\t\t\telseif (fun.isGlobal) then fun.fcntype = 'global' else fun.fcntype = 'local' end\r\n\t\t\t\t\tfun.path = filename\r\n\t\t\t\t\ttable.insert(total_function_definitions, fun)\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\ttable.sort(total_function_definitions, utils.compare_functions_by_name)\r\n\treturnObject.functionDefinitions = total_function_definitions\r\n\r\n\r\n-- ^ `tables` list of tables in files , concatenate luaDoc_tables and docutables\r\n\tlocal total_table_definitions = {}\r\n\tlocal set = {}\r\n\tfor filename, AST in pairs(file_metricsAST_list) do\r\n\r\n\t-- concatenate two tables by  Exp node tables\r\n\r\n\t\tfor k,tabl in pairs(AST.luaDoc_tables) do\r\n\t\t\ttabl.path=filename\r\n\t\t\ttabl.name = k\r\n\t\t\ttable.insert(total_table_definitions, tabl)\r\n\t\t\tset[tabl] = true\r\n\t\tend\r\n\t\tfor k,tabl in pairs(AST.metrics.docutables) do\r\n\t\t\tif(tabl.ttype==\"anonymous\")then\r\n\t\t\t\tanonymouscounterT=anonymouscounterT+1\r\n\t\t\t \ttabl.name = tabl.name .. anonymouscounterT\r\n\t\t\tend\r\n\t\t\tif (not tabl.Expnode) then\r\n\t\t\t \ttabl.path = filename\r\n\t\t\t\ttable.insert(total_table_definitions, tabl)\r\n\t\t\telseif(set[tabl.Expnode]~=true)then\r\n\t\t\t\ttabl.path = filename\r\n\t\t\t\ttable.insert(total_table_definitions, tabl)\r\n\t\t\t\tset[tabl.Expnode] = true\r\n\t\t\tend\r\n\t\tend\r\n \tend\r\n\treturnObject.tables = total_table_definitions\r\n\r\n\r\n\r\n\t-- merge number of lines metrics\r\n\treturnObject.LOC = {}\r\n\r\n\tfor filename, AST in pairs(file_metricsAST_list) do\r\n\r\n\t\tfor name, count in pairs(AST.metrics.LOC) do\r\n\t\t\tif not returnObject.LOC[name] then returnObject.LOC[name] = 0 end\r\n\t\t\treturnObject.LOC[name] = returnObject.LOC[name] + count\r\n\t\tend\r\n\r\n\tend\r\n\t-- combine halstead metrics\r\n\r\n\tlocal operators, operands = {}, {}\r\n\r\n\tfor filename, AST in pairs(file_metricsAST_list) do\r\n\t\tfor name, count in pairs(AST.metrics.halstead.operators) do\r\n\t\t\tif (operators[name] == nil) then\r\n\t\t\t\toperators[name] = count\r\n\t\t\telse\r\n\t\t\t\toperators[name] = operators[name] + count\r\n\t\t\tend\r\n\t\tend\r\n\t\tfor name, count in pairs(AST.metrics.halstead.operands) do\r\n\t\t\tif (operands[name] == nil) then\r\n\t\t\t\toperands[name] = count\r\n\t\t\telse\r\n\t\t\t\toperands[name] = operands[name] + count\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\r\n\tlocal number_of_operators = 0\r\n\tlocal unique_operators = 0\r\n\tfor op, count in pairs(operators) do\r\n\t\tunique_operators = unique_operators + 1\r\n\t\tnumber_of_operators = number_of_operators + count\r\n\tend\r\n\r\n\tlocal number_of_operands = 0\r\n\tlocal unique_operands = 0\r\n\tfor op, count in pairs(operands) do\r\n\t\tunique_operands = unique_operands + 1\r\n\t\tnumber_of_operands = number_of_operands + count\r\n\tend\r\n\r\n\treturnObject.halstead = {}\r\n\r\n\thalstead_capt.calculateHalstead(returnObject.halstead, operators, operands)\r\n\r\n\t-- instability metric for each module\r\n\t-- \t\tafferent and efferent coupling --- instability metric\r\n\t-- \t\tafferent - connection to other modules\r\n\t-- \t\tefferent - connetions from other modules\r\n\r\n\tfor currentFilename, currentAST in pairs(file_metricsAST_list) do\r\n\r\n\t\tcurrentAST.metrics.coupling = {}\r\n\t\tcurrentAST.metrics.coupling.afferent_coupling = 0\r\n\t\tcurrentAST.metrics.coupling.efferent_coupling = 0\r\n\r\n\t\tlocal currentName = currentAST.metrics.currentModuleName or filename\r\n\r\n\t\tfor name in pairs(currentAST.metrics.moduleCalls) do\r\n\t\t\tcurrentAST.metrics.coupling.afferent_coupling = currentAST.metrics.coupling.afferent_coupling + 1\r\n\t\tend\r\n\r\n\t\tfor filename, AST in pairs(file_metricsAST_list) do\r\n\t\t\tif (filename ~= currentFilename) then\r\n\t\t\t\tif (AST.metrics.moduleCalls[currentName]) then currentAST.metrics.coupling.efferent_coupling = currentAST.metrics.coupling.efferent_coupling + 1 end\r\n\t\t\tend\r\n\t\tend\r\n\r\n\t\tcurrentAST.metrics.coupling.instability = currentAST.metrics.coupling.afferent_coupling / (currentAST.metrics.coupling.efferent_coupling + currentAST.metrics.coupling.afferent_coupling)\r\n\r\n\tend\r\n\r\n\t-- statement metrics\r\n\r\n\treturnObject.statements = {}\r\n\r\n\tfor filename, AST in pairs(file_metricsAST_list) do\r\n\r\n\t\tfor name, stats in pairs(AST.metrics.statements) do\r\n\t\t\tif not returnObject.statements[name] then returnObject.statements[name] = {} end\r\n\t\t\tfor _, stat in pairs(stats) do\r\n\t\t\t\ttable.insert(returnObject.statements[name], stat)\r\n\t\t\tend\r\n\t\tend\r\n\r\n\tend\r\n\r\n\t-- merge moduleDefinitions\r\n\treturnObject.moduleDefinitions = {}\r\n\r\n\tfor filename, AST in pairs(file_metricsAST_list) do\r\n\t\tfor exec, moduleRef in pairs(AST.metrics.moduleDefinitions) do\r\n\t\t\tif (moduleRef.moduleName) then\r\n\t\t\t\ttable.insert(returnObject.moduleDefinitions, moduleRef)\r\n\t\t\tend\r\n\t\tend\r\n\r\n\tend\r\n\r\n\r\n\t--merge document metrics\r\n\treturnObject.documentMetrics={}\r\n\tfor filename, AST in pairs(file_metricsAST_list) do\r\n\t\tfor name, count in pairs(AST.metrics.documentMetrics) do\r\n\t\t\tif( type(count)==\"table\")then\r\n\t\t\t\tif not returnObject.documentMetrics[name] then returnObject.documentMetrics[name]={} end\r\n\t\t\t\tfor _,v in pairs(count) do\r\n\t\t\t\t\ttable.insert(returnObject.documentMetrics[name],v)\r\n\t\t\t\tend\r\n\t\t\telse\r\n\t\t\t\tif not returnObject.documentMetrics[name] then returnObject.documentMetrics[name] = 0 end\r\n\t\t\t\treturnObject.documentMetrics[name]=returnObject.documentMetrics[name]+count\r\n\t\t\tend\r\n\t\tend\r\n\tend\t\t\r\n  \r\n  --merge code smells\r\n  returnObject.documentSmells = {} --Document smells sub-table\r\n  returnObject.documentSmells.MI = smells_capt.countMI(file_metricsAST_list) --Add maintainability index\r\n  returnObject.documentSmells.functionSmells = smells_capt.countFunctionSmells(file_metricsAST_list) --Add function smells eg: LOC, cyclomatic, halstead etc.\r\n  returnObject.documentSmells.moduleSmells = {} --Module smells sub-table\r\n  returnObject.documentSmells.smellsTable = smells_capt.getSmells(file_metricsAST_list)\r\n\r\n\r\n  for filename, AST in pairs(file_metricsAST_list) do --Merge smells in modules to sub-table\r\n    table.insert(returnObject.documentSmells.moduleSmells, {file = filename, RFC = AST.smells.RFC, WMC = AST.smells.WMC, NOM = AST.smells.NOM, responseToNOM = AST.smells.responseToNOM, CBO = AST.smells.CBO, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlongLines = AST.smells.longLines })\r\n  end\r\n\r\n\treturn returnObject\r\nend",
    "type": "function"
  }, {
    "id": 115,
    "text": "function searchForTagItem(tagname, data)\r\n\tfor j,l in pairs(data) do\r\n\t\tif (l.tag == tagname) then\r\n\t\t\treturn l\t\r\n\t\tend\r\n\tend\r\n\treturn nil\r\nend",
    "type": "function"
  }, {
    "id": 116,
    "text": "function getNamesFromNameList(nameList)\r\n\tlocal names = {}\r\n\tfor i,j in pairs(nameList.data) do\r\n\t\tif (j.tag == 'Name' or j.tag == 'Var') then\r\n\t\t\ttable.insert(names, j)\r\n\t\tend\r\n\tend\r\n\treturn names\r\nend",
    "type": "function"
  }, {
    "id": 117,
    "text": "log",
    "type": "global function"
  }, {
    "id": 118,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 119,
    "text": "tag]",
    "type": "global function"
  }, {
    "id": 120,
    "text": "module",
    "type": "global function"
  }, {
    "id": 121,
    "text": "require",
    "type": "global function"
  }, {
    "id": 122,
    "text": "type",
    "type": "global function"
  }, {
    "id": 123,
    "text": "",
    "type": "variable container"
  }, {
    "id": 124,
    "text": "",
    "type": "require container"
  }, {
    "id": 125,
    "text": "",
    "type": "local variable"
  }, {
    "id": 126,
    "text": "",
    "type": "n/a"
  }, {
    "id": 127,
    "text": "",
    "type": "local variable"
  }, {
    "id": 128,
    "text": "",
    "type": "n/a"
  }, {
    "id": 129,
    "text": "",
    "type": "local variable"
  }, {
    "id": 130,
    "text": "",
    "type": "n/a"
  }, {
    "id": 131,
    "text": "",
    "type": "local variable"
  }, {
    "id": 132,
    "text": "",
    "type": "n/a"
  }, {
    "id": 133,
    "text": "",
    "type": "local variable"
  }, {
    "id": 134,
    "text": "",
    "type": "n/a"
  }, {
    "id": 135,
    "text": "",
    "type": "local variable"
  }, {
    "id": 136,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 137,
    "text": "",
    "type": "local variable"
  }, {
    "id": 138,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 139,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 140,
    "text": "",
    "type": "function"
  }, {
    "id": 141,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 142,
    "text": "",
    "type": "function"
  }, {
    "id": 143,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 144,
    "text": "",
    "type": "function"
  }, {
    "id": 145,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 146,
    "text": "",
    "type": "function"
  }, {
    "id": 147,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 148,
    "text": "",
    "type": "function"
  }, {
    "id": 149,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 150,
    "text": "",
    "type": "function"
  }, {
    "id": 151,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 152,
    "text": "",
    "type": "function"
  }, {
    "id": 153,
    "text": "",
    "type": "global variable"
  }, {
    "id": 154,
    "text": "",
    "type": "n/a"
  }, {
    "id": 155,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 156,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 157,
    "text": "(math)",
    "type": "module"
  }, {
    "id": 158,
    "text": "",
    "type": "require local variable"
  } ]
}