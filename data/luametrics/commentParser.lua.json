{
  "_filename": "commentParser.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luametrics/src/metrics/luadoc/commentParser.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "calls",
    "to": 4
  }, {
    "from": 2,
    "label": "calls",
    "to": 4
  }, {
    "from": 3,
    "label": "calls",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 15
  }, {
    "from": 22,
    "label": "has",
    "to": 16
  }, {
    "from": 22,
    "label": "has",
    "to": 17
  }, {
    "from": 22,
    "label": "has",
    "to": 18
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 16
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 22,
    "label": "has",
    "to": 15
  }, {
    "from": 22,
    "label": "has",
    "to": 19
  }, {
    "from": 7,
    "label": "has",
    "to": 27
  }, {
    "from": 4,
    "label": "has",
    "to": 28
  }, {
    "from": 4,
    "label": "has",
    "to": 29
  }, {
    "from": 4,
    "label": "calls",
    "to": 32
  }, {
    "from": 30,
    "label": "calls",
    "to": 35
  }, {
    "from": 4,
    "label": "calls",
    "to": 36
  }, {
    "from": 4,
    "label": "calls",
    "to": 37
  }, {
    "from": 30,
    "label": "calls",
    "to": 38
  }, {
    "from": 30,
    "label": "calls",
    "to": 38
  }, {
    "from": 30,
    "label": "calls",
    "to": 38
  }, {
    "from": 30,
    "label": "calls",
    "to": 38
  }, {
    "from": 4,
    "label": "calls",
    "to": 39
  }, {
    "from": 4,
    "label": "calls",
    "to": 39
  }, {
    "from": 4,
    "label": "calls",
    "to": 39
  }, {
    "from": 4,
    "label": "calls",
    "to": 39
  }, {
    "from": 4,
    "label": "calls",
    "to": 39
  }, {
    "from": 4,
    "label": "calls",
    "to": 39
  }, {
    "from": 4,
    "label": "calls",
    "to": 39
  }, {
    "from": 4,
    "label": "calls",
    "to": 39
  }, {
    "from": 4,
    "label": "calls",
    "to": 39
  }, {
    "from": 4,
    "label": "calls",
    "to": 39
  }, {
    "from": 4,
    "label": "calls",
    "to": 39
  }, {
    "from": 4,
    "label": "calls",
    "to": 39
  }, {
    "from": 4,
    "label": "calls",
    "to": 39
  }, {
    "from": 4,
    "label": "calls",
    "to": 39
  }, {
    "from": 4,
    "label": "calls",
    "to": 39
  }, {
    "from": 4,
    "label": "calls",
    "to": 39
  }, {
    "from": 4,
    "label": "calls",
    "to": 39
  }, {
    "from": 4,
    "label": "calls",
    "to": 39
  }, {
    "from": 4,
    "label": "calls",
    "to": 39
  }, {
    "from": 4,
    "label": "calls",
    "to": 39
  }, {
    "from": 4,
    "label": "calls",
    "to": 34
  }, {
    "from": 4,
    "label": "calls",
    "to": 34
  }, {
    "from": 1,
    "label": "contains",
    "to": 30
  }, {
    "from": 30,
    "label": "declares",
    "to": 4
  }, {
    "from": 41,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 42
  }, {
    "from": 1,
    "label": "contains",
    "to": 43
  }, {
    "from": 43,
    "label": "initializes",
    "to": 44
  }, {
    "from": 44,
    "label": "requires",
    "to": 33
  }, {
    "from": 43,
    "label": "initializes",
    "to": 45
  }, {
    "from": 45,
    "label": "requires",
    "to": 40
  }, {
    "from": 43,
    "label": "initializes",
    "to": 46
  }, {
    "from": 46,
    "label": "requires",
    "to": 47
  }, {
    "from": 43,
    "label": "initializes",
    "to": 48
  }, {
    "from": 48,
    "label": "requires",
    "to": 31
  }, {
    "from": 49,
    "label": "requires",
    "to": 47
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "commentParser",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function processFunction(comment, funcAST)\r\n\tlocal name = nil\r\n\r\n\tif (funcAST.name) then\r\n\t\tname = funcAST.name\r\n\telse\r\n\t\treturn\r\n\tend\r\n\t--added functionality to recognize partly documented and not standardly documented functions, options 2 and 3 for key 'documented' in funcAST\r\n\t--by Peter Mendel, 05/2014\r\n\r\n\t--matches explua template comment generated by comments.templateComments\r\n\tif string.match(comment,\"%-%-%-[%s]+%-%-%%%s[%a]*%s[%a]*%sfunction[\\n]\") then\r\n\t\tfuncAST.documented = 2 \t\t-- partly documented function\r\n\telse\r\n\t\tlocal result = commentParser.parse(comment,0,true) or commentParser.parse(comment,0)\r\n\t\tif (result) then\r\n\t\t\tfuncAST.documented=1\r\n\t\t\tfor k,v in pairs(result) do\r\n\r\n\t\t\t\tif (v.tag == 'comment') then\r\n\r\n\t\t\t\t\tfuncAST.description =(funcAST.description or '') .. v.text .. ' '\r\n\t\t\t\tend\r\n\t\t\t\tif (v.item == 'name') then\r\n\t\t\t\t\tname = v.text\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tfuncAST.comment=(string.match(funcAST.description or '', \"(.-%.)[%s\\t]\") or funcAST.description)\r\n\t\telse\r\n\t\t\tfuncAST.comment = comment\r\n\t\tend\r\n\t\tif result == nil then\r\n\t\t\tfuncAST.documented=3 -- not standardly documented\r\n\t\t\tfuncAST.comment = string.match(comment,\"[^\\n]*\")\r\n\t\tend\r\n\tend\r\n\t--end Peter Mendel\r\n\tlocal block = nil\r\n\r\n\tfor k, v in pairs(funcAST.data) do\r\n\t\tif (v.tag == 'FuncBody') then\r\n\t\t\tfor i,j in pairs(v.data) do\r\n\t\t\t\tif (j.tag == 'Block') then\r\n\t\t\t\t\tblock = j\r\n\t\t\t\t\tbreak\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tbreak\r\n\t\tend\r\n\tend\r\n\r\n\tfuncAST.metrics.blockdata \t\t\t\t= {}\r\n\tfuncAST.metrics.blockdata.locals \t\t= block.metrics.blockdata.locals\r\n\tfuncAST.metrics.blockdata.locals_total \t= block.metrics.blockdata.locals_total\r\n\tfuncAST.metrics.blockdata.remotes \t\t= block.metrics.blockdata.remotes\r\n\tfuncAST.metrics.blockdata.read_upvalue \t= block.metrics.blockdata.read_upvalue\r\n\tfuncAST.metrics.blockdata.write_upvalue = block.metrics.blockdata.write_upvalue\r\n\tfuncAST.metrics.blockdata.execs \t\t= block.metrics.blockdata.execs\r\n\r\n\tif name then stack_functions[name] = funcAST end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local function processAssign(comment, assignAST)\r\n\r\n\tif (assignAST.tag ~= 'LocalAssign' and  assignAST.tag ~= 'Assign') then\r\n\t\treturn\r\n\tend\r\n\r\n\t-- parse luadoc comment\r\n\tlocal result = commentParser.parse(comment)\r\n\r\n\tlocal ldoc_class = nil\r\n\tlocal ldoc_name = nil\r\n\tlocal commentflag = 0\r\n\tlocal comment = ''\r\n\tlocal description=\"\"\r\n\tif (result) then\r\n\r\n\t\tfor k,v in pairs(result) do\r\n\t\t\tif (v.item == 'name') then\r\n\t\t\t\tldoc_name = v.text\r\n\t\t\tend\r\n\t\t\tif (v.tag == 'comment') then\r\n\t\t\t\tdescription =(description or '') .. v.text .. ' '\r\n\t\t\tend\r\n\r\n\t\t\tif (v.item == 'class') then\r\n\t\t\t\tldoc_class = v.text\r\n\t\t\tend\r\n\t\tend\r\n\t\tcomment=(string.match(description, \"(.-%.)[%s\\t]\") or description)\r\n\tend\r\n\r\n\r\n\tif ldoc_class == 'table' and ldoc_name ~= nil then\r\n\t\tlocal namelist = nil\r\n\t\tlocal explist = nil\r\n\t\tlocal commentflag = 1\r\n\t\tfor k,v in pairs(assignAST.data) do\r\n\t\t\tif (v.tag) == 'NameList' or (v.tag == 'VarList') then namelist = v end\r\n\t\t\tif (v.tag) == 'ExpList' then explist = v end\r\n\r\n\t\tend\r\n\r\n\t\tfor k,v in pairs(namelist.data) do \t\t\t-- compare namelist and explist values ... create result table\r\n\t\t\tif (v.text == ldoc_name) then\r\n\t\t\t\texplist.data[k].documented = commentflag\r\n\t\t\t\texplist.data[k].description = description\r\n\t\t\t\texplist.data[k].comment = comment\r\n\t\t\t\tif(assignAST.tag == 'Assign')then\r\n\t\t\t\t\texplist.data[k].ttype = \t''\t\t--old: 'global' not sure, what if\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t-- local newtable\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t-- newtable = {}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t--TODO set correct ttype -- see: captures/block.lua\r\n\t\t\t\telse\r\n\t\t\t\t\texplist.data[k].ttype = \t'local'\r\n\t\t\t\tend\r\n\t\t\t\tstack_tables[v.text] = explist.data[k]\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function parse(text)\r\n\r\nlocal result\r\n--^ `novy parser z modulu comments`\r\n--info converts new result table of comments parser to old form\r\nlocal t={}\r\n\r\nif(string.match(text,\"^[%s]*%-%-%-\"))then\r\n\tfor v in string.gmatch(text,\"[^\\n]+\")do\r\n\t\t-- print(v)\r\n\t\t\tlocal minires =comments.Parse(v)\r\n\t\t\t\t\r\n\t\t\tif(minires and minires.style==\"luadoc\")then \r\n\t\t\t\ttable.insert(t,v)\r\n\t\t\t\tfor key,val in pairs(minires) do\r\n\t\t\t\t\tif(key~=\"style\")then\r\n\t\t\t\t\t\tif(key==\"type\" and val==\"descr\" )then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.text)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"comment\",text=minires.text})\r\n\t\t\t\t\t\telseif(key==\"type\" and (val==\"class\" or val==\"name\") )then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.name)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"item\",item=val,text=minires.name})\r\n\t\t\t\t\t\telseif(key==\"type\")then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.text)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"item\",item=val,text=minires.name,textt=minires.text})\r\n\t\t\t\t\t\tend\r\n\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\telseif(minires and minires.style==\"explua\")then\r\n\t\t\t\ttable.insert(t,v)\r\n\t\t\t\tfor key,val in pairs(minires) do\r\n\t\t\t\t\tif(key~=\"style\")then\r\n\t\t\t\t\t\tif(key==\"type\" and val==\"descr\" )then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.text)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"comment\",text=minires.text})\r\n\t\t\t\t\t\telseif(key==\"type\" and (val==\"class\" or val==\"name\") )then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.name)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"item\",item=val,text=minires.name})\r\n\t\t\t\t\t\telseif(key==\"type\" and val==\"table\" )then\r\n\t\t\t\t\t\t\ttable.insert(t,\"table\")\r\n\t\t\t\t\t\t\ttable.insert(t,{text=\"table\",item=\"class\",tag=\"item\"})\t\r\n\t\t\t\t\t\t\ttable.insert(t,{text=minires.var,item=\"name\",tag=\"item\"})\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"comment\",text=minires.text})\r\n\t\t\t\t\t\telseif(key==\"type\" and val==\"tablefield\")then\r\n\t\t\t\t\t\t\ttable.insert(t,\"table\")\r\n\t\t\t\t\t\t\ttable.insert(t,{text=minires.var,item=\"field\",tag=\"item\",textt=minires.text,table=minires.table})\t\r\n\t\t\t\t\t\telseif(key==\"type\")then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.text)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"item\",item=val,text=minires.name,textt=minires.text})\r\n\t\t\t\t\t\tend\r\n\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\r\n\tend\r\n\tresult=t\r\nend\r\n--v\r\n\treturn result\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "local result",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "local t={}",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "if(string.match(text,\"^[%s]*%-%-%-\"))then\r\n\tfor v in string.gmatch(text,\"[^\\n]+\")do\r\n\t\t-- print(v)\r\n\t\t\tlocal minires =comments.Parse(v)\r\n\t\t\t\t\r\n\t\t\tif(minires and minires.style==\"luadoc\")then \r\n\t\t\t\ttable.insert(t,v)\r\n\t\t\t\tfor key,val in pairs(minires) do\r\n\t\t\t\t\tif(key~=\"style\")then\r\n\t\t\t\t\t\tif(key==\"type\" and val==\"descr\" )then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.text)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"comment\",text=minires.text})\r\n\t\t\t\t\t\telseif(key==\"type\" and (val==\"class\" or val==\"name\") )then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.name)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"item\",item=val,text=minires.name})\r\n\t\t\t\t\t\telseif(key==\"type\")then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.text)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"item\",item=val,text=minires.name,textt=minires.text})\r\n\t\t\t\t\t\tend\r\n\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\telseif(minires and minires.style==\"explua\")then\r\n\t\t\t\ttable.insert(t,v)\r\n\t\t\t\tfor key,val in pairs(minires) do\r\n\t\t\t\t\tif(key~=\"style\")then\r\n\t\t\t\t\t\tif(key==\"type\" and val==\"descr\" )then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.text)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"comment\",text=minires.text})\r\n\t\t\t\t\t\telseif(key==\"type\" and (val==\"class\" or val==\"name\") )then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.name)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"item\",item=val,text=minires.name})\r\n\t\t\t\t\t\telseif(key==\"type\" and val==\"table\" )then\r\n\t\t\t\t\t\t\ttable.insert(t,\"table\")\r\n\t\t\t\t\t\t\ttable.insert(t,{text=\"table\",item=\"class\",tag=\"item\"})\t\r\n\t\t\t\t\t\t\ttable.insert(t,{text=minires.var,item=\"name\",tag=\"item\"})\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"comment\",text=minires.text})\r\n\t\t\t\t\t\telseif(key==\"type\" and val==\"tablefield\")then\r\n\t\t\t\t\t\t\ttable.insert(t,\"table\")\r\n\t\t\t\t\t\t\ttable.insert(t,{text=minires.var,item=\"field\",tag=\"item\",textt=minires.text,table=minires.table})\t\r\n\t\t\t\t\t\telseif(key==\"type\")then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.text)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"item\",item=val,text=minires.name,textt=minires.text})\r\n\t\t\t\t\t\tend\r\n\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\r\n\tend\r\n\tresult=t\r\nend",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "for v in string.gmatch(text,\"[^\\n]+\")do\r\n\t\t-- print(v)\r\n\t\t\tlocal minires =comments.Parse(v)\r\n\t\t\t\t\r\n\t\t\tif(minires and minires.style==\"luadoc\")then \r\n\t\t\t\ttable.insert(t,v)\r\n\t\t\t\tfor key,val in pairs(minires) do\r\n\t\t\t\t\tif(key~=\"style\")then\r\n\t\t\t\t\t\tif(key==\"type\" and val==\"descr\" )then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.text)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"comment\",text=minires.text})\r\n\t\t\t\t\t\telseif(key==\"type\" and (val==\"class\" or val==\"name\") )then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.name)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"item\",item=val,text=minires.name})\r\n\t\t\t\t\t\telseif(key==\"type\")then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.text)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"item\",item=val,text=minires.name,textt=minires.text})\r\n\t\t\t\t\t\tend\r\n\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\telseif(minires and minires.style==\"explua\")then\r\n\t\t\t\ttable.insert(t,v)\r\n\t\t\t\tfor key,val in pairs(minires) do\r\n\t\t\t\t\tif(key~=\"style\")then\r\n\t\t\t\t\t\tif(key==\"type\" and val==\"descr\" )then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.text)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"comment\",text=minires.text})\r\n\t\t\t\t\t\telseif(key==\"type\" and (val==\"class\" or val==\"name\") )then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.name)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"item\",item=val,text=minires.name})\r\n\t\t\t\t\t\telseif(key==\"type\" and val==\"table\" )then\r\n\t\t\t\t\t\t\ttable.insert(t,\"table\")\r\n\t\t\t\t\t\t\ttable.insert(t,{text=\"table\",item=\"class\",tag=\"item\"})\t\r\n\t\t\t\t\t\t\ttable.insert(t,{text=minires.var,item=\"name\",tag=\"item\"})\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"comment\",text=minires.text})\r\n\t\t\t\t\t\telseif(key==\"type\" and val==\"tablefield\")then\r\n\t\t\t\t\t\t\ttable.insert(t,\"table\")\r\n\t\t\t\t\t\t\ttable.insert(t,{text=minires.var,item=\"field\",tag=\"item\",textt=minires.text,table=minires.table})\t\r\n\t\t\t\t\t\telseif(key==\"type\")then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.text)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"item\",item=val,text=minires.name,textt=minires.text})\r\n\t\t\t\t\t\tend\r\n\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 9,
    "text": "local minires =comments.Parse(v)",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "if(minires and minires.style==\"luadoc\")then \r\n\t\t\t\ttable.insert(t,v)\r\n\t\t\t\tfor key,val in pairs(minires) do\r\n\t\t\t\t\tif(key~=\"style\")then\r\n\t\t\t\t\t\tif(key==\"type\" and val==\"descr\" )then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.text)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"comment\",text=minires.text})\r\n\t\t\t\t\t\telseif(key==\"type\" and (val==\"class\" or val==\"name\") )then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.name)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"item\",item=val,text=minires.name})\r\n\t\t\t\t\t\telseif(key==\"type\")then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.text)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"item\",item=val,text=minires.name,textt=minires.text})\r\n\t\t\t\t\t\tend\r\n\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\telseif(minires and minires.style==\"explua\")then\r\n\t\t\t\ttable.insert(t,v)\r\n\t\t\t\tfor key,val in pairs(minires) do\r\n\t\t\t\t\tif(key~=\"style\")then\r\n\t\t\t\t\t\tif(key==\"type\" and val==\"descr\" )then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.text)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"comment\",text=minires.text})\r\n\t\t\t\t\t\telseif(key==\"type\" and (val==\"class\" or val==\"name\") )then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.name)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"item\",item=val,text=minires.name})\r\n\t\t\t\t\t\telseif(key==\"type\" and val==\"table\" )then\r\n\t\t\t\t\t\t\ttable.insert(t,\"table\")\r\n\t\t\t\t\t\t\ttable.insert(t,{text=\"table\",item=\"class\",tag=\"item\"})\t\r\n\t\t\t\t\t\t\ttable.insert(t,{text=minires.var,item=\"name\",tag=\"item\"})\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"comment\",text=minires.text})\r\n\t\t\t\t\t\telseif(key==\"type\" and val==\"tablefield\")then\r\n\t\t\t\t\t\t\ttable.insert(t,\"table\")\r\n\t\t\t\t\t\t\ttable.insert(t,{text=minires.var,item=\"field\",tag=\"item\",textt=minires.text,table=minires.table})\t\r\n\t\t\t\t\t\telseif(key==\"type\")then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.text)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"item\",item=val,text=minires.name,textt=minires.text})\r\n\t\t\t\t\t\tend\r\n\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "table.insert(t,v)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "for key,val in pairs(minires) do\r\n\t\t\t\t\tif(key~=\"style\")then\r\n\t\t\t\t\t\tif(key==\"type\" and val==\"descr\" )then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.text)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"comment\",text=minires.text})\r\n\t\t\t\t\t\telseif(key==\"type\" and (val==\"class\" or val==\"name\") )then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.name)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"item\",item=val,text=minires.name})\r\n\t\t\t\t\t\telseif(key==\"type\")then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.text)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"item\",item=val,text=minires.name,textt=minires.text})\r\n\t\t\t\t\t\tend\r\n\r\n\t\t\t\t\tend\r\n\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 13,
    "text": "if(key~=\"style\")then\r\n\t\t\t\t\t\tif(key==\"type\" and val==\"descr\" )then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.text)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"comment\",text=minires.text})\r\n\t\t\t\t\t\telseif(key==\"type\" and (val==\"class\" or val==\"name\") )then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.name)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"item\",item=val,text=minires.name})\r\n\t\t\t\t\t\telseif(key==\"type\")then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.text)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"item\",item=val,text=minires.name,textt=minires.text})\r\n\t\t\t\t\t\tend\r\n\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "if(key==\"type\" and val==\"descr\" )then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.text)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"comment\",text=minires.text})\r\n\t\t\t\t\t\telseif(key==\"type\" and (val==\"class\" or val==\"name\") )then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.name)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"item\",item=val,text=minires.name})\r\n\t\t\t\t\t\telseif(key==\"type\")then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.text)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"item\",item=val,text=minires.name,textt=minires.text})\r\n\t\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "table.insert(t,minires.text)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "table.insert(t,{tag=\"comment\",text=minires.text})",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "table.insert(t,minires.name)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "table.insert(t,{tag=\"item\",item=val,text=minires.name})",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "table.insert(t,{tag=\"item\",item=val,text=minires.name,textt=minires.text})",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "for key,val in pairs(minires) do\r\n\t\t\t\t\tif(key~=\"style\")then\r\n\t\t\t\t\t\tif(key==\"type\" and val==\"descr\" )then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.text)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"comment\",text=minires.text})\r\n\t\t\t\t\t\telseif(key==\"type\" and (val==\"class\" or val==\"name\") )then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.name)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"item\",item=val,text=minires.name})\r\n\t\t\t\t\t\telseif(key==\"type\" and val==\"table\" )then\r\n\t\t\t\t\t\t\ttable.insert(t,\"table\")\r\n\t\t\t\t\t\t\ttable.insert(t,{text=\"table\",item=\"class\",tag=\"item\"})\t\r\n\t\t\t\t\t\t\ttable.insert(t,{text=minires.var,item=\"name\",tag=\"item\"})\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"comment\",text=minires.text})\r\n\t\t\t\t\t\telseif(key==\"type\" and val==\"tablefield\")then\r\n\t\t\t\t\t\t\ttable.insert(t,\"table\")\r\n\t\t\t\t\t\t\ttable.insert(t,{text=minires.var,item=\"field\",tag=\"item\",textt=minires.text,table=minires.table})\t\r\n\t\t\t\t\t\telseif(key==\"type\")then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.text)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"item\",item=val,text=minires.name,textt=minires.text})\r\n\t\t\t\t\t\tend\r\n\r\n\t\t\t\t\tend\r\n\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 21,
    "text": "if(key~=\"style\")then\r\n\t\t\t\t\t\tif(key==\"type\" and val==\"descr\" )then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.text)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"comment\",text=minires.text})\r\n\t\t\t\t\t\telseif(key==\"type\" and (val==\"class\" or val==\"name\") )then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.name)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"item\",item=val,text=minires.name})\r\n\t\t\t\t\t\telseif(key==\"type\" and val==\"table\" )then\r\n\t\t\t\t\t\t\ttable.insert(t,\"table\")\r\n\t\t\t\t\t\t\ttable.insert(t,{text=\"table\",item=\"class\",tag=\"item\"})\t\r\n\t\t\t\t\t\t\ttable.insert(t,{text=minires.var,item=\"name\",tag=\"item\"})\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"comment\",text=minires.text})\r\n\t\t\t\t\t\telseif(key==\"type\" and val==\"tablefield\")then\r\n\t\t\t\t\t\t\ttable.insert(t,\"table\")\r\n\t\t\t\t\t\t\ttable.insert(t,{text=minires.var,item=\"field\",tag=\"item\",textt=minires.text,table=minires.table})\t\r\n\t\t\t\t\t\telseif(key==\"type\")then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.text)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"item\",item=val,text=minires.name,textt=minires.text})\r\n\t\t\t\t\t\tend\r\n\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "if(key==\"type\" and val==\"descr\" )then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.text)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"comment\",text=minires.text})\r\n\t\t\t\t\t\telseif(key==\"type\" and (val==\"class\" or val==\"name\") )then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.name)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"item\",item=val,text=minires.name})\r\n\t\t\t\t\t\telseif(key==\"type\" and val==\"table\" )then\r\n\t\t\t\t\t\t\ttable.insert(t,\"table\")\r\n\t\t\t\t\t\t\ttable.insert(t,{text=\"table\",item=\"class\",tag=\"item\"})\t\r\n\t\t\t\t\t\t\ttable.insert(t,{text=minires.var,item=\"name\",tag=\"item\"})\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"comment\",text=minires.text})\r\n\t\t\t\t\t\telseif(key==\"type\" and val==\"tablefield\")then\r\n\t\t\t\t\t\t\ttable.insert(t,\"table\")\r\n\t\t\t\t\t\t\ttable.insert(t,{text=minires.var,item=\"field\",tag=\"item\",textt=minires.text,table=minires.table})\t\r\n\t\t\t\t\t\telseif(key==\"type\")then\r\n\t\t\t\t\t\t\ttable.insert(t,minires.text)\t\r\n\t\t\t\t\t\t\ttable.insert(t,{tag=\"item\",item=val,text=minires.name,textt=minires.text})\r\n\t\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "table.insert(t,\"table\")",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "table.insert(t,{text=\"table\",item=\"class\",tag=\"item\"})",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "table.insert(t,{text=minires.var,item=\"name\",tag=\"item\"})",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "table.insert(t,{text=minires.var,item=\"field\",tag=\"item\",textt=minires.text,table=minires.table})",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "result=t",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "",
    "type": "function container"
  }, {
    "id": 31,
    "text": "comments",
    "type": "module"
  }, {
    "id": 32,
    "text": "Parse",
    "type": "global function"
  }, {
    "id": 33,
    "text": "lpeg",
    "type": "module"
  }, {
    "id": 34,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 35,
    "text": "module",
    "type": "global function"
  }, {
    "id": 36,
    "text": "match",
    "type": "global function"
  }, {
    "id": 37,
    "text": "gmatch",
    "type": "global function"
  }, {
    "id": 38,
    "text": "require",
    "type": "global function"
  }, {
    "id": 39,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 40,
    "text": "grammar",
    "type": "module"
  }, {
    "id": 41,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 42,
    "text": "",
    "type": "variable container"
  }, {
    "id": 43,
    "text": "",
    "type": "require container"
  }, {
    "id": 44,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 45,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 46,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 47,
    "text": "scanner",
    "type": "module"
  }, {
    "id": 48,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 49,
    "text": "",
    "type": "require local variable"
  } ]
}