{
  "_filename": "mininum.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/asklua/example/mininum.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 2,
    "label": "has",
    "to": 14
  }, {
    "from": 2,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 2,
    "label": "has",
    "to": 18
  }, {
    "from": 2,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 23,
    "label": "has",
    "to": 27
  }, {
    "from": 23,
    "label": "has",
    "to": 28
  }, {
    "from": 23,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 23,
    "label": "has",
    "to": 31
  }, {
    "from": 19,
    "label": "has",
    "to": 32
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 33
  }, {
    "from": 2,
    "label": "has",
    "to": 34
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 3
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 36,
    "label": "has",
    "to": 40
  }, {
    "from": 36,
    "label": "has",
    "to": 41
  }, {
    "from": 36,
    "label": "has",
    "to": 42
  }, {
    "from": 36,
    "label": "has",
    "to": 43
  }, {
    "from": 36,
    "label": "has",
    "to": 44
  }, {
    "from": 36,
    "label": "has",
    "to": 45
  }, {
    "from": 36,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 46,
    "label": "has",
    "to": 49
  }, {
    "from": 46,
    "label": "has",
    "to": 50
  }, {
    "from": 46,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 46,
    "label": "has",
    "to": 54
  }, {
    "from": 46,
    "label": "has",
    "to": 55
  }, {
    "from": 36,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 36,
    "label": "has",
    "to": 10
  }, {
    "from": 36,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 3
  }, {
    "from": 60,
    "label": "has",
    "to": 4
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 60,
    "label": "has",
    "to": 63
  }, {
    "from": 60,
    "label": "has",
    "to": 64
  }, {
    "from": 60,
    "label": "has",
    "to": 65
  }, {
    "from": 60,
    "label": "has",
    "to": 66
  }, {
    "from": 60,
    "label": "has",
    "to": 67
  }, {
    "from": 60,
    "label": "has",
    "to": 68
  }, {
    "from": 60,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 69,
    "label": "has",
    "to": 74
  }, {
    "from": 69,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 75,
    "label": "has",
    "to": 78
  }, {
    "from": 69,
    "label": "has",
    "to": 79
  }, {
    "from": 69,
    "label": "has",
    "to": 80
  }, {
    "from": 69,
    "label": "has",
    "to": 81
  }, {
    "from": 60,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 60,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 60,
    "label": "has",
    "to": 10
  }, {
    "from": 60,
    "label": "has",
    "to": 88
  }, {
    "from": 2,
    "label": "calls",
    "to": 96
  }, {
    "from": 2,
    "label": "calls",
    "to": 96
  }, {
    "from": 2,
    "label": "calls",
    "to": 96
  }, {
    "from": 36,
    "label": "calls",
    "to": 96
  }, {
    "from": 36,
    "label": "calls",
    "to": 96
  }, {
    "from": 36,
    "label": "calls",
    "to": 96
  }, {
    "from": 36,
    "label": "calls",
    "to": 96
  }, {
    "from": 60,
    "label": "calls",
    "to": 96
  }, {
    "from": 60,
    "label": "calls",
    "to": 96
  }, {
    "from": 60,
    "label": "calls",
    "to": 96
  }, {
    "from": 2,
    "label": "calls",
    "to": 91
  }, {
    "from": 2,
    "label": "calls",
    "to": 91
  }, {
    "from": 2,
    "label": "calls",
    "to": 91
  }, {
    "from": 2,
    "label": "calls",
    "to": 91
  }, {
    "from": 2,
    "label": "calls",
    "to": 91
  }, {
    "from": 36,
    "label": "calls",
    "to": 91
  }, {
    "from": 36,
    "label": "calls",
    "to": 91
  }, {
    "from": 36,
    "label": "calls",
    "to": 91
  }, {
    "from": 36,
    "label": "calls",
    "to": 91
  }, {
    "from": 60,
    "label": "calls",
    "to": 91
  }, {
    "from": 60,
    "label": "calls",
    "to": 91
  }, {
    "from": 60,
    "label": "calls",
    "to": 91
  }, {
    "from": 60,
    "label": "calls",
    "to": 91
  }, {
    "from": 89,
    "label": "calls",
    "to": 92
  }, {
    "from": 2,
    "label": "calls",
    "to": 95
  }, {
    "from": 2,
    "label": "calls",
    "to": 95
  }, {
    "from": 36,
    "label": "calls",
    "to": 95
  }, {
    "from": 60,
    "label": "calls",
    "to": 95
  }, {
    "from": 60,
    "label": "calls",
    "to": 95
  }, {
    "from": 60,
    "label": "calls",
    "to": 95
  }, {
    "from": 89,
    "label": "calls",
    "to": 97
  }, {
    "from": 89,
    "label": "calls",
    "to": 98
  }, {
    "from": 2,
    "label": "calls",
    "to": 99
  }, {
    "from": 2,
    "label": "calls",
    "to": 99
  }, {
    "from": 2,
    "label": "calls",
    "to": 99
  }, {
    "from": 2,
    "label": "calls",
    "to": 99
  }, {
    "from": 36,
    "label": "calls",
    "to": 99
  }, {
    "from": 36,
    "label": "calls",
    "to": 99
  }, {
    "from": 36,
    "label": "calls",
    "to": 99
  }, {
    "from": 60,
    "label": "calls",
    "to": 99
  }, {
    "from": 60,
    "label": "calls",
    "to": 99
  }, {
    "from": 60,
    "label": "calls",
    "to": 99
  }, {
    "from": 60,
    "label": "calls",
    "to": 99
  }, {
    "from": 89,
    "label": "calls",
    "to": 94
  }, {
    "from": 89,
    "label": "calls",
    "to": 93
  }, {
    "from": 1,
    "label": "contains",
    "to": 89
  }, {
    "from": 89,
    "label": "declares",
    "to": 2
  }, {
    "from": 89,
    "label": "declares",
    "to": 36
  }, {
    "from": 89,
    "label": "declares",
    "to": 60
  }, {
    "from": 90,
    "label": "calls",
    "to": 2
  }, {
    "from": 90,
    "label": "calls",
    "to": 36
  }, {
    "from": 90,
    "label": "calls",
    "to": 60
  }, {
    "from": 1,
    "label": "contains",
    "to": 100
  }, {
    "from": 1,
    "label": "contains",
    "to": 101
  }, {
    "from": 100,
    "label": "initializes",
    "to": 102
  }, {
    "from": 102,
    "label": "assigns",
    "to": 103
  }, {
    "from": 100,
    "label": "initializes",
    "to": 104
  }, {
    "from": 104,
    "label": "assigns",
    "to": 105
  }, {
    "from": 100,
    "label": "initializes",
    "to": 106
  }, {
    "from": 106,
    "label": "assigns",
    "to": 107
  }, {
    "from": 100,
    "label": "initializes",
    "to": 108
  }, {
    "from": 108,
    "label": "assigns",
    "to": 109
  }, {
    "from": 100,
    "label": "initializes",
    "to": 110
  }, {
    "from": 110,
    "label": "assigns",
    "to": 111
  }, {
    "from": 100,
    "label": "initializes",
    "to": 112
  }, {
    "from": 112,
    "label": "assigns",
    "to": 113
  }, {
    "from": 100,
    "label": "initializes",
    "to": 114
  }, {
    "from": 114,
    "label": "assigns",
    "to": 115
  }, {
    "from": 100,
    "label": "initializes",
    "to": 116
  }, {
    "from": 116,
    "label": "assigns",
    "to": 117
  }, {
    "from": 100,
    "label": "initializes",
    "to": 118
  }, {
    "from": 118,
    "label": "assigns",
    "to": 119
  }, {
    "from": 120,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "mininum",
    "type": "module"
  }, {
    "id": 2,
    "text": "function root (f, a, b, errx)\r\n   assert(type(f) == \"function\", \"f must be a function\")\r\n   assert(type(a) == \"number\" and type(b) == \"number\", \"a and b must be numbers\")\r\n   errx = errx or 1.0e-6\r\n   assert(type(errx) == \"number\", \"errx must be a number\")\r\n   assert(errx >= 1.0e-15, \"errx must be greater than 1.0e-15\")\r\n\r\n   local xa, fa = a, f(a)\r\n   if fa == 0 then return a end\r\n   local xb, fb = b, f(b)\r\n   if fb == 0 then return b end\r\n   assert(fa*fb < 0, \"a and b choice does not ensure root finding; try others\")\r\n\r\n   local side = 0\r\n   if fb < 0 then\r\n      xa, xb = xb, xa\r\n      fa, fb = fb, fa\r\n   end\r\n\r\n   local del, x\r\n   for j = 1, 30 do\r\n      x = xa+(xb-xa)*fa/(fa-fb)\r\n      local fx = f(x)\r\n      if fx == 0 then return x end\r\n      if fx < 0 then\r\n         del, xa, fa = abs(xa-x), x, fx\r\n         if side == -1 then fb = fb/2 end\r\n         side = -1\r\n      else\r\n         del, xb, fb = abs(xb-x), x, fx\r\n         if side == 1 then fa = fa/2 end\r\n         side = 1\r\n      end\r\n      if del < errx then return x end\r\n   end\r\n   io.stderr:write(\"root: warning, maximum number of iterations reached\\n\")\r\n   io.stderr:write(\"actual absolute error: \"..del..\"\\n\")\r\n   return x\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "assert(type(f) == \"function\", \"f must be a function\")",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "assert(type(a) == \"number\" and type(b) == \"number\", \"a and b must be numbers\")",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "errx = errx or 1.0e-6",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "assert(type(errx) == \"number\", \"errx must be a number\")",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "assert(errx >= 1.0e-15, \"errx must be greater than 1.0e-15\")",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "local xa, fa = a, f(a)",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "if fa == 0 then return a end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 11,
    "text": "local xb, fb = b, f(b)",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "if fb == 0 then return b end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "assert(fa*fb < 0, \"a and b choice does not ensure root finding; try others\")",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "local side = 0",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "if fb < 0 then\r\n      xa, xb = xb, xa\r\n      fa, fb = fb, fa\r\n   end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "xa, xb = xb, xa",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "fa, fb = fb, fa",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "local del, x",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "for j = 1, 30 do\r\n      x = xa+(xb-xa)*fa/(fa-fb)\r\n      local fx = f(x)\r\n      if fx == 0 then return x end\r\n      if fx < 0 then\r\n         del, xa, fa = abs(xa-x), x, fx\r\n         if side == -1 then fb = fb/2 end\r\n         side = -1\r\n      else\r\n         del, xb, fb = abs(xb-x), x, fx\r\n         if side == 1 then fa = fa/2 end\r\n         side = 1\r\n      end\r\n      if del < errx then return x end\r\n   end",
    "type": "statement:numericfor"
  }, {
    "id": 20,
    "text": "x = xa+(xb-xa)*fa/(fa-fb)",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "local fx = f(x)",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "if fx == 0 then return x end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "if fx < 0 then\r\n         del, xa, fa = abs(xa-x), x, fx\r\n         if side == -1 then fb = fb/2 end\r\n         side = -1\r\n      else\r\n         del, xb, fb = abs(xb-x), x, fx\r\n         if side == 1 then fa = fa/2 end\r\n         side = 1\r\n      end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "del, xa, fa = abs(xa-x), x, fx",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "if side == -1 then fb = fb/2 end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "fb = fb/2",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "side = -1",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "del, xb, fb = abs(xb-x), x, fx",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "if side == 1 then fa = fa/2 end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "fa = fa/2",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "side = 1",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "if del < errx then return x end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "io.stderr:write(\"root: warning, maximum number of iterations reached\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "io.stderr:write(\"actual absolute error: \"..del..\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function derivative (f, x, aerr)\r\n   assert(type(f) == \"function\", \"f must be a function\")\r\n   assert(type(x) == \"number\", \"x must be a number\")\r\n\r\n   aerr = aerr or 1.0e-6\r\n   assert(type(aerr) == \"number\", \"err must be a number\")\r\n   assert(aerr >= 1.0e-15, \"err must be greater than 1.0e-15\")\r\n\r\n   local aberr = math.huge\r\n   local h, j, n = 1, 1, 15\r\n   local d = {}\r\n   d[1] = {}\r\n   d[1][1]=(f(x+h)-f(x-h))/(2*h)\r\n   \r\n   while aberr > aerr and j < n do\r\n      h = h/2\r\n      d[j+1] = {}\r\n      d[j+1][1] = (f(x+h)-f(x-h))/(2*h)\r\n      local fac = 1\r\n      for k = 1, j do \r\n         fac = 4*fac\r\n         d[j+1][k+1] = d[j+1][k]+(d[j+1][k]-d[j][k])/(fac-1)\r\n      end\r\n      aberr = abs(d[j+1][j+1]-d[j][j])\r\n     j = j+1\r\n   end\r\n   if j == n then\r\n      io.stderr:write(\"derivative: warning, maximum number of iterations reached\\n\")\r\n      io.stderr:write(\"estimated absolute error: \"..aberr..\"\\n\")\r\n   end\r\n   return d[j][j]\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "assert(type(x) == \"number\", \"x must be a number\")",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "aerr = aerr or 1.0e-6",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "assert(type(aerr) == \"number\", \"err must be a number\")",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "assert(aerr >= 1.0e-15, \"err must be greater than 1.0e-15\")",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "local aberr = math.huge",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "local h, j, n = 1, 1, 15",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "local d = {}",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "d[1] = {}",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "d[1][1]=(f(x+h)-f(x-h))/(2*h)",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "while aberr > aerr and j < n do\r\n      h = h/2\r\n      d[j+1] = {}\r\n      d[j+1][1] = (f(x+h)-f(x-h))/(2*h)\r\n      local fac = 1\r\n      for k = 1, j do \r\n         fac = 4*fac\r\n         d[j+1][k+1] = d[j+1][k]+(d[j+1][k]-d[j][k])/(fac-1)\r\n      end\r\n      aberr = abs(d[j+1][j+1]-d[j][j])\r\n     j = j+1\r\n   end",
    "type": "statement:while"
  }, {
    "id": 47,
    "text": "h = h/2",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "d[j+1] = {}",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "d[j+1][1] = (f(x+h)-f(x-h))/(2*h)",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "local fac = 1",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "for k = 1, j do \r\n         fac = 4*fac\r\n         d[j+1][k+1] = d[j+1][k]+(d[j+1][k]-d[j][k])/(fac-1)\r\n      end",
    "type": "statement:numericfor"
  }, {
    "id": 52,
    "text": "fac = 4*fac",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "d[j+1][k+1] = d[j+1][k]+(d[j+1][k]-d[j][k])/(fac-1)",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "aberr = abs(d[j+1][j+1]-d[j][j])",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "j = j+1",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "if j == n then\r\n      io.stderr:write(\"derivative: warning, maximum number of iterations reached\\n\")\r\n      io.stderr:write(\"estimated absolute error: \"..aberr..\"\\n\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "io.stderr:write(\"derivative: warning, maximum number of iterations reached\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "io.stderr:write(\"estimated absolute error: \"..aberr..\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function quadrature (f, a, b, rerr)\r\n   assert(type(f) == \"function\", \"f must be a function\")\r\n   assert(type(a) == \"number\" and type(b) == \"number\", \"a and b must be numbers\")\r\n   rerr = rerr or 1.0e-6\r\n   assert(type(rerr) == \"number\", \"err must be a number\")\r\n   assert(rerr >= 1.0e-15, \"err must be greater than 1.0e-15\")\r\n\r\n   local h = b-a\r\n   local sum = f((a+b)/2)   -- partial sums\r\n   local qo, qn, qp, qe, qeo, qep, den = sum*h\r\n   local it, n, nt = 1, 2, 14\r\n\r\n   -- because a final extrapolation is done we reduce the intended\r\n   -- error; this does not always work but the final relative error\r\n   -- often has the same magnitud order of rerr\r\n   local err1 = 100*rerr\r\n\r\n   while n <= nt do\r\n      h = h/3\r\n      for j = 1, it do\r\n         local x = a+(3*j-2.5)*h\r\n         sum = sum+f(x)+f(x+2*h)\r\n      end\r\n      qn = sum*h\r\n      if qp then   -- Aitken-delta^2 process\r\n         den = qn-2*qo+qp\r\n         qe = den == 0 and qn or qn-(qn-qo)^2/den\r\n         if qeo and abs(qe-qeo) < err1*abs(qe) then break end\r\n      end\r\n      qo, qp, qeo, qep = qn, qo, qe, qeo\r\n      it = 3*it\r\n      n = n+1\r\n   end\r\n\r\n   if n > nt then\r\n      io.stderr:write(\"quadrature: warning, maximum number of iterations reached\\n\")\r\n      io.stderr:write(\"estimated absolute error: \"..abs((qe-qeo)/qe)..\"\\n\")\r\n   end\r\n\r\n   -- a final extrapolation over extrapolation if possible\r\n   if qep then\r\n     \tden = qe-2*qeo+qep\r\n     \tqe = den == 0 and qe or qe-(qe-qeo)^2/den\r\n   end\r\n   return qe\r\nend",
    "type": "function"
  }, {
    "id": 61,
    "text": "rerr = rerr or 1.0e-6",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "assert(type(rerr) == \"number\", \"err must be a number\")",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "assert(rerr >= 1.0e-15, \"err must be greater than 1.0e-15\")",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "local h = b-a",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "local sum = f((a+b)/2)",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "local qo, qn, qp, qe, qeo, qep, den = sum*h",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "local it, n, nt = 1, 2, 14",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "local err1 = 100*rerr",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "while n <= nt do\r\n      h = h/3\r\n      for j = 1, it do\r\n         local x = a+(3*j-2.5)*h\r\n         sum = sum+f(x)+f(x+2*h)\r\n      end\r\n      qn = sum*h\r\n      if qp then   -- Aitken-delta^2 process\r\n         den = qn-2*qo+qp\r\n         qe = den == 0 and qn or qn-(qn-qo)^2/den\r\n         if qeo and abs(qe-qeo) < err1*abs(qe) then break end\r\n      end\r\n      qo, qp, qeo, qep = qn, qo, qe, qeo\r\n      it = 3*it\r\n      n = n+1\r\n   end",
    "type": "statement:while"
  }, {
    "id": 70,
    "text": "h = h/3",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "for j = 1, it do\r\n         local x = a+(3*j-2.5)*h\r\n         sum = sum+f(x)+f(x+2*h)\r\n      end",
    "type": "statement:numericfor"
  }, {
    "id": 72,
    "text": "local x = a+(3*j-2.5)*h",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "sum = sum+f(x)+f(x+2*h)",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "qn = sum*h",
    "type": "statement:assign"
  }, {
    "id": 75,
    "text": "if qp then   -- Aitken-delta^2 process\r\n         den = qn-2*qo+qp\r\n         qe = den == 0 and qn or qn-(qn-qo)^2/den\r\n         if qeo and abs(qe-qeo) < err1*abs(qe) then break end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "den = qn-2*qo+qp",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "qe = den == 0 and qn or qn-(qn-qo)^2/den",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "if qeo and abs(qe-qeo) < err1*abs(qe) then break end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "qo, qp, qeo, qep = qn, qo, qe, qeo",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "it = 3*it",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "n = n+1",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "if n > nt then\r\n      io.stderr:write(\"quadrature: warning, maximum number of iterations reached\\n\")\r\n      io.stderr:write(\"estimated absolute error: \"..abs((qe-qeo)/qe)..\"\\n\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 83,
    "text": "io.stderr:write(\"quadrature: warning, maximum number of iterations reached\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "io.stderr:write(\"estimated absolute error: \"..abs((qe-qeo)/qe)..\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "if qep then\r\n     \tden = qe-2*qeo+qep\r\n     \tqe = den == 0 and qe or qe-(qe-qeo)^2/den\r\n   end",
    "type": "statement:if"
  }, {
    "id": 86,
    "text": "den = qe-2*qeo+qep",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "qe = den == 0 and qe or qe-(qe-qeo)^2/den",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 89,
    "text": "",
    "type": "function container"
  }, {
    "id": 90,
    "text": "",
    "type": "function container"
  }, {
    "id": 91,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 92,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 93,
    "text": "collectgarbage",
    "type": "global function"
  }, {
    "id": 94,
    "text": "base",
    "type": "global function"
  }, {
    "id": 95,
    "text": "abs",
    "type": "global function"
  }, {
    "id": 96,
    "text": "f",
    "type": "global function"
  }, {
    "id": 97,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 98,
    "text": "module",
    "type": "global function"
  }, {
    "id": 99,
    "text": "type",
    "type": "global function"
  }, {
    "id": 100,
    "text": "",
    "type": "variable container"
  }, {
    "id": 101,
    "text": "",
    "type": "require container"
  }, {
    "id": 102,
    "text": "",
    "type": "local variable"
  }, {
    "id": 103,
    "text": "",
    "type": "string"
  }, {
    "id": 104,
    "text": "",
    "type": "local variable"
  }, {
    "id": 105,
    "text": "",
    "type": "n/a"
  }, {
    "id": 106,
    "text": "",
    "type": "local variable"
  }, {
    "id": 107,
    "text": "",
    "type": "n/a"
  }, {
    "id": 108,
    "text": "",
    "type": "local variable"
  }, {
    "id": 109,
    "text": "",
    "type": "n/a"
  }, {
    "id": 110,
    "text": "",
    "type": "local variable"
  }, {
    "id": 111,
    "text": "",
    "type": "boolean"
  }, {
    "id": 112,
    "text": "",
    "type": "global variable"
  }, {
    "id": 113,
    "text": "",
    "type": "n/a"
  }, {
    "id": 114,
    "text": "",
    "type": "global variable"
  }, {
    "id": 115,
    "text": "",
    "type": "n/a"
  }, {
    "id": 116,
    "text": "",
    "type": "global variable"
  }, {
    "id": 117,
    "text": "",
    "type": "n/a"
  }, {
    "id": 118,
    "text": "",
    "type": "global variable"
  }, {
    "id": 119,
    "text": "",
    "type": "n/a"
  }, {
    "id": 120,
    "text": "",
    "type": "global variable"
  } ]
}