{
  "_filename": "mininum_test.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/asklua/example/mininum_test.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 7
  }, {
    "from": 10,
    "label": "has",
    "to": 8
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 7
  }, {
    "from": 12,
    "label": "has",
    "to": 8
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "calls",
    "to": 3
  }, {
    "from": 12,
    "label": "calls",
    "to": 17
  }, {
    "from": 14,
    "label": "calls",
    "to": 17
  }, {
    "from": 14,
    "label": "calls",
    "to": 4
  }, {
    "from": 14,
    "label": "calls",
    "to": 18
  }, {
    "from": 14,
    "label": "calls",
    "to": 18
  }, {
    "from": 14,
    "label": "calls",
    "to": 18
  }, {
    "from": 14,
    "label": "calls",
    "to": 18
  }, {
    "from": 14,
    "label": "calls",
    "to": 18
  }, {
    "from": 14,
    "label": "calls",
    "to": 18
  }, {
    "from": 14,
    "label": "calls",
    "to": 18
  }, {
    "from": 14,
    "label": "calls",
    "to": 18
  }, {
    "from": 14,
    "label": "calls",
    "to": 18
  }, {
    "from": 14,
    "label": "calls",
    "to": 18
  }, {
    "from": 14,
    "label": "calls",
    "to": 18
  }, {
    "from": 14,
    "label": "calls",
    "to": 18
  }, {
    "from": 14,
    "label": "calls",
    "to": 18
  }, {
    "from": 14,
    "label": "calls",
    "to": 18
  }, {
    "from": 14,
    "label": "calls",
    "to": 18
  }, {
    "from": 14,
    "label": "calls",
    "to": 18
  }, {
    "from": 14,
    "label": "calls",
    "to": 18
  }, {
    "from": 14,
    "label": "calls",
    "to": 18
  }, {
    "from": 14,
    "label": "calls",
    "to": 18
  }, {
    "from": 10,
    "label": "calls",
    "to": 16
  }, {
    "from": 14,
    "label": "calls",
    "to": 19
  }, {
    "from": 14,
    "label": "calls",
    "to": 15
  }, {
    "from": 14,
    "label": "calls",
    "to": 5
  }, {
    "from": 2,
    "label": "contains",
    "to": 14
  }, {
    "from": 14,
    "label": "declares",
    "to": 6
  }, {
    "from": 14,
    "label": "declares",
    "to": 10
  }, {
    "from": 14,
    "label": "declares",
    "to": 12
  }, {
    "from": 2,
    "label": "contains",
    "to": 20
  }, {
    "from": 2,
    "label": "contains",
    "to": 21
  }, {
    "from": 20,
    "label": "initializes",
    "to": 22
  }, {
    "from": 22,
    "label": "assigns",
    "to": 23
  }, {
    "from": 20,
    "label": "initializes",
    "to": 24
  }, {
    "from": 24,
    "label": "assigns",
    "to": 25
  }, {
    "from": 20,
    "label": "initializes",
    "to": 26
  }, {
    "from": 26,
    "label": "assigns",
    "to": 27
  }, {
    "from": 20,
    "label": "initializes",
    "to": 28
  }, {
    "from": 28,
    "label": "assigns",
    "to": 29
  }, {
    "from": 20,
    "label": "initializes",
    "to": 30
  }, {
    "from": 20,
    "label": "initializes",
    "to": 31
  }, {
    "from": 31,
    "label": "assigns",
    "to": 32
  }, {
    "from": 20,
    "label": "initializes",
    "to": 33
  }, {
    "from": 33,
    "label": "assigns",
    "to": 34
  }, {
    "from": 20,
    "label": "initializes",
    "to": 35
  }, {
    "from": 35,
    "label": "assigns",
    "to": 36
  }, {
    "from": 20,
    "label": "initializes",
    "to": 37
  }, {
    "from": 37,
    "label": "assigns",
    "to": 38
  }, {
    "from": 20,
    "label": "initializes",
    "to": 39
  }, {
    "from": 39,
    "label": "assigns",
    "to": 40
  }, {
    "from": 20,
    "label": "initializes",
    "to": 41
  }, {
    "from": 41,
    "label": "assigns",
    "to": 42
  }, {
    "from": 20,
    "label": "initializes",
    "to": 43
  }, {
    "from": 43,
    "label": "assigns",
    "to": 44
  }, {
    "from": 20,
    "label": "initializes",
    "to": 45
  }, {
    "from": 45,
    "label": "assigns",
    "to": 46
  }, {
    "from": 20,
    "label": "initializes",
    "to": 47
  }, {
    "from": 20,
    "label": "initializes",
    "to": 48
  }, {
    "from": 20,
    "label": "initializes",
    "to": 49
  }, {
    "from": 21,
    "label": "initializes",
    "to": 50
  }, {
    "from": 50,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "mininum",
    "type": "module"
  }, {
    "id": 2,
    "text": "mininum_test",
    "type": "module"
  }, {
    "id": 3,
    "text": "function root (f, a, b, errx)\r\n   assert(type(f) == \"function\", \"f must be a function\")\r\n   assert(type(a) == \"number\" and type(b) == \"number\", \"a and b must be numbers\")\r\n   errx = errx or 1.0e-6\r\n   assert(type(errx) == \"number\", \"errx must be a number\")\r\n   assert(errx >= 1.0e-15, \"errx must be greater than 1.0e-15\")\r\n\r\n   local xa, fa = a, f(a)\r\n   if fa == 0 then return a end\r\n   local xb, fb = b, f(b)\r\n   if fb == 0 then return b end\r\n   assert(fa*fb < 0, \"a and b choice does not ensure root finding; try others\")\r\n\r\n   local side = 0\r\n   if fb < 0 then\r\n      xa, xb = xb, xa\r\n      fa, fb = fb, fa\r\n   end\r\n\r\n   local del, x\r\n   for j = 1, 30 do\r\n      x = xa+(xb-xa)*fa/(fa-fb)\r\n      local fx = f(x)\r\n      if fx == 0 then return x end\r\n      if fx < 0 then\r\n         del, xa, fa = abs(xa-x), x, fx\r\n         if side == -1 then fb = fb/2 end\r\n         side = -1\r\n      else\r\n         del, xb, fb = abs(xb-x), x, fx\r\n         if side == 1 then fa = fa/2 end\r\n         side = 1\r\n      end\r\n      if del < errx then return x end\r\n   end\r\n   io.stderr:write(\"root: warning, maximum number of iterations reached\\n\")\r\n   io.stderr:write(\"actual absolute error: \"..del..\"\\n\")\r\n   return x\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function derivative (f, x, aerr)\r\n   assert(type(f) == \"function\", \"f must be a function\")\r\n   assert(type(x) == \"number\", \"x must be a number\")\r\n\r\n   aerr = aerr or 1.0e-6\r\n   assert(type(aerr) == \"number\", \"err must be a number\")\r\n   assert(aerr >= 1.0e-15, \"err must be greater than 1.0e-15\")\r\n\r\n   local aberr = math.huge\r\n   local h, j, n = 1, 1, 15\r\n   local d = {}\r\n   d[1] = {}\r\n   d[1][1]=(f(x+h)-f(x-h))/(2*h)\r\n   \r\n   while aberr > aerr and j < n do\r\n      h = h/2\r\n      d[j+1] = {}\r\n      d[j+1][1] = (f(x+h)-f(x-h))/(2*h)\r\n      local fac = 1\r\n      for k = 1, j do \r\n         fac = 4*fac\r\n         d[j+1][k+1] = d[j+1][k]+(d[j+1][k]-d[j][k])/(fac-1)\r\n      end\r\n      aberr = abs(d[j+1][j+1]-d[j][j])\r\n     j = j+1\r\n   end\r\n   if j == n then\r\n      io.stderr:write(\"derivative: warning, maximum number of iterations reached\\n\")\r\n      io.stderr:write(\"estimated absolute error: \"..aberr..\"\\n\")\r\n   end\r\n   return d[j][j]\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function quadrature (f, a, b, rerr)\r\n   assert(type(f) == \"function\", \"f must be a function\")\r\n   assert(type(a) == \"number\" and type(b) == \"number\", \"a and b must be numbers\")\r\n   rerr = rerr or 1.0e-6\r\n   assert(type(rerr) == \"number\", \"err must be a number\")\r\n   assert(rerr >= 1.0e-15, \"err must be greater than 1.0e-15\")\r\n\r\n   local h = b-a\r\n   local sum = f((a+b)/2)   -- partial sums\r\n   local qo, qn, qp, qe, qeo, qep, den = sum*h\r\n   local it, n, nt = 1, 2, 14\r\n\r\n   -- because a final extrapolation is done we reduce the intended\r\n   -- error; this does not always work but the final relative error\r\n   -- often has the same magnitud order of rerr\r\n   local err1 = 100*rerr\r\n\r\n   while n <= nt do\r\n      h = h/3\r\n      for j = 1, it do\r\n         local x = a+(3*j-2.5)*h\r\n         sum = sum+f(x)+f(x+2*h)\r\n      end\r\n      qn = sum*h\r\n      if qp then   -- Aitken-delta^2 process\r\n         den = qn-2*qo+qp\r\n         qe = den == 0 and qn or qn-(qn-qo)^2/den\r\n         if qeo and abs(qe-qeo) < err1*abs(qe) then break end\r\n      end\r\n      qo, qp, qeo, qep = qn, qo, qe, qeo\r\n      it = 3*it\r\n      n = n+1\r\n   end\r\n\r\n   if n > nt then\r\n      io.stderr:write(\"quadrature: warning, maximum number of iterations reached\\n\")\r\n      io.stderr:write(\"estimated absolute error: \"..abs((qe-qeo)/qe)..\"\\n\")\r\n   end\r\n\r\n   -- a final extrapolation over extrapolation if possible\r\n   if qep then\r\n     \tden = qe-2*qeo+qep\r\n     \tqe = den == 0 and qe or qe-(qe-qeo)^2/den\r\n   end\r\n   return qe\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local function f (x)\r\n   eval = eval+1\r\n   return x*(3+x*(-4+2*x))-- difficult for classical regula falsi\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "eval = eval+1",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "local function g (x)\r\n   eval = eval+1\r\n   return sin(x)\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "local function s (x)\r\n   eval = eval+1\r\n   -- a difficult case for Romberg quadrature\r\n   return 1/sqrt(x)\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "",
    "type": "function container"
  }, {
    "id": 15,
    "text": "cos",
    "type": "global function"
  }, {
    "id": 16,
    "text": "sin",
    "type": "global function"
  }, {
    "id": 17,
    "text": "sqrt",
    "type": "global function"
  }, {
    "id": 18,
    "text": "print",
    "type": "global function"
  }, {
    "id": 19,
    "text": "require",
    "type": "global function"
  }, {
    "id": 20,
    "text": "",
    "type": "variable container"
  }, {
    "id": 21,
    "text": "",
    "type": "require container"
  }, {
    "id": 22,
    "text": "",
    "type": "local variable"
  }, {
    "id": 23,
    "text": "",
    "type": "n/a"
  }, {
    "id": 24,
    "text": "",
    "type": "local variable"
  }, {
    "id": 25,
    "text": "",
    "type": "n/a"
  }, {
    "id": 26,
    "text": "",
    "type": "local variable"
  }, {
    "id": 27,
    "text": "",
    "type": "n/a"
  }, {
    "id": 28,
    "text": "",
    "type": "local variable"
  }, {
    "id": 29,
    "text": "",
    "type": "n/a"
  }, {
    "id": 30,
    "text": "",
    "type": "local variable"
  }, {
    "id": 31,
    "text": "",
    "type": "local variable"
  }, {
    "id": 32,
    "text": "",
    "type": "number"
  }, {
    "id": 33,
    "text": "",
    "type": "local variable"
  }, {
    "id": 34,
    "text": "",
    "type": "n/a"
  }, {
    "id": 35,
    "text": "",
    "type": "local variable"
  }, {
    "id": 36,
    "text": "",
    "type": "number"
  }, {
    "id": 37,
    "text": "",
    "type": "local variable"
  }, {
    "id": 38,
    "text": "",
    "type": "n/a"
  }, {
    "id": 39,
    "text": "",
    "type": "local variable"
  }, {
    "id": 40,
    "text": "",
    "type": "n/a"
  }, {
    "id": 41,
    "text": "",
    "type": "local variable"
  }, {
    "id": 42,
    "text": "",
    "type": "number"
  }, {
    "id": 43,
    "text": "",
    "type": "local variable"
  }, {
    "id": 44,
    "text": "",
    "type": "n/a"
  }, {
    "id": 45,
    "text": "",
    "type": "local variable"
  }, {
    "id": 46,
    "text": "",
    "type": "n/a"
  }, {
    "id": 47,
    "text": "",
    "type": "global variable"
  }, {
    "id": 48,
    "text": "",
    "type": "global variable"
  }, {
    "id": 49,
    "text": "",
    "type": "global variable"
  }, {
    "id": 50,
    "text": "",
    "type": "global variable"
  } ]
}