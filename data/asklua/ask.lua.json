{
  "_filename": "ask.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/asklua/ask.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 5
  }, {
    "from": 7,
    "label": "has",
    "to": 5
  }, {
    "from": 7,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 5
  }, {
    "from": 14,
    "label": "has",
    "to": 5
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 5
  }, {
    "from": 18,
    "label": "has",
    "to": 5
  }, {
    "from": 18,
    "label": "has",
    "to": 5
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 28,
    "label": "has",
    "to": 35
  }, {
    "from": 28,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 5
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 37,
    "label": "has",
    "to": 41
  }, {
    "from": 37,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 37,
    "label": "has",
    "to": 45
  }, {
    "from": 37,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 37,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 37,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 37,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 37,
    "label": "has",
    "to": 5
  }, {
    "from": 37,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 57,
    "label": "has",
    "to": 5
  }, {
    "from": 57,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 62,
    "label": "has",
    "to": 66
  }, {
    "from": 62,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 62,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 62,
    "label": "has",
    "to": 73
  }, {
    "from": 62,
    "label": "has",
    "to": 74
  }, {
    "from": 62,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 62,
    "label": "has",
    "to": 79
  }, {
    "from": 62,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 62,
    "label": "has",
    "to": 83
  }, {
    "from": 62,
    "label": "has",
    "to": 84
  }, {
    "from": 62,
    "label": "has",
    "to": 85
  }, {
    "from": 62,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 62,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 62,
    "label": "has",
    "to": 5
  }, {
    "from": 62,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 62,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 94,
    "label": "has",
    "to": 96
  }, {
    "from": 94,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 97,
    "label": "has",
    "to": 101
  }, {
    "from": 97,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 94,
    "label": "has",
    "to": 5
  }, {
    "from": 62,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 106,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 106,
    "label": "has",
    "to": 111
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 111,
    "label": "has",
    "to": 114
  }, {
    "from": 111,
    "label": "has",
    "to": 115
  }, {
    "from": 111,
    "label": "has",
    "to": 116
  }, {
    "from": 106,
    "label": "has",
    "to": 117
  }, {
    "from": 106,
    "label": "has",
    "to": 118
  }, {
    "from": 106,
    "label": "has",
    "to": 119
  }, {
    "from": 106,
    "label": "has",
    "to": 116
  }, {
    "from": 106,
    "label": "has",
    "to": 120
  }, {
    "from": 62,
    "label": "has",
    "to": 91
  }, {
    "from": 62,
    "label": "has",
    "to": 121
  }, {
    "from": 122,
    "label": "has",
    "to": 95
  }, {
    "from": 122,
    "label": "has",
    "to": 96
  }, {
    "from": 122,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 97,
    "label": "has",
    "to": 101
  }, {
    "from": 97,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 122,
    "label": "has",
    "to": 5
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 124,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 127,
    "label": "has",
    "to": 130
  }, {
    "from": 127,
    "label": "has",
    "to": 131
  }, {
    "from": 127,
    "label": "has",
    "to": 132
  }, {
    "from": 124,
    "label": "has",
    "to": 133
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 134,
    "label": "has",
    "to": 5
  }, {
    "from": 134,
    "label": "has",
    "to": 137
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 134,
    "label": "has",
    "to": 139
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 134,
    "label": "has",
    "to": 5
  }, {
    "from": 134,
    "label": "has",
    "to": 141
  }, {
    "from": 134,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 134,
    "label": "has",
    "to": 5
  }, {
    "from": 134,
    "label": "has",
    "to": 144
  }, {
    "from": 134,
    "label": "has",
    "to": 145
  }, {
    "from": 134,
    "label": "has",
    "to": 146
  }, {
    "from": 134,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 134,
    "label": "has",
    "to": 5
  }, {
    "from": 134,
    "label": "has",
    "to": 149
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 134,
    "label": "has",
    "to": 151
  }, {
    "from": 134,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 134,
    "label": "has",
    "to": 5
  }, {
    "from": 134,
    "label": "has",
    "to": 154
  }, {
    "from": 134,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 155,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 5
  }, {
    "from": 134,
    "label": "has",
    "to": 158
  }, {
    "from": 134,
    "label": "has",
    "to": 159
  }, {
    "from": 134,
    "label": "has",
    "to": 160
  }, {
    "from": 160,
    "label": "has",
    "to": 5
  }, {
    "from": 134,
    "label": "has",
    "to": 161
  }, {
    "from": 161,
    "label": "has",
    "to": 107
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 162,
    "label": "has",
    "to": 163
  }, {
    "from": 163,
    "label": "has",
    "to": 164
  }, {
    "from": 161,
    "label": "has",
    "to": 165
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 166,
    "label": "has",
    "to": 5
  }, {
    "from": 161,
    "label": "has",
    "to": 167
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 167,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 169,
    "label": "has",
    "to": 171
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 161,
    "label": "has",
    "to": 5
  }, {
    "from": 134,
    "label": "has",
    "to": 173
  }, {
    "from": 134,
    "label": "has",
    "to": 174
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 174,
    "label": "has",
    "to": 176
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 176,
    "label": "has",
    "to": 178
  }, {
    "from": 176,
    "label": "has",
    "to": 179
  }, {
    "from": 179,
    "label": "has",
    "to": 180
  }, {
    "from": 176,
    "label": "has",
    "to": 181
  }, {
    "from": 174,
    "label": "has",
    "to": 5
  }, {
    "from": 134,
    "label": "has",
    "to": 182
  }, {
    "from": 182,
    "label": "has",
    "to": 183
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 183,
    "label": "has",
    "to": 185
  }, {
    "from": 183,
    "label": "has",
    "to": 186
  }, {
    "from": 186,
    "label": "has",
    "to": 187
  }, {
    "from": 183,
    "label": "has",
    "to": 188
  }, {
    "from": 188,
    "label": "has",
    "to": 189
  }, {
    "from": 183,
    "label": "has",
    "to": 190
  }, {
    "from": 190,
    "label": "has",
    "to": 191
  }, {
    "from": 191,
    "label": "has",
    "to": 192
  }, {
    "from": 191,
    "label": "has",
    "to": 193
  }, {
    "from": 191,
    "label": "has",
    "to": 194
  }, {
    "from": 191,
    "label": "has",
    "to": 195
  }, {
    "from": 134,
    "label": "has",
    "to": 196
  }, {
    "from": 134,
    "label": "has",
    "to": 197
  }, {
    "from": 134,
    "label": "has",
    "to": 193
  }, {
    "from": 134,
    "label": "has",
    "to": 198
  }, {
    "from": 134,
    "label": "has",
    "to": 199
  }, {
    "from": 134,
    "label": "has",
    "to": 200
  }, {
    "from": 200,
    "label": "has",
    "to": 107
  }, {
    "from": 200,
    "label": "has",
    "to": 201
  }, {
    "from": 201,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 200,
    "label": "has",
    "to": 202
  }, {
    "from": 202,
    "label": "has",
    "to": 112
  }, {
    "from": 200,
    "label": "has",
    "to": 203
  }, {
    "from": 203,
    "label": "has",
    "to": 184
  }, {
    "from": 203,
    "label": "has",
    "to": 185
  }, {
    "from": 203,
    "label": "has",
    "to": 186
  }, {
    "from": 186,
    "label": "has",
    "to": 187
  }, {
    "from": 203,
    "label": "has",
    "to": 204
  }, {
    "from": 203,
    "label": "has",
    "to": 205
  }, {
    "from": 205,
    "label": "has",
    "to": 206
  }, {
    "from": 205,
    "label": "has",
    "to": 207
  }, {
    "from": 205,
    "label": "has",
    "to": 208
  }, {
    "from": 205,
    "label": "has",
    "to": 209
  }, {
    "from": 209,
    "label": "has",
    "to": 210
  }, {
    "from": 205,
    "label": "has",
    "to": 211
  }, {
    "from": 205,
    "label": "has",
    "to": 212
  }, {
    "from": 212,
    "label": "has",
    "to": 213
  }, {
    "from": 205,
    "label": "has",
    "to": 214
  }, {
    "from": 205,
    "label": "has",
    "to": 215
  }, {
    "from": 205,
    "label": "has",
    "to": 216
  }, {
    "from": 205,
    "label": "has",
    "to": 217
  }, {
    "from": 205,
    "label": "has",
    "to": 218
  }, {
    "from": 203,
    "label": "has",
    "to": 219
  }, {
    "from": 219,
    "label": "has",
    "to": 112
  }, {
    "from": 219,
    "label": "has",
    "to": 220
  }, {
    "from": 219,
    "label": "has",
    "to": 221
  }, {
    "from": 219,
    "label": "has",
    "to": 222
  }, {
    "from": 222,
    "label": "has",
    "to": 223
  }, {
    "from": 222,
    "label": "has",
    "to": 224
  }, {
    "from": 222,
    "label": "has",
    "to": 207
  }, {
    "from": 222,
    "label": "has",
    "to": 208
  }, {
    "from": 222,
    "label": "has",
    "to": 225
  }, {
    "from": 222,
    "label": "has",
    "to": 226
  }, {
    "from": 222,
    "label": "has",
    "to": 227
  }, {
    "from": 227,
    "label": "has",
    "to": 228
  }, {
    "from": 203,
    "label": "has",
    "to": 229
  }, {
    "from": 229,
    "label": "has",
    "to": 215
  }, {
    "from": 229,
    "label": "has",
    "to": 216
  }, {
    "from": 229,
    "label": "has",
    "to": 230
  }, {
    "from": 229,
    "label": "has",
    "to": 218
  }, {
    "from": 134,
    "label": "has",
    "to": 231
  }, {
    "from": 134,
    "label": "has",
    "to": 232
  }, {
    "from": 134,
    "label": "has",
    "to": 233
  }, {
    "from": 134,
    "label": "has",
    "to": 234
  }, {
    "from": 134,
    "label": "has",
    "to": 235
  }, {
    "from": 134,
    "label": "has",
    "to": 236
  }, {
    "from": 134,
    "label": "has",
    "to": 237
  }, {
    "from": 134,
    "label": "has",
    "to": 238
  }, {
    "from": 134,
    "label": "has",
    "to": 239
  }, {
    "from": 134,
    "label": "has",
    "to": 240
  }, {
    "from": 134,
    "label": "has",
    "to": 241
  }, {
    "from": 134,
    "label": "has",
    "to": 242
  }, {
    "from": 134,
    "label": "has",
    "to": 243
  }, {
    "from": 134,
    "label": "has",
    "to": 34
  }, {
    "from": 134,
    "label": "has",
    "to": 244
  }, {
    "from": 245,
    "label": "has",
    "to": 5
  }, {
    "from": 246,
    "label": "has",
    "to": 5
  }, {
    "from": 246,
    "label": "has",
    "to": 247
  }, {
    "from": 248,
    "label": "has",
    "to": 107
  }, {
    "from": 248,
    "label": "has",
    "to": 162
  }, {
    "from": 162,
    "label": "has",
    "to": 163
  }, {
    "from": 163,
    "label": "has",
    "to": 164
  }, {
    "from": 248,
    "label": "has",
    "to": 165
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 166,
    "label": "has",
    "to": 5
  }, {
    "from": 248,
    "label": "has",
    "to": 167
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 167,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 169,
    "label": "has",
    "to": 171
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 248,
    "label": "has",
    "to": 5
  }, {
    "from": 248,
    "label": "has",
    "to": 249
  }, {
    "from": 250,
    "label": "has",
    "to": 175
  }, {
    "from": 250,
    "label": "has",
    "to": 176
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 176,
    "label": "has",
    "to": 178
  }, {
    "from": 176,
    "label": "has",
    "to": 179
  }, {
    "from": 179,
    "label": "has",
    "to": 180
  }, {
    "from": 176,
    "label": "has",
    "to": 181
  }, {
    "from": 250,
    "label": "has",
    "to": 5
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 252,
    "label": "has",
    "to": 183
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 183,
    "label": "has",
    "to": 185
  }, {
    "from": 183,
    "label": "has",
    "to": 186
  }, {
    "from": 186,
    "label": "has",
    "to": 187
  }, {
    "from": 183,
    "label": "has",
    "to": 188
  }, {
    "from": 188,
    "label": "has",
    "to": 189
  }, {
    "from": 183,
    "label": "has",
    "to": 190
  }, {
    "from": 190,
    "label": "has",
    "to": 191
  }, {
    "from": 191,
    "label": "has",
    "to": 192
  }, {
    "from": 191,
    "label": "has",
    "to": 193
  }, {
    "from": 191,
    "label": "has",
    "to": 194
  }, {
    "from": 191,
    "label": "has",
    "to": 195
  }, {
    "from": 252,
    "label": "has",
    "to": 253
  }, {
    "from": 254,
    "label": "has",
    "to": 107
  }, {
    "from": 254,
    "label": "has",
    "to": 201
  }, {
    "from": 201,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 254,
    "label": "has",
    "to": 202
  }, {
    "from": 202,
    "label": "has",
    "to": 112
  }, {
    "from": 254,
    "label": "has",
    "to": 203
  }, {
    "from": 203,
    "label": "has",
    "to": 184
  }, {
    "from": 203,
    "label": "has",
    "to": 185
  }, {
    "from": 203,
    "label": "has",
    "to": 186
  }, {
    "from": 186,
    "label": "has",
    "to": 187
  }, {
    "from": 203,
    "label": "has",
    "to": 204
  }, {
    "from": 203,
    "label": "has",
    "to": 205
  }, {
    "from": 205,
    "label": "has",
    "to": 206
  }, {
    "from": 205,
    "label": "has",
    "to": 207
  }, {
    "from": 205,
    "label": "has",
    "to": 208
  }, {
    "from": 205,
    "label": "has",
    "to": 209
  }, {
    "from": 209,
    "label": "has",
    "to": 210
  }, {
    "from": 205,
    "label": "has",
    "to": 211
  }, {
    "from": 205,
    "label": "has",
    "to": 212
  }, {
    "from": 212,
    "label": "has",
    "to": 213
  }, {
    "from": 205,
    "label": "has",
    "to": 214
  }, {
    "from": 205,
    "label": "has",
    "to": 215
  }, {
    "from": 205,
    "label": "has",
    "to": 216
  }, {
    "from": 205,
    "label": "has",
    "to": 217
  }, {
    "from": 205,
    "label": "has",
    "to": 218
  }, {
    "from": 203,
    "label": "has",
    "to": 219
  }, {
    "from": 219,
    "label": "has",
    "to": 112
  }, {
    "from": 219,
    "label": "has",
    "to": 220
  }, {
    "from": 219,
    "label": "has",
    "to": 221
  }, {
    "from": 219,
    "label": "has",
    "to": 222
  }, {
    "from": 222,
    "label": "has",
    "to": 223
  }, {
    "from": 222,
    "label": "has",
    "to": 224
  }, {
    "from": 222,
    "label": "has",
    "to": 207
  }, {
    "from": 222,
    "label": "has",
    "to": 208
  }, {
    "from": 222,
    "label": "has",
    "to": 225
  }, {
    "from": 222,
    "label": "has",
    "to": 226
  }, {
    "from": 222,
    "label": "has",
    "to": 227
  }, {
    "from": 227,
    "label": "has",
    "to": 228
  }, {
    "from": 203,
    "label": "has",
    "to": 229
  }, {
    "from": 229,
    "label": "has",
    "to": 215
  }, {
    "from": 229,
    "label": "has",
    "to": 216
  }, {
    "from": 229,
    "label": "has",
    "to": 230
  }, {
    "from": 229,
    "label": "has",
    "to": 218
  }, {
    "from": 254,
    "label": "has",
    "to": 255
  }, {
    "from": 256,
    "label": "has",
    "to": 257
  }, {
    "from": 257,
    "label": "has",
    "to": 258
  }, {
    "from": 257,
    "label": "has",
    "to": 259
  }, {
    "from": 256,
    "label": "has",
    "to": 5
  }, {
    "from": 256,
    "label": "has",
    "to": 260
  }, {
    "from": 261,
    "label": "has",
    "to": 11
  }, {
    "from": 261,
    "label": "has",
    "to": 12
  }, {
    "from": 261,
    "label": "has",
    "to": 5
  }, {
    "from": 261,
    "label": "has",
    "to": 262
  }, {
    "from": 263,
    "label": "has",
    "to": 16
  }, {
    "from": 263,
    "label": "has",
    "to": 5
  }, {
    "from": 263,
    "label": "has",
    "to": 264
  }, {
    "from": 265,
    "label": "has",
    "to": 47
  }, {
    "from": 266,
    "label": "has",
    "to": 60
  }, {
    "from": 267,
    "label": "has",
    "to": 5
  }, {
    "from": 21,
    "label": "calls",
    "to": 269
  }, {
    "from": 18,
    "label": "calls",
    "to": 14
  }, {
    "from": 62,
    "label": "calls",
    "to": 57
  }, {
    "from": 254,
    "label": "calls",
    "to": 57
  }, {
    "from": 254,
    "label": "calls",
    "to": 57
  }, {
    "from": 248,
    "label": "calls",
    "to": 248
  }, {
    "from": 134,
    "label": "calls",
    "to": 248
  }, {
    "from": 2,
    "label": "calls",
    "to": 275
  }, {
    "from": 62,
    "label": "calls",
    "to": 122
  }, {
    "from": 62,
    "label": "calls",
    "to": 277
  }, {
    "from": 122,
    "label": "calls",
    "to": 277
  }, {
    "from": 62,
    "label": "calls",
    "to": 277
  }, {
    "from": 248,
    "label": "calls",
    "to": 277
  }, {
    "from": 250,
    "label": "calls",
    "to": 277
  }, {
    "from": 252,
    "label": "calls",
    "to": 277
  }, {
    "from": 254,
    "label": "calls",
    "to": 277
  }, {
    "from": 254,
    "label": "calls",
    "to": 277
  }, {
    "from": 254,
    "label": "calls",
    "to": 277
  }, {
    "from": 24,
    "label": "calls",
    "to": 273
  }, {
    "from": 250,
    "label": "calls",
    "to": 250
  }, {
    "from": 252,
    "label": "calls",
    "to": 250
  }, {
    "from": 134,
    "label": "calls",
    "to": 280
  }, {
    "from": 268,
    "label": "calls",
    "to": 282
  }, {
    "from": 62,
    "label": "calls",
    "to": 2
  }, {
    "from": 268,
    "label": "calls",
    "to": 62
  }, {
    "from": 268,
    "label": "calls",
    "to": 62
  }, {
    "from": 18,
    "label": "calls",
    "to": 7
  }, {
    "from": 62,
    "label": "calls",
    "to": 270
  }, {
    "from": 248,
    "label": "calls",
    "to": 270
  }, {
    "from": 254,
    "label": "calls",
    "to": 270
  }, {
    "from": 28,
    "label": "calls",
    "to": 271
  }, {
    "from": 134,
    "label": "calls",
    "to": 271
  }, {
    "from": 7,
    "label": "calls",
    "to": 272
  }, {
    "from": 254,
    "label": "calls",
    "to": 254
  }, {
    "from": 134,
    "label": "calls",
    "to": 254
  }, {
    "from": 62,
    "label": "calls",
    "to": 274
  }, {
    "from": 248,
    "label": "calls",
    "to": 274
  }, {
    "from": 254,
    "label": "calls",
    "to": 274
  }, {
    "from": 254,
    "label": "calls",
    "to": 274
  }, {
    "from": 268,
    "label": "calls",
    "to": 124
  }, {
    "from": 62,
    "label": "calls",
    "to": 37
  }, {
    "from": 7,
    "label": "calls",
    "to": 285
  }, {
    "from": 14,
    "label": "calls",
    "to": 285
  }, {
    "from": 62,
    "label": "calls",
    "to": 18
  }, {
    "from": 62,
    "label": "calls",
    "to": 278
  }, {
    "from": 254,
    "label": "calls",
    "to": 279
  }, {
    "from": 254,
    "label": "calls",
    "to": 279
  }, {
    "from": 254,
    "label": "calls",
    "to": 286
  }, {
    "from": 254,
    "label": "calls",
    "to": 286
  }, {
    "from": 134,
    "label": "calls",
    "to": 286
  }, {
    "from": 134,
    "label": "calls",
    "to": 252
  }, {
    "from": 134,
    "label": "calls",
    "to": 28
  }, {
    "from": 268,
    "label": "calls",
    "to": 281
  }, {
    "from": 254,
    "label": "calls",
    "to": 245
  }, {
    "from": 7,
    "label": "calls",
    "to": 283
  }, {
    "from": 7,
    "label": "calls",
    "to": 283
  }, {
    "from": 62,
    "label": "calls",
    "to": 284
  }, {
    "from": 124,
    "label": "calls",
    "to": 284
  }, {
    "from": 134,
    "label": "calls",
    "to": 284
  }, {
    "from": 134,
    "label": "calls",
    "to": 284
  }, {
    "from": 268,
    "label": "calls",
    "to": 284
  }, {
    "from": 268,
    "label": "calls",
    "to": 276
  }, {
    "from": 62,
    "label": "calls",
    "to": 24
  }, {
    "from": 62,
    "label": "calls",
    "to": 24
  }, {
    "from": 134,
    "label": "calls",
    "to": 21
  }, {
    "from": 1,
    "label": "contains",
    "to": 268
  }, {
    "from": 268,
    "label": "declares",
    "to": 2
  }, {
    "from": 268,
    "label": "declares",
    "to": 7
  }, {
    "from": 268,
    "label": "declares",
    "to": 14
  }, {
    "from": 268,
    "label": "declares",
    "to": 18
  }, {
    "from": 268,
    "label": "declares",
    "to": 21
  }, {
    "from": 268,
    "label": "declares",
    "to": 24
  }, {
    "from": 268,
    "label": "declares",
    "to": 28
  }, {
    "from": 268,
    "label": "declares",
    "to": 37
  }, {
    "from": 268,
    "label": "declares",
    "to": 57
  }, {
    "from": 268,
    "label": "declares",
    "to": 62
  }, {
    "from": 268,
    "label": "declares",
    "to": 122
  }, {
    "from": 268,
    "label": "declares",
    "to": 124
  }, {
    "from": 268,
    "label": "declares",
    "to": 134
  }, {
    "from": 268,
    "label": "declares",
    "to": 245
  }, {
    "from": 268,
    "label": "declares",
    "to": 246
  }, {
    "from": 268,
    "label": "declares",
    "to": 248
  }, {
    "from": 268,
    "label": "declares",
    "to": 250
  }, {
    "from": 268,
    "label": "declares",
    "to": 252
  }, {
    "from": 268,
    "label": "declares",
    "to": 254
  }, {
    "from": 268,
    "label": "declares",
    "to": 256
  }, {
    "from": 268,
    "label": "declares",
    "to": 261
  }, {
    "from": 268,
    "label": "declares",
    "to": 263
  }, {
    "from": 268,
    "label": "declares",
    "to": 265
  }, {
    "from": 268,
    "label": "declares",
    "to": 266
  }, {
    "from": 268,
    "label": "declares",
    "to": 267
  }, {
    "from": 1,
    "label": "contains",
    "to": 287
  }, {
    "from": 1,
    "label": "contains",
    "to": 288
  }, {
    "from": 287,
    "label": "initializes",
    "to": 289
  }, {
    "from": 289,
    "label": "assigns",
    "to": 290
  }, {
    "from": 287,
    "label": "initializes",
    "to": 291
  }, {
    "from": 291,
    "label": "assigns",
    "to": 292
  }, {
    "from": 287,
    "label": "initializes",
    "to": 293
  }, {
    "from": 293,
    "label": "assigns",
    "to": 294
  }, {
    "from": 287,
    "label": "initializes",
    "to": 295
  }, {
    "from": 295,
    "label": "assigns",
    "to": 296
  }, {
    "from": 287,
    "label": "initializes",
    "to": 297
  }, {
    "from": 297,
    "label": "assigns",
    "to": 298
  }, {
    "from": 287,
    "label": "initializes",
    "to": 299
  }, {
    "from": 299,
    "label": "assigns",
    "to": 300
  }, {
    "from": 287,
    "label": "initializes",
    "to": 301
  }, {
    "from": 301,
    "label": "assigns",
    "to": 302
  }, {
    "from": 287,
    "label": "initializes",
    "to": 303
  }, {
    "from": 303,
    "label": "assigns",
    "to": 304
  }, {
    "from": 287,
    "label": "initializes",
    "to": 305
  }, {
    "from": 305,
    "label": "assigns",
    "to": 306
  }, {
    "from": 287,
    "label": "initializes",
    "to": 307
  }, {
    "from": 307,
    "label": "assigns",
    "to": 308
  }, {
    "from": 287,
    "label": "initializes",
    "to": 309
  }, {
    "from": 309,
    "label": "assigns",
    "to": 310
  }, {
    "from": 287,
    "label": "initializes",
    "to": 311
  }, {
    "from": 311,
    "label": "assigns",
    "to": 312
  }, {
    "from": 287,
    "label": "initializes",
    "to": 313
  }, {
    "from": 313,
    "label": "assigns",
    "to": 314
  }, {
    "from": 287,
    "label": "initializes",
    "to": 315
  }, {
    "from": 315,
    "label": "assigns",
    "to": 316
  }, {
    "from": 287,
    "label": "initializes",
    "to": 317
  }, {
    "from": 317,
    "label": "assigns",
    "to": 318
  }, {
    "from": 287,
    "label": "initializes",
    "to": 319
  }, {
    "from": 319,
    "label": "assigns",
    "to": 320
  }, {
    "from": 287,
    "label": "initializes",
    "to": 321
  }, {
    "from": 321,
    "label": "assigns",
    "to": 322
  }, {
    "from": 287,
    "label": "initializes",
    "to": 323
  }, {
    "from": 323,
    "label": "assigns",
    "to": 324
  }, {
    "from": 287,
    "label": "initializes",
    "to": 325
  }, {
    "from": 325,
    "label": "assigns",
    "to": 326
  }, {
    "from": 287,
    "label": "initializes",
    "to": 327
  }, {
    "from": 327,
    "label": "assigns",
    "to": 328
  }, {
    "from": 287,
    "label": "initializes",
    "to": 329
  }, {
    "from": 329,
    "label": "assigns",
    "to": 330
  }, {
    "from": 287,
    "label": "initializes",
    "to": 331
  }, {
    "from": 331,
    "label": "assigns",
    "to": 332
  }, {
    "from": 287,
    "label": "initializes",
    "to": 333
  }, {
    "from": 333,
    "label": "assigns",
    "to": 334
  }, {
    "from": 334,
    "label": "assigns",
    "to": 335
  }, {
    "from": 334,
    "label": "assigns",
    "to": 336
  }, {
    "from": 334,
    "label": "assigns",
    "to": 337
  }, {
    "from": 334,
    "label": "assigns",
    "to": 338
  }, {
    "from": 334,
    "label": "assigns",
    "to": 339
  }, {
    "from": 334,
    "label": "assigns",
    "to": 340
  }, {
    "from": 334,
    "label": "assigns",
    "to": 341
  }, {
    "from": 334,
    "label": "assigns",
    "to": 342
  }, {
    "from": 334,
    "label": "assigns",
    "to": 343
  }, {
    "from": 287,
    "label": "initializes",
    "to": 344
  }, {
    "from": 344,
    "label": "assigns",
    "to": 345
  }, {
    "from": 345,
    "label": "assigns",
    "to": 346
  }, {
    "from": 345,
    "label": "assigns",
    "to": 347
  }, {
    "from": 345,
    "label": "assigns",
    "to": 348
  }, {
    "from": 345,
    "label": "assigns",
    "to": 349
  }, {
    "from": 345,
    "label": "assigns",
    "to": 350
  }, {
    "from": 345,
    "label": "assigns",
    "to": 351
  }, {
    "from": 345,
    "label": "assigns",
    "to": 352
  }, {
    "from": 345,
    "label": "assigns",
    "to": 353
  }, {
    "from": 345,
    "label": "assigns",
    "to": 354
  }, {
    "from": 287,
    "label": "initializes",
    "to": 355
  }, {
    "from": 355,
    "label": "assigns",
    "to": 356
  }, {
    "from": 356,
    "label": "assigns",
    "to": 357
  }, {
    "from": 357,
    "label": "assigns",
    "to": 358
  }, {
    "from": 356,
    "label": "assigns",
    "to": 359
  }, {
    "from": 359,
    "label": "assigns",
    "to": 360
  }, {
    "from": 356,
    "label": "assigns",
    "to": 361
  }, {
    "from": 361,
    "label": "assigns",
    "to": 362
  }, {
    "from": 356,
    "label": "assigns",
    "to": 363
  }, {
    "from": 363,
    "label": "assigns",
    "to": 364
  }, {
    "from": 356,
    "label": "assigns",
    "to": 365
  }, {
    "from": 365,
    "label": "assigns",
    "to": 366
  }, {
    "from": 356,
    "label": "assigns",
    "to": 367
  }, {
    "from": 367,
    "label": "assigns",
    "to": 368
  }, {
    "from": 356,
    "label": "assigns",
    "to": 369
  }, {
    "from": 369,
    "label": "assigns",
    "to": 370
  }, {
    "from": 356,
    "label": "assigns",
    "to": 371
  }, {
    "from": 371,
    "label": "assigns",
    "to": 372
  }, {
    "from": 356,
    "label": "assigns",
    "to": 373
  }, {
    "from": 373,
    "label": "assigns",
    "to": 374
  }, {
    "from": 287,
    "label": "initializes",
    "to": 375
  }, {
    "from": 375,
    "label": "assigns",
    "to": 376
  }, {
    "from": 287,
    "label": "initializes",
    "to": 377
  }, {
    "from": 377,
    "label": "assigns",
    "to": 378
  }, {
    "from": 287,
    "label": "initializes",
    "to": 379
  }, {
    "from": 379,
    "label": "assigns",
    "to": 380
  }, {
    "from": 287,
    "label": "initializes",
    "to": 381
  }, {
    "from": 381,
    "label": "assigns",
    "to": 382
  }, {
    "from": 287,
    "label": "initializes",
    "to": 383
  }, {
    "from": 383,
    "label": "assigns",
    "to": 384
  }, {
    "from": 287,
    "label": "initializes",
    "to": 385
  }, {
    "from": 385,
    "label": "assigns",
    "to": 386
  }, {
    "from": 46,
    "label": "hasArgument",
    "to": 265
  }, {
    "from": 59,
    "label": "hasArgument",
    "to": 266
  }, {
    "from": 166,
    "label": "hasArgument",
    "to": 267
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "ask",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function detectutf8 ()\r\n   local c = setlocale(nil, \"ctype\"):lower()\r\n   local e = c:find(\"utf-8\", 1, true) or c:find(\"utf8\", 1, true)\r\n   return e and \"utf-8\"\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local c = setlocale(nil, \"ctype\"):lower()",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local e = c:find(\"utf-8\", 1, true) or c:find(\"utf8\", 1, true)",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "local function utf8toiso (s)\r\n   if s:find(\"[\\224-\\255]\") then error(\"non-ISO char\") end\r\n   s = s:gsub(\"([\\192-\\223])(.)\", function (c1, c2)\r\n         c1 = byte(c1) - 192\r\n         c2 = byte(c2) - 128\r\n         return char(c1 * 64 + c2)\r\n       end)\r\n   return s\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "if s:find(\"[\\224-\\255]\") then error(\"non-ISO char\") end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "error(\"non-ISO char\")",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "s = s:gsub(\"([\\192-\\223])(.)\", function (c1, c2)\r\n         c1 = byte(c1) - 192\r\n         c2 = byte(c2) - 128\r\n         return char(c1 * 64 + c2)\r\n       end)",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "c1 = byte(c1) - 192",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "c2 = byte(c2) - 128",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "local function isotoutf8 (s)\r\n   s = s:gsub(\"([\\128-\\255])\", function (c)\r\n         local b = c:byte()\r\n         return b < 192 and \"\\194\"..c or \"\\195\"..char(b-64)\r\n       end)\r\n   return s\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "s = s:gsub(\"([\\128-\\255])\", function (c)\r\n         local b = c:byte()\r\n         return b < 192 and \"\\194\"..c or \"\\195\"..char(b-64)\r\n       end)",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "local b = c:byte()",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "local function convertcs (s, cs, uft8)\r\n\tif cs == \"utf-8\" and not utf8 then -- convert to iso\r\n \t\treturn utf8toiso(s)     \r\n   elseif cs ~= \"utf-8\" and utf8 then -- convert to utf-8\r\n \t\treturn isotoutf8(s)     \r\n   end\r\n\treturn s\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "if cs == \"utf-8\" and not utf8 then -- convert to iso\r\n \t\treturn utf8toiso(s)     \r\n   elseif cs ~= \"utf-8\" and utf8 then -- convert to utf-8\r\n \t\treturn isotoutf8(s)     \r\n   end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "local function fprintf (filehandler, fmt, ...)\r\n   filehandler:write(format(fmt, ...))\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "filehandler:write(format(fmt, ...))",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "local function line (s, n)\r\n   n = n or 72\r\n   io.stderr:write(rep(s, n)..\"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "n = n or 72",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "io.stderr:write(rep(s, n)..\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "local function printcss (filehandler, filename)\r\n   local data\r\n   local f = io.open(filename, \"rb\")\r\n   if f == nil then\r\n     data = CSS \r\n   else\r\n     data = f:read(\"*all\")\r\n     f:close()\r\n   end\r\n   filehandler:write(data)\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "local data",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "local f = io.open(filename, \"rb\")",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "if f == nil then\r\n     data = CSS \r\n   else\r\n     data = f:read(\"*all\")\r\n     f:close()\r\n   end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "data = CSS",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "data = f:read(\"*all\")",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "filehandler:write(data)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "local function parts (what)\r\n   local absol, spath, info = \"\"\r\n\r\n   if what == nil then return nil end\r\n\r\n   what = what:gsub(\"%s\", \"\")   -- delete blanks\r\n   what = what:gsub(\"[%.]+\", \".\")   -- collapse multiple .\r\n\r\n   if what:sub(1,1) == \"/\" then  -- search initial /\r\n      absol = \"/\"\r\n      what = what:sub(2)\r\n   end\r\n\r\n   -- split parts\r\n   -- if more than one \"^\" appears only the last part is info\r\n   what:gsub(\"%^\", \"&\")\r\n   what:gsub(\"^([^&]*)^([^&]*)$\", function (w1, w2) spath, info = w1, w2 end)\r\n   if spath == nil then spath, info = what, \"\" \r\n   else\r\n      spath:gsub(\"&\", \"%^\")\r\n      info:gsub(\"&\", \"%^\")\r\n   end\r\n\r\n   -- delete possible initial and final .\r\n   if spath:sub(1,1) == \".\" then spath = spath:sub(2) end\r\n   if spath:sub(-1) == \".\" then spath = spath:sub(1,-2) end\r\n\r\n   return absol, spath, info\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "local absol, spath, info = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "if what == nil then return nil end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "what = what:gsub(\"%s\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "what = what:gsub(\"[%.]+\", \".\")",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "if what:sub(1,1) == \"/\" then  -- search initial /\r\n      absol = \"/\"\r\n      what = what:sub(2)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "absol = \"/\"",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "what = what:sub(2)",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "what:gsub(\"%^\", \"&\")",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "what:gsub(\"^([^&]*)^([^&]*)$\", function (w1, w2) spath, info = w1, w2 end)",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "spath, info = w1, w2",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "if spath == nil then spath, info = what, \"\" \r\n   else\r\n      spath:gsub(\"&\", \"%^\")\r\n      info:gsub(\"&\", \"%^\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "spath, info = what, \"\"",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "spath:gsub(\"&\", \"%^\")",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "info:gsub(\"&\", \"%^\")",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "if spath:sub(1,1) == \".\" then spath = spath:sub(2) end",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "spath = spath:sub(2)",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "if spath:sub(-1) == \".\" then spath = spath:sub(1,-2) end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "spath = spath:sub(1,-2)",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "local function splitdot (s)\r\n   local t = {}\r\n   s:gsub('([^%.]+)(%.*)', function (w, d) t[#t+1] = w end)\r\n   return t\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "s:gsub('([^%.]+)(%.*)', function (w, d) t[#t+1] = w end)",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "t[#t+1] = w",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "function about (what)\r\n   what = what or \"/\"..NAME..\"^basic\"\r\n   if what == \"\" then what = \"/\"..basis..\"^basic\" end\r\n\r\n   local absol, spath, info = parts(what)\r\n\r\n   if absol ~= \"/\" then\r\n     if spath ~= \"\" then spath = basis..\".\"..spath\r\n     else spath = basis end\r\n   end\r\n   if info == \"\" then info = \"basic\" end\r\n\r\n   local ts = splitdot(spath)\r\n   table.insert(ts, 2, \"_H\")\r\n\r\n   if #info == 1 then\r\n      if info == \"a\" then info = \"all\" \r\n      elseif order[info] then info = cases[order[info]] end\r\n   end\r\n\r\n   local tt = {info}\r\n   if info == \"all\" then\r\n      for k, v in ipairs(cases) do tt[k] = v end\r\n   end\r\n\r\n   local H = _G\r\n   local CHARSET = H[ts[1]][ts[2]][\"_CHARSET\"]\r\n   local UTF8    = detectutf8()\r\n\r\n   for k = 1, #ts do\r\n      if H then H = H[ts[k]] end\r\n   end\r\n   if H == nil and info ~= \"list\" then\r\n      io.stderr:write(\"No information about '/\"..spath..\"^\"..info..\"'\\n\")\r\n      io.stderr:flush()\r\n      return\r\n   end\r\n\r\n   if info == \"list\" then tt = {\"list\"} end\r\n\r\n   local function fill (t)\r\n      local pH = \"\"\r\n      local nc, ic, lef = 3, 1, 25\r\n\r\n      for j, s in ipairs(t) do\r\n         pH = pH..s..(\" \"):rep(lef-#s)\r\n         if ic == nc then pH = pH..\"\\n\" end\r\n         ic = ic+1\r\n         if ic > nc then ic = 1 end\r\n      end\r\n      return pH..\"\\n\"\r\n   end\r\n\r\n   for k, v in ipairs(tt) do\r\n      local H1, pH = H[\"_\"..v], \"\"\r\n      if v == \"list\" then\r\n         -- special case : list\r\n     \t\tlocal al = {}\r\n     \t\tfor a in pairs(H) do\r\n   \t\t\tif a:sub(1,1) ~= \"_\" then al[#al+1] = a end\r\n\t     \tend\r\n      \tif #al > 0 then \r\n            table.sort(al)\r\n            io.stderr:write(\">>>>>>>>>>   \"..spath..\":\"..v..\"   <<<<<<<<<<\\n\")\r\n\t   \t\tpH = 'List of functions in \"'..spath..'\":\\n\\n'..fill(al)\r\n            io.stderr:write(pH)\r\n            line(\"-\")\r\n         end\r\n      elseif H1 and type(H1) ~= \"table\" then\r\n         io.stderr:write(\">>>>>>>>>>   \"..spath..\" ^ \"..v..\"   <<<<<<<<<<\\n\")\r\n         H1 = convertcs(H1, CHARSET, UTF8)\r\n         io.stderr:write(pH..H1..\"\\n\")\r\n         line(\"-\")\r\n      elseif info ~= \"all\" then\r\n         io.stderr:write(\">>No information about '/\"..spath..\" ^ \"..info..\"'\\n\")\r\n      end\r\n   end\r\n\r\n   io.stderr:flush()\r\nend",
    "type": "function"
  }, {
    "id": 63,
    "text": "what = what or \"/\"..NAME..\"^basic\"",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "if what == \"\" then what = \"/\"..basis..\"^basic\" end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "what = \"/\"..basis..\"^basic\"",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "local absol, spath, info = parts(what)",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "if absol ~= \"/\" then\r\n     if spath ~= \"\" then spath = basis..\".\"..spath\r\n     else spath = basis end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "if spath ~= \"\" then spath = basis..\".\"..spath\r\n     else spath = basis end",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "spath = basis..\".\"..spath",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "spath = basis",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "if info == \"\" then info = \"basic\" end",
    "type": "statement:if"
  }, {
    "id": 72,
    "text": "info = \"basic\"",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "local ts = splitdot(spath)",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "table.insert(ts, 2, \"_H\")",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "if #info == 1 then\r\n      if info == \"a\" then info = \"all\" \r\n      elseif order[info] then info = cases[order[info]] end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "if info == \"a\" then info = \"all\" \r\n      elseif order[info] then info = cases[order[info]] end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "info = \"all\"",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "info = cases[order[info]]",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "local tt = {info}",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "if info == \"all\" then\r\n      for k, v in ipairs(cases) do tt[k] = v end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "for k, v in ipairs(cases) do tt[k] = v end",
    "type": "statement:genericfor"
  }, {
    "id": 82,
    "text": "tt[k] = v",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "local H = _G",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "local CHARSET = H[ts[1]][ts[2]][\"_CHARSET\"]",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "local UTF8    = detectutf8()",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "for k = 1, #ts do\r\n      if H then H = H[ts[k]] end\r\n   end",
    "type": "statement:numericfor"
  }, {
    "id": 87,
    "text": "if H then H = H[ts[k]] end",
    "type": "statement:if"
  }, {
    "id": 88,
    "text": "H = H[ts[k]]",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "if H == nil and info ~= \"list\" then\r\n      io.stderr:write(\"No information about '/\"..spath..\"^\"..info..\"'\\n\")\r\n      io.stderr:flush()\r\n      return\r\n   end",
    "type": "statement:if"
  }, {
    "id": 90,
    "text": "io.stderr:write(\"No information about '/\"..spath..\"^\"..info..\"'\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "io.stderr:flush()",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "if info == \"list\" then tt = {\"list\"} end",
    "type": "statement:if"
  }, {
    "id": 93,
    "text": "tt = {\"list\"}",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "local function fill (t)\r\n      local pH = \"\"\r\n      local nc, ic, lef = 3, 1, 25\r\n\r\n      for j, s in ipairs(t) do\r\n         pH = pH..s..(\" \"):rep(lef-#s)\r\n         if ic == nc then pH = pH..\"\\n\" end\r\n         ic = ic+1\r\n         if ic > nc then ic = 1 end\r\n      end\r\n      return pH..\"\\n\"\r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 95,
    "text": "local pH = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 96,
    "text": "local nc, ic, lef = 3, 1, 25",
    "type": "statement:localassign"
  }, {
    "id": 97,
    "text": "for j, s in ipairs(t) do\r\n         pH = pH..s..(\" \"):rep(lef-#s)\r\n         if ic == nc then pH = pH..\"\\n\" end\r\n         ic = ic+1\r\n         if ic > nc then ic = 1 end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 98,
    "text": "pH = pH..s..(\" \"):rep(lef-#s)",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "if ic == nc then pH = pH..\"\\n\" end",
    "type": "statement:if"
  }, {
    "id": 100,
    "text": "pH = pH..\"\\n\"",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "ic = ic+1",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "if ic > nc then ic = 1 end",
    "type": "statement:if"
  }, {
    "id": 103,
    "text": "ic = 1",
    "type": "statement:assign"
  }, {
    "id": 104,
    "text": "for k, v in ipairs(tt) do\r\n      local H1, pH = H[\"_\"..v], \"\"\r\n      if v == \"list\" then\r\n         -- special case : list\r\n     \t\tlocal al = {}\r\n     \t\tfor a in pairs(H) do\r\n   \t\t\tif a:sub(1,1) ~= \"_\" then al[#al+1] = a end\r\n\t     \tend\r\n      \tif #al > 0 then \r\n            table.sort(al)\r\n            io.stderr:write(\">>>>>>>>>>   \"..spath..\":\"..v..\"   <<<<<<<<<<\\n\")\r\n\t   \t\tpH = 'List of functions in \"'..spath..'\":\\n\\n'..fill(al)\r\n            io.stderr:write(pH)\r\n            line(\"-\")\r\n         end\r\n      elseif H1 and type(H1) ~= \"table\" then\r\n         io.stderr:write(\">>>>>>>>>>   \"..spath..\" ^ \"..v..\"   <<<<<<<<<<\\n\")\r\n         H1 = convertcs(H1, CHARSET, UTF8)\r\n         io.stderr:write(pH..H1..\"\\n\")\r\n         line(\"-\")\r\n      elseif info ~= \"all\" then\r\n         io.stderr:write(\">>No information about '/\"..spath..\" ^ \"..info..\"'\\n\")\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 105,
    "text": "local H1, pH = H[\"_\"..v], \"\"",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "if v == \"list\" then\r\n         -- special case : list\r\n     \t\tlocal al = {}\r\n     \t\tfor a in pairs(H) do\r\n   \t\t\tif a:sub(1,1) ~= \"_\" then al[#al+1] = a end\r\n\t     \tend\r\n      \tif #al > 0 then \r\n            table.sort(al)\r\n            io.stderr:write(\">>>>>>>>>>   \"..spath..\":\"..v..\"   <<<<<<<<<<\\n\")\r\n\t   \t\tpH = 'List of functions in \"'..spath..'\":\\n\\n'..fill(al)\r\n            io.stderr:write(pH)\r\n            line(\"-\")\r\n         end\r\n      elseif H1 and type(H1) ~= \"table\" then\r\n         io.stderr:write(\">>>>>>>>>>   \"..spath..\" ^ \"..v..\"   <<<<<<<<<<\\n\")\r\n         H1 = convertcs(H1, CHARSET, UTF8)\r\n         io.stderr:write(pH..H1..\"\\n\")\r\n         line(\"-\")\r\n      elseif info ~= \"all\" then\r\n         io.stderr:write(\">>No information about '/\"..spath..\" ^ \"..info..\"'\\n\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 107,
    "text": "local al = {}",
    "type": "statement:localassign"
  }, {
    "id": 108,
    "text": "for a in pairs(H) do\r\n   \t\t\tif a:sub(1,1) ~= \"_\" then al[#al+1] = a end\r\n\t     \tend",
    "type": "statement:genericfor"
  }, {
    "id": 109,
    "text": "if a:sub(1,1) ~= \"_\" then al[#al+1] = a end",
    "type": "statement:if"
  }, {
    "id": 110,
    "text": "al[#al+1] = a",
    "type": "statement:assign"
  }, {
    "id": 111,
    "text": "if #al > 0 then \r\n            table.sort(al)\r\n            io.stderr:write(\">>>>>>>>>>   \"..spath..\":\"..v..\"   <<<<<<<<<<\\n\")\r\n\t   \t\tpH = 'List of functions in \"'..spath..'\":\\n\\n'..fill(al)\r\n            io.stderr:write(pH)\r\n            line(\"-\")\r\n         end",
    "type": "statement:if"
  }, {
    "id": 112,
    "text": "table.sort(al)",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "io.stderr:write(\">>>>>>>>>>   \"..spath..\":\"..v..\"   <<<<<<<<<<\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "pH = 'List of functions in \"'..spath..'\":\\n\\n'..fill(al)",
    "type": "statement:assign"
  }, {
    "id": 115,
    "text": "io.stderr:write(pH)",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "line(\"-\")",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "io.stderr:write(\">>>>>>>>>>   \"..spath..\" ^ \"..v..\"   <<<<<<<<<<\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "H1 = convertcs(H1, CHARSET, UTF8)",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "io.stderr:write(pH..H1..\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "io.stderr:write(\">>No information about '/\"..spath..\" ^ \"..info..\"'\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 122,
    "text": "local function fill (t)\r\n      local pH = \"\"\r\n      local nc, ic, lef = 3, 1, 25\r\n\r\n      for j, s in ipairs(t) do\r\n         pH = pH..s..(\" \"):rep(lef-#s)\r\n         if ic == nc then pH = pH..\"\\n\" end\r\n         ic = ic+1\r\n         if ic > nc then ic = 1 end\r\n      end\r\n      return pH..\"\\n\"\r\n   end",
    "type": "function"
  }, {
    "id": 123,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 124,
    "text": "function base (b)\r\n   if b == nil or type(b) ~= \"string\" then b = NAME end\r\n   if b~= \"\" then\r\n      if b:sub(1,1) == \"/\" then b = b:sub(2) end\r\n      basis, now = b\r\n      io.stderr:write('--> Changing help basis to \"'..basis..'\"\\n')\r\n   else\r\n      io.stderr:write('--> Help basis is \"'..basis..'\"\\n')\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 125,
    "text": "if b == nil or type(b) ~= \"string\" then b = NAME end",
    "type": "statement:if"
  }, {
    "id": 126,
    "text": "b = NAME",
    "type": "statement:assign"
  }, {
    "id": 127,
    "text": "if b~= \"\" then\r\n      if b:sub(1,1) == \"/\" then b = b:sub(2) end\r\n      basis, now = b\r\n      io.stderr:write('--> Changing help basis to \"'..basis..'\"\\n')\r\n   else\r\n      io.stderr:write('--> Help basis is \"'..basis..'\"\\n')\r\n   end",
    "type": "statement:if"
  }, {
    "id": 128,
    "text": "if b:sub(1,1) == \"/\" then b = b:sub(2) end",
    "type": "statement:if"
  }, {
    "id": 129,
    "text": "b = b:sub(2)",
    "type": "statement:assign"
  }, {
    "id": 130,
    "text": "basis, now = b",
    "type": "statement:assign"
  }, {
    "id": 131,
    "text": "io.stderr:write('--> Changing help basis to \"'..basis..'\"\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "io.stderr:write('--> Help basis is \"'..basis..'\"\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 133,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 134,
    "text": "function doc (name, filename)\r\n   if type(name) ~= \"string\" then\r\n      io.stderr:write(\"A name of a module must be given\\n\")\r\n      return\r\n   end\r\n\r\n   if name == \"\" then name = basis end\r\n   if _G[name] == nil then\r\n      io.stderr:write(\"Module \"..name..\" not found\\n\")\r\n      return\r\n   end\r\n\r\n   local gn = _G[name]\r\n   if gn._H == nil then\r\n      io.stderr:write(\"Module \"..name..\" has no help information\\n\")\r\n      return\r\n   end\r\n   name = gn._H._Name\r\n   local CHARSET = gn._H._CHARSET\r\n\r\n   filename = filename or name\r\n   if type(filename) ~= \"string\" then\r\n      io.stderr:write(\"A filename for output must be given\\n\")\r\n      return\r\n   end\r\n\r\n   -- check for .html or .htm extension in filename\r\n   if filename:sub(-5) ~= \".html\" and filename:sub(-4) ~= \".htm\" then\r\n      filename = filename..\".html\"\r\n   end\r\n\r\n   local f = io.open(filename, \"w\")\r\n   if f == nil then\r\n      io.stderr:write('\"'..filename..' cannot be created\\n')\r\n      return\r\n   end\r\n\r\n   local md, markdown = pcall(require, \"markdown\")\r\n   if not md then\r\n      io.stderr:write(\"Markdown not found. No conversion is applied\\n\")\r\n      markdown = function (s) return s end\r\n   end\r\n\r\n   local cart = {}\r\n\r\n   gn = gn._H\r\n\r\n   local function pref (s)\r\n      return '<a href=\"#'..s..'\">'..s..'</a>'\r\n   end\r\n\r\n   local function listfun (gn)\r\n      -- prepare an alphabetical list of (sub)functions\r\n      local al = {}\r\n      for a in pairs(gn) do\r\n   \t\tif a:sub(1,1) ~= \"_\" then al[#al+1] = {name = a} end\r\n      end\r\n      if #al > 0 then \r\n         table.sort(al, function (a, b) return a.name < b.name end)\r\n      end\r\n      for i, a in ipairs(al) do\r\n    \t\tlocal d = gn[a.name]\r\n         if d then\r\n            local b = listfun(d)\r\n            if #b > 0 then al[i][1] = b end\r\n         end\r\n      end\r\n   \treturn al\r\n   end\r\n\r\n   local allfun = listfun(gn)\r\n\r\n   local function showlist (allfun, prev)\r\n\t\tlocal cart = \"\"\r\n\t\tfor i, a in ipairs(allfun) do\r\n         local pr = prev == \"\" and \"\" or prev..\"_\"\r\n\t\t\tcart = cart..'<li>'..'<a href=\"#'..pr..a.name..'\">'..a.name..'</a>'\r\n         if #a > 0 then\r\n            cart = cart..\"\\n<ul>\"..showlist(a[1], a.name)..\"\\n</ul>\"\r\n         end\r\n         cart = cart..'</li>\\n'\r\n      end\r\n      return cart\r\n   end\r\n\r\n   local function navigate (gn, level, allfun)\r\n     \t-- check in order _-beginning fields\r\n      for i, c in ipairs(cases) do\r\n   \t\tlocal d = gn[\"_\"..c]\r\n         local Ca = Cases[i]\r\n       \tif cases[i] == \"usage\" then\r\n            Ca = Ca..(level == 2 and \"the module\" or \"function\")\r\n         end\r\n         if d or c == \"list\" then\r\n   \t\t\tcart[#cart+1] = \"<li>\"..'<a href=\"#'..c..'\">'..Ca..\"</a></li>\\n\"\r\n         end\r\n         if c == \"description\" then \r\n   \t\t   if #allfun > 0 then\r\n      \t\t\tcart[#cart+1] = \"<li>\"..'<a href=\"#'..c..'\">'..Ca..\"</a>\\n\"\r\n   \t\t\t\tcart[#cart+1] = '<ul>\\n'\r\n   \t\t\t\tcart[#cart+1] = showlist(allfun, \"\")\r\n   \t\t\t\tcart[#cart+1] = '</ul></li>\\n'\r\n     \t\t\tend\r\n      \tend\r\n      end\r\n   end\r\n\r\n   -- navigation menu\r\n\r\n   cart[#cart+1] = '<div class=\"noprint\" id=\"navigate\">\\n'\r\n   cart[#cart+1] = '<h1>Module <code>'..name..'</code></h1>\\n\\n'\r\n   cart[#cart+1] = '<ul>\\n'\r\n\r\n   navigate(gn, 2, allfun)\r\n\r\n   cart[#cart+1] = '</ul></div>\\n'\r\n\r\n   -- main part\r\n\r\n   local function inside (gn, level, previous)\r\n      -- prepare an alphabetical list of (sub)functions\r\n      local al = {}\r\n      for a in pairs(gn) do\r\n   \t\tif a:sub(1,1) ~= \"_\" then al[#al+1] = a end\r\n      end\r\n      if #al > 0 then table.sort(al) end\r\n   \r\n     \t-- check in order _-beginning fields\r\n      for i, c in ipairs(cases) do\r\n   \t\tlocal d = gn[\"_\"..c]\r\n         local Ca = Cases[i]\r\n       \tif cases[i] == \"usage\" then\r\n            Ca = Ca..(level == 2 and \"the module\" or \"function\")\r\n         end\r\n         local pH = \"\\n\"\r\n         if c == \"list\" and #al > 0 then\r\n            local ts = splitdot(previous)\r\n            table.remove(ts, 1)\r\n            local s = table.concat(ts, \"_\")\r\n            if #s > 0 then s = s..\"_\" end\r\n            pH = pH..'<p class=\"listoffun\">\\n'\r\n            for j, fun in ipairs(al) do\r\n               pH = pH..'<a href=\"#'..s..fun..'\">'..fun..'</a>\\n'\r\n            end\r\n            pH = pH..\"</p>\\n\\n\"\r\n\t\t\t\tlocal cc = level == 2 and ' id =\"'..c..'\"' or \"\"\r\n   \t\t\tcart[#cart+1] = '\\n<h'..level..cc..'>'..Ca..'</h'..level..'>\\n'\r\n            cart[#cart+1] = pH\r\n            cart[#cart+1] = \"\\n\"\r\n         end\r\n         if c == \"description\" and #al > 0 then\r\n           table.sort(al)\r\n   \t\t  cart[#cart+1] = '\\n<h'..level..\r\n                           ' id = \"description\">Description of functions</h'..\r\n                           level..'>\\n\\n'\r\n           local level1 = level+1\r\n           for i, a in ipairs(al) do\r\n              local pre = previous == \"\" and a or previous..\".\"..a \r\n              local ts = splitdot(pre)\r\n              table.remove(ts, 1)\r\n              local s = table.concat(ts, \"_\")\r\n     \t        cart[#cart+1] = '<h'..level1..' id=\"'..s..\r\n                              '\">'..pre..'</h'..level1..'>\\n'\r\n          \t  local d = gn[a]\r\n              if d then inside(d, level1+1, pre) end\r\n           end\r\n         end\r\n         if d then\r\n\t\t\t\tlocal cc = level == 2 and ' id =\"'..c..'\"' or \"\"\r\n\t\t\t\t--local cc = ' id =\"'..c..'\"'\r\n   \t\t\tcart[#cart+1] = '\\n<h'..level..cc..'>'..Ca..'</h'..level..'>\\n'\r\n            cart[#cart+1] = pH..markdown(d)\r\n            cart[#cart+1] = \"\\n\"\r\n         end\r\n      end\r\n   \r\n   end\r\n\r\n   cart[#cart+1] = '<div id=\"content\">\\n'\r\n   cart[#cart+1] = \"<h1>Module \"..name..\"</h1>\\n\"\r\n\r\n   inside(gn, 2, name)\r\n\r\n   cart[#cart+1] = '</div>\\n'\r\n\r\n   -- printing\r\n   local s = table.concat(cart, \"\\n\")\r\n\r\n\r\n   local head = [[<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\r\n<head>\r\n   <meta http-equiv=\"content-type\" content=\"text/html; charset=]]..CHARSET..[[\" />\r\n   <title>%s</title>]]\r\n   local head1 = \"\\n</head> <body>\\n\"\r\n\r\n   local foot = \"\\n</body></html>\\n\"\r\n   \r\n   fprintf(f, head, \"Module \"..name)\r\n\r\n   -- embeding CSS file\r\n\r\n   printcss(f, \"default.css\")\r\n\r\n   f:write(head1)\r\n   f:write(s)\r\n   f:write(foot)\r\n   \r\n   f:close()\r\nend",
    "type": "function"
  }, {
    "id": 135,
    "text": "if type(name) ~= \"string\" then\r\n      io.stderr:write(\"A name of a module must be given\\n\")\r\n      return\r\n   end",
    "type": "statement:if"
  }, {
    "id": 136,
    "text": "io.stderr:write(\"A name of a module must be given\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "if name == \"\" then name = basis end",
    "type": "statement:if"
  }, {
    "id": 138,
    "text": "name = basis",
    "type": "statement:assign"
  }, {
    "id": 139,
    "text": "if _G[name] == nil then\r\n      io.stderr:write(\"Module \"..name..\" not found\\n\")\r\n      return\r\n   end",
    "type": "statement:if"
  }, {
    "id": 140,
    "text": "io.stderr:write(\"Module \"..name..\" not found\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "local gn = _G[name]",
    "type": "statement:localassign"
  }, {
    "id": 142,
    "text": "if gn._H == nil then\r\n      io.stderr:write(\"Module \"..name..\" has no help information\\n\")\r\n      return\r\n   end",
    "type": "statement:if"
  }, {
    "id": 143,
    "text": "io.stderr:write(\"Module \"..name..\" has no help information\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "name = gn._H._Name",
    "type": "statement:assign"
  }, {
    "id": 145,
    "text": "local CHARSET = gn._H._CHARSET",
    "type": "statement:localassign"
  }, {
    "id": 146,
    "text": "filename = filename or name",
    "type": "statement:assign"
  }, {
    "id": 147,
    "text": "if type(filename) ~= \"string\" then\r\n      io.stderr:write(\"A filename for output must be given\\n\")\r\n      return\r\n   end",
    "type": "statement:if"
  }, {
    "id": 148,
    "text": "io.stderr:write(\"A filename for output must be given\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 149,
    "text": "if filename:sub(-5) ~= \".html\" and filename:sub(-4) ~= \".htm\" then\r\n      filename = filename..\".html\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 150,
    "text": "filename = filename..\".html\"",
    "type": "statement:assign"
  }, {
    "id": 151,
    "text": "local f = io.open(filename, \"w\")",
    "type": "statement:localassign"
  }, {
    "id": 152,
    "text": "if f == nil then\r\n      io.stderr:write('\"'..filename..' cannot be created\\n')\r\n      return\r\n   end",
    "type": "statement:if"
  }, {
    "id": 153,
    "text": "io.stderr:write('\"'..filename..' cannot be created\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 154,
    "text": "local md, markdown = pcall(require, \"markdown\")",
    "type": "statement:localassign"
  }, {
    "id": 155,
    "text": "if not md then\r\n      io.stderr:write(\"Markdown not found. No conversion is applied\\n\")\r\n      markdown = function (s) return s end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 156,
    "text": "io.stderr:write(\"Markdown not found. No conversion is applied\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 157,
    "text": "markdown = function (s) return s end",
    "type": "statement:assign"
  }, {
    "id": 158,
    "text": "local cart = {}",
    "type": "statement:localassign"
  }, {
    "id": 159,
    "text": "gn = gn._H",
    "type": "statement:assign"
  }, {
    "id": 160,
    "text": "local function pref (s)\r\n      return '<a href=\"#'..s..'\">'..s..'</a>'\r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 161,
    "text": "local function listfun (gn)\r\n      -- prepare an alphabetical list of (sub)functions\r\n      local al = {}\r\n      for a in pairs(gn) do\r\n   \t\tif a:sub(1,1) ~= \"_\" then al[#al+1] = {name = a} end\r\n      end\r\n      if #al > 0 then \r\n         table.sort(al, function (a, b) return a.name < b.name end)\r\n      end\r\n      for i, a in ipairs(al) do\r\n    \t\tlocal d = gn[a.name]\r\n         if d then\r\n            local b = listfun(d)\r\n            if #b > 0 then al[i][1] = b end\r\n         end\r\n      end\r\n   \treturn al\r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 162,
    "text": "for a in pairs(gn) do\r\n   \t\tif a:sub(1,1) ~= \"_\" then al[#al+1] = {name = a} end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 163,
    "text": "if a:sub(1,1) ~= \"_\" then al[#al+1] = {name = a} end",
    "type": "statement:if"
  }, {
    "id": 164,
    "text": "al[#al+1] = {name = a}",
    "type": "statement:assign"
  }, {
    "id": 165,
    "text": "if #al > 0 then \r\n         table.sort(al, function (a, b) return a.name < b.name end)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 166,
    "text": "table.sort(al, function (a, b) return a.name < b.name end)",
    "type": "statement:functioncall"
  }, {
    "id": 167,
    "text": "for i, a in ipairs(al) do\r\n    \t\tlocal d = gn[a.name]\r\n         if d then\r\n            local b = listfun(d)\r\n            if #b > 0 then al[i][1] = b end\r\n         end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 168,
    "text": "local d = gn[a.name]",
    "type": "statement:localassign"
  }, {
    "id": 169,
    "text": "if d then\r\n            local b = listfun(d)\r\n            if #b > 0 then al[i][1] = b end\r\n         end",
    "type": "statement:if"
  }, {
    "id": 170,
    "text": "local b = listfun(d)",
    "type": "statement:localassign"
  }, {
    "id": 171,
    "text": "if #b > 0 then al[i][1] = b end",
    "type": "statement:if"
  }, {
    "id": 172,
    "text": "al[i][1] = b",
    "type": "statement:assign"
  }, {
    "id": 173,
    "text": "local allfun = listfun(gn)",
    "type": "statement:localassign"
  }, {
    "id": 174,
    "text": "local function showlist (allfun, prev)\r\n\t\tlocal cart = \"\"\r\n\t\tfor i, a in ipairs(allfun) do\r\n         local pr = prev == \"\" and \"\" or prev..\"_\"\r\n\t\t\tcart = cart..'<li>'..'<a href=\"#'..pr..a.name..'\">'..a.name..'</a>'\r\n         if #a > 0 then\r\n            cart = cart..\"\\n<ul>\"..showlist(a[1], a.name)..\"\\n</ul>\"\r\n         end\r\n         cart = cart..'</li>\\n'\r\n      end\r\n      return cart\r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 175,
    "text": "local cart = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 176,
    "text": "for i, a in ipairs(allfun) do\r\n         local pr = prev == \"\" and \"\" or prev..\"_\"\r\n\t\t\tcart = cart..'<li>'..'<a href=\"#'..pr..a.name..'\">'..a.name..'</a>'\r\n         if #a > 0 then\r\n            cart = cart..\"\\n<ul>\"..showlist(a[1], a.name)..\"\\n</ul>\"\r\n         end\r\n         cart = cart..'</li>\\n'\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 177,
    "text": "local pr = prev == \"\" and \"\" or prev..\"_\"",
    "type": "statement:localassign"
  }, {
    "id": 178,
    "text": "cart = cart..'<li>'..'<a href=\"#'..pr..a.name..'\">'..a.name..'</a>'",
    "type": "statement:assign"
  }, {
    "id": 179,
    "text": "if #a > 0 then\r\n            cart = cart..\"\\n<ul>\"..showlist(a[1], a.name)..\"\\n</ul>\"\r\n         end",
    "type": "statement:if"
  }, {
    "id": 180,
    "text": "cart = cart..\"\\n<ul>\"..showlist(a[1], a.name)..\"\\n</ul>\"",
    "type": "statement:assign"
  }, {
    "id": 181,
    "text": "cart = cart..'</li>\\n'",
    "type": "statement:assign"
  }, {
    "id": 182,
    "text": "local function navigate (gn, level, allfun)\r\n     \t-- check in order _-beginning fields\r\n      for i, c in ipairs(cases) do\r\n   \t\tlocal d = gn[\"_\"..c]\r\n         local Ca = Cases[i]\r\n       \tif cases[i] == \"usage\" then\r\n            Ca = Ca..(level == 2 and \"the module\" or \"function\")\r\n         end\r\n         if d or c == \"list\" then\r\n   \t\t\tcart[#cart+1] = \"<li>\"..'<a href=\"#'..c..'\">'..Ca..\"</a></li>\\n\"\r\n         end\r\n         if c == \"description\" then \r\n   \t\t   if #allfun > 0 then\r\n      \t\t\tcart[#cart+1] = \"<li>\"..'<a href=\"#'..c..'\">'..Ca..\"</a>\\n\"\r\n   \t\t\t\tcart[#cart+1] = '<ul>\\n'\r\n   \t\t\t\tcart[#cart+1] = showlist(allfun, \"\")\r\n   \t\t\t\tcart[#cart+1] = '</ul></li>\\n'\r\n     \t\t\tend\r\n      \tend\r\n      end\r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 183,
    "text": "for i, c in ipairs(cases) do\r\n   \t\tlocal d = gn[\"_\"..c]\r\n         local Ca = Cases[i]\r\n       \tif cases[i] == \"usage\" then\r\n            Ca = Ca..(level == 2 and \"the module\" or \"function\")\r\n         end\r\n         if d or c == \"list\" then\r\n   \t\t\tcart[#cart+1] = \"<li>\"..'<a href=\"#'..c..'\">'..Ca..\"</a></li>\\n\"\r\n         end\r\n         if c == \"description\" then \r\n   \t\t   if #allfun > 0 then\r\n      \t\t\tcart[#cart+1] = \"<li>\"..'<a href=\"#'..c..'\">'..Ca..\"</a>\\n\"\r\n   \t\t\t\tcart[#cart+1] = '<ul>\\n'\r\n   \t\t\t\tcart[#cart+1] = showlist(allfun, \"\")\r\n   \t\t\t\tcart[#cart+1] = '</ul></li>\\n'\r\n     \t\t\tend\r\n      \tend\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 184,
    "text": "local d = gn[\"_\"..c]",
    "type": "statement:localassign"
  }, {
    "id": 185,
    "text": "local Ca = Cases[i]",
    "type": "statement:localassign"
  }, {
    "id": 186,
    "text": "if cases[i] == \"usage\" then\r\n            Ca = Ca..(level == 2 and \"the module\" or \"function\")\r\n         end",
    "type": "statement:if"
  }, {
    "id": 187,
    "text": "Ca = Ca..(level == 2 and \"the module\" or \"function\")",
    "type": "statement:assign"
  }, {
    "id": 188,
    "text": "if d or c == \"list\" then\r\n   \t\t\tcart[#cart+1] = \"<li>\"..'<a href=\"#'..c..'\">'..Ca..\"</a></li>\\n\"\r\n         end",
    "type": "statement:if"
  }, {
    "id": 189,
    "text": "cart[#cart+1] = \"<li>\"..'<a href=\"#'..c..'\">'..Ca..\"</a></li>\\n\"",
    "type": "statement:assign"
  }, {
    "id": 190,
    "text": "if c == \"description\" then \r\n   \t\t   if #allfun > 0 then\r\n      \t\t\tcart[#cart+1] = \"<li>\"..'<a href=\"#'..c..'\">'..Ca..\"</a>\\n\"\r\n   \t\t\t\tcart[#cart+1] = '<ul>\\n'\r\n   \t\t\t\tcart[#cart+1] = showlist(allfun, \"\")\r\n   \t\t\t\tcart[#cart+1] = '</ul></li>\\n'\r\n     \t\t\tend\r\n      \tend",
    "type": "statement:if"
  }, {
    "id": 191,
    "text": "if #allfun > 0 then\r\n      \t\t\tcart[#cart+1] = \"<li>\"..'<a href=\"#'..c..'\">'..Ca..\"</a>\\n\"\r\n   \t\t\t\tcart[#cart+1] = '<ul>\\n'\r\n   \t\t\t\tcart[#cart+1] = showlist(allfun, \"\")\r\n   \t\t\t\tcart[#cart+1] = '</ul></li>\\n'\r\n     \t\t\tend",
    "type": "statement:if"
  }, {
    "id": 192,
    "text": "cart[#cart+1] = \"<li>\"..'<a href=\"#'..c..'\">'..Ca..\"</a>\\n\"",
    "type": "statement:assign"
  }, {
    "id": 193,
    "text": "cart[#cart+1] = '<ul>\\n'",
    "type": "statement:assign"
  }, {
    "id": 194,
    "text": "cart[#cart+1] = showlist(allfun, \"\")",
    "type": "statement:assign"
  }, {
    "id": 195,
    "text": "cart[#cart+1] = '</ul></li>\\n'",
    "type": "statement:assign"
  }, {
    "id": 196,
    "text": "cart[#cart+1] = '<div class=\"noprint\" id=\"navigate\">\\n'",
    "type": "statement:assign"
  }, {
    "id": 197,
    "text": "cart[#cart+1] = '<h1>Module <code>'..name..'</code></h1>\\n\\n'",
    "type": "statement:assign"
  }, {
    "id": 198,
    "text": "navigate(gn, 2, allfun)",
    "type": "statement:functioncall"
  }, {
    "id": 199,
    "text": "cart[#cart+1] = '</ul></div>\\n'",
    "type": "statement:assign"
  }, {
    "id": 200,
    "text": "local function inside (gn, level, previous)\r\n      -- prepare an alphabetical list of (sub)functions\r\n      local al = {}\r\n      for a in pairs(gn) do\r\n   \t\tif a:sub(1,1) ~= \"_\" then al[#al+1] = a end\r\n      end\r\n      if #al > 0 then table.sort(al) end\r\n   \r\n     \t-- check in order _-beginning fields\r\n      for i, c in ipairs(cases) do\r\n   \t\tlocal d = gn[\"_\"..c]\r\n         local Ca = Cases[i]\r\n       \tif cases[i] == \"usage\" then\r\n            Ca = Ca..(level == 2 and \"the module\" or \"function\")\r\n         end\r\n         local pH = \"\\n\"\r\n         if c == \"list\" and #al > 0 then\r\n            local ts = splitdot(previous)\r\n            table.remove(ts, 1)\r\n            local s = table.concat(ts, \"_\")\r\n            if #s > 0 then s = s..\"_\" end\r\n            pH = pH..'<p class=\"listoffun\">\\n'\r\n            for j, fun in ipairs(al) do\r\n               pH = pH..'<a href=\"#'..s..fun..'\">'..fun..'</a>\\n'\r\n            end\r\n            pH = pH..\"</p>\\n\\n\"\r\n\t\t\t\tlocal cc = level == 2 and ' id =\"'..c..'\"' or \"\"\r\n   \t\t\tcart[#cart+1] = '\\n<h'..level..cc..'>'..Ca..'</h'..level..'>\\n'\r\n            cart[#cart+1] = pH\r\n            cart[#cart+1] = \"\\n\"\r\n         end\r\n         if c == \"description\" and #al > 0 then\r\n           table.sort(al)\r\n   \t\t  cart[#cart+1] = '\\n<h'..level..\r\n                           ' id = \"description\">Description of functions</h'..\r\n                           level..'>\\n\\n'\r\n           local level1 = level+1\r\n           for i, a in ipairs(al) do\r\n              local pre = previous == \"\" and a or previous..\".\"..a \r\n              local ts = splitdot(pre)\r\n              table.remove(ts, 1)\r\n              local s = table.concat(ts, \"_\")\r\n     \t        cart[#cart+1] = '<h'..level1..' id=\"'..s..\r\n                              '\">'..pre..'</h'..level1..'>\\n'\r\n          \t  local d = gn[a]\r\n              if d then inside(d, level1+1, pre) end\r\n           end\r\n         end\r\n         if d then\r\n\t\t\t\tlocal cc = level == 2 and ' id =\"'..c..'\"' or \"\"\r\n\t\t\t\t--local cc = ' id =\"'..c..'\"'\r\n   \t\t\tcart[#cart+1] = '\\n<h'..level..cc..'>'..Ca..'</h'..level..'>\\n'\r\n            cart[#cart+1] = pH..markdown(d)\r\n            cart[#cart+1] = \"\\n\"\r\n         end\r\n      end\r\n   \r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 201,
    "text": "for a in pairs(gn) do\r\n   \t\tif a:sub(1,1) ~= \"_\" then al[#al+1] = a end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 202,
    "text": "if #al > 0 then table.sort(al) end",
    "type": "statement:if"
  }, {
    "id": 203,
    "text": "for i, c in ipairs(cases) do\r\n   \t\tlocal d = gn[\"_\"..c]\r\n         local Ca = Cases[i]\r\n       \tif cases[i] == \"usage\" then\r\n            Ca = Ca..(level == 2 and \"the module\" or \"function\")\r\n         end\r\n         local pH = \"\\n\"\r\n         if c == \"list\" and #al > 0 then\r\n            local ts = splitdot(previous)\r\n            table.remove(ts, 1)\r\n            local s = table.concat(ts, \"_\")\r\n            if #s > 0 then s = s..\"_\" end\r\n            pH = pH..'<p class=\"listoffun\">\\n'\r\n            for j, fun in ipairs(al) do\r\n               pH = pH..'<a href=\"#'..s..fun..'\">'..fun..'</a>\\n'\r\n            end\r\n            pH = pH..\"</p>\\n\\n\"\r\n\t\t\t\tlocal cc = level == 2 and ' id =\"'..c..'\"' or \"\"\r\n   \t\t\tcart[#cart+1] = '\\n<h'..level..cc..'>'..Ca..'</h'..level..'>\\n'\r\n            cart[#cart+1] = pH\r\n            cart[#cart+1] = \"\\n\"\r\n         end\r\n         if c == \"description\" and #al > 0 then\r\n           table.sort(al)\r\n   \t\t  cart[#cart+1] = '\\n<h'..level..\r\n                           ' id = \"description\">Description of functions</h'..\r\n                           level..'>\\n\\n'\r\n           local level1 = level+1\r\n           for i, a in ipairs(al) do\r\n              local pre = previous == \"\" and a or previous..\".\"..a \r\n              local ts = splitdot(pre)\r\n              table.remove(ts, 1)\r\n              local s = table.concat(ts, \"_\")\r\n     \t        cart[#cart+1] = '<h'..level1..' id=\"'..s..\r\n                              '\">'..pre..'</h'..level1..'>\\n'\r\n          \t  local d = gn[a]\r\n              if d then inside(d, level1+1, pre) end\r\n           end\r\n         end\r\n         if d then\r\n\t\t\t\tlocal cc = level == 2 and ' id =\"'..c..'\"' or \"\"\r\n\t\t\t\t--local cc = ' id =\"'..c..'\"'\r\n   \t\t\tcart[#cart+1] = '\\n<h'..level..cc..'>'..Ca..'</h'..level..'>\\n'\r\n            cart[#cart+1] = pH..markdown(d)\r\n            cart[#cart+1] = \"\\n\"\r\n         end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 204,
    "text": "local pH = \"\\n\"",
    "type": "statement:localassign"
  }, {
    "id": 205,
    "text": "if c == \"list\" and #al > 0 then\r\n            local ts = splitdot(previous)\r\n            table.remove(ts, 1)\r\n            local s = table.concat(ts, \"_\")\r\n            if #s > 0 then s = s..\"_\" end\r\n            pH = pH..'<p class=\"listoffun\">\\n'\r\n            for j, fun in ipairs(al) do\r\n               pH = pH..'<a href=\"#'..s..fun..'\">'..fun..'</a>\\n'\r\n            end\r\n            pH = pH..\"</p>\\n\\n\"\r\n\t\t\t\tlocal cc = level == 2 and ' id =\"'..c..'\"' or \"\"\r\n   \t\t\tcart[#cart+1] = '\\n<h'..level..cc..'>'..Ca..'</h'..level..'>\\n'\r\n            cart[#cart+1] = pH\r\n            cart[#cart+1] = \"\\n\"\r\n         end",
    "type": "statement:if"
  }, {
    "id": 206,
    "text": "local ts = splitdot(previous)",
    "type": "statement:localassign"
  }, {
    "id": 207,
    "text": "table.remove(ts, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 208,
    "text": "local s = table.concat(ts, \"_\")",
    "type": "statement:localassign"
  }, {
    "id": 209,
    "text": "if #s > 0 then s = s..\"_\" end",
    "type": "statement:if"
  }, {
    "id": 210,
    "text": "s = s..\"_\"",
    "type": "statement:assign"
  }, {
    "id": 211,
    "text": "pH = pH..'<p class=\"listoffun\">\\n'",
    "type": "statement:assign"
  }, {
    "id": 212,
    "text": "for j, fun in ipairs(al) do\r\n               pH = pH..'<a href=\"#'..s..fun..'\">'..fun..'</a>\\n'\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 213,
    "text": "pH = pH..'<a href=\"#'..s..fun..'\">'..fun..'</a>\\n'",
    "type": "statement:assign"
  }, {
    "id": 214,
    "text": "pH = pH..\"</p>\\n\\n\"",
    "type": "statement:assign"
  }, {
    "id": 215,
    "text": "local cc = level == 2 and ' id =\"'..c..'\"' or \"\"",
    "type": "statement:localassign"
  }, {
    "id": 216,
    "text": "cart[#cart+1] = '\\n<h'..level..cc..'>'..Ca..'</h'..level..'>\\n'",
    "type": "statement:assign"
  }, {
    "id": 217,
    "text": "cart[#cart+1] = pH",
    "type": "statement:assign"
  }, {
    "id": 218,
    "text": "cart[#cart+1] = \"\\n\"",
    "type": "statement:assign"
  }, {
    "id": 219,
    "text": "if c == \"description\" and #al > 0 then\r\n           table.sort(al)\r\n   \t\t  cart[#cart+1] = '\\n<h'..level..\r\n                           ' id = \"description\">Description of functions</h'..\r\n                           level..'>\\n\\n'\r\n           local level1 = level+1\r\n           for i, a in ipairs(al) do\r\n              local pre = previous == \"\" and a or previous..\".\"..a \r\n              local ts = splitdot(pre)\r\n              table.remove(ts, 1)\r\n              local s = table.concat(ts, \"_\")\r\n     \t        cart[#cart+1] = '<h'..level1..' id=\"'..s..\r\n                              '\">'..pre..'</h'..level1..'>\\n'\r\n          \t  local d = gn[a]\r\n              if d then inside(d, level1+1, pre) end\r\n           end\r\n         end",
    "type": "statement:if"
  }, {
    "id": 220,
    "text": "cart[#cart+1] = '\\n<h'..level..\r\n                           ' id = \"description\">Description of functions</h'..\r\n                           level..'>\\n\\n'",
    "type": "statement:assign"
  }, {
    "id": 221,
    "text": "local level1 = level+1",
    "type": "statement:localassign"
  }, {
    "id": 222,
    "text": "for i, a in ipairs(al) do\r\n              local pre = previous == \"\" and a or previous..\".\"..a \r\n              local ts = splitdot(pre)\r\n              table.remove(ts, 1)\r\n              local s = table.concat(ts, \"_\")\r\n     \t        cart[#cart+1] = '<h'..level1..' id=\"'..s..\r\n                              '\">'..pre..'</h'..level1..'>\\n'\r\n          \t  local d = gn[a]\r\n              if d then inside(d, level1+1, pre) end\r\n           end",
    "type": "statement:genericfor"
  }, {
    "id": 223,
    "text": "local pre = previous == \"\" and a or previous..\".\"..a",
    "type": "statement:localassign"
  }, {
    "id": 224,
    "text": "local ts = splitdot(pre)",
    "type": "statement:localassign"
  }, {
    "id": 225,
    "text": "cart[#cart+1] = '<h'..level1..' id=\"'..s..\r\n                              '\">'..pre..'</h'..level1..'>\\n'",
    "type": "statement:assign"
  }, {
    "id": 226,
    "text": "local d = gn[a]",
    "type": "statement:localassign"
  }, {
    "id": 227,
    "text": "if d then inside(d, level1+1, pre) end",
    "type": "statement:if"
  }, {
    "id": 228,
    "text": "inside(d, level1+1, pre)",
    "type": "statement:functioncall"
  }, {
    "id": 229,
    "text": "if d then\r\n\t\t\t\tlocal cc = level == 2 and ' id =\"'..c..'\"' or \"\"\r\n\t\t\t\t--local cc = ' id =\"'..c..'\"'\r\n   \t\t\tcart[#cart+1] = '\\n<h'..level..cc..'>'..Ca..'</h'..level..'>\\n'\r\n            cart[#cart+1] = pH..markdown(d)\r\n            cart[#cart+1] = \"\\n\"\r\n         end",
    "type": "statement:if"
  }, {
    "id": 230,
    "text": "cart[#cart+1] = pH..markdown(d)",
    "type": "statement:assign"
  }, {
    "id": 231,
    "text": "cart[#cart+1] = '<div id=\"content\">\\n'",
    "type": "statement:assign"
  }, {
    "id": 232,
    "text": "cart[#cart+1] = \"<h1>Module \"..name..\"</h1>\\n\"",
    "type": "statement:assign"
  }, {
    "id": 233,
    "text": "inside(gn, 2, name)",
    "type": "statement:functioncall"
  }, {
    "id": 234,
    "text": "cart[#cart+1] = '</div>\\n'",
    "type": "statement:assign"
  }, {
    "id": 235,
    "text": "local s = table.concat(cart, \"\\n\")",
    "type": "statement:localassign"
  }, {
    "id": 236,
    "text": "local head = [[<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\r\n<head>\r\n   <meta http-equiv=\"content-type\" content=\"text/html; charset=]]..CHARSET..[[\" />\r\n   <title>%s</title>]]",
    "type": "statement:localassign"
  }, {
    "id": 237,
    "text": "local head1 = \"\\n</head> <body>\\n\"",
    "type": "statement:localassign"
  }, {
    "id": 238,
    "text": "local foot = \"\\n</body></html>\\n\"",
    "type": "statement:localassign"
  }, {
    "id": 239,
    "text": "fprintf(f, head, \"Module \"..name)",
    "type": "statement:functioncall"
  }, {
    "id": 240,
    "text": "printcss(f, \"default.css\")",
    "type": "statement:functioncall"
  }, {
    "id": 241,
    "text": "f:write(head1)",
    "type": "statement:functioncall"
  }, {
    "id": 242,
    "text": "f:write(s)",
    "type": "statement:functioncall"
  }, {
    "id": 243,
    "text": "f:write(foot)",
    "type": "statement:functioncall"
  }, {
    "id": 244,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 245,
    "text": "function (s) return s end",
    "type": "function"
  }, {
    "id": 246,
    "text": "local function pref (s)\r\n      return '<a href=\"#'..s..'\">'..s..'</a>'\r\n   end",
    "type": "function"
  }, {
    "id": 247,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 248,
    "text": "local function listfun (gn)\r\n      -- prepare an alphabetical list of (sub)functions\r\n      local al = {}\r\n      for a in pairs(gn) do\r\n   \t\tif a:sub(1,1) ~= \"_\" then al[#al+1] = {name = a} end\r\n      end\r\n      if #al > 0 then \r\n         table.sort(al, function (a, b) return a.name < b.name end)\r\n      end\r\n      for i, a in ipairs(al) do\r\n    \t\tlocal d = gn[a.name]\r\n         if d then\r\n            local b = listfun(d)\r\n            if #b > 0 then al[i][1] = b end\r\n         end\r\n      end\r\n   \treturn al\r\n   end",
    "type": "function"
  }, {
    "id": 249,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 250,
    "text": "local function showlist (allfun, prev)\r\n\t\tlocal cart = \"\"\r\n\t\tfor i, a in ipairs(allfun) do\r\n         local pr = prev == \"\" and \"\" or prev..\"_\"\r\n\t\t\tcart = cart..'<li>'..'<a href=\"#'..pr..a.name..'\">'..a.name..'</a>'\r\n         if #a > 0 then\r\n            cart = cart..\"\\n<ul>\"..showlist(a[1], a.name)..\"\\n</ul>\"\r\n         end\r\n         cart = cart..'</li>\\n'\r\n      end\r\n      return cart\r\n   end",
    "type": "function"
  }, {
    "id": 251,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 252,
    "text": "local function navigate (gn, level, allfun)\r\n     \t-- check in order _-beginning fields\r\n      for i, c in ipairs(cases) do\r\n   \t\tlocal d = gn[\"_\"..c]\r\n         local Ca = Cases[i]\r\n       \tif cases[i] == \"usage\" then\r\n            Ca = Ca..(level == 2 and \"the module\" or \"function\")\r\n         end\r\n         if d or c == \"list\" then\r\n   \t\t\tcart[#cart+1] = \"<li>\"..'<a href=\"#'..c..'\">'..Ca..\"</a></li>\\n\"\r\n         end\r\n         if c == \"description\" then \r\n   \t\t   if #allfun > 0 then\r\n      \t\t\tcart[#cart+1] = \"<li>\"..'<a href=\"#'..c..'\">'..Ca..\"</a>\\n\"\r\n   \t\t\t\tcart[#cart+1] = '<ul>\\n'\r\n   \t\t\t\tcart[#cart+1] = showlist(allfun, \"\")\r\n   \t\t\t\tcart[#cart+1] = '</ul></li>\\n'\r\n     \t\t\tend\r\n      \tend\r\n      end\r\n   end",
    "type": "function"
  }, {
    "id": 253,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 254,
    "text": "local function inside (gn, level, previous)\r\n      -- prepare an alphabetical list of (sub)functions\r\n      local al = {}\r\n      for a in pairs(gn) do\r\n   \t\tif a:sub(1,1) ~= \"_\" then al[#al+1] = a end\r\n      end\r\n      if #al > 0 then table.sort(al) end\r\n   \r\n     \t-- check in order _-beginning fields\r\n      for i, c in ipairs(cases) do\r\n   \t\tlocal d = gn[\"_\"..c]\r\n         local Ca = Cases[i]\r\n       \tif cases[i] == \"usage\" then\r\n            Ca = Ca..(level == 2 and \"the module\" or \"function\")\r\n         end\r\n         local pH = \"\\n\"\r\n         if c == \"list\" and #al > 0 then\r\n            local ts = splitdot(previous)\r\n            table.remove(ts, 1)\r\n            local s = table.concat(ts, \"_\")\r\n            if #s > 0 then s = s..\"_\" end\r\n            pH = pH..'<p class=\"listoffun\">\\n'\r\n            for j, fun in ipairs(al) do\r\n               pH = pH..'<a href=\"#'..s..fun..'\">'..fun..'</a>\\n'\r\n            end\r\n            pH = pH..\"</p>\\n\\n\"\r\n\t\t\t\tlocal cc = level == 2 and ' id =\"'..c..'\"' or \"\"\r\n   \t\t\tcart[#cart+1] = '\\n<h'..level..cc..'>'..Ca..'</h'..level..'>\\n'\r\n            cart[#cart+1] = pH\r\n            cart[#cart+1] = \"\\n\"\r\n         end\r\n         if c == \"description\" and #al > 0 then\r\n           table.sort(al)\r\n   \t\t  cart[#cart+1] = '\\n<h'..level..\r\n                           ' id = \"description\">Description of functions</h'..\r\n                           level..'>\\n\\n'\r\n           local level1 = level+1\r\n           for i, a in ipairs(al) do\r\n              local pre = previous == \"\" and a or previous..\".\"..a \r\n              local ts = splitdot(pre)\r\n              table.remove(ts, 1)\r\n              local s = table.concat(ts, \"_\")\r\n     \t        cart[#cart+1] = '<h'..level1..' id=\"'..s..\r\n                              '\">'..pre..'</h'..level1..'>\\n'\r\n          \t  local d = gn[a]\r\n              if d then inside(d, level1+1, pre) end\r\n           end\r\n         end\r\n         if d then\r\n\t\t\t\tlocal cc = level == 2 and ' id =\"'..c..'\"' or \"\"\r\n\t\t\t\t--local cc = ' id =\"'..c..'\"'\r\n   \t\t\tcart[#cart+1] = '\\n<h'..level..cc..'>'..Ca..'</h'..level..'>\\n'\r\n            cart[#cart+1] = pH..markdown(d)\r\n            cart[#cart+1] = \"\\n\"\r\n         end\r\n      end\r\n   \r\n   end",
    "type": "function"
  }, {
    "id": 255,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 256,
    "text": "function (t, s, ...)\r\n   if s == nil then\r\n      about(nil)\r\n   elseif type(s) == \"string\" then\r\n      about(s)\r\n   else\r\n      return t[s](...)\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 257,
    "text": "if s == nil then\r\n      about(nil)\r\n   elseif type(s) == \"string\" then\r\n      about(s)\r\n   else\r\n      return t[s](...)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 258,
    "text": "about(nil)",
    "type": "statement:functioncall"
  }, {
    "id": 259,
    "text": "about(s)",
    "type": "statement:functioncall"
  }, {
    "id": 260,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 261,
    "text": "function (c1, c2)\r\n         c1 = byte(c1) - 192\r\n         c2 = byte(c2) - 128\r\n         return char(c1 * 64 + c2)\r\n       end",
    "type": "function"
  }, {
    "id": 262,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 263,
    "text": "function (c)\r\n         local b = c:byte()\r\n         return b < 192 and \"\\194\"..c or \"\\195\"..char(b-64)\r\n       end",
    "type": "function"
  }, {
    "id": 264,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 265,
    "text": "function (w1, w2) spath, info = w1, w2 end",
    "type": "function"
  }, {
    "id": 266,
    "text": "function (w, d) t[#t+1] = w end",
    "type": "function"
  }, {
    "id": 267,
    "text": "function (a, b) return a.name < b.name end",
    "type": "function"
  }, {
    "id": 268,
    "text": "",
    "type": "function container"
  }, {
    "id": 269,
    "text": "format",
    "type": "global function"
  }, {
    "id": 270,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 271,
    "text": "open",
    "type": "global function"
  }, {
    "id": 272,
    "text": "error",
    "type": "global function"
  }, {
    "id": 273,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 274,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 275,
    "text": "setlocale",
    "type": "global function"
  }, {
    "id": 276,
    "text": "t[s]",
    "type": "global function"
  }, {
    "id": 277,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 278,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 279,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 280,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 281,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 282,
    "text": "module",
    "type": "global function"
  }, {
    "id": 283,
    "text": "byte",
    "type": "global function"
  }, {
    "id": 284,
    "text": "type",
    "type": "global function"
  }, {
    "id": 285,
    "text": "char",
    "type": "global function"
  }, {
    "id": 286,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 287,
    "text": "",
    "type": "variable container"
  }, {
    "id": 288,
    "text": "",
    "type": "require container"
  }, {
    "id": 289,
    "text": "",
    "type": "local variable"
  }, {
    "id": 290,
    "text": "",
    "type": "symbol"
  }, {
    "id": 291,
    "text": "",
    "type": "local variable"
  }, {
    "id": 292,
    "text": "",
    "type": "n/a"
  }, {
    "id": 293,
    "text": "",
    "type": "local variable"
  }, {
    "id": 294,
    "text": "",
    "type": "n/a"
  }, {
    "id": 295,
    "text": "",
    "type": "local variable"
  }, {
    "id": 296,
    "text": "",
    "type": "n/a"
  }, {
    "id": 297,
    "text": "",
    "type": "local variable"
  }, {
    "id": 298,
    "text": "",
    "type": "n/a"
  }, {
    "id": 299,
    "text": "",
    "type": "local variable"
  }, {
    "id": 300,
    "text": "",
    "type": "n/a"
  }, {
    "id": 301,
    "text": "",
    "type": "local variable"
  }, {
    "id": 302,
    "text": "",
    "type": "n/a"
  }, {
    "id": 303,
    "text": "",
    "type": "local variable"
  }, {
    "id": 304,
    "text": "",
    "type": "n/a"
  }, {
    "id": 305,
    "text": "",
    "type": "local variable"
  }, {
    "id": 306,
    "text": "",
    "type": "n/a"
  }, {
    "id": 307,
    "text": "",
    "type": "local variable"
  }, {
    "id": 308,
    "text": "",
    "type": "n/a"
  }, {
    "id": 309,
    "text": "",
    "type": "local variable"
  }, {
    "id": 310,
    "text": "",
    "type": "n/a"
  }, {
    "id": 311,
    "text": "",
    "type": "local variable"
  }, {
    "id": 312,
    "text": "",
    "type": "n/a"
  }, {
    "id": 313,
    "text": "",
    "type": "local variable"
  }, {
    "id": 314,
    "text": "",
    "type": "n/a"
  }, {
    "id": 315,
    "text": "",
    "type": "local variable"
  }, {
    "id": 316,
    "text": "",
    "type": "n/a"
  }, {
    "id": 317,
    "text": "",
    "type": "local variable"
  }, {
    "id": 318,
    "text": "",
    "type": "n/a"
  }, {
    "id": 319,
    "text": "",
    "type": "local variable"
  }, {
    "id": 320,
    "text": "",
    "type": "n/a"
  }, {
    "id": 321,
    "text": "",
    "type": "local variable"
  }, {
    "id": 322,
    "text": "",
    "type": "n/a"
  }, {
    "id": 323,
    "text": "",
    "type": "local variable"
  }, {
    "id": 324,
    "text": "",
    "type": "n/a"
  }, {
    "id": 325,
    "text": "",
    "type": "local variable"
  }, {
    "id": 326,
    "text": "",
    "type": "n/a"
  }, {
    "id": 327,
    "text": "",
    "type": "local variable"
  }, {
    "id": 328,
    "text": "",
    "type": "n/a"
  }, {
    "id": 329,
    "text": "",
    "type": "local variable"
  }, {
    "id": 330,
    "text": "",
    "type": "n/a"
  }, {
    "id": 331,
    "text": "",
    "type": "local variable"
  }, {
    "id": 332,
    "text": "",
    "type": "string"
  }, {
    "id": 333,
    "text": "",
    "type": "local variable"
  }, {
    "id": 334,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 335,
    "text": "",
    "type": "string"
  }, {
    "id": 336,
    "text": "",
    "type": "string"
  }, {
    "id": 337,
    "text": "",
    "type": "string"
  }, {
    "id": 338,
    "text": "",
    "type": "string"
  }, {
    "id": 339,
    "text": "",
    "type": "string"
  }, {
    "id": 340,
    "text": "",
    "type": "string"
  }, {
    "id": 341,
    "text": "",
    "type": "string"
  }, {
    "id": 342,
    "text": "",
    "type": "string"
  }, {
    "id": 343,
    "text": "",
    "type": "string"
  }, {
    "id": 344,
    "text": "",
    "type": "local variable"
  }, {
    "id": 345,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 346,
    "text": "",
    "type": "string"
  }, {
    "id": 347,
    "text": "",
    "type": "string"
  }, {
    "id": 348,
    "text": "",
    "type": "string"
  }, {
    "id": 349,
    "text": "",
    "type": "string"
  }, {
    "id": 350,
    "text": "",
    "type": "string"
  }, {
    "id": 351,
    "text": "",
    "type": "string"
  }, {
    "id": 352,
    "text": "",
    "type": "string"
  }, {
    "id": 353,
    "text": "",
    "type": "string"
  }, {
    "id": 354,
    "text": "",
    "type": "string"
  }, {
    "id": 355,
    "text": "",
    "type": "local variable"
  }, {
    "id": 356,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 357,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 358,
    "text": "",
    "type": "number"
  }, {
    "id": 359,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 360,
    "text": "",
    "type": "number"
  }, {
    "id": 361,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 362,
    "text": "",
    "type": "number"
  }, {
    "id": 363,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 364,
    "text": "",
    "type": "number"
  }, {
    "id": 365,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 366,
    "text": "",
    "type": "number"
  }, {
    "id": 367,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 368,
    "text": "",
    "type": "number"
  }, {
    "id": 369,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 370,
    "text": "",
    "type": "number"
  }, {
    "id": 371,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 372,
    "text": "",
    "type": "number"
  }, {
    "id": 373,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 374,
    "text": "",
    "type": "number"
  }, {
    "id": 375,
    "text": "",
    "type": "local variable"
  }, {
    "id": 376,
    "text": "",
    "type": "n/a"
  }, {
    "id": 377,
    "text": "",
    "type": "global variable"
  }, {
    "id": 378,
    "text": "",
    "type": "n/a"
  }, {
    "id": 379,
    "text": "",
    "type": "global variable"
  }, {
    "id": 380,
    "text": "",
    "type": "n/a"
  }, {
    "id": 381,
    "text": "",
    "type": "global variable"
  }, {
    "id": 382,
    "text": "",
    "type": "n/a"
  }, {
    "id": 383,
    "text": "",
    "type": "global variable"
  }, {
    "id": 384,
    "text": "",
    "type": "n/a"
  }, {
    "id": 385,
    "text": "",
    "type": "global variable"
  }, {
    "id": 386,
    "text": "",
    "type": "n/a"
  } ]
}