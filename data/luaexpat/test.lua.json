{
  "_filename": "test.lua",
  "_isShebang": true,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/luaexpat/tests/test.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 3
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 7
  }, {
    "from": 10,
    "label": "has",
    "to": 8
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 3
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 16
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 24,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "calls",
    "to": 32
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 34
  }, {
    "from": 30,
    "label": "calls",
    "to": 34
  }, {
    "from": 30,
    "label": "calls",
    "to": 34
  }, {
    "from": 30,
    "label": "calls",
    "to": 34
  }, {
    "from": 30,
    "label": "calls",
    "to": 34
  }, {
    "from": 30,
    "label": "calls",
    "to": 34
  }, {
    "from": 30,
    "label": "calls",
    "to": 34
  }, {
    "from": 30,
    "label": "calls",
    "to": 34
  }, {
    "from": 30,
    "label": "calls",
    "to": 34
  }, {
    "from": 30,
    "label": "calls",
    "to": 34
  }, {
    "from": 30,
    "label": "calls",
    "to": 34
  }, {
    "from": 30,
    "label": "calls",
    "to": 35
  }, {
    "from": 30,
    "label": "calls",
    "to": 36
  }, {
    "from": 30,
    "label": "calls",
    "to": 37
  }, {
    "from": 30,
    "label": "calls",
    "to": 37
  }, {
    "from": 30,
    "label": "calls",
    "to": 37
  }, {
    "from": 30,
    "label": "calls",
    "to": 37
  }, {
    "from": 30,
    "label": "calls",
    "to": 37
  }, {
    "from": 30,
    "label": "calls",
    "to": 37
  }, {
    "from": 6,
    "label": "calls",
    "to": 38
  }, {
    "from": 6,
    "label": "calls",
    "to": 38
  }, {
    "from": 30,
    "label": "calls",
    "to": 39
  }, {
    "from": 30,
    "label": "calls",
    "to": 39
  }, {
    "from": 30,
    "label": "calls",
    "to": 39
  }, {
    "from": 30,
    "label": "calls",
    "to": 39
  }, {
    "from": 30,
    "label": "calls",
    "to": 39
  }, {
    "from": 30,
    "label": "calls",
    "to": 39
  }, {
    "from": 30,
    "label": "calls",
    "to": 39
  }, {
    "from": 30,
    "label": "calls",
    "to": 39
  }, {
    "from": 30,
    "label": "calls",
    "to": 39
  }, {
    "from": 30,
    "label": "calls",
    "to": 39
  }, {
    "from": 30,
    "label": "calls",
    "to": 39
  }, {
    "from": 30,
    "label": "calls",
    "to": 39
  }, {
    "from": 30,
    "label": "calls",
    "to": 39
  }, {
    "from": 30,
    "label": "calls",
    "to": 39
  }, {
    "from": 30,
    "label": "calls",
    "to": 42
  }, {
    "from": 30,
    "label": "calls",
    "to": 41
  }, {
    "from": 30,
    "label": "calls",
    "to": 41
  }, {
    "from": 30,
    "label": "calls",
    "to": 41
  }, {
    "from": 30,
    "label": "calls",
    "to": 2
  }, {
    "from": 30,
    "label": "calls",
    "to": 2
  }, {
    "from": 30,
    "label": "calls",
    "to": 43
  }, {
    "from": 30,
    "label": "calls",
    "to": 43
  }, {
    "from": 30,
    "label": "calls",
    "to": 43
  }, {
    "from": 30,
    "label": "calls",
    "to": 43
  }, {
    "from": 30,
    "label": "calls",
    "to": 43
  }, {
    "from": 30,
    "label": "calls",
    "to": 43
  }, {
    "from": 30,
    "label": "calls",
    "to": 31
  }, {
    "from": 30,
    "label": "calls",
    "to": 31
  }, {
    "from": 30,
    "label": "calls",
    "to": 31
  }, {
    "from": 30,
    "label": "calls",
    "to": 31
  }, {
    "from": 30,
    "label": "calls",
    "to": 31
  }, {
    "from": 30,
    "label": "calls",
    "to": 31
  }, {
    "from": 30,
    "label": "calls",
    "to": 31
  }, {
    "from": 30,
    "label": "calls",
    "to": 31
  }, {
    "from": 30,
    "label": "calls",
    "to": 31
  }, {
    "from": 30,
    "label": "calls",
    "to": 31
  }, {
    "from": 30,
    "label": "calls",
    "to": 31
  }, {
    "from": 30,
    "label": "calls",
    "to": 31
  }, {
    "from": 30,
    "label": "calls",
    "to": 31
  }, {
    "from": 30,
    "label": "calls",
    "to": 31
  }, {
    "from": 30,
    "label": "calls",
    "to": 31
  }, {
    "from": 30,
    "label": "calls",
    "to": 31
  }, {
    "from": 30,
    "label": "calls",
    "to": 31
  }, {
    "from": 30,
    "label": "calls",
    "to": 31
  }, {
    "from": 30,
    "label": "calls",
    "to": 31
  }, {
    "from": 30,
    "label": "calls",
    "to": 44
  }, {
    "from": 30,
    "label": "calls",
    "to": 45
  }, {
    "from": 30,
    "label": "calls",
    "to": 6
  }, {
    "from": 30,
    "label": "calls",
    "to": 6
  }, {
    "from": 30,
    "label": "calls",
    "to": 6
  }, {
    "from": 30,
    "label": "calls",
    "to": 6
  }, {
    "from": 30,
    "label": "calls",
    "to": 6
  }, {
    "from": 30,
    "label": "calls",
    "to": 6
  }, {
    "from": 30,
    "label": "calls",
    "to": 6
  }, {
    "from": 30,
    "label": "calls",
    "to": 6
  }, {
    "from": 30,
    "label": "calls",
    "to": 6
  }, {
    "from": 30,
    "label": "calls",
    "to": 6
  }, {
    "from": 30,
    "label": "calls",
    "to": 6
  }, {
    "from": 30,
    "label": "calls",
    "to": 40
  }, {
    "from": 30,
    "label": "calls",
    "to": 40
  }, {
    "from": 30,
    "label": "calls",
    "to": 40
  }, {
    "from": 1,
    "label": "contains",
    "to": 30
  }, {
    "from": 30,
    "label": "declares",
    "to": 2
  }, {
    "from": 30,
    "label": "declares",
    "to": 4
  }, {
    "from": 30,
    "label": "declares",
    "to": 6
  }, {
    "from": 30,
    "label": "declares",
    "to": 10
  }, {
    "from": 30,
    "label": "declares",
    "to": 12
  }, {
    "from": 30,
    "label": "declares",
    "to": 15
  }, {
    "from": 30,
    "label": "declares",
    "to": 17
  }, {
    "from": 30,
    "label": "declares",
    "to": 18
  }, {
    "from": 30,
    "label": "declares",
    "to": 21
  }, {
    "from": 30,
    "label": "declares",
    "to": 24
  }, {
    "from": 1,
    "label": "contains",
    "to": 46
  }, {
    "from": 1,
    "label": "contains",
    "to": 47
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "test",
    "type": "module"
  }, {
    "id": 2,
    "text": "function () return collectgarbage\"count\" end",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "function getargs (...) X = arg end",
    "type": "function"
  }, {
    "id": 5,
    "text": "X = arg",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "function xgetargs (c)\r\n\t  return function (...)\r\n\t    table.insert(arg, 1, c)\r\n\t    table.insert(X, arg)\r\n\t  end\r\n\tend",
    "type": "function"
  }, {
    "id": 7,
    "text": "table.insert(arg, 1, c)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "table.insert(X, arg)",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function (...)\r\n\t    table.insert(arg, 1, c)\r\n\t    table.insert(X, arg)\r\n\t  end",
    "type": "function"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function (p, context, base, systemID, publicId)\r\n    assert(base == \"/base\")\r\n    return context:parse(entities[systemID])\r\n  end",
    "type": "function"
  }, {
    "id": 13,
    "text": "assert(base == \"/base\")",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function (p, s) t = t .. s end",
    "type": "function"
  }, {
    "id": 16,
    "text": "t = t .. s",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "function (p, s) t = t .. s end",
    "type": "function"
  }, {
    "id": 18,
    "text": "function (p, name, base, systemId, publicId)\r\n    assert(name == \"TXT\" and systemId == \"txt\" and base == \"/base\")\r\n  end",
    "type": "function"
  }, {
    "id": 19,
    "text": "assert(name == \"TXT\" and systemId == \"txt\" and base == \"/base\")",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function (p)\r\n  X = {p:pos()}\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "X = {p:pos()}",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function (parser, name, attr)\r\n\t\tif name == \"stop\" then\r\n\t\t\tparser:stop()\r\n\t\t\tstopped = true\r\n\t\telse\r\n\t\t\tstopped = false\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 25,
    "text": "if name == \"stop\" then\r\n\t\t\tparser:stop()\r\n\t\t\tstopped = true\r\n\t\telse\r\n\t\t\tstopped = false\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "parser:stop()",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "stopped = true",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "stopped = false",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "",
    "type": "function container"
  }, {
    "id": 31,
    "text": "new",
    "type": "global function"
  }, {
    "id": 32,
    "text": "abs",
    "type": "global function"
  }, {
    "id": 33,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 34,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 35,
    "text": "loadlib",
    "type": "global function"
  }, {
    "id": 36,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 37,
    "text": "collectgarbage",
    "type": "global function"
  }, {
    "id": 38,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 39,
    "text": "print",
    "type": "global function"
  }, {
    "id": 40,
    "text": "find",
    "type": "global function"
  }, {
    "id": 41,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 42,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 43,
    "text": "getn",
    "type": "global function"
  }, {
    "id": 44,
    "text": "type",
    "type": "global function"
  }, {
    "id": 45,
    "text": "require",
    "type": "global function"
  }, {
    "id": 46,
    "text": "",
    "type": "variable container"
  }, {
    "id": 47,
    "text": "",
    "type": "require container"
  } ]
}