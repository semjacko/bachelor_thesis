{
  "_filename": "record.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luanativeobjects/record.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 5,
    "label": "has",
    "to": 11
  }, {
    "from": 5,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 21,
    "label": "has",
    "to": 26
  }, {
    "from": 21,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 21,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 19
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 19
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 37,
    "label": "has",
    "to": 19
  }, {
    "from": 37,
    "label": "has",
    "to": 41
  }, {
    "from": 37,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 37,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 19
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 47,
    "label": "has",
    "to": 19
  }, {
    "from": 47,
    "label": "has",
    "to": 19
  }, {
    "from": 47,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 53,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 53,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 53,
    "label": "has",
    "to": 60
  }, {
    "from": 53,
    "label": "has",
    "to": 61
  }, {
    "from": 53,
    "label": "has",
    "to": 62
  }, {
    "from": 53,
    "label": "has",
    "to": 63
  }, {
    "from": 53,
    "label": "has",
    "to": 64
  }, {
    "from": 53,
    "label": "has",
    "to": 65
  }, {
    "from": 53,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 43
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 53,
    "label": "has",
    "to": 70
  }, {
    "from": 53,
    "label": "has",
    "to": 71
  }, {
    "from": 53,
    "label": "has",
    "to": 72
  }, {
    "from": 53,
    "label": "has",
    "to": 19
  }, {
    "from": 53,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 76,
    "label": "has",
    "to": 19
  }, {
    "from": 76,
    "label": "has",
    "to": 19
  }, {
    "from": 74,
    "label": "has",
    "to": 81
  }, {
    "from": 74,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 19
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 82,
    "label": "has",
    "to": 41
  }, {
    "from": 82,
    "label": "has",
    "to": 86
  }, {
    "from": 82,
    "label": "has",
    "to": 87
  }, {
    "from": 82,
    "label": "has",
    "to": 88
  }, {
    "from": 82,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 82,
    "label": "has",
    "to": 91
  }, {
    "from": 82,
    "label": "has",
    "to": 92
  }, {
    "from": 74,
    "label": "has",
    "to": 19
  }, {
    "from": 74,
    "label": "has",
    "to": 93
  }, {
    "from": 94,
    "label": "has",
    "to": 77
  }, {
    "from": 94,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 94,
    "label": "has",
    "to": 19
  }, {
    "from": 94,
    "label": "has",
    "to": 19
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 96,
    "label": "has",
    "to": 19
  }, {
    "from": 96,
    "label": "has",
    "to": 100
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 101,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 103,
    "label": "has",
    "to": 106
  }, {
    "from": 101,
    "label": "has",
    "to": 107
  }, {
    "from": 101,
    "label": "has",
    "to": 108
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 110,
    "label": "has",
    "to": 102
  }, {
    "from": 110,
    "label": "has",
    "to": 112
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 109,
    "label": "has",
    "to": 114
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 116,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 118,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 120,
    "label": "has",
    "to": 122
  }, {
    "from": 120,
    "label": "has",
    "to": 123
  }, {
    "from": 115,
    "label": "has",
    "to": 124
  }, {
    "from": 115,
    "label": "has",
    "to": 125
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 126,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 130,
    "label": "has",
    "to": 19
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 130,
    "label": "has",
    "to": 19
  }, {
    "from": 129,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 132,
    "label": "has",
    "to": 19
  }, {
    "from": 126,
    "label": "has",
    "to": 134
  }, {
    "from": 135,
    "label": "has",
    "to": 19
  }, {
    "from": 135,
    "label": "has",
    "to": 131
  }, {
    "from": 135,
    "label": "has",
    "to": 19
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 137,
    "label": "has",
    "to": 133
  }, {
    "from": 137,
    "label": "has",
    "to": 19
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 139,
    "label": "has",
    "to": 141
  }, {
    "from": 139,
    "label": "has",
    "to": 19
  }, {
    "from": 139,
    "label": "has",
    "to": 142
  }, {
    "from": 143,
    "label": "has",
    "to": 140
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 143,
    "label": "has",
    "to": 145
  }, {
    "from": 143,
    "label": "has",
    "to": 146
  }, {
    "from": 143,
    "label": "has",
    "to": 147
  }, {
    "from": 143,
    "label": "has",
    "to": 6
  }, {
    "from": 143,
    "label": "has",
    "to": 148
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 148,
    "label": "has",
    "to": 150
  }, {
    "from": 148,
    "label": "has",
    "to": 151
  }, {
    "from": 148,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 148,
    "label": "has",
    "to": 154
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 148,
    "label": "has",
    "to": 156
  }, {
    "from": 148,
    "label": "has",
    "to": 157
  }, {
    "from": 148,
    "label": "has",
    "to": 158
  }, {
    "from": 158,
    "label": "has",
    "to": 159
  }, {
    "from": 143,
    "label": "has",
    "to": 160
  }, {
    "from": 143,
    "label": "has",
    "to": 161
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 143,
    "label": "has",
    "to": 163
  }, {
    "from": 143,
    "label": "has",
    "to": 164
  }, {
    "from": 143,
    "label": "has",
    "to": 165
  }, {
    "from": 143,
    "label": "has",
    "to": 19
  }, {
    "from": 143,
    "label": "has",
    "to": 19
  }, {
    "from": 143,
    "label": "has",
    "to": 166
  }, {
    "from": 167,
    "label": "has",
    "to": 19
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 167,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 167,
    "label": "has",
    "to": 171
  }, {
    "from": 167,
    "label": "has",
    "to": 172
  }, {
    "from": 167,
    "label": "has",
    "to": 173
  }, {
    "from": 173,
    "label": "has",
    "to": 174
  }, {
    "from": 167,
    "label": "has",
    "to": 175
  }, {
    "from": 167,
    "label": "has",
    "to": 176
  }, {
    "from": 167,
    "label": "has",
    "to": 19
  }, {
    "from": 167,
    "label": "has",
    "to": 177
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 178,
    "label": "has",
    "to": 19
  }, {
    "from": 178,
    "label": "has",
    "to": 180
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 181,
    "label": "has",
    "to": 183
  }, {
    "from": 181,
    "label": "has",
    "to": 184
  }, {
    "from": 181,
    "label": "has",
    "to": 185
  }, {
    "from": 186,
    "label": "has",
    "to": 187
  }, {
    "from": 186,
    "label": "has",
    "to": 188
  }, {
    "from": 186,
    "label": "has",
    "to": 189
  }, {
    "from": 186,
    "label": "has",
    "to": 19
  }, {
    "from": 186,
    "label": "has",
    "to": 190
  }, {
    "from": 191,
    "label": "has",
    "to": 192
  }, {
    "from": 191,
    "label": "has",
    "to": 193
  }, {
    "from": 191,
    "label": "has",
    "to": 194
  }, {
    "from": 194,
    "label": "has",
    "to": 195
  }, {
    "from": 194,
    "label": "has",
    "to": 196
  }, {
    "from": 194,
    "label": "has",
    "to": 197
  }, {
    "from": 191,
    "label": "has",
    "to": 19
  }, {
    "from": 191,
    "label": "has",
    "to": 198
  }, {
    "from": 199,
    "label": "has",
    "to": 200
  }, {
    "from": 200,
    "label": "has",
    "to": 201
  }, {
    "from": 200,
    "label": "has",
    "to": 202
  }, {
    "from": 199,
    "label": "has",
    "to": 19
  }, {
    "from": 199,
    "label": "has",
    "to": 203
  }, {
    "from": 199,
    "label": "has",
    "to": 204
  }, {
    "from": 204,
    "label": "has",
    "to": 205
  }, {
    "from": 204,
    "label": "has",
    "to": 206
  }, {
    "from": 199,
    "label": "has",
    "to": 207
  }, {
    "from": 199,
    "label": "has",
    "to": 208
  }, {
    "from": 209,
    "label": "has",
    "to": 210
  }, {
    "from": 210,
    "label": "has",
    "to": 211
  }, {
    "from": 210,
    "label": "has",
    "to": 212
  }, {
    "from": 212,
    "label": "has",
    "to": 213
  }, {
    "from": 210,
    "label": "has",
    "to": 214
  }, {
    "from": 209,
    "label": "has",
    "to": 19
  }, {
    "from": 209,
    "label": "has",
    "to": 215
  }, {
    "from": 216,
    "label": "has",
    "to": 192
  }, {
    "from": 216,
    "label": "has",
    "to": 193
  }, {
    "from": 216,
    "label": "has",
    "to": 217
  }, {
    "from": 216,
    "label": "has",
    "to": 218
  }, {
    "from": 218,
    "label": "has",
    "to": 195
  }, {
    "from": 218,
    "label": "has",
    "to": 219
  }, {
    "from": 218,
    "label": "has",
    "to": 220
  }, {
    "from": 220,
    "label": "has",
    "to": 221
  }, {
    "from": 218,
    "label": "has",
    "to": 222
  }, {
    "from": 222,
    "label": "has",
    "to": 223
  }, {
    "from": 216,
    "label": "has",
    "to": 19
  }, {
    "from": 216,
    "label": "has",
    "to": 224
  }, {
    "from": 225,
    "label": "has",
    "to": 226
  }, {
    "from": 225,
    "label": "has",
    "to": 227
  }, {
    "from": 227,
    "label": "has",
    "to": 195
  }, {
    "from": 227,
    "label": "has",
    "to": 228
  }, {
    "from": 225,
    "label": "has",
    "to": 229
  }, {
    "from": 230,
    "label": "has",
    "to": 231
  }, {
    "from": 230,
    "label": "has",
    "to": 232
  }, {
    "from": 232,
    "label": "has",
    "to": 233
  }, {
    "from": 230,
    "label": "has",
    "to": 19
  }, {
    "from": 230,
    "label": "has",
    "to": 234
  }, {
    "from": 235,
    "label": "has",
    "to": 236
  }, {
    "from": 235,
    "label": "has",
    "to": 237
  }, {
    "from": 235,
    "label": "has",
    "to": 238
  }, {
    "from": 235,
    "label": "has",
    "to": 239
  }, {
    "from": 235,
    "label": "has",
    "to": 240
  }, {
    "from": 241,
    "label": "has",
    "to": 242
  }, {
    "from": 241,
    "label": "has",
    "to": 243
  }, {
    "from": 244,
    "label": "has",
    "to": 245
  }, {
    "from": 244,
    "label": "has",
    "to": 246
  }, {
    "from": 244,
    "label": "has",
    "to": 247
  }, {
    "from": 244,
    "label": "has",
    "to": 248
  }, {
    "from": 244,
    "label": "has",
    "to": 249
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 250,
    "label": "has",
    "to": 252
  }, {
    "from": 252,
    "label": "has",
    "to": 253
  }, {
    "from": 253,
    "label": "has",
    "to": 254
  }, {
    "from": 250,
    "label": "has",
    "to": 255
  }, {
    "from": 255,
    "label": "has",
    "to": 256
  }, {
    "from": 250,
    "label": "has",
    "to": 257
  }, {
    "from": 250,
    "label": "has",
    "to": 258
  }, {
    "from": 259,
    "label": "has",
    "to": 260
  }, {
    "from": 259,
    "label": "has",
    "to": 261
  }, {
    "from": 261,
    "label": "has",
    "to": 262
  }, {
    "from": 261,
    "label": "has",
    "to": 263
  }, {
    "from": 259,
    "label": "has",
    "to": 264
  }, {
    "from": 265,
    "label": "has",
    "to": 266
  }, {
    "from": 265,
    "label": "has",
    "to": 267
  }, {
    "from": 268,
    "label": "has",
    "to": 269
  }, {
    "from": 269,
    "label": "has",
    "to": 270
  }, {
    "from": 269,
    "label": "has",
    "to": 271
  }, {
    "from": 268,
    "label": "has",
    "to": 19
  }, {
    "from": 268,
    "label": "has",
    "to": 272
  }, {
    "from": 273,
    "label": "has",
    "to": 274
  }, {
    "from": 274,
    "label": "has",
    "to": 270
  }, {
    "from": 274,
    "label": "has",
    "to": 275
  }, {
    "from": 275,
    "label": "has",
    "to": 276
  }, {
    "from": 273,
    "label": "has",
    "to": 19
  }, {
    "from": 273,
    "label": "has",
    "to": 277
  }, {
    "from": 278,
    "label": "has",
    "to": 279
  }, {
    "from": 279,
    "label": "has",
    "to": 270
  }, {
    "from": 279,
    "label": "has",
    "to": 280
  }, {
    "from": 280,
    "label": "has",
    "to": 281
  }, {
    "from": 280,
    "label": "has",
    "to": 282
  }, {
    "from": 278,
    "label": "has",
    "to": 19
  }, {
    "from": 278,
    "label": "has",
    "to": 283
  }, {
    "from": 284,
    "label": "has",
    "to": 285
  }, {
    "from": 285,
    "label": "has",
    "to": 286
  }, {
    "from": 284,
    "label": "has",
    "to": 287
  }, {
    "from": 287,
    "label": "has",
    "to": 270
  }, {
    "from": 287,
    "label": "has",
    "to": 288
  }, {
    "from": 288,
    "label": "has",
    "to": 289
  }, {
    "from": 288,
    "label": "has",
    "to": 290
  }, {
    "from": 288,
    "label": "has",
    "to": 282
  }, {
    "from": 284,
    "label": "has",
    "to": 291
  }, {
    "from": 284,
    "label": "has",
    "to": 292
  }, {
    "from": 293,
    "label": "has",
    "to": 294
  }, {
    "from": 293,
    "label": "has",
    "to": 295
  }, {
    "from": 295,
    "label": "has",
    "to": 296
  }, {
    "from": 293,
    "label": "has",
    "to": 297
  }, {
    "from": 293,
    "label": "has",
    "to": 298
  }, {
    "from": 298,
    "label": "has",
    "to": 299
  }, {
    "from": 298,
    "label": "has",
    "to": 300
  }, {
    "from": 300,
    "label": "has",
    "to": 301
  }, {
    "from": 300,
    "label": "has",
    "to": 302
  }, {
    "from": 300,
    "label": "has",
    "to": 303
  }, {
    "from": 293,
    "label": "has",
    "to": 304
  }, {
    "from": 293,
    "label": "has",
    "to": 305
  }, {
    "from": 293,
    "label": "has",
    "to": 19
  }, {
    "from": 293,
    "label": "has",
    "to": 306
  }, {
    "from": 307,
    "label": "has",
    "to": 308
  }, {
    "from": 308,
    "label": "has",
    "to": 309
  }, {
    "from": 307,
    "label": "has",
    "to": 310
  }, {
    "from": 310,
    "label": "has",
    "to": 311
  }, {
    "from": 307,
    "label": "has",
    "to": 19
  }, {
    "from": 307,
    "label": "has",
    "to": 312
  }, {
    "from": 307,
    "label": "has",
    "to": 313
  }, {
    "from": 313,
    "label": "has",
    "to": 314
  }, {
    "from": 307,
    "label": "has",
    "to": 315
  }, {
    "from": 316,
    "label": "has",
    "to": 317
  }, {
    "from": 316,
    "label": "has",
    "to": 318
  }, {
    "from": 318,
    "label": "has",
    "to": 319
  }, {
    "from": 316,
    "label": "has",
    "to": 320
  }, {
    "from": 320,
    "label": "has",
    "to": 321
  }, {
    "from": 320,
    "label": "has",
    "to": 322
  }, {
    "from": 322,
    "label": "has",
    "to": 323
  }, {
    "from": 322,
    "label": "has",
    "to": 324
  }, {
    "from": 322,
    "label": "has",
    "to": 325
  }, {
    "from": 316,
    "label": "has",
    "to": 326
  }, {
    "from": 326,
    "label": "has",
    "to": 327
  }, {
    "from": 316,
    "label": "has",
    "to": 19
  }, {
    "from": 316,
    "label": "has",
    "to": 328
  }, {
    "from": 329,
    "label": "has",
    "to": 321
  }, {
    "from": 329,
    "label": "has",
    "to": 330
  }, {
    "from": 329,
    "label": "has",
    "to": 19
  }, {
    "from": 329,
    "label": "has",
    "to": 331
  }, {
    "from": 329,
    "label": "has",
    "to": 332
  }, {
    "from": 329,
    "label": "has",
    "to": 333
  }, {
    "from": 334,
    "label": "has",
    "to": 83
  }, {
    "from": 334,
    "label": "has",
    "to": 19
  }, {
    "from": 334,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 334,
    "label": "has",
    "to": 41
  }, {
    "from": 334,
    "label": "has",
    "to": 86
  }, {
    "from": 334,
    "label": "has",
    "to": 87
  }, {
    "from": 334,
    "label": "has",
    "to": 88
  }, {
    "from": 334,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 334,
    "label": "has",
    "to": 91
  }, {
    "from": 334,
    "label": "has",
    "to": 92
  }, {
    "from": 334,
    "label": "has",
    "to": 335
  }, {
    "from": 336,
    "label": "has",
    "to": 131
  }, {
    "from": 336,
    "label": "has",
    "to": 19
  }, {
    "from": 336,
    "label": "has",
    "to": 337
  }, {
    "from": 338,
    "label": "has",
    "to": 339
  }, {
    "from": 338,
    "label": "has",
    "to": 340
  }, {
    "from": 338,
    "label": "has",
    "to": 341
  }, {
    "from": 342,
    "label": "has",
    "to": 168
  }, {
    "from": 342,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 342,
    "label": "has",
    "to": 171
  }, {
    "from": 342,
    "label": "has",
    "to": 172
  }, {
    "from": 342,
    "label": "has",
    "to": 173
  }, {
    "from": 173,
    "label": "has",
    "to": 174
  }, {
    "from": 342,
    "label": "has",
    "to": 175
  }, {
    "from": 342,
    "label": "has",
    "to": 176
  }, {
    "from": 342,
    "label": "has",
    "to": 19
  }, {
    "from": 342,
    "label": "has",
    "to": 343
  }, {
    "from": 344,
    "label": "has",
    "to": 345
  }, {
    "from": 346,
    "label": "calls",
    "to": 35
  }, {
    "from": 346,
    "label": "calls",
    "to": 35
  }, {
    "from": 37,
    "label": "calls",
    "to": 35
  }, {
    "from": 74,
    "label": "calls",
    "to": 35
  }, {
    "from": 115,
    "label": "calls",
    "to": 35
  }, {
    "from": 346,
    "label": "calls",
    "to": 361
  }, {
    "from": 167,
    "label": "calls",
    "to": 361
  }, {
    "from": 346,
    "label": "calls",
    "to": 347
  }, {
    "from": 346,
    "label": "calls",
    "to": 21
  }, {
    "from": 53,
    "label": "calls",
    "to": 21
  }, {
    "from": 346,
    "label": "calls",
    "to": 357
  }, {
    "from": 346,
    "label": "calls",
    "to": 357
  }, {
    "from": 346,
    "label": "calls",
    "to": 357
  }, {
    "from": 47,
    "label": "calls",
    "to": 47
  }, {
    "from": 53,
    "label": "calls",
    "to": 47
  }, {
    "from": 109,
    "label": "calls",
    "to": 96
  }, {
    "from": 346,
    "label": "calls",
    "to": 101
  }, {
    "from": 346,
    "label": "calls",
    "to": 101
  }, {
    "from": 126,
    "label": "calls",
    "to": 362
  }, {
    "from": 126,
    "label": "calls",
    "to": 53
  }, {
    "from": 126,
    "label": "calls",
    "to": 53
  }, {
    "from": 143,
    "label": "calls",
    "to": 53
  }, {
    "from": 178,
    "label": "calls",
    "to": 53
  }, {
    "from": 74,
    "label": "calls",
    "to": 94
  }, {
    "from": 74,
    "label": "calls",
    "to": 94
  }, {
    "from": 143,
    "label": "calls",
    "to": 359
  }, {
    "from": 5,
    "label": "calls",
    "to": 348
  }, {
    "from": 74,
    "label": "calls",
    "to": 348
  }, {
    "from": 346,
    "label": "calls",
    "to": 2
  }, {
    "from": 346,
    "label": "calls",
    "to": 2
  }, {
    "from": 346,
    "label": "calls",
    "to": 115
  }, {
    "from": 346,
    "label": "calls",
    "to": 349
  }, {
    "from": 74,
    "label": "calls",
    "to": 360
  }, {
    "from": 167,
    "label": "calls",
    "to": 143
  }, {
    "from": 74,
    "label": "calls",
    "to": 350
  }, {
    "from": 346,
    "label": "calls",
    "to": 33
  }, {
    "from": 346,
    "label": "calls",
    "to": 355
  }, {
    "from": 47,
    "label": "calls",
    "to": 351
  }, {
    "from": 143,
    "label": "calls",
    "to": 351
  }, {
    "from": 346,
    "label": "calls",
    "to": 363
  }, {
    "from": 346,
    "label": "calls",
    "to": 363
  }, {
    "from": 53,
    "label": "calls",
    "to": 363
  }, {
    "from": 74,
    "label": "calls",
    "to": 363
  }, {
    "from": 53,
    "label": "calls",
    "to": 37
  }, {
    "from": 47,
    "label": "calls",
    "to": 352
  }, {
    "from": 96,
    "label": "calls",
    "to": 74
  }, {
    "from": 167,
    "label": "calls",
    "to": 364
  }, {
    "from": 96,
    "label": "calls",
    "to": 353
  }, {
    "from": 346,
    "label": "calls",
    "to": 356
  }, {
    "from": 346,
    "label": "calls",
    "to": 356
  }, {
    "from": 47,
    "label": "calls",
    "to": 356
  }, {
    "from": 53,
    "label": "calls",
    "to": 356
  }, {
    "from": 53,
    "label": "calls",
    "to": 356
  }, {
    "from": 167,
    "label": "calls",
    "to": 356
  }, {
    "from": 35,
    "label": "calls",
    "to": 358
  }, {
    "from": 346,
    "label": "calls",
    "to": 365
  }, {
    "from": 346,
    "label": "calls",
    "to": 354
  }, {
    "from": 346,
    "label": "calls",
    "to": 354
  }, {
    "from": 346,
    "label": "calls",
    "to": 354
  }, {
    "from": 346,
    "label": "calls",
    "to": 354
  }, {
    "from": 346,
    "label": "calls",
    "to": 354
  }, {
    "from": 346,
    "label": "calls",
    "to": 354
  }, {
    "from": 346,
    "label": "calls",
    "to": 354
  }, {
    "from": 1,
    "label": "contains",
    "to": 346
  }, {
    "from": 346,
    "label": "declares",
    "to": 2
  }, {
    "from": 346,
    "label": "declares",
    "to": 5
  }, {
    "from": 346,
    "label": "declares",
    "to": 13
  }, {
    "from": 346,
    "label": "declares",
    "to": 16
  }, {
    "from": 346,
    "label": "declares",
    "to": 21
  }, {
    "from": 346,
    "label": "declares",
    "to": 30
  }, {
    "from": 346,
    "label": "declares",
    "to": 33
  }, {
    "from": 346,
    "label": "declares",
    "to": 35
  }, {
    "from": 346,
    "label": "declares",
    "to": 37
  }, {
    "from": 346,
    "label": "declares",
    "to": 47
  }, {
    "from": 346,
    "label": "declares",
    "to": 53
  }, {
    "from": 346,
    "label": "declares",
    "to": 74
  }, {
    "from": 346,
    "label": "declares",
    "to": 94
  }, {
    "from": 346,
    "label": "declares",
    "to": 96
  }, {
    "from": 346,
    "label": "declares",
    "to": 101
  }, {
    "from": 346,
    "label": "declares",
    "to": 109
  }, {
    "from": 346,
    "label": "declares",
    "to": 115
  }, {
    "from": 346,
    "label": "declares",
    "to": 126
  }, {
    "from": 346,
    "label": "declares",
    "to": 135
  }, {
    "from": 346,
    "label": "declares",
    "to": 137
  }, {
    "from": 346,
    "label": "declares",
    "to": 139
  }, {
    "from": 346,
    "label": "declares",
    "to": 143
  }, {
    "from": 346,
    "label": "declares",
    "to": 167
  }, {
    "from": 346,
    "label": "declares",
    "to": 178
  }, {
    "from": 346,
    "label": "declares",
    "to": 181
  }, {
    "from": 346,
    "label": "declares",
    "to": 186
  }, {
    "from": 346,
    "label": "declares",
    "to": 191
  }, {
    "from": 346,
    "label": "declares",
    "to": 199
  }, {
    "from": 346,
    "label": "declares",
    "to": 209
  }, {
    "from": 346,
    "label": "declares",
    "to": 216
  }, {
    "from": 346,
    "label": "declares",
    "to": 225
  }, {
    "from": 346,
    "label": "declares",
    "to": 230
  }, {
    "from": 346,
    "label": "declares",
    "to": 235
  }, {
    "from": 346,
    "label": "declares",
    "to": 241
  }, {
    "from": 346,
    "label": "declares",
    "to": 244
  }, {
    "from": 346,
    "label": "declares",
    "to": 250
  }, {
    "from": 346,
    "label": "declares",
    "to": 259
  }, {
    "from": 346,
    "label": "declares",
    "to": 265
  }, {
    "from": 346,
    "label": "declares",
    "to": 268
  }, {
    "from": 346,
    "label": "declares",
    "to": 273
  }, {
    "from": 346,
    "label": "declares",
    "to": 278
  }, {
    "from": 346,
    "label": "declares",
    "to": 284
  }, {
    "from": 346,
    "label": "declares",
    "to": 293
  }, {
    "from": 346,
    "label": "declares",
    "to": 307
  }, {
    "from": 346,
    "label": "declares",
    "to": 316
  }, {
    "from": 346,
    "label": "declares",
    "to": 329
  }, {
    "from": 346,
    "label": "declares",
    "to": 334
  }, {
    "from": 346,
    "label": "declares",
    "to": 336
  }, {
    "from": 346,
    "label": "declares",
    "to": 338
  }, {
    "from": 346,
    "label": "declares",
    "to": 342
  }, {
    "from": 346,
    "label": "declares",
    "to": 344
  }, {
    "from": 1,
    "label": "contains",
    "to": 366
  }, {
    "from": 1,
    "label": "contains",
    "to": 367
  }, {
    "from": 366,
    "label": "initializes",
    "to": 368
  }, {
    "from": 368,
    "label": "assigns",
    "to": 369
  }, {
    "from": 366,
    "label": "initializes",
    "to": 370
  }, {
    "from": 370,
    "label": "assigns",
    "to": 371
  }, {
    "from": 366,
    "label": "initializes",
    "to": 372
  }, {
    "from": 372,
    "label": "assigns",
    "to": 373
  }, {
    "from": 366,
    "label": "initializes",
    "to": 374
  }, {
    "from": 374,
    "label": "assigns",
    "to": 375
  }, {
    "from": 366,
    "label": "initializes",
    "to": 376
  }, {
    "from": 376,
    "label": "assigns",
    "to": 377
  }, {
    "from": 366,
    "label": "initializes",
    "to": 378
  }, {
    "from": 378,
    "label": "assigns",
    "to": 379
  }, {
    "from": 366,
    "label": "initializes",
    "to": 380
  }, {
    "from": 380,
    "label": "assigns",
    "to": 381
  }, {
    "from": 366,
    "label": "initializes",
    "to": 382
  }, {
    "from": 382,
    "label": "assigns",
    "to": 383
  }, {
    "from": 366,
    "label": "initializes",
    "to": 384
  }, {
    "from": 384,
    "label": "assigns",
    "to": 385
  }, {
    "from": 385,
    "label": "assigns",
    "to": 386
  }, {
    "from": 386,
    "label": "assigns",
    "to": 387
  }, {
    "from": 366,
    "label": "initializes",
    "to": 388
  }, {
    "from": 366,
    "label": "initializes",
    "to": 389
  }, {
    "from": 389,
    "label": "assigns",
    "to": 390
  }, {
    "from": 366,
    "label": "initializes",
    "to": 391
  }, {
    "from": 391,
    "label": "assigns",
    "to": 392
  }, {
    "from": 392,
    "label": "assigns",
    "to": 393
  }, {
    "from": 392,
    "label": "assigns",
    "to": 394
  }, {
    "from": 366,
    "label": "initializes",
    "to": 395
  }, {
    "from": 395,
    "label": "assigns",
    "to": 396
  }, {
    "from": 366,
    "label": "initializes",
    "to": 397
  }, {
    "from": 397,
    "label": "assigns",
    "to": 398
  }, {
    "from": 366,
    "label": "initializes",
    "to": 399
  }, {
    "from": 399,
    "label": "assigns",
    "to": 400
  }, {
    "from": 400,
    "label": "assigns",
    "to": 401
  }, {
    "from": 366,
    "label": "initializes",
    "to": 402
  }, {
    "from": 402,
    "label": "assigns",
    "to": 403
  }, {
    "from": 366,
    "label": "initializes",
    "to": 404
  }, {
    "from": 404,
    "label": "assigns",
    "to": 405
  }, {
    "from": 366,
    "label": "initializes",
    "to": 406
  }, {
    "from": 406,
    "label": "assigns",
    "to": 407
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "record",
    "type": "module"
  }, {
    "id": 2,
    "text": "function(dst,src) for _,v in pairs(src) do dst[#dst+1] = v end end",
    "type": "function"
  }, {
    "id": 3,
    "text": "for _,v in pairs(src) do dst[#dst+1] = v end",
    "type": "statement:genericfor"
  }, {
    "id": 4,
    "text": "dst[#dst+1] = v",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "function clear_all_records()\r\n\troot_records={}\r\n\trecord_type_groups={}\r\n\t-- run clear functions\r\n\tfor i=1,#clear_funcs do\r\n\t\tlocal func = clear_funcs[i]\r\n\t\tfunc()\r\n\tend\r\n\tglobal_scope={}\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "root_records={}",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "record_type_groups={}",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "for i=1,#clear_funcs do\r\n\t\tlocal func = clear_funcs[i]\r\n\t\tfunc()\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 9,
    "text": "local func = clear_funcs[i]",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "func()",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "global_scope={}",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function reg_clear_func(func)\r\n\tclear_funcs[#clear_funcs + 1] = func\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "clear_funcs[#clear_funcs + 1] = func",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function get_named_record(rec_type, name)\r\n\tlocal recs = record_type_groups[rec_type]\r\n\tif recs ~= nil then\r\n\t\treturn recs[name]\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "local recs = record_type_groups[rec_type]",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "if recs ~= nil then\r\n\t\treturn recs[name]\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "local function group_add_record(rec, rec_type)\r\n\t-- add this record to the list of records with the same type.\r\n\tlocal type_group = record_type_groups[rec_type]\r\n\tif type_group == nil then\r\n\t\ttype_group = {}\r\n\t\trecord_type_groups[rec_type] = type_group\r\n\tend\r\n\ttype_group[#type_group+1] = rec\r\n\tif name ~= nil then\r\n\t\ttype_group[name] = rec\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "local type_group = record_type_groups[rec_type]",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "if type_group == nil then\r\n\t\ttype_group = {}\r\n\t\trecord_type_groups[rec_type] = type_group\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "type_group = {}",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "record_type_groups[rec_type] = type_group",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "type_group[#type_group+1] = rec",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "if name ~= nil then\r\n\t\ttype_group[name] = rec\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "type_group[name] = rec",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function set_variable_format(format)\r\n\tvariable_format = format\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "variable_format = format",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function format_variable(name, idx)\r\n\treturn variable_format:format(name, idx)\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function is_record(rec)\r\n\t-- use a metatable to identify records\r\n\treturn (getmetatable(rec) == rec_meta and rec._rec_type ~= nil)\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "local function remove_child_records_from_roots(rec, seen)\r\n\t-- make sure we don't get in a reference loop.\r\n\tif seen == nil then seen = {} end\r\n\tif seen[rec] then return end\r\n\tseen[rec] = true\r\n\t-- remove from root list.\r\n\tfor i=1,#rec do\r\n\t\tlocal val = rec[i]\r\n\t\tif is_record(val) then\r\n\t\t\tval:make_sub_record(rec)\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "if seen == nil then seen = {} end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "seen = {}",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "if seen[rec] then return end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "seen[rec] = true",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "for i=1,#rec do\r\n\t\tlocal val = rec[i]\r\n\t\tif is_record(val) then\r\n\t\t\tval:make_sub_record(rec)\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 43,
    "text": "local val = rec[i]",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "if is_record(val) then\r\n\t\t\tval:make_sub_record(rec)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "val:make_sub_record(rec)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "local function end_record(rec)\r\n\tif type(rec) ~= 'function' then return rec end\r\n\r\n\tlocal rc, result = pcall(rec, nil)\r\n\tif not rc then\r\n\t\tprint(\"Error processing new record: \" .. result)\r\n\t\treturn rec\r\n\tend\r\n\treturn end_record(result)\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "if type(rec) ~= 'function' then return rec end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "local rc, result = pcall(rec, nil)",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "if not rc then\r\n\t\tprint(\"Error processing new record: \" .. result)\r\n\t\treturn rec\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "print(\"Error processing new record: \" .. result)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function make_record(rec, rec_type, name, scope)\r\n\tif rec == nil then rec = {} end\r\n\tif type(rec) ~= \"table\" then rec = { rec } end\r\n\t-- set record's name.\r\n\tif name == nil then name = rec_type end\r\n\trec.name = name\r\n\t-- record's symbol scope\r\n\trec.scope = scope\r\n\trec._symbol_map = {}\r\n\trec._imports = {}\r\n\r\n\t-- make \"rec\" into a record.\r\n\trec._rec_type = rec_type\r\n\tsetmetatable(rec, rec_meta)\r\n\r\n\t-- complete partial child records.\r\n\tfor i=1,#rec do\r\n\t\tlocal val = rec[i]\r\n\t\tif type(val) == 'function' then\r\n\t\t\tval = end_record(val)\r\n\t\t\trec[i] = val\r\n\t\tend\r\n\tend\r\n\r\n\t-- remove this record's child records from the root list.\r\n\tremove_child_records_from_roots(rec)\r\n\r\n\t-- add this record to the root list.\r\n\troot_records[#root_records + 1] = rec\r\n\r\n\tgroup_add_record(rec, rec_type)\r\n\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "if rec == nil then rec = {} end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "rec = {}",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "if type(rec) ~= \"table\" then rec = { rec } end",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "rec = { rec }",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "if name == nil then name = rec_type end",
    "type": "statement:if"
  }, {
    "id": 59,
    "text": "name = rec_type",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "rec.name = name",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "rec.scope = scope",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "rec._symbol_map = {}",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "rec._imports = {}",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "rec._rec_type = rec_type",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "setmetatable(rec, rec_meta)",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "for i=1,#rec do\r\n\t\tlocal val = rec[i]\r\n\t\tif type(val) == 'function' then\r\n\t\t\tval = end_record(val)\r\n\t\t\trec[i] = val\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 67,
    "text": "if type(val) == 'function' then\r\n\t\t\tval = end_record(val)\r\n\t\t\trec[i] = val\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "val = end_record(val)",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "rec[i] = val",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "remove_child_records_from_roots(rec)",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "root_records[#root_records + 1] = rec",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "group_add_record(rec, rec_type)",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "local function record_parser(callbacks, name)\r\n\tname = name or \"parse\"\r\n\tlocal function call_meth(self, rec_type, post, rec, parent)\r\n\t\tlocal func = self[rec_type .. post]\r\n\t\tif func == nil then\r\n\t\t\tfunc = self[\"unknown\" .. post]\r\n\t\t\tif func == nil then return end\r\n\t\tend\r\n\t\treturn func(self, rec, parent)\r\n\tend\r\n\tlocal seen={}\r\n\tcallbacks = setmetatable(callbacks, {\r\n\t__call = function(self, rec, parent)\r\n\t\t-- make sure it is a valid record.\r\n\t\tif not is_record(rec) or seen[rec] or rec._rec_type == \"ignore\" then return end\r\n\t\tif parent then\r\n\t\t\tparent:count_sub_record(rec) -- count sub-records.\r\n\t\tend\r\n\t\t-- keep track of records we have already processed\r\n\t\tseen[rec] = true\r\n\t\tlocal rec_type = rec._rec_type\r\n\t\t-- clear record's data output & sub-record counts.\r\n\t\trec:clear()\r\n\t\t-- start record.\r\n\t\tcall_meth(self, rec_type, \"\", rec, parent)\r\n\t\t-- transverse into sub-records\r\n\t\tfor _,v in ipairs(rec) do\r\n\t\t\tself(v, rec)\r\n\t\tend\r\n\t\t-- end record\r\n\t\tcall_meth(self, rec_type, \"_end\", rec, parent)\r\n\t\t-- update \"last_type\"\r\n\t\tself.last_type = rec_type\r\n\tend\r\n\t})\r\n\treturn callbacks\r\nend",
    "type": "function"
  }, {
    "id": 75,
    "text": "name = name or \"parse\"",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "local function call_meth(self, rec_type, post, rec, parent)\r\n\t\tlocal func = self[rec_type .. post]\r\n\t\tif func == nil then\r\n\t\t\tfunc = self[\"unknown\" .. post]\r\n\t\t\tif func == nil then return end\r\n\t\tend\r\n\t\treturn func(self, rec, parent)\r\n\tend",
    "type": "statement:localfunction"
  }, {
    "id": 77,
    "text": "local func = self[rec_type .. post]",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "if func == nil then\r\n\t\t\tfunc = self[\"unknown\" .. post]\r\n\t\t\tif func == nil then return end\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "func = self[\"unknown\" .. post]",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "if func == nil then return end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "local seen={}",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "callbacks = setmetatable(callbacks, {\r\n\t__call = function(self, rec, parent)\r\n\t\t-- make sure it is a valid record.\r\n\t\tif not is_record(rec) or seen[rec] or rec._rec_type == \"ignore\" then return end\r\n\t\tif parent then\r\n\t\t\tparent:count_sub_record(rec) -- count sub-records.\r\n\t\tend\r\n\t\t-- keep track of records we have already processed\r\n\t\tseen[rec] = true\r\n\t\tlocal rec_type = rec._rec_type\r\n\t\t-- clear record's data output & sub-record counts.\r\n\t\trec:clear()\r\n\t\t-- start record.\r\n\t\tcall_meth(self, rec_type, \"\", rec, parent)\r\n\t\t-- transverse into sub-records\r\n\t\tfor _,v in ipairs(rec) do\r\n\t\t\tself(v, rec)\r\n\t\tend\r\n\t\t-- end record\r\n\t\tcall_meth(self, rec_type, \"_end\", rec, parent)\r\n\t\t-- update \"last_type\"\r\n\t\tself.last_type = rec_type\r\n\tend\r\n\t})",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "if not is_record(rec) or seen[rec] or rec._rec_type == \"ignore\" then return end",
    "type": "statement:if"
  }, {
    "id": 84,
    "text": "if parent then\r\n\t\t\tparent:count_sub_record(rec) -- count sub-records.\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 85,
    "text": "parent:count_sub_record(rec)",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "local rec_type = rec._rec_type",
    "type": "statement:localassign"
  }, {
    "id": 87,
    "text": "rec:clear()",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "call_meth(self, rec_type, \"\", rec, parent)",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "for _,v in ipairs(rec) do\r\n\t\t\tself(v, rec)\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 90,
    "text": "self(v, rec)",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "call_meth(self, rec_type, \"_end\", rec, parent)",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "self.last_type = rec_type",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 94,
    "text": "local function call_meth(self, rec_type, post, rec, parent)\r\n\t\tlocal func = self[rec_type .. post]\r\n\t\tif func == nil then\r\n\t\t\tfunc = self[\"unknown\" .. post]\r\n\t\t\tif func == nil then return end\r\n\t\tend\r\n\t\treturn func(self, rec, parent)\r\n\tend",
    "type": "function"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "function process_records(parser)\r\n\trecord_parser(parser)\r\n\t-- process each root record\r\n\tfor i=1,#root_records do\r\n\t\tparser(root_records[i])\r\n\tend\r\n\treturn parser\r\nend",
    "type": "function"
  }, {
    "id": 97,
    "text": "record_parser(parser)",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "for i=1,#root_records do\r\n\t\tparser(root_records[i])\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 99,
    "text": "parser(root_records[i])",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 101,
    "text": "function reg_stage_parser(stage, parser)\r\n\tlocal parsers = stages[stage]\r\n\tif parsers == nil then\r\n\t\t-- new stage add it to the end of the stage list.\r\n\t\tstages[#stages + 1] = stage\r\n\t\tparsers = {}\r\n\t\tstages[stage] = parsers\r\n\tend\r\n\tparsers[#parsers + 1] = parser\r\nend",
    "type": "function"
  }, {
    "id": 102,
    "text": "local parsers = stages[stage]",
    "type": "statement:localassign"
  }, {
    "id": 103,
    "text": "if parsers == nil then\r\n\t\t-- new stage add it to the end of the stage list.\r\n\t\tstages[#stages + 1] = stage\r\n\t\tparsers = {}\r\n\t\tstages[stage] = parsers\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 104,
    "text": "stages[#stages + 1] = stage",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "parsers = {}",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "stages[stage] = parsers",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "parsers[#parsers + 1] = parser",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 109,
    "text": "function run_stage_parsers()\r\n\tfor i=1,#stages do\r\n\t\tlocal stage = stages[i]\r\n\t\tlocal parsers = stages[stage]\r\n\t\tfor x=1,#parsers do\r\n\t\t\tprocess_records(parsers[x])\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 110,
    "text": "for i=1,#stages do\r\n\t\tlocal stage = stages[i]\r\n\t\tlocal parsers = stages[stage]\r\n\t\tfor x=1,#parsers do\r\n\t\t\tprocess_records(parsers[x])\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 111,
    "text": "local stage = stages[i]",
    "type": "statement:localassign"
  }, {
    "id": 112,
    "text": "for x=1,#parsers do\r\n\t\t\tprocess_records(parsers[x])\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 113,
    "text": "process_records(parsers[x])",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 115,
    "text": "function move_recs(dst, src, idx)\r\n\t-- move records from \"rec\" to it's parent\r\n\tfor i=1,#src do\r\n\t\tlocal rec = src[i]\r\n\t\tif is_record(rec) and rec._rec_type ~= \"ignore\" then\r\n\t\t\tsrc:remove_record(rec) -- remove from src\r\n\t\t\tif idx then\r\n\t\t\t\tdst:insert_record(rec, idx) -- insert into dst\r\n\t\t\t\tidx = idx + 1\r\n\t\t\telse\r\n\t\t\t\tdst:add_record(rec) -- add to dst\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\t-- now delete this empty container record\r\n\tsrc:delete_record()\r\nend",
    "type": "function"
  }, {
    "id": 116,
    "text": "for i=1,#src do\r\n\t\tlocal rec = src[i]\r\n\t\tif is_record(rec) and rec._rec_type ~= \"ignore\" then\r\n\t\t\tsrc:remove_record(rec) -- remove from src\r\n\t\t\tif idx then\r\n\t\t\t\tdst:insert_record(rec, idx) -- insert into dst\r\n\t\t\t\tidx = idx + 1\r\n\t\t\telse\r\n\t\t\t\tdst:add_record(rec) -- add to dst\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 117,
    "text": "local rec = src[i]",
    "type": "statement:localassign"
  }, {
    "id": 118,
    "text": "if is_record(rec) and rec._rec_type ~= \"ignore\" then\r\n\t\t\tsrc:remove_record(rec) -- remove from src\r\n\t\t\tif idx then\r\n\t\t\t\tdst:insert_record(rec, idx) -- insert into dst\r\n\t\t\t\tidx = idx + 1\r\n\t\t\telse\r\n\t\t\t\tdst:add_record(rec) -- add to dst\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 119,
    "text": "src:remove_record(rec)",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "if idx then\r\n\t\t\t\tdst:insert_record(rec, idx) -- insert into dst\r\n\t\t\t\tidx = idx + 1\r\n\t\t\telse\r\n\t\t\t\tdst:add_record(rec) -- add to dst\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 121,
    "text": "dst:insert_record(rec, idx)",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "idx = idx + 1",
    "type": "statement:assign"
  }, {
    "id": 123,
    "text": "dst:add_record(rec)",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "src:delete_record()",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 126,
    "text": "function make_generic_rec_func(rec_type, no_name)\r\n\tif _G[rec_type] ~= nil then error(\"global already exists with that name: \" .. rec_type) end\r\n\tif not no_name then\r\n\t\t_G[rec_type] = function(name)\r\n\t\t\treturn function(rec)\r\n\t\t\t\trec = make_record(rec, rec_type, name)\r\n\t\t\t\treturn rec\r\n\t\t\tend\r\n\t\tend\r\n\telse\r\n\t\t_G[rec_type] = function(rec)\r\n\t\t\trec = make_record(rec, rec_type, rec_type)\r\n\t\t\treturn rec\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 127,
    "text": "if _G[rec_type] ~= nil then error(\"global already exists with that name: \" .. rec_type) end",
    "type": "statement:if"
  }, {
    "id": 128,
    "text": "error(\"global already exists with that name: \" .. rec_type)",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "if not no_name then\r\n\t\t_G[rec_type] = function(name)\r\n\t\t\treturn function(rec)\r\n\t\t\t\trec = make_record(rec, rec_type, name)\r\n\t\t\t\treturn rec\r\n\t\t\tend\r\n\t\tend\r\n\telse\r\n\t\t_G[rec_type] = function(rec)\r\n\t\t\trec = make_record(rec, rec_type, rec_type)\r\n\t\t\treturn rec\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 130,
    "text": "_G[rec_type] = function(name)\r\n\t\t\treturn function(rec)\r\n\t\t\t\trec = make_record(rec, rec_type, name)\r\n\t\t\t\treturn rec\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:assign"
  }, {
    "id": 131,
    "text": "rec = make_record(rec, rec_type, name)",
    "type": "statement:assign"
  }, {
    "id": 132,
    "text": "_G[rec_type] = function(rec)\r\n\t\t\trec = make_record(rec, rec_type, rec_type)\r\n\t\t\treturn rec\r\n\t\tend",
    "type": "statement:assign"
  }, {
    "id": 133,
    "text": "rec = make_record(rec, rec_type, rec_type)",
    "type": "statement:assign"
  }, {
    "id": 134,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 135,
    "text": "function(name)\r\n\t\t\treturn function(rec)\r\n\t\t\t\trec = make_record(rec, rec_type, name)\r\n\t\t\t\treturn rec\r\n\t\t\tend\r\n\t\tend",
    "type": "function"
  }, {
    "id": 136,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 137,
    "text": "function(rec)\r\n\t\t\trec = make_record(rec, rec_type, rec_type)\r\n\t\t\treturn rec\r\n\t\tend",
    "type": "function"
  }, {
    "id": 138,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 139,
    "text": "function subfile_path(filename)\r\n\tlocal level = #path_stack\r\n\tlocal cur_path = path_stack[level] or ''\r\n\treturn cur_path .. filename\r\nend",
    "type": "function"
  }, {
    "id": 140,
    "text": "local level = #path_stack",
    "type": "statement:localassign"
  }, {
    "id": 141,
    "text": "local cur_path = path_stack[level] or ''",
    "type": "statement:localassign"
  }, {
    "id": 142,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 143,
    "text": "function subfiles(files)\r\n\tlocal level = #path_stack\r\n\tlocal cur_path = path_stack[level]\r\n\tlocal rc\r\n\tlevel = level + 1\r\n\t-- use a new roots list to catch records from subfiles\r\n\tlocal prev_roots = root_records\r\n\troot_records={}\r\n\r\n\t-- process subfiles\r\n\tfor i=1,#files do\r\n\t\tlocal file = files[i]\r\n\t\t-- add current path to file\r\n\t\tfile = cur_path .. file\r\n\t\t-- seperate file's path from the filename.\r\n\t\tlocal file_path = file:match(path_match) or ''\r\n\t\tif #file_path > 0 then\r\n\t\t\tfile_path = file_path .. path_char\r\n\t\tend\r\n\t\t-- push the file's path onto the path_stack only if it is different.\r\n\t\tif cur_path ~= file_path then\r\n\t\t\tpath_stack[level] = file_path\r\n\t\tend\r\n\t\t-- check file path\r\n\t\tprint(\"Parsing records from file: \" .. file)\r\n\t\trc = {dofile(file)}\r\n\t\t-- pop path\r\n\t\tif cur_path ~= file_path then\r\n\t\t\tpath_stack[level] = nil\r\n\t\tend\r\n\tend\r\n\t-- move sub-records into new array\r\n\tlocal rec={}\r\n\tfor i=1,#root_records do\r\n\t\trec[i] = root_records[i]\r\n\tend\r\n\r\n\t-- switch back to previous roots list\r\n\troot_records = prev_roots\r\n\r\n\t-- make this into a record holding the sub-records from each of the sub-files\r\n\trec = make_record(rec, \"subfiles\")\r\n\tif #rc > 0 then\r\n\t\treturn rec, rc\r\n\tend\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 144,
    "text": "local cur_path = path_stack[level]",
    "type": "statement:localassign"
  }, {
    "id": 145,
    "text": "local rc",
    "type": "statement:localassign"
  }, {
    "id": 146,
    "text": "level = level + 1",
    "type": "statement:assign"
  }, {
    "id": 147,
    "text": "local prev_roots = root_records",
    "type": "statement:localassign"
  }, {
    "id": 148,
    "text": "for i=1,#files do\r\n\t\tlocal file = files[i]\r\n\t\t-- add current path to file\r\n\t\tfile = cur_path .. file\r\n\t\t-- seperate file's path from the filename.\r\n\t\tlocal file_path = file:match(path_match) or ''\r\n\t\tif #file_path > 0 then\r\n\t\t\tfile_path = file_path .. path_char\r\n\t\tend\r\n\t\t-- push the file's path onto the path_stack only if it is different.\r\n\t\tif cur_path ~= file_path then\r\n\t\t\tpath_stack[level] = file_path\r\n\t\tend\r\n\t\t-- check file path\r\n\t\tprint(\"Parsing records from file: \" .. file)\r\n\t\trc = {dofile(file)}\r\n\t\t-- pop path\r\n\t\tif cur_path ~= file_path then\r\n\t\t\tpath_stack[level] = nil\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 149,
    "text": "local file = files[i]",
    "type": "statement:localassign"
  }, {
    "id": 150,
    "text": "file = cur_path .. file",
    "type": "statement:assign"
  }, {
    "id": 151,
    "text": "local file_path = file:match(path_match) or ''",
    "type": "statement:localassign"
  }, {
    "id": 152,
    "text": "if #file_path > 0 then\r\n\t\t\tfile_path = file_path .. path_char\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 153,
    "text": "file_path = file_path .. path_char",
    "type": "statement:assign"
  }, {
    "id": 154,
    "text": "if cur_path ~= file_path then\r\n\t\t\tpath_stack[level] = file_path\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 155,
    "text": "path_stack[level] = file_path",
    "type": "statement:assign"
  }, {
    "id": 156,
    "text": "print(\"Parsing records from file: \" .. file)",
    "type": "statement:functioncall"
  }, {
    "id": 157,
    "text": "rc = {dofile(file)}",
    "type": "statement:assign"
  }, {
    "id": 158,
    "text": "if cur_path ~= file_path then\r\n\t\t\tpath_stack[level] = nil\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 159,
    "text": "path_stack[level] = nil",
    "type": "statement:assign"
  }, {
    "id": 160,
    "text": "local rec={}",
    "type": "statement:localassign"
  }, {
    "id": 161,
    "text": "for i=1,#root_records do\r\n\t\trec[i] = root_records[i]\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 162,
    "text": "rec[i] = root_records[i]",
    "type": "statement:assign"
  }, {
    "id": 163,
    "text": "root_records = prev_roots",
    "type": "statement:assign"
  }, {
    "id": 164,
    "text": "rec = make_record(rec, \"subfiles\")",
    "type": "statement:assign"
  }, {
    "id": 165,
    "text": "if #rc > 0 then\r\n\t\treturn rec, rc\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 166,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 167,
    "text": "function subfolder(folder)\r\n\treturn function(...)\r\n\tlocal files=select(1, ...)\r\n\tif type(files) ~= 'table' then\r\n\t\tfiles = {...}\r\n\tend\r\n\t-- push subfolder\r\n\tsubfolders[#subfolders+1] = folder\r\n\t-- build full path\r\n\tfolder = table.concat(subfolders, \"/\") .. \"/\"\r\n\tfor i=1,#files do\r\n\t\tfiles[i] = folder .. files[i]\r\n\tend\r\n\t-- use subfile record.\r\n\tlocal rec = subfiles(files)\r\n\t-- pop subfolder\r\n\tsubfolders[#subfolders] = nil\r\n\treturn rec\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 168,
    "text": "local files=select(1, ...)",
    "type": "statement:localassign"
  }, {
    "id": 169,
    "text": "if type(files) ~= 'table' then\r\n\t\tfiles = {...}\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 170,
    "text": "files = {...}",
    "type": "statement:assign"
  }, {
    "id": 171,
    "text": "subfolders[#subfolders+1] = folder",
    "type": "statement:assign"
  }, {
    "id": 172,
    "text": "folder = table.concat(subfolders, \"/\") .. \"/\"",
    "type": "statement:assign"
  }, {
    "id": 173,
    "text": "for i=1,#files do\r\n\t\tfiles[i] = folder .. files[i]\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 174,
    "text": "files[i] = folder .. files[i]",
    "type": "statement:assign"
  }, {
    "id": 175,
    "text": "local rec = subfiles(files)",
    "type": "statement:localassign"
  }, {
    "id": 176,
    "text": "subfolders[#subfolders] = nil",
    "type": "statement:assign"
  }, {
    "id": 177,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 178,
    "text": "function import(name)\r\n\trec = make_record({}, \"import\", name)\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 179,
    "text": "rec = make_record({}, \"import\", name)",
    "type": "statement:assign"
  }, {
    "id": 180,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 181,
    "text": "function(self)\r\n\tself._vars = {}\r\n\tself._data_parts = {}\r\n\tself._rec_counts = {}\r\nend",
    "type": "function"
  }, {
    "id": 182,
    "text": "self._vars = {}",
    "type": "statement:assign"
  }, {
    "id": 183,
    "text": "self._data_parts = {}",
    "type": "statement:assign"
  }, {
    "id": 184,
    "text": "self._rec_counts = {}",
    "type": "statement:assign"
  }, {
    "id": 185,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 186,
    "text": "function(self, part)\r\n\tlocal tmpl = self:dump_parts({part})\r\n\ttmpl = tmpl:gsub(\"%${(.-)}\", self._vars)\r\n\tself._data_parts[part] = {tmpl}\r\n\treturn tmpl\r\nend",
    "type": "function"
  }, {
    "id": 187,
    "text": "local tmpl = self:dump_parts({part})",
    "type": "statement:localassign"
  }, {
    "id": 188,
    "text": "tmpl = tmpl:gsub(\"%${(.-)}\", self._vars)",
    "type": "statement:assign"
  }, {
    "id": 189,
    "text": "self._data_parts[part] = {tmpl}",
    "type": "statement:assign"
  }, {
    "id": 190,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 191,
    "text": "function(self, parts)\r\n\tlocal out={}\r\n\tparts = self:parts(parts)\r\n\t-- apply variables to all \"parts\".\r\n\tfor i=1,#parts do\r\n\t\tlocal part = parts[i]\r\n\t\tlocal d = self:vars_part(part)\r\n\t\tout[#out+1] = d\r\n\tend\r\n\treturn out\r\nend",
    "type": "function"
  }, {
    "id": 192,
    "text": "local out={}",
    "type": "statement:localassign"
  }, {
    "id": 193,
    "text": "parts = self:parts(parts)",
    "type": "statement:assign"
  }, {
    "id": 194,
    "text": "for i=1,#parts do\r\n\t\tlocal part = parts[i]\r\n\t\tlocal d = self:vars_part(part)\r\n\t\tout[#out+1] = d\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 195,
    "text": "local part = parts[i]",
    "type": "statement:localassign"
  }, {
    "id": 196,
    "text": "local d = self:vars_part(part)",
    "type": "statement:localassign"
  }, {
    "id": 197,
    "text": "out[#out+1] = d",
    "type": "statement:assign"
  }, {
    "id": 198,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 199,
    "text": "function(self, part, data)\r\n\tif type(data) ~= \"table\" then\r\n\t\tif data == nil then return end\r\n\t\tdata = { tostring(data) }\r\n\tend\r\n\tlocal out=self._data_parts[part]\r\n\tif out == nil then\r\n\t\tout = {}\r\n\t\tself._data_parts[part] = out\r\n\tend\r\n\t-- append data.\r\n\ttappend(out, data)\r\nend",
    "type": "function"
  }, {
    "id": 200,
    "text": "if type(data) ~= \"table\" then\r\n\t\tif data == nil then return end\r\n\t\tdata = { tostring(data) }\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 201,
    "text": "if data == nil then return end",
    "type": "statement:if"
  }, {
    "id": 202,
    "text": "data = { tostring(data) }",
    "type": "statement:assign"
  }, {
    "id": 203,
    "text": "local out=self._data_parts[part]",
    "type": "statement:localassign"
  }, {
    "id": 204,
    "text": "if out == nil then\r\n\t\tout = {}\r\n\t\tself._data_parts[part] = out\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 205,
    "text": "out = {}",
    "type": "statement:assign"
  }, {
    "id": 206,
    "text": "self._data_parts[part] = out",
    "type": "statement:assign"
  }, {
    "id": 207,
    "text": "tappend(out, data)",
    "type": "statement:functioncall"
  }, {
    "id": 208,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 209,
    "text": "function(self, parts)\r\n\t-- make sure \"parts\" is a table.\r\n\tif parts == nil then\r\n\t\tparts = {}\r\n\t\tfor part in pairs(self._data_parts) do parts[#parts+1] = part end\r\n\telseif type(parts) ~= \"table\" then\r\n\t\tparts = { parts }\r\n\tend\r\n\treturn parts\r\nend",
    "type": "function"
  }, {
    "id": 210,
    "text": "if parts == nil then\r\n\t\tparts = {}\r\n\t\tfor part in pairs(self._data_parts) do parts[#parts+1] = part end\r\n\telseif type(parts) ~= \"table\" then\r\n\t\tparts = { parts }\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 211,
    "text": "parts = {}",
    "type": "statement:assign"
  }, {
    "id": 212,
    "text": "for part in pairs(self._data_parts) do parts[#parts+1] = part end",
    "type": "statement:genericfor"
  }, {
    "id": 213,
    "text": "parts[#parts+1] = part",
    "type": "statement:assign"
  }, {
    "id": 214,
    "text": "parts = { parts }",
    "type": "statement:assign"
  }, {
    "id": 215,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 216,
    "text": "function(self, parts, sep)\r\n\tlocal out={}\r\n\tparts = self:parts(parts)\r\n\t-- return all parts listed in \"parts\".\r\n\tlocal data = self._data_parts\r\n\tfor i=1,#parts do\r\n\t\tlocal part = parts[i]\r\n\t\tlocal d_part=data[part]\r\n\t\tif d_part then\r\n\t\t\ttappend(out, d_part)\r\n\t\tend\r\n\t\tif sep ~= nil then\r\n\t\t\tout[#out+1] = sep\r\n\t\tend\r\n\tend\r\n\treturn table.concat(out)\r\nend",
    "type": "function"
  }, {
    "id": 217,
    "text": "local data = self._data_parts",
    "type": "statement:localassign"
  }, {
    "id": 218,
    "text": "for i=1,#parts do\r\n\t\tlocal part = parts[i]\r\n\t\tlocal d_part=data[part]\r\n\t\tif d_part then\r\n\t\t\ttappend(out, d_part)\r\n\t\tend\r\n\t\tif sep ~= nil then\r\n\t\t\tout[#out+1] = sep\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 219,
    "text": "local d_part=data[part]",
    "type": "statement:localassign"
  }, {
    "id": 220,
    "text": "if d_part then\r\n\t\t\ttappend(out, d_part)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 221,
    "text": "tappend(out, d_part)",
    "type": "statement:functioncall"
  }, {
    "id": 222,
    "text": "if sep ~= nil then\r\n\t\t\tout[#out+1] = sep\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 223,
    "text": "out[#out+1] = sep",
    "type": "statement:assign"
  }, {
    "id": 224,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 225,
    "text": "function(self, src, parts)\r\n\tparts = src:parts(parts)\r\n\tfor i=1,#parts do\r\n\t\tlocal part = parts[i]\r\n\t\tself:write_part(part, src:dump_parts(part))\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 226,
    "text": "parts = src:parts(parts)",
    "type": "statement:assign"
  }, {
    "id": 227,
    "text": "for i=1,#parts do\r\n\t\tlocal part = parts[i]\r\n\t\tself:write_part(part, src:dump_parts(part))\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 228,
    "text": "self:write_part(part, src:dump_parts(part))",
    "type": "statement:functioncall"
  }, {
    "id": 229,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 230,
    "text": "function(self, _rec_type)\r\n\tlocal count = self._rec_counts[_rec_type]\r\n\tif count == nil then count = 0 end\r\n\treturn count\r\nend",
    "type": "function"
  }, {
    "id": 231,
    "text": "local count = self._rec_counts[_rec_type]",
    "type": "statement:localassign"
  }, {
    "id": 232,
    "text": "if count == nil then count = 0 end",
    "type": "statement:if"
  }, {
    "id": 233,
    "text": "count = 0",
    "type": "statement:assign"
  }, {
    "id": 234,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 235,
    "text": "function(self, rec)\r\n\tlocal count = self:get_sub_record_count(rec._rec_type)\r\n\tcount = count + 1\r\n\tself._rec_counts[rec._rec_type] = count\r\n\trec._rec_idx = count\r\nend",
    "type": "function"
  }, {
    "id": 236,
    "text": "local count = self:get_sub_record_count(rec._rec_type)",
    "type": "statement:localassign"
  }, {
    "id": 237,
    "text": "count = count + 1",
    "type": "statement:assign"
  }, {
    "id": 238,
    "text": "self._rec_counts[rec._rec_type] = count",
    "type": "statement:assign"
  }, {
    "id": 239,
    "text": "rec._rec_idx = count",
    "type": "statement:assign"
  }, {
    "id": 240,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 241,
    "text": "function(self, key, value)\r\n\tself._vars[key] = value\r\nend",
    "type": "function"
  }, {
    "id": 242,
    "text": "self._vars[key] = value",
    "type": "statement:assign"
  }, {
    "id": 243,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 244,
    "text": "function(self, rec, name, vname, idx)\r\n\tlocal name = name or rec.name\r\n\tlocal idx = idx or rec._rec_idx\r\n\tself._vars[name] = vname or format_variable(name, idx)\r\n\tself._vars[name .. \"::idx\"] = idx\r\nend",
    "type": "function"
  }, {
    "id": 245,
    "text": "local name = name or rec.name",
    "type": "statement:localassign"
  }, {
    "id": 246,
    "text": "local idx = idx or rec._rec_idx",
    "type": "statement:localassign"
  }, {
    "id": 247,
    "text": "self._vars[name] = vname or format_variable(name, idx)",
    "type": "statement:assign"
  }, {
    "id": 248,
    "text": "self._vars[name .. \"::idx\"] = idx",
    "type": "statement:assign"
  }, {
    "id": 249,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 250,
    "text": "function(self, parent)\r\n\tlocal root_idx\r\n\t-- find record in roots list\r\n\tfor idx=1,#root_records do\r\n\t\tif root_records[idx] == self then\r\n\t\t\troot_idx = idx\r\n\t\t\tbreak\r\n\t\tend\r\n\tend\r\n\t-- remove it from the roots list\r\n\tif root_idx ~= nil and root_records[root_idx] == self then\r\n\t\ttremove(root_records, root_idx)\r\n\tend\r\n\trawset(self, \"_parent\", parent)\r\nend",
    "type": "function"
  }, {
    "id": 251,
    "text": "local root_idx",
    "type": "statement:localassign"
  }, {
    "id": 252,
    "text": "for idx=1,#root_records do\r\n\t\tif root_records[idx] == self then\r\n\t\t\troot_idx = idx\r\n\t\t\tbreak\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 253,
    "text": "if root_records[idx] == self then\r\n\t\t\troot_idx = idx\r\n\t\t\tbreak\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 254,
    "text": "root_idx = idx",
    "type": "statement:assign"
  }, {
    "id": 255,
    "text": "if root_idx ~= nil and root_records[root_idx] == self then\r\n\t\ttremove(root_records, root_idx)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 256,
    "text": "tremove(root_records, root_idx)",
    "type": "statement:functioncall"
  }, {
    "id": 257,
    "text": "rawset(self, \"_parent\", parent)",
    "type": "statement:functioncall"
  }, {
    "id": 258,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 259,
    "text": "function(self, rec, pos)\r\n\trec:make_sub_record(self)\r\n\tif pos ~= nil then\r\n\t\ttinsert(self, pos, rec)\r\n\telse\r\n\t\tself[#self+1] = rec\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 260,
    "text": "rec:make_sub_record(self)",
    "type": "statement:functioncall"
  }, {
    "id": 261,
    "text": "if pos ~= nil then\r\n\t\ttinsert(self, pos, rec)\r\n\telse\r\n\t\tself[#self+1] = rec\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 262,
    "text": "tinsert(self, pos, rec)",
    "type": "statement:functioncall"
  }, {
    "id": 263,
    "text": "self[#self+1] = rec",
    "type": "statement:assign"
  }, {
    "id": 264,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 265,
    "text": "function(self, rec)\r\n\tself:insert_record(rec)\r\nend",
    "type": "function"
  }, {
    "id": 266,
    "text": "self:insert_record(rec)",
    "type": "statement:functioncall"
  }, {
    "id": 267,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 268,
    "text": "function(self, rec)\r\n\tfor i=1,#self do\r\n\t\tlocal sub = self[i]\r\n\t\tif sub == rec then\r\n\t\t\treturn i\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 269,
    "text": "for i=1,#self do\r\n\t\tlocal sub = self[i]\r\n\t\tif sub == rec then\r\n\t\t\treturn i\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 270,
    "text": "local sub = self[i]",
    "type": "statement:localassign"
  }, {
    "id": 271,
    "text": "if sub == rec then\r\n\t\t\treturn i\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 272,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 273,
    "text": "function(self, old_rec, new_rec)\r\n\tfor i=1,#self do\r\n\t\tlocal sub = self[i]\r\n\t\tif sub == old_rec then\r\n\t\t\tself[i] = new_rec\r\n\t\t\treturn i\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 274,
    "text": "for i=1,#self do\r\n\t\tlocal sub = self[i]\r\n\t\tif sub == old_rec then\r\n\t\t\tself[i] = new_rec\r\n\t\t\treturn i\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 275,
    "text": "if sub == old_rec then\r\n\t\t\tself[i] = new_rec\r\n\t\t\treturn i\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 276,
    "text": "self[i] = new_rec",
    "type": "statement:assign"
  }, {
    "id": 277,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 278,
    "text": "function(self, rec)\r\n\tfor i=1,#self do\r\n\t\tlocal sub = self[i]\r\n\t\tif sub == rec then\r\n\t\t\trawset(self, i, ignore_record) -- have to insert an empty table in it's place.\r\n\t\t\trawset(sub, \"_parent\", nil)\r\n\t\t\treturn\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 279,
    "text": "for i=1,#self do\r\n\t\tlocal sub = self[i]\r\n\t\tif sub == rec then\r\n\t\t\trawset(self, i, ignore_record) -- have to insert an empty table in it's place.\r\n\t\t\trawset(sub, \"_parent\", nil)\r\n\t\t\treturn\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 280,
    "text": "if sub == rec then\r\n\t\t\trawset(self, i, ignore_record) -- have to insert an empty table in it's place.\r\n\t\t\trawset(sub, \"_parent\", nil)\r\n\t\t\treturn\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 281,
    "text": "rawset(self, i, ignore_record)",
    "type": "statement:functioncall"
  }, {
    "id": 282,
    "text": "rawset(sub, \"_parent\", nil)",
    "type": "statement:functioncall"
  }, {
    "id": 283,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 284,
    "text": "function(self)\r\n\t-- remove from parent.\r\n\tif self._parent ~= nil then\r\n\t\tself._parent:remove_record(self)\r\n\tend\r\n\t-- delete sub-records\r\n\tfor i=1,#self do\r\n\t\tlocal sub = self[i]\r\n\t\tif is_record(sub) and sub._parent == self then\r\n\t\t\tself[i] = nil\r\n\t\t\tsub:delete_record()\r\n\t\t\trawset(sub, \"_parent\", nil)\r\n\t\tend\r\n\tend\r\n\t-- ignore this record and it sub-records\r\n\tself._rec_type = \"ignore\"\r\nend",
    "type": "function"
  }, {
    "id": 285,
    "text": "if self._parent ~= nil then\r\n\t\tself._parent:remove_record(self)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 286,
    "text": "self._parent:remove_record(self)",
    "type": "statement:functioncall"
  }, {
    "id": 287,
    "text": "for i=1,#self do\r\n\t\tlocal sub = self[i]\r\n\t\tif is_record(sub) and sub._parent == self then\r\n\t\t\tself[i] = nil\r\n\t\t\tsub:delete_record()\r\n\t\t\trawset(sub, \"_parent\", nil)\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 288,
    "text": "if is_record(sub) and sub._parent == self then\r\n\t\t\tself[i] = nil\r\n\t\t\tsub:delete_record()\r\n\t\t\trawset(sub, \"_parent\", nil)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 289,
    "text": "self[i] = nil",
    "type": "statement:assign"
  }, {
    "id": 290,
    "text": "sub:delete_record()",
    "type": "statement:functioncall"
  }, {
    "id": 291,
    "text": "self._rec_type = \"ignore\"",
    "type": "statement:assign"
  }, {
    "id": 292,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 293,
    "text": "function(self)\r\n\tlocal copy = {}\r\n\t-- copy values from current record.\r\n\tfor k,v in pairs(self) do\r\n\t\tcopy[k] = v\r\n\tend\r\n\trawset(copy, \"_parent\", nil) -- unlink from old parent\r\n\t-- copy sub-records\r\n\tfor i=1,#copy do\r\n\t\tlocal sub = copy[i]\r\n\t\tif is_record(sub) then\r\n\t\t\tlocal sub_copy = sub:copy_record()\r\n\t\t\trawset(copy, i, sub_copy)\r\n\t\t\trawset(sub_copy, \"_parent\", copy)\r\n\t\tend\r\n\tend\r\n\tsetmetatable(copy, rec_meta)\r\n\tgroup_add_record(copy, copy._rec_type)\r\n\treturn copy\r\nend",
    "type": "function"
  }, {
    "id": 294,
    "text": "local copy = {}",
    "type": "statement:localassign"
  }, {
    "id": 295,
    "text": "for k,v in pairs(self) do\r\n\t\tcopy[k] = v\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 296,
    "text": "copy[k] = v",
    "type": "statement:assign"
  }, {
    "id": 297,
    "text": "rawset(copy, \"_parent\", nil)",
    "type": "statement:functioncall"
  }, {
    "id": 298,
    "text": "for i=1,#copy do\r\n\t\tlocal sub = copy[i]\r\n\t\tif is_record(sub) then\r\n\t\t\tlocal sub_copy = sub:copy_record()\r\n\t\t\trawset(copy, i, sub_copy)\r\n\t\t\trawset(sub_copy, \"_parent\", copy)\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 299,
    "text": "local sub = copy[i]",
    "type": "statement:localassign"
  }, {
    "id": 300,
    "text": "if is_record(sub) then\r\n\t\t\tlocal sub_copy = sub:copy_record()\r\n\t\t\trawset(copy, i, sub_copy)\r\n\t\t\trawset(sub_copy, \"_parent\", copy)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 301,
    "text": "local sub_copy = sub:copy_record()",
    "type": "statement:localassign"
  }, {
    "id": 302,
    "text": "rawset(copy, i, sub_copy)",
    "type": "statement:functioncall"
  }, {
    "id": 303,
    "text": "rawset(sub_copy, \"_parent\", copy)",
    "type": "statement:functioncall"
  }, {
    "id": 304,
    "text": "setmetatable(copy, rec_meta)",
    "type": "statement:functioncall"
  }, {
    "id": 305,
    "text": "group_add_record(copy, copy._rec_type)",
    "type": "statement:functioncall"
  }, {
    "id": 306,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 307,
    "text": "function(self, name, obj, scope)\r\n\t-- default scope 'local'\r\n\tif scope == nil then scope = \"local\" end\r\n\t-- if scope is global then skip local maps.\r\n\tif scope == 'global' then\r\n\t\tglobal_scope[name] = obj\r\n\t\treturn\r\n\tend\r\n\t-- add symbol to local map\r\n\tself._symbol_map[name] = obj\r\n\t-- if scope is doesn't equal our scope\r\n\tif scope ~= self.scope and self._parent ~= nil then\r\n\t\tself._parent:add_symbol(name, obj, scope)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 308,
    "text": "if scope == nil then scope = \"local\" end",
    "type": "statement:if"
  }, {
    "id": 309,
    "text": "scope = \"local\"",
    "type": "statement:assign"
  }, {
    "id": 310,
    "text": "if scope == 'global' then\r\n\t\tglobal_scope[name] = obj\r\n\t\treturn\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 311,
    "text": "global_scope[name] = obj",
    "type": "statement:assign"
  }, {
    "id": 312,
    "text": "self._symbol_map[name] = obj",
    "type": "statement:assign"
  }, {
    "id": 313,
    "text": "if scope ~= self.scope and self._parent ~= nil then\r\n\t\tself._parent:add_symbol(name, obj, scope)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 314,
    "text": "self._parent:add_symbol(name, obj, scope)",
    "type": "statement:functioncall"
  }, {
    "id": 315,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 316,
    "text": "function(self, name)\r\n\t-- check our mappings\r\n\tlocal obj = self._symbol_map[name]\r\n\t-- check parent if we don't have a mapping for the symbol\r\n\tif obj == nil and self._parent ~= nil then\r\n\t\tobj = self._parent:get_symbol(name)\r\n\tend\r\n\t-- next check the imports for the symbol\r\n\tif obj == nil then\r\n\t\tlocal imports = self._imports\r\n\t\tfor i=1,#imports do\r\n\t\t\tlocal import = imports[i]\r\n\t\t\tobj = import:get_symbol(name)\r\n\t\t\tif obj ~= nil then\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\t-- next check the globals for the symbol\r\n\tif obj == nil then\r\n\t\tobj = global_scope[name]\r\n\tend\r\n\treturn obj\r\nend",
    "type": "function"
  }, {
    "id": 317,
    "text": "local obj = self._symbol_map[name]",
    "type": "statement:localassign"
  }, {
    "id": 318,
    "text": "if obj == nil and self._parent ~= nil then\r\n\t\tobj = self._parent:get_symbol(name)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 319,
    "text": "obj = self._parent:get_symbol(name)",
    "type": "statement:assign"
  }, {
    "id": 320,
    "text": "if obj == nil then\r\n\t\tlocal imports = self._imports\r\n\t\tfor i=1,#imports do\r\n\t\t\tlocal import = imports[i]\r\n\t\t\tobj = import:get_symbol(name)\r\n\t\t\tif obj ~= nil then\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 321,
    "text": "local imports = self._imports",
    "type": "statement:localassign"
  }, {
    "id": 322,
    "text": "for i=1,#imports do\r\n\t\t\tlocal import = imports[i]\r\n\t\t\tobj = import:get_symbol(name)\r\n\t\t\tif obj ~= nil then\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 323,
    "text": "local import = imports[i]",
    "type": "statement:localassign"
  }, {
    "id": 324,
    "text": "obj = import:get_symbol(name)",
    "type": "statement:assign"
  }, {
    "id": 325,
    "text": "if obj ~= nil then\r\n\t\t\t\tbreak\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 326,
    "text": "if obj == nil then\r\n\t\tobj = global_scope[name]\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 327,
    "text": "obj = global_scope[name]",
    "type": "statement:assign"
  }, {
    "id": 328,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 329,
    "text": "function(self, import_rec)\r\n\tlocal imports = self._imports\r\n\t-- if already imported then skip\r\n\tif imports[import_rec] then return end\r\n\timports[import_rec] = true\r\n\t-- append to head of imports list so that the last import overrides symbols\r\n\t-- from the previous imports\r\n\ttable.insert(imports, 1, import_rec)\r\nend",
    "type": "function"
  }, {
    "id": 330,
    "text": "if imports[import_rec] then return end",
    "type": "statement:if"
  }, {
    "id": 331,
    "text": "imports[import_rec] = true",
    "type": "statement:assign"
  }, {
    "id": 332,
    "text": "table.insert(imports, 1, import_rec)",
    "type": "statement:functioncall"
  }, {
    "id": 333,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 334,
    "text": "function(self, rec, parent)\r\n\t\t-- make sure it is a valid record.\r\n\t\tif not is_record(rec) or seen[rec] or rec._rec_type == \"ignore\" then return end\r\n\t\tif parent then\r\n\t\t\tparent:count_sub_record(rec) -- count sub-records.\r\n\t\tend\r\n\t\t-- keep track of records we have already processed\r\n\t\tseen[rec] = true\r\n\t\tlocal rec_type = rec._rec_type\r\n\t\t-- clear record's data output & sub-record counts.\r\n\t\trec:clear()\r\n\t\t-- start record.\r\n\t\tcall_meth(self, rec_type, \"\", rec, parent)\r\n\t\t-- transverse into sub-records\r\n\t\tfor _,v in ipairs(rec) do\r\n\t\t\tself(v, rec)\r\n\t\tend\r\n\t\t-- end record\r\n\t\tcall_meth(self, rec_type, \"_end\", rec, parent)\r\n\t\t-- update \"last_type\"\r\n\t\tself.last_type = rec_type\r\n\tend",
    "type": "function"
  }, {
    "id": 335,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 336,
    "text": "function(rec)\r\n\t\t\t\trec = make_record(rec, rec_type, name)\r\n\t\t\t\treturn rec\r\n\t\t\tend",
    "type": "function"
  }, {
    "id": 337,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 338,
    "text": "function(self, rec, parent)\r\n\tlocal idx = parent:find_record(rec)\r\n\tmove_recs(parent, rec, idx)\r\nend",
    "type": "function"
  }, {
    "id": 339,
    "text": "local idx = parent:find_record(rec)",
    "type": "statement:localassign"
  }, {
    "id": 340,
    "text": "move_recs(parent, rec, idx)",
    "type": "statement:functioncall"
  }, {
    "id": 341,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 342,
    "text": "function(...)\r\n\tlocal files=select(1, ...)\r\n\tif type(files) ~= 'table' then\r\n\t\tfiles = {...}\r\n\tend\r\n\t-- push subfolder\r\n\tsubfolders[#subfolders+1] = folder\r\n\t-- build full path\r\n\tfolder = table.concat(subfolders, \"/\") .. \"/\"\r\n\tfor i=1,#files do\r\n\t\tfiles[i] = folder .. files[i]\r\n\tend\r\n\t-- use subfile record.\r\n\tlocal rec = subfiles(files)\r\n\t-- pop subfolder\r\n\tsubfolders[#subfolders] = nil\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 343,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 344,
    "text": "function(self, rec, parent)\r\nend",
    "type": "function"
  }, {
    "id": 345,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 346,
    "text": "",
    "type": "function container"
  }, {
    "id": 347,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 348,
    "text": "func",
    "type": "global function"
  }, {
    "id": 349,
    "text": "tremove",
    "type": "global function"
  }, {
    "id": 350,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 351,
    "text": "print",
    "type": "global function"
  }, {
    "id": 352,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 353,
    "text": "parser",
    "type": "global function"
  }, {
    "id": 354,
    "text": "rawset",
    "type": "global function"
  }, {
    "id": 355,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 356,
    "text": "type",
    "type": "global function"
  }, {
    "id": 357,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 358,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 359,
    "text": "dofile",
    "type": "global function"
  }, {
    "id": 360,
    "text": "self",
    "type": "global function"
  }, {
    "id": 361,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 362,
    "text": "error",
    "type": "global function"
  }, {
    "id": 363,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 364,
    "text": "select",
    "type": "global function"
  }, {
    "id": 365,
    "text": "tinsert",
    "type": "global function"
  }, {
    "id": 366,
    "text": "",
    "type": "variable container"
  }, {
    "id": 367,
    "text": "",
    "type": "require container"
  }, {
    "id": 368,
    "text": "",
    "type": "local variable"
  }, {
    "id": 369,
    "text": "",
    "type": "n/a"
  }, {
    "id": 370,
    "text": "",
    "type": "local variable"
  }, {
    "id": 371,
    "text": "",
    "type": "n/a"
  }, {
    "id": 372,
    "text": "",
    "type": "local variable"
  }, {
    "id": 373,
    "text": "",
    "type": "n/a"
  }, {
    "id": 374,
    "text": "",
    "type": "local variable"
  }, {
    "id": 375,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 376,
    "text": "",
    "type": "local variable"
  }, {
    "id": 377,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 378,
    "text": "",
    "type": "local variable"
  }, {
    "id": 379,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 380,
    "text": "",
    "type": "local variable"
  }, {
    "id": 381,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 382,
    "text": "",
    "type": "local variable"
  }, {
    "id": 383,
    "text": "",
    "type": "string"
  }, {
    "id": 384,
    "text": "",
    "type": "local variable"
  }, {
    "id": 385,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 386,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 387,
    "text": "",
    "type": "string"
  }, {
    "id": 388,
    "text": "",
    "type": "local variable"
  }, {
    "id": 389,
    "text": "",
    "type": "local variable"
  }, {
    "id": 390,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 391,
    "text": "",
    "type": "local variable"
  }, {
    "id": 392,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 393,
    "text": "",
    "type": "string"
  }, {
    "id": 394,
    "text": "",
    "type": "string"
  }, {
    "id": 395,
    "text": "",
    "type": "local variable"
  }, {
    "id": 396,
    "text": "",
    "type": "n/a"
  }, {
    "id": 397,
    "text": "",
    "type": "local variable"
  }, {
    "id": 398,
    "text": "",
    "type": "n/a"
  }, {
    "id": 399,
    "text": "",
    "type": "local variable"
  }, {
    "id": 400,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 401,
    "text": "",
    "type": "string"
  }, {
    "id": 402,
    "text": "",
    "type": "local variable"
  }, {
    "id": 403,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 404,
    "text": "",
    "type": "global variable"
  }, {
    "id": 405,
    "text": "",
    "type": "n/a"
  }, {
    "id": 406,
    "text": "",
    "type": "global variable"
  }, {
    "id": 407,
    "text": "",
    "type": "n/a"
  } ]
}