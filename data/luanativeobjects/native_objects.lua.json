{
  "_filename": "native_objects.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luanativeobjects/native_objects.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 9,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 17,
    "label": "has",
    "to": 12
  }, {
    "from": 17,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 17,
    "label": "has",
    "to": 24
  }, {
    "from": 17,
    "label": "has",
    "to": 12
  }, {
    "from": 17,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 26,
    "label": "has",
    "to": 12
  }, {
    "from": 26,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 38,
    "label": "has",
    "to": 42
  }, {
    "from": 38,
    "label": "has",
    "to": 43
  }, {
    "from": 38,
    "label": "has",
    "to": 12
  }, {
    "from": 38,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 12
  }, {
    "from": 45,
    "label": "has",
    "to": 12
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 45,
    "label": "has",
    "to": 12
  }, {
    "from": 45,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 12
  }, {
    "from": 50,
    "label": "has",
    "to": 12
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 50,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 12
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 55,
    "label": "has",
    "to": 58
  }, {
    "from": 55,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 59,
    "label": "has",
    "to": 40
  }, {
    "from": 59,
    "label": "has",
    "to": 43
  }, {
    "from": 59,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 59,
    "label": "has",
    "to": 63
  }, {
    "from": 59,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 64
  }, {
    "from": 59,
    "label": "has",
    "to": 66
  }, {
    "from": 55,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 55,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 12
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 12
  }, {
    "from": 55,
    "label": "has",
    "to": 12
  }, {
    "from": 55,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 12
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 75,
    "label": "has",
    "to": 12
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 12
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 77,
    "label": "has",
    "to": 12
  }, {
    "from": 77,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 82,
    "label": "has",
    "to": 85
  }, {
    "from": 82,
    "label": "has",
    "to": 86
  }, {
    "from": 81,
    "label": "has",
    "to": 12
  }, {
    "from": 81,
    "label": "has",
    "to": 12
  }, {
    "from": 81,
    "label": "has",
    "to": 78
  }, {
    "from": 81,
    "label": "has",
    "to": 85
  }, {
    "from": 81,
    "label": "has",
    "to": 12
  }, {
    "from": 81,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 12
  }, {
    "from": 88,
    "label": "has",
    "to": 78
  }, {
    "from": 88,
    "label": "has",
    "to": 85
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 12
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 91,
    "label": "has",
    "to": 12
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 40
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 91,
    "label": "has",
    "to": 12
  }, {
    "from": 91,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 12
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 100,
    "label": "has",
    "to": 12
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 100,
    "label": "has",
    "to": 40
  }, {
    "from": 100,
    "label": "has",
    "to": 12
  }, {
    "from": 100,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 12
  }, {
    "from": 103,
    "label": "has",
    "to": 12
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 103,
    "label": "has",
    "to": 52
  }, {
    "from": 103,
    "label": "has",
    "to": 40
  }, {
    "from": 103,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 106,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 108,
    "label": "has",
    "to": 110
  }, {
    "from": 108,
    "label": "has",
    "to": 110
  }, {
    "from": 106,
    "label": "has",
    "to": 110
  }, {
    "from": 103,
    "label": "has",
    "to": 12
  }, {
    "from": 103,
    "label": "has",
    "to": 111
  }, {
    "from": 112,
    "label": "has",
    "to": 12
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 112,
    "label": "has",
    "to": 114
  }, {
    "from": 112,
    "label": "has",
    "to": 40
  }, {
    "from": 112,
    "label": "has",
    "to": 115
  }, {
    "from": 112,
    "label": "has",
    "to": 12
  }, {
    "from": 112,
    "label": "has",
    "to": 116
  }, {
    "from": 117,
    "label": "has",
    "to": 12
  }, {
    "from": 117,
    "label": "has",
    "to": 113
  }, {
    "from": 117,
    "label": "has",
    "to": 114
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 117,
    "label": "has",
    "to": 119
  }, {
    "from": 117,
    "label": "has",
    "to": 40
  }, {
    "from": 117,
    "label": "has",
    "to": 115
  }, {
    "from": 117,
    "label": "has",
    "to": 12
  }, {
    "from": 117,
    "label": "has",
    "to": 120
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 121,
    "label": "has",
    "to": 123
  }, {
    "from": 121,
    "label": "has",
    "to": 12
  }, {
    "from": 121,
    "label": "has",
    "to": 124
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 126,
    "label": "has",
    "to": 12
  }, {
    "from": 125,
    "label": "has",
    "to": 12
  }, {
    "from": 125,
    "label": "has",
    "to": 128
  }, {
    "from": 125,
    "label": "has",
    "to": 123
  }, {
    "from": 125,
    "label": "has",
    "to": 12
  }, {
    "from": 125,
    "label": "has",
    "to": 129
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 130,
    "label": "has",
    "to": 132
  }, {
    "from": 130,
    "label": "has",
    "to": 133
  }, {
    "from": 130,
    "label": "has",
    "to": 134
  }, {
    "from": 130,
    "label": "has",
    "to": 12
  }, {
    "from": 130,
    "label": "has",
    "to": 135
  }, {
    "from": 136,
    "label": "has",
    "to": 131
  }, {
    "from": 136,
    "label": "has",
    "to": 132
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 136,
    "label": "has",
    "to": 134
  }, {
    "from": 136,
    "label": "has",
    "to": 12
  }, {
    "from": 136,
    "label": "has",
    "to": 138
  }, {
    "from": 139,
    "label": "has",
    "to": 12
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 139,
    "label": "has",
    "to": 40
  }, {
    "from": 139,
    "label": "has",
    "to": 141
  }, {
    "from": 139,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 143,
    "label": "has",
    "to": 145
  }, {
    "from": 142,
    "label": "has",
    "to": 12
  }, {
    "from": 142,
    "label": "has",
    "to": 12
  }, {
    "from": 139,
    "label": "has",
    "to": 12
  }, {
    "from": 139,
    "label": "has",
    "to": 146
  }, {
    "from": 147,
    "label": "has",
    "to": 143
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 143,
    "label": "has",
    "to": 145
  }, {
    "from": 147,
    "label": "has",
    "to": 12
  }, {
    "from": 147,
    "label": "has",
    "to": 12
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 149,
    "label": "has",
    "to": 12
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 149,
    "label": "has",
    "to": 151
  }, {
    "from": 149,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 149,
    "label": "has",
    "to": 154
  }, {
    "from": 149,
    "label": "has",
    "to": 155
  }, {
    "from": 149,
    "label": "has",
    "to": 12
  }, {
    "from": 149,
    "label": "has",
    "to": 156
  }, {
    "from": 157,
    "label": "has",
    "to": 12
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 158,
    "label": "has",
    "to": 159
  }, {
    "from": 158,
    "label": "has",
    "to": 160
  }, {
    "from": 157,
    "label": "has",
    "to": 161
  }, {
    "from": 157,
    "label": "has",
    "to": 162
  }, {
    "from": 157,
    "label": "has",
    "to": 12
  }, {
    "from": 157,
    "label": "has",
    "to": 163
  }, {
    "from": 164,
    "label": "has",
    "to": 12
  }, {
    "from": 164,
    "label": "has",
    "to": 165
  }, {
    "from": 165,
    "label": "has",
    "to": 159
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 165,
    "label": "has",
    "to": 167
  }, {
    "from": 164,
    "label": "has",
    "to": 161
  }, {
    "from": 164,
    "label": "has",
    "to": 168
  }, {
    "from": 164,
    "label": "has",
    "to": 153
  }, {
    "from": 164,
    "label": "has",
    "to": 12
  }, {
    "from": 164,
    "label": "has",
    "to": 169
  }, {
    "from": 170,
    "label": "has",
    "to": 12
  }, {
    "from": 170,
    "label": "has",
    "to": 171
  }, {
    "from": 172,
    "label": "has",
    "to": 12
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 174,
    "label": "has",
    "to": 12
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 174,
    "label": "has",
    "to": 40
  }, {
    "from": 174,
    "label": "has",
    "to": 115
  }, {
    "from": 174,
    "label": "has",
    "to": 12
  }, {
    "from": 174,
    "label": "has",
    "to": 176
  }, {
    "from": 177,
    "label": "has",
    "to": 12
  }, {
    "from": 177,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 178,
    "label": "has",
    "to": 180
  }, {
    "from": 177,
    "label": "has",
    "to": 181
  }, {
    "from": 177,
    "label": "has",
    "to": 182
  }, {
    "from": 177,
    "label": "has",
    "to": 183
  }, {
    "from": 177,
    "label": "has",
    "to": 12
  }, {
    "from": 177,
    "label": "has",
    "to": 184
  }, {
    "from": 185,
    "label": "has",
    "to": 186
  }, {
    "from": 185,
    "label": "has",
    "to": 12
  }, {
    "from": 185,
    "label": "has",
    "to": 187
  }, {
    "from": 188,
    "label": "has",
    "to": 189
  }, {
    "from": 188,
    "label": "has",
    "to": 190
  }, {
    "from": 188,
    "label": "has",
    "to": 191
  }, {
    "from": 188,
    "label": "has",
    "to": 12
  }, {
    "from": 188,
    "label": "has",
    "to": 192
  }, {
    "from": 193,
    "label": "has",
    "to": 194
  }, {
    "from": 193,
    "label": "has",
    "to": 12
  }, {
    "from": 193,
    "label": "has",
    "to": 195
  }, {
    "from": 193,
    "label": "has",
    "to": 196
  }, {
    "from": 193,
    "label": "has",
    "to": 197
  }, {
    "from": 193,
    "label": "has",
    "to": 198
  }, {
    "from": 193,
    "label": "has",
    "to": 199
  }, {
    "from": 193,
    "label": "has",
    "to": 200
  }, {
    "from": 193,
    "label": "has",
    "to": 201
  }, {
    "from": 193,
    "label": "has",
    "to": 202
  }, {
    "from": 202,
    "label": "has",
    "to": 203
  }, {
    "from": 202,
    "label": "has",
    "to": 204
  }, {
    "from": 202,
    "label": "has",
    "to": 205
  }, {
    "from": 205,
    "label": "has",
    "to": 206
  }, {
    "from": 205,
    "label": "has",
    "to": 207
  }, {
    "from": 205,
    "label": "has",
    "to": 206
  }, {
    "from": 205,
    "label": "has",
    "to": 208
  }, {
    "from": 205,
    "label": "has",
    "to": 209
  }, {
    "from": 205,
    "label": "has",
    "to": 210
  }, {
    "from": 205,
    "label": "has",
    "to": 211
  }, {
    "from": 211,
    "label": "has",
    "to": 212
  }, {
    "from": 205,
    "label": "has",
    "to": 213
  }, {
    "from": 205,
    "label": "has",
    "to": 214
  }, {
    "from": 205,
    "label": "has",
    "to": 215
  }, {
    "from": 205,
    "label": "has",
    "to": 216
  }, {
    "from": 205,
    "label": "has",
    "to": 217
  }, {
    "from": 205,
    "label": "has",
    "to": 218
  }, {
    "from": 205,
    "label": "has",
    "to": 219
  }, {
    "from": 219,
    "label": "has",
    "to": 220
  }, {
    "from": 219,
    "label": "has",
    "to": 221
  }, {
    "from": 205,
    "label": "has",
    "to": 222
  }, {
    "from": 222,
    "label": "has",
    "to": 223
  }, {
    "from": 205,
    "label": "has",
    "to": 220
  }, {
    "from": 205,
    "label": "has",
    "to": 224
  }, {
    "from": 193,
    "label": "has",
    "to": 225
  }, {
    "from": 225,
    "label": "has",
    "to": 226
  }, {
    "from": 193,
    "label": "has",
    "to": 227
  }, {
    "from": 228,
    "label": "has",
    "to": 229
  }, {
    "from": 228,
    "label": "has",
    "to": 230
  }, {
    "from": 228,
    "label": "has",
    "to": 231
  }, {
    "from": 228,
    "label": "has",
    "to": 232
  }, {
    "from": 228,
    "label": "has",
    "to": 233
  }, {
    "from": 228,
    "label": "has",
    "to": 12
  }, {
    "from": 228,
    "label": "has",
    "to": 234
  }, {
    "from": 235,
    "label": "has",
    "to": 236
  }, {
    "from": 235,
    "label": "has",
    "to": 230
  }, {
    "from": 235,
    "label": "has",
    "to": 231
  }, {
    "from": 235,
    "label": "has",
    "to": 232
  }, {
    "from": 235,
    "label": "has",
    "to": 233
  }, {
    "from": 235,
    "label": "has",
    "to": 12
  }, {
    "from": 235,
    "label": "has",
    "to": 237
  }, {
    "from": 238,
    "label": "has",
    "to": 131
  }, {
    "from": 238,
    "label": "has",
    "to": 239
  }, {
    "from": 239,
    "label": "has",
    "to": 240
  }, {
    "from": 238,
    "label": "has",
    "to": 241
  }, {
    "from": 238,
    "label": "has",
    "to": 242
  }, {
    "from": 238,
    "label": "has",
    "to": 243
  }, {
    "from": 238,
    "label": "has",
    "to": 233
  }, {
    "from": 238,
    "label": "has",
    "to": 12
  }, {
    "from": 238,
    "label": "has",
    "to": 244
  }, {
    "from": 245,
    "label": "has",
    "to": 12
  }, {
    "from": 245,
    "label": "has",
    "to": 12
  }, {
    "from": 245,
    "label": "has",
    "to": 246
  }, {
    "from": 245,
    "label": "has",
    "to": 247
  }, {
    "from": 245,
    "label": "has",
    "to": 248
  }, {
    "from": 245,
    "label": "has",
    "to": 249
  }, {
    "from": 245,
    "label": "has",
    "to": 250
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 245,
    "label": "has",
    "to": 12
  }, {
    "from": 245,
    "label": "has",
    "to": 252
  }, {
    "from": 253,
    "label": "has",
    "to": 12
  }, {
    "from": 253,
    "label": "has",
    "to": 12
  }, {
    "from": 253,
    "label": "has",
    "to": 254
  }, {
    "from": 253,
    "label": "has",
    "to": 255
  }, {
    "from": 253,
    "label": "has",
    "to": 256
  }, {
    "from": 253,
    "label": "has",
    "to": 12
  }, {
    "from": 253,
    "label": "has",
    "to": 257
  }, {
    "from": 258,
    "label": "has",
    "to": 12
  }, {
    "from": 258,
    "label": "has",
    "to": 12
  }, {
    "from": 258,
    "label": "has",
    "to": 254
  }, {
    "from": 258,
    "label": "has",
    "to": 255
  }, {
    "from": 258,
    "label": "has",
    "to": 259
  }, {
    "from": 258,
    "label": "has",
    "to": 12
  }, {
    "from": 258,
    "label": "has",
    "to": 260
  }, {
    "from": 261,
    "label": "has",
    "to": 12
  }, {
    "from": 261,
    "label": "has",
    "to": 12
  }, {
    "from": 261,
    "label": "has",
    "to": 254
  }, {
    "from": 261,
    "label": "has",
    "to": 262
  }, {
    "from": 261,
    "label": "has",
    "to": 263
  }, {
    "from": 261,
    "label": "has",
    "to": 12
  }, {
    "from": 261,
    "label": "has",
    "to": 264
  }, {
    "from": 265,
    "label": "has",
    "to": 12
  }, {
    "from": 265,
    "label": "has",
    "to": 12
  }, {
    "from": 265,
    "label": "has",
    "to": 254
  }, {
    "from": 265,
    "label": "has",
    "to": 266
  }, {
    "from": 265,
    "label": "has",
    "to": 12
  }, {
    "from": 265,
    "label": "has",
    "to": 267
  }, {
    "from": 268,
    "label": "has",
    "to": 12
  }, {
    "from": 268,
    "label": "has",
    "to": 12
  }, {
    "from": 268,
    "label": "has",
    "to": 269
  }, {
    "from": 268,
    "label": "has",
    "to": 262
  }, {
    "from": 268,
    "label": "has",
    "to": 263
  }, {
    "from": 268,
    "label": "has",
    "to": 12
  }, {
    "from": 268,
    "label": "has",
    "to": 270
  }, {
    "from": 271,
    "label": "has",
    "to": 12
  }, {
    "from": 271,
    "label": "has",
    "to": 12
  }, {
    "from": 271,
    "label": "has",
    "to": 269
  }, {
    "from": 271,
    "label": "has",
    "to": 255
  }, {
    "from": 271,
    "label": "has",
    "to": 256
  }, {
    "from": 271,
    "label": "has",
    "to": 12
  }, {
    "from": 271,
    "label": "has",
    "to": 272
  }, {
    "from": 273,
    "label": "has",
    "to": 12
  }, {
    "from": 273,
    "label": "has",
    "to": 12
  }, {
    "from": 273,
    "label": "has",
    "to": 274
  }, {
    "from": 273,
    "label": "has",
    "to": 275
  }, {
    "from": 273,
    "label": "has",
    "to": 40
  }, {
    "from": 273,
    "label": "has",
    "to": 41
  }, {
    "from": 273,
    "label": "has",
    "to": 247
  }, {
    "from": 273,
    "label": "has",
    "to": 276
  }, {
    "from": 276,
    "label": "has",
    "to": 277
  }, {
    "from": 273,
    "label": "has",
    "to": 249
  }, {
    "from": 273,
    "label": "has",
    "to": 278
  }, {
    "from": 273,
    "label": "has",
    "to": 12
  }, {
    "from": 273,
    "label": "has",
    "to": 279
  }, {
    "from": 280,
    "label": "has",
    "to": 281
  }, {
    "from": 281,
    "label": "has",
    "to": 282
  }, {
    "from": 281,
    "label": "has",
    "to": 275
  }, {
    "from": 281,
    "label": "has",
    "to": 283
  }, {
    "from": 281,
    "label": "has",
    "to": 284
  }, {
    "from": 281,
    "label": "has",
    "to": 285
  }, {
    "from": 280,
    "label": "has",
    "to": 12
  }, {
    "from": 280,
    "label": "has",
    "to": 12
  }, {
    "from": 280,
    "label": "has",
    "to": 12
  }, {
    "from": 280,
    "label": "has",
    "to": 12
  }, {
    "from": 280,
    "label": "has",
    "to": 286
  }, {
    "from": 287,
    "label": "has",
    "to": 288
  }, {
    "from": 287,
    "label": "has",
    "to": 289
  }, {
    "from": 287,
    "label": "has",
    "to": 290
  }, {
    "from": 287,
    "label": "has",
    "to": 291
  }, {
    "from": 287,
    "label": "has",
    "to": 292
  }, {
    "from": 287,
    "label": "has",
    "to": 293
  }, {
    "from": 287,
    "label": "has",
    "to": 294
  }, {
    "from": 287,
    "label": "has",
    "to": 278
  }, {
    "from": 287,
    "label": "has",
    "to": 12
  }, {
    "from": 287,
    "label": "has",
    "to": 295
  }, {
    "from": 296,
    "label": "has",
    "to": 12
  }, {
    "from": 296,
    "label": "has",
    "to": 297
  }, {
    "from": 296,
    "label": "has",
    "to": 283
  }, {
    "from": 296,
    "label": "has",
    "to": 298
  }, {
    "from": 296,
    "label": "has",
    "to": 52
  }, {
    "from": 296,
    "label": "has",
    "to": 40
  }, {
    "from": 296,
    "label": "has",
    "to": 299
  }, {
    "from": 296,
    "label": "has",
    "to": 233
  }, {
    "from": 296,
    "label": "has",
    "to": 12
  }, {
    "from": 296,
    "label": "has",
    "to": 300
  }, {
    "from": 301,
    "label": "has",
    "to": 302
  }, {
    "from": 301,
    "label": "has",
    "to": 230
  }, {
    "from": 301,
    "label": "has",
    "to": 231
  }, {
    "from": 301,
    "label": "has",
    "to": 233
  }, {
    "from": 301,
    "label": "has",
    "to": 12
  }, {
    "from": 301,
    "label": "has",
    "to": 303
  }, {
    "from": 304,
    "label": "has",
    "to": 305
  }, {
    "from": 304,
    "label": "has",
    "to": 230
  }, {
    "from": 304,
    "label": "has",
    "to": 306
  }, {
    "from": 304,
    "label": "has",
    "to": 307
  }, {
    "from": 307,
    "label": "has",
    "to": 308
  }, {
    "from": 307,
    "label": "has",
    "to": 309
  }, {
    "from": 304,
    "label": "has",
    "to": 40
  }, {
    "from": 304,
    "label": "has",
    "to": 233
  }, {
    "from": 304,
    "label": "has",
    "to": 12
  }, {
    "from": 304,
    "label": "has",
    "to": 310
  }, {
    "from": 311,
    "label": "has",
    "to": 12
  }, {
    "from": 311,
    "label": "has",
    "to": 312
  }, {
    "from": 311,
    "label": "has",
    "to": 40
  }, {
    "from": 311,
    "label": "has",
    "to": 12
  }, {
    "from": 311,
    "label": "has",
    "to": 313
  }, {
    "from": 314,
    "label": "has",
    "to": 12
  }, {
    "from": 314,
    "label": "has",
    "to": 40
  }, {
    "from": 314,
    "label": "has",
    "to": 315
  }, {
    "from": 314,
    "label": "has",
    "to": 316
  }, {
    "from": 316,
    "label": "has",
    "to": 317
  }, {
    "from": 314,
    "label": "has",
    "to": 12
  }, {
    "from": 314,
    "label": "has",
    "to": 318
  }, {
    "from": 319,
    "label": "has",
    "to": 12
  }, {
    "from": 319,
    "label": "has",
    "to": 320
  }, {
    "from": 321,
    "label": "has",
    "to": 322
  }, {
    "from": 322,
    "label": "has",
    "to": 323
  }, {
    "from": 321,
    "label": "has",
    "to": 12
  }, {
    "from": 321,
    "label": "has",
    "to": 324
  }, {
    "from": 325,
    "label": "has",
    "to": 12
  }, {
    "from": 325,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 178,
    "label": "has",
    "to": 180
  }, {
    "from": 325,
    "label": "has",
    "to": 326
  }, {
    "from": 325,
    "label": "has",
    "to": 327
  }, {
    "from": 325,
    "label": "has",
    "to": 183
  }, {
    "from": 325,
    "label": "has",
    "to": 12
  }, {
    "from": 325,
    "label": "has",
    "to": 328
  }, {
    "from": 329,
    "label": "has",
    "to": 12
  }, {
    "from": 329,
    "label": "has",
    "to": 330
  }, {
    "from": 331,
    "label": "has",
    "to": 12
  }, {
    "from": 331,
    "label": "has",
    "to": 332
  }, {
    "from": 333,
    "label": "has",
    "to": 334
  }, {
    "from": 334,
    "label": "has",
    "to": 335
  }, {
    "from": 334,
    "label": "has",
    "to": 336
  }, {
    "from": 334,
    "label": "has",
    "to": 337
  }, {
    "from": 334,
    "label": "has",
    "to": 338
  }, {
    "from": 338,
    "label": "has",
    "to": 339
  }, {
    "from": 339,
    "label": "has",
    "to": 340
  }, {
    "from": 339,
    "label": "has",
    "to": 341
  }, {
    "from": 339,
    "label": "has",
    "to": 340
  }, {
    "from": 339,
    "label": "has",
    "to": 342
  }, {
    "from": 339,
    "label": "has",
    "to": 340
  }, {
    "from": 339,
    "label": "has",
    "to": 343
  }, {
    "from": 339,
    "label": "has",
    "to": 340
  }, {
    "from": 339,
    "label": "has",
    "to": 344
  }, {
    "from": 339,
    "label": "has",
    "to": 340
  }, {
    "from": 339,
    "label": "has",
    "to": 345
  }, {
    "from": 334,
    "label": "has",
    "to": 340
  }, {
    "from": 334,
    "label": "has",
    "to": 346
  }, {
    "from": 334,
    "label": "has",
    "to": 340
  }, {
    "from": 334,
    "label": "has",
    "to": 347
  }, {
    "from": 334,
    "label": "has",
    "to": 348
  }, {
    "from": 348,
    "label": "has",
    "to": 340
  }, {
    "from": 348,
    "label": "has",
    "to": 349
  }, {
    "from": 348,
    "label": "has",
    "to": 340
  }, {
    "from": 348,
    "label": "has",
    "to": 350
  }, {
    "from": 348,
    "label": "has",
    "to": 340
  }, {
    "from": 348,
    "label": "has",
    "to": 351
  }, {
    "from": 334,
    "label": "has",
    "to": 352
  }, {
    "from": 352,
    "label": "has",
    "to": 340
  }, {
    "from": 352,
    "label": "has",
    "to": 353
  }, {
    "from": 334,
    "label": "has",
    "to": 340
  }, {
    "from": 334,
    "label": "has",
    "to": 354
  }, {
    "from": 333,
    "label": "has",
    "to": 12
  }, {
    "from": 333,
    "label": "has",
    "to": 12
  }, {
    "from": 333,
    "label": "has",
    "to": 355
  }, {
    "from": 355,
    "label": "has",
    "to": 356
  }, {
    "from": 333,
    "label": "has",
    "to": 357
  }, {
    "from": 333,
    "label": "has",
    "to": 358
  }, {
    "from": 333,
    "label": "has",
    "to": 12
  }, {
    "from": 333,
    "label": "has",
    "to": 359
  }, {
    "from": 360,
    "label": "has",
    "to": 12
  }, {
    "from": 360,
    "label": "has",
    "to": 361
  }, {
    "from": 360,
    "label": "has",
    "to": 52
  }, {
    "from": 360,
    "label": "has",
    "to": 40
  }, {
    "from": 360,
    "label": "has",
    "to": 12
  }, {
    "from": 360,
    "label": "has",
    "to": 362
  }, {
    "from": 363,
    "label": "has",
    "to": 12
  }, {
    "from": 363,
    "label": "has",
    "to": 12
  }, {
    "from": 363,
    "label": "has",
    "to": 364
  }, {
    "from": 363,
    "label": "has",
    "to": 247
  }, {
    "from": 363,
    "label": "has",
    "to": 40
  }, {
    "from": 363,
    "label": "has",
    "to": 249
  }, {
    "from": 363,
    "label": "has",
    "to": 250
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 363,
    "label": "has",
    "to": 12
  }, {
    "from": 363,
    "label": "has",
    "to": 365
  }, {
    "from": 366,
    "label": "has",
    "to": 367
  }, {
    "from": 366,
    "label": "has",
    "to": 12
  }, {
    "from": 366,
    "label": "has",
    "to": 368
  }, {
    "from": 369,
    "label": "has",
    "to": 367
  }, {
    "from": 369,
    "label": "has",
    "to": 370
  }, {
    "from": 369,
    "label": "has",
    "to": 371
  }, {
    "from": 371,
    "label": "has",
    "to": 372
  }, {
    "from": 371,
    "label": "has",
    "to": 373
  }, {
    "from": 369,
    "label": "has",
    "to": 12
  }, {
    "from": 369,
    "label": "has",
    "to": 374
  }, {
    "from": 375,
    "label": "has",
    "to": 376
  }, {
    "from": 376,
    "label": "has",
    "to": 377
  }, {
    "from": 376,
    "label": "has",
    "to": 378
  }, {
    "from": 375,
    "label": "has",
    "to": 379
  }, {
    "from": 380,
    "label": "has",
    "to": 381
  }, {
    "from": 380,
    "label": "has",
    "to": 382
  }, {
    "from": 380,
    "label": "has",
    "to": 383
  }, {
    "from": 380,
    "label": "has",
    "to": 384
  }, {
    "from": 380,
    "label": "has",
    "to": 385
  }, {
    "from": 380,
    "label": "has",
    "to": 386
  }, {
    "from": 380,
    "label": "has",
    "to": 387
  }, {
    "from": 387,
    "label": "has",
    "to": 388
  }, {
    "from": 388,
    "label": "has",
    "to": 389
  }, {
    "from": 388,
    "label": "has",
    "to": 317
  }, {
    "from": 387,
    "label": "has",
    "to": 390
  }, {
    "from": 387,
    "label": "has",
    "to": 278
  }, {
    "from": 387,
    "label": "has",
    "to": 391
  }, {
    "from": 391,
    "label": "has",
    "to": 392
  }, {
    "from": 391,
    "label": "has",
    "to": 393
  }, {
    "from": 391,
    "label": "has",
    "to": 394
  }, {
    "from": 387,
    "label": "has",
    "to": 395
  }, {
    "from": 395,
    "label": "has",
    "to": 396
  }, {
    "from": 387,
    "label": "has",
    "to": 397
  }, {
    "from": 387,
    "label": "has",
    "to": 398
  }, {
    "from": 387,
    "label": "has",
    "to": 399
  }, {
    "from": 399,
    "label": "has",
    "to": 400
  }, {
    "from": 399,
    "label": "has",
    "to": 401
  }, {
    "from": 399,
    "label": "has",
    "to": 402
  }, {
    "from": 387,
    "label": "has",
    "to": 403
  }, {
    "from": 403,
    "label": "has",
    "to": 404
  }, {
    "from": 387,
    "label": "has",
    "to": 397
  }, {
    "from": 387,
    "label": "has",
    "to": 405
  }, {
    "from": 405,
    "label": "has",
    "to": 278
  }, {
    "from": 380,
    "label": "has",
    "to": 406
  }, {
    "from": 406,
    "label": "has",
    "to": 407
  }, {
    "from": 406,
    "label": "has",
    "to": 408
  }, {
    "from": 406,
    "label": "has",
    "to": 409
  }, {
    "from": 406,
    "label": "has",
    "to": 410
  }, {
    "from": 410,
    "label": "has",
    "to": 411
  }, {
    "from": 380,
    "label": "has",
    "to": 412
  }, {
    "from": 412,
    "label": "has",
    "to": 413
  }, {
    "from": 413,
    "label": "has",
    "to": 414
  }, {
    "from": 413,
    "label": "has",
    "to": 415
  }, {
    "from": 415,
    "label": "has",
    "to": 416
  }, {
    "from": 415,
    "label": "has",
    "to": 417
  }, {
    "from": 415,
    "label": "has",
    "to": 418
  }, {
    "from": 418,
    "label": "has",
    "to": 419
  }, {
    "from": 418,
    "label": "has",
    "to": 420
  }, {
    "from": 415,
    "label": "has",
    "to": 421
  }, {
    "from": 413,
    "label": "has",
    "to": 422
  }, {
    "from": 380,
    "label": "has",
    "to": 423
  }, {
    "from": 423,
    "label": "has",
    "to": 424
  }, {
    "from": 423,
    "label": "has",
    "to": 12
  }, {
    "from": 423,
    "label": "has",
    "to": 425
  }, {
    "from": 423,
    "label": "has",
    "to": 426
  }, {
    "from": 423,
    "label": "has",
    "to": 427
  }, {
    "from": 427,
    "label": "has",
    "to": 428
  }, {
    "from": 427,
    "label": "has",
    "to": 429
  }, {
    "from": 427,
    "label": "has",
    "to": 430
  }, {
    "from": 427,
    "label": "has",
    "to": 431
  }, {
    "from": 427,
    "label": "has",
    "to": 432
  }, {
    "from": 423,
    "label": "has",
    "to": 433
  }, {
    "from": 423,
    "label": "has",
    "to": 434
  }, {
    "from": 423,
    "label": "has",
    "to": 435
  }, {
    "from": 423,
    "label": "has",
    "to": 436
  }, {
    "from": 436,
    "label": "has",
    "to": 437
  }, {
    "from": 436,
    "label": "has",
    "to": 438
  }, {
    "from": 438,
    "label": "has",
    "to": 439
  }, {
    "from": 438,
    "label": "has",
    "to": 440
  }, {
    "from": 423,
    "label": "has",
    "to": 441
  }, {
    "from": 423,
    "label": "has",
    "to": 442
  }, {
    "from": 423,
    "label": "has",
    "to": 443
  }, {
    "from": 380,
    "label": "has",
    "to": 444
  }, {
    "from": 444,
    "label": "has",
    "to": 445
  }, {
    "from": 444,
    "label": "has",
    "to": 446
  }, {
    "from": 444,
    "label": "has",
    "to": 447
  }, {
    "from": 444,
    "label": "has",
    "to": 448
  }, {
    "from": 444,
    "label": "has",
    "to": 449
  }, {
    "from": 444,
    "label": "has",
    "to": 450
  }, {
    "from": 450,
    "label": "has",
    "to": 451
  }, {
    "from": 450,
    "label": "has",
    "to": 452
  }, {
    "from": 444,
    "label": "has",
    "to": 453
  }, {
    "from": 444,
    "label": "has",
    "to": 454
  }, {
    "from": 444,
    "label": "has",
    "to": 455
  }, {
    "from": 455,
    "label": "has",
    "to": 456
  }, {
    "from": 456,
    "label": "has",
    "to": 457
  }, {
    "from": 444,
    "label": "has",
    "to": 233
  }, {
    "from": 380,
    "label": "has",
    "to": 458
  }, {
    "from": 380,
    "label": "has",
    "to": 459
  }, {
    "from": 459,
    "label": "has",
    "to": 460
  }, {
    "from": 459,
    "label": "has",
    "to": 12
  }, {
    "from": 459,
    "label": "has",
    "to": 461
  }, {
    "from": 459,
    "label": "has",
    "to": 462
  }, {
    "from": 462,
    "label": "has",
    "to": 463
  }, {
    "from": 462,
    "label": "has",
    "to": 464
  }, {
    "from": 459,
    "label": "has",
    "to": 465
  }, {
    "from": 459,
    "label": "has",
    "to": 466
  }, {
    "from": 459,
    "label": "has",
    "to": 467
  }, {
    "from": 467,
    "label": "has",
    "to": 468
  }, {
    "from": 468,
    "label": "has",
    "to": 469
  }, {
    "from": 467,
    "label": "has",
    "to": 470
  }, {
    "from": 467,
    "label": "has",
    "to": 471
  }, {
    "from": 467,
    "label": "has",
    "to": 472
  }, {
    "from": 459,
    "label": "has",
    "to": 473
  }, {
    "from": 459,
    "label": "has",
    "to": 474
  }, {
    "from": 459,
    "label": "has",
    "to": 475
  }, {
    "from": 459,
    "label": "has",
    "to": 476
  }, {
    "from": 459,
    "label": "has",
    "to": 477
  }, {
    "from": 459,
    "label": "has",
    "to": 478
  }, {
    "from": 459,
    "label": "has",
    "to": 479
  }, {
    "from": 459,
    "label": "has",
    "to": 480
  }, {
    "from": 459,
    "label": "has",
    "to": 481
  }, {
    "from": 481,
    "label": "has",
    "to": 482
  }, {
    "from": 481,
    "label": "has",
    "to": 483
  }, {
    "from": 481,
    "label": "has",
    "to": 484
  }, {
    "from": 481,
    "label": "has",
    "to": 485
  }, {
    "from": 485,
    "label": "has",
    "to": 486
  }, {
    "from": 485,
    "label": "has",
    "to": 487
  }, {
    "from": 459,
    "label": "has",
    "to": 488
  }, {
    "from": 488,
    "label": "has",
    "to": 489
  }, {
    "from": 488,
    "label": "has",
    "to": 490
  }, {
    "from": 490,
    "label": "has",
    "to": 486
  }, {
    "from": 490,
    "label": "has",
    "to": 487
  }, {
    "from": 488,
    "label": "has",
    "to": 491
  }, {
    "from": 488,
    "label": "has",
    "to": 492
  }, {
    "from": 488,
    "label": "has",
    "to": 493
  }, {
    "from": 459,
    "label": "has",
    "to": 494
  }, {
    "from": 459,
    "label": "has",
    "to": 495
  }, {
    "from": 459,
    "label": "has",
    "to": 496
  }, {
    "from": 459,
    "label": "has",
    "to": 497
  }, {
    "from": 459,
    "label": "has",
    "to": 498
  }, {
    "from": 459,
    "label": "has",
    "to": 499
  }, {
    "from": 499,
    "label": "has",
    "to": 500
  }, {
    "from": 459,
    "label": "has",
    "to": 501
  }, {
    "from": 459,
    "label": "has",
    "to": 502
  }, {
    "from": 459,
    "label": "has",
    "to": 503
  }, {
    "from": 459,
    "label": "has",
    "to": 504
  }, {
    "from": 504,
    "label": "has",
    "to": 505
  }, {
    "from": 459,
    "label": "has",
    "to": 12
  }, {
    "from": 459,
    "label": "has",
    "to": 506
  }, {
    "from": 459,
    "label": "has",
    "to": 507
  }, {
    "from": 507,
    "label": "has",
    "to": 508
  }, {
    "from": 459,
    "label": "has",
    "to": 509
  }, {
    "from": 380,
    "label": "has",
    "to": 510
  }, {
    "from": 380,
    "label": "has",
    "to": 511
  }, {
    "from": 511,
    "label": "has",
    "to": 512
  }, {
    "from": 511,
    "label": "has",
    "to": 513
  }, {
    "from": 511,
    "label": "has",
    "to": 514
  }, {
    "from": 511,
    "label": "has",
    "to": 515
  }, {
    "from": 511,
    "label": "has",
    "to": 512
  }, {
    "from": 511,
    "label": "has",
    "to": 513
  }, {
    "from": 511,
    "label": "has",
    "to": 514
  }, {
    "from": 511,
    "label": "has",
    "to": 515
  }, {
    "from": 511,
    "label": "has",
    "to": 516
  }, {
    "from": 511,
    "label": "has",
    "to": 517
  }, {
    "from": 511,
    "label": "has",
    "to": 518
  }, {
    "from": 511,
    "label": "has",
    "to": 519
  }, {
    "from": 511,
    "label": "has",
    "to": 520
  }, {
    "from": 511,
    "label": "has",
    "to": 519
  }, {
    "from": 511,
    "label": "has",
    "to": 521
  }, {
    "from": 511,
    "label": "has",
    "to": 522
  }, {
    "from": 511,
    "label": "has",
    "to": 523
  }, {
    "from": 511,
    "label": "has",
    "to": 524
  }, {
    "from": 524,
    "label": "has",
    "to": 525
  }, {
    "from": 524,
    "label": "has",
    "to": 526
  }, {
    "from": 524,
    "label": "has",
    "to": 527
  }, {
    "from": 511,
    "label": "has",
    "to": 528
  }, {
    "from": 511,
    "label": "has",
    "to": 529
  }, {
    "from": 511,
    "label": "has",
    "to": 521
  }, {
    "from": 511,
    "label": "has",
    "to": 530
  }, {
    "from": 511,
    "label": "has",
    "to": 531
  }, {
    "from": 531,
    "label": "has",
    "to": 532
  }, {
    "from": 532,
    "label": "has",
    "to": 533
  }, {
    "from": 532,
    "label": "has",
    "to": 534
  }, {
    "from": 511,
    "label": "has",
    "to": 535
  }, {
    "from": 511,
    "label": "has",
    "to": 536
  }, {
    "from": 536,
    "label": "has",
    "to": 537
  }, {
    "from": 536,
    "label": "has",
    "to": 538
  }, {
    "from": 536,
    "label": "has",
    "to": 539
  }, {
    "from": 536,
    "label": "has",
    "to": 540
  }, {
    "from": 511,
    "label": "has",
    "to": 541
  }, {
    "from": 511,
    "label": "has",
    "to": 542
  }, {
    "from": 511,
    "label": "has",
    "to": 543
  }, {
    "from": 511,
    "label": "has",
    "to": 544
  }, {
    "from": 511,
    "label": "has",
    "to": 545
  }, {
    "from": 511,
    "label": "has",
    "to": 546
  }, {
    "from": 546,
    "label": "has",
    "to": 547
  }, {
    "from": 546,
    "label": "has",
    "to": 548
  }, {
    "from": 511,
    "label": "has",
    "to": 549
  }, {
    "from": 511,
    "label": "has",
    "to": 550
  }, {
    "from": 511,
    "label": "has",
    "to": 551
  }, {
    "from": 511,
    "label": "has",
    "to": 552
  }, {
    "from": 511,
    "label": "has",
    "to": 553
  }, {
    "from": 511,
    "label": "has",
    "to": 554
  }, {
    "from": 511,
    "label": "has",
    "to": 555
  }, {
    "from": 511,
    "label": "has",
    "to": 556
  }, {
    "from": 511,
    "label": "has",
    "to": 557
  }, {
    "from": 557,
    "label": "has",
    "to": 558
  }, {
    "from": 557,
    "label": "has",
    "to": 559
  }, {
    "from": 557,
    "label": "has",
    "to": 560
  }, {
    "from": 560,
    "label": "has",
    "to": 561
  }, {
    "from": 560,
    "label": "has",
    "to": 562
  }, {
    "from": 557,
    "label": "has",
    "to": 563
  }, {
    "from": 557,
    "label": "has",
    "to": 564
  }, {
    "from": 557,
    "label": "has",
    "to": 565
  }, {
    "from": 557,
    "label": "has",
    "to": 566
  }, {
    "from": 557,
    "label": "has",
    "to": 567
  }, {
    "from": 557,
    "label": "has",
    "to": 568
  }, {
    "from": 511,
    "label": "has",
    "to": 569
  }, {
    "from": 511,
    "label": "has",
    "to": 570
  }, {
    "from": 511,
    "label": "has",
    "to": 571
  }, {
    "from": 511,
    "label": "has",
    "to": 572
  }, {
    "from": 511,
    "label": "has",
    "to": 573
  }, {
    "from": 511,
    "label": "has",
    "to": 535
  }, {
    "from": 511,
    "label": "has",
    "to": 536
  }, {
    "from": 536,
    "label": "has",
    "to": 537
  }, {
    "from": 536,
    "label": "has",
    "to": 538
  }, {
    "from": 536,
    "label": "has",
    "to": 539
  }, {
    "from": 536,
    "label": "has",
    "to": 540
  }, {
    "from": 511,
    "label": "has",
    "to": 574
  }, {
    "from": 511,
    "label": "has",
    "to": 574
  }, {
    "from": 511,
    "label": "has",
    "to": 574
  }, {
    "from": 511,
    "label": "has",
    "to": 574
  }, {
    "from": 511,
    "label": "has",
    "to": 575
  }, {
    "from": 511,
    "label": "has",
    "to": 576
  }, {
    "from": 511,
    "label": "has",
    "to": 577
  }, {
    "from": 511,
    "label": "has",
    "to": 465
  }, {
    "from": 511,
    "label": "has",
    "to": 466
  }, {
    "from": 511,
    "label": "has",
    "to": 578
  }, {
    "from": 578,
    "label": "has",
    "to": 579
  }, {
    "from": 578,
    "label": "has",
    "to": 580
  }, {
    "from": 580,
    "label": "has",
    "to": 581
  }, {
    "from": 580,
    "label": "has",
    "to": 582
  }, {
    "from": 582,
    "label": "has",
    "to": 583
  }, {
    "from": 582,
    "label": "has",
    "to": 584
  }, {
    "from": 578,
    "label": "has",
    "to": 585
  }, {
    "from": 585,
    "label": "has",
    "to": 586
  }, {
    "from": 585,
    "label": "has",
    "to": 587
  }, {
    "from": 585,
    "label": "has",
    "to": 588
  }, {
    "from": 588,
    "label": "has",
    "to": 589
  }, {
    "from": 588,
    "label": "has",
    "to": 590
  }, {
    "from": 585,
    "label": "has",
    "to": 591
  }, {
    "from": 585,
    "label": "has",
    "to": 592
  }, {
    "from": 592,
    "label": "has",
    "to": 593
  }, {
    "from": 592,
    "label": "has",
    "to": 594
  }, {
    "from": 592,
    "label": "has",
    "to": 595
  }, {
    "from": 595,
    "label": "has",
    "to": 596
  }, {
    "from": 595,
    "label": "has",
    "to": 597
  }, {
    "from": 592,
    "label": "has",
    "to": 598
  }, {
    "from": 592,
    "label": "has",
    "to": 599
  }, {
    "from": 592,
    "label": "has",
    "to": 600
  }, {
    "from": 600,
    "label": "has",
    "to": 601
  }, {
    "from": 600,
    "label": "has",
    "to": 602
  }, {
    "from": 592,
    "label": "has",
    "to": 603
  }, {
    "from": 592,
    "label": "has",
    "to": 604
  }, {
    "from": 585,
    "label": "has",
    "to": 605
  }, {
    "from": 605,
    "label": "has",
    "to": 606
  }, {
    "from": 578,
    "label": "has",
    "to": 472
  }, {
    "from": 511,
    "label": "has",
    "to": 607
  }, {
    "from": 511,
    "label": "has",
    "to": 608
  }, {
    "from": 511,
    "label": "has",
    "to": 609
  }, {
    "from": 511,
    "label": "has",
    "to": 610
  }, {
    "from": 511,
    "label": "has",
    "to": 611
  }, {
    "from": 511,
    "label": "has",
    "to": 612
  }, {
    "from": 511,
    "label": "has",
    "to": 613
  }, {
    "from": 613,
    "label": "has",
    "to": 614
  }, {
    "from": 613,
    "label": "has",
    "to": 615
  }, {
    "from": 511,
    "label": "has",
    "to": 616
  }, {
    "from": 511,
    "label": "has",
    "to": 477
  }, {
    "from": 511,
    "label": "has",
    "to": 478
  }, {
    "from": 511,
    "label": "has",
    "to": 617
  }, {
    "from": 617,
    "label": "has",
    "to": 618
  }, {
    "from": 617,
    "label": "has",
    "to": 619
  }, {
    "from": 617,
    "label": "has",
    "to": 620
  }, {
    "from": 617,
    "label": "has",
    "to": 621
  }, {
    "from": 617,
    "label": "has",
    "to": 622
  }, {
    "from": 511,
    "label": "has",
    "to": 623
  }, {
    "from": 623,
    "label": "has",
    "to": 624
  }, {
    "from": 623,
    "label": "has",
    "to": 625
  }, {
    "from": 623,
    "label": "has",
    "to": 626
  }, {
    "from": 623,
    "label": "has",
    "to": 627
  }, {
    "from": 623,
    "label": "has",
    "to": 628
  }, {
    "from": 628,
    "label": "has",
    "to": 629
  }, {
    "from": 628,
    "label": "has",
    "to": 630
  }, {
    "from": 628,
    "label": "has",
    "to": 631
  }, {
    "from": 628,
    "label": "has",
    "to": 632
  }, {
    "from": 623,
    "label": "has",
    "to": 633
  }, {
    "from": 623,
    "label": "has",
    "to": 634
  }, {
    "from": 511,
    "label": "has",
    "to": 635
  }, {
    "from": 635,
    "label": "has",
    "to": 636
  }, {
    "from": 635,
    "label": "has",
    "to": 637
  }, {
    "from": 637,
    "label": "has",
    "to": 561
  }, {
    "from": 637,
    "label": "has",
    "to": 638
  }, {
    "from": 637,
    "label": "has",
    "to": 639
  }, {
    "from": 635,
    "label": "has",
    "to": 640
  }, {
    "from": 635,
    "label": "has",
    "to": 641
  }, {
    "from": 641,
    "label": "has",
    "to": 642
  }, {
    "from": 641,
    "label": "has",
    "to": 643
  }, {
    "from": 635,
    "label": "has",
    "to": 644
  }, {
    "from": 644,
    "label": "has",
    "to": 645
  }, {
    "from": 644,
    "label": "has",
    "to": 646
  }, {
    "from": 644,
    "label": "has",
    "to": 647
  }, {
    "from": 635,
    "label": "has",
    "to": 648
  }, {
    "from": 635,
    "label": "has",
    "to": 649
  }, {
    "from": 635,
    "label": "has",
    "to": 650
  }, {
    "from": 650,
    "label": "has",
    "to": 651
  }, {
    "from": 511,
    "label": "has",
    "to": 652
  }, {
    "from": 511,
    "label": "has",
    "to": 653
  }, {
    "from": 511,
    "label": "has",
    "to": 654
  }, {
    "from": 511,
    "label": "has",
    "to": 655
  }, {
    "from": 511,
    "label": "has",
    "to": 656
  }, {
    "from": 511,
    "label": "has",
    "to": 657
  }, {
    "from": 511,
    "label": "has",
    "to": 658
  }, {
    "from": 511,
    "label": "has",
    "to": 659
  }, {
    "from": 659,
    "label": "has",
    "to": 660
  }, {
    "from": 659,
    "label": "has",
    "to": 661
  }, {
    "from": 659,
    "label": "has",
    "to": 662
  }, {
    "from": 662,
    "label": "has",
    "to": 663
  }, {
    "from": 662,
    "label": "has",
    "to": 664
  }, {
    "from": 662,
    "label": "has",
    "to": 665
  }, {
    "from": 659,
    "label": "has",
    "to": 666
  }, {
    "from": 659,
    "label": "has",
    "to": 667
  }, {
    "from": 659,
    "label": "has",
    "to": 668
  }, {
    "from": 668,
    "label": "has",
    "to": 669
  }, {
    "from": 668,
    "label": "has",
    "to": 670
  }, {
    "from": 511,
    "label": "has",
    "to": 671
  }, {
    "from": 511,
    "label": "has",
    "to": 672
  }, {
    "from": 672,
    "label": "has",
    "to": 673
  }, {
    "from": 511,
    "label": "has",
    "to": 674
  }, {
    "from": 511,
    "label": "has",
    "to": 577
  }, {
    "from": 511,
    "label": "has",
    "to": 675
  }, {
    "from": 511,
    "label": "has",
    "to": 676
  }, {
    "from": 511,
    "label": "has",
    "to": 677
  }, {
    "from": 511,
    "label": "has",
    "to": 678
  }, {
    "from": 511,
    "label": "has",
    "to": 679
  }, {
    "from": 511,
    "label": "has",
    "to": 676
  }, {
    "from": 511,
    "label": "has",
    "to": 680
  }, {
    "from": 511,
    "label": "has",
    "to": 681
  }, {
    "from": 511,
    "label": "has",
    "to": 682
  }, {
    "from": 380,
    "label": "has",
    "to": 683
  }, {
    "from": 380,
    "label": "has",
    "to": 684
  }, {
    "from": 684,
    "label": "has",
    "to": 12
  }, {
    "from": 380,
    "label": "has",
    "to": 685
  }, {
    "from": 685,
    "label": "has",
    "to": 686
  }, {
    "from": 685,
    "label": "has",
    "to": 687
  }, {
    "from": 685,
    "label": "has",
    "to": 688
  }, {
    "from": 685,
    "label": "has",
    "to": 689
  }, {
    "from": 685,
    "label": "has",
    "to": 690
  }, {
    "from": 685,
    "label": "has",
    "to": 691
  }, {
    "from": 685,
    "label": "has",
    "to": 692
  }, {
    "from": 692,
    "label": "has",
    "to": 693
  }, {
    "from": 692,
    "label": "has",
    "to": 694
  }, {
    "from": 692,
    "label": "has",
    "to": 695
  }, {
    "from": 692,
    "label": "has",
    "to": 696
  }, {
    "from": 692,
    "label": "has",
    "to": 697
  }, {
    "from": 697,
    "label": "has",
    "to": 698
  }, {
    "from": 697,
    "label": "has",
    "to": 699
  }, {
    "from": 697,
    "label": "has",
    "to": 700
  }, {
    "from": 697,
    "label": "has",
    "to": 701
  }, {
    "from": 697,
    "label": "has",
    "to": 702
  }, {
    "from": 697,
    "label": "has",
    "to": 703
  }, {
    "from": 692,
    "label": "has",
    "to": 704
  }, {
    "from": 704,
    "label": "has",
    "to": 705
  }, {
    "from": 704,
    "label": "has",
    "to": 706
  }, {
    "from": 706,
    "label": "has",
    "to": 707
  }, {
    "from": 706,
    "label": "has",
    "to": 708
  }, {
    "from": 706,
    "label": "has",
    "to": 709
  }, {
    "from": 704,
    "label": "has",
    "to": 710
  }, {
    "from": 710,
    "label": "has",
    "to": 711
  }, {
    "from": 711,
    "label": "has",
    "to": 712
  }, {
    "from": 712,
    "label": "has",
    "to": 713
  }, {
    "from": 712,
    "label": "has",
    "to": 714
  }, {
    "from": 704,
    "label": "has",
    "to": 715
  }, {
    "from": 704,
    "label": "has",
    "to": 716
  }, {
    "from": 685,
    "label": "has",
    "to": 717
  }, {
    "from": 685,
    "label": "has",
    "to": 718
  }, {
    "from": 685,
    "label": "has",
    "to": 719
  }, {
    "from": 685,
    "label": "has",
    "to": 720
  }, {
    "from": 720,
    "label": "has",
    "to": 565
  }, {
    "from": 720,
    "label": "has",
    "to": 721
  }, {
    "from": 685,
    "label": "has",
    "to": 722
  }, {
    "from": 722,
    "label": "has",
    "to": 565
  }, {
    "from": 722,
    "label": "has",
    "to": 723
  }, {
    "from": 685,
    "label": "has",
    "to": 724
  }, {
    "from": 724,
    "label": "has",
    "to": 565
  }, {
    "from": 724,
    "label": "has",
    "to": 725
  }, {
    "from": 685,
    "label": "has",
    "to": 726
  }, {
    "from": 685,
    "label": "has",
    "to": 727
  }, {
    "from": 727,
    "label": "has",
    "to": 728
  }, {
    "from": 727,
    "label": "has",
    "to": 729
  }, {
    "from": 729,
    "label": "has",
    "to": 730
  }, {
    "from": 729,
    "label": "has",
    "to": 731
  }, {
    "from": 685,
    "label": "has",
    "to": 732
  }, {
    "from": 380,
    "label": "has",
    "to": 733
  }, {
    "from": 380,
    "label": "has",
    "to": 734
  }, {
    "from": 734,
    "label": "has",
    "to": 735
  }, {
    "from": 734,
    "label": "has",
    "to": 736
  }, {
    "from": 736,
    "label": "has",
    "to": 737
  }, {
    "from": 736,
    "label": "has",
    "to": 738
  }, {
    "from": 736,
    "label": "has",
    "to": 739
  }, {
    "from": 380,
    "label": "has",
    "to": 740
  }, {
    "from": 380,
    "label": "has",
    "to": 741
  }, {
    "from": 741,
    "label": "has",
    "to": 742
  }, {
    "from": 380,
    "label": "has",
    "to": 743
  }, {
    "from": 380,
    "label": "has",
    "to": 744
  }, {
    "from": 745,
    "label": "has",
    "to": 537
  }, {
    "from": 745,
    "label": "has",
    "to": 538
  }, {
    "from": 745,
    "label": "has",
    "to": 539
  }, {
    "from": 745,
    "label": "has",
    "to": 540
  }, {
    "from": 745,
    "label": "has",
    "to": 746
  }, {
    "from": 747,
    "label": "has",
    "to": 537
  }, {
    "from": 747,
    "label": "has",
    "to": 538
  }, {
    "from": 747,
    "label": "has",
    "to": 539
  }, {
    "from": 747,
    "label": "has",
    "to": 540
  }, {
    "from": 747,
    "label": "has",
    "to": 748
  }, {
    "from": 749,
    "label": "has",
    "to": 12
  }, {
    "from": 749,
    "label": "has",
    "to": 750
  }, {
    "from": 751,
    "label": "has",
    "to": 752
  }, {
    "from": 751,
    "label": "has",
    "to": 753
  }, {
    "from": 753,
    "label": "has",
    "to": 754
  }, {
    "from": 751,
    "label": "has",
    "to": 755
  }, {
    "from": 755,
    "label": "has",
    "to": 756
  }, {
    "from": 751,
    "label": "has",
    "to": 12
  }, {
    "from": 751,
    "label": "has",
    "to": 12
  }, {
    "from": 751,
    "label": "has",
    "to": 757
  }, {
    "from": 758,
    "label": "has",
    "to": 752
  }, {
    "from": 758,
    "label": "has",
    "to": 753
  }, {
    "from": 753,
    "label": "has",
    "to": 754
  }, {
    "from": 758,
    "label": "has",
    "to": 759
  }, {
    "from": 759,
    "label": "has",
    "to": 760
  }, {
    "from": 759,
    "label": "has",
    "to": 756
  }, {
    "from": 758,
    "label": "has",
    "to": 761
  }, {
    "from": 762,
    "label": "has",
    "to": 752
  }, {
    "from": 762,
    "label": "has",
    "to": 753
  }, {
    "from": 753,
    "label": "has",
    "to": 754
  }, {
    "from": 762,
    "label": "has",
    "to": 763
  }, {
    "from": 763,
    "label": "has",
    "to": 764
  }, {
    "from": 762,
    "label": "has",
    "to": 12
  }, {
    "from": 762,
    "label": "has",
    "to": 765
  }, {
    "from": 766,
    "label": "has",
    "to": 12
  }, {
    "from": 766,
    "label": "has",
    "to": 767
  }, {
    "from": 768,
    "label": "has",
    "to": 46
  }, {
    "from": 768,
    "label": "has",
    "to": 47
  }, {
    "from": 768,
    "label": "has",
    "to": 48
  }, {
    "from": 768,
    "label": "has",
    "to": 12
  }, {
    "from": 768,
    "label": "has",
    "to": 769
  }, {
    "from": 770,
    "label": "has",
    "to": 12
  }, {
    "from": 770,
    "label": "has",
    "to": 46
  }, {
    "from": 770,
    "label": "has",
    "to": 47
  }, {
    "from": 770,
    "label": "has",
    "to": 48
  }, {
    "from": 770,
    "label": "has",
    "to": 12
  }, {
    "from": 770,
    "label": "has",
    "to": 771
  }, {
    "from": 772,
    "label": "has",
    "to": 51
  }, {
    "from": 772,
    "label": "has",
    "to": 52
  }, {
    "from": 772,
    "label": "has",
    "to": 53
  }, {
    "from": 772,
    "label": "has",
    "to": 773
  }, {
    "from": 774,
    "label": "has",
    "to": 12
  }, {
    "from": 774,
    "label": "has",
    "to": 51
  }, {
    "from": 774,
    "label": "has",
    "to": 52
  }, {
    "from": 774,
    "label": "has",
    "to": 53
  }, {
    "from": 774,
    "label": "has",
    "to": 775
  }, {
    "from": 776,
    "label": "has",
    "to": 56
  }, {
    "from": 776,
    "label": "has",
    "to": 57
  }, {
    "from": 776,
    "label": "has",
    "to": 58
  }, {
    "from": 776,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 59,
    "label": "has",
    "to": 40
  }, {
    "from": 59,
    "label": "has",
    "to": 43
  }, {
    "from": 59,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 59,
    "label": "has",
    "to": 63
  }, {
    "from": 59,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 64
  }, {
    "from": 59,
    "label": "has",
    "to": 66
  }, {
    "from": 776,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 776,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 12
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 12
  }, {
    "from": 776,
    "label": "has",
    "to": 12
  }, {
    "from": 776,
    "label": "has",
    "to": 777
  }, {
    "from": 778,
    "label": "has",
    "to": 78
  }, {
    "from": 778,
    "label": "has",
    "to": 79
  }, {
    "from": 778,
    "label": "has",
    "to": 12
  }, {
    "from": 778,
    "label": "has",
    "to": 779
  }, {
    "from": 780,
    "label": "has",
    "to": 78
  }, {
    "from": 780,
    "label": "has",
    "to": 85
  }, {
    "from": 780,
    "label": "has",
    "to": 12
  }, {
    "from": 780,
    "label": "has",
    "to": 781
  }, {
    "from": 782,
    "label": "has",
    "to": 78
  }, {
    "from": 782,
    "label": "has",
    "to": 85
  }, {
    "from": 782,
    "label": "has",
    "to": 89
  }, {
    "from": 782,
    "label": "has",
    "to": 12
  }, {
    "from": 782,
    "label": "has",
    "to": 783
  }, {
    "from": 784,
    "label": "has",
    "to": 92
  }, {
    "from": 784,
    "label": "has",
    "to": 40
  }, {
    "from": 784,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 784,
    "label": "has",
    "to": 12
  }, {
    "from": 784,
    "label": "has",
    "to": 785
  }, {
    "from": 786,
    "label": "has",
    "to": 101
  }, {
    "from": 786,
    "label": "has",
    "to": 40
  }, {
    "from": 786,
    "label": "has",
    "to": 12
  }, {
    "from": 786,
    "label": "has",
    "to": 787
  }, {
    "from": 788,
    "label": "has",
    "to": 104
  }, {
    "from": 788,
    "label": "has",
    "to": 105
  }, {
    "from": 788,
    "label": "has",
    "to": 52
  }, {
    "from": 788,
    "label": "has",
    "to": 40
  }, {
    "from": 788,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 106,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 108,
    "label": "has",
    "to": 110
  }, {
    "from": 108,
    "label": "has",
    "to": 110
  }, {
    "from": 106,
    "label": "has",
    "to": 110
  }, {
    "from": 788,
    "label": "has",
    "to": 12
  }, {
    "from": 788,
    "label": "has",
    "to": 789
  }, {
    "from": 790,
    "label": "has",
    "to": 12
  }, {
    "from": 790,
    "label": "has",
    "to": 104
  }, {
    "from": 790,
    "label": "has",
    "to": 105
  }, {
    "from": 790,
    "label": "has",
    "to": 52
  }, {
    "from": 790,
    "label": "has",
    "to": 40
  }, {
    "from": 790,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 106,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 108,
    "label": "has",
    "to": 110
  }, {
    "from": 108,
    "label": "has",
    "to": 110
  }, {
    "from": 106,
    "label": "has",
    "to": 110
  }, {
    "from": 790,
    "label": "has",
    "to": 12
  }, {
    "from": 790,
    "label": "has",
    "to": 791
  }, {
    "from": 792,
    "label": "has",
    "to": 113
  }, {
    "from": 792,
    "label": "has",
    "to": 114
  }, {
    "from": 792,
    "label": "has",
    "to": 40
  }, {
    "from": 792,
    "label": "has",
    "to": 115
  }, {
    "from": 792,
    "label": "has",
    "to": 12
  }, {
    "from": 792,
    "label": "has",
    "to": 793
  }, {
    "from": 794,
    "label": "has",
    "to": 113
  }, {
    "from": 794,
    "label": "has",
    "to": 114
  }, {
    "from": 794,
    "label": "has",
    "to": 118
  }, {
    "from": 794,
    "label": "has",
    "to": 119
  }, {
    "from": 794,
    "label": "has",
    "to": 40
  }, {
    "from": 794,
    "label": "has",
    "to": 115
  }, {
    "from": 794,
    "label": "has",
    "to": 12
  }, {
    "from": 794,
    "label": "has",
    "to": 795
  }, {
    "from": 796,
    "label": "has",
    "to": 12
  }, {
    "from": 796,
    "label": "has",
    "to": 797
  }, {
    "from": 798,
    "label": "has",
    "to": 140
  }, {
    "from": 798,
    "label": "has",
    "to": 40
  }, {
    "from": 798,
    "label": "has",
    "to": 141
  }, {
    "from": 798,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 143,
    "label": "has",
    "to": 145
  }, {
    "from": 142,
    "label": "has",
    "to": 12
  }, {
    "from": 142,
    "label": "has",
    "to": 12
  }, {
    "from": 798,
    "label": "has",
    "to": 12
  }, {
    "from": 798,
    "label": "has",
    "to": 799
  }, {
    "from": 800,
    "label": "has",
    "to": 150
  }, {
    "from": 800,
    "label": "has",
    "to": 151
  }, {
    "from": 800,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 800,
    "label": "has",
    "to": 154
  }, {
    "from": 800,
    "label": "has",
    "to": 155
  }, {
    "from": 800,
    "label": "has",
    "to": 12
  }, {
    "from": 800,
    "label": "has",
    "to": 801
  }, {
    "from": 802,
    "label": "has",
    "to": 158
  }, {
    "from": 158,
    "label": "has",
    "to": 159
  }, {
    "from": 158,
    "label": "has",
    "to": 160
  }, {
    "from": 802,
    "label": "has",
    "to": 161
  }, {
    "from": 802,
    "label": "has",
    "to": 162
  }, {
    "from": 802,
    "label": "has",
    "to": 12
  }, {
    "from": 802,
    "label": "has",
    "to": 803
  }, {
    "from": 804,
    "label": "has",
    "to": 165
  }, {
    "from": 165,
    "label": "has",
    "to": 159
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 165,
    "label": "has",
    "to": 167
  }, {
    "from": 804,
    "label": "has",
    "to": 161
  }, {
    "from": 804,
    "label": "has",
    "to": 168
  }, {
    "from": 804,
    "label": "has",
    "to": 153
  }, {
    "from": 804,
    "label": "has",
    "to": 12
  }, {
    "from": 804,
    "label": "has",
    "to": 805
  }, {
    "from": 806,
    "label": "has",
    "to": 175
  }, {
    "from": 806,
    "label": "has",
    "to": 40
  }, {
    "from": 806,
    "label": "has",
    "to": 115
  }, {
    "from": 806,
    "label": "has",
    "to": 12
  }, {
    "from": 806,
    "label": "has",
    "to": 807
  }, {
    "from": 808,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 178,
    "label": "has",
    "to": 180
  }, {
    "from": 808,
    "label": "has",
    "to": 181
  }, {
    "from": 808,
    "label": "has",
    "to": 182
  }, {
    "from": 808,
    "label": "has",
    "to": 183
  }, {
    "from": 808,
    "label": "has",
    "to": 12
  }, {
    "from": 808,
    "label": "has",
    "to": 809
  }, {
    "from": 810,
    "label": "has",
    "to": 246
  }, {
    "from": 810,
    "label": "has",
    "to": 247
  }, {
    "from": 810,
    "label": "has",
    "to": 248
  }, {
    "from": 810,
    "label": "has",
    "to": 249
  }, {
    "from": 810,
    "label": "has",
    "to": 250
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 810,
    "label": "has",
    "to": 12
  }, {
    "from": 810,
    "label": "has",
    "to": 811
  }, {
    "from": 812,
    "label": "has",
    "to": 12
  }, {
    "from": 812,
    "label": "has",
    "to": 246
  }, {
    "from": 812,
    "label": "has",
    "to": 247
  }, {
    "from": 812,
    "label": "has",
    "to": 248
  }, {
    "from": 812,
    "label": "has",
    "to": 249
  }, {
    "from": 812,
    "label": "has",
    "to": 250
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 812,
    "label": "has",
    "to": 12
  }, {
    "from": 812,
    "label": "has",
    "to": 813
  }, {
    "from": 814,
    "label": "has",
    "to": 254
  }, {
    "from": 814,
    "label": "has",
    "to": 255
  }, {
    "from": 814,
    "label": "has",
    "to": 256
  }, {
    "from": 814,
    "label": "has",
    "to": 12
  }, {
    "from": 814,
    "label": "has",
    "to": 815
  }, {
    "from": 816,
    "label": "has",
    "to": 12
  }, {
    "from": 816,
    "label": "has",
    "to": 254
  }, {
    "from": 816,
    "label": "has",
    "to": 255
  }, {
    "from": 816,
    "label": "has",
    "to": 256
  }, {
    "from": 816,
    "label": "has",
    "to": 12
  }, {
    "from": 816,
    "label": "has",
    "to": 817
  }, {
    "from": 818,
    "label": "has",
    "to": 254
  }, {
    "from": 818,
    "label": "has",
    "to": 255
  }, {
    "from": 818,
    "label": "has",
    "to": 259
  }, {
    "from": 818,
    "label": "has",
    "to": 12
  }, {
    "from": 818,
    "label": "has",
    "to": 819
  }, {
    "from": 820,
    "label": "has",
    "to": 12
  }, {
    "from": 820,
    "label": "has",
    "to": 254
  }, {
    "from": 820,
    "label": "has",
    "to": 255
  }, {
    "from": 820,
    "label": "has",
    "to": 259
  }, {
    "from": 820,
    "label": "has",
    "to": 12
  }, {
    "from": 820,
    "label": "has",
    "to": 821
  }, {
    "from": 822,
    "label": "has",
    "to": 254
  }, {
    "from": 822,
    "label": "has",
    "to": 262
  }, {
    "from": 822,
    "label": "has",
    "to": 263
  }, {
    "from": 822,
    "label": "has",
    "to": 12
  }, {
    "from": 822,
    "label": "has",
    "to": 823
  }, {
    "from": 824,
    "label": "has",
    "to": 12
  }, {
    "from": 824,
    "label": "has",
    "to": 254
  }, {
    "from": 824,
    "label": "has",
    "to": 262
  }, {
    "from": 824,
    "label": "has",
    "to": 263
  }, {
    "from": 824,
    "label": "has",
    "to": 12
  }, {
    "from": 824,
    "label": "has",
    "to": 825
  }, {
    "from": 826,
    "label": "has",
    "to": 254
  }, {
    "from": 826,
    "label": "has",
    "to": 266
  }, {
    "from": 826,
    "label": "has",
    "to": 12
  }, {
    "from": 826,
    "label": "has",
    "to": 827
  }, {
    "from": 828,
    "label": "has",
    "to": 12
  }, {
    "from": 828,
    "label": "has",
    "to": 254
  }, {
    "from": 828,
    "label": "has",
    "to": 266
  }, {
    "from": 828,
    "label": "has",
    "to": 12
  }, {
    "from": 828,
    "label": "has",
    "to": 829
  }, {
    "from": 830,
    "label": "has",
    "to": 269
  }, {
    "from": 830,
    "label": "has",
    "to": 262
  }, {
    "from": 830,
    "label": "has",
    "to": 263
  }, {
    "from": 830,
    "label": "has",
    "to": 12
  }, {
    "from": 830,
    "label": "has",
    "to": 831
  }, {
    "from": 832,
    "label": "has",
    "to": 12
  }, {
    "from": 832,
    "label": "has",
    "to": 269
  }, {
    "from": 832,
    "label": "has",
    "to": 262
  }, {
    "from": 832,
    "label": "has",
    "to": 263
  }, {
    "from": 832,
    "label": "has",
    "to": 12
  }, {
    "from": 832,
    "label": "has",
    "to": 833
  }, {
    "from": 834,
    "label": "has",
    "to": 269
  }, {
    "from": 834,
    "label": "has",
    "to": 255
  }, {
    "from": 834,
    "label": "has",
    "to": 256
  }, {
    "from": 834,
    "label": "has",
    "to": 12
  }, {
    "from": 834,
    "label": "has",
    "to": 835
  }, {
    "from": 836,
    "label": "has",
    "to": 12
  }, {
    "from": 836,
    "label": "has",
    "to": 269
  }, {
    "from": 836,
    "label": "has",
    "to": 255
  }, {
    "from": 836,
    "label": "has",
    "to": 256
  }, {
    "from": 836,
    "label": "has",
    "to": 12
  }, {
    "from": 836,
    "label": "has",
    "to": 837
  }, {
    "from": 838,
    "label": "has",
    "to": 274
  }, {
    "from": 838,
    "label": "has",
    "to": 275
  }, {
    "from": 838,
    "label": "has",
    "to": 40
  }, {
    "from": 838,
    "label": "has",
    "to": 41
  }, {
    "from": 838,
    "label": "has",
    "to": 247
  }, {
    "from": 838,
    "label": "has",
    "to": 276
  }, {
    "from": 276,
    "label": "has",
    "to": 277
  }, {
    "from": 838,
    "label": "has",
    "to": 249
  }, {
    "from": 838,
    "label": "has",
    "to": 278
  }, {
    "from": 838,
    "label": "has",
    "to": 12
  }, {
    "from": 838,
    "label": "has",
    "to": 839
  }, {
    "from": 840,
    "label": "has",
    "to": 12
  }, {
    "from": 840,
    "label": "has",
    "to": 274
  }, {
    "from": 840,
    "label": "has",
    "to": 275
  }, {
    "from": 840,
    "label": "has",
    "to": 40
  }, {
    "from": 840,
    "label": "has",
    "to": 41
  }, {
    "from": 840,
    "label": "has",
    "to": 247
  }, {
    "from": 840,
    "label": "has",
    "to": 276
  }, {
    "from": 276,
    "label": "has",
    "to": 277
  }, {
    "from": 840,
    "label": "has",
    "to": 249
  }, {
    "from": 840,
    "label": "has",
    "to": 278
  }, {
    "from": 840,
    "label": "has",
    "to": 12
  }, {
    "from": 840,
    "label": "has",
    "to": 841
  }, {
    "from": 842,
    "label": "has",
    "to": 12
  }, {
    "from": 842,
    "label": "has",
    "to": 843
  }, {
    "from": 844,
    "label": "has",
    "to": 12
  }, {
    "from": 844,
    "label": "has",
    "to": 12
  }, {
    "from": 844,
    "label": "has",
    "to": 845
  }, {
    "from": 846,
    "label": "has",
    "to": 297
  }, {
    "from": 846,
    "label": "has",
    "to": 283
  }, {
    "from": 846,
    "label": "has",
    "to": 298
  }, {
    "from": 846,
    "label": "has",
    "to": 52
  }, {
    "from": 846,
    "label": "has",
    "to": 40
  }, {
    "from": 846,
    "label": "has",
    "to": 299
  }, {
    "from": 846,
    "label": "has",
    "to": 233
  }, {
    "from": 846,
    "label": "has",
    "to": 12
  }, {
    "from": 846,
    "label": "has",
    "to": 847
  }, {
    "from": 848,
    "label": "has",
    "to": 312
  }, {
    "from": 848,
    "label": "has",
    "to": 40
  }, {
    "from": 848,
    "label": "has",
    "to": 12
  }, {
    "from": 848,
    "label": "has",
    "to": 849
  }, {
    "from": 850,
    "label": "has",
    "to": 40
  }, {
    "from": 850,
    "label": "has",
    "to": 315
  }, {
    "from": 850,
    "label": "has",
    "to": 316
  }, {
    "from": 316,
    "label": "has",
    "to": 317
  }, {
    "from": 850,
    "label": "has",
    "to": 12
  }, {
    "from": 850,
    "label": "has",
    "to": 851
  }, {
    "from": 852,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 178,
    "label": "has",
    "to": 180
  }, {
    "from": 852,
    "label": "has",
    "to": 326
  }, {
    "from": 852,
    "label": "has",
    "to": 327
  }, {
    "from": 852,
    "label": "has",
    "to": 183
  }, {
    "from": 852,
    "label": "has",
    "to": 12
  }, {
    "from": 852,
    "label": "has",
    "to": 853
  }, {
    "from": 854,
    "label": "has",
    "to": 355
  }, {
    "from": 355,
    "label": "has",
    "to": 356
  }, {
    "from": 854,
    "label": "has",
    "to": 357
  }, {
    "from": 854,
    "label": "has",
    "to": 358
  }, {
    "from": 854,
    "label": "has",
    "to": 12
  }, {
    "from": 854,
    "label": "has",
    "to": 855
  }, {
    "from": 856,
    "label": "has",
    "to": 361
  }, {
    "from": 856,
    "label": "has",
    "to": 52
  }, {
    "from": 856,
    "label": "has",
    "to": 40
  }, {
    "from": 856,
    "label": "has",
    "to": 12
  }, {
    "from": 856,
    "label": "has",
    "to": 857
  }, {
    "from": 858,
    "label": "has",
    "to": 364
  }, {
    "from": 858,
    "label": "has",
    "to": 247
  }, {
    "from": 858,
    "label": "has",
    "to": 40
  }, {
    "from": 858,
    "label": "has",
    "to": 249
  }, {
    "from": 858,
    "label": "has",
    "to": 250
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 858,
    "label": "has",
    "to": 12
  }, {
    "from": 858,
    "label": "has",
    "to": 859
  }, {
    "from": 860,
    "label": "has",
    "to": 12
  }, {
    "from": 860,
    "label": "has",
    "to": 364
  }, {
    "from": 860,
    "label": "has",
    "to": 247
  }, {
    "from": 860,
    "label": "has",
    "to": 40
  }, {
    "from": 860,
    "label": "has",
    "to": 249
  }, {
    "from": 860,
    "label": "has",
    "to": 250
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 860,
    "label": "has",
    "to": 12
  }, {
    "from": 860,
    "label": "has",
    "to": 861
  }, {
    "from": 862,
    "label": "has",
    "to": 388
  }, {
    "from": 388,
    "label": "has",
    "to": 389
  }, {
    "from": 388,
    "label": "has",
    "to": 317
  }, {
    "from": 862,
    "label": "has",
    "to": 863
  }, {
    "from": 864,
    "label": "has",
    "to": 390
  }, {
    "from": 864,
    "label": "has",
    "to": 278
  }, {
    "from": 864,
    "label": "has",
    "to": 865
  }, {
    "from": 866,
    "label": "has",
    "to": 391
  }, {
    "from": 391,
    "label": "has",
    "to": 392
  }, {
    "from": 391,
    "label": "has",
    "to": 393
  }, {
    "from": 391,
    "label": "has",
    "to": 394
  }, {
    "from": 866,
    "label": "has",
    "to": 867
  }, {
    "from": 868,
    "label": "has",
    "to": 395
  }, {
    "from": 395,
    "label": "has",
    "to": 396
  }, {
    "from": 868,
    "label": "has",
    "to": 397
  }, {
    "from": 868,
    "label": "has",
    "to": 869
  }, {
    "from": 870,
    "label": "has",
    "to": 398
  }, {
    "from": 870,
    "label": "has",
    "to": 399
  }, {
    "from": 399,
    "label": "has",
    "to": 400
  }, {
    "from": 399,
    "label": "has",
    "to": 401
  }, {
    "from": 399,
    "label": "has",
    "to": 402
  }, {
    "from": 870,
    "label": "has",
    "to": 403
  }, {
    "from": 403,
    "label": "has",
    "to": 404
  }, {
    "from": 870,
    "label": "has",
    "to": 397
  }, {
    "from": 870,
    "label": "has",
    "to": 871
  }, {
    "from": 872,
    "label": "has",
    "to": 405
  }, {
    "from": 405,
    "label": "has",
    "to": 278
  }, {
    "from": 872,
    "label": "has",
    "to": 873
  }, {
    "from": 874,
    "label": "has",
    "to": 407
  }, {
    "from": 874,
    "label": "has",
    "to": 408
  }, {
    "from": 874,
    "label": "has",
    "to": 409
  }, {
    "from": 874,
    "label": "has",
    "to": 410
  }, {
    "from": 410,
    "label": "has",
    "to": 411
  }, {
    "from": 874,
    "label": "has",
    "to": 875
  }, {
    "from": 876,
    "label": "has",
    "to": 413
  }, {
    "from": 413,
    "label": "has",
    "to": 414
  }, {
    "from": 413,
    "label": "has",
    "to": 415
  }, {
    "from": 415,
    "label": "has",
    "to": 416
  }, {
    "from": 415,
    "label": "has",
    "to": 417
  }, {
    "from": 415,
    "label": "has",
    "to": 418
  }, {
    "from": 418,
    "label": "has",
    "to": 419
  }, {
    "from": 418,
    "label": "has",
    "to": 420
  }, {
    "from": 415,
    "label": "has",
    "to": 421
  }, {
    "from": 413,
    "label": "has",
    "to": 422
  }, {
    "from": 876,
    "label": "has",
    "to": 877
  }, {
    "from": 878,
    "label": "has",
    "to": 424
  }, {
    "from": 878,
    "label": "has",
    "to": 12
  }, {
    "from": 878,
    "label": "has",
    "to": 425
  }, {
    "from": 878,
    "label": "has",
    "to": 426
  }, {
    "from": 878,
    "label": "has",
    "to": 427
  }, {
    "from": 427,
    "label": "has",
    "to": 428
  }, {
    "from": 427,
    "label": "has",
    "to": 429
  }, {
    "from": 427,
    "label": "has",
    "to": 430
  }, {
    "from": 427,
    "label": "has",
    "to": 431
  }, {
    "from": 427,
    "label": "has",
    "to": 432
  }, {
    "from": 878,
    "label": "has",
    "to": 433
  }, {
    "from": 878,
    "label": "has",
    "to": 434
  }, {
    "from": 878,
    "label": "has",
    "to": 435
  }, {
    "from": 878,
    "label": "has",
    "to": 436
  }, {
    "from": 436,
    "label": "has",
    "to": 437
  }, {
    "from": 436,
    "label": "has",
    "to": 438
  }, {
    "from": 438,
    "label": "has",
    "to": 439
  }, {
    "from": 438,
    "label": "has",
    "to": 440
  }, {
    "from": 878,
    "label": "has",
    "to": 441
  }, {
    "from": 878,
    "label": "has",
    "to": 442
  }, {
    "from": 878,
    "label": "has",
    "to": 443
  }, {
    "from": 878,
    "label": "has",
    "to": 879
  }, {
    "from": 880,
    "label": "has",
    "to": 445
  }, {
    "from": 880,
    "label": "has",
    "to": 446
  }, {
    "from": 880,
    "label": "has",
    "to": 881
  }, {
    "from": 882,
    "label": "has",
    "to": 447
  }, {
    "from": 882,
    "label": "has",
    "to": 448
  }, {
    "from": 882,
    "label": "has",
    "to": 449
  }, {
    "from": 882,
    "label": "has",
    "to": 450
  }, {
    "from": 450,
    "label": "has",
    "to": 451
  }, {
    "from": 450,
    "label": "has",
    "to": 452
  }, {
    "from": 882,
    "label": "has",
    "to": 453
  }, {
    "from": 882,
    "label": "has",
    "to": 883
  }, {
    "from": 884,
    "label": "has",
    "to": 454
  }, {
    "from": 884,
    "label": "has",
    "to": 455
  }, {
    "from": 455,
    "label": "has",
    "to": 456
  }, {
    "from": 456,
    "label": "has",
    "to": 457
  }, {
    "from": 884,
    "label": "has",
    "to": 885
  }, {
    "from": 886,
    "label": "has",
    "to": 233
  }, {
    "from": 886,
    "label": "has",
    "to": 887
  }, {
    "from": 888,
    "label": "has",
    "to": 460
  }, {
    "from": 888,
    "label": "has",
    "to": 12
  }, {
    "from": 888,
    "label": "has",
    "to": 461
  }, {
    "from": 888,
    "label": "has",
    "to": 462
  }, {
    "from": 462,
    "label": "has",
    "to": 463
  }, {
    "from": 462,
    "label": "has",
    "to": 464
  }, {
    "from": 888,
    "label": "has",
    "to": 465
  }, {
    "from": 888,
    "label": "has",
    "to": 466
  }, {
    "from": 888,
    "label": "has",
    "to": 467
  }, {
    "from": 467,
    "label": "has",
    "to": 468
  }, {
    "from": 468,
    "label": "has",
    "to": 469
  }, {
    "from": 467,
    "label": "has",
    "to": 470
  }, {
    "from": 467,
    "label": "has",
    "to": 471
  }, {
    "from": 467,
    "label": "has",
    "to": 472
  }, {
    "from": 888,
    "label": "has",
    "to": 473
  }, {
    "from": 888,
    "label": "has",
    "to": 474
  }, {
    "from": 888,
    "label": "has",
    "to": 475
  }, {
    "from": 888,
    "label": "has",
    "to": 476
  }, {
    "from": 888,
    "label": "has",
    "to": 477
  }, {
    "from": 888,
    "label": "has",
    "to": 478
  }, {
    "from": 888,
    "label": "has",
    "to": 479
  }, {
    "from": 888,
    "label": "has",
    "to": 480
  }, {
    "from": 888,
    "label": "has",
    "to": 481
  }, {
    "from": 481,
    "label": "has",
    "to": 482
  }, {
    "from": 481,
    "label": "has",
    "to": 483
  }, {
    "from": 481,
    "label": "has",
    "to": 484
  }, {
    "from": 481,
    "label": "has",
    "to": 485
  }, {
    "from": 485,
    "label": "has",
    "to": 486
  }, {
    "from": 485,
    "label": "has",
    "to": 487
  }, {
    "from": 888,
    "label": "has",
    "to": 488
  }, {
    "from": 488,
    "label": "has",
    "to": 489
  }, {
    "from": 488,
    "label": "has",
    "to": 490
  }, {
    "from": 490,
    "label": "has",
    "to": 486
  }, {
    "from": 490,
    "label": "has",
    "to": 487
  }, {
    "from": 488,
    "label": "has",
    "to": 491
  }, {
    "from": 488,
    "label": "has",
    "to": 492
  }, {
    "from": 488,
    "label": "has",
    "to": 493
  }, {
    "from": 888,
    "label": "has",
    "to": 494
  }, {
    "from": 888,
    "label": "has",
    "to": 495
  }, {
    "from": 888,
    "label": "has",
    "to": 496
  }, {
    "from": 888,
    "label": "has",
    "to": 497
  }, {
    "from": 888,
    "label": "has",
    "to": 498
  }, {
    "from": 888,
    "label": "has",
    "to": 499
  }, {
    "from": 499,
    "label": "has",
    "to": 500
  }, {
    "from": 888,
    "label": "has",
    "to": 501
  }, {
    "from": 888,
    "label": "has",
    "to": 502
  }, {
    "from": 888,
    "label": "has",
    "to": 503
  }, {
    "from": 888,
    "label": "has",
    "to": 504
  }, {
    "from": 504,
    "label": "has",
    "to": 505
  }, {
    "from": 888,
    "label": "has",
    "to": 12
  }, {
    "from": 888,
    "label": "has",
    "to": 506
  }, {
    "from": 888,
    "label": "has",
    "to": 507
  }, {
    "from": 507,
    "label": "has",
    "to": 508
  }, {
    "from": 888,
    "label": "has",
    "to": 509
  }, {
    "from": 888,
    "label": "has",
    "to": 889
  }, {
    "from": 890,
    "label": "has",
    "to": 512
  }, {
    "from": 890,
    "label": "has",
    "to": 513
  }, {
    "from": 890,
    "label": "has",
    "to": 514
  }, {
    "from": 890,
    "label": "has",
    "to": 515
  }, {
    "from": 890,
    "label": "has",
    "to": 891
  }, {
    "from": 892,
    "label": "has",
    "to": 512
  }, {
    "from": 892,
    "label": "has",
    "to": 513
  }, {
    "from": 892,
    "label": "has",
    "to": 514
  }, {
    "from": 892,
    "label": "has",
    "to": 515
  }, {
    "from": 892,
    "label": "has",
    "to": 516
  }, {
    "from": 892,
    "label": "has",
    "to": 893
  }, {
    "from": 894,
    "label": "has",
    "to": 517
  }, {
    "from": 894,
    "label": "has",
    "to": 895
  }, {
    "from": 896,
    "label": "has",
    "to": 518
  }, {
    "from": 896,
    "label": "has",
    "to": 897
  }, {
    "from": 898,
    "label": "has",
    "to": 519
  }, {
    "from": 898,
    "label": "has",
    "to": 520
  }, {
    "from": 898,
    "label": "has",
    "to": 899
  }, {
    "from": 900,
    "label": "has",
    "to": 519
  }, {
    "from": 900,
    "label": "has",
    "to": 521
  }, {
    "from": 900,
    "label": "has",
    "to": 522
  }, {
    "from": 900,
    "label": "has",
    "to": 901
  }, {
    "from": 902,
    "label": "has",
    "to": 523
  }, {
    "from": 902,
    "label": "has",
    "to": 524
  }, {
    "from": 524,
    "label": "has",
    "to": 525
  }, {
    "from": 524,
    "label": "has",
    "to": 526
  }, {
    "from": 524,
    "label": "has",
    "to": 527
  }, {
    "from": 902,
    "label": "has",
    "to": 528
  }, {
    "from": 902,
    "label": "has",
    "to": 529
  }, {
    "from": 902,
    "label": "has",
    "to": 521
  }, {
    "from": 902,
    "label": "has",
    "to": 530
  }, {
    "from": 902,
    "label": "has",
    "to": 531
  }, {
    "from": 531,
    "label": "has",
    "to": 532
  }, {
    "from": 532,
    "label": "has",
    "to": 533
  }, {
    "from": 532,
    "label": "has",
    "to": 534
  }, {
    "from": 902,
    "label": "has",
    "to": 535
  }, {
    "from": 902,
    "label": "has",
    "to": 536
  }, {
    "from": 536,
    "label": "has",
    "to": 537
  }, {
    "from": 536,
    "label": "has",
    "to": 538
  }, {
    "from": 536,
    "label": "has",
    "to": 539
  }, {
    "from": 536,
    "label": "has",
    "to": 540
  }, {
    "from": 902,
    "label": "has",
    "to": 903
  }, {
    "from": 904,
    "label": "has",
    "to": 541
  }, {
    "from": 904,
    "label": "has",
    "to": 542
  }, {
    "from": 904,
    "label": "has",
    "to": 543
  }, {
    "from": 904,
    "label": "has",
    "to": 544
  }, {
    "from": 904,
    "label": "has",
    "to": 545
  }, {
    "from": 904,
    "label": "has",
    "to": 546
  }, {
    "from": 546,
    "label": "has",
    "to": 547
  }, {
    "from": 546,
    "label": "has",
    "to": 548
  }, {
    "from": 904,
    "label": "has",
    "to": 549
  }, {
    "from": 904,
    "label": "has",
    "to": 550
  }, {
    "from": 904,
    "label": "has",
    "to": 551
  }, {
    "from": 904,
    "label": "has",
    "to": 552
  }, {
    "from": 904,
    "label": "has",
    "to": 553
  }, {
    "from": 904,
    "label": "has",
    "to": 554
  }, {
    "from": 904,
    "label": "has",
    "to": 555
  }, {
    "from": 904,
    "label": "has",
    "to": 556
  }, {
    "from": 904,
    "label": "has",
    "to": 557
  }, {
    "from": 557,
    "label": "has",
    "to": 558
  }, {
    "from": 557,
    "label": "has",
    "to": 559
  }, {
    "from": 557,
    "label": "has",
    "to": 560
  }, {
    "from": 560,
    "label": "has",
    "to": 561
  }, {
    "from": 560,
    "label": "has",
    "to": 562
  }, {
    "from": 557,
    "label": "has",
    "to": 563
  }, {
    "from": 557,
    "label": "has",
    "to": 564
  }, {
    "from": 557,
    "label": "has",
    "to": 565
  }, {
    "from": 557,
    "label": "has",
    "to": 566
  }, {
    "from": 557,
    "label": "has",
    "to": 567
  }, {
    "from": 557,
    "label": "has",
    "to": 568
  }, {
    "from": 904,
    "label": "has",
    "to": 569
  }, {
    "from": 904,
    "label": "has",
    "to": 570
  }, {
    "from": 904,
    "label": "has",
    "to": 571
  }, {
    "from": 904,
    "label": "has",
    "to": 572
  }, {
    "from": 904,
    "label": "has",
    "to": 573
  }, {
    "from": 904,
    "label": "has",
    "to": 535
  }, {
    "from": 904,
    "label": "has",
    "to": 536
  }, {
    "from": 536,
    "label": "has",
    "to": 537
  }, {
    "from": 536,
    "label": "has",
    "to": 538
  }, {
    "from": 536,
    "label": "has",
    "to": 539
  }, {
    "from": 536,
    "label": "has",
    "to": 540
  }, {
    "from": 904,
    "label": "has",
    "to": 905
  }, {
    "from": 906,
    "label": "has",
    "to": 574
  }, {
    "from": 906,
    "label": "has",
    "to": 907
  }, {
    "from": 908,
    "label": "has",
    "to": 574
  }, {
    "from": 908,
    "label": "has",
    "to": 909
  }, {
    "from": 910,
    "label": "has",
    "to": 574
  }, {
    "from": 910,
    "label": "has",
    "to": 911
  }, {
    "from": 912,
    "label": "has",
    "to": 574
  }, {
    "from": 912,
    "label": "has",
    "to": 913
  }, {
    "from": 914,
    "label": "has",
    "to": 575
  }, {
    "from": 914,
    "label": "has",
    "to": 576
  }, {
    "from": 914,
    "label": "has",
    "to": 577
  }, {
    "from": 914,
    "label": "has",
    "to": 465
  }, {
    "from": 914,
    "label": "has",
    "to": 466
  }, {
    "from": 914,
    "label": "has",
    "to": 578
  }, {
    "from": 578,
    "label": "has",
    "to": 579
  }, {
    "from": 578,
    "label": "has",
    "to": 580
  }, {
    "from": 580,
    "label": "has",
    "to": 581
  }, {
    "from": 580,
    "label": "has",
    "to": 582
  }, {
    "from": 582,
    "label": "has",
    "to": 583
  }, {
    "from": 582,
    "label": "has",
    "to": 584
  }, {
    "from": 578,
    "label": "has",
    "to": 585
  }, {
    "from": 585,
    "label": "has",
    "to": 586
  }, {
    "from": 585,
    "label": "has",
    "to": 587
  }, {
    "from": 585,
    "label": "has",
    "to": 588
  }, {
    "from": 588,
    "label": "has",
    "to": 589
  }, {
    "from": 588,
    "label": "has",
    "to": 590
  }, {
    "from": 585,
    "label": "has",
    "to": 591
  }, {
    "from": 585,
    "label": "has",
    "to": 592
  }, {
    "from": 592,
    "label": "has",
    "to": 593
  }, {
    "from": 592,
    "label": "has",
    "to": 594
  }, {
    "from": 592,
    "label": "has",
    "to": 595
  }, {
    "from": 595,
    "label": "has",
    "to": 596
  }, {
    "from": 595,
    "label": "has",
    "to": 597
  }, {
    "from": 592,
    "label": "has",
    "to": 598
  }, {
    "from": 592,
    "label": "has",
    "to": 599
  }, {
    "from": 592,
    "label": "has",
    "to": 600
  }, {
    "from": 600,
    "label": "has",
    "to": 601
  }, {
    "from": 600,
    "label": "has",
    "to": 602
  }, {
    "from": 592,
    "label": "has",
    "to": 603
  }, {
    "from": 592,
    "label": "has",
    "to": 604
  }, {
    "from": 585,
    "label": "has",
    "to": 605
  }, {
    "from": 605,
    "label": "has",
    "to": 606
  }, {
    "from": 578,
    "label": "has",
    "to": 472
  }, {
    "from": 914,
    "label": "has",
    "to": 607
  }, {
    "from": 914,
    "label": "has",
    "to": 608
  }, {
    "from": 914,
    "label": "has",
    "to": 609
  }, {
    "from": 914,
    "label": "has",
    "to": 610
  }, {
    "from": 914,
    "label": "has",
    "to": 611
  }, {
    "from": 914,
    "label": "has",
    "to": 612
  }, {
    "from": 914,
    "label": "has",
    "to": 613
  }, {
    "from": 613,
    "label": "has",
    "to": 614
  }, {
    "from": 613,
    "label": "has",
    "to": 615
  }, {
    "from": 914,
    "label": "has",
    "to": 616
  }, {
    "from": 914,
    "label": "has",
    "to": 477
  }, {
    "from": 914,
    "label": "has",
    "to": 478
  }, {
    "from": 914,
    "label": "has",
    "to": 617
  }, {
    "from": 617,
    "label": "has",
    "to": 618
  }, {
    "from": 617,
    "label": "has",
    "to": 619
  }, {
    "from": 617,
    "label": "has",
    "to": 620
  }, {
    "from": 617,
    "label": "has",
    "to": 621
  }, {
    "from": 617,
    "label": "has",
    "to": 622
  }, {
    "from": 914,
    "label": "has",
    "to": 623
  }, {
    "from": 623,
    "label": "has",
    "to": 624
  }, {
    "from": 623,
    "label": "has",
    "to": 625
  }, {
    "from": 623,
    "label": "has",
    "to": 626
  }, {
    "from": 623,
    "label": "has",
    "to": 627
  }, {
    "from": 623,
    "label": "has",
    "to": 628
  }, {
    "from": 628,
    "label": "has",
    "to": 629
  }, {
    "from": 628,
    "label": "has",
    "to": 630
  }, {
    "from": 628,
    "label": "has",
    "to": 631
  }, {
    "from": 628,
    "label": "has",
    "to": 632
  }, {
    "from": 623,
    "label": "has",
    "to": 633
  }, {
    "from": 623,
    "label": "has",
    "to": 634
  }, {
    "from": 914,
    "label": "has",
    "to": 635
  }, {
    "from": 635,
    "label": "has",
    "to": 636
  }, {
    "from": 635,
    "label": "has",
    "to": 637
  }, {
    "from": 637,
    "label": "has",
    "to": 561
  }, {
    "from": 637,
    "label": "has",
    "to": 638
  }, {
    "from": 637,
    "label": "has",
    "to": 639
  }, {
    "from": 635,
    "label": "has",
    "to": 640
  }, {
    "from": 635,
    "label": "has",
    "to": 641
  }, {
    "from": 641,
    "label": "has",
    "to": 642
  }, {
    "from": 641,
    "label": "has",
    "to": 643
  }, {
    "from": 635,
    "label": "has",
    "to": 644
  }, {
    "from": 644,
    "label": "has",
    "to": 645
  }, {
    "from": 644,
    "label": "has",
    "to": 646
  }, {
    "from": 644,
    "label": "has",
    "to": 647
  }, {
    "from": 635,
    "label": "has",
    "to": 648
  }, {
    "from": 635,
    "label": "has",
    "to": 649
  }, {
    "from": 635,
    "label": "has",
    "to": 650
  }, {
    "from": 650,
    "label": "has",
    "to": 651
  }, {
    "from": 914,
    "label": "has",
    "to": 652
  }, {
    "from": 914,
    "label": "has",
    "to": 653
  }, {
    "from": 914,
    "label": "has",
    "to": 654
  }, {
    "from": 914,
    "label": "has",
    "to": 655
  }, {
    "from": 914,
    "label": "has",
    "to": 656
  }, {
    "from": 914,
    "label": "has",
    "to": 657
  }, {
    "from": 914,
    "label": "has",
    "to": 658
  }, {
    "from": 914,
    "label": "has",
    "to": 659
  }, {
    "from": 659,
    "label": "has",
    "to": 660
  }, {
    "from": 659,
    "label": "has",
    "to": 661
  }, {
    "from": 659,
    "label": "has",
    "to": 662
  }, {
    "from": 662,
    "label": "has",
    "to": 663
  }, {
    "from": 662,
    "label": "has",
    "to": 664
  }, {
    "from": 662,
    "label": "has",
    "to": 665
  }, {
    "from": 659,
    "label": "has",
    "to": 666
  }, {
    "from": 659,
    "label": "has",
    "to": 667
  }, {
    "from": 659,
    "label": "has",
    "to": 668
  }, {
    "from": 668,
    "label": "has",
    "to": 669
  }, {
    "from": 668,
    "label": "has",
    "to": 670
  }, {
    "from": 914,
    "label": "has",
    "to": 671
  }, {
    "from": 914,
    "label": "has",
    "to": 672
  }, {
    "from": 672,
    "label": "has",
    "to": 673
  }, {
    "from": 914,
    "label": "has",
    "to": 674
  }, {
    "from": 914,
    "label": "has",
    "to": 915
  }, {
    "from": 916,
    "label": "has",
    "to": 577
  }, {
    "from": 916,
    "label": "has",
    "to": 675
  }, {
    "from": 916,
    "label": "has",
    "to": 676
  }, {
    "from": 916,
    "label": "has",
    "to": 677
  }, {
    "from": 916,
    "label": "has",
    "to": 678
  }, {
    "from": 916,
    "label": "has",
    "to": 679
  }, {
    "from": 916,
    "label": "has",
    "to": 676
  }, {
    "from": 916,
    "label": "has",
    "to": 680
  }, {
    "from": 916,
    "label": "has",
    "to": 681
  }, {
    "from": 916,
    "label": "has",
    "to": 682
  }, {
    "from": 916,
    "label": "has",
    "to": 917
  }, {
    "from": 918,
    "label": "has",
    "to": 686
  }, {
    "from": 918,
    "label": "has",
    "to": 687
  }, {
    "from": 918,
    "label": "has",
    "to": 688
  }, {
    "from": 918,
    "label": "has",
    "to": 689
  }, {
    "from": 918,
    "label": "has",
    "to": 690
  }, {
    "from": 918,
    "label": "has",
    "to": 691
  }, {
    "from": 918,
    "label": "has",
    "to": 692
  }, {
    "from": 692,
    "label": "has",
    "to": 693
  }, {
    "from": 692,
    "label": "has",
    "to": 694
  }, {
    "from": 692,
    "label": "has",
    "to": 695
  }, {
    "from": 692,
    "label": "has",
    "to": 696
  }, {
    "from": 692,
    "label": "has",
    "to": 697
  }, {
    "from": 697,
    "label": "has",
    "to": 698
  }, {
    "from": 697,
    "label": "has",
    "to": 699
  }, {
    "from": 697,
    "label": "has",
    "to": 700
  }, {
    "from": 697,
    "label": "has",
    "to": 701
  }, {
    "from": 697,
    "label": "has",
    "to": 702
  }, {
    "from": 697,
    "label": "has",
    "to": 703
  }, {
    "from": 692,
    "label": "has",
    "to": 704
  }, {
    "from": 704,
    "label": "has",
    "to": 705
  }, {
    "from": 704,
    "label": "has",
    "to": 706
  }, {
    "from": 706,
    "label": "has",
    "to": 707
  }, {
    "from": 706,
    "label": "has",
    "to": 708
  }, {
    "from": 706,
    "label": "has",
    "to": 709
  }, {
    "from": 704,
    "label": "has",
    "to": 710
  }, {
    "from": 710,
    "label": "has",
    "to": 711
  }, {
    "from": 711,
    "label": "has",
    "to": 712
  }, {
    "from": 712,
    "label": "has",
    "to": 713
  }, {
    "from": 712,
    "label": "has",
    "to": 714
  }, {
    "from": 704,
    "label": "has",
    "to": 715
  }, {
    "from": 704,
    "label": "has",
    "to": 716
  }, {
    "from": 918,
    "label": "has",
    "to": 717
  }, {
    "from": 918,
    "label": "has",
    "to": 718
  }, {
    "from": 918,
    "label": "has",
    "to": 719
  }, {
    "from": 918,
    "label": "has",
    "to": 720
  }, {
    "from": 720,
    "label": "has",
    "to": 565
  }, {
    "from": 720,
    "label": "has",
    "to": 721
  }, {
    "from": 918,
    "label": "has",
    "to": 722
  }, {
    "from": 722,
    "label": "has",
    "to": 565
  }, {
    "from": 722,
    "label": "has",
    "to": 723
  }, {
    "from": 918,
    "label": "has",
    "to": 724
  }, {
    "from": 724,
    "label": "has",
    "to": 565
  }, {
    "from": 724,
    "label": "has",
    "to": 725
  }, {
    "from": 918,
    "label": "has",
    "to": 726
  }, {
    "from": 918,
    "label": "has",
    "to": 727
  }, {
    "from": 727,
    "label": "has",
    "to": 728
  }, {
    "from": 727,
    "label": "has",
    "to": 729
  }, {
    "from": 729,
    "label": "has",
    "to": 730
  }, {
    "from": 729,
    "label": "has",
    "to": 731
  }, {
    "from": 918,
    "label": "has",
    "to": 732
  }, {
    "from": 918,
    "label": "has",
    "to": 919
  }, {
    "from": 920,
    "label": "has",
    "to": 735
  }, {
    "from": 920,
    "label": "has",
    "to": 736
  }, {
    "from": 736,
    "label": "has",
    "to": 737
  }, {
    "from": 736,
    "label": "has",
    "to": 738
  }, {
    "from": 736,
    "label": "has",
    "to": 739
  }, {
    "from": 920,
    "label": "has",
    "to": 921
  }, {
    "from": 380,
    "label": "calls",
    "to": 943
  }, {
    "from": 380,
    "label": "calls",
    "to": 943
  }, {
    "from": 380,
    "label": "calls",
    "to": 943
  }, {
    "from": 193,
    "label": "calls",
    "to": 923
  }, {
    "from": 193,
    "label": "calls",
    "to": 923
  }, {
    "from": 193,
    "label": "calls",
    "to": 923
  }, {
    "from": 193,
    "label": "calls",
    "to": 923
  }, {
    "from": 193,
    "label": "calls",
    "to": 923
  }, {
    "from": 380,
    "label": "calls",
    "to": 923
  }, {
    "from": 380,
    "label": "calls",
    "to": 923
  }, {
    "from": 380,
    "label": "calls",
    "to": 923
  }, {
    "from": 380,
    "label": "calls",
    "to": 923
  }, {
    "from": 380,
    "label": "calls",
    "to": 923
  }, {
    "from": 380,
    "label": "calls",
    "to": 923
  }, {
    "from": 380,
    "label": "calls",
    "to": 923
  }, {
    "from": 380,
    "label": "calls",
    "to": 923
  }, {
    "from": 380,
    "label": "calls",
    "to": 923
  }, {
    "from": 380,
    "label": "calls",
    "to": 923
  }, {
    "from": 380,
    "label": "calls",
    "to": 923
  }, {
    "from": 380,
    "label": "calls",
    "to": 923
  }, {
    "from": 380,
    "label": "calls",
    "to": 923
  }, {
    "from": 380,
    "label": "calls",
    "to": 923
  }, {
    "from": 380,
    "label": "calls",
    "to": 296
  }, {
    "from": 380,
    "label": "calls",
    "to": 934
  }, {
    "from": 380,
    "label": "calls",
    "to": 934
  }, {
    "from": 380,
    "label": "calls",
    "to": 934
  }, {
    "from": 380,
    "label": "calls",
    "to": 934
  }, {
    "from": 380,
    "label": "calls",
    "to": 934
  }, {
    "from": 380,
    "label": "calls",
    "to": 934
  }, {
    "from": 380,
    "label": "calls",
    "to": 934
  }, {
    "from": 380,
    "label": "calls",
    "to": 934
  }, {
    "from": 380,
    "label": "calls",
    "to": 934
  }, {
    "from": 253,
    "label": "calls",
    "to": 245
  }, {
    "from": 258,
    "label": "calls",
    "to": 245
  }, {
    "from": 261,
    "label": "calls",
    "to": 245
  }, {
    "from": 265,
    "label": "calls",
    "to": 245
  }, {
    "from": 193,
    "label": "calls",
    "to": 926
  }, {
    "from": 922,
    "label": "calls",
    "to": 927
  }, {
    "from": 922,
    "label": "calls",
    "to": 927
  }, {
    "from": 922,
    "label": "calls",
    "to": 927
  }, {
    "from": 380,
    "label": "calls",
    "to": 938
  }, {
    "from": 380,
    "label": "calls",
    "to": 238
  }, {
    "from": 380,
    "label": "calls",
    "to": 238
  }, {
    "from": 375,
    "label": "calls",
    "to": 924
  }, {
    "from": 922,
    "label": "calls",
    "to": 944
  }, {
    "from": 193,
    "label": "calls",
    "to": 944
  }, {
    "from": 380,
    "label": "calls",
    "to": 944
  }, {
    "from": 922,
    "label": "calls",
    "to": 17
  }, {
    "from": 922,
    "label": "calls",
    "to": 17
  }, {
    "from": 922,
    "label": "calls",
    "to": 17
  }, {
    "from": 380,
    "label": "calls",
    "to": 112
  }, {
    "from": 125,
    "label": "calls",
    "to": 81
  }, {
    "from": 125,
    "label": "calls",
    "to": 125
  }, {
    "from": 17,
    "label": "calls",
    "to": 928
  }, {
    "from": 17,
    "label": "calls",
    "to": 928
  }, {
    "from": 922,
    "label": "calls",
    "to": 928
  }, {
    "from": 922,
    "label": "calls",
    "to": 928
  }, {
    "from": 380,
    "label": "calls",
    "to": 928
  }, {
    "from": 380,
    "label": "calls",
    "to": 928
  }, {
    "from": 380,
    "label": "calls",
    "to": 928
  }, {
    "from": 922,
    "label": "calls",
    "to": 928
  }, {
    "from": 380,
    "label": "calls",
    "to": 188
  }, {
    "from": 172,
    "label": "calls",
    "to": 164
  }, {
    "from": 380,
    "label": "calls",
    "to": 228
  }, {
    "from": 380,
    "label": "calls",
    "to": 228
  }, {
    "from": 380,
    "label": "calls",
    "to": 228
  }, {
    "from": 380,
    "label": "calls",
    "to": 228
  }, {
    "from": 157,
    "label": "calls",
    "to": 149
  }, {
    "from": 164,
    "label": "calls",
    "to": 149
  }, {
    "from": 380,
    "label": "calls",
    "to": 149
  }, {
    "from": 380,
    "label": "calls",
    "to": 149
  }, {
    "from": 228,
    "label": "calls",
    "to": 193
  }, {
    "from": 235,
    "label": "calls",
    "to": 193
  }, {
    "from": 333,
    "label": "calls",
    "to": 925
  }, {
    "from": 38,
    "label": "calls",
    "to": 14
  }, {
    "from": 55,
    "label": "calls",
    "to": 14
  }, {
    "from": 273,
    "label": "calls",
    "to": 14
  }, {
    "from": 287,
    "label": "calls",
    "to": 14
  }, {
    "from": 380,
    "label": "calls",
    "to": 14
  }, {
    "from": 380,
    "label": "calls",
    "to": 14
  }, {
    "from": 380,
    "label": "calls",
    "to": 14
  }, {
    "from": 280,
    "label": "calls",
    "to": 235
  }, {
    "from": 380,
    "label": "calls",
    "to": 235
  }, {
    "from": 380,
    "label": "calls",
    "to": 235
  }, {
    "from": 380,
    "label": "calls",
    "to": 235
  }, {
    "from": 380,
    "label": "calls",
    "to": 235
  }, {
    "from": 380,
    "label": "calls",
    "to": 375
  }, {
    "from": 5,
    "label": "calls",
    "to": 935
  }, {
    "from": 268,
    "label": "calls",
    "to": 265
  }, {
    "from": 271,
    "label": "calls",
    "to": 265
  }, {
    "from": 321,
    "label": "calls",
    "to": 929
  }, {
    "from": 380,
    "label": "calls",
    "to": 304
  }, {
    "from": 139,
    "label": "calls",
    "to": 936
  }, {
    "from": 380,
    "label": "calls",
    "to": 936
  }, {
    "from": 17,
    "label": "calls",
    "to": 930
  }, {
    "from": 380,
    "label": "calls",
    "to": 5
  }, {
    "from": 380,
    "label": "calls",
    "to": 942
  }, {
    "from": 17,
    "label": "calls",
    "to": 26
  }, {
    "from": 34,
    "label": "calls",
    "to": 26
  }, {
    "from": 287,
    "label": "calls",
    "to": 26
  }, {
    "from": 380,
    "label": "calls",
    "to": 26
  }, {
    "from": 380,
    "label": "calls",
    "to": 26
  }, {
    "from": 380,
    "label": "calls",
    "to": 301
  }, {
    "from": 333,
    "label": "calls",
    "to": 940
  }, {
    "from": 380,
    "label": "calls",
    "to": 940
  }, {
    "from": 380,
    "label": "calls",
    "to": 940
  }, {
    "from": 380,
    "label": "calls",
    "to": 940
  }, {
    "from": 380,
    "label": "calls",
    "to": 940
  }, {
    "from": 380,
    "label": "calls",
    "to": 940
  }, {
    "from": 170,
    "label": "calls",
    "to": 157
  }, {
    "from": 380,
    "label": "calls",
    "to": 177
  }, {
    "from": 380,
    "label": "calls",
    "to": 177
  }, {
    "from": 380,
    "label": "calls",
    "to": 177
  }, {
    "from": 380,
    "label": "calls",
    "to": 177
  }, {
    "from": 922,
    "label": "calls",
    "to": 937
  }, {
    "from": 238,
    "label": "calls",
    "to": 937
  }, {
    "from": 333,
    "label": "calls",
    "to": 937
  }, {
    "from": 375,
    "label": "calls",
    "to": 937
  }, {
    "from": 380,
    "label": "calls",
    "to": 937
  }, {
    "from": 380,
    "label": "calls",
    "to": 937
  }, {
    "from": 380,
    "label": "calls",
    "to": 937
  }, {
    "from": 149,
    "label": "calls",
    "to": 139
  }, {
    "from": 45,
    "label": "calls",
    "to": 38
  }, {
    "from": 50,
    "label": "calls",
    "to": 38
  }, {
    "from": 55,
    "label": "calls",
    "to": 38
  }, {
    "from": 55,
    "label": "calls",
    "to": 38
  }, {
    "from": 380,
    "label": "calls",
    "to": 287
  }, {
    "from": 77,
    "label": "calls",
    "to": 55
  }, {
    "from": 81,
    "label": "calls",
    "to": 55
  }, {
    "from": 81,
    "label": "calls",
    "to": 55
  }, {
    "from": 88,
    "label": "calls",
    "to": 55
  }, {
    "from": 922,
    "label": "calls",
    "to": 380
  }, {
    "from": 380,
    "label": "calls",
    "to": 363
  }, {
    "from": 38,
    "label": "calls",
    "to": 931
  }, {
    "from": 91,
    "label": "calls",
    "to": 931
  }, {
    "from": 97,
    "label": "calls",
    "to": 931
  }, {
    "from": 100,
    "label": "calls",
    "to": 931
  }, {
    "from": 103,
    "label": "calls",
    "to": 931
  }, {
    "from": 112,
    "label": "calls",
    "to": 931
  }, {
    "from": 117,
    "label": "calls",
    "to": 931
  }, {
    "from": 121,
    "label": "calls",
    "to": 931
  }, {
    "from": 125,
    "label": "calls",
    "to": 931
  }, {
    "from": 130,
    "label": "calls",
    "to": 931
  }, {
    "from": 136,
    "label": "calls",
    "to": 931
  }, {
    "from": 139,
    "label": "calls",
    "to": 931
  }, {
    "from": 174,
    "label": "calls",
    "to": 931
  }, {
    "from": 177,
    "label": "calls",
    "to": 931
  }, {
    "from": 228,
    "label": "calls",
    "to": 931
  }, {
    "from": 235,
    "label": "calls",
    "to": 931
  }, {
    "from": 238,
    "label": "calls",
    "to": 931
  }, {
    "from": 245,
    "label": "calls",
    "to": 931
  }, {
    "from": 273,
    "label": "calls",
    "to": 931
  }, {
    "from": 287,
    "label": "calls",
    "to": 931
  }, {
    "from": 296,
    "label": "calls",
    "to": 931
  }, {
    "from": 301,
    "label": "calls",
    "to": 931
  }, {
    "from": 304,
    "label": "calls",
    "to": 931
  }, {
    "from": 311,
    "label": "calls",
    "to": 931
  }, {
    "from": 314,
    "label": "calls",
    "to": 931
  }, {
    "from": 319,
    "label": "calls",
    "to": 931
  }, {
    "from": 321,
    "label": "calls",
    "to": 931
  }, {
    "from": 325,
    "label": "calls",
    "to": 931
  }, {
    "from": 360,
    "label": "calls",
    "to": 931
  }, {
    "from": 363,
    "label": "calls",
    "to": 931
  }, {
    "from": 280,
    "label": "calls",
    "to": 280
  }, {
    "from": 228,
    "label": "calls",
    "to": 932
  }, {
    "from": 228,
    "label": "calls",
    "to": 932
  }, {
    "from": 235,
    "label": "calls",
    "to": 932
  }, {
    "from": 235,
    "label": "calls",
    "to": 932
  }, {
    "from": 280,
    "label": "calls",
    "to": 932
  }, {
    "from": 301,
    "label": "calls",
    "to": 932
  }, {
    "from": 301,
    "label": "calls",
    "to": 932
  }, {
    "from": 304,
    "label": "calls",
    "to": 932
  }, {
    "from": 304,
    "label": "calls",
    "to": 932
  }, {
    "from": 369,
    "label": "calls",
    "to": 939
  }, {
    "from": 380,
    "label": "calls",
    "to": 939
  }, {
    "from": 329,
    "label": "calls",
    "to": 325
  }, {
    "from": 331,
    "label": "calls",
    "to": 325
  }, {
    "from": 333,
    "label": "calls",
    "to": 325
  }, {
    "from": 333,
    "label": "calls",
    "to": 325
  }, {
    "from": 380,
    "label": "calls",
    "to": 325
  }, {
    "from": 380,
    "label": "calls",
    "to": 325
  }, {
    "from": 380,
    "label": "calls",
    "to": 325
  }, {
    "from": 380,
    "label": "calls",
    "to": 325
  }, {
    "from": 14,
    "label": "calls",
    "to": 9
  }, {
    "from": 26,
    "label": "calls",
    "to": 9
  }, {
    "from": 26,
    "label": "calls",
    "to": 945
  }, {
    "from": 228,
    "label": "calls",
    "to": 34
  }, {
    "from": 235,
    "label": "calls",
    "to": 34
  }, {
    "from": 238,
    "label": "calls",
    "to": 34
  }, {
    "from": 296,
    "label": "calls",
    "to": 34
  }, {
    "from": 301,
    "label": "calls",
    "to": 34
  }, {
    "from": 304,
    "label": "calls",
    "to": 34
  }, {
    "from": 380,
    "label": "calls",
    "to": 34
  }, {
    "from": 380,
    "label": "calls",
    "to": 941
  }, {
    "from": 81,
    "label": "calls",
    "to": 933
  }, {
    "from": 103,
    "label": "calls",
    "to": 933
  }, {
    "from": 125,
    "label": "calls",
    "to": 933
  }, {
    "from": 157,
    "label": "calls",
    "to": 933
  }, {
    "from": 164,
    "label": "calls",
    "to": 933
  }, {
    "from": 280,
    "label": "calls",
    "to": 933
  }, {
    "from": 333,
    "label": "calls",
    "to": 933
  }, {
    "from": 333,
    "label": "calls",
    "to": 933
  }, {
    "from": 333,
    "label": "calls",
    "to": 933
  }, {
    "from": 333,
    "label": "calls",
    "to": 933
  }, {
    "from": 380,
    "label": "calls",
    "to": 933
  }, {
    "from": 380,
    "label": "calls",
    "to": 933
  }, {
    "from": 922,
    "label": "calls",
    "to": 946
  }, {
    "from": 380,
    "label": "calls",
    "to": 946
  }, {
    "from": 380,
    "label": "calls",
    "to": 946
  }, {
    "from": 380,
    "label": "calls",
    "to": 117
  }, {
    "from": 380,
    "label": "calls",
    "to": 117
  }, {
    "from": 188,
    "label": "calls",
    "to": 185
  }, {
    "from": 188,
    "label": "calls",
    "to": 185
  }, {
    "from": 193,
    "label": "calls",
    "to": 185
  }, {
    "from": 193,
    "label": "calls",
    "to": 185
  }, {
    "from": 1,
    "label": "contains",
    "to": 922
  }, {
    "from": 922,
    "label": "declares",
    "to": 2
  }, {
    "from": 922,
    "label": "declares",
    "to": 5
  }, {
    "from": 922,
    "label": "declares",
    "to": 9
  }, {
    "from": 922,
    "label": "declares",
    "to": 14
  }, {
    "from": 922,
    "label": "declares",
    "to": 17
  }, {
    "from": 922,
    "label": "declares",
    "to": 26
  }, {
    "from": 922,
    "label": "declares",
    "to": 34
  }, {
    "from": 922,
    "label": "declares",
    "to": 38
  }, {
    "from": 922,
    "label": "declares",
    "to": 45
  }, {
    "from": 922,
    "label": "declares",
    "to": 50
  }, {
    "from": 922,
    "label": "declares",
    "to": 55
  }, {
    "from": 922,
    "label": "declares",
    "to": 73
  }, {
    "from": 922,
    "label": "declares",
    "to": 75
  }, {
    "from": 922,
    "label": "declares",
    "to": 77
  }, {
    "from": 922,
    "label": "declares",
    "to": 81
  }, {
    "from": 922,
    "label": "declares",
    "to": 88
  }, {
    "from": 922,
    "label": "declares",
    "to": 91
  }, {
    "from": 922,
    "label": "declares",
    "to": 97
  }, {
    "from": 922,
    "label": "declares",
    "to": 100
  }, {
    "from": 922,
    "label": "declares",
    "to": 103
  }, {
    "from": 922,
    "label": "declares",
    "to": 112
  }, {
    "from": 922,
    "label": "declares",
    "to": 117
  }, {
    "from": 922,
    "label": "declares",
    "to": 121
  }, {
    "from": 922,
    "label": "declares",
    "to": 125
  }, {
    "from": 922,
    "label": "declares",
    "to": 130
  }, {
    "from": 922,
    "label": "declares",
    "to": 136
  }, {
    "from": 922,
    "label": "declares",
    "to": 139
  }, {
    "from": 922,
    "label": "declares",
    "to": 147
  }, {
    "from": 922,
    "label": "declares",
    "to": 149
  }, {
    "from": 922,
    "label": "declares",
    "to": 157
  }, {
    "from": 922,
    "label": "declares",
    "to": 164
  }, {
    "from": 922,
    "label": "declares",
    "to": 170
  }, {
    "from": 922,
    "label": "declares",
    "to": 172
  }, {
    "from": 922,
    "label": "declares",
    "to": 174
  }, {
    "from": 922,
    "label": "declares",
    "to": 177
  }, {
    "from": 922,
    "label": "declares",
    "to": 185
  }, {
    "from": 922,
    "label": "declares",
    "to": 188
  }, {
    "from": 922,
    "label": "declares",
    "to": 193
  }, {
    "from": 922,
    "label": "declares",
    "to": 228
  }, {
    "from": 922,
    "label": "declares",
    "to": 235
  }, {
    "from": 922,
    "label": "declares",
    "to": 238
  }, {
    "from": 922,
    "label": "declares",
    "to": 245
  }, {
    "from": 922,
    "label": "declares",
    "to": 253
  }, {
    "from": 922,
    "label": "declares",
    "to": 258
  }, {
    "from": 922,
    "label": "declares",
    "to": 261
  }, {
    "from": 922,
    "label": "declares",
    "to": 265
  }, {
    "from": 922,
    "label": "declares",
    "to": 268
  }, {
    "from": 922,
    "label": "declares",
    "to": 271
  }, {
    "from": 922,
    "label": "declares",
    "to": 273
  }, {
    "from": 922,
    "label": "declares",
    "to": 280
  }, {
    "from": 922,
    "label": "declares",
    "to": 287
  }, {
    "from": 922,
    "label": "declares",
    "to": 296
  }, {
    "from": 922,
    "label": "declares",
    "to": 301
  }, {
    "from": 922,
    "label": "declares",
    "to": 304
  }, {
    "from": 922,
    "label": "declares",
    "to": 311
  }, {
    "from": 922,
    "label": "declares",
    "to": 314
  }, {
    "from": 922,
    "label": "declares",
    "to": 319
  }, {
    "from": 922,
    "label": "declares",
    "to": 321
  }, {
    "from": 922,
    "label": "declares",
    "to": 325
  }, {
    "from": 922,
    "label": "declares",
    "to": 329
  }, {
    "from": 922,
    "label": "declares",
    "to": 331
  }, {
    "from": 922,
    "label": "declares",
    "to": 333
  }, {
    "from": 922,
    "label": "declares",
    "to": 360
  }, {
    "from": 922,
    "label": "declares",
    "to": 363
  }, {
    "from": 922,
    "label": "declares",
    "to": 366
  }, {
    "from": 922,
    "label": "declares",
    "to": 369
  }, {
    "from": 922,
    "label": "declares",
    "to": 375
  }, {
    "from": 922,
    "label": "declares",
    "to": 380
  }, {
    "from": 922,
    "label": "declares",
    "to": 745
  }, {
    "from": 922,
    "label": "declares",
    "to": 747
  }, {
    "from": 922,
    "label": "declares",
    "to": 749
  }, {
    "from": 922,
    "label": "declares",
    "to": 751
  }, {
    "from": 922,
    "label": "declares",
    "to": 758
  }, {
    "from": 922,
    "label": "declares",
    "to": 762
  }, {
    "from": 922,
    "label": "declares",
    "to": 766
  }, {
    "from": 922,
    "label": "declares",
    "to": 768
  }, {
    "from": 922,
    "label": "declares",
    "to": 770
  }, {
    "from": 922,
    "label": "declares",
    "to": 772
  }, {
    "from": 922,
    "label": "declares",
    "to": 774
  }, {
    "from": 922,
    "label": "declares",
    "to": 776
  }, {
    "from": 922,
    "label": "declares",
    "to": 778
  }, {
    "from": 922,
    "label": "declares",
    "to": 780
  }, {
    "from": 922,
    "label": "declares",
    "to": 782
  }, {
    "from": 922,
    "label": "declares",
    "to": 784
  }, {
    "from": 922,
    "label": "declares",
    "to": 786
  }, {
    "from": 922,
    "label": "declares",
    "to": 788
  }, {
    "from": 922,
    "label": "declares",
    "to": 790
  }, {
    "from": 922,
    "label": "declares",
    "to": 792
  }, {
    "from": 922,
    "label": "declares",
    "to": 794
  }, {
    "from": 922,
    "label": "declares",
    "to": 796
  }, {
    "from": 922,
    "label": "declares",
    "to": 798
  }, {
    "from": 922,
    "label": "declares",
    "to": 800
  }, {
    "from": 922,
    "label": "declares",
    "to": 802
  }, {
    "from": 922,
    "label": "declares",
    "to": 804
  }, {
    "from": 922,
    "label": "declares",
    "to": 806
  }, {
    "from": 922,
    "label": "declares",
    "to": 808
  }, {
    "from": 922,
    "label": "declares",
    "to": 810
  }, {
    "from": 922,
    "label": "declares",
    "to": 812
  }, {
    "from": 922,
    "label": "declares",
    "to": 814
  }, {
    "from": 922,
    "label": "declares",
    "to": 816
  }, {
    "from": 922,
    "label": "declares",
    "to": 818
  }, {
    "from": 922,
    "label": "declares",
    "to": 820
  }, {
    "from": 922,
    "label": "declares",
    "to": 822
  }, {
    "from": 922,
    "label": "declares",
    "to": 824
  }, {
    "from": 922,
    "label": "declares",
    "to": 826
  }, {
    "from": 922,
    "label": "declares",
    "to": 828
  }, {
    "from": 922,
    "label": "declares",
    "to": 830
  }, {
    "from": 922,
    "label": "declares",
    "to": 832
  }, {
    "from": 922,
    "label": "declares",
    "to": 834
  }, {
    "from": 922,
    "label": "declares",
    "to": 836
  }, {
    "from": 922,
    "label": "declares",
    "to": 838
  }, {
    "from": 922,
    "label": "declares",
    "to": 840
  }, {
    "from": 922,
    "label": "declares",
    "to": 842
  }, {
    "from": 922,
    "label": "declares",
    "to": 844
  }, {
    "from": 922,
    "label": "declares",
    "to": 846
  }, {
    "from": 922,
    "label": "declares",
    "to": 848
  }, {
    "from": 922,
    "label": "declares",
    "to": 850
  }, {
    "from": 922,
    "label": "declares",
    "to": 852
  }, {
    "from": 922,
    "label": "declares",
    "to": 854
  }, {
    "from": 922,
    "label": "declares",
    "to": 856
  }, {
    "from": 922,
    "label": "declares",
    "to": 858
  }, {
    "from": 922,
    "label": "declares",
    "to": 860
  }, {
    "from": 922,
    "label": "declares",
    "to": 862
  }, {
    "from": 922,
    "label": "declares",
    "to": 864
  }, {
    "from": 922,
    "label": "declares",
    "to": 866
  }, {
    "from": 922,
    "label": "declares",
    "to": 868
  }, {
    "from": 922,
    "label": "declares",
    "to": 870
  }, {
    "from": 922,
    "label": "declares",
    "to": 872
  }, {
    "from": 922,
    "label": "declares",
    "to": 874
  }, {
    "from": 922,
    "label": "declares",
    "to": 876
  }, {
    "from": 922,
    "label": "declares",
    "to": 878
  }, {
    "from": 922,
    "label": "declares",
    "to": 880
  }, {
    "from": 922,
    "label": "declares",
    "to": 882
  }, {
    "from": 922,
    "label": "declares",
    "to": 884
  }, {
    "from": 922,
    "label": "declares",
    "to": 886
  }, {
    "from": 922,
    "label": "declares",
    "to": 888
  }, {
    "from": 922,
    "label": "declares",
    "to": 890
  }, {
    "from": 922,
    "label": "declares",
    "to": 892
  }, {
    "from": 922,
    "label": "declares",
    "to": 894
  }, {
    "from": 922,
    "label": "declares",
    "to": 896
  }, {
    "from": 922,
    "label": "declares",
    "to": 898
  }, {
    "from": 922,
    "label": "declares",
    "to": 900
  }, {
    "from": 922,
    "label": "declares",
    "to": 902
  }, {
    "from": 922,
    "label": "declares",
    "to": 904
  }, {
    "from": 922,
    "label": "declares",
    "to": 906
  }, {
    "from": 922,
    "label": "declares",
    "to": 908
  }, {
    "from": 922,
    "label": "declares",
    "to": 910
  }, {
    "from": 922,
    "label": "declares",
    "to": 912
  }, {
    "from": 922,
    "label": "declares",
    "to": 914
  }, {
    "from": 922,
    "label": "declares",
    "to": 916
  }, {
    "from": 922,
    "label": "declares",
    "to": 918
  }, {
    "from": 922,
    "label": "declares",
    "to": 920
  }, {
    "from": 1,
    "label": "contains",
    "to": 948
  }, {
    "from": 1,
    "label": "contains",
    "to": 949
  }, {
    "from": 948,
    "label": "initializes",
    "to": 950
  }, {
    "from": 950,
    "label": "assigns",
    "to": 951
  }, {
    "from": 948,
    "label": "initializes",
    "to": 952
  }, {
    "from": 952,
    "label": "assigns",
    "to": 953
  }, {
    "from": 948,
    "label": "initializes",
    "to": 954
  }, {
    "from": 954,
    "label": "assigns",
    "to": 955
  }, {
    "from": 948,
    "label": "initializes",
    "to": 956
  }, {
    "from": 956,
    "label": "assigns",
    "to": 957
  }, {
    "from": 948,
    "label": "initializes",
    "to": 958
  }, {
    "from": 958,
    "label": "assigns",
    "to": 959
  }, {
    "from": 948,
    "label": "initializes",
    "to": 960
  }, {
    "from": 960,
    "label": "assigns",
    "to": 961
  }, {
    "from": 948,
    "label": "initializes",
    "to": 962
  }, {
    "from": 962,
    "label": "assigns",
    "to": 963
  }, {
    "from": 948,
    "label": "initializes",
    "to": 964
  }, {
    "from": 964,
    "label": "assigns",
    "to": 965
  }, {
    "from": 965,
    "label": "assigns",
    "to": 966
  }, {
    "from": 966,
    "label": "assigns",
    "to": 967
  }, {
    "from": 965,
    "label": "assigns",
    "to": 968
  }, {
    "from": 968,
    "label": "assigns",
    "to": 969
  }, {
    "from": 965,
    "label": "assigns",
    "to": 970
  }, {
    "from": 970,
    "label": "assigns",
    "to": 971
  }, {
    "from": 965,
    "label": "assigns",
    "to": 972
  }, {
    "from": 972,
    "label": "assigns",
    "to": 973
  }, {
    "from": 948,
    "label": "initializes",
    "to": 974
  }, {
    "from": 974,
    "label": "assigns",
    "to": 975
  }, {
    "from": 948,
    "label": "initializes",
    "to": 976
  }, {
    "from": 976,
    "label": "assigns",
    "to": 977
  }, {
    "from": 977,
    "label": "assigns",
    "to": 978
  }, {
    "from": 978,
    "label": "assigns",
    "to": 979
  }, {
    "from": 977,
    "label": "assigns",
    "to": 980
  }, {
    "from": 980,
    "label": "assigns",
    "to": 981
  }, {
    "from": 977,
    "label": "assigns",
    "to": 982
  }, {
    "from": 982,
    "label": "assigns",
    "to": 983
  }, {
    "from": 977,
    "label": "assigns",
    "to": 984
  }, {
    "from": 984,
    "label": "assigns",
    "to": 985
  }, {
    "from": 977,
    "label": "assigns",
    "to": 986
  }, {
    "from": 986,
    "label": "assigns",
    "to": 987
  }, {
    "from": 977,
    "label": "assigns",
    "to": 988
  }, {
    "from": 988,
    "label": "assigns",
    "to": 989
  }, {
    "from": 977,
    "label": "assigns",
    "to": 990
  }, {
    "from": 990,
    "label": "assigns",
    "to": 991
  }, {
    "from": 977,
    "label": "assigns",
    "to": 992
  }, {
    "from": 992,
    "label": "assigns",
    "to": 993
  }, {
    "from": 977,
    "label": "assigns",
    "to": 994
  }, {
    "from": 994,
    "label": "assigns",
    "to": 995
  }, {
    "from": 977,
    "label": "assigns",
    "to": 996
  }, {
    "from": 996,
    "label": "assigns",
    "to": 997
  }, {
    "from": 977,
    "label": "assigns",
    "to": 998
  }, {
    "from": 998,
    "label": "assigns",
    "to": 999
  }, {
    "from": 977,
    "label": "assigns",
    "to": 1000
  }, {
    "from": 1000,
    "label": "assigns",
    "to": 1001
  }, {
    "from": 977,
    "label": "assigns",
    "to": 1002
  }, {
    "from": 1002,
    "label": "assigns",
    "to": 1003
  }, {
    "from": 977,
    "label": "assigns",
    "to": 1004
  }, {
    "from": 1004,
    "label": "assigns",
    "to": 1005
  }, {
    "from": 977,
    "label": "assigns",
    "to": 1006
  }, {
    "from": 1006,
    "label": "assigns",
    "to": 1007
  }, {
    "from": 977,
    "label": "assigns",
    "to": 1008
  }, {
    "from": 1008,
    "label": "assigns",
    "to": 1009
  }, {
    "from": 977,
    "label": "assigns",
    "to": 1010
  }, {
    "from": 1010,
    "label": "assigns",
    "to": 1011
  }, {
    "from": 977,
    "label": "assigns",
    "to": 1012
  }, {
    "from": 1012,
    "label": "assigns",
    "to": 1013
  }, {
    "from": 948,
    "label": "initializes",
    "to": 1014
  }, {
    "from": 1014,
    "label": "assigns",
    "to": 1015
  }, {
    "from": 948,
    "label": "initializes",
    "to": 1016
  }, {
    "from": 1016,
    "label": "assigns",
    "to": 1017
  }, {
    "from": 948,
    "label": "initializes",
    "to": 1018
  }, {
    "from": 1018,
    "label": "assigns",
    "to": 1019
  }, {
    "from": 948,
    "label": "initializes",
    "to": 1020
  }, {
    "from": 1020,
    "label": "assigns",
    "to": 1021
  }, {
    "from": 948,
    "label": "initializes",
    "to": 1022
  }, {
    "from": 1022,
    "label": "assigns",
    "to": 1023
  }, {
    "from": 948,
    "label": "initializes",
    "to": 1024
  }, {
    "from": 1024,
    "label": "assigns",
    "to": 1025
  }, {
    "from": 949,
    "label": "initializes",
    "to": 947
  }, {
    "from": 947,
    "label": "requires",
    "to": 1026
  }, {
    "from": 949,
    "label": "initializes",
    "to": 947
  }, {
    "from": 947,
    "label": "requires",
    "to": 1027
  }, {
    "from": 949,
    "label": "initializes",
    "to": 947
  }, {
    "from": 947,
    "label": "requires",
    "to": 1028
  }, {
    "from": 6,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 6,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 6,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 6,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 21,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 21,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 21,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 21,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 23,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 23,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 23,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 23,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 24,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 24,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 24,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 24,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 31,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 31,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 31,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 31,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 43,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 43,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 43,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 43,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 51,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 51,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 51,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 51,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 60,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 60,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 60,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 60,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 66,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 66,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 66,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 66,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 206,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 206,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 206,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 206,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 215,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 215,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 215,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 215,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 217,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 217,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 217,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 217,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 221,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 221,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 221,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 221,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 226,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 226,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 226,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 226,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 232,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 232,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 232,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 232,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 233,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 233,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 233,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 233,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 278,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 278,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 278,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 278,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 317,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 317,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 317,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 317,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 377,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 377,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 377,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 377,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 383,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 383,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 383,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 383,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 384,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 384,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 384,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 384,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 385,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 385,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 385,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 385,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 386,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 386,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 386,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 386,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 387,
    "label": "hasArgument",
    "to": 862
  }, {
    "from": 387,
    "label": "hasArgument",
    "to": 864
  }, {
    "from": 387,
    "label": "hasArgument",
    "to": 866
  }, {
    "from": 387,
    "label": "hasArgument",
    "to": 868
  }, {
    "from": 387,
    "label": "hasArgument",
    "to": 870
  }, {
    "from": 387,
    "label": "hasArgument",
    "to": 872
  }, {
    "from": 387,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 387,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 387,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 387,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 389,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 389,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 389,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 389,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 390,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 390,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 390,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 390,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 393,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 393,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 393,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 393,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 394,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 394,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 394,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 394,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 396,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 396,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 396,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 396,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 401,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 401,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 401,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 401,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 404,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 404,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 404,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 404,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 406,
    "label": "hasArgument",
    "to": 874
  }, {
    "from": 406,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 406,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 406,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 406,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 409,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 409,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 409,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 409,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 411,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 411,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 411,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 411,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 412,
    "label": "hasArgument",
    "to": 876
  }, {
    "from": 412,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 412,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 412,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 412,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 422,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 422,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 422,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 422,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 423,
    "label": "hasArgument",
    "to": 878
  }, {
    "from": 423,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 423,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 423,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 423,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 432,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 432,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 432,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 432,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 433,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 433,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 433,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 433,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 439,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 439,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 439,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 439,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 440,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 440,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 440,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 440,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 441,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 441,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 441,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 441,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 444,
    "label": "hasArgument",
    "to": 880
  }, {
    "from": 444,
    "label": "hasArgument",
    "to": 882
  }, {
    "from": 444,
    "label": "hasArgument",
    "to": 884
  }, {
    "from": 444,
    "label": "hasArgument",
    "to": 886
  }, {
    "from": 444,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 444,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 444,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 444,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 459,
    "label": "hasArgument",
    "to": 888
  }, {
    "from": 459,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 459,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 459,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 459,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 464,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 464,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 464,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 464,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 505,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 505,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 505,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 505,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 508,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 508,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 508,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 508,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 509,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 509,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 509,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 509,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 511,
    "label": "hasArgument",
    "to": 745
  }, {
    "from": 511,
    "label": "hasArgument",
    "to": 747
  }, {
    "from": 511,
    "label": "hasArgument",
    "to": 890
  }, {
    "from": 511,
    "label": "hasArgument",
    "to": 892
  }, {
    "from": 511,
    "label": "hasArgument",
    "to": 894
  }, {
    "from": 511,
    "label": "hasArgument",
    "to": 896
  }, {
    "from": 511,
    "label": "hasArgument",
    "to": 898
  }, {
    "from": 511,
    "label": "hasArgument",
    "to": 900
  }, {
    "from": 511,
    "label": "hasArgument",
    "to": 902
  }, {
    "from": 511,
    "label": "hasArgument",
    "to": 904
  }, {
    "from": 511,
    "label": "hasArgument",
    "to": 906
  }, {
    "from": 511,
    "label": "hasArgument",
    "to": 908
  }, {
    "from": 511,
    "label": "hasArgument",
    "to": 910
  }, {
    "from": 511,
    "label": "hasArgument",
    "to": 912
  }, {
    "from": 511,
    "label": "hasArgument",
    "to": 914
  }, {
    "from": 511,
    "label": "hasArgument",
    "to": 916
  }, {
    "from": 511,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 511,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 511,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 511,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 519,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 519,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 519,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 519,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 525,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 525,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 525,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 525,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 529,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 529,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 529,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 529,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 539,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 539,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 539,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 539,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 548,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 548,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 548,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 548,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 564,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 564,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 564,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 564,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 574,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 574,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 574,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 574,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 603,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 603,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 603,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 603,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 604,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 604,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 604,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 604,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 619,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 619,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 619,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 619,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 621,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 621,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 621,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 621,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 629,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 629,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 629,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 629,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 633,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 633,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 633,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 633,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 673,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 673,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 673,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 673,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 674,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 674,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 674,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 674,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 682,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 682,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 682,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 682,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 685,
    "label": "hasArgument",
    "to": 918
  }, {
    "from": 685,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 685,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 685,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 685,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 715,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 715,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 715,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 715,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 717,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 717,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 717,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 717,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 718,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 718,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 718,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 718,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 733,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 733,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 733,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 733,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 734,
    "label": "hasArgument",
    "to": 920
  }, {
    "from": 734,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 734,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 734,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 734,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 737,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 737,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 737,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 737,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 740,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 740,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 740,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 740,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 742,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 742,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 742,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 742,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 743,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 743,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 743,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 743,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 756,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 756,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 756,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 756,
    "label": "hasArgument",
    "to": 973
  }, {
    "from": 764,
    "label": "hasArgument",
    "to": 967
  }, {
    "from": 764,
    "label": "hasArgument",
    "to": 969
  }, {
    "from": 764,
    "label": "hasArgument",
    "to": 971
  }, {
    "from": 764,
    "label": "hasArgument",
    "to": 973
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "native_objects",
    "type": "module"
  }, {
    "id": 2,
    "text": "function(dst,src) for _,v in pairs(src) do dst[#dst+1] = v end end",
    "type": "function"
  }, {
    "id": 3,
    "text": "for _,v in pairs(src) do dst[#dst+1] = v end",
    "type": "statement:genericfor"
  }, {
    "id": 4,
    "text": "dst[#dst+1] = v",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "local function reset()\r\n\tclear_all_records()\r\n\tc_types={}\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "clear_all_records()",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "c_types={}",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "local function strip_c_type(c_type)\r\n\t-- strip const from c_type\r\n\tc_type = c_type:gsub(\"^%s*const%s*\",\"\")\r\n\t-- strip spaces from c_type\r\n\tc_type = c_type:gsub(\"%s*\",\"\")\r\n\treturn c_type\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "c_type = c_type:gsub(\"^%s*const%s*\",\"\")",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "c_type = c_type:gsub(\"%s*\",\"\")",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function new_c_type(c_type, rec)\r\n\tc_types[strip_c_type(c_type)] = rec\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "c_types[strip_c_type(c_type)] = rec",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "local function real_c_type_resolver(self)\r\n\tlocal c_type = self._c_type\r\n\tlocal _type = c_types[c_type]\r\n\t-- if type unknown see if it is a pointer.\r\n\tif _type == nil and c_type ~= \"void*\" and c_type:find(\"*\",1,true) ~= nil then\r\n\t\t-- map it to a generic pointer.\r\n\t\tprint(\"WARNING maping un-resolved pointer type '\" .. c_type ..\"' to 'void *'\")\r\n\t\treturn resolve_c_type(\"void*\")\r\n\tend\r\n\tif _type == nil then\r\n\t\tprint(\"Unkown type: \" .. c_type)\r\n\tend\r\n\trawset(self, \"_type\", _type)\r\n\treturn _type\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "local c_type = self._c_type",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "local _type = c_types[c_type]",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "if _type == nil and c_type ~= \"void*\" and c_type:find(\"*\",1,true) ~= nil then\r\n\t\t-- map it to a generic pointer.\r\n\t\tprint(\"WARNING maping un-resolved pointer type '\" .. c_type ..\"' to 'void *'\")\r\n\t\treturn resolve_c_type(\"void*\")\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "print(\"WARNING maping un-resolved pointer type '\" .. c_type ..\"' to 'void *'\")",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "if _type == nil then\r\n\t\tprint(\"Unkown type: \" .. c_type)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "print(\"Unkown type: \" .. c_type)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "rawset(self, \"_type\", _type)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function resolve_c_type(c_type)\r\n\tlocal c_type = strip_c_type(c_type)\r\n\tlocal resolver = cache_resolvers[c_type]\r\n\tif resolver == nil then\r\n\t\tresolver = {_c_type = c_type}\r\n\t\tsetmetatable(resolver, resolve_meta)\r\n\t\tcache_resolvers[c_type] = resolver\r\n\tend\r\n\treturn resolver\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "local c_type = strip_c_type(c_type)",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "local resolver = cache_resolvers[c_type]",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "if resolver == nil then\r\n\t\tresolver = {_c_type = c_type}\r\n\t\tsetmetatable(resolver, resolve_meta)\r\n\t\tcache_resolvers[c_type] = resolver\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "resolver = {_c_type = c_type}",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "setmetatable(resolver, resolve_meta)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "cache_resolvers[c_type] = resolver",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "local function resolve_rec(rec)\r\n\tif rec.c_type ~= nil and rec.c_type_rec == nil then\r\n\t\trec.c_type_rec = resolve_c_type(rec.c_type)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "if rec.c_type ~= nil and rec.c_type_rec == nil then\r\n\t\trec.c_type_rec = resolve_c_type(rec.c_type)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "rec.c_type_rec = resolve_c_type(rec.c_type)",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "local function ctype(name, rec, rec_type)\r\n\trec = make_record(rec, rec_type)\r\n\t-- record's c_type\r\n\trec.name = name\r\n\trec.c_type = name\r\n\trec._is_c_type = true\r\n\t-- map the c_type to this record\r\n\tnew_c_type(name, rec)\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "rec = make_record(rec, rec_type)",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "rec.name = name",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "rec.c_type = name",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "rec._is_c_type = true",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "new_c_type(name, rec)",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function basetype(name)\r\n\treturn function (lang_type)\r\n\treturn function (default)\r\n\t-- make it an basetype record.\r\n\trec = ctype(name,{},\"basetype\")\r\n\t-- lang type\r\n\trec.lang_type = lang_type\r\n\t-- default value\r\n\trec.default = default\r\n\treturn rec\r\nend\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "rec = ctype(name,{},\"basetype\")",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "rec.lang_type = lang_type",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "rec.default = default",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function error_code(name)\r\n\treturn function (c_type)\r\n\treturn function (rec)\r\n\t-- make error_code record\r\n\tctype(name,rec,\"error_code\")\r\n\trec.c_type = c_type\r\n\t-- mark this type as an error code.\r\n\trec._is_error_code = true\r\nend\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "ctype(name,rec,\"error_code\")",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "rec.c_type = c_type",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "rec._is_error_code = true",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "function object(name)\r\n\treturn function (rec)\r\n\t-- make it an object record.\r\n\tuserdata_type = rec.userdata_type or 'generic'\r\n\trec.userdata_type = userdata_type\r\n\trec.has_obj_flags = true\r\n\tif userdata_type == 'generic' or userdata_type == 'embed' or userdata_type == 'simple ptr' then\r\n\t\tctype(name .. \" *\", rec,\"object\")\r\n\t\trec.is_ptr = true\r\n\t\trec.name = name\r\n\t\t-- map the c_type to this record\r\n\t\tnew_c_type(name, rec)\r\n\t\tif userdata_type == 'embed' or userdata_type == 'simple ptr' then\r\n\t\t\trec.no_weak_ref = true\r\n\t\t\trec.has_obj_flags = false\r\n\t\tend\r\n\telse\r\n\t\trec.no_weak_ref = true\r\n\t\tif userdata_type == 'simple' or userdata_type == 'simple ptr' then\r\n\t\t\trec.has_obj_flags = false\r\n\t\tend\r\n\t\tctype(name, rec, \"object\")\r\n\tend\r\n\t-- check object type flags.\r\n\tif rec.no_weak_ref == nil then\r\n\t\trec.no_weak_ref = false\r\n\tend\r\n\t-- check if this type generates errors on NULLs\r\n\tif rec.error_on_null then\r\n\t\t-- create 'is_error_check' code\r\n\t\trec.is_error_check = function(rec)\r\n\t\t\treturn \"(NULL == ${\" .. rec.name .. \"})\"\r\n\t\tend\r\n\t\trec.ffi_is_error_check = function(rec)\r\n\t\t\treturn \"(nil == ${\" .. rec.name .. \"})\"\r\n\t\tend\r\n\tend\r\n\treturn rec\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 56,
    "text": "userdata_type = rec.userdata_type or 'generic'",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "rec.userdata_type = userdata_type",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "rec.has_obj_flags = true",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "if userdata_type == 'generic' or userdata_type == 'embed' or userdata_type == 'simple ptr' then\r\n\t\tctype(name .. \" *\", rec,\"object\")\r\n\t\trec.is_ptr = true\r\n\t\trec.name = name\r\n\t\t-- map the c_type to this record\r\n\t\tnew_c_type(name, rec)\r\n\t\tif userdata_type == 'embed' or userdata_type == 'simple ptr' then\r\n\t\t\trec.no_weak_ref = true\r\n\t\t\trec.has_obj_flags = false\r\n\t\tend\r\n\telse\r\n\t\trec.no_weak_ref = true\r\n\t\tif userdata_type == 'simple' or userdata_type == 'simple ptr' then\r\n\t\t\trec.has_obj_flags = false\r\n\t\tend\r\n\t\tctype(name, rec, \"object\")\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "ctype(name .. \" *\", rec,\"object\")",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "rec.is_ptr = true",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "if userdata_type == 'embed' or userdata_type == 'simple ptr' then\r\n\t\t\trec.no_weak_ref = true\r\n\t\t\trec.has_obj_flags = false\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "rec.no_weak_ref = true",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "rec.has_obj_flags = false",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "if userdata_type == 'simple' or userdata_type == 'simple ptr' then\r\n\t\t\trec.has_obj_flags = false\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "ctype(name, rec, \"object\")",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "if rec.no_weak_ref == nil then\r\n\t\trec.no_weak_ref = false\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "rec.no_weak_ref = false",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "if rec.error_on_null then\r\n\t\t-- create 'is_error_check' code\r\n\t\trec.is_error_check = function(rec)\r\n\t\t\treturn \"(NULL == ${\" .. rec.name .. \"})\"\r\n\t\tend\r\n\t\trec.ffi_is_error_check = function(rec)\r\n\t\t\treturn \"(nil == ${\" .. rec.name .. \"})\"\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "rec.is_error_check = function(rec)\r\n\t\t\treturn \"(NULL == ${\" .. rec.name .. \"})\"\r\n\t\tend",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "rec.ffi_is_error_check = function(rec)\r\n\t\t\treturn \"(nil == ${\" .. rec.name .. \"})\"\r\n\t\tend",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "function(rec)\r\n\t\t\treturn \"(NULL == ${\" .. rec.name .. \"})\"\r\n\t\tend",
    "type": "function"
  }, {
    "id": 74,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 75,
    "text": "function(rec)\r\n\t\t\treturn \"(nil == ${\" .. rec.name .. \"})\"\r\n\t\tend",
    "type": "function"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "function submodule(name)\r\n\treturn function (rec)\r\n\trec = object(name)(rec)\r\n\trec.register_as_submodule = true\r\n\treturn rec\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 78,
    "text": "rec = object(name)(rec)",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "rec.register_as_submodule = true",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "function package(name)\r\n\tif type(name) == 'table' then\r\n\t\tlocal rec = name\r\n\t\trec = object('_MOD_GLOBAL_')(rec)\r\n\t\trec.is_package = true\r\n\t\trec.is_mod_global = true\r\n\t\treturn rec\r\n\tend\r\n\treturn function (rec)\r\n\trec = object(name)(rec)\r\n\trec.is_package = true\r\n\treturn rec\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 82,
    "text": "if type(name) == 'table' then\r\n\t\tlocal rec = name\r\n\t\trec = object('_MOD_GLOBAL_')(rec)\r\n\t\trec.is_package = true\r\n\t\trec.is_mod_global = true\r\n\t\treturn rec\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 83,
    "text": "local rec = name",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "rec = object('_MOD_GLOBAL_')(rec)",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "rec.is_package = true",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "rec.is_mod_global = true",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "function meta_object(name)\r\n\treturn function (rec)\r\n\trec = object(name)(rec)\r\n\trec.is_package = true\r\n\trec.is_meta = true\r\n\treturn rec\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 89,
    "text": "rec.is_meta = true",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 91,
    "text": "function extends(name)\r\n\treturn function (rec)\r\n\trec = make_record(rec, \"extends\")\r\n\t-- base object name\r\n\trec.name = name\r\n\t-- check for cast_type\r\n\tif rec.cast_type == nil then\r\n\t\trec.cast_offset = 0\r\n\t\trec.cast_type = 'direct'\r\n\tend\r\n\treturn rec\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 92,
    "text": "rec = make_record(rec, \"extends\")",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "if rec.cast_type == nil then\r\n\t\trec.cast_offset = 0\r\n\t\trec.cast_type = 'direct'\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 94,
    "text": "rec.cast_offset = 0",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "rec.cast_type = 'direct'",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "function dyn_caster(rec)\r\n\trec = make_record(rec, \"dyn_caster\")\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 98,
    "text": "rec = make_record(rec, \"dyn_caster\")",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 100,
    "text": "function option(name)\r\n\treturn function (rec)\r\n\trec = make_record(rec, \"option\")\r\n\t-- option name.\r\n\trec.name = name\r\n\treturn rec\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 101,
    "text": "rec = make_record(rec, \"option\")",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "function field(c_type)\r\n\treturn function (name)\r\n\treturn function (rec)\r\n\tlocal access = rec and rec[1] or nil\r\n\trec = make_record(rec, \"field\")\r\n\t-- field's c_type\r\n\trec.c_type = c_type\r\n\t-- field's name\r\n\trec.name = name\r\n\t-- access permissions\r\n\tif type(access) == 'string' then\r\n\t\taccess = access:lower()\r\n\t\t-- check for write access\r\n\t\tif access == 'rw' then\r\n\t\t\trec.is_writable = true\r\n\t\telseif access == 'ro' then\r\n\t\t\trec.is_writable = false\r\n\t\telse\r\n\t\t\trec.is_writable = false\r\n\t\tend\r\n\telseif rec.is_writable == nil then\r\n\t\trec.is_writable = false\r\n\tend\r\n\treturn rec\r\nend\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 104,
    "text": "local access = rec and rec[1] or nil",
    "type": "statement:localassign"
  }, {
    "id": 105,
    "text": "rec = make_record(rec, \"field\")",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "if type(access) == 'string' then\r\n\t\taccess = access:lower()\r\n\t\t-- check for write access\r\n\t\tif access == 'rw' then\r\n\t\t\trec.is_writable = true\r\n\t\telseif access == 'ro' then\r\n\t\t\trec.is_writable = false\r\n\t\telse\r\n\t\t\trec.is_writable = false\r\n\t\tend\r\n\telseif rec.is_writable == nil then\r\n\t\trec.is_writable = false\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 107,
    "text": "access = access:lower()",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "if access == 'rw' then\r\n\t\t\trec.is_writable = true\r\n\t\telseif access == 'ro' then\r\n\t\t\trec.is_writable = false\r\n\t\telse\r\n\t\t\trec.is_writable = false\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 109,
    "text": "rec.is_writable = true",
    "type": "statement:assign"
  }, {
    "id": 110,
    "text": "rec.is_writable = false",
    "type": "statement:assign"
  }, {
    "id": 111,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 112,
    "text": "function const(name)\r\n\treturn function (rec)\r\n\tlocal value = rec[1]\r\n\trec = make_record(rec, \"const\")\r\n\t-- field's name\r\n\trec.name = name\r\n\t-- field's value\r\n\trec.value = value\r\n\treturn rec\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 113,
    "text": "local value = rec[1]",
    "type": "statement:localassign"
  }, {
    "id": 114,
    "text": "rec = make_record(rec, \"const\")",
    "type": "statement:assign"
  }, {
    "id": 115,
    "text": "rec.value = value",
    "type": "statement:assign"
  }, {
    "id": 116,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 117,
    "text": "function const_def(name)\r\n\treturn function (rec)\r\n\tlocal value = rec[1]\r\n\trec = make_record(rec, \"const\")\r\n\t-- this is a constant definition.\r\n\trec.is_define = true\r\n\t-- default to 'number' type.\r\n\trec.vtype = rec.vtype or 'number'\r\n\t-- field's name\r\n\trec.name = name\r\n\t-- field's value\r\n\trec.value = value\r\n\treturn rec\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 118,
    "text": "rec.is_define = true",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "rec.vtype = rec.vtype or 'number'",
    "type": "statement:assign"
  }, {
    "id": 120,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 121,
    "text": "function constants(values)\r\n\trec = make_record({}, \"constants\")\r\n\trec.values = values\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 122,
    "text": "rec = make_record({}, \"constants\")",
    "type": "statement:assign"
  }, {
    "id": 123,
    "text": "rec.values = values",
    "type": "statement:assign"
  }, {
    "id": 124,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 125,
    "text": "function export_definitions(values)\r\n\tif type(values) == 'string' then\r\n\t\tlocal name = values\r\n\t\treturn function(values)\r\n\t\t\treturn package(name)({\r\n\t\t\t\tmap_constants_bidirectional = true,\r\n\t\t\t\texport_definitions(values)\r\n\t\t\t})\r\n\t\tend\r\n\tend\r\n\trec = make_record({}, \"export_definitions\")\r\n\trec.values = values\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 126,
    "text": "if type(values) == 'string' then\r\n\t\tlocal name = values\r\n\t\treturn function(values)\r\n\t\t\treturn package(name)({\r\n\t\t\t\tmap_constants_bidirectional = true,\r\n\t\t\t\texport_definitions(values)\r\n\t\t\t})\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 127,
    "text": "local name = values",
    "type": "statement:localassign"
  }, {
    "id": 128,
    "text": "rec = make_record({}, \"export_definitions\")",
    "type": "statement:assign"
  }, {
    "id": 129,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 130,
    "text": "function include(file)\r\n\tlocal rec = {}\r\n\trec = make_record(rec, \"include\")\r\n\trec.is_system = false\r\n\trec.file = file\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 131,
    "text": "local rec = {}",
    "type": "statement:localassign"
  }, {
    "id": 132,
    "text": "rec = make_record(rec, \"include\")",
    "type": "statement:assign"
  }, {
    "id": 133,
    "text": "rec.is_system = false",
    "type": "statement:assign"
  }, {
    "id": 134,
    "text": "rec.file = file",
    "type": "statement:assign"
  }, {
    "id": 135,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 136,
    "text": "function sys_include(file)\r\n\tlocal rec = {}\r\n\trec = make_record(rec, \"include\")\r\n\trec.is_system = true\r\n\trec.file = file\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 137,
    "text": "rec.is_system = true",
    "type": "statement:assign"
  }, {
    "id": 138,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 139,
    "text": "function c_function(name)\r\n\treturn function (rec)\r\n\trec = make_record(rec, \"c_function\")\r\n\t-- function name.\r\n\trec.name = name\r\n\t-- function type (normal function or object method)\r\n\trec.f_type = \"function\"\r\n\t-- variable lookup\r\n\trec.get_var = function(self, name)\r\n\t\tfor i=1,#self do\r\n\t\t\tlocal var = self[i]\r\n\t\t\tif is_record(var) and var.name == name then\r\n\t\t\t\treturn var\r\n\t\t\tend\r\n\t\tend\r\n\t\treturn nil\r\n\tend\r\n\treturn rec\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 140,
    "text": "rec = make_record(rec, \"c_function\")",
    "type": "statement:assign"
  }, {
    "id": 141,
    "text": "rec.f_type = \"function\"",
    "type": "statement:assign"
  }, {
    "id": 142,
    "text": "rec.get_var = function(self, name)\r\n\t\tfor i=1,#self do\r\n\t\t\tlocal var = self[i]\r\n\t\t\tif is_record(var) and var.name == name then\r\n\t\t\t\treturn var\r\n\t\t\tend\r\n\t\tend\r\n\t\treturn nil\r\n\tend",
    "type": "statement:assign"
  }, {
    "id": 143,
    "text": "for i=1,#self do\r\n\t\t\tlocal var = self[i]\r\n\t\t\tif is_record(var) and var.name == name then\r\n\t\t\t\treturn var\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 144,
    "text": "local var = self[i]",
    "type": "statement:localassign"
  }, {
    "id": 145,
    "text": "if is_record(var) and var.name == name then\r\n\t\t\t\treturn var\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 146,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 147,
    "text": "function(self, name)\r\n\t\tfor i=1,#self do\r\n\t\t\tlocal var = self[i]\r\n\t\t\tif is_record(var) and var.name == name then\r\n\t\t\t\treturn var\r\n\t\t\tend\r\n\t\tend\r\n\t\treturn nil\r\n\tend",
    "type": "function"
  }, {
    "id": 148,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 149,
    "text": "function method(name)\r\n\treturn function (rec)\r\n\t-- handle the same way as normal functions\r\n\trec = c_function(name)(rec)\r\n\t-- mark this function as a method.\r\n\trec._is_method = true\r\n\t-- if the method is a destructor, then also make it a meta method\r\n\t-- to be used for garbagecollection\r\n\tif rec.is_destructor then\r\n\t\trec._is_meta_method = true\r\n\tend\r\n\trec.f_type = \"method\"\r\n\t-- check if method is a meta-method.\r\n\trec._is_meta_method = meta_methods[rec.name]\r\n\treturn rec\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 150,
    "text": "rec = c_function(name)(rec)",
    "type": "statement:assign"
  }, {
    "id": 151,
    "text": "rec._is_method = true",
    "type": "statement:assign"
  }, {
    "id": 152,
    "text": "if rec.is_destructor then\r\n\t\trec._is_meta_method = true\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 153,
    "text": "rec._is_meta_method = true",
    "type": "statement:assign"
  }, {
    "id": 154,
    "text": "rec.f_type = \"method\"",
    "type": "statement:assign"
  }, {
    "id": 155,
    "text": "rec._is_meta_method = meta_methods[rec.name]",
    "type": "statement:assign"
  }, {
    "id": 156,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 157,
    "text": "function constructor(name)\r\n\treturn function (rec)\r\n\tif type(name) == 'table' then rec = name; name = 'new' end\r\n\t-- handle the same way as normal method\r\n\trec = method(name)(rec)\r\n\t-- mark this method as the constructor\r\n\trec.is_constructor = true\r\n\treturn rec\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 158,
    "text": "if type(name) == 'table' then rec = name; name = 'new' end",
    "type": "statement:if"
  }, {
    "id": 159,
    "text": "rec = name",
    "type": "statement:assign"
  }, {
    "id": 160,
    "text": "name = 'new'",
    "type": "statement:assign"
  }, {
    "id": 161,
    "text": "rec = method(name)(rec)",
    "type": "statement:assign"
  }, {
    "id": 162,
    "text": "rec.is_constructor = true",
    "type": "statement:assign"
  }, {
    "id": 163,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 164,
    "text": "function destructor(name)\r\n\treturn function (rec)\r\n\tif type(name) == 'table' then\r\n\t\trec = name\r\n\t\trec._is_hidden = true\r\n\t\tname = 'delete'\r\n\tend\r\n\t-- handle the same way as normal method\r\n\trec = method(name)(rec)\r\n\t-- mark this method as the destructor\r\n\trec.is_destructor = true\r\n\t-- also register it as a metamethod for garbagecollection.\r\n\trec._is_meta_method = true\r\n\treturn rec\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 165,
    "text": "if type(name) == 'table' then\r\n\t\trec = name\r\n\t\trec._is_hidden = true\r\n\t\tname = 'delete'\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 166,
    "text": "rec._is_hidden = true",
    "type": "statement:assign"
  }, {
    "id": 167,
    "text": "name = 'delete'",
    "type": "statement:assign"
  }, {
    "id": 168,
    "text": "rec.is_destructor = true",
    "type": "statement:assign"
  }, {
    "id": 169,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 170,
    "text": "function method_new(rec)\r\n\treturn constructor(rec)\r\nend",
    "type": "function"
  }, {
    "id": 171,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 172,
    "text": "function method_delete(rec)\r\n\treturn destructor(rec)\r\nend",
    "type": "function"
  }, {
    "id": 173,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 174,
    "text": "function define(name)\r\n\treturn function(value)\r\n\trec = make_record({}, \"define\")\r\n\trec.name = name\r\n\trec.value = value\r\n\treturn rec\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 175,
    "text": "rec = make_record({}, \"define\")",
    "type": "statement:assign"
  }, {
    "id": 176,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 177,
    "text": "function c_source(part)\r\n\treturn function(src)\r\n\tif src == nil then\r\n\t\tsrc = part\r\n\t\tpart = nil\r\n\tend\r\n\trec = make_record({}, \"c_source\")\r\n\trec.part = part or \"src\"\r\n\trec.src = src\r\n\treturn rec\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 178,
    "text": "if src == nil then\r\n\t\tsrc = part\r\n\t\tpart = nil\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 179,
    "text": "src = part",
    "type": "statement:assign"
  }, {
    "id": 180,
    "text": "part = nil",
    "type": "statement:assign"
  }, {
    "id": 181,
    "text": "rec = make_record({}, \"c_source\")",
    "type": "statement:assign"
  }, {
    "id": 182,
    "text": "rec.part = part or \"src\"",
    "type": "statement:assign"
  }, {
    "id": 183,
    "text": "rec.src = src",
    "type": "statement:assign"
  }, {
    "id": 184,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 185,
    "text": "local function strip_variable_tokens(val, tokens)\r\n\tlocal prefix, val, postfix = val:match(\"^([!@&*(?#]*)([%w_ *]*)([@?)<>]*[0-9]*)\")\r\n\treturn prefix .. (tokens or '') .. postfix, val\r\nend",
    "type": "function"
  }, {
    "id": 186,
    "text": "local prefix, val, postfix = val:match(\"^([!@&*(?#]*)([%w_ *]*)([@?)<>]*[0-9]*)\")",
    "type": "statement:localassign"
  }, {
    "id": 187,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 188,
    "text": "local function clean_variable_type_name(vtype,vname)\r\n\tlocal tokens\r\n\ttokens, vtype = strip_variable_tokens(vtype)\r\n\ttokens, vname = strip_variable_tokens(vname)\r\n\treturn vtype, vname\r\nend",
    "type": "function"
  }, {
    "id": 189,
    "text": "local tokens",
    "type": "statement:localassign"
  }, {
    "id": 190,
    "text": "tokens, vtype = strip_variable_tokens(vtype)",
    "type": "statement:assign"
  }, {
    "id": 191,
    "text": "tokens, vname = strip_variable_tokens(vname)",
    "type": "statement:assign"
  }, {
    "id": 192,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 193,
    "text": "local function parse_variable_name(var)\r\n\t-- no parsing needed for '<any>'\r\n\tif var.c_type == '<any>' then return end\r\n\t-- strip tokens from variable name & c_type\r\n\tlocal tokens, name, c_type\r\n\ttokens, name = strip_variable_tokens(var.name)\r\n\ttokens, c_type = strip_variable_tokens(var.c_type, tokens)\r\n\t-- set variable name to stripped name\r\n\tvar.name = name\r\n\tvar.c_type = c_type\r\n\t-- parse prefix & postfix tokens\r\n\tlocal n=1\r\n\tlocal len = #tokens\r\n\twhile n <= len do\r\n\t\tlocal tok = tokens:sub(n,n)\r\n\t\tn = n + 1\r\n\t\tif tok == '*' then\r\n\t\t\tassert(var.wrap == nil, \"Variable already has a access wrapper.\")\r\n\t\t\tvar.wrap = '*'\r\n\t\telseif tok == '&' then\r\n\t\t\tassert(var.wrap == nil, \"Variable already has a access wrapper.\")\r\n\t\t\tvar.wrap = '&'\r\n\t\telseif tok == '#' then\r\n\t\t\tvar.is_length_ref = true\r\n\t\telseif tok == '?' then\r\n\t\t\tvar.is_optional = true\r\n\t\t\t-- eat the rest of the tokens as the default value.\r\n\t\t\tif n <= len then\r\n\t\t\t\tvar.default = tokens:sub(n)\r\n\t\t\tend\r\n\t\t\tbreak\r\n\t\telseif tok == '!' then\r\n\t\t\tvar.own = true\r\n\t\telseif tok == '@' then\r\n\t\t\tvar.is_ref_field = true\r\n\t\t\terror(\"`@ref_name` not yet supported.\")\r\n\t\telseif tok == '<' or tok == '>' then\r\n\t\t\tlocal idx = tokens:match('([0-9]*)', n)\r\n\t\t\tassert(idx, \"Variable already has a stack order 'idx'\")\r\n\t\t\tvar.idx = tonumber(idx)\r\n\t\t\tif tok == '>' then\r\n\t\t\t\t-- force this variable to an output type.\r\n\t\t\t\tvar._rec_type = 'var_out'\r\n\t\t\telse\r\n\t\t\t\tassert(var._rec_type == 'var_in', \"Can't make an output variable into an input variable.\")\r\n\t\t\tend\r\n\t\t\t-- skip index value.\r\n\t\t\tif idx then n = n + #idx end\r\n\t\telseif tok == '(' or tok == ')' then\r\n\t\t\tvar._rec_type = 'var_out'\r\n\t\t\tvar.is_temp = true\r\n\t\tend\r\n\tend\r\n\t-- do some validation.\r\n\tif var.own then\r\n\t\tassert(var._rec_type == 'var_out', \"Only output variables can be marked as 'owned'.\")\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 194,
    "text": "if var.c_type == '<any>' then return end",
    "type": "statement:if"
  }, {
    "id": 195,
    "text": "local tokens, name, c_type",
    "type": "statement:localassign"
  }, {
    "id": 196,
    "text": "tokens, name = strip_variable_tokens(var.name)",
    "type": "statement:assign"
  }, {
    "id": 197,
    "text": "tokens, c_type = strip_variable_tokens(var.c_type, tokens)",
    "type": "statement:assign"
  }, {
    "id": 198,
    "text": "var.name = name",
    "type": "statement:assign"
  }, {
    "id": 199,
    "text": "var.c_type = c_type",
    "type": "statement:assign"
  }, {
    "id": 200,
    "text": "local n=1",
    "type": "statement:localassign"
  }, {
    "id": 201,
    "text": "local len = #tokens",
    "type": "statement:localassign"
  }, {
    "id": 202,
    "text": "while n <= len do\r\n\t\tlocal tok = tokens:sub(n,n)\r\n\t\tn = n + 1\r\n\t\tif tok == '*' then\r\n\t\t\tassert(var.wrap == nil, \"Variable already has a access wrapper.\")\r\n\t\t\tvar.wrap = '*'\r\n\t\telseif tok == '&' then\r\n\t\t\tassert(var.wrap == nil, \"Variable already has a access wrapper.\")\r\n\t\t\tvar.wrap = '&'\r\n\t\telseif tok == '#' then\r\n\t\t\tvar.is_length_ref = true\r\n\t\telseif tok == '?' then\r\n\t\t\tvar.is_optional = true\r\n\t\t\t-- eat the rest of the tokens as the default value.\r\n\t\t\tif n <= len then\r\n\t\t\t\tvar.default = tokens:sub(n)\r\n\t\t\tend\r\n\t\t\tbreak\r\n\t\telseif tok == '!' then\r\n\t\t\tvar.own = true\r\n\t\telseif tok == '@' then\r\n\t\t\tvar.is_ref_field = true\r\n\t\t\terror(\"`@ref_name` not yet supported.\")\r\n\t\telseif tok == '<' or tok == '>' then\r\n\t\t\tlocal idx = tokens:match('([0-9]*)', n)\r\n\t\t\tassert(idx, \"Variable already has a stack order 'idx'\")\r\n\t\t\tvar.idx = tonumber(idx)\r\n\t\t\tif tok == '>' then\r\n\t\t\t\t-- force this variable to an output type.\r\n\t\t\t\tvar._rec_type = 'var_out'\r\n\t\t\telse\r\n\t\t\t\tassert(var._rec_type == 'var_in', \"Can't make an output variable into an input variable.\")\r\n\t\t\tend\r\n\t\t\t-- skip index value.\r\n\t\t\tif idx then n = n + #idx end\r\n\t\telseif tok == '(' or tok == ')' then\r\n\t\t\tvar._rec_type = 'var_out'\r\n\t\t\tvar.is_temp = true\r\n\t\tend\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 203,
    "text": "local tok = tokens:sub(n,n)",
    "type": "statement:localassign"
  }, {
    "id": 204,
    "text": "n = n + 1",
    "type": "statement:assign"
  }, {
    "id": 205,
    "text": "if tok == '*' then\r\n\t\t\tassert(var.wrap == nil, \"Variable already has a access wrapper.\")\r\n\t\t\tvar.wrap = '*'\r\n\t\telseif tok == '&' then\r\n\t\t\tassert(var.wrap == nil, \"Variable already has a access wrapper.\")\r\n\t\t\tvar.wrap = '&'\r\n\t\telseif tok == '#' then\r\n\t\t\tvar.is_length_ref = true\r\n\t\telseif tok == '?' then\r\n\t\t\tvar.is_optional = true\r\n\t\t\t-- eat the rest of the tokens as the default value.\r\n\t\t\tif n <= len then\r\n\t\t\t\tvar.default = tokens:sub(n)\r\n\t\t\tend\r\n\t\t\tbreak\r\n\t\telseif tok == '!' then\r\n\t\t\tvar.own = true\r\n\t\telseif tok == '@' then\r\n\t\t\tvar.is_ref_field = true\r\n\t\t\terror(\"`@ref_name` not yet supported.\")\r\n\t\telseif tok == '<' or tok == '>' then\r\n\t\t\tlocal idx = tokens:match('([0-9]*)', n)\r\n\t\t\tassert(idx, \"Variable already has a stack order 'idx'\")\r\n\t\t\tvar.idx = tonumber(idx)\r\n\t\t\tif tok == '>' then\r\n\t\t\t\t-- force this variable to an output type.\r\n\t\t\t\tvar._rec_type = 'var_out'\r\n\t\t\telse\r\n\t\t\t\tassert(var._rec_type == 'var_in', \"Can't make an output variable into an input variable.\")\r\n\t\t\tend\r\n\t\t\t-- skip index value.\r\n\t\t\tif idx then n = n + #idx end\r\n\t\telseif tok == '(' or tok == ')' then\r\n\t\t\tvar._rec_type = 'var_out'\r\n\t\t\tvar.is_temp = true\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 206,
    "text": "assert(var.wrap == nil, \"Variable already has a access wrapper.\")",
    "type": "statement:functioncall"
  }, {
    "id": 207,
    "text": "var.wrap = '*'",
    "type": "statement:assign"
  }, {
    "id": 208,
    "text": "var.wrap = '&'",
    "type": "statement:assign"
  }, {
    "id": 209,
    "text": "var.is_length_ref = true",
    "type": "statement:assign"
  }, {
    "id": 210,
    "text": "var.is_optional = true",
    "type": "statement:assign"
  }, {
    "id": 211,
    "text": "if n <= len then\r\n\t\t\t\tvar.default = tokens:sub(n)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 212,
    "text": "var.default = tokens:sub(n)",
    "type": "statement:assign"
  }, {
    "id": 213,
    "text": "var.own = true",
    "type": "statement:assign"
  }, {
    "id": 214,
    "text": "var.is_ref_field = true",
    "type": "statement:assign"
  }, {
    "id": 215,
    "text": "error(\"`@ref_name` not yet supported.\")",
    "type": "statement:functioncall"
  }, {
    "id": 216,
    "text": "local idx = tokens:match('([0-9]*)', n)",
    "type": "statement:localassign"
  }, {
    "id": 217,
    "text": "assert(idx, \"Variable already has a stack order 'idx'\")",
    "type": "statement:functioncall"
  }, {
    "id": 218,
    "text": "var.idx = tonumber(idx)",
    "type": "statement:assign"
  }, {
    "id": 219,
    "text": "if tok == '>' then\r\n\t\t\t\t-- force this variable to an output type.\r\n\t\t\t\tvar._rec_type = 'var_out'\r\n\t\t\telse\r\n\t\t\t\tassert(var._rec_type == 'var_in', \"Can't make an output variable into an input variable.\")\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 220,
    "text": "var._rec_type = 'var_out'",
    "type": "statement:assign"
  }, {
    "id": 221,
    "text": "assert(var._rec_type == 'var_in', \"Can't make an output variable into an input variable.\")",
    "type": "statement:functioncall"
  }, {
    "id": 222,
    "text": "if idx then n = n + #idx end",
    "type": "statement:if"
  }, {
    "id": 223,
    "text": "n = n + #idx",
    "type": "statement:assign"
  }, {
    "id": 224,
    "text": "var.is_temp = true",
    "type": "statement:assign"
  }, {
    "id": 225,
    "text": "if var.own then\r\n\t\tassert(var._rec_type == 'var_out', \"Only output variables can be marked as 'owned'.\")\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 226,
    "text": "assert(var._rec_type == 'var_out', \"Only output variables can be marked as 'owned'.\")",
    "type": "statement:functioncall"
  }, {
    "id": 227,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 228,
    "text": "function var_out(rec)\r\n\trec = make_record(rec, \"var_out\")\r\n\t-- out variable's c_type\r\n\trec.c_type = table.remove(rec, 1)\r\n\t-- out variable's name\r\n\trec.name = table.remove(rec, 1)\r\n\t-- parse tags from name.\r\n\tparse_variable_name(rec)\r\n\tresolve_rec(rec)\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 229,
    "text": "rec = make_record(rec, \"var_out\")",
    "type": "statement:assign"
  }, {
    "id": 230,
    "text": "rec.c_type = table.remove(rec, 1)",
    "type": "statement:assign"
  }, {
    "id": 231,
    "text": "rec.name = table.remove(rec, 1)",
    "type": "statement:assign"
  }, {
    "id": 232,
    "text": "parse_variable_name(rec)",
    "type": "statement:functioncall"
  }, {
    "id": 233,
    "text": "resolve_rec(rec)",
    "type": "statement:functioncall"
  }, {
    "id": 234,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 235,
    "text": "function var_in(rec)\r\n\trec = make_record(rec, \"var_in\")\r\n\t-- in variable's c_type\r\n\trec.c_type = table.remove(rec, 1)\r\n\t-- in variable's name\r\n\trec.name = table.remove(rec, 1)\r\n\t-- parse tags from name.\r\n\tparse_variable_name(rec)\r\n\tresolve_rec(rec)\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 236,
    "text": "rec = make_record(rec, \"var_in\")",
    "type": "statement:assign"
  }, {
    "id": 237,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 238,
    "text": "function var_ref(var)\r\n\tlocal rec = {}\r\n\t-- copy details from var_* record\r\n\tfor k,v in pairs(var) do rec[k] = v end\r\n\t-- make variable reference.\r\n\trec = make_record(rec, \"var_ref\")\r\n\t-- in variable's c_type\r\n\trec.c_type = var.c_type\r\n\t-- in variable's name\r\n\trec.name = var.name\r\n\tresolve_rec(rec)\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 239,
    "text": "for k,v in pairs(var) do rec[k] = v end",
    "type": "statement:genericfor"
  }, {
    "id": 240,
    "text": "rec[k] = v",
    "type": "statement:assign"
  }, {
    "id": 241,
    "text": "rec = make_record(rec, \"var_ref\")",
    "type": "statement:assign"
  }, {
    "id": 242,
    "text": "rec.c_type = var.c_type",
    "type": "statement:assign"
  }, {
    "id": 243,
    "text": "rec.name = var.name",
    "type": "statement:assign"
  }, {
    "id": 244,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 245,
    "text": "function c_call(return_type)\r\n\treturn function (cfunc)\r\n\treturn function (params)\r\n\tlocal rec = make_record({}, \"c_call\")\r\n\t-- parse return c_type.\r\n\trec.ret = return_type or \"void\"\r\n\t-- parse c function to call.\r\n\trec.cfunc = cfunc\r\n\t-- parse params\r\n\trec.params = params\r\n\tif rec.params == nil then rec.params = {} end\r\n\treturn rec\r\nend\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 246,
    "text": "local rec = make_record({}, \"c_call\")",
    "type": "statement:localassign"
  }, {
    "id": 247,
    "text": "rec.ret = return_type or \"void\"",
    "type": "statement:assign"
  }, {
    "id": 248,
    "text": "rec.cfunc = cfunc",
    "type": "statement:assign"
  }, {
    "id": 249,
    "text": "rec.params = params",
    "type": "statement:assign"
  }, {
    "id": 250,
    "text": "if rec.params == nil then rec.params = {} end",
    "type": "statement:if"
  }, {
    "id": 251,
    "text": "rec.params = {}",
    "type": "statement:assign"
  }, {
    "id": 252,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 253,
    "text": "function c_macro_call(ret)\r\n\treturn function (cfunc)\r\n\treturn function (params)\r\n\tlocal rec = c_call(ret)(cfunc)(params)\r\n\trec.ffi_need_wrapper = \"c_wrap\"\r\n\trec.is_macro_call = true\r\n\treturn rec\r\nend\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 254,
    "text": "local rec = c_call(ret)(cfunc)(params)",
    "type": "statement:localassign"
  }, {
    "id": 255,
    "text": "rec.ffi_need_wrapper = \"c_wrap\"",
    "type": "statement:assign"
  }, {
    "id": 256,
    "text": "rec.is_macro_call = true",
    "type": "statement:assign"
  }, {
    "id": 257,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 258,
    "text": "function c_inline_call(ret)\r\n\treturn function (cfunc)\r\n\treturn function (params)\r\n\tlocal rec = c_call(ret)(cfunc)(params)\r\n\trec.ffi_need_wrapper = \"c_wrap\"\r\n\trec.is_inline_call = true\r\n\treturn rec\r\nend\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 259,
    "text": "rec.is_inline_call = true",
    "type": "statement:assign"
  }, {
    "id": 260,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 261,
    "text": "function c_export_call(ret)\r\n\treturn function (cfunc)\r\n\treturn function (params)\r\n\tlocal rec = c_call(ret)(cfunc)(params)\r\n\trec.ffi_need_wrapper = \"c_export\"\r\n\trec.is_export_call = true\r\n\treturn rec\r\nend\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 262,
    "text": "rec.ffi_need_wrapper = \"c_export\"",
    "type": "statement:assign"
  }, {
    "id": 263,
    "text": "rec.is_export_call = true",
    "type": "statement:assign"
  }, {
    "id": 264,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 265,
    "text": "function c_method_call(ret)\r\n\treturn function (cfunc)\r\n\treturn function (params)\r\n\tlocal rec = c_call(ret)(cfunc)(params)\r\n\trec.is_method_call = true\r\n\treturn rec\r\nend\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 266,
    "text": "rec.is_method_call = true",
    "type": "statement:assign"
  }, {
    "id": 267,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 268,
    "text": "function c_export_method_call(ret)\r\n\treturn function (cfunc)\r\n\treturn function (params)\r\n\tlocal rec = c_method_call(ret)(cfunc)(params)\r\n\trec.ffi_need_wrapper = \"c_export\"\r\n\trec.is_export_call = true\r\n\treturn rec\r\nend\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 269,
    "text": "local rec = c_method_call(ret)(cfunc)(params)",
    "type": "statement:localassign"
  }, {
    "id": 270,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 271,
    "text": "function c_macro_method_call(ret)\r\n\treturn function (cfunc)\r\n\treturn function (params)\r\n\tlocal rec = c_method_call(ret)(cfunc)(params)\r\n\trec.ffi_need_wrapper = \"c_wrap\"\r\n\trec.is_macro_call = true\r\n\treturn rec\r\nend\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 272,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 273,
    "text": "function callback_type(name)\r\n\treturn function (return_type)\r\n\treturn function (params)\r\n\trec = make_record({}, \"callback_type\")\r\n\trec.is_callback = true\r\n\t-- function type name.\r\n\trec.name = name\r\n\t-- c_type for callback.\r\n\trec.c_type = name\r\n\t-- parse return c_type.\r\n\trec.ret = return_type or \"void\"\r\n\t-- parse params\r\n\tif params == nil then params = {} end\r\n\trec.params = params\r\n\t-- add new types\r\n\tnew_c_type(rec.c_type, rec)\r\n\treturn rec\r\nend\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 274,
    "text": "rec = make_record({}, \"callback_type\")",
    "type": "statement:assign"
  }, {
    "id": 275,
    "text": "rec.is_callback = true",
    "type": "statement:assign"
  }, {
    "id": 276,
    "text": "if params == nil then params = {} end",
    "type": "statement:if"
  }, {
    "id": 277,
    "text": "params = {}",
    "type": "statement:assign"
  }, {
    "id": 278,
    "text": "new_c_type(rec.c_type, rec)",
    "type": "statement:functioncall"
  }, {
    "id": 279,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 280,
    "text": "function callback(c_type)\r\n\tif type(c_type) == 'table' then\r\n\t\tlocal rec = var_in(c_type)\r\n\t\trec.is_callback = true\r\n\t\trec.is_ref = true\r\n\t\trec.ref_field = rec.name\r\n\t\t-- other variable that will be wrapped to hold callback state information.\r\n\t\trec.state_var = table.remove(rec, 1)\r\n\t\treturn rec\r\n\tend\r\n\treturn function (name)\r\n\treturn function (state_var)\r\n\treturn callback({c_type, name, state_var})\r\nend\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 281,
    "text": "if type(c_type) == 'table' then\r\n\t\tlocal rec = var_in(c_type)\r\n\t\trec.is_callback = true\r\n\t\trec.is_ref = true\r\n\t\trec.ref_field = rec.name\r\n\t\t-- other variable that will be wrapped to hold callback state information.\r\n\t\trec.state_var = table.remove(rec, 1)\r\n\t\treturn rec\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 282,
    "text": "local rec = var_in(c_type)",
    "type": "statement:localassign"
  }, {
    "id": 283,
    "text": "rec.is_ref = true",
    "type": "statement:assign"
  }, {
    "id": 284,
    "text": "rec.ref_field = rec.name",
    "type": "statement:assign"
  }, {
    "id": 285,
    "text": "rec.state_var = table.remove(rec, 1)",
    "type": "statement:assign"
  }, {
    "id": 286,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 287,
    "text": "function callback_state(base_type)\r\n\t-- cleanup base_type\r\n\tbase_type = base_type:gsub(\"[ *]\",\"\")\r\n\t-- create name for new state type\r\n\tname = base_type .. \"_cb_state\"\r\n\t-- make it an callback_state record.\r\n\trec = make_record({}, \"callback_state\")\r\n\t-- the wrapper type\r\n\trec.wrap_type = name\r\n\t-- base_type we are wrapping.\r\n\trec.base_type = base_type\r\n\t-- c_type we are wrapping. (pointer to base_type)\r\n\trec.c_type = name .. \" *\"\r\n\t-- resolve base_type\r\n\trec.base_type_rec = resolve_c_type(rec.base_type)\r\n\t-- add new types\r\n\tnew_c_type(rec.c_type, rec)\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 288,
    "text": "base_type = base_type:gsub(\"[ *]\",\"\")",
    "type": "statement:assign"
  }, {
    "id": 289,
    "text": "name = base_type .. \"_cb_state\"",
    "type": "statement:assign"
  }, {
    "id": 290,
    "text": "rec = make_record({}, \"callback_state\")",
    "type": "statement:assign"
  }, {
    "id": 291,
    "text": "rec.wrap_type = name",
    "type": "statement:assign"
  }, {
    "id": 292,
    "text": "rec.base_type = base_type",
    "type": "statement:assign"
  }, {
    "id": 293,
    "text": "rec.c_type = name .. \" *\"",
    "type": "statement:assign"
  }, {
    "id": 294,
    "text": "rec.base_type_rec = resolve_c_type(rec.base_type)",
    "type": "statement:assign"
  }, {
    "id": 295,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 296,
    "text": "function callback_func(c_type)\r\n\treturn function (name)\r\n\trec = make_record({}, \"callback_func\")\r\n\trec.is_ref = true\r\n\trec.ref_field = name\r\n\t-- c_type for callback.\r\n\trec.c_type = c_type\r\n\t-- callback variable's name\r\n\trec.name = name\r\n\t-- callback function name.\r\n\trec.c_func_name = c_type .. \"_\" .. name .. \"_cb\"\r\n\tresolve_rec(rec)\r\n\treturn rec\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 297,
    "text": "rec = make_record({}, \"callback_func\")",
    "type": "statement:assign"
  }, {
    "id": 298,
    "text": "rec.ref_field = name",
    "type": "statement:assign"
  }, {
    "id": 299,
    "text": "rec.c_func_name = c_type .. \"_\" .. name .. \"_cb\"",
    "type": "statement:assign"
  }, {
    "id": 300,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 301,
    "text": "function cb_out(rec)\r\n\trec = make_record(rec, \"cb_out\")\r\n\t-- out variable's c_type\r\n\trec.c_type = table.remove(rec, 1)\r\n\t-- out variable's name\r\n\trec.name = table.remove(rec, 1)\r\n\tresolve_rec(rec)\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 302,
    "text": "rec = make_record(rec, \"cb_out\")",
    "type": "statement:assign"
  }, {
    "id": 303,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 304,
    "text": "function cb_in(rec)\r\n\trec = make_record(rec, \"cb_in\")\r\n\t-- in variable's c_type\r\n\trec.c_type = table.remove(rec, 1)\r\n\t-- in variable's name\r\n\tlocal name = table.remove(rec, 1)\r\n\t-- check if this is a wrapped object parameter.\r\n\tif name:sub(1,1) == '%' then\r\n\t\trec.is_wrapped_obj = true;\r\n\t\tname = name:sub(2)\r\n\tend\r\n\trec.name = name\r\n\tresolve_rec(rec)\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 305,
    "text": "rec = make_record(rec, \"cb_in\")",
    "type": "statement:assign"
  }, {
    "id": 306,
    "text": "local name = table.remove(rec, 1)",
    "type": "statement:localassign"
  }, {
    "id": 307,
    "text": "if name:sub(1,1) == '%' then\r\n\t\trec.is_wrapped_obj = true;\r\n\t\tname = name:sub(2)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 308,
    "text": "rec.is_wrapped_obj = true",
    "type": "statement:assign"
  }, {
    "id": 309,
    "text": "name = name:sub(2)",
    "type": "statement:assign"
  }, {
    "id": 310,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 311,
    "text": "function c_module(name)\r\n\treturn function (rec)\r\n\trec = make_record(rec, \"c_module\")\r\n\t-- c_module name.\r\n\trec.name = name\r\n\treturn rec\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 312,
    "text": "rec = make_record(rec, \"c_module\")",
    "type": "statement:assign"
  }, {
    "id": 313,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 314,
    "text": "function lang(name)\r\n\treturn function (rec)\r\n\t\trec.name = name\r\n\t\trec = make_record(rec, \"lang\")\r\n\t\t-- only keep records for current language.\r\n\t\tif rec.name ~= gen_lang then\r\n\t\t\t-- delete this record and it sub-records\r\n\t\t\trec:delete_record()\r\n\t\tend\r\n\t\treturn rec\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 315,
    "text": "rec = make_record(rec, \"lang\")",
    "type": "statement:assign"
  }, {
    "id": 316,
    "text": "if rec.name ~= gen_lang then\r\n\t\t\t-- delete this record and it sub-records\r\n\t\t\trec:delete_record()\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 317,
    "text": "rec:delete_record()",
    "type": "statement:functioncall"
  }, {
    "id": 318,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 319,
    "text": "function ffi(rec)\r\n\treturn make_record(rec, \"ffi\")\r\nend",
    "type": "function"
  }, {
    "id": 320,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 321,
    "text": "function ffi_files(rec)\r\n\tfor i=1,#rec do\r\n\t\trec[i] = subfile_path(rec[i])\r\n\tend\r\n\treturn make_record(rec, \"ffi_files\")\r\nend",
    "type": "function"
  }, {
    "id": 322,
    "text": "for i=1,#rec do\r\n\t\trec[i] = subfile_path(rec[i])\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 323,
    "text": "rec[i] = subfile_path(rec[i])",
    "type": "statement:assign"
  }, {
    "id": 324,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 325,
    "text": "function ffi_source(part)\r\n\treturn function(src)\r\n\tif src == nil then\r\n\t\tsrc = part\r\n\t\tpart = nil\r\n\tend\r\n\trec = make_record({}, \"ffi_source\")\r\n\trec.part = part or \"ffi_src\"\r\n\trec.src = src\r\n\treturn rec\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 326,
    "text": "rec = make_record({}, \"ffi_source\")",
    "type": "statement:assign"
  }, {
    "id": 327,
    "text": "rec.part = part or \"ffi_src\"",
    "type": "statement:assign"
  }, {
    "id": 328,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 329,
    "text": "function ffi_typedef(cdef)\r\n\treturn ffi_source(\"ffi_typedef\")(cdef)\r\nend",
    "type": "function"
  }, {
    "id": 330,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 331,
    "text": "function ffi_cdef(cdef)\r\n\treturn ffi_source(\"ffi_cdef\")(cdef)\r\nend",
    "type": "function"
  }, {
    "id": 332,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 333,
    "text": "function ffi_load(name)\r\n\tif type(name) == 'table' then\r\n\t\tlocal default_lib = name[1] or name.default\r\n\t\tlocal src = { 'local os_lib_table = {\\n' }\r\n\t\tlocal off = #src\r\n\t\tfor k,v in pairs(name) do\r\n\t\t\tif type(k) == 'string' and type(v) == 'string' then\r\n\t\t\t\toff = off + 1; src[off] = '\\t[\"'\r\n\t\t\t\toff = off + 1; src[off] = k\r\n\t\t\t\toff = off + 1; src[off] = '\"] = \"'\r\n\t\t\t\toff = off + 1; src[off] = v\r\n\t\t\t\toff = off + 1; src[off] = '\",\\n'\r\n\t\t\tend\r\n\t\tend\r\n\t\toff = off + 1; src[off] = '}\\n'\r\n\t\toff = off + 1; src[off] = 'C = ffi_load(os_lib_table[ffi.os]'\r\n\t\tif type(default_lib) == 'string' then\r\n\t\t\toff = off + 1; src[off] = ' or \"'\r\n\t\t\toff = off + 1; src[off] = default_lib\r\n\t\t\toff = off + 1; src[off] = '\"'\r\n\t\tend\r\n\t\tif name.global then\r\n\t\t\toff = off + 1; src[off] = ', true'\r\n\t\tend\r\n\t\toff = off + 1; src[off] = ')\\n'\r\n\t\treturn ffi_source(\"ffi_src\")(tconcat(src))\r\n\tend\r\n\treturn function (global)\r\n\t\tif global == nil then global = false end\r\n\t\tglobal = tostring(global)\r\n\t\tlocal src = 'C = ffi_load(\"' .. name .. '\",' .. global .. ')\\n'\r\n\t\treturn ffi_source(\"ffi_src\")(src)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 334,
    "text": "if type(name) == 'table' then\r\n\t\tlocal default_lib = name[1] or name.default\r\n\t\tlocal src = { 'local os_lib_table = {\\n' }\r\n\t\tlocal off = #src\r\n\t\tfor k,v in pairs(name) do\r\n\t\t\tif type(k) == 'string' and type(v) == 'string' then\r\n\t\t\t\toff = off + 1; src[off] = '\\t[\"'\r\n\t\t\t\toff = off + 1; src[off] = k\r\n\t\t\t\toff = off + 1; src[off] = '\"] = \"'\r\n\t\t\t\toff = off + 1; src[off] = v\r\n\t\t\t\toff = off + 1; src[off] = '\",\\n'\r\n\t\t\tend\r\n\t\tend\r\n\t\toff = off + 1; src[off] = '}\\n'\r\n\t\toff = off + 1; src[off] = 'C = ffi_load(os_lib_table[ffi.os]'\r\n\t\tif type(default_lib) == 'string' then\r\n\t\t\toff = off + 1; src[off] = ' or \"'\r\n\t\t\toff = off + 1; src[off] = default_lib\r\n\t\t\toff = off + 1; src[off] = '\"'\r\n\t\tend\r\n\t\tif name.global then\r\n\t\t\toff = off + 1; src[off] = ', true'\r\n\t\tend\r\n\t\toff = off + 1; src[off] = ')\\n'\r\n\t\treturn ffi_source(\"ffi_src\")(tconcat(src))\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 335,
    "text": "local default_lib = name[1] or name.default",
    "type": "statement:localassign"
  }, {
    "id": 336,
    "text": "local src = { 'local os_lib_table = {\\n' }",
    "type": "statement:localassign"
  }, {
    "id": 337,
    "text": "local off = #src",
    "type": "statement:localassign"
  }, {
    "id": 338,
    "text": "for k,v in pairs(name) do\r\n\t\t\tif type(k) == 'string' and type(v) == 'string' then\r\n\t\t\t\toff = off + 1; src[off] = '\\t[\"'\r\n\t\t\t\toff = off + 1; src[off] = k\r\n\t\t\t\toff = off + 1; src[off] = '\"] = \"'\r\n\t\t\t\toff = off + 1; src[off] = v\r\n\t\t\t\toff = off + 1; src[off] = '\",\\n'\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 339,
    "text": "if type(k) == 'string' and type(v) == 'string' then\r\n\t\t\t\toff = off + 1; src[off] = '\\t[\"'\r\n\t\t\t\toff = off + 1; src[off] = k\r\n\t\t\t\toff = off + 1; src[off] = '\"] = \"'\r\n\t\t\t\toff = off + 1; src[off] = v\r\n\t\t\t\toff = off + 1; src[off] = '\",\\n'\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 340,
    "text": "off = off + 1",
    "type": "statement:assign"
  }, {
    "id": 341,
    "text": "src[off] = '\\t[\"'",
    "type": "statement:assign"
  }, {
    "id": 342,
    "text": "src[off] = k",
    "type": "statement:assign"
  }, {
    "id": 343,
    "text": "src[off] = '\"] = \"'",
    "type": "statement:assign"
  }, {
    "id": 344,
    "text": "src[off] = v",
    "type": "statement:assign"
  }, {
    "id": 345,
    "text": "src[off] = '\",\\n'",
    "type": "statement:assign"
  }, {
    "id": 346,
    "text": "src[off] = '}\\n'",
    "type": "statement:assign"
  }, {
    "id": 347,
    "text": "src[off] = 'C = ffi_load(os_lib_table[ffi.os]'",
    "type": "statement:assign"
  }, {
    "id": 348,
    "text": "if type(default_lib) == 'string' then\r\n\t\t\toff = off + 1; src[off] = ' or \"'\r\n\t\t\toff = off + 1; src[off] = default_lib\r\n\t\t\toff = off + 1; src[off] = '\"'\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 349,
    "text": "src[off] = ' or \"'",
    "type": "statement:assign"
  }, {
    "id": 350,
    "text": "src[off] = default_lib",
    "type": "statement:assign"
  }, {
    "id": 351,
    "text": "src[off] = '\"'",
    "type": "statement:assign"
  }, {
    "id": 352,
    "text": "if name.global then\r\n\t\t\toff = off + 1; src[off] = ', true'\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 353,
    "text": "src[off] = ', true'",
    "type": "statement:assign"
  }, {
    "id": 354,
    "text": "src[off] = ')\\n'",
    "type": "statement:assign"
  }, {
    "id": 355,
    "text": "if global == nil then global = false end",
    "type": "statement:if"
  }, {
    "id": 356,
    "text": "global = false",
    "type": "statement:assign"
  }, {
    "id": 357,
    "text": "global = tostring(global)",
    "type": "statement:assign"
  }, {
    "id": 358,
    "text": "local src = 'C = ffi_load(\"' .. name .. '\",' .. global .. ')\\n'",
    "type": "statement:localassign"
  }, {
    "id": 359,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 360,
    "text": "function ffi_export(c_type)\r\n\treturn function (name)\r\n\trec = make_record({}, \"ffi_export\")\r\n\t-- parse c_type.\r\n\trec.c_type = c_type\r\n\t-- parse name of symbol to export\r\n\trec.name = name\r\n\treturn rec\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 361,
    "text": "rec = make_record({}, \"ffi_export\")",
    "type": "statement:assign"
  }, {
    "id": 362,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 363,
    "text": "function ffi_export_function(return_type)\r\n\treturn function (name)\r\n\treturn function (params)\r\n\trec = make_record({}, \"ffi_export_function\")\r\n\t-- parse return c_type.\r\n\trec.ret = return_type or \"void\"\r\n\t-- parse c function to call.\r\n\trec.name = name\r\n\t-- parse params\r\n\trec.params = params\r\n\tif rec.params == nil then rec.params = {} end\r\n\treturn rec\r\nend\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 364,
    "text": "rec = make_record({}, \"ffi_export_function\")",
    "type": "statement:assign"
  }, {
    "id": 365,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 366,
    "text": "function get_outfile_name(ext)\r\n\tlocal filename = module_file .. ext\r\n\treturn outpath .. filename\r\nend",
    "type": "function"
  }, {
    "id": 367,
    "text": "local filename = module_file .. ext",
    "type": "statement:localassign"
  }, {
    "id": 368,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 369,
    "text": "function open_outfile(ext)\r\n\tlocal filename = module_file .. ext\r\n\tlocal file = outfiles[filename]\r\n\tif file == nil then\r\n\t\tfile = io.open(outpath .. filename, \"w+\")\r\n\t\toutfiles[filename] = file\r\n\tend\r\n\treturn file\r\nend",
    "type": "function"
  }, {
    "id": 370,
    "text": "local file = outfiles[filename]",
    "type": "statement:localassign"
  }, {
    "id": 371,
    "text": "if file == nil then\r\n\t\tfile = io.open(outpath .. filename, \"w+\")\r\n\t\toutfiles[filename] = file\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 372,
    "text": "file = io.open(outpath .. filename, \"w+\")",
    "type": "statement:assign"
  }, {
    "id": 373,
    "text": "outfiles[filename] = file",
    "type": "statement:assign"
  }, {
    "id": 374,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 375,
    "text": "function close_outfiles()\r\n\tfor name,file in pairs(outfiles) do\r\n\t\tio.close(file)\r\n\t\toutfiles[name] = nil\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 376,
    "text": "for name,file in pairs(outfiles) do\r\n\t\tio.close(file)\r\n\t\toutfiles[name] = nil\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 377,
    "text": "io.close(file)",
    "type": "statement:functioncall"
  }, {
    "id": 378,
    "text": "outfiles[name] = nil",
    "type": "statement:assign"
  }, {
    "id": 379,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 380,
    "text": "local function process_module_file(file)\r\n\t-- clear root_records & c_types\r\n\treset()\r\n\r\n\tmodule_file = file:gsub(\"(.lua)$\",\"\")\r\n\tprint(\"module_file\", module_file)\r\n\tprint(\"Parsing records from file: \" .. file)\r\n\tdofile(file)\r\n\r\n\t--\r\n\t-- run stage parsers\r\n\t--\r\n\trun_stage_parsers()\r\n\r\n\t--\r\n\t-- process some container records\r\n\t--\r\n\tprocess_records{\r\n\tlang = function(self, rec, parent)\r\n\t\t-- only keep records for current language.\r\n\t\tif rec.name == gen_lang then\r\n\t\t\t-- keep records by moving them up to the parent\r\n\t\t\tmove_recs(parent, rec)\r\n\t\telse\r\n\t\t\t-- delete this record and it sub-records\r\n\t\t\trec:delete_record()\r\n\t\tend\r\n\tend,\r\n\tobject = function(self, rec, parent)\r\n\t\t-- re-map c_types\r\n\t\tnew_c_type(rec.name, rec)\r\n\t\tnew_c_type(rec.c_type, rec)\r\n\tend,\r\n\tffi_files = function(self, rec, parent)\r\n\t\tfor i=1,#rec do\r\n\t\t\tlocal file = assert(io.open(rec[i], \"r\"))\r\n\t\t\tparent:add_record(ffi_source(rec.part)(file:read(\"*a\")))\r\n\t\t\tfile:close()\r\n\t\tend\r\n\tend,\r\n\tconstants = function(self, rec, parent)\r\n\t\tfor key,value in pairs(rec.values) do\r\n\t\t\tparent:add_record(const(key)({ value }))\r\n\t\tend\r\n\t\trec._rec_type = nil\r\n\tend,\r\n\texport_definitions = function(self, rec, parent)\r\n\t\tlocal values = rec.values\r\n\t\t-- export list of definitions as-is (i.e. no renaming).\r\n\t\tfor i=1,#values do\r\n\t\t\tlocal name = values[i]\r\n\t\t\tparent:add_record(const_def(name)({ name }))\r\n\t\t\tvalues[i] = nil\r\n\t\tend\r\n\t\t-- export renamed definitions.\r\n\t\tfor key, value in pairs(values) do\r\n\t\t\tparent:add_record(const_def(key)({ value }))\r\n\t\tend\r\n\t\trec._rec_type = nil\r\n\tend,\r\n\tunknown = function(self, rec, parent)\r\n\t\t-- re-map c_types\r\n\t\tif rec._is_c_type ~= nil then\r\n\t\t\tnew_c_type(rec.c_type, rec)\r\n\t\tend\r\n\tend,\r\n\t}\r\n\r\n\t--\r\n\t-- convert fields into get/set methods.\r\n\t--\r\n\tprocess_records{\r\n\tfield = function(self, rec, parent)\r\n\t\tlocal name = rec.name\r\n\t\tlocal c_type = rec.c_type\r\n\t\tparent:add_record(method(name) {\r\n\t\t\tvar_out{c_type , \"field\"},\r\n\t\t\tc_source 'src' {\"\\t${field} = ${this}->\", name,\";\\n\" },\r\n\t\t})\r\n\t\tif rec.is_writable then\r\n\t\t\tparent:add_record(method(\"set_\" .. name) {\r\n\t\t\t\tvar_in{c_type , \"field\"},\r\n\t\t\t\tc_source 'src' {\"\\t${this}->\", name,\" = ${field};\\n\" },\r\n\t\t\t})\r\n\t\tend\r\n\tend,\r\n\t}\r\n\r\n\t--\r\n\t-- add 'this' variable to method records.\r\n\t--\r\n\tprocess_records{\r\n\tc_function = function(self, rec, parent)\r\n\t\tif rec._is_method and not rec.override_this then\r\n\t\t\tlocal var\r\n\t\t\tif parent.is_meta then\r\n\t\t\t\tvar = var_in{ \"<any>\", \"this\", is_this = true }\r\n\t\t\telseif rec.is_constructor then\r\n\t\t\t\tvar = var_out{ parent.c_type, \"this\", is_this = true }\r\n\t\t\t\t-- make the first constructor the default.\r\n\t\t\t\tif not parent.default_constructor then\r\n\t\t\t\t\tparent.default_constructor = rec\r\n\t\t\t\t\trec.is_default_constructor = true\r\n\t\t\t\tend\r\n\t\t\telse\r\n\t\t\t\tvar = var_in{ parent.c_type, \"this\", is_this = true }\r\n\t\t\tend\r\n\t\t\trec:insert_record(var, 1)\r\n\t\tend\r\n\tend,\r\n\t}\r\n\r\n\t--\r\n\t-- create callback_func & callback_state records.\r\n\t--\r\n\tprocess_records{\r\n\tvar_in = function(self, rec, parent)\r\n\t\t-- is variable a callback type?\r\n\t\tif not rec.is_callback then return end\r\n\t\t-- get grand-parent container\r\n\t\tlocal container = parent._parent\r\n\t\t-- create callback_state instance.\r\n\t\tlocal cb_state\r\n\t\tif rec.state_var == 'this' then\r\n\t\t\tlocal wrap_type = container.c_type\r\n\t\t\tcb_state = callback_state(wrap_type)\r\n\t\t\t-- wrap 'this' object.\r\n\t\t\tcontainer.is_wrapped = true\r\n\t\t\tcontainer.wrapper_obj = cb_state\r\n\t\telse\r\n\t\t\tassert(\"un-supported callback state var: \" .. rec.state_var)\r\n\t\tend\r\n\t\tcontainer:insert_record(cb_state, 1)\r\n\t\t-- create callback_func instance.\r\n\t\tlocal cb_func = callback_func(rec.c_type)(rec.name)\r\n\t\t-- move sub-records from 'var_in' callback record into 'callback_func'\r\n\t\tlocal cb=rec\r\n\t\tfor i=1,#cb do\r\n\t\t\tlocal rec = cb[i]\r\n\t\t\tif is_record(rec) and rec._rec_type ~= \"ignore\" then\r\n\t\t\t\tcb:remove_record(rec) -- remove from 'var_in'\r\n\t\t\t\tcb_func:add_record(rec) -- add to 'callback_func'\r\n\t\t\tend\r\n\t\tend\r\n\t\tcb_state:add_record(cb_func)\r\n\t\trec.cb_func = cb_func\r\n\t\trec.c_type_rec = cb_func\r\n\tend,\r\n\t}\r\n\r\n\t--\r\n\t-- process extends/dyn_caster records\r\n\t--\r\n\tprocess_records{\r\n\t_obj_cnt = 0,\r\n\tobject = function(self, rec, parent)\r\n\t\trec._obj_id = self._obj_cnt\r\n\t\tself._obj_cnt = self._obj_cnt + 1\r\n\tend,\r\n\textends = function(self, rec, parent)\r\n\t\t-- find base-object record.\r\n\t\tlocal base = resolve_c_type(rec.name)\r\n\t\trec.base = base\r\n\t\t-- add this object to base.\r\n\t\tlocal subs = base.subs\r\n\t\tif subs == nil then\r\n\t\t\tsubs = {}\r\n\t\t\tbase.subs = subs\r\n\t\tend\r\n\t\tsubs[#subs+1] = parent\r\n\tend,\r\n\tdyn_caster = function(self, rec, parent)\r\n\t\tparent.has_dyn_caster = rec\r\n\t\tif rec.caster_type == 'switch' then\r\n\t\t\tfor k,v in pairs(rec.value_map) do\r\n\t\t\t\trec.value_map[k] = resolve_c_type(v)\r\n\t\t\tend\r\n\t\tend\r\n\tend,\r\n\tunknown = function(self, rec, parent)\r\n\t\tresolve_rec(rec)\r\n\tend,\r\n\t}\r\n\r\n\t--\r\n\t-- Create FFI-wrappers for inline/macro calls\r\n\t--\r\n\tlocal ffi_wrappers = {}\r\n\tprocess_records{\r\n\tc_call = function(self, rec, parent)\r\n\t\tif not rec.ffi_need_wrapper then\r\n\t\t\t-- normal C call don't need wrapper.\r\n\t\t\treturn\r\n\t\tend\r\n\t\t-- find parent 'object' record.\r\n\t\tlocal object = parent\r\n\t\twhile object._rec_type ~= 'object' and object._rec_type ~= 'c_module' do\r\n\t\t\tobject = object._parent\r\n\t\t\tassert(object, \"Can't find parent 'object' record of 'c_call'\")\r\n\t\tend\r\n\t\tlocal ret_type = rec.ret\r\n\t\tlocal ret = ret_type\r\n\t\t-- convert return type into \"var_out\" if it's not a \"void\" type.\r\n\t\tif ret ~= \"void\" then\r\n\t\t\tif type(ret) ~= 'string' then\r\n\t\t\t\tret_type = ret[1]\r\n\t\t\tend\r\n\t\t\tret = \"  return \"\r\n\t\telse\r\n\t\t\tret_type = \"void\"\r\n\t\t\tret = \"  \"\r\n\t\tend\r\n\t\t-- build C call statement.\r\n\t\tlocal call = {}\r\n\t\tlocal cfunc_name = rec.cfunc\r\n\t\tcall[#call+1] = ret\r\n\t\tcall[#call+1] = cfunc_name\r\n\t\t-- process parameters.\r\n\t\tlocal params = {}\r\n\t\tlocal list = rec.params\r\n\t\tparams[#params+1] = \"(\"\r\n\t\tcall[#call+1] = \"(\"\r\n\t\tif rec.is_method_call then\r\n\t\t\tcall[#call+1] = 'this'\r\n\t\t\tparams[#params+1] = object.c_type .. ' '\r\n\t\t\tparams[#params+1] = 'this'\r\n\t\t\tif #list > 0 then\r\n\t\t\t\tparams[#params+1] = \", \"\r\n\t\t\t\tcall[#call+1] = \", \"\r\n\t\t\tend\r\n\t\tend\r\n\t\tfor i=1,#list,2 do\r\n\t\t\tlocal c_type,name = clean_variable_type_name(list[i], list[i+1])\r\n\t\t\tif i > 1 then\r\n\t\t\t\tparams[#params+1] = \", \"\r\n\t\t\t\tcall[#call+1] = \", \"\r\n\t\t\tend\r\n\t\t\t-- append parameter name\r\n\t\t\tcall[#call+1] = name\r\n\t\t\t-- append parameter type & name to cdef\r\n\t\t\tparams[#params+1] = c_type .. ' '\r\n\t\t\tparams[#params+1] = name\r\n\t\tend\r\n\t\tparams[#params+1] = \")\"\r\n\t\tcall[#call+1] = \");\\n\"\r\n\t\t-- convert 'params' to string.\r\n\t\tparams = tconcat(params)\r\n\t\tcall = tconcat(call)\r\n\t\t-- get prefix\r\n\t\tlocal export_prefix = \"\"\r\n\t\tif rec.ffi_need_wrapper == 'c_wrap' then\r\n\t\t\texport_prefix = \"ffi_wrapper_\"\r\n\t\tend\r\n\t\trec.ffi_export_prefix = export_prefix\r\n\t\t-- check for re-definitions or duplicates.\r\n\t\tlocal cdef = ret_type .. \" \" .. export_prefix .. cfunc_name .. params\r\n\t\tlocal old_cdef = ffi_wrappers[cfunc_name]\r\n\t\tif old_cdef == cdef then\r\n\t\t\treturn -- duplicate, don't need to create a new wrapper.\r\n\t\telseif old_cdef then\r\n\t\t\terror(\"Re-definition of FFI wrapper cdef: \" .. cdef)\r\n\t\tend\r\n\t\tffi_wrappers[cfunc_name] = cdef\r\n\t\t-- create wrapper function\r\n\t\tif rec.ffi_need_wrapper == 'c_wrap' then\r\n\t\t\tobject:add_record(c_source(\"src\")({\r\n\t\t\t\"\\n/* FFI wrapper for inline/macro call */\\n\",\r\n\t\t\t\"LUA_NOBJ_API \", cdef, \" {\\n\",\r\n\t\t\tcall,\r\n\t\t\t\"}\\n\",\r\n\t\t\t}))\r\n\t\tend\r\n\t\tobject:add_record(ffi_export_function(ret_type)(export_prefix .. rec.cfunc)(params))\r\n\tend,\r\n\t}\r\n\r\n\t--\r\n\t-- do some pre-processing of records.\r\n\t--\r\n\tlocal ffi_cdefs = {}\r\n\tprocess_records{\r\n\tc_module = function(self, rec, parent)\r\n\t\trec.functions = {}\r\n\t\trec.constants = {}\r\n\t\trec.fields = {}\r\n\t\trec.name_map = {}\r\n\tend,\r\n\tobject = function(self, rec, parent)\r\n\t\trec.functions = {}\r\n\t\trec.constants = {}\r\n\t\trec.fields = {}\r\n\t\trec.name_map = {}\r\n\t\trec.extends = {}\r\n\tend,\r\n\tcallback_state = function(self, rec, parent)\r\n\t\trec.callbacks = {}\r\n\tend,\r\n\textends = function(self, rec, parent)\r\n\t\t-- add base-class to parent's base list.\r\n\t\tparent.extends[rec.name] = rec\r\n\tend,\r\n\tfield = function(self, rec, parent)\r\n\t\t-- add to name map to reserve the name.\r\n\t\tassert(parent.name_map[rec.name] == nil)\r\n\t\t--parent.name_map[rec.name] = rec\r\n\t\t-- add field to parent's fields list.\r\n\t\tparent.fields[rec.name] = rec\r\n\tend,\r\n\tconst = function(self, rec, parent)\r\n\t\t-- add to name map to reserve the name.\r\n\t\tassert(parent.name_map[rec.name] == nil)\r\n\t\tparent.name_map[rec.name] = rec\r\n\t\t-- add constant to parent's constants list.\r\n\t\tparent.constants[rec.name] = rec\r\n\tend,\r\n\tc_function = function(self, rec, parent)\r\n\t\tlocal c_name = parent.name .. '__' .. rec.name\r\n\t\tif rec._is_method then\r\n\t\t\tassert(not parent.is_package or parent.is_meta,\r\n\t\t\t\t\"Package's can't have methods: package=\" .. parent.name .. \", method=\" .. rec.name)\r\n\t\t\tc_name = c_name .. '__meth'\r\n\t\telse\r\n\t\t\tc_name = c_name .. '__func'\r\n\t\tend\r\n\t\trec.c_name = c_name\r\n\t\t-- add to name map to reserve the name.\r\n\t\tassert(parent.name_map[rec.name] == nil,\r\n\t\t\t\"duplicate functions \" .. rec.name .. \" in \" .. parent.name)\r\n\t\tparent.name_map[rec.name] = rec\r\n\t\t-- add function to parent's function list.\r\n\t\tparent.functions[rec.name] = rec\r\n\t\t-- prepare wrapped new/delete methods\r\n\t\tif rec._is_method and parent.is_wrapped then\r\n\t\t\tif rec.is_destructor or rec.is_constructor then\r\n\t\t\t\trec.is_wrapper = true\r\n\t\t\t\trec.wrapper_obj = parent.wrapper_obj\r\n\t\t\tend\r\n\t\tend\r\n\t\t-- map names to in/out variables\r\n\t\trec.var_map = {}\r\n\t\tfunction rec:add_variable(var, name)\r\n\t\t\tname = name or var.name\r\n\t\t\tlocal old_var = self.var_map[name]\r\n\t\t\tassert(old_var == nil or old_var == var,\r\n\t\t\t\t\"duplicate variable \" .. name .. \" in \" .. self.name)\r\n\t\t\t-- add this variable to parent\r\n\t\t\tself.var_map[name] = var\r\n\t\tend\r\n\tend,\r\n\tcallback_func = function(self, rec, parent)\r\n\t\tlocal func_type = rec.c_type_rec\r\n\t\t-- add callback to parent's callback list.\r\n\t\tparent.callbacks[rec.ref_field] = rec\r\n\t\tlocal src={\"static \"}\r\n\t\tlocal typedef={\"typedef \"}\r\n\t\t-- convert return type into \"cb_out\" if it's not a \"void\" type.\r\n\t\tlocal ret = func_type.ret\r\n\t\tif ret ~= \"void\" then\r\n\t\t\trec.ret_out = cb_out{ ret, \"ret\" }\r\n\t\t\trec:insert_record(rec.ret_out, 1)\r\n\t\tend\r\n\t\tsrc[#src+1] = ret .. \" \"\r\n\t\ttypedef[#typedef+1] = ret .. \" \"\r\n\t\t-- append c function to call.\r\n\t\trec.c_func_name = parent.base_type .. \"_\".. rec.ref_field .. \"_cb\"\r\n\t\tsrc[#src+1] = rec.c_func_name .. \"(\"\r\n\t\ttypedef[#typedef+1] = \"(*\" .. rec.c_type .. \")(\"\r\n\t\t-- convert params to \"cb_in\" records.\r\n\t\tlocal params = func_type.params\r\n\t\tlocal vars = {}\r\n\t\tlocal idx=1\r\n\t\tfor i=1,#params,2 do\r\n\t\t\tlocal c_type = params[i]\r\n\t\t\tlocal name = params[i + 1]\r\n\t\t\tif i > 1 then\r\n\t\t\t\tsrc[#src+1] = \", \"\r\n\t\t\t\ttypedef[#typedef+1] = \", \"\r\n\t\t\tend\r\n\t\t\t-- add cb_in to this rec.\r\n\t\t\tlocal v_in = cb_in{ c_type, name}\r\n\t\t\trec:insert_record(v_in, idx)\r\n\t\t\tidx = idx + 1\r\n\t\t\tsrc[#src+1] = c_type .. \" ${\" .. v_in.name .. \"}\"\r\n\t\t\ttypedef[#typedef+1] = c_type .. \" \" .. v_in.name\r\n\t\t\tvars[#vars+1] = \"${\" .. v_in.name .. \"}\"\r\n\t\tend\r\n\t\tsrc[#src+1] = \")\"\r\n\t\ttypedef[#typedef+1] = \");\"\r\n\t\t-- save callback func decl.\r\n\t\trec.c_func_decl = table.concat(src)\r\n\t\trec.c_func_typedef = table.concat(typedef)\r\n\t\trec.param_vars = table.concat(vars, ', ')\r\n\t\t-- map names to in/out variables\r\n\t\trec.var_map = {}\r\n\t\tfunction rec:add_variable(var, name)\r\n\t\t\tname = name or var.name\r\n\t\t\tlocal old_var = self.var_map[name]\r\n\t\t\tassert(old_var == nil or old_var == var,\r\n\t\t\t\t\"duplicate variable \" .. name .. \" in \" .. self.name)\r\n\t\t\t-- add this variable to parent\r\n\t\t\tself.var_map[name] = var\r\n\t\tend\r\n\tend,\r\n\tvar_in = function(self, rec, parent)\r\n\t\tparent:add_variable(rec)\r\n\tend,\r\n\tvar_out = function(self, rec, parent)\r\n\t\tparent:add_variable(rec)\r\n\tend,\r\n\tcb_in = function(self, rec, parent)\r\n\t\tparent:add_variable(rec)\r\n\tend,\r\n\tcb_out = function(self, rec, parent)\r\n\t\tparent:add_variable(rec)\r\n\tend,\r\n\tc_call = function(self, rec, parent)\r\n\t\tlocal src={}\r\n\t\tlocal ffi_cdef={}\r\n\t\tlocal ffi_src={}\r\n\t\tlocal ret_type = rec.ret\r\n\t\tlocal ret = ret_type\r\n\t\t-- convert return type into \"var_out\" if it's not a \"void\" type.\r\n\t\tif ret ~= \"void\" then\r\n\t\t\tlocal is_this = false\r\n\t\t\t-- check if return value is for the \"this\" value in a constructor.\r\n\t\t\tif parent.is_constructor then\r\n\t\t\t\tlocal this_var = parent.var_map.this\r\n\t\t\t\tif this_var and ret == this_var.c_type then\r\n\t\t\t\t\tret_type = this_var.c_type\r\n\t\t\t\t\tis_this = true\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tif is_this then\r\n\t\t\t\tret = \"  ${this} = \"\r\n\t\t\telse\r\n\t\t\t\tlocal rc\r\n\t\t\t\tif type(ret) == 'string' then\r\n\t\t\t\t\trc = var_out{ ret, \"rc_\" .. rec.cfunc }\r\n\t\t\t\telse\r\n\t\t\t\t\trc = var_out(ret)\r\n\t\t\t\tend\r\n\t\t\t\tret_type = rc.c_type\r\n\t\t\t\tif rc.is_length_ref then\r\n\t\t\t\t\tret = \"  ${\" .. rc.name .. \"_len} = \"\r\n\t\t\t\t\t-- look for related 'var_out'.\r\n\t\t\t\t\tlocal rc_val = parent.var_map[rc.name]\r\n\t\t\t\t\tif rc_val then\r\n\t\t\t\t\t\trc_val.has_length = true\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\t-- related 'var_out' not processed yet.\r\n\t\t\t\t\t\t-- add place-holder\r\n\t\t\t\t\t\tparent.var_map[rc.name] = rc\r\n\t\t\t\t\tend\r\n\t\t\t\telse\r\n\t\t\t\t\tret = \"  ${\" .. rc.name .. \"} = \"\r\n\t\t\t\t\t-- look for related length reference.\r\n\t\t\t\t\tlocal rc_len = parent.var_map[rc.name]\r\n\t\t\t\t\tif rc_len and rc_len.is_length_ref then\r\n\t\t\t\t\t\t-- we have a length.\r\n\t\t\t\t\t\trc.has_length = true\r\n\t\t\t\t\t\t-- remove length var place-holder\r\n\t\t\t\t\t\tparent.var_map[rc.name] = nil\r\n\t\t\t\t\tend\r\n\t\t\t\t\t-- register var_out variable.\r\n\t\t\t\t\tparent:add_variable(rc)\r\n\t\t\t\t\t-- add var_out record to parent\r\n\t\t\t\t\tparent:add_record(rc)\r\n\t\t\t\tend\r\n\t\t\t\t-- check for dereference.\r\n\t\t\t\tif rc.wrap == '*' then\r\n\t\t\t\t\tret = ret .. '*'\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tret = \"  \"\r\n\t\tend\r\n\t\tsrc[#src+1] = ret\r\n\t\tffi_cdef[#ffi_cdef+1] = ret_type .. \" \"\r\n\t\tffi_src[#ffi_src+1] = ret\r\n\t\t-- append c function to call.\r\n\t\tlocal func_start = rec.cfunc .. \"(\"\r\n\t\tsrc[#src+1] = func_start\r\n\t\tffi_cdef[#ffi_cdef+1] = func_start\r\n\t\tif rec.ffi_need_wrapper then\r\n\t\t\tffi_src[#ffi_src+1] = \"Cmod.\" .. rec.ffi_export_prefix\r\n\t\telse\r\n\t\t\tffi_src[#ffi_src+1] = \"C.\"\r\n\t\tend\r\n\t\tffi_src[#ffi_src+1] = func_start\r\n\t\t-- convert params to \"var_in\" records.\r\n\t\tlocal params = {}\r\n\t\tlocal list = rec.params\r\n\t\t-- check if this `c_call` is a method call\r\n\t\tif rec.is_method_call then\r\n\t\t\t-- then add `this` parameter to call.\r\n\t\t\tlocal this = parent.var_map.this\r\n\t\t\tassert(this, \"Missing `this` variable for method_call: \" .. rec.cfunc)\r\n\t\t\tthis = var_ref(this)\r\n\t\t\tparent:add_record(this)\r\n\t\t\tparams[1] = this\r\n\t\tend\r\n\t\tfor i=1,#list,2 do\r\n\t\t\tlocal c_type = list[i]\r\n\t\t\tlocal name = list[i+1]\r\n\t\t\tlocal param = var_in{ c_type, name}\r\n\t\t\tname = param.name\r\n\t\t\t-- check if this is a new input variable.\r\n\t\t\tif not parent.var_map[name] then\r\n\t\t\t\t-- add param as a variable.\r\n\t\t\t\tparent:add_variable(param)\r\n\t\t\telse\r\n\t\t\t\t-- variable exists, return this input variable into a reference.\r\n\t\t\t\tlocal ref = var_ref(param)\r\n\t\t\t\t-- invalidate old `var_in` record\r\n\t\t\t\tparam._rec_type = nil\r\n\t\t\t\tparam = ref\r\n\t\t\tend\r\n\t\t\t-- add param rec to parent.\r\n\t\t\tparent:add_record(param)\r\n\t\t\tparams[#params + 1] = param\r\n\t\tend\r\n\t\t-- append all input variables to \"c_source\"\r\n\t\tfor i=1,#params do\r\n\t\t\tlocal var = params[i]\r\n\t\t\tif i > 1 then\r\n\t\t\t\tsrc[#src+1] = \", \"\r\n\t\t\t\tffi_cdef[#ffi_cdef+1] = \", \"\r\n\t\t\t\tffi_src[#ffi_src+1] = \", \"\r\n\t\t\tend\r\n\t\t\tlocal name = var.name\r\n\t\t\tif var.is_length_ref then\r\n\t\t\t\tname = \"${\" .. name .. \"_len}\"\r\n\t\t\telse\r\n\t\t\t\tname = \"${\" .. name .. \"}\"\r\n\t\t\tend\r\n\t\t\t-- append parameter to c source call\r\n\t\t\tif var.wrap then\r\n\t\t\t\tsrc[#src+1] = var.wrap .. \"(\"\r\n\t\t\t\tsrc[#src+1] = name .. \")\"\r\n\t\t\telse\r\n\t\t\t\tsrc[#src+1] = name\r\n\t\t\tend\r\n\t\t\t-- append parameter to ffi source call\r\n\t\t\tffi_src[#ffi_src+1] = name\r\n\t\t\t-- append parameter type & name to ffi cdef record\r\n\t\t\tffi_cdef[#ffi_cdef+1] = var.c_type\r\n\t\t\tif var.wrap == '&' then\r\n\t\t\t\tffi_cdef[#ffi_cdef+1] = '*'\r\n\t\t\tend\r\n\t\tend\r\n\t\tsrc[#src+1] = \");\"\r\n\t\tffi_cdef[#ffi_cdef+1] = \");\\n\"\r\n\t\tffi_src[#ffi_src+1] = \")\"\r\n\t\t-- replace `c_call` with `c_source` record\r\n\t\tlocal idx = parent:replace_record(rec, c_source(\"src\")(src))\r\n\t\t-- convert to string.\r\n\t\tffi_cdef = tconcat(ffi_cdef)\r\n\t\t-- check for ffi cdefs re-definitions\r\n\t\tlocal cfunc = rec.cfunc\r\n\t\tlocal cdef = ffi_cdefs[cfunc]\r\n\t\tif cdef and cdef ~= ffi_cdef then\r\n\t\t\tlocal old_name = cfunc\r\n\t\t\tlocal i = 0\r\n\t\t\t-- search for next \"free\" alias name.\r\n\t\t\trepeat\r\n\t\t\t\ti = i + 1\r\n\t\t\t\tcfunc = old_name .. i\r\n\t\t\t\tcdef = ffi_cdefs[cfunc]\r\n\t\t\t\t-- search until \"free\" alias name, or same definition.\r\n\t\t\tuntil not cdef or cdef == ffi_cdef\r\n\t\t\t-- update ffi src with new alias name.\r\n\t\t\tffi_src = tconcat(ffi_src)\r\n\t\t\tffi_src = ffi_src:gsub(old_name .. '%(', cfunc .. '(')\r\n\t\t\t-- create a cdef \"asm\" alias.\r\n\t\t\tif not cdef then\r\n\t\t\t\tffi_cdef = ffi_cdef:gsub(old_name, cfunc)\r\n\t\t\t\tffi_cdef = ffi_cdef:gsub(\"%);\\n$\", [[) asm(\"]] .. old_name .. [[\");]])\r\n\t\t\tend\r\n\t\tend\r\n\t\tffi_cdefs[cfunc] = ffi_cdef\r\n\t\t-- insert FFI source record.\r\n\t\tif not cdef then\r\n\t\t\t-- function not defined yet.\r\n\t\t\tparent:insert_record(ffi_source(\"ffi_cdef\")(ffi_cdef), idx)\r\n\t\tend\r\n\t\tparent:insert_record(ffi_source(\"ffi_src\")(ffi_src), idx+1)\r\n\tend,\r\n\tffi_export = function(self, rec, parent)\r\n\t\tlocal ffi_src={}\r\n\t\t-- load exported symbol\r\n\t\tffi_src[#ffi_src+1] = 'local '\r\n\t\tffi_src[#ffi_src+1] = rec.name\r\n\t\tffi_src[#ffi_src+1] = ' = ffi.new(\"'\r\n\t\tffi_src[#ffi_src+1] = rec.c_type\r\n\t\tffi_src[#ffi_src+1] = ' *\", _priv[\"'\r\n\t\tffi_src[#ffi_src+1] = rec.name\r\n\t\tffi_src[#ffi_src+1] = '\"])\\n'\r\n\t\t-- insert FFI source record.\r\n\t\tlocal idx = parent:find_record(rec)\r\n\t\tparent:insert_record(ffi_source(\"ffi_import\")(ffi_src), idx)\r\n\tend,\r\n\t}\r\n\t-- clear ffi cdefs\r\n\tffi_cdefs = nil\r\n\r\n\t--\r\n\t-- sort var_in/var_out records.\r\n\t--\r\n\tlocal function sort_vars(var1, var2)\r\n\t\treturn (var1.idx < var2.idx)\r\n\tend\r\n\tprocess_records{\r\n\tc_function = function(self, rec, parent)\r\n\t\tlocal inputs = {}\r\n\t\tlocal in_count = 0\r\n\t\tlocal outputs = {}\r\n\t\tlocal out_count = 0\r\n\t\tlocal misc = {}\r\n\t\tlocal max_idx = #rec\r\n\t\t-- seperate sub-records\r\n\t\tfor i=1,max_idx do\r\n\t\t\tlocal var = rec[i]\r\n\t\t\tlocal var_type = var._rec_type\r\n\t\t\tlocal sort = true\r\n\t\t\tlocal list\r\n\t\t\tif var_type == 'var_in' then\r\n\t\t\t\tlist = inputs\r\n\t\t\t\tin_count = in_count + 1\r\n\t\t\telseif var_type == 'var_out' then\r\n\t\t\t\tlist = outputs\r\n\t\t\t\tout_count = out_count + 1\r\n\t\t\telse\r\n\t\t\t\tlist = misc\r\n\t\t\t\tsort = false\r\n\t\t\tend\r\n\t\t\tif sort then\r\n\t\t\t\tlocal idx = var.idx\r\n\t\t\t\tif idx then\r\n\t\t\t\t\t-- force index of this variable.\r\n\t\t\t\t\tlocal old_var = list[idx]\r\n\t\t\t\t\t-- variable has a fixed\r\n\t\t\t\t\tlist[idx] = var\r\n\t\t\t\t\t-- move old variable to next open slot\r\n\t\t\t\t\tvar = old_var\r\n\t\t\t\tend\r\n\t\t\t\t-- place variable in next nil slot.\r\n\t\t\t\tif var then\r\n\t\t\t\t\tfor i=1,max_idx do\r\n\t\t\t\t\t\tif not list[i] then\r\n\t\t\t\t\t\t\t-- done, found empty slot\r\n\t\t\t\t\t\t\tlist[i] = var\r\n\t\t\t\t\t\t\tvar = nil\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\tassert(var == nil, \"Failed to find empty slot for variable.\")\r\n\t\t\telse\r\n\t\t\t\tlist[#list + 1] = var\r\n\t\t\tend\r\n\t\tend\r\n\t\t-- make sure there are no gaps between input/output variables.\r\n\t\tassert(#inputs == in_count,\r\n\t\t\t\"Gaps between input variables, check your usage of `<idx` for function: \" .. rec.name)\r\n\t\tassert(#outputs == out_count,\r\n\t\t\t\"Gaps between output variables, check your usage of `>idx` for function: \" .. rec.name)\r\n\r\n\t\t-- put sorted sub-records back into the `c_function` record.\r\n\t\tlocal idx=0\r\n\t\tfor i=1,in_count do\r\n\t\t\tidx = idx + 1\r\n\t\t\trec[idx] = inputs[i]\r\n\t\tend\r\n\t\tfor i=1,out_count do\r\n\t\t\tidx = idx + 1\r\n\t\t\trec[idx] = outputs[i]\r\n\t\tend\r\n\t\tfor i=1,#misc do\r\n\t\t\tidx = idx + 1\r\n\t\t\trec[idx] = misc[i]\r\n\t\tend\r\n\t\t-- generate list of input parameter names for FFI functions.\r\n\t\tlocal ffi_params = {}\r\n\t\tfor i=1,in_count do\r\n\t\t\tlocal name = inputs[i].name\r\n\t\t\tif name ~= 'this' then\r\n\t\t\t\tffi_params[i] = '${' .. inputs[i].name .. '}'\r\n\t\t\telse\r\n\t\t\t\tffi_params[i] = 'self'\r\n\t\t\tend\r\n\t\tend\r\n\t\trec.ffi_params = tconcat(ffi_params, ', ')\r\n\tend,\r\n\t}\r\n\r\n\t--\r\n\t-- load language module\r\n\t--\r\n\trequire(\"native_objects.lang_\" .. gen_lang)\r\n\r\n\t--\r\n\t-- mark functions which have an error_code var_out.\r\n\t--\r\n\tprocess_records{\r\n\tvar_out = function(self, rec, parent)\r\n\t\tlocal var_type = rec.c_type_rec\r\n\t\tif var_type._is_error_code then\r\n\t\t\tassert(parent._has_error_code == nil,\r\n\t\t\t\t\"A function/method can only have one var_out with type error_code.\")\r\n\t\t\t-- mark the function as having an error code.\r\n\t\t\tparent._has_error_code = rec\r\n\t\telseif var_type.error_on_null then\r\n\t\t\t-- if this variable is null then push a nil and error message.\r\n\t\t\trec.is_error_on_null = true\r\n\t\tend\r\n\tend,\r\n\t}\r\n\r\n\t--\r\n\t-- load gen. module\r\n\t--\r\n\tprint\"============ generate api bindings =================\"\r\n\tif gen_module ~= \"null\" then\r\n\t\trequire(\"native_objects.gen_\" .. gen_module)\r\n\tend\r\n\r\n\tclose_outfiles()\r\nend",
    "type": "function"
  }, {
    "id": 381,
    "text": "reset()",
    "type": "statement:functioncall"
  }, {
    "id": 382,
    "text": "module_file = file:gsub(\"(.lua)$\",\"\")",
    "type": "statement:assign"
  }, {
    "id": 383,
    "text": "print(\"module_file\", module_file)",
    "type": "statement:functioncall"
  }, {
    "id": 384,
    "text": "print(\"Parsing records from file: \" .. file)",
    "type": "statement:functioncall"
  }, {
    "id": 385,
    "text": "dofile(file)",
    "type": "statement:functioncall"
  }, {
    "id": 386,
    "text": "run_stage_parsers()",
    "type": "statement:functioncall"
  }, {
    "id": 387,
    "text": "process_records{\r\n\tlang = function(self, rec, parent)\r\n\t\t-- only keep records for current language.\r\n\t\tif rec.name == gen_lang then\r\n\t\t\t-- keep records by moving them up to the parent\r\n\t\t\tmove_recs(parent, rec)\r\n\t\telse\r\n\t\t\t-- delete this record and it sub-records\r\n\t\t\trec:delete_record()\r\n\t\tend\r\n\tend,\r\n\tobject = function(self, rec, parent)\r\n\t\t-- re-map c_types\r\n\t\tnew_c_type(rec.name, rec)\r\n\t\tnew_c_type(rec.c_type, rec)\r\n\tend,\r\n\tffi_files = function(self, rec, parent)\r\n\t\tfor i=1,#rec do\r\n\t\t\tlocal file = assert(io.open(rec[i], \"r\"))\r\n\t\t\tparent:add_record(ffi_source(rec.part)(file:read(\"*a\")))\r\n\t\t\tfile:close()\r\n\t\tend\r\n\tend,\r\n\tconstants = function(self, rec, parent)\r\n\t\tfor key,value in pairs(rec.values) do\r\n\t\t\tparent:add_record(const(key)({ value }))\r\n\t\tend\r\n\t\trec._rec_type = nil\r\n\tend,\r\n\texport_definitions = function(self, rec, parent)\r\n\t\tlocal values = rec.values\r\n\t\t-- export list of definitions as-is (i.e. no renaming).\r\n\t\tfor i=1,#values do\r\n\t\t\tlocal name = values[i]\r\n\t\t\tparent:add_record(const_def(name)({ name }))\r\n\t\t\tvalues[i] = nil\r\n\t\tend\r\n\t\t-- export renamed definitions.\r\n\t\tfor key, value in pairs(values) do\r\n\t\t\tparent:add_record(const_def(key)({ value }))\r\n\t\tend\r\n\t\trec._rec_type = nil\r\n\tend,\r\n\tunknown = function(self, rec, parent)\r\n\t\t-- re-map c_types\r\n\t\tif rec._is_c_type ~= nil then\r\n\t\t\tnew_c_type(rec.c_type, rec)\r\n\t\tend\r\n\tend,\r\n\t}",
    "type": "statement:functioncall"
  }, {
    "id": 388,
    "text": "if rec.name == gen_lang then\r\n\t\t\t-- keep records by moving them up to the parent\r\n\t\t\tmove_recs(parent, rec)\r\n\t\telse\r\n\t\t\t-- delete this record and it sub-records\r\n\t\t\trec:delete_record()\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 389,
    "text": "move_recs(parent, rec)",
    "type": "statement:functioncall"
  }, {
    "id": 390,
    "text": "new_c_type(rec.name, rec)",
    "type": "statement:functioncall"
  }, {
    "id": 391,
    "text": "for i=1,#rec do\r\n\t\t\tlocal file = assert(io.open(rec[i], \"r\"))\r\n\t\t\tparent:add_record(ffi_source(rec.part)(file:read(\"*a\")))\r\n\t\t\tfile:close()\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 392,
    "text": "local file = assert(io.open(rec[i], \"r\"))",
    "type": "statement:localassign"
  }, {
    "id": 393,
    "text": "parent:add_record(ffi_source(rec.part)(file:read(\"*a\")))",
    "type": "statement:functioncall"
  }, {
    "id": 394,
    "text": "file:close()",
    "type": "statement:functioncall"
  }, {
    "id": 395,
    "text": "for key,value in pairs(rec.values) do\r\n\t\t\tparent:add_record(const(key)({ value }))\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 396,
    "text": "parent:add_record(const(key)({ value }))",
    "type": "statement:functioncall"
  }, {
    "id": 397,
    "text": "rec._rec_type = nil",
    "type": "statement:assign"
  }, {
    "id": 398,
    "text": "local values = rec.values",
    "type": "statement:localassign"
  }, {
    "id": 399,
    "text": "for i=1,#values do\r\n\t\t\tlocal name = values[i]\r\n\t\t\tparent:add_record(const_def(name)({ name }))\r\n\t\t\tvalues[i] = nil\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 400,
    "text": "local name = values[i]",
    "type": "statement:localassign"
  }, {
    "id": 401,
    "text": "parent:add_record(const_def(name)({ name }))",
    "type": "statement:functioncall"
  }, {
    "id": 402,
    "text": "values[i] = nil",
    "type": "statement:assign"
  }, {
    "id": 403,
    "text": "for key, value in pairs(values) do\r\n\t\t\tparent:add_record(const_def(key)({ value }))\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 404,
    "text": "parent:add_record(const_def(key)({ value }))",
    "type": "statement:functioncall"
  }, {
    "id": 405,
    "text": "if rec._is_c_type ~= nil then\r\n\t\t\tnew_c_type(rec.c_type, rec)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 406,
    "text": "process_records{\r\n\tfield = function(self, rec, parent)\r\n\t\tlocal name = rec.name\r\n\t\tlocal c_type = rec.c_type\r\n\t\tparent:add_record(method(name) {\r\n\t\t\tvar_out{c_type , \"field\"},\r\n\t\t\tc_source 'src' {\"\\t${field} = ${this}->\", name,\";\\n\" },\r\n\t\t})\r\n\t\tif rec.is_writable then\r\n\t\t\tparent:add_record(method(\"set_\" .. name) {\r\n\t\t\t\tvar_in{c_type , \"field\"},\r\n\t\t\t\tc_source 'src' {\"\\t${this}->\", name,\" = ${field};\\n\" },\r\n\t\t\t})\r\n\t\tend\r\n\tend,\r\n\t}",
    "type": "statement:functioncall"
  }, {
    "id": 407,
    "text": "local name = rec.name",
    "type": "statement:localassign"
  }, {
    "id": 408,
    "text": "local c_type = rec.c_type",
    "type": "statement:localassign"
  }, {
    "id": 409,
    "text": "parent:add_record(method(name) {\r\n\t\t\tvar_out{c_type , \"field\"},\r\n\t\t\tc_source 'src' {\"\\t${field} = ${this}->\", name,\";\\n\" },\r\n\t\t})",
    "type": "statement:functioncall"
  }, {
    "id": 410,
    "text": "if rec.is_writable then\r\n\t\t\tparent:add_record(method(\"set_\" .. name) {\r\n\t\t\t\tvar_in{c_type , \"field\"},\r\n\t\t\t\tc_source 'src' {\"\\t${this}->\", name,\" = ${field};\\n\" },\r\n\t\t\t})\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 411,
    "text": "parent:add_record(method(\"set_\" .. name) {\r\n\t\t\t\tvar_in{c_type , \"field\"},\r\n\t\t\t\tc_source 'src' {\"\\t${this}->\", name,\" = ${field};\\n\" },\r\n\t\t\t})",
    "type": "statement:functioncall"
  }, {
    "id": 412,
    "text": "process_records{\r\n\tc_function = function(self, rec, parent)\r\n\t\tif rec._is_method and not rec.override_this then\r\n\t\t\tlocal var\r\n\t\t\tif parent.is_meta then\r\n\t\t\t\tvar = var_in{ \"<any>\", \"this\", is_this = true }\r\n\t\t\telseif rec.is_constructor then\r\n\t\t\t\tvar = var_out{ parent.c_type, \"this\", is_this = true }\r\n\t\t\t\t-- make the first constructor the default.\r\n\t\t\t\tif not parent.default_constructor then\r\n\t\t\t\t\tparent.default_constructor = rec\r\n\t\t\t\t\trec.is_default_constructor = true\r\n\t\t\t\tend\r\n\t\t\telse\r\n\t\t\t\tvar = var_in{ parent.c_type, \"this\", is_this = true }\r\n\t\t\tend\r\n\t\t\trec:insert_record(var, 1)\r\n\t\tend\r\n\tend,\r\n\t}",
    "type": "statement:functioncall"
  }, {
    "id": 413,
    "text": "if rec._is_method and not rec.override_this then\r\n\t\t\tlocal var\r\n\t\t\tif parent.is_meta then\r\n\t\t\t\tvar = var_in{ \"<any>\", \"this\", is_this = true }\r\n\t\t\telseif rec.is_constructor then\r\n\t\t\t\tvar = var_out{ parent.c_type, \"this\", is_this = true }\r\n\t\t\t\t-- make the first constructor the default.\r\n\t\t\t\tif not parent.default_constructor then\r\n\t\t\t\t\tparent.default_constructor = rec\r\n\t\t\t\t\trec.is_default_constructor = true\r\n\t\t\t\tend\r\n\t\t\telse\r\n\t\t\t\tvar = var_in{ parent.c_type, \"this\", is_this = true }\r\n\t\t\tend\r\n\t\t\trec:insert_record(var, 1)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 414,
    "text": "local var",
    "type": "statement:localassign"
  }, {
    "id": 415,
    "text": "if parent.is_meta then\r\n\t\t\t\tvar = var_in{ \"<any>\", \"this\", is_this = true }\r\n\t\t\telseif rec.is_constructor then\r\n\t\t\t\tvar = var_out{ parent.c_type, \"this\", is_this = true }\r\n\t\t\t\t-- make the first constructor the default.\r\n\t\t\t\tif not parent.default_constructor then\r\n\t\t\t\t\tparent.default_constructor = rec\r\n\t\t\t\t\trec.is_default_constructor = true\r\n\t\t\t\tend\r\n\t\t\telse\r\n\t\t\t\tvar = var_in{ parent.c_type, \"this\", is_this = true }\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 416,
    "text": "var = var_in{ \"<any>\", \"this\", is_this = true }",
    "type": "statement:assign"
  }, {
    "id": 417,
    "text": "var = var_out{ parent.c_type, \"this\", is_this = true }",
    "type": "statement:assign"
  }, {
    "id": 418,
    "text": "if not parent.default_constructor then\r\n\t\t\t\t\tparent.default_constructor = rec\r\n\t\t\t\t\trec.is_default_constructor = true\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 419,
    "text": "parent.default_constructor = rec",
    "type": "statement:assign"
  }, {
    "id": 420,
    "text": "rec.is_default_constructor = true",
    "type": "statement:assign"
  }, {
    "id": 421,
    "text": "var = var_in{ parent.c_type, \"this\", is_this = true }",
    "type": "statement:assign"
  }, {
    "id": 422,
    "text": "rec:insert_record(var, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 423,
    "text": "process_records{\r\n\tvar_in = function(self, rec, parent)\r\n\t\t-- is variable a callback type?\r\n\t\tif not rec.is_callback then return end\r\n\t\t-- get grand-parent container\r\n\t\tlocal container = parent._parent\r\n\t\t-- create callback_state instance.\r\n\t\tlocal cb_state\r\n\t\tif rec.state_var == 'this' then\r\n\t\t\tlocal wrap_type = container.c_type\r\n\t\t\tcb_state = callback_state(wrap_type)\r\n\t\t\t-- wrap 'this' object.\r\n\t\t\tcontainer.is_wrapped = true\r\n\t\t\tcontainer.wrapper_obj = cb_state\r\n\t\telse\r\n\t\t\tassert(\"un-supported callback state var: \" .. rec.state_var)\r\n\t\tend\r\n\t\tcontainer:insert_record(cb_state, 1)\r\n\t\t-- create callback_func instance.\r\n\t\tlocal cb_func = callback_func(rec.c_type)(rec.name)\r\n\t\t-- move sub-records from 'var_in' callback record into 'callback_func'\r\n\t\tlocal cb=rec\r\n\t\tfor i=1,#cb do\r\n\t\t\tlocal rec = cb[i]\r\n\t\t\tif is_record(rec) and rec._rec_type ~= \"ignore\" then\r\n\t\t\t\tcb:remove_record(rec) -- remove from 'var_in'\r\n\t\t\t\tcb_func:add_record(rec) -- add to 'callback_func'\r\n\t\t\tend\r\n\t\tend\r\n\t\tcb_state:add_record(cb_func)\r\n\t\trec.cb_func = cb_func\r\n\t\trec.c_type_rec = cb_func\r\n\tend,\r\n\t}",
    "type": "statement:functioncall"
  }, {
    "id": 424,
    "text": "if not rec.is_callback then return end",
    "type": "statement:if"
  }, {
    "id": 425,
    "text": "local container = parent._parent",
    "type": "statement:localassign"
  }, {
    "id": 426,
    "text": "local cb_state",
    "type": "statement:localassign"
  }, {
    "id": 427,
    "text": "if rec.state_var == 'this' then\r\n\t\t\tlocal wrap_type = container.c_type\r\n\t\t\tcb_state = callback_state(wrap_type)\r\n\t\t\t-- wrap 'this' object.\r\n\t\t\tcontainer.is_wrapped = true\r\n\t\t\tcontainer.wrapper_obj = cb_state\r\n\t\telse\r\n\t\t\tassert(\"un-supported callback state var: \" .. rec.state_var)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 428,
    "text": "local wrap_type = container.c_type",
    "type": "statement:localassign"
  }, {
    "id": 429,
    "text": "cb_state = callback_state(wrap_type)",
    "type": "statement:assign"
  }, {
    "id": 430,
    "text": "container.is_wrapped = true",
    "type": "statement:assign"
  }, {
    "id": 431,
    "text": "container.wrapper_obj = cb_state",
    "type": "statement:assign"
  }, {
    "id": 432,
    "text": "assert(\"un-supported callback state var: \" .. rec.state_var)",
    "type": "statement:functioncall"
  }, {
    "id": 433,
    "text": "container:insert_record(cb_state, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 434,
    "text": "local cb_func = callback_func(rec.c_type)(rec.name)",
    "type": "statement:localassign"
  }, {
    "id": 435,
    "text": "local cb=rec",
    "type": "statement:localassign"
  }, {
    "id": 436,
    "text": "for i=1,#cb do\r\n\t\t\tlocal rec = cb[i]\r\n\t\t\tif is_record(rec) and rec._rec_type ~= \"ignore\" then\r\n\t\t\t\tcb:remove_record(rec) -- remove from 'var_in'\r\n\t\t\t\tcb_func:add_record(rec) -- add to 'callback_func'\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 437,
    "text": "local rec = cb[i]",
    "type": "statement:localassign"
  }, {
    "id": 438,
    "text": "if is_record(rec) and rec._rec_type ~= \"ignore\" then\r\n\t\t\t\tcb:remove_record(rec) -- remove from 'var_in'\r\n\t\t\t\tcb_func:add_record(rec) -- add to 'callback_func'\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 439,
    "text": "cb:remove_record(rec)",
    "type": "statement:functioncall"
  }, {
    "id": 440,
    "text": "cb_func:add_record(rec)",
    "type": "statement:functioncall"
  }, {
    "id": 441,
    "text": "cb_state:add_record(cb_func)",
    "type": "statement:functioncall"
  }, {
    "id": 442,
    "text": "rec.cb_func = cb_func",
    "type": "statement:assign"
  }, {
    "id": 443,
    "text": "rec.c_type_rec = cb_func",
    "type": "statement:assign"
  }, {
    "id": 444,
    "text": "process_records{\r\n\t_obj_cnt = 0,\r\n\tobject = function(self, rec, parent)\r\n\t\trec._obj_id = self._obj_cnt\r\n\t\tself._obj_cnt = self._obj_cnt + 1\r\n\tend,\r\n\textends = function(self, rec, parent)\r\n\t\t-- find base-object record.\r\n\t\tlocal base = resolve_c_type(rec.name)\r\n\t\trec.base = base\r\n\t\t-- add this object to base.\r\n\t\tlocal subs = base.subs\r\n\t\tif subs == nil then\r\n\t\t\tsubs = {}\r\n\t\t\tbase.subs = subs\r\n\t\tend\r\n\t\tsubs[#subs+1] = parent\r\n\tend,\r\n\tdyn_caster = function(self, rec, parent)\r\n\t\tparent.has_dyn_caster = rec\r\n\t\tif rec.caster_type == 'switch' then\r\n\t\t\tfor k,v in pairs(rec.value_map) do\r\n\t\t\t\trec.value_map[k] = resolve_c_type(v)\r\n\t\t\tend\r\n\t\tend\r\n\tend,\r\n\tunknown = function(self, rec, parent)\r\n\t\tresolve_rec(rec)\r\n\tend,\r\n\t}",
    "type": "statement:functioncall"
  }, {
    "id": 445,
    "text": "rec._obj_id = self._obj_cnt",
    "type": "statement:assign"
  }, {
    "id": 446,
    "text": "self._obj_cnt = self._obj_cnt + 1",
    "type": "statement:assign"
  }, {
    "id": 447,
    "text": "local base = resolve_c_type(rec.name)",
    "type": "statement:localassign"
  }, {
    "id": 448,
    "text": "rec.base = base",
    "type": "statement:assign"
  }, {
    "id": 449,
    "text": "local subs = base.subs",
    "type": "statement:localassign"
  }, {
    "id": 450,
    "text": "if subs == nil then\r\n\t\t\tsubs = {}\r\n\t\t\tbase.subs = subs\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 451,
    "text": "subs = {}",
    "type": "statement:assign"
  }, {
    "id": 452,
    "text": "base.subs = subs",
    "type": "statement:assign"
  }, {
    "id": 453,
    "text": "subs[#subs+1] = parent",
    "type": "statement:assign"
  }, {
    "id": 454,
    "text": "parent.has_dyn_caster = rec",
    "type": "statement:assign"
  }, {
    "id": 455,
    "text": "if rec.caster_type == 'switch' then\r\n\t\t\tfor k,v in pairs(rec.value_map) do\r\n\t\t\t\trec.value_map[k] = resolve_c_type(v)\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 456,
    "text": "for k,v in pairs(rec.value_map) do\r\n\t\t\t\trec.value_map[k] = resolve_c_type(v)\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 457,
    "text": "rec.value_map[k] = resolve_c_type(v)",
    "type": "statement:assign"
  }, {
    "id": 458,
    "text": "local ffi_wrappers = {}",
    "type": "statement:localassign"
  }, {
    "id": 459,
    "text": "process_records{\r\n\tc_call = function(self, rec, parent)\r\n\t\tif not rec.ffi_need_wrapper then\r\n\t\t\t-- normal C call don't need wrapper.\r\n\t\t\treturn\r\n\t\tend\r\n\t\t-- find parent 'object' record.\r\n\t\tlocal object = parent\r\n\t\twhile object._rec_type ~= 'object' and object._rec_type ~= 'c_module' do\r\n\t\t\tobject = object._parent\r\n\t\t\tassert(object, \"Can't find parent 'object' record of 'c_call'\")\r\n\t\tend\r\n\t\tlocal ret_type = rec.ret\r\n\t\tlocal ret = ret_type\r\n\t\t-- convert return type into \"var_out\" if it's not a \"void\" type.\r\n\t\tif ret ~= \"void\" then\r\n\t\t\tif type(ret) ~= 'string' then\r\n\t\t\t\tret_type = ret[1]\r\n\t\t\tend\r\n\t\t\tret = \"  return \"\r\n\t\telse\r\n\t\t\tret_type = \"void\"\r\n\t\t\tret = \"  \"\r\n\t\tend\r\n\t\t-- build C call statement.\r\n\t\tlocal call = {}\r\n\t\tlocal cfunc_name = rec.cfunc\r\n\t\tcall[#call+1] = ret\r\n\t\tcall[#call+1] = cfunc_name\r\n\t\t-- process parameters.\r\n\t\tlocal params = {}\r\n\t\tlocal list = rec.params\r\n\t\tparams[#params+1] = \"(\"\r\n\t\tcall[#call+1] = \"(\"\r\n\t\tif rec.is_method_call then\r\n\t\t\tcall[#call+1] = 'this'\r\n\t\t\tparams[#params+1] = object.c_type .. ' '\r\n\t\t\tparams[#params+1] = 'this'\r\n\t\t\tif #list > 0 then\r\n\t\t\t\tparams[#params+1] = \", \"\r\n\t\t\t\tcall[#call+1] = \", \"\r\n\t\t\tend\r\n\t\tend\r\n\t\tfor i=1,#list,2 do\r\n\t\t\tlocal c_type,name = clean_variable_type_name(list[i], list[i+1])\r\n\t\t\tif i > 1 then\r\n\t\t\t\tparams[#params+1] = \", \"\r\n\t\t\t\tcall[#call+1] = \", \"\r\n\t\t\tend\r\n\t\t\t-- append parameter name\r\n\t\t\tcall[#call+1] = name\r\n\t\t\t-- append parameter type & name to cdef\r\n\t\t\tparams[#params+1] = c_type .. ' '\r\n\t\t\tparams[#params+1] = name\r\n\t\tend\r\n\t\tparams[#params+1] = \")\"\r\n\t\tcall[#call+1] = \");\\n\"\r\n\t\t-- convert 'params' to string.\r\n\t\tparams = tconcat(params)\r\n\t\tcall = tconcat(call)\r\n\t\t-- get prefix\r\n\t\tlocal export_prefix = \"\"\r\n\t\tif rec.ffi_need_wrapper == 'c_wrap' then\r\n\t\t\texport_prefix = \"ffi_wrapper_\"\r\n\t\tend\r\n\t\trec.ffi_export_prefix = export_prefix\r\n\t\t-- check for re-definitions or duplicates.\r\n\t\tlocal cdef = ret_type .. \" \" .. export_prefix .. cfunc_name .. params\r\n\t\tlocal old_cdef = ffi_wrappers[cfunc_name]\r\n\t\tif old_cdef == cdef then\r\n\t\t\treturn -- duplicate, don't need to create a new wrapper.\r\n\t\telseif old_cdef then\r\n\t\t\terror(\"Re-definition of FFI wrapper cdef: \" .. cdef)\r\n\t\tend\r\n\t\tffi_wrappers[cfunc_name] = cdef\r\n\t\t-- create wrapper function\r\n\t\tif rec.ffi_need_wrapper == 'c_wrap' then\r\n\t\t\tobject:add_record(c_source(\"src\")({\r\n\t\t\t\"\\n/* FFI wrapper for inline/macro call */\\n\",\r\n\t\t\t\"LUA_NOBJ_API \", cdef, \" {\\n\",\r\n\t\t\tcall,\r\n\t\t\t\"}\\n\",\r\n\t\t\t}))\r\n\t\tend\r\n\t\tobject:add_record(ffi_export_function(ret_type)(export_prefix .. rec.cfunc)(params))\r\n\tend,\r\n\t}",
    "type": "statement:functioncall"
  }, {
    "id": 460,
    "text": "if not rec.ffi_need_wrapper then\r\n\t\t\t-- normal C call don't need wrapper.\r\n\t\t\treturn\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 461,
    "text": "local object = parent",
    "type": "statement:localassign"
  }, {
    "id": 462,
    "text": "while object._rec_type ~= 'object' and object._rec_type ~= 'c_module' do\r\n\t\t\tobject = object._parent\r\n\t\t\tassert(object, \"Can't find parent 'object' record of 'c_call'\")\r\n\t\tend",
    "type": "statement:while"
  }, {
    "id": 463,
    "text": "object = object._parent",
    "type": "statement:assign"
  }, {
    "id": 464,
    "text": "assert(object, \"Can't find parent 'object' record of 'c_call'\")",
    "type": "statement:functioncall"
  }, {
    "id": 465,
    "text": "local ret_type = rec.ret",
    "type": "statement:localassign"
  }, {
    "id": 466,
    "text": "local ret = ret_type",
    "type": "statement:localassign"
  }, {
    "id": 467,
    "text": "if ret ~= \"void\" then\r\n\t\t\tif type(ret) ~= 'string' then\r\n\t\t\t\tret_type = ret[1]\r\n\t\t\tend\r\n\t\t\tret = \"  return \"\r\n\t\telse\r\n\t\t\tret_type = \"void\"\r\n\t\t\tret = \"  \"\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 468,
    "text": "if type(ret) ~= 'string' then\r\n\t\t\t\tret_type = ret[1]\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 469,
    "text": "ret_type = ret[1]",
    "type": "statement:assign"
  }, {
    "id": 470,
    "text": "ret = \"  return \"",
    "type": "statement:assign"
  }, {
    "id": 471,
    "text": "ret_type = \"void\"",
    "type": "statement:assign"
  }, {
    "id": 472,
    "text": "ret = \"  \"",
    "type": "statement:assign"
  }, {
    "id": 473,
    "text": "local call = {}",
    "type": "statement:localassign"
  }, {
    "id": 474,
    "text": "local cfunc_name = rec.cfunc",
    "type": "statement:localassign"
  }, {
    "id": 475,
    "text": "call[#call+1] = ret",
    "type": "statement:assign"
  }, {
    "id": 476,
    "text": "call[#call+1] = cfunc_name",
    "type": "statement:assign"
  }, {
    "id": 477,
    "text": "local params = {}",
    "type": "statement:localassign"
  }, {
    "id": 478,
    "text": "local list = rec.params",
    "type": "statement:localassign"
  }, {
    "id": 479,
    "text": "params[#params+1] = \"(\"",
    "type": "statement:assign"
  }, {
    "id": 480,
    "text": "call[#call+1] = \"(\"",
    "type": "statement:assign"
  }, {
    "id": 481,
    "text": "if rec.is_method_call then\r\n\t\t\tcall[#call+1] = 'this'\r\n\t\t\tparams[#params+1] = object.c_type .. ' '\r\n\t\t\tparams[#params+1] = 'this'\r\n\t\t\tif #list > 0 then\r\n\t\t\t\tparams[#params+1] = \", \"\r\n\t\t\t\tcall[#call+1] = \", \"\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 482,
    "text": "call[#call+1] = 'this'",
    "type": "statement:assign"
  }, {
    "id": 483,
    "text": "params[#params+1] = object.c_type .. ' '",
    "type": "statement:assign"
  }, {
    "id": 484,
    "text": "params[#params+1] = 'this'",
    "type": "statement:assign"
  }, {
    "id": 485,
    "text": "if #list > 0 then\r\n\t\t\t\tparams[#params+1] = \", \"\r\n\t\t\t\tcall[#call+1] = \", \"\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 486,
    "text": "params[#params+1] = \", \"",
    "type": "statement:assign"
  }, {
    "id": 487,
    "text": "call[#call+1] = \", \"",
    "type": "statement:assign"
  }, {
    "id": 488,
    "text": "for i=1,#list,2 do\r\n\t\t\tlocal c_type,name = clean_variable_type_name(list[i], list[i+1])\r\n\t\t\tif i > 1 then\r\n\t\t\t\tparams[#params+1] = \", \"\r\n\t\t\t\tcall[#call+1] = \", \"\r\n\t\t\tend\r\n\t\t\t-- append parameter name\r\n\t\t\tcall[#call+1] = name\r\n\t\t\t-- append parameter type & name to cdef\r\n\t\t\tparams[#params+1] = c_type .. ' '\r\n\t\t\tparams[#params+1] = name\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 489,
    "text": "local c_type,name = clean_variable_type_name(list[i], list[i+1])",
    "type": "statement:localassign"
  }, {
    "id": 490,
    "text": "if i > 1 then\r\n\t\t\t\tparams[#params+1] = \", \"\r\n\t\t\t\tcall[#call+1] = \", \"\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 491,
    "text": "call[#call+1] = name",
    "type": "statement:assign"
  }, {
    "id": 492,
    "text": "params[#params+1] = c_type .. ' '",
    "type": "statement:assign"
  }, {
    "id": 493,
    "text": "params[#params+1] = name",
    "type": "statement:assign"
  }, {
    "id": 494,
    "text": "params[#params+1] = \")\"",
    "type": "statement:assign"
  }, {
    "id": 495,
    "text": "call[#call+1] = \");\\n\"",
    "type": "statement:assign"
  }, {
    "id": 496,
    "text": "params = tconcat(params)",
    "type": "statement:assign"
  }, {
    "id": 497,
    "text": "call = tconcat(call)",
    "type": "statement:assign"
  }, {
    "id": 498,
    "text": "local export_prefix = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 499,
    "text": "if rec.ffi_need_wrapper == 'c_wrap' then\r\n\t\t\texport_prefix = \"ffi_wrapper_\"\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 500,
    "text": "export_prefix = \"ffi_wrapper_\"",
    "type": "statement:assign"
  }, {
    "id": 501,
    "text": "rec.ffi_export_prefix = export_prefix",
    "type": "statement:assign"
  }, {
    "id": 502,
    "text": "local cdef = ret_type .. \" \" .. export_prefix .. cfunc_name .. params",
    "type": "statement:localassign"
  }, {
    "id": 503,
    "text": "local old_cdef = ffi_wrappers[cfunc_name]",
    "type": "statement:localassign"
  }, {
    "id": 504,
    "text": "if old_cdef == cdef then\r\n\t\t\treturn -- duplicate, don't need to create a new wrapper.\r\n\t\telseif old_cdef then\r\n\t\t\terror(\"Re-definition of FFI wrapper cdef: \" .. cdef)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 505,
    "text": "error(\"Re-definition of FFI wrapper cdef: \" .. cdef)",
    "type": "statement:functioncall"
  }, {
    "id": 506,
    "text": "ffi_wrappers[cfunc_name] = cdef",
    "type": "statement:assign"
  }, {
    "id": 507,
    "text": "if rec.ffi_need_wrapper == 'c_wrap' then\r\n\t\t\tobject:add_record(c_source(\"src\")({\r\n\t\t\t\"\\n/* FFI wrapper for inline/macro call */\\n\",\r\n\t\t\t\"LUA_NOBJ_API \", cdef, \" {\\n\",\r\n\t\t\tcall,\r\n\t\t\t\"}\\n\",\r\n\t\t\t}))\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 508,
    "text": "object:add_record(c_source(\"src\")({\r\n\t\t\t\"\\n/* FFI wrapper for inline/macro call */\\n\",\r\n\t\t\t\"LUA_NOBJ_API \", cdef, \" {\\n\",\r\n\t\t\tcall,\r\n\t\t\t\"}\\n\",\r\n\t\t\t}))",
    "type": "statement:functioncall"
  }, {
    "id": 509,
    "text": "object:add_record(ffi_export_function(ret_type)(export_prefix .. rec.cfunc)(params))",
    "type": "statement:functioncall"
  }, {
    "id": 510,
    "text": "local ffi_cdefs = {}",
    "type": "statement:localassign"
  }, {
    "id": 511,
    "text": "process_records{\r\n\tc_module = function(self, rec, parent)\r\n\t\trec.functions = {}\r\n\t\trec.constants = {}\r\n\t\trec.fields = {}\r\n\t\trec.name_map = {}\r\n\tend,\r\n\tobject = function(self, rec, parent)\r\n\t\trec.functions = {}\r\n\t\trec.constants = {}\r\n\t\trec.fields = {}\r\n\t\trec.name_map = {}\r\n\t\trec.extends = {}\r\n\tend,\r\n\tcallback_state = function(self, rec, parent)\r\n\t\trec.callbacks = {}\r\n\tend,\r\n\textends = function(self, rec, parent)\r\n\t\t-- add base-class to parent's base list.\r\n\t\tparent.extends[rec.name] = rec\r\n\tend,\r\n\tfield = function(self, rec, parent)\r\n\t\t-- add to name map to reserve the name.\r\n\t\tassert(parent.name_map[rec.name] == nil)\r\n\t\t--parent.name_map[rec.name] = rec\r\n\t\t-- add field to parent's fields list.\r\n\t\tparent.fields[rec.name] = rec\r\n\tend,\r\n\tconst = function(self, rec, parent)\r\n\t\t-- add to name map to reserve the name.\r\n\t\tassert(parent.name_map[rec.name] == nil)\r\n\t\tparent.name_map[rec.name] = rec\r\n\t\t-- add constant to parent's constants list.\r\n\t\tparent.constants[rec.name] = rec\r\n\tend,\r\n\tc_function = function(self, rec, parent)\r\n\t\tlocal c_name = parent.name .. '__' .. rec.name\r\n\t\tif rec._is_method then\r\n\t\t\tassert(not parent.is_package or parent.is_meta,\r\n\t\t\t\t\"Package's can't have methods: package=\" .. parent.name .. \", method=\" .. rec.name)\r\n\t\t\tc_name = c_name .. '__meth'\r\n\t\telse\r\n\t\t\tc_name = c_name .. '__func'\r\n\t\tend\r\n\t\trec.c_name = c_name\r\n\t\t-- add to name map to reserve the name.\r\n\t\tassert(parent.name_map[rec.name] == nil,\r\n\t\t\t\"duplicate functions \" .. rec.name .. \" in \" .. parent.name)\r\n\t\tparent.name_map[rec.name] = rec\r\n\t\t-- add function to parent's function list.\r\n\t\tparent.functions[rec.name] = rec\r\n\t\t-- prepare wrapped new/delete methods\r\n\t\tif rec._is_method and parent.is_wrapped then\r\n\t\t\tif rec.is_destructor or rec.is_constructor then\r\n\t\t\t\trec.is_wrapper = true\r\n\t\t\t\trec.wrapper_obj = parent.wrapper_obj\r\n\t\t\tend\r\n\t\tend\r\n\t\t-- map names to in/out variables\r\n\t\trec.var_map = {}\r\n\t\tfunction rec:add_variable(var, name)\r\n\t\t\tname = name or var.name\r\n\t\t\tlocal old_var = self.var_map[name]\r\n\t\t\tassert(old_var == nil or old_var == var,\r\n\t\t\t\t\"duplicate variable \" .. name .. \" in \" .. self.name)\r\n\t\t\t-- add this variable to parent\r\n\t\t\tself.var_map[name] = var\r\n\t\tend\r\n\tend,\r\n\tcallback_func = function(self, rec, parent)\r\n\t\tlocal func_type = rec.c_type_rec\r\n\t\t-- add callback to parent's callback list.\r\n\t\tparent.callbacks[rec.ref_field] = rec\r\n\t\tlocal src={\"static \"}\r\n\t\tlocal typedef={\"typedef \"}\r\n\t\t-- convert return type into \"cb_out\" if it's not a \"void\" type.\r\n\t\tlocal ret = func_type.ret\r\n\t\tif ret ~= \"void\" then\r\n\t\t\trec.ret_out = cb_out{ ret, \"ret\" }\r\n\t\t\trec:insert_record(rec.ret_out, 1)\r\n\t\tend\r\n\t\tsrc[#src+1] = ret .. \" \"\r\n\t\ttypedef[#typedef+1] = ret .. \" \"\r\n\t\t-- append c function to call.\r\n\t\trec.c_func_name = parent.base_type .. \"_\".. rec.ref_field .. \"_cb\"\r\n\t\tsrc[#src+1] = rec.c_func_name .. \"(\"\r\n\t\ttypedef[#typedef+1] = \"(*\" .. rec.c_type .. \")(\"\r\n\t\t-- convert params to \"cb_in\" records.\r\n\t\tlocal params = func_type.params\r\n\t\tlocal vars = {}\r\n\t\tlocal idx=1\r\n\t\tfor i=1,#params,2 do\r\n\t\t\tlocal c_type = params[i]\r\n\t\t\tlocal name = params[i + 1]\r\n\t\t\tif i > 1 then\r\n\t\t\t\tsrc[#src+1] = \", \"\r\n\t\t\t\ttypedef[#typedef+1] = \", \"\r\n\t\t\tend\r\n\t\t\t-- add cb_in to this rec.\r\n\t\t\tlocal v_in = cb_in{ c_type, name}\r\n\t\t\trec:insert_record(v_in, idx)\r\n\t\t\tidx = idx + 1\r\n\t\t\tsrc[#src+1] = c_type .. \" ${\" .. v_in.name .. \"}\"\r\n\t\t\ttypedef[#typedef+1] = c_type .. \" \" .. v_in.name\r\n\t\t\tvars[#vars+1] = \"${\" .. v_in.name .. \"}\"\r\n\t\tend\r\n\t\tsrc[#src+1] = \")\"\r\n\t\ttypedef[#typedef+1] = \");\"\r\n\t\t-- save callback func decl.\r\n\t\trec.c_func_decl = table.concat(src)\r\n\t\trec.c_func_typedef = table.concat(typedef)\r\n\t\trec.param_vars = table.concat(vars, ', ')\r\n\t\t-- map names to in/out variables\r\n\t\trec.var_map = {}\r\n\t\tfunction rec:add_variable(var, name)\r\n\t\t\tname = name or var.name\r\n\t\t\tlocal old_var = self.var_map[name]\r\n\t\t\tassert(old_var == nil or old_var == var,\r\n\t\t\t\t\"duplicate variable \" .. name .. \" in \" .. self.name)\r\n\t\t\t-- add this variable to parent\r\n\t\t\tself.var_map[name] = var\r\n\t\tend\r\n\tend,\r\n\tvar_in = function(self, rec, parent)\r\n\t\tparent:add_variable(rec)\r\n\tend,\r\n\tvar_out = function(self, rec, parent)\r\n\t\tparent:add_variable(rec)\r\n\tend,\r\n\tcb_in = function(self, rec, parent)\r\n\t\tparent:add_variable(rec)\r\n\tend,\r\n\tcb_out = function(self, rec, parent)\r\n\t\tparent:add_variable(rec)\r\n\tend,\r\n\tc_call = function(self, rec, parent)\r\n\t\tlocal src={}\r\n\t\tlocal ffi_cdef={}\r\n\t\tlocal ffi_src={}\r\n\t\tlocal ret_type = rec.ret\r\n\t\tlocal ret = ret_type\r\n\t\t-- convert return type into \"var_out\" if it's not a \"void\" type.\r\n\t\tif ret ~= \"void\" then\r\n\t\t\tlocal is_this = false\r\n\t\t\t-- check if return value is for the \"this\" value in a constructor.\r\n\t\t\tif parent.is_constructor then\r\n\t\t\t\tlocal this_var = parent.var_map.this\r\n\t\t\t\tif this_var and ret == this_var.c_type then\r\n\t\t\t\t\tret_type = this_var.c_type\r\n\t\t\t\t\tis_this = true\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tif is_this then\r\n\t\t\t\tret = \"  ${this} = \"\r\n\t\t\telse\r\n\t\t\t\tlocal rc\r\n\t\t\t\tif type(ret) == 'string' then\r\n\t\t\t\t\trc = var_out{ ret, \"rc_\" .. rec.cfunc }\r\n\t\t\t\telse\r\n\t\t\t\t\trc = var_out(ret)\r\n\t\t\t\tend\r\n\t\t\t\tret_type = rc.c_type\r\n\t\t\t\tif rc.is_length_ref then\r\n\t\t\t\t\tret = \"  ${\" .. rc.name .. \"_len} = \"\r\n\t\t\t\t\t-- look for related 'var_out'.\r\n\t\t\t\t\tlocal rc_val = parent.var_map[rc.name]\r\n\t\t\t\t\tif rc_val then\r\n\t\t\t\t\t\trc_val.has_length = true\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\t-- related 'var_out' not processed yet.\r\n\t\t\t\t\t\t-- add place-holder\r\n\t\t\t\t\t\tparent.var_map[rc.name] = rc\r\n\t\t\t\t\tend\r\n\t\t\t\telse\r\n\t\t\t\t\tret = \"  ${\" .. rc.name .. \"} = \"\r\n\t\t\t\t\t-- look for related length reference.\r\n\t\t\t\t\tlocal rc_len = parent.var_map[rc.name]\r\n\t\t\t\t\tif rc_len and rc_len.is_length_ref then\r\n\t\t\t\t\t\t-- we have a length.\r\n\t\t\t\t\t\trc.has_length = true\r\n\t\t\t\t\t\t-- remove length var place-holder\r\n\t\t\t\t\t\tparent.var_map[rc.name] = nil\r\n\t\t\t\t\tend\r\n\t\t\t\t\t-- register var_out variable.\r\n\t\t\t\t\tparent:add_variable(rc)\r\n\t\t\t\t\t-- add var_out record to parent\r\n\t\t\t\t\tparent:add_record(rc)\r\n\t\t\t\tend\r\n\t\t\t\t-- check for dereference.\r\n\t\t\t\tif rc.wrap == '*' then\r\n\t\t\t\t\tret = ret .. '*'\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tret = \"  \"\r\n\t\tend\r\n\t\tsrc[#src+1] = ret\r\n\t\tffi_cdef[#ffi_cdef+1] = ret_type .. \" \"\r\n\t\tffi_src[#ffi_src+1] = ret\r\n\t\t-- append c function to call.\r\n\t\tlocal func_start = rec.cfunc .. \"(\"\r\n\t\tsrc[#src+1] = func_start\r\n\t\tffi_cdef[#ffi_cdef+1] = func_start\r\n\t\tif rec.ffi_need_wrapper then\r\n\t\t\tffi_src[#ffi_src+1] = \"Cmod.\" .. rec.ffi_export_prefix\r\n\t\telse\r\n\t\t\tffi_src[#ffi_src+1] = \"C.\"\r\n\t\tend\r\n\t\tffi_src[#ffi_src+1] = func_start\r\n\t\t-- convert params to \"var_in\" records.\r\n\t\tlocal params = {}\r\n\t\tlocal list = rec.params\r\n\t\t-- check if this `c_call` is a method call\r\n\t\tif rec.is_method_call then\r\n\t\t\t-- then add `this` parameter to call.\r\n\t\t\tlocal this = parent.var_map.this\r\n\t\t\tassert(this, \"Missing `this` variable for method_call: \" .. rec.cfunc)\r\n\t\t\tthis = var_ref(this)\r\n\t\t\tparent:add_record(this)\r\n\t\t\tparams[1] = this\r\n\t\tend\r\n\t\tfor i=1,#list,2 do\r\n\t\t\tlocal c_type = list[i]\r\n\t\t\tlocal name = list[i+1]\r\n\t\t\tlocal param = var_in{ c_type, name}\r\n\t\t\tname = param.name\r\n\t\t\t-- check if this is a new input variable.\r\n\t\t\tif not parent.var_map[name] then\r\n\t\t\t\t-- add param as a variable.\r\n\t\t\t\tparent:add_variable(param)\r\n\t\t\telse\r\n\t\t\t\t-- variable exists, return this input variable into a reference.\r\n\t\t\t\tlocal ref = var_ref(param)\r\n\t\t\t\t-- invalidate old `var_in` record\r\n\t\t\t\tparam._rec_type = nil\r\n\t\t\t\tparam = ref\r\n\t\t\tend\r\n\t\t\t-- add param rec to parent.\r\n\t\t\tparent:add_record(param)\r\n\t\t\tparams[#params + 1] = param\r\n\t\tend\r\n\t\t-- append all input variables to \"c_source\"\r\n\t\tfor i=1,#params do\r\n\t\t\tlocal var = params[i]\r\n\t\t\tif i > 1 then\r\n\t\t\t\tsrc[#src+1] = \", \"\r\n\t\t\t\tffi_cdef[#ffi_cdef+1] = \", \"\r\n\t\t\t\tffi_src[#ffi_src+1] = \", \"\r\n\t\t\tend\r\n\t\t\tlocal name = var.name\r\n\t\t\tif var.is_length_ref then\r\n\t\t\t\tname = \"${\" .. name .. \"_len}\"\r\n\t\t\telse\r\n\t\t\t\tname = \"${\" .. name .. \"}\"\r\n\t\t\tend\r\n\t\t\t-- append parameter to c source call\r\n\t\t\tif var.wrap then\r\n\t\t\t\tsrc[#src+1] = var.wrap .. \"(\"\r\n\t\t\t\tsrc[#src+1] = name .. \")\"\r\n\t\t\telse\r\n\t\t\t\tsrc[#src+1] = name\r\n\t\t\tend\r\n\t\t\t-- append parameter to ffi source call\r\n\t\t\tffi_src[#ffi_src+1] = name\r\n\t\t\t-- append parameter type & name to ffi cdef record\r\n\t\t\tffi_cdef[#ffi_cdef+1] = var.c_type\r\n\t\t\tif var.wrap == '&' then\r\n\t\t\t\tffi_cdef[#ffi_cdef+1] = '*'\r\n\t\t\tend\r\n\t\tend\r\n\t\tsrc[#src+1] = \");\"\r\n\t\tffi_cdef[#ffi_cdef+1] = \");\\n\"\r\n\t\tffi_src[#ffi_src+1] = \")\"\r\n\t\t-- replace `c_call` with `c_source` record\r\n\t\tlocal idx = parent:replace_record(rec, c_source(\"src\")(src))\r\n\t\t-- convert to string.\r\n\t\tffi_cdef = tconcat(ffi_cdef)\r\n\t\t-- check for ffi cdefs re-definitions\r\n\t\tlocal cfunc = rec.cfunc\r\n\t\tlocal cdef = ffi_cdefs[cfunc]\r\n\t\tif cdef and cdef ~= ffi_cdef then\r\n\t\t\tlocal old_name = cfunc\r\n\t\t\tlocal i = 0\r\n\t\t\t-- search for next \"free\" alias name.\r\n\t\t\trepeat\r\n\t\t\t\ti = i + 1\r\n\t\t\t\tcfunc = old_name .. i\r\n\t\t\t\tcdef = ffi_cdefs[cfunc]\r\n\t\t\t\t-- search until \"free\" alias name, or same definition.\r\n\t\t\tuntil not cdef or cdef == ffi_cdef\r\n\t\t\t-- update ffi src with new alias name.\r\n\t\t\tffi_src = tconcat(ffi_src)\r\n\t\t\tffi_src = ffi_src:gsub(old_name .. '%(', cfunc .. '(')\r\n\t\t\t-- create a cdef \"asm\" alias.\r\n\t\t\tif not cdef then\r\n\t\t\t\tffi_cdef = ffi_cdef:gsub(old_name, cfunc)\r\n\t\t\t\tffi_cdef = ffi_cdef:gsub(\"%);\\n$\", [[) asm(\"]] .. old_name .. [[\");]])\r\n\t\t\tend\r\n\t\tend\r\n\t\tffi_cdefs[cfunc] = ffi_cdef\r\n\t\t-- insert FFI source record.\r\n\t\tif not cdef then\r\n\t\t\t-- function not defined yet.\r\n\t\t\tparent:insert_record(ffi_source(\"ffi_cdef\")(ffi_cdef), idx)\r\n\t\tend\r\n\t\tparent:insert_record(ffi_source(\"ffi_src\")(ffi_src), idx+1)\r\n\tend,\r\n\tffi_export = function(self, rec, parent)\r\n\t\tlocal ffi_src={}\r\n\t\t-- load exported symbol\r\n\t\tffi_src[#ffi_src+1] = 'local '\r\n\t\tffi_src[#ffi_src+1] = rec.name\r\n\t\tffi_src[#ffi_src+1] = ' = ffi.new(\"'\r\n\t\tffi_src[#ffi_src+1] = rec.c_type\r\n\t\tffi_src[#ffi_src+1] = ' *\", _priv[\"'\r\n\t\tffi_src[#ffi_src+1] = rec.name\r\n\t\tffi_src[#ffi_src+1] = '\"])\\n'\r\n\t\t-- insert FFI source record.\r\n\t\tlocal idx = parent:find_record(rec)\r\n\t\tparent:insert_record(ffi_source(\"ffi_import\")(ffi_src), idx)\r\n\tend,\r\n\t}",
    "type": "statement:functioncall"
  }, {
    "id": 512,
    "text": "rec.functions = {}",
    "type": "statement:assign"
  }, {
    "id": 513,
    "text": "rec.constants = {}",
    "type": "statement:assign"
  }, {
    "id": 514,
    "text": "rec.fields = {}",
    "type": "statement:assign"
  }, {
    "id": 515,
    "text": "rec.name_map = {}",
    "type": "statement:assign"
  }, {
    "id": 516,
    "text": "rec.extends = {}",
    "type": "statement:assign"
  }, {
    "id": 517,
    "text": "rec.callbacks = {}",
    "type": "statement:assign"
  }, {
    "id": 518,
    "text": "parent.extends[rec.name] = rec",
    "type": "statement:assign"
  }, {
    "id": 519,
    "text": "assert(parent.name_map[rec.name] == nil)",
    "type": "statement:functioncall"
  }, {
    "id": 520,
    "text": "parent.fields[rec.name] = rec",
    "type": "statement:assign"
  }, {
    "id": 521,
    "text": "parent.name_map[rec.name] = rec",
    "type": "statement:assign"
  }, {
    "id": 522,
    "text": "parent.constants[rec.name] = rec",
    "type": "statement:assign"
  }, {
    "id": 523,
    "text": "local c_name = parent.name .. '__' .. rec.name",
    "type": "statement:localassign"
  }, {
    "id": 524,
    "text": "if rec._is_method then\r\n\t\t\tassert(not parent.is_package or parent.is_meta,\r\n\t\t\t\t\"Package's can't have methods: package=\" .. parent.name .. \", method=\" .. rec.name)\r\n\t\t\tc_name = c_name .. '__meth'\r\n\t\telse\r\n\t\t\tc_name = c_name .. '__func'\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 525,
    "text": "assert(not parent.is_package or parent.is_meta,\r\n\t\t\t\t\"Package's can't have methods: package=\" .. parent.name .. \", method=\" .. rec.name)",
    "type": "statement:functioncall"
  }, {
    "id": 526,
    "text": "c_name = c_name .. '__meth'",
    "type": "statement:assign"
  }, {
    "id": 527,
    "text": "c_name = c_name .. '__func'",
    "type": "statement:assign"
  }, {
    "id": 528,
    "text": "rec.c_name = c_name",
    "type": "statement:assign"
  }, {
    "id": 529,
    "text": "assert(parent.name_map[rec.name] == nil,\r\n\t\t\t\"duplicate functions \" .. rec.name .. \" in \" .. parent.name)",
    "type": "statement:functioncall"
  }, {
    "id": 530,
    "text": "parent.functions[rec.name] = rec",
    "type": "statement:assign"
  }, {
    "id": 531,
    "text": "if rec._is_method and parent.is_wrapped then\r\n\t\t\tif rec.is_destructor or rec.is_constructor then\r\n\t\t\t\trec.is_wrapper = true\r\n\t\t\t\trec.wrapper_obj = parent.wrapper_obj\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 532,
    "text": "if rec.is_destructor or rec.is_constructor then\r\n\t\t\t\trec.is_wrapper = true\r\n\t\t\t\trec.wrapper_obj = parent.wrapper_obj\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 533,
    "text": "rec.is_wrapper = true",
    "type": "statement:assign"
  }, {
    "id": 534,
    "text": "rec.wrapper_obj = parent.wrapper_obj",
    "type": "statement:assign"
  }, {
    "id": 535,
    "text": "rec.var_map = {}",
    "type": "statement:assign"
  }, {
    "id": 536,
    "text": "function rec:add_variable(var, name)\r\n\t\t\tname = name or var.name\r\n\t\t\tlocal old_var = self.var_map[name]\r\n\t\t\tassert(old_var == nil or old_var == var,\r\n\t\t\t\t\"duplicate variable \" .. name .. \" in \" .. self.name)\r\n\t\t\t-- add this variable to parent\r\n\t\t\tself.var_map[name] = var\r\n\t\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 537,
    "text": "name = name or var.name",
    "type": "statement:assign"
  }, {
    "id": 538,
    "text": "local old_var = self.var_map[name]",
    "type": "statement:localassign"
  }, {
    "id": 539,
    "text": "assert(old_var == nil or old_var == var,\r\n\t\t\t\t\"duplicate variable \" .. name .. \" in \" .. self.name)",
    "type": "statement:functioncall"
  }, {
    "id": 540,
    "text": "self.var_map[name] = var",
    "type": "statement:assign"
  }, {
    "id": 541,
    "text": "local func_type = rec.c_type_rec",
    "type": "statement:localassign"
  }, {
    "id": 542,
    "text": "parent.callbacks[rec.ref_field] = rec",
    "type": "statement:assign"
  }, {
    "id": 543,
    "text": "local src={\"static \"}",
    "type": "statement:localassign"
  }, {
    "id": 544,
    "text": "local typedef={\"typedef \"}",
    "type": "statement:localassign"
  }, {
    "id": 545,
    "text": "local ret = func_type.ret",
    "type": "statement:localassign"
  }, {
    "id": 546,
    "text": "if ret ~= \"void\" then\r\n\t\t\trec.ret_out = cb_out{ ret, \"ret\" }\r\n\t\t\trec:insert_record(rec.ret_out, 1)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 547,
    "text": "rec.ret_out = cb_out{ ret, \"ret\" }",
    "type": "statement:assign"
  }, {
    "id": 548,
    "text": "rec:insert_record(rec.ret_out, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 549,
    "text": "src[#src+1] = ret .. \" \"",
    "type": "statement:assign"
  }, {
    "id": 550,
    "text": "typedef[#typedef+1] = ret .. \" \"",
    "type": "statement:assign"
  }, {
    "id": 551,
    "text": "rec.c_func_name = parent.base_type .. \"_\".. rec.ref_field .. \"_cb\"",
    "type": "statement:assign"
  }, {
    "id": 552,
    "text": "src[#src+1] = rec.c_func_name .. \"(\"",
    "type": "statement:assign"
  }, {
    "id": 553,
    "text": "typedef[#typedef+1] = \"(*\" .. rec.c_type .. \")(\"",
    "type": "statement:assign"
  }, {
    "id": 554,
    "text": "local params = func_type.params",
    "type": "statement:localassign"
  }, {
    "id": 555,
    "text": "local vars = {}",
    "type": "statement:localassign"
  }, {
    "id": 556,
    "text": "local idx=1",
    "type": "statement:localassign"
  }, {
    "id": 557,
    "text": "for i=1,#params,2 do\r\n\t\t\tlocal c_type = params[i]\r\n\t\t\tlocal name = params[i + 1]\r\n\t\t\tif i > 1 then\r\n\t\t\t\tsrc[#src+1] = \", \"\r\n\t\t\t\ttypedef[#typedef+1] = \", \"\r\n\t\t\tend\r\n\t\t\t-- add cb_in to this rec.\r\n\t\t\tlocal v_in = cb_in{ c_type, name}\r\n\t\t\trec:insert_record(v_in, idx)\r\n\t\t\tidx = idx + 1\r\n\t\t\tsrc[#src+1] = c_type .. \" ${\" .. v_in.name .. \"}\"\r\n\t\t\ttypedef[#typedef+1] = c_type .. \" \" .. v_in.name\r\n\t\t\tvars[#vars+1] = \"${\" .. v_in.name .. \"}\"\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 558,
    "text": "local c_type = params[i]",
    "type": "statement:localassign"
  }, {
    "id": 559,
    "text": "local name = params[i + 1]",
    "type": "statement:localassign"
  }, {
    "id": 560,
    "text": "if i > 1 then\r\n\t\t\t\tsrc[#src+1] = \", \"\r\n\t\t\t\ttypedef[#typedef+1] = \", \"\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 561,
    "text": "src[#src+1] = \", \"",
    "type": "statement:assign"
  }, {
    "id": 562,
    "text": "typedef[#typedef+1] = \", \"",
    "type": "statement:assign"
  }, {
    "id": 563,
    "text": "local v_in = cb_in{ c_type, name}",
    "type": "statement:localassign"
  }, {
    "id": 564,
    "text": "rec:insert_record(v_in, idx)",
    "type": "statement:functioncall"
  }, {
    "id": 565,
    "text": "idx = idx + 1",
    "type": "statement:assign"
  }, {
    "id": 566,
    "text": "src[#src+1] = c_type .. \" ${\" .. v_in.name .. \"}\"",
    "type": "statement:assign"
  }, {
    "id": 567,
    "text": "typedef[#typedef+1] = c_type .. \" \" .. v_in.name",
    "type": "statement:assign"
  }, {
    "id": 568,
    "text": "vars[#vars+1] = \"${\" .. v_in.name .. \"}\"",
    "type": "statement:assign"
  }, {
    "id": 569,
    "text": "src[#src+1] = \")\"",
    "type": "statement:assign"
  }, {
    "id": 570,
    "text": "typedef[#typedef+1] = \");\"",
    "type": "statement:assign"
  }, {
    "id": 571,
    "text": "rec.c_func_decl = table.concat(src)",
    "type": "statement:assign"
  }, {
    "id": 572,
    "text": "rec.c_func_typedef = table.concat(typedef)",
    "type": "statement:assign"
  }, {
    "id": 573,
    "text": "rec.param_vars = table.concat(vars, ', ')",
    "type": "statement:assign"
  }, {
    "id": 574,
    "text": "parent:add_variable(rec)",
    "type": "statement:functioncall"
  }, {
    "id": 575,
    "text": "local src={}",
    "type": "statement:localassign"
  }, {
    "id": 576,
    "text": "local ffi_cdef={}",
    "type": "statement:localassign"
  }, {
    "id": 577,
    "text": "local ffi_src={}",
    "type": "statement:localassign"
  }, {
    "id": 578,
    "text": "if ret ~= \"void\" then\r\n\t\t\tlocal is_this = false\r\n\t\t\t-- check if return value is for the \"this\" value in a constructor.\r\n\t\t\tif parent.is_constructor then\r\n\t\t\t\tlocal this_var = parent.var_map.this\r\n\t\t\t\tif this_var and ret == this_var.c_type then\r\n\t\t\t\t\tret_type = this_var.c_type\r\n\t\t\t\t\tis_this = true\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tif is_this then\r\n\t\t\t\tret = \"  ${this} = \"\r\n\t\t\telse\r\n\t\t\t\tlocal rc\r\n\t\t\t\tif type(ret) == 'string' then\r\n\t\t\t\t\trc = var_out{ ret, \"rc_\" .. rec.cfunc }\r\n\t\t\t\telse\r\n\t\t\t\t\trc = var_out(ret)\r\n\t\t\t\tend\r\n\t\t\t\tret_type = rc.c_type\r\n\t\t\t\tif rc.is_length_ref then\r\n\t\t\t\t\tret = \"  ${\" .. rc.name .. \"_len} = \"\r\n\t\t\t\t\t-- look for related 'var_out'.\r\n\t\t\t\t\tlocal rc_val = parent.var_map[rc.name]\r\n\t\t\t\t\tif rc_val then\r\n\t\t\t\t\t\trc_val.has_length = true\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\t-- related 'var_out' not processed yet.\r\n\t\t\t\t\t\t-- add place-holder\r\n\t\t\t\t\t\tparent.var_map[rc.name] = rc\r\n\t\t\t\t\tend\r\n\t\t\t\telse\r\n\t\t\t\t\tret = \"  ${\" .. rc.name .. \"} = \"\r\n\t\t\t\t\t-- look for related length reference.\r\n\t\t\t\t\tlocal rc_len = parent.var_map[rc.name]\r\n\t\t\t\t\tif rc_len and rc_len.is_length_ref then\r\n\t\t\t\t\t\t-- we have a length.\r\n\t\t\t\t\t\trc.has_length = true\r\n\t\t\t\t\t\t-- remove length var place-holder\r\n\t\t\t\t\t\tparent.var_map[rc.name] = nil\r\n\t\t\t\t\tend\r\n\t\t\t\t\t-- register var_out variable.\r\n\t\t\t\t\tparent:add_variable(rc)\r\n\t\t\t\t\t-- add var_out record to parent\r\n\t\t\t\t\tparent:add_record(rc)\r\n\t\t\t\tend\r\n\t\t\t\t-- check for dereference.\r\n\t\t\t\tif rc.wrap == '*' then\r\n\t\t\t\t\tret = ret .. '*'\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tret = \"  \"\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 579,
    "text": "local is_this = false",
    "type": "statement:localassign"
  }, {
    "id": 580,
    "text": "if parent.is_constructor then\r\n\t\t\t\tlocal this_var = parent.var_map.this\r\n\t\t\t\tif this_var and ret == this_var.c_type then\r\n\t\t\t\t\tret_type = this_var.c_type\r\n\t\t\t\t\tis_this = true\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 581,
    "text": "local this_var = parent.var_map.this",
    "type": "statement:localassign"
  }, {
    "id": 582,
    "text": "if this_var and ret == this_var.c_type then\r\n\t\t\t\t\tret_type = this_var.c_type\r\n\t\t\t\t\tis_this = true\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 583,
    "text": "ret_type = this_var.c_type",
    "type": "statement:assign"
  }, {
    "id": 584,
    "text": "is_this = true",
    "type": "statement:assign"
  }, {
    "id": 585,
    "text": "if is_this then\r\n\t\t\t\tret = \"  ${this} = \"\r\n\t\t\telse\r\n\t\t\t\tlocal rc\r\n\t\t\t\tif type(ret) == 'string' then\r\n\t\t\t\t\trc = var_out{ ret, \"rc_\" .. rec.cfunc }\r\n\t\t\t\telse\r\n\t\t\t\t\trc = var_out(ret)\r\n\t\t\t\tend\r\n\t\t\t\tret_type = rc.c_type\r\n\t\t\t\tif rc.is_length_ref then\r\n\t\t\t\t\tret = \"  ${\" .. rc.name .. \"_len} = \"\r\n\t\t\t\t\t-- look for related 'var_out'.\r\n\t\t\t\t\tlocal rc_val = parent.var_map[rc.name]\r\n\t\t\t\t\tif rc_val then\r\n\t\t\t\t\t\trc_val.has_length = true\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\t-- related 'var_out' not processed yet.\r\n\t\t\t\t\t\t-- add place-holder\r\n\t\t\t\t\t\tparent.var_map[rc.name] = rc\r\n\t\t\t\t\tend\r\n\t\t\t\telse\r\n\t\t\t\t\tret = \"  ${\" .. rc.name .. \"} = \"\r\n\t\t\t\t\t-- look for related length reference.\r\n\t\t\t\t\tlocal rc_len = parent.var_map[rc.name]\r\n\t\t\t\t\tif rc_len and rc_len.is_length_ref then\r\n\t\t\t\t\t\t-- we have a length.\r\n\t\t\t\t\t\trc.has_length = true\r\n\t\t\t\t\t\t-- remove length var place-holder\r\n\t\t\t\t\t\tparent.var_map[rc.name] = nil\r\n\t\t\t\t\tend\r\n\t\t\t\t\t-- register var_out variable.\r\n\t\t\t\t\tparent:add_variable(rc)\r\n\t\t\t\t\t-- add var_out record to parent\r\n\t\t\t\t\tparent:add_record(rc)\r\n\t\t\t\tend\r\n\t\t\t\t-- check for dereference.\r\n\t\t\t\tif rc.wrap == '*' then\r\n\t\t\t\t\tret = ret .. '*'\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 586,
    "text": "ret = \"  ${this} = \"",
    "type": "statement:assign"
  }, {
    "id": 587,
    "text": "local rc",
    "type": "statement:localassign"
  }, {
    "id": 588,
    "text": "if type(ret) == 'string' then\r\n\t\t\t\t\trc = var_out{ ret, \"rc_\" .. rec.cfunc }\r\n\t\t\t\telse\r\n\t\t\t\t\trc = var_out(ret)\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 589,
    "text": "rc = var_out{ ret, \"rc_\" .. rec.cfunc }",
    "type": "statement:assign"
  }, {
    "id": 590,
    "text": "rc = var_out(ret)",
    "type": "statement:assign"
  }, {
    "id": 591,
    "text": "ret_type = rc.c_type",
    "type": "statement:assign"
  }, {
    "id": 592,
    "text": "if rc.is_length_ref then\r\n\t\t\t\t\tret = \"  ${\" .. rc.name .. \"_len} = \"\r\n\t\t\t\t\t-- look for related 'var_out'.\r\n\t\t\t\t\tlocal rc_val = parent.var_map[rc.name]\r\n\t\t\t\t\tif rc_val then\r\n\t\t\t\t\t\trc_val.has_length = true\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\t-- related 'var_out' not processed yet.\r\n\t\t\t\t\t\t-- add place-holder\r\n\t\t\t\t\t\tparent.var_map[rc.name] = rc\r\n\t\t\t\t\tend\r\n\t\t\t\telse\r\n\t\t\t\t\tret = \"  ${\" .. rc.name .. \"} = \"\r\n\t\t\t\t\t-- look for related length reference.\r\n\t\t\t\t\tlocal rc_len = parent.var_map[rc.name]\r\n\t\t\t\t\tif rc_len and rc_len.is_length_ref then\r\n\t\t\t\t\t\t-- we have a length.\r\n\t\t\t\t\t\trc.has_length = true\r\n\t\t\t\t\t\t-- remove length var place-holder\r\n\t\t\t\t\t\tparent.var_map[rc.name] = nil\r\n\t\t\t\t\tend\r\n\t\t\t\t\t-- register var_out variable.\r\n\t\t\t\t\tparent:add_variable(rc)\r\n\t\t\t\t\t-- add var_out record to parent\r\n\t\t\t\t\tparent:add_record(rc)\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 593,
    "text": "ret = \"  ${\" .. rc.name .. \"_len} = \"",
    "type": "statement:assign"
  }, {
    "id": 594,
    "text": "local rc_val = parent.var_map[rc.name]",
    "type": "statement:localassign"
  }, {
    "id": 595,
    "text": "if rc_val then\r\n\t\t\t\t\t\trc_val.has_length = true\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\t-- related 'var_out' not processed yet.\r\n\t\t\t\t\t\t-- add place-holder\r\n\t\t\t\t\t\tparent.var_map[rc.name] = rc\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 596,
    "text": "rc_val.has_length = true",
    "type": "statement:assign"
  }, {
    "id": 597,
    "text": "parent.var_map[rc.name] = rc",
    "type": "statement:assign"
  }, {
    "id": 598,
    "text": "ret = \"  ${\" .. rc.name .. \"} = \"",
    "type": "statement:assign"
  }, {
    "id": 599,
    "text": "local rc_len = parent.var_map[rc.name]",
    "type": "statement:localassign"
  }, {
    "id": 600,
    "text": "if rc_len and rc_len.is_length_ref then\r\n\t\t\t\t\t\t-- we have a length.\r\n\t\t\t\t\t\trc.has_length = true\r\n\t\t\t\t\t\t-- remove length var place-holder\r\n\t\t\t\t\t\tparent.var_map[rc.name] = nil\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 601,
    "text": "rc.has_length = true",
    "type": "statement:assign"
  }, {
    "id": 602,
    "text": "parent.var_map[rc.name] = nil",
    "type": "statement:assign"
  }, {
    "id": 603,
    "text": "parent:add_variable(rc)",
    "type": "statement:functioncall"
  }, {
    "id": 604,
    "text": "parent:add_record(rc)",
    "type": "statement:functioncall"
  }, {
    "id": 605,
    "text": "if rc.wrap == '*' then\r\n\t\t\t\t\tret = ret .. '*'\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 606,
    "text": "ret = ret .. '*'",
    "type": "statement:assign"
  }, {
    "id": 607,
    "text": "src[#src+1] = ret",
    "type": "statement:assign"
  }, {
    "id": 608,
    "text": "ffi_cdef[#ffi_cdef+1] = ret_type .. \" \"",
    "type": "statement:assign"
  }, {
    "id": 609,
    "text": "ffi_src[#ffi_src+1] = ret",
    "type": "statement:assign"
  }, {
    "id": 610,
    "text": "local func_start = rec.cfunc .. \"(\"",
    "type": "statement:localassign"
  }, {
    "id": 611,
    "text": "src[#src+1] = func_start",
    "type": "statement:assign"
  }, {
    "id": 612,
    "text": "ffi_cdef[#ffi_cdef+1] = func_start",
    "type": "statement:assign"
  }, {
    "id": 613,
    "text": "if rec.ffi_need_wrapper then\r\n\t\t\tffi_src[#ffi_src+1] = \"Cmod.\" .. rec.ffi_export_prefix\r\n\t\telse\r\n\t\t\tffi_src[#ffi_src+1] = \"C.\"\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 614,
    "text": "ffi_src[#ffi_src+1] = \"Cmod.\" .. rec.ffi_export_prefix",
    "type": "statement:assign"
  }, {
    "id": 615,
    "text": "ffi_src[#ffi_src+1] = \"C.\"",
    "type": "statement:assign"
  }, {
    "id": 616,
    "text": "ffi_src[#ffi_src+1] = func_start",
    "type": "statement:assign"
  }, {
    "id": 617,
    "text": "if rec.is_method_call then\r\n\t\t\t-- then add `this` parameter to call.\r\n\t\t\tlocal this = parent.var_map.this\r\n\t\t\tassert(this, \"Missing `this` variable for method_call: \" .. rec.cfunc)\r\n\t\t\tthis = var_ref(this)\r\n\t\t\tparent:add_record(this)\r\n\t\t\tparams[1] = this\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 618,
    "text": "local this = parent.var_map.this",
    "type": "statement:localassign"
  }, {
    "id": 619,
    "text": "assert(this, \"Missing `this` variable for method_call: \" .. rec.cfunc)",
    "type": "statement:functioncall"
  }, {
    "id": 620,
    "text": "this = var_ref(this)",
    "type": "statement:assign"
  }, {
    "id": 621,
    "text": "parent:add_record(this)",
    "type": "statement:functioncall"
  }, {
    "id": 622,
    "text": "params[1] = this",
    "type": "statement:assign"
  }, {
    "id": 623,
    "text": "for i=1,#list,2 do\r\n\t\t\tlocal c_type = list[i]\r\n\t\t\tlocal name = list[i+1]\r\n\t\t\tlocal param = var_in{ c_type, name}\r\n\t\t\tname = param.name\r\n\t\t\t-- check if this is a new input variable.\r\n\t\t\tif not parent.var_map[name] then\r\n\t\t\t\t-- add param as a variable.\r\n\t\t\t\tparent:add_variable(param)\r\n\t\t\telse\r\n\t\t\t\t-- variable exists, return this input variable into a reference.\r\n\t\t\t\tlocal ref = var_ref(param)\r\n\t\t\t\t-- invalidate old `var_in` record\r\n\t\t\t\tparam._rec_type = nil\r\n\t\t\t\tparam = ref\r\n\t\t\tend\r\n\t\t\t-- add param rec to parent.\r\n\t\t\tparent:add_record(param)\r\n\t\t\tparams[#params + 1] = param\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 624,
    "text": "local c_type = list[i]",
    "type": "statement:localassign"
  }, {
    "id": 625,
    "text": "local name = list[i+1]",
    "type": "statement:localassign"
  }, {
    "id": 626,
    "text": "local param = var_in{ c_type, name}",
    "type": "statement:localassign"
  }, {
    "id": 627,
    "text": "name = param.name",
    "type": "statement:assign"
  }, {
    "id": 628,
    "text": "if not parent.var_map[name] then\r\n\t\t\t\t-- add param as a variable.\r\n\t\t\t\tparent:add_variable(param)\r\n\t\t\telse\r\n\t\t\t\t-- variable exists, return this input variable into a reference.\r\n\t\t\t\tlocal ref = var_ref(param)\r\n\t\t\t\t-- invalidate old `var_in` record\r\n\t\t\t\tparam._rec_type = nil\r\n\t\t\t\tparam = ref\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 629,
    "text": "parent:add_variable(param)",
    "type": "statement:functioncall"
  }, {
    "id": 630,
    "text": "local ref = var_ref(param)",
    "type": "statement:localassign"
  }, {
    "id": 631,
    "text": "param._rec_type = nil",
    "type": "statement:assign"
  }, {
    "id": 632,
    "text": "param = ref",
    "type": "statement:assign"
  }, {
    "id": 633,
    "text": "parent:add_record(param)",
    "type": "statement:functioncall"
  }, {
    "id": 634,
    "text": "params[#params + 1] = param",
    "type": "statement:assign"
  }, {
    "id": 635,
    "text": "for i=1,#params do\r\n\t\t\tlocal var = params[i]\r\n\t\t\tif i > 1 then\r\n\t\t\t\tsrc[#src+1] = \", \"\r\n\t\t\t\tffi_cdef[#ffi_cdef+1] = \", \"\r\n\t\t\t\tffi_src[#ffi_src+1] = \", \"\r\n\t\t\tend\r\n\t\t\tlocal name = var.name\r\n\t\t\tif var.is_length_ref then\r\n\t\t\t\tname = \"${\" .. name .. \"_len}\"\r\n\t\t\telse\r\n\t\t\t\tname = \"${\" .. name .. \"}\"\r\n\t\t\tend\r\n\t\t\t-- append parameter to c source call\r\n\t\t\tif var.wrap then\r\n\t\t\t\tsrc[#src+1] = var.wrap .. \"(\"\r\n\t\t\t\tsrc[#src+1] = name .. \")\"\r\n\t\t\telse\r\n\t\t\t\tsrc[#src+1] = name\r\n\t\t\tend\r\n\t\t\t-- append parameter to ffi source call\r\n\t\t\tffi_src[#ffi_src+1] = name\r\n\t\t\t-- append parameter type & name to ffi cdef record\r\n\t\t\tffi_cdef[#ffi_cdef+1] = var.c_type\r\n\t\t\tif var.wrap == '&' then\r\n\t\t\t\tffi_cdef[#ffi_cdef+1] = '*'\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 636,
    "text": "local var = params[i]",
    "type": "statement:localassign"
  }, {
    "id": 637,
    "text": "if i > 1 then\r\n\t\t\t\tsrc[#src+1] = \", \"\r\n\t\t\t\tffi_cdef[#ffi_cdef+1] = \", \"\r\n\t\t\t\tffi_src[#ffi_src+1] = \", \"\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 638,
    "text": "ffi_cdef[#ffi_cdef+1] = \", \"",
    "type": "statement:assign"
  }, {
    "id": 639,
    "text": "ffi_src[#ffi_src+1] = \", \"",
    "type": "statement:assign"
  }, {
    "id": 640,
    "text": "local name = var.name",
    "type": "statement:localassign"
  }, {
    "id": 641,
    "text": "if var.is_length_ref then\r\n\t\t\t\tname = \"${\" .. name .. \"_len}\"\r\n\t\t\telse\r\n\t\t\t\tname = \"${\" .. name .. \"}\"\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 642,
    "text": "name = \"${\" .. name .. \"_len}\"",
    "type": "statement:assign"
  }, {
    "id": 643,
    "text": "name = \"${\" .. name .. \"}\"",
    "type": "statement:assign"
  }, {
    "id": 644,
    "text": "if var.wrap then\r\n\t\t\t\tsrc[#src+1] = var.wrap .. \"(\"\r\n\t\t\t\tsrc[#src+1] = name .. \")\"\r\n\t\t\telse\r\n\t\t\t\tsrc[#src+1] = name\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 645,
    "text": "src[#src+1] = var.wrap .. \"(\"",
    "type": "statement:assign"
  }, {
    "id": 646,
    "text": "src[#src+1] = name .. \")\"",
    "type": "statement:assign"
  }, {
    "id": 647,
    "text": "src[#src+1] = name",
    "type": "statement:assign"
  }, {
    "id": 648,
    "text": "ffi_src[#ffi_src+1] = name",
    "type": "statement:assign"
  }, {
    "id": 649,
    "text": "ffi_cdef[#ffi_cdef+1] = var.c_type",
    "type": "statement:assign"
  }, {
    "id": 650,
    "text": "if var.wrap == '&' then\r\n\t\t\t\tffi_cdef[#ffi_cdef+1] = '*'\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 651,
    "text": "ffi_cdef[#ffi_cdef+1] = '*'",
    "type": "statement:assign"
  }, {
    "id": 652,
    "text": "src[#src+1] = \");\"",
    "type": "statement:assign"
  }, {
    "id": 653,
    "text": "ffi_cdef[#ffi_cdef+1] = \");\\n\"",
    "type": "statement:assign"
  }, {
    "id": 654,
    "text": "ffi_src[#ffi_src+1] = \")\"",
    "type": "statement:assign"
  }, {
    "id": 655,
    "text": "local idx = parent:replace_record(rec, c_source(\"src\")(src))",
    "type": "statement:localassign"
  }, {
    "id": 656,
    "text": "ffi_cdef = tconcat(ffi_cdef)",
    "type": "statement:assign"
  }, {
    "id": 657,
    "text": "local cfunc = rec.cfunc",
    "type": "statement:localassign"
  }, {
    "id": 658,
    "text": "local cdef = ffi_cdefs[cfunc]",
    "type": "statement:localassign"
  }, {
    "id": 659,
    "text": "if cdef and cdef ~= ffi_cdef then\r\n\t\t\tlocal old_name = cfunc\r\n\t\t\tlocal i = 0\r\n\t\t\t-- search for next \"free\" alias name.\r\n\t\t\trepeat\r\n\t\t\t\ti = i + 1\r\n\t\t\t\tcfunc = old_name .. i\r\n\t\t\t\tcdef = ffi_cdefs[cfunc]\r\n\t\t\t\t-- search until \"free\" alias name, or same definition.\r\n\t\t\tuntil not cdef or cdef == ffi_cdef\r\n\t\t\t-- update ffi src with new alias name.\r\n\t\t\tffi_src = tconcat(ffi_src)\r\n\t\t\tffi_src = ffi_src:gsub(old_name .. '%(', cfunc .. '(')\r\n\t\t\t-- create a cdef \"asm\" alias.\r\n\t\t\tif not cdef then\r\n\t\t\t\tffi_cdef = ffi_cdef:gsub(old_name, cfunc)\r\n\t\t\t\tffi_cdef = ffi_cdef:gsub(\"%);\\n$\", [[) asm(\"]] .. old_name .. [[\");]])\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 660,
    "text": "local old_name = cfunc",
    "type": "statement:localassign"
  }, {
    "id": 661,
    "text": "local i = 0",
    "type": "statement:localassign"
  }, {
    "id": 662,
    "text": "repeat\r\n\t\t\t\ti = i + 1\r\n\t\t\t\tcfunc = old_name .. i\r\n\t\t\t\tcdef = ffi_cdefs[cfunc]\r\n\t\t\t\t-- search until \"free\" alias name, or same definition.\r\n\t\t\tuntil not cdef or cdef == ffi_cdef",
    "type": "statement:repeat"
  }, {
    "id": 663,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 664,
    "text": "cfunc = old_name .. i",
    "type": "statement:assign"
  }, {
    "id": 665,
    "text": "cdef = ffi_cdefs[cfunc]",
    "type": "statement:assign"
  }, {
    "id": 666,
    "text": "ffi_src = tconcat(ffi_src)",
    "type": "statement:assign"
  }, {
    "id": 667,
    "text": "ffi_src = ffi_src:gsub(old_name .. '%(', cfunc .. '(')",
    "type": "statement:assign"
  }, {
    "id": 668,
    "text": "if not cdef then\r\n\t\t\t\tffi_cdef = ffi_cdef:gsub(old_name, cfunc)\r\n\t\t\t\tffi_cdef = ffi_cdef:gsub(\"%);\\n$\", [[) asm(\"]] .. old_name .. [[\");]])\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 669,
    "text": "ffi_cdef = ffi_cdef:gsub(old_name, cfunc)",
    "type": "statement:assign"
  }, {
    "id": 670,
    "text": "ffi_cdef = ffi_cdef:gsub(\"%);\\n$\", [[) asm(\"]] .. old_name .. [[\");]])",
    "type": "statement:assign"
  }, {
    "id": 671,
    "text": "ffi_cdefs[cfunc] = ffi_cdef",
    "type": "statement:assign"
  }, {
    "id": 672,
    "text": "if not cdef then\r\n\t\t\t-- function not defined yet.\r\n\t\t\tparent:insert_record(ffi_source(\"ffi_cdef\")(ffi_cdef), idx)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 673,
    "text": "parent:insert_record(ffi_source(\"ffi_cdef\")(ffi_cdef), idx)",
    "type": "statement:functioncall"
  }, {
    "id": 674,
    "text": "parent:insert_record(ffi_source(\"ffi_src\")(ffi_src), idx+1)",
    "type": "statement:functioncall"
  }, {
    "id": 675,
    "text": "ffi_src[#ffi_src+1] = 'local '",
    "type": "statement:assign"
  }, {
    "id": 676,
    "text": "ffi_src[#ffi_src+1] = rec.name",
    "type": "statement:assign"
  }, {
    "id": 677,
    "text": "ffi_src[#ffi_src+1] = ' = ffi.new(\"'",
    "type": "statement:assign"
  }, {
    "id": 678,
    "text": "ffi_src[#ffi_src+1] = rec.c_type",
    "type": "statement:assign"
  }, {
    "id": 679,
    "text": "ffi_src[#ffi_src+1] = ' *\", _priv[\"'",
    "type": "statement:assign"
  }, {
    "id": 680,
    "text": "ffi_src[#ffi_src+1] = '\"])\\n'",
    "type": "statement:assign"
  }, {
    "id": 681,
    "text": "local idx = parent:find_record(rec)",
    "type": "statement:localassign"
  }, {
    "id": 682,
    "text": "parent:insert_record(ffi_source(\"ffi_import\")(ffi_src), idx)",
    "type": "statement:functioncall"
  }, {
    "id": 683,
    "text": "ffi_cdefs = nil",
    "type": "statement:assign"
  }, {
    "id": 684,
    "text": "local function sort_vars(var1, var2)\r\n\t\treturn (var1.idx < var2.idx)\r\n\tend",
    "type": "statement:localfunction"
  }, {
    "id": 685,
    "text": "process_records{\r\n\tc_function = function(self, rec, parent)\r\n\t\tlocal inputs = {}\r\n\t\tlocal in_count = 0\r\n\t\tlocal outputs = {}\r\n\t\tlocal out_count = 0\r\n\t\tlocal misc = {}\r\n\t\tlocal max_idx = #rec\r\n\t\t-- seperate sub-records\r\n\t\tfor i=1,max_idx do\r\n\t\t\tlocal var = rec[i]\r\n\t\t\tlocal var_type = var._rec_type\r\n\t\t\tlocal sort = true\r\n\t\t\tlocal list\r\n\t\t\tif var_type == 'var_in' then\r\n\t\t\t\tlist = inputs\r\n\t\t\t\tin_count = in_count + 1\r\n\t\t\telseif var_type == 'var_out' then\r\n\t\t\t\tlist = outputs\r\n\t\t\t\tout_count = out_count + 1\r\n\t\t\telse\r\n\t\t\t\tlist = misc\r\n\t\t\t\tsort = false\r\n\t\t\tend\r\n\t\t\tif sort then\r\n\t\t\t\tlocal idx = var.idx\r\n\t\t\t\tif idx then\r\n\t\t\t\t\t-- force index of this variable.\r\n\t\t\t\t\tlocal old_var = list[idx]\r\n\t\t\t\t\t-- variable has a fixed\r\n\t\t\t\t\tlist[idx] = var\r\n\t\t\t\t\t-- move old variable to next open slot\r\n\t\t\t\t\tvar = old_var\r\n\t\t\t\tend\r\n\t\t\t\t-- place variable in next nil slot.\r\n\t\t\t\tif var then\r\n\t\t\t\t\tfor i=1,max_idx do\r\n\t\t\t\t\t\tif not list[i] then\r\n\t\t\t\t\t\t\t-- done, found empty slot\r\n\t\t\t\t\t\t\tlist[i] = var\r\n\t\t\t\t\t\t\tvar = nil\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\tassert(var == nil, \"Failed to find empty slot for variable.\")\r\n\t\t\telse\r\n\t\t\t\tlist[#list + 1] = var\r\n\t\t\tend\r\n\t\tend\r\n\t\t-- make sure there are no gaps between input/output variables.\r\n\t\tassert(#inputs == in_count,\r\n\t\t\t\"Gaps between input variables, check your usage of `<idx` for function: \" .. rec.name)\r\n\t\tassert(#outputs == out_count,\r\n\t\t\t\"Gaps between output variables, check your usage of `>idx` for function: \" .. rec.name)\r\n\r\n\t\t-- put sorted sub-records back into the `c_function` record.\r\n\t\tlocal idx=0\r\n\t\tfor i=1,in_count do\r\n\t\t\tidx = idx + 1\r\n\t\t\trec[idx] = inputs[i]\r\n\t\tend\r\n\t\tfor i=1,out_count do\r\n\t\t\tidx = idx + 1\r\n\t\t\trec[idx] = outputs[i]\r\n\t\tend\r\n\t\tfor i=1,#misc do\r\n\t\t\tidx = idx + 1\r\n\t\t\trec[idx] = misc[i]\r\n\t\tend\r\n\t\t-- generate list of input parameter names for FFI functions.\r\n\t\tlocal ffi_params = {}\r\n\t\tfor i=1,in_count do\r\n\t\t\tlocal name = inputs[i].name\r\n\t\t\tif name ~= 'this' then\r\n\t\t\t\tffi_params[i] = '${' .. inputs[i].name .. '}'\r\n\t\t\telse\r\n\t\t\t\tffi_params[i] = 'self'\r\n\t\t\tend\r\n\t\tend\r\n\t\trec.ffi_params = tconcat(ffi_params, ', ')\r\n\tend,\r\n\t}",
    "type": "statement:functioncall"
  }, {
    "id": 686,
    "text": "local inputs = {}",
    "type": "statement:localassign"
  }, {
    "id": 687,
    "text": "local in_count = 0",
    "type": "statement:localassign"
  }, {
    "id": 688,
    "text": "local outputs = {}",
    "type": "statement:localassign"
  }, {
    "id": 689,
    "text": "local out_count = 0",
    "type": "statement:localassign"
  }, {
    "id": 690,
    "text": "local misc = {}",
    "type": "statement:localassign"
  }, {
    "id": 691,
    "text": "local max_idx = #rec",
    "type": "statement:localassign"
  }, {
    "id": 692,
    "text": "for i=1,max_idx do\r\n\t\t\tlocal var = rec[i]\r\n\t\t\tlocal var_type = var._rec_type\r\n\t\t\tlocal sort = true\r\n\t\t\tlocal list\r\n\t\t\tif var_type == 'var_in' then\r\n\t\t\t\tlist = inputs\r\n\t\t\t\tin_count = in_count + 1\r\n\t\t\telseif var_type == 'var_out' then\r\n\t\t\t\tlist = outputs\r\n\t\t\t\tout_count = out_count + 1\r\n\t\t\telse\r\n\t\t\t\tlist = misc\r\n\t\t\t\tsort = false\r\n\t\t\tend\r\n\t\t\tif sort then\r\n\t\t\t\tlocal idx = var.idx\r\n\t\t\t\tif idx then\r\n\t\t\t\t\t-- force index of this variable.\r\n\t\t\t\t\tlocal old_var = list[idx]\r\n\t\t\t\t\t-- variable has a fixed\r\n\t\t\t\t\tlist[idx] = var\r\n\t\t\t\t\t-- move old variable to next open slot\r\n\t\t\t\t\tvar = old_var\r\n\t\t\t\tend\r\n\t\t\t\t-- place variable in next nil slot.\r\n\t\t\t\tif var then\r\n\t\t\t\t\tfor i=1,max_idx do\r\n\t\t\t\t\t\tif not list[i] then\r\n\t\t\t\t\t\t\t-- done, found empty slot\r\n\t\t\t\t\t\t\tlist[i] = var\r\n\t\t\t\t\t\t\tvar = nil\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\tassert(var == nil, \"Failed to find empty slot for variable.\")\r\n\t\t\telse\r\n\t\t\t\tlist[#list + 1] = var\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 693,
    "text": "local var = rec[i]",
    "type": "statement:localassign"
  }, {
    "id": 694,
    "text": "local var_type = var._rec_type",
    "type": "statement:localassign"
  }, {
    "id": 695,
    "text": "local sort = true",
    "type": "statement:localassign"
  }, {
    "id": 696,
    "text": "local list",
    "type": "statement:localassign"
  }, {
    "id": 697,
    "text": "if var_type == 'var_in' then\r\n\t\t\t\tlist = inputs\r\n\t\t\t\tin_count = in_count + 1\r\n\t\t\telseif var_type == 'var_out' then\r\n\t\t\t\tlist = outputs\r\n\t\t\t\tout_count = out_count + 1\r\n\t\t\telse\r\n\t\t\t\tlist = misc\r\n\t\t\t\tsort = false\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 698,
    "text": "list = inputs",
    "type": "statement:assign"
  }, {
    "id": 699,
    "text": "in_count = in_count + 1",
    "type": "statement:assign"
  }, {
    "id": 700,
    "text": "list = outputs",
    "type": "statement:assign"
  }, {
    "id": 701,
    "text": "out_count = out_count + 1",
    "type": "statement:assign"
  }, {
    "id": 702,
    "text": "list = misc",
    "type": "statement:assign"
  }, {
    "id": 703,
    "text": "sort = false",
    "type": "statement:assign"
  }, {
    "id": 704,
    "text": "if sort then\r\n\t\t\t\tlocal idx = var.idx\r\n\t\t\t\tif idx then\r\n\t\t\t\t\t-- force index of this variable.\r\n\t\t\t\t\tlocal old_var = list[idx]\r\n\t\t\t\t\t-- variable has a fixed\r\n\t\t\t\t\tlist[idx] = var\r\n\t\t\t\t\t-- move old variable to next open slot\r\n\t\t\t\t\tvar = old_var\r\n\t\t\t\tend\r\n\t\t\t\t-- place variable in next nil slot.\r\n\t\t\t\tif var then\r\n\t\t\t\t\tfor i=1,max_idx do\r\n\t\t\t\t\t\tif not list[i] then\r\n\t\t\t\t\t\t\t-- done, found empty slot\r\n\t\t\t\t\t\t\tlist[i] = var\r\n\t\t\t\t\t\t\tvar = nil\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\tassert(var == nil, \"Failed to find empty slot for variable.\")\r\n\t\t\telse\r\n\t\t\t\tlist[#list + 1] = var\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 705,
    "text": "local idx = var.idx",
    "type": "statement:localassign"
  }, {
    "id": 706,
    "text": "if idx then\r\n\t\t\t\t\t-- force index of this variable.\r\n\t\t\t\t\tlocal old_var = list[idx]\r\n\t\t\t\t\t-- variable has a fixed\r\n\t\t\t\t\tlist[idx] = var\r\n\t\t\t\t\t-- move old variable to next open slot\r\n\t\t\t\t\tvar = old_var\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 707,
    "text": "local old_var = list[idx]",
    "type": "statement:localassign"
  }, {
    "id": 708,
    "text": "list[idx] = var",
    "type": "statement:assign"
  }, {
    "id": 709,
    "text": "var = old_var",
    "type": "statement:assign"
  }, {
    "id": 710,
    "text": "if var then\r\n\t\t\t\t\tfor i=1,max_idx do\r\n\t\t\t\t\t\tif not list[i] then\r\n\t\t\t\t\t\t\t-- done, found empty slot\r\n\t\t\t\t\t\t\tlist[i] = var\r\n\t\t\t\t\t\t\tvar = nil\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 711,
    "text": "for i=1,max_idx do\r\n\t\t\t\t\t\tif not list[i] then\r\n\t\t\t\t\t\t\t-- done, found empty slot\r\n\t\t\t\t\t\t\tlist[i] = var\r\n\t\t\t\t\t\t\tvar = nil\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 712,
    "text": "if not list[i] then\r\n\t\t\t\t\t\t\t-- done, found empty slot\r\n\t\t\t\t\t\t\tlist[i] = var\r\n\t\t\t\t\t\t\tvar = nil\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 713,
    "text": "list[i] = var",
    "type": "statement:assign"
  }, {
    "id": 714,
    "text": "var = nil",
    "type": "statement:assign"
  }, {
    "id": 715,
    "text": "assert(var == nil, \"Failed to find empty slot for variable.\")",
    "type": "statement:functioncall"
  }, {
    "id": 716,
    "text": "list[#list + 1] = var",
    "type": "statement:assign"
  }, {
    "id": 717,
    "text": "assert(#inputs == in_count,\r\n\t\t\t\"Gaps between input variables, check your usage of `<idx` for function: \" .. rec.name)",
    "type": "statement:functioncall"
  }, {
    "id": 718,
    "text": "assert(#outputs == out_count,\r\n\t\t\t\"Gaps between output variables, check your usage of `>idx` for function: \" .. rec.name)",
    "type": "statement:functioncall"
  }, {
    "id": 719,
    "text": "local idx=0",
    "type": "statement:localassign"
  }, {
    "id": 720,
    "text": "for i=1,in_count do\r\n\t\t\tidx = idx + 1\r\n\t\t\trec[idx] = inputs[i]\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 721,
    "text": "rec[idx] = inputs[i]",
    "type": "statement:assign"
  }, {
    "id": 722,
    "text": "for i=1,out_count do\r\n\t\t\tidx = idx + 1\r\n\t\t\trec[idx] = outputs[i]\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 723,
    "text": "rec[idx] = outputs[i]",
    "type": "statement:assign"
  }, {
    "id": 724,
    "text": "for i=1,#misc do\r\n\t\t\tidx = idx + 1\r\n\t\t\trec[idx] = misc[i]\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 725,
    "text": "rec[idx] = misc[i]",
    "type": "statement:assign"
  }, {
    "id": 726,
    "text": "local ffi_params = {}",
    "type": "statement:localassign"
  }, {
    "id": 727,
    "text": "for i=1,in_count do\r\n\t\t\tlocal name = inputs[i].name\r\n\t\t\tif name ~= 'this' then\r\n\t\t\t\tffi_params[i] = '${' .. inputs[i].name .. '}'\r\n\t\t\telse\r\n\t\t\t\tffi_params[i] = 'self'\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 728,
    "text": "local name = inputs[i].name",
    "type": "statement:localassign"
  }, {
    "id": 729,
    "text": "if name ~= 'this' then\r\n\t\t\t\tffi_params[i] = '${' .. inputs[i].name .. '}'\r\n\t\t\telse\r\n\t\t\t\tffi_params[i] = 'self'\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 730,
    "text": "ffi_params[i] = '${' .. inputs[i].name .. '}'",
    "type": "statement:assign"
  }, {
    "id": 731,
    "text": "ffi_params[i] = 'self'",
    "type": "statement:assign"
  }, {
    "id": 732,
    "text": "rec.ffi_params = tconcat(ffi_params, ', ')",
    "type": "statement:assign"
  }, {
    "id": 733,
    "text": "require(\"native_objects.lang_\" .. gen_lang)",
    "type": "statement:functioncall"
  }, {
    "id": 734,
    "text": "process_records{\r\n\tvar_out = function(self, rec, parent)\r\n\t\tlocal var_type = rec.c_type_rec\r\n\t\tif var_type._is_error_code then\r\n\t\t\tassert(parent._has_error_code == nil,\r\n\t\t\t\t\"A function/method can only have one var_out with type error_code.\")\r\n\t\t\t-- mark the function as having an error code.\r\n\t\t\tparent._has_error_code = rec\r\n\t\telseif var_type.error_on_null then\r\n\t\t\t-- if this variable is null then push a nil and error message.\r\n\t\t\trec.is_error_on_null = true\r\n\t\tend\r\n\tend,\r\n\t}",
    "type": "statement:functioncall"
  }, {
    "id": 735,
    "text": "local var_type = rec.c_type_rec",
    "type": "statement:localassign"
  }, {
    "id": 736,
    "text": "if var_type._is_error_code then\r\n\t\t\tassert(parent._has_error_code == nil,\r\n\t\t\t\t\"A function/method can only have one var_out with type error_code.\")\r\n\t\t\t-- mark the function as having an error code.\r\n\t\t\tparent._has_error_code = rec\r\n\t\telseif var_type.error_on_null then\r\n\t\t\t-- if this variable is null then push a nil and error message.\r\n\t\t\trec.is_error_on_null = true\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 737,
    "text": "assert(parent._has_error_code == nil,\r\n\t\t\t\t\"A function/method can only have one var_out with type error_code.\")",
    "type": "statement:functioncall"
  }, {
    "id": 738,
    "text": "parent._has_error_code = rec",
    "type": "statement:assign"
  }, {
    "id": 739,
    "text": "rec.is_error_on_null = true",
    "type": "statement:assign"
  }, {
    "id": 740,
    "text": "print\"============ generate api bindings =================\"",
    "type": "statement:functioncall"
  }, {
    "id": 741,
    "text": "if gen_module ~= \"null\" then\r\n\t\trequire(\"native_objects.gen_\" .. gen_module)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 742,
    "text": "require(\"native_objects.gen_\" .. gen_module)",
    "type": "statement:functioncall"
  }, {
    "id": 743,
    "text": "close_outfiles()",
    "type": "statement:functioncall"
  }, {
    "id": 744,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 745,
    "text": "function rec:add_variable(var, name)\r\n\t\t\tname = name or var.name\r\n\t\t\tlocal old_var = self.var_map[name]\r\n\t\t\tassert(old_var == nil or old_var == var,\r\n\t\t\t\t\"duplicate variable \" .. name .. \" in \" .. self.name)\r\n\t\t\t-- add this variable to parent\r\n\t\t\tself.var_map[name] = var\r\n\t\tend",
    "type": "function"
  }, {
    "id": 746,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 747,
    "text": "function rec:add_variable(var, name)\r\n\t\t\tname = name or var.name\r\n\t\t\tlocal old_var = self.var_map[name]\r\n\t\t\tassert(old_var == nil or old_var == var,\r\n\t\t\t\t\"duplicate variable \" .. name .. \" in \" .. self.name)\r\n\t\t\t-- add this variable to parent\r\n\t\t\tself.var_map[name] = var\r\n\t\tend",
    "type": "function"
  }, {
    "id": 748,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 749,
    "text": "local function sort_vars(var1, var2)\r\n\t\treturn (var1.idx < var2.idx)\r\n\tend",
    "type": "function"
  }, {
    "id": 750,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 751,
    "text": "function(self, key)\r\n\tlocal _type = rawget(self, \"_type\") -- check for cached type.\r\n\tif _type == nil then\r\n\t\t-- try to resolve c_type dynamically\r\n\t\t_type = real_c_type_resolver(self)\r\n\tend\r\n\tif _type then\r\n\t\treturn _type[key]\r\n\telse\r\n\t\tprint(\"type not resolved yet: \" .. self._c_type)\r\n\tend\r\n\treturn nil\r\nend",
    "type": "function"
  }, {
    "id": 752,
    "text": "local _type = rawget(self, \"_type\")",
    "type": "statement:localassign"
  }, {
    "id": 753,
    "text": "if _type == nil then\r\n\t\t-- try to resolve c_type dynamically\r\n\t\t_type = real_c_type_resolver(self)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 754,
    "text": "_type = real_c_type_resolver(self)",
    "type": "statement:assign"
  }, {
    "id": 755,
    "text": "if _type then\r\n\t\treturn _type[key]\r\n\telse\r\n\t\tprint(\"type not resolved yet: \" .. self._c_type)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 756,
    "text": "print(\"type not resolved yet: \" .. self._c_type)",
    "type": "statement:functioncall"
  }, {
    "id": 757,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 758,
    "text": "function(self, key, value)\r\n\tlocal _type = rawget(self, \"_type\") -- check for cached type.\r\n\tif _type == nil then\r\n\t\t-- try to resolve c_type dynamically\r\n\t\t_type = real_c_type_resolver(self)\r\n\tend\r\n\tif _type then\r\n\t\t_type[key] = value\r\n\telse\r\n\t\tprint(\"type not resolved yet: \" .. self._c_type)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 759,
    "text": "if _type then\r\n\t\t_type[key] = value\r\n\telse\r\n\t\tprint(\"type not resolved yet: \" .. self._c_type)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 760,
    "text": "_type[key] = value",
    "type": "statement:assign"
  }, {
    "id": 761,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 762,
    "text": "function(self)\r\n\tlocal _type = rawget(self, \"_type\") -- check for cached type.\r\n\tif _type == nil then\r\n\t\t-- try to resolve c_type dynamically\r\n\t\t_type = real_c_type_resolver(self)\r\n\tend\r\n\tif _type then\r\n\t\treturn #_type\r\n\telse\r\n\t\terror(\"type not resolved yet: \" .. self._c_type)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 763,
    "text": "if _type then\r\n\t\treturn #_type\r\n\telse\r\n\t\terror(\"type not resolved yet: \" .. self._c_type)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 764,
    "text": "error(\"type not resolved yet: \" .. self._c_type)",
    "type": "statement:functioncall"
  }, {
    "id": 765,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 766,
    "text": "function(op1, op2)\r\n\treturn op1._c_type == op2._c_type\r\nend",
    "type": "function"
  }, {
    "id": 767,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 768,
    "text": "function (default)\r\n\t-- make it an basetype record.\r\n\trec = ctype(name,{},\"basetype\")\r\n\t-- lang type\r\n\trec.lang_type = lang_type\r\n\t-- default value\r\n\trec.default = default\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 769,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 770,
    "text": "function (lang_type)\r\n\treturn function (default)\r\n\t-- make it an basetype record.\r\n\trec = ctype(name,{},\"basetype\")\r\n\t-- lang type\r\n\trec.lang_type = lang_type\r\n\t-- default value\r\n\trec.default = default\r\n\treturn rec\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 771,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 772,
    "text": "function (rec)\r\n\t-- make error_code record\r\n\tctype(name,rec,\"error_code\")\r\n\trec.c_type = c_type\r\n\t-- mark this type as an error code.\r\n\trec._is_error_code = true\r\nend",
    "type": "function"
  }, {
    "id": 773,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 774,
    "text": "function (c_type)\r\n\treturn function (rec)\r\n\t-- make error_code record\r\n\tctype(name,rec,\"error_code\")\r\n\trec.c_type = c_type\r\n\t-- mark this type as an error code.\r\n\trec._is_error_code = true\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 775,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 776,
    "text": "function (rec)\r\n\t-- make it an object record.\r\n\tuserdata_type = rec.userdata_type or 'generic'\r\n\trec.userdata_type = userdata_type\r\n\trec.has_obj_flags = true\r\n\tif userdata_type == 'generic' or userdata_type == 'embed' or userdata_type == 'simple ptr' then\r\n\t\tctype(name .. \" *\", rec,\"object\")\r\n\t\trec.is_ptr = true\r\n\t\trec.name = name\r\n\t\t-- map the c_type to this record\r\n\t\tnew_c_type(name, rec)\r\n\t\tif userdata_type == 'embed' or userdata_type == 'simple ptr' then\r\n\t\t\trec.no_weak_ref = true\r\n\t\t\trec.has_obj_flags = false\r\n\t\tend\r\n\telse\r\n\t\trec.no_weak_ref = true\r\n\t\tif userdata_type == 'simple' or userdata_type == 'simple ptr' then\r\n\t\t\trec.has_obj_flags = false\r\n\t\tend\r\n\t\tctype(name, rec, \"object\")\r\n\tend\r\n\t-- check object type flags.\r\n\tif rec.no_weak_ref == nil then\r\n\t\trec.no_weak_ref = false\r\n\tend\r\n\t-- check if this type generates errors on NULLs\r\n\tif rec.error_on_null then\r\n\t\t-- create 'is_error_check' code\r\n\t\trec.is_error_check = function(rec)\r\n\t\t\treturn \"(NULL == ${\" .. rec.name .. \"})\"\r\n\t\tend\r\n\t\trec.ffi_is_error_check = function(rec)\r\n\t\t\treturn \"(nil == ${\" .. rec.name .. \"})\"\r\n\t\tend\r\n\tend\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 777,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 778,
    "text": "function (rec)\r\n\trec = object(name)(rec)\r\n\trec.register_as_submodule = true\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 779,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 780,
    "text": "function (rec)\r\n\trec = object(name)(rec)\r\n\trec.is_package = true\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 781,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 782,
    "text": "function (rec)\r\n\trec = object(name)(rec)\r\n\trec.is_package = true\r\n\trec.is_meta = true\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 783,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 784,
    "text": "function (rec)\r\n\trec = make_record(rec, \"extends\")\r\n\t-- base object name\r\n\trec.name = name\r\n\t-- check for cast_type\r\n\tif rec.cast_type == nil then\r\n\t\trec.cast_offset = 0\r\n\t\trec.cast_type = 'direct'\r\n\tend\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 785,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 786,
    "text": "function (rec)\r\n\trec = make_record(rec, \"option\")\r\n\t-- option name.\r\n\trec.name = name\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 787,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 788,
    "text": "function (rec)\r\n\tlocal access = rec and rec[1] or nil\r\n\trec = make_record(rec, \"field\")\r\n\t-- field's c_type\r\n\trec.c_type = c_type\r\n\t-- field's name\r\n\trec.name = name\r\n\t-- access permissions\r\n\tif type(access) == 'string' then\r\n\t\taccess = access:lower()\r\n\t\t-- check for write access\r\n\t\tif access == 'rw' then\r\n\t\t\trec.is_writable = true\r\n\t\telseif access == 'ro' then\r\n\t\t\trec.is_writable = false\r\n\t\telse\r\n\t\t\trec.is_writable = false\r\n\t\tend\r\n\telseif rec.is_writable == nil then\r\n\t\trec.is_writable = false\r\n\tend\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 789,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 790,
    "text": "function (name)\r\n\treturn function (rec)\r\n\tlocal access = rec and rec[1] or nil\r\n\trec = make_record(rec, \"field\")\r\n\t-- field's c_type\r\n\trec.c_type = c_type\r\n\t-- field's name\r\n\trec.name = name\r\n\t-- access permissions\r\n\tif type(access) == 'string' then\r\n\t\taccess = access:lower()\r\n\t\t-- check for write access\r\n\t\tif access == 'rw' then\r\n\t\t\trec.is_writable = true\r\n\t\telseif access == 'ro' then\r\n\t\t\trec.is_writable = false\r\n\t\telse\r\n\t\t\trec.is_writable = false\r\n\t\tend\r\n\telseif rec.is_writable == nil then\r\n\t\trec.is_writable = false\r\n\tend\r\n\treturn rec\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 791,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 792,
    "text": "function (rec)\r\n\tlocal value = rec[1]\r\n\trec = make_record(rec, \"const\")\r\n\t-- field's name\r\n\trec.name = name\r\n\t-- field's value\r\n\trec.value = value\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 793,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 794,
    "text": "function (rec)\r\n\tlocal value = rec[1]\r\n\trec = make_record(rec, \"const\")\r\n\t-- this is a constant definition.\r\n\trec.is_define = true\r\n\t-- default to 'number' type.\r\n\trec.vtype = rec.vtype or 'number'\r\n\t-- field's name\r\n\trec.name = name\r\n\t-- field's value\r\n\trec.value = value\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 795,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 796,
    "text": "function(values)\r\n\t\t\treturn package(name)({\r\n\t\t\t\tmap_constants_bidirectional = true,\r\n\t\t\t\texport_definitions(values)\r\n\t\t\t})\r\n\t\tend",
    "type": "function"
  }, {
    "id": 797,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 798,
    "text": "function (rec)\r\n\trec = make_record(rec, \"c_function\")\r\n\t-- function name.\r\n\trec.name = name\r\n\t-- function type (normal function or object method)\r\n\trec.f_type = \"function\"\r\n\t-- variable lookup\r\n\trec.get_var = function(self, name)\r\n\t\tfor i=1,#self do\r\n\t\t\tlocal var = self[i]\r\n\t\t\tif is_record(var) and var.name == name then\r\n\t\t\t\treturn var\r\n\t\t\tend\r\n\t\tend\r\n\t\treturn nil\r\n\tend\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 799,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 800,
    "text": "function (rec)\r\n\t-- handle the same way as normal functions\r\n\trec = c_function(name)(rec)\r\n\t-- mark this function as a method.\r\n\trec._is_method = true\r\n\t-- if the method is a destructor, then also make it a meta method\r\n\t-- to be used for garbagecollection\r\n\tif rec.is_destructor then\r\n\t\trec._is_meta_method = true\r\n\tend\r\n\trec.f_type = \"method\"\r\n\t-- check if method is a meta-method.\r\n\trec._is_meta_method = meta_methods[rec.name]\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 801,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 802,
    "text": "function (rec)\r\n\tif type(name) == 'table' then rec = name; name = 'new' end\r\n\t-- handle the same way as normal method\r\n\trec = method(name)(rec)\r\n\t-- mark this method as the constructor\r\n\trec.is_constructor = true\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 803,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 804,
    "text": "function (rec)\r\n\tif type(name) == 'table' then\r\n\t\trec = name\r\n\t\trec._is_hidden = true\r\n\t\tname = 'delete'\r\n\tend\r\n\t-- handle the same way as normal method\r\n\trec = method(name)(rec)\r\n\t-- mark this method as the destructor\r\n\trec.is_destructor = true\r\n\t-- also register it as a metamethod for garbagecollection.\r\n\trec._is_meta_method = true\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 805,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 806,
    "text": "function(value)\r\n\trec = make_record({}, \"define\")\r\n\trec.name = name\r\n\trec.value = value\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 807,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 808,
    "text": "function(src)\r\n\tif src == nil then\r\n\t\tsrc = part\r\n\t\tpart = nil\r\n\tend\r\n\trec = make_record({}, \"c_source\")\r\n\trec.part = part or \"src\"\r\n\trec.src = src\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 809,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 810,
    "text": "function (params)\r\n\tlocal rec = make_record({}, \"c_call\")\r\n\t-- parse return c_type.\r\n\trec.ret = return_type or \"void\"\r\n\t-- parse c function to call.\r\n\trec.cfunc = cfunc\r\n\t-- parse params\r\n\trec.params = params\r\n\tif rec.params == nil then rec.params = {} end\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 811,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 812,
    "text": "function (cfunc)\r\n\treturn function (params)\r\n\tlocal rec = make_record({}, \"c_call\")\r\n\t-- parse return c_type.\r\n\trec.ret = return_type or \"void\"\r\n\t-- parse c function to call.\r\n\trec.cfunc = cfunc\r\n\t-- parse params\r\n\trec.params = params\r\n\tif rec.params == nil then rec.params = {} end\r\n\treturn rec\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 813,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 814,
    "text": "function (params)\r\n\tlocal rec = c_call(ret)(cfunc)(params)\r\n\trec.ffi_need_wrapper = \"c_wrap\"\r\n\trec.is_macro_call = true\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 815,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 816,
    "text": "function (cfunc)\r\n\treturn function (params)\r\n\tlocal rec = c_call(ret)(cfunc)(params)\r\n\trec.ffi_need_wrapper = \"c_wrap\"\r\n\trec.is_macro_call = true\r\n\treturn rec\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 817,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 818,
    "text": "function (params)\r\n\tlocal rec = c_call(ret)(cfunc)(params)\r\n\trec.ffi_need_wrapper = \"c_wrap\"\r\n\trec.is_inline_call = true\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 819,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 820,
    "text": "function (cfunc)\r\n\treturn function (params)\r\n\tlocal rec = c_call(ret)(cfunc)(params)\r\n\trec.ffi_need_wrapper = \"c_wrap\"\r\n\trec.is_inline_call = true\r\n\treturn rec\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 821,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 822,
    "text": "function (params)\r\n\tlocal rec = c_call(ret)(cfunc)(params)\r\n\trec.ffi_need_wrapper = \"c_export\"\r\n\trec.is_export_call = true\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 823,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 824,
    "text": "function (cfunc)\r\n\treturn function (params)\r\n\tlocal rec = c_call(ret)(cfunc)(params)\r\n\trec.ffi_need_wrapper = \"c_export\"\r\n\trec.is_export_call = true\r\n\treturn rec\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 825,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 826,
    "text": "function (params)\r\n\tlocal rec = c_call(ret)(cfunc)(params)\r\n\trec.is_method_call = true\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 827,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 828,
    "text": "function (cfunc)\r\n\treturn function (params)\r\n\tlocal rec = c_call(ret)(cfunc)(params)\r\n\trec.is_method_call = true\r\n\treturn rec\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 829,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 830,
    "text": "function (params)\r\n\tlocal rec = c_method_call(ret)(cfunc)(params)\r\n\trec.ffi_need_wrapper = \"c_export\"\r\n\trec.is_export_call = true\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 831,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 832,
    "text": "function (cfunc)\r\n\treturn function (params)\r\n\tlocal rec = c_method_call(ret)(cfunc)(params)\r\n\trec.ffi_need_wrapper = \"c_export\"\r\n\trec.is_export_call = true\r\n\treturn rec\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 833,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 834,
    "text": "function (params)\r\n\tlocal rec = c_method_call(ret)(cfunc)(params)\r\n\trec.ffi_need_wrapper = \"c_wrap\"\r\n\trec.is_macro_call = true\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 835,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 836,
    "text": "function (cfunc)\r\n\treturn function (params)\r\n\tlocal rec = c_method_call(ret)(cfunc)(params)\r\n\trec.ffi_need_wrapper = \"c_wrap\"\r\n\trec.is_macro_call = true\r\n\treturn rec\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 837,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 838,
    "text": "function (params)\r\n\trec = make_record({}, \"callback_type\")\r\n\trec.is_callback = true\r\n\t-- function type name.\r\n\trec.name = name\r\n\t-- c_type for callback.\r\n\trec.c_type = name\r\n\t-- parse return c_type.\r\n\trec.ret = return_type or \"void\"\r\n\t-- parse params\r\n\tif params == nil then params = {} end\r\n\trec.params = params\r\n\t-- add new types\r\n\tnew_c_type(rec.c_type, rec)\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 839,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 840,
    "text": "function (return_type)\r\n\treturn function (params)\r\n\trec = make_record({}, \"callback_type\")\r\n\trec.is_callback = true\r\n\t-- function type name.\r\n\trec.name = name\r\n\t-- c_type for callback.\r\n\trec.c_type = name\r\n\t-- parse return c_type.\r\n\trec.ret = return_type or \"void\"\r\n\t-- parse params\r\n\tif params == nil then params = {} end\r\n\trec.params = params\r\n\t-- add new types\r\n\tnew_c_type(rec.c_type, rec)\r\n\treturn rec\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 841,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 842,
    "text": "function (state_var)\r\n\treturn callback({c_type, name, state_var})\r\nend",
    "type": "function"
  }, {
    "id": 843,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 844,
    "text": "function (name)\r\n\treturn function (state_var)\r\n\treturn callback({c_type, name, state_var})\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 845,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 846,
    "text": "function (name)\r\n\trec = make_record({}, \"callback_func\")\r\n\trec.is_ref = true\r\n\trec.ref_field = name\r\n\t-- c_type for callback.\r\n\trec.c_type = c_type\r\n\t-- callback variable's name\r\n\trec.name = name\r\n\t-- callback function name.\r\n\trec.c_func_name = c_type .. \"_\" .. name .. \"_cb\"\r\n\tresolve_rec(rec)\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 847,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 848,
    "text": "function (rec)\r\n\trec = make_record(rec, \"c_module\")\r\n\t-- c_module name.\r\n\trec.name = name\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 849,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 850,
    "text": "function (rec)\r\n\t\trec.name = name\r\n\t\trec = make_record(rec, \"lang\")\r\n\t\t-- only keep records for current language.\r\n\t\tif rec.name ~= gen_lang then\r\n\t\t\t-- delete this record and it sub-records\r\n\t\t\trec:delete_record()\r\n\t\tend\r\n\t\treturn rec\r\n\tend",
    "type": "function"
  }, {
    "id": 851,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 852,
    "text": "function(src)\r\n\tif src == nil then\r\n\t\tsrc = part\r\n\t\tpart = nil\r\n\tend\r\n\trec = make_record({}, \"ffi_source\")\r\n\trec.part = part or \"ffi_src\"\r\n\trec.src = src\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 853,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 854,
    "text": "function (global)\r\n\t\tif global == nil then global = false end\r\n\t\tglobal = tostring(global)\r\n\t\tlocal src = 'C = ffi_load(\"' .. name .. '\",' .. global .. ')\\n'\r\n\t\treturn ffi_source(\"ffi_src\")(src)\r\n\tend",
    "type": "function"
  }, {
    "id": 855,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 856,
    "text": "function (name)\r\n\trec = make_record({}, \"ffi_export\")\r\n\t-- parse c_type.\r\n\trec.c_type = c_type\r\n\t-- parse name of symbol to export\r\n\trec.name = name\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 857,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 858,
    "text": "function (params)\r\n\trec = make_record({}, \"ffi_export_function\")\r\n\t-- parse return c_type.\r\n\trec.ret = return_type or \"void\"\r\n\t-- parse c function to call.\r\n\trec.name = name\r\n\t-- parse params\r\n\trec.params = params\r\n\tif rec.params == nil then rec.params = {} end\r\n\treturn rec\r\nend",
    "type": "function"
  }, {
    "id": 859,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 860,
    "text": "function (name)\r\n\treturn function (params)\r\n\trec = make_record({}, \"ffi_export_function\")\r\n\t-- parse return c_type.\r\n\trec.ret = return_type or \"void\"\r\n\t-- parse c function to call.\r\n\trec.name = name\r\n\t-- parse params\r\n\trec.params = params\r\n\tif rec.params == nil then rec.params = {} end\r\n\treturn rec\r\nend\r\nend",
    "type": "function"
  }, {
    "id": 861,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 862,
    "text": "function(self, rec, parent)\r\n\t\t-- only keep records for current language.\r\n\t\tif rec.name == gen_lang then\r\n\t\t\t-- keep records by moving them up to the parent\r\n\t\t\tmove_recs(parent, rec)\r\n\t\telse\r\n\t\t\t-- delete this record and it sub-records\r\n\t\t\trec:delete_record()\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 863,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 864,
    "text": "function(self, rec, parent)\r\n\t\t-- re-map c_types\r\n\t\tnew_c_type(rec.name, rec)\r\n\t\tnew_c_type(rec.c_type, rec)\r\n\tend",
    "type": "function"
  }, {
    "id": 865,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 866,
    "text": "function(self, rec, parent)\r\n\t\tfor i=1,#rec do\r\n\t\t\tlocal file = assert(io.open(rec[i], \"r\"))\r\n\t\t\tparent:add_record(ffi_source(rec.part)(file:read(\"*a\")))\r\n\t\t\tfile:close()\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 867,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 868,
    "text": "function(self, rec, parent)\r\n\t\tfor key,value in pairs(rec.values) do\r\n\t\t\tparent:add_record(const(key)({ value }))\r\n\t\tend\r\n\t\trec._rec_type = nil\r\n\tend",
    "type": "function"
  }, {
    "id": 869,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 870,
    "text": "function(self, rec, parent)\r\n\t\tlocal values = rec.values\r\n\t\t-- export list of definitions as-is (i.e. no renaming).\r\n\t\tfor i=1,#values do\r\n\t\t\tlocal name = values[i]\r\n\t\t\tparent:add_record(const_def(name)({ name }))\r\n\t\t\tvalues[i] = nil\r\n\t\tend\r\n\t\t-- export renamed definitions.\r\n\t\tfor key, value in pairs(values) do\r\n\t\t\tparent:add_record(const_def(key)({ value }))\r\n\t\tend\r\n\t\trec._rec_type = nil\r\n\tend",
    "type": "function"
  }, {
    "id": 871,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 872,
    "text": "function(self, rec, parent)\r\n\t\t-- re-map c_types\r\n\t\tif rec._is_c_type ~= nil then\r\n\t\t\tnew_c_type(rec.c_type, rec)\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 873,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 874,
    "text": "function(self, rec, parent)\r\n\t\tlocal name = rec.name\r\n\t\tlocal c_type = rec.c_type\r\n\t\tparent:add_record(method(name) {\r\n\t\t\tvar_out{c_type , \"field\"},\r\n\t\t\tc_source 'src' {\"\\t${field} = ${this}->\", name,\";\\n\" },\r\n\t\t})\r\n\t\tif rec.is_writable then\r\n\t\t\tparent:add_record(method(\"set_\" .. name) {\r\n\t\t\t\tvar_in{c_type , \"field\"},\r\n\t\t\t\tc_source 'src' {\"\\t${this}->\", name,\" = ${field};\\n\" },\r\n\t\t\t})\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 875,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 876,
    "text": "function(self, rec, parent)\r\n\t\tif rec._is_method and not rec.override_this then\r\n\t\t\tlocal var\r\n\t\t\tif parent.is_meta then\r\n\t\t\t\tvar = var_in{ \"<any>\", \"this\", is_this = true }\r\n\t\t\telseif rec.is_constructor then\r\n\t\t\t\tvar = var_out{ parent.c_type, \"this\", is_this = true }\r\n\t\t\t\t-- make the first constructor the default.\r\n\t\t\t\tif not parent.default_constructor then\r\n\t\t\t\t\tparent.default_constructor = rec\r\n\t\t\t\t\trec.is_default_constructor = true\r\n\t\t\t\tend\r\n\t\t\telse\r\n\t\t\t\tvar = var_in{ parent.c_type, \"this\", is_this = true }\r\n\t\t\tend\r\n\t\t\trec:insert_record(var, 1)\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 877,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 878,
    "text": "function(self, rec, parent)\r\n\t\t-- is variable a callback type?\r\n\t\tif not rec.is_callback then return end\r\n\t\t-- get grand-parent container\r\n\t\tlocal container = parent._parent\r\n\t\t-- create callback_state instance.\r\n\t\tlocal cb_state\r\n\t\tif rec.state_var == 'this' then\r\n\t\t\tlocal wrap_type = container.c_type\r\n\t\t\tcb_state = callback_state(wrap_type)\r\n\t\t\t-- wrap 'this' object.\r\n\t\t\tcontainer.is_wrapped = true\r\n\t\t\tcontainer.wrapper_obj = cb_state\r\n\t\telse\r\n\t\t\tassert(\"un-supported callback state var: \" .. rec.state_var)\r\n\t\tend\r\n\t\tcontainer:insert_record(cb_state, 1)\r\n\t\t-- create callback_func instance.\r\n\t\tlocal cb_func = callback_func(rec.c_type)(rec.name)\r\n\t\t-- move sub-records from 'var_in' callback record into 'callback_func'\r\n\t\tlocal cb=rec\r\n\t\tfor i=1,#cb do\r\n\t\t\tlocal rec = cb[i]\r\n\t\t\tif is_record(rec) and rec._rec_type ~= \"ignore\" then\r\n\t\t\t\tcb:remove_record(rec) -- remove from 'var_in'\r\n\t\t\t\tcb_func:add_record(rec) -- add to 'callback_func'\r\n\t\t\tend\r\n\t\tend\r\n\t\tcb_state:add_record(cb_func)\r\n\t\trec.cb_func = cb_func\r\n\t\trec.c_type_rec = cb_func\r\n\tend",
    "type": "function"
  }, {
    "id": 879,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 880,
    "text": "function(self, rec, parent)\r\n\t\trec._obj_id = self._obj_cnt\r\n\t\tself._obj_cnt = self._obj_cnt + 1\r\n\tend",
    "type": "function"
  }, {
    "id": 881,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 882,
    "text": "function(self, rec, parent)\r\n\t\t-- find base-object record.\r\n\t\tlocal base = resolve_c_type(rec.name)\r\n\t\trec.base = base\r\n\t\t-- add this object to base.\r\n\t\tlocal subs = base.subs\r\n\t\tif subs == nil then\r\n\t\t\tsubs = {}\r\n\t\t\tbase.subs = subs\r\n\t\tend\r\n\t\tsubs[#subs+1] = parent\r\n\tend",
    "type": "function"
  }, {
    "id": 883,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 884,
    "text": "function(self, rec, parent)\r\n\t\tparent.has_dyn_caster = rec\r\n\t\tif rec.caster_type == 'switch' then\r\n\t\t\tfor k,v in pairs(rec.value_map) do\r\n\t\t\t\trec.value_map[k] = resolve_c_type(v)\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 885,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 886,
    "text": "function(self, rec, parent)\r\n\t\tresolve_rec(rec)\r\n\tend",
    "type": "function"
  }, {
    "id": 887,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 888,
    "text": "function(self, rec, parent)\r\n\t\tif not rec.ffi_need_wrapper then\r\n\t\t\t-- normal C call don't need wrapper.\r\n\t\t\treturn\r\n\t\tend\r\n\t\t-- find parent 'object' record.\r\n\t\tlocal object = parent\r\n\t\twhile object._rec_type ~= 'object' and object._rec_type ~= 'c_module' do\r\n\t\t\tobject = object._parent\r\n\t\t\tassert(object, \"Can't find parent 'object' record of 'c_call'\")\r\n\t\tend\r\n\t\tlocal ret_type = rec.ret\r\n\t\tlocal ret = ret_type\r\n\t\t-- convert return type into \"var_out\" if it's not a \"void\" type.\r\n\t\tif ret ~= \"void\" then\r\n\t\t\tif type(ret) ~= 'string' then\r\n\t\t\t\tret_type = ret[1]\r\n\t\t\tend\r\n\t\t\tret = \"  return \"\r\n\t\telse\r\n\t\t\tret_type = \"void\"\r\n\t\t\tret = \"  \"\r\n\t\tend\r\n\t\t-- build C call statement.\r\n\t\tlocal call = {}\r\n\t\tlocal cfunc_name = rec.cfunc\r\n\t\tcall[#call+1] = ret\r\n\t\tcall[#call+1] = cfunc_name\r\n\t\t-- process parameters.\r\n\t\tlocal params = {}\r\n\t\tlocal list = rec.params\r\n\t\tparams[#params+1] = \"(\"\r\n\t\tcall[#call+1] = \"(\"\r\n\t\tif rec.is_method_call then\r\n\t\t\tcall[#call+1] = 'this'\r\n\t\t\tparams[#params+1] = object.c_type .. ' '\r\n\t\t\tparams[#params+1] = 'this'\r\n\t\t\tif #list > 0 then\r\n\t\t\t\tparams[#params+1] = \", \"\r\n\t\t\t\tcall[#call+1] = \", \"\r\n\t\t\tend\r\n\t\tend\r\n\t\tfor i=1,#list,2 do\r\n\t\t\tlocal c_type,name = clean_variable_type_name(list[i], list[i+1])\r\n\t\t\tif i > 1 then\r\n\t\t\t\tparams[#params+1] = \", \"\r\n\t\t\t\tcall[#call+1] = \", \"\r\n\t\t\tend\r\n\t\t\t-- append parameter name\r\n\t\t\tcall[#call+1] = name\r\n\t\t\t-- append parameter type & name to cdef\r\n\t\t\tparams[#params+1] = c_type .. ' '\r\n\t\t\tparams[#params+1] = name\r\n\t\tend\r\n\t\tparams[#params+1] = \")\"\r\n\t\tcall[#call+1] = \");\\n\"\r\n\t\t-- convert 'params' to string.\r\n\t\tparams = tconcat(params)\r\n\t\tcall = tconcat(call)\r\n\t\t-- get prefix\r\n\t\tlocal export_prefix = \"\"\r\n\t\tif rec.ffi_need_wrapper == 'c_wrap' then\r\n\t\t\texport_prefix = \"ffi_wrapper_\"\r\n\t\tend\r\n\t\trec.ffi_export_prefix = export_prefix\r\n\t\t-- check for re-definitions or duplicates.\r\n\t\tlocal cdef = ret_type .. \" \" .. export_prefix .. cfunc_name .. params\r\n\t\tlocal old_cdef = ffi_wrappers[cfunc_name]\r\n\t\tif old_cdef == cdef then\r\n\t\t\treturn -- duplicate, don't need to create a new wrapper.\r\n\t\telseif old_cdef then\r\n\t\t\terror(\"Re-definition of FFI wrapper cdef: \" .. cdef)\r\n\t\tend\r\n\t\tffi_wrappers[cfunc_name] = cdef\r\n\t\t-- create wrapper function\r\n\t\tif rec.ffi_need_wrapper == 'c_wrap' then\r\n\t\t\tobject:add_record(c_source(\"src\")({\r\n\t\t\t\"\\n/* FFI wrapper for inline/macro call */\\n\",\r\n\t\t\t\"LUA_NOBJ_API \", cdef, \" {\\n\",\r\n\t\t\tcall,\r\n\t\t\t\"}\\n\",\r\n\t\t\t}))\r\n\t\tend\r\n\t\tobject:add_record(ffi_export_function(ret_type)(export_prefix .. rec.cfunc)(params))\r\n\tend",
    "type": "function"
  }, {
    "id": 889,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 890,
    "text": "function(self, rec, parent)\r\n\t\trec.functions = {}\r\n\t\trec.constants = {}\r\n\t\trec.fields = {}\r\n\t\trec.name_map = {}\r\n\tend",
    "type": "function"
  }, {
    "id": 891,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 892,
    "text": "function(self, rec, parent)\r\n\t\trec.functions = {}\r\n\t\trec.constants = {}\r\n\t\trec.fields = {}\r\n\t\trec.name_map = {}\r\n\t\trec.extends = {}\r\n\tend",
    "type": "function"
  }, {
    "id": 893,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 894,
    "text": "function(self, rec, parent)\r\n\t\trec.callbacks = {}\r\n\tend",
    "type": "function"
  }, {
    "id": 895,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 896,
    "text": "function(self, rec, parent)\r\n\t\t-- add base-class to parent's base list.\r\n\t\tparent.extends[rec.name] = rec\r\n\tend",
    "type": "function"
  }, {
    "id": 897,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 898,
    "text": "function(self, rec, parent)\r\n\t\t-- add to name map to reserve the name.\r\n\t\tassert(parent.name_map[rec.name] == nil)\r\n\t\t--parent.name_map[rec.name] = rec\r\n\t\t-- add field to parent's fields list.\r\n\t\tparent.fields[rec.name] = rec\r\n\tend",
    "type": "function"
  }, {
    "id": 899,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 900,
    "text": "function(self, rec, parent)\r\n\t\t-- add to name map to reserve the name.\r\n\t\tassert(parent.name_map[rec.name] == nil)\r\n\t\tparent.name_map[rec.name] = rec\r\n\t\t-- add constant to parent's constants list.\r\n\t\tparent.constants[rec.name] = rec\r\n\tend",
    "type": "function"
  }, {
    "id": 901,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 902,
    "text": "function(self, rec, parent)\r\n\t\tlocal c_name = parent.name .. '__' .. rec.name\r\n\t\tif rec._is_method then\r\n\t\t\tassert(not parent.is_package or parent.is_meta,\r\n\t\t\t\t\"Package's can't have methods: package=\" .. parent.name .. \", method=\" .. rec.name)\r\n\t\t\tc_name = c_name .. '__meth'\r\n\t\telse\r\n\t\t\tc_name = c_name .. '__func'\r\n\t\tend\r\n\t\trec.c_name = c_name\r\n\t\t-- add to name map to reserve the name.\r\n\t\tassert(parent.name_map[rec.name] == nil,\r\n\t\t\t\"duplicate functions \" .. rec.name .. \" in \" .. parent.name)\r\n\t\tparent.name_map[rec.name] = rec\r\n\t\t-- add function to parent's function list.\r\n\t\tparent.functions[rec.name] = rec\r\n\t\t-- prepare wrapped new/delete methods\r\n\t\tif rec._is_method and parent.is_wrapped then\r\n\t\t\tif rec.is_destructor or rec.is_constructor then\r\n\t\t\t\trec.is_wrapper = true\r\n\t\t\t\trec.wrapper_obj = parent.wrapper_obj\r\n\t\t\tend\r\n\t\tend\r\n\t\t-- map names to in/out variables\r\n\t\trec.var_map = {}\r\n\t\tfunction rec:add_variable(var, name)\r\n\t\t\tname = name or var.name\r\n\t\t\tlocal old_var = self.var_map[name]\r\n\t\t\tassert(old_var == nil or old_var == var,\r\n\t\t\t\t\"duplicate variable \" .. name .. \" in \" .. self.name)\r\n\t\t\t-- add this variable to parent\r\n\t\t\tself.var_map[name] = var\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 903,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 904,
    "text": "function(self, rec, parent)\r\n\t\tlocal func_type = rec.c_type_rec\r\n\t\t-- add callback to parent's callback list.\r\n\t\tparent.callbacks[rec.ref_field] = rec\r\n\t\tlocal src={\"static \"}\r\n\t\tlocal typedef={\"typedef \"}\r\n\t\t-- convert return type into \"cb_out\" if it's not a \"void\" type.\r\n\t\tlocal ret = func_type.ret\r\n\t\tif ret ~= \"void\" then\r\n\t\t\trec.ret_out = cb_out{ ret, \"ret\" }\r\n\t\t\trec:insert_record(rec.ret_out, 1)\r\n\t\tend\r\n\t\tsrc[#src+1] = ret .. \" \"\r\n\t\ttypedef[#typedef+1] = ret .. \" \"\r\n\t\t-- append c function to call.\r\n\t\trec.c_func_name = parent.base_type .. \"_\".. rec.ref_field .. \"_cb\"\r\n\t\tsrc[#src+1] = rec.c_func_name .. \"(\"\r\n\t\ttypedef[#typedef+1] = \"(*\" .. rec.c_type .. \")(\"\r\n\t\t-- convert params to \"cb_in\" records.\r\n\t\tlocal params = func_type.params\r\n\t\tlocal vars = {}\r\n\t\tlocal idx=1\r\n\t\tfor i=1,#params,2 do\r\n\t\t\tlocal c_type = params[i]\r\n\t\t\tlocal name = params[i + 1]\r\n\t\t\tif i > 1 then\r\n\t\t\t\tsrc[#src+1] = \", \"\r\n\t\t\t\ttypedef[#typedef+1] = \", \"\r\n\t\t\tend\r\n\t\t\t-- add cb_in to this rec.\r\n\t\t\tlocal v_in = cb_in{ c_type, name}\r\n\t\t\trec:insert_record(v_in, idx)\r\n\t\t\tidx = idx + 1\r\n\t\t\tsrc[#src+1] = c_type .. \" ${\" .. v_in.name .. \"}\"\r\n\t\t\ttypedef[#typedef+1] = c_type .. \" \" .. v_in.name\r\n\t\t\tvars[#vars+1] = \"${\" .. v_in.name .. \"}\"\r\n\t\tend\r\n\t\tsrc[#src+1] = \")\"\r\n\t\ttypedef[#typedef+1] = \");\"\r\n\t\t-- save callback func decl.\r\n\t\trec.c_func_decl = table.concat(src)\r\n\t\trec.c_func_typedef = table.concat(typedef)\r\n\t\trec.param_vars = table.concat(vars, ', ')\r\n\t\t-- map names to in/out variables\r\n\t\trec.var_map = {}\r\n\t\tfunction rec:add_variable(var, name)\r\n\t\t\tname = name or var.name\r\n\t\t\tlocal old_var = self.var_map[name]\r\n\t\t\tassert(old_var == nil or old_var == var,\r\n\t\t\t\t\"duplicate variable \" .. name .. \" in \" .. self.name)\r\n\t\t\t-- add this variable to parent\r\n\t\t\tself.var_map[name] = var\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 905,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 906,
    "text": "function(self, rec, parent)\r\n\t\tparent:add_variable(rec)\r\n\tend",
    "type": "function"
  }, {
    "id": 907,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 908,
    "text": "function(self, rec, parent)\r\n\t\tparent:add_variable(rec)\r\n\tend",
    "type": "function"
  }, {
    "id": 909,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 910,
    "text": "function(self, rec, parent)\r\n\t\tparent:add_variable(rec)\r\n\tend",
    "type": "function"
  }, {
    "id": 911,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 912,
    "text": "function(self, rec, parent)\r\n\t\tparent:add_variable(rec)\r\n\tend",
    "type": "function"
  }, {
    "id": 913,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 914,
    "text": "function(self, rec, parent)\r\n\t\tlocal src={}\r\n\t\tlocal ffi_cdef={}\r\n\t\tlocal ffi_src={}\r\n\t\tlocal ret_type = rec.ret\r\n\t\tlocal ret = ret_type\r\n\t\t-- convert return type into \"var_out\" if it's not a \"void\" type.\r\n\t\tif ret ~= \"void\" then\r\n\t\t\tlocal is_this = false\r\n\t\t\t-- check if return value is for the \"this\" value in a constructor.\r\n\t\t\tif parent.is_constructor then\r\n\t\t\t\tlocal this_var = parent.var_map.this\r\n\t\t\t\tif this_var and ret == this_var.c_type then\r\n\t\t\t\t\tret_type = this_var.c_type\r\n\t\t\t\t\tis_this = true\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tif is_this then\r\n\t\t\t\tret = \"  ${this} = \"\r\n\t\t\telse\r\n\t\t\t\tlocal rc\r\n\t\t\t\tif type(ret) == 'string' then\r\n\t\t\t\t\trc = var_out{ ret, \"rc_\" .. rec.cfunc }\r\n\t\t\t\telse\r\n\t\t\t\t\trc = var_out(ret)\r\n\t\t\t\tend\r\n\t\t\t\tret_type = rc.c_type\r\n\t\t\t\tif rc.is_length_ref then\r\n\t\t\t\t\tret = \"  ${\" .. rc.name .. \"_len} = \"\r\n\t\t\t\t\t-- look for related 'var_out'.\r\n\t\t\t\t\tlocal rc_val = parent.var_map[rc.name]\r\n\t\t\t\t\tif rc_val then\r\n\t\t\t\t\t\trc_val.has_length = true\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\t-- related 'var_out' not processed yet.\r\n\t\t\t\t\t\t-- add place-holder\r\n\t\t\t\t\t\tparent.var_map[rc.name] = rc\r\n\t\t\t\t\tend\r\n\t\t\t\telse\r\n\t\t\t\t\tret = \"  ${\" .. rc.name .. \"} = \"\r\n\t\t\t\t\t-- look for related length reference.\r\n\t\t\t\t\tlocal rc_len = parent.var_map[rc.name]\r\n\t\t\t\t\tif rc_len and rc_len.is_length_ref then\r\n\t\t\t\t\t\t-- we have a length.\r\n\t\t\t\t\t\trc.has_length = true\r\n\t\t\t\t\t\t-- remove length var place-holder\r\n\t\t\t\t\t\tparent.var_map[rc.name] = nil\r\n\t\t\t\t\tend\r\n\t\t\t\t\t-- register var_out variable.\r\n\t\t\t\t\tparent:add_variable(rc)\r\n\t\t\t\t\t-- add var_out record to parent\r\n\t\t\t\t\tparent:add_record(rc)\r\n\t\t\t\tend\r\n\t\t\t\t-- check for dereference.\r\n\t\t\t\tif rc.wrap == '*' then\r\n\t\t\t\t\tret = ret .. '*'\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tret = \"  \"\r\n\t\tend\r\n\t\tsrc[#src+1] = ret\r\n\t\tffi_cdef[#ffi_cdef+1] = ret_type .. \" \"\r\n\t\tffi_src[#ffi_src+1] = ret\r\n\t\t-- append c function to call.\r\n\t\tlocal func_start = rec.cfunc .. \"(\"\r\n\t\tsrc[#src+1] = func_start\r\n\t\tffi_cdef[#ffi_cdef+1] = func_start\r\n\t\tif rec.ffi_need_wrapper then\r\n\t\t\tffi_src[#ffi_src+1] = \"Cmod.\" .. rec.ffi_export_prefix\r\n\t\telse\r\n\t\t\tffi_src[#ffi_src+1] = \"C.\"\r\n\t\tend\r\n\t\tffi_src[#ffi_src+1] = func_start\r\n\t\t-- convert params to \"var_in\" records.\r\n\t\tlocal params = {}\r\n\t\tlocal list = rec.params\r\n\t\t-- check if this `c_call` is a method call\r\n\t\tif rec.is_method_call then\r\n\t\t\t-- then add `this` parameter to call.\r\n\t\t\tlocal this = parent.var_map.this\r\n\t\t\tassert(this, \"Missing `this` variable for method_call: \" .. rec.cfunc)\r\n\t\t\tthis = var_ref(this)\r\n\t\t\tparent:add_record(this)\r\n\t\t\tparams[1] = this\r\n\t\tend\r\n\t\tfor i=1,#list,2 do\r\n\t\t\tlocal c_type = list[i]\r\n\t\t\tlocal name = list[i+1]\r\n\t\t\tlocal param = var_in{ c_type, name}\r\n\t\t\tname = param.name\r\n\t\t\t-- check if this is a new input variable.\r\n\t\t\tif not parent.var_map[name] then\r\n\t\t\t\t-- add param as a variable.\r\n\t\t\t\tparent:add_variable(param)\r\n\t\t\telse\r\n\t\t\t\t-- variable exists, return this input variable into a reference.\r\n\t\t\t\tlocal ref = var_ref(param)\r\n\t\t\t\t-- invalidate old `var_in` record\r\n\t\t\t\tparam._rec_type = nil\r\n\t\t\t\tparam = ref\r\n\t\t\tend\r\n\t\t\t-- add param rec to parent.\r\n\t\t\tparent:add_record(param)\r\n\t\t\tparams[#params + 1] = param\r\n\t\tend\r\n\t\t-- append all input variables to \"c_source\"\r\n\t\tfor i=1,#params do\r\n\t\t\tlocal var = params[i]\r\n\t\t\tif i > 1 then\r\n\t\t\t\tsrc[#src+1] = \", \"\r\n\t\t\t\tffi_cdef[#ffi_cdef+1] = \", \"\r\n\t\t\t\tffi_src[#ffi_src+1] = \", \"\r\n\t\t\tend\r\n\t\t\tlocal name = var.name\r\n\t\t\tif var.is_length_ref then\r\n\t\t\t\tname = \"${\" .. name .. \"_len}\"\r\n\t\t\telse\r\n\t\t\t\tname = \"${\" .. name .. \"}\"\r\n\t\t\tend\r\n\t\t\t-- append parameter to c source call\r\n\t\t\tif var.wrap then\r\n\t\t\t\tsrc[#src+1] = var.wrap .. \"(\"\r\n\t\t\t\tsrc[#src+1] = name .. \")\"\r\n\t\t\telse\r\n\t\t\t\tsrc[#src+1] = name\r\n\t\t\tend\r\n\t\t\t-- append parameter to ffi source call\r\n\t\t\tffi_src[#ffi_src+1] = name\r\n\t\t\t-- append parameter type & name to ffi cdef record\r\n\t\t\tffi_cdef[#ffi_cdef+1] = var.c_type\r\n\t\t\tif var.wrap == '&' then\r\n\t\t\t\tffi_cdef[#ffi_cdef+1] = '*'\r\n\t\t\tend\r\n\t\tend\r\n\t\tsrc[#src+1] = \");\"\r\n\t\tffi_cdef[#ffi_cdef+1] = \");\\n\"\r\n\t\tffi_src[#ffi_src+1] = \")\"\r\n\t\t-- replace `c_call` with `c_source` record\r\n\t\tlocal idx = parent:replace_record(rec, c_source(\"src\")(src))\r\n\t\t-- convert to string.\r\n\t\tffi_cdef = tconcat(ffi_cdef)\r\n\t\t-- check for ffi cdefs re-definitions\r\n\t\tlocal cfunc = rec.cfunc\r\n\t\tlocal cdef = ffi_cdefs[cfunc]\r\n\t\tif cdef and cdef ~= ffi_cdef then\r\n\t\t\tlocal old_name = cfunc\r\n\t\t\tlocal i = 0\r\n\t\t\t-- search for next \"free\" alias name.\r\n\t\t\trepeat\r\n\t\t\t\ti = i + 1\r\n\t\t\t\tcfunc = old_name .. i\r\n\t\t\t\tcdef = ffi_cdefs[cfunc]\r\n\t\t\t\t-- search until \"free\" alias name, or same definition.\r\n\t\t\tuntil not cdef or cdef == ffi_cdef\r\n\t\t\t-- update ffi src with new alias name.\r\n\t\t\tffi_src = tconcat(ffi_src)\r\n\t\t\tffi_src = ffi_src:gsub(old_name .. '%(', cfunc .. '(')\r\n\t\t\t-- create a cdef \"asm\" alias.\r\n\t\t\tif not cdef then\r\n\t\t\t\tffi_cdef = ffi_cdef:gsub(old_name, cfunc)\r\n\t\t\t\tffi_cdef = ffi_cdef:gsub(\"%);\\n$\", [[) asm(\"]] .. old_name .. [[\");]])\r\n\t\t\tend\r\n\t\tend\r\n\t\tffi_cdefs[cfunc] = ffi_cdef\r\n\t\t-- insert FFI source record.\r\n\t\tif not cdef then\r\n\t\t\t-- function not defined yet.\r\n\t\t\tparent:insert_record(ffi_source(\"ffi_cdef\")(ffi_cdef), idx)\r\n\t\tend\r\n\t\tparent:insert_record(ffi_source(\"ffi_src\")(ffi_src), idx+1)\r\n\tend",
    "type": "function"
  }, {
    "id": 915,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 916,
    "text": "function(self, rec, parent)\r\n\t\tlocal ffi_src={}\r\n\t\t-- load exported symbol\r\n\t\tffi_src[#ffi_src+1] = 'local '\r\n\t\tffi_src[#ffi_src+1] = rec.name\r\n\t\tffi_src[#ffi_src+1] = ' = ffi.new(\"'\r\n\t\tffi_src[#ffi_src+1] = rec.c_type\r\n\t\tffi_src[#ffi_src+1] = ' *\", _priv[\"'\r\n\t\tffi_src[#ffi_src+1] = rec.name\r\n\t\tffi_src[#ffi_src+1] = '\"])\\n'\r\n\t\t-- insert FFI source record.\r\n\t\tlocal idx = parent:find_record(rec)\r\n\t\tparent:insert_record(ffi_source(\"ffi_import\")(ffi_src), idx)\r\n\tend",
    "type": "function"
  }, {
    "id": 917,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 918,
    "text": "function(self, rec, parent)\r\n\t\tlocal inputs = {}\r\n\t\tlocal in_count = 0\r\n\t\tlocal outputs = {}\r\n\t\tlocal out_count = 0\r\n\t\tlocal misc = {}\r\n\t\tlocal max_idx = #rec\r\n\t\t-- seperate sub-records\r\n\t\tfor i=1,max_idx do\r\n\t\t\tlocal var = rec[i]\r\n\t\t\tlocal var_type = var._rec_type\r\n\t\t\tlocal sort = true\r\n\t\t\tlocal list\r\n\t\t\tif var_type == 'var_in' then\r\n\t\t\t\tlist = inputs\r\n\t\t\t\tin_count = in_count + 1\r\n\t\t\telseif var_type == 'var_out' then\r\n\t\t\t\tlist = outputs\r\n\t\t\t\tout_count = out_count + 1\r\n\t\t\telse\r\n\t\t\t\tlist = misc\r\n\t\t\t\tsort = false\r\n\t\t\tend\r\n\t\t\tif sort then\r\n\t\t\t\tlocal idx = var.idx\r\n\t\t\t\tif idx then\r\n\t\t\t\t\t-- force index of this variable.\r\n\t\t\t\t\tlocal old_var = list[idx]\r\n\t\t\t\t\t-- variable has a fixed\r\n\t\t\t\t\tlist[idx] = var\r\n\t\t\t\t\t-- move old variable to next open slot\r\n\t\t\t\t\tvar = old_var\r\n\t\t\t\tend\r\n\t\t\t\t-- place variable in next nil slot.\r\n\t\t\t\tif var then\r\n\t\t\t\t\tfor i=1,max_idx do\r\n\t\t\t\t\t\tif not list[i] then\r\n\t\t\t\t\t\t\t-- done, found empty slot\r\n\t\t\t\t\t\t\tlist[i] = var\r\n\t\t\t\t\t\t\tvar = nil\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\tassert(var == nil, \"Failed to find empty slot for variable.\")\r\n\t\t\telse\r\n\t\t\t\tlist[#list + 1] = var\r\n\t\t\tend\r\n\t\tend\r\n\t\t-- make sure there are no gaps between input/output variables.\r\n\t\tassert(#inputs == in_count,\r\n\t\t\t\"Gaps between input variables, check your usage of `<idx` for function: \" .. rec.name)\r\n\t\tassert(#outputs == out_count,\r\n\t\t\t\"Gaps between output variables, check your usage of `>idx` for function: \" .. rec.name)\r\n\r\n\t\t-- put sorted sub-records back into the `c_function` record.\r\n\t\tlocal idx=0\r\n\t\tfor i=1,in_count do\r\n\t\t\tidx = idx + 1\r\n\t\t\trec[idx] = inputs[i]\r\n\t\tend\r\n\t\tfor i=1,out_count do\r\n\t\t\tidx = idx + 1\r\n\t\t\trec[idx] = outputs[i]\r\n\t\tend\r\n\t\tfor i=1,#misc do\r\n\t\t\tidx = idx + 1\r\n\t\t\trec[idx] = misc[i]\r\n\t\tend\r\n\t\t-- generate list of input parameter names for FFI functions.\r\n\t\tlocal ffi_params = {}\r\n\t\tfor i=1,in_count do\r\n\t\t\tlocal name = inputs[i].name\r\n\t\t\tif name ~= 'this' then\r\n\t\t\t\tffi_params[i] = '${' .. inputs[i].name .. '}'\r\n\t\t\telse\r\n\t\t\t\tffi_params[i] = 'self'\r\n\t\t\tend\r\n\t\tend\r\n\t\trec.ffi_params = tconcat(ffi_params, ', ')\r\n\tend",
    "type": "function"
  }, {
    "id": 919,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 920,
    "text": "function(self, rec, parent)\r\n\t\tlocal var_type = rec.c_type_rec\r\n\t\tif var_type._is_error_code then\r\n\t\t\tassert(parent._has_error_code == nil,\r\n\t\t\t\t\"A function/method can only have one var_out with type error_code.\")\r\n\t\t\t-- mark the function as having an error code.\r\n\t\t\tparent._has_error_code = rec\r\n\t\telseif var_type.error_on_null then\r\n\t\t\t-- if this variable is null then push a nil and error message.\r\n\t\t\trec.is_error_on_null = true\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 921,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 922,
    "text": "",
    "type": "function container"
  }, {
    "id": 923,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 924,
    "text": "close",
    "type": "global function"
  }, {
    "id": 925,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 926,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 927,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 928,
    "text": "print",
    "type": "global function"
  }, {
    "id": 929,
    "text": "subfile_path",
    "type": "global function"
  }, {
    "id": 930,
    "text": "rawset",
    "type": "global function"
  }, {
    "id": 931,
    "text": "make_record",
    "type": "global function"
  }, {
    "id": 932,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 933,
    "text": "type",
    "type": "global function"
  }, {
    "id": 934,
    "text": "process_records",
    "type": "global function"
  }, {
    "id": 935,
    "text": "clear_all_records",
    "type": "global function"
  }, {
    "id": 936,
    "text": "is_record",
    "type": "global function"
  }, {
    "id": 937,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 938,
    "text": "move_recs",
    "type": "global function"
  }, {
    "id": 939,
    "text": "open",
    "type": "global function"
  }, {
    "id": 940,
    "text": "tconcat",
    "type": "global function"
  }, {
    "id": 941,
    "text": "dofile",
    "type": "global function"
  }, {
    "id": 942,
    "text": "run_stage_parsers",
    "type": "global function"
  }, {
    "id": 943,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 944,
    "text": "error",
    "type": "global function"
  }, {
    "id": 945,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 946,
    "text": "require",
    "type": "global function"
  }, {
    "id": 947,
    "text": "",
    "type": "global variable"
  }, {
    "id": 948,
    "text": "",
    "type": "variable container"
  }, {
    "id": 949,
    "text": "",
    "type": "require container"
  }, {
    "id": 950,
    "text": "",
    "type": "local variable"
  }, {
    "id": 951,
    "text": "",
    "type": "n/a"
  }, {
    "id": 952,
    "text": "",
    "type": "local variable"
  }, {
    "id": 953,
    "text": "",
    "type": "n/a"
  }, {
    "id": 954,
    "text": "",
    "type": "local variable"
  }, {
    "id": 955,
    "text": "",
    "type": "n/a"
  }, {
    "id": 956,
    "text": "",
    "type": "local variable"
  }, {
    "id": 957,
    "text": "",
    "type": "n/a"
  }, {
    "id": 958,
    "text": "",
    "type": "local variable"
  }, {
    "id": 959,
    "text": "",
    "type": "string"
  }, {
    "id": 960,
    "text": "",
    "type": "local variable"
  }, {
    "id": 961,
    "text": "",
    "type": "string"
  }, {
    "id": 962,
    "text": "",
    "type": "local variable"
  }, {
    "id": 963,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 964,
    "text": "",
    "type": "local variable"
  }, {
    "id": 965,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 966,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 967,
    "text": "",
    "type": "function"
  }, {
    "id": 968,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 969,
    "text": "",
    "type": "function"
  }, {
    "id": 970,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 971,
    "text": "",
    "type": "function"
  }, {
    "id": 972,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 973,
    "text": "",
    "type": "function"
  }, {
    "id": 974,
    "text": "",
    "type": "local variable"
  }, {
    "id": 975,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 976,
    "text": "",
    "type": "local variable"
  }, {
    "id": 977,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 978,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 979,
    "text": "",
    "type": "boolean"
  }, {
    "id": 980,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 981,
    "text": "",
    "type": "boolean"
  }, {
    "id": 982,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 983,
    "text": "",
    "type": "boolean"
  }, {
    "id": 984,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 985,
    "text": "",
    "type": "boolean"
  }, {
    "id": 986,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 987,
    "text": "",
    "type": "boolean"
  }, {
    "id": 988,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 989,
    "text": "",
    "type": "boolean"
  }, {
    "id": 990,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 991,
    "text": "",
    "type": "boolean"
  }, {
    "id": 992,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 993,
    "text": "",
    "type": "boolean"
  }, {
    "id": 994,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 995,
    "text": "",
    "type": "boolean"
  }, {
    "id": 996,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 997,
    "text": "",
    "type": "boolean"
  }, {
    "id": 998,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 999,
    "text": "",
    "type": "boolean"
  }, {
    "id": 1000,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1001,
    "text": "",
    "type": "boolean"
  }, {
    "id": 1002,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1003,
    "text": "",
    "type": "boolean"
  }, {
    "id": 1004,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1005,
    "text": "",
    "type": "boolean"
  }, {
    "id": 1006,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1007,
    "text": "",
    "type": "boolean"
  }, {
    "id": 1008,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1009,
    "text": "",
    "type": "boolean"
  }, {
    "id": 1010,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1011,
    "text": "",
    "type": "boolean"
  }, {
    "id": 1012,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1013,
    "text": "",
    "type": "boolean"
  }, {
    "id": 1014,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1015,
    "text": "",
    "type": "keyword"
  }, {
    "id": 1016,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1017,
    "text": "",
    "type": "string"
  }, {
    "id": 1018,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1019,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 1020,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1021,
    "text": "",
    "type": "unop"
  }, {
    "id": 1022,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1023,
    "text": "",
    "type": "number"
  }, {
    "id": 1024,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1025,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1026,
    "text": "(record)",
    "type": "module"
  }, {
    "id": 1027,
    "text": " gen_lang)",
    "type": "module"
  }, {
    "id": 1028,
    "text": " gen_module)",
    "type": "module"
  } ]
}