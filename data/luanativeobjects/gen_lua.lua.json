{
  "_filename": "gen_lua.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luanativeobjects/native_objects/gen_lua.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 9,
    "label": "has",
    "to": 14
  }, {
    "from": 9,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 12
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 9,
    "label": "has",
    "to": 17
  }, {
    "from": 9,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 9,
    "label": "has",
    "to": 21
  }, {
    "from": 9,
    "label": "has",
    "to": 22
  }, {
    "from": 2,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 2,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 30,
    "label": "has",
    "to": 34
  }, {
    "from": 30,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 39
  }, {
    "from": 35,
    "label": "has",
    "to": 40
  }, {
    "from": 30,
    "label": "has",
    "to": 41
  }, {
    "from": 30,
    "label": "has",
    "to": 42
  }, {
    "from": 30,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 44,
    "label": "has",
    "to": 48
  }, {
    "from": 44,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 49,
    "label": "has",
    "to": 53
  }, {
    "from": 49,
    "label": "has",
    "to": 54
  }, {
    "from": 49,
    "label": "has",
    "to": 55
  }, {
    "from": 49,
    "label": "has",
    "to": 56
  }, {
    "from": 49,
    "label": "has",
    "to": 53
  }, {
    "from": 49,
    "label": "has",
    "to": 57
  }, {
    "from": 44,
    "label": "has",
    "to": 32
  }, {
    "from": 44,
    "label": "has",
    "to": 58
  }, {
    "from": 44,
    "label": "has",
    "to": 32
  }, {
    "from": 44,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 32
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 62,
    "label": "has",
    "to": 65
  }, {
    "from": 62,
    "label": "has",
    "to": 66
  }, {
    "from": 62,
    "label": "has",
    "to": 32
  }, {
    "from": 62,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 71,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 71,
    "label": "has",
    "to": 76
  }, {
    "from": 68,
    "label": "has",
    "to": 77
  }, {
    "from": 68,
    "label": "has",
    "to": 32
  }, {
    "from": 68,
    "label": "has",
    "to": 32
  }, {
    "from": 68,
    "label": "has",
    "to": 78
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 81
  }, {
    "from": 79,
    "label": "has",
    "to": 82
  }, {
    "from": 79,
    "label": "has",
    "to": 83
  }, {
    "from": 79,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 79,
    "label": "has",
    "to": 87
  }, {
    "from": 79,
    "label": "has",
    "to": 88
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 92,
    "label": "has",
    "to": 95
  }, {
    "from": 92,
    "label": "has",
    "to": 96
  }, {
    "from": 92,
    "label": "has",
    "to": 97
  }, {
    "from": 92,
    "label": "has",
    "to": 98
  }, {
    "from": 92,
    "label": "has",
    "to": 99
  }, {
    "from": 92,
    "label": "has",
    "to": 100
  }, {
    "from": 92,
    "label": "has",
    "to": 101
  }, {
    "from": 92,
    "label": "has",
    "to": 102
  }, {
    "from": 92,
    "label": "has",
    "to": 103
  }, {
    "from": 92,
    "label": "has",
    "to": 104
  }, {
    "from": 92,
    "label": "has",
    "to": 105
  }, {
    "from": 92,
    "label": "has",
    "to": 106
  }, {
    "from": 92,
    "label": "has",
    "to": 107
  }, {
    "from": 92,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 92,
    "label": "has",
    "to": 110
  }, {
    "from": 92,
    "label": "has",
    "to": 111
  }, {
    "from": 92,
    "label": "has",
    "to": 112
  }, {
    "from": 92,
    "label": "has",
    "to": 113
  }, {
    "from": 92,
    "label": "has",
    "to": 114
  }, {
    "from": 92,
    "label": "has",
    "to": 115
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 116,
    "label": "has",
    "to": 118
  }, {
    "from": 116,
    "label": "has",
    "to": 119
  }, {
    "from": 116,
    "label": "has",
    "to": 120
  }, {
    "from": 116,
    "label": "has",
    "to": 121
  }, {
    "from": 116,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 116,
    "label": "has",
    "to": 124
  }, {
    "from": 116,
    "label": "has",
    "to": 125
  }, {
    "from": 116,
    "label": "has",
    "to": 126
  }, {
    "from": 116,
    "label": "has",
    "to": 127
  }, {
    "from": 116,
    "label": "has",
    "to": 128
  }, {
    "from": 116,
    "label": "has",
    "to": 129
  }, {
    "from": 116,
    "label": "has",
    "to": 130
  }, {
    "from": 116,
    "label": "has",
    "to": 131
  }, {
    "from": 116,
    "label": "has",
    "to": 132
  }, {
    "from": 116,
    "label": "has",
    "to": 133
  }, {
    "from": 116,
    "label": "has",
    "to": 134
  }, {
    "from": 135,
    "label": "has",
    "to": 96
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 135,
    "label": "has",
    "to": 137
  }, {
    "from": 135,
    "label": "has",
    "to": 138
  }, {
    "from": 135,
    "label": "has",
    "to": 139
  }, {
    "from": 135,
    "label": "has",
    "to": 140
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 141,
    "label": "has",
    "to": 143
  }, {
    "from": 141,
    "label": "has",
    "to": 132
  }, {
    "from": 141,
    "label": "has",
    "to": 144
  }, {
    "from": 141,
    "label": "has",
    "to": 145
  }, {
    "from": 141,
    "label": "has",
    "to": 146
  }, {
    "from": 147,
    "label": "has",
    "to": 96
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 148,
    "label": "has",
    "to": 150
  }, {
    "from": 148,
    "label": "has",
    "to": 151
  }, {
    "from": 148,
    "label": "has",
    "to": 152
  }, {
    "from": 148,
    "label": "has",
    "to": 153
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 148,
    "label": "has",
    "to": 152
  }, {
    "from": 148,
    "label": "has",
    "to": 153
  }, {
    "from": 147,
    "label": "has",
    "to": 154
  }, {
    "from": 147,
    "label": "has",
    "to": 155
  }, {
    "from": 147,
    "label": "has",
    "to": 156
  }, {
    "from": 147,
    "label": "has",
    "to": 157
  }, {
    "from": 158,
    "label": "has",
    "to": 159
  }, {
    "from": 158,
    "label": "has",
    "to": 160
  }, {
    "from": 160,
    "label": "has",
    "to": 161
  }, {
    "from": 158,
    "label": "has",
    "to": 162
  }, {
    "from": 158,
    "label": "has",
    "to": 163
  }, {
    "from": 163,
    "label": "has",
    "to": 164
  }, {
    "from": 158,
    "label": "has",
    "to": 165
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 158,
    "label": "has",
    "to": 167
  }, {
    "from": 158,
    "label": "has",
    "to": 168
  }, {
    "from": 168,
    "label": "has",
    "to": 169
  }, {
    "from": 158,
    "label": "has",
    "to": 170
  }, {
    "from": 170,
    "label": "has",
    "to": 171
  }, {
    "from": 158,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 172,
    "label": "has",
    "to": 174
  }, {
    "from": 158,
    "label": "has",
    "to": 175
  }, {
    "from": 158,
    "label": "has",
    "to": 176
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 177,
    "label": "has",
    "to": 178
  }, {
    "from": 176,
    "label": "has",
    "to": 179
  }, {
    "from": 179,
    "label": "has",
    "to": 180
  }, {
    "from": 176,
    "label": "has",
    "to": 181
  }, {
    "from": 176,
    "label": "has",
    "to": 182
  }, {
    "from": 176,
    "label": "has",
    "to": 183
  }, {
    "from": 176,
    "label": "has",
    "to": 184
  }, {
    "from": 184,
    "label": "has",
    "to": 185
  }, {
    "from": 176,
    "label": "has",
    "to": 186
  }, {
    "from": 176,
    "label": "has",
    "to": 181
  }, {
    "from": 176,
    "label": "has",
    "to": 182
  }, {
    "from": 158,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 158,
    "label": "has",
    "to": 124
  }, {
    "from": 158,
    "label": "has",
    "to": 187
  }, {
    "from": 158,
    "label": "has",
    "to": 188
  }, {
    "from": 158,
    "label": "has",
    "to": 189
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 158,
    "label": "has",
    "to": 191
  }, {
    "from": 158,
    "label": "has",
    "to": 192
  }, {
    "from": 158,
    "label": "has",
    "to": 193
  }, {
    "from": 193,
    "label": "has",
    "to": 194
  }, {
    "from": 158,
    "label": "has",
    "to": 195
  }, {
    "from": 195,
    "label": "has",
    "to": 196
  }, {
    "from": 195,
    "label": "has",
    "to": 197
  }, {
    "from": 195,
    "label": "has",
    "to": 198
  }, {
    "from": 158,
    "label": "has",
    "to": 199
  }, {
    "from": 199,
    "label": "has",
    "to": 125
  }, {
    "from": 199,
    "label": "has",
    "to": 200
  }, {
    "from": 199,
    "label": "has",
    "to": 201
  }, {
    "from": 199,
    "label": "has",
    "to": 202
  }, {
    "from": 199,
    "label": "has",
    "to": 203
  }, {
    "from": 199,
    "label": "has",
    "to": 204
  }, {
    "from": 199,
    "label": "has",
    "to": 205
  }, {
    "from": 199,
    "label": "has",
    "to": 206
  }, {
    "from": 199,
    "label": "has",
    "to": 207
  }, {
    "from": 158,
    "label": "has",
    "to": 128
  }, {
    "from": 158,
    "label": "has",
    "to": 208
  }, {
    "from": 158,
    "label": "has",
    "to": 130
  }, {
    "from": 158,
    "label": "has",
    "to": 209
  }, {
    "from": 158,
    "label": "has",
    "to": 132
  }, {
    "from": 158,
    "label": "has",
    "to": 210
  }, {
    "from": 158,
    "label": "has",
    "to": 211
  }, {
    "from": 212,
    "label": "has",
    "to": 213
  }, {
    "from": 212,
    "label": "has",
    "to": 214
  }, {
    "from": 212,
    "label": "has",
    "to": 215
  }, {
    "from": 212,
    "label": "has",
    "to": 216
  }, {
    "from": 217,
    "label": "has",
    "to": 218
  }, {
    "from": 217,
    "label": "has",
    "to": 219
  }, {
    "from": 217,
    "label": "has",
    "to": 220
  }, {
    "from": 217,
    "label": "has",
    "to": 132
  }, {
    "from": 217,
    "label": "has",
    "to": 210
  }, {
    "from": 217,
    "label": "has",
    "to": 221
  }, {
    "from": 222,
    "label": "has",
    "to": 223
  }, {
    "from": 222,
    "label": "has",
    "to": 32
  }, {
    "from": 222,
    "label": "has",
    "to": 224
  }, {
    "from": 222,
    "label": "has",
    "to": 225
  }, {
    "from": 225,
    "label": "has",
    "to": 226
  }, {
    "from": 225,
    "label": "has",
    "to": 227
  }, {
    "from": 222,
    "label": "has",
    "to": 228
  }, {
    "from": 229,
    "label": "has",
    "to": 230
  }, {
    "from": 230,
    "label": "has",
    "to": 231
  }, {
    "from": 230,
    "label": "has",
    "to": 232
  }, {
    "from": 229,
    "label": "has",
    "to": 233
  }, {
    "from": 234,
    "label": "has",
    "to": 235
  }, {
    "from": 234,
    "label": "has",
    "to": 236
  }, {
    "from": 234,
    "label": "has",
    "to": 83
  }, {
    "from": 234,
    "label": "has",
    "to": 237
  }, {
    "from": 234,
    "label": "has",
    "to": 32
  }, {
    "from": 234,
    "label": "has",
    "to": 238
  }, {
    "from": 238,
    "label": "has",
    "to": 239
  }, {
    "from": 239,
    "label": "has",
    "to": 240
  }, {
    "from": 239,
    "label": "has",
    "to": 241
  }, {
    "from": 241,
    "label": "has",
    "to": 242
  }, {
    "from": 241,
    "label": "has",
    "to": 243
  }, {
    "from": 241,
    "label": "has",
    "to": 244
  }, {
    "from": 241,
    "label": "has",
    "to": 245
  }, {
    "from": 234,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 32
  }, {
    "from": 234,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 62,
    "label": "has",
    "to": 65
  }, {
    "from": 62,
    "label": "has",
    "to": 66
  }, {
    "from": 62,
    "label": "has",
    "to": 32
  }, {
    "from": 234,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 71,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 71,
    "label": "has",
    "to": 76
  }, {
    "from": 68,
    "label": "has",
    "to": 77
  }, {
    "from": 68,
    "label": "has",
    "to": 32
  }, {
    "from": 68,
    "label": "has",
    "to": 32
  }, {
    "from": 234,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 81
  }, {
    "from": 79,
    "label": "has",
    "to": 82
  }, {
    "from": 79,
    "label": "has",
    "to": 83
  }, {
    "from": 79,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 79,
    "label": "has",
    "to": 87
  }, {
    "from": 234,
    "label": "has",
    "to": 246
  }, {
    "from": 246,
    "label": "has",
    "to": 247
  }, {
    "from": 234,
    "label": "has",
    "to": 248
  }, {
    "from": 248,
    "label": "has",
    "to": 249
  }, {
    "from": 248,
    "label": "has",
    "to": 250
  }, {
    "from": 248,
    "label": "has",
    "to": 251
  }, {
    "from": 248,
    "label": "has",
    "to": 252
  }, {
    "from": 248,
    "label": "has",
    "to": 253
  }, {
    "from": 248,
    "label": "has",
    "to": 254
  }, {
    "from": 248,
    "label": "has",
    "to": 255
  }, {
    "from": 248,
    "label": "has",
    "to": 256
  }, {
    "from": 234,
    "label": "has",
    "to": 257
  }, {
    "from": 234,
    "label": "has",
    "to": 258
  }, {
    "from": 259,
    "label": "has",
    "to": 260
  }, {
    "from": 260,
    "label": "has",
    "to": 261
  }, {
    "from": 259,
    "label": "has",
    "to": 262
  }, {
    "from": 259,
    "label": "has",
    "to": 132
  }, {
    "from": 259,
    "label": "has",
    "to": 263
  }, {
    "from": 259,
    "label": "has",
    "to": 264
  }, {
    "from": 265,
    "label": "has",
    "to": 266
  }, {
    "from": 265,
    "label": "has",
    "to": 267
  }, {
    "from": 265,
    "label": "has",
    "to": 268
  }, {
    "from": 265,
    "label": "has",
    "to": 269
  }, {
    "from": 265,
    "label": "has",
    "to": 270
  }, {
    "from": 265,
    "label": "has",
    "to": 271
  }, {
    "from": 265,
    "label": "has",
    "to": 272
  }, {
    "from": 265,
    "label": "has",
    "to": 273
  }, {
    "from": 274,
    "label": "has",
    "to": 275
  }, {
    "from": 274,
    "label": "has",
    "to": 276
  }, {
    "from": 274,
    "label": "has",
    "to": 277
  }, {
    "from": 274,
    "label": "has",
    "to": 278
  }, {
    "from": 274,
    "label": "has",
    "to": 279
  }, {
    "from": 274,
    "label": "has",
    "to": 280
  }, {
    "from": 274,
    "label": "has",
    "to": 281
  }, {
    "from": 274,
    "label": "has",
    "to": 282
  }, {
    "from": 282,
    "label": "has",
    "to": 283
  }, {
    "from": 282,
    "label": "has",
    "to": 284
  }, {
    "from": 274,
    "label": "has",
    "to": 285
  }, {
    "from": 274,
    "label": "has",
    "to": 286
  }, {
    "from": 274,
    "label": "has",
    "to": 287
  }, {
    "from": 287,
    "label": "has",
    "to": 288
  }, {
    "from": 274,
    "label": "has",
    "to": 289
  }, {
    "from": 274,
    "label": "has",
    "to": 132
  }, {
    "from": 274,
    "label": "has",
    "to": 290
  }, {
    "from": 274,
    "label": "has",
    "to": 291
  }, {
    "from": 274,
    "label": "has",
    "to": 292
  }, {
    "from": 274,
    "label": "has",
    "to": 293
  }, {
    "from": 274,
    "label": "has",
    "to": 294
  }, {
    "from": 295,
    "label": "has",
    "to": 296
  }, {
    "from": 295,
    "label": "has",
    "to": 297
  }, {
    "from": 295,
    "label": "has",
    "to": 65
  }, {
    "from": 295,
    "label": "has",
    "to": 66
  }, {
    "from": 295,
    "label": "has",
    "to": 298
  }, {
    "from": 299,
    "label": "has",
    "to": 300
  }, {
    "from": 300,
    "label": "has",
    "to": 301
  }, {
    "from": 300,
    "label": "has",
    "to": 302
  }, {
    "from": 302,
    "label": "has",
    "to": 303
  }, {
    "from": 302,
    "label": "has",
    "to": 304
  }, {
    "from": 302,
    "label": "has",
    "to": 305
  }, {
    "from": 300,
    "label": "has",
    "to": 306
  }, {
    "from": 300,
    "label": "has",
    "to": 307
  }, {
    "from": 307,
    "label": "has",
    "to": 308
  }, {
    "from": 300,
    "label": "has",
    "to": 309
  }, {
    "from": 299,
    "label": "has",
    "to": 310
  }, {
    "from": 299,
    "label": "has",
    "to": 145
  }, {
    "from": 299,
    "label": "has",
    "to": 311
  }, {
    "from": 312,
    "label": "has",
    "to": 313
  }, {
    "from": 312,
    "label": "has",
    "to": 314
  }, {
    "from": 312,
    "label": "has",
    "to": 315
  }, {
    "from": 312,
    "label": "has",
    "to": 316
  }, {
    "from": 316,
    "label": "has",
    "to": 317
  }, {
    "from": 312,
    "label": "has",
    "to": 318
  }, {
    "from": 312,
    "label": "has",
    "to": 319
  }, {
    "from": 312,
    "label": "has",
    "to": 320
  }, {
    "from": 320,
    "label": "has",
    "to": 321
  }, {
    "from": 320,
    "label": "has",
    "to": 322
  }, {
    "from": 312,
    "label": "has",
    "to": 323
  }, {
    "from": 324,
    "label": "has",
    "to": 325
  }, {
    "from": 325,
    "label": "has",
    "to": 326
  }, {
    "from": 325,
    "label": "has",
    "to": 327
  }, {
    "from": 325,
    "label": "has",
    "to": 328
  }, {
    "from": 325,
    "label": "has",
    "to": 329
  }, {
    "from": 329,
    "label": "has",
    "to": 330
  }, {
    "from": 329,
    "label": "has",
    "to": 331
  }, {
    "from": 331,
    "label": "has",
    "to": 332
  }, {
    "from": 329,
    "label": "has",
    "to": 333
  }, {
    "from": 329,
    "label": "has",
    "to": 334
  }, {
    "from": 324,
    "label": "has",
    "to": 262
  }, {
    "from": 324,
    "label": "has",
    "to": 132
  }, {
    "from": 324,
    "label": "has",
    "to": 335
  }, {
    "from": 324,
    "label": "has",
    "to": 336
  }, {
    "from": 324,
    "label": "has",
    "to": 337
  }, {
    "from": 324,
    "label": "has",
    "to": 338
  }, {
    "from": 339,
    "label": "has",
    "to": 340
  }, {
    "from": 339,
    "label": "has",
    "to": 341
  }, {
    "from": 339,
    "label": "has",
    "to": 342
  }, {
    "from": 343,
    "label": "has",
    "to": 344
  }, {
    "from": 343,
    "label": "has",
    "to": 32
  }, {
    "from": 343,
    "label": "has",
    "to": 345
  }, {
    "from": 343,
    "label": "has",
    "to": 346
  }, {
    "from": 343,
    "label": "has",
    "to": 32
  }, {
    "from": 343,
    "label": "has",
    "to": 347
  }, {
    "from": 343,
    "label": "has",
    "to": 348
  }, {
    "from": 348,
    "label": "has",
    "to": 349
  }, {
    "from": 349,
    "label": "has",
    "to": 350
  }, {
    "from": 349,
    "label": "has",
    "to": 351
  }, {
    "from": 349,
    "label": "has",
    "to": 352
  }, {
    "from": 349,
    "label": "has",
    "to": 353
  }, {
    "from": 349,
    "label": "has",
    "to": 354
  }, {
    "from": 348,
    "label": "has",
    "to": 355
  }, {
    "from": 355,
    "label": "has",
    "to": 356
  }, {
    "from": 355,
    "label": "has",
    "to": 357
  }, {
    "from": 348,
    "label": "has",
    "to": 358
  }, {
    "from": 348,
    "label": "has",
    "to": 359
  }, {
    "from": 359,
    "label": "has",
    "to": 360
  }, {
    "from": 359,
    "label": "has",
    "to": 361
  }, {
    "from": 348,
    "label": "has",
    "to": 362
  }, {
    "from": 343,
    "label": "has",
    "to": 363
  }, {
    "from": 363,
    "label": "has",
    "to": 364
  }, {
    "from": 363,
    "label": "has",
    "to": 365
  }, {
    "from": 343,
    "label": "has",
    "to": 366
  }, {
    "from": 367,
    "label": "has",
    "to": 368
  }, {
    "from": 367,
    "label": "has",
    "to": 32
  }, {
    "from": 367,
    "label": "has",
    "to": 369
  }, {
    "from": 367,
    "label": "has",
    "to": 347
  }, {
    "from": 367,
    "label": "has",
    "to": 370
  }, {
    "from": 370,
    "label": "has",
    "to": 371
  }, {
    "from": 371,
    "label": "has",
    "to": 350
  }, {
    "from": 371,
    "label": "has",
    "to": 372
  }, {
    "from": 371,
    "label": "has",
    "to": 373
  }, {
    "from": 371,
    "label": "has",
    "to": 374
  }, {
    "from": 367,
    "label": "has",
    "to": 345
  }, {
    "from": 367,
    "label": "has",
    "to": 375
  }, {
    "from": 375,
    "label": "has",
    "to": 376
  }, {
    "from": 367,
    "label": "has",
    "to": 32
  }, {
    "from": 367,
    "label": "has",
    "to": 347
  }, {
    "from": 367,
    "label": "has",
    "to": 377
  }, {
    "from": 377,
    "label": "has",
    "to": 356
  }, {
    "from": 377,
    "label": "has",
    "to": 378
  }, {
    "from": 367,
    "label": "has",
    "to": 379
  }, {
    "from": 367,
    "label": "has",
    "to": 380
  }, {
    "from": 380,
    "label": "has",
    "to": 381
  }, {
    "from": 380,
    "label": "has",
    "to": 382
  }, {
    "from": 380,
    "label": "has",
    "to": 383
  }, {
    "from": 367,
    "label": "has",
    "to": 384
  }, {
    "from": 367,
    "label": "has",
    "to": 385
  }, {
    "from": 367,
    "label": "has",
    "to": 32
  }, {
    "from": 367,
    "label": "has",
    "to": 386
  }, {
    "from": 367,
    "label": "has",
    "to": 387
  }, {
    "from": 367,
    "label": "has",
    "to": 388
  }, {
    "from": 388,
    "label": "has",
    "to": 389
  }, {
    "from": 388,
    "label": "has",
    "to": 390
  }, {
    "from": 390,
    "label": "has",
    "to": 391
  }, {
    "from": 390,
    "label": "has",
    "to": 392
  }, {
    "from": 390,
    "label": "has",
    "to": 393
  }, {
    "from": 388,
    "label": "has",
    "to": 389
  }, {
    "from": 388,
    "label": "has",
    "to": 394
  }, {
    "from": 388,
    "label": "has",
    "to": 395
  }, {
    "from": 388,
    "label": "has",
    "to": 393
  }, {
    "from": 367,
    "label": "has",
    "to": 396
  }, {
    "from": 367,
    "label": "has",
    "to": 397
  }, {
    "from": 398,
    "label": "has",
    "to": 345
  }, {
    "from": 398,
    "label": "has",
    "to": 347
  }, {
    "from": 398,
    "label": "has",
    "to": 399
  }, {
    "from": 399,
    "label": "has",
    "to": 400
  }, {
    "from": 399,
    "label": "has",
    "to": 401
  }, {
    "from": 399,
    "label": "has",
    "to": 402
  }, {
    "from": 398,
    "label": "has",
    "to": 403
  }, {
    "from": 404,
    "label": "has",
    "to": 405
  }, {
    "from": 404,
    "label": "has",
    "to": 406
  }, {
    "from": 404,
    "label": "has",
    "to": 347
  }, {
    "from": 404,
    "label": "has",
    "to": 407
  }, {
    "from": 404,
    "label": "has",
    "to": 408
  }, {
    "from": 404,
    "label": "has",
    "to": 409
  }, {
    "from": 62,
    "label": "calls",
    "to": 60
  }, {
    "from": 68,
    "label": "calls",
    "to": 60
  }, {
    "from": 30,
    "label": "calls",
    "to": 420
  }, {
    "from": 410,
    "label": "calls",
    "to": 420
  }, {
    "from": 68,
    "label": "calls",
    "to": 420
  }, {
    "from": 410,
    "label": "calls",
    "to": 411
  }, {
    "from": 410,
    "label": "calls",
    "to": 419
  }, {
    "from": 410,
    "label": "calls",
    "to": 419
  }, {
    "from": 410,
    "label": "calls",
    "to": 419
  }, {
    "from": 410,
    "label": "calls",
    "to": 419
  }, {
    "from": 410,
    "label": "calls",
    "to": 419
  }, {
    "from": 410,
    "label": "calls",
    "to": 419
  }, {
    "from": 410,
    "label": "calls",
    "to": 419
  }, {
    "from": 410,
    "label": "calls",
    "to": 419
  }, {
    "from": 410,
    "label": "calls",
    "to": 418
  }, {
    "from": 410,
    "label": "calls",
    "to": 28
  }, {
    "from": 44,
    "label": "calls",
    "to": 30
  }, {
    "from": 410,
    "label": "calls",
    "to": 413
  }, {
    "from": 79,
    "label": "calls",
    "to": 62
  }, {
    "from": 410,
    "label": "calls",
    "to": 62
  }, {
    "from": 410,
    "label": "calls",
    "to": 89
  }, {
    "from": 410,
    "label": "calls",
    "to": 89
  }, {
    "from": 410,
    "label": "calls",
    "to": 89
  }, {
    "from": 79,
    "label": "calls",
    "to": 68
  }, {
    "from": 410,
    "label": "calls",
    "to": 414
  }, {
    "from": 410,
    "label": "calls",
    "to": 414
  }, {
    "from": 410,
    "label": "calls",
    "to": 416
  }, {
    "from": 410,
    "label": "calls",
    "to": 416
  }, {
    "from": 410,
    "label": "calls",
    "to": 44
  }, {
    "from": 410,
    "label": "calls",
    "to": 44
  }, {
    "from": 2,
    "label": "calls",
    "to": 412
  }, {
    "from": 410,
    "label": "calls",
    "to": 412
  }, {
    "from": 410,
    "label": "calls",
    "to": 2
  }, {
    "from": 410,
    "label": "calls",
    "to": 2
  }, {
    "from": 410,
    "label": "calls",
    "to": 422
  }, {
    "from": 68,
    "label": "calls",
    "to": 415
  }, {
    "from": 2,
    "label": "calls",
    "to": 417
  }, {
    "from": 30,
    "label": "calls",
    "to": 417
  }, {
    "from": 30,
    "label": "calls",
    "to": 417
  }, {
    "from": 410,
    "label": "calls",
    "to": 423
  }, {
    "from": 410,
    "label": "calls",
    "to": 79
  }, {
    "from": 410,
    "label": "calls",
    "to": 421
  }, {
    "from": 1,
    "label": "contains",
    "to": 410
  }, {
    "from": 410,
    "label": "declares",
    "to": 2
  }, {
    "from": 410,
    "label": "declares",
    "to": 28
  }, {
    "from": 410,
    "label": "declares",
    "to": 30
  }, {
    "from": 410,
    "label": "declares",
    "to": 44
  }, {
    "from": 410,
    "label": "declares",
    "to": 60
  }, {
    "from": 410,
    "label": "declares",
    "to": 62
  }, {
    "from": 410,
    "label": "declares",
    "to": 68
  }, {
    "from": 410,
    "label": "declares",
    "to": 79
  }, {
    "from": 410,
    "label": "declares",
    "to": 89
  }, {
    "from": 410,
    "label": "declares",
    "to": 92
  }, {
    "from": 410,
    "label": "declares",
    "to": 116
  }, {
    "from": 410,
    "label": "declares",
    "to": 135
  }, {
    "from": 410,
    "label": "declares",
    "to": 141
  }, {
    "from": 410,
    "label": "declares",
    "to": 147
  }, {
    "from": 410,
    "label": "declares",
    "to": 158
  }, {
    "from": 410,
    "label": "declares",
    "to": 212
  }, {
    "from": 410,
    "label": "declares",
    "to": 217
  }, {
    "from": 410,
    "label": "declares",
    "to": 222
  }, {
    "from": 410,
    "label": "declares",
    "to": 229
  }, {
    "from": 410,
    "label": "declares",
    "to": 234
  }, {
    "from": 410,
    "label": "declares",
    "to": 259
  }, {
    "from": 410,
    "label": "declares",
    "to": 265
  }, {
    "from": 410,
    "label": "declares",
    "to": 274
  }, {
    "from": 410,
    "label": "declares",
    "to": 295
  }, {
    "from": 410,
    "label": "declares",
    "to": 299
  }, {
    "from": 410,
    "label": "declares",
    "to": 312
  }, {
    "from": 410,
    "label": "declares",
    "to": 324
  }, {
    "from": 410,
    "label": "declares",
    "to": 339
  }, {
    "from": 410,
    "label": "declares",
    "to": 343
  }, {
    "from": 410,
    "label": "declares",
    "to": 367
  }, {
    "from": 410,
    "label": "declares",
    "to": 398
  }, {
    "from": 410,
    "label": "declares",
    "to": 404
  }, {
    "from": 1,
    "label": "contains",
    "to": 425
  }, {
    "from": 1,
    "label": "contains",
    "to": 426
  }, {
    "from": 425,
    "label": "initializes",
    "to": 427
  }, {
    "from": 427,
    "label": "assigns",
    "to": 428
  }, {
    "from": 425,
    "label": "initializes",
    "to": 429
  }, {
    "from": 429,
    "label": "assigns",
    "to": 430
  }, {
    "from": 425,
    "label": "initializes",
    "to": 431
  }, {
    "from": 431,
    "label": "assigns",
    "to": 432
  }, {
    "from": 425,
    "label": "initializes",
    "to": 433
  }, {
    "from": 433,
    "label": "assigns",
    "to": 434
  }, {
    "from": 434,
    "label": "assigns",
    "to": 435
  }, {
    "from": 435,
    "label": "assigns",
    "to": 436
  }, {
    "from": 434,
    "label": "assigns",
    "to": 437
  }, {
    "from": 437,
    "label": "assigns",
    "to": 438
  }, {
    "from": 434,
    "label": "assigns",
    "to": 439
  }, {
    "from": 439,
    "label": "assigns",
    "to": 440
  }, {
    "from": 434,
    "label": "assigns",
    "to": 441
  }, {
    "from": 441,
    "label": "assigns",
    "to": 442
  }, {
    "from": 434,
    "label": "assigns",
    "to": 443
  }, {
    "from": 443,
    "label": "assigns",
    "to": 444
  }, {
    "from": 434,
    "label": "assigns",
    "to": 445
  }, {
    "from": 445,
    "label": "assigns",
    "to": 446
  }, {
    "from": 425,
    "label": "initializes",
    "to": 447
  }, {
    "from": 447,
    "label": "assigns",
    "to": 448
  }, {
    "from": 448,
    "label": "assigns",
    "to": 449
  }, {
    "from": 449,
    "label": "assigns",
    "to": 450
  }, {
    "from": 448,
    "label": "assigns",
    "to": 451
  }, {
    "from": 451,
    "label": "assigns",
    "to": 452
  }, {
    "from": 448,
    "label": "assigns",
    "to": 453
  }, {
    "from": 453,
    "label": "assigns",
    "to": 454
  }, {
    "from": 448,
    "label": "assigns",
    "to": 455
  }, {
    "from": 455,
    "label": "assigns",
    "to": 456
  }, {
    "from": 448,
    "label": "assigns",
    "to": 457
  }, {
    "from": 457,
    "label": "assigns",
    "to": 458
  }, {
    "from": 448,
    "label": "assigns",
    "to": 459
  }, {
    "from": 459,
    "label": "assigns",
    "to": 460
  }, {
    "from": 425,
    "label": "initializes",
    "to": 461
  }, {
    "from": 461,
    "label": "assigns",
    "to": 462
  }, {
    "from": 425,
    "label": "initializes",
    "to": 463
  }, {
    "from": 463,
    "label": "assigns",
    "to": 464
  }, {
    "from": 425,
    "label": "initializes",
    "to": 465
  }, {
    "from": 465,
    "label": "assigns",
    "to": 466
  }, {
    "from": 425,
    "label": "initializes",
    "to": 467
  }, {
    "from": 467,
    "label": "assigns",
    "to": 468
  }, {
    "from": 468,
    "label": "assigns",
    "to": 469
  }, {
    "from": 469,
    "label": "assigns",
    "to": 470
  }, {
    "from": 468,
    "label": "assigns",
    "to": 471
  }, {
    "from": 471,
    "label": "assigns",
    "to": 472
  }, {
    "from": 468,
    "label": "assigns",
    "to": 473
  }, {
    "from": 473,
    "label": "assigns",
    "to": 474
  }, {
    "from": 468,
    "label": "assigns",
    "to": 475
  }, {
    "from": 475,
    "label": "assigns",
    "to": 476
  }, {
    "from": 468,
    "label": "assigns",
    "to": 477
  }, {
    "from": 477,
    "label": "assigns",
    "to": 478
  }, {
    "from": 468,
    "label": "assigns",
    "to": 479
  }, {
    "from": 479,
    "label": "assigns",
    "to": 480
  }, {
    "from": 468,
    "label": "assigns",
    "to": 481
  }, {
    "from": 481,
    "label": "assigns",
    "to": 482
  }, {
    "from": 468,
    "label": "assigns",
    "to": 483
  }, {
    "from": 483,
    "label": "assigns",
    "to": 484
  }, {
    "from": 468,
    "label": "assigns",
    "to": 485
  }, {
    "from": 485,
    "label": "assigns",
    "to": 486
  }, {
    "from": 468,
    "label": "assigns",
    "to": 487
  }, {
    "from": 487,
    "label": "assigns",
    "to": 488
  }, {
    "from": 468,
    "label": "assigns",
    "to": 489
  }, {
    "from": 489,
    "label": "assigns",
    "to": 490
  }, {
    "from": 468,
    "label": "assigns",
    "to": 491
  }, {
    "from": 491,
    "label": "assigns",
    "to": 492
  }, {
    "from": 468,
    "label": "assigns",
    "to": 493
  }, {
    "from": 493,
    "label": "assigns",
    "to": 494
  }, {
    "from": 468,
    "label": "assigns",
    "to": 495
  }, {
    "from": 495,
    "label": "assigns",
    "to": 496
  }, {
    "from": 468,
    "label": "assigns",
    "to": 497
  }, {
    "from": 497,
    "label": "assigns",
    "to": 498
  }, {
    "from": 468,
    "label": "assigns",
    "to": 499
  }, {
    "from": 499,
    "label": "assigns",
    "to": 500
  }, {
    "from": 468,
    "label": "assigns",
    "to": 501
  }, {
    "from": 501,
    "label": "assigns",
    "to": 502
  }, {
    "from": 468,
    "label": "assigns",
    "to": 503
  }, {
    "from": 503,
    "label": "assigns",
    "to": 504
  }, {
    "from": 468,
    "label": "assigns",
    "to": 505
  }, {
    "from": 505,
    "label": "assigns",
    "to": 506
  }, {
    "from": 425,
    "label": "initializes",
    "to": 507
  }, {
    "from": 507,
    "label": "assigns",
    "to": 508
  }, {
    "from": 425,
    "label": "initializes",
    "to": 509
  }, {
    "from": 509,
    "label": "assigns",
    "to": 510
  }, {
    "from": 426,
    "label": "initializes",
    "to": 424
  }, {
    "from": 424,
    "label": "requires",
    "to": 511
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "gen_lua",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function add_constant(rec, constant)\r\n\tlocal const_type = nil\r\n\tlocal str = 'NULL'\r\n\tlocal num = '0.0'\r\n\tlocal value = constant.value\r\n\tlocal is_define = constant.is_define\r\n\t-- check the type of the constant's value.\r\n\tconst_type = constant.vtype or type(value)\r\n\tif const_type == 'boolean' then\r\n\t\tconst_type = 'CONST_BOOLEAN'\r\n\t\tif is_define then\r\n\t\t\tnum = value\r\n\t\telse\r\n\t\t\tnum = (value and '1.0' or '0.0')\r\n\t\tend\r\n\telseif const_type == 'number' then\r\n\t\tconst_type = 'CONST_NUMBER'\r\n\t\tif is_define then\r\n\t\t\tnum = value\r\n\t\telse\r\n\t\t\tnum = tostring(value)\r\n\t\tend\r\n\telseif const_type == 'string' then\r\n\t\tconst_type = 'CONST_STRING'\r\n\t\tif is_define then\r\n\t\t\tstr = value\r\n\t\telse\r\n\t\t\tstr = '\"' .. value .. '\"'\r\n\t\tend\r\n\telse\r\n\t\t-- un-supported type.\r\n\t\tconst_type = nil\r\n\t\tvalue = nil\r\n\tend\r\n\t-- write constant.\r\n\tif const_type then\r\n\t\tif is_define then\r\n\t\t\trec:write_part(\"const_regs\", {\r\n\t\t\t'#ifdef ', value, '\\n',\r\n\t\t\t'  {\"', constant.name, '\", ', str, ', ', num, ', ',const_type,'},\\n',\r\n\t\t\t'#endif\\n',\r\n\t\t\t})\r\n\t\telse\r\n\t\t\trec:write_part(\"const_regs\", {\r\n\t\t\t'  {\"', constant.name, '\", ', str, ', ', num, ', ',const_type,'},\\n',\r\n\t\t\t})\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local const_type = nil",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local str = 'NULL'",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local num = '0.0'",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "local value = constant.value",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "local is_define = constant.is_define",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "const_type = constant.vtype or type(value)",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "if const_type == 'boolean' then\r\n\t\tconst_type = 'CONST_BOOLEAN'\r\n\t\tif is_define then\r\n\t\t\tnum = value\r\n\t\telse\r\n\t\t\tnum = (value and '1.0' or '0.0')\r\n\t\tend\r\n\telseif const_type == 'number' then\r\n\t\tconst_type = 'CONST_NUMBER'\r\n\t\tif is_define then\r\n\t\t\tnum = value\r\n\t\telse\r\n\t\t\tnum = tostring(value)\r\n\t\tend\r\n\telseif const_type == 'string' then\r\n\t\tconst_type = 'CONST_STRING'\r\n\t\tif is_define then\r\n\t\t\tstr = value\r\n\t\telse\r\n\t\t\tstr = '\"' .. value .. '\"'\r\n\t\tend\r\n\telse\r\n\t\t-- un-supported type.\r\n\t\tconst_type = nil\r\n\t\tvalue = nil\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "const_type = 'CONST_BOOLEAN'",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "if is_define then\r\n\t\t\tnum = value\r\n\t\telse\r\n\t\t\tnum = (value and '1.0' or '0.0')\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "num = value",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "num = (value and '1.0' or '0.0')",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "const_type = 'CONST_NUMBER'",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "if is_define then\r\n\t\t\tnum = value\r\n\t\telse\r\n\t\t\tnum = tostring(value)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "num = tostring(value)",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "const_type = 'CONST_STRING'",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "if is_define then\r\n\t\t\tstr = value\r\n\t\telse\r\n\t\t\tstr = '\"' .. value .. '\"'\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "str = value",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "str = '\"' .. value .. '\"'",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "const_type = nil",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "value = nil",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "if const_type then\r\n\t\tif is_define then\r\n\t\t\trec:write_part(\"const_regs\", {\r\n\t\t\t'#ifdef ', value, '\\n',\r\n\t\t\t'  {\"', constant.name, '\", ', str, ', ', num, ', ',const_type,'},\\n',\r\n\t\t\t'#endif\\n',\r\n\t\t\t})\r\n\t\telse\r\n\t\t\trec:write_part(\"const_regs\", {\r\n\t\t\t'  {\"', constant.name, '\", ', str, ', ', num, ', ',const_type,'},\\n',\r\n\t\t\t})\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "if is_define then\r\n\t\t\trec:write_part(\"const_regs\", {\r\n\t\t\t'#ifdef ', value, '\\n',\r\n\t\t\t'  {\"', constant.name, '\", ', str, ', ', num, ', ',const_type,'},\\n',\r\n\t\t\t'#endif\\n',\r\n\t\t\t})\r\n\t\telse\r\n\t\t\trec:write_part(\"const_regs\", {\r\n\t\t\t'  {\"', constant.name, '\", ', str, ', ', num, ', ',const_type,'},\\n',\r\n\t\t\t})\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "rec:write_part(\"const_regs\", {\r\n\t\t\t'#ifdef ', value, '\\n',\r\n\t\t\t'  {\"', constant.name, '\", ', str, ', ', num, ', ',const_type,'},\\n',\r\n\t\t\t'#endif\\n',\r\n\t\t\t})",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "rec:write_part(\"const_regs\", {\r\n\t\t\t'  {\"', constant.name, '\", ', str, ', ', num, ', ',const_type,'},\\n',\r\n\t\t\t})",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "local function add_field(rec, field)\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "local function gen_if_defs_code(rec)\r\n\tif rec.c_if_defs then return end\r\n\t-- generate #if code for if_defs.\r\n\tlocal if_defs = rec.if_defs\r\n\tlocal endif\r\n\tif type(if_defs) == 'string' then\r\n\t\tif_defs = \"#if (\" .. if_defs .. ')\\n'\r\n\t\tendif = '#endif\\n'\r\n\telseif type(if_defs) == 'table' then\r\n\t\tif_defs = \"#if (\" .. table.concat(if_defs,\"|\") .. ')\\n'\r\n\t\tendif = '#endif\\n'\r\n\telse\r\n\t\tif_defs = ''\r\n\t\tendif = ''\r\n\tend\r\n\trec.c_if_defs = if_defs\r\n\trec.c_endif = endif\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "if rec.c_if_defs then return end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 33,
    "text": "local if_defs = rec.if_defs",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "local endif",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "if type(if_defs) == 'string' then\r\n\t\tif_defs = \"#if (\" .. if_defs .. ')\\n'\r\n\t\tendif = '#endif\\n'\r\n\telseif type(if_defs) == 'table' then\r\n\t\tif_defs = \"#if (\" .. table.concat(if_defs,\"|\") .. ')\\n'\r\n\t\tendif = '#endif\\n'\r\n\telse\r\n\t\tif_defs = ''\r\n\t\tendif = ''\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "if_defs = \"#if (\" .. if_defs .. ')\\n'",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "endif = '#endif\\n'",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "if_defs = \"#if (\" .. table.concat(if_defs,\"|\") .. ')\\n'",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "if_defs = ''",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "endif = ''",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "rec.c_if_defs = if_defs",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "rec.c_endif = endif",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "local function reg_object_function(self, func, object)\r\n\tlocal name = func.name\r\n\tlocal c_name = func.c_name\r\n\tlocal reg_list\r\n\r\n\t-- generate #if/#endif code\r\n\tgen_if_defs_code(func)\r\n\r\n\t-- check if this is object free/destructure method\r\n\tif func.is_destructor then\r\n\t\t-- add '__gc' method.\r\n\t\tif not self._cur_module.disable__gc and not object.disable__gc then\r\n\t\t\tobject:write_part('metas_regs',\r\n\t\t\t\t{'  {\"__gc\", ', func.c_name, '},\\n'})\r\n\t\tend\r\n\t\tif func._is_hidden then\r\n\t\t\t-- don't register '__gc' metamethods as a public object method.\r\n\t\t\treturn '_priv', '__gc'\r\n\t\tend\r\n\t\t-- also register as a normal method.\r\n\t\treg_list = object.methods_regs\r\n\telseif func.is_constructor then\r\n\t\treg_list = \"pub_funcs_regs\"\r\n\telseif func._is_meta_method then\r\n\t\treg_list = \"metas_regs\"\r\n\t\t-- use Lua's __* metamethod names\r\n\t\tname = lua_meta_methods[func.name]\r\n\telseif func._is_method then\r\n\t\treg_list = object.methods_regs\r\n\telse\r\n\t\treg_list = object.functions_regs\r\n\tend\r\n\t-- add method to reg list.\r\n\tobject:write_part(reg_list,\r\n\t\t{func.c_if_defs, '  {\"', name, '\", ', c_name, '},\\n', func.c_endif})\r\n\treturn name\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "local name = func.name",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "local c_name = func.c_name",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "local reg_list",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "gen_if_defs_code(func)",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "if func.is_destructor then\r\n\t\t-- add '__gc' method.\r\n\t\tif not self._cur_module.disable__gc and not object.disable__gc then\r\n\t\t\tobject:write_part('metas_regs',\r\n\t\t\t\t{'  {\"__gc\", ', func.c_name, '},\\n'})\r\n\t\tend\r\n\t\tif func._is_hidden then\r\n\t\t\t-- don't register '__gc' metamethods as a public object method.\r\n\t\t\treturn '_priv', '__gc'\r\n\t\tend\r\n\t\t-- also register as a normal method.\r\n\t\treg_list = object.methods_regs\r\n\telseif func.is_constructor then\r\n\t\treg_list = \"pub_funcs_regs\"\r\n\telseif func._is_meta_method then\r\n\t\treg_list = \"metas_regs\"\r\n\t\t-- use Lua's __* metamethod names\r\n\t\tname = lua_meta_methods[func.name]\r\n\telseif func._is_method then\r\n\t\treg_list = object.methods_regs\r\n\telse\r\n\t\treg_list = object.functions_regs\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "if not self._cur_module.disable__gc and not object.disable__gc then\r\n\t\t\tobject:write_part('metas_regs',\r\n\t\t\t\t{'  {\"__gc\", ', func.c_name, '},\\n'})\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "object:write_part('metas_regs',\r\n\t\t\t\t{'  {\"__gc\", ', func.c_name, '},\\n'})",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "if func._is_hidden then\r\n\t\t\t-- don't register '__gc' metamethods as a public object method.\r\n\t\t\treturn '_priv', '__gc'\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "reg_list = object.methods_regs",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "reg_list = \"pub_funcs_regs\"",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "reg_list = \"metas_regs\"",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "name = lua_meta_methods[func.name]",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "reg_list = object.functions_regs",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "object:write_part(reg_list,\r\n\t\t{func.c_if_defs, '  {\"', name, '\", ', c_name, '},\\n', func.c_endif})",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "local function base_caster_name(class_name, base_name)\r\n\t\treturn 'base_cast_' .. class_name .. '_to_' .. base_name\r\n\tend",
    "type": "function"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "local function create_base_caster(class_name, base_name)\r\n\t\tlocal base_cast = base_caster_name(class_name, base_name)\r\n\t\tlocal caster_def = 'static void ' .. base_cast .. '(void **obj)'\r\n\t\t-- add base_cast decl.\r\n\t\tparent:write_part('funcdefs', {caster_def, ';\\n'})\r\n\t\t-- start base_cast function.\r\n\t\trec:write_part('src', {caster_def, ' {\\n'})\r\n\t\treturn base_cast\r\n\tend",
    "type": "function"
  }, {
    "id": 63,
    "text": "local base_cast = base_caster_name(class_name, base_name)",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "local caster_def = 'static void ' .. base_cast .. '(void **obj)'",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "parent:write_part('funcdefs', {caster_def, ';\\n'})",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "rec:write_part('src', {caster_def, ' {\\n'})",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "local function build_chain_of_caster_calls(class_name, chain)\r\n\t\tlocal prev_class = class_name\r\n\t\tlocal caster_calls = {}\r\n\t\tfor i=1,#chain do\r\n\t\t\tlocal caster = chain[i]\r\n\t\t\tlocal base_name = caster.base.name\r\n\t\t\t-- only need to call custom casters.\r\n\t\t\tif caster.cast_type ~= 'direct' then\r\n\t\t\t\t-- call caster function.\r\n\t\t\t\ttable.insert(caster_calls,\r\n\t\t\t\t\t'\\t' .. base_caster_name(prev_class, base_name) .. '(obj);\\n')\r\n\t\t\tend\r\n\t\t\tprev_class = base_name\r\n\t\tend\r\n\t\tif #caster_calls > 0 then\r\n\t\t\treturn table.concat(caster_calls)\r\n\t\tend\r\n\t\treturn nil\r\n\tend",
    "type": "function"
  }, {
    "id": 69,
    "text": "local prev_class = class_name",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "local caster_calls = {}",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "for i=1,#chain do\r\n\t\t\tlocal caster = chain[i]\r\n\t\t\tlocal base_name = caster.base.name\r\n\t\t\t-- only need to call custom casters.\r\n\t\t\tif caster.cast_type ~= 'direct' then\r\n\t\t\t\t-- call caster function.\r\n\t\t\t\ttable.insert(caster_calls,\r\n\t\t\t\t\t'\\t' .. base_caster_name(prev_class, base_name) .. '(obj);\\n')\r\n\t\t\tend\r\n\t\t\tprev_class = base_name\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 72,
    "text": "local caster = chain[i]",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "local base_name = caster.base.name",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "if caster.cast_type ~= 'direct' then\r\n\t\t\t\t-- call caster function.\r\n\t\t\t\ttable.insert(caster_calls,\r\n\t\t\t\t\t'\\t' .. base_caster_name(prev_class, base_name) .. '(obj);\\n')\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "table.insert(caster_calls,\r\n\t\t\t\t\t'\\t' .. base_caster_name(prev_class, base_name) .. '(obj);\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "prev_class = base_name",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "if #caster_calls > 0 then\r\n\t\t\treturn table.concat(caster_calls)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "local function create_chain_base_caster(class_name, chain)\r\n\t\tlocal end_caster = chain[#chain]\r\n\t\tlocal base = end_caster.base\r\n\t\tlocal chain_caster = build_chain_of_caster_calls(class_name, chain)\r\n\t\tlocal base_cast = 'NULL'\r\n\t\tif chain_caster ~= nil then\r\n\t\t\t-- create base caster for ancestor base class.\r\n\t\t\tbase_cast = create_base_caster(class_name, base.name)\r\n\t\t\t-- end caster function.\r\n\t\t\trec:write_part('src', {chain_caster,'}\\n\\n'})\r\n\t\tend\r\n\t\t-- write base record.\r\n\t\tparent:write_part(\"base_regs\", {\r\n\t\t'  {', base._obj_id, ', ', base_cast, '},\\n',\r\n\t\t})\r\n\tend",
    "type": "function"
  }, {
    "id": 80,
    "text": "local end_caster = chain[#chain]",
    "type": "statement:localassign"
  }, {
    "id": 81,
    "text": "local base = end_caster.base",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "local chain_caster = build_chain_of_caster_calls(class_name, chain)",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "local base_cast = 'NULL'",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "if chain_caster ~= nil then\r\n\t\t\t-- create base caster for ancestor base class.\r\n\t\t\tbase_cast = create_base_caster(class_name, base.name)\r\n\t\t\t-- end caster function.\r\n\t\t\trec:write_part('src', {chain_caster,'}\\n\\n'})\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 85,
    "text": "base_cast = create_base_caster(class_name, base.name)",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "rec:write_part('src', {chain_caster,'}\\n\\n'})",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "parent:write_part(\"base_regs\", {\r\n\t\t'  {', base._obj_id, ', ', base_cast, '},\\n',\r\n\t\t})",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 89,
    "text": "local function src_write(...)\r\n\tsrc_file:write(...)\r\nend",
    "type": "function"
  }, {
    "id": 90,
    "text": "src_file:write(...)",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "function(self, rec, parent)\r\n\tlocal module_c_name = rec.name:gsub('(%.)','_')\r\n\trec:add_var('module_c_name', module_c_name)\r\n\trec:add_var('module_name', rec.name)\r\n\trec:add_var('object_name', rec.name)\r\n\trec:add_var('nobj_realloc', rec.realloc or 'nobj_realloc')\r\n\tself._cur_module = rec\r\n\tself._modules_out[rec.name] = rec\r\n\trec:write_part(\"typedefs\", obj_udata_types)\r\n\t-- start obj_type array\r\n\trec:write_part('obj_types',\r\n\t\t{'static obj_type obj_types[] = {\\n'})\r\n\t-- start module/object register array.\r\n\trec:write_part(\"reg_sub_modules\",\r\n\t\t{'static const reg_sub_module reg_sub_modules[] = {\\n'})\r\n\t-- start submodule_libs array\r\n\trec:write_part(\"submodule_libs\",\r\n\t\t{'static const luaL_Reg submodule_libs[] = {\\n'})\r\n\t-- add create_object_instance_cache function.\r\n\trec:write_part(\"luaopen\", create_object_instance_cache)\r\n\t-- package_is_constructor?\r\n\trec:write_part(\"defines\",\r\n\t\t{'#define REG_PACKAGE_IS_CONSTRUCTOR ',(rec.package_is_constructor and 1 or 0),'\\n'})\r\n\t-- module_globals?\r\n\trec:write_part(\"defines\",\r\n\t\t{'#define REG_MODULES_AS_GLOBALS ',(rec.module_globals and 1 or 0),'\\n'})\r\n\t-- use_globals?\r\n\trec:write_part(\"defines\",\r\n\t\t{'#define REG_OBJECTS_AS_GLOBALS ',(rec.use_globals and 1 or 0),'\\n'})\r\n\t-- hide_meta_info?\r\n\tif rec.hide_meta_info == nil then rec.hide_meta_info = true end\r\n\trec:write_part(\"defines\",\r\n\t\t{'#define OBJ_DATA_HIDDEN_METATABLE ',(rec.hide_meta_info and 1 or 0),'\\n'})\r\n\t-- field access method: obj:field()/obj:set_field() or obj.field\r\n\trec:write_part(\"defines\",\r\n\t\t{'#define USE_FIELD_GET_SET_METHODS ',(rec.use_field_get_set_methods and 1 or 0),'\\n'})\r\n\t-- where we want the module function registered.\r\n\trec.functions_regs = 'function_regs'\r\n\trec.methods_regs = 'function_regs'\r\n\trec:write_part(rec.methods_regs,\r\n\t\t{'static const luaL_reg ${module_c_name}_function[] = {\\n'})\r\nend",
    "type": "function"
  }, {
    "id": 93,
    "text": "local module_c_name = rec.name:gsub('(%.)','_')",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "rec:add_var('module_c_name', module_c_name)",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "rec:add_var('module_name', rec.name)",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "rec:add_var('object_name', rec.name)",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "rec:add_var('nobj_realloc', rec.realloc or 'nobj_realloc')",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "self._cur_module = rec",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "self._modules_out[rec.name] = rec",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "rec:write_part(\"typedefs\", obj_udata_types)",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "rec:write_part('obj_types',\r\n\t\t{'static obj_type obj_types[] = {\\n'})",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "rec:write_part(\"reg_sub_modules\",\r\n\t\t{'static const reg_sub_module reg_sub_modules[] = {\\n'})",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "rec:write_part(\"submodule_libs\",\r\n\t\t{'static const luaL_Reg submodule_libs[] = {\\n'})",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "rec:write_part(\"luaopen\", create_object_instance_cache)",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "rec:write_part(\"defines\",\r\n\t\t{'#define REG_PACKAGE_IS_CONSTRUCTOR ',(rec.package_is_constructor and 1 or 0),'\\n'})",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "rec:write_part(\"defines\",\r\n\t\t{'#define REG_MODULES_AS_GLOBALS ',(rec.module_globals and 1 or 0),'\\n'})",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "rec:write_part(\"defines\",\r\n\t\t{'#define REG_OBJECTS_AS_GLOBALS ',(rec.use_globals and 1 or 0),'\\n'})",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "if rec.hide_meta_info == nil then rec.hide_meta_info = true end",
    "type": "statement:if"
  }, {
    "id": 109,
    "text": "rec.hide_meta_info = true",
    "type": "statement:assign"
  }, {
    "id": 110,
    "text": "rec:write_part(\"defines\",\r\n\t\t{'#define OBJ_DATA_HIDDEN_METATABLE ',(rec.hide_meta_info and 1 or 0),'\\n'})",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "rec:write_part(\"defines\",\r\n\t\t{'#define USE_FIELD_GET_SET_METHODS ',(rec.use_field_get_set_methods and 1 or 0),'\\n'})",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "rec.functions_regs = 'function_regs'",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "rec.methods_regs = 'function_regs'",
    "type": "statement:assign"
  }, {
    "id": 114,
    "text": "rec:write_part(rec.methods_regs,\r\n\t\t{'static const luaL_reg ${module_c_name}_function[] = {\\n'})",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 116,
    "text": "function(self, rec, parent)\r\n\t-- end obj_type array\r\n\trec:write_part('obj_types',{\r\n\t'  {NULL, -1, 0, NULL},\\n',\r\n\t'};\\n'\r\n\t})\r\n\t-- end module/object register array.\r\n\trec:write_part(\"reg_sub_modules\", {\r\n\t'  {NULL, 0, NULL, NULL, NULL, NULL, NULL, NULL, 0}\\n',\r\n\t'};\\n\\n'\r\n\t})\r\n\t-- end submodule_libs array\r\n\trec:write_part(\"submodule_libs\", {\r\n\t'  {NULL, NULL}\\n',\r\n\t'};\\n\\n'\r\n\t})\r\n\t-- end function regs\r\n\trec:write_part(rec.methods_regs, {\r\n\t'  {NULL, NULL}\\n',\r\n\t'};\\n\\n'\r\n\t})\r\n\t-- build constants list\r\n\trec:write_part(\"const_regs\",\r\n\t\t{'static const obj_const ${module_c_name}_constants[] = {\\n'})\r\n\t-- add constants\r\n\tfor _,const in pairs(rec.constants) do\r\n\t\tadd_constant(rec, const)\r\n\tend\r\n\trec:write_part(\"const_regs\", {\r\n\t'  {NULL, NULL, 0.0 , 0}\\n',\r\n\t'};\\n\\n'\r\n\t})\r\n\r\n\t-- add main luaopen function.\r\n\trec:add_var(\"module_init_src\", rec:dump_parts{ \"module_init_src\"})\r\n\trec:write_part(\"luaopen\", luaopen_main)\r\n\trec:write_part(\"helper_funcs\", objHelperFunc)\r\n\t-- append extra source code.\r\n\trec:write_part(\"extra_code\", rec:dump_parts{ \"src\" })\r\n\t-- combine reg arrays into one part.\r\n\tlocal arrays = {\r\n\t\t\"function_regs\", \"methods_regs\", \"metas_regs\", \"base_regs\", \"field_regs\", \"const_regs\"}\r\n\trec:write_part(\"reg_arrays\", rec:dump_parts(arrays))\r\n\t-- apply variables to parts\r\n\tlocal parts = { \"defines\", \"typedefs\", \"funcdefs\", \"reg_sub_modules\", \"submodule_regs\",\r\n\t\t\"submodule_libs\", \"helper_funcs\", \"extra_code\", \"methods\", \"reg_arrays\", \"luaopen_defs\",\r\n\t\t\"luaopen\"}\r\n\trec:vars_parts(parts)\r\n\r\n\tself._cur_module = nil\r\nend",
    "type": "function"
  }, {
    "id": 117,
    "text": "rec:write_part('obj_types',{\r\n\t'  {NULL, -1, 0, NULL},\\n',\r\n\t'};\\n'\r\n\t})",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "rec:write_part(\"reg_sub_modules\", {\r\n\t'  {NULL, 0, NULL, NULL, NULL, NULL, NULL, NULL, 0}\\n',\r\n\t'};\\n\\n'\r\n\t})",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "rec:write_part(\"submodule_libs\", {\r\n\t'  {NULL, NULL}\\n',\r\n\t'};\\n\\n'\r\n\t})",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "rec:write_part(rec.methods_regs, {\r\n\t'  {NULL, NULL}\\n',\r\n\t'};\\n\\n'\r\n\t})",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "rec:write_part(\"const_regs\",\r\n\t\t{'static const obj_const ${module_c_name}_constants[] = {\\n'})",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "for _,const in pairs(rec.constants) do\r\n\t\tadd_constant(rec, const)\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 123,
    "text": "add_constant(rec, const)",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "rec:write_part(\"const_regs\", {\r\n\t'  {NULL, NULL, 0.0 , 0}\\n',\r\n\t'};\\n\\n'\r\n\t})",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "rec:add_var(\"module_init_src\", rec:dump_parts{ \"module_init_src\"})",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "rec:write_part(\"luaopen\", luaopen_main)",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "rec:write_part(\"helper_funcs\", objHelperFunc)",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "rec:write_part(\"extra_code\", rec:dump_parts{ \"src\" })",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "local arrays = {\r\n\t\t\"function_regs\", \"methods_regs\", \"metas_regs\", \"base_regs\", \"field_regs\", \"const_regs\"}",
    "type": "statement:localassign"
  }, {
    "id": 130,
    "text": "rec:write_part(\"reg_arrays\", rec:dump_parts(arrays))",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "local parts = { \"defines\", \"typedefs\", \"funcdefs\", \"reg_sub_modules\", \"submodule_regs\",\r\n\t\t\"submodule_libs\", \"helper_funcs\", \"extra_code\", \"methods\", \"reg_arrays\", \"luaopen_defs\",\r\n\t\t\"luaopen\"}",
    "type": "statement:localassign"
  }, {
    "id": 132,
    "text": "rec:vars_parts(parts)",
    "type": "statement:functioncall"
  }, {
    "id": 133,
    "text": "self._cur_module = nil",
    "type": "statement:assign"
  }, {
    "id": 134,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 135,
    "text": "function(self, rec, parent)\r\n\trec:add_var('object_name', rec.name)\r\n\tlocal func_def = 'static void ' .. rec.func_name ..\r\n\t\t'(lua_State *L, ${object_name} err)'\r\n\t-- add push error function decl.\r\n\trec:write_part('funcdefs', {\r\n\t\t'typedef ', rec.c_type, ' ${object_name};\\n\\n',\r\n\t\tfunc_def, ';\\n'\r\n\t})\r\n\t-- start push error function.\r\n\trec:write_part('src', {func_def, ' {\\n'})\r\n\t-- add C variable for error string to be pushed.\r\n\trec:write_part(\"src\",\r\n\t\t{'  const char *err_str = NULL;\\n'})\r\nend",
    "type": "function"
  }, {
    "id": 136,
    "text": "local func_def = 'static void ' .. rec.func_name ..\r\n\t\t'(lua_State *L, ${object_name} err)'",
    "type": "statement:localassign"
  }, {
    "id": 137,
    "text": "rec:write_part('funcdefs', {\r\n\t\t'typedef ', rec.c_type, ' ${object_name};\\n\\n',\r\n\t\tfunc_def, ';\\n'\r\n\t})",
    "type": "statement:functioncall"
  }, {
    "id": 138,
    "text": "rec:write_part('src', {func_def, ' {\\n'})",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "rec:write_part(\"src\",\r\n\t\t{'  const char *err_str = NULL;\\n'})",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 141,
    "text": "function(self, rec, parent)\r\n\t-- push error value onto the stack.\r\n\trec:write_part(\"src\", [[\r\n\tif(err_str) {\r\n\t\tlua_pushstring(L, err_str);\r\n\t} else {\r\n\t\tlua_pushnil(L);\r\n\t}\r\n}\r\n\r\n]])\r\n\t-- append custom error push function.\r\n\tlocal parts = { \"funcdefs\", \"src\" }\r\n\trec:vars_parts(parts)\r\n\tparent:copy_parts(rec, { \"funcdefs\" })\r\n\t-- append custom error push function.\r\n\tparent:write_part(\"methods\", rec:dump_parts{ \"src\" })\r\n\r\nend",
    "type": "function"
  }, {
    "id": 142,
    "text": "rec:write_part(\"src\", [[\r\n\tif(err_str) {\r\n\t\tlua_pushstring(L, err_str);\r\n\t} else {\r\n\t\tlua_pushnil(L);\r\n\t}\r\n}\r\n\r\n]])",
    "type": "statement:functioncall"
  }, {
    "id": 143,
    "text": "local parts = { \"funcdefs\", \"src\" }",
    "type": "statement:localassign"
  }, {
    "id": 144,
    "text": "parent:copy_parts(rec, { \"funcdefs\" })",
    "type": "statement:functioncall"
  }, {
    "id": 145,
    "text": "parent:write_part(\"methods\", rec:dump_parts{ \"src\" })",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 147,
    "text": "function(self, rec, parent)\r\n\trec:add_var('object_name', rec.name)\r\n\t-- make luaL_reg arrays for this object\r\n\tif not rec.is_package then\r\n\t\trec:write_part(\"metas_regs\",\r\n\t\t\t{'static const luaL_reg obj_${object_name}_metas[] = {\\n'})\r\n\t\trec:write_part(\"base_regs\",\r\n\t\t\t{'static const obj_base obj_${object_name}_bases[] = {\\n'})\r\n\t\trec:write_part(\"field_regs\",\r\n\t\t\t{'static const obj_field obj_${object_name}_fields[] = {\\n'})\r\n\t\t-- where we want the module function registered.\r\n\t\trec.methods_regs = 'methods_regs'\r\n\t\trec:write_part(rec.methods_regs,\r\n\t\t\t{'static const luaL_reg obj_${object_name}_methods[] = {\\n'})\r\n\telseif rec.is_meta then\r\n\t\trec:write_part(\"metas_regs\",\r\n\t\t\t{'static const luaL_reg obj_${object_name}_metas[] = {\\n'})\r\n\t\t-- where we want the module function registered.\r\n\t\trec.methods_regs = 'methods_regs'\r\n\t\trec:write_part(rec.methods_regs,\r\n\t\t\t{'static const luaL_reg obj_${object_name}_methods[] = {\\n'})\r\n\tend\r\n\trec:write_part(\"const_regs\",\r\n\t\t{'static const obj_const obj_${object_name}_constants[] = {\\n'})\r\n\trec.functions_regs = 'pub_funcs_regs'\r\n\trec:write_part(\"pub_funcs_regs\",\r\n\t\t{'static const luaL_reg obj_${object_name}_pub_funcs[] = {\\n'})\r\nend",
    "type": "function"
  }, {
    "id": 148,
    "text": "if not rec.is_package then\r\n\t\trec:write_part(\"metas_regs\",\r\n\t\t\t{'static const luaL_reg obj_${object_name}_metas[] = {\\n'})\r\n\t\trec:write_part(\"base_regs\",\r\n\t\t\t{'static const obj_base obj_${object_name}_bases[] = {\\n'})\r\n\t\trec:write_part(\"field_regs\",\r\n\t\t\t{'static const obj_field obj_${object_name}_fields[] = {\\n'})\r\n\t\t-- where we want the module function registered.\r\n\t\trec.methods_regs = 'methods_regs'\r\n\t\trec:write_part(rec.methods_regs,\r\n\t\t\t{'static const luaL_reg obj_${object_name}_methods[] = {\\n'})\r\n\telseif rec.is_meta then\r\n\t\trec:write_part(\"metas_regs\",\r\n\t\t\t{'static const luaL_reg obj_${object_name}_metas[] = {\\n'})\r\n\t\t-- where we want the module function registered.\r\n\t\trec.methods_regs = 'methods_regs'\r\n\t\trec:write_part(rec.methods_regs,\r\n\t\t\t{'static const luaL_reg obj_${object_name}_methods[] = {\\n'})\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 149,
    "text": "rec:write_part(\"metas_regs\",\r\n\t\t\t{'static const luaL_reg obj_${object_name}_metas[] = {\\n'})",
    "type": "statement:functioncall"
  }, {
    "id": 150,
    "text": "rec:write_part(\"base_regs\",\r\n\t\t\t{'static const obj_base obj_${object_name}_bases[] = {\\n'})",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "rec:write_part(\"field_regs\",\r\n\t\t\t{'static const obj_field obj_${object_name}_fields[] = {\\n'})",
    "type": "statement:functioncall"
  }, {
    "id": 152,
    "text": "rec.methods_regs = 'methods_regs'",
    "type": "statement:assign"
  }, {
    "id": 153,
    "text": "rec:write_part(rec.methods_regs,\r\n\t\t\t{'static const luaL_reg obj_${object_name}_methods[] = {\\n'})",
    "type": "statement:functioncall"
  }, {
    "id": 154,
    "text": "rec:write_part(\"const_regs\",\r\n\t\t{'static const obj_const obj_${object_name}_constants[] = {\\n'})",
    "type": "statement:functioncall"
  }, {
    "id": 155,
    "text": "rec.functions_regs = 'pub_funcs_regs'",
    "type": "statement:assign"
  }, {
    "id": 156,
    "text": "rec:write_part(\"pub_funcs_regs\",\r\n\t\t{'static const luaL_reg obj_${object_name}_pub_funcs[] = {\\n'})",
    "type": "statement:functioncall"
  }, {
    "id": 157,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 158,
    "text": "function(self, rec, parent)\r\n\t-- check for dyn_caster\r\n\tlocal dyn_caster = 'NULL'\r\n\tif rec.has_dyn_caster then\r\n\t\tdyn_caster = rec.has_dyn_caster.dyn_caster_name\r\n\tend\r\n\t-- create check/delete/push macros\r\n\tlocal ud_type = rec.userdata_type\r\n\tif not rec.no_weak_ref then\r\n\t\tud_type = ud_type .. '_weak'\r\n\tend\r\n\tif not rec.is_package then\r\n\t\trec:write_part(\"obj_check_delete_push\", {\r\n\t\t\trec.c_custom_check_delete_push or obj_type_check_delete_push[ud_type],\r\n\t\t\t'\\n'\r\n\t\t})\r\n\tend\r\n\t-- object type flags\r\n\tlocal flags = {}\r\n\tif not rec.no_weak_ref then\r\n\t\tflags[#flags+1] = 'OBJ_TYPE_FLAG_WEAK_REF'\r\n\tend\r\n\tif ud_type == 'simple' or ud_type == 'simple ptr' or ud_type == 'embed' then\r\n\t\tflags[#flags+1] = 'OBJ_TYPE_SIMPLE'\r\n\tend\r\n\tif #flags > 0 then\r\n\t\tflags = table.concat(flags, '|')\r\n\telse\r\n\t\tflags = '0'\r\n\tend\r\n\t-- build obj_type info.\r\n\trec:write_part('obj_types', {\r\n\t'#define obj_type_id_${object_name} ', rec._obj_id, '\\n',\r\n\t'#define ', rec._obj_type_name, ' (obj_types[obj_type_id_${object_name}])\\n',\r\n\t'  { ', dyn_caster, ', ', rec._obj_id , ', ',flags,', \"${object_name}\" },\\n'\r\n\t})\r\n\tif not rec.is_package then\r\n\t\t-- check if object has a '__str__' method.\r\n\t\tif rec.functions['__str__'] == nil and rec.functions['__tostring'] == nil then\r\n\t\t\trec:write_part('metas_regs',\r\n\t\t\t\t{'  {\"__tostring\", ',obj_type_equal_tostring[ud_type],'_tostring},\\n'})\r\n\t\tend\r\n\t\tif rec.functions['__eq__'] == nil and rec.functions['__eq'] == nil then\r\n\t\t\trec:write_part('metas_regs',\r\n\t\t\t\t{'  {\"__eq\", ',obj_type_equal_tostring[ud_type],'_equal},\\n'})\r\n\t\tend\r\n\t\t-- finish luaL_reg arrays for this object\r\n\t\trec:write_part(\"methods_regs\", {\r\n\t\t'  {NULL, NULL}\\n',\r\n\t\t'};\\n\\n'\r\n\t\t})\r\n\t\trec:write_part(\"metas_regs\", {\r\n\t\t'  {NULL, NULL}\\n',\r\n\t\t'};\\n\\n'\r\n\t\t})\r\n\t\trec:write_part(\"base_regs\", {\r\n\t\t'  {-1, NULL}\\n',\r\n\t\t'};\\n\\n'\r\n\t\t})\r\n\t\t-- add fields\r\n\t\tfor _,field in pairs(rec.fields) do\r\n\t\t\tadd_field(rec, field)\r\n\t\tend\r\n\t\trec:write_part(\"field_regs\", {\r\n\t\t'  {NULL, 0, 0, 0}\\n',\r\n\t\t'};\\n\\n'\r\n\t\t})\r\n\telseif rec.is_meta then\r\n\t\t-- finish luaL_reg arrays for this object\r\n\t\trec:write_part(\"methods_regs\", {\r\n\t\t'  {NULL, NULL}\\n',\r\n\t\t'};\\n\\n'\r\n\t\t})\r\n\t\trec:write_part(\"metas_regs\", {\r\n\t\t'  {NULL, NULL}\\n',\r\n\t\t'};\\n\\n'\r\n\t\t})\r\n\tend\r\n\t-- add constants\r\n\tfor _,const in pairs(rec.constants) do\r\n\t\tadd_constant(rec, const)\r\n\tend\r\n\trec:write_part(\"const_regs\", {\r\n\t'  {NULL, NULL, 0.0 , 0}\\n',\r\n\t'};\\n\\n'\r\n\t})\r\n\trec:write_part(\"pub_funcs_regs\", {\r\n\t'  {NULL, NULL}\\n',\r\n\t'};\\n\\n'\r\n\t})\r\n\t-- add obj_type to register array.\r\n\tlocal type_info_ptr = '&(' .. rec._obj_type_name .. ')'\r\n\tif rec.is_mod_global then\r\n\t\ttype_info_ptr = 'NULL'\r\n\tend\r\n\tlocal object_reg_info\r\n\tlocal bidirectional = '0'\r\n\tif rec.map_constants_bidirectional then\r\n\t\tbidirectional = '1'\r\n\tend\r\n\tif rec.is_meta then\r\n\t\tobject_reg_info = {\r\n\t\t'  { ', type_info_ptr, ', REG_META, obj_${object_name}_pub_funcs, obj_${object_name}_methods, ',\r\n\t\t\t'obj_${object_name}_metas, NULL, NULL, obj_${object_name}_constants, ',bidirectional,'}'\r\n\t\t}\r\n\telseif rec.is_package then\r\n\t\tobject_reg_info = {\r\n\t\t'  { ', type_info_ptr, ', REG_PACKAGE, obj_${object_name}_pub_funcs, NULL, ',\r\n\t\t\t'NULL, NULL, NULL, obj_${object_name}_constants, ',bidirectional,'}'\r\n\t\t}\r\n\telse\r\n\t\tobject_reg_info = {\r\n\t\t'  { ', type_info_ptr, ', REG_OBJECT, obj_${object_name}_pub_funcs, ',\r\n\t\t\t'obj_${object_name}_methods, obj_${object_name}_metas, obj_${object_name}_bases, ',\r\n\t\t\t'obj_${object_name}_fields, obj_${object_name}_constants, ',bidirectional,'}'\r\n\t\t}\r\n\tend\r\n\r\n\tif rec.register_as_submodule then\r\n\t\t-- add submodule luaopen function.\r\n\t\trec:add_var(\"module_init_src\", rec:dump_parts{ \"module_init_src\"})\r\n\t\trec:write_part(\"luaopen\", luaopen_submodule)\r\n\t\trec:write_part(\"luaopen_defs\",\r\n\t\t\t\"int luaopen_${module_c_name}_${object_name}(lua_State *L);\\n\")\r\n\t\trec:write_part(\"submodule_libs\",\r\n\t\t\t'  { \"${module_c_name}.${object_name}\", luaopen_${module_c_name}_${object_name} },\\n')\r\n\t\t-- add submodule type info.\r\n\t\trec:write_part(\"submodule_regs\",\r\n\t\t\t\"static const reg_sub_module submodule_${object_name}_reg =\\n\")\r\n\t\trec:write_part(\"submodule_regs\", object_reg_info)\r\n\t\trec:write_part(\"submodule_regs\", \";\\n\")\r\n\telse\r\n\t\trec:write_part(\"reg_sub_modules\", object_reg_info)\r\n\t\trec:write_part(\"reg_sub_modules\", \",\\n\")\r\n\tend\r\n\t-- append extra source code.\r\n\trec:write_part(\"extra_code\", rec:dump_parts{ \"src\" })\r\n\t-- combine reg arrays into one part.\r\n\tlocal arrays = {\r\n\t\t\"function_regs\", \"pub_funcs_regs\", \"methods_regs\", \"metas_regs\",\r\n\t\t\"base_regs\", \"field_regs\", \"const_regs\"\r\n\t}\r\n\trec:write_part(\"reg_arrays\", rec:dump_parts(arrays))\r\n\t-- apply variables to parts\r\n\tlocal parts = { \"defines\", \"funcdefs\", \"methods\", \"obj_check_delete_push\",\r\n\t\t\"obj_types\", \"reg_arrays\", \"reg_sub_modules\", \"submodule_regs\", \"submodule_libs\",\r\n\t\t\"luaopen_defs\", \"luaopen\", \"extra_code\" }\r\n\trec:vars_parts(parts)\r\n\t-- copy parts to parent\r\n\tparent:copy_parts(rec, parts)\r\n\r\nend",
    "type": "function"
  }, {
    "id": 159,
    "text": "local dyn_caster = 'NULL'",
    "type": "statement:localassign"
  }, {
    "id": 160,
    "text": "if rec.has_dyn_caster then\r\n\t\tdyn_caster = rec.has_dyn_caster.dyn_caster_name\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 161,
    "text": "dyn_caster = rec.has_dyn_caster.dyn_caster_name",
    "type": "statement:assign"
  }, {
    "id": 162,
    "text": "local ud_type = rec.userdata_type",
    "type": "statement:localassign"
  }, {
    "id": 163,
    "text": "if not rec.no_weak_ref then\r\n\t\tud_type = ud_type .. '_weak'\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 164,
    "text": "ud_type = ud_type .. '_weak'",
    "type": "statement:assign"
  }, {
    "id": 165,
    "text": "if not rec.is_package then\r\n\t\trec:write_part(\"obj_check_delete_push\", {\r\n\t\t\trec.c_custom_check_delete_push or obj_type_check_delete_push[ud_type],\r\n\t\t\t'\\n'\r\n\t\t})\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 166,
    "text": "rec:write_part(\"obj_check_delete_push\", {\r\n\t\t\trec.c_custom_check_delete_push or obj_type_check_delete_push[ud_type],\r\n\t\t\t'\\n'\r\n\t\t})",
    "type": "statement:functioncall"
  }, {
    "id": 167,
    "text": "local flags = {}",
    "type": "statement:localassign"
  }, {
    "id": 168,
    "text": "if not rec.no_weak_ref then\r\n\t\tflags[#flags+1] = 'OBJ_TYPE_FLAG_WEAK_REF'\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 169,
    "text": "flags[#flags+1] = 'OBJ_TYPE_FLAG_WEAK_REF'",
    "type": "statement:assign"
  }, {
    "id": 170,
    "text": "if ud_type == 'simple' or ud_type == 'simple ptr' or ud_type == 'embed' then\r\n\t\tflags[#flags+1] = 'OBJ_TYPE_SIMPLE'\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 171,
    "text": "flags[#flags+1] = 'OBJ_TYPE_SIMPLE'",
    "type": "statement:assign"
  }, {
    "id": 172,
    "text": "if #flags > 0 then\r\n\t\tflags = table.concat(flags, '|')\r\n\telse\r\n\t\tflags = '0'\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 173,
    "text": "flags = table.concat(flags, '|')",
    "type": "statement:assign"
  }, {
    "id": 174,
    "text": "flags = '0'",
    "type": "statement:assign"
  }, {
    "id": 175,
    "text": "rec:write_part('obj_types', {\r\n\t'#define obj_type_id_${object_name} ', rec._obj_id, '\\n',\r\n\t'#define ', rec._obj_type_name, ' (obj_types[obj_type_id_${object_name}])\\n',\r\n\t'  { ', dyn_caster, ', ', rec._obj_id , ', ',flags,', \"${object_name}\" },\\n'\r\n\t})",
    "type": "statement:functioncall"
  }, {
    "id": 176,
    "text": "if not rec.is_package then\r\n\t\t-- check if object has a '__str__' method.\r\n\t\tif rec.functions['__str__'] == nil and rec.functions['__tostring'] == nil then\r\n\t\t\trec:write_part('metas_regs',\r\n\t\t\t\t{'  {\"__tostring\", ',obj_type_equal_tostring[ud_type],'_tostring},\\n'})\r\n\t\tend\r\n\t\tif rec.functions['__eq__'] == nil and rec.functions['__eq'] == nil then\r\n\t\t\trec:write_part('metas_regs',\r\n\t\t\t\t{'  {\"__eq\", ',obj_type_equal_tostring[ud_type],'_equal},\\n'})\r\n\t\tend\r\n\t\t-- finish luaL_reg arrays for this object\r\n\t\trec:write_part(\"methods_regs\", {\r\n\t\t'  {NULL, NULL}\\n',\r\n\t\t'};\\n\\n'\r\n\t\t})\r\n\t\trec:write_part(\"metas_regs\", {\r\n\t\t'  {NULL, NULL}\\n',\r\n\t\t'};\\n\\n'\r\n\t\t})\r\n\t\trec:write_part(\"base_regs\", {\r\n\t\t'  {-1, NULL}\\n',\r\n\t\t'};\\n\\n'\r\n\t\t})\r\n\t\t-- add fields\r\n\t\tfor _,field in pairs(rec.fields) do\r\n\t\t\tadd_field(rec, field)\r\n\t\tend\r\n\t\trec:write_part(\"field_regs\", {\r\n\t\t'  {NULL, 0, 0, 0}\\n',\r\n\t\t'};\\n\\n'\r\n\t\t})\r\n\telseif rec.is_meta then\r\n\t\t-- finish luaL_reg arrays for this object\r\n\t\trec:write_part(\"methods_regs\", {\r\n\t\t'  {NULL, NULL}\\n',\r\n\t\t'};\\n\\n'\r\n\t\t})\r\n\t\trec:write_part(\"metas_regs\", {\r\n\t\t'  {NULL, NULL}\\n',\r\n\t\t'};\\n\\n'\r\n\t\t})\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 177,
    "text": "if rec.functions['__str__'] == nil and rec.functions['__tostring'] == nil then\r\n\t\t\trec:write_part('metas_regs',\r\n\t\t\t\t{'  {\"__tostring\", ',obj_type_equal_tostring[ud_type],'_tostring},\\n'})\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 178,
    "text": "rec:write_part('metas_regs',\r\n\t\t\t\t{'  {\"__tostring\", ',obj_type_equal_tostring[ud_type],'_tostring},\\n'})",
    "type": "statement:functioncall"
  }, {
    "id": 179,
    "text": "if rec.functions['__eq__'] == nil and rec.functions['__eq'] == nil then\r\n\t\t\trec:write_part('metas_regs',\r\n\t\t\t\t{'  {\"__eq\", ',obj_type_equal_tostring[ud_type],'_equal},\\n'})\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 180,
    "text": "rec:write_part('metas_regs',\r\n\t\t\t\t{'  {\"__eq\", ',obj_type_equal_tostring[ud_type],'_equal},\\n'})",
    "type": "statement:functioncall"
  }, {
    "id": 181,
    "text": "rec:write_part(\"methods_regs\", {\r\n\t\t'  {NULL, NULL}\\n',\r\n\t\t'};\\n\\n'\r\n\t\t})",
    "type": "statement:functioncall"
  }, {
    "id": 182,
    "text": "rec:write_part(\"metas_regs\", {\r\n\t\t'  {NULL, NULL}\\n',\r\n\t\t'};\\n\\n'\r\n\t\t})",
    "type": "statement:functioncall"
  }, {
    "id": 183,
    "text": "rec:write_part(\"base_regs\", {\r\n\t\t'  {-1, NULL}\\n',\r\n\t\t'};\\n\\n'\r\n\t\t})",
    "type": "statement:functioncall"
  }, {
    "id": 184,
    "text": "for _,field in pairs(rec.fields) do\r\n\t\t\tadd_field(rec, field)\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 185,
    "text": "add_field(rec, field)",
    "type": "statement:functioncall"
  }, {
    "id": 186,
    "text": "rec:write_part(\"field_regs\", {\r\n\t\t'  {NULL, 0, 0, 0}\\n',\r\n\t\t'};\\n\\n'\r\n\t\t})",
    "type": "statement:functioncall"
  }, {
    "id": 187,
    "text": "rec:write_part(\"pub_funcs_regs\", {\r\n\t'  {NULL, NULL}\\n',\r\n\t'};\\n\\n'\r\n\t})",
    "type": "statement:functioncall"
  }, {
    "id": 188,
    "text": "local type_info_ptr = '&(' .. rec._obj_type_name .. ')'",
    "type": "statement:localassign"
  }, {
    "id": 189,
    "text": "if rec.is_mod_global then\r\n\t\ttype_info_ptr = 'NULL'\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 190,
    "text": "type_info_ptr = 'NULL'",
    "type": "statement:assign"
  }, {
    "id": 191,
    "text": "local object_reg_info",
    "type": "statement:localassign"
  }, {
    "id": 192,
    "text": "local bidirectional = '0'",
    "type": "statement:localassign"
  }, {
    "id": 193,
    "text": "if rec.map_constants_bidirectional then\r\n\t\tbidirectional = '1'\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 194,
    "text": "bidirectional = '1'",
    "type": "statement:assign"
  }, {
    "id": 195,
    "text": "if rec.is_meta then\r\n\t\tobject_reg_info = {\r\n\t\t'  { ', type_info_ptr, ', REG_META, obj_${object_name}_pub_funcs, obj_${object_name}_methods, ',\r\n\t\t\t'obj_${object_name}_metas, NULL, NULL, obj_${object_name}_constants, ',bidirectional,'}'\r\n\t\t}\r\n\telseif rec.is_package then\r\n\t\tobject_reg_info = {\r\n\t\t'  { ', type_info_ptr, ', REG_PACKAGE, obj_${object_name}_pub_funcs, NULL, ',\r\n\t\t\t'NULL, NULL, NULL, obj_${object_name}_constants, ',bidirectional,'}'\r\n\t\t}\r\n\telse\r\n\t\tobject_reg_info = {\r\n\t\t'  { ', type_info_ptr, ', REG_OBJECT, obj_${object_name}_pub_funcs, ',\r\n\t\t\t'obj_${object_name}_methods, obj_${object_name}_metas, obj_${object_name}_bases, ',\r\n\t\t\t'obj_${object_name}_fields, obj_${object_name}_constants, ',bidirectional,'}'\r\n\t\t}\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 196,
    "text": "object_reg_info = {\r\n\t\t'  { ', type_info_ptr, ', REG_META, obj_${object_name}_pub_funcs, obj_${object_name}_methods, ',\r\n\t\t\t'obj_${object_name}_metas, NULL, NULL, obj_${object_name}_constants, ',bidirectional,'}'\r\n\t\t}",
    "type": "statement:assign"
  }, {
    "id": 197,
    "text": "object_reg_info = {\r\n\t\t'  { ', type_info_ptr, ', REG_PACKAGE, obj_${object_name}_pub_funcs, NULL, ',\r\n\t\t\t'NULL, NULL, NULL, obj_${object_name}_constants, ',bidirectional,'}'\r\n\t\t}",
    "type": "statement:assign"
  }, {
    "id": 198,
    "text": "object_reg_info = {\r\n\t\t'  { ', type_info_ptr, ', REG_OBJECT, obj_${object_name}_pub_funcs, ',\r\n\t\t\t'obj_${object_name}_methods, obj_${object_name}_metas, obj_${object_name}_bases, ',\r\n\t\t\t'obj_${object_name}_fields, obj_${object_name}_constants, ',bidirectional,'}'\r\n\t\t}",
    "type": "statement:assign"
  }, {
    "id": 199,
    "text": "if rec.register_as_submodule then\r\n\t\t-- add submodule luaopen function.\r\n\t\trec:add_var(\"module_init_src\", rec:dump_parts{ \"module_init_src\"})\r\n\t\trec:write_part(\"luaopen\", luaopen_submodule)\r\n\t\trec:write_part(\"luaopen_defs\",\r\n\t\t\t\"int luaopen_${module_c_name}_${object_name}(lua_State *L);\\n\")\r\n\t\trec:write_part(\"submodule_libs\",\r\n\t\t\t'  { \"${module_c_name}.${object_name}\", luaopen_${module_c_name}_${object_name} },\\n')\r\n\t\t-- add submodule type info.\r\n\t\trec:write_part(\"submodule_regs\",\r\n\t\t\t\"static const reg_sub_module submodule_${object_name}_reg =\\n\")\r\n\t\trec:write_part(\"submodule_regs\", object_reg_info)\r\n\t\trec:write_part(\"submodule_regs\", \";\\n\")\r\n\telse\r\n\t\trec:write_part(\"reg_sub_modules\", object_reg_info)\r\n\t\trec:write_part(\"reg_sub_modules\", \",\\n\")\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 200,
    "text": "rec:write_part(\"luaopen\", luaopen_submodule)",
    "type": "statement:functioncall"
  }, {
    "id": 201,
    "text": "rec:write_part(\"luaopen_defs\",\r\n\t\t\t\"int luaopen_${module_c_name}_${object_name}(lua_State *L);\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 202,
    "text": "rec:write_part(\"submodule_libs\",\r\n\t\t\t'  { \"${module_c_name}.${object_name}\", luaopen_${module_c_name}_${object_name} },\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 203,
    "text": "rec:write_part(\"submodule_regs\",\r\n\t\t\t\"static const reg_sub_module submodule_${object_name}_reg =\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 204,
    "text": "rec:write_part(\"submodule_regs\", object_reg_info)",
    "type": "statement:functioncall"
  }, {
    "id": 205,
    "text": "rec:write_part(\"submodule_regs\", \";\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 206,
    "text": "rec:write_part(\"reg_sub_modules\", object_reg_info)",
    "type": "statement:functioncall"
  }, {
    "id": 207,
    "text": "rec:write_part(\"reg_sub_modules\", \",\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 208,
    "text": "local arrays = {\r\n\t\t\"function_regs\", \"pub_funcs_regs\", \"methods_regs\", \"metas_regs\",\r\n\t\t\"base_regs\", \"field_regs\", \"const_regs\"\r\n\t}",
    "type": "statement:localassign"
  }, {
    "id": 209,
    "text": "local parts = { \"defines\", \"funcdefs\", \"methods\", \"obj_check_delete_push\",\r\n\t\t\"obj_types\", \"reg_arrays\", \"reg_sub_modules\", \"submodule_regs\", \"submodule_libs\",\r\n\t\t\"luaopen_defs\", \"luaopen\", \"extra_code\" }",
    "type": "statement:localassign"
  }, {
    "id": 210,
    "text": "parent:copy_parts(rec, parts)",
    "type": "statement:functioncall"
  }, {
    "id": 211,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 212,
    "text": "function(self, rec, parent)\r\n\trec:add_var('wrap_type', rec.wrap_type)\r\n\trec:add_var('base_type', rec.base_type)\r\n\t-- start callback object.\r\n\trec:write_part(\"wrapper_obj\",\r\n\t{'/* callback object: ', rec.name, ' */\\n',\r\n\t\t'typedef struct {\\n',\r\n\t\t'  ', rec.base_type, ' base;\\n',\r\n\t\t'  lua_State *L;\\n',\r\n\t})\r\nend",
    "type": "function"
  }, {
    "id": 213,
    "text": "rec:add_var('wrap_type', rec.wrap_type)",
    "type": "statement:functioncall"
  }, {
    "id": 214,
    "text": "rec:add_var('base_type', rec.base_type)",
    "type": "statement:functioncall"
  }, {
    "id": 215,
    "text": "rec:write_part(\"wrapper_obj\",\r\n\t{'/* callback object: ', rec.name, ' */\\n',\r\n\t\t'typedef struct {\\n',\r\n\t\t'  ', rec.base_type, ' base;\\n',\r\n\t\t'  lua_State *L;\\n',\r\n\t})",
    "type": "statement:functioncall"
  }, {
    "id": 216,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 217,
    "text": "function(self, rec, parent)\r\n\trec:write_part(\"wrapper_obj\",\r\n\t{ rec:dump_parts{\"wrapper_callbacks\"},\r\n\t'} ', rec.wrap_type,';\\n',\r\n\t})\r\n\t-- append extra source code.\r\n\trec:write_part(\"extra_code\", rec:dump_parts{ \"wrapper_obj\" })\r\n\t-- apply variables to parts\r\n\tlocal parts = {\"funcdefs\", \"methods\", \"extra_code\"}\r\n\trec:vars_parts(parts)\r\n\t-- copy parts to parent\r\n\tparent:copy_parts(rec, parts)\r\nend",
    "type": "function"
  }, {
    "id": 218,
    "text": "rec:write_part(\"wrapper_obj\",\r\n\t{ rec:dump_parts{\"wrapper_callbacks\"},\r\n\t'} ', rec.wrap_type,';\\n',\r\n\t})",
    "type": "statement:functioncall"
  }, {
    "id": 219,
    "text": "rec:write_part(\"extra_code\", rec:dump_parts{ \"wrapper_obj\" })",
    "type": "statement:functioncall"
  }, {
    "id": 220,
    "text": "local parts = {\"funcdefs\", \"methods\", \"extra_code\"}",
    "type": "statement:localassign"
  }, {
    "id": 221,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 222,
    "text": "function(self, rec, parent)\r\n\tif self._includes[rec.file] then return end\r\n\tself._includes[rec.file] = true\r\n\t-- append include file\r\n\tif rec.is_system then\r\n\t\tself._cur_module:write_part(\"includes\", { '#include <', rec.file, '>\\n' })\r\n\telse\r\n\t\tself._cur_module:write_part(\"includes\", { '#include \"', rec.file, '\"\\n' })\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 223,
    "text": "if self._includes[rec.file] then return end",
    "type": "statement:if"
  }, {
    "id": 224,
    "text": "self._includes[rec.file] = true",
    "type": "statement:assign"
  }, {
    "id": 225,
    "text": "if rec.is_system then\r\n\t\tself._cur_module:write_part(\"includes\", { '#include <', rec.file, '>\\n' })\r\n\telse\r\n\t\tself._cur_module:write_part(\"includes\", { '#include \"', rec.file, '\"\\n' })\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 226,
    "text": "self._cur_module:write_part(\"includes\", { '#include <', rec.file, '>\\n' })",
    "type": "statement:functioncall"
  }, {
    "id": 227,
    "text": "self._cur_module:write_part(\"includes\", { '#include \"', rec.file, '\"\\n' })",
    "type": "statement:functioncall"
  }, {
    "id": 228,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 229,
    "text": "function(self, rec, parent)\r\n\t-- append to defines parts\r\n\tif rec.value then\r\n\t\tself._cur_module:write_part(\"defines\", { '#define ', rec.name, ' ', rec.value, '\\n' })\r\n\telse\r\n\t\tself._cur_module:write_part(\"defines\", { '#define ', rec.name, '\\n' })\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 230,
    "text": "if rec.value then\r\n\t\tself._cur_module:write_part(\"defines\", { '#define ', rec.name, ' ', rec.value, '\\n' })\r\n\telse\r\n\t\tself._cur_module:write_part(\"defines\", { '#define ', rec.name, '\\n' })\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 231,
    "text": "self._cur_module:write_part(\"defines\", { '#define ', rec.name, ' ', rec.value, '\\n' })",
    "type": "statement:functioncall"
  }, {
    "id": 232,
    "text": "self._cur_module:write_part(\"defines\", { '#define ', rec.name, '\\n' })",
    "type": "statement:functioncall"
  }, {
    "id": 233,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 234,
    "text": "function(self, rec, parent)\r\n\tassert(not parent.is_package, \"A Package can't extend anything: package=\" .. parent.name)\r\n\tlocal base = rec.base\r\n\tlocal base_cast = 'NULL'\r\n\tif base == nil then return end\r\n\t-- add methods/fields/constants from base object\r\n\tfor name,val in pairs(base.name_map) do\r\n\t\t-- make sure sub-class has not override name.\r\n\t\tif parent.name_map[name] == nil or parent.name_map[name] == val then\r\n\t\t\tparent.name_map[name] = val\r\n\t\t\tif val._is_method and not val.is_constructor then\r\n\t\t\t\tparent.functions[name] = val\r\n\t\t\t\t-- register base class's method with sub class\r\n\t\t\t\treg_object_function(self, val, parent)\r\n\t\t\telseif val._rec_type == 'field' then\r\n\t\t\t\tparent.fields[name] = val\r\n\t\t\telseif val._rec_type == 'const' then\r\n\t\t\t\tparent.constants[name] = val\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\t-- base_caster: helper functions.\r\n\tlocal function base_caster_name(class_name, base_name)\r\n\t\treturn 'base_cast_' .. class_name .. '_to_' .. base_name\r\n\tend\r\n\tlocal function create_base_caster(class_name, base_name)\r\n\t\tlocal base_cast = base_caster_name(class_name, base_name)\r\n\t\tlocal caster_def = 'static void ' .. base_cast .. '(void **obj)'\r\n\t\t-- add base_cast decl.\r\n\t\tparent:write_part('funcdefs', {caster_def, ';\\n'})\r\n\t\t-- start base_cast function.\r\n\t\trec:write_part('src', {caster_def, ' {\\n'})\r\n\t\treturn base_cast\r\n\tend\r\n\tlocal function build_chain_of_caster_calls(class_name, chain)\r\n\t\tlocal prev_class = class_name\r\n\t\tlocal caster_calls = {}\r\n\t\tfor i=1,#chain do\r\n\t\t\tlocal caster = chain[i]\r\n\t\t\tlocal base_name = caster.base.name\r\n\t\t\t-- only need to call custom casters.\r\n\t\t\tif caster.cast_type ~= 'direct' then\r\n\t\t\t\t-- call caster function.\r\n\t\t\t\ttable.insert(caster_calls,\r\n\t\t\t\t\t'\\t' .. base_caster_name(prev_class, base_name) .. '(obj);\\n')\r\n\t\t\tend\r\n\t\t\tprev_class = base_name\r\n\t\tend\r\n\t\tif #caster_calls > 0 then\r\n\t\t\treturn table.concat(caster_calls)\r\n\t\tend\r\n\t\treturn nil\r\n\tend\r\n\tlocal function create_chain_base_caster(class_name, chain)\r\n\t\tlocal end_caster = chain[#chain]\r\n\t\tlocal base = end_caster.base\r\n\t\tlocal chain_caster = build_chain_of_caster_calls(class_name, chain)\r\n\t\tlocal base_cast = 'NULL'\r\n\t\tif chain_caster ~= nil then\r\n\t\t\t-- create base caster for ancestor base class.\r\n\t\t\tbase_cast = create_base_caster(class_name, base.name)\r\n\t\t\t-- end caster function.\r\n\t\t\trec:write_part('src', {chain_caster,'}\\n\\n'})\r\n\t\tend\r\n\t\t-- write base record.\r\n\t\tparent:write_part(\"base_regs\", {\r\n\t\t'  {', base._obj_id, ', ', base_cast, '},\\n',\r\n\t\t})\r\n\tend\r\n\t-- add casters for all base-class's ancestors\r\n\tfor name,extend in pairs(base.extends) do\r\n\t\tcreate_chain_base_caster(parent.name, { rec, extend })\r\n\tend\r\n\t-- check for custom base_cast function.\r\n\tif rec.cast_type == 'custom' then\r\n\t\tlocal cast_type = parent.name .. '_to_' .. base.name .. '_t'\r\n\t\tbase_cast = create_base_caster(parent.name, base.name)\r\n\t\t-- start base_cast function.\r\n\t\trec:add_var('in_obj', 'val.in')\r\n\t\trec:add_var('in_obj_type', parent.c_type)\r\n\t\trec:add_var('out_obj', 'val.out')\r\n\t\trec:add_var('out_obj_type', base.c_type)\r\n\t\trec:write_part('pre', {\r\n\t\t\t'typedef union {\\n',\r\n\t\t\t'  void            *obj;\\n',\r\n\t\t\t'  ${in_obj_type}  in;\\n',\r\n\t\t\t'  ${out_obj_type} out;\\n',\r\n\t\t\t'} ',cast_type,';\\n',\r\n\t\t})\r\n\t\trec:write_part('src', {\r\n\t\t\t'  ',cast_type,' val = { .obj = *obj};\\n',\r\n\t\t})\r\n\tend\r\n\t-- write base record.\r\n\tparent:write_part(\"base_regs\", {\r\n\t'  {', base._obj_id, ', ', base_cast, '},\\n',\r\n\t})\r\nend",
    "type": "function"
  }, {
    "id": 235,
    "text": "assert(not parent.is_package, \"A Package can't extend anything: package=\" .. parent.name)",
    "type": "statement:functioncall"
  }, {
    "id": 236,
    "text": "local base = rec.base",
    "type": "statement:localassign"
  }, {
    "id": 237,
    "text": "if base == nil then return end",
    "type": "statement:if"
  }, {
    "id": 238,
    "text": "for name,val in pairs(base.name_map) do\r\n\t\t-- make sure sub-class has not override name.\r\n\t\tif parent.name_map[name] == nil or parent.name_map[name] == val then\r\n\t\t\tparent.name_map[name] = val\r\n\t\t\tif val._is_method and not val.is_constructor then\r\n\t\t\t\tparent.functions[name] = val\r\n\t\t\t\t-- register base class's method with sub class\r\n\t\t\t\treg_object_function(self, val, parent)\r\n\t\t\telseif val._rec_type == 'field' then\r\n\t\t\t\tparent.fields[name] = val\r\n\t\t\telseif val._rec_type == 'const' then\r\n\t\t\t\tparent.constants[name] = val\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 239,
    "text": "if parent.name_map[name] == nil or parent.name_map[name] == val then\r\n\t\t\tparent.name_map[name] = val\r\n\t\t\tif val._is_method and not val.is_constructor then\r\n\t\t\t\tparent.functions[name] = val\r\n\t\t\t\t-- register base class's method with sub class\r\n\t\t\t\treg_object_function(self, val, parent)\r\n\t\t\telseif val._rec_type == 'field' then\r\n\t\t\t\tparent.fields[name] = val\r\n\t\t\telseif val._rec_type == 'const' then\r\n\t\t\t\tparent.constants[name] = val\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 240,
    "text": "parent.name_map[name] = val",
    "type": "statement:assign"
  }, {
    "id": 241,
    "text": "if val._is_method and not val.is_constructor then\r\n\t\t\t\tparent.functions[name] = val\r\n\t\t\t\t-- register base class's method with sub class\r\n\t\t\t\treg_object_function(self, val, parent)\r\n\t\t\telseif val._rec_type == 'field' then\r\n\t\t\t\tparent.fields[name] = val\r\n\t\t\telseif val._rec_type == 'const' then\r\n\t\t\t\tparent.constants[name] = val\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 242,
    "text": "parent.functions[name] = val",
    "type": "statement:assign"
  }, {
    "id": 243,
    "text": "reg_object_function(self, val, parent)",
    "type": "statement:functioncall"
  }, {
    "id": 244,
    "text": "parent.fields[name] = val",
    "type": "statement:assign"
  }, {
    "id": 245,
    "text": "parent.constants[name] = val",
    "type": "statement:assign"
  }, {
    "id": 246,
    "text": "for name,extend in pairs(base.extends) do\r\n\t\tcreate_chain_base_caster(parent.name, { rec, extend })\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 247,
    "text": "create_chain_base_caster(parent.name, { rec, extend })",
    "type": "statement:functioncall"
  }, {
    "id": 248,
    "text": "if rec.cast_type == 'custom' then\r\n\t\tlocal cast_type = parent.name .. '_to_' .. base.name .. '_t'\r\n\t\tbase_cast = create_base_caster(parent.name, base.name)\r\n\t\t-- start base_cast function.\r\n\t\trec:add_var('in_obj', 'val.in')\r\n\t\trec:add_var('in_obj_type', parent.c_type)\r\n\t\trec:add_var('out_obj', 'val.out')\r\n\t\trec:add_var('out_obj_type', base.c_type)\r\n\t\trec:write_part('pre', {\r\n\t\t\t'typedef union {\\n',\r\n\t\t\t'  void            *obj;\\n',\r\n\t\t\t'  ${in_obj_type}  in;\\n',\r\n\t\t\t'  ${out_obj_type} out;\\n',\r\n\t\t\t'} ',cast_type,';\\n',\r\n\t\t})\r\n\t\trec:write_part('src', {\r\n\t\t\t'  ',cast_type,' val = { .obj = *obj};\\n',\r\n\t\t})\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 249,
    "text": "local cast_type = parent.name .. '_to_' .. base.name .. '_t'",
    "type": "statement:localassign"
  }, {
    "id": 250,
    "text": "base_cast = create_base_caster(parent.name, base.name)",
    "type": "statement:assign"
  }, {
    "id": 251,
    "text": "rec:add_var('in_obj', 'val.in')",
    "type": "statement:functioncall"
  }, {
    "id": 252,
    "text": "rec:add_var('in_obj_type', parent.c_type)",
    "type": "statement:functioncall"
  }, {
    "id": 253,
    "text": "rec:add_var('out_obj', 'val.out')",
    "type": "statement:functioncall"
  }, {
    "id": 254,
    "text": "rec:add_var('out_obj_type', base.c_type)",
    "type": "statement:functioncall"
  }, {
    "id": 255,
    "text": "rec:write_part('pre', {\r\n\t\t\t'typedef union {\\n',\r\n\t\t\t'  void            *obj;\\n',\r\n\t\t\t'  ${in_obj_type}  in;\\n',\r\n\t\t\t'  ${out_obj_type} out;\\n',\r\n\t\t\t'} ',cast_type,';\\n',\r\n\t\t})",
    "type": "statement:functioncall"
  }, {
    "id": 256,
    "text": "rec:write_part('src', {\r\n\t\t\t'  ',cast_type,' val = { .obj = *obj};\\n',\r\n\t\t})",
    "type": "statement:functioncall"
  }, {
    "id": 257,
    "text": "parent:write_part(\"base_regs\", {\r\n\t'  {', base._obj_id, ', ', base_cast, '},\\n',\r\n\t})",
    "type": "statement:functioncall"
  }, {
    "id": 258,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 259,
    "text": "function(self, rec, parent)\r\n\tif rec.cast_type == 'custom' then\r\n\t\t-- end caster function.\r\n\t\trec:write_part('src', {\r\n\t\t\t'  *obj = val.obj;\\n',\r\n\t\t\t'}\\n\\n'\r\n\t\t})\r\n\tend\r\n\t-- map in/out variables in c source.\r\n\tlocal parts = {\"pre\", \"pre_src\", \"src\", \"post\"}\r\n\trec:vars_parts(parts)\r\n\r\n\t-- append custom base caster code\r\n\tparent:write_part(\"methods\", rec:dump_parts(parts))\r\nend",
    "type": "function"
  }, {
    "id": 260,
    "text": "if rec.cast_type == 'custom' then\r\n\t\t-- end caster function.\r\n\t\trec:write_part('src', {\r\n\t\t\t'  *obj = val.obj;\\n',\r\n\t\t\t'}\\n\\n'\r\n\t\t})\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 261,
    "text": "rec:write_part('src', {\r\n\t\t\t'  *obj = val.obj;\\n',\r\n\t\t\t'}\\n\\n'\r\n\t\t})",
    "type": "statement:functioncall"
  }, {
    "id": 262,
    "text": "local parts = {\"pre\", \"pre_src\", \"src\", \"post\"}",
    "type": "statement:localassign"
  }, {
    "id": 263,
    "text": "parent:write_part(\"methods\", rec:dump_parts(parts))",
    "type": "statement:functioncall"
  }, {
    "id": 264,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 265,
    "text": "function(self, rec, parent)\r\n\trec.wrapped_type = parent.c_type\r\n\trec.wrapped_type_rec = parent.c_type_rec\r\n\trec.cb_ins = 0\r\n\trec.cb_outs = 0\r\n\t-- add callback decl.\r\n\trec:write_part('func_decl', {rec.c_func_decl, ';\\n'})\r\n\t-- start callback function.\r\n\trec:write_part(\"cb_head\",\r\n\t{'/* callback: ', rec.name, ' */\\n',\r\n\t\trec.c_func_decl, ' {\\n',\r\n\t})\r\n\t-- add lua reference to wrapper object.\r\n\tparent:write_part('wrapper_callbacks',\r\n\t  {'  int ', rec.ref_field, ';\\n'})\r\nend",
    "type": "function"
  }, {
    "id": 266,
    "text": "rec.wrapped_type = parent.c_type",
    "type": "statement:assign"
  }, {
    "id": 267,
    "text": "rec.wrapped_type_rec = parent.c_type_rec",
    "type": "statement:assign"
  }, {
    "id": 268,
    "text": "rec.cb_ins = 0",
    "type": "statement:assign"
  }, {
    "id": 269,
    "text": "rec.cb_outs = 0",
    "type": "statement:assign"
  }, {
    "id": 270,
    "text": "rec:write_part('func_decl', {rec.c_func_decl, ';\\n'})",
    "type": "statement:functioncall"
  }, {
    "id": 271,
    "text": "rec:write_part(\"cb_head\",\r\n\t{'/* callback: ', rec.name, ' */\\n',\r\n\t\trec.c_func_decl, ' {\\n',\r\n\t})",
    "type": "statement:functioncall"
  }, {
    "id": 272,
    "text": "parent:write_part('wrapper_callbacks',\r\n\t  {'  int ', rec.ref_field, ';\\n'})",
    "type": "statement:functioncall"
  }, {
    "id": 273,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 274,
    "text": "function(self, rec, parent)\r\n\tlocal wrapped = rec.wrapped_var\r\n\tlocal wrap_type = parent.wrap_type .. ' *'\r\n\trec:write_part(\"cb_head\",\r\n\t{ '  ', wrap_type,' wrap = (',wrap_type,')${', wrapped.name,'};\\n',\r\n\t\t'  lua_State *L = wrap->L;\\n',\r\n\t})\r\n\trec:write_part(\"vars\", {'\\n  ', rec:_push('wrap->' .. rec.ref_field),})\r\n\t-- call lua callback function.\r\n\trec:write_part(\"pre_src\", {\r\n\t'  if(lua_pcall(L, ', rec.cb_ins, ', ', rec.cb_outs , ', 0)) {\\n',\r\n\t})\r\n\t-- get default for function return value.\r\n\tlocal ret_out = rec.ret_out\r\n\tlocal func_rc = ''\r\n\tif ret_out then\r\n\t\tlocal var_type = ret_out.c_type_rec\r\n\t\tfunc_rc = var_type.default or ''\r\n\tend\r\n\trec:write_part(\"post_src\", {\r\n\t'    fprintf(stdout, \"CALLBACK Error: %s\\\\n\", lua_tostring(L, -1));\\n',\r\n\t'    lua_pop(L, 1);\\n',\r\n\t'    return ', func_rc,';\\n',\r\n\t'  }\\n',\r\n\t})\r\n\trec:write_part(\"post\", {'  lua_pop(L, ', rec.cb_outs , ');\\n'})\r\n\t-- get return value from lua function.\r\n\tif ret_out then\r\n\t\trec:write_part(\"post\", {'  return ${', ret_out.name , '};\\n'})\r\n\tend\r\n\t-- map in/out variables in c source.\r\n\tlocal parts = {\"cb_head\", \"vars\", \"params\", \"pre_src\", \"src\", \"post_src\", \"post\"}\r\n\trec:vars_parts(parts)\r\n\trec:vars_parts('func_decl')\r\n\r\n\trec:write_part(\"post\", {'}\\n\\n'})\r\n\tparent:write_part('methods', rec:dump_parts(parts))\r\n\tparent:write_part('funcdefs', rec:dump_parts('func_decl'))\r\nend",
    "type": "function"
  }, {
    "id": 275,
    "text": "local wrapped = rec.wrapped_var",
    "type": "statement:localassign"
  }, {
    "id": 276,
    "text": "local wrap_type = parent.wrap_type .. ' *'",
    "type": "statement:localassign"
  }, {
    "id": 277,
    "text": "rec:write_part(\"cb_head\",\r\n\t{ '  ', wrap_type,' wrap = (',wrap_type,')${', wrapped.name,'};\\n',\r\n\t\t'  lua_State *L = wrap->L;\\n',\r\n\t})",
    "type": "statement:functioncall"
  }, {
    "id": 278,
    "text": "rec:write_part(\"vars\", {'\\n  ', rec:_push('wrap->' .. rec.ref_field),})",
    "type": "statement:functioncall"
  }, {
    "id": 279,
    "text": "rec:write_part(\"pre_src\", {\r\n\t'  if(lua_pcall(L, ', rec.cb_ins, ', ', rec.cb_outs , ', 0)) {\\n',\r\n\t})",
    "type": "statement:functioncall"
  }, {
    "id": 280,
    "text": "local ret_out = rec.ret_out",
    "type": "statement:localassign"
  }, {
    "id": 281,
    "text": "local func_rc = ''",
    "type": "statement:localassign"
  }, {
    "id": 282,
    "text": "if ret_out then\r\n\t\tlocal var_type = ret_out.c_type_rec\r\n\t\tfunc_rc = var_type.default or ''\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 283,
    "text": "local var_type = ret_out.c_type_rec",
    "type": "statement:localassign"
  }, {
    "id": 284,
    "text": "func_rc = var_type.default or ''",
    "type": "statement:assign"
  }, {
    "id": 285,
    "text": "rec:write_part(\"post_src\", {\r\n\t'    fprintf(stdout, \"CALLBACK Error: %s\\\\n\", lua_tostring(L, -1));\\n',\r\n\t'    lua_pop(L, 1);\\n',\r\n\t'    return ', func_rc,';\\n',\r\n\t'  }\\n',\r\n\t})",
    "type": "statement:functioncall"
  }, {
    "id": 286,
    "text": "rec:write_part(\"post\", {'  lua_pop(L, ', rec.cb_outs , ');\\n'})",
    "type": "statement:functioncall"
  }, {
    "id": 287,
    "text": "if ret_out then\r\n\t\trec:write_part(\"post\", {'  return ${', ret_out.name , '};\\n'})\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 288,
    "text": "rec:write_part(\"post\", {'  return ${', ret_out.name , '};\\n'})",
    "type": "statement:functioncall"
  }, {
    "id": 289,
    "text": "local parts = {\"cb_head\", \"vars\", \"params\", \"pre_src\", \"src\", \"post_src\", \"post\"}",
    "type": "statement:localassign"
  }, {
    "id": 290,
    "text": "rec:vars_parts('func_decl')",
    "type": "statement:functioncall"
  }, {
    "id": 291,
    "text": "rec:write_part(\"post\", {'}\\n\\n'})",
    "type": "statement:functioncall"
  }, {
    "id": 292,
    "text": "parent:write_part('methods', rec:dump_parts(parts))",
    "type": "statement:functioncall"
  }, {
    "id": 293,
    "text": "parent:write_part('funcdefs', rec:dump_parts('func_decl'))",
    "type": "statement:functioncall"
  }, {
    "id": 294,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 295,
    "text": "function(self, rec, parent)\r\n\trec.dyn_caster_name = 'dyn_caster_' .. parent.name\r\n\tlocal caster_def = 'static void dyn_caster_${object_name}(void **obj, obj_type **type)'\r\n\t-- add caster decl.\r\n\tparent:write_part('funcdefs', {caster_def, ';\\n'})\r\n\t-- start caster function.\r\n\trec:write_part('src', {caster_def, ' {\\n'})\r\nend",
    "type": "function"
  }, {
    "id": 296,
    "text": "rec.dyn_caster_name = 'dyn_caster_' .. parent.name",
    "type": "statement:assign"
  }, {
    "id": 297,
    "text": "local caster_def = 'static void dyn_caster_${object_name}(void **obj, obj_type **type)'",
    "type": "statement:localassign"
  }, {
    "id": 298,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 299,
    "text": "function(self, rec, parent)\r\n\t-- append switch based caster function.\r\n\tif rec.caster_type == 'switch' then\r\n\t\tlocal selector = ''\r\n\t\tif rec.value_field then\r\n\t\t\tselector = 'base_obj->' .. rec.value_field\r\n\t\telseif rec.value_function then\r\n\t\t\tselector = rec.value_function .. '(base_obj)'\r\n\t\telse\r\n\t\t\terror(\"Missing switch value for dynamic caster.\")\r\n\t\tend\r\n\t\trec:write_part('src', {\r\n\t\t\t'  ${object_name} * base_obj = (${object_name} *)*obj;\\n',\r\n\t\t\t'  switch(', selector, ') {\\n',\r\n\t\t})\r\n\t\t-- add cases for each sub-object type.\r\n\t\tfor val,sub in pairs(rec.value_map) do\r\n\t\t\trec:write_part('src', {\r\n\t\t\t\t'  case ', val, ':\\n',\r\n\t\t\t\t'    *type = &(', sub._obj_type_name, ');\\n',\r\n\t\t\t\t'    break;\\n'\r\n\t\t\t})\r\n\t\tend\r\n\t\trec:write_part('src', {\r\n\t\t\t'  default:\\n',\r\n\t\t\t'    break;\\n',\r\n\t\t\t'  }\\n',\r\n\t\t})\r\n\tend\r\n\trec:write_part('src', {'}\\n\\n'})\r\n\t-- append custom dyn caster code\r\n\tparent:write_part(\"methods\", rec:dump_parts{ \"src\" })\r\nend",
    "type": "function"
  }, {
    "id": 300,
    "text": "if rec.caster_type == 'switch' then\r\n\t\tlocal selector = ''\r\n\t\tif rec.value_field then\r\n\t\t\tselector = 'base_obj->' .. rec.value_field\r\n\t\telseif rec.value_function then\r\n\t\t\tselector = rec.value_function .. '(base_obj)'\r\n\t\telse\r\n\t\t\terror(\"Missing switch value for dynamic caster.\")\r\n\t\tend\r\n\t\trec:write_part('src', {\r\n\t\t\t'  ${object_name} * base_obj = (${object_name} *)*obj;\\n',\r\n\t\t\t'  switch(', selector, ') {\\n',\r\n\t\t})\r\n\t\t-- add cases for each sub-object type.\r\n\t\tfor val,sub in pairs(rec.value_map) do\r\n\t\t\trec:write_part('src', {\r\n\t\t\t\t'  case ', val, ':\\n',\r\n\t\t\t\t'    *type = &(', sub._obj_type_name, ');\\n',\r\n\t\t\t\t'    break;\\n'\r\n\t\t\t})\r\n\t\tend\r\n\t\trec:write_part('src', {\r\n\t\t\t'  default:\\n',\r\n\t\t\t'    break;\\n',\r\n\t\t\t'  }\\n',\r\n\t\t})\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 301,
    "text": "local selector = ''",
    "type": "statement:localassign"
  }, {
    "id": 302,
    "text": "if rec.value_field then\r\n\t\t\tselector = 'base_obj->' .. rec.value_field\r\n\t\telseif rec.value_function then\r\n\t\t\tselector = rec.value_function .. '(base_obj)'\r\n\t\telse\r\n\t\t\terror(\"Missing switch value for dynamic caster.\")\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 303,
    "text": "selector = 'base_obj->' .. rec.value_field",
    "type": "statement:assign"
  }, {
    "id": 304,
    "text": "selector = rec.value_function .. '(base_obj)'",
    "type": "statement:assign"
  }, {
    "id": 305,
    "text": "error(\"Missing switch value for dynamic caster.\")",
    "type": "statement:functioncall"
  }, {
    "id": 306,
    "text": "rec:write_part('src', {\r\n\t\t\t'  ${object_name} * base_obj = (${object_name} *)*obj;\\n',\r\n\t\t\t'  switch(', selector, ') {\\n',\r\n\t\t})",
    "type": "statement:functioncall"
  }, {
    "id": 307,
    "text": "for val,sub in pairs(rec.value_map) do\r\n\t\t\trec:write_part('src', {\r\n\t\t\t\t'  case ', val, ':\\n',\r\n\t\t\t\t'    *type = &(', sub._obj_type_name, ');\\n',\r\n\t\t\t\t'    break;\\n'\r\n\t\t\t})\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 308,
    "text": "rec:write_part('src', {\r\n\t\t\t\t'  case ', val, ':\\n',\r\n\t\t\t\t'    *type = &(', sub._obj_type_name, ');\\n',\r\n\t\t\t\t'    break;\\n'\r\n\t\t\t})",
    "type": "statement:functioncall"
  }, {
    "id": 309,
    "text": "rec:write_part('src', {\r\n\t\t\t'  default:\\n',\r\n\t\t\t'    break;\\n',\r\n\t\t\t'  }\\n',\r\n\t\t})",
    "type": "statement:functioncall"
  }, {
    "id": 310,
    "text": "rec:write_part('src', {'}\\n\\n'})",
    "type": "statement:functioncall"
  }, {
    "id": 311,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 312,
    "text": "function(self, rec, parent)\r\n\trec.pushed_values = 0 -- track number of values pushed onto the stack.\r\n\trec:add_var('object_name', parent.name)\r\n\trec:add_var('function_name', rec.name)\r\n\tif rec.is_destructor then\r\n\t\trec.__gc = true -- mark as '__gc' method\r\n\tend\r\n\r\n\t-- register method/function with object.\r\n\tlocal name = reg_object_function(self, rec, parent)\r\n\r\n\trec:write_part(\"pre\",\r\n\t{'/* method: ', name, ' */\\n', rec.c_if_defs,\r\n\t\t'static int ', rec.c_name, '(lua_State *L) {\\n'})\r\n\t-- is this a wrapper function\r\n\tif rec.wrapper_obj then\r\n\t\tlocal wrap_type = rec.wrapper_obj.wrap_type\r\n\t\trec:write_part(\"pre\",\r\n\t\t\t{ '  ', wrap_type,' *wrap;\\n',\r\n\t\t\t})\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 313,
    "text": "rec.pushed_values = 0",
    "type": "statement:assign"
  }, {
    "id": 314,
    "text": "rec:add_var('object_name', parent.name)",
    "type": "statement:functioncall"
  }, {
    "id": 315,
    "text": "rec:add_var('function_name', rec.name)",
    "type": "statement:functioncall"
  }, {
    "id": 316,
    "text": "if rec.is_destructor then\r\n\t\trec.__gc = true -- mark as '__gc' method\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 317,
    "text": "rec.__gc = true",
    "type": "statement:assign"
  }, {
    "id": 318,
    "text": "local name = reg_object_function(self, rec, parent)",
    "type": "statement:localassign"
  }, {
    "id": 319,
    "text": "rec:write_part(\"pre\",\r\n\t{'/* method: ', name, ' */\\n', rec.c_if_defs,\r\n\t\t'static int ', rec.c_name, '(lua_State *L) {\\n'})",
    "type": "statement:functioncall"
  }, {
    "id": 320,
    "text": "if rec.wrapper_obj then\r\n\t\tlocal wrap_type = rec.wrapper_obj.wrap_type\r\n\t\trec:write_part(\"pre\",\r\n\t\t\t{ '  ', wrap_type,' *wrap;\\n',\r\n\t\t\t})\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 321,
    "text": "local wrap_type = rec.wrapper_obj.wrap_type",
    "type": "statement:localassign"
  }, {
    "id": 322,
    "text": "rec:write_part(\"pre\",\r\n\t\t\t{ '  ', wrap_type,' *wrap;\\n',\r\n\t\t\t})",
    "type": "statement:functioncall"
  }, {
    "id": 323,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 324,
    "text": "function(self, rec, parent)\r\n\t-- is this a wrapper function\r\n\tif rec.wrapper_obj then\r\n\t\tlocal wrap_obj = rec.wrapper_obj\r\n\t\tlocal wrap_type = wrap_obj.wrap_type\r\n\t\tlocal callbacks = wrap_obj.callbacks\r\n\t\tif rec.is_destructor then\r\n\t\t\trec:write_part(\"pre\",\r\n\t\t\t\t{'  wrap = (',wrap_type,' *)${this};\\n'})\r\n\t\t\tfor name,cb in pairs(callbacks) do\r\n\t\t\t\trec:write_part(\"src\",\r\n\t\t\t\t\t{'  luaL_unref(L, LUA_REGISTRYINDEX, wrap->', name,');\\n'})\r\n\t\t\tend\r\n\t\t\trec:write_part(\"post\",\r\n\t\t\t\t{'  obj_type_free(', wrap_type, ', wrap);\\n'})\r\n\t\telseif rec.is_constructor then\r\n\t\t\trec:write_part(\"pre\",\r\n\t\t\t\t{\r\n\t\t\t\t'  obj_type_new(', wrap_type, ', wrap);\\n',\r\n\t\t\t\t'  ${this} = &(wrap->base);\\n',\r\n\t\t\t\t'  wrap->L = L;\\n',\r\n\t\t\t\t})\r\n\t\tend\r\n\tend\r\n\t-- apply variable name replacing in generated code.\r\n\tlocal parts = {\"pre\", \"pre_src\", \"src\", \"post\"}\r\n\trec:vars_parts(parts)\r\n\r\n\tlocal outs = rec.pushed_values\r\n\trec:write_part(\"post\",\r\n\t\t{'  return ', outs, ';\\n',\r\n\t\t '}\\n', rec.c_endif, '\\n'})\r\n\r\n\t-- finialize C function code.\r\n\tself._cur_module:write_part('methods', rec:dump_parts(parts))\r\n\r\nend",
    "type": "function"
  }, {
    "id": 325,
    "text": "if rec.wrapper_obj then\r\n\t\tlocal wrap_obj = rec.wrapper_obj\r\n\t\tlocal wrap_type = wrap_obj.wrap_type\r\n\t\tlocal callbacks = wrap_obj.callbacks\r\n\t\tif rec.is_destructor then\r\n\t\t\trec:write_part(\"pre\",\r\n\t\t\t\t{'  wrap = (',wrap_type,' *)${this};\\n'})\r\n\t\t\tfor name,cb in pairs(callbacks) do\r\n\t\t\t\trec:write_part(\"src\",\r\n\t\t\t\t\t{'  luaL_unref(L, LUA_REGISTRYINDEX, wrap->', name,');\\n'})\r\n\t\t\tend\r\n\t\t\trec:write_part(\"post\",\r\n\t\t\t\t{'  obj_type_free(', wrap_type, ', wrap);\\n'})\r\n\t\telseif rec.is_constructor then\r\n\t\t\trec:write_part(\"pre\",\r\n\t\t\t\t{\r\n\t\t\t\t'  obj_type_new(', wrap_type, ', wrap);\\n',\r\n\t\t\t\t'  ${this} = &(wrap->base);\\n',\r\n\t\t\t\t'  wrap->L = L;\\n',\r\n\t\t\t\t})\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 326,
    "text": "local wrap_obj = rec.wrapper_obj",
    "type": "statement:localassign"
  }, {
    "id": 327,
    "text": "local wrap_type = wrap_obj.wrap_type",
    "type": "statement:localassign"
  }, {
    "id": 328,
    "text": "local callbacks = wrap_obj.callbacks",
    "type": "statement:localassign"
  }, {
    "id": 329,
    "text": "if rec.is_destructor then\r\n\t\t\trec:write_part(\"pre\",\r\n\t\t\t\t{'  wrap = (',wrap_type,' *)${this};\\n'})\r\n\t\t\tfor name,cb in pairs(callbacks) do\r\n\t\t\t\trec:write_part(\"src\",\r\n\t\t\t\t\t{'  luaL_unref(L, LUA_REGISTRYINDEX, wrap->', name,');\\n'})\r\n\t\t\tend\r\n\t\t\trec:write_part(\"post\",\r\n\t\t\t\t{'  obj_type_free(', wrap_type, ', wrap);\\n'})\r\n\t\telseif rec.is_constructor then\r\n\t\t\trec:write_part(\"pre\",\r\n\t\t\t\t{\r\n\t\t\t\t'  obj_type_new(', wrap_type, ', wrap);\\n',\r\n\t\t\t\t'  ${this} = &(wrap->base);\\n',\r\n\t\t\t\t'  wrap->L = L;\\n',\r\n\t\t\t\t})\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 330,
    "text": "rec:write_part(\"pre\",\r\n\t\t\t\t{'  wrap = (',wrap_type,' *)${this};\\n'})",
    "type": "statement:functioncall"
  }, {
    "id": 331,
    "text": "for name,cb in pairs(callbacks) do\r\n\t\t\t\trec:write_part(\"src\",\r\n\t\t\t\t\t{'  luaL_unref(L, LUA_REGISTRYINDEX, wrap->', name,');\\n'})\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 332,
    "text": "rec:write_part(\"src\",\r\n\t\t\t\t\t{'  luaL_unref(L, LUA_REGISTRYINDEX, wrap->', name,');\\n'})",
    "type": "statement:functioncall"
  }, {
    "id": 333,
    "text": "rec:write_part(\"post\",\r\n\t\t\t\t{'  obj_type_free(', wrap_type, ', wrap);\\n'})",
    "type": "statement:functioncall"
  }, {
    "id": 334,
    "text": "rec:write_part(\"pre\",\r\n\t\t\t\t{\r\n\t\t\t\t'  obj_type_new(', wrap_type, ', wrap);\\n',\r\n\t\t\t\t'  ${this} = &(wrap->base);\\n',\r\n\t\t\t\t'  wrap->L = L;\\n',\r\n\t\t\t\t})",
    "type": "statement:functioncall"
  }, {
    "id": 335,
    "text": "local outs = rec.pushed_values",
    "type": "statement:localassign"
  }, {
    "id": 336,
    "text": "rec:write_part(\"post\",\r\n\t\t{'  return ', outs, ';\\n',\r\n\t\t '}\\n', rec.c_endif, '\\n'})",
    "type": "statement:functioncall"
  }, {
    "id": 337,
    "text": "self._cur_module:write_part('methods', rec:dump_parts(parts))",
    "type": "statement:functioncall"
  }, {
    "id": 338,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 339,
    "text": "function(self, rec, parent)\r\n\tparent:write_part(rec.part, rec.src)\r\n\tparent:write_part(rec.part, \"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 340,
    "text": "parent:write_part(rec.part, rec.src)",
    "type": "statement:functioncall"
  }, {
    "id": 341,
    "text": "parent:write_part(rec.part, \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 342,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 343,
    "text": "function(self, rec, parent)\r\n\t-- no need to add code for 'lua_State *' parameters.\r\n\tif rec.c_type == 'lua_State *' and rec.name == 'L' then return end\r\n\t-- register variable for code gen (i.e. so ${var_name} is replaced with true variable name).\r\n\tparent:add_rec_var(rec)\r\n\t-- don't generate code for '<any>' type parameters\r\n\tif rec.c_type == '<any>' then return end\r\n\r\n\tlocal var_type = rec.c_type_rec\r\n\tif rec.is_this and parent.__gc then\r\n\t\tif var_type.has_obj_flags then\r\n\t\t\t-- add flags ${var_name_flags} variable\r\n\t\t\tparent:add_rec_var(rec, rec.name .. '_flags')\r\n\t\t\tlocal flags = '${' .. rec.name .. '_flags}'\r\n\t\t\t-- for garbage collect method, check the ownership flag before freeing 'this' object.\r\n\t\t\tparent:write_part(\"pre\",\r\n\t\t\t\t{\r\n\t\t\t\t'  int ',flags,' = 0;\\n',\r\n\t\t\t\t'  ', rec.c_type, var_type:_delete(rec, '&(' .. flags .. ')'),\r\n\t\t\t\t})\r\n\t\t\tparent:write_part(\"pre_src\", {\r\n\t\t\t\t'  if(!(',flags,' & OBJ_UDATA_FLAG_OWN)) { return 0; }\\n',\r\n\t\t\t\t})\r\n\t\telse\r\n\t\t\t-- for garbage collect method, check the ownership flag before freeing 'this' object.\r\n\t\t\tparent:write_part(\"pre\",\r\n\t\t\t\t{\r\n\t\t\t\t'  ', rec.c_type, var_type:_delete(rec, false),\r\n\t\t\t\t})\r\n\t\tend\r\n\telseif var_type._rec_type ~= 'callback_func' then\r\n\t\tif var_type.lang_type == 'string' then\r\n\t\t\t-- add length ${var_name_len} variable\r\n\t\t\tparent:add_rec_var(rec, rec.name .. '_len')\r\n\t\t\t-- add a variable to top of function for string's length.\r\n\t\t\tparent:write_part(\"pre\",{\r\n\t\t\t\t'  size_t ${', rec.name ,'_len};\\n'\r\n\t\t\t})\r\n\t\tend\r\n\t\t-- check lua value matches type.\r\n\t\tlocal get\r\n\t\tif rec.is_optional then\r\n\t\t\tget = var_type:_opt(rec, rec.default)\r\n\t\telse\r\n\t\t\tget = var_type:_check(rec)\r\n\t\tend\r\n\t\tparent:write_part(\"pre\",\r\n\t\t\t{'  ', rec.c_type, get })\r\n\tend\r\n\t-- is a lua reference.\r\n\tif var_type.is_ref then\r\n\t\tparent:add_var(rec.name, rec.cb_func.c_func_name)\r\n\t\tparent:write_part(\"src\",\r\n\t\t\t{'  wrap->', var_type.ref_field, ' = ',var_type:_check(rec) })\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 344,
    "text": "if rec.c_type == 'lua_State *' and rec.name == 'L' then return end",
    "type": "statement:if"
  }, {
    "id": 345,
    "text": "parent:add_rec_var(rec)",
    "type": "statement:functioncall"
  }, {
    "id": 346,
    "text": "if rec.c_type == '<any>' then return end",
    "type": "statement:if"
  }, {
    "id": 347,
    "text": "local var_type = rec.c_type_rec",
    "type": "statement:localassign"
  }, {
    "id": 348,
    "text": "if rec.is_this and parent.__gc then\r\n\t\tif var_type.has_obj_flags then\r\n\t\t\t-- add flags ${var_name_flags} variable\r\n\t\t\tparent:add_rec_var(rec, rec.name .. '_flags')\r\n\t\t\tlocal flags = '${' .. rec.name .. '_flags}'\r\n\t\t\t-- for garbage collect method, check the ownership flag before freeing 'this' object.\r\n\t\t\tparent:write_part(\"pre\",\r\n\t\t\t\t{\r\n\t\t\t\t'  int ',flags,' = 0;\\n',\r\n\t\t\t\t'  ', rec.c_type, var_type:_delete(rec, '&(' .. flags .. ')'),\r\n\t\t\t\t})\r\n\t\t\tparent:write_part(\"pre_src\", {\r\n\t\t\t\t'  if(!(',flags,' & OBJ_UDATA_FLAG_OWN)) { return 0; }\\n',\r\n\t\t\t\t})\r\n\t\telse\r\n\t\t\t-- for garbage collect method, check the ownership flag before freeing 'this' object.\r\n\t\t\tparent:write_part(\"pre\",\r\n\t\t\t\t{\r\n\t\t\t\t'  ', rec.c_type, var_type:_delete(rec, false),\r\n\t\t\t\t})\r\n\t\tend\r\n\telseif var_type._rec_type ~= 'callback_func' then\r\n\t\tif var_type.lang_type == 'string' then\r\n\t\t\t-- add length ${var_name_len} variable\r\n\t\t\tparent:add_rec_var(rec, rec.name .. '_len')\r\n\t\t\t-- add a variable to top of function for string's length.\r\n\t\t\tparent:write_part(\"pre\",{\r\n\t\t\t\t'  size_t ${', rec.name ,'_len};\\n'\r\n\t\t\t})\r\n\t\tend\r\n\t\t-- check lua value matches type.\r\n\t\tlocal get\r\n\t\tif rec.is_optional then\r\n\t\t\tget = var_type:_opt(rec, rec.default)\r\n\t\telse\r\n\t\t\tget = var_type:_check(rec)\r\n\t\tend\r\n\t\tparent:write_part(\"pre\",\r\n\t\t\t{'  ', rec.c_type, get })\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 349,
    "text": "if var_type.has_obj_flags then\r\n\t\t\t-- add flags ${var_name_flags} variable\r\n\t\t\tparent:add_rec_var(rec, rec.name .. '_flags')\r\n\t\t\tlocal flags = '${' .. rec.name .. '_flags}'\r\n\t\t\t-- for garbage collect method, check the ownership flag before freeing 'this' object.\r\n\t\t\tparent:write_part(\"pre\",\r\n\t\t\t\t{\r\n\t\t\t\t'  int ',flags,' = 0;\\n',\r\n\t\t\t\t'  ', rec.c_type, var_type:_delete(rec, '&(' .. flags .. ')'),\r\n\t\t\t\t})\r\n\t\t\tparent:write_part(\"pre_src\", {\r\n\t\t\t\t'  if(!(',flags,' & OBJ_UDATA_FLAG_OWN)) { return 0; }\\n',\r\n\t\t\t\t})\r\n\t\telse\r\n\t\t\t-- for garbage collect method, check the ownership flag before freeing 'this' object.\r\n\t\t\tparent:write_part(\"pre\",\r\n\t\t\t\t{\r\n\t\t\t\t'  ', rec.c_type, var_type:_delete(rec, false),\r\n\t\t\t\t})\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 350,
    "text": "parent:add_rec_var(rec, rec.name .. '_flags')",
    "type": "statement:functioncall"
  }, {
    "id": 351,
    "text": "local flags = '${' .. rec.name .. '_flags}'",
    "type": "statement:localassign"
  }, {
    "id": 352,
    "text": "parent:write_part(\"pre\",\r\n\t\t\t\t{\r\n\t\t\t\t'  int ',flags,' = 0;\\n',\r\n\t\t\t\t'  ', rec.c_type, var_type:_delete(rec, '&(' .. flags .. ')'),\r\n\t\t\t\t})",
    "type": "statement:functioncall"
  }, {
    "id": 353,
    "text": "parent:write_part(\"pre_src\", {\r\n\t\t\t\t'  if(!(',flags,' & OBJ_UDATA_FLAG_OWN)) { return 0; }\\n',\r\n\t\t\t\t})",
    "type": "statement:functioncall"
  }, {
    "id": 354,
    "text": "parent:write_part(\"pre\",\r\n\t\t\t\t{\r\n\t\t\t\t'  ', rec.c_type, var_type:_delete(rec, false),\r\n\t\t\t\t})",
    "type": "statement:functioncall"
  }, {
    "id": 355,
    "text": "if var_type.lang_type == 'string' then\r\n\t\t\t-- add length ${var_name_len} variable\r\n\t\t\tparent:add_rec_var(rec, rec.name .. '_len')\r\n\t\t\t-- add a variable to top of function for string's length.\r\n\t\t\tparent:write_part(\"pre\",{\r\n\t\t\t\t'  size_t ${', rec.name ,'_len};\\n'\r\n\t\t\t})\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 356,
    "text": "parent:add_rec_var(rec, rec.name .. '_len')",
    "type": "statement:functioncall"
  }, {
    "id": 357,
    "text": "parent:write_part(\"pre\",{\r\n\t\t\t\t'  size_t ${', rec.name ,'_len};\\n'\r\n\t\t\t})",
    "type": "statement:functioncall"
  }, {
    "id": 358,
    "text": "local get",
    "type": "statement:localassign"
  }, {
    "id": 359,
    "text": "if rec.is_optional then\r\n\t\t\tget = var_type:_opt(rec, rec.default)\r\n\t\telse\r\n\t\t\tget = var_type:_check(rec)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 360,
    "text": "get = var_type:_opt(rec, rec.default)",
    "type": "statement:assign"
  }, {
    "id": 361,
    "text": "get = var_type:_check(rec)",
    "type": "statement:assign"
  }, {
    "id": 362,
    "text": "parent:write_part(\"pre\",\r\n\t\t\t{'  ', rec.c_type, get })",
    "type": "statement:functioncall"
  }, {
    "id": 363,
    "text": "if var_type.is_ref then\r\n\t\tparent:add_var(rec.name, rec.cb_func.c_func_name)\r\n\t\tparent:write_part(\"src\",\r\n\t\t\t{'  wrap->', var_type.ref_field, ' = ',var_type:_check(rec) })\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 364,
    "text": "parent:add_var(rec.name, rec.cb_func.c_func_name)",
    "type": "statement:functioncall"
  }, {
    "id": 365,
    "text": "parent:write_part(\"src\",\r\n\t\t\t{'  wrap->', var_type.ref_field, ' = ',var_type:_check(rec) })",
    "type": "statement:functioncall"
  }, {
    "id": 366,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 367,
    "text": "function(self, rec, parent)\r\n\tif rec.is_length_ref then\r\n\t\treturn\r\n\tend\r\n\tlocal flags = false\r\n\tlocal var_type = rec.c_type_rec\r\n\tif var_type.has_obj_flags then\r\n\t\tif (rec.is_this or rec.own) then\r\n\t\t\t-- add flags ${var_name_flags} variable\r\n\t\t\tparent:add_rec_var(rec, rec.name .. '_flags')\r\n\t\t\tflags = '${' .. rec.name .. '_flags}'\r\n\t\t\tparent:write_part(\"pre\",{\r\n\t\t\t\t'  int ',flags,' = OBJ_UDATA_FLAG_OWN;\\n'\r\n\t\t\t})\r\n\t\telse\r\n\t\t\tflags = \"0\"\r\n\t\tend\r\n\tend\r\n\t-- register variable for code gen (i.e. so ${var_name} is replaced with true variable name).\r\n\tparent:add_rec_var(rec)\r\n\t-- don't generate code for '<any>' type parameters\r\n\tif rec.c_type == '<any>' then\r\n\t\tparent.pushed_values = parent.pushed_values + 1\r\n\t\treturn\r\n\tend\r\n\r\n\tlocal var_type = rec.c_type_rec\r\n\tif var_type.lang_type == 'string' and rec.has_length then\r\n\t\t-- add length ${var_name_len} variable\r\n\t\tparent:add_rec_var(rec, rec.name .. '_len')\r\n\t\t-- the C code will provide the string's length.\r\n\t\tparent:write_part(\"pre\",{\r\n\t\t\t'  size_t ${', rec.name ,'_len} = 0;\\n'\r\n\t\t})\r\n\tend\r\n\t-- if the variable's type has a default value, then initialize the variable.\r\n\tlocal init = ''\r\n\tif var_type.default then\r\n\t\tinit = ' = ' .. tostring(var_type.default)\r\n\telseif var_type.userdata_type == 'embed' then\r\n\t\tparent:write_part(\"pre\",\r\n\t\t\t{'  ', var_type.name, ' ${', rec.name, '}_store;\\n'})\r\n\t\tinit = ' = &(${' .. rec.name .. '}_store)'\r\n\tend\r\n\t-- add C variable to hold value to be pushed.\r\n\tparent:write_part(\"pre\",\r\n\t\t{'  ', rec.c_type, ' ${', rec.name, '}', init, ';\\n'})\r\n\t-- if this is a temp. variable, then we are done.\r\n\tif rec.is_temp then\r\n\t\treturn\r\n\tend\r\n\t-- push Lua value onto the stack.\r\n\tlocal push_count = 1\r\n\tlocal error_code = parent._has_error_code\r\n\tif error_code == rec then\r\n\t\tlocal err_type = error_code.c_type_rec\r\n\t\t-- if error_code is the first var_out, then push 'true' to signal no error.\r\n\t\t-- On error push 'false' and the error message.\r\n\t\tif rec._rec_idx == 1 then\r\n\t\t\tpush_count = 2\r\n\t\t\tparent:write_part(\"post\", {\r\n\t\t\t'  /* check for error. */\\n',\r\n\t\t\t'  if(',err_type.is_error_check(error_code),') {\\n',\r\n\t\t\t'    lua_pushnil(L);\\n',\r\n\t\t\t'    ', var_type:_push(rec, flags),\r\n\t\t\t'  } else {\\n',\r\n\t\t\t'    lua_pushboolean(L, 1);\\n',\r\n\t\t\t'    lua_pushnil(L);\\n',\r\n\t\t\t'  }\\n',\r\n\t\t\t})\r\n\t\telse\r\n\t\t\tparent:write_part(\"post\", { var_type:_push(rec, flags) })\r\n\t\tend\r\n\telseif rec.no_nil_on_error ~= true and error_code then\r\n\t\tlocal err_type = error_code.c_type_rec\r\n\t\t-- return nil for this out variable, if there was an error.\r\n\t\tparent:write_part(\"post\", {\r\n\t\t'  if(!',err_type.is_error_check(error_code),') {\\n',\r\n\t\t'  ', var_type:_push(rec, flags),\r\n\t\t'  } else {\\n',\r\n\t\t'    lua_pushnil(L);\\n',\r\n\t\t'  }\\n',\r\n\t\t})\r\n\telseif rec.is_error_on_null then\r\n\t\t-- if a function return NULL, then there was an error.\r\n\t\tparent:write_part(\"post\", {\r\n\t\t'  if(',var_type.is_error_check(rec),') {\\n',\r\n\t\t'    lua_pushnil(L);\\n',\r\n\t\t'  ', var_type:_push_error(rec),\r\n\t\t'  } else {\\n',\r\n\t\t'  ', var_type:_push(rec, flags),\r\n\t\t'  }\\n',\r\n\t\t})\r\n\telse\r\n\t\tparent:write_part(\"post\", { var_type:_push(rec, flags) })\r\n\tend\r\n\tparent.pushed_values = parent.pushed_values + push_count\r\nend",
    "type": "function"
  }, {
    "id": 368,
    "text": "if rec.is_length_ref then\r\n\t\treturn\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 369,
    "text": "local flags = false",
    "type": "statement:localassign"
  }, {
    "id": 370,
    "text": "if var_type.has_obj_flags then\r\n\t\tif (rec.is_this or rec.own) then\r\n\t\t\t-- add flags ${var_name_flags} variable\r\n\t\t\tparent:add_rec_var(rec, rec.name .. '_flags')\r\n\t\t\tflags = '${' .. rec.name .. '_flags}'\r\n\t\t\tparent:write_part(\"pre\",{\r\n\t\t\t\t'  int ',flags,' = OBJ_UDATA_FLAG_OWN;\\n'\r\n\t\t\t})\r\n\t\telse\r\n\t\t\tflags = \"0\"\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 371,
    "text": "if (rec.is_this or rec.own) then\r\n\t\t\t-- add flags ${var_name_flags} variable\r\n\t\t\tparent:add_rec_var(rec, rec.name .. '_flags')\r\n\t\t\tflags = '${' .. rec.name .. '_flags}'\r\n\t\t\tparent:write_part(\"pre\",{\r\n\t\t\t\t'  int ',flags,' = OBJ_UDATA_FLAG_OWN;\\n'\r\n\t\t\t})\r\n\t\telse\r\n\t\t\tflags = \"0\"\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 372,
    "text": "flags = '${' .. rec.name .. '_flags}'",
    "type": "statement:assign"
  }, {
    "id": 373,
    "text": "parent:write_part(\"pre\",{\r\n\t\t\t\t'  int ',flags,' = OBJ_UDATA_FLAG_OWN;\\n'\r\n\t\t\t})",
    "type": "statement:functioncall"
  }, {
    "id": 374,
    "text": "flags = \"0\"",
    "type": "statement:assign"
  }, {
    "id": 375,
    "text": "if rec.c_type == '<any>' then\r\n\t\tparent.pushed_values = parent.pushed_values + 1\r\n\t\treturn\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 376,
    "text": "parent.pushed_values = parent.pushed_values + 1",
    "type": "statement:assign"
  }, {
    "id": 377,
    "text": "if var_type.lang_type == 'string' and rec.has_length then\r\n\t\t-- add length ${var_name_len} variable\r\n\t\tparent:add_rec_var(rec, rec.name .. '_len')\r\n\t\t-- the C code will provide the string's length.\r\n\t\tparent:write_part(\"pre\",{\r\n\t\t\t'  size_t ${', rec.name ,'_len} = 0;\\n'\r\n\t\t})\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 378,
    "text": "parent:write_part(\"pre\",{\r\n\t\t\t'  size_t ${', rec.name ,'_len} = 0;\\n'\r\n\t\t})",
    "type": "statement:functioncall"
  }, {
    "id": 379,
    "text": "local init = ''",
    "type": "statement:localassign"
  }, {
    "id": 380,
    "text": "if var_type.default then\r\n\t\tinit = ' = ' .. tostring(var_type.default)\r\n\telseif var_type.userdata_type == 'embed' then\r\n\t\tparent:write_part(\"pre\",\r\n\t\t\t{'  ', var_type.name, ' ${', rec.name, '}_store;\\n'})\r\n\t\tinit = ' = &(${' .. rec.name .. '}_store)'\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 381,
    "text": "init = ' = ' .. tostring(var_type.default)",
    "type": "statement:assign"
  }, {
    "id": 382,
    "text": "parent:write_part(\"pre\",\r\n\t\t\t{'  ', var_type.name, ' ${', rec.name, '}_store;\\n'})",
    "type": "statement:functioncall"
  }, {
    "id": 383,
    "text": "init = ' = &(${' .. rec.name .. '}_store)'",
    "type": "statement:assign"
  }, {
    "id": 384,
    "text": "parent:write_part(\"pre\",\r\n\t\t{'  ', rec.c_type, ' ${', rec.name, '}', init, ';\\n'})",
    "type": "statement:functioncall"
  }, {
    "id": 385,
    "text": "if rec.is_temp then\r\n\t\treturn\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 386,
    "text": "local push_count = 1",
    "type": "statement:localassign"
  }, {
    "id": 387,
    "text": "local error_code = parent._has_error_code",
    "type": "statement:localassign"
  }, {
    "id": 388,
    "text": "if error_code == rec then\r\n\t\tlocal err_type = error_code.c_type_rec\r\n\t\t-- if error_code is the first var_out, then push 'true' to signal no error.\r\n\t\t-- On error push 'false' and the error message.\r\n\t\tif rec._rec_idx == 1 then\r\n\t\t\tpush_count = 2\r\n\t\t\tparent:write_part(\"post\", {\r\n\t\t\t'  /* check for error. */\\n',\r\n\t\t\t'  if(',err_type.is_error_check(error_code),') {\\n',\r\n\t\t\t'    lua_pushnil(L);\\n',\r\n\t\t\t'    ', var_type:_push(rec, flags),\r\n\t\t\t'  } else {\\n',\r\n\t\t\t'    lua_pushboolean(L, 1);\\n',\r\n\t\t\t'    lua_pushnil(L);\\n',\r\n\t\t\t'  }\\n',\r\n\t\t\t})\r\n\t\telse\r\n\t\t\tparent:write_part(\"post\", { var_type:_push(rec, flags) })\r\n\t\tend\r\n\telseif rec.no_nil_on_error ~= true and error_code then\r\n\t\tlocal err_type = error_code.c_type_rec\r\n\t\t-- return nil for this out variable, if there was an error.\r\n\t\tparent:write_part(\"post\", {\r\n\t\t'  if(!',err_type.is_error_check(error_code),') {\\n',\r\n\t\t'  ', var_type:_push(rec, flags),\r\n\t\t'  } else {\\n',\r\n\t\t'    lua_pushnil(L);\\n',\r\n\t\t'  }\\n',\r\n\t\t})\r\n\telseif rec.is_error_on_null then\r\n\t\t-- if a function return NULL, then there was an error.\r\n\t\tparent:write_part(\"post\", {\r\n\t\t'  if(',var_type.is_error_check(rec),') {\\n',\r\n\t\t'    lua_pushnil(L);\\n',\r\n\t\t'  ', var_type:_push_error(rec),\r\n\t\t'  } else {\\n',\r\n\t\t'  ', var_type:_push(rec, flags),\r\n\t\t'  }\\n',\r\n\t\t})\r\n\telse\r\n\t\tparent:write_part(\"post\", { var_type:_push(rec, flags) })\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 389,
    "text": "local err_type = error_code.c_type_rec",
    "type": "statement:localassign"
  }, {
    "id": 390,
    "text": "if rec._rec_idx == 1 then\r\n\t\t\tpush_count = 2\r\n\t\t\tparent:write_part(\"post\", {\r\n\t\t\t'  /* check for error. */\\n',\r\n\t\t\t'  if(',err_type.is_error_check(error_code),') {\\n',\r\n\t\t\t'    lua_pushnil(L);\\n',\r\n\t\t\t'    ', var_type:_push(rec, flags),\r\n\t\t\t'  } else {\\n',\r\n\t\t\t'    lua_pushboolean(L, 1);\\n',\r\n\t\t\t'    lua_pushnil(L);\\n',\r\n\t\t\t'  }\\n',\r\n\t\t\t})\r\n\t\telse\r\n\t\t\tparent:write_part(\"post\", { var_type:_push(rec, flags) })\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 391,
    "text": "push_count = 2",
    "type": "statement:assign"
  }, {
    "id": 392,
    "text": "parent:write_part(\"post\", {\r\n\t\t\t'  /* check for error. */\\n',\r\n\t\t\t'  if(',err_type.is_error_check(error_code),') {\\n',\r\n\t\t\t'    lua_pushnil(L);\\n',\r\n\t\t\t'    ', var_type:_push(rec, flags),\r\n\t\t\t'  } else {\\n',\r\n\t\t\t'    lua_pushboolean(L, 1);\\n',\r\n\t\t\t'    lua_pushnil(L);\\n',\r\n\t\t\t'  }\\n',\r\n\t\t\t})",
    "type": "statement:functioncall"
  }, {
    "id": 393,
    "text": "parent:write_part(\"post\", { var_type:_push(rec, flags) })",
    "type": "statement:functioncall"
  }, {
    "id": 394,
    "text": "parent:write_part(\"post\", {\r\n\t\t'  if(!',err_type.is_error_check(error_code),') {\\n',\r\n\t\t'  ', var_type:_push(rec, flags),\r\n\t\t'  } else {\\n',\r\n\t\t'    lua_pushnil(L);\\n',\r\n\t\t'  }\\n',\r\n\t\t})",
    "type": "statement:functioncall"
  }, {
    "id": 395,
    "text": "parent:write_part(\"post\", {\r\n\t\t'  if(',var_type.is_error_check(rec),') {\\n',\r\n\t\t'    lua_pushnil(L);\\n',\r\n\t\t'  ', var_type:_push_error(rec),\r\n\t\t'  } else {\\n',\r\n\t\t'  ', var_type:_push(rec, flags),\r\n\t\t'  }\\n',\r\n\t\t})",
    "type": "statement:functioncall"
  }, {
    "id": 396,
    "text": "parent.pushed_values = parent.pushed_values + push_count",
    "type": "statement:assign"
  }, {
    "id": 397,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 398,
    "text": "function(self, rec, parent)\r\n\tparent:add_rec_var(rec)\r\n\tlocal var_type = rec.c_type_rec\r\n\tif not rec.is_wrapped_obj then\r\n\t\tparent:write_part(\"params\", { var_type:_push(rec) })\r\n\t\tparent.cb_ins = parent.cb_ins + 1\r\n\telse\r\n\t\t-- this is the wrapped object parameter.\r\n\t\tparent.wrapped_var = rec\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 399,
    "text": "if not rec.is_wrapped_obj then\r\n\t\tparent:write_part(\"params\", { var_type:_push(rec) })\r\n\t\tparent.cb_ins = parent.cb_ins + 1\r\n\telse\r\n\t\t-- this is the wrapped object parameter.\r\n\t\tparent.wrapped_var = rec\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 400,
    "text": "parent:write_part(\"params\", { var_type:_push(rec) })",
    "type": "statement:functioncall"
  }, {
    "id": 401,
    "text": "parent.cb_ins = parent.cb_ins + 1",
    "type": "statement:assign"
  }, {
    "id": 402,
    "text": "parent.wrapped_var = rec",
    "type": "statement:assign"
  }, {
    "id": 403,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 404,
    "text": "function(self, rec, parent)\r\n\tparent:add_rec_var(rec, 'ret', 'ret', -1)\r\n\tparent.cb_outs = parent.cb_outs + 1\r\n\tlocal var_type = rec.c_type_rec\r\n\tparent:write_part(\"vars\",\r\n\t\t{'  ', rec.c_type, ' ${', rec.name, '};\\n'})\r\n\tparent:write_part(\"post\",\r\n\t\t{'  ', var_type:_to(rec) })\r\nend",
    "type": "function"
  }, {
    "id": 405,
    "text": "parent:add_rec_var(rec, 'ret', 'ret', -1)",
    "type": "statement:functioncall"
  }, {
    "id": 406,
    "text": "parent.cb_outs = parent.cb_outs + 1",
    "type": "statement:assign"
  }, {
    "id": 407,
    "text": "parent:write_part(\"vars\",\r\n\t\t{'  ', rec.c_type, ' ${', rec.name, '};\\n'})",
    "type": "statement:functioncall"
  }, {
    "id": 408,
    "text": "parent:write_part(\"post\",\r\n\t\t{'  ', var_type:_to(rec) })",
    "type": "statement:functioncall"
  }, {
    "id": 409,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 410,
    "text": "",
    "type": "function container"
  }, {
    "id": 411,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 412,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 413,
    "text": "open_outfile",
    "type": "global function"
  }, {
    "id": 414,
    "text": "print",
    "type": "global function"
  }, {
    "id": 415,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 416,
    "text": "is_error_check",
    "type": "global function"
  }, {
    "id": 417,
    "text": "type",
    "type": "global function"
  }, {
    "id": 418,
    "text": "process_records",
    "type": "global function"
  }, {
    "id": 419,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 420,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 421,
    "text": "is_error_check",
    "type": "global function"
  }, {
    "id": 422,
    "text": "error",
    "type": "global function"
  }, {
    "id": 423,
    "text": "require",
    "type": "global function"
  }, {
    "id": 424,
    "text": "",
    "type": "global variable"
  }, {
    "id": 425,
    "text": "",
    "type": "variable container"
  }, {
    "id": 426,
    "text": "",
    "type": "require container"
  }, {
    "id": 427,
    "text": "",
    "type": "local variable"
  }, {
    "id": 428,
    "text": "",
    "type": "string"
  }, {
    "id": 429,
    "text": "",
    "type": "local variable"
  }, {
    "id": 430,
    "text": "",
    "type": "string"
  }, {
    "id": 431,
    "text": "",
    "type": "local variable"
  }, {
    "id": 432,
    "text": "",
    "type": "string"
  }, {
    "id": 433,
    "text": "",
    "type": "local variable"
  }, {
    "id": 434,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 435,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 436,
    "text": "",
    "type": "string"
  }, {
    "id": 437,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 438,
    "text": "",
    "type": "string"
  }, {
    "id": 439,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 440,
    "text": "",
    "type": "string"
  }, {
    "id": 441,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 442,
    "text": "",
    "type": "string"
  }, {
    "id": 443,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 444,
    "text": "",
    "type": "string"
  }, {
    "id": 445,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 446,
    "text": "",
    "type": "string"
  }, {
    "id": 447,
    "text": "",
    "type": "local variable"
  }, {
    "id": 448,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 449,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 450,
    "text": "",
    "type": "string"
  }, {
    "id": 451,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 452,
    "text": "",
    "type": "string"
  }, {
    "id": 453,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 454,
    "text": "",
    "type": "string"
  }, {
    "id": 455,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 456,
    "text": "",
    "type": "string"
  }, {
    "id": 457,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 458,
    "text": "",
    "type": "string"
  }, {
    "id": 459,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 460,
    "text": "",
    "type": "string"
  }, {
    "id": 461,
    "text": "",
    "type": "local variable"
  }, {
    "id": 462,
    "text": "",
    "type": "string"
  }, {
    "id": 463,
    "text": "",
    "type": "local variable"
  }, {
    "id": 464,
    "text": "",
    "type": "string"
  }, {
    "id": 465,
    "text": "",
    "type": "local variable"
  }, {
    "id": 466,
    "text": "",
    "type": "string"
  }, {
    "id": 467,
    "text": "",
    "type": "local variable"
  }, {
    "id": 468,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 469,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 470,
    "text": "",
    "type": "string"
  }, {
    "id": 471,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 472,
    "text": "",
    "type": "string"
  }, {
    "id": 473,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 474,
    "text": "",
    "type": "string"
  }, {
    "id": 475,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 476,
    "text": "",
    "type": "string"
  }, {
    "id": 477,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 478,
    "text": "",
    "type": "string"
  }, {
    "id": 479,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 480,
    "text": "",
    "type": "string"
  }, {
    "id": 481,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 482,
    "text": "",
    "type": "string"
  }, {
    "id": 483,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 484,
    "text": "",
    "type": "string"
  }, {
    "id": 485,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 486,
    "text": "",
    "type": "string"
  }, {
    "id": 487,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 488,
    "text": "",
    "type": "string"
  }, {
    "id": 489,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 490,
    "text": "",
    "type": "string"
  }, {
    "id": 491,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 492,
    "text": "",
    "type": "string"
  }, {
    "id": 493,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 494,
    "text": "",
    "type": "string"
  }, {
    "id": 495,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 496,
    "text": "",
    "type": "string"
  }, {
    "id": 497,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 498,
    "text": "",
    "type": "string"
  }, {
    "id": 499,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 500,
    "text": "",
    "type": "string"
  }, {
    "id": 501,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 502,
    "text": "",
    "type": "string"
  }, {
    "id": 503,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 504,
    "text": "",
    "type": "string"
  }, {
    "id": 505,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 506,
    "text": "",
    "type": "string"
  }, {
    "id": 507,
    "text": "",
    "type": "local variable"
  }, {
    "id": 508,
    "text": "",
    "type": "n/a"
  }, {
    "id": 509,
    "text": "",
    "type": "local variable"
  }, {
    "id": 510,
    "text": "",
    "type": "n/a"
  }, {
    "id": 511,
    "text": "gen_lua_ffi)",
    "type": "module"
  } ]
}