{
  "_filename": "olua.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/olua/olua.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 11
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 11
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 11
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 11
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "calls",
    "to": 32
  }, {
    "from": 2,
    "label": "calls",
    "to": 31
  }, {
    "from": 2,
    "label": "calls",
    "to": 31
  }, {
    "from": 1,
    "label": "contains",
    "to": 30
  }, {
    "from": 30,
    "label": "declares",
    "to": 2
  }, {
    "from": 30,
    "label": "declares",
    "to": 16
  }, {
    "from": 30,
    "label": "declares",
    "to": 18
  }, {
    "from": 30,
    "label": "declares",
    "to": 20
  }, {
    "from": 30,
    "label": "declares",
    "to": 22
  }, {
    "from": 30,
    "label": "declares",
    "to": 24
  }, {
    "from": 30,
    "label": "declares",
    "to": 27
  }, {
    "from": 1,
    "label": "contains",
    "to": 33
  }, {
    "from": 1,
    "label": "contains",
    "to": 34
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "olua",
    "type": "module"
  }, {
    "id": 2,
    "text": "function declareclass(classname, superclass)\r\n\tlocal class = {}\r\n\tclass._methods = {}\r\n\t\r\n\tlocal superclassmethods = nil\r\n\tif superclass then\r\n\t\tsuperclassmethods = superclass._methods\r\n\r\n\t\tsetmetatable(class, {__index = superclass})\t\t\r\n\t\tsetmetatable(class._methods, {__index = superclass._methods})\r\n\tend\r\n\t\r\n\tclass._methods.class = function(self)\r\n\t\treturn class\r\n\tend\r\n\t\r\n\tclass.superclass = function(self)\r\n\t\treturn superclass\r\n\tend\r\n\t\r\n\tclass.superclassMethods = function(self)\r\n\t\treturn superclassmethods\r\n\tend\r\n\t\r\n\tclass.name = function(self)\r\n\t\treturn classname\r\n\tend\r\n\t\r\n\treturn class\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local class = {}",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "class._methods = {}",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "local superclassmethods = nil",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "if superclass then\r\n\t\tsuperclassmethods = superclass._methods\r\n\r\n\t\tsetmetatable(class, {__index = superclass})\t\t\r\n\t\tsetmetatable(class._methods, {__index = superclass._methods})\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "superclassmethods = superclass._methods",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "setmetatable(class, {__index = superclass})",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "setmetatable(class._methods, {__index = superclass._methods})",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "class._methods.class = function(self)\r\n\t\treturn class\r\n\tend",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 12,
    "text": "class.superclass = function(self)\r\n\t\treturn superclass\r\n\tend",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "class.superclassMethods = function(self)\r\n\t\treturn superclassmethods\r\n\tend",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "class.name = function(self)\r\n\t\treturn classname\r\n\tend",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function(self)\r\n\t\treturn class\r\n\tend",
    "type": "function"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function(self)\r\n\t\treturn superclass\r\n\tend",
    "type": "function"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function(self)\r\n\t\treturn superclassmethods\r\n\tend",
    "type": "function"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function(self)\r\n\t\treturn classname\r\n\tend",
    "type": "function"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function defineclassmethod(class, methodname, body)\r\n\tclass[methodname] = body\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "class[methodname] = body",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function definemethod(class, methodname, body)\r\n\tclass._methods[methodname] = body\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "class._methods[methodname] = body",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "",
    "type": "function container"
  }, {
    "id": 31,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 32,
    "text": "module",
    "type": "global function"
  }, {
    "id": 33,
    "text": "",
    "type": "variable container"
  }, {
    "id": 34,
    "text": "",
    "type": "require container"
  } ]
}