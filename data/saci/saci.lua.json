{
  "_filename": "saci.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/saci/lua/saci.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 3,
    "label": "has",
    "to": 12
  }, {
    "from": 3,
    "label": "has",
    "to": 11
  }, {
    "from": 3,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 11
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 11
  }, {
    "from": 20,
    "label": "has",
    "to": 11
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 23,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 20,
    "label": "has",
    "to": 11
  }, {
    "from": 20,
    "label": "has",
    "to": 11
  }, {
    "from": 20,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 32,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 11
  }, {
    "from": 38,
    "label": "has",
    "to": 11
  }, {
    "from": 32,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 40,
    "label": "has",
    "to": 45
  }, {
    "from": 32,
    "label": "has",
    "to": 11
  }, {
    "from": 32,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 47,
    "label": "has",
    "to": 51
  }, {
    "from": 47,
    "label": "has",
    "to": 11
  }, {
    "from": 47,
    "label": "has",
    "to": 52
  }, {
    "from": 47,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 47,
    "label": "has",
    "to": 11
  }, {
    "from": 47,
    "label": "has",
    "to": 56
  }, {
    "from": 47,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 55
  }, {
    "from": 47,
    "label": "has",
    "to": 11
  }, {
    "from": 47,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 62,
    "label": "has",
    "to": 55
  }, {
    "from": 62,
    "label": "has",
    "to": 65
  }, {
    "from": 47,
    "label": "has",
    "to": 11
  }, {
    "from": 47,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 11
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 11
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 71,
    "label": "has",
    "to": 74
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 11
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 78,
    "label": "has",
    "to": 11
  }, {
    "from": 78,
    "label": "has",
    "to": 81
  }, {
    "from": 78,
    "label": "has",
    "to": 82
  }, {
    "from": 78,
    "label": "has",
    "to": 83
  }, {
    "from": 78,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 78,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 11
  }, {
    "from": 78,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 90,
    "label": "has",
    "to": 94
  }, {
    "from": 78,
    "label": "has",
    "to": 11
  }, {
    "from": 78,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 96,
    "label": "has",
    "to": 99
  }, {
    "from": 96,
    "label": "has",
    "to": 100
  }, {
    "from": 96,
    "label": "has",
    "to": 101
  }, {
    "from": 96,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 105,
    "label": "has",
    "to": 107
  }, {
    "from": 105,
    "label": "has",
    "to": 108
  }, {
    "from": 103,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 110,
    "label": "has",
    "to": 112
  }, {
    "from": 110,
    "label": "has",
    "to": 113
  }, {
    "from": 109,
    "label": "has",
    "to": 111
  }, {
    "from": 109,
    "label": "has",
    "to": 112
  }, {
    "from": 96,
    "label": "has",
    "to": 114
  }, {
    "from": 96,
    "label": "has",
    "to": 11
  }, {
    "from": 96,
    "label": "has",
    "to": 115
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 117,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 116,
    "label": "has",
    "to": 11
  }, {
    "from": 116,
    "label": "has",
    "to": 11
  }, {
    "from": 116,
    "label": "has",
    "to": 121
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 122,
    "label": "has",
    "to": 124
  }, {
    "from": 122,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 122,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 122,
    "label": "has",
    "to": 98
  }, {
    "from": 122,
    "label": "has",
    "to": 129
  }, {
    "from": 122,
    "label": "has",
    "to": 130
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 130,
    "label": "has",
    "to": 11
  }, {
    "from": 130,
    "label": "has",
    "to": 11
  }, {
    "from": 122,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 134,
    "label": "has",
    "to": 107
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 122,
    "label": "has",
    "to": 11
  }, {
    "from": 122,
    "label": "has",
    "to": 137
  }, {
    "from": 138,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 138,
    "label": "has",
    "to": 11
  }, {
    "from": 138,
    "label": "has",
    "to": 11
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 140,
    "label": "has",
    "to": 142
  }, {
    "from": 140,
    "label": "has",
    "to": 143
  }, {
    "from": 140,
    "label": "has",
    "to": 144
  }, {
    "from": 140,
    "label": "has",
    "to": 145
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 146,
    "label": "has",
    "to": 148
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 146,
    "label": "has",
    "to": 150
  }, {
    "from": 146,
    "label": "has",
    "to": 151
  }, {
    "from": 140,
    "label": "has",
    "to": 152
  }, {
    "from": 140,
    "label": "has",
    "to": 153
  }, {
    "from": 140,
    "label": "has",
    "to": 154
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 140,
    "label": "has",
    "to": 11
  }, {
    "from": 140,
    "label": "has",
    "to": 157
  }, {
    "from": 158,
    "label": "has",
    "to": 11
  }, {
    "from": 159,
    "label": "has",
    "to": 11
  }, {
    "from": 160,
    "label": "has",
    "to": 11
  }, {
    "from": 161,
    "label": "has",
    "to": 11
  }, {
    "from": 162,
    "label": "has",
    "to": 39
  }, {
    "from": 162,
    "label": "has",
    "to": 11
  }, {
    "from": 162,
    "label": "has",
    "to": 11
  }, {
    "from": 162,
    "label": "has",
    "to": 163
  }, {
    "from": 164,
    "label": "has",
    "to": 11
  }, {
    "from": 20,
    "label": "calls",
    "to": 166
  }, {
    "from": 20,
    "label": "calls",
    "to": 166
  }, {
    "from": 20,
    "label": "calls",
    "to": 166
  }, {
    "from": 20,
    "label": "calls",
    "to": 166
  }, {
    "from": 20,
    "label": "calls",
    "to": 166
  }, {
    "from": 20,
    "label": "calls",
    "to": 166
  }, {
    "from": 20,
    "label": "calls",
    "to": 166
  }, {
    "from": 32,
    "label": "calls",
    "to": 166
  }, {
    "from": 32,
    "label": "calls",
    "to": 20
  }, {
    "from": 3,
    "label": "calls",
    "to": 167
  }, {
    "from": 71,
    "label": "calls",
    "to": 167
  }, {
    "from": 75,
    "label": "calls",
    "to": 167
  }, {
    "from": 122,
    "label": "calls",
    "to": 167
  }, {
    "from": 122,
    "label": "calls",
    "to": 167
  }, {
    "from": 32,
    "label": "calls",
    "to": 168
  }, {
    "from": 96,
    "label": "calls",
    "to": 168
  }, {
    "from": 122,
    "label": "calls",
    "to": 168
  }, {
    "from": 20,
    "label": "calls",
    "to": 169
  }, {
    "from": 20,
    "label": "calls",
    "to": 169
  }, {
    "from": 32,
    "label": "calls",
    "to": 170
  }, {
    "from": 78,
    "label": "calls",
    "to": 170
  }, {
    "from": 96,
    "label": "calls",
    "to": 170
  }, {
    "from": 3,
    "label": "calls",
    "to": 171
  }, {
    "from": 96,
    "label": "calls",
    "to": 172
  }, {
    "from": 32,
    "label": "calls",
    "to": 173
  }, {
    "from": 78,
    "label": "calls",
    "to": 173
  }, {
    "from": 78,
    "label": "calls",
    "to": 173
  }, {
    "from": 116,
    "label": "calls",
    "to": 173
  }, {
    "from": 138,
    "label": "calls",
    "to": 173
  }, {
    "from": 140,
    "label": "calls",
    "to": 173
  }, {
    "from": 32,
    "label": "calls",
    "to": 174
  }, {
    "from": 78,
    "label": "calls",
    "to": 174
  }, {
    "from": 78,
    "label": "calls",
    "to": 174
  }, {
    "from": 122,
    "label": "calls",
    "to": 174
  }, {
    "from": 140,
    "label": "calls",
    "to": 174
  }, {
    "from": 140,
    "label": "calls",
    "to": 174
  }, {
    "from": 140,
    "label": "calls",
    "to": 174
  }, {
    "from": 20,
    "label": "calls",
    "to": 175
  }, {
    "from": 20,
    "label": "calls",
    "to": 175
  }, {
    "from": 20,
    "label": "calls",
    "to": 175
  }, {
    "from": 20,
    "label": "calls",
    "to": 175
  }, {
    "from": 3,
    "label": "calls",
    "to": 176
  }, {
    "from": 165,
    "label": "calls",
    "to": 177
  }, {
    "from": 47,
    "label": "calls",
    "to": 180
  }, {
    "from": 69,
    "label": "calls",
    "to": 2
  }, {
    "from": 165,
    "label": "calls",
    "to": 179
  }, {
    "from": 3,
    "label": "calls",
    "to": 179
  }, {
    "from": 20,
    "label": "calls",
    "to": 178
  }, {
    "from": 122,
    "label": "calls",
    "to": 178
  }, {
    "from": 122,
    "label": "calls",
    "to": 178
  }, {
    "from": 122,
    "label": "calls",
    "to": 138
  }, {
    "from": 1,
    "label": "contains",
    "to": 165
  }, {
    "from": 165,
    "label": "declares",
    "to": 3
  }, {
    "from": 165,
    "label": "declares",
    "to": 14
  }, {
    "from": 165,
    "label": "declares",
    "to": 18
  }, {
    "from": 165,
    "label": "declares",
    "to": 20
  }, {
    "from": 165,
    "label": "declares",
    "to": 32
  }, {
    "from": 165,
    "label": "declares",
    "to": 47
  }, {
    "from": 165,
    "label": "declares",
    "to": 67
  }, {
    "from": 165,
    "label": "declares",
    "to": 69
  }, {
    "from": 165,
    "label": "declares",
    "to": 71
  }, {
    "from": 165,
    "label": "declares",
    "to": 75
  }, {
    "from": 165,
    "label": "declares",
    "to": 78
  }, {
    "from": 165,
    "label": "declares",
    "to": 96
  }, {
    "from": 165,
    "label": "declares",
    "to": 116
  }, {
    "from": 165,
    "label": "declares",
    "to": 122
  }, {
    "from": 165,
    "label": "declares",
    "to": 138
  }, {
    "from": 165,
    "label": "declares",
    "to": 140
  }, {
    "from": 165,
    "label": "declares",
    "to": 158
  }, {
    "from": 165,
    "label": "declares",
    "to": 159
  }, {
    "from": 165,
    "label": "declares",
    "to": 160
  }, {
    "from": 165,
    "label": "declares",
    "to": 161
  }, {
    "from": 165,
    "label": "declares",
    "to": 162
  }, {
    "from": 165,
    "label": "declares",
    "to": 164
  }, {
    "from": 1,
    "label": "contains",
    "to": 182
  }, {
    "from": 1,
    "label": "contains",
    "to": 183
  }, {
    "from": 182,
    "label": "initializes",
    "to": 184
  }, {
    "from": 184,
    "label": "assigns",
    "to": 185
  }, {
    "from": 182,
    "label": "initializes",
    "to": 186
  }, {
    "from": 186,
    "label": "assigns",
    "to": 187
  }, {
    "from": 187,
    "label": "assigns",
    "to": 188
  }, {
    "from": 188,
    "label": "assigns",
    "to": 189
  }, {
    "from": 187,
    "label": "assigns",
    "to": 190
  }, {
    "from": 190,
    "label": "assigns",
    "to": 191
  }, {
    "from": 183,
    "label": "initializes",
    "to": 192
  }, {
    "from": 192,
    "label": "requires",
    "to": 193
  }, {
    "from": 183,
    "label": "initializes",
    "to": 181
  }, {
    "from": 181,
    "label": "requires",
    "to": 194
  }, {
    "from": 38,
    "label": "hasArgument",
    "to": 162
  }, {
    "from": 89,
    "label": "hasArgument",
    "to": 164
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "saci",
    "type": "module"
  }, {
    "id": 2,
    "text": "function new(initial_values)\r\n   local sandbox = setmetatable({}, Sandbox_mt)\r\n\r\n   -- Create a table that allows us to define private functions\r\n   -- while still pulling values from the initial_values table\r\n   local private = setmetatable({}, {__index = initial_values})\r\n   -- Now link the tables together to create the values table\r\n   sandbox.values = setmetatable({}, {__index = private})\r\n\r\n   -- Define a function that allow us to reset the protected environment\r\n   -- from within a sandbox\r\n   do\r\n      local tbl = sandbox.values\r\n      local pairs = pairs\r\n      function private.reset()\r\n         for k,v in pairs(tbl) do\r\n            tbl[k] = nil\r\n         end\r\n      end\r\n   end\r\n\r\n   sandbox.returned_value = nil\r\n   return sandbox\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function new(module_name, versium_params, root_prototype_id)\r\n   local repo = setmetatable({}, Saci_mt)\r\n   repo.root_prototype_id = root_prototype_id or \"@Root\"\r\n   assert(module_name)\r\n   module_name = module_name\r\n   local versium_module = require(module_name)\r\n   repo.versium = versium_module.new(versium_params)\r\n   repo.permission_groups = {\r\n      all_users     = function(user)   return true end,\r\n      Authenticated = function(user)   return user ~= nil and user:len() > 0 end,\r\n      Anonymous     = function(user)   return not user end,\r\n      all_actions   = function(action) return true end,\r\n   }\r\n   repo:reset_cache()\r\n   return repo\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local repo = setmetatable({}, Saci_mt)",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "repo.root_prototype_id = root_prototype_id or \"@Root\"",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "assert(module_name)",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "module_name = module_name",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "local versium_module = require(module_name)",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "repo.versium = versium_module.new(versium_params)",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "repo.permission_groups = {\r\n      all_users     = function(user)   return true end,\r\n      Authenticated = function(user)   return user ~= nil and user:len() > 0 end,\r\n      Anonymous     = function(user)   return not user end,\r\n      all_actions   = function(action) return true end,\r\n   }",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 12,
    "text": "repo:reset_cache()",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function Saci:reset_cache()\r\n   self.cache = {}\r\n   self.cache_stub = {}\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "self.cache = {}",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "self.cache_stub = {}",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function Saci:node_exists(id)\r\n   return self.versium:node_exists(id)\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "local function serialize(data)\r\n\tlocal data_type = type(data)\r\n\tif data_type == \"boolean\" or data_type == \"number\" then\r\n\t\treturn tostring(data)\r\n\telseif data_type ~= \"string\" then\r\n      return string.format(\"nil -- Could not serialize '%s'\", tostring(data))\r\n\tend\r\n\r\n\t-- if the string contains any newlines, find a version of long quotes that will work\r\n\tif data:find(\"\\n\") then\r\n\t\tlocal count = 0\r\n\t\tlocal open = string.format(\"[%s[\", string.rep(\"=\", count))\r\n\t\tlocal close = string.format(\"]%s]\", string.rep(\"=\", count))\r\n\r\n\t\twhile data:find(open, nil, true) or data:find(close, nil, true) do\r\n\t\t\topen = string.format(\"[%s[\", string.rep(\"=\", count))\r\n\t\t\tclose = string.format(\"]%s]\", string.rep(\"=\", count))\r\n\t\t\tcount = count + 1\r\n\t\tend\r\n\r\n\t\treturn string.format(\"%s%s%s\", open, data, close)\r\n\telse\r\n\t\treturn string.format(\"%q\", data)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "local data_type = type(data)",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "if data_type == \"boolean\" or data_type == \"number\" then\r\n\t\treturn tostring(data)\r\n\telseif data_type ~= \"string\" then\r\n      return string.format(\"nil -- Could not serialize '%s'\", tostring(data))\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "if data:find(\"\\n\") then\r\n\t\tlocal count = 0\r\n\t\tlocal open = string.format(\"[%s[\", string.rep(\"=\", count))\r\n\t\tlocal close = string.format(\"]%s]\", string.rep(\"=\", count))\r\n\r\n\t\twhile data:find(open, nil, true) or data:find(close, nil, true) do\r\n\t\t\topen = string.format(\"[%s[\", string.rep(\"=\", count))\r\n\t\t\tclose = string.format(\"]%s]\", string.rep(\"=\", count))\r\n\t\t\tcount = count + 1\r\n\t\tend\r\n\r\n\t\treturn string.format(\"%s%s%s\", open, data, close)\r\n\telse\r\n\t\treturn string.format(\"%q\", data)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "local count = 0",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "local open = string.format(\"[%s[\", string.rep(\"=\", count))",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "local close = string.format(\"]%s]\", string.rep(\"=\", count))",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "while data:find(open, nil, true) or data:find(close, nil, true) do\r\n\t\t\topen = string.format(\"[%s[\", string.rep(\"=\", count))\r\n\t\t\tclose = string.format(\"]%s]\", string.rep(\"=\", count))\r\n\t\t\tcount = count + 1\r\n\t\tend",
    "type": "statement:while"
  }, {
    "id": 28,
    "text": "open = string.format(\"[%s[\", string.rep(\"=\", count))",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "close = string.format(\"]%s]\", string.rep(\"=\", count))",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "count = count + 1",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function Saci:deflate(node, fields)\r\n   local buffer = \"\"\r\n   local keysort = {}\r\n\r\n   -- Sort the keys of the node so output is consistent\r\n   for k,v in pairs(node) do\r\n      if k ~= \"__index\" then\r\n         table.insert(keysort, k)\r\n      end\r\n   end\r\n   table.sort(keysort, function(x, y)\r\n                          if fields and fields[x] and fields[y] then\r\n                             return (fields[x][1] or 1000) < (fields[y][1] or 1000)\r\n                          else\r\n                             return x < y\r\n                          end\r\n                       end)\r\n\r\n   for idx,key in ipairs(keysort) do\r\n      local value = serialize(node[key])\r\n      local padded_key = key\r\n      if key:len() < 15 then\r\n         padded_key = (key..\"               \"):sub(1,15)\r\n      end\r\n      buffer = string.format(\"%s\\n%s= %s\", buffer, padded_key, value)\r\n   end\r\n\r\n   return buffer\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "local buffer = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "local keysort = {}",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "for k,v in pairs(node) do\r\n      if k ~= \"__index\" then\r\n         table.insert(keysort, k)\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 36,
    "text": "if k ~= \"__index\" then\r\n         table.insert(keysort, k)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "table.insert(keysort, k)",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "table.sort(keysort, function(x, y)\r\n                          if fields and fields[x] and fields[y] then\r\n                             return (fields[x][1] or 1000) < (fields[y][1] or 1000)\r\n                          else\r\n                             return x < y\r\n                          end\r\n                       end)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "if fields and fields[x] and fields[y] then\r\n                             return (fields[x][1] or 1000) < (fields[y][1] or 1000)\r\n                          else\r\n                             return x < y\r\n                          end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "for idx,key in ipairs(keysort) do\r\n      local value = serialize(node[key])\r\n      local padded_key = key\r\n      if key:len() < 15 then\r\n         padded_key = (key..\"               \"):sub(1,15)\r\n      end\r\n      buffer = string.format(\"%s\\n%s= %s\", buffer, padded_key, value)\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 41,
    "text": "local value = serialize(node[key])",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "local padded_key = key",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "if key:len() < 15 then\r\n         padded_key = (key..\"               \"):sub(1,15)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "padded_key = (key..\"               \"):sub(1,15)",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "buffer = string.format(\"%s\\n%s= %s\", buffer, padded_key, value)",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function Saci:get_node(id, version)\r\n   --assert(id)\r\n   --assert(type(id)==\"string\")\r\n\r\n   -- first, check if we have this node in cache\r\n   local cache_key = id\r\n   if version then\r\n      cache_key = cache_key..\".\"..version\r\n   end\r\n   if self.cache[cache_key] then\r\n      return self.cache[cache_key], self.cache_stub[cache_key]\r\n   end\r\n\r\n   -- second, check if we have it in versium\r\n   local data = self.versium:get_node(id, version)\r\n   if data then\r\n      local node = self:make_node(data, id)\r\n      self.cache[cache_key] = node\r\n      return node\r\n   end\r\n\r\n   -- third, check with the node's parent\r\n   local parent_id, rest = string.match(id, \"^(.+)/(.-)$\")\r\n   if parent_id then\r\n      local parent = self:get_node(parent_id)\r\n      if parent then\r\n         local node = parent:get_child(rest)\r\n         if node then\r\n            self.cache[cache_key] = node\r\n            return node\r\n         end\r\n      end\r\n   end\r\n\r\n   -- no luck, check if we have a fallback function\r\n   if self.get_fallback_node then\r\n      local prototype = nil\r\n      local node, stub = self:get_fallback_node(id, version)\r\n      self.cache[cache_key] = node\r\n      self.cache_stub[cache_key] = stub\r\n      return node, stub\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "local cache_key = id",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "if version then\r\n      cache_key = cache_key..\".\"..version\r\n   end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "cache_key = cache_key..\".\"..version",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "if self.cache[cache_key] then\r\n      return self.cache[cache_key], self.cache_stub[cache_key]\r\n   end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "local data = self.versium:get_node(id, version)",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "if data then\r\n      local node = self:make_node(data, id)\r\n      self.cache[cache_key] = node\r\n      return node\r\n   end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "local node = self:make_node(data, id)",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "self.cache[cache_key] = node",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "local parent_id, rest = string.match(id, \"^(.+)/(.-)$\")",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "if parent_id then\r\n      local parent = self:get_node(parent_id)\r\n      if parent then\r\n         local node = parent:get_child(rest)\r\n         if node then\r\n            self.cache[cache_key] = node\r\n            return node\r\n         end\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "local parent = self:get_node(parent_id)",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "if parent then\r\n         local node = parent:get_child(rest)\r\n         if node then\r\n            self.cache[cache_key] = node\r\n            return node\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "local node = parent:get_child(rest)",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "if node then\r\n            self.cache[cache_key] = node\r\n            return node\r\n         end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "if self.get_fallback_node then\r\n      local prototype = nil\r\n      local node, stub = self:get_fallback_node(id, version)\r\n      self.cache[cache_key] = node\r\n      self.cache_stub[cache_key] = stub\r\n      return node, stub\r\n   end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "local prototype = nil",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "local node, stub = self:get_fallback_node(id, version)",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "self.cache_stub[cache_key] = stub",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "function Saci:get_node_info(id, version)\r\n   return self.versium:get_node_info(id, version)\r\nend",
    "type": "function"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function Saci:make_node(data, id)\r\n   return saci.node.new{data=data, id=id, repository=self}\r\nend",
    "type": "function"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "function Saci:save_node(node, author, comment, extra, timestamp)\r\n   assert(node.id)\r\n   self.versium:save_version(node.id, self:deflate(node.raw_values, node.fields),\r\n                             author, comment, extra, timestamp)\r\nend",
    "type": "function"
  }, {
    "id": 72,
    "text": "assert(node.id)",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "self.versium:save_version(node.id, self:deflate(node.raw_values, node.fields),\r\n                             author, comment, extra, timestamp)",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 75,
    "text": "function Saci:get_node_history(id, date_prefix, limit)\r\n   assert(id)\r\n   return self.versium:get_node_history(id, date_prefix, limit) or {}\r\nend",
    "type": "function"
  }, {
    "id": 76,
    "text": "assert(id)",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "function Saci:get_complete_history(id_prefix, date_prefix, limit)\r\n   local id_prefix = id_prefix or \"\"\r\n   if self.versium.get_complete_history then\r\n      return self.versium:get_complete_history(id_prefix, date_prefix, limit)\r\n   end\r\n\r\n   local edits = {}\r\n   local preflen = id_prefix:len()\r\n   local ids = self.versium:get_node_ids(id_prefix or nil, limit or nil)\r\n   for i, id in ipairs(ids) do\r\n      if id:sub(1, preflen) == id_prefix then\r\n         for i, edit in ipairs(self:get_node_history(id, date_prefix, limit)) do\r\n            edit.id = id\r\n            table.insert(edits, edit)\r\n         end\r\n      end\r\n   end\r\n   table.sort(edits, function(e1, e2) return e1.timestamp > e2.timestamp end)\r\n   if limit then\r\n      local another_table = {}\r\n      for i=1,limit do\r\n         table.insert(another_table, edits[i])\r\n      end\r\n      edits = another_table\r\n   end   \r\n   return edits\r\nend",
    "type": "function"
  }, {
    "id": 79,
    "text": "local id_prefix = id_prefix or \"\"",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "if self.versium.get_complete_history then\r\n      return self.versium:get_complete_history(id_prefix, date_prefix, limit)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "local edits = {}",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "local preflen = id_prefix:len()",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "local ids = self.versium:get_node_ids(id_prefix or nil, limit or nil)",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "for i, id in ipairs(ids) do\r\n      if id:sub(1, preflen) == id_prefix then\r\n         for i, edit in ipairs(self:get_node_history(id, date_prefix, limit)) do\r\n            edit.id = id\r\n            table.insert(edits, edit)\r\n         end\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 85,
    "text": "if id:sub(1, preflen) == id_prefix then\r\n         for i, edit in ipairs(self:get_node_history(id, date_prefix, limit)) do\r\n            edit.id = id\r\n            table.insert(edits, edit)\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 86,
    "text": "for i, edit in ipairs(self:get_node_history(id, date_prefix, limit)) do\r\n            edit.id = id\r\n            table.insert(edits, edit)\r\n         end",
    "type": "statement:genericfor"
  }, {
    "id": 87,
    "text": "edit.id = id",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "table.insert(edits, edit)",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "table.sort(edits, function(e1, e2) return e1.timestamp > e2.timestamp end)",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "if limit then\r\n      local another_table = {}\r\n      for i=1,limit do\r\n         table.insert(another_table, edits[i])\r\n      end\r\n      edits = another_table\r\n   end",
    "type": "statement:if"
  }, {
    "id": 91,
    "text": "local another_table = {}",
    "type": "statement:localassign"
  }, {
    "id": 92,
    "text": "for i=1,limit do\r\n         table.insert(another_table, edits[i])\r\n      end",
    "type": "statement:numericfor"
  }, {
    "id": 93,
    "text": "table.insert(another_table, edits[i])",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "edits = another_table",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "function Saci:get_nodes_by_prefix(prefix, limit, visible, id_filter)\r\n   local versium_nodes = self:get_versium_nodes_by_prefix(prefix, limit)\r\n   local nodes = {}\r\n   local ids = {}\r\n   local cache = self.cache\r\n   local num_hidden = 0\r\n   for id, vnode in pairs(versium_nodes) do\r\n      if (not id_filter) or id_filter(id) then\r\n         local node\r\n         if cache[id] then\r\n            node = cache[id]\r\n         else\r\n            node = self:make_node(vnode, id) \r\n            cache[id] = node\r\n         end\r\n         if visible then\r\n            if node:check_permissions(user, \"show\") then\r\n               nodes[id] = node\r\n               ids[#ids+1] = id\r\n            else\r\n               num_hidden = num_hidden + 1\r\n            end\r\n         else\r\n            nodes[id] = node\r\n            ids[#ids+1] = id            \r\n         end\r\n      end\r\n   end\r\n   table.sort(ids)\r\n   return nodes, ids, num_hidden\r\nend",
    "type": "function"
  }, {
    "id": 97,
    "text": "local versium_nodes = self:get_versium_nodes_by_prefix(prefix, limit)",
    "type": "statement:localassign"
  }, {
    "id": 98,
    "text": "local nodes = {}",
    "type": "statement:localassign"
  }, {
    "id": 99,
    "text": "local ids = {}",
    "type": "statement:localassign"
  }, {
    "id": 100,
    "text": "local cache = self.cache",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "local num_hidden = 0",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "for id, vnode in pairs(versium_nodes) do\r\n      if (not id_filter) or id_filter(id) then\r\n         local node\r\n         if cache[id] then\r\n            node = cache[id]\r\n         else\r\n            node = self:make_node(vnode, id) \r\n            cache[id] = node\r\n         end\r\n         if visible then\r\n            if node:check_permissions(user, \"show\") then\r\n               nodes[id] = node\r\n               ids[#ids+1] = id\r\n            else\r\n               num_hidden = num_hidden + 1\r\n            end\r\n         else\r\n            nodes[id] = node\r\n            ids[#ids+1] = id            \r\n         end\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 103,
    "text": "if (not id_filter) or id_filter(id) then\r\n         local node\r\n         if cache[id] then\r\n            node = cache[id]\r\n         else\r\n            node = self:make_node(vnode, id) \r\n            cache[id] = node\r\n         end\r\n         if visible then\r\n            if node:check_permissions(user, \"show\") then\r\n               nodes[id] = node\r\n               ids[#ids+1] = id\r\n            else\r\n               num_hidden = num_hidden + 1\r\n            end\r\n         else\r\n            nodes[id] = node\r\n            ids[#ids+1] = id            \r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 104,
    "text": "local node",
    "type": "statement:localassign"
  }, {
    "id": 105,
    "text": "if cache[id] then\r\n            node = cache[id]\r\n         else\r\n            node = self:make_node(vnode, id) \r\n            cache[id] = node\r\n         end",
    "type": "statement:if"
  }, {
    "id": 106,
    "text": "node = cache[id]",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "node = self:make_node(vnode, id)",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "cache[id] = node",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "if visible then\r\n            if node:check_permissions(user, \"show\") then\r\n               nodes[id] = node\r\n               ids[#ids+1] = id\r\n            else\r\n               num_hidden = num_hidden + 1\r\n            end\r\n         else\r\n            nodes[id] = node\r\n            ids[#ids+1] = id            \r\n         end",
    "type": "statement:if"
  }, {
    "id": 110,
    "text": "if node:check_permissions(user, \"show\") then\r\n               nodes[id] = node\r\n               ids[#ids+1] = id\r\n            else\r\n               num_hidden = num_hidden + 1\r\n            end",
    "type": "statement:if"
  }, {
    "id": 111,
    "text": "nodes[id] = node",
    "type": "statement:assign"
  }, {
    "id": 112,
    "text": "ids[#ids+1] = id",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "num_hidden = num_hidden + 1",
    "type": "statement:assign"
  }, {
    "id": 114,
    "text": "table.sort(ids)",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 116,
    "text": "function Saci:get_versium_nodes_by_prefix(prefix, limit)\r\n   -- Get the nodes, either all at once, of one by one   \r\n   if self.versium.get_nodes_by_prefix then\r\n      return self.versium:get_nodes_by_prefix(prefix, limit)\r\n   else\r\n      local versium_nodes = {}\r\n      for i, id in ipairs(self.versium:get_node_ids(prefix, limit)) do\r\n         versium_nodes[id] = self.versium:get_node(id)\r\n      end\r\n      return versium_nodes\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 117,
    "text": "if self.versium.get_nodes_by_prefix then\r\n      return self.versium:get_nodes_by_prefix(prefix, limit)\r\n   else\r\n      local versium_nodes = {}\r\n      for i, id in ipairs(self.versium:get_node_ids(prefix, limit)) do\r\n         versium_nodes[id] = self.versium:get_node(id)\r\n      end\r\n      return versium_nodes\r\n   end",
    "type": "statement:if"
  }, {
    "id": 118,
    "text": "local versium_nodes = {}",
    "type": "statement:localassign"
  }, {
    "id": 119,
    "text": "for i, id in ipairs(self.versium:get_node_ids(prefix, limit)) do\r\n         versium_nodes[id] = self.versium:get_node(id)\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 120,
    "text": "versium_nodes[id] = self.versium:get_node(id)",
    "type": "statement:assign"
  }, {
    "id": 121,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 122,
    "text": "function Saci:find_nodes(fields, patterns, prefix)\r\n   assert(fields)\r\n   assert(patterns)\r\n   if type(fields) == \"string\" then fields = {fields} end\r\n   if type(patterns) == \"string\" then patterns = {patterns} end\r\n   local nodes = {}\r\n   -- find nodes matching the patterns\r\n   local basic_match, matched, node, value\r\n\r\n   local function basic_match(vnode) -- check if the pattern matches raw node\r\n      for _, pattern in ipairs(patterns) do\r\n         if vnode:lower():match(pattern) then return true end\r\n      end\r\n      return false\r\n   end\r\n\r\n   for id, vnode in pairs(self:get_versium_nodes_by_prefix(prefix)) do\r\n      if basic_match(vnode) then -- ok, the pattern is somewhere there, let's look\r\n         node = self:make_node(vnode, id)\r\n         if node:multimatch(fields, patterns) then\r\n            table.insert(nodes, node)\r\n         end\r\n      end\r\n   end\r\n\r\n   return nodes\r\nend",
    "type": "function"
  }, {
    "id": 123,
    "text": "assert(fields)",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "assert(patterns)",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "if type(fields) == \"string\" then fields = {fields} end",
    "type": "statement:if"
  }, {
    "id": 126,
    "text": "fields = {fields}",
    "type": "statement:assign"
  }, {
    "id": 127,
    "text": "if type(patterns) == \"string\" then patterns = {patterns} end",
    "type": "statement:if"
  }, {
    "id": 128,
    "text": "patterns = {patterns}",
    "type": "statement:assign"
  }, {
    "id": 129,
    "text": "local basic_match, matched, node, value",
    "type": "statement:localassign"
  }, {
    "id": 130,
    "text": "local function basic_match(vnode) -- check if the pattern matches raw node\r\n      for _, pattern in ipairs(patterns) do\r\n         if vnode:lower():match(pattern) then return true end\r\n      end\r\n      return false\r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 131,
    "text": "for _, pattern in ipairs(patterns) do\r\n         if vnode:lower():match(pattern) then return true end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 132,
    "text": "if vnode:lower():match(pattern) then return true end",
    "type": "statement:if"
  }, {
    "id": 133,
    "text": "for id, vnode in pairs(self:get_versium_nodes_by_prefix(prefix)) do\r\n      if basic_match(vnode) then -- ok, the pattern is somewhere there, let's look\r\n         node = self:make_node(vnode, id)\r\n         if node:multimatch(fields, patterns) then\r\n            table.insert(nodes, node)\r\n         end\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 134,
    "text": "if basic_match(vnode) then -- ok, the pattern is somewhere there, let's look\r\n         node = self:make_node(vnode, id)\r\n         if node:multimatch(fields, patterns) then\r\n            table.insert(nodes, node)\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 135,
    "text": "if node:multimatch(fields, patterns) then\r\n            table.insert(nodes, node)\r\n         end",
    "type": "statement:if"
  }, {
    "id": 136,
    "text": "table.insert(nodes, node)",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 138,
    "text": "local function basic_match(vnode) -- check if the pattern matches raw node\r\n      for _, pattern in ipairs(patterns) do\r\n         if vnode:lower():match(pattern) then return true end\r\n      end\r\n      return false\r\n   end",
    "type": "function"
  }, {
    "id": 139,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 140,
    "text": "function Saci:query_nodes(fields, query, prefix)   \r\n   query = \" \"..query..\" \"\r\n   fields = fields or {\"content\"}\r\n   local positive_terms = {}\r\n   local negative_terms = {}\r\n   for term in query:gmatch(\"%S+\") do\r\n      if term:match(\"%:\") then\r\n         local key, value = term:match(\"^(%w+):(.+)\")\r\n         if key == \"prefix\" then\r\n            prefix=value\r\n         end\r\n      elseif term:sub(1,1)==\"-\" then\r\n         table.insert(negative_terms, \"%W(\"..term:sub(2)..\")%W\")\r\n      else\r\n         table.insert(positive_terms, \"%W(\"..term..\")%W\")\r\n      end\r\n   end\r\n\r\n   local nodes = self:find_nodes(fields, positive_terms, prefix)\r\n   local nodes_without_negatives = {}\r\n   for i, node in ipairs(nodes) do\r\n      if not node:multimatch(fields, negative_terms) then\r\n         table.insert(nodes_without_negatives, node)\r\n      end\r\n   end\r\n   return nodes_without_negatives\r\nend",
    "type": "function"
  }, {
    "id": 141,
    "text": "query = \" \"..query..\" \"",
    "type": "statement:assign"
  }, {
    "id": 142,
    "text": "fields = fields or {\"content\"}",
    "type": "statement:assign"
  }, {
    "id": 143,
    "text": "local positive_terms = {}",
    "type": "statement:localassign"
  }, {
    "id": 144,
    "text": "local negative_terms = {}",
    "type": "statement:localassign"
  }, {
    "id": 145,
    "text": "for term in query:gmatch(\"%S+\") do\r\n      if term:match(\"%:\") then\r\n         local key, value = term:match(\"^(%w+):(.+)\")\r\n         if key == \"prefix\" then\r\n            prefix=value\r\n         end\r\n      elseif term:sub(1,1)==\"-\" then\r\n         table.insert(negative_terms, \"%W(\"..term:sub(2)..\")%W\")\r\n      else\r\n         table.insert(positive_terms, \"%W(\"..term..\")%W\")\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 146,
    "text": "if term:match(\"%:\") then\r\n         local key, value = term:match(\"^(%w+):(.+)\")\r\n         if key == \"prefix\" then\r\n            prefix=value\r\n         end\r\n      elseif term:sub(1,1)==\"-\" then\r\n         table.insert(negative_terms, \"%W(\"..term:sub(2)..\")%W\")\r\n      else\r\n         table.insert(positive_terms, \"%W(\"..term..\")%W\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 147,
    "text": "local key, value = term:match(\"^(%w+):(.+)\")",
    "type": "statement:localassign"
  }, {
    "id": 148,
    "text": "if key == \"prefix\" then\r\n            prefix=value\r\n         end",
    "type": "statement:if"
  }, {
    "id": 149,
    "text": "prefix=value",
    "type": "statement:assign"
  }, {
    "id": 150,
    "text": "table.insert(negative_terms, \"%W(\"..term:sub(2)..\")%W\")",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "table.insert(positive_terms, \"%W(\"..term..\")%W\")",
    "type": "statement:functioncall"
  }, {
    "id": 152,
    "text": "local nodes = self:find_nodes(fields, positive_terms, prefix)",
    "type": "statement:localassign"
  }, {
    "id": 153,
    "text": "local nodes_without_negatives = {}",
    "type": "statement:localassign"
  }, {
    "id": 154,
    "text": "for i, node in ipairs(nodes) do\r\n      if not node:multimatch(fields, negative_terms) then\r\n         table.insert(nodes_without_negatives, node)\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 155,
    "text": "if not node:multimatch(fields, negative_terms) then\r\n         table.insert(nodes_without_negatives, node)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 156,
    "text": "table.insert(nodes_without_negatives, node)",
    "type": "statement:functioncall"
  }, {
    "id": 157,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 158,
    "text": "function(user)   return true end",
    "type": "function"
  }, {
    "id": 159,
    "text": "function(user)   return user ~= nil and user:len() > 0 end",
    "type": "function"
  }, {
    "id": 160,
    "text": "function(user)   return not user end",
    "type": "function"
  }, {
    "id": 161,
    "text": "function(action) return true end",
    "type": "function"
  }, {
    "id": 162,
    "text": "function(x, y)\r\n                          if fields and fields[x] and fields[y] then\r\n                             return (fields[x][1] or 1000) < (fields[y][1] or 1000)\r\n                          else\r\n                             return x < y\r\n                          end\r\n                       end",
    "type": "function"
  }, {
    "id": 163,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 164,
    "text": "function(e1, e2) return e1.timestamp > e2.timestamp end",
    "type": "function"
  }, {
    "id": 165,
    "text": "",
    "type": "function container"
  }, {
    "id": 166,
    "text": "format",
    "type": "global function"
  }, {
    "id": 167,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 168,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 169,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 170,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 171,
    "text": "new",
    "type": "global function"
  }, {
    "id": 172,
    "text": "id_filter",
    "type": "global function"
  }, {
    "id": 173,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 174,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 175,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 176,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 177,
    "text": "module",
    "type": "global function"
  }, {
    "id": 178,
    "text": "type",
    "type": "global function"
  }, {
    "id": 179,
    "text": "require",
    "type": "global function"
  }, {
    "id": 180,
    "text": "match",
    "type": "global function"
  }, {
    "id": 181,
    "text": "",
    "type": "global variable"
  }, {
    "id": 182,
    "text": "",
    "type": "variable container"
  }, {
    "id": 183,
    "text": "",
    "type": "require container"
  }, {
    "id": 184,
    "text": "",
    "type": "local variable"
  }, {
    "id": 185,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 186,
    "text": "",
    "type": "local variable"
  }, {
    "id": 187,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 188,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 189,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 190,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 191,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 192,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 193,
    "text": "(module_name)",
    "type": "module"
  }, {
    "id": 194,
    "text": "node)",
    "type": "module"
  } ]
}