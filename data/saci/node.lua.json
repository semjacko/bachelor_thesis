{
  "_filename": "node.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/saci/lua/saci/node.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 5
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 12,
    "label": "has",
    "to": 17
  }, {
    "from": 12,
    "label": "has",
    "to": 18
  }, {
    "from": 12,
    "label": "has",
    "to": 19
  }, {
    "from": 12,
    "label": "has",
    "to": 20
  }, {
    "from": 12,
    "label": "has",
    "to": 5
  }, {
    "from": 12,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 5
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 24,
    "label": "has",
    "to": 30
  }, {
    "from": 24,
    "label": "has",
    "to": 5
  }, {
    "from": 24,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 32,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 32,
    "label": "has",
    "to": 5
  }, {
    "from": 32,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 5
  }, {
    "from": 41,
    "label": "has",
    "to": 5
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 5
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 44,
    "label": "has",
    "to": 49
  }, {
    "from": 44,
    "label": "has",
    "to": 50
  }, {
    "from": 44,
    "label": "has",
    "to": 51
  }, {
    "from": 44,
    "label": "has",
    "to": 52
  }, {
    "from": 44,
    "label": "has",
    "to": 53
  }, {
    "from": 44,
    "label": "has",
    "to": 54
  }, {
    "from": 44,
    "label": "has",
    "to": 55
  }, {
    "from": 44,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 44,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 62,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 62,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 62,
    "label": "has",
    "to": 5
  }, {
    "from": 62,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 73,
    "label": "has",
    "to": 78
  }, {
    "from": 73,
    "label": "has",
    "to": 79
  }, {
    "from": 73,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 81,
    "label": "has",
    "to": 5
  }, {
    "from": 81,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 87,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 5
  }, {
    "from": 87,
    "label": "has",
    "to": 5
  }, {
    "from": 87,
    "label": "has",
    "to": 92
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 93,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 5
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 99,
    "label": "has",
    "to": 5
  }, {
    "from": 99,
    "label": "has",
    "to": 5
  }, {
    "from": 97,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 102,
    "label": "has",
    "to": 5
  }, {
    "from": 102,
    "label": "has",
    "to": 5
  }, {
    "from": 102,
    "label": "has",
    "to": 5
  }, {
    "from": 97,
    "label": "has",
    "to": 105
  }, {
    "from": 97,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 97,
    "label": "has",
    "to": 109
  }, {
    "from": 97,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 110,
    "label": "has",
    "to": 112
  }, {
    "from": 97,
    "label": "has",
    "to": 113
  }, {
    "from": 97,
    "label": "has",
    "to": 5
  }, {
    "from": 97,
    "label": "has",
    "to": 114
  }, {
    "from": 115,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 115,
    "label": "has",
    "to": 5
  }, {
    "from": 115,
    "label": "has",
    "to": 5
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 117,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 117,
    "label": "has",
    "to": 5
  }, {
    "from": 117,
    "label": "has",
    "to": 5
  }, {
    "from": 117,
    "label": "has",
    "to": 5
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 119,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 121,
    "label": "has",
    "to": 5
  }, {
    "from": 121,
    "label": "has",
    "to": 123
  }, {
    "from": 121,
    "label": "has",
    "to": 5
  }, {
    "from": 121,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 121,
    "label": "has",
    "to": 5
  }, {
    "from": 121,
    "label": "has",
    "to": 5
  }, {
    "from": 121,
    "label": "has",
    "to": 5
  }, {
    "from": 121,
    "label": "has",
    "to": 127
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 128,
    "label": "has",
    "to": 5
  }, {
    "from": 128,
    "label": "has",
    "to": 5
  }, {
    "from": 128,
    "label": "has",
    "to": 130
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 131,
    "label": "has",
    "to": 5
  }, {
    "from": 131,
    "label": "has",
    "to": 133
  }, {
    "from": 134,
    "label": "has",
    "to": 132
  }, {
    "from": 134,
    "label": "has",
    "to": 5
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 136,
    "label": "has",
    "to": 5
  }, {
    "from": 136,
    "label": "has",
    "to": 138
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 139,
    "label": "has",
    "to": 141
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 141,
    "label": "has",
    "to": 143
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 143,
    "label": "has",
    "to": 146
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 139,
    "label": "has",
    "to": 5
  }, {
    "from": 139,
    "label": "has",
    "to": 148
  }, {
    "from": 149,
    "label": "has",
    "to": 5
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 151,
    "label": "has",
    "to": 5
  }, {
    "from": 152,
    "label": "has",
    "to": 111
  }, {
    "from": 153,
    "label": "has",
    "to": 112
  }, {
    "from": 154,
    "label": "has",
    "to": 5
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 119,
    "label": "calls",
    "to": 117
  }, {
    "from": 119,
    "label": "calls",
    "to": 117
  }, {
    "from": 81,
    "label": "calls",
    "to": 158
  }, {
    "from": 44,
    "label": "calls",
    "to": 159
  }, {
    "from": 44,
    "label": "calls",
    "to": 159
  }, {
    "from": 44,
    "label": "calls",
    "to": 159
  }, {
    "from": 73,
    "label": "calls",
    "to": 159
  }, {
    "from": 24,
    "label": "calls",
    "to": 160
  }, {
    "from": 44,
    "label": "calls",
    "to": 160
  }, {
    "from": 62,
    "label": "calls",
    "to": 160
  }, {
    "from": 73,
    "label": "calls",
    "to": 160
  }, {
    "from": 87,
    "label": "calls",
    "to": 160
  }, {
    "from": 81,
    "label": "calls",
    "to": 161
  }, {
    "from": 81,
    "label": "calls",
    "to": 161
  }, {
    "from": 62,
    "label": "calls",
    "to": 162
  }, {
    "from": 117,
    "label": "calls",
    "to": 162
  }, {
    "from": 117,
    "label": "calls",
    "to": 166
  }, {
    "from": 156,
    "label": "calls",
    "to": 157
  }, {
    "from": 12,
    "label": "calls",
    "to": 157
  }, {
    "from": 44,
    "label": "calls",
    "to": 157
  }, {
    "from": 62,
    "label": "calls",
    "to": 157
  }, {
    "from": 97,
    "label": "calls",
    "to": 157
  }, {
    "from": 62,
    "label": "calls",
    "to": 167
  }, {
    "from": 81,
    "label": "calls",
    "to": 164
  }, {
    "from": 115,
    "label": "calls",
    "to": 164
  }, {
    "from": 121,
    "label": "calls",
    "to": 164
  }, {
    "from": 139,
    "label": "calls",
    "to": 164
  }, {
    "from": 139,
    "label": "calls",
    "to": 164
  }, {
    "from": 97,
    "label": "calls",
    "to": 119
  }, {
    "from": 97,
    "label": "calls",
    "to": 119
  }, {
    "from": 44,
    "label": "calls",
    "to": 174
  }, {
    "from": 117,
    "label": "calls",
    "to": 115
  }, {
    "from": 87,
    "label": "calls",
    "to": 163
  }, {
    "from": 44,
    "label": "calls",
    "to": 32
  }, {
    "from": 121,
    "label": "calls",
    "to": 170
  }, {
    "from": 12,
    "label": "calls",
    "to": 168
  }, {
    "from": 156,
    "label": "calls",
    "to": 169
  }, {
    "from": 136,
    "label": "calls",
    "to": 173
  }, {
    "from": 117,
    "label": "calls",
    "to": 171
  }, {
    "from": 117,
    "label": "calls",
    "to": 171
  }, {
    "from": 117,
    "label": "calls",
    "to": 171
  }, {
    "from": 139,
    "label": "calls",
    "to": 171
  }, {
    "from": 156,
    "label": "calls",
    "to": 172
  }, {
    "from": 156,
    "label": "calls",
    "to": 172
  }, {
    "from": 131,
    "label": "calls",
    "to": 128
  }, {
    "from": 134,
    "label": "calls",
    "to": 128
  }, {
    "from": 156,
    "label": "calls",
    "to": 165
  }, {
    "from": 87,
    "label": "calls",
    "to": 165
  }, {
    "from": 1,
    "label": "contains",
    "to": 156
  }, {
    "from": 156,
    "label": "declares",
    "to": 2
  }, {
    "from": 156,
    "label": "declares",
    "to": 7
  }, {
    "from": 156,
    "label": "declares",
    "to": 12
  }, {
    "from": 156,
    "label": "declares",
    "to": 22
  }, {
    "from": 156,
    "label": "declares",
    "to": 24
  }, {
    "from": 156,
    "label": "declares",
    "to": 32
  }, {
    "from": 156,
    "label": "declares",
    "to": 41
  }, {
    "from": 156,
    "label": "declares",
    "to": 44
  }, {
    "from": 156,
    "label": "declares",
    "to": 62
  }, {
    "from": 156,
    "label": "declares",
    "to": 73
  }, {
    "from": 156,
    "label": "declares",
    "to": 81
  }, {
    "from": 156,
    "label": "declares",
    "to": 87
  }, {
    "from": 156,
    "label": "declares",
    "to": 93
  }, {
    "from": 156,
    "label": "declares",
    "to": 97
  }, {
    "from": 156,
    "label": "declares",
    "to": 115
  }, {
    "from": 156,
    "label": "declares",
    "to": 117
  }, {
    "from": 156,
    "label": "declares",
    "to": 119
  }, {
    "from": 156,
    "label": "declares",
    "to": 121
  }, {
    "from": 156,
    "label": "declares",
    "to": 128
  }, {
    "from": 156,
    "label": "declares",
    "to": 131
  }, {
    "from": 156,
    "label": "declares",
    "to": 134
  }, {
    "from": 156,
    "label": "declares",
    "to": 136
  }, {
    "from": 156,
    "label": "declares",
    "to": 139
  }, {
    "from": 156,
    "label": "declares",
    "to": 149
  }, {
    "from": 156,
    "label": "declares",
    "to": 151
  }, {
    "from": 156,
    "label": "declares",
    "to": 152
  }, {
    "from": 156,
    "label": "declares",
    "to": 153
  }, {
    "from": 156,
    "label": "declares",
    "to": 154
  }, {
    "from": 1,
    "label": "contains",
    "to": 175
  }, {
    "from": 1,
    "label": "contains",
    "to": 176
  }, {
    "from": 175,
    "label": "initializes",
    "to": 177
  }, {
    "from": 177,
    "label": "assigns",
    "to": 178
  }, {
    "from": 175,
    "label": "initializes",
    "to": 179
  }, {
    "from": 179,
    "label": "assigns",
    "to": 180
  }, {
    "from": 175,
    "label": "initializes",
    "to": 181
  }, {
    "from": 181,
    "label": "assigns",
    "to": 182
  }, {
    "from": 182,
    "label": "assigns",
    "to": 183
  }, {
    "from": 183,
    "label": "assigns",
    "to": 184
  }, {
    "from": 175,
    "label": "initializes",
    "to": 185
  }, {
    "from": 185,
    "label": "assigns",
    "to": 186
  }, {
    "from": 175,
    "label": "initializes",
    "to": 187
  }, {
    "from": 187,
    "label": "assigns",
    "to": 188
  }, {
    "from": 175,
    "label": "initializes",
    "to": 189
  }, {
    "from": 189,
    "label": "assigns",
    "to": 190
  }, {
    "from": 175,
    "label": "initializes",
    "to": 191
  }, {
    "from": 191,
    "label": "assigns",
    "to": 192
  }, {
    "from": 176,
    "label": "initializes",
    "to": 193
  }, {
    "from": 193,
    "label": "requires",
    "to": 194
  }, {
    "from": 176,
    "label": "initializes",
    "to": 193
  }, {
    "from": 193,
    "label": "requires",
    "to": 195
  }, {
    "from": 196,
    "label": "initializes",
    "to": 193
  }, {
    "from": 193,
    "label": "requires",
    "to": 197
  }, {
    "from": 177,
    "label": "contains",
    "to": 2
  }, {
    "from": 177,
    "label": "contains",
    "to": 7
  }, {
    "from": 185,
    "label": "contains",
    "to": 32
  }, {
    "from": 185,
    "label": "contains",
    "to": 41
  }, {
    "from": 10,
    "label": "hasArgument",
    "to": 184
  }, {
    "from": 19,
    "label": "hasArgument",
    "to": 184
  }, {
    "from": 20,
    "label": "hasArgument",
    "to": 184
  }, {
    "from": 51,
    "label": "hasArgument",
    "to": 184
  }, {
    "from": 53,
    "label": "hasArgument",
    "to": 184
  }, {
    "from": 55,
    "label": "hasArgument",
    "to": 184
  }, {
    "from": 66,
    "label": "hasArgument",
    "to": 184
  }, {
    "from": 74,
    "label": "hasArgument",
    "to": 184
  }, {
    "from": 78,
    "label": "hasArgument",
    "to": 184
  }, {
    "from": 79,
    "label": "hasArgument",
    "to": 184
  }, {
    "from": 90,
    "label": "hasArgument",
    "to": 184
  }, {
    "from": 91,
    "label": "hasArgument",
    "to": 151
  }, {
    "from": 91,
    "label": "hasArgument",
    "to": 184
  }, {
    "from": 95,
    "label": "hasArgument",
    "to": 184
  }, {
    "from": 104,
    "label": "hasArgument",
    "to": 184
  }, {
    "from": 110,
    "label": "hasArgument",
    "to": 152
  }, {
    "from": 110,
    "label": "hasArgument",
    "to": 153
  }, {
    "from": 110,
    "label": "hasArgument",
    "to": 184
  }, {
    "from": 111,
    "label": "hasArgument",
    "to": 184
  }, {
    "from": 112,
    "label": "hasArgument",
    "to": 184
  }, {
    "from": 113,
    "label": "hasArgument",
    "to": 184
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "node",
    "type": "module"
  }, {
    "id": 2,
    "text": "function(value, repo)\r\n   local sandbox = saci.sandbox.new(repo.sandbox_values)\r\n   sandbox.logger = repo.logger\r\n   return sandbox:do_lua(value)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local sandbox = saci.sandbox.new(repo.sandbox_values)",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "sandbox.logger = repo.logger",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "function(value, repo)\r\n   local nodes = {}\r\n   for line in (value or \"\"):gmatch(\"[^%s]+\") do\r\n      table.insert(nodes, line)\r\n   end\r\n   return nodes\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "local nodes = {}",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "for line in (value or \"\"):gmatch(\"[^%s]+\") do\r\n      table.insert(nodes, line)\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 10,
    "text": "table.insert(nodes, line)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function new(args)\r\n   local node = setmetatable({raw_values={}, inherited_values={}, active_values={}}, Node_mt)\r\n   --assert(args.data)\r\n   --assert(args.id)\r\n   node.data = args.data\r\n   node.id = args.id\r\n   --assert(args.repository)\r\n   node.repository = args.repository\r\n   node.saci = node.repository\r\n   node.raw_values = saci.sandbox.new():do_lua(args.data)\r\n   --assert(rawget(node, \"raw_values\"), \"the sandbox should give us a table\")\r\n   node:apply_inheritance()\r\n   node:activate()\r\n   return node\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "local node = setmetatable({raw_values={}, inherited_values={}, active_values={}}, Node_mt)",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "node.data = args.data",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "node.id = args.id",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "node.repository = args.repository",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "node.saci = node.repository",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "node.raw_values = saci.sandbox.new():do_lua(args.data)",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "node:apply_inheritance()",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "node:activate()",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function Node:get_history(prefix)\r\n   return self.repository:get_node_history(self.id, prefix)\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function Node:tostring()\r\n   local buf = \"================= \"..self._id..\" ========\\n\"\r\n   for field, fieldinfo in pairs(self.fields) do\r\n      buf = buf..\"~~~~~~~ \"..field..\" (\"..(fieldinfo.proto or \"\")..\") ~~~~\\n\"\r\n      buf = buf..(self._inactive[field] or \"\")\r\n      buf = buf..\"\\n\"\r\n   end\r\n   buf = buf..\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\n\"\r\n   return buf\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "local buf = \"================= \"..self._id..\" ========\\n\"",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "for field, fieldinfo in pairs(self.fields) do\r\n      buf = buf..\"~~~~~~~ \"..field..\" (\"..(fieldinfo.proto or \"\")..\") ~~~~\\n\"\r\n      buf = buf..(self._inactive[field] or \"\")\r\n      buf = buf..\"\\n\"\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 27,
    "text": "buf = buf..\"~~~~~~~ \"..field..\" (\"..(fieldinfo.proto or \"\")..\") ~~~~\\n\"",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "buf = buf..(self._inactive[field] or \"\")",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "buf = buf..\"\\n\"",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "buf = buf..\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\n\"",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function inheritance_rules.concat(proto_value, own_value)\r\n   local buf = \"\"\r\n   if proto_value and proto_value:len() > 0 then\r\n      buf = proto_value\r\n   end\r\n   if own_value and own_value:len() > 0 then\r\n      if buf:len() > 0 then\r\n         buf = buf..\"\\n\"..own_value\r\n      else\r\n         buf = own_value\r\n      end\r\n   end\r\n   return buf\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "local buf = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "if proto_value and proto_value:len() > 0 then\r\n      buf = proto_value\r\n   end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "buf = proto_value",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "if own_value and own_value:len() > 0 then\r\n      if buf:len() > 0 then\r\n         buf = buf..\"\\n\"..own_value\r\n      else\r\n         buf = own_value\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "if buf:len() > 0 then\r\n         buf = buf..\"\\n\"..own_value\r\n      else\r\n         buf = own_value\r\n      end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "buf = buf..\"\\n\"..own_value",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "buf = own_value",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function inheritance_rules.fallback(proto_value, own_value)\r\n   if own_value and own_value~=\"\" then\r\n      return own_value\r\n   else\r\n      return proto_value\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "if own_value and own_value~=\"\" then\r\n      return own_value\r\n   else\r\n      return proto_value\r\n   end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function Node:apply_inheritance()\r\n\r\n   --assert(self.id)\r\n   -- If this node is itself the root prototype, then there is nothing else\r\n   -- to do.\r\n   if self.id == self.repository.root_prototype_id then\r\n      self.inherited_values = self.raw_values\r\n      return\r\n   end\r\n   if self.raw_values.prototype == \"\" then\r\n      self.raw_values.prototype = nil  -- to make it easier to test for it\r\n   end\r\n   local prototype_id = self.raw_values.prototype or self.repository.root_prototype_id\r\n\r\n   -- Get the values for the prototype.\r\n   local proto_values = self.repository:get_node(prototype_id).inherited_values\r\n   assert(proto_values.fields, \"The prototype node must define fields\")\r\n \r\n   -- Apply inheritance from the prototype, using the information in the\r\n   -- 'fields' field to decide how to handle each field.  \r\n\r\n   -- First, we need to figure out what those fields are.  We use\r\n   -- this node's own \"fields\" table rather than the fields table from the\r\n   -- prototype and the value for fields must _always_ be inherited as a \r\n   -- matter of bootstrapping.\r\n\r\n   local tmp_fields = inheritance_rules.concat(proto_values.fields,\r\n                                               self.raw_values.fields)\r\n   assert(tmp_fields)\r\n   local fields, err = saci.sandbox.new{}:do_lua(tmp_fields)\r\n   assert(fields, err)\r\n\r\n   -- Now do the actual inheritance.  This means going through all fields\r\n   -- and applying each of them the \"inheritance rule\" specified by the\r\n   -- \"proto\" attribute.\r\n   for field_name, field in pairs(fields) do\r\n      field.name = field_name\r\n      if field.proto then\r\n         local inheritance_fn = inheritance_rules[field.proto]\r\n                                or inheritance_rules.default\r\n         self.inherited_values[field.name] = inheritance_fn(\r\n                                                proto_values[field.name], \r\n                                                self.raw_values[field.name])   \r\n      end\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "if self.id == self.repository.root_prototype_id then\r\n      self.inherited_values = self.raw_values\r\n      return\r\n   end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "self.inherited_values = self.raw_values",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "if self.raw_values.prototype == \"\" then\r\n      self.raw_values.prototype = nil  -- to make it easier to test for it\r\n   end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "self.raw_values.prototype = nil",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "local prototype_id = self.raw_values.prototype or self.repository.root_prototype_id",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "local proto_values = self.repository:get_node(prototype_id).inherited_values",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "assert(proto_values.fields, \"The prototype node must define fields\")",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "local tmp_fields = inheritance_rules.concat(proto_values.fields,\r\n                                               self.raw_values.fields)",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "assert(tmp_fields)",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "local fields, err = saci.sandbox.new{}:do_lua(tmp_fields)",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "assert(fields, err)",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "for field_name, field in pairs(fields) do\r\n      field.name = field_name\r\n      if field.proto then\r\n         local inheritance_fn = inheritance_rules[field.proto]\r\n                                or inheritance_rules.default\r\n         self.inherited_values[field.name] = inheritance_fn(\r\n                                                proto_values[field.name], \r\n                                                self.raw_values[field.name])   \r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 57,
    "text": "field.name = field_name",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "if field.proto then\r\n         local inheritance_fn = inheritance_rules[field.proto]\r\n                                or inheritance_rules.default\r\n         self.inherited_values[field.name] = inheritance_fn(\r\n                                                proto_values[field.name], \r\n                                                self.raw_values[field.name])   \r\n      end",
    "type": "statement:if"
  }, {
    "id": 59,
    "text": "local inheritance_fn = inheritance_rules[field.proto]\r\n                                or inheritance_rules.default",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "self.inherited_values[field.name] = inheritance_fn(\r\n                                                proto_values[field.name], \r\n                                                self.raw_values[field.name])",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "function Node:activate()\r\n   self.active_values = {}\r\n   local fields, err = saci.sandbox.new{}:do_lua(self.inherited_values.fields)\r\n   if not fields then\r\n      error(err)\r\n   end\r\n\r\n   for field, fieldinfo in pairs(fields) do\r\n      if fieldinfo.activate then\r\n         local activator_fn = Activators[fieldinfo.activate]\r\n         local value = self[field] or \"\"\r\n         self.active_values[field] = activator_fn(value, self.repository)\r\n      end\r\n   end\r\n\r\n   return self\r\nend",
    "type": "function"
  }, {
    "id": 63,
    "text": "self.active_values = {}",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "local fields, err = saci.sandbox.new{}:do_lua(self.inherited_values.fields)",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "if not fields then\r\n      error(err)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "error(err)",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "for field, fieldinfo in pairs(fields) do\r\n      if fieldinfo.activate then\r\n         local activator_fn = Activators[fieldinfo.activate]\r\n         local value = self[field] or \"\"\r\n         self.active_values[field] = activator_fn(value, self.repository)\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 68,
    "text": "if fieldinfo.activate then\r\n         local activator_fn = Activators[fieldinfo.activate]\r\n         local value = self[field] or \"\"\r\n         self.active_values[field] = activator_fn(value, self.repository)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "local activator_fn = Activators[fieldinfo.activate]",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "local value = self[field] or \"\"",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "self.active_values[field] = activator_fn(value, self.repository)",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "function Node:update(new_values, fields)\r\n   assert(new_values)\r\n   --assert(fields)\r\n   -- First, update the raw values the new values (only those that are listed in fields!)\r\n   for key, value in pairs(new_values) do\r\n      if (not fields) or (fields[key] and not fields[key].virtual) then\r\n         self.raw_values[key] = value\r\n      end\r\n   end\r\n   self:apply_inheritance()\r\n   self:activate()\r\n\r\n   -- Now make a new node, being careful to not get into recursive metatables\r\n   --local vnode = self._vnode\r\n   --setmetatable(self._inactive, {}) -- to avoid recursive metatables\r\n   --local new_smart_node = new(vnode, self.repository, self.repository.config.ROOT_PROTOTYPE)\r\n   -- Now make the current node a copy of the new one (copy the fields and the metatable\r\n   --for k,v in pairs(new_smart_node) do\r\n   --   self[k] = v\r\n   --end\r\n   --setmetatable(self, getmetatable(new_smart_node))\r\nend",
    "type": "function"
  }, {
    "id": 74,
    "text": "assert(new_values)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "for key, value in pairs(new_values) do\r\n      if (not fields) or (fields[key] and not fields[key].virtual) then\r\n         self.raw_values[key] = value\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 76,
    "text": "if (not fields) or (fields[key] and not fields[key].virtual) then\r\n         self.raw_values[key] = value\r\n      end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "self.raw_values[key] = value",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "self:apply_inheritance()",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "self:activate()",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "function Node:diff(another_node)\r\n   local difftab  = {}\r\n   for i, field in ipairs(self:get_ordered_field_names()) do\r\n      if (self.raw_values[field] or \"\") ~= (another_node.raw_values[field] or \"\") then\r\n         difftab[field] = diff.diff(tostring(another_node.raw_values[field]),\r\n                                    tostring(self.raw_values[field]))\r\n      end\r\n   end\r\n   return difftab\r\nend",
    "type": "function"
  }, {
    "id": 82,
    "text": "local difftab  = {}",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "for i, field in ipairs(self:get_ordered_field_names()) do\r\n      if (self.raw_values[field] or \"\") ~= (another_node.raw_values[field] or \"\") then\r\n         difftab[field] = diff.diff(tostring(another_node.raw_values[field]),\r\n                                    tostring(self.raw_values[field]))\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 84,
    "text": "if (self.raw_values[field] or \"\") ~= (another_node.raw_values[field] or \"\") then\r\n         difftab[field] = diff.diff(tostring(another_node.raw_values[field]),\r\n                                    tostring(self.raw_values[field]))\r\n      end",
    "type": "statement:if"
  }, {
    "id": 85,
    "text": "difftab[field] = diff.diff(tostring(another_node.raw_values[field]),\r\n                                    tostring(self.raw_values[field]))",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "function Node:get_ordered_field_names()\r\n   local ordered_fields = {}\r\n   for k,v in pairs(self.fields) do\r\n      table.insert(ordered_fields, k)\r\n   end\r\n   table.sort(ordered_fields, function(a,b) return (self.fields[a][1] or 0) < (self.fields[b][1] or 0) end)\r\n   return ordered_fields\r\nend",
    "type": "function"
  }, {
    "id": 88,
    "text": "local ordered_fields = {}",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "for k,v in pairs(self.fields) do\r\n      table.insert(ordered_fields, k)\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 90,
    "text": "table.insert(ordered_fields, k)",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "table.sort(ordered_fields, function(a,b) return (self.fields[a][1] or 0) < (self.fields[b][1] or 0) end)",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 93,
    "text": "function Node:save(author, comment, extra, timestamp)\r\n   author = author or \"\"\r\n   self.repository:save_node(self, author, comment, extra, timestamp)\r\nend",
    "type": "function"
  }, {
    "id": 94,
    "text": "author = author or \"\"",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "self.repository:save_node(self, author, comment, extra, timestamp)",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "function Node:check_permissions(user, action)\r\n   if not self.permissions then return true end\r\n   \r\n   local function in_table(tab, item)\r\n      for i,v in ipairs(tab) do\r\n         if v==item then return true end\r\n      end\r\n      return false\r\n   end\r\n   \r\n   -- checks membership in groups\r\n   local function member(item, group)\r\n      if     type(group) == \"function\" then return group(item)\r\n      elseif type(group) == \"table\"    then return in_table(group, item)\r\n      elseif type(group) == \"string\"   then return group == item\r\n      else   error(\"expected a string, a table or a function\")\r\n      end\r\n   end\r\n\r\n   -- keeps the allowed/not allowed state\r\n   local has_permission = true\r\n   -- toggles the the state\r\n   local function set(user_group, action_group, value)\r\n      if member(user, user_group) and member(action, action_group) then\r\n         has_permission = value\r\n      end\r\n   end\r\n\r\n   -- setup the sandbox   \r\n   local sandbox = saci.sandbox.new(self.saci.permission_groups)\r\n   sandbox:add_values{\r\n      allow = function (user, action) set(user, action, true) end,\r\n      deny  = function (user, action) set(user, action, false) end,\r\n   }\r\n   sandbox:do_lua(self.permissions)\r\n   return has_permission\r\nend",
    "type": "function"
  }, {
    "id": 98,
    "text": "if not self.permissions then return true end",
    "type": "statement:if"
  }, {
    "id": 99,
    "text": "local function in_table(tab, item)\r\n      for i,v in ipairs(tab) do\r\n         if v==item then return true end\r\n      end\r\n      return false\r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 100,
    "text": "for i,v in ipairs(tab) do\r\n         if v==item then return true end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 101,
    "text": "if v==item then return true end",
    "type": "statement:if"
  }, {
    "id": 102,
    "text": "local function member(item, group)\r\n      if     type(group) == \"function\" then return group(item)\r\n      elseif type(group) == \"table\"    then return in_table(group, item)\r\n      elseif type(group) == \"string\"   then return group == item\r\n      else   error(\"expected a string, a table or a function\")\r\n      end\r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 103,
    "text": "if     type(group) == \"function\" then return group(item)\r\n      elseif type(group) == \"table\"    then return in_table(group, item)\r\n      elseif type(group) == \"string\"   then return group == item\r\n      else   error(\"expected a string, a table or a function\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 104,
    "text": "error(\"expected a string, a table or a function\")",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "local has_permission = true",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "local function set(user_group, action_group, value)\r\n      if member(user, user_group) and member(action, action_group) then\r\n         has_permission = value\r\n      end\r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 107,
    "text": "if member(user, user_group) and member(action, action_group) then\r\n         has_permission = value\r\n      end",
    "type": "statement:if"
  }, {
    "id": 108,
    "text": "has_permission = value",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "local sandbox = saci.sandbox.new(self.saci.permission_groups)",
    "type": "statement:localassign"
  }, {
    "id": 110,
    "text": "sandbox:add_values{\r\n      allow = function (user, action) set(user, action, true) end,\r\n      deny  = function (user, action) set(user, action, false) end,\r\n   }",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "set(user, action, true)",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "set(user, action, false)",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "sandbox:do_lua(self.permissions)",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 115,
    "text": "local function in_table(tab, item)\r\n      for i,v in ipairs(tab) do\r\n         if v==item then return true end\r\n      end\r\n      return false\r\n   end",
    "type": "function"
  }, {
    "id": 116,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 117,
    "text": "local function member(item, group)\r\n      if     type(group) == \"function\" then return group(item)\r\n      elseif type(group) == \"table\"    then return in_table(group, item)\r\n      elseif type(group) == \"string\"   then return group == item\r\n      else   error(\"expected a string, a table or a function\")\r\n      end\r\n   end",
    "type": "function"
  }, {
    "id": 118,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 119,
    "text": "local function set(user_group, action_group, value)\r\n      if member(user, user_group) and member(action, action_group) then\r\n         has_permission = value\r\n      end\r\n   end",
    "type": "function"
  }, {
    "id": 120,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 121,
    "text": "function Node:get_child(id)\r\n   if not self.child_defaults then return end\r\n   if self.repository:node_exists(self.id..\"/\"..id) then\r\n      return nil\r\n   end\r\n   if self.child_defaults[id] then\r\n      return self.repository:make_node(\r\n                cosmo.fill(self.child_defaults[id], self),\r\n                self.id..\"/\"..id)\r\n   elseif self.child_defaults.any then\r\n      return self.repository:make_node(self.child_defaults.any, self.id..\"/\"..id)\r\n   elseif self.child_defaults.patterns then\r\n      for i, pattern in ipairs(self.child_defaults.patterns) do\r\n         if id:match(pattern[1]) then\r\n            return self.repository:make_node(pattern[2], self.id..\"/\"..id)\r\n         end\r\n      end\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 122,
    "text": "if not self.child_defaults then return end",
    "type": "statement:if"
  }, {
    "id": 123,
    "text": "if self.repository:node_exists(self.id..\"/\"..id) then\r\n      return nil\r\n   end",
    "type": "statement:if"
  }, {
    "id": 124,
    "text": "if self.child_defaults[id] then\r\n      return self.repository:make_node(\r\n                cosmo.fill(self.child_defaults[id], self),\r\n                self.id..\"/\"..id)\r\n   elseif self.child_defaults.any then\r\n      return self.repository:make_node(self.child_defaults.any, self.id..\"/\"..id)\r\n   elseif self.child_defaults.patterns then\r\n      for i, pattern in ipairs(self.child_defaults.patterns) do\r\n         if id:match(pattern[1]) then\r\n            return self.repository:make_node(pattern[2], self.id..\"/\"..id)\r\n         end\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 125,
    "text": "for i, pattern in ipairs(self.child_defaults.patterns) do\r\n         if id:match(pattern[1]) then\r\n            return self.repository:make_node(pattern[2], self.id..\"/\"..id)\r\n         end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 126,
    "text": "if id:match(pattern[1]) then\r\n            return self.repository:make_node(pattern[2], self.id..\"/\"..id)\r\n         end",
    "type": "statement:if"
  }, {
    "id": 127,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 128,
    "text": "local function make_immediate_child_filter(parent_id)\r\n   local length = parent_id:len()\r\n   return function(id)\r\n      return not id:sub(length+2):find(\"/\")\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 129,
    "text": "local length = parent_id:len()",
    "type": "statement:localassign"
  }, {
    "id": 130,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 131,
    "text": "function Node:get_children(immediate, limit, visible)\r\n   local id_filter = make_immediate_child_filter(self.id)\r\n   return self.repository:get_nodes_by_prefix(self.id..\"/\", limit, id_filter)\r\nend",
    "type": "function"
  }, {
    "id": 132,
    "text": "local id_filter = make_immediate_child_filter(self.id)",
    "type": "statement:localassign"
  }, {
    "id": 133,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 134,
    "text": "function Node:get_visible_children(immediate, limit, visible)\r\n   local id_filter = make_immediate_child_filter(self.id)\r\n   return self.repository:get_nodes_by_prefix(self.id..\"/\", limit, true, id_filter)\r\nend",
    "type": "function"
  }, {
    "id": 135,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 136,
    "text": "function Node:get_parent_id()\r\n   local parent_id, rest = string.match(self.id, \"^(.+)/(.-)$\")\r\n   return parent_id, rest\r\nend",
    "type": "function"
  }, {
    "id": 137,
    "text": "local parent_id, rest = string.match(self.id, \"^(.+)/(.-)$\")",
    "type": "statement:localassign"
  }, {
    "id": 138,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 139,
    "text": "function Node:multimatch(fields, patterns, match_case)\r\n   local value\r\n   for _, field in ipairs(fields) do\r\n      value = self[field]\r\n      if value and type(value)==\"string\" then\r\n         --value = \" \"..value:lower()..\" \"\r\n         if not match_case then\r\n            value = value:lower()\r\n         end\r\n         for __, pattern in ipairs(patterns) do\r\n            if value:match(pattern) then return true end\r\n         end\r\n      end\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 140,
    "text": "local value",
    "type": "statement:localassign"
  }, {
    "id": 141,
    "text": "for _, field in ipairs(fields) do\r\n      value = self[field]\r\n      if value and type(value)==\"string\" then\r\n         --value = \" \"..value:lower()..\" \"\r\n         if not match_case then\r\n            value = value:lower()\r\n         end\r\n         for __, pattern in ipairs(patterns) do\r\n            if value:match(pattern) then return true end\r\n         end\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 142,
    "text": "value = self[field]",
    "type": "statement:assign"
  }, {
    "id": 143,
    "text": "if value and type(value)==\"string\" then\r\n         --value = \" \"..value:lower()..\" \"\r\n         if not match_case then\r\n            value = value:lower()\r\n         end\r\n         for __, pattern in ipairs(patterns) do\r\n            if value:match(pattern) then return true end\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 144,
    "text": "if not match_case then\r\n            value = value:lower()\r\n         end",
    "type": "statement:if"
  }, {
    "id": 145,
    "text": "value = value:lower()",
    "type": "statement:assign"
  }, {
    "id": 146,
    "text": "for __, pattern in ipairs(patterns) do\r\n            if value:match(pattern) then return true end\r\n         end",
    "type": "statement:genericfor"
  }, {
    "id": 147,
    "text": "if value:match(pattern) then return true end",
    "type": "statement:if"
  }, {
    "id": 148,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 149,
    "text": "function(t,key)\r\n                return t.active_values[key] or t.inherited_values[key]\r\n                       or t.raw_values[key] or Node[key]\r\n   end",
    "type": "function"
  }, {
    "id": 150,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 151,
    "text": "function(a,b) return (self.fields[a][1] or 0) < (self.fields[b][1] or 0) end",
    "type": "function"
  }, {
    "id": 152,
    "text": "function (user, action) set(user, action, true) end",
    "type": "function"
  }, {
    "id": 153,
    "text": "function (user, action) set(user, action, false) end",
    "type": "function"
  }, {
    "id": 154,
    "text": "function(id)\r\n      return not id:sub(length+2):find(\"/\")\r\n   end",
    "type": "function"
  }, {
    "id": 155,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 156,
    "text": "",
    "type": "function container"
  }, {
    "id": 157,
    "text": "function new(initial_values)\r\n   local sandbox = setmetatable({}, Sandbox_mt)\r\n\r\n   -- Create a table that allows us to define private functions\r\n   -- while still pulling values from the initial_values table\r\n   local private = setmetatable({}, {__index = initial_values})\r\n   -- Now link the tables together to create the values table\r\n   sandbox.values = setmetatable({}, {__index = private})\r\n\r\n   -- Define a function that allow us to reset the protected environment\r\n   -- from within a sandbox\r\n   do\r\n      local tbl = sandbox.values\r\n      local pairs = pairs\r\n      function private.reset()\r\n         for k,v in pairs(tbl) do\r\n            tbl[k] = nil\r\n         end\r\n      end\r\n   end\r\n\r\n   sandbox.returned_value = nil\r\n   return sandbox\r\nend",
    "type": "function"
  }, {
    "id": 158,
    "text": "diff",
    "type": "global function"
  }, {
    "id": 159,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 160,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 161,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 162,
    "text": "error",
    "type": "global function"
  }, {
    "id": 163,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 164,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 165,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 166,
    "text": "group",
    "type": "global function"
  }, {
    "id": 167,
    "text": "activator_fn",
    "type": "global function"
  }, {
    "id": 168,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 169,
    "text": "module",
    "type": "global function"
  }, {
    "id": 170,
    "text": "fill",
    "type": "global function"
  }, {
    "id": 171,
    "text": "type",
    "type": "global function"
  }, {
    "id": 172,
    "text": "require",
    "type": "global function"
  }, {
    "id": 173,
    "text": "match",
    "type": "global function"
  }, {
    "id": 174,
    "text": "inheritance_fn",
    "type": "global function"
  }, {
    "id": 175,
    "text": "",
    "type": "variable container"
  }, {
    "id": 176,
    "text": "",
    "type": "require container"
  }, {
    "id": 177,
    "text": "",
    "type": "local variable"
  }, {
    "id": 178,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 179,
    "text": "",
    "type": "local variable"
  }, {
    "id": 180,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 181,
    "text": "",
    "type": "local variable"
  }, {
    "id": 182,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 183,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 184,
    "text": "",
    "type": "function"
  }, {
    "id": 185,
    "text": "",
    "type": "local variable"
  }, {
    "id": 186,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 187,
    "text": "",
    "type": "global variable"
  }, {
    "id": 188,
    "text": "",
    "type": "n/a"
  }, {
    "id": 189,
    "text": "",
    "type": "global variable"
  }, {
    "id": 190,
    "text": "",
    "type": "n/a"
  }, {
    "id": 191,
    "text": "",
    "type": "global variable"
  }, {
    "id": 192,
    "text": "",
    "type": "n/a"
  }, {
    "id": 193,
    "text": "",
    "type": "global variable"
  }, {
    "id": 194,
    "text": "sandbox)",
    "type": "module"
  }, {
    "id": 195,
    "text": "(diff)",
    "type": "module"
  }, {
    "id": 196,
    "text": "",
    "type": "require container"
  }, {
    "id": 197,
    "text": "node)",
    "type": "module"
  } ]
}