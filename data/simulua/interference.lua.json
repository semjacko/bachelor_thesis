{
  "_filename": "interference.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/simulua/examples/interference.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 6,
    "label": "has",
    "to": 12
  }, {
    "from": 6,
    "label": "has",
    "to": 13
  }, {
    "from": 6,
    "label": "has",
    "to": 14
  }, {
    "from": 3,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 5
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 18,
    "label": "has",
    "to": 24
  }, {
    "from": 18,
    "label": "has",
    "to": 12
  }, {
    "from": 16,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 6,
    "label": "has",
    "to": 12
  }, {
    "from": 6,
    "label": "has",
    "to": 13
  }, {
    "from": 6,
    "label": "has",
    "to": 14
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 18,
    "label": "has",
    "to": 24
  }, {
    "from": 18,
    "label": "has",
    "to": 12
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 30,
    "label": "has",
    "to": 35
  }, {
    "from": 30,
    "label": "has",
    "to": 36
  }, {
    "from": 30,
    "label": "has",
    "to": 37
  }, {
    "from": 3,
    "label": "calls",
    "to": 40
  }, {
    "from": 3,
    "label": "calls",
    "to": 40
  }, {
    "from": 38,
    "label": "calls",
    "to": 49
  }, {
    "from": 3,
    "label": "calls",
    "to": 39
  }, {
    "from": 16,
    "label": "calls",
    "to": 39
  }, {
    "from": 38,
    "label": "calls",
    "to": 46
  }, {
    "from": 38,
    "label": "calls",
    "to": 46
  }, {
    "from": 3,
    "label": "calls",
    "to": 41
  }, {
    "from": 16,
    "label": "calls",
    "to": 41
  }, {
    "from": 38,
    "label": "calls",
    "to": 41
  }, {
    "from": 38,
    "label": "calls",
    "to": 47
  }, {
    "from": 38,
    "label": "calls",
    "to": 45
  }, {
    "from": 38,
    "label": "calls",
    "to": 44
  }, {
    "from": 38,
    "label": "calls",
    "to": 3
  }, {
    "from": 3,
    "label": "calls",
    "to": 43
  }, {
    "from": 16,
    "label": "calls",
    "to": 43
  }, {
    "from": 38,
    "label": "calls",
    "to": 43
  }, {
    "from": 38,
    "label": "calls",
    "to": 43
  }, {
    "from": 38,
    "label": "calls",
    "to": 48
  }, {
    "from": 38,
    "label": "calls",
    "to": 48
  }, {
    "from": 38,
    "label": "calls",
    "to": 48
  }, {
    "from": 3,
    "label": "calls",
    "to": 42
  }, {
    "from": 16,
    "label": "calls",
    "to": 42
  }, {
    "from": 38,
    "label": "calls",
    "to": 16
  }, {
    "from": 1,
    "label": "contains",
    "to": 38
  }, {
    "from": 38,
    "label": "declares",
    "to": 3
  }, {
    "from": 38,
    "label": "declares",
    "to": 16
  }, {
    "from": 38,
    "label": "declares",
    "to": 26
  }, {
    "from": 38,
    "label": "declares",
    "to": 28
  }, {
    "from": 38,
    "label": "declares",
    "to": 30
  }, {
    "from": 1,
    "label": "contains",
    "to": 52
  }, {
    "from": 1,
    "label": "contains",
    "to": 53
  }, {
    "from": 52,
    "label": "initializes",
    "to": 54
  }, {
    "from": 54,
    "label": "assigns",
    "to": 55
  }, {
    "from": 52,
    "label": "initializes",
    "to": 56
  }, {
    "from": 56,
    "label": "assigns",
    "to": 57
  }, {
    "from": 52,
    "label": "initializes",
    "to": 58
  }, {
    "from": 58,
    "label": "assigns",
    "to": 59
  }, {
    "from": 52,
    "label": "initializes",
    "to": 60
  }, {
    "from": 60,
    "label": "assigns",
    "to": 61
  }, {
    "from": 52,
    "label": "initializes",
    "to": 62
  }, {
    "from": 62,
    "label": "assigns",
    "to": 63
  }, {
    "from": 52,
    "label": "initializes",
    "to": 64
  }, {
    "from": 64,
    "label": "assigns",
    "to": 65
  }, {
    "from": 52,
    "label": "initializes",
    "to": 66
  }, {
    "from": 66,
    "label": "assigns",
    "to": 67
  }, {
    "from": 52,
    "label": "initializes",
    "to": 68
  }, {
    "from": 68,
    "label": "assigns",
    "to": 69
  }, {
    "from": 52,
    "label": "initializes",
    "to": 70
  }, {
    "from": 70,
    "label": "assigns",
    "to": 71
  }, {
    "from": 52,
    "label": "initializes",
    "to": 72
  }, {
    "from": 72,
    "label": "assigns",
    "to": 73
  }, {
    "from": 53,
    "label": "initializes",
    "to": 74
  }, {
    "from": 74,
    "label": "requires",
    "to": 2
  }, {
    "from": 53,
    "label": "initializes",
    "to": 75
  }, {
    "from": 75,
    "label": "requires",
    "to": 51
  }, {
    "from": 53,
    "label": "initializes",
    "to": 76
  }, {
    "from": 76,
    "label": "requires",
    "to": 50
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "interference",
    "type": "module"
  }, {
    "id": 2,
    "text": "simulua",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function machine ()\r\n  local self, lastbreak = {}\r\n  return simulua.process(function()\r\n    while true do\r\n      simulua.hold(u:exp(brk))\r\n      broken:into(self) -- insert\r\n      lastbreak = simulua.time()\r\n      if not available:isempty() then\r\n        simulua.activate(available:front())\r\n      end\r\n      simulua.passivate()\r\n      breaks = breaks + 1\r\n      downtime = downtime + simulua.time() - lastbreak\r\n    end\r\n  end, self)\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local self, lastbreak = {}",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "while true do\r\n      simulua.hold(u:exp(brk))\r\n      broken:into(self) -- insert\r\n      lastbreak = simulua.time()\r\n      if not available:isempty() then\r\n        simulua.activate(available:front())\r\n      end\r\n      simulua.passivate()\r\n      breaks = breaks + 1\r\n      downtime = downtime + simulua.time() - lastbreak\r\n    end",
    "type": "statement:while"
  }, {
    "id": 7,
    "text": "simulua.hold(u:exp(brk))",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "broken:into(self)",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "lastbreak = simulua.time()",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "if not available:isempty() then\r\n        simulua.activate(available:front())\r\n      end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "simulua.activate(available:front())",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "simulua.passivate()",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "breaks = breaks + 1",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "downtime = downtime + simulua.time() - lastbreak",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "local function repairman ()\r\n  local self = {}\r\n  return simulua.process(function()\r\n    while true do\r\n      available:retrieve() -- self out\r\n      while not broken:isempty() do\r\n        local mach = broken:retrieve()\r\n        simulua.hold(u:exp(rep))\r\n        simulua.activate(mach)\r\n      end\r\n      available:into(self) -- insert\r\n      simulua.passivate()\r\n    end\r\n  end, self)\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "local self = {}",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "while true do\r\n      available:retrieve() -- self out\r\n      while not broken:isempty() do\r\n        local mach = broken:retrieve()\r\n        simulua.hold(u:exp(rep))\r\n        simulua.activate(mach)\r\n      end\r\n      available:into(self) -- insert\r\n      simulua.passivate()\r\n    end",
    "type": "statement:while"
  }, {
    "id": 19,
    "text": "available:retrieve()",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "while not broken:isempty() do\r\n        local mach = broken:retrieve()\r\n        simulua.hold(u:exp(rep))\r\n        simulua.activate(mach)\r\n      end",
    "type": "statement:while"
  }, {
    "id": 21,
    "text": "local mach = broken:retrieve()",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "simulua.hold(u:exp(rep))",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "simulua.activate(mach)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "available:into(self)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function()\r\n    while true do\r\n      simulua.hold(u:exp(brk))\r\n      broken:into(self) -- insert\r\n      lastbreak = simulua.time()\r\n      if not available:isempty() then\r\n        simulua.activate(available:front())\r\n      end\r\n      simulua.passivate()\r\n      breaks = breaks + 1\r\n      downtime = downtime + simulua.time() - lastbreak\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function()\r\n    while true do\r\n      available:retrieve() -- self out\r\n      while not broken:isempty() do\r\n        local mach = broken:retrieve()\r\n        simulua.hold(u:exp(rep))\r\n        simulua.activate(mach)\r\n      end\r\n      available:into(self) -- insert\r\n      simulua.passivate()\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function()\r\n  for i = 1, m do\r\n    simulua.activate(machine())\r\n  end\r\n  for i = 1, r do\r\n    simulua.activate(repairman())\r\n  end\r\n  simulua.hold(simtime)\r\n  print(string.format(\"Average inoperative period: %.2f\",\r\n    downtime / breaks))\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "for i = 1, m do\r\n    simulua.activate(machine())\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 32,
    "text": "simulua.activate(machine())",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "for i = 1, r do\r\n    simulua.activate(repairman())\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 34,
    "text": "simulua.activate(repairman())",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "simulua.hold(simtime)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "print(string.format(\"Average inoperative period: %.2f\",\r\n    downtime / breaks))",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "",
    "type": "function container"
  }, {
    "id": 39,
    "text": "function process (task, att)\r\n  local p = setmetatable(att or {}, procmt)\r\n  thread[p] = create(task)\r\n  return p\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "function time (proc)\r\n  if proc == nil then return _time end\r\n  return events:get(checkprocess(proc))\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "function hold (delay) yield(\"hold\", delay) end",
    "type": "function"
  }, {
    "id": 42,
    "text": "function passivate () yield(\"cancel\", _current) end",
    "type": "function"
  }, {
    "id": 43,
    "text": "function activate (proc, d, after)\r\n  yield(\"activate\", proc, d, after)\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "function start (task)\r\n  events, isidle, main = heap(), {}, process(task)\r\n  events:insert(0, main)\r\n  local active, msg = resume(scheduler())\r\n  assert(active, msg)\r\n  if msg ~= nil then error(msg) end\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "format",
    "type": "global function"
  }, {
    "id": 46,
    "text": "queue",
    "type": "global function"
  }, {
    "id": 47,
    "text": "print",
    "type": "global function"
  }, {
    "id": 48,
    "text": "require",
    "type": "global function"
  }, {
    "id": 49,
    "text": "rng",
    "type": "global function"
  }, {
    "id": 50,
    "text": "queue",
    "type": "module"
  }, {
    "id": 51,
    "text": "rng",
    "type": "module"
  }, {
    "id": 52,
    "text": "",
    "type": "variable container"
  }, {
    "id": 53,
    "text": "",
    "type": "require container"
  }, {
    "id": 54,
    "text": "",
    "type": "local variable"
  }, {
    "id": 55,
    "text": "",
    "type": "n/a"
  }, {
    "id": 56,
    "text": "",
    "type": "local variable"
  }, {
    "id": 57,
    "text": "",
    "type": "number"
  }, {
    "id": 58,
    "text": "",
    "type": "local variable"
  }, {
    "id": 59,
    "text": "",
    "type": "number"
  }, {
    "id": 60,
    "text": "",
    "type": "local variable"
  }, {
    "id": 61,
    "text": "",
    "type": "n/a"
  }, {
    "id": 62,
    "text": "",
    "type": "local variable"
  }, {
    "id": 63,
    "text": "",
    "type": "n/a"
  }, {
    "id": 64,
    "text": "",
    "type": "local variable"
  }, {
    "id": 65,
    "text": "",
    "type": "number"
  }, {
    "id": 66,
    "text": "",
    "type": "local variable"
  }, {
    "id": 67,
    "text": "",
    "type": "number"
  }, {
    "id": 68,
    "text": "",
    "type": "local variable"
  }, {
    "id": 69,
    "text": "",
    "type": "number"
  }, {
    "id": 70,
    "text": "",
    "type": "local variable"
  }, {
    "id": 71,
    "text": "",
    "type": "number"
  }, {
    "id": 72,
    "text": "",
    "type": "local variable"
  }, {
    "id": 73,
    "text": "",
    "type": "number"
  }, {
    "id": 74,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 75,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 76,
    "text": "",
    "type": "require local variable"
  } ]
}