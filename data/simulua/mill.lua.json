{
  "_filename": "mill.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/simulua/examples/mill.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 4,
    "label": "has",
    "to": 9
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 12,
    "label": "has",
    "to": 17
  }, {
    "from": 12,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 12,
    "label": "has",
    "to": 20
  }, {
    "from": 12,
    "label": "has",
    "to": 21
  }, {
    "from": 12,
    "label": "has",
    "to": 22
  }, {
    "from": 11,
    "label": "has",
    "to": 9
  }, {
    "from": 11,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 24,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "calls",
    "to": 32
  }, {
    "from": 30,
    "label": "calls",
    "to": 32
  }, {
    "from": 30,
    "label": "calls",
    "to": 32
  }, {
    "from": 30,
    "label": "calls",
    "to": 32
  }, {
    "from": 30,
    "label": "calls",
    "to": 32
  }, {
    "from": 30,
    "label": "calls",
    "to": 38
  }, {
    "from": 30,
    "label": "calls",
    "to": 31
  }, {
    "from": 30,
    "label": "calls",
    "to": 31
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 37
  }, {
    "from": 30,
    "label": "calls",
    "to": 35
  }, {
    "from": 30,
    "label": "calls",
    "to": 35
  }, {
    "from": 30,
    "label": "calls",
    "to": 36
  }, {
    "from": 30,
    "label": "calls",
    "to": 36
  }, {
    "from": 30,
    "label": "calls",
    "to": 34
  }, {
    "from": 30,
    "label": "calls",
    "to": 40
  }, {
    "from": 30,
    "label": "calls",
    "to": 39
  }, {
    "from": 30,
    "label": "calls",
    "to": 39
  }, {
    "from": 30,
    "label": "calls",
    "to": 39
  }, {
    "from": 30,
    "label": "calls",
    "to": 39
  }, {
    "from": 30,
    "label": "calls",
    "to": 39
  }, {
    "from": 1,
    "label": "contains",
    "to": 30
  }, {
    "from": 30,
    "label": "declares",
    "to": 3
  }, {
    "from": 30,
    "label": "declares",
    "to": 11
  }, {
    "from": 30,
    "label": "declares",
    "to": 24
  }, {
    "from": 1,
    "label": "contains",
    "to": 41
  }, {
    "from": 1,
    "label": "contains",
    "to": 42
  }, {
    "from": 41,
    "label": "initializes",
    "to": 43
  }, {
    "from": 43,
    "label": "assigns",
    "to": 44
  }, {
    "from": 41,
    "label": "initializes",
    "to": 45
  }, {
    "from": 45,
    "label": "assigns",
    "to": 46
  }, {
    "from": 46,
    "label": "assigns",
    "to": 47
  }, {
    "from": 47,
    "label": "assigns",
    "to": 48
  }, {
    "from": 41,
    "label": "initializes",
    "to": 49
  }, {
    "from": 49,
    "label": "assigns",
    "to": 50
  }, {
    "from": 41,
    "label": "initializes",
    "to": 51
  }, {
    "from": 51,
    "label": "assigns",
    "to": 52
  }, {
    "from": 42,
    "label": "initializes",
    "to": 53
  }, {
    "from": 53,
    "label": "requires",
    "to": 2
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "mill",
    "type": "module"
  }, {
    "id": 2,
    "text": "simulua",
    "type": "module"
  }, {
    "id": 3,
    "text": "function()\r\n  while true do\r\n    print(\"Machine starts\", simulua.time())\r\n    while mill.components > 0 do\r\n      simulua.hold(2) -- machining time for one component\r\n      mill.components = mill.components - 1\r\n    end\r\n    simulua.passivate()\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "while true do\r\n    print(\"Machine starts\", simulua.time())\r\n    while mill.components > 0 do\r\n      simulua.hold(2) -- machining time for one component\r\n      mill.components = mill.components - 1\r\n    end\r\n    simulua.passivate()\r\n  end",
    "type": "statement:while"
  }, {
    "id": 5,
    "text": "print(\"Machine starts\", simulua.time())",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "while mill.components > 0 do\r\n      simulua.hold(2) -- machining time for one component\r\n      mill.components = mill.components - 1\r\n    end",
    "type": "statement:while"
  }, {
    "id": 7,
    "text": "simulua.hold(2)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "mill.components = mill.components - 1",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "simulua.passivate()",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function()\r\n  while simulua.time() < 400 do\r\n    print(\"Loading starts\", simulua.time())\r\n    count = count + 1 -- keep a tally\r\n    simulua.hold(5)\r\n    mill.components = mill.components + 50 -- load up\r\n    simulua.activate(mill) -- restart machine\r\n    while mill.components > 0 do simulua.hold(0.5) end -- check regularly\r\n    simulua.cancel(mill) -- switch off\r\n    simulua.hold(10) -- unloading takes longer\r\n    print(\"Unloading finishes\", simulua.time())\r\n  end\r\n  simulua.passivate()\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "while simulua.time() < 400 do\r\n    print(\"Loading starts\", simulua.time())\r\n    count = count + 1 -- keep a tally\r\n    simulua.hold(5)\r\n    mill.components = mill.components + 50 -- load up\r\n    simulua.activate(mill) -- restart machine\r\n    while mill.components > 0 do simulua.hold(0.5) end -- check regularly\r\n    simulua.cancel(mill) -- switch off\r\n    simulua.hold(10) -- unloading takes longer\r\n    print(\"Unloading finishes\", simulua.time())\r\n  end",
    "type": "statement:while"
  }, {
    "id": 13,
    "text": "print(\"Loading starts\", simulua.time())",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "count = count + 1",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "simulua.hold(5)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "mill.components = mill.components + 50",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "simulua.activate(mill)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "while mill.components > 0 do simulua.hold(0.5) end",
    "type": "statement:while"
  }, {
    "id": 19,
    "text": "simulua.hold(0.5)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "simulua.cancel(mill)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "simulua.hold(10)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "print(\"Unloading finishes\", simulua.time())",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function() -- main\r\n  simulua.activate(worker)\r\n  print(string.format(\"count = %d\", count))\r\n  simulua.hold(800)\r\n  print(\"Simulation ends\", simulua.time())\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "simulua.activate(worker)",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "print(string.format(\"count = %d\", count))",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "simulua.hold(800)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "print(\"Simulation ends\", simulua.time())",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "",
    "type": "function container"
  }, {
    "id": 31,
    "text": "function process (task, att)\r\n  local p = setmetatable(att or {}, procmt)\r\n  thread[p] = create(task)\r\n  return p\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "function time (proc)\r\n  if proc == nil then return _time end\r\n  return events:get(checkprocess(proc))\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "function hold (delay) yield(\"hold\", delay) end",
    "type": "function"
  }, {
    "id": 34,
    "text": "function cancel (proc) yield(\"cancel\", proc) end",
    "type": "function"
  }, {
    "id": 35,
    "text": "function passivate () yield(\"cancel\", _current) end",
    "type": "function"
  }, {
    "id": 36,
    "text": "function activate (proc, d, after)\r\n  yield(\"activate\", proc, d, after)\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "function start (task)\r\n  events, isidle, main = heap(), {}, process(task)\r\n  events:insert(0, main)\r\n  local active, msg = resume(scheduler())\r\n  assert(active, msg)\r\n  if msg ~= nil then error(msg) end\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "format",
    "type": "global function"
  }, {
    "id": 39,
    "text": "print",
    "type": "global function"
  }, {
    "id": 40,
    "text": "require",
    "type": "global function"
  }, {
    "id": 41,
    "text": "",
    "type": "variable container"
  }, {
    "id": 42,
    "text": "",
    "type": "require container"
  }, {
    "id": 43,
    "text": "",
    "type": "local variable"
  }, {
    "id": 44,
    "text": "",
    "type": "number"
  }, {
    "id": 45,
    "text": "",
    "type": "local variable"
  }, {
    "id": 46,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 47,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 48,
    "text": "",
    "type": "number"
  }, {
    "id": 49,
    "text": "",
    "type": "local variable"
  }, {
    "id": 50,
    "text": "",
    "type": "n/a"
  }, {
    "id": 51,
    "text": "",
    "type": "global variable"
  }, {
    "id": 52,
    "text": "",
    "type": "n/a"
  }, {
    "id": 53,
    "text": "",
    "type": "require local variable"
  } ]
}