{
  "_filename": "market.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/simulua/examples/market.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 6,
    "label": "has",
    "to": 13
  }, {
    "from": 6,
    "label": "has",
    "to": 14
  }, {
    "from": 6,
    "label": "has",
    "to": 15
  }, {
    "from": 6,
    "label": "has",
    "to": 16
  }, {
    "from": 6,
    "label": "has",
    "to": 17
  }, {
    "from": 3,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 22,
    "label": "has",
    "to": 27
  }, {
    "from": 20,
    "label": "has",
    "to": 28
  }, {
    "from": 20,
    "label": "has",
    "to": 29
  }, {
    "from": 20,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 9
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 12
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 13
  }, {
    "from": 30,
    "label": "has",
    "to": 14
  }, {
    "from": 20,
    "label": "has",
    "to": 33
  }, {
    "from": 20,
    "label": "has",
    "to": 34
  }, {
    "from": 20,
    "label": "has",
    "to": 35
  }, {
    "from": 19,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 6,
    "label": "has",
    "to": 13
  }, {
    "from": 6,
    "label": "has",
    "to": 14
  }, {
    "from": 6,
    "label": "has",
    "to": 15
  }, {
    "from": 6,
    "label": "has",
    "to": 16
  }, {
    "from": 6,
    "label": "has",
    "to": 17
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 35
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 39,
    "label": "has",
    "to": 43
  }, {
    "from": 39,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "calls",
    "to": 61
  }, {
    "from": 45,
    "label": "calls",
    "to": 46
  }, {
    "from": 3,
    "label": "calls",
    "to": 46
  }, {
    "from": 45,
    "label": "calls",
    "to": 53
  }, {
    "from": 45,
    "label": "calls",
    "to": 53
  }, {
    "from": 45,
    "label": "calls",
    "to": 48
  }, {
    "from": 3,
    "label": "calls",
    "to": 48
  }, {
    "from": 45,
    "label": "calls",
    "to": 48
  }, {
    "from": 45,
    "label": "calls",
    "to": 48
  }, {
    "from": 45,
    "label": "calls",
    "to": 51
  }, {
    "from": 45,
    "label": "calls",
    "to": 49
  }, {
    "from": 45,
    "label": "calls",
    "to": 49
  }, {
    "from": 45,
    "label": "calls",
    "to": 49
  }, {
    "from": 45,
    "label": "calls",
    "to": 54
  }, {
    "from": 45,
    "label": "calls",
    "to": 54
  }, {
    "from": 45,
    "label": "calls",
    "to": 54
  }, {
    "from": 3,
    "label": "calls",
    "to": 54
  }, {
    "from": 45,
    "label": "calls",
    "to": 47
  }, {
    "from": 45,
    "label": "calls",
    "to": 47
  }, {
    "from": 3,
    "label": "calls",
    "to": 47
  }, {
    "from": 45,
    "label": "calls",
    "to": 56
  }, {
    "from": 45,
    "label": "calls",
    "to": 58
  }, {
    "from": 3,
    "label": "calls",
    "to": 50
  }, {
    "from": 3,
    "label": "calls",
    "to": 59
  }, {
    "from": 45,
    "label": "calls",
    "to": 3
  }, {
    "from": 45,
    "label": "calls",
    "to": 55
  }, {
    "from": 3,
    "label": "calls",
    "to": 55
  }, {
    "from": 45,
    "label": "calls",
    "to": 52
  }, {
    "from": 45,
    "label": "calls",
    "to": 52
  }, {
    "from": 45,
    "label": "calls",
    "to": 52
  }, {
    "from": 45,
    "label": "calls",
    "to": 57
  }, {
    "from": 45,
    "label": "calls",
    "to": 60
  }, {
    "from": 45,
    "label": "calls",
    "to": 60
  }, {
    "from": 45,
    "label": "calls",
    "to": 60
  }, {
    "from": 45,
    "label": "calls",
    "to": 60
  }, {
    "from": 45,
    "label": "calls",
    "to": 63
  }, {
    "from": 45,
    "label": "calls",
    "to": 63
  }, {
    "from": 45,
    "label": "calls",
    "to": 63
  }, {
    "from": 45,
    "label": "calls",
    "to": 63
  }, {
    "from": 45,
    "label": "calls",
    "to": 63
  }, {
    "from": 45,
    "label": "calls",
    "to": 63
  }, {
    "from": 45,
    "label": "calls",
    "to": 62
  }, {
    "from": 1,
    "label": "contains",
    "to": 45
  }, {
    "from": 45,
    "label": "declares",
    "to": 3
  }, {
    "from": 45,
    "label": "declares",
    "to": 19
  }, {
    "from": 45,
    "label": "declares",
    "to": 37
  }, {
    "from": 45,
    "label": "declares",
    "to": 39
  }, {
    "from": 1,
    "label": "contains",
    "to": 66
  }, {
    "from": 1,
    "label": "contains",
    "to": 67
  }, {
    "from": 66,
    "label": "initializes",
    "to": 68
  }, {
    "from": 68,
    "label": "assigns",
    "to": 69
  }, {
    "from": 66,
    "label": "initializes",
    "to": 70
  }, {
    "from": 70,
    "label": "assigns",
    "to": 71
  }, {
    "from": 66,
    "label": "initializes",
    "to": 72
  }, {
    "from": 72,
    "label": "assigns",
    "to": 73
  }, {
    "from": 66,
    "label": "initializes",
    "to": 74
  }, {
    "from": 74,
    "label": "assigns",
    "to": 75
  }, {
    "from": 66,
    "label": "initializes",
    "to": 76
  }, {
    "from": 76,
    "label": "assigns",
    "to": 77
  }, {
    "from": 66,
    "label": "initializes",
    "to": 78
  }, {
    "from": 78,
    "label": "assigns",
    "to": 79
  }, {
    "from": 66,
    "label": "initializes",
    "to": 80
  }, {
    "from": 80,
    "label": "assigns",
    "to": 81
  }, {
    "from": 66,
    "label": "initializes",
    "to": 82
  }, {
    "from": 82,
    "label": "assigns",
    "to": 83
  }, {
    "from": 66,
    "label": "initializes",
    "to": 84
  }, {
    "from": 84,
    "label": "assigns",
    "to": 85
  }, {
    "from": 66,
    "label": "initializes",
    "to": 86
  }, {
    "from": 86,
    "label": "assigns",
    "to": 87
  }, {
    "from": 66,
    "label": "initializes",
    "to": 88
  }, {
    "from": 88,
    "label": "assigns",
    "to": 89
  }, {
    "from": 89,
    "label": "assigns",
    "to": 90
  }, {
    "from": 90,
    "label": "assigns",
    "to": 91
  }, {
    "from": 89,
    "label": "assigns",
    "to": 92
  }, {
    "from": 92,
    "label": "assigns",
    "to": 93
  }, {
    "from": 89,
    "label": "assigns",
    "to": 94
  }, {
    "from": 94,
    "label": "assigns",
    "to": 95
  }, {
    "from": 89,
    "label": "assigns",
    "to": 96
  }, {
    "from": 96,
    "label": "assigns",
    "to": 97
  }, {
    "from": 66,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "assigns",
    "to": 99
  }, {
    "from": 67,
    "label": "initializes",
    "to": 100
  }, {
    "from": 100,
    "label": "requires",
    "to": 2
  }, {
    "from": 67,
    "label": "initializes",
    "to": 101
  }, {
    "from": 101,
    "label": "requires",
    "to": 64
  }, {
    "from": 67,
    "label": "initializes",
    "to": 102
  }, {
    "from": 102,
    "label": "requires",
    "to": 65
  }, {
    "from": 67,
    "label": "initializes",
    "to": 103
  }, {
    "from": 103,
    "label": "requires",
    "to": 104
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "market",
    "type": "module"
  }, {
    "id": 2,
    "text": "simulua",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function customer (name, price, var, threshold, weight)\r\n  local self = {price = price, var = var}\r\n  return simulua.process (function()\r\n    while true do\r\n      simulua.wait(waitingline)\r\n      -- update price\r\n      local m, v = weight * self.price / self.var, weight / self.var\r\n      local t, s\r\n      if transaction[self] then\r\n        t, s = self.price, self.var\r\n      else\r\n        t, s = vendor.price, vendor.var\r\n      end\r\n      m = m + t / s\r\n      v = v + 1 / s\r\n      self.price = max(min(r:norm(m / v, sqrt(1 / v)), threshold), 0)\r\n      history[simulua.time()][name] = self.price\r\n      simulua.hold(0.5) -- any time t, 0 < t < 1\r\n    end\r\n  end, self)\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local self = {price = price, var = var}",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "while true do\r\n      simulua.wait(waitingline)\r\n      -- update price\r\n      local m, v = weight * self.price / self.var, weight / self.var\r\n      local t, s\r\n      if transaction[self] then\r\n        t, s = self.price, self.var\r\n      else\r\n        t, s = vendor.price, vendor.var\r\n      end\r\n      m = m + t / s\r\n      v = v + 1 / s\r\n      self.price = max(min(r:norm(m / v, sqrt(1 / v)), threshold), 0)\r\n      history[simulua.time()][name] = self.price\r\n      simulua.hold(0.5) -- any time t, 0 < t < 1\r\n    end",
    "type": "statement:while"
  }, {
    "id": 7,
    "text": "simulua.wait(waitingline)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "local m, v = weight * self.price / self.var, weight / self.var",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "local t, s",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "if transaction[self] then\r\n        t, s = self.price, self.var\r\n      else\r\n        t, s = vendor.price, vendor.var\r\n      end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "t, s = self.price, self.var",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "t, s = vendor.price, vendor.var",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "m = m + t / s",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "v = v + 1 / s",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "self.price = max(min(r:norm(m / v, sqrt(1 / v)), threshold), 0)",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "history[simulua.time()][name] = self.price",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "simulua.hold(0.5)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function()\r\n  while true do\r\n    history[simulua.time()] = {}\r\n    while not waitingline:isempty() do\r\n      local customer = waitingline:retrieve()\r\n      local u = customer.price - vendor.price\r\n      u = (1 - pnorm(-u / sqrt(customer.var))) * pnorm(u / sqrt(vendor.var))\r\n      transaction[customer] = r:unif() < u -- Bernoulli sample\r\n      simulua.activate(customer)\r\n    end\r\n    -- update price\r\n    local m = vendor.weight * vendor.price / vendor.var\r\n    local v = vendor.weight / vendor.var\r\n    for customer, ok in pairs(transaction) do\r\n      local t, s\r\n      if ok then\r\n        t, s = vendor.price, vendor.var\r\n      else\r\n        t, s = customer.price, customer.var\r\n      end\r\n      m = m + t / s\r\n      v = v + 1 / s\r\n    end\r\n    vendor.price = max(r:norm(m / v, sqrt(1 / v)), vendor.threshold)\r\n    history[simulua.time()][0] = vendor.price\r\n    simulua.hold(1) -- wait for next tick\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "while true do\r\n    history[simulua.time()] = {}\r\n    while not waitingline:isempty() do\r\n      local customer = waitingline:retrieve()\r\n      local u = customer.price - vendor.price\r\n      u = (1 - pnorm(-u / sqrt(customer.var))) * pnorm(u / sqrt(vendor.var))\r\n      transaction[customer] = r:unif() < u -- Bernoulli sample\r\n      simulua.activate(customer)\r\n    end\r\n    -- update price\r\n    local m = vendor.weight * vendor.price / vendor.var\r\n    local v = vendor.weight / vendor.var\r\n    for customer, ok in pairs(transaction) do\r\n      local t, s\r\n      if ok then\r\n        t, s = vendor.price, vendor.var\r\n      else\r\n        t, s = customer.price, customer.var\r\n      end\r\n      m = m + t / s\r\n      v = v + 1 / s\r\n    end\r\n    vendor.price = max(r:norm(m / v, sqrt(1 / v)), vendor.threshold)\r\n    history[simulua.time()][0] = vendor.price\r\n    simulua.hold(1) -- wait for next tick\r\n  end",
    "type": "statement:while"
  }, {
    "id": 21,
    "text": "history[simulua.time()] = {}",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "while not waitingline:isempty() do\r\n      local customer = waitingline:retrieve()\r\n      local u = customer.price - vendor.price\r\n      u = (1 - pnorm(-u / sqrt(customer.var))) * pnorm(u / sqrt(vendor.var))\r\n      transaction[customer] = r:unif() < u -- Bernoulli sample\r\n      simulua.activate(customer)\r\n    end",
    "type": "statement:while"
  }, {
    "id": 23,
    "text": "local customer = waitingline:retrieve()",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "local u = customer.price - vendor.price",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "u = (1 - pnorm(-u / sqrt(customer.var))) * pnorm(u / sqrt(vendor.var))",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "transaction[customer] = r:unif() < u",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "simulua.activate(customer)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "local m = vendor.weight * vendor.price / vendor.var",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "local v = vendor.weight / vendor.var",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "for customer, ok in pairs(transaction) do\r\n      local t, s\r\n      if ok then\r\n        t, s = vendor.price, vendor.var\r\n      else\r\n        t, s = customer.price, customer.var\r\n      end\r\n      m = m + t / s\r\n      v = v + 1 / s\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 31,
    "text": "if ok then\r\n        t, s = vendor.price, vendor.var\r\n      else\r\n        t, s = customer.price, customer.var\r\n      end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "t, s = customer.price, customer.var",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "vendor.price = max(r:norm(m / v, sqrt(1 / v)), vendor.threshold)",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "history[simulua.time()][0] = vendor.price",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "simulua.hold(1)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function()\r\n    while true do\r\n      simulua.wait(waitingline)\r\n      -- update price\r\n      local m, v = weight * self.price / self.var, weight / self.var\r\n      local t, s\r\n      if transaction[self] then\r\n        t, s = self.price, self.var\r\n      else\r\n        t, s = vendor.price, vendor.var\r\n      end\r\n      m = m + t / s\r\n      v = v + 1 / s\r\n      self.price = max(min(r:norm(m / v, sqrt(1 / v)), threshold), 0)\r\n      history[simulua.time()][name] = self.price\r\n      simulua.hold(0.5) -- any time t, 0 < t < 1\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function()\r\n  simulua.hold(1)\r\n  for i = 1, n do\r\n    simulua.activate(customer(i, 1, i, 5, 50))\r\n  end\r\n  simulua.activate(vendor)\r\n  simulua.hold(simperiod)\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "for i = 1, n do\r\n    simulua.activate(customer(i, 1, i, 5, 50))\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 41,
    "text": "simulua.activate(customer(i, 1, i, 5, 50))",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "simulua.activate(vendor)",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "simulua.hold(simperiod)",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "",
    "type": "function container"
  }, {
    "id": 46,
    "text": "function process (task, att)\r\n  local p = setmetatable(att or {}, procmt)\r\n  thread[p] = create(task)\r\n  return p\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "function time (proc)\r\n  if proc == nil then return _time end\r\n  return events:get(checkprocess(proc))\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "function hold (delay) yield(\"hold\", delay) end",
    "type": "function"
  }, {
    "id": 49,
    "text": "function activate (proc, d, after)\r\n  yield(\"activate\", proc, d, after)\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "function wait (res, ...)\r\n  assert(res ~= nil, \"invalid resource\")\r\n  assert(type(res.into) == \"function\",\r\n      \"resource has invalid `into' method\")\r\n  res:into(_current, ...)\r\n  yield(\"cancel\", _current) -- passivate\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "function start (task)\r\n  events, isidle, main = heap(), {}, process(task)\r\n  events:insert(0, main)\r\n  local active, msg = resume(scheduler())\r\n  assert(active, msg)\r\n  if msg ~= nil then error(msg) end\r\nend",
    "type": "function"
  }, {
    "id": 52,
    "text": "format",
    "type": "global function"
  }, {
    "id": 53,
    "text": "pnorm",
    "type": "global function"
  }, {
    "id": 54,
    "text": "sqrt",
    "type": "global function"
  }, {
    "id": 55,
    "text": "max",
    "type": "global function"
  }, {
    "id": 56,
    "text": "time",
    "type": "global function"
  }, {
    "id": 57,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 58,
    "text": "queue",
    "type": "global function"
  }, {
    "id": 59,
    "text": "min",
    "type": "global function"
  }, {
    "id": 60,
    "text": "require",
    "type": "global function"
  }, {
    "id": 61,
    "text": "rng",
    "type": "global function"
  }, {
    "id": 62,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 63,
    "text": "write",
    "type": "global function"
  }, {
    "id": 64,
    "text": "queue",
    "type": "module"
  }, {
    "id": 65,
    "text": "rng",
    "type": "module"
  }, {
    "id": 66,
    "text": "",
    "type": "variable container"
  }, {
    "id": 67,
    "text": "",
    "type": "require container"
  }, {
    "id": 68,
    "text": "",
    "type": "local variable"
  }, {
    "id": 69,
    "text": "",
    "type": "n/a"
  }, {
    "id": 70,
    "text": "",
    "type": "local variable"
  }, {
    "id": 71,
    "text": "",
    "type": "n/a"
  }, {
    "id": 72,
    "text": "",
    "type": "local variable"
  }, {
    "id": 73,
    "text": "",
    "type": "n/a"
  }, {
    "id": 74,
    "text": "",
    "type": "local variable"
  }, {
    "id": 75,
    "text": "",
    "type": "n/a"
  }, {
    "id": 76,
    "text": "",
    "type": "local variable"
  }, {
    "id": 77,
    "text": "",
    "type": "n/a"
  }, {
    "id": 78,
    "text": "",
    "type": "local variable"
  }, {
    "id": 79,
    "text": "",
    "type": "number"
  }, {
    "id": 80,
    "text": "",
    "type": "local variable"
  }, {
    "id": 81,
    "text": "",
    "type": "number"
  }, {
    "id": 82,
    "text": "",
    "type": "local variable"
  }, {
    "id": 83,
    "text": "",
    "type": "n/a"
  }, {
    "id": 84,
    "text": "",
    "type": "local variable"
  }, {
    "id": 85,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 86,
    "text": "",
    "type": "local variable"
  }, {
    "id": 87,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 88,
    "text": "",
    "type": "local variable"
  }, {
    "id": 89,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 90,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 91,
    "text": "",
    "type": "number"
  }, {
    "id": 92,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 93,
    "text": "",
    "type": "number"
  }, {
    "id": 94,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 95,
    "text": "",
    "type": "number"
  }, {
    "id": 96,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 97,
    "text": "",
    "type": "number"
  }, {
    "id": 98,
    "text": "",
    "type": "global variable"
  }, {
    "id": 99,
    "text": "",
    "type": "n/a"
  }, {
    "id": 100,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 101,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 102,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 103,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 104,
    "text": "cdf",
    "type": "module"
  } ]
}