{
  "_filename": "receptionist.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/simulua/examples/receptionist.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 12
  }, {
    "from": 3,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 5
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 14,
    "label": "has",
    "to": 22
  }, {
    "from": 14,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 12
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 15
  }, {
    "from": 26,
    "label": "has",
    "to": 16
  }, {
    "from": 26,
    "label": "has",
    "to": 17
  }, {
    "from": 26,
    "label": "has",
    "to": 18
  }, {
    "from": 26,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 26,
    "label": "has",
    "to": 22
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 30,
    "label": "has",
    "to": 18
  }, {
    "from": 28,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 35,
    "label": "has",
    "to": 39
  }, {
    "from": 35,
    "label": "has",
    "to": 40
  }, {
    "from": 35,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 31
  }, {
    "from": 35,
    "label": "has",
    "to": 43
  }, {
    "from": 35,
    "label": "has",
    "to": 44
  }, {
    "from": 14,
    "label": "calls",
    "to": 48
  }, {
    "from": 14,
    "label": "calls",
    "to": 48
  }, {
    "from": 14,
    "label": "calls",
    "to": 48
  }, {
    "from": 14,
    "label": "calls",
    "to": 53
  }, {
    "from": 14,
    "label": "calls",
    "to": 53
  }, {
    "from": 14,
    "label": "calls",
    "to": 53
  }, {
    "from": 3,
    "label": "calls",
    "to": 47
  }, {
    "from": 3,
    "label": "calls",
    "to": 46
  }, {
    "from": 14,
    "label": "calls",
    "to": 46
  }, {
    "from": 45,
    "label": "calls",
    "to": 46
  }, {
    "from": 3,
    "label": "calls",
    "to": 55
  }, {
    "from": 45,
    "label": "calls",
    "to": 55
  }, {
    "from": 3,
    "label": "calls",
    "to": 49
  }, {
    "from": 3,
    "label": "calls",
    "to": 49
  }, {
    "from": 3,
    "label": "calls",
    "to": 49
  }, {
    "from": 14,
    "label": "calls",
    "to": 49
  }, {
    "from": 45,
    "label": "calls",
    "to": 49
  }, {
    "from": 45,
    "label": "calls",
    "to": 49
  }, {
    "from": 45,
    "label": "calls",
    "to": 49
  }, {
    "from": 45,
    "label": "calls",
    "to": 49
  }, {
    "from": 14,
    "label": "calls",
    "to": 56
  }, {
    "from": 14,
    "label": "calls",
    "to": 56
  }, {
    "from": 14,
    "label": "calls",
    "to": 56
  }, {
    "from": 14,
    "label": "calls",
    "to": 51
  }, {
    "from": 14,
    "label": "calls",
    "to": 51
  }, {
    "from": 14,
    "label": "calls",
    "to": 51
  }, {
    "from": 45,
    "label": "calls",
    "to": 52
  }, {
    "from": 45,
    "label": "calls",
    "to": 3
  }, {
    "from": 45,
    "label": "calls",
    "to": 3
  }, {
    "from": 3,
    "label": "calls",
    "to": 50
  }, {
    "from": 45,
    "label": "calls",
    "to": 50
  }, {
    "from": 45,
    "label": "calls",
    "to": 50
  }, {
    "from": 45,
    "label": "calls",
    "to": 50
  }, {
    "from": 45,
    "label": "calls",
    "to": 50
  }, {
    "from": 45,
    "label": "calls",
    "to": 50
  }, {
    "from": 45,
    "label": "calls",
    "to": 57
  }, {
    "from": 45,
    "label": "calls",
    "to": 57
  }, {
    "from": 45,
    "label": "calls",
    "to": 14
  }, {
    "from": 45,
    "label": "calls",
    "to": 54
  }, {
    "from": 1,
    "label": "contains",
    "to": 45
  }, {
    "from": 45,
    "label": "declares",
    "to": 3
  }, {
    "from": 45,
    "label": "declares",
    "to": 14
  }, {
    "from": 45,
    "label": "declares",
    "to": 24
  }, {
    "from": 45,
    "label": "declares",
    "to": 26
  }, {
    "from": 45,
    "label": "declares",
    "to": 28
  }, {
    "from": 45,
    "label": "declares",
    "to": 35
  }, {
    "from": 1,
    "label": "contains",
    "to": 59
  }, {
    "from": 1,
    "label": "contains",
    "to": 60
  }, {
    "from": 59,
    "label": "initializes",
    "to": 61
  }, {
    "from": 61,
    "label": "assigns",
    "to": 62
  }, {
    "from": 59,
    "label": "initializes",
    "to": 63
  }, {
    "from": 59,
    "label": "initializes",
    "to": 64
  }, {
    "from": 59,
    "label": "initializes",
    "to": 65
  }, {
    "from": 60,
    "label": "initializes",
    "to": 66
  }, {
    "from": 66,
    "label": "requires",
    "to": 2
  }, {
    "from": 60,
    "label": "initializes",
    "to": 67
  }, {
    "from": 67,
    "label": "requires",
    "to": 58
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "receptionist",
    "type": "module"
  }, {
    "id": 2,
    "text": "simulua",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function interviewer (title)\r\n  local interviewerQ = queue()\r\n  return simulua.process(function()\r\n    while true do\r\n      if not interviewerQ:isempty() then\r\n        simulua.hold(3.5) -- interview time taken as 3.5 minutes\r\n        local next = interviewerQ:retrieve()\r\n        simulua.activate(next, simulua.current(), true) -- after current\r\n        simulua.hold(3) -- 3 minutes to clear desk\r\n      else\r\n        simulua.hold(5) -- wait 5 minutes before checking queue again\r\n      end\r\n    end\r\n  end, {Q = interviewerQ})\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local interviewerQ = queue()",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "while true do\r\n      if not interviewerQ:isempty() then\r\n        simulua.hold(3.5) -- interview time taken as 3.5 minutes\r\n        local next = interviewerQ:retrieve()\r\n        simulua.activate(next, simulua.current(), true) -- after current\r\n        simulua.hold(3) -- 3 minutes to clear desk\r\n      else\r\n        simulua.hold(5) -- wait 5 minutes before checking queue again\r\n      end\r\n    end",
    "type": "statement:while"
  }, {
    "id": 7,
    "text": "if not interviewerQ:isempty() then\r\n        simulua.hold(3.5) -- interview time taken as 3.5 minutes\r\n        local next = interviewerQ:retrieve()\r\n        simulua.activate(next, simulua.current(), true) -- after current\r\n        simulua.hold(3) -- 3 minutes to clear desk\r\n      else\r\n        simulua.hold(5) -- wait 5 minutes before checking queue again\r\n      end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "simulua.hold(3.5)",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "local next = interviewerQ:retrieve()",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "simulua.activate(next, simulua.current(), true)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "simulua.hold(3)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "simulua.hold(5)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "local function jobhunter (skill)\r\n  return simulua.process(function()\r\n    print(string.format(\r\n        \"Job hunter %d joins receptionist queue at time %.1f\",\r\n        skill, simulua.time()))\r\n    simulua.wait(receptionist.Q)\r\n    print(string.format(\r\n        \"Job hunter %d joins interview queue at time %.1f\",\r\n        skill, simulua.time()))\r\n    simulua.hold(1) -- 1 minute to join new queue\r\n    if skill == MANUAL then\r\n      simulua.wait(manual.Q)\r\n    else\r\n      simulua.wait(skilled.Q)\r\n    end\r\n    print(string.format(\r\n        \"Job hunter %d leaves employment office at time %.1f\",\r\n        skill, simulua.time()))\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "print(string.format(\r\n        \"Job hunter %d joins receptionist queue at time %.1f\",\r\n        skill, simulua.time()))",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "simulua.wait(receptionist.Q)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "print(string.format(\r\n        \"Job hunter %d joins interview queue at time %.1f\",\r\n        skill, simulua.time()))",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "simulua.hold(1)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "if skill == MANUAL then\r\n      simulua.wait(manual.Q)\r\n    else\r\n      simulua.wait(skilled.Q)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "simulua.wait(manual.Q)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "simulua.wait(skilled.Q)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "print(string.format(\r\n        \"Job hunter %d leaves employment office at time %.1f\",\r\n        skill, simulua.time()))",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function()\r\n    while true do\r\n      if not interviewerQ:isempty() then\r\n        simulua.hold(3.5) -- interview time taken as 3.5 minutes\r\n        local next = interviewerQ:retrieve()\r\n        simulua.activate(next, simulua.current(), true) -- after current\r\n        simulua.hold(3) -- 3 minutes to clear desk\r\n      else\r\n        simulua.hold(5) -- wait 5 minutes before checking queue again\r\n      end\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function()\r\n    print(string.format(\r\n        \"Job hunter %d joins receptionist queue at time %.1f\",\r\n        skill, simulua.time()))\r\n    simulua.wait(receptionist.Q)\r\n    print(string.format(\r\n        \"Job hunter %d joins interview queue at time %.1f\",\r\n        skill, simulua.time()))\r\n    simulua.hold(1) -- 1 minute to join new queue\r\n    if skill == MANUAL then\r\n      simulua.wait(manual.Q)\r\n    else\r\n      simulua.wait(skilled.Q)\r\n    end\r\n    print(string.format(\r\n        \"Job hunter %d leaves employment office at time %.1f\",\r\n        skill, simulua.time()))\r\n  end",
    "type": "function"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function()\r\n    while true do\r\n      if not receptionistQ:isempty() then\r\n        simulua.hold(2)\r\n        local customer = receptionistQ:retrieve()\r\n        simulua.activate(customer)\r\n      else\r\n        simulua.hold(1)\r\n      end\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 29,
    "text": "while true do\r\n      if not receptionistQ:isempty() then\r\n        simulua.hold(2)\r\n        local customer = receptionistQ:retrieve()\r\n        simulua.activate(customer)\r\n      else\r\n        simulua.hold(1)\r\n      end\r\n    end",
    "type": "statement:while"
  }, {
    "id": 30,
    "text": "if not receptionistQ:isempty() then\r\n        simulua.hold(2)\r\n        local customer = receptionistQ:retrieve()\r\n        simulua.activate(customer)\r\n      else\r\n        simulua.hold(1)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "simulua.hold(2)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "local customer = receptionistQ:retrieve()",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "simulua.activate(customer)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function()\r\n  simulua.activate(receptionist)\r\n  manual = interviewer\"Manual\"\r\n  simulua.activate(manual)\r\n  skilled = interviewer\"Skilled\"\r\n  simulua.activate(skilled)\r\n  for _, skill in ipairs{1, 2, 2, 1} do\r\n    simulua.activate(jobhunter(skill))\r\n    simulua.hold(2)\r\n  end\r\n  simulua.hold(100)\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "simulua.activate(receptionist)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "manual = interviewer\"Manual\"",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "simulua.activate(manual)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "skilled = interviewer\"Skilled\"",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "simulua.activate(skilled)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "for _, skill in ipairs{1, 2, 2, 1} do\r\n    simulua.activate(jobhunter(skill))\r\n    simulua.hold(2)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 42,
    "text": "simulua.activate(jobhunter(skill))",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "simulua.hold(100)",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "",
    "type": "function container"
  }, {
    "id": 46,
    "text": "function process (task, att)\r\n  local p = setmetatable(att or {}, procmt)\r\n  thread[p] = create(task)\r\n  return p\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "function current () return _current end",
    "type": "function"
  }, {
    "id": 48,
    "text": "function time (proc)\r\n  if proc == nil then return _time end\r\n  return events:get(checkprocess(proc))\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "function hold (delay) yield(\"hold\", delay) end",
    "type": "function"
  }, {
    "id": 50,
    "text": "function activate (proc, d, after)\r\n  yield(\"activate\", proc, d, after)\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "function wait (res, ...)\r\n  assert(res ~= nil, \"invalid resource\")\r\n  assert(type(res.into) == \"function\",\r\n      \"resource has invalid `into' method\")\r\n  res:into(_current, ...)\r\n  yield(\"cancel\", _current) -- passivate\r\nend",
    "type": "function"
  }, {
    "id": 52,
    "text": "function start (task)\r\n  events, isidle, main = heap(), {}, process(task)\r\n  events:insert(0, main)\r\n  local active, msg = resume(scheduler())\r\n  assert(active, msg)\r\n  if msg ~= nil then error(msg) end\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "format",
    "type": "global function"
  }, {
    "id": 54,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 55,
    "text": "queue",
    "type": "global function"
  }, {
    "id": 56,
    "text": "print",
    "type": "global function"
  }, {
    "id": 57,
    "text": "require",
    "type": "global function"
  }, {
    "id": 58,
    "text": "queue",
    "type": "module"
  }, {
    "id": 59,
    "text": "",
    "type": "variable container"
  }, {
    "id": 60,
    "text": "",
    "type": "require container"
  }, {
    "id": 61,
    "text": "",
    "type": "local variable"
  }, {
    "id": 62,
    "text": "",
    "type": "number"
  }, {
    "id": 63,
    "text": "",
    "type": "local variable"
  }, {
    "id": 64,
    "text": "",
    "type": "local variable"
  }, {
    "id": 65,
    "text": "",
    "type": "local variable"
  }, {
    "id": 66,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 67,
    "text": "",
    "type": "require local variable"
  } ]
}