{
  "_filename": "simulua.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/simulua/simulua.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "calls",
    "to": 64
  }, {
    "from": 2,
    "label": "calls",
    "to": 64
  }, {
    "from": 2,
    "label": "calls",
    "to": 64
  }, {
    "from": 2,
    "label": "calls",
    "to": 59
  }, {
    "from": 2,
    "label": "calls",
    "to": 59
  }, {
    "from": 2,
    "label": "calls",
    "to": 59
  }, {
    "from": 2,
    "label": "calls",
    "to": 74
  }, {
    "from": 2,
    "label": "calls",
    "to": 79
  }, {
    "from": 2,
    "label": "calls",
    "to": 84
  }, {
    "from": 2,
    "label": "calls",
    "to": 70
  }, {
    "from": 2,
    "label": "calls",
    "to": 70
  }, {
    "from": 2,
    "label": "calls",
    "to": 70
  }, {
    "from": 2,
    "label": "calls",
    "to": 76
  }, {
    "from": 2,
    "label": "calls",
    "to": 76
  }, {
    "from": 2,
    "label": "calls",
    "to": 76
  }, {
    "from": 2,
    "label": "calls",
    "to": 76
  }, {
    "from": 3,
    "label": "calls",
    "to": 64
  }, {
    "from": 3,
    "label": "calls",
    "to": 64
  }, {
    "from": 3,
    "label": "calls",
    "to": 59
  }, {
    "from": 4,
    "label": "calls",
    "to": 59
  }, {
    "from": 3,
    "label": "calls",
    "to": 70
  }, {
    "from": 4,
    "label": "calls",
    "to": 70
  }, {
    "from": 5,
    "label": "calls",
    "to": 70
  }, {
    "from": 5,
    "label": "calls",
    "to": 84
  }, {
    "from": 3,
    "label": "calls",
    "to": 76
  }, {
    "from": 4,
    "label": "calls",
    "to": 76
  }, {
    "from": 5,
    "label": "calls",
    "to": 76
  }, {
    "from": 5,
    "label": "calls",
    "to": 76
  }, {
    "from": 3,
    "label": "calls",
    "to": 74
  }, {
    "from": 4,
    "label": "calls",
    "to": 74
  }, {
    "from": 7,
    "label": "calls",
    "to": 59
  }, {
    "from": 6,
    "label": "calls",
    "to": 59
  }, {
    "from": 7,
    "label": "calls",
    "to": 70
  }, {
    "from": 6,
    "label": "calls",
    "to": 70
  }, {
    "from": 7,
    "label": "calls",
    "to": 70
  }, {
    "from": 7,
    "label": "calls",
    "to": 70
  }, {
    "from": 7,
    "label": "calls",
    "to": 84
  }, {
    "from": 7,
    "label": "calls",
    "to": 76
  }, {
    "from": 7,
    "label": "calls",
    "to": 76
  }, {
    "from": 7,
    "label": "calls",
    "to": 76
  }, {
    "from": 7,
    "label": "calls",
    "to": 64
  }, {
    "from": 7,
    "label": "calls",
    "to": 64
  }, {
    "from": 6,
    "label": "calls",
    "to": 64
  }, {
    "from": 6,
    "label": "calls",
    "to": 79
  }, {
    "from": 8,
    "label": "calls",
    "to": 64
  }, {
    "from": 8,
    "label": "calls",
    "to": 64
  }, {
    "from": 8,
    "label": "calls",
    "to": 64
  }, {
    "from": 8,
    "label": "calls",
    "to": 64
  }, {
    "from": 8,
    "label": "calls",
    "to": 64
  }, {
    "from": 8,
    "label": "calls",
    "to": 59
  }, {
    "from": 8,
    "label": "calls",
    "to": 59
  }, {
    "from": 8,
    "label": "calls",
    "to": 70
  }, {
    "from": 8,
    "label": "calls",
    "to": 70
  }, {
    "from": 8,
    "label": "calls",
    "to": 70
  }, {
    "from": 8,
    "label": "calls",
    "to": 70
  }, {
    "from": 8,
    "label": "calls",
    "to": 70
  }, {
    "from": 8,
    "label": "calls",
    "to": 84
  }, {
    "from": 8,
    "label": "calls",
    "to": 74
  }, {
    "from": 8,
    "label": "calls",
    "to": 74
  }, {
    "from": 8,
    "label": "calls",
    "to": 76
  }, {
    "from": 8,
    "label": "calls",
    "to": 76
  }, {
    "from": 8,
    "label": "calls",
    "to": 72
  }, {
    "from": 9,
    "label": "calls",
    "to": 64
  }, {
    "from": 12,
    "label": "calls",
    "to": 64
  }, {
    "from": 10,
    "label": "calls",
    "to": 59
  }, {
    "from": 11,
    "label": "calls",
    "to": 59
  }, {
    "from": 12,
    "label": "calls",
    "to": 59
  }, {
    "from": 10,
    "label": "calls",
    "to": 70
  }, {
    "from": 11,
    "label": "calls",
    "to": 70
  }, {
    "from": 12,
    "label": "calls",
    "to": 70
  }, {
    "from": 13,
    "label": "calls",
    "to": 70
  }, {
    "from": 13,
    "label": "calls",
    "to": 70
  }, {
    "from": 13,
    "label": "calls",
    "to": 84
  }, {
    "from": 11,
    "label": "calls",
    "to": 79
  }, {
    "from": 11,
    "label": "calls",
    "to": 79
  }, {
    "from": 10,
    "label": "calls",
    "to": 76
  }, {
    "from": 11,
    "label": "calls",
    "to": 76
  }, {
    "from": 13,
    "label": "calls",
    "to": 76
  }, {
    "from": 13,
    "label": "calls",
    "to": 76
  }, {
    "from": 13,
    "label": "calls",
    "to": 76
  }, {
    "from": 12,
    "label": "calls",
    "to": 74
  }, {
    "from": 15,
    "label": "calls",
    "to": 64
  }, {
    "from": 15,
    "label": "calls",
    "to": 64
  }, {
    "from": 15,
    "label": "calls",
    "to": 64
  }, {
    "from": 14,
    "label": "calls",
    "to": 63
  }, {
    "from": 14,
    "label": "calls",
    "to": 59
  }, {
    "from": 15,
    "label": "calls",
    "to": 59
  }, {
    "from": 16,
    "label": "calls",
    "to": 59
  }, {
    "from": 14,
    "label": "calls",
    "to": 70
  }, {
    "from": 14,
    "label": "calls",
    "to": 70
  }, {
    "from": 14,
    "label": "calls",
    "to": 70
  }, {
    "from": 15,
    "label": "calls",
    "to": 70
  }, {
    "from": 16,
    "label": "calls",
    "to": 70
  }, {
    "from": 16,
    "label": "calls",
    "to": 70
  }, {
    "from": 16,
    "label": "calls",
    "to": 70
  }, {
    "from": 16,
    "label": "calls",
    "to": 70
  }, {
    "from": 15,
    "label": "calls",
    "to": 79
  }, {
    "from": 15,
    "label": "calls",
    "to": 79
  }, {
    "from": 15,
    "label": "calls",
    "to": 79
  }, {
    "from": 16,
    "label": "calls",
    "to": 84
  }, {
    "from": 14,
    "label": "calls",
    "to": 76
  }, {
    "from": 16,
    "label": "calls",
    "to": 76
  }, {
    "from": 16,
    "label": "calls",
    "to": 76
  }, {
    "from": 16,
    "label": "calls",
    "to": 76
  }, {
    "from": 16,
    "label": "calls",
    "to": 76
  }, {
    "from": 16,
    "label": "calls",
    "to": 76
  }, {
    "from": 17,
    "label": "calls",
    "to": 74
  }, {
    "from": 17,
    "label": "calls",
    "to": 94
  }, {
    "from": 17,
    "label": "calls",
    "to": 59
  }, {
    "from": 17,
    "label": "calls",
    "to": 59
  }, {
    "from": 17,
    "label": "calls",
    "to": 70
  }, {
    "from": 17,
    "label": "calls",
    "to": 70
  }, {
    "from": 17,
    "label": "calls",
    "to": 70
  }, {
    "from": 17,
    "label": "calls",
    "to": 67
  }, {
    "from": 17,
    "label": "calls",
    "to": 84
  }, {
    "from": 17,
    "label": "calls",
    "to": 76
  }, {
    "from": 17,
    "label": "calls",
    "to": 76
  }, {
    "from": 17,
    "label": "calls",
    "to": 76
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 24
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 27,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 27,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 34,
    "label": "has",
    "to": 38
  }, {
    "from": 34,
    "label": "has",
    "to": 39
  }, {
    "from": 34,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 40,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 34,
    "label": "has",
    "to": 48
  }, {
    "from": 34,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 51,
    "label": "has",
    "to": 54
  }, {
    "from": 34,
    "label": "has",
    "to": 55
  }, {
    "from": 33,
    "label": "has",
    "to": 56
  }, {
    "from": 33,
    "label": "has",
    "to": 57
  }, {
    "from": 26,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 59,
    "label": "has",
    "to": 24
  }, {
    "from": 59,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 24
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 24
  }, {
    "from": 64,
    "label": "has",
    "to": 24
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 24
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 81
  }, {
    "from": 79,
    "label": "has",
    "to": 82
  }, {
    "from": 79,
    "label": "has",
    "to": 75
  }, {
    "from": 79,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 84,
    "label": "has",
    "to": 87
  }, {
    "from": 84,
    "label": "has",
    "to": 88
  }, {
    "from": 84,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 84,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 94,
    "label": "has",
    "to": 24
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 27,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 27,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 34,
    "label": "has",
    "to": 38
  }, {
    "from": 34,
    "label": "has",
    "to": 39
  }, {
    "from": 34,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 40,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 34,
    "label": "has",
    "to": 48
  }, {
    "from": 34,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 51,
    "label": "has",
    "to": 54
  }, {
    "from": 34,
    "label": "has",
    "to": 55
  }, {
    "from": 33,
    "label": "has",
    "to": 56
  }, {
    "from": 33,
    "label": "has",
    "to": 57
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 98,
    "label": "has",
    "to": 100
  }, {
    "from": 98,
    "label": "has",
    "to": 101
  }, {
    "from": 98,
    "label": "has",
    "to": 102
  }, {
    "from": 98,
    "label": "has",
    "to": 103
  }, {
    "from": 98,
    "label": "has",
    "to": 104
  }, {
    "from": 98,
    "label": "has",
    "to": 105
  }, {
    "from": 26,
    "label": "calls",
    "to": 22
  }, {
    "from": 26,
    "label": "calls",
    "to": 22
  }, {
    "from": 26,
    "label": "calls",
    "to": 22
  }, {
    "from": 64,
    "label": "calls",
    "to": 22
  }, {
    "from": 67,
    "label": "calls",
    "to": 22
  }, {
    "from": 22,
    "label": "calls",
    "to": 117
  }, {
    "from": 22,
    "label": "calls",
    "to": 107
  }, {
    "from": 79,
    "label": "calls",
    "to": 107
  }, {
    "from": 79,
    "label": "calls",
    "to": 107
  }, {
    "from": 84,
    "label": "calls",
    "to": 107
  }, {
    "from": 106,
    "label": "calls",
    "to": 107
  }, {
    "from": 106,
    "label": "calls",
    "to": 107
  }, {
    "from": 106,
    "label": "calls",
    "to": 113
  }, {
    "from": 106,
    "label": "calls",
    "to": 115
  }, {
    "from": 26,
    "label": "calls",
    "to": 108
  }, {
    "from": 59,
    "label": "calls",
    "to": 108
  }, {
    "from": 84,
    "label": "calls",
    "to": 59
  }, {
    "from": 84,
    "label": "calls",
    "to": 109
  }, {
    "from": 84,
    "label": "calls",
    "to": 114
  }, {
    "from": 26,
    "label": "calls",
    "to": 110
  }, {
    "from": 84,
    "label": "calls",
    "to": 110
  }, {
    "from": 106,
    "label": "calls",
    "to": 112
  }, {
    "from": 59,
    "label": "calls",
    "to": 112
  }, {
    "from": 94,
    "label": "calls",
    "to": 112
  }, {
    "from": 22,
    "label": "calls",
    "to": 116
  }, {
    "from": 26,
    "label": "calls",
    "to": 116
  }, {
    "from": 26,
    "label": "calls",
    "to": 116
  }, {
    "from": 79,
    "label": "calls",
    "to": 116
  }, {
    "from": 106,
    "label": "calls",
    "to": 116
  }, {
    "from": 106,
    "label": "calls",
    "to": 116
  }, {
    "from": 26,
    "label": "calls",
    "to": 18
  }, {
    "from": 26,
    "label": "calls",
    "to": 18
  }, {
    "from": 26,
    "label": "calls",
    "to": 18
  }, {
    "from": 26,
    "label": "calls",
    "to": 111
  }, {
    "from": 26,
    "label": "calls",
    "to": 111
  }, {
    "from": 70,
    "label": "calls",
    "to": 111
  }, {
    "from": 72,
    "label": "calls",
    "to": 111
  }, {
    "from": 74,
    "label": "calls",
    "to": 111
  }, {
    "from": 76,
    "label": "calls",
    "to": 111
  }, {
    "from": 79,
    "label": "calls",
    "to": 111
  }, {
    "from": 92,
    "label": "calls",
    "to": 111
  }, {
    "from": 84,
    "label": "calls",
    "to": 26
  }, {
    "from": 1,
    "label": "contains",
    "to": 106
  }, {
    "from": 106,
    "label": "declares",
    "to": 18
  }, {
    "from": 106,
    "label": "declares",
    "to": 22
  }, {
    "from": 106,
    "label": "declares",
    "to": 26
  }, {
    "from": 106,
    "label": "declares",
    "to": 59
  }, {
    "from": 106,
    "label": "declares",
    "to": 63
  }, {
    "from": 106,
    "label": "declares",
    "to": 64
  }, {
    "from": 106,
    "label": "declares",
    "to": 67
  }, {
    "from": 106,
    "label": "declares",
    "to": 70
  }, {
    "from": 106,
    "label": "declares",
    "to": 72
  }, {
    "from": 106,
    "label": "declares",
    "to": 74
  }, {
    "from": 106,
    "label": "declares",
    "to": 76
  }, {
    "from": 106,
    "label": "declares",
    "to": 79
  }, {
    "from": 106,
    "label": "declares",
    "to": 84
  }, {
    "from": 106,
    "label": "declares",
    "to": 92
  }, {
    "from": 106,
    "label": "declares",
    "to": 94
  }, {
    "from": 106,
    "label": "declares",
    "to": 96
  }, {
    "from": 106,
    "label": "declares",
    "to": 98
  }, {
    "from": 118,
    "label": "requires",
    "to": 1
  }, {
    "from": 119,
    "label": "requires",
    "to": 1
  }, {
    "from": 120,
    "label": "requires",
    "to": 1
  }, {
    "from": 121,
    "label": "requires",
    "to": 1
  }, {
    "from": 122,
    "label": "requires",
    "to": 1
  }, {
    "from": 123,
    "label": "requires",
    "to": 1
  }, {
    "from": 124,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 125
  }, {
    "from": 1,
    "label": "contains",
    "to": 126
  }, {
    "from": 125,
    "label": "initializes",
    "to": 127
  }, {
    "from": 127,
    "label": "assigns",
    "to": 128
  }, {
    "from": 125,
    "label": "initializes",
    "to": 129
  }, {
    "from": 129,
    "label": "assigns",
    "to": 130
  }, {
    "from": 125,
    "label": "initializes",
    "to": 131
  }, {
    "from": 131,
    "label": "assigns",
    "to": 132
  }, {
    "from": 125,
    "label": "initializes",
    "to": 133
  }, {
    "from": 133,
    "label": "assigns",
    "to": 134
  }, {
    "from": 125,
    "label": "initializes",
    "to": 135
  }, {
    "from": 135,
    "label": "assigns",
    "to": 136
  }, {
    "from": 125,
    "label": "initializes",
    "to": 137
  }, {
    "from": 137,
    "label": "assigns",
    "to": 138
  }, {
    "from": 125,
    "label": "initializes",
    "to": 139
  }, {
    "from": 139,
    "label": "assigns",
    "to": 140
  }, {
    "from": 125,
    "label": "initializes",
    "to": 141
  }, {
    "from": 141,
    "label": "assigns",
    "to": 142
  }, {
    "from": 125,
    "label": "initializes",
    "to": 143
  }, {
    "from": 143,
    "label": "assigns",
    "to": 144
  }, {
    "from": 125,
    "label": "initializes",
    "to": 145
  }, {
    "from": 145,
    "label": "assigns",
    "to": 146
  }, {
    "from": 125,
    "label": "initializes",
    "to": 147
  }, {
    "from": 125,
    "label": "initializes",
    "to": 148
  }, {
    "from": 125,
    "label": "initializes",
    "to": 149
  }, {
    "from": 125,
    "label": "initializes",
    "to": 150
  }, {
    "from": 125,
    "label": "initializes",
    "to": 151
  }, {
    "from": 125,
    "label": "initializes",
    "to": 152
  }, {
    "from": 152,
    "label": "assigns",
    "to": 153
  }, {
    "from": 153,
    "label": "assigns",
    "to": 154
  }, {
    "from": 154,
    "label": "assigns",
    "to": 155
  }, {
    "from": 125,
    "label": "initializes",
    "to": 156
  }, {
    "from": 156,
    "label": "assigns",
    "to": 157
  }, {
    "from": 125,
    "label": "initializes",
    "to": 158
  }, {
    "from": 158,
    "label": "assigns",
    "to": 159
  }, {
    "from": 126,
    "label": "initializes",
    "to": 160
  }, {
    "from": 160,
    "label": "requires",
    "to": 161
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "simulua",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function washingcars (p, n, simperiod, seed)\r\n  local tearoom, waitingline = queue(), queue()\r\n  local throughtime, ncustomers, maxlength = 0, 0, 0\r\n  local r = rng(seed)\r\n  local function report ()\r\n    print(string.format(\"%2d CAR WASHER SIMULATION\", n))\r\n    print(string.format(\"NO. OF CARS THROUGH THE SYSTEM=%6d\", ncustomers))\r\n    print(string.format(\"AV. ELAPSED TIME=%9.2f\", throughtime / ncustomers))\r\n    print(string.format(\"MAXIMUM QUEUE LENGTH=%4d\", maxlength))\r\n  end\r\n  -- processes\r\n  local function car ()\r\n    local self = {}\r\n    return simulua.process(function()\r\n      local entrytime = simulua.time()\r\n      waitingline:into(self)\r\n      local qlength = #waitingline\r\n      if maxlength < qlength then maxlength = qlength end\r\n      if not tearoom:isempty() then\r\n        simulua.activate(tearoom:front())\r\n      end\r\n      simulua.passivate()\r\n      local elapsedtime = simulua.time() - entrytime\r\n      ncustomers = ncustomers + 1\r\n      throughtime = throughtime + elapsedtime\r\n    end, self)\r\n  end\r\n  local function carwasher ()\r\n    return simulua.process(function()\r\n      while true do\r\n        tearoom:retrieve() -- self out\r\n        while not waitingline:isempty() do\r\n          local served = waitingline:retrieve()\r\n          simulua.hold(10)\r\n          simulua.activate(served)\r\n        end\r\n        simulua.wait(tearoom)\r\n      end\r\n    end)\r\n  end\r\n  local cargen = simulua.process(function()\r\n    while simulua.time() < simperiod do\r\n      simulua.activate(car())\r\n      simulua.hold(r:exp(p))\r\n    end\r\n  end)\r\n  -- simulation\r\n  simulua.start(function()\r\n    for i = 1, n do tearoom:into(carwasher()) end\r\n    simulua.activate(cargen)\r\n    simulua.hold(simperiod + 1e6)\r\n    report()\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local function machine ()\r\n  local self, lastbreak = {}\r\n  return simulua.process(function()\r\n    while true do\r\n      simulua.hold(u:exp(brk))\r\n      broken:into(self) -- insert\r\n      lastbreak = simulua.time()\r\n      if not available:isempty() then\r\n        simulua.activate(available:front())\r\n      end\r\n      simulua.passivate()\r\n      breaks = breaks + 1\r\n      downtime = downtime + simulua.time() - lastbreak\r\n    end\r\n  end, self)\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local function repairman ()\r\n  local self = {}\r\n  return simulua.process(function()\r\n    while true do\r\n      available:retrieve() -- self out\r\n      while not broken:isempty() do\r\n        local mach = broken:retrieve()\r\n        simulua.hold(u:exp(rep))\r\n        simulua.activate(mach)\r\n      end\r\n      available:into(self) -- insert\r\n      simulua.passivate()\r\n    end\r\n  end, self)\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "",
    "type": "function container"
  }, {
    "id": 6,
    "text": "local function customer (name, price, var, threshold, weight)\r\n  local self = {price = price, var = var}\r\n  return simulua.process (function()\r\n    while true do\r\n      simulua.wait(waitingline)\r\n      -- update price\r\n      local m, v = weight * self.price / self.var, weight / self.var\r\n      local t, s\r\n      if transaction[self] then\r\n        t, s = self.price, self.var\r\n      else\r\n        t, s = vendor.price, vendor.var\r\n      end\r\n      m = m + t / s\r\n      v = v + 1 / s\r\n      self.price = max(min(r:norm(m / v, sqrt(1 / v)), threshold), 0)\r\n      history[simulua.time()][name] = self.price\r\n      simulua.hold(0.5) -- any time t, 0 < t < 1\r\n    end\r\n  end, self)\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "",
    "type": "function container"
  }, {
    "id": 8,
    "text": "",
    "type": "function container"
  }, {
    "id": 9,
    "text": "local function report ()\r\n  print(\"*** Report ***\")\r\n  print(string.format(\"%d documents printed, at time %.1f\", count,\r\n      simulua.time()))\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "local function writer ()\r\n  local self = {doc = true}\r\n  return simulua.process(function()\r\n    while true do\r\n      simulua.hold(8)\r\n      self.doc = document()\r\n      local typist = typingpool:retrieve()\r\n      simulua.activate(typist)\r\n    end\r\n  end, self)\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "local function typer ()\r\n  return simulua.process(function()\r\n    simulua.wait(typingpool)\r\n    while true do\r\n      simulua.hold(4)\r\n      simulua.activate(photocopier)\r\n      simulua.wait(typingpool)\r\n    end\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "local function copier ()\r\n  return simulua.process(function()\r\n    while true do\r\n      simulua.hold(1)\r\n      count = (count or 0) + 1\r\n      print(string.format(\"Document %d printed at %.1f\",\r\n        count, simulua.time()))\r\n      simulua.passivate()\r\n    end\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "",
    "type": "function container"
  }, {
    "id": 14,
    "text": "local function interviewer (title)\r\n  local interviewerQ = queue()\r\n  return simulua.process(function()\r\n    while true do\r\n      if not interviewerQ:isempty() then\r\n        simulua.hold(3.5) -- interview time taken as 3.5 minutes\r\n        local next = interviewerQ:retrieve()\r\n        simulua.activate(next, simulua.current(), true) -- after current\r\n        simulua.hold(3) -- 3 minutes to clear desk\r\n      else\r\n        simulua.hold(5) -- wait 5 minutes before checking queue again\r\n      end\r\n    end\r\n  end, {Q = interviewerQ})\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "local function jobhunter (skill)\r\n  return simulua.process(function()\r\n    print(string.format(\r\n        \"Job hunter %d joins receptionist queue at time %.1f\",\r\n        skill, simulua.time()))\r\n    simulua.wait(receptionist.Q)\r\n    print(string.format(\r\n        \"Job hunter %d joins interview queue at time %.1f\",\r\n        skill, simulua.time()))\r\n    simulua.hold(1) -- 1 minute to join new queue\r\n    if skill == MANUAL then\r\n      simulua.wait(manual.Q)\r\n    else\r\n      simulua.wait(skilled.Q)\r\n    end\r\n    print(string.format(\r\n        \"Job hunter %d leaves employment office at time %.1f\",\r\n        skill, simulua.time()))\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "",
    "type": "function container"
  }, {
    "id": 17,
    "text": "",
    "type": "function container"
  }, {
    "id": 18,
    "text": "local function cancelprocess (proc)\r\n  if events:remove(proc) then -- removed?\r\n    isidle[proc] = true -- add to idle event set\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "if events:remove(proc) then -- removed?\r\n    isidle[proc] = true -- add to idle event set\r\n  end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "isidle[proc] = true",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "local function checkprocess (proc)\r\n  assert(getmetatable(proc) == procmt,\r\n      \"process expected, got \" .. type(proc))\r\n  return proc\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "assert(getmetatable(proc) == procmt,\r\n      \"process expected, got \" .. type(proc))",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "local function scheduler () -- generator\r\n  return create(function()\r\n    while true do\r\n      if events:isempty() then break end\r\n      _time, _current = events:min()\r\n      local active, op, p, d, after = resume(thread[_current])\r\n      if not active then yield(op) end -- propagate error\r\n      if op ~= nil then\r\n        if op == \"hold\" then\r\n          if type(p) ~= \"number\" or p < 0 then p = 0 end\r\n          events:change(_current, _time + p) -- with priority\r\n        elseif op == \"cancel\" then\r\n          cancelprocess(checkprocess(p))\r\n        elseif op == \"activate\" then\r\n          -- set delay time\r\n          local delay\r\n          if d == nil then delay = 0\r\n          elseif type(d) == \"number\" then\r\n            delay = d >= 0 and d or 0\r\n          else -- process\r\n            d = checkprocess(d)\r\n            if not isidle[d] then\r\n              d = events:get(d) -- d's time\r\n              if d ~= nil then -- in event list?\r\n                delay = d - _time -- relative delay\r\n              end\r\n            end\r\n          end\r\n          p = checkprocess(p)\r\n          if delay == nil then\r\n            cancelprocess(p)\r\n          else\r\n            if isidle[p] or events:get(p) == nil then\r\n              events:insert(_time + delay, p, after)\r\n              isidle[p] = nil -- remove from idle set\r\n            else -- reactivate\r\n              events:change(p, _time + delay, after)\r\n            end\r\n          end\r\n        else -- failsafe\r\n          yield(\"unknown operation: \" .. op)\r\n        end\r\n      else\r\n        if _current == main then break end -- stop simulation\r\n        cancelprocess(_current) -- passivate\r\n      end\r\n    end\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "while true do\r\n      if events:isempty() then break end\r\n      _time, _current = events:min()\r\n      local active, op, p, d, after = resume(thread[_current])\r\n      if not active then yield(op) end -- propagate error\r\n      if op ~= nil then\r\n        if op == \"hold\" then\r\n          if type(p) ~= \"number\" or p < 0 then p = 0 end\r\n          events:change(_current, _time + p) -- with priority\r\n        elseif op == \"cancel\" then\r\n          cancelprocess(checkprocess(p))\r\n        elseif op == \"activate\" then\r\n          -- set delay time\r\n          local delay\r\n          if d == nil then delay = 0\r\n          elseif type(d) == \"number\" then\r\n            delay = d >= 0 and d or 0\r\n          else -- process\r\n            d = checkprocess(d)\r\n            if not isidle[d] then\r\n              d = events:get(d) -- d's time\r\n              if d ~= nil then -- in event list?\r\n                delay = d - _time -- relative delay\r\n              end\r\n            end\r\n          end\r\n          p = checkprocess(p)\r\n          if delay == nil then\r\n            cancelprocess(p)\r\n          else\r\n            if isidle[p] or events:get(p) == nil then\r\n              events:insert(_time + delay, p, after)\r\n              isidle[p] = nil -- remove from idle set\r\n            else -- reactivate\r\n              events:change(p, _time + delay, after)\r\n            end\r\n          end\r\n        else -- failsafe\r\n          yield(\"unknown operation: \" .. op)\r\n        end\r\n      else\r\n        if _current == main then break end -- stop simulation\r\n        cancelprocess(_current) -- passivate\r\n      end\r\n    end",
    "type": "statement:while"
  }, {
    "id": 28,
    "text": "if events:isempty() then break end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "_time, _current = events:min()",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "local active, op, p, d, after = resume(thread[_current])",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "if not active then yield(op) end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "yield(op)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "if op ~= nil then\r\n        if op == \"hold\" then\r\n          if type(p) ~= \"number\" or p < 0 then p = 0 end\r\n          events:change(_current, _time + p) -- with priority\r\n        elseif op == \"cancel\" then\r\n          cancelprocess(checkprocess(p))\r\n        elseif op == \"activate\" then\r\n          -- set delay time\r\n          local delay\r\n          if d == nil then delay = 0\r\n          elseif type(d) == \"number\" then\r\n            delay = d >= 0 and d or 0\r\n          else -- process\r\n            d = checkprocess(d)\r\n            if not isidle[d] then\r\n              d = events:get(d) -- d's time\r\n              if d ~= nil then -- in event list?\r\n                delay = d - _time -- relative delay\r\n              end\r\n            end\r\n          end\r\n          p = checkprocess(p)\r\n          if delay == nil then\r\n            cancelprocess(p)\r\n          else\r\n            if isidle[p] or events:get(p) == nil then\r\n              events:insert(_time + delay, p, after)\r\n              isidle[p] = nil -- remove from idle set\r\n            else -- reactivate\r\n              events:change(p, _time + delay, after)\r\n            end\r\n          end\r\n        else -- failsafe\r\n          yield(\"unknown operation: \" .. op)\r\n        end\r\n      else\r\n        if _current == main then break end -- stop simulation\r\n        cancelprocess(_current) -- passivate\r\n      end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "if op == \"hold\" then\r\n          if type(p) ~= \"number\" or p < 0 then p = 0 end\r\n          events:change(_current, _time + p) -- with priority\r\n        elseif op == \"cancel\" then\r\n          cancelprocess(checkprocess(p))\r\n        elseif op == \"activate\" then\r\n          -- set delay time\r\n          local delay\r\n          if d == nil then delay = 0\r\n          elseif type(d) == \"number\" then\r\n            delay = d >= 0 and d or 0\r\n          else -- process\r\n            d = checkprocess(d)\r\n            if not isidle[d] then\r\n              d = events:get(d) -- d's time\r\n              if d ~= nil then -- in event list?\r\n                delay = d - _time -- relative delay\r\n              end\r\n            end\r\n          end\r\n          p = checkprocess(p)\r\n          if delay == nil then\r\n            cancelprocess(p)\r\n          else\r\n            if isidle[p] or events:get(p) == nil then\r\n              events:insert(_time + delay, p, after)\r\n              isidle[p] = nil -- remove from idle set\r\n            else -- reactivate\r\n              events:change(p, _time + delay, after)\r\n            end\r\n          end\r\n        else -- failsafe\r\n          yield(\"unknown operation: \" .. op)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "if type(p) ~= \"number\" or p < 0 then p = 0 end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "p = 0",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "events:change(_current, _time + p)",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "cancelprocess(checkprocess(p))",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "local delay",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "if d == nil then delay = 0\r\n          elseif type(d) == \"number\" then\r\n            delay = d >= 0 and d or 0\r\n          else -- process\r\n            d = checkprocess(d)\r\n            if not isidle[d] then\r\n              d = events:get(d) -- d's time\r\n              if d ~= nil then -- in event list?\r\n                delay = d - _time -- relative delay\r\n              end\r\n            end\r\n          end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "delay = 0",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "delay = d >= 0 and d or 0",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "d = checkprocess(d)",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "if not isidle[d] then\r\n              d = events:get(d) -- d's time\r\n              if d ~= nil then -- in event list?\r\n                delay = d - _time -- relative delay\r\n              end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "d = events:get(d)",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "if d ~= nil then -- in event list?\r\n                delay = d - _time -- relative delay\r\n              end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "delay = d - _time",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "p = checkprocess(p)",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "if delay == nil then\r\n            cancelprocess(p)\r\n          else\r\n            if isidle[p] or events:get(p) == nil then\r\n              events:insert(_time + delay, p, after)\r\n              isidle[p] = nil -- remove from idle set\r\n            else -- reactivate\r\n              events:change(p, _time + delay, after)\r\n            end\r\n          end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "cancelprocess(p)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "if isidle[p] or events:get(p) == nil then\r\n              events:insert(_time + delay, p, after)\r\n              isidle[p] = nil -- remove from idle set\r\n            else -- reactivate\r\n              events:change(p, _time + delay, after)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "events:insert(_time + delay, p, after)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "isidle[p] = nil",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "events:change(p, _time + delay, after)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "yield(\"unknown operation: \" .. op)",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "if _current == main then break end",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "cancelprocess(_current)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function process (task, att)\r\n  local p = setmetatable(att or {}, procmt)\r\n  thread[p] = create(task)\r\n  return p\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "local p = setmetatable(att or {}, procmt)",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "thread[p] = create(task)",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function current () return _current end",
    "type": "function"
  }, {
    "id": 64,
    "text": "function time (proc)\r\n  if proc == nil then return _time end\r\n  return events:get(checkprocess(proc))\r\nend",
    "type": "function"
  }, {
    "id": 65,
    "text": "if proc == nil then return _time end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "function idle (proc)\r\n  local p = checkprocess(proc)\r\n  return isidle[p] or events:get(p) == nil -- idle or not scheduled yet?\r\nend",
    "type": "function"
  }, {
    "id": 68,
    "text": "local p = checkprocess(proc)",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function hold (delay) yield(\"hold\", delay) end",
    "type": "function"
  }, {
    "id": 71,
    "text": "yield(\"hold\", delay)",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "function cancel (proc) yield(\"cancel\", proc) end",
    "type": "function"
  }, {
    "id": 73,
    "text": "yield(\"cancel\", proc)",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "function passivate () yield(\"cancel\", _current) end",
    "type": "function"
  }, {
    "id": 75,
    "text": "yield(\"cancel\", _current)",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "function activate (proc, d, after)\r\n  yield(\"activate\", proc, d, after)\r\nend",
    "type": "function"
  }, {
    "id": 77,
    "text": "yield(\"activate\", proc, d, after)",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "function wait (res, ...)\r\n  assert(res ~= nil, \"invalid resource\")\r\n  assert(type(res.into) == \"function\",\r\n      \"resource has invalid `into' method\")\r\n  res:into(_current, ...)\r\n  yield(\"cancel\", _current) -- passivate\r\nend",
    "type": "function"
  }, {
    "id": 80,
    "text": "assert(res ~= nil, \"invalid resource\")",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "assert(type(res.into) == \"function\",\r\n      \"resource has invalid `into' method\")",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "res:into(_current, ...)",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "function start (task)\r\n  events, isidle, main = heap(), {}, process(task)\r\n  events:insert(0, main)\r\n  local active, msg = resume(scheduler())\r\n  assert(active, msg)\r\n  if msg ~= nil then error(msg) end\r\nend",
    "type": "function"
  }, {
    "id": 85,
    "text": "events, isidle, main = heap(), {}, process(task)",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "events:insert(0, main)",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "local active, msg = resume(scheduler())",
    "type": "statement:localassign"
  }, {
    "id": 88,
    "text": "assert(active, msg)",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "if msg ~= nil then error(msg) end",
    "type": "statement:if"
  }, {
    "id": 90,
    "text": "error(msg)",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "function stop () yield(\"cancel\", main) end",
    "type": "function"
  }, {
    "id": 93,
    "text": "yield(\"cancel\", main)",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "function accumulator ()\r\n  return setmetatable({last = 0, mean = 0}, _acc)\r\nend",
    "type": "function"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "function()\r\n    while true do\r\n      if events:isempty() then break end\r\n      _time, _current = events:min()\r\n      local active, op, p, d, after = resume(thread[_current])\r\n      if not active then yield(op) end -- propagate error\r\n      if op ~= nil then\r\n        if op == \"hold\" then\r\n          if type(p) ~= \"number\" or p < 0 then p = 0 end\r\n          events:change(_current, _time + p) -- with priority\r\n        elseif op == \"cancel\" then\r\n          cancelprocess(checkprocess(p))\r\n        elseif op == \"activate\" then\r\n          -- set delay time\r\n          local delay\r\n          if d == nil then delay = 0\r\n          elseif type(d) == \"number\" then\r\n            delay = d >= 0 and d or 0\r\n          else -- process\r\n            d = checkprocess(d)\r\n            if not isidle[d] then\r\n              d = events:get(d) -- d's time\r\n              if d ~= nil then -- in event list?\r\n                delay = d - _time -- relative delay\r\n              end\r\n            end\r\n          end\r\n          p = checkprocess(p)\r\n          if delay == nil then\r\n            cancelprocess(p)\r\n          else\r\n            if isidle[p] or events:get(p) == nil then\r\n              events:insert(_time + delay, p, after)\r\n              isidle[p] = nil -- remove from idle set\r\n            else -- reactivate\r\n              events:change(p, _time + delay, after)\r\n            end\r\n          end\r\n        else -- failsafe\r\n          yield(\"unknown operation: \" .. op)\r\n        end\r\n      else\r\n        if _current == main then break end -- stop simulation\r\n        cancelprocess(_current) -- passivate\r\n      end\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 97,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 98,
    "text": "function(a, v, t)\r\n      local time = t or _time\r\n      assert(v ~= nil and type(v) == \"number\", \"invalid value to update\")\r\n      assert(type(time) == \"number\", \"invalid time to update\")\r\n      local last = a.last\r\n      a.mean = (a.mean * last + (time - last) * v) / time\r\n      a.last = time\r\n    end",
    "type": "function"
  }, {
    "id": 99,
    "text": "local time = t or _time",
    "type": "statement:localassign"
  }, {
    "id": 100,
    "text": "assert(v ~= nil and type(v) == \"number\", \"invalid value to update\")",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "assert(type(time) == \"number\", \"invalid time to update\")",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "local last = a.last",
    "type": "statement:localassign"
  }, {
    "id": 103,
    "text": "a.mean = (a.mean * last + (time - last) * v) / time",
    "type": "statement:assign"
  }, {
    "id": 104,
    "text": "a.last = time",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 106,
    "text": "",
    "type": "function container"
  }, {
    "id": 107,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 108,
    "text": "create",
    "type": "global function"
  }, {
    "id": 109,
    "text": "error",
    "type": "global function"
  }, {
    "id": 110,
    "text": "resume",
    "type": "global function"
  }, {
    "id": 111,
    "text": "yield",
    "type": "global function"
  }, {
    "id": 112,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 113,
    "text": "require",
    "type": "global function"
  }, {
    "id": 114,
    "text": "heap",
    "type": "global function"
  }, {
    "id": 115,
    "text": "module",
    "type": "global function"
  }, {
    "id": 116,
    "text": "type",
    "type": "global function"
  }, {
    "id": 117,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 118,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 119,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 120,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 121,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 122,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 123,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 124,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 125,
    "text": "",
    "type": "variable container"
  }, {
    "id": 126,
    "text": "",
    "type": "require container"
  }, {
    "id": 127,
    "text": "",
    "type": "local variable"
  }, {
    "id": 128,
    "text": "",
    "type": "n/a"
  }, {
    "id": 129,
    "text": "",
    "type": "local variable"
  }, {
    "id": 130,
    "text": "",
    "type": "n/a"
  }, {
    "id": 131,
    "text": "",
    "type": "local variable"
  }, {
    "id": 132,
    "text": "",
    "type": "n/a"
  }, {
    "id": 133,
    "text": "",
    "type": "local variable"
  }, {
    "id": 134,
    "text": "",
    "type": "n/a"
  }, {
    "id": 135,
    "text": "",
    "type": "local variable"
  }, {
    "id": 136,
    "text": "",
    "type": "n/a"
  }, {
    "id": 137,
    "text": "",
    "type": "local variable"
  }, {
    "id": 138,
    "text": "",
    "type": "n/a"
  }, {
    "id": 139,
    "text": "",
    "type": "local variable"
  }, {
    "id": 140,
    "text": "",
    "type": "n/a"
  }, {
    "id": 141,
    "text": "",
    "type": "local variable"
  }, {
    "id": 142,
    "text": "",
    "type": "n/a"
  }, {
    "id": 143,
    "text": "",
    "type": "local variable"
  }, {
    "id": 144,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 145,
    "text": "",
    "type": "local variable"
  }, {
    "id": 146,
    "text": "",
    "type": "n/a"
  }, {
    "id": 147,
    "text": "",
    "type": "local variable"
  }, {
    "id": 148,
    "text": "",
    "type": "local variable"
  }, {
    "id": 149,
    "text": "",
    "type": "local variable"
  }, {
    "id": 150,
    "text": "",
    "type": "local variable"
  }, {
    "id": 151,
    "text": "",
    "type": "local variable"
  }, {
    "id": 152,
    "text": "",
    "type": "local variable"
  }, {
    "id": 153,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 154,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 155,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 156,
    "text": "",
    "type": "global variable"
  }, {
    "id": 157,
    "text": "",
    "type": "n/a"
  }, {
    "id": 158,
    "text": "",
    "type": "global variable"
  }, {
    "id": 159,
    "text": "",
    "type": "n/a"
  }, {
    "id": 160,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 161,
    "text": "binomial",
    "type": "module"
  } ]
}