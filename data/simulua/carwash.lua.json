{
  "_filename": "carwash.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/simulua/examples/carwash.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 3,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 12,
    "label": "has",
    "to": 17
  }, {
    "from": 12,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 12,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 12,
    "label": "has",
    "to": 22
  }, {
    "from": 12,
    "label": "has",
    "to": 23
  }, {
    "from": 12,
    "label": "has",
    "to": 24
  }, {
    "from": 12,
    "label": "has",
    "to": 25
  }, {
    "from": 3,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 14
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 27,
    "label": "has",
    "to": 33
  }, {
    "from": 3,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 3,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 38,
    "label": "has",
    "to": 42
  }, {
    "from": 38,
    "label": "has",
    "to": 43
  }, {
    "from": 3,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 8
  }, {
    "from": 45,
    "label": "has",
    "to": 9
  }, {
    "from": 45,
    "label": "has",
    "to": 10
  }, {
    "from": 45,
    "label": "has",
    "to": 11
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 13
  }, {
    "from": 47,
    "label": "has",
    "to": 14
  }, {
    "from": 47,
    "label": "has",
    "to": 15
  }, {
    "from": 47,
    "label": "has",
    "to": 16
  }, {
    "from": 47,
    "label": "has",
    "to": 17
  }, {
    "from": 47,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 47,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 47,
    "label": "has",
    "to": 22
  }, {
    "from": 47,
    "label": "has",
    "to": 23
  }, {
    "from": 47,
    "label": "has",
    "to": 24
  }, {
    "from": 47,
    "label": "has",
    "to": 25
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 14
  }, {
    "from": 49,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 27,
    "label": "has",
    "to": 33
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 15
  }, {
    "from": 51,
    "label": "has",
    "to": 16
  }, {
    "from": 51,
    "label": "has",
    "to": 17
  }, {
    "from": 51,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 51,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 51,
    "label": "has",
    "to": 22
  }, {
    "from": 51,
    "label": "has",
    "to": 23
  }, {
    "from": 51,
    "label": "has",
    "to": 24
  }, {
    "from": 51,
    "label": "has",
    "to": 25
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 27,
    "label": "has",
    "to": 33
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 57,
    "label": "has",
    "to": 41
  }, {
    "from": 57,
    "label": "has",
    "to": 42
  }, {
    "from": 57,
    "label": "has",
    "to": 43
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 3,
    "label": "calls",
    "to": 61
  }, {
    "from": 3,
    "label": "calls",
    "to": 61
  }, {
    "from": 3,
    "label": "calls",
    "to": 61
  }, {
    "from": 3,
    "label": "calls",
    "to": 71
  }, {
    "from": 3,
    "label": "calls",
    "to": 47
  }, {
    "from": 3,
    "label": "calls",
    "to": 60
  }, {
    "from": 3,
    "label": "calls",
    "to": 60
  }, {
    "from": 3,
    "label": "calls",
    "to": 60
  }, {
    "from": 3,
    "label": "calls",
    "to": 68
  }, {
    "from": 3,
    "label": "calls",
    "to": 68
  }, {
    "from": 3,
    "label": "calls",
    "to": 69
  }, {
    "from": 3,
    "label": "calls",
    "to": 69
  }, {
    "from": 3,
    "label": "calls",
    "to": 69
  }, {
    "from": 3,
    "label": "calls",
    "to": 69
  }, {
    "from": 3,
    "label": "calls",
    "to": 63
  }, {
    "from": 3,
    "label": "calls",
    "to": 67
  }, {
    "from": 3,
    "label": "calls",
    "to": 67
  }, {
    "from": 3,
    "label": "calls",
    "to": 67
  }, {
    "from": 3,
    "label": "calls",
    "to": 67
  }, {
    "from": 3,
    "label": "calls",
    "to": 65
  }, {
    "from": 3,
    "label": "calls",
    "to": 45
  }, {
    "from": 3,
    "label": "calls",
    "to": 66
  }, {
    "from": 3,
    "label": "calls",
    "to": 62
  }, {
    "from": 3,
    "label": "calls",
    "to": 62
  }, {
    "from": 3,
    "label": "calls",
    "to": 62
  }, {
    "from": 3,
    "label": "calls",
    "to": 64
  }, {
    "from": 3,
    "label": "calls",
    "to": 64
  }, {
    "from": 3,
    "label": "calls",
    "to": 64
  }, {
    "from": 3,
    "label": "calls",
    "to": 64
  }, {
    "from": 59,
    "label": "calls",
    "to": 70
  }, {
    "from": 59,
    "label": "calls",
    "to": 70
  }, {
    "from": 59,
    "label": "calls",
    "to": 70
  }, {
    "from": 59,
    "label": "calls",
    "to": 3
  }, {
    "from": 59,
    "label": "calls",
    "to": 3
  }, {
    "from": 3,
    "label": "calls",
    "to": 49
  }, {
    "from": 1,
    "label": "contains",
    "to": 59
  }, {
    "from": 59,
    "label": "declares",
    "to": 3
  }, {
    "from": 59,
    "label": "declares",
    "to": 45
  }, {
    "from": 59,
    "label": "declares",
    "to": 47
  }, {
    "from": 59,
    "label": "declares",
    "to": 49
  }, {
    "from": 59,
    "label": "declares",
    "to": 51
  }, {
    "from": 59,
    "label": "declares",
    "to": 53
  }, {
    "from": 59,
    "label": "declares",
    "to": 55
  }, {
    "from": 59,
    "label": "declares",
    "to": 57
  }, {
    "from": 1,
    "label": "contains",
    "to": 72
  }, {
    "from": 1,
    "label": "contains",
    "to": 73
  }, {
    "from": 73,
    "label": "initializes",
    "to": 74
  }, {
    "from": 74,
    "label": "requires",
    "to": 2
  }, {
    "from": 73,
    "label": "initializes",
    "to": 75
  }, {
    "from": 75,
    "label": "requires",
    "to": 76
  }, {
    "from": 73,
    "label": "initializes",
    "to": 77
  }, {
    "from": 77,
    "label": "requires",
    "to": 78
  }, {
    "from": 79,
    "label": "requires",
    "to": 78
  }, {
    "from": 80,
    "label": "requires",
    "to": 76
  }, {
    "from": 81,
    "label": "requires",
    "to": 76
  }, {
    "from": 82,
    "label": "requires",
    "to": 78
  }, {
    "from": 83,
    "label": "requires",
    "to": 76
  }, {
    "from": 84,
    "label": "requires",
    "to": 76
  }, {
    "from": 85,
    "label": "requires",
    "to": 78
  }, {
    "from": 86,
    "label": "requires",
    "to": 76
  }, {
    "from": 38,
    "label": "hasArgument",
    "to": 57
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "carwash",
    "type": "module"
  }, {
    "id": 2,
    "text": "simulua",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function washingcars (p, n, simperiod, seed)\r\n  local tearoom, waitingline = queue(), queue()\r\n  local throughtime, ncustomers, maxlength = 0, 0, 0\r\n  local r = rng(seed)\r\n  local function report ()\r\n    print(string.format(\"%2d CAR WASHER SIMULATION\", n))\r\n    print(string.format(\"NO. OF CARS THROUGH THE SYSTEM=%6d\", ncustomers))\r\n    print(string.format(\"AV. ELAPSED TIME=%9.2f\", throughtime / ncustomers))\r\n    print(string.format(\"MAXIMUM QUEUE LENGTH=%4d\", maxlength))\r\n  end\r\n  -- processes\r\n  local function car ()\r\n    local self = {}\r\n    return simulua.process(function()\r\n      local entrytime = simulua.time()\r\n      waitingline:into(self)\r\n      local qlength = #waitingline\r\n      if maxlength < qlength then maxlength = qlength end\r\n      if not tearoom:isempty() then\r\n        simulua.activate(tearoom:front())\r\n      end\r\n      simulua.passivate()\r\n      local elapsedtime = simulua.time() - entrytime\r\n      ncustomers = ncustomers + 1\r\n      throughtime = throughtime + elapsedtime\r\n    end, self)\r\n  end\r\n  local function carwasher ()\r\n    return simulua.process(function()\r\n      while true do\r\n        tearoom:retrieve() -- self out\r\n        while not waitingline:isempty() do\r\n          local served = waitingline:retrieve()\r\n          simulua.hold(10)\r\n          simulua.activate(served)\r\n        end\r\n        simulua.wait(tearoom)\r\n      end\r\n    end)\r\n  end\r\n  local cargen = simulua.process(function()\r\n    while simulua.time() < simperiod do\r\n      simulua.activate(car())\r\n      simulua.hold(r:exp(p))\r\n    end\r\n  end)\r\n  -- simulation\r\n  simulua.start(function()\r\n    for i = 1, n do tearoom:into(carwasher()) end\r\n    simulua.activate(cargen)\r\n    simulua.hold(simperiod + 1e6)\r\n    report()\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local tearoom, waitingline = queue(), queue()",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local throughtime, ncustomers, maxlength = 0, 0, 0",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "local r = rng(seed)",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "local function report ()\r\n    print(string.format(\"%2d CAR WASHER SIMULATION\", n))\r\n    print(string.format(\"NO. OF CARS THROUGH THE SYSTEM=%6d\", ncustomers))\r\n    print(string.format(\"AV. ELAPSED TIME=%9.2f\", throughtime / ncustomers))\r\n    print(string.format(\"MAXIMUM QUEUE LENGTH=%4d\", maxlength))\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 8,
    "text": "print(string.format(\"%2d CAR WASHER SIMULATION\", n))",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "print(string.format(\"NO. OF CARS THROUGH THE SYSTEM=%6d\", ncustomers))",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "print(string.format(\"AV. ELAPSED TIME=%9.2f\", throughtime / ncustomers))",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "print(string.format(\"MAXIMUM QUEUE LENGTH=%4d\", maxlength))",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "local function car ()\r\n    local self = {}\r\n    return simulua.process(function()\r\n      local entrytime = simulua.time()\r\n      waitingline:into(self)\r\n      local qlength = #waitingline\r\n      if maxlength < qlength then maxlength = qlength end\r\n      if not tearoom:isempty() then\r\n        simulua.activate(tearoom:front())\r\n      end\r\n      simulua.passivate()\r\n      local elapsedtime = simulua.time() - entrytime\r\n      ncustomers = ncustomers + 1\r\n      throughtime = throughtime + elapsedtime\r\n    end, self)\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 13,
    "text": "local self = {}",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 15,
    "text": "local entrytime = simulua.time()",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "waitingline:into(self)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "local qlength = #waitingline",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "if maxlength < qlength then maxlength = qlength end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "maxlength = qlength",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "if not tearoom:isempty() then\r\n        simulua.activate(tearoom:front())\r\n      end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "simulua.activate(tearoom:front())",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "simulua.passivate()",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "local elapsedtime = simulua.time() - entrytime",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "ncustomers = ncustomers + 1",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "throughtime = throughtime + elapsedtime",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "local function carwasher ()\r\n    return simulua.process(function()\r\n      while true do\r\n        tearoom:retrieve() -- self out\r\n        while not waitingline:isempty() do\r\n          local served = waitingline:retrieve()\r\n          simulua.hold(10)\r\n          simulua.activate(served)\r\n        end\r\n        simulua.wait(tearoom)\r\n      end\r\n    end)\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 27,
    "text": "while true do\r\n        tearoom:retrieve() -- self out\r\n        while not waitingline:isempty() do\r\n          local served = waitingline:retrieve()\r\n          simulua.hold(10)\r\n          simulua.activate(served)\r\n        end\r\n        simulua.wait(tearoom)\r\n      end",
    "type": "statement:while"
  }, {
    "id": 28,
    "text": "tearoom:retrieve()",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "while not waitingline:isempty() do\r\n          local served = waitingline:retrieve()\r\n          simulua.hold(10)\r\n          simulua.activate(served)\r\n        end",
    "type": "statement:while"
  }, {
    "id": 30,
    "text": "local served = waitingline:retrieve()",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "simulua.hold(10)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "simulua.activate(served)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "simulua.wait(tearoom)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "local cargen = simulua.process(function()\r\n    while simulua.time() < simperiod do\r\n      simulua.activate(car())\r\n      simulua.hold(r:exp(p))\r\n    end\r\n  end)",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "while simulua.time() < simperiod do\r\n      simulua.activate(car())\r\n      simulua.hold(r:exp(p))\r\n    end",
    "type": "statement:while"
  }, {
    "id": 36,
    "text": "simulua.activate(car())",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "simulua.hold(r:exp(p))",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "simulua.start(function()\r\n    for i = 1, n do tearoom:into(carwasher()) end\r\n    simulua.activate(cargen)\r\n    simulua.hold(simperiod + 1e6)\r\n    report()\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "for i = 1, n do tearoom:into(carwasher()) end",
    "type": "statement:numericfor"
  }, {
    "id": 40,
    "text": "tearoom:into(carwasher())",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "simulua.activate(cargen)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "simulua.hold(simperiod + 1e6)",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "report()",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "local function report ()\r\n    print(string.format(\"%2d CAR WASHER SIMULATION\", n))\r\n    print(string.format(\"NO. OF CARS THROUGH THE SYSTEM=%6d\", ncustomers))\r\n    print(string.format(\"AV. ELAPSED TIME=%9.2f\", throughtime / ncustomers))\r\n    print(string.format(\"MAXIMUM QUEUE LENGTH=%4d\", maxlength))\r\n  end",
    "type": "function"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "local function car ()\r\n    local self = {}\r\n    return simulua.process(function()\r\n      local entrytime = simulua.time()\r\n      waitingline:into(self)\r\n      local qlength = #waitingline\r\n      if maxlength < qlength then maxlength = qlength end\r\n      if not tearoom:isempty() then\r\n        simulua.activate(tearoom:front())\r\n      end\r\n      simulua.passivate()\r\n      local elapsedtime = simulua.time() - entrytime\r\n      ncustomers = ncustomers + 1\r\n      throughtime = throughtime + elapsedtime\r\n    end, self)\r\n  end",
    "type": "function"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "local function carwasher ()\r\n    return simulua.process(function()\r\n      while true do\r\n        tearoom:retrieve() -- self out\r\n        while not waitingline:isempty() do\r\n          local served = waitingline:retrieve()\r\n          simulua.hold(10)\r\n          simulua.activate(served)\r\n        end\r\n        simulua.wait(tearoom)\r\n      end\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "function()\r\n      local entrytime = simulua.time()\r\n      waitingline:into(self)\r\n      local qlength = #waitingline\r\n      if maxlength < qlength then maxlength = qlength end\r\n      if not tearoom:isempty() then\r\n        simulua.activate(tearoom:front())\r\n      end\r\n      simulua.passivate()\r\n      local elapsedtime = simulua.time() - entrytime\r\n      ncustomers = ncustomers + 1\r\n      throughtime = throughtime + elapsedtime\r\n    end",
    "type": "function"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function()\r\n      while true do\r\n        tearoom:retrieve() -- self out\r\n        while not waitingline:isempty() do\r\n          local served = waitingline:retrieve()\r\n          simulua.hold(10)\r\n          simulua.activate(served)\r\n        end\r\n        simulua.wait(tearoom)\r\n      end\r\n    end",
    "type": "function"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "function()\r\n    while simulua.time() < simperiod do\r\n      simulua.activate(car())\r\n      simulua.hold(r:exp(p))\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function()\r\n    for i = 1, n do tearoom:into(carwasher()) end\r\n    simulua.activate(cargen)\r\n    simulua.hold(simperiod + 1e6)\r\n    report()\r\n  end",
    "type": "function"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "",
    "type": "function container"
  }, {
    "id": 60,
    "text": "function process (task, att)\r\n  local p = setmetatable(att or {}, procmt)\r\n  thread[p] = create(task)\r\n  return p\r\nend",
    "type": "function"
  }, {
    "id": 61,
    "text": "function time (proc)\r\n  if proc == nil then return _time end\r\n  return events:get(checkprocess(proc))\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "function hold (delay) yield(\"hold\", delay) end",
    "type": "function"
  }, {
    "id": 63,
    "text": "function passivate () yield(\"cancel\", _current) end",
    "type": "function"
  }, {
    "id": 64,
    "text": "function activate (proc, d, after)\r\n  yield(\"activate\", proc, d, after)\r\nend",
    "type": "function"
  }, {
    "id": 65,
    "text": "function wait (res, ...)\r\n  assert(res ~= nil, \"invalid resource\")\r\n  assert(type(res.into) == \"function\",\r\n      \"resource has invalid `into' method\")\r\n  res:into(_current, ...)\r\n  yield(\"cancel\", _current) -- passivate\r\nend",
    "type": "function"
  }, {
    "id": 66,
    "text": "function start (task)\r\n  events, isidle, main = heap(), {}, process(task)\r\n  events:insert(0, main)\r\n  local active, msg = resume(scheduler())\r\n  assert(active, msg)\r\n  if msg ~= nil then error(msg) end\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "format",
    "type": "global function"
  }, {
    "id": 68,
    "text": "queue",
    "type": "global function"
  }, {
    "id": 69,
    "text": "print",
    "type": "global function"
  }, {
    "id": 70,
    "text": "require",
    "type": "global function"
  }, {
    "id": 71,
    "text": "rng",
    "type": "global function"
  }, {
    "id": 72,
    "text": "",
    "type": "variable container"
  }, {
    "id": 73,
    "text": "",
    "type": "require container"
  }, {
    "id": 74,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 75,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 76,
    "text": "queue",
    "type": "module"
  }, {
    "id": 77,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 78,
    "text": "rng",
    "type": "module"
  }, {
    "id": 79,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 80,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 81,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 82,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 83,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 84,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 85,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 86,
    "text": "",
    "type": "require local variable"
  } ]
}