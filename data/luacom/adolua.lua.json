{
  "_filename": "adolua.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luacom/demo/ado/adolua.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 8,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 13,
    "label": "has",
    "to": 18
  }, {
    "from": 13,
    "label": "has",
    "to": 18
  }, {
    "from": 13,
    "label": "has",
    "to": 18
  }, {
    "from": 13,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 13,
    "label": "has",
    "to": 22
  }, {
    "from": 13,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 18
  }, {
    "from": 24,
    "label": "has",
    "to": 18
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 18
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 24,
    "label": "has",
    "to": 29
  }, {
    "from": 24,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 30,
    "label": "has",
    "to": 34
  }, {
    "from": 24,
    "label": "has",
    "to": 35
  }, {
    "from": 24,
    "label": "has",
    "to": 18
  }, {
    "from": 24,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "calls",
    "to": 41
  }, {
    "from": 2,
    "label": "calls",
    "to": 39
  }, {
    "from": 13,
    "label": "calls",
    "to": 39
  }, {
    "from": 2,
    "label": "calls",
    "to": 40
  }, {
    "from": 1,
    "label": "contains",
    "to": 37
  }, {
    "from": 37,
    "label": "declares",
    "to": 2
  }, {
    "from": 37,
    "label": "declares",
    "to": 8
  }, {
    "from": 37,
    "label": "declares",
    "to": 13
  }, {
    "from": 37,
    "label": "declares",
    "to": 24
  }, {
    "from": 1,
    "label": "contains",
    "to": 42
  }, {
    "from": 1,
    "label": "contains",
    "to": 43
  }, {
    "from": 43,
    "label": "initializes",
    "to": 44
  }, {
    "from": 44,
    "label": "requires",
    "to": 45
  }, {
    "from": 46,
    "label": "initializes",
    "to": 44
  }, {
    "from": 44,
    "label": "requires",
    "to": 38
  }, {
    "from": 47,
    "label": "initializes",
    "to": 44
  }, {
    "from": 44,
    "label": "requires",
    "to": 45
  }, {
    "from": 48,
    "label": "initializes",
    "to": 44
  }, {
    "from": 44,
    "label": "requires",
    "to": 45
  }, {
    "from": 49,
    "label": "initializes",
    "to": 44
  }, {
    "from": 44,
    "label": "requires",
    "to": 45
  }, {
    "from": 50,
    "label": "initializes",
    "to": 44
  }, {
    "from": 44,
    "label": "requires",
    "to": 38
  }, {
    "from": 51,
    "label": "initializes",
    "to": 44
  }, {
    "from": 44,
    "label": "requires",
    "to": 45
  }, {
    "from": 52,
    "label": "initializes",
    "to": 44
  }, {
    "from": 44,
    "label": "requires",
    "to": 38
  }, {
    "from": 53,
    "label": "initializes",
    "to": 44
  }, {
    "from": 44,
    "label": "requires",
    "to": 45
  }, {
    "from": 54,
    "label": "initializes",
    "to": 44
  }, {
    "from": 44,
    "label": "requires",
    "to": 45
  }, {
    "from": 55,
    "label": "initializes",
    "to": 44
  }, {
    "from": 44,
    "label": "requires",
    "to": 45
  }, {
    "from": 56,
    "label": "initializes",
    "to": 44
  }, {
    "from": 44,
    "label": "requires",
    "to": 38
  }, {
    "from": 57,
    "label": "initializes",
    "to": 44
  }, {
    "from": 44,
    "label": "requires",
    "to": 45
  }, {
    "from": 58,
    "label": "initializes",
    "to": 44
  }, {
    "from": 44,
    "label": "requires",
    "to": 45
  }, {
    "from": 59,
    "label": "initializes",
    "to": 44
  }, {
    "from": 44,
    "label": "requires",
    "to": 38
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "adolua",
    "type": "module"
  }, {
    "id": 2,
    "text": "function DBOpen(connection_string)\r\n  dblua_data.connection = luacom.CreateObject(\"ADODB.Connection\")\r\n\r\n  assert(dblua_data.connection)\r\n\r\n\r\n  dblua_data.connection.ConnectionString = connection_string\r\n  dblua_data.connection:Open()\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "dblua_data.connection = luacom.CreateObject(\"ADODB.Connection\")",
    "type": "statement:assign"
  }, {
    "id": 4,
    "text": "assert(dblua_data.connection)",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "dblua_data.connection.ConnectionString = connection_string",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "dblua_data.connection:Open()",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function DBClose()\r\n  dblua_data.connection:Close()\r\n  dblua_data.connection = nil\r\n  dblua_data.recordset = nil\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "dblua_data.connection:Close()",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "dblua_data.connection = nil",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "dblua_data.recordset = nil",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function DBExec(statement)\r\n\r\n  if statement == \"%BEGIN\" then\r\n    dblua_data.connection:BeginTrans()\r\n    return\r\n  elseif statement == \"%COMMIT\" then\r\n    dblua_data.connection:CommitTrans()\r\n    return\r\n  elseif statement == \"%ROLLBACK\" then\r\n    dblua_data.connection:RollbackTrans()\r\n    return\r\n  end\r\n\r\n  if dblua_data.recordset == nil then\r\n    dblua_data.recordset = luacom.CreateObject(\"ADODB.RecordSet\")\r\n  elseif dblua_data.recordset.State ~= 0 then\r\n    dblua_data.recordset:Close()\r\n  end\r\n\r\n  dblua_data.recordset:Open(statement, dblua_data.connection)\r\n\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "if statement == \"%BEGIN\" then\r\n    dblua_data.connection:BeginTrans()\r\n    return\r\n  elseif statement == \"%COMMIT\" then\r\n    dblua_data.connection:CommitTrans()\r\n    return\r\n  elseif statement == \"%ROLLBACK\" then\r\n    dblua_data.connection:RollbackTrans()\r\n    return\r\n  end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "dblua_data.connection:BeginTrans()",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "dblua_data.connection:CommitTrans()",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "dblua_data.connection:RollbackTrans()",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 19,
    "text": "if dblua_data.recordset == nil then\r\n    dblua_data.recordset = luacom.CreateObject(\"ADODB.RecordSet\")\r\n  elseif dblua_data.recordset.State ~= 0 then\r\n    dblua_data.recordset:Close()\r\n  end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "dblua_data.recordset = luacom.CreateObject(\"ADODB.RecordSet\")",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "dblua_data.recordset:Close()",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "dblua_data.recordset:Open(statement, dblua_data.connection)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function DBRow()\r\n\r\n  if dblua_data.recordset == nil then\r\n    return nil\r\n  elseif dblua_data.recordset.ActiveConnection == nil then\r\n    return nil\r\n  end\r\n\r\n  if dblua_data.recordset.EOF == true then\r\n    return nil\r\n  end\r\n\r\n  local row = {}\r\n  local fields = dblua_data.recordset.Fields\r\n  local i = 0\r\n\r\n  while i < fields.Count do\r\n  \r\n    local field = fields:Item(i)\r\n    row[i] = field.Value\r\n    row[field.Name] = field.Value\r\n\r\n    i = i + 1\r\n  end\r\n\r\n  dblua_data.recordset:MoveNext()\r\n\r\n  return row\r\n  \r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "if dblua_data.recordset == nil then\r\n    return nil\r\n  elseif dblua_data.recordset.ActiveConnection == nil then\r\n    return nil\r\n  end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "if dblua_data.recordset.EOF == true then\r\n    return nil\r\n  end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "local row = {}",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "local fields = dblua_data.recordset.Fields",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "local i = 0",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "while i < fields.Count do\r\n  \r\n    local field = fields:Item(i)\r\n    row[i] = field.Value\r\n    row[field.Name] = field.Value\r\n\r\n    i = i + 1\r\n  end",
    "type": "statement:while"
  }, {
    "id": 31,
    "text": "local field = fields:Item(i)",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "row[i] = field.Value",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "row[field.Name] = field.Value",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "dblua_data.recordset:MoveNext()",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "",
    "type": "function container"
  }, {
    "id": 38,
    "text": "luacom",
    "type": "module"
  }, {
    "id": 39,
    "text": "CreateObject",
    "type": "global function"
  }, {
    "id": 40,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 41,
    "text": "require",
    "type": "global function"
  }, {
    "id": 42,
    "text": "",
    "type": "variable container"
  }, {
    "id": 43,
    "text": "",
    "type": "require container"
  }, {
    "id": 44,
    "text": "",
    "type": "global variable"
  }, {
    "id": 45,
    "text": "(luacom)",
    "type": "module"
  }, {
    "id": 46,
    "text": "",
    "type": "require container"
  }, {
    "id": 47,
    "text": "",
    "type": "require container"
  }, {
    "id": 48,
    "text": "",
    "type": "require container"
  }, {
    "id": 49,
    "text": "",
    "type": "require container"
  }, {
    "id": 50,
    "text": "",
    "type": "require container"
  }, {
    "id": 51,
    "text": "",
    "type": "require container"
  }, {
    "id": 52,
    "text": "",
    "type": "require container"
  }, {
    "id": 53,
    "text": "",
    "type": "require container"
  }, {
    "id": 54,
    "text": "",
    "type": "require container"
  }, {
    "id": 55,
    "text": "",
    "type": "require container"
  }, {
    "id": 56,
    "text": "",
    "type": "require container"
  }, {
    "id": 57,
    "text": "",
    "type": "require container"
  }, {
    "id": 58,
    "text": "",
    "type": "require container"
  }, {
    "id": 59,
    "text": "",
    "type": "require container"
  } ]
}