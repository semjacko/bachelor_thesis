{
  "_filename": "luacom5.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luacom/src/library/luacom5.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 13
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 17,
    "label": "has",
    "to": 13
  }, {
    "from": 17,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 13
  }, {
    "from": 22,
    "label": "has",
    "to": 13
  }, {
    "from": 17,
    "label": "has",
    "to": 13
  }, {
    "from": 17,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 23
  }, {
    "from": 26,
    "label": "has",
    "to": 24
  }, {
    "from": 26,
    "label": "has",
    "to": 13
  }, {
    "from": 26,
    "label": "has",
    "to": 13
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 13
  }, {
    "from": 28,
    "label": "has",
    "to": 13
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 35,
    "label": "has",
    "to": 39
  }, {
    "from": 33,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 32,
    "label": "has",
    "to": 42
  }, {
    "from": 32,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 34
  }, {
    "from": 44,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 35,
    "label": "has",
    "to": 39
  }, {
    "from": 44,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 13
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 46,
    "label": "has",
    "to": 49
  }, {
    "from": 46,
    "label": "has",
    "to": 50
  }, {
    "from": 46,
    "label": "has",
    "to": 51
  }, {
    "from": 46,
    "label": "has",
    "to": 52
  }, {
    "from": 46,
    "label": "has",
    "to": 53
  }, {
    "from": 46,
    "label": "has",
    "to": 54
  }, {
    "from": 46,
    "label": "has",
    "to": 55
  }, {
    "from": 46,
    "label": "has",
    "to": 56
  }, {
    "from": 46,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 46,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 59,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 62,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 65,
    "label": "has",
    "to": 68
  }, {
    "from": 65,
    "label": "has",
    "to": 69
  }, {
    "from": 65,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 65,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 75,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 75,
    "label": "has",
    "to": 81
  }, {
    "from": 73,
    "label": "has",
    "to": 82
  }, {
    "from": 65,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 83,
    "label": "has",
    "to": 85
  }, {
    "from": 65,
    "label": "has",
    "to": 86
  }, {
    "from": 65,
    "label": "has",
    "to": 87
  }, {
    "from": 46,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 88,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 91,
    "label": "has",
    "to": 94
  }, {
    "from": 91,
    "label": "has",
    "to": 95
  }, {
    "from": 91,
    "label": "has",
    "to": 96
  }, {
    "from": 46,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 99,
    "label": "has",
    "to": 102
  }, {
    "from": 99,
    "label": "has",
    "to": 103
  }, {
    "from": 99,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 99,
    "label": "has",
    "to": 106
  }, {
    "from": 46,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 107,
    "label": "has",
    "to": 109
  }, {
    "from": 107,
    "label": "has",
    "to": 110
  }, {
    "from": 107,
    "label": "has",
    "to": 111
  }, {
    "from": 107,
    "label": "has",
    "to": 112
  }, {
    "from": 107,
    "label": "has",
    "to": 113
  }, {
    "from": 46,
    "label": "has",
    "to": 13
  }, {
    "from": 46,
    "label": "has",
    "to": 114
  }, {
    "from": 115,
    "label": "has",
    "to": 60
  }, {
    "from": 115,
    "label": "has",
    "to": 61
  }, {
    "from": 115,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 62,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 65,
    "label": "has",
    "to": 68
  }, {
    "from": 65,
    "label": "has",
    "to": 69
  }, {
    "from": 65,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 65,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 75,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 75,
    "label": "has",
    "to": 81
  }, {
    "from": 73,
    "label": "has",
    "to": 82
  }, {
    "from": 65,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 83,
    "label": "has",
    "to": 85
  }, {
    "from": 65,
    "label": "has",
    "to": 86
  }, {
    "from": 65,
    "label": "has",
    "to": 87
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 117,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 117,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 117,
    "label": "has",
    "to": 81
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 119,
    "label": "has",
    "to": 89
  }, {
    "from": 119,
    "label": "has",
    "to": 90
  }, {
    "from": 119,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 91,
    "label": "has",
    "to": 94
  }, {
    "from": 91,
    "label": "has",
    "to": 95
  }, {
    "from": 91,
    "label": "has",
    "to": 96
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 121,
    "label": "has",
    "to": 98
  }, {
    "from": 121,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 99,
    "label": "has",
    "to": 102
  }, {
    "from": 99,
    "label": "has",
    "to": 103
  }, {
    "from": 99,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 99,
    "label": "has",
    "to": 106
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 123,
    "label": "has",
    "to": 13
  }, {
    "from": 123,
    "label": "has",
    "to": 125
  }, {
    "from": 123,
    "label": "has",
    "to": 126
  }, {
    "from": 123,
    "label": "has",
    "to": 127
  }, {
    "from": 123,
    "label": "has",
    "to": 128
  }, {
    "from": 123,
    "label": "has",
    "to": 129
  }, {
    "from": 123,
    "label": "has",
    "to": 130
  }, {
    "from": 123,
    "label": "has",
    "to": 131
  }, {
    "from": 123,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 132,
    "label": "has",
    "to": 134
  }, {
    "from": 132,
    "label": "has",
    "to": 135
  }, {
    "from": 123,
    "label": "has",
    "to": 13
  }, {
    "from": 123,
    "label": "has",
    "to": 136
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 137,
    "label": "has",
    "to": 139
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 139,
    "label": "has",
    "to": 141
  }, {
    "from": 139,
    "label": "has",
    "to": 4
  }, {
    "from": 139,
    "label": "has",
    "to": 142
  }, {
    "from": 139,
    "label": "has",
    "to": 142
  }, {
    "from": 137,
    "label": "has",
    "to": 143
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 137,
    "label": "has",
    "to": 145
  }, {
    "from": 137,
    "label": "has",
    "to": 146
  }, {
    "from": 137,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 147,
    "label": "has",
    "to": 149
  }, {
    "from": 137,
    "label": "has",
    "to": 150
  }, {
    "from": 137,
    "label": "has",
    "to": 151
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 137,
    "label": "has",
    "to": 153
  }, {
    "from": 137,
    "label": "has",
    "to": 154
  }, {
    "from": 137,
    "label": "has",
    "to": 155
  }, {
    "from": 137,
    "label": "has",
    "to": 156
  }, {
    "from": 137,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 157,
    "label": "has",
    "to": 159
  }, {
    "from": 137,
    "label": "has",
    "to": 160
  }, {
    "from": 137,
    "label": "has",
    "to": 161
  }, {
    "from": 137,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 157,
    "label": "has",
    "to": 159
  }, {
    "from": 137,
    "label": "has",
    "to": 162
  }, {
    "from": 137,
    "label": "has",
    "to": 163
  }, {
    "from": 137,
    "label": "has",
    "to": 164
  }, {
    "from": 137,
    "label": "has",
    "to": 165
  }, {
    "from": 137,
    "label": "has",
    "to": 166
  }, {
    "from": 166,
    "label": "has",
    "to": 167
  }, {
    "from": 166,
    "label": "has",
    "to": 168
  }, {
    "from": 166,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 169,
    "label": "has",
    "to": 171
  }, {
    "from": 166,
    "label": "has",
    "to": 172
  }, {
    "from": 166,
    "label": "has",
    "to": 173
  }, {
    "from": 166,
    "label": "has",
    "to": 174
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 166,
    "label": "has",
    "to": 176
  }, {
    "from": 137,
    "label": "has",
    "to": 177
  }, {
    "from": 177,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 179,
    "label": "has",
    "to": 180
  }, {
    "from": 177,
    "label": "has",
    "to": 181
  }, {
    "from": 137,
    "label": "has",
    "to": 182
  }, {
    "from": 137,
    "label": "has",
    "to": 183
  }, {
    "from": 137,
    "label": "has",
    "to": 184
  }, {
    "from": 137,
    "label": "has",
    "to": 185
  }, {
    "from": 137,
    "label": "has",
    "to": 186
  }, {
    "from": 137,
    "label": "has",
    "to": 187
  }, {
    "from": 137,
    "label": "has",
    "to": 188
  }, {
    "from": 137,
    "label": "has",
    "to": 164
  }, {
    "from": 137,
    "label": "has",
    "to": 189
  }, {
    "from": 137,
    "label": "has",
    "to": 190
  }, {
    "from": 137,
    "label": "has",
    "to": 191
  }, {
    "from": 191,
    "label": "has",
    "to": 192
  }, {
    "from": 191,
    "label": "has",
    "to": 193
  }, {
    "from": 191,
    "label": "has",
    "to": 13
  }, {
    "from": 191,
    "label": "has",
    "to": 194
  }, {
    "from": 191,
    "label": "has",
    "to": 195
  }, {
    "from": 191,
    "label": "has",
    "to": 171
  }, {
    "from": 191,
    "label": "has",
    "to": 196
  }, {
    "from": 191,
    "label": "has",
    "to": 197
  }, {
    "from": 197,
    "label": "has",
    "to": 198
  }, {
    "from": 191,
    "label": "has",
    "to": 199
  }, {
    "from": 191,
    "label": "has",
    "to": 200
  }, {
    "from": 191,
    "label": "has",
    "to": 201
  }, {
    "from": 201,
    "label": "has",
    "to": 202
  }, {
    "from": 202,
    "label": "has",
    "to": 203
  }, {
    "from": 202,
    "label": "has",
    "to": 203
  }, {
    "from": 201,
    "label": "has",
    "to": 204
  }, {
    "from": 204,
    "label": "has",
    "to": 205
  }, {
    "from": 204,
    "label": "has",
    "to": 205
  }, {
    "from": 191,
    "label": "has",
    "to": 206
  }, {
    "from": 206,
    "label": "has",
    "to": 207
  }, {
    "from": 207,
    "label": "has",
    "to": 208
  }, {
    "from": 207,
    "label": "has",
    "to": 209
  }, {
    "from": 206,
    "label": "has",
    "to": 210
  }, {
    "from": 191,
    "label": "has",
    "to": 211
  }, {
    "from": 211,
    "label": "has",
    "to": 212
  }, {
    "from": 212,
    "label": "has",
    "to": 213
  }, {
    "from": 212,
    "label": "has",
    "to": 214
  }, {
    "from": 211,
    "label": "has",
    "to": 215
  }, {
    "from": 191,
    "label": "has",
    "to": 216
  }, {
    "from": 216,
    "label": "has",
    "to": 217
  }, {
    "from": 191,
    "label": "has",
    "to": 218
  }, {
    "from": 218,
    "label": "has",
    "to": 219
  }, {
    "from": 191,
    "label": "has",
    "to": 220
  }, {
    "from": 220,
    "label": "has",
    "to": 221
  }, {
    "from": 137,
    "label": "has",
    "to": 222
  }, {
    "from": 137,
    "label": "has",
    "to": 184
  }, {
    "from": 137,
    "label": "has",
    "to": 223
  }, {
    "from": 137,
    "label": "has",
    "to": 224
  }, {
    "from": 224,
    "label": "has",
    "to": 225
  }, {
    "from": 224,
    "label": "has",
    "to": 194
  }, {
    "from": 224,
    "label": "has",
    "to": 195
  }, {
    "from": 224,
    "label": "has",
    "to": 171
  }, {
    "from": 224,
    "label": "has",
    "to": 196
  }, {
    "from": 224,
    "label": "has",
    "to": 226
  }, {
    "from": 226,
    "label": "has",
    "to": 198
  }, {
    "from": 224,
    "label": "has",
    "to": 227
  }, {
    "from": 227,
    "label": "has",
    "to": 167
  }, {
    "from": 227,
    "label": "has",
    "to": 228
  }, {
    "from": 227,
    "label": "has",
    "to": 176
  }, {
    "from": 224,
    "label": "has",
    "to": 229
  }, {
    "from": 224,
    "label": "has",
    "to": 230
  }, {
    "from": 224,
    "label": "has",
    "to": 231
  }, {
    "from": 137,
    "label": "has",
    "to": 232
  }, {
    "from": 137,
    "label": "has",
    "to": 186
  }, {
    "from": 137,
    "label": "has",
    "to": 233
  }, {
    "from": 137,
    "label": "has",
    "to": 234
  }, {
    "from": 234,
    "label": "has",
    "to": 235
  }, {
    "from": 234,
    "label": "has",
    "to": 194
  }, {
    "from": 234,
    "label": "has",
    "to": 195
  }, {
    "from": 234,
    "label": "has",
    "to": 171
  }, {
    "from": 234,
    "label": "has",
    "to": 196
  }, {
    "from": 234,
    "label": "has",
    "to": 199
  }, {
    "from": 234,
    "label": "has",
    "to": 236
  }, {
    "from": 236,
    "label": "has",
    "to": 237
  }, {
    "from": 236,
    "label": "has",
    "to": 238
  }, {
    "from": 238,
    "label": "has",
    "to": 74
  }, {
    "from": 238,
    "label": "has",
    "to": 239
  }, {
    "from": 239,
    "label": "has",
    "to": 240
  }, {
    "from": 240,
    "label": "has",
    "to": 241
  }, {
    "from": 240,
    "label": "has",
    "to": 242
  }, {
    "from": 242,
    "label": "has",
    "to": 243
  }, {
    "from": 242,
    "label": "has",
    "to": 244
  }, {
    "from": 244,
    "label": "has",
    "to": 245
  }, {
    "from": 242,
    "label": "has",
    "to": 246
  }, {
    "from": 242,
    "label": "has",
    "to": 247
  }, {
    "from": 240,
    "label": "has",
    "to": 248
  }, {
    "from": 248,
    "label": "has",
    "to": 249
  }, {
    "from": 240,
    "label": "has",
    "to": 250
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 250,
    "label": "has",
    "to": 77
  }, {
    "from": 250,
    "label": "has",
    "to": 252
  }, {
    "from": 238,
    "label": "has",
    "to": 13
  }, {
    "from": 236,
    "label": "has",
    "to": 253
  }, {
    "from": 253,
    "label": "has",
    "to": 254
  }, {
    "from": 253,
    "label": "has",
    "to": 13
  }, {
    "from": 253,
    "label": "has",
    "to": 255
  }, {
    "from": 255,
    "label": "has",
    "to": 256
  }, {
    "from": 256,
    "label": "has",
    "to": 257
  }, {
    "from": 256,
    "label": "has",
    "to": 258
  }, {
    "from": 256,
    "label": "has",
    "to": 259
  }, {
    "from": 255,
    "label": "has",
    "to": 260
  }, {
    "from": 253,
    "label": "has",
    "to": 13
  }, {
    "from": 236,
    "label": "has",
    "to": 261
  }, {
    "from": 261,
    "label": "has",
    "to": 262
  }, {
    "from": 262,
    "label": "has",
    "to": 263
  }, {
    "from": 262,
    "label": "has",
    "to": 264
  }, {
    "from": 262,
    "label": "has",
    "to": 265
  }, {
    "from": 262,
    "label": "has",
    "to": 266
  }, {
    "from": 262,
    "label": "has",
    "to": 267
  }, {
    "from": 261,
    "label": "has",
    "to": 268
  }, {
    "from": 268,
    "label": "has",
    "to": 269
  }, {
    "from": 268,
    "label": "has",
    "to": 270
  }, {
    "from": 268,
    "label": "has",
    "to": 271
  }, {
    "from": 268,
    "label": "has",
    "to": 266
  }, {
    "from": 268,
    "label": "has",
    "to": 267
  }, {
    "from": 261,
    "label": "has",
    "to": 272
  }, {
    "from": 272,
    "label": "has",
    "to": 273
  }, {
    "from": 272,
    "label": "has",
    "to": 274
  }, {
    "from": 272,
    "label": "has",
    "to": 275
  }, {
    "from": 272,
    "label": "has",
    "to": 276
  }, {
    "from": 272,
    "label": "has",
    "to": 277
  }, {
    "from": 272,
    "label": "has",
    "to": 278
  }, {
    "from": 278,
    "label": "has",
    "to": 275
  }, {
    "from": 261,
    "label": "has",
    "to": 279
  }, {
    "from": 261,
    "label": "has",
    "to": 266
  }, {
    "from": 261,
    "label": "has",
    "to": 280
  }, {
    "from": 234,
    "label": "has",
    "to": 281
  }, {
    "from": 281,
    "label": "has",
    "to": 282
  }, {
    "from": 281,
    "label": "has",
    "to": 13
  }, {
    "from": 281,
    "label": "has",
    "to": 167
  }, {
    "from": 281,
    "label": "has",
    "to": 283
  }, {
    "from": 281,
    "label": "has",
    "to": 284
  }, {
    "from": 284,
    "label": "has",
    "to": 285
  }, {
    "from": 284,
    "label": "has",
    "to": 286
  }, {
    "from": 281,
    "label": "has",
    "to": 287
  }, {
    "from": 287,
    "label": "has",
    "to": 288
  }, {
    "from": 281,
    "label": "has",
    "to": 289
  }, {
    "from": 281,
    "label": "has",
    "to": 290
  }, {
    "from": 281,
    "label": "has",
    "to": 176
  }, {
    "from": 234,
    "label": "has",
    "to": 229
  }, {
    "from": 234,
    "label": "has",
    "to": 291
  }, {
    "from": 234,
    "label": "has",
    "to": 231
  }, {
    "from": 137,
    "label": "has",
    "to": 292
  }, {
    "from": 137,
    "label": "has",
    "to": 188
  }, {
    "from": 137,
    "label": "has",
    "to": 293
  }, {
    "from": 137,
    "label": "has",
    "to": 294
  }, {
    "from": 137,
    "label": "has",
    "to": 13
  }, {
    "from": 137,
    "label": "has",
    "to": 295
  }, {
    "from": 296,
    "label": "has",
    "to": 167
  }, {
    "from": 296,
    "label": "has",
    "to": 168
  }, {
    "from": 296,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 169,
    "label": "has",
    "to": 171
  }, {
    "from": 296,
    "label": "has",
    "to": 172
  }, {
    "from": 296,
    "label": "has",
    "to": 173
  }, {
    "from": 296,
    "label": "has",
    "to": 174
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 296,
    "label": "has",
    "to": 176
  }, {
    "from": 296,
    "label": "has",
    "to": 297
  }, {
    "from": 298,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 179,
    "label": "has",
    "to": 180
  }, {
    "from": 298,
    "label": "has",
    "to": 181
  }, {
    "from": 298,
    "label": "has",
    "to": 299
  }, {
    "from": 300,
    "label": "has",
    "to": 179
  }, {
    "from": 179,
    "label": "has",
    "to": 180
  }, {
    "from": 300,
    "label": "has",
    "to": 301
  }, {
    "from": 302,
    "label": "has",
    "to": 192
  }, {
    "from": 302,
    "label": "has",
    "to": 193
  }, {
    "from": 302,
    "label": "has",
    "to": 13
  }, {
    "from": 302,
    "label": "has",
    "to": 194
  }, {
    "from": 302,
    "label": "has",
    "to": 195
  }, {
    "from": 302,
    "label": "has",
    "to": 171
  }, {
    "from": 302,
    "label": "has",
    "to": 196
  }, {
    "from": 302,
    "label": "has",
    "to": 197
  }, {
    "from": 197,
    "label": "has",
    "to": 198
  }, {
    "from": 302,
    "label": "has",
    "to": 199
  }, {
    "from": 302,
    "label": "has",
    "to": 200
  }, {
    "from": 302,
    "label": "has",
    "to": 201
  }, {
    "from": 201,
    "label": "has",
    "to": 202
  }, {
    "from": 202,
    "label": "has",
    "to": 203
  }, {
    "from": 202,
    "label": "has",
    "to": 203
  }, {
    "from": 201,
    "label": "has",
    "to": 204
  }, {
    "from": 204,
    "label": "has",
    "to": 205
  }, {
    "from": 204,
    "label": "has",
    "to": 205
  }, {
    "from": 302,
    "label": "has",
    "to": 206
  }, {
    "from": 206,
    "label": "has",
    "to": 207
  }, {
    "from": 207,
    "label": "has",
    "to": 208
  }, {
    "from": 207,
    "label": "has",
    "to": 209
  }, {
    "from": 206,
    "label": "has",
    "to": 210
  }, {
    "from": 302,
    "label": "has",
    "to": 211
  }, {
    "from": 211,
    "label": "has",
    "to": 212
  }, {
    "from": 212,
    "label": "has",
    "to": 213
  }, {
    "from": 212,
    "label": "has",
    "to": 214
  }, {
    "from": 211,
    "label": "has",
    "to": 215
  }, {
    "from": 302,
    "label": "has",
    "to": 216
  }, {
    "from": 216,
    "label": "has",
    "to": 217
  }, {
    "from": 302,
    "label": "has",
    "to": 218
  }, {
    "from": 218,
    "label": "has",
    "to": 219
  }, {
    "from": 302,
    "label": "has",
    "to": 220
  }, {
    "from": 220,
    "label": "has",
    "to": 221
  }, {
    "from": 302,
    "label": "has",
    "to": 303
  }, {
    "from": 304,
    "label": "has",
    "to": 225
  }, {
    "from": 304,
    "label": "has",
    "to": 194
  }, {
    "from": 304,
    "label": "has",
    "to": 195
  }, {
    "from": 304,
    "label": "has",
    "to": 171
  }, {
    "from": 304,
    "label": "has",
    "to": 196
  }, {
    "from": 304,
    "label": "has",
    "to": 226
  }, {
    "from": 226,
    "label": "has",
    "to": 198
  }, {
    "from": 304,
    "label": "has",
    "to": 227
  }, {
    "from": 227,
    "label": "has",
    "to": 167
  }, {
    "from": 227,
    "label": "has",
    "to": 228
  }, {
    "from": 227,
    "label": "has",
    "to": 176
  }, {
    "from": 304,
    "label": "has",
    "to": 229
  }, {
    "from": 304,
    "label": "has",
    "to": 230
  }, {
    "from": 304,
    "label": "has",
    "to": 231
  }, {
    "from": 304,
    "label": "has",
    "to": 305
  }, {
    "from": 306,
    "label": "has",
    "to": 167
  }, {
    "from": 306,
    "label": "has",
    "to": 228
  }, {
    "from": 306,
    "label": "has",
    "to": 176
  }, {
    "from": 306,
    "label": "has",
    "to": 307
  }, {
    "from": 308,
    "label": "has",
    "to": 235
  }, {
    "from": 308,
    "label": "has",
    "to": 194
  }, {
    "from": 308,
    "label": "has",
    "to": 195
  }, {
    "from": 308,
    "label": "has",
    "to": 171
  }, {
    "from": 308,
    "label": "has",
    "to": 196
  }, {
    "from": 308,
    "label": "has",
    "to": 199
  }, {
    "from": 308,
    "label": "has",
    "to": 236
  }, {
    "from": 236,
    "label": "has",
    "to": 237
  }, {
    "from": 236,
    "label": "has",
    "to": 238
  }, {
    "from": 238,
    "label": "has",
    "to": 74
  }, {
    "from": 238,
    "label": "has",
    "to": 239
  }, {
    "from": 239,
    "label": "has",
    "to": 240
  }, {
    "from": 240,
    "label": "has",
    "to": 241
  }, {
    "from": 240,
    "label": "has",
    "to": 242
  }, {
    "from": 242,
    "label": "has",
    "to": 243
  }, {
    "from": 242,
    "label": "has",
    "to": 244
  }, {
    "from": 244,
    "label": "has",
    "to": 245
  }, {
    "from": 242,
    "label": "has",
    "to": 246
  }, {
    "from": 242,
    "label": "has",
    "to": 247
  }, {
    "from": 240,
    "label": "has",
    "to": 248
  }, {
    "from": 248,
    "label": "has",
    "to": 249
  }, {
    "from": 240,
    "label": "has",
    "to": 250
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 250,
    "label": "has",
    "to": 77
  }, {
    "from": 250,
    "label": "has",
    "to": 252
  }, {
    "from": 238,
    "label": "has",
    "to": 13
  }, {
    "from": 236,
    "label": "has",
    "to": 253
  }, {
    "from": 253,
    "label": "has",
    "to": 254
  }, {
    "from": 253,
    "label": "has",
    "to": 13
  }, {
    "from": 253,
    "label": "has",
    "to": 255
  }, {
    "from": 255,
    "label": "has",
    "to": 256
  }, {
    "from": 256,
    "label": "has",
    "to": 257
  }, {
    "from": 256,
    "label": "has",
    "to": 258
  }, {
    "from": 256,
    "label": "has",
    "to": 259
  }, {
    "from": 255,
    "label": "has",
    "to": 260
  }, {
    "from": 253,
    "label": "has",
    "to": 13
  }, {
    "from": 236,
    "label": "has",
    "to": 261
  }, {
    "from": 261,
    "label": "has",
    "to": 262
  }, {
    "from": 262,
    "label": "has",
    "to": 263
  }, {
    "from": 262,
    "label": "has",
    "to": 264
  }, {
    "from": 262,
    "label": "has",
    "to": 265
  }, {
    "from": 262,
    "label": "has",
    "to": 266
  }, {
    "from": 262,
    "label": "has",
    "to": 267
  }, {
    "from": 261,
    "label": "has",
    "to": 268
  }, {
    "from": 268,
    "label": "has",
    "to": 269
  }, {
    "from": 268,
    "label": "has",
    "to": 270
  }, {
    "from": 268,
    "label": "has",
    "to": 271
  }, {
    "from": 268,
    "label": "has",
    "to": 266
  }, {
    "from": 268,
    "label": "has",
    "to": 267
  }, {
    "from": 261,
    "label": "has",
    "to": 272
  }, {
    "from": 272,
    "label": "has",
    "to": 273
  }, {
    "from": 272,
    "label": "has",
    "to": 274
  }, {
    "from": 272,
    "label": "has",
    "to": 275
  }, {
    "from": 272,
    "label": "has",
    "to": 276
  }, {
    "from": 272,
    "label": "has",
    "to": 277
  }, {
    "from": 272,
    "label": "has",
    "to": 278
  }, {
    "from": 278,
    "label": "has",
    "to": 275
  }, {
    "from": 261,
    "label": "has",
    "to": 279
  }, {
    "from": 261,
    "label": "has",
    "to": 266
  }, {
    "from": 261,
    "label": "has",
    "to": 280
  }, {
    "from": 308,
    "label": "has",
    "to": 281
  }, {
    "from": 281,
    "label": "has",
    "to": 282
  }, {
    "from": 281,
    "label": "has",
    "to": 13
  }, {
    "from": 281,
    "label": "has",
    "to": 167
  }, {
    "from": 281,
    "label": "has",
    "to": 283
  }, {
    "from": 281,
    "label": "has",
    "to": 284
  }, {
    "from": 284,
    "label": "has",
    "to": 285
  }, {
    "from": 284,
    "label": "has",
    "to": 286
  }, {
    "from": 281,
    "label": "has",
    "to": 287
  }, {
    "from": 287,
    "label": "has",
    "to": 288
  }, {
    "from": 281,
    "label": "has",
    "to": 289
  }, {
    "from": 281,
    "label": "has",
    "to": 290
  }, {
    "from": 281,
    "label": "has",
    "to": 176
  }, {
    "from": 308,
    "label": "has",
    "to": 229
  }, {
    "from": 308,
    "label": "has",
    "to": 291
  }, {
    "from": 308,
    "label": "has",
    "to": 231
  }, {
    "from": 308,
    "label": "has",
    "to": 309
  }, {
    "from": 310,
    "label": "has",
    "to": 237
  }, {
    "from": 310,
    "label": "has",
    "to": 238
  }, {
    "from": 238,
    "label": "has",
    "to": 74
  }, {
    "from": 238,
    "label": "has",
    "to": 239
  }, {
    "from": 239,
    "label": "has",
    "to": 240
  }, {
    "from": 240,
    "label": "has",
    "to": 241
  }, {
    "from": 240,
    "label": "has",
    "to": 242
  }, {
    "from": 242,
    "label": "has",
    "to": 243
  }, {
    "from": 242,
    "label": "has",
    "to": 244
  }, {
    "from": 244,
    "label": "has",
    "to": 245
  }, {
    "from": 242,
    "label": "has",
    "to": 246
  }, {
    "from": 242,
    "label": "has",
    "to": 247
  }, {
    "from": 240,
    "label": "has",
    "to": 248
  }, {
    "from": 248,
    "label": "has",
    "to": 249
  }, {
    "from": 240,
    "label": "has",
    "to": 250
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 250,
    "label": "has",
    "to": 77
  }, {
    "from": 250,
    "label": "has",
    "to": 252
  }, {
    "from": 238,
    "label": "has",
    "to": 13
  }, {
    "from": 310,
    "label": "has",
    "to": 253
  }, {
    "from": 253,
    "label": "has",
    "to": 254
  }, {
    "from": 253,
    "label": "has",
    "to": 13
  }, {
    "from": 253,
    "label": "has",
    "to": 255
  }, {
    "from": 255,
    "label": "has",
    "to": 256
  }, {
    "from": 256,
    "label": "has",
    "to": 257
  }, {
    "from": 256,
    "label": "has",
    "to": 258
  }, {
    "from": 256,
    "label": "has",
    "to": 259
  }, {
    "from": 255,
    "label": "has",
    "to": 260
  }, {
    "from": 253,
    "label": "has",
    "to": 13
  }, {
    "from": 310,
    "label": "has",
    "to": 261
  }, {
    "from": 261,
    "label": "has",
    "to": 262
  }, {
    "from": 262,
    "label": "has",
    "to": 263
  }, {
    "from": 262,
    "label": "has",
    "to": 264
  }, {
    "from": 262,
    "label": "has",
    "to": 265
  }, {
    "from": 262,
    "label": "has",
    "to": 266
  }, {
    "from": 262,
    "label": "has",
    "to": 267
  }, {
    "from": 261,
    "label": "has",
    "to": 268
  }, {
    "from": 268,
    "label": "has",
    "to": 269
  }, {
    "from": 268,
    "label": "has",
    "to": 270
  }, {
    "from": 268,
    "label": "has",
    "to": 271
  }, {
    "from": 268,
    "label": "has",
    "to": 266
  }, {
    "from": 268,
    "label": "has",
    "to": 267
  }, {
    "from": 261,
    "label": "has",
    "to": 272
  }, {
    "from": 272,
    "label": "has",
    "to": 273
  }, {
    "from": 272,
    "label": "has",
    "to": 274
  }, {
    "from": 272,
    "label": "has",
    "to": 275
  }, {
    "from": 272,
    "label": "has",
    "to": 276
  }, {
    "from": 272,
    "label": "has",
    "to": 277
  }, {
    "from": 272,
    "label": "has",
    "to": 278
  }, {
    "from": 278,
    "label": "has",
    "to": 275
  }, {
    "from": 261,
    "label": "has",
    "to": 279
  }, {
    "from": 261,
    "label": "has",
    "to": 266
  }, {
    "from": 261,
    "label": "has",
    "to": 280
  }, {
    "from": 310,
    "label": "has",
    "to": 311
  }, {
    "from": 312,
    "label": "has",
    "to": 74
  }, {
    "from": 312,
    "label": "has",
    "to": 239
  }, {
    "from": 239,
    "label": "has",
    "to": 240
  }, {
    "from": 240,
    "label": "has",
    "to": 241
  }, {
    "from": 240,
    "label": "has",
    "to": 242
  }, {
    "from": 242,
    "label": "has",
    "to": 243
  }, {
    "from": 242,
    "label": "has",
    "to": 244
  }, {
    "from": 244,
    "label": "has",
    "to": 245
  }, {
    "from": 242,
    "label": "has",
    "to": 246
  }, {
    "from": 242,
    "label": "has",
    "to": 247
  }, {
    "from": 240,
    "label": "has",
    "to": 248
  }, {
    "from": 248,
    "label": "has",
    "to": 249
  }, {
    "from": 240,
    "label": "has",
    "to": 250
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 250,
    "label": "has",
    "to": 77
  }, {
    "from": 250,
    "label": "has",
    "to": 252
  }, {
    "from": 312,
    "label": "has",
    "to": 13
  }, {
    "from": 312,
    "label": "has",
    "to": 313
  }, {
    "from": 314,
    "label": "has",
    "to": 240
  }, {
    "from": 240,
    "label": "has",
    "to": 241
  }, {
    "from": 240,
    "label": "has",
    "to": 242
  }, {
    "from": 242,
    "label": "has",
    "to": 243
  }, {
    "from": 242,
    "label": "has",
    "to": 244
  }, {
    "from": 244,
    "label": "has",
    "to": 245
  }, {
    "from": 242,
    "label": "has",
    "to": 246
  }, {
    "from": 242,
    "label": "has",
    "to": 247
  }, {
    "from": 240,
    "label": "has",
    "to": 248
  }, {
    "from": 248,
    "label": "has",
    "to": 249
  }, {
    "from": 240,
    "label": "has",
    "to": 250
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 250,
    "label": "has",
    "to": 77
  }, {
    "from": 250,
    "label": "has",
    "to": 252
  }, {
    "from": 314,
    "label": "has",
    "to": 315
  }, {
    "from": 316,
    "label": "has",
    "to": 254
  }, {
    "from": 316,
    "label": "has",
    "to": 13
  }, {
    "from": 316,
    "label": "has",
    "to": 255
  }, {
    "from": 255,
    "label": "has",
    "to": 256
  }, {
    "from": 256,
    "label": "has",
    "to": 257
  }, {
    "from": 256,
    "label": "has",
    "to": 258
  }, {
    "from": 256,
    "label": "has",
    "to": 259
  }, {
    "from": 255,
    "label": "has",
    "to": 260
  }, {
    "from": 316,
    "label": "has",
    "to": 13
  }, {
    "from": 316,
    "label": "has",
    "to": 317
  }, {
    "from": 318,
    "label": "has",
    "to": 282
  }, {
    "from": 318,
    "label": "has",
    "to": 13
  }, {
    "from": 318,
    "label": "has",
    "to": 167
  }, {
    "from": 318,
    "label": "has",
    "to": 283
  }, {
    "from": 318,
    "label": "has",
    "to": 284
  }, {
    "from": 284,
    "label": "has",
    "to": 285
  }, {
    "from": 284,
    "label": "has",
    "to": 286
  }, {
    "from": 318,
    "label": "has",
    "to": 287
  }, {
    "from": 287,
    "label": "has",
    "to": 288
  }, {
    "from": 318,
    "label": "has",
    "to": 289
  }, {
    "from": 318,
    "label": "has",
    "to": 290
  }, {
    "from": 318,
    "label": "has",
    "to": 176
  }, {
    "from": 318,
    "label": "has",
    "to": 319
  }, {
    "from": 320,
    "label": "has",
    "to": 321
  }, {
    "from": 320,
    "label": "has",
    "to": 322
  }, {
    "from": 322,
    "label": "has",
    "to": 323
  }, {
    "from": 320,
    "label": "has",
    "to": 324
  }, {
    "from": 324,
    "label": "has",
    "to": 325
  }, {
    "from": 320,
    "label": "has",
    "to": 326
  }, {
    "from": 326,
    "label": "has",
    "to": 327
  }, {
    "from": 320,
    "label": "has",
    "to": 328
  }, {
    "from": 320,
    "label": "has",
    "to": 329
  }, {
    "from": 320,
    "label": "has",
    "to": 330
  }, {
    "from": 320,
    "label": "has",
    "to": 331
  }, {
    "from": 320,
    "label": "has",
    "to": 13
  }, {
    "from": 320,
    "label": "has",
    "to": 332
  }, {
    "from": 333,
    "label": "has",
    "to": 334
  }, {
    "from": 333,
    "label": "has",
    "to": 335
  }, {
    "from": 336,
    "label": "has",
    "to": 337
  }, {
    "from": 336,
    "label": "has",
    "to": 338
  }, {
    "from": 339,
    "label": "has",
    "to": 340
  }, {
    "from": 339,
    "label": "has",
    "to": 341
  }, {
    "from": 341,
    "label": "has",
    "to": 342
  }, {
    "from": 341,
    "label": "has",
    "to": 13
  }, {
    "from": 341,
    "label": "has",
    "to": 343
  }, {
    "from": 343,
    "label": "has",
    "to": 344
  }, {
    "from": 344,
    "label": "has",
    "to": 345
  }, {
    "from": 344,
    "label": "has",
    "to": 346
  }, {
    "from": 343,
    "label": "has",
    "to": 347
  }, {
    "from": 347,
    "label": "has",
    "to": 348
  }, {
    "from": 341,
    "label": "has",
    "to": 349
  }, {
    "from": 341,
    "label": "has",
    "to": 350
  }, {
    "from": 350,
    "label": "has",
    "to": 351
  }, {
    "from": 350,
    "label": "has",
    "to": 352
  }, {
    "from": 339,
    "label": "has",
    "to": 353
  }, {
    "from": 353,
    "label": "has",
    "to": 354
  }, {
    "from": 339,
    "label": "has",
    "to": 355
  }, {
    "from": 355,
    "label": "has",
    "to": 356
  }, {
    "from": 339,
    "label": "has",
    "to": 357
  }, {
    "from": 357,
    "label": "has",
    "to": 74
  }, {
    "from": 357,
    "label": "has",
    "to": 13
  }, {
    "from": 357,
    "label": "has",
    "to": 358
  }, {
    "from": 358,
    "label": "has",
    "to": 359
  }, {
    "from": 357,
    "label": "has",
    "to": 77
  }, {
    "from": 357,
    "label": "has",
    "to": 360
  }, {
    "from": 360,
    "label": "has",
    "to": 361
  }, {
    "from": 360,
    "label": "has",
    "to": 362
  }, {
    "from": 360,
    "label": "has",
    "to": 363
  }, {
    "from": 357,
    "label": "has",
    "to": 364
  }, {
    "from": 339,
    "label": "has",
    "to": 365
  }, {
    "from": 365,
    "label": "has",
    "to": 366
  }, {
    "from": 366,
    "label": "has",
    "to": 367
  }, {
    "from": 365,
    "label": "has",
    "to": 368
  }, {
    "from": 365,
    "label": "has",
    "to": 369
  }, {
    "from": 369,
    "label": "has",
    "to": 370
  }, {
    "from": 365,
    "label": "has",
    "to": 371
  }, {
    "from": 365,
    "label": "has",
    "to": 372
  }, {
    "from": 365,
    "label": "has",
    "to": 373
  }, {
    "from": 339,
    "label": "has",
    "to": 374
  }, {
    "from": 374,
    "label": "has",
    "to": 375
  }, {
    "from": 375,
    "label": "has",
    "to": 376
  }, {
    "from": 374,
    "label": "has",
    "to": 368
  }, {
    "from": 374,
    "label": "has",
    "to": 377
  }, {
    "from": 377,
    "label": "has",
    "to": 378
  }, {
    "from": 374,
    "label": "has",
    "to": 379
  }, {
    "from": 374,
    "label": "has",
    "to": 372
  }, {
    "from": 374,
    "label": "has",
    "to": 380
  }, {
    "from": 380,
    "label": "has",
    "to": 381
  }, {
    "from": 380,
    "label": "has",
    "to": 382
  }, {
    "from": 374,
    "label": "has",
    "to": 383
  }, {
    "from": 374,
    "label": "has",
    "to": 384
  }, {
    "from": 384,
    "label": "has",
    "to": 385
  }, {
    "from": 384,
    "label": "has",
    "to": 386
  }, {
    "from": 384,
    "label": "has",
    "to": 387
  }, {
    "from": 384,
    "label": "has",
    "to": 388
  }, {
    "from": 339,
    "label": "has",
    "to": 389
  }, {
    "from": 389,
    "label": "has",
    "to": 390
  }, {
    "from": 389,
    "label": "has",
    "to": 391
  }, {
    "from": 389,
    "label": "has",
    "to": 392
  }, {
    "from": 339,
    "label": "has",
    "to": 393
  }, {
    "from": 339,
    "label": "has",
    "to": 394
  }, {
    "from": 394,
    "label": "has",
    "to": 395
  }, {
    "from": 394,
    "label": "has",
    "to": 396
  }, {
    "from": 394,
    "label": "has",
    "to": 397
  }, {
    "from": 394,
    "label": "has",
    "to": 398
  }, {
    "from": 394,
    "label": "has",
    "to": 399
  }, {
    "from": 394,
    "label": "has",
    "to": 400
  }, {
    "from": 339,
    "label": "has",
    "to": 401
  }, {
    "from": 339,
    "label": "has",
    "to": 402
  }, {
    "from": 403,
    "label": "has",
    "to": 342
  }, {
    "from": 403,
    "label": "has",
    "to": 13
  }, {
    "from": 403,
    "label": "has",
    "to": 343
  }, {
    "from": 343,
    "label": "has",
    "to": 344
  }, {
    "from": 344,
    "label": "has",
    "to": 345
  }, {
    "from": 344,
    "label": "has",
    "to": 346
  }, {
    "from": 343,
    "label": "has",
    "to": 347
  }, {
    "from": 347,
    "label": "has",
    "to": 348
  }, {
    "from": 403,
    "label": "has",
    "to": 349
  }, {
    "from": 403,
    "label": "has",
    "to": 350
  }, {
    "from": 350,
    "label": "has",
    "to": 351
  }, {
    "from": 350,
    "label": "has",
    "to": 352
  }, {
    "from": 403,
    "label": "has",
    "to": 404
  }, {
    "from": 405,
    "label": "has",
    "to": 354
  }, {
    "from": 405,
    "label": "has",
    "to": 406
  }, {
    "from": 407,
    "label": "has",
    "to": 356
  }, {
    "from": 407,
    "label": "has",
    "to": 408
  }, {
    "from": 409,
    "label": "has",
    "to": 74
  }, {
    "from": 409,
    "label": "has",
    "to": 13
  }, {
    "from": 409,
    "label": "has",
    "to": 358
  }, {
    "from": 358,
    "label": "has",
    "to": 359
  }, {
    "from": 409,
    "label": "has",
    "to": 77
  }, {
    "from": 409,
    "label": "has",
    "to": 360
  }, {
    "from": 360,
    "label": "has",
    "to": 361
  }, {
    "from": 360,
    "label": "has",
    "to": 362
  }, {
    "from": 360,
    "label": "has",
    "to": 363
  }, {
    "from": 409,
    "label": "has",
    "to": 364
  }, {
    "from": 409,
    "label": "has",
    "to": 410
  }, {
    "from": 411,
    "label": "has",
    "to": 366
  }, {
    "from": 366,
    "label": "has",
    "to": 367
  }, {
    "from": 411,
    "label": "has",
    "to": 368
  }, {
    "from": 411,
    "label": "has",
    "to": 369
  }, {
    "from": 369,
    "label": "has",
    "to": 370
  }, {
    "from": 411,
    "label": "has",
    "to": 371
  }, {
    "from": 411,
    "label": "has",
    "to": 372
  }, {
    "from": 411,
    "label": "has",
    "to": 373
  }, {
    "from": 411,
    "label": "has",
    "to": 412
  }, {
    "from": 413,
    "label": "has",
    "to": 375
  }, {
    "from": 375,
    "label": "has",
    "to": 376
  }, {
    "from": 413,
    "label": "has",
    "to": 368
  }, {
    "from": 413,
    "label": "has",
    "to": 377
  }, {
    "from": 377,
    "label": "has",
    "to": 378
  }, {
    "from": 413,
    "label": "has",
    "to": 379
  }, {
    "from": 413,
    "label": "has",
    "to": 372
  }, {
    "from": 413,
    "label": "has",
    "to": 380
  }, {
    "from": 380,
    "label": "has",
    "to": 381
  }, {
    "from": 380,
    "label": "has",
    "to": 382
  }, {
    "from": 413,
    "label": "has",
    "to": 383
  }, {
    "from": 413,
    "label": "has",
    "to": 384
  }, {
    "from": 384,
    "label": "has",
    "to": 385
  }, {
    "from": 384,
    "label": "has",
    "to": 386
  }, {
    "from": 384,
    "label": "has",
    "to": 387
  }, {
    "from": 384,
    "label": "has",
    "to": 388
  }, {
    "from": 413,
    "label": "has",
    "to": 414
  }, {
    "from": 415,
    "label": "has",
    "to": 416
  }, {
    "from": 415,
    "label": "has",
    "to": 417
  }, {
    "from": 418,
    "label": "has",
    "to": 419
  }, {
    "from": 419,
    "label": "has",
    "to": 342
  }, {
    "from": 419,
    "label": "has",
    "to": 13
  }, {
    "from": 419,
    "label": "has",
    "to": 420
  }, {
    "from": 420,
    "label": "has",
    "to": 344
  }, {
    "from": 344,
    "label": "has",
    "to": 345
  }, {
    "from": 344,
    "label": "has",
    "to": 346
  }, {
    "from": 419,
    "label": "has",
    "to": 349
  }, {
    "from": 419,
    "label": "has",
    "to": 350
  }, {
    "from": 350,
    "label": "has",
    "to": 351
  }, {
    "from": 350,
    "label": "has",
    "to": 352
  }, {
    "from": 418,
    "label": "has",
    "to": 421
  }, {
    "from": 421,
    "label": "has",
    "to": 422
  }, {
    "from": 421,
    "label": "has",
    "to": 423
  }, {
    "from": 421,
    "label": "has",
    "to": 361
  }, {
    "from": 421,
    "label": "has",
    "to": 424
  }, {
    "from": 421,
    "label": "has",
    "to": 363
  }, {
    "from": 421,
    "label": "has",
    "to": 425
  }, {
    "from": 421,
    "label": "has",
    "to": 426
  }, {
    "from": 418,
    "label": "has",
    "to": 389
  }, {
    "from": 389,
    "label": "has",
    "to": 390
  }, {
    "from": 389,
    "label": "has",
    "to": 391
  }, {
    "from": 389,
    "label": "has",
    "to": 392
  }, {
    "from": 418,
    "label": "has",
    "to": 427
  }, {
    "from": 418,
    "label": "has",
    "to": 428
  }, {
    "from": 418,
    "label": "has",
    "to": 429
  }, {
    "from": 418,
    "label": "has",
    "to": 430
  }, {
    "from": 431,
    "label": "has",
    "to": 342
  }, {
    "from": 431,
    "label": "has",
    "to": 13
  }, {
    "from": 431,
    "label": "has",
    "to": 420
  }, {
    "from": 420,
    "label": "has",
    "to": 344
  }, {
    "from": 344,
    "label": "has",
    "to": 345
  }, {
    "from": 344,
    "label": "has",
    "to": 346
  }, {
    "from": 431,
    "label": "has",
    "to": 349
  }, {
    "from": 431,
    "label": "has",
    "to": 350
  }, {
    "from": 350,
    "label": "has",
    "to": 351
  }, {
    "from": 350,
    "label": "has",
    "to": 352
  }, {
    "from": 431,
    "label": "has",
    "to": 432
  }, {
    "from": 433,
    "label": "has",
    "to": 422
  }, {
    "from": 433,
    "label": "has",
    "to": 423
  }, {
    "from": 433,
    "label": "has",
    "to": 361
  }, {
    "from": 433,
    "label": "has",
    "to": 424
  }, {
    "from": 433,
    "label": "has",
    "to": 363
  }, {
    "from": 433,
    "label": "has",
    "to": 425
  }, {
    "from": 433,
    "label": "has",
    "to": 426
  }, {
    "from": 433,
    "label": "has",
    "to": 434
  }, {
    "from": 435,
    "label": "has",
    "to": 436
  }, {
    "from": 435,
    "label": "has",
    "to": 437
  }, {
    "from": 435,
    "label": "has",
    "to": 438
  }, {
    "from": 435,
    "label": "has",
    "to": 439
  }, {
    "from": 435,
    "label": "has",
    "to": 440
  }, {
    "from": 435,
    "label": "has",
    "to": 441
  }, {
    "from": 435,
    "label": "has",
    "to": 442
  }, {
    "from": 435,
    "label": "has",
    "to": 443
  }, {
    "from": 435,
    "label": "has",
    "to": 13
  }, {
    "from": 435,
    "label": "has",
    "to": 13
  }, {
    "from": 435,
    "label": "has",
    "to": 444
  }, {
    "from": 445,
    "label": "has",
    "to": 436
  }, {
    "from": 445,
    "label": "has",
    "to": 437
  }, {
    "from": 445,
    "label": "has",
    "to": 446
  }, {
    "from": 445,
    "label": "has",
    "to": 447
  }, {
    "from": 445,
    "label": "has",
    "to": 448
  }, {
    "from": 445,
    "label": "has",
    "to": 13
  }, {
    "from": 445,
    "label": "has",
    "to": 449
  }, {
    "from": 450,
    "label": "has",
    "to": 451
  }, {
    "from": 450,
    "label": "has",
    "to": 452
  }, {
    "from": 453,
    "label": "has",
    "to": 454
  }, {
    "from": 453,
    "label": "has",
    "to": 419
  }, {
    "from": 419,
    "label": "has",
    "to": 342
  }, {
    "from": 419,
    "label": "has",
    "to": 13
  }, {
    "from": 419,
    "label": "has",
    "to": 420
  }, {
    "from": 420,
    "label": "has",
    "to": 344
  }, {
    "from": 344,
    "label": "has",
    "to": 345
  }, {
    "from": 344,
    "label": "has",
    "to": 346
  }, {
    "from": 419,
    "label": "has",
    "to": 349
  }, {
    "from": 419,
    "label": "has",
    "to": 350
  }, {
    "from": 350,
    "label": "has",
    "to": 351
  }, {
    "from": 350,
    "label": "has",
    "to": 352
  }, {
    "from": 453,
    "label": "has",
    "to": 455
  }, {
    "from": 455,
    "label": "has",
    "to": 456
  }, {
    "from": 453,
    "label": "has",
    "to": 355
  }, {
    "from": 355,
    "label": "has",
    "to": 356
  }, {
    "from": 453,
    "label": "has",
    "to": 457
  }, {
    "from": 457,
    "label": "has",
    "to": 458
  }, {
    "from": 453,
    "label": "has",
    "to": 459
  }, {
    "from": 459,
    "label": "has",
    "to": 460
  }, {
    "from": 453,
    "label": "has",
    "to": 389
  }, {
    "from": 389,
    "label": "has",
    "to": 390
  }, {
    "from": 389,
    "label": "has",
    "to": 391
  }, {
    "from": 389,
    "label": "has",
    "to": 392
  }, {
    "from": 453,
    "label": "has",
    "to": 461
  }, {
    "from": 453,
    "label": "has",
    "to": 462
  }, {
    "from": 453,
    "label": "has",
    "to": 463
  }, {
    "from": 453,
    "label": "has",
    "to": 428
  }, {
    "from": 453,
    "label": "has",
    "to": 464
  }, {
    "from": 453,
    "label": "has",
    "to": 429
  }, {
    "from": 453,
    "label": "has",
    "to": 465
  }, {
    "from": 453,
    "label": "has",
    "to": 466
  }, {
    "from": 467,
    "label": "has",
    "to": 342
  }, {
    "from": 467,
    "label": "has",
    "to": 13
  }, {
    "from": 467,
    "label": "has",
    "to": 420
  }, {
    "from": 420,
    "label": "has",
    "to": 344
  }, {
    "from": 344,
    "label": "has",
    "to": 345
  }, {
    "from": 344,
    "label": "has",
    "to": 346
  }, {
    "from": 467,
    "label": "has",
    "to": 349
  }, {
    "from": 467,
    "label": "has",
    "to": 350
  }, {
    "from": 350,
    "label": "has",
    "to": 351
  }, {
    "from": 350,
    "label": "has",
    "to": 352
  }, {
    "from": 467,
    "label": "has",
    "to": 468
  }, {
    "from": 469,
    "label": "has",
    "to": 456
  }, {
    "from": 469,
    "label": "has",
    "to": 470
  }, {
    "from": 471,
    "label": "has",
    "to": 356
  }, {
    "from": 471,
    "label": "has",
    "to": 472
  }, {
    "from": 473,
    "label": "has",
    "to": 458
  }, {
    "from": 473,
    "label": "has",
    "to": 474
  }, {
    "from": 475,
    "label": "has",
    "to": 460
  }, {
    "from": 475,
    "label": "has",
    "to": 476
  }, {
    "from": 477,
    "label": "has",
    "to": 478
  }, {
    "from": 477,
    "label": "has",
    "to": 479
  }, {
    "from": 477,
    "label": "has",
    "to": 480
  }, {
    "from": 481,
    "label": "has",
    "to": 436
  }, {
    "from": 481,
    "label": "has",
    "to": 437
  }, {
    "from": 481,
    "label": "has",
    "to": 482
  }, {
    "from": 481,
    "label": "has",
    "to": 483
  }, {
    "from": 481,
    "label": "has",
    "to": 13
  }, {
    "from": 481,
    "label": "has",
    "to": 484
  }, {
    "from": 485,
    "label": "has",
    "to": 58
  }, {
    "from": 486,
    "label": "has",
    "to": 105
  }, {
    "from": 487,
    "label": "has",
    "to": 255
  }, {
    "from": 255,
    "label": "has",
    "to": 256
  }, {
    "from": 256,
    "label": "has",
    "to": 257
  }, {
    "from": 256,
    "label": "has",
    "to": 258
  }, {
    "from": 256,
    "label": "has",
    "to": 259
  }, {
    "from": 255,
    "label": "has",
    "to": 260
  }, {
    "from": 487,
    "label": "has",
    "to": 488
  }, {
    "from": 489,
    "label": "has",
    "to": 13
  }, {
    "from": 490,
    "label": "has",
    "to": 343
  }, {
    "from": 343,
    "label": "has",
    "to": 344
  }, {
    "from": 344,
    "label": "has",
    "to": 345
  }, {
    "from": 344,
    "label": "has",
    "to": 346
  }, {
    "from": 343,
    "label": "has",
    "to": 347
  }, {
    "from": 347,
    "label": "has",
    "to": 348
  }, {
    "from": 490,
    "label": "has",
    "to": 349
  }, {
    "from": 490,
    "label": "has",
    "to": 350
  }, {
    "from": 350,
    "label": "has",
    "to": 351
  }, {
    "from": 350,
    "label": "has",
    "to": 352
  }, {
    "from": 490,
    "label": "has",
    "to": 491
  }, {
    "from": 492,
    "label": "has",
    "to": 358
  }, {
    "from": 358,
    "label": "has",
    "to": 359
  }, {
    "from": 492,
    "label": "has",
    "to": 77
  }, {
    "from": 492,
    "label": "has",
    "to": 360
  }, {
    "from": 360,
    "label": "has",
    "to": 361
  }, {
    "from": 360,
    "label": "has",
    "to": 362
  }, {
    "from": 360,
    "label": "has",
    "to": 363
  }, {
    "from": 492,
    "label": "has",
    "to": 364
  }, {
    "from": 492,
    "label": "has",
    "to": 493
  }, {
    "from": 494,
    "label": "has",
    "to": 420
  }, {
    "from": 420,
    "label": "has",
    "to": 344
  }, {
    "from": 344,
    "label": "has",
    "to": 345
  }, {
    "from": 344,
    "label": "has",
    "to": 346
  }, {
    "from": 494,
    "label": "has",
    "to": 349
  }, {
    "from": 494,
    "label": "has",
    "to": 350
  }, {
    "from": 350,
    "label": "has",
    "to": 351
  }, {
    "from": 350,
    "label": "has",
    "to": 352
  }, {
    "from": 494,
    "label": "has",
    "to": 495
  }, {
    "from": 496,
    "label": "has",
    "to": 420
  }, {
    "from": 420,
    "label": "has",
    "to": 344
  }, {
    "from": 344,
    "label": "has",
    "to": 345
  }, {
    "from": 344,
    "label": "has",
    "to": 346
  }, {
    "from": 496,
    "label": "has",
    "to": 349
  }, {
    "from": 496,
    "label": "has",
    "to": 350
  }, {
    "from": 350,
    "label": "has",
    "to": 351
  }, {
    "from": 350,
    "label": "has",
    "to": 352
  }, {
    "from": 496,
    "label": "has",
    "to": 497
  }, {
    "from": 137,
    "label": "calls",
    "to": 502
  }, {
    "from": 137,
    "label": "calls",
    "to": 502
  }, {
    "from": 137,
    "label": "calls",
    "to": 502
  }, {
    "from": 137,
    "label": "calls",
    "to": 502
  }, {
    "from": 137,
    "label": "calls",
    "to": 502
  }, {
    "from": 137,
    "label": "calls",
    "to": 502
  }, {
    "from": 137,
    "label": "calls",
    "to": 502
  }, {
    "from": 137,
    "label": "calls",
    "to": 502
  }, {
    "from": 137,
    "label": "calls",
    "to": 502
  }, {
    "from": 137,
    "label": "calls",
    "to": 502
  }, {
    "from": 137,
    "label": "calls",
    "to": 502
  }, {
    "from": 137,
    "label": "calls",
    "to": 502
  }, {
    "from": 137,
    "label": "calls",
    "to": 502
  }, {
    "from": 296,
    "label": "calls",
    "to": 502
  }, {
    "from": 296,
    "label": "calls",
    "to": 502
  }, {
    "from": 296,
    "label": "calls",
    "to": 502
  }, {
    "from": 296,
    "label": "calls",
    "to": 502
  }, {
    "from": 296,
    "label": "calls",
    "to": 502
  }, {
    "from": 296,
    "label": "calls",
    "to": 502
  }, {
    "from": 296,
    "label": "calls",
    "to": 502
  }, {
    "from": 296,
    "label": "calls",
    "to": 502
  }, {
    "from": 137,
    "label": "calls",
    "to": 502
  }, {
    "from": 137,
    "label": "calls",
    "to": 502
  }, {
    "from": 137,
    "label": "calls",
    "to": 502
  }, {
    "from": 137,
    "label": "calls",
    "to": 502
  }, {
    "from": 137,
    "label": "calls",
    "to": 502
  }, {
    "from": 137,
    "label": "calls",
    "to": 502
  }, {
    "from": 302,
    "label": "calls",
    "to": 502
  }, {
    "from": 302,
    "label": "calls",
    "to": 502
  }, {
    "from": 302,
    "label": "calls",
    "to": 502
  }, {
    "from": 302,
    "label": "calls",
    "to": 502
  }, {
    "from": 302,
    "label": "calls",
    "to": 502
  }, {
    "from": 302,
    "label": "calls",
    "to": 502
  }, {
    "from": 302,
    "label": "calls",
    "to": 502
  }, {
    "from": 302,
    "label": "calls",
    "to": 502
  }, {
    "from": 302,
    "label": "calls",
    "to": 502
  }, {
    "from": 302,
    "label": "calls",
    "to": 502
  }, {
    "from": 302,
    "label": "calls",
    "to": 502
  }, {
    "from": 302,
    "label": "calls",
    "to": 502
  }, {
    "from": 302,
    "label": "calls",
    "to": 502
  }, {
    "from": 302,
    "label": "calls",
    "to": 502
  }, {
    "from": 302,
    "label": "calls",
    "to": 502
  }, {
    "from": 137,
    "label": "calls",
    "to": 502
  }, {
    "from": 304,
    "label": "calls",
    "to": 502
  }, {
    "from": 304,
    "label": "calls",
    "to": 502
  }, {
    "from": 304,
    "label": "calls",
    "to": 502
  }, {
    "from": 304,
    "label": "calls",
    "to": 502
  }, {
    "from": 304,
    "label": "calls",
    "to": 502
  }, {
    "from": 304,
    "label": "calls",
    "to": 502
  }, {
    "from": 304,
    "label": "calls",
    "to": 502
  }, {
    "from": 304,
    "label": "calls",
    "to": 502
  }, {
    "from": 304,
    "label": "calls",
    "to": 502
  }, {
    "from": 304,
    "label": "calls",
    "to": 502
  }, {
    "from": 137,
    "label": "calls",
    "to": 502
  }, {
    "from": 308,
    "label": "calls",
    "to": 502
  }, {
    "from": 308,
    "label": "calls",
    "to": 502
  }, {
    "from": 308,
    "label": "calls",
    "to": 502
  }, {
    "from": 308,
    "label": "calls",
    "to": 502
  }, {
    "from": 308,
    "label": "calls",
    "to": 502
  }, {
    "from": 308,
    "label": "calls",
    "to": 502
  }, {
    "from": 308,
    "label": "calls",
    "to": 502
  }, {
    "from": 308,
    "label": "calls",
    "to": 502
  }, {
    "from": 308,
    "label": "calls",
    "to": 502
  }, {
    "from": 308,
    "label": "calls",
    "to": 502
  }, {
    "from": 308,
    "label": "calls",
    "to": 502
  }, {
    "from": 308,
    "label": "calls",
    "to": 502
  }, {
    "from": 308,
    "label": "calls",
    "to": 502
  }, {
    "from": 308,
    "label": "calls",
    "to": 502
  }, {
    "from": 308,
    "label": "calls",
    "to": 502
  }, {
    "from": 308,
    "label": "calls",
    "to": 502
  }, {
    "from": 308,
    "label": "calls",
    "to": 502
  }, {
    "from": 308,
    "label": "calls",
    "to": 502
  }, {
    "from": 308,
    "label": "calls",
    "to": 502
  }, {
    "from": 308,
    "label": "calls",
    "to": 502
  }, {
    "from": 308,
    "label": "calls",
    "to": 502
  }, {
    "from": 308,
    "label": "calls",
    "to": 502
  }, {
    "from": 308,
    "label": "calls",
    "to": 502
  }, {
    "from": 308,
    "label": "calls",
    "to": 502
  }, {
    "from": 308,
    "label": "calls",
    "to": 502
  }, {
    "from": 308,
    "label": "calls",
    "to": 502
  }, {
    "from": 308,
    "label": "calls",
    "to": 502
  }, {
    "from": 308,
    "label": "calls",
    "to": 502
  }, {
    "from": 308,
    "label": "calls",
    "to": 502
  }, {
    "from": 308,
    "label": "calls",
    "to": 502
  }, {
    "from": 308,
    "label": "calls",
    "to": 502
  }, {
    "from": 308,
    "label": "calls",
    "to": 502
  }, {
    "from": 137,
    "label": "calls",
    "to": 502
  }, {
    "from": 498,
    "label": "calls",
    "to": 503
  }, {
    "from": 498,
    "label": "calls",
    "to": 503
  }, {
    "from": 498,
    "label": "calls",
    "to": 503
  }, {
    "from": 498,
    "label": "calls",
    "to": 503
  }, {
    "from": 2,
    "label": "calls",
    "to": 503
  }, {
    "from": 17,
    "label": "calls",
    "to": 503
  }, {
    "from": 302,
    "label": "calls",
    "to": 503
  }, {
    "from": 304,
    "label": "calls",
    "to": 503
  }, {
    "from": 308,
    "label": "calls",
    "to": 503
  }, {
    "from": 320,
    "label": "calls",
    "to": 504
  }, {
    "from": 320,
    "label": "calls",
    "to": 504
  }, {
    "from": 304,
    "label": "calls",
    "to": 505
  }, {
    "from": 308,
    "label": "calls",
    "to": 505
  }, {
    "from": 411,
    "label": "calls",
    "to": 505
  }, {
    "from": 411,
    "label": "calls",
    "to": 505
  }, {
    "from": 413,
    "label": "calls",
    "to": 505
  }, {
    "from": 413,
    "label": "calls",
    "to": 505
  }, {
    "from": 17,
    "label": "calls",
    "to": 499
  }, {
    "from": 409,
    "label": "calls",
    "to": 403
  }, {
    "from": 411,
    "label": "calls",
    "to": 403
  }, {
    "from": 413,
    "label": "calls",
    "to": 403
  }, {
    "from": 339,
    "label": "calls",
    "to": 403
  }, {
    "from": 433,
    "label": "calls",
    "to": 403
  }, {
    "from": 418,
    "label": "calls",
    "to": 403
  }, {
    "from": 453,
    "label": "calls",
    "to": 403
  }, {
    "from": 46,
    "label": "calls",
    "to": 121
  }, {
    "from": 320,
    "label": "calls",
    "to": 137
  }, {
    "from": 137,
    "label": "calls",
    "to": 298
  }, {
    "from": 137,
    "label": "calls",
    "to": 298
  }, {
    "from": 137,
    "label": "calls",
    "to": 298
  }, {
    "from": 137,
    "label": "calls",
    "to": 298
  }, {
    "from": 137,
    "label": "calls",
    "to": 298
  }, {
    "from": 137,
    "label": "calls",
    "to": 298
  }, {
    "from": 308,
    "label": "calls",
    "to": 310
  }, {
    "from": 2,
    "label": "calls",
    "to": 500
  }, {
    "from": 137,
    "label": "calls",
    "to": 500
  }, {
    "from": 477,
    "label": "calls",
    "to": 517
  }, {
    "from": 115,
    "label": "calls",
    "to": 32
  }, {
    "from": 119,
    "label": "calls",
    "to": 32
  }, {
    "from": 308,
    "label": "calls",
    "to": 316
  }, {
    "from": 308,
    "label": "calls",
    "to": 316
  }, {
    "from": 46,
    "label": "calls",
    "to": 119
  }, {
    "from": 137,
    "label": "calls",
    "to": 516
  }, {
    "from": 137,
    "label": "calls",
    "to": 515
  }, {
    "from": 137,
    "label": "calls",
    "to": 515
  }, {
    "from": 17,
    "label": "calls",
    "to": 519
  }, {
    "from": 137,
    "label": "calls",
    "to": 519
  }, {
    "from": 137,
    "label": "calls",
    "to": 519
  }, {
    "from": 320,
    "label": "calls",
    "to": 514
  }, {
    "from": 115,
    "label": "calls",
    "to": 507
  }, {
    "from": 298,
    "label": "calls",
    "to": 507
  }, {
    "from": 304,
    "label": "calls",
    "to": 507
  }, {
    "from": 308,
    "label": "calls",
    "to": 507
  }, {
    "from": 308,
    "label": "calls",
    "to": 507
  }, {
    "from": 308,
    "label": "calls",
    "to": 507
  }, {
    "from": 308,
    "label": "calls",
    "to": 507
  }, {
    "from": 308,
    "label": "calls",
    "to": 507
  }, {
    "from": 308,
    "label": "calls",
    "to": 507
  }, {
    "from": 413,
    "label": "calls",
    "to": 507
  }, {
    "from": 339,
    "label": "calls",
    "to": 507
  }, {
    "from": 339,
    "label": "calls",
    "to": 507
  }, {
    "from": 418,
    "label": "calls",
    "to": 507
  }, {
    "from": 453,
    "label": "calls",
    "to": 507
  }, {
    "from": 453,
    "label": "calls",
    "to": 507
  }, {
    "from": 453,
    "label": "calls",
    "to": 507
  }, {
    "from": 453,
    "label": "calls",
    "to": 507
  }, {
    "from": 46,
    "label": "calls",
    "to": 115
  }, {
    "from": 2,
    "label": "calls",
    "to": 28
  }, {
    "from": 2,
    "label": "calls",
    "to": 28
  }, {
    "from": 2,
    "label": "calls",
    "to": 28
  }, {
    "from": 137,
    "label": "calls",
    "to": 28
  }, {
    "from": 137,
    "label": "calls",
    "to": 28
  }, {
    "from": 137,
    "label": "calls",
    "to": 28
  }, {
    "from": 308,
    "label": "calls",
    "to": 312
  }, {
    "from": 308,
    "label": "calls",
    "to": 312
  }, {
    "from": 308,
    "label": "calls",
    "to": 312
  }, {
    "from": 137,
    "label": "calls",
    "to": 123
  }, {
    "from": 308,
    "label": "calls",
    "to": 513
  }, {
    "from": 333,
    "label": "calls",
    "to": 509
  }, {
    "from": 336,
    "label": "calls",
    "to": 509
  }, {
    "from": 415,
    "label": "calls",
    "to": 509
  }, {
    "from": 435,
    "label": "calls",
    "to": 509
  }, {
    "from": 445,
    "label": "calls",
    "to": 509
  }, {
    "from": 450,
    "label": "calls",
    "to": 509
  }, {
    "from": 137,
    "label": "calls",
    "to": 518
  }, {
    "from": 453,
    "label": "calls",
    "to": 518
  }, {
    "from": 28,
    "label": "calls",
    "to": 512
  }, {
    "from": 121,
    "label": "calls",
    "to": 46
  }, {
    "from": 123,
    "label": "calls",
    "to": 46
  }, {
    "from": 12,
    "label": "calls",
    "to": 501
  }, {
    "from": 15,
    "label": "calls",
    "to": 501
  }, {
    "from": 320,
    "label": "calls",
    "to": 501
  }, {
    "from": 435,
    "label": "calls",
    "to": 520
  }, {
    "from": 445,
    "label": "calls",
    "to": 520
  }, {
    "from": 481,
    "label": "calls",
    "to": 520
  }, {
    "from": 302,
    "label": "calls",
    "to": 521
  }, {
    "from": 339,
    "label": "calls",
    "to": 521
  }, {
    "from": 137,
    "label": "calls",
    "to": 508
  }, {
    "from": 320,
    "label": "calls",
    "to": 508
  }, {
    "from": 44,
    "label": "calls",
    "to": 511
  }, {
    "from": 137,
    "label": "calls",
    "to": 511
  }, {
    "from": 403,
    "label": "calls",
    "to": 511
  }, {
    "from": 403,
    "label": "calls",
    "to": 511
  }, {
    "from": 403,
    "label": "calls",
    "to": 511
  }, {
    "from": 32,
    "label": "calls",
    "to": 510
  }, {
    "from": 46,
    "label": "calls",
    "to": 510
  }, {
    "from": 121,
    "label": "calls",
    "to": 510
  }, {
    "from": 409,
    "label": "calls",
    "to": 510
  }, {
    "from": 411,
    "label": "calls",
    "to": 510
  }, {
    "from": 413,
    "label": "calls",
    "to": 510
  }, {
    "from": 339,
    "label": "calls",
    "to": 510
  }, {
    "from": 433,
    "label": "calls",
    "to": 510
  }, {
    "from": 418,
    "label": "calls",
    "to": 510
  }, {
    "from": 453,
    "label": "calls",
    "to": 510
  }, {
    "from": 298,
    "label": "calls",
    "to": 506
  }, {
    "from": 413,
    "label": "calls",
    "to": 409
  }, {
    "from": 1,
    "label": "contains",
    "to": 498
  }, {
    "from": 498,
    "label": "declares",
    "to": 2
  }, {
    "from": 498,
    "label": "declares",
    "to": 12
  }, {
    "from": 498,
    "label": "declares",
    "to": 15
  }, {
    "from": 498,
    "label": "declares",
    "to": 17
  }, {
    "from": 498,
    "label": "declares",
    "to": 26
  }, {
    "from": 498,
    "label": "declares",
    "to": 28
  }, {
    "from": 498,
    "label": "declares",
    "to": 32
  }, {
    "from": 498,
    "label": "declares",
    "to": 44
  }, {
    "from": 498,
    "label": "declares",
    "to": 46
  }, {
    "from": 498,
    "label": "declares",
    "to": 115
  }, {
    "from": 498,
    "label": "declares",
    "to": 117
  }, {
    "from": 498,
    "label": "declares",
    "to": 119
  }, {
    "from": 498,
    "label": "declares",
    "to": 121
  }, {
    "from": 498,
    "label": "declares",
    "to": 123
  }, {
    "from": 498,
    "label": "declares",
    "to": 137
  }, {
    "from": 498,
    "label": "declares",
    "to": 296
  }, {
    "from": 498,
    "label": "declares",
    "to": 298
  }, {
    "from": 498,
    "label": "declares",
    "to": 300
  }, {
    "from": 498,
    "label": "declares",
    "to": 302
  }, {
    "from": 498,
    "label": "declares",
    "to": 304
  }, {
    "from": 498,
    "label": "declares",
    "to": 306
  }, {
    "from": 498,
    "label": "declares",
    "to": 308
  }, {
    "from": 498,
    "label": "declares",
    "to": 310
  }, {
    "from": 498,
    "label": "declares",
    "to": 312
  }, {
    "from": 498,
    "label": "declares",
    "to": 314
  }, {
    "from": 498,
    "label": "declares",
    "to": 316
  }, {
    "from": 498,
    "label": "declares",
    "to": 318
  }, {
    "from": 498,
    "label": "declares",
    "to": 320
  }, {
    "from": 498,
    "label": "declares",
    "to": 333
  }, {
    "from": 498,
    "label": "declares",
    "to": 336
  }, {
    "from": 498,
    "label": "declares",
    "to": 339
  }, {
    "from": 498,
    "label": "declares",
    "to": 403
  }, {
    "from": 498,
    "label": "declares",
    "to": 405
  }, {
    "from": 498,
    "label": "declares",
    "to": 407
  }, {
    "from": 498,
    "label": "declares",
    "to": 409
  }, {
    "from": 498,
    "label": "declares",
    "to": 411
  }, {
    "from": 498,
    "label": "declares",
    "to": 413
  }, {
    "from": 498,
    "label": "declares",
    "to": 415
  }, {
    "from": 498,
    "label": "declares",
    "to": 418
  }, {
    "from": 498,
    "label": "declares",
    "to": 431
  }, {
    "from": 498,
    "label": "declares",
    "to": 433
  }, {
    "from": 498,
    "label": "declares",
    "to": 435
  }, {
    "from": 498,
    "label": "declares",
    "to": 445
  }, {
    "from": 498,
    "label": "declares",
    "to": 450
  }, {
    "from": 498,
    "label": "declares",
    "to": 453
  }, {
    "from": 498,
    "label": "declares",
    "to": 467
  }, {
    "from": 498,
    "label": "declares",
    "to": 469
  }, {
    "from": 498,
    "label": "declares",
    "to": 471
  }, {
    "from": 498,
    "label": "declares",
    "to": 473
  }, {
    "from": 498,
    "label": "declares",
    "to": 475
  }, {
    "from": 498,
    "label": "declares",
    "to": 477
  }, {
    "from": 498,
    "label": "declares",
    "to": 481
  }, {
    "from": 498,
    "label": "declares",
    "to": 485
  }, {
    "from": 498,
    "label": "declares",
    "to": 486
  }, {
    "from": 498,
    "label": "declares",
    "to": 487
  }, {
    "from": 498,
    "label": "declares",
    "to": 489
  }, {
    "from": 498,
    "label": "declares",
    "to": 490
  }, {
    "from": 498,
    "label": "declares",
    "to": 492
  }, {
    "from": 498,
    "label": "declares",
    "to": 494
  }, {
    "from": 498,
    "label": "declares",
    "to": 496
  }, {
    "from": 1,
    "label": "contains",
    "to": 522
  }, {
    "from": 1,
    "label": "contains",
    "to": 523
  }, {
    "from": 522,
    "label": "initializes",
    "to": 524
  }, {
    "from": 524,
    "label": "assigns",
    "to": 525
  }, {
    "from": 525,
    "label": "assigns",
    "to": 526
  }, {
    "from": 526,
    "label": "assigns",
    "to": 527
  }, {
    "from": 525,
    "label": "assigns",
    "to": 528
  }, {
    "from": 528,
    "label": "assigns",
    "to": 529
  }, {
    "from": 525,
    "label": "assigns",
    "to": 530
  }, {
    "from": 530,
    "label": "assigns",
    "to": 531
  }, {
    "from": 525,
    "label": "assigns",
    "to": 532
  }, {
    "from": 532,
    "label": "assigns",
    "to": 533
  }, {
    "from": 522,
    "label": "initializes",
    "to": 534
  }, {
    "from": 534,
    "label": "assigns",
    "to": 535
  }, {
    "from": 535,
    "label": "assigns",
    "to": 536
  }, {
    "from": 536,
    "label": "assigns",
    "to": 537
  }, {
    "from": 522,
    "label": "initializes",
    "to": 538
  }, {
    "from": 538,
    "label": "assigns",
    "to": 539
  }, {
    "from": 539,
    "label": "assigns",
    "to": 540
  }, {
    "from": 540,
    "label": "assigns",
    "to": 541
  }, {
    "from": 539,
    "label": "assigns",
    "to": 542
  }, {
    "from": 542,
    "label": "assigns",
    "to": 543
  }, {
    "from": 539,
    "label": "assigns",
    "to": 544
  }, {
    "from": 544,
    "label": "assigns",
    "to": 545
  }, {
    "from": 539,
    "label": "assigns",
    "to": 546
  }, {
    "from": 546,
    "label": "assigns",
    "to": 547
  }, {
    "from": 539,
    "label": "assigns",
    "to": 548
  }, {
    "from": 548,
    "label": "assigns",
    "to": 549
  }, {
    "from": 522,
    "label": "initializes",
    "to": 550
  }, {
    "from": 550,
    "label": "assigns",
    "to": 551
  }, {
    "from": 57,
    "label": "hasArgument",
    "to": 485
  }, {
    "from": 104,
    "label": "hasArgument",
    "to": 486
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "luacom5",
    "type": "module"
  }, {
    "id": 2,
    "text": "function luacomE.ExportConstants(obj, const_table)\r\n\r\n  if luacomE.GetType(obj) == \"LuaCOM\" then\r\n     obj = luacom.GetTypeInfo(obj)\r\n  end\r\n  \r\n  if luacomE.GetType(obj) == \"ITypeInfo\" then\r\n    obj = obj:GetTypeLib()\r\n  end\r\n  \r\n  assert(luacomE.GetType(obj) == \"ITypeLib\")\r\n  \r\n  if const_table == nil then\r\n    const_table = _G\r\n  end\r\n  \r\n  obj:ExportConstants(const_table)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "if luacomE.GetType(obj) == \"LuaCOM\" then\r\n     obj = luacom.GetTypeInfo(obj)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 4,
    "text": "obj = luacom.GetTypeInfo(obj)",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "if luacomE.GetType(obj) == \"ITypeInfo\" then\r\n    obj = obj:GetTypeLib()\r\n  end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "obj = obj:GetTypeLib()",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "assert(luacomE.GetType(obj) == \"ITypeLib\")",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "if const_table == nil then\r\n    const_table = _G\r\n  end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "const_table = _G",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "obj:ExportConstants(const_table)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function luacomE.CreateLocalObject(ID)\r\n  return luacom.CreateObject(ID, \"local_server\")\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function luacomE.CreateInprocObject(ID)\r\n  return luacom.CreateObject(ID, \"inproc_server\")\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function luacomE.pairs(luacom_obj)\r\n\r\n  assert(luacom_obj)\r\n\r\n  local enumerator = luacom.GetEnumerator(luacom_obj)\r\n\r\n  if enumerator == nil then\r\n    error(\"Could not get an enumerator\")\r\n    return\r\n  end\r\n\r\n  local function iterator(state, index)\r\n    local value = state:Next()\r\n    \r\n    if value == nil then\r\n      return nil\r\n    else\r\n      return index+1, value\r\n    end\r\n\r\n  end\r\n\r\n  return iterator, enumerator, 0\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "assert(luacom_obj)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "local enumerator = luacom.GetEnumerator(luacom_obj)",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "if enumerator == nil then\r\n    error(\"Could not get an enumerator\")\r\n    return\r\n  end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "error(\"Could not get an enumerator\")",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "local function iterator(state, index)\r\n    local value = state:Next()\r\n    \r\n    if value == nil then\r\n      return nil\r\n    else\r\n      return index+1, value\r\n    end\r\n\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 23,
    "text": "local value = state:Next()",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "if value == nil then\r\n      return nil\r\n    else\r\n      return index+1, value\r\n    end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "local function iterator(state, index)\r\n    local value = state:Next()\r\n    \r\n    if value == nil then\r\n      return nil\r\n    else\r\n      return index+1, value\r\n    end\r\n\r\n  end",
    "type": "function"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function luacomE.GetType(obj)\r\n  local typetable = getmetatable(obj)\r\n  \r\n  if typetable ~= nil then\r\n    return typetable.type\r\n  else\r\n    return nil\r\n  end\r\n  \r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "local typetable = getmetatable(obj)",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "if typetable ~= nil then\r\n    return typetable.type\r\n  else\r\n    return nil\r\n  end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function luacomE._copyFields(dest, src, fields)\r\n  local function copyField(i,field)\r\n    local src_field, dest_field\r\n    if type(field) == \"table\" then\r\n      src_field = field[2]\r\n      dest_field = field[1]\r\n    else\r\n      src_field = field\r\n      dest_field = field\r\n    end\r\n    \r\n    if src[src_field] ~= \"\" then\r\n      dest[dest_field] = src[src_field]\r\n    end\r\n  end\r\n  \r\n  table.foreach(fields, copyField)\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "local function copyField(i,field)\r\n    local src_field, dest_field\r\n    if type(field) == \"table\" then\r\n      src_field = field[2]\r\n      dest_field = field[1]\r\n    else\r\n      src_field = field\r\n      dest_field = field\r\n    end\r\n    \r\n    if src[src_field] ~= \"\" then\r\n      dest[dest_field] = src[src_field]\r\n    end\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 34,
    "text": "local src_field, dest_field",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "if type(field) == \"table\" then\r\n      src_field = field[2]\r\n      dest_field = field[1]\r\n    else\r\n      src_field = field\r\n      dest_field = field\r\n    end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "src_field = field[2]",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "dest_field = field[1]",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "src_field = field",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "dest_field = field",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "if src[src_field] ~= \"\" then\r\n      dest[dest_field] = src[src_field]\r\n    end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "dest[dest_field] = src[src_field]",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "table.foreach(fields, copyField)",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "local function copyField(i,field)\r\n    local src_field, dest_field\r\n    if type(field) == \"table\" then\r\n      src_field = field[2]\r\n      dest_field = field[1]\r\n    else\r\n      src_field = field\r\n      dest_field = field\r\n    end\r\n    \r\n    if src[src_field] ~= \"\" then\r\n      dest[dest_field] = src[src_field]\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function luacomE.FillTypeInfo(rawTypeInfo)\r\n\r\n  if rawTypeInfo.FilledTypeInfo then\r\n    return rawTypeInfo.FilledTypeInfo\r\n  end\r\n  \r\n  local doc, attr\r\n  local typeinfo = {}\r\n  \r\n  rawTypeInfo.FilledTypeInfo = typeinfo\r\n    \r\n  -- Basic information  \r\n  doc = rawTypeInfo:GetDocumentation()\r\n  typeinfo.name = doc.name\r\n  typeinfo.description = doc.helpstring\r\n\r\n  -- Now the attributes\r\n  attr = rawTypeInfo:GetTypeAttr()\r\n  \r\n  typeinfo.type = attr.typekind\r\n  typeinfo.guid = attr.GUID\r\n\r\n  -- copies flags\r\n  table.foreach(attr.flags, function(i,v) typeinfo[i] = v end)\r\n  \r\n  -- function to fill the different types of elements\r\n  local function fillMethods(methods, num_methods)\r\n    local i, index, method, rawmethod\r\n    \r\n    index = 1\r\n    for i = 0, num_methods - 1 do\r\n      method = {}\r\n      rawmethod = rawTypeInfo:GetFuncDesc(i)\r\n\r\n      if rawmethod ~= nil then\r\n        method.rawMethod = rawmethod\r\n\r\n        fields = {\"name\", \"description\",\r\n          \"helpfile\", \"helpcontext\",\r\n          {\"dispid\", \"memid\"}, {\"typeinv\", \"invkind\"},\r\n          {\"num_params\", \"Params\"}, \"parameters\", \"type\"\r\n        }\r\n        \r\n        luacomE._copyFields(method, rawmethod, fields)\r\n\r\n        local prototype\r\n        if method.type then\r\n          prototype = method.type..\" \"..method.name\r\n          prototype = prototype..\"(\"\r\n        end\r\n        \r\n        -- builds prototype\r\n        if method.parameters then\r\n          -- builds parameter list\r\n          local first_param = true\r\n          \r\n          local function add_param(i, param)\r\n\r\n            if first_param then\r\n              first_param = false\r\n            else\r\n              prototype = prototype..\", \"\r\n              first_param = false\r\n            end\r\n            \r\n            if param.type then\r\n              prototype = prototype..param.type..\" \"\r\n            end\r\n            \r\n            prototype = prototype..param.name\r\n          end\r\n          \r\n          table.foreachi(method.parameters, add_param)\r\n\r\n        end\r\n\r\n        if prototype then      \r\n          prototype = prototype..\")\"\r\n          method.prototype = prototype\r\n        end\r\n        \r\n        methods[index] = method        \r\n        index = index+1\r\n      end\r\n\r\n    end\r\n  end\r\n\r\n  local function fillEnum(values, num_values)\r\n    local i, rawConstant\r\n    \r\n    local fields = {\"name\", \"value\"}\r\n    \r\n    for i = 0, num_values - 1 do\r\n      rawConstant = rawTypeInfo:GetVarDesc(i)\r\n      constant = {}\r\n      constant.rawConstant = rawConstant\r\n      luacomE._copyFields(constant, rawConstant, fields)\r\n     \r\n      values[i+1] = constant\r\n    end\r\n  end\r\n  \r\n  \r\n  local function fillCoClass(interfaces, num_interfaces)\r\n    local i, interface, rawinterface, typeflags\r\n    \r\n    for i = 0, num_interfaces - 1 do\r\n      rawinterface = rawTypeInfo:GetImplType(i)\r\n      interface = {}\r\n      interface.dispinterface = luacomE.FillTypeInfo(rawinterface)\r\n\r\n      -- copies impltypeflags      \r\n      typeflags = rawTypeInfo:GetImplTypeFlags(i)\r\n      table.foreach(typeflags, function(i,v) interface[i] = v end)\r\n  \r\n      interfaces[i+1] = interface      \r\n    end\r\n  end\r\n  \r\n  \r\n  -- Creates tables to hold components of the typeinfo\r\n  \r\n  if attr.typekind == \"dispinterface\" then\r\n    typeinfo.methods = {}\r\n    fillMethods(typeinfo.methods, attr.Funcs)\r\n  elseif attr.typekind == \"coclass\" then\r\n    typeinfo.interfaces = {}\r\n    fillCoClass(typeinfo.interfaces, attr.ImplTypes)\r\n  elseif attr.typekind == \"enumeration\" then\r\n    typeinfo.values = {}\r\n    fillEnum(typeinfo.values, attr.Vars)\r\n  end\r\n  \r\n  return typeinfo\r\n\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "if rawTypeInfo.FilledTypeInfo then\r\n    return rawTypeInfo.FilledTypeInfo\r\n  end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "local doc, attr",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "local typeinfo = {}",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "rawTypeInfo.FilledTypeInfo = typeinfo",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "doc = rawTypeInfo:GetDocumentation()",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "typeinfo.name = doc.name",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "typeinfo.description = doc.helpstring",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "attr = rawTypeInfo:GetTypeAttr()",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "typeinfo.type = attr.typekind",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "typeinfo.guid = attr.GUID",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "table.foreach(attr.flags, function(i,v) typeinfo[i] = v end)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "typeinfo[i] = v",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "local function fillMethods(methods, num_methods)\r\n    local i, index, method, rawmethod\r\n    \r\n    index = 1\r\n    for i = 0, num_methods - 1 do\r\n      method = {}\r\n      rawmethod = rawTypeInfo:GetFuncDesc(i)\r\n\r\n      if rawmethod ~= nil then\r\n        method.rawMethod = rawmethod\r\n\r\n        fields = {\"name\", \"description\",\r\n          \"helpfile\", \"helpcontext\",\r\n          {\"dispid\", \"memid\"}, {\"typeinv\", \"invkind\"},\r\n          {\"num_params\", \"Params\"}, \"parameters\", \"type\"\r\n        }\r\n        \r\n        luacomE._copyFields(method, rawmethod, fields)\r\n\r\n        local prototype\r\n        if method.type then\r\n          prototype = method.type..\" \"..method.name\r\n          prototype = prototype..\"(\"\r\n        end\r\n        \r\n        -- builds prototype\r\n        if method.parameters then\r\n          -- builds parameter list\r\n          local first_param = true\r\n          \r\n          local function add_param(i, param)\r\n\r\n            if first_param then\r\n              first_param = false\r\n            else\r\n              prototype = prototype..\", \"\r\n              first_param = false\r\n            end\r\n            \r\n            if param.type then\r\n              prototype = prototype..param.type..\" \"\r\n            end\r\n            \r\n            prototype = prototype..param.name\r\n          end\r\n          \r\n          table.foreachi(method.parameters, add_param)\r\n\r\n        end\r\n\r\n        if prototype then      \r\n          prototype = prototype..\")\"\r\n          method.prototype = prototype\r\n        end\r\n        \r\n        methods[index] = method        \r\n        index = index+1\r\n      end\r\n\r\n    end\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 60,
    "text": "local i, index, method, rawmethod",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "index = 1",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "for i = 0, num_methods - 1 do\r\n      method = {}\r\n      rawmethod = rawTypeInfo:GetFuncDesc(i)\r\n\r\n      if rawmethod ~= nil then\r\n        method.rawMethod = rawmethod\r\n\r\n        fields = {\"name\", \"description\",\r\n          \"helpfile\", \"helpcontext\",\r\n          {\"dispid\", \"memid\"}, {\"typeinv\", \"invkind\"},\r\n          {\"num_params\", \"Params\"}, \"parameters\", \"type\"\r\n        }\r\n        \r\n        luacomE._copyFields(method, rawmethod, fields)\r\n\r\n        local prototype\r\n        if method.type then\r\n          prototype = method.type..\" \"..method.name\r\n          prototype = prototype..\"(\"\r\n        end\r\n        \r\n        -- builds prototype\r\n        if method.parameters then\r\n          -- builds parameter list\r\n          local first_param = true\r\n          \r\n          local function add_param(i, param)\r\n\r\n            if first_param then\r\n              first_param = false\r\n            else\r\n              prototype = prototype..\", \"\r\n              first_param = false\r\n            end\r\n            \r\n            if param.type then\r\n              prototype = prototype..param.type..\" \"\r\n            end\r\n            \r\n            prototype = prototype..param.name\r\n          end\r\n          \r\n          table.foreachi(method.parameters, add_param)\r\n\r\n        end\r\n\r\n        if prototype then      \r\n          prototype = prototype..\")\"\r\n          method.prototype = prototype\r\n        end\r\n        \r\n        methods[index] = method        \r\n        index = index+1\r\n      end\r\n\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 63,
    "text": "method = {}",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "rawmethod = rawTypeInfo:GetFuncDesc(i)",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "if rawmethod ~= nil then\r\n        method.rawMethod = rawmethod\r\n\r\n        fields = {\"name\", \"description\",\r\n          \"helpfile\", \"helpcontext\",\r\n          {\"dispid\", \"memid\"}, {\"typeinv\", \"invkind\"},\r\n          {\"num_params\", \"Params\"}, \"parameters\", \"type\"\r\n        }\r\n        \r\n        luacomE._copyFields(method, rawmethod, fields)\r\n\r\n        local prototype\r\n        if method.type then\r\n          prototype = method.type..\" \"..method.name\r\n          prototype = prototype..\"(\"\r\n        end\r\n        \r\n        -- builds prototype\r\n        if method.parameters then\r\n          -- builds parameter list\r\n          local first_param = true\r\n          \r\n          local function add_param(i, param)\r\n\r\n            if first_param then\r\n              first_param = false\r\n            else\r\n              prototype = prototype..\", \"\r\n              first_param = false\r\n            end\r\n            \r\n            if param.type then\r\n              prototype = prototype..param.type..\" \"\r\n            end\r\n            \r\n            prototype = prototype..param.name\r\n          end\r\n          \r\n          table.foreachi(method.parameters, add_param)\r\n\r\n        end\r\n\r\n        if prototype then      \r\n          prototype = prototype..\")\"\r\n          method.prototype = prototype\r\n        end\r\n        \r\n        methods[index] = method        \r\n        index = index+1\r\n      end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "method.rawMethod = rawmethod",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "fields = {\"name\", \"description\",\r\n          \"helpfile\", \"helpcontext\",\r\n          {\"dispid\", \"memid\"}, {\"typeinv\", \"invkind\"},\r\n          {\"num_params\", \"Params\"}, \"parameters\", \"type\"\r\n        }",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "luacomE._copyFields(method, rawmethod, fields)",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "local prototype",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "if method.type then\r\n          prototype = method.type..\" \"..method.name\r\n          prototype = prototype..\"(\"\r\n        end",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "prototype = method.type..\" \"..method.name",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "prototype = prototype..\"(\"",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "if method.parameters then\r\n          -- builds parameter list\r\n          local first_param = true\r\n          \r\n          local function add_param(i, param)\r\n\r\n            if first_param then\r\n              first_param = false\r\n            else\r\n              prototype = prototype..\", \"\r\n              first_param = false\r\n            end\r\n            \r\n            if param.type then\r\n              prototype = prototype..param.type..\" \"\r\n            end\r\n            \r\n            prototype = prototype..param.name\r\n          end\r\n          \r\n          table.foreachi(method.parameters, add_param)\r\n\r\n        end",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "local first_param = true",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "local function add_param(i, param)\r\n\r\n            if first_param then\r\n              first_param = false\r\n            else\r\n              prototype = prototype..\", \"\r\n              first_param = false\r\n            end\r\n            \r\n            if param.type then\r\n              prototype = prototype..param.type..\" \"\r\n            end\r\n            \r\n            prototype = prototype..param.name\r\n          end",
    "type": "statement:localfunction"
  }, {
    "id": 76,
    "text": "if first_param then\r\n              first_param = false\r\n            else\r\n              prototype = prototype..\", \"\r\n              first_param = false\r\n            end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "first_param = false",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "prototype = prototype..\", \"",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "if param.type then\r\n              prototype = prototype..param.type..\" \"\r\n            end",
    "type": "statement:if"
  }, {
    "id": 80,
    "text": "prototype = prototype..param.type..\" \"",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "prototype = prototype..param.name",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "table.foreachi(method.parameters, add_param)",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "if prototype then      \r\n          prototype = prototype..\")\"\r\n          method.prototype = prototype\r\n        end",
    "type": "statement:if"
  }, {
    "id": 84,
    "text": "prototype = prototype..\")\"",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "method.prototype = prototype",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "methods[index] = method",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "index = index+1",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "local function fillEnum(values, num_values)\r\n    local i, rawConstant\r\n    \r\n    local fields = {\"name\", \"value\"}\r\n    \r\n    for i = 0, num_values - 1 do\r\n      rawConstant = rawTypeInfo:GetVarDesc(i)\r\n      constant = {}\r\n      constant.rawConstant = rawConstant\r\n      luacomE._copyFields(constant, rawConstant, fields)\r\n     \r\n      values[i+1] = constant\r\n    end\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 89,
    "text": "local i, rawConstant",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "local fields = {\"name\", \"value\"}",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "for i = 0, num_values - 1 do\r\n      rawConstant = rawTypeInfo:GetVarDesc(i)\r\n      constant = {}\r\n      constant.rawConstant = rawConstant\r\n      luacomE._copyFields(constant, rawConstant, fields)\r\n     \r\n      values[i+1] = constant\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 92,
    "text": "rawConstant = rawTypeInfo:GetVarDesc(i)",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "constant = {}",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "constant.rawConstant = rawConstant",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "luacomE._copyFields(constant, rawConstant, fields)",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "values[i+1] = constant",
    "type": "statement:assign"
  }, {
    "id": 97,
    "text": "local function fillCoClass(interfaces, num_interfaces)\r\n    local i, interface, rawinterface, typeflags\r\n    \r\n    for i = 0, num_interfaces - 1 do\r\n      rawinterface = rawTypeInfo:GetImplType(i)\r\n      interface = {}\r\n      interface.dispinterface = luacomE.FillTypeInfo(rawinterface)\r\n\r\n      -- copies impltypeflags      \r\n      typeflags = rawTypeInfo:GetImplTypeFlags(i)\r\n      table.foreach(typeflags, function(i,v) interface[i] = v end)\r\n  \r\n      interfaces[i+1] = interface      \r\n    end\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 98,
    "text": "local i, interface, rawinterface, typeflags",
    "type": "statement:localassign"
  }, {
    "id": 99,
    "text": "for i = 0, num_interfaces - 1 do\r\n      rawinterface = rawTypeInfo:GetImplType(i)\r\n      interface = {}\r\n      interface.dispinterface = luacomE.FillTypeInfo(rawinterface)\r\n\r\n      -- copies impltypeflags      \r\n      typeflags = rawTypeInfo:GetImplTypeFlags(i)\r\n      table.foreach(typeflags, function(i,v) interface[i] = v end)\r\n  \r\n      interfaces[i+1] = interface      \r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 100,
    "text": "rawinterface = rawTypeInfo:GetImplType(i)",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "interface = {}",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "interface.dispinterface = luacomE.FillTypeInfo(rawinterface)",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "typeflags = rawTypeInfo:GetImplTypeFlags(i)",
    "type": "statement:assign"
  }, {
    "id": 104,
    "text": "table.foreach(typeflags, function(i,v) interface[i] = v end)",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "interface[i] = v",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "interfaces[i+1] = interface",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "if attr.typekind == \"dispinterface\" then\r\n    typeinfo.methods = {}\r\n    fillMethods(typeinfo.methods, attr.Funcs)\r\n  elseif attr.typekind == \"coclass\" then\r\n    typeinfo.interfaces = {}\r\n    fillCoClass(typeinfo.interfaces, attr.ImplTypes)\r\n  elseif attr.typekind == \"enumeration\" then\r\n    typeinfo.values = {}\r\n    fillEnum(typeinfo.values, attr.Vars)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 108,
    "text": "typeinfo.methods = {}",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "fillMethods(typeinfo.methods, attr.Funcs)",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "typeinfo.interfaces = {}",
    "type": "statement:assign"
  }, {
    "id": 111,
    "text": "fillCoClass(typeinfo.interfaces, attr.ImplTypes)",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "typeinfo.values = {}",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "fillEnum(typeinfo.values, attr.Vars)",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 115,
    "text": "local function fillMethods(methods, num_methods)\r\n    local i, index, method, rawmethod\r\n    \r\n    index = 1\r\n    for i = 0, num_methods - 1 do\r\n      method = {}\r\n      rawmethod = rawTypeInfo:GetFuncDesc(i)\r\n\r\n      if rawmethod ~= nil then\r\n        method.rawMethod = rawmethod\r\n\r\n        fields = {\"name\", \"description\",\r\n          \"helpfile\", \"helpcontext\",\r\n          {\"dispid\", \"memid\"}, {\"typeinv\", \"invkind\"},\r\n          {\"num_params\", \"Params\"}, \"parameters\", \"type\"\r\n        }\r\n        \r\n        luacomE._copyFields(method, rawmethod, fields)\r\n\r\n        local prototype\r\n        if method.type then\r\n          prototype = method.type..\" \"..method.name\r\n          prototype = prototype..\"(\"\r\n        end\r\n        \r\n        -- builds prototype\r\n        if method.parameters then\r\n          -- builds parameter list\r\n          local first_param = true\r\n          \r\n          local function add_param(i, param)\r\n\r\n            if first_param then\r\n              first_param = false\r\n            else\r\n              prototype = prototype..\", \"\r\n              first_param = false\r\n            end\r\n            \r\n            if param.type then\r\n              prototype = prototype..param.type..\" \"\r\n            end\r\n            \r\n            prototype = prototype..param.name\r\n          end\r\n          \r\n          table.foreachi(method.parameters, add_param)\r\n\r\n        end\r\n\r\n        if prototype then      \r\n          prototype = prototype..\")\"\r\n          method.prototype = prototype\r\n        end\r\n        \r\n        methods[index] = method        \r\n        index = index+1\r\n      end\r\n\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 116,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 117,
    "text": "local function add_param(i, param)\r\n\r\n            if first_param then\r\n              first_param = false\r\n            else\r\n              prototype = prototype..\", \"\r\n              first_param = false\r\n            end\r\n            \r\n            if param.type then\r\n              prototype = prototype..param.type..\" \"\r\n            end\r\n            \r\n            prototype = prototype..param.name\r\n          end",
    "type": "function"
  }, {
    "id": 118,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 119,
    "text": "local function fillEnum(values, num_values)\r\n    local i, rawConstant\r\n    \r\n    local fields = {\"name\", \"value\"}\r\n    \r\n    for i = 0, num_values - 1 do\r\n      rawConstant = rawTypeInfo:GetVarDesc(i)\r\n      constant = {}\r\n      constant.rawConstant = rawConstant\r\n      luacomE._copyFields(constant, rawConstant, fields)\r\n     \r\n      values[i+1] = constant\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 120,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 121,
    "text": "local function fillCoClass(interfaces, num_interfaces)\r\n    local i, interface, rawinterface, typeflags\r\n    \r\n    for i = 0, num_interfaces - 1 do\r\n      rawinterface = rawTypeInfo:GetImplType(i)\r\n      interface = {}\r\n      interface.dispinterface = luacomE.FillTypeInfo(rawinterface)\r\n\r\n      -- copies impltypeflags      \r\n      typeflags = rawTypeInfo:GetImplTypeFlags(i)\r\n      table.foreach(typeflags, function(i,v) interface[i] = v end)\r\n  \r\n      interfaces[i+1] = interface      \r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 122,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 123,
    "text": "function luacomE.FillTypeLib(rawtlb)\r\n\r\n  if rawtlb._luacom_isfilled then\r\n    return rawtlb\r\n  end\r\n  \r\n  -- Stores type library information\r\n  local tlb = {}\r\n  tlb._luacom_isfilled = true\r\n  \r\n  tlb.rawtlb = rawtlb\r\n  \r\n  local doc = rawtlb:GetDocumentation()\r\n  \r\n  tlb.name = doc.name\r\n  tlb.description = doc.helpstring\r\n  \r\n  -- stores typeinfos\r\n  \r\n  local typeinfo, rawtypeinfo, attr\r\n\r\n  for i = 0, rawtlb:GetTypeInfoCount() - 1 do\r\n  \r\n    rawTypeInfo = rawtlb:GetTypeInfo(i)\r\n    typeinfo = luacomE.FillTypeInfo(rawTypeInfo)\r\n    tlb[i+1] = typeinfo\r\n    \r\n  end\r\n    \r\n  return tlb\r\nend",
    "type": "function"
  }, {
    "id": 124,
    "text": "if rawtlb._luacom_isfilled then\r\n    return rawtlb\r\n  end",
    "type": "statement:if"
  }, {
    "id": 125,
    "text": "local tlb = {}",
    "type": "statement:localassign"
  }, {
    "id": 126,
    "text": "tlb._luacom_isfilled = true",
    "type": "statement:assign"
  }, {
    "id": 127,
    "text": "tlb.rawtlb = rawtlb",
    "type": "statement:assign"
  }, {
    "id": 128,
    "text": "local doc = rawtlb:GetDocumentation()",
    "type": "statement:localassign"
  }, {
    "id": 129,
    "text": "tlb.name = doc.name",
    "type": "statement:assign"
  }, {
    "id": 130,
    "text": "tlb.description = doc.helpstring",
    "type": "statement:assign"
  }, {
    "id": 131,
    "text": "local typeinfo, rawtypeinfo, attr",
    "type": "statement:localassign"
  }, {
    "id": 132,
    "text": "for i = 0, rawtlb:GetTypeInfoCount() - 1 do\r\n  \r\n    rawTypeInfo = rawtlb:GetTypeInfo(i)\r\n    typeinfo = luacomE.FillTypeInfo(rawTypeInfo)\r\n    tlb[i+1] = typeinfo\r\n    \r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 133,
    "text": "rawTypeInfo = rawtlb:GetTypeInfo(i)",
    "type": "statement:assign"
  }, {
    "id": 134,
    "text": "typeinfo = luacomE.FillTypeInfo(rawTypeInfo)",
    "type": "statement:assign"
  }, {
    "id": 135,
    "text": "tlb[i+1] = typeinfo",
    "type": "statement:assign"
  }, {
    "id": 136,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 137,
    "text": "function luacomE.DumpTypeLib(obj, htmlfile)\r\n\r\n  local tlb, rawtlb\r\n\r\n  if type(obj) == \"string\" then\r\n    rawtlb = luacom.LoadTypeLibrary(obj)\r\n  elseif luacomE.GetType(obj) == \"ITypeLib\" then\r\n    rawtlb = obj\r\n  elseif luacomE.GetType(obj) == \"LuaCOM\" then\r\n    obj = luacom.GetTypeInfo(obj)\r\n    rawtlb = obj:GetTypeLib()\r\n  elseif luacomE.GetType(obj) == \"ITypeInfo\" then\r\n    rawtlb = obj:GetTypeLib()\r\n  end\r\n  \r\n  if rawtlb == nil then\r\n\t  error(\"Type library not found.\")\r\n  end\r\n  \r\n  tlb = luacomE.FillTypeLib(rawtlb)  \r\n  rawtlb = nil\r\n  \r\n\r\n  if htmlfile == nil then\r\n  \thtmlfile = tlb.name..\".html\"\r\n  elseif string.sub(htmlfile, -1) == \"\\\\\" then\r\n  \thtmlfile = htmlfile..tlb.name..\".html\"\r\n  end\r\n  \r\n  local filehandle = io.open(htmlfile, \"w\")\r\n  \r\n  if filehandle == nil then\r\n    error(\"Could not create \"..htmlfile..\": file exists\")\r\n  end\r\n  \r\n  io.output(filehandle)\r\n  \r\n  -- writes html header\r\n  io.write(\"<html>\\n\")\r\n  io.write(\"<head>\")\r\n  \r\n  -- writes title\r\n  io.write(\"<title>\")\r\n  \r\n  if tlb.description then\r\n    io.write(tlb.description)\r\n  else\r\n    io.write(tlb.name)\r\n  end\r\n   \r\n  io.write(\"</title>\\n\")\r\n  \r\n  io.write(\"<h1>\")\r\n  \r\n  if tlb.description then\r\n    io.write(tlb.description)\r\n  else\r\n    io.write(tlb.name)\r\n  end\r\n  \r\n  io.write(\" Type Library\")\r\n  \r\n  io.write(\"</h1>\\n\")\r\n  io.write(\"<hr>\\n\")\r\n  \r\n  --\r\n  -- First, makes an index for the entire type library\r\n  --\r\n  \r\n  io.write(\"<h2>Summary</h2>\\n\")\r\n\r\n  -- Output function\r\n  local function write_typeinfo(i, typeinfo)\r\n    io.write(\"<li>\")\r\n    io.write(\"<b>\")\r\n\r\n    if typeinfo.type ~= \"dispinterface\" or typeinfo.dispatchable then\r\n      io.write(\"<a href=\\\"#\"..typeinfo.name..\"\\\">\"..typeinfo.name..\"</a>\")\r\n    else\r\n      io.write(typeinfo.name)\r\n    end\r\n    \r\n    io.write(\"</b>\")\r\n    io.write(\"</li>\")\r\n    \r\n    if typeinfo.description and typeinfo.description ~= \"\" then\r\n      io.write(\" - \"..typeinfo.description)\r\n    end\r\n\r\n    io.write(\"</li>\\n\")\r\n  end\r\n\r\n  -- filter function\r\n  local function filter_typeinfo(type)\r\n    local function filter(i,typeinfo)\r\n\r\n      if typeinfo.type == type then\r\n        map_function(i, typeinfo)\r\n      end\r\n    end\r\n    \r\n    table.foreachi(tlb, filter)\r\n  end\r\n  \r\n  map_function = write_typeinfo\r\n  \r\n  io.write(\"<h3>Components</h3>\\n\")\r\n  filter_typeinfo(\"coclass\")\r\n\r\n  io.write(\"<h3>Enumerations</h3>\\n\")\r\n  filter_typeinfo(\"enumeration\")\r\n\r\n  io.write(\"<h3>Interfaces</h3>\\n\")\r\n  filter_typeinfo(\"dispinterface\")\r\n  \r\n  --\r\n  -- Now, describe each element\r\n  --\r\n  \r\n  io.write(\"<hr>\\n\")\r\n  io.write(\"<h2>Detailed description</h2>\\n\")\r\n  \r\n  -- describes coclasses\r\n\r\n  io.write(\"<h3>Components Classes</h3>\\n\")\r\n\r\n  local function describe_coclass(i, typeinfo)\r\n    assert(typeinfo.type == \"coclass\")\r\n    \r\n    if typeinfo.restricted or typeinfo.hidden then\r\n      return\r\n    end\r\n    \r\n    io.write(\"<h4>\")\r\n    io.write(\"<a name=\\\"\"..typeinfo.name..\"\\\"></a>\")\r\n    io.write(typeinfo.name)\r\n    \r\n    io.write(\"</h4>\\n\")\r\n    \r\n    if typeinfo.description then\r\n      io.write(typeinfo.description..\"<p>\")\r\n    end\r\n    \r\n    io.write(\"<pre>\"..typeinfo.guid..\"</pre><p>\")\r\n    \r\n    local i, default, source\r\n    \r\n    -- locates the default interface and the source interface\r\n    for i=1, table.getn(typeinfo.interfaces) do\r\n    \r\n      if typeinfo.interfaces[i].source and source == nil then\r\n        source = typeinfo.interfaces[i].dispinterface\r\n      elseif typeinfo.interfaces[i].source \r\n             and typeinfo.interfaces[i].default then\r\n        source = typeinfo.interfaces[i].dispinterface\r\n      end\r\n      \r\n      if not typeinfo.interfaces[i].source and default == nil then\r\n        default = typeinfo.interfaces[i].dispinterface\r\n      elseif typeinfo.interfaces[i].default \r\n             and not typeinfo.interfaces[i].source then\r\n        default = typeinfo.interfaces[i].dispinterface\r\n      end\r\n      \r\n    end\r\n    \r\n    if default then    \r\n      if default.dispatchable then\r\n        io.write(\"<a href=\\\"#\"..default.name..\"\\\">\"..default.name..\"</a>\")\r\n      else\r\n        io.write(default.name)\r\n      end\r\n      \r\n      io.write(\" is the default interface for this component.<br>\")\r\n    end\r\n    \r\n    if source then    \r\n      if source.dispatchable then\r\n        io.write(\"<a href=\\\"#\"..source.name..\"\\\">\"..source.name..\"</a>\")\r\n      else\r\n        io.write(source.name)\r\n      end\r\n      \r\n      io.write(\" is the default set of events for this component.<br>\")\r\n    end\r\n\r\n    if typeinfo.appobject then\r\n      io.write(\"This is the Application object.<br>\")\r\n    end\r\n    \r\n    if typeinfo.control then\r\n      io.write(\"This component is an OLE control.<br>\")\r\n    end\r\n    \r\n    if typeinfo.cancreate then\r\n      io.write(\"Instances of this component can be created.<br>\")\r\n    end\r\n   \r\n  end\r\n  \r\n  map_function = describe_coclass\r\n  \r\n  filter_typeinfo(\"coclass\")\r\n  \r\n  \r\n  \r\n  -- describes enumerations\r\n  \r\n  io.write(\"<hr><h3>Enumerations</h3>\\n\")\r\n  \r\n  local function describe_enum(i, typeinfo)\r\n    assert(typeinfo.type == \"enumeration\")\r\n    \r\n    io.write(\"<h4>\")\r\n    io.write(\"<a name=\\\"\"..typeinfo.name..\"\\\"></a>\")\r\n    io.write(typeinfo.name)\r\n    \r\n    io.write(\"</h4>\\n\")\r\n    \r\n    if typeinfo.description and typeinfo.description ~= nil then\r\n      io.write(typeinfo.description..\"<p>\")\r\n    end\r\n    \r\n    local function describe_constant(i, constant)\r\n      io.write(\"<li>\")\r\n      io.write(constant.name..\" = \"..tostring(constant.value))\r\n      io.write(\"</li>\\n\")\r\n    end\r\n    \r\n    io.write(\"<ul>\\n\")\r\n    table.foreachi(typeinfo.values, describe_constant)\r\n    io.write(\"</ul>\\n\")\r\n  end\r\n  \r\n  map_function = describe_enum\r\n  \r\n  filter_typeinfo(\"enumeration\")\r\n    \r\n  \r\n  -- describes interfaces\r\n  \r\n  io.write(\"<hr><h3>Interfaces</h3>\\n\")\r\n  \r\n  local function describe_interface(i, typeinfo)\r\n    assert(typeinfo.type == \"dispinterface\")\r\n    \r\n    io.write(\"<h4>\")\r\n    io.write(\"<a name=\\\"\"..typeinfo.name..\"\\\"></a>\")\r\n    io.write(typeinfo.name)\r\n    io.write(\"</h4>\\n\")\r\n    io.write(\"<pre>\"..typeinfo.guid..\"</pre><p>\")\r\n    \r\n    local function describe_method_use(method)\r\n      io.write(\"<b>LuaCOM examples:</b><br><br>\")\r\n      \r\n      local function param_lister()\r\n        local first_param = true\r\n        local function add_param(i, param)\r\n          if param[\"in\"] or (not param.out) then\r\n            local name\r\n            if param.default then\r\n              local default = tostring(param.default)\r\n              if default == \"\" then default = \"?\" end\r\n              name = param.name .. \"=\" .. default\r\n            else\r\n              name = param.name\r\n            end\r\n            if param.opt then name = \"[\" .. name .. \"]\" end\r\n            if first_param then\r\n              io.write(name)\r\n              first_param = false\r\n            else\r\n              io.write(\", \" .. name) \r\n            end\r\n          end\r\n        end\r\n        return add_param\r\n      end\r\n      \r\n      local function retval_lister(first_retval)\r\n        local has_retval = false\r\n        return function(i, param)\r\n            if param.out then\r\n              if first_retval then\r\n                io.write(param.name)\r\n                first_retval = false\r\n              else\r\n                io.write(\", \" .. param.name)\r\n              end\r\n              has_retval = true\r\n            end\r\n          end, function() return has_retval end\r\n      end\r\n      \r\n      if method.typeinv == \"propget\" then\r\n        if method.num_params == 0 then\r\n          io.write(\"com_obj.\" .. method.name .. \"<br>\")\r\n          io.write(\"com_obj:get\" .. method.name .. \"()\")\r\n        else\r\n          io.write(\"com_obj:get\" .. method.name .. \"(\")\r\n          table.foreachi(method.parameters, param_lister())\r\n          io.write(\")\")\r\n        end\r\n      elseif method.typeinv == \"propput\" then\r\n        if method.num_params == 1 then\r\n          io.write(\"com_obj.\" .. method.name .. \" = \" .. method.parameters[1].name .. \"<br>\")\r\n          io.write(\"com_obj:set\" .. method.name .. \"(\" .. method.parameters[1].name .. \")<br>\")\r\n        else\r\n          io.write(\"com_obj:set\" .. method.name .. \"(\")\r\n          table.foreachi(method.parameters, param_lister())\r\n          io.write(\")\")\r\n        end\r\n      else\r\n          if method.type ~= \"void\" then\r\n            io.write(\"retval\")\r\n            table.foreachi(method.parameters, retval_lister(false))\r\n            io.write(\" = \")\r\n          else\r\n            local lister, checker = retval_lister(true)\r\n            table.foreachi(method.parameters, lister)\r\n            if checker() then io.write(\" = \") end\r\n          end\r\n          io.write(\"com_obj:\" .. method.name .. \"(\")\r\n          table.foreachi(method.parameters, param_lister())\r\n          io.write(\")<br>\")\r\n      end\r\n    end\r\n    \r\n    local function describe_method(i, method)\r\n      if method.rawMethod == nil then\r\n        return\r\n      end\r\n      \r\n      io.write(\"<li>\")\r\n      io.write(method.name)\r\n      \r\n      if method.prototype then\r\n        io.write(\"<pre>\"..method.prototype..\"</pre>\\n\")\r\n      else\r\n        io.write(\"<br>\")\r\n      end\r\n      \r\n      if method.description then\r\n        io.write(method.description..\"<br>\\n\")\r\n      end\r\n      \r\n      describe_method_use(method)\r\n      \r\n      io.write(\"<p>\")\r\n      \r\n      io.write(\"</li>\\n\")\r\n    end\r\n    \r\n    io.write(\"<ul>\\n\")\r\n    table.foreachi(typeinfo.methods, describe_method)\r\n    io.write(\"</ul>\\n\")\r\n  end\r\n  \r\n  map_function = describe_interface\r\n  \r\n  filter_typeinfo(\"dispinterface\")\r\n  \r\n  io.write(\"</html>\")\r\n  \r\n  io.output():close()\r\n  \r\n  return htmlfile\r\n  \r\nend",
    "type": "function"
  }, {
    "id": 138,
    "text": "local tlb, rawtlb",
    "type": "statement:localassign"
  }, {
    "id": 139,
    "text": "if type(obj) == \"string\" then\r\n    rawtlb = luacom.LoadTypeLibrary(obj)\r\n  elseif luacomE.GetType(obj) == \"ITypeLib\" then\r\n    rawtlb = obj\r\n  elseif luacomE.GetType(obj) == \"LuaCOM\" then\r\n    obj = luacom.GetTypeInfo(obj)\r\n    rawtlb = obj:GetTypeLib()\r\n  elseif luacomE.GetType(obj) == \"ITypeInfo\" then\r\n    rawtlb = obj:GetTypeLib()\r\n  end",
    "type": "statement:if"
  }, {
    "id": 140,
    "text": "rawtlb = luacom.LoadTypeLibrary(obj)",
    "type": "statement:assign"
  }, {
    "id": 141,
    "text": "rawtlb = obj",
    "type": "statement:assign"
  }, {
    "id": 142,
    "text": "rawtlb = obj:GetTypeLib()",
    "type": "statement:assign"
  }, {
    "id": 143,
    "text": "if rawtlb == nil then\r\n\t  error(\"Type library not found.\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 144,
    "text": "error(\"Type library not found.\")",
    "type": "statement:functioncall"
  }, {
    "id": 145,
    "text": "tlb = luacomE.FillTypeLib(rawtlb)",
    "type": "statement:assign"
  }, {
    "id": 146,
    "text": "rawtlb = nil",
    "type": "statement:assign"
  }, {
    "id": 147,
    "text": "if htmlfile == nil then\r\n  \thtmlfile = tlb.name..\".html\"\r\n  elseif string.sub(htmlfile, -1) == \"\\\\\" then\r\n  \thtmlfile = htmlfile..tlb.name..\".html\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 148,
    "text": "htmlfile = tlb.name..\".html\"",
    "type": "statement:assign"
  }, {
    "id": 149,
    "text": "htmlfile = htmlfile..tlb.name..\".html\"",
    "type": "statement:assign"
  }, {
    "id": 150,
    "text": "local filehandle = io.open(htmlfile, \"w\")",
    "type": "statement:localassign"
  }, {
    "id": 151,
    "text": "if filehandle == nil then\r\n    error(\"Could not create \"..htmlfile..\": file exists\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 152,
    "text": "error(\"Could not create \"..htmlfile..\": file exists\")",
    "type": "statement:functioncall"
  }, {
    "id": 153,
    "text": "io.output(filehandle)",
    "type": "statement:functioncall"
  }, {
    "id": 154,
    "text": "io.write(\"<html>\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 155,
    "text": "io.write(\"<head>\")",
    "type": "statement:functioncall"
  }, {
    "id": 156,
    "text": "io.write(\"<title>\")",
    "type": "statement:functioncall"
  }, {
    "id": 157,
    "text": "if tlb.description then\r\n    io.write(tlb.description)\r\n  else\r\n    io.write(tlb.name)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 158,
    "text": "io.write(tlb.description)",
    "type": "statement:functioncall"
  }, {
    "id": 159,
    "text": "io.write(tlb.name)",
    "type": "statement:functioncall"
  }, {
    "id": 160,
    "text": "io.write(\"</title>\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 161,
    "text": "io.write(\"<h1>\")",
    "type": "statement:functioncall"
  }, {
    "id": 162,
    "text": "io.write(\" Type Library\")",
    "type": "statement:functioncall"
  }, {
    "id": 163,
    "text": "io.write(\"</h1>\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 164,
    "text": "io.write(\"<hr>\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 165,
    "text": "io.write(\"<h2>Summary</h2>\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 166,
    "text": "local function write_typeinfo(i, typeinfo)\r\n    io.write(\"<li>\")\r\n    io.write(\"<b>\")\r\n\r\n    if typeinfo.type ~= \"dispinterface\" or typeinfo.dispatchable then\r\n      io.write(\"<a href=\\\"#\"..typeinfo.name..\"\\\">\"..typeinfo.name..\"</a>\")\r\n    else\r\n      io.write(typeinfo.name)\r\n    end\r\n    \r\n    io.write(\"</b>\")\r\n    io.write(\"</li>\")\r\n    \r\n    if typeinfo.description and typeinfo.description ~= \"\" then\r\n      io.write(\" - \"..typeinfo.description)\r\n    end\r\n\r\n    io.write(\"</li>\\n\")\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 167,
    "text": "io.write(\"<li>\")",
    "type": "statement:functioncall"
  }, {
    "id": 168,
    "text": "io.write(\"<b>\")",
    "type": "statement:functioncall"
  }, {
    "id": 169,
    "text": "if typeinfo.type ~= \"dispinterface\" or typeinfo.dispatchable then\r\n      io.write(\"<a href=\\\"#\"..typeinfo.name..\"\\\">\"..typeinfo.name..\"</a>\")\r\n    else\r\n      io.write(typeinfo.name)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 170,
    "text": "io.write(\"<a href=\\\"#\"..typeinfo.name..\"\\\">\"..typeinfo.name..\"</a>\")",
    "type": "statement:functioncall"
  }, {
    "id": 171,
    "text": "io.write(typeinfo.name)",
    "type": "statement:functioncall"
  }, {
    "id": 172,
    "text": "io.write(\"</b>\")",
    "type": "statement:functioncall"
  }, {
    "id": 173,
    "text": "io.write(\"</li>\")",
    "type": "statement:functioncall"
  }, {
    "id": 174,
    "text": "if typeinfo.description and typeinfo.description ~= \"\" then\r\n      io.write(\" - \"..typeinfo.description)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 175,
    "text": "io.write(\" - \"..typeinfo.description)",
    "type": "statement:functioncall"
  }, {
    "id": 176,
    "text": "io.write(\"</li>\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 177,
    "text": "local function filter_typeinfo(type)\r\n    local function filter(i,typeinfo)\r\n\r\n      if typeinfo.type == type then\r\n        map_function(i, typeinfo)\r\n      end\r\n    end\r\n    \r\n    table.foreachi(tlb, filter)\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 178,
    "text": "local function filter(i,typeinfo)\r\n\r\n      if typeinfo.type == type then\r\n        map_function(i, typeinfo)\r\n      end\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 179,
    "text": "if typeinfo.type == type then\r\n        map_function(i, typeinfo)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 180,
    "text": "map_function(i, typeinfo)",
    "type": "statement:functioncall"
  }, {
    "id": 181,
    "text": "table.foreachi(tlb, filter)",
    "type": "statement:functioncall"
  }, {
    "id": 182,
    "text": "map_function = write_typeinfo",
    "type": "statement:assign"
  }, {
    "id": 183,
    "text": "io.write(\"<h3>Components</h3>\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 184,
    "text": "filter_typeinfo(\"coclass\")",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "io.write(\"<h3>Enumerations</h3>\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 186,
    "text": "filter_typeinfo(\"enumeration\")",
    "type": "statement:functioncall"
  }, {
    "id": 187,
    "text": "io.write(\"<h3>Interfaces</h3>\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 188,
    "text": "filter_typeinfo(\"dispinterface\")",
    "type": "statement:functioncall"
  }, {
    "id": 189,
    "text": "io.write(\"<h2>Detailed description</h2>\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 190,
    "text": "io.write(\"<h3>Components Classes</h3>\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 191,
    "text": "local function describe_coclass(i, typeinfo)\r\n    assert(typeinfo.type == \"coclass\")\r\n    \r\n    if typeinfo.restricted or typeinfo.hidden then\r\n      return\r\n    end\r\n    \r\n    io.write(\"<h4>\")\r\n    io.write(\"<a name=\\\"\"..typeinfo.name..\"\\\"></a>\")\r\n    io.write(typeinfo.name)\r\n    \r\n    io.write(\"</h4>\\n\")\r\n    \r\n    if typeinfo.description then\r\n      io.write(typeinfo.description..\"<p>\")\r\n    end\r\n    \r\n    io.write(\"<pre>\"..typeinfo.guid..\"</pre><p>\")\r\n    \r\n    local i, default, source\r\n    \r\n    -- locates the default interface and the source interface\r\n    for i=1, table.getn(typeinfo.interfaces) do\r\n    \r\n      if typeinfo.interfaces[i].source and source == nil then\r\n        source = typeinfo.interfaces[i].dispinterface\r\n      elseif typeinfo.interfaces[i].source \r\n             and typeinfo.interfaces[i].default then\r\n        source = typeinfo.interfaces[i].dispinterface\r\n      end\r\n      \r\n      if not typeinfo.interfaces[i].source and default == nil then\r\n        default = typeinfo.interfaces[i].dispinterface\r\n      elseif typeinfo.interfaces[i].default \r\n             and not typeinfo.interfaces[i].source then\r\n        default = typeinfo.interfaces[i].dispinterface\r\n      end\r\n      \r\n    end\r\n    \r\n    if default then    \r\n      if default.dispatchable then\r\n        io.write(\"<a href=\\\"#\"..default.name..\"\\\">\"..default.name..\"</a>\")\r\n      else\r\n        io.write(default.name)\r\n      end\r\n      \r\n      io.write(\" is the default interface for this component.<br>\")\r\n    end\r\n    \r\n    if source then    \r\n      if source.dispatchable then\r\n        io.write(\"<a href=\\\"#\"..source.name..\"\\\">\"..source.name..\"</a>\")\r\n      else\r\n        io.write(source.name)\r\n      end\r\n      \r\n      io.write(\" is the default set of events for this component.<br>\")\r\n    end\r\n\r\n    if typeinfo.appobject then\r\n      io.write(\"This is the Application object.<br>\")\r\n    end\r\n    \r\n    if typeinfo.control then\r\n      io.write(\"This component is an OLE control.<br>\")\r\n    end\r\n    \r\n    if typeinfo.cancreate then\r\n      io.write(\"Instances of this component can be created.<br>\")\r\n    end\r\n   \r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 192,
    "text": "assert(typeinfo.type == \"coclass\")",
    "type": "statement:functioncall"
  }, {
    "id": 193,
    "text": "if typeinfo.restricted or typeinfo.hidden then\r\n      return\r\n    end",
    "type": "statement:if"
  }, {
    "id": 194,
    "text": "io.write(\"<h4>\")",
    "type": "statement:functioncall"
  }, {
    "id": 195,
    "text": "io.write(\"<a name=\\\"\"..typeinfo.name..\"\\\"></a>\")",
    "type": "statement:functioncall"
  }, {
    "id": 196,
    "text": "io.write(\"</h4>\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 197,
    "text": "if typeinfo.description then\r\n      io.write(typeinfo.description..\"<p>\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 198,
    "text": "io.write(typeinfo.description..\"<p>\")",
    "type": "statement:functioncall"
  }, {
    "id": 199,
    "text": "io.write(\"<pre>\"..typeinfo.guid..\"</pre><p>\")",
    "type": "statement:functioncall"
  }, {
    "id": 200,
    "text": "local i, default, source",
    "type": "statement:localassign"
  }, {
    "id": 201,
    "text": "for i=1, table.getn(typeinfo.interfaces) do\r\n    \r\n      if typeinfo.interfaces[i].source and source == nil then\r\n        source = typeinfo.interfaces[i].dispinterface\r\n      elseif typeinfo.interfaces[i].source \r\n             and typeinfo.interfaces[i].default then\r\n        source = typeinfo.interfaces[i].dispinterface\r\n      end\r\n      \r\n      if not typeinfo.interfaces[i].source and default == nil then\r\n        default = typeinfo.interfaces[i].dispinterface\r\n      elseif typeinfo.interfaces[i].default \r\n             and not typeinfo.interfaces[i].source then\r\n        default = typeinfo.interfaces[i].dispinterface\r\n      end\r\n      \r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 202,
    "text": "if typeinfo.interfaces[i].source and source == nil then\r\n        source = typeinfo.interfaces[i].dispinterface\r\n      elseif typeinfo.interfaces[i].source \r\n             and typeinfo.interfaces[i].default then\r\n        source = typeinfo.interfaces[i].dispinterface\r\n      end",
    "type": "statement:if"
  }, {
    "id": 203,
    "text": "source = typeinfo.interfaces[i].dispinterface",
    "type": "statement:assign"
  }, {
    "id": 204,
    "text": "if not typeinfo.interfaces[i].source and default == nil then\r\n        default = typeinfo.interfaces[i].dispinterface\r\n      elseif typeinfo.interfaces[i].default \r\n             and not typeinfo.interfaces[i].source then\r\n        default = typeinfo.interfaces[i].dispinterface\r\n      end",
    "type": "statement:if"
  }, {
    "id": 205,
    "text": "default = typeinfo.interfaces[i].dispinterface",
    "type": "statement:assign"
  }, {
    "id": 206,
    "text": "if default then    \r\n      if default.dispatchable then\r\n        io.write(\"<a href=\\\"#\"..default.name..\"\\\">\"..default.name..\"</a>\")\r\n      else\r\n        io.write(default.name)\r\n      end\r\n      \r\n      io.write(\" is the default interface for this component.<br>\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 207,
    "text": "if default.dispatchable then\r\n        io.write(\"<a href=\\\"#\"..default.name..\"\\\">\"..default.name..\"</a>\")\r\n      else\r\n        io.write(default.name)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 208,
    "text": "io.write(\"<a href=\\\"#\"..default.name..\"\\\">\"..default.name..\"</a>\")",
    "type": "statement:functioncall"
  }, {
    "id": 209,
    "text": "io.write(default.name)",
    "type": "statement:functioncall"
  }, {
    "id": 210,
    "text": "io.write(\" is the default interface for this component.<br>\")",
    "type": "statement:functioncall"
  }, {
    "id": 211,
    "text": "if source then    \r\n      if source.dispatchable then\r\n        io.write(\"<a href=\\\"#\"..source.name..\"\\\">\"..source.name..\"</a>\")\r\n      else\r\n        io.write(source.name)\r\n      end\r\n      \r\n      io.write(\" is the default set of events for this component.<br>\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 212,
    "text": "if source.dispatchable then\r\n        io.write(\"<a href=\\\"#\"..source.name..\"\\\">\"..source.name..\"</a>\")\r\n      else\r\n        io.write(source.name)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 213,
    "text": "io.write(\"<a href=\\\"#\"..source.name..\"\\\">\"..source.name..\"</a>\")",
    "type": "statement:functioncall"
  }, {
    "id": 214,
    "text": "io.write(source.name)",
    "type": "statement:functioncall"
  }, {
    "id": 215,
    "text": "io.write(\" is the default set of events for this component.<br>\")",
    "type": "statement:functioncall"
  }, {
    "id": 216,
    "text": "if typeinfo.appobject then\r\n      io.write(\"This is the Application object.<br>\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 217,
    "text": "io.write(\"This is the Application object.<br>\")",
    "type": "statement:functioncall"
  }, {
    "id": 218,
    "text": "if typeinfo.control then\r\n      io.write(\"This component is an OLE control.<br>\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 219,
    "text": "io.write(\"This component is an OLE control.<br>\")",
    "type": "statement:functioncall"
  }, {
    "id": 220,
    "text": "if typeinfo.cancreate then\r\n      io.write(\"Instances of this component can be created.<br>\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 221,
    "text": "io.write(\"Instances of this component can be created.<br>\")",
    "type": "statement:functioncall"
  }, {
    "id": 222,
    "text": "map_function = describe_coclass",
    "type": "statement:assign"
  }, {
    "id": 223,
    "text": "io.write(\"<hr><h3>Enumerations</h3>\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 224,
    "text": "local function describe_enum(i, typeinfo)\r\n    assert(typeinfo.type == \"enumeration\")\r\n    \r\n    io.write(\"<h4>\")\r\n    io.write(\"<a name=\\\"\"..typeinfo.name..\"\\\"></a>\")\r\n    io.write(typeinfo.name)\r\n    \r\n    io.write(\"</h4>\\n\")\r\n    \r\n    if typeinfo.description and typeinfo.description ~= nil then\r\n      io.write(typeinfo.description..\"<p>\")\r\n    end\r\n    \r\n    local function describe_constant(i, constant)\r\n      io.write(\"<li>\")\r\n      io.write(constant.name..\" = \"..tostring(constant.value))\r\n      io.write(\"</li>\\n\")\r\n    end\r\n    \r\n    io.write(\"<ul>\\n\")\r\n    table.foreachi(typeinfo.values, describe_constant)\r\n    io.write(\"</ul>\\n\")\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 225,
    "text": "assert(typeinfo.type == \"enumeration\")",
    "type": "statement:functioncall"
  }, {
    "id": 226,
    "text": "if typeinfo.description and typeinfo.description ~= nil then\r\n      io.write(typeinfo.description..\"<p>\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 227,
    "text": "local function describe_constant(i, constant)\r\n      io.write(\"<li>\")\r\n      io.write(constant.name..\" = \"..tostring(constant.value))\r\n      io.write(\"</li>\\n\")\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 228,
    "text": "io.write(constant.name..\" = \"..tostring(constant.value))",
    "type": "statement:functioncall"
  }, {
    "id": 229,
    "text": "io.write(\"<ul>\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 230,
    "text": "table.foreachi(typeinfo.values, describe_constant)",
    "type": "statement:functioncall"
  }, {
    "id": 231,
    "text": "io.write(\"</ul>\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 232,
    "text": "map_function = describe_enum",
    "type": "statement:assign"
  }, {
    "id": 233,
    "text": "io.write(\"<hr><h3>Interfaces</h3>\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 234,
    "text": "local function describe_interface(i, typeinfo)\r\n    assert(typeinfo.type == \"dispinterface\")\r\n    \r\n    io.write(\"<h4>\")\r\n    io.write(\"<a name=\\\"\"..typeinfo.name..\"\\\"></a>\")\r\n    io.write(typeinfo.name)\r\n    io.write(\"</h4>\\n\")\r\n    io.write(\"<pre>\"..typeinfo.guid..\"</pre><p>\")\r\n    \r\n    local function describe_method_use(method)\r\n      io.write(\"<b>LuaCOM examples:</b><br><br>\")\r\n      \r\n      local function param_lister()\r\n        local first_param = true\r\n        local function add_param(i, param)\r\n          if param[\"in\"] or (not param.out) then\r\n            local name\r\n            if param.default then\r\n              local default = tostring(param.default)\r\n              if default == \"\" then default = \"?\" end\r\n              name = param.name .. \"=\" .. default\r\n            else\r\n              name = param.name\r\n            end\r\n            if param.opt then name = \"[\" .. name .. \"]\" end\r\n            if first_param then\r\n              io.write(name)\r\n              first_param = false\r\n            else\r\n              io.write(\", \" .. name) \r\n            end\r\n          end\r\n        end\r\n        return add_param\r\n      end\r\n      \r\n      local function retval_lister(first_retval)\r\n        local has_retval = false\r\n        return function(i, param)\r\n            if param.out then\r\n              if first_retval then\r\n                io.write(param.name)\r\n                first_retval = false\r\n              else\r\n                io.write(\", \" .. param.name)\r\n              end\r\n              has_retval = true\r\n            end\r\n          end, function() return has_retval end\r\n      end\r\n      \r\n      if method.typeinv == \"propget\" then\r\n        if method.num_params == 0 then\r\n          io.write(\"com_obj.\" .. method.name .. \"<br>\")\r\n          io.write(\"com_obj:get\" .. method.name .. \"()\")\r\n        else\r\n          io.write(\"com_obj:get\" .. method.name .. \"(\")\r\n          table.foreachi(method.parameters, param_lister())\r\n          io.write(\")\")\r\n        end\r\n      elseif method.typeinv == \"propput\" then\r\n        if method.num_params == 1 then\r\n          io.write(\"com_obj.\" .. method.name .. \" = \" .. method.parameters[1].name .. \"<br>\")\r\n          io.write(\"com_obj:set\" .. method.name .. \"(\" .. method.parameters[1].name .. \")<br>\")\r\n        else\r\n          io.write(\"com_obj:set\" .. method.name .. \"(\")\r\n          table.foreachi(method.parameters, param_lister())\r\n          io.write(\")\")\r\n        end\r\n      else\r\n          if method.type ~= \"void\" then\r\n            io.write(\"retval\")\r\n            table.foreachi(method.parameters, retval_lister(false))\r\n            io.write(\" = \")\r\n          else\r\n            local lister, checker = retval_lister(true)\r\n            table.foreachi(method.parameters, lister)\r\n            if checker() then io.write(\" = \") end\r\n          end\r\n          io.write(\"com_obj:\" .. method.name .. \"(\")\r\n          table.foreachi(method.parameters, param_lister())\r\n          io.write(\")<br>\")\r\n      end\r\n    end\r\n    \r\n    local function describe_method(i, method)\r\n      if method.rawMethod == nil then\r\n        return\r\n      end\r\n      \r\n      io.write(\"<li>\")\r\n      io.write(method.name)\r\n      \r\n      if method.prototype then\r\n        io.write(\"<pre>\"..method.prototype..\"</pre>\\n\")\r\n      else\r\n        io.write(\"<br>\")\r\n      end\r\n      \r\n      if method.description then\r\n        io.write(method.description..\"<br>\\n\")\r\n      end\r\n      \r\n      describe_method_use(method)\r\n      \r\n      io.write(\"<p>\")\r\n      \r\n      io.write(\"</li>\\n\")\r\n    end\r\n    \r\n    io.write(\"<ul>\\n\")\r\n    table.foreachi(typeinfo.methods, describe_method)\r\n    io.write(\"</ul>\\n\")\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 235,
    "text": "assert(typeinfo.type == \"dispinterface\")",
    "type": "statement:functioncall"
  }, {
    "id": 236,
    "text": "local function describe_method_use(method)\r\n      io.write(\"<b>LuaCOM examples:</b><br><br>\")\r\n      \r\n      local function param_lister()\r\n        local first_param = true\r\n        local function add_param(i, param)\r\n          if param[\"in\"] or (not param.out) then\r\n            local name\r\n            if param.default then\r\n              local default = tostring(param.default)\r\n              if default == \"\" then default = \"?\" end\r\n              name = param.name .. \"=\" .. default\r\n            else\r\n              name = param.name\r\n            end\r\n            if param.opt then name = \"[\" .. name .. \"]\" end\r\n            if first_param then\r\n              io.write(name)\r\n              first_param = false\r\n            else\r\n              io.write(\", \" .. name) \r\n            end\r\n          end\r\n        end\r\n        return add_param\r\n      end\r\n      \r\n      local function retval_lister(first_retval)\r\n        local has_retval = false\r\n        return function(i, param)\r\n            if param.out then\r\n              if first_retval then\r\n                io.write(param.name)\r\n                first_retval = false\r\n              else\r\n                io.write(\", \" .. param.name)\r\n              end\r\n              has_retval = true\r\n            end\r\n          end, function() return has_retval end\r\n      end\r\n      \r\n      if method.typeinv == \"propget\" then\r\n        if method.num_params == 0 then\r\n          io.write(\"com_obj.\" .. method.name .. \"<br>\")\r\n          io.write(\"com_obj:get\" .. method.name .. \"()\")\r\n        else\r\n          io.write(\"com_obj:get\" .. method.name .. \"(\")\r\n          table.foreachi(method.parameters, param_lister())\r\n          io.write(\")\")\r\n        end\r\n      elseif method.typeinv == \"propput\" then\r\n        if method.num_params == 1 then\r\n          io.write(\"com_obj.\" .. method.name .. \" = \" .. method.parameters[1].name .. \"<br>\")\r\n          io.write(\"com_obj:set\" .. method.name .. \"(\" .. method.parameters[1].name .. \")<br>\")\r\n        else\r\n          io.write(\"com_obj:set\" .. method.name .. \"(\")\r\n          table.foreachi(method.parameters, param_lister())\r\n          io.write(\")\")\r\n        end\r\n      else\r\n          if method.type ~= \"void\" then\r\n            io.write(\"retval\")\r\n            table.foreachi(method.parameters, retval_lister(false))\r\n            io.write(\" = \")\r\n          else\r\n            local lister, checker = retval_lister(true)\r\n            table.foreachi(method.parameters, lister)\r\n            if checker() then io.write(\" = \") end\r\n          end\r\n          io.write(\"com_obj:\" .. method.name .. \"(\")\r\n          table.foreachi(method.parameters, param_lister())\r\n          io.write(\")<br>\")\r\n      end\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 237,
    "text": "io.write(\"<b>LuaCOM examples:</b><br><br>\")",
    "type": "statement:functioncall"
  }, {
    "id": 238,
    "text": "local function param_lister()\r\n        local first_param = true\r\n        local function add_param(i, param)\r\n          if param[\"in\"] or (not param.out) then\r\n            local name\r\n            if param.default then\r\n              local default = tostring(param.default)\r\n              if default == \"\" then default = \"?\" end\r\n              name = param.name .. \"=\" .. default\r\n            else\r\n              name = param.name\r\n            end\r\n            if param.opt then name = \"[\" .. name .. \"]\" end\r\n            if first_param then\r\n              io.write(name)\r\n              first_param = false\r\n            else\r\n              io.write(\", \" .. name) \r\n            end\r\n          end\r\n        end\r\n        return add_param\r\n      end",
    "type": "statement:localfunction"
  }, {
    "id": 239,
    "text": "local function add_param(i, param)\r\n          if param[\"in\"] or (not param.out) then\r\n            local name\r\n            if param.default then\r\n              local default = tostring(param.default)\r\n              if default == \"\" then default = \"?\" end\r\n              name = param.name .. \"=\" .. default\r\n            else\r\n              name = param.name\r\n            end\r\n            if param.opt then name = \"[\" .. name .. \"]\" end\r\n            if first_param then\r\n              io.write(name)\r\n              first_param = false\r\n            else\r\n              io.write(\", \" .. name) \r\n            end\r\n          end\r\n        end",
    "type": "statement:localfunction"
  }, {
    "id": 240,
    "text": "if param[\"in\"] or (not param.out) then\r\n            local name\r\n            if param.default then\r\n              local default = tostring(param.default)\r\n              if default == \"\" then default = \"?\" end\r\n              name = param.name .. \"=\" .. default\r\n            else\r\n              name = param.name\r\n            end\r\n            if param.opt then name = \"[\" .. name .. \"]\" end\r\n            if first_param then\r\n              io.write(name)\r\n              first_param = false\r\n            else\r\n              io.write(\", \" .. name) \r\n            end\r\n          end",
    "type": "statement:if"
  }, {
    "id": 241,
    "text": "local name",
    "type": "statement:localassign"
  }, {
    "id": 242,
    "text": "if param.default then\r\n              local default = tostring(param.default)\r\n              if default == \"\" then default = \"?\" end\r\n              name = param.name .. \"=\" .. default\r\n            else\r\n              name = param.name\r\n            end",
    "type": "statement:if"
  }, {
    "id": 243,
    "text": "local default = tostring(param.default)",
    "type": "statement:localassign"
  }, {
    "id": 244,
    "text": "if default == \"\" then default = \"?\" end",
    "type": "statement:if"
  }, {
    "id": 245,
    "text": "default = \"?\"",
    "type": "statement:assign"
  }, {
    "id": 246,
    "text": "name = param.name .. \"=\" .. default",
    "type": "statement:assign"
  }, {
    "id": 247,
    "text": "name = param.name",
    "type": "statement:assign"
  }, {
    "id": 248,
    "text": "if param.opt then name = \"[\" .. name .. \"]\" end",
    "type": "statement:if"
  }, {
    "id": 249,
    "text": "name = \"[\" .. name .. \"]\"",
    "type": "statement:assign"
  }, {
    "id": 250,
    "text": "if first_param then\r\n              io.write(name)\r\n              first_param = false\r\n            else\r\n              io.write(\", \" .. name) \r\n            end",
    "type": "statement:if"
  }, {
    "id": 251,
    "text": "io.write(name)",
    "type": "statement:functioncall"
  }, {
    "id": 252,
    "text": "io.write(\", \" .. name)",
    "type": "statement:functioncall"
  }, {
    "id": 253,
    "text": "local function retval_lister(first_retval)\r\n        local has_retval = false\r\n        return function(i, param)\r\n            if param.out then\r\n              if first_retval then\r\n                io.write(param.name)\r\n                first_retval = false\r\n              else\r\n                io.write(\", \" .. param.name)\r\n              end\r\n              has_retval = true\r\n            end\r\n          end, function() return has_retval end\r\n      end",
    "type": "statement:localfunction"
  }, {
    "id": 254,
    "text": "local has_retval = false",
    "type": "statement:localassign"
  }, {
    "id": 255,
    "text": "if param.out then\r\n              if first_retval then\r\n                io.write(param.name)\r\n                first_retval = false\r\n              else\r\n                io.write(\", \" .. param.name)\r\n              end\r\n              has_retval = true\r\n            end",
    "type": "statement:if"
  }, {
    "id": 256,
    "text": "if first_retval then\r\n                io.write(param.name)\r\n                first_retval = false\r\n              else\r\n                io.write(\", \" .. param.name)\r\n              end",
    "type": "statement:if"
  }, {
    "id": 257,
    "text": "io.write(param.name)",
    "type": "statement:functioncall"
  }, {
    "id": 258,
    "text": "first_retval = false",
    "type": "statement:assign"
  }, {
    "id": 259,
    "text": "io.write(\", \" .. param.name)",
    "type": "statement:functioncall"
  }, {
    "id": 260,
    "text": "has_retval = true",
    "type": "statement:assign"
  }, {
    "id": 261,
    "text": "if method.typeinv == \"propget\" then\r\n        if method.num_params == 0 then\r\n          io.write(\"com_obj.\" .. method.name .. \"<br>\")\r\n          io.write(\"com_obj:get\" .. method.name .. \"()\")\r\n        else\r\n          io.write(\"com_obj:get\" .. method.name .. \"(\")\r\n          table.foreachi(method.parameters, param_lister())\r\n          io.write(\")\")\r\n        end\r\n      elseif method.typeinv == \"propput\" then\r\n        if method.num_params == 1 then\r\n          io.write(\"com_obj.\" .. method.name .. \" = \" .. method.parameters[1].name .. \"<br>\")\r\n          io.write(\"com_obj:set\" .. method.name .. \"(\" .. method.parameters[1].name .. \")<br>\")\r\n        else\r\n          io.write(\"com_obj:set\" .. method.name .. \"(\")\r\n          table.foreachi(method.parameters, param_lister())\r\n          io.write(\")\")\r\n        end\r\n      else\r\n          if method.type ~= \"void\" then\r\n            io.write(\"retval\")\r\n            table.foreachi(method.parameters, retval_lister(false))\r\n            io.write(\" = \")\r\n          else\r\n            local lister, checker = retval_lister(true)\r\n            table.foreachi(method.parameters, lister)\r\n            if checker() then io.write(\" = \") end\r\n          end\r\n          io.write(\"com_obj:\" .. method.name .. \"(\")\r\n          table.foreachi(method.parameters, param_lister())\r\n          io.write(\")<br>\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 262,
    "text": "if method.num_params == 0 then\r\n          io.write(\"com_obj.\" .. method.name .. \"<br>\")\r\n          io.write(\"com_obj:get\" .. method.name .. \"()\")\r\n        else\r\n          io.write(\"com_obj:get\" .. method.name .. \"(\")\r\n          table.foreachi(method.parameters, param_lister())\r\n          io.write(\")\")\r\n        end",
    "type": "statement:if"
  }, {
    "id": 263,
    "text": "io.write(\"com_obj.\" .. method.name .. \"<br>\")",
    "type": "statement:functioncall"
  }, {
    "id": 264,
    "text": "io.write(\"com_obj:get\" .. method.name .. \"()\")",
    "type": "statement:functioncall"
  }, {
    "id": 265,
    "text": "io.write(\"com_obj:get\" .. method.name .. \"(\")",
    "type": "statement:functioncall"
  }, {
    "id": 266,
    "text": "table.foreachi(method.parameters, param_lister())",
    "type": "statement:functioncall"
  }, {
    "id": 267,
    "text": "io.write(\")\")",
    "type": "statement:functioncall"
  }, {
    "id": 268,
    "text": "if method.num_params == 1 then\r\n          io.write(\"com_obj.\" .. method.name .. \" = \" .. method.parameters[1].name .. \"<br>\")\r\n          io.write(\"com_obj:set\" .. method.name .. \"(\" .. method.parameters[1].name .. \")<br>\")\r\n        else\r\n          io.write(\"com_obj:set\" .. method.name .. \"(\")\r\n          table.foreachi(method.parameters, param_lister())\r\n          io.write(\")\")\r\n        end",
    "type": "statement:if"
  }, {
    "id": 269,
    "text": "io.write(\"com_obj.\" .. method.name .. \" = \" .. method.parameters[1].name .. \"<br>\")",
    "type": "statement:functioncall"
  }, {
    "id": 270,
    "text": "io.write(\"com_obj:set\" .. method.name .. \"(\" .. method.parameters[1].name .. \")<br>\")",
    "type": "statement:functioncall"
  }, {
    "id": 271,
    "text": "io.write(\"com_obj:set\" .. method.name .. \"(\")",
    "type": "statement:functioncall"
  }, {
    "id": 272,
    "text": "if method.type ~= \"void\" then\r\n            io.write(\"retval\")\r\n            table.foreachi(method.parameters, retval_lister(false))\r\n            io.write(\" = \")\r\n          else\r\n            local lister, checker = retval_lister(true)\r\n            table.foreachi(method.parameters, lister)\r\n            if checker() then io.write(\" = \") end\r\n          end",
    "type": "statement:if"
  }, {
    "id": 273,
    "text": "io.write(\"retval\")",
    "type": "statement:functioncall"
  }, {
    "id": 274,
    "text": "table.foreachi(method.parameters, retval_lister(false))",
    "type": "statement:functioncall"
  }, {
    "id": 275,
    "text": "io.write(\" = \")",
    "type": "statement:functioncall"
  }, {
    "id": 276,
    "text": "local lister, checker = retval_lister(true)",
    "type": "statement:localassign"
  }, {
    "id": 277,
    "text": "table.foreachi(method.parameters, lister)",
    "type": "statement:functioncall"
  }, {
    "id": 278,
    "text": "if checker() then io.write(\" = \") end",
    "type": "statement:if"
  }, {
    "id": 279,
    "text": "io.write(\"com_obj:\" .. method.name .. \"(\")",
    "type": "statement:functioncall"
  }, {
    "id": 280,
    "text": "io.write(\")<br>\")",
    "type": "statement:functioncall"
  }, {
    "id": 281,
    "text": "local function describe_method(i, method)\r\n      if method.rawMethod == nil then\r\n        return\r\n      end\r\n      \r\n      io.write(\"<li>\")\r\n      io.write(method.name)\r\n      \r\n      if method.prototype then\r\n        io.write(\"<pre>\"..method.prototype..\"</pre>\\n\")\r\n      else\r\n        io.write(\"<br>\")\r\n      end\r\n      \r\n      if method.description then\r\n        io.write(method.description..\"<br>\\n\")\r\n      end\r\n      \r\n      describe_method_use(method)\r\n      \r\n      io.write(\"<p>\")\r\n      \r\n      io.write(\"</li>\\n\")\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 282,
    "text": "if method.rawMethod == nil then\r\n        return\r\n      end",
    "type": "statement:if"
  }, {
    "id": 283,
    "text": "io.write(method.name)",
    "type": "statement:functioncall"
  }, {
    "id": 284,
    "text": "if method.prototype then\r\n        io.write(\"<pre>\"..method.prototype..\"</pre>\\n\")\r\n      else\r\n        io.write(\"<br>\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 285,
    "text": "io.write(\"<pre>\"..method.prototype..\"</pre>\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 286,
    "text": "io.write(\"<br>\")",
    "type": "statement:functioncall"
  }, {
    "id": 287,
    "text": "if method.description then\r\n        io.write(method.description..\"<br>\\n\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 288,
    "text": "io.write(method.description..\"<br>\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 289,
    "text": "describe_method_use(method)",
    "type": "statement:functioncall"
  }, {
    "id": 290,
    "text": "io.write(\"<p>\")",
    "type": "statement:functioncall"
  }, {
    "id": 291,
    "text": "table.foreachi(typeinfo.methods, describe_method)",
    "type": "statement:functioncall"
  }, {
    "id": 292,
    "text": "map_function = describe_interface",
    "type": "statement:assign"
  }, {
    "id": 293,
    "text": "io.write(\"</html>\")",
    "type": "statement:functioncall"
  }, {
    "id": 294,
    "text": "io.output():close()",
    "type": "statement:functioncall"
  }, {
    "id": 295,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 296,
    "text": "local function write_typeinfo(i, typeinfo)\r\n    io.write(\"<li>\")\r\n    io.write(\"<b>\")\r\n\r\n    if typeinfo.type ~= \"dispinterface\" or typeinfo.dispatchable then\r\n      io.write(\"<a href=\\\"#\"..typeinfo.name..\"\\\">\"..typeinfo.name..\"</a>\")\r\n    else\r\n      io.write(typeinfo.name)\r\n    end\r\n    \r\n    io.write(\"</b>\")\r\n    io.write(\"</li>\")\r\n    \r\n    if typeinfo.description and typeinfo.description ~= \"\" then\r\n      io.write(\" - \"..typeinfo.description)\r\n    end\r\n\r\n    io.write(\"</li>\\n\")\r\n  end",
    "type": "function"
  }, {
    "id": 297,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 298,
    "text": "local function filter_typeinfo(type)\r\n    local function filter(i,typeinfo)\r\n\r\n      if typeinfo.type == type then\r\n        map_function(i, typeinfo)\r\n      end\r\n    end\r\n    \r\n    table.foreachi(tlb, filter)\r\n  end",
    "type": "function"
  }, {
    "id": 299,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 300,
    "text": "local function filter(i,typeinfo)\r\n\r\n      if typeinfo.type == type then\r\n        map_function(i, typeinfo)\r\n      end\r\n    end",
    "type": "function"
  }, {
    "id": 301,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 302,
    "text": "local function describe_coclass(i, typeinfo)\r\n    assert(typeinfo.type == \"coclass\")\r\n    \r\n    if typeinfo.restricted or typeinfo.hidden then\r\n      return\r\n    end\r\n    \r\n    io.write(\"<h4>\")\r\n    io.write(\"<a name=\\\"\"..typeinfo.name..\"\\\"></a>\")\r\n    io.write(typeinfo.name)\r\n    \r\n    io.write(\"</h4>\\n\")\r\n    \r\n    if typeinfo.description then\r\n      io.write(typeinfo.description..\"<p>\")\r\n    end\r\n    \r\n    io.write(\"<pre>\"..typeinfo.guid..\"</pre><p>\")\r\n    \r\n    local i, default, source\r\n    \r\n    -- locates the default interface and the source interface\r\n    for i=1, table.getn(typeinfo.interfaces) do\r\n    \r\n      if typeinfo.interfaces[i].source and source == nil then\r\n        source = typeinfo.interfaces[i].dispinterface\r\n      elseif typeinfo.interfaces[i].source \r\n             and typeinfo.interfaces[i].default then\r\n        source = typeinfo.interfaces[i].dispinterface\r\n      end\r\n      \r\n      if not typeinfo.interfaces[i].source and default == nil then\r\n        default = typeinfo.interfaces[i].dispinterface\r\n      elseif typeinfo.interfaces[i].default \r\n             and not typeinfo.interfaces[i].source then\r\n        default = typeinfo.interfaces[i].dispinterface\r\n      end\r\n      \r\n    end\r\n    \r\n    if default then    \r\n      if default.dispatchable then\r\n        io.write(\"<a href=\\\"#\"..default.name..\"\\\">\"..default.name..\"</a>\")\r\n      else\r\n        io.write(default.name)\r\n      end\r\n      \r\n      io.write(\" is the default interface for this component.<br>\")\r\n    end\r\n    \r\n    if source then    \r\n      if source.dispatchable then\r\n        io.write(\"<a href=\\\"#\"..source.name..\"\\\">\"..source.name..\"</a>\")\r\n      else\r\n        io.write(source.name)\r\n      end\r\n      \r\n      io.write(\" is the default set of events for this component.<br>\")\r\n    end\r\n\r\n    if typeinfo.appobject then\r\n      io.write(\"This is the Application object.<br>\")\r\n    end\r\n    \r\n    if typeinfo.control then\r\n      io.write(\"This component is an OLE control.<br>\")\r\n    end\r\n    \r\n    if typeinfo.cancreate then\r\n      io.write(\"Instances of this component can be created.<br>\")\r\n    end\r\n   \r\n  end",
    "type": "function"
  }, {
    "id": 303,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 304,
    "text": "local function describe_enum(i, typeinfo)\r\n    assert(typeinfo.type == \"enumeration\")\r\n    \r\n    io.write(\"<h4>\")\r\n    io.write(\"<a name=\\\"\"..typeinfo.name..\"\\\"></a>\")\r\n    io.write(typeinfo.name)\r\n    \r\n    io.write(\"</h4>\\n\")\r\n    \r\n    if typeinfo.description and typeinfo.description ~= nil then\r\n      io.write(typeinfo.description..\"<p>\")\r\n    end\r\n    \r\n    local function describe_constant(i, constant)\r\n      io.write(\"<li>\")\r\n      io.write(constant.name..\" = \"..tostring(constant.value))\r\n      io.write(\"</li>\\n\")\r\n    end\r\n    \r\n    io.write(\"<ul>\\n\")\r\n    table.foreachi(typeinfo.values, describe_constant)\r\n    io.write(\"</ul>\\n\")\r\n  end",
    "type": "function"
  }, {
    "id": 305,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 306,
    "text": "local function describe_constant(i, constant)\r\n      io.write(\"<li>\")\r\n      io.write(constant.name..\" = \"..tostring(constant.value))\r\n      io.write(\"</li>\\n\")\r\n    end",
    "type": "function"
  }, {
    "id": 307,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 308,
    "text": "local function describe_interface(i, typeinfo)\r\n    assert(typeinfo.type == \"dispinterface\")\r\n    \r\n    io.write(\"<h4>\")\r\n    io.write(\"<a name=\\\"\"..typeinfo.name..\"\\\"></a>\")\r\n    io.write(typeinfo.name)\r\n    io.write(\"</h4>\\n\")\r\n    io.write(\"<pre>\"..typeinfo.guid..\"</pre><p>\")\r\n    \r\n    local function describe_method_use(method)\r\n      io.write(\"<b>LuaCOM examples:</b><br><br>\")\r\n      \r\n      local function param_lister()\r\n        local first_param = true\r\n        local function add_param(i, param)\r\n          if param[\"in\"] or (not param.out) then\r\n            local name\r\n            if param.default then\r\n              local default = tostring(param.default)\r\n              if default == \"\" then default = \"?\" end\r\n              name = param.name .. \"=\" .. default\r\n            else\r\n              name = param.name\r\n            end\r\n            if param.opt then name = \"[\" .. name .. \"]\" end\r\n            if first_param then\r\n              io.write(name)\r\n              first_param = false\r\n            else\r\n              io.write(\", \" .. name) \r\n            end\r\n          end\r\n        end\r\n        return add_param\r\n      end\r\n      \r\n      local function retval_lister(first_retval)\r\n        local has_retval = false\r\n        return function(i, param)\r\n            if param.out then\r\n              if first_retval then\r\n                io.write(param.name)\r\n                first_retval = false\r\n              else\r\n                io.write(\", \" .. param.name)\r\n              end\r\n              has_retval = true\r\n            end\r\n          end, function() return has_retval end\r\n      end\r\n      \r\n      if method.typeinv == \"propget\" then\r\n        if method.num_params == 0 then\r\n          io.write(\"com_obj.\" .. method.name .. \"<br>\")\r\n          io.write(\"com_obj:get\" .. method.name .. \"()\")\r\n        else\r\n          io.write(\"com_obj:get\" .. method.name .. \"(\")\r\n          table.foreachi(method.parameters, param_lister())\r\n          io.write(\")\")\r\n        end\r\n      elseif method.typeinv == \"propput\" then\r\n        if method.num_params == 1 then\r\n          io.write(\"com_obj.\" .. method.name .. \" = \" .. method.parameters[1].name .. \"<br>\")\r\n          io.write(\"com_obj:set\" .. method.name .. \"(\" .. method.parameters[1].name .. \")<br>\")\r\n        else\r\n          io.write(\"com_obj:set\" .. method.name .. \"(\")\r\n          table.foreachi(method.parameters, param_lister())\r\n          io.write(\")\")\r\n        end\r\n      else\r\n          if method.type ~= \"void\" then\r\n            io.write(\"retval\")\r\n            table.foreachi(method.parameters, retval_lister(false))\r\n            io.write(\" = \")\r\n          else\r\n            local lister, checker = retval_lister(true)\r\n            table.foreachi(method.parameters, lister)\r\n            if checker() then io.write(\" = \") end\r\n          end\r\n          io.write(\"com_obj:\" .. method.name .. \"(\")\r\n          table.foreachi(method.parameters, param_lister())\r\n          io.write(\")<br>\")\r\n      end\r\n    end\r\n    \r\n    local function describe_method(i, method)\r\n      if method.rawMethod == nil then\r\n        return\r\n      end\r\n      \r\n      io.write(\"<li>\")\r\n      io.write(method.name)\r\n      \r\n      if method.prototype then\r\n        io.write(\"<pre>\"..method.prototype..\"</pre>\\n\")\r\n      else\r\n        io.write(\"<br>\")\r\n      end\r\n      \r\n      if method.description then\r\n        io.write(method.description..\"<br>\\n\")\r\n      end\r\n      \r\n      describe_method_use(method)\r\n      \r\n      io.write(\"<p>\")\r\n      \r\n      io.write(\"</li>\\n\")\r\n    end\r\n    \r\n    io.write(\"<ul>\\n\")\r\n    table.foreachi(typeinfo.methods, describe_method)\r\n    io.write(\"</ul>\\n\")\r\n  end",
    "type": "function"
  }, {
    "id": 309,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 310,
    "text": "local function describe_method_use(method)\r\n      io.write(\"<b>LuaCOM examples:</b><br><br>\")\r\n      \r\n      local function param_lister()\r\n        local first_param = true\r\n        local function add_param(i, param)\r\n          if param[\"in\"] or (not param.out) then\r\n            local name\r\n            if param.default then\r\n              local default = tostring(param.default)\r\n              if default == \"\" then default = \"?\" end\r\n              name = param.name .. \"=\" .. default\r\n            else\r\n              name = param.name\r\n            end\r\n            if param.opt then name = \"[\" .. name .. \"]\" end\r\n            if first_param then\r\n              io.write(name)\r\n              first_param = false\r\n            else\r\n              io.write(\", \" .. name) \r\n            end\r\n          end\r\n        end\r\n        return add_param\r\n      end\r\n      \r\n      local function retval_lister(first_retval)\r\n        local has_retval = false\r\n        return function(i, param)\r\n            if param.out then\r\n              if first_retval then\r\n                io.write(param.name)\r\n                first_retval = false\r\n              else\r\n                io.write(\", \" .. param.name)\r\n              end\r\n              has_retval = true\r\n            end\r\n          end, function() return has_retval end\r\n      end\r\n      \r\n      if method.typeinv == \"propget\" then\r\n        if method.num_params == 0 then\r\n          io.write(\"com_obj.\" .. method.name .. \"<br>\")\r\n          io.write(\"com_obj:get\" .. method.name .. \"()\")\r\n        else\r\n          io.write(\"com_obj:get\" .. method.name .. \"(\")\r\n          table.foreachi(method.parameters, param_lister())\r\n          io.write(\")\")\r\n        end\r\n      elseif method.typeinv == \"propput\" then\r\n        if method.num_params == 1 then\r\n          io.write(\"com_obj.\" .. method.name .. \" = \" .. method.parameters[1].name .. \"<br>\")\r\n          io.write(\"com_obj:set\" .. method.name .. \"(\" .. method.parameters[1].name .. \")<br>\")\r\n        else\r\n          io.write(\"com_obj:set\" .. method.name .. \"(\")\r\n          table.foreachi(method.parameters, param_lister())\r\n          io.write(\")\")\r\n        end\r\n      else\r\n          if method.type ~= \"void\" then\r\n            io.write(\"retval\")\r\n            table.foreachi(method.parameters, retval_lister(false))\r\n            io.write(\" = \")\r\n          else\r\n            local lister, checker = retval_lister(true)\r\n            table.foreachi(method.parameters, lister)\r\n            if checker() then io.write(\" = \") end\r\n          end\r\n          io.write(\"com_obj:\" .. method.name .. \"(\")\r\n          table.foreachi(method.parameters, param_lister())\r\n          io.write(\")<br>\")\r\n      end\r\n    end",
    "type": "function"
  }, {
    "id": 311,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 312,
    "text": "local function param_lister()\r\n        local first_param = true\r\n        local function add_param(i, param)\r\n          if param[\"in\"] or (not param.out) then\r\n            local name\r\n            if param.default then\r\n              local default = tostring(param.default)\r\n              if default == \"\" then default = \"?\" end\r\n              name = param.name .. \"=\" .. default\r\n            else\r\n              name = param.name\r\n            end\r\n            if param.opt then name = \"[\" .. name .. \"]\" end\r\n            if first_param then\r\n              io.write(name)\r\n              first_param = false\r\n            else\r\n              io.write(\", \" .. name) \r\n            end\r\n          end\r\n        end\r\n        return add_param\r\n      end",
    "type": "function"
  }, {
    "id": 313,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 314,
    "text": "local function add_param(i, param)\r\n          if param[\"in\"] or (not param.out) then\r\n            local name\r\n            if param.default then\r\n              local default = tostring(param.default)\r\n              if default == \"\" then default = \"?\" end\r\n              name = param.name .. \"=\" .. default\r\n            else\r\n              name = param.name\r\n            end\r\n            if param.opt then name = \"[\" .. name .. \"]\" end\r\n            if first_param then\r\n              io.write(name)\r\n              first_param = false\r\n            else\r\n              io.write(\", \" .. name) \r\n            end\r\n          end\r\n        end",
    "type": "function"
  }, {
    "id": 315,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 316,
    "text": "local function retval_lister(first_retval)\r\n        local has_retval = false\r\n        return function(i, param)\r\n            if param.out then\r\n              if first_retval then\r\n                io.write(param.name)\r\n                first_retval = false\r\n              else\r\n                io.write(\", \" .. param.name)\r\n              end\r\n              has_retval = true\r\n            end\r\n          end, function() return has_retval end\r\n      end",
    "type": "function"
  }, {
    "id": 317,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 318,
    "text": "local function describe_method(i, method)\r\n      if method.rawMethod == nil then\r\n        return\r\n      end\r\n      \r\n      io.write(\"<li>\")\r\n      io.write(method.name)\r\n      \r\n      if method.prototype then\r\n        io.write(\"<pre>\"..method.prototype..\"</pre>\\n\")\r\n      else\r\n        io.write(\"<br>\")\r\n      end\r\n      \r\n      if method.description then\r\n        io.write(method.description..\"<br>\\n\")\r\n      end\r\n      \r\n      describe_method_use(method)\r\n      \r\n      io.write(\"<p>\")\r\n      \r\n      io.write(\"</li>\\n\")\r\n    end",
    "type": "function"
  }, {
    "id": 319,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 320,
    "text": "function luacomE.ViewTypeLib(obj)\r\n\r\n\tlocal filename = os.getenv(\"TEMP\")\r\n\t\r\n\tif filename == nil then\r\n\t\tfilename = os.getenv(\"TMP\")\r\n\tend\r\n\t\r\n\tif filename == nil then\r\n\t  filename = luacom.GetCurrentDirectory()\r\n  end\r\n  \r\n  if string.sub(filename, -1) ~= \"\\\\\" then\r\n  \tfilename = filename..\"\\\\\"\r\n  end\r\n  \r\n  filename = luacomE.DumpTypeLib(obj, filename)\r\n\r\n  local browser = luacom.CreateObject(\"InternetExplorer.Application\")\r\n  \r\n  browser.Visible = true\r\n  browser:Navigate2(filename)\r\n \r\n  return filename\r\nend",
    "type": "function"
  }, {
    "id": 321,
    "text": "local filename = os.getenv(\"TEMP\")",
    "type": "statement:localassign"
  }, {
    "id": 322,
    "text": "if filename == nil then\r\n\t\tfilename = os.getenv(\"TMP\")\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 323,
    "text": "filename = os.getenv(\"TMP\")",
    "type": "statement:assign"
  }, {
    "id": 324,
    "text": "if filename == nil then\r\n\t  filename = luacom.GetCurrentDirectory()\r\n  end",
    "type": "statement:if"
  }, {
    "id": 325,
    "text": "filename = luacom.GetCurrentDirectory()",
    "type": "statement:assign"
  }, {
    "id": 326,
    "text": "if string.sub(filename, -1) ~= \"\\\\\" then\r\n  \tfilename = filename..\"\\\\\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 327,
    "text": "filename = filename..\"\\\\\"",
    "type": "statement:assign"
  }, {
    "id": 328,
    "text": "filename = luacomE.DumpTypeLib(obj, filename)",
    "type": "statement:assign"
  }, {
    "id": 329,
    "text": "local browser = luacom.CreateObject(\"InternetExplorer.Application\")",
    "type": "statement:localassign"
  }, {
    "id": 330,
    "text": "browser.Visible = true",
    "type": "statement:assign"
  }, {
    "id": 331,
    "text": "browser:Navigate2(filename)",
    "type": "statement:functioncall"
  }, {
    "id": 332,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 333,
    "text": "function interface_proto:AddMethod(methodinfo)\r\n  table.insert(self.methods, methodinfo)\r\nend",
    "type": "function"
  }, {
    "id": 334,
    "text": "table.insert(self.methods, methodinfo)",
    "type": "statement:functioncall"
  }, {
    "id": 335,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 336,
    "text": "function interface_proto:AddProperty(propertyinfo)\r\n  table.insert(self.properties, propertyinfo)\r\nend",
    "type": "function"
  }, {
    "id": 337,
    "text": "table.insert(self.properties, propertyinfo)",
    "type": "statement:functioncall"
  }, {
    "id": 338,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 339,
    "text": "function interface_proto:Write(file)\r\n  local start_id = 0\r\n\r\n  local function attribute_writer(line_break)\r\n    local first_attribute = true\r\n    return function(name, value)\r\n        if not first_attribute then\r\n          if line_break then\r\n            file:write(\",\\n  \")\r\n          else\r\n            file:write(\", \")\r\n          end\r\n        else\r\n          if line_break then file:write(\"  \") end\r\n        end\r\n        first_attribute = false\r\n        if(type(name) == \"number\") then\r\n          file:write(value)\r\n        else \r\n          file:write(name .. \"(\" .. value .. \")\")\r\n        end\r\n      end\r\n  end\r\n\r\n  local function constant_writer(i, constant)\r\n    file:write(\"\\n\" .. \"  const \" .. constant.type .. \" \" .. constant.name .. \" = \" ..\r\n      constant.value .. \";\\n\")\r\n  end\r\n\r\n  local function typedef_writer(i, typedef)\r\n    file:write(\"\\n\" .. \"  typedef \" .. typedef.type .. \" \" .. typedef.typedef .. \";\\n\")\r\n  end\r\n  \r\n  local function param_writer()\r\n    local first_param = true\r\n    return function(i, param)\r\n        if not first_param then file:write(\",\\n    \") end\r\n        first_param = false\r\n        if param.attributes then\r\n          file:write(\"[\")\r\n          table.foreach(param.attributes, attribute_writer(false))\r\n          file:write(\"] \")\r\n        end\r\n        file:write(param.type .. \" \" .. param.name)\r\n      end\r\n  end\r\n\r\n  local function property_writer(i, property)\r\n    if not property.attributes then\r\n      property.attributes = { id = tostring(start_id + i) }\r\n    end\r\n    file:write(\"\\n  [\\n\")\r\n    if property.attributes.id == nil then\r\n      property.attributes.id = tostring(start_id + i)\r\n    end\r\n    table.foreach(property.attributes, attribute_writer(true))\r\n    file:write(\"\\n  ]\\n  \")\r\n    file:write(property.type .. \" \" .. property.name .. \";\\n\")\r\n  end\r\n  \r\n  local function method_writer(i, method)\r\n    if not method.attributes then\r\n      method.attributes = { id = tostring(start_id + i) }\r\n    end\r\n    file:write(\"\\n  [\\n\")\r\n    if method.attributes.id == nil then\r\n      method.attributes.id = tostring(start_id + i)\r\n    end\r\n    table.foreach(method.attributes, attribute_writer(true))\r\n    file:write(\"\\n  ]\\n  \")\r\n    if method.type then\r\n      file:write(method.type)\r\n    else\r\n      file:write(\"void\")  \r\n    end\r\n    file:write(\" \" .. method.name .. \"(\")\r\n    if method.parameters then\r\n      file:write(\"\\n    \")\r\n      table.foreachi(method.parameters, param_writer())\r\n      file:write(\"\\n  );\\n\")\r\n    else\r\n      file:write(\"void\" .. \");\\n\")\r\n    end\r\n  end\r\n  \r\n  if self.attributes then\r\n    file:write(\"[\\n  \")\r\n    table.foreach(self.attributes, attribute_writer(true))\r\n    file:write(\"\\n]\\n\")\r\n  end\r\n  file:write(\"dispinterface \" .. self.name .. \"\\n{\")\r\n  if self.interface ~= nil then\r\n    file:write(\"  interface \" .. self.interface)\r\n  else\r\n--  table.foreachi(self.constants, constant_writer)\r\n--  file:write(\"\\n\")\r\n--  table.foreachi(self.typedefs, typedef_writer)\r\n    file:write(\"\\n  properties:\\n\")\r\n    table.foreachi(self.properties, property_writer)\r\n    start_id = table.getn(self.properties)\r\n    file:write(\"\\n  methods:\\n\")\r\n    table.foreachi(self.methods, method_writer)\r\n  end\r\n  file:write(\"\\n};\\n\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 340,
    "text": "local start_id = 0",
    "type": "statement:localassign"
  }, {
    "id": 341,
    "text": "local function attribute_writer(line_break)\r\n    local first_attribute = true\r\n    return function(name, value)\r\n        if not first_attribute then\r\n          if line_break then\r\n            file:write(\",\\n  \")\r\n          else\r\n            file:write(\", \")\r\n          end\r\n        else\r\n          if line_break then file:write(\"  \") end\r\n        end\r\n        first_attribute = false\r\n        if(type(name) == \"number\") then\r\n          file:write(value)\r\n        else \r\n          file:write(name .. \"(\" .. value .. \")\")\r\n        end\r\n      end\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 342,
    "text": "local first_attribute = true",
    "type": "statement:localassign"
  }, {
    "id": 343,
    "text": "if not first_attribute then\r\n          if line_break then\r\n            file:write(\",\\n  \")\r\n          else\r\n            file:write(\", \")\r\n          end\r\n        else\r\n          if line_break then file:write(\"  \") end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 344,
    "text": "if line_break then\r\n            file:write(\",\\n  \")\r\n          else\r\n            file:write(\", \")\r\n          end",
    "type": "statement:if"
  }, {
    "id": 345,
    "text": "file:write(\",\\n  \")",
    "type": "statement:functioncall"
  }, {
    "id": 346,
    "text": "file:write(\", \")",
    "type": "statement:functioncall"
  }, {
    "id": 347,
    "text": "if line_break then file:write(\"  \") end",
    "type": "statement:if"
  }, {
    "id": 348,
    "text": "file:write(\"  \")",
    "type": "statement:functioncall"
  }, {
    "id": 349,
    "text": "first_attribute = false",
    "type": "statement:assign"
  }, {
    "id": 350,
    "text": "if(type(name) == \"number\") then\r\n          file:write(value)\r\n        else \r\n          file:write(name .. \"(\" .. value .. \")\")\r\n        end",
    "type": "statement:if"
  }, {
    "id": 351,
    "text": "file:write(value)",
    "type": "statement:functioncall"
  }, {
    "id": 352,
    "text": "file:write(name .. \"(\" .. value .. \")\")",
    "type": "statement:functioncall"
  }, {
    "id": 353,
    "text": "local function constant_writer(i, constant)\r\n    file:write(\"\\n\" .. \"  const \" .. constant.type .. \" \" .. constant.name .. \" = \" ..\r\n      constant.value .. \";\\n\")\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 354,
    "text": "file:write(\"\\n\" .. \"  const \" .. constant.type .. \" \" .. constant.name .. \" = \" ..\r\n      constant.value .. \";\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 355,
    "text": "local function typedef_writer(i, typedef)\r\n    file:write(\"\\n\" .. \"  typedef \" .. typedef.type .. \" \" .. typedef.typedef .. \";\\n\")\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 356,
    "text": "file:write(\"\\n\" .. \"  typedef \" .. typedef.type .. \" \" .. typedef.typedef .. \";\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 357,
    "text": "local function param_writer()\r\n    local first_param = true\r\n    return function(i, param)\r\n        if not first_param then file:write(\",\\n    \") end\r\n        first_param = false\r\n        if param.attributes then\r\n          file:write(\"[\")\r\n          table.foreach(param.attributes, attribute_writer(false))\r\n          file:write(\"] \")\r\n        end\r\n        file:write(param.type .. \" \" .. param.name)\r\n      end\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 358,
    "text": "if not first_param then file:write(\",\\n    \") end",
    "type": "statement:if"
  }, {
    "id": 359,
    "text": "file:write(\",\\n    \")",
    "type": "statement:functioncall"
  }, {
    "id": 360,
    "text": "if param.attributes then\r\n          file:write(\"[\")\r\n          table.foreach(param.attributes, attribute_writer(false))\r\n          file:write(\"] \")\r\n        end",
    "type": "statement:if"
  }, {
    "id": 361,
    "text": "file:write(\"[\")",
    "type": "statement:functioncall"
  }, {
    "id": 362,
    "text": "table.foreach(param.attributes, attribute_writer(false))",
    "type": "statement:functioncall"
  }, {
    "id": 363,
    "text": "file:write(\"] \")",
    "type": "statement:functioncall"
  }, {
    "id": 364,
    "text": "file:write(param.type .. \" \" .. param.name)",
    "type": "statement:functioncall"
  }, {
    "id": 365,
    "text": "local function property_writer(i, property)\r\n    if not property.attributes then\r\n      property.attributes = { id = tostring(start_id + i) }\r\n    end\r\n    file:write(\"\\n  [\\n\")\r\n    if property.attributes.id == nil then\r\n      property.attributes.id = tostring(start_id + i)\r\n    end\r\n    table.foreach(property.attributes, attribute_writer(true))\r\n    file:write(\"\\n  ]\\n  \")\r\n    file:write(property.type .. \" \" .. property.name .. \";\\n\")\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 366,
    "text": "if not property.attributes then\r\n      property.attributes = { id = tostring(start_id + i) }\r\n    end",
    "type": "statement:if"
  }, {
    "id": 367,
    "text": "property.attributes = { id = tostring(start_id + i) }",
    "type": "statement:assign"
  }, {
    "id": 368,
    "text": "file:write(\"\\n  [\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 369,
    "text": "if property.attributes.id == nil then\r\n      property.attributes.id = tostring(start_id + i)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 370,
    "text": "property.attributes.id = tostring(start_id + i)",
    "type": "statement:assign"
  }, {
    "id": 371,
    "text": "table.foreach(property.attributes, attribute_writer(true))",
    "type": "statement:functioncall"
  }, {
    "id": 372,
    "text": "file:write(\"\\n  ]\\n  \")",
    "type": "statement:functioncall"
  }, {
    "id": 373,
    "text": "file:write(property.type .. \" \" .. property.name .. \";\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 374,
    "text": "local function method_writer(i, method)\r\n    if not method.attributes then\r\n      method.attributes = { id = tostring(start_id + i) }\r\n    end\r\n    file:write(\"\\n  [\\n\")\r\n    if method.attributes.id == nil then\r\n      method.attributes.id = tostring(start_id + i)\r\n    end\r\n    table.foreach(method.attributes, attribute_writer(true))\r\n    file:write(\"\\n  ]\\n  \")\r\n    if method.type then\r\n      file:write(method.type)\r\n    else\r\n      file:write(\"void\")  \r\n    end\r\n    file:write(\" \" .. method.name .. \"(\")\r\n    if method.parameters then\r\n      file:write(\"\\n    \")\r\n      table.foreachi(method.parameters, param_writer())\r\n      file:write(\"\\n  );\\n\")\r\n    else\r\n      file:write(\"void\" .. \");\\n\")\r\n    end\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 375,
    "text": "if not method.attributes then\r\n      method.attributes = { id = tostring(start_id + i) }\r\n    end",
    "type": "statement:if"
  }, {
    "id": 376,
    "text": "method.attributes = { id = tostring(start_id + i) }",
    "type": "statement:assign"
  }, {
    "id": 377,
    "text": "if method.attributes.id == nil then\r\n      method.attributes.id = tostring(start_id + i)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 378,
    "text": "method.attributes.id = tostring(start_id + i)",
    "type": "statement:assign"
  }, {
    "id": 379,
    "text": "table.foreach(method.attributes, attribute_writer(true))",
    "type": "statement:functioncall"
  }, {
    "id": 380,
    "text": "if method.type then\r\n      file:write(method.type)\r\n    else\r\n      file:write(\"void\")  \r\n    end",
    "type": "statement:if"
  }, {
    "id": 381,
    "text": "file:write(method.type)",
    "type": "statement:functioncall"
  }, {
    "id": 382,
    "text": "file:write(\"void\")",
    "type": "statement:functioncall"
  }, {
    "id": 383,
    "text": "file:write(\" \" .. method.name .. \"(\")",
    "type": "statement:functioncall"
  }, {
    "id": 384,
    "text": "if method.parameters then\r\n      file:write(\"\\n    \")\r\n      table.foreachi(method.parameters, param_writer())\r\n      file:write(\"\\n  );\\n\")\r\n    else\r\n      file:write(\"void\" .. \");\\n\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 385,
    "text": "file:write(\"\\n    \")",
    "type": "statement:functioncall"
  }, {
    "id": 386,
    "text": "table.foreachi(method.parameters, param_writer())",
    "type": "statement:functioncall"
  }, {
    "id": 387,
    "text": "file:write(\"\\n  );\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 388,
    "text": "file:write(\"void\" .. \");\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 389,
    "text": "if self.attributes then\r\n    file:write(\"[\\n  \")\r\n    table.foreach(self.attributes, attribute_writer(true))\r\n    file:write(\"\\n]\\n\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 390,
    "text": "file:write(\"[\\n  \")",
    "type": "statement:functioncall"
  }, {
    "id": 391,
    "text": "table.foreach(self.attributes, attribute_writer(true))",
    "type": "statement:functioncall"
  }, {
    "id": 392,
    "text": "file:write(\"\\n]\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 393,
    "text": "file:write(\"dispinterface \" .. self.name .. \"\\n{\")",
    "type": "statement:functioncall"
  }, {
    "id": 394,
    "text": "if self.interface ~= nil then\r\n    file:write(\"  interface \" .. self.interface)\r\n  else\r\n--  table.foreachi(self.constants, constant_writer)\r\n--  file:write(\"\\n\")\r\n--  table.foreachi(self.typedefs, typedef_writer)\r\n    file:write(\"\\n  properties:\\n\")\r\n    table.foreachi(self.properties, property_writer)\r\n    start_id = table.getn(self.properties)\r\n    file:write(\"\\n  methods:\\n\")\r\n    table.foreachi(self.methods, method_writer)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 395,
    "text": "file:write(\"  interface \" .. self.interface)",
    "type": "statement:functioncall"
  }, {
    "id": 396,
    "text": "file:write(\"\\n  properties:\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 397,
    "text": "table.foreachi(self.properties, property_writer)",
    "type": "statement:functioncall"
  }, {
    "id": 398,
    "text": "start_id = table.getn(self.properties)",
    "type": "statement:assign"
  }, {
    "id": 399,
    "text": "file:write(\"\\n  methods:\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 400,
    "text": "table.foreachi(self.methods, method_writer)",
    "type": "statement:functioncall"
  }, {
    "id": 401,
    "text": "file:write(\"\\n};\\n\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 402,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 403,
    "text": "local function attribute_writer(line_break)\r\n    local first_attribute = true\r\n    return function(name, value)\r\n        if not first_attribute then\r\n          if line_break then\r\n            file:write(\",\\n  \")\r\n          else\r\n            file:write(\", \")\r\n          end\r\n        else\r\n          if line_break then file:write(\"  \") end\r\n        end\r\n        first_attribute = false\r\n        if(type(name) == \"number\") then\r\n          file:write(value)\r\n        else \r\n          file:write(name .. \"(\" .. value .. \")\")\r\n        end\r\n      end\r\n  end",
    "type": "function"
  }, {
    "id": 404,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 405,
    "text": "local function constant_writer(i, constant)\r\n    file:write(\"\\n\" .. \"  const \" .. constant.type .. \" \" .. constant.name .. \" = \" ..\r\n      constant.value .. \";\\n\")\r\n  end",
    "type": "function"
  }, {
    "id": 406,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 407,
    "text": "local function typedef_writer(i, typedef)\r\n    file:write(\"\\n\" .. \"  typedef \" .. typedef.type .. \" \" .. typedef.typedef .. \";\\n\")\r\n  end",
    "type": "function"
  }, {
    "id": 408,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 409,
    "text": "local function param_writer()\r\n    local first_param = true\r\n    return function(i, param)\r\n        if not first_param then file:write(\",\\n    \") end\r\n        first_param = false\r\n        if param.attributes then\r\n          file:write(\"[\")\r\n          table.foreach(param.attributes, attribute_writer(false))\r\n          file:write(\"] \")\r\n        end\r\n        file:write(param.type .. \" \" .. param.name)\r\n      end\r\n  end",
    "type": "function"
  }, {
    "id": 410,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 411,
    "text": "local function property_writer(i, property)\r\n    if not property.attributes then\r\n      property.attributes = { id = tostring(start_id + i) }\r\n    end\r\n    file:write(\"\\n  [\\n\")\r\n    if property.attributes.id == nil then\r\n      property.attributes.id = tostring(start_id + i)\r\n    end\r\n    table.foreach(property.attributes, attribute_writer(true))\r\n    file:write(\"\\n  ]\\n  \")\r\n    file:write(property.type .. \" \" .. property.name .. \";\\n\")\r\n  end",
    "type": "function"
  }, {
    "id": 412,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 413,
    "text": "local function method_writer(i, method)\r\n    if not method.attributes then\r\n      method.attributes = { id = tostring(start_id + i) }\r\n    end\r\n    file:write(\"\\n  [\\n\")\r\n    if method.attributes.id == nil then\r\n      method.attributes.id = tostring(start_id + i)\r\n    end\r\n    table.foreach(method.attributes, attribute_writer(true))\r\n    file:write(\"\\n  ]\\n  \")\r\n    if method.type then\r\n      file:write(method.type)\r\n    else\r\n      file:write(\"void\")  \r\n    end\r\n    file:write(\" \" .. method.name .. \"(\")\r\n    if method.parameters then\r\n      file:write(\"\\n    \")\r\n      table.foreachi(method.parameters, param_writer())\r\n      file:write(\"\\n  );\\n\")\r\n    else\r\n      file:write(\"void\" .. \");\\n\")\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 414,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 415,
    "text": "function coclass_proto:AddInterface(attributes)\r\n  table.insert(self.interfaces, attributes)\r\nend",
    "type": "function"
  }, {
    "id": 416,
    "text": "table.insert(self.interfaces, attributes)",
    "type": "statement:functioncall"
  }, {
    "id": 417,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 418,
    "text": "function coclass_proto:Write(file)\r\n  local function attribute_writer(line_break)\r\n    local first_attribute = true\r\n    return function(name, value)\r\n        if not first_attribute then\r\n          if line_break then\r\n            file:write(\",\\n  \")\r\n          else\r\n            file:write(\", \")\r\n          end\r\n        end\r\n        first_attribute = false\r\n        if(type(name) == \"number\") then\r\n          file:write(value)\r\n        else \r\n          file:write(name .. \"(\" .. value .. \")\")\r\n        end\r\n      end\r\n  end\r\n\r\n  local function interface_writer(i, interface)\r\n    local name = interface.name\r\n    interface.name = nil\r\n    file:write(\"[\")\r\n    table.foreach(interface, attribute_writer(false))   \r\n    file:write(\"] \")\r\n    file:write(\"dispinterface \" .. name .. \";\\n\")\r\n    interface.name = name\r\n  end\r\n\r\n  if self.attributes then\r\n    file:write(\"[\\n  \")\r\n    table.foreach(self.attributes, attribute_writer(true))\r\n    file:write(\"\\n]\\n\")\r\n  end\r\n  file:write(\"coclass \" .. self.name .. \"\\n{\\n\")\r\n  table.foreachi(self.interfaces, interface_writer)\r\n  file:write(\"};\\n\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 419,
    "text": "local function attribute_writer(line_break)\r\n    local first_attribute = true\r\n    return function(name, value)\r\n        if not first_attribute then\r\n          if line_break then\r\n            file:write(\",\\n  \")\r\n          else\r\n            file:write(\", \")\r\n          end\r\n        end\r\n        first_attribute = false\r\n        if(type(name) == \"number\") then\r\n          file:write(value)\r\n        else \r\n          file:write(name .. \"(\" .. value .. \")\")\r\n        end\r\n      end\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 420,
    "text": "if not first_attribute then\r\n          if line_break then\r\n            file:write(\",\\n  \")\r\n          else\r\n            file:write(\", \")\r\n          end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 421,
    "text": "local function interface_writer(i, interface)\r\n    local name = interface.name\r\n    interface.name = nil\r\n    file:write(\"[\")\r\n    table.foreach(interface, attribute_writer(false))   \r\n    file:write(\"] \")\r\n    file:write(\"dispinterface \" .. name .. \";\\n\")\r\n    interface.name = name\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 422,
    "text": "local name = interface.name",
    "type": "statement:localassign"
  }, {
    "id": 423,
    "text": "interface.name = nil",
    "type": "statement:assign"
  }, {
    "id": 424,
    "text": "table.foreach(interface, attribute_writer(false))",
    "type": "statement:functioncall"
  }, {
    "id": 425,
    "text": "file:write(\"dispinterface \" .. name .. \";\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 426,
    "text": "interface.name = name",
    "type": "statement:assign"
  }, {
    "id": 427,
    "text": "file:write(\"coclass \" .. self.name .. \"\\n{\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 428,
    "text": "table.foreachi(self.interfaces, interface_writer)",
    "type": "statement:functioncall"
  }, {
    "id": 429,
    "text": "file:write(\"};\\n\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 430,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 431,
    "text": "local function attribute_writer(line_break)\r\n    local first_attribute = true\r\n    return function(name, value)\r\n        if not first_attribute then\r\n          if line_break then\r\n            file:write(\",\\n  \")\r\n          else\r\n            file:write(\", \")\r\n          end\r\n        end\r\n        first_attribute = false\r\n        if(type(name) == \"number\") then\r\n          file:write(value)\r\n        else \r\n          file:write(name .. \"(\" .. value .. \")\")\r\n        end\r\n      end\r\n  end",
    "type": "function"
  }, {
    "id": 432,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 433,
    "text": "local function interface_writer(i, interface)\r\n    local name = interface.name\r\n    interface.name = nil\r\n    file:write(\"[\")\r\n    table.foreach(interface, attribute_writer(false))   \r\n    file:write(\"] \")\r\n    file:write(\"dispinterface \" .. name .. \";\\n\")\r\n    interface.name = name\r\n  end",
    "type": "function"
  }, {
    "id": 434,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 435,
    "text": "function library_proto:AddInterface(attributes)\r\n  local name = attributes.name\r\n  attributes.name = nil\r\n  local interface = attributes.interface\r\n  attributes.interface = nil\r\n  local newinterface = { name = name, attributes = attributes, interface = interface, __index = interface_proto }\r\n  setmetatable(newinterface, newinterface)\r\n  table.insert(self.interfaces, newinterface)\r\n  if interface ~= nil then\r\n    return nil\r\n  else\r\n    return newinterface\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 436,
    "text": "local name = attributes.name",
    "type": "statement:localassign"
  }, {
    "id": 437,
    "text": "attributes.name = nil",
    "type": "statement:assign"
  }, {
    "id": 438,
    "text": "local interface = attributes.interface",
    "type": "statement:localassign"
  }, {
    "id": 439,
    "text": "attributes.interface = nil",
    "type": "statement:assign"
  }, {
    "id": 440,
    "text": "local newinterface = { name = name, attributes = attributes, interface = interface, __index = interface_proto }",
    "type": "statement:localassign"
  }, {
    "id": 441,
    "text": "setmetatable(newinterface, newinterface)",
    "type": "statement:functioncall"
  }, {
    "id": 442,
    "text": "table.insert(self.interfaces, newinterface)",
    "type": "statement:functioncall"
  }, {
    "id": 443,
    "text": "if interface ~= nil then\r\n    return nil\r\n  else\r\n    return newinterface\r\n  end",
    "type": "statement:if"
  }, {
    "id": 444,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 445,
    "text": "function library_proto:AddCoclass(attributes)\r\n  local name = attributes.name\r\n  attributes.name = nil\r\n  local newcoclass = { name = name, attributes = attributes, __index = coclass_proto }\r\n  setmetatable(newcoclass, newcoclass)\r\n  table.insert(self.coclasses, newcoclass)\r\n  return newcoclass\r\nend",
    "type": "function"
  }, {
    "id": 446,
    "text": "local newcoclass = { name = name, attributes = attributes, __index = coclass_proto }",
    "type": "statement:localassign"
  }, {
    "id": 447,
    "text": "setmetatable(newcoclass, newcoclass)",
    "type": "statement:functioncall"
  }, {
    "id": 448,
    "text": "table.insert(self.coclasses, newcoclass)",
    "type": "statement:functioncall"
  }, {
    "id": 449,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 450,
    "text": "function library_proto:AddImport(library)\r\n  table.insert(self.imports, library)\r\nend",
    "type": "function"
  }, {
    "id": 451,
    "text": "table.insert(self.imports, library)",
    "type": "statement:functioncall"
  }, {
    "id": 452,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 453,
    "text": "function library_proto:WriteODL(filename)\r\n  local file = io.open(filename .. \".odl\",\"w+\")\r\n  \r\n  local function attribute_writer(line_break)\r\n    local first_attribute = true\r\n    return function(name, value)\r\n        if not first_attribute then\r\n          if line_break then\r\n            file:write(\",\\n  \")\r\n          else\r\n            file:write(\", \")\r\n          end\r\n        end\r\n        first_attribute = false\r\n        if(type(name) == \"number\") then\r\n          file:write(value)\r\n        else \r\n          file:write(name .. \"(\" .. value .. \")\")\r\n        end\r\n      end\r\n  end\r\n  \r\n  local function import_writer(i, import)\r\n    file:write(\"  \" .. \"importlib(\\\"\" .. import .. \"\\\");\\n\")\r\n  end\r\n  \r\n  local function typedef_writer(i, typedef)\r\n    file:write(\"\\n\" .. \"  typedef \" .. typedef.type .. \" \" .. typedef.typedef .. \";\\n\")\r\n  end\r\n  \r\n  local function interface_writer(i, interface)\r\n    interface:Write(file)\r\n  end\r\n\r\n  local function coclass_writer(i, coclass)\r\n    coclass:Write(file)\r\n  end\r\n  \r\n  if self.attributes then\r\n    file:write(\"[\\n  \")\r\n    table.foreach(self.attributes, attribute_writer(true))\r\n    file:write(\"\\n]\\n\")\r\n  end\r\n  file:write(\"library \" .. self.name .. \"\\n{\\n\")\r\n  table.foreachi(self.imports, import_writer)\r\n  table.foreachi(self.typedefs, typedef_writer)\r\n  table.foreachi(self.interfaces, interface_writer)\r\n  table.foreachi(self.coclasses, coclass_writer)\r\n  file:write(\"};\\n\\n\")\r\n  file:close()\r\nend",
    "type": "function"
  }, {
    "id": 454,
    "text": "local file = io.open(filename .. \".odl\",\"w+\")",
    "type": "statement:localassign"
  }, {
    "id": 455,
    "text": "local function import_writer(i, import)\r\n    file:write(\"  \" .. \"importlib(\\\"\" .. import .. \"\\\");\\n\")\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 456,
    "text": "file:write(\"  \" .. \"importlib(\\\"\" .. import .. \"\\\");\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 457,
    "text": "local function interface_writer(i, interface)\r\n    interface:Write(file)\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 458,
    "text": "interface:Write(file)",
    "type": "statement:functioncall"
  }, {
    "id": 459,
    "text": "local function coclass_writer(i, coclass)\r\n    coclass:Write(file)\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 460,
    "text": "coclass:Write(file)",
    "type": "statement:functioncall"
  }, {
    "id": 461,
    "text": "file:write(\"library \" .. self.name .. \"\\n{\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 462,
    "text": "table.foreachi(self.imports, import_writer)",
    "type": "statement:functioncall"
  }, {
    "id": 463,
    "text": "table.foreachi(self.typedefs, typedef_writer)",
    "type": "statement:functioncall"
  }, {
    "id": 464,
    "text": "table.foreachi(self.coclasses, coclass_writer)",
    "type": "statement:functioncall"
  }, {
    "id": 465,
    "text": "file:close()",
    "type": "statement:functioncall"
  }, {
    "id": 466,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 467,
    "text": "local function attribute_writer(line_break)\r\n    local first_attribute = true\r\n    return function(name, value)\r\n        if not first_attribute then\r\n          if line_break then\r\n            file:write(\",\\n  \")\r\n          else\r\n            file:write(\", \")\r\n          end\r\n        end\r\n        first_attribute = false\r\n        if(type(name) == \"number\") then\r\n          file:write(value)\r\n        else \r\n          file:write(name .. \"(\" .. value .. \")\")\r\n        end\r\n      end\r\n  end",
    "type": "function"
  }, {
    "id": 468,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 469,
    "text": "local function import_writer(i, import)\r\n    file:write(\"  \" .. \"importlib(\\\"\" .. import .. \"\\\");\\n\")\r\n  end",
    "type": "function"
  }, {
    "id": 470,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 471,
    "text": "local function typedef_writer(i, typedef)\r\n    file:write(\"\\n\" .. \"  typedef \" .. typedef.type .. \" \" .. typedef.typedef .. \";\\n\")\r\n  end",
    "type": "function"
  }, {
    "id": 472,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 473,
    "text": "local function interface_writer(i, interface)\r\n    interface:Write(file)\r\n  end",
    "type": "function"
  }, {
    "id": 474,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 475,
    "text": "local function coclass_writer(i, coclass)\r\n    coclass:Write(file)\r\n  end",
    "type": "function"
  }, {
    "id": 476,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 477,
    "text": "function library_proto:WriteTLB(filename)\r\n  self:WriteODL(filename)\r\n  os.execute(\"midl \" .. filename .. \".odl\")\r\nend",
    "type": "function"
  }, {
    "id": 478,
    "text": "self:WriteODL(filename)",
    "type": "statement:functioncall"
  }, {
    "id": 479,
    "text": "os.execute(\"midl \" .. filename .. \".odl\")",
    "type": "statement:functioncall"
  }, {
    "id": 480,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 481,
    "text": "function luacomE.NewLibrary(attributes)\r\n  local name = attributes.name\r\n  attributes.name = nil\r\n  local newlibrary = { name = name, attributes = attributes, __index = library_proto }\r\n  setmetatable(newlibrary, newlibrary)\r\n  return newlibrary\r\nend",
    "type": "function"
  }, {
    "id": 482,
    "text": "local newlibrary = { name = name, attributes = attributes, __index = library_proto }",
    "type": "statement:localassign"
  }, {
    "id": 483,
    "text": "setmetatable(newlibrary, newlibrary)",
    "type": "statement:functioncall"
  }, {
    "id": 484,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 485,
    "text": "function(i,v) typeinfo[i] = v end",
    "type": "function"
  }, {
    "id": 486,
    "text": "function(i,v) interface[i] = v end",
    "type": "function"
  }, {
    "id": 487,
    "text": "function(i, param)\r\n            if param.out then\r\n              if first_retval then\r\n                io.write(param.name)\r\n                first_retval = false\r\n              else\r\n                io.write(\", \" .. param.name)\r\n              end\r\n              has_retval = true\r\n            end\r\n          end",
    "type": "function"
  }, {
    "id": 488,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 489,
    "text": "function() return has_retval end",
    "type": "function"
  }, {
    "id": 490,
    "text": "function(name, value)\r\n        if not first_attribute then\r\n          if line_break then\r\n            file:write(\",\\n  \")\r\n          else\r\n            file:write(\", \")\r\n          end\r\n        else\r\n          if line_break then file:write(\"  \") end\r\n        end\r\n        first_attribute = false\r\n        if(type(name) == \"number\") then\r\n          file:write(value)\r\n        else \r\n          file:write(name .. \"(\" .. value .. \")\")\r\n        end\r\n      end",
    "type": "function"
  }, {
    "id": 491,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 492,
    "text": "function(i, param)\r\n        if not first_param then file:write(\",\\n    \") end\r\n        first_param = false\r\n        if param.attributes then\r\n          file:write(\"[\")\r\n          table.foreach(param.attributes, attribute_writer(false))\r\n          file:write(\"] \")\r\n        end\r\n        file:write(param.type .. \" \" .. param.name)\r\n      end",
    "type": "function"
  }, {
    "id": 493,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 494,
    "text": "function(name, value)\r\n        if not first_attribute then\r\n          if line_break then\r\n            file:write(\",\\n  \")\r\n          else\r\n            file:write(\", \")\r\n          end\r\n        end\r\n        first_attribute = false\r\n        if(type(name) == \"number\") then\r\n          file:write(value)\r\n        else \r\n          file:write(name .. \"(\" .. value .. \")\")\r\n        end\r\n      end",
    "type": "function"
  }, {
    "id": 495,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 496,
    "text": "function(name, value)\r\n        if not first_attribute then\r\n          if line_break then\r\n            file:write(\",\\n  \")\r\n          else\r\n            file:write(\", \")\r\n          end\r\n        end\r\n        first_attribute = false\r\n        if(type(name) == \"number\") then\r\n          file:write(value)\r\n        else \r\n          file:write(name .. \"(\" .. value .. \")\")\r\n        end\r\n      end",
    "type": "function"
  }, {
    "id": 497,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 498,
    "text": "",
    "type": "function container"
  }, {
    "id": 499,
    "text": "GetEnumerator",
    "type": "global function"
  }, {
    "id": 500,
    "text": "GetTypeInfo",
    "type": "global function"
  }, {
    "id": 501,
    "text": "CreateObject",
    "type": "global function"
  }, {
    "id": 502,
    "text": "write",
    "type": "global function"
  }, {
    "id": 503,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 504,
    "text": "getenv",
    "type": "global function"
  }, {
    "id": 505,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 506,
    "text": "map_function",
    "type": "global function"
  }, {
    "id": 507,
    "text": "foreachi",
    "type": "global function"
  }, {
    "id": 508,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 509,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 510,
    "text": "foreach",
    "type": "global function"
  }, {
    "id": 511,
    "text": "type",
    "type": "global function"
  }, {
    "id": 512,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 513,
    "text": "checker",
    "type": "global function"
  }, {
    "id": 514,
    "text": "GetCurrentDirectory",
    "type": "global function"
  }, {
    "id": 515,
    "text": "output",
    "type": "global function"
  }, {
    "id": 516,
    "text": "LoadTypeLibrary",
    "type": "global function"
  }, {
    "id": 517,
    "text": "execute",
    "type": "global function"
  }, {
    "id": 518,
    "text": "open",
    "type": "global function"
  }, {
    "id": 519,
    "text": "error",
    "type": "global function"
  }, {
    "id": 520,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 521,
    "text": "getn",
    "type": "global function"
  }, {
    "id": 522,
    "text": "",
    "type": "variable container"
  }, {
    "id": 523,
    "text": "",
    "type": "require container"
  }, {
    "id": 524,
    "text": "",
    "type": "local variable"
  }, {
    "id": 525,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 526,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 527,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 528,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 529,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 530,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 531,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 532,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 533,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 534,
    "text": "",
    "type": "local variable"
  }, {
    "id": 535,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 536,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 537,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 538,
    "text": "",
    "type": "local variable"
  }, {
    "id": 539,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 540,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 541,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 542,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 543,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 544,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 545,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 546,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 547,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 548,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 549,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 550,
    "text": "",
    "type": "global variable"
  }, {
    "id": 551,
    "text": "",
    "type": "n/a"
  } ]
}