{
  "_filename": "control.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luacom/demo/control/control.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 12
  }, {
    "from": 7,
    "label": "has",
    "to": 13
  }, {
    "from": 2,
    "label": "has",
    "to": 14
  }, {
    "from": 2,
    "label": "has",
    "to": 15
  }, {
    "from": 2,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 16,
    "label": "has",
    "to": 21
  }, {
    "from": 16,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 20
  }, {
    "from": 16,
    "label": "has",
    "to": 28
  }, {
    "from": 2,
    "label": "has",
    "to": 29
  }, {
    "from": 2,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 31,
    "label": "has",
    "to": 36
  }, {
    "from": 31,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 35
  }, {
    "from": 30,
    "label": "has",
    "to": 28
  }, {
    "from": 30,
    "label": "has",
    "to": 39
  }, {
    "from": 30,
    "label": "has",
    "to": 40
  }, {
    "from": 2,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 18
  }, {
    "from": 2,
    "label": "has",
    "to": 43
  }, {
    "from": 2,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 28
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 39
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 46,
    "label": "has",
    "to": 28
  }, {
    "from": 46,
    "label": "has",
    "to": 50
  }, {
    "from": 46,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 46,
    "label": "has",
    "to": 28
  }, {
    "from": 46,
    "label": "has",
    "to": 53
  }, {
    "from": 46,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 46,
    "label": "has",
    "to": 28
  }, {
    "from": 46,
    "label": "has",
    "to": 39
  }, {
    "from": 46,
    "label": "has",
    "to": 56
  }, {
    "from": 46,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 46,
    "label": "has",
    "to": 28
  }, {
    "from": 2,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 18
  }, {
    "from": 2,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 60,
    "label": "has",
    "to": 63
  }, {
    "from": 60,
    "label": "has",
    "to": 64
  }, {
    "from": 60,
    "label": "has",
    "to": 65
  }, {
    "from": 60,
    "label": "has",
    "to": 18
  }, {
    "from": 2,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 18
  }, {
    "from": 2,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 18
  }, {
    "from": 2,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 68,
    "label": "has",
    "to": 72
  }, {
    "from": 2,
    "label": "has",
    "to": 73
  }, {
    "from": 2,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 18
  }, {
    "from": 2,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 18
  }, {
    "from": 2,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 78,
    "label": "has",
    "to": 81
  }, {
    "from": 78,
    "label": "has",
    "to": 82
  }, {
    "from": 78,
    "label": "has",
    "to": 18
  }, {
    "from": 2,
    "label": "has",
    "to": 18
  }, {
    "from": 2,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 8
  }, {
    "from": 84,
    "label": "has",
    "to": 9
  }, {
    "from": 84,
    "label": "has",
    "to": 10
  }, {
    "from": 84,
    "label": "has",
    "to": 11
  }, {
    "from": 84,
    "label": "has",
    "to": 12
  }, {
    "from": 84,
    "label": "has",
    "to": 13
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 17
  }, {
    "from": 86,
    "label": "has",
    "to": 18
  }, {
    "from": 86,
    "label": "has",
    "to": 19
  }, {
    "from": 86,
    "label": "has",
    "to": 20
  }, {
    "from": 86,
    "label": "has",
    "to": 21
  }, {
    "from": 86,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 19
  }, {
    "from": 86,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 20
  }, {
    "from": 86,
    "label": "has",
    "to": 28
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 42
  }, {
    "from": 88,
    "label": "has",
    "to": 18
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 90,
    "label": "has",
    "to": 28
  }, {
    "from": 90,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 39
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 46,
    "label": "has",
    "to": 28
  }, {
    "from": 46,
    "label": "has",
    "to": 50
  }, {
    "from": 46,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 46,
    "label": "has",
    "to": 28
  }, {
    "from": 46,
    "label": "has",
    "to": 53
  }, {
    "from": 46,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 46,
    "label": "has",
    "to": 28
  }, {
    "from": 46,
    "label": "has",
    "to": 39
  }, {
    "from": 46,
    "label": "has",
    "to": 56
  }, {
    "from": 46,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 46,
    "label": "has",
    "to": 28
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 18
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 94,
    "label": "has",
    "to": 61
  }, {
    "from": 94,
    "label": "has",
    "to": 62
  }, {
    "from": 94,
    "label": "has",
    "to": 63
  }, {
    "from": 94,
    "label": "has",
    "to": 64
  }, {
    "from": 94,
    "label": "has",
    "to": 65
  }, {
    "from": 94,
    "label": "has",
    "to": 18
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "has",
    "to": 18
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 98,
    "label": "has",
    "to": 18
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 100,
    "label": "has",
    "to": 69
  }, {
    "from": 100,
    "label": "has",
    "to": 70
  }, {
    "from": 100,
    "label": "has",
    "to": 71
  }, {
    "from": 100,
    "label": "has",
    "to": 72
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 102,
    "label": "has",
    "to": 75
  }, {
    "from": 102,
    "label": "has",
    "to": 18
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 104,
    "label": "has",
    "to": 77
  }, {
    "from": 104,
    "label": "has",
    "to": 18
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 106,
    "label": "has",
    "to": 79
  }, {
    "from": 106,
    "label": "has",
    "to": 80
  }, {
    "from": 106,
    "label": "has",
    "to": 81
  }, {
    "from": 106,
    "label": "has",
    "to": 82
  }, {
    "from": 106,
    "label": "has",
    "to": 18
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 108,
    "label": "has",
    "to": 110
  }, {
    "from": 108,
    "label": "has",
    "to": 111
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 108,
    "label": "has",
    "to": 113
  }, {
    "from": 108,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 108,
    "label": "has",
    "to": 116
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 117,
    "label": "has",
    "to": 119
  }, {
    "from": 117,
    "label": "has",
    "to": 120
  }, {
    "from": 117,
    "label": "has",
    "to": 121
  }, {
    "from": 117,
    "label": "has",
    "to": 122
  }, {
    "from": 117,
    "label": "has",
    "to": 123
  }, {
    "from": 117,
    "label": "has",
    "to": 124
  }, {
    "from": 117,
    "label": "has",
    "to": 125
  }, {
    "from": 117,
    "label": "has",
    "to": 126
  }, {
    "from": 117,
    "label": "has",
    "to": 127
  }, {
    "from": 117,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 117,
    "label": "has",
    "to": 130
  }, {
    "from": 131,
    "label": "has",
    "to": 118
  }, {
    "from": 131,
    "label": "has",
    "to": 119
  }, {
    "from": 131,
    "label": "has",
    "to": 120
  }, {
    "from": 131,
    "label": "has",
    "to": 121
  }, {
    "from": 131,
    "label": "has",
    "to": 122
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 131,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 131,
    "label": "has",
    "to": 135
  }, {
    "from": 136,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 31,
    "label": "has",
    "to": 36
  }, {
    "from": 31,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 35
  }, {
    "from": 136,
    "label": "has",
    "to": 28
  }, {
    "from": 136,
    "label": "has",
    "to": 39
  }, {
    "from": 136,
    "label": "has",
    "to": 40
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 84,
    "label": "calls",
    "to": 150
  }, {
    "from": 84,
    "label": "calls",
    "to": 145
  }, {
    "from": 2,
    "label": "calls",
    "to": 145
  }, {
    "from": 86,
    "label": "calls",
    "to": 158
  }, {
    "from": 2,
    "label": "calls",
    "to": 158
  }, {
    "from": 2,
    "label": "calls",
    "to": 158
  }, {
    "from": 2,
    "label": "calls",
    "to": 158
  }, {
    "from": 117,
    "label": "calls",
    "to": 140
  }, {
    "from": 84,
    "label": "calls",
    "to": 164
  }, {
    "from": 2,
    "label": "calls",
    "to": 157
  }, {
    "from": 108,
    "label": "calls",
    "to": 159
  }, {
    "from": 108,
    "label": "calls",
    "to": 159
  }, {
    "from": 117,
    "label": "calls",
    "to": 159
  }, {
    "from": 131,
    "label": "calls",
    "to": 159
  }, {
    "from": 86,
    "label": "calls",
    "to": 84
  }, {
    "from": 2,
    "label": "calls",
    "to": 84
  }, {
    "from": 2,
    "label": "calls",
    "to": 84
  }, {
    "from": 2,
    "label": "calls",
    "to": 84
  }, {
    "from": 2,
    "label": "calls",
    "to": 84
  }, {
    "from": 2,
    "label": "calls",
    "to": 84
  }, {
    "from": 2,
    "label": "calls",
    "to": 84
  }, {
    "from": 131,
    "label": "calls",
    "to": 143
  }, {
    "from": 138,
    "label": "calls",
    "to": 165
  }, {
    "from": 2,
    "label": "calls",
    "to": 160
  }, {
    "from": 2,
    "label": "calls",
    "to": 160
  }, {
    "from": 108,
    "label": "calls",
    "to": 142
  }, {
    "from": 2,
    "label": "calls",
    "to": 153
  }, {
    "from": 2,
    "label": "calls",
    "to": 153
  }, {
    "from": 84,
    "label": "calls",
    "to": 147
  }, {
    "from": 84,
    "label": "calls",
    "to": 146
  }, {
    "from": 2,
    "label": "calls",
    "to": 151
  }, {
    "from": 2,
    "label": "calls",
    "to": 151
  }, {
    "from": 2,
    "label": "calls",
    "to": 151
  }, {
    "from": 2,
    "label": "calls",
    "to": 152
  }, {
    "from": 84,
    "label": "calls",
    "to": 155
  }, {
    "from": 2,
    "label": "calls",
    "to": 156
  }, {
    "from": 2,
    "label": "calls",
    "to": 148
  }, {
    "from": 2,
    "label": "calls",
    "to": 148
  }, {
    "from": 2,
    "label": "calls",
    "to": 148
  }, {
    "from": 2,
    "label": "calls",
    "to": 148
  }, {
    "from": 2,
    "label": "calls",
    "to": 148
  }, {
    "from": 108,
    "label": "calls",
    "to": 148
  }, {
    "from": 2,
    "label": "calls",
    "to": 149
  }, {
    "from": 2,
    "label": "calls",
    "to": 161
  }, {
    "from": 2,
    "label": "calls",
    "to": 154
  }, {
    "from": 2,
    "label": "calls",
    "to": 154
  }, {
    "from": 2,
    "label": "calls",
    "to": 162
  }, {
    "from": 2,
    "label": "calls",
    "to": 144
  }, {
    "from": 108,
    "label": "calls",
    "to": 139
  }, {
    "from": 84,
    "label": "calls",
    "to": 163
  }, {
    "from": 2,
    "label": "calls",
    "to": 86
  }, {
    "from": 108,
    "label": "calls",
    "to": 2
  }, {
    "from": 138,
    "label": "calls",
    "to": 141
  }, {
    "from": 1,
    "label": "contains",
    "to": 138
  }, {
    "from": 138,
    "label": "declares",
    "to": 2
  }, {
    "from": 138,
    "label": "declares",
    "to": 84
  }, {
    "from": 138,
    "label": "declares",
    "to": 86
  }, {
    "from": 138,
    "label": "declares",
    "to": 88
  }, {
    "from": 138,
    "label": "declares",
    "to": 90
  }, {
    "from": 138,
    "label": "declares",
    "to": 92
  }, {
    "from": 138,
    "label": "declares",
    "to": 94
  }, {
    "from": 138,
    "label": "declares",
    "to": 96
  }, {
    "from": 138,
    "label": "declares",
    "to": 98
  }, {
    "from": 138,
    "label": "declares",
    "to": 100
  }, {
    "from": 138,
    "label": "declares",
    "to": 102
  }, {
    "from": 138,
    "label": "declares",
    "to": 104
  }, {
    "from": 138,
    "label": "declares",
    "to": 106
  }, {
    "from": 138,
    "label": "declares",
    "to": 108
  }, {
    "from": 138,
    "label": "declares",
    "to": 117
  }, {
    "from": 138,
    "label": "declares",
    "to": 131
  }, {
    "from": 138,
    "label": "declares",
    "to": 136
  }, {
    "from": 1,
    "label": "contains",
    "to": 167
  }, {
    "from": 1,
    "label": "contains",
    "to": 168
  }, {
    "from": 167,
    "label": "initializes",
    "to": 169
  }, {
    "from": 169,
    "label": "assigns",
    "to": 170
  }, {
    "from": 167,
    "label": "initializes",
    "to": 171
  }, {
    "from": 167,
    "label": "initializes",
    "to": 172
  }, {
    "from": 167,
    "label": "initializes",
    "to": 173
  }, {
    "from": 167,
    "label": "initializes",
    "to": 174
  }, {
    "from": 168,
    "label": "initializes",
    "to": 166
  }, {
    "from": 1,
    "label": "provides",
    "to": 175
  }, {
    "from": 175,
    "label": "provides",
    "to": 176
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "control",
    "type": "module"
  }, {
    "id": 2,
    "text": "function make_control()\r\n\r\nlocal obj = {}\r\n\r\nlocal cd_canvas         = nil\r\nlocal cd_dbuffer_canvas = nil\r\nlocal x,y = 0,0\r\n\r\nlocal function draw()\r\n    cd.Activate(cd_dbuffer_canvas)\r\n    cd.Background(cd.BLACK)\r\n    cd.Clear()\r\n\r\n    cd.Foreground(cd.EncodeColor(255,255,0))\r\n    cd.Box(x,x+120,y,y+120)\r\n    cd.Flush()\r\nend\r\n\r\nlocal incx = 1\r\nlocal incy = 1\r\n\r\nlocal function idle()\r\n  if not cd_canvas then return end\r\n  \r\n  x = x + incx\r\n  y = y + incy\r\n\r\n  local w, h = cd.GetCanvasSize()\r\n  \r\n  if ((x + 120) > w) or (x < 0) then\r\n    x = x - incx\r\n    incx = incx * -1\r\n    x = x + incx\r\n  end\r\n\r\n  if ((y + 120) > h) or (y < 0) then\r\n    y = y - incy\r\n    incy = incy * -1\r\n    y = y + incy\r\n  end\r\n \r\n  draw()\r\nend\r\n\r\nlocal timer1 = iup.timer{time=10}\r\n\r\nlocal canvas = iup.canvas{\r\n  rastersize = \"512x512\",\r\n  expand     = \"YES\",\r\n  action = function(self)\r\n    if cd_canvas == nil then\r\n      cd_canvas = cd.CreateCanvas(cd.IUP, self)\r\n      if cd_canvas == nil then\r\n        print(\"Error creating cdCanvas(IUP)!!!\")\r\n        exit(-1)\r\n      end\r\n\r\n      cd_dbuffer_canvas = cd.CreateCanvas(cd.DBUFFER, cd_canvas)\r\n      if cd_dbuffer_canvas == nil then\r\n        print(\"Error creating cdCanvas(DBUFFER)!!!\")\r\n        exit(-1)\r\n      end\r\n--      IupSetIdle(idle)\r\n    end\r\n    draw()\r\n    \r\n    local w,h = cd.GetCanvasSize()\r\n    local color = cd.EncodeColor(1,2,3)\r\n  end,\r\n}\r\n\r\nfunction timer1:action_cb()\r\n  idle()\r\n  return iup.DEFAULT\r\nend\r\n\r\nlocal dialog = iup.dialog{\r\n  iup.vbox{\r\n    canvas,\r\n  }\r\n}\r\n\r\nfunction canvas:keypress_cb(c, press)\r\n  draw()\r\n  if press == 1 then\r\n    if c == iup.K_UP then\r\n      local w,h = cd.GetCanvasSize()\r\n      y = y + 10\r\n      if y + 120 > h then y = 380 end\r\n      draw() \r\n    elseif c == iup.K_DOWN then\r\n      y = y - 10\r\n      if y < 0 then y = 0 end\r\n      draw() \r\n    elseif c == iup.K_LEFT then\r\n      x = x - 10\r\n      if x < 0 then x = 0 end\r\n      draw() \r\n    elseif c == iup.K_RIGHT then\r\n      local w,h = cd.GetCanvasSize()\r\n      x = x + 10\r\n      if x + 120 > w then x = 380 end\r\n      draw() \r\n    end\r\n  end\r\nend\r\n\r\n-- Methods required for all Lua controls\r\n\r\nfunction obj:InitialSize()\r\n  return 500,600\r\nend\r\n\r\nfunction obj:CreateWindow(hwndParent, x, y, cx, cy)\r\n\r\n  iup.SetAttribute(dialog, \"NATIVEPARENT\", hwndParent)\r\n  iup.SetAttribute(dialog, \"CONTROL\", \"YES\")\r\n  iup.SetAttribute(dialog, \"RASTERSIZE\", cx .. \"x\" .. cy)\r\n\r\n  timer1.run = \"YES\"\r\n\r\n  dialog:map()\r\n\r\n  return iup.GetAttributeData(dialog, \"WID\")\r\nend\r\n\r\nfunction obj:SetExtent(cx, cy)\r\n   return true\r\nend\r\n\r\nfunction obj:GetClass()\r\n  return \"{687362C8-00D6-4eff-9207-DDB22EE23A6D}\"\r\nend\r\n\r\nfunction obj:DestroyWindow()\r\n  timer1.run = \"NO\"\r\n  cd.KillCanvas(cd_dbuffer_canvas)\r\n  cd.KillCanvas(cd_canvas)\r\n  dialog:destroy()\r\nend\r\n\r\n-- ITestLuaControl implementation\r\n\r\nluacom.TableVariants = true\r\n\r\nfunction obj:Sum(i1, i2)\r\n  print(\"Calling Sum...\",i1,i2.Type)\r\n  return i1 + i2.Value\r\nend\r\n\r\nfunction obj:I2A(i1)\r\n  print(\"Calling I2A...\",i1)\r\n  return tostring(i1)\r\nend\r\n\r\nfunction obj:IntDivide(i1, i2)\r\n  print(\"Calling IntDivide...\",i1,i2)\r\n  div = {}\r\n  div.Type = \"decimal\"\r\n  div.Value = i1/i2\r\n  return div,math.mod(i1, i2)\r\nend\r\n\r\nreturn obj\r\n\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local obj = {}",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local cd_canvas         = nil",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local cd_dbuffer_canvas = nil",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "local x,y = 0,0",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "local function draw()\r\n    cd.Activate(cd_dbuffer_canvas)\r\n    cd.Background(cd.BLACK)\r\n    cd.Clear()\r\n\r\n    cd.Foreground(cd.EncodeColor(255,255,0))\r\n    cd.Box(x,x+120,y,y+120)\r\n    cd.Flush()\r\nend",
    "type": "statement:localfunction"
  }, {
    "id": 8,
    "text": "cd.Activate(cd_dbuffer_canvas)",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "cd.Background(cd.BLACK)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "cd.Clear()",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "cd.Foreground(cd.EncodeColor(255,255,0))",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "cd.Box(x,x+120,y,y+120)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "cd.Flush()",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "local incx = 1",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "local incy = 1",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "local function idle()\r\n  if not cd_canvas then return end\r\n  \r\n  x = x + incx\r\n  y = y + incy\r\n\r\n  local w, h = cd.GetCanvasSize()\r\n  \r\n  if ((x + 120) > w) or (x < 0) then\r\n    x = x - incx\r\n    incx = incx * -1\r\n    x = x + incx\r\n  end\r\n\r\n  if ((y + 120) > h) or (y < 0) then\r\n    y = y - incy\r\n    incy = incy * -1\r\n    y = y + incy\r\n  end\r\n \r\n  draw()\r\nend",
    "type": "statement:localfunction"
  }, {
    "id": 17,
    "text": "if not cd_canvas then return end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 19,
    "text": "x = x + incx",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "y = y + incy",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "local w, h = cd.GetCanvasSize()",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "if ((x + 120) > w) or (x < 0) then\r\n    x = x - incx\r\n    incx = incx * -1\r\n    x = x + incx\r\n  end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "x = x - incx",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "incx = incx * -1",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "if ((y + 120) > h) or (y < 0) then\r\n    y = y - incy\r\n    incy = incy * -1\r\n    y = y + incy\r\n  end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "y = y - incy",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "incy = incy * -1",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "draw()",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "local timer1 = iup.timer{time=10}",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "local canvas = iup.canvas{\r\n  rastersize = \"512x512\",\r\n  expand     = \"YES\",\r\n  action = function(self)\r\n    if cd_canvas == nil then\r\n      cd_canvas = cd.CreateCanvas(cd.IUP, self)\r\n      if cd_canvas == nil then\r\n        print(\"Error creating cdCanvas(IUP)!!!\")\r\n        exit(-1)\r\n      end\r\n\r\n      cd_dbuffer_canvas = cd.CreateCanvas(cd.DBUFFER, cd_canvas)\r\n      if cd_dbuffer_canvas == nil then\r\n        print(\"Error creating cdCanvas(DBUFFER)!!!\")\r\n        exit(-1)\r\n      end\r\n--      IupSetIdle(idle)\r\n    end\r\n    draw()\r\n    \r\n    local w,h = cd.GetCanvasSize()\r\n    local color = cd.EncodeColor(1,2,3)\r\n  end,\r\n}",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "if cd_canvas == nil then\r\n      cd_canvas = cd.CreateCanvas(cd.IUP, self)\r\n      if cd_canvas == nil then\r\n        print(\"Error creating cdCanvas(IUP)!!!\")\r\n        exit(-1)\r\n      end\r\n\r\n      cd_dbuffer_canvas = cd.CreateCanvas(cd.DBUFFER, cd_canvas)\r\n      if cd_dbuffer_canvas == nil then\r\n        print(\"Error creating cdCanvas(DBUFFER)!!!\")\r\n        exit(-1)\r\n      end\r\n--      IupSetIdle(idle)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "cd_canvas = cd.CreateCanvas(cd.IUP, self)",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "if cd_canvas == nil then\r\n        print(\"Error creating cdCanvas(IUP)!!!\")\r\n        exit(-1)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "print(\"Error creating cdCanvas(IUP)!!!\")",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "exit(-1)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "cd_dbuffer_canvas = cd.CreateCanvas(cd.DBUFFER, cd_canvas)",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "if cd_dbuffer_canvas == nil then\r\n        print(\"Error creating cdCanvas(DBUFFER)!!!\")\r\n        exit(-1)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "print(\"Error creating cdCanvas(DBUFFER)!!!\")",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "local w,h = cd.GetCanvasSize()",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "local color = cd.EncodeColor(1,2,3)",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "function timer1:action_cb()\r\n  idle()\r\n  return iup.DEFAULT\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 42,
    "text": "idle()",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "local dialog = iup.dialog{\r\n  iup.vbox{\r\n    canvas,\r\n  }\r\n}",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "function canvas:keypress_cb(c, press)\r\n  draw()\r\n  if press == 1 then\r\n    if c == iup.K_UP then\r\n      local w,h = cd.GetCanvasSize()\r\n      y = y + 10\r\n      if y + 120 > h then y = 380 end\r\n      draw() \r\n    elseif c == iup.K_DOWN then\r\n      y = y - 10\r\n      if y < 0 then y = 0 end\r\n      draw() \r\n    elseif c == iup.K_LEFT then\r\n      x = x - 10\r\n      if x < 0 then x = 0 end\r\n      draw() \r\n    elseif c == iup.K_RIGHT then\r\n      local w,h = cd.GetCanvasSize()\r\n      x = x + 10\r\n      if x + 120 > w then x = 380 end\r\n      draw() \r\n    end\r\n  end\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 45,
    "text": "if press == 1 then\r\n    if c == iup.K_UP then\r\n      local w,h = cd.GetCanvasSize()\r\n      y = y + 10\r\n      if y + 120 > h then y = 380 end\r\n      draw() \r\n    elseif c == iup.K_DOWN then\r\n      y = y - 10\r\n      if y < 0 then y = 0 end\r\n      draw() \r\n    elseif c == iup.K_LEFT then\r\n      x = x - 10\r\n      if x < 0 then x = 0 end\r\n      draw() \r\n    elseif c == iup.K_RIGHT then\r\n      local w,h = cd.GetCanvasSize()\r\n      x = x + 10\r\n      if x + 120 > w then x = 380 end\r\n      draw() \r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "if c == iup.K_UP then\r\n      local w,h = cd.GetCanvasSize()\r\n      y = y + 10\r\n      if y + 120 > h then y = 380 end\r\n      draw() \r\n    elseif c == iup.K_DOWN then\r\n      y = y - 10\r\n      if y < 0 then y = 0 end\r\n      draw() \r\n    elseif c == iup.K_LEFT then\r\n      x = x - 10\r\n      if x < 0 then x = 0 end\r\n      draw() \r\n    elseif c == iup.K_RIGHT then\r\n      local w,h = cd.GetCanvasSize()\r\n      x = x + 10\r\n      if x + 120 > w then x = 380 end\r\n      draw() \r\n    end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "y = y + 10",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "if y + 120 > h then y = 380 end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "y = 380",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "y = y - 10",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "if y < 0 then y = 0 end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "y = 0",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "x = x - 10",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "if x < 0 then x = 0 end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "x = 0",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "x = x + 10",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "if x + 120 > w then x = 380 end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "x = 380",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "function obj:InitialSize()\r\n  return 500,600\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 60,
    "text": "function obj:CreateWindow(hwndParent, x, y, cx, cy)\r\n\r\n  iup.SetAttribute(dialog, \"NATIVEPARENT\", hwndParent)\r\n  iup.SetAttribute(dialog, \"CONTROL\", \"YES\")\r\n  iup.SetAttribute(dialog, \"RASTERSIZE\", cx .. \"x\" .. cy)\r\n\r\n  timer1.run = \"YES\"\r\n\r\n  dialog:map()\r\n\r\n  return iup.GetAttributeData(dialog, \"WID\")\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 61,
    "text": "iup.SetAttribute(dialog, \"NATIVEPARENT\", hwndParent)",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "iup.SetAttribute(dialog, \"CONTROL\", \"YES\")",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "iup.SetAttribute(dialog, \"RASTERSIZE\", cx .. \"x\" .. cy)",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "timer1.run = \"YES\"",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "dialog:map()",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "function obj:SetExtent(cx, cy)\r\n   return true\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 67,
    "text": "function obj:GetClass()\r\n  return \"{687362C8-00D6-4eff-9207-DDB22EE23A6D}\"\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 68,
    "text": "function obj:DestroyWindow()\r\n  timer1.run = \"NO\"\r\n  cd.KillCanvas(cd_dbuffer_canvas)\r\n  cd.KillCanvas(cd_canvas)\r\n  dialog:destroy()\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 69,
    "text": "timer1.run = \"NO\"",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "cd.KillCanvas(cd_dbuffer_canvas)",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "cd.KillCanvas(cd_canvas)",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "dialog:destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "luacom.TableVariants = true",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "function obj:Sum(i1, i2)\r\n  print(\"Calling Sum...\",i1,i2.Type)\r\n  return i1 + i2.Value\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 75,
    "text": "print(\"Calling Sum...\",i1,i2.Type)",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "function obj:I2A(i1)\r\n  print(\"Calling I2A...\",i1)\r\n  return tostring(i1)\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 77,
    "text": "print(\"Calling I2A...\",i1)",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "function obj:IntDivide(i1, i2)\r\n  print(\"Calling IntDivide...\",i1,i2)\r\n  div = {}\r\n  div.Type = \"decimal\"\r\n  div.Value = i1/i2\r\n  return div,math.mod(i1, i2)\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 79,
    "text": "print(\"Calling IntDivide...\",i1,i2)",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "div = {}",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "div.Type = \"decimal\"",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "div.Value = i1/i2",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "local function draw()\r\n    cd.Activate(cd_dbuffer_canvas)\r\n    cd.Background(cd.BLACK)\r\n    cd.Clear()\r\n\r\n    cd.Foreground(cd.EncodeColor(255,255,0))\r\n    cd.Box(x,x+120,y,y+120)\r\n    cd.Flush()\r\nend",
    "type": "function"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "local function idle()\r\n  if not cd_canvas then return end\r\n  \r\n  x = x + incx\r\n  y = y + incy\r\n\r\n  local w, h = cd.GetCanvasSize()\r\n  \r\n  if ((x + 120) > w) or (x < 0) then\r\n    x = x - incx\r\n    incx = incx * -1\r\n    x = x + incx\r\n  end\r\n\r\n  if ((y + 120) > h) or (y < 0) then\r\n    y = y - incy\r\n    incy = incy * -1\r\n    y = y + incy\r\n  end\r\n \r\n  draw()\r\nend",
    "type": "function"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "function timer1:action_cb()\r\n  idle()\r\n  return iup.DEFAULT\r\nend",
    "type": "function"
  }, {
    "id": 89,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 90,
    "text": "function canvas:keypress_cb(c, press)\r\n  draw()\r\n  if press == 1 then\r\n    if c == iup.K_UP then\r\n      local w,h = cd.GetCanvasSize()\r\n      y = y + 10\r\n      if y + 120 > h then y = 380 end\r\n      draw() \r\n    elseif c == iup.K_DOWN then\r\n      y = y - 10\r\n      if y < 0 then y = 0 end\r\n      draw() \r\n    elseif c == iup.K_LEFT then\r\n      x = x - 10\r\n      if x < 0 then x = 0 end\r\n      draw() \r\n    elseif c == iup.K_RIGHT then\r\n      local w,h = cd.GetCanvasSize()\r\n      x = x + 10\r\n      if x + 120 > w then x = 380 end\r\n      draw() \r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "function obj:InitialSize()\r\n  return 500,600\r\nend",
    "type": "function"
  }, {
    "id": 93,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 94,
    "text": "function obj:CreateWindow(hwndParent, x, y, cx, cy)\r\n\r\n  iup.SetAttribute(dialog, \"NATIVEPARENT\", hwndParent)\r\n  iup.SetAttribute(dialog, \"CONTROL\", \"YES\")\r\n  iup.SetAttribute(dialog, \"RASTERSIZE\", cx .. \"x\" .. cy)\r\n\r\n  timer1.run = \"YES\"\r\n\r\n  dialog:map()\r\n\r\n  return iup.GetAttributeData(dialog, \"WID\")\r\nend",
    "type": "function"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "function obj:SetExtent(cx, cy)\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 97,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 98,
    "text": "function obj:GetClass()\r\n  return \"{687362C8-00D6-4eff-9207-DDB22EE23A6D}\"\r\nend",
    "type": "function"
  }, {
    "id": 99,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 100,
    "text": "function obj:DestroyWindow()\r\n  timer1.run = \"NO\"\r\n  cd.KillCanvas(cd_dbuffer_canvas)\r\n  cd.KillCanvas(cd_canvas)\r\n  dialog:destroy()\r\nend",
    "type": "function"
  }, {
    "id": 101,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 102,
    "text": "function obj:Sum(i1, i2)\r\n  print(\"Calling Sum...\",i1,i2.Type)\r\n  return i1 + i2.Value\r\nend",
    "type": "function"
  }, {
    "id": 103,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 104,
    "text": "function obj:I2A(i1)\r\n  print(\"Calling I2A...\",i1)\r\n  return tostring(i1)\r\nend",
    "type": "function"
  }, {
    "id": 105,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 106,
    "text": "function obj:IntDivide(i1, i2)\r\n  print(\"Calling IntDivide...\",i1,i2)\r\n  div = {}\r\n  div.Type = \"decimal\"\r\n  div.Value = i1/i2\r\n  return div,math.mod(i1, i2)\r\nend",
    "type": "function"
  }, {
    "id": 107,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 108,
    "text": "function COM:StartAutomation()\r\n  print(\"Starting server...\")\r\n  -- creates the object using its default interface\r\n  COMAppObject, events, e = luacom.NewControl(make_control(), \"testlua.Teste\")\r\n  -- This error will be caught by detectAutomation\r\n  if COMAppObject == nil then\r\n    error(\"NewObject failed: \"..e)\r\n  end\r\n  -- Exposes the object\r\n  cookie = luacom.ExposeObject(COMAppObject)\r\n  if cookie == nil then\r\n    error(\"ExposeObject failed!\")\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 109,
    "text": "print(\"Starting server...\")",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "COMAppObject, events, e = luacom.NewControl(make_control(), \"testlua.Teste\")",
    "type": "statement:assign"
  }, {
    "id": 111,
    "text": "if COMAppObject == nil then\r\n    error(\"NewObject failed: \"..e)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 112,
    "text": "error(\"NewObject failed: \"..e)",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "cookie = luacom.ExposeObject(COMAppObject)",
    "type": "statement:assign"
  }, {
    "id": 114,
    "text": "if cookie == nil then\r\n    error(\"ExposeObject failed!\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 115,
    "text": "error(\"ExposeObject failed!\")",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 117,
    "text": "function COM:Register()\r\n  -- fills table with registration information\r\n  local reginfo = {}\r\n  reginfo.VersionIndependentProgID = \"testcontrol.Teste\"\r\n  reginfo.ProgID = reginfo.VersionIndependentProgID..\".1\"\r\n  reginfo.TypeLib = \"testcontrol.tlb\"\r\n  reginfo.CoClass = \"Teste\"\r\n  reginfo.ComponentName = \"Test Control\"\r\n  reginfo.Arguments = \"/Automation\"\r\n  reginfo.ScriptFile = \"control.lua\"\r\n  reginfo.Control = true\r\n  -- stores component information in the registry\r\n  local res = luacom.RegisterObject(reginfo)\r\n  if res == nil then\r\n    error(\"RegisterObject failed!\")\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 118,
    "text": "local reginfo = {}",
    "type": "statement:localassign"
  }, {
    "id": 119,
    "text": "reginfo.VersionIndependentProgID = \"testcontrol.Teste\"",
    "type": "statement:assign"
  }, {
    "id": 120,
    "text": "reginfo.ProgID = reginfo.VersionIndependentProgID..\".1\"",
    "type": "statement:assign"
  }, {
    "id": 121,
    "text": "reginfo.TypeLib = \"testcontrol.tlb\"",
    "type": "statement:assign"
  }, {
    "id": 122,
    "text": "reginfo.CoClass = \"Teste\"",
    "type": "statement:assign"
  }, {
    "id": 123,
    "text": "reginfo.ComponentName = \"Test Control\"",
    "type": "statement:assign"
  }, {
    "id": 124,
    "text": "reginfo.Arguments = \"/Automation\"",
    "type": "statement:assign"
  }, {
    "id": 125,
    "text": "reginfo.ScriptFile = \"control.lua\"",
    "type": "statement:assign"
  }, {
    "id": 126,
    "text": "reginfo.Control = true",
    "type": "statement:assign"
  }, {
    "id": 127,
    "text": "local res = luacom.RegisterObject(reginfo)",
    "type": "statement:localassign"
  }, {
    "id": 128,
    "text": "if res == nil then\r\n    error(\"RegisterObject failed!\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 129,
    "text": "error(\"RegisterObject failed!\")",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 131,
    "text": "function COM:UnRegister()\r\n  -- fills table with registration information\r\n  local reginfo = {}\r\n  reginfo.VersionIndependentProgID = \"testcontrol.Teste\"\r\n  reginfo.ProgID = reginfo.VersionIndependentProgID..\".1\"\r\n  reginfo.TypeLib = \"testcontrol.tlb\"\r\n  reginfo.CoClass = \"Teste\"\r\n  -- deletes component information from the registry\r\n  local res = luacom.UnRegisterObject(reginfo)\r\n  if res == nil then\r\n    error(\"UnRegisterObject failed!\")\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 132,
    "text": "local res = luacom.UnRegisterObject(reginfo)",
    "type": "statement:localassign"
  }, {
    "id": 133,
    "text": "if res == nil then\r\n    error(\"UnRegisterObject failed!\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 134,
    "text": "error(\"UnRegisterObject failed!\")",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 136,
    "text": "function(self)\r\n    if cd_canvas == nil then\r\n      cd_canvas = cd.CreateCanvas(cd.IUP, self)\r\n      if cd_canvas == nil then\r\n        print(\"Error creating cdCanvas(IUP)!!!\")\r\n        exit(-1)\r\n      end\r\n\r\n      cd_dbuffer_canvas = cd.CreateCanvas(cd.DBUFFER, cd_canvas)\r\n      if cd_dbuffer_canvas == nil then\r\n        print(\"Error creating cdCanvas(DBUFFER)!!!\")\r\n        exit(-1)\r\n      end\r\n--      IupSetIdle(idle)\r\n    end\r\n    draw()\r\n    \r\n    local w,h = cd.GetCanvasSize()\r\n    local color = cd.EncodeColor(1,2,3)\r\n  end",
    "type": "function"
  }, {
    "id": 137,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 138,
    "text": "",
    "type": "function container"
  }, {
    "id": 139,
    "text": "NewControl",
    "type": "global function"
  }, {
    "id": 140,
    "text": "RegisterObject",
    "type": "global function"
  }, {
    "id": 141,
    "text": "DetectAutomation",
    "type": "global function"
  }, {
    "id": 142,
    "text": "ExposeObject",
    "type": "global function"
  }, {
    "id": 143,
    "text": "UnRegisterObject",
    "type": "global function"
  }, {
    "id": 144,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 145,
    "text": "EncodeColor",
    "type": "global function"
  }, {
    "id": 146,
    "text": "Foreground",
    "type": "global function"
  }, {
    "id": 147,
    "text": "Activate",
    "type": "global function"
  }, {
    "id": 148,
    "text": "print",
    "type": "global function"
  }, {
    "id": 149,
    "text": "dialog",
    "type": "global function"
  }, {
    "id": 150,
    "text": "Box",
    "type": "global function"
  }, {
    "id": 151,
    "text": "SetAttribute",
    "type": "global function"
  }, {
    "id": 152,
    "text": "canvas",
    "type": "global function"
  }, {
    "id": 153,
    "text": "KillCanvas",
    "type": "global function"
  }, {
    "id": 154,
    "text": "CreateCanvas",
    "type": "global function"
  }, {
    "id": 155,
    "text": "Clear",
    "type": "global function"
  }, {
    "id": 156,
    "text": "vbox",
    "type": "global function"
  }, {
    "id": 157,
    "text": "timer",
    "type": "global function"
  }, {
    "id": 158,
    "text": "GetCanvasSize",
    "type": "global function"
  }, {
    "id": 159,
    "text": "error",
    "type": "global function"
  }, {
    "id": 160,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 161,
    "text": "GetAttributeData",
    "type": "global function"
  }, {
    "id": 162,
    "text": "mod",
    "type": "global function"
  }, {
    "id": 163,
    "text": "Background",
    "type": "global function"
  }, {
    "id": 164,
    "text": "Flush",
    "type": "global function"
  }, {
    "id": 165,
    "text": "require",
    "type": "global function"
  }, {
    "id": 166,
    "text": "",
    "type": "global variable"
  }, {
    "id": 167,
    "text": "",
    "type": "variable container"
  }, {
    "id": 168,
    "text": "",
    "type": "require container"
  }, {
    "id": 169,
    "text": "",
    "type": "local variable"
  }, {
    "id": 170,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 171,
    "text": "",
    "type": "local variable"
  }, {
    "id": 172,
    "text": "",
    "type": "local variable"
  }, {
    "id": 173,
    "text": "",
    "type": "local variable"
  }, {
    "id": 174,
    "text": "",
    "type": "local variable"
  }, {
    "id": 175,
    "text": "",
    "type": "interface container"
  }, {
    "id": 176,
    "text": "",
    "type": "interface"
  } ]
}