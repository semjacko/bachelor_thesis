{
  "_filename": "luacom_tests5.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/luacom/src/test/luacom_tests5.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 11,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 11,
    "label": "has",
    "to": 6
  }, {
    "from": 11,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 6
  }, {
    "from": 20,
    "label": "has",
    "to": 6
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 23,
    "label": "has",
    "to": 27
  }, {
    "from": 23,
    "label": "has",
    "to": 28
  }, {
    "from": 23,
    "label": "has",
    "to": 29
  }, {
    "from": 23,
    "label": "has",
    "to": 30
  }, {
    "from": 23,
    "label": "has",
    "to": 31
  }, {
    "from": 23,
    "label": "has",
    "to": 32
  }, {
    "from": 23,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 33,
    "label": "has",
    "to": 37
  }, {
    "from": 33,
    "label": "has",
    "to": 38
  }, {
    "from": 33,
    "label": "has",
    "to": 39
  }, {
    "from": 33,
    "label": "has",
    "to": 40
  }, {
    "from": 33,
    "label": "has",
    "to": 41
  }, {
    "from": 33,
    "label": "has",
    "to": 42
  }, {
    "from": 23,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 6
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 6
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 48,
    "label": "has",
    "to": 6
  }, {
    "from": 48,
    "label": "has",
    "to": 6
  }, {
    "from": 48,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 54,
    "label": "has",
    "to": 6
  }, {
    "from": 54,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 59,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 6
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 63,
    "label": "has",
    "to": 66
  }, {
    "from": 63,
    "label": "has",
    "to": 67
  }, {
    "from": 63,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 68,
    "label": "has",
    "to": 72
  }, {
    "from": 63,
    "label": "has",
    "to": 73
  }, {
    "from": 63,
    "label": "has",
    "to": 6
  }, {
    "from": 63,
    "label": "has",
    "to": 74
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 75,
    "label": "has",
    "to": 80
  }, {
    "from": 75,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 82,
    "label": "has",
    "to": 85
  }, {
    "from": 82,
    "label": "has",
    "to": 86
  }, {
    "from": 82,
    "label": "has",
    "to": 87
  }, {
    "from": 82,
    "label": "has",
    "to": 88
  }, {
    "from": 82,
    "label": "has",
    "to": 86
  }, {
    "from": 82,
    "label": "has",
    "to": 87
  }, {
    "from": 82,
    "label": "has",
    "to": 89
  }, {
    "from": 82,
    "label": "has",
    "to": 86
  }, {
    "from": 82,
    "label": "has",
    "to": 87
  }, {
    "from": 82,
    "label": "has",
    "to": 90
  }, {
    "from": 82,
    "label": "has",
    "to": 91
  }, {
    "from": 82,
    "label": "has",
    "to": 87
  }, {
    "from": 82,
    "label": "has",
    "to": 92
  }, {
    "from": 82,
    "label": "has",
    "to": 91
  }, {
    "from": 82,
    "label": "has",
    "to": 87
  }, {
    "from": 82,
    "label": "has",
    "to": 93
  }, {
    "from": 82,
    "label": "has",
    "to": 91
  }, {
    "from": 82,
    "label": "has",
    "to": 87
  }, {
    "from": 82,
    "label": "has",
    "to": 94
  }, {
    "from": 82,
    "label": "has",
    "to": 91
  }, {
    "from": 82,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 84
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 96,
    "label": "has",
    "to": 87
  }, {
    "from": 96,
    "label": "has",
    "to": 99
  }, {
    "from": 96,
    "label": "has",
    "to": 87
  }, {
    "from": 96,
    "label": "has",
    "to": 100
  }, {
    "from": 96,
    "label": "has",
    "to": 101
  }, {
    "from": 96,
    "label": "has",
    "to": 87
  }, {
    "from": 96,
    "label": "has",
    "to": 102
  }, {
    "from": 96,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 96,
    "label": "has",
    "to": 105
  }, {
    "from": 96,
    "label": "has",
    "to": 106
  }, {
    "from": 96,
    "label": "has",
    "to": 107
  }, {
    "from": 96,
    "label": "has",
    "to": 108
  }, {
    "from": 109,
    "label": "has",
    "to": 104
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 84
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 111,
    "label": "has",
    "to": 114
  }, {
    "from": 111,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 111,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 117,
    "label": "has",
    "to": 119
  }, {
    "from": 117,
    "label": "has",
    "to": 120
  }, {
    "from": 117,
    "label": "has",
    "to": 121
  }, {
    "from": 117,
    "label": "has",
    "to": 122
  }, {
    "from": 117,
    "label": "has",
    "to": 123
  }, {
    "from": 117,
    "label": "has",
    "to": 124
  }, {
    "from": 117,
    "label": "has",
    "to": 125
  }, {
    "from": 117,
    "label": "has",
    "to": 126
  }, {
    "from": 117,
    "label": "has",
    "to": 127
  }, {
    "from": 117,
    "label": "has",
    "to": 128
  }, {
    "from": 117,
    "label": "has",
    "to": 129
  }, {
    "from": 117,
    "label": "has",
    "to": 130
  }, {
    "from": 117,
    "label": "has",
    "to": 131
  }, {
    "from": 117,
    "label": "has",
    "to": 132
  }, {
    "from": 111,
    "label": "has",
    "to": 133
  }, {
    "from": 111,
    "label": "has",
    "to": 106
  }, {
    "from": 111,
    "label": "has",
    "to": 87
  }, {
    "from": 111,
    "label": "has",
    "to": 134
  }, {
    "from": 111,
    "label": "has",
    "to": 135
  }, {
    "from": 111,
    "label": "has",
    "to": 87
  }, {
    "from": 111,
    "label": "has",
    "to": 136
  }, {
    "from": 111,
    "label": "has",
    "to": 137
  }, {
    "from": 111,
    "label": "has",
    "to": 138
  }, {
    "from": 111,
    "label": "has",
    "to": 139
  }, {
    "from": 140,
    "label": "has",
    "to": 116
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 142,
    "label": "has",
    "to": 118
  }, {
    "from": 142,
    "label": "has",
    "to": 119
  }, {
    "from": 142,
    "label": "has",
    "to": 120
  }, {
    "from": 142,
    "label": "has",
    "to": 121
  }, {
    "from": 142,
    "label": "has",
    "to": 122
  }, {
    "from": 142,
    "label": "has",
    "to": 123
  }, {
    "from": 142,
    "label": "has",
    "to": 124
  }, {
    "from": 142,
    "label": "has",
    "to": 125
  }, {
    "from": 142,
    "label": "has",
    "to": 126
  }, {
    "from": 142,
    "label": "has",
    "to": 127
  }, {
    "from": 142,
    "label": "has",
    "to": 128
  }, {
    "from": 142,
    "label": "has",
    "to": 129
  }, {
    "from": 142,
    "label": "has",
    "to": 130
  }, {
    "from": 142,
    "label": "has",
    "to": 131
  }, {
    "from": 142,
    "label": "has",
    "to": 132
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 144,
    "label": "has",
    "to": 84
  }, {
    "from": 144,
    "label": "has",
    "to": 114
  }, {
    "from": 144,
    "label": "has",
    "to": 146
  }, {
    "from": 144,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 116
  }, {
    "from": 144,
    "label": "has",
    "to": 148
  }, {
    "from": 144,
    "label": "has",
    "to": 106
  }, {
    "from": 144,
    "label": "has",
    "to": 149
  }, {
    "from": 144,
    "label": "has",
    "to": 150
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 144,
    "label": "has",
    "to": 87
  }, {
    "from": 144,
    "label": "has",
    "to": 152
  }, {
    "from": 144,
    "label": "has",
    "to": 137
  }, {
    "from": 144,
    "label": "has",
    "to": 138
  }, {
    "from": 144,
    "label": "has",
    "to": 153
  }, {
    "from": 154,
    "label": "has",
    "to": 116
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 156,
    "label": "has",
    "to": 158
  }, {
    "from": 158,
    "label": "has",
    "to": 159
  }, {
    "from": 158,
    "label": "has",
    "to": 160
  }, {
    "from": 156,
    "label": "has",
    "to": 6
  }, {
    "from": 156,
    "label": "has",
    "to": 84
  }, {
    "from": 156,
    "label": "has",
    "to": 87
  }, {
    "from": 156,
    "label": "has",
    "to": 161
  }, {
    "from": 156,
    "label": "has",
    "to": 162
  }, {
    "from": 156,
    "label": "has",
    "to": 163
  }, {
    "from": 163,
    "label": "has",
    "to": 164
  }, {
    "from": 156,
    "label": "has",
    "to": 165
  }, {
    "from": 156,
    "label": "has",
    "to": 166
  }, {
    "from": 156,
    "label": "has",
    "to": 87
  }, {
    "from": 156,
    "label": "has",
    "to": 167
  }, {
    "from": 156,
    "label": "has",
    "to": 87
  }, {
    "from": 156,
    "label": "has",
    "to": 168
  }, {
    "from": 156,
    "label": "has",
    "to": 169
  }, {
    "from": 156,
    "label": "has",
    "to": 87
  }, {
    "from": 156,
    "label": "has",
    "to": 170
  }, {
    "from": 156,
    "label": "has",
    "to": 171
  }, {
    "from": 156,
    "label": "has",
    "to": 87
  }, {
    "from": 156,
    "label": "has",
    "to": 172
  }, {
    "from": 156,
    "label": "has",
    "to": 87
  }, {
    "from": 156,
    "label": "has",
    "to": 173
  }, {
    "from": 156,
    "label": "has",
    "to": 169
  }, {
    "from": 156,
    "label": "has",
    "to": 87
  }, {
    "from": 156,
    "label": "has",
    "to": 170
  }, {
    "from": 156,
    "label": "has",
    "to": 174
  }, {
    "from": 156,
    "label": "has",
    "to": 138
  }, {
    "from": 156,
    "label": "has",
    "to": 175
  }, {
    "from": 176,
    "label": "has",
    "to": 164
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 178,
    "label": "has",
    "to": 84
  }, {
    "from": 178,
    "label": "has",
    "to": 114
  }, {
    "from": 178,
    "label": "has",
    "to": 180
  }, {
    "from": 178,
    "label": "has",
    "to": 181
  }, {
    "from": 178,
    "label": "has",
    "to": 182
  }, {
    "from": 182,
    "label": "has",
    "to": 166
  }, {
    "from": 182,
    "label": "has",
    "to": 183
  }, {
    "from": 182,
    "label": "has",
    "to": 184
  }, {
    "from": 178,
    "label": "has",
    "to": 185
  }, {
    "from": 186,
    "label": "has",
    "to": 187
  }, {
    "from": 186,
    "label": "has",
    "to": 84
  }, {
    "from": 186,
    "label": "has",
    "to": 188
  }, {
    "from": 186,
    "label": "has",
    "to": 189
  }, {
    "from": 186,
    "label": "has",
    "to": 190
  }, {
    "from": 186,
    "label": "has",
    "to": 87
  }, {
    "from": 186,
    "label": "has",
    "to": 191
  }, {
    "from": 186,
    "label": "has",
    "to": 192
  }, {
    "from": 186,
    "label": "has",
    "to": 87
  }, {
    "from": 186,
    "label": "has",
    "to": 193
  }, {
    "from": 186,
    "label": "has",
    "to": 194
  }, {
    "from": 186,
    "label": "has",
    "to": 195
  }, {
    "from": 196,
    "label": "has",
    "to": 197
  }, {
    "from": 196,
    "label": "has",
    "to": 84
  }, {
    "from": 196,
    "label": "has",
    "to": 198
  }, {
    "from": 196,
    "label": "has",
    "to": 199
  }, {
    "from": 196,
    "label": "has",
    "to": 87
  }, {
    "from": 196,
    "label": "has",
    "to": 200
  }, {
    "from": 196,
    "label": "has",
    "to": 86
  }, {
    "from": 196,
    "label": "has",
    "to": 87
  }, {
    "from": 196,
    "label": "has",
    "to": 201
  }, {
    "from": 196,
    "label": "has",
    "to": 86
  }, {
    "from": 196,
    "label": "has",
    "to": 87
  }, {
    "from": 196,
    "label": "has",
    "to": 202
  }, {
    "from": 196,
    "label": "has",
    "to": 86
  }, {
    "from": 196,
    "label": "has",
    "to": 87
  }, {
    "from": 196,
    "label": "has",
    "to": 203
  }, {
    "from": 196,
    "label": "has",
    "to": 204
  }, {
    "from": 196,
    "label": "has",
    "to": 87
  }, {
    "from": 196,
    "label": "has",
    "to": 205
  }, {
    "from": 196,
    "label": "has",
    "to": 206
  }, {
    "from": 196,
    "label": "has",
    "to": 87
  }, {
    "from": 196,
    "label": "has",
    "to": 207
  }, {
    "from": 196,
    "label": "has",
    "to": 208
  }, {
    "from": 196,
    "label": "has",
    "to": 209
  }, {
    "from": 210,
    "label": "has",
    "to": 211
  }, {
    "from": 210,
    "label": "has",
    "to": 84
  }, {
    "from": 210,
    "label": "has",
    "to": 212
  }, {
    "from": 210,
    "label": "has",
    "to": 87
  }, {
    "from": 210,
    "label": "has",
    "to": 213
  }, {
    "from": 210,
    "label": "has",
    "to": 87
  }, {
    "from": 210,
    "label": "has",
    "to": 214
  }, {
    "from": 210,
    "label": "has",
    "to": 87
  }, {
    "from": 210,
    "label": "has",
    "to": 215
  }, {
    "from": 210,
    "label": "has",
    "to": 32
  }, {
    "from": 210,
    "label": "has",
    "to": 87
  }, {
    "from": 210,
    "label": "has",
    "to": 216
  }, {
    "from": 210,
    "label": "has",
    "to": 86
  }, {
    "from": 210,
    "label": "has",
    "to": 217
  }, {
    "from": 218,
    "label": "has",
    "to": 84
  }, {
    "from": 218,
    "label": "has",
    "to": 219
  }, {
    "from": 218,
    "label": "has",
    "to": 220
  }, {
    "from": 218,
    "label": "has",
    "to": 106
  }, {
    "from": 218,
    "label": "has",
    "to": 221
  }, {
    "from": 218,
    "label": "has",
    "to": 222
  }, {
    "from": 222,
    "label": "has",
    "to": 6
  }, {
    "from": 218,
    "label": "has",
    "to": 223
  }, {
    "from": 218,
    "label": "has",
    "to": 224
  }, {
    "from": 218,
    "label": "has",
    "to": 225
  }, {
    "from": 225,
    "label": "has",
    "to": 226
  }, {
    "from": 225,
    "label": "has",
    "to": 6
  }, {
    "from": 218,
    "label": "has",
    "to": 227
  }, {
    "from": 218,
    "label": "has",
    "to": 228
  }, {
    "from": 218,
    "label": "has",
    "to": 229
  }, {
    "from": 218,
    "label": "has",
    "to": 230
  }, {
    "from": 230,
    "label": "has",
    "to": 231
  }, {
    "from": 230,
    "label": "has",
    "to": 6
  }, {
    "from": 218,
    "label": "has",
    "to": 232
  }, {
    "from": 218,
    "label": "has",
    "to": 233
  }, {
    "from": 218,
    "label": "has",
    "to": 234
  }, {
    "from": 218,
    "label": "has",
    "to": 235
  }, {
    "from": 218,
    "label": "has",
    "to": 236
  }, {
    "from": 237,
    "label": "has",
    "to": 6
  }, {
    "from": 237,
    "label": "has",
    "to": 238
  }, {
    "from": 239,
    "label": "has",
    "to": 226
  }, {
    "from": 239,
    "label": "has",
    "to": 6
  }, {
    "from": 239,
    "label": "has",
    "to": 240
  }, {
    "from": 241,
    "label": "has",
    "to": 231
  }, {
    "from": 241,
    "label": "has",
    "to": 6
  }, {
    "from": 241,
    "label": "has",
    "to": 242
  }, {
    "from": 243,
    "label": "has",
    "to": 244
  }, {
    "from": 243,
    "label": "has",
    "to": 245
  }, {
    "from": 246,
    "label": "has",
    "to": 247
  }, {
    "from": 246,
    "label": "has",
    "to": 248
  }, {
    "from": 249,
    "label": "has",
    "to": 250
  }, {
    "from": 249,
    "label": "has",
    "to": 251
  }, {
    "from": 252,
    "label": "has",
    "to": 253
  }, {
    "from": 252,
    "label": "has",
    "to": 219
  }, {
    "from": 252,
    "label": "has",
    "to": 84
  }, {
    "from": 252,
    "label": "has",
    "to": 254
  }, {
    "from": 252,
    "label": "has",
    "to": 106
  }, {
    "from": 252,
    "label": "has",
    "to": 255
  }, {
    "from": 252,
    "label": "has",
    "to": 256
  }, {
    "from": 256,
    "label": "has",
    "to": 257
  }, {
    "from": 257,
    "label": "has",
    "to": 258
  }, {
    "from": 256,
    "label": "has",
    "to": 259
  }, {
    "from": 259,
    "label": "has",
    "to": 260
  }, {
    "from": 260,
    "label": "has",
    "to": 261
  }, {
    "from": 259,
    "label": "has",
    "to": 262
  }, {
    "from": 262,
    "label": "has",
    "to": 263
  }, {
    "from": 252,
    "label": "has",
    "to": 264
  }, {
    "from": 264,
    "label": "has",
    "to": 265
  }, {
    "from": 252,
    "label": "has",
    "to": 266
  }, {
    "from": 266,
    "label": "has",
    "to": 267
  }, {
    "from": 252,
    "label": "has",
    "to": 87
  }, {
    "from": 252,
    "label": "has",
    "to": 268
  }, {
    "from": 268,
    "label": "has",
    "to": 269
  }, {
    "from": 268,
    "label": "has",
    "to": 6
  }, {
    "from": 252,
    "label": "has",
    "to": 270
  }, {
    "from": 270,
    "label": "has",
    "to": 6
  }, {
    "from": 252,
    "label": "has",
    "to": 271
  }, {
    "from": 252,
    "label": "has",
    "to": 272
  }, {
    "from": 252,
    "label": "has",
    "to": 273
  }, {
    "from": 252,
    "label": "has",
    "to": 272
  }, {
    "from": 252,
    "label": "has",
    "to": 274
  }, {
    "from": 252,
    "label": "has",
    "to": 86
  }, {
    "from": 252,
    "label": "has",
    "to": 275
  }, {
    "from": 252,
    "label": "has",
    "to": 276
  }, {
    "from": 252,
    "label": "has",
    "to": 277
  }, {
    "from": 252,
    "label": "has",
    "to": 278
  }, {
    "from": 252,
    "label": "has",
    "to": 279
  }, {
    "from": 252,
    "label": "has",
    "to": 86
  }, {
    "from": 252,
    "label": "has",
    "to": 280
  }, {
    "from": 252,
    "label": "has",
    "to": 86
  }, {
    "from": 252,
    "label": "has",
    "to": 281
  }, {
    "from": 252,
    "label": "has",
    "to": 86
  }, {
    "from": 252,
    "label": "has",
    "to": 282
  }, {
    "from": 252,
    "label": "has",
    "to": 283
  }, {
    "from": 252,
    "label": "has",
    "to": 32
  }, {
    "from": 252,
    "label": "has",
    "to": 87
  }, {
    "from": 252,
    "label": "has",
    "to": 284
  }, {
    "from": 252,
    "label": "has",
    "to": 255
  }, {
    "from": 252,
    "label": "has",
    "to": 285
  }, {
    "from": 285,
    "label": "has",
    "to": 286
  }, {
    "from": 252,
    "label": "has",
    "to": 287
  }, {
    "from": 252,
    "label": "has",
    "to": 288
  }, {
    "from": 288,
    "label": "has",
    "to": 289
  }, {
    "from": 252,
    "label": "has",
    "to": 290
  }, {
    "from": 252,
    "label": "has",
    "to": 291
  }, {
    "from": 252,
    "label": "has",
    "to": 292
  }, {
    "from": 252,
    "label": "has",
    "to": 87
  }, {
    "from": 252,
    "label": "has",
    "to": 293
  }, {
    "from": 293,
    "label": "has",
    "to": 294
  }, {
    "from": 294,
    "label": "has",
    "to": 295
  }, {
    "from": 252,
    "label": "has",
    "to": 254
  }, {
    "from": 252,
    "label": "has",
    "to": 106
  }, {
    "from": 252,
    "label": "has",
    "to": 255
  }, {
    "from": 252,
    "label": "has",
    "to": 296
  }, {
    "from": 252,
    "label": "has",
    "to": 297
  }, {
    "from": 297,
    "label": "has",
    "to": 298
  }, {
    "from": 252,
    "label": "has",
    "to": 299
  }, {
    "from": 252,
    "label": "has",
    "to": 300
  }, {
    "from": 252,
    "label": "has",
    "to": 301
  }, {
    "from": 301,
    "label": "has",
    "to": 302
  }, {
    "from": 301,
    "label": "has",
    "to": 303
  }, {
    "from": 301,
    "label": "has",
    "to": 304
  }, {
    "from": 301,
    "label": "has",
    "to": 305
  }, {
    "from": 301,
    "label": "has",
    "to": 306
  }, {
    "from": 301,
    "label": "has",
    "to": 307
  }, {
    "from": 301,
    "label": "has",
    "to": 308
  }, {
    "from": 301,
    "label": "has",
    "to": 309
  }, {
    "from": 301,
    "label": "has",
    "to": 310
  }, {
    "from": 301,
    "label": "has",
    "to": 311
  }, {
    "from": 301,
    "label": "has",
    "to": 312
  }, {
    "from": 301,
    "label": "has",
    "to": 313
  }, {
    "from": 252,
    "label": "has",
    "to": 138
  }, {
    "from": 252,
    "label": "has",
    "to": 314
  }, {
    "from": 315,
    "label": "has",
    "to": 265
  }, {
    "from": 315,
    "label": "has",
    "to": 316
  }, {
    "from": 317,
    "label": "has",
    "to": 269
  }, {
    "from": 317,
    "label": "has",
    "to": 6
  }, {
    "from": 317,
    "label": "has",
    "to": 318
  }, {
    "from": 319,
    "label": "has",
    "to": 6
  }, {
    "from": 319,
    "label": "has",
    "to": 320
  }, {
    "from": 321,
    "label": "has",
    "to": 294
  }, {
    "from": 294,
    "label": "has",
    "to": 295
  }, {
    "from": 321,
    "label": "has",
    "to": 322
  }, {
    "from": 323,
    "label": "has",
    "to": 324
  }, {
    "from": 323,
    "label": "has",
    "to": 84
  }, {
    "from": 323,
    "label": "has",
    "to": 325
  }, {
    "from": 325,
    "label": "has",
    "to": 326
  }, {
    "from": 325,
    "label": "has",
    "to": 6
  }, {
    "from": 323,
    "label": "has",
    "to": 327
  }, {
    "from": 327,
    "label": "has",
    "to": 328
  }, {
    "from": 323,
    "label": "has",
    "to": 329
  }, {
    "from": 323,
    "label": "has",
    "to": 330
  }, {
    "from": 323,
    "label": "has",
    "to": 331
  }, {
    "from": 323,
    "label": "has",
    "to": 332
  }, {
    "from": 323,
    "label": "has",
    "to": 333
  }, {
    "from": 323,
    "label": "has",
    "to": 334
  }, {
    "from": 323,
    "label": "has",
    "to": 106
  }, {
    "from": 323,
    "label": "has",
    "to": 335
  }, {
    "from": 323,
    "label": "has",
    "to": 336
  }, {
    "from": 323,
    "label": "has",
    "to": 337
  }, {
    "from": 338,
    "label": "has",
    "to": 326
  }, {
    "from": 338,
    "label": "has",
    "to": 6
  }, {
    "from": 338,
    "label": "has",
    "to": 339
  }, {
    "from": 340,
    "label": "has",
    "to": 328
  }, {
    "from": 340,
    "label": "has",
    "to": 341
  }, {
    "from": 342,
    "label": "has",
    "to": 343
  }, {
    "from": 342,
    "label": "has",
    "to": 219
  }, {
    "from": 342,
    "label": "has",
    "to": 344
  }, {
    "from": 344,
    "label": "has",
    "to": 6
  }, {
    "from": 342,
    "label": "has",
    "to": 345
  }, {
    "from": 342,
    "label": "has",
    "to": 106
  }, {
    "from": 342,
    "label": "has",
    "to": 84
  }, {
    "from": 342,
    "label": "has",
    "to": 346
  }, {
    "from": 342,
    "label": "has",
    "to": 347
  }, {
    "from": 342,
    "label": "has",
    "to": 348
  }, {
    "from": 342,
    "label": "has",
    "to": 349
  }, {
    "from": 342,
    "label": "has",
    "to": 350
  }, {
    "from": 342,
    "label": "has",
    "to": 351
  }, {
    "from": 342,
    "label": "has",
    "to": 352
  }, {
    "from": 342,
    "label": "has",
    "to": 353
  }, {
    "from": 342,
    "label": "has",
    "to": 86
  }, {
    "from": 342,
    "label": "has",
    "to": 354
  }, {
    "from": 342,
    "label": "has",
    "to": 353
  }, {
    "from": 342,
    "label": "has",
    "to": 86
  }, {
    "from": 342,
    "label": "has",
    "to": 355
  }, {
    "from": 342,
    "label": "has",
    "to": 356
  }, {
    "from": 342,
    "label": "has",
    "to": 357
  }, {
    "from": 342,
    "label": "has",
    "to": 358
  }, {
    "from": 342,
    "label": "has",
    "to": 359
  }, {
    "from": 342,
    "label": "has",
    "to": 16
  }, {
    "from": 342,
    "label": "has",
    "to": 360
  }, {
    "from": 342,
    "label": "has",
    "to": 361
  }, {
    "from": 342,
    "label": "has",
    "to": 362
  }, {
    "from": 342,
    "label": "has",
    "to": 363
  }, {
    "from": 342,
    "label": "has",
    "to": 364
  }, {
    "from": 342,
    "label": "has",
    "to": 86
  }, {
    "from": 342,
    "label": "has",
    "to": 365
  }, {
    "from": 342,
    "label": "has",
    "to": 364
  }, {
    "from": 342,
    "label": "has",
    "to": 86
  }, {
    "from": 342,
    "label": "has",
    "to": 87
  }, {
    "from": 342,
    "label": "has",
    "to": 366
  }, {
    "from": 342,
    "label": "has",
    "to": 367
  }, {
    "from": 342,
    "label": "has",
    "to": 368
  }, {
    "from": 342,
    "label": "has",
    "to": 369
  }, {
    "from": 342,
    "label": "has",
    "to": 370
  }, {
    "from": 342,
    "label": "has",
    "to": 371
  }, {
    "from": 342,
    "label": "has",
    "to": 372
  }, {
    "from": 342,
    "label": "has",
    "to": 373
  }, {
    "from": 342,
    "label": "has",
    "to": 374
  }, {
    "from": 342,
    "label": "has",
    "to": 370
  }, {
    "from": 342,
    "label": "has",
    "to": 87
  }, {
    "from": 342,
    "label": "has",
    "to": 375
  }, {
    "from": 342,
    "label": "has",
    "to": 376
  }, {
    "from": 342,
    "label": "has",
    "to": 377
  }, {
    "from": 342,
    "label": "has",
    "to": 378
  }, {
    "from": 342,
    "label": "has",
    "to": 379
  }, {
    "from": 342,
    "label": "has",
    "to": 380
  }, {
    "from": 342,
    "label": "has",
    "to": 381
  }, {
    "from": 342,
    "label": "has",
    "to": 382
  }, {
    "from": 342,
    "label": "has",
    "to": 383
  }, {
    "from": 342,
    "label": "has",
    "to": 86
  }, {
    "from": 342,
    "label": "has",
    "to": 384
  }, {
    "from": 342,
    "label": "has",
    "to": 385
  }, {
    "from": 342,
    "label": "has",
    "to": 386
  }, {
    "from": 342,
    "label": "has",
    "to": 387
  }, {
    "from": 342,
    "label": "has",
    "to": 388
  }, {
    "from": 342,
    "label": "has",
    "to": 389
  }, {
    "from": 342,
    "label": "has",
    "to": 390
  }, {
    "from": 342,
    "label": "has",
    "to": 391
  }, {
    "from": 342,
    "label": "has",
    "to": 392
  }, {
    "from": 342,
    "label": "has",
    "to": 393
  }, {
    "from": 342,
    "label": "has",
    "to": 394
  }, {
    "from": 342,
    "label": "has",
    "to": 388
  }, {
    "from": 342,
    "label": "has",
    "to": 389
  }, {
    "from": 342,
    "label": "has",
    "to": 390
  }, {
    "from": 342,
    "label": "has",
    "to": 391
  }, {
    "from": 342,
    "label": "has",
    "to": 395
  }, {
    "from": 342,
    "label": "has",
    "to": 393
  }, {
    "from": 342,
    "label": "has",
    "to": 396
  }, {
    "from": 342,
    "label": "has",
    "to": 388
  }, {
    "from": 342,
    "label": "has",
    "to": 389
  }, {
    "from": 342,
    "label": "has",
    "to": 390
  }, {
    "from": 342,
    "label": "has",
    "to": 391
  }, {
    "from": 342,
    "label": "has",
    "to": 397
  }, {
    "from": 342,
    "label": "has",
    "to": 398
  }, {
    "from": 342,
    "label": "has",
    "to": 399
  }, {
    "from": 342,
    "label": "has",
    "to": 388
  }, {
    "from": 342,
    "label": "has",
    "to": 400
  }, {
    "from": 342,
    "label": "has",
    "to": 16
  }, {
    "from": 342,
    "label": "has",
    "to": 401
  }, {
    "from": 342,
    "label": "has",
    "to": 402
  }, {
    "from": 342,
    "label": "has",
    "to": 403
  }, {
    "from": 342,
    "label": "has",
    "to": 404
  }, {
    "from": 342,
    "label": "has",
    "to": 405
  }, {
    "from": 342,
    "label": "has",
    "to": 406
  }, {
    "from": 342,
    "label": "has",
    "to": 407
  }, {
    "from": 342,
    "label": "has",
    "to": 408
  }, {
    "from": 342,
    "label": "has",
    "to": 409
  }, {
    "from": 342,
    "label": "has",
    "to": 410
  }, {
    "from": 342,
    "label": "has",
    "to": 411
  }, {
    "from": 342,
    "label": "has",
    "to": 412
  }, {
    "from": 342,
    "label": "has",
    "to": 413
  }, {
    "from": 342,
    "label": "has",
    "to": 414
  }, {
    "from": 342,
    "label": "has",
    "to": 415
  }, {
    "from": 342,
    "label": "has",
    "to": 416
  }, {
    "from": 342,
    "label": "has",
    "to": 417
  }, {
    "from": 342,
    "label": "has",
    "to": 418
  }, {
    "from": 342,
    "label": "has",
    "to": 419
  }, {
    "from": 342,
    "label": "has",
    "to": 414
  }, {
    "from": 342,
    "label": "has",
    "to": 420
  }, {
    "from": 342,
    "label": "has",
    "to": 421
  }, {
    "from": 342,
    "label": "has",
    "to": 419
  }, {
    "from": 342,
    "label": "has",
    "to": 414
  }, {
    "from": 342,
    "label": "has",
    "to": 420
  }, {
    "from": 342,
    "label": "has",
    "to": 422
  }, {
    "from": 342,
    "label": "has",
    "to": 423
  }, {
    "from": 342,
    "label": "has",
    "to": 424
  }, {
    "from": 342,
    "label": "has",
    "to": 425
  }, {
    "from": 342,
    "label": "has",
    "to": 426
  }, {
    "from": 342,
    "label": "has",
    "to": 427
  }, {
    "from": 342,
    "label": "has",
    "to": 428
  }, {
    "from": 342,
    "label": "has",
    "to": 429
  }, {
    "from": 342,
    "label": "has",
    "to": 430
  }, {
    "from": 342,
    "label": "has",
    "to": 431
  }, {
    "from": 342,
    "label": "has",
    "to": 432
  }, {
    "from": 342,
    "label": "has",
    "to": 433
  }, {
    "from": 342,
    "label": "has",
    "to": 434
  }, {
    "from": 342,
    "label": "has",
    "to": 427
  }, {
    "from": 342,
    "label": "has",
    "to": 428
  }, {
    "from": 342,
    "label": "has",
    "to": 429
  }, {
    "from": 342,
    "label": "has",
    "to": 435
  }, {
    "from": 342,
    "label": "has",
    "to": 436
  }, {
    "from": 342,
    "label": "has",
    "to": 437
  }, {
    "from": 342,
    "label": "has",
    "to": 438
  }, {
    "from": 342,
    "label": "has",
    "to": 439
  }, {
    "from": 342,
    "label": "has",
    "to": 440
  }, {
    "from": 342,
    "label": "has",
    "to": 441
  }, {
    "from": 342,
    "label": "has",
    "to": 442
  }, {
    "from": 342,
    "label": "has",
    "to": 443
  }, {
    "from": 342,
    "label": "has",
    "to": 444
  }, {
    "from": 342,
    "label": "has",
    "to": 445
  }, {
    "from": 342,
    "label": "has",
    "to": 446
  }, {
    "from": 342,
    "label": "has",
    "to": 447
  }, {
    "from": 342,
    "label": "has",
    "to": 427
  }, {
    "from": 342,
    "label": "has",
    "to": 428
  }, {
    "from": 342,
    "label": "has",
    "to": 429
  }, {
    "from": 342,
    "label": "has",
    "to": 448
  }, {
    "from": 342,
    "label": "has",
    "to": 449
  }, {
    "from": 342,
    "label": "has",
    "to": 450
  }, {
    "from": 342,
    "label": "has",
    "to": 451
  }, {
    "from": 342,
    "label": "has",
    "to": 452
  }, {
    "from": 342,
    "label": "has",
    "to": 427
  }, {
    "from": 342,
    "label": "has",
    "to": 428
  }, {
    "from": 342,
    "label": "has",
    "to": 429
  }, {
    "from": 342,
    "label": "has",
    "to": 453
  }, {
    "from": 342,
    "label": "has",
    "to": 454
  }, {
    "from": 342,
    "label": "has",
    "to": 455
  }, {
    "from": 342,
    "label": "has",
    "to": 456
  }, {
    "from": 342,
    "label": "has",
    "to": 457
  }, {
    "from": 342,
    "label": "has",
    "to": 458
  }, {
    "from": 342,
    "label": "has",
    "to": 459
  }, {
    "from": 342,
    "label": "has",
    "to": 460
  }, {
    "from": 342,
    "label": "has",
    "to": 461
  }, {
    "from": 342,
    "label": "has",
    "to": 462
  }, {
    "from": 342,
    "label": "has",
    "to": 463
  }, {
    "from": 464,
    "label": "has",
    "to": 6
  }, {
    "from": 464,
    "label": "has",
    "to": 465
  }, {
    "from": 466,
    "label": "has",
    "to": 467
  }, {
    "from": 466,
    "label": "has",
    "to": 102
  }, {
    "from": 466,
    "label": "has",
    "to": 468
  }, {
    "from": 468,
    "label": "has",
    "to": 6
  }, {
    "from": 466,
    "label": "has",
    "to": 469
  }, {
    "from": 466,
    "label": "has",
    "to": 470
  }, {
    "from": 470,
    "label": "has",
    "to": 6
  }, {
    "from": 466,
    "label": "has",
    "to": 471
  }, {
    "from": 466,
    "label": "has",
    "to": 472
  }, {
    "from": 466,
    "label": "has",
    "to": 473
  }, {
    "from": 466,
    "label": "has",
    "to": 474
  }, {
    "from": 466,
    "label": "has",
    "to": 475
  }, {
    "from": 466,
    "label": "has",
    "to": 476
  }, {
    "from": 476,
    "label": "has",
    "to": 102
  }, {
    "from": 476,
    "label": "has",
    "to": 477
  }, {
    "from": 476,
    "label": "has",
    "to": 6
  }, {
    "from": 466,
    "label": "has",
    "to": 84
  }, {
    "from": 466,
    "label": "has",
    "to": 478
  }, {
    "from": 466,
    "label": "has",
    "to": 479
  }, {
    "from": 466,
    "label": "has",
    "to": 87
  }, {
    "from": 466,
    "label": "has",
    "to": 480
  }, {
    "from": 466,
    "label": "has",
    "to": 87
  }, {
    "from": 466,
    "label": "has",
    "to": 481
  }, {
    "from": 466,
    "label": "has",
    "to": 482
  }, {
    "from": 466,
    "label": "has",
    "to": 400
  }, {
    "from": 466,
    "label": "has",
    "to": 16
  }, {
    "from": 466,
    "label": "has",
    "to": 87
  }, {
    "from": 466,
    "label": "has",
    "to": 483
  }, {
    "from": 466,
    "label": "has",
    "to": 479
  }, {
    "from": 466,
    "label": "has",
    "to": 87
  }, {
    "from": 466,
    "label": "has",
    "to": 484
  }, {
    "from": 466,
    "label": "has",
    "to": 485
  }, {
    "from": 466,
    "label": "has",
    "to": 400
  }, {
    "from": 466,
    "label": "has",
    "to": 16
  }, {
    "from": 466,
    "label": "has",
    "to": 87
  }, {
    "from": 466,
    "label": "has",
    "to": 486
  }, {
    "from": 466,
    "label": "has",
    "to": 479
  }, {
    "from": 466,
    "label": "has",
    "to": 87
  }, {
    "from": 466,
    "label": "has",
    "to": 487
  }, {
    "from": 466,
    "label": "has",
    "to": 488
  }, {
    "from": 466,
    "label": "has",
    "to": 479
  }, {
    "from": 466,
    "label": "has",
    "to": 87
  }, {
    "from": 466,
    "label": "has",
    "to": 489
  }, {
    "from": 466,
    "label": "has",
    "to": 479
  }, {
    "from": 466,
    "label": "has",
    "to": 87
  }, {
    "from": 466,
    "label": "has",
    "to": 490
  }, {
    "from": 466,
    "label": "has",
    "to": 491
  }, {
    "from": 466,
    "label": "has",
    "to": 492
  }, {
    "from": 466,
    "label": "has",
    "to": 16
  }, {
    "from": 466,
    "label": "has",
    "to": 87
  }, {
    "from": 466,
    "label": "has",
    "to": 493
  }, {
    "from": 493,
    "label": "has",
    "to": 494
  }, {
    "from": 466,
    "label": "has",
    "to": 495
  }, {
    "from": 466,
    "label": "has",
    "to": 496
  }, {
    "from": 466,
    "label": "has",
    "to": 497
  }, {
    "from": 497,
    "label": "has",
    "to": 102
  }, {
    "from": 497,
    "label": "has",
    "to": 477
  }, {
    "from": 497,
    "label": "has",
    "to": 498
  }, {
    "from": 497,
    "label": "has",
    "to": 6
  }, {
    "from": 466,
    "label": "has",
    "to": 499
  }, {
    "from": 466,
    "label": "has",
    "to": 500
  }, {
    "from": 466,
    "label": "has",
    "to": 496
  }, {
    "from": 466,
    "label": "has",
    "to": 501
  }, {
    "from": 501,
    "label": "has",
    "to": 494
  }, {
    "from": 466,
    "label": "has",
    "to": 502
  }, {
    "from": 466,
    "label": "has",
    "to": 503
  }, {
    "from": 504,
    "label": "has",
    "to": 6
  }, {
    "from": 504,
    "label": "has",
    "to": 505
  }, {
    "from": 506,
    "label": "has",
    "to": 6
  }, {
    "from": 506,
    "label": "has",
    "to": 507
  }, {
    "from": 508,
    "label": "has",
    "to": 102
  }, {
    "from": 508,
    "label": "has",
    "to": 477
  }, {
    "from": 508,
    "label": "has",
    "to": 6
  }, {
    "from": 508,
    "label": "has",
    "to": 509
  }, {
    "from": 510,
    "label": "has",
    "to": 494
  }, {
    "from": 510,
    "label": "has",
    "to": 511
  }, {
    "from": 512,
    "label": "has",
    "to": 102
  }, {
    "from": 512,
    "label": "has",
    "to": 477
  }, {
    "from": 512,
    "label": "has",
    "to": 498
  }, {
    "from": 512,
    "label": "has",
    "to": 6
  }, {
    "from": 512,
    "label": "has",
    "to": 513
  }, {
    "from": 514,
    "label": "has",
    "to": 494
  }, {
    "from": 514,
    "label": "has",
    "to": 515
  }, {
    "from": 516,
    "label": "has",
    "to": 517
  }, {
    "from": 516,
    "label": "has",
    "to": 84
  }, {
    "from": 516,
    "label": "has",
    "to": 518
  }, {
    "from": 516,
    "label": "has",
    "to": 519
  }, {
    "from": 516,
    "label": "has",
    "to": 520
  }, {
    "from": 516,
    "label": "has",
    "to": 521
  }, {
    "from": 521,
    "label": "has",
    "to": 6
  }, {
    "from": 516,
    "label": "has",
    "to": 522
  }, {
    "from": 516,
    "label": "has",
    "to": 106
  }, {
    "from": 516,
    "label": "has",
    "to": 523
  }, {
    "from": 516,
    "label": "has",
    "to": 524
  }, {
    "from": 516,
    "label": "has",
    "to": 525
  }, {
    "from": 516,
    "label": "has",
    "to": 87
  }, {
    "from": 516,
    "label": "has",
    "to": 526
  }, {
    "from": 526,
    "label": "has",
    "to": 6
  }, {
    "from": 516,
    "label": "has",
    "to": 527
  }, {
    "from": 516,
    "label": "has",
    "to": 528
  }, {
    "from": 528,
    "label": "has",
    "to": 529
  }, {
    "from": 528,
    "label": "has",
    "to": 6
  }, {
    "from": 516,
    "label": "has",
    "to": 87
  }, {
    "from": 516,
    "label": "has",
    "to": 530
  }, {
    "from": 516,
    "label": "has",
    "to": 86
  }, {
    "from": 516,
    "label": "has",
    "to": 531
  }, {
    "from": 516,
    "label": "has",
    "to": 86
  }, {
    "from": 516,
    "label": "has",
    "to": 87
  }, {
    "from": 516,
    "label": "has",
    "to": 532
  }, {
    "from": 516,
    "label": "has",
    "to": 533
  }, {
    "from": 516,
    "label": "has",
    "to": 534
  }, {
    "from": 516,
    "label": "has",
    "to": 533
  }, {
    "from": 516,
    "label": "has",
    "to": 535
  }, {
    "from": 536,
    "label": "has",
    "to": 6
  }, {
    "from": 537,
    "label": "has",
    "to": 6
  }, {
    "from": 538,
    "label": "has",
    "to": 529
  }, {
    "from": 538,
    "label": "has",
    "to": 6
  }, {
    "from": 538,
    "label": "has",
    "to": 539
  }, {
    "from": 540,
    "label": "has",
    "to": 541
  }, {
    "from": 540,
    "label": "has",
    "to": 542
  }, {
    "from": 543,
    "label": "has",
    "to": 84
  }, {
    "from": 543,
    "label": "has",
    "to": 544
  }, {
    "from": 543,
    "label": "has",
    "to": 545
  }, {
    "from": 543,
    "label": "has",
    "to": 546
  }, {
    "from": 543,
    "label": "has",
    "to": 547
  }, {
    "from": 543,
    "label": "has",
    "to": 548
  }, {
    "from": 543,
    "label": "has",
    "to": 91
  }, {
    "from": 543,
    "label": "has",
    "to": 549
  }, {
    "from": 543,
    "label": "has",
    "to": 550
  }, {
    "from": 543,
    "label": "has",
    "to": 551
  }, {
    "from": 543,
    "label": "has",
    "to": 552
  }, {
    "from": 543,
    "label": "has",
    "to": 553
  }, {
    "from": 543,
    "label": "has",
    "to": 554
  }, {
    "from": 543,
    "label": "has",
    "to": 106
  }, {
    "from": 543,
    "label": "has",
    "to": 555
  }, {
    "from": 543,
    "label": "has",
    "to": 550
  }, {
    "from": 543,
    "label": "has",
    "to": 556
  }, {
    "from": 557,
    "label": "has",
    "to": 6
  }, {
    "from": 557,
    "label": "has",
    "to": 558
  }, {
    "from": 559,
    "label": "calls",
    "to": 196
  }, {
    "from": 156,
    "label": "calls",
    "to": 560
  }, {
    "from": 559,
    "label": "calls",
    "to": 323
  }, {
    "from": 559,
    "label": "calls",
    "to": 574
  }, {
    "from": 559,
    "label": "calls",
    "to": 574
  }, {
    "from": 23,
    "label": "calls",
    "to": 574
  }, {
    "from": 23,
    "label": "calls",
    "to": 574
  }, {
    "from": 23,
    "label": "calls",
    "to": 574
  }, {
    "from": 23,
    "label": "calls",
    "to": 574
  }, {
    "from": 82,
    "label": "calls",
    "to": 574
  }, {
    "from": 82,
    "label": "calls",
    "to": 574
  }, {
    "from": 82,
    "label": "calls",
    "to": 574
  }, {
    "from": 82,
    "label": "calls",
    "to": 574
  }, {
    "from": 82,
    "label": "calls",
    "to": 574
  }, {
    "from": 82,
    "label": "calls",
    "to": 574
  }, {
    "from": 82,
    "label": "calls",
    "to": 574
  }, {
    "from": 96,
    "label": "calls",
    "to": 574
  }, {
    "from": 96,
    "label": "calls",
    "to": 574
  }, {
    "from": 96,
    "label": "calls",
    "to": 574
  }, {
    "from": 96,
    "label": "calls",
    "to": 574
  }, {
    "from": 96,
    "label": "calls",
    "to": 574
  }, {
    "from": 111,
    "label": "calls",
    "to": 574
  }, {
    "from": 111,
    "label": "calls",
    "to": 574
  }, {
    "from": 111,
    "label": "calls",
    "to": 574
  }, {
    "from": 111,
    "label": "calls",
    "to": 574
  }, {
    "from": 111,
    "label": "calls",
    "to": 574
  }, {
    "from": 111,
    "label": "calls",
    "to": 574
  }, {
    "from": 111,
    "label": "calls",
    "to": 574
  }, {
    "from": 111,
    "label": "calls",
    "to": 574
  }, {
    "from": 111,
    "label": "calls",
    "to": 574
  }, {
    "from": 111,
    "label": "calls",
    "to": 574
  }, {
    "from": 111,
    "label": "calls",
    "to": 574
  }, {
    "from": 111,
    "label": "calls",
    "to": 574
  }, {
    "from": 111,
    "label": "calls",
    "to": 574
  }, {
    "from": 111,
    "label": "calls",
    "to": 574
  }, {
    "from": 111,
    "label": "calls",
    "to": 574
  }, {
    "from": 111,
    "label": "calls",
    "to": 574
  }, {
    "from": 111,
    "label": "calls",
    "to": 574
  }, {
    "from": 144,
    "label": "calls",
    "to": 574
  }, {
    "from": 144,
    "label": "calls",
    "to": 574
  }, {
    "from": 156,
    "label": "calls",
    "to": 574
  }, {
    "from": 156,
    "label": "calls",
    "to": 574
  }, {
    "from": 156,
    "label": "calls",
    "to": 574
  }, {
    "from": 178,
    "label": "calls",
    "to": 574
  }, {
    "from": 178,
    "label": "calls",
    "to": 574
  }, {
    "from": 186,
    "label": "calls",
    "to": 574
  }, {
    "from": 186,
    "label": "calls",
    "to": 574
  }, {
    "from": 186,
    "label": "calls",
    "to": 574
  }, {
    "from": 186,
    "label": "calls",
    "to": 574
  }, {
    "from": 196,
    "label": "calls",
    "to": 574
  }, {
    "from": 196,
    "label": "calls",
    "to": 574
  }, {
    "from": 196,
    "label": "calls",
    "to": 574
  }, {
    "from": 196,
    "label": "calls",
    "to": 574
  }, {
    "from": 196,
    "label": "calls",
    "to": 574
  }, {
    "from": 196,
    "label": "calls",
    "to": 574
  }, {
    "from": 196,
    "label": "calls",
    "to": 574
  }, {
    "from": 210,
    "label": "calls",
    "to": 574
  }, {
    "from": 210,
    "label": "calls",
    "to": 574
  }, {
    "from": 218,
    "label": "calls",
    "to": 574
  }, {
    "from": 252,
    "label": "calls",
    "to": 574
  }, {
    "from": 252,
    "label": "calls",
    "to": 574
  }, {
    "from": 252,
    "label": "calls",
    "to": 574
  }, {
    "from": 252,
    "label": "calls",
    "to": 574
  }, {
    "from": 252,
    "label": "calls",
    "to": 574
  }, {
    "from": 252,
    "label": "calls",
    "to": 574
  }, {
    "from": 252,
    "label": "calls",
    "to": 574
  }, {
    "from": 252,
    "label": "calls",
    "to": 574
  }, {
    "from": 252,
    "label": "calls",
    "to": 574
  }, {
    "from": 252,
    "label": "calls",
    "to": 574
  }, {
    "from": 252,
    "label": "calls",
    "to": 574
  }, {
    "from": 252,
    "label": "calls",
    "to": 574
  }, {
    "from": 252,
    "label": "calls",
    "to": 574
  }, {
    "from": 252,
    "label": "calls",
    "to": 574
  }, {
    "from": 252,
    "label": "calls",
    "to": 574
  }, {
    "from": 252,
    "label": "calls",
    "to": 574
  }, {
    "from": 252,
    "label": "calls",
    "to": 574
  }, {
    "from": 323,
    "label": "calls",
    "to": 574
  }, {
    "from": 323,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 342,
    "label": "calls",
    "to": 574
  }, {
    "from": 466,
    "label": "calls",
    "to": 574
  }, {
    "from": 466,
    "label": "calls",
    "to": 574
  }, {
    "from": 466,
    "label": "calls",
    "to": 574
  }, {
    "from": 466,
    "label": "calls",
    "to": 574
  }, {
    "from": 466,
    "label": "calls",
    "to": 574
  }, {
    "from": 466,
    "label": "calls",
    "to": 574
  }, {
    "from": 466,
    "label": "calls",
    "to": 574
  }, {
    "from": 516,
    "label": "calls",
    "to": 574
  }, {
    "from": 516,
    "label": "calls",
    "to": 574
  }, {
    "from": 516,
    "label": "calls",
    "to": 574
  }, {
    "from": 516,
    "label": "calls",
    "to": 574
  }, {
    "from": 516,
    "label": "calls",
    "to": 574
  }, {
    "from": 516,
    "label": "calls",
    "to": 574
  }, {
    "from": 516,
    "label": "calls",
    "to": 574
  }, {
    "from": 516,
    "label": "calls",
    "to": 574
  }, {
    "from": 516,
    "label": "calls",
    "to": 574
  }, {
    "from": 543,
    "label": "calls",
    "to": 574
  }, {
    "from": 543,
    "label": "calls",
    "to": 574
  }, {
    "from": 543,
    "label": "calls",
    "to": 574
  }, {
    "from": 543,
    "label": "calls",
    "to": 574
  }, {
    "from": 543,
    "label": "calls",
    "to": 574
  }, {
    "from": 543,
    "label": "calls",
    "to": 574
  }, {
    "from": 54,
    "label": "calls",
    "to": 575
  }, {
    "from": 59,
    "label": "calls",
    "to": 575
  }, {
    "from": 59,
    "label": "calls",
    "to": 575
  }, {
    "from": 63,
    "label": "calls",
    "to": 575
  }, {
    "from": 252,
    "label": "calls",
    "to": 575
  }, {
    "from": 252,
    "label": "calls",
    "to": 575
  }, {
    "from": 559,
    "label": "calls",
    "to": 342
  }, {
    "from": 186,
    "label": "calls",
    "to": 576
  }, {
    "from": 323,
    "label": "calls",
    "to": 589
  }, {
    "from": 466,
    "label": "calls",
    "to": 589
  }, {
    "from": 156,
    "label": "calls",
    "to": 577
  }, {
    "from": 156,
    "label": "calls",
    "to": 577
  }, {
    "from": 559,
    "label": "calls",
    "to": 578
  }, {
    "from": 8,
    "label": "calls",
    "to": 578
  }, {
    "from": 11,
    "label": "calls",
    "to": 578
  }, {
    "from": 75,
    "label": "calls",
    "to": 578
  }, {
    "from": 82,
    "label": "calls",
    "to": 578
  }, {
    "from": 96,
    "label": "calls",
    "to": 578
  }, {
    "from": 111,
    "label": "calls",
    "to": 578
  }, {
    "from": 144,
    "label": "calls",
    "to": 578
  }, {
    "from": 156,
    "label": "calls",
    "to": 578
  }, {
    "from": 156,
    "label": "calls",
    "to": 578
  }, {
    "from": 178,
    "label": "calls",
    "to": 578
  }, {
    "from": 178,
    "label": "calls",
    "to": 578
  }, {
    "from": 186,
    "label": "calls",
    "to": 578
  }, {
    "from": 196,
    "label": "calls",
    "to": 578
  }, {
    "from": 210,
    "label": "calls",
    "to": 578
  }, {
    "from": 243,
    "label": "calls",
    "to": 578
  }, {
    "from": 246,
    "label": "calls",
    "to": 578
  }, {
    "from": 249,
    "label": "calls",
    "to": 578
  }, {
    "from": 252,
    "label": "calls",
    "to": 578
  }, {
    "from": 252,
    "label": "calls",
    "to": 578
  }, {
    "from": 252,
    "label": "calls",
    "to": 578
  }, {
    "from": 252,
    "label": "calls",
    "to": 578
  }, {
    "from": 323,
    "label": "calls",
    "to": 578
  }, {
    "from": 342,
    "label": "calls",
    "to": 578
  }, {
    "from": 342,
    "label": "calls",
    "to": 578
  }, {
    "from": 342,
    "label": "calls",
    "to": 578
  }, {
    "from": 466,
    "label": "calls",
    "to": 578
  }, {
    "from": 466,
    "label": "calls",
    "to": 578
  }, {
    "from": 466,
    "label": "calls",
    "to": 578
  }, {
    "from": 466,
    "label": "calls",
    "to": 578
  }, {
    "from": 516,
    "label": "calls",
    "to": 578
  }, {
    "from": 540,
    "label": "calls",
    "to": 578
  }, {
    "from": 559,
    "label": "calls",
    "to": 578
  }, {
    "from": 196,
    "label": "calls",
    "to": 579
  }, {
    "from": 196,
    "label": "calls",
    "to": 579
  }, {
    "from": 559,
    "label": "calls",
    "to": 186
  }, {
    "from": 559,
    "label": "calls",
    "to": 563
  }, {
    "from": 559,
    "label": "calls",
    "to": 540
  }, {
    "from": 23,
    "label": "calls",
    "to": 573
  }, {
    "from": 82,
    "label": "calls",
    "to": 573
  }, {
    "from": 82,
    "label": "calls",
    "to": 573
  }, {
    "from": 252,
    "label": "calls",
    "to": 573
  }, {
    "from": 559,
    "label": "calls",
    "to": 516
  }, {
    "from": 23,
    "label": "calls",
    "to": 562
  }, {
    "from": 559,
    "label": "calls",
    "to": 178
  }, {
    "from": 23,
    "label": "calls",
    "to": 570
  }, {
    "from": 323,
    "label": "calls",
    "to": 570
  }, {
    "from": 559,
    "label": "calls",
    "to": 2
  }, {
    "from": 63,
    "label": "calls",
    "to": 588
  }, {
    "from": 82,
    "label": "calls",
    "to": 581
  }, {
    "from": 82,
    "label": "calls",
    "to": 581
  }, {
    "from": 82,
    "label": "calls",
    "to": 581
  }, {
    "from": 82,
    "label": "calls",
    "to": 581
  }, {
    "from": 82,
    "label": "calls",
    "to": 581
  }, {
    "from": 82,
    "label": "calls",
    "to": 581
  }, {
    "from": 82,
    "label": "calls",
    "to": 581
  }, {
    "from": 96,
    "label": "calls",
    "to": 581
  }, {
    "from": 96,
    "label": "calls",
    "to": 581
  }, {
    "from": 96,
    "label": "calls",
    "to": 581
  }, {
    "from": 96,
    "label": "calls",
    "to": 581
  }, {
    "from": 111,
    "label": "calls",
    "to": 581
  }, {
    "from": 111,
    "label": "calls",
    "to": 581
  }, {
    "from": 111,
    "label": "calls",
    "to": 581
  }, {
    "from": 144,
    "label": "calls",
    "to": 581
  }, {
    "from": 144,
    "label": "calls",
    "to": 581
  }, {
    "from": 156,
    "label": "calls",
    "to": 581
  }, {
    "from": 156,
    "label": "calls",
    "to": 581
  }, {
    "from": 156,
    "label": "calls",
    "to": 581
  }, {
    "from": 156,
    "label": "calls",
    "to": 581
  }, {
    "from": 156,
    "label": "calls",
    "to": 581
  }, {
    "from": 156,
    "label": "calls",
    "to": 581
  }, {
    "from": 156,
    "label": "calls",
    "to": 581
  }, {
    "from": 156,
    "label": "calls",
    "to": 581
  }, {
    "from": 178,
    "label": "calls",
    "to": 581
  }, {
    "from": 186,
    "label": "calls",
    "to": 581
  }, {
    "from": 186,
    "label": "calls",
    "to": 581
  }, {
    "from": 186,
    "label": "calls",
    "to": 581
  }, {
    "from": 196,
    "label": "calls",
    "to": 581
  }, {
    "from": 196,
    "label": "calls",
    "to": 581
  }, {
    "from": 196,
    "label": "calls",
    "to": 581
  }, {
    "from": 196,
    "label": "calls",
    "to": 581
  }, {
    "from": 196,
    "label": "calls",
    "to": 581
  }, {
    "from": 196,
    "label": "calls",
    "to": 581
  }, {
    "from": 196,
    "label": "calls",
    "to": 581
  }, {
    "from": 210,
    "label": "calls",
    "to": 581
  }, {
    "from": 210,
    "label": "calls",
    "to": 581
  }, {
    "from": 210,
    "label": "calls",
    "to": 581
  }, {
    "from": 210,
    "label": "calls",
    "to": 581
  }, {
    "from": 210,
    "label": "calls",
    "to": 581
  }, {
    "from": 218,
    "label": "calls",
    "to": 581
  }, {
    "from": 218,
    "label": "calls",
    "to": 581
  }, {
    "from": 218,
    "label": "calls",
    "to": 581
  }, {
    "from": 218,
    "label": "calls",
    "to": 581
  }, {
    "from": 252,
    "label": "calls",
    "to": 581
  }, {
    "from": 252,
    "label": "calls",
    "to": 581
  }, {
    "from": 252,
    "label": "calls",
    "to": 581
  }, {
    "from": 252,
    "label": "calls",
    "to": 581
  }, {
    "from": 323,
    "label": "calls",
    "to": 581
  }, {
    "from": 342,
    "label": "calls",
    "to": 581
  }, {
    "from": 342,
    "label": "calls",
    "to": 581
  }, {
    "from": 342,
    "label": "calls",
    "to": 581
  }, {
    "from": 342,
    "label": "calls",
    "to": 581
  }, {
    "from": 342,
    "label": "calls",
    "to": 581
  }, {
    "from": 342,
    "label": "calls",
    "to": 581
  }, {
    "from": 342,
    "label": "calls",
    "to": 581
  }, {
    "from": 342,
    "label": "calls",
    "to": 581
  }, {
    "from": 342,
    "label": "calls",
    "to": 581
  }, {
    "from": 342,
    "label": "calls",
    "to": 581
  }, {
    "from": 342,
    "label": "calls",
    "to": 581
  }, {
    "from": 342,
    "label": "calls",
    "to": 581
  }, {
    "from": 342,
    "label": "calls",
    "to": 581
  }, {
    "from": 342,
    "label": "calls",
    "to": 581
  }, {
    "from": 342,
    "label": "calls",
    "to": 581
  }, {
    "from": 342,
    "label": "calls",
    "to": 581
  }, {
    "from": 342,
    "label": "calls",
    "to": 581
  }, {
    "from": 342,
    "label": "calls",
    "to": 581
  }, {
    "from": 466,
    "label": "calls",
    "to": 581
  }, {
    "from": 466,
    "label": "calls",
    "to": 581
  }, {
    "from": 466,
    "label": "calls",
    "to": 581
  }, {
    "from": 466,
    "label": "calls",
    "to": 581
  }, {
    "from": 466,
    "label": "calls",
    "to": 581
  }, {
    "from": 466,
    "label": "calls",
    "to": 581
  }, {
    "from": 466,
    "label": "calls",
    "to": 581
  }, {
    "from": 466,
    "label": "calls",
    "to": 581
  }, {
    "from": 466,
    "label": "calls",
    "to": 581
  }, {
    "from": 466,
    "label": "calls",
    "to": 581
  }, {
    "from": 466,
    "label": "calls",
    "to": 581
  }, {
    "from": 466,
    "label": "calls",
    "to": 581
  }, {
    "from": 516,
    "label": "calls",
    "to": 581
  }, {
    "from": 516,
    "label": "calls",
    "to": 581
  }, {
    "from": 516,
    "label": "calls",
    "to": 581
  }, {
    "from": 516,
    "label": "calls",
    "to": 581
  }, {
    "from": 543,
    "label": "calls",
    "to": 581
  }, {
    "from": 543,
    "label": "calls",
    "to": 581
  }, {
    "from": 543,
    "label": "calls",
    "to": 581
  }, {
    "from": 63,
    "label": "calls",
    "to": 583
  }, {
    "from": 75,
    "label": "calls",
    "to": 583
  }, {
    "from": 75,
    "label": "calls",
    "to": 583
  }, {
    "from": 96,
    "label": "calls",
    "to": 583
  }, {
    "from": 96,
    "label": "calls",
    "to": 583
  }, {
    "from": 196,
    "label": "calls",
    "to": 583
  }, {
    "from": 543,
    "label": "calls",
    "to": 583
  }, {
    "from": 543,
    "label": "calls",
    "to": 583
  }, {
    "from": 543,
    "label": "calls",
    "to": 583
  }, {
    "from": 54,
    "label": "calls",
    "to": 595
  }, {
    "from": 342,
    "label": "calls",
    "to": 587
  }, {
    "from": 342,
    "label": "calls",
    "to": 587
  }, {
    "from": 342,
    "label": "calls",
    "to": 587
  }, {
    "from": 559,
    "label": "calls",
    "to": 96
  }, {
    "from": 218,
    "label": "calls",
    "to": 586
  }, {
    "from": 218,
    "label": "calls",
    "to": 586
  }, {
    "from": 218,
    "label": "calls",
    "to": 586
  }, {
    "from": 218,
    "label": "calls",
    "to": 586
  }, {
    "from": 218,
    "label": "calls",
    "to": 586
  }, {
    "from": 218,
    "label": "calls",
    "to": 586
  }, {
    "from": 218,
    "label": "calls",
    "to": 586
  }, {
    "from": 218,
    "label": "calls",
    "to": 586
  }, {
    "from": 218,
    "label": "calls",
    "to": 586
  }, {
    "from": 218,
    "label": "calls",
    "to": 586
  }, {
    "from": 218,
    "label": "calls",
    "to": 586
  }, {
    "from": 218,
    "label": "calls",
    "to": 586
  }, {
    "from": 218,
    "label": "calls",
    "to": 586
  }, {
    "from": 44,
    "label": "calls",
    "to": 572
  }, {
    "from": 559,
    "label": "calls",
    "to": 23
  }, {
    "from": 559,
    "label": "calls",
    "to": 543
  }, {
    "from": 559,
    "label": "calls",
    "to": 249
  }, {
    "from": 218,
    "label": "calls",
    "to": 59
  }, {
    "from": 218,
    "label": "calls",
    "to": 59
  }, {
    "from": 218,
    "label": "calls",
    "to": 59
  }, {
    "from": 218,
    "label": "calls",
    "to": 59
  }, {
    "from": 218,
    "label": "calls",
    "to": 59
  }, {
    "from": 218,
    "label": "calls",
    "to": 59
  }, {
    "from": 543,
    "label": "calls",
    "to": 565
  }, {
    "from": 156,
    "label": "calls",
    "to": 566
  }, {
    "from": 48,
    "label": "calls",
    "to": 591
  }, {
    "from": 48,
    "label": "calls",
    "to": 591
  }, {
    "from": 196,
    "label": "calls",
    "to": 591
  }, {
    "from": 559,
    "label": "calls",
    "to": 156
  }, {
    "from": 559,
    "label": "calls",
    "to": 218
  }, {
    "from": 559,
    "label": "calls",
    "to": 585
  }, {
    "from": 63,
    "label": "calls",
    "to": 590
  }, {
    "from": 156,
    "label": "calls",
    "to": 571
  }, {
    "from": 156,
    "label": "calls",
    "to": 571
  }, {
    "from": 2,
    "label": "calls",
    "to": 592
  }, {
    "from": 559,
    "label": "calls",
    "to": 466
  }, {
    "from": 559,
    "label": "calls",
    "to": 593
  }, {
    "from": 59,
    "label": "calls",
    "to": 593
  }, {
    "from": 543,
    "label": "calls",
    "to": 569
  }, {
    "from": 543,
    "label": "calls",
    "to": 569
  }, {
    "from": 543,
    "label": "calls",
    "to": 569
  }, {
    "from": 559,
    "label": "calls",
    "to": 584
  }, {
    "from": 559,
    "label": "calls",
    "to": 246
  }, {
    "from": 559,
    "label": "calls",
    "to": 82
  }, {
    "from": 23,
    "label": "calls",
    "to": 568
  }, {
    "from": 323,
    "label": "calls",
    "to": 580
  }, {
    "from": 323,
    "label": "calls",
    "to": 580
  }, {
    "from": 210,
    "label": "calls",
    "to": 596
  }, {
    "from": 210,
    "label": "calls",
    "to": 596
  }, {
    "from": 559,
    "label": "calls",
    "to": 44
  }, {
    "from": 20,
    "label": "calls",
    "to": 564
  }, {
    "from": 218,
    "label": "calls",
    "to": 564
  }, {
    "from": 252,
    "label": "calls",
    "to": 564
  }, {
    "from": 252,
    "label": "calls",
    "to": 564
  }, {
    "from": 252,
    "label": "calls",
    "to": 564
  }, {
    "from": 20,
    "label": "calls",
    "to": 561
  }, {
    "from": 144,
    "label": "calls",
    "to": 561
  }, {
    "from": 178,
    "label": "calls",
    "to": 561
  }, {
    "from": 559,
    "label": "calls",
    "to": 243
  }, {
    "from": 342,
    "label": "calls",
    "to": 567
  }, {
    "from": 342,
    "label": "calls",
    "to": 567
  }, {
    "from": 466,
    "label": "calls",
    "to": 567
  }, {
    "from": 466,
    "label": "calls",
    "to": 567
  }, {
    "from": 466,
    "label": "calls",
    "to": 567
  }, {
    "from": 543,
    "label": "calls",
    "to": 567
  }, {
    "from": 559,
    "label": "calls",
    "to": 210
  }, {
    "from": 23,
    "label": "calls",
    "to": 20
  }, {
    "from": 96,
    "label": "calls",
    "to": 20
  }, {
    "from": 111,
    "label": "calls",
    "to": 20
  }, {
    "from": 156,
    "label": "calls",
    "to": 20
  }, {
    "from": 342,
    "label": "calls",
    "to": 20
  }, {
    "from": 466,
    "label": "calls",
    "to": 20
  }, {
    "from": 466,
    "label": "calls",
    "to": 20
  }, {
    "from": 466,
    "label": "calls",
    "to": 20
  }, {
    "from": 466,
    "label": "calls",
    "to": 20
  }, {
    "from": 516,
    "label": "calls",
    "to": 20
  }, {
    "from": 559,
    "label": "calls",
    "to": 111
  }, {
    "from": 559,
    "label": "calls",
    "to": 252
  }, {
    "from": 559,
    "label": "calls",
    "to": 598
  }, {
    "from": 559,
    "label": "calls",
    "to": 598
  }, {
    "from": 323,
    "label": "calls",
    "to": 598
  }, {
    "from": 466,
    "label": "calls",
    "to": 598
  }, {
    "from": 559,
    "label": "calls",
    "to": 144
  }, {
    "from": 63,
    "label": "calls",
    "to": 63
  }, {
    "from": 96,
    "label": "calls",
    "to": 63
  }, {
    "from": 96,
    "label": "calls",
    "to": 63
  }, {
    "from": 252,
    "label": "calls",
    "to": 63
  }, {
    "from": 252,
    "label": "calls",
    "to": 63
  }, {
    "from": 252,
    "label": "calls",
    "to": 63
  }, {
    "from": 252,
    "label": "calls",
    "to": 63
  }, {
    "from": 252,
    "label": "calls",
    "to": 63
  }, {
    "from": 252,
    "label": "calls",
    "to": 63
  }, {
    "from": 252,
    "label": "calls",
    "to": 63
  }, {
    "from": 252,
    "label": "calls",
    "to": 63
  }, {
    "from": 252,
    "label": "calls",
    "to": 63
  }, {
    "from": 252,
    "label": "calls",
    "to": 63
  }, {
    "from": 252,
    "label": "calls",
    "to": 63
  }, {
    "from": 252,
    "label": "calls",
    "to": 63
  }, {
    "from": 252,
    "label": "calls",
    "to": 63
  }, {
    "from": 252,
    "label": "calls",
    "to": 63
  }, {
    "from": 252,
    "label": "calls",
    "to": 63
  }, {
    "from": 111,
    "label": "calls",
    "to": 597
  }, {
    "from": 144,
    "label": "calls",
    "to": 597
  }, {
    "from": 156,
    "label": "calls",
    "to": 597
  }, {
    "from": 252,
    "label": "calls",
    "to": 597
  }, {
    "from": 559,
    "label": "calls",
    "to": 599
  }, {
    "from": 252,
    "label": "calls",
    "to": 594
  }, {
    "from": 252,
    "label": "calls",
    "to": 594
  }, {
    "from": 82,
    "label": "calls",
    "to": 582
  }, {
    "from": 82,
    "label": "calls",
    "to": 582
  }, {
    "from": 82,
    "label": "calls",
    "to": 582
  }, {
    "from": 82,
    "label": "calls",
    "to": 582
  }, {
    "from": 82,
    "label": "calls",
    "to": 582
  }, {
    "from": 196,
    "label": "calls",
    "to": 582
  }, {
    "from": 196,
    "label": "calls",
    "to": 582
  }, {
    "from": 196,
    "label": "calls",
    "to": 582
  }, {
    "from": 196,
    "label": "calls",
    "to": 582
  }, {
    "from": 210,
    "label": "calls",
    "to": 582
  }, {
    "from": 210,
    "label": "calls",
    "to": 582
  }, {
    "from": 252,
    "label": "calls",
    "to": 582
  }, {
    "from": 252,
    "label": "calls",
    "to": 582
  }, {
    "from": 252,
    "label": "calls",
    "to": 582
  }, {
    "from": 252,
    "label": "calls",
    "to": 582
  }, {
    "from": 252,
    "label": "calls",
    "to": 582
  }, {
    "from": 342,
    "label": "calls",
    "to": 582
  }, {
    "from": 342,
    "label": "calls",
    "to": 582
  }, {
    "from": 342,
    "label": "calls",
    "to": 582
  }, {
    "from": 342,
    "label": "calls",
    "to": 582
  }, {
    "from": 342,
    "label": "calls",
    "to": 582
  }, {
    "from": 516,
    "label": "calls",
    "to": 582
  }, {
    "from": 516,
    "label": "calls",
    "to": 582
  }, {
    "from": 516,
    "label": "calls",
    "to": 582
  }, {
    "from": 516,
    "label": "calls",
    "to": 582
  }, {
    "from": 1,
    "label": "contains",
    "to": 559
  }, {
    "from": 559,
    "label": "declares",
    "to": 2
  }, {
    "from": 559,
    "label": "declares",
    "to": 8
  }, {
    "from": 559,
    "label": "declares",
    "to": 11
  }, {
    "from": 559,
    "label": "declares",
    "to": 20
  }, {
    "from": 559,
    "label": "declares",
    "to": 23
  }, {
    "from": 559,
    "label": "declares",
    "to": 44
  }, {
    "from": 559,
    "label": "declares",
    "to": 48
  }, {
    "from": 559,
    "label": "declares",
    "to": 54
  }, {
    "from": 559,
    "label": "declares",
    "to": 59
  }, {
    "from": 559,
    "label": "declares",
    "to": 63
  }, {
    "from": 559,
    "label": "declares",
    "to": 75
  }, {
    "from": 559,
    "label": "declares",
    "to": 82
  }, {
    "from": 559,
    "label": "declares",
    "to": 96
  }, {
    "from": 559,
    "label": "declares",
    "to": 109
  }, {
    "from": 559,
    "label": "declares",
    "to": 111
  }, {
    "from": 559,
    "label": "declares",
    "to": 140
  }, {
    "from": 559,
    "label": "declares",
    "to": 142
  }, {
    "from": 559,
    "label": "declares",
    "to": 144
  }, {
    "from": 559,
    "label": "declares",
    "to": 154
  }, {
    "from": 559,
    "label": "declares",
    "to": 156
  }, {
    "from": 559,
    "label": "declares",
    "to": 176
  }, {
    "from": 559,
    "label": "declares",
    "to": 178
  }, {
    "from": 559,
    "label": "declares",
    "to": 186
  }, {
    "from": 559,
    "label": "declares",
    "to": 196
  }, {
    "from": 559,
    "label": "declares",
    "to": 210
  }, {
    "from": 559,
    "label": "declares",
    "to": 218
  }, {
    "from": 559,
    "label": "declares",
    "to": 237
  }, {
    "from": 559,
    "label": "declares",
    "to": 239
  }, {
    "from": 559,
    "label": "declares",
    "to": 241
  }, {
    "from": 559,
    "label": "declares",
    "to": 243
  }, {
    "from": 559,
    "label": "declares",
    "to": 246
  }, {
    "from": 559,
    "label": "declares",
    "to": 249
  }, {
    "from": 559,
    "label": "declares",
    "to": 252
  }, {
    "from": 559,
    "label": "declares",
    "to": 315
  }, {
    "from": 559,
    "label": "declares",
    "to": 317
  }, {
    "from": 559,
    "label": "declares",
    "to": 319
  }, {
    "from": 559,
    "label": "declares",
    "to": 321
  }, {
    "from": 559,
    "label": "declares",
    "to": 323
  }, {
    "from": 559,
    "label": "declares",
    "to": 338
  }, {
    "from": 559,
    "label": "declares",
    "to": 340
  }, {
    "from": 559,
    "label": "declares",
    "to": 342
  }, {
    "from": 559,
    "label": "declares",
    "to": 464
  }, {
    "from": 559,
    "label": "declares",
    "to": 466
  }, {
    "from": 559,
    "label": "declares",
    "to": 504
  }, {
    "from": 559,
    "label": "declares",
    "to": 506
  }, {
    "from": 559,
    "label": "declares",
    "to": 508
  }, {
    "from": 559,
    "label": "declares",
    "to": 510
  }, {
    "from": 559,
    "label": "declares",
    "to": 512
  }, {
    "from": 559,
    "label": "declares",
    "to": 514
  }, {
    "from": 559,
    "label": "declares",
    "to": 516
  }, {
    "from": 559,
    "label": "declares",
    "to": 536
  }, {
    "from": 559,
    "label": "declares",
    "to": 537
  }, {
    "from": 559,
    "label": "declares",
    "to": 538
  }, {
    "from": 559,
    "label": "declares",
    "to": 540
  }, {
    "from": 559,
    "label": "declares",
    "to": 543
  }, {
    "from": 559,
    "label": "declares",
    "to": 557
  }, {
    "from": 1,
    "label": "contains",
    "to": 604
  }, {
    "from": 1,
    "label": "contains",
    "to": 605
  }, {
    "from": 604,
    "label": "initializes",
    "to": 606
  }, {
    "from": 606,
    "label": "assigns",
    "to": 607
  }, {
    "from": 604,
    "label": "initializes",
    "to": 608
  }, {
    "from": 608,
    "label": "assigns",
    "to": 609
  }, {
    "from": 604,
    "label": "initializes",
    "to": 610
  }, {
    "from": 610,
    "label": "assigns",
    "to": 611
  }, {
    "from": 604,
    "label": "initializes",
    "to": 612
  }, {
    "from": 612,
    "label": "assigns",
    "to": 613
  }, {
    "from": 604,
    "label": "initializes",
    "to": 614
  }, {
    "from": 614,
    "label": "assigns",
    "to": 615
  }, {
    "from": 604,
    "label": "initializes",
    "to": 616
  }, {
    "from": 616,
    "label": "assigns",
    "to": 617
  }, {
    "from": 604,
    "label": "initializes",
    "to": 618
  }, {
    "from": 604,
    "label": "initializes",
    "to": 619
  }, {
    "from": 604,
    "label": "initializes",
    "to": 620
  }, {
    "from": 604,
    "label": "initializes",
    "to": 621
  }, {
    "from": 621,
    "label": "assigns",
    "to": 622
  }, {
    "from": 604,
    "label": "initializes",
    "to": 623
  }, {
    "from": 623,
    "label": "assigns",
    "to": 624
  }, {
    "from": 604,
    "label": "initializes",
    "to": 625
  }, {
    "from": 604,
    "label": "initializes",
    "to": 626
  }, {
    "from": 626,
    "label": "assigns",
    "to": 627
  }, {
    "from": 604,
    "label": "initializes",
    "to": 628
  }, {
    "from": 604,
    "label": "initializes",
    "to": 629
  }, {
    "from": 629,
    "label": "assigns",
    "to": 630
  }, {
    "from": 604,
    "label": "initializes",
    "to": 631
  }, {
    "from": 604,
    "label": "initializes",
    "to": 632
  }, {
    "from": 605,
    "label": "initializes",
    "to": 600
  }, {
    "from": 623,
    "label": "contains",
    "to": 48
  }, {
    "from": 623,
    "label": "contains",
    "to": 54
  }, {
    "from": 601,
    "label": "contains",
    "to": 237
  }, {
    "from": 601,
    "label": "contains",
    "to": 239
  }, {
    "from": 601,
    "label": "contains",
    "to": 241
  }, {
    "from": 601,
    "label": "contains",
    "to": 315
  }, {
    "from": 601,
    "label": "contains",
    "to": 317
  }, {
    "from": 601,
    "label": "contains",
    "to": 319
  }, {
    "from": 601,
    "label": "contains",
    "to": 321
  }, {
    "from": 601,
    "label": "contains",
    "to": 464
  }, {
    "from": 602,
    "label": "contains",
    "to": 537
  }, {
    "from": 603,
    "label": "contains",
    "to": 537
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "luacom_tests5",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function file_exists(path)\r\n  local fh = io.open(path)\r\n  if fh then\r\n    fh:close()\r\n\treturn true\r\n  end\r\n  return false\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local fh = io.open(path)",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "if fh then\r\n    fh:close()\r\n\treturn true\r\n  end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "fh:close()",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function Test:ShowDialog()\r\n  print(\"ShowDialog called\")\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "print(\"ShowDialog called\")",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function Test:prop2(p1, p2, value)\r\n  if Events then\r\n    Events:evt1(value)\r\n    Events:evt2()\r\n  else\r\n    print \"WARNING: Events test disabled\"; skipped=true\r\n  end\r\n  if value then\r\n    Test.prop2_value = p1*p2*value\r\n  else\r\n    return Test.prop2_value/(p1*p2)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "if Events then\r\n    Events:evt1(value)\r\n    Events:evt2()\r\n  else\r\n    print \"WARNING: Events test disabled\"; skipped=true\r\n  end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "Events:evt1(value)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "Events:evt2()",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "print \"WARNING: Events test disabled\"",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "skipped=true",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "if value then\r\n    Test.prop2_value = p1*p2*value\r\n  else\r\n    return Test.prop2_value/(p1*p2)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "Test.prop2_value = p1*p2*value",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "local function impl_interface(t, ...)\r\n  if SKIP_REGISTER then\r\n    return luacom.ImplInterfaceFromTypelib(t, tlb_path, ...)\r\n  else\r\n    return luacom.ImplInterface(t, \"LUACOM.Test\", ...)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "if SKIP_REGISTER then\r\n    return luacom.ImplInterfaceFromTypelib(t, tlb_path, ...)\r\n  else\r\n    return luacom.ImplInterface(t, \"LUACOM.Test\", ...)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "local function init()\r\n  local reginfo = {}  \r\n  reginfo.VersionIndependentProgID = \"LUACOM.Test\"\r\n  reginfo.ProgID = reginfo.VersionIndependentProgID..\".1\"\r\n  reginfo.TypeLib = tlb_path\r\n  reginfo.CoClass = \"Test\"\r\n  reginfo.ComponentName = \"LuaCOM-Test\"\r\n  reginfo.Arguments = \"/Automation\"\r\n  \r\n  local res = luacom.RegisterObject(reginfo)\r\n  assert(res)\r\n\r\n  if SKIP_REGISTER then\r\n    _obj = impl_interface(Test, \"ITest\", \"Test\")\r\n    Events = nil\r\n  else\r\n    -- creates and exposes COM proxy application object\r\n    local COMtestobj\r\n    COMtestobj, Events = luacom.NewObject(Test, \"LUACOM.Test\")\r\n    assert(COMtestobj)\r\n    assert(Events)\r\n   \r\n    Cookie = luacom.ExposeObject(COMtestobj)\r\n    assert(Cookie)\r\n  \r\n    _obj = luacom.CreateObject(\"LUACOM.Test\")\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "local reginfo = {}",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "reginfo.VersionIndependentProgID = \"LUACOM.Test\"",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "reginfo.ProgID = reginfo.VersionIndependentProgID..\".1\"",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "reginfo.TypeLib = tlb_path",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "reginfo.CoClass = \"Test\"",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "reginfo.ComponentName = \"LuaCOM-Test\"",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "reginfo.Arguments = \"/Automation\"",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "local res = luacom.RegisterObject(reginfo)",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "assert(res)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "if SKIP_REGISTER then\r\n    _obj = impl_interface(Test, \"ITest\", \"Test\")\r\n    Events = nil\r\n  else\r\n    -- creates and exposes COM proxy application object\r\n    local COMtestobj\r\n    COMtestobj, Events = luacom.NewObject(Test, \"LUACOM.Test\")\r\n    assert(COMtestobj)\r\n    assert(Events)\r\n   \r\n    Cookie = luacom.ExposeObject(COMtestobj)\r\n    assert(Cookie)\r\n  \r\n    _obj = luacom.CreateObject(\"LUACOM.Test\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "_obj = impl_interface(Test, \"ITest\", \"Test\")",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "Events = nil",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "local COMtestobj",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "COMtestobj, Events = luacom.NewObject(Test, \"LUACOM.Test\")",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "assert(COMtestobj)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "assert(Events)",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "Cookie = luacom.ExposeObject(COMtestobj)",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "assert(Cookie)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "_obj = luacom.CreateObject(\"LUACOM.Test\")",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "local function finish()\r\n  if not SKIP_REGISTER then\r\n    luacom.RevokeObject(Cookie)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "if not SKIP_REGISTER then\r\n    luacom.RevokeObject(Cookie)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "luacom.RevokeObject(Cookie)",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function tuple.__eq(a,b)\r\n  if getmetatable(a) ~= tuple or getmetatable(b) ~= tuple then\r\n    return false\r\n  end\r\n  if a.n ~= b.n then\r\n    return false\r\n  end\r\n  for i=1,a.n do\r\n    if a[i] ~= b[i] then\r\n      return false\r\n    end\r\n  end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "if getmetatable(a) ~= tuple or getmetatable(b) ~= tuple then\r\n    return false\r\n  end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "if a.n ~= b.n then\r\n    return false\r\n  end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "for i=1,a.n do\r\n    if a[i] ~= b[i] then\r\n      return false\r\n    end\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 52,
    "text": "if a[i] ~= b[i] then\r\n      return false\r\n    end",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "function tuple.__tostring(a)\r\n  local ts = {}\r\n  for i=1,a.n do\r\n    ts[i] = tostring(a[i])\r\n  end\r\n  return 'tuple(' .. table.concat(ts, ',') .. ')'\r\nend",
    "type": "function"
  }, {
    "id": 55,
    "text": "local ts = {}",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "for i=1,a.n do\r\n    ts[i] = tostring(a[i])\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 57,
    "text": "ts[i] = tostring(a[i])",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "local function asserteq(a, b)\r\n  if a ~= b then\r\n    error('FAIL: ' .. tostring(a) .. ' = ' .. tostring(b), 2)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "if a ~= b then\r\n    error('FAIL: ' .. tostring(a) .. ' = ' .. tostring(b), 2)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "error('FAIL: ' .. tostring(a) .. ' = ' .. tostring(b), 2)",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "local function table2string(table)\r\n  if type(table) ~= \"table\" then\r\n    return tostring(table)\r\n  end\r\n\r\n  local i, v = next(table, nil)\r\n  local s = \"{\"\r\n  local first = 1\r\n  for i,v in pairs(table) do\r\n    if first ~= 1 then\r\n      s = s..\", \"            \r\n    else\r\n      first = 0\r\n    end\r\n    s = s..table2string(v)\r\n  end\r\n  s = s..\"}\"\r\n\r\n  return s\r\nend",
    "type": "function"
  }, {
    "id": 64,
    "text": "if type(table) ~= \"table\" then\r\n    return tostring(table)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "local i, v = next(table, nil)",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "local s = \"{\"",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "local first = 1",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "for i,v in pairs(table) do\r\n    if first ~= 1 then\r\n      s = s..\", \"            \r\n    else\r\n      first = 0\r\n    end\r\n    s = s..table2string(v)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 69,
    "text": "if first ~= 1 then\r\n      s = s..\", \"            \r\n    else\r\n      first = 0\r\n    end",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "s = s..\", \"",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "first = 0",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "s = s..table2string(v)",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "s = s..\"}\"",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 75,
    "text": "local function number_test(start)\r\n  number_test_n = number_test_n or 0\r\n\r\n  if type(start) == \"number\" then\r\n    number_test_n = start\r\n  else\r\n    number_test_n = number_test_n + 1\r\n  end\r\n\r\n  print(\"Test \" .. number_test_n ..\r\n        (type(start) == \"string\" and \": \"..start or \"\"))\r\nend",
    "type": "function"
  }, {
    "id": 76,
    "text": "number_test_n = number_test_n or 0",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "if type(start) == \"number\" then\r\n    number_test_n = start\r\n  else\r\n    number_test_n = number_test_n + 1\r\n  end",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "number_test_n = start",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "number_test_n = number_test_n + 1",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "print(\"Test \" .. number_test_n ..\r\n        (type(start) == \"string\" and \": \"..start or \"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "local function test_wrong_parameters()\r\n  print(\"\\n=======> test_wrong_parameters\")\r\n\r\n  nt(1)\r\n  local res = pcall(luacom.CreateObject,{table = \"aa\"})\r\n  assert(res == false)\r\n\r\n  nt()\r\n  local res = pcall(luacom.CreateObject)\r\n  assert(res == false)\r\n\r\n  nt()\r\n  local res = pcall(luacom.ImplInterface)\r\n  assert(res == false)\r\n\r\n  nt()\r\n  local d, obj = pcall(luacom.ImplInterface,{}, \"blablabla\", \"blablabla\")\r\n  assert(obj == nil)\r\n\r\n  nt()\r\n  local d, obj = pcall(luacom.ImplInterface, {}, \"InetCtls.Inet\", \"blablabla\")\r\n  assert(obj == nil)\r\n\r\n  -- ProgID's inexistentes\r\n  nt()\r\n  local obj = luacom.CreateObject(\"blablabla\")\r\n  assert(obj == nil)\r\n\r\n  nt()\r\n  local obj = luacom.CreateObject(1)\r\n  assert(obj == nil)\r\n\r\nend",
    "type": "function"
  }, {
    "id": 83,
    "text": "print(\"\\n=======> test_wrong_parameters\")",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "nt(1)",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "local res = pcall(luacom.CreateObject,{table = \"aa\"})",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "assert(res == false)",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "nt()",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "local res = pcall(luacom.CreateObject)",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "local res = pcall(luacom.ImplInterface)",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "local d, obj = pcall(luacom.ImplInterface,{}, \"blablabla\", \"blablabla\")",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "assert(obj == nil)",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "local d, obj = pcall(luacom.ImplInterface, {}, \"InetCtls.Inet\", \"blablabla\")",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "local obj = luacom.CreateObject(\"blablabla\")",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "local obj = luacom.CreateObject(1)",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "local function test_simple()\r\n  print(\"\\n=======> test_simple\")\r\n\r\n  nt(1)\r\n  assert(type(_obj.Children) == \"function\")\r\n\r\n  nt()\r\n  assert(type(_obj.prop1) == \"number\")\r\n\r\n  nt()\r\n  _obj.prop1 = 2\r\n  assert(_obj.prop1 == 2)\r\n\r\n  nt()\r\n  local t = {}\r\n  t.TestArray1 = function(self, array)\r\n    assert(table2string(array) == table2string({\"1\",\"2\"}))\r\n  end\r\n\r\n  local obj = impl_interface(t, \"IDataConversionTest\")\r\n  assert(obj)\r\n\r\n  obj:TestArray1({1,2})\r\nend",
    "type": "function"
  }, {
    "id": 97,
    "text": "print(\"\\n=======> test_simple\")",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "assert(type(_obj.Children) == \"function\")",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "assert(type(_obj.prop1) == \"number\")",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "_obj.prop1 = 2",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "assert(_obj.prop1 == 2)",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 103,
    "text": "t.TestArray1 = function(self, array)\r\n    assert(table2string(array) == table2string({\"1\",\"2\"}))\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 104,
    "text": "assert(table2string(array) == table2string({\"1\",\"2\"}))",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "local obj = impl_interface(t, \"IDataConversionTest\")",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "assert(obj)",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "obj:TestArray1({1,2})",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 109,
    "text": "function(self, array)\r\n    assert(table2string(array) == table2string({\"1\",\"2\"}))\r\n  end",
    "type": "function"
  }, {
    "id": 110,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 111,
    "text": "local function test_iface_implementation()\r\n  print(\"\\n=======> test_iface_implementation\")\r\n  \r\n  nt(1)\r\n\r\n  local iface_ok = 0\r\n  local iface = {}\r\n  iface.evt1 = function(self)\r\n    iface_ok = iface_ok + 1\r\n  end\r\n\r\n  iface.TestManyParams = function(\r\n    self,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14,p15\r\n  )\r\n    assert(p1 == 1)\r\n    assert(p2 == 2)\r\n    assert(p3 == 3)\r\n    assert(p4 == 4)\r\n    assert(p5 == 5)\r\n    assert(p6 == 6)\r\n    assert(p7 == 7)\r\n    assert(p8 == 8)\r\n    assert(p9 == 9)\r\n    assert(p10 == 10)\r\n    assert(p11 == 11)\r\n    assert(p12 == 12)\r\n    assert(p13 == 13)\r\n    assert(p14 == 14)\r\n    assert(p15 == 15)\r\n  end\r\n\r\n  local obj = impl_interface(iface, \"ITestEvents\")\r\n  assert(obj)\r\n\r\n  nt()\r\n  obj:evt1()\r\n  assert(iface_ok == 1) \r\n\r\n  nt()\r\n  obj:TestManyParams(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)\r\n  obj = nil\r\n\r\n  collectgarbage()\r\nend",
    "type": "function"
  }, {
    "id": 112,
    "text": "print(\"\\n=======> test_iface_implementation\")",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "local iface_ok = 0",
    "type": "statement:localassign"
  }, {
    "id": 114,
    "text": "local iface = {}",
    "type": "statement:localassign"
  }, {
    "id": 115,
    "text": "iface.evt1 = function(self)\r\n    iface_ok = iface_ok + 1\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 116,
    "text": "iface_ok = iface_ok + 1",
    "type": "statement:assign"
  }, {
    "id": 117,
    "text": "iface.TestManyParams = function(\r\n    self,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14,p15\r\n  )\r\n    assert(p1 == 1)\r\n    assert(p2 == 2)\r\n    assert(p3 == 3)\r\n    assert(p4 == 4)\r\n    assert(p5 == 5)\r\n    assert(p6 == 6)\r\n    assert(p7 == 7)\r\n    assert(p8 == 8)\r\n    assert(p9 == 9)\r\n    assert(p10 == 10)\r\n    assert(p11 == 11)\r\n    assert(p12 == 12)\r\n    assert(p13 == 13)\r\n    assert(p14 == 14)\r\n    assert(p15 == 15)\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 118,
    "text": "assert(p1 == 1)",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "assert(p2 == 2)",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "assert(p3 == 3)",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "assert(p4 == 4)",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "assert(p5 == 5)",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "assert(p6 == 6)",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "assert(p7 == 7)",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "assert(p8 == 8)",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "assert(p9 == 9)",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "assert(p10 == 10)",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "assert(p11 == 11)",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "assert(p12 == 12)",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "assert(p13 == 13)",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "assert(p14 == 14)",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "assert(p15 == 15)",
    "type": "statement:functioncall"
  }, {
    "id": 133,
    "text": "local obj = impl_interface(iface, \"ITestEvents\")",
    "type": "statement:localassign"
  }, {
    "id": 134,
    "text": "obj:evt1()",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "assert(iface_ok == 1)",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "obj:TestManyParams(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "obj = nil",
    "type": "statement:assign"
  }, {
    "id": 138,
    "text": "collectgarbage()",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 140,
    "text": "function(self)\r\n    iface_ok = iface_ok + 1\r\n  end",
    "type": "function"
  }, {
    "id": 141,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 142,
    "text": "function(\r\n    self,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14,p15\r\n  )\r\n    assert(p1 == 1)\r\n    assert(p2 == 2)\r\n    assert(p3 == 3)\r\n    assert(p4 == 4)\r\n    assert(p5 == 5)\r\n    assert(p6 == 6)\r\n    assert(p7 == 7)\r\n    assert(p8 == 8)\r\n    assert(p9 == 9)\r\n    assert(p10 == 10)\r\n    assert(p11 == 11)\r\n    assert(p12 == 12)\r\n    assert(p13 == 13)\r\n    assert(p14 == 14)\r\n    assert(p15 == 15)\r\n  end",
    "type": "function"
  }, {
    "id": 143,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 144,
    "text": "local function test_stress()\r\n  print(\"\\n=======> test_stress\")\r\n\r\n  nt(1)\r\n\r\n  local iface = {}\r\n  local iface_ok\r\n  iface.BeforeNavigate = function (self)\r\n    iface_ok = iface_ok + 1\r\n  end\r\n\r\n  local obj = luacom.ImplInterface(\r\n      iface, \"InternetExplorer.Application\", \"DWebBrowserEvents\")\r\n  assert(obj)\r\n\r\n  iface_ok = 1\r\n  for i=1,100000 do\r\n    obj:BeforeNavigate()\r\n  end\r\n\r\n  nt()\r\n  assert(i == iface_ok)\r\n  obj = nil\r\n  collectgarbage()\r\nend",
    "type": "function"
  }, {
    "id": 145,
    "text": "print(\"\\n=======> test_stress\")",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "local iface_ok",
    "type": "statement:localassign"
  }, {
    "id": 147,
    "text": "iface.BeforeNavigate = function (self)\r\n    iface_ok = iface_ok + 1\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 148,
    "text": "local obj = luacom.ImplInterface(\r\n      iface, \"InternetExplorer.Application\", \"DWebBrowserEvents\")",
    "type": "statement:localassign"
  }, {
    "id": 149,
    "text": "iface_ok = 1",
    "type": "statement:assign"
  }, {
    "id": 150,
    "text": "for i=1,100000 do\r\n    obj:BeforeNavigate()\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 151,
    "text": "obj:BeforeNavigate()",
    "type": "statement:functioncall"
  }, {
    "id": 152,
    "text": "assert(i == iface_ok)",
    "type": "statement:functioncall"
  }, {
    "id": 153,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 154,
    "text": "function (self)\r\n    iface_ok = iface_ok + 1\r\n  end",
    "type": "function"
  }, {
    "id": 155,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 156,
    "text": "local function test_connection_points()\r\n  print(\"\\n=======> test_connection_points\")\r\n\r\n  if not Events then\r\n    print \"WARNING: Events tests disabled\"; skipped = true\r\n    return\r\n  end\r\n\r\n  nt(1)\r\n\r\n  nt()\r\n  local events = {}\r\n  local events_ok = nil\r\n  events.evt2 = function(self)\r\n    events_ok = 1\r\n  end\r\n\r\n  local evt = impl_interface(events, \"ITestEvents\")\r\n  assert(evt)\r\n\r\n  nt()\r\n  luacom.addConnection(_obj, evt)\r\n\r\n  nt()\r\n  _obj.setprop2(1,1,2) \r\n  assert(events_ok)\r\n\r\n  nt()\r\n  luacom.releaseConnection(_obj)\r\n  events_ok = nil\r\n\r\n  nt()\r\n  luacom.Connect(_obj, events)\r\n\r\n  nt()\r\n  _obj.setprop2(2,2,3)\r\n  assert(events_ok)\r\n\r\n  nt()\r\n  luacom.releaseConnection(_obj)\r\n\r\n  events = nil\r\n  collectgarbage()\r\nend",
    "type": "function"
  }, {
    "id": 157,
    "text": "print(\"\\n=======> test_connection_points\")",
    "type": "statement:functioncall"
  }, {
    "id": 158,
    "text": "if not Events then\r\n    print \"WARNING: Events tests disabled\"; skipped = true\r\n    return\r\n  end",
    "type": "statement:if"
  }, {
    "id": 159,
    "text": "print \"WARNING: Events tests disabled\"",
    "type": "statement:functioncall"
  }, {
    "id": 160,
    "text": "skipped = true",
    "type": "statement:assign"
  }, {
    "id": 161,
    "text": "local events = {}",
    "type": "statement:localassign"
  }, {
    "id": 162,
    "text": "local events_ok = nil",
    "type": "statement:localassign"
  }, {
    "id": 163,
    "text": "events.evt2 = function(self)\r\n    events_ok = 1\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 164,
    "text": "events_ok = 1",
    "type": "statement:assign"
  }, {
    "id": 165,
    "text": "local evt = impl_interface(events, \"ITestEvents\")",
    "type": "statement:localassign"
  }, {
    "id": 166,
    "text": "assert(evt)",
    "type": "statement:functioncall"
  }, {
    "id": 167,
    "text": "luacom.addConnection(_obj, evt)",
    "type": "statement:functioncall"
  }, {
    "id": 168,
    "text": "_obj.setprop2(1,1,2)",
    "type": "statement:functioncall"
  }, {
    "id": 169,
    "text": "assert(events_ok)",
    "type": "statement:functioncall"
  }, {
    "id": 170,
    "text": "luacom.releaseConnection(_obj)",
    "type": "statement:functioncall"
  }, {
    "id": 171,
    "text": "events_ok = nil",
    "type": "statement:assign"
  }, {
    "id": 172,
    "text": "luacom.Connect(_obj, events)",
    "type": "statement:functioncall"
  }, {
    "id": 173,
    "text": "_obj.setprop2(2,2,3)",
    "type": "statement:functioncall"
  }, {
    "id": 174,
    "text": "events = nil",
    "type": "statement:assign"
  }, {
    "id": 175,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 176,
    "text": "function(self)\r\n    events_ok = 1\r\n  end",
    "type": "function"
  }, {
    "id": 177,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 178,
    "text": "local function test_propget()\r\n  print(\"\\n=======> test_propget\")\r\n\r\n  nt(1)\r\n  local iface = {}\r\n  iface.Value = 1\r\n  local evt = luacom.ImplInterface(iface, \"MsComCtlLib.Slider\", \"ISlider\")\r\n  if evt then\r\n    assert(evt)\r\n    assert(evt.Value == iface.Value)\r\n  else\r\n    print 'WARNING: MsComCtlLib.Slider test disabled.'\r\n  end\r\n\r\n  --nt()\r\n  --local obj = luacom.CreateObject(\"COMCTL.TabStrip.1\")\r\n  --t = obj.Tabs\r\nend",
    "type": "function"
  }, {
    "id": 179,
    "text": "print(\"\\n=======> test_propget\")",
    "type": "statement:functioncall"
  }, {
    "id": 180,
    "text": "iface.Value = 1",
    "type": "statement:assign"
  }, {
    "id": 181,
    "text": "local evt = luacom.ImplInterface(iface, \"MsComCtlLib.Slider\", \"ISlider\")",
    "type": "statement:localassign"
  }, {
    "id": 182,
    "text": "if evt then\r\n    assert(evt)\r\n    assert(evt.Value == iface.Value)\r\n  else\r\n    print 'WARNING: MsComCtlLib.Slider test disabled.'\r\n  end",
    "type": "statement:if"
  }, {
    "id": 183,
    "text": "assert(evt.Value == iface.Value)",
    "type": "statement:functioncall"
  }, {
    "id": 184,
    "text": "print 'WARNING: MsComCtlLib.Slider test disabled.'",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 186,
    "text": "local function test_propput()\r\n  print(\"\\n=======> test_propput\")\r\n\r\n  nt(1) -- propput simples\r\n  assert(_obj)\r\n  -- Propput normal\r\n  _obj.prop1 = 1\r\n  assert(_obj.prop1 == 1)\r\n\r\n  nt() -- propput parametrizado\r\n  _obj:setprop2(2,3,1.1)\r\n  assert(_obj:prop2(2,3) == 1.1)\r\n\r\n  nt()\r\n  _obj:setprop2(2, 1, \"1\")\r\n  assert(tonumber(_obj:getprop2(2, 1, \"1\")) == 1)\r\nend",
    "type": "function"
  }, {
    "id": 187,
    "text": "print(\"\\n=======> test_propput\")",
    "type": "statement:functioncall"
  }, {
    "id": 188,
    "text": "assert(_obj)",
    "type": "statement:functioncall"
  }, {
    "id": 189,
    "text": "_obj.prop1 = 1",
    "type": "statement:assign"
  }, {
    "id": 190,
    "text": "assert(_obj.prop1 == 1)",
    "type": "statement:functioncall"
  }, {
    "id": 191,
    "text": "_obj:setprop2(2,3,1.1)",
    "type": "statement:functioncall"
  }, {
    "id": 192,
    "text": "assert(_obj:prop2(2,3) == 1.1)",
    "type": "statement:functioncall"
  }, {
    "id": 193,
    "text": "_obj:setprop2(2, 1, \"1\")",
    "type": "statement:functioncall"
  }, {
    "id": 194,
    "text": "assert(tonumber(_obj:getprop2(2, 1, \"1\")) == 1)",
    "type": "statement:functioncall"
  }, {
    "id": 195,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 196,
    "text": "local function test_index_fb()\r\n  print(\"\\n=======> test_index_fb\")\r\n\r\n  nt(1)\r\n  local tm = getmetatable(_obj)[\"__index\"]\r\n  assert(tm)\r\n\r\n  nt()\r\n  local res = pcall(tm, nil,nil)\r\n  assert(res == false)\r\n\r\n  nt()\r\n  local res = pcall(tm, {}, nil)\r\n  assert(res == false)\r\n\r\n  nt()\r\n  local res = pcall(tm, {}, \"test\")\r\n  assert(res == false)\r\n\r\n  nt()\r\n  local d, res = pcall(tm, _obj, nil)\r\n  assert(res == nil)\r\n\r\n  nt()\r\n  local f = tm(_obj, \"blublublabla\")\r\n  assert(f == nil)\r\n\r\n  nt()\r\n  local f = tm(_obj, \"HideDialog\")\r\n  assert(type(f) == \"function\")\r\nend",
    "type": "function"
  }, {
    "id": 197,
    "text": "print(\"\\n=======> test_index_fb\")",
    "type": "statement:functioncall"
  }, {
    "id": 198,
    "text": "local tm = getmetatable(_obj)[\"__index\"]",
    "type": "statement:localassign"
  }, {
    "id": 199,
    "text": "assert(tm)",
    "type": "statement:functioncall"
  }, {
    "id": 200,
    "text": "local res = pcall(tm, nil,nil)",
    "type": "statement:localassign"
  }, {
    "id": 201,
    "text": "local res = pcall(tm, {}, nil)",
    "type": "statement:localassign"
  }, {
    "id": 202,
    "text": "local res = pcall(tm, {}, \"test\")",
    "type": "statement:localassign"
  }, {
    "id": 203,
    "text": "local d, res = pcall(tm, _obj, nil)",
    "type": "statement:localassign"
  }, {
    "id": 204,
    "text": "assert(res == nil)",
    "type": "statement:functioncall"
  }, {
    "id": 205,
    "text": "local f = tm(_obj, \"blublublabla\")",
    "type": "statement:localassign"
  }, {
    "id": 206,
    "text": "assert(f == nil)",
    "type": "statement:functioncall"
  }, {
    "id": 207,
    "text": "local f = tm(_obj, \"HideDialog\")",
    "type": "statement:localassign"
  }, {
    "id": 208,
    "text": "assert(type(f) == \"function\")",
    "type": "statement:functioncall"
  }, {
    "id": 209,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 210,
    "text": "local function test_method_call_without_self()\r\n  print(\"\\n=======> test_method_call_without_self\")\r\n\r\n  nt(1)\r\n  _obj:ShowDialog()\r\n\r\n  nt()\r\n  _obj.ShowDialog(_obj)\r\n\r\n  nt()\r\n  _obj.ShowDialog({})\r\n\r\n  nt()\r\n  local res = pcall(_obj.ShowDialog, 1)\r\n  assert(res)\r\n\r\n  nt()\r\n  res = pcall(_obj.ShowDialog)\r\n  assert(res == false)\r\nend",
    "type": "function"
  }, {
    "id": 211,
    "text": "print(\"\\n=======> test_method_call_without_self\")",
    "type": "statement:functioncall"
  }, {
    "id": 212,
    "text": "_obj:ShowDialog()",
    "type": "statement:functioncall"
  }, {
    "id": 213,
    "text": "_obj.ShowDialog(_obj)",
    "type": "statement:functioncall"
  }, {
    "id": 214,
    "text": "_obj.ShowDialog({})",
    "type": "statement:functioncall"
  }, {
    "id": 215,
    "text": "local res = pcall(_obj.ShowDialog, 1)",
    "type": "statement:localassign"
  }, {
    "id": 216,
    "text": "res = pcall(_obj.ShowDialog)",
    "type": "statement:assign"
  }, {
    "id": 217,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 218,
    "text": "local function test_optional_params()\r\n  nt(1)\r\n\r\n  local teste = {}\r\n  local obj = luacom.ImplInterfaceFromTypelib(teste, tlb_path, \"ITest1\" )\r\n  assert(obj)\r\n\r\n  nt('[in, optional]')\r\n  -- short test_optional(\r\n  --   short p1, [optional] VARIANT p2, [optional] VARIANT p3)\r\n  teste.test_optional = function(self, ...)\r\n    --FIX: asserteq(tuple(...), tuple(3,4,5))\r\n    return 6,7,8,9\r\n  end\r\n  -- print(tuple(obj:test_optional(3,4,5)))\r\n  asserteq(tuple(obj:test_optional(3,4,5)), tuple(6))\r\n\r\n  nt('[out, optional]')\r\n  teste.test_out_optional = function(self, ...)\r\n    asserteq(tuple(...), tuple(3))\r\n    return 5,6,7,8\r\n  end\r\n  --print(tuple(obj:test_out_optional(3,4,5)))\r\n  asserteq(tuple(obj:test_out_optional(3,4,5)), tuple(5,6,7))\r\n\r\n  nt('[in, out, optional]')\r\n  -- short test_in_out_optional(\r\n  --   short p1, [in, out, optional] VARIANT* p2,\r\n  --             [in, out, optional] VARIANT* p3)\r\n  local par\r\n  teste.test_in_out_optional = function(self, ...)\r\n    asserteq(tuple(...), par)\r\n    return 6,7,8,9\r\n  end\r\n  par = tuple(3,4,5)\r\n  asserteq(tuple(obj:test_in_out_optional(3,4,5)), tuple(6,7,8))\r\n  par = tuple(3,nil,nil)\r\n  asserteq(tuple(obj:test_in_out_optional(3)), tuple(6,7,8))\r\n\r\nend",
    "type": "function"
  }, {
    "id": 219,
    "text": "local teste = {}",
    "type": "statement:localassign"
  }, {
    "id": 220,
    "text": "local obj = luacom.ImplInterfaceFromTypelib(teste, tlb_path, \"ITest1\" )",
    "type": "statement:localassign"
  }, {
    "id": 221,
    "text": "nt('[in, optional]')",
    "type": "statement:functioncall"
  }, {
    "id": 222,
    "text": "teste.test_optional = function(self, ...)\r\n    --FIX: asserteq(tuple(...), tuple(3,4,5))\r\n    return 6,7,8,9\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 223,
    "text": "asserteq(tuple(obj:test_optional(3,4,5)), tuple(6))",
    "type": "statement:functioncall"
  }, {
    "id": 224,
    "text": "nt('[out, optional]')",
    "type": "statement:functioncall"
  }, {
    "id": 225,
    "text": "teste.test_out_optional = function(self, ...)\r\n    asserteq(tuple(...), tuple(3))\r\n    return 5,6,7,8\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 226,
    "text": "asserteq(tuple(...), tuple(3))",
    "type": "statement:functioncall"
  }, {
    "id": 227,
    "text": "asserteq(tuple(obj:test_out_optional(3,4,5)), tuple(5,6,7))",
    "type": "statement:functioncall"
  }, {
    "id": 228,
    "text": "nt('[in, out, optional]')",
    "type": "statement:functioncall"
  }, {
    "id": 229,
    "text": "local par",
    "type": "statement:localassign"
  }, {
    "id": 230,
    "text": "teste.test_in_out_optional = function(self, ...)\r\n    asserteq(tuple(...), par)\r\n    return 6,7,8,9\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 231,
    "text": "asserteq(tuple(...), par)",
    "type": "statement:functioncall"
  }, {
    "id": 232,
    "text": "par = tuple(3,4,5)",
    "type": "statement:assign"
  }, {
    "id": 233,
    "text": "asserteq(tuple(obj:test_in_out_optional(3,4,5)), tuple(6,7,8))",
    "type": "statement:functioncall"
  }, {
    "id": 234,
    "text": "par = tuple(3,nil,nil)",
    "type": "statement:assign"
  }, {
    "id": 235,
    "text": "asserteq(tuple(obj:test_in_out_optional(3)), tuple(6,7,8))",
    "type": "statement:functioncall"
  }, {
    "id": 236,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 237,
    "text": "function(self, ...)\r\n    --FIX: asserteq(tuple(...), tuple(3,4,5))\r\n    return 6,7,8,9\r\n  end",
    "type": "function"
  }, {
    "id": 238,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 239,
    "text": "function(self, ...)\r\n    asserteq(tuple(...), tuple(3))\r\n    return 5,6,7,8\r\n  end",
    "type": "function"
  }, {
    "id": 240,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 241,
    "text": "function(self, ...)\r\n    asserteq(tuple(...), par)\r\n    return 6,7,8,9\r\n  end",
    "type": "function"
  }, {
    "id": 242,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 243,
    "text": "local function test_in_params()\r\n  print(\"\\n=======> test_in_params\")\r\n\r\n--[[FIX?\r\n  local obj = luacom.CreateObject(teste_progid)\r\n  assert(obj)\r\n\r\n  -- Testa ordem dos parametros\r\n\r\n  local res = obj:TestParam1(1,2,3)\r\n  assert(res == 1)\r\n\r\n  local res = obj:TestParam2(1,2,3)\r\n  assert(res == 2)\r\n\r\n  local res = obj:TestParam3(1,2,3)\r\n  assert(res == 3)\r\n--]]\r\nend",
    "type": "function"
  }, {
    "id": 244,
    "text": "print(\"\\n=======> test_in_params\")",
    "type": "statement:functioncall"
  }, {
    "id": 245,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 246,
    "text": "local function test_inout_params()\r\n  print(\"\\n=======> test_inout_params\")\r\n\r\n--[[DISABLED:\r\n  local iupobj = iupolecontrol{progid = \"TESTECTL.TesteCtrl.1\"}\r\n  assert(iupobj)\r\n\r\n  local obj = iupobj.LUACOM\r\n\r\n  nt(1)\r\n  local res = pcall(obj.TestInOutshort, obj, 10)\r\n  assert(res ~= nil)\r\n  assert(res[1] == 20)\r\n\r\n  nt()\r\n  local res = pcall(obj.TestInOutfloat, obj,2.5)\r\n  assert(res ~= nil)\r\n  assert(res[1] == 5)\r\n\r\n  nt()\r\n  local res = pcall(obj.TestInOutlong, obj,100000)\r\n  assert(res ~= nil)\r\n  assert(res[1] == 200000)\r\n--]]\r\nend",
    "type": "function"
  }, {
    "id": 247,
    "text": "print(\"\\n=======> test_inout_params\")",
    "type": "statement:functioncall"
  }, {
    "id": 248,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 249,
    "text": "local function test_out_params()\r\n  print(\"\\n=======> test_out_params\")\r\n\r\n--[[DISABLED:\r\n  local iupobj = iupolecontrol{progid = \"TESTECTL.TesteCtrl.1\"}\r\n  assert(iupobj)\r\n\r\n  local obj = iupobj.LUACOM\r\n\r\n  nt(1)\r\n  local res = pcall(obj.TestOutParam, obj)\r\n  assert(res ~= nil and res[1] == 1000)\r\n\r\n  nt()\r\n  local res = pcall(obj.Test2OutParams, obj)\r\n  assert(res ~= nil)\r\n  assert(res[1] == 1.1 and tonumber(res[2]) == res[1])\r\n\r\n  nt()\r\n  local res = pcall(obj.TestRetInOutParams, obj,2,3)\r\n  assert(res ~= nil)\r\n  assert(res[1] == 6)\r\n  assert(res[2] == 2)\r\n  assert(res[3] == 3)\r\n--]]\r\nend",
    "type": "function"
  }, {
    "id": 250,
    "text": "print(\"\\n=======> test_out_params\")",
    "type": "statement:functioncall"
  }, {
    "id": 251,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 252,
    "text": "local function test_safearrays()\r\n  print(\"\\n=======> test_safearrays\")\r\n\r\n  local teste = {}\r\n\r\n  nt(1)\r\n\r\n  local obj = luacom.ImplInterfaceFromTypelib(teste, tlb_path, \"ITest2\" )\r\n  assert(obj)\r\n\r\n  array = {}\r\n  for i=1,3 do\r\n    if array[i] == nil then\r\n      array[i] = {}\r\n    end\r\n    for j=1,3 do\r\n      if array[i][j] == nil then\r\n        array[i][j] = {}\r\n      end\r\n      for k=1,3 do\r\n        array[i][j][k] = i*9+j*3+k\r\n      end\r\n    end\r\n  end\r\n\r\n  teste.TestSafeArray = function(self, array_param)\r\n    assert(table2string(array_param) == table2string(array))\r\n  end\r\n\r\n  for i=1,10 do\r\n    obj:TestSafeArray(array)\r\n  end\r\n\r\n  nt()\r\n\r\n  -- testa tratamento de erro na conversao\r\n\r\n  teste.TestSafeArray2 = function(self, array_param)\r\n    print(table2string(array_param))\r\n    return 1\r\n  end\r\n\r\n  teste.TestSafeArrayVariant = function(self, array_param)\r\n    return array_param\r\n  end\r\n\r\n  -- new in 1.4\r\n  local a = obj:TestSafeArrayVariant({})\r\n  assert(table2string(a) == table2string({}))\r\n\r\n  -- note: arrays should not contain nil.\r\n  local a = obj:TestSafeArrayVariant({nil,1})\r\n  assert(table2string(a) == table2string({}))\r\n\r\n  -- multi-dimensional arrays with zero sizes ambiguous?\r\n  local res = pcall(obj.TestSafeArray2,obj,{{}})\r\n  assert(res == false)\r\n\r\n  local a = obj:TestSafeArrayVariant({1})\r\n  assert(table2string(a) == table2string({1}))\r\n\r\n  local a = obj:TestSafeArrayVariant({{1}})\r\n  assert(table2string(a) == table2string({{1}}))\r\n\r\n  local res = pcall(obj.TestSafeArray2,obj,{1,2,{3}})\r\n  assert(res == false)\r\n\r\n  local res = pcall(obj.TestSafeArray2,obj,{{1},{2},{3,4}})\r\n  assert(res == false)\r\n\r\n  local res = pcall(obj.TestSafeArray2,obj,{{{1,2}},{{2,1}},{{3}}})\r\n  assert(res == false)\r\n\r\n  -- steals a userdata...\r\n  local userdata = obj[\"_USERDATA_REF_\"]\r\n\r\n  local res = pcall(obj.TestSafeArrayVariant,{obj,{userdata, userdata}})\r\n  assert(res)\r\n\r\n  nt()  -- tests long safe arrays\r\n\r\n  local i = 0\r\n  array = {}\r\n\r\n  for i=1,100 do\r\n    array[i] = i\r\n  end\r\n\r\n  a = obj:TestSafeArrayVariant(array)\r\n\r\n  for i=1,100 do\r\n    assert(a[i] == i)\r\n  end\r\n\r\n  local array_test = {{1},{\"1\"},{1},{1},{1},{1},{1},{1},{1},{1},{1},{1},{1}}\r\n  a = obj:TestSafeArrayVariant(array_test)\r\n  assert(table2string(a) == table2string(array_test))\r\n\r\n  nt()\r\n\r\n  teste.TestSafeArrayIDispatch = function(self, array)\r\n    for i=1,9 do\r\n      print(tostring(i)..\" => \"..tostring(array[i].Teste))\r\n    end\r\n  end\r\n\r\n  local obj = luacom.ImplInterfaceFromTypelib(teste, tlb_path, \"ITest2\" )\r\n  assert(obj)\r\n\r\n  array = {}\r\n  teste.Teste = 10\r\n\r\n  for i=1,9 do\r\n    array[i] = luacom.ImplInterfaceFromTypelib(teste, tlb_path, \"ITest2\" )\r\n  end\r\n\r\n  obj:TestSafeArrayIDispatch(array)\r\n\r\n  -- test: multidimensional row/column order (fixed in 1.4)\r\n  local excel = luacom.CreateObject 'Excel.Application'\r\n  if excel then\r\n    local wb = excel.Workbooks:Add()\r\n    local ws = wb.ActiveSheet\r\n    local r = ws:Range(\"A2\", \"B5\")\r\n    r.Value2 = {{2,3},{4,5},{6,7},{8,9}}\r\n    local v = r.Value2\r\n    assert(table2string(v) == '{{2, 3}, {4, 5}, {6, 7}, {8, 9}}',\r\n           table2string(v))\r\n    assert(ws.Cells(2,2).Value2 == 3)\r\n    assert(ws.Cells(3,1).Value2 == 4)\r\n    wb.Saved = true\r\n    wb:Close()\r\n    excel = nil\r\n  else\r\n    print 'WARNING: test disabled (Excel not detected)'\r\n  end\r\n\r\n  collectgarbage()\r\nend",
    "type": "function"
  }, {
    "id": 253,
    "text": "print(\"\\n=======> test_safearrays\")",
    "type": "statement:functioncall"
  }, {
    "id": 254,
    "text": "local obj = luacom.ImplInterfaceFromTypelib(teste, tlb_path, \"ITest2\" )",
    "type": "statement:localassign"
  }, {
    "id": 255,
    "text": "array = {}",
    "type": "statement:assign"
  }, {
    "id": 256,
    "text": "for i=1,3 do\r\n    if array[i] == nil then\r\n      array[i] = {}\r\n    end\r\n    for j=1,3 do\r\n      if array[i][j] == nil then\r\n        array[i][j] = {}\r\n      end\r\n      for k=1,3 do\r\n        array[i][j][k] = i*9+j*3+k\r\n      end\r\n    end\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 257,
    "text": "if array[i] == nil then\r\n      array[i] = {}\r\n    end",
    "type": "statement:if"
  }, {
    "id": 258,
    "text": "array[i] = {}",
    "type": "statement:assign"
  }, {
    "id": 259,
    "text": "for j=1,3 do\r\n      if array[i][j] == nil then\r\n        array[i][j] = {}\r\n      end\r\n      for k=1,3 do\r\n        array[i][j][k] = i*9+j*3+k\r\n      end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 260,
    "text": "if array[i][j] == nil then\r\n        array[i][j] = {}\r\n      end",
    "type": "statement:if"
  }, {
    "id": 261,
    "text": "array[i][j] = {}",
    "type": "statement:assign"
  }, {
    "id": 262,
    "text": "for k=1,3 do\r\n        array[i][j][k] = i*9+j*3+k\r\n      end",
    "type": "statement:numericfor"
  }, {
    "id": 263,
    "text": "array[i][j][k] = i*9+j*3+k",
    "type": "statement:assign"
  }, {
    "id": 264,
    "text": "teste.TestSafeArray = function(self, array_param)\r\n    assert(table2string(array_param) == table2string(array))\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 265,
    "text": "assert(table2string(array_param) == table2string(array))",
    "type": "statement:functioncall"
  }, {
    "id": 266,
    "text": "for i=1,10 do\r\n    obj:TestSafeArray(array)\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 267,
    "text": "obj:TestSafeArray(array)",
    "type": "statement:functioncall"
  }, {
    "id": 268,
    "text": "teste.TestSafeArray2 = function(self, array_param)\r\n    print(table2string(array_param))\r\n    return 1\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 269,
    "text": "print(table2string(array_param))",
    "type": "statement:functioncall"
  }, {
    "id": 270,
    "text": "teste.TestSafeArrayVariant = function(self, array_param)\r\n    return array_param\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 271,
    "text": "local a = obj:TestSafeArrayVariant({})",
    "type": "statement:localassign"
  }, {
    "id": 272,
    "text": "assert(table2string(a) == table2string({}))",
    "type": "statement:functioncall"
  }, {
    "id": 273,
    "text": "local a = obj:TestSafeArrayVariant({nil,1})",
    "type": "statement:localassign"
  }, {
    "id": 274,
    "text": "local res = pcall(obj.TestSafeArray2,obj,{{}})",
    "type": "statement:localassign"
  }, {
    "id": 275,
    "text": "local a = obj:TestSafeArrayVariant({1})",
    "type": "statement:localassign"
  }, {
    "id": 276,
    "text": "assert(table2string(a) == table2string({1}))",
    "type": "statement:functioncall"
  }, {
    "id": 277,
    "text": "local a = obj:TestSafeArrayVariant({{1}})",
    "type": "statement:localassign"
  }, {
    "id": 278,
    "text": "assert(table2string(a) == table2string({{1}}))",
    "type": "statement:functioncall"
  }, {
    "id": 279,
    "text": "local res = pcall(obj.TestSafeArray2,obj,{1,2,{3}})",
    "type": "statement:localassign"
  }, {
    "id": 280,
    "text": "local res = pcall(obj.TestSafeArray2,obj,{{1},{2},{3,4}})",
    "type": "statement:localassign"
  }, {
    "id": 281,
    "text": "local res = pcall(obj.TestSafeArray2,obj,{{{1,2}},{{2,1}},{{3}}})",
    "type": "statement:localassign"
  }, {
    "id": 282,
    "text": "local userdata = obj[\"_USERDATA_REF_\"]",
    "type": "statement:localassign"
  }, {
    "id": 283,
    "text": "local res = pcall(obj.TestSafeArrayVariant,{obj,{userdata, userdata}})",
    "type": "statement:localassign"
  }, {
    "id": 284,
    "text": "local i = 0",
    "type": "statement:localassign"
  }, {
    "id": 285,
    "text": "for i=1,100 do\r\n    array[i] = i\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 286,
    "text": "array[i] = i",
    "type": "statement:assign"
  }, {
    "id": 287,
    "text": "a = obj:TestSafeArrayVariant(array)",
    "type": "statement:assign"
  }, {
    "id": 288,
    "text": "for i=1,100 do\r\n    assert(a[i] == i)\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 289,
    "text": "assert(a[i] == i)",
    "type": "statement:functioncall"
  }, {
    "id": 290,
    "text": "local array_test = {{1},{\"1\"},{1},{1},{1},{1},{1},{1},{1},{1},{1},{1},{1}}",
    "type": "statement:localassign"
  }, {
    "id": 291,
    "text": "a = obj:TestSafeArrayVariant(array_test)",
    "type": "statement:assign"
  }, {
    "id": 292,
    "text": "assert(table2string(a) == table2string(array_test))",
    "type": "statement:functioncall"
  }, {
    "id": 293,
    "text": "teste.TestSafeArrayIDispatch = function(self, array)\r\n    for i=1,9 do\r\n      print(tostring(i)..\" => \"..tostring(array[i].Teste))\r\n    end\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 294,
    "text": "for i=1,9 do\r\n      print(tostring(i)..\" => \"..tostring(array[i].Teste))\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 295,
    "text": "print(tostring(i)..\" => \"..tostring(array[i].Teste))",
    "type": "statement:functioncall"
  }, {
    "id": 296,
    "text": "teste.Teste = 10",
    "type": "statement:assign"
  }, {
    "id": 297,
    "text": "for i=1,9 do\r\n    array[i] = luacom.ImplInterfaceFromTypelib(teste, tlb_path, \"ITest2\" )\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 298,
    "text": "array[i] = luacom.ImplInterfaceFromTypelib(teste, tlb_path, \"ITest2\" )",
    "type": "statement:assign"
  }, {
    "id": 299,
    "text": "obj:TestSafeArrayIDispatch(array)",
    "type": "statement:functioncall"
  }, {
    "id": 300,
    "text": "local excel = luacom.CreateObject 'Excel.Application'",
    "type": "statement:localassign"
  }, {
    "id": 301,
    "text": "if excel then\r\n    local wb = excel.Workbooks:Add()\r\n    local ws = wb.ActiveSheet\r\n    local r = ws:Range(\"A2\", \"B5\")\r\n    r.Value2 = {{2,3},{4,5},{6,7},{8,9}}\r\n    local v = r.Value2\r\n    assert(table2string(v) == '{{2, 3}, {4, 5}, {6, 7}, {8, 9}}',\r\n           table2string(v))\r\n    assert(ws.Cells(2,2).Value2 == 3)\r\n    assert(ws.Cells(3,1).Value2 == 4)\r\n    wb.Saved = true\r\n    wb:Close()\r\n    excel = nil\r\n  else\r\n    print 'WARNING: test disabled (Excel not detected)'\r\n  end",
    "type": "statement:if"
  }, {
    "id": 302,
    "text": "local wb = excel.Workbooks:Add()",
    "type": "statement:localassign"
  }, {
    "id": 303,
    "text": "local ws = wb.ActiveSheet",
    "type": "statement:localassign"
  }, {
    "id": 304,
    "text": "local r = ws:Range(\"A2\", \"B5\")",
    "type": "statement:localassign"
  }, {
    "id": 305,
    "text": "r.Value2 = {{2,3},{4,5},{6,7},{8,9}}",
    "type": "statement:assign"
  }, {
    "id": 306,
    "text": "local v = r.Value2",
    "type": "statement:localassign"
  }, {
    "id": 307,
    "text": "assert(table2string(v) == '{{2, 3}, {4, 5}, {6, 7}, {8, 9}}',\r\n           table2string(v))",
    "type": "statement:functioncall"
  }, {
    "id": 308,
    "text": "assert(ws.Cells(2,2).Value2 == 3)",
    "type": "statement:functioncall"
  }, {
    "id": 309,
    "text": "assert(ws.Cells(3,1).Value2 == 4)",
    "type": "statement:functioncall"
  }, {
    "id": 310,
    "text": "wb.Saved = true",
    "type": "statement:assign"
  }, {
    "id": 311,
    "text": "wb:Close()",
    "type": "statement:functioncall"
  }, {
    "id": 312,
    "text": "excel = nil",
    "type": "statement:assign"
  }, {
    "id": 313,
    "text": "print 'WARNING: test disabled (Excel not detected)'",
    "type": "statement:functioncall"
  }, {
    "id": 314,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 315,
    "text": "function(self, array_param)\r\n    assert(table2string(array_param) == table2string(array))\r\n  end",
    "type": "function"
  }, {
    "id": 316,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 317,
    "text": "function(self, array_param)\r\n    print(table2string(array_param))\r\n    return 1\r\n  end",
    "type": "function"
  }, {
    "id": 318,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 319,
    "text": "function(self, array_param)\r\n    return array_param\r\n  end",
    "type": "function"
  }, {
    "id": 320,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 321,
    "text": "function(self, array)\r\n    for i=1,9 do\r\n      print(tostring(i)..\" => \"..tostring(array[i].Teste))\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 322,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 323,
    "text": "local function test_NewObject()\r\n  print(\"\\n=======> test_NewObject\")\r\n\r\n  nt(1)\r\n\r\n  local tm_gettable = \r\n    function(table, index)\r\n      rawset(table, \"Accessed\", 1)\r\n      return rawget(table, index)\r\n    end\r\n\r\n  local tm_settable = \r\n    function(table, index, value)\r\n      rawset(table, index, value)\r\n    end\r\n\r\n  local impl = {}\r\n  local testtag = {}\r\n  setmetatable(impl, testtag)\r\n  testtag[\"__index\"] =  tm_gettable\r\n  testtag[\"__newindex\"] = tm_settable\r\n\r\n  local obj = luacom.NewObject(impl, \"LUACOM.Test\")\r\n  assert(obj)\r\n\r\n  obj.prop1 = 1\r\n  assert(obj.prop1 == 1 and impl.Accessed == 1)\r\nend",
    "type": "function"
  }, {
    "id": 324,
    "text": "print(\"\\n=======> test_NewObject\")",
    "type": "statement:functioncall"
  }, {
    "id": 325,
    "text": "local tm_gettable = \r\n    function(table, index)\r\n      rawset(table, \"Accessed\", 1)\r\n      return rawget(table, index)\r\n    end",
    "type": "statement:localassign"
  }, {
    "id": 326,
    "text": "rawset(table, \"Accessed\", 1)",
    "type": "statement:functioncall"
  }, {
    "id": 327,
    "text": "local tm_settable = \r\n    function(table, index, value)\r\n      rawset(table, index, value)\r\n    end",
    "type": "statement:localassign"
  }, {
    "id": 328,
    "text": "rawset(table, index, value)",
    "type": "statement:functioncall"
  }, {
    "id": 329,
    "text": "local impl = {}",
    "type": "statement:localassign"
  }, {
    "id": 330,
    "text": "local testtag = {}",
    "type": "statement:localassign"
  }, {
    "id": 331,
    "text": "setmetatable(impl, testtag)",
    "type": "statement:functioncall"
  }, {
    "id": 332,
    "text": "testtag[\"__index\"] =  tm_gettable",
    "type": "statement:assign"
  }, {
    "id": 333,
    "text": "testtag[\"__newindex\"] = tm_settable",
    "type": "statement:assign"
  }, {
    "id": 334,
    "text": "local obj = luacom.NewObject(impl, \"LUACOM.Test\")",
    "type": "statement:localassign"
  }, {
    "id": 335,
    "text": "obj.prop1 = 1",
    "type": "statement:assign"
  }, {
    "id": 336,
    "text": "assert(obj.prop1 == 1 and impl.Accessed == 1)",
    "type": "statement:functioncall"
  }, {
    "id": 337,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 338,
    "text": "function(table, index)\r\n      rawset(table, \"Accessed\", 1)\r\n      return rawget(table, index)\r\n    end",
    "type": "function"
  }, {
    "id": 339,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 340,
    "text": "function(table, index, value)\r\n      rawset(table, index, value)\r\n    end",
    "type": "function"
  }, {
    "id": 341,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 342,
    "text": "local function test_DataTypes()\r\n  print(\"\\n=======> test_DataTypes\")\r\n\r\n  local teste = {}\r\n  teste.Test = function(self, in_param, in_out_param, out_param)\r\n    return in_out_param, in_param, in_param\r\n  end\r\n\r\n  local obj = impl_interface(teste, \"IDataConversionTest\")\r\n  assert(obj)\r\n\r\n  nt(1)  -- Datas\r\n\r\n  teste.TestDATE = teste.Test\r\n\r\n  -- this one should work  \r\n  local date = \"29/2/1996 10:00:00\"\r\n  local date2 = \"1/1/2001 01:00:00\"\r\n  local date_res1, date_res2, date_res3 = obj:TestDATE(date, date2)\r\n  assert(date_res1:find '01')\r\n  assert(date_res2:find '96')\r\n--print(date_res3, date_res2)\r\n--FIX  assert(date_res3 == date_res2)\r\n\r\n  -- this ones should fail\r\n  local date = \"29/2/1997 10:00:00\"\r\n  local res = pcall(obj.TestDATE,obj, date, date)\r\n  assert(res == false)\r\n\r\n  local date = \"1/1/2001 24:00:00\"\r\n  local res = pcall(obj.TestDATE,obj, date, date)\r\n  assert(res == false)\r\n\r\n  nt(\"Currency\") -- teste de currency\r\n\r\n  teste.TestCURRENCY = teste.Test\r\n  local cy = \"R$ 1.000.001,15\"\r\n  -- cy = \"$ 1,000,001.15\" -- or this\r\n  local cy2 = 988670.12\r\n  print 'FIX - remove regional settings dependency in test'; skipped=true\r\n  -- cy_res2, cy_res, cy_res3 = obj:TestCURRENCY(cy, cy2)\r\n  -- assert(cy_res == 1000001.15)\r\n  -- assert(cy_res2 == cy2)\r\n  -- assert(cy_res3 == 1000001.15)\r\n  local cy = 12345.56\r\n  local cy_res = obj:TestCURRENCY(cy, cy)\r\n  assert(cy_res == cy)\r\n\r\n  -- Este deve falhar\r\n\r\n  local cy = \"R$ 1,000,001.15\"\r\n  local res = pcall(obj.TestCURRENCY,obj, cy)\r\n  assert(res == false)\r\n\r\n  local cy = {}\r\n  local res = pcall(obj.TestCURRENCY,obj, cy)\r\n  assert(res == false)\r\n\r\n  nt() -- teste de booleanos\r\n\r\n  teste.TestBool = teste.Test\r\n\r\n  local b = true\r\n  local b2 = false\r\n  local b_res2, b_res, b_res3 = obj:TestBool(b, b2)\r\n  assert(b == b_res)\r\n  assert(b2 == b_res2)\r\n  assert(b_res3 == b)\r\n\r\n  local b = false\r\n  local b_res = obj:TestBool(b, b)\r\n  assert(b == b_res)\r\n\r\n  nt() -- teste de unsigned char\r\n\r\n  teste.TestChar = teste.Test\r\n\r\n  local uc = 100\r\n  local uc2 = 150\r\n  local uc_res2, uc_res, uc_res3 = obj:TestChar(uc, uc2)\r\n  assert(uc_res == uc)\r\n  assert(uc_res2 == uc2)\r\n  assert(uc_res3 == uc)\r\n\r\n  -- este deve falhar\r\n  local uc = 1000\r\n  local res = pcall(obj.TestChar, obj, uc, uc)\r\n  assert(res == false)\r\n\r\n  -- teste de VARIANT\r\n  teste.TestVARIANT = teste.Test\r\n\r\n  nt(\"VARIANT - number\")\r\n  local v = 100\r\n  local v2 = 150\r\n  local v_res2, v_res, v_res3 = obj:TestVARIANT(v, v2)\r\n  assert(v_res == v)\r\n  assert(v_res2 == v2)\r\n  assert(v_res3 == v)\r\n\r\n  nt(\"VARIANT - String\")\r\n  local v = \"abcdef\"\r\n  local v2 = \"ghijog\"\r\n  local v_res2, v_res, v_res3 = obj:TestVARIANT(v, v2)\r\n  assert(v_res == v)\r\n  assert(v_res2 == v2)\r\n  assert(v_res3 == v)\r\n\r\n  nt(\"VARIANT - mixed\")\r\n  local v = \"abcdef\"\r\n  local v2 = 123\r\n  local v_res2, v_res, v_res3 = obj:TestVARIANT(v, v2)\r\n  assert(v_res == v)\r\n  assert(v_res2 == v2)\r\n  assert(v_res3 == v)\r\n\r\n  nt(\"VARIANT - IDispatch\")\r\n  local v = obj\r\n  local v2 = obj\r\n  local v_res2, v_res, v_res3 = obj:TestVARIANT(v, v2)\r\nprint 'FIX: GetIUnknown test disabled'; skipped=true\r\n--  assert(luacom.GetIUnknown(v_res)== luacom.GetIUnknown(v))\r\n--  assert(luacom.GetIUnknown(v_res2)== luacom.GetIUnknown(v2))\r\n--  assert(luacom.GetIUnknown(v_res3)== luacom.GetIUnknown(v))\r\n\r\n  nt(\"VARIANT - IUnknown\")\r\n--[[FIX  v = luacom.GetIUnknown(obj)\r\n  local v2 = v\r\n  local v_res2, v_res, v_res3 = obj:TestVARIANT(v, v2)\r\n  assert(luacom.GetIUnknown(v_res) == v)\r\n  assert(luacom.GetIUnknown(v_res2) == v2)\r\n  assert(luacom.GetIUnknown(v_res3) == v)\r\n]]\r\n\r\n  nt(\"Enum\") -- Teste de Enum\r\n  teste.TestENUM = teste.Test\r\n  local e = 3\r\n  local e2 = 4\r\n  local e_res2, e_res, e_res3 = obj:TestENUM(e, e2)\r\n  assert(e_res == e)\r\n  assert(e_res2 == e2)\r\n  assert(e_res3 == e)\r\n\r\n  nt(\"BSTR\") -- Teste de BSTR\r\n  teste.TestBSTR = teste.Test\r\n  local s = \"abdja\"\r\n  local s2 = \"fsjakfhdksjfhkdsa\"\r\n  local s_res2, s_res, s_res3 = obj:TestBSTR(s, s2)\r\n  assert(s_res == s)\r\n  assert(s_res2 == s2)\r\n  assert(s_res3 == s)\r\n\r\n  -- embedded nulls\r\n  --   bug#428 - \"Improper handling of BSTRs with embedded zeros\"\r\n  local s = \"asdf\\0asdf\"; s2 = s\r\n  local s_res2, s_res, s_res3 = obj:TestBSTR(s, s2)\r\n  assert(s_res == s and s_res2 == s and s_res3 == s)\r\n\r\n  -- empty string\r\n  local s = \"\"; s2 = s\r\n  local s_res2, s_res, s_res3 = obj:TestBSTR(s, s2)\r\n  assert(s_res == s and s_res2 == s and s_res3 == s)\r\n\r\n  nt(\"Short\")\r\n  teste.TestShort = teste.Test\r\n  local p1 = 10\r\n  local p2 = 100\r\n  local res2, res1, res3 = obj:TestShort(p1, p2)\r\n  assert(p1 == res1)\r\n  assert(p2 == res2)\r\n  assert(p1 == res3)\r\n\r\n  nt(\"Long\")\r\n  teste.TestLong = teste.Test\r\n  local p1 = 1234567\r\n  local p2 = 9876543\r\n  local res2, res1, res3 = obj:TestLong(p1, p2)\r\n  assert(p1 == res1)\r\n  assert(p2 == res2)\r\n  assert(p1 == res3)\r\n\r\n  nt(\"Float\")\r\n  teste.TestFloat = teste.Test\r\n  local p1 = 10.111\r\n  local p2 = 123.8212\r\n  local res2, res1, res3 = obj:TestFloat(p1, p2)\r\n  assert(math.abs(p1-res1) < 0.00001)\r\n  assert(math.abs(p2-res2) < 0.00001)\r\n  assert(math.abs(p1-res3) < 0.00001)\r\n\r\n  nt(\"Double\")\r\n  teste.TestDouble = teste.Test\r\n  local p1 = 9876.78273823\r\n  local p2 = 728787.889978\r\n  local res2, res1, res3 = obj:TestDouble(p1, p2)\r\n  assert(p1 == res1)\r\n  assert(p2 == res2)\r\n  assert(p1 == res3)\r\n\r\n  nt(\"Int\")\r\n  teste.TestInt = teste.Test\r\n  local p1 = 1000\r\n  local p2 = 1001\r\n  local res2, res1, res3 = obj:TestInt(p1, p2)\r\n  assert(p1 == res1)\r\n  assert(p2 == res2)\r\n  assert(p1 == res3)\r\n\r\n  nt(\"IDispatch\")\r\n  teste.TestIDispatch = teste.Test\r\n  local p1 = obj\r\n  local p2 = obj\r\n  local res2, res1, res3 = obj:TestIDispatch(p1, p2)\r\n--[[FIX\r\n  assert(luacom.GetIUnknown(res1) == luacom.GetIUnknown(obj))\r\n  assert(luacom.GetIUnknown(res2) == luacom.GetIUnknown(obj))\r\n  assert(luacom.GetIUnknown(res3) == luacom.GetIUnknown(obj))\r\n]]\r\n\r\n  nt(\"IUnknown\")\r\n  teste.TestIUnknown = teste.Test\r\n  local p1 = luacom.GetIUnknown(obj)\r\n  local p2 = luacom.GetIUnknown(obj)\r\n  local res2, res1, res3 = obj:TestIUnknown(p1, p2)\r\n--[[FIX\r\n  assert(p1 == luacom.GetIUnknown(res1))\r\n  assert(p2 == luacom.GetIUnknown(res2))\r\n  assert(p1 == luacom.GetIUnknown(res3))\r\n]]\r\nend",
    "type": "function"
  }, {
    "id": 343,
    "text": "print(\"\\n=======> test_DataTypes\")",
    "type": "statement:functioncall"
  }, {
    "id": 344,
    "text": "teste.Test = function(self, in_param, in_out_param, out_param)\r\n    return in_out_param, in_param, in_param\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 345,
    "text": "local obj = impl_interface(teste, \"IDataConversionTest\")",
    "type": "statement:localassign"
  }, {
    "id": 346,
    "text": "teste.TestDATE = teste.Test",
    "type": "statement:assign"
  }, {
    "id": 347,
    "text": "local date = \"29/2/1996 10:00:00\"",
    "type": "statement:localassign"
  }, {
    "id": 348,
    "text": "local date2 = \"1/1/2001 01:00:00\"",
    "type": "statement:localassign"
  }, {
    "id": 349,
    "text": "local date_res1, date_res2, date_res3 = obj:TestDATE(date, date2)",
    "type": "statement:localassign"
  }, {
    "id": 350,
    "text": "assert(date_res1:find '01')",
    "type": "statement:functioncall"
  }, {
    "id": 351,
    "text": "assert(date_res2:find '96')",
    "type": "statement:functioncall"
  }, {
    "id": 352,
    "text": "local date = \"29/2/1997 10:00:00\"",
    "type": "statement:localassign"
  }, {
    "id": 353,
    "text": "local res = pcall(obj.TestDATE,obj, date, date)",
    "type": "statement:localassign"
  }, {
    "id": 354,
    "text": "local date = \"1/1/2001 24:00:00\"",
    "type": "statement:localassign"
  }, {
    "id": 355,
    "text": "nt(\"Currency\")",
    "type": "statement:functioncall"
  }, {
    "id": 356,
    "text": "teste.TestCURRENCY = teste.Test",
    "type": "statement:assign"
  }, {
    "id": 357,
    "text": "local cy = \"R$ 1.000.001,15\"",
    "type": "statement:localassign"
  }, {
    "id": 358,
    "text": "local cy2 = 988670.12",
    "type": "statement:localassign"
  }, {
    "id": 359,
    "text": "print 'FIX - remove regional settings dependency in test'",
    "type": "statement:functioncall"
  }, {
    "id": 360,
    "text": "local cy = 12345.56",
    "type": "statement:localassign"
  }, {
    "id": 361,
    "text": "local cy_res = obj:TestCURRENCY(cy, cy)",
    "type": "statement:localassign"
  }, {
    "id": 362,
    "text": "assert(cy_res == cy)",
    "type": "statement:functioncall"
  }, {
    "id": 363,
    "text": "local cy = \"R$ 1,000,001.15\"",
    "type": "statement:localassign"
  }, {
    "id": 364,
    "text": "local res = pcall(obj.TestCURRENCY,obj, cy)",
    "type": "statement:localassign"
  }, {
    "id": 365,
    "text": "local cy = {}",
    "type": "statement:localassign"
  }, {
    "id": 366,
    "text": "teste.TestBool = teste.Test",
    "type": "statement:assign"
  }, {
    "id": 367,
    "text": "local b = true",
    "type": "statement:localassign"
  }, {
    "id": 368,
    "text": "local b2 = false",
    "type": "statement:localassign"
  }, {
    "id": 369,
    "text": "local b_res2, b_res, b_res3 = obj:TestBool(b, b2)",
    "type": "statement:localassign"
  }, {
    "id": 370,
    "text": "assert(b == b_res)",
    "type": "statement:functioncall"
  }, {
    "id": 371,
    "text": "assert(b2 == b_res2)",
    "type": "statement:functioncall"
  }, {
    "id": 372,
    "text": "assert(b_res3 == b)",
    "type": "statement:functioncall"
  }, {
    "id": 373,
    "text": "local b = false",
    "type": "statement:localassign"
  }, {
    "id": 374,
    "text": "local b_res = obj:TestBool(b, b)",
    "type": "statement:localassign"
  }, {
    "id": 375,
    "text": "teste.TestChar = teste.Test",
    "type": "statement:assign"
  }, {
    "id": 376,
    "text": "local uc = 100",
    "type": "statement:localassign"
  }, {
    "id": 377,
    "text": "local uc2 = 150",
    "type": "statement:localassign"
  }, {
    "id": 378,
    "text": "local uc_res2, uc_res, uc_res3 = obj:TestChar(uc, uc2)",
    "type": "statement:localassign"
  }, {
    "id": 379,
    "text": "assert(uc_res == uc)",
    "type": "statement:functioncall"
  }, {
    "id": 380,
    "text": "assert(uc_res2 == uc2)",
    "type": "statement:functioncall"
  }, {
    "id": 381,
    "text": "assert(uc_res3 == uc)",
    "type": "statement:functioncall"
  }, {
    "id": 382,
    "text": "local uc = 1000",
    "type": "statement:localassign"
  }, {
    "id": 383,
    "text": "local res = pcall(obj.TestChar, obj, uc, uc)",
    "type": "statement:localassign"
  }, {
    "id": 384,
    "text": "teste.TestVARIANT = teste.Test",
    "type": "statement:assign"
  }, {
    "id": 385,
    "text": "nt(\"VARIANT - number\")",
    "type": "statement:functioncall"
  }, {
    "id": 386,
    "text": "local v = 100",
    "type": "statement:localassign"
  }, {
    "id": 387,
    "text": "local v2 = 150",
    "type": "statement:localassign"
  }, {
    "id": 388,
    "text": "local v_res2, v_res, v_res3 = obj:TestVARIANT(v, v2)",
    "type": "statement:localassign"
  }, {
    "id": 389,
    "text": "assert(v_res == v)",
    "type": "statement:functioncall"
  }, {
    "id": 390,
    "text": "assert(v_res2 == v2)",
    "type": "statement:functioncall"
  }, {
    "id": 391,
    "text": "assert(v_res3 == v)",
    "type": "statement:functioncall"
  }, {
    "id": 392,
    "text": "nt(\"VARIANT - String\")",
    "type": "statement:functioncall"
  }, {
    "id": 393,
    "text": "local v = \"abcdef\"",
    "type": "statement:localassign"
  }, {
    "id": 394,
    "text": "local v2 = \"ghijog\"",
    "type": "statement:localassign"
  }, {
    "id": 395,
    "text": "nt(\"VARIANT - mixed\")",
    "type": "statement:functioncall"
  }, {
    "id": 396,
    "text": "local v2 = 123",
    "type": "statement:localassign"
  }, {
    "id": 397,
    "text": "nt(\"VARIANT - IDispatch\")",
    "type": "statement:functioncall"
  }, {
    "id": 398,
    "text": "local v = obj",
    "type": "statement:localassign"
  }, {
    "id": 399,
    "text": "local v2 = obj",
    "type": "statement:localassign"
  }, {
    "id": 400,
    "text": "print 'FIX: GetIUnknown test disabled'",
    "type": "statement:functioncall"
  }, {
    "id": 401,
    "text": "nt(\"VARIANT - IUnknown\")",
    "type": "statement:functioncall"
  }, {
    "id": 402,
    "text": "nt(\"Enum\")",
    "type": "statement:functioncall"
  }, {
    "id": 403,
    "text": "teste.TestENUM = teste.Test",
    "type": "statement:assign"
  }, {
    "id": 404,
    "text": "local e = 3",
    "type": "statement:localassign"
  }, {
    "id": 405,
    "text": "local e2 = 4",
    "type": "statement:localassign"
  }, {
    "id": 406,
    "text": "local e_res2, e_res, e_res3 = obj:TestENUM(e, e2)",
    "type": "statement:localassign"
  }, {
    "id": 407,
    "text": "assert(e_res == e)",
    "type": "statement:functioncall"
  }, {
    "id": 408,
    "text": "assert(e_res2 == e2)",
    "type": "statement:functioncall"
  }, {
    "id": 409,
    "text": "assert(e_res3 == e)",
    "type": "statement:functioncall"
  }, {
    "id": 410,
    "text": "nt(\"BSTR\")",
    "type": "statement:functioncall"
  }, {
    "id": 411,
    "text": "teste.TestBSTR = teste.Test",
    "type": "statement:assign"
  }, {
    "id": 412,
    "text": "local s = \"abdja\"",
    "type": "statement:localassign"
  }, {
    "id": 413,
    "text": "local s2 = \"fsjakfhdksjfhkdsa\"",
    "type": "statement:localassign"
  }, {
    "id": 414,
    "text": "local s_res2, s_res, s_res3 = obj:TestBSTR(s, s2)",
    "type": "statement:localassign"
  }, {
    "id": 415,
    "text": "assert(s_res == s)",
    "type": "statement:functioncall"
  }, {
    "id": 416,
    "text": "assert(s_res2 == s2)",
    "type": "statement:functioncall"
  }, {
    "id": 417,
    "text": "assert(s_res3 == s)",
    "type": "statement:functioncall"
  }, {
    "id": 418,
    "text": "local s = \"asdf\\0asdf\"",
    "type": "statement:localassign"
  }, {
    "id": 419,
    "text": "s2 = s",
    "type": "statement:assign"
  }, {
    "id": 420,
    "text": "assert(s_res == s and s_res2 == s and s_res3 == s)",
    "type": "statement:functioncall"
  }, {
    "id": 421,
    "text": "local s = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 422,
    "text": "nt(\"Short\")",
    "type": "statement:functioncall"
  }, {
    "id": 423,
    "text": "teste.TestShort = teste.Test",
    "type": "statement:assign"
  }, {
    "id": 424,
    "text": "local p1 = 10",
    "type": "statement:localassign"
  }, {
    "id": 425,
    "text": "local p2 = 100",
    "type": "statement:localassign"
  }, {
    "id": 426,
    "text": "local res2, res1, res3 = obj:TestShort(p1, p2)",
    "type": "statement:localassign"
  }, {
    "id": 427,
    "text": "assert(p1 == res1)",
    "type": "statement:functioncall"
  }, {
    "id": 428,
    "text": "assert(p2 == res2)",
    "type": "statement:functioncall"
  }, {
    "id": 429,
    "text": "assert(p1 == res3)",
    "type": "statement:functioncall"
  }, {
    "id": 430,
    "text": "nt(\"Long\")",
    "type": "statement:functioncall"
  }, {
    "id": 431,
    "text": "teste.TestLong = teste.Test",
    "type": "statement:assign"
  }, {
    "id": 432,
    "text": "local p1 = 1234567",
    "type": "statement:localassign"
  }, {
    "id": 433,
    "text": "local p2 = 9876543",
    "type": "statement:localassign"
  }, {
    "id": 434,
    "text": "local res2, res1, res3 = obj:TestLong(p1, p2)",
    "type": "statement:localassign"
  }, {
    "id": 435,
    "text": "nt(\"Float\")",
    "type": "statement:functioncall"
  }, {
    "id": 436,
    "text": "teste.TestFloat = teste.Test",
    "type": "statement:assign"
  }, {
    "id": 437,
    "text": "local p1 = 10.111",
    "type": "statement:localassign"
  }, {
    "id": 438,
    "text": "local p2 = 123.8212",
    "type": "statement:localassign"
  }, {
    "id": 439,
    "text": "local res2, res1, res3 = obj:TestFloat(p1, p2)",
    "type": "statement:localassign"
  }, {
    "id": 440,
    "text": "assert(math.abs(p1-res1) < 0.00001)",
    "type": "statement:functioncall"
  }, {
    "id": 441,
    "text": "assert(math.abs(p2-res2) < 0.00001)",
    "type": "statement:functioncall"
  }, {
    "id": 442,
    "text": "assert(math.abs(p1-res3) < 0.00001)",
    "type": "statement:functioncall"
  }, {
    "id": 443,
    "text": "nt(\"Double\")",
    "type": "statement:functioncall"
  }, {
    "id": 444,
    "text": "teste.TestDouble = teste.Test",
    "type": "statement:assign"
  }, {
    "id": 445,
    "text": "local p1 = 9876.78273823",
    "type": "statement:localassign"
  }, {
    "id": 446,
    "text": "local p2 = 728787.889978",
    "type": "statement:localassign"
  }, {
    "id": 447,
    "text": "local res2, res1, res3 = obj:TestDouble(p1, p2)",
    "type": "statement:localassign"
  }, {
    "id": 448,
    "text": "nt(\"Int\")",
    "type": "statement:functioncall"
  }, {
    "id": 449,
    "text": "teste.TestInt = teste.Test",
    "type": "statement:assign"
  }, {
    "id": 450,
    "text": "local p1 = 1000",
    "type": "statement:localassign"
  }, {
    "id": 451,
    "text": "local p2 = 1001",
    "type": "statement:localassign"
  }, {
    "id": 452,
    "text": "local res2, res1, res3 = obj:TestInt(p1, p2)",
    "type": "statement:localassign"
  }, {
    "id": 453,
    "text": "nt(\"IDispatch\")",
    "type": "statement:functioncall"
  }, {
    "id": 454,
    "text": "teste.TestIDispatch = teste.Test",
    "type": "statement:assign"
  }, {
    "id": 455,
    "text": "local p1 = obj",
    "type": "statement:localassign"
  }, {
    "id": 456,
    "text": "local p2 = obj",
    "type": "statement:localassign"
  }, {
    "id": 457,
    "text": "local res2, res1, res3 = obj:TestIDispatch(p1, p2)",
    "type": "statement:localassign"
  }, {
    "id": 458,
    "text": "nt(\"IUnknown\")",
    "type": "statement:functioncall"
  }, {
    "id": 459,
    "text": "teste.TestIUnknown = teste.Test",
    "type": "statement:assign"
  }, {
    "id": 460,
    "text": "local p1 = luacom.GetIUnknown(obj)",
    "type": "statement:localassign"
  }, {
    "id": 461,
    "text": "local p2 = luacom.GetIUnknown(obj)",
    "type": "statement:localassign"
  }, {
    "id": 462,
    "text": "local res2, res1, res3 = obj:TestIUnknown(p1, p2)",
    "type": "statement:localassign"
  }, {
    "id": 463,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 464,
    "text": "function(self, in_param, in_out_param, out_param)\r\n    return in_out_param, in_param, in_param\r\n  end",
    "type": "function"
  }, {
    "id": 465,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 466,
    "text": "local function test_USERDEF_PTR()\r\n  print(\"\\n=======> test_USERDEF_PTR\")\r\n\r\n  local t = {}\r\n  function t.__index(table, index)\r\n    return rawget(table, \"teste\")\r\n  end\r\n\r\n  local teste_table = setmetatable({}, t)\r\n  -- por default simplesmente retorna\r\n  teste_table.teste = function(self, value)\r\n    return value\r\n  end\r\n\r\n  local teste  = impl_interface(teste_table, \"ITest1\")\r\n  local teste2 = impl_interface(teste_table, \"IStruct1\")\r\n  assert(teste)\r\n  assert(teste2)\r\n\r\n  -- outra opcao\r\n  local o2\r\n  local teste_disp = function(self, value)\r\n    local t = {}\r\n    o2 = impl_interface(t, \"ITest1\")\r\n    return o2\r\n  end\r\n\r\n  nt(1)\r\n  local n = teste:up_userdef_enum(3)\r\n  assert(n == nil)\r\n\r\n  nt()\r\n  local n = teste:up_ptr_userdef_enum(4)\r\n--FIX  assert(n == 4)\r\n\r\n  nt()\r\n  teste_table.up_ptr_disp = teste_disp\r\n\r\n  local n = teste:up_ptr_disp(teste2)\r\nprint 'FIX: GetIUnknown test disabled'; skipped=true\r\n--  assert(luacom.GetIUnknown(n) == luacom.GetIUnknown(o2))\r\n\r\n  nt()\r\n  local n = teste:up_ptr_userdef_disp(teste2)\r\n  assert(n == nil)\r\n\r\n  nt()\r\n  teste_table.up_ptr_ptr_userdef_disp = teste_disp\r\n  local n = teste:up_ptr_ptr_userdef_disp(teste2)\r\nprint 'FIX: GetIUnknown test disabled'; skipped=true\r\n--  assert(luacom.GetIUnknown(n) == luacom.GetIUnknown(o2))\r\n\r\n  nt()\r\n  local n = teste:up_userdef_alias(1)\r\n  assert(n == nil)\r\n\r\n  nt()\r\n  local n = teste:up_ptr_userdef_alias(1)\r\n--FIX  assert(n == 1)\r\n  local n = teste:up_userdef_alias_userdef_alias(1)\r\n  assert(n == nil)\r\n\r\n  nt()\r\n  local n = teste:up_userdef_disp(teste2)\r\n  assert(n == nil)\r\n\r\n  nt()\r\n  teste_table.up_udef_alias_ptr_udef_alias_ptr_disp = teste_disp\r\n  local n = teste:up_udef_alias_ptr_udef_alias_ptr_disp(teste2)\r\nprint 'FIX: GetIUnknown test disabled\\n'; skipped=true\r\n--  assert(luacom.GetIUnknown(n) == luacom.GetIUnknown(o2))\r\n\r\n  nt()\r\n  teste_table.up_userdef_disp = function(self, value)\r\n    o2 = value\r\n  end\r\n  teste:up_userdef_disp(teste2)\r\n--  assert(luacom.GetIUnknown(teste2) == luacom.GetIUnknown(o2))\r\n\r\n  nt(\"Unknown & Userdef\")\r\n\r\n  local teste_unk = function(self, value)\r\n    local t = {}\r\n    o2 = impl_interface(t, \"ITest1\")\r\n    o2 = luacom.GetIUnknown(o2)\r\n    return o2\r\n  end\r\n\r\n  teste_table.up_udef_alias_ptr_udef_alias_ptr_unk = teste_unk\r\n\r\n  local n\r\n    = teste:up_udef_alias_ptr_udef_alias_ptr_unk(luacom.GetIUnknown(teste2))\r\n  --assert(luacom.GetIUnknown(n) == o2)\r\n\r\n  nt(\"Unknown & Userdef\")\r\n  teste_table.up_userdef_unk = function(self, value)\r\n    o2 = value\r\n  end\r\n\r\n  teste:up_userdef_unk(luacom.GetIUnknown(teste2))\r\n--  assert(luacom.GetIUnknown(teste2) == luacom.GetIUnknown(o2))\r\nend",
    "type": "function"
  }, {
    "id": 467,
    "text": "print(\"\\n=======> test_USERDEF_PTR\")",
    "type": "statement:functioncall"
  }, {
    "id": 468,
    "text": "function t.__index(table, index)\r\n    return rawget(table, \"teste\")\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 469,
    "text": "local teste_table = setmetatable({}, t)",
    "type": "statement:localassign"
  }, {
    "id": 470,
    "text": "teste_table.teste = function(self, value)\r\n    return value\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 471,
    "text": "local teste  = impl_interface(teste_table, \"ITest1\")",
    "type": "statement:localassign"
  }, {
    "id": 472,
    "text": "local teste2 = impl_interface(teste_table, \"IStruct1\")",
    "type": "statement:localassign"
  }, {
    "id": 473,
    "text": "assert(teste)",
    "type": "statement:functioncall"
  }, {
    "id": 474,
    "text": "assert(teste2)",
    "type": "statement:functioncall"
  }, {
    "id": 475,
    "text": "local o2",
    "type": "statement:localassign"
  }, {
    "id": 476,
    "text": "local teste_disp = function(self, value)\r\n    local t = {}\r\n    o2 = impl_interface(t, \"ITest1\")\r\n    return o2\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 477,
    "text": "o2 = impl_interface(t, \"ITest1\")",
    "type": "statement:assign"
  }, {
    "id": 478,
    "text": "local n = teste:up_userdef_enum(3)",
    "type": "statement:localassign"
  }, {
    "id": 479,
    "text": "assert(n == nil)",
    "type": "statement:functioncall"
  }, {
    "id": 480,
    "text": "local n = teste:up_ptr_userdef_enum(4)",
    "type": "statement:localassign"
  }, {
    "id": 481,
    "text": "teste_table.up_ptr_disp = teste_disp",
    "type": "statement:assign"
  }, {
    "id": 482,
    "text": "local n = teste:up_ptr_disp(teste2)",
    "type": "statement:localassign"
  }, {
    "id": 483,
    "text": "local n = teste:up_ptr_userdef_disp(teste2)",
    "type": "statement:localassign"
  }, {
    "id": 484,
    "text": "teste_table.up_ptr_ptr_userdef_disp = teste_disp",
    "type": "statement:assign"
  }, {
    "id": 485,
    "text": "local n = teste:up_ptr_ptr_userdef_disp(teste2)",
    "type": "statement:localassign"
  }, {
    "id": 486,
    "text": "local n = teste:up_userdef_alias(1)",
    "type": "statement:localassign"
  }, {
    "id": 487,
    "text": "local n = teste:up_ptr_userdef_alias(1)",
    "type": "statement:localassign"
  }, {
    "id": 488,
    "text": "local n = teste:up_userdef_alias_userdef_alias(1)",
    "type": "statement:localassign"
  }, {
    "id": 489,
    "text": "local n = teste:up_userdef_disp(teste2)",
    "type": "statement:localassign"
  }, {
    "id": 490,
    "text": "teste_table.up_udef_alias_ptr_udef_alias_ptr_disp = teste_disp",
    "type": "statement:assign"
  }, {
    "id": 491,
    "text": "local n = teste:up_udef_alias_ptr_udef_alias_ptr_disp(teste2)",
    "type": "statement:localassign"
  }, {
    "id": 492,
    "text": "print 'FIX: GetIUnknown test disabled\\n'",
    "type": "statement:functioncall"
  }, {
    "id": 493,
    "text": "teste_table.up_userdef_disp = function(self, value)\r\n    o2 = value\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 494,
    "text": "o2 = value",
    "type": "statement:assign"
  }, {
    "id": 495,
    "text": "teste:up_userdef_disp(teste2)",
    "type": "statement:functioncall"
  }, {
    "id": 496,
    "text": "nt(\"Unknown & Userdef\")",
    "type": "statement:functioncall"
  }, {
    "id": 497,
    "text": "local teste_unk = function(self, value)\r\n    local t = {}\r\n    o2 = impl_interface(t, \"ITest1\")\r\n    o2 = luacom.GetIUnknown(o2)\r\n    return o2\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 498,
    "text": "o2 = luacom.GetIUnknown(o2)",
    "type": "statement:assign"
  }, {
    "id": 499,
    "text": "teste_table.up_udef_alias_ptr_udef_alias_ptr_unk = teste_unk",
    "type": "statement:assign"
  }, {
    "id": 500,
    "text": "local n\r\n    = teste:up_udef_alias_ptr_udef_alias_ptr_unk(luacom.GetIUnknown(teste2))",
    "type": "statement:localassign"
  }, {
    "id": 501,
    "text": "teste_table.up_userdef_unk = function(self, value)\r\n    o2 = value\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 502,
    "text": "teste:up_userdef_unk(luacom.GetIUnknown(teste2))",
    "type": "statement:functioncall"
  }, {
    "id": 503,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 504,
    "text": "function t.__index(table, index)\r\n    return rawget(table, \"teste\")\r\n  end",
    "type": "function"
  }, {
    "id": 505,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 506,
    "text": "function(self, value)\r\n    return value\r\n  end",
    "type": "function"
  }, {
    "id": 507,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 508,
    "text": "function(self, value)\r\n    local t = {}\r\n    o2 = impl_interface(t, \"ITest1\")\r\n    return o2\r\n  end",
    "type": "function"
  }, {
    "id": 509,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 510,
    "text": "function(self, value)\r\n    o2 = value\r\n  end",
    "type": "function"
  }, {
    "id": 511,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 512,
    "text": "function(self, value)\r\n    local t = {}\r\n    o2 = impl_interface(t, \"ITest1\")\r\n    o2 = luacom.GetIUnknown(o2)\r\n    return o2\r\n  end",
    "type": "function"
  }, {
    "id": 513,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 514,
    "text": "function(self, value)\r\n    o2 = value\r\n  end",
    "type": "function"
  }, {
    "id": 515,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 516,
    "text": "local function test_field_redefinition()\r\n  print(\"\\n=======> test_field_redefinition\")  \r\n\r\n  nt(1)\r\n  local luaobj = {}\r\n  luaobj.getput = 1\r\n  luaobj.get = 2\r\n  luaobj.func = function() return 3 end\r\n\r\n  local obj = impl_interface(luaobj, \"ITest1\")\r\n  assert(obj)\r\n  assert(obj.getput == 1)\r\n  assert(obj.get == 2)\r\n  assert(obj:func() == 3)\r\n\r\n  nt()\r\n  obj.getput = function() return 2 end\r\n  assert(obj:getgetput() == 2)\r\n  local settable = function(t, i,v )\r\n    t[i] = v\r\n    return 1\r\n  end\r\n\r\n  -- these ones should fail\r\n  nt()\r\n  local res = pcall(settable, obj, \"get\", 1)\r\n  assert(res == false)\r\n\r\n  local res = pcall(settable,obj, \"func\", 1)\r\n  assert(res == false)\r\n\r\n  nt()\r\n  local d, res = pcall(settable,obj, \"get\", print)\r\n  assert(res == 1)\r\n\r\n  local d, res = pcall(settable,obj, \"func\", print)\r\n  assert(res == 1)\r\nend",
    "type": "function"
  }, {
    "id": 517,
    "text": "print(\"\\n=======> test_field_redefinition\")",
    "type": "statement:functioncall"
  }, {
    "id": 518,
    "text": "local luaobj = {}",
    "type": "statement:localassign"
  }, {
    "id": 519,
    "text": "luaobj.getput = 1",
    "type": "statement:assign"
  }, {
    "id": 520,
    "text": "luaobj.get = 2",
    "type": "statement:assign"
  }, {
    "id": 521,
    "text": "luaobj.func = function() return 3 end",
    "type": "statement:assign"
  }, {
    "id": 522,
    "text": "local obj = impl_interface(luaobj, \"ITest1\")",
    "type": "statement:localassign"
  }, {
    "id": 523,
    "text": "assert(obj.getput == 1)",
    "type": "statement:functioncall"
  }, {
    "id": 524,
    "text": "assert(obj.get == 2)",
    "type": "statement:functioncall"
  }, {
    "id": 525,
    "text": "assert(obj:func() == 3)",
    "type": "statement:functioncall"
  }, {
    "id": 526,
    "text": "obj.getput = function() return 2 end",
    "type": "statement:assign"
  }, {
    "id": 527,
    "text": "assert(obj:getgetput() == 2)",
    "type": "statement:functioncall"
  }, {
    "id": 528,
    "text": "local settable = function(t, i,v )\r\n    t[i] = v\r\n    return 1\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 529,
    "text": "t[i] = v",
    "type": "statement:assign"
  }, {
    "id": 530,
    "text": "local res = pcall(settable, obj, \"get\", 1)",
    "type": "statement:localassign"
  }, {
    "id": 531,
    "text": "local res = pcall(settable,obj, \"func\", 1)",
    "type": "statement:localassign"
  }, {
    "id": 532,
    "text": "local d, res = pcall(settable,obj, \"get\", print)",
    "type": "statement:localassign"
  }, {
    "id": 533,
    "text": "assert(res == 1)",
    "type": "statement:functioncall"
  }, {
    "id": 534,
    "text": "local d, res = pcall(settable,obj, \"func\", print)",
    "type": "statement:localassign"
  }, {
    "id": 535,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 536,
    "text": "function() return 3 end",
    "type": "function"
  }, {
    "id": 537,
    "text": "function() return 2 end",
    "type": "function"
  }, {
    "id": 538,
    "text": "function(t, i,v )\r\n    t[i] = v\r\n    return 1\r\n  end",
    "type": "function"
  }, {
    "id": 539,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 540,
    "text": "local function test_indexing()\r\n  print(\"\\n=======> test_indexing: NOT IMPLEMENTED!!!\")  \r\nend",
    "type": "function"
  }, {
    "id": 541,
    "text": "print(\"\\n=======> test_indexing: NOT IMPLEMENTED!!!\")",
    "type": "statement:functioncall"
  }, {
    "id": 542,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 543,
    "text": "local function test_API()\r\n  nt(1)\r\n  \r\n  nt(\"CreateLuaCOM\")\r\n\r\n  local punk = luacom.GetIUnknown(_obj)\r\n  assert(punk)\r\n  \r\n  local obj \r\n \r\n  local obj = luacom.CreateLuaCOM(1)\r\n  assert(obj == nil)\r\n  \r\n  local obj = luacom.CreateLuaCOM(punk)\r\n  assert(type(obj.prop1) == \"number\")\r\n  \r\n  nt(\"ImportIUnknown & .IUnknown\")\r\n  \r\n  local ptr = _obj.IUnknown\r\n  assert(type(ptr) == \"userdata\")\r\n  \r\n  local obj = luacom.ImportIUnknown(ptr)\r\n  assert(obj)\r\n  \r\n  local obj = luacom.CreateLuaCOM(obj)\r\n  assert(type(obj.prop1) == \"number\")\r\nend",
    "type": "function"
  }, {
    "id": 544,
    "text": "nt(\"CreateLuaCOM\")",
    "type": "statement:functioncall"
  }, {
    "id": 545,
    "text": "local punk = luacom.GetIUnknown(_obj)",
    "type": "statement:localassign"
  }, {
    "id": 546,
    "text": "assert(punk)",
    "type": "statement:functioncall"
  }, {
    "id": 547,
    "text": "local obj",
    "type": "statement:localassign"
  }, {
    "id": 548,
    "text": "local obj = luacom.CreateLuaCOM(1)",
    "type": "statement:localassign"
  }, {
    "id": 549,
    "text": "local obj = luacom.CreateLuaCOM(punk)",
    "type": "statement:localassign"
  }, {
    "id": 550,
    "text": "assert(type(obj.prop1) == \"number\")",
    "type": "statement:functioncall"
  }, {
    "id": 551,
    "text": "nt(\"ImportIUnknown & .IUnknown\")",
    "type": "statement:functioncall"
  }, {
    "id": 552,
    "text": "local ptr = _obj.IUnknown",
    "type": "statement:localassign"
  }, {
    "id": 553,
    "text": "assert(type(ptr) == \"userdata\")",
    "type": "statement:functioncall"
  }, {
    "id": 554,
    "text": "local obj = luacom.ImportIUnknown(ptr)",
    "type": "statement:localassign"
  }, {
    "id": 555,
    "text": "local obj = luacom.CreateLuaCOM(obj)",
    "type": "statement:localassign"
  }, {
    "id": 556,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 557,
    "text": "function(class, ...)\r\n  return setmetatable({n=select('#',...), ...}, tuple)\r\nend",
    "type": "function"
  }, {
    "id": 558,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 559,
    "text": "",
    "type": "function container"
  }, {
    "id": 560,
    "text": "addConnection",
    "type": "global function"
  }, {
    "id": 561,
    "text": "ImplInterface",
    "type": "global function"
  }, {
    "id": 562,
    "text": "RegisterObject",
    "type": "global function"
  }, {
    "id": 563,
    "text": "StartLog",
    "type": "global function"
  }, {
    "id": 564,
    "text": "ImplInterfaceFromTypelib",
    "type": "global function"
  }, {
    "id": 565,
    "text": "ImportIUnknown",
    "type": "global function"
  }, {
    "id": 566,
    "text": "Connect",
    "type": "global function"
  }, {
    "id": 567,
    "text": "GetIUnknown",
    "type": "global function"
  }, {
    "id": 568,
    "text": "ExposeObject",
    "type": "global function"
  }, {
    "id": 569,
    "text": "CreateLuaCOM",
    "type": "global function"
  }, {
    "id": 570,
    "text": "NewObject",
    "type": "global function"
  }, {
    "id": 571,
    "text": "releaseConnection",
    "type": "global function"
  }, {
    "id": 572,
    "text": "RevokeObject",
    "type": "global function"
  }, {
    "id": 573,
    "text": "CreateObject",
    "type": "global function"
  }, {
    "id": 574,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 575,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 576,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 577,
    "text": "setprop2",
    "type": "global function"
  }, {
    "id": 578,
    "text": "print",
    "type": "global function"
  }, {
    "id": 579,
    "text": "tm",
    "type": "global function"
  }, {
    "id": 580,
    "text": "rawset",
    "type": "global function"
  }, {
    "id": 581,
    "text": "nt",
    "type": "global function"
  }, {
    "id": 582,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 583,
    "text": "type",
    "type": "global function"
  }, {
    "id": 584,
    "text": "popen",
    "type": "global function"
  }, {
    "id": 585,
    "text": "select",
    "type": "global function"
  }, {
    "id": 586,
    "text": "tuple",
    "type": "global function"
  }, {
    "id": 587,
    "text": "abs",
    "type": "global function"
  }, {
    "id": 588,
    "text": "next",
    "type": "global function"
  }, {
    "id": 589,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 590,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 591,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 592,
    "text": "open",
    "type": "global function"
  }, {
    "id": 593,
    "text": "error",
    "type": "global function"
  }, {
    "id": 594,
    "text": "Cells",
    "type": "global function"
  }, {
    "id": 595,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 596,
    "text": "ShowDialog",
    "type": "global function"
  }, {
    "id": 597,
    "text": "collectgarbage",
    "type": "global function"
  }, {
    "id": 598,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 599,
    "text": "require",
    "type": "global function"
  }, {
    "id": 600,
    "text": "",
    "type": "global variable"
  }, {
    "id": 601,
    "text": "",
    "type": "global variable"
  }, {
    "id": 602,
    "text": "",
    "type": "global variable"
  }, {
    "id": 603,
    "text": "",
    "type": "local variable"
  }, {
    "id": 604,
    "text": "",
    "type": "variable container"
  }, {
    "id": 605,
    "text": "",
    "type": "require container"
  }, {
    "id": 606,
    "text": "",
    "type": "local variable"
  }, {
    "id": 607,
    "text": "",
    "type": "n/a"
  }, {
    "id": 608,
    "text": "",
    "type": "local variable"
  }, {
    "id": 609,
    "text": "",
    "type": "boolean"
  }, {
    "id": 610,
    "text": "",
    "type": "local variable"
  }, {
    "id": 611,
    "text": "",
    "type": "boolean"
  }, {
    "id": 612,
    "text": "",
    "type": "local variable"
  }, {
    "id": 613,
    "text": "",
    "type": "string"
  }, {
    "id": 614,
    "text": "",
    "type": "local variable"
  }, {
    "id": 615,
    "text": "",
    "type": "symbol"
  }, {
    "id": 616,
    "text": "",
    "type": "local variable"
  }, {
    "id": 617,
    "text": "",
    "type": "n/a"
  }, {
    "id": 618,
    "text": "",
    "type": "local variable"
  }, {
    "id": 619,
    "text": "",
    "type": "local variable"
  }, {
    "id": 620,
    "text": "",
    "type": "local variable"
  }, {
    "id": 621,
    "text": "",
    "type": "local variable"
  }, {
    "id": 622,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 623,
    "text": "",
    "type": "local variable"
  }, {
    "id": 624,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 625,
    "text": "",
    "type": "local variable"
  }, {
    "id": 626,
    "text": "",
    "type": "local variable"
  }, {
    "id": 627,
    "text": "",
    "type": "n/a"
  }, {
    "id": 628,
    "text": "",
    "type": "global variable"
  }, {
    "id": 629,
    "text": "",
    "type": "global variable"
  }, {
    "id": 630,
    "text": "",
    "type": "n/a"
  }, {
    "id": 631,
    "text": "",
    "type": "global variable"
  }, {
    "id": 632,
    "text": "",
    "type": "global variable"
  } ]
}