{
  "_filename": "testdate.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/luacom/demo/date/testdate.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 8,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "calls",
    "to": 26
  }, {
    "from": 13,
    "label": "calls",
    "to": 2
  }, {
    "from": 13,
    "label": "calls",
    "to": 2
  }, {
    "from": 13,
    "label": "calls",
    "to": 2
  }, {
    "from": 13,
    "label": "calls",
    "to": 2
  }, {
    "from": 13,
    "label": "calls",
    "to": 2
  }, {
    "from": 13,
    "label": "calls",
    "to": 2
  }, {
    "from": 13,
    "label": "calls",
    "to": 2
  }, {
    "from": 13,
    "label": "calls",
    "to": 2
  }, {
    "from": 13,
    "label": "calls",
    "to": 22
  }, {
    "from": 2,
    "label": "calls",
    "to": 25
  }, {
    "from": 13,
    "label": "calls",
    "to": 27
  }, {
    "from": 2,
    "label": "calls",
    "to": 24
  }, {
    "from": 2,
    "label": "calls",
    "to": 24
  }, {
    "from": 13,
    "label": "calls",
    "to": 23
  }, {
    "from": 13,
    "label": "calls",
    "to": 23
  }, {
    "from": 13,
    "label": "calls",
    "to": 23
  }, {
    "from": 13,
    "label": "calls",
    "to": 23
  }, {
    "from": 1,
    "label": "contains",
    "to": 13
  }, {
    "from": 13,
    "label": "declares",
    "to": 2
  }, {
    "from": 13,
    "label": "declares",
    "to": 8
  }, {
    "from": 1,
    "label": "contains",
    "to": 29
  }, {
    "from": 1,
    "label": "contains",
    "to": 30
  }, {
    "from": 29,
    "label": "initializes",
    "to": 31
  }, {
    "from": 31,
    "label": "assigns",
    "to": 32
  }, {
    "from": 29,
    "label": "initializes",
    "to": 33
  }, {
    "from": 33,
    "label": "assigns",
    "to": 34
  }, {
    "from": 29,
    "label": "initializes",
    "to": 35
  }, {
    "from": 35,
    "label": "assigns",
    "to": 36
  }, {
    "from": 29,
    "label": "initializes",
    "to": 37
  }, {
    "from": 37,
    "label": "assigns",
    "to": 38
  }, {
    "from": 29,
    "label": "initializes",
    "to": 39
  }, {
    "from": 29,
    "label": "initializes",
    "to": 40
  }, {
    "from": 29,
    "label": "initializes",
    "to": 41
  }, {
    "from": 41,
    "label": "assigns",
    "to": 42
  }, {
    "from": 29,
    "label": "initializes",
    "to": 43
  }, {
    "from": 29,
    "label": "initializes",
    "to": 44
  }, {
    "from": 29,
    "label": "initializes",
    "to": 45
  }, {
    "from": 29,
    "label": "initializes",
    "to": 46
  }, {
    "from": 46,
    "label": "assigns",
    "to": 47
  }, {
    "from": 29,
    "label": "initializes",
    "to": 48
  }, {
    "from": 48,
    "label": "assigns",
    "to": 49
  }, {
    "from": 29,
    "label": "initializes",
    "to": 50
  }, {
    "from": 50,
    "label": "assigns",
    "to": 51
  }, {
    "from": 29,
    "label": "initializes",
    "to": 52
  }, {
    "from": 29,
    "label": "initializes",
    "to": 53
  }, {
    "from": 29,
    "label": "initializes",
    "to": 54
  }, {
    "from": 29,
    "label": "initializes",
    "to": 55
  }, {
    "from": 55,
    "label": "assigns",
    "to": 56
  }, {
    "from": 29,
    "label": "initializes",
    "to": 57
  }, {
    "from": 29,
    "label": "initializes",
    "to": 58
  }, {
    "from": 30,
    "label": "initializes",
    "to": 28
  }, {
    "from": 31,
    "label": "contains",
    "to": 8
  }, {
    "from": 31,
    "label": "contains",
    "to": 14
  }, {
    "from": 31,
    "label": "contains",
    "to": 15
  }, {
    "from": 31,
    "label": "contains",
    "to": 16
  }, {
    "from": 31,
    "label": "contains",
    "to": 17
  }, {
    "from": 31,
    "label": "contains",
    "to": 18
  }, {
    "from": 31,
    "label": "contains",
    "to": 19
  }, {
    "from": 31,
    "label": "contains",
    "to": 20
  }, {
    "from": 31,
    "label": "contains",
    "to": 21
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "testdate",
    "type": "module"
  }, {
    "id": 2,
    "text": "function print_date(date)\r\n  if type(date)==\"table\" then\r\n    for key, val in pairs(date) do\r\n      print(key .. \"=\" .. val)\r\n    end\r\n  else\r\n    print(date)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "if type(date)==\"table\" then\r\n    for key, val in pairs(date) do\r\n      print(key .. \"=\" .. val)\r\n    end\r\n  else\r\n    print(date)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 4,
    "text": "for key, val in pairs(date) do\r\n      print(key .. \"=\" .. val)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 5,
    "text": "print(key .. \"=\" .. val)",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "print(date)",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function(self, in_param, in_out_param, out_param)\r\n  print_date(in_param)\r\n  print_date(in_out_param)\r\n  return in_out_param, in_param, in_param\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "print_date(in_param)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "print_date(in_out_param)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "",
    "type": "function container"
  }, {
    "id": 14,
    "text": "function(self, ...)\r\n    --FIX: asserteq(tuple(...), tuple(3,4,5))\r\n    return 6,7,8,9\r\n  end",
    "type": "function"
  }, {
    "id": 15,
    "text": "function(self, ...)\r\n    asserteq(tuple(...), tuple(3))\r\n    return 5,6,7,8\r\n  end",
    "type": "function"
  }, {
    "id": 16,
    "text": "function(self, ...)\r\n    asserteq(tuple(...), par)\r\n    return 6,7,8,9\r\n  end",
    "type": "function"
  }, {
    "id": 17,
    "text": "function(self, array_param)\r\n    assert(table2string(array_param) == table2string(array))\r\n  end",
    "type": "function"
  }, {
    "id": 18,
    "text": "function(self, array_param)\r\n    print(table2string(array_param))\r\n    return 1\r\n  end",
    "type": "function"
  }, {
    "id": 19,
    "text": "function(self, array_param)\r\n    return array_param\r\n  end",
    "type": "function"
  }, {
    "id": 20,
    "text": "function(self, array)\r\n    for i=1,9 do\r\n      print(tostring(i)..\" => \"..tostring(array[i].Teste))\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 21,
    "text": "function(self, in_param, in_out_param, out_param)\r\n    return in_out_param, in_param, in_param\r\n  end",
    "type": "function"
  }, {
    "id": 22,
    "text": "ImplInterfaceFromTypelib",
    "type": "global function"
  }, {
    "id": 23,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 24,
    "text": "print",
    "type": "global function"
  }, {
    "id": 25,
    "text": "type",
    "type": "global function"
  }, {
    "id": 26,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 27,
    "text": "require",
    "type": "global function"
  }, {
    "id": 28,
    "text": "",
    "type": "global variable"
  }, {
    "id": 29,
    "text": "",
    "type": "variable container"
  }, {
    "id": 30,
    "text": "",
    "type": "require container"
  }, {
    "id": 31,
    "text": "",
    "type": "global variable"
  }, {
    "id": 32,
    "text": "",
    "type": "n/a"
  }, {
    "id": 33,
    "text": "",
    "type": "global variable"
  }, {
    "id": 34,
    "text": "",
    "type": "n/a"
  }, {
    "id": 35,
    "text": "",
    "type": "global variable"
  }, {
    "id": 36,
    "text": "",
    "type": "n/a"
  }, {
    "id": 37,
    "text": "",
    "type": "global variable"
  }, {
    "id": 38,
    "text": "",
    "type": "n/a"
  }, {
    "id": 39,
    "text": "",
    "type": "global variable"
  }, {
    "id": 40,
    "text": "",
    "type": "global variable"
  }, {
    "id": 41,
    "text": "",
    "type": "global variable"
  }, {
    "id": 42,
    "text": "",
    "type": "n/a"
  }, {
    "id": 43,
    "text": "",
    "type": "global variable"
  }, {
    "id": 44,
    "text": "",
    "type": "global variable"
  }, {
    "id": 45,
    "text": "",
    "type": "global variable"
  }, {
    "id": 46,
    "text": "",
    "type": "global variable"
  }, {
    "id": 47,
    "text": "",
    "type": "n/a"
  }, {
    "id": 48,
    "text": "",
    "type": "global variable"
  }, {
    "id": 49,
    "text": "",
    "type": "n/a"
  }, {
    "id": 50,
    "text": "",
    "type": "global variable"
  }, {
    "id": 51,
    "text": "",
    "type": "n/a"
  }, {
    "id": 52,
    "text": "",
    "type": "global variable"
  }, {
    "id": 53,
    "text": "",
    "type": "global variable"
  }, {
    "id": 54,
    "text": "",
    "type": "global variable"
  }, {
    "id": 55,
    "text": "",
    "type": "global variable"
  }, {
    "id": 56,
    "text": "",
    "type": "n/a"
  }, {
    "id": 57,
    "text": "",
    "type": "global variable"
  }, {
    "id": 58,
    "text": "",
    "type": "global variable"
  } ]
}