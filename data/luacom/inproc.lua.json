{
  "_filename": "inproc.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luacom/demo/server/inproc.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 9,
    "label": "has",
    "to": 13
  }, {
    "from": 9,
    "label": "has",
    "to": 14
  }, {
    "from": 9,
    "label": "has",
    "to": 15
  }, {
    "from": 9,
    "label": "has",
    "to": 4
  }, {
    "from": 9,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 17,
    "label": "has",
    "to": 22
  }, {
    "from": 17,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 17,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 30
  }, {
    "from": 26,
    "label": "has",
    "to": 31
  }, {
    "from": 26,
    "label": "has",
    "to": 32
  }, {
    "from": 26,
    "label": "has",
    "to": 33
  }, {
    "from": 26,
    "label": "has",
    "to": 34
  }, {
    "from": 26,
    "label": "has",
    "to": 35
  }, {
    "from": 26,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 26,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 27
  }, {
    "from": 39,
    "label": "has",
    "to": 28
  }, {
    "from": 39,
    "label": "has",
    "to": 29
  }, {
    "from": 39,
    "label": "has",
    "to": 30
  }, {
    "from": 39,
    "label": "has",
    "to": 31
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 39,
    "label": "has",
    "to": 43
  }, {
    "from": 17,
    "label": "calls",
    "to": 49
  }, {
    "from": 9,
    "label": "calls",
    "to": 55
  }, {
    "from": 26,
    "label": "calls",
    "to": 46
  }, {
    "from": 9,
    "label": "calls",
    "to": 53
  }, {
    "from": 44,
    "label": "calls",
    "to": 47
  }, {
    "from": 39,
    "label": "calls",
    "to": 50
  }, {
    "from": 44,
    "label": "calls",
    "to": 56
  }, {
    "from": 6,
    "label": "calls",
    "to": 51
  }, {
    "from": 17,
    "label": "calls",
    "to": 48
  }, {
    "from": 17,
    "label": "calls",
    "to": 54
  }, {
    "from": 17,
    "label": "calls",
    "to": 54
  }, {
    "from": 26,
    "label": "calls",
    "to": 54
  }, {
    "from": 39,
    "label": "calls",
    "to": 54
  }, {
    "from": 2,
    "label": "calls",
    "to": 52
  }, {
    "from": 6,
    "label": "calls",
    "to": 52
  }, {
    "from": 9,
    "label": "calls",
    "to": 52
  }, {
    "from": 17,
    "label": "calls",
    "to": 52
  }, {
    "from": 1,
    "label": "contains",
    "to": 44
  }, {
    "from": 44,
    "label": "declares",
    "to": 2
  }, {
    "from": 44,
    "label": "declares",
    "to": 6
  }, {
    "from": 44,
    "label": "declares",
    "to": 9
  }, {
    "from": 44,
    "label": "declares",
    "to": 17
  }, {
    "from": 44,
    "label": "declares",
    "to": 26
  }, {
    "from": 44,
    "label": "declares",
    "to": 39
  }, {
    "from": 1,
    "label": "contains",
    "to": 58
  }, {
    "from": 1,
    "label": "contains",
    "to": 59
  }, {
    "from": 58,
    "label": "initializes",
    "to": 60
  }, {
    "from": 60,
    "label": "assigns",
    "to": 61
  }, {
    "from": 58,
    "label": "initializes",
    "to": 62
  }, {
    "from": 62,
    "label": "assigns",
    "to": 63
  }, {
    "from": 58,
    "label": "initializes",
    "to": 64
  }, {
    "from": 58,
    "label": "initializes",
    "to": 65
  }, {
    "from": 58,
    "label": "initializes",
    "to": 66
  }, {
    "from": 58,
    "label": "initializes",
    "to": 67
  }, {
    "from": 59,
    "label": "initializes",
    "to": 57
  }, {
    "from": 1,
    "label": "provides",
    "to": 68
  }, {
    "from": 68,
    "label": "provides",
    "to": 69
  }, {
    "from": 60,
    "label": "contains",
    "to": 45
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "inproc",
    "type": "module"
  }, {
    "id": 2,
    "text": "function obj:Sum(i1, i2)\r\n  print(\"Calling Sum...\",i1,i2)\r\n  return i1 + i2\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "print(\"Calling Sum...\",i1,i2)",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "function obj:I2A(i1)\r\n  print(\"Calling I2A...\",i1)\r\n  return tostring(i1)\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "print(\"Calling I2A...\",i1)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function obj:IntDivide(i1, i2)\r\n  print(\"Calling IntDivide...\",i1,i2)\r\n  quot, rest = {}, {}\r\n  quot.Type = \"int\"\r\n  quot.Value = math.floor(i1/i2)\r\n  rest.Type = \"int\"\r\n  rest.Value = math.mod(i1, i2)\r\n  return quot, rest\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "print(\"Calling IntDivide...\",i1,i2)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "quot, rest = {}, {}",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "quot.Type = \"int\"",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "quot.Value = math.floor(i1/i2)",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "rest.Type = \"int\"",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "rest.Value = math.mod(i1, i2)",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function COM:StartAutomation()\r\n  print(\"Starting server...\")\r\n  -- creates the object using its default interface\r\n  COMAppObject, events, e = luacom.NewObject(obj, \"testlua.Teste\")\r\n  -- This error will be caught by detectAutomation\r\n  if COMAppObject == nil then\r\n    error(\"NewObject failed: \"..e)\r\n  end\r\n  -- Exposes the object\r\n  cookie = luacom.ExposeObject(COMAppObject)\r\n  if cookie == nil then\r\n    error(\"ExposeObject failed!\")\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "print(\"Starting server...\")",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "COMAppObject, events, e = luacom.NewObject(obj, \"testlua.Teste\")",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "if COMAppObject == nil then\r\n    error(\"NewObject failed: \"..e)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "error(\"NewObject failed: \"..e)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "cookie = luacom.ExposeObject(COMAppObject)",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "if cookie == nil then\r\n    error(\"ExposeObject failed!\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "error(\"ExposeObject failed!\")",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function COM:Register()\r\n  -- fills table with registration information\r\n  local reginfo = {}\r\n  reginfo.VersionIndependentProgID = \"testlua.Teste\"\r\n  reginfo.ProgID = reginfo.VersionIndependentProgID..\".1\"\r\n  reginfo.TypeLib = \"testlua.tlb\"\r\n  reginfo.CoClass = \"Teste\"\r\n  reginfo.ComponentName = \"Test Component\"\r\n  reginfo.Arguments = \"/Automation\"\r\n  reginfo.ScriptFile = \"inproc.lua\"\r\n  -- stores component information in the registry\r\n  local res = luacom.RegisterObject(reginfo)\r\n  if res == nil then\r\n    error(\"RegisterObject failed!\")\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "local reginfo = {}",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "reginfo.VersionIndependentProgID = \"testlua.Teste\"",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "reginfo.ProgID = reginfo.VersionIndependentProgID..\".1\"",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "reginfo.TypeLib = \"testlua.tlb\"",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "reginfo.CoClass = \"Teste\"",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "reginfo.ComponentName = \"Test Component\"",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "reginfo.Arguments = \"/Automation\"",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "reginfo.ScriptFile = \"inproc.lua\"",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "local res = luacom.RegisterObject(reginfo)",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "if res == nil then\r\n    error(\"RegisterObject failed!\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "error(\"RegisterObject failed!\")",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function COM:UnRegister()\r\n  -- fills table with registration information\r\n  local reginfo = {}\r\n  reginfo.VersionIndependentProgID = \"testlua.Teste\"\r\n  reginfo.ProgID = reginfo.VersionIndependentProgID..\".1\"\r\n  reginfo.TypeLib = \"testlua.tlb\"\r\n  reginfo.CoClass = \"Teste\"\r\n  -- deletes component information from the registry\r\n  local res = luacom.UnRegisterObject(reginfo)\r\n  if res == nil then\r\n    error(\"UnRegisterObject failed!\")\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "local res = luacom.UnRegisterObject(reginfo)",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "if res == nil then\r\n    error(\"UnRegisterObject failed!\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "error(\"UnRegisterObject failed!\")",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "",
    "type": "function container"
  }, {
    "id": 45,
    "text": "function() return 2 end",
    "type": "function"
  }, {
    "id": 46,
    "text": "RegisterObject",
    "type": "global function"
  }, {
    "id": 47,
    "text": "DetectAutomation",
    "type": "global function"
  }, {
    "id": 48,
    "text": "ExposeObject",
    "type": "global function"
  }, {
    "id": 49,
    "text": "NewObject",
    "type": "global function"
  }, {
    "id": 50,
    "text": "UnRegisterObject",
    "type": "global function"
  }, {
    "id": 51,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 52,
    "text": "print",
    "type": "global function"
  }, {
    "id": 53,
    "text": "floor",
    "type": "global function"
  }, {
    "id": 54,
    "text": "error",
    "type": "global function"
  }, {
    "id": 55,
    "text": "mod",
    "type": "global function"
  }, {
    "id": 56,
    "text": "require",
    "type": "global function"
  }, {
    "id": 57,
    "text": "",
    "type": "global variable"
  }, {
    "id": 58,
    "text": "",
    "type": "variable container"
  }, {
    "id": 59,
    "text": "",
    "type": "require container"
  }, {
    "id": 60,
    "text": "",
    "type": "local variable"
  }, {
    "id": 61,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 62,
    "text": "",
    "type": "local variable"
  }, {
    "id": 63,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 64,
    "text": "",
    "type": "local variable"
  }, {
    "id": 65,
    "text": "",
    "type": "local variable"
  }, {
    "id": 66,
    "text": "",
    "type": "local variable"
  }, {
    "id": 67,
    "text": "",
    "type": "local variable"
  }, {
    "id": 68,
    "text": "",
    "type": "interface container"
  }, {
    "id": 69,
    "text": "",
    "type": "interface"
  } ]
}