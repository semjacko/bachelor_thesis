{
  "_filename": "plasma.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luacom/demo/comm/plasma.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 2,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 19,
    "label": "has",
    "to": 25
  }, {
    "from": 19,
    "label": "has",
    "to": 16
  }, {
    "from": 19,
    "label": "has",
    "to": 26
  }, {
    "from": 18,
    "label": "has",
    "to": 27
  }, {
    "from": 18,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 33
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 29,
    "label": "has",
    "to": 35
  }, {
    "from": 29,
    "label": "has",
    "to": 36
  }, {
    "from": 29,
    "label": "has",
    "to": 37
  }, {
    "from": 29,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 44
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 11
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 14
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 49,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 56,
    "label": "has",
    "to": 59
  }, {
    "from": 56,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 60,
    "label": "has",
    "to": 64
  }, {
    "from": 60,
    "label": "has",
    "to": 65
  }, {
    "from": 60,
    "label": "has",
    "to": 66
  }, {
    "from": 56,
    "label": "has",
    "to": 67
  }, {
    "from": 56,
    "label": "has",
    "to": 68
  }, {
    "from": 56,
    "label": "has",
    "to": 27
  }, {
    "from": 56,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 71,
    "label": "has",
    "to": 57
  }, {
    "from": 71,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 74,
    "label": "has",
    "to": 66
  }, {
    "from": 70,
    "label": "has",
    "to": 27
  }, {
    "from": 70,
    "label": "has",
    "to": 27
  }, {
    "from": 70,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "calls",
    "to": 82
  }, {
    "from": 78,
    "label": "calls",
    "to": 90
  }, {
    "from": 29,
    "label": "calls",
    "to": 79
  }, {
    "from": 78,
    "label": "calls",
    "to": 83
  }, {
    "from": 2,
    "label": "calls",
    "to": 83
  }, {
    "from": 18,
    "label": "calls",
    "to": 83
  }, {
    "from": 78,
    "label": "calls",
    "to": 91
  }, {
    "from": 78,
    "label": "calls",
    "to": 91
  }, {
    "from": 2,
    "label": "calls",
    "to": 86
  }, {
    "from": 42,
    "label": "calls",
    "to": 86
  }, {
    "from": 46,
    "label": "calls",
    "to": 86
  }, {
    "from": 49,
    "label": "calls",
    "to": 86
  }, {
    "from": 2,
    "label": "calls",
    "to": 88
  }, {
    "from": 49,
    "label": "calls",
    "to": 88
  }, {
    "from": 78,
    "label": "calls",
    "to": 80
  }, {
    "from": 78,
    "label": "calls",
    "to": 89
  }, {
    "from": 2,
    "label": "calls",
    "to": 93
  }, {
    "from": 2,
    "label": "calls",
    "to": 93
  }, {
    "from": 2,
    "label": "calls",
    "to": 93
  }, {
    "from": 2,
    "label": "calls",
    "to": 93
  }, {
    "from": 2,
    "label": "calls",
    "to": 93
  }, {
    "from": 78,
    "label": "calls",
    "to": 92
  }, {
    "from": 78,
    "label": "calls",
    "to": 84
  }, {
    "from": 78,
    "label": "calls",
    "to": 84
  }, {
    "from": 2,
    "label": "calls",
    "to": 85
  }, {
    "from": 18,
    "label": "calls",
    "to": 87
  }, {
    "from": 18,
    "label": "calls",
    "to": 87
  }, {
    "from": 18,
    "label": "calls",
    "to": 87
  }, {
    "from": 2,
    "label": "calls",
    "to": 81
  }, {
    "from": 2,
    "label": "calls",
    "to": 81
  }, {
    "from": 2,
    "label": "calls",
    "to": 81
  }, {
    "from": 2,
    "label": "calls",
    "to": 81
  }, {
    "from": 18,
    "label": "calls",
    "to": 81
  }, {
    "from": 18,
    "label": "calls",
    "to": 81
  }, {
    "from": 18,
    "label": "calls",
    "to": 81
  }, {
    "from": 42,
    "label": "calls",
    "to": 81
  }, {
    "from": 46,
    "label": "calls",
    "to": 81
  }, {
    "from": 49,
    "label": "calls",
    "to": 81
  }, {
    "from": 49,
    "label": "calls",
    "to": 81
  }, {
    "from": 49,
    "label": "calls",
    "to": 81
  }, {
    "from": 49,
    "label": "calls",
    "to": 81
  }, {
    "from": 1,
    "label": "contains",
    "to": 78
  }, {
    "from": 78,
    "label": "declares",
    "to": 2
  }, {
    "from": 78,
    "label": "declares",
    "to": 18
  }, {
    "from": 78,
    "label": "declares",
    "to": 29
  }, {
    "from": 78,
    "label": "declares",
    "to": 39
  }, {
    "from": 78,
    "label": "declares",
    "to": 42
  }, {
    "from": 78,
    "label": "declares",
    "to": 46
  }, {
    "from": 78,
    "label": "declares",
    "to": 49
  }, {
    "from": 78,
    "label": "declares",
    "to": 56
  }, {
    "from": 78,
    "label": "declares",
    "to": 70
  }, {
    "from": 1,
    "label": "contains",
    "to": 95
  }, {
    "from": 1,
    "label": "contains",
    "to": 96
  }, {
    "from": 96,
    "label": "initializes",
    "to": 94
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "plasma",
    "type": "module"
  }, {
    "id": 2,
    "text": "function Plasma:write(cmd1,cmd2,data)\r\n   if not data then\r\n      data = {}\r\n   end\r\n   tinsert(data,1,getn(data))\r\n   tinsert(data,1,cmd2)\r\n   tinsert(data,1,\"60\")\r\n   tinsert(data,1,\"80\")\r\n   tinsert(data,1,cmd1)\r\n   local msg = in1.pack(data)\r\n   print(in1.byte2str(msg))\r\n   print(strlen(msg))\r\n   if self.obj and self.obj.PortOpen ~= 0 then\r\n      print(\"Writing\")\r\n      self.obj.Output = msg\r\n      print(self.obj.CommEvent)\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "if not data then\r\n      data = {}\r\n   end",
    "type": "statement:if"
  }, {
    "id": 4,
    "text": "data = {}",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "tinsert(data,1,getn(data))",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "tinsert(data,1,cmd2)",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "tinsert(data,1,\"60\")",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "tinsert(data,1,\"80\")",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "tinsert(data,1,cmd1)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "local msg = in1.pack(data)",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "print(in1.byte2str(msg))",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "print(strlen(msg))",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "if self.obj and self.obj.PortOpen ~= 0 then\r\n      print(\"Writing\")\r\n      self.obj.Output = msg\r\n      print(self.obj.CommEvent)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "print(\"Writing\")",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "self.obj.Output = msg",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "print(self.obj.CommEvent)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function Plasma:read(n,dt)\r\n   if self.obj and self.obj.PortOpen ~= 0 then\r\n      local data = \"\"\r\n      local t0 = clock()\r\n      dt = dt or 5\r\n      while (strlen(data) < n) and (clock() - t0 < dt) do\r\n         data = data .. self.obj.Input\r\n      end\r\n      print(clock()- t0)\r\n      print(self.obj.CommEvent)\r\n      return data\r\n   else\r\n      print \"Read Error: Comm port is not open\"\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "if self.obj and self.obj.PortOpen ~= 0 then\r\n      local data = \"\"\r\n      local t0 = clock()\r\n      dt = dt or 5\r\n      while (strlen(data) < n) and (clock() - t0 < dt) do\r\n         data = data .. self.obj.Input\r\n      end\r\n      print(clock()- t0)\r\n      print(self.obj.CommEvent)\r\n      return data\r\n   else\r\n      print \"Read Error: Comm port is not open\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "local data = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "local t0 = clock()",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "dt = dt or 5",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "while (strlen(data) < n) and (clock() - t0 < dt) do\r\n         data = data .. self.obj.Input\r\n      end",
    "type": "statement:while"
  }, {
    "id": 24,
    "text": "data = data .. self.obj.Input",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "print(clock()- t0)",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "print \"Read Error: Comm port is not open\"",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function Plasma:open(port)\r\n   local obj\r\n   obj = luacom.CreateObject(\"MSCOMMLib.MSComm.1\")\r\n   obj.CommPort = (port or 1)\r\n   obj.Settings = \"9600,O,8,1\"\r\n   obj.InputLen = 0\r\n   obj.InputMode = 1\r\n   obj.PortOpen = 1\r\n   self.obj = obj\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "local obj",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "obj = luacom.CreateObject(\"MSCOMMLib.MSComm.1\")",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "obj.CommPort = (port or 1)",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "obj.Settings = \"9600,O,8,1\"",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "obj.InputLen = 0",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "obj.InputMode = 1",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "obj.PortOpen = 1",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "self.obj = obj",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function Plasma:close()\r\n   self.obj.PortOpen = 0\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "self.obj.PortOpen = 0",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function Plasma:on()\r\n   self:write(\"9f\",\"4e\")\r\n   print(in1.byte2str(self:read(6,15)))\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "self:write(\"9f\",\"4e\")",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "print(in1.byte2str(self:read(6,15)))",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function Plasma:off()\r\n   self:write(\"9f\",\"4f\")\r\n   print(in1.byte2str(self:read(6,15)))\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "self:write(\"9f\",\"4f\")",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function acox()\r\n   local msg = in1.pack({98,121,101}) -- bye\r\n   print(msg)\r\n   print(in1.byte2str(msg))\r\n   if Plasma.obj and Plasma.obj.PortOpen ~= 0 then\r\n      print(\"Writing\")\r\n      Plasma.obj.Output = msg\r\n      print(Plasma.obj.CommEvent)\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "local msg = in1.pack({98,121,101})",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "print(msg)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "if Plasma.obj and Plasma.obj.PortOpen ~= 0 then\r\n      print(\"Writing\")\r\n      Plasma.obj.Output = msg\r\n      print(Plasma.obj.CommEvent)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "Plasma.obj.Output = msg",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "print(Plasma.obj.CommEvent)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function (data)\r\n      local i = 1\r\n      local sum = 0\r\n      local buffer = \"\"\r\n      while data[i] do\r\n         local v = data[i]\r\n         if type(v) == \"string\" then\r\n            v = tonumber(v,16)\r\n         end\r\n         sum = sum + v\r\n         buffer = buffer .. strchar(v)\r\n         i = i + 1\r\n      end\r\n      local aux = mod(sum,256)\r\n      buffer = buffer .. strchar(aux)\r\n      return buffer\r\n   end",
    "type": "function"
  }, {
    "id": 57,
    "text": "local i = 1",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "local sum = 0",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "local buffer = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "while data[i] do\r\n         local v = data[i]\r\n         if type(v) == \"string\" then\r\n            v = tonumber(v,16)\r\n         end\r\n         sum = sum + v\r\n         buffer = buffer .. strchar(v)\r\n         i = i + 1\r\n      end",
    "type": "statement:while"
  }, {
    "id": 61,
    "text": "local v = data[i]",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "if type(v) == \"string\" then\r\n            v = tonumber(v,16)\r\n         end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "v = tonumber(v,16)",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "sum = sum + v",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "buffer = buffer .. strchar(v)",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "local aux = mod(sum,256)",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "buffer = buffer .. strchar(aux)",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function(buf)\r\n      if buf and type(buf) == \"string\" then\r\n         local n = strlen(buf)\r\n         local code = \"\"\r\n         local i = 1\r\n         while i <= n do\r\n            local hexa = format(\"%02x\",strbyte(buf,i))\r\n            code = code .. hexa\r\n            i = i + 1\r\n         end\r\n         return code\r\n      else\r\n         return \"\"\r\n      end\r\n   end",
    "type": "function"
  }, {
    "id": 71,
    "text": "if buf and type(buf) == \"string\" then\r\n         local n = strlen(buf)\r\n         local code = \"\"\r\n         local i = 1\r\n         while i <= n do\r\n            local hexa = format(\"%02x\",strbyte(buf,i))\r\n            code = code .. hexa\r\n            i = i + 1\r\n         end\r\n         return code\r\n      else\r\n         return \"\"\r\n      end",
    "type": "statement:if"
  }, {
    "id": 72,
    "text": "local n = strlen(buf)",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "local code = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "while i <= n do\r\n            local hexa = format(\"%02x\",strbyte(buf,i))\r\n            code = code .. hexa\r\n            i = i + 1\r\n         end",
    "type": "statement:while"
  }, {
    "id": 75,
    "text": "local hexa = format(\"%02x\",strbyte(buf,i))",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "code = code .. hexa",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "",
    "type": "function container"
  }, {
    "id": 79,
    "text": "CreateObject",
    "type": "global function"
  }, {
    "id": 80,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 81,
    "text": "print",
    "type": "global function"
  }, {
    "id": 82,
    "text": "format",
    "type": "global function"
  }, {
    "id": 83,
    "text": "strlen",
    "type": "global function"
  }, {
    "id": 84,
    "text": "type",
    "type": "global function"
  }, {
    "id": 85,
    "text": "getn",
    "type": "global function"
  }, {
    "id": 86,
    "text": "byte2str",
    "type": "global function"
  }, {
    "id": 87,
    "text": "clock",
    "type": "global function"
  }, {
    "id": 88,
    "text": "pack",
    "type": "global function"
  }, {
    "id": 89,
    "text": "mod",
    "type": "global function"
  }, {
    "id": 90,
    "text": "strbyte",
    "type": "global function"
  }, {
    "id": 91,
    "text": "strchar",
    "type": "global function"
  }, {
    "id": 92,
    "text": "require",
    "type": "global function"
  }, {
    "id": 93,
    "text": "tinsert",
    "type": "global function"
  }, {
    "id": 94,
    "text": "",
    "type": "global variable"
  }, {
    "id": 95,
    "text": "",
    "type": "variable container"
  }, {
    "id": 96,
    "text": "",
    "type": "require container"
  } ]
}