{
  "_filename": "fs.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-path/lua/path/win32/fs.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 4,
    "label": "calls",
    "to": 427
  }, {
    "from": 4,
    "label": "calls",
    "to": 427
  }, {
    "from": 4,
    "label": "calls",
    "to": 480
  }, {
    "from": 4,
    "label": "calls",
    "to": 3
  }, {
    "from": 4,
    "label": "calls",
    "to": 3
  }, {
    "from": 4,
    "label": "calls",
    "to": 448
  }, {
    "from": 2,
    "label": "contains",
    "to": 4
  }, {
    "from": 4,
    "label": "declares",
    "to": 3
  }, {
    "from": 4,
    "label": "calls",
    "to": 480
  }, {
    "from": 4,
    "label": "calls",
    "to": 480
  }, {
    "from": 4,
    "label": "calls",
    "to": 424
  }, {
    "from": 4,
    "label": "calls",
    "to": 18
  }, {
    "from": 4,
    "label": "calls",
    "to": 18
  }, {
    "from": 4,
    "label": "calls",
    "to": 439
  }, {
    "from": 4,
    "label": "calls",
    "to": 468
  }, {
    "from": 4,
    "label": "calls",
    "to": 21
  }, {
    "from": 4,
    "label": "calls",
    "to": 432
  }, {
    "from": 4,
    "label": "calls",
    "to": 433
  }, {
    "from": 4,
    "label": "calls",
    "to": 20
  }, {
    "from": 4,
    "label": "calls",
    "to": 428
  }, {
    "from": 4,
    "label": "calls",
    "to": 435
  }, {
    "from": 4,
    "label": "calls",
    "to": 19
  }, {
    "from": 4,
    "label": "calls",
    "to": 19
  }, {
    "from": 4,
    "label": "calls",
    "to": 480
  }, {
    "from": 4,
    "label": "calls",
    "to": 480
  }, {
    "from": 4,
    "label": "declares",
    "to": 5
  }, {
    "from": 4,
    "label": "declares",
    "to": 6
  }, {
    "from": 4,
    "label": "declares",
    "to": 7
  }, {
    "from": 4,
    "label": "declares",
    "to": 8
  }, {
    "from": 4,
    "label": "declares",
    "to": 9
  }, {
    "from": 4,
    "label": "declares",
    "to": 10
  }, {
    "from": 4,
    "label": "declares",
    "to": 11
  }, {
    "from": 4,
    "label": "declares",
    "to": 12
  }, {
    "from": 4,
    "label": "declares",
    "to": 13
  }, {
    "from": 4,
    "label": "declares",
    "to": 14
  }, {
    "from": 4,
    "label": "declares",
    "to": 15
  }, {
    "from": 4,
    "label": "declares",
    "to": 16
  }, {
    "from": 4,
    "label": "declares",
    "to": 17
  }, {
    "from": 4,
    "label": "declares",
    "to": 18
  }, {
    "from": 4,
    "label": "declares",
    "to": 19
  }, {
    "from": 4,
    "label": "declares",
    "to": 20
  }, {
    "from": 4,
    "label": "declares",
    "to": 21
  }, {
    "from": 4,
    "label": "declares",
    "to": 22
  }, {
    "from": 4,
    "label": "declares",
    "to": 23
  }, {
    "from": 4,
    "label": "declares",
    "to": 24
  }, {
    "from": 4,
    "label": "declares",
    "to": 25
  }, {
    "from": 4,
    "label": "declares",
    "to": 26
  }, {
    "from": 4,
    "label": "declares",
    "to": 27
  }, {
    "from": 4,
    "label": "declares",
    "to": 28
  }, {
    "from": 4,
    "label": "declares",
    "to": 29
  }, {
    "from": 4,
    "label": "declares",
    "to": 30
  }, {
    "from": 4,
    "label": "declares",
    "to": 31
  }, {
    "from": 4,
    "label": "declares",
    "to": 32
  }, {
    "from": 4,
    "label": "declares",
    "to": 33
  }, {
    "from": 4,
    "label": "declares",
    "to": 34
  }, {
    "from": 4,
    "label": "declares",
    "to": 35
  }, {
    "from": 4,
    "label": "declares",
    "to": 36
  }, {
    "from": 4,
    "label": "declares",
    "to": 37
  }, {
    "from": 4,
    "label": "declares",
    "to": 38
  }, {
    "from": 4,
    "label": "declares",
    "to": 39
  }, {
    "from": 4,
    "label": "declares",
    "to": 40
  }, {
    "from": 4,
    "label": "declares",
    "to": 41
  }, {
    "from": 4,
    "label": "declares",
    "to": 42
  }, {
    "from": 4,
    "label": "declares",
    "to": 43
  }, {
    "from": 4,
    "label": "declares",
    "to": 44
  }, {
    "from": 4,
    "label": "declares",
    "to": 45
  }, {
    "from": 4,
    "label": "declares",
    "to": 46
  }, {
    "from": 4,
    "label": "declares",
    "to": 47
  }, {
    "from": 4,
    "label": "declares",
    "to": 48
  }, {
    "from": 4,
    "label": "calls",
    "to": 480
  }, {
    "from": 4,
    "label": "calls",
    "to": 480
  }, {
    "from": 4,
    "label": "calls",
    "to": 58
  }, {
    "from": 4,
    "label": "calls",
    "to": 58
  }, {
    "from": 4,
    "label": "calls",
    "to": 448
  }, {
    "from": 4,
    "label": "calls",
    "to": 448
  }, {
    "from": 4,
    "label": "calls",
    "to": 448
  }, {
    "from": 4,
    "label": "calls",
    "to": 448
  }, {
    "from": 4,
    "label": "calls",
    "to": 448
  }, {
    "from": 4,
    "label": "calls",
    "to": 448
  }, {
    "from": 4,
    "label": "calls",
    "to": 448
  }, {
    "from": 4,
    "label": "calls",
    "to": 448
  }, {
    "from": 4,
    "label": "calls",
    "to": 448
  }, {
    "from": 4,
    "label": "calls",
    "to": 448
  }, {
    "from": 4,
    "label": "calls",
    "to": 448
  }, {
    "from": 4,
    "label": "calls",
    "to": 448
  }, {
    "from": 4,
    "label": "calls",
    "to": 448
  }, {
    "from": 4,
    "label": "calls",
    "to": 448
  }, {
    "from": 4,
    "label": "calls",
    "to": 448
  }, {
    "from": 4,
    "label": "calls",
    "to": 448
  }, {
    "from": 4,
    "label": "calls",
    "to": 448
  }, {
    "from": 4,
    "label": "calls",
    "to": 448
  }, {
    "from": 4,
    "label": "calls",
    "to": 448
  }, {
    "from": 4,
    "label": "calls",
    "to": 448
  }, {
    "from": 4,
    "label": "calls",
    "to": 448
  }, {
    "from": 4,
    "label": "calls",
    "to": 448
  }, {
    "from": 4,
    "label": "calls",
    "to": 448
  }, {
    "from": 4,
    "label": "calls",
    "to": 448
  }, {
    "from": 4,
    "label": "calls",
    "to": 448
  }, {
    "from": 4,
    "label": "calls",
    "to": 448
  }, {
    "from": 4,
    "label": "calls",
    "to": 448
  }, {
    "from": 4,
    "label": "calls",
    "to": 448
  }, {
    "from": 4,
    "label": "calls",
    "to": 448
  }, {
    "from": 4,
    "label": "calls",
    "to": 448
  }, {
    "from": 4,
    "label": "calls",
    "to": 448
  }, {
    "from": 4,
    "label": "calls",
    "to": 448
  }, {
    "from": 4,
    "label": "calls",
    "to": 448
  }, {
    "from": 4,
    "label": "calls",
    "to": 52
  }, {
    "from": 4,
    "label": "calls",
    "to": 52
  }, {
    "from": 4,
    "label": "calls",
    "to": 60
  }, {
    "from": 4,
    "label": "calls",
    "to": 60
  }, {
    "from": 4,
    "label": "calls",
    "to": 50
  }, {
    "from": 4,
    "label": "calls",
    "to": 50
  }, {
    "from": 4,
    "label": "calls",
    "to": 51
  }, {
    "from": 4,
    "label": "calls",
    "to": 51
  }, {
    "from": 4,
    "label": "calls",
    "to": 55
  }, {
    "from": 4,
    "label": "calls",
    "to": 55
  }, {
    "from": 4,
    "label": "calls",
    "to": 67
  }, {
    "from": 4,
    "label": "calls",
    "to": 67
  }, {
    "from": 4,
    "label": "calls",
    "to": 49
  }, {
    "from": 4,
    "label": "calls",
    "to": 49
  }, {
    "from": 4,
    "label": "calls",
    "to": 62
  }, {
    "from": 4,
    "label": "calls",
    "to": 62
  }, {
    "from": 4,
    "label": "calls",
    "to": 57
  }, {
    "from": 4,
    "label": "calls",
    "to": 57
  }, {
    "from": 4,
    "label": "calls",
    "to": 419
  }, {
    "from": 4,
    "label": "calls",
    "to": 65
  }, {
    "from": 4,
    "label": "calls",
    "to": 65
  }, {
    "from": 4,
    "label": "calls",
    "to": 53
  }, {
    "from": 4,
    "label": "calls",
    "to": 53
  }, {
    "from": 4,
    "label": "calls",
    "to": 59
  }, {
    "from": 4,
    "label": "calls",
    "to": 59
  }, {
    "from": 4,
    "label": "calls",
    "to": 480
  }, {
    "from": 4,
    "label": "calls",
    "to": 480
  }, {
    "from": 4,
    "label": "calls",
    "to": 480
  }, {
    "from": 4,
    "label": "calls",
    "to": 56
  }, {
    "from": 4,
    "label": "calls",
    "to": 56
  }, {
    "from": 4,
    "label": "declares",
    "to": 49
  }, {
    "from": 4,
    "label": "declares",
    "to": 50
  }, {
    "from": 4,
    "label": "declares",
    "to": 51
  }, {
    "from": 4,
    "label": "declares",
    "to": 52
  }, {
    "from": 4,
    "label": "declares",
    "to": 53
  }, {
    "from": 4,
    "label": "declares",
    "to": 54
  }, {
    "from": 4,
    "label": "declares",
    "to": 55
  }, {
    "from": 4,
    "label": "declares",
    "to": 56
  }, {
    "from": 4,
    "label": "declares",
    "to": 57
  }, {
    "from": 4,
    "label": "declares",
    "to": 58
  }, {
    "from": 4,
    "label": "declares",
    "to": 59
  }, {
    "from": 4,
    "label": "declares",
    "to": 60
  }, {
    "from": 4,
    "label": "declares",
    "to": 61
  }, {
    "from": 4,
    "label": "declares",
    "to": 62
  }, {
    "from": 4,
    "label": "declares",
    "to": 63
  }, {
    "from": 4,
    "label": "declares",
    "to": 64
  }, {
    "from": 4,
    "label": "declares",
    "to": 65
  }, {
    "from": 4,
    "label": "declares",
    "to": 66
  }, {
    "from": 4,
    "label": "declares",
    "to": 67
  }, {
    "from": 4,
    "label": "declares",
    "to": 68
  }, {
    "from": 4,
    "label": "declares",
    "to": 69
  }, {
    "from": 4,
    "label": "declares",
    "to": 70
  }, {
    "from": 4,
    "label": "declares",
    "to": 71
  }, {
    "from": 4,
    "label": "declares",
    "to": 72
  }, {
    "from": 4,
    "label": "declares",
    "to": 73
  }, {
    "from": 4,
    "label": "declares",
    "to": 74
  }, {
    "from": 4,
    "label": "declares",
    "to": 75
  }, {
    "from": 4,
    "label": "declares",
    "to": 76
  }, {
    "from": 4,
    "label": "declares",
    "to": 77
  }, {
    "from": 4,
    "label": "declares",
    "to": 78
  }, {
    "from": 4,
    "label": "declares",
    "to": 79
  }, {
    "from": 4,
    "label": "declares",
    "to": 80
  }, {
    "from": 4,
    "label": "declares",
    "to": 81
  }, {
    "from": 4,
    "label": "declares",
    "to": 82
  }, {
    "from": 4,
    "label": "declares",
    "to": 83
  }, {
    "from": 4,
    "label": "declares",
    "to": 84
  }, {
    "from": 4,
    "label": "declares",
    "to": 85
  }, {
    "from": 4,
    "label": "declares",
    "to": 86
  }, {
    "from": 4,
    "label": "declares",
    "to": 87
  }, {
    "from": 4,
    "label": "declares",
    "to": 88
  }, {
    "from": 4,
    "label": "declares",
    "to": 89
  }, {
    "from": 4,
    "label": "declares",
    "to": 90
  }, {
    "from": 4,
    "label": "declares",
    "to": 91
  }, {
    "from": 4,
    "label": "declares",
    "to": 92
  }, {
    "from": 4,
    "label": "declares",
    "to": 93
  }, {
    "from": 4,
    "label": "declares",
    "to": 94
  }, {
    "from": 4,
    "label": "declares",
    "to": 95
  }, {
    "from": 4,
    "label": "calls",
    "to": 108
  }, {
    "from": 4,
    "label": "calls",
    "to": 108
  }, {
    "from": 4,
    "label": "calls",
    "to": 101
  }, {
    "from": 4,
    "label": "calls",
    "to": 101
  }, {
    "from": 4,
    "label": "calls",
    "to": 102
  }, {
    "from": 4,
    "label": "calls",
    "to": 102
  }, {
    "from": 4,
    "label": "calls",
    "to": 100
  }, {
    "from": 4,
    "label": "calls",
    "to": 100
  }, {
    "from": 4,
    "label": "calls",
    "to": 480
  }, {
    "from": 4,
    "label": "calls",
    "to": 480
  }, {
    "from": 4,
    "label": "calls",
    "to": 107
  }, {
    "from": 4,
    "label": "calls",
    "to": 107
  }, {
    "from": 4,
    "label": "calls",
    "to": 98
  }, {
    "from": 4,
    "label": "calls",
    "to": 98
  }, {
    "from": 4,
    "label": "calls",
    "to": 99
  }, {
    "from": 4,
    "label": "calls",
    "to": 99
  }, {
    "from": 4,
    "label": "calls",
    "to": 106
  }, {
    "from": 4,
    "label": "calls",
    "to": 106
  }, {
    "from": 4,
    "label": "calls",
    "to": 115
  }, {
    "from": 4,
    "label": "calls",
    "to": 115
  }, {
    "from": 4,
    "label": "calls",
    "to": 418
  }, {
    "from": 4,
    "label": "calls",
    "to": 105
  }, {
    "from": 4,
    "label": "calls",
    "to": 105
  }, {
    "from": 4,
    "label": "calls",
    "to": 96
  }, {
    "from": 4,
    "label": "calls",
    "to": 96
  }, {
    "from": 4,
    "label": "calls",
    "to": 113
  }, {
    "from": 4,
    "label": "calls",
    "to": 113
  }, {
    "from": 4,
    "label": "calls",
    "to": 103
  }, {
    "from": 4,
    "label": "calls",
    "to": 103
  }, {
    "from": 4,
    "label": "calls",
    "to": 97
  }, {
    "from": 4,
    "label": "calls",
    "to": 97
  }, {
    "from": 4,
    "label": "calls",
    "to": 109
  }, {
    "from": 4,
    "label": "calls",
    "to": 109
  }, {
    "from": 4,
    "label": "declares",
    "to": 97
  }, {
    "from": 4,
    "label": "declares",
    "to": 98
  }, {
    "from": 4,
    "label": "declares",
    "to": 99
  }, {
    "from": 4,
    "label": "declares",
    "to": 100
  }, {
    "from": 4,
    "label": "declares",
    "to": 101
  }, {
    "from": 4,
    "label": "declares",
    "to": 102
  }, {
    "from": 4,
    "label": "declares",
    "to": 103
  }, {
    "from": 4,
    "label": "declares",
    "to": 104
  }, {
    "from": 4,
    "label": "declares",
    "to": 105
  }, {
    "from": 4,
    "label": "declares",
    "to": 106
  }, {
    "from": 4,
    "label": "declares",
    "to": 107
  }, {
    "from": 4,
    "label": "declares",
    "to": 108
  }, {
    "from": 4,
    "label": "declares",
    "to": 109
  }, {
    "from": 4,
    "label": "declares",
    "to": 110
  }, {
    "from": 4,
    "label": "declares",
    "to": 111
  }, {
    "from": 4,
    "label": "declares",
    "to": 112
  }, {
    "from": 4,
    "label": "declares",
    "to": 113
  }, {
    "from": 4,
    "label": "declares",
    "to": 114
  }, {
    "from": 4,
    "label": "declares",
    "to": 115
  }, {
    "from": 4,
    "label": "declares",
    "to": 116
  }, {
    "from": 4,
    "label": "declares",
    "to": 117
  }, {
    "from": 4,
    "label": "declares",
    "to": 118
  }, {
    "from": 4,
    "label": "declares",
    "to": 119
  }, {
    "from": 4,
    "label": "declares",
    "to": 120
  }, {
    "from": 4,
    "label": "declares",
    "to": 121
  }, {
    "from": 4,
    "label": "declares",
    "to": 122
  }, {
    "from": 4,
    "label": "declares",
    "to": 123
  }, {
    "from": 4,
    "label": "declares",
    "to": 124
  }, {
    "from": 4,
    "label": "declares",
    "to": 125
  }, {
    "from": 4,
    "label": "declares",
    "to": 126
  }, {
    "from": 4,
    "label": "declares",
    "to": 127
  }, {
    "from": 4,
    "label": "declares",
    "to": 128
  }, {
    "from": 4,
    "label": "declares",
    "to": 129
  }, {
    "from": 4,
    "label": "declares",
    "to": 130
  }, {
    "from": 4,
    "label": "declares",
    "to": 131
  }, {
    "from": 4,
    "label": "declares",
    "to": 132
  }, {
    "from": 4,
    "label": "declares",
    "to": 133
  }, {
    "from": 4,
    "label": "declares",
    "to": 134
  }, {
    "from": 4,
    "label": "declares",
    "to": 135
  }, {
    "from": 4,
    "label": "declares",
    "to": 136
  }, {
    "from": 4,
    "label": "declares",
    "to": 137
  }, {
    "from": 4,
    "label": "declares",
    "to": 138
  }, {
    "from": 4,
    "label": "declares",
    "to": 139
  }, {
    "from": 4,
    "label": "declares",
    "to": 140
  }, {
    "from": 4,
    "label": "declares",
    "to": 141
  }, {
    "from": 4,
    "label": "declares",
    "to": 142
  }, {
    "from": 4,
    "label": "declares",
    "to": 143
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 144,
    "label": "has",
    "to": 146
  }, {
    "from": 144,
    "label": "has",
    "to": 147
  }, {
    "from": 144,
    "label": "has",
    "to": 147
  }, {
    "from": 144,
    "label": "has",
    "to": 148
  }, {
    "from": 149,
    "label": "has",
    "to": 147
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 151,
    "label": "has",
    "to": 147
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 153,
    "label": "has",
    "to": 147
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 155,
    "label": "has",
    "to": 157
  }, {
    "from": 155,
    "label": "has",
    "to": 158
  }, {
    "from": 155,
    "label": "has",
    "to": 147
  }, {
    "from": 155,
    "label": "has",
    "to": 159
  }, {
    "from": 160,
    "label": "has",
    "to": 147
  }, {
    "from": 160,
    "label": "has",
    "to": 161
  }, {
    "from": 162,
    "label": "has",
    "to": 147
  }, {
    "from": 162,
    "label": "has",
    "to": 163
  }, {
    "from": 164,
    "label": "has",
    "to": 165
  }, {
    "from": 164,
    "label": "has",
    "to": 166
  }, {
    "from": 164,
    "label": "has",
    "to": 167
  }, {
    "from": 164,
    "label": "has",
    "to": 168
  }, {
    "from": 164,
    "label": "has",
    "to": 169
  }, {
    "from": 164,
    "label": "has",
    "to": 170
  }, {
    "from": 164,
    "label": "has",
    "to": 171
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 171,
    "label": "has",
    "to": 173
  }, {
    "from": 171,
    "label": "has",
    "to": 174
  }, {
    "from": 164,
    "label": "has",
    "to": 147
  }, {
    "from": 164,
    "label": "has",
    "to": 175
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 176,
    "label": "has",
    "to": 147
  }, {
    "from": 176,
    "label": "has",
    "to": 178
  }, {
    "from": 176,
    "label": "has",
    "to": 147
  }, {
    "from": 176,
    "label": "has",
    "to": 147
  }, {
    "from": 176,
    "label": "has",
    "to": 179
  }, {
    "from": 180,
    "label": "has",
    "to": 165
  }, {
    "from": 180,
    "label": "has",
    "to": 181
  }, {
    "from": 180,
    "label": "has",
    "to": 182
  }, {
    "from": 180,
    "label": "has",
    "to": 183
  }, {
    "from": 180,
    "label": "has",
    "to": 184
  }, {
    "from": 180,
    "label": "has",
    "to": 185
  }, {
    "from": 180,
    "label": "has",
    "to": 147
  }, {
    "from": 180,
    "label": "has",
    "to": 186
  }, {
    "from": 187,
    "label": "has",
    "to": 188
  }, {
    "from": 188,
    "label": "has",
    "to": 189
  }, {
    "from": 187,
    "label": "has",
    "to": 190
  }, {
    "from": 190,
    "label": "has",
    "to": 191
  }, {
    "from": 187,
    "label": "has",
    "to": 147
  }, {
    "from": 187,
    "label": "has",
    "to": 192
  }, {
    "from": 193,
    "label": "has",
    "to": 147
  }, {
    "from": 193,
    "label": "has",
    "to": 194
  }, {
    "from": 195,
    "label": "has",
    "to": 196
  }, {
    "from": 195,
    "label": "has",
    "to": 197
  }, {
    "from": 195,
    "label": "has",
    "to": 198
  }, {
    "from": 195,
    "label": "has",
    "to": 147
  }, {
    "from": 195,
    "label": "has",
    "to": 199
  }, {
    "from": 195,
    "label": "has",
    "to": 200
  }, {
    "from": 195,
    "label": "has",
    "to": 201
  }, {
    "from": 195,
    "label": "has",
    "to": 147
  }, {
    "from": 195,
    "label": "has",
    "to": 147
  }, {
    "from": 195,
    "label": "has",
    "to": 202
  }, {
    "from": 203,
    "label": "has",
    "to": 204
  }, {
    "from": 203,
    "label": "has",
    "to": 205
  }, {
    "from": 203,
    "label": "has",
    "to": 147
  }, {
    "from": 203,
    "label": "has",
    "to": 147
  }, {
    "from": 203,
    "label": "has",
    "to": 206
  }, {
    "from": 207,
    "label": "has",
    "to": 204
  }, {
    "from": 207,
    "label": "has",
    "to": 205
  }, {
    "from": 207,
    "label": "has",
    "to": 147
  }, {
    "from": 207,
    "label": "has",
    "to": 147
  }, {
    "from": 207,
    "label": "has",
    "to": 208
  }, {
    "from": 209,
    "label": "has",
    "to": 204
  }, {
    "from": 209,
    "label": "has",
    "to": 205
  }, {
    "from": 209,
    "label": "has",
    "to": 147
  }, {
    "from": 209,
    "label": "has",
    "to": 147
  }, {
    "from": 209,
    "label": "has",
    "to": 210
  }, {
    "from": 211,
    "label": "has",
    "to": 204
  }, {
    "from": 211,
    "label": "has",
    "to": 205
  }, {
    "from": 211,
    "label": "has",
    "to": 147
  }, {
    "from": 211,
    "label": "has",
    "to": 147
  }, {
    "from": 211,
    "label": "has",
    "to": 212
  }, {
    "from": 213,
    "label": "has",
    "to": 204
  }, {
    "from": 213,
    "label": "has",
    "to": 205
  }, {
    "from": 213,
    "label": "has",
    "to": 147
  }, {
    "from": 213,
    "label": "has",
    "to": 147
  }, {
    "from": 213,
    "label": "has",
    "to": 214
  }, {
    "from": 215,
    "label": "has",
    "to": 147
  }, {
    "from": 215,
    "label": "has",
    "to": 216
  }, {
    "from": 217,
    "label": "has",
    "to": 204
  }, {
    "from": 217,
    "label": "has",
    "to": 218
  }, {
    "from": 218,
    "label": "has",
    "to": 219
  }, {
    "from": 217,
    "label": "has",
    "to": 147
  }, {
    "from": 217,
    "label": "has",
    "to": 147
  }, {
    "from": 217,
    "label": "has",
    "to": 147
  }, {
    "from": 217,
    "label": "has",
    "to": 220
  }, {
    "from": 221,
    "label": "has",
    "to": 204
  }, {
    "from": 221,
    "label": "has",
    "to": 218
  }, {
    "from": 218,
    "label": "has",
    "to": 219
  }, {
    "from": 221,
    "label": "has",
    "to": 147
  }, {
    "from": 221,
    "label": "has",
    "to": 147
  }, {
    "from": 221,
    "label": "has",
    "to": 222
  }, {
    "from": 221,
    "label": "has",
    "to": 147
  }, {
    "from": 221,
    "label": "has",
    "to": 147
  }, {
    "from": 221,
    "label": "has",
    "to": 223
  }, {
    "from": 224,
    "label": "has",
    "to": 204
  }, {
    "from": 224,
    "label": "has",
    "to": 218
  }, {
    "from": 218,
    "label": "has",
    "to": 219
  }, {
    "from": 224,
    "label": "has",
    "to": 147
  }, {
    "from": 224,
    "label": "has",
    "to": 147
  }, {
    "from": 224,
    "label": "has",
    "to": 222
  }, {
    "from": 224,
    "label": "has",
    "to": 147
  }, {
    "from": 224,
    "label": "has",
    "to": 147
  }, {
    "from": 224,
    "label": "has",
    "to": 225
  }, {
    "from": 226,
    "label": "has",
    "to": 204
  }, {
    "from": 226,
    "label": "has",
    "to": 218
  }, {
    "from": 218,
    "label": "has",
    "to": 219
  }, {
    "from": 226,
    "label": "has",
    "to": 147
  }, {
    "from": 226,
    "label": "has",
    "to": 147
  }, {
    "from": 226,
    "label": "has",
    "to": 147
  }, {
    "from": 226,
    "label": "has",
    "to": 227
  }, {
    "from": 228,
    "label": "has",
    "to": 229
  }, {
    "from": 228,
    "label": "has",
    "to": 230
  }, {
    "from": 228,
    "label": "has",
    "to": 147
  }, {
    "from": 228,
    "label": "has",
    "to": 147
  }, {
    "from": 228,
    "label": "has",
    "to": 231
  }, {
    "from": 232,
    "label": "has",
    "to": 147
  }, {
    "from": 232,
    "label": "has",
    "to": 233
  }, {
    "from": 234,
    "label": "has",
    "to": 147
  }, {
    "from": 234,
    "label": "has",
    "to": 235
  }, {
    "from": 236,
    "label": "has",
    "to": 147
  }, {
    "from": 236,
    "label": "has",
    "to": 237
  }, {
    "from": 238,
    "label": "has",
    "to": 239
  }, {
    "from": 239,
    "label": "has",
    "to": 240
  }, {
    "from": 239,
    "label": "has",
    "to": 241
  }, {
    "from": 238,
    "label": "has",
    "to": 147
  }, {
    "from": 238,
    "label": "has",
    "to": 242
  }, {
    "from": 243,
    "label": "has",
    "to": 147
  }, {
    "from": 243,
    "label": "has",
    "to": 244
  }, {
    "from": 245,
    "label": "has",
    "to": 147
  }, {
    "from": 245,
    "label": "has",
    "to": 246
  }, {
    "from": 247,
    "label": "has",
    "to": 147
  }, {
    "from": 247,
    "label": "has",
    "to": 248
  }, {
    "from": 249,
    "label": "has",
    "to": 147
  }, {
    "from": 249,
    "label": "has",
    "to": 250
  }, {
    "from": 251,
    "label": "has",
    "to": 252
  }, {
    "from": 251,
    "label": "has",
    "to": 253
  }, {
    "from": 251,
    "label": "has",
    "to": 254
  }, {
    "from": 251,
    "label": "has",
    "to": 255
  }, {
    "from": 255,
    "label": "has",
    "to": 256
  }, {
    "from": 255,
    "label": "has",
    "to": 147
  }, {
    "from": 255,
    "label": "has",
    "to": 257
  }, {
    "from": 255,
    "label": "has",
    "to": 258
  }, {
    "from": 255,
    "label": "has",
    "to": 259
  }, {
    "from": 259,
    "label": "has",
    "to": 260
  }, {
    "from": 260,
    "label": "has",
    "to": 261
  }, {
    "from": 259,
    "label": "has",
    "to": 262
  }, {
    "from": 255,
    "label": "has",
    "to": 147
  }, {
    "from": 255,
    "label": "has",
    "to": 263
  }, {
    "from": 255,
    "label": "has",
    "to": 264
  }, {
    "from": 255,
    "label": "has",
    "to": 265
  }, {
    "from": 265,
    "label": "has",
    "to": 266
  }, {
    "from": 265,
    "label": "has",
    "to": 267
  }, {
    "from": 255,
    "label": "has",
    "to": 147
  }, {
    "from": 251,
    "label": "has",
    "to": 147
  }, {
    "from": 251,
    "label": "has",
    "to": 268
  }, {
    "from": 269,
    "label": "has",
    "to": 270
  }, {
    "from": 270,
    "label": "has",
    "to": 271
  }, {
    "from": 269,
    "label": "has",
    "to": 272
  }, {
    "from": 272,
    "label": "has",
    "to": 273
  }, {
    "from": 269,
    "label": "has",
    "to": 274
  }, {
    "from": 269,
    "label": "has",
    "to": 275
  }, {
    "from": 269,
    "label": "has",
    "to": 276
  }, {
    "from": 269,
    "label": "has",
    "to": 277
  }, {
    "from": 269,
    "label": "has",
    "to": 147
  }, {
    "from": 269,
    "label": "has",
    "to": 278
  }, {
    "from": 269,
    "label": "has",
    "to": 279
  }, {
    "from": 269,
    "label": "has",
    "to": 280
  }, {
    "from": 269,
    "label": "has",
    "to": 147
  }, {
    "from": 269,
    "label": "has",
    "to": 147
  }, {
    "from": 269,
    "label": "has",
    "to": 281
  }, {
    "from": 282,
    "label": "has",
    "to": 283
  }, {
    "from": 282,
    "label": "has",
    "to": 284
  }, {
    "from": 282,
    "label": "has",
    "to": 147
  }, {
    "from": 282,
    "label": "has",
    "to": 285
  }, {
    "from": 285,
    "label": "has",
    "to": 286
  }, {
    "from": 285,
    "label": "has",
    "to": 287
  }, {
    "from": 287,
    "label": "has",
    "to": 257
  }, {
    "from": 285,
    "label": "has",
    "to": 288
  }, {
    "from": 282,
    "label": "has",
    "to": 147
  }, {
    "from": 282,
    "label": "has",
    "to": 257
  }, {
    "from": 282,
    "label": "has",
    "to": 289
  }, {
    "from": 290,
    "label": "has",
    "to": 147
  }, {
    "from": 290,
    "label": "has",
    "to": 291
  }, {
    "from": 292,
    "label": "has",
    "to": 293
  }, {
    "from": 292,
    "label": "has",
    "to": 294
  }, {
    "from": 294,
    "label": "has",
    "to": 295
  }, {
    "from": 294,
    "label": "has",
    "to": 296
  }, {
    "from": 294,
    "label": "has",
    "to": 297
  }, {
    "from": 292,
    "label": "has",
    "to": 147
  }, {
    "from": 292,
    "label": "has",
    "to": 298
  }, {
    "from": 299,
    "label": "has",
    "to": 300
  }, {
    "from": 299,
    "label": "has",
    "to": 301
  }, {
    "from": 299,
    "label": "has",
    "to": 147
  }, {
    "from": 299,
    "label": "has",
    "to": 147
  }, {
    "from": 299,
    "label": "has",
    "to": 302
  }, {
    "from": 303,
    "label": "has",
    "to": 147
  }, {
    "from": 303,
    "label": "has",
    "to": 304
  }, {
    "from": 303,
    "label": "has",
    "to": 147
  }, {
    "from": 303,
    "label": "has",
    "to": 305
  }, {
    "from": 303,
    "label": "has",
    "to": 147
  }, {
    "from": 303,
    "label": "has",
    "to": 306
  }, {
    "from": 303,
    "label": "has",
    "to": 307
  }, {
    "from": 303,
    "label": "has",
    "to": 147
  }, {
    "from": 303,
    "label": "has",
    "to": 147
  }, {
    "from": 303,
    "label": "has",
    "to": 308
  }, {
    "from": 309,
    "label": "has",
    "to": 310
  }, {
    "from": 309,
    "label": "has",
    "to": 311
  }, {
    "from": 312,
    "label": "has",
    "to": 313
  }, {
    "from": 312,
    "label": "has",
    "to": 314
  }, {
    "from": 314,
    "label": "has",
    "to": 315
  }, {
    "from": 314,
    "label": "has",
    "to": 316
  }, {
    "from": 312,
    "label": "has",
    "to": 147
  }, {
    "from": 312,
    "label": "has",
    "to": 317
  }, {
    "from": 312,
    "label": "has",
    "to": 318
  }, {
    "from": 318,
    "label": "has",
    "to": 319
  }, {
    "from": 319,
    "label": "has",
    "to": 310
  }, {
    "from": 312,
    "label": "has",
    "to": 320
  }, {
    "from": 320,
    "label": "has",
    "to": 321
  }, {
    "from": 320,
    "label": "has",
    "to": 322
  }, {
    "from": 322,
    "label": "has",
    "to": 323
  }, {
    "from": 322,
    "label": "has",
    "to": 324
  }, {
    "from": 320,
    "label": "has",
    "to": 147
  }, {
    "from": 320,
    "label": "has",
    "to": 147
  }, {
    "from": 320,
    "label": "has",
    "to": 306
  }, {
    "from": 320,
    "label": "has",
    "to": 325
  }, {
    "from": 320,
    "label": "has",
    "to": 147
  }, {
    "from": 320,
    "label": "has",
    "to": 147
  }, {
    "from": 312,
    "label": "has",
    "to": 326
  }, {
    "from": 312,
    "label": "has",
    "to": 147
  }, {
    "from": 312,
    "label": "has",
    "to": 327
  }, {
    "from": 327,
    "label": "has",
    "to": 328
  }, {
    "from": 328,
    "label": "has",
    "to": 329
  }, {
    "from": 328,
    "label": "has",
    "to": 326
  }, {
    "from": 312,
    "label": "has",
    "to": 147
  }, {
    "from": 312,
    "label": "has",
    "to": 330
  }, {
    "from": 330,
    "label": "has",
    "to": 331
  }, {
    "from": 330,
    "label": "has",
    "to": 316
  }, {
    "from": 312,
    "label": "has",
    "to": 147
  }, {
    "from": 312,
    "label": "has",
    "to": 332
  }, {
    "from": 333,
    "label": "has",
    "to": 334
  }, {
    "from": 333,
    "label": "has",
    "to": 335
  }, {
    "from": 335,
    "label": "has",
    "to": 336
  }, {
    "from": 333,
    "label": "has",
    "to": 147
  }, {
    "from": 333,
    "label": "has",
    "to": 147
  }, {
    "from": 333,
    "label": "has",
    "to": 337
  }, {
    "from": 338,
    "label": "has",
    "to": 339
  }, {
    "from": 338,
    "label": "has",
    "to": 340
  }, {
    "from": 340,
    "label": "has",
    "to": 341
  }, {
    "from": 340,
    "label": "has",
    "to": 342
  }, {
    "from": 340,
    "label": "has",
    "to": 343
  }, {
    "from": 340,
    "label": "has",
    "to": 344
  }, {
    "from": 338,
    "label": "has",
    "to": 147
  }, {
    "from": 338,
    "label": "has",
    "to": 147
  }, {
    "from": 338,
    "label": "has",
    "to": 345
  }, {
    "from": 338,
    "label": "has",
    "to": 346
  }, {
    "from": 346,
    "label": "has",
    "to": 347
  }, {
    "from": 346,
    "label": "has",
    "to": 348
  }, {
    "from": 346,
    "label": "has",
    "to": 349
  }, {
    "from": 338,
    "label": "has",
    "to": 147
  }, {
    "from": 338,
    "label": "has",
    "to": 147
  }, {
    "from": 338,
    "label": "has",
    "to": 350
  }, {
    "from": 351,
    "label": "has",
    "to": 352
  }, {
    "from": 351,
    "label": "has",
    "to": 147
  }, {
    "from": 351,
    "label": "has",
    "to": 353
  }, {
    "from": 351,
    "label": "has",
    "to": 335
  }, {
    "from": 335,
    "label": "has",
    "to": 336
  }, {
    "from": 351,
    "label": "has",
    "to": 354
  }, {
    "from": 351,
    "label": "has",
    "to": 355
  }, {
    "from": 351,
    "label": "has",
    "to": 147
  }, {
    "from": 351,
    "label": "has",
    "to": 356
  }, {
    "from": 351,
    "label": "has",
    "to": 357
  }, {
    "from": 351,
    "label": "has",
    "to": 358
  }, {
    "from": 358,
    "label": "has",
    "to": 359
  }, {
    "from": 358,
    "label": "has",
    "to": 360
  }, {
    "from": 360,
    "label": "has",
    "to": 361
  }, {
    "from": 360,
    "label": "has",
    "to": 362
  }, {
    "from": 360,
    "label": "has",
    "to": 147
  }, {
    "from": 360,
    "label": "has",
    "to": 147
  }, {
    "from": 358,
    "label": "has",
    "to": 363
  }, {
    "from": 363,
    "label": "has",
    "to": 361
  }, {
    "from": 363,
    "label": "has",
    "to": 362
  }, {
    "from": 363,
    "label": "has",
    "to": 147
  }, {
    "from": 363,
    "label": "has",
    "to": 364
  }, {
    "from": 358,
    "label": "has",
    "to": 365
  }, {
    "from": 365,
    "label": "has",
    "to": 366
  }, {
    "from": 358,
    "label": "has",
    "to": 367
  }, {
    "from": 358,
    "label": "has",
    "to": 368
  }, {
    "from": 368,
    "label": "has",
    "to": 369
  }, {
    "from": 368,
    "label": "has",
    "to": 370
  }, {
    "from": 358,
    "label": "has",
    "to": 147
  }, {
    "from": 351,
    "label": "has",
    "to": 147
  }, {
    "from": 351,
    "label": "has",
    "to": 147
  }, {
    "from": 351,
    "label": "has",
    "to": 371
  }, {
    "from": 372,
    "label": "has",
    "to": 361
  }, {
    "from": 372,
    "label": "has",
    "to": 362
  }, {
    "from": 372,
    "label": "has",
    "to": 147
  }, {
    "from": 372,
    "label": "has",
    "to": 147
  }, {
    "from": 372,
    "label": "has",
    "to": 373
  }, {
    "from": 374,
    "label": "has",
    "to": 361
  }, {
    "from": 374,
    "label": "has",
    "to": 362
  }, {
    "from": 374,
    "label": "has",
    "to": 147
  }, {
    "from": 374,
    "label": "has",
    "to": 364
  }, {
    "from": 374,
    "label": "has",
    "to": 375
  }, {
    "from": 376,
    "label": "has",
    "to": 377
  }, {
    "from": 376,
    "label": "has",
    "to": 378
  }, {
    "from": 376,
    "label": "has",
    "to": 147
  }, {
    "from": 376,
    "label": "has",
    "to": 379
  }, {
    "from": 376,
    "label": "has",
    "to": 380
  }, {
    "from": 376,
    "label": "has",
    "to": 381
  }, {
    "from": 381,
    "label": "has",
    "to": 382
  }, {
    "from": 382,
    "label": "has",
    "to": 383
  }, {
    "from": 382,
    "label": "has",
    "to": 384
  }, {
    "from": 384,
    "label": "has",
    "to": 147
  }, {
    "from": 376,
    "label": "has",
    "to": 385
  }, {
    "from": 376,
    "label": "has",
    "to": 386
  }, {
    "from": 386,
    "label": "has",
    "to": 147
  }, {
    "from": 376,
    "label": "has",
    "to": 387
  }, {
    "from": 376,
    "label": "has",
    "to": 147
  }, {
    "from": 376,
    "label": "has",
    "to": 388
  }, {
    "from": 389,
    "label": "has",
    "to": 147
  }, {
    "from": 390,
    "label": "has",
    "to": 256
  }, {
    "from": 390,
    "label": "has",
    "to": 147
  }, {
    "from": 390,
    "label": "has",
    "to": 257
  }, {
    "from": 390,
    "label": "has",
    "to": 258
  }, {
    "from": 390,
    "label": "has",
    "to": 391
  }, {
    "from": 392,
    "label": "has",
    "to": 259
  }, {
    "from": 259,
    "label": "has",
    "to": 260
  }, {
    "from": 260,
    "label": "has",
    "to": 261
  }, {
    "from": 259,
    "label": "has",
    "to": 262
  }, {
    "from": 392,
    "label": "has",
    "to": 147
  }, {
    "from": 392,
    "label": "has",
    "to": 263
  }, {
    "from": 392,
    "label": "has",
    "to": 264
  }, {
    "from": 392,
    "label": "has",
    "to": 265
  }, {
    "from": 265,
    "label": "has",
    "to": 266
  }, {
    "from": 265,
    "label": "has",
    "to": 267
  }, {
    "from": 392,
    "label": "has",
    "to": 147
  }, {
    "from": 392,
    "label": "has",
    "to": 393
  }, {
    "from": 394,
    "label": "has",
    "to": 304
  }, {
    "from": 394,
    "label": "has",
    "to": 147
  }, {
    "from": 394,
    "label": "has",
    "to": 305
  }, {
    "from": 394,
    "label": "has",
    "to": 147
  }, {
    "from": 394,
    "label": "has",
    "to": 306
  }, {
    "from": 394,
    "label": "has",
    "to": 307
  }, {
    "from": 394,
    "label": "has",
    "to": 147
  }, {
    "from": 394,
    "label": "has",
    "to": 147
  }, {
    "from": 394,
    "label": "has",
    "to": 395
  }, {
    "from": 396,
    "label": "has",
    "to": 321
  }, {
    "from": 396,
    "label": "has",
    "to": 322
  }, {
    "from": 322,
    "label": "has",
    "to": 323
  }, {
    "from": 322,
    "label": "has",
    "to": 324
  }, {
    "from": 396,
    "label": "has",
    "to": 147
  }, {
    "from": 396,
    "label": "has",
    "to": 147
  }, {
    "from": 396,
    "label": "has",
    "to": 306
  }, {
    "from": 396,
    "label": "has",
    "to": 325
  }, {
    "from": 396,
    "label": "has",
    "to": 147
  }, {
    "from": 396,
    "label": "has",
    "to": 147
  }, {
    "from": 396,
    "label": "has",
    "to": 397
  }, {
    "from": 398,
    "label": "has",
    "to": 147
  }, {
    "from": 398,
    "label": "has",
    "to": 399
  }, {
    "from": 400,
    "label": "has",
    "to": 147
  }, {
    "from": 401,
    "label": "has",
    "to": 147
  }, {
    "from": 402,
    "label": "has",
    "to": 147
  }, {
    "from": 403,
    "label": "has",
    "to": 147
  }, {
    "from": 404,
    "label": "has",
    "to": 147
  }, {
    "from": 405,
    "label": "has",
    "to": 147
  }, {
    "from": 406,
    "label": "has",
    "to": 147
  }, {
    "from": 407,
    "label": "has",
    "to": 147
  }, {
    "from": 408,
    "label": "has",
    "to": 147
  }, {
    "from": 409,
    "label": "has",
    "to": 345
  }, {
    "from": 409,
    "label": "has",
    "to": 346
  }, {
    "from": 346,
    "label": "has",
    "to": 347
  }, {
    "from": 346,
    "label": "has",
    "to": 348
  }, {
    "from": 346,
    "label": "has",
    "to": 349
  }, {
    "from": 409,
    "label": "has",
    "to": 147
  }, {
    "from": 409,
    "label": "has",
    "to": 147
  }, {
    "from": 409,
    "label": "has",
    "to": 410
  }, {
    "from": 411,
    "label": "has",
    "to": 366
  }, {
    "from": 411,
    "label": "has",
    "to": 412
  }, {
    "from": 413,
    "label": "has",
    "to": 367
  }, {
    "from": 413,
    "label": "has",
    "to": 368
  }, {
    "from": 368,
    "label": "has",
    "to": 369
  }, {
    "from": 368,
    "label": "has",
    "to": 370
  }, {
    "from": 413,
    "label": "has",
    "to": 147
  }, {
    "from": 413,
    "label": "has",
    "to": 414
  }, {
    "from": 415,
    "label": "has",
    "to": 147
  }, {
    "from": 245,
    "label": "calls",
    "to": 421
  }, {
    "from": 251,
    "label": "calls",
    "to": 437
  }, {
    "from": 282,
    "label": "calls",
    "to": 437
  }, {
    "from": 282,
    "label": "calls",
    "to": 437
  }, {
    "from": 4,
    "label": "calls",
    "to": 448
  }, {
    "from": 251,
    "label": "calls",
    "to": 448
  }, {
    "from": 372,
    "label": "calls",
    "to": 448
  }, {
    "from": 372,
    "label": "calls",
    "to": 448
  }, {
    "from": 269,
    "label": "calls",
    "to": 422
  }, {
    "from": 269,
    "label": "calls",
    "to": 452
  }, {
    "from": 149,
    "label": "calls",
    "to": 472
  }, {
    "from": 151,
    "label": "calls",
    "to": 472
  }, {
    "from": 153,
    "label": "calls",
    "to": 472
  }, {
    "from": 351,
    "label": "calls",
    "to": 338
  }, {
    "from": 180,
    "label": "calls",
    "to": 176
  }, {
    "from": 4,
    "label": "calls",
    "to": 176
  }, {
    "from": 238,
    "label": "calls",
    "to": 470
  }, {
    "from": 292,
    "label": "calls",
    "to": 417
  }, {
    "from": 243,
    "label": "calls",
    "to": 451
  }, {
    "from": 155,
    "label": "calls",
    "to": 149
  }, {
    "from": 251,
    "label": "calls",
    "to": 465
  }, {
    "from": 282,
    "label": "calls",
    "to": 465
  }, {
    "from": 236,
    "label": "calls",
    "to": 440
  }, {
    "from": 269,
    "label": "calls",
    "to": 453
  }, {
    "from": 282,
    "label": "calls",
    "to": 372
  }, {
    "from": 333,
    "label": "calls",
    "to": 180
  }, {
    "from": 4,
    "label": "calls",
    "to": 180
  }, {
    "from": 164,
    "label": "calls",
    "to": 153
  }, {
    "from": 164,
    "label": "calls",
    "to": 153
  }, {
    "from": 164,
    "label": "calls",
    "to": 153
  }, {
    "from": 180,
    "label": "calls",
    "to": 153
  }, {
    "from": 180,
    "label": "calls",
    "to": 153
  }, {
    "from": 180,
    "label": "calls",
    "to": 153
  }, {
    "from": 207,
    "label": "calls",
    "to": 153
  }, {
    "from": 209,
    "label": "calls",
    "to": 153
  }, {
    "from": 211,
    "label": "calls",
    "to": 153
  }, {
    "from": 4,
    "label": "calls",
    "to": 153
  }, {
    "from": 4,
    "label": "calls",
    "to": 153
  }, {
    "from": 4,
    "label": "calls",
    "to": 153
  }, {
    "from": 251,
    "label": "calls",
    "to": 441
  }, {
    "from": 303,
    "label": "calls",
    "to": 441
  }, {
    "from": 4,
    "label": "calls",
    "to": 441
  }, {
    "from": 351,
    "label": "calls",
    "to": 423
  }, {
    "from": 144,
    "label": "calls",
    "to": 427
  }, {
    "from": 372,
    "label": "calls",
    "to": 446
  }, {
    "from": 372,
    "label": "calls",
    "to": 446
  }, {
    "from": 372,
    "label": "calls",
    "to": 446
  }, {
    "from": 351,
    "label": "calls",
    "to": 446
  }, {
    "from": 376,
    "label": "calls",
    "to": 455
  }, {
    "from": 232,
    "label": "calls",
    "to": 478
  }, {
    "from": 251,
    "label": "calls",
    "to": 456
  }, {
    "from": 282,
    "label": "calls",
    "to": 456
  }, {
    "from": 155,
    "label": "calls",
    "to": 151
  }, {
    "from": 372,
    "label": "calls",
    "to": 429
  }, {
    "from": 4,
    "label": "calls",
    "to": 303
  }, {
    "from": 4,
    "label": "calls",
    "to": 303
  }, {
    "from": 303,
    "label": "calls",
    "to": 312
  }, {
    "from": 333,
    "label": "calls",
    "to": 312
  }, {
    "from": 351,
    "label": "calls",
    "to": 312
  }, {
    "from": 351,
    "label": "calls",
    "to": 312
  }, {
    "from": 338,
    "label": "calls",
    "to": 400
  }, {
    "from": 299,
    "label": "calls",
    "to": 292
  }, {
    "from": 303,
    "label": "calls",
    "to": 282
  }, {
    "from": 4,
    "label": "calls",
    "to": 282
  }, {
    "from": 187,
    "label": "calls",
    "to": 474
  }, {
    "from": 4,
    "label": "calls",
    "to": 474
  }, {
    "from": 376,
    "label": "calls",
    "to": 474
  }, {
    "from": 376,
    "label": "calls",
    "to": 479
  }, {
    "from": 333,
    "label": "calls",
    "to": 299
  }, {
    "from": 351,
    "label": "calls",
    "to": 299
  }, {
    "from": 195,
    "label": "calls",
    "to": 164
  }, {
    "from": 251,
    "label": "calls",
    "to": 473
  }, {
    "from": 351,
    "label": "calls",
    "to": 473
  }, {
    "from": 4,
    "label": "calls",
    "to": 144
  }, {
    "from": 4,
    "label": "calls",
    "to": 144
  }, {
    "from": 303,
    "label": "calls",
    "to": 290
  }, {
    "from": 4,
    "label": "calls",
    "to": 290
  }, {
    "from": 4,
    "label": "calls",
    "to": 435
  }, {
    "from": 338,
    "label": "calls",
    "to": 435
  }, {
    "from": 338,
    "label": "calls",
    "to": 435
  }, {
    "from": 372,
    "label": "calls",
    "to": 442
  }, {
    "from": 372,
    "label": "calls",
    "to": 442
  }, {
    "from": 4,
    "label": "calls",
    "to": 432
  }, {
    "from": 299,
    "label": "calls",
    "to": 420
  }, {
    "from": 299,
    "label": "calls",
    "to": 420
  }, {
    "from": 162,
    "label": "calls",
    "to": 434
  }, {
    "from": 269,
    "label": "calls",
    "to": 155
  }, {
    "from": 269,
    "label": "calls",
    "to": 155
  }, {
    "from": 234,
    "label": "calls",
    "to": 459
  }, {
    "from": 164,
    "label": "calls",
    "to": 162
  }, {
    "from": 164,
    "label": "calls",
    "to": 162
  }, {
    "from": 176,
    "label": "calls",
    "to": 162
  }, {
    "from": 176,
    "label": "calls",
    "to": 162
  }, {
    "from": 221,
    "label": "calls",
    "to": 162
  }, {
    "from": 221,
    "label": "calls",
    "to": 162
  }, {
    "from": 224,
    "label": "calls",
    "to": 162
  }, {
    "from": 224,
    "label": "calls",
    "to": 162
  }, {
    "from": 226,
    "label": "calls",
    "to": 162
  }, {
    "from": 303,
    "label": "calls",
    "to": 162
  }, {
    "from": 303,
    "label": "calls",
    "to": 162
  }, {
    "from": 4,
    "label": "calls",
    "to": 162
  }, {
    "from": 164,
    "label": "calls",
    "to": 160
  }, {
    "from": 180,
    "label": "calls",
    "to": 160
  }, {
    "from": 213,
    "label": "calls",
    "to": 160
  }, {
    "from": 4,
    "label": "calls",
    "to": 160
  }, {
    "from": 4,
    "label": "calls",
    "to": 309
  }, {
    "from": 333,
    "label": "calls",
    "to": 309
  }, {
    "from": 372,
    "label": "calls",
    "to": 309
  }, {
    "from": 195,
    "label": "calls",
    "to": 443
  }, {
    "from": 203,
    "label": "calls",
    "to": 443
  }, {
    "from": 207,
    "label": "calls",
    "to": 443
  }, {
    "from": 209,
    "label": "calls",
    "to": 443
  }, {
    "from": 211,
    "label": "calls",
    "to": 443
  }, {
    "from": 213,
    "label": "calls",
    "to": 443
  }, {
    "from": 217,
    "label": "calls",
    "to": 443
  }, {
    "from": 221,
    "label": "calls",
    "to": 443
  }, {
    "from": 224,
    "label": "calls",
    "to": 443
  }, {
    "from": 226,
    "label": "calls",
    "to": 443
  }, {
    "from": 338,
    "label": "calls",
    "to": 468
  }, {
    "from": 228,
    "label": "calls",
    "to": 430
  }, {
    "from": 372,
    "label": "calls",
    "to": 461
  }, {
    "from": 372,
    "label": "calls",
    "to": 461
  }, {
    "from": 217,
    "label": "calls",
    "to": 215
  }, {
    "from": 221,
    "label": "calls",
    "to": 215
  }, {
    "from": 224,
    "label": "calls",
    "to": 215
  }, {
    "from": 226,
    "label": "calls",
    "to": 215
  }, {
    "from": 193,
    "label": "calls",
    "to": 458
  }, {
    "from": 376,
    "label": "calls",
    "to": 439
  }, {
    "from": 376,
    "label": "calls",
    "to": 436
  }, {
    "from": 4,
    "label": "calls",
    "to": 480
  }, {
    "from": 376,
    "label": "calls",
    "to": 480
  }, {
    "from": 351,
    "label": "calls",
    "to": 476
  }, {
    "from": 269,
    "label": "calls",
    "to": 482
  }, {
    "from": 4,
    "label": "declares",
    "to": 144
  }, {
    "from": 4,
    "label": "declares",
    "to": 149
  }, {
    "from": 4,
    "label": "declares",
    "to": 151
  }, {
    "from": 4,
    "label": "declares",
    "to": 153
  }, {
    "from": 4,
    "label": "declares",
    "to": 155
  }, {
    "from": 4,
    "label": "declares",
    "to": 160
  }, {
    "from": 4,
    "label": "declares",
    "to": 162
  }, {
    "from": 4,
    "label": "declares",
    "to": 164
  }, {
    "from": 4,
    "label": "declares",
    "to": 176
  }, {
    "from": 4,
    "label": "declares",
    "to": 180
  }, {
    "from": 4,
    "label": "declares",
    "to": 187
  }, {
    "from": 4,
    "label": "declares",
    "to": 193
  }, {
    "from": 4,
    "label": "declares",
    "to": 195
  }, {
    "from": 4,
    "label": "declares",
    "to": 203
  }, {
    "from": 4,
    "label": "declares",
    "to": 207
  }, {
    "from": 4,
    "label": "declares",
    "to": 209
  }, {
    "from": 4,
    "label": "declares",
    "to": 211
  }, {
    "from": 4,
    "label": "declares",
    "to": 213
  }, {
    "from": 4,
    "label": "declares",
    "to": 215
  }, {
    "from": 4,
    "label": "declares",
    "to": 217
  }, {
    "from": 4,
    "label": "declares",
    "to": 221
  }, {
    "from": 4,
    "label": "declares",
    "to": 224
  }, {
    "from": 4,
    "label": "declares",
    "to": 226
  }, {
    "from": 4,
    "label": "declares",
    "to": 228
  }, {
    "from": 4,
    "label": "declares",
    "to": 232
  }, {
    "from": 4,
    "label": "declares",
    "to": 234
  }, {
    "from": 4,
    "label": "declares",
    "to": 236
  }, {
    "from": 4,
    "label": "declares",
    "to": 238
  }, {
    "from": 4,
    "label": "declares",
    "to": 243
  }, {
    "from": 4,
    "label": "declares",
    "to": 245
  }, {
    "from": 4,
    "label": "declares",
    "to": 247
  }, {
    "from": 4,
    "label": "declares",
    "to": 249
  }, {
    "from": 4,
    "label": "declares",
    "to": 251
  }, {
    "from": 4,
    "label": "declares",
    "to": 269
  }, {
    "from": 4,
    "label": "declares",
    "to": 282
  }, {
    "from": 4,
    "label": "declares",
    "to": 290
  }, {
    "from": 4,
    "label": "declares",
    "to": 292
  }, {
    "from": 4,
    "label": "declares",
    "to": 299
  }, {
    "from": 4,
    "label": "declares",
    "to": 303
  }, {
    "from": 4,
    "label": "declares",
    "to": 309
  }, {
    "from": 4,
    "label": "declares",
    "to": 312
  }, {
    "from": 4,
    "label": "declares",
    "to": 333
  }, {
    "from": 4,
    "label": "declares",
    "to": 338
  }, {
    "from": 4,
    "label": "declares",
    "to": 351
  }, {
    "from": 4,
    "label": "declares",
    "to": 372
  }, {
    "from": 4,
    "label": "declares",
    "to": 374
  }, {
    "from": 4,
    "label": "declares",
    "to": 376
  }, {
    "from": 4,
    "label": "declares",
    "to": 389
  }, {
    "from": 4,
    "label": "declares",
    "to": 390
  }, {
    "from": 4,
    "label": "declares",
    "to": 392
  }, {
    "from": 4,
    "label": "declares",
    "to": 394
  }, {
    "from": 4,
    "label": "declares",
    "to": 396
  }, {
    "from": 4,
    "label": "declares",
    "to": 398
  }, {
    "from": 4,
    "label": "declares",
    "to": 400
  }, {
    "from": 4,
    "label": "declares",
    "to": 401
  }, {
    "from": 4,
    "label": "declares",
    "to": 402
  }, {
    "from": 4,
    "label": "declares",
    "to": 403
  }, {
    "from": 4,
    "label": "declares",
    "to": 404
  }, {
    "from": 4,
    "label": "declares",
    "to": 405
  }, {
    "from": 4,
    "label": "declares",
    "to": 406
  }, {
    "from": 4,
    "label": "declares",
    "to": 407
  }, {
    "from": 4,
    "label": "declares",
    "to": 408
  }, {
    "from": 4,
    "label": "declares",
    "to": 409
  }, {
    "from": 4,
    "label": "declares",
    "to": 411
  }, {
    "from": 4,
    "label": "declares",
    "to": 413
  }, {
    "from": 4,
    "label": "declares",
    "to": 415
  }, {
    "from": 416,
    "label": "calls",
    "to": 299
  }, {
    "from": 2,
    "label": "declares",
    "to": 425
  }, {
    "from": 2,
    "label": "declares",
    "to": 426
  }, {
    "from": 2,
    "label": "declares",
    "to": 431
  }, {
    "from": 2,
    "label": "declares",
    "to": 438
  }, {
    "from": 2,
    "label": "declares",
    "to": 444
  }, {
    "from": 2,
    "label": "declares",
    "to": 445
  }, {
    "from": 2,
    "label": "declares",
    "to": 447
  }, {
    "from": 2,
    "label": "declares",
    "to": 449
  }, {
    "from": 2,
    "label": "declares",
    "to": 450
  }, {
    "from": 2,
    "label": "declares",
    "to": 454
  }, {
    "from": 2,
    "label": "declares",
    "to": 457
  }, {
    "from": 2,
    "label": "declares",
    "to": 460
  }, {
    "from": 2,
    "label": "declares",
    "to": 462
  }, {
    "from": 2,
    "label": "declares",
    "to": 463
  }, {
    "from": 2,
    "label": "declares",
    "to": 464
  }, {
    "from": 2,
    "label": "declares",
    "to": 466
  }, {
    "from": 2,
    "label": "declares",
    "to": 467
  }, {
    "from": 2,
    "label": "declares",
    "to": 469
  }, {
    "from": 2,
    "label": "declares",
    "to": 471
  }, {
    "from": 2,
    "label": "declares",
    "to": 475
  }, {
    "from": 2,
    "label": "declares",
    "to": 477
  }, {
    "from": 2,
    "label": "declares",
    "to": 481
  }, {
    "from": 2,
    "label": "contains",
    "to": 483
  }, {
    "from": 2,
    "label": "contains",
    "to": 484
  }, {
    "from": 483,
    "label": "initializes",
    "to": 485
  }, {
    "from": 483,
    "label": "initializes",
    "to": 486
  }, {
    "from": 483,
    "label": "initializes",
    "to": 487
  }, {
    "from": 484,
    "label": "initializes",
    "to": 488
  }, {
    "from": 488,
    "label": "requires",
    "to": 2
  }, {
    "from": 2,
    "label": "provides",
    "to": 489
  }, {
    "from": 489,
    "label": "provides",
    "to": 490
  }, {
    "from": 2,
    "label": "contains",
    "to": 491
  }, {
    "from": 2,
    "label": "contains",
    "to": 492
  }, {
    "from": 492,
    "label": "initializes",
    "to": 493
  }, {
    "from": 2,
    "label": "provides",
    "to": 494
  }, {
    "from": 494,
    "label": "provides",
    "to": 495
  }, {
    "from": 2,
    "label": "contains",
    "to": 496
  }, {
    "from": 2,
    "label": "contains",
    "to": 497
  }, {
    "from": 497,
    "label": "initializes",
    "to": 498
  }, {
    "from": 497,
    "label": "initializes",
    "to": 499
  }, {
    "from": 2,
    "label": "provides",
    "to": 500
  }, {
    "from": 500,
    "label": "provides",
    "to": 501
  }, {
    "from": 2,
    "label": "contains",
    "to": 502
  }, {
    "from": 2,
    "label": "contains",
    "to": 503
  }, {
    "from": 503,
    "label": "initializes",
    "to": 504
  }, {
    "from": 2,
    "label": "provides",
    "to": 505
  }, {
    "from": 505,
    "label": "provides",
    "to": 506
  }, {
    "from": 2,
    "label": "contains",
    "to": 507
  }, {
    "from": 2,
    "label": "contains",
    "to": 508
  }, {
    "from": 507,
    "label": "initializes",
    "to": 509
  }, {
    "from": 507,
    "label": "initializes",
    "to": 510
  }, {
    "from": 507,
    "label": "initializes",
    "to": 511
  }, {
    "from": 507,
    "label": "initializes",
    "to": 512
  }, {
    "from": 507,
    "label": "initializes",
    "to": 513
  }, {
    "from": 507,
    "label": "initializes",
    "to": 514
  }, {
    "from": 507,
    "label": "initializes",
    "to": 515
  }, {
    "from": 507,
    "label": "initializes",
    "to": 516
  }, {
    "from": 507,
    "label": "initializes",
    "to": 517
  }, {
    "from": 507,
    "label": "initializes",
    "to": 518
  }, {
    "from": 507,
    "label": "initializes",
    "to": 519
  }, {
    "from": 507,
    "label": "initializes",
    "to": 520
  }, {
    "from": 507,
    "label": "initializes",
    "to": 521
  }, {
    "from": 507,
    "label": "initializes",
    "to": 522
  }, {
    "from": 507,
    "label": "initializes",
    "to": 523
  }, {
    "from": 507,
    "label": "initializes",
    "to": 524
  }, {
    "from": 507,
    "label": "initializes",
    "to": 525
  }, {
    "from": 507,
    "label": "initializes",
    "to": 526
  }, {
    "from": 507,
    "label": "initializes",
    "to": 527
  }, {
    "from": 507,
    "label": "initializes",
    "to": 528
  }, {
    "from": 507,
    "label": "initializes",
    "to": 529
  }, {
    "from": 507,
    "label": "initializes",
    "to": 530
  }, {
    "from": 507,
    "label": "initializes",
    "to": 531
  }, {
    "from": 507,
    "label": "initializes",
    "to": 532
  }, {
    "from": 507,
    "label": "initializes",
    "to": 533
  }, {
    "from": 507,
    "label": "initializes",
    "to": 534
  }, {
    "from": 507,
    "label": "initializes",
    "to": 535
  }, {
    "from": 507,
    "label": "initializes",
    "to": 536
  }, {
    "from": 507,
    "label": "initializes",
    "to": 537
  }, {
    "from": 507,
    "label": "initializes",
    "to": 538
  }, {
    "from": 507,
    "label": "initializes",
    "to": 539
  }, {
    "from": 507,
    "label": "initializes",
    "to": 540
  }, {
    "from": 507,
    "label": "initializes",
    "to": 541
  }, {
    "from": 507,
    "label": "initializes",
    "to": 542
  }, {
    "from": 507,
    "label": "initializes",
    "to": 543
  }, {
    "from": 507,
    "label": "initializes",
    "to": 544
  }, {
    "from": 507,
    "label": "initializes",
    "to": 545
  }, {
    "from": 507,
    "label": "initializes",
    "to": 546
  }, {
    "from": 507,
    "label": "initializes",
    "to": 547
  }, {
    "from": 507,
    "label": "initializes",
    "to": 548
  }, {
    "from": 507,
    "label": "initializes",
    "to": 549
  }, {
    "from": 507,
    "label": "initializes",
    "to": 550
  }, {
    "from": 507,
    "label": "initializes",
    "to": 551
  }, {
    "from": 507,
    "label": "initializes",
    "to": 552
  }, {
    "from": 507,
    "label": "initializes",
    "to": 553
  }, {
    "from": 507,
    "label": "initializes",
    "to": 554
  }, {
    "from": 507,
    "label": "initializes",
    "to": 555
  }, {
    "from": 507,
    "label": "initializes",
    "to": 556
  }, {
    "from": 507,
    "label": "initializes",
    "to": 557
  }, {
    "from": 507,
    "label": "initializes",
    "to": 558
  }, {
    "from": 507,
    "label": "initializes",
    "to": 559
  }, {
    "from": 507,
    "label": "initializes",
    "to": 560
  }, {
    "from": 507,
    "label": "initializes",
    "to": 561
  }, {
    "from": 507,
    "label": "initializes",
    "to": 562
  }, {
    "from": 507,
    "label": "initializes",
    "to": 563
  }, {
    "from": 507,
    "label": "initializes",
    "to": 564
  }, {
    "from": 507,
    "label": "initializes",
    "to": 565
  }, {
    "from": 507,
    "label": "initializes",
    "to": 566
  }, {
    "from": 508,
    "label": "initializes",
    "to": 567
  }, {
    "from": 508,
    "label": "initializes",
    "to": 568
  }, {
    "from": 508,
    "label": "initializes",
    "to": 569
  }, {
    "from": 2,
    "label": "provides",
    "to": 570
  }, {
    "from": 570,
    "label": "provides",
    "to": 571
  }, {
    "from": 570,
    "label": "provides",
    "to": 572
  }, {
    "from": 2,
    "label": "contains",
    "to": 573
  }, {
    "from": 2,
    "label": "contains",
    "to": 574
  }, {
    "from": 573,
    "label": "initializes",
    "to": 575
  }, {
    "from": 573,
    "label": "initializes",
    "to": 576
  }, {
    "from": 573,
    "label": "initializes",
    "to": 577
  }, {
    "from": 573,
    "label": "initializes",
    "to": 578
  }, {
    "from": 573,
    "label": "initializes",
    "to": 579
  }, {
    "from": 573,
    "label": "initializes",
    "to": 580
  }, {
    "from": 573,
    "label": "initializes",
    "to": 581
  }, {
    "from": 573,
    "label": "initializes",
    "to": 582
  }, {
    "from": 573,
    "label": "initializes",
    "to": 583
  }, {
    "from": 573,
    "label": "initializes",
    "to": 584
  }, {
    "from": 573,
    "label": "initializes",
    "to": 585
  }, {
    "from": 573,
    "label": "initializes",
    "to": 586
  }, {
    "from": 573,
    "label": "initializes",
    "to": 587
  }, {
    "from": 573,
    "label": "initializes",
    "to": 588
  }, {
    "from": 573,
    "label": "initializes",
    "to": 589
  }, {
    "from": 573,
    "label": "initializes",
    "to": 590
  }, {
    "from": 573,
    "label": "initializes",
    "to": 591
  }, {
    "from": 573,
    "label": "initializes",
    "to": 592
  }, {
    "from": 573,
    "label": "initializes",
    "to": 593
  }, {
    "from": 573,
    "label": "initializes",
    "to": 594
  }, {
    "from": 573,
    "label": "initializes",
    "to": 595
  }, {
    "from": 573,
    "label": "initializes",
    "to": 596
  }, {
    "from": 574,
    "label": "initializes",
    "to": 597
  }, {
    "from": 574,
    "label": "initializes",
    "to": 598
  }, {
    "from": 2,
    "label": "provides",
    "to": 599
  }, {
    "from": 599,
    "label": "provides",
    "to": 600
  }, {
    "from": 599,
    "label": "provides",
    "to": 601
  }, {
    "from": 2,
    "label": "contains",
    "to": 602
  }, {
    "from": 2,
    "label": "contains",
    "to": 603
  }, {
    "from": 602,
    "label": "initializes",
    "to": 604
  }, {
    "from": 604,
    "label": "assigns",
    "to": 605
  }, {
    "from": 602,
    "label": "initializes",
    "to": 606
  }, {
    "from": 606,
    "label": "assigns",
    "to": 607
  }, {
    "from": 607,
    "label": "assigns",
    "to": 608
  }, {
    "from": 608,
    "label": "assigns",
    "to": 609
  }, {
    "from": 607,
    "label": "assigns",
    "to": 610
  }, {
    "from": 610,
    "label": "assigns",
    "to": 611
  }, {
    "from": 607,
    "label": "assigns",
    "to": 612
  }, {
    "from": 612,
    "label": "assigns",
    "to": 613
  }, {
    "from": 607,
    "label": "assigns",
    "to": 614
  }, {
    "from": 614,
    "label": "assigns",
    "to": 615
  }, {
    "from": 607,
    "label": "assigns",
    "to": 616
  }, {
    "from": 616,
    "label": "assigns",
    "to": 617
  }, {
    "from": 607,
    "label": "assigns",
    "to": 618
  }, {
    "from": 618,
    "label": "assigns",
    "to": 619
  }, {
    "from": 607,
    "label": "assigns",
    "to": 620
  }, {
    "from": 620,
    "label": "assigns",
    "to": 621
  }, {
    "from": 607,
    "label": "assigns",
    "to": 622
  }, {
    "from": 622,
    "label": "assigns",
    "to": 623
  }, {
    "from": 607,
    "label": "assigns",
    "to": 624
  }, {
    "from": 624,
    "label": "assigns",
    "to": 625
  }, {
    "from": 607,
    "label": "assigns",
    "to": 626
  }, {
    "from": 626,
    "label": "assigns",
    "to": 627
  }, {
    "from": 607,
    "label": "assigns",
    "to": 628
  }, {
    "from": 628,
    "label": "assigns",
    "to": 629
  }, {
    "from": 607,
    "label": "assigns",
    "to": 630
  }, {
    "from": 630,
    "label": "assigns",
    "to": 631
  }, {
    "from": 607,
    "label": "assigns",
    "to": 632
  }, {
    "from": 632,
    "label": "assigns",
    "to": 633
  }, {
    "from": 607,
    "label": "assigns",
    "to": 634
  }, {
    "from": 634,
    "label": "assigns",
    "to": 635
  }, {
    "from": 607,
    "label": "assigns",
    "to": 636
  }, {
    "from": 636,
    "label": "assigns",
    "to": 637
  }, {
    "from": 607,
    "label": "assigns",
    "to": 638
  }, {
    "from": 638,
    "label": "assigns",
    "to": 639
  }, {
    "from": 607,
    "label": "assigns",
    "to": 640
  }, {
    "from": 640,
    "label": "assigns",
    "to": 641
  }, {
    "from": 607,
    "label": "assigns",
    "to": 642
  }, {
    "from": 642,
    "label": "assigns",
    "to": 643
  }, {
    "from": 607,
    "label": "assigns",
    "to": 644
  }, {
    "from": 644,
    "label": "assigns",
    "to": 645
  }, {
    "from": 607,
    "label": "assigns",
    "to": 646
  }, {
    "from": 646,
    "label": "assigns",
    "to": 647
  }, {
    "from": 607,
    "label": "assigns",
    "to": 648
  }, {
    "from": 648,
    "label": "assigns",
    "to": 649
  }, {
    "from": 607,
    "label": "assigns",
    "to": 650
  }, {
    "from": 650,
    "label": "assigns",
    "to": 651
  }, {
    "from": 607,
    "label": "assigns",
    "to": 652
  }, {
    "from": 652,
    "label": "assigns",
    "to": 653
  }, {
    "from": 607,
    "label": "assigns",
    "to": 654
  }, {
    "from": 654,
    "label": "assigns",
    "to": 655
  }, {
    "from": 607,
    "label": "assigns",
    "to": 656
  }, {
    "from": 656,
    "label": "assigns",
    "to": 657
  }, {
    "from": 607,
    "label": "assigns",
    "to": 658
  }, {
    "from": 658,
    "label": "assigns",
    "to": 659
  }, {
    "from": 607,
    "label": "assigns",
    "to": 660
  }, {
    "from": 660,
    "label": "assigns",
    "to": 661
  }, {
    "from": 607,
    "label": "assigns",
    "to": 662
  }, {
    "from": 662,
    "label": "assigns",
    "to": 663
  }, {
    "from": 607,
    "label": "assigns",
    "to": 664
  }, {
    "from": 664,
    "label": "assigns",
    "to": 665
  }, {
    "from": 607,
    "label": "assigns",
    "to": 666
  }, {
    "from": 666,
    "label": "assigns",
    "to": 667
  }, {
    "from": 607,
    "label": "assigns",
    "to": 668
  }, {
    "from": 668,
    "label": "assigns",
    "to": 669
  }, {
    "from": 607,
    "label": "assigns",
    "to": 670
  }, {
    "from": 670,
    "label": "assigns",
    "to": 671
  }, {
    "from": 607,
    "label": "assigns",
    "to": 672
  }, {
    "from": 672,
    "label": "assigns",
    "to": 673
  }, {
    "from": 607,
    "label": "assigns",
    "to": 674
  }, {
    "from": 674,
    "label": "assigns",
    "to": 675
  }, {
    "from": 607,
    "label": "assigns",
    "to": 676
  }, {
    "from": 676,
    "label": "assigns",
    "to": 677
  }, {
    "from": 607,
    "label": "assigns",
    "to": 678
  }, {
    "from": 678,
    "label": "assigns",
    "to": 679
  }, {
    "from": 607,
    "label": "assigns",
    "to": 680
  }, {
    "from": 680,
    "label": "assigns",
    "to": 681
  }, {
    "from": 607,
    "label": "assigns",
    "to": 682
  }, {
    "from": 682,
    "label": "assigns",
    "to": 683
  }, {
    "from": 607,
    "label": "assigns",
    "to": 684
  }, {
    "from": 684,
    "label": "assigns",
    "to": 685
  }, {
    "from": 607,
    "label": "assigns",
    "to": 686
  }, {
    "from": 686,
    "label": "assigns",
    "to": 687
  }, {
    "from": 607,
    "label": "assigns",
    "to": 688
  }, {
    "from": 688,
    "label": "assigns",
    "to": 689
  }, {
    "from": 607,
    "label": "assigns",
    "to": 690
  }, {
    "from": 690,
    "label": "assigns",
    "to": 691
  }, {
    "from": 607,
    "label": "assigns",
    "to": 692
  }, {
    "from": 692,
    "label": "assigns",
    "to": 693
  }, {
    "from": 607,
    "label": "assigns",
    "to": 694
  }, {
    "from": 694,
    "label": "assigns",
    "to": 695
  }, {
    "from": 607,
    "label": "assigns",
    "to": 696
  }, {
    "from": 696,
    "label": "assigns",
    "to": 697
  }, {
    "from": 607,
    "label": "assigns",
    "to": 698
  }, {
    "from": 698,
    "label": "assigns",
    "to": 699
  }, {
    "from": 607,
    "label": "assigns",
    "to": 700
  }, {
    "from": 700,
    "label": "assigns",
    "to": 701
  }, {
    "from": 607,
    "label": "assigns",
    "to": 702
  }, {
    "from": 702,
    "label": "assigns",
    "to": 703
  }, {
    "from": 607,
    "label": "assigns",
    "to": 704
  }, {
    "from": 704,
    "label": "assigns",
    "to": 705
  }, {
    "from": 607,
    "label": "assigns",
    "to": 706
  }, {
    "from": 706,
    "label": "assigns",
    "to": 707
  }, {
    "from": 607,
    "label": "assigns",
    "to": 708
  }, {
    "from": 708,
    "label": "assigns",
    "to": 709
  }, {
    "from": 607,
    "label": "assigns",
    "to": 710
  }, {
    "from": 710,
    "label": "assigns",
    "to": 711
  }, {
    "from": 607,
    "label": "assigns",
    "to": 712
  }, {
    "from": 712,
    "label": "assigns",
    "to": 713
  }, {
    "from": 607,
    "label": "assigns",
    "to": 714
  }, {
    "from": 714,
    "label": "assigns",
    "to": 715
  }, {
    "from": 607,
    "label": "assigns",
    "to": 716
  }, {
    "from": 716,
    "label": "assigns",
    "to": 717
  }, {
    "from": 607,
    "label": "assigns",
    "to": 718
  }, {
    "from": 718,
    "label": "assigns",
    "to": 719
  }, {
    "from": 607,
    "label": "assigns",
    "to": 720
  }, {
    "from": 720,
    "label": "assigns",
    "to": 721
  }, {
    "from": 607,
    "label": "assigns",
    "to": 722
  }, {
    "from": 722,
    "label": "assigns",
    "to": 723
  }, {
    "from": 607,
    "label": "assigns",
    "to": 724
  }, {
    "from": 724,
    "label": "assigns",
    "to": 725
  }, {
    "from": 607,
    "label": "assigns",
    "to": 726
  }, {
    "from": 726,
    "label": "assigns",
    "to": 727
  }, {
    "from": 607,
    "label": "assigns",
    "to": 728
  }, {
    "from": 728,
    "label": "assigns",
    "to": 729
  }, {
    "from": 607,
    "label": "assigns",
    "to": 730
  }, {
    "from": 730,
    "label": "assigns",
    "to": 731
  }, {
    "from": 607,
    "label": "assigns",
    "to": 732
  }, {
    "from": 732,
    "label": "assigns",
    "to": 733
  }, {
    "from": 607,
    "label": "assigns",
    "to": 734
  }, {
    "from": 734,
    "label": "assigns",
    "to": 735
  }, {
    "from": 607,
    "label": "assigns",
    "to": 736
  }, {
    "from": 736,
    "label": "assigns",
    "to": 737
  }, {
    "from": 607,
    "label": "assigns",
    "to": 738
  }, {
    "from": 738,
    "label": "assigns",
    "to": 739
  }, {
    "from": 607,
    "label": "assigns",
    "to": 740
  }, {
    "from": 740,
    "label": "assigns",
    "to": 741
  }, {
    "from": 607,
    "label": "assigns",
    "to": 742
  }, {
    "from": 742,
    "label": "assigns",
    "to": 743
  }, {
    "from": 607,
    "label": "assigns",
    "to": 744
  }, {
    "from": 744,
    "label": "assigns",
    "to": 745
  }, {
    "from": 607,
    "label": "assigns",
    "to": 746
  }, {
    "from": 746,
    "label": "assigns",
    "to": 747
  }, {
    "from": 607,
    "label": "assigns",
    "to": 748
  }, {
    "from": 748,
    "label": "assigns",
    "to": 749
  }, {
    "from": 607,
    "label": "assigns",
    "to": 750
  }, {
    "from": 750,
    "label": "assigns",
    "to": 751
  }, {
    "from": 607,
    "label": "assigns",
    "to": 752
  }, {
    "from": 752,
    "label": "assigns",
    "to": 753
  }, {
    "from": 607,
    "label": "assigns",
    "to": 754
  }, {
    "from": 754,
    "label": "assigns",
    "to": 755
  }, {
    "from": 607,
    "label": "assigns",
    "to": 756
  }, {
    "from": 756,
    "label": "assigns",
    "to": 757
  }, {
    "from": 607,
    "label": "assigns",
    "to": 758
  }, {
    "from": 758,
    "label": "assigns",
    "to": 759
  }, {
    "from": 607,
    "label": "assigns",
    "to": 760
  }, {
    "from": 760,
    "label": "assigns",
    "to": 761
  }, {
    "from": 607,
    "label": "assigns",
    "to": 762
  }, {
    "from": 762,
    "label": "assigns",
    "to": 763
  }, {
    "from": 607,
    "label": "assigns",
    "to": 764
  }, {
    "from": 764,
    "label": "assigns",
    "to": 765
  }, {
    "from": 607,
    "label": "assigns",
    "to": 766
  }, {
    "from": 766,
    "label": "assigns",
    "to": 767
  }, {
    "from": 607,
    "label": "assigns",
    "to": 768
  }, {
    "from": 768,
    "label": "assigns",
    "to": 769
  }, {
    "from": 607,
    "label": "assigns",
    "to": 770
  }, {
    "from": 770,
    "label": "assigns",
    "to": 771
  }, {
    "from": 607,
    "label": "assigns",
    "to": 772
  }, {
    "from": 772,
    "label": "assigns",
    "to": 773
  }, {
    "from": 607,
    "label": "assigns",
    "to": 774
  }, {
    "from": 774,
    "label": "assigns",
    "to": 775
  }, {
    "from": 607,
    "label": "assigns",
    "to": 776
  }, {
    "from": 776,
    "label": "assigns",
    "to": 777
  }, {
    "from": 607,
    "label": "assigns",
    "to": 778
  }, {
    "from": 778,
    "label": "assigns",
    "to": 779
  }, {
    "from": 607,
    "label": "assigns",
    "to": 780
  }, {
    "from": 780,
    "label": "assigns",
    "to": 781
  }, {
    "from": 607,
    "label": "assigns",
    "to": 782
  }, {
    "from": 782,
    "label": "assigns",
    "to": 783
  }, {
    "from": 607,
    "label": "assigns",
    "to": 784
  }, {
    "from": 784,
    "label": "assigns",
    "to": 785
  }, {
    "from": 607,
    "label": "assigns",
    "to": 786
  }, {
    "from": 786,
    "label": "assigns",
    "to": 787
  }, {
    "from": 607,
    "label": "assigns",
    "to": 788
  }, {
    "from": 788,
    "label": "assigns",
    "to": 789
  }, {
    "from": 607,
    "label": "assigns",
    "to": 790
  }, {
    "from": 790,
    "label": "assigns",
    "to": 791
  }, {
    "from": 607,
    "label": "assigns",
    "to": 792
  }, {
    "from": 792,
    "label": "assigns",
    "to": 793
  }, {
    "from": 607,
    "label": "assigns",
    "to": 794
  }, {
    "from": 794,
    "label": "assigns",
    "to": 795
  }, {
    "from": 607,
    "label": "assigns",
    "to": 796
  }, {
    "from": 796,
    "label": "assigns",
    "to": 797
  }, {
    "from": 607,
    "label": "assigns",
    "to": 798
  }, {
    "from": 798,
    "label": "assigns",
    "to": 799
  }, {
    "from": 607,
    "label": "assigns",
    "to": 800
  }, {
    "from": 800,
    "label": "assigns",
    "to": 801
  }, {
    "from": 607,
    "label": "assigns",
    "to": 802
  }, {
    "from": 802,
    "label": "assigns",
    "to": 803
  }, {
    "from": 607,
    "label": "assigns",
    "to": 804
  }, {
    "from": 804,
    "label": "assigns",
    "to": 805
  }, {
    "from": 607,
    "label": "assigns",
    "to": 806
  }, {
    "from": 806,
    "label": "assigns",
    "to": 807
  }, {
    "from": 607,
    "label": "assigns",
    "to": 808
  }, {
    "from": 808,
    "label": "assigns",
    "to": 809
  }, {
    "from": 607,
    "label": "assigns",
    "to": 810
  }, {
    "from": 810,
    "label": "assigns",
    "to": 811
  }, {
    "from": 607,
    "label": "assigns",
    "to": 812
  }, {
    "from": 812,
    "label": "assigns",
    "to": 813
  }, {
    "from": 607,
    "label": "assigns",
    "to": 814
  }, {
    "from": 814,
    "label": "assigns",
    "to": 815
  }, {
    "from": 607,
    "label": "assigns",
    "to": 816
  }, {
    "from": 816,
    "label": "assigns",
    "to": 817
  }, {
    "from": 607,
    "label": "assigns",
    "to": 818
  }, {
    "from": 818,
    "label": "assigns",
    "to": 819
  }, {
    "from": 607,
    "label": "assigns",
    "to": 820
  }, {
    "from": 820,
    "label": "assigns",
    "to": 821
  }, {
    "from": 607,
    "label": "assigns",
    "to": 822
  }, {
    "from": 822,
    "label": "assigns",
    "to": 823
  }, {
    "from": 607,
    "label": "assigns",
    "to": 824
  }, {
    "from": 824,
    "label": "assigns",
    "to": 825
  }, {
    "from": 607,
    "label": "assigns",
    "to": 826
  }, {
    "from": 826,
    "label": "assigns",
    "to": 827
  }, {
    "from": 607,
    "label": "assigns",
    "to": 828
  }, {
    "from": 828,
    "label": "assigns",
    "to": 829
  }, {
    "from": 607,
    "label": "assigns",
    "to": 830
  }, {
    "from": 830,
    "label": "assigns",
    "to": 831
  }, {
    "from": 607,
    "label": "assigns",
    "to": 832
  }, {
    "from": 832,
    "label": "assigns",
    "to": 833
  }, {
    "from": 607,
    "label": "assigns",
    "to": 834
  }, {
    "from": 834,
    "label": "assigns",
    "to": 835
  }, {
    "from": 607,
    "label": "assigns",
    "to": 836
  }, {
    "from": 836,
    "label": "assigns",
    "to": 837
  }, {
    "from": 607,
    "label": "assigns",
    "to": 838
  }, {
    "from": 838,
    "label": "assigns",
    "to": 839
  }, {
    "from": 607,
    "label": "assigns",
    "to": 840
  }, {
    "from": 840,
    "label": "assigns",
    "to": 841
  }, {
    "from": 607,
    "label": "assigns",
    "to": 842
  }, {
    "from": 842,
    "label": "assigns",
    "to": 843
  }, {
    "from": 607,
    "label": "assigns",
    "to": 844
  }, {
    "from": 844,
    "label": "assigns",
    "to": 845
  }, {
    "from": 607,
    "label": "assigns",
    "to": 846
  }, {
    "from": 846,
    "label": "assigns",
    "to": 847
  }, {
    "from": 607,
    "label": "assigns",
    "to": 848
  }, {
    "from": 848,
    "label": "assigns",
    "to": 849
  }, {
    "from": 607,
    "label": "assigns",
    "to": 850
  }, {
    "from": 850,
    "label": "assigns",
    "to": 851
  }, {
    "from": 607,
    "label": "assigns",
    "to": 852
  }, {
    "from": 852,
    "label": "assigns",
    "to": 853
  }, {
    "from": 607,
    "label": "assigns",
    "to": 854
  }, {
    "from": 854,
    "label": "assigns",
    "to": 855
  }, {
    "from": 607,
    "label": "assigns",
    "to": 856
  }, {
    "from": 856,
    "label": "assigns",
    "to": 857
  }, {
    "from": 607,
    "label": "assigns",
    "to": 858
  }, {
    "from": 858,
    "label": "assigns",
    "to": 859
  }, {
    "from": 607,
    "label": "assigns",
    "to": 860
  }, {
    "from": 860,
    "label": "assigns",
    "to": 861
  }, {
    "from": 607,
    "label": "assigns",
    "to": 862
  }, {
    "from": 862,
    "label": "assigns",
    "to": 863
  }, {
    "from": 607,
    "label": "assigns",
    "to": 864
  }, {
    "from": 864,
    "label": "assigns",
    "to": 865
  }, {
    "from": 607,
    "label": "assigns",
    "to": 866
  }, {
    "from": 866,
    "label": "assigns",
    "to": 867
  }, {
    "from": 607,
    "label": "assigns",
    "to": 868
  }, {
    "from": 868,
    "label": "assigns",
    "to": 869
  }, {
    "from": 607,
    "label": "assigns",
    "to": 870
  }, {
    "from": 870,
    "label": "assigns",
    "to": 871
  }, {
    "from": 607,
    "label": "assigns",
    "to": 872
  }, {
    "from": 872,
    "label": "assigns",
    "to": 873
  }, {
    "from": 607,
    "label": "assigns",
    "to": 874
  }, {
    "from": 874,
    "label": "assigns",
    "to": 875
  }, {
    "from": 607,
    "label": "assigns",
    "to": 876
  }, {
    "from": 876,
    "label": "assigns",
    "to": 877
  }, {
    "from": 607,
    "label": "assigns",
    "to": 878
  }, {
    "from": 878,
    "label": "assigns",
    "to": 879
  }, {
    "from": 607,
    "label": "assigns",
    "to": 880
  }, {
    "from": 880,
    "label": "assigns",
    "to": 881
  }, {
    "from": 607,
    "label": "assigns",
    "to": 882
  }, {
    "from": 882,
    "label": "assigns",
    "to": 883
  }, {
    "from": 607,
    "label": "assigns",
    "to": 884
  }, {
    "from": 884,
    "label": "assigns",
    "to": 885
  }, {
    "from": 607,
    "label": "assigns",
    "to": 886
  }, {
    "from": 886,
    "label": "assigns",
    "to": 887
  }, {
    "from": 607,
    "label": "assigns",
    "to": 888
  }, {
    "from": 888,
    "label": "assigns",
    "to": 889
  }, {
    "from": 607,
    "label": "assigns",
    "to": 890
  }, {
    "from": 890,
    "label": "assigns",
    "to": 891
  }, {
    "from": 607,
    "label": "assigns",
    "to": 892
  }, {
    "from": 892,
    "label": "assigns",
    "to": 893
  }, {
    "from": 607,
    "label": "assigns",
    "to": 894
  }, {
    "from": 894,
    "label": "assigns",
    "to": 895
  }, {
    "from": 607,
    "label": "assigns",
    "to": 896
  }, {
    "from": 896,
    "label": "assigns",
    "to": 897
  }, {
    "from": 607,
    "label": "assigns",
    "to": 898
  }, {
    "from": 898,
    "label": "assigns",
    "to": 899
  }, {
    "from": 607,
    "label": "assigns",
    "to": 900
  }, {
    "from": 900,
    "label": "assigns",
    "to": 901
  }, {
    "from": 607,
    "label": "assigns",
    "to": 902
  }, {
    "from": 902,
    "label": "assigns",
    "to": 903
  }, {
    "from": 607,
    "label": "assigns",
    "to": 904
  }, {
    "from": 904,
    "label": "assigns",
    "to": 905
  }, {
    "from": 607,
    "label": "assigns",
    "to": 906
  }, {
    "from": 906,
    "label": "assigns",
    "to": 907
  }, {
    "from": 607,
    "label": "assigns",
    "to": 908
  }, {
    "from": 908,
    "label": "assigns",
    "to": 909
  }, {
    "from": 607,
    "label": "assigns",
    "to": 910
  }, {
    "from": 910,
    "label": "assigns",
    "to": 911
  }, {
    "from": 607,
    "label": "assigns",
    "to": 912
  }, {
    "from": 912,
    "label": "assigns",
    "to": 913
  }, {
    "from": 607,
    "label": "assigns",
    "to": 914
  }, {
    "from": 914,
    "label": "assigns",
    "to": 915
  }, {
    "from": 607,
    "label": "assigns",
    "to": 916
  }, {
    "from": 916,
    "label": "assigns",
    "to": 917
  }, {
    "from": 607,
    "label": "assigns",
    "to": 918
  }, {
    "from": 918,
    "label": "assigns",
    "to": 919
  }, {
    "from": 607,
    "label": "assigns",
    "to": 920
  }, {
    "from": 920,
    "label": "assigns",
    "to": 921
  }, {
    "from": 607,
    "label": "assigns",
    "to": 922
  }, {
    "from": 922,
    "label": "assigns",
    "to": 923
  }, {
    "from": 607,
    "label": "assigns",
    "to": 924
  }, {
    "from": 924,
    "label": "assigns",
    "to": 925
  }, {
    "from": 607,
    "label": "assigns",
    "to": 926
  }, {
    "from": 926,
    "label": "assigns",
    "to": 927
  }, {
    "from": 607,
    "label": "assigns",
    "to": 928
  }, {
    "from": 928,
    "label": "assigns",
    "to": 929
  }, {
    "from": 607,
    "label": "assigns",
    "to": 930
  }, {
    "from": 930,
    "label": "assigns",
    "to": 931
  }, {
    "from": 607,
    "label": "assigns",
    "to": 932
  }, {
    "from": 932,
    "label": "assigns",
    "to": 933
  }, {
    "from": 607,
    "label": "assigns",
    "to": 934
  }, {
    "from": 934,
    "label": "assigns",
    "to": 935
  }, {
    "from": 607,
    "label": "assigns",
    "to": 936
  }, {
    "from": 936,
    "label": "assigns",
    "to": 937
  }, {
    "from": 607,
    "label": "assigns",
    "to": 938
  }, {
    "from": 938,
    "label": "assigns",
    "to": 939
  }, {
    "from": 607,
    "label": "assigns",
    "to": 940
  }, {
    "from": 940,
    "label": "assigns",
    "to": 941
  }, {
    "from": 607,
    "label": "assigns",
    "to": 942
  }, {
    "from": 942,
    "label": "assigns",
    "to": 943
  }, {
    "from": 607,
    "label": "assigns",
    "to": 944
  }, {
    "from": 944,
    "label": "assigns",
    "to": 945
  }, {
    "from": 607,
    "label": "assigns",
    "to": 946
  }, {
    "from": 946,
    "label": "assigns",
    "to": 947
  }, {
    "from": 607,
    "label": "assigns",
    "to": 948
  }, {
    "from": 948,
    "label": "assigns",
    "to": 949
  }, {
    "from": 607,
    "label": "assigns",
    "to": 950
  }, {
    "from": 950,
    "label": "assigns",
    "to": 951
  }, {
    "from": 607,
    "label": "assigns",
    "to": 952
  }, {
    "from": 952,
    "label": "assigns",
    "to": 953
  }, {
    "from": 607,
    "label": "assigns",
    "to": 954
  }, {
    "from": 954,
    "label": "assigns",
    "to": 955
  }, {
    "from": 607,
    "label": "assigns",
    "to": 956
  }, {
    "from": 956,
    "label": "assigns",
    "to": 957
  }, {
    "from": 607,
    "label": "assigns",
    "to": 958
  }, {
    "from": 958,
    "label": "assigns",
    "to": 959
  }, {
    "from": 607,
    "label": "assigns",
    "to": 960
  }, {
    "from": 960,
    "label": "assigns",
    "to": 961
  }, {
    "from": 607,
    "label": "assigns",
    "to": 962
  }, {
    "from": 962,
    "label": "assigns",
    "to": 963
  }, {
    "from": 607,
    "label": "assigns",
    "to": 964
  }, {
    "from": 964,
    "label": "assigns",
    "to": 965
  }, {
    "from": 607,
    "label": "assigns",
    "to": 966
  }, {
    "from": 966,
    "label": "assigns",
    "to": 967
  }, {
    "from": 607,
    "label": "assigns",
    "to": 968
  }, {
    "from": 968,
    "label": "assigns",
    "to": 969
  }, {
    "from": 607,
    "label": "assigns",
    "to": 970
  }, {
    "from": 970,
    "label": "assigns",
    "to": 971
  }, {
    "from": 607,
    "label": "assigns",
    "to": 972
  }, {
    "from": 972,
    "label": "assigns",
    "to": 973
  }, {
    "from": 607,
    "label": "assigns",
    "to": 974
  }, {
    "from": 974,
    "label": "assigns",
    "to": 975
  }, {
    "from": 607,
    "label": "assigns",
    "to": 976
  }, {
    "from": 976,
    "label": "assigns",
    "to": 977
  }, {
    "from": 607,
    "label": "assigns",
    "to": 978
  }, {
    "from": 978,
    "label": "assigns",
    "to": 979
  }, {
    "from": 607,
    "label": "assigns",
    "to": 980
  }, {
    "from": 980,
    "label": "assigns",
    "to": 981
  }, {
    "from": 607,
    "label": "assigns",
    "to": 982
  }, {
    "from": 982,
    "label": "assigns",
    "to": 983
  }, {
    "from": 607,
    "label": "assigns",
    "to": 984
  }, {
    "from": 984,
    "label": "assigns",
    "to": 985
  }, {
    "from": 607,
    "label": "assigns",
    "to": 986
  }, {
    "from": 986,
    "label": "assigns",
    "to": 987
  }, {
    "from": 607,
    "label": "assigns",
    "to": 988
  }, {
    "from": 988,
    "label": "assigns",
    "to": 989
  }, {
    "from": 607,
    "label": "assigns",
    "to": 990
  }, {
    "from": 990,
    "label": "assigns",
    "to": 991
  }, {
    "from": 607,
    "label": "assigns",
    "to": 992
  }, {
    "from": 992,
    "label": "assigns",
    "to": 993
  }, {
    "from": 607,
    "label": "assigns",
    "to": 994
  }, {
    "from": 994,
    "label": "assigns",
    "to": 995
  }, {
    "from": 607,
    "label": "assigns",
    "to": 996
  }, {
    "from": 996,
    "label": "assigns",
    "to": 997
  }, {
    "from": 607,
    "label": "assigns",
    "to": 998
  }, {
    "from": 998,
    "label": "assigns",
    "to": 999
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1000
  }, {
    "from": 1000,
    "label": "assigns",
    "to": 1001
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1002
  }, {
    "from": 1002,
    "label": "assigns",
    "to": 1003
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1004
  }, {
    "from": 1004,
    "label": "assigns",
    "to": 1005
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1006
  }, {
    "from": 1006,
    "label": "assigns",
    "to": 1007
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1008
  }, {
    "from": 1008,
    "label": "assigns",
    "to": 1009
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1010
  }, {
    "from": 1010,
    "label": "assigns",
    "to": 1011
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1012
  }, {
    "from": 1012,
    "label": "assigns",
    "to": 1013
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1014
  }, {
    "from": 1014,
    "label": "assigns",
    "to": 1015
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1016
  }, {
    "from": 1016,
    "label": "assigns",
    "to": 1017
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1018
  }, {
    "from": 1018,
    "label": "assigns",
    "to": 1019
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1020
  }, {
    "from": 1020,
    "label": "assigns",
    "to": 1021
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1022
  }, {
    "from": 1022,
    "label": "assigns",
    "to": 1023
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1024
  }, {
    "from": 1024,
    "label": "assigns",
    "to": 1025
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1026
  }, {
    "from": 1026,
    "label": "assigns",
    "to": 1027
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1028
  }, {
    "from": 1028,
    "label": "assigns",
    "to": 1029
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1030
  }, {
    "from": 1030,
    "label": "assigns",
    "to": 1031
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1032
  }, {
    "from": 1032,
    "label": "assigns",
    "to": 1033
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1034
  }, {
    "from": 1034,
    "label": "assigns",
    "to": 1035
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1036
  }, {
    "from": 1036,
    "label": "assigns",
    "to": 1037
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1038
  }, {
    "from": 1038,
    "label": "assigns",
    "to": 1039
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1040
  }, {
    "from": 1040,
    "label": "assigns",
    "to": 1041
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1042
  }, {
    "from": 1042,
    "label": "assigns",
    "to": 1043
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1044
  }, {
    "from": 1044,
    "label": "assigns",
    "to": 1045
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1046
  }, {
    "from": 1046,
    "label": "assigns",
    "to": 1047
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1048
  }, {
    "from": 1048,
    "label": "assigns",
    "to": 1049
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1050
  }, {
    "from": 1050,
    "label": "assigns",
    "to": 1051
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1052
  }, {
    "from": 1052,
    "label": "assigns",
    "to": 1053
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1054
  }, {
    "from": 1054,
    "label": "assigns",
    "to": 1055
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1056
  }, {
    "from": 1056,
    "label": "assigns",
    "to": 1057
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1058
  }, {
    "from": 1058,
    "label": "assigns",
    "to": 1059
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1060
  }, {
    "from": 1060,
    "label": "assigns",
    "to": 1061
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1062
  }, {
    "from": 1062,
    "label": "assigns",
    "to": 1063
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1064
  }, {
    "from": 1064,
    "label": "assigns",
    "to": 1065
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1066
  }, {
    "from": 1066,
    "label": "assigns",
    "to": 1067
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1068
  }, {
    "from": 1068,
    "label": "assigns",
    "to": 1069
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1070
  }, {
    "from": 1070,
    "label": "assigns",
    "to": 1071
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1072
  }, {
    "from": 1072,
    "label": "assigns",
    "to": 1073
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1074
  }, {
    "from": 1074,
    "label": "assigns",
    "to": 1075
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1076
  }, {
    "from": 1076,
    "label": "assigns",
    "to": 1077
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1078
  }, {
    "from": 1078,
    "label": "assigns",
    "to": 1079
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1080
  }, {
    "from": 1080,
    "label": "assigns",
    "to": 1081
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1082
  }, {
    "from": 1082,
    "label": "assigns",
    "to": 1083
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1084
  }, {
    "from": 1084,
    "label": "assigns",
    "to": 1085
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1086
  }, {
    "from": 1086,
    "label": "assigns",
    "to": 1087
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1088
  }, {
    "from": 1088,
    "label": "assigns",
    "to": 1089
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1090
  }, {
    "from": 1090,
    "label": "assigns",
    "to": 1091
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1092
  }, {
    "from": 1092,
    "label": "assigns",
    "to": 1093
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1094
  }, {
    "from": 1094,
    "label": "assigns",
    "to": 1095
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1096
  }, {
    "from": 1096,
    "label": "assigns",
    "to": 1097
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1098
  }, {
    "from": 1098,
    "label": "assigns",
    "to": 1099
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1100
  }, {
    "from": 1100,
    "label": "assigns",
    "to": 1101
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1102
  }, {
    "from": 1102,
    "label": "assigns",
    "to": 1103
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1104
  }, {
    "from": 1104,
    "label": "assigns",
    "to": 1105
  }, {
    "from": 607,
    "label": "assigns",
    "to": 1106
  }, {
    "from": 1106,
    "label": "assigns",
    "to": 1107
  }, {
    "from": 602,
    "label": "initializes",
    "to": 1108
  }, {
    "from": 1108,
    "label": "assigns",
    "to": 1109
  }, {
    "from": 602,
    "label": "initializes",
    "to": 1110
  }, {
    "from": 602,
    "label": "initializes",
    "to": 1111
  }, {
    "from": 1111,
    "label": "assigns",
    "to": 1112
  }, {
    "from": 1112,
    "label": "assigns",
    "to": 1113
  }, {
    "from": 1113,
    "label": "assigns",
    "to": 1114
  }, {
    "from": 1112,
    "label": "assigns",
    "to": 1115
  }, {
    "from": 1115,
    "label": "assigns",
    "to": 1116
  }, {
    "from": 1112,
    "label": "assigns",
    "to": 1117
  }, {
    "from": 1117,
    "label": "assigns",
    "to": 1118
  }, {
    "from": 1112,
    "label": "assigns",
    "to": 1119
  }, {
    "from": 1119,
    "label": "assigns",
    "to": 1120
  }, {
    "from": 1112,
    "label": "assigns",
    "to": 1121
  }, {
    "from": 1121,
    "label": "assigns",
    "to": 1122
  }, {
    "from": 1112,
    "label": "assigns",
    "to": 1123
  }, {
    "from": 1123,
    "label": "assigns",
    "to": 1124
  }, {
    "from": 1112,
    "label": "assigns",
    "to": 1125
  }, {
    "from": 1125,
    "label": "assigns",
    "to": 1126
  }, {
    "from": 1112,
    "label": "assigns",
    "to": 1127
  }, {
    "from": 1127,
    "label": "assigns",
    "to": 1128
  }, {
    "from": 1112,
    "label": "assigns",
    "to": 1129
  }, {
    "from": 1129,
    "label": "assigns",
    "to": 1130
  }, {
    "from": 602,
    "label": "initializes",
    "to": 1131
  }, {
    "from": 1131,
    "label": "assigns",
    "to": 1132
  }, {
    "from": 602,
    "label": "initializes",
    "to": 1133
  }, {
    "from": 1133,
    "label": "assigns",
    "to": 1134
  }, {
    "from": 603,
    "label": "initializes",
    "to": 1135
  }, {
    "from": 1135,
    "label": "requires",
    "to": 1
  }, {
    "from": 603,
    "label": "initializes",
    "to": 1136
  }, {
    "from": 1136,
    "label": "requires",
    "to": 1137
  }, {
    "from": 2,
    "label": "provides",
    "to": 1138
  }, {
    "from": 419,
    "label": "represents",
    "to": 1139
  }, {
    "from": 1138,
    "label": "provides",
    "to": 1139
  }, {
    "from": 1140,
    "label": "requires",
    "to": 2
  }, {
    "from": 1141,
    "label": "requires",
    "to": 2
  }, {
    "from": 1108,
    "label": "contains",
    "to": 5
  }, {
    "from": 1108,
    "label": "contains",
    "to": 6
  }, {
    "from": 1108,
    "label": "contains",
    "to": 7
  }, {
    "from": 1108,
    "label": "contains",
    "to": 8
  }, {
    "from": 1108,
    "label": "contains",
    "to": 9
  }, {
    "from": 1108,
    "label": "contains",
    "to": 10
  }, {
    "from": 1108,
    "label": "contains",
    "to": 11
  }, {
    "from": 1108,
    "label": "contains",
    "to": 12
  }, {
    "from": 1108,
    "label": "contains",
    "to": 13
  }, {
    "from": 1108,
    "label": "contains",
    "to": 14
  }, {
    "from": 1108,
    "label": "contains",
    "to": 15
  }, {
    "from": 1108,
    "label": "contains",
    "to": 17
  }, {
    "from": 1108,
    "label": "contains",
    "to": 24
  }, {
    "from": 1108,
    "label": "contains",
    "to": 27
  }, {
    "from": 1108,
    "label": "contains",
    "to": 193
  }, {
    "from": 1108,
    "label": "contains",
    "to": 195
  }, {
    "from": 1108,
    "label": "contains",
    "to": 203
  }, {
    "from": 1108,
    "label": "contains",
    "to": 207
  }, {
    "from": 1108,
    "label": "contains",
    "to": 209
  }, {
    "from": 1108,
    "label": "contains",
    "to": 211
  }, {
    "from": 1108,
    "label": "contains",
    "to": 213
  }, {
    "from": 1108,
    "label": "contains",
    "to": 217
  }, {
    "from": 1108,
    "label": "contains",
    "to": 221
  }, {
    "from": 1108,
    "label": "contains",
    "to": 224
  }, {
    "from": 1108,
    "label": "contains",
    "to": 226
  }, {
    "from": 1108,
    "label": "contains",
    "to": 228
  }, {
    "from": 1108,
    "label": "contains",
    "to": 232
  }, {
    "from": 1108,
    "label": "contains",
    "to": 234
  }, {
    "from": 1108,
    "label": "contains",
    "to": 236
  }, {
    "from": 1108,
    "label": "contains",
    "to": 238
  }, {
    "from": 1108,
    "label": "contains",
    "to": 243
  }, {
    "from": 1108,
    "label": "contains",
    "to": 245
  }, {
    "from": 1108,
    "label": "contains",
    "to": 247
  }, {
    "from": 1108,
    "label": "contains",
    "to": 249
  }, {
    "from": 1108,
    "label": "contains",
    "to": 251
  }, {
    "from": 1108,
    "label": "contains",
    "to": 269
  }, {
    "from": 1108,
    "label": "contains",
    "to": 333
  }, {
    "from": 1108,
    "label": "contains",
    "to": 351
  }, {
    "from": 253,
    "label": "hasArgument",
    "to": 1114
  }, {
    "from": 253,
    "label": "hasArgument",
    "to": 1116
  }, {
    "from": 253,
    "label": "hasArgument",
    "to": 1118
  }, {
    "from": 253,
    "label": "hasArgument",
    "to": 1120
  }, {
    "from": 253,
    "label": "hasArgument",
    "to": 1122
  }, {
    "from": 253,
    "label": "hasArgument",
    "to": 1124
  }, {
    "from": 253,
    "label": "hasArgument",
    "to": 1126
  }, {
    "from": 253,
    "label": "hasArgument",
    "to": 1128
  }, {
    "from": 253,
    "label": "hasArgument",
    "to": 1130
  }, {
    "from": 257,
    "label": "hasArgument",
    "to": 1114
  }, {
    "from": 257,
    "label": "hasArgument",
    "to": 1116
  }, {
    "from": 257,
    "label": "hasArgument",
    "to": 1118
  }, {
    "from": 257,
    "label": "hasArgument",
    "to": 1120
  }, {
    "from": 257,
    "label": "hasArgument",
    "to": 1122
  }, {
    "from": 257,
    "label": "hasArgument",
    "to": 1124
  }, {
    "from": 257,
    "label": "hasArgument",
    "to": 1126
  }, {
    "from": 257,
    "label": "hasArgument",
    "to": 1128
  }, {
    "from": 257,
    "label": "hasArgument",
    "to": 1130
  }, {
    "from": 262,
    "label": "hasArgument",
    "to": 1114
  }, {
    "from": 262,
    "label": "hasArgument",
    "to": 1116
  }, {
    "from": 262,
    "label": "hasArgument",
    "to": 1118
  }, {
    "from": 262,
    "label": "hasArgument",
    "to": 1120
  }, {
    "from": 262,
    "label": "hasArgument",
    "to": 1122
  }, {
    "from": 262,
    "label": "hasArgument",
    "to": 1124
  }, {
    "from": 262,
    "label": "hasArgument",
    "to": 1126
  }, {
    "from": 262,
    "label": "hasArgument",
    "to": 1128
  }, {
    "from": 262,
    "label": "hasArgument",
    "to": 1130
  }, {
    "from": 266,
    "label": "hasArgument",
    "to": 1114
  }, {
    "from": 266,
    "label": "hasArgument",
    "to": 1116
  }, {
    "from": 266,
    "label": "hasArgument",
    "to": 1118
  }, {
    "from": 266,
    "label": "hasArgument",
    "to": 1120
  }, {
    "from": 266,
    "label": "hasArgument",
    "to": 1122
  }, {
    "from": 266,
    "label": "hasArgument",
    "to": 1124
  }, {
    "from": 266,
    "label": "hasArgument",
    "to": 1126
  }, {
    "from": 266,
    "label": "hasArgument",
    "to": 1128
  }, {
    "from": 266,
    "label": "hasArgument",
    "to": 1130
  }, {
    "from": 279,
    "label": "hasArgument",
    "to": 1114
  }, {
    "from": 279,
    "label": "hasArgument",
    "to": 1116
  }, {
    "from": 279,
    "label": "hasArgument",
    "to": 1118
  }, {
    "from": 279,
    "label": "hasArgument",
    "to": 1120
  }, {
    "from": 279,
    "label": "hasArgument",
    "to": 1122
  }, {
    "from": 279,
    "label": "hasArgument",
    "to": 1124
  }, {
    "from": 279,
    "label": "hasArgument",
    "to": 1126
  }, {
    "from": 279,
    "label": "hasArgument",
    "to": 1128
  }, {
    "from": 279,
    "label": "hasArgument",
    "to": 1130
  }, {
    "from": 310,
    "label": "hasArgument",
    "to": 1114
  }, {
    "from": 310,
    "label": "hasArgument",
    "to": 1116
  }, {
    "from": 310,
    "label": "hasArgument",
    "to": 1118
  }, {
    "from": 310,
    "label": "hasArgument",
    "to": 1120
  }, {
    "from": 310,
    "label": "hasArgument",
    "to": 1122
  }, {
    "from": 310,
    "label": "hasArgument",
    "to": 1124
  }, {
    "from": 310,
    "label": "hasArgument",
    "to": 1126
  }, {
    "from": 310,
    "label": "hasArgument",
    "to": 1128
  }, {
    "from": 310,
    "label": "hasArgument",
    "to": 1130
  }, {
    "from": 344,
    "label": "hasArgument",
    "to": 1114
  }, {
    "from": 344,
    "label": "hasArgument",
    "to": 1116
  }, {
    "from": 344,
    "label": "hasArgument",
    "to": 1118
  }, {
    "from": 344,
    "label": "hasArgument",
    "to": 1120
  }, {
    "from": 344,
    "label": "hasArgument",
    "to": 1122
  }, {
    "from": 344,
    "label": "hasArgument",
    "to": 1124
  }, {
    "from": 344,
    "label": "hasArgument",
    "to": 1126
  }, {
    "from": 344,
    "label": "hasArgument",
    "to": 1128
  }, {
    "from": 344,
    "label": "hasArgument",
    "to": 1130
  }, {
    "from": 349,
    "label": "hasArgument",
    "to": 1114
  }, {
    "from": 349,
    "label": "hasArgument",
    "to": 1116
  }, {
    "from": 349,
    "label": "hasArgument",
    "to": 1118
  }, {
    "from": 349,
    "label": "hasArgument",
    "to": 1120
  }, {
    "from": 349,
    "label": "hasArgument",
    "to": 1122
  }, {
    "from": 349,
    "label": "hasArgument",
    "to": 1124
  }, {
    "from": 349,
    "label": "hasArgument",
    "to": 1126
  }, {
    "from": 349,
    "label": "hasArgument",
    "to": 1128
  }, {
    "from": 349,
    "label": "hasArgument",
    "to": 1130
  }, {
    "from": 364,
    "label": "hasArgument",
    "to": 1114
  }, {
    "from": 364,
    "label": "hasArgument",
    "to": 1116
  }, {
    "from": 364,
    "label": "hasArgument",
    "to": 1118
  }, {
    "from": 364,
    "label": "hasArgument",
    "to": 1120
  }, {
    "from": 364,
    "label": "hasArgument",
    "to": 1122
  }, {
    "from": 364,
    "label": "hasArgument",
    "to": 1124
  }, {
    "from": 364,
    "label": "hasArgument",
    "to": 1126
  }, {
    "from": 364,
    "label": "hasArgument",
    "to": 1128
  }, {
    "from": 364,
    "label": "hasArgument",
    "to": 1130
  }, {
    "from": 366,
    "label": "hasArgument",
    "to": 1114
  }, {
    "from": 366,
    "label": "hasArgument",
    "to": 1116
  }, {
    "from": 366,
    "label": "hasArgument",
    "to": 1118
  }, {
    "from": 366,
    "label": "hasArgument",
    "to": 1120
  }, {
    "from": 366,
    "label": "hasArgument",
    "to": 1122
  }, {
    "from": 366,
    "label": "hasArgument",
    "to": 1124
  }, {
    "from": 366,
    "label": "hasArgument",
    "to": 1126
  }, {
    "from": 366,
    "label": "hasArgument",
    "to": 1128
  }, {
    "from": 366,
    "label": "hasArgument",
    "to": 1130
  }, {
    "from": 370,
    "label": "hasArgument",
    "to": 1114
  }, {
    "from": 370,
    "label": "hasArgument",
    "to": 1116
  }, {
    "from": 370,
    "label": "hasArgument",
    "to": 1118
  }, {
    "from": 370,
    "label": "hasArgument",
    "to": 1120
  }, {
    "from": 370,
    "label": "hasArgument",
    "to": 1122
  }, {
    "from": 370,
    "label": "hasArgument",
    "to": 1124
  }, {
    "from": 370,
    "label": "hasArgument",
    "to": 1126
  }, {
    "from": 370,
    "label": "hasArgument",
    "to": 1128
  }, {
    "from": 370,
    "label": "hasArgument",
    "to": 1130
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "findfile",
    "type": "module"
  }, {
    "id": 2,
    "text": "fs",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function prequire(m) \r\n  local ok, err = pcall(require, m) \r\n  if not ok then return nil, err end\r\n  return err\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "",
    "type": "function container"
  }, {
    "id": 5,
    "text": "function _M.ctime(P)   return attrib(P,'change') end",
    "type": "function"
  }, {
    "id": 6,
    "text": "function _M.atime(P)   return attrib(P,'access') end",
    "type": "function"
  }, {
    "id": 7,
    "text": "function _M.mtime(P)   return attrib(P,'modification') end",
    "type": "function"
  }, {
    "id": 8,
    "text": "function _M.size(P)    return attrib(P,'size') end",
    "type": "function"
  }, {
    "id": 9,
    "text": "function _M.exists(P)  return attrib(P,'mode') ~= nil and P end",
    "type": "function"
  }, {
    "id": 10,
    "text": "function _M.isdir(P)   return attrib(P,'mode') == 'directory' and P end",
    "type": "function"
  }, {
    "id": 11,
    "text": "function _M.isfile(P)  return attrib(P,'mode') == 'file' and P end",
    "type": "function"
  }, {
    "id": 12,
    "text": "function _M.islink(P)  return attrib(P,'mode') == 'link' and P end",
    "type": "function"
  }, {
    "id": 13,
    "text": "function _M.copy(src, dst, force)\r\n  if not IS_WINDOWS then\r\n    if _M.isdir(src) or _M.isdir(dst) then\r\n      return nil, 'can not copy directories'\r\n    end\r\n  end\r\n  local f, err = io.open(src, 'rb')\r\n  if not f then return nil, err end\r\n\r\n  if not force then\r\n    local t, err = io.open(dst, 'rb' )\r\n    if t then \r\n      f:close()\r\n      t:close()\r\n      return nil, \"file alredy exists\"\r\n    end\r\n  end\r\n\r\n  local t, err = io.open(dst, 'w+b')\r\n  if not t then\r\n    f:close()\r\n    return nil, err\r\n  end\r\n\r\n  local CHUNK_SIZE = 4096\r\n  while true do\r\n    local chunk = f:read(CHUNK_SIZE)\r\n    if not chunk then break end\r\n    local ok, err = t:write(chunk)\r\n    if not ok then\r\n      t:close()\r\n      f:close()\r\n      return nil, err or \"can not write\"\r\n    end\r\n  end\r\n\r\n  t:close()\r\n  f:close()\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "function _M.move(src, dst, flags)\r\n  if flags and _M.exists(dst) and _M.exists(src) then\r\n    local ok, err = _M.remove(dst)\r\n    -- do we have to remove dir?\r\n    -- if not ok then ok, err = _M.rmdir(dst) end\r\n    if not ok then return nil, err end\r\n  end\r\n  if (not IS_WINDOWS) and _M.exists(dst) then\r\n    -- on windows os.rename return error when dst exists, \r\n    -- but on linux its just replace existed file\r\n    return nil, \"destination alredy exists\"\r\n  end\r\n  return os.rename(src, dst)\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "function _M.remove(P)\r\n  -- on windows os.remove can not remove dir\r\n  if (not IS_WINDOWS) and _M.isdir(P) then\r\n    return nil, \"remove method can not remove dirs\"\r\n  end\r\n  return os.remove(P)\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "local function splitpath(P) return string.match(P,\"^(.-)[\\\\/]?([^\\\\/]*)$\") end",
    "type": "function"
  }, {
    "id": 17,
    "text": "function _M.tmpdir()\r\n  if IS_WINDOWS then\r\n    for _, p in ipairs{'TEMP', 'TMP'} do\r\n      local dir = os.getenv(p)\r\n      if dir and dir ~= '' then\r\n        return dir\r\n      end\r\n    end\r\n  end\r\n  return (splitpath(os.tmpname()))\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "local function isdots(P)\r\n  return P == '.' or P == '..'\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "local function do_foreach_recurse(base, match, callback, option)\r\n  local dir_next, dir = lfs.dir(base)\r\n  for name in dir_next, dir do if not isdots(name) then\r\n    local path = base .. DIR_SEP .. name\r\n    if _M.attributes(path,\"mode\") == \"directory\" then\r\n      local ret, err = foreach_impl(path, match, callback, option)\r\n      if ret or err then\r\n        if dir then dir:close() end\r\n        return ret, err\r\n      end\r\n    end\r\n  end end\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "function(base,name,fd) \r\n      table.insert(tmp, {base,name,fd})\r\n    end",
    "type": "function"
  }, {
    "id": 21,
    "text": "function(base, match, callback, option)\r\n  local tmp, origin_cb\r\n  if option.delay then\r\n    tmp, origin_cb, callback = {}, callback, function(base,name,fd) \r\n      table.insert(tmp, {base,name,fd})\r\n    end;\r\n  end\r\n\r\n  if option.recurse and option.reverse == true then\r\n    local ok, err = do_foreach_recurse(base, match, callback, option)\r\n    if ok or err then return ok, err end\r\n  end\r\n\r\n  local dir_next, dir = lfs.dir(base)\r\n  for name in dir_next, dir do if option.skipdots == false or not isdots(name) then\r\n    local path = base .. DIR_SEP .. name\r\n    local attr = _M.attributes(path)\r\n    if not attr then return end\r\n\r\n    if (option.skipdirs  and attr.mode == \"directory\")\r\n       or (option.skipfiles and attr.mode == \"file\")\r\n    then else\r\n      if match(name) then\r\n        local ret, err = callback(base, name, attr)\r\n        if ret or err then\r\n          if dir then dir:close() end\r\n          return ret, err\r\n        end\r\n      end\r\n    end\r\n\r\n    local can_recurse = (not option.delay) and option.recurse and (option.reverse == nil)\r\n    if can_recurse and attr.mode == \"directory\" and not isdots(name) then\r\n      local ret, err = foreach_impl(path, match, callback, option)\r\n      if ret or err then\r\n        if dir then dir:close() end\r\n        return ret, err\r\n      end\r\n    end\r\n  end end\r\n\r\n  if option.delay then\r\n    for _, t in ipairs(tmp) do\r\n      local ok, err = origin_cb(t[1], t[2], t[3])\r\n      if ok or err then return ok, err end\r\n    end\r\n  end\r\n\r\n  if option.recurse and (not option.reverse) then\r\n    if option.delay or (option.reverse == false) then\r\n      return do_foreach_recurse(base, match, origin_cb or callback, option)\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "local function filePat2rexPat(pat)\r\n  if pat:find(\"[*?]\") then\r\n    local post = '$'\r\n    if pat:find(\"*\", 1, true) then \r\n      if pat:find(\".\", 1, true) then post = '[^.]*$'\r\n      else post = '' end\r\n    end\r\n    pat = \"^\" .. pat:gsub(\"%.\",\"%%.\"):gsub(\"%*\",\".*\"):gsub(\"%?\", \".?\") .. post\r\n  else\r\n    pat = \"^\" .. pat:gsub(\"%.\",\"%%.\") .. \"$\"\r\n  end\r\n  if IS_WINDOWS then pat = pat:upper() end\r\n  return pat\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "local function match_pat(pat)\r\n  pat = filePat2rexPat(pat)\r\n  return IS_WINDOWS\r\n  and function(s) return nil ~= string.find(string.upper(s), pat) end\r\n  or  function(s) return nil ~= string.find(s, pat)               end\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "function _M.foreach(base, callback, option)\r\n  local base, mask = splitpath(base, DIR_SEP)\r\n  if mask ~= '' then mask = match_pat(mask)\r\n  else mask = function() return true end end\r\n  return foreach_impl(base, mask, function(base, name, fd)\r\n    return callback(base .. DIR_SEP .. name, fd)\r\n  end, option or {})\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "function() return true end",
    "type": "function"
  }, {
    "id": 26,
    "text": "local function make_attrib(str)\r\n  local t = {}\r\n  for i = 1, #str do \r\n    local ch = str:sub(i,i)\r\n    local fn = attribs[ ch ]\r\n    if not fn then return nil, 'unknown file attribute: ' .. ch end\r\n    table.insert(t, fn)\r\n  end\r\n\r\n  return function(...)\r\n    local res = {n = #t}\r\n    for i, f in ipairs(t) do\r\n      local ok, err = f(...)\r\n      if ok == nil then return nil, err end\r\n      table.insert(res, ok)\r\n    end\r\n    return res\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "function _M.each_impl(option)\r\n  if not option.file then return nil, 'no file mask present' end\r\n  local base, mask = splitpath( option.file, DIR_SEP )\r\n  if mask ~= '' then mask = match_pat(mask)\r\n  else mask = function() return true end end\r\n\r\n  local get_params, err = make_attrib(option.param or 'f')\r\n  if not get_params then return nil, err end\r\n  local unpack = unpack or table.unpack\r\n\r\n  local filter = option.filter\r\n\r\n  if option.callback then\r\n    local callback = option.callback \r\n\r\n    local function cb(base, name, fd)\r\n      local params = assert(get_params(base, name, fd))\r\n      if filter and (not filter(unpack(params, 1, params.n))) then return end\r\n      return callback(unpack(params, 1, params.n))\r\n    end\r\n\r\n    return foreach_impl(base, mask, cb, option)\r\n  else\r\n    local function cb(base, name, fd)\r\n      local params = assert(get_params(base, name, fd))\r\n      if filter and (not filter(unpack(params, 1, params.n))) then return end\r\n      coroutine.yield(params)\r\n    end\r\n    local co = coroutine.create(function()\r\n      foreach_impl(base, mask, cb, option)\r\n    end)\r\n    return function()\r\n      local status, params = coroutine.resume(co)\r\n      if status then if params then return unpack(params, 1, params.n) end\r\n      else error(params, 2) end\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "function() return true end",
    "type": "function"
  }, {
    "id": 29,
    "text": "local function cb(base, name, fd)\r\n      local params = assert(get_params(base, name, fd))\r\n      if filter and (not filter(unpack(params, 1, params.n))) then return end\r\n      return callback(unpack(params, 1, params.n))\r\n    end",
    "type": "function"
  }, {
    "id": 30,
    "text": "local function cb(base, name, fd)\r\n      local params = assert(get_params(base, name, fd))\r\n      if filter and (not filter(unpack(params, 1, params.n))) then return end\r\n      coroutine.yield(params)\r\n    end",
    "type": "function"
  }, {
    "id": 31,
    "text": "local function match_pat_selftest()\r\n\r\n  local t = {\r\n    [\"*.txt\"] = {\r\n      [\".txt\"     ] = true;\r\n      [\"1.txt\"    ] = true;\r\n      [\"1.txtdat\" ] = true;\r\n      [\".txtdat\"  ] = false;\r\n      [\".txt.dat\" ] = false;\r\n      [\".dat.txt\" ] = true;\r\n    };\r\n    [\"*.txt*\"] = {\r\n      [\".txt\"     ] = true;\r\n      [\"1.txt\"    ] = true;\r\n      [\"1.txtdat\" ] = true;\r\n      [\".txtdat\"  ] = true;\r\n      [\".txt.dat\" ] = true;\r\n      [\".dat.txt\" ] = true;\r\n    };\r\n    [\"?.txt\"] = {\r\n      [\".txt\"     ] = true;\r\n      [\"1.txt\"    ] = true;\r\n      [\"1.txtdat\" ] = false;\r\n      [\".txtdat\"  ] = false;\r\n      [\".txt.dat\" ] = false;\r\n      [\".dat.txt\" ] = false;\r\n    };\r\n    [\"1?.txt\"] = {\r\n      [\".txt\"     ] = false;\r\n      [\"1.txt\"    ] = true;\r\n      [\"1.txtdat\" ] = false;\r\n      [\".txtdat\"  ] = false;\r\n      [\".txt.dat\" ] = false;\r\n      [\".dat.txt\" ] = false;\r\n    };\r\n    [\"1*.txt\"] = {\r\n      [\".txt\"     ] = false;\r\n      [\"1.txt\"    ] = true;\r\n      [\"1.txtdat\" ] = true;\r\n      [\".txtdat\"  ] = false;\r\n      [\".txt.dat\" ] = false;\r\n      [\".dat.txt\" ] = false;\r\n    };\r\n  }\r\n\r\n  local function test_match(pat, t)\r\n    local cmp = match_pat(pat)\r\n    for fname, status in pairs(t) do \r\n      if status ~= cmp(fname) then\r\n        io.write(\"Pat: \", pat, \" Name: \", fname, \" Expected: \", tostring(status), \" Got: \", tostring(cmp(fname)), \"\\n\")\r\n      end\r\n    end\r\n  end\r\n\r\n  for k, v in pairs(t) do\r\n    test_match(k,v)\r\n  end\r\n\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "local function test_match(pat, t)\r\n    local cmp = match_pat(pat)\r\n    for fname, status in pairs(t) do \r\n      if status ~= cmp(fname) then\r\n        io.write(\"Pat: \", pat, \" Name: \", fname, \" Expected: \", tostring(status), \" Got: \", tostring(cmp(fname)), \"\\n\")\r\n      end\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 33,
    "text": "function(s) return nil ~= string.find(string.upper(s), pat) end",
    "type": "function"
  }, {
    "id": 34,
    "text": "function(s) return nil ~= string.find(s, pat)               end",
    "type": "function"
  }, {
    "id": 35,
    "text": "function(base, name, fd)\r\n    return callback(base .. DIR_SEP .. name, fd)\r\n  end",
    "type": "function"
  }, {
    "id": 36,
    "text": "function(base, name, fd) return base..DIR_SEP..name  end",
    "type": "function"
  }, {
    "id": 37,
    "text": "function(base, name, fd) return base                 end",
    "type": "function"
  }, {
    "id": 38,
    "text": "function(base, name, fd) return name                 end",
    "type": "function"
  }, {
    "id": 39,
    "text": "function(base, name, fd) return fd.mode              end",
    "type": "function"
  }, {
    "id": 40,
    "text": "function(base, name, fd) return fd                   end",
    "type": "function"
  }, {
    "id": 41,
    "text": "function(base, name, fd) return fd.size              end",
    "type": "function"
  }, {
    "id": 42,
    "text": "function(base, name, fd) return fd.modification      end",
    "type": "function"
  }, {
    "id": 43,
    "text": "function(base, name, fd) return fd.change            end",
    "type": "function"
  }, {
    "id": 44,
    "text": "function(base, name, fd) return fd.access            end",
    "type": "function"
  }, {
    "id": 45,
    "text": "function(...)\r\n    local res = {n = #t}\r\n    for i, f in ipairs(t) do\r\n      local ok, err = f(...)\r\n      if ok == nil then return nil, err end\r\n      table.insert(res, ok)\r\n    end\r\n    return res\r\n  end",
    "type": "function"
  }, {
    "id": 46,
    "text": "function()\r\n      foreach_impl(base, mask, cb, option)\r\n    end",
    "type": "function"
  }, {
    "id": 47,
    "text": "function()\r\n      local status, params = coroutine.resume(co)\r\n      if status then if params then return unpack(params, 1, params.n) end\r\n      else error(params, 2) end\r\n    end",
    "type": "function"
  }, {
    "id": 48,
    "text": "function(lfs)\r\nlocal os  = require \"os\"\r\n\r\nlocal DIR_SEP = package.config:sub(1,1)\r\nlocal IS_WINDOWS = DIR_SEP == '\\\\'\r\n\r\nlocal _M = {\r\n  DIR_SEP = DIR_SEP;\r\n}\r\n\r\n_M.currentdir = lfs.currentdir\r\n\r\n_M.attributes = lfs.attributes\r\n\r\n-- function _M.flags(P) end\r\n\r\nlocal attrib = lfs.attributes\r\n\r\nfunction _M.ctime(P)   return attrib(P,'change') end\r\n\r\nfunction _M.atime(P)   return attrib(P,'access') end\r\n\r\nfunction _M.mtime(P)   return attrib(P,'modification') end\r\n\r\nfunction _M.size(P)    return attrib(P,'size') end\r\n\r\nfunction _M.exists(P)  return attrib(P,'mode') ~= nil and P end\r\n\r\nfunction _M.isdir(P)   return attrib(P,'mode') == 'directory' and P end\r\n\r\nfunction _M.isfile(P)  return attrib(P,'mode') == 'file' and P end\r\n\r\nfunction _M.islink(P)  return attrib(P,'mode') == 'link' and P end\r\n\r\n_M.mkdir = lfs.mkdir\r\n\r\n_M.rmdir = lfs.rmdir\r\n\r\n_M.chdir = lfs.chdir\r\n\r\n_M.link  = lfs.link\r\n\r\n_M.setmode = lfs.setmode\r\n\r\nfunction _M.copy(src, dst, force)\r\n  if not IS_WINDOWS then\r\n    if _M.isdir(src) or _M.isdir(dst) then\r\n      return nil, 'can not copy directories'\r\n    end\r\n  end\r\n  local f, err = io.open(src, 'rb')\r\n  if not f then return nil, err end\r\n\r\n  if not force then\r\n    local t, err = io.open(dst, 'rb' )\r\n    if t then \r\n      f:close()\r\n      t:close()\r\n      return nil, \"file alredy exists\"\r\n    end\r\n  end\r\n\r\n  local t, err = io.open(dst, 'w+b')\r\n  if not t then\r\n    f:close()\r\n    return nil, err\r\n  end\r\n\r\n  local CHUNK_SIZE = 4096\r\n  while true do\r\n    local chunk = f:read(CHUNK_SIZE)\r\n    if not chunk then break end\r\n    local ok, err = t:write(chunk)\r\n    if not ok then\r\n      t:close()\r\n      f:close()\r\n      return nil, err or \"can not write\"\r\n    end\r\n  end\r\n\r\n  t:close()\r\n  f:close()\r\n  return true\r\nend\r\n\r\nfunction _M.move(src, dst, flags)\r\n  if flags and _M.exists(dst) and _M.exists(src) then\r\n    local ok, err = _M.remove(dst)\r\n    -- do we have to remove dir?\r\n    -- if not ok then ok, err = _M.rmdir(dst) end\r\n    if not ok then return nil, err end\r\n  end\r\n  if (not IS_WINDOWS) and _M.exists(dst) then\r\n    -- on windows os.rename return error when dst exists, \r\n    -- but on linux its just replace existed file\r\n    return nil, \"destination alredy exists\"\r\n  end\r\n  return os.rename(src, dst)\r\nend\r\n\r\nfunction _M.remove(P)\r\n  -- on windows os.remove can not remove dir\r\n  if (not IS_WINDOWS) and _M.isdir(P) then\r\n    return nil, \"remove method can not remove dirs\"\r\n  end\r\n  return os.remove(P)\r\nend\r\n\r\nlocal function splitpath(P) return string.match(P,\"^(.-)[\\\\/]?([^\\\\/]*)$\") end\r\n\r\nfunction _M.tmpdir()\r\n  if IS_WINDOWS then\r\n    for _, p in ipairs{'TEMP', 'TMP'} do\r\n      local dir = os.getenv(p)\r\n      if dir and dir ~= '' then\r\n        return dir\r\n      end\r\n    end\r\n  end\r\n  return (splitpath(os.tmpname()))\r\nend\r\n\r\n_M.dir = lfs.dir\r\n\r\n_M.touch = lfs.touch\r\n\r\nlocal function isdots(P)\r\n  return P == '.' or P == '..'\r\nend\r\n\r\nlocal foreach_impl\r\n\r\nlocal function do_foreach_recurse(base, match, callback, option)\r\n  local dir_next, dir = lfs.dir(base)\r\n  for name in dir_next, dir do if not isdots(name) then\r\n    local path = base .. DIR_SEP .. name\r\n    if _M.attributes(path,\"mode\") == \"directory\" then\r\n      local ret, err = foreach_impl(path, match, callback, option)\r\n      if ret or err then\r\n        if dir then dir:close() end\r\n        return ret, err\r\n      end\r\n    end\r\n  end end\r\nend\r\n\r\nforeach_impl = function(base, match, callback, option)\r\n  local tmp, origin_cb\r\n  if option.delay then\r\n    tmp, origin_cb, callback = {}, callback, function(base,name,fd) \r\n      table.insert(tmp, {base,name,fd})\r\n    end;\r\n  end\r\n\r\n  if option.recurse and option.reverse == true then\r\n    local ok, err = do_foreach_recurse(base, match, callback, option)\r\n    if ok or err then return ok, err end\r\n  end\r\n\r\n  local dir_next, dir = lfs.dir(base)\r\n  for name in dir_next, dir do if option.skipdots == false or not isdots(name) then\r\n    local path = base .. DIR_SEP .. name\r\n    local attr = _M.attributes(path)\r\n    if not attr then return end\r\n\r\n    if (option.skipdirs  and attr.mode == \"directory\")\r\n       or (option.skipfiles and attr.mode == \"file\")\r\n    then else\r\n      if match(name) then\r\n        local ret, err = callback(base, name, attr)\r\n        if ret or err then\r\n          if dir then dir:close() end\r\n          return ret, err\r\n        end\r\n      end\r\n    end\r\n\r\n    local can_recurse = (not option.delay) and option.recurse and (option.reverse == nil)\r\n    if can_recurse and attr.mode == \"directory\" and not isdots(name) then\r\n      local ret, err = foreach_impl(path, match, callback, option)\r\n      if ret or err then\r\n        if dir then dir:close() end\r\n        return ret, err\r\n      end\r\n    end\r\n  end end\r\n\r\n  if option.delay then\r\n    for _, t in ipairs(tmp) do\r\n      local ok, err = origin_cb(t[1], t[2], t[3])\r\n      if ok or err then return ok, err end\r\n    end\r\n  end\r\n\r\n  if option.recurse and (not option.reverse) then\r\n    if option.delay or (option.reverse == false) then\r\n      return do_foreach_recurse(base, match, origin_cb or callback, option)\r\n    end\r\n  end\r\nend\r\n\r\nlocal function filePat2rexPat(pat)\r\n  if pat:find(\"[*?]\") then\r\n    local post = '$'\r\n    if pat:find(\"*\", 1, true) then \r\n      if pat:find(\".\", 1, true) then post = '[^.]*$'\r\n      else post = '' end\r\n    end\r\n    pat = \"^\" .. pat:gsub(\"%.\",\"%%.\"):gsub(\"%*\",\".*\"):gsub(\"%?\", \".?\") .. post\r\n  else\r\n    pat = \"^\" .. pat:gsub(\"%.\",\"%%.\") .. \"$\"\r\n  end\r\n  if IS_WINDOWS then pat = pat:upper() end\r\n  return pat\r\nend\r\n\r\nlocal function match_pat(pat)\r\n  pat = filePat2rexPat(pat)\r\n  return IS_WINDOWS\r\n  and function(s) return nil ~= string.find(string.upper(s), pat) end\r\n  or  function(s) return nil ~= string.find(s, pat)               end\r\nend\r\n\r\nfunction _M.foreach(base, callback, option)\r\n  local base, mask = splitpath(base, DIR_SEP)\r\n  if mask ~= '' then mask = match_pat(mask)\r\n  else mask = function() return true end end\r\n  return foreach_impl(base, mask, function(base, name, fd)\r\n    return callback(base .. DIR_SEP .. name, fd)\r\n  end, option or {})\r\nend\r\n\r\nlocal attribs = {\r\n  f = function(base, name, fd) return base..DIR_SEP..name  end;\r\n  p = function(base, name, fd) return base                 end;\r\n  n = function(base, name, fd) return name                 end;\r\n  m = function(base, name, fd) return fd.mode              end;\r\n  a = function(base, name, fd) return fd                   end;\r\n  z = function(base, name, fd) return fd.size              end;\r\n  t = function(base, name, fd) return fd.modification      end;\r\n  c = function(base, name, fd) return fd.change            end;\r\n  l = function(base, name, fd) return fd.access            end;\r\n}\r\n\r\nlocal function make_attrib(str)\r\n  local t = {}\r\n  for i = 1, #str do \r\n    local ch = str:sub(i,i)\r\n    local fn = attribs[ ch ]\r\n    if not fn then return nil, 'unknown file attribute: ' .. ch end\r\n    table.insert(t, fn)\r\n  end\r\n\r\n  return function(...)\r\n    local res = {n = #t}\r\n    for i, f in ipairs(t) do\r\n      local ok, err = f(...)\r\n      if ok == nil then return nil, err end\r\n      table.insert(res, ok)\r\n    end\r\n    return res\r\n  end\r\nend\r\n\r\nfunction _M.each_impl(option)\r\n  if not option.file then return nil, 'no file mask present' end\r\n  local base, mask = splitpath( option.file, DIR_SEP )\r\n  if mask ~= '' then mask = match_pat(mask)\r\n  else mask = function() return true end end\r\n\r\n  local get_params, err = make_attrib(option.param or 'f')\r\n  if not get_params then return nil, err end\r\n  local unpack = unpack or table.unpack\r\n\r\n  local filter = option.filter\r\n\r\n  if option.callback then\r\n    local callback = option.callback \r\n\r\n    local function cb(base, name, fd)\r\n      local params = assert(get_params(base, name, fd))\r\n      if filter and (not filter(unpack(params, 1, params.n))) then return end\r\n      return callback(unpack(params, 1, params.n))\r\n    end\r\n\r\n    return foreach_impl(base, mask, cb, option)\r\n  else\r\n    local function cb(base, name, fd)\r\n      local params = assert(get_params(base, name, fd))\r\n      if filter and (not filter(unpack(params, 1, params.n))) then return end\r\n      coroutine.yield(params)\r\n    end\r\n    local co = coroutine.create(function()\r\n      foreach_impl(base, mask, cb, option)\r\n    end)\r\n    return function()\r\n      local status, params = coroutine.resume(co)\r\n      if status then if params then return unpack(params, 1, params.n) end\r\n      else error(params, 2) end\r\n    end\r\n  end\r\nend\r\n\r\nlocal create_each = require \"path.findfile\".load\r\n\r\n_M.each = create_each(_M.each_impl)\r\n\r\nlocal function match_pat_selftest()\r\n\r\n  local t = {\r\n    [\"*.txt\"] = {\r\n      [\".txt\"     ] = true;\r\n      [\"1.txt\"    ] = true;\r\n      [\"1.txtdat\" ] = true;\r\n      [\".txtdat\"  ] = false;\r\n      [\".txt.dat\" ] = false;\r\n      [\".dat.txt\" ] = true;\r\n    };\r\n    [\"*.txt*\"] = {\r\n      [\".txt\"     ] = true;\r\n      [\"1.txt\"    ] = true;\r\n      [\"1.txtdat\" ] = true;\r\n      [\".txtdat\"  ] = true;\r\n      [\".txt.dat\" ] = true;\r\n      [\".dat.txt\" ] = true;\r\n    };\r\n    [\"?.txt\"] = {\r\n      [\".txt\"     ] = true;\r\n      [\"1.txt\"    ] = true;\r\n      [\"1.txtdat\" ] = false;\r\n      [\".txtdat\"  ] = false;\r\n      [\".txt.dat\" ] = false;\r\n      [\".dat.txt\" ] = false;\r\n    };\r\n    [\"1?.txt\"] = {\r\n      [\".txt\"     ] = false;\r\n      [\"1.txt\"    ] = true;\r\n      [\"1.txtdat\" ] = false;\r\n      [\".txtdat\"  ] = false;\r\n      [\".txt.dat\" ] = false;\r\n      [\".dat.txt\" ] = false;\r\n    };\r\n    [\"1*.txt\"] = {\r\n      [\".txt\"     ] = false;\r\n      [\"1.txt\"    ] = true;\r\n      [\"1.txtdat\" ] = true;\r\n      [\".txtdat\"  ] = false;\r\n      [\".txt.dat\" ] = false;\r\n      [\".dat.txt\" ] = false;\r\n    };\r\n  }\r\n\r\n  local function test_match(pat, t)\r\n    local cmp = match_pat(pat)\r\n    for fname, status in pairs(t) do \r\n      if status ~= cmp(fname) then\r\n        io.write(\"Pat: \", pat, \" Name: \", fname, \" Expected: \", tostring(status), \" Got: \", tostring(cmp(fname)), \"\\n\")\r\n      end\r\n    end\r\n  end\r\n\r\n  for k, v in pairs(t) do\r\n    test_match(k,v)\r\n  end\r\n\r\nend\r\n\r\nreturn _M\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "local function GetCurrentDirectory(u)\r\n  local n = (u and GetCurrentDirectoryW or GetCurrentDirectoryA)(0, NULL)\r\n  if n == 0 then\r\n    local err = GetLastError()\r\n    return nil, err\r\n  end\r\n  local buf = alien.buffer(u and n*2 or n)\r\n  n = (u and GetCurrentDirectoryW or GetCurrentDirectoryA)(n, buf)\r\n  if n == 0 then\r\n    local err = GetLastError()\r\n    return nil, err\r\n  end\r\n  return buf:tostring(u and n*2 or n )\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "local function SetCurrentDirectory(u, P)\r\n  local ret\r\n  if u then ret = SetCurrentDirectoryW(P .. \"\\0\")\r\n  else ret = SetCurrentDirectoryA(P) end\r\n  if ret == 0 then\r\n    local err = GetLastError()\r\n    return nil, err\r\n  end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "local function GetTempPath(u)\r\n  local n = (u and GetTempPathW or GetTempPathA)(0, NULL)\r\n  if n == 0 then\r\n    local err = GetLastError()\r\n    return nil, err\r\n  end\r\n  local buf = alien.buffer(u and n*2 or n)\r\n  n = (u and GetTempPathW or GetTempPathA)(n, buf)\r\n  if n == 0 then\r\n    local err = GetLastError()\r\n    return nil, err\r\n  end\r\n  return buf:tostring(u and n*2 or n )\r\nend",
    "type": "function"
  }, {
    "id": 52,
    "text": "local function CopyFile(u, src, dst, flag)\r\n  local ret\r\n  if u then ret = CopyFileW(src .. \"\\0\", dst .. \"\\0\", flag and 1 or 0)\r\n  else ret = CopyFileA(src, dst, flag and 1 or 0) end\r\n  if ret == 0 then\r\n    local err = GetLastError()\r\n    return nil, err\r\n  end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "local function GetFileAttributesEx(u, P)\r\n  local ret, info\r\n  if u then \r\n    info = WIN32_FIND_DATAW:new()\r\n    ret = GetFileAttributesExW(P .. \"\\0\", 0, info())\r\n  else\r\n    info = WIN32_FIND_DATAA:new()\r\n    ret = GetFileAttributesExA(P, 0, info())\r\n  end\r\n  if ret == 0 then\r\n    local err = GetLastError()\r\n    return nil, err\r\n  end\r\n  return info\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "local function FindClose(h)\r\n  FindClose_(autil.gc_null(h))\r\nend",
    "type": "function"
  }, {
    "id": 55,
    "text": "local function FindFirstFile(u, P)\r\n  local ret, fd, err\r\n  if u then\r\n    fd  = WIN32_FIND_DATAW:new()\r\n    ret = FindFirstFileW(P .. \"\\0\", fd())\r\n  else\r\n    fd  = WIN32_FIND_DATAA:new()\r\n    ret = FindFirstFileA(P, fd())\r\n  end\r\n\r\n  if ret == INVALID_HANDLE then\r\n    local err = GetLastError()\r\n    return nil, err\r\n  end\r\n\r\n  ret = autil.gc_wrap(ret, FindClose_)\r\n  return ret, fd\r\nend",
    "type": "function"
  }, {
    "id": 56,
    "text": "local function FindNextFile(u, h, fd)\r\n  local ret\r\n  if u then ret = FindNextFileW(h.value, fd())\r\n  else ret = FindNextFileA(h.value, fd()) end\r\n  return ret\r\nend",
    "type": "function"
  }, {
    "id": 57,
    "text": "local function RemoveDirectory(u, src)\r\n  local ret\r\n  if u then ret = RemoveDirectoryW(src .. \"\\0\")\r\n  else ret = RemoveDirectoryA(src) end\r\n  if ret == 0 then\r\n    local err = GetLastError()\r\n    return nil, err\r\n  end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "local function CreateDirectory(u, src)\r\n  local ret\r\n  if u then ret = CreateDirectoryW(src .. \"\\0\", NULL)\r\n  else ret = CreateDirectoryA(src, NULL) end\r\n  if ret == 0 then\r\n    local err = GetLastError()\r\n    return nil, err\r\n  end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 59,
    "text": "local function MoveFileEx(u, src, dst, flag)\r\n  local ret\r\n  if u then ret = MoveFileExW(src .. \"\\0\", dst .. \"\\0\", flag and flag or 0)\r\n  else ret = MoveFileExA(src, dst, flag and flag or 0) end\r\n  if ret == 0 then\r\n    local err = GetLastError()\r\n    return nil, err\r\n  end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "local function DeleteFile(u, src)\r\n  local ret\r\n  if u then ret = DeleteFileW(src .. \"\\0\")\r\n  else ret = DeleteFileA(src) end\r\n  if ret == 0 then\r\n    local err = GetLastError()\r\n    return nil, err\r\n  end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 61,
    "text": "local function CloseHandle(h)\r\n  return CloseHandle_(autil.gc_null(h))\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "local function CreateFile(u, P, access, share, sec, mode, attr, template)\r\n  local p = P\r\n  if u then p = p .. \"\\0\" end\r\n\r\n  local h = (u and CreateFileW or CreateFileA)(\r\n    p, access, share, sec or NULL, mode, attr, template or NULL\r\n  );\r\n\r\n  if INVALID_HANDLE == h then\r\n    local err = GetLastError()\r\n    return nil, err\r\n  end\r\n\r\n  return autil.gc_wrap(h, CloseHandle_)\r\nend",
    "type": "function"
  }, {
    "id": 63,
    "text": "local function newft(t)\r\n  if not t then return NULL end\r\n  local v = FILETIME:new()\r\n  v.dwLowDateTime, v.dwHighDateTime = t[1], t[2]\r\n  return v\r\nend",
    "type": "function"
  }, {
    "id": 64,
    "text": "local function SetFileTime(h, c, a, m)\r\n  local ctime, atime, mtime = newft(c), newft(a), newft(m)\r\n  local ret = SetFileTime_(h.value, ctime and ctime(), atime and atime(), mtime and mtime())\r\n  if ret ~= 0 then return true end\r\n  return nil, GetLastError()\r\nend",
    "type": "function"
  }, {
    "id": 65,
    "text": "local function ErrorMessage(u, dwErr, lang)\r\n  local lpMsgBuf = alien.array(LPVOID, 1)\r\n  lang = lang or 0\r\n  local ret = (u and FormatMessageW or FormatMessageA)(\r\n    FORMAT_MESSAGE_ALLOCATE_BUFFER + FORMAT_MESSAGE_FROM_SYSTEM + FORMAT_MESSAGE_IGNORE_INSERTS,\r\n    NULL, dwErr, lang, lpMsgBuf.buffer, 0, NULL\r\n  );\r\n\r\n  if ret == 0 then\r\n    local err = GetLastError() \r\n    return \"\", err\r\n  end\r\n\r\n  local str = alien.tostring(lpMsgBuf[1], ret)\r\n  ret = LocalFree(lpMsgBuf[1]);\r\n  return str;\r\nend",
    "type": "function"
  }, {
    "id": 66,
    "text": "local function DeviceIoControl(h, code, inBuffer, inBufferSize, outBuffer, outBufferSize)\r\n  if inBuffer  == nil then inBuffer,  inBufferSize  = NULL, 0 end\r\n  if outBuffer == nil then outBuffer, outBufferSize = NULL, 0 end\r\n  local ret, dwTmp = DeviceIoControl_(h.value, code,\r\n    inBuffer, inBufferSize, outBuffer, outBufferSize,\r\n    0, NULL\r\n  )\r\n  if ret == 0 then\r\n    local err = GetLastError()\r\n    return nil, err\r\n  end\r\n  return ret, dwTmp\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "local function DiskNumber(u, P)\r\n  local p\r\n  if u then p = \"\\\\\\0\\\\\\0.\\0\\\\\\0\" .. P .. \"\\0\"\r\n  else p = \"\\\\\\\\.\\\\\" .. P end\r\n\r\n  -- Open partition\r\n  local hPart, err = CreateFile(u, p, 0,\r\n    FILE_SHARE_READ + FILE_SHARE_WRITE, NULL, OPEN_EXISTING,\r\n    FILE_ATTRIBUTE_NORMAL + FILE_FLAG_NO_BUFFERING, NULL\r\n  );\r\n\r\n  if not hPart then return nil, err end\r\n\r\n  local Info = CTYPES.STORAGE_DEVICE_NUMBER:new();\r\n  local Info_size = CTYPES.STORAGE_DEVICE_NUMBER.size_\r\n\r\n  local ret, dwTmp = DeviceIoControl(hPart, IOCTL_STORAGE_GET_DEVICE_NUMBER, \r\n    NULL, 0, Info(), Info_size\r\n  )\r\n  if not ret then err = dwTmp end\r\n  if dwTmp ~= Info_size then ret, err = nil, GetLastError() end\r\n\r\n  CloseHandle(hPart)\r\n  if not ret then return nil, err end\r\n  return {\r\n    Info.DeviceType,\r\n    Info.DeviceNumber,\r\n    Info.PartitionNumber,\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 68,
    "text": "function(...) return GetCurrentDirectory(false, ...) end",
    "type": "function"
  }, {
    "id": 69,
    "text": "function(...) return SetCurrentDirectory(false, ...) end",
    "type": "function"
  }, {
    "id": 70,
    "text": "function(...) return GetTempPath        (false, ...) end",
    "type": "function"
  }, {
    "id": 71,
    "text": "function(...) return GetFileAttributesEx(false, ...) end",
    "type": "function"
  }, {
    "id": 72,
    "text": "function(...) return CopyFile           (false, ...) end",
    "type": "function"
  }, {
    "id": 73,
    "text": "function(...) return FindFirstFile      (false, ...) end",
    "type": "function"
  }, {
    "id": 74,
    "text": "function(...) return FindNextFile       (false, ...) end",
    "type": "function"
  }, {
    "id": 75,
    "text": "function(...) return RemoveDirectory    (false, ...) end",
    "type": "function"
  }, {
    "id": 76,
    "text": "function(...) return DeleteFile         (false, ...) end",
    "type": "function"
  }, {
    "id": 77,
    "text": "function(...) return CreateDirectory    (false, ...) end",
    "type": "function"
  }, {
    "id": 78,
    "text": "function(...) return CreateFile         (false, ...) end",
    "type": "function"
  }, {
    "id": 79,
    "text": "function(...) return MoveFileEx         (false, ...) end",
    "type": "function"
  }, {
    "id": 80,
    "text": "function(...) return ErrorMessage       (false, ...) end",
    "type": "function"
  }, {
    "id": 81,
    "text": "function(...) return DiskNumber         (false, ...) end",
    "type": "function"
  }, {
    "id": 82,
    "text": "function(...) return GetCurrentDirectory(true, ...) end",
    "type": "function"
  }, {
    "id": 83,
    "text": "function(...) return SetCurrentDirectory(true, ...) end",
    "type": "function"
  }, {
    "id": 84,
    "text": "function(...) return GetTempPath        (true, ...) end",
    "type": "function"
  }, {
    "id": 85,
    "text": "function(...) return GetFileAttributesEx(true, ...) end",
    "type": "function"
  }, {
    "id": 86,
    "text": "function(...) return CopyFile           (true, ...) end",
    "type": "function"
  }, {
    "id": 87,
    "text": "function(...) return FindFirstFile      (true, ...) end",
    "type": "function"
  }, {
    "id": 88,
    "text": "function(...) return FindNextFile       (true, ...) end",
    "type": "function"
  }, {
    "id": 89,
    "text": "function(...) return RemoveDirectory    (true, ...) end",
    "type": "function"
  }, {
    "id": 90,
    "text": "function(...) return DeleteFile         (true, ...) end",
    "type": "function"
  }, {
    "id": 91,
    "text": "function(...) return CreateDirectory    (true, ...) end",
    "type": "function"
  }, {
    "id": 92,
    "text": "function(...) return CreateFile         (true, ...) end",
    "type": "function"
  }, {
    "id": 93,
    "text": "function(...) return MoveFileEx         (true, ...) end",
    "type": "function"
  }, {
    "id": 94,
    "text": "function(...) return ErrorMessage       (true, ...) end",
    "type": "function"
  }, {
    "id": 95,
    "text": "function(...) return DiskNumber         (true, ...) end",
    "type": "function"
  }, {
    "id": 96,
    "text": "local function cast(v,t)\r\n  local tmp = alien.buffer(alien.sizeof(t))\r\n  tmp:set(1, v, t)\r\n  return tmp:get(1,t)\r\nend",
    "type": "function"
  }, {
    "id": 97,
    "text": "local function GetCurrentDirectory(u)\r\n  local n = (u and C.GetCurrentDirectoryW or C.GetCurrentDirectoryA)(0,NULLSTR)\r\n  if n == 0 then\r\n    local err = C.GetLastError()\r\n    return nil, err\r\n  end\r\n\r\n  local buf = ffi.new(CTYPES.VLA_CHAR, u and 2*n or n)\r\n\r\n  n = (u and C.GetCurrentDirectoryW or C.GetCurrentDirectoryA)(n, buf)\r\n  if n == 0 then\r\n    local err = C.GetLastError()\r\n    return nil, err\r\n  end\r\n  return ffi.string(buf, u and 2*n or n)\r\nend",
    "type": "function"
  }, {
    "id": 98,
    "text": "local function SetCurrentDirectory(u, P)\r\n  local ret\r\n  if u then ret = C.SetCurrentDirectoryW(P .. \"\\0\")\r\n  else ret = C.SetCurrentDirectoryA(P) end\r\n  if ret == 0 then\r\n    local err = C.GetLastError()\r\n    return nil, err\r\n  end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 99,
    "text": "local function GetTempPath(u)\r\n  local n = (u and C.GetTempPathW or C.GetTempPathA)(0,NULLSTR)\r\n  if n == 0 then\r\n    local err = C.GetLastError()\r\n    return nil, err\r\n  end\r\n\r\n  local buf = ffi.new(CTYPES.VLA_CHAR, u and 2*n or n)\r\n\r\n  n = (u and C.GetTempPathW or C.GetTempPathA)(n, buf)\r\n  if n == 0 then\r\n    local err = C.GetLastError()\r\n    return nil, err\r\n  end\r\n  return ffi.string(buf, u and 2*n or n)\r\nend",
    "type": "function"
  }, {
    "id": 100,
    "text": "local function GetFileAttributesEx(u, P)\r\n  local ret, info\r\n  if u then \r\n    info = WIN32_FIND_DATAW()\r\n    ret = C.GetFileAttributesExW(P .. \"\\0\", C.GetFileExInfoStandard, info)\r\n  else\r\n    info = WIN32_FIND_DATAA()\r\n    ret = C.GetFileAttributesExA(P, C.GetFileExInfoStandard, info)\r\n  end\r\n  if ret == 0 then\r\n    local err = C.GetLastError()\r\n    return nil, err\r\n  end\r\n  return info\r\nend",
    "type": "function"
  }, {
    "id": 101,
    "text": "local function CopyFile(u, src, dst, flag)\r\n  local ret\r\n  if u then ret = C.CopyFileW(src .. \"\\0\", dst .. \"\\0\", flag and 1 or 0)\r\n  else ret = C.CopyFileA(src, dst, flag and 1 or 0) end\r\n  if ret == 0 then\r\n    local err = C.GetLastError()\r\n    return nil, err\r\n  end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 102,
    "text": "local function FindFirstFile(u, P)\r\n  local ret, fd, err\r\n  if u then\r\n    fd = WIN32_FIND_DATAW()\r\n    ret = C.FindFirstFileW(P .. \"\\0\", fd)\r\n  else\r\n    fd  = WIN32_FIND_DATAA()\r\n    ret = C.FindFirstFileA(P, fd)\r\n  end\r\n  if ret == INVALID_HANDLE then\r\n    local err = C.GetLastError()\r\n    return nil, err\r\n  end\r\n  ffi.gc(ret, C.FindClose)\r\n  return ret, fd\r\nend",
    "type": "function"
  }, {
    "id": 103,
    "text": "local function FindNextFile(u, h, fd)\r\n  local ret\r\n  if u then ret = C.FindNextFileW(h, fd)\r\n  else ret = C.FindNextFileA(h, fd) end\r\n  return ret\r\nend",
    "type": "function"
  }, {
    "id": 104,
    "text": "local function FindClose(h)\r\n  C.FindClose(ffi.gc(h, nil))\r\nend",
    "type": "function"
  }, {
    "id": 105,
    "text": "local function RemoveDirectory(u, src)\r\n  local ret\r\n  if u then ret = C.RemoveDirectoryW(src .. \"\\0\")\r\n  else ret = C.RemoveDirectoryA(src) end\r\n  if ret == 0 then\r\n    local err = C.GetLastError()\r\n    return nil, err\r\n  end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 106,
    "text": "local function DeleteFile(u, src)\r\n  local ret\r\n  if u then ret = C.DeleteFileW(src .. \"\\0\")\r\n  else ret = C.DeleteFileA(src) end\r\n  if ret == 0 then\r\n    local err = C.GetLastError()\r\n    return nil, err\r\n  end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 107,
    "text": "local function MoveFileEx(u, src, dst, flag)\r\n  local ret\r\n  if u then ret = C.MoveFileExW(src .. \"\\0\", dst .. \"\\0\", flag and flag or 0)\r\n  else ret = C.MoveFileExA(src, dst, flag and flag or 0) end\r\n  if ret == 0 then\r\n    local err = C.GetLastError()\r\n    return nil, err\r\n  end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 108,
    "text": "local function CreateDirectory(u, src)\r\n  local ret\r\n  if u then ret = C.CreateDirectoryW(src .. \"\\0\",NULL)\r\n  else ret = C.CreateDirectoryA(src,NULL) end\r\n  if ret == 0 then\r\n    local err = C.GetLastError()\r\n    return nil, err\r\n  end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 109,
    "text": "local function CreateFile(u, P, access, share, sec, mode, attr, template)\r\n  local p = P\r\n  if u then p = p .. \"\\0\" end\r\n\r\n  local h = (u and C.CreateFileW or C.CreateFileA)(\r\n    p, access, share, sec or NULL, mode, attr, template or NULL\r\n  );\r\n\r\n  if INVALID_HANDLE == h then\r\n    local err = C.GetLastError()\r\n    return nil, err\r\n  end\r\n\r\n  return ffi.gc(h, C.CloseHandle)\r\nend",
    "type": "function"
  }, {
    "id": 110,
    "text": "local function CloseHandle(h)\r\n  return C.CloseHandle(ffi.gc(h, nil))\r\nend",
    "type": "function"
  }, {
    "id": 111,
    "text": "local function newft(t)\r\n  if not t then return ffi.cast(\"FILETIME*\", NULL) end\r\n  local v = FILETIME()\r\n  v.dwLowDateTime, v.dwHighDateTime = t[1], t[2]\r\n  return v\r\nend",
    "type": "function"
  }, {
    "id": 112,
    "text": "local function SetFileTime(h, c, a, m)\r\n  local ctime, atime, mtime = newft(c), newft(a), newft(m)\r\n  local ret = C.SetFileTime(h, ctime, atime, mtime)\r\n  if ret ~= 0 then return true end\r\n  return nil, C.GetLastError()\r\nend",
    "type": "function"
  }, {
    "id": 113,
    "text": "local function ErrorMessage(u, dwErr, lang)\r\n  local lpMsgBuf = ffi.new(\"LPVOID[1]\", 0);\r\n  lang = lang or 0\r\n  local ret = (u and C.FormatMessageW or C.FormatMessageA)(\r\n    FORMAT_MESSAGE_ALLOCATE_BUFFER + FORMAT_MESSAGE_FROM_SYSTEM + FORMAT_MESSAGE_IGNORE_INSERTS,\r\n    NULL, dwErr, lang, lpMsgBuf, 0, NULL\r\n  );\r\n\r\n  if ret == 0 then\r\n    local err = C.GetLastError() \r\n    return \"\", err\r\n  end\r\n\r\n  local str = ffi.cast(CTYPES.PCHAR, lpMsgBuf[0])\r\n  str = ffi.string(str, u and 2 * ret or ret);\r\n  ret = C.LocalFree(lpMsgBuf[0]);\r\n  return str;\r\nend",
    "type": "function"
  }, {
    "id": 114,
    "text": "local function DeviceIoControl(h, code, inBuffer, inBufferSize, outBuffer, outBufferSize)\r\n  if inBuffer  == nil then inBuffer,  inBufferSize  = NULL, 0 end\r\n  if outBuffer == nil then outBuffer, outBufferSize = NULL, 0 end\r\n  local dwTmp = ffi.new(\"DWORD[1]\", 0)\r\n  local ret   = C.DeviceIoControl(h, code,\r\n    inBuffer, inBufferSize, outBuffer, outBufferSize,\r\n    dwTmp, NULL\r\n  )\r\n  if ret == 0 then\r\n    local err = C.GetLastError()\r\n    return nil, err\r\n  end\r\n\r\n  return ret, dwTmp[0]\r\nend",
    "type": "function"
  }, {
    "id": 115,
    "text": "local function DiskNumber(u, P)\r\n  local p\r\n  if u then p = \"\\\\\\0\\\\\\0.\\0\\\\\\0\" .. P .. \"\\0\"\r\n  else p = \"\\\\\\\\.\\\\\" .. P end\r\n\r\n  -- Open partition\r\n  local hPart, err = CreateFile(u, p, 0,\r\n    FILE_SHARE_READ + FILE_SHARE_WRITE, NULL, OPEN_EXISTING,\r\n    FILE_ATTRIBUTE_NORMAL + FILE_FLAG_NO_BUFFERING, NULL\r\n  );\r\n\r\n  if not hPart then return nil, err end\r\n\r\n  local Info = CTYPES.STORAGE_DEVICE_NUMBER();\r\n  local Info_size = ffi.sizeof(CTYPES.STORAGE_DEVICE_NUMBER)\r\n\r\n  local ret, dwTmp = DeviceIoControl(hPart, IOCTL_STORAGE_GET_DEVICE_NUMBER, \r\n    NULL, 0, Info, Info_size\r\n  )\r\n  if not ret then err = dwTmp end\r\n  if dwTmp ~= Info_size then ret, err = nil, GetLastError() end\r\n\r\n  CloseHandle(hPart)\r\n  if not ret then return nil, err end\r\n  return {\r\n    Info.DeviceType,\r\n    Info.DeviceNumber,\r\n    Info.PartitionNumber,\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 116,
    "text": "function(...) return GetCurrentDirectory(false, ...) end",
    "type": "function"
  }, {
    "id": 117,
    "text": "function(...) return SetCurrentDirectory(false, ...) end",
    "type": "function"
  }, {
    "id": 118,
    "text": "function(...) return GetTempPath        (false, ...) end",
    "type": "function"
  }, {
    "id": 119,
    "text": "function(...) return GetFileAttributesEx(false, ...) end",
    "type": "function"
  }, {
    "id": 120,
    "text": "function(...) return CopyFile           (false, ...) end",
    "type": "function"
  }, {
    "id": 121,
    "text": "function(...) return FindFirstFile      (false, ...) end",
    "type": "function"
  }, {
    "id": 122,
    "text": "function(...) return FindNextFile       (false, ...) end",
    "type": "function"
  }, {
    "id": 123,
    "text": "function(...) return RemoveDirectory    (false, ...) end",
    "type": "function"
  }, {
    "id": 124,
    "text": "function(...) return DeleteFile         (false, ...) end",
    "type": "function"
  }, {
    "id": 125,
    "text": "function(...) return CreateDirectory    (false, ...) end",
    "type": "function"
  }, {
    "id": 126,
    "text": "function(...) return CreateFile         (false, ...) end",
    "type": "function"
  }, {
    "id": 127,
    "text": "function(...) return MoveFileEx         (false, ...) end",
    "type": "function"
  }, {
    "id": 128,
    "text": "function(...) return ErrorMessage       (false, ...) end",
    "type": "function"
  }, {
    "id": 129,
    "text": "function(...) return DiskNumber         (false, ...) end",
    "type": "function"
  }, {
    "id": 130,
    "text": "function(...) return GetCurrentDirectory(true, ...) end",
    "type": "function"
  }, {
    "id": 131,
    "text": "function(...) return SetCurrentDirectory(true, ...) end",
    "type": "function"
  }, {
    "id": 132,
    "text": "function(...) return GetTempPath        (true, ...) end",
    "type": "function"
  }, {
    "id": 133,
    "text": "function(...) return GetFileAttributesEx(true, ...) end",
    "type": "function"
  }, {
    "id": 134,
    "text": "function(...) return CopyFile           (true, ...) end",
    "type": "function"
  }, {
    "id": 135,
    "text": "function(...) return FindFirstFile      (true, ...) end",
    "type": "function"
  }, {
    "id": 136,
    "text": "function(...) return FindNextFile       (true, ...) end",
    "type": "function"
  }, {
    "id": 137,
    "text": "function(...) return RemoveDirectory    (true, ...) end",
    "type": "function"
  }, {
    "id": 138,
    "text": "function(...) return DeleteFile         (true, ...) end",
    "type": "function"
  }, {
    "id": 139,
    "text": "function(...) return CreateDirectory    (true, ...) end",
    "type": "function"
  }, {
    "id": 140,
    "text": "function(...) return CreateFile         (true, ...) end",
    "type": "function"
  }, {
    "id": 141,
    "text": "function(...) return MoveFileEx         (true, ...) end",
    "type": "function"
  }, {
    "id": 142,
    "text": "function(...) return ErrorMessage       (true, ...) end",
    "type": "function"
  }, {
    "id": 143,
    "text": "function(...) return DiskNumber         (true, ...) end",
    "type": "function"
  }, {
    "id": 144,
    "text": "local function prequire(...)\r\n  local ok, mod = pcall(require, ...)\r\n  if not ok then return nil, mod end\r\n  return mod\r\nend",
    "type": "function"
  }, {
    "id": 145,
    "text": "local ok, mod = pcall(require, ...)",
    "type": "statement:localassign"
  }, {
    "id": 146,
    "text": "if not ok then return nil, mod end",
    "type": "statement:if"
  }, {
    "id": 147,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 148,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 149,
    "text": "local function lshift(v, n)\r\n  return math.floor(v * (2 ^ n))\r\nend",
    "type": "function"
  }, {
    "id": 150,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 151,
    "text": "local function rshift(v, n)\r\n  return math.floor(v / (2 ^ n))\r\nend",
    "type": "function"
  }, {
    "id": 152,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 153,
    "text": "local function FileTimeToTimeT(low, high)\r\n  return math.floor(low / 10000000 + high * (2^32 / 10000000)) - 11644473600;\r\nend",
    "type": "function"
  }, {
    "id": 154,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 155,
    "text": "local function TimeTToFileTime(v)\r\n  v = 10000000 * (v + 11644473600)\r\n  local high = rshift(v,32)\r\n  local low  = v - lshift(high, 32)\r\n  return low, high\r\nend",
    "type": "function"
  }, {
    "id": 156,
    "text": "v = 10000000 * (v + 11644473600)",
    "type": "statement:assign"
  }, {
    "id": 157,
    "text": "local high = rshift(v,32)",
    "type": "statement:localassign"
  }, {
    "id": 158,
    "text": "local low  = v - lshift(high, 32)",
    "type": "statement:localassign"
  }, {
    "id": 159,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 160,
    "text": "local function LargeToNumber(low, high)\r\n  return low + high * 2^32\r\nend",
    "type": "function"
  }, {
    "id": 161,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 162,
    "text": "local function TestBit(flags, flag)\r\n  return (0 ~= bit.band(flags, flag))\r\nend",
    "type": "function"
  }, {
    "id": 163,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 164,
    "text": "local function AttributesToStat(fd)\r\n  local flags = fd.dwFileAttributes;\r\n  local ctime = FileTimeToTimeT(fd.ftCreationTime.dwLowDateTime,   fd.ftCreationTime.dwHighDateTime);\r\n  local atime = FileTimeToTimeT(fd.ftLastAccessTime.dwLowDateTime, fd.ftLastAccessTime.dwHighDateTime);\r\n  local mtime = FileTimeToTimeT(fd.ftLastWriteTime.dwLowDateTime,  fd.ftLastWriteTime.dwHighDateTime);\r\n  local size  = LargeToNumber  (fd.nFileSizeLow,                   fd.nFileSizeHigh);\r\n\r\n  local mode\r\n  if TestBit(flags, CONST.FILE_ATTRIBUTE_REPARSE_POINT) then mode = \"link\"\r\n  elseif TestBit(flags, CONST.FILE_ATTRIBUTE_DIRECTORY) then mode = \"directory\"\r\n  else mode = \"file\" end\r\n\r\n  return{\r\n    mode         = mode;\r\n    nlink        = 1; -- number of hard links to the file\r\n    uid          = 0; -- user-id of owner (Unix only, always 0 on Windows)\r\n    gid          = 0; -- group-id of owner (Unix only, always 0 on Windows)\r\n    ino          = 0;\r\n    access       = atime;\r\n    modification = mtime;\r\n    change       = ctime;\r\n    size         = size;\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 165,
    "text": "local flags = fd.dwFileAttributes",
    "type": "statement:localassign"
  }, {
    "id": 166,
    "text": "local ctime = FileTimeToTimeT(fd.ftCreationTime.dwLowDateTime,   fd.ftCreationTime.dwHighDateTime)",
    "type": "statement:localassign"
  }, {
    "id": 167,
    "text": "local atime = FileTimeToTimeT(fd.ftLastAccessTime.dwLowDateTime, fd.ftLastAccessTime.dwHighDateTime)",
    "type": "statement:localassign"
  }, {
    "id": 168,
    "text": "local mtime = FileTimeToTimeT(fd.ftLastWriteTime.dwLowDateTime,  fd.ftLastWriteTime.dwHighDateTime)",
    "type": "statement:localassign"
  }, {
    "id": 169,
    "text": "local size  = LargeToNumber  (fd.nFileSizeLow,                   fd.nFileSizeHigh)",
    "type": "statement:localassign"
  }, {
    "id": 170,
    "text": "local mode",
    "type": "statement:localassign"
  }, {
    "id": 171,
    "text": "if TestBit(flags, CONST.FILE_ATTRIBUTE_REPARSE_POINT) then mode = \"link\"\r\n  elseif TestBit(flags, CONST.FILE_ATTRIBUTE_DIRECTORY) then mode = \"directory\"\r\n  else mode = \"file\" end",
    "type": "statement:if"
  }, {
    "id": 172,
    "text": "mode = \"link\"",
    "type": "statement:assign"
  }, {
    "id": 173,
    "text": "mode = \"directory\"",
    "type": "statement:assign"
  }, {
    "id": 174,
    "text": "mode = \"file\"",
    "type": "statement:assign"
  }, {
    "id": 175,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 176,
    "text": "local function FlagsToMode(flags)\r\n  if TestBit(flags, CONST.FILE_ATTRIBUTE_REPARSE_POINT) then return \"link\" end\r\n  if TestBit(flags, CONST.FILE_ATTRIBUTE_DIRECTORY) then return \"directory\" end\r\n  return \"file\"\r\nend",
    "type": "function"
  }, {
    "id": 177,
    "text": "if TestBit(flags, CONST.FILE_ATTRIBUTE_REPARSE_POINT) then return \"link\" end",
    "type": "statement:if"
  }, {
    "id": 178,
    "text": "if TestBit(flags, CONST.FILE_ATTRIBUTE_DIRECTORY) then return \"directory\" end",
    "type": "statement:if"
  }, {
    "id": 179,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 180,
    "text": "local function AttributesToStat2(fd)\r\n  local flags = fd.dwFileAttributes;\r\n  local ctime = FileTimeToTimeT( fd.ftCreationTime[1],   fd.ftCreationTime[2]   );\r\n  local atime = FileTimeToTimeT( fd.ftLastAccessTime[1], fd.ftLastAccessTime[2] );\r\n  local mtime = FileTimeToTimeT( fd.ftLastWriteTime[1],  fd.ftLastWriteTime[2]  );\r\n  local size  = LargeToNumber  ( fd.nFileSize[1],        fd.nFileSize[2]        );\r\n\r\n  local mode = FlagsToMode(flags)\r\n\r\n  return{\r\n    mode         = mode;\r\n    nlink        = 1; -- number of hard links to the file\r\n    uid          = 0; -- user-id of owner (Unix only, always 0 on Windows)\r\n    gid          = 0; -- group-id of owner (Unix only, always 0 on Windows)\r\n    ino          = 0;\r\n    access       = atime;\r\n    modification = mtime;\r\n    change       = ctime;\r\n    size         = size;\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 181,
    "text": "local ctime = FileTimeToTimeT( fd.ftCreationTime[1],   fd.ftCreationTime[2]   )",
    "type": "statement:localassign"
  }, {
    "id": 182,
    "text": "local atime = FileTimeToTimeT( fd.ftLastAccessTime[1], fd.ftLastAccessTime[2] )",
    "type": "statement:localassign"
  }, {
    "id": 183,
    "text": "local mtime = FileTimeToTimeT( fd.ftLastWriteTime[1],  fd.ftLastWriteTime[2]  )",
    "type": "statement:localassign"
  }, {
    "id": 184,
    "text": "local size  = LargeToNumber  ( fd.nFileSize[1],        fd.nFileSize[2]        )",
    "type": "statement:localassign"
  }, {
    "id": 185,
    "text": "local mode = FlagsToMode(flags)",
    "type": "statement:localassign"
  }, {
    "id": 186,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 187,
    "text": "local function clone(t, o)\r\n  if not o then o = {} end\r\n  for k, v in pairs(t) do o[k] = v end\r\n  return o\r\nend",
    "type": "function"
  }, {
    "id": 188,
    "text": "if not o then o = {} end",
    "type": "statement:if"
  }, {
    "id": 189,
    "text": "o = {}",
    "type": "statement:assign"
  }, {
    "id": 190,
    "text": "for k, v in pairs(t) do o[k] = v end",
    "type": "statement:genericfor"
  }, {
    "id": 191,
    "text": "o[k] = v",
    "type": "statement:assign"
  }, {
    "id": 192,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 193,
    "text": "function _M.currentdir(u)\r\n  return u.GetCurrentDirectory()\r\nend",
    "type": "function"
  }, {
    "id": 194,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 195,
    "text": "function _M.attributes(u, P, a)\r\n  --- @todo On Windows systems, represents the drive number of the disk containing the file\r\n  local dev = 0\r\n  --- @todo decode only one attribute if `a` provided\r\n  local attr, err = u.GetFileAttributesEx(P)\r\n  if not attr then return nil, err end\r\n  local stat = AttributesToStat(attr)\r\n  stat.dev, stat.rdev = dev, dev\r\n  if a then return stat[a] end\r\n  return stat\r\nend",
    "type": "function"
  }, {
    "id": 196,
    "text": "local dev = 0",
    "type": "statement:localassign"
  }, {
    "id": 197,
    "text": "local attr, err = u.GetFileAttributesEx(P)",
    "type": "statement:localassign"
  }, {
    "id": 198,
    "text": "if not attr then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 199,
    "text": "local stat = AttributesToStat(attr)",
    "type": "statement:localassign"
  }, {
    "id": 200,
    "text": "stat.dev, stat.rdev = dev, dev",
    "type": "statement:assign"
  }, {
    "id": 201,
    "text": "if a then return stat[a] end",
    "type": "statement:if"
  }, {
    "id": 202,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 203,
    "text": "function _M.flags(u, P)\r\n  local fd, err = u.GetFileAttributesEx(P)\r\n  if not fd then return nil, err end\r\n  return fd.dwFileAttributes\r\nend",
    "type": "function"
  }, {
    "id": 204,
    "text": "local fd, err = u.GetFileAttributesEx(P)",
    "type": "statement:localassign"
  }, {
    "id": 205,
    "text": "if not fd then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 206,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 207,
    "text": "function _M.ctime(u, P)\r\n  local fd, err = u.GetFileAttributesEx(P)\r\n  if not fd then return nil, err end\r\n  return FileTimeToTimeT(fd.ftCreationTime.dwLowDateTime,   fd.ftCreationTime.dwHighDateTime)\r\nend",
    "type": "function"
  }, {
    "id": 208,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 209,
    "text": "function _M.atime(u, P)\r\n  local fd, err = u.GetFileAttributesEx(P)\r\n  if not fd then return nil, err end\r\n  return FileTimeToTimeT(fd.ftLastAccessTime.dwLowDateTime, fd.ftLastAccessTime.dwHighDateTime)\r\nend",
    "type": "function"
  }, {
    "id": 210,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 211,
    "text": "function _M.mtime(u, P)\r\n  local fd, err = u.GetFileAttributesEx(P)\r\n  if not fd then return nil, err end\r\n  return FileTimeToTimeT(fd.ftLastWriteTime.dwLowDateTime,  fd.ftLastWriteTime.dwHighDateTime)\r\nend",
    "type": "function"
  }, {
    "id": 212,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 213,
    "text": "function _M.size(u, P)\r\n  local fd, err = u.GetFileAttributesEx(P)\r\n  if not fd then return nil, err end\r\n  return LargeToNumber  (fd.nFileSizeLow,                   fd.nFileSizeHigh);\r\nend",
    "type": "function"
  }, {
    "id": 214,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 215,
    "text": "local function file_not_found(err)\r\n  return (err == CONST.ERROR_FILE_NOT_FOUND) or (err == CONST.ERROR_PATH_NOT_FOUND)\r\nend",
    "type": "function"
  }, {
    "id": 216,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 217,
    "text": "function _M.exists(u, P)\r\n  local fd, err = u.GetFileAttributesEx(P)\r\n  if not fd then \r\n    if file_not_found(err) then return false end\r\n    return nil, err\r\n  end\r\n  return P\r\nend",
    "type": "function"
  }, {
    "id": 218,
    "text": "if not fd then \r\n    if file_not_found(err) then return false end\r\n    return nil, err\r\n  end",
    "type": "statement:if"
  }, {
    "id": 219,
    "text": "if file_not_found(err) then return false end",
    "type": "statement:if"
  }, {
    "id": 220,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 221,
    "text": "function _M.isdir(u, P)\r\n  local fd, err = u.GetFileAttributesEx(P)\r\n  if not fd then \r\n    if file_not_found(err) then return false end\r\n    return nil, err\r\n  end\r\n  if TestBit(fd.dwFileAttributes, CONST.FILE_ATTRIBUTE_REPARSE_POINT) then return false end\r\n  return TestBit(fd.dwFileAttributes, CONST.FILE_ATTRIBUTE_DIRECTORY) and P\r\nend",
    "type": "function"
  }, {
    "id": 222,
    "text": "if TestBit(fd.dwFileAttributes, CONST.FILE_ATTRIBUTE_REPARSE_POINT) then return false end",
    "type": "statement:if"
  }, {
    "id": 223,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 224,
    "text": "function _M.isfile(u, P)\r\n  local fd, err = u.GetFileAttributesEx(P)\r\n  if not fd then \r\n    if file_not_found(err) then return false end\r\n    return nil, err\r\n  end\r\n  if TestBit(fd.dwFileAttributes, CONST.FILE_ATTRIBUTE_REPARSE_POINT) then return false end\r\n  return (not islink) and (not TestBit(fd.dwFileAttributes, CONST.FILE_ATTRIBUTE_DIRECTORY)) and P\r\nend",
    "type": "function"
  }, {
    "id": 225,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 226,
    "text": "function _M.islink(u, P)\r\n  local fd, err = u.GetFileAttributesEx(P)\r\n  if not fd then \r\n    if file_not_found(err) then return false end\r\n    return nil, err\r\n  end\r\n  return TestBit(fd.dwFileAttributes, CONST.FILE_ATTRIBUTE_REPARSE_POINT)\r\nend",
    "type": "function"
  }, {
    "id": 227,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 228,
    "text": "function _M.mkdir(u, P)\r\n  local ok, err = u.CreateDirectory(P)\r\n  if not ok then\r\n    -- if err == CONST.ERROR_ALREADY_EXISTS then return false end\r\n    return ok, err\r\n  end\r\n  return ok\r\nend",
    "type": "function"
  }, {
    "id": 229,
    "text": "local ok, err = u.CreateDirectory(P)",
    "type": "statement:localassign"
  }, {
    "id": 230,
    "text": "if not ok then\r\n    -- if err == CONST.ERROR_ALREADY_EXISTS then return false end\r\n    return ok, err\r\n  end",
    "type": "statement:if"
  }, {
    "id": 231,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 232,
    "text": "function _M.rmdir(u, P)\r\n  return u.RemoveDirectory(P)\r\nend",
    "type": "function"
  }, {
    "id": 233,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 234,
    "text": "function _M.chdir(u, P)\r\n  return u.SetCurrentDirectory(P)\r\nend",
    "type": "function"
  }, {
    "id": 235,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 236,
    "text": "function _M.copy(u, src, dst, force)\r\n  return u.CopyFile(src, dst, not force)\r\nend",
    "type": "function"
  }, {
    "id": 237,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 238,
    "text": "function _M.move(u, src, dst, flags)\r\n  if flags == nil then flags = CONST.MOVEFILE_COPY_ALLOWED\r\n  elseif flags == true then flags = CONST.MOVEFILE_COPY_ALLOWED + CONST.MOVEFILE_REPLACE_EXISTING end\r\n  return u.MoveFileEx(src, dst, flags)\r\nend",
    "type": "function"
  }, {
    "id": 239,
    "text": "if flags == nil then flags = CONST.MOVEFILE_COPY_ALLOWED\r\n  elseif flags == true then flags = CONST.MOVEFILE_COPY_ALLOWED + CONST.MOVEFILE_REPLACE_EXISTING end",
    "type": "statement:if"
  }, {
    "id": 240,
    "text": "flags = CONST.MOVEFILE_COPY_ALLOWED",
    "type": "statement:assign"
  }, {
    "id": 241,
    "text": "flags = CONST.MOVEFILE_COPY_ALLOWED + CONST.MOVEFILE_REPLACE_EXISTING",
    "type": "statement:assign"
  }, {
    "id": 242,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 243,
    "text": "function _M.remove(u, P)\r\n  return u.DeleteFile(P)\r\nend",
    "type": "function"
  }, {
    "id": 244,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 245,
    "text": "function _M.tmpdir(u)\r\n  return u.GetTempPath()\r\nend",
    "type": "function"
  }, {
    "id": 246,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 247,
    "text": "function _M.link()\r\n  return nil, \"make_link is not supported on Windows\";\r\nend",
    "type": "function"
  }, {
    "id": 248,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 249,
    "text": "function _M.setmode()\r\n  return nil, \"setmode is not supported by this implementation\";\r\nend",
    "type": "function"
  }, {
    "id": 250,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 251,
    "text": "function _M.dir(u, P)\r\n  local h, fd = u.FindFirstFile(P .. u.DIR_SEP .. u.ANY_MASK)\r\n  assert(h, fd)\r\n  local closed = false\r\n  local obj = {\r\n    close = function(self)\r\n      if not h then return end\r\n      u.FindClose(h)\r\n      h, closed = nil, true\r\n    end;\r\n    next  = function(self)\r\n      if not h then\r\n        if not closed then\r\n          closed = true\r\n          return\r\n        end\r\n        error(\"calling 'next' on bad self (closed directory)\", 2)\r\n      end\r\n      local fname = u.WIN32_FIND_DATA2TABLE(fd).cFileName\r\n      local ret, err = u.FindNextFile(h, fd)\r\n      if ret == 0 then self:close() closed = false end\r\n      return fname\r\n    end\r\n  }\r\n  return obj.next, obj\r\nend",
    "type": "function"
  }, {
    "id": 252,
    "text": "local h, fd = u.FindFirstFile(P .. u.DIR_SEP .. u.ANY_MASK)",
    "type": "statement:localassign"
  }, {
    "id": 253,
    "text": "assert(h, fd)",
    "type": "statement:functioncall"
  }, {
    "id": 254,
    "text": "local closed = false",
    "type": "statement:localassign"
  }, {
    "id": 255,
    "text": "local obj = {\r\n    close = function(self)\r\n      if not h then return end\r\n      u.FindClose(h)\r\n      h, closed = nil, true\r\n    end;\r\n    next  = function(self)\r\n      if not h then\r\n        if not closed then\r\n          closed = true\r\n          return\r\n        end\r\n        error(\"calling 'next' on bad self (closed directory)\", 2)\r\n      end\r\n      local fname = u.WIN32_FIND_DATA2TABLE(fd).cFileName\r\n      local ret, err = u.FindNextFile(h, fd)\r\n      if ret == 0 then self:close() closed = false end\r\n      return fname\r\n    end\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 256,
    "text": "if not h then return end",
    "type": "statement:if"
  }, {
    "id": 257,
    "text": "u.FindClose(h)",
    "type": "statement:functioncall"
  }, {
    "id": 258,
    "text": "h, closed = nil, true",
    "type": "statement:assign"
  }, {
    "id": 259,
    "text": "if not h then\r\n        if not closed then\r\n          closed = true\r\n          return\r\n        end\r\n        error(\"calling 'next' on bad self (closed directory)\", 2)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 260,
    "text": "if not closed then\r\n          closed = true\r\n          return\r\n        end",
    "type": "statement:if"
  }, {
    "id": 261,
    "text": "closed = true",
    "type": "statement:assign"
  }, {
    "id": 262,
    "text": "error(\"calling 'next' on bad self (closed directory)\", 2)",
    "type": "statement:functioncall"
  }, {
    "id": 263,
    "text": "local fname = u.WIN32_FIND_DATA2TABLE(fd).cFileName",
    "type": "statement:localassign"
  }, {
    "id": 264,
    "text": "local ret, err = u.FindNextFile(h, fd)",
    "type": "statement:localassign"
  }, {
    "id": 265,
    "text": "if ret == 0 then self:close() closed = false end",
    "type": "statement:if"
  }, {
    "id": 266,
    "text": "self:close()",
    "type": "statement:functioncall"
  }, {
    "id": 267,
    "text": "closed = false",
    "type": "statement:assign"
  }, {
    "id": 268,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 269,
    "text": "function _M.touch(u, P, at, mt)\r\n  if not at then at = os.time() end\r\n  if not mt then mt = at end\r\n  local atime = {TimeTToFileTime(at)}\r\n  local mtime = {TimeTToFileTime(mt)}\r\n  local h, err = u.CreateFile(P, \r\n    CONST.GENERIC_READ + CONST.FILE_WRITE_ATTRIBUTES,\r\n    CONST.FILE_SHARE_READ + CONST.FILE_SHARE_WRITE, nil,\r\n    CONST.OPEN_EXISTING, CONST.FILE_ATTRIBUTE_NORMAL, nil\r\n  )\r\n  if not h then return nil, err end\r\n\r\n  local ok, err = u.SetFileTime(h, nil, atime, mtime)\r\n  u.CloseHandle(h)\r\n  if not ok then return nil, err end\r\n  return ok\r\nend",
    "type": "function"
  }, {
    "id": 270,
    "text": "if not at then at = os.time() end",
    "type": "statement:if"
  }, {
    "id": 271,
    "text": "at = os.time()",
    "type": "statement:assign"
  }, {
    "id": 272,
    "text": "if not mt then mt = at end",
    "type": "statement:if"
  }, {
    "id": 273,
    "text": "mt = at",
    "type": "statement:assign"
  }, {
    "id": 274,
    "text": "local atime = {TimeTToFileTime(at)}",
    "type": "statement:localassign"
  }, {
    "id": 275,
    "text": "local mtime = {TimeTToFileTime(mt)}",
    "type": "statement:localassign"
  }, {
    "id": 276,
    "text": "local h, err = u.CreateFile(P, \r\n    CONST.GENERIC_READ + CONST.FILE_WRITE_ATTRIBUTES,\r\n    CONST.FILE_SHARE_READ + CONST.FILE_SHARE_WRITE, nil,\r\n    CONST.OPEN_EXISTING, CONST.FILE_ATTRIBUTE_NORMAL, nil\r\n  )",
    "type": "statement:localassign"
  }, {
    "id": 277,
    "text": "if not h then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 278,
    "text": "local ok, err = u.SetFileTime(h, nil, atime, mtime)",
    "type": "statement:localassign"
  }, {
    "id": 279,
    "text": "u.CloseHandle(h)",
    "type": "statement:functioncall"
  }, {
    "id": 280,
    "text": "if not ok then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 281,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 282,
    "text": "local function findfile(u, P, cb)\r\n  local h, fd = u.FindFirstFile(P)\r\n  if not h then return nil, fd end\r\n  repeat\r\n    local ret = cb(fd)\r\n    if ret then\r\n      u.FindClose(h)\r\n      return ret\r\n    end\r\n    ret = u.FindNextFile(h, fd)\r\n  until ret == 0;\r\n  u.FindClose(h)\r\nend",
    "type": "function"
  }, {
    "id": 283,
    "text": "local h, fd = u.FindFirstFile(P)",
    "type": "statement:localassign"
  }, {
    "id": 284,
    "text": "if not h then return nil, fd end",
    "type": "statement:if"
  }, {
    "id": 285,
    "text": "repeat\r\n    local ret = cb(fd)\r\n    if ret then\r\n      u.FindClose(h)\r\n      return ret\r\n    end\r\n    ret = u.FindNextFile(h, fd)\r\n  until ret == 0",
    "type": "statement:repeat"
  }, {
    "id": 286,
    "text": "local ret = cb(fd)",
    "type": "statement:localassign"
  }, {
    "id": 287,
    "text": "if ret then\r\n      u.FindClose(h)\r\n      return ret\r\n    end",
    "type": "statement:if"
  }, {
    "id": 288,
    "text": "ret = u.FindNextFile(h, fd)",
    "type": "statement:assign"
  }, {
    "id": 289,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 290,
    "text": "local function isdots(P)\r\n  return P == '.' or P == '..'\r\n    or P == '.\\0' or P == '.\\0.\\0'\r\nend",
    "type": "function"
  }, {
    "id": 291,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 292,
    "text": "local function find_last(str, sub)\r\n  local pos = nil\r\n  while true do\r\n    local next_pos = string.find(str, sub, pos, true)\r\n    if not next_pos then return pos end\r\n    pos = next_pos + #sub\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 293,
    "text": "local pos = nil",
    "type": "statement:localassign"
  }, {
    "id": 294,
    "text": "while true do\r\n    local next_pos = string.find(str, sub, pos, true)\r\n    if not next_pos then return pos end\r\n    pos = next_pos + #sub\r\n  end",
    "type": "statement:while"
  }, {
    "id": 295,
    "text": "local next_pos = string.find(str, sub, pos, true)",
    "type": "statement:localassign"
  }, {
    "id": 296,
    "text": "if not next_pos then return pos end",
    "type": "statement:if"
  }, {
    "id": 297,
    "text": "pos = next_pos + #sub",
    "type": "statement:assign"
  }, {
    "id": 298,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 299,
    "text": "local function splitpath(P, sep)\r\n  local pos = find_last(P, sep)\r\n  if not pos then return \"\", P end\r\n  return string.sub(P, 1, pos - #sep - 1), string.sub(P, pos)\r\nend",
    "type": "function"
  }, {
    "id": 300,
    "text": "local pos = find_last(P, sep)",
    "type": "statement:localassign"
  }, {
    "id": 301,
    "text": "if not pos then return \"\", P end",
    "type": "statement:if"
  }, {
    "id": 302,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 303,
    "text": "local function do_foreach_recurse(u, base, mask, callback, option)\r\n  return findfile(u, base .. u.DIR_SEP .. u.ANY_MASK, function(fd)\r\n    if not TestBit(fd.dwFileAttributes, CONST.FILE_ATTRIBUTE_DIRECTORY) then return end\r\n    if option.skiplinks and TestBit(fd.dwFileAttributes, CONST.FILE_ATTRIBUTE_REPARSE_POINT) then return end\r\n    fd = u.WIN32_FIND_DATA2TABLE(fd)\r\n    if isdots(fd.cFileName) then return end\r\n    return foreach_impl(u, base .. u.DIR_SEP .. fd.cFileName, mask, callback, option)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 304,
    "text": "if not TestBit(fd.dwFileAttributes, CONST.FILE_ATTRIBUTE_DIRECTORY) then return end",
    "type": "statement:if"
  }, {
    "id": 305,
    "text": "if option.skiplinks and TestBit(fd.dwFileAttributes, CONST.FILE_ATTRIBUTE_REPARSE_POINT) then return end",
    "type": "statement:if"
  }, {
    "id": 306,
    "text": "fd = u.WIN32_FIND_DATA2TABLE(fd)",
    "type": "statement:assign"
  }, {
    "id": 307,
    "text": "if isdots(fd.cFileName) then return end",
    "type": "statement:if"
  }, {
    "id": 308,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 309,
    "text": "function(base,name,fd) \r\n      table.insert(tmp, {base,name,fd})\r\n    end",
    "type": "function"
  }, {
    "id": 310,
    "text": "table.insert(tmp, {base,name,fd})",
    "type": "statement:functioncall"
  }, {
    "id": 311,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 312,
    "text": "function (u, base, mask, callback, option)\r\n  local path = base .. u.DIR_SEP\r\n  if option.recurse and option.reverse then\r\n    local res, err = do_foreach_recurse(u, base, mask, callback, option)\r\n    if res or err then return res, err end\r\n  end\r\n\r\n  local tmp, origin_cb\r\n  if option.delay then\r\n    tmp, origin_cb, callback = {}, callback, function(base,name,fd) \r\n      table.insert(tmp, {base,name,fd})\r\n    end;\r\n  end\r\n\r\n  local ok, ret = findfile(u, path .. mask, function(fd)\r\n    local isdir = TestBit(fd.dwFileAttributes, CONST.FILE_ATTRIBUTE_DIRECTORY)\r\n    if isdir then if option.skipdirs then return end\r\n    else if option.skipfiles then return end end\r\n\r\n    fd = u.WIN32_FIND_DATA2TABLE(fd)\r\n    if isdir and option.skipdots ~= false and isdots(fd.cFileName) then\r\n      return\r\n    end\r\n\r\n    return callback(base, fd.cFileName, fd)\r\n  end)\r\n\r\n  if ok or err then return ok, err end\r\n\r\n  if option.delay then\r\n    for _, t in pairs(tmp) do\r\n      local ok, err = origin_cb(t[1], t[2], t[3])\r\n      if ok or err then return ok, err end\r\n    end\r\n  end\r\n\r\n  if option.recurse and not option.reverse then\r\n    local res, err = do_foreach_recurse(u, base, mask, origin_cb or callback, option)\r\n    if res or err then return res, err end\r\n  end\r\n\r\nend",
    "type": "function"
  }, {
    "id": 313,
    "text": "local path = base .. u.DIR_SEP",
    "type": "statement:localassign"
  }, {
    "id": 314,
    "text": "if option.recurse and option.reverse then\r\n    local res, err = do_foreach_recurse(u, base, mask, callback, option)\r\n    if res or err then return res, err end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 315,
    "text": "local res, err = do_foreach_recurse(u, base, mask, callback, option)",
    "type": "statement:localassign"
  }, {
    "id": 316,
    "text": "if res or err then return res, err end",
    "type": "statement:if"
  }, {
    "id": 317,
    "text": "local tmp, origin_cb",
    "type": "statement:localassign"
  }, {
    "id": 318,
    "text": "if option.delay then\r\n    tmp, origin_cb, callback = {}, callback, function(base,name,fd) \r\n      table.insert(tmp, {base,name,fd})\r\n    end;\r\n  end",
    "type": "statement:if"
  }, {
    "id": 319,
    "text": "tmp, origin_cb, callback = {}, callback, function(base,name,fd) \r\n      table.insert(tmp, {base,name,fd})\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 320,
    "text": "local ok, ret = findfile(u, path .. mask, function(fd)\r\n    local isdir = TestBit(fd.dwFileAttributes, CONST.FILE_ATTRIBUTE_DIRECTORY)\r\n    if isdir then if option.skipdirs then return end\r\n    else if option.skipfiles then return end end\r\n\r\n    fd = u.WIN32_FIND_DATA2TABLE(fd)\r\n    if isdir and option.skipdots ~= false and isdots(fd.cFileName) then\r\n      return\r\n    end\r\n\r\n    return callback(base, fd.cFileName, fd)\r\n  end)",
    "type": "statement:localassign"
  }, {
    "id": 321,
    "text": "local isdir = TestBit(fd.dwFileAttributes, CONST.FILE_ATTRIBUTE_DIRECTORY)",
    "type": "statement:localassign"
  }, {
    "id": 322,
    "text": "if isdir then if option.skipdirs then return end\r\n    else if option.skipfiles then return end end",
    "type": "statement:if"
  }, {
    "id": 323,
    "text": "if option.skipdirs then return end",
    "type": "statement:if"
  }, {
    "id": 324,
    "text": "if option.skipfiles then return end",
    "type": "statement:if"
  }, {
    "id": 325,
    "text": "if isdir and option.skipdots ~= false and isdots(fd.cFileName) then\r\n      return\r\n    end",
    "type": "statement:if"
  }, {
    "id": 326,
    "text": "if ok or err then return ok, err end",
    "type": "statement:if"
  }, {
    "id": 327,
    "text": "if option.delay then\r\n    for _, t in pairs(tmp) do\r\n      local ok, err = origin_cb(t[1], t[2], t[3])\r\n      if ok or err then return ok, err end\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 328,
    "text": "for _, t in pairs(tmp) do\r\n      local ok, err = origin_cb(t[1], t[2], t[3])\r\n      if ok or err then return ok, err end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 329,
    "text": "local ok, err = origin_cb(t[1], t[2], t[3])",
    "type": "statement:localassign"
  }, {
    "id": 330,
    "text": "if option.recurse and not option.reverse then\r\n    local res, err = do_foreach_recurse(u, base, mask, origin_cb or callback, option)\r\n    if res or err then return res, err end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 331,
    "text": "local res, err = do_foreach_recurse(u, base, mask, origin_cb or callback, option)",
    "type": "statement:localassign"
  }, {
    "id": 332,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 333,
    "text": "function _M.foreach(u, base, callback, option)\r\n  local base, mask = splitpath(base, u.DIR_SEP)\r\n  if mask == '' then mask = u.ANY_MASK end\r\n  return foreach_impl(u, base, mask, function(base, name, fd)\r\n    return callback(base .. u.DIR_SEP .. name, AttributesToStat2(fd))\r\n  end, option or {})\r\nend",
    "type": "function"
  }, {
    "id": 334,
    "text": "local base, mask = splitpath(base, u.DIR_SEP)",
    "type": "statement:localassign"
  }, {
    "id": 335,
    "text": "if mask == '' then mask = u.ANY_MASK end",
    "type": "statement:if"
  }, {
    "id": 336,
    "text": "mask = u.ANY_MASK",
    "type": "statement:assign"
  }, {
    "id": 337,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 338,
    "text": "local function make_attrib(str)\r\n  local t = {}\r\n  for i = 1, #str do \r\n    local ch = str:sub(i,i)\r\n    local fn = attribs[ ch ]\r\n    if not fn then return nil, 'unknown file attribute: ' .. ch end\r\n    table.insert(t, fn)\r\n  end\r\n\r\n  return function(...)\r\n    local res = {n = #t}\r\n    for i, f in ipairs(t) do\r\n      local ok, err = f(...)\r\n      if ok == nil then return nil, err end\r\n      table.insert(res, ok)\r\n    end\r\n    return res\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 339,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 340,
    "text": "for i = 1, #str do \r\n    local ch = str:sub(i,i)\r\n    local fn = attribs[ ch ]\r\n    if not fn then return nil, 'unknown file attribute: ' .. ch end\r\n    table.insert(t, fn)\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 341,
    "text": "local ch = str:sub(i,i)",
    "type": "statement:localassign"
  }, {
    "id": 342,
    "text": "local fn = attribs[ ch ]",
    "type": "statement:localassign"
  }, {
    "id": 343,
    "text": "if not fn then return nil, 'unknown file attribute: ' .. ch end",
    "type": "statement:if"
  }, {
    "id": 344,
    "text": "table.insert(t, fn)",
    "type": "statement:functioncall"
  }, {
    "id": 345,
    "text": "local res = {n = #t}",
    "type": "statement:localassign"
  }, {
    "id": 346,
    "text": "for i, f in ipairs(t) do\r\n      local ok, err = f(...)\r\n      if ok == nil then return nil, err end\r\n      table.insert(res, ok)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 347,
    "text": "local ok, err = f(...)",
    "type": "statement:localassign"
  }, {
    "id": 348,
    "text": "if ok == nil then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 349,
    "text": "table.insert(res, ok)",
    "type": "statement:functioncall"
  }, {
    "id": 350,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 351,
    "text": "function _M.each_impl(u, option)\r\n  if not option.file then return nil, 'no file mask present' end\r\n  local base, mask = splitpath( option.file, u.DIR_SEP )\r\n  if mask == '' then mask = u.ANY_MASK end\r\n\r\n  local get_params, err = make_attrib(option.param or 'f')\r\n  if not get_params then return nil, err end\r\n  local unpack = unpack or table.unpack\r\n\r\n  local filter = option.filter\r\n\r\n  if option.callback then\r\n    local callback = option.callback \r\n\r\n    local function cb(base, name, path, fd)\r\n      local params = assert(get_params(u, base, name, path, fd))\r\n      if filter and (not filter(unpack(params, 1, params.n))) then return end\r\n      return callback(unpack(params, 1, params.n))\r\n    end\r\n\r\n    return foreach_impl(u, base, mask, cb, option)\r\n  else\r\n    local function cb(base, name, path, fd)\r\n      local params = assert(get_params(u, base, name, path, fd))\r\n      if filter and (not filter(unpack(params, 1, params.n))) then return end\r\n      coroutine.yield(params)\r\n    end\r\n    local co = coroutine.create(function()\r\n      foreach_impl(u, base, mask, cb, option)\r\n    end)\r\n    return function()\r\n      local status, params = coroutine.resume(co)\r\n      if status then if params then return unpack(params, 1, params.n) end\r\n      else error(params, 2) end\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 352,
    "text": "if not option.file then return nil, 'no file mask present' end",
    "type": "statement:if"
  }, {
    "id": 353,
    "text": "local base, mask = splitpath( option.file, u.DIR_SEP )",
    "type": "statement:localassign"
  }, {
    "id": 354,
    "text": "local get_params, err = make_attrib(option.param or 'f')",
    "type": "statement:localassign"
  }, {
    "id": 355,
    "text": "if not get_params then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 356,
    "text": "local unpack = unpack or table.unpack",
    "type": "statement:localassign"
  }, {
    "id": 357,
    "text": "local filter = option.filter",
    "type": "statement:localassign"
  }, {
    "id": 358,
    "text": "if option.callback then\r\n    local callback = option.callback \r\n\r\n    local function cb(base, name, path, fd)\r\n      local params = assert(get_params(u, base, name, path, fd))\r\n      if filter and (not filter(unpack(params, 1, params.n))) then return end\r\n      return callback(unpack(params, 1, params.n))\r\n    end\r\n\r\n    return foreach_impl(u, base, mask, cb, option)\r\n  else\r\n    local function cb(base, name, path, fd)\r\n      local params = assert(get_params(u, base, name, path, fd))\r\n      if filter and (not filter(unpack(params, 1, params.n))) then return end\r\n      coroutine.yield(params)\r\n    end\r\n    local co = coroutine.create(function()\r\n      foreach_impl(u, base, mask, cb, option)\r\n    end)\r\n    return function()\r\n      local status, params = coroutine.resume(co)\r\n      if status then if params then return unpack(params, 1, params.n) end\r\n      else error(params, 2) end\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 359,
    "text": "local callback = option.callback",
    "type": "statement:localassign"
  }, {
    "id": 360,
    "text": "local function cb(base, name, path, fd)\r\n      local params = assert(get_params(u, base, name, path, fd))\r\n      if filter and (not filter(unpack(params, 1, params.n))) then return end\r\n      return callback(unpack(params, 1, params.n))\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 361,
    "text": "local params = assert(get_params(u, base, name, path, fd))",
    "type": "statement:localassign"
  }, {
    "id": 362,
    "text": "if filter and (not filter(unpack(params, 1, params.n))) then return end",
    "type": "statement:if"
  }, {
    "id": 363,
    "text": "local function cb(base, name, path, fd)\r\n      local params = assert(get_params(u, base, name, path, fd))\r\n      if filter and (not filter(unpack(params, 1, params.n))) then return end\r\n      coroutine.yield(params)\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 364,
    "text": "coroutine.yield(params)",
    "type": "statement:functioncall"
  }, {
    "id": 365,
    "text": "local co = coroutine.create(function()\r\n      foreach_impl(u, base, mask, cb, option)\r\n    end)",
    "type": "statement:localassign"
  }, {
    "id": 366,
    "text": "foreach_impl(u, base, mask, cb, option)",
    "type": "statement:functioncall"
  }, {
    "id": 367,
    "text": "local status, params = coroutine.resume(co)",
    "type": "statement:localassign"
  }, {
    "id": 368,
    "text": "if status then if params then return unpack(params, 1, params.n) end\r\n      else error(params, 2) end",
    "type": "statement:if"
  }, {
    "id": 369,
    "text": "if params then return unpack(params, 1, params.n) end",
    "type": "statement:if"
  }, {
    "id": 370,
    "text": "error(params, 2)",
    "type": "statement:functioncall"
  }, {
    "id": 371,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 372,
    "text": "local function cb(base, name, path, fd)\r\n      local params = assert(get_params(u, base, name, path, fd))\r\n      if filter and (not filter(unpack(params, 1, params.n))) then return end\r\n      return callback(unpack(params, 1, params.n))\r\n    end",
    "type": "function"
  }, {
    "id": 373,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 374,
    "text": "local function cb(base, name, path, fd)\r\n      local params = assert(get_params(u, base, name, path, fd))\r\n      if filter and (not filter(unpack(params, 1, params.n))) then return end\r\n      coroutine.yield(params)\r\n    end",
    "type": "function"
  }, {
    "id": 375,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 376,
    "text": "local function load(ltype, sub)\r\n  local M = LOADED[ltype .. \"/\" .. sub]\r\n  if M then return M end\r\n  local IMPL  = require(\"path.win32.\" .. ltype ..\".fs\")[sub]\r\n  M = {\r\n    CONST = CONST;\r\n    DIR_SEP = IMPL.DIR_SEP;\r\n  }\r\n  for k, v in pairs(_M) do\r\n    if type(v) ~= \"function\" then M[k] = v \r\n    else M[k] = function(...) return v(IMPL, ...) end end\r\n  end\r\n  local each_impl = _M.each_impl\r\n  M.each = create_each(function(...) return each_impl(IMPL, ...) end)\r\n\r\n  LOADED[ltype .. \"/\" .. sub] = M\r\n  return M\r\nend",
    "type": "function"
  }, {
    "id": 377,
    "text": "local M = LOADED[ltype .. \"/\" .. sub]",
    "type": "statement:localassign"
  }, {
    "id": 378,
    "text": "if M then return M end",
    "type": "statement:if"
  }, {
    "id": 379,
    "text": "local IMPL  = require(\"path.win32.\" .. ltype ..\".fs\")[sub]",
    "type": "statement:localassign"
  }, {
    "id": 380,
    "text": "M = {\r\n    CONST = CONST;\r\n    DIR_SEP = IMPL.DIR_SEP;\r\n  }",
    "type": "statement:assign"
  }, {
    "id": 381,
    "text": "for k, v in pairs(_M) do\r\n    if type(v) ~= \"function\" then M[k] = v \r\n    else M[k] = function(...) return v(IMPL, ...) end end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 382,
    "text": "if type(v) ~= \"function\" then M[k] = v \r\n    else M[k] = function(...) return v(IMPL, ...) end end",
    "type": "statement:if"
  }, {
    "id": 383,
    "text": "M[k] = v",
    "type": "statement:assign"
  }, {
    "id": 384,
    "text": "M[k] = function(...) return v(IMPL, ...) end",
    "type": "statement:assign"
  }, {
    "id": 385,
    "text": "local each_impl = _M.each_impl",
    "type": "statement:localassign"
  }, {
    "id": 386,
    "text": "M.each = create_each(function(...) return each_impl(IMPL, ...) end)",
    "type": "statement:assign"
  }, {
    "id": 387,
    "text": "LOADED[ltype .. \"/\" .. sub] = M",
    "type": "statement:assign"
  }, {
    "id": 388,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 389,
    "text": "function(...) return v(IMPL, ...) end",
    "type": "function"
  }, {
    "id": 390,
    "text": "function(self)\r\n      if not h then return end\r\n      u.FindClose(h)\r\n      h, closed = nil, true\r\n    end",
    "type": "function"
  }, {
    "id": 391,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 392,
    "text": "function(self)\r\n      if not h then\r\n        if not closed then\r\n          closed = true\r\n          return\r\n        end\r\n        error(\"calling 'next' on bad self (closed directory)\", 2)\r\n      end\r\n      local fname = u.WIN32_FIND_DATA2TABLE(fd).cFileName\r\n      local ret, err = u.FindNextFile(h, fd)\r\n      if ret == 0 then self:close() closed = false end\r\n      return fname\r\n    end",
    "type": "function"
  }, {
    "id": 393,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 394,
    "text": "function(fd)\r\n    if not TestBit(fd.dwFileAttributes, CONST.FILE_ATTRIBUTE_DIRECTORY) then return end\r\n    if option.skiplinks and TestBit(fd.dwFileAttributes, CONST.FILE_ATTRIBUTE_REPARSE_POINT) then return end\r\n    fd = u.WIN32_FIND_DATA2TABLE(fd)\r\n    if isdots(fd.cFileName) then return end\r\n    return foreach_impl(u, base .. u.DIR_SEP .. fd.cFileName, mask, callback, option)\r\n  end",
    "type": "function"
  }, {
    "id": 395,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 396,
    "text": "function(fd)\r\n    local isdir = TestBit(fd.dwFileAttributes, CONST.FILE_ATTRIBUTE_DIRECTORY)\r\n    if isdir then if option.skipdirs then return end\r\n    else if option.skipfiles then return end end\r\n\r\n    fd = u.WIN32_FIND_DATA2TABLE(fd)\r\n    if isdir and option.skipdots ~= false and isdots(fd.cFileName) then\r\n      return\r\n    end\r\n\r\n    return callback(base, fd.cFileName, fd)\r\n  end",
    "type": "function"
  }, {
    "id": 397,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 398,
    "text": "function(base, name, fd)\r\n    return callback(base .. u.DIR_SEP .. name, AttributesToStat2(fd))\r\n  end",
    "type": "function"
  }, {
    "id": 399,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 400,
    "text": "function(u, base, name, fd) return base..u.DIR_SEP..name                  end",
    "type": "function"
  }, {
    "id": 401,
    "text": "function(u, base, name, fd) return base                                   end",
    "type": "function"
  }, {
    "id": 402,
    "text": "function(u, base, name, fd) return name                                   end",
    "type": "function"
  }, {
    "id": 403,
    "text": "function(u, base, name, fd) return FlagsToMode(fd.dwFileAttributes)       end",
    "type": "function"
  }, {
    "id": 404,
    "text": "function(u, base, name, fd) return AttributesToStat2(fd)                  end",
    "type": "function"
  }, {
    "id": 405,
    "text": "function(u, base, name, fd) return LargeToNumber  ( fd.nFileSize[1],        fd.nFileSize[2]        ) end",
    "type": "function"
  }, {
    "id": 406,
    "text": "function(u, base, name, fd) return FileTimeToTimeT( fd.ftLastWriteTime[1],  fd.ftLastWriteTime[2]  ) end",
    "type": "function"
  }, {
    "id": 407,
    "text": "function(u, base, name, fd) return FileTimeToTimeT( fd.ftCreationTime[1],   fd.ftCreationTime[2]   ) end",
    "type": "function"
  }, {
    "id": 408,
    "text": "function(u, base, name, fd) return FileTimeToTimeT( fd.ftLastAccessTime[1], fd.ftLastAccessTime[2] ) end",
    "type": "function"
  }, {
    "id": 409,
    "text": "function(...)\r\n    local res = {n = #t}\r\n    for i, f in ipairs(t) do\r\n      local ok, err = f(...)\r\n      if ok == nil then return nil, err end\r\n      table.insert(res, ok)\r\n    end\r\n    return res\r\n  end",
    "type": "function"
  }, {
    "id": 410,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 411,
    "text": "function()\r\n      foreach_impl(u, base, mask, cb, option)\r\n    end",
    "type": "function"
  }, {
    "id": 412,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 413,
    "text": "function()\r\n      local status, params = coroutine.resume(co)\r\n      if status then if params then return unpack(params, 1, params.n) end\r\n      else error(params, 2) end\r\n    end",
    "type": "function"
  }, {
    "id": 414,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 415,
    "text": "function(...) return each_impl(IMPL, ...) end",
    "type": "function"
  }, {
    "id": 416,
    "text": "local function testpath(pth,p1,p2,p3)\r\n  local dir,rest = path.splitpath(pth)\r\n  local name,ext = path.splitext(rest)\r\n  assert_equal(p1, dir )\r\n  assert_equal(p2, name)\r\n  assert_equal(p3, ext )\r\nend",
    "type": "function"
  }, {
    "id": 417,
    "text": "find",
    "type": "global function"
  }, {
    "id": 418,
    "text": "cdef",
    "type": "global function"
  }, {
    "id": 419,
    "text": "load",
    "type": "global function"
  }, {
    "id": 420,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 421,
    "text": "GetTempPath",
    "type": "global function"
  }, {
    "id": 422,
    "text": "CreateFile",
    "type": "global function"
  }, {
    "id": 423,
    "text": "resume",
    "type": "global function"
  }, {
    "id": 424,
    "text": "match",
    "type": "global function"
  }, {
    "id": 425,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 426,
    "text": "mtime",
    "type": "global function"
  }, {
    "id": 427,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 428,
    "text": "attributes",
    "type": "global function"
  }, {
    "id": 429,
    "text": "yield",
    "type": "global function"
  }, {
    "id": 430,
    "text": "CreateDirectory",
    "type": "global function"
  }, {
    "id": 431,
    "text": "each",
    "type": "global function"
  }, {
    "id": 432,
    "text": "origin_cb",
    "type": "global function"
  }, {
    "id": 433,
    "text": "dir",
    "type": "global function"
  }, {
    "id": 434,
    "text": "band",
    "type": "global function"
  }, {
    "id": 435,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 436,
    "text": "type",
    "type": "global function"
  }, {
    "id": 437,
    "text": "FindClose",
    "type": "global function"
  }, {
    "id": 438,
    "text": "move",
    "type": "global function"
  }, {
    "id": 439,
    "text": "create_each",
    "type": "global function"
  }, {
    "id": 440,
    "text": "CopyFile",
    "type": "global function"
  }, {
    "id": 441,
    "text": "WIN32_FIND_DATA2TABLE",
    "type": "global function"
  }, {
    "id": 442,
    "text": "get_params",
    "type": "global function"
  }, {
    "id": 443,
    "text": "GetFileAttributesEx",
    "type": "global function"
  }, {
    "id": 444,
    "text": "touch",
    "type": "global function"
  }, {
    "id": 445,
    "text": "isdir",
    "type": "global function"
  }, {
    "id": 446,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 447,
    "text": "each_impl",
    "type": "global function"
  }, {
    "id": 448,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 449,
    "text": "rmdir",
    "type": "global function"
  }, {
    "id": 450,
    "text": "currentdir",
    "type": "global function"
  }, {
    "id": 451,
    "text": "DeleteFile",
    "type": "global function"
  }, {
    "id": 452,
    "text": "SetFileTime",
    "type": "global function"
  }, {
    "id": 453,
    "text": "time",
    "type": "global function"
  }, {
    "id": 454,
    "text": "islink",
    "type": "global function"
  }, {
    "id": 455,
    "text": "each_impl",
    "type": "global function"
  }, {
    "id": 456,
    "text": "FindFirstFile",
    "type": "global function"
  }, {
    "id": 457,
    "text": "ctime",
    "type": "global function"
  }, {
    "id": 458,
    "text": "GetCurrentDirectory",
    "type": "global function"
  }, {
    "id": 459,
    "text": "SetCurrentDirectory",
    "type": "global function"
  }, {
    "id": 460,
    "text": "tmpdir",
    "type": "global function"
  }, {
    "id": 461,
    "text": "filter",
    "type": "global function"
  }, {
    "id": 462,
    "text": "atime",
    "type": "global function"
  }, {
    "id": 463,
    "text": "exists",
    "type": "global function"
  }, {
    "id": 464,
    "text": "copy",
    "type": "global function"
  }, {
    "id": 465,
    "text": "FindNextFile",
    "type": "global function"
  }, {
    "id": 466,
    "text": "chdir",
    "type": "global function"
  }, {
    "id": 467,
    "text": "size",
    "type": "global function"
  }, {
    "id": 468,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 469,
    "text": "isfile",
    "type": "global function"
  }, {
    "id": 470,
    "text": "MoveFileEx",
    "type": "global function"
  }, {
    "id": 471,
    "text": "foreach",
    "type": "global function"
  }, {
    "id": 472,
    "text": "floor",
    "type": "global function"
  }, {
    "id": 473,
    "text": "error",
    "type": "global function"
  }, {
    "id": 474,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 475,
    "text": "attributes",
    "type": "global function"
  }, {
    "id": 476,
    "text": "create",
    "type": "global function"
  }, {
    "id": 477,
    "text": "mkdir",
    "type": "global function"
  }, {
    "id": 478,
    "text": "RemoveDirectory",
    "type": "global function"
  }, {
    "id": 479,
    "text": "v",
    "type": "global function"
  }, {
    "id": 480,
    "text": "require",
    "type": "global function"
  }, {
    "id": 481,
    "text": "flags",
    "type": "global function"
  }, {
    "id": 482,
    "text": "CloseHandle",
    "type": "global function"
  }, {
    "id": 483,
    "text": "",
    "type": "variable container"
  }, {
    "id": 484,
    "text": "",
    "type": "require container"
  }, {
    "id": 485,
    "text": "",
    "type": "local variable"
  }, {
    "id": 486,
    "text": "",
    "type": "local variable"
  }, {
    "id": 487,
    "text": "",
    "type": "local variable"
  }, {
    "id": 488,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 489,
    "text": "",
    "type": "interface container"
  }, {
    "id": 490,
    "text": "",
    "type": "interface"
  }, {
    "id": 491,
    "text": "",
    "type": "variable container"
  }, {
    "id": 492,
    "text": "",
    "type": "require container"
  }, {
    "id": 493,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 494,
    "text": "",
    "type": "interface container"
  }, {
    "id": 495,
    "text": "",
    "type": "interface"
  }, {
    "id": 496,
    "text": "",
    "type": "variable container"
  }, {
    "id": 497,
    "text": "",
    "type": "require container"
  }, {
    "id": 498,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 499,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 500,
    "text": "",
    "type": "interface container"
  }, {
    "id": 501,
    "text": "",
    "type": "interface"
  }, {
    "id": 502,
    "text": "",
    "type": "variable container"
  }, {
    "id": 503,
    "text": "",
    "type": "require container"
  }, {
    "id": 504,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 505,
    "text": "",
    "type": "interface container"
  }, {
    "id": 506,
    "text": "",
    "type": "interface"
  }, {
    "id": 507,
    "text": "",
    "type": "variable container"
  }, {
    "id": 508,
    "text": "",
    "type": "require container"
  }, {
    "id": 509,
    "text": "",
    "type": "local variable"
  }, {
    "id": 510,
    "text": "",
    "type": "local variable"
  }, {
    "id": 511,
    "text": "",
    "type": "local variable"
  }, {
    "id": 512,
    "text": "",
    "type": "local variable"
  }, {
    "id": 513,
    "text": "",
    "type": "local variable"
  }, {
    "id": 514,
    "text": "",
    "type": "local variable"
  }, {
    "id": 515,
    "text": "",
    "type": "local variable"
  }, {
    "id": 516,
    "text": "",
    "type": "local variable"
  }, {
    "id": 517,
    "text": "",
    "type": "local variable"
  }, {
    "id": 518,
    "text": "",
    "type": "local variable"
  }, {
    "id": 519,
    "text": "",
    "type": "local variable"
  }, {
    "id": 520,
    "text": "",
    "type": "local variable"
  }, {
    "id": 521,
    "text": "",
    "type": "local variable"
  }, {
    "id": 522,
    "text": "",
    "type": "local variable"
  }, {
    "id": 523,
    "text": "",
    "type": "local variable"
  }, {
    "id": 524,
    "text": "",
    "type": "local variable"
  }, {
    "id": 525,
    "text": "",
    "type": "local variable"
  }, {
    "id": 526,
    "text": "",
    "type": "local variable"
  }, {
    "id": 527,
    "text": "",
    "type": "local variable"
  }, {
    "id": 528,
    "text": "",
    "type": "local variable"
  }, {
    "id": 529,
    "text": "",
    "type": "local variable"
  }, {
    "id": 530,
    "text": "",
    "type": "local variable"
  }, {
    "id": 531,
    "text": "",
    "type": "local variable"
  }, {
    "id": 532,
    "text": "",
    "type": "local variable"
  }, {
    "id": 533,
    "text": "",
    "type": "local variable"
  }, {
    "id": 534,
    "text": "",
    "type": "local variable"
  }, {
    "id": 535,
    "text": "",
    "type": "local variable"
  }, {
    "id": 536,
    "text": "",
    "type": "local variable"
  }, {
    "id": 537,
    "text": "",
    "type": "local variable"
  }, {
    "id": 538,
    "text": "",
    "type": "local variable"
  }, {
    "id": 539,
    "text": "",
    "type": "local variable"
  }, {
    "id": 540,
    "text": "",
    "type": "local variable"
  }, {
    "id": 541,
    "text": "",
    "type": "local variable"
  }, {
    "id": 542,
    "text": "",
    "type": "local variable"
  }, {
    "id": 543,
    "text": "",
    "type": "local variable"
  }, {
    "id": 544,
    "text": "",
    "type": "local variable"
  }, {
    "id": 545,
    "text": "",
    "type": "local variable"
  }, {
    "id": 546,
    "text": "",
    "type": "local variable"
  }, {
    "id": 547,
    "text": "",
    "type": "local variable"
  }, {
    "id": 548,
    "text": "",
    "type": "local variable"
  }, {
    "id": 549,
    "text": "",
    "type": "local variable"
  }, {
    "id": 550,
    "text": "",
    "type": "local variable"
  }, {
    "id": 551,
    "text": "",
    "type": "local variable"
  }, {
    "id": 552,
    "text": "",
    "type": "local variable"
  }, {
    "id": 553,
    "text": "",
    "type": "local variable"
  }, {
    "id": 554,
    "text": "",
    "type": "local variable"
  }, {
    "id": 555,
    "text": "",
    "type": "local variable"
  }, {
    "id": 556,
    "text": "",
    "type": "local variable"
  }, {
    "id": 557,
    "text": "",
    "type": "local variable"
  }, {
    "id": 558,
    "text": "",
    "type": "local variable"
  }, {
    "id": 559,
    "text": "",
    "type": "local variable"
  }, {
    "id": 560,
    "text": "",
    "type": "local variable"
  }, {
    "id": 561,
    "text": "",
    "type": "local variable"
  }, {
    "id": 562,
    "text": "",
    "type": "local variable"
  }, {
    "id": 563,
    "text": "",
    "type": "local variable"
  }, {
    "id": 564,
    "text": "",
    "type": "local variable"
  }, {
    "id": 565,
    "text": "",
    "type": "local variable"
  }, {
    "id": 566,
    "text": "",
    "type": "local variable"
  }, {
    "id": 567,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 568,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 569,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 570,
    "text": "",
    "type": "interface container"
  }, {
    "id": 571,
    "text": "",
    "type": "interface"
  }, {
    "id": 572,
    "text": "",
    "type": "interface"
  }, {
    "id": 573,
    "text": "",
    "type": "variable container"
  }, {
    "id": 574,
    "text": "",
    "type": "require container"
  }, {
    "id": 575,
    "text": "",
    "type": "local variable"
  }, {
    "id": 576,
    "text": "",
    "type": "local variable"
  }, {
    "id": 577,
    "text": "",
    "type": "local variable"
  }, {
    "id": 578,
    "text": "",
    "type": "local variable"
  }, {
    "id": 579,
    "text": "",
    "type": "local variable"
  }, {
    "id": 580,
    "text": "",
    "type": "local variable"
  }, {
    "id": 581,
    "text": "",
    "type": "local variable"
  }, {
    "id": 582,
    "text": "",
    "type": "local variable"
  }, {
    "id": 583,
    "text": "",
    "type": "local variable"
  }, {
    "id": 584,
    "text": "",
    "type": "local variable"
  }, {
    "id": 585,
    "text": "",
    "type": "local variable"
  }, {
    "id": 586,
    "text": "",
    "type": "local variable"
  }, {
    "id": 587,
    "text": "",
    "type": "local variable"
  }, {
    "id": 588,
    "text": "",
    "type": "local variable"
  }, {
    "id": 589,
    "text": "",
    "type": "local variable"
  }, {
    "id": 590,
    "text": "",
    "type": "local variable"
  }, {
    "id": 591,
    "text": "",
    "type": "local variable"
  }, {
    "id": 592,
    "text": "",
    "type": "local variable"
  }, {
    "id": 593,
    "text": "",
    "type": "local variable"
  }, {
    "id": 594,
    "text": "",
    "type": "local variable"
  }, {
    "id": 595,
    "text": "",
    "type": "local variable"
  }, {
    "id": 596,
    "text": "",
    "type": "local variable"
  }, {
    "id": 597,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 598,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 599,
    "text": "",
    "type": "interface container"
  }, {
    "id": 600,
    "text": "",
    "type": "interface"
  }, {
    "id": 601,
    "text": "",
    "type": "interface"
  }, {
    "id": 602,
    "text": "",
    "type": "variable container"
  }, {
    "id": 603,
    "text": "",
    "type": "require container"
  }, {
    "id": 604,
    "text": "",
    "type": "local variable"
  }, {
    "id": 605,
    "text": "",
    "type": "n/a"
  }, {
    "id": 606,
    "text": "",
    "type": "local variable"
  }, {
    "id": 607,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 608,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 609,
    "text": "",
    "type": "number"
  }, {
    "id": 610,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 611,
    "text": "",
    "type": "number"
  }, {
    "id": 612,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 613,
    "text": "",
    "type": "number"
  }, {
    "id": 614,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 615,
    "text": "",
    "type": "number"
  }, {
    "id": 616,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 617,
    "text": "",
    "type": "number"
  }, {
    "id": 618,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 619,
    "text": "",
    "type": "number"
  }, {
    "id": 620,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 621,
    "text": "",
    "type": "number"
  }, {
    "id": 622,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 623,
    "text": "",
    "type": "number"
  }, {
    "id": 624,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 625,
    "text": "",
    "type": "number"
  }, {
    "id": 626,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 627,
    "text": "",
    "type": "number"
  }, {
    "id": 628,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 629,
    "text": "",
    "type": "number"
  }, {
    "id": 630,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 631,
    "text": "",
    "type": "number"
  }, {
    "id": 632,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 633,
    "text": "",
    "type": "number"
  }, {
    "id": 634,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 635,
    "text": "",
    "type": "number"
  }, {
    "id": 636,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 637,
    "text": "",
    "type": "number"
  }, {
    "id": 638,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 639,
    "text": "",
    "type": "number"
  }, {
    "id": 640,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 641,
    "text": "",
    "type": "number"
  }, {
    "id": 642,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 643,
    "text": "",
    "type": "number"
  }, {
    "id": 644,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 645,
    "text": "",
    "type": "number"
  }, {
    "id": 646,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 647,
    "text": "",
    "type": "number"
  }, {
    "id": 648,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 649,
    "text": "",
    "type": "number"
  }, {
    "id": 650,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 651,
    "text": "",
    "type": "number"
  }, {
    "id": 652,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 653,
    "text": "",
    "type": "number"
  }, {
    "id": 654,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 655,
    "text": "",
    "type": "number"
  }, {
    "id": 656,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 657,
    "text": "",
    "type": "number"
  }, {
    "id": 658,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 659,
    "text": "",
    "type": "number"
  }, {
    "id": 660,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 661,
    "text": "",
    "type": "number"
  }, {
    "id": 662,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 663,
    "text": "",
    "type": "number"
  }, {
    "id": 664,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 665,
    "text": "",
    "type": "number"
  }, {
    "id": 666,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 667,
    "text": "",
    "type": "number"
  }, {
    "id": 668,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 669,
    "text": "",
    "type": "number"
  }, {
    "id": 670,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 671,
    "text": "",
    "type": "number"
  }, {
    "id": 672,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 673,
    "text": "",
    "type": "number"
  }, {
    "id": 674,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 675,
    "text": "",
    "type": "number"
  }, {
    "id": 676,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 677,
    "text": "",
    "type": "number"
  }, {
    "id": 678,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 679,
    "text": "",
    "type": "number"
  }, {
    "id": 680,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 681,
    "text": "",
    "type": "number"
  }, {
    "id": 682,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 683,
    "text": "",
    "type": "number"
  }, {
    "id": 684,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 685,
    "text": "",
    "type": "number"
  }, {
    "id": 686,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 687,
    "text": "",
    "type": "number"
  }, {
    "id": 688,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 689,
    "text": "",
    "type": "number"
  }, {
    "id": 690,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 691,
    "text": "",
    "type": "number"
  }, {
    "id": 692,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 693,
    "text": "",
    "type": "number"
  }, {
    "id": 694,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 695,
    "text": "",
    "type": "number"
  }, {
    "id": 696,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 697,
    "text": "",
    "type": "number"
  }, {
    "id": 698,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 699,
    "text": "",
    "type": "number"
  }, {
    "id": 700,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 701,
    "text": "",
    "type": "number"
  }, {
    "id": 702,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 703,
    "text": "",
    "type": "number"
  }, {
    "id": 704,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 705,
    "text": "",
    "type": "number"
  }, {
    "id": 706,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 707,
    "text": "",
    "type": "number"
  }, {
    "id": 708,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 709,
    "text": "",
    "type": "number"
  }, {
    "id": 710,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 711,
    "text": "",
    "type": "number"
  }, {
    "id": 712,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 713,
    "text": "",
    "type": "number"
  }, {
    "id": 714,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 715,
    "text": "",
    "type": "number"
  }, {
    "id": 716,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 717,
    "text": "",
    "type": "number"
  }, {
    "id": 718,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 719,
    "text": "",
    "type": "number"
  }, {
    "id": 720,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 721,
    "text": "",
    "type": "number"
  }, {
    "id": 722,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 723,
    "text": "",
    "type": "number"
  }, {
    "id": 724,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 725,
    "text": "",
    "type": "number"
  }, {
    "id": 726,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 727,
    "text": "",
    "type": "number"
  }, {
    "id": 728,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 729,
    "text": "",
    "type": "number"
  }, {
    "id": 730,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 731,
    "text": "",
    "type": "number"
  }, {
    "id": 732,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 733,
    "text": "",
    "type": "number"
  }, {
    "id": 734,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 735,
    "text": "",
    "type": "number"
  }, {
    "id": 736,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 737,
    "text": "",
    "type": "number"
  }, {
    "id": 738,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 739,
    "text": "",
    "type": "number"
  }, {
    "id": 740,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 741,
    "text": "",
    "type": "number"
  }, {
    "id": 742,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 743,
    "text": "",
    "type": "number"
  }, {
    "id": 744,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 745,
    "text": "",
    "type": "number"
  }, {
    "id": 746,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 747,
    "text": "",
    "type": "number"
  }, {
    "id": 748,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 749,
    "text": "",
    "type": "number"
  }, {
    "id": 750,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 751,
    "text": "",
    "type": "number"
  }, {
    "id": 752,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 753,
    "text": "",
    "type": "number"
  }, {
    "id": 754,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 755,
    "text": "",
    "type": "number"
  }, {
    "id": 756,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 757,
    "text": "",
    "type": "number"
  }, {
    "id": 758,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 759,
    "text": "",
    "type": "number"
  }, {
    "id": 760,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 761,
    "text": "",
    "type": "number"
  }, {
    "id": 762,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 763,
    "text": "",
    "type": "number"
  }, {
    "id": 764,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 765,
    "text": "",
    "type": "number"
  }, {
    "id": 766,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 767,
    "text": "",
    "type": "number"
  }, {
    "id": 768,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 769,
    "text": "",
    "type": "number"
  }, {
    "id": 770,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 771,
    "text": "",
    "type": "number"
  }, {
    "id": 772,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 773,
    "text": "",
    "type": "number"
  }, {
    "id": 774,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 775,
    "text": "",
    "type": "number"
  }, {
    "id": 776,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 777,
    "text": "",
    "type": "number"
  }, {
    "id": 778,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 779,
    "text": "",
    "type": "number"
  }, {
    "id": 780,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 781,
    "text": "",
    "type": "number"
  }, {
    "id": 782,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 783,
    "text": "",
    "type": "number"
  }, {
    "id": 784,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 785,
    "text": "",
    "type": "number"
  }, {
    "id": 786,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 787,
    "text": "",
    "type": "number"
  }, {
    "id": 788,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 789,
    "text": "",
    "type": "number"
  }, {
    "id": 790,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 791,
    "text": "",
    "type": "number"
  }, {
    "id": 792,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 793,
    "text": "",
    "type": "number"
  }, {
    "id": 794,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 795,
    "text": "",
    "type": "number"
  }, {
    "id": 796,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 797,
    "text": "",
    "type": "number"
  }, {
    "id": 798,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 799,
    "text": "",
    "type": "number"
  }, {
    "id": 800,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 801,
    "text": "",
    "type": "number"
  }, {
    "id": 802,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 803,
    "text": "",
    "type": "number"
  }, {
    "id": 804,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 805,
    "text": "",
    "type": "number"
  }, {
    "id": 806,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 807,
    "text": "",
    "type": "number"
  }, {
    "id": 808,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 809,
    "text": "",
    "type": "number"
  }, {
    "id": 810,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 811,
    "text": "",
    "type": "number"
  }, {
    "id": 812,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 813,
    "text": "",
    "type": "number"
  }, {
    "id": 814,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 815,
    "text": "",
    "type": "number"
  }, {
    "id": 816,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 817,
    "text": "",
    "type": "number"
  }, {
    "id": 818,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 819,
    "text": "",
    "type": "number"
  }, {
    "id": 820,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 821,
    "text": "",
    "type": "number"
  }, {
    "id": 822,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 823,
    "text": "",
    "type": "number"
  }, {
    "id": 824,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 825,
    "text": "",
    "type": "number"
  }, {
    "id": 826,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 827,
    "text": "",
    "type": "number"
  }, {
    "id": 828,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 829,
    "text": "",
    "type": "number"
  }, {
    "id": 830,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 831,
    "text": "",
    "type": "number"
  }, {
    "id": 832,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 833,
    "text": "",
    "type": "number"
  }, {
    "id": 834,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 835,
    "text": "",
    "type": "number"
  }, {
    "id": 836,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 837,
    "text": "",
    "type": "number"
  }, {
    "id": 838,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 839,
    "text": "",
    "type": "number"
  }, {
    "id": 840,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 841,
    "text": "",
    "type": "number"
  }, {
    "id": 842,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 843,
    "text": "",
    "type": "number"
  }, {
    "id": 844,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 845,
    "text": "",
    "type": "number"
  }, {
    "id": 846,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 847,
    "text": "",
    "type": "number"
  }, {
    "id": 848,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 849,
    "text": "",
    "type": "number"
  }, {
    "id": 850,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 851,
    "text": "",
    "type": "number"
  }, {
    "id": 852,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 853,
    "text": "",
    "type": "number"
  }, {
    "id": 854,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 855,
    "text": "",
    "type": "number"
  }, {
    "id": 856,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 857,
    "text": "",
    "type": "number"
  }, {
    "id": 858,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 859,
    "text": "",
    "type": "number"
  }, {
    "id": 860,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 861,
    "text": "",
    "type": "number"
  }, {
    "id": 862,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 863,
    "text": "",
    "type": "number"
  }, {
    "id": 864,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 865,
    "text": "",
    "type": "number"
  }, {
    "id": 866,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 867,
    "text": "",
    "type": "number"
  }, {
    "id": 868,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 869,
    "text": "",
    "type": "number"
  }, {
    "id": 870,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 871,
    "text": "",
    "type": "number"
  }, {
    "id": 872,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 873,
    "text": "",
    "type": "number"
  }, {
    "id": 874,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 875,
    "text": "",
    "type": "number"
  }, {
    "id": 876,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 877,
    "text": "",
    "type": "number"
  }, {
    "id": 878,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 879,
    "text": "",
    "type": "number"
  }, {
    "id": 880,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 881,
    "text": "",
    "type": "number"
  }, {
    "id": 882,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 883,
    "text": "",
    "type": "number"
  }, {
    "id": 884,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 885,
    "text": "",
    "type": "number"
  }, {
    "id": 886,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 887,
    "text": "",
    "type": "number"
  }, {
    "id": 888,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 889,
    "text": "",
    "type": "number"
  }, {
    "id": 890,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 891,
    "text": "",
    "type": "number"
  }, {
    "id": 892,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 893,
    "text": "",
    "type": "number"
  }, {
    "id": 894,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 895,
    "text": "",
    "type": "number"
  }, {
    "id": 896,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 897,
    "text": "",
    "type": "number"
  }, {
    "id": 898,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 899,
    "text": "",
    "type": "number"
  }, {
    "id": 900,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 901,
    "text": "",
    "type": "number"
  }, {
    "id": 902,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 903,
    "text": "",
    "type": "number"
  }, {
    "id": 904,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 905,
    "text": "",
    "type": "number"
  }, {
    "id": 906,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 907,
    "text": "",
    "type": "number"
  }, {
    "id": 908,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 909,
    "text": "",
    "type": "number"
  }, {
    "id": 910,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 911,
    "text": "",
    "type": "number"
  }, {
    "id": 912,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 913,
    "text": "",
    "type": "number"
  }, {
    "id": 914,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 915,
    "text": "",
    "type": "number"
  }, {
    "id": 916,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 917,
    "text": "",
    "type": "number"
  }, {
    "id": 918,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 919,
    "text": "",
    "type": "number"
  }, {
    "id": 920,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 921,
    "text": "",
    "type": "number"
  }, {
    "id": 922,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 923,
    "text": "",
    "type": "number"
  }, {
    "id": 924,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 925,
    "text": "",
    "type": "number"
  }, {
    "id": 926,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 927,
    "text": "",
    "type": "number"
  }, {
    "id": 928,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 929,
    "text": "",
    "type": "number"
  }, {
    "id": 930,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 931,
    "text": "",
    "type": "number"
  }, {
    "id": 932,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 933,
    "text": "",
    "type": "number"
  }, {
    "id": 934,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 935,
    "text": "",
    "type": "number"
  }, {
    "id": 936,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 937,
    "text": "",
    "type": "number"
  }, {
    "id": 938,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 939,
    "text": "",
    "type": "number"
  }, {
    "id": 940,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 941,
    "text": "",
    "type": "number"
  }, {
    "id": 942,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 943,
    "text": "",
    "type": "number"
  }, {
    "id": 944,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 945,
    "text": "",
    "type": "number"
  }, {
    "id": 946,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 947,
    "text": "",
    "type": "number"
  }, {
    "id": 948,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 949,
    "text": "",
    "type": "number"
  }, {
    "id": 950,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 951,
    "text": "",
    "type": "number"
  }, {
    "id": 952,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 953,
    "text": "",
    "type": "number"
  }, {
    "id": 954,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 955,
    "text": "",
    "type": "number"
  }, {
    "id": 956,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 957,
    "text": "",
    "type": "number"
  }, {
    "id": 958,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 959,
    "text": "",
    "type": "number"
  }, {
    "id": 960,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 961,
    "text": "",
    "type": "number"
  }, {
    "id": 962,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 963,
    "text": "",
    "type": "number"
  }, {
    "id": 964,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 965,
    "text": "",
    "type": "number"
  }, {
    "id": 966,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 967,
    "text": "",
    "type": "number"
  }, {
    "id": 968,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 969,
    "text": "",
    "type": "number"
  }, {
    "id": 970,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 971,
    "text": "",
    "type": "number"
  }, {
    "id": 972,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 973,
    "text": "",
    "type": "number"
  }, {
    "id": 974,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 975,
    "text": "",
    "type": "number"
  }, {
    "id": 976,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 977,
    "text": "",
    "type": "number"
  }, {
    "id": 978,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 979,
    "text": "",
    "type": "number"
  }, {
    "id": 980,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 981,
    "text": "",
    "type": "number"
  }, {
    "id": 982,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 983,
    "text": "",
    "type": "number"
  }, {
    "id": 984,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 985,
    "text": "",
    "type": "number"
  }, {
    "id": 986,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 987,
    "text": "",
    "type": "number"
  }, {
    "id": 988,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 989,
    "text": "",
    "type": "number"
  }, {
    "id": 990,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 991,
    "text": "",
    "type": "number"
  }, {
    "id": 992,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 993,
    "text": "",
    "type": "number"
  }, {
    "id": 994,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 995,
    "text": "",
    "type": "number"
  }, {
    "id": 996,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 997,
    "text": "",
    "type": "number"
  }, {
    "id": 998,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 999,
    "text": "",
    "type": "number"
  }, {
    "id": 1000,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1001,
    "text": "",
    "type": "number"
  }, {
    "id": 1002,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1003,
    "text": "",
    "type": "number"
  }, {
    "id": 1004,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1005,
    "text": "",
    "type": "number"
  }, {
    "id": 1006,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1007,
    "text": "",
    "type": "number"
  }, {
    "id": 1008,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1009,
    "text": "",
    "type": "number"
  }, {
    "id": 1010,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1011,
    "text": "",
    "type": "number"
  }, {
    "id": 1012,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1013,
    "text": "",
    "type": "number"
  }, {
    "id": 1014,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1015,
    "text": "",
    "type": "number"
  }, {
    "id": 1016,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1017,
    "text": "",
    "type": "number"
  }, {
    "id": 1018,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1019,
    "text": "",
    "type": "number"
  }, {
    "id": 1020,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1021,
    "text": "",
    "type": "number"
  }, {
    "id": 1022,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1023,
    "text": "",
    "type": "number"
  }, {
    "id": 1024,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1025,
    "text": "",
    "type": "number"
  }, {
    "id": 1026,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1027,
    "text": "",
    "type": "number"
  }, {
    "id": 1028,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1029,
    "text": "",
    "type": "number"
  }, {
    "id": 1030,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1031,
    "text": "",
    "type": "number"
  }, {
    "id": 1032,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1033,
    "text": "",
    "type": "number"
  }, {
    "id": 1034,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1035,
    "text": "",
    "type": "number"
  }, {
    "id": 1036,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1037,
    "text": "",
    "type": "number"
  }, {
    "id": 1038,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1039,
    "text": "",
    "type": "number"
  }, {
    "id": 1040,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1041,
    "text": "",
    "type": "number"
  }, {
    "id": 1042,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1043,
    "text": "",
    "type": "number"
  }, {
    "id": 1044,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1045,
    "text": "",
    "type": "number"
  }, {
    "id": 1046,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1047,
    "text": "",
    "type": "number"
  }, {
    "id": 1048,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1049,
    "text": "",
    "type": "number"
  }, {
    "id": 1050,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1051,
    "text": "",
    "type": "number"
  }, {
    "id": 1052,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1053,
    "text": "",
    "type": "number"
  }, {
    "id": 1054,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1055,
    "text": "",
    "type": "number"
  }, {
    "id": 1056,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1057,
    "text": "",
    "type": "number"
  }, {
    "id": 1058,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1059,
    "text": "",
    "type": "number"
  }, {
    "id": 1060,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1061,
    "text": "",
    "type": "number"
  }, {
    "id": 1062,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1063,
    "text": "",
    "type": "number"
  }, {
    "id": 1064,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1065,
    "text": "",
    "type": "number"
  }, {
    "id": 1066,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1067,
    "text": "",
    "type": "number"
  }, {
    "id": 1068,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1069,
    "text": "",
    "type": "number"
  }, {
    "id": 1070,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1071,
    "text": "",
    "type": "number"
  }, {
    "id": 1072,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1073,
    "text": "",
    "type": "number"
  }, {
    "id": 1074,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1075,
    "text": "",
    "type": "number"
  }, {
    "id": 1076,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1077,
    "text": "",
    "type": "number"
  }, {
    "id": 1078,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1079,
    "text": "",
    "type": "number"
  }, {
    "id": 1080,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1081,
    "text": "",
    "type": "number"
  }, {
    "id": 1082,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1083,
    "text": "",
    "type": "number"
  }, {
    "id": 1084,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1085,
    "text": "",
    "type": "number"
  }, {
    "id": 1086,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1087,
    "text": "",
    "type": "number"
  }, {
    "id": 1088,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1089,
    "text": "",
    "type": "number"
  }, {
    "id": 1090,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1091,
    "text": "",
    "type": "number"
  }, {
    "id": 1092,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1093,
    "text": "",
    "type": "number"
  }, {
    "id": 1094,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1095,
    "text": "",
    "type": "number"
  }, {
    "id": 1096,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1097,
    "text": "",
    "type": "number"
  }, {
    "id": 1098,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1099,
    "text": "",
    "type": "number"
  }, {
    "id": 1100,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1101,
    "text": "",
    "type": "number"
  }, {
    "id": 1102,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1103,
    "text": "",
    "type": "number"
  }, {
    "id": 1104,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1105,
    "text": "",
    "type": "number"
  }, {
    "id": 1106,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1107,
    "text": "",
    "type": "number"
  }, {
    "id": 1108,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1109,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 1110,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1111,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1112,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 1113,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1114,
    "text": "",
    "type": "function"
  }, {
    "id": 1115,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1116,
    "text": "",
    "type": "function"
  }, {
    "id": 1117,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1118,
    "text": "",
    "type": "function"
  }, {
    "id": 1119,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1120,
    "text": "",
    "type": "function"
  }, {
    "id": 1121,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1122,
    "text": "",
    "type": "function"
  }, {
    "id": 1123,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1124,
    "text": "",
    "type": "function"
  }, {
    "id": 1125,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1126,
    "text": "",
    "type": "function"
  }, {
    "id": 1127,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1128,
    "text": "",
    "type": "function"
  }, {
    "id": 1129,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 1130,
    "text": "",
    "type": "function"
  }, {
    "id": 1131,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1132,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 1133,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1134,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1135,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 1136,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 1137,
    "text": "fs)",
    "type": "module"
  }, {
    "id": 1138,
    "text": "",
    "type": "interface container"
  }, {
    "id": 1139,
    "text": "",
    "type": "interface"
  }, {
    "id": 1140,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 1141,
    "text": "",
    "type": "require local variable"
  } ]
}