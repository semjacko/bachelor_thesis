{
  "_filename": "test.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-path/test/test.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 8
  }, {
    "from": 4,
    "label": "has",
    "to": 9
  }, {
    "from": 4,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 4,
    "label": "has",
    "to": 12
  }, {
    "from": 4,
    "label": "has",
    "to": 9
  }, {
    "from": 4,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 8
  }, {
    "from": 14,
    "label": "has",
    "to": 9
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 12
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 9
  }, {
    "from": 14,
    "label": "has",
    "to": 9
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 9
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 21,
    "label": "has",
    "to": 9
  }, {
    "from": 21,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 30
  }, {
    "from": 26,
    "label": "has",
    "to": 31
  }, {
    "from": 26,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 33,
    "label": "has",
    "to": 37
  }, {
    "from": 33,
    "label": "has",
    "to": 38
  }, {
    "from": 33,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 40,
    "label": "has",
    "to": 44
  }, {
    "from": 40,
    "label": "has",
    "to": 45
  }, {
    "from": 40,
    "label": "has",
    "to": 46
  }, {
    "from": 40,
    "label": "has",
    "to": 47
  }, {
    "from": 40,
    "label": "has",
    "to": 48
  }, {
    "from": 40,
    "label": "has",
    "to": 49
  }, {
    "from": 40,
    "label": "has",
    "to": 50
  }, {
    "from": 40,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 52,
    "label": "has",
    "to": 56
  }, {
    "from": 52,
    "label": "has",
    "to": 57
  }, {
    "from": 52,
    "label": "has",
    "to": 58
  }, {
    "from": 52,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 61,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 61,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 63
  }, {
    "from": 61,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 65
  }, {
    "from": 60,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 69,
    "label": "has",
    "to": 73
  }, {
    "from": 69,
    "label": "has",
    "to": 74
  }, {
    "from": 69,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 76,
    "label": "has",
    "to": 79
  }, {
    "from": 76,
    "label": "has",
    "to": 80
  }, {
    "from": 76,
    "label": "has",
    "to": 81
  }, {
    "from": 76,
    "label": "has",
    "to": 82
  }, {
    "from": 76,
    "label": "has",
    "to": 83
  }, {
    "from": 76,
    "label": "has",
    "to": 84
  }, {
    "from": 76,
    "label": "has",
    "to": 85
  }, {
    "from": 76,
    "label": "has",
    "to": 86
  }, {
    "from": 76,
    "label": "has",
    "to": 87
  }, {
    "from": 76,
    "label": "has",
    "to": 84
  }, {
    "from": 76,
    "label": "has",
    "to": 88
  }, {
    "from": 76,
    "label": "has",
    "to": 89
  }, {
    "from": 76,
    "label": "has",
    "to": 90
  }, {
    "from": 76,
    "label": "has",
    "to": 91
  }, {
    "from": 76,
    "label": "has",
    "to": 92
  }, {
    "from": 76,
    "label": "has",
    "to": 93
  }, {
    "from": 76,
    "label": "has",
    "to": 94
  }, {
    "from": 76,
    "label": "has",
    "to": 91
  }, {
    "from": 76,
    "label": "has",
    "to": 95
  }, {
    "from": 76,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 97,
    "label": "has",
    "to": 100
  }, {
    "from": 97,
    "label": "has",
    "to": 101
  }, {
    "from": 97,
    "label": "has",
    "to": 102
  }, {
    "from": 97,
    "label": "has",
    "to": 103
  }, {
    "from": 97,
    "label": "has",
    "to": 104
  }, {
    "from": 97,
    "label": "has",
    "to": 105
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 106,
    "label": "has",
    "to": 108
  }, {
    "from": 106,
    "label": "has",
    "to": 109
  }, {
    "from": 106,
    "label": "has",
    "to": 110
  }, {
    "from": 106,
    "label": "has",
    "to": 111
  }, {
    "from": 106,
    "label": "has",
    "to": 112
  }, {
    "from": 106,
    "label": "has",
    "to": 113
  }, {
    "from": 106,
    "label": "has",
    "to": 114
  }, {
    "from": 106,
    "label": "has",
    "to": 115
  }, {
    "from": 106,
    "label": "has",
    "to": 116
  }, {
    "from": 106,
    "label": "has",
    "to": 117
  }, {
    "from": 106,
    "label": "has",
    "to": 118
  }, {
    "from": 106,
    "label": "has",
    "to": 119
  }, {
    "from": 106,
    "label": "has",
    "to": 120
  }, {
    "from": 106,
    "label": "has",
    "to": 121
  }, {
    "from": 106,
    "label": "has",
    "to": 122
  }, {
    "from": 106,
    "label": "has",
    "to": 123
  }, {
    "from": 106,
    "label": "has",
    "to": 124
  }, {
    "from": 106,
    "label": "has",
    "to": 125
  }, {
    "from": 106,
    "label": "has",
    "to": 126
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 127,
    "label": "has",
    "to": 129
  }, {
    "from": 127,
    "label": "has",
    "to": 130
  }, {
    "from": 127,
    "label": "has",
    "to": 131
  }, {
    "from": 127,
    "label": "has",
    "to": 132
  }, {
    "from": 127,
    "label": "has",
    "to": 133
  }, {
    "from": 127,
    "label": "has",
    "to": 134
  }, {
    "from": 127,
    "label": "has",
    "to": 135
  }, {
    "from": 127,
    "label": "has",
    "to": 136
  }, {
    "from": 127,
    "label": "has",
    "to": 137
  }, {
    "from": 127,
    "label": "has",
    "to": 138
  }, {
    "from": 127,
    "label": "has",
    "to": 139
  }, {
    "from": 127,
    "label": "has",
    "to": 140
  }, {
    "from": 127,
    "label": "has",
    "to": 141
  }, {
    "from": 127,
    "label": "has",
    "to": 142
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 143,
    "label": "has",
    "to": 145
  }, {
    "from": 143,
    "label": "has",
    "to": 146
  }, {
    "from": 143,
    "label": "has",
    "to": 147
  }, {
    "from": 143,
    "label": "has",
    "to": 148
  }, {
    "from": 143,
    "label": "has",
    "to": 149
  }, {
    "from": 143,
    "label": "has",
    "to": 150
  }, {
    "from": 143,
    "label": "has",
    "to": 151
  }, {
    "from": 143,
    "label": "has",
    "to": 152
  }, {
    "from": 143,
    "label": "has",
    "to": 153
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 154,
    "label": "has",
    "to": 156
  }, {
    "from": 154,
    "label": "has",
    "to": 157
  }, {
    "from": 154,
    "label": "has",
    "to": 158
  }, {
    "from": 154,
    "label": "has",
    "to": 159
  }, {
    "from": 160,
    "label": "has",
    "to": 161
  }, {
    "from": 160,
    "label": "has",
    "to": 162
  }, {
    "from": 160,
    "label": "has",
    "to": 163
  }, {
    "from": 160,
    "label": "has",
    "to": 164
  }, {
    "from": 160,
    "label": "has",
    "to": 165
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 160,
    "label": "has",
    "to": 167
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 160,
    "label": "has",
    "to": 169
  }, {
    "from": 170,
    "label": "has",
    "to": 171
  }, {
    "from": 170,
    "label": "has",
    "to": 172
  }, {
    "from": 170,
    "label": "has",
    "to": 173
  }, {
    "from": 170,
    "label": "has",
    "to": 174
  }, {
    "from": 175,
    "label": "has",
    "to": 176
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 176,
    "label": "has",
    "to": 172
  }, {
    "from": 176,
    "label": "has",
    "to": 178
  }, {
    "from": 176,
    "label": "has",
    "to": 179
  }, {
    "from": 175,
    "label": "has",
    "to": 180
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 181,
    "label": "has",
    "to": 183
  }, {
    "from": 181,
    "label": "has",
    "to": 184
  }, {
    "from": 181,
    "label": "has",
    "to": 185
  }, {
    "from": 181,
    "label": "has",
    "to": 186
  }, {
    "from": 187,
    "label": "has",
    "to": 188
  }, {
    "from": 187,
    "label": "has",
    "to": 189
  }, {
    "from": 187,
    "label": "has",
    "to": 190
  }, {
    "from": 191,
    "label": "has",
    "to": 192
  }, {
    "from": 191,
    "label": "has",
    "to": 193
  }, {
    "from": 191,
    "label": "has",
    "to": 194
  }, {
    "from": 191,
    "label": "has",
    "to": 195
  }, {
    "from": 191,
    "label": "has",
    "to": 196
  }, {
    "from": 197,
    "label": "has",
    "to": 198
  }, {
    "from": 197,
    "label": "has",
    "to": 193
  }, {
    "from": 197,
    "label": "has",
    "to": 194
  }, {
    "from": 197,
    "label": "has",
    "to": 195
  }, {
    "from": 197,
    "label": "has",
    "to": 199
  }, {
    "from": 200,
    "label": "has",
    "to": 201
  }, {
    "from": 200,
    "label": "has",
    "to": 202
  }, {
    "from": 200,
    "label": "has",
    "to": 203
  }, {
    "from": 200,
    "label": "has",
    "to": 204
  }, {
    "from": 200,
    "label": "has",
    "to": 205
  }, {
    "from": 200,
    "label": "has",
    "to": 206
  }, {
    "from": 200,
    "label": "has",
    "to": 207
  }, {
    "from": 200,
    "label": "has",
    "to": 208
  }, {
    "from": 200,
    "label": "has",
    "to": 209
  }, {
    "from": 210,
    "label": "has",
    "to": 211
  }, {
    "from": 210,
    "label": "has",
    "to": 211
  }, {
    "from": 210,
    "label": "has",
    "to": 182
  }, {
    "from": 210,
    "label": "has",
    "to": 212
  }, {
    "from": 210,
    "label": "has",
    "to": 213
  }, {
    "from": 210,
    "label": "has",
    "to": 183
  }, {
    "from": 210,
    "label": "has",
    "to": 184
  }, {
    "from": 210,
    "label": "has",
    "to": 185
  }, {
    "from": 210,
    "label": "has",
    "to": 214
  }, {
    "from": 215,
    "label": "has",
    "to": 188
  }, {
    "from": 215,
    "label": "has",
    "to": 189
  }, {
    "from": 215,
    "label": "has",
    "to": 216
  }, {
    "from": 215,
    "label": "has",
    "to": 217
  }, {
    "from": 215,
    "label": "has",
    "to": 218
  }, {
    "from": 215,
    "label": "has",
    "to": 219
  }, {
    "from": 215,
    "label": "has",
    "to": 220
  }, {
    "from": 215,
    "label": "has",
    "to": 221
  }, {
    "from": 215,
    "label": "has",
    "to": 222
  }, {
    "from": 223,
    "label": "has",
    "to": 224
  }, {
    "from": 223,
    "label": "has",
    "to": 225
  }, {
    "from": 226,
    "label": "has",
    "to": 227
  }, {
    "from": 227,
    "label": "has",
    "to": 228
  }, {
    "from": 226,
    "label": "has",
    "to": 229
  }, {
    "from": 229,
    "label": "has",
    "to": 230
  }, {
    "from": 226,
    "label": "has",
    "to": 231
  }, {
    "from": 231,
    "label": "has",
    "to": 232
  }, {
    "from": 226,
    "label": "has",
    "to": 233
  }, {
    "from": 226,
    "label": "has",
    "to": 234
  }, {
    "from": 234,
    "label": "has",
    "to": 235
  }, {
    "from": 234,
    "label": "has",
    "to": 236
  }, {
    "from": 226,
    "label": "has",
    "to": 237
  }, {
    "from": 237,
    "label": "has",
    "to": 238
  }, {
    "from": 226,
    "label": "has",
    "to": 239
  }, {
    "from": 240,
    "label": "has",
    "to": 241
  }, {
    "from": 240,
    "label": "has",
    "to": 242
  }, {
    "from": 240,
    "label": "has",
    "to": 243
  }, {
    "from": 243,
    "label": "has",
    "to": 244
  }, {
    "from": 243,
    "label": "has",
    "to": 245
  }, {
    "from": 243,
    "label": "has",
    "to": 246
  }, {
    "from": 240,
    "label": "has",
    "to": 247
  }, {
    "from": 240,
    "label": "has",
    "to": 242
  }, {
    "from": 240,
    "label": "has",
    "to": 248
  }, {
    "from": 248,
    "label": "has",
    "to": 244
  }, {
    "from": 248,
    "label": "has",
    "to": 245
  }, {
    "from": 248,
    "label": "has",
    "to": 246
  }, {
    "from": 240,
    "label": "has",
    "to": 247
  }, {
    "from": 240,
    "label": "has",
    "to": 242
  }, {
    "from": 240,
    "label": "has",
    "to": 249
  }, {
    "from": 240,
    "label": "has",
    "to": 250
  }, {
    "from": 250,
    "label": "has",
    "to": 244
  }, {
    "from": 250,
    "label": "has",
    "to": 245
  }, {
    "from": 250,
    "label": "has",
    "to": 246
  }, {
    "from": 240,
    "label": "has",
    "to": 251
  }, {
    "from": 240,
    "label": "has",
    "to": 252
  }, {
    "from": 240,
    "label": "has",
    "to": 242
  }, {
    "from": 240,
    "label": "has",
    "to": 253
  }, {
    "from": 253,
    "label": "has",
    "to": 244
  }, {
    "from": 253,
    "label": "has",
    "to": 245
  }, {
    "from": 253,
    "label": "has",
    "to": 254
  }, {
    "from": 253,
    "label": "has",
    "to": 246
  }, {
    "from": 240,
    "label": "has",
    "to": 247
  }, {
    "from": 240,
    "label": "has",
    "to": 242
  }, {
    "from": 240,
    "label": "has",
    "to": 255
  }, {
    "from": 255,
    "label": "has",
    "to": 244
  }, {
    "from": 255,
    "label": "has",
    "to": 245
  }, {
    "from": 255,
    "label": "has",
    "to": 254
  }, {
    "from": 255,
    "label": "has",
    "to": 246
  }, {
    "from": 240,
    "label": "has",
    "to": 247
  }, {
    "from": 240,
    "label": "has",
    "to": 256
  }, {
    "from": 240,
    "label": "has",
    "to": 257
  }, {
    "from": 257,
    "label": "has",
    "to": 244
  }, {
    "from": 257,
    "label": "has",
    "to": 245
  }, {
    "from": 257,
    "label": "has",
    "to": 258
  }, {
    "from": 257,
    "label": "has",
    "to": 259
  }, {
    "from": 259,
    "label": "has",
    "to": 260
  }, {
    "from": 257,
    "label": "has",
    "to": 246
  }, {
    "from": 240,
    "label": "has",
    "to": 247
  }, {
    "from": 240,
    "label": "has",
    "to": 261
  }, {
    "from": 262,
    "label": "has",
    "to": 242
  }, {
    "from": 262,
    "label": "has",
    "to": 263
  }, {
    "from": 263,
    "label": "has",
    "to": 244
  }, {
    "from": 263,
    "label": "has",
    "to": 245
  }, {
    "from": 263,
    "label": "has",
    "to": 246
  }, {
    "from": 262,
    "label": "has",
    "to": 264
  }, {
    "from": 262,
    "label": "has",
    "to": 265
  }, {
    "from": 266,
    "label": "has",
    "to": 267
  }, {
    "from": 266,
    "label": "has",
    "to": 268
  }, {
    "from": 268,
    "label": "has",
    "to": 269
  }, {
    "from": 268,
    "label": "has",
    "to": 270
  }, {
    "from": 268,
    "label": "has",
    "to": 9
  }, {
    "from": 266,
    "label": "has",
    "to": 271
  }, {
    "from": 266,
    "label": "has",
    "to": 272
  }, {
    "from": 273,
    "label": "has",
    "to": 274
  }, {
    "from": 273,
    "label": "has",
    "to": 275
  }, {
    "from": 273,
    "label": "has",
    "to": 276
  }, {
    "from": 273,
    "label": "has",
    "to": 277
  }, {
    "from": 273,
    "label": "has",
    "to": 278
  }, {
    "from": 273,
    "label": "has",
    "to": 279
  }, {
    "from": 280,
    "label": "has",
    "to": 188
  }, {
    "from": 280,
    "label": "has",
    "to": 189
  }, {
    "from": 280,
    "label": "has",
    "to": 281
  }, {
    "from": 280,
    "label": "has",
    "to": 282
  }, {
    "from": 280,
    "label": "has",
    "to": 283
  }, {
    "from": 280,
    "label": "has",
    "to": 284
  }, {
    "from": 280,
    "label": "has",
    "to": 285
  }, {
    "from": 280,
    "label": "has",
    "to": 286
  }, {
    "from": 280,
    "label": "has",
    "to": 287
  }, {
    "from": 280,
    "label": "has",
    "to": 288
  }, {
    "from": 289,
    "label": "has",
    "to": 290
  }, {
    "from": 289,
    "label": "has",
    "to": 291
  }, {
    "from": 289,
    "label": "has",
    "to": 292
  }, {
    "from": 289,
    "label": "has",
    "to": 293
  }, {
    "from": 289,
    "label": "has",
    "to": 291
  }, {
    "from": 289,
    "label": "has",
    "to": 294
  }, {
    "from": 289,
    "label": "has",
    "to": 295
  }, {
    "from": 289,
    "label": "has",
    "to": 291
  }, {
    "from": 289,
    "label": "has",
    "to": 294
  }, {
    "from": 289,
    "label": "has",
    "to": 296
  }, {
    "from": 297,
    "label": "has",
    "to": 298
  }, {
    "from": 297,
    "label": "has",
    "to": 299
  }, {
    "from": 297,
    "label": "has",
    "to": 292
  }, {
    "from": 297,
    "label": "has",
    "to": 300
  }, {
    "from": 301,
    "label": "has",
    "to": 302
  }, {
    "from": 301,
    "label": "has",
    "to": 299
  }, {
    "from": 301,
    "label": "has",
    "to": 292
  }, {
    "from": 301,
    "label": "has",
    "to": 303
  }, {
    "from": 304,
    "label": "has",
    "to": 305
  }, {
    "from": 304,
    "label": "has",
    "to": 306
  }, {
    "from": 304,
    "label": "has",
    "to": 307
  }, {
    "from": 304,
    "label": "has",
    "to": 308
  }, {
    "from": 309,
    "label": "has",
    "to": 310
  }, {
    "from": 310,
    "label": "has",
    "to": 311
  }, {
    "from": 309,
    "label": "has",
    "to": 184
  }, {
    "from": 309,
    "label": "has",
    "to": 185
  }, {
    "from": 309,
    "label": "has",
    "to": 312
  }, {
    "from": 313,
    "label": "has",
    "to": 314
  }, {
    "from": 313,
    "label": "has",
    "to": 281
  }, {
    "from": 313,
    "label": "has",
    "to": 315
  }, {
    "from": 313,
    "label": "has",
    "to": 316
  }, {
    "from": 317,
    "label": "has",
    "to": 318
  }, {
    "from": 317,
    "label": "has",
    "to": 319
  }, {
    "from": 317,
    "label": "has",
    "to": 320
  }, {
    "from": 317,
    "label": "has",
    "to": 321
  }, {
    "from": 317,
    "label": "has",
    "to": 322
  }, {
    "from": 317,
    "label": "has",
    "to": 323
  }, {
    "from": 324,
    "label": "has",
    "to": 211
  }, {
    "from": 324,
    "label": "has",
    "to": 211
  }, {
    "from": 324,
    "label": "has",
    "to": 325
  }, {
    "from": 324,
    "label": "has",
    "to": 326
  }, {
    "from": 324,
    "label": "has",
    "to": 327
  }, {
    "from": 324,
    "label": "has",
    "to": 328
  }, {
    "from": 324,
    "label": "has",
    "to": 329
  }, {
    "from": 324,
    "label": "has",
    "to": 330
  }, {
    "from": 324,
    "label": "has",
    "to": 331
  }, {
    "from": 324,
    "label": "has",
    "to": 332
  }, {
    "from": 324,
    "label": "has",
    "to": 333
  }, {
    "from": 324,
    "label": "has",
    "to": 334
  }, {
    "from": 324,
    "label": "has",
    "to": 335
  }, {
    "from": 324,
    "label": "has",
    "to": 336
  }, {
    "from": 324,
    "label": "has",
    "to": 337
  }, {
    "from": 324,
    "label": "has",
    "to": 338
  }, {
    "from": 324,
    "label": "has",
    "to": 278
  }, {
    "from": 324,
    "label": "has",
    "to": 339
  }, {
    "from": 324,
    "label": "has",
    "to": 340
  }, {
    "from": 324,
    "label": "has",
    "to": 341
  }, {
    "from": 342,
    "label": "has",
    "to": 188
  }, {
    "from": 342,
    "label": "has",
    "to": 189
  }, {
    "from": 342,
    "label": "has",
    "to": 281
  }, {
    "from": 342,
    "label": "has",
    "to": 343
  }, {
    "from": 342,
    "label": "has",
    "to": 344
  }, {
    "from": 342,
    "label": "has",
    "to": 345
  }, {
    "from": 342,
    "label": "has",
    "to": 346
  }, {
    "from": 342,
    "label": "has",
    "to": 347
  }, {
    "from": 342,
    "label": "has",
    "to": 348
  }, {
    "from": 342,
    "label": "has",
    "to": 349
  }, {
    "from": 350,
    "label": "has",
    "to": 351
  }, {
    "from": 350,
    "label": "has",
    "to": 352
  }, {
    "from": 350,
    "label": "has",
    "to": 353
  }, {
    "from": 354,
    "label": "has",
    "to": 355
  }, {
    "from": 354,
    "label": "has",
    "to": 352
  }, {
    "from": 354,
    "label": "has",
    "to": 356
  }, {
    "from": 357,
    "label": "has",
    "to": 358
  }, {
    "from": 357,
    "label": "has",
    "to": 359
  }, {
    "from": 357,
    "label": "has",
    "to": 360
  }, {
    "from": 361,
    "label": "has",
    "to": 362
  }, {
    "from": 361,
    "label": "has",
    "to": 363
  }, {
    "from": 361,
    "label": "has",
    "to": 364
  }, {
    "from": 365,
    "label": "has",
    "to": 366
  }, {
    "from": 365,
    "label": "has",
    "to": 359
  }, {
    "from": 365,
    "label": "has",
    "to": 367
  }, {
    "from": 368,
    "label": "has",
    "to": 369
  }, {
    "from": 368,
    "label": "has",
    "to": 370
  }, {
    "from": 368,
    "label": "has",
    "to": 371
  }, {
    "from": 372,
    "label": "has",
    "to": 373
  }, {
    "from": 372,
    "label": "has",
    "to": 374
  }, {
    "from": 372,
    "label": "has",
    "to": 375
  }, {
    "from": 372,
    "label": "has",
    "to": 376
  }, {
    "from": 372,
    "label": "has",
    "to": 377
  }, {
    "from": 372,
    "label": "has",
    "to": 378
  }, {
    "from": 372,
    "label": "has",
    "to": 379
  }, {
    "from": 379,
    "label": "has",
    "to": 380
  }, {
    "from": 379,
    "label": "has",
    "to": 9
  }, {
    "from": 372,
    "label": "has",
    "to": 381
  }, {
    "from": 372,
    "label": "has",
    "to": 382
  }, {
    "from": 383,
    "label": "has",
    "to": 384
  }, {
    "from": 383,
    "label": "has",
    "to": 385
  }, {
    "from": 385,
    "label": "has",
    "to": 386
  }, {
    "from": 385,
    "label": "has",
    "to": 387
  }, {
    "from": 385,
    "label": "has",
    "to": 388
  }, {
    "from": 385,
    "label": "has",
    "to": 389
  }, {
    "from": 385,
    "label": "has",
    "to": 9
  }, {
    "from": 383,
    "label": "has",
    "to": 390
  }, {
    "from": 383,
    "label": "has",
    "to": 391
  }, {
    "from": 383,
    "label": "has",
    "to": 374
  }, {
    "from": 383,
    "label": "has",
    "to": 375
  }, {
    "from": 383,
    "label": "has",
    "to": 392
  }, {
    "from": 383,
    "label": "has",
    "to": 393
  }, {
    "from": 383,
    "label": "has",
    "to": 394
  }, {
    "from": 383,
    "label": "has",
    "to": 395
  }, {
    "from": 396,
    "label": "has",
    "to": 397
  }, {
    "from": 396,
    "label": "has",
    "to": 384
  }, {
    "from": 396,
    "label": "has",
    "to": 398
  }, {
    "from": 398,
    "label": "has",
    "to": 386
  }, {
    "from": 398,
    "label": "has",
    "to": 387
  }, {
    "from": 398,
    "label": "has",
    "to": 388
  }, {
    "from": 398,
    "label": "has",
    "to": 389
  }, {
    "from": 398,
    "label": "has",
    "to": 9
  }, {
    "from": 396,
    "label": "has",
    "to": 399
  }, {
    "from": 396,
    "label": "has",
    "to": 391
  }, {
    "from": 396,
    "label": "has",
    "to": 400
  }, {
    "from": 401,
    "label": "has",
    "to": 397
  }, {
    "from": 401,
    "label": "has",
    "to": 267
  }, {
    "from": 401,
    "label": "has",
    "to": 402
  }, {
    "from": 402,
    "label": "has",
    "to": 269
  }, {
    "from": 402,
    "label": "has",
    "to": 270
  }, {
    "from": 402,
    "label": "has",
    "to": 9
  }, {
    "from": 401,
    "label": "has",
    "to": 271
  }, {
    "from": 401,
    "label": "has",
    "to": 403
  }, {
    "from": 404,
    "label": "has",
    "to": 405
  }, {
    "from": 404,
    "label": "has",
    "to": 406
  }, {
    "from": 404,
    "label": "has",
    "to": 407
  }, {
    "from": 404,
    "label": "has",
    "to": 408
  }, {
    "from": 404,
    "label": "has",
    "to": 409
  }, {
    "from": 404,
    "label": "has",
    "to": 410
  }, {
    "from": 404,
    "label": "has",
    "to": 411
  }, {
    "from": 404,
    "label": "has",
    "to": 412
  }, {
    "from": 404,
    "label": "has",
    "to": 413
  }, {
    "from": 404,
    "label": "has",
    "to": 414
  }, {
    "from": 404,
    "label": "has",
    "to": 415
  }, {
    "from": 416,
    "label": "has",
    "to": 188
  }, {
    "from": 416,
    "label": "has",
    "to": 189
  }, {
    "from": 416,
    "label": "has",
    "to": 417
  }, {
    "from": 416,
    "label": "has",
    "to": 418
  }, {
    "from": 416,
    "label": "has",
    "to": 419
  }, {
    "from": 416,
    "label": "has",
    "to": 420
  }, {
    "from": 416,
    "label": "has",
    "to": 421
  }, {
    "from": 416,
    "label": "has",
    "to": 422
  }, {
    "from": 416,
    "label": "has",
    "to": 423
  }, {
    "from": 424,
    "label": "has",
    "to": 425
  }, {
    "from": 424,
    "label": "has",
    "to": 426
  }, {
    "from": 424,
    "label": "has",
    "to": 427
  }, {
    "from": 428,
    "label": "has",
    "to": 429
  }, {
    "from": 428,
    "label": "has",
    "to": 430
  }, {
    "from": 428,
    "label": "has",
    "to": 431
  }, {
    "from": 428,
    "label": "has",
    "to": 432
  }, {
    "from": 428,
    "label": "has",
    "to": 433
  }, {
    "from": 434,
    "label": "has",
    "to": 435
  }, {
    "from": 434,
    "label": "has",
    "to": 436
  }, {
    "from": 434,
    "label": "has",
    "to": 437
  }, {
    "from": 434,
    "label": "has",
    "to": 438
  }, {
    "from": 434,
    "label": "has",
    "to": 439
  }, {
    "from": 434,
    "label": "has",
    "to": 440
  }, {
    "from": 434,
    "label": "has",
    "to": 441
  }, {
    "from": 434,
    "label": "has",
    "to": 442
  }, {
    "from": 434,
    "label": "has",
    "to": 436
  }, {
    "from": 434,
    "label": "has",
    "to": 437
  }, {
    "from": 434,
    "label": "has",
    "to": 443
  }, {
    "from": 434,
    "label": "has",
    "to": 439
  }, {
    "from": 434,
    "label": "has",
    "to": 440
  }, {
    "from": 434,
    "label": "has",
    "to": 444
  }, {
    "from": 445,
    "label": "has",
    "to": 384
  }, {
    "from": 445,
    "label": "has",
    "to": 446
  }, {
    "from": 446,
    "label": "has",
    "to": 386
  }, {
    "from": 446,
    "label": "has",
    "to": 388
  }, {
    "from": 446,
    "label": "has",
    "to": 9
  }, {
    "from": 445,
    "label": "has",
    "to": 447
  }, {
    "from": 445,
    "label": "has",
    "to": 442
  }, {
    "from": 445,
    "label": "has",
    "to": 448
  }, {
    "from": 445,
    "label": "has",
    "to": 437
  }, {
    "from": 445,
    "label": "has",
    "to": 443
  }, {
    "from": 445,
    "label": "has",
    "to": 449
  }, {
    "from": 445,
    "label": "has",
    "to": 440
  }, {
    "from": 445,
    "label": "has",
    "to": 450
  }, {
    "from": 451,
    "label": "has",
    "to": 452
  }, {
    "from": 451,
    "label": "has",
    "to": 453
  }, {
    "from": 453,
    "label": "has",
    "to": 454
  }, {
    "from": 453,
    "label": "has",
    "to": 9
  }, {
    "from": 453,
    "label": "has",
    "to": 455
  }, {
    "from": 453,
    "label": "has",
    "to": 9
  }, {
    "from": 451,
    "label": "has",
    "to": 456
  }, {
    "from": 451,
    "label": "has",
    "to": 457
  }, {
    "from": 458,
    "label": "has",
    "to": 267
  }, {
    "from": 458,
    "label": "has",
    "to": 459
  }, {
    "from": 459,
    "label": "has",
    "to": 454
  }, {
    "from": 459,
    "label": "has",
    "to": 9
  }, {
    "from": 459,
    "label": "has",
    "to": 460
  }, {
    "from": 459,
    "label": "has",
    "to": 270
  }, {
    "from": 459,
    "label": "has",
    "to": 9
  }, {
    "from": 458,
    "label": "has",
    "to": 271
  }, {
    "from": 458,
    "label": "has",
    "to": 461
  }, {
    "from": 462,
    "label": "has",
    "to": 463
  }, {
    "from": 462,
    "label": "has",
    "to": 425
  }, {
    "from": 462,
    "label": "has",
    "to": 464
  }, {
    "from": 462,
    "label": "has",
    "to": 465
  }, {
    "from": 462,
    "label": "has",
    "to": 466
  }, {
    "from": 467,
    "label": "has",
    "to": 468
  }, {
    "from": 467,
    "label": "has",
    "to": 469
  }, {
    "from": 467,
    "label": "has",
    "to": 470
  }, {
    "from": 467,
    "label": "has",
    "to": 471
  }, {
    "from": 467,
    "label": "has",
    "to": 472
  }, {
    "from": 467,
    "label": "has",
    "to": 473
  }, {
    "from": 474,
    "label": "has",
    "to": 475
  }, {
    "from": 474,
    "label": "has",
    "to": 188
  }, {
    "from": 474,
    "label": "has",
    "to": 189
  }, {
    "from": 474,
    "label": "has",
    "to": 476
  }, {
    "from": 474,
    "label": "has",
    "to": 477
  }, {
    "from": 474,
    "label": "has",
    "to": 478
  }, {
    "from": 474,
    "label": "has",
    "to": 479
  }, {
    "from": 480,
    "label": "has",
    "to": 481
  }, {
    "from": 480,
    "label": "has",
    "to": 482
  }, {
    "from": 480,
    "label": "has",
    "to": 483
  }, {
    "from": 483,
    "label": "has",
    "to": 484
  }, {
    "from": 483,
    "label": "has",
    "to": 485
  }, {
    "from": 480,
    "label": "has",
    "to": 391
  }, {
    "from": 480,
    "label": "has",
    "to": 486
  }, {
    "from": 487,
    "label": "has",
    "to": 488
  }, {
    "from": 487,
    "label": "has",
    "to": 489
  }, {
    "from": 487,
    "label": "has",
    "to": 483
  }, {
    "from": 483,
    "label": "has",
    "to": 484
  }, {
    "from": 483,
    "label": "has",
    "to": 485
  }, {
    "from": 487,
    "label": "has",
    "to": 391
  }, {
    "from": 487,
    "label": "has",
    "to": 490
  }, {
    "from": 491,
    "label": "has",
    "to": 63
  }, {
    "from": 492,
    "label": "has",
    "to": 65
  }, {
    "from": 493,
    "label": "has",
    "to": 63
  }, {
    "from": 494,
    "label": "has",
    "to": 65
  }, {
    "from": 495,
    "label": "has",
    "to": 166
  }, {
    "from": 496,
    "label": "has",
    "to": 168
  }, {
    "from": 497,
    "label": "has",
    "to": 235
  }, {
    "from": 497,
    "label": "has",
    "to": 236
  }, {
    "from": 497,
    "label": "has",
    "to": 498
  }, {
    "from": 499,
    "label": "has",
    "to": 238
  }, {
    "from": 499,
    "label": "has",
    "to": 500
  }, {
    "from": 501,
    "label": "has",
    "to": 244
  }, {
    "from": 501,
    "label": "has",
    "to": 245
  }, {
    "from": 501,
    "label": "has",
    "to": 246
  }, {
    "from": 501,
    "label": "has",
    "to": 502
  }, {
    "from": 503,
    "label": "has",
    "to": 244
  }, {
    "from": 503,
    "label": "has",
    "to": 245
  }, {
    "from": 503,
    "label": "has",
    "to": 246
  }, {
    "from": 503,
    "label": "has",
    "to": 504
  }, {
    "from": 505,
    "label": "has",
    "to": 244
  }, {
    "from": 505,
    "label": "has",
    "to": 245
  }, {
    "from": 505,
    "label": "has",
    "to": 254
  }, {
    "from": 505,
    "label": "has",
    "to": 246
  }, {
    "from": 505,
    "label": "has",
    "to": 506
  }, {
    "from": 507,
    "label": "has",
    "to": 244
  }, {
    "from": 507,
    "label": "has",
    "to": 245
  }, {
    "from": 507,
    "label": "has",
    "to": 258
  }, {
    "from": 507,
    "label": "has",
    "to": 259
  }, {
    "from": 259,
    "label": "has",
    "to": 260
  }, {
    "from": 507,
    "label": "has",
    "to": 246
  }, {
    "from": 507,
    "label": "has",
    "to": 508
  }, {
    "from": 509,
    "label": "has",
    "to": 244
  }, {
    "from": 509,
    "label": "has",
    "to": 245
  }, {
    "from": 509,
    "label": "has",
    "to": 246
  }, {
    "from": 509,
    "label": "has",
    "to": 510
  }, {
    "from": 511,
    "label": "has",
    "to": 269
  }, {
    "from": 511,
    "label": "has",
    "to": 270
  }, {
    "from": 511,
    "label": "has",
    "to": 9
  }, {
    "from": 511,
    "label": "has",
    "to": 512
  }, {
    "from": 513,
    "label": "has",
    "to": 380
  }, {
    "from": 513,
    "label": "has",
    "to": 9
  }, {
    "from": 513,
    "label": "has",
    "to": 514
  }, {
    "from": 515,
    "label": "has",
    "to": 386
  }, {
    "from": 515,
    "label": "has",
    "to": 387
  }, {
    "from": 515,
    "label": "has",
    "to": 388
  }, {
    "from": 515,
    "label": "has",
    "to": 389
  }, {
    "from": 515,
    "label": "has",
    "to": 9
  }, {
    "from": 515,
    "label": "has",
    "to": 516
  }, {
    "from": 517,
    "label": "has",
    "to": 386
  }, {
    "from": 517,
    "label": "has",
    "to": 387
  }, {
    "from": 517,
    "label": "has",
    "to": 388
  }, {
    "from": 517,
    "label": "has",
    "to": 389
  }, {
    "from": 517,
    "label": "has",
    "to": 9
  }, {
    "from": 517,
    "label": "has",
    "to": 518
  }, {
    "from": 519,
    "label": "has",
    "to": 269
  }, {
    "from": 519,
    "label": "has",
    "to": 270
  }, {
    "from": 519,
    "label": "has",
    "to": 9
  }, {
    "from": 519,
    "label": "has",
    "to": 520
  }, {
    "from": 521,
    "label": "has",
    "to": 386
  }, {
    "from": 521,
    "label": "has",
    "to": 388
  }, {
    "from": 521,
    "label": "has",
    "to": 9
  }, {
    "from": 521,
    "label": "has",
    "to": 522
  }, {
    "from": 523,
    "label": "has",
    "to": 454
  }, {
    "from": 523,
    "label": "has",
    "to": 9
  }, {
    "from": 523,
    "label": "has",
    "to": 524
  }, {
    "from": 525,
    "label": "has",
    "to": 455
  }, {
    "from": 525,
    "label": "has",
    "to": 9
  }, {
    "from": 525,
    "label": "has",
    "to": 526
  }, {
    "from": 527,
    "label": "has",
    "to": 454
  }, {
    "from": 527,
    "label": "has",
    "to": 9
  }, {
    "from": 527,
    "label": "has",
    "to": 528
  }, {
    "from": 529,
    "label": "has",
    "to": 460
  }, {
    "from": 529,
    "label": "has",
    "to": 270
  }, {
    "from": 529,
    "label": "has",
    "to": 9
  }, {
    "from": 529,
    "label": "has",
    "to": 530
  }, {
    "from": 531,
    "label": "has",
    "to": 484
  }, {
    "from": 531,
    "label": "has",
    "to": 485
  }, {
    "from": 531,
    "label": "has",
    "to": 532
  }, {
    "from": 533,
    "label": "has",
    "to": 484
  }, {
    "from": 533,
    "label": "has",
    "to": 485
  }, {
    "from": 533,
    "label": "has",
    "to": 534
  }, {
    "from": 289,
    "label": "calls",
    "to": 539
  }, {
    "from": 289,
    "label": "calls",
    "to": 539
  }, {
    "from": 289,
    "label": "calls",
    "to": 539
  }, {
    "from": 297,
    "label": "calls",
    "to": 539
  }, {
    "from": 301,
    "label": "calls",
    "to": 539
  }, {
    "from": 304,
    "label": "calls",
    "to": 539
  }, {
    "from": 52,
    "label": "calls",
    "to": 536
  }, {
    "from": 52,
    "label": "calls",
    "to": 536
  }, {
    "from": 226,
    "label": "calls",
    "to": 536
  }, {
    "from": 226,
    "label": "calls",
    "to": 536
  }, {
    "from": 187,
    "label": "calls",
    "to": 536
  }, {
    "from": 187,
    "label": "calls",
    "to": 536
  }, {
    "from": 4,
    "label": "calls",
    "to": 564
  }, {
    "from": 52,
    "label": "calls",
    "to": 564
  }, {
    "from": 52,
    "label": "calls",
    "to": 564
  }, {
    "from": 200,
    "label": "calls",
    "to": 564
  }, {
    "from": 200,
    "label": "calls",
    "to": 564
  }, {
    "from": 200,
    "label": "calls",
    "to": 564
  }, {
    "from": 200,
    "label": "calls",
    "to": 564
  }, {
    "from": 200,
    "label": "calls",
    "to": 564
  }, {
    "from": 226,
    "label": "calls",
    "to": 564
  }, {
    "from": 226,
    "label": "calls",
    "to": 564
  }, {
    "from": 226,
    "label": "calls",
    "to": 564
  }, {
    "from": 226,
    "label": "calls",
    "to": 564
  }, {
    "from": 187,
    "label": "calls",
    "to": 564
  }, {
    "from": 187,
    "label": "calls",
    "to": 564
  }, {
    "from": 187,
    "label": "calls",
    "to": 564
  }, {
    "from": 289,
    "label": "calls",
    "to": 564
  }, {
    "from": 289,
    "label": "calls",
    "to": 564
  }, {
    "from": 289,
    "label": "calls",
    "to": 564
  }, {
    "from": 289,
    "label": "calls",
    "to": 564
  }, {
    "from": 289,
    "label": "calls",
    "to": 564
  }, {
    "from": 289,
    "label": "calls",
    "to": 564
  }, {
    "from": 297,
    "label": "calls",
    "to": 564
  }, {
    "from": 297,
    "label": "calls",
    "to": 564
  }, {
    "from": 301,
    "label": "calls",
    "to": 564
  }, {
    "from": 301,
    "label": "calls",
    "to": 564
  }, {
    "from": 317,
    "label": "calls",
    "to": 564
  }, {
    "from": 317,
    "label": "calls",
    "to": 564
  }, {
    "from": 357,
    "label": "calls",
    "to": 564
  }, {
    "from": 365,
    "label": "calls",
    "to": 564
  }, {
    "from": 368,
    "label": "calls",
    "to": 564
  }, {
    "from": 372,
    "label": "calls",
    "to": 564
  }, {
    "from": 383,
    "label": "calls",
    "to": 564
  }, {
    "from": 396,
    "label": "calls",
    "to": 564
  }, {
    "from": 401,
    "label": "calls",
    "to": 564
  }, {
    "from": 428,
    "label": "calls",
    "to": 564
  }, {
    "from": 428,
    "label": "calls",
    "to": 564
  }, {
    "from": 451,
    "label": "calls",
    "to": 564
  }, {
    "from": 451,
    "label": "calls",
    "to": 564
  }, {
    "from": 458,
    "label": "calls",
    "to": 564
  }, {
    "from": 458,
    "label": "calls",
    "to": 564
  }, {
    "from": 52,
    "label": "calls",
    "to": 567
  }, {
    "from": 52,
    "label": "calls",
    "to": 567
  }, {
    "from": 52,
    "label": "calls",
    "to": 567
  }, {
    "from": 60,
    "label": "calls",
    "to": 567
  }, {
    "from": 200,
    "label": "calls",
    "to": 567
  }, {
    "from": 266,
    "label": "calls",
    "to": 567
  }, {
    "from": 297,
    "label": "calls",
    "to": 567
  }, {
    "from": 301,
    "label": "calls",
    "to": 567
  }, {
    "from": 317,
    "label": "calls",
    "to": 567
  }, {
    "from": 317,
    "label": "calls",
    "to": 567
  }, {
    "from": 383,
    "label": "calls",
    "to": 567
  }, {
    "from": 383,
    "label": "calls",
    "to": 567
  }, {
    "from": 383,
    "label": "calls",
    "to": 567
  }, {
    "from": 401,
    "label": "calls",
    "to": 567
  }, {
    "from": 200,
    "label": "calls",
    "to": 567
  }, {
    "from": 428,
    "label": "calls",
    "to": 567
  }, {
    "from": 434,
    "label": "calls",
    "to": 567
  }, {
    "from": 434,
    "label": "calls",
    "to": 567
  }, {
    "from": 445,
    "label": "calls",
    "to": 567
  }, {
    "from": 445,
    "label": "calls",
    "to": 567
  }, {
    "from": 445,
    "label": "calls",
    "to": 567
  }, {
    "from": 445,
    "label": "calls",
    "to": 567
  }, {
    "from": 458,
    "label": "calls",
    "to": 567
  }, {
    "from": 462,
    "label": "calls",
    "to": 567
  }, {
    "from": 4,
    "label": "calls",
    "to": 556
  }, {
    "from": 170,
    "label": "calls",
    "to": 556
  }, {
    "from": 175,
    "label": "calls",
    "to": 556
  }, {
    "from": 223,
    "label": "calls",
    "to": 556
  }, {
    "from": 535,
    "label": "calls",
    "to": 546
  }, {
    "from": 535,
    "label": "calls",
    "to": 546
  }, {
    "from": 350,
    "label": "calls",
    "to": 558
  }, {
    "from": 354,
    "label": "calls",
    "to": 558
  }, {
    "from": 357,
    "label": "calls",
    "to": 558
  }, {
    "from": 361,
    "label": "calls",
    "to": 558
  }, {
    "from": 365,
    "label": "calls",
    "to": 558
  }, {
    "from": 368,
    "label": "calls",
    "to": 558
  }, {
    "from": 372,
    "label": "calls",
    "to": 558
  }, {
    "from": 383,
    "label": "calls",
    "to": 558
  }, {
    "from": 396,
    "label": "calls",
    "to": 558
  }, {
    "from": 401,
    "label": "calls",
    "to": 558
  }, {
    "from": 4,
    "label": "calls",
    "to": 545
  }, {
    "from": 200,
    "label": "calls",
    "to": 577
  }, {
    "from": 200,
    "label": "calls",
    "to": 577
  }, {
    "from": 240,
    "label": "calls",
    "to": 577
  }, {
    "from": 240,
    "label": "calls",
    "to": 577
  }, {
    "from": 240,
    "label": "calls",
    "to": 577
  }, {
    "from": 240,
    "label": "calls",
    "to": 577
  }, {
    "from": 240,
    "label": "calls",
    "to": 577
  }, {
    "from": 240,
    "label": "calls",
    "to": 577
  }, {
    "from": 289,
    "label": "calls",
    "to": 577
  }, {
    "from": 289,
    "label": "calls",
    "to": 577
  }, {
    "from": 289,
    "label": "calls",
    "to": 577
  }, {
    "from": 304,
    "label": "calls",
    "to": 577
  }, {
    "from": 350,
    "label": "calls",
    "to": 577
  }, {
    "from": 354,
    "label": "calls",
    "to": 577
  }, {
    "from": 361,
    "label": "calls",
    "to": 577
  }, {
    "from": 372,
    "label": "calls",
    "to": 577
  }, {
    "from": 383,
    "label": "calls",
    "to": 577
  }, {
    "from": 396,
    "label": "calls",
    "to": 577
  }, {
    "from": 480,
    "label": "calls",
    "to": 577
  }, {
    "from": 487,
    "label": "calls",
    "to": 577
  }, {
    "from": 187,
    "label": "calls",
    "to": 181
  }, {
    "from": 187,
    "label": "calls",
    "to": 181
  }, {
    "from": 187,
    "label": "calls",
    "to": 181
  }, {
    "from": 187,
    "label": "calls",
    "to": 181
  }, {
    "from": 187,
    "label": "calls",
    "to": 181
  }, {
    "from": 187,
    "label": "calls",
    "to": 181
  }, {
    "from": 200,
    "label": "calls",
    "to": 541
  }, {
    "from": 226,
    "label": "calls",
    "to": 541
  }, {
    "from": 289,
    "label": "calls",
    "to": 541
  }, {
    "from": 289,
    "label": "calls",
    "to": 541
  }, {
    "from": 289,
    "label": "calls",
    "to": 541
  }, {
    "from": 289,
    "label": "calls",
    "to": 541
  }, {
    "from": 289,
    "label": "calls",
    "to": 541
  }, {
    "from": 289,
    "label": "calls",
    "to": 541
  }, {
    "from": 297,
    "label": "calls",
    "to": 541
  }, {
    "from": 297,
    "label": "calls",
    "to": 541
  }, {
    "from": 301,
    "label": "calls",
    "to": 541
  }, {
    "from": 301,
    "label": "calls",
    "to": 541
  }, {
    "from": 304,
    "label": "calls",
    "to": 541
  }, {
    "from": 317,
    "label": "calls",
    "to": 541
  }, {
    "from": 317,
    "label": "calls",
    "to": 541
  }, {
    "from": 383,
    "label": "calls",
    "to": 541
  }, {
    "from": 383,
    "label": "calls",
    "to": 541
  }, {
    "from": 383,
    "label": "calls",
    "to": 541
  }, {
    "from": 200,
    "label": "calls",
    "to": 541
  }, {
    "from": 428,
    "label": "calls",
    "to": 541
  }, {
    "from": 428,
    "label": "calls",
    "to": 541
  }, {
    "from": 428,
    "label": "calls",
    "to": 541
  }, {
    "from": 434,
    "label": "calls",
    "to": 541
  }, {
    "from": 434,
    "label": "calls",
    "to": 541
  }, {
    "from": 434,
    "label": "calls",
    "to": 541
  }, {
    "from": 434,
    "label": "calls",
    "to": 541
  }, {
    "from": 434,
    "label": "calls",
    "to": 541
  }, {
    "from": 434,
    "label": "calls",
    "to": 541
  }, {
    "from": 434,
    "label": "calls",
    "to": 541
  }, {
    "from": 434,
    "label": "calls",
    "to": 541
  }, {
    "from": 434,
    "label": "calls",
    "to": 541
  }, {
    "from": 434,
    "label": "calls",
    "to": 541
  }, {
    "from": 434,
    "label": "calls",
    "to": 541
  }, {
    "from": 434,
    "label": "calls",
    "to": 541
  }, {
    "from": 445,
    "label": "calls",
    "to": 541
  }, {
    "from": 445,
    "label": "calls",
    "to": 541
  }, {
    "from": 445,
    "label": "calls",
    "to": 541
  }, {
    "from": 445,
    "label": "calls",
    "to": 541
  }, {
    "from": 445,
    "label": "calls",
    "to": 541
  }, {
    "from": 445,
    "label": "calls",
    "to": 541
  }, {
    "from": 462,
    "label": "calls",
    "to": 541
  }, {
    "from": 383,
    "label": "calls",
    "to": 554
  }, {
    "from": 445,
    "label": "calls",
    "to": 554
  }, {
    "from": 26,
    "label": "calls",
    "to": 555
  }, {
    "from": 76,
    "label": "calls",
    "to": 555
  }, {
    "from": 76,
    "label": "calls",
    "to": 555
  }, {
    "from": 76,
    "label": "calls",
    "to": 555
  }, {
    "from": 76,
    "label": "calls",
    "to": 555
  }, {
    "from": 187,
    "label": "calls",
    "to": 19
  }, {
    "from": 187,
    "label": "calls",
    "to": 19
  }, {
    "from": 187,
    "label": "calls",
    "to": 19
  }, {
    "from": 187,
    "label": "calls",
    "to": 19
  }, {
    "from": 187,
    "label": "calls",
    "to": 19
  }, {
    "from": 187,
    "label": "calls",
    "to": 19
  }, {
    "from": 240,
    "label": "calls",
    "to": 19
  }, {
    "from": 240,
    "label": "calls",
    "to": 19
  }, {
    "from": 240,
    "label": "calls",
    "to": 19
  }, {
    "from": 240,
    "label": "calls",
    "to": 19
  }, {
    "from": 240,
    "label": "calls",
    "to": 19
  }, {
    "from": 240,
    "label": "calls",
    "to": 19
  }, {
    "from": 240,
    "label": "calls",
    "to": 19
  }, {
    "from": 240,
    "label": "calls",
    "to": 19
  }, {
    "from": 262,
    "label": "calls",
    "to": 19
  }, {
    "from": 200,
    "label": "calls",
    "to": 4
  }, {
    "from": 187,
    "label": "calls",
    "to": 4
  }, {
    "from": 187,
    "label": "calls",
    "to": 4
  }, {
    "from": 187,
    "label": "calls",
    "to": 4
  }, {
    "from": 187,
    "label": "calls",
    "to": 4
  }, {
    "from": 187,
    "label": "calls",
    "to": 4
  }, {
    "from": 187,
    "label": "calls",
    "to": 4
  }, {
    "from": 187,
    "label": "calls",
    "to": 4
  }, {
    "from": 187,
    "label": "calls",
    "to": 4
  }, {
    "from": 187,
    "label": "calls",
    "to": 4
  }, {
    "from": 187,
    "label": "calls",
    "to": 4
  }, {
    "from": 187,
    "label": "calls",
    "to": 4
  }, {
    "from": 187,
    "label": "calls",
    "to": 4
  }, {
    "from": 187,
    "label": "calls",
    "to": 4
  }, {
    "from": 187,
    "label": "calls",
    "to": 4
  }, {
    "from": 187,
    "label": "calls",
    "to": 4
  }, {
    "from": 187,
    "label": "calls",
    "to": 4
  }, {
    "from": 187,
    "label": "calls",
    "to": 4
  }, {
    "from": 187,
    "label": "calls",
    "to": 4
  }, {
    "from": 350,
    "label": "calls",
    "to": 14
  }, {
    "from": 354,
    "label": "calls",
    "to": 14
  }, {
    "from": 357,
    "label": "calls",
    "to": 14
  }, {
    "from": 365,
    "label": "calls",
    "to": 14
  }, {
    "from": 368,
    "label": "calls",
    "to": 14
  }, {
    "from": 372,
    "label": "calls",
    "to": 14
  }, {
    "from": 372,
    "label": "calls",
    "to": 14
  }, {
    "from": 383,
    "label": "calls",
    "to": 14
  }, {
    "from": 383,
    "label": "calls",
    "to": 14
  }, {
    "from": 60,
    "label": "calls",
    "to": 566
  }, {
    "from": 60,
    "label": "calls",
    "to": 566
  }, {
    "from": 160,
    "label": "calls",
    "to": 566
  }, {
    "from": 160,
    "label": "calls",
    "to": 566
  }, {
    "from": 181,
    "label": "calls",
    "to": 559
  }, {
    "from": 200,
    "label": "calls",
    "to": 559
  }, {
    "from": 200,
    "label": "calls",
    "to": 559
  }, {
    "from": 181,
    "label": "calls",
    "to": 559
  }, {
    "from": 181,
    "label": "calls",
    "to": 559
  }, {
    "from": 181,
    "label": "calls",
    "to": 559
  }, {
    "from": 181,
    "label": "calls",
    "to": 559
  }, {
    "from": 181,
    "label": "calls",
    "to": 559
  }, {
    "from": 181,
    "label": "calls",
    "to": 559
  }, {
    "from": 181,
    "label": "calls",
    "to": 559
  }, {
    "from": 181,
    "label": "calls",
    "to": 559
  }, {
    "from": 181,
    "label": "calls",
    "to": 559
  }, {
    "from": 181,
    "label": "calls",
    "to": 559
  }, {
    "from": 181,
    "label": "calls",
    "to": 559
  }, {
    "from": 181,
    "label": "calls",
    "to": 559
  }, {
    "from": 181,
    "label": "calls",
    "to": 559
  }, {
    "from": 181,
    "label": "calls",
    "to": 559
  }, {
    "from": 181,
    "label": "calls",
    "to": 559
  }, {
    "from": 181,
    "label": "calls",
    "to": 559
  }, {
    "from": 181,
    "label": "calls",
    "to": 559
  }, {
    "from": 181,
    "label": "calls",
    "to": 559
  }, {
    "from": 181,
    "label": "calls",
    "to": 559
  }, {
    "from": 181,
    "label": "calls",
    "to": 559
  }, {
    "from": 181,
    "label": "calls",
    "to": 559
  }, {
    "from": 181,
    "label": "calls",
    "to": 559
  }, {
    "from": 181,
    "label": "calls",
    "to": 559
  }, {
    "from": 181,
    "label": "calls",
    "to": 559
  }, {
    "from": 181,
    "label": "calls",
    "to": 559
  }, {
    "from": 372,
    "label": "calls",
    "to": 559
  }, {
    "from": 372,
    "label": "calls",
    "to": 559
  }, {
    "from": 181,
    "label": "calls",
    "to": 559
  }, {
    "from": 181,
    "label": "calls",
    "to": 559
  }, {
    "from": 181,
    "label": "calls",
    "to": 559
  }, {
    "from": 181,
    "label": "calls",
    "to": 559
  }, {
    "from": 181,
    "label": "calls",
    "to": 559
  }, {
    "from": 181,
    "label": "calls",
    "to": 559
  }, {
    "from": 181,
    "label": "calls",
    "to": 559
  }, {
    "from": 181,
    "label": "calls",
    "to": 559
  }, {
    "from": 181,
    "label": "calls",
    "to": 559
  }, {
    "from": 200,
    "label": "calls",
    "to": 559
  }, {
    "from": 428,
    "label": "calls",
    "to": 559
  }, {
    "from": 434,
    "label": "calls",
    "to": 559
  }, {
    "from": 445,
    "label": "calls",
    "to": 559
  }, {
    "from": 451,
    "label": "calls",
    "to": 559
  }, {
    "from": 451,
    "label": "calls",
    "to": 559
  }, {
    "from": 458,
    "label": "calls",
    "to": 559
  }, {
    "from": 458,
    "label": "calls",
    "to": 559
  }, {
    "from": 462,
    "label": "calls",
    "to": 559
  }, {
    "from": 181,
    "label": "calls",
    "to": 559
  }, {
    "from": 181,
    "label": "calls",
    "to": 559
  }, {
    "from": 181,
    "label": "calls",
    "to": 559
  }, {
    "from": 181,
    "label": "calls",
    "to": 559
  }, {
    "from": 181,
    "label": "calls",
    "to": 559
  }, {
    "from": 226,
    "label": "calls",
    "to": 565
  }, {
    "from": 175,
    "label": "calls",
    "to": 537
  }, {
    "from": 187,
    "label": "calls",
    "to": 537
  }, {
    "from": 187,
    "label": "calls",
    "to": 537
  }, {
    "from": 187,
    "label": "calls",
    "to": 537
  }, {
    "from": 187,
    "label": "calls",
    "to": 537
  }, {
    "from": 187,
    "label": "calls",
    "to": 537
  }, {
    "from": 187,
    "label": "calls",
    "to": 537
  }, {
    "from": 187,
    "label": "calls",
    "to": 537
  }, {
    "from": 33,
    "label": "calls",
    "to": 26
  }, {
    "from": 33,
    "label": "calls",
    "to": 26
  }, {
    "from": 33,
    "label": "calls",
    "to": 26
  }, {
    "from": 33,
    "label": "calls",
    "to": 26
  }, {
    "from": 33,
    "label": "calls",
    "to": 26
  }, {
    "from": 76,
    "label": "calls",
    "to": 26
  }, {
    "from": 76,
    "label": "calls",
    "to": 26
  }, {
    "from": 76,
    "label": "calls",
    "to": 26
  }, {
    "from": 76,
    "label": "calls",
    "to": 26
  }, {
    "from": 76,
    "label": "calls",
    "to": 26
  }, {
    "from": 181,
    "label": "calls",
    "to": 563
  }, {
    "from": 181,
    "label": "calls",
    "to": 563
  }, {
    "from": 181,
    "label": "calls",
    "to": 563
  }, {
    "from": 181,
    "label": "calls",
    "to": 563
  }, {
    "from": 181,
    "label": "calls",
    "to": 563
  }, {
    "from": 187,
    "label": "calls",
    "to": 563
  }, {
    "from": 187,
    "label": "calls",
    "to": 563
  }, {
    "from": 187,
    "label": "calls",
    "to": 563
  }, {
    "from": 480,
    "label": "calls",
    "to": 563
  }, {
    "from": 480,
    "label": "calls",
    "to": 563
  }, {
    "from": 480,
    "label": "calls",
    "to": 563
  }, {
    "from": 480,
    "label": "calls",
    "to": 563
  }, {
    "from": 487,
    "label": "calls",
    "to": 563
  }, {
    "from": 487,
    "label": "calls",
    "to": 563
  }, {
    "from": 191,
    "label": "calls",
    "to": 575
  }, {
    "from": 197,
    "label": "calls",
    "to": 575
  }, {
    "from": 266,
    "label": "calls",
    "to": 575
  }, {
    "from": 317,
    "label": "calls",
    "to": 575
  }, {
    "from": 372,
    "label": "calls",
    "to": 575
  }, {
    "from": 372,
    "label": "calls",
    "to": 575
  }, {
    "from": 383,
    "label": "calls",
    "to": 575
  }, {
    "from": 396,
    "label": "calls",
    "to": 575
  }, {
    "from": 401,
    "label": "calls",
    "to": 575
  }, {
    "from": 458,
    "label": "calls",
    "to": 575
  }, {
    "from": 462,
    "label": "calls",
    "to": 575
  }, {
    "from": 480,
    "label": "calls",
    "to": 575
  }, {
    "from": 487,
    "label": "calls",
    "to": 575
  }, {
    "from": 21,
    "label": "calls",
    "to": 578
  }, {
    "from": 226,
    "label": "calls",
    "to": 578
  }, {
    "from": 226,
    "label": "calls",
    "to": 578
  }, {
    "from": 226,
    "label": "calls",
    "to": 578
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 191,
    "label": "calls",
    "to": 561
  }, {
    "from": 197,
    "label": "calls",
    "to": 561
  }, {
    "from": 200,
    "label": "calls",
    "to": 561
  }, {
    "from": 200,
    "label": "calls",
    "to": 561
  }, {
    "from": 200,
    "label": "calls",
    "to": 561
  }, {
    "from": 200,
    "label": "calls",
    "to": 561
  }, {
    "from": 200,
    "label": "calls",
    "to": 561
  }, {
    "from": 200,
    "label": "calls",
    "to": 561
  }, {
    "from": 200,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 187,
    "label": "calls",
    "to": 561
  }, {
    "from": 187,
    "label": "calls",
    "to": 561
  }, {
    "from": 187,
    "label": "calls",
    "to": 561
  }, {
    "from": 187,
    "label": "calls",
    "to": 561
  }, {
    "from": 187,
    "label": "calls",
    "to": 561
  }, {
    "from": 187,
    "label": "calls",
    "to": 561
  }, {
    "from": 187,
    "label": "calls",
    "to": 561
  }, {
    "from": 187,
    "label": "calls",
    "to": 561
  }, {
    "from": 187,
    "label": "calls",
    "to": 561
  }, {
    "from": 187,
    "label": "calls",
    "to": 561
  }, {
    "from": 240,
    "label": "calls",
    "to": 561
  }, {
    "from": 240,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 187,
    "label": "calls",
    "to": 561
  }, {
    "from": 187,
    "label": "calls",
    "to": 561
  }, {
    "from": 187,
    "label": "calls",
    "to": 561
  }, {
    "from": 187,
    "label": "calls",
    "to": 561
  }, {
    "from": 187,
    "label": "calls",
    "to": 561
  }, {
    "from": 187,
    "label": "calls",
    "to": 561
  }, {
    "from": 187,
    "label": "calls",
    "to": 561
  }, {
    "from": 289,
    "label": "calls",
    "to": 561
  }, {
    "from": 289,
    "label": "calls",
    "to": 561
  }, {
    "from": 289,
    "label": "calls",
    "to": 561
  }, {
    "from": 289,
    "label": "calls",
    "to": 561
  }, {
    "from": 289,
    "label": "calls",
    "to": 561
  }, {
    "from": 289,
    "label": "calls",
    "to": 561
  }, {
    "from": 289,
    "label": "calls",
    "to": 561
  }, {
    "from": 289,
    "label": "calls",
    "to": 561
  }, {
    "from": 289,
    "label": "calls",
    "to": 561
  }, {
    "from": 289,
    "label": "calls",
    "to": 561
  }, {
    "from": 289,
    "label": "calls",
    "to": 561
  }, {
    "from": 289,
    "label": "calls",
    "to": 561
  }, {
    "from": 297,
    "label": "calls",
    "to": 561
  }, {
    "from": 297,
    "label": "calls",
    "to": 561
  }, {
    "from": 297,
    "label": "calls",
    "to": 561
  }, {
    "from": 297,
    "label": "calls",
    "to": 561
  }, {
    "from": 301,
    "label": "calls",
    "to": 561
  }, {
    "from": 301,
    "label": "calls",
    "to": 561
  }, {
    "from": 301,
    "label": "calls",
    "to": 561
  }, {
    "from": 301,
    "label": "calls",
    "to": 561
  }, {
    "from": 304,
    "label": "calls",
    "to": 561
  }, {
    "from": 304,
    "label": "calls",
    "to": 561
  }, {
    "from": 304,
    "label": "calls",
    "to": 561
  }, {
    "from": 304,
    "label": "calls",
    "to": 561
  }, {
    "from": 304,
    "label": "calls",
    "to": 561
  }, {
    "from": 304,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 187,
    "label": "calls",
    "to": 561
  }, {
    "from": 187,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 187,
    "label": "calls",
    "to": 561
  }, {
    "from": 187,
    "label": "calls",
    "to": 561
  }, {
    "from": 187,
    "label": "calls",
    "to": 561
  }, {
    "from": 187,
    "label": "calls",
    "to": 561
  }, {
    "from": 187,
    "label": "calls",
    "to": 561
  }, {
    "from": 187,
    "label": "calls",
    "to": 561
  }, {
    "from": 187,
    "label": "calls",
    "to": 561
  }, {
    "from": 187,
    "label": "calls",
    "to": 561
  }, {
    "from": 187,
    "label": "calls",
    "to": 561
  }, {
    "from": 187,
    "label": "calls",
    "to": 561
  }, {
    "from": 350,
    "label": "calls",
    "to": 561
  }, {
    "from": 350,
    "label": "calls",
    "to": 561
  }, {
    "from": 350,
    "label": "calls",
    "to": 561
  }, {
    "from": 354,
    "label": "calls",
    "to": 561
  }, {
    "from": 354,
    "label": "calls",
    "to": 561
  }, {
    "from": 354,
    "label": "calls",
    "to": 561
  }, {
    "from": 357,
    "label": "calls",
    "to": 561
  }, {
    "from": 357,
    "label": "calls",
    "to": 561
  }, {
    "from": 357,
    "label": "calls",
    "to": 561
  }, {
    "from": 361,
    "label": "calls",
    "to": 561
  }, {
    "from": 361,
    "label": "calls",
    "to": 561
  }, {
    "from": 361,
    "label": "calls",
    "to": 561
  }, {
    "from": 361,
    "label": "calls",
    "to": 561
  }, {
    "from": 365,
    "label": "calls",
    "to": 561
  }, {
    "from": 365,
    "label": "calls",
    "to": 561
  }, {
    "from": 365,
    "label": "calls",
    "to": 561
  }, {
    "from": 368,
    "label": "calls",
    "to": 561
  }, {
    "from": 368,
    "label": "calls",
    "to": 561
  }, {
    "from": 368,
    "label": "calls",
    "to": 561
  }, {
    "from": 372,
    "label": "calls",
    "to": 561
  }, {
    "from": 372,
    "label": "calls",
    "to": 561
  }, {
    "from": 372,
    "label": "calls",
    "to": 561
  }, {
    "from": 372,
    "label": "calls",
    "to": 561
  }, {
    "from": 372,
    "label": "calls",
    "to": 561
  }, {
    "from": 372,
    "label": "calls",
    "to": 561
  }, {
    "from": 372,
    "label": "calls",
    "to": 561
  }, {
    "from": 383,
    "label": "calls",
    "to": 561
  }, {
    "from": 383,
    "label": "calls",
    "to": 561
  }, {
    "from": 383,
    "label": "calls",
    "to": 561
  }, {
    "from": 383,
    "label": "calls",
    "to": 561
  }, {
    "from": 383,
    "label": "calls",
    "to": 561
  }, {
    "from": 383,
    "label": "calls",
    "to": 561
  }, {
    "from": 383,
    "label": "calls",
    "to": 561
  }, {
    "from": 396,
    "label": "calls",
    "to": 561
  }, {
    "from": 396,
    "label": "calls",
    "to": 561
  }, {
    "from": 401,
    "label": "calls",
    "to": 561
  }, {
    "from": 401,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 181,
    "label": "calls",
    "to": 561
  }, {
    "from": 187,
    "label": "calls",
    "to": 561
  }, {
    "from": 187,
    "label": "calls",
    "to": 561
  }, {
    "from": 187,
    "label": "calls",
    "to": 561
  }, {
    "from": 187,
    "label": "calls",
    "to": 561
  }, {
    "from": 187,
    "label": "calls",
    "to": 561
  }, {
    "from": 187,
    "label": "calls",
    "to": 561
  }, {
    "from": 200,
    "label": "calls",
    "to": 561
  }, {
    "from": 200,
    "label": "calls",
    "to": 561
  }, {
    "from": 428,
    "label": "calls",
    "to": 561
  }, {
    "from": 428,
    "label": "calls",
    "to": 561
  }, {
    "from": 428,
    "label": "calls",
    "to": 561
  }, {
    "from": 428,
    "label": "calls",
    "to": 561
  }, {
    "from": 434,
    "label": "calls",
    "to": 561
  }, {
    "from": 434,
    "label": "calls",
    "to": 561
  }, {
    "from": 434,
    "label": "calls",
    "to": 561
  }, {
    "from": 434,
    "label": "calls",
    "to": 561
  }, {
    "from": 434,
    "label": "calls",
    "to": 561
  }, {
    "from": 434,
    "label": "calls",
    "to": 561
  }, {
    "from": 434,
    "label": "calls",
    "to": 561
  }, {
    "from": 434,
    "label": "calls",
    "to": 561
  }, {
    "from": 434,
    "label": "calls",
    "to": 561
  }, {
    "from": 434,
    "label": "calls",
    "to": 561
  }, {
    "from": 434,
    "label": "calls",
    "to": 561
  }, {
    "from": 434,
    "label": "calls",
    "to": 561
  }, {
    "from": 434,
    "label": "calls",
    "to": 561
  }, {
    "from": 445,
    "label": "calls",
    "to": 561
  }, {
    "from": 445,
    "label": "calls",
    "to": 561
  }, {
    "from": 445,
    "label": "calls",
    "to": 561
  }, {
    "from": 445,
    "label": "calls",
    "to": 561
  }, {
    "from": 445,
    "label": "calls",
    "to": 561
  }, {
    "from": 445,
    "label": "calls",
    "to": 561
  }, {
    "from": 445,
    "label": "calls",
    "to": 561
  }, {
    "from": 451,
    "label": "calls",
    "to": 561
  }, {
    "from": 458,
    "label": "calls",
    "to": 561
  }, {
    "from": 462,
    "label": "calls",
    "to": 561
  }, {
    "from": 462,
    "label": "calls",
    "to": 561
  }, {
    "from": 462,
    "label": "calls",
    "to": 561
  }, {
    "from": 462,
    "label": "calls",
    "to": 561
  }, {
    "from": 462,
    "label": "calls",
    "to": 561
  }, {
    "from": 4,
    "label": "calls",
    "to": 579
  }, {
    "from": 14,
    "label": "calls",
    "to": 579
  }, {
    "from": 170,
    "label": "calls",
    "to": 574
  }, {
    "from": 175,
    "label": "calls",
    "to": 574
  }, {
    "from": 187,
    "label": "calls",
    "to": 574
  }, {
    "from": 191,
    "label": "calls",
    "to": 574
  }, {
    "from": 197,
    "label": "calls",
    "to": 574
  }, {
    "from": 187,
    "label": "calls",
    "to": 574
  }, {
    "from": 187,
    "label": "calls",
    "to": 574
  }, {
    "from": 187,
    "label": "calls",
    "to": 574
  }, {
    "from": 187,
    "label": "calls",
    "to": 574
  }, {
    "from": 434,
    "label": "calls",
    "to": 574
  }, {
    "from": 434,
    "label": "calls",
    "to": 574
  }, {
    "from": 434,
    "label": "calls",
    "to": 574
  }, {
    "from": 434,
    "label": "calls",
    "to": 574
  }, {
    "from": 434,
    "label": "calls",
    "to": 574
  }, {
    "from": 434,
    "label": "calls",
    "to": 574
  }, {
    "from": 434,
    "label": "calls",
    "to": 574
  }, {
    "from": 434,
    "label": "calls",
    "to": 574
  }, {
    "from": 434,
    "label": "calls",
    "to": 574
  }, {
    "from": 434,
    "label": "calls",
    "to": 574
  }, {
    "from": 445,
    "label": "calls",
    "to": 574
  }, {
    "from": 445,
    "label": "calls",
    "to": 574
  }, {
    "from": 187,
    "label": "calls",
    "to": 574
  }, {
    "from": 160,
    "label": "calls",
    "to": 576
  }, {
    "from": 160,
    "label": "calls",
    "to": 576
  }, {
    "from": 170,
    "label": "calls",
    "to": 540
  }, {
    "from": 160,
    "label": "calls",
    "to": 573
  }, {
    "from": 4,
    "label": "calls",
    "to": 553
  }, {
    "from": 191,
    "label": "calls",
    "to": 553
  }, {
    "from": 197,
    "label": "calls",
    "to": 553
  }, {
    "from": 200,
    "label": "calls",
    "to": 553
  }, {
    "from": 187,
    "label": "calls",
    "to": 553
  }, {
    "from": 187,
    "label": "calls",
    "to": 553
  }, {
    "from": 187,
    "label": "calls",
    "to": 553
  }, {
    "from": 187,
    "label": "calls",
    "to": 553
  }, {
    "from": 187,
    "label": "calls",
    "to": 553
  }, {
    "from": 187,
    "label": "calls",
    "to": 553
  }, {
    "from": 187,
    "label": "calls",
    "to": 553
  }, {
    "from": 26,
    "label": "calls",
    "to": 3
  }, {
    "from": 462,
    "label": "calls",
    "to": 551
  }, {
    "from": 462,
    "label": "calls",
    "to": 551
  }, {
    "from": 52,
    "label": "calls",
    "to": 548
  }, {
    "from": 52,
    "label": "calls",
    "to": 548
  }, {
    "from": 170,
    "label": "calls",
    "to": 548
  }, {
    "from": 175,
    "label": "calls",
    "to": 548
  }, {
    "from": 191,
    "label": "calls",
    "to": 548
  }, {
    "from": 197,
    "label": "calls",
    "to": 548
  }, {
    "from": 200,
    "label": "calls",
    "to": 548
  }, {
    "from": 187,
    "label": "calls",
    "to": 548
  }, {
    "from": 304,
    "label": "calls",
    "to": 548
  }, {
    "from": 317,
    "label": "calls",
    "to": 548
  }, {
    "from": 317,
    "label": "calls",
    "to": 548
  }, {
    "from": 361,
    "label": "calls",
    "to": 548
  }, {
    "from": 226,
    "label": "calls",
    "to": 544
  }, {
    "from": 535,
    "label": "calls",
    "to": 572
  }, {
    "from": 535,
    "label": "calls",
    "to": 572
  }, {
    "from": 535,
    "label": "calls",
    "to": 572
  }, {
    "from": 535,
    "label": "calls",
    "to": 572
  }, {
    "from": 535,
    "label": "calls",
    "to": 572
  }, {
    "from": 535,
    "label": "calls",
    "to": 572
  }, {
    "from": 535,
    "label": "calls",
    "to": 572
  }, {
    "from": 535,
    "label": "calls",
    "to": 572
  }, {
    "from": 535,
    "label": "calls",
    "to": 572
  }, {
    "from": 535,
    "label": "calls",
    "to": 572
  }, {
    "from": 240,
    "label": "calls",
    "to": 21
  }, {
    "from": 240,
    "label": "calls",
    "to": 21
  }, {
    "from": 240,
    "label": "calls",
    "to": 21
  }, {
    "from": 240,
    "label": "calls",
    "to": 21
  }, {
    "from": 240,
    "label": "calls",
    "to": 21
  }, {
    "from": 240,
    "label": "calls",
    "to": 21
  }, {
    "from": 240,
    "label": "calls",
    "to": 21
  }, {
    "from": 262,
    "label": "calls",
    "to": 21
  }, {
    "from": 175,
    "label": "calls",
    "to": 547
  }, {
    "from": 181,
    "label": "calls",
    "to": 570
  }, {
    "from": 181,
    "label": "calls",
    "to": 570
  }, {
    "from": 181,
    "label": "calls",
    "to": 570
  }, {
    "from": 181,
    "label": "calls",
    "to": 570
  }, {
    "from": 226,
    "label": "calls",
    "to": 538
  }, {
    "from": 226,
    "label": "calls",
    "to": 538
  }, {
    "from": 240,
    "label": "calls",
    "to": 538
  }, {
    "from": 240,
    "label": "calls",
    "to": 538
  }, {
    "from": 240,
    "label": "calls",
    "to": 538
  }, {
    "from": 240,
    "label": "calls",
    "to": 538
  }, {
    "from": 240,
    "label": "calls",
    "to": 538
  }, {
    "from": 240,
    "label": "calls",
    "to": 538
  }, {
    "from": 262,
    "label": "calls",
    "to": 538
  }, {
    "from": 266,
    "label": "calls",
    "to": 538
  }, {
    "from": 372,
    "label": "calls",
    "to": 538
  }, {
    "from": 480,
    "label": "calls",
    "to": 538
  }, {
    "from": 487,
    "label": "calls",
    "to": 538
  }, {
    "from": 240,
    "label": "calls",
    "to": 571
  }, {
    "from": 240,
    "label": "calls",
    "to": 571
  }, {
    "from": 240,
    "label": "calls",
    "to": 571
  }, {
    "from": 240,
    "label": "calls",
    "to": 571
  }, {
    "from": 240,
    "label": "calls",
    "to": 571
  }, {
    "from": 240,
    "label": "calls",
    "to": 571
  }, {
    "from": 240,
    "label": "calls",
    "to": 571
  }, {
    "from": 262,
    "label": "calls",
    "to": 571
  }, {
    "from": 383,
    "label": "calls",
    "to": 571
  }, {
    "from": 396,
    "label": "calls",
    "to": 571
  }, {
    "from": 480,
    "label": "calls",
    "to": 571
  }, {
    "from": 487,
    "label": "calls",
    "to": 571
  }, {
    "from": 181,
    "label": "calls",
    "to": 550
  }, {
    "from": 317,
    "label": "calls",
    "to": 550
  }, {
    "from": 480,
    "label": "calls",
    "to": 549
  }, {
    "from": 60,
    "label": "calls",
    "to": 562
  }, {
    "from": 60,
    "label": "calls",
    "to": 562
  }, {
    "from": 240,
    "label": "calls",
    "to": 569
  }, {
    "from": 240,
    "label": "calls",
    "to": 569
  }, {
    "from": 240,
    "label": "calls",
    "to": 569
  }, {
    "from": 240,
    "label": "calls",
    "to": 569
  }, {
    "from": 240,
    "label": "calls",
    "to": 569
  }, {
    "from": 240,
    "label": "calls",
    "to": 569
  }, {
    "from": 262,
    "label": "calls",
    "to": 569
  }, {
    "from": 262,
    "label": "calls",
    "to": 569
  }, {
    "from": 226,
    "label": "calls",
    "to": 557
  }, {
    "from": 181,
    "label": "calls",
    "to": 560
  }, {
    "from": 181,
    "label": "calls",
    "to": 560
  }, {
    "from": 181,
    "label": "calls",
    "to": 560
  }, {
    "from": 191,
    "label": "calls",
    "to": 560
  }, {
    "from": 197,
    "label": "calls",
    "to": 560
  }, {
    "from": 200,
    "label": "calls",
    "to": 560
  }, {
    "from": 200,
    "label": "calls",
    "to": 560
  }, {
    "from": 181,
    "label": "calls",
    "to": 560
  }, {
    "from": 181,
    "label": "calls",
    "to": 560
  }, {
    "from": 181,
    "label": "calls",
    "to": 560
  }, {
    "from": 181,
    "label": "calls",
    "to": 560
  }, {
    "from": 181,
    "label": "calls",
    "to": 560
  }, {
    "from": 26,
    "label": "calls",
    "to": 568
  }, {
    "from": 26,
    "label": "calls",
    "to": 568
  }, {
    "from": 26,
    "label": "calls",
    "to": 568
  }, {
    "from": 40,
    "label": "calls",
    "to": 568
  }, {
    "from": 40,
    "label": "calls",
    "to": 568
  }, {
    "from": 40,
    "label": "calls",
    "to": 568
  }, {
    "from": 40,
    "label": "calls",
    "to": 568
  }, {
    "from": 40,
    "label": "calls",
    "to": 568
  }, {
    "from": 40,
    "label": "calls",
    "to": 568
  }, {
    "from": 40,
    "label": "calls",
    "to": 568
  }, {
    "from": 40,
    "label": "calls",
    "to": 568
  }, {
    "from": 69,
    "label": "calls",
    "to": 568
  }, {
    "from": 69,
    "label": "calls",
    "to": 568
  }, {
    "from": 69,
    "label": "calls",
    "to": 568
  }, {
    "from": 69,
    "label": "calls",
    "to": 568
  }, {
    "from": 69,
    "label": "calls",
    "to": 568
  }, {
    "from": 76,
    "label": "calls",
    "to": 568
  }, {
    "from": 76,
    "label": "calls",
    "to": 568
  }, {
    "from": 76,
    "label": "calls",
    "to": 568
  }, {
    "from": 76,
    "label": "calls",
    "to": 568
  }, {
    "from": 76,
    "label": "calls",
    "to": 568
  }, {
    "from": 76,
    "label": "calls",
    "to": 568
  }, {
    "from": 76,
    "label": "calls",
    "to": 568
  }, {
    "from": 76,
    "label": "calls",
    "to": 568
  }, {
    "from": 76,
    "label": "calls",
    "to": 568
  }, {
    "from": 76,
    "label": "calls",
    "to": 568
  }, {
    "from": 76,
    "label": "calls",
    "to": 568
  }, {
    "from": 76,
    "label": "calls",
    "to": 568
  }, {
    "from": 97,
    "label": "calls",
    "to": 568
  }, {
    "from": 97,
    "label": "calls",
    "to": 568
  }, {
    "from": 97,
    "label": "calls",
    "to": 568
  }, {
    "from": 97,
    "label": "calls",
    "to": 568
  }, {
    "from": 106,
    "label": "calls",
    "to": 568
  }, {
    "from": 106,
    "label": "calls",
    "to": 568
  }, {
    "from": 106,
    "label": "calls",
    "to": 568
  }, {
    "from": 106,
    "label": "calls",
    "to": 568
  }, {
    "from": 106,
    "label": "calls",
    "to": 568
  }, {
    "from": 106,
    "label": "calls",
    "to": 568
  }, {
    "from": 106,
    "label": "calls",
    "to": 568
  }, {
    "from": 106,
    "label": "calls",
    "to": 568
  }, {
    "from": 106,
    "label": "calls",
    "to": 568
  }, {
    "from": 106,
    "label": "calls",
    "to": 568
  }, {
    "from": 106,
    "label": "calls",
    "to": 568
  }, {
    "from": 106,
    "label": "calls",
    "to": 568
  }, {
    "from": 106,
    "label": "calls",
    "to": 568
  }, {
    "from": 106,
    "label": "calls",
    "to": 568
  }, {
    "from": 106,
    "label": "calls",
    "to": 568
  }, {
    "from": 106,
    "label": "calls",
    "to": 568
  }, {
    "from": 106,
    "label": "calls",
    "to": 568
  }, {
    "from": 106,
    "label": "calls",
    "to": 568
  }, {
    "from": 106,
    "label": "calls",
    "to": 568
  }, {
    "from": 127,
    "label": "calls",
    "to": 568
  }, {
    "from": 127,
    "label": "calls",
    "to": 568
  }, {
    "from": 127,
    "label": "calls",
    "to": 568
  }, {
    "from": 127,
    "label": "calls",
    "to": 568
  }, {
    "from": 127,
    "label": "calls",
    "to": 568
  }, {
    "from": 127,
    "label": "calls",
    "to": 568
  }, {
    "from": 127,
    "label": "calls",
    "to": 568
  }, {
    "from": 127,
    "label": "calls",
    "to": 568
  }, {
    "from": 127,
    "label": "calls",
    "to": 568
  }, {
    "from": 127,
    "label": "calls",
    "to": 568
  }, {
    "from": 127,
    "label": "calls",
    "to": 568
  }, {
    "from": 127,
    "label": "calls",
    "to": 568
  }, {
    "from": 127,
    "label": "calls",
    "to": 568
  }, {
    "from": 127,
    "label": "calls",
    "to": 568
  }, {
    "from": 143,
    "label": "calls",
    "to": 568
  }, {
    "from": 143,
    "label": "calls",
    "to": 568
  }, {
    "from": 143,
    "label": "calls",
    "to": 568
  }, {
    "from": 143,
    "label": "calls",
    "to": 568
  }, {
    "from": 143,
    "label": "calls",
    "to": 568
  }, {
    "from": 143,
    "label": "calls",
    "to": 568
  }, {
    "from": 143,
    "label": "calls",
    "to": 568
  }, {
    "from": 143,
    "label": "calls",
    "to": 568
  }, {
    "from": 143,
    "label": "calls",
    "to": 568
  }, {
    "from": 154,
    "label": "calls",
    "to": 568
  }, {
    "from": 154,
    "label": "calls",
    "to": 568
  }, {
    "from": 154,
    "label": "calls",
    "to": 568
  }, {
    "from": 154,
    "label": "calls",
    "to": 568
  }, {
    "from": 170,
    "label": "calls",
    "to": 568
  }, {
    "from": 170,
    "label": "calls",
    "to": 568
  }, {
    "from": 175,
    "label": "calls",
    "to": 568
  }, {
    "from": 175,
    "label": "calls",
    "to": 568
  }, {
    "from": 191,
    "label": "calls",
    "to": 568
  }, {
    "from": 197,
    "label": "calls",
    "to": 568
  }, {
    "from": 223,
    "label": "calls",
    "to": 568
  }, {
    "from": 226,
    "label": "calls",
    "to": 568
  }, {
    "from": 226,
    "label": "calls",
    "to": 568
  }, {
    "from": 240,
    "label": "calls",
    "to": 568
  }, {
    "from": 240,
    "label": "calls",
    "to": 568
  }, {
    "from": 240,
    "label": "calls",
    "to": 568
  }, {
    "from": 240,
    "label": "calls",
    "to": 568
  }, {
    "from": 240,
    "label": "calls",
    "to": 568
  }, {
    "from": 304,
    "label": "calls",
    "to": 568
  }, {
    "from": 304,
    "label": "calls",
    "to": 568
  }, {
    "from": 350,
    "label": "calls",
    "to": 568
  }, {
    "from": 354,
    "label": "calls",
    "to": 568
  }, {
    "from": 357,
    "label": "calls",
    "to": 568
  }, {
    "from": 361,
    "label": "calls",
    "to": 568
  }, {
    "from": 365,
    "label": "calls",
    "to": 568
  }, {
    "from": 368,
    "label": "calls",
    "to": 568
  }, {
    "from": 372,
    "label": "calls",
    "to": 568
  }, {
    "from": 372,
    "label": "calls",
    "to": 568
  }, {
    "from": 383,
    "label": "calls",
    "to": 568
  }, {
    "from": 383,
    "label": "calls",
    "to": 568
  }, {
    "from": 383,
    "label": "calls",
    "to": 568
  }, {
    "from": 396,
    "label": "calls",
    "to": 568
  }, {
    "from": 200,
    "label": "calls",
    "to": 568
  }, {
    "from": 428,
    "label": "calls",
    "to": 568
  }, {
    "from": 434,
    "label": "calls",
    "to": 568
  }, {
    "from": 445,
    "label": "calls",
    "to": 568
  }, {
    "from": 445,
    "label": "calls",
    "to": 568
  }, {
    "from": 451,
    "label": "calls",
    "to": 568
  }, {
    "from": 462,
    "label": "calls",
    "to": 568
  }, {
    "from": 462,
    "label": "calls",
    "to": 568
  }, {
    "from": 535,
    "label": "calls",
    "to": 580
  }, {
    "from": 535,
    "label": "calls",
    "to": 580
  }, {
    "from": 76,
    "label": "calls",
    "to": 552
  }, {
    "from": 76,
    "label": "calls",
    "to": 552
  }, {
    "from": 76,
    "label": "calls",
    "to": 552
  }, {
    "from": 76,
    "label": "calls",
    "to": 552
  }, {
    "from": 535,
    "label": "calls",
    "to": 543
  }, {
    "from": 2,
    "label": "contains",
    "to": 535
  }, {
    "from": 535,
    "label": "declares",
    "to": 4
  }, {
    "from": 535,
    "label": "declares",
    "to": 14
  }, {
    "from": 535,
    "label": "declares",
    "to": 19
  }, {
    "from": 535,
    "label": "declares",
    "to": 21
  }, {
    "from": 535,
    "label": "declares",
    "to": 26
  }, {
    "from": 535,
    "label": "declares",
    "to": 33
  }, {
    "from": 535,
    "label": "declares",
    "to": 40
  }, {
    "from": 535,
    "label": "declares",
    "to": 52
  }, {
    "from": 535,
    "label": "declares",
    "to": 60
  }, {
    "from": 535,
    "label": "declares",
    "to": 69
  }, {
    "from": 535,
    "label": "declares",
    "to": 76
  }, {
    "from": 535,
    "label": "declares",
    "to": 97
  }, {
    "from": 535,
    "label": "declares",
    "to": 106
  }, {
    "from": 535,
    "label": "declares",
    "to": 127
  }, {
    "from": 535,
    "label": "declares",
    "to": 143
  }, {
    "from": 535,
    "label": "declares",
    "to": 154
  }, {
    "from": 535,
    "label": "declares",
    "to": 160
  }, {
    "from": 535,
    "label": "declares",
    "to": 170
  }, {
    "from": 535,
    "label": "declares",
    "to": 175
  }, {
    "from": 535,
    "label": "declares",
    "to": 181
  }, {
    "from": 535,
    "label": "declares",
    "to": 187
  }, {
    "from": 535,
    "label": "declares",
    "to": 191
  }, {
    "from": 535,
    "label": "declares",
    "to": 197
  }, {
    "from": 535,
    "label": "declares",
    "to": 200
  }, {
    "from": 535,
    "label": "declares",
    "to": 210
  }, {
    "from": 535,
    "label": "declares",
    "to": 215
  }, {
    "from": 535,
    "label": "declares",
    "to": 223
  }, {
    "from": 535,
    "label": "declares",
    "to": 226
  }, {
    "from": 535,
    "label": "declares",
    "to": 240
  }, {
    "from": 535,
    "label": "declares",
    "to": 262
  }, {
    "from": 535,
    "label": "declares",
    "to": 266
  }, {
    "from": 535,
    "label": "declares",
    "to": 273
  }, {
    "from": 535,
    "label": "declares",
    "to": 280
  }, {
    "from": 535,
    "label": "declares",
    "to": 289
  }, {
    "from": 535,
    "label": "declares",
    "to": 297
  }, {
    "from": 535,
    "label": "declares",
    "to": 301
  }, {
    "from": 535,
    "label": "declares",
    "to": 304
  }, {
    "from": 535,
    "label": "declares",
    "to": 309
  }, {
    "from": 535,
    "label": "declares",
    "to": 313
  }, {
    "from": 535,
    "label": "declares",
    "to": 317
  }, {
    "from": 535,
    "label": "declares",
    "to": 324
  }, {
    "from": 535,
    "label": "declares",
    "to": 342
  }, {
    "from": 535,
    "label": "declares",
    "to": 350
  }, {
    "from": 535,
    "label": "declares",
    "to": 354
  }, {
    "from": 535,
    "label": "declares",
    "to": 357
  }, {
    "from": 535,
    "label": "declares",
    "to": 361
  }, {
    "from": 535,
    "label": "declares",
    "to": 365
  }, {
    "from": 535,
    "label": "declares",
    "to": 368
  }, {
    "from": 535,
    "label": "declares",
    "to": 372
  }, {
    "from": 535,
    "label": "declares",
    "to": 383
  }, {
    "from": 535,
    "label": "declares",
    "to": 396
  }, {
    "from": 535,
    "label": "declares",
    "to": 401
  }, {
    "from": 535,
    "label": "declares",
    "to": 404
  }, {
    "from": 535,
    "label": "declares",
    "to": 416
  }, {
    "from": 535,
    "label": "declares",
    "to": 424
  }, {
    "from": 535,
    "label": "declares",
    "to": 428
  }, {
    "from": 535,
    "label": "declares",
    "to": 434
  }, {
    "from": 535,
    "label": "declares",
    "to": 445
  }, {
    "from": 535,
    "label": "declares",
    "to": 451
  }, {
    "from": 535,
    "label": "declares",
    "to": 458
  }, {
    "from": 535,
    "label": "declares",
    "to": 462
  }, {
    "from": 535,
    "label": "declares",
    "to": 467
  }, {
    "from": 535,
    "label": "declares",
    "to": 474
  }, {
    "from": 535,
    "label": "declares",
    "to": 480
  }, {
    "from": 535,
    "label": "declares",
    "to": 487
  }, {
    "from": 535,
    "label": "declares",
    "to": 491
  }, {
    "from": 535,
    "label": "declares",
    "to": 492
  }, {
    "from": 535,
    "label": "declares",
    "to": 493
  }, {
    "from": 535,
    "label": "declares",
    "to": 494
  }, {
    "from": 535,
    "label": "declares",
    "to": 495
  }, {
    "from": 535,
    "label": "declares",
    "to": 496
  }, {
    "from": 535,
    "label": "declares",
    "to": 497
  }, {
    "from": 535,
    "label": "declares",
    "to": 499
  }, {
    "from": 535,
    "label": "declares",
    "to": 501
  }, {
    "from": 535,
    "label": "declares",
    "to": 503
  }, {
    "from": 535,
    "label": "declares",
    "to": 505
  }, {
    "from": 535,
    "label": "declares",
    "to": 507
  }, {
    "from": 535,
    "label": "declares",
    "to": 509
  }, {
    "from": 535,
    "label": "declares",
    "to": 511
  }, {
    "from": 535,
    "label": "declares",
    "to": 513
  }, {
    "from": 535,
    "label": "declares",
    "to": 515
  }, {
    "from": 535,
    "label": "declares",
    "to": 517
  }, {
    "from": 535,
    "label": "declares",
    "to": 519
  }, {
    "from": 535,
    "label": "declares",
    "to": 521
  }, {
    "from": 535,
    "label": "declares",
    "to": 523
  }, {
    "from": 535,
    "label": "declares",
    "to": 525
  }, {
    "from": 535,
    "label": "declares",
    "to": 527
  }, {
    "from": 535,
    "label": "declares",
    "to": 529
  }, {
    "from": 535,
    "label": "declares",
    "to": 531
  }, {
    "from": 535,
    "label": "declares",
    "to": 533
  }, {
    "from": 581,
    "label": "requires",
    "to": 2
  }, {
    "from": 2,
    "label": "contains",
    "to": 582
  }, {
    "from": 2,
    "label": "contains",
    "to": 583
  }, {
    "from": 582,
    "label": "initializes",
    "to": 584
  }, {
    "from": 584,
    "label": "assigns",
    "to": 585
  }, {
    "from": 582,
    "label": "initializes",
    "to": 586
  }, {
    "from": 586,
    "label": "assigns",
    "to": 587
  }, {
    "from": 582,
    "label": "initializes",
    "to": 588
  }, {
    "from": 588,
    "label": "assigns",
    "to": 589
  }, {
    "from": 582,
    "label": "initializes",
    "to": 590
  }, {
    "from": 590,
    "label": "assigns",
    "to": 591
  }, {
    "from": 582,
    "label": "initializes",
    "to": 592
  }, {
    "from": 592,
    "label": "assigns",
    "to": 593
  }, {
    "from": 582,
    "label": "initializes",
    "to": 594
  }, {
    "from": 594,
    "label": "assigns",
    "to": 595
  }, {
    "from": 582,
    "label": "initializes",
    "to": 596
  }, {
    "from": 596,
    "label": "assigns",
    "to": 597
  }, {
    "from": 582,
    "label": "initializes",
    "to": 598
  }, {
    "from": 598,
    "label": "assigns",
    "to": 599
  }, {
    "from": 582,
    "label": "initializes",
    "to": 600
  }, {
    "from": 600,
    "label": "assigns",
    "to": 601
  }, {
    "from": 582,
    "label": "initializes",
    "to": 602
  }, {
    "from": 602,
    "label": "assigns",
    "to": 603
  }, {
    "from": 582,
    "label": "initializes",
    "to": 604
  }, {
    "from": 604,
    "label": "assigns",
    "to": 605
  }, {
    "from": 582,
    "label": "initializes",
    "to": 606
  }, {
    "from": 606,
    "label": "assigns",
    "to": 607
  }, {
    "from": 582,
    "label": "initializes",
    "to": 608
  }, {
    "from": 608,
    "label": "assigns",
    "to": 609
  }, {
    "from": 583,
    "label": "initializes",
    "to": 610
  }, {
    "from": 610,
    "label": "requires",
    "to": 542
  }, {
    "from": 583,
    "label": "initializes",
    "to": 611
  }, {
    "from": 611,
    "label": "requires",
    "to": 1
  }, {
    "from": 584,
    "label": "represents",
    "to": 612
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 491
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 493
  }, {
    "from": 64,
    "label": "hasArgument",
    "to": 492
  }, {
    "from": 64,
    "label": "hasArgument",
    "to": 494
  }, {
    "from": 66,
    "label": "hasArgument",
    "to": 491
  }, {
    "from": 66,
    "label": "hasArgument",
    "to": 493
  }, {
    "from": 67,
    "label": "hasArgument",
    "to": 492
  }, {
    "from": 67,
    "label": "hasArgument",
    "to": 494
  }, {
    "from": 165,
    "label": "hasArgument",
    "to": 495
  }, {
    "from": 167,
    "label": "hasArgument",
    "to": 496
  }, {
    "from": 234,
    "label": "hasArgument",
    "to": 497
  }, {
    "from": 237,
    "label": "hasArgument",
    "to": 499
  }, {
    "from": 243,
    "label": "hasArgument",
    "to": 501
  }, {
    "from": 243,
    "label": "hasArgument",
    "to": 503
  }, {
    "from": 243,
    "label": "hasArgument",
    "to": 509
  }, {
    "from": 250,
    "label": "hasArgument",
    "to": 501
  }, {
    "from": 250,
    "label": "hasArgument",
    "to": 503
  }, {
    "from": 250,
    "label": "hasArgument",
    "to": 509
  }, {
    "from": 253,
    "label": "hasArgument",
    "to": 505
  }, {
    "from": 257,
    "label": "hasArgument",
    "to": 507
  }, {
    "from": 263,
    "label": "hasArgument",
    "to": 501
  }, {
    "from": 263,
    "label": "hasArgument",
    "to": 503
  }, {
    "from": 263,
    "label": "hasArgument",
    "to": 509
  }, {
    "from": 268,
    "label": "hasArgument",
    "to": 511
  }, {
    "from": 379,
    "label": "hasArgument",
    "to": 513
  }, {
    "from": 402,
    "label": "hasArgument",
    "to": 519
  }, {
    "from": 453,
    "label": "hasArgument",
    "to": 523
  }, {
    "from": 453,
    "label": "hasArgument",
    "to": 525
  }, {
    "from": 453,
    "label": "hasArgument",
    "to": 527
  }, {
    "from": 459,
    "label": "hasArgument",
    "to": 523
  }, {
    "from": 459,
    "label": "hasArgument",
    "to": 527
  }, {
    "from": 459,
    "label": "hasArgument",
    "to": 529
  }, {
    "from": 483,
    "label": "hasArgument",
    "to": 531
  }, {
    "from": 483,
    "label": "hasArgument",
    "to": 533
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "path",
    "type": "module"
  }, {
    "id": 2,
    "text": "test",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function splitpath(P, sep)\r\n  local pos = find_last(P, sep)\r\n  if not pos then return \"\", P end\r\n  return string.sub(P, 1, pos - #sep - 1), string.sub(P, pos)\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local function mkfile(P, data)\r\n  P = path.fullpath(P)\r\n  path.mkdir(path.dirname(P))\r\n  local f, e = io.open(P, \"w+b\")\r\n  if not f then return nil, err end\r\n  if data then assert(f:write(data)) end\r\n  f:close()\r\n  return P\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "P = path.fullpath(P)",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "path.mkdir(path.dirname(P))",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "local f, e = io.open(P, \"w+b\")",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "if not f then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 10,
    "text": "if data then assert(f:write(data)) end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "assert(f:write(data))",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "local function read_file(P)\r\n  local f, err = io.open(P, \"rb\")\r\n  if not f then return nil, err end\r\n  local data, err = f:read(\"*all\")\r\n  f:close()\r\n  if data then return data end\r\n  return nil, err\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "local f, err = io.open(P, \"rb\")",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "local data, err = f:read(\"*all\")",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "if data then return data end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "local function up(str)\r\n  return path.IS_WINDOWS and str:upper() or str\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "local function clone(t, o)\r\n  o = o or {}\r\n  for k,v in pairs(t) do\r\n    o[ k ] = v\r\n  end\r\n  return o\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "o = o or {}",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "for k,v in pairs(t) do\r\n    o[ k ] = v\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 24,
    "text": "o[ k ] = v",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "local function testpath(pth,p1,p2,p3)\r\n  local dir,rest = path.splitpath(pth)\r\n  local name,ext = path.splitext(rest)\r\n  assert_equal(p1, dir )\r\n  assert_equal(p2, name)\r\n  assert_equal(p3, ext )\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "local dir,rest = path.splitpath(pth)",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "local name,ext = path.splitext(rest)",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "assert_equal(p1, dir )",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "assert_equal(p2, name)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "assert_equal(p3, ext )",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function test_penlight_1()\r\n  testpath ([[/bonzo/dog_stuff/cat.txt]],[[/bonzo/dog_stuff]],'cat','.txt')\r\n  testpath ([[/bonzo/dog/cat/fred.stuff]],'/bonzo/dog/cat','fred','.stuff')\r\n  testpath ([[../../alice/jones]],'../../alice','jones','')\r\n  testpath ([[alice]],'','alice','')\r\n  testpath ([[/path-to/dog/]],[[/path-to/dog]],'','')\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "testpath ([[/bonzo/dog_stuff/cat.txt]],[[/bonzo/dog_stuff]],'cat','.txt')",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "testpath ([[/bonzo/dog/cat/fred.stuff]],'/bonzo/dog/cat','fred','.stuff')",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "testpath ([[../../alice/jones]],'../../alice','jones','')",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "testpath ([[alice]],'','alice','')",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "testpath ([[/path-to/dog/]],[[/path-to/dog]],'','')",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function test_penlight_2()\r\n  local p = path_unx:normolize( '/a/b' )\r\n  assert_equal('/a/b',p)\r\n  assert_equal(p, path_unx:normolize( '/a/fred/../b' ))\r\n  assert_equal(p, path_unx:normolize( '/a//b'        ))\r\n  assert_equal(p, path_unx:normolize( '/a/./b'       ))\r\n\r\n  local p = path_win:normolize( '/a/b' )\r\n  assert_equal('\\\\a\\\\b',p)\r\n  assert_equal(p, path_win:normolize( '/a/fred/../b' ))\r\n  assert_equal(p, path_win:normolize( '/a//b'        ))\r\n  assert_equal(p, path_win:normolize( '/a/./b'       ))\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "local p = path_unx:normolize( '/a/b' )",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "assert_equal('/a/b',p)",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "assert_equal(p, path_unx:normolize( '/a/fred/../b' ))",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "assert_equal(p, path_unx:normolize( '/a//b'        ))",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "assert_equal(p, path_unx:normolize( '/a/./b'       ))",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "local p = path_win:normolize( '/a/b' )",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "assert_equal('\\\\a\\\\b',p)",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "assert_equal(p, path_win:normolize( '/a/fred/../b' ))",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "assert_equal(p, path_win:normolize( '/a//b'        ))",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "assert_equal(p, path_win:normolize( '/a/./b'       ))",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function test_penlight_3()\r\n  if not path.isdir then assert_false('lfs module not found') end\r\n  assert (  path.isdir( \"../lua\" ))\r\n  assert_false ( path.isfile( \"../lua\" ))\r\n\r\n  assert ( path.isfile( \"../lua/path.lua\" ) )\r\n  assert_false( path.isdir( \"../lua/path.lua\" ))\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "if not path.isdir then assert_false('lfs module not found') end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "assert_false('lfs module not found')",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "assert (  path.isdir( \"../lua\" ))",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "assert_false ( path.isfile( \"../lua\" ))",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "assert ( path.isfile( \"../lua/path.lua\" ) )",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "assert_false( path.isdir( \"../lua/path.lua\" ))",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function test_system()\r\n  if not path.isdir then assert_false('lfs module not found') end\r\n  if path.IS_WINDOWS then \r\n    assert_error(function()path_unx:isdir(\"/any/\") end)\r\n    assert_pass (function()path_win:isdir(\"c:\\\\\")  end)\r\n  else \r\n    assert_pass (function()path_unx:isdir(\"/any/\") end)\r\n    assert_error(function()path_win:isdir(\"c:\\\\\")  end)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 61,
    "text": "if path.IS_WINDOWS then \r\n    assert_error(function()path_unx:isdir(\"/any/\") end)\r\n    assert_pass (function()path_win:isdir(\"c:\\\\\")  end)\r\n  else \r\n    assert_pass (function()path_unx:isdir(\"/any/\") end)\r\n    assert_error(function()path_win:isdir(\"c:\\\\\")  end)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "assert_error(function()path_unx:isdir(\"/any/\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "path_unx:isdir(\"/any/\")",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "assert_pass (function()path_win:isdir(\"c:\\\\\")  end)",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "path_win:isdir(\"c:\\\\\")",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "assert_pass (function()path_unx:isdir(\"/any/\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "assert_error(function()path_win:isdir(\"c:\\\\\")  end)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function test_split()\r\n  assert_equal('a', path_unx:root('/a/b/c'))\r\n  assert_equal('', path_unx:root('a/b/c'))\r\n\r\n  assert_equal('host', path_win:root('\\\\\\\\host\\\\a\\\\b\\\\c'))\r\n  assert_equal('a:',   path_win:root('a:\\\\b\\\\c'))\r\n  assert_equal('',     path_win:root('\\\\b\\\\c'))\r\nend",
    "type": "function"
  }, {
    "id": 70,
    "text": "assert_equal('a', path_unx:root('/a/b/c'))",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "assert_equal('', path_unx:root('a/b/c'))",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "assert_equal('host', path_win:root('\\\\\\\\host\\\\a\\\\b\\\\c'))",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "assert_equal('a:',   path_win:root('a:\\\\b\\\\c'))",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "assert_equal('',     path_win:root('\\\\b\\\\c'))",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "function test_splitext()\r\n  testpath ('.log','','.log','')\r\n  testpath ('path/.log','path','.log','')\r\n  testpath ('log','','log','')\r\n  testpath ('.log/','.log','','')\r\n  testpath ('.1001.log','','.1001','.log')\r\n  \r\n  local root, ext = path.splitext(\".log\")\r\n  assert_equal(\".log\", root)\r\n  assert_equal(\"\", ext)\r\n  assert_equal(ext, path.extension(\".log\"))\r\n\r\n  root, ext = path.splitext(\"test/.log\")\r\n  assert_equal(\"test/.log\", root)\r\n  assert_equal(\"\", ext)\r\n  assert_equal(ext, path.extension(\"test/.log\"))\r\n\r\n  root, ext = path.splitext(\"test/1.log\")\r\n  assert_equal(\"test/1\", root)\r\n  assert_equal(\".log\", ext)\r\n  assert_equal(ext, path.extension(\"test/1.log\"))\r\n\r\n  root, ext = path.splitext(\"test/.1.log\")\r\n  assert_equal(\"test/.1\", root)\r\n  assert_equal(\".log\", ext)\r\n  assert_equal(ext, path.extension(\"test/.1.log\"))\r\nend",
    "type": "function"
  }, {
    "id": 77,
    "text": "testpath ('.log','','.log','')",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "testpath ('path/.log','path','.log','')",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "testpath ('log','','log','')",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "testpath ('.log/','.log','','')",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "testpath ('.1001.log','','.1001','.log')",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "local root, ext = path.splitext(\".log\")",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "assert_equal(\".log\", root)",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "assert_equal(\"\", ext)",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "assert_equal(ext, path.extension(\".log\"))",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "root, ext = path.splitext(\"test/.log\")",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "assert_equal(\"test/.log\", root)",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "assert_equal(ext, path.extension(\"test/.log\"))",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "root, ext = path.splitext(\"test/1.log\")",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "assert_equal(\"test/1\", root)",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "assert_equal(\".log\", ext)",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "assert_equal(ext, path.extension(\"test/1.log\"))",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "root, ext = path.splitext(\"test/.1.log\")",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "assert_equal(\"test/.1\", root)",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "assert_equal(ext, path.extension(\"test/.1.log\"))",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "function test_splitdrive()\r\n  local a, b\r\n  a,b = path_unx:splitdrive('/root/etc')\r\n  assert_equal('', a) assert_equal('/root/etc', b)\r\n\r\n  a,b = path_win:splitdrive('c:\\\\root\\\\etc')\r\n  assert_equal('c:', a) assert_equal('root\\\\etc', b)\r\nend",
    "type": "function"
  }, {
    "id": 98,
    "text": "local a, b",
    "type": "statement:localassign"
  }, {
    "id": 99,
    "text": "a,b = path_unx:splitdrive('/root/etc')",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "assert_equal('', a)",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "assert_equal('/root/etc', b)",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "a,b = path_win:splitdrive('c:\\\\root\\\\etc')",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "assert_equal('c:', a)",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "assert_equal('root\\\\etc', b)",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 106,
    "text": "function test_norm()\r\n  assert_equal(\"..\\\\hello\",       path_win:normolize(\"..\\\\hello\"))\r\n  assert_equal(\"..\\\\hello\",       path_win:normolize(\"..\\\\hello\\\\world\\\\..\"))\r\n  assert_equal(\"c:\\\\hello\",       path_win:normolize(\"c:\\\\..\\\\hello\"))\r\n  assert_equal(\"c:\\\\hello\",       path_win:normolize(\"c:\\\\hello\\\\.\"))\r\n  assert_equal(\"c:\\\\hello\",       path_win:normolize(\"c:\\\\hello\\\\.\\\\.\"))\r\n  assert_equal(\"\\\\hello\",         path_win:normolize(\"\\\\..\\\\hello\")) -- full path without drive\r\n  assert_equal(\"\\\\\\\\host\\\\hello\", path_win:normolize(\"\\\\\\\\host\\\\..\\\\hello\"))\r\n  \r\n  assert_equal(\"/hello\",          path_unx:normolize(\"\\\\c\\\\..\\\\hello\"))\r\n  assert_equal(\"../hello\",        path_unx:normolize(\"..\\\\hello\\\\world\\\\..\"))\r\n  assert_equal(\"/home/test\",      path_unx:normolize(\"/home/test/.\"))\r\n  assert_equal(\"/home/test\",      path_unx:normolize(\"/home/test/./.\"))\r\n  assert_equal(\"/home/test/world\",path_unx:normolize(\"/home/test/./world\"))\r\n  assert_equal(\"/home/test\",      path_unx:normolize(\"\\\\home\\\\test\\\\.\"))\r\n  assert_equal(\"/\",               path_unx:normolize(\"/\"))\r\n  assert_equal(\"/\",               path_unx:normolize(\"/.\"))\r\n  assert_equal(\"/\",               path_unx:normolize(\"/./.\"))\r\n  assert_equal(\"/\",               path_unx:normolize(\"/./\"))\r\n  assert_equal(\".\",               path_unx:normolize(\"././\"))\r\n  assert_equal(\"/dev\",            path_unx:normolize(\"/./dev\"))\r\nend",
    "type": "function"
  }, {
    "id": 107,
    "text": "assert_equal(\"..\\\\hello\",       path_win:normolize(\"..\\\\hello\"))",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "assert_equal(\"..\\\\hello\",       path_win:normolize(\"..\\\\hello\\\\world\\\\..\"))",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "assert_equal(\"c:\\\\hello\",       path_win:normolize(\"c:\\\\..\\\\hello\"))",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "assert_equal(\"c:\\\\hello\",       path_win:normolize(\"c:\\\\hello\\\\.\"))",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "assert_equal(\"c:\\\\hello\",       path_win:normolize(\"c:\\\\hello\\\\.\\\\.\"))",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "assert_equal(\"\\\\hello\",         path_win:normolize(\"\\\\..\\\\hello\"))",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "assert_equal(\"\\\\\\\\host\\\\hello\", path_win:normolize(\"\\\\\\\\host\\\\..\\\\hello\"))",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "assert_equal(\"/hello\",          path_unx:normolize(\"\\\\c\\\\..\\\\hello\"))",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "assert_equal(\"../hello\",        path_unx:normolize(\"..\\\\hello\\\\world\\\\..\"))",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "assert_equal(\"/home/test\",      path_unx:normolize(\"/home/test/.\"))",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "assert_equal(\"/home/test\",      path_unx:normolize(\"/home/test/./.\"))",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "assert_equal(\"/home/test/world\",path_unx:normolize(\"/home/test/./world\"))",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "assert_equal(\"/home/test\",      path_unx:normolize(\"\\\\home\\\\test\\\\.\"))",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "assert_equal(\"/\",               path_unx:normolize(\"/\"))",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "assert_equal(\"/\",               path_unx:normolize(\"/.\"))",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "assert_equal(\"/\",               path_unx:normolize(\"/./.\"))",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "assert_equal(\"/\",               path_unx:normolize(\"/./\"))",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "assert_equal(\".\",               path_unx:normolize(\"././\"))",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "assert_equal(\"/dev\",            path_unx:normolize(\"/./dev\"))",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 127,
    "text": "function test_quote()\r\n  assert_equal('c:\\\\hello', path_win:quote('c:\\\\hello'))\r\n  assert_equal('\"c:\\\\hello world\"', path_win:quote('c:\\\\hello world'))\r\n  assert_equal('/hello', path_unx:quote('/hello'))\r\n  assert_equal('\"/hello world\"', path_unx:quote('/hello world'))\r\n\r\n  assert_equal('c:\\\\hello', path_win:unquote('c:\\\\hello'))\r\n  assert_equal('c:\\\\hello', path_win:unquote('\"c:\\\\hello\"'))\r\n  assert_equal('c:\\\\\"hello\"', path_win:unquote('c:\\\\\"hello\"'))\r\n  assert_equal('c:\\\\hello world', path_win:unquote('\"c:\\\\hello world\"'))\r\n  assert_equal('c:\\\\hello world', path_win:unquote('c:\\\\hello world'))\r\n  assert_equal('/hello', path_unx:unquote('/hello'))\r\n  assert_equal('/hello', path_unx:unquote('\"/hello\"'))\r\n  assert_equal('/\"hello\"', path_unx:unquote('/\"hello\"'))\r\n  assert_equal('/hello world', path_unx:unquote('/hello world'))\r\n  assert_equal('/hello world', path_unx:unquote('\"/hello world\"'))\r\nend",
    "type": "function"
  }, {
    "id": 128,
    "text": "assert_equal('c:\\\\hello', path_win:quote('c:\\\\hello'))",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "assert_equal('\"c:\\\\hello world\"', path_win:quote('c:\\\\hello world'))",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "assert_equal('/hello', path_unx:quote('/hello'))",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "assert_equal('\"/hello world\"', path_unx:quote('/hello world'))",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "assert_equal('c:\\\\hello', path_win:unquote('c:\\\\hello'))",
    "type": "statement:functioncall"
  }, {
    "id": 133,
    "text": "assert_equal('c:\\\\hello', path_win:unquote('\"c:\\\\hello\"'))",
    "type": "statement:functioncall"
  }, {
    "id": 134,
    "text": "assert_equal('c:\\\\\"hello\"', path_win:unquote('c:\\\\\"hello\"'))",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "assert_equal('c:\\\\hello world', path_win:unquote('\"c:\\\\hello world\"'))",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "assert_equal('c:\\\\hello world', path_win:unquote('c:\\\\hello world'))",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "assert_equal('/hello', path_unx:unquote('/hello'))",
    "type": "statement:functioncall"
  }, {
    "id": 138,
    "text": "assert_equal('/hello', path_unx:unquote('\"/hello\"'))",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "assert_equal('/\"hello\"', path_unx:unquote('/\"hello\"'))",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "assert_equal('/hello world', path_unx:unquote('/hello world'))",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "assert_equal('/hello world', path_unx:unquote('\"/hello world\"'))",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 143,
    "text": "function test_dir_end()\r\n  assert_equal('c:',              path_win:remove_dir_end('c:\\\\'))\r\n  assert_equal('c:',              path_win:remove_dir_end('c:\\\\\\\\'))\r\n  assert_equal('c:\\\\.',           path_win:remove_dir_end('c:\\\\.\\\\'))\r\n  assert_equal('c:\\\\',            path_win:ensure_dir_end('c:'))\r\n\r\n  assert_equal('',                path_unx:remove_dir_end('/'))\r\n  assert_equal('',                path_unx:remove_dir_end('//'))\r\n  assert_equal('.',               path_unx:remove_dir_end('./'))\r\n  assert_equal('/',               path_unx:ensure_dir_end(''))\r\n  assert_equal('/',               path_unx:ensure_dir_end('/'))\r\nend",
    "type": "function"
  }, {
    "id": 144,
    "text": "assert_equal('c:',              path_win:remove_dir_end('c:\\\\'))",
    "type": "statement:functioncall"
  }, {
    "id": 145,
    "text": "assert_equal('c:',              path_win:remove_dir_end('c:\\\\\\\\'))",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "assert_equal('c:\\\\.',           path_win:remove_dir_end('c:\\\\.\\\\'))",
    "type": "statement:functioncall"
  }, {
    "id": 147,
    "text": "assert_equal('c:\\\\',            path_win:ensure_dir_end('c:'))",
    "type": "statement:functioncall"
  }, {
    "id": 148,
    "text": "assert_equal('',                path_unx:remove_dir_end('/'))",
    "type": "statement:functioncall"
  }, {
    "id": 149,
    "text": "assert_equal('',                path_unx:remove_dir_end('//'))",
    "type": "statement:functioncall"
  }, {
    "id": 150,
    "text": "assert_equal('.',               path_unx:remove_dir_end('./'))",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "assert_equal('/',               path_unx:ensure_dir_end(''))",
    "type": "statement:functioncall"
  }, {
    "id": 152,
    "text": "assert_equal('/',               path_unx:ensure_dir_end('/'))",
    "type": "statement:functioncall"
  }, {
    "id": 153,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 154,
    "text": "function test_join()\r\n  assert_equal(\"hello\",                       path_win:join(\"hello\"))\r\n  assert_equal(\"hello\\\\world\",                path_win:join(\"hello\", \"\", \"world\"))\r\n  assert_equal(\"c:\\\\world\\\\some\\\\path\",       path_win:join(\"hello\", \"\", \"c:\\\\world\", \"some\", \"path\"))\r\n  assert_equal(\"hello\\\\\",                     path_win:join(\"hello\", \"\"))\r\nend",
    "type": "function"
  }, {
    "id": 155,
    "text": "assert_equal(\"hello\",                       path_win:join(\"hello\"))",
    "type": "statement:functioncall"
  }, {
    "id": 156,
    "text": "assert_equal(\"hello\\\\world\",                path_win:join(\"hello\", \"\", \"world\"))",
    "type": "statement:functioncall"
  }, {
    "id": 157,
    "text": "assert_equal(\"c:\\\\world\\\\some\\\\path\",       path_win:join(\"hello\", \"\", \"c:\\\\world\", \"some\", \"path\"))",
    "type": "statement:functioncall"
  }, {
    "id": 158,
    "text": "assert_equal(\"hello\\\\\",                     path_win:join(\"hello\", \"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 159,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 160,
    "text": "function test()\r\n  local p = path.IS_WINDOWS and path_unx or path_win\r\n  assert_boolean(path.IS_WINDOWS)\r\n  assert_boolean(p.IS_WINDOWS)\r\n  assert_not_equal(path.IS_WINDOWS, p.IS_WINDOWS)\r\n  assert_error(function() p:mkdir('./1') end)\r\n  assert_error(function() p:size('./1.txt') end)\r\nend",
    "type": "function"
  }, {
    "id": 161,
    "text": "local p = path.IS_WINDOWS and path_unx or path_win",
    "type": "statement:localassign"
  }, {
    "id": 162,
    "text": "assert_boolean(path.IS_WINDOWS)",
    "type": "statement:functioncall"
  }, {
    "id": 163,
    "text": "assert_boolean(p.IS_WINDOWS)",
    "type": "statement:functioncall"
  }, {
    "id": 164,
    "text": "assert_not_equal(path.IS_WINDOWS, p.IS_WINDOWS)",
    "type": "statement:functioncall"
  }, {
    "id": 165,
    "text": "assert_error(function() p:mkdir('./1') end)",
    "type": "statement:functioncall"
  }, {
    "id": 166,
    "text": "p:mkdir('./1')",
    "type": "statement:functioncall"
  }, {
    "id": 167,
    "text": "assert_error(function() p:size('./1.txt') end)",
    "type": "statement:functioncall"
  }, {
    "id": 168,
    "text": "p:size('./1.txt')",
    "type": "statement:functioncall"
  }, {
    "id": 169,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 170,
    "text": "function test_user_home()\r\n  local p = assert_string(path.user_home())\r\n  assert_equal(p, path.isdir(p))\r\n  assert_equal(p, path.fullpath(\"~\"))\r\nend",
    "type": "function"
  }, {
    "id": 171,
    "text": "local p = assert_string(path.user_home())",
    "type": "statement:localassign"
  }, {
    "id": 172,
    "text": "assert_equal(p, path.isdir(p))",
    "type": "statement:functioncall"
  }, {
    "id": 173,
    "text": "assert_equal(p, path.fullpath(\"~\"))",
    "type": "statement:functioncall"
  }, {
    "id": 174,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 175,
    "text": "function test_win()\r\n  if path.IS_WINDOWS then\r\n    local p = assert_string(path.currentdir())\r\n    assert_equal(p, path.isdir(p))\r\n    local _, tp = path.splitroot(p)\r\n    assert_equal(p, path.fullpath(path.DIR_SEP .. tp))\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 176,
    "text": "if path.IS_WINDOWS then\r\n    local p = assert_string(path.currentdir())\r\n    assert_equal(p, path.isdir(p))\r\n    local _, tp = path.splitroot(p)\r\n    assert_equal(p, path.fullpath(path.DIR_SEP .. tp))\r\n  end",
    "type": "statement:if"
  }, {
    "id": 177,
    "text": "local p = assert_string(path.currentdir())",
    "type": "statement:localassign"
  }, {
    "id": 178,
    "text": "local _, tp = path.splitroot(p)",
    "type": "statement:localassign"
  }, {
    "id": 179,
    "text": "assert_equal(p, path.fullpath(path.DIR_SEP .. tp))",
    "type": "statement:functioncall"
  }, {
    "id": 180,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 181,
    "text": "function teardown()\r\n  path.remove(path.join(cwd, '1', '2', '3', 'test.dat'))\r\n  path.rmdir(path.join(cwd, '1', '2', '3'))\r\n  path.rmdir(path.join(cwd, '1', '2'))\r\n  path.rmdir(path.join(cwd, '1'))\r\nend",
    "type": "function"
  }, {
    "id": 182,
    "text": "path.remove(path.join(cwd, '1', '2', '3', 'test.dat'))",
    "type": "statement:functioncall"
  }, {
    "id": 183,
    "text": "path.rmdir(path.join(cwd, '1', '2', '3'))",
    "type": "statement:functioncall"
  }, {
    "id": 184,
    "text": "path.rmdir(path.join(cwd, '1', '2'))",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "path.rmdir(path.join(cwd, '1'))",
    "type": "statement:functioncall"
  }, {
    "id": 186,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 187,
    "text": "function setup()\r\n  cwd = assert_string(path.currentdir())\r\n  teardown()\r\nend",
    "type": "function"
  }, {
    "id": 188,
    "text": "cwd = assert_string(path.currentdir())",
    "type": "statement:assign"
  }, {
    "id": 189,
    "text": "teardown()",
    "type": "statement:functioncall"
  }, {
    "id": 190,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 191,
    "text": "function test_mkdir_nested()\r\n  local DST = path.join(cwd, '1', '2', '3')\r\n  assert_equal(cwd, path.isdir(cwd))\r\n  assert_string(path.mkdir(DST))\r\n  assert_true  (path.rmdir(DST))\r\nend",
    "type": "function"
  }, {
    "id": 192,
    "text": "local DST = path.join(cwd, '1', '2', '3')",
    "type": "statement:localassign"
  }, {
    "id": 193,
    "text": "assert_equal(cwd, path.isdir(cwd))",
    "type": "statement:functioncall"
  }, {
    "id": 194,
    "text": "assert_string(path.mkdir(DST))",
    "type": "statement:functioncall"
  }, {
    "id": 195,
    "text": "assert_true  (path.rmdir(DST))",
    "type": "statement:functioncall"
  }, {
    "id": 196,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 197,
    "text": "function test_mkdir()\r\n  local DST = path.join(cwd, '1')\r\n  assert_equal(cwd, path.isdir(cwd))\r\n  assert_string(path.mkdir(DST))\r\n  assert_true  (path.rmdir(DST))\r\nend",
    "type": "function"
  }, {
    "id": 198,
    "text": "local DST = path.join(cwd, '1')",
    "type": "statement:localassign"
  }, {
    "id": 199,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 200,
    "text": "function test_clean()\r\n  assert(path.isdir(cwd))\r\n  assert(path.mkdir(path.join(cwd, '1', '2', '3')))\r\n  assert_nil(path.rmdir(path.join(cwd, '1')))\r\n  assert(mkfile(path.join(cwd, '1', '2', '3', 'test.dat')))\r\n  assert_nil(path.rmdir(path.join(cwd, '1', '2', '3')))\r\n  assert(path.remove(path.join(cwd, '1', '2', '3', 'test.dat')))\r\n  assert(path.remove(path.join(cwd, '1', '2', '3')))\r\n  assert_false( path.exists(path.join(cwd, '1', '2', '3')) )\r\nend",
    "type": "function"
  }, {
    "id": 201,
    "text": "assert(path.isdir(cwd))",
    "type": "statement:functioncall"
  }, {
    "id": 202,
    "text": "assert(path.mkdir(path.join(cwd, '1', '2', '3')))",
    "type": "statement:functioncall"
  }, {
    "id": 203,
    "text": "assert_nil(path.rmdir(path.join(cwd, '1')))",
    "type": "statement:functioncall"
  }, {
    "id": 204,
    "text": "assert(mkfile(path.join(cwd, '1', '2', '3', 'test.dat')))",
    "type": "statement:functioncall"
  }, {
    "id": 205,
    "text": "assert_nil(path.rmdir(path.join(cwd, '1', '2', '3')))",
    "type": "statement:functioncall"
  }, {
    "id": 206,
    "text": "assert(path.remove(path.join(cwd, '1', '2', '3', 'test.dat')))",
    "type": "statement:functioncall"
  }, {
    "id": 207,
    "text": "assert(path.remove(path.join(cwd, '1', '2', '3')))",
    "type": "statement:functioncall"
  }, {
    "id": 208,
    "text": "assert_false( path.exists(path.join(cwd, '1', '2', '3')) )",
    "type": "statement:functioncall"
  }, {
    "id": 209,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 210,
    "text": "function teardown()\r\n  collectgarbage(\"collect\") -- force clean lfs.dir\r\n  collectgarbage(\"collect\")\r\n  path.remove(path.join(cwd, '1', '2', '3', 'test.dat'))\r\n  path.remove(path.join(cwd, '1', '2', '3', 'test.txt'))\r\n  path.remove(path.join(cwd, '1', '2', '3', 'file.dat'))\r\n  path.rmdir(path.join(cwd, '1', '2', '3'))\r\n  path.rmdir(path.join(cwd, '1', '2'))\r\n  path.rmdir(path.join(cwd, '1'))\r\nend",
    "type": "function"
  }, {
    "id": 211,
    "text": "collectgarbage(\"collect\")",
    "type": "statement:functioncall"
  }, {
    "id": 212,
    "text": "path.remove(path.join(cwd, '1', '2', '3', 'test.txt'))",
    "type": "statement:functioncall"
  }, {
    "id": 213,
    "text": "path.remove(path.join(cwd, '1', '2', '3', 'file.dat'))",
    "type": "statement:functioncall"
  }, {
    "id": 214,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 215,
    "text": "function setup()\r\n  cwd = assert_string(path.currentdir())\r\n  teardown()\r\n  path.mkdir(path.join(cwd, '1', '2', '3'))\r\n  mkfile(path.join(cwd, '1', '2', '3', 'test.dat'), '12345')\r\n  mkfile(path.join(cwd, '1', '2', '3', 'test.txt'), '12345')\r\n  mkfile(path.join(cwd, '1', '2', '3', 'file.dat'), '12345')\r\n\r\n  files = {\r\n    [ up(path.join(cwd, '1', '2', '3', 'test.dat')) ] = true;\r\n    [ up(path.join(cwd, '1', '2', '3', 'test.txt')) ] = true;\r\n    [ up(path.join(cwd, '1', '2', '3', 'file.dat')) ] = true;\r\n  }\r\n\r\n  dirs = {\r\n    [ up(path.join(cwd, '1', '2', '3')) ] = true;\r\n    [ up(path.join(cwd, '1', '2')) ] = true;\r\n    [ up(path.join(cwd, '1' )) ] = true;\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 216,
    "text": "path.mkdir(path.join(cwd, '1', '2', '3'))",
    "type": "statement:functioncall"
  }, {
    "id": 217,
    "text": "mkfile(path.join(cwd, '1', '2', '3', 'test.dat'), '12345')",
    "type": "statement:functioncall"
  }, {
    "id": 218,
    "text": "mkfile(path.join(cwd, '1', '2', '3', 'test.txt'), '12345')",
    "type": "statement:functioncall"
  }, {
    "id": 219,
    "text": "mkfile(path.join(cwd, '1', '2', '3', 'file.dat'), '12345')",
    "type": "statement:functioncall"
  }, {
    "id": 220,
    "text": "files = {\r\n    [ up(path.join(cwd, '1', '2', '3', 'test.dat')) ] = true;\r\n    [ up(path.join(cwd, '1', '2', '3', 'test.txt')) ] = true;\r\n    [ up(path.join(cwd, '1', '2', '3', 'file.dat')) ] = true;\r\n  }",
    "type": "statement:assign"
  }, {
    "id": 221,
    "text": "dirs = {\r\n    [ up(path.join(cwd, '1', '2', '3')) ] = true;\r\n    [ up(path.join(cwd, '1', '2')) ] = true;\r\n    [ up(path.join(cwd, '1' )) ] = true;\r\n  }",
    "type": "statement:assign"
  }, {
    "id": 222,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 223,
    "text": "function test_cwd()\r\n  assert_equal(cwd, path.fullpath(\".\"))\r\nend",
    "type": "function"
  }, {
    "id": 224,
    "text": "assert_equal(cwd, path.fullpath(\".\"))",
    "type": "statement:functioncall"
  }, {
    "id": 225,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 226,
    "text": "function test_attr()\r\n  for P in pairs(files)do assert(path.exists(P)) end\r\n  for P in pairs(files)do assert(path.isfile(P)) end\r\n  for P in pairs(files)do assert_equal(5, path.size(P)) end\r\n\r\n  local ts = os.time()\r\n  path.each(\"./1/*\", function(f)\r\n    assert(path.isfile(f))\r\n    assert(path.touch(f, ts))\r\n  end, {skipdirs=true, recurse=true})\r\n\r\n  path.each(\"./1/*\", \"ft\", function(f,mt)\r\n    assert_equal(ts, mt)\r\n  end, {skipdirs=true, recurse=true})\r\nend",
    "type": "function"
  }, {
    "id": 227,
    "text": "for P in pairs(files)do assert(path.exists(P)) end",
    "type": "statement:genericfor"
  }, {
    "id": 228,
    "text": "assert(path.exists(P))",
    "type": "statement:functioncall"
  }, {
    "id": 229,
    "text": "for P in pairs(files)do assert(path.isfile(P)) end",
    "type": "statement:genericfor"
  }, {
    "id": 230,
    "text": "assert(path.isfile(P))",
    "type": "statement:functioncall"
  }, {
    "id": 231,
    "text": "for P in pairs(files)do assert_equal(5, path.size(P)) end",
    "type": "statement:genericfor"
  }, {
    "id": 232,
    "text": "assert_equal(5, path.size(P))",
    "type": "statement:functioncall"
  }, {
    "id": 233,
    "text": "local ts = os.time()",
    "type": "statement:localassign"
  }, {
    "id": 234,
    "text": "path.each(\"./1/*\", function(f)\r\n    assert(path.isfile(f))\r\n    assert(path.touch(f, ts))\r\n  end, {skipdirs=true, recurse=true})",
    "type": "statement:functioncall"
  }, {
    "id": 235,
    "text": "assert(path.isfile(f))",
    "type": "statement:functioncall"
  }, {
    "id": 236,
    "text": "assert(path.touch(f, ts))",
    "type": "statement:functioncall"
  }, {
    "id": 237,
    "text": "path.each(\"./1/*\", \"ft\", function(f,mt)\r\n    assert_equal(ts, mt)\r\n  end, {skipdirs=true, recurse=true})",
    "type": "statement:functioncall"
  }, {
    "id": 238,
    "text": "assert_equal(ts, mt)",
    "type": "statement:functioncall"
  }, {
    "id": 239,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 240,
    "text": "function test_findfile()\r\n  local params\r\n\r\n  params = clone(files)\r\n  path.each(\"./1/2/3/*.*\", function(f)\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    params[f] = nil\r\n  end)\r\n  assert_nil(next(params))\r\n\r\n  params = clone(files)\r\n  for f in path.each(\"./1/2/3/*.*\") do\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    params[f] = nil\r\n  end\r\n  assert_nil(next(params))\r\n\r\n  params = clone(files)\r\n  params = clone(dirs,params)\r\n  path.each(\"./1/*\", function(f)\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    params[f] = nil\r\n  end, {recurse=true})\r\n  assert_equal(up(path.join(cwd, '1' )), next(params))\r\n  assert_nil(next(params, up(path.join(cwd, '1' ))))\r\n\r\n  params = clone(files)\r\n  path.each(\"./1/2/3/*.*\", \"fz\", function(f, sz)\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    assert_equal(5, sz)\r\n    params[f] = nil\r\n  end)\r\n  assert_nil(next(params))\r\n\r\n  params = clone(files)\r\n  for f, sz in path.each(\"./1/2/3/*.*\", \"fz\") do\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    assert_equal(5, sz)\r\n    params[f] = nil\r\n  end\r\n  assert_nil(next(params))\r\n\r\n  params = clone(dirs)\r\n  path.each(\"./*\", \"fzm\", function(f, sz, m)\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    assert_equal('directory', m)\r\n    if path.IS_WINDOWS then assert_equal(0, sz) end\r\n    params[f] = nil\r\n  end, {skipfiles=true, recurse=true})\r\n  assert_nil(next(params))\r\n\r\nend",
    "type": "function"
  }, {
    "id": 241,
    "text": "local params",
    "type": "statement:localassign"
  }, {
    "id": 242,
    "text": "params = clone(files)",
    "type": "statement:assign"
  }, {
    "id": 243,
    "text": "path.each(\"./1/2/3/*.*\", function(f)\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    params[f] = nil\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 244,
    "text": "f = up(f)",
    "type": "statement:assign"
  }, {
    "id": 245,
    "text": "assert_not_nil(params[f], \"unexpected: \" .. f)",
    "type": "statement:functioncall"
  }, {
    "id": 246,
    "text": "params[f] = nil",
    "type": "statement:assign"
  }, {
    "id": 247,
    "text": "assert_nil(next(params))",
    "type": "statement:functioncall"
  }, {
    "id": 248,
    "text": "for f in path.each(\"./1/2/3/*.*\") do\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    params[f] = nil\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 249,
    "text": "params = clone(dirs,params)",
    "type": "statement:assign"
  }, {
    "id": 250,
    "text": "path.each(\"./1/*\", function(f)\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    params[f] = nil\r\n  end, {recurse=true})",
    "type": "statement:functioncall"
  }, {
    "id": 251,
    "text": "assert_equal(up(path.join(cwd, '1' )), next(params))",
    "type": "statement:functioncall"
  }, {
    "id": 252,
    "text": "assert_nil(next(params, up(path.join(cwd, '1' ))))",
    "type": "statement:functioncall"
  }, {
    "id": 253,
    "text": "path.each(\"./1/2/3/*.*\", \"fz\", function(f, sz)\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    assert_equal(5, sz)\r\n    params[f] = nil\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 254,
    "text": "assert_equal(5, sz)",
    "type": "statement:functioncall"
  }, {
    "id": 255,
    "text": "for f, sz in path.each(\"./1/2/3/*.*\", \"fz\") do\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    assert_equal(5, sz)\r\n    params[f] = nil\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 256,
    "text": "params = clone(dirs)",
    "type": "statement:assign"
  }, {
    "id": 257,
    "text": "path.each(\"./*\", \"fzm\", function(f, sz, m)\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    assert_equal('directory', m)\r\n    if path.IS_WINDOWS then assert_equal(0, sz) end\r\n    params[f] = nil\r\n  end, {skipfiles=true, recurse=true})",
    "type": "statement:functioncall"
  }, {
    "id": 258,
    "text": "assert_equal('directory', m)",
    "type": "statement:functioncall"
  }, {
    "id": 259,
    "text": "if path.IS_WINDOWS then assert_equal(0, sz) end",
    "type": "statement:if"
  }, {
    "id": 260,
    "text": "assert_equal(0, sz)",
    "type": "statement:functioncall"
  }, {
    "id": 261,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 262,
    "text": "function test_findfile_mask()\r\n  params = clone(files)\r\n  path.each(\"./1/2/3/t*.*\", function(f)\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    params[f] = nil\r\n  end)\r\n  assert_not_nil(next(params))\r\nend",
    "type": "function"
  }, {
    "id": 263,
    "text": "path.each(\"./1/2/3/t*.*\", function(f)\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    params[f] = nil\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 264,
    "text": "assert_not_nil(next(params))",
    "type": "statement:functioncall"
  }, {
    "id": 265,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 266,
    "text": "function test_findfile_break()\r\n  local flag = false\r\n  path.each(\"./1/2/3/*.*\", function()\r\n    assert_false(flag)\r\n    flag = true\r\n    return 'break'\r\n  end)\r\n  assert_true(flag)\r\nend",
    "type": "function"
  }, {
    "id": 267,
    "text": "local flag = false",
    "type": "statement:localassign"
  }, {
    "id": 268,
    "text": "path.each(\"./1/2/3/*.*\", function()\r\n    assert_false(flag)\r\n    flag = true\r\n    return 'break'\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 269,
    "text": "assert_false(flag)",
    "type": "statement:functioncall"
  }, {
    "id": 270,
    "text": "flag = true",
    "type": "statement:assign"
  }, {
    "id": 271,
    "text": "assert_true(flag)",
    "type": "statement:functioncall"
  }, {
    "id": 272,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 273,
    "text": "function teardown()\r\n  path.remove(path.join(cwd, '1', 'from.dat'))\r\n  path.remove(path.join(cwd, '1', 'to.dat'  ))\r\n  path.remove(path.join(cwd, '1', 'to.txt'))\r\n  path.remove(path.join(cwd, '1', 'to'))\r\n  path.remove(path.join(cwd, '1'))\r\nend",
    "type": "function"
  }, {
    "id": 274,
    "text": "path.remove(path.join(cwd, '1', 'from.dat'))",
    "type": "statement:functioncall"
  }, {
    "id": 275,
    "text": "path.remove(path.join(cwd, '1', 'to.dat'  ))",
    "type": "statement:functioncall"
  }, {
    "id": 276,
    "text": "path.remove(path.join(cwd, '1', 'to.txt'))",
    "type": "statement:functioncall"
  }, {
    "id": 277,
    "text": "path.remove(path.join(cwd, '1', 'to'))",
    "type": "statement:functioncall"
  }, {
    "id": 278,
    "text": "path.remove(path.join(cwd, '1'))",
    "type": "statement:functioncall"
  }, {
    "id": 279,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 280,
    "text": "function setup()\r\n  cwd = assert_string(path.currentdir())\r\n  teardown()\r\n  path.mkdir(path.join(cwd, '1'))\r\n  path.mkdir(path.join(cwd, '1', 'to'))\r\n  mkfile(path.join(cwd, '1', 'from.dat'))\r\n  mkfile(path.join(cwd, '1', 'to.dat'  ))\r\n\r\n  assert(path.isfile(path.join(cwd, '1', 'from.dat')))\r\n  assert(path.isfile(path.join(cwd, '1', 'to.dat'  )))\r\n  assert(path.isdir (path.join(cwd, '1', 'to'      )))\r\nend",
    "type": "function"
  }, {
    "id": 281,
    "text": "path.mkdir(path.join(cwd, '1'))",
    "type": "statement:functioncall"
  }, {
    "id": 282,
    "text": "path.mkdir(path.join(cwd, '1', 'to'))",
    "type": "statement:functioncall"
  }, {
    "id": 283,
    "text": "mkfile(path.join(cwd, '1', 'from.dat'))",
    "type": "statement:functioncall"
  }, {
    "id": 284,
    "text": "mkfile(path.join(cwd, '1', 'to.dat'  ))",
    "type": "statement:functioncall"
  }, {
    "id": 285,
    "text": "assert(path.isfile(path.join(cwd, '1', 'from.dat')))",
    "type": "statement:functioncall"
  }, {
    "id": 286,
    "text": "assert(path.isfile(path.join(cwd, '1', 'to.dat'  )))",
    "type": "statement:functioncall"
  }, {
    "id": 287,
    "text": "assert(path.isdir (path.join(cwd, '1', 'to'      )))",
    "type": "statement:functioncall"
  }, {
    "id": 288,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 289,
    "text": "function test_rename_fail()\r\n  assert_nil( path.rename(\r\n    path.join(cwd, '1', 'from.dat'),\r\n    path.join(cwd, '1', 'to.dat')\r\n  ))\r\n  assert(path.exists(path.join(cwd, '1', 'from.dat')))\r\n  assert(path.exists(path.join(cwd, '1', 'to.dat')))\r\n\r\n  assert_nil( path.rename(\r\n    path.join(cwd, '1', 'from.dat'),\r\n    path.join(cwd, '1', 'to')\r\n  ))\r\n  assert(path.exists(path.join(cwd, '1', 'from.dat')))\r\n  assert(path.exists(path.join(cwd, '1', 'to')))\r\n\r\n  assert_nil( path.rename(\r\n    path.join(cwd, '1', 'from.txt'),\r\n    path.join(cwd, '1', 'to'),\r\n    true\r\n  ))\r\n  assert(path.exists(path.join(cwd, '1', 'from.dat')))\r\n  assert(path.exists(path.join(cwd, '1', 'to')))\r\nend",
    "type": "function"
  }, {
    "id": 290,
    "text": "assert_nil( path.rename(\r\n    path.join(cwd, '1', 'from.dat'),\r\n    path.join(cwd, '1', 'to.dat')\r\n  ))",
    "type": "statement:functioncall"
  }, {
    "id": 291,
    "text": "assert(path.exists(path.join(cwd, '1', 'from.dat')))",
    "type": "statement:functioncall"
  }, {
    "id": 292,
    "text": "assert(path.exists(path.join(cwd, '1', 'to.dat')))",
    "type": "statement:functioncall"
  }, {
    "id": 293,
    "text": "assert_nil( path.rename(\r\n    path.join(cwd, '1', 'from.dat'),\r\n    path.join(cwd, '1', 'to')\r\n  ))",
    "type": "statement:functioncall"
  }, {
    "id": 294,
    "text": "assert(path.exists(path.join(cwd, '1', 'to')))",
    "type": "statement:functioncall"
  }, {
    "id": 295,
    "text": "assert_nil( path.rename(\r\n    path.join(cwd, '1', 'from.txt'),\r\n    path.join(cwd, '1', 'to'),\r\n    true\r\n  ))",
    "type": "statement:functioncall"
  }, {
    "id": 296,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 297,
    "text": "function test_rename_pass1()\r\n  assert( path.rename(\r\n    path.join(cwd, '1', 'from.dat'),\r\n    path.join(cwd, '1', 'to.txt')\r\n  ))\r\n  assert_false(path.exists(path.join(cwd, '1', 'from.dat')))\r\n  assert(path.exists(path.join(cwd, '1', 'to.dat')))\r\nend",
    "type": "function"
  }, {
    "id": 298,
    "text": "assert( path.rename(\r\n    path.join(cwd, '1', 'from.dat'),\r\n    path.join(cwd, '1', 'to.txt')\r\n  ))",
    "type": "statement:functioncall"
  }, {
    "id": 299,
    "text": "assert_false(path.exists(path.join(cwd, '1', 'from.dat')))",
    "type": "statement:functioncall"
  }, {
    "id": 300,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 301,
    "text": "function test_rename_force_file()\r\n  assert( path.rename(\r\n    path.join(cwd, '1', 'from.dat'),\r\n    path.join(cwd, '1', 'to.dat'),\r\n    true\r\n  ))\r\n  assert_false(path.exists(path.join(cwd, '1', 'from.dat')))\r\n  assert(path.exists(path.join(cwd, '1', 'to.dat')))\r\nend",
    "type": "function"
  }, {
    "id": 302,
    "text": "assert( path.rename(\r\n    path.join(cwd, '1', 'from.dat'),\r\n    path.join(cwd, '1', 'to.dat'),\r\n    true\r\n  ))",
    "type": "statement:functioncall"
  }, {
    "id": 303,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 304,
    "text": "function test_rename_force_dir()\r\n  assert_nil( path.rename(\r\n    path.join(cwd, '1', 'from.dat'),\r\n    path.join(cwd, '1', 'to'),\r\n    true\r\n  ))\r\n  assert_equal(path.join(cwd, '1', 'from.dat'), path.exists(path.join(cwd, '1', 'from.dat')))\r\n  assert_equal(path.join(cwd, '1', 'to'), path.isdir(path.join(cwd, '1', 'to')))\r\nend",
    "type": "function"
  }, {
    "id": 305,
    "text": "assert_nil( path.rename(\r\n    path.join(cwd, '1', 'from.dat'),\r\n    path.join(cwd, '1', 'to'),\r\n    true\r\n  ))",
    "type": "statement:functioncall"
  }, {
    "id": 306,
    "text": "assert_equal(path.join(cwd, '1', 'from.dat'), path.exists(path.join(cwd, '1', 'from.dat')))",
    "type": "statement:functioncall"
  }, {
    "id": 307,
    "text": "assert_equal(path.join(cwd, '1', 'to'), path.isdir(path.join(cwd, '1', 'to')))",
    "type": "statement:functioncall"
  }, {
    "id": 308,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 309,
    "text": "function teardown()\r\n  if cwd then path.chdir(cwd) end\r\n  path.rmdir(path.join(cwd, '1', '2'))\r\n  path.rmdir(path.join(cwd, '1'))\r\nend",
    "type": "function"
  }, {
    "id": 310,
    "text": "if cwd then path.chdir(cwd) end",
    "type": "statement:if"
  }, {
    "id": 311,
    "text": "path.chdir(cwd)",
    "type": "statement:functioncall"
  }, {
    "id": 312,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 313,
    "text": "function setup()\r\n  cwd = path.currentdir()\r\n  path.mkdir(path.join(cwd, '1'))\r\n  path.mkdir(path.join(cwd, '1', '2'))\r\nend",
    "type": "function"
  }, {
    "id": 314,
    "text": "cwd = path.currentdir()",
    "type": "statement:assign"
  }, {
    "id": 315,
    "text": "path.mkdir(path.join(cwd, '1', '2'))",
    "type": "statement:functioncall"
  }, {
    "id": 316,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 317,
    "text": "function test_chdir()\r\n  assert(path.isdir('./1'))\r\n  assert_false(path.exists('./2'))\r\n  assert_true(path.chdir('./1'))\r\n  assert_false(path.exists('./1'))\r\n  assert(path.isdir('./2'))\r\nend",
    "type": "function"
  }, {
    "id": 318,
    "text": "assert(path.isdir('./1'))",
    "type": "statement:functioncall"
  }, {
    "id": 319,
    "text": "assert_false(path.exists('./2'))",
    "type": "statement:functioncall"
  }, {
    "id": 320,
    "text": "assert_true(path.chdir('./1'))",
    "type": "statement:functioncall"
  }, {
    "id": 321,
    "text": "assert_false(path.exists('./1'))",
    "type": "statement:functioncall"
  }, {
    "id": 322,
    "text": "assert(path.isdir('./2'))",
    "type": "statement:functioncall"
  }, {
    "id": 323,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 324,
    "text": "function teardown()\r\n  collectgarbage(\"collect\") -- force clean lfs.dir\r\n  collectgarbage(\"collect\")\r\n  path.remove(path.join(cwd, '1', 'a1.txt'))\r\n  path.remove(path.join(cwd, '1', 'a2.txt'))\r\n  path.remove(path.join(cwd, '1', 'b1.txt'))\r\n  path.remove(path.join(cwd, '1', 'b2.txt'))\r\n  path.remove(path.join(cwd, '1', '2', '3', 'a1.txt'))\r\n  path.remove(path.join(cwd, '1', '2', '3', 'a2.txt'))\r\n  path.remove(path.join(cwd, '1', '2', '3', 'b1.txt'))\r\n  path.remove(path.join(cwd, '1', '2', '3', 'b2.txt'))\r\n  path.remove(path.join(cwd, '1', '2', 'a1.txt'))\r\n  path.remove(path.join(cwd, '1', '2', 'a2.txt'))\r\n  path.remove(path.join(cwd, '1', '2', 'b1.txt'))\r\n  path.remove(path.join(cwd, '1', '2', 'b2.txt'))\r\n  path.remove(path.join(cwd, '1', '2', '3'))\r\n  path.remove(path.join(cwd, '1', '2'))\r\n  path.remove(path.join(cwd, '1'))\r\n  path.remove(path.join(cwd, '2', 'to'))\r\n  path.remove(path.join(cwd, '2'))\r\n\r\nend",
    "type": "function"
  }, {
    "id": 325,
    "text": "path.remove(path.join(cwd, '1', 'a1.txt'))",
    "type": "statement:functioncall"
  }, {
    "id": 326,
    "text": "path.remove(path.join(cwd, '1', 'a2.txt'))",
    "type": "statement:functioncall"
  }, {
    "id": 327,
    "text": "path.remove(path.join(cwd, '1', 'b1.txt'))",
    "type": "statement:functioncall"
  }, {
    "id": 328,
    "text": "path.remove(path.join(cwd, '1', 'b2.txt'))",
    "type": "statement:functioncall"
  }, {
    "id": 329,
    "text": "path.remove(path.join(cwd, '1', '2', '3', 'a1.txt'))",
    "type": "statement:functioncall"
  }, {
    "id": 330,
    "text": "path.remove(path.join(cwd, '1', '2', '3', 'a2.txt'))",
    "type": "statement:functioncall"
  }, {
    "id": 331,
    "text": "path.remove(path.join(cwd, '1', '2', '3', 'b1.txt'))",
    "type": "statement:functioncall"
  }, {
    "id": 332,
    "text": "path.remove(path.join(cwd, '1', '2', '3', 'b2.txt'))",
    "type": "statement:functioncall"
  }, {
    "id": 333,
    "text": "path.remove(path.join(cwd, '1', '2', 'a1.txt'))",
    "type": "statement:functioncall"
  }, {
    "id": 334,
    "text": "path.remove(path.join(cwd, '1', '2', 'a2.txt'))",
    "type": "statement:functioncall"
  }, {
    "id": 335,
    "text": "path.remove(path.join(cwd, '1', '2', 'b1.txt'))",
    "type": "statement:functioncall"
  }, {
    "id": 336,
    "text": "path.remove(path.join(cwd, '1', '2', 'b2.txt'))",
    "type": "statement:functioncall"
  }, {
    "id": 337,
    "text": "path.remove(path.join(cwd, '1', '2', '3'))",
    "type": "statement:functioncall"
  }, {
    "id": 338,
    "text": "path.remove(path.join(cwd, '1', '2'))",
    "type": "statement:functioncall"
  }, {
    "id": 339,
    "text": "path.remove(path.join(cwd, '2', 'to'))",
    "type": "statement:functioncall"
  }, {
    "id": 340,
    "text": "path.remove(path.join(cwd, '2'))",
    "type": "statement:functioncall"
  }, {
    "id": 341,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 342,
    "text": "function setup()\r\n  cwd = assert_string(path.currentdir())\r\n  teardown()\r\n\r\n  path.mkdir(path.join(cwd, '1'))\r\n  path.mkdir(path.join(cwd, '2', 'to'))\r\n  mkfile(path.join(cwd, '1', 'a1.txt'), '12345')\r\n  mkfile(path.join(cwd, '1', 'a2.txt'), '54321')\r\n  mkfile(path.join(cwd, '1', 'b1.txt'), '12345')\r\n  mkfile(path.join(cwd, '1', 'b2.txt'), '54321')\r\n\r\n  files = {\r\n    [path.join(cwd, '1', 'a1.txt'):upper()] = true;\r\n    [path.join(cwd, '1', 'a2.txt'):upper()] = true;\r\n    [path.join(cwd, '1', 'b1.txt'):upper()] = true;\r\n    [path.join(cwd, '1', 'b2.txt'):upper()] = true;\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 343,
    "text": "path.mkdir(path.join(cwd, '2', 'to'))",
    "type": "statement:functioncall"
  }, {
    "id": 344,
    "text": "mkfile(path.join(cwd, '1', 'a1.txt'), '12345')",
    "type": "statement:functioncall"
  }, {
    "id": 345,
    "text": "mkfile(path.join(cwd, '1', 'a2.txt'), '54321')",
    "type": "statement:functioncall"
  }, {
    "id": 346,
    "text": "mkfile(path.join(cwd, '1', 'b1.txt'), '12345')",
    "type": "statement:functioncall"
  }, {
    "id": 347,
    "text": "mkfile(path.join(cwd, '1', 'b2.txt'), '54321')",
    "type": "statement:functioncall"
  }, {
    "id": 348,
    "text": "files = {\r\n    [path.join(cwd, '1', 'a1.txt'):upper()] = true;\r\n    [path.join(cwd, '1', 'a2.txt'):upper()] = true;\r\n    [path.join(cwd, '1', 'b1.txt'):upper()] = true;\r\n    [path.join(cwd, '1', 'b2.txt'):upper()] = true;\r\n  }",
    "type": "statement:assign"
  }, {
    "id": 349,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 350,
    "text": "function test_copy_fail()\r\n  assert_nil( path.copy(\r\n    path.join(cwd, '1', 'a1.txt'),\r\n    path.join(cwd, '1', 'a2.txt')\r\n  ))\r\n  assert_equal(\"54321\", read_file(path.join(cwd, '1', 'a2.txt')))\r\nend",
    "type": "function"
  }, {
    "id": 351,
    "text": "assert_nil( path.copy(\r\n    path.join(cwd, '1', 'a1.txt'),\r\n    path.join(cwd, '1', 'a2.txt')\r\n  ))",
    "type": "statement:functioncall"
  }, {
    "id": 352,
    "text": "assert_equal(\"54321\", read_file(path.join(cwd, '1', 'a2.txt')))",
    "type": "statement:functioncall"
  }, {
    "id": 353,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 354,
    "text": "function test_copy_fail_bool()\r\n  assert_nil( path.copy(\r\n    path.join(cwd, '1', 'a1.txt'),\r\n    path.join(cwd, '1', 'a2.txt'),\r\n    false\r\n  ))\r\n  assert_equal(\"54321\", read_file(path.join(cwd, '1', 'a2.txt')))\r\nend",
    "type": "function"
  }, {
    "id": 355,
    "text": "assert_nil( path.copy(\r\n    path.join(cwd, '1', 'a1.txt'),\r\n    path.join(cwd, '1', 'a2.txt'),\r\n    false\r\n  ))",
    "type": "statement:functioncall"
  }, {
    "id": 356,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 357,
    "text": "function test_copy_overwrite()\r\n  assert( path.copy(\r\n    path.join(cwd, '1', 'a1.txt'),\r\n    path.join(cwd, '1', 'a2.txt'),\r\n    {overwrite = true}\r\n  ))\r\n  assert_equal(\"12345\", read_file(path.join(cwd, '1', 'a2.txt')))\r\nend",
    "type": "function"
  }, {
    "id": 358,
    "text": "assert( path.copy(\r\n    path.join(cwd, '1', 'a1.txt'),\r\n    path.join(cwd, '1', 'a2.txt'),\r\n    {overwrite = true}\r\n  ))",
    "type": "statement:functioncall"
  }, {
    "id": 359,
    "text": "assert_equal(\"12345\", read_file(path.join(cwd, '1', 'a2.txt')))",
    "type": "statement:functioncall"
  }, {
    "id": 360,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 361,
    "text": "function test_copy_overwrite_dir()\r\n  assert_nil( path.copy(\r\n    path.join(cwd, '1', 'a1.txt'),\r\n    path.join(cwd, '2', 'to'),\r\n    {overwrite = true}\r\n  ))\r\n  assert_equal(path.join(cwd, '2', 'to'), path.isdir(path.join(cwd, '2', 'to')))\r\nend",
    "type": "function"
  }, {
    "id": 362,
    "text": "assert_nil( path.copy(\r\n    path.join(cwd, '1', 'a1.txt'),\r\n    path.join(cwd, '2', 'to'),\r\n    {overwrite = true}\r\n  ))",
    "type": "statement:functioncall"
  }, {
    "id": 363,
    "text": "assert_equal(path.join(cwd, '2', 'to'), path.isdir(path.join(cwd, '2', 'to')))",
    "type": "statement:functioncall"
  }, {
    "id": 364,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 365,
    "text": "function test_copy_overwrite_bool()\r\n  assert( path.copy(\r\n    path.join(cwd, '1', 'a1.txt'),\r\n    path.join(cwd, '1', 'a2.txt'),\r\n    true\r\n  ))\r\n  assert_equal(\"12345\", read_file(path.join(cwd, '1', 'a2.txt')))\r\nend",
    "type": "function"
  }, {
    "id": 366,
    "text": "assert( path.copy(\r\n    path.join(cwd, '1', 'a1.txt'),\r\n    path.join(cwd, '1', 'a2.txt'),\r\n    true\r\n  ))",
    "type": "statement:functioncall"
  }, {
    "id": 367,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 368,
    "text": "function test_copy_mkdir()\r\n  assert( path.copy(\r\n    path.join(cwd, '1', 'a1.txt'),\r\n    path.join(cwd, '1', '2', '3', 'a2.txt')\r\n  ))\r\n  assert_equal(\"12345\", read_file(path.join(cwd, '1', '2', '3', 'a2.txt')))\r\nend",
    "type": "function"
  }, {
    "id": 369,
    "text": "assert( path.copy(\r\n    path.join(cwd, '1', 'a1.txt'),\r\n    path.join(cwd, '1', '2', '3', 'a2.txt')\r\n  ))",
    "type": "statement:functioncall"
  }, {
    "id": 370,
    "text": "assert_equal(\"12345\", read_file(path.join(cwd, '1', '2', '3', 'a2.txt')))",
    "type": "statement:functioncall"
  }, {
    "id": 371,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 372,
    "text": "function test_copy_batch()\r\n  assert(path.copy(\r\n    path.join(cwd, '1', 'a*.txt'),\r\n    path.join(cwd, '1', '2')\r\n  ))\r\n  assert_equal(\"12345\", read_file(path.join(cwd, '1', '2', 'a1.txt')))\r\n  assert_equal(\"54321\", read_file(path.join(cwd, '1', '2', 'a2.txt')))\r\n  assert_true(path.remove(path.join(cwd, '1', '2', 'a1.txt')))\r\n  assert_true(path.remove(path.join(cwd, '1', '2', 'a2.txt')))\r\n\r\n  local fname\r\n  path.each(path.join(cwd, '1', '2', '*'), function(f)\r\n    fname = f\r\n    return true\r\n  end)\r\n  assert_nil(fname)\r\nend",
    "type": "function"
  }, {
    "id": 373,
    "text": "assert(path.copy(\r\n    path.join(cwd, '1', 'a*.txt'),\r\n    path.join(cwd, '1', '2')\r\n  ))",
    "type": "statement:functioncall"
  }, {
    "id": 374,
    "text": "assert_equal(\"12345\", read_file(path.join(cwd, '1', '2', 'a1.txt')))",
    "type": "statement:functioncall"
  }, {
    "id": 375,
    "text": "assert_equal(\"54321\", read_file(path.join(cwd, '1', '2', 'a2.txt')))",
    "type": "statement:functioncall"
  }, {
    "id": 376,
    "text": "assert_true(path.remove(path.join(cwd, '1', '2', 'a1.txt')))",
    "type": "statement:functioncall"
  }, {
    "id": 377,
    "text": "assert_true(path.remove(path.join(cwd, '1', '2', 'a2.txt')))",
    "type": "statement:functioncall"
  }, {
    "id": 378,
    "text": "local fname",
    "type": "statement:localassign"
  }, {
    "id": 379,
    "text": "path.each(path.join(cwd, '1', '2', '*'), function(f)\r\n    fname = f\r\n    return true\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 380,
    "text": "fname = f",
    "type": "statement:assign"
  }, {
    "id": 381,
    "text": "assert_nil(fname)",
    "type": "statement:functioncall"
  }, {
    "id": 382,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 383,
    "text": "function test_copy_accept()\r\n  local options options = {\r\n    skipdirs = true;\r\n    accept = function(src, des, opt)\r\n      local key = src:upper()\r\n      assert_true(files[key])\r\n      assert_equal(options, opt)\r\n      files[key] = nil;\r\n      return not path.basename(src):find(\"^b\")\r\n    end;\r\n  }\r\n  assert(path.copy(\r\n    path.join(cwd, '1', '*'),\r\n    path.join(cwd, '1', '2'),\r\n    options\r\n  ))\r\n  assert_nil(next(files))\r\n\r\n  assert_equal(\"12345\", read_file(path.join(cwd, '1', '2', 'a1.txt')))\r\n  assert_equal(\"54321\", read_file(path.join(cwd, '1', '2', 'a2.txt')))\r\n  assert_false(path.exists(path.join(cwd, '1', '2', '2')))\r\n  assert_false(path.exists(path.join(cwd, '1', '2', 'b1.txt')))\r\n  assert_false(path.exists(path.join(cwd, '1', '2', 'b2.txt')))\r\nend",
    "type": "function"
  }, {
    "id": 384,
    "text": "local options",
    "type": "statement:localassign"
  }, {
    "id": 385,
    "text": "options = {\r\n    skipdirs = true;\r\n    accept = function(src, des, opt)\r\n      local key = src:upper()\r\n      assert_true(files[key])\r\n      assert_equal(options, opt)\r\n      files[key] = nil;\r\n      return not path.basename(src):find(\"^b\")\r\n    end;\r\n  }",
    "type": "statement:assign"
  }, {
    "id": 386,
    "text": "local key = src:upper()",
    "type": "statement:localassign"
  }, {
    "id": 387,
    "text": "assert_true(files[key])",
    "type": "statement:functioncall"
  }, {
    "id": 388,
    "text": "assert_equal(options, opt)",
    "type": "statement:functioncall"
  }, {
    "id": 389,
    "text": "files[key] = nil",
    "type": "statement:assign"
  }, {
    "id": 390,
    "text": "assert(path.copy(\r\n    path.join(cwd, '1', '*'),\r\n    path.join(cwd, '1', '2'),\r\n    options\r\n  ))",
    "type": "statement:functioncall"
  }, {
    "id": 391,
    "text": "assert_nil(next(files))",
    "type": "statement:functioncall"
  }, {
    "id": 392,
    "text": "assert_false(path.exists(path.join(cwd, '1', '2', '2')))",
    "type": "statement:functioncall"
  }, {
    "id": 393,
    "text": "assert_false(path.exists(path.join(cwd, '1', '2', 'b1.txt')))",
    "type": "statement:functioncall"
  }, {
    "id": 394,
    "text": "assert_false(path.exists(path.join(cwd, '1', '2', 'b2.txt')))",
    "type": "statement:functioncall"
  }, {
    "id": 395,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 396,
    "text": "function test_copy_error_skip()\r\n  local ivalid_path = path.IS_WINDOWS and path.join(cwd, '1*') or \"/dev/qaz\"\r\n  local options options = {\r\n    error = function(err, src, des, opt)\r\n      local key = src:upper()\r\n      assert_true(files[key])\r\n      assert_equal(options, opt)\r\n      files[key] = nil;\r\n      return true\r\n    end;\r\n  }\r\n  assert(path.copy(\r\n    path.join(cwd, '1', '*'),\r\n    ivalid_path,\r\n    options\r\n  ))\r\n  assert_nil(next(files))\r\nend",
    "type": "function"
  }, {
    "id": 397,
    "text": "local ivalid_path = path.IS_WINDOWS and path.join(cwd, '1*') or \"/dev/qaz\"",
    "type": "statement:localassign"
  }, {
    "id": 398,
    "text": "options = {\r\n    error = function(err, src, des, opt)\r\n      local key = src:upper()\r\n      assert_true(files[key])\r\n      assert_equal(options, opt)\r\n      files[key] = nil;\r\n      return true\r\n    end;\r\n  }",
    "type": "statement:assign"
  }, {
    "id": 399,
    "text": "assert(path.copy(\r\n    path.join(cwd, '1', '*'),\r\n    ivalid_path,\r\n    options\r\n  ))",
    "type": "statement:functioncall"
  }, {
    "id": 400,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 401,
    "text": "function test_copy_error_break()\r\n  local ivalid_path = path.IS_WINDOWS and path.join(cwd, '1*') or \"/dev/qaz\"\r\n  local flag = false\r\n  assert(path.copy(\r\n    path.join(cwd, '1', '*'),\r\n    ivalid_path,{\r\n    error = function()\r\n      assert_false(flag)\r\n      flag = true\r\n      return false\r\n    end\r\n    }\r\n  ))\r\n  assert_true(flag)\r\nend",
    "type": "function"
  }, {
    "id": 402,
    "text": "assert(path.copy(\r\n    path.join(cwd, '1', '*'),\r\n    ivalid_path,{\r\n    error = function()\r\n      assert_false(flag)\r\n      flag = true\r\n      return false\r\n    end\r\n    }\r\n  ))",
    "type": "statement:functioncall"
  }, {
    "id": 403,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 404,
    "text": "function teardown()\r\n  local print = print\r\n  print = (path.remove(path.join(cwd, '1', '2', '3', 'b1.txt')))\r\n  print = (path.remove(path.join(cwd, '1', '2', '3', 'b2.txt')))\r\n  print = (path.remove(path.join(cwd, '1', '2', '3', 'b3.txt')))\r\n  print = (path.remove(path.join(cwd, '1', '2', 'a1.txt')))\r\n  print = (path.remove(path.join(cwd, '1', '2', 'a2.txt')))\r\n  print = (path.remove(path.join(cwd, '1', '2', 'a3.txt')))\r\n  print = (path.remove(path.join(cwd, '1', '2', '3')))\r\n  print = (path.remove(path.join(cwd, '1', '2')))\r\n  print = (path.remove(path.join(cwd, '1')))\r\nend",
    "type": "function"
  }, {
    "id": 405,
    "text": "local print = print",
    "type": "statement:localassign"
  }, {
    "id": 406,
    "text": "print = (path.remove(path.join(cwd, '1', '2', '3', 'b1.txt')))",
    "type": "statement:assign"
  }, {
    "id": 407,
    "text": "print = (path.remove(path.join(cwd, '1', '2', '3', 'b2.txt')))",
    "type": "statement:assign"
  }, {
    "id": 408,
    "text": "print = (path.remove(path.join(cwd, '1', '2', '3', 'b3.txt')))",
    "type": "statement:assign"
  }, {
    "id": 409,
    "text": "print = (path.remove(path.join(cwd, '1', '2', 'a1.txt')))",
    "type": "statement:assign"
  }, {
    "id": 410,
    "text": "print = (path.remove(path.join(cwd, '1', '2', 'a2.txt')))",
    "type": "statement:assign"
  }, {
    "id": 411,
    "text": "print = (path.remove(path.join(cwd, '1', '2', 'a3.txt')))",
    "type": "statement:assign"
  }, {
    "id": 412,
    "text": "print = (path.remove(path.join(cwd, '1', '2', '3')))",
    "type": "statement:assign"
  }, {
    "id": 413,
    "text": "print = (path.remove(path.join(cwd, '1', '2')))",
    "type": "statement:assign"
  }, {
    "id": 414,
    "text": "print = (path.remove(path.join(cwd, '1')))",
    "type": "statement:assign"
  }, {
    "id": 415,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 416,
    "text": "function setup()\r\n  cwd = assert_string(path.currentdir())\r\n  teardown()\r\n  mkfile(path.join(cwd, '1', '2', '3', 'b1.txt'))\r\n  mkfile(path.join(cwd, '1', '2', '3', 'b2.txt'))\r\n  mkfile(path.join(cwd, '1', '2', '3', 'b3.txt'))\r\n  mkfile(path.join(cwd, '1', '2', 'a1.txt'))\r\n  mkfile(path.join(cwd, '1', '2', 'a2.txt'))\r\n  mkfile(path.join(cwd, '1', '2', 'a3.txt'))\r\nend",
    "type": "function"
  }, {
    "id": 417,
    "text": "mkfile(path.join(cwd, '1', '2', '3', 'b1.txt'))",
    "type": "statement:functioncall"
  }, {
    "id": 418,
    "text": "mkfile(path.join(cwd, '1', '2', '3', 'b2.txt'))",
    "type": "statement:functioncall"
  }, {
    "id": 419,
    "text": "mkfile(path.join(cwd, '1', '2', '3', 'b3.txt'))",
    "type": "statement:functioncall"
  }, {
    "id": 420,
    "text": "mkfile(path.join(cwd, '1', '2', 'a1.txt'))",
    "type": "statement:functioncall"
  }, {
    "id": 421,
    "text": "mkfile(path.join(cwd, '1', '2', 'a2.txt'))",
    "type": "statement:functioncall"
  }, {
    "id": 422,
    "text": "mkfile(path.join(cwd, '1', '2', 'a3.txt'))",
    "type": "statement:functioncall"
  }, {
    "id": 423,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 424,
    "text": "function test_clean()\r\n  assert_equal(8, path.remove(path.join(cwd, \"1\", \"*\"), {recurse=true}))\r\n  assert_false(path.exists(path.join(cwd, \"1\", \"2\")))\r\nend",
    "type": "function"
  }, {
    "id": 425,
    "text": "assert_equal(8, path.remove(path.join(cwd, \"1\", \"*\"), {recurse=true}))",
    "type": "statement:functioncall"
  }, {
    "id": 426,
    "text": "assert_false(path.exists(path.join(cwd, \"1\", \"2\")))",
    "type": "statement:functioncall"
  }, {
    "id": 427,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 428,
    "text": "function test_clean_files()\r\n  assert_equal(6, path.remove(path.join(cwd, \"1\", \"*\"), {skipdirs=true;recurse=true}))\r\n  assert(path.exists(path.join(cwd, \"1\", \"2\")))\r\n  assert(path.exists(path.join(cwd, \"1\", \"2\", \"3\")))\r\n  assert_false(path.exists(path.join(cwd, \"1\", \"2\", \"3\", \"a1.txt\")))\r\nend",
    "type": "function"
  }, {
    "id": 429,
    "text": "assert_equal(6, path.remove(path.join(cwd, \"1\", \"*\"), {skipdirs=true;recurse=true}))",
    "type": "statement:functioncall"
  }, {
    "id": 430,
    "text": "assert(path.exists(path.join(cwd, \"1\", \"2\")))",
    "type": "statement:functioncall"
  }, {
    "id": 431,
    "text": "assert(path.exists(path.join(cwd, \"1\", \"2\", \"3\")))",
    "type": "statement:functioncall"
  }, {
    "id": 432,
    "text": "assert_false(path.exists(path.join(cwd, \"1\", \"2\", \"3\", \"a1.txt\")))",
    "type": "statement:functioncall"
  }, {
    "id": 433,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 434,
    "text": "function test_remove()\r\n  assert_string(path.exists(path.join(cwd, \"1\", \"2\", \"a1.txt\")))\r\n  assert_string(path.exists(path.join(cwd, \"1\", \"2\", \"a2.txt\")))\r\n  assert_string(path.exists(path.join(cwd, \"1\", \"2\", \"a3.txt\")))\r\n  assert_string(path.exists(path.join(cwd, \"1\", \"2\", \"3\", \"b1.txt\")))\r\n  assert_string(path.exists(path.join(cwd, \"1\", \"2\", \"3\", \"b2.txt\")))\r\n  assert_string(path.exists(path.join(cwd, \"1\", \"2\", \"3\", \"b3.txt\")))\r\n\r\n  assert_equal(2, path.remove(path.join(cwd, \"1\", \"?1.txt\"), {recurse=true}))\r\n\r\n  assert_false (path.exists(path.join(cwd, \"1\", \"2\", \"a1.txt\")))\r\n  assert_string(path.exists(path.join(cwd, \"1\", \"2\", \"a2.txt\")))\r\n  assert_string(path.exists(path.join(cwd, \"1\", \"2\", \"a3.txt\")))\r\n  assert_false (path.exists(path.join(cwd, \"1\", \"2\", \"3\", \"b1.txt\")))\r\n  assert_string(path.exists(path.join(cwd, \"1\", \"2\", \"3\", \"b2.txt\")))\r\n  assert_string(path.exists(path.join(cwd, \"1\", \"2\", \"3\", \"b3.txt\")))\r\nend",
    "type": "function"
  }, {
    "id": 435,
    "text": "assert_string(path.exists(path.join(cwd, \"1\", \"2\", \"a1.txt\")))",
    "type": "statement:functioncall"
  }, {
    "id": 436,
    "text": "assert_string(path.exists(path.join(cwd, \"1\", \"2\", \"a2.txt\")))",
    "type": "statement:functioncall"
  }, {
    "id": 437,
    "text": "assert_string(path.exists(path.join(cwd, \"1\", \"2\", \"a3.txt\")))",
    "type": "statement:functioncall"
  }, {
    "id": 438,
    "text": "assert_string(path.exists(path.join(cwd, \"1\", \"2\", \"3\", \"b1.txt\")))",
    "type": "statement:functioncall"
  }, {
    "id": 439,
    "text": "assert_string(path.exists(path.join(cwd, \"1\", \"2\", \"3\", \"b2.txt\")))",
    "type": "statement:functioncall"
  }, {
    "id": 440,
    "text": "assert_string(path.exists(path.join(cwd, \"1\", \"2\", \"3\", \"b3.txt\")))",
    "type": "statement:functioncall"
  }, {
    "id": 441,
    "text": "assert_equal(2, path.remove(path.join(cwd, \"1\", \"?1.txt\"), {recurse=true}))",
    "type": "statement:functioncall"
  }, {
    "id": 442,
    "text": "assert_false (path.exists(path.join(cwd, \"1\", \"2\", \"a1.txt\")))",
    "type": "statement:functioncall"
  }, {
    "id": 443,
    "text": "assert_false (path.exists(path.join(cwd, \"1\", \"2\", \"3\", \"b1.txt\")))",
    "type": "statement:functioncall"
  }, {
    "id": 444,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 445,
    "text": "function test_remove_accept()\r\n  local options options = {\r\n    accept = function(src, opt)\r\n      local key = src:upper()\r\n      assert_equal(options, opt)\r\n      return not not path.basename(src):find(\"^.[12]\")\r\n    end;recurse = true;\r\n  }\r\n  assert_equal(4, path.remove(path.join(cwd, \"1\", \"*\"), options))\r\n\r\n  assert_false (path.exists(path.join(cwd, \"1\", \"2\", \"a1.txt\")))\r\n  assert_false (path.exists(path.join(cwd, \"1\", \"2\", \"a2.txt\")))\r\n  assert_string(path.exists(path.join(cwd, \"1\", \"2\", \"a3.txt\")))\r\n  assert_false (path.exists(path.join(cwd, \"1\", \"2\", \"3\", \"b1.txt\")))\r\n  assert_false (path.exists(path.join(cwd, \"1\", \"2\", \"3\", \"b2.txt\")))\r\n  assert_string(path.exists(path.join(cwd, \"1\", \"2\", \"3\", \"b3.txt\")))\r\nend",
    "type": "function"
  }, {
    "id": 446,
    "text": "options = {\r\n    accept = function(src, opt)\r\n      local key = src:upper()\r\n      assert_equal(options, opt)\r\n      return not not path.basename(src):find(\"^.[12]\")\r\n    end;recurse = true;\r\n  }",
    "type": "statement:assign"
  }, {
    "id": 447,
    "text": "assert_equal(4, path.remove(path.join(cwd, \"1\", \"*\"), options))",
    "type": "statement:functioncall"
  }, {
    "id": 448,
    "text": "assert_false (path.exists(path.join(cwd, \"1\", \"2\", \"a2.txt\")))",
    "type": "statement:functioncall"
  }, {
    "id": 449,
    "text": "assert_false (path.exists(path.join(cwd, \"1\", \"2\", \"3\", \"b2.txt\")))",
    "type": "statement:functioncall"
  }, {
    "id": 450,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 451,
    "text": "function test_remove_error_skip()\r\n  local n = 0\r\n  assert(path.remove(path.join(cwd, '1', '*'),{\r\n    skipdirs = true; recurse  = true;\r\n    accept = function(src)\r\n      assert(path.remove(src))\r\n      return true\r\n    end;\r\n    error = function(err, src)\r\n      n = n + 1\r\n      return true\r\n    end;\r\n  }))\r\n  assert_equal(6, n)\r\nend",
    "type": "function"
  }, {
    "id": 452,
    "text": "local n = 0",
    "type": "statement:localassign"
  }, {
    "id": 453,
    "text": "assert(path.remove(path.join(cwd, '1', '*'),{\r\n    skipdirs = true; recurse  = true;\r\n    accept = function(src)\r\n      assert(path.remove(src))\r\n      return true\r\n    end;\r\n    error = function(err, src)\r\n      n = n + 1\r\n      return true\r\n    end;\r\n  }))",
    "type": "statement:functioncall"
  }, {
    "id": 454,
    "text": "assert(path.remove(src))",
    "type": "statement:functioncall"
  }, {
    "id": 455,
    "text": "n = n + 1",
    "type": "statement:assign"
  }, {
    "id": 456,
    "text": "assert_equal(6, n)",
    "type": "statement:functioncall"
  }, {
    "id": 457,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 458,
    "text": "function test_remove_error_break()\r\n  local flag = false\r\n  assert(path.remove(path.join(cwd, '1', '*'),{\r\n    skipdirs = true; recurse  = true;\r\n    accept = function(src)\r\n      assert(path.remove(src))\r\n      return true\r\n    end;\r\n    error = function(err, src)\r\n      assert_false(false)\r\n      flag = true\r\n      return false\r\n    end;\r\n  }))\r\n  assert_true(flag)\r\nend",
    "type": "function"
  }, {
    "id": 459,
    "text": "assert(path.remove(path.join(cwd, '1', '*'),{\r\n    skipdirs = true; recurse  = true;\r\n    accept = function(src)\r\n      assert(path.remove(src))\r\n      return true\r\n    end;\r\n    error = function(err, src)\r\n      assert_false(false)\r\n      flag = true\r\n      return false\r\n    end;\r\n  }))",
    "type": "statement:functioncall"
  }, {
    "id": 460,
    "text": "assert_false(false)",
    "type": "statement:functioncall"
  }, {
    "id": 461,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 462,
    "text": "function test_isempty()\r\n  assert_false( path.isempty(path.join(cwd, \"1\")) )\r\n  assert_equal(8, path.remove(path.join(cwd, \"1\", \"*\"), {recurse=true}))\r\n  assert_equal(path.join(cwd, \"1\"), path.exists(path.join(cwd, \"1\")))\r\n  assert_true(path.isempty(path.join(cwd, \"1\")))\r\nend",
    "type": "function"
  }, {
    "id": 463,
    "text": "assert_false( path.isempty(path.join(cwd, \"1\")) )",
    "type": "statement:functioncall"
  }, {
    "id": 464,
    "text": "assert_equal(path.join(cwd, \"1\"), path.exists(path.join(cwd, \"1\")))",
    "type": "statement:functioncall"
  }, {
    "id": 465,
    "text": "assert_true(path.isempty(path.join(cwd, \"1\")))",
    "type": "statement:functioncall"
  }, {
    "id": 466,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 467,
    "text": "function teardown()\r\n  path.remove(J(cwd, '1', '2', 'a1.txt'))\r\n  path.remove(J(cwd, '1', '2', 'a2.txt'))\r\n  path.remove(J(cwd, '1', '2', 'a3.txt'))\r\n  path.remove(J(cwd, '1', '2'))\r\n  path.remove(J(cwd, '1'))\r\nend",
    "type": "function"
  }, {
    "id": 468,
    "text": "path.remove(J(cwd, '1', '2', 'a1.txt'))",
    "type": "statement:functioncall"
  }, {
    "id": 469,
    "text": "path.remove(J(cwd, '1', '2', 'a2.txt'))",
    "type": "statement:functioncall"
  }, {
    "id": 470,
    "text": "path.remove(J(cwd, '1', '2', 'a3.txt'))",
    "type": "statement:functioncall"
  }, {
    "id": 471,
    "text": "path.remove(J(cwd, '1', '2'))",
    "type": "statement:functioncall"
  }, {
    "id": 472,
    "text": "path.remove(J(cwd, '1'))",
    "type": "statement:functioncall"
  }, {
    "id": 473,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 474,
    "text": "function setup()\r\n  J = path.join\r\n  cwd = assert_string(path.currentdir())\r\n  teardown()\r\n  mkfile(J(cwd, '1', '2', 'a1.txt'))\r\n  mkfile(J(cwd, '1', '2', 'a2.txt'))\r\n  mkfile(J(cwd, '1', '2', 'a3.txt'))\r\nend",
    "type": "function"
  }, {
    "id": 475,
    "text": "J = path.join",
    "type": "statement:assign"
  }, {
    "id": 476,
    "text": "mkfile(J(cwd, '1', '2', 'a1.txt'))",
    "type": "statement:functioncall"
  }, {
    "id": 477,
    "text": "mkfile(J(cwd, '1', '2', 'a2.txt'))",
    "type": "statement:functioncall"
  }, {
    "id": 478,
    "text": "mkfile(J(cwd, '1', '2', 'a3.txt'))",
    "type": "statement:functioncall"
  }, {
    "id": 479,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 480,
    "text": "function test_no_mask1()\r\n  local mask = path.ensure_dir_end(J(cwd, '1', '2'))\r\n  local files = {\r\n    [ J(cwd, '1', '2', 'a1.txt') ] = true;\r\n    [ J(cwd, '1', '2', 'a2.txt') ] = true;\r\n    [ J(cwd, '1', '2', 'a3.txt') ] = true;\r\n  }\r\n  path.each(mask, function(f)\r\n    assert_true(files[f], \"unexpected: \" .. f)\r\n    files[f] = nil\r\n  end)\r\n  assert_nil(next(files))\r\nend",
    "type": "function"
  }, {
    "id": 481,
    "text": "local mask = path.ensure_dir_end(J(cwd, '1', '2'))",
    "type": "statement:localassign"
  }, {
    "id": 482,
    "text": "local files = {\r\n    [ J(cwd, '1', '2', 'a1.txt') ] = true;\r\n    [ J(cwd, '1', '2', 'a2.txt') ] = true;\r\n    [ J(cwd, '1', '2', 'a3.txt') ] = true;\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 483,
    "text": "path.each(mask, function(f)\r\n    assert_true(files[f], \"unexpected: \" .. f)\r\n    files[f] = nil\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 484,
    "text": "assert_true(files[f], \"unexpected: \" .. f)",
    "type": "statement:functioncall"
  }, {
    "id": 485,
    "text": "files[f] = nil",
    "type": "statement:assign"
  }, {
    "id": 486,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 487,
    "text": "function test_no_mask2()\r\n  local mask = J(cwd, '1', '2')\r\n  local files = {\r\n    [ J(cwd, '1', '2') ] = true;\r\n  }\r\n  path.each(mask, function(f)\r\n    assert_true(files[f], \"unexpected: \" .. f)\r\n    files[f] = nil\r\n  end)\r\n  assert_nil(next(files))\r\nend",
    "type": "function"
  }, {
    "id": 488,
    "text": "local mask = J(cwd, '1', '2')",
    "type": "statement:localassign"
  }, {
    "id": 489,
    "text": "local files = {\r\n    [ J(cwd, '1', '2') ] = true;\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 490,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 491,
    "text": "function()path_unx:isdir(\"/any/\") end",
    "type": "function"
  }, {
    "id": 492,
    "text": "function()path_win:isdir(\"c:\\\\\")  end",
    "type": "function"
  }, {
    "id": 493,
    "text": "function()path_unx:isdir(\"/any/\") end",
    "type": "function"
  }, {
    "id": 494,
    "text": "function()path_win:isdir(\"c:\\\\\")  end",
    "type": "function"
  }, {
    "id": 495,
    "text": "function() p:mkdir('./1') end",
    "type": "function"
  }, {
    "id": 496,
    "text": "function() p:size('./1.txt') end",
    "type": "function"
  }, {
    "id": 497,
    "text": "function(f)\r\n    assert(path.isfile(f))\r\n    assert(path.touch(f, ts))\r\n  end",
    "type": "function"
  }, {
    "id": 498,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 499,
    "text": "function(f,mt)\r\n    assert_equal(ts, mt)\r\n  end",
    "type": "function"
  }, {
    "id": 500,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 501,
    "text": "function(f)\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    params[f] = nil\r\n  end",
    "type": "function"
  }, {
    "id": 502,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 503,
    "text": "function(f)\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    params[f] = nil\r\n  end",
    "type": "function"
  }, {
    "id": 504,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 505,
    "text": "function(f, sz)\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    assert_equal(5, sz)\r\n    params[f] = nil\r\n  end",
    "type": "function"
  }, {
    "id": 506,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 507,
    "text": "function(f, sz, m)\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    assert_equal('directory', m)\r\n    if path.IS_WINDOWS then assert_equal(0, sz) end\r\n    params[f] = nil\r\n  end",
    "type": "function"
  }, {
    "id": 508,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 509,
    "text": "function(f)\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    params[f] = nil\r\n  end",
    "type": "function"
  }, {
    "id": 510,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 511,
    "text": "function()\r\n    assert_false(flag)\r\n    flag = true\r\n    return 'break'\r\n  end",
    "type": "function"
  }, {
    "id": 512,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 513,
    "text": "function(f)\r\n    fname = f\r\n    return true\r\n  end",
    "type": "function"
  }, {
    "id": 514,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 515,
    "text": "function(src, des, opt)\r\n      local key = src:upper()\r\n      assert_true(files[key])\r\n      assert_equal(options, opt)\r\n      files[key] = nil;\r\n      return not path.basename(src):find(\"^b\")\r\n    end",
    "type": "function"
  }, {
    "id": 516,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 517,
    "text": "function(err, src, des, opt)\r\n      local key = src:upper()\r\n      assert_true(files[key])\r\n      assert_equal(options, opt)\r\n      files[key] = nil;\r\n      return true\r\n    end",
    "type": "function"
  }, {
    "id": 518,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 519,
    "text": "function()\r\n      assert_false(flag)\r\n      flag = true\r\n      return false\r\n    end",
    "type": "function"
  }, {
    "id": 520,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 521,
    "text": "function(src, opt)\r\n      local key = src:upper()\r\n      assert_equal(options, opt)\r\n      return not not path.basename(src):find(\"^.[12]\")\r\n    end",
    "type": "function"
  }, {
    "id": 522,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 523,
    "text": "function(src)\r\n      assert(path.remove(src))\r\n      return true\r\n    end",
    "type": "function"
  }, {
    "id": 524,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 525,
    "text": "function(err, src)\r\n      n = n + 1\r\n      return true\r\n    end",
    "type": "function"
  }, {
    "id": 526,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 527,
    "text": "function(src)\r\n      assert(path.remove(src))\r\n      return true\r\n    end",
    "type": "function"
  }, {
    "id": 528,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 529,
    "text": "function(err, src)\r\n      assert_false(false)\r\n      flag = true\r\n      return false\r\n    end",
    "type": "function"
  }, {
    "id": 530,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 531,
    "text": "function(f)\r\n    assert_true(files[f], \"unexpected: \" .. f)\r\n    files[f] = nil\r\n  end",
    "type": "function"
  }, {
    "id": 532,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 533,
    "text": "function(f)\r\n    assert_true(files[f], \"unexpected: \" .. f)\r\n    files[f] = nil\r\n  end",
    "type": "function"
  }, {
    "id": 534,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 535,
    "text": "",
    "type": "function container"
  }, {
    "id": 536,
    "text": "isfile",
    "type": "global function"
  }, {
    "id": 537,
    "text": "currentdir",
    "type": "global function"
  }, {
    "id": 538,
    "text": "each",
    "type": "global function"
  }, {
    "id": 539,
    "text": "rename",
    "type": "global function"
  }, {
    "id": 540,
    "text": "user_home",
    "type": "global function"
  }, {
    "id": 541,
    "text": "exists",
    "type": "global function"
  }, {
    "id": 542,
    "text": "lunit",
    "type": "module"
  }, {
    "id": 543,
    "text": "run",
    "type": "global function"
  }, {
    "id": 544,
    "text": "touch",
    "type": "global function"
  }, {
    "id": 545,
    "text": "dirname",
    "type": "global function"
  }, {
    "id": 546,
    "text": "new",
    "type": "global function"
  }, {
    "id": 547,
    "text": "splitroot",
    "type": "global function"
  }, {
    "id": 548,
    "text": "isdir",
    "type": "global function"
  }, {
    "id": 549,
    "text": "ensure_dir_end",
    "type": "global function"
  }, {
    "id": 550,
    "text": "chdir",
    "type": "global function"
  }, {
    "id": 551,
    "text": "isempty",
    "type": "global function"
  }, {
    "id": 552,
    "text": "extension",
    "type": "global function"
  }, {
    "id": 553,
    "text": "mkdir",
    "type": "global function"
  }, {
    "id": 554,
    "text": "basename",
    "type": "global function"
  }, {
    "id": 555,
    "text": "splitext",
    "type": "global function"
  }, {
    "id": 556,
    "text": "fullpath",
    "type": "global function"
  }, {
    "id": 557,
    "text": "size",
    "type": "global function"
  }, {
    "id": 558,
    "text": "copy",
    "type": "global function"
  }, {
    "id": 559,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 560,
    "text": "rmdir",
    "type": "global function"
  }, {
    "id": 561,
    "text": "join",
    "type": "global function"
  }, {
    "id": 562,
    "text": "assert_pass",
    "type": "global function"
  }, {
    "id": 563,
    "text": "J",
    "type": "global function"
  }, {
    "id": 564,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 565,
    "text": "time",
    "type": "global function"
  }, {
    "id": 566,
    "text": "assert_error",
    "type": "global function"
  }, {
    "id": 567,
    "text": "assert_false",
    "type": "global function"
  }, {
    "id": 568,
    "text": "assert_equal",
    "type": "global function"
  }, {
    "id": 569,
    "text": "assert_not_nil",
    "type": "global function"
  }, {
    "id": 570,
    "text": "collectgarbage",
    "type": "global function"
  }, {
    "id": 571,
    "text": "next",
    "type": "global function"
  }, {
    "id": 572,
    "text": "TEST_CASE",
    "type": "global function"
  }, {
    "id": 573,
    "text": "assert_not_equal",
    "type": "global function"
  }, {
    "id": 574,
    "text": "assert_string",
    "type": "global function"
  }, {
    "id": 575,
    "text": "assert_true",
    "type": "global function"
  }, {
    "id": 576,
    "text": "assert_boolean",
    "type": "global function"
  }, {
    "id": 577,
    "text": "assert_nil",
    "type": "global function"
  }, {
    "id": 578,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 579,
    "text": "open",
    "type": "global function"
  }, {
    "id": 580,
    "text": "require",
    "type": "global function"
  }, {
    "id": 581,
    "text": "",
    "type": "global variable"
  }, {
    "id": 582,
    "text": "",
    "type": "variable container"
  }, {
    "id": 583,
    "text": "",
    "type": "require container"
  }, {
    "id": 584,
    "text": "",
    "type": "local variable"
  }, {
    "id": 585,
    "text": "",
    "type": "n/a"
  }, {
    "id": 586,
    "text": "",
    "type": "local variable"
  }, {
    "id": 587,
    "text": "",
    "type": "n/a"
  }, {
    "id": 588,
    "text": "",
    "type": "local variable"
  }, {
    "id": 589,
    "text": "",
    "type": "n/a"
  }, {
    "id": 590,
    "text": "",
    "type": "local variable"
  }, {
    "id": 591,
    "text": "",
    "type": "n/a"
  }, {
    "id": 592,
    "text": "",
    "type": "local variable"
  }, {
    "id": 593,
    "text": "",
    "type": "n/a"
  }, {
    "id": 594,
    "text": "",
    "type": "local variable"
  }, {
    "id": 595,
    "text": "",
    "type": "n/a"
  }, {
    "id": 596,
    "text": "",
    "type": "local variable"
  }, {
    "id": 597,
    "text": "",
    "type": "n/a"
  }, {
    "id": 598,
    "text": "",
    "type": "local variable"
  }, {
    "id": 599,
    "text": "",
    "type": "n/a"
  }, {
    "id": 600,
    "text": "",
    "type": "local variable"
  }, {
    "id": 601,
    "text": "",
    "type": "n/a"
  }, {
    "id": 602,
    "text": "",
    "type": "local variable"
  }, {
    "id": 603,
    "text": "",
    "type": "n/a"
  }, {
    "id": 604,
    "text": "",
    "type": "local variable"
  }, {
    "id": 605,
    "text": "",
    "type": "n/a"
  }, {
    "id": 606,
    "text": "",
    "type": "local variable"
  }, {
    "id": 607,
    "text": "",
    "type": "n/a"
  }, {
    "id": 608,
    "text": "",
    "type": "local variable"
  }, {
    "id": 609,
    "text": "",
    "type": "n/a"
  }, {
    "id": 610,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 611,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 612,
    "text": "",
    "type": "interface"
  } ]
}