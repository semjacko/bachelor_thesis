{
  "_filename": "types.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-path/lua/path/win32/ffi/types.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 7,
    "label": "calls",
    "to": 4
  }, {
    "from": 7,
    "label": "calls",
    "to": 4
  }, {
    "from": 7,
    "label": "calls",
    "to": 3
  }, {
    "from": 7,
    "label": "calls",
    "to": 3
  }, {
    "from": 7,
    "label": "calls",
    "to": 3
  }, {
    "from": 7,
    "label": "calls",
    "to": 3
  }, {
    "from": 7,
    "label": "calls",
    "to": 45
  }, {
    "from": 7,
    "label": "calls",
    "to": 45
  }, {
    "from": 7,
    "label": "calls",
    "to": 38
  }, {
    "from": 7,
    "label": "calls",
    "to": 38
  }, {
    "from": 7,
    "label": "calls",
    "to": 38
  }, {
    "from": 7,
    "label": "calls",
    "to": 9
  }, {
    "from": 7,
    "label": "calls",
    "to": 8
  }, {
    "from": 7,
    "label": "calls",
    "to": 8
  }, {
    "from": 7,
    "label": "calls",
    "to": 8
  }, {
    "from": 7,
    "label": "calls",
    "to": 8
  }, {
    "from": 7,
    "label": "calls",
    "to": 46
  }, {
    "from": 7,
    "label": "calls",
    "to": 46
  }, {
    "from": 7,
    "label": "calls",
    "to": 2
  }, {
    "from": 1,
    "label": "contains",
    "to": 7
  }, {
    "from": 7,
    "label": "declares",
    "to": 2
  }, {
    "from": 7,
    "label": "declares",
    "to": 3
  }, {
    "from": 7,
    "label": "declares",
    "to": 4
  }, {
    "from": 7,
    "label": "declares",
    "to": 5
  }, {
    "from": 7,
    "label": "declares",
    "to": 6
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 13
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 17,
    "label": "has",
    "to": 13
  }, {
    "from": 17,
    "label": "has",
    "to": 13
  }, {
    "from": 17,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 13
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 13
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 28
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 31,
    "label": "has",
    "to": 13
  }, {
    "from": 31,
    "label": "has",
    "to": 35
  }, {
    "from": 7,
    "label": "calls",
    "to": 42
  }, {
    "from": 7,
    "label": "calls",
    "to": 42
  }, {
    "from": 7,
    "label": "calls",
    "to": 42
  }, {
    "from": 7,
    "label": "calls",
    "to": 42
  }, {
    "from": 7,
    "label": "calls",
    "to": 42
  }, {
    "from": 7,
    "label": "calls",
    "to": 42
  }, {
    "from": 7,
    "label": "calls",
    "to": 42
  }, {
    "from": 7,
    "label": "calls",
    "to": 42
  }, {
    "from": 7,
    "label": "calls",
    "to": 42
  }, {
    "from": 7,
    "label": "calls",
    "to": 42
  }, {
    "from": 7,
    "label": "calls",
    "to": 40
  }, {
    "from": 7,
    "label": "calls",
    "to": 40
  }, {
    "from": 7,
    "label": "calls",
    "to": 44
  }, {
    "from": 7,
    "label": "calls",
    "to": 44
  }, {
    "from": 7,
    "label": "calls",
    "to": 9
  }, {
    "from": 7,
    "label": "calls",
    "to": 9
  }, {
    "from": 10,
    "label": "calls",
    "to": 43
  }, {
    "from": 7,
    "label": "calls",
    "to": 10
  }, {
    "from": 7,
    "label": "calls",
    "to": 10
  }, {
    "from": 7,
    "label": "calls",
    "to": 10
  }, {
    "from": 7,
    "label": "calls",
    "to": 10
  }, {
    "from": 7,
    "label": "calls",
    "to": 10
  }, {
    "from": 7,
    "label": "calls",
    "to": 10
  }, {
    "from": 7,
    "label": "calls",
    "to": 17
  }, {
    "from": 17,
    "label": "calls",
    "to": 37
  }, {
    "from": 7,
    "label": "calls",
    "to": 39
  }, {
    "from": 7,
    "label": "calls",
    "to": 46
  }, {
    "from": 17,
    "label": "calls",
    "to": 41
  }, {
    "from": 7,
    "label": "calls",
    "to": 15
  }, {
    "from": 7,
    "label": "calls",
    "to": 15
  }, {
    "from": 7,
    "label": "calls",
    "to": 15
  }, {
    "from": 7,
    "label": "calls",
    "to": 15
  }, {
    "from": 7,
    "label": "calls",
    "to": 15
  }, {
    "from": 7,
    "label": "calls",
    "to": 15
  }, {
    "from": 7,
    "label": "declares",
    "to": 10
  }, {
    "from": 7,
    "label": "declares",
    "to": 15
  }, {
    "from": 7,
    "label": "declares",
    "to": 17
  }, {
    "from": 7,
    "label": "declares",
    "to": 25
  }, {
    "from": 7,
    "label": "declares",
    "to": 27
  }, {
    "from": 7,
    "label": "declares",
    "to": 31
  }, {
    "from": 47,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 48
  }, {
    "from": 1,
    "label": "contains",
    "to": 49
  }, {
    "from": 48,
    "label": "initializes",
    "to": 50
  }, {
    "from": 48,
    "label": "initializes",
    "to": 51
  }, {
    "from": 48,
    "label": "initializes",
    "to": 52
  }, {
    "from": 48,
    "label": "initializes",
    "to": 53
  }, {
    "from": 48,
    "label": "initializes",
    "to": 54
  }, {
    "from": 48,
    "label": "initializes",
    "to": 55
  }, {
    "from": 48,
    "label": "initializes",
    "to": 56
  }, {
    "from": 48,
    "label": "initializes",
    "to": 57
  }, {
    "from": 48,
    "label": "initializes",
    "to": 58
  }, {
    "from": 48,
    "label": "initializes",
    "to": 59
  }, {
    "from": 48,
    "label": "initializes",
    "to": 60
  }, {
    "from": 48,
    "label": "initializes",
    "to": 61
  }, {
    "from": 48,
    "label": "initializes",
    "to": 62
  }, {
    "from": 48,
    "label": "initializes",
    "to": 63
  }, {
    "from": 49,
    "label": "initializes",
    "to": 64
  }, {
    "from": 49,
    "label": "initializes",
    "to": 65
  }, {
    "from": 1,
    "label": "provides",
    "to": 66
  }, {
    "from": 66,
    "label": "provides",
    "to": 67
  }, {
    "from": 66,
    "label": "provides",
    "to": 68
  }, {
    "from": 66,
    "label": "provides",
    "to": 69
  }, {
    "from": 71,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 72
  }, {
    "from": 1,
    "label": "contains",
    "to": 73
  }, {
    "from": 72,
    "label": "initializes",
    "to": 74
  }, {
    "from": 74,
    "label": "assigns",
    "to": 75
  }, {
    "from": 72,
    "label": "initializes",
    "to": 76
  }, {
    "from": 76,
    "label": "assigns",
    "to": 77
  }, {
    "from": 77,
    "label": "assigns",
    "to": 78
  }, {
    "from": 78,
    "label": "assigns",
    "to": 79
  }, {
    "from": 77,
    "label": "assigns",
    "to": 80
  }, {
    "from": 80,
    "label": "assigns",
    "to": 81
  }, {
    "from": 77,
    "label": "assigns",
    "to": 82
  }, {
    "from": 82,
    "label": "assigns",
    "to": 83
  }, {
    "from": 77,
    "label": "assigns",
    "to": 84
  }, {
    "from": 84,
    "label": "assigns",
    "to": 85
  }, {
    "from": 77,
    "label": "assigns",
    "to": 86
  }, {
    "from": 86,
    "label": "assigns",
    "to": 87
  }, {
    "from": 77,
    "label": "assigns",
    "to": 88
  }, {
    "from": 88,
    "label": "assigns",
    "to": 89
  }, {
    "from": 77,
    "label": "assigns",
    "to": 90
  }, {
    "from": 90,
    "label": "assigns",
    "to": 91
  }, {
    "from": 77,
    "label": "assigns",
    "to": 92
  }, {
    "from": 92,
    "label": "assigns",
    "to": 93
  }, {
    "from": 77,
    "label": "assigns",
    "to": 94
  }, {
    "from": 94,
    "label": "assigns",
    "to": 95
  }, {
    "from": 77,
    "label": "assigns",
    "to": 96
  }, {
    "from": 96,
    "label": "assigns",
    "to": 97
  }, {
    "from": 72,
    "label": "initializes",
    "to": 98
  }, {
    "from": 72,
    "label": "initializes",
    "to": 99
  }, {
    "from": 99,
    "label": "assigns",
    "to": 100
  }, {
    "from": 100,
    "label": "assigns",
    "to": 101
  }, {
    "from": 101,
    "label": "assigns",
    "to": 102
  }, {
    "from": 100,
    "label": "assigns",
    "to": 103
  }, {
    "from": 103,
    "label": "assigns",
    "to": 104
  }, {
    "from": 100,
    "label": "assigns",
    "to": 105
  }, {
    "from": 105,
    "label": "assigns",
    "to": 106
  }, {
    "from": 72,
    "label": "initializes",
    "to": 107
  }, {
    "from": 107,
    "label": "assigns",
    "to": 108
  }, {
    "from": 73,
    "label": "initializes",
    "to": 109
  }, {
    "from": 109,
    "label": "requires",
    "to": 36
  }, {
    "from": 1,
    "label": "provides",
    "to": 110
  }, {
    "from": 70,
    "label": "represents",
    "to": 111
  }, {
    "from": 110,
    "label": "provides",
    "to": 111
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "types",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function ztrim(str)\r\n  local pos = 1\r\n  while true do\r\n    pos = string.find(str, \"\\000\\000\", pos, true)\r\n    if not pos then return str end\r\n    if 0 ~= (pos % 2) then return string.sub(str, 1, pos - 1) end\r\n    pos = pos + 1\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function(N)  return \"c\" .. N end",
    "type": "function"
  }, {
    "id": 4,
    "text": "function(s) return {\r\n  dwFileAttributes = s.dwFileAttributes;\r\n  ftCreationTime   = {s.ftCreationTime.dwLowDateTime,   s.ftCreationTime.dwHighDateTime};\r\n  ftLastAccessTime = {s.ftLastAccessTime.dwLowDateTime, s.ftLastAccessTime.dwHighDateTime};\r\n  ftLastWriteTime  = {s.ftLastWriteTime.dwLowDateTime,  s.ftLastWriteTime.dwHighDateTime};\r\n  nFileSize        = {s.nFileSizeLow,                   s.nFileSizeHigh};\r\n}end",
    "type": "function"
  }, {
    "id": 5,
    "text": "function(s) \r\n  local res = WIN32_FILE_ATTRIBUTE_DATA(s)\r\n  res.cFileName = s.cFileName:gsub(\"%z.*$\", \"\")\r\n  return res\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function(s)\r\n  local res = WIN32_FILE_ATTRIBUTE_DATA(s)\r\n  res.cFileName = ztrim(s.cFileName)\r\n  return res\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "",
    "type": "function container"
  }, {
    "id": 8,
    "text": "local function define_struct(opt, t)\r\n  if not t then t, opt = opt, nil end\r\n  assert(type(t) == \"table\")\r\n  assert(not opt or type(opt) == \"table\")\r\n\r\n  local s_align = opt and opt.align or 1\r\n  local off = 0\r\n  local names, offsets, types,fields = {}, {}, {}, {}\r\n  local fmt = \"\"\r\n\r\n  for i, field in ipairs(t) do\r\n    local ftype, fname\r\n    local align = s_align\r\n    if type(field) == \"string\" then\r\n      ftype, fname = field, i\r\n    elseif getmetatable(field) == STRUCT then\r\n      ftype, fname = field, i\r\n    else\r\n      ftype, fname = field[1], field[2] or i\r\n      align = field.align or align\r\n    end\r\n    off = math.ceil(off / align) * align\r\n    table.insert(names, fname)\r\n    offsets[fname] = off\r\n    types[fname]   = ftype\r\n    if type(ftype) == \"string\" then\r\n      off = off + alien.size(ftype)\r\n    else\r\n      off = off + ftype.size_\r\n    end\r\n  end\r\n\r\n  return setmetatable({\r\n    names_   = names,\r\n    offsets_ = offsets,\r\n    types_   = types,\r\n    size_    = off,\r\n    fmt_     = fmt,\r\n  }, STRUCT)\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "local function cast(v,t)\r\n  local tmp = alien.buffer(alien.sizeof(t))\r\n  tmp:set(1, v, t)\r\n  return tmp:get(1,t)\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "local function pcdef(...)\r\n  local ok, err = pcall( ffi.cdef, ... )\r\n  if not ok then return nil, err end\r\n  return err\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "local ok, err = pcall( ffi.cdef, ... )",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "if not ok then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "local function pack(n, str)\r\n  return [[\r\n  #pragma pack(push)\r\n  #pragma pack(1)\r\n  ]] .. str ..[[\r\n  #pragma pack(pop)\r\n  ]]\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "local function ztrim(str)\r\n  local pos = 1\r\n  while true do\r\n    pos = string.find(str, \"\\000\\000\", pos, true)\r\n    if not pos then return str end\r\n    if 0 ~= (pos % 2) then return string.sub(str, 1, pos - 1) end\r\n    pos = pos + 1\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "local pos = 1",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "while true do\r\n    pos = string.find(str, \"\\000\\000\", pos, true)\r\n    if not pos then return str end\r\n    if 0 ~= (pos % 2) then return string.sub(str, 1, pos - 1) end\r\n    pos = pos + 1\r\n  end",
    "type": "statement:while"
  }, {
    "id": 20,
    "text": "pos = string.find(str, \"\\000\\000\", pos, true)",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "if not pos then return str end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "if 0 ~= (pos % 2) then return string.sub(str, 1, pos - 1) end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "pos = pos + 1",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function(s) return {\r\n    dwFileAttributes = s.dwFileAttributes;\r\n    ftCreationTime   = {s.ftCreationTime.dwLowDateTime,   s.ftCreationTime.dwHighDateTime};\r\n    ftLastAccessTime = {s.ftLastAccessTime.dwLowDateTime, s.ftLastAccessTime.dwHighDateTime};\r\n    ftLastWriteTime  = {s.ftLastWriteTime.dwLowDateTime,  s.ftLastWriteTime.dwHighDateTime};\r\n    nFileSize        = {s.nFileSizeLow,                   s.nFileSizeHigh};\r\n  }end",
    "type": "function"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function(s) \r\n    local res = c2lua.WIN32_FILE_ATTRIBUTE_DATA(s)\r\n    res.cFileName = ffi.string(s.cFileName);\r\n    return res\r\n  end",
    "type": "function"
  }, {
    "id": 28,
    "text": "local res = c2lua.WIN32_FILE_ATTRIBUTE_DATA(s)",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "res.cFileName = ffi.string(s.cFileName)",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function(s)\r\n    local res = c2lua.WIN32_FILE_ATTRIBUTE_DATA(s)\r\n    local pstr = ffi.cast(CTYPES.PCHAR, s.cFileName)\r\n    local str = ffi.string(pstr, C.MAX_PATH * 2)\r\n    res.cFileName = ztrim(str)\r\n    return res\r\n  end",
    "type": "function"
  }, {
    "id": 32,
    "text": "local pstr = ffi.cast(CTYPES.PCHAR, s.cFileName)",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "local str = ffi.string(pstr, C.MAX_PATH * 2)",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "res.cFileName = ztrim(str)",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "ffi",
    "type": "module"
  }, {
    "id": 37,
    "text": "find",
    "type": "global function"
  }, {
    "id": 38,
    "text": "sizeof",
    "type": "global function"
  }, {
    "id": 39,
    "text": "cdef",
    "type": "global function"
  }, {
    "id": 40,
    "text": "string",
    "type": "global function"
  }, {
    "id": 41,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 42,
    "text": "typeof",
    "type": "global function"
  }, {
    "id": 43,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 44,
    "text": "WIN32_FILE_ATTRIBUTE_DATA",
    "type": "global function"
  }, {
    "id": 45,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 46,
    "text": "require",
    "type": "global function"
  }, {
    "id": 47,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 48,
    "text": "",
    "type": "variable container"
  }, {
    "id": 49,
    "text": "",
    "type": "require container"
  }, {
    "id": 50,
    "text": "",
    "type": "local variable"
  }, {
    "id": 51,
    "text": "",
    "type": "local variable"
  }, {
    "id": 52,
    "text": "",
    "type": "local variable"
  }, {
    "id": 53,
    "text": "",
    "type": "local variable"
  }, {
    "id": 54,
    "text": "",
    "type": "local variable"
  }, {
    "id": 55,
    "text": "",
    "type": "local variable"
  }, {
    "id": 56,
    "text": "",
    "type": "local variable"
  }, {
    "id": 57,
    "text": "",
    "type": "local variable"
  }, {
    "id": 58,
    "text": "",
    "type": "local variable"
  }, {
    "id": 59,
    "text": "",
    "type": "local variable"
  }, {
    "id": 60,
    "text": "",
    "type": "local variable"
  }, {
    "id": 61,
    "text": "",
    "type": "local variable"
  }, {
    "id": 62,
    "text": "",
    "type": "local variable"
  }, {
    "id": 63,
    "text": "",
    "type": "local variable"
  }, {
    "id": 64,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 65,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 66,
    "text": "",
    "type": "interface container"
  }, {
    "id": 67,
    "text": "",
    "type": "interface"
  }, {
    "id": 68,
    "text": "",
    "type": "interface"
  }, {
    "id": 69,
    "text": "",
    "type": "interface"
  }, {
    "id": 70,
    "text": "",
    "type": "local variable"
  }, {
    "id": 71,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 72,
    "text": "",
    "type": "variable container"
  }, {
    "id": 73,
    "text": "",
    "type": "require container"
  }, {
    "id": 74,
    "text": "",
    "type": "local variable"
  }, {
    "id": 75,
    "text": "",
    "type": "n/a"
  }, {
    "id": 76,
    "text": "",
    "type": "local variable"
  }, {
    "id": 77,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 78,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 79,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 80,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 81,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 82,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 83,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 84,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 85,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 86,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 87,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 88,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 89,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 90,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 91,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 92,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 93,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 94,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 95,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 96,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 97,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 98,
    "text": "",
    "type": "local variable"
  }, {
    "id": 99,
    "text": "",
    "type": "local variable"
  }, {
    "id": 100,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 101,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 102,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 103,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 104,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 105,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 106,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 107,
    "text": "",
    "type": "global variable"
  }, {
    "id": 108,
    "text": "",
    "type": "n/a"
  }, {
    "id": 109,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 110,
    "text": "",
    "type": "interface container"
  }, {
    "id": 111,
    "text": "",
    "type": "interface"
  } ]
}