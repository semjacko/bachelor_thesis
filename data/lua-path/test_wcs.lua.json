{
  "_filename": "test_wcs.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-path/test/test_wcs.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 5,
    "label": "has",
    "to": 11
  }, {
    "from": 5,
    "label": "has",
    "to": 12
  }, {
    "from": 5,
    "label": "has",
    "to": 13
  }, {
    "from": 5,
    "label": "has",
    "to": 14
  }, {
    "from": 5,
    "label": "has",
    "to": 15
  }, {
    "from": 5,
    "label": "has",
    "to": 13
  }, {
    "from": 5,
    "label": "has",
    "to": 14
  }, {
    "from": 5,
    "label": "has",
    "to": 16
  }, {
    "from": 5,
    "label": "has",
    "to": 13
  }, {
    "from": 5,
    "label": "has",
    "to": 14
  }, {
    "from": 5,
    "label": "has",
    "to": 15
  }, {
    "from": 5,
    "label": "has",
    "to": 17
  }, {
    "from": 5,
    "label": "has",
    "to": 18
  }, {
    "from": 5,
    "label": "has",
    "to": 19
  }, {
    "from": 5,
    "label": "has",
    "to": 20
  }, {
    "from": 5,
    "label": "has",
    "to": 21
  }, {
    "from": 5,
    "label": "has",
    "to": 22
  }, {
    "from": 5,
    "label": "has",
    "to": 23
  }, {
    "from": 5,
    "label": "has",
    "to": 24
  }, {
    "from": 5,
    "label": "has",
    "to": 25
  }, {
    "from": 5,
    "label": "has",
    "to": 26
  }, {
    "from": 5,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 3
  }, {
    "from": 28,
    "label": "has",
    "to": 3
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 35
  }, {
    "from": 39,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "calls",
    "to": 45
  }, {
    "from": 5,
    "label": "calls",
    "to": 49
  }, {
    "from": 5,
    "label": "calls",
    "to": 49
  }, {
    "from": 5,
    "label": "calls",
    "to": 49
  }, {
    "from": 5,
    "label": "calls",
    "to": 49
  }, {
    "from": 5,
    "label": "calls",
    "to": 49
  }, {
    "from": 5,
    "label": "calls",
    "to": 49
  }, {
    "from": 5,
    "label": "calls",
    "to": 49
  }, {
    "from": 40,
    "label": "calls",
    "to": 2
  }, {
    "from": 40,
    "label": "calls",
    "to": 2
  }, {
    "from": 40,
    "label": "calls",
    "to": 2
  }, {
    "from": 5,
    "label": "calls",
    "to": 51
  }, {
    "from": 5,
    "label": "calls",
    "to": 52
  }, {
    "from": 5,
    "label": "calls",
    "to": 52
  }, {
    "from": 34,
    "label": "calls",
    "to": 5
  }, {
    "from": 34,
    "label": "calls",
    "to": 5
  }, {
    "from": 5,
    "label": "calls",
    "to": 50
  }, {
    "from": 5,
    "label": "calls",
    "to": 50
  }, {
    "from": 5,
    "label": "calls",
    "to": 50
  }, {
    "from": 5,
    "label": "calls",
    "to": 54
  }, {
    "from": 5,
    "label": "calls",
    "to": 54
  }, {
    "from": 5,
    "label": "calls",
    "to": 48
  }, {
    "from": 5,
    "label": "calls",
    "to": 48
  }, {
    "from": 5,
    "label": "calls",
    "to": 48
  }, {
    "from": 40,
    "label": "calls",
    "to": 28
  }, {
    "from": 40,
    "label": "calls",
    "to": 28
  }, {
    "from": 5,
    "label": "calls",
    "to": 47
  }, {
    "from": 5,
    "label": "calls",
    "to": 46
  }, {
    "from": 5,
    "label": "calls",
    "to": 46
  }, {
    "from": 28,
    "label": "calls",
    "to": 44
  }, {
    "from": 40,
    "label": "calls",
    "to": 55
  }, {
    "from": 40,
    "label": "calls",
    "to": 55
  }, {
    "from": 32,
    "label": "calls",
    "to": 55
  }, {
    "from": 32,
    "label": "calls",
    "to": 55
  }, {
    "from": 40,
    "label": "calls",
    "to": 53
  }, {
    "from": 40,
    "label": "calls",
    "to": 53
  }, {
    "from": 40,
    "label": "calls",
    "to": 53
  }, {
    "from": 40,
    "label": "calls",
    "to": 43
  }, {
    "from": 40,
    "label": "calls",
    "to": 42
  }, {
    "from": 40,
    "label": "calls",
    "to": 42
  }, {
    "from": 1,
    "label": "contains",
    "to": 40
  }, {
    "from": 40,
    "label": "declares",
    "to": 2
  }, {
    "from": 40,
    "label": "declares",
    "to": 5
  }, {
    "from": 40,
    "label": "declares",
    "to": 28
  }, {
    "from": 40,
    "label": "declares",
    "to": 32
  }, {
    "from": 40,
    "label": "declares",
    "to": 34
  }, {
    "from": 40,
    "label": "declares",
    "to": 36
  }, {
    "from": 40,
    "label": "declares",
    "to": 38
  }, {
    "from": 40,
    "label": "declares",
    "to": 39
  }, {
    "from": 56,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 57
  }, {
    "from": 1,
    "label": "contains",
    "to": 58
  }, {
    "from": 57,
    "label": "initializes",
    "to": 59
  }, {
    "from": 59,
    "label": "assigns",
    "to": 60
  }, {
    "from": 57,
    "label": "initializes",
    "to": 61
  }, {
    "from": 57,
    "label": "initializes",
    "to": 62
  }, {
    "from": 62,
    "label": "assigns",
    "to": 63
  }, {
    "from": 57,
    "label": "initializes",
    "to": 64
  }, {
    "from": 64,
    "label": "assigns",
    "to": 65
  }, {
    "from": 57,
    "label": "initializes",
    "to": 66
  }, {
    "from": 66,
    "label": "assigns",
    "to": 67
  }, {
    "from": 58,
    "label": "initializes",
    "to": 68
  }, {
    "from": 68,
    "label": "requires",
    "to": 41
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "test_wcs",
    "type": "module"
  }, {
    "id": 2,
    "text": "function(msg) return function() lunit.skip(msg) end end",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "lunit.skip(msg)",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "local function self_test(wcs)\r\n  local assert = lunit.assert\r\n  local assert_nil = lunit.assert_nil\r\n  local assert_equal = lunit.assert_equal\r\n\r\n  assert_nil(wcs.wcstoansi(nil))\r\n  assert_nil(wcs.ansitowcs(nil))\r\n\r\n  assert_equal(\"\", wcs.wcstoansi(\"\"))\r\n  assert_equal(\"\", wcs.ansitowcs(\"\"))\r\n\r\n  local str = \"D\\0ë\\0m\\0ó\\0ñ\\0ì\\0ç\\0Ä\\0ñ\\0g\\0é\\0l\\0\"\r\n  local res = \"DemonicAngel\"\r\n  assert(wcs.wcstooem(str) == res)\r\n\r\n\r\n\r\n  local str = \"D\\0ë\\0m\\0ó\\0ñ\\0ì\\0ç\\0Ä\\0ñ\\0g\\0é\\0l\\0\"\r\n  local res = \"DemonicAngel\"\r\n  assert(wcs.wcstoansi(str) == res)\r\n\r\n  local str = \"D\\0ë\\0m\\0ó\\0ñ\\0ì\\0ç\\0Ä\\0ñ\\0g\\0é\\0l\\0\"\r\n  local res = \"DemonicAngel\"\r\n  assert(wcs.wcstooem(str) == res)\r\n\r\n  local str = \"\\68\\235\\109\\243\\241\\236\\231\\196\\241\\103\\233\\108\"\r\n  local res = \"\\68\\0\\59\\4\\109\\0\\67\\4\\65\\4\\60\\4\\55\\4\\20\\4\\65\\4\\103\\0\\57\\4\\108\\0\"\r\n  assert(wcs.ansitowcs(str) == res)\r\n\r\n  local str = \"\\68\\137\\109\\162\\164\\141\\135\\142\\164\\103\\130\\108\"\r\n  local res = \"\\68\\0\\25\\4\\109\\0\\50\\4\\52\\4\\29\\4\\23\\4\\30\\4\\52\\4\\103\\0\\18\\4\\108\\0\"\r\n  assert(wcs.oemtowcs(str) == res)\r\n\r\n  -- iconv\r\n  local utf8 = \"\\65\\111\\32\\108\\111\\110\\103\\101\\44\\32\\97\\111\\32\\108\\117\\97\\114\"\r\n  .. \"\\10\\78\\111\\32\\114\\105\\111\\32\\117\\109\\97\\32\\118\\101\\108\\97\\10\\83\\101\\114\"\r\n  .. \"\\101\\110\\97\\32\\97\\32\\112\\97\\115\\115\\97\\114\\44\\10\\81\\117\\101\\32\\195\\169\\32\"\r\n  .. \"\\113\\117\\101\\32\\109\\101\\32\\114\\101\\118\\101\\108\\97\\10\\10\\78\\195\\163\\111\\32\"\r\n  .. \"\\115\\101\\105\\44\\32\\109\\97\\115\\32\\109\\117\\101\\32\\115\\101\\114\\10\\84\\111\\114\"\r\n  .. \"\\110\\111\\117\\45\\115\\101\\45\\109\\101\\32\\101\\115\\116\\114\\97\\110\\104\\111\\44\"\r\n  .. \"\\10\\69\\32\\101\\117\\32\\115\\111\\110\\104\\111\\32\\115\\101\\109\\32\\118\\101\\114\\10\"\r\n  .. \"\\79\\115\\32\\115\\111\\110\\104\\111\\115\\32\\113\\117\\101\\32\\116\\101\\110\\104\\111\"\r\n  .. \"\\46\\10\\10\\81\\117\\101\\32\\97\\110\\103\\195\\186\\115\\116\\105\\97\\32\\109\\101\\32\"\r\n  .. \"\\101\\110\\108\\97\\195\\167\\97\\63\\10\\81\\117\\101\\32\\97\\109\\111\\114\\32\\110\\195\"\r\n  .. \"\\163\\111\\32\\115\\101\\32\\101\\120\\112\\108\\105\\99\\97\\63\\10\\195\\137\\32\\97\\32\"\r\n  .. \"\\118\\101\\108\\97\\32\\113\\117\\101\\32\\112\\97\\115\\115\\97\\10\\78\\97\\32\\110\\111\"\r\n  .. \"\\105\\116\\101\\32\\113\\117\\101\\32\\102\\105\\99\\97\\10\\10\\32\\32\\32\\32\\45\\45\\32\"\r\n  .. \"\\70\\101\\114\\110\\97\\110\\100\\111\\32\\80\\101\\115\\115\\111\\97\\10\"\r\n\r\n  local utf16 = \"\\255\\254\\65\\0\\111\\0\\32\\0\\108\\0\\111\\0\\110\\0\\103\\0\\101\\0\\44\\0\\32\"\r\n  .. \"\\0\\97\\0\\111\\0\\32\\0\\108\\0\\117\\0\\97\\0\\114\\0\\10\\0\\78\\0\\111\\0\\32\\0\\114\\0\\105\"\r\n  .. \"\\0\\111\\0\\32\\0\\117\\0\\109\\0\\97\\0\\32\\0\\118\\0\\101\\0\\108\\0\\97\\0\\10\\0\\83\\0\\101\"\r\n  .. \"\\0\\114\\0\\101\\0\\110\\0\\97\\0\\32\\0\\97\\0\\32\\0\\112\\0\\97\\0\\115\\0\\115\\0\\97\\0\\114\"\r\n  .. \"\\0\\44\\0\\10\\0\\81\\0\\117\\0\\101\\0\\32\\0\\233\\0\\32\\0\\113\\0\\117\\0\\101\\0\\32\\0\\109\"\r\n  .. \"\\0\\101\\0\\32\\0\\114\\0\\101\\0\\118\\0\\101\\0\\108\\0\\97\\0\\10\\0\\10\\0\\78\\0\\227\\0\\111\"\r\n  .. \"\\0\\32\\0\\115\\0\\101\\0\\105\\0\\44\\0\\32\\0\\109\\0\\97\\0\\115\\0\\32\\0\\109\\0\\117\\0\\101\"\r\n  .. \"\\0\\32\\0\\115\\0\\101\\0\\114\\0\\10\\0\\84\\0\\111\\0\\114\\0\\110\\0\\111\\0\\117\\0\\45\\0\\115\"\r\n  .. \"\\0\\101\\0\\45\\0\\109\\0\\101\\0\\32\\0\\101\\0\\115\\0\\116\\0\\114\\0\\97\\0\\110\\0\\104\\0\"\r\n  .. \"\\111\\0\\44\\0\\10\\0\\69\\0\\32\\0\\101\\0\\117\\0\\32\\0\\115\\0\\111\\0\\110\\0\\104\\0\\111\"\r\n  .. \"\\0\\32\\0\\115\\0\\101\\0\\109\\0\\32\\0\\118\\0\\101\\0\\114\\0\\10\\0\\79\\0\\115\\0\\32\\0\\115\"\r\n  .. \"\\0\\111\\0\\110\\0\\104\\0\\111\\0\\115\\0\\32\\0\\113\\0\\117\\0\\101\\0\\32\\0\\116\\0\\101\\0\"\r\n  .. \"\\110\\0\\104\\0\\111\\0\\46\\0\\10\\0\\10\\0\\81\\0\\117\\0\\101\\0\\32\\0\\97\\0\\110\\0\\103\\0\"\r\n  .. \"\\250\\0\\115\\0\\116\\0\\105\\0\\97\\0\\32\\0\\109\\0\\101\\0\\32\\0\\101\\0\\110\\0\\108\\0\\97\"\r\n  .. \"\\0\\231\\0\\97\\0\\63\\0\\10\\0\\81\\0\\117\\0\\101\\0\\32\\0\\97\\0\\109\\0\\111\\0\\114\\0\\32\"\r\n  .. \"\\0\\110\\0\\227\\0\\111\\0\\32\\0\\115\\0\\101\\0\\32\\0\\101\\0\\120\\0\\112\\0\\108\\0\\105\\0\"\r\n  .. \"\\99\\0\\97\\0\\63\\0\\10\\0\\201\\0\\32\\0\\97\\0\\32\\0\\118\\0\\101\\0\\108\\0\\97\\0\\32\\0\\113\"\r\n  .. \"\\0\\117\\0\\101\\0\\32\\0\\112\\0\\97\\0\\115\\0\\115\\0\\97\\0\\10\\0\\78\\0\\97\\0\\32\\0\\110\"\r\n  .. \"\\0\\111\\0\\105\\0\\116\\0\\101\\0\\32\\0\\113\\0\\117\\0\\101\\0\\32\\0\\102\\0\\105\\0\\99\\0\"\r\n  .. \"\\97\\0\\10\\0\\10\\0\\32\\0\\32\\0\\32\\0\\32\\0\\45\\0\\45\\0\\32\\0\\70\\0\\101\\0\\114\\0\\110\"\r\n  .. \"\\0\\97\\0\\110\\0\\100\\0\\111\\0\\32\\0\\80\\0\\101\\0\\115\\0\\115\\0\\111\\0\\97\\0\\10\\0\"\r\n\r\n  assert(utf16:sub(3) == wcs.utf8towcs(utf8))         -- without bom\r\n  assert(utf8         == wcs.wcstoutf8(utf16:sub(3))) -- without bom\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local assert = lunit.assert",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "local assert_nil = lunit.assert_nil",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "local assert_equal = lunit.assert_equal",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "assert_nil(wcs.wcstoansi(nil))",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "assert_nil(wcs.ansitowcs(nil))",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "assert_equal(\"\", wcs.wcstoansi(\"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "assert_equal(\"\", wcs.ansitowcs(\"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "local str = \"D\\0ë\\0m\\0ó\\0ñ\\0ì\\0ç\\0Ä\\0ñ\\0g\\0é\\0l\\0\"",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "local res = \"DemonicAngel\"",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "assert(wcs.wcstooem(str) == res)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "assert(wcs.wcstoansi(str) == res)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "local str = \"\\68\\235\\109\\243\\241\\236\\231\\196\\241\\103\\233\\108\"",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "local res = \"\\68\\0\\59\\4\\109\\0\\67\\4\\65\\4\\60\\4\\55\\4\\20\\4\\65\\4\\103\\0\\57\\4\\108\\0\"",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "assert(wcs.ansitowcs(str) == res)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "local str = \"\\68\\137\\109\\162\\164\\141\\135\\142\\164\\103\\130\\108\"",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "local res = \"\\68\\0\\25\\4\\109\\0\\50\\4\\52\\4\\29\\4\\23\\4\\30\\4\\52\\4\\103\\0\\18\\4\\108\\0\"",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "assert(wcs.oemtowcs(str) == res)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "local utf8 = \"\\65\\111\\32\\108\\111\\110\\103\\101\\44\\32\\97\\111\\32\\108\\117\\97\\114\"\r\n  .. \"\\10\\78\\111\\32\\114\\105\\111\\32\\117\\109\\97\\32\\118\\101\\108\\97\\10\\83\\101\\114\"\r\n  .. \"\\101\\110\\97\\32\\97\\32\\112\\97\\115\\115\\97\\114\\44\\10\\81\\117\\101\\32\\195\\169\\32\"\r\n  .. \"\\113\\117\\101\\32\\109\\101\\32\\114\\101\\118\\101\\108\\97\\10\\10\\78\\195\\163\\111\\32\"\r\n  .. \"\\115\\101\\105\\44\\32\\109\\97\\115\\32\\109\\117\\101\\32\\115\\101\\114\\10\\84\\111\\114\"\r\n  .. \"\\110\\111\\117\\45\\115\\101\\45\\109\\101\\32\\101\\115\\116\\114\\97\\110\\104\\111\\44\"\r\n  .. \"\\10\\69\\32\\101\\117\\32\\115\\111\\110\\104\\111\\32\\115\\101\\109\\32\\118\\101\\114\\10\"\r\n  .. \"\\79\\115\\32\\115\\111\\110\\104\\111\\115\\32\\113\\117\\101\\32\\116\\101\\110\\104\\111\"\r\n  .. \"\\46\\10\\10\\81\\117\\101\\32\\97\\110\\103\\195\\186\\115\\116\\105\\97\\32\\109\\101\\32\"\r\n  .. \"\\101\\110\\108\\97\\195\\167\\97\\63\\10\\81\\117\\101\\32\\97\\109\\111\\114\\32\\110\\195\"\r\n  .. \"\\163\\111\\32\\115\\101\\32\\101\\120\\112\\108\\105\\99\\97\\63\\10\\195\\137\\32\\97\\32\"\r\n  .. \"\\118\\101\\108\\97\\32\\113\\117\\101\\32\\112\\97\\115\\115\\97\\10\\78\\97\\32\\110\\111\"\r\n  .. \"\\105\\116\\101\\32\\113\\117\\101\\32\\102\\105\\99\\97\\10\\10\\32\\32\\32\\32\\45\\45\\32\"\r\n  .. \"\\70\\101\\114\\110\\97\\110\\100\\111\\32\\80\\101\\115\\115\\111\\97\\10\"",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "local utf16 = \"\\255\\254\\65\\0\\111\\0\\32\\0\\108\\0\\111\\0\\110\\0\\103\\0\\101\\0\\44\\0\\32\"\r\n  .. \"\\0\\97\\0\\111\\0\\32\\0\\108\\0\\117\\0\\97\\0\\114\\0\\10\\0\\78\\0\\111\\0\\32\\0\\114\\0\\105\"\r\n  .. \"\\0\\111\\0\\32\\0\\117\\0\\109\\0\\97\\0\\32\\0\\118\\0\\101\\0\\108\\0\\97\\0\\10\\0\\83\\0\\101\"\r\n  .. \"\\0\\114\\0\\101\\0\\110\\0\\97\\0\\32\\0\\97\\0\\32\\0\\112\\0\\97\\0\\115\\0\\115\\0\\97\\0\\114\"\r\n  .. \"\\0\\44\\0\\10\\0\\81\\0\\117\\0\\101\\0\\32\\0\\233\\0\\32\\0\\113\\0\\117\\0\\101\\0\\32\\0\\109\"\r\n  .. \"\\0\\101\\0\\32\\0\\114\\0\\101\\0\\118\\0\\101\\0\\108\\0\\97\\0\\10\\0\\10\\0\\78\\0\\227\\0\\111\"\r\n  .. \"\\0\\32\\0\\115\\0\\101\\0\\105\\0\\44\\0\\32\\0\\109\\0\\97\\0\\115\\0\\32\\0\\109\\0\\117\\0\\101\"\r\n  .. \"\\0\\32\\0\\115\\0\\101\\0\\114\\0\\10\\0\\84\\0\\111\\0\\114\\0\\110\\0\\111\\0\\117\\0\\45\\0\\115\"\r\n  .. \"\\0\\101\\0\\45\\0\\109\\0\\101\\0\\32\\0\\101\\0\\115\\0\\116\\0\\114\\0\\97\\0\\110\\0\\104\\0\"\r\n  .. \"\\111\\0\\44\\0\\10\\0\\69\\0\\32\\0\\101\\0\\117\\0\\32\\0\\115\\0\\111\\0\\110\\0\\104\\0\\111\"\r\n  .. \"\\0\\32\\0\\115\\0\\101\\0\\109\\0\\32\\0\\118\\0\\101\\0\\114\\0\\10\\0\\79\\0\\115\\0\\32\\0\\115\"\r\n  .. \"\\0\\111\\0\\110\\0\\104\\0\\111\\0\\115\\0\\32\\0\\113\\0\\117\\0\\101\\0\\32\\0\\116\\0\\101\\0\"\r\n  .. \"\\110\\0\\104\\0\\111\\0\\46\\0\\10\\0\\10\\0\\81\\0\\117\\0\\101\\0\\32\\0\\97\\0\\110\\0\\103\\0\"\r\n  .. \"\\250\\0\\115\\0\\116\\0\\105\\0\\97\\0\\32\\0\\109\\0\\101\\0\\32\\0\\101\\0\\110\\0\\108\\0\\97\"\r\n  .. \"\\0\\231\\0\\97\\0\\63\\0\\10\\0\\81\\0\\117\\0\\101\\0\\32\\0\\97\\0\\109\\0\\111\\0\\114\\0\\32\"\r\n  .. \"\\0\\110\\0\\227\\0\\111\\0\\32\\0\\115\\0\\101\\0\\32\\0\\101\\0\\120\\0\\112\\0\\108\\0\\105\\0\"\r\n  .. \"\\99\\0\\97\\0\\63\\0\\10\\0\\201\\0\\32\\0\\97\\0\\32\\0\\118\\0\\101\\0\\108\\0\\97\\0\\32\\0\\113\"\r\n  .. \"\\0\\117\\0\\101\\0\\32\\0\\112\\0\\97\\0\\115\\0\\115\\0\\97\\0\\10\\0\\78\\0\\97\\0\\32\\0\\110\"\r\n  .. \"\\0\\111\\0\\105\\0\\116\\0\\101\\0\\32\\0\\113\\0\\117\\0\\101\\0\\32\\0\\102\\0\\105\\0\\99\\0\"\r\n  .. \"\\97\\0\\10\\0\\10\\0\\32\\0\\32\\0\\32\\0\\32\\0\\45\\0\\45\\0\\32\\0\\70\\0\\101\\0\\114\\0\\110\"\r\n  .. \"\\0\\97\\0\\110\\0\\100\\0\\111\\0\\32\\0\\80\\0\\101\\0\\115\\0\\115\\0\\111\\0\\97\\0\\10\\0\"",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "assert(utf16:sub(3) == wcs.utf8towcs(utf8))",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "assert(utf8         == wcs.wcstoutf8(utf16:sub(3)))",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "local function prequire(...)\r\n  local ok, mod = pcall(require, ...)\r\n  if not ok then return nil, mod end\r\n  return mod\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "local ok, mod = pcall(require, ...)",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "if not ok then return nil, mod end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function setup() wcs = require \"path.win32.wcs\".load(\"ffi\") end",
    "type": "function"
  }, {
    "id": 33,
    "text": "wcs = require \"path.win32.wcs\".load(\"ffi\")",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "function test() self_test(wcs) end",
    "type": "function"
  }, {
    "id": 35,
    "text": "self_test(wcs)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "function setup() wcs = require \"path.win32.wcs\".load(\"alien\") end",
    "type": "function"
  }, {
    "id": 37,
    "text": "wcs = require \"path.win32.wcs\".load(\"alien\")",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "function test() self_test(wcs) end",
    "type": "function"
  }, {
    "id": 39,
    "text": "function() lunit.skip(msg) end",
    "type": "function"
  }, {
    "id": 40,
    "text": "",
    "type": "function container"
  }, {
    "id": 41,
    "text": "lunit",
    "type": "module"
  }, {
    "id": 42,
    "text": "run",
    "type": "global function"
  }, {
    "id": 43,
    "text": "skip",
    "type": "global function"
  }, {
    "id": 44,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 45,
    "text": "wcstoutf8",
    "type": "global function"
  }, {
    "id": 46,
    "text": "wcstooem",
    "type": "global function"
  }, {
    "id": 47,
    "text": "oemtowcs",
    "type": "global function"
  }, {
    "id": 48,
    "text": "ansitowcs",
    "type": "global function"
  }, {
    "id": 49,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 50,
    "text": "wcstoansi",
    "type": "global function"
  }, {
    "id": 51,
    "text": "utf8towcs",
    "type": "global function"
  }, {
    "id": 52,
    "text": "assert_equal",
    "type": "global function"
  }, {
    "id": 53,
    "text": "TEST_CASE",
    "type": "global function"
  }, {
    "id": 54,
    "text": "assert_nil",
    "type": "global function"
  }, {
    "id": 55,
    "text": "require",
    "type": "global function"
  }, {
    "id": 56,
    "text": "",
    "type": "global variable"
  }, {
    "id": 57,
    "text": "",
    "type": "variable container"
  }, {
    "id": 58,
    "text": "",
    "type": "require container"
  }, {
    "id": 59,
    "text": "",
    "type": "local variable"
  }, {
    "id": 60,
    "text": "",
    "type": "n/a"
  }, {
    "id": 61,
    "text": "",
    "type": "local variable"
  }, {
    "id": 62,
    "text": "",
    "type": "local variable"
  }, {
    "id": 63,
    "text": "",
    "type": "n/a"
  }, {
    "id": 64,
    "text": "",
    "type": "local variable"
  }, {
    "id": 65,
    "text": "",
    "type": "n/a"
  }, {
    "id": 66,
    "text": "",
    "type": "local variable"
  }, {
    "id": 67,
    "text": "",
    "type": "n/a"
  }, {
    "id": 68,
    "text": "",
    "type": "require local variable"
  } ]
}