{
  "_filename": "findfile.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-path/lua/path/findfile.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 9,
    "label": "has",
    "to": 13
  }, {
    "from": 9,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 10
  }, {
    "from": 14,
    "label": "has",
    "to": 11
  }, {
    "from": 14,
    "label": "has",
    "to": 12
  }, {
    "from": 14,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 10
  }, {
    "from": 15,
    "label": "has",
    "to": 11
  }, {
    "from": 15,
    "label": "has",
    "to": 13
  }, {
    "from": 15,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 10
  }, {
    "from": 16,
    "label": "has",
    "to": 11
  }, {
    "from": 16,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 13
  }, {
    "from": 17,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 19,
    "label": "has",
    "to": 8
  }, {
    "from": 19,
    "label": "has",
    "to": 8
  }, {
    "from": 19,
    "label": "has",
    "to": 8
  }, {
    "from": 19,
    "label": "has",
    "to": 8
  }, {
    "from": 19,
    "label": "has",
    "to": 24
  }, {
    "from": 19,
    "label": "has",
    "to": 8
  }, {
    "from": 19,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 5
  }, {
    "from": 26,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 26,
    "label": "has",
    "to": 8
  }, {
    "from": 27,
    "label": "has",
    "to": 10
  }, {
    "from": 27,
    "label": "has",
    "to": 11
  }, {
    "from": 27,
    "label": "has",
    "to": 12
  }, {
    "from": 27,
    "label": "has",
    "to": 13
  }, {
    "from": 27,
    "label": "has",
    "to": 8
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 10
  }, {
    "from": 29,
    "label": "has",
    "to": 11
  }, {
    "from": 29,
    "label": "has",
    "to": 12
  }, {
    "from": 29,
    "label": "has",
    "to": 8
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 10
  }, {
    "from": 31,
    "label": "has",
    "to": 11
  }, {
    "from": 31,
    "label": "has",
    "to": 13
  }, {
    "from": 31,
    "label": "has",
    "to": 8
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 10
  }, {
    "from": 33,
    "label": "has",
    "to": 11
  }, {
    "from": 33,
    "label": "has",
    "to": 8
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 18
  }, {
    "from": 35,
    "label": "has",
    "to": 13
  }, {
    "from": 35,
    "label": "has",
    "to": 8
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 37,
    "label": "has",
    "to": 8
  }, {
    "from": 37,
    "label": "has",
    "to": 8
  }, {
    "from": 37,
    "label": "has",
    "to": 8
  }, {
    "from": 37,
    "label": "has",
    "to": 8
  }, {
    "from": 37,
    "label": "has",
    "to": 24
  }, {
    "from": 37,
    "label": "has",
    "to": 8
  }, {
    "from": 37,
    "label": "has",
    "to": 8
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 3,
    "label": "calls",
    "to": 26
  }, {
    "from": 3,
    "label": "calls",
    "to": 26
  }, {
    "from": 3,
    "label": "calls",
    "to": 26
  }, {
    "from": 3,
    "label": "calls",
    "to": 26
  }, {
    "from": 3,
    "label": "calls",
    "to": 26
  }, {
    "from": 3,
    "label": "calls",
    "to": 47
  }, {
    "from": 3,
    "label": "calls",
    "to": 46
  }, {
    "from": 3,
    "label": "calls",
    "to": 46
  }, {
    "from": 3,
    "label": "calls",
    "to": 46
  }, {
    "from": 3,
    "label": "calls",
    "to": 46
  }, {
    "from": 3,
    "label": "calls",
    "to": 46
  }, {
    "from": 3,
    "label": "calls",
    "to": 46
  }, {
    "from": 3,
    "label": "calls",
    "to": 45
  }, {
    "from": 3,
    "label": "calls",
    "to": 45
  }, {
    "from": 3,
    "label": "calls",
    "to": 45
  }, {
    "from": 3,
    "label": "calls",
    "to": 45
  }, {
    "from": 3,
    "label": "calls",
    "to": 45
  }, {
    "from": 3,
    "label": "calls",
    "to": 45
  }, {
    "from": 3,
    "label": "calls",
    "to": 45
  }, {
    "from": 3,
    "label": "calls",
    "to": 45
  }, {
    "from": 3,
    "label": "calls",
    "to": 45
  }, {
    "from": 3,
    "label": "calls",
    "to": 45
  }, {
    "from": 3,
    "label": "calls",
    "to": 27
  }, {
    "from": 3,
    "label": "calls",
    "to": 35
  }, {
    "from": 3,
    "label": "calls",
    "to": 29
  }, {
    "from": 3,
    "label": "calls",
    "to": 44
  }, {
    "from": 3,
    "label": "calls",
    "to": 44
  }, {
    "from": 3,
    "label": "calls",
    "to": 44
  }, {
    "from": 3,
    "label": "calls",
    "to": 44
  }, {
    "from": 3,
    "label": "calls",
    "to": 44
  }, {
    "from": 39,
    "label": "calls",
    "to": 48
  }, {
    "from": 39,
    "label": "calls",
    "to": 48
  }, {
    "from": 39,
    "label": "calls",
    "to": 48
  }, {
    "from": 39,
    "label": "calls",
    "to": 48
  }, {
    "from": 3,
    "label": "calls",
    "to": 33
  }, {
    "from": 3,
    "label": "calls",
    "to": 31
  }, {
    "from": 1,
    "label": "contains",
    "to": 39
  }, {
    "from": 39,
    "label": "declares",
    "to": 3
  }, {
    "from": 39,
    "label": "declares",
    "to": 26
  }, {
    "from": 39,
    "label": "declares",
    "to": 27
  }, {
    "from": 39,
    "label": "declares",
    "to": 29
  }, {
    "from": 39,
    "label": "declares",
    "to": 31
  }, {
    "from": 39,
    "label": "declares",
    "to": 33
  }, {
    "from": 39,
    "label": "declares",
    "to": 35
  }, {
    "from": 39,
    "label": "declares",
    "to": 37
  }, {
    "from": 1,
    "label": "contains",
    "to": 49
  }, {
    "from": 1,
    "label": "contains",
    "to": 50
  }, {
    "from": 50,
    "label": "initializes",
    "to": 51
  }, {
    "from": 51,
    "label": "requires",
    "to": 40
  }, {
    "from": 50,
    "label": "initializes",
    "to": 52
  }, {
    "from": 52,
    "label": "requires",
    "to": 43
  }, {
    "from": 50,
    "label": "initializes",
    "to": 53
  }, {
    "from": 53,
    "label": "requires",
    "to": 42
  }, {
    "from": 50,
    "label": "initializes",
    "to": 54
  }, {
    "from": 54,
    "label": "requires",
    "to": 2
  }, {
    "from": 1,
    "label": "provides",
    "to": 55
  }, {
    "from": 41,
    "label": "represents",
    "to": 56
  }, {
    "from": 55,
    "label": "provides",
    "to": 56
  }, {
    "from": 57,
    "label": "requires",
    "to": 1
  }, {
    "from": 58,
    "label": "requires",
    "to": 1
  }, {
    "from": 59,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "findfile",
    "type": "module"
  }, {
    "id": 2,
    "text": "module",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function load(findfile_t)\r\n\r\n  local function clone(t) local o = {} for k,v in pairs(t) do o[k] = v end return o end\r\n\r\n  local function findfile_ssf(str_file, str_params, func_callback, tbl_option)\r\n    tbl_option = tbl_option and clone(tbl_option) or {}\r\n    tbl_option.file = assert(str_file)\r\n    tbl_option.param = assert(str_params)\r\n    tbl_option.callback = assert(func_callback)\r\n    return findfile_t(tbl_option)\r\n  end\r\n\r\n  local function findfile_ss(str_file, str_params, tbl_option)\r\n    tbl_option = tbl_option and clone(tbl_option) or {}\r\n    tbl_option.file = assert(str_file)\r\n    tbl_option.param = assert(str_params)\r\n    return findfile_t(tbl_option)\r\n  end\r\n\r\n  local function findfile_sf(str_file, func_callback, tbl_option)\r\n    tbl_option = tbl_option and clone(tbl_option) or {}\r\n    tbl_option.file = assert(str_file)\r\n    tbl_option.callback = assert(func_callback)\r\n    return findfile_t(tbl_option)\r\n  end\r\n\r\n  local function findfile_s(str_file, tbl_option)\r\n    tbl_option = tbl_option and clone(tbl_option) or {}\r\n    tbl_option.file = assert(str_file)\r\n    return findfile_t(tbl_option)\r\n  end\r\n\r\n  local function findfile_f(func_callback, tbl_option)\r\n    tbl_option = clone(assert(tbl_option)) -- need file\r\n    tbl_option.callback = assert(func_callback)\r\n    return findfile_t(tbl_option)\r\n  end\r\n\r\n  local function findfile(p1,p2,p3,p4)\r\n    if type(p1) == 'string' then \r\n      if type(p2) == 'string' then\r\n        if type(p3) == 'function' then\r\n          return findfile_ssf(p1,p2,p3,p4)\r\n        end\r\n        return findfile_ss(p1,p2,p3)\r\n      end\r\n      if type(p2) == 'function' then\r\n        return findfile_sf(p1,p2,p3)\r\n      end\r\n      return findfile_s(p1,p2)\r\n    end\r\n    if type(p1) == 'function' then\r\n      return findfile_f(p1,p2)\r\n    end\r\n    return findfile_t(p1)\r\n  end\r\n\r\n  return findfile\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local function clone(t) local o = {} for k,v in pairs(t) do o[k] = v end return o end",
    "type": "statement:localfunction"
  }, {
    "id": 5,
    "text": "local o = {}",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "for k,v in pairs(t) do o[k] = v end",
    "type": "statement:genericfor"
  }, {
    "id": 7,
    "text": "o[k] = v",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 9,
    "text": "local function findfile_ssf(str_file, str_params, func_callback, tbl_option)\r\n    tbl_option = tbl_option and clone(tbl_option) or {}\r\n    tbl_option.file = assert(str_file)\r\n    tbl_option.param = assert(str_params)\r\n    tbl_option.callback = assert(func_callback)\r\n    return findfile_t(tbl_option)\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 10,
    "text": "tbl_option = tbl_option and clone(tbl_option) or {}",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "tbl_option.file = assert(str_file)",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "tbl_option.param = assert(str_params)",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "tbl_option.callback = assert(func_callback)",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "local function findfile_ss(str_file, str_params, tbl_option)\r\n    tbl_option = tbl_option and clone(tbl_option) or {}\r\n    tbl_option.file = assert(str_file)\r\n    tbl_option.param = assert(str_params)\r\n    return findfile_t(tbl_option)\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 15,
    "text": "local function findfile_sf(str_file, func_callback, tbl_option)\r\n    tbl_option = tbl_option and clone(tbl_option) or {}\r\n    tbl_option.file = assert(str_file)\r\n    tbl_option.callback = assert(func_callback)\r\n    return findfile_t(tbl_option)\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 16,
    "text": "local function findfile_s(str_file, tbl_option)\r\n    tbl_option = tbl_option and clone(tbl_option) or {}\r\n    tbl_option.file = assert(str_file)\r\n    return findfile_t(tbl_option)\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 17,
    "text": "local function findfile_f(func_callback, tbl_option)\r\n    tbl_option = clone(assert(tbl_option)) -- need file\r\n    tbl_option.callback = assert(func_callback)\r\n    return findfile_t(tbl_option)\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 18,
    "text": "tbl_option = clone(assert(tbl_option))",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "local function findfile(p1,p2,p3,p4)\r\n    if type(p1) == 'string' then \r\n      if type(p2) == 'string' then\r\n        if type(p3) == 'function' then\r\n          return findfile_ssf(p1,p2,p3,p4)\r\n        end\r\n        return findfile_ss(p1,p2,p3)\r\n      end\r\n      if type(p2) == 'function' then\r\n        return findfile_sf(p1,p2,p3)\r\n      end\r\n      return findfile_s(p1,p2)\r\n    end\r\n    if type(p1) == 'function' then\r\n      return findfile_f(p1,p2)\r\n    end\r\n    return findfile_t(p1)\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 20,
    "text": "if type(p1) == 'string' then \r\n      if type(p2) == 'string' then\r\n        if type(p3) == 'function' then\r\n          return findfile_ssf(p1,p2,p3,p4)\r\n        end\r\n        return findfile_ss(p1,p2,p3)\r\n      end\r\n      if type(p2) == 'function' then\r\n        return findfile_sf(p1,p2,p3)\r\n      end\r\n      return findfile_s(p1,p2)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "if type(p2) == 'string' then\r\n        if type(p3) == 'function' then\r\n          return findfile_ssf(p1,p2,p3,p4)\r\n        end\r\n        return findfile_ss(p1,p2,p3)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "if type(p3) == 'function' then\r\n          return findfile_ssf(p1,p2,p3,p4)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "if type(p2) == 'function' then\r\n        return findfile_sf(p1,p2,p3)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "if type(p1) == 'function' then\r\n      return findfile_f(p1,p2)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "local function clone(t) local o = {} for k,v in pairs(t) do o[k] = v end return o end",
    "type": "function"
  }, {
    "id": 27,
    "text": "local function findfile_ssf(str_file, str_params, func_callback, tbl_option)\r\n    tbl_option = tbl_option and clone(tbl_option) or {}\r\n    tbl_option.file = assert(str_file)\r\n    tbl_option.param = assert(str_params)\r\n    tbl_option.callback = assert(func_callback)\r\n    return findfile_t(tbl_option)\r\n  end",
    "type": "function"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "local function findfile_ss(str_file, str_params, tbl_option)\r\n    tbl_option = tbl_option and clone(tbl_option) or {}\r\n    tbl_option.file = assert(str_file)\r\n    tbl_option.param = assert(str_params)\r\n    return findfile_t(tbl_option)\r\n  end",
    "type": "function"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "local function findfile_sf(str_file, func_callback, tbl_option)\r\n    tbl_option = tbl_option and clone(tbl_option) or {}\r\n    tbl_option.file = assert(str_file)\r\n    tbl_option.callback = assert(func_callback)\r\n    return findfile_t(tbl_option)\r\n  end",
    "type": "function"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "local function findfile_s(str_file, tbl_option)\r\n    tbl_option = tbl_option and clone(tbl_option) or {}\r\n    tbl_option.file = assert(str_file)\r\n    return findfile_t(tbl_option)\r\n  end",
    "type": "function"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "local function findfile_f(func_callback, tbl_option)\r\n    tbl_option = clone(assert(tbl_option)) -- need file\r\n    tbl_option.callback = assert(func_callback)\r\n    return findfile_t(tbl_option)\r\n  end",
    "type": "function"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "local function findfile(p1,p2,p3,p4)\r\n    if type(p1) == 'string' then \r\n      if type(p2) == 'string' then\r\n        if type(p3) == 'function' then\r\n          return findfile_ssf(p1,p2,p3,p4)\r\n        end\r\n        return findfile_ss(p1,p2,p3)\r\n      end\r\n      if type(p2) == 'function' then\r\n        return findfile_sf(p1,p2,p3)\r\n      end\r\n      return findfile_s(p1,p2)\r\n    end\r\n    if type(p1) == 'function' then\r\n      return findfile_f(p1,p2)\r\n    end\r\n    return findfile_t(p1)\r\n  end",
    "type": "function"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "",
    "type": "function container"
  }, {
    "id": 40,
    "text": "string",
    "type": "module"
  }, {
    "id": 41,
    "text": "load",
    "type": "global function"
  }, {
    "id": 42,
    "text": "coroutine",
    "type": "module"
  }, {
    "id": 43,
    "text": "table",
    "type": "module"
  }, {
    "id": 44,
    "text": "type",
    "type": "global function"
  }, {
    "id": 45,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 46,
    "text": "findfile_t",
    "type": "global function"
  }, {
    "id": 47,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 48,
    "text": "require",
    "type": "global function"
  }, {
    "id": 49,
    "text": "",
    "type": "variable container"
  }, {
    "id": 50,
    "text": "",
    "type": "require container"
  }, {
    "id": 51,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 52,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 53,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 54,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 55,
    "text": "",
    "type": "interface container"
  }, {
    "id": 56,
    "text": "",
    "type": "interface"
  }, {
    "id": 57,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 58,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 59,
    "text": "",
    "type": "require local variable"
  } ]
}