{
  "_filename": "utils.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-path/test/utils.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 19,
    "label": "calls",
    "to": 33
  }, {
    "from": 19,
    "label": "calls",
    "to": 33
  }, {
    "from": 19,
    "label": "calls",
    "to": 10
  }, {
    "from": 19,
    "label": "calls",
    "to": 36
  }, {
    "from": 19,
    "label": "calls",
    "to": 36
  }, {
    "from": 19,
    "label": "calls",
    "to": 32
  }, {
    "from": 19,
    "label": "calls",
    "to": 6
  }, {
    "from": 19,
    "label": "calls",
    "to": 37
  }, {
    "from": 19,
    "label": "calls",
    "to": 37
  }, {
    "from": 1,
    "label": "contains",
    "to": 19
  }, {
    "from": 19,
    "label": "declares",
    "to": 2
  }, {
    "from": 19,
    "label": "declares",
    "to": 3
  }, {
    "from": 19,
    "label": "declares",
    "to": 4
  }, {
    "from": 19,
    "label": "declares",
    "to": 5
  }, {
    "from": 19,
    "label": "declares",
    "to": 6
  }, {
    "from": 19,
    "label": "declares",
    "to": 7
  }, {
    "from": 19,
    "label": "declares",
    "to": 8
  }, {
    "from": 19,
    "label": "declares",
    "to": 9
  }, {
    "from": 19,
    "label": "declares",
    "to": 10
  }, {
    "from": 19,
    "label": "declares",
    "to": 11
  }, {
    "from": 19,
    "label": "declares",
    "to": 12
  }, {
    "from": 19,
    "label": "declares",
    "to": 13
  }, {
    "from": 19,
    "label": "declares",
    "to": 14
  }, {
    "from": 19,
    "label": "declares",
    "to": 15
  }, {
    "from": 19,
    "label": "declares",
    "to": 16
  }, {
    "from": 19,
    "label": "declares",
    "to": 17
  }, {
    "from": 19,
    "label": "declares",
    "to": 18
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 23,
    "label": "has",
    "to": 21
  }, {
    "from": 23,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "calls",
    "to": 31
  }, {
    "from": 19,
    "label": "calls",
    "to": 34
  }, {
    "from": 19,
    "label": "calls",
    "to": 37
  }, {
    "from": 19,
    "label": "calls",
    "to": 35
  }, {
    "from": 19,
    "label": "calls",
    "to": 30
  }, {
    "from": 19,
    "label": "declares",
    "to": 20
  }, {
    "from": 19,
    "label": "declares",
    "to": 23
  }, {
    "from": 19,
    "label": "declares",
    "to": 28
  }, {
    "from": 38,
    "label": "requires",
    "to": 1
  }, {
    "from": 39,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 40
  }, {
    "from": 1,
    "label": "contains",
    "to": 41
  }, {
    "from": 40,
    "label": "initializes",
    "to": 42
  }, {
    "from": 40,
    "label": "initializes",
    "to": 43
  }, {
    "from": 40,
    "label": "initializes",
    "to": 44
  }, {
    "from": 40,
    "label": "initializes",
    "to": 45
  }, {
    "from": 40,
    "label": "initializes",
    "to": 46
  }, {
    "from": 41,
    "label": "initializes",
    "to": 47
  }, {
    "from": 41,
    "label": "initializes",
    "to": 48
  }, {
    "from": 1,
    "label": "provides",
    "to": 49
  }, {
    "from": 49,
    "label": "provides",
    "to": 50
  }, {
    "from": 1,
    "label": "contains",
    "to": 52
  }, {
    "from": 1,
    "label": "contains",
    "to": 53
  }, {
    "from": 52,
    "label": "initializes",
    "to": 54
  }, {
    "from": 54,
    "label": "assigns",
    "to": 55
  }, {
    "from": 52,
    "label": "initializes",
    "to": 56
  }, {
    "from": 56,
    "label": "assigns",
    "to": 57
  }, {
    "from": 52,
    "label": "initializes",
    "to": 58
  }, {
    "from": 58,
    "label": "assigns",
    "to": 59
  }, {
    "from": 53,
    "label": "initializes",
    "to": 60
  }, {
    "from": 60,
    "label": "requires",
    "to": 29
  }, {
    "from": 1,
    "label": "provides",
    "to": 61
  }, {
    "from": 51,
    "label": "represents",
    "to": 62
  }, {
    "from": 61,
    "label": "provides",
    "to": 62
  }, {
    "from": 54,
    "label": "represents",
    "to": 63
  }, {
    "from": 61,
    "label": "provides",
    "to": 63
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "utils",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function define_struct(opt, t)\r\n  if not t then t, opt = opt, nil end\r\n  assert(type(t) == \"table\")\r\n  assert(not opt or type(opt) == \"table\")\r\n\r\n  local s_align = opt and opt.align or 1\r\n  local off = 0\r\n  local names, offsets, types,fields = {}, {}, {}, {}\r\n  local fmt = \"\"\r\n\r\n  for i, field in ipairs(t) do\r\n    local ftype, fname\r\n    local align = s_align\r\n    if type(field) == \"string\" then\r\n      ftype, fname = field, i\r\n    elseif getmetatable(field) == STRUCT then\r\n      ftype, fname = field, i\r\n    else\r\n      ftype, fname = field[1], field[2] or i\r\n      align = field.align or align\r\n    end\r\n    off = math.ceil(off / align) * align\r\n    table.insert(names, fname)\r\n    offsets[fname] = off\r\n    types[fname]   = ftype\r\n    if type(ftype) == \"string\" then\r\n      off = off + alien.size(ftype)\r\n    else\r\n      off = off + ftype.size_\r\n    end\r\n  end\r\n\r\n  return setmetatable({\r\n    names_   = names,\r\n    offsets_ = offsets,\r\n    types_   = types,\r\n    size_    = off,\r\n    fmt_     = fmt,\r\n  }, STRUCT)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function STRUCT:new(t, ptr)\r\n  local buffer_ = alien.buffer(ptr or self.size_)\r\n\r\n  local function get(_,key)\r\n    local off = self.offsets_[key]\r\n    if not off then error(\"field \" .. key .. \" does not exist\") end\r\n    local ftype = assert(self.types_[key])\r\n\r\n    if type(ftype) ~= \"string\" then\r\n      local ptr = buffer_:topointer(off + 1)\r\n      return ftype:new(nil, ptr)\r\n    end\r\n\r\n    local size  = alien.size(ftype)\r\n    local str   = buffer_:tostring(size, off + 1)\r\n    return alien.unpack(ftype, str)\r\n  end\r\n\r\n  local function set(_,key, val)\r\n    local off = self.offsets_[key]\r\n    if not off then error(\"field \" .. key .. \" does not exist\") end\r\n    local ftype = assert(self.types_[key])\r\n    local ptr   = buffer_:topointer(off + 1)\r\n    local size  = alien.size(ftype)\r\n    local val   = alien.pack(ftype, val)\r\n    alien.memmove( ptr, val, #val )\r\n  end\r\n\r\n  local o = setmetatable({}, {\r\n    __index = get; __newindex = set;\r\n    __call = function () return buffer_ end\r\n  })\r\n\r\n  if t then for k, v in pairs(t) do\r\n    o[k] = v\r\n  end end\r\n\r\n  return o\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local function get(_,key)\r\n    local off = self.offsets_[key]\r\n    if not off then error(\"field \" .. key .. \" does not exist\") end\r\n    local ftype = assert(self.types_[key])\r\n\r\n    if type(ftype) ~= \"string\" then\r\n      local ptr = buffer_:topointer(off + 1)\r\n      return ftype:new(nil, ptr)\r\n    end\r\n\r\n    local size  = alien.size(ftype)\r\n    local str   = buffer_:tostring(size, off + 1)\r\n    return alien.unpack(ftype, str)\r\n  end",
    "type": "function"
  }, {
    "id": 5,
    "text": "local function set(_,key, val)\r\n    local off = self.offsets_[key]\r\n    if not off then error(\"field \" .. key .. \" does not exist\") end\r\n    local ftype = assert(self.types_[key])\r\n    local ptr   = buffer_:topointer(off + 1)\r\n    local size  = alien.size(ftype)\r\n    local val   = alien.pack(ftype, val)\r\n    alien.memmove( ptr, val, #val )\r\n  end",
    "type": "function"
  }, {
    "id": 6,
    "text": "local function self_struct_test()\r\n\r\n  local S1 = define_struct{\r\n    {\"I4\", \"s1v1\"};\r\n    {\"I4\", \"s1v2\"};\r\n  }\r\n\r\n  local S2 = define_struct{\r\n    {\"I4\", \"s2v1\"};\r\n    {\"I4\", \"s2v2\"};\r\n  }\r\n\r\n  local SS = define_struct{\r\n    {S1, \"s1\"};\r\n    {S2, \"s2\"};\r\n  }\r\n\r\n  local s = SS:new()\r\n  alien.memset(s(),0, SS.size_)\r\n  assert(s.s1.s1v1 == 0)\r\n  assert(s.s1.s1v2 == 0)\r\n  assert(s.s2.s2v1 == 0)\r\n  assert(s.s2.s2v2 == 0)\r\n  assert(not pcall(function() return s.s1.s2v1 end))\r\n  assert(not pcall(function() return s.s1.s1v3 end))\r\n  assert(not pcall(function() return s.s3.s3v1 end))\r\n  s.s1.s1v1 = 123\r\n  s.s2.s2v1 = 456\r\n  assert(s.s1.s1v1 == 123)\r\n  assert(s.s1.s1v2 == 0)\r\n  assert(s.s2.s2v1 == 456)\r\n  assert(s.s2.s2v2 == 0)\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "local function cast(v,t)\r\n  local tmp = alien.buffer(alien.sizeof(t))\r\n  tmp:set(1, v, t)\r\n  return tmp:get(1,t)\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function(v, fn)\r\n    return setmetatable({\r\n      value = v;\r\n    }, { __gc = function() fn(v) end})\r\n  end",
    "type": "function"
  }, {
    "id": 9,
    "text": "function(h)\r\n    setmetatable(h, nil)\r\n    return h.value\r\n  end",
    "type": "function"
  }, {
    "id": 10,
    "text": "local function gc(fn)\r\n    local p = assert(newproxy())\r\n    assert(debug.setmetatable(p, { __gc = fn }))\r\n    return p\r\n  end",
    "type": "function"
  }, {
    "id": 11,
    "text": "function(v, fn)\r\n    return {\r\n      value = v;\r\n      _ = gc(function() fn(v) end);\r\n    }\r\n  end",
    "type": "function"
  }, {
    "id": 12,
    "text": "function(h)\r\n    debug.setmetatable(h._, nil)\r\n    return h.value\r\n  end",
    "type": "function"
  }, {
    "id": 13,
    "text": "function () return buffer_ end",
    "type": "function"
  }, {
    "id": 14,
    "text": "function() return s.s1.s2v1 end",
    "type": "function"
  }, {
    "id": 15,
    "text": "function() return s.s1.s1v3 end",
    "type": "function"
  }, {
    "id": 16,
    "text": "function() return s.s3.s3v1 end",
    "type": "function"
  }, {
    "id": 17,
    "text": "function() fn(v) end",
    "type": "function"
  }, {
    "id": 18,
    "text": "function() fn(v) end",
    "type": "function"
  }, {
    "id": 19,
    "text": "",
    "type": "function container"
  }, {
    "id": 20,
    "text": "function (msg) return function() lunit.fail(\"#SKIP: \" .. msg) end end",
    "type": "function"
  }, {
    "id": 21,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 22,
    "text": "lunit.fail(\"#SKIP: \" .. msg)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "function (name)\r\n  if not IS_LUA52 then\r\n    module(name, package.seeall, lunit.testcase)\r\n    setfenv(2, _M)\r\n  else\r\n    return lunit.module(name, 'seeall')\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "if not IS_LUA52 then\r\n    module(name, package.seeall, lunit.testcase)\r\n    setfenv(2, _M)\r\n  else\r\n    return lunit.module(name, 'seeall')\r\n  end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "module(name, package.seeall, lunit.testcase)",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "setfenv(2, _M)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function() lunit.fail(\"#SKIP: \" .. msg) end",
    "type": "function"
  }, {
    "id": 29,
    "text": "lunit",
    "type": "module"
  }, {
    "id": 30,
    "text": "module",
    "type": "global function"
  }, {
    "id": 31,
    "text": "fail",
    "type": "global function"
  }, {
    "id": 32,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 33,
    "text": "fn",
    "type": "global function"
  }, {
    "id": 34,
    "text": "module",
    "type": "global function"
  }, {
    "id": 35,
    "text": "setfenv",
    "type": "global function"
  }, {
    "id": 36,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 37,
    "text": "require",
    "type": "global function"
  }, {
    "id": 38,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 39,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 40,
    "text": "",
    "type": "variable container"
  }, {
    "id": 41,
    "text": "",
    "type": "require container"
  }, {
    "id": 42,
    "text": "",
    "type": "local variable"
  }, {
    "id": 43,
    "text": "",
    "type": "local variable"
  }, {
    "id": 44,
    "text": "",
    "type": "local variable"
  }, {
    "id": 45,
    "text": "",
    "type": "local variable"
  }, {
    "id": 46,
    "text": "",
    "type": "global variable"
  }, {
    "id": 47,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 48,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 49,
    "text": "",
    "type": "interface container"
  }, {
    "id": 50,
    "text": "",
    "type": "interface"
  }, {
    "id": 51,
    "text": "",
    "type": "local variable"
  }, {
    "id": 52,
    "text": "",
    "type": "variable container"
  }, {
    "id": 53,
    "text": "",
    "type": "require container"
  }, {
    "id": 54,
    "text": "",
    "type": "local variable"
  }, {
    "id": 55,
    "text": "",
    "type": "n/a"
  }, {
    "id": 56,
    "text": "",
    "type": "local variable"
  }, {
    "id": 57,
    "text": "",
    "type": "n/a"
  }, {
    "id": 58,
    "text": "",
    "type": "local variable"
  }, {
    "id": 59,
    "text": "",
    "type": "n/a"
  }, {
    "id": 60,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 61,
    "text": "",
    "type": "interface container"
  }, {
    "id": 62,
    "text": "",
    "type": "interface"
  }, {
    "id": 63,
    "text": "",
    "type": "interface"
  } ]
}