{
  "_filename": "wcs.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-path/lua/path/win32/wcs.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 8,
    "label": "calls",
    "to": 46
  }, {
    "from": 8,
    "label": "calls",
    "to": 36
  }, {
    "from": 8,
    "label": "calls",
    "to": 43
  }, {
    "from": 8,
    "label": "calls",
    "to": 43
  }, {
    "from": 8,
    "label": "calls",
    "to": 43
  }, {
    "from": 8,
    "label": "calls",
    "to": 43
  }, {
    "from": 1,
    "label": "contains",
    "to": 8
  }, {
    "from": 8,
    "label": "declares",
    "to": 2
  }, {
    "from": 8,
    "label": "declares",
    "to": 3
  }, {
    "from": 8,
    "label": "declares",
    "to": 4
  }, {
    "from": 8,
    "label": "declares",
    "to": 5
  }, {
    "from": 8,
    "label": "declares",
    "to": 6
  }, {
    "from": 8,
    "label": "declares",
    "to": 7
  }, {
    "from": 8,
    "label": "calls",
    "to": 38
  }, {
    "from": 8,
    "label": "calls",
    "to": 38
  }, {
    "from": 8,
    "label": "calls",
    "to": 38
  }, {
    "from": 8,
    "label": "calls",
    "to": 38
  }, {
    "from": 8,
    "label": "calls",
    "to": 38
  }, {
    "from": 8,
    "label": "calls",
    "to": 35
  }, {
    "from": 8,
    "label": "calls",
    "to": 46
  }, {
    "from": 8,
    "label": "declares",
    "to": 9
  }, {
    "from": 8,
    "label": "declares",
    "to": 10
  }, {
    "from": 8,
    "label": "declares",
    "to": 11
  }, {
    "from": 8,
    "label": "declares",
    "to": 12
  }, {
    "from": 8,
    "label": "declares",
    "to": 13
  }, {
    "from": 8,
    "label": "declares",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 25
  }, {
    "from": 15,
    "label": "has",
    "to": 26
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 17
  }, {
    "from": 29,
    "label": "has",
    "to": 17
  }, {
    "from": 30,
    "label": "has",
    "to": 17
  }, {
    "from": 31,
    "label": "has",
    "to": 17
  }, {
    "from": 32,
    "label": "has",
    "to": 17
  }, {
    "from": 33,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "calls",
    "to": 37
  }, {
    "from": 15,
    "label": "calls",
    "to": 37
  }, {
    "from": 15,
    "label": "calls",
    "to": 37
  }, {
    "from": 15,
    "label": "calls",
    "to": 34
  }, {
    "from": 15,
    "label": "calls",
    "to": 34
  }, {
    "from": 15,
    "label": "calls",
    "to": 34
  }, {
    "from": 15,
    "label": "calls",
    "to": 46
  }, {
    "from": 8,
    "label": "declares",
    "to": 15
  }, {
    "from": 8,
    "label": "declares",
    "to": 28
  }, {
    "from": 8,
    "label": "declares",
    "to": 29
  }, {
    "from": 8,
    "label": "declares",
    "to": 30
  }, {
    "from": 8,
    "label": "declares",
    "to": 31
  }, {
    "from": 8,
    "label": "declares",
    "to": 32
  }, {
    "from": 8,
    "label": "declares",
    "to": 33
  }, {
    "from": 1,
    "label": "declares",
    "to": 39
  }, {
    "from": 1,
    "label": "declares",
    "to": 40
  }, {
    "from": 1,
    "label": "declares",
    "to": 41
  }, {
    "from": 1,
    "label": "declares",
    "to": 42
  }, {
    "from": 1,
    "label": "declares",
    "to": 44
  }, {
    "from": 1,
    "label": "declares",
    "to": 45
  }, {
    "from": 1,
    "label": "contains",
    "to": 47
  }, {
    "from": 1,
    "label": "contains",
    "to": 48
  }, {
    "from": 47,
    "label": "initializes",
    "to": 49
  }, {
    "from": 47,
    "label": "initializes",
    "to": 50
  }, {
    "from": 47,
    "label": "initializes",
    "to": 51
  }, {
    "from": 47,
    "label": "initializes",
    "to": 52
  }, {
    "from": 47,
    "label": "initializes",
    "to": 53
  }, {
    "from": 47,
    "label": "initializes",
    "to": 54
  }, {
    "from": 47,
    "label": "initializes",
    "to": 55
  }, {
    "from": 48,
    "label": "initializes",
    "to": 56
  }, {
    "from": 1,
    "label": "provides",
    "to": 57
  }, {
    "from": 57,
    "label": "provides",
    "to": 58
  }, {
    "from": 1,
    "label": "contains",
    "to": 59
  }, {
    "from": 1,
    "label": "contains",
    "to": 60
  }, {
    "from": 59,
    "label": "initializes",
    "to": 61
  }, {
    "from": 59,
    "label": "initializes",
    "to": 62
  }, {
    "from": 59,
    "label": "initializes",
    "to": 63
  }, {
    "from": 59,
    "label": "initializes",
    "to": 64
  }, {
    "from": 59,
    "label": "initializes",
    "to": 65
  }, {
    "from": 59,
    "label": "initializes",
    "to": 66
  }, {
    "from": 59,
    "label": "initializes",
    "to": 67
  }, {
    "from": 59,
    "label": "initializes",
    "to": 68
  }, {
    "from": 60,
    "label": "initializes",
    "to": 69
  }, {
    "from": 1,
    "label": "provides",
    "to": 70
  }, {
    "from": 70,
    "label": "provides",
    "to": 71
  }, {
    "from": 1,
    "label": "contains",
    "to": 72
  }, {
    "from": 1,
    "label": "contains",
    "to": 73
  }, {
    "from": 72,
    "label": "initializes",
    "to": 74
  }, {
    "from": 74,
    "label": "assigns",
    "to": 75
  }, {
    "from": 72,
    "label": "initializes",
    "to": 76
  }, {
    "from": 76,
    "label": "assigns",
    "to": 77
  }, {
    "from": 72,
    "label": "initializes",
    "to": 78
  }, {
    "from": 78,
    "label": "assigns",
    "to": 79
  }, {
    "from": 72,
    "label": "initializes",
    "to": 80
  }, {
    "from": 80,
    "label": "assigns",
    "to": 81
  }, {
    "from": 72,
    "label": "initializes",
    "to": 82
  }, {
    "from": 82,
    "label": "assigns",
    "to": 83
  }, {
    "from": 72,
    "label": "initializes",
    "to": 84
  }, {
    "from": 84,
    "label": "assigns",
    "to": 85
  }, {
    "from": 72,
    "label": "initializes",
    "to": 86
  }, {
    "from": 86,
    "label": "assigns",
    "to": 87
  }, {
    "from": 72,
    "label": "initializes",
    "to": 88
  }, {
    "from": 88,
    "label": "assigns",
    "to": 89
  }, {
    "from": 73,
    "label": "initializes",
    "to": 90
  }, {
    "from": 90,
    "label": "requires",
    "to": 91
  }, {
    "from": 1,
    "label": "provides",
    "to": 92
  }, {
    "from": 36,
    "label": "represents",
    "to": 93
  }, {
    "from": 92,
    "label": "provides",
    "to": 93
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "wcs",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function strnlen(data, n)\r\n  if type(data) == 'string' then\r\n    return #data\r\n  end\r\n  n = n or #data\r\n  for i = 1, n do\r\n    if data[i] == 0 then\r\n      return i\r\n    end\r\n  end\r\n  return n\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local function wcsnlen(data, n)\r\n  if type(data) == 'string' then\r\n    return  math.ceil(#data/2)\r\n  end\r\n  n = n or #data\r\n  for i = 1, (2 * n), 2 do\r\n    if (data[i] == 0) and (data[i+1] == 0) then\r\n      return math.floor( i / 2 )\r\n    end\r\n  end\r\n  return n\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local function MultiByteToWideChar(src, cp)\r\n  local flag   = true\r\n  local buflen = strnlen(src)\r\n  local dst    = alien.buffer( WCHAR_SIZE * (buflen + 1) ) -- eos\r\n  local ret = MultiByteToWideChar_(cp, 0, src, #src, dst, buflen)\r\n  if ret < 0 then return nil, GetLastError() end\r\n  if ret <= buflen then \r\n    dst[ret * WCHAR_SIZE    ] = 0\r\n    dst[ret * WCHAR_SIZE + 1] = 0\r\n    return dst, ret\r\n  end\r\n  dst    = alien.buffer(WCHAR_SIZE * 1)\r\n  dst[0] = 0\r\n  dst[1] = 0\r\n  return dst,0\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "local function WideCharToMultiByte(src, cp)\r\n  local srclen = wcsnlen(src)\r\n  local buflen = (srclen + 1)\r\n  while true do\r\n    local dst = alien.buffer(buflen + 1) -- eof\r\n    local ret = WideCharToMultiByte_(cp, 0, src, srclen, dst, buflen, nil, nil)\r\n    if ret <= 0 then \r\n      local err = GetLastError()\r\n      if err == 122 then -- buffer too small\r\n        buflen = math.ceil(1.5 * buflen)\r\n      else\r\n        return nil, err\r\n      end\r\n    else\r\n      if ret <= buflen then \r\n        return dst, ret\r\n      end\r\n    end\r\n  end\r\n  dst    = alien.buffer(1)\r\n  dst[0] = 0\r\n  return dst,0\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local function LUA_M2W(src, ...)\r\n  if not src or #src == 0 then return src end\r\n  local dst, dstlen = MultiByteToWideChar(src, ...)\r\n  if not dst then return nil, dstlen end\r\n  return dst:tostring(dstlen * WCHAR_SIZE)\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "local function LUA_W2M(src, ...)\r\n  if not src or #src == 0 then return src end\r\n  local dst, dstlen = WideCharToMultiByte(src, ...)\r\n  if not dst then return nil, dstlen end\r\n  return dst:tostring(dstlen)\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "",
    "type": "function container"
  }, {
    "id": 9,
    "text": "local function strnlen(data, n)\r\n  if type(data) == 'string' then\r\n    return #data\r\n  end\r\n  if not n then\r\n    if ffi.istype(pchar_t, data) then\r\n      n = math.huge\r\n    else -- assume char[?] / char&[...]\r\n      n = assert(ffi.sizeof(data))\r\n    end\r\n  end\r\n  for i = 0, n-1 do\r\n    if data[i] == 0 then return i end\r\n  end\r\n\r\n  return n\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "local function wcsnlen(data, n)\r\n  if type(data) == 'string' then\r\n    return  math.ceil(#data/2)\r\n  end\r\n\r\n  if not n then\r\n    if ffi.istype(pchar_t, data) then\r\n      n = math.huge\r\n    else -- assume wchar[?] / wchar&[...]\r\n      n = math.ceil(assert(ffi.sizeof(data))/2)\r\n    end\r\n  end\r\n  for i = 0, n-1 do\r\n    if data[i] == 0 then return i end\r\n  end\r\n\r\n  return n\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "local function MultiByteToWideChar(src, cp)\r\n  if not src or #src == 0 then return src, 0 end\r\n  local flag = true\r\n  local buflen = strnlen(src)\r\n  local dst = ffi.new(awchar_t, buflen + 1) -- eos\r\n  local ret = C.MultiByteToWideChar(cp, 0, src, #src, dst, buflen)\r\n  if ret < 0 then return nil, C.GetLastError() end\r\n  if ret <= buflen then \r\n    dst[ret] = 0\r\n    return dst, ret\r\n  end\r\n  dst    = ffi.new(awchar_t, 1)\r\n  dst[0] = 0\r\n  return dst,0\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "local function WideCharToMultiByte(src, cp)\r\n  local srclen = wcsnlen(src)\r\n  local buflen = srclen + 1\r\n  if type(src) == 'userdata' then src = ffi.cast('const char*', src) end\r\n  while true do\r\n    local dst = ffi.new(\"char[?]\", buflen + 1) -- eof\r\n    local ret = ffi.C.WideCharToMultiByte(cp, 0, src, srclen, dst, buflen, nil, nil)\r\n    if ret <= 0 then \r\n      local err = C.GetLastError()\r\n      if err == ERROR_INSUFFICIENT_BUFFER then\r\n        buflen = math.ceil(1.5 * buflen)\r\n      else\r\n        return nil, err\r\n      end\r\n    else\r\n      if ret <= buflen then \r\n        return dst, ret\r\n      end\r\n    end\r\n  end\r\n  dst    = ffi.new(achar_t, 1)\r\n  dst[0] = 0\r\n  return dst,0\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "local function LUA_W2M(src,...)\r\n  if not src or #src == 0 then return src end\r\n  local dst, dstlen = WideCharToMultiByte(src,...)\r\n  if not dst then return nil, dstlen end\r\n  return ffi.string(dst, dstlen)\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "local function LUA_M2W(src,...)\r\n  if not src or #src == 0 then return src end\r\n  local dst, dstlen = MultiByteToWideChar(src,...)\r\n  if not dst then return nil, dstlen end\r\n  return ffi.string(ffi.cast(const_pchar_t, dst), dstlen*2)\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "local function load(type)\r\n  if LOADED[type] then return LOADED[type] end\r\n  local IMPL = require(\"path.win32.\" .. type ..\".wcs\")\r\n\r\n\r\n  local wcstoutf8 = function (str) return IMPL.wcstombs(str, CP_UTF8) end\r\n  local utf8towcs = function (str) return IMPL.mbstowcs(str, CP_UTF8) end\r\n\r\n  local wcstoansi = function (str) return IMPL.wcstombs(str, CP_ACP)  end\r\n  local ansitowcs = function (str) return IMPL.mbstowcs(str, CP_ACP)  end\r\n\r\n  local wcstooem  = function (str) return IMPL.wcstombs(str, CP_OEM) end\r\n  local oemtowcs  = function (str) return IMPL.mbstowcs(str, CP_OEM) end\r\n\r\n  local _M = {\r\n    MultiByteToWideChar = IMPL.MultiByteToWideChar;\r\n    WideCharToMultiByte = IMPL.WideCharToMultiByte;\r\n    mbstowcs            = IMPL.mbstowcs;\r\n    wcstombs            = IMPL.wcstombs;\r\n    wcstoutf8           = wcstoutf8;\r\n    utf8towcs           = utf8towcs;\r\n    wcstoansi           = wcstoansi;\r\n    ansitowcs           = ansitowcs;\r\n    wcstooem            = wcstooem;\r\n    oemtowcs            = oemtowcs;\r\n    CP = {\r\n      ACP        = CP_ACP;\r\n      OEM        = CP_OEM;\r\n      MAC        = CP_MAC;\r\n      THREAD_ACP = CP_THREAD_ACP;\r\n      SYMBOL     = CP_SYMBOL;\r\n      UTF7       = CP_UTF7;\r\n      UTF8       = CP_UTF8;\r\n    }\r\n  }\r\n\r\n  LOADED[type] = _M\r\n  return _M\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "if LOADED[type] then return LOADED[type] end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 18,
    "text": "local IMPL = require(\"path.win32.\" .. type ..\".wcs\")",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "local wcstoutf8 = function (str) return IMPL.wcstombs(str, CP_UTF8) end",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "local utf8towcs = function (str) return IMPL.mbstowcs(str, CP_UTF8) end",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "local wcstoansi = function (str) return IMPL.wcstombs(str, CP_ACP)  end",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "local ansitowcs = function (str) return IMPL.mbstowcs(str, CP_ACP)  end",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "local wcstooem  = function (str) return IMPL.wcstombs(str, CP_OEM) end",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "local oemtowcs  = function (str) return IMPL.mbstowcs(str, CP_OEM) end",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "local _M = {\r\n    MultiByteToWideChar = IMPL.MultiByteToWideChar;\r\n    WideCharToMultiByte = IMPL.WideCharToMultiByte;\r\n    mbstowcs            = IMPL.mbstowcs;\r\n    wcstombs            = IMPL.wcstombs;\r\n    wcstoutf8           = wcstoutf8;\r\n    utf8towcs           = utf8towcs;\r\n    wcstoansi           = wcstoansi;\r\n    ansitowcs           = ansitowcs;\r\n    wcstooem            = wcstooem;\r\n    oemtowcs            = oemtowcs;\r\n    CP = {\r\n      ACP        = CP_ACP;\r\n      OEM        = CP_OEM;\r\n      MAC        = CP_MAC;\r\n      THREAD_ACP = CP_THREAD_ACP;\r\n      SYMBOL     = CP_SYMBOL;\r\n      UTF7       = CP_UTF7;\r\n      UTF8       = CP_UTF8;\r\n    }\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "LOADED[type] = _M",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function (str) return IMPL.wcstombs(str, CP_UTF8) end",
    "type": "function"
  }, {
    "id": 29,
    "text": "function (str) return IMPL.mbstowcs(str, CP_UTF8) end",
    "type": "function"
  }, {
    "id": 30,
    "text": "function (str) return IMPL.wcstombs(str, CP_ACP)  end",
    "type": "function"
  }, {
    "id": 31,
    "text": "function (str) return IMPL.mbstowcs(str, CP_ACP)  end",
    "type": "function"
  }, {
    "id": 32,
    "text": "function (str) return IMPL.wcstombs(str, CP_OEM) end",
    "type": "function"
  }, {
    "id": 33,
    "text": "function (str) return IMPL.mbstowcs(str, CP_OEM) end",
    "type": "function"
  }, {
    "id": 34,
    "text": "mbstowcs",
    "type": "global function"
  }, {
    "id": 35,
    "text": "cdef",
    "type": "global function"
  }, {
    "id": 36,
    "text": "load",
    "type": "global function"
  }, {
    "id": 37,
    "text": "wcstombs",
    "type": "global function"
  }, {
    "id": 38,
    "text": "typeof",
    "type": "global function"
  }, {
    "id": 39,
    "text": "wcstoutf8",
    "type": "global function"
  }, {
    "id": 40,
    "text": "wcstooem",
    "type": "global function"
  }, {
    "id": 41,
    "text": "oemtowcs",
    "type": "global function"
  }, {
    "id": 42,
    "text": "ansitowcs",
    "type": "global function"
  }, {
    "id": 43,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 44,
    "text": "wcstoansi",
    "type": "global function"
  }, {
    "id": 45,
    "text": "utf8towcs",
    "type": "global function"
  }, {
    "id": 46,
    "text": "require",
    "type": "global function"
  }, {
    "id": 47,
    "text": "",
    "type": "variable container"
  }, {
    "id": 48,
    "text": "",
    "type": "require container"
  }, {
    "id": 49,
    "text": "",
    "type": "local variable"
  }, {
    "id": 50,
    "text": "",
    "type": "local variable"
  }, {
    "id": 51,
    "text": "",
    "type": "local variable"
  }, {
    "id": 52,
    "text": "",
    "type": "local variable"
  }, {
    "id": 53,
    "text": "",
    "type": "local variable"
  }, {
    "id": 54,
    "text": "",
    "type": "local variable"
  }, {
    "id": 55,
    "text": "",
    "type": "local variable"
  }, {
    "id": 56,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 57,
    "text": "",
    "type": "interface container"
  }, {
    "id": 58,
    "text": "",
    "type": "interface"
  }, {
    "id": 59,
    "text": "",
    "type": "variable container"
  }, {
    "id": 60,
    "text": "",
    "type": "require container"
  }, {
    "id": 61,
    "text": "",
    "type": "local variable"
  }, {
    "id": 62,
    "text": "",
    "type": "local variable"
  }, {
    "id": 63,
    "text": "",
    "type": "local variable"
  }, {
    "id": 64,
    "text": "",
    "type": "local variable"
  }, {
    "id": 65,
    "text": "",
    "type": "local variable"
  }, {
    "id": 66,
    "text": "",
    "type": "local variable"
  }, {
    "id": 67,
    "text": "",
    "type": "local variable"
  }, {
    "id": 68,
    "text": "",
    "type": "local variable"
  }, {
    "id": 69,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 70,
    "text": "",
    "type": "interface container"
  }, {
    "id": 71,
    "text": "",
    "type": "interface"
  }, {
    "id": 72,
    "text": "",
    "type": "variable container"
  }, {
    "id": 73,
    "text": "",
    "type": "require container"
  }, {
    "id": 74,
    "text": "",
    "type": "local variable"
  }, {
    "id": 75,
    "text": "",
    "type": "number"
  }, {
    "id": 76,
    "text": "",
    "type": "local variable"
  }, {
    "id": 77,
    "text": "",
    "type": "number"
  }, {
    "id": 78,
    "text": "",
    "type": "local variable"
  }, {
    "id": 79,
    "text": "",
    "type": "number"
  }, {
    "id": 80,
    "text": "",
    "type": "local variable"
  }, {
    "id": 81,
    "text": "",
    "type": "number"
  }, {
    "id": 82,
    "text": "",
    "type": "local variable"
  }, {
    "id": 83,
    "text": "",
    "type": "number"
  }, {
    "id": 84,
    "text": "",
    "type": "local variable"
  }, {
    "id": 85,
    "text": "",
    "type": "number"
  }, {
    "id": 86,
    "text": "",
    "type": "local variable"
  }, {
    "id": 87,
    "text": "",
    "type": "number"
  }, {
    "id": 88,
    "text": "",
    "type": "local variable"
  }, {
    "id": 89,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 90,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 91,
    "text": "wcs)",
    "type": "module"
  }, {
    "id": 92,
    "text": "",
    "type": "interface container"
  }, {
    "id": 93,
    "text": "",
    "type": "interface"
  } ]
}