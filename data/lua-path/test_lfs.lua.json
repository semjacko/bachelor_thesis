{
  "_filename": "test_lfs.lua",
  "_isShebang": true,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-path/test/test_lfs.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 8,
    "label": "has",
    "to": 12
  }, {
    "from": 8,
    "label": "has",
    "to": 13
  }, {
    "from": 8,
    "label": "has",
    "to": 14
  }, {
    "from": 8,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 17,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 8,
    "label": "has",
    "to": 26
  }, {
    "from": 8,
    "label": "has",
    "to": 27
  }, {
    "from": 8,
    "label": "has",
    "to": 28
  }, {
    "from": 8,
    "label": "has",
    "to": 29
  }, {
    "from": 8,
    "label": "has",
    "to": 30
  }, {
    "from": 8,
    "label": "has",
    "to": 31
  }, {
    "from": 8,
    "label": "has",
    "to": 13
  }, {
    "from": 8,
    "label": "has",
    "to": 14
  }, {
    "from": 8,
    "label": "has",
    "to": 32
  }, {
    "from": 8,
    "label": "has",
    "to": 33
  }, {
    "from": 8,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 28
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 8,
    "label": "has",
    "to": 13
  }, {
    "from": 8,
    "label": "has",
    "to": 14
  }, {
    "from": 8,
    "label": "has",
    "to": 37
  }, {
    "from": 8,
    "label": "has",
    "to": 38
  }, {
    "from": 8,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 8,
    "label": "has",
    "to": 41
  }, {
    "from": 8,
    "label": "has",
    "to": 42
  }, {
    "from": 8,
    "label": "has",
    "to": 13
  }, {
    "from": 8,
    "label": "has",
    "to": 14
  }, {
    "from": 8,
    "label": "has",
    "to": 43
  }, {
    "from": 8,
    "label": "has",
    "to": 44
  }, {
    "from": 8,
    "label": "has",
    "to": 45
  }, {
    "from": 8,
    "label": "has",
    "to": 46
  }, {
    "from": 8,
    "label": "has",
    "to": 47
  }, {
    "from": 8,
    "label": "has",
    "to": 13
  }, {
    "from": 8,
    "label": "has",
    "to": 14
  }, {
    "from": 8,
    "label": "has",
    "to": 48
  }, {
    "from": 8,
    "label": "has",
    "to": 49
  }, {
    "from": 8,
    "label": "has",
    "to": 50
  }, {
    "from": 8,
    "label": "has",
    "to": 45
  }, {
    "from": 8,
    "label": "has",
    "to": 51
  }, {
    "from": 8,
    "label": "has",
    "to": 52
  }, {
    "from": 8,
    "label": "has",
    "to": 13
  }, {
    "from": 8,
    "label": "has",
    "to": 14
  }, {
    "from": 8,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 53,
    "label": "has",
    "to": 56
  }, {
    "from": 53,
    "label": "has",
    "to": 57
  }, {
    "from": 53,
    "label": "has",
    "to": 58
  }, {
    "from": 53,
    "label": "has",
    "to": 59
  }, {
    "from": 8,
    "label": "has",
    "to": 13
  }, {
    "from": 8,
    "label": "has",
    "to": 14
  }, {
    "from": 8,
    "label": "has",
    "to": 60
  }, {
    "from": 8,
    "label": "has",
    "to": 61
  }, {
    "from": 8,
    "label": "has",
    "to": 62
  }, {
    "from": 8,
    "label": "has",
    "to": 63
  }, {
    "from": 8,
    "label": "has",
    "to": 13
  }, {
    "from": 8,
    "label": "has",
    "to": 14
  }, {
    "from": 8,
    "label": "has",
    "to": 64
  }, {
    "from": 8,
    "label": "has",
    "to": 65
  }, {
    "from": 8,
    "label": "has",
    "to": 66
  }, {
    "from": 8,
    "label": "has",
    "to": 13
  }, {
    "from": 8,
    "label": "has",
    "to": 14
  }, {
    "from": 8,
    "label": "has",
    "to": 67
  }, {
    "from": 8,
    "label": "has",
    "to": 68
  }, {
    "from": 8,
    "label": "has",
    "to": 13
  }, {
    "from": 8,
    "label": "has",
    "to": 14
  }, {
    "from": 8,
    "label": "has",
    "to": 69
  }, {
    "from": 8,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 8,
    "label": "has",
    "to": 13
  }, {
    "from": 8,
    "label": "has",
    "to": 14
  }, {
    "from": 8,
    "label": "has",
    "to": 69
  }, {
    "from": 8,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 73,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 72
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 73,
    "label": "has",
    "to": 78
  }, {
    "from": 8,
    "label": "has",
    "to": 13
  }, {
    "from": 8,
    "label": "has",
    "to": 14
  }, {
    "from": 8,
    "label": "has",
    "to": 74
  }, {
    "from": 8,
    "label": "has",
    "to": 79
  }, {
    "from": 8,
    "label": "has",
    "to": 78
  }, {
    "from": 8,
    "label": "has",
    "to": 80
  }, {
    "from": 8,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 17,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 84,
    "label": "has",
    "to": 89
  }, {
    "from": 84,
    "label": "has",
    "to": 90
  }, {
    "from": 84,
    "label": "has",
    "to": 91
  }, {
    "from": 8,
    "label": "calls",
    "to": 113
  }, {
    "from": 8,
    "label": "calls",
    "to": 113
  }, {
    "from": 8,
    "label": "calls",
    "to": 113
  }, {
    "from": 8,
    "label": "calls",
    "to": 113
  }, {
    "from": 8,
    "label": "calls",
    "to": 113
  }, {
    "from": 8,
    "label": "calls",
    "to": 113
  }, {
    "from": 8,
    "label": "calls",
    "to": 113
  }, {
    "from": 8,
    "label": "calls",
    "to": 113
  }, {
    "from": 8,
    "label": "calls",
    "to": 113
  }, {
    "from": 8,
    "label": "calls",
    "to": 113
  }, {
    "from": 8,
    "label": "calls",
    "to": 113
  }, {
    "from": 8,
    "label": "calls",
    "to": 113
  }, {
    "from": 8,
    "label": "calls",
    "to": 102
  }, {
    "from": 8,
    "label": "calls",
    "to": 102
  }, {
    "from": 8,
    "label": "calls",
    "to": 102
  }, {
    "from": 8,
    "label": "calls",
    "to": 102
  }, {
    "from": 8,
    "label": "calls",
    "to": 102
  }, {
    "from": 8,
    "label": "calls",
    "to": 102
  }, {
    "from": 8,
    "label": "calls",
    "to": 102
  }, {
    "from": 8,
    "label": "calls",
    "to": 102
  }, {
    "from": 8,
    "label": "calls",
    "to": 102
  }, {
    "from": 8,
    "label": "calls",
    "to": 102
  }, {
    "from": 8,
    "label": "calls",
    "to": 102
  }, {
    "from": 8,
    "label": "calls",
    "to": 102
  }, {
    "from": 8,
    "label": "calls",
    "to": 102
  }, {
    "from": 8,
    "label": "calls",
    "to": 102
  }, {
    "from": 8,
    "label": "calls",
    "to": 102
  }, {
    "from": 8,
    "label": "calls",
    "to": 102
  }, {
    "from": 8,
    "label": "calls",
    "to": 102
  }, {
    "from": 8,
    "label": "calls",
    "to": 102
  }, {
    "from": 8,
    "label": "calls",
    "to": 102
  }, {
    "from": 8,
    "label": "calls",
    "to": 102
  }, {
    "from": 8,
    "label": "calls",
    "to": 102
  }, {
    "from": 8,
    "label": "calls",
    "to": 102
  }, {
    "from": 8,
    "label": "calls",
    "to": 102
  }, {
    "from": 8,
    "label": "calls",
    "to": 102
  }, {
    "from": 8,
    "label": "calls",
    "to": 102
  }, {
    "from": 8,
    "label": "calls",
    "to": 102
  }, {
    "from": 8,
    "label": "calls",
    "to": 102
  }, {
    "from": 8,
    "label": "calls",
    "to": 102
  }, {
    "from": 8,
    "label": "calls",
    "to": 102
  }, {
    "from": 8,
    "label": "calls",
    "to": 102
  }, {
    "from": 8,
    "label": "calls",
    "to": 102
  }, {
    "from": 8,
    "label": "calls",
    "to": 102
  }, {
    "from": 8,
    "label": "calls",
    "to": 102
  }, {
    "from": 8,
    "label": "calls",
    "to": 102
  }, {
    "from": 8,
    "label": "calls",
    "to": 102
  }, {
    "from": 8,
    "label": "calls",
    "to": 111
  }, {
    "from": 8,
    "label": "calls",
    "to": 108
  }, {
    "from": 8,
    "label": "calls",
    "to": 108
  }, {
    "from": 8,
    "label": "calls",
    "to": 112
  }, {
    "from": 8,
    "label": "calls",
    "to": 110
  }, {
    "from": 8,
    "label": "calls",
    "to": 107
  }, {
    "from": 8,
    "label": "calls",
    "to": 107
  }, {
    "from": 8,
    "label": "calls",
    "to": 100
  }, {
    "from": 8,
    "label": "calls",
    "to": 100
  }, {
    "from": 8,
    "label": "calls",
    "to": 100
  }, {
    "from": 8,
    "label": "calls",
    "to": 100
  }, {
    "from": 8,
    "label": "calls",
    "to": 100
  }, {
    "from": 8,
    "label": "calls",
    "to": 93
  }, {
    "from": 8,
    "label": "calls",
    "to": 106
  }, {
    "from": 8,
    "label": "calls",
    "to": 106
  }, {
    "from": 8,
    "label": "calls",
    "to": 98
  }, {
    "from": 8,
    "label": "calls",
    "to": 98
  }, {
    "from": 8,
    "label": "calls",
    "to": 98
  }, {
    "from": 8,
    "label": "calls",
    "to": 98
  }, {
    "from": 8,
    "label": "calls",
    "to": 104
  }, {
    "from": 8,
    "label": "calls",
    "to": 104
  }, {
    "from": 8,
    "label": "calls",
    "to": 104
  }, {
    "from": 8,
    "label": "calls",
    "to": 104
  }, {
    "from": 8,
    "label": "calls",
    "to": 104
  }, {
    "from": 8,
    "label": "calls",
    "to": 104
  }, {
    "from": 8,
    "label": "calls",
    "to": 104
  }, {
    "from": 8,
    "label": "calls",
    "to": 104
  }, {
    "from": 8,
    "label": "calls",
    "to": 104
  }, {
    "from": 8,
    "label": "calls",
    "to": 104
  }, {
    "from": 8,
    "label": "calls",
    "to": 104
  }, {
    "from": 8,
    "label": "calls",
    "to": 104
  }, {
    "from": 8,
    "label": "calls",
    "to": 105
  }, {
    "from": 8,
    "label": "calls",
    "to": 105
  }, {
    "from": 8,
    "label": "calls",
    "to": 105
  }, {
    "from": 8,
    "label": "calls",
    "to": 94
  }, {
    "from": 92,
    "label": "calls",
    "to": 3
  }, {
    "from": 92,
    "label": "calls",
    "to": 3
  }, {
    "from": 92,
    "label": "calls",
    "to": 3
  }, {
    "from": 92,
    "label": "calls",
    "to": 3
  }, {
    "from": 92,
    "label": "calls",
    "to": 3
  }, {
    "from": 92,
    "label": "calls",
    "to": 3
  }, {
    "from": 8,
    "label": "calls",
    "to": 114
  }, {
    "from": 8,
    "label": "calls",
    "to": 114
  }, {
    "from": 8,
    "label": "calls",
    "to": 95
  }, {
    "from": 8,
    "label": "calls",
    "to": 95
  }, {
    "from": 8,
    "label": "calls",
    "to": 95
  }, {
    "from": 8,
    "label": "calls",
    "to": 95
  }, {
    "from": 8,
    "label": "calls",
    "to": 101
  }, {
    "from": 8,
    "label": "calls",
    "to": 101
  }, {
    "from": 8,
    "label": "calls",
    "to": 101
  }, {
    "from": 8,
    "label": "calls",
    "to": 101
  }, {
    "from": 8,
    "label": "calls",
    "to": 101
  }, {
    "from": 8,
    "label": "calls",
    "to": 101
  }, {
    "from": 8,
    "label": "calls",
    "to": 101
  }, {
    "from": 8,
    "label": "calls",
    "to": 101
  }, {
    "from": 8,
    "label": "calls",
    "to": 101
  }, {
    "from": 3,
    "label": "calls",
    "to": 97
  }, {
    "from": 8,
    "label": "calls",
    "to": 97
  }, {
    "from": 8,
    "label": "calls",
    "to": 97
  }, {
    "from": 84,
    "label": "calls",
    "to": 97
  }, {
    "from": 92,
    "label": "calls",
    "to": 84
  }, {
    "from": 92,
    "label": "calls",
    "to": 84
  }, {
    "from": 92,
    "label": "calls",
    "to": 84
  }, {
    "from": 92,
    "label": "calls",
    "to": 84
  }, {
    "from": 8,
    "label": "calls",
    "to": 109
  }, {
    "from": 8,
    "label": "calls",
    "to": 103
  }, {
    "from": 8,
    "label": "calls",
    "to": 103
  }, {
    "from": 8,
    "label": "calls",
    "to": 103
  }, {
    "from": 8,
    "label": "calls",
    "to": 99
  }, {
    "from": 8,
    "label": "calls",
    "to": 99
  }, {
    "from": 92,
    "label": "calls",
    "to": 115
  }, {
    "from": 92,
    "label": "calls",
    "to": 115
  }, {
    "from": 8,
    "label": "calls",
    "to": 96
  }, {
    "from": 8,
    "label": "calls",
    "to": 96
  }, {
    "from": 8,
    "label": "calls",
    "to": 96
  }, {
    "from": 8,
    "label": "calls",
    "to": 96
  }, {
    "from": 84,
    "label": "calls",
    "to": 96
  }, {
    "from": 84,
    "label": "calls",
    "to": 96
  }, {
    "from": 84,
    "label": "calls",
    "to": 96
  }, {
    "from": 8,
    "label": "calls",
    "to": 82
  }, {
    "from": 2,
    "label": "contains",
    "to": 92
  }, {
    "from": 92,
    "label": "declares",
    "to": 3
  }, {
    "from": 92,
    "label": "declares",
    "to": 8
  }, {
    "from": 92,
    "label": "declares",
    "to": 82
  }, {
    "from": 92,
    "label": "declares",
    "to": 84
  }, {
    "from": 2,
    "label": "contains",
    "to": 116
  }, {
    "from": 2,
    "label": "contains",
    "to": 117
  }, {
    "from": 117,
    "label": "initializes",
    "to": 118
  }, {
    "from": 118,
    "label": "requires",
    "to": 1
  }, {
    "from": 117,
    "label": "initializes",
    "to": 119
  }, {
    "from": 119,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "fs",
    "type": "module"
  }, {
    "id": 2,
    "text": "test_lfs",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function prequire(...)\r\n  local ok, mod = pcall(require, ...)\r\n  if not ok then return nil, mod end\r\n  return mod\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local ok, mod = pcall(require, ...)",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "if not ok then return nil, mod end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "local function test(name, lfs)\r\n\r\nlocal tmp = \"/tmp\"\r\nlocal sep = string.match (package.config, \"[^\\n]+\")\r\nlocal upper = \"..\"\r\n\r\nprint (name)\r\n\r\nio.write(\".\")\r\nio.flush()\r\n\r\nfunction attrdir (path)\r\n        for file in lfs.dir(path) do\r\n                if file ~= \".\" and file ~= \"..\" then\r\n                        local f = path..sep..file\r\n                        print (\"\\t=> \"..f..\" <=\")\r\n                        local attr = lfs.attributes (f)\r\n                        assert (type(attr) == \"table\")\r\n                        if attr.mode == \"directory\" then\r\n                                attrdir (f)\r\n                        else\r\n                                for name, value in pairs(attr) do\r\n                                        print (name, value)\r\n                                end\r\n                        end\r\n                end\r\n        end\r\nend\r\n\r\n-- Checking changing directories\r\nlocal current = assert (lfs.currentdir())\r\nlocal reldir = string.gsub (current, \"^.*%\"..sep..\"([^\"..sep..\"])$\", \"%1\")\r\nassert (lfs.chdir (upper), \"could not change to upper directory\")\r\nassert (lfs.chdir (reldir), \"could not change back to current directory\")\r\nassert (lfs.currentdir() == current, \"error trying to change directories\")\r\nassert (lfs.chdir (\"this couldn't be an actual directory\") == nil, \"could change to a non-existent directory\")\r\n\r\nio.write(\".\")\r\nio.flush()\r\n\r\n-- Changing creating and removing directories\r\nlocal tmpdir = current..sep..\"lfs_tmp_dir\"\r\nlocal tmpfile = tmpdir..sep..\"tmp_file\"\r\n-- Test for existence of a previous lfs_tmp_dir\r\n-- that may have resulted from an interrupted test execution and remove it\r\nif lfs.chdir (tmpdir) then\r\n    assert (lfs.chdir (upper), \"could not change to upper directory\")\r\n    assert (os.remove (tmpfile), \"could not remove file from previous test\")\r\n    assert (lfs.rmdir (tmpdir), \"could not remove directory from previous test\")\r\nend\r\n\r\nio.write(\".\")\r\nio.flush()\r\n\r\n-- tries to create a directory\r\nassert (lfs.mkdir (tmpdir), \"could not make a new directory\")\r\nlocal attrib, errmsg = lfs.attributes (tmpdir)\r\nif not attrib then\r\n        error (\"could not get attributes of file `\"..tmpdir..\"':\\n\"..errmsg)\r\nend\r\nlocal f = io.open(tmpfile, \"w\")\r\nf:close()\r\n\r\nio.write(\".\")\r\nio.flush()\r\n\r\n-- Change access time\r\nlocal testdate = os.time({ year = 2007, day = 10, month = 2, hour=0})\r\nassert (lfs.touch (tmpfile, testdate))\r\nlocal new_att = assert (lfs.attributes (tmpfile))\r\nassert (new_att.access == testdate, \"could not set access time\")\r\nassert (new_att.modification == testdate, \"could not set modification time\")\r\n\r\nio.write(\".\")\r\nio.flush()\r\n\r\n-- Change access and modification time\r\nlocal testdate1 = os.time({ year = 2007, day = 10, month = 2, hour=0})\r\nlocal testdate2 = os.time({ year = 2007, day = 11, month = 2, hour=0})\r\n\r\nassert (lfs.touch (tmpfile, testdate2, testdate1))\r\nlocal new_att = assert (lfs.attributes (tmpfile))\r\nassert (new_att.access == testdate2, \"could not set access time\")\r\nassert (new_att.modification == testdate1, \"could not set modification time\")\r\n\r\nio.write(\".\")\r\nio.flush()\r\n\r\n-- Checking link (does not work on Windows)\r\nif lfs.link (tmpfile, \"_a_link_for_test_\", true) then\r\n  assert (lfs.attributes\"_a_link_for_test_\".mode == \"file\")\r\n  assert (lfs.symlinkattributes\"_a_link_for_test_\".mode == \"link\")\r\n  assert (lfs.link (tmpfile, \"_a_hard_link_for_test_\"))\r\n  assert (lfs.attributes (tmpfile, \"nlink\") == 2)\r\n  assert (os.remove\"_a_link_for_test_\")\r\n  assert (os.remove\"_a_hard_link_for_test_\")\r\nend\r\n\r\nio.write(\".\")\r\nio.flush()\r\n\r\n-- -- Checking text/binary modes (only has an effect in Windows)\r\n-- local f = io.open(tmpfile, \"w\")\r\n-- local result, mode = lfs.setmode(f, \"binary\")\r\n-- assert(result) -- on non-Windows platforms, mode is always returned as \"binary\"\r\n-- result, mode = lfs.setmode(f, \"text\")\r\n-- assert(result and mode == \"binary\")\r\n-- f:close()\r\n-- \r\n-- io.write(\".\")\r\n-- io.flush()\r\n\r\n-- Restore access time to current value\r\nassert (lfs.touch (tmpfile, attrib.access, attrib.modification))\r\nnew_att = assert (lfs.attributes (tmpfile))\r\nassert (new_att.access == attrib.access)\r\nassert (new_att.modification == attrib.modification)\r\n\r\nio.write(\".\")\r\nio.flush()\r\n\r\n-- Remove new file and directory\r\nassert (os.remove (tmpfile), \"could not remove new file\")\r\nassert (lfs.rmdir (tmpdir), \"could not remove new directory\")\r\nassert (lfs.mkdir (tmpdir..sep..\"lfs_tmp_dir\") == nil, \"could create a directory inside a non-existent one\")\r\n\r\nio.write(\".\")\r\nio.flush()\r\n\r\n-- Trying to get attributes of a non-existent file\r\nassert (lfs.attributes (\"this couldn't be an actual file\") == nil, \"could get attributes of a non-existent file\")\r\nassert (type(lfs.attributes (upper)) == \"table\", \"couldn't get attributes of upper directory\")\r\n\r\nio.write(\".\")\r\nio.flush()\r\n\r\n-- Stressing directory iterator\r\ncount = 0\r\nfor i = 1, 4000 do\r\n        for file in lfs.dir (tmp) do\r\n                count = count + 1\r\n        end\r\nend\r\n\r\nio.write(\".\")\r\nio.flush()\r\n\r\n-- Stressing directory iterator, explicit version\r\ncount = 0\r\nfor i = 1, 4000 do\r\n  local iter, dir = lfs.dir(tmp)\r\n  local file = dir:next()\r\n  while file do\r\n    count = count + 1\r\n    file = dir:next()\r\n  end\r\n  assert(not pcall(dir.next, dir))\r\nend\r\n\r\nio.write(\".\")\r\nio.flush()\r\n\r\n-- directory explicit close\r\nlocal iter, dir = lfs.dir(tmp)\r\ndir:close()\r\nassert(not pcall(dir.next, dir))\r\nprint\"Ok!\"\r\n\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "local tmp = \"/tmp\"",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "local sep = string.match (package.config, \"[^\\n]+\")",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "local upper = \"..\"",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "print (name)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "io.write(\".\")",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "io.flush()",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "function attrdir (path)\r\n        for file in lfs.dir(path) do\r\n                if file ~= \".\" and file ~= \"..\" then\r\n                        local f = path..sep..file\r\n                        print (\"\\t=> \"..f..\" <=\")\r\n                        local attr = lfs.attributes (f)\r\n                        assert (type(attr) == \"table\")\r\n                        if attr.mode == \"directory\" then\r\n                                attrdir (f)\r\n                        else\r\n                                for name, value in pairs(attr) do\r\n                                        print (name, value)\r\n                                end\r\n                        end\r\n                end\r\n        end\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 16,
    "text": "for file in lfs.dir(path) do\r\n                if file ~= \".\" and file ~= \"..\" then\r\n                        local f = path..sep..file\r\n                        print (\"\\t=> \"..f..\" <=\")\r\n                        local attr = lfs.attributes (f)\r\n                        assert (type(attr) == \"table\")\r\n                        if attr.mode == \"directory\" then\r\n                                attrdir (f)\r\n                        else\r\n                                for name, value in pairs(attr) do\r\n                                        print (name, value)\r\n                                end\r\n                        end\r\n                end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 17,
    "text": "if file ~= \".\" and file ~= \"..\" then\r\n                        local f = path..sep..file\r\n                        print (\"\\t=> \"..f..\" <=\")\r\n                        local attr = lfs.attributes (f)\r\n                        assert (type(attr) == \"table\")\r\n                        if attr.mode == \"directory\" then\r\n                                attrdir (f)\r\n                        else\r\n                                for name, value in pairs(attr) do\r\n                                        print (name, value)\r\n                                end\r\n                        end\r\n                end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "local f = path..sep..file",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "print (\"\\t=> \"..f..\" <=\")",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "local attr = lfs.attributes (f)",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "assert (type(attr) == \"table\")",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "if attr.mode == \"directory\" then\r\n                                attrdir (f)\r\n                        else\r\n                                for name, value in pairs(attr) do\r\n                                        print (name, value)\r\n                                end\r\n                        end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "attrdir (f)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "for name, value in pairs(attr) do\r\n                                        print (name, value)\r\n                                end",
    "type": "statement:genericfor"
  }, {
    "id": 25,
    "text": "print (name, value)",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "local current = assert (lfs.currentdir())",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "local reldir = string.gsub (current, \"^.*%\"..sep..\"([^\"..sep..\"])$\", \"%1\")",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "assert (lfs.chdir (upper), \"could not change to upper directory\")",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "assert (lfs.chdir (reldir), \"could not change back to current directory\")",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "assert (lfs.currentdir() == current, \"error trying to change directories\")",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "assert (lfs.chdir (\"this couldn't be an actual directory\") == nil, \"could change to a non-existent directory\")",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "local tmpdir = current..sep..\"lfs_tmp_dir\"",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "local tmpfile = tmpdir..sep..\"tmp_file\"",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "if lfs.chdir (tmpdir) then\r\n    assert (lfs.chdir (upper), \"could not change to upper directory\")\r\n    assert (os.remove (tmpfile), \"could not remove file from previous test\")\r\n    assert (lfs.rmdir (tmpdir), \"could not remove directory from previous test\")\r\nend",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "assert (os.remove (tmpfile), \"could not remove file from previous test\")",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "assert (lfs.rmdir (tmpdir), \"could not remove directory from previous test\")",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "assert (lfs.mkdir (tmpdir), \"could not make a new directory\")",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "local attrib, errmsg = lfs.attributes (tmpdir)",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "if not attrib then\r\n        error (\"could not get attributes of file `\"..tmpdir..\"':\\n\"..errmsg)\r\nend",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "error (\"could not get attributes of file `\"..tmpdir..\"':\\n\"..errmsg)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "local f = io.open(tmpfile, \"w\")",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "local testdate = os.time({ year = 2007, day = 10, month = 2, hour=0})",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "assert (lfs.touch (tmpfile, testdate))",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "local new_att = assert (lfs.attributes (tmpfile))",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "assert (new_att.access == testdate, \"could not set access time\")",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "assert (new_att.modification == testdate, \"could not set modification time\")",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "local testdate1 = os.time({ year = 2007, day = 10, month = 2, hour=0})",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "local testdate2 = os.time({ year = 2007, day = 11, month = 2, hour=0})",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "assert (lfs.touch (tmpfile, testdate2, testdate1))",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "assert (new_att.access == testdate2, \"could not set access time\")",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "assert (new_att.modification == testdate1, \"could not set modification time\")",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "if lfs.link (tmpfile, \"_a_link_for_test_\", true) then\r\n  assert (lfs.attributes\"_a_link_for_test_\".mode == \"file\")\r\n  assert (lfs.symlinkattributes\"_a_link_for_test_\".mode == \"link\")\r\n  assert (lfs.link (tmpfile, \"_a_hard_link_for_test_\"))\r\n  assert (lfs.attributes (tmpfile, \"nlink\") == 2)\r\n  assert (os.remove\"_a_link_for_test_\")\r\n  assert (os.remove\"_a_hard_link_for_test_\")\r\nend",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "assert (lfs.attributes\"_a_link_for_test_\".mode == \"file\")",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "assert (lfs.symlinkattributes\"_a_link_for_test_\".mode == \"link\")",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "assert (lfs.link (tmpfile, \"_a_hard_link_for_test_\"))",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "assert (lfs.attributes (tmpfile, \"nlink\") == 2)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "assert (os.remove\"_a_link_for_test_\")",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "assert (os.remove\"_a_hard_link_for_test_\")",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "assert (lfs.touch (tmpfile, attrib.access, attrib.modification))",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "new_att = assert (lfs.attributes (tmpfile))",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "assert (new_att.access == attrib.access)",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "assert (new_att.modification == attrib.modification)",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "assert (os.remove (tmpfile), \"could not remove new file\")",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "assert (lfs.rmdir (tmpdir), \"could not remove new directory\")",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "assert (lfs.mkdir (tmpdir..sep..\"lfs_tmp_dir\") == nil, \"could create a directory inside a non-existent one\")",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "assert (lfs.attributes (\"this couldn't be an actual file\") == nil, \"could get attributes of a non-existent file\")",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "assert (type(lfs.attributes (upper)) == \"table\", \"couldn't get attributes of upper directory\")",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "count = 0",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "for i = 1, 4000 do\r\n        for file in lfs.dir (tmp) do\r\n                count = count + 1\r\n        end\r\nend",
    "type": "statement:numericfor"
  }, {
    "id": 71,
    "text": "for file in lfs.dir (tmp) do\r\n                count = count + 1\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 72,
    "text": "count = count + 1",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "for i = 1, 4000 do\r\n  local iter, dir = lfs.dir(tmp)\r\n  local file = dir:next()\r\n  while file do\r\n    count = count + 1\r\n    file = dir:next()\r\n  end\r\n  assert(not pcall(dir.next, dir))\r\nend",
    "type": "statement:numericfor"
  }, {
    "id": 74,
    "text": "local iter, dir = lfs.dir(tmp)",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "local file = dir:next()",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "while file do\r\n    count = count + 1\r\n    file = dir:next()\r\n  end",
    "type": "statement:while"
  }, {
    "id": 77,
    "text": "file = dir:next()",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "assert(not pcall(dir.next, dir))",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "dir:close()",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "print\"Ok!\"",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "function attrdir (path)\r\n        for file in lfs.dir(path) do\r\n                if file ~= \".\" and file ~= \"..\" then\r\n                        local f = path..sep..file\r\n                        print (\"\\t=> \"..f..\" <=\")\r\n                        local attr = lfs.attributes (f)\r\n                        assert (type(attr) == \"table\")\r\n                        if attr.mode == \"directory\" then\r\n                                attrdir (f)\r\n                        else\r\n                                for name, value in pairs(attr) do\r\n                                        print (name, value)\r\n                                end\r\n                        end\r\n                end\r\n        end\r\nend",
    "type": "function"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "local function run_test(...)\r\n  local ok, err = pcall(test, ...)\r\n  if not ok then\r\n    print()\r\n    print(err)\r\n  end\r\n  pass = ok and pass\r\n  print(\"----------------------------------------------------\")\r\nend",
    "type": "function"
  }, {
    "id": 85,
    "text": "local ok, err = pcall(test, ...)",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "if not ok then\r\n    print()\r\n    print(err)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 87,
    "text": "print()",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "print(err)",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "pass = ok and pass",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "print(\"----------------------------------------------------\")",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "",
    "type": "function container"
  }, {
    "id": 93,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 94,
    "text": "match",
    "type": "global function"
  }, {
    "id": 95,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 96,
    "text": "print",
    "type": "global function"
  }, {
    "id": 97,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 98,
    "text": "dir",
    "type": "global function"
  }, {
    "id": 99,
    "text": "type",
    "type": "global function"
  }, {
    "id": 100,
    "text": "chdir",
    "type": "global function"
  }, {
    "id": 101,
    "text": "attributes",
    "type": "global function"
  }, {
    "id": 102,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 103,
    "text": "touch",
    "type": "global function"
  }, {
    "id": 104,
    "text": "flush",
    "type": "global function"
  }, {
    "id": 105,
    "text": "time",
    "type": "global function"
  }, {
    "id": 106,
    "text": "link",
    "type": "global function"
  }, {
    "id": 107,
    "text": "rmdir",
    "type": "global function"
  }, {
    "id": 108,
    "text": "currentdir",
    "type": "global function"
  }, {
    "id": 109,
    "text": "symlinkattributes",
    "type": "global function"
  }, {
    "id": 110,
    "text": "error",
    "type": "global function"
  }, {
    "id": 111,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 112,
    "text": "open",
    "type": "global function"
  }, {
    "id": 113,
    "text": "write",
    "type": "global function"
  }, {
    "id": 114,
    "text": "mkdir",
    "type": "global function"
  }, {
    "id": 115,
    "text": "require",
    "type": "global function"
  }, {
    "id": 116,
    "text": "",
    "type": "variable container"
  }, {
    "id": 117,
    "text": "",
    "type": "require container"
  }, {
    "id": 118,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 119,
    "text": "",
    "type": "require local variable"
  } ]
}