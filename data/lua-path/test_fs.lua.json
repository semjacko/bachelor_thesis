{
  "_filename": "test_fs.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-path/test/test_fs.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 3
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 3
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 3
  }, {
    "from": 10,
    "label": "has",
    "to": 3
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 3
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 3
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 3
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 3
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 28,
    "label": "has",
    "to": 33
  }, {
    "from": 28,
    "label": "has",
    "to": 3
  }, {
    "from": 25,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 3
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 34,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 38
  }, {
    "from": 34,
    "label": "has",
    "to": 3
  }, {
    "from": 34,
    "label": "has",
    "to": 3
  }, {
    "from": 25,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 3
  }, {
    "from": 25,
    "label": "has",
    "to": 40
  }, {
    "from": 25,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 41,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 41,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 41,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 53,
    "label": "has",
    "to": 56
  }, {
    "from": 53,
    "label": "has",
    "to": 57
  }, {
    "from": 53,
    "label": "has",
    "to": 58
  }, {
    "from": 53,
    "label": "has",
    "to": 59
  }, {
    "from": 53,
    "label": "has",
    "to": 60
  }, {
    "from": 53,
    "label": "has",
    "to": 61
  }, {
    "from": 53,
    "label": "has",
    "to": 62
  }, {
    "from": 53,
    "label": "has",
    "to": 63
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 41,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 25,
    "label": "has",
    "to": 67
  }, {
    "from": 25,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 46
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 71,
    "label": "has",
    "to": 74
  }, {
    "from": 68,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 75,
    "label": "has",
    "to": 78
  }, {
    "from": 75,
    "label": "has",
    "to": 79
  }, {
    "from": 75,
    "label": "has",
    "to": 80
  }, {
    "from": 68,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 68,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 68,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "has",
    "to": 82
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 68,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 68,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 92,
    "label": "has",
    "to": 95
  }, {
    "from": 92,
    "label": "has",
    "to": 96
  }, {
    "from": 92,
    "label": "has",
    "to": 97
  }, {
    "from": 92,
    "label": "has",
    "to": 98
  }, {
    "from": 92,
    "label": "has",
    "to": 97
  }, {
    "from": 92,
    "label": "has",
    "to": 99
  }, {
    "from": 92,
    "label": "has",
    "to": 96
  }, {
    "from": 92,
    "label": "has",
    "to": 100
  }, {
    "from": 92,
    "label": "has",
    "to": 98
  }, {
    "from": 92,
    "label": "has",
    "to": 97
  }, {
    "from": 68,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 101,
    "label": "has",
    "to": 103
  }, {
    "from": 101,
    "label": "has",
    "to": 104
  }, {
    "from": 101,
    "label": "has",
    "to": 103
  }, {
    "from": 25,
    "label": "has",
    "to": 105
  }, {
    "from": 25,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 69
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 106,
    "label": "has",
    "to": 108
  }, {
    "from": 106,
    "label": "has",
    "to": 109
  }, {
    "from": 106,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 46
  }, {
    "from": 110,
    "label": "has",
    "to": 72
  }, {
    "from": 110,
    "label": "has",
    "to": 73
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 110,
    "label": "has",
    "to": 112
  }, {
    "from": 110,
    "label": "has",
    "to": 74
  }, {
    "from": 110,
    "label": "has",
    "to": 113
  }, {
    "from": 110,
    "label": "has",
    "to": 114
  }, {
    "from": 110,
    "label": "has",
    "to": 115
  }, {
    "from": 110,
    "label": "has",
    "to": 116
  }, {
    "from": 110,
    "label": "has",
    "to": 117
  }, {
    "from": 110,
    "label": "has",
    "to": 118
  }, {
    "from": 110,
    "label": "has",
    "to": 119
  }, {
    "from": 110,
    "label": "has",
    "to": 120
  }, {
    "from": 110,
    "label": "has",
    "to": 121
  }, {
    "from": 110,
    "label": "has",
    "to": 122
  }, {
    "from": 106,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 76
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 123,
    "label": "has",
    "to": 125
  }, {
    "from": 123,
    "label": "has",
    "to": 78
  }, {
    "from": 123,
    "label": "has",
    "to": 79
  }, {
    "from": 123,
    "label": "has",
    "to": 126
  }, {
    "from": 123,
    "label": "has",
    "to": 127
  }, {
    "from": 123,
    "label": "has",
    "to": 128
  }, {
    "from": 123,
    "label": "has",
    "to": 129
  }, {
    "from": 123,
    "label": "has",
    "to": 130
  }, {
    "from": 123,
    "label": "has",
    "to": 131
  }, {
    "from": 106,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 132,
    "label": "has",
    "to": 134
  }, {
    "from": 132,
    "label": "has",
    "to": 135
  }, {
    "from": 132,
    "label": "has",
    "to": 136
  }, {
    "from": 132,
    "label": "has",
    "to": 137
  }, {
    "from": 132,
    "label": "has",
    "to": 135
  }, {
    "from": 132,
    "label": "has",
    "to": 136
  }, {
    "from": 132,
    "label": "has",
    "to": 138
  }, {
    "from": 132,
    "label": "has",
    "to": 135
  }, {
    "from": 132,
    "label": "has",
    "to": 136
  }, {
    "from": 132,
    "label": "has",
    "to": 139
  }, {
    "from": 132,
    "label": "has",
    "to": 134
  }, {
    "from": 132,
    "label": "has",
    "to": 135
  }, {
    "from": 132,
    "label": "has",
    "to": 140
  }, {
    "from": 132,
    "label": "has",
    "to": 141
  }, {
    "from": 132,
    "label": "has",
    "to": 142
  }, {
    "from": 132,
    "label": "has",
    "to": 103
  }, {
    "from": 132,
    "label": "has",
    "to": 136
  }, {
    "from": 106,
    "label": "has",
    "to": 143
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 106,
    "label": "has",
    "to": 145
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 106,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 147,
    "label": "has",
    "to": 149
  }, {
    "from": 147,
    "label": "has",
    "to": 103
  }, {
    "from": 147,
    "label": "has",
    "to": 150
  }, {
    "from": 106,
    "label": "has",
    "to": 151
  }, {
    "from": 151,
    "label": "has",
    "to": 148
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 151,
    "label": "has",
    "to": 153
  }, {
    "from": 151,
    "label": "has",
    "to": 150
  }, {
    "from": 106,
    "label": "has",
    "to": 154
  }, {
    "from": 154,
    "label": "has",
    "to": 133
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 154,
    "label": "has",
    "to": 103
  }, {
    "from": 154,
    "label": "has",
    "to": 150
  }, {
    "from": 106,
    "label": "has",
    "to": 156
  }, {
    "from": 156,
    "label": "has",
    "to": 133
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 156,
    "label": "has",
    "to": 153
  }, {
    "from": 156,
    "label": "has",
    "to": 150
  }, {
    "from": 106,
    "label": "has",
    "to": 158
  }, {
    "from": 158,
    "label": "has",
    "to": 159
  }, {
    "from": 158,
    "label": "has",
    "to": 160
  }, {
    "from": 158,
    "label": "has",
    "to": 103
  }, {
    "from": 158,
    "label": "has",
    "to": 161
  }, {
    "from": 106,
    "label": "has",
    "to": 162
  }, {
    "from": 162,
    "label": "has",
    "to": 163
  }, {
    "from": 162,
    "label": "has",
    "to": 160
  }, {
    "from": 162,
    "label": "has",
    "to": 103
  }, {
    "from": 162,
    "label": "has",
    "to": 161
  }, {
    "from": 106,
    "label": "has",
    "to": 164
  }, {
    "from": 164,
    "label": "has",
    "to": 159
  }, {
    "from": 164,
    "label": "has",
    "to": 165
  }, {
    "from": 164,
    "label": "has",
    "to": 166
  }, {
    "from": 106,
    "label": "has",
    "to": 167
  }, {
    "from": 167,
    "label": "has",
    "to": 163
  }, {
    "from": 167,
    "label": "has",
    "to": 165
  }, {
    "from": 167,
    "label": "has",
    "to": 166
  }, {
    "from": 106,
    "label": "has",
    "to": 168
  }, {
    "from": 168,
    "label": "has",
    "to": 169
  }, {
    "from": 168,
    "label": "has",
    "to": 170
  }, {
    "from": 168,
    "label": "has",
    "to": 153
  }, {
    "from": 168,
    "label": "has",
    "to": 161
  }, {
    "from": 106,
    "label": "has",
    "to": 171
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 171,
    "label": "has",
    "to": 173
  }, {
    "from": 171,
    "label": "has",
    "to": 174
  }, {
    "from": 171,
    "label": "has",
    "to": 161
  }, {
    "from": 106,
    "label": "has",
    "to": 175
  }, {
    "from": 175,
    "label": "has",
    "to": 169
  }, {
    "from": 175,
    "label": "has",
    "to": 176
  }, {
    "from": 175,
    "label": "has",
    "to": 153
  }, {
    "from": 175,
    "label": "has",
    "to": 161
  }, {
    "from": 25,
    "label": "has",
    "to": 177
  }, {
    "from": 25,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 69
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 178,
    "label": "has",
    "to": 180
  }, {
    "from": 178,
    "label": "has",
    "to": 181
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 181,
    "label": "has",
    "to": 46
  }, {
    "from": 181,
    "label": "has",
    "to": 183
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 181,
    "label": "has",
    "to": 185
  }, {
    "from": 181,
    "label": "has",
    "to": 74
  }, {
    "from": 178,
    "label": "has",
    "to": 186
  }, {
    "from": 186,
    "label": "has",
    "to": 76
  }, {
    "from": 186,
    "label": "has",
    "to": 77
  }, {
    "from": 186,
    "label": "has",
    "to": 187
  }, {
    "from": 186,
    "label": "has",
    "to": 78
  }, {
    "from": 186,
    "label": "has",
    "to": 79
  }, {
    "from": 186,
    "label": "has",
    "to": 188
  }, {
    "from": 186,
    "label": "has",
    "to": 189
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 178,
    "label": "has",
    "to": 191
  }, {
    "from": 191,
    "label": "has",
    "to": 192
  }, {
    "from": 191,
    "label": "has",
    "to": 193
  }, {
    "from": 191,
    "label": "has",
    "to": 194
  }, {
    "from": 191,
    "label": "has",
    "to": 195
  }, {
    "from": 191,
    "label": "has",
    "to": 196
  }, {
    "from": 191,
    "label": "has",
    "to": 197
  }, {
    "from": 197,
    "label": "has",
    "to": 198
  }, {
    "from": 197,
    "label": "has",
    "to": 199
  }, {
    "from": 191,
    "label": "has",
    "to": 200
  }, {
    "from": 178,
    "label": "has",
    "to": 201
  }, {
    "from": 201,
    "label": "has",
    "to": 192
  }, {
    "from": 201,
    "label": "has",
    "to": 195
  }, {
    "from": 201,
    "label": "has",
    "to": 196
  }, {
    "from": 201,
    "label": "has",
    "to": 202
  }, {
    "from": 202,
    "label": "has",
    "to": 203
  }, {
    "from": 202,
    "label": "has",
    "to": 204
  }, {
    "from": 202,
    "label": "has",
    "to": 205
  }, {
    "from": 202,
    "label": "has",
    "to": 199
  }, {
    "from": 201,
    "label": "has",
    "to": 200
  }, {
    "from": 178,
    "label": "has",
    "to": 206
  }, {
    "from": 206,
    "label": "has",
    "to": 192
  }, {
    "from": 206,
    "label": "has",
    "to": 195
  }, {
    "from": 206,
    "label": "has",
    "to": 196
  }, {
    "from": 206,
    "label": "has",
    "to": 207
  }, {
    "from": 207,
    "label": "has",
    "to": 205
  }, {
    "from": 207,
    "label": "has",
    "to": 199
  }, {
    "from": 206,
    "label": "has",
    "to": 200
  }, {
    "from": 178,
    "label": "has",
    "to": 208
  }, {
    "from": 208,
    "label": "has",
    "to": 192
  }, {
    "from": 208,
    "label": "has",
    "to": 195
  }, {
    "from": 208,
    "label": "has",
    "to": 196
  }, {
    "from": 208,
    "label": "has",
    "to": 209
  }, {
    "from": 209,
    "label": "has",
    "to": 205
  }, {
    "from": 209,
    "label": "has",
    "to": 199
  }, {
    "from": 208,
    "label": "has",
    "to": 200
  }, {
    "from": 178,
    "label": "has",
    "to": 210
  }, {
    "from": 210,
    "label": "has",
    "to": 211
  }, {
    "from": 210,
    "label": "has",
    "to": 212
  }, {
    "from": 210,
    "label": "has",
    "to": 196
  }, {
    "from": 210,
    "label": "has",
    "to": 202
  }, {
    "from": 202,
    "label": "has",
    "to": 203
  }, {
    "from": 202,
    "label": "has",
    "to": 204
  }, {
    "from": 202,
    "label": "has",
    "to": 205
  }, {
    "from": 202,
    "label": "has",
    "to": 199
  }, {
    "from": 210,
    "label": "has",
    "to": 200
  }, {
    "from": 178,
    "label": "has",
    "to": 213
  }, {
    "from": 213,
    "label": "has",
    "to": 192
  }, {
    "from": 213,
    "label": "has",
    "to": 193
  }, {
    "from": 213,
    "label": "has",
    "to": 194
  }, {
    "from": 213,
    "label": "has",
    "to": 195
  }, {
    "from": 213,
    "label": "has",
    "to": 196
  }, {
    "from": 213,
    "label": "has",
    "to": 214
  }, {
    "from": 214,
    "label": "has",
    "to": 205
  }, {
    "from": 214,
    "label": "has",
    "to": 199
  }, {
    "from": 213,
    "label": "has",
    "to": 200
  }, {
    "from": 178,
    "label": "has",
    "to": 215
  }, {
    "from": 215,
    "label": "has",
    "to": 216
  }, {
    "from": 215,
    "label": "has",
    "to": 193
  }, {
    "from": 215,
    "label": "has",
    "to": 194
  }, {
    "from": 215,
    "label": "has",
    "to": 195
  }, {
    "from": 215,
    "label": "has",
    "to": 196
  }, {
    "from": 215,
    "label": "has",
    "to": 217
  }, {
    "from": 217,
    "label": "has",
    "to": 205
  }, {
    "from": 217,
    "label": "has",
    "to": 199
  }, {
    "from": 215,
    "label": "has",
    "to": 200
  }, {
    "from": 178,
    "label": "has",
    "to": 218
  }, {
    "from": 218,
    "label": "has",
    "to": 219
  }, {
    "from": 218,
    "label": "has",
    "to": 196
  }, {
    "from": 218,
    "label": "has",
    "to": 220
  }, {
    "from": 220,
    "label": "has",
    "to": 205
  }, {
    "from": 220,
    "label": "has",
    "to": 199
  }, {
    "from": 218,
    "label": "has",
    "to": 200
  }, {
    "from": 178,
    "label": "has",
    "to": 221
  }, {
    "from": 221,
    "label": "has",
    "to": 196
  }, {
    "from": 221,
    "label": "has",
    "to": 222
  }, {
    "from": 222,
    "label": "has",
    "to": 199
  }, {
    "from": 222,
    "label": "has",
    "to": 3
  }, {
    "from": 221,
    "label": "has",
    "to": 223
  }, {
    "from": 25,
    "label": "has",
    "to": 224
  }, {
    "from": 25,
    "label": "has",
    "to": 225
  }, {
    "from": 225,
    "label": "has",
    "to": 69
  }, {
    "from": 225,
    "label": "has",
    "to": 179
  }, {
    "from": 225,
    "label": "has",
    "to": 180
  }, {
    "from": 225,
    "label": "has",
    "to": 226
  }, {
    "from": 226,
    "label": "has",
    "to": 182
  }, {
    "from": 226,
    "label": "has",
    "to": 46
  }, {
    "from": 226,
    "label": "has",
    "to": 183
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 226,
    "label": "has",
    "to": 227
  }, {
    "from": 226,
    "label": "has",
    "to": 228
  }, {
    "from": 226,
    "label": "has",
    "to": 185
  }, {
    "from": 226,
    "label": "has",
    "to": 74
  }, {
    "from": 225,
    "label": "has",
    "to": 229
  }, {
    "from": 229,
    "label": "has",
    "to": 76
  }, {
    "from": 229,
    "label": "has",
    "to": 77
  }, {
    "from": 229,
    "label": "has",
    "to": 230
  }, {
    "from": 229,
    "label": "has",
    "to": 78
  }, {
    "from": 229,
    "label": "has",
    "to": 79
  }, {
    "from": 229,
    "label": "has",
    "to": 188
  }, {
    "from": 229,
    "label": "has",
    "to": 231
  }, {
    "from": 229,
    "label": "has",
    "to": 232
  }, {
    "from": 229,
    "label": "has",
    "to": 233
  }, {
    "from": 233,
    "label": "has",
    "to": 190
  }, {
    "from": 225,
    "label": "has",
    "to": 234
  }, {
    "from": 234,
    "label": "has",
    "to": 192
  }, {
    "from": 234,
    "label": "has",
    "to": 195
  }, {
    "from": 234,
    "label": "has",
    "to": 235
  }, {
    "from": 234,
    "label": "has",
    "to": 236
  }, {
    "from": 234,
    "label": "has",
    "to": 196
  }, {
    "from": 234,
    "label": "has",
    "to": 237
  }, {
    "from": 237,
    "label": "has",
    "to": 205
  }, {
    "from": 237,
    "label": "has",
    "to": 199
  }, {
    "from": 234,
    "label": "has",
    "to": 200
  }, {
    "from": 225,
    "label": "has",
    "to": 238
  }, {
    "from": 238,
    "label": "has",
    "to": 239
  }, {
    "from": 238,
    "label": "has",
    "to": 240
  }, {
    "from": 238,
    "label": "has",
    "to": 241
  }, {
    "from": 241,
    "label": "has",
    "to": 242
  }, {
    "from": 241,
    "label": "has",
    "to": 3
  }, {
    "from": 225,
    "label": "has",
    "to": 243
  }, {
    "from": 243,
    "label": "has",
    "to": 239
  }, {
    "from": 243,
    "label": "has",
    "to": 240
  }, {
    "from": 243,
    "label": "has",
    "to": 244
  }, {
    "from": 244,
    "label": "has",
    "to": 245
  }, {
    "from": 244,
    "label": "has",
    "to": 3
  }, {
    "from": 225,
    "label": "has",
    "to": 246
  }, {
    "from": 246,
    "label": "has",
    "to": 239
  }, {
    "from": 246,
    "label": "has",
    "to": 240
  }, {
    "from": 246,
    "label": "has",
    "to": 247
  }, {
    "from": 247,
    "label": "has",
    "to": 245
  }, {
    "from": 247,
    "label": "has",
    "to": 3
  }, {
    "from": 225,
    "label": "has",
    "to": 248
  }, {
    "from": 248,
    "label": "has",
    "to": 192
  }, {
    "from": 248,
    "label": "has",
    "to": 193
  }, {
    "from": 248,
    "label": "has",
    "to": 194
  }, {
    "from": 248,
    "label": "has",
    "to": 195
  }, {
    "from": 248,
    "label": "has",
    "to": 249
  }, {
    "from": 248,
    "label": "has",
    "to": 250
  }, {
    "from": 248,
    "label": "has",
    "to": 235
  }, {
    "from": 248,
    "label": "has",
    "to": 251
  }, {
    "from": 248,
    "label": "has",
    "to": 252
  }, {
    "from": 248,
    "label": "has",
    "to": 236
  }, {
    "from": 248,
    "label": "has",
    "to": 253
  }, {
    "from": 248,
    "label": "has",
    "to": 254
  }, {
    "from": 248,
    "label": "has",
    "to": 196
  }, {
    "from": 248,
    "label": "has",
    "to": 255
  }, {
    "from": 255,
    "label": "has",
    "to": 205
  }, {
    "from": 255,
    "label": "has",
    "to": 199
  }, {
    "from": 248,
    "label": "has",
    "to": 200
  }, {
    "from": 225,
    "label": "has",
    "to": 256
  }, {
    "from": 256,
    "label": "has",
    "to": 192
  }, {
    "from": 256,
    "label": "has",
    "to": 195
  }, {
    "from": 256,
    "label": "has",
    "to": 235
  }, {
    "from": 256,
    "label": "has",
    "to": 236
  }, {
    "from": 256,
    "label": "has",
    "to": 196
  }, {
    "from": 256,
    "label": "has",
    "to": 257
  }, {
    "from": 257,
    "label": "has",
    "to": 205
  }, {
    "from": 257,
    "label": "has",
    "to": 199
  }, {
    "from": 256,
    "label": "has",
    "to": 200
  }, {
    "from": 225,
    "label": "has",
    "to": 258
  }, {
    "from": 258,
    "label": "has",
    "to": 219
  }, {
    "from": 258,
    "label": "has",
    "to": 196
  }, {
    "from": 258,
    "label": "has",
    "to": 259
  }, {
    "from": 259,
    "label": "has",
    "to": 260
  }, {
    "from": 259,
    "label": "has",
    "to": 199
  }, {
    "from": 258,
    "label": "has",
    "to": 200
  }, {
    "from": 225,
    "label": "has",
    "to": 261
  }, {
    "from": 261,
    "label": "has",
    "to": 196
  }, {
    "from": 261,
    "label": "has",
    "to": 262
  }, {
    "from": 262,
    "label": "has",
    "to": 263
  }, {
    "from": 263,
    "label": "has",
    "to": 264
  }, {
    "from": 262,
    "label": "has",
    "to": 3
  }, {
    "from": 262,
    "label": "has",
    "to": 265
  }, {
    "from": 261,
    "label": "has",
    "to": 223
  }, {
    "from": 225,
    "label": "has",
    "to": 266
  }, {
    "from": 266,
    "label": "has",
    "to": 196
  }, {
    "from": 266,
    "label": "has",
    "to": 267
  }, {
    "from": 267,
    "label": "has",
    "to": 263
  }, {
    "from": 263,
    "label": "has",
    "to": 264
  }, {
    "from": 267,
    "label": "has",
    "to": 3
  }, {
    "from": 267,
    "label": "has",
    "to": 265
  }, {
    "from": 266,
    "label": "has",
    "to": 223
  }, {
    "from": 225,
    "label": "has",
    "to": 268
  }, {
    "from": 268,
    "label": "has",
    "to": 269
  }, {
    "from": 268,
    "label": "has",
    "to": 196
  }, {
    "from": 268,
    "label": "has",
    "to": 270
  }, {
    "from": 270,
    "label": "has",
    "to": 205
  }, {
    "from": 270,
    "label": "has",
    "to": 199
  }, {
    "from": 268,
    "label": "has",
    "to": 200
  }, {
    "from": 225,
    "label": "has",
    "to": 271
  }, {
    "from": 271,
    "label": "has",
    "to": 272
  }, {
    "from": 271,
    "label": "has",
    "to": 196
  }, {
    "from": 271,
    "label": "has",
    "to": 273
  }, {
    "from": 273,
    "label": "has",
    "to": 205
  }, {
    "from": 273,
    "label": "has",
    "to": 199
  }, {
    "from": 271,
    "label": "has",
    "to": 200
  }, {
    "from": 225,
    "label": "has",
    "to": 274
  }, {
    "from": 274,
    "label": "has",
    "to": 275
  }, {
    "from": 274,
    "label": "has",
    "to": 276
  }, {
    "from": 274,
    "label": "has",
    "to": 277
  }, {
    "from": 274,
    "label": "has",
    "to": 278
  }, {
    "from": 274,
    "label": "has",
    "to": 279
  }, {
    "from": 274,
    "label": "has",
    "to": 280
  }, {
    "from": 280,
    "label": "has",
    "to": 281
  }, {
    "from": 280,
    "label": "has",
    "to": 282
  }, {
    "from": 280,
    "label": "has",
    "to": 283
  }, {
    "from": 280,
    "label": "has",
    "to": 284
  }, {
    "from": 280,
    "label": "has",
    "to": 285
  }, {
    "from": 280,
    "label": "has",
    "to": 286
  }, {
    "from": 280,
    "label": "has",
    "to": 287
  }, {
    "from": 280,
    "label": "has",
    "to": 288
  }, {
    "from": 280,
    "label": "has",
    "to": 289
  }, {
    "from": 280,
    "label": "has",
    "to": 290
  }, {
    "from": 280,
    "label": "has",
    "to": 291
  }, {
    "from": 280,
    "label": "has",
    "to": 292
  }, {
    "from": 280,
    "label": "has",
    "to": 293
  }, {
    "from": 280,
    "label": "has",
    "to": 294
  }, {
    "from": 280,
    "label": "has",
    "to": 295
  }, {
    "from": 280,
    "label": "has",
    "to": 296
  }, {
    "from": 280,
    "label": "has",
    "to": 297
  }, {
    "from": 280,
    "label": "has",
    "to": 298
  }, {
    "from": 280,
    "label": "has",
    "to": 299
  }, {
    "from": 280,
    "label": "has",
    "to": 300
  }, {
    "from": 280,
    "label": "has",
    "to": 301
  }, {
    "from": 280,
    "label": "has",
    "to": 302
  }, {
    "from": 274,
    "label": "has",
    "to": 303
  }, {
    "from": 225,
    "label": "has",
    "to": 304
  }, {
    "from": 304,
    "label": "has",
    "to": 275
  }, {
    "from": 304,
    "label": "has",
    "to": 276
  }, {
    "from": 304,
    "label": "has",
    "to": 277
  }, {
    "from": 304,
    "label": "has",
    "to": 278
  }, {
    "from": 304,
    "label": "has",
    "to": 279
  }, {
    "from": 304,
    "label": "has",
    "to": 305
  }, {
    "from": 305,
    "label": "has",
    "to": 281
  }, {
    "from": 305,
    "label": "has",
    "to": 306
  }, {
    "from": 305,
    "label": "has",
    "to": 283
  }, {
    "from": 305,
    "label": "has",
    "to": 284
  }, {
    "from": 305,
    "label": "has",
    "to": 285
  }, {
    "from": 305,
    "label": "has",
    "to": 286
  }, {
    "from": 305,
    "label": "has",
    "to": 287
  }, {
    "from": 305,
    "label": "has",
    "to": 288
  }, {
    "from": 305,
    "label": "has",
    "to": 289
  }, {
    "from": 305,
    "label": "has",
    "to": 290
  }, {
    "from": 305,
    "label": "has",
    "to": 291
  }, {
    "from": 305,
    "label": "has",
    "to": 292
  }, {
    "from": 305,
    "label": "has",
    "to": 293
  }, {
    "from": 305,
    "label": "has",
    "to": 294
  }, {
    "from": 305,
    "label": "has",
    "to": 295
  }, {
    "from": 305,
    "label": "has",
    "to": 296
  }, {
    "from": 305,
    "label": "has",
    "to": 297
  }, {
    "from": 305,
    "label": "has",
    "to": 298
  }, {
    "from": 305,
    "label": "has",
    "to": 299
  }, {
    "from": 305,
    "label": "has",
    "to": 300
  }, {
    "from": 305,
    "label": "has",
    "to": 301
  }, {
    "from": 305,
    "label": "has",
    "to": 302
  }, {
    "from": 304,
    "label": "has",
    "to": 303
  }, {
    "from": 25,
    "label": "has",
    "to": 307
  }, {
    "from": 25,
    "label": "has",
    "to": 308
  }, {
    "from": 308,
    "label": "has",
    "to": 69
  }, {
    "from": 308,
    "label": "has",
    "to": 179
  }, {
    "from": 308,
    "label": "has",
    "to": 180
  }, {
    "from": 308,
    "label": "has",
    "to": 309
  }, {
    "from": 309,
    "label": "has",
    "to": 182
  }, {
    "from": 309,
    "label": "has",
    "to": 46
  }, {
    "from": 309,
    "label": "has",
    "to": 183
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 309,
    "label": "has",
    "to": 74
  }, {
    "from": 308,
    "label": "has",
    "to": 310
  }, {
    "from": 310,
    "label": "has",
    "to": 76
  }, {
    "from": 310,
    "label": "has",
    "to": 77
  }, {
    "from": 310,
    "label": "has",
    "to": 311
  }, {
    "from": 310,
    "label": "has",
    "to": 78
  }, {
    "from": 310,
    "label": "has",
    "to": 79
  }, {
    "from": 310,
    "label": "has",
    "to": 189
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 308,
    "label": "has",
    "to": 312
  }, {
    "from": 312,
    "label": "has",
    "to": 275
  }, {
    "from": 312,
    "label": "has",
    "to": 196
  }, {
    "from": 312,
    "label": "has",
    "to": 313
  }, {
    "from": 312,
    "label": "has",
    "to": 314
  }, {
    "from": 312,
    "label": "has",
    "to": 315
  }, {
    "from": 315,
    "label": "has",
    "to": 306
  }, {
    "from": 315,
    "label": "has",
    "to": 199
  }, {
    "from": 312,
    "label": "has",
    "to": 316
  }, {
    "from": 308,
    "label": "has",
    "to": 317
  }, {
    "from": 317,
    "label": "has",
    "to": 275
  }, {
    "from": 317,
    "label": "has",
    "to": 196
  }, {
    "from": 317,
    "label": "has",
    "to": 313
  }, {
    "from": 317,
    "label": "has",
    "to": 314
  }, {
    "from": 317,
    "label": "has",
    "to": 318
  }, {
    "from": 318,
    "label": "has",
    "to": 306
  }, {
    "from": 318,
    "label": "has",
    "to": 199
  }, {
    "from": 317,
    "label": "has",
    "to": 316
  }, {
    "from": 308,
    "label": "has",
    "to": 319
  }, {
    "from": 319,
    "label": "has",
    "to": 275
  }, {
    "from": 319,
    "label": "has",
    "to": 196
  }, {
    "from": 319,
    "label": "has",
    "to": 313
  }, {
    "from": 319,
    "label": "has",
    "to": 320
  }, {
    "from": 319,
    "label": "has",
    "to": 320
  }, {
    "from": 319,
    "label": "has",
    "to": 321
  }, {
    "from": 321,
    "label": "has",
    "to": 306
  }, {
    "from": 321,
    "label": "has",
    "to": 199
  }, {
    "from": 319,
    "label": "has",
    "to": 316
  }, {
    "from": 308,
    "label": "has",
    "to": 322
  }, {
    "from": 322,
    "label": "has",
    "to": 275
  }, {
    "from": 322,
    "label": "has",
    "to": 196
  }, {
    "from": 322,
    "label": "has",
    "to": 320
  }, {
    "from": 322,
    "label": "has",
    "to": 320
  }, {
    "from": 322,
    "label": "has",
    "to": 320
  }, {
    "from": 322,
    "label": "has",
    "to": 323
  }, {
    "from": 323,
    "label": "has",
    "to": 306
  }, {
    "from": 323,
    "label": "has",
    "to": 199
  }, {
    "from": 322,
    "label": "has",
    "to": 316
  }, {
    "from": 308,
    "label": "has",
    "to": 324
  }, {
    "from": 324,
    "label": "has",
    "to": 275
  }, {
    "from": 324,
    "label": "has",
    "to": 196
  }, {
    "from": 324,
    "label": "has",
    "to": 313
  }, {
    "from": 324,
    "label": "has",
    "to": 320
  }, {
    "from": 324,
    "label": "has",
    "to": 320
  }, {
    "from": 324,
    "label": "has",
    "to": 325
  }, {
    "from": 325,
    "label": "has",
    "to": 306
  }, {
    "from": 325,
    "label": "has",
    "to": 199
  }, {
    "from": 324,
    "label": "has",
    "to": 316
  }, {
    "from": 25,
    "label": "has",
    "to": 326
  }, {
    "from": 25,
    "label": "has",
    "to": 327
  }, {
    "from": 327,
    "label": "has",
    "to": 69
  }, {
    "from": 327,
    "label": "has",
    "to": 179
  }, {
    "from": 327,
    "label": "has",
    "to": 180
  }, {
    "from": 327,
    "label": "has",
    "to": 309
  }, {
    "from": 309,
    "label": "has",
    "to": 182
  }, {
    "from": 309,
    "label": "has",
    "to": 46
  }, {
    "from": 309,
    "label": "has",
    "to": 183
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 309,
    "label": "has",
    "to": 74
  }, {
    "from": 327,
    "label": "has",
    "to": 328
  }, {
    "from": 328,
    "label": "has",
    "to": 76
  }, {
    "from": 328,
    "label": "has",
    "to": 77
  }, {
    "from": 328,
    "label": "has",
    "to": 329
  }, {
    "from": 328,
    "label": "has",
    "to": 78
  }, {
    "from": 328,
    "label": "has",
    "to": 79
  }, {
    "from": 328,
    "label": "has",
    "to": 189
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 327,
    "label": "has",
    "to": 330
  }, {
    "from": 330,
    "label": "has",
    "to": 331
  }, {
    "from": 330,
    "label": "has",
    "to": 332
  }, {
    "from": 332,
    "label": "has",
    "to": 333
  }, {
    "from": 332,
    "label": "has",
    "to": 334
  }, {
    "from": 334,
    "label": "has",
    "to": 335
  }, {
    "from": 334,
    "label": "has",
    "to": 336
  }, {
    "from": 330,
    "label": "has",
    "to": 337
  }, {
    "from": 330,
    "label": "has",
    "to": 338
  }, {
    "from": 327,
    "label": "has",
    "to": 339
  }, {
    "from": 339,
    "label": "has",
    "to": 340
  }, {
    "from": 339,
    "label": "has",
    "to": 341
  }, {
    "from": 341,
    "label": "has",
    "to": 336
  }, {
    "from": 339,
    "label": "has",
    "to": 337
  }, {
    "from": 339,
    "label": "has",
    "to": 338
  }, {
    "from": 327,
    "label": "has",
    "to": 342
  }, {
    "from": 342,
    "label": "has",
    "to": 343
  }, {
    "from": 342,
    "label": "has",
    "to": 344
  }, {
    "from": 344,
    "label": "has",
    "to": 336
  }, {
    "from": 342,
    "label": "has",
    "to": 337
  }, {
    "from": 342,
    "label": "has",
    "to": 338
  }, {
    "from": 327,
    "label": "has",
    "to": 345
  }, {
    "from": 345,
    "label": "has",
    "to": 346
  }, {
    "from": 345,
    "label": "has",
    "to": 347
  }, {
    "from": 347,
    "label": "has",
    "to": 336
  }, {
    "from": 345,
    "label": "has",
    "to": 337
  }, {
    "from": 345,
    "label": "has",
    "to": 338
  }, {
    "from": 327,
    "label": "has",
    "to": 348
  }, {
    "from": 348,
    "label": "has",
    "to": 349
  }, {
    "from": 348,
    "label": "has",
    "to": 350
  }, {
    "from": 350,
    "label": "has",
    "to": 336
  }, {
    "from": 348,
    "label": "has",
    "to": 337
  }, {
    "from": 348,
    "label": "has",
    "to": 338
  }, {
    "from": 327,
    "label": "has",
    "to": 351
  }, {
    "from": 351,
    "label": "has",
    "to": 340
  }, {
    "from": 351,
    "label": "has",
    "to": 352
  }, {
    "from": 352,
    "label": "has",
    "to": 336
  }, {
    "from": 351,
    "label": "has",
    "to": 337
  }, {
    "from": 351,
    "label": "has",
    "to": 338
  }, {
    "from": 25,
    "label": "has",
    "to": 353
  }, {
    "from": 25,
    "label": "has",
    "to": 354
  }, {
    "from": 354,
    "label": "has",
    "to": 69
  }, {
    "from": 354,
    "label": "has",
    "to": 107
  }, {
    "from": 354,
    "label": "has",
    "to": 108
  }, {
    "from": 354,
    "label": "has",
    "to": 109
  }, {
    "from": 354,
    "label": "has",
    "to": 355
  }, {
    "from": 355,
    "label": "has",
    "to": 46
  }, {
    "from": 355,
    "label": "has",
    "to": 72
  }, {
    "from": 355,
    "label": "has",
    "to": 73
  }, {
    "from": 355,
    "label": "has",
    "to": 111
  }, {
    "from": 355,
    "label": "has",
    "to": 112
  }, {
    "from": 355,
    "label": "has",
    "to": 74
  }, {
    "from": 355,
    "label": "has",
    "to": 113
  }, {
    "from": 355,
    "label": "has",
    "to": 114
  }, {
    "from": 355,
    "label": "has",
    "to": 115
  }, {
    "from": 355,
    "label": "has",
    "to": 116
  }, {
    "from": 355,
    "label": "has",
    "to": 118
  }, {
    "from": 355,
    "label": "has",
    "to": 119
  }, {
    "from": 355,
    "label": "has",
    "to": 120
  }, {
    "from": 355,
    "label": "has",
    "to": 121
  }, {
    "from": 355,
    "label": "has",
    "to": 122
  }, {
    "from": 354,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 76
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 123,
    "label": "has",
    "to": 125
  }, {
    "from": 123,
    "label": "has",
    "to": 78
  }, {
    "from": 123,
    "label": "has",
    "to": 79
  }, {
    "from": 123,
    "label": "has",
    "to": 126
  }, {
    "from": 123,
    "label": "has",
    "to": 127
  }, {
    "from": 123,
    "label": "has",
    "to": 128
  }, {
    "from": 123,
    "label": "has",
    "to": 129
  }, {
    "from": 123,
    "label": "has",
    "to": 130
  }, {
    "from": 123,
    "label": "has",
    "to": 131
  }, {
    "from": 354,
    "label": "has",
    "to": 356
  }, {
    "from": 356,
    "label": "has",
    "to": 133
  }, {
    "from": 356,
    "label": "has",
    "to": 357
  }, {
    "from": 356,
    "label": "has",
    "to": 358
  }, {
    "from": 356,
    "label": "has",
    "to": 359
  }, {
    "from": 356,
    "label": "has",
    "to": 357
  }, {
    "from": 356,
    "label": "has",
    "to": 358
  }, {
    "from": 356,
    "label": "has",
    "to": 135
  }, {
    "from": 356,
    "label": "has",
    "to": 136
  }, {
    "from": 354,
    "label": "has",
    "to": 360
  }, {
    "from": 360,
    "label": "has",
    "to": 169
  }, {
    "from": 360,
    "label": "has",
    "to": 357
  }, {
    "from": 360,
    "label": "has",
    "to": 161
  }, {
    "from": 360,
    "label": "has",
    "to": 359
  }, {
    "from": 360,
    "label": "has",
    "to": 357
  }, {
    "from": 360,
    "label": "has",
    "to": 161
  }, {
    "from": 354,
    "label": "has",
    "to": 361
  }, {
    "from": 361,
    "label": "has",
    "to": 362
  }, {
    "from": 361,
    "label": "has",
    "to": 174
  }, {
    "from": 361,
    "label": "has",
    "to": 363
  }, {
    "from": 361,
    "label": "has",
    "to": 174
  }, {
    "from": 354,
    "label": "has",
    "to": 364
  }, {
    "from": 364,
    "label": "has",
    "to": 365
  }, {
    "from": 364,
    "label": "has",
    "to": 174
  }, {
    "from": 364,
    "label": "has",
    "to": 363
  }, {
    "from": 364,
    "label": "has",
    "to": 174
  }, {
    "from": 25,
    "label": "has",
    "to": 366
  }, {
    "from": 367,
    "label": "has",
    "to": 29
  }, {
    "from": 367,
    "label": "has",
    "to": 30
  }, {
    "from": 367,
    "label": "has",
    "to": 3
  }, {
    "from": 367,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 367,
    "label": "has",
    "to": 33
  }, {
    "from": 367,
    "label": "has",
    "to": 3
  }, {
    "from": 367,
    "label": "has",
    "to": 368
  }, {
    "from": 369,
    "label": "has",
    "to": 35
  }, {
    "from": 369,
    "label": "has",
    "to": 36
  }, {
    "from": 369,
    "label": "has",
    "to": 3
  }, {
    "from": 369,
    "label": "has",
    "to": 37
  }, {
    "from": 369,
    "label": "has",
    "to": 33
  }, {
    "from": 369,
    "label": "has",
    "to": 38
  }, {
    "from": 369,
    "label": "has",
    "to": 3
  }, {
    "from": 369,
    "label": "has",
    "to": 3
  }, {
    "from": 369,
    "label": "has",
    "to": 370
  }, {
    "from": 371,
    "label": "has",
    "to": 3
  }, {
    "from": 371,
    "label": "has",
    "to": 372
  }, {
    "from": 373,
    "label": "has",
    "to": 44
  }, {
    "from": 373,
    "label": "has",
    "to": 374
  }, {
    "from": 375,
    "label": "has",
    "to": 46
  }, {
    "from": 375,
    "label": "has",
    "to": 47
  }, {
    "from": 375,
    "label": "has",
    "to": 376
  }, {
    "from": 377,
    "label": "has",
    "to": 49
  }, {
    "from": 377,
    "label": "has",
    "to": 50
  }, {
    "from": 377,
    "label": "has",
    "to": 51
  }, {
    "from": 377,
    "label": "has",
    "to": 52
  }, {
    "from": 377,
    "label": "has",
    "to": 378
  }, {
    "from": 379,
    "label": "has",
    "to": 54
  }, {
    "from": 379,
    "label": "has",
    "to": 55
  }, {
    "from": 379,
    "label": "has",
    "to": 56
  }, {
    "from": 379,
    "label": "has",
    "to": 57
  }, {
    "from": 379,
    "label": "has",
    "to": 58
  }, {
    "from": 379,
    "label": "has",
    "to": 59
  }, {
    "from": 379,
    "label": "has",
    "to": 60
  }, {
    "from": 379,
    "label": "has",
    "to": 61
  }, {
    "from": 379,
    "label": "has",
    "to": 62
  }, {
    "from": 379,
    "label": "has",
    "to": 63
  }, {
    "from": 379,
    "label": "has",
    "to": 55
  }, {
    "from": 379,
    "label": "has",
    "to": 380
  }, {
    "from": 381,
    "label": "has",
    "to": 65
  }, {
    "from": 381,
    "label": "has",
    "to": 66
  }, {
    "from": 381,
    "label": "has",
    "to": 382
  }, {
    "from": 383,
    "label": "has",
    "to": 46
  }, {
    "from": 383,
    "label": "has",
    "to": 72
  }, {
    "from": 383,
    "label": "has",
    "to": 73
  }, {
    "from": 383,
    "label": "has",
    "to": 74
  }, {
    "from": 383,
    "label": "has",
    "to": 384
  }, {
    "from": 385,
    "label": "has",
    "to": 76
  }, {
    "from": 385,
    "label": "has",
    "to": 77
  }, {
    "from": 385,
    "label": "has",
    "to": 78
  }, {
    "from": 385,
    "label": "has",
    "to": 79
  }, {
    "from": 385,
    "label": "has",
    "to": 80
  }, {
    "from": 385,
    "label": "has",
    "to": 386
  }, {
    "from": 387,
    "label": "has",
    "to": 82
  }, {
    "from": 387,
    "label": "has",
    "to": 83
  }, {
    "from": 387,
    "label": "has",
    "to": 388
  }, {
    "from": 389,
    "label": "has",
    "to": 85
  }, {
    "from": 389,
    "label": "has",
    "to": 86
  }, {
    "from": 389,
    "label": "has",
    "to": 390
  }, {
    "from": 391,
    "label": "has",
    "to": 88
  }, {
    "from": 391,
    "label": "has",
    "to": 86
  }, {
    "from": 391,
    "label": "has",
    "to": 82
  }, {
    "from": 391,
    "label": "has",
    "to": 89
  }, {
    "from": 391,
    "label": "has",
    "to": 392
  }, {
    "from": 393,
    "label": "has",
    "to": 91
  }, {
    "from": 393,
    "label": "has",
    "to": 394
  }, {
    "from": 395,
    "label": "has",
    "to": 93
  }, {
    "from": 395,
    "label": "has",
    "to": 94
  }, {
    "from": 395,
    "label": "has",
    "to": 95
  }, {
    "from": 395,
    "label": "has",
    "to": 96
  }, {
    "from": 395,
    "label": "has",
    "to": 97
  }, {
    "from": 395,
    "label": "has",
    "to": 98
  }, {
    "from": 395,
    "label": "has",
    "to": 97
  }, {
    "from": 395,
    "label": "has",
    "to": 99
  }, {
    "from": 395,
    "label": "has",
    "to": 96
  }, {
    "from": 395,
    "label": "has",
    "to": 100
  }, {
    "from": 395,
    "label": "has",
    "to": 98
  }, {
    "from": 395,
    "label": "has",
    "to": 97
  }, {
    "from": 395,
    "label": "has",
    "to": 396
  }, {
    "from": 397,
    "label": "has",
    "to": 102
  }, {
    "from": 397,
    "label": "has",
    "to": 103
  }, {
    "from": 397,
    "label": "has",
    "to": 104
  }, {
    "from": 397,
    "label": "has",
    "to": 103
  }, {
    "from": 397,
    "label": "has",
    "to": 398
  }, {
    "from": 399,
    "label": "has",
    "to": 46
  }, {
    "from": 399,
    "label": "has",
    "to": 72
  }, {
    "from": 399,
    "label": "has",
    "to": 73
  }, {
    "from": 399,
    "label": "has",
    "to": 111
  }, {
    "from": 399,
    "label": "has",
    "to": 112
  }, {
    "from": 399,
    "label": "has",
    "to": 74
  }, {
    "from": 399,
    "label": "has",
    "to": 113
  }, {
    "from": 399,
    "label": "has",
    "to": 114
  }, {
    "from": 399,
    "label": "has",
    "to": 115
  }, {
    "from": 399,
    "label": "has",
    "to": 116
  }, {
    "from": 399,
    "label": "has",
    "to": 117
  }, {
    "from": 399,
    "label": "has",
    "to": 118
  }, {
    "from": 399,
    "label": "has",
    "to": 119
  }, {
    "from": 399,
    "label": "has",
    "to": 120
  }, {
    "from": 399,
    "label": "has",
    "to": 121
  }, {
    "from": 399,
    "label": "has",
    "to": 122
  }, {
    "from": 399,
    "label": "has",
    "to": 400
  }, {
    "from": 401,
    "label": "has",
    "to": 76
  }, {
    "from": 401,
    "label": "has",
    "to": 124
  }, {
    "from": 401,
    "label": "has",
    "to": 125
  }, {
    "from": 401,
    "label": "has",
    "to": 78
  }, {
    "from": 401,
    "label": "has",
    "to": 79
  }, {
    "from": 401,
    "label": "has",
    "to": 126
  }, {
    "from": 401,
    "label": "has",
    "to": 127
  }, {
    "from": 401,
    "label": "has",
    "to": 128
  }, {
    "from": 401,
    "label": "has",
    "to": 129
  }, {
    "from": 401,
    "label": "has",
    "to": 130
  }, {
    "from": 401,
    "label": "has",
    "to": 131
  }, {
    "from": 401,
    "label": "has",
    "to": 402
  }, {
    "from": 403,
    "label": "has",
    "to": 133
  }, {
    "from": 403,
    "label": "has",
    "to": 134
  }, {
    "from": 403,
    "label": "has",
    "to": 135
  }, {
    "from": 403,
    "label": "has",
    "to": 136
  }, {
    "from": 403,
    "label": "has",
    "to": 137
  }, {
    "from": 403,
    "label": "has",
    "to": 135
  }, {
    "from": 403,
    "label": "has",
    "to": 136
  }, {
    "from": 403,
    "label": "has",
    "to": 138
  }, {
    "from": 403,
    "label": "has",
    "to": 135
  }, {
    "from": 403,
    "label": "has",
    "to": 136
  }, {
    "from": 403,
    "label": "has",
    "to": 139
  }, {
    "from": 403,
    "label": "has",
    "to": 134
  }, {
    "from": 403,
    "label": "has",
    "to": 135
  }, {
    "from": 403,
    "label": "has",
    "to": 140
  }, {
    "from": 403,
    "label": "has",
    "to": 141
  }, {
    "from": 403,
    "label": "has",
    "to": 142
  }, {
    "from": 403,
    "label": "has",
    "to": 103
  }, {
    "from": 403,
    "label": "has",
    "to": 136
  }, {
    "from": 403,
    "label": "has",
    "to": 404
  }, {
    "from": 405,
    "label": "has",
    "to": 144
  }, {
    "from": 405,
    "label": "has",
    "to": 406
  }, {
    "from": 407,
    "label": "has",
    "to": 146
  }, {
    "from": 407,
    "label": "has",
    "to": 408
  }, {
    "from": 409,
    "label": "has",
    "to": 148
  }, {
    "from": 409,
    "label": "has",
    "to": 149
  }, {
    "from": 409,
    "label": "has",
    "to": 103
  }, {
    "from": 409,
    "label": "has",
    "to": 150
  }, {
    "from": 409,
    "label": "has",
    "to": 410
  }, {
    "from": 411,
    "label": "has",
    "to": 148
  }, {
    "from": 411,
    "label": "has",
    "to": 152
  }, {
    "from": 411,
    "label": "has",
    "to": 153
  }, {
    "from": 411,
    "label": "has",
    "to": 150
  }, {
    "from": 411,
    "label": "has",
    "to": 412
  }, {
    "from": 413,
    "label": "has",
    "to": 133
  }, {
    "from": 413,
    "label": "has",
    "to": 155
  }, {
    "from": 413,
    "label": "has",
    "to": 103
  }, {
    "from": 413,
    "label": "has",
    "to": 150
  }, {
    "from": 413,
    "label": "has",
    "to": 414
  }, {
    "from": 415,
    "label": "has",
    "to": 133
  }, {
    "from": 415,
    "label": "has",
    "to": 157
  }, {
    "from": 415,
    "label": "has",
    "to": 153
  }, {
    "from": 415,
    "label": "has",
    "to": 150
  }, {
    "from": 415,
    "label": "has",
    "to": 416
  }, {
    "from": 417,
    "label": "has",
    "to": 159
  }, {
    "from": 417,
    "label": "has",
    "to": 160
  }, {
    "from": 417,
    "label": "has",
    "to": 103
  }, {
    "from": 417,
    "label": "has",
    "to": 161
  }, {
    "from": 417,
    "label": "has",
    "to": 418
  }, {
    "from": 419,
    "label": "has",
    "to": 163
  }, {
    "from": 419,
    "label": "has",
    "to": 160
  }, {
    "from": 419,
    "label": "has",
    "to": 103
  }, {
    "from": 419,
    "label": "has",
    "to": 161
  }, {
    "from": 419,
    "label": "has",
    "to": 420
  }, {
    "from": 421,
    "label": "has",
    "to": 159
  }, {
    "from": 421,
    "label": "has",
    "to": 165
  }, {
    "from": 421,
    "label": "has",
    "to": 166
  }, {
    "from": 421,
    "label": "has",
    "to": 422
  }, {
    "from": 423,
    "label": "has",
    "to": 163
  }, {
    "from": 423,
    "label": "has",
    "to": 165
  }, {
    "from": 423,
    "label": "has",
    "to": 166
  }, {
    "from": 423,
    "label": "has",
    "to": 424
  }, {
    "from": 425,
    "label": "has",
    "to": 169
  }, {
    "from": 425,
    "label": "has",
    "to": 170
  }, {
    "from": 425,
    "label": "has",
    "to": 153
  }, {
    "from": 425,
    "label": "has",
    "to": 161
  }, {
    "from": 425,
    "label": "has",
    "to": 426
  }, {
    "from": 427,
    "label": "has",
    "to": 172
  }, {
    "from": 427,
    "label": "has",
    "to": 173
  }, {
    "from": 427,
    "label": "has",
    "to": 174
  }, {
    "from": 427,
    "label": "has",
    "to": 161
  }, {
    "from": 427,
    "label": "has",
    "to": 428
  }, {
    "from": 429,
    "label": "has",
    "to": 169
  }, {
    "from": 429,
    "label": "has",
    "to": 176
  }, {
    "from": 429,
    "label": "has",
    "to": 153
  }, {
    "from": 429,
    "label": "has",
    "to": 161
  }, {
    "from": 429,
    "label": "has",
    "to": 430
  }, {
    "from": 431,
    "label": "has",
    "to": 182
  }, {
    "from": 431,
    "label": "has",
    "to": 46
  }, {
    "from": 431,
    "label": "has",
    "to": 183
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 431,
    "label": "has",
    "to": 185
  }, {
    "from": 431,
    "label": "has",
    "to": 74
  }, {
    "from": 431,
    "label": "has",
    "to": 432
  }, {
    "from": 433,
    "label": "has",
    "to": 76
  }, {
    "from": 433,
    "label": "has",
    "to": 77
  }, {
    "from": 433,
    "label": "has",
    "to": 187
  }, {
    "from": 433,
    "label": "has",
    "to": 78
  }, {
    "from": 433,
    "label": "has",
    "to": 79
  }, {
    "from": 433,
    "label": "has",
    "to": 188
  }, {
    "from": 433,
    "label": "has",
    "to": 189
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 433,
    "label": "has",
    "to": 434
  }, {
    "from": 435,
    "label": "has",
    "to": 192
  }, {
    "from": 435,
    "label": "has",
    "to": 193
  }, {
    "from": 435,
    "label": "has",
    "to": 194
  }, {
    "from": 435,
    "label": "has",
    "to": 195
  }, {
    "from": 435,
    "label": "has",
    "to": 196
  }, {
    "from": 435,
    "label": "has",
    "to": 197
  }, {
    "from": 197,
    "label": "has",
    "to": 198
  }, {
    "from": 197,
    "label": "has",
    "to": 199
  }, {
    "from": 435,
    "label": "has",
    "to": 200
  }, {
    "from": 435,
    "label": "has",
    "to": 436
  }, {
    "from": 437,
    "label": "has",
    "to": 192
  }, {
    "from": 437,
    "label": "has",
    "to": 195
  }, {
    "from": 437,
    "label": "has",
    "to": 196
  }, {
    "from": 437,
    "label": "has",
    "to": 202
  }, {
    "from": 202,
    "label": "has",
    "to": 203
  }, {
    "from": 202,
    "label": "has",
    "to": 204
  }, {
    "from": 202,
    "label": "has",
    "to": 205
  }, {
    "from": 202,
    "label": "has",
    "to": 199
  }, {
    "from": 437,
    "label": "has",
    "to": 200
  }, {
    "from": 437,
    "label": "has",
    "to": 438
  }, {
    "from": 439,
    "label": "has",
    "to": 192
  }, {
    "from": 439,
    "label": "has",
    "to": 195
  }, {
    "from": 439,
    "label": "has",
    "to": 196
  }, {
    "from": 439,
    "label": "has",
    "to": 207
  }, {
    "from": 207,
    "label": "has",
    "to": 205
  }, {
    "from": 207,
    "label": "has",
    "to": 199
  }, {
    "from": 439,
    "label": "has",
    "to": 200
  }, {
    "from": 439,
    "label": "has",
    "to": 440
  }, {
    "from": 441,
    "label": "has",
    "to": 192
  }, {
    "from": 441,
    "label": "has",
    "to": 195
  }, {
    "from": 441,
    "label": "has",
    "to": 196
  }, {
    "from": 441,
    "label": "has",
    "to": 209
  }, {
    "from": 209,
    "label": "has",
    "to": 205
  }, {
    "from": 209,
    "label": "has",
    "to": 199
  }, {
    "from": 441,
    "label": "has",
    "to": 200
  }, {
    "from": 441,
    "label": "has",
    "to": 442
  }, {
    "from": 443,
    "label": "has",
    "to": 211
  }, {
    "from": 443,
    "label": "has",
    "to": 212
  }, {
    "from": 443,
    "label": "has",
    "to": 196
  }, {
    "from": 443,
    "label": "has",
    "to": 202
  }, {
    "from": 202,
    "label": "has",
    "to": 203
  }, {
    "from": 202,
    "label": "has",
    "to": 204
  }, {
    "from": 202,
    "label": "has",
    "to": 205
  }, {
    "from": 202,
    "label": "has",
    "to": 199
  }, {
    "from": 443,
    "label": "has",
    "to": 200
  }, {
    "from": 443,
    "label": "has",
    "to": 444
  }, {
    "from": 445,
    "label": "has",
    "to": 192
  }, {
    "from": 445,
    "label": "has",
    "to": 193
  }, {
    "from": 445,
    "label": "has",
    "to": 194
  }, {
    "from": 445,
    "label": "has",
    "to": 195
  }, {
    "from": 445,
    "label": "has",
    "to": 196
  }, {
    "from": 445,
    "label": "has",
    "to": 214
  }, {
    "from": 214,
    "label": "has",
    "to": 205
  }, {
    "from": 214,
    "label": "has",
    "to": 199
  }, {
    "from": 445,
    "label": "has",
    "to": 200
  }, {
    "from": 445,
    "label": "has",
    "to": 446
  }, {
    "from": 447,
    "label": "has",
    "to": 216
  }, {
    "from": 447,
    "label": "has",
    "to": 193
  }, {
    "from": 447,
    "label": "has",
    "to": 194
  }, {
    "from": 447,
    "label": "has",
    "to": 195
  }, {
    "from": 447,
    "label": "has",
    "to": 196
  }, {
    "from": 447,
    "label": "has",
    "to": 217
  }, {
    "from": 217,
    "label": "has",
    "to": 205
  }, {
    "from": 217,
    "label": "has",
    "to": 199
  }, {
    "from": 447,
    "label": "has",
    "to": 200
  }, {
    "from": 447,
    "label": "has",
    "to": 448
  }, {
    "from": 449,
    "label": "has",
    "to": 219
  }, {
    "from": 449,
    "label": "has",
    "to": 196
  }, {
    "from": 449,
    "label": "has",
    "to": 220
  }, {
    "from": 220,
    "label": "has",
    "to": 205
  }, {
    "from": 220,
    "label": "has",
    "to": 199
  }, {
    "from": 449,
    "label": "has",
    "to": 200
  }, {
    "from": 449,
    "label": "has",
    "to": 450
  }, {
    "from": 451,
    "label": "has",
    "to": 196
  }, {
    "from": 451,
    "label": "has",
    "to": 222
  }, {
    "from": 222,
    "label": "has",
    "to": 199
  }, {
    "from": 222,
    "label": "has",
    "to": 3
  }, {
    "from": 451,
    "label": "has",
    "to": 223
  }, {
    "from": 451,
    "label": "has",
    "to": 452
  }, {
    "from": 453,
    "label": "has",
    "to": 182
  }, {
    "from": 453,
    "label": "has",
    "to": 46
  }, {
    "from": 453,
    "label": "has",
    "to": 183
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 453,
    "label": "has",
    "to": 227
  }, {
    "from": 453,
    "label": "has",
    "to": 228
  }, {
    "from": 453,
    "label": "has",
    "to": 185
  }, {
    "from": 453,
    "label": "has",
    "to": 74
  }, {
    "from": 453,
    "label": "has",
    "to": 454
  }, {
    "from": 455,
    "label": "has",
    "to": 76
  }, {
    "from": 455,
    "label": "has",
    "to": 77
  }, {
    "from": 455,
    "label": "has",
    "to": 230
  }, {
    "from": 455,
    "label": "has",
    "to": 78
  }, {
    "from": 455,
    "label": "has",
    "to": 79
  }, {
    "from": 455,
    "label": "has",
    "to": 188
  }, {
    "from": 455,
    "label": "has",
    "to": 231
  }, {
    "from": 455,
    "label": "has",
    "to": 232
  }, {
    "from": 455,
    "label": "has",
    "to": 233
  }, {
    "from": 233,
    "label": "has",
    "to": 190
  }, {
    "from": 455,
    "label": "has",
    "to": 456
  }, {
    "from": 457,
    "label": "has",
    "to": 192
  }, {
    "from": 457,
    "label": "has",
    "to": 195
  }, {
    "from": 457,
    "label": "has",
    "to": 235
  }, {
    "from": 457,
    "label": "has",
    "to": 236
  }, {
    "from": 457,
    "label": "has",
    "to": 196
  }, {
    "from": 457,
    "label": "has",
    "to": 237
  }, {
    "from": 237,
    "label": "has",
    "to": 205
  }, {
    "from": 237,
    "label": "has",
    "to": 199
  }, {
    "from": 457,
    "label": "has",
    "to": 200
  }, {
    "from": 457,
    "label": "has",
    "to": 458
  }, {
    "from": 459,
    "label": "has",
    "to": 239
  }, {
    "from": 459,
    "label": "has",
    "to": 240
  }, {
    "from": 459,
    "label": "has",
    "to": 241
  }, {
    "from": 241,
    "label": "has",
    "to": 242
  }, {
    "from": 241,
    "label": "has",
    "to": 3
  }, {
    "from": 459,
    "label": "has",
    "to": 460
  }, {
    "from": 461,
    "label": "has",
    "to": 239
  }, {
    "from": 461,
    "label": "has",
    "to": 240
  }, {
    "from": 461,
    "label": "has",
    "to": 244
  }, {
    "from": 244,
    "label": "has",
    "to": 245
  }, {
    "from": 244,
    "label": "has",
    "to": 3
  }, {
    "from": 461,
    "label": "has",
    "to": 462
  }, {
    "from": 463,
    "label": "has",
    "to": 239
  }, {
    "from": 463,
    "label": "has",
    "to": 240
  }, {
    "from": 463,
    "label": "has",
    "to": 247
  }, {
    "from": 247,
    "label": "has",
    "to": 245
  }, {
    "from": 247,
    "label": "has",
    "to": 3
  }, {
    "from": 463,
    "label": "has",
    "to": 464
  }, {
    "from": 465,
    "label": "has",
    "to": 192
  }, {
    "from": 465,
    "label": "has",
    "to": 193
  }, {
    "from": 465,
    "label": "has",
    "to": 194
  }, {
    "from": 465,
    "label": "has",
    "to": 195
  }, {
    "from": 465,
    "label": "has",
    "to": 249
  }, {
    "from": 465,
    "label": "has",
    "to": 250
  }, {
    "from": 465,
    "label": "has",
    "to": 235
  }, {
    "from": 465,
    "label": "has",
    "to": 251
  }, {
    "from": 465,
    "label": "has",
    "to": 252
  }, {
    "from": 465,
    "label": "has",
    "to": 236
  }, {
    "from": 465,
    "label": "has",
    "to": 253
  }, {
    "from": 465,
    "label": "has",
    "to": 254
  }, {
    "from": 465,
    "label": "has",
    "to": 196
  }, {
    "from": 465,
    "label": "has",
    "to": 255
  }, {
    "from": 255,
    "label": "has",
    "to": 205
  }, {
    "from": 255,
    "label": "has",
    "to": 199
  }, {
    "from": 465,
    "label": "has",
    "to": 200
  }, {
    "from": 465,
    "label": "has",
    "to": 466
  }, {
    "from": 467,
    "label": "has",
    "to": 192
  }, {
    "from": 467,
    "label": "has",
    "to": 195
  }, {
    "from": 467,
    "label": "has",
    "to": 235
  }, {
    "from": 467,
    "label": "has",
    "to": 236
  }, {
    "from": 467,
    "label": "has",
    "to": 196
  }, {
    "from": 467,
    "label": "has",
    "to": 257
  }, {
    "from": 257,
    "label": "has",
    "to": 205
  }, {
    "from": 257,
    "label": "has",
    "to": 199
  }, {
    "from": 467,
    "label": "has",
    "to": 200
  }, {
    "from": 467,
    "label": "has",
    "to": 468
  }, {
    "from": 469,
    "label": "has",
    "to": 219
  }, {
    "from": 469,
    "label": "has",
    "to": 196
  }, {
    "from": 469,
    "label": "has",
    "to": 259
  }, {
    "from": 259,
    "label": "has",
    "to": 260
  }, {
    "from": 259,
    "label": "has",
    "to": 199
  }, {
    "from": 469,
    "label": "has",
    "to": 200
  }, {
    "from": 469,
    "label": "has",
    "to": 470
  }, {
    "from": 471,
    "label": "has",
    "to": 196
  }, {
    "from": 471,
    "label": "has",
    "to": 262
  }, {
    "from": 262,
    "label": "has",
    "to": 263
  }, {
    "from": 263,
    "label": "has",
    "to": 264
  }, {
    "from": 262,
    "label": "has",
    "to": 3
  }, {
    "from": 262,
    "label": "has",
    "to": 265
  }, {
    "from": 471,
    "label": "has",
    "to": 223
  }, {
    "from": 471,
    "label": "has",
    "to": 472
  }, {
    "from": 473,
    "label": "has",
    "to": 196
  }, {
    "from": 473,
    "label": "has",
    "to": 267
  }, {
    "from": 267,
    "label": "has",
    "to": 263
  }, {
    "from": 263,
    "label": "has",
    "to": 264
  }, {
    "from": 267,
    "label": "has",
    "to": 3
  }, {
    "from": 267,
    "label": "has",
    "to": 265
  }, {
    "from": 473,
    "label": "has",
    "to": 223
  }, {
    "from": 473,
    "label": "has",
    "to": 474
  }, {
    "from": 475,
    "label": "has",
    "to": 269
  }, {
    "from": 475,
    "label": "has",
    "to": 196
  }, {
    "from": 475,
    "label": "has",
    "to": 270
  }, {
    "from": 270,
    "label": "has",
    "to": 205
  }, {
    "from": 270,
    "label": "has",
    "to": 199
  }, {
    "from": 475,
    "label": "has",
    "to": 200
  }, {
    "from": 475,
    "label": "has",
    "to": 476
  }, {
    "from": 477,
    "label": "has",
    "to": 272
  }, {
    "from": 477,
    "label": "has",
    "to": 196
  }, {
    "from": 477,
    "label": "has",
    "to": 273
  }, {
    "from": 273,
    "label": "has",
    "to": 205
  }, {
    "from": 273,
    "label": "has",
    "to": 199
  }, {
    "from": 477,
    "label": "has",
    "to": 200
  }, {
    "from": 477,
    "label": "has",
    "to": 478
  }, {
    "from": 479,
    "label": "has",
    "to": 275
  }, {
    "from": 479,
    "label": "has",
    "to": 276
  }, {
    "from": 479,
    "label": "has",
    "to": 277
  }, {
    "from": 479,
    "label": "has",
    "to": 278
  }, {
    "from": 479,
    "label": "has",
    "to": 279
  }, {
    "from": 479,
    "label": "has",
    "to": 280
  }, {
    "from": 280,
    "label": "has",
    "to": 281
  }, {
    "from": 280,
    "label": "has",
    "to": 282
  }, {
    "from": 280,
    "label": "has",
    "to": 283
  }, {
    "from": 280,
    "label": "has",
    "to": 284
  }, {
    "from": 280,
    "label": "has",
    "to": 285
  }, {
    "from": 280,
    "label": "has",
    "to": 286
  }, {
    "from": 280,
    "label": "has",
    "to": 287
  }, {
    "from": 280,
    "label": "has",
    "to": 288
  }, {
    "from": 280,
    "label": "has",
    "to": 289
  }, {
    "from": 280,
    "label": "has",
    "to": 290
  }, {
    "from": 280,
    "label": "has",
    "to": 291
  }, {
    "from": 280,
    "label": "has",
    "to": 292
  }, {
    "from": 280,
    "label": "has",
    "to": 293
  }, {
    "from": 280,
    "label": "has",
    "to": 294
  }, {
    "from": 280,
    "label": "has",
    "to": 295
  }, {
    "from": 280,
    "label": "has",
    "to": 296
  }, {
    "from": 280,
    "label": "has",
    "to": 297
  }, {
    "from": 280,
    "label": "has",
    "to": 298
  }, {
    "from": 280,
    "label": "has",
    "to": 299
  }, {
    "from": 280,
    "label": "has",
    "to": 300
  }, {
    "from": 280,
    "label": "has",
    "to": 301
  }, {
    "from": 280,
    "label": "has",
    "to": 302
  }, {
    "from": 479,
    "label": "has",
    "to": 303
  }, {
    "from": 479,
    "label": "has",
    "to": 480
  }, {
    "from": 481,
    "label": "has",
    "to": 275
  }, {
    "from": 481,
    "label": "has",
    "to": 276
  }, {
    "from": 481,
    "label": "has",
    "to": 277
  }, {
    "from": 481,
    "label": "has",
    "to": 278
  }, {
    "from": 481,
    "label": "has",
    "to": 279
  }, {
    "from": 481,
    "label": "has",
    "to": 305
  }, {
    "from": 305,
    "label": "has",
    "to": 281
  }, {
    "from": 305,
    "label": "has",
    "to": 306
  }, {
    "from": 305,
    "label": "has",
    "to": 283
  }, {
    "from": 305,
    "label": "has",
    "to": 284
  }, {
    "from": 305,
    "label": "has",
    "to": 285
  }, {
    "from": 305,
    "label": "has",
    "to": 286
  }, {
    "from": 305,
    "label": "has",
    "to": 287
  }, {
    "from": 305,
    "label": "has",
    "to": 288
  }, {
    "from": 305,
    "label": "has",
    "to": 289
  }, {
    "from": 305,
    "label": "has",
    "to": 290
  }, {
    "from": 305,
    "label": "has",
    "to": 291
  }, {
    "from": 305,
    "label": "has",
    "to": 292
  }, {
    "from": 305,
    "label": "has",
    "to": 293
  }, {
    "from": 305,
    "label": "has",
    "to": 294
  }, {
    "from": 305,
    "label": "has",
    "to": 295
  }, {
    "from": 305,
    "label": "has",
    "to": 296
  }, {
    "from": 305,
    "label": "has",
    "to": 297
  }, {
    "from": 305,
    "label": "has",
    "to": 298
  }, {
    "from": 305,
    "label": "has",
    "to": 299
  }, {
    "from": 305,
    "label": "has",
    "to": 300
  }, {
    "from": 305,
    "label": "has",
    "to": 301
  }, {
    "from": 305,
    "label": "has",
    "to": 302
  }, {
    "from": 481,
    "label": "has",
    "to": 303
  }, {
    "from": 481,
    "label": "has",
    "to": 482
  }, {
    "from": 483,
    "label": "has",
    "to": 182
  }, {
    "from": 483,
    "label": "has",
    "to": 46
  }, {
    "from": 483,
    "label": "has",
    "to": 183
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 483,
    "label": "has",
    "to": 74
  }, {
    "from": 483,
    "label": "has",
    "to": 484
  }, {
    "from": 485,
    "label": "has",
    "to": 76
  }, {
    "from": 485,
    "label": "has",
    "to": 77
  }, {
    "from": 485,
    "label": "has",
    "to": 311
  }, {
    "from": 485,
    "label": "has",
    "to": 78
  }, {
    "from": 485,
    "label": "has",
    "to": 79
  }, {
    "from": 485,
    "label": "has",
    "to": 189
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 485,
    "label": "has",
    "to": 486
  }, {
    "from": 487,
    "label": "has",
    "to": 275
  }, {
    "from": 487,
    "label": "has",
    "to": 196
  }, {
    "from": 487,
    "label": "has",
    "to": 313
  }, {
    "from": 487,
    "label": "has",
    "to": 314
  }, {
    "from": 487,
    "label": "has",
    "to": 315
  }, {
    "from": 315,
    "label": "has",
    "to": 306
  }, {
    "from": 315,
    "label": "has",
    "to": 199
  }, {
    "from": 487,
    "label": "has",
    "to": 316
  }, {
    "from": 487,
    "label": "has",
    "to": 488
  }, {
    "from": 489,
    "label": "has",
    "to": 275
  }, {
    "from": 489,
    "label": "has",
    "to": 196
  }, {
    "from": 489,
    "label": "has",
    "to": 313
  }, {
    "from": 489,
    "label": "has",
    "to": 314
  }, {
    "from": 489,
    "label": "has",
    "to": 318
  }, {
    "from": 318,
    "label": "has",
    "to": 306
  }, {
    "from": 318,
    "label": "has",
    "to": 199
  }, {
    "from": 489,
    "label": "has",
    "to": 316
  }, {
    "from": 489,
    "label": "has",
    "to": 490
  }, {
    "from": 491,
    "label": "has",
    "to": 275
  }, {
    "from": 491,
    "label": "has",
    "to": 196
  }, {
    "from": 491,
    "label": "has",
    "to": 313
  }, {
    "from": 491,
    "label": "has",
    "to": 320
  }, {
    "from": 491,
    "label": "has",
    "to": 320
  }, {
    "from": 491,
    "label": "has",
    "to": 321
  }, {
    "from": 321,
    "label": "has",
    "to": 306
  }, {
    "from": 321,
    "label": "has",
    "to": 199
  }, {
    "from": 491,
    "label": "has",
    "to": 316
  }, {
    "from": 491,
    "label": "has",
    "to": 492
  }, {
    "from": 493,
    "label": "has",
    "to": 275
  }, {
    "from": 493,
    "label": "has",
    "to": 196
  }, {
    "from": 493,
    "label": "has",
    "to": 320
  }, {
    "from": 493,
    "label": "has",
    "to": 320
  }, {
    "from": 493,
    "label": "has",
    "to": 320
  }, {
    "from": 493,
    "label": "has",
    "to": 323
  }, {
    "from": 323,
    "label": "has",
    "to": 306
  }, {
    "from": 323,
    "label": "has",
    "to": 199
  }, {
    "from": 493,
    "label": "has",
    "to": 316
  }, {
    "from": 493,
    "label": "has",
    "to": 494
  }, {
    "from": 495,
    "label": "has",
    "to": 275
  }, {
    "from": 495,
    "label": "has",
    "to": 196
  }, {
    "from": 495,
    "label": "has",
    "to": 313
  }, {
    "from": 495,
    "label": "has",
    "to": 320
  }, {
    "from": 495,
    "label": "has",
    "to": 320
  }, {
    "from": 495,
    "label": "has",
    "to": 325
  }, {
    "from": 325,
    "label": "has",
    "to": 306
  }, {
    "from": 325,
    "label": "has",
    "to": 199
  }, {
    "from": 495,
    "label": "has",
    "to": 316
  }, {
    "from": 495,
    "label": "has",
    "to": 496
  }, {
    "from": 497,
    "label": "has",
    "to": 182
  }, {
    "from": 497,
    "label": "has",
    "to": 46
  }, {
    "from": 497,
    "label": "has",
    "to": 183
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 497,
    "label": "has",
    "to": 74
  }, {
    "from": 497,
    "label": "has",
    "to": 498
  }, {
    "from": 499,
    "label": "has",
    "to": 76
  }, {
    "from": 499,
    "label": "has",
    "to": 77
  }, {
    "from": 499,
    "label": "has",
    "to": 329
  }, {
    "from": 499,
    "label": "has",
    "to": 78
  }, {
    "from": 499,
    "label": "has",
    "to": 79
  }, {
    "from": 499,
    "label": "has",
    "to": 189
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 499,
    "label": "has",
    "to": 500
  }, {
    "from": 501,
    "label": "has",
    "to": 331
  }, {
    "from": 501,
    "label": "has",
    "to": 332
  }, {
    "from": 332,
    "label": "has",
    "to": 333
  }, {
    "from": 332,
    "label": "has",
    "to": 334
  }, {
    "from": 334,
    "label": "has",
    "to": 335
  }, {
    "from": 334,
    "label": "has",
    "to": 336
  }, {
    "from": 501,
    "label": "has",
    "to": 337
  }, {
    "from": 501,
    "label": "has",
    "to": 338
  }, {
    "from": 501,
    "label": "has",
    "to": 502
  }, {
    "from": 503,
    "label": "has",
    "to": 340
  }, {
    "from": 503,
    "label": "has",
    "to": 341
  }, {
    "from": 341,
    "label": "has",
    "to": 336
  }, {
    "from": 503,
    "label": "has",
    "to": 337
  }, {
    "from": 503,
    "label": "has",
    "to": 338
  }, {
    "from": 503,
    "label": "has",
    "to": 504
  }, {
    "from": 505,
    "label": "has",
    "to": 343
  }, {
    "from": 505,
    "label": "has",
    "to": 344
  }, {
    "from": 344,
    "label": "has",
    "to": 336
  }, {
    "from": 505,
    "label": "has",
    "to": 337
  }, {
    "from": 505,
    "label": "has",
    "to": 338
  }, {
    "from": 505,
    "label": "has",
    "to": 506
  }, {
    "from": 507,
    "label": "has",
    "to": 346
  }, {
    "from": 507,
    "label": "has",
    "to": 347
  }, {
    "from": 347,
    "label": "has",
    "to": 336
  }, {
    "from": 507,
    "label": "has",
    "to": 337
  }, {
    "from": 507,
    "label": "has",
    "to": 338
  }, {
    "from": 507,
    "label": "has",
    "to": 508
  }, {
    "from": 509,
    "label": "has",
    "to": 349
  }, {
    "from": 509,
    "label": "has",
    "to": 350
  }, {
    "from": 350,
    "label": "has",
    "to": 336
  }, {
    "from": 509,
    "label": "has",
    "to": 337
  }, {
    "from": 509,
    "label": "has",
    "to": 338
  }, {
    "from": 509,
    "label": "has",
    "to": 510
  }, {
    "from": 511,
    "label": "has",
    "to": 340
  }, {
    "from": 511,
    "label": "has",
    "to": 352
  }, {
    "from": 352,
    "label": "has",
    "to": 336
  }, {
    "from": 511,
    "label": "has",
    "to": 337
  }, {
    "from": 511,
    "label": "has",
    "to": 338
  }, {
    "from": 511,
    "label": "has",
    "to": 512
  }, {
    "from": 513,
    "label": "has",
    "to": 46
  }, {
    "from": 513,
    "label": "has",
    "to": 72
  }, {
    "from": 513,
    "label": "has",
    "to": 73
  }, {
    "from": 513,
    "label": "has",
    "to": 111
  }, {
    "from": 513,
    "label": "has",
    "to": 112
  }, {
    "from": 513,
    "label": "has",
    "to": 74
  }, {
    "from": 513,
    "label": "has",
    "to": 113
  }, {
    "from": 513,
    "label": "has",
    "to": 114
  }, {
    "from": 513,
    "label": "has",
    "to": 115
  }, {
    "from": 513,
    "label": "has",
    "to": 116
  }, {
    "from": 513,
    "label": "has",
    "to": 118
  }, {
    "from": 513,
    "label": "has",
    "to": 119
  }, {
    "from": 513,
    "label": "has",
    "to": 120
  }, {
    "from": 513,
    "label": "has",
    "to": 121
  }, {
    "from": 513,
    "label": "has",
    "to": 122
  }, {
    "from": 513,
    "label": "has",
    "to": 514
  }, {
    "from": 515,
    "label": "has",
    "to": 76
  }, {
    "from": 515,
    "label": "has",
    "to": 124
  }, {
    "from": 515,
    "label": "has",
    "to": 125
  }, {
    "from": 515,
    "label": "has",
    "to": 78
  }, {
    "from": 515,
    "label": "has",
    "to": 79
  }, {
    "from": 515,
    "label": "has",
    "to": 126
  }, {
    "from": 515,
    "label": "has",
    "to": 127
  }, {
    "from": 515,
    "label": "has",
    "to": 128
  }, {
    "from": 515,
    "label": "has",
    "to": 129
  }, {
    "from": 515,
    "label": "has",
    "to": 130
  }, {
    "from": 515,
    "label": "has",
    "to": 131
  }, {
    "from": 515,
    "label": "has",
    "to": 516
  }, {
    "from": 517,
    "label": "has",
    "to": 133
  }, {
    "from": 517,
    "label": "has",
    "to": 357
  }, {
    "from": 517,
    "label": "has",
    "to": 358
  }, {
    "from": 517,
    "label": "has",
    "to": 359
  }, {
    "from": 517,
    "label": "has",
    "to": 357
  }, {
    "from": 517,
    "label": "has",
    "to": 358
  }, {
    "from": 517,
    "label": "has",
    "to": 135
  }, {
    "from": 517,
    "label": "has",
    "to": 136
  }, {
    "from": 517,
    "label": "has",
    "to": 518
  }, {
    "from": 519,
    "label": "has",
    "to": 169
  }, {
    "from": 519,
    "label": "has",
    "to": 357
  }, {
    "from": 519,
    "label": "has",
    "to": 161
  }, {
    "from": 519,
    "label": "has",
    "to": 359
  }, {
    "from": 519,
    "label": "has",
    "to": 357
  }, {
    "from": 519,
    "label": "has",
    "to": 161
  }, {
    "from": 519,
    "label": "has",
    "to": 520
  }, {
    "from": 521,
    "label": "has",
    "to": 362
  }, {
    "from": 521,
    "label": "has",
    "to": 174
  }, {
    "from": 521,
    "label": "has",
    "to": 363
  }, {
    "from": 521,
    "label": "has",
    "to": 174
  }, {
    "from": 521,
    "label": "has",
    "to": 522
  }, {
    "from": 523,
    "label": "has",
    "to": 365
  }, {
    "from": 523,
    "label": "has",
    "to": 174
  }, {
    "from": 523,
    "label": "has",
    "to": 363
  }, {
    "from": 523,
    "label": "has",
    "to": 174
  }, {
    "from": 523,
    "label": "has",
    "to": 524
  }, {
    "from": 525,
    "label": "has",
    "to": 4
  }, {
    "from": 526,
    "label": "has",
    "to": 3
  }, {
    "from": 526,
    "label": "has",
    "to": 527
  }, {
    "from": 528,
    "label": "has",
    "to": 203
  }, {
    "from": 528,
    "label": "has",
    "to": 204
  }, {
    "from": 528,
    "label": "has",
    "to": 205
  }, {
    "from": 528,
    "label": "has",
    "to": 199
  }, {
    "from": 528,
    "label": "has",
    "to": 529
  }, {
    "from": 530,
    "label": "has",
    "to": 205
  }, {
    "from": 530,
    "label": "has",
    "to": 199
  }, {
    "from": 530,
    "label": "has",
    "to": 531
  }, {
    "from": 532,
    "label": "has",
    "to": 203
  }, {
    "from": 532,
    "label": "has",
    "to": 204
  }, {
    "from": 532,
    "label": "has",
    "to": 205
  }, {
    "from": 532,
    "label": "has",
    "to": 199
  }, {
    "from": 532,
    "label": "has",
    "to": 533
  }, {
    "from": 534,
    "label": "has",
    "to": 205
  }, {
    "from": 534,
    "label": "has",
    "to": 199
  }, {
    "from": 534,
    "label": "has",
    "to": 535
  }, {
    "from": 536,
    "label": "has",
    "to": 205
  }, {
    "from": 536,
    "label": "has",
    "to": 199
  }, {
    "from": 536,
    "label": "has",
    "to": 537
  }, {
    "from": 538,
    "label": "has",
    "to": 205
  }, {
    "from": 538,
    "label": "has",
    "to": 199
  }, {
    "from": 538,
    "label": "has",
    "to": 539
  }, {
    "from": 540,
    "label": "has",
    "to": 199
  }, {
    "from": 540,
    "label": "has",
    "to": 3
  }, {
    "from": 540,
    "label": "has",
    "to": 541
  }, {
    "from": 542,
    "label": "has",
    "to": 205
  }, {
    "from": 542,
    "label": "has",
    "to": 199
  }, {
    "from": 542,
    "label": "has",
    "to": 543
  }, {
    "from": 544,
    "label": "has",
    "to": 242
  }, {
    "from": 544,
    "label": "has",
    "to": 3
  }, {
    "from": 544,
    "label": "has",
    "to": 545
  }, {
    "from": 546,
    "label": "has",
    "to": 245
  }, {
    "from": 546,
    "label": "has",
    "to": 3
  }, {
    "from": 546,
    "label": "has",
    "to": 547
  }, {
    "from": 548,
    "label": "has",
    "to": 245
  }, {
    "from": 548,
    "label": "has",
    "to": 3
  }, {
    "from": 548,
    "label": "has",
    "to": 549
  }, {
    "from": 550,
    "label": "has",
    "to": 205
  }, {
    "from": 550,
    "label": "has",
    "to": 199
  }, {
    "from": 550,
    "label": "has",
    "to": 551
  }, {
    "from": 552,
    "label": "has",
    "to": 205
  }, {
    "from": 552,
    "label": "has",
    "to": 199
  }, {
    "from": 552,
    "label": "has",
    "to": 553
  }, {
    "from": 554,
    "label": "has",
    "to": 260
  }, {
    "from": 554,
    "label": "has",
    "to": 199
  }, {
    "from": 554,
    "label": "has",
    "to": 555
  }, {
    "from": 556,
    "label": "has",
    "to": 263
  }, {
    "from": 263,
    "label": "has",
    "to": 264
  }, {
    "from": 556,
    "label": "has",
    "to": 3
  }, {
    "from": 556,
    "label": "has",
    "to": 265
  }, {
    "from": 556,
    "label": "has",
    "to": 557
  }, {
    "from": 558,
    "label": "has",
    "to": 263
  }, {
    "from": 263,
    "label": "has",
    "to": 264
  }, {
    "from": 558,
    "label": "has",
    "to": 3
  }, {
    "from": 558,
    "label": "has",
    "to": 265
  }, {
    "from": 558,
    "label": "has",
    "to": 559
  }, {
    "from": 560,
    "label": "has",
    "to": 205
  }, {
    "from": 560,
    "label": "has",
    "to": 199
  }, {
    "from": 560,
    "label": "has",
    "to": 561
  }, {
    "from": 562,
    "label": "has",
    "to": 205
  }, {
    "from": 562,
    "label": "has",
    "to": 199
  }, {
    "from": 562,
    "label": "has",
    "to": 563
  }, {
    "from": 564,
    "label": "has",
    "to": 281
  }, {
    "from": 564,
    "label": "has",
    "to": 282
  }, {
    "from": 564,
    "label": "has",
    "to": 283
  }, {
    "from": 564,
    "label": "has",
    "to": 284
  }, {
    "from": 564,
    "label": "has",
    "to": 285
  }, {
    "from": 564,
    "label": "has",
    "to": 286
  }, {
    "from": 564,
    "label": "has",
    "to": 287
  }, {
    "from": 564,
    "label": "has",
    "to": 288
  }, {
    "from": 564,
    "label": "has",
    "to": 289
  }, {
    "from": 564,
    "label": "has",
    "to": 290
  }, {
    "from": 564,
    "label": "has",
    "to": 291
  }, {
    "from": 564,
    "label": "has",
    "to": 292
  }, {
    "from": 564,
    "label": "has",
    "to": 293
  }, {
    "from": 564,
    "label": "has",
    "to": 294
  }, {
    "from": 564,
    "label": "has",
    "to": 295
  }, {
    "from": 564,
    "label": "has",
    "to": 296
  }, {
    "from": 564,
    "label": "has",
    "to": 297
  }, {
    "from": 564,
    "label": "has",
    "to": 298
  }, {
    "from": 564,
    "label": "has",
    "to": 299
  }, {
    "from": 564,
    "label": "has",
    "to": 300
  }, {
    "from": 564,
    "label": "has",
    "to": 301
  }, {
    "from": 564,
    "label": "has",
    "to": 302
  }, {
    "from": 564,
    "label": "has",
    "to": 565
  }, {
    "from": 566,
    "label": "has",
    "to": 306
  }, {
    "from": 566,
    "label": "has",
    "to": 199
  }, {
    "from": 566,
    "label": "has",
    "to": 567
  }, {
    "from": 568,
    "label": "has",
    "to": 306
  }, {
    "from": 568,
    "label": "has",
    "to": 199
  }, {
    "from": 568,
    "label": "has",
    "to": 569
  }, {
    "from": 570,
    "label": "has",
    "to": 306
  }, {
    "from": 570,
    "label": "has",
    "to": 199
  }, {
    "from": 570,
    "label": "has",
    "to": 571
  }, {
    "from": 572,
    "label": "has",
    "to": 306
  }, {
    "from": 572,
    "label": "has",
    "to": 199
  }, {
    "from": 572,
    "label": "has",
    "to": 573
  }, {
    "from": 574,
    "label": "has",
    "to": 306
  }, {
    "from": 574,
    "label": "has",
    "to": 199
  }, {
    "from": 574,
    "label": "has",
    "to": 575
  }, {
    "from": 576,
    "label": "has",
    "to": 333
  }, {
    "from": 576,
    "label": "has",
    "to": 334
  }, {
    "from": 334,
    "label": "has",
    "to": 335
  }, {
    "from": 334,
    "label": "has",
    "to": 336
  }, {
    "from": 576,
    "label": "has",
    "to": 577
  }, {
    "from": 578,
    "label": "has",
    "to": 336
  }, {
    "from": 578,
    "label": "has",
    "to": 579
  }, {
    "from": 580,
    "label": "has",
    "to": 336
  }, {
    "from": 580,
    "label": "has",
    "to": 581
  }, {
    "from": 582,
    "label": "has",
    "to": 336
  }, {
    "from": 582,
    "label": "has",
    "to": 583
  }, {
    "from": 584,
    "label": "has",
    "to": 336
  }, {
    "from": 584,
    "label": "has",
    "to": 585
  }, {
    "from": 586,
    "label": "has",
    "to": 336
  }, {
    "from": 586,
    "label": "has",
    "to": 587
  }, {
    "from": 25,
    "label": "calls",
    "to": 592
  }, {
    "from": 25,
    "label": "calls",
    "to": 592
  }, {
    "from": 25,
    "label": "calls",
    "to": 592
  }, {
    "from": 25,
    "label": "calls",
    "to": 592
  }, {
    "from": 5,
    "label": "calls",
    "to": 631
  }, {
    "from": 7,
    "label": "calls",
    "to": 631
  }, {
    "from": 25,
    "label": "calls",
    "to": 593
  }, {
    "from": 25,
    "label": "calls",
    "to": 593
  }, {
    "from": 25,
    "label": "calls",
    "to": 593
  }, {
    "from": 25,
    "label": "calls",
    "to": 593
  }, {
    "from": 25,
    "label": "calls",
    "to": 593
  }, {
    "from": 25,
    "label": "calls",
    "to": 593
  }, {
    "from": 25,
    "label": "calls",
    "to": 593
  }, {
    "from": 25,
    "label": "calls",
    "to": 593
  }, {
    "from": 25,
    "label": "calls",
    "to": 593
  }, {
    "from": 25,
    "label": "calls",
    "to": 593
  }, {
    "from": 25,
    "label": "calls",
    "to": 593
  }, {
    "from": 25,
    "label": "calls",
    "to": 593
  }, {
    "from": 25,
    "label": "calls",
    "to": 593
  }, {
    "from": 25,
    "label": "calls",
    "to": 593
  }, {
    "from": 25,
    "label": "calls",
    "to": 593
  }, {
    "from": 25,
    "label": "calls",
    "to": 615
  }, {
    "from": 25,
    "label": "calls",
    "to": 615
  }, {
    "from": 25,
    "label": "calls",
    "to": 615
  }, {
    "from": 25,
    "label": "calls",
    "to": 615
  }, {
    "from": 25,
    "label": "calls",
    "to": 615
  }, {
    "from": 25,
    "label": "calls",
    "to": 615
  }, {
    "from": 25,
    "label": "calls",
    "to": 615
  }, {
    "from": 25,
    "label": "calls",
    "to": 615
  }, {
    "from": 25,
    "label": "calls",
    "to": 615
  }, {
    "from": 25,
    "label": "calls",
    "to": 615
  }, {
    "from": 25,
    "label": "calls",
    "to": 615
  }, {
    "from": 25,
    "label": "calls",
    "to": 615
  }, {
    "from": 25,
    "label": "calls",
    "to": 615
  }, {
    "from": 25,
    "label": "calls",
    "to": 615
  }, {
    "from": 25,
    "label": "calls",
    "to": 615
  }, {
    "from": 25,
    "label": "calls",
    "to": 615
  }, {
    "from": 25,
    "label": "calls",
    "to": 615
  }, {
    "from": 25,
    "label": "calls",
    "to": 615
  }, {
    "from": 25,
    "label": "calls",
    "to": 615
  }, {
    "from": 25,
    "label": "calls",
    "to": 615
  }, {
    "from": 25,
    "label": "calls",
    "to": 615
  }, {
    "from": 25,
    "label": "calls",
    "to": 615
  }, {
    "from": 25,
    "label": "calls",
    "to": 615
  }, {
    "from": 25,
    "label": "calls",
    "to": 615
  }, {
    "from": 25,
    "label": "calls",
    "to": 615
  }, {
    "from": 25,
    "label": "calls",
    "to": 615
  }, {
    "from": 25,
    "label": "calls",
    "to": 615
  }, {
    "from": 25,
    "label": "calls",
    "to": 615
  }, {
    "from": 25,
    "label": "calls",
    "to": 615
  }, {
    "from": 25,
    "label": "calls",
    "to": 615
  }, {
    "from": 25,
    "label": "calls",
    "to": 615
  }, {
    "from": 25,
    "label": "calls",
    "to": 615
  }, {
    "from": 25,
    "label": "calls",
    "to": 615
  }, {
    "from": 25,
    "label": "calls",
    "to": 615
  }, {
    "from": 25,
    "label": "calls",
    "to": 615
  }, {
    "from": 25,
    "label": "calls",
    "to": 615
  }, {
    "from": 25,
    "label": "calls",
    "to": 615
  }, {
    "from": 25,
    "label": "calls",
    "to": 615
  }, {
    "from": 25,
    "label": "calls",
    "to": 615
  }, {
    "from": 25,
    "label": "calls",
    "to": 622
  }, {
    "from": 25,
    "label": "calls",
    "to": 622
  }, {
    "from": 25,
    "label": "calls",
    "to": 622
  }, {
    "from": 25,
    "label": "calls",
    "to": 622
  }, {
    "from": 25,
    "label": "calls",
    "to": 622
  }, {
    "from": 25,
    "label": "calls",
    "to": 622
  }, {
    "from": 25,
    "label": "calls",
    "to": 622
  }, {
    "from": 25,
    "label": "calls",
    "to": 622
  }, {
    "from": 25,
    "label": "calls",
    "to": 622
  }, {
    "from": 25,
    "label": "calls",
    "to": 622
  }, {
    "from": 25,
    "label": "calls",
    "to": 622
  }, {
    "from": 25,
    "label": "calls",
    "to": 622
  }, {
    "from": 25,
    "label": "calls",
    "to": 622
  }, {
    "from": 25,
    "label": "calls",
    "to": 622
  }, {
    "from": 25,
    "label": "calls",
    "to": 621
  }, {
    "from": 25,
    "label": "calls",
    "to": 621
  }, {
    "from": 25,
    "label": "calls",
    "to": 621
  }, {
    "from": 25,
    "label": "calls",
    "to": 621
  }, {
    "from": 25,
    "label": "calls",
    "to": 621
  }, {
    "from": 25,
    "label": "calls",
    "to": 621
  }, {
    "from": 25,
    "label": "calls",
    "to": 621
  }, {
    "from": 25,
    "label": "calls",
    "to": 621
  }, {
    "from": 25,
    "label": "calls",
    "to": 621
  }, {
    "from": 25,
    "label": "calls",
    "to": 621
  }, {
    "from": 25,
    "label": "calls",
    "to": 621
  }, {
    "from": 25,
    "label": "calls",
    "to": 621
  }, {
    "from": 25,
    "label": "calls",
    "to": 621
  }, {
    "from": 25,
    "label": "calls",
    "to": 621
  }, {
    "from": 25,
    "label": "calls",
    "to": 621
  }, {
    "from": 25,
    "label": "calls",
    "to": 621
  }, {
    "from": 25,
    "label": "calls",
    "to": 621
  }, {
    "from": 25,
    "label": "calls",
    "to": 621
  }, {
    "from": 25,
    "label": "calls",
    "to": 621
  }, {
    "from": 25,
    "label": "calls",
    "to": 621
  }, {
    "from": 25,
    "label": "calls",
    "to": 621
  }, {
    "from": 25,
    "label": "calls",
    "to": 621
  }, {
    "from": 25,
    "label": "calls",
    "to": 621
  }, {
    "from": 25,
    "label": "calls",
    "to": 621
  }, {
    "from": 25,
    "label": "calls",
    "to": 606
  }, {
    "from": 25,
    "label": "calls",
    "to": 609
  }, {
    "from": 25,
    "label": "calls",
    "to": 607
  }, {
    "from": 25,
    "label": "calls",
    "to": 607
  }, {
    "from": 25,
    "label": "calls",
    "to": 607
  }, {
    "from": 25,
    "label": "calls",
    "to": 607
  }, {
    "from": 25,
    "label": "calls",
    "to": 607
  }, {
    "from": 25,
    "label": "calls",
    "to": 632
  }, {
    "from": 25,
    "label": "calls",
    "to": 632
  }, {
    "from": 25,
    "label": "calls",
    "to": 632
  }, {
    "from": 25,
    "label": "calls",
    "to": 632
  }, {
    "from": 25,
    "label": "calls",
    "to": 632
  }, {
    "from": 25,
    "label": "calls",
    "to": 632
  }, {
    "from": 25,
    "label": "calls",
    "to": 632
  }, {
    "from": 25,
    "label": "calls",
    "to": 632
  }, {
    "from": 25,
    "label": "calls",
    "to": 632
  }, {
    "from": 25,
    "label": "calls",
    "to": 632
  }, {
    "from": 25,
    "label": "calls",
    "to": 632
  }, {
    "from": 25,
    "label": "calls",
    "to": 632
  }, {
    "from": 25,
    "label": "calls",
    "to": 632
  }, {
    "from": 25,
    "label": "calls",
    "to": 632
  }, {
    "from": 25,
    "label": "calls",
    "to": 632
  }, {
    "from": 25,
    "label": "calls",
    "to": 632
  }, {
    "from": 25,
    "label": "calls",
    "to": 632
  }, {
    "from": 25,
    "label": "calls",
    "to": 632
  }, {
    "from": 25,
    "label": "calls",
    "to": 632
  }, {
    "from": 25,
    "label": "calls",
    "to": 632
  }, {
    "from": 25,
    "label": "calls",
    "to": 632
  }, {
    "from": 25,
    "label": "calls",
    "to": 632
  }, {
    "from": 25,
    "label": "calls",
    "to": 632
  }, {
    "from": 25,
    "label": "calls",
    "to": 632
  }, {
    "from": 25,
    "label": "calls",
    "to": 632
  }, {
    "from": 25,
    "label": "calls",
    "to": 632
  }, {
    "from": 25,
    "label": "calls",
    "to": 632
  }, {
    "from": 25,
    "label": "calls",
    "to": 632
  }, {
    "from": 25,
    "label": "calls",
    "to": 632
  }, {
    "from": 25,
    "label": "calls",
    "to": 632
  }, {
    "from": 25,
    "label": "calls",
    "to": 632
  }, {
    "from": 25,
    "label": "calls",
    "to": 632
  }, {
    "from": 25,
    "label": "calls",
    "to": 375
  }, {
    "from": 25,
    "label": "calls",
    "to": 375
  }, {
    "from": 25,
    "label": "calls",
    "to": 375
  }, {
    "from": 25,
    "label": "calls",
    "to": 375
  }, {
    "from": 25,
    "label": "calls",
    "to": 375
  }, {
    "from": 25,
    "label": "calls",
    "to": 375
  }, {
    "from": 25,
    "label": "calls",
    "to": 375
  }, {
    "from": 25,
    "label": "calls",
    "to": 608
  }, {
    "from": 25,
    "label": "calls",
    "to": 608
  }, {
    "from": 25,
    "label": "calls",
    "to": 608
  }, {
    "from": 25,
    "label": "calls",
    "to": 608
  }, {
    "from": 25,
    "label": "calls",
    "to": 608
  }, {
    "from": 25,
    "label": "calls",
    "to": 608
  }, {
    "from": 25,
    "label": "calls",
    "to": 608
  }, {
    "from": 25,
    "label": "calls",
    "to": 608
  }, {
    "from": 25,
    "label": "calls",
    "to": 608
  }, {
    "from": 25,
    "label": "calls",
    "to": 608
  }, {
    "from": 25,
    "label": "calls",
    "to": 608
  }, {
    "from": 25,
    "label": "calls",
    "to": 608
  }, {
    "from": 25,
    "label": "calls",
    "to": 608
  }, {
    "from": 25,
    "label": "calls",
    "to": 608
  }, {
    "from": 25,
    "label": "calls",
    "to": 608
  }, {
    "from": 25,
    "label": "calls",
    "to": 608
  }, {
    "from": 25,
    "label": "calls",
    "to": 608
  }, {
    "from": 25,
    "label": "calls",
    "to": 608
  }, {
    "from": 25,
    "label": "calls",
    "to": 608
  }, {
    "from": 25,
    "label": "calls",
    "to": 608
  }, {
    "from": 25,
    "label": "calls",
    "to": 608
  }, {
    "from": 25,
    "label": "calls",
    "to": 608
  }, {
    "from": 25,
    "label": "calls",
    "to": 608
  }, {
    "from": 25,
    "label": "calls",
    "to": 608
  }, {
    "from": 25,
    "label": "calls",
    "to": 608
  }, {
    "from": 25,
    "label": "calls",
    "to": 608
  }, {
    "from": 25,
    "label": "calls",
    "to": 608
  }, {
    "from": 25,
    "label": "calls",
    "to": 623
  }, {
    "from": 25,
    "label": "calls",
    "to": 623
  }, {
    "from": 25,
    "label": "calls",
    "to": 623
  }, {
    "from": 25,
    "label": "calls",
    "to": 623
  }, {
    "from": 25,
    "label": "calls",
    "to": 601
  }, {
    "from": 25,
    "label": "calls",
    "to": 601
  }, {
    "from": 25,
    "label": "calls",
    "to": 601
  }, {
    "from": 25,
    "label": "calls",
    "to": 601
  }, {
    "from": 25,
    "label": "calls",
    "to": 601
  }, {
    "from": 25,
    "label": "calls",
    "to": 601
  }, {
    "from": 25,
    "label": "calls",
    "to": 601
  }, {
    "from": 25,
    "label": "calls",
    "to": 601
  }, {
    "from": 25,
    "label": "calls",
    "to": 601
  }, {
    "from": 25,
    "label": "calls",
    "to": 601
  }, {
    "from": 21,
    "label": "calls",
    "to": 633
  }, {
    "from": 25,
    "label": "calls",
    "to": 633
  }, {
    "from": 25,
    "label": "calls",
    "to": 633
  }, {
    "from": 25,
    "label": "calls",
    "to": 633
  }, {
    "from": 25,
    "label": "calls",
    "to": 633
  }, {
    "from": 25,
    "label": "calls",
    "to": 633
  }, {
    "from": 25,
    "label": "calls",
    "to": 633
  }, {
    "from": 25,
    "label": "calls",
    "to": 633
  }, {
    "from": 25,
    "label": "calls",
    "to": 633
  }, {
    "from": 25,
    "label": "calls",
    "to": 367
  }, {
    "from": 25,
    "label": "calls",
    "to": 367
  }, {
    "from": 25,
    "label": "calls",
    "to": 367
  }, {
    "from": 25,
    "label": "calls",
    "to": 367
  }, {
    "from": 25,
    "label": "calls",
    "to": 367
  }, {
    "from": 25,
    "label": "calls",
    "to": 367
  }, {
    "from": 25,
    "label": "calls",
    "to": 367
  }, {
    "from": 25,
    "label": "calls",
    "to": 367
  }, {
    "from": 25,
    "label": "calls",
    "to": 367
  }, {
    "from": 25,
    "label": "calls",
    "to": 367
  }, {
    "from": 25,
    "label": "calls",
    "to": 367
  }, {
    "from": 25,
    "label": "calls",
    "to": 589
  }, {
    "from": 25,
    "label": "calls",
    "to": 589
  }, {
    "from": 25,
    "label": "calls",
    "to": 589
  }, {
    "from": 25,
    "label": "calls",
    "to": 589
  }, {
    "from": 25,
    "label": "calls",
    "to": 589
  }, {
    "from": 25,
    "label": "calls",
    "to": 589
  }, {
    "from": 25,
    "label": "calls",
    "to": 589
  }, {
    "from": 25,
    "label": "calls",
    "to": 604
  }, {
    "from": 25,
    "label": "calls",
    "to": 604
  }, {
    "from": 25,
    "label": "calls",
    "to": 604
  }, {
    "from": 21,
    "label": "calls",
    "to": 19
  }, {
    "from": 21,
    "label": "calls",
    "to": 19
  }, {
    "from": 25,
    "label": "calls",
    "to": 19
  }, {
    "from": 25,
    "label": "calls",
    "to": 19
  }, {
    "from": 25,
    "label": "calls",
    "to": 19
  }, {
    "from": 25,
    "label": "calls",
    "to": 19
  }, {
    "from": 25,
    "label": "calls",
    "to": 19
  }, {
    "from": 25,
    "label": "calls",
    "to": 19
  }, {
    "from": 25,
    "label": "calls",
    "to": 19
  }, {
    "from": 25,
    "label": "calls",
    "to": 19
  }, {
    "from": 25,
    "label": "calls",
    "to": 19
  }, {
    "from": 25,
    "label": "calls",
    "to": 19
  }, {
    "from": 25,
    "label": "calls",
    "to": 19
  }, {
    "from": 25,
    "label": "calls",
    "to": 19
  }, {
    "from": 25,
    "label": "calls",
    "to": 19
  }, {
    "from": 25,
    "label": "calls",
    "to": 19
  }, {
    "from": 25,
    "label": "calls",
    "to": 19
  }, {
    "from": 25,
    "label": "calls",
    "to": 19
  }, {
    "from": 25,
    "label": "calls",
    "to": 598
  }, {
    "from": 25,
    "label": "calls",
    "to": 598
  }, {
    "from": 25,
    "label": "calls",
    "to": 598
  }, {
    "from": 25,
    "label": "calls",
    "to": 598
  }, {
    "from": 25,
    "label": "calls",
    "to": 598
  }, {
    "from": 25,
    "label": "calls",
    "to": 598
  }, {
    "from": 10,
    "label": "calls",
    "to": 612
  }, {
    "from": 25,
    "label": "calls",
    "to": 620
  }, {
    "from": 25,
    "label": "calls",
    "to": 611
  }, {
    "from": 25,
    "label": "calls",
    "to": 611
  }, {
    "from": 25,
    "label": "calls",
    "to": 611
  }, {
    "from": 25,
    "label": "calls",
    "to": 611
  }, {
    "from": 25,
    "label": "calls",
    "to": 611
  }, {
    "from": 25,
    "label": "calls",
    "to": 611
  }, {
    "from": 25,
    "label": "calls",
    "to": 611
  }, {
    "from": 25,
    "label": "calls",
    "to": 611
  }, {
    "from": 25,
    "label": "calls",
    "to": 611
  }, {
    "from": 25,
    "label": "calls",
    "to": 611
  }, {
    "from": 25,
    "label": "calls",
    "to": 611
  }, {
    "from": 25,
    "label": "calls",
    "to": 611
  }, {
    "from": 25,
    "label": "calls",
    "to": 611
  }, {
    "from": 25,
    "label": "calls",
    "to": 611
  }, {
    "from": 25,
    "label": "calls",
    "to": 611
  }, {
    "from": 25,
    "label": "calls",
    "to": 611
  }, {
    "from": 25,
    "label": "calls",
    "to": 611
  }, {
    "from": 25,
    "label": "calls",
    "to": 611
  }, {
    "from": 25,
    "label": "calls",
    "to": 611
  }, {
    "from": 25,
    "label": "calls",
    "to": 611
  }, {
    "from": 25,
    "label": "calls",
    "to": 611
  }, {
    "from": 25,
    "label": "calls",
    "to": 611
  }, {
    "from": 25,
    "label": "calls",
    "to": 611
  }, {
    "from": 25,
    "label": "calls",
    "to": 611
  }, {
    "from": 25,
    "label": "calls",
    "to": 611
  }, {
    "from": 25,
    "label": "calls",
    "to": 611
  }, {
    "from": 25,
    "label": "calls",
    "to": 611
  }, {
    "from": 25,
    "label": "calls",
    "to": 611
  }, {
    "from": 25,
    "label": "calls",
    "to": 634
  }, {
    "from": 14,
    "label": "calls",
    "to": 635
  }, {
    "from": 25,
    "label": "calls",
    "to": 627
  }, {
    "from": 25,
    "label": "calls",
    "to": 627
  }, {
    "from": 25,
    "label": "calls",
    "to": 627
  }, {
    "from": 25,
    "label": "calls",
    "to": 627
  }, {
    "from": 25,
    "label": "calls",
    "to": 627
  }, {
    "from": 25,
    "label": "calls",
    "to": 627
  }, {
    "from": 25,
    "label": "calls",
    "to": 627
  }, {
    "from": 25,
    "label": "calls",
    "to": 627
  }, {
    "from": 588,
    "label": "calls",
    "to": 627
  }, {
    "from": 588,
    "label": "calls",
    "to": 627
  }, {
    "from": 588,
    "label": "calls",
    "to": 627
  }, {
    "from": 588,
    "label": "calls",
    "to": 627
  }, {
    "from": 25,
    "label": "calls",
    "to": 602
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 25,
    "label": "calls",
    "to": 624
  }, {
    "from": 588,
    "label": "calls",
    "to": 603
  }, {
    "from": 25,
    "label": "calls",
    "to": 619
  }, {
    "from": 25,
    "label": "calls",
    "to": 619
  }, {
    "from": 25,
    "label": "calls",
    "to": 619
  }, {
    "from": 25,
    "label": "calls",
    "to": 619
  }, {
    "from": 25,
    "label": "calls",
    "to": 619
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 371
  }, {
    "from": 25,
    "label": "calls",
    "to": 630
  }, {
    "from": 25,
    "label": "calls",
    "to": 630
  }, {
    "from": 25,
    "label": "calls",
    "to": 630
  }, {
    "from": 25,
    "label": "calls",
    "to": 630
  }, {
    "from": 25,
    "label": "calls",
    "to": 630
  }, {
    "from": 25,
    "label": "calls",
    "to": 630
  }, {
    "from": 25,
    "label": "calls",
    "to": 630
  }, {
    "from": 25,
    "label": "calls",
    "to": 630
  }, {
    "from": 25,
    "label": "calls",
    "to": 630
  }, {
    "from": 25,
    "label": "calls",
    "to": 630
  }, {
    "from": 25,
    "label": "calls",
    "to": 630
  }, {
    "from": 25,
    "label": "calls",
    "to": 630
  }, {
    "from": 25,
    "label": "calls",
    "to": 630
  }, {
    "from": 25,
    "label": "calls",
    "to": 630
  }, {
    "from": 25,
    "label": "calls",
    "to": 630
  }, {
    "from": 25,
    "label": "calls",
    "to": 630
  }, {
    "from": 25,
    "label": "calls",
    "to": 630
  }, {
    "from": 25,
    "label": "calls",
    "to": 630
  }, {
    "from": 25,
    "label": "calls",
    "to": 630
  }, {
    "from": 25,
    "label": "calls",
    "to": 630
  }, {
    "from": 25,
    "label": "calls",
    "to": 630
  }, {
    "from": 25,
    "label": "calls",
    "to": 630
  }, {
    "from": 25,
    "label": "calls",
    "to": 630
  }, {
    "from": 25,
    "label": "calls",
    "to": 630
  }, {
    "from": 25,
    "label": "calls",
    "to": 630
  }, {
    "from": 25,
    "label": "calls",
    "to": 630
  }, {
    "from": 25,
    "label": "calls",
    "to": 630
  }, {
    "from": 25,
    "label": "calls",
    "to": 630
  }, {
    "from": 25,
    "label": "calls",
    "to": 630
  }, {
    "from": 25,
    "label": "calls",
    "to": 630
  }, {
    "from": 25,
    "label": "calls",
    "to": 630
  }, {
    "from": 25,
    "label": "calls",
    "to": 630
  }, {
    "from": 25,
    "label": "calls",
    "to": 630
  }, {
    "from": 25,
    "label": "calls",
    "to": 630
  }, {
    "from": 25,
    "label": "calls",
    "to": 630
  }, {
    "from": 25,
    "label": "calls",
    "to": 618
  }, {
    "from": 25,
    "label": "calls",
    "to": 618
  }, {
    "from": 25,
    "label": "calls",
    "to": 618
  }, {
    "from": 25,
    "label": "calls",
    "to": 618
  }, {
    "from": 25,
    "label": "calls",
    "to": 618
  }, {
    "from": 25,
    "label": "calls",
    "to": 618
  }, {
    "from": 25,
    "label": "calls",
    "to": 618
  }, {
    "from": 25,
    "label": "calls",
    "to": 618
  }, {
    "from": 25,
    "label": "calls",
    "to": 618
  }, {
    "from": 25,
    "label": "calls",
    "to": 618
  }, {
    "from": 25,
    "label": "calls",
    "to": 618
  }, {
    "from": 25,
    "label": "calls",
    "to": 618
  }, {
    "from": 25,
    "label": "calls",
    "to": 618
  }, {
    "from": 25,
    "label": "calls",
    "to": 618
  }, {
    "from": 25,
    "label": "calls",
    "to": 618
  }, {
    "from": 25,
    "label": "calls",
    "to": 618
  }, {
    "from": 25,
    "label": "calls",
    "to": 618
  }, {
    "from": 25,
    "label": "calls",
    "to": 618
  }, {
    "from": 25,
    "label": "calls",
    "to": 618
  }, {
    "from": 25,
    "label": "calls",
    "to": 618
  }, {
    "from": 25,
    "label": "calls",
    "to": 618
  }, {
    "from": 25,
    "label": "calls",
    "to": 403
  }, {
    "from": 25,
    "label": "calls",
    "to": 403
  }, {
    "from": 25,
    "label": "calls",
    "to": 636
  }, {
    "from": 25,
    "label": "calls",
    "to": 636
  }, {
    "from": 25,
    "label": "calls",
    "to": 629
  }, {
    "from": 25,
    "label": "calls",
    "to": 629
  }, {
    "from": 25,
    "label": "calls",
    "to": 629
  }, {
    "from": 25,
    "label": "calls",
    "to": 629
  }, {
    "from": 25,
    "label": "calls",
    "to": 629
  }, {
    "from": 25,
    "label": "calls",
    "to": 629
  }, {
    "from": 25,
    "label": "calls",
    "to": 629
  }, {
    "from": 25,
    "label": "calls",
    "to": 629
  }, {
    "from": 25,
    "label": "calls",
    "to": 629
  }, {
    "from": 25,
    "label": "calls",
    "to": 629
  }, {
    "from": 25,
    "label": "calls",
    "to": 629
  }, {
    "from": 25,
    "label": "calls",
    "to": 629
  }, {
    "from": 25,
    "label": "calls",
    "to": 629
  }, {
    "from": 25,
    "label": "calls",
    "to": 613
  }, {
    "from": 25,
    "label": "calls",
    "to": 613
  }, {
    "from": 25,
    "label": "calls",
    "to": 613
  }, {
    "from": 25,
    "label": "calls",
    "to": 613
  }, {
    "from": 25,
    "label": "calls",
    "to": 613
  }, {
    "from": 25,
    "label": "calls",
    "to": 613
  }, {
    "from": 25,
    "label": "calls",
    "to": 613
  }, {
    "from": 25,
    "label": "calls",
    "to": 613
  }, {
    "from": 25,
    "label": "calls",
    "to": 613
  }, {
    "from": 25,
    "label": "calls",
    "to": 613
  }, {
    "from": 25,
    "label": "calls",
    "to": 613
  }, {
    "from": 25,
    "label": "calls",
    "to": 613
  }, {
    "from": 25,
    "label": "calls",
    "to": 613
  }, {
    "from": 25,
    "label": "calls",
    "to": 613
  }, {
    "from": 25,
    "label": "calls",
    "to": 613
  }, {
    "from": 25,
    "label": "calls",
    "to": 613
  }, {
    "from": 25,
    "label": "calls",
    "to": 613
  }, {
    "from": 25,
    "label": "calls",
    "to": 613
  }, {
    "from": 25,
    "label": "calls",
    "to": 613
  }, {
    "from": 25,
    "label": "calls",
    "to": 613
  }, {
    "from": 25,
    "label": "calls",
    "to": 613
  }, {
    "from": 25,
    "label": "calls",
    "to": 613
  }, {
    "from": 25,
    "label": "calls",
    "to": 613
  }, {
    "from": 25,
    "label": "calls",
    "to": 613
  }, {
    "from": 25,
    "label": "calls",
    "to": 613
  }, {
    "from": 25,
    "label": "calls",
    "to": 613
  }, {
    "from": 25,
    "label": "calls",
    "to": 613
  }, {
    "from": 25,
    "label": "calls",
    "to": 613
  }, {
    "from": 25,
    "label": "calls",
    "to": 613
  }, {
    "from": 25,
    "label": "calls",
    "to": 613
  }, {
    "from": 25,
    "label": "calls",
    "to": 613
  }, {
    "from": 25,
    "label": "calls",
    "to": 613
  }, {
    "from": 25,
    "label": "calls",
    "to": 613
  }, {
    "from": 25,
    "label": "calls",
    "to": 613
  }, {
    "from": 25,
    "label": "calls",
    "to": 613
  }, {
    "from": 25,
    "label": "calls",
    "to": 599
  }, {
    "from": 25,
    "label": "calls",
    "to": 599
  }, {
    "from": 25,
    "label": "calls",
    "to": 14
  }, {
    "from": 25,
    "label": "calls",
    "to": 14
  }, {
    "from": 25,
    "label": "calls",
    "to": 14
  }, {
    "from": 25,
    "label": "calls",
    "to": 14
  }, {
    "from": 25,
    "label": "calls",
    "to": 14
  }, {
    "from": 25,
    "label": "calls",
    "to": 14
  }, {
    "from": 25,
    "label": "calls",
    "to": 14
  }, {
    "from": 25,
    "label": "calls",
    "to": 14
  }, {
    "from": 25,
    "label": "calls",
    "to": 14
  }, {
    "from": 25,
    "label": "calls",
    "to": 14
  }, {
    "from": 25,
    "label": "calls",
    "to": 14
  }, {
    "from": 25,
    "label": "calls",
    "to": 14
  }, {
    "from": 25,
    "label": "calls",
    "to": 14
  }, {
    "from": 25,
    "label": "calls",
    "to": 14
  }, {
    "from": 25,
    "label": "calls",
    "to": 14
  }, {
    "from": 25,
    "label": "calls",
    "to": 594
  }, {
    "from": 25,
    "label": "calls",
    "to": 594
  }, {
    "from": 25,
    "label": "calls",
    "to": 21
  }, {
    "from": 25,
    "label": "calls",
    "to": 21
  }, {
    "from": 25,
    "label": "calls",
    "to": 21
  }, {
    "from": 25,
    "label": "calls",
    "to": 21
  }, {
    "from": 25,
    "label": "calls",
    "to": 21
  }, {
    "from": 25,
    "label": "calls",
    "to": 21
  }, {
    "from": 25,
    "label": "calls",
    "to": 21
  }, {
    "from": 25,
    "label": "calls",
    "to": 21
  }, {
    "from": 25,
    "label": "calls",
    "to": 21
  }, {
    "from": 25,
    "label": "calls",
    "to": 21
  }, {
    "from": 25,
    "label": "calls",
    "to": 21
  }, {
    "from": 25,
    "label": "calls",
    "to": 21
  }, {
    "from": 25,
    "label": "calls",
    "to": 21
  }, {
    "from": 25,
    "label": "calls",
    "to": 21
  }, {
    "from": 25,
    "label": "calls",
    "to": 21
  }, {
    "from": 25,
    "label": "calls",
    "to": 21
  }, {
    "from": 25,
    "label": "calls",
    "to": 21
  }, {
    "from": 25,
    "label": "calls",
    "to": 21
  }, {
    "from": 25,
    "label": "calls",
    "to": 21
  }, {
    "from": 25,
    "label": "calls",
    "to": 21
  }, {
    "from": 25,
    "label": "calls",
    "to": 21
  }, {
    "from": 25,
    "label": "calls",
    "to": 21
  }, {
    "from": 25,
    "label": "calls",
    "to": 21
  }, {
    "from": 25,
    "label": "calls",
    "to": 21
  }, {
    "from": 25,
    "label": "calls",
    "to": 21
  }, {
    "from": 25,
    "label": "calls",
    "to": 21
  }, {
    "from": 25,
    "label": "calls",
    "to": 21
  }, {
    "from": 25,
    "label": "calls",
    "to": 628
  }, {
    "from": 25,
    "label": "calls",
    "to": 628
  }, {
    "from": 25,
    "label": "calls",
    "to": 628
  }, {
    "from": 25,
    "label": "calls",
    "to": 610
  }, {
    "from": 25,
    "label": "calls",
    "to": 610
  }, {
    "from": 25,
    "label": "calls",
    "to": 610
  }, {
    "from": 25,
    "label": "calls",
    "to": 610
  }, {
    "from": 25,
    "label": "calls",
    "to": 610
  }, {
    "from": 25,
    "label": "calls",
    "to": 610
  }, {
    "from": 25,
    "label": "calls",
    "to": 610
  }, {
    "from": 25,
    "label": "calls",
    "to": 610
  }, {
    "from": 25,
    "label": "calls",
    "to": 610
  }, {
    "from": 25,
    "label": "calls",
    "to": 610
  }, {
    "from": 25,
    "label": "calls",
    "to": 610
  }, {
    "from": 25,
    "label": "calls",
    "to": 610
  }, {
    "from": 25,
    "label": "calls",
    "to": 610
  }, {
    "from": 25,
    "label": "calls",
    "to": 610
  }, {
    "from": 25,
    "label": "calls",
    "to": 610
  }, {
    "from": 25,
    "label": "calls",
    "to": 610
  }, {
    "from": 25,
    "label": "calls",
    "to": 610
  }, {
    "from": 25,
    "label": "calls",
    "to": 610
  }, {
    "from": 25,
    "label": "calls",
    "to": 610
  }, {
    "from": 25,
    "label": "calls",
    "to": 610
  }, {
    "from": 25,
    "label": "calls",
    "to": 610
  }, {
    "from": 25,
    "label": "calls",
    "to": 610
  }, {
    "from": 25,
    "label": "calls",
    "to": 610
  }, {
    "from": 25,
    "label": "calls",
    "to": 610
  }, {
    "from": 25,
    "label": "calls",
    "to": 610
  }, {
    "from": 25,
    "label": "calls",
    "to": 590
  }, {
    "from": 25,
    "label": "calls",
    "to": 590
  }, {
    "from": 25,
    "label": "calls",
    "to": 590
  }, {
    "from": 25,
    "label": "calls",
    "to": 590
  }, {
    "from": 25,
    "label": "calls",
    "to": 590
  }, {
    "from": 25,
    "label": "calls",
    "to": 590
  }, {
    "from": 25,
    "label": "calls",
    "to": 590
  }, {
    "from": 25,
    "label": "calls",
    "to": 590
  }, {
    "from": 25,
    "label": "calls",
    "to": 590
  }, {
    "from": 25,
    "label": "calls",
    "to": 590
  }, {
    "from": 25,
    "label": "calls",
    "to": 626
  }, {
    "from": 25,
    "label": "calls",
    "to": 626
  }, {
    "from": 25,
    "label": "calls",
    "to": 626
  }, {
    "from": 25,
    "label": "calls",
    "to": 626
  }, {
    "from": 25,
    "label": "calls",
    "to": 626
  }, {
    "from": 25,
    "label": "calls",
    "to": 626
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 617
  }, {
    "from": 25,
    "label": "calls",
    "to": 591
  }, {
    "from": 25,
    "label": "calls",
    "to": 591
  }, {
    "from": 25,
    "label": "calls",
    "to": 625
  }, {
    "from": 25,
    "label": "calls",
    "to": 625
  }, {
    "from": 25,
    "label": "calls",
    "to": 625
  }, {
    "from": 25,
    "label": "calls",
    "to": 625
  }, {
    "from": 588,
    "label": "calls",
    "to": 10
  }, {
    "from": 588,
    "label": "calls",
    "to": 10
  }, {
    "from": 588,
    "label": "calls",
    "to": 10
  }, {
    "from": 588,
    "label": "calls",
    "to": 10
  }, {
    "from": 25,
    "label": "calls",
    "to": 616
  }, {
    "from": 25,
    "label": "calls",
    "to": 616
  }, {
    "from": 25,
    "label": "calls",
    "to": 616
  }, {
    "from": 25,
    "label": "calls",
    "to": 616
  }, {
    "from": 25,
    "label": "calls",
    "to": 616
  }, {
    "from": 25,
    "label": "calls",
    "to": 616
  }, {
    "from": 25,
    "label": "calls",
    "to": 616
  }, {
    "from": 25,
    "label": "calls",
    "to": 616
  }, {
    "from": 25,
    "label": "calls",
    "to": 616
  }, {
    "from": 25,
    "label": "calls",
    "to": 616
  }, {
    "from": 25,
    "label": "calls",
    "to": 616
  }, {
    "from": 25,
    "label": "calls",
    "to": 616
  }, {
    "from": 25,
    "label": "calls",
    "to": 616
  }, {
    "from": 25,
    "label": "calls",
    "to": 616
  }, {
    "from": 25,
    "label": "calls",
    "to": 616
  }, {
    "from": 25,
    "label": "calls",
    "to": 616
  }, {
    "from": 25,
    "label": "calls",
    "to": 616
  }, {
    "from": 25,
    "label": "calls",
    "to": 616
  }, {
    "from": 25,
    "label": "calls",
    "to": 616
  }, {
    "from": 25,
    "label": "calls",
    "to": 597
  }, {
    "from": 25,
    "label": "calls",
    "to": 597
  }, {
    "from": 25,
    "label": "calls",
    "to": 597
  }, {
    "from": 25,
    "label": "calls",
    "to": 605
  }, {
    "from": 25,
    "label": "calls",
    "to": 605
  }, {
    "from": 25,
    "label": "calls",
    "to": 605
  }, {
    "from": 25,
    "label": "calls",
    "to": 605
  }, {
    "from": 25,
    "label": "calls",
    "to": 605
  }, {
    "from": 25,
    "label": "calls",
    "to": 605
  }, {
    "from": 25,
    "label": "calls",
    "to": 605
  }, {
    "from": 25,
    "label": "calls",
    "to": 605
  }, {
    "from": 25,
    "label": "calls",
    "to": 605
  }, {
    "from": 25,
    "label": "calls",
    "to": 605
  }, {
    "from": 25,
    "label": "calls",
    "to": 605
  }, {
    "from": 25,
    "label": "calls",
    "to": 605
  }, {
    "from": 25,
    "label": "calls",
    "to": 605
  }, {
    "from": 25,
    "label": "calls",
    "to": 605
  }, {
    "from": 25,
    "label": "calls",
    "to": 605
  }, {
    "from": 25,
    "label": "calls",
    "to": 605
  }, {
    "from": 25,
    "label": "calls",
    "to": 605
  }, {
    "from": 25,
    "label": "calls",
    "to": 605
  }, {
    "from": 25,
    "label": "calls",
    "to": 605
  }, {
    "from": 25,
    "label": "calls",
    "to": 600
  }, {
    "from": 25,
    "label": "calls",
    "to": 600
  }, {
    "from": 25,
    "label": "calls",
    "to": 600
  }, {
    "from": 25,
    "label": "calls",
    "to": 600
  }, {
    "from": 25,
    "label": "calls",
    "to": 600
  }, {
    "from": 25,
    "label": "calls",
    "to": 600
  }, {
    "from": 25,
    "label": "calls",
    "to": 600
  }, {
    "from": 25,
    "label": "calls",
    "to": 600
  }, {
    "from": 25,
    "label": "calls",
    "to": 600
  }, {
    "from": 25,
    "label": "calls",
    "to": 600
  }, {
    "from": 25,
    "label": "calls",
    "to": 600
  }, {
    "from": 25,
    "label": "calls",
    "to": 600
  }, {
    "from": 25,
    "label": "calls",
    "to": 600
  }, {
    "from": 25,
    "label": "calls",
    "to": 600
  }, {
    "from": 25,
    "label": "calls",
    "to": 600
  }, {
    "from": 25,
    "label": "calls",
    "to": 600
  }, {
    "from": 25,
    "label": "calls",
    "to": 600
  }, {
    "from": 588,
    "label": "calls",
    "to": 25
  }, {
    "from": 588,
    "label": "calls",
    "to": 25
  }, {
    "from": 588,
    "label": "calls",
    "to": 25
  }, {
    "from": 588,
    "label": "calls",
    "to": 25
  }, {
    "from": 588,
    "label": "calls",
    "to": 25
  }, {
    "from": 588,
    "label": "calls",
    "to": 25
  }, {
    "from": 588,
    "label": "calls",
    "to": 2
  }, {
    "from": 588,
    "label": "calls",
    "to": 2
  }, {
    "from": 588,
    "label": "calls",
    "to": 2
  }, {
    "from": 588,
    "label": "calls",
    "to": 2
  }, {
    "from": 25,
    "label": "calls",
    "to": 369
  }, {
    "from": 25,
    "label": "calls",
    "to": 369
  }, {
    "from": 25,
    "label": "calls",
    "to": 369
  }, {
    "from": 25,
    "label": "calls",
    "to": 369
  }, {
    "from": 25,
    "label": "calls",
    "to": 369
  }, {
    "from": 25,
    "label": "calls",
    "to": 369
  }, {
    "from": 25,
    "label": "calls",
    "to": 369
  }, {
    "from": 25,
    "label": "calls",
    "to": 369
  }, {
    "from": 25,
    "label": "calls",
    "to": 369
  }, {
    "from": 25,
    "label": "calls",
    "to": 369
  }, {
    "from": 25,
    "label": "calls",
    "to": 369
  }, {
    "from": 25,
    "label": "calls",
    "to": 369
  }, {
    "from": 25,
    "label": "calls",
    "to": 369
  }, {
    "from": 25,
    "label": "calls",
    "to": 369
  }, {
    "from": 25,
    "label": "calls",
    "to": 369
  }, {
    "from": 25,
    "label": "calls",
    "to": 369
  }, {
    "from": 25,
    "label": "calls",
    "to": 369
  }, {
    "from": 25,
    "label": "calls",
    "to": 369
  }, {
    "from": 25,
    "label": "calls",
    "to": 608
  }, {
    "from": 25,
    "label": "calls",
    "to": 608
  }, {
    "from": 588,
    "label": "calls",
    "to": 637
  }, {
    "from": 588,
    "label": "calls",
    "to": 637
  }, {
    "from": 588,
    "label": "calls",
    "to": 637
  }, {
    "from": 588,
    "label": "calls",
    "to": 637
  }, {
    "from": 588,
    "label": "calls",
    "to": 637
  }, {
    "from": 588,
    "label": "calls",
    "to": 637
  }, {
    "from": 588,
    "label": "calls",
    "to": 637
  }, {
    "from": 588,
    "label": "calls",
    "to": 637
  }, {
    "from": 588,
    "label": "calls",
    "to": 637
  }, {
    "from": 588,
    "label": "calls",
    "to": 637
  }, {
    "from": 25,
    "label": "calls",
    "to": 614
  }, {
    "from": 25,
    "label": "calls",
    "to": 614
  }, {
    "from": 588,
    "label": "calls",
    "to": 596
  }, {
    "from": 1,
    "label": "contains",
    "to": 588
  }, {
    "from": 588,
    "label": "declares",
    "to": 2
  }, {
    "from": 588,
    "label": "declares",
    "to": 5
  }, {
    "from": 588,
    "label": "declares",
    "to": 7
  }, {
    "from": 588,
    "label": "declares",
    "to": 9
  }, {
    "from": 588,
    "label": "declares",
    "to": 10
  }, {
    "from": 588,
    "label": "declares",
    "to": 14
  }, {
    "from": 588,
    "label": "declares",
    "to": 19
  }, {
    "from": 588,
    "label": "declares",
    "to": 21
  }, {
    "from": 588,
    "label": "declares",
    "to": 25
  }, {
    "from": 588,
    "label": "declares",
    "to": 367
  }, {
    "from": 588,
    "label": "declares",
    "to": 369
  }, {
    "from": 588,
    "label": "declares",
    "to": 371
  }, {
    "from": 588,
    "label": "declares",
    "to": 373
  }, {
    "from": 588,
    "label": "declares",
    "to": 375
  }, {
    "from": 588,
    "label": "declares",
    "to": 377
  }, {
    "from": 588,
    "label": "declares",
    "to": 379
  }, {
    "from": 588,
    "label": "declares",
    "to": 381
  }, {
    "from": 588,
    "label": "declares",
    "to": 383
  }, {
    "from": 588,
    "label": "declares",
    "to": 385
  }, {
    "from": 588,
    "label": "declares",
    "to": 387
  }, {
    "from": 588,
    "label": "declares",
    "to": 389
  }, {
    "from": 588,
    "label": "declares",
    "to": 391
  }, {
    "from": 588,
    "label": "declares",
    "to": 393
  }, {
    "from": 588,
    "label": "declares",
    "to": 395
  }, {
    "from": 588,
    "label": "declares",
    "to": 397
  }, {
    "from": 588,
    "label": "declares",
    "to": 399
  }, {
    "from": 588,
    "label": "declares",
    "to": 401
  }, {
    "from": 588,
    "label": "declares",
    "to": 403
  }, {
    "from": 588,
    "label": "declares",
    "to": 405
  }, {
    "from": 588,
    "label": "declares",
    "to": 407
  }, {
    "from": 588,
    "label": "declares",
    "to": 409
  }, {
    "from": 588,
    "label": "declares",
    "to": 411
  }, {
    "from": 588,
    "label": "declares",
    "to": 413
  }, {
    "from": 588,
    "label": "declares",
    "to": 415
  }, {
    "from": 588,
    "label": "declares",
    "to": 417
  }, {
    "from": 588,
    "label": "declares",
    "to": 419
  }, {
    "from": 588,
    "label": "declares",
    "to": 421
  }, {
    "from": 588,
    "label": "declares",
    "to": 423
  }, {
    "from": 588,
    "label": "declares",
    "to": 425
  }, {
    "from": 588,
    "label": "declares",
    "to": 427
  }, {
    "from": 588,
    "label": "declares",
    "to": 429
  }, {
    "from": 588,
    "label": "declares",
    "to": 431
  }, {
    "from": 588,
    "label": "declares",
    "to": 433
  }, {
    "from": 588,
    "label": "declares",
    "to": 435
  }, {
    "from": 588,
    "label": "declares",
    "to": 437
  }, {
    "from": 588,
    "label": "declares",
    "to": 439
  }, {
    "from": 588,
    "label": "declares",
    "to": 441
  }, {
    "from": 588,
    "label": "declares",
    "to": 443
  }, {
    "from": 588,
    "label": "declares",
    "to": 445
  }, {
    "from": 588,
    "label": "declares",
    "to": 447
  }, {
    "from": 588,
    "label": "declares",
    "to": 449
  }, {
    "from": 588,
    "label": "declares",
    "to": 451
  }, {
    "from": 588,
    "label": "declares",
    "to": 453
  }, {
    "from": 588,
    "label": "declares",
    "to": 455
  }, {
    "from": 588,
    "label": "declares",
    "to": 457
  }, {
    "from": 588,
    "label": "declares",
    "to": 459
  }, {
    "from": 588,
    "label": "declares",
    "to": 461
  }, {
    "from": 588,
    "label": "declares",
    "to": 463
  }, {
    "from": 588,
    "label": "declares",
    "to": 465
  }, {
    "from": 588,
    "label": "declares",
    "to": 467
  }, {
    "from": 588,
    "label": "declares",
    "to": 469
  }, {
    "from": 588,
    "label": "declares",
    "to": 471
  }, {
    "from": 588,
    "label": "declares",
    "to": 473
  }, {
    "from": 588,
    "label": "declares",
    "to": 475
  }, {
    "from": 588,
    "label": "declares",
    "to": 477
  }, {
    "from": 588,
    "label": "declares",
    "to": 479
  }, {
    "from": 588,
    "label": "declares",
    "to": 481
  }, {
    "from": 588,
    "label": "declares",
    "to": 483
  }, {
    "from": 588,
    "label": "declares",
    "to": 485
  }, {
    "from": 588,
    "label": "declares",
    "to": 487
  }, {
    "from": 588,
    "label": "declares",
    "to": 489
  }, {
    "from": 588,
    "label": "declares",
    "to": 491
  }, {
    "from": 588,
    "label": "declares",
    "to": 493
  }, {
    "from": 588,
    "label": "declares",
    "to": 495
  }, {
    "from": 588,
    "label": "declares",
    "to": 497
  }, {
    "from": 588,
    "label": "declares",
    "to": 499
  }, {
    "from": 588,
    "label": "declares",
    "to": 501
  }, {
    "from": 588,
    "label": "declares",
    "to": 503
  }, {
    "from": 588,
    "label": "declares",
    "to": 505
  }, {
    "from": 588,
    "label": "declares",
    "to": 507
  }, {
    "from": 588,
    "label": "declares",
    "to": 509
  }, {
    "from": 588,
    "label": "declares",
    "to": 511
  }, {
    "from": 588,
    "label": "declares",
    "to": 513
  }, {
    "from": 588,
    "label": "declares",
    "to": 515
  }, {
    "from": 588,
    "label": "declares",
    "to": 517
  }, {
    "from": 588,
    "label": "declares",
    "to": 519
  }, {
    "from": 588,
    "label": "declares",
    "to": 521
  }, {
    "from": 588,
    "label": "declares",
    "to": 523
  }, {
    "from": 588,
    "label": "declares",
    "to": 525
  }, {
    "from": 588,
    "label": "declares",
    "to": 526
  }, {
    "from": 588,
    "label": "declares",
    "to": 528
  }, {
    "from": 588,
    "label": "declares",
    "to": 530
  }, {
    "from": 588,
    "label": "declares",
    "to": 532
  }, {
    "from": 588,
    "label": "declares",
    "to": 534
  }, {
    "from": 588,
    "label": "declares",
    "to": 536
  }, {
    "from": 588,
    "label": "declares",
    "to": 538
  }, {
    "from": 588,
    "label": "declares",
    "to": 540
  }, {
    "from": 588,
    "label": "declares",
    "to": 542
  }, {
    "from": 588,
    "label": "declares",
    "to": 544
  }, {
    "from": 588,
    "label": "declares",
    "to": 546
  }, {
    "from": 588,
    "label": "declares",
    "to": 548
  }, {
    "from": 588,
    "label": "declares",
    "to": 550
  }, {
    "from": 588,
    "label": "declares",
    "to": 552
  }, {
    "from": 588,
    "label": "declares",
    "to": 554
  }, {
    "from": 588,
    "label": "declares",
    "to": 556
  }, {
    "from": 588,
    "label": "declares",
    "to": 558
  }, {
    "from": 588,
    "label": "declares",
    "to": 560
  }, {
    "from": 588,
    "label": "declares",
    "to": 562
  }, {
    "from": 588,
    "label": "declares",
    "to": 564
  }, {
    "from": 588,
    "label": "declares",
    "to": 566
  }, {
    "from": 588,
    "label": "declares",
    "to": 568
  }, {
    "from": 588,
    "label": "declares",
    "to": 570
  }, {
    "from": 588,
    "label": "declares",
    "to": 572
  }, {
    "from": 588,
    "label": "declares",
    "to": 574
  }, {
    "from": 588,
    "label": "declares",
    "to": 576
  }, {
    "from": 588,
    "label": "declares",
    "to": 578
  }, {
    "from": 588,
    "label": "declares",
    "to": 580
  }, {
    "from": 588,
    "label": "declares",
    "to": 582
  }, {
    "from": 588,
    "label": "declares",
    "to": 584
  }, {
    "from": 588,
    "label": "declares",
    "to": 586
  }, {
    "from": 638,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 639
  }, {
    "from": 1,
    "label": "contains",
    "to": 640
  }, {
    "from": 639,
    "label": "initializes",
    "to": 641
  }, {
    "from": 641,
    "label": "assigns",
    "to": 642
  }, {
    "from": 639,
    "label": "initializes",
    "to": 643
  }, {
    "from": 639,
    "label": "initializes",
    "to": 644
  }, {
    "from": 644,
    "label": "assigns",
    "to": 645
  }, {
    "from": 639,
    "label": "initializes",
    "to": 646
  }, {
    "from": 639,
    "label": "initializes",
    "to": 647
  }, {
    "from": 639,
    "label": "initializes",
    "to": 648
  }, {
    "from": 639,
    "label": "initializes",
    "to": 649
  }, {
    "from": 640,
    "label": "initializes",
    "to": 650
  }, {
    "from": 650,
    "label": "requires",
    "to": 595
  }, {
    "from": 202,
    "label": "hasArgument",
    "to": 528
  }, {
    "from": 202,
    "label": "hasArgument",
    "to": 532
  }, {
    "from": 207,
    "label": "hasArgument",
    "to": 530
  }, {
    "from": 214,
    "label": "hasArgument",
    "to": 534
  }, {
    "from": 214,
    "label": "hasArgument",
    "to": 536
  }, {
    "from": 214,
    "label": "hasArgument",
    "to": 538
  }, {
    "from": 214,
    "label": "hasArgument",
    "to": 542
  }, {
    "from": 214,
    "label": "hasArgument",
    "to": 550
  }, {
    "from": 214,
    "label": "hasArgument",
    "to": 552
  }, {
    "from": 214,
    "label": "hasArgument",
    "to": 560
  }, {
    "from": 214,
    "label": "hasArgument",
    "to": 562
  }, {
    "from": 217,
    "label": "hasArgument",
    "to": 534
  }, {
    "from": 217,
    "label": "hasArgument",
    "to": 536
  }, {
    "from": 217,
    "label": "hasArgument",
    "to": 538
  }, {
    "from": 217,
    "label": "hasArgument",
    "to": 542
  }, {
    "from": 217,
    "label": "hasArgument",
    "to": 550
  }, {
    "from": 217,
    "label": "hasArgument",
    "to": 552
  }, {
    "from": 217,
    "label": "hasArgument",
    "to": 560
  }, {
    "from": 217,
    "label": "hasArgument",
    "to": 562
  }, {
    "from": 220,
    "label": "hasArgument",
    "to": 534
  }, {
    "from": 220,
    "label": "hasArgument",
    "to": 536
  }, {
    "from": 220,
    "label": "hasArgument",
    "to": 538
  }, {
    "from": 220,
    "label": "hasArgument",
    "to": 542
  }, {
    "from": 220,
    "label": "hasArgument",
    "to": 550
  }, {
    "from": 220,
    "label": "hasArgument",
    "to": 552
  }, {
    "from": 220,
    "label": "hasArgument",
    "to": 560
  }, {
    "from": 220,
    "label": "hasArgument",
    "to": 562
  }, {
    "from": 222,
    "label": "hasArgument",
    "to": 540
  }, {
    "from": 237,
    "label": "hasArgument",
    "to": 534
  }, {
    "from": 237,
    "label": "hasArgument",
    "to": 536
  }, {
    "from": 237,
    "label": "hasArgument",
    "to": 538
  }, {
    "from": 237,
    "label": "hasArgument",
    "to": 542
  }, {
    "from": 237,
    "label": "hasArgument",
    "to": 550
  }, {
    "from": 237,
    "label": "hasArgument",
    "to": 552
  }, {
    "from": 237,
    "label": "hasArgument",
    "to": 560
  }, {
    "from": 237,
    "label": "hasArgument",
    "to": 562
  }, {
    "from": 241,
    "label": "hasArgument",
    "to": 544
  }, {
    "from": 244,
    "label": "hasArgument",
    "to": 546
  }, {
    "from": 244,
    "label": "hasArgument",
    "to": 548
  }, {
    "from": 247,
    "label": "hasArgument",
    "to": 546
  }, {
    "from": 247,
    "label": "hasArgument",
    "to": 548
  }, {
    "from": 255,
    "label": "hasArgument",
    "to": 534
  }, {
    "from": 255,
    "label": "hasArgument",
    "to": 536
  }, {
    "from": 255,
    "label": "hasArgument",
    "to": 538
  }, {
    "from": 255,
    "label": "hasArgument",
    "to": 542
  }, {
    "from": 255,
    "label": "hasArgument",
    "to": 550
  }, {
    "from": 255,
    "label": "hasArgument",
    "to": 552
  }, {
    "from": 255,
    "label": "hasArgument",
    "to": 560
  }, {
    "from": 255,
    "label": "hasArgument",
    "to": 562
  }, {
    "from": 257,
    "label": "hasArgument",
    "to": 534
  }, {
    "from": 257,
    "label": "hasArgument",
    "to": 536
  }, {
    "from": 257,
    "label": "hasArgument",
    "to": 538
  }, {
    "from": 257,
    "label": "hasArgument",
    "to": 542
  }, {
    "from": 257,
    "label": "hasArgument",
    "to": 550
  }, {
    "from": 257,
    "label": "hasArgument",
    "to": 552
  }, {
    "from": 257,
    "label": "hasArgument",
    "to": 560
  }, {
    "from": 257,
    "label": "hasArgument",
    "to": 562
  }, {
    "from": 259,
    "label": "hasArgument",
    "to": 554
  }, {
    "from": 262,
    "label": "hasArgument",
    "to": 556
  }, {
    "from": 262,
    "label": "hasArgument",
    "to": 558
  }, {
    "from": 267,
    "label": "hasArgument",
    "to": 556
  }, {
    "from": 267,
    "label": "hasArgument",
    "to": 558
  }, {
    "from": 270,
    "label": "hasArgument",
    "to": 534
  }, {
    "from": 270,
    "label": "hasArgument",
    "to": 536
  }, {
    "from": 270,
    "label": "hasArgument",
    "to": 538
  }, {
    "from": 270,
    "label": "hasArgument",
    "to": 542
  }, {
    "from": 270,
    "label": "hasArgument",
    "to": 550
  }, {
    "from": 270,
    "label": "hasArgument",
    "to": 552
  }, {
    "from": 270,
    "label": "hasArgument",
    "to": 560
  }, {
    "from": 270,
    "label": "hasArgument",
    "to": 562
  }, {
    "from": 273,
    "label": "hasArgument",
    "to": 534
  }, {
    "from": 273,
    "label": "hasArgument",
    "to": 536
  }, {
    "from": 273,
    "label": "hasArgument",
    "to": 538
  }, {
    "from": 273,
    "label": "hasArgument",
    "to": 542
  }, {
    "from": 273,
    "label": "hasArgument",
    "to": 550
  }, {
    "from": 273,
    "label": "hasArgument",
    "to": 552
  }, {
    "from": 273,
    "label": "hasArgument",
    "to": 560
  }, {
    "from": 273,
    "label": "hasArgument",
    "to": 562
  }, {
    "from": 280,
    "label": "hasArgument",
    "to": 564
  }, {
    "from": 315,
    "label": "hasArgument",
    "to": 566
  }, {
    "from": 315,
    "label": "hasArgument",
    "to": 568
  }, {
    "from": 315,
    "label": "hasArgument",
    "to": 570
  }, {
    "from": 315,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 315,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 318,
    "label": "hasArgument",
    "to": 566
  }, {
    "from": 318,
    "label": "hasArgument",
    "to": 568
  }, {
    "from": 318,
    "label": "hasArgument",
    "to": 570
  }, {
    "from": 318,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 318,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 321,
    "label": "hasArgument",
    "to": 566
  }, {
    "from": 321,
    "label": "hasArgument",
    "to": 568
  }, {
    "from": 321,
    "label": "hasArgument",
    "to": 570
  }, {
    "from": 321,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 321,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 323,
    "label": "hasArgument",
    "to": 566
  }, {
    "from": 323,
    "label": "hasArgument",
    "to": 568
  }, {
    "from": 323,
    "label": "hasArgument",
    "to": 570
  }, {
    "from": 323,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 323,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 325,
    "label": "hasArgument",
    "to": 566
  }, {
    "from": 325,
    "label": "hasArgument",
    "to": 568
  }, {
    "from": 325,
    "label": "hasArgument",
    "to": 570
  }, {
    "from": 325,
    "label": "hasArgument",
    "to": 572
  }, {
    "from": 325,
    "label": "hasArgument",
    "to": 574
  }, {
    "from": 332,
    "label": "hasArgument",
    "to": 576
  }, {
    "from": 341,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 341,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 341,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 341,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 341,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 344,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 344,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 344,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 344,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 344,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 347,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 347,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 347,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 347,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 347,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 350,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 350,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 350,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 350,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 350,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 352,
    "label": "hasArgument",
    "to": 578
  }, {
    "from": 352,
    "label": "hasArgument",
    "to": 580
  }, {
    "from": 352,
    "label": "hasArgument",
    "to": 582
  }, {
    "from": 352,
    "label": "hasArgument",
    "to": 584
  }, {
    "from": 352,
    "label": "hasArgument",
    "to": 586
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "test_fs",
    "type": "module"
  }, {
    "id": 2,
    "text": "function(msg) return function() lunit.skip(msg) end end",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "lunit.skip(msg)",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "local function B(str)\r\n  return (str:gsub(\".\", function(ch)\r\n    return string.format(\"\\\\%.03d\", ch:byte())\r\n  end))\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "local function Q(str)\r\n  return string.format(\"%q\",str)\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "local function pass_thrue(str) return str end",
    "type": "function"
  }, {
    "id": 10,
    "text": "local function prequire(...)\r\n  local ok, mod = pcall(require, ...)\r\n  if not ok then return nil, mod end\r\n  return mod\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "local ok, mod = pcall(require, ...)",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "if not ok then return nil, mod end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "local function clone(t, o)\r\n  o = o or {}\r\n  for k,v in pairs(t) do\r\n    o[ k ] = v\r\n  end\r\n  return o\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "o = o or {}",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "for k,v in pairs(t) do\r\n    o[ k ] = v\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 17,
    "text": "o[ k ] = v",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "local function up(str)\r\n  return IS_WINDOWS and str:upper() or str\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "local function ifind(t, f)\r\n  for k, v in ipairs(t) do\r\n    if up(v) == up(f) then\r\n      return k\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "for k, v in ipairs(t) do\r\n    if up(v) == up(f) then\r\n      return k\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 23,
    "text": "if up(v) == up(f) then\r\n      return k\r\n    end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "local function CREATE_TEST(name)\r\n\r\nlocal fs, _T, _t = fs, _T, _t\r\nlocal DIR_SEP = fs.DIR_SEP\r\n\r\nlocal function mkfile(P, data)\r\n  local f, e = io.open(_t(P), \"w+b\")\r\n  if not f then return nil, e end\r\n  if data then assert(f:write(data)) end\r\n  f:close()\r\n  return P\r\nend\r\n\r\nlocal function read_file(P)\r\n  local f, err = io.open(_t(P), \"rb\")\r\n  if not f then return nil, err end\r\n  local data, err = f:read(\"*all\")\r\n  f:close()\r\n  if data then return data end\r\n  return nil, err\r\nend\r\n\r\nlocal function J(...)\r\n  return (table.concat({...}, DIR_SEP))\r\nend\r\n\r\nlocal _ENV = TEST_CASE(name .. \": basic\")             if true then\r\n\r\nlocal cwd\r\n\r\nfunction setup()\r\n  cwd = assert_string(fs.currentdir())\r\nend\r\n\r\nfunction teardown()\r\n  fs.chdir(cwd)\r\n  fs.rmdir(J(cwd, _T\"1\"))\r\nend\r\n\r\nfunction test_cwd()\r\n  assert_string(cwd)\r\n  assert_equal(cwd, fs.exists(cwd))\r\n  assert_equal(cwd, fs.isdir(cwd) )\r\n  assert_false(fs.isfile(cwd))\r\nend\r\n\r\nfunction test_md()\r\n  local P = J(cwd, _T\"1\")\r\n  assert_false(fs.exists(P))\r\n  assert_true (fs.mkdir(P))\r\n  assert_nil  (fs.mkdir(P))\r\n  assert_equal(P, fs.exists(P))\r\n  assert_true (fs.chdir(P))\r\n  assert_equal(P, fs.currentdir())\r\n  assert_true (fs.chdir(cwd))\r\n  assert_equal(cwd, fs.currentdir())\r\n  assert_true (fs.rmdir(P))\r\n  assert_false(fs.exists(P))\r\nend\r\n\r\nfunction test_tmpdir()\r\n  local p = assert_string(fs.tmpdir())\r\n  assert_equal(p, fs.isdir(p))\r\nend\r\n\r\nend\r\n\r\nlocal _ENV = TEST_CASE(name .. \": file manipulation\") if true then\r\n\r\nlocal cwd, base\r\nlocal data =\"123\\r\\n456\\n789\"\r\n\r\nfunction teardown()\r\n  fs.chdir(cwd)\r\n  fs.remove(J(base, _T\"test.txt\"))\r\n  fs.remove(J(base, _T\"test2.txt\"))\r\n  fs.rmdir(base)\r\nend\r\n\r\nfunction setup()\r\n  cwd = fs.currentdir()\r\n  base = J(cwd, _T\"tmp\")\r\n\r\n  teardown()\r\n  assert_true(fs.mkdir(base))\r\n  assert(mkfile(J(base, _T\"test.txt\"), data))\r\nend\r\n\r\nfunction test_remove()\r\n  assert_true(fs.remove(J(base, _T\"test.txt\")))\r\n  assert_nil(fs.remove(J(base, _T\"test.txt\")))\r\nend\r\n\r\nfunction test_remove_dir()\r\n  assert_nil(fs.remove(base))\r\n  assert_equal(base, fs.isdir(base))\r\nend\r\n\r\nfunction test_rmdir()\r\n  assert_nil(fs.rmdir(base))\r\n  assert_equal(base, fs.isdir(base))\r\n  assert_true(fs.remove(J(base, _T\"test.txt\")))\r\n  assert_true(fs.rmdir(base))\r\nend\r\n\r\nfunction test_size()\r\n  assert_equal(#data, fs.size(J(base, _T\"test.txt\")))\r\nend\r\n\r\nfunction test_touch()\r\n  local SRC = J(base, _T\"test.txt\")\r\n  local t1 = assert_number(fs.mtime(SRC)) + 100\r\n  assert_true(fs.touch(SRC, t1))\r\n  local t2 = assert_number(fs.mtime(SRC))\r\n  assert(math.abs(t2-t1) <= 2)\r\n  local t2 = assert_number(fs.atime(SRC))\r\n  assert(math.abs(t2-t1) <= 2)\r\n  assert_true(fs.touch(SRC, t1, t1 + 100))\r\n  local t2 = assert_number(fs.mtime(SRC))\r\n  assert(math.abs(t2-(t1+100)) <= 2)\r\n  local t2 = assert_number(fs.atime(SRC))\r\n  assert(math.abs(t2-t1) <= 2)\r\nend\r\n\r\nfunction test_touch_non_exists()\r\n  local SRC = J(base, _T\"test2.txt\")\r\n  assert_false(fs.exists(SRC))\r\n  assert_nil(fs.touch(SRC))\r\n  assert_false(fs.exists(SRC))\r\nend\r\n\r\nend\r\n\r\nlocal _ENV = TEST_CASE(name .. \": copy/move\")         if true then\r\n\r\nlocal cwd, base\r\nlocal data  = \"123\\r\\n456\\n789\"\r\nlocal rdata = \"789\\r\\n123\\n456\"\r\nlocal tmp   = \"tmp\"\r\n\r\nfunction teardown()\r\n  fs.chdir(cwd)\r\n  fs.remove(J(base, _T\"test.txt\"))\r\n  fs.remove(J(base, _T\"test2.txt\"))\r\n  fs.remove(J(base, _T'nonempty', _T'tmp.dat'))\r\n  fs.remove(J(base, _T'tmp2',     _T'tmp.dat'))\r\n  fs.rmdir(base)\r\n\r\n  fs.remove(J(base, _T'from.dat'))\r\n  fs.remove(J(base, _T'to.dat'  ))\r\n  fs.remove(J(base, _T'to.txt'  ))\r\n  fs.remove(J(base, _T'to'      ))\r\n  fs.remove(J(base, _T'tmp2'    ))\r\n  fs.rmdir (J(base, _T'to'      ))\r\n  fs.rmdir (J(base, _T'tmp'     ))\r\n  fs.rmdir (J(base, _T'tmp2'    ))\r\n  fs.rmdir (J(base, _T'nonempty'))\r\n  fs.rmdir (base)\r\nend\r\n\r\nfunction setup()\r\n  cwd = fs.currentdir()\r\n  base = J(cwd, _T(tmp))\r\n  assert_false(fs.exists(base), _t(base) .. \" already exists!\")\r\n\r\n  teardown()\r\n  assert_true(fs.mkdir(base))\r\n  assert_true(fs.mkdir(J(base, _T'to')))\r\n  assert_true(fs.mkdir(J(base, _T'tmp')))\r\n  assert_true(fs.mkdir(J(base, _T'nonempty')))\r\n\r\n  assert(mkfile(J(base, _T'from.dat'), data ))\r\n  assert(mkfile(J(base, _T'to.dat'  ), rdata))\r\n  assert(mkfile(J(base, _T'nonempty', _T'tmp.dat'), data ))\r\nend\r\n\r\nlocal function test_fail(operation)\r\n  local SRC, DST = J(base, _T'from.dat'), J(base, _T'to.dat')\r\n  assert_nil(operation(SRC, DST))\r\n  assert_equal(data,  read_file(SRC))\r\n  assert_equal(rdata, read_file(DST))\r\n\r\n  assert_nil(operation(SRC, DST, false))\r\n  assert_equal(data,  read_file(SRC))\r\n  assert_equal(rdata, read_file(DST))\r\n\r\n  assert_nil(operation(SRC, DST, nil))\r\n  assert_equal(data,  read_file(SRC))\r\n  assert_equal(rdata, read_file(DST))\r\n\r\n  SRC, DST = J(base, _T'from.dat'), J(base, _T'to')\r\n  assert_nil(operation(SRC, DST))\r\n  assert_equal(data,  read_file(SRC))\r\n  assert_equal(DST,   fs.isdir(DST) )\r\n\r\n  SRC, DST = J(base, _T'unknown.txt'), J(base, _T'to.dat')\r\n  assert_nil(operation(SRC, DST, true))\r\n  assert_false(fs.exists(SRC))\r\n  assert_equal(rdata, read_file(DST))\r\nend\r\n\r\nfunction test_move_fail()\r\n  test_fail(fs.move)\r\nend\r\n\r\nfunction test_copy_fail()\r\n  test_fail(fs.copy)\r\nend\r\n\r\nfunction test_move_pass()\r\n  local SRC, DST = J(base, _T'from.dat'), J(base, _T'to.txt')\r\n  assert_true(fs.move(SRC, DST))\r\n  assert_false(fs.exists(SRC))\r\n  assert_equal(data, read_file(DST))\r\nend\r\n\r\nfunction test_copy_pass()\r\n  local SRC, DST = J(base, _T'from.dat'), J(base, _T'to.txt')\r\n  assert_true(fs.copy(SRC, DST))\r\n  assert_equal(data, read_file(SRC))\r\n  assert_equal(data, read_file(DST))\r\nend\r\n\r\nfunction test_move_force_file()\r\n  local SRC, DST = J(base, _T'from.dat'), J(base, _T'to.dat')\r\n  assert_true( fs.move(SRC, DST, true ))\r\n  assert_false(fs.exists(SRC))\r\n  assert_equal(data, read_file(DST))\r\nend\r\n\r\nfunction test_copy_force_file()\r\n  local SRC, DST = J(base, _T'from.dat'), J(base, _T'to.dat')\r\n  assert_true( fs.copy(SRC, DST, true ))\r\n  assert_equal(data, read_file(SRC))\r\n  assert_equal(data, read_file(DST))\r\nend\r\n\r\nfunction test_move_empty_dir()\r\n  local SRC, DST = J(base, _T'tmp'), J(base, _T'tmp2')\r\n  assert_true( fs.move(SRC, DST) )\r\n  assert_false(fs.exists(SRC))\r\n  assert_equal(DST, fs.isdir(DST))\r\nend\r\n\r\nfunction test_move_nonempty_dir()\r\n  local SRC, DST = J(base, _T'nonempty'), J(base, _T'tmp2')\r\n  assert_true( fs.move(SRC, DST) )\r\n  assert_false(fs.exists(SRC))\r\n  assert_equal(DST, fs.isdir(DST))\r\nend\r\n\r\nfunction test_copy_empty_dir()\r\n  local SRC, DST = J(base, _T'tmp'), J(base, _T'tmp2')\r\n  assert_nil  (fs.copy(SRC, DST))\r\n  assert_false(fs.exists(DST))\r\nend\r\n\r\nfunction test_copy_nonempty_dir()\r\n  local SRC, DST = J(base, _T'nonempty'), J(base, _T'tmp2')\r\n  assert_nil  (fs.copy(SRC, DST))\r\n  assert_false(fs.exists(DST))\r\nend\r\n\r\nfunction test_move_force_dir()\r\n  local SRC, DST = J(base, _T'from.dat'), J(base, _T'to')\r\n  assert_nil( fs.move(SRC, DST, true ) )\r\n  assert_equal(data, read_file(SRC))\r\n  assert_equal(DST, fs.isdir(DST))\r\nend\r\n\r\nfunction test_move_force_dir2()\r\n  local SRC, DST = J(base, _T'tmp'), J(base, _T'to')\r\n  assert_nil( fs.move(SRC, DST, true ))\r\n  assert_equal(SRC, fs.isdir(SRC))\r\n  assert_equal(DST, fs.isdir(DST))\r\nend\r\n\r\nfunction test_copy_force_dir()\r\n  local SRC, DST = J(base, _T'from.dat'), J(base, _T'to')\r\n  assert_nil( fs.copy(SRC, DST, true ))\r\n  assert_equal(data, read_file(SRC))\r\n  assert_equal(DST, fs.isdir(DST))\r\nend\r\n\r\nend\r\n\r\nlocal _ENV = TEST_CASE(name .. \": basic iteration\")   if true then\r\n\r\nlocal cwd, base\r\nlocal data = \"123\\r\\n456\"\r\nlocal files\r\n\r\nfunction teardown()\r\n  collectgarbage\"collect\" -- dir cleanup\r\n  fs.chdir(cwd)\r\n  for _, f in ipairs(files) do\r\n    fs.remove(f)\r\n  end\r\n  fs.rmdir(J(base, _T\"1\"))\r\n  fs.rmdir(base)\r\nend\r\n\r\nfunction setup()\r\n  cwd = fs.currentdir()\r\n  base = J(cwd, _T\"tmp\")\r\n  files = {\r\n    J(base, _T\"test\"),\r\n    J(base, _T\"test.txt\"),\r\n    J(base, _T\"test.dat\"),\r\n    J(base, _T\"123.test\"),\r\n  }\r\n  teardown()\r\n  assert_true(fs.mkdir(base))\r\n  assert_true(fs.mkdir(J(base, _T\"1\")))\r\n  for _, f in ipairs(files) do\r\n    assert(mkfile(f, data))\r\n  end\r\nend\r\n\r\nfunction test_dir()\r\n  local t = clone(files)\r\n  table.insert(t, J(base, _T\".\"))\r\n  table.insert(t, J(base, _T\"..\"))\r\n  table.insert(t, J(base, _T\"1\"))\r\n  local n = 0\r\n  for f in fs.dir(base) do\r\n    assert(ifind(t, J(base, f)), f)\r\n    n = n + 1\r\n  end\r\n  assert_equal(#t, n)\r\nend\r\n\r\nfunction test_each()\r\n  local t = clone(files)\r\n  table.insert(t, J(base, _T\"1\"))\r\n  local n = 0\r\n  assert_nil(fs.foreach(base .. DIR_SEP, function(f, a)\r\n    assert_string(a.mode)\r\n    assert_number(a.size)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end))\r\n  assert_equal(#t, n)\r\nend\r\n\r\nfunction test_each_impl()\r\n  local t = clone(files)\r\n  table.insert(t, J(base, _T\"1\"))\r\n  local n = 0\r\n  assert_nil(fs.each_impl{\r\n    file = base .. DIR_SEP,\r\n    callback = function(f, a)\r\n      assert(ifind(t, f), f)\r\n      n = n + 1\r\n    end}\r\n  )\r\n  assert_equal(#t, n)\r\nend\r\n\r\nfunction test_each_impl_generic_for()\r\n  local t = clone(files)\r\n  table.insert(t, J(base, _T\"1\"))\r\n  local n = 0\r\n  for f in fs.each_impl{file = base .. DIR_SEP} do\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end\r\n  assert_equal(#t, n)\r\nend\r\n\r\n\r\nfunction test_each_relpath()\r\n  local base = J(_T'.', _T\"tmp\")\r\n  local t = {\r\n    J(base, _T\"1\"),\r\n    J(base, _T\"test\"),\r\n    J(base, _T\"test.txt\"),\r\n    J(base, _T\"test.dat\"),\r\n    J(base, _T\"123.test\"),\r\n  }\r\n\r\n  local n = 0\r\n  assert_nil(fs.foreach(base .. DIR_SEP, function(f, a)\r\n    assert_string(a.mode)\r\n    assert_number(a.size)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end))\r\n  assert_equal(#t, n)\r\nend\r\n\r\nfunction test_each_skipdots()\r\n  local t = clone(files)\r\n  table.insert(t, J(base, _T\".\"))\r\n  table.insert(t, J(base, _T\"..\"))\r\n  table.insert(t, J(base, _T\"1\"))\r\n  local n = 0\r\n  assert_nil(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end,{skipdots=false}))\r\n  assert_equal(#t, n)\r\nend\r\n\r\nfunction test_each_skipfiles()\r\n  local t = {}\r\n  table.insert(t, J(base, _T\".\"))\r\n  table.insert(t, J(base, _T\"..\"))\r\n  table.insert(t, J(base, _T\"1\"))\r\n  local n = 0\r\n  assert_nil(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end,{skipdots=false;skipfiles=true}))\r\n  assert_equal(#t, n)\r\nend\r\n\r\nfunction test_each_skipdirs()\r\n  local t = files\r\n  local n = 0\r\n  assert_nil(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end,{skipdirs=true}))\r\n  assert_equal(#t, n)\r\nend\r\n\r\nfunction test_each_break()\r\n  local n = 0\r\n  assert_equal(123, fs.foreach(base .. DIR_SEP, function(f)\r\n    n = n + 1\r\n    return 123\r\n  end))\r\n  assert_equal(1, n)\r\nend\r\n\r\nend\r\n\r\nlocal _ENV = TEST_CASE(name .. \": recurse iteration\") if true then\r\n\r\nlocal cwd, base\r\nlocal data = \"123\\r\\n456\"\r\nlocal files\r\n\r\nfunction teardown()\r\n  collectgarbage\"collect\" -- dir cleanup\r\n  fs.chdir(cwd)\r\n  for _, f in ipairs(files) do\r\n    fs.remove(f)\r\n  end\r\n  fs.rmdir(J(base, _T\"3\"))\r\n  fs.rmdir(J(base, _T\"2\"))\r\n  fs.rmdir(J(base, _T\"1\"))\r\n  fs.rmdir(base)\r\nend\r\n\r\nfunction setup()\r\n  cwd = fs.currentdir()\r\n  base = J(cwd, _T\"tmp\")\r\n  files = {\r\n    J(base, _T\"test\"),\r\n    J(base, _T\"test.txt\"),\r\n    J(base, _T\"test.dat\"),\r\n    J(base, _T\"123.test\"),\r\n    J(base, _T\"1\", _T\"a1.txt\"),\r\n    J(base, _T\"1\", _T\"a2.dat\"),\r\n    J(base, _T\"1\", _T\"b1.txt\"),\r\n    J(base, _T\"1\", _T\"b2.dat\"),\r\n    J(base, _T\"2\", _T\"a1.txt\"),\r\n    J(base, _T\"2\", _T\"a2.dat\"),\r\n    J(base, _T\"2\", _T\"b1.txt\"),\r\n    J(base, _T\"2\", _T\"b2.dat\"),\r\n  }\r\n  teardown()\r\n  assert_true(fs.mkdir(base))\r\n  assert_true(fs.mkdir(J(base, _T\"1\")))\r\n  assert_true(fs.mkdir(J(base, _T\"2\")))\r\n  assert_true(fs.mkdir(J(base, _T\"3\")))\r\n  for _, f in ipairs(files) do\r\n    -- print(\">>> \", Q(f))\r\n    assert(mkfile(f, data))\r\n  end\r\nend\r\n\r\nfunction test_each()\r\n  local t = clone(files)\r\n  table.insert(t, J(base, _T\"1\"))\r\n  table.insert(t, J(base, _T\"2\"))\r\n  table.insert(t, J(base, _T\"3\"))\r\n  local n = 0\r\n  assert_nil(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end,{recurse=true}))\r\n  assert_equal(#t, n)\r\nend\r\n\r\nfunction test_each_reverse_true()\r\n  local dir  = J(base, _T\"1\")\r\n  local file = J(dir,  _T\"a1.txt\")\r\n  assert_true(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert_not_equal(up(dir), up(f))\r\n    return up(file) == up(f)\r\n  end,{recurse=true;reverse=true}))\r\nend\r\n\r\nfunction test_each_reverse_false()\r\n  local dir  = J(base, _T\"1\")\r\n  local file = J(dir,  _T\"a1.txt\")\r\n  assert_true(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert_not_equal(up(file), up(f))\r\n    return up(dir) == up(f)\r\n  end,{recurse=true;reverse=false}))\r\nend\r\n\r\nfunction test_each_reverse_nil()\r\n  local dir  = J(base, _T\"1\")\r\n  local file = J(dir,  _T\"a1.txt\")\r\n  assert_true(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert_not_equal(up(file), up(f))\r\n    return up(dir) == up(f)\r\n  end,{recurse=true;reverse=nil}))\r\nend\r\n\r\nfunction test_each_skipdots()\r\n  local t = clone(files)\r\n  table.insert(t, J(base, _T\".\"))\r\n  table.insert(t, J(base, _T\"..\"))\r\n  table.insert(t, J(base, _T\"1\"))\r\n  table.insert(t, J(base, _T\"1\", _T\".\"))\r\n  table.insert(t, J(base, _T\"1\", _T\"..\"))\r\n  table.insert(t, J(base, _T\"2\"))\r\n  table.insert(t, J(base, _T\"2\", _T\".\"))\r\n  table.insert(t, J(base, _T\"2\", _T\"..\"))\r\n  table.insert(t, J(base, _T\"3\"))\r\n  table.insert(t, J(base, _T\"3\", _T\".\"))\r\n  table.insert(t, J(base, _T\"3\", _T\"..\"))\r\n  local n = 0\r\n  assert_nil(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end,{recurse=true;skipdots=false}))\r\n  assert_equal(#t, n)\r\nend\r\n\r\nfunction test_each_delay()\r\n  local t = clone(files)\r\n  table.insert(t, J(base, _T\"1\"))\r\n  table.insert(t, J(base, _T\"2\"))\r\n  table.insert(t, J(base, _T\"3\"))\r\n  local n = 0\r\n  assert_nil(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end,{recurse=true;delay=true}))\r\n  assert_equal(#t, n)\r\nend\r\n\r\nfunction test_each_skipdirs()\r\n  local t = files\r\n  local n = 0\r\n  assert_nil(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert(ifind(t, f), _t(f))\r\n    n = n + 1\r\n  end,{recurse=true;skipdirs=true;}))\r\n  assert_equal(#t, n)\r\nend\r\n\r\nfunction test_each_break()\r\n  local n = 0\r\n  assert_equal(\"break\", fs.foreach(base .. DIR_SEP, function(f)\r\n    if up(f) == up( J(base, _T\"2\", _T\"a2.dat\") ) then\r\n      n = 1\r\n      return \"break\"\r\n    end\r\n    n = 0\r\n  end,{recurse=true}))\r\n  assert_equal(1, n)\r\nend\r\n\r\nfunction test_each_break_delay()\r\n  local n = 0\r\n  assert_equal(\"break\", fs.foreach(base .. DIR_SEP, function(f)\r\n    if up(f) == up( J(base, _T\"2\", _T\"a2.dat\") ) then\r\n      n = 1\r\n      return \"break\"\r\n    end\r\n    n = 0\r\n  end,{recurse=true;delay=true;}))\r\n  assert_equal(1, n)\r\nend\r\n\r\nfunction test_each_mask_basename_only()\r\n  local t = {\r\n    J(base, _T\"123.test\"),\r\n    J(base, _T\"1\"),\r\n    J(base, _T\"1\", _T\"a1.txt\"),\r\n    J(base, _T\"1\", _T\"b1.txt\"),\r\n    J(base, _T\"2\", _T\"a1.txt\"),\r\n    J(base, _T\"2\", _T\"b1.txt\"),\r\n  }\r\n  local n = 0\r\n  assert_nil(fs.foreach(J(base, _T\"*1*\"), function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end,{recurse=true}))\r\n  assert_equal(#t, n)\r\nend\r\n\r\nfunction test_each_mask_ext()\r\n  local t = {\r\n    J(base, _T\"test.dat\"),\r\n    J(base, _T\"1\", _T\"a2.dat\"),\r\n    J(base, _T\"1\", _T\"b2.dat\"),\r\n    J(base, _T\"2\", _T\"a2.dat\"),\r\n    J(base, _T\"2\", _T\"b2.dat\"),\r\n  }\r\n  local n = 0\r\n  assert_nil(fs.foreach(J(base, _T\"*.dat\"), function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end,{recurse=true}))\r\n  assert_equal(#t, n)\r\nend\r\n\r\nfunction test_each_attr()\r\n  local F = clone(files)\r\n  table.insert(F, J(base, _T\"1\"))\r\n  table.insert(F, J(base, _T\"2\"))\r\n  table.insert(F, J(base, _T\"3\"))\r\n  local N = 0\r\n  assert_nil(fs.each_impl{\r\n    file=base .. DIR_SEP, recurse=true,\r\n    param = \"fpnmaztcl\",\r\n    callback = function(f,p,n,m,a,z,t,c,l)\r\n      local attr = assert(fs.attributes(f))\r\n      assert(ifind(F, f), f)\r\n      assert_string(f)\r\n      assert_string(p)\r\n      assert_string(n)\r\n      assert_string(m)\r\n      assert_table(a)\r\n      assert_number(z)\r\n      assert_number(t)\r\n      assert_number(c)\r\n      assert_number(l)\r\n      assert_equal(attr.mode         , m)\r\n      assert_equal(attr.size         , z)\r\n      assert_equal(attr.modification , t)\r\n      assert_equal(attr.change       , c)\r\n      assert_equal(attr.access       , l)\r\n      assert_equal(m, a.mode         )\r\n      assert_equal(z, a.size         )\r\n      assert_equal(t, a.modification )\r\n      assert_equal(c, a.change       )\r\n      assert_equal(l, a.access       )\r\n      N = N + 1\r\n    end,\r\n  })\r\n  assert_equal(#F, N)\r\nend\r\n\r\nfunction test_each_attr_generic_for()\r\n  local F = clone(files)\r\n  table.insert(F, J(base, _T\"1\"))\r\n  table.insert(F, J(base, _T\"2\"))\r\n  table.insert(F, J(base, _T\"3\"))\r\n  local N = 0\r\n  for f,p,n,m,a,z,t,c,l in fs.each_impl{\r\n    file=base .. DIR_SEP, recurse=true,\r\n    param = \"fpnmaztcl\",\r\n  }do\r\n    local attr = assert(fs.attributes(f))\r\n    assert(ifind(F, f), _t(f))\r\n    assert_string(f)\r\n    assert_string(p)\r\n    assert_string(n)\r\n    assert_string(m)\r\n    assert_table(a)\r\n    assert_number(z)\r\n    assert_number(t)\r\n    assert_number(c)\r\n    assert_number(l)\r\n    assert_equal(attr.mode         , m)\r\n    assert_equal(attr.size         , z)\r\n    assert_equal(attr.modification , t)\r\n    assert_equal(attr.change       , c)\r\n    assert_equal(attr.access       , l)\r\n    assert_equal(m, a.mode         )\r\n    assert_equal(z, a.size         )\r\n    assert_equal(t, a.modification )\r\n    assert_equal(c, a.change       )\r\n    assert_equal(l, a.access       )\r\n    N = N + 1\r\n  end\r\n  assert_equal(#F, N)\r\nend\r\n\r\nend\r\n\r\nlocal _ENV = TEST_CASE(name .. \": mask\")              if true then\r\n\r\nlocal cwd, base\r\nlocal data = \"123\\r\\n456\"\r\nlocal files\r\n\r\nfunction teardown()\r\n  collectgarbage\"collect\" -- dir cleanup\r\n  fs.chdir(cwd)\r\n  for _, f in ipairs(files) do\r\n    fs.remove(f)\r\n  end\r\n  fs.rmdir(base)\r\nend\r\n\r\nfunction setup()\r\n  cwd = fs.currentdir()\r\n  base = J(cwd, _T\"tmp\")\r\n  files = {\r\n    J(base, _T\"test\"),\r\n    J(base, _T\"test.txt\"),\r\n    J(base, _T\"test.txtdat\"),\r\n    J(base, _T\"test.txt.dat\"),\r\n  }\r\n  teardown()\r\n  assert_true(fs.mkdir(base))\r\n  for _, f in ipairs(files) do\r\n    assert(mkfile(f, data))\r\n  end\r\nend\r\n\r\nfunction test_ext1()\r\n  local F = clone(files)\r\n  local n = 0\r\n  table.remove(F,1)\r\n  table.remove(F,3)\r\n  fs.foreach(base .. DIR_SEP .. _T\"*.txt\", function(f)\r\n    assert(ifind(F, f), _t(f))\r\n    n = n + 1\r\n  end)\r\n  assert_equal(#F, n)\r\nend\r\n\r\nfunction test_ext2()\r\n  local F = clone(files)\r\n  local n = 0\r\n  table.remove(F,1)\r\n  table.remove(F,3)\r\n  fs.foreach(base .. DIR_SEP .. _T\"test*.txt\", function(f)\r\n    assert(ifind(F, f), _t(f))\r\n    n = n + 1\r\n  end)\r\n  assert_equal(#F, n)\r\nend\r\n\r\nfunction test_ext3()\r\n  local F = clone(files)\r\n  local n = 0\r\n  table.remove(F,1)\r\n  table.remove(F,2)\r\n  table.remove(F,2)\r\n  fs.foreach(base .. DIR_SEP .. _T\"test?.txt\", function(f)\r\n    assert(ifind(F, f), _t(f))\r\n    n = n + 1\r\n  end)\r\n  assert_equal(#F, n)\r\nend\r\n\r\nfunction test_noext()\r\n  local F = clone(files)\r\n  local n = 0\r\n  table.remove(F,2)\r\n  table.remove(F,2)\r\n  table.remove(F,2)\r\n  fs.foreach(base .. DIR_SEP .. _T\"test\", function(f)\r\n    assert(ifind(F, f), _t(f))\r\n    n = n + 1\r\n  end)\r\n  assert_equal(#F, n)\r\nend\r\n\r\nfunction test_full()\r\n  local F = clone(files)\r\n  local n = 0\r\n  table.remove(F,1)\r\n  table.remove(F,2)\r\n  table.remove(F,2)\r\n  fs.foreach(base .. DIR_SEP .. _T\"test.txt\", function(f)\r\n    assert(ifind(F, f), _t(f))\r\n    n = n + 1\r\n  end)\r\n  assert_equal(#F, n)\r\nend\r\n\r\nend\r\n\r\nlocal _ENV = TEST_CASE(name .. \": mask2\")             if true then\r\n\r\nlocal cwd, base\r\nlocal data = \"123\\r\\n456\"\r\nlocal files\r\n\r\nfunction teardown()\r\n  collectgarbage\"collect\" -- dir cleanup\r\n  fs.chdir(cwd)\r\n  for _, f in ipairs(files) do\r\n    fs.remove(f)\r\n  end\r\n  fs.rmdir(base)\r\nend\r\n\r\nfunction setup()\r\n  cwd = fs.currentdir()\r\n  base = J(cwd, _T\"tmp\")\r\n  files = {\r\n    J(base, _T\".txt\"),\r\n    J(base, _T\"1.txt\"),\r\n    J(base, _T\"1.txtdat\"),\r\n    J(base, _T\".txtdat\"),\r\n    J(base, _T\".txt.dat\"),\r\n    J(base, _T\".dat.txt\"),\r\n  }\r\n  teardown()\r\n  assert_true(fs.mkdir(base))\r\n  for _, f in ipairs(files) do\r\n    assert(mkfile(f, data))\r\n  end\r\nend\r\n\r\nfunction test_ext1()\r\n  local F = {\r\n    J(base, _T\".txt\"),\r\n    J(base, _T\"1.txt\"),\r\n    J(base, _T\"1.txtdat\"),\r\n    J(base, _T\".dat.txt\"),\r\n  }\r\n\r\n  fs.foreach(base .. DIR_SEP .. _T\"*.txt\", function(f)\r\n    local s = (_t(f):sub(-8) == (DIR_SEP .. \".txtdat\"))\r\n    if s then skip(\"FIXME. pat:`*.txt` should not match `.txtdat` but shuld match `1.txtdat` (for windows compat)\")\r\n    else table.remove(F,assert_number(ifind(F, f), _t(f))) end\r\n  end)\r\n  local _, str = next(F)\r\n  assert_equal(nil, _t(str))\r\nend\r\n\r\nfunction test_ext2()\r\n  local F = {\r\n    J(base, _T\".txt\"),\r\n    J(base, _T\".txt.dat\"),\r\n    J(base, _T\".txtdat\"),\r\n    J(base, _T\"1.txt\"),\r\n    J(base, _T\"1.txtdat\"),\r\n    J(base, _T\".dat.txt\"),\r\n  }\r\n\r\n  fs.foreach(base .. DIR_SEP .. _T\"*.txt*\", function(f)\r\n    table.remove(F,assert_number(ifind(F, f), _t(f)))\r\n  end)\r\n  local _, str = next(F)\r\n  assert_equal(nil, _t(str))\r\nend\r\n\r\nfunction test_ext3()\r\n  local F = {\r\n    J(base, _T\".txt\"),\r\n    J(base, _T\"1.txt\"),\r\n  }\r\n  fs.foreach(base .. DIR_SEP .. _T\"?.txt\", function(f)\r\n    table.remove(F,assert_number(ifind(F, f), _t(f)))\r\n  end)\r\n  local _, str = next(F)\r\n  assert_equal(nil, _t(str))\r\nend\r\n\r\nfunction test_ext4()\r\n  local F = {\r\n    J(base, _T\"1.txt\"),\r\n  }\r\n  fs.foreach(base .. DIR_SEP .. _T\"1?.txt\", function(f)\r\n    table.remove(F,assert_number(ifind(F, f), _t(f)))\r\n  end)\r\n  local _, str = next(F)\r\n  assert_equal(nil, _t(str))\r\nend\r\n\r\nfunction test_ext5()\r\n  local F = {\r\n    J(base, _T\"1.txt\"),\r\n    J(base, _T\"1.txtdat\"),\r\n  }\r\n  fs.foreach(base .. DIR_SEP .. _T\"1*.txt\", function(f)\r\n    table.remove(F,assert_number(ifind(F, f), _t(f)))\r\n  end)\r\n  local _, str = next(F)\r\n  assert_equal(nil, _t(str))\r\nend\r\n\r\nfunction test_ext6()\r\n  local F = {\r\n    J(base, _T\".txt\"),\r\n    J(base, _T\".txt.dat\"),\r\n    J(base, _T\".txtdat\"),\r\n    J(base, _T\"1.txt\"),\r\n    J(base, _T\"1.txtdat\"),\r\n    J(base, _T\".dat.txt\"),\r\n  }\r\n\r\n  fs.foreach(base .. DIR_SEP .. _T\"*.tx*t\", function(f)\r\n    table.remove(F,assert_number(ifind(F, f), _t(f)))\r\n  end)\r\n  local _, str = next(F)\r\n  assert_equal(nil, _t(str))\r\nend\r\n\r\nend\r\n\r\nlocal _ENV = TEST_CASE\"os test\"                       if name == 'lfs' and false then\r\n\r\nlocal cwd, base\r\nlocal data  = \"123\\r\\n456\\n789\"\r\nlocal rdata = \"789\\r\\n123\\n456\"\r\nlocal tmp   = \"tmp\"\r\n\r\nfunction teardown()\r\n  fs.chdir(cwd)\r\n  fs.remove(J(base, _T\"test.txt\"))\r\n  fs.remove(J(base, _T\"test2.txt\"))\r\n  fs.remove(J(base, _T'nonempty', _T'tmp.dat'))\r\n  fs.remove(J(base, _T'tmp2',     _T'tmp.dat'))\r\n  fs.rmdir(base)\r\n\r\n  fs.remove(J(base, _T'from.dat'))\r\n  fs.remove(J(base, _T'to.dat'  ))\r\n  fs.remove(J(base, _T'to.txt'  ))\r\n  fs.remove(J(base, _T'to'      ))\r\n  fs.rmdir (J(base, _T'to'      ))\r\n  fs.rmdir (J(base, _T'tmp'     ))\r\n  fs.rmdir (J(base, _T'tmp2'    ))\r\n  fs.rmdir (J(base, _T'nonempty'))\r\n  fs.rmdir (base)\r\nend\r\n\r\nfunction setup()\r\n  cwd = fs.currentdir()\r\n  base = J(cwd, _T(tmp))\r\n  assert_false(fs.exists(base), _t(base) .. \" already exists!\")\r\n\r\n  teardown()\r\n  assert_true(fs.mkdir(base))\r\n  assert_true(fs.mkdir(J(base, _T'to')))\r\n  assert_true(fs.mkdir(J(base, _T'tmp')))\r\n  assert_true(fs.mkdir(J(base, _T'nonempty')))\r\n\r\n  assert(mkfile(J(base, _T'from.dat'), data ))\r\n  assert(mkfile(J(base, _T'to.dat'  ), rdata))\r\n  assert(mkfile(J(base, _T'nonempty', _T'tmp.dat'), data ))\r\nend\r\n\r\nfunction test_rename_file_to_file()\r\n  local SRC, DST = J(base, _T'from.dat'), J(base, _T'to.dat')\r\n  assert_equal(SRC, fs.isfile(SRC))\r\n  assert_equal(DST, fs.isfile(DST))\r\n  assert_nil(os.rename(SRC, DST))\r\n  assert_equal(SRC, fs.isfile(SRC))\r\n  assert_equal(DST, fs.isfile(DST))\r\n  assert_equal(data,  read_file(SRC))\r\n  assert_equal(rdata, read_file(DST))\r\nend\r\n\r\nfunction test_rename_file_to_dir()\r\n  local SRC, DST = J(base, _T'from.dat'), J(base, _T'to')\r\n  assert_equal(SRC, fs.isfile(SRC))\r\n  assert_equal(DST, fs.isdir(DST))\r\n  assert_nil(os.rename(SRC, DST))\r\n  assert_equal(SRC, fs.isfile(SRC))\r\n  assert_equal(DST, fs.isdir(DST))\r\nend\r\n\r\nfunction test_remove_empty_dir()\r\n  local SRC = J(base, _T'to')\r\n  assert_equal(SRC, fs.isdir(SRC))\r\n  assert_nil(os.remove(SRC))\r\n  assert_equal(SRC, fs.isdir(SRC))\r\nend\r\n\r\nfunction test_remove_nonempty_dir()\r\n  local SRC = J(base, _T'nonempty')\r\n  assert_equal(SRC, fs.isdir(SRC))\r\n  assert_nil(os.remove(SRC))\r\n  assert_equal(SRC, fs.isdir(SRC))\r\nend\r\n\r\nend\r\n\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "local fs, _T, _t = fs, _T, _t",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "local DIR_SEP = fs.DIR_SEP",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "local function mkfile(P, data)\r\n  local f, e = io.open(_t(P), \"w+b\")\r\n  if not f then return nil, e end\r\n  if data then assert(f:write(data)) end\r\n  f:close()\r\n  return P\r\nend",
    "type": "statement:localfunction"
  }, {
    "id": 29,
    "text": "local f, e = io.open(_t(P), \"w+b\")",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "if not f then return nil, e end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "if data then assert(f:write(data)) end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "assert(f:write(data))",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "local function read_file(P)\r\n  local f, err = io.open(_t(P), \"rb\")\r\n  if not f then return nil, err end\r\n  local data, err = f:read(\"*all\")\r\n  f:close()\r\n  if data then return data end\r\n  return nil, err\r\nend",
    "type": "statement:localfunction"
  }, {
    "id": 35,
    "text": "local f, err = io.open(_t(P), \"rb\")",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "if not f then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "local data, err = f:read(\"*all\")",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "if data then return data end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "local function J(...)\r\n  return (table.concat({...}, DIR_SEP))\r\nend",
    "type": "statement:localfunction"
  }, {
    "id": 40,
    "text": "local _ENV = TEST_CASE(name .. \": basic\")",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "if true then\r\n\r\nlocal cwd\r\n\r\nfunction setup()\r\n  cwd = assert_string(fs.currentdir())\r\nend\r\n\r\nfunction teardown()\r\n  fs.chdir(cwd)\r\n  fs.rmdir(J(cwd, _T\"1\"))\r\nend\r\n\r\nfunction test_cwd()\r\n  assert_string(cwd)\r\n  assert_equal(cwd, fs.exists(cwd))\r\n  assert_equal(cwd, fs.isdir(cwd) )\r\n  assert_false(fs.isfile(cwd))\r\nend\r\n\r\nfunction test_md()\r\n  local P = J(cwd, _T\"1\")\r\n  assert_false(fs.exists(P))\r\n  assert_true (fs.mkdir(P))\r\n  assert_nil  (fs.mkdir(P))\r\n  assert_equal(P, fs.exists(P))\r\n  assert_true (fs.chdir(P))\r\n  assert_equal(P, fs.currentdir())\r\n  assert_true (fs.chdir(cwd))\r\n  assert_equal(cwd, fs.currentdir())\r\n  assert_true (fs.rmdir(P))\r\n  assert_false(fs.exists(P))\r\nend\r\n\r\nfunction test_tmpdir()\r\n  local p = assert_string(fs.tmpdir())\r\n  assert_equal(p, fs.isdir(p))\r\nend\r\n\r\nend",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "local cwd",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "function setup()\r\n  cwd = assert_string(fs.currentdir())\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 44,
    "text": "cwd = assert_string(fs.currentdir())",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "function teardown()\r\n  fs.chdir(cwd)\r\n  fs.rmdir(J(cwd, _T\"1\"))\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 46,
    "text": "fs.chdir(cwd)",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "fs.rmdir(J(cwd, _T\"1\"))",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "function test_cwd()\r\n  assert_string(cwd)\r\n  assert_equal(cwd, fs.exists(cwd))\r\n  assert_equal(cwd, fs.isdir(cwd) )\r\n  assert_false(fs.isfile(cwd))\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 49,
    "text": "assert_string(cwd)",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "assert_equal(cwd, fs.exists(cwd))",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "assert_equal(cwd, fs.isdir(cwd) )",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "assert_false(fs.isfile(cwd))",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "function test_md()\r\n  local P = J(cwd, _T\"1\")\r\n  assert_false(fs.exists(P))\r\n  assert_true (fs.mkdir(P))\r\n  assert_nil  (fs.mkdir(P))\r\n  assert_equal(P, fs.exists(P))\r\n  assert_true (fs.chdir(P))\r\n  assert_equal(P, fs.currentdir())\r\n  assert_true (fs.chdir(cwd))\r\n  assert_equal(cwd, fs.currentdir())\r\n  assert_true (fs.rmdir(P))\r\n  assert_false(fs.exists(P))\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 54,
    "text": "local P = J(cwd, _T\"1\")",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "assert_false(fs.exists(P))",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "assert_true (fs.mkdir(P))",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "assert_nil  (fs.mkdir(P))",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "assert_equal(P, fs.exists(P))",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "assert_true (fs.chdir(P))",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "assert_equal(P, fs.currentdir())",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "assert_true (fs.chdir(cwd))",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "assert_equal(cwd, fs.currentdir())",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "assert_true (fs.rmdir(P))",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "function test_tmpdir()\r\n  local p = assert_string(fs.tmpdir())\r\n  assert_equal(p, fs.isdir(p))\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 65,
    "text": "local p = assert_string(fs.tmpdir())",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "assert_equal(p, fs.isdir(p))",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "local _ENV = TEST_CASE(name .. \": file manipulation\")",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "if true then\r\n\r\nlocal cwd, base\r\nlocal data =\"123\\r\\n456\\n789\"\r\n\r\nfunction teardown()\r\n  fs.chdir(cwd)\r\n  fs.remove(J(base, _T\"test.txt\"))\r\n  fs.remove(J(base, _T\"test2.txt\"))\r\n  fs.rmdir(base)\r\nend\r\n\r\nfunction setup()\r\n  cwd = fs.currentdir()\r\n  base = J(cwd, _T\"tmp\")\r\n\r\n  teardown()\r\n  assert_true(fs.mkdir(base))\r\n  assert(mkfile(J(base, _T\"test.txt\"), data))\r\nend\r\n\r\nfunction test_remove()\r\n  assert_true(fs.remove(J(base, _T\"test.txt\")))\r\n  assert_nil(fs.remove(J(base, _T\"test.txt\")))\r\nend\r\n\r\nfunction test_remove_dir()\r\n  assert_nil(fs.remove(base))\r\n  assert_equal(base, fs.isdir(base))\r\nend\r\n\r\nfunction test_rmdir()\r\n  assert_nil(fs.rmdir(base))\r\n  assert_equal(base, fs.isdir(base))\r\n  assert_true(fs.remove(J(base, _T\"test.txt\")))\r\n  assert_true(fs.rmdir(base))\r\nend\r\n\r\nfunction test_size()\r\n  assert_equal(#data, fs.size(J(base, _T\"test.txt\")))\r\nend\r\n\r\nfunction test_touch()\r\n  local SRC = J(base, _T\"test.txt\")\r\n  local t1 = assert_number(fs.mtime(SRC)) + 100\r\n  assert_true(fs.touch(SRC, t1))\r\n  local t2 = assert_number(fs.mtime(SRC))\r\n  assert(math.abs(t2-t1) <= 2)\r\n  local t2 = assert_number(fs.atime(SRC))\r\n  assert(math.abs(t2-t1) <= 2)\r\n  assert_true(fs.touch(SRC, t1, t1 + 100))\r\n  local t2 = assert_number(fs.mtime(SRC))\r\n  assert(math.abs(t2-(t1+100)) <= 2)\r\n  local t2 = assert_number(fs.atime(SRC))\r\n  assert(math.abs(t2-t1) <= 2)\r\nend\r\n\r\nfunction test_touch_non_exists()\r\n  local SRC = J(base, _T\"test2.txt\")\r\n  assert_false(fs.exists(SRC))\r\n  assert_nil(fs.touch(SRC))\r\n  assert_false(fs.exists(SRC))\r\nend\r\n\r\nend",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "local cwd, base",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "local data =\"123\\r\\n456\\n789\"",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "function teardown()\r\n  fs.chdir(cwd)\r\n  fs.remove(J(base, _T\"test.txt\"))\r\n  fs.remove(J(base, _T\"test2.txt\"))\r\n  fs.rmdir(base)\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 72,
    "text": "fs.remove(J(base, _T\"test.txt\"))",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "fs.remove(J(base, _T\"test2.txt\"))",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "fs.rmdir(base)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "function setup()\r\n  cwd = fs.currentdir()\r\n  base = J(cwd, _T\"tmp\")\r\n\r\n  teardown()\r\n  assert_true(fs.mkdir(base))\r\n  assert(mkfile(J(base, _T\"test.txt\"), data))\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 76,
    "text": "cwd = fs.currentdir()",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "base = J(cwd, _T\"tmp\")",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "teardown()",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "assert_true(fs.mkdir(base))",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "assert(mkfile(J(base, _T\"test.txt\"), data))",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "function test_remove()\r\n  assert_true(fs.remove(J(base, _T\"test.txt\")))\r\n  assert_nil(fs.remove(J(base, _T\"test.txt\")))\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 82,
    "text": "assert_true(fs.remove(J(base, _T\"test.txt\")))",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "assert_nil(fs.remove(J(base, _T\"test.txt\")))",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "function test_remove_dir()\r\n  assert_nil(fs.remove(base))\r\n  assert_equal(base, fs.isdir(base))\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 85,
    "text": "assert_nil(fs.remove(base))",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "assert_equal(base, fs.isdir(base))",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "function test_rmdir()\r\n  assert_nil(fs.rmdir(base))\r\n  assert_equal(base, fs.isdir(base))\r\n  assert_true(fs.remove(J(base, _T\"test.txt\")))\r\n  assert_true(fs.rmdir(base))\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 88,
    "text": "assert_nil(fs.rmdir(base))",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "assert_true(fs.rmdir(base))",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "function test_size()\r\n  assert_equal(#data, fs.size(J(base, _T\"test.txt\")))\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 91,
    "text": "assert_equal(#data, fs.size(J(base, _T\"test.txt\")))",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "function test_touch()\r\n  local SRC = J(base, _T\"test.txt\")\r\n  local t1 = assert_number(fs.mtime(SRC)) + 100\r\n  assert_true(fs.touch(SRC, t1))\r\n  local t2 = assert_number(fs.mtime(SRC))\r\n  assert(math.abs(t2-t1) <= 2)\r\n  local t2 = assert_number(fs.atime(SRC))\r\n  assert(math.abs(t2-t1) <= 2)\r\n  assert_true(fs.touch(SRC, t1, t1 + 100))\r\n  local t2 = assert_number(fs.mtime(SRC))\r\n  assert(math.abs(t2-(t1+100)) <= 2)\r\n  local t2 = assert_number(fs.atime(SRC))\r\n  assert(math.abs(t2-t1) <= 2)\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 93,
    "text": "local SRC = J(base, _T\"test.txt\")",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "local t1 = assert_number(fs.mtime(SRC)) + 100",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "assert_true(fs.touch(SRC, t1))",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "local t2 = assert_number(fs.mtime(SRC))",
    "type": "statement:localassign"
  }, {
    "id": 97,
    "text": "assert(math.abs(t2-t1) <= 2)",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "local t2 = assert_number(fs.atime(SRC))",
    "type": "statement:localassign"
  }, {
    "id": 99,
    "text": "assert_true(fs.touch(SRC, t1, t1 + 100))",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "assert(math.abs(t2-(t1+100)) <= 2)",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "function test_touch_non_exists()\r\n  local SRC = J(base, _T\"test2.txt\")\r\n  assert_false(fs.exists(SRC))\r\n  assert_nil(fs.touch(SRC))\r\n  assert_false(fs.exists(SRC))\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 102,
    "text": "local SRC = J(base, _T\"test2.txt\")",
    "type": "statement:localassign"
  }, {
    "id": 103,
    "text": "assert_false(fs.exists(SRC))",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "assert_nil(fs.touch(SRC))",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "local _ENV = TEST_CASE(name .. \": copy/move\")",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "if true then\r\n\r\nlocal cwd, base\r\nlocal data  = \"123\\r\\n456\\n789\"\r\nlocal rdata = \"789\\r\\n123\\n456\"\r\nlocal tmp   = \"tmp\"\r\n\r\nfunction teardown()\r\n  fs.chdir(cwd)\r\n  fs.remove(J(base, _T\"test.txt\"))\r\n  fs.remove(J(base, _T\"test2.txt\"))\r\n  fs.remove(J(base, _T'nonempty', _T'tmp.dat'))\r\n  fs.remove(J(base, _T'tmp2',     _T'tmp.dat'))\r\n  fs.rmdir(base)\r\n\r\n  fs.remove(J(base, _T'from.dat'))\r\n  fs.remove(J(base, _T'to.dat'  ))\r\n  fs.remove(J(base, _T'to.txt'  ))\r\n  fs.remove(J(base, _T'to'      ))\r\n  fs.remove(J(base, _T'tmp2'    ))\r\n  fs.rmdir (J(base, _T'to'      ))\r\n  fs.rmdir (J(base, _T'tmp'     ))\r\n  fs.rmdir (J(base, _T'tmp2'    ))\r\n  fs.rmdir (J(base, _T'nonempty'))\r\n  fs.rmdir (base)\r\nend\r\n\r\nfunction setup()\r\n  cwd = fs.currentdir()\r\n  base = J(cwd, _T(tmp))\r\n  assert_false(fs.exists(base), _t(base) .. \" already exists!\")\r\n\r\n  teardown()\r\n  assert_true(fs.mkdir(base))\r\n  assert_true(fs.mkdir(J(base, _T'to')))\r\n  assert_true(fs.mkdir(J(base, _T'tmp')))\r\n  assert_true(fs.mkdir(J(base, _T'nonempty')))\r\n\r\n  assert(mkfile(J(base, _T'from.dat'), data ))\r\n  assert(mkfile(J(base, _T'to.dat'  ), rdata))\r\n  assert(mkfile(J(base, _T'nonempty', _T'tmp.dat'), data ))\r\nend\r\n\r\nlocal function test_fail(operation)\r\n  local SRC, DST = J(base, _T'from.dat'), J(base, _T'to.dat')\r\n  assert_nil(operation(SRC, DST))\r\n  assert_equal(data,  read_file(SRC))\r\n  assert_equal(rdata, read_file(DST))\r\n\r\n  assert_nil(operation(SRC, DST, false))\r\n  assert_equal(data,  read_file(SRC))\r\n  assert_equal(rdata, read_file(DST))\r\n\r\n  assert_nil(operation(SRC, DST, nil))\r\n  assert_equal(data,  read_file(SRC))\r\n  assert_equal(rdata, read_file(DST))\r\n\r\n  SRC, DST = J(base, _T'from.dat'), J(base, _T'to')\r\n  assert_nil(operation(SRC, DST))\r\n  assert_equal(data,  read_file(SRC))\r\n  assert_equal(DST,   fs.isdir(DST) )\r\n\r\n  SRC, DST = J(base, _T'unknown.txt'), J(base, _T'to.dat')\r\n  assert_nil(operation(SRC, DST, true))\r\n  assert_false(fs.exists(SRC))\r\n  assert_equal(rdata, read_file(DST))\r\nend\r\n\r\nfunction test_move_fail()\r\n  test_fail(fs.move)\r\nend\r\n\r\nfunction test_copy_fail()\r\n  test_fail(fs.copy)\r\nend\r\n\r\nfunction test_move_pass()\r\n  local SRC, DST = J(base, _T'from.dat'), J(base, _T'to.txt')\r\n  assert_true(fs.move(SRC, DST))\r\n  assert_false(fs.exists(SRC))\r\n  assert_equal(data, read_file(DST))\r\nend\r\n\r\nfunction test_copy_pass()\r\n  local SRC, DST = J(base, _T'from.dat'), J(base, _T'to.txt')\r\n  assert_true(fs.copy(SRC, DST))\r\n  assert_equal(data, read_file(SRC))\r\n  assert_equal(data, read_file(DST))\r\nend\r\n\r\nfunction test_move_force_file()\r\n  local SRC, DST = J(base, _T'from.dat'), J(base, _T'to.dat')\r\n  assert_true( fs.move(SRC, DST, true ))\r\n  assert_false(fs.exists(SRC))\r\n  assert_equal(data, read_file(DST))\r\nend\r\n\r\nfunction test_copy_force_file()\r\n  local SRC, DST = J(base, _T'from.dat'), J(base, _T'to.dat')\r\n  assert_true( fs.copy(SRC, DST, true ))\r\n  assert_equal(data, read_file(SRC))\r\n  assert_equal(data, read_file(DST))\r\nend\r\n\r\nfunction test_move_empty_dir()\r\n  local SRC, DST = J(base, _T'tmp'), J(base, _T'tmp2')\r\n  assert_true( fs.move(SRC, DST) )\r\n  assert_false(fs.exists(SRC))\r\n  assert_equal(DST, fs.isdir(DST))\r\nend\r\n\r\nfunction test_move_nonempty_dir()\r\n  local SRC, DST = J(base, _T'nonempty'), J(base, _T'tmp2')\r\n  assert_true( fs.move(SRC, DST) )\r\n  assert_false(fs.exists(SRC))\r\n  assert_equal(DST, fs.isdir(DST))\r\nend\r\n\r\nfunction test_copy_empty_dir()\r\n  local SRC, DST = J(base, _T'tmp'), J(base, _T'tmp2')\r\n  assert_nil  (fs.copy(SRC, DST))\r\n  assert_false(fs.exists(DST))\r\nend\r\n\r\nfunction test_copy_nonempty_dir()\r\n  local SRC, DST = J(base, _T'nonempty'), J(base, _T'tmp2')\r\n  assert_nil  (fs.copy(SRC, DST))\r\n  assert_false(fs.exists(DST))\r\nend\r\n\r\nfunction test_move_force_dir()\r\n  local SRC, DST = J(base, _T'from.dat'), J(base, _T'to')\r\n  assert_nil( fs.move(SRC, DST, true ) )\r\n  assert_equal(data, read_file(SRC))\r\n  assert_equal(DST, fs.isdir(DST))\r\nend\r\n\r\nfunction test_move_force_dir2()\r\n  local SRC, DST = J(base, _T'tmp'), J(base, _T'to')\r\n  assert_nil( fs.move(SRC, DST, true ))\r\n  assert_equal(SRC, fs.isdir(SRC))\r\n  assert_equal(DST, fs.isdir(DST))\r\nend\r\n\r\nfunction test_copy_force_dir()\r\n  local SRC, DST = J(base, _T'from.dat'), J(base, _T'to')\r\n  assert_nil( fs.copy(SRC, DST, true ))\r\n  assert_equal(data, read_file(SRC))\r\n  assert_equal(DST, fs.isdir(DST))\r\nend\r\n\r\nend",
    "type": "statement:if"
  }, {
    "id": 107,
    "text": "local data  = \"123\\r\\n456\\n789\"",
    "type": "statement:localassign"
  }, {
    "id": 108,
    "text": "local rdata = \"789\\r\\n123\\n456\"",
    "type": "statement:localassign"
  }, {
    "id": 109,
    "text": "local tmp   = \"tmp\"",
    "type": "statement:localassign"
  }, {
    "id": 110,
    "text": "function teardown()\r\n  fs.chdir(cwd)\r\n  fs.remove(J(base, _T\"test.txt\"))\r\n  fs.remove(J(base, _T\"test2.txt\"))\r\n  fs.remove(J(base, _T'nonempty', _T'tmp.dat'))\r\n  fs.remove(J(base, _T'tmp2',     _T'tmp.dat'))\r\n  fs.rmdir(base)\r\n\r\n  fs.remove(J(base, _T'from.dat'))\r\n  fs.remove(J(base, _T'to.dat'  ))\r\n  fs.remove(J(base, _T'to.txt'  ))\r\n  fs.remove(J(base, _T'to'      ))\r\n  fs.remove(J(base, _T'tmp2'    ))\r\n  fs.rmdir (J(base, _T'to'      ))\r\n  fs.rmdir (J(base, _T'tmp'     ))\r\n  fs.rmdir (J(base, _T'tmp2'    ))\r\n  fs.rmdir (J(base, _T'nonempty'))\r\n  fs.rmdir (base)\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 111,
    "text": "fs.remove(J(base, _T'nonempty', _T'tmp.dat'))",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "fs.remove(J(base, _T'tmp2',     _T'tmp.dat'))",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "fs.remove(J(base, _T'from.dat'))",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "fs.remove(J(base, _T'to.dat'  ))",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "fs.remove(J(base, _T'to.txt'  ))",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "fs.remove(J(base, _T'to'      ))",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "fs.remove(J(base, _T'tmp2'    ))",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "fs.rmdir (J(base, _T'to'      ))",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "fs.rmdir (J(base, _T'tmp'     ))",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "fs.rmdir (J(base, _T'tmp2'    ))",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "fs.rmdir (J(base, _T'nonempty'))",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "fs.rmdir (base)",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "function setup()\r\n  cwd = fs.currentdir()\r\n  base = J(cwd, _T(tmp))\r\n  assert_false(fs.exists(base), _t(base) .. \" already exists!\")\r\n\r\n  teardown()\r\n  assert_true(fs.mkdir(base))\r\n  assert_true(fs.mkdir(J(base, _T'to')))\r\n  assert_true(fs.mkdir(J(base, _T'tmp')))\r\n  assert_true(fs.mkdir(J(base, _T'nonempty')))\r\n\r\n  assert(mkfile(J(base, _T'from.dat'), data ))\r\n  assert(mkfile(J(base, _T'to.dat'  ), rdata))\r\n  assert(mkfile(J(base, _T'nonempty', _T'tmp.dat'), data ))\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 124,
    "text": "base = J(cwd, _T(tmp))",
    "type": "statement:assign"
  }, {
    "id": 125,
    "text": "assert_false(fs.exists(base), _t(base) .. \" already exists!\")",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "assert_true(fs.mkdir(J(base, _T'to')))",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "assert_true(fs.mkdir(J(base, _T'tmp')))",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "assert_true(fs.mkdir(J(base, _T'nonempty')))",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "assert(mkfile(J(base, _T'from.dat'), data ))",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "assert(mkfile(J(base, _T'to.dat'  ), rdata))",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "assert(mkfile(J(base, _T'nonempty', _T'tmp.dat'), data ))",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "local function test_fail(operation)\r\n  local SRC, DST = J(base, _T'from.dat'), J(base, _T'to.dat')\r\n  assert_nil(operation(SRC, DST))\r\n  assert_equal(data,  read_file(SRC))\r\n  assert_equal(rdata, read_file(DST))\r\n\r\n  assert_nil(operation(SRC, DST, false))\r\n  assert_equal(data,  read_file(SRC))\r\n  assert_equal(rdata, read_file(DST))\r\n\r\n  assert_nil(operation(SRC, DST, nil))\r\n  assert_equal(data,  read_file(SRC))\r\n  assert_equal(rdata, read_file(DST))\r\n\r\n  SRC, DST = J(base, _T'from.dat'), J(base, _T'to')\r\n  assert_nil(operation(SRC, DST))\r\n  assert_equal(data,  read_file(SRC))\r\n  assert_equal(DST,   fs.isdir(DST) )\r\n\r\n  SRC, DST = J(base, _T'unknown.txt'), J(base, _T'to.dat')\r\n  assert_nil(operation(SRC, DST, true))\r\n  assert_false(fs.exists(SRC))\r\n  assert_equal(rdata, read_file(DST))\r\nend",
    "type": "statement:localfunction"
  }, {
    "id": 133,
    "text": "local SRC, DST = J(base, _T'from.dat'), J(base, _T'to.dat')",
    "type": "statement:localassign"
  }, {
    "id": 134,
    "text": "assert_nil(operation(SRC, DST))",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "assert_equal(data,  read_file(SRC))",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "assert_equal(rdata, read_file(DST))",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "assert_nil(operation(SRC, DST, false))",
    "type": "statement:functioncall"
  }, {
    "id": 138,
    "text": "assert_nil(operation(SRC, DST, nil))",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "SRC, DST = J(base, _T'from.dat'), J(base, _T'to')",
    "type": "statement:assign"
  }, {
    "id": 140,
    "text": "assert_equal(DST,   fs.isdir(DST) )",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "SRC, DST = J(base, _T'unknown.txt'), J(base, _T'to.dat')",
    "type": "statement:assign"
  }, {
    "id": 142,
    "text": "assert_nil(operation(SRC, DST, true))",
    "type": "statement:functioncall"
  }, {
    "id": 143,
    "text": "function test_move_fail()\r\n  test_fail(fs.move)\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 144,
    "text": "test_fail(fs.move)",
    "type": "statement:functioncall"
  }, {
    "id": 145,
    "text": "function test_copy_fail()\r\n  test_fail(fs.copy)\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 146,
    "text": "test_fail(fs.copy)",
    "type": "statement:functioncall"
  }, {
    "id": 147,
    "text": "function test_move_pass()\r\n  local SRC, DST = J(base, _T'from.dat'), J(base, _T'to.txt')\r\n  assert_true(fs.move(SRC, DST))\r\n  assert_false(fs.exists(SRC))\r\n  assert_equal(data, read_file(DST))\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 148,
    "text": "local SRC, DST = J(base, _T'from.dat'), J(base, _T'to.txt')",
    "type": "statement:localassign"
  }, {
    "id": 149,
    "text": "assert_true(fs.move(SRC, DST))",
    "type": "statement:functioncall"
  }, {
    "id": 150,
    "text": "assert_equal(data, read_file(DST))",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "function test_copy_pass()\r\n  local SRC, DST = J(base, _T'from.dat'), J(base, _T'to.txt')\r\n  assert_true(fs.copy(SRC, DST))\r\n  assert_equal(data, read_file(SRC))\r\n  assert_equal(data, read_file(DST))\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 152,
    "text": "assert_true(fs.copy(SRC, DST))",
    "type": "statement:functioncall"
  }, {
    "id": 153,
    "text": "assert_equal(data, read_file(SRC))",
    "type": "statement:functioncall"
  }, {
    "id": 154,
    "text": "function test_move_force_file()\r\n  local SRC, DST = J(base, _T'from.dat'), J(base, _T'to.dat')\r\n  assert_true( fs.move(SRC, DST, true ))\r\n  assert_false(fs.exists(SRC))\r\n  assert_equal(data, read_file(DST))\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 155,
    "text": "assert_true( fs.move(SRC, DST, true ))",
    "type": "statement:functioncall"
  }, {
    "id": 156,
    "text": "function test_copy_force_file()\r\n  local SRC, DST = J(base, _T'from.dat'), J(base, _T'to.dat')\r\n  assert_true( fs.copy(SRC, DST, true ))\r\n  assert_equal(data, read_file(SRC))\r\n  assert_equal(data, read_file(DST))\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 157,
    "text": "assert_true( fs.copy(SRC, DST, true ))",
    "type": "statement:functioncall"
  }, {
    "id": 158,
    "text": "function test_move_empty_dir()\r\n  local SRC, DST = J(base, _T'tmp'), J(base, _T'tmp2')\r\n  assert_true( fs.move(SRC, DST) )\r\n  assert_false(fs.exists(SRC))\r\n  assert_equal(DST, fs.isdir(DST))\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 159,
    "text": "local SRC, DST = J(base, _T'tmp'), J(base, _T'tmp2')",
    "type": "statement:localassign"
  }, {
    "id": 160,
    "text": "assert_true( fs.move(SRC, DST) )",
    "type": "statement:functioncall"
  }, {
    "id": 161,
    "text": "assert_equal(DST, fs.isdir(DST))",
    "type": "statement:functioncall"
  }, {
    "id": 162,
    "text": "function test_move_nonempty_dir()\r\n  local SRC, DST = J(base, _T'nonempty'), J(base, _T'tmp2')\r\n  assert_true( fs.move(SRC, DST) )\r\n  assert_false(fs.exists(SRC))\r\n  assert_equal(DST, fs.isdir(DST))\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 163,
    "text": "local SRC, DST = J(base, _T'nonempty'), J(base, _T'tmp2')",
    "type": "statement:localassign"
  }, {
    "id": 164,
    "text": "function test_copy_empty_dir()\r\n  local SRC, DST = J(base, _T'tmp'), J(base, _T'tmp2')\r\n  assert_nil  (fs.copy(SRC, DST))\r\n  assert_false(fs.exists(DST))\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 165,
    "text": "assert_nil  (fs.copy(SRC, DST))",
    "type": "statement:functioncall"
  }, {
    "id": 166,
    "text": "assert_false(fs.exists(DST))",
    "type": "statement:functioncall"
  }, {
    "id": 167,
    "text": "function test_copy_nonempty_dir()\r\n  local SRC, DST = J(base, _T'nonempty'), J(base, _T'tmp2')\r\n  assert_nil  (fs.copy(SRC, DST))\r\n  assert_false(fs.exists(DST))\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 168,
    "text": "function test_move_force_dir()\r\n  local SRC, DST = J(base, _T'from.dat'), J(base, _T'to')\r\n  assert_nil( fs.move(SRC, DST, true ) )\r\n  assert_equal(data, read_file(SRC))\r\n  assert_equal(DST, fs.isdir(DST))\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 169,
    "text": "local SRC, DST = J(base, _T'from.dat'), J(base, _T'to')",
    "type": "statement:localassign"
  }, {
    "id": 170,
    "text": "assert_nil( fs.move(SRC, DST, true ) )",
    "type": "statement:functioncall"
  }, {
    "id": 171,
    "text": "function test_move_force_dir2()\r\n  local SRC, DST = J(base, _T'tmp'), J(base, _T'to')\r\n  assert_nil( fs.move(SRC, DST, true ))\r\n  assert_equal(SRC, fs.isdir(SRC))\r\n  assert_equal(DST, fs.isdir(DST))\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 172,
    "text": "local SRC, DST = J(base, _T'tmp'), J(base, _T'to')",
    "type": "statement:localassign"
  }, {
    "id": 173,
    "text": "assert_nil( fs.move(SRC, DST, true ))",
    "type": "statement:functioncall"
  }, {
    "id": 174,
    "text": "assert_equal(SRC, fs.isdir(SRC))",
    "type": "statement:functioncall"
  }, {
    "id": 175,
    "text": "function test_copy_force_dir()\r\n  local SRC, DST = J(base, _T'from.dat'), J(base, _T'to')\r\n  assert_nil( fs.copy(SRC, DST, true ))\r\n  assert_equal(data, read_file(SRC))\r\n  assert_equal(DST, fs.isdir(DST))\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 176,
    "text": "assert_nil( fs.copy(SRC, DST, true ))",
    "type": "statement:functioncall"
  }, {
    "id": 177,
    "text": "local _ENV = TEST_CASE(name .. \": basic iteration\")",
    "type": "statement:localassign"
  }, {
    "id": 178,
    "text": "if true then\r\n\r\nlocal cwd, base\r\nlocal data = \"123\\r\\n456\"\r\nlocal files\r\n\r\nfunction teardown()\r\n  collectgarbage\"collect\" -- dir cleanup\r\n  fs.chdir(cwd)\r\n  for _, f in ipairs(files) do\r\n    fs.remove(f)\r\n  end\r\n  fs.rmdir(J(base, _T\"1\"))\r\n  fs.rmdir(base)\r\nend\r\n\r\nfunction setup()\r\n  cwd = fs.currentdir()\r\n  base = J(cwd, _T\"tmp\")\r\n  files = {\r\n    J(base, _T\"test\"),\r\n    J(base, _T\"test.txt\"),\r\n    J(base, _T\"test.dat\"),\r\n    J(base, _T\"123.test\"),\r\n  }\r\n  teardown()\r\n  assert_true(fs.mkdir(base))\r\n  assert_true(fs.mkdir(J(base, _T\"1\")))\r\n  for _, f in ipairs(files) do\r\n    assert(mkfile(f, data))\r\n  end\r\nend\r\n\r\nfunction test_dir()\r\n  local t = clone(files)\r\n  table.insert(t, J(base, _T\".\"))\r\n  table.insert(t, J(base, _T\"..\"))\r\n  table.insert(t, J(base, _T\"1\"))\r\n  local n = 0\r\n  for f in fs.dir(base) do\r\n    assert(ifind(t, J(base, f)), f)\r\n    n = n + 1\r\n  end\r\n  assert_equal(#t, n)\r\nend\r\n\r\nfunction test_each()\r\n  local t = clone(files)\r\n  table.insert(t, J(base, _T\"1\"))\r\n  local n = 0\r\n  assert_nil(fs.foreach(base .. DIR_SEP, function(f, a)\r\n    assert_string(a.mode)\r\n    assert_number(a.size)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end))\r\n  assert_equal(#t, n)\r\nend\r\n\r\nfunction test_each_impl()\r\n  local t = clone(files)\r\n  table.insert(t, J(base, _T\"1\"))\r\n  local n = 0\r\n  assert_nil(fs.each_impl{\r\n    file = base .. DIR_SEP,\r\n    callback = function(f, a)\r\n      assert(ifind(t, f), f)\r\n      n = n + 1\r\n    end}\r\n  )\r\n  assert_equal(#t, n)\r\nend\r\n\r\nfunction test_each_impl_generic_for()\r\n  local t = clone(files)\r\n  table.insert(t, J(base, _T\"1\"))\r\n  local n = 0\r\n  for f in fs.each_impl{file = base .. DIR_SEP} do\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end\r\n  assert_equal(#t, n)\r\nend\r\n\r\n\r\nfunction test_each_relpath()\r\n  local base = J(_T'.', _T\"tmp\")\r\n  local t = {\r\n    J(base, _T\"1\"),\r\n    J(base, _T\"test\"),\r\n    J(base, _T\"test.txt\"),\r\n    J(base, _T\"test.dat\"),\r\n    J(base, _T\"123.test\"),\r\n  }\r\n\r\n  local n = 0\r\n  assert_nil(fs.foreach(base .. DIR_SEP, function(f, a)\r\n    assert_string(a.mode)\r\n    assert_number(a.size)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end))\r\n  assert_equal(#t, n)\r\nend\r\n\r\nfunction test_each_skipdots()\r\n  local t = clone(files)\r\n  table.insert(t, J(base, _T\".\"))\r\n  table.insert(t, J(base, _T\"..\"))\r\n  table.insert(t, J(base, _T\"1\"))\r\n  local n = 0\r\n  assert_nil(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end,{skipdots=false}))\r\n  assert_equal(#t, n)\r\nend\r\n\r\nfunction test_each_skipfiles()\r\n  local t = {}\r\n  table.insert(t, J(base, _T\".\"))\r\n  table.insert(t, J(base, _T\"..\"))\r\n  table.insert(t, J(base, _T\"1\"))\r\n  local n = 0\r\n  assert_nil(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end,{skipdots=false;skipfiles=true}))\r\n  assert_equal(#t, n)\r\nend\r\n\r\nfunction test_each_skipdirs()\r\n  local t = files\r\n  local n = 0\r\n  assert_nil(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end,{skipdirs=true}))\r\n  assert_equal(#t, n)\r\nend\r\n\r\nfunction test_each_break()\r\n  local n = 0\r\n  assert_equal(123, fs.foreach(base .. DIR_SEP, function(f)\r\n    n = n + 1\r\n    return 123\r\n  end))\r\n  assert_equal(1, n)\r\nend\r\n\r\nend",
    "type": "statement:if"
  }, {
    "id": 179,
    "text": "local data = \"123\\r\\n456\"",
    "type": "statement:localassign"
  }, {
    "id": 180,
    "text": "local files",
    "type": "statement:localassign"
  }, {
    "id": 181,
    "text": "function teardown()\r\n  collectgarbage\"collect\" -- dir cleanup\r\n  fs.chdir(cwd)\r\n  for _, f in ipairs(files) do\r\n    fs.remove(f)\r\n  end\r\n  fs.rmdir(J(base, _T\"1\"))\r\n  fs.rmdir(base)\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 182,
    "text": "collectgarbage\"collect\"",
    "type": "statement:functioncall"
  }, {
    "id": 183,
    "text": "for _, f in ipairs(files) do\r\n    fs.remove(f)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 184,
    "text": "fs.remove(f)",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "fs.rmdir(J(base, _T\"1\"))",
    "type": "statement:functioncall"
  }, {
    "id": 186,
    "text": "function setup()\r\n  cwd = fs.currentdir()\r\n  base = J(cwd, _T\"tmp\")\r\n  files = {\r\n    J(base, _T\"test\"),\r\n    J(base, _T\"test.txt\"),\r\n    J(base, _T\"test.dat\"),\r\n    J(base, _T\"123.test\"),\r\n  }\r\n  teardown()\r\n  assert_true(fs.mkdir(base))\r\n  assert_true(fs.mkdir(J(base, _T\"1\")))\r\n  for _, f in ipairs(files) do\r\n    assert(mkfile(f, data))\r\n  end\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 187,
    "text": "files = {\r\n    J(base, _T\"test\"),\r\n    J(base, _T\"test.txt\"),\r\n    J(base, _T\"test.dat\"),\r\n    J(base, _T\"123.test\"),\r\n  }",
    "type": "statement:assign"
  }, {
    "id": 188,
    "text": "assert_true(fs.mkdir(J(base, _T\"1\")))",
    "type": "statement:functioncall"
  }, {
    "id": 189,
    "text": "for _, f in ipairs(files) do\r\n    assert(mkfile(f, data))\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 190,
    "text": "assert(mkfile(f, data))",
    "type": "statement:functioncall"
  }, {
    "id": 191,
    "text": "function test_dir()\r\n  local t = clone(files)\r\n  table.insert(t, J(base, _T\".\"))\r\n  table.insert(t, J(base, _T\"..\"))\r\n  table.insert(t, J(base, _T\"1\"))\r\n  local n = 0\r\n  for f in fs.dir(base) do\r\n    assert(ifind(t, J(base, f)), f)\r\n    n = n + 1\r\n  end\r\n  assert_equal(#t, n)\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 192,
    "text": "local t = clone(files)",
    "type": "statement:localassign"
  }, {
    "id": 193,
    "text": "table.insert(t, J(base, _T\".\"))",
    "type": "statement:functioncall"
  }, {
    "id": 194,
    "text": "table.insert(t, J(base, _T\"..\"))",
    "type": "statement:functioncall"
  }, {
    "id": 195,
    "text": "table.insert(t, J(base, _T\"1\"))",
    "type": "statement:functioncall"
  }, {
    "id": 196,
    "text": "local n = 0",
    "type": "statement:localassign"
  }, {
    "id": 197,
    "text": "for f in fs.dir(base) do\r\n    assert(ifind(t, J(base, f)), f)\r\n    n = n + 1\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 198,
    "text": "assert(ifind(t, J(base, f)), f)",
    "type": "statement:functioncall"
  }, {
    "id": 199,
    "text": "n = n + 1",
    "type": "statement:assign"
  }, {
    "id": 200,
    "text": "assert_equal(#t, n)",
    "type": "statement:functioncall"
  }, {
    "id": 201,
    "text": "function test_each()\r\n  local t = clone(files)\r\n  table.insert(t, J(base, _T\"1\"))\r\n  local n = 0\r\n  assert_nil(fs.foreach(base .. DIR_SEP, function(f, a)\r\n    assert_string(a.mode)\r\n    assert_number(a.size)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end))\r\n  assert_equal(#t, n)\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 202,
    "text": "assert_nil(fs.foreach(base .. DIR_SEP, function(f, a)\r\n    assert_string(a.mode)\r\n    assert_number(a.size)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end))",
    "type": "statement:functioncall"
  }, {
    "id": 203,
    "text": "assert_string(a.mode)",
    "type": "statement:functioncall"
  }, {
    "id": 204,
    "text": "assert_number(a.size)",
    "type": "statement:functioncall"
  }, {
    "id": 205,
    "text": "assert(ifind(t, f), f)",
    "type": "statement:functioncall"
  }, {
    "id": 206,
    "text": "function test_each_impl()\r\n  local t = clone(files)\r\n  table.insert(t, J(base, _T\"1\"))\r\n  local n = 0\r\n  assert_nil(fs.each_impl{\r\n    file = base .. DIR_SEP,\r\n    callback = function(f, a)\r\n      assert(ifind(t, f), f)\r\n      n = n + 1\r\n    end}\r\n  )\r\n  assert_equal(#t, n)\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 207,
    "text": "assert_nil(fs.each_impl{\r\n    file = base .. DIR_SEP,\r\n    callback = function(f, a)\r\n      assert(ifind(t, f), f)\r\n      n = n + 1\r\n    end}\r\n  )",
    "type": "statement:functioncall"
  }, {
    "id": 208,
    "text": "function test_each_impl_generic_for()\r\n  local t = clone(files)\r\n  table.insert(t, J(base, _T\"1\"))\r\n  local n = 0\r\n  for f in fs.each_impl{file = base .. DIR_SEP} do\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end\r\n  assert_equal(#t, n)\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 209,
    "text": "for f in fs.each_impl{file = base .. DIR_SEP} do\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 210,
    "text": "function test_each_relpath()\r\n  local base = J(_T'.', _T\"tmp\")\r\n  local t = {\r\n    J(base, _T\"1\"),\r\n    J(base, _T\"test\"),\r\n    J(base, _T\"test.txt\"),\r\n    J(base, _T\"test.dat\"),\r\n    J(base, _T\"123.test\"),\r\n  }\r\n\r\n  local n = 0\r\n  assert_nil(fs.foreach(base .. DIR_SEP, function(f, a)\r\n    assert_string(a.mode)\r\n    assert_number(a.size)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end))\r\n  assert_equal(#t, n)\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 211,
    "text": "local base = J(_T'.', _T\"tmp\")",
    "type": "statement:localassign"
  }, {
    "id": 212,
    "text": "local t = {\r\n    J(base, _T\"1\"),\r\n    J(base, _T\"test\"),\r\n    J(base, _T\"test.txt\"),\r\n    J(base, _T\"test.dat\"),\r\n    J(base, _T\"123.test\"),\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 213,
    "text": "function test_each_skipdots()\r\n  local t = clone(files)\r\n  table.insert(t, J(base, _T\".\"))\r\n  table.insert(t, J(base, _T\"..\"))\r\n  table.insert(t, J(base, _T\"1\"))\r\n  local n = 0\r\n  assert_nil(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end,{skipdots=false}))\r\n  assert_equal(#t, n)\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 214,
    "text": "assert_nil(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end,{skipdots=false}))",
    "type": "statement:functioncall"
  }, {
    "id": 215,
    "text": "function test_each_skipfiles()\r\n  local t = {}\r\n  table.insert(t, J(base, _T\".\"))\r\n  table.insert(t, J(base, _T\"..\"))\r\n  table.insert(t, J(base, _T\"1\"))\r\n  local n = 0\r\n  assert_nil(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end,{skipdots=false;skipfiles=true}))\r\n  assert_equal(#t, n)\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 216,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 217,
    "text": "assert_nil(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end,{skipdots=false;skipfiles=true}))",
    "type": "statement:functioncall"
  }, {
    "id": 218,
    "text": "function test_each_skipdirs()\r\n  local t = files\r\n  local n = 0\r\n  assert_nil(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end,{skipdirs=true}))\r\n  assert_equal(#t, n)\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 219,
    "text": "local t = files",
    "type": "statement:localassign"
  }, {
    "id": 220,
    "text": "assert_nil(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end,{skipdirs=true}))",
    "type": "statement:functioncall"
  }, {
    "id": 221,
    "text": "function test_each_break()\r\n  local n = 0\r\n  assert_equal(123, fs.foreach(base .. DIR_SEP, function(f)\r\n    n = n + 1\r\n    return 123\r\n  end))\r\n  assert_equal(1, n)\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 222,
    "text": "assert_equal(123, fs.foreach(base .. DIR_SEP, function(f)\r\n    n = n + 1\r\n    return 123\r\n  end))",
    "type": "statement:functioncall"
  }, {
    "id": 223,
    "text": "assert_equal(1, n)",
    "type": "statement:functioncall"
  }, {
    "id": 224,
    "text": "local _ENV = TEST_CASE(name .. \": recurse iteration\")",
    "type": "statement:localassign"
  }, {
    "id": 225,
    "text": "if true then\r\n\r\nlocal cwd, base\r\nlocal data = \"123\\r\\n456\"\r\nlocal files\r\n\r\nfunction teardown()\r\n  collectgarbage\"collect\" -- dir cleanup\r\n  fs.chdir(cwd)\r\n  for _, f in ipairs(files) do\r\n    fs.remove(f)\r\n  end\r\n  fs.rmdir(J(base, _T\"3\"))\r\n  fs.rmdir(J(base, _T\"2\"))\r\n  fs.rmdir(J(base, _T\"1\"))\r\n  fs.rmdir(base)\r\nend\r\n\r\nfunction setup()\r\n  cwd = fs.currentdir()\r\n  base = J(cwd, _T\"tmp\")\r\n  files = {\r\n    J(base, _T\"test\"),\r\n    J(base, _T\"test.txt\"),\r\n    J(base, _T\"test.dat\"),\r\n    J(base, _T\"123.test\"),\r\n    J(base, _T\"1\", _T\"a1.txt\"),\r\n    J(base, _T\"1\", _T\"a2.dat\"),\r\n    J(base, _T\"1\", _T\"b1.txt\"),\r\n    J(base, _T\"1\", _T\"b2.dat\"),\r\n    J(base, _T\"2\", _T\"a1.txt\"),\r\n    J(base, _T\"2\", _T\"a2.dat\"),\r\n    J(base, _T\"2\", _T\"b1.txt\"),\r\n    J(base, _T\"2\", _T\"b2.dat\"),\r\n  }\r\n  teardown()\r\n  assert_true(fs.mkdir(base))\r\n  assert_true(fs.mkdir(J(base, _T\"1\")))\r\n  assert_true(fs.mkdir(J(base, _T\"2\")))\r\n  assert_true(fs.mkdir(J(base, _T\"3\")))\r\n  for _, f in ipairs(files) do\r\n    -- print(\">>> \", Q(f))\r\n    assert(mkfile(f, data))\r\n  end\r\nend\r\n\r\nfunction test_each()\r\n  local t = clone(files)\r\n  table.insert(t, J(base, _T\"1\"))\r\n  table.insert(t, J(base, _T\"2\"))\r\n  table.insert(t, J(base, _T\"3\"))\r\n  local n = 0\r\n  assert_nil(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end,{recurse=true}))\r\n  assert_equal(#t, n)\r\nend\r\n\r\nfunction test_each_reverse_true()\r\n  local dir  = J(base, _T\"1\")\r\n  local file = J(dir,  _T\"a1.txt\")\r\n  assert_true(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert_not_equal(up(dir), up(f))\r\n    return up(file) == up(f)\r\n  end,{recurse=true;reverse=true}))\r\nend\r\n\r\nfunction test_each_reverse_false()\r\n  local dir  = J(base, _T\"1\")\r\n  local file = J(dir,  _T\"a1.txt\")\r\n  assert_true(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert_not_equal(up(file), up(f))\r\n    return up(dir) == up(f)\r\n  end,{recurse=true;reverse=false}))\r\nend\r\n\r\nfunction test_each_reverse_nil()\r\n  local dir  = J(base, _T\"1\")\r\n  local file = J(dir,  _T\"a1.txt\")\r\n  assert_true(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert_not_equal(up(file), up(f))\r\n    return up(dir) == up(f)\r\n  end,{recurse=true;reverse=nil}))\r\nend\r\n\r\nfunction test_each_skipdots()\r\n  local t = clone(files)\r\n  table.insert(t, J(base, _T\".\"))\r\n  table.insert(t, J(base, _T\"..\"))\r\n  table.insert(t, J(base, _T\"1\"))\r\n  table.insert(t, J(base, _T\"1\", _T\".\"))\r\n  table.insert(t, J(base, _T\"1\", _T\"..\"))\r\n  table.insert(t, J(base, _T\"2\"))\r\n  table.insert(t, J(base, _T\"2\", _T\".\"))\r\n  table.insert(t, J(base, _T\"2\", _T\"..\"))\r\n  table.insert(t, J(base, _T\"3\"))\r\n  table.insert(t, J(base, _T\"3\", _T\".\"))\r\n  table.insert(t, J(base, _T\"3\", _T\"..\"))\r\n  local n = 0\r\n  assert_nil(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end,{recurse=true;skipdots=false}))\r\n  assert_equal(#t, n)\r\nend\r\n\r\nfunction test_each_delay()\r\n  local t = clone(files)\r\n  table.insert(t, J(base, _T\"1\"))\r\n  table.insert(t, J(base, _T\"2\"))\r\n  table.insert(t, J(base, _T\"3\"))\r\n  local n = 0\r\n  assert_nil(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end,{recurse=true;delay=true}))\r\n  assert_equal(#t, n)\r\nend\r\n\r\nfunction test_each_skipdirs()\r\n  local t = files\r\n  local n = 0\r\n  assert_nil(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert(ifind(t, f), _t(f))\r\n    n = n + 1\r\n  end,{recurse=true;skipdirs=true;}))\r\n  assert_equal(#t, n)\r\nend\r\n\r\nfunction test_each_break()\r\n  local n = 0\r\n  assert_equal(\"break\", fs.foreach(base .. DIR_SEP, function(f)\r\n    if up(f) == up( J(base, _T\"2\", _T\"a2.dat\") ) then\r\n      n = 1\r\n      return \"break\"\r\n    end\r\n    n = 0\r\n  end,{recurse=true}))\r\n  assert_equal(1, n)\r\nend\r\n\r\nfunction test_each_break_delay()\r\n  local n = 0\r\n  assert_equal(\"break\", fs.foreach(base .. DIR_SEP, function(f)\r\n    if up(f) == up( J(base, _T\"2\", _T\"a2.dat\") ) then\r\n      n = 1\r\n      return \"break\"\r\n    end\r\n    n = 0\r\n  end,{recurse=true;delay=true;}))\r\n  assert_equal(1, n)\r\nend\r\n\r\nfunction test_each_mask_basename_only()\r\n  local t = {\r\n    J(base, _T\"123.test\"),\r\n    J(base, _T\"1\"),\r\n    J(base, _T\"1\", _T\"a1.txt\"),\r\n    J(base, _T\"1\", _T\"b1.txt\"),\r\n    J(base, _T\"2\", _T\"a1.txt\"),\r\n    J(base, _T\"2\", _T\"b1.txt\"),\r\n  }\r\n  local n = 0\r\n  assert_nil(fs.foreach(J(base, _T\"*1*\"), function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end,{recurse=true}))\r\n  assert_equal(#t, n)\r\nend\r\n\r\nfunction test_each_mask_ext()\r\n  local t = {\r\n    J(base, _T\"test.dat\"),\r\n    J(base, _T\"1\", _T\"a2.dat\"),\r\n    J(base, _T\"1\", _T\"b2.dat\"),\r\n    J(base, _T\"2\", _T\"a2.dat\"),\r\n    J(base, _T\"2\", _T\"b2.dat\"),\r\n  }\r\n  local n = 0\r\n  assert_nil(fs.foreach(J(base, _T\"*.dat\"), function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end,{recurse=true}))\r\n  assert_equal(#t, n)\r\nend\r\n\r\nfunction test_each_attr()\r\n  local F = clone(files)\r\n  table.insert(F, J(base, _T\"1\"))\r\n  table.insert(F, J(base, _T\"2\"))\r\n  table.insert(F, J(base, _T\"3\"))\r\n  local N = 0\r\n  assert_nil(fs.each_impl{\r\n    file=base .. DIR_SEP, recurse=true,\r\n    param = \"fpnmaztcl\",\r\n    callback = function(f,p,n,m,a,z,t,c,l)\r\n      local attr = assert(fs.attributes(f))\r\n      assert(ifind(F, f), f)\r\n      assert_string(f)\r\n      assert_string(p)\r\n      assert_string(n)\r\n      assert_string(m)\r\n      assert_table(a)\r\n      assert_number(z)\r\n      assert_number(t)\r\n      assert_number(c)\r\n      assert_number(l)\r\n      assert_equal(attr.mode         , m)\r\n      assert_equal(attr.size         , z)\r\n      assert_equal(attr.modification , t)\r\n      assert_equal(attr.change       , c)\r\n      assert_equal(attr.access       , l)\r\n      assert_equal(m, a.mode         )\r\n      assert_equal(z, a.size         )\r\n      assert_equal(t, a.modification )\r\n      assert_equal(c, a.change       )\r\n      assert_equal(l, a.access       )\r\n      N = N + 1\r\n    end,\r\n  })\r\n  assert_equal(#F, N)\r\nend\r\n\r\nfunction test_each_attr_generic_for()\r\n  local F = clone(files)\r\n  table.insert(F, J(base, _T\"1\"))\r\n  table.insert(F, J(base, _T\"2\"))\r\n  table.insert(F, J(base, _T\"3\"))\r\n  local N = 0\r\n  for f,p,n,m,a,z,t,c,l in fs.each_impl{\r\n    file=base .. DIR_SEP, recurse=true,\r\n    param = \"fpnmaztcl\",\r\n  }do\r\n    local attr = assert(fs.attributes(f))\r\n    assert(ifind(F, f), _t(f))\r\n    assert_string(f)\r\n    assert_string(p)\r\n    assert_string(n)\r\n    assert_string(m)\r\n    assert_table(a)\r\n    assert_number(z)\r\n    assert_number(t)\r\n    assert_number(c)\r\n    assert_number(l)\r\n    assert_equal(attr.mode         , m)\r\n    assert_equal(attr.size         , z)\r\n    assert_equal(attr.modification , t)\r\n    assert_equal(attr.change       , c)\r\n    assert_equal(attr.access       , l)\r\n    assert_equal(m, a.mode         )\r\n    assert_equal(z, a.size         )\r\n    assert_equal(t, a.modification )\r\n    assert_equal(c, a.change       )\r\n    assert_equal(l, a.access       )\r\n    N = N + 1\r\n  end\r\n  assert_equal(#F, N)\r\nend\r\n\r\nend",
    "type": "statement:if"
  }, {
    "id": 226,
    "text": "function teardown()\r\n  collectgarbage\"collect\" -- dir cleanup\r\n  fs.chdir(cwd)\r\n  for _, f in ipairs(files) do\r\n    fs.remove(f)\r\n  end\r\n  fs.rmdir(J(base, _T\"3\"))\r\n  fs.rmdir(J(base, _T\"2\"))\r\n  fs.rmdir(J(base, _T\"1\"))\r\n  fs.rmdir(base)\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 227,
    "text": "fs.rmdir(J(base, _T\"3\"))",
    "type": "statement:functioncall"
  }, {
    "id": 228,
    "text": "fs.rmdir(J(base, _T\"2\"))",
    "type": "statement:functioncall"
  }, {
    "id": 229,
    "text": "function setup()\r\n  cwd = fs.currentdir()\r\n  base = J(cwd, _T\"tmp\")\r\n  files = {\r\n    J(base, _T\"test\"),\r\n    J(base, _T\"test.txt\"),\r\n    J(base, _T\"test.dat\"),\r\n    J(base, _T\"123.test\"),\r\n    J(base, _T\"1\", _T\"a1.txt\"),\r\n    J(base, _T\"1\", _T\"a2.dat\"),\r\n    J(base, _T\"1\", _T\"b1.txt\"),\r\n    J(base, _T\"1\", _T\"b2.dat\"),\r\n    J(base, _T\"2\", _T\"a1.txt\"),\r\n    J(base, _T\"2\", _T\"a2.dat\"),\r\n    J(base, _T\"2\", _T\"b1.txt\"),\r\n    J(base, _T\"2\", _T\"b2.dat\"),\r\n  }\r\n  teardown()\r\n  assert_true(fs.mkdir(base))\r\n  assert_true(fs.mkdir(J(base, _T\"1\")))\r\n  assert_true(fs.mkdir(J(base, _T\"2\")))\r\n  assert_true(fs.mkdir(J(base, _T\"3\")))\r\n  for _, f in ipairs(files) do\r\n    -- print(\">>> \", Q(f))\r\n    assert(mkfile(f, data))\r\n  end\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 230,
    "text": "files = {\r\n    J(base, _T\"test\"),\r\n    J(base, _T\"test.txt\"),\r\n    J(base, _T\"test.dat\"),\r\n    J(base, _T\"123.test\"),\r\n    J(base, _T\"1\", _T\"a1.txt\"),\r\n    J(base, _T\"1\", _T\"a2.dat\"),\r\n    J(base, _T\"1\", _T\"b1.txt\"),\r\n    J(base, _T\"1\", _T\"b2.dat\"),\r\n    J(base, _T\"2\", _T\"a1.txt\"),\r\n    J(base, _T\"2\", _T\"a2.dat\"),\r\n    J(base, _T\"2\", _T\"b1.txt\"),\r\n    J(base, _T\"2\", _T\"b2.dat\"),\r\n  }",
    "type": "statement:assign"
  }, {
    "id": 231,
    "text": "assert_true(fs.mkdir(J(base, _T\"2\")))",
    "type": "statement:functioncall"
  }, {
    "id": 232,
    "text": "assert_true(fs.mkdir(J(base, _T\"3\")))",
    "type": "statement:functioncall"
  }, {
    "id": 233,
    "text": "for _, f in ipairs(files) do\r\n    -- print(\">>> \", Q(f))\r\n    assert(mkfile(f, data))\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 234,
    "text": "function test_each()\r\n  local t = clone(files)\r\n  table.insert(t, J(base, _T\"1\"))\r\n  table.insert(t, J(base, _T\"2\"))\r\n  table.insert(t, J(base, _T\"3\"))\r\n  local n = 0\r\n  assert_nil(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end,{recurse=true}))\r\n  assert_equal(#t, n)\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 235,
    "text": "table.insert(t, J(base, _T\"2\"))",
    "type": "statement:functioncall"
  }, {
    "id": 236,
    "text": "table.insert(t, J(base, _T\"3\"))",
    "type": "statement:functioncall"
  }, {
    "id": 237,
    "text": "assert_nil(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end,{recurse=true}))",
    "type": "statement:functioncall"
  }, {
    "id": 238,
    "text": "function test_each_reverse_true()\r\n  local dir  = J(base, _T\"1\")\r\n  local file = J(dir,  _T\"a1.txt\")\r\n  assert_true(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert_not_equal(up(dir), up(f))\r\n    return up(file) == up(f)\r\n  end,{recurse=true;reverse=true}))\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 239,
    "text": "local dir  = J(base, _T\"1\")",
    "type": "statement:localassign"
  }, {
    "id": 240,
    "text": "local file = J(dir,  _T\"a1.txt\")",
    "type": "statement:localassign"
  }, {
    "id": 241,
    "text": "assert_true(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert_not_equal(up(dir), up(f))\r\n    return up(file) == up(f)\r\n  end,{recurse=true;reverse=true}))",
    "type": "statement:functioncall"
  }, {
    "id": 242,
    "text": "assert_not_equal(up(dir), up(f))",
    "type": "statement:functioncall"
  }, {
    "id": 243,
    "text": "function test_each_reverse_false()\r\n  local dir  = J(base, _T\"1\")\r\n  local file = J(dir,  _T\"a1.txt\")\r\n  assert_true(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert_not_equal(up(file), up(f))\r\n    return up(dir) == up(f)\r\n  end,{recurse=true;reverse=false}))\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 244,
    "text": "assert_true(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert_not_equal(up(file), up(f))\r\n    return up(dir) == up(f)\r\n  end,{recurse=true;reverse=false}))",
    "type": "statement:functioncall"
  }, {
    "id": 245,
    "text": "assert_not_equal(up(file), up(f))",
    "type": "statement:functioncall"
  }, {
    "id": 246,
    "text": "function test_each_reverse_nil()\r\n  local dir  = J(base, _T\"1\")\r\n  local file = J(dir,  _T\"a1.txt\")\r\n  assert_true(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert_not_equal(up(file), up(f))\r\n    return up(dir) == up(f)\r\n  end,{recurse=true;reverse=nil}))\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 247,
    "text": "assert_true(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert_not_equal(up(file), up(f))\r\n    return up(dir) == up(f)\r\n  end,{recurse=true;reverse=nil}))",
    "type": "statement:functioncall"
  }, {
    "id": 248,
    "text": "function test_each_skipdots()\r\n  local t = clone(files)\r\n  table.insert(t, J(base, _T\".\"))\r\n  table.insert(t, J(base, _T\"..\"))\r\n  table.insert(t, J(base, _T\"1\"))\r\n  table.insert(t, J(base, _T\"1\", _T\".\"))\r\n  table.insert(t, J(base, _T\"1\", _T\"..\"))\r\n  table.insert(t, J(base, _T\"2\"))\r\n  table.insert(t, J(base, _T\"2\", _T\".\"))\r\n  table.insert(t, J(base, _T\"2\", _T\"..\"))\r\n  table.insert(t, J(base, _T\"3\"))\r\n  table.insert(t, J(base, _T\"3\", _T\".\"))\r\n  table.insert(t, J(base, _T\"3\", _T\"..\"))\r\n  local n = 0\r\n  assert_nil(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end,{recurse=true;skipdots=false}))\r\n  assert_equal(#t, n)\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 249,
    "text": "table.insert(t, J(base, _T\"1\", _T\".\"))",
    "type": "statement:functioncall"
  }, {
    "id": 250,
    "text": "table.insert(t, J(base, _T\"1\", _T\"..\"))",
    "type": "statement:functioncall"
  }, {
    "id": 251,
    "text": "table.insert(t, J(base, _T\"2\", _T\".\"))",
    "type": "statement:functioncall"
  }, {
    "id": 252,
    "text": "table.insert(t, J(base, _T\"2\", _T\"..\"))",
    "type": "statement:functioncall"
  }, {
    "id": 253,
    "text": "table.insert(t, J(base, _T\"3\", _T\".\"))",
    "type": "statement:functioncall"
  }, {
    "id": 254,
    "text": "table.insert(t, J(base, _T\"3\", _T\"..\"))",
    "type": "statement:functioncall"
  }, {
    "id": 255,
    "text": "assert_nil(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end,{recurse=true;skipdots=false}))",
    "type": "statement:functioncall"
  }, {
    "id": 256,
    "text": "function test_each_delay()\r\n  local t = clone(files)\r\n  table.insert(t, J(base, _T\"1\"))\r\n  table.insert(t, J(base, _T\"2\"))\r\n  table.insert(t, J(base, _T\"3\"))\r\n  local n = 0\r\n  assert_nil(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end,{recurse=true;delay=true}))\r\n  assert_equal(#t, n)\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 257,
    "text": "assert_nil(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end,{recurse=true;delay=true}))",
    "type": "statement:functioncall"
  }, {
    "id": 258,
    "text": "function test_each_skipdirs()\r\n  local t = files\r\n  local n = 0\r\n  assert_nil(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert(ifind(t, f), _t(f))\r\n    n = n + 1\r\n  end,{recurse=true;skipdirs=true;}))\r\n  assert_equal(#t, n)\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 259,
    "text": "assert_nil(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert(ifind(t, f), _t(f))\r\n    n = n + 1\r\n  end,{recurse=true;skipdirs=true;}))",
    "type": "statement:functioncall"
  }, {
    "id": 260,
    "text": "assert(ifind(t, f), _t(f))",
    "type": "statement:functioncall"
  }, {
    "id": 261,
    "text": "function test_each_break()\r\n  local n = 0\r\n  assert_equal(\"break\", fs.foreach(base .. DIR_SEP, function(f)\r\n    if up(f) == up( J(base, _T\"2\", _T\"a2.dat\") ) then\r\n      n = 1\r\n      return \"break\"\r\n    end\r\n    n = 0\r\n  end,{recurse=true}))\r\n  assert_equal(1, n)\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 262,
    "text": "assert_equal(\"break\", fs.foreach(base .. DIR_SEP, function(f)\r\n    if up(f) == up( J(base, _T\"2\", _T\"a2.dat\") ) then\r\n      n = 1\r\n      return \"break\"\r\n    end\r\n    n = 0\r\n  end,{recurse=true}))",
    "type": "statement:functioncall"
  }, {
    "id": 263,
    "text": "if up(f) == up( J(base, _T\"2\", _T\"a2.dat\") ) then\r\n      n = 1\r\n      return \"break\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 264,
    "text": "n = 1",
    "type": "statement:assign"
  }, {
    "id": 265,
    "text": "n = 0",
    "type": "statement:assign"
  }, {
    "id": 266,
    "text": "function test_each_break_delay()\r\n  local n = 0\r\n  assert_equal(\"break\", fs.foreach(base .. DIR_SEP, function(f)\r\n    if up(f) == up( J(base, _T\"2\", _T\"a2.dat\") ) then\r\n      n = 1\r\n      return \"break\"\r\n    end\r\n    n = 0\r\n  end,{recurse=true;delay=true;}))\r\n  assert_equal(1, n)\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 267,
    "text": "assert_equal(\"break\", fs.foreach(base .. DIR_SEP, function(f)\r\n    if up(f) == up( J(base, _T\"2\", _T\"a2.dat\") ) then\r\n      n = 1\r\n      return \"break\"\r\n    end\r\n    n = 0\r\n  end,{recurse=true;delay=true;}))",
    "type": "statement:functioncall"
  }, {
    "id": 268,
    "text": "function test_each_mask_basename_only()\r\n  local t = {\r\n    J(base, _T\"123.test\"),\r\n    J(base, _T\"1\"),\r\n    J(base, _T\"1\", _T\"a1.txt\"),\r\n    J(base, _T\"1\", _T\"b1.txt\"),\r\n    J(base, _T\"2\", _T\"a1.txt\"),\r\n    J(base, _T\"2\", _T\"b1.txt\"),\r\n  }\r\n  local n = 0\r\n  assert_nil(fs.foreach(J(base, _T\"*1*\"), function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end,{recurse=true}))\r\n  assert_equal(#t, n)\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 269,
    "text": "local t = {\r\n    J(base, _T\"123.test\"),\r\n    J(base, _T\"1\"),\r\n    J(base, _T\"1\", _T\"a1.txt\"),\r\n    J(base, _T\"1\", _T\"b1.txt\"),\r\n    J(base, _T\"2\", _T\"a1.txt\"),\r\n    J(base, _T\"2\", _T\"b1.txt\"),\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 270,
    "text": "assert_nil(fs.foreach(J(base, _T\"*1*\"), function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end,{recurse=true}))",
    "type": "statement:functioncall"
  }, {
    "id": 271,
    "text": "function test_each_mask_ext()\r\n  local t = {\r\n    J(base, _T\"test.dat\"),\r\n    J(base, _T\"1\", _T\"a2.dat\"),\r\n    J(base, _T\"1\", _T\"b2.dat\"),\r\n    J(base, _T\"2\", _T\"a2.dat\"),\r\n    J(base, _T\"2\", _T\"b2.dat\"),\r\n  }\r\n  local n = 0\r\n  assert_nil(fs.foreach(J(base, _T\"*.dat\"), function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end,{recurse=true}))\r\n  assert_equal(#t, n)\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 272,
    "text": "local t = {\r\n    J(base, _T\"test.dat\"),\r\n    J(base, _T\"1\", _T\"a2.dat\"),\r\n    J(base, _T\"1\", _T\"b2.dat\"),\r\n    J(base, _T\"2\", _T\"a2.dat\"),\r\n    J(base, _T\"2\", _T\"b2.dat\"),\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 273,
    "text": "assert_nil(fs.foreach(J(base, _T\"*.dat\"), function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end,{recurse=true}))",
    "type": "statement:functioncall"
  }, {
    "id": 274,
    "text": "function test_each_attr()\r\n  local F = clone(files)\r\n  table.insert(F, J(base, _T\"1\"))\r\n  table.insert(F, J(base, _T\"2\"))\r\n  table.insert(F, J(base, _T\"3\"))\r\n  local N = 0\r\n  assert_nil(fs.each_impl{\r\n    file=base .. DIR_SEP, recurse=true,\r\n    param = \"fpnmaztcl\",\r\n    callback = function(f,p,n,m,a,z,t,c,l)\r\n      local attr = assert(fs.attributes(f))\r\n      assert(ifind(F, f), f)\r\n      assert_string(f)\r\n      assert_string(p)\r\n      assert_string(n)\r\n      assert_string(m)\r\n      assert_table(a)\r\n      assert_number(z)\r\n      assert_number(t)\r\n      assert_number(c)\r\n      assert_number(l)\r\n      assert_equal(attr.mode         , m)\r\n      assert_equal(attr.size         , z)\r\n      assert_equal(attr.modification , t)\r\n      assert_equal(attr.change       , c)\r\n      assert_equal(attr.access       , l)\r\n      assert_equal(m, a.mode         )\r\n      assert_equal(z, a.size         )\r\n      assert_equal(t, a.modification )\r\n      assert_equal(c, a.change       )\r\n      assert_equal(l, a.access       )\r\n      N = N + 1\r\n    end,\r\n  })\r\n  assert_equal(#F, N)\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 275,
    "text": "local F = clone(files)",
    "type": "statement:localassign"
  }, {
    "id": 276,
    "text": "table.insert(F, J(base, _T\"1\"))",
    "type": "statement:functioncall"
  }, {
    "id": 277,
    "text": "table.insert(F, J(base, _T\"2\"))",
    "type": "statement:functioncall"
  }, {
    "id": 278,
    "text": "table.insert(F, J(base, _T\"3\"))",
    "type": "statement:functioncall"
  }, {
    "id": 279,
    "text": "local N = 0",
    "type": "statement:localassign"
  }, {
    "id": 280,
    "text": "assert_nil(fs.each_impl{\r\n    file=base .. DIR_SEP, recurse=true,\r\n    param = \"fpnmaztcl\",\r\n    callback = function(f,p,n,m,a,z,t,c,l)\r\n      local attr = assert(fs.attributes(f))\r\n      assert(ifind(F, f), f)\r\n      assert_string(f)\r\n      assert_string(p)\r\n      assert_string(n)\r\n      assert_string(m)\r\n      assert_table(a)\r\n      assert_number(z)\r\n      assert_number(t)\r\n      assert_number(c)\r\n      assert_number(l)\r\n      assert_equal(attr.mode         , m)\r\n      assert_equal(attr.size         , z)\r\n      assert_equal(attr.modification , t)\r\n      assert_equal(attr.change       , c)\r\n      assert_equal(attr.access       , l)\r\n      assert_equal(m, a.mode         )\r\n      assert_equal(z, a.size         )\r\n      assert_equal(t, a.modification )\r\n      assert_equal(c, a.change       )\r\n      assert_equal(l, a.access       )\r\n      N = N + 1\r\n    end,\r\n  })",
    "type": "statement:functioncall"
  }, {
    "id": 281,
    "text": "local attr = assert(fs.attributes(f))",
    "type": "statement:localassign"
  }, {
    "id": 282,
    "text": "assert(ifind(F, f), f)",
    "type": "statement:functioncall"
  }, {
    "id": 283,
    "text": "assert_string(f)",
    "type": "statement:functioncall"
  }, {
    "id": 284,
    "text": "assert_string(p)",
    "type": "statement:functioncall"
  }, {
    "id": 285,
    "text": "assert_string(n)",
    "type": "statement:functioncall"
  }, {
    "id": 286,
    "text": "assert_string(m)",
    "type": "statement:functioncall"
  }, {
    "id": 287,
    "text": "assert_table(a)",
    "type": "statement:functioncall"
  }, {
    "id": 288,
    "text": "assert_number(z)",
    "type": "statement:functioncall"
  }, {
    "id": 289,
    "text": "assert_number(t)",
    "type": "statement:functioncall"
  }, {
    "id": 290,
    "text": "assert_number(c)",
    "type": "statement:functioncall"
  }, {
    "id": 291,
    "text": "assert_number(l)",
    "type": "statement:functioncall"
  }, {
    "id": 292,
    "text": "assert_equal(attr.mode         , m)",
    "type": "statement:functioncall"
  }, {
    "id": 293,
    "text": "assert_equal(attr.size         , z)",
    "type": "statement:functioncall"
  }, {
    "id": 294,
    "text": "assert_equal(attr.modification , t)",
    "type": "statement:functioncall"
  }, {
    "id": 295,
    "text": "assert_equal(attr.change       , c)",
    "type": "statement:functioncall"
  }, {
    "id": 296,
    "text": "assert_equal(attr.access       , l)",
    "type": "statement:functioncall"
  }, {
    "id": 297,
    "text": "assert_equal(m, a.mode         )",
    "type": "statement:functioncall"
  }, {
    "id": 298,
    "text": "assert_equal(z, a.size         )",
    "type": "statement:functioncall"
  }, {
    "id": 299,
    "text": "assert_equal(t, a.modification )",
    "type": "statement:functioncall"
  }, {
    "id": 300,
    "text": "assert_equal(c, a.change       )",
    "type": "statement:functioncall"
  }, {
    "id": 301,
    "text": "assert_equal(l, a.access       )",
    "type": "statement:functioncall"
  }, {
    "id": 302,
    "text": "N = N + 1",
    "type": "statement:assign"
  }, {
    "id": 303,
    "text": "assert_equal(#F, N)",
    "type": "statement:functioncall"
  }, {
    "id": 304,
    "text": "function test_each_attr_generic_for()\r\n  local F = clone(files)\r\n  table.insert(F, J(base, _T\"1\"))\r\n  table.insert(F, J(base, _T\"2\"))\r\n  table.insert(F, J(base, _T\"3\"))\r\n  local N = 0\r\n  for f,p,n,m,a,z,t,c,l in fs.each_impl{\r\n    file=base .. DIR_SEP, recurse=true,\r\n    param = \"fpnmaztcl\",\r\n  }do\r\n    local attr = assert(fs.attributes(f))\r\n    assert(ifind(F, f), _t(f))\r\n    assert_string(f)\r\n    assert_string(p)\r\n    assert_string(n)\r\n    assert_string(m)\r\n    assert_table(a)\r\n    assert_number(z)\r\n    assert_number(t)\r\n    assert_number(c)\r\n    assert_number(l)\r\n    assert_equal(attr.mode         , m)\r\n    assert_equal(attr.size         , z)\r\n    assert_equal(attr.modification , t)\r\n    assert_equal(attr.change       , c)\r\n    assert_equal(attr.access       , l)\r\n    assert_equal(m, a.mode         )\r\n    assert_equal(z, a.size         )\r\n    assert_equal(t, a.modification )\r\n    assert_equal(c, a.change       )\r\n    assert_equal(l, a.access       )\r\n    N = N + 1\r\n  end\r\n  assert_equal(#F, N)\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 305,
    "text": "for f,p,n,m,a,z,t,c,l in fs.each_impl{\r\n    file=base .. DIR_SEP, recurse=true,\r\n    param = \"fpnmaztcl\",\r\n  }do\r\n    local attr = assert(fs.attributes(f))\r\n    assert(ifind(F, f), _t(f))\r\n    assert_string(f)\r\n    assert_string(p)\r\n    assert_string(n)\r\n    assert_string(m)\r\n    assert_table(a)\r\n    assert_number(z)\r\n    assert_number(t)\r\n    assert_number(c)\r\n    assert_number(l)\r\n    assert_equal(attr.mode         , m)\r\n    assert_equal(attr.size         , z)\r\n    assert_equal(attr.modification , t)\r\n    assert_equal(attr.change       , c)\r\n    assert_equal(attr.access       , l)\r\n    assert_equal(m, a.mode         )\r\n    assert_equal(z, a.size         )\r\n    assert_equal(t, a.modification )\r\n    assert_equal(c, a.change       )\r\n    assert_equal(l, a.access       )\r\n    N = N + 1\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 306,
    "text": "assert(ifind(F, f), _t(f))",
    "type": "statement:functioncall"
  }, {
    "id": 307,
    "text": "local _ENV = TEST_CASE(name .. \": mask\")",
    "type": "statement:localassign"
  }, {
    "id": 308,
    "text": "if true then\r\n\r\nlocal cwd, base\r\nlocal data = \"123\\r\\n456\"\r\nlocal files\r\n\r\nfunction teardown()\r\n  collectgarbage\"collect\" -- dir cleanup\r\n  fs.chdir(cwd)\r\n  for _, f in ipairs(files) do\r\n    fs.remove(f)\r\n  end\r\n  fs.rmdir(base)\r\nend\r\n\r\nfunction setup()\r\n  cwd = fs.currentdir()\r\n  base = J(cwd, _T\"tmp\")\r\n  files = {\r\n    J(base, _T\"test\"),\r\n    J(base, _T\"test.txt\"),\r\n    J(base, _T\"test.txtdat\"),\r\n    J(base, _T\"test.txt.dat\"),\r\n  }\r\n  teardown()\r\n  assert_true(fs.mkdir(base))\r\n  for _, f in ipairs(files) do\r\n    assert(mkfile(f, data))\r\n  end\r\nend\r\n\r\nfunction test_ext1()\r\n  local F = clone(files)\r\n  local n = 0\r\n  table.remove(F,1)\r\n  table.remove(F,3)\r\n  fs.foreach(base .. DIR_SEP .. _T\"*.txt\", function(f)\r\n    assert(ifind(F, f), _t(f))\r\n    n = n + 1\r\n  end)\r\n  assert_equal(#F, n)\r\nend\r\n\r\nfunction test_ext2()\r\n  local F = clone(files)\r\n  local n = 0\r\n  table.remove(F,1)\r\n  table.remove(F,3)\r\n  fs.foreach(base .. DIR_SEP .. _T\"test*.txt\", function(f)\r\n    assert(ifind(F, f), _t(f))\r\n    n = n + 1\r\n  end)\r\n  assert_equal(#F, n)\r\nend\r\n\r\nfunction test_ext3()\r\n  local F = clone(files)\r\n  local n = 0\r\n  table.remove(F,1)\r\n  table.remove(F,2)\r\n  table.remove(F,2)\r\n  fs.foreach(base .. DIR_SEP .. _T\"test?.txt\", function(f)\r\n    assert(ifind(F, f), _t(f))\r\n    n = n + 1\r\n  end)\r\n  assert_equal(#F, n)\r\nend\r\n\r\nfunction test_noext()\r\n  local F = clone(files)\r\n  local n = 0\r\n  table.remove(F,2)\r\n  table.remove(F,2)\r\n  table.remove(F,2)\r\n  fs.foreach(base .. DIR_SEP .. _T\"test\", function(f)\r\n    assert(ifind(F, f), _t(f))\r\n    n = n + 1\r\n  end)\r\n  assert_equal(#F, n)\r\nend\r\n\r\nfunction test_full()\r\n  local F = clone(files)\r\n  local n = 0\r\n  table.remove(F,1)\r\n  table.remove(F,2)\r\n  table.remove(F,2)\r\n  fs.foreach(base .. DIR_SEP .. _T\"test.txt\", function(f)\r\n    assert(ifind(F, f), _t(f))\r\n    n = n + 1\r\n  end)\r\n  assert_equal(#F, n)\r\nend\r\n\r\nend",
    "type": "statement:if"
  }, {
    "id": 309,
    "text": "function teardown()\r\n  collectgarbage\"collect\" -- dir cleanup\r\n  fs.chdir(cwd)\r\n  for _, f in ipairs(files) do\r\n    fs.remove(f)\r\n  end\r\n  fs.rmdir(base)\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 310,
    "text": "function setup()\r\n  cwd = fs.currentdir()\r\n  base = J(cwd, _T\"tmp\")\r\n  files = {\r\n    J(base, _T\"test\"),\r\n    J(base, _T\"test.txt\"),\r\n    J(base, _T\"test.txtdat\"),\r\n    J(base, _T\"test.txt.dat\"),\r\n  }\r\n  teardown()\r\n  assert_true(fs.mkdir(base))\r\n  for _, f in ipairs(files) do\r\n    assert(mkfile(f, data))\r\n  end\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 311,
    "text": "files = {\r\n    J(base, _T\"test\"),\r\n    J(base, _T\"test.txt\"),\r\n    J(base, _T\"test.txtdat\"),\r\n    J(base, _T\"test.txt.dat\"),\r\n  }",
    "type": "statement:assign"
  }, {
    "id": 312,
    "text": "function test_ext1()\r\n  local F = clone(files)\r\n  local n = 0\r\n  table.remove(F,1)\r\n  table.remove(F,3)\r\n  fs.foreach(base .. DIR_SEP .. _T\"*.txt\", function(f)\r\n    assert(ifind(F, f), _t(f))\r\n    n = n + 1\r\n  end)\r\n  assert_equal(#F, n)\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 313,
    "text": "table.remove(F,1)",
    "type": "statement:functioncall"
  }, {
    "id": 314,
    "text": "table.remove(F,3)",
    "type": "statement:functioncall"
  }, {
    "id": 315,
    "text": "fs.foreach(base .. DIR_SEP .. _T\"*.txt\", function(f)\r\n    assert(ifind(F, f), _t(f))\r\n    n = n + 1\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 316,
    "text": "assert_equal(#F, n)",
    "type": "statement:functioncall"
  }, {
    "id": 317,
    "text": "function test_ext2()\r\n  local F = clone(files)\r\n  local n = 0\r\n  table.remove(F,1)\r\n  table.remove(F,3)\r\n  fs.foreach(base .. DIR_SEP .. _T\"test*.txt\", function(f)\r\n    assert(ifind(F, f), _t(f))\r\n    n = n + 1\r\n  end)\r\n  assert_equal(#F, n)\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 318,
    "text": "fs.foreach(base .. DIR_SEP .. _T\"test*.txt\", function(f)\r\n    assert(ifind(F, f), _t(f))\r\n    n = n + 1\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 319,
    "text": "function test_ext3()\r\n  local F = clone(files)\r\n  local n = 0\r\n  table.remove(F,1)\r\n  table.remove(F,2)\r\n  table.remove(F,2)\r\n  fs.foreach(base .. DIR_SEP .. _T\"test?.txt\", function(f)\r\n    assert(ifind(F, f), _t(f))\r\n    n = n + 1\r\n  end)\r\n  assert_equal(#F, n)\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 320,
    "text": "table.remove(F,2)",
    "type": "statement:functioncall"
  }, {
    "id": 321,
    "text": "fs.foreach(base .. DIR_SEP .. _T\"test?.txt\", function(f)\r\n    assert(ifind(F, f), _t(f))\r\n    n = n + 1\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 322,
    "text": "function test_noext()\r\n  local F = clone(files)\r\n  local n = 0\r\n  table.remove(F,2)\r\n  table.remove(F,2)\r\n  table.remove(F,2)\r\n  fs.foreach(base .. DIR_SEP .. _T\"test\", function(f)\r\n    assert(ifind(F, f), _t(f))\r\n    n = n + 1\r\n  end)\r\n  assert_equal(#F, n)\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 323,
    "text": "fs.foreach(base .. DIR_SEP .. _T\"test\", function(f)\r\n    assert(ifind(F, f), _t(f))\r\n    n = n + 1\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 324,
    "text": "function test_full()\r\n  local F = clone(files)\r\n  local n = 0\r\n  table.remove(F,1)\r\n  table.remove(F,2)\r\n  table.remove(F,2)\r\n  fs.foreach(base .. DIR_SEP .. _T\"test.txt\", function(f)\r\n    assert(ifind(F, f), _t(f))\r\n    n = n + 1\r\n  end)\r\n  assert_equal(#F, n)\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 325,
    "text": "fs.foreach(base .. DIR_SEP .. _T\"test.txt\", function(f)\r\n    assert(ifind(F, f), _t(f))\r\n    n = n + 1\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 326,
    "text": "local _ENV = TEST_CASE(name .. \": mask2\")",
    "type": "statement:localassign"
  }, {
    "id": 327,
    "text": "if true then\r\n\r\nlocal cwd, base\r\nlocal data = \"123\\r\\n456\"\r\nlocal files\r\n\r\nfunction teardown()\r\n  collectgarbage\"collect\" -- dir cleanup\r\n  fs.chdir(cwd)\r\n  for _, f in ipairs(files) do\r\n    fs.remove(f)\r\n  end\r\n  fs.rmdir(base)\r\nend\r\n\r\nfunction setup()\r\n  cwd = fs.currentdir()\r\n  base = J(cwd, _T\"tmp\")\r\n  files = {\r\n    J(base, _T\".txt\"),\r\n    J(base, _T\"1.txt\"),\r\n    J(base, _T\"1.txtdat\"),\r\n    J(base, _T\".txtdat\"),\r\n    J(base, _T\".txt.dat\"),\r\n    J(base, _T\".dat.txt\"),\r\n  }\r\n  teardown()\r\n  assert_true(fs.mkdir(base))\r\n  for _, f in ipairs(files) do\r\n    assert(mkfile(f, data))\r\n  end\r\nend\r\n\r\nfunction test_ext1()\r\n  local F = {\r\n    J(base, _T\".txt\"),\r\n    J(base, _T\"1.txt\"),\r\n    J(base, _T\"1.txtdat\"),\r\n    J(base, _T\".dat.txt\"),\r\n  }\r\n\r\n  fs.foreach(base .. DIR_SEP .. _T\"*.txt\", function(f)\r\n    local s = (_t(f):sub(-8) == (DIR_SEP .. \".txtdat\"))\r\n    if s then skip(\"FIXME. pat:`*.txt` should not match `.txtdat` but shuld match `1.txtdat` (for windows compat)\")\r\n    else table.remove(F,assert_number(ifind(F, f), _t(f))) end\r\n  end)\r\n  local _, str = next(F)\r\n  assert_equal(nil, _t(str))\r\nend\r\n\r\nfunction test_ext2()\r\n  local F = {\r\n    J(base, _T\".txt\"),\r\n    J(base, _T\".txt.dat\"),\r\n    J(base, _T\".txtdat\"),\r\n    J(base, _T\"1.txt\"),\r\n    J(base, _T\"1.txtdat\"),\r\n    J(base, _T\".dat.txt\"),\r\n  }\r\n\r\n  fs.foreach(base .. DIR_SEP .. _T\"*.txt*\", function(f)\r\n    table.remove(F,assert_number(ifind(F, f), _t(f)))\r\n  end)\r\n  local _, str = next(F)\r\n  assert_equal(nil, _t(str))\r\nend\r\n\r\nfunction test_ext3()\r\n  local F = {\r\n    J(base, _T\".txt\"),\r\n    J(base, _T\"1.txt\"),\r\n  }\r\n  fs.foreach(base .. DIR_SEP .. _T\"?.txt\", function(f)\r\n    table.remove(F,assert_number(ifind(F, f), _t(f)))\r\n  end)\r\n  local _, str = next(F)\r\n  assert_equal(nil, _t(str))\r\nend\r\n\r\nfunction test_ext4()\r\n  local F = {\r\n    J(base, _T\"1.txt\"),\r\n  }\r\n  fs.foreach(base .. DIR_SEP .. _T\"1?.txt\", function(f)\r\n    table.remove(F,assert_number(ifind(F, f), _t(f)))\r\n  end)\r\n  local _, str = next(F)\r\n  assert_equal(nil, _t(str))\r\nend\r\n\r\nfunction test_ext5()\r\n  local F = {\r\n    J(base, _T\"1.txt\"),\r\n    J(base, _T\"1.txtdat\"),\r\n  }\r\n  fs.foreach(base .. DIR_SEP .. _T\"1*.txt\", function(f)\r\n    table.remove(F,assert_number(ifind(F, f), _t(f)))\r\n  end)\r\n  local _, str = next(F)\r\n  assert_equal(nil, _t(str))\r\nend\r\n\r\nfunction test_ext6()\r\n  local F = {\r\n    J(base, _T\".txt\"),\r\n    J(base, _T\".txt.dat\"),\r\n    J(base, _T\".txtdat\"),\r\n    J(base, _T\"1.txt\"),\r\n    J(base, _T\"1.txtdat\"),\r\n    J(base, _T\".dat.txt\"),\r\n  }\r\n\r\n  fs.foreach(base .. DIR_SEP .. _T\"*.tx*t\", function(f)\r\n    table.remove(F,assert_number(ifind(F, f), _t(f)))\r\n  end)\r\n  local _, str = next(F)\r\n  assert_equal(nil, _t(str))\r\nend\r\n\r\nend",
    "type": "statement:if"
  }, {
    "id": 328,
    "text": "function setup()\r\n  cwd = fs.currentdir()\r\n  base = J(cwd, _T\"tmp\")\r\n  files = {\r\n    J(base, _T\".txt\"),\r\n    J(base, _T\"1.txt\"),\r\n    J(base, _T\"1.txtdat\"),\r\n    J(base, _T\".txtdat\"),\r\n    J(base, _T\".txt.dat\"),\r\n    J(base, _T\".dat.txt\"),\r\n  }\r\n  teardown()\r\n  assert_true(fs.mkdir(base))\r\n  for _, f in ipairs(files) do\r\n    assert(mkfile(f, data))\r\n  end\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 329,
    "text": "files = {\r\n    J(base, _T\".txt\"),\r\n    J(base, _T\"1.txt\"),\r\n    J(base, _T\"1.txtdat\"),\r\n    J(base, _T\".txtdat\"),\r\n    J(base, _T\".txt.dat\"),\r\n    J(base, _T\".dat.txt\"),\r\n  }",
    "type": "statement:assign"
  }, {
    "id": 330,
    "text": "function test_ext1()\r\n  local F = {\r\n    J(base, _T\".txt\"),\r\n    J(base, _T\"1.txt\"),\r\n    J(base, _T\"1.txtdat\"),\r\n    J(base, _T\".dat.txt\"),\r\n  }\r\n\r\n  fs.foreach(base .. DIR_SEP .. _T\"*.txt\", function(f)\r\n    local s = (_t(f):sub(-8) == (DIR_SEP .. \".txtdat\"))\r\n    if s then skip(\"FIXME. pat:`*.txt` should not match `.txtdat` but shuld match `1.txtdat` (for windows compat)\")\r\n    else table.remove(F,assert_number(ifind(F, f), _t(f))) end\r\n  end)\r\n  local _, str = next(F)\r\n  assert_equal(nil, _t(str))\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 331,
    "text": "local F = {\r\n    J(base, _T\".txt\"),\r\n    J(base, _T\"1.txt\"),\r\n    J(base, _T\"1.txtdat\"),\r\n    J(base, _T\".dat.txt\"),\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 332,
    "text": "fs.foreach(base .. DIR_SEP .. _T\"*.txt\", function(f)\r\n    local s = (_t(f):sub(-8) == (DIR_SEP .. \".txtdat\"))\r\n    if s then skip(\"FIXME. pat:`*.txt` should not match `.txtdat` but shuld match `1.txtdat` (for windows compat)\")\r\n    else table.remove(F,assert_number(ifind(F, f), _t(f))) end\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 333,
    "text": "local s = (_t(f):sub(-8) == (DIR_SEP .. \".txtdat\"))",
    "type": "statement:localassign"
  }, {
    "id": 334,
    "text": "if s then skip(\"FIXME. pat:`*.txt` should not match `.txtdat` but shuld match `1.txtdat` (for windows compat)\")\r\n    else table.remove(F,assert_number(ifind(F, f), _t(f))) end",
    "type": "statement:if"
  }, {
    "id": 335,
    "text": "skip(\"FIXME. pat:`*.txt` should not match `.txtdat` but shuld match `1.txtdat` (for windows compat)\")",
    "type": "statement:functioncall"
  }, {
    "id": 336,
    "text": "table.remove(F,assert_number(ifind(F, f), _t(f)))",
    "type": "statement:functioncall"
  }, {
    "id": 337,
    "text": "local _, str = next(F)",
    "type": "statement:localassign"
  }, {
    "id": 338,
    "text": "assert_equal(nil, _t(str))",
    "type": "statement:functioncall"
  }, {
    "id": 339,
    "text": "function test_ext2()\r\n  local F = {\r\n    J(base, _T\".txt\"),\r\n    J(base, _T\".txt.dat\"),\r\n    J(base, _T\".txtdat\"),\r\n    J(base, _T\"1.txt\"),\r\n    J(base, _T\"1.txtdat\"),\r\n    J(base, _T\".dat.txt\"),\r\n  }\r\n\r\n  fs.foreach(base .. DIR_SEP .. _T\"*.txt*\", function(f)\r\n    table.remove(F,assert_number(ifind(F, f), _t(f)))\r\n  end)\r\n  local _, str = next(F)\r\n  assert_equal(nil, _t(str))\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 340,
    "text": "local F = {\r\n    J(base, _T\".txt\"),\r\n    J(base, _T\".txt.dat\"),\r\n    J(base, _T\".txtdat\"),\r\n    J(base, _T\"1.txt\"),\r\n    J(base, _T\"1.txtdat\"),\r\n    J(base, _T\".dat.txt\"),\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 341,
    "text": "fs.foreach(base .. DIR_SEP .. _T\"*.txt*\", function(f)\r\n    table.remove(F,assert_number(ifind(F, f), _t(f)))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 342,
    "text": "function test_ext3()\r\n  local F = {\r\n    J(base, _T\".txt\"),\r\n    J(base, _T\"1.txt\"),\r\n  }\r\n  fs.foreach(base .. DIR_SEP .. _T\"?.txt\", function(f)\r\n    table.remove(F,assert_number(ifind(F, f), _t(f)))\r\n  end)\r\n  local _, str = next(F)\r\n  assert_equal(nil, _t(str))\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 343,
    "text": "local F = {\r\n    J(base, _T\".txt\"),\r\n    J(base, _T\"1.txt\"),\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 344,
    "text": "fs.foreach(base .. DIR_SEP .. _T\"?.txt\", function(f)\r\n    table.remove(F,assert_number(ifind(F, f), _t(f)))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 345,
    "text": "function test_ext4()\r\n  local F = {\r\n    J(base, _T\"1.txt\"),\r\n  }\r\n  fs.foreach(base .. DIR_SEP .. _T\"1?.txt\", function(f)\r\n    table.remove(F,assert_number(ifind(F, f), _t(f)))\r\n  end)\r\n  local _, str = next(F)\r\n  assert_equal(nil, _t(str))\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 346,
    "text": "local F = {\r\n    J(base, _T\"1.txt\"),\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 347,
    "text": "fs.foreach(base .. DIR_SEP .. _T\"1?.txt\", function(f)\r\n    table.remove(F,assert_number(ifind(F, f), _t(f)))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 348,
    "text": "function test_ext5()\r\n  local F = {\r\n    J(base, _T\"1.txt\"),\r\n    J(base, _T\"1.txtdat\"),\r\n  }\r\n  fs.foreach(base .. DIR_SEP .. _T\"1*.txt\", function(f)\r\n    table.remove(F,assert_number(ifind(F, f), _t(f)))\r\n  end)\r\n  local _, str = next(F)\r\n  assert_equal(nil, _t(str))\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 349,
    "text": "local F = {\r\n    J(base, _T\"1.txt\"),\r\n    J(base, _T\"1.txtdat\"),\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 350,
    "text": "fs.foreach(base .. DIR_SEP .. _T\"1*.txt\", function(f)\r\n    table.remove(F,assert_number(ifind(F, f), _t(f)))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 351,
    "text": "function test_ext6()\r\n  local F = {\r\n    J(base, _T\".txt\"),\r\n    J(base, _T\".txt.dat\"),\r\n    J(base, _T\".txtdat\"),\r\n    J(base, _T\"1.txt\"),\r\n    J(base, _T\"1.txtdat\"),\r\n    J(base, _T\".dat.txt\"),\r\n  }\r\n\r\n  fs.foreach(base .. DIR_SEP .. _T\"*.tx*t\", function(f)\r\n    table.remove(F,assert_number(ifind(F, f), _t(f)))\r\n  end)\r\n  local _, str = next(F)\r\n  assert_equal(nil, _t(str))\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 352,
    "text": "fs.foreach(base .. DIR_SEP .. _T\"*.tx*t\", function(f)\r\n    table.remove(F,assert_number(ifind(F, f), _t(f)))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 353,
    "text": "local _ENV = TEST_CASE\"os test\"",
    "type": "statement:localassign"
  }, {
    "id": 354,
    "text": "if name == 'lfs' and false then\r\n\r\nlocal cwd, base\r\nlocal data  = \"123\\r\\n456\\n789\"\r\nlocal rdata = \"789\\r\\n123\\n456\"\r\nlocal tmp   = \"tmp\"\r\n\r\nfunction teardown()\r\n  fs.chdir(cwd)\r\n  fs.remove(J(base, _T\"test.txt\"))\r\n  fs.remove(J(base, _T\"test2.txt\"))\r\n  fs.remove(J(base, _T'nonempty', _T'tmp.dat'))\r\n  fs.remove(J(base, _T'tmp2',     _T'tmp.dat'))\r\n  fs.rmdir(base)\r\n\r\n  fs.remove(J(base, _T'from.dat'))\r\n  fs.remove(J(base, _T'to.dat'  ))\r\n  fs.remove(J(base, _T'to.txt'  ))\r\n  fs.remove(J(base, _T'to'      ))\r\n  fs.rmdir (J(base, _T'to'      ))\r\n  fs.rmdir (J(base, _T'tmp'     ))\r\n  fs.rmdir (J(base, _T'tmp2'    ))\r\n  fs.rmdir (J(base, _T'nonempty'))\r\n  fs.rmdir (base)\r\nend\r\n\r\nfunction setup()\r\n  cwd = fs.currentdir()\r\n  base = J(cwd, _T(tmp))\r\n  assert_false(fs.exists(base), _t(base) .. \" already exists!\")\r\n\r\n  teardown()\r\n  assert_true(fs.mkdir(base))\r\n  assert_true(fs.mkdir(J(base, _T'to')))\r\n  assert_true(fs.mkdir(J(base, _T'tmp')))\r\n  assert_true(fs.mkdir(J(base, _T'nonempty')))\r\n\r\n  assert(mkfile(J(base, _T'from.dat'), data ))\r\n  assert(mkfile(J(base, _T'to.dat'  ), rdata))\r\n  assert(mkfile(J(base, _T'nonempty', _T'tmp.dat'), data ))\r\nend\r\n\r\nfunction test_rename_file_to_file()\r\n  local SRC, DST = J(base, _T'from.dat'), J(base, _T'to.dat')\r\n  assert_equal(SRC, fs.isfile(SRC))\r\n  assert_equal(DST, fs.isfile(DST))\r\n  assert_nil(os.rename(SRC, DST))\r\n  assert_equal(SRC, fs.isfile(SRC))\r\n  assert_equal(DST, fs.isfile(DST))\r\n  assert_equal(data,  read_file(SRC))\r\n  assert_equal(rdata, read_file(DST))\r\nend\r\n\r\nfunction test_rename_file_to_dir()\r\n  local SRC, DST = J(base, _T'from.dat'), J(base, _T'to')\r\n  assert_equal(SRC, fs.isfile(SRC))\r\n  assert_equal(DST, fs.isdir(DST))\r\n  assert_nil(os.rename(SRC, DST))\r\n  assert_equal(SRC, fs.isfile(SRC))\r\n  assert_equal(DST, fs.isdir(DST))\r\nend\r\n\r\nfunction test_remove_empty_dir()\r\n  local SRC = J(base, _T'to')\r\n  assert_equal(SRC, fs.isdir(SRC))\r\n  assert_nil(os.remove(SRC))\r\n  assert_equal(SRC, fs.isdir(SRC))\r\nend\r\n\r\nfunction test_remove_nonempty_dir()\r\n  local SRC = J(base, _T'nonempty')\r\n  assert_equal(SRC, fs.isdir(SRC))\r\n  assert_nil(os.remove(SRC))\r\n  assert_equal(SRC, fs.isdir(SRC))\r\nend\r\n\r\nend",
    "type": "statement:if"
  }, {
    "id": 355,
    "text": "function teardown()\r\n  fs.chdir(cwd)\r\n  fs.remove(J(base, _T\"test.txt\"))\r\n  fs.remove(J(base, _T\"test2.txt\"))\r\n  fs.remove(J(base, _T'nonempty', _T'tmp.dat'))\r\n  fs.remove(J(base, _T'tmp2',     _T'tmp.dat'))\r\n  fs.rmdir(base)\r\n\r\n  fs.remove(J(base, _T'from.dat'))\r\n  fs.remove(J(base, _T'to.dat'  ))\r\n  fs.remove(J(base, _T'to.txt'  ))\r\n  fs.remove(J(base, _T'to'      ))\r\n  fs.rmdir (J(base, _T'to'      ))\r\n  fs.rmdir (J(base, _T'tmp'     ))\r\n  fs.rmdir (J(base, _T'tmp2'    ))\r\n  fs.rmdir (J(base, _T'nonempty'))\r\n  fs.rmdir (base)\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 356,
    "text": "function test_rename_file_to_file()\r\n  local SRC, DST = J(base, _T'from.dat'), J(base, _T'to.dat')\r\n  assert_equal(SRC, fs.isfile(SRC))\r\n  assert_equal(DST, fs.isfile(DST))\r\n  assert_nil(os.rename(SRC, DST))\r\n  assert_equal(SRC, fs.isfile(SRC))\r\n  assert_equal(DST, fs.isfile(DST))\r\n  assert_equal(data,  read_file(SRC))\r\n  assert_equal(rdata, read_file(DST))\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 357,
    "text": "assert_equal(SRC, fs.isfile(SRC))",
    "type": "statement:functioncall"
  }, {
    "id": 358,
    "text": "assert_equal(DST, fs.isfile(DST))",
    "type": "statement:functioncall"
  }, {
    "id": 359,
    "text": "assert_nil(os.rename(SRC, DST))",
    "type": "statement:functioncall"
  }, {
    "id": 360,
    "text": "function test_rename_file_to_dir()\r\n  local SRC, DST = J(base, _T'from.dat'), J(base, _T'to')\r\n  assert_equal(SRC, fs.isfile(SRC))\r\n  assert_equal(DST, fs.isdir(DST))\r\n  assert_nil(os.rename(SRC, DST))\r\n  assert_equal(SRC, fs.isfile(SRC))\r\n  assert_equal(DST, fs.isdir(DST))\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 361,
    "text": "function test_remove_empty_dir()\r\n  local SRC = J(base, _T'to')\r\n  assert_equal(SRC, fs.isdir(SRC))\r\n  assert_nil(os.remove(SRC))\r\n  assert_equal(SRC, fs.isdir(SRC))\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 362,
    "text": "local SRC = J(base, _T'to')",
    "type": "statement:localassign"
  }, {
    "id": 363,
    "text": "assert_nil(os.remove(SRC))",
    "type": "statement:functioncall"
  }, {
    "id": 364,
    "text": "function test_remove_nonempty_dir()\r\n  local SRC = J(base, _T'nonempty')\r\n  assert_equal(SRC, fs.isdir(SRC))\r\n  assert_nil(os.remove(SRC))\r\n  assert_equal(SRC, fs.isdir(SRC))\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 365,
    "text": "local SRC = J(base, _T'nonempty')",
    "type": "statement:localassign"
  }, {
    "id": 366,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 367,
    "text": "local function mkfile(P, data)\r\n  local f, e = io.open(_t(P), \"w+b\")\r\n  if not f then return nil, e end\r\n  if data then assert(f:write(data)) end\r\n  f:close()\r\n  return P\r\nend",
    "type": "function"
  }, {
    "id": 368,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 369,
    "text": "local function read_file(P)\r\n  local f, err = io.open(_t(P), \"rb\")\r\n  if not f then return nil, err end\r\n  local data, err = f:read(\"*all\")\r\n  f:close()\r\n  if data then return data end\r\n  return nil, err\r\nend",
    "type": "function"
  }, {
    "id": 370,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 371,
    "text": "local function J(...)\r\n  return (table.concat({...}, DIR_SEP))\r\nend",
    "type": "function"
  }, {
    "id": 372,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 373,
    "text": "function setup()\r\n  cwd = assert_string(fs.currentdir())\r\nend",
    "type": "function"
  }, {
    "id": 374,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 375,
    "text": "function teardown()\r\n  fs.chdir(cwd)\r\n  fs.rmdir(J(cwd, _T\"1\"))\r\nend",
    "type": "function"
  }, {
    "id": 376,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 377,
    "text": "function test_cwd()\r\n  assert_string(cwd)\r\n  assert_equal(cwd, fs.exists(cwd))\r\n  assert_equal(cwd, fs.isdir(cwd) )\r\n  assert_false(fs.isfile(cwd))\r\nend",
    "type": "function"
  }, {
    "id": 378,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 379,
    "text": "function test_md()\r\n  local P = J(cwd, _T\"1\")\r\n  assert_false(fs.exists(P))\r\n  assert_true (fs.mkdir(P))\r\n  assert_nil  (fs.mkdir(P))\r\n  assert_equal(P, fs.exists(P))\r\n  assert_true (fs.chdir(P))\r\n  assert_equal(P, fs.currentdir())\r\n  assert_true (fs.chdir(cwd))\r\n  assert_equal(cwd, fs.currentdir())\r\n  assert_true (fs.rmdir(P))\r\n  assert_false(fs.exists(P))\r\nend",
    "type": "function"
  }, {
    "id": 380,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 381,
    "text": "function test_tmpdir()\r\n  local p = assert_string(fs.tmpdir())\r\n  assert_equal(p, fs.isdir(p))\r\nend",
    "type": "function"
  }, {
    "id": 382,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 383,
    "text": "function teardown()\r\n  fs.chdir(cwd)\r\n  fs.remove(J(base, _T\"test.txt\"))\r\n  fs.remove(J(base, _T\"test2.txt\"))\r\n  fs.rmdir(base)\r\nend",
    "type": "function"
  }, {
    "id": 384,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 385,
    "text": "function setup()\r\n  cwd = fs.currentdir()\r\n  base = J(cwd, _T\"tmp\")\r\n\r\n  teardown()\r\n  assert_true(fs.mkdir(base))\r\n  assert(mkfile(J(base, _T\"test.txt\"), data))\r\nend",
    "type": "function"
  }, {
    "id": 386,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 387,
    "text": "function test_remove()\r\n  assert_true(fs.remove(J(base, _T\"test.txt\")))\r\n  assert_nil(fs.remove(J(base, _T\"test.txt\")))\r\nend",
    "type": "function"
  }, {
    "id": 388,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 389,
    "text": "function test_remove_dir()\r\n  assert_nil(fs.remove(base))\r\n  assert_equal(base, fs.isdir(base))\r\nend",
    "type": "function"
  }, {
    "id": 390,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 391,
    "text": "function test_rmdir()\r\n  assert_nil(fs.rmdir(base))\r\n  assert_equal(base, fs.isdir(base))\r\n  assert_true(fs.remove(J(base, _T\"test.txt\")))\r\n  assert_true(fs.rmdir(base))\r\nend",
    "type": "function"
  }, {
    "id": 392,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 393,
    "text": "function test_size()\r\n  assert_equal(#data, fs.size(J(base, _T\"test.txt\")))\r\nend",
    "type": "function"
  }, {
    "id": 394,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 395,
    "text": "function test_touch()\r\n  local SRC = J(base, _T\"test.txt\")\r\n  local t1 = assert_number(fs.mtime(SRC)) + 100\r\n  assert_true(fs.touch(SRC, t1))\r\n  local t2 = assert_number(fs.mtime(SRC))\r\n  assert(math.abs(t2-t1) <= 2)\r\n  local t2 = assert_number(fs.atime(SRC))\r\n  assert(math.abs(t2-t1) <= 2)\r\n  assert_true(fs.touch(SRC, t1, t1 + 100))\r\n  local t2 = assert_number(fs.mtime(SRC))\r\n  assert(math.abs(t2-(t1+100)) <= 2)\r\n  local t2 = assert_number(fs.atime(SRC))\r\n  assert(math.abs(t2-t1) <= 2)\r\nend",
    "type": "function"
  }, {
    "id": 396,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 397,
    "text": "function test_touch_non_exists()\r\n  local SRC = J(base, _T\"test2.txt\")\r\n  assert_false(fs.exists(SRC))\r\n  assert_nil(fs.touch(SRC))\r\n  assert_false(fs.exists(SRC))\r\nend",
    "type": "function"
  }, {
    "id": 398,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 399,
    "text": "function teardown()\r\n  fs.chdir(cwd)\r\n  fs.remove(J(base, _T\"test.txt\"))\r\n  fs.remove(J(base, _T\"test2.txt\"))\r\n  fs.remove(J(base, _T'nonempty', _T'tmp.dat'))\r\n  fs.remove(J(base, _T'tmp2',     _T'tmp.dat'))\r\n  fs.rmdir(base)\r\n\r\n  fs.remove(J(base, _T'from.dat'))\r\n  fs.remove(J(base, _T'to.dat'  ))\r\n  fs.remove(J(base, _T'to.txt'  ))\r\n  fs.remove(J(base, _T'to'      ))\r\n  fs.remove(J(base, _T'tmp2'    ))\r\n  fs.rmdir (J(base, _T'to'      ))\r\n  fs.rmdir (J(base, _T'tmp'     ))\r\n  fs.rmdir (J(base, _T'tmp2'    ))\r\n  fs.rmdir (J(base, _T'nonempty'))\r\n  fs.rmdir (base)\r\nend",
    "type": "function"
  }, {
    "id": 400,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 401,
    "text": "function setup()\r\n  cwd = fs.currentdir()\r\n  base = J(cwd, _T(tmp))\r\n  assert_false(fs.exists(base), _t(base) .. \" already exists!\")\r\n\r\n  teardown()\r\n  assert_true(fs.mkdir(base))\r\n  assert_true(fs.mkdir(J(base, _T'to')))\r\n  assert_true(fs.mkdir(J(base, _T'tmp')))\r\n  assert_true(fs.mkdir(J(base, _T'nonempty')))\r\n\r\n  assert(mkfile(J(base, _T'from.dat'), data ))\r\n  assert(mkfile(J(base, _T'to.dat'  ), rdata))\r\n  assert(mkfile(J(base, _T'nonempty', _T'tmp.dat'), data ))\r\nend",
    "type": "function"
  }, {
    "id": 402,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 403,
    "text": "local function test_fail(operation)\r\n  local SRC, DST = J(base, _T'from.dat'), J(base, _T'to.dat')\r\n  assert_nil(operation(SRC, DST))\r\n  assert_equal(data,  read_file(SRC))\r\n  assert_equal(rdata, read_file(DST))\r\n\r\n  assert_nil(operation(SRC, DST, false))\r\n  assert_equal(data,  read_file(SRC))\r\n  assert_equal(rdata, read_file(DST))\r\n\r\n  assert_nil(operation(SRC, DST, nil))\r\n  assert_equal(data,  read_file(SRC))\r\n  assert_equal(rdata, read_file(DST))\r\n\r\n  SRC, DST = J(base, _T'from.dat'), J(base, _T'to')\r\n  assert_nil(operation(SRC, DST))\r\n  assert_equal(data,  read_file(SRC))\r\n  assert_equal(DST,   fs.isdir(DST) )\r\n\r\n  SRC, DST = J(base, _T'unknown.txt'), J(base, _T'to.dat')\r\n  assert_nil(operation(SRC, DST, true))\r\n  assert_false(fs.exists(SRC))\r\n  assert_equal(rdata, read_file(DST))\r\nend",
    "type": "function"
  }, {
    "id": 404,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 405,
    "text": "function test_move_fail()\r\n  test_fail(fs.move)\r\nend",
    "type": "function"
  }, {
    "id": 406,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 407,
    "text": "function test_copy_fail()\r\n  test_fail(fs.copy)\r\nend",
    "type": "function"
  }, {
    "id": 408,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 409,
    "text": "function test_move_pass()\r\n  local SRC, DST = J(base, _T'from.dat'), J(base, _T'to.txt')\r\n  assert_true(fs.move(SRC, DST))\r\n  assert_false(fs.exists(SRC))\r\n  assert_equal(data, read_file(DST))\r\nend",
    "type": "function"
  }, {
    "id": 410,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 411,
    "text": "function test_copy_pass()\r\n  local SRC, DST = J(base, _T'from.dat'), J(base, _T'to.txt')\r\n  assert_true(fs.copy(SRC, DST))\r\n  assert_equal(data, read_file(SRC))\r\n  assert_equal(data, read_file(DST))\r\nend",
    "type": "function"
  }, {
    "id": 412,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 413,
    "text": "function test_move_force_file()\r\n  local SRC, DST = J(base, _T'from.dat'), J(base, _T'to.dat')\r\n  assert_true( fs.move(SRC, DST, true ))\r\n  assert_false(fs.exists(SRC))\r\n  assert_equal(data, read_file(DST))\r\nend",
    "type": "function"
  }, {
    "id": 414,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 415,
    "text": "function test_copy_force_file()\r\n  local SRC, DST = J(base, _T'from.dat'), J(base, _T'to.dat')\r\n  assert_true( fs.copy(SRC, DST, true ))\r\n  assert_equal(data, read_file(SRC))\r\n  assert_equal(data, read_file(DST))\r\nend",
    "type": "function"
  }, {
    "id": 416,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 417,
    "text": "function test_move_empty_dir()\r\n  local SRC, DST = J(base, _T'tmp'), J(base, _T'tmp2')\r\n  assert_true( fs.move(SRC, DST) )\r\n  assert_false(fs.exists(SRC))\r\n  assert_equal(DST, fs.isdir(DST))\r\nend",
    "type": "function"
  }, {
    "id": 418,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 419,
    "text": "function test_move_nonempty_dir()\r\n  local SRC, DST = J(base, _T'nonempty'), J(base, _T'tmp2')\r\n  assert_true( fs.move(SRC, DST) )\r\n  assert_false(fs.exists(SRC))\r\n  assert_equal(DST, fs.isdir(DST))\r\nend",
    "type": "function"
  }, {
    "id": 420,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 421,
    "text": "function test_copy_empty_dir()\r\n  local SRC, DST = J(base, _T'tmp'), J(base, _T'tmp2')\r\n  assert_nil  (fs.copy(SRC, DST))\r\n  assert_false(fs.exists(DST))\r\nend",
    "type": "function"
  }, {
    "id": 422,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 423,
    "text": "function test_copy_nonempty_dir()\r\n  local SRC, DST = J(base, _T'nonempty'), J(base, _T'tmp2')\r\n  assert_nil  (fs.copy(SRC, DST))\r\n  assert_false(fs.exists(DST))\r\nend",
    "type": "function"
  }, {
    "id": 424,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 425,
    "text": "function test_move_force_dir()\r\n  local SRC, DST = J(base, _T'from.dat'), J(base, _T'to')\r\n  assert_nil( fs.move(SRC, DST, true ) )\r\n  assert_equal(data, read_file(SRC))\r\n  assert_equal(DST, fs.isdir(DST))\r\nend",
    "type": "function"
  }, {
    "id": 426,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 427,
    "text": "function test_move_force_dir2()\r\n  local SRC, DST = J(base, _T'tmp'), J(base, _T'to')\r\n  assert_nil( fs.move(SRC, DST, true ))\r\n  assert_equal(SRC, fs.isdir(SRC))\r\n  assert_equal(DST, fs.isdir(DST))\r\nend",
    "type": "function"
  }, {
    "id": 428,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 429,
    "text": "function test_copy_force_dir()\r\n  local SRC, DST = J(base, _T'from.dat'), J(base, _T'to')\r\n  assert_nil( fs.copy(SRC, DST, true ))\r\n  assert_equal(data, read_file(SRC))\r\n  assert_equal(DST, fs.isdir(DST))\r\nend",
    "type": "function"
  }, {
    "id": 430,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 431,
    "text": "function teardown()\r\n  collectgarbage\"collect\" -- dir cleanup\r\n  fs.chdir(cwd)\r\n  for _, f in ipairs(files) do\r\n    fs.remove(f)\r\n  end\r\n  fs.rmdir(J(base, _T\"1\"))\r\n  fs.rmdir(base)\r\nend",
    "type": "function"
  }, {
    "id": 432,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 433,
    "text": "function setup()\r\n  cwd = fs.currentdir()\r\n  base = J(cwd, _T\"tmp\")\r\n  files = {\r\n    J(base, _T\"test\"),\r\n    J(base, _T\"test.txt\"),\r\n    J(base, _T\"test.dat\"),\r\n    J(base, _T\"123.test\"),\r\n  }\r\n  teardown()\r\n  assert_true(fs.mkdir(base))\r\n  assert_true(fs.mkdir(J(base, _T\"1\")))\r\n  for _, f in ipairs(files) do\r\n    assert(mkfile(f, data))\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 434,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 435,
    "text": "function test_dir()\r\n  local t = clone(files)\r\n  table.insert(t, J(base, _T\".\"))\r\n  table.insert(t, J(base, _T\"..\"))\r\n  table.insert(t, J(base, _T\"1\"))\r\n  local n = 0\r\n  for f in fs.dir(base) do\r\n    assert(ifind(t, J(base, f)), f)\r\n    n = n + 1\r\n  end\r\n  assert_equal(#t, n)\r\nend",
    "type": "function"
  }, {
    "id": 436,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 437,
    "text": "function test_each()\r\n  local t = clone(files)\r\n  table.insert(t, J(base, _T\"1\"))\r\n  local n = 0\r\n  assert_nil(fs.foreach(base .. DIR_SEP, function(f, a)\r\n    assert_string(a.mode)\r\n    assert_number(a.size)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end))\r\n  assert_equal(#t, n)\r\nend",
    "type": "function"
  }, {
    "id": 438,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 439,
    "text": "function test_each_impl()\r\n  local t = clone(files)\r\n  table.insert(t, J(base, _T\"1\"))\r\n  local n = 0\r\n  assert_nil(fs.each_impl{\r\n    file = base .. DIR_SEP,\r\n    callback = function(f, a)\r\n      assert(ifind(t, f), f)\r\n      n = n + 1\r\n    end}\r\n  )\r\n  assert_equal(#t, n)\r\nend",
    "type": "function"
  }, {
    "id": 440,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 441,
    "text": "function test_each_impl_generic_for()\r\n  local t = clone(files)\r\n  table.insert(t, J(base, _T\"1\"))\r\n  local n = 0\r\n  for f in fs.each_impl{file = base .. DIR_SEP} do\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end\r\n  assert_equal(#t, n)\r\nend",
    "type": "function"
  }, {
    "id": 442,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 443,
    "text": "function test_each_relpath()\r\n  local base = J(_T'.', _T\"tmp\")\r\n  local t = {\r\n    J(base, _T\"1\"),\r\n    J(base, _T\"test\"),\r\n    J(base, _T\"test.txt\"),\r\n    J(base, _T\"test.dat\"),\r\n    J(base, _T\"123.test\"),\r\n  }\r\n\r\n  local n = 0\r\n  assert_nil(fs.foreach(base .. DIR_SEP, function(f, a)\r\n    assert_string(a.mode)\r\n    assert_number(a.size)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end))\r\n  assert_equal(#t, n)\r\nend",
    "type": "function"
  }, {
    "id": 444,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 445,
    "text": "function test_each_skipdots()\r\n  local t = clone(files)\r\n  table.insert(t, J(base, _T\".\"))\r\n  table.insert(t, J(base, _T\"..\"))\r\n  table.insert(t, J(base, _T\"1\"))\r\n  local n = 0\r\n  assert_nil(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end,{skipdots=false}))\r\n  assert_equal(#t, n)\r\nend",
    "type": "function"
  }, {
    "id": 446,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 447,
    "text": "function test_each_skipfiles()\r\n  local t = {}\r\n  table.insert(t, J(base, _T\".\"))\r\n  table.insert(t, J(base, _T\"..\"))\r\n  table.insert(t, J(base, _T\"1\"))\r\n  local n = 0\r\n  assert_nil(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end,{skipdots=false;skipfiles=true}))\r\n  assert_equal(#t, n)\r\nend",
    "type": "function"
  }, {
    "id": 448,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 449,
    "text": "function test_each_skipdirs()\r\n  local t = files\r\n  local n = 0\r\n  assert_nil(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end,{skipdirs=true}))\r\n  assert_equal(#t, n)\r\nend",
    "type": "function"
  }, {
    "id": 450,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 451,
    "text": "function test_each_break()\r\n  local n = 0\r\n  assert_equal(123, fs.foreach(base .. DIR_SEP, function(f)\r\n    n = n + 1\r\n    return 123\r\n  end))\r\n  assert_equal(1, n)\r\nend",
    "type": "function"
  }, {
    "id": 452,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 453,
    "text": "function teardown()\r\n  collectgarbage\"collect\" -- dir cleanup\r\n  fs.chdir(cwd)\r\n  for _, f in ipairs(files) do\r\n    fs.remove(f)\r\n  end\r\n  fs.rmdir(J(base, _T\"3\"))\r\n  fs.rmdir(J(base, _T\"2\"))\r\n  fs.rmdir(J(base, _T\"1\"))\r\n  fs.rmdir(base)\r\nend",
    "type": "function"
  }, {
    "id": 454,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 455,
    "text": "function setup()\r\n  cwd = fs.currentdir()\r\n  base = J(cwd, _T\"tmp\")\r\n  files = {\r\n    J(base, _T\"test\"),\r\n    J(base, _T\"test.txt\"),\r\n    J(base, _T\"test.dat\"),\r\n    J(base, _T\"123.test\"),\r\n    J(base, _T\"1\", _T\"a1.txt\"),\r\n    J(base, _T\"1\", _T\"a2.dat\"),\r\n    J(base, _T\"1\", _T\"b1.txt\"),\r\n    J(base, _T\"1\", _T\"b2.dat\"),\r\n    J(base, _T\"2\", _T\"a1.txt\"),\r\n    J(base, _T\"2\", _T\"a2.dat\"),\r\n    J(base, _T\"2\", _T\"b1.txt\"),\r\n    J(base, _T\"2\", _T\"b2.dat\"),\r\n  }\r\n  teardown()\r\n  assert_true(fs.mkdir(base))\r\n  assert_true(fs.mkdir(J(base, _T\"1\")))\r\n  assert_true(fs.mkdir(J(base, _T\"2\")))\r\n  assert_true(fs.mkdir(J(base, _T\"3\")))\r\n  for _, f in ipairs(files) do\r\n    -- print(\">>> \", Q(f))\r\n    assert(mkfile(f, data))\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 456,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 457,
    "text": "function test_each()\r\n  local t = clone(files)\r\n  table.insert(t, J(base, _T\"1\"))\r\n  table.insert(t, J(base, _T\"2\"))\r\n  table.insert(t, J(base, _T\"3\"))\r\n  local n = 0\r\n  assert_nil(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end,{recurse=true}))\r\n  assert_equal(#t, n)\r\nend",
    "type": "function"
  }, {
    "id": 458,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 459,
    "text": "function test_each_reverse_true()\r\n  local dir  = J(base, _T\"1\")\r\n  local file = J(dir,  _T\"a1.txt\")\r\n  assert_true(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert_not_equal(up(dir), up(f))\r\n    return up(file) == up(f)\r\n  end,{recurse=true;reverse=true}))\r\nend",
    "type": "function"
  }, {
    "id": 460,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 461,
    "text": "function test_each_reverse_false()\r\n  local dir  = J(base, _T\"1\")\r\n  local file = J(dir,  _T\"a1.txt\")\r\n  assert_true(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert_not_equal(up(file), up(f))\r\n    return up(dir) == up(f)\r\n  end,{recurse=true;reverse=false}))\r\nend",
    "type": "function"
  }, {
    "id": 462,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 463,
    "text": "function test_each_reverse_nil()\r\n  local dir  = J(base, _T\"1\")\r\n  local file = J(dir,  _T\"a1.txt\")\r\n  assert_true(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert_not_equal(up(file), up(f))\r\n    return up(dir) == up(f)\r\n  end,{recurse=true;reverse=nil}))\r\nend",
    "type": "function"
  }, {
    "id": 464,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 465,
    "text": "function test_each_skipdots()\r\n  local t = clone(files)\r\n  table.insert(t, J(base, _T\".\"))\r\n  table.insert(t, J(base, _T\"..\"))\r\n  table.insert(t, J(base, _T\"1\"))\r\n  table.insert(t, J(base, _T\"1\", _T\".\"))\r\n  table.insert(t, J(base, _T\"1\", _T\"..\"))\r\n  table.insert(t, J(base, _T\"2\"))\r\n  table.insert(t, J(base, _T\"2\", _T\".\"))\r\n  table.insert(t, J(base, _T\"2\", _T\"..\"))\r\n  table.insert(t, J(base, _T\"3\"))\r\n  table.insert(t, J(base, _T\"3\", _T\".\"))\r\n  table.insert(t, J(base, _T\"3\", _T\"..\"))\r\n  local n = 0\r\n  assert_nil(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end,{recurse=true;skipdots=false}))\r\n  assert_equal(#t, n)\r\nend",
    "type": "function"
  }, {
    "id": 466,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 467,
    "text": "function test_each_delay()\r\n  local t = clone(files)\r\n  table.insert(t, J(base, _T\"1\"))\r\n  table.insert(t, J(base, _T\"2\"))\r\n  table.insert(t, J(base, _T\"3\"))\r\n  local n = 0\r\n  assert_nil(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end,{recurse=true;delay=true}))\r\n  assert_equal(#t, n)\r\nend",
    "type": "function"
  }, {
    "id": 468,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 469,
    "text": "function test_each_skipdirs()\r\n  local t = files\r\n  local n = 0\r\n  assert_nil(fs.foreach(base .. DIR_SEP, function(f)\r\n    assert(ifind(t, f), _t(f))\r\n    n = n + 1\r\n  end,{recurse=true;skipdirs=true;}))\r\n  assert_equal(#t, n)\r\nend",
    "type": "function"
  }, {
    "id": 470,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 471,
    "text": "function test_each_break()\r\n  local n = 0\r\n  assert_equal(\"break\", fs.foreach(base .. DIR_SEP, function(f)\r\n    if up(f) == up( J(base, _T\"2\", _T\"a2.dat\") ) then\r\n      n = 1\r\n      return \"break\"\r\n    end\r\n    n = 0\r\n  end,{recurse=true}))\r\n  assert_equal(1, n)\r\nend",
    "type": "function"
  }, {
    "id": 472,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 473,
    "text": "function test_each_break_delay()\r\n  local n = 0\r\n  assert_equal(\"break\", fs.foreach(base .. DIR_SEP, function(f)\r\n    if up(f) == up( J(base, _T\"2\", _T\"a2.dat\") ) then\r\n      n = 1\r\n      return \"break\"\r\n    end\r\n    n = 0\r\n  end,{recurse=true;delay=true;}))\r\n  assert_equal(1, n)\r\nend",
    "type": "function"
  }, {
    "id": 474,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 475,
    "text": "function test_each_mask_basename_only()\r\n  local t = {\r\n    J(base, _T\"123.test\"),\r\n    J(base, _T\"1\"),\r\n    J(base, _T\"1\", _T\"a1.txt\"),\r\n    J(base, _T\"1\", _T\"b1.txt\"),\r\n    J(base, _T\"2\", _T\"a1.txt\"),\r\n    J(base, _T\"2\", _T\"b1.txt\"),\r\n  }\r\n  local n = 0\r\n  assert_nil(fs.foreach(J(base, _T\"*1*\"), function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end,{recurse=true}))\r\n  assert_equal(#t, n)\r\nend",
    "type": "function"
  }, {
    "id": 476,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 477,
    "text": "function test_each_mask_ext()\r\n  local t = {\r\n    J(base, _T\"test.dat\"),\r\n    J(base, _T\"1\", _T\"a2.dat\"),\r\n    J(base, _T\"1\", _T\"b2.dat\"),\r\n    J(base, _T\"2\", _T\"a2.dat\"),\r\n    J(base, _T\"2\", _T\"b2.dat\"),\r\n  }\r\n  local n = 0\r\n  assert_nil(fs.foreach(J(base, _T\"*.dat\"), function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end,{recurse=true}))\r\n  assert_equal(#t, n)\r\nend",
    "type": "function"
  }, {
    "id": 478,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 479,
    "text": "function test_each_attr()\r\n  local F = clone(files)\r\n  table.insert(F, J(base, _T\"1\"))\r\n  table.insert(F, J(base, _T\"2\"))\r\n  table.insert(F, J(base, _T\"3\"))\r\n  local N = 0\r\n  assert_nil(fs.each_impl{\r\n    file=base .. DIR_SEP, recurse=true,\r\n    param = \"fpnmaztcl\",\r\n    callback = function(f,p,n,m,a,z,t,c,l)\r\n      local attr = assert(fs.attributes(f))\r\n      assert(ifind(F, f), f)\r\n      assert_string(f)\r\n      assert_string(p)\r\n      assert_string(n)\r\n      assert_string(m)\r\n      assert_table(a)\r\n      assert_number(z)\r\n      assert_number(t)\r\n      assert_number(c)\r\n      assert_number(l)\r\n      assert_equal(attr.mode         , m)\r\n      assert_equal(attr.size         , z)\r\n      assert_equal(attr.modification , t)\r\n      assert_equal(attr.change       , c)\r\n      assert_equal(attr.access       , l)\r\n      assert_equal(m, a.mode         )\r\n      assert_equal(z, a.size         )\r\n      assert_equal(t, a.modification )\r\n      assert_equal(c, a.change       )\r\n      assert_equal(l, a.access       )\r\n      N = N + 1\r\n    end,\r\n  })\r\n  assert_equal(#F, N)\r\nend",
    "type": "function"
  }, {
    "id": 480,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 481,
    "text": "function test_each_attr_generic_for()\r\n  local F = clone(files)\r\n  table.insert(F, J(base, _T\"1\"))\r\n  table.insert(F, J(base, _T\"2\"))\r\n  table.insert(F, J(base, _T\"3\"))\r\n  local N = 0\r\n  for f,p,n,m,a,z,t,c,l in fs.each_impl{\r\n    file=base .. DIR_SEP, recurse=true,\r\n    param = \"fpnmaztcl\",\r\n  }do\r\n    local attr = assert(fs.attributes(f))\r\n    assert(ifind(F, f), _t(f))\r\n    assert_string(f)\r\n    assert_string(p)\r\n    assert_string(n)\r\n    assert_string(m)\r\n    assert_table(a)\r\n    assert_number(z)\r\n    assert_number(t)\r\n    assert_number(c)\r\n    assert_number(l)\r\n    assert_equal(attr.mode         , m)\r\n    assert_equal(attr.size         , z)\r\n    assert_equal(attr.modification , t)\r\n    assert_equal(attr.change       , c)\r\n    assert_equal(attr.access       , l)\r\n    assert_equal(m, a.mode         )\r\n    assert_equal(z, a.size         )\r\n    assert_equal(t, a.modification )\r\n    assert_equal(c, a.change       )\r\n    assert_equal(l, a.access       )\r\n    N = N + 1\r\n  end\r\n  assert_equal(#F, N)\r\nend",
    "type": "function"
  }, {
    "id": 482,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 483,
    "text": "function teardown()\r\n  collectgarbage\"collect\" -- dir cleanup\r\n  fs.chdir(cwd)\r\n  for _, f in ipairs(files) do\r\n    fs.remove(f)\r\n  end\r\n  fs.rmdir(base)\r\nend",
    "type": "function"
  }, {
    "id": 484,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 485,
    "text": "function setup()\r\n  cwd = fs.currentdir()\r\n  base = J(cwd, _T\"tmp\")\r\n  files = {\r\n    J(base, _T\"test\"),\r\n    J(base, _T\"test.txt\"),\r\n    J(base, _T\"test.txtdat\"),\r\n    J(base, _T\"test.txt.dat\"),\r\n  }\r\n  teardown()\r\n  assert_true(fs.mkdir(base))\r\n  for _, f in ipairs(files) do\r\n    assert(mkfile(f, data))\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 486,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 487,
    "text": "function test_ext1()\r\n  local F = clone(files)\r\n  local n = 0\r\n  table.remove(F,1)\r\n  table.remove(F,3)\r\n  fs.foreach(base .. DIR_SEP .. _T\"*.txt\", function(f)\r\n    assert(ifind(F, f), _t(f))\r\n    n = n + 1\r\n  end)\r\n  assert_equal(#F, n)\r\nend",
    "type": "function"
  }, {
    "id": 488,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 489,
    "text": "function test_ext2()\r\n  local F = clone(files)\r\n  local n = 0\r\n  table.remove(F,1)\r\n  table.remove(F,3)\r\n  fs.foreach(base .. DIR_SEP .. _T\"test*.txt\", function(f)\r\n    assert(ifind(F, f), _t(f))\r\n    n = n + 1\r\n  end)\r\n  assert_equal(#F, n)\r\nend",
    "type": "function"
  }, {
    "id": 490,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 491,
    "text": "function test_ext3()\r\n  local F = clone(files)\r\n  local n = 0\r\n  table.remove(F,1)\r\n  table.remove(F,2)\r\n  table.remove(F,2)\r\n  fs.foreach(base .. DIR_SEP .. _T\"test?.txt\", function(f)\r\n    assert(ifind(F, f), _t(f))\r\n    n = n + 1\r\n  end)\r\n  assert_equal(#F, n)\r\nend",
    "type": "function"
  }, {
    "id": 492,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 493,
    "text": "function test_noext()\r\n  local F = clone(files)\r\n  local n = 0\r\n  table.remove(F,2)\r\n  table.remove(F,2)\r\n  table.remove(F,2)\r\n  fs.foreach(base .. DIR_SEP .. _T\"test\", function(f)\r\n    assert(ifind(F, f), _t(f))\r\n    n = n + 1\r\n  end)\r\n  assert_equal(#F, n)\r\nend",
    "type": "function"
  }, {
    "id": 494,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 495,
    "text": "function test_full()\r\n  local F = clone(files)\r\n  local n = 0\r\n  table.remove(F,1)\r\n  table.remove(F,2)\r\n  table.remove(F,2)\r\n  fs.foreach(base .. DIR_SEP .. _T\"test.txt\", function(f)\r\n    assert(ifind(F, f), _t(f))\r\n    n = n + 1\r\n  end)\r\n  assert_equal(#F, n)\r\nend",
    "type": "function"
  }, {
    "id": 496,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 497,
    "text": "function teardown()\r\n  collectgarbage\"collect\" -- dir cleanup\r\n  fs.chdir(cwd)\r\n  for _, f in ipairs(files) do\r\n    fs.remove(f)\r\n  end\r\n  fs.rmdir(base)\r\nend",
    "type": "function"
  }, {
    "id": 498,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 499,
    "text": "function setup()\r\n  cwd = fs.currentdir()\r\n  base = J(cwd, _T\"tmp\")\r\n  files = {\r\n    J(base, _T\".txt\"),\r\n    J(base, _T\"1.txt\"),\r\n    J(base, _T\"1.txtdat\"),\r\n    J(base, _T\".txtdat\"),\r\n    J(base, _T\".txt.dat\"),\r\n    J(base, _T\".dat.txt\"),\r\n  }\r\n  teardown()\r\n  assert_true(fs.mkdir(base))\r\n  for _, f in ipairs(files) do\r\n    assert(mkfile(f, data))\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 500,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 501,
    "text": "function test_ext1()\r\n  local F = {\r\n    J(base, _T\".txt\"),\r\n    J(base, _T\"1.txt\"),\r\n    J(base, _T\"1.txtdat\"),\r\n    J(base, _T\".dat.txt\"),\r\n  }\r\n\r\n  fs.foreach(base .. DIR_SEP .. _T\"*.txt\", function(f)\r\n    local s = (_t(f):sub(-8) == (DIR_SEP .. \".txtdat\"))\r\n    if s then skip(\"FIXME. pat:`*.txt` should not match `.txtdat` but shuld match `1.txtdat` (for windows compat)\")\r\n    else table.remove(F,assert_number(ifind(F, f), _t(f))) end\r\n  end)\r\n  local _, str = next(F)\r\n  assert_equal(nil, _t(str))\r\nend",
    "type": "function"
  }, {
    "id": 502,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 503,
    "text": "function test_ext2()\r\n  local F = {\r\n    J(base, _T\".txt\"),\r\n    J(base, _T\".txt.dat\"),\r\n    J(base, _T\".txtdat\"),\r\n    J(base, _T\"1.txt\"),\r\n    J(base, _T\"1.txtdat\"),\r\n    J(base, _T\".dat.txt\"),\r\n  }\r\n\r\n  fs.foreach(base .. DIR_SEP .. _T\"*.txt*\", function(f)\r\n    table.remove(F,assert_number(ifind(F, f), _t(f)))\r\n  end)\r\n  local _, str = next(F)\r\n  assert_equal(nil, _t(str))\r\nend",
    "type": "function"
  }, {
    "id": 504,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 505,
    "text": "function test_ext3()\r\n  local F = {\r\n    J(base, _T\".txt\"),\r\n    J(base, _T\"1.txt\"),\r\n  }\r\n  fs.foreach(base .. DIR_SEP .. _T\"?.txt\", function(f)\r\n    table.remove(F,assert_number(ifind(F, f), _t(f)))\r\n  end)\r\n  local _, str = next(F)\r\n  assert_equal(nil, _t(str))\r\nend",
    "type": "function"
  }, {
    "id": 506,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 507,
    "text": "function test_ext4()\r\n  local F = {\r\n    J(base, _T\"1.txt\"),\r\n  }\r\n  fs.foreach(base .. DIR_SEP .. _T\"1?.txt\", function(f)\r\n    table.remove(F,assert_number(ifind(F, f), _t(f)))\r\n  end)\r\n  local _, str = next(F)\r\n  assert_equal(nil, _t(str))\r\nend",
    "type": "function"
  }, {
    "id": 508,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 509,
    "text": "function test_ext5()\r\n  local F = {\r\n    J(base, _T\"1.txt\"),\r\n    J(base, _T\"1.txtdat\"),\r\n  }\r\n  fs.foreach(base .. DIR_SEP .. _T\"1*.txt\", function(f)\r\n    table.remove(F,assert_number(ifind(F, f), _t(f)))\r\n  end)\r\n  local _, str = next(F)\r\n  assert_equal(nil, _t(str))\r\nend",
    "type": "function"
  }, {
    "id": 510,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 511,
    "text": "function test_ext6()\r\n  local F = {\r\n    J(base, _T\".txt\"),\r\n    J(base, _T\".txt.dat\"),\r\n    J(base, _T\".txtdat\"),\r\n    J(base, _T\"1.txt\"),\r\n    J(base, _T\"1.txtdat\"),\r\n    J(base, _T\".dat.txt\"),\r\n  }\r\n\r\n  fs.foreach(base .. DIR_SEP .. _T\"*.tx*t\", function(f)\r\n    table.remove(F,assert_number(ifind(F, f), _t(f)))\r\n  end)\r\n  local _, str = next(F)\r\n  assert_equal(nil, _t(str))\r\nend",
    "type": "function"
  }, {
    "id": 512,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 513,
    "text": "function teardown()\r\n  fs.chdir(cwd)\r\n  fs.remove(J(base, _T\"test.txt\"))\r\n  fs.remove(J(base, _T\"test2.txt\"))\r\n  fs.remove(J(base, _T'nonempty', _T'tmp.dat'))\r\n  fs.remove(J(base, _T'tmp2',     _T'tmp.dat'))\r\n  fs.rmdir(base)\r\n\r\n  fs.remove(J(base, _T'from.dat'))\r\n  fs.remove(J(base, _T'to.dat'  ))\r\n  fs.remove(J(base, _T'to.txt'  ))\r\n  fs.remove(J(base, _T'to'      ))\r\n  fs.rmdir (J(base, _T'to'      ))\r\n  fs.rmdir (J(base, _T'tmp'     ))\r\n  fs.rmdir (J(base, _T'tmp2'    ))\r\n  fs.rmdir (J(base, _T'nonempty'))\r\n  fs.rmdir (base)\r\nend",
    "type": "function"
  }, {
    "id": 514,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 515,
    "text": "function setup()\r\n  cwd = fs.currentdir()\r\n  base = J(cwd, _T(tmp))\r\n  assert_false(fs.exists(base), _t(base) .. \" already exists!\")\r\n\r\n  teardown()\r\n  assert_true(fs.mkdir(base))\r\n  assert_true(fs.mkdir(J(base, _T'to')))\r\n  assert_true(fs.mkdir(J(base, _T'tmp')))\r\n  assert_true(fs.mkdir(J(base, _T'nonempty')))\r\n\r\n  assert(mkfile(J(base, _T'from.dat'), data ))\r\n  assert(mkfile(J(base, _T'to.dat'  ), rdata))\r\n  assert(mkfile(J(base, _T'nonempty', _T'tmp.dat'), data ))\r\nend",
    "type": "function"
  }, {
    "id": 516,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 517,
    "text": "function test_rename_file_to_file()\r\n  local SRC, DST = J(base, _T'from.dat'), J(base, _T'to.dat')\r\n  assert_equal(SRC, fs.isfile(SRC))\r\n  assert_equal(DST, fs.isfile(DST))\r\n  assert_nil(os.rename(SRC, DST))\r\n  assert_equal(SRC, fs.isfile(SRC))\r\n  assert_equal(DST, fs.isfile(DST))\r\n  assert_equal(data,  read_file(SRC))\r\n  assert_equal(rdata, read_file(DST))\r\nend",
    "type": "function"
  }, {
    "id": 518,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 519,
    "text": "function test_rename_file_to_dir()\r\n  local SRC, DST = J(base, _T'from.dat'), J(base, _T'to')\r\n  assert_equal(SRC, fs.isfile(SRC))\r\n  assert_equal(DST, fs.isdir(DST))\r\n  assert_nil(os.rename(SRC, DST))\r\n  assert_equal(SRC, fs.isfile(SRC))\r\n  assert_equal(DST, fs.isdir(DST))\r\nend",
    "type": "function"
  }, {
    "id": 520,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 521,
    "text": "function test_remove_empty_dir()\r\n  local SRC = J(base, _T'to')\r\n  assert_equal(SRC, fs.isdir(SRC))\r\n  assert_nil(os.remove(SRC))\r\n  assert_equal(SRC, fs.isdir(SRC))\r\nend",
    "type": "function"
  }, {
    "id": 522,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 523,
    "text": "function test_remove_nonempty_dir()\r\n  local SRC = J(base, _T'nonempty')\r\n  assert_equal(SRC, fs.isdir(SRC))\r\n  assert_nil(os.remove(SRC))\r\n  assert_equal(SRC, fs.isdir(SRC))\r\nend",
    "type": "function"
  }, {
    "id": 524,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 525,
    "text": "function() lunit.skip(msg) end",
    "type": "function"
  }, {
    "id": 526,
    "text": "function(ch)\r\n    return string.format(\"\\\\%.03d\", ch:byte())\r\n  end",
    "type": "function"
  }, {
    "id": 527,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 528,
    "text": "function(f, a)\r\n    assert_string(a.mode)\r\n    assert_number(a.size)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end",
    "type": "function"
  }, {
    "id": 529,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 530,
    "text": "function(f, a)\r\n      assert(ifind(t, f), f)\r\n      n = n + 1\r\n    end",
    "type": "function"
  }, {
    "id": 531,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 532,
    "text": "function(f, a)\r\n    assert_string(a.mode)\r\n    assert_number(a.size)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end",
    "type": "function"
  }, {
    "id": 533,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 534,
    "text": "function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end",
    "type": "function"
  }, {
    "id": 535,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 536,
    "text": "function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end",
    "type": "function"
  }, {
    "id": 537,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 538,
    "text": "function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end",
    "type": "function"
  }, {
    "id": 539,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 540,
    "text": "function(f)\r\n    n = n + 1\r\n    return 123\r\n  end",
    "type": "function"
  }, {
    "id": 541,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 542,
    "text": "function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end",
    "type": "function"
  }, {
    "id": 543,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 544,
    "text": "function(f)\r\n    assert_not_equal(up(dir), up(f))\r\n    return up(file) == up(f)\r\n  end",
    "type": "function"
  }, {
    "id": 545,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 546,
    "text": "function(f)\r\n    assert_not_equal(up(file), up(f))\r\n    return up(dir) == up(f)\r\n  end",
    "type": "function"
  }, {
    "id": 547,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 548,
    "text": "function(f)\r\n    assert_not_equal(up(file), up(f))\r\n    return up(dir) == up(f)\r\n  end",
    "type": "function"
  }, {
    "id": 549,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 550,
    "text": "function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end",
    "type": "function"
  }, {
    "id": 551,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 552,
    "text": "function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end",
    "type": "function"
  }, {
    "id": 553,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 554,
    "text": "function(f)\r\n    assert(ifind(t, f), _t(f))\r\n    n = n + 1\r\n  end",
    "type": "function"
  }, {
    "id": 555,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 556,
    "text": "function(f)\r\n    if up(f) == up( J(base, _T\"2\", _T\"a2.dat\") ) then\r\n      n = 1\r\n      return \"break\"\r\n    end\r\n    n = 0\r\n  end",
    "type": "function"
  }, {
    "id": 557,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 558,
    "text": "function(f)\r\n    if up(f) == up( J(base, _T\"2\", _T\"a2.dat\") ) then\r\n      n = 1\r\n      return \"break\"\r\n    end\r\n    n = 0\r\n  end",
    "type": "function"
  }, {
    "id": 559,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 560,
    "text": "function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end",
    "type": "function"
  }, {
    "id": 561,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 562,
    "text": "function(f)\r\n    assert(ifind(t, f), f)\r\n    n = n + 1\r\n  end",
    "type": "function"
  }, {
    "id": 563,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 564,
    "text": "function(f,p,n,m,a,z,t,c,l)\r\n      local attr = assert(fs.attributes(f))\r\n      assert(ifind(F, f), f)\r\n      assert_string(f)\r\n      assert_string(p)\r\n      assert_string(n)\r\n      assert_string(m)\r\n      assert_table(a)\r\n      assert_number(z)\r\n      assert_number(t)\r\n      assert_number(c)\r\n      assert_number(l)\r\n      assert_equal(attr.mode         , m)\r\n      assert_equal(attr.size         , z)\r\n      assert_equal(attr.modification , t)\r\n      assert_equal(attr.change       , c)\r\n      assert_equal(attr.access       , l)\r\n      assert_equal(m, a.mode         )\r\n      assert_equal(z, a.size         )\r\n      assert_equal(t, a.modification )\r\n      assert_equal(c, a.change       )\r\n      assert_equal(l, a.access       )\r\n      N = N + 1\r\n    end",
    "type": "function"
  }, {
    "id": 565,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 566,
    "text": "function(f)\r\n    assert(ifind(F, f), _t(f))\r\n    n = n + 1\r\n  end",
    "type": "function"
  }, {
    "id": 567,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 568,
    "text": "function(f)\r\n    assert(ifind(F, f), _t(f))\r\n    n = n + 1\r\n  end",
    "type": "function"
  }, {
    "id": 569,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 570,
    "text": "function(f)\r\n    assert(ifind(F, f), _t(f))\r\n    n = n + 1\r\n  end",
    "type": "function"
  }, {
    "id": 571,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 572,
    "text": "function(f)\r\n    assert(ifind(F, f), _t(f))\r\n    n = n + 1\r\n  end",
    "type": "function"
  }, {
    "id": 573,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 574,
    "text": "function(f)\r\n    assert(ifind(F, f), _t(f))\r\n    n = n + 1\r\n  end",
    "type": "function"
  }, {
    "id": 575,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 576,
    "text": "function(f)\r\n    local s = (_t(f):sub(-8) == (DIR_SEP .. \".txtdat\"))\r\n    if s then skip(\"FIXME. pat:`*.txt` should not match `.txtdat` but shuld match `1.txtdat` (for windows compat)\")\r\n    else table.remove(F,assert_number(ifind(F, f), _t(f))) end\r\n  end",
    "type": "function"
  }, {
    "id": 577,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 578,
    "text": "function(f)\r\n    table.remove(F,assert_number(ifind(F, f), _t(f)))\r\n  end",
    "type": "function"
  }, {
    "id": 579,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 580,
    "text": "function(f)\r\n    table.remove(F,assert_number(ifind(F, f), _t(f)))\r\n  end",
    "type": "function"
  }, {
    "id": 581,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 582,
    "text": "function(f)\r\n    table.remove(F,assert_number(ifind(F, f), _t(f)))\r\n  end",
    "type": "function"
  }, {
    "id": 583,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 584,
    "text": "function(f)\r\n    table.remove(F,assert_number(ifind(F, f), _t(f)))\r\n  end",
    "type": "function"
  }, {
    "id": 585,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 586,
    "text": "function(f)\r\n    table.remove(F,assert_number(ifind(F, f), _t(f)))\r\n  end",
    "type": "function"
  }, {
    "id": 587,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 588,
    "text": "",
    "type": "function container"
  }, {
    "id": 589,
    "text": "isfile",
    "type": "global function"
  }, {
    "id": 590,
    "text": "currentdir",
    "type": "global function"
  }, {
    "id": 591,
    "text": "rename",
    "type": "global function"
  }, {
    "id": 592,
    "text": "each_impl",
    "type": "global function"
  }, {
    "id": 593,
    "text": "exists",
    "type": "global function"
  }, {
    "id": 594,
    "text": "atime",
    "type": "global function"
  }, {
    "id": 595,
    "text": "lunit",
    "type": "module"
  }, {
    "id": 596,
    "text": "run",
    "type": "global function"
  }, {
    "id": 597,
    "text": "touch",
    "type": "global function"
  }, {
    "id": 598,
    "text": "move",
    "type": "global function"
  }, {
    "id": 599,
    "text": "attributes",
    "type": "global function"
  }, {
    "id": 600,
    "text": "isdir",
    "type": "global function"
  }, {
    "id": 601,
    "text": "chdir",
    "type": "global function"
  }, {
    "id": 602,
    "text": "tmpdir",
    "type": "global function"
  }, {
    "id": 603,
    "text": "skip",
    "type": "global function"
  }, {
    "id": 604,
    "text": "mtime",
    "type": "global function"
  }, {
    "id": 605,
    "text": "mkdir",
    "type": "global function"
  }, {
    "id": 606,
    "text": "size",
    "type": "global function"
  }, {
    "id": 607,
    "text": "copy",
    "type": "global function"
  }, {
    "id": 608,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 609,
    "text": "dir",
    "type": "global function"
  }, {
    "id": 610,
    "text": "rmdir",
    "type": "global function"
  }, {
    "id": 611,
    "text": "foreach",
    "type": "global function"
  }, {
    "id": 612,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 613,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 614,
    "text": "assert_table",
    "type": "global function"
  }, {
    "id": 615,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 616,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 617,
    "text": "_T",
    "type": "global function"
  }, {
    "id": 618,
    "text": "assert_number",
    "type": "global function"
  }, {
    "id": 619,
    "text": "operation",
    "type": "global function"
  }, {
    "id": 620,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 621,
    "text": "_t",
    "type": "global function"
  }, {
    "id": 622,
    "text": "assert_false",
    "type": "global function"
  }, {
    "id": 623,
    "text": "abs",
    "type": "global function"
  }, {
    "id": 624,
    "text": "assert_equal",
    "type": "global function"
  }, {
    "id": 625,
    "text": "collectgarbage",
    "type": "global function"
  }, {
    "id": 626,
    "text": "next",
    "type": "global function"
  }, {
    "id": 627,
    "text": "TEST_CASE",
    "type": "global function"
  }, {
    "id": 628,
    "text": "assert_not_equal",
    "type": "global function"
  }, {
    "id": 629,
    "text": "assert_string",
    "type": "global function"
  }, {
    "id": 630,
    "text": "assert_true",
    "type": "global function"
  }, {
    "id": 631,
    "text": "format",
    "type": "global function"
  }, {
    "id": 632,
    "text": "assert_nil",
    "type": "global function"
  }, {
    "id": 633,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 634,
    "text": "skip",
    "type": "global function"
  }, {
    "id": 635,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 636,
    "text": "open",
    "type": "global function"
  }, {
    "id": 637,
    "text": "require",
    "type": "global function"
  }, {
    "id": 638,
    "text": "",
    "type": "global variable"
  }, {
    "id": 639,
    "text": "",
    "type": "variable container"
  }, {
    "id": 640,
    "text": "",
    "type": "require container"
  }, {
    "id": 641,
    "text": "",
    "type": "local variable"
  }, {
    "id": 642,
    "text": "",
    "type": "n/a"
  }, {
    "id": 643,
    "text": "",
    "type": "local variable"
  }, {
    "id": 644,
    "text": "",
    "type": "local variable"
  }, {
    "id": 645,
    "text": "",
    "type": "n/a"
  }, {
    "id": 646,
    "text": "",
    "type": "local variable"
  }, {
    "id": 647,
    "text": "",
    "type": "local variable"
  }, {
    "id": 648,
    "text": "",
    "type": "local variable"
  }, {
    "id": 649,
    "text": "",
    "type": "local variable"
  }, {
    "id": 650,
    "text": "",
    "type": "require local variable"
  } ]
}