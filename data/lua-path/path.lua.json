{
  "_filename": "path.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-path/lua/path.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 3
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 6
  }, {
    "from": 8,
    "label": "has",
    "to": 6
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 6
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 6
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 6
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 6
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 6
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 21,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 21,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 26
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 28
  }, {
    "from": 21,
    "label": "has",
    "to": 31
  }, {
    "from": 21,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 21,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 21,
    "label": "has",
    "to": 36
  }, {
    "from": 21,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 21,
    "label": "has",
    "to": 39
  }, {
    "from": 21,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 21,
    "label": "has",
    "to": 44
  }, {
    "from": 21,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 45,
    "label": "has",
    "to": 49
  }, {
    "from": 45,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 21,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 21,
    "label": "has",
    "to": 6
  }, {
    "from": 21,
    "label": "has",
    "to": 6
  }, {
    "from": 21,
    "label": "has",
    "to": 55
  }, {
    "from": 21,
    "label": "has",
    "to": 6
  }, {
    "from": 21,
    "label": "has",
    "to": 6
  }, {
    "from": 21,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 57,
    "label": "has",
    "to": 6
  }, {
    "from": 57,
    "label": "has",
    "to": 6
  }, {
    "from": 57,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 61,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 61,
    "label": "has",
    "to": 6
  }, {
    "from": 61,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 69,
    "label": "has",
    "to": 6
  }, {
    "from": 69,
    "label": "has",
    "to": 6
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 6
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 76,
    "label": "has",
    "to": 79
  }, {
    "from": 75,
    "label": "has",
    "to": 6
  }, {
    "from": 75,
    "label": "has",
    "to": 6
  }, {
    "from": 75,
    "label": "has",
    "to": 6
  }, {
    "from": 75,
    "label": "has",
    "to": 6
  }, {
    "from": 75,
    "label": "has",
    "to": 6
  }, {
    "from": 75,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 81,
    "label": "has",
    "to": 6
  }, {
    "from": 81,
    "label": "has",
    "to": 6
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 6
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "has",
    "to": 6
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 6
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 6
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 94,
    "label": "has",
    "to": 6
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 6
  }, {
    "from": 96,
    "label": "has",
    "to": 6
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 99,
    "label": "has",
    "to": 6
  }, {
    "from": 99,
    "label": "has",
    "to": 6
  }, {
    "from": 99,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 103,
    "label": "has",
    "to": 6
  }, {
    "from": 103,
    "label": "has",
    "to": 106
  }, {
    "from": 103,
    "label": "has",
    "to": 107
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 108,
    "label": "has",
    "to": 110
  }, {
    "from": 108,
    "label": "has",
    "to": 6
  }, {
    "from": 108,
    "label": "has",
    "to": 111
  }, {
    "from": 112,
    "label": "has",
    "to": 109
  }, {
    "from": 112,
    "label": "has",
    "to": 6
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 114,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 114,
    "label": "has",
    "to": 6
  }, {
    "from": 114,
    "label": "has",
    "to": 118
  }, {
    "from": 119,
    "label": "has",
    "to": 109
  }, {
    "from": 119,
    "label": "has",
    "to": 6
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 22
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 122,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 124,
    "label": "has",
    "to": 126
  }, {
    "from": 124,
    "label": "has",
    "to": 127
  }, {
    "from": 124,
    "label": "has",
    "to": 128
  }, {
    "from": 121,
    "label": "has",
    "to": 6
  }, {
    "from": 121,
    "label": "has",
    "to": 129
  }, {
    "from": 130,
    "label": "has",
    "to": 109
  }, {
    "from": 130,
    "label": "has",
    "to": 6
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 132,
    "label": "has",
    "to": 109
  }, {
    "from": 132,
    "label": "has",
    "to": 6
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 134,
    "label": "has",
    "to": 109
  }, {
    "from": 134,
    "label": "has",
    "to": 6
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 136,
    "label": "has",
    "to": 109
  }, {
    "from": 136,
    "label": "has",
    "to": 6
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 138,
    "label": "has",
    "to": 109
  }, {
    "from": 138,
    "label": "has",
    "to": 6
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 140,
    "label": "has",
    "to": 109
  }, {
    "from": 140,
    "label": "has",
    "to": 6
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 142,
    "label": "has",
    "to": 109
  }, {
    "from": 142,
    "label": "has",
    "to": 6
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 144,
    "label": "has",
    "to": 109
  }, {
    "from": 144,
    "label": "has",
    "to": 6
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 146,
    "label": "has",
    "to": 109
  }, {
    "from": 146,
    "label": "has",
    "to": 6
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 148,
    "label": "has",
    "to": 109
  }, {
    "from": 148,
    "label": "has",
    "to": 6
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 150,
    "label": "has",
    "to": 109
  }, {
    "from": 150,
    "label": "has",
    "to": 6
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 152,
    "label": "has",
    "to": 109
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 153,
    "label": "has",
    "to": 6
  }, {
    "from": 152,
    "label": "has",
    "to": 154
  }, {
    "from": 152,
    "label": "has",
    "to": 6
  }, {
    "from": 152,
    "label": "has",
    "to": 6
  }, {
    "from": 152,
    "label": "has",
    "to": 155
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 157,
    "label": "has",
    "to": 159
  }, {
    "from": 157,
    "label": "has",
    "to": 6
  }, {
    "from": 157,
    "label": "has",
    "to": 6
  }, {
    "from": 156,
    "label": "has",
    "to": 6
  }, {
    "from": 156,
    "label": "has",
    "to": 160
  }, {
    "from": 161,
    "label": "has",
    "to": 109
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 161,
    "label": "has",
    "to": 163
  }, {
    "from": 161,
    "label": "has",
    "to": 6
  }, {
    "from": 161,
    "label": "has",
    "to": 164
  }, {
    "from": 161,
    "label": "has",
    "to": 165
  }, {
    "from": 161,
    "label": "has",
    "to": 166
  }, {
    "from": 166,
    "label": "has",
    "to": 167
  }, {
    "from": 166,
    "label": "has",
    "to": 168
  }, {
    "from": 168,
    "label": "has",
    "to": 169
  }, {
    "from": 168,
    "label": "has",
    "to": 170
  }, {
    "from": 170,
    "label": "has",
    "to": 171
  }, {
    "from": 170,
    "label": "has",
    "to": 172
  }, {
    "from": 161,
    "label": "has",
    "to": 6
  }, {
    "from": 161,
    "label": "has",
    "to": 6
  }, {
    "from": 161,
    "label": "has",
    "to": 6
  }, {
    "from": 161,
    "label": "has",
    "to": 173
  }, {
    "from": 174,
    "label": "has",
    "to": 109
  }, {
    "from": 174,
    "label": "has",
    "to": 6
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 176,
    "label": "has",
    "to": 109
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 176,
    "label": "has",
    "to": 178
  }, {
    "from": 176,
    "label": "has",
    "to": 6
  }, {
    "from": 176,
    "label": "has",
    "to": 179
  }, {
    "from": 180,
    "label": "has",
    "to": 109
  }, {
    "from": 180,
    "label": "has",
    "to": 6
  }, {
    "from": 180,
    "label": "has",
    "to": 181
  }, {
    "from": 182,
    "label": "has",
    "to": 183
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 182,
    "label": "has",
    "to": 185
  }, {
    "from": 182,
    "label": "has",
    "to": 186
  }, {
    "from": 182,
    "label": "has",
    "to": 187
  }, {
    "from": 182,
    "label": "has",
    "to": 188
  }, {
    "from": 182,
    "label": "has",
    "to": 189
  }, {
    "from": 182,
    "label": "has",
    "to": 190
  }, {
    "from": 190,
    "label": "has",
    "to": 191
  }, {
    "from": 190,
    "label": "has",
    "to": 192
  }, {
    "from": 192,
    "label": "has",
    "to": 193
  }, {
    "from": 192,
    "label": "has",
    "to": 194
  }, {
    "from": 190,
    "label": "has",
    "to": 195
  }, {
    "from": 190,
    "label": "has",
    "to": 196
  }, {
    "from": 190,
    "label": "has",
    "to": 197
  }, {
    "from": 197,
    "label": "has",
    "to": 198
  }, {
    "from": 197,
    "label": "has",
    "to": 199
  }, {
    "from": 190,
    "label": "has",
    "to": 6
  }, {
    "from": 190,
    "label": "has",
    "to": 200
  }, {
    "from": 190,
    "label": "has",
    "to": 201
  }, {
    "from": 201,
    "label": "has",
    "to": 202
  }, {
    "from": 201,
    "label": "has",
    "to": 203
  }, {
    "from": 190,
    "label": "has",
    "to": 204
  }, {
    "from": 204,
    "label": "has",
    "to": 205
  }, {
    "from": 204,
    "label": "has",
    "to": 206
  }, {
    "from": 190,
    "label": "has",
    "to": 6
  }, {
    "from": 182,
    "label": "has",
    "to": 207
  }, {
    "from": 182,
    "label": "has",
    "to": 6
  }, {
    "from": 182,
    "label": "has",
    "to": 6
  }, {
    "from": 182,
    "label": "has",
    "to": 208
  }, {
    "from": 209,
    "label": "has",
    "to": 183
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 209,
    "label": "has",
    "to": 185
  }, {
    "from": 209,
    "label": "has",
    "to": 186
  }, {
    "from": 209,
    "label": "has",
    "to": 187
  }, {
    "from": 209,
    "label": "has",
    "to": 188
  }, {
    "from": 209,
    "label": "has",
    "to": 189
  }, {
    "from": 209,
    "label": "has",
    "to": 210
  }, {
    "from": 209,
    "label": "has",
    "to": 211
  }, {
    "from": 211,
    "label": "has",
    "to": 212
  }, {
    "from": 212,
    "label": "has",
    "to": 213
  }, {
    "from": 212,
    "label": "has",
    "to": 199
  }, {
    "from": 211,
    "label": "has",
    "to": 6
  }, {
    "from": 211,
    "label": "has",
    "to": 200
  }, {
    "from": 211,
    "label": "has",
    "to": 214
  }, {
    "from": 214,
    "label": "has",
    "to": 215
  }, {
    "from": 214,
    "label": "has",
    "to": 216
  }, {
    "from": 211,
    "label": "has",
    "to": 217
  }, {
    "from": 217,
    "label": "has",
    "to": 218
  }, {
    "from": 217,
    "label": "has",
    "to": 206
  }, {
    "from": 211,
    "label": "has",
    "to": 6
  }, {
    "from": 209,
    "label": "has",
    "to": 207
  }, {
    "from": 209,
    "label": "has",
    "to": 6
  }, {
    "from": 209,
    "label": "has",
    "to": 6
  }, {
    "from": 209,
    "label": "has",
    "to": 219
  }, {
    "from": 220,
    "label": "has",
    "to": 221
  }, {
    "from": 220,
    "label": "has",
    "to": 6
  }, {
    "from": 220,
    "label": "has",
    "to": 6
  }, {
    "from": 220,
    "label": "has",
    "to": 222
  }, {
    "from": 223,
    "label": "has",
    "to": 177
  }, {
    "from": 223,
    "label": "has",
    "to": 178
  }, {
    "from": 223,
    "label": "has",
    "to": 224
  }, {
    "from": 224,
    "label": "has",
    "to": 225
  }, {
    "from": 223,
    "label": "has",
    "to": 226
  }, {
    "from": 223,
    "label": "has",
    "to": 227
  }, {
    "from": 223,
    "label": "has",
    "to": 228
  }, {
    "from": 223,
    "label": "has",
    "to": 229
  }, {
    "from": 229,
    "label": "has",
    "to": 230
  }, {
    "from": 223,
    "label": "has",
    "to": 6
  }, {
    "from": 223,
    "label": "has",
    "to": 231
  }, {
    "from": 231,
    "label": "has",
    "to": 232
  }, {
    "from": 223,
    "label": "has",
    "to": 6
  }, {
    "from": 223,
    "label": "has",
    "to": 233
  }, {
    "from": 234,
    "label": "has",
    "to": 109
  }, {
    "from": 234,
    "label": "has",
    "to": 162
  }, {
    "from": 234,
    "label": "has",
    "to": 235
  }, {
    "from": 234,
    "label": "has",
    "to": 236
  }, {
    "from": 234,
    "label": "has",
    "to": 6
  }, {
    "from": 234,
    "label": "has",
    "to": 6
  }, {
    "from": 234,
    "label": "has",
    "to": 237
  }, {
    "from": 238,
    "label": "has",
    "to": 239
  }, {
    "from": 238,
    "label": "has",
    "to": 240
  }, {
    "from": 240,
    "label": "has",
    "to": 241
  }, {
    "from": 241,
    "label": "has",
    "to": 242
  }, {
    "from": 242,
    "label": "has",
    "to": 6
  }, {
    "from": 241,
    "label": "has",
    "to": 243
  }, {
    "from": 238,
    "label": "has",
    "to": 6
  }, {
    "from": 238,
    "label": "has",
    "to": 244
  }, {
    "from": 245,
    "label": "has",
    "to": 6
  }, {
    "from": 246,
    "label": "has",
    "to": 247
  }, {
    "from": 246,
    "label": "has",
    "to": 248
  }, {
    "from": 248,
    "label": "has",
    "to": 249
  }, {
    "from": 248,
    "label": "has",
    "to": 250
  }, {
    "from": 248,
    "label": "has",
    "to": 251
  }, {
    "from": 248,
    "label": "has",
    "to": 252
  }, {
    "from": 248,
    "label": "has",
    "to": 253
  }, {
    "from": 246,
    "label": "has",
    "to": 6
  }, {
    "from": 246,
    "label": "has",
    "to": 254
  }, {
    "from": 255,
    "label": "has",
    "to": 6
  }, {
    "from": 256,
    "label": "has",
    "to": 158
  }, {
    "from": 256,
    "label": "has",
    "to": 159
  }, {
    "from": 256,
    "label": "has",
    "to": 6
  }, {
    "from": 256,
    "label": "has",
    "to": 6
  }, {
    "from": 256,
    "label": "has",
    "to": 257
  }, {
    "from": 258,
    "label": "has",
    "to": 259
  }, {
    "from": 258,
    "label": "has",
    "to": 260
  }, {
    "from": 258,
    "label": "has",
    "to": 261
  }, {
    "from": 261,
    "label": "has",
    "to": 262
  }, {
    "from": 258,
    "label": "has",
    "to": 6
  }, {
    "from": 258,
    "label": "has",
    "to": 263
  }, {
    "from": 264,
    "label": "has",
    "to": 191
  }, {
    "from": 264,
    "label": "has",
    "to": 192
  }, {
    "from": 192,
    "label": "has",
    "to": 193
  }, {
    "from": 192,
    "label": "has",
    "to": 194
  }, {
    "from": 264,
    "label": "has",
    "to": 195
  }, {
    "from": 264,
    "label": "has",
    "to": 196
  }, {
    "from": 264,
    "label": "has",
    "to": 197
  }, {
    "from": 197,
    "label": "has",
    "to": 198
  }, {
    "from": 197,
    "label": "has",
    "to": 199
  }, {
    "from": 264,
    "label": "has",
    "to": 6
  }, {
    "from": 264,
    "label": "has",
    "to": 200
  }, {
    "from": 264,
    "label": "has",
    "to": 201
  }, {
    "from": 201,
    "label": "has",
    "to": 202
  }, {
    "from": 201,
    "label": "has",
    "to": 203
  }, {
    "from": 264,
    "label": "has",
    "to": 204
  }, {
    "from": 204,
    "label": "has",
    "to": 205
  }, {
    "from": 204,
    "label": "has",
    "to": 206
  }, {
    "from": 264,
    "label": "has",
    "to": 6
  }, {
    "from": 264,
    "label": "has",
    "to": 265
  }, {
    "from": 266,
    "label": "has",
    "to": 212
  }, {
    "from": 212,
    "label": "has",
    "to": 213
  }, {
    "from": 212,
    "label": "has",
    "to": 199
  }, {
    "from": 266,
    "label": "has",
    "to": 6
  }, {
    "from": 266,
    "label": "has",
    "to": 200
  }, {
    "from": 266,
    "label": "has",
    "to": 214
  }, {
    "from": 214,
    "label": "has",
    "to": 215
  }, {
    "from": 214,
    "label": "has",
    "to": 216
  }, {
    "from": 266,
    "label": "has",
    "to": 217
  }, {
    "from": 217,
    "label": "has",
    "to": 218
  }, {
    "from": 217,
    "label": "has",
    "to": 206
  }, {
    "from": 266,
    "label": "has",
    "to": 6
  }, {
    "from": 266,
    "label": "has",
    "to": 267
  }, {
    "from": 152,
    "label": "calls",
    "to": 309
  }, {
    "from": 268,
    "label": "calls",
    "to": 309
  }, {
    "from": 182,
    "label": "calls",
    "to": 309
  }, {
    "from": 209,
    "label": "calls",
    "to": 309
  }, {
    "from": 132,
    "label": "calls",
    "to": 319
  }, {
    "from": 21,
    "label": "calls",
    "to": 310
  }, {
    "from": 103,
    "label": "calls",
    "to": 310
  }, {
    "from": 103,
    "label": "calls",
    "to": 310
  }, {
    "from": 246,
    "label": "calls",
    "to": 310
  }, {
    "from": 96,
    "label": "calls",
    "to": 281
  }, {
    "from": 96,
    "label": "calls",
    "to": 281
  }, {
    "from": 96,
    "label": "calls",
    "to": 281
  }, {
    "from": 96,
    "label": "calls",
    "to": 281
  }, {
    "from": 148,
    "label": "calls",
    "to": 312
  }, {
    "from": 11,
    "label": "calls",
    "to": 276
  }, {
    "from": 21,
    "label": "calls",
    "to": 276
  }, {
    "from": 156,
    "label": "calls",
    "to": 298
  }, {
    "from": 209,
    "label": "calls",
    "to": 299
  }, {
    "from": 220,
    "label": "calls",
    "to": 299
  }, {
    "from": 180,
    "label": "calls",
    "to": 300
  }, {
    "from": 138,
    "label": "calls",
    "to": 314
  }, {
    "from": 136,
    "label": "calls",
    "to": 324
  }, {
    "from": 108,
    "label": "calls",
    "to": 103
  }, {
    "from": 112,
    "label": "calls",
    "to": 103
  }, {
    "from": 119,
    "label": "calls",
    "to": 103
  }, {
    "from": 130,
    "label": "calls",
    "to": 103
  }, {
    "from": 132,
    "label": "calls",
    "to": 103
  }, {
    "from": 134,
    "label": "calls",
    "to": 103
  }, {
    "from": 136,
    "label": "calls",
    "to": 103
  }, {
    "from": 138,
    "label": "calls",
    "to": 103
  }, {
    "from": 140,
    "label": "calls",
    "to": 103
  }, {
    "from": 142,
    "label": "calls",
    "to": 103
  }, {
    "from": 144,
    "label": "calls",
    "to": 103
  }, {
    "from": 146,
    "label": "calls",
    "to": 103
  }, {
    "from": 148,
    "label": "calls",
    "to": 103
  }, {
    "from": 150,
    "label": "calls",
    "to": 103
  }, {
    "from": 152,
    "label": "calls",
    "to": 103
  }, {
    "from": 161,
    "label": "calls",
    "to": 103
  }, {
    "from": 174,
    "label": "calls",
    "to": 103
  }, {
    "from": 176,
    "label": "calls",
    "to": 103
  }, {
    "from": 180,
    "label": "calls",
    "to": 103
  }, {
    "from": 234,
    "label": "calls",
    "to": 103
  }, {
    "from": 142,
    "label": "calls",
    "to": 301
  }, {
    "from": 99,
    "label": "calls",
    "to": 302
  }, {
    "from": 161,
    "label": "calls",
    "to": 289
  }, {
    "from": 13,
    "label": "calls",
    "to": 282
  }, {
    "from": 19,
    "label": "calls",
    "to": 282
  }, {
    "from": 21,
    "label": "calls",
    "to": 282
  }, {
    "from": 21,
    "label": "calls",
    "to": 282
  }, {
    "from": 21,
    "label": "calls",
    "to": 282
  }, {
    "from": 140,
    "label": "calls",
    "to": 315
  }, {
    "from": 223,
    "label": "calls",
    "to": 182
  }, {
    "from": 268,
    "label": "calls",
    "to": 238
  }, {
    "from": 182,
    "label": "calls",
    "to": 327
  }, {
    "from": 209,
    "label": "calls",
    "to": 327
  }, {
    "from": 176,
    "label": "calls",
    "to": 305
  }, {
    "from": 119,
    "label": "calls",
    "to": 323
  }, {
    "from": 238,
    "label": "calls",
    "to": 326
  }, {
    "from": 130,
    "label": "calls",
    "to": 328
  }, {
    "from": 156,
    "label": "calls",
    "to": 322
  }, {
    "from": 144,
    "label": "calls",
    "to": 318
  }, {
    "from": 238,
    "label": "calls",
    "to": 325
  }, {
    "from": 150,
    "label": "calls",
    "to": 321
  }, {
    "from": 17,
    "label": "calls",
    "to": 287
  }, {
    "from": 21,
    "label": "calls",
    "to": 287
  }, {
    "from": 21,
    "label": "calls",
    "to": 287
  }, {
    "from": 75,
    "label": "calls",
    "to": 287
  }, {
    "from": 75,
    "label": "calls",
    "to": 287
  }, {
    "from": 75,
    "label": "calls",
    "to": 287
  }, {
    "from": 75,
    "label": "calls",
    "to": 287
  }, {
    "from": 182,
    "label": "calls",
    "to": 287
  }, {
    "from": 174,
    "label": "calls",
    "to": 311
  }, {
    "from": 209,
    "label": "calls",
    "to": 311
  }, {
    "from": 220,
    "label": "calls",
    "to": 311
  }, {
    "from": 182,
    "label": "calls",
    "to": 320
  }, {
    "from": 223,
    "label": "calls",
    "to": 320
  }, {
    "from": 234,
    "label": "calls",
    "to": 209
  }, {
    "from": 268,
    "label": "calls",
    "to": 156
  }, {
    "from": 268,
    "label": "calls",
    "to": 156
  }, {
    "from": 268,
    "label": "calls",
    "to": 156
  }, {
    "from": 182,
    "label": "calls",
    "to": 316
  }, {
    "from": 209,
    "label": "calls",
    "to": 316
  }, {
    "from": 268,
    "label": "calls",
    "to": 99
  }, {
    "from": 268,
    "label": "calls",
    "to": 99
  }, {
    "from": 112,
    "label": "calls",
    "to": 317
  }, {
    "from": 146,
    "label": "calls",
    "to": 306
  }, {
    "from": 161,
    "label": "calls",
    "to": 329
  }, {
    "from": 182,
    "label": "calls",
    "to": 329
  }, {
    "from": 134,
    "label": "calls",
    "to": 307
  }, {
    "from": 246,
    "label": "calls",
    "to": 330
  }, {
    "from": 61,
    "label": "calls",
    "to": 308
  }, {
    "from": 69,
    "label": "calls",
    "to": 293
  }, {
    "from": 73,
    "label": "calls",
    "to": 293
  }, {
    "from": 75,
    "label": "calls",
    "to": 293
  }, {
    "from": 75,
    "label": "calls",
    "to": 293
  }, {
    "from": 223,
    "label": "calls",
    "to": 304
  }, {
    "from": 238,
    "label": "calls",
    "to": 304
  }, {
    "from": 246,
    "label": "calls",
    "to": 304
  }, {
    "from": 246,
    "label": "calls",
    "to": 304
  }, {
    "from": 268,
    "label": "calls",
    "to": 331
  }, {
    "from": 268,
    "label": "calls",
    "to": 331
  }, {
    "from": 268,
    "label": "calls",
    "to": 331
  }, {
    "from": 268,
    "label": "calls",
    "to": 331
  }, {
    "from": 268,
    "label": "calls",
    "to": 331
  }, {
    "from": 268,
    "label": "calls",
    "to": 331
  }, {
    "from": 238,
    "label": "calls",
    "to": 331
  }, {
    "from": 108,
    "label": "calls",
    "to": 332
  }, {
    "from": 114,
    "label": "calls",
    "to": 283
  }, {
    "from": 3,
    "label": "contains",
    "to": 268
  }, {
    "from": 268,
    "label": "declares",
    "to": 4
  }, {
    "from": 268,
    "label": "declares",
    "to": 8
  }, {
    "from": 268,
    "label": "declares",
    "to": 11
  }, {
    "from": 268,
    "label": "declares",
    "to": 13
  }, {
    "from": 268,
    "label": "declares",
    "to": 15
  }, {
    "from": 268,
    "label": "declares",
    "to": 17
  }, {
    "from": 268,
    "label": "declares",
    "to": 19
  }, {
    "from": 268,
    "label": "declares",
    "to": 21
  }, {
    "from": 268,
    "label": "declares",
    "to": 57
  }, {
    "from": 268,
    "label": "declares",
    "to": 61
  }, {
    "from": 268,
    "label": "declares",
    "to": 69
  }, {
    "from": 268,
    "label": "declares",
    "to": 73
  }, {
    "from": 268,
    "label": "declares",
    "to": 75
  }, {
    "from": 268,
    "label": "declares",
    "to": 81
  }, {
    "from": 268,
    "label": "declares",
    "to": 84
  }, {
    "from": 268,
    "label": "declares",
    "to": 87
  }, {
    "from": 268,
    "label": "declares",
    "to": 89
  }, {
    "from": 268,
    "label": "declares",
    "to": 92
  }, {
    "from": 268,
    "label": "declares",
    "to": 94
  }, {
    "from": 268,
    "label": "declares",
    "to": 96
  }, {
    "from": 268,
    "label": "declares",
    "to": 99
  }, {
    "from": 268,
    "label": "declares",
    "to": 103
  }, {
    "from": 268,
    "label": "declares",
    "to": 108
  }, {
    "from": 268,
    "label": "declares",
    "to": 112
  }, {
    "from": 268,
    "label": "declares",
    "to": 114
  }, {
    "from": 268,
    "label": "declares",
    "to": 119
  }, {
    "from": 268,
    "label": "declares",
    "to": 121
  }, {
    "from": 268,
    "label": "declares",
    "to": 130
  }, {
    "from": 268,
    "label": "declares",
    "to": 132
  }, {
    "from": 268,
    "label": "declares",
    "to": 134
  }, {
    "from": 268,
    "label": "declares",
    "to": 136
  }, {
    "from": 268,
    "label": "declares",
    "to": 138
  }, {
    "from": 268,
    "label": "declares",
    "to": 140
  }, {
    "from": 268,
    "label": "declares",
    "to": 142
  }, {
    "from": 268,
    "label": "declares",
    "to": 144
  }, {
    "from": 268,
    "label": "declares",
    "to": 146
  }, {
    "from": 268,
    "label": "declares",
    "to": 148
  }, {
    "from": 268,
    "label": "declares",
    "to": 150
  }, {
    "from": 268,
    "label": "declares",
    "to": 152
  }, {
    "from": 268,
    "label": "declares",
    "to": 156
  }, {
    "from": 268,
    "label": "declares",
    "to": 161
  }, {
    "from": 268,
    "label": "declares",
    "to": 174
  }, {
    "from": 268,
    "label": "declares",
    "to": 176
  }, {
    "from": 268,
    "label": "declares",
    "to": 180
  }, {
    "from": 268,
    "label": "declares",
    "to": 182
  }, {
    "from": 268,
    "label": "declares",
    "to": 209
  }, {
    "from": 268,
    "label": "declares",
    "to": 220
  }, {
    "from": 268,
    "label": "declares",
    "to": 223
  }, {
    "from": 268,
    "label": "declares",
    "to": 234
  }, {
    "from": 268,
    "label": "declares",
    "to": 238
  }, {
    "from": 268,
    "label": "declares",
    "to": 245
  }, {
    "from": 268,
    "label": "declares",
    "to": 246
  }, {
    "from": 268,
    "label": "declares",
    "to": 255
  }, {
    "from": 268,
    "label": "declares",
    "to": 256
  }, {
    "from": 268,
    "label": "declares",
    "to": 258
  }, {
    "from": 268,
    "label": "declares",
    "to": 264
  }, {
    "from": 268,
    "label": "declares",
    "to": 266
  }, {
    "from": 3,
    "label": "declares",
    "to": 269
  }, {
    "from": 3,
    "label": "declares",
    "to": 270
  }, {
    "from": 3,
    "label": "declares",
    "to": 271
  }, {
    "from": 3,
    "label": "declares",
    "to": 273
  }, {
    "from": 3,
    "label": "declares",
    "to": 274
  }, {
    "from": 3,
    "label": "declares",
    "to": 277
  }, {
    "from": 3,
    "label": "declares",
    "to": 278
  }, {
    "from": 3,
    "label": "declares",
    "to": 279
  }, {
    "from": 3,
    "label": "declares",
    "to": 280
  }, {
    "from": 3,
    "label": "declares",
    "to": 284
  }, {
    "from": 3,
    "label": "declares",
    "to": 285
  }, {
    "from": 3,
    "label": "declares",
    "to": 286
  }, {
    "from": 3,
    "label": "declares",
    "to": 288
  }, {
    "from": 3,
    "label": "declares",
    "to": 290
  }, {
    "from": 3,
    "label": "declares",
    "to": 291
  }, {
    "from": 3,
    "label": "declares",
    "to": 292
  }, {
    "from": 3,
    "label": "declares",
    "to": 294
  }, {
    "from": 3,
    "label": "declares",
    "to": 295
  }, {
    "from": 3,
    "label": "declares",
    "to": 296
  }, {
    "from": 3,
    "label": "declares",
    "to": 297
  }, {
    "from": 3,
    "label": "contains",
    "to": 333
  }, {
    "from": 3,
    "label": "contains",
    "to": 334
  }, {
    "from": 333,
    "label": "initializes",
    "to": 335
  }, {
    "from": 335,
    "label": "assigns",
    "to": 336
  }, {
    "from": 333,
    "label": "initializes",
    "to": 337
  }, {
    "from": 337,
    "label": "assigns",
    "to": 338
  }, {
    "from": 333,
    "label": "initializes",
    "to": 339
  }, {
    "from": 339,
    "label": "assigns",
    "to": 340
  }, {
    "from": 333,
    "label": "initializes",
    "to": 341
  }, {
    "from": 341,
    "label": "assigns",
    "to": 342
  }, {
    "from": 333,
    "label": "initializes",
    "to": 343
  }, {
    "from": 343,
    "label": "assigns",
    "to": 344
  }, {
    "from": 333,
    "label": "initializes",
    "to": 345
  }, {
    "from": 345,
    "label": "assigns",
    "to": 346
  }, {
    "from": 333,
    "label": "initializes",
    "to": 347
  }, {
    "from": 347,
    "label": "assigns",
    "to": 348
  }, {
    "from": 333,
    "label": "initializes",
    "to": 349
  }, {
    "from": 349,
    "label": "assigns",
    "to": 350
  }, {
    "from": 333,
    "label": "initializes",
    "to": 351
  }, {
    "from": 351,
    "label": "assigns",
    "to": 352
  }, {
    "from": 333,
    "label": "initializes",
    "to": 353
  }, {
    "from": 353,
    "label": "assigns",
    "to": 354
  }, {
    "from": 334,
    "label": "initializes",
    "to": 355
  }, {
    "from": 355,
    "label": "requires",
    "to": 356
  }, {
    "from": 334,
    "label": "initializes",
    "to": 357
  }, {
    "from": 357,
    "label": "requires",
    "to": 275
  }, {
    "from": 334,
    "label": "initializes",
    "to": 358
  }, {
    "from": 358,
    "label": "requires",
    "to": 303
  }, {
    "from": 334,
    "label": "initializes",
    "to": 359
  }, {
    "from": 359,
    "label": "requires",
    "to": 272
  }, {
    "from": 334,
    "label": "initializes",
    "to": 360
  }, {
    "from": 360,
    "label": "requires",
    "to": 313
  }, {
    "from": 334,
    "label": "initializes",
    "to": 361
  }, {
    "from": 361,
    "label": "requires",
    "to": 1
  }, {
    "from": 334,
    "label": "initializes",
    "to": 362
  }, {
    "from": 362,
    "label": "requires",
    "to": 2
  }, {
    "from": 3,
    "label": "provides",
    "to": 363
  }, {
    "from": 349,
    "label": "represents",
    "to": 364
  }, {
    "from": 363,
    "label": "provides",
    "to": 364
  }, {
    "from": 365,
    "label": "requires",
    "to": 3
  }, {
    "from": 366,
    "label": "requires",
    "to": 3
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "findfile",
    "type": "module"
  }, {
    "id": 2,
    "text": "module",
    "type": "module"
  }, {
    "id": 3,
    "text": "path",
    "type": "module"
  }, {
    "id": 4,
    "text": "function PATH:unquote(P)\r\n  if P:sub(1,1) == '\"' and P:sub(-1,-1) == '\"' then\r\n    return (P:sub(2,-2))\r\n  end\r\n  return P\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "if P:sub(1,1) == '\"' and P:sub(-1,-1) == '\"' then\r\n    return (P:sub(2,-2))\r\n  end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function PATH:quote(P)\r\n  if P:find(\"%s\") then\r\n    return '\"' .. P .. '\"'\r\n  end\r\n  return P\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "if P:find(\"%s\") then\r\n    return '\"' .. P .. '\"'\r\n  end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function PATH:has_dir_end(P)\r\n  return (string.find(P, '[\\\\/]$')) and true\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function PATH:remove_dir_end(P)\r\n  return (string.gsub(P, '[\\\\/]+$', ''))\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function PATH:ensure_dir_end(P)\r\n  return self:remove_dir_end(P) .. self.DIR_SEP \r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function PATH:isunc(P)\r\n  return (string.sub(P, 1, 2) == (self.DIR_SEP .. self.DIR_SEP)) and P\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function PATH:normolize_sep(P)\r\n  return (string.gsub(P, '\\\\', self.DIR_SEP):gsub('/', self.DIR_SEP))\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function PATH:normolize(P)\r\n  P = self:normolize_sep(P)\r\n  local DIR_SEP = self.DIR_SEP\r\n\r\n  local is_unc = self:isunc(P)\r\n  while true do -- `/./` => `/`\r\n    local n P,n = string.gsub(P, DIR_SEP .. '%.' .. DIR_SEP, DIR_SEP)\r\n    if n == 0 then break end\r\n  end\r\n  while true do -- `//` => `/`\r\n    local n P,n = string.gsub(P, DIR_SEP .. DIR_SEP, DIR_SEP)\r\n    if n == 0 then break end\r\n  end\r\n  P = string.gsub(P, DIR_SEP .. '%.$', '')\r\n  if (not IS_WINDOWS) and (P == '') then P = '/' end\r\n\r\n  if is_unc then P = DIR_SEP .. P end\r\n\r\n  local root, path = nil, P\r\n  if is_unc then\r\n    root, path = self:splitroot(P)\r\n  end\r\n\r\n  path = self:ensure_dir_end(path)\r\n  while true do\r\n    local first, last = string.find(path, DIR_SEP .. \"[^\".. DIR_SEP .. \"]+\" .. DIR_SEP .. '%.%.' .. DIR_SEP)\r\n    if not first then break end\r\n    path = string.sub(path, 1, first) .. string.sub(path, last+1)\r\n  end\r\n  P = path\r\n\r\n  if root then -- unc\r\n    assert(is_unc)\r\n    P = P:gsub( '%.%.?' .. DIR_SEP , '')\r\n    P = DIR_SEP .. DIR_SEP .. self:join(root, P)\r\n  elseif self.IS_WINDOWS then \r\n    -- c:\\..\\foo => c:\\foo\r\n    -- \\..\\foo => \\foo\r\n    local root, path = self:splitroot(P)\r\n    if root ~= '' or P:sub(1,1) == DIR_SEP then\r\n      path = path:gsub( '%.%.?' .. DIR_SEP , '')\r\n      P = self:join(root, path)\r\n    end\r\n  end\r\n\r\n  if self.IS_WINDOWS and #P <= 3 and P:sub(2,2) == ':' then -- c: => c:\\ or c:\\ => c:\\\r\n    if #P == 2 then return P .. self.DIR_SEP end\r\n    return P\r\n  end\r\n\r\n  if (not self.IS_WINDOWS) and (P == DIR_SEP) then return '/' end\r\n  return self:remove_dir_end(P)\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "P = self:normolize_sep(P)",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "local DIR_SEP = self.DIR_SEP",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "local is_unc = self:isunc(P)",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "while true do -- `/./` => `/`\r\n    local n P,n = string.gsub(P, DIR_SEP .. '%.' .. DIR_SEP, DIR_SEP)\r\n    if n == 0 then break end\r\n  end",
    "type": "statement:while"
  }, {
    "id": 26,
    "text": "local n",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "P,n = string.gsub(P, DIR_SEP .. '%.' .. DIR_SEP, DIR_SEP)",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "if n == 0 then break end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "while true do -- `//` => `/`\r\n    local n P,n = string.gsub(P, DIR_SEP .. DIR_SEP, DIR_SEP)\r\n    if n == 0 then break end\r\n  end",
    "type": "statement:while"
  }, {
    "id": 30,
    "text": "P,n = string.gsub(P, DIR_SEP .. DIR_SEP, DIR_SEP)",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "P = string.gsub(P, DIR_SEP .. '%.$', '')",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "if (not IS_WINDOWS) and (P == '') then P = '/' end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "P = '/'",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "if is_unc then P = DIR_SEP .. P end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "P = DIR_SEP .. P",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "local root, path = nil, P",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "if is_unc then\r\n    root, path = self:splitroot(P)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "root, path = self:splitroot(P)",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "path = self:ensure_dir_end(path)",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "while true do\r\n    local first, last = string.find(path, DIR_SEP .. \"[^\".. DIR_SEP .. \"]+\" .. DIR_SEP .. '%.%.' .. DIR_SEP)\r\n    if not first then break end\r\n    path = string.sub(path, 1, first) .. string.sub(path, last+1)\r\n  end",
    "type": "statement:while"
  }, {
    "id": 41,
    "text": "local first, last = string.find(path, DIR_SEP .. \"[^\".. DIR_SEP .. \"]+\" .. DIR_SEP .. '%.%.' .. DIR_SEP)",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "if not first then break end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "path = string.sub(path, 1, first) .. string.sub(path, last+1)",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "P = path",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "if root then -- unc\r\n    assert(is_unc)\r\n    P = P:gsub( '%.%.?' .. DIR_SEP , '')\r\n    P = DIR_SEP .. DIR_SEP .. self:join(root, P)\r\n  elseif self.IS_WINDOWS then \r\n    -- c:\\..\\foo => c:\\foo\r\n    -- \\..\\foo => \\foo\r\n    local root, path = self:splitroot(P)\r\n    if root ~= '' or P:sub(1,1) == DIR_SEP then\r\n      path = path:gsub( '%.%.?' .. DIR_SEP , '')\r\n      P = self:join(root, path)\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "assert(is_unc)",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "P = P:gsub( '%.%.?' .. DIR_SEP , '')",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "P = DIR_SEP .. DIR_SEP .. self:join(root, P)",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "local root, path = self:splitroot(P)",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "if root ~= '' or P:sub(1,1) == DIR_SEP then\r\n      path = path:gsub( '%.%.?' .. DIR_SEP , '')\r\n      P = self:join(root, path)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "path = path:gsub( '%.%.?' .. DIR_SEP , '')",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "P = self:join(root, path)",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "if self.IS_WINDOWS and #P <= 3 and P:sub(2,2) == ':' then -- c: => c:\\ or c:\\ => c:\\\r\n    if #P == 2 then return P .. self.DIR_SEP end\r\n    return P\r\n  end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "if #P == 2 then return P .. self.DIR_SEP end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "if (not self.IS_WINDOWS) and (P == DIR_SEP) then return '/' end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function PATH:join_(P1, P2)\r\n  local ch = P2:sub(1,1)\r\n  if (ch == '\\\\') or (ch == '/') then\r\n    return self:remove_dir_end(P1) .. P2\r\n  end\r\n  return self:ensure_dir_end(P1) .. P2\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "local ch = P2:sub(1,1)",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "if (ch == '\\\\') or (ch == '/') then\r\n    return self:remove_dir_end(P1) .. P2\r\n  end",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function PATH:join(...)\r\n  local t,n = {...}, select('#', ...)\r\n  local r = t[1]\r\n  for i = 2, #t do\r\n    if self:isfullpath(t[i]) then\r\n      r = t[i]\r\n    else\r\n      r = self:join_(r,t[i])\r\n    end\r\n  end\r\n  return r\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "local t,n = {...}, select('#', ...)",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "local r = t[1]",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "for i = 2, #t do\r\n    if self:isfullpath(t[i]) then\r\n      r = t[i]\r\n    else\r\n      r = self:join_(r,t[i])\r\n    end\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 65,
    "text": "if self:isfullpath(t[i]) then\r\n      r = t[i]\r\n    else\r\n      r = self:join_(r,t[i])\r\n    end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "r = t[i]",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "r = self:join_(r,t[i])",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function PATH:splitext(P)\r\n  local s1,s2 = string.match(P,\"(.-[^\\\\/.])(%.[^\\\\/.]*)$\")\r\n  if s1 then return s1,s2 end\r\n  return P, ''\r\nend",
    "type": "function"
  }, {
    "id": 70,
    "text": "local s1,s2 = string.match(P,\"(.-[^\\\\/.])(%.[^\\\\/.]*)$\")",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "if s1 then return s1,s2 end",
    "type": "statement:if"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "function PATH:splitpath(P)\r\n  return string.match(P,\"^(.-)[\\\\/]?([^\\\\/]*)$\")\r\nend",
    "type": "function"
  }, {
    "id": 74,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 75,
    "text": "function PATH:splitroot(P)\r\n  if self.IS_WINDOWS then\r\n    if self:isunc(P) then\r\n      return string.match(P, [[^\\\\([^\\/]+)[\\]?(.*)$]])\r\n    end\r\n    if string.sub(P,2,2) == ':' then\r\n      return string.sub(P,1,2), string.sub(P,4)\r\n    end\r\n    return '', P\r\n  else\r\n    if string.sub(P,1,1) == '/' then \r\n      return string.match(P,[[^/([^\\/]+)[/]?(.*)$]])\r\n    end\r\n    return '', P\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 76,
    "text": "if self.IS_WINDOWS then\r\n    if self:isunc(P) then\r\n      return string.match(P, [[^\\\\([^\\/]+)[\\]?(.*)$]])\r\n    end\r\n    if string.sub(P,2,2) == ':' then\r\n      return string.sub(P,1,2), string.sub(P,4)\r\n    end\r\n    return '', P\r\n  else\r\n    if string.sub(P,1,1) == '/' then \r\n      return string.match(P,[[^/([^\\/]+)[/]?(.*)$]])\r\n    end\r\n    return '', P\r\n  end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "if self:isunc(P) then\r\n      return string.match(P, [[^\\\\([^\\/]+)[\\]?(.*)$]])\r\n    end",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "if string.sub(P,2,2) == ':' then\r\n      return string.sub(P,1,2), string.sub(P,4)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "if string.sub(P,1,1) == '/' then \r\n      return string.match(P,[[^/([^\\/]+)[/]?(.*)$]])\r\n    end",
    "type": "statement:if"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "function PATH:splitdrive(P)\r\n  if self.IS_WINDOWS then\r\n    return self:splitroot(P)\r\n  end\r\n  return '', P\r\nend",
    "type": "function"
  }, {
    "id": 82,
    "text": "if self.IS_WINDOWS then\r\n    return self:splitroot(P)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "function PATH:basename(P)\r\n  local s1,s2 = self:splitpath(P)\r\n  return s2\r\nend",
    "type": "function"
  }, {
    "id": 85,
    "text": "local s1,s2 = self:splitpath(P)",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "function PATH:dirname(P)\r\n  return (self:splitpath(P))\r\nend",
    "type": "function"
  }, {
    "id": 88,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 89,
    "text": "function PATH:extension(P)\r\n  local s1,s2 = self:splitext(P)\r\n  return s2\r\nend",
    "type": "function"
  }, {
    "id": 90,
    "text": "local s1,s2 = self:splitext(P)",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "function PATH:root(P)\r\n  return (self:splitroot(P))\r\nend",
    "type": "function"
  }, {
    "id": 93,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 94,
    "text": "function PATH:isfullpath(P)\r\n  return (self:root(P) ~= '') and P\r\nend",
    "type": "function"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "function PATH:user_home()\r\n  if IS_WINDOWS then\r\n    return os.getenv('USERPROFILE') or PATH:join(os.getenv('HOMEDRIVE'), os.getenv('HOMEPATH'))\r\n  end\r\n  return os.getenv('HOME')\r\nend",
    "type": "function"
  }, {
    "id": 97,
    "text": "if IS_WINDOWS then\r\n    return os.getenv('USERPROFILE') or PATH:join(os.getenv('HOMEDRIVE'), os.getenv('HOMEPATH'))\r\n  end",
    "type": "statement:if"
  }, {
    "id": 98,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 99,
    "text": "local function prequire(m) \r\n  local ok, err = pcall(require, m) \r\n  if not ok then return nil, err end\r\n  return err\r\nend",
    "type": "function"
  }, {
    "id": 100,
    "text": "local ok, err = pcall(require, m)",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "if not ok then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "local function assert_system(self)\r\n  if PATH.IS_WINDOWS then assert(self.IS_WINDOWS) return end\r\n  assert(not self.IS_WINDOWS)\r\nend",
    "type": "function"
  }, {
    "id": 104,
    "text": "if PATH.IS_WINDOWS then assert(self.IS_WINDOWS) return end",
    "type": "statement:if"
  }, {
    "id": 105,
    "text": "assert(self.IS_WINDOWS)",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "assert(not self.IS_WINDOWS)",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 108,
    "text": "function PATH:flags(P, ...)\r\n    assert_system(self)\r\n    P = self:fullpath(P)\r\n    return fs.flags(P, ...)\r\n  end",
    "type": "function"
  }, {
    "id": 109,
    "text": "assert_system(self)",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "P = self:fullpath(P)",
    "type": "statement:assign"
  }, {
    "id": 111,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 112,
    "text": "function PATH:tmpdir()\r\n  assert_system(self)\r\n  return self:remove_dir_end(fs.tmpdir())\r\nend",
    "type": "function"
  }, {
    "id": 113,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 114,
    "text": "function PATH:tmpname()\r\n  local P = os.tmpname()\r\n  if self:dirname(P) == '' then\r\n    P = self:join(self:tmpdir(), P)\r\n  end\r\n  return P\r\nend",
    "type": "function"
  }, {
    "id": 115,
    "text": "local P = os.tmpname()",
    "type": "statement:localassign"
  }, {
    "id": 116,
    "text": "if self:dirname(P) == '' then\r\n    P = self:join(self:tmpdir(), P)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 117,
    "text": "P = self:join(self:tmpdir(), P)",
    "type": "statement:assign"
  }, {
    "id": 118,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 119,
    "text": "function PATH:size(P)\r\n  assert_system(self)\r\n  return fs.size(P)\r\nend",
    "type": "function"
  }, {
    "id": 120,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 121,
    "text": "function PATH:fullpath(P)\r\n  if not self:isfullpath(P) then \r\n    P = self:normolize_sep(P)\r\n    local ch1, ch2 = P:sub(1,1), P:sub(2,2)\r\n    if ch1 == '~' then --  ~\\temp\r\n      P = self:join(self:user_home(), P:sub(2))\r\n    elseif self.IS_WINDOWS and (ch1 == self.DIR_SEP) then -- \\temp => c:\\temp\r\n      local root = self:root(self:currentdir())\r\n      P = self:join(root, P)\r\n    else\r\n      P = self:join(self:currentdir(), P)\r\n    end\r\n  end\r\n\r\n  return self:normolize(P)\r\nend",
    "type": "function"
  }, {
    "id": 122,
    "text": "if not self:isfullpath(P) then \r\n    P = self:normolize_sep(P)\r\n    local ch1, ch2 = P:sub(1,1), P:sub(2,2)\r\n    if ch1 == '~' then --  ~\\temp\r\n      P = self:join(self:user_home(), P:sub(2))\r\n    elseif self.IS_WINDOWS and (ch1 == self.DIR_SEP) then -- \\temp => c:\\temp\r\n      local root = self:root(self:currentdir())\r\n      P = self:join(root, P)\r\n    else\r\n      P = self:join(self:currentdir(), P)\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 123,
    "text": "local ch1, ch2 = P:sub(1,1), P:sub(2,2)",
    "type": "statement:localassign"
  }, {
    "id": 124,
    "text": "if ch1 == '~' then --  ~\\temp\r\n      P = self:join(self:user_home(), P:sub(2))\r\n    elseif self.IS_WINDOWS and (ch1 == self.DIR_SEP) then -- \\temp => c:\\temp\r\n      local root = self:root(self:currentdir())\r\n      P = self:join(root, P)\r\n    else\r\n      P = self:join(self:currentdir(), P)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 125,
    "text": "P = self:join(self:user_home(), P:sub(2))",
    "type": "statement:assign"
  }, {
    "id": 126,
    "text": "local root = self:root(self:currentdir())",
    "type": "statement:localassign"
  }, {
    "id": 127,
    "text": "P = self:join(root, P)",
    "type": "statement:assign"
  }, {
    "id": 128,
    "text": "P = self:join(self:currentdir(), P)",
    "type": "statement:assign"
  }, {
    "id": 129,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 130,
    "text": "function PATH:attrib(P, ...)\r\n  assert_system(self)\r\n  return fs.attributes(P, ...)\r\nend",
    "type": "function"
  }, {
    "id": 131,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 132,
    "text": "function PATH:exists(P)\r\n  assert_system(self)\r\n  return fs.exists(self:fullpath(P))\r\nend",
    "type": "function"
  }, {
    "id": 133,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 134,
    "text": "function PATH:isdir(P)\r\n  assert_system(self)\r\n  return fs.isdir(self:fullpath(P))\r\nend",
    "type": "function"
  }, {
    "id": 135,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 136,
    "text": "function PATH:isfile(P)\r\n  assert_system(self)\r\n  return fs.isfile(self:fullpath(P))\r\nend",
    "type": "function"
  }, {
    "id": 137,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 138,
    "text": "function PATH:islink(P)\r\n  assert_system(self)\r\n  return fs.islink(self:fullpath(P))\r\nend",
    "type": "function"
  }, {
    "id": 139,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 140,
    "text": "function PATH:ctime(P)\r\n  assert_system(self)\r\n  return fs.ctime(self:fullpath(P))\r\nend",
    "type": "function"
  }, {
    "id": 141,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 142,
    "text": "function PATH:mtime(P)\r\n  assert_system(self)\r\n  return fs.mtime(self:fullpath(P))\r\nend",
    "type": "function"
  }, {
    "id": 143,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 144,
    "text": "function PATH:atime(P)\r\n  assert_system(self)\r\n  return fs.atime(self:fullpath(P))\r\nend",
    "type": "function"
  }, {
    "id": 145,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 146,
    "text": "function PATH:touch(P, ...)\r\n  assert_system(self)\r\n  return fs.touch(self:fullpath(P), ...)\r\nend",
    "type": "function"
  }, {
    "id": 147,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 148,
    "text": "function PATH:currentdir()\r\n  assert_system(self)\r\n  return self:normolize(fs.currentdir())\r\nend",
    "type": "function"
  }, {
    "id": 149,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 150,
    "text": "function PATH:chdir(P)\r\n  assert_system(self)\r\n  return fs.chdir(self:fullpath(P))\r\nend",
    "type": "function"
  }, {
    "id": 151,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 152,
    "text": "function PATH:isempty(P)\r\n  assert_system(self)\r\n  local ok, err = fs.each_impl{\r\n    file = self:ensure_dir_end(P), \r\n    callback = function() return 'pass' end;\r\n  }\r\n  if err then return nil, err end\r\n  return ok ~= 'pass'\r\nend",
    "type": "function"
  }, {
    "id": 153,
    "text": "local ok, err = fs.each_impl{\r\n    file = self:ensure_dir_end(P), \r\n    callback = function() return 'pass' end;\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 154,
    "text": "if err then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 155,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 156,
    "text": "local function make_getfiletime_as_date(fn)\r\n    if date then\r\n      return function(...)\r\n        local t,e = fn(...)\r\n        if not t then return nil, e end\r\n        return date(t)\r\n      end\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 157,
    "text": "if date then\r\n      return function(...)\r\n        local t,e = fn(...)\r\n        if not t then return nil, e end\r\n        return date(t)\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 158,
    "text": "local t,e = fn(...)",
    "type": "statement:localassign"
  }, {
    "id": 159,
    "text": "if not t then return nil, e end",
    "type": "statement:if"
  }, {
    "id": 160,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 161,
    "text": "function PATH:mkdir(P)\r\n  assert_system(self)\r\n  local P = self:fullpath(P)\r\n  if self:exists(P) then return self:isdir(P) end\r\n  local p = ''\r\n  P = self:ensure_dir_end(P)\r\n  for str in string.gmatch(P, '.-' .. self.DIR_SEP) do\r\n    p = p .. str\r\n    if self:exists(p) then\r\n      if not self:isdir(p) then\r\n        return nil, 'can not create ' .. p\r\n      end\r\n    else\r\n      if IS_WINDOWS or p ~= DIR_SEP then\r\n        local ok, err = fs.mkdir(self:remove_dir_end(p))\r\n        if not ok then return nil, err .. ' ' .. p end\r\n      end\r\n    end\r\n  end\r\n  return P\r\nend",
    "type": "function"
  }, {
    "id": 162,
    "text": "local P = self:fullpath(P)",
    "type": "statement:localassign"
  }, {
    "id": 163,
    "text": "if self:exists(P) then return self:isdir(P) end",
    "type": "statement:if"
  }, {
    "id": 164,
    "text": "local p = ''",
    "type": "statement:localassign"
  }, {
    "id": 165,
    "text": "P = self:ensure_dir_end(P)",
    "type": "statement:assign"
  }, {
    "id": 166,
    "text": "for str in string.gmatch(P, '.-' .. self.DIR_SEP) do\r\n    p = p .. str\r\n    if self:exists(p) then\r\n      if not self:isdir(p) then\r\n        return nil, 'can not create ' .. p\r\n      end\r\n    else\r\n      if IS_WINDOWS or p ~= DIR_SEP then\r\n        local ok, err = fs.mkdir(self:remove_dir_end(p))\r\n        if not ok then return nil, err .. ' ' .. p end\r\n      end\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 167,
    "text": "p = p .. str",
    "type": "statement:assign"
  }, {
    "id": 168,
    "text": "if self:exists(p) then\r\n      if not self:isdir(p) then\r\n        return nil, 'can not create ' .. p\r\n      end\r\n    else\r\n      if IS_WINDOWS or p ~= DIR_SEP then\r\n        local ok, err = fs.mkdir(self:remove_dir_end(p))\r\n        if not ok then return nil, err .. ' ' .. p end\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 169,
    "text": "if not self:isdir(p) then\r\n        return nil, 'can not create ' .. p\r\n      end",
    "type": "statement:if"
  }, {
    "id": 170,
    "text": "if IS_WINDOWS or p ~= DIR_SEP then\r\n        local ok, err = fs.mkdir(self:remove_dir_end(p))\r\n        if not ok then return nil, err .. ' ' .. p end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 171,
    "text": "local ok, err = fs.mkdir(self:remove_dir_end(p))",
    "type": "statement:localassign"
  }, {
    "id": 172,
    "text": "if not ok then return nil, err .. ' ' .. p end",
    "type": "statement:if"
  }, {
    "id": 173,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 174,
    "text": "function PATH:rmdir(P)\r\n  assert_system(self)\r\n  return fs.rmdir(self:fullpath(P))\r\nend",
    "type": "function"
  }, {
    "id": 175,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 176,
    "text": "function PATH:rename(from, to, force)\r\n  assert_system(self)\r\n  from = self:fullpath(from)\r\n  to   = self:fullpath(to)\r\n  return fs.move(from, to, force)\r\nend",
    "type": "function"
  }, {
    "id": 177,
    "text": "from = self:fullpath(from)",
    "type": "statement:assign"
  }, {
    "id": 178,
    "text": "to   = self:fullpath(to)",
    "type": "statement:assign"
  }, {
    "id": 179,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 180,
    "text": "function PATH:each(...)\r\n  assert_system(self)\r\n  return each(...)\r\nend",
    "type": "function"
  }, {
    "id": 181,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 182,
    "text": "local function copy_impl_batch(fs, src_dir, mask, dst_dir, opt)\r\n  if not opt then opt = {} end\r\n\r\n  local overwrite = opt.overwrite\r\n  local accept    = opt.accept\r\n  local onerror   = opt.error\r\n  local chlen     = #fs.DIR_SEP\r\n  local count     = 0\r\n\r\n  local ok, err = fs.each_impl{file = src_dir .. fs.DIR_SEP .. mask,\r\n    delay = opt.delay; recurse = opt.recurse; param = \"pnm\";\r\n    skipdirs = opt.skipdirs; skipfiles = opt.skipfiles;\r\n    callback = function(path, name, mode)\r\n      local rel = string.sub(path, #src_dir + chlen + 1)\r\n      if #rel > 0 then rel = rel .. fs.DIR_SEP .. name else rel = name end\r\n      local dst = dst_dir .. fs.DIR_SEP .. rel\r\n      local src = path .. fs.DIR_SEP .. name\r\n\r\n      if accept then\r\n        local ok = accept(src, dst, opt)\r\n        if not ok then return end\r\n      end\r\n\r\n      local ok, err\r\n      if mode == \"directory\" then ok, err = fs.mkdir(dst)\r\n      else ok, err = fs.copy(src, dst, not overwrite) end\r\n\r\n      if not ok and onerror then\r\n        if not onerror(err, src, dst, opt) then -- break\r\n          return true\r\n        end\r\n      else\r\n        count = count + 1\r\n      end\r\n    end;\r\n  }\r\n  if ok or err then return ok, err end\r\n  return count\r\nend",
    "type": "function"
  }, {
    "id": 183,
    "text": "if not opt then opt = {} end",
    "type": "statement:if"
  }, {
    "id": 184,
    "text": "opt = {}",
    "type": "statement:assign"
  }, {
    "id": 185,
    "text": "local overwrite = opt.overwrite",
    "type": "statement:localassign"
  }, {
    "id": 186,
    "text": "local accept    = opt.accept",
    "type": "statement:localassign"
  }, {
    "id": 187,
    "text": "local onerror   = opt.error",
    "type": "statement:localassign"
  }, {
    "id": 188,
    "text": "local chlen     = #fs.DIR_SEP",
    "type": "statement:localassign"
  }, {
    "id": 189,
    "text": "local count     = 0",
    "type": "statement:localassign"
  }, {
    "id": 190,
    "text": "local ok, err = fs.each_impl{file = src_dir .. fs.DIR_SEP .. mask,\r\n    delay = opt.delay; recurse = opt.recurse; param = \"pnm\";\r\n    skipdirs = opt.skipdirs; skipfiles = opt.skipfiles;\r\n    callback = function(path, name, mode)\r\n      local rel = string.sub(path, #src_dir + chlen + 1)\r\n      if #rel > 0 then rel = rel .. fs.DIR_SEP .. name else rel = name end\r\n      local dst = dst_dir .. fs.DIR_SEP .. rel\r\n      local src = path .. fs.DIR_SEP .. name\r\n\r\n      if accept then\r\n        local ok = accept(src, dst, opt)\r\n        if not ok then return end\r\n      end\r\n\r\n      local ok, err\r\n      if mode == \"directory\" then ok, err = fs.mkdir(dst)\r\n      else ok, err = fs.copy(src, dst, not overwrite) end\r\n\r\n      if not ok and onerror then\r\n        if not onerror(err, src, dst, opt) then -- break\r\n          return true\r\n        end\r\n      else\r\n        count = count + 1\r\n      end\r\n    end;\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 191,
    "text": "local rel = string.sub(path, #src_dir + chlen + 1)",
    "type": "statement:localassign"
  }, {
    "id": 192,
    "text": "if #rel > 0 then rel = rel .. fs.DIR_SEP .. name else rel = name end",
    "type": "statement:if"
  }, {
    "id": 193,
    "text": "rel = rel .. fs.DIR_SEP .. name",
    "type": "statement:assign"
  }, {
    "id": 194,
    "text": "rel = name",
    "type": "statement:assign"
  }, {
    "id": 195,
    "text": "local dst = dst_dir .. fs.DIR_SEP .. rel",
    "type": "statement:localassign"
  }, {
    "id": 196,
    "text": "local src = path .. fs.DIR_SEP .. name",
    "type": "statement:localassign"
  }, {
    "id": 197,
    "text": "if accept then\r\n        local ok = accept(src, dst, opt)\r\n        if not ok then return end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 198,
    "text": "local ok = accept(src, dst, opt)",
    "type": "statement:localassign"
  }, {
    "id": 199,
    "text": "if not ok then return end",
    "type": "statement:if"
  }, {
    "id": 200,
    "text": "local ok, err",
    "type": "statement:localassign"
  }, {
    "id": 201,
    "text": "if mode == \"directory\" then ok, err = fs.mkdir(dst)\r\n      else ok, err = fs.copy(src, dst, not overwrite) end",
    "type": "statement:if"
  }, {
    "id": 202,
    "text": "ok, err = fs.mkdir(dst)",
    "type": "statement:assign"
  }, {
    "id": 203,
    "text": "ok, err = fs.copy(src, dst, not overwrite)",
    "type": "statement:assign"
  }, {
    "id": 204,
    "text": "if not ok and onerror then\r\n        if not onerror(err, src, dst, opt) then -- break\r\n          return true\r\n        end\r\n      else\r\n        count = count + 1\r\n      end",
    "type": "statement:if"
  }, {
    "id": 205,
    "text": "if not onerror(err, src, dst, opt) then -- break\r\n          return true\r\n        end",
    "type": "statement:if"
  }, {
    "id": 206,
    "text": "count = count + 1",
    "type": "statement:assign"
  }, {
    "id": 207,
    "text": "if ok or err then return ok, err end",
    "type": "statement:if"
  }, {
    "id": 208,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 209,
    "text": "local function remove_impl_batch(fs, src_dir, mask, opt)\r\n  if not opt then opt = {} end\r\n\r\n  local overwrite = opt.overwrite\r\n  local accept    = opt.accept\r\n  local onerror   = opt.error\r\n  local chlen     = #fs.DIR_SEP\r\n  local count     = 0\r\n  local delay     = (opt.delay == nil) and true or opt.delay\r\n\r\n  local ok, err = fs.each_impl{file = src_dir .. fs.DIR_SEP .. mask,\r\n    delay = delay; recurse = opt.recurse; reverse = true; param = \"fm\";\r\n    skipdirs = opt.skipdirs; skipfiles = opt.skipfiles;\r\n    callback = function(src, mode)\r\n      if accept then\r\n        local ok = accept(src, opt)\r\n        if not ok then return end\r\n      end\r\n\r\n      local ok, err\r\n      if mode == \"directory\" then ok, err = fs.rmdir(src)\r\n      else ok, err = fs.remove(src) end\r\n\r\n      if not ok and onerror then\r\n        if not onerror(err, src, opt) then -- break\r\n          return true\r\n        end\r\n      else\r\n        count = count + 1\r\n      end\r\n    end;\r\n  }\r\n  if ok or err then return ok, err end\r\n  return count\r\nend",
    "type": "function"
  }, {
    "id": 210,
    "text": "local delay     = (opt.delay == nil) and true or opt.delay",
    "type": "statement:localassign"
  }, {
    "id": 211,
    "text": "local ok, err = fs.each_impl{file = src_dir .. fs.DIR_SEP .. mask,\r\n    delay = delay; recurse = opt.recurse; reverse = true; param = \"fm\";\r\n    skipdirs = opt.skipdirs; skipfiles = opt.skipfiles;\r\n    callback = function(src, mode)\r\n      if accept then\r\n        local ok = accept(src, opt)\r\n        if not ok then return end\r\n      end\r\n\r\n      local ok, err\r\n      if mode == \"directory\" then ok, err = fs.rmdir(src)\r\n      else ok, err = fs.remove(src) end\r\n\r\n      if not ok and onerror then\r\n        if not onerror(err, src, opt) then -- break\r\n          return true\r\n        end\r\n      else\r\n        count = count + 1\r\n      end\r\n    end;\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 212,
    "text": "if accept then\r\n        local ok = accept(src, opt)\r\n        if not ok then return end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 213,
    "text": "local ok = accept(src, opt)",
    "type": "statement:localassign"
  }, {
    "id": 214,
    "text": "if mode == \"directory\" then ok, err = fs.rmdir(src)\r\n      else ok, err = fs.remove(src) end",
    "type": "statement:if"
  }, {
    "id": 215,
    "text": "ok, err = fs.rmdir(src)",
    "type": "statement:assign"
  }, {
    "id": 216,
    "text": "ok, err = fs.remove(src)",
    "type": "statement:assign"
  }, {
    "id": 217,
    "text": "if not ok and onerror then\r\n        if not onerror(err, src, opt) then -- break\r\n          return true\r\n        end\r\n      else\r\n        count = count + 1\r\n      end",
    "type": "statement:if"
  }, {
    "id": 218,
    "text": "if not onerror(err, src, opt) then -- break\r\n          return true\r\n        end",
    "type": "statement:if"
  }, {
    "id": 219,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 220,
    "text": "function PATH:remove_impl(P)\r\n  if self:isdir(P) then return fs.rmdir(P) end\r\n  return fs.remove(P)\r\nend",
    "type": "function"
  }, {
    "id": 221,
    "text": "if self:isdir(P) then return fs.rmdir(P) end",
    "type": "statement:if"
  }, {
    "id": 222,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 223,
    "text": "function PATH:copy(from, to, opt)\r\n  from = self:fullpath(from)\r\n  to   = self:fullpath(to)\r\n\r\n  if type(opt) == \"boolean\" then opt = {overwrite = opt} end\r\n\r\n  local overwrite = opt and opt.overwrite\r\n  local recurse   = opt and opt.recurse\r\n\r\n  local src_dir, src_name = self:splitpath(from)\r\n  if recurse or src_name:find(\"[*?]\") then -- batch mode\r\n    self:mkdir(to)\r\n    return copy_impl_batch(fs, src_dir, src_name, to, opt)\r\n  end\r\n  if self.mkdir then self:mkdir(self:dirname(to)) end\r\n  return fs.copy(from, to, not not overwrite)\r\nend",
    "type": "function"
  }, {
    "id": 224,
    "text": "if type(opt) == \"boolean\" then opt = {overwrite = opt} end",
    "type": "statement:if"
  }, {
    "id": 225,
    "text": "opt = {overwrite = opt}",
    "type": "statement:assign"
  }, {
    "id": 226,
    "text": "local overwrite = opt and opt.overwrite",
    "type": "statement:localassign"
  }, {
    "id": 227,
    "text": "local recurse   = opt and opt.recurse",
    "type": "statement:localassign"
  }, {
    "id": 228,
    "text": "local src_dir, src_name = self:splitpath(from)",
    "type": "statement:localassign"
  }, {
    "id": 229,
    "text": "if recurse or src_name:find(\"[*?]\") then -- batch mode\r\n    self:mkdir(to)\r\n    return copy_impl_batch(fs, src_dir, src_name, to, opt)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 230,
    "text": "self:mkdir(to)",
    "type": "statement:functioncall"
  }, {
    "id": 231,
    "text": "if self.mkdir then self:mkdir(self:dirname(to)) end",
    "type": "statement:if"
  }, {
    "id": 232,
    "text": "self:mkdir(self:dirname(to))",
    "type": "statement:functioncall"
  }, {
    "id": 233,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 234,
    "text": "function PATH:remove(P, opt)\r\n  assert_system(self)\r\n  local P = self:fullpath(P)\r\n  local dir, name = self:splitpath(P)\r\n  if (opt and opt.recurse) or name:find(\"[*?]\") then -- batch mode\r\n    return remove_impl_batch(fs, dir, name, opt)\r\n  end\r\n  return self:remove_impl(P)\r\nend",
    "type": "function"
  }, {
    "id": 235,
    "text": "local dir, name = self:splitpath(P)",
    "type": "statement:localassign"
  }, {
    "id": 236,
    "text": "if (opt and opt.recurse) or name:find(\"[*?]\") then -- batch mode\r\n    return remove_impl_batch(fs, dir, name, opt)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 237,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 238,
    "text": "local function make_module()\r\n  local M = require \"path.module\"\r\n  for k, f in pairs(PATH) do\r\n    if type(f) == 'function' then\r\n      M[k] = function(...) return f(PATH, ...) end\r\n    else \r\n      M[k] = f\r\n    end\r\n  end\r\n  return M\r\nend",
    "type": "function"
  }, {
    "id": 239,
    "text": "local M = require \"path.module\"",
    "type": "statement:localassign"
  }, {
    "id": 240,
    "text": "for k, f in pairs(PATH) do\r\n    if type(f) == 'function' then\r\n      M[k] = function(...) return f(PATH, ...) end\r\n    else \r\n      M[k] = f\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 241,
    "text": "if type(f) == 'function' then\r\n      M[k] = function(...) return f(PATH, ...) end\r\n    else \r\n      M[k] = f\r\n    end",
    "type": "statement:if"
  }, {
    "id": 242,
    "text": "M[k] = function(...) return f(PATH, ...) end",
    "type": "statement:assign"
  }, {
    "id": 243,
    "text": "M[k] = f",
    "type": "statement:assign"
  }, {
    "id": 244,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 245,
    "text": "function(...) return f(PATH, ...) end",
    "type": "function"
  }, {
    "id": 246,
    "text": "function M.new(DIR_SEP)\r\n  local o = setmetatable({}, {__index = PATH})\r\n  if type(DIR_SEP) == 'string' then\r\n    o.DIR_SEP = DIR_SEP\r\n    o.IS_WINDOWS = (DIR_SEP == '\\\\')\r\n  else\r\n    assert(type(DIR_SEP) == 'boolean')\r\n    o.IS_WINDOWS = DIR_SEP\r\n    o.DIR_SEP = o.IS_WINDOWS and '\\\\' or '/'\r\n  end\r\n\r\n  return o\r\nend",
    "type": "function"
  }, {
    "id": 247,
    "text": "local o = setmetatable({}, {__index = PATH})",
    "type": "statement:localassign"
  }, {
    "id": 248,
    "text": "if type(DIR_SEP) == 'string' then\r\n    o.DIR_SEP = DIR_SEP\r\n    o.IS_WINDOWS = (DIR_SEP == '\\\\')\r\n  else\r\n    assert(type(DIR_SEP) == 'boolean')\r\n    o.IS_WINDOWS = DIR_SEP\r\n    o.DIR_SEP = o.IS_WINDOWS and '\\\\' or '/'\r\n  end",
    "type": "statement:if"
  }, {
    "id": 249,
    "text": "o.DIR_SEP = DIR_SEP",
    "type": "statement:assign"
  }, {
    "id": 250,
    "text": "o.IS_WINDOWS = (DIR_SEP == '\\\\')",
    "type": "statement:assign"
  }, {
    "id": 251,
    "text": "assert(type(DIR_SEP) == 'boolean')",
    "type": "statement:functioncall"
  }, {
    "id": 252,
    "text": "o.IS_WINDOWS = DIR_SEP",
    "type": "statement:assign"
  }, {
    "id": 253,
    "text": "o.DIR_SEP = o.IS_WINDOWS and '\\\\' or '/'",
    "type": "statement:assign"
  }, {
    "id": 254,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 255,
    "text": "function() return 'pass' end",
    "type": "function"
  }, {
    "id": 256,
    "text": "function(...)\r\n        local t,e = fn(...)\r\n        if not t then return nil, e end\r\n        return date(t)\r\n      end",
    "type": "function"
  }, {
    "id": 257,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 258,
    "text": "function(opt)\r\n  local has_dir_end = PATH:has_dir_end(opt.file)\r\n  opt.file = PATH:fullpath(opt.file)\r\n  if has_dir_end then opt.file = PATH:ensure_dir_end(opt.file) end\r\n  return fs.each_impl(opt)\r\nend",
    "type": "function"
  }, {
    "id": 259,
    "text": "local has_dir_end = PATH:has_dir_end(opt.file)",
    "type": "statement:localassign"
  }, {
    "id": 260,
    "text": "opt.file = PATH:fullpath(opt.file)",
    "type": "statement:assign"
  }, {
    "id": 261,
    "text": "if has_dir_end then opt.file = PATH:ensure_dir_end(opt.file) end",
    "type": "statement:if"
  }, {
    "id": 262,
    "text": "opt.file = PATH:ensure_dir_end(opt.file)",
    "type": "statement:assign"
  }, {
    "id": 263,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 264,
    "text": "function(path, name, mode)\r\n      local rel = string.sub(path, #src_dir + chlen + 1)\r\n      if #rel > 0 then rel = rel .. fs.DIR_SEP .. name else rel = name end\r\n      local dst = dst_dir .. fs.DIR_SEP .. rel\r\n      local src = path .. fs.DIR_SEP .. name\r\n\r\n      if accept then\r\n        local ok = accept(src, dst, opt)\r\n        if not ok then return end\r\n      end\r\n\r\n      local ok, err\r\n      if mode == \"directory\" then ok, err = fs.mkdir(dst)\r\n      else ok, err = fs.copy(src, dst, not overwrite) end\r\n\r\n      if not ok and onerror then\r\n        if not onerror(err, src, dst, opt) then -- break\r\n          return true\r\n        end\r\n      else\r\n        count = count + 1\r\n      end\r\n    end",
    "type": "function"
  }, {
    "id": 265,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 266,
    "text": "function(src, mode)\r\n      if accept then\r\n        local ok = accept(src, opt)\r\n        if not ok then return end\r\n      end\r\n\r\n      local ok, err\r\n      if mode == \"directory\" then ok, err = fs.rmdir(src)\r\n      else ok, err = fs.remove(src) end\r\n\r\n      if not ok and onerror then\r\n        if not onerror(err, src, opt) then -- break\r\n          return true\r\n        end\r\n      else\r\n        count = count + 1\r\n      end\r\n    end",
    "type": "function"
  }, {
    "id": 267,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 268,
    "text": "",
    "type": "function container"
  }, {
    "id": 269,
    "text": "isfile",
    "type": "global function"
  }, {
    "id": 270,
    "text": "currentdir",
    "type": "global function"
  }, {
    "id": 271,
    "text": "each",
    "type": "global function"
  }, {
    "id": 272,
    "text": "os",
    "type": "module"
  }, {
    "id": 273,
    "text": "user_home",
    "type": "global function"
  }, {
    "id": 274,
    "text": "exists",
    "type": "global function"
  }, {
    "id": 275,
    "text": "string",
    "type": "module"
  }, {
    "id": 276,
    "text": "find",
    "type": "global function"
  }, {
    "id": 277,
    "text": "touch",
    "type": "global function"
  }, {
    "id": 278,
    "text": "dirname",
    "type": "global function"
  }, {
    "id": 279,
    "text": "splitroot",
    "type": "global function"
  }, {
    "id": 280,
    "text": "isdir",
    "type": "global function"
  }, {
    "id": 281,
    "text": "getenv",
    "type": "global function"
  }, {
    "id": 282,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 283,
    "text": "tmpname",
    "type": "global function"
  }, {
    "id": 284,
    "text": "ensure_dir_end",
    "type": "global function"
  }, {
    "id": 285,
    "text": "chdir",
    "type": "global function"
  }, {
    "id": 286,
    "text": "isempty",
    "type": "global function"
  }, {
    "id": 287,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 288,
    "text": "extension",
    "type": "global function"
  }, {
    "id": 289,
    "text": "gmatch",
    "type": "global function"
  }, {
    "id": 290,
    "text": "mkdir",
    "type": "global function"
  }, {
    "id": 291,
    "text": "basename",
    "type": "global function"
  }, {
    "id": 292,
    "text": "splitext",
    "type": "global function"
  }, {
    "id": 293,
    "text": "match",
    "type": "global function"
  }, {
    "id": 294,
    "text": "fullpath",
    "type": "global function"
  }, {
    "id": 295,
    "text": "copy",
    "type": "global function"
  }, {
    "id": 296,
    "text": "rmdir",
    "type": "global function"
  }, {
    "id": 297,
    "text": "join",
    "type": "global function"
  }, {
    "id": 298,
    "text": "fn",
    "type": "global function"
  }, {
    "id": 299,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 300,
    "text": "each",
    "type": "global function"
  }, {
    "id": 301,
    "text": "mtime",
    "type": "global function"
  }, {
    "id": 302,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 303,
    "text": "table",
    "type": "module"
  }, {
    "id": 304,
    "text": "type",
    "type": "global function"
  }, {
    "id": 305,
    "text": "move",
    "type": "global function"
  }, {
    "id": 306,
    "text": "touch",
    "type": "global function"
  }, {
    "id": 307,
    "text": "isdir",
    "type": "global function"
  }, {
    "id": 308,
    "text": "select",
    "type": "global function"
  }, {
    "id": 309,
    "text": "each_impl",
    "type": "global function"
  }, {
    "id": 310,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 311,
    "text": "rmdir",
    "type": "global function"
  }, {
    "id": 312,
    "text": "currentdir",
    "type": "global function"
  }, {
    "id": 313,
    "text": "io",
    "type": "module"
  }, {
    "id": 314,
    "text": "islink",
    "type": "global function"
  }, {
    "id": 315,
    "text": "ctime",
    "type": "global function"
  }, {
    "id": 316,
    "text": "onerror",
    "type": "global function"
  }, {
    "id": 317,
    "text": "tmpdir",
    "type": "global function"
  }, {
    "id": 318,
    "text": "atime",
    "type": "global function"
  }, {
    "id": 319,
    "text": "exists",
    "type": "global function"
  }, {
    "id": 320,
    "text": "copy",
    "type": "global function"
  }, {
    "id": 321,
    "text": "chdir",
    "type": "global function"
  }, {
    "id": 322,
    "text": "date",
    "type": "global function"
  }, {
    "id": 323,
    "text": "size",
    "type": "global function"
  }, {
    "id": 324,
    "text": "isfile",
    "type": "global function"
  }, {
    "id": 325,
    "text": "f",
    "type": "global function"
  }, {
    "id": 326,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 327,
    "text": "accept",
    "type": "global function"
  }, {
    "id": 328,
    "text": "attributes",
    "type": "global function"
  }, {
    "id": 329,
    "text": "mkdir",
    "type": "global function"
  }, {
    "id": 330,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 331,
    "text": "require",
    "type": "global function"
  }, {
    "id": 332,
    "text": "flags",
    "type": "global function"
  }, {
    "id": 333,
    "text": "",
    "type": "variable container"
  }, {
    "id": 334,
    "text": "",
    "type": "require container"
  }, {
    "id": 335,
    "text": "",
    "type": "local variable"
  }, {
    "id": 336,
    "text": "",
    "type": "boolean"
  }, {
    "id": 337,
    "text": "",
    "type": "local variable"
  }, {
    "id": 338,
    "text": "",
    "type": "boolean"
  }, {
    "id": 339,
    "text": "",
    "type": "local variable"
  }, {
    "id": 340,
    "text": "",
    "type": "boolean"
  }, {
    "id": 341,
    "text": "",
    "type": "local variable"
  }, {
    "id": 342,
    "text": "",
    "type": "n/a"
  }, {
    "id": 343,
    "text": "",
    "type": "local variable"
  }, {
    "id": 344,
    "text": "",
    "type": "n/a"
  }, {
    "id": 345,
    "text": "",
    "type": "local variable"
  }, {
    "id": 346,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 347,
    "text": "",
    "type": "local variable"
  }, {
    "id": 348,
    "text": "",
    "type": "n/a"
  }, {
    "id": 349,
    "text": "",
    "type": "local variable"
  }, {
    "id": 350,
    "text": "",
    "type": "n/a"
  }, {
    "id": 351,
    "text": "",
    "type": "global variable"
  }, {
    "id": 352,
    "text": "",
    "type": "n/a"
  }, {
    "id": 353,
    "text": "",
    "type": "global variable"
  }, {
    "id": 354,
    "text": "",
    "type": "n/a"
  }, {
    "id": 355,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 356,
    "text": "package",
    "type": "module"
  }, {
    "id": 357,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 358,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 359,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 360,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 361,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 362,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 363,
    "text": "",
    "type": "interface container"
  }, {
    "id": 364,
    "text": "",
    "type": "interface"
  }, {
    "id": 365,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 366,
    "text": "",
    "type": "require local variable"
  } ]
}