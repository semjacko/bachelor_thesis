{
  "_filename": "test_each.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-path/test/test_each.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 14
  }, {
    "from": 10,
    "label": "has",
    "to": 4
  }, {
    "from": 10,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 10,
    "label": "has",
    "to": 17
  }, {
    "from": 10,
    "label": "has",
    "to": 4
  }, {
    "from": 10,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 4
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 21,
    "label": "has",
    "to": 4
  }, {
    "from": 21,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 30,
    "label": "has",
    "to": 34
  }, {
    "from": 30,
    "label": "has",
    "to": 35
  }, {
    "from": 30,
    "label": "has",
    "to": 36
  }, {
    "from": 30,
    "label": "has",
    "to": 37
  }, {
    "from": 26,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 38,
    "label": "has",
    "to": 42
  }, {
    "from": 38,
    "label": "has",
    "to": 43
  }, {
    "from": 38,
    "label": "has",
    "to": 44
  }, {
    "from": 38,
    "label": "has",
    "to": 45
  }, {
    "from": 38,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 48
  }, {
    "from": 38,
    "label": "has",
    "to": 49
  }, {
    "from": 26,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 26,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 52,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 52,
    "label": "has",
    "to": 59
  }, {
    "from": 52,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 52,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 26,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 66,
    "label": "has",
    "to": 73
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 70
  }, {
    "from": 74,
    "label": "has",
    "to": 71
  }, {
    "from": 74,
    "label": "has",
    "to": 72
  }, {
    "from": 66,
    "label": "has",
    "to": 73
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 75
  }, {
    "from": 66,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 70
  }, {
    "from": 76,
    "label": "has",
    "to": 71
  }, {
    "from": 76,
    "label": "has",
    "to": 72
  }, {
    "from": 66,
    "label": "has",
    "to": 77
  }, {
    "from": 66,
    "label": "has",
    "to": 78
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 70
  }, {
    "from": 79,
    "label": "has",
    "to": 71
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 72
  }, {
    "from": 66,
    "label": "has",
    "to": 73
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 70
  }, {
    "from": 81,
    "label": "has",
    "to": 71
  }, {
    "from": 81,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 72
  }, {
    "from": 66,
    "label": "has",
    "to": 73
  }, {
    "from": 66,
    "label": "has",
    "to": 82
  }, {
    "from": 66,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 70
  }, {
    "from": 83,
    "label": "has",
    "to": 71
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 83,
    "label": "has",
    "to": 86
  }, {
    "from": 83,
    "label": "has",
    "to": 72
  }, {
    "from": 66,
    "label": "has",
    "to": 73
  }, {
    "from": 26,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 68
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 70
  }, {
    "from": 88,
    "label": "has",
    "to": 71
  }, {
    "from": 88,
    "label": "has",
    "to": 72
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 26,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 92,
    "label": "has",
    "to": 4
  }, {
    "from": 90,
    "label": "has",
    "to": 95
  }, {
    "from": 26,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 31
  }, {
    "from": 97,
    "label": "has",
    "to": 31
  }, {
    "from": 97,
    "label": "has",
    "to": 32
  }, {
    "from": 97,
    "label": "has",
    "to": 33
  }, {
    "from": 97,
    "label": "has",
    "to": 34
  }, {
    "from": 97,
    "label": "has",
    "to": 35
  }, {
    "from": 97,
    "label": "has",
    "to": 36
  }, {
    "from": 97,
    "label": "has",
    "to": 37
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 99,
    "label": "has",
    "to": 39
  }, {
    "from": 99,
    "label": "has",
    "to": 40
  }, {
    "from": 99,
    "label": "has",
    "to": 41
  }, {
    "from": 99,
    "label": "has",
    "to": 42
  }, {
    "from": 99,
    "label": "has",
    "to": 43
  }, {
    "from": 99,
    "label": "has",
    "to": 44
  }, {
    "from": 99,
    "label": "has",
    "to": 45
  }, {
    "from": 99,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 4
  }, {
    "from": 99,
    "label": "has",
    "to": 48
  }, {
    "from": 99,
    "label": "has",
    "to": 49
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 101,
    "label": "has",
    "to": 51
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 103,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 103,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 103,
    "label": "has",
    "to": 59
  }, {
    "from": 103,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 103,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 105,
    "label": "has",
    "to": 67
  }, {
    "from": 105,
    "label": "has",
    "to": 68
  }, {
    "from": 105,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 105,
    "label": "has",
    "to": 73
  }, {
    "from": 105,
    "label": "has",
    "to": 68
  }, {
    "from": 105,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 70
  }, {
    "from": 74,
    "label": "has",
    "to": 71
  }, {
    "from": 74,
    "label": "has",
    "to": 72
  }, {
    "from": 105,
    "label": "has",
    "to": 73
  }, {
    "from": 105,
    "label": "has",
    "to": 68
  }, {
    "from": 105,
    "label": "has",
    "to": 75
  }, {
    "from": 105,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 70
  }, {
    "from": 76,
    "label": "has",
    "to": 71
  }, {
    "from": 76,
    "label": "has",
    "to": 72
  }, {
    "from": 105,
    "label": "has",
    "to": 77
  }, {
    "from": 105,
    "label": "has",
    "to": 78
  }, {
    "from": 105,
    "label": "has",
    "to": 68
  }, {
    "from": 105,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 70
  }, {
    "from": 79,
    "label": "has",
    "to": 71
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 72
  }, {
    "from": 105,
    "label": "has",
    "to": 73
  }, {
    "from": 105,
    "label": "has",
    "to": 68
  }, {
    "from": 105,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 70
  }, {
    "from": 81,
    "label": "has",
    "to": 71
  }, {
    "from": 81,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 72
  }, {
    "from": 105,
    "label": "has",
    "to": 73
  }, {
    "from": 105,
    "label": "has",
    "to": 82
  }, {
    "from": 105,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 70
  }, {
    "from": 83,
    "label": "has",
    "to": 71
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 83,
    "label": "has",
    "to": 86
  }, {
    "from": 83,
    "label": "has",
    "to": 72
  }, {
    "from": 105,
    "label": "has",
    "to": 73
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 107,
    "label": "has",
    "to": 68
  }, {
    "from": 107,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 70
  }, {
    "from": 88,
    "label": "has",
    "to": 71
  }, {
    "from": 88,
    "label": "has",
    "to": 72
  }, {
    "from": 107,
    "label": "has",
    "to": 89
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 109,
    "label": "has",
    "to": 91
  }, {
    "from": 109,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 92,
    "label": "has",
    "to": 4
  }, {
    "from": 109,
    "label": "has",
    "to": 95
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 111,
    "label": "has",
    "to": 5
  }, {
    "from": 112,
    "label": "has",
    "to": 47
  }, {
    "from": 112,
    "label": "has",
    "to": 4
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 114,
    "label": "has",
    "to": 61
  }, {
    "from": 114,
    "label": "has",
    "to": 62
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 116,
    "label": "has",
    "to": 64
  }, {
    "from": 116,
    "label": "has",
    "to": 65
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 118,
    "label": "has",
    "to": 70
  }, {
    "from": 118,
    "label": "has",
    "to": 71
  }, {
    "from": 118,
    "label": "has",
    "to": 72
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 120,
    "label": "has",
    "to": 70
  }, {
    "from": 120,
    "label": "has",
    "to": 71
  }, {
    "from": 120,
    "label": "has",
    "to": 72
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 122,
    "label": "has",
    "to": 70
  }, {
    "from": 122,
    "label": "has",
    "to": 71
  }, {
    "from": 122,
    "label": "has",
    "to": 80
  }, {
    "from": 122,
    "label": "has",
    "to": 72
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 124,
    "label": "has",
    "to": 70
  }, {
    "from": 124,
    "label": "has",
    "to": 71
  }, {
    "from": 124,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 124,
    "label": "has",
    "to": 86
  }, {
    "from": 124,
    "label": "has",
    "to": 72
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 126,
    "label": "has",
    "to": 70
  }, {
    "from": 126,
    "label": "has",
    "to": 71
  }, {
    "from": 126,
    "label": "has",
    "to": 72
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 128,
    "label": "has",
    "to": 93
  }, {
    "from": 128,
    "label": "has",
    "to": 94
  }, {
    "from": 128,
    "label": "has",
    "to": 4
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 130,
    "label": "has",
    "to": 4
  }, {
    "from": 131,
    "label": "has",
    "to": 4
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 133,
    "label": "has",
    "to": 4
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 135,
    "label": "has",
    "to": 4
  }, {
    "from": 26,
    "label": "calls",
    "to": 137
  }, {
    "from": 26,
    "label": "calls",
    "to": 137
  }, {
    "from": 10,
    "label": "calls",
    "to": 153
  }, {
    "from": 26,
    "label": "calls",
    "to": 153
  }, {
    "from": 26,
    "label": "calls",
    "to": 153
  }, {
    "from": 26,
    "label": "calls",
    "to": 153
  }, {
    "from": 26,
    "label": "calls",
    "to": 153
  }, {
    "from": 26,
    "label": "calls",
    "to": 153
  }, {
    "from": 26,
    "label": "calls",
    "to": 153
  }, {
    "from": 26,
    "label": "calls",
    "to": 157
  }, {
    "from": 10,
    "label": "calls",
    "to": 146
  }, {
    "from": 26,
    "label": "calls",
    "to": 146
  }, {
    "from": 26,
    "label": "calls",
    "to": 146
  }, {
    "from": 26,
    "label": "calls",
    "to": 160
  }, {
    "from": 26,
    "label": "calls",
    "to": 160
  }, {
    "from": 26,
    "label": "calls",
    "to": 160
  }, {
    "from": 26,
    "label": "calls",
    "to": 160
  }, {
    "from": 26,
    "label": "calls",
    "to": 160
  }, {
    "from": 26,
    "label": "calls",
    "to": 160
  }, {
    "from": 26,
    "label": "calls",
    "to": 160
  }, {
    "from": 10,
    "label": "calls",
    "to": 143
  }, {
    "from": 26,
    "label": "calls",
    "to": 167
  }, {
    "from": 26,
    "label": "calls",
    "to": 167
  }, {
    "from": 26,
    "label": "calls",
    "to": 167
  }, {
    "from": 26,
    "label": "calls",
    "to": 167
  }, {
    "from": 26,
    "label": "calls",
    "to": 167
  }, {
    "from": 26,
    "label": "calls",
    "to": 167
  }, {
    "from": 26,
    "label": "calls",
    "to": 97
  }, {
    "from": 26,
    "label": "calls",
    "to": 139
  }, {
    "from": 136,
    "label": "calls",
    "to": 26
  }, {
    "from": 136,
    "label": "calls",
    "to": 26
  }, {
    "from": 136,
    "label": "calls",
    "to": 26
  }, {
    "from": 136,
    "label": "calls",
    "to": 26
  }, {
    "from": 26,
    "label": "calls",
    "to": 19
  }, {
    "from": 26,
    "label": "calls",
    "to": 19
  }, {
    "from": 26,
    "label": "calls",
    "to": 19
  }, {
    "from": 26,
    "label": "calls",
    "to": 19
  }, {
    "from": 26,
    "label": "calls",
    "to": 19
  }, {
    "from": 26,
    "label": "calls",
    "to": 19
  }, {
    "from": 26,
    "label": "calls",
    "to": 19
  }, {
    "from": 26,
    "label": "calls",
    "to": 19
  }, {
    "from": 26,
    "label": "calls",
    "to": 19
  }, {
    "from": 26,
    "label": "calls",
    "to": 19
  }, {
    "from": 26,
    "label": "calls",
    "to": 19
  }, {
    "from": 26,
    "label": "calls",
    "to": 19
  }, {
    "from": 26,
    "label": "calls",
    "to": 19
  }, {
    "from": 26,
    "label": "calls",
    "to": 19
  }, {
    "from": 26,
    "label": "calls",
    "to": 19
  }, {
    "from": 26,
    "label": "calls",
    "to": 155
  }, {
    "from": 26,
    "label": "calls",
    "to": 10
  }, {
    "from": 26,
    "label": "calls",
    "to": 10
  }, {
    "from": 26,
    "label": "calls",
    "to": 10
  }, {
    "from": 26,
    "label": "calls",
    "to": 152
  }, {
    "from": 26,
    "label": "calls",
    "to": 150
  }, {
    "from": 26,
    "label": "calls",
    "to": 150
  }, {
    "from": 26,
    "label": "calls",
    "to": 150
  }, {
    "from": 26,
    "label": "calls",
    "to": 150
  }, {
    "from": 26,
    "label": "calls",
    "to": 150
  }, {
    "from": 26,
    "label": "calls",
    "to": 150
  }, {
    "from": 26,
    "label": "calls",
    "to": 150
  }, {
    "from": 26,
    "label": "calls",
    "to": 150
  }, {
    "from": 26,
    "label": "calls",
    "to": 150
  }, {
    "from": 26,
    "label": "calls",
    "to": 150
  }, {
    "from": 26,
    "label": "calls",
    "to": 150
  }, {
    "from": 26,
    "label": "calls",
    "to": 150
  }, {
    "from": 26,
    "label": "calls",
    "to": 150
  }, {
    "from": 26,
    "label": "calls",
    "to": 150
  }, {
    "from": 26,
    "label": "calls",
    "to": 150
  }, {
    "from": 26,
    "label": "calls",
    "to": 150
  }, {
    "from": 26,
    "label": "calls",
    "to": 150
  }, {
    "from": 26,
    "label": "calls",
    "to": 150
  }, {
    "from": 136,
    "label": "calls",
    "to": 164
  }, {
    "from": 136,
    "label": "calls",
    "to": 164
  }, {
    "from": 136,
    "label": "calls",
    "to": 164
  }, {
    "from": 136,
    "label": "calls",
    "to": 164
  }, {
    "from": 26,
    "label": "calls",
    "to": 148
  }, {
    "from": 26,
    "label": "calls",
    "to": 148
  }, {
    "from": 26,
    "label": "calls",
    "to": 148
  }, {
    "from": 26,
    "label": "calls",
    "to": 156
  }, {
    "from": 26,
    "label": "calls",
    "to": 156
  }, {
    "from": 26,
    "label": "calls",
    "to": 156
  }, {
    "from": 26,
    "label": "calls",
    "to": 156
  }, {
    "from": 26,
    "label": "calls",
    "to": 156
  }, {
    "from": 26,
    "label": "calls",
    "to": 156
  }, {
    "from": 26,
    "label": "calls",
    "to": 156
  }, {
    "from": 26,
    "label": "calls",
    "to": 156
  }, {
    "from": 26,
    "label": "calls",
    "to": 156
  }, {
    "from": 26,
    "label": "calls",
    "to": 156
  }, {
    "from": 26,
    "label": "calls",
    "to": 166
  }, {
    "from": 136,
    "label": "calls",
    "to": 3
  }, {
    "from": 136,
    "label": "calls",
    "to": 3
  }, {
    "from": 136,
    "label": "calls",
    "to": 3
  }, {
    "from": 136,
    "label": "calls",
    "to": 3
  }, {
    "from": 136,
    "label": "calls",
    "to": 3
  }, {
    "from": 136,
    "label": "calls",
    "to": 3
  }, {
    "from": 136,
    "label": "calls",
    "to": 3
  }, {
    "from": 10,
    "label": "calls",
    "to": 169
  }, {
    "from": 26,
    "label": "calls",
    "to": 165
  }, {
    "from": 26,
    "label": "calls",
    "to": 161
  }, {
    "from": 26,
    "label": "calls",
    "to": 161
  }, {
    "from": 26,
    "label": "calls",
    "to": 161
  }, {
    "from": 26,
    "label": "calls",
    "to": 161
  }, {
    "from": 26,
    "label": "calls",
    "to": 161
  }, {
    "from": 26,
    "label": "calls",
    "to": 161
  }, {
    "from": 26,
    "label": "calls",
    "to": 161
  }, {
    "from": 26,
    "label": "calls",
    "to": 161
  }, {
    "from": 26,
    "label": "calls",
    "to": 142
  }, {
    "from": 26,
    "label": "calls",
    "to": 21
  }, {
    "from": 26,
    "label": "calls",
    "to": 21
  }, {
    "from": 26,
    "label": "calls",
    "to": 21
  }, {
    "from": 26,
    "label": "calls",
    "to": 21
  }, {
    "from": 26,
    "label": "calls",
    "to": 21
  }, {
    "from": 26,
    "label": "calls",
    "to": 21
  }, {
    "from": 26,
    "label": "calls",
    "to": 21
  }, {
    "from": 26,
    "label": "calls",
    "to": 21
  }, {
    "from": 26,
    "label": "calls",
    "to": 159
  }, {
    "from": 6,
    "label": "calls",
    "to": 151
  }, {
    "from": 26,
    "label": "calls",
    "to": 162
  }, {
    "from": 26,
    "label": "calls",
    "to": 162
  }, {
    "from": 136,
    "label": "calls",
    "to": 6
  }, {
    "from": 136,
    "label": "calls",
    "to": 6
  }, {
    "from": 136,
    "label": "calls",
    "to": 6
  }, {
    "from": 136,
    "label": "calls",
    "to": 6
  }, {
    "from": 26,
    "label": "calls",
    "to": 163
  }, {
    "from": 26,
    "label": "calls",
    "to": 163
  }, {
    "from": 26,
    "label": "calls",
    "to": 163
  }, {
    "from": 26,
    "label": "calls",
    "to": 163
  }, {
    "from": 26,
    "label": "calls",
    "to": 163
  }, {
    "from": 26,
    "label": "calls",
    "to": 163
  }, {
    "from": 26,
    "label": "calls",
    "to": 163
  }, {
    "from": 26,
    "label": "calls",
    "to": 163
  }, {
    "from": 21,
    "label": "calls",
    "to": 168
  }, {
    "from": 26,
    "label": "calls",
    "to": 168
  }, {
    "from": 26,
    "label": "calls",
    "to": 168
  }, {
    "from": 26,
    "label": "calls",
    "to": 168
  }, {
    "from": 26,
    "label": "calls",
    "to": 158
  }, {
    "from": 10,
    "label": "calls",
    "to": 145
  }, {
    "from": 26,
    "label": "calls",
    "to": 145
  }, {
    "from": 136,
    "label": "calls",
    "to": 144
  }, {
    "from": 26,
    "label": "calls",
    "to": 147
  }, {
    "from": 26,
    "label": "calls",
    "to": 149
  }, {
    "from": 26,
    "label": "calls",
    "to": 149
  }, {
    "from": 26,
    "label": "calls",
    "to": 149
  }, {
    "from": 26,
    "label": "calls",
    "to": 154
  }, {
    "from": 136,
    "label": "calls",
    "to": 170
  }, {
    "from": 136,
    "label": "calls",
    "to": 170
  }, {
    "from": 136,
    "label": "calls",
    "to": 170
  }, {
    "from": 26,
    "label": "calls",
    "to": 170
  }, {
    "from": 136,
    "label": "calls",
    "to": 170
  }, {
    "from": 136,
    "label": "calls",
    "to": 170
  }, {
    "from": 136,
    "label": "calls",
    "to": 170
  }, {
    "from": 136,
    "label": "calls",
    "to": 170
  }, {
    "from": 26,
    "label": "calls",
    "to": 138
  }, {
    "from": 136,
    "label": "calls",
    "to": 141
  }, {
    "from": 2,
    "label": "contains",
    "to": 136
  }, {
    "from": 136,
    "label": "declares",
    "to": 3
  }, {
    "from": 136,
    "label": "declares",
    "to": 6
  }, {
    "from": 136,
    "label": "declares",
    "to": 10
  }, {
    "from": 136,
    "label": "declares",
    "to": 19
  }, {
    "from": 136,
    "label": "declares",
    "to": 21
  }, {
    "from": 136,
    "label": "declares",
    "to": 26
  }, {
    "from": 136,
    "label": "declares",
    "to": 97
  }, {
    "from": 136,
    "label": "declares",
    "to": 99
  }, {
    "from": 136,
    "label": "declares",
    "to": 101
  }, {
    "from": 136,
    "label": "declares",
    "to": 103
  }, {
    "from": 136,
    "label": "declares",
    "to": 105
  }, {
    "from": 136,
    "label": "declares",
    "to": 107
  }, {
    "from": 136,
    "label": "declares",
    "to": 109
  }, {
    "from": 136,
    "label": "declares",
    "to": 111
  }, {
    "from": 136,
    "label": "declares",
    "to": 112
  }, {
    "from": 136,
    "label": "declares",
    "to": 114
  }, {
    "from": 136,
    "label": "declares",
    "to": 116
  }, {
    "from": 136,
    "label": "declares",
    "to": 118
  }, {
    "from": 136,
    "label": "declares",
    "to": 120
  }, {
    "from": 136,
    "label": "declares",
    "to": 122
  }, {
    "from": 136,
    "label": "declares",
    "to": 124
  }, {
    "from": 136,
    "label": "declares",
    "to": 126
  }, {
    "from": 136,
    "label": "declares",
    "to": 128
  }, {
    "from": 136,
    "label": "declares",
    "to": 130
  }, {
    "from": 136,
    "label": "declares",
    "to": 131
  }, {
    "from": 136,
    "label": "declares",
    "to": 133
  }, {
    "from": 136,
    "label": "declares",
    "to": 135
  }, {
    "from": 171,
    "label": "requires",
    "to": 2
  }, {
    "from": 2,
    "label": "contains",
    "to": 172
  }, {
    "from": 2,
    "label": "contains",
    "to": 173
  }, {
    "from": 172,
    "label": "initializes",
    "to": 174
  }, {
    "from": 174,
    "label": "assigns",
    "to": 175
  }, {
    "from": 172,
    "label": "initializes",
    "to": 176
  }, {
    "from": 172,
    "label": "initializes",
    "to": 177
  }, {
    "from": 177,
    "label": "assigns",
    "to": 178
  }, {
    "from": 172,
    "label": "initializes",
    "to": 179
  }, {
    "from": 179,
    "label": "assigns",
    "to": 180
  }, {
    "from": 172,
    "label": "initializes",
    "to": 181
  }, {
    "from": 181,
    "label": "assigns",
    "to": 182
  }, {
    "from": 172,
    "label": "initializes",
    "to": 183
  }, {
    "from": 183,
    "label": "assigns",
    "to": 184
  }, {
    "from": 172,
    "label": "initializes",
    "to": 185
  }, {
    "from": 185,
    "label": "assigns",
    "to": 186
  }, {
    "from": 173,
    "label": "initializes",
    "to": 187
  }, {
    "from": 187,
    "label": "requires",
    "to": 140
  }, {
    "from": 173,
    "label": "initializes",
    "to": 188
  }, {
    "from": 188,
    "label": "requires",
    "to": 1
  }, {
    "from": 60,
    "label": "hasArgument",
    "to": 114
  }, {
    "from": 63,
    "label": "hasArgument",
    "to": 116
  }, {
    "from": 69,
    "label": "hasArgument",
    "to": 118
  }, {
    "from": 69,
    "label": "hasArgument",
    "to": 120
  }, {
    "from": 69,
    "label": "hasArgument",
    "to": 126
  }, {
    "from": 76,
    "label": "hasArgument",
    "to": 118
  }, {
    "from": 76,
    "label": "hasArgument",
    "to": 120
  }, {
    "from": 76,
    "label": "hasArgument",
    "to": 126
  }, {
    "from": 79,
    "label": "hasArgument",
    "to": 122
  }, {
    "from": 83,
    "label": "hasArgument",
    "to": 124
  }, {
    "from": 88,
    "label": "hasArgument",
    "to": 118
  }, {
    "from": 88,
    "label": "hasArgument",
    "to": 120
  }, {
    "from": 88,
    "label": "hasArgument",
    "to": 126
  }, {
    "from": 92,
    "label": "hasArgument",
    "to": 128
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "path",
    "type": "module"
  }, {
    "id": 2,
    "text": "test_each",
    "type": "module"
  }, {
    "id": 3,
    "text": "function(msg) return function() lunit.skip(msg) end end",
    "type": "function"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "lunit.skip(msg)",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "local function prequire(...)\r\n  local ok, mod = pcall(require, ...)\r\n  if not ok then return nil, mod end\r\n  return mod\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "local ok, mod = pcall(require, ...)",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "if not ok then return nil, mod end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "local function mkfile(P, data)\r\n  P = path.fullpath(P)\r\n  path.mkdir(path.dirname(P))\r\n  local f, e = io.open(P, \"w+b\")\r\n  if not f then return nil, err end\r\n  if data then assert(f:write(data)) end\r\n  f:close()\r\n  return P\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "P = path.fullpath(P)",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "path.mkdir(path.dirname(P))",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "local f, e = io.open(P, \"w+b\")",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "if not f then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "if data then assert(f:write(data)) end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "assert(f:write(data))",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "local function up(str)\r\n  return path.IS_WINDOWS and str:upper() or str\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "local function clone(t, o)\r\n  o = o or {}\r\n  for k,v in pairs(t) do\r\n    o[ k ] = v\r\n  end\r\n  return o\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "o = o or {}",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "for k,v in pairs(t) do\r\n    o[ k ] = v\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 24,
    "text": "o[ k ] = v",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "local function make_test(_ENV, opt)\r\n\r\nif setfenv then setfenv(1, _ENV) end\r\n\r\nlocal cwd, files, dirs, path_each\r\n\r\nfunction teardown()\r\n  collectgarbage(\"collect\") collectgarbage(\"collect\") -- force clean lfs.dir\r\n  path.remove(path.join(cwd, '1', '2', '3', 'test.dat'))\r\n  path.remove(path.join(cwd, '1', '2', '3', 'test.txt'))\r\n  path.remove(path.join(cwd, '1', '2', '3', 'file.dat'))\r\n  path.rmdir(path.join(cwd, '1', '2', '3'))\r\n  path.rmdir(path.join(cwd, '1', '2'))\r\n  path.rmdir(path.join(cwd, '1'))\r\nend\r\n\r\nfunction setup()\r\n  cwd = assert_string(path.currentdir())\r\n  teardown()\r\n  path.mkdir(path.join(cwd, '1', '2', '3'))\r\n  mkfile(path.join(cwd, '1', '2', '3', 'test.dat'), '12345')\r\n  mkfile(path.join(cwd, '1', '2', '3', 'test.txt'), '12345')\r\n  mkfile(path.join(cwd, '1', '2', '3', 'file.dat'), '12345')\r\n\r\n  local findfile_t = assert(opt.get_findfile())\r\n  path_each = require \"path.findfile\".load(function(opt)\r\n    opt.file = path.fullpath(opt.file)\r\n    return findfile_t(opt)\r\n  end)\r\n\r\n  files = {\r\n    [ up(path.join(cwd, '1', '2', '3', 'test.dat')) ] = true;\r\n    [ up(path.join(cwd, '1', '2', '3', 'test.txt')) ] = true;\r\n    [ up(path.join(cwd, '1', '2', '3', 'file.dat')) ] = true;\r\n  }\r\n\r\n  dirs = {\r\n    [ up(path.join(cwd, '1', '2', '3')) ] = true;\r\n    [ up(path.join(cwd, '1', '2')) ] = true;\r\n    [ up(path.join(cwd, '1' )) ] = true;\r\n  }\r\nend\r\n\r\nfunction test_cwd()\r\n  assert_equal(cwd, path.fullpath(\".\"))\r\nend\r\n\r\nfunction test_attr()\r\n  for P in pairs(files)do assert(path.exists(P)) end\r\n  for P in pairs(files)do assert(path.isfile(P)) end\r\n  for P in pairs(files)do assert_equal(5, path.size(P)) end\r\n\r\n  local ts = os.time() + 100\r\n  path_each(\"./1/*\", function(f)\r\n    assert(path.isfile(f))\r\n    assert(path.touch(f, ts))\r\n  end, {skipdirs=true, recurse=true})\r\n\r\n  path_each(\"./1/*\", \"ft\", function(f,mt)\r\n    local delta = math.abs(ts - mt)\r\n    assert(delta <= 2)\r\n  end, {skipdirs=true, recurse=true})\r\nend\r\n\r\nfunction test_findfile()\r\n  local params\r\n\r\n  params = clone(files)\r\n  path_each(\"./1/2/3/*.*\", function(f)\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    params[f] = nil\r\n  end)\r\n  assert_nil(next(params))\r\n\r\n  params = clone(files)\r\n  for f in path_each(\"./1/2/3/*.*\") do\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    params[f] = nil\r\n  end\r\n  assert_nil(next(params))\r\n\r\n  params = clone(files)\r\n  params = clone(dirs,params)\r\n  path_each(\"./1/*\", function(f)\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    params[f] = nil\r\n  end, {recurse=true})\r\n  assert_equal(up(path.join(cwd, '1' )), next(params))\r\n  assert_nil(next(params, up(path.join(cwd, '1' ))))\r\n\r\n  params = clone(files)\r\n  path_each(\"./1/2/3/*.*\", \"fz\", function(f, sz)\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    assert_equal(5, sz)\r\n    params[f] = nil\r\n  end)\r\n  assert_nil(next(params))\r\n\r\n  params = clone(files)\r\n  for f, sz in path_each(\"./1/2/3/*.*\", \"fz\") do\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    assert_equal(5, sz)\r\n    params[f] = nil\r\n  end\r\n  assert_nil(next(params))\r\n\r\n  params = clone(dirs)\r\n  path_each(\"./*\", \"fzm\", function(f, sz, m)\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    if ISW then assert_equal(0, sz) end\r\n    assert_equal('directory', m)\r\n    params[f] = nil\r\n  end, {skipfiles=true, recurse=true})\r\n  assert_nil(next(params))\r\n\r\nend\r\n\r\nfunction test_findfile_mask()\r\n  params = clone(files)\r\n  path_each(\"./1/2/3/t*.*\", function(f)\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    params[f] = nil\r\n  end)\r\n  assert_not_nil(next(params))\r\nend\r\n\r\nfunction test_findfile_break()\r\n  local flag = false\r\n  path_each(\"./1/2/3/*.*\", function()\r\n    assert_false(flag)\r\n    flag = true\r\n    return 'break'\r\n  end)\r\n  assert_true(flag)\r\nend\r\n\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "if setfenv then setfenv(1, _ENV) end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "setfenv(1, _ENV)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "local cwd, files, dirs, path_each",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "function teardown()\r\n  collectgarbage(\"collect\") collectgarbage(\"collect\") -- force clean lfs.dir\r\n  path.remove(path.join(cwd, '1', '2', '3', 'test.dat'))\r\n  path.remove(path.join(cwd, '1', '2', '3', 'test.txt'))\r\n  path.remove(path.join(cwd, '1', '2', '3', 'file.dat'))\r\n  path.rmdir(path.join(cwd, '1', '2', '3'))\r\n  path.rmdir(path.join(cwd, '1', '2'))\r\n  path.rmdir(path.join(cwd, '1'))\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 31,
    "text": "collectgarbage(\"collect\")",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "path.remove(path.join(cwd, '1', '2', '3', 'test.dat'))",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "path.remove(path.join(cwd, '1', '2', '3', 'test.txt'))",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "path.remove(path.join(cwd, '1', '2', '3', 'file.dat'))",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "path.rmdir(path.join(cwd, '1', '2', '3'))",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "path.rmdir(path.join(cwd, '1', '2'))",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "path.rmdir(path.join(cwd, '1'))",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "function setup()\r\n  cwd = assert_string(path.currentdir())\r\n  teardown()\r\n  path.mkdir(path.join(cwd, '1', '2', '3'))\r\n  mkfile(path.join(cwd, '1', '2', '3', 'test.dat'), '12345')\r\n  mkfile(path.join(cwd, '1', '2', '3', 'test.txt'), '12345')\r\n  mkfile(path.join(cwd, '1', '2', '3', 'file.dat'), '12345')\r\n\r\n  local findfile_t = assert(opt.get_findfile())\r\n  path_each = require \"path.findfile\".load(function(opt)\r\n    opt.file = path.fullpath(opt.file)\r\n    return findfile_t(opt)\r\n  end)\r\n\r\n  files = {\r\n    [ up(path.join(cwd, '1', '2', '3', 'test.dat')) ] = true;\r\n    [ up(path.join(cwd, '1', '2', '3', 'test.txt')) ] = true;\r\n    [ up(path.join(cwd, '1', '2', '3', 'file.dat')) ] = true;\r\n  }\r\n\r\n  dirs = {\r\n    [ up(path.join(cwd, '1', '2', '3')) ] = true;\r\n    [ up(path.join(cwd, '1', '2')) ] = true;\r\n    [ up(path.join(cwd, '1' )) ] = true;\r\n  }\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 39,
    "text": "cwd = assert_string(path.currentdir())",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "teardown()",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "path.mkdir(path.join(cwd, '1', '2', '3'))",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "mkfile(path.join(cwd, '1', '2', '3', 'test.dat'), '12345')",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "mkfile(path.join(cwd, '1', '2', '3', 'test.txt'), '12345')",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "mkfile(path.join(cwd, '1', '2', '3', 'file.dat'), '12345')",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "local findfile_t = assert(opt.get_findfile())",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "path_each = require \"path.findfile\".load(function(opt)\r\n    opt.file = path.fullpath(opt.file)\r\n    return findfile_t(opt)\r\n  end)",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "opt.file = path.fullpath(opt.file)",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "files = {\r\n    [ up(path.join(cwd, '1', '2', '3', 'test.dat')) ] = true;\r\n    [ up(path.join(cwd, '1', '2', '3', 'test.txt')) ] = true;\r\n    [ up(path.join(cwd, '1', '2', '3', 'file.dat')) ] = true;\r\n  }",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "dirs = {\r\n    [ up(path.join(cwd, '1', '2', '3')) ] = true;\r\n    [ up(path.join(cwd, '1', '2')) ] = true;\r\n    [ up(path.join(cwd, '1' )) ] = true;\r\n  }",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "function test_cwd()\r\n  assert_equal(cwd, path.fullpath(\".\"))\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 51,
    "text": "assert_equal(cwd, path.fullpath(\".\"))",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "function test_attr()\r\n  for P in pairs(files)do assert(path.exists(P)) end\r\n  for P in pairs(files)do assert(path.isfile(P)) end\r\n  for P in pairs(files)do assert_equal(5, path.size(P)) end\r\n\r\n  local ts = os.time() + 100\r\n  path_each(\"./1/*\", function(f)\r\n    assert(path.isfile(f))\r\n    assert(path.touch(f, ts))\r\n  end, {skipdirs=true, recurse=true})\r\n\r\n  path_each(\"./1/*\", \"ft\", function(f,mt)\r\n    local delta = math.abs(ts - mt)\r\n    assert(delta <= 2)\r\n  end, {skipdirs=true, recurse=true})\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 53,
    "text": "for P in pairs(files)do assert(path.exists(P)) end",
    "type": "statement:genericfor"
  }, {
    "id": 54,
    "text": "assert(path.exists(P))",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "for P in pairs(files)do assert(path.isfile(P)) end",
    "type": "statement:genericfor"
  }, {
    "id": 56,
    "text": "assert(path.isfile(P))",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "for P in pairs(files)do assert_equal(5, path.size(P)) end",
    "type": "statement:genericfor"
  }, {
    "id": 58,
    "text": "assert_equal(5, path.size(P))",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "local ts = os.time() + 100",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "path_each(\"./1/*\", function(f)\r\n    assert(path.isfile(f))\r\n    assert(path.touch(f, ts))\r\n  end, {skipdirs=true, recurse=true})",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "assert(path.isfile(f))",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "assert(path.touch(f, ts))",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "path_each(\"./1/*\", \"ft\", function(f,mt)\r\n    local delta = math.abs(ts - mt)\r\n    assert(delta <= 2)\r\n  end, {skipdirs=true, recurse=true})",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "local delta = math.abs(ts - mt)",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "assert(delta <= 2)",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "function test_findfile()\r\n  local params\r\n\r\n  params = clone(files)\r\n  path_each(\"./1/2/3/*.*\", function(f)\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    params[f] = nil\r\n  end)\r\n  assert_nil(next(params))\r\n\r\n  params = clone(files)\r\n  for f in path_each(\"./1/2/3/*.*\") do\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    params[f] = nil\r\n  end\r\n  assert_nil(next(params))\r\n\r\n  params = clone(files)\r\n  params = clone(dirs,params)\r\n  path_each(\"./1/*\", function(f)\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    params[f] = nil\r\n  end, {recurse=true})\r\n  assert_equal(up(path.join(cwd, '1' )), next(params))\r\n  assert_nil(next(params, up(path.join(cwd, '1' ))))\r\n\r\n  params = clone(files)\r\n  path_each(\"./1/2/3/*.*\", \"fz\", function(f, sz)\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    assert_equal(5, sz)\r\n    params[f] = nil\r\n  end)\r\n  assert_nil(next(params))\r\n\r\n  params = clone(files)\r\n  for f, sz in path_each(\"./1/2/3/*.*\", \"fz\") do\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    assert_equal(5, sz)\r\n    params[f] = nil\r\n  end\r\n  assert_nil(next(params))\r\n\r\n  params = clone(dirs)\r\n  path_each(\"./*\", \"fzm\", function(f, sz, m)\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    if ISW then assert_equal(0, sz) end\r\n    assert_equal('directory', m)\r\n    params[f] = nil\r\n  end, {skipfiles=true, recurse=true})\r\n  assert_nil(next(params))\r\n\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 67,
    "text": "local params",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "params = clone(files)",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "path_each(\"./1/2/3/*.*\", function(f)\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    params[f] = nil\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "f = up(f)",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "assert_not_nil(params[f], \"unexpected: \" .. f)",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "params[f] = nil",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "assert_nil(next(params))",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "for f in path_each(\"./1/2/3/*.*\") do\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    params[f] = nil\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 75,
    "text": "params = clone(dirs,params)",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "path_each(\"./1/*\", function(f)\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    params[f] = nil\r\n  end, {recurse=true})",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "assert_equal(up(path.join(cwd, '1' )), next(params))",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "assert_nil(next(params, up(path.join(cwd, '1' ))))",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "path_each(\"./1/2/3/*.*\", \"fz\", function(f, sz)\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    assert_equal(5, sz)\r\n    params[f] = nil\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "assert_equal(5, sz)",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "for f, sz in path_each(\"./1/2/3/*.*\", \"fz\") do\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    assert_equal(5, sz)\r\n    params[f] = nil\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 82,
    "text": "params = clone(dirs)",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "path_each(\"./*\", \"fzm\", function(f, sz, m)\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    if ISW then assert_equal(0, sz) end\r\n    assert_equal('directory', m)\r\n    params[f] = nil\r\n  end, {skipfiles=true, recurse=true})",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "if ISW then assert_equal(0, sz) end",
    "type": "statement:if"
  }, {
    "id": 85,
    "text": "assert_equal(0, sz)",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "assert_equal('directory', m)",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "function test_findfile_mask()\r\n  params = clone(files)\r\n  path_each(\"./1/2/3/t*.*\", function(f)\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    params[f] = nil\r\n  end)\r\n  assert_not_nil(next(params))\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 88,
    "text": "path_each(\"./1/2/3/t*.*\", function(f)\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    params[f] = nil\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "assert_not_nil(next(params))",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "function test_findfile_break()\r\n  local flag = false\r\n  path_each(\"./1/2/3/*.*\", function()\r\n    assert_false(flag)\r\n    flag = true\r\n    return 'break'\r\n  end)\r\n  assert_true(flag)\r\nend",
    "type": "statement:globalfunction"
  }, {
    "id": 91,
    "text": "local flag = false",
    "type": "statement:localassign"
  }, {
    "id": 92,
    "text": "path_each(\"./1/2/3/*.*\", function()\r\n    assert_false(flag)\r\n    flag = true\r\n    return 'break'\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "assert_false(flag)",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "flag = true",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "assert_true(flag)",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "function teardown()\r\n  collectgarbage(\"collect\") collectgarbage(\"collect\") -- force clean lfs.dir\r\n  path.remove(path.join(cwd, '1', '2', '3', 'test.dat'))\r\n  path.remove(path.join(cwd, '1', '2', '3', 'test.txt'))\r\n  path.remove(path.join(cwd, '1', '2', '3', 'file.dat'))\r\n  path.rmdir(path.join(cwd, '1', '2', '3'))\r\n  path.rmdir(path.join(cwd, '1', '2'))\r\n  path.rmdir(path.join(cwd, '1'))\r\nend",
    "type": "function"
  }, {
    "id": 98,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 99,
    "text": "function setup()\r\n  cwd = assert_string(path.currentdir())\r\n  teardown()\r\n  path.mkdir(path.join(cwd, '1', '2', '3'))\r\n  mkfile(path.join(cwd, '1', '2', '3', 'test.dat'), '12345')\r\n  mkfile(path.join(cwd, '1', '2', '3', 'test.txt'), '12345')\r\n  mkfile(path.join(cwd, '1', '2', '3', 'file.dat'), '12345')\r\n\r\n  local findfile_t = assert(opt.get_findfile())\r\n  path_each = require \"path.findfile\".load(function(opt)\r\n    opt.file = path.fullpath(opt.file)\r\n    return findfile_t(opt)\r\n  end)\r\n\r\n  files = {\r\n    [ up(path.join(cwd, '1', '2', '3', 'test.dat')) ] = true;\r\n    [ up(path.join(cwd, '1', '2', '3', 'test.txt')) ] = true;\r\n    [ up(path.join(cwd, '1', '2', '3', 'file.dat')) ] = true;\r\n  }\r\n\r\n  dirs = {\r\n    [ up(path.join(cwd, '1', '2', '3')) ] = true;\r\n    [ up(path.join(cwd, '1', '2')) ] = true;\r\n    [ up(path.join(cwd, '1' )) ] = true;\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 100,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 101,
    "text": "function test_cwd()\r\n  assert_equal(cwd, path.fullpath(\".\"))\r\nend",
    "type": "function"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "function test_attr()\r\n  for P in pairs(files)do assert(path.exists(P)) end\r\n  for P in pairs(files)do assert(path.isfile(P)) end\r\n  for P in pairs(files)do assert_equal(5, path.size(P)) end\r\n\r\n  local ts = os.time() + 100\r\n  path_each(\"./1/*\", function(f)\r\n    assert(path.isfile(f))\r\n    assert(path.touch(f, ts))\r\n  end, {skipdirs=true, recurse=true})\r\n\r\n  path_each(\"./1/*\", \"ft\", function(f,mt)\r\n    local delta = math.abs(ts - mt)\r\n    assert(delta <= 2)\r\n  end, {skipdirs=true, recurse=true})\r\nend",
    "type": "function"
  }, {
    "id": 104,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 105,
    "text": "function test_findfile()\r\n  local params\r\n\r\n  params = clone(files)\r\n  path_each(\"./1/2/3/*.*\", function(f)\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    params[f] = nil\r\n  end)\r\n  assert_nil(next(params))\r\n\r\n  params = clone(files)\r\n  for f in path_each(\"./1/2/3/*.*\") do\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    params[f] = nil\r\n  end\r\n  assert_nil(next(params))\r\n\r\n  params = clone(files)\r\n  params = clone(dirs,params)\r\n  path_each(\"./1/*\", function(f)\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    params[f] = nil\r\n  end, {recurse=true})\r\n  assert_equal(up(path.join(cwd, '1' )), next(params))\r\n  assert_nil(next(params, up(path.join(cwd, '1' ))))\r\n\r\n  params = clone(files)\r\n  path_each(\"./1/2/3/*.*\", \"fz\", function(f, sz)\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    assert_equal(5, sz)\r\n    params[f] = nil\r\n  end)\r\n  assert_nil(next(params))\r\n\r\n  params = clone(files)\r\n  for f, sz in path_each(\"./1/2/3/*.*\", \"fz\") do\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    assert_equal(5, sz)\r\n    params[f] = nil\r\n  end\r\n  assert_nil(next(params))\r\n\r\n  params = clone(dirs)\r\n  path_each(\"./*\", \"fzm\", function(f, sz, m)\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    if ISW then assert_equal(0, sz) end\r\n    assert_equal('directory', m)\r\n    params[f] = nil\r\n  end, {skipfiles=true, recurse=true})\r\n  assert_nil(next(params))\r\n\r\nend",
    "type": "function"
  }, {
    "id": 106,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 107,
    "text": "function test_findfile_mask()\r\n  params = clone(files)\r\n  path_each(\"./1/2/3/t*.*\", function(f)\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    params[f] = nil\r\n  end)\r\n  assert_not_nil(next(params))\r\nend",
    "type": "function"
  }, {
    "id": 108,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 109,
    "text": "function test_findfile_break()\r\n  local flag = false\r\n  path_each(\"./1/2/3/*.*\", function()\r\n    assert_false(flag)\r\n    flag = true\r\n    return 'break'\r\n  end)\r\n  assert_true(flag)\r\nend",
    "type": "function"
  }, {
    "id": 110,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 111,
    "text": "function() lunit.skip(msg) end",
    "type": "function"
  }, {
    "id": 112,
    "text": "function(opt)\r\n    opt.file = path.fullpath(opt.file)\r\n    return findfile_t(opt)\r\n  end",
    "type": "function"
  }, {
    "id": 113,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 114,
    "text": "function(f)\r\n    assert(path.isfile(f))\r\n    assert(path.touch(f, ts))\r\n  end",
    "type": "function"
  }, {
    "id": 115,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 116,
    "text": "function(f,mt)\r\n    local delta = math.abs(ts - mt)\r\n    assert(delta <= 2)\r\n  end",
    "type": "function"
  }, {
    "id": 117,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 118,
    "text": "function(f)\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    params[f] = nil\r\n  end",
    "type": "function"
  }, {
    "id": 119,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 120,
    "text": "function(f)\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    params[f] = nil\r\n  end",
    "type": "function"
  }, {
    "id": 121,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 122,
    "text": "function(f, sz)\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    assert_equal(5, sz)\r\n    params[f] = nil\r\n  end",
    "type": "function"
  }, {
    "id": 123,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 124,
    "text": "function(f, sz, m)\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    if ISW then assert_equal(0, sz) end\r\n    assert_equal('directory', m)\r\n    params[f] = nil\r\n  end",
    "type": "function"
  }, {
    "id": 125,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 126,
    "text": "function(f)\r\n    f = up(f)\r\n    assert_not_nil(params[f], \"unexpected: \" .. f)\r\n    params[f] = nil\r\n  end",
    "type": "function"
  }, {
    "id": 127,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 128,
    "text": "function()\r\n    assert_false(flag)\r\n    flag = true\r\n    return 'break'\r\n  end",
    "type": "function"
  }, {
    "id": 129,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 130,
    "text": "function() return require \"path.lfs.fs\".each_impl end",
    "type": "function"
  }, {
    "id": 131,
    "text": "function() \r\n      return require \"path.win32.fs\".load(\"ffi\", \"A\").each_impl\r\n    end",
    "type": "function"
  }, {
    "id": 132,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 133,
    "text": "function() \r\n      return require \"path.win32.fs\".load(\"alien\", \"A\").each_impl\r\n    end",
    "type": "function"
  }, {
    "id": 134,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 135,
    "text": "function() return require \"path.syscall.fs\".each_impl end",
    "type": "function"
  }, {
    "id": 136,
    "text": "",
    "type": "function container"
  }, {
    "id": 137,
    "text": "isfile",
    "type": "global function"
  }, {
    "id": 138,
    "text": "currentdir",
    "type": "global function"
  }, {
    "id": 139,
    "text": "exists",
    "type": "global function"
  }, {
    "id": 140,
    "text": "lunit",
    "type": "module"
  }, {
    "id": 141,
    "text": "run",
    "type": "global function"
  }, {
    "id": 142,
    "text": "touch",
    "type": "global function"
  }, {
    "id": 143,
    "text": "dirname",
    "type": "global function"
  }, {
    "id": 144,
    "text": "skip",
    "type": "global function"
  }, {
    "id": 145,
    "text": "mkdir",
    "type": "global function"
  }, {
    "id": 146,
    "text": "fullpath",
    "type": "global function"
  }, {
    "id": 147,
    "text": "size",
    "type": "global function"
  }, {
    "id": 148,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 149,
    "text": "rmdir",
    "type": "global function"
  }, {
    "id": 150,
    "text": "join",
    "type": "global function"
  }, {
    "id": 151,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 152,
    "text": "get_findfile",
    "type": "global function"
  }, {
    "id": 153,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 154,
    "text": "time",
    "type": "global function"
  }, {
    "id": 155,
    "text": "findfile_t",
    "type": "global function"
  }, {
    "id": 156,
    "text": "path_each",
    "type": "global function"
  }, {
    "id": 157,
    "text": "assert_false",
    "type": "global function"
  }, {
    "id": 158,
    "text": "setfenv",
    "type": "global function"
  }, {
    "id": 159,
    "text": "abs",
    "type": "global function"
  }, {
    "id": 160,
    "text": "assert_equal",
    "type": "global function"
  }, {
    "id": 161,
    "text": "assert_not_nil",
    "type": "global function"
  }, {
    "id": 162,
    "text": "collectgarbage",
    "type": "global function"
  }, {
    "id": 163,
    "text": "next",
    "type": "global function"
  }, {
    "id": 164,
    "text": "TEST_CASE",
    "type": "global function"
  }, {
    "id": 165,
    "text": "assert_string",
    "type": "global function"
  }, {
    "id": 166,
    "text": "assert_true",
    "type": "global function"
  }, {
    "id": 167,
    "text": "assert_nil",
    "type": "global function"
  }, {
    "id": 168,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 169,
    "text": "open",
    "type": "global function"
  }, {
    "id": 170,
    "text": "require",
    "type": "global function"
  }, {
    "id": 171,
    "text": "",
    "type": "global variable"
  }, {
    "id": 172,
    "text": "",
    "type": "variable container"
  }, {
    "id": 173,
    "text": "",
    "type": "require container"
  }, {
    "id": 174,
    "text": "",
    "type": "local variable"
  }, {
    "id": 175,
    "text": "",
    "type": "n/a"
  }, {
    "id": 176,
    "text": "",
    "type": "local variable"
  }, {
    "id": 177,
    "text": "",
    "type": "local variable"
  }, {
    "id": 178,
    "text": "",
    "type": "n/a"
  }, {
    "id": 179,
    "text": "",
    "type": "local variable"
  }, {
    "id": 180,
    "text": "",
    "type": "n/a"
  }, {
    "id": 181,
    "text": "",
    "type": "local variable"
  }, {
    "id": 182,
    "text": "",
    "type": "n/a"
  }, {
    "id": 183,
    "text": "",
    "type": "local variable"
  }, {
    "id": 184,
    "text": "",
    "type": "n/a"
  }, {
    "id": 185,
    "text": "",
    "type": "local variable"
  }, {
    "id": 186,
    "text": "",
    "type": "n/a"
  }, {
    "id": 187,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 188,
    "text": "",
    "type": "require local variable"
  } ]
}