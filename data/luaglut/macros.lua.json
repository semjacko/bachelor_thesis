{
  "_filename": "macros.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luaglut/macros.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 9,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 7,
    "label": "has",
    "to": 15
  }, {
    "from": 2,
    "label": "has",
    "to": 16
  }, {
    "from": 2,
    "label": "has",
    "to": 17
  }, {
    "from": 2,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 2,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 2,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 2,
    "label": "has",
    "to": 26
  }, {
    "from": 2,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 2,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 2,
    "label": "has",
    "to": 31
  }, {
    "from": 2,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 2,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "calls",
    "to": 40
  }, {
    "from": 38,
    "label": "calls",
    "to": 40
  }, {
    "from": 2,
    "label": "calls",
    "to": 43
  }, {
    "from": 2,
    "label": "calls",
    "to": 43
  }, {
    "from": 38,
    "label": "calls",
    "to": 41
  }, {
    "from": 2,
    "label": "calls",
    "to": 45
  }, {
    "from": 2,
    "label": "calls",
    "to": 45
  }, {
    "from": 2,
    "label": "calls",
    "to": 45
  }, {
    "from": 2,
    "label": "calls",
    "to": 45
  }, {
    "from": 2,
    "label": "calls",
    "to": 45
  }, {
    "from": 2,
    "label": "calls",
    "to": 45
  }, {
    "from": 2,
    "label": "calls",
    "to": 45
  }, {
    "from": 2,
    "label": "calls",
    "to": 45
  }, {
    "from": 2,
    "label": "calls",
    "to": 45
  }, {
    "from": 2,
    "label": "calls",
    "to": 45
  }, {
    "from": 2,
    "label": "calls",
    "to": 45
  }, {
    "from": 38,
    "label": "calls",
    "to": 45
  }, {
    "from": 38,
    "label": "calls",
    "to": 45
  }, {
    "from": 2,
    "label": "calls",
    "to": 39
  }, {
    "from": 2,
    "label": "calls",
    "to": 39
  }, {
    "from": 2,
    "label": "calls",
    "to": 47
  }, {
    "from": 38,
    "label": "calls",
    "to": 44
  }, {
    "from": 2,
    "label": "calls",
    "to": 48
  }, {
    "from": 38,
    "label": "calls",
    "to": 46
  }, {
    "from": 38,
    "label": "calls",
    "to": 46
  }, {
    "from": 2,
    "label": "calls",
    "to": 42
  }, {
    "from": 38,
    "label": "calls",
    "to": 2
  }, {
    "from": 1,
    "label": "contains",
    "to": 38
  }, {
    "from": 38,
    "label": "declares",
    "to": 2
  }, {
    "from": 38,
    "label": "declares",
    "to": 36
  }, {
    "from": 1,
    "label": "contains",
    "to": 49
  }, {
    "from": 1,
    "label": "contains",
    "to": 50
  }, {
    "from": 49,
    "label": "initializes",
    "to": 51
  }, {
    "from": 51,
    "label": "assigns",
    "to": 52
  }, {
    "from": 52,
    "label": "assigns",
    "to": 53
  }, {
    "from": 53,
    "label": "assigns",
    "to": 54
  }, {
    "from": 52,
    "label": "assigns",
    "to": 55
  }, {
    "from": 55,
    "label": "assigns",
    "to": 56
  }, {
    "from": 52,
    "label": "assigns",
    "to": 57
  }, {
    "from": 57,
    "label": "assigns",
    "to": 58
  }, {
    "from": 52,
    "label": "assigns",
    "to": 59
  }, {
    "from": 59,
    "label": "assigns",
    "to": 60
  }, {
    "from": 52,
    "label": "assigns",
    "to": 61
  }, {
    "from": 61,
    "label": "assigns",
    "to": 62
  }, {
    "from": 52,
    "label": "assigns",
    "to": 63
  }, {
    "from": 63,
    "label": "assigns",
    "to": 64
  }, {
    "from": 52,
    "label": "assigns",
    "to": 65
  }, {
    "from": 65,
    "label": "assigns",
    "to": 66
  }, {
    "from": 52,
    "label": "assigns",
    "to": 67
  }, {
    "from": 67,
    "label": "assigns",
    "to": 68
  }, {
    "from": 52,
    "label": "assigns",
    "to": 69
  }, {
    "from": 69,
    "label": "assigns",
    "to": 70
  }, {
    "from": 52,
    "label": "assigns",
    "to": 71
  }, {
    "from": 71,
    "label": "assigns",
    "to": 72
  }, {
    "from": 52,
    "label": "assigns",
    "to": 73
  }, {
    "from": 73,
    "label": "assigns",
    "to": 74
  }, {
    "from": 52,
    "label": "assigns",
    "to": 75
  }, {
    "from": 75,
    "label": "assigns",
    "to": 76
  }, {
    "from": 52,
    "label": "assigns",
    "to": 77
  }, {
    "from": 77,
    "label": "assigns",
    "to": 78
  }, {
    "from": 52,
    "label": "assigns",
    "to": 79
  }, {
    "from": 79,
    "label": "assigns",
    "to": 80
  }, {
    "from": 52,
    "label": "assigns",
    "to": 81
  }, {
    "from": 81,
    "label": "assigns",
    "to": 82
  }, {
    "from": 52,
    "label": "assigns",
    "to": 83
  }, {
    "from": 83,
    "label": "assigns",
    "to": 84
  }, {
    "from": 52,
    "label": "assigns",
    "to": 85
  }, {
    "from": 85,
    "label": "assigns",
    "to": 86
  }, {
    "from": 52,
    "label": "assigns",
    "to": 87
  }, {
    "from": 87,
    "label": "assigns",
    "to": 88
  }, {
    "from": 52,
    "label": "assigns",
    "to": 89
  }, {
    "from": 89,
    "label": "assigns",
    "to": 90
  }, {
    "from": 52,
    "label": "assigns",
    "to": 91
  }, {
    "from": 91,
    "label": "assigns",
    "to": 92
  }, {
    "from": 49,
    "label": "initializes",
    "to": 93
  }, {
    "from": 93,
    "label": "assigns",
    "to": 94
  }, {
    "from": 94,
    "label": "assigns",
    "to": 95
  }, {
    "from": 94,
    "label": "assigns",
    "to": 96
  }, {
    "from": 94,
    "label": "assigns",
    "to": 97
  }, {
    "from": 94,
    "label": "assigns",
    "to": 98
  }, {
    "from": 94,
    "label": "assigns",
    "to": 99
  }, {
    "from": 94,
    "label": "assigns",
    "to": 100
  }, {
    "from": 94,
    "label": "assigns",
    "to": 101
  }, {
    "from": 94,
    "label": "assigns",
    "to": 102
  }, {
    "from": 94,
    "label": "assigns",
    "to": 103
  }, {
    "from": 94,
    "label": "assigns",
    "to": 104
  }, {
    "from": 94,
    "label": "assigns",
    "to": 105
  }, {
    "from": 94,
    "label": "assigns",
    "to": 106
  }, {
    "from": 49,
    "label": "initializes",
    "to": 107
  }, {
    "from": 107,
    "label": "assigns",
    "to": 108
  }, {
    "from": 108,
    "label": "assigns",
    "to": 109
  }, {
    "from": 108,
    "label": "assigns",
    "to": 110
  }, {
    "from": 108,
    "label": "assigns",
    "to": 111
  }, {
    "from": 108,
    "label": "assigns",
    "to": 112
  }, {
    "from": 49,
    "label": "initializes",
    "to": 113
  }, {
    "from": 113,
    "label": "assigns",
    "to": 114
  }, {
    "from": 114,
    "label": "assigns",
    "to": 115
  }, {
    "from": 114,
    "label": "assigns",
    "to": 116
  }, {
    "from": 114,
    "label": "assigns",
    "to": 117
  }, {
    "from": 114,
    "label": "assigns",
    "to": 118
  }, {
    "from": 114,
    "label": "assigns",
    "to": 119
  }, {
    "from": 114,
    "label": "assigns",
    "to": 120
  }, {
    "from": 114,
    "label": "assigns",
    "to": 121
  }, {
    "from": 114,
    "label": "assigns",
    "to": 122
  }, {
    "from": 114,
    "label": "assigns",
    "to": 123
  }, {
    "from": 114,
    "label": "assigns",
    "to": 124
  }, {
    "from": 114,
    "label": "assigns",
    "to": 125
  }, {
    "from": 114,
    "label": "assigns",
    "to": 126
  }, {
    "from": 114,
    "label": "assigns",
    "to": 127
  }, {
    "from": 114,
    "label": "assigns",
    "to": 128
  }, {
    "from": 114,
    "label": "assigns",
    "to": 129
  }, {
    "from": 114,
    "label": "assigns",
    "to": 130
  }, {
    "from": 114,
    "label": "assigns",
    "to": 131
  }, {
    "from": 114,
    "label": "assigns",
    "to": 132
  }, {
    "from": 114,
    "label": "assigns",
    "to": 133
  }, {
    "from": 114,
    "label": "assigns",
    "to": 134
  }, {
    "from": 114,
    "label": "assigns",
    "to": 135
  }, {
    "from": 114,
    "label": "assigns",
    "to": 136
  }, {
    "from": 114,
    "label": "assigns",
    "to": 137
  }, {
    "from": 114,
    "label": "assigns",
    "to": 138
  }, {
    "from": 114,
    "label": "assigns",
    "to": 139
  }, {
    "from": 114,
    "label": "assigns",
    "to": 140
  }, {
    "from": 114,
    "label": "assigns",
    "to": 141
  }, {
    "from": 114,
    "label": "assigns",
    "to": 142
  }, {
    "from": 114,
    "label": "assigns",
    "to": 143
  }, {
    "from": 114,
    "label": "assigns",
    "to": 144
  }, {
    "from": 114,
    "label": "assigns",
    "to": 145
  }, {
    "from": 114,
    "label": "assigns",
    "to": 146
  }, {
    "from": 114,
    "label": "assigns",
    "to": 147
  }, {
    "from": 114,
    "label": "assigns",
    "to": 148
  }, {
    "from": 114,
    "label": "assigns",
    "to": 149
  }, {
    "from": 114,
    "label": "assigns",
    "to": 150
  }, {
    "from": 114,
    "label": "assigns",
    "to": 151
  }, {
    "from": 114,
    "label": "assigns",
    "to": 152
  }, {
    "from": 114,
    "label": "assigns",
    "to": 153
  }, {
    "from": 114,
    "label": "assigns",
    "to": 154
  }, {
    "from": 114,
    "label": "assigns",
    "to": 155
  }, {
    "from": 114,
    "label": "assigns",
    "to": 156
  }, {
    "from": 114,
    "label": "assigns",
    "to": 157
  }, {
    "from": 114,
    "label": "assigns",
    "to": 158
  }, {
    "from": 114,
    "label": "assigns",
    "to": 159
  }, {
    "from": 114,
    "label": "assigns",
    "to": 160
  }, {
    "from": 114,
    "label": "assigns",
    "to": 161
  }, {
    "from": 114,
    "label": "assigns",
    "to": 162
  }, {
    "from": 114,
    "label": "assigns",
    "to": 163
  }, {
    "from": 114,
    "label": "assigns",
    "to": 164
  }, {
    "from": 114,
    "label": "assigns",
    "to": 165
  }, {
    "from": 114,
    "label": "assigns",
    "to": 166
  }, {
    "from": 114,
    "label": "assigns",
    "to": 167
  }, {
    "from": 114,
    "label": "assigns",
    "to": 168
  }, {
    "from": 114,
    "label": "assigns",
    "to": 169
  }, {
    "from": 114,
    "label": "assigns",
    "to": 170
  }, {
    "from": 114,
    "label": "assigns",
    "to": 171
  }, {
    "from": 114,
    "label": "assigns",
    "to": 172
  }, {
    "from": 114,
    "label": "assigns",
    "to": 173
  }, {
    "from": 114,
    "label": "assigns",
    "to": 174
  }, {
    "from": 114,
    "label": "assigns",
    "to": 175
  }, {
    "from": 114,
    "label": "assigns",
    "to": 176
  }, {
    "from": 114,
    "label": "assigns",
    "to": 177
  }, {
    "from": 114,
    "label": "assigns",
    "to": 178
  }, {
    "from": 114,
    "label": "assigns",
    "to": 179
  }, {
    "from": 114,
    "label": "assigns",
    "to": 180
  }, {
    "from": 114,
    "label": "assigns",
    "to": 181
  }, {
    "from": 114,
    "label": "assigns",
    "to": 182
  }, {
    "from": 114,
    "label": "assigns",
    "to": 183
  }, {
    "from": 114,
    "label": "assigns",
    "to": 184
  }, {
    "from": 114,
    "label": "assigns",
    "to": 185
  }, {
    "from": 114,
    "label": "assigns",
    "to": 186
  }, {
    "from": 114,
    "label": "assigns",
    "to": 187
  }, {
    "from": 114,
    "label": "assigns",
    "to": 188
  }, {
    "from": 114,
    "label": "assigns",
    "to": 189
  }, {
    "from": 114,
    "label": "assigns",
    "to": 190
  }, {
    "from": 114,
    "label": "assigns",
    "to": 191
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "macros",
    "type": "module"
  }, {
    "id": 2,
    "text": "function gen_macro(sig)\r\n\r\n   local args = {}\r\n   local i, imax = 1, string.len(sig)\r\n   local nxt, old_nxt\r\n   local prefix = ''\r\n\r\n   while i <= imax do\r\n      nxt, old_nxt = string.sub(sig, i, i), nxt\r\n      if nxt == 'u' then\r\n         prefix = nxt\r\n      elseif tonumber(nxt) == nil then\r\n         table.insert(args, prefix .. nxt)\r\n         prefix = ''\r\n      else\r\n         for j = 1,tonumber(nxt)-1 do\r\n            table.insert(args, prefix .. old_nxt)\r\n         end\r\n         prefix = ''\r\n      end\r\n      i = i + 1\r\n   end\r\n\r\n   local n = table.getn(args)\r\n\r\n   printf('\\n#define FUN_%s(name)\\\\\\n' ..\r\n      'LUA_API int L ## name (lua_State *L) {\\\\\\n', sig)\r\n\r\n   if sig == 'v' then\r\n      printf('   (void) L; /* unused */ \\\\\\n')\r\n   end\r\n\r\n   for i = 2, n do\r\n      local k, v = i-1, ptypes[args[i]]\r\n      printf('   %s a%d = (%s) %s(L, %d);\\\\\\n', v.type, k, v.type, v.getf, k)\r\n   end\r\n\r\n   if ptypes[args[1]].type ~= 'void' then\r\n      printf('   %s(L, (%s) ', ptypes[args[1]].putf, ptypes[args[1]].type);\r\n   else\r\n      printf('   ')\r\n   end\r\n\r\n   printf('name(')\r\n   if n > 1 then printf('a1') end\r\n   for i = 3, n do printf(', a%d', i-1) end\r\n   printf(')')\r\n\r\n   if ptypes[args[1]].type ~= 'void' then\r\n      printf(');\\\\\\n   return 1;\\\\\\n}\\n')\r\n   else\r\n      printf(';\\\\\\n   return 0;\\\\\\n}\\n')\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local args = {}",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local i, imax = 1, string.len(sig)",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local nxt, old_nxt",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "local prefix = ''",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "while i <= imax do\r\n      nxt, old_nxt = string.sub(sig, i, i), nxt\r\n      if nxt == 'u' then\r\n         prefix = nxt\r\n      elseif tonumber(nxt) == nil then\r\n         table.insert(args, prefix .. nxt)\r\n         prefix = ''\r\n      else\r\n         for j = 1,tonumber(nxt)-1 do\r\n            table.insert(args, prefix .. old_nxt)\r\n         end\r\n         prefix = ''\r\n      end\r\n      i = i + 1\r\n   end",
    "type": "statement:while"
  }, {
    "id": 8,
    "text": "nxt, old_nxt = string.sub(sig, i, i), nxt",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "if nxt == 'u' then\r\n         prefix = nxt\r\n      elseif tonumber(nxt) == nil then\r\n         table.insert(args, prefix .. nxt)\r\n         prefix = ''\r\n      else\r\n         for j = 1,tonumber(nxt)-1 do\r\n            table.insert(args, prefix .. old_nxt)\r\n         end\r\n         prefix = ''\r\n      end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "prefix = nxt",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "table.insert(args, prefix .. nxt)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "prefix = ''",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "for j = 1,tonumber(nxt)-1 do\r\n            table.insert(args, prefix .. old_nxt)\r\n         end",
    "type": "statement:numericfor"
  }, {
    "id": 14,
    "text": "table.insert(args, prefix .. old_nxt)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "local n = table.getn(args)",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "printf('\\n#define FUN_%s(name)\\\\\\n' ..\r\n      'LUA_API int L ## name (lua_State *L) {\\\\\\n', sig)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "if sig == 'v' then\r\n      printf('   (void) L; /* unused */ \\\\\\n')\r\n   end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "printf('   (void) L; /* unused */ \\\\\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "for i = 2, n do\r\n      local k, v = i-1, ptypes[args[i]]\r\n      printf('   %s a%d = (%s) %s(L, %d);\\\\\\n', v.type, k, v.type, v.getf, k)\r\n   end",
    "type": "statement:numericfor"
  }, {
    "id": 21,
    "text": "local k, v = i-1, ptypes[args[i]]",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "printf('   %s a%d = (%s) %s(L, %d);\\\\\\n', v.type, k, v.type, v.getf, k)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "if ptypes[args[1]].type ~= 'void' then\r\n      printf('   %s(L, (%s) ', ptypes[args[1]].putf, ptypes[args[1]].type);\r\n   else\r\n      printf('   ')\r\n   end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "printf('   %s(L, (%s) ', ptypes[args[1]].putf, ptypes[args[1]].type)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "printf('   ')",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "printf('name(')",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "if n > 1 then printf('a1') end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "printf('a1')",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "for i = 3, n do printf(', a%d', i-1) end",
    "type": "statement:numericfor"
  }, {
    "id": 30,
    "text": "printf(', a%d', i-1)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "printf(')')",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "if ptypes[args[1]].type ~= 'void' then\r\n      printf(');\\\\\\n   return 1;\\\\\\n}\\n')\r\n   else\r\n      printf(';\\\\\\n   return 0;\\\\\\n}\\n')\r\n   end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "printf(');\\\\\\n   return 1;\\\\\\n}\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "printf(';\\\\\\n   return 0;\\\\\\n}\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function(k, v) gen_macro(v) end",
    "type": "function"
  }, {
    "id": 37,
    "text": "gen_macro(v)",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "",
    "type": "function container"
  }, {
    "id": 39,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 40,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 41,
    "text": "print",
    "type": "global function"
  }, {
    "id": 42,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 43,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 44,
    "text": "foreach",
    "type": "global function"
  }, {
    "id": 45,
    "text": "printf",
    "type": "global function"
  }, {
    "id": 46,
    "text": "loadstring",
    "type": "global function"
  }, {
    "id": 47,
    "text": "getn",
    "type": "global function"
  }, {
    "id": 48,
    "text": "len",
    "type": "global function"
  }, {
    "id": 49,
    "text": "",
    "type": "variable container"
  }, {
    "id": 50,
    "text": "",
    "type": "require container"
  }, {
    "id": 51,
    "text": "",
    "type": "local variable"
  }, {
    "id": 52,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 53,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 54,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 55,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 56,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 57,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 58,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 59,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 60,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 61,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 62,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 63,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 64,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 65,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 66,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 67,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 68,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 69,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 70,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 71,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 72,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 73,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 74,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 75,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 76,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 77,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 78,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 79,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 80,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 81,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 82,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 83,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 84,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 85,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 86,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 87,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 88,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 89,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 90,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 91,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 92,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 93,
    "text": "",
    "type": "local variable"
  }, {
    "id": 94,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 95,
    "text": "",
    "type": "string"
  }, {
    "id": 96,
    "text": "",
    "type": "string"
  }, {
    "id": 97,
    "text": "",
    "type": "string"
  }, {
    "id": 98,
    "text": "",
    "type": "string"
  }, {
    "id": 99,
    "text": "",
    "type": "string"
  }, {
    "id": 100,
    "text": "",
    "type": "string"
  }, {
    "id": 101,
    "text": "",
    "type": "string"
  }, {
    "id": 102,
    "text": "",
    "type": "string"
  }, {
    "id": 103,
    "text": "",
    "type": "string"
  }, {
    "id": 104,
    "text": "",
    "type": "string"
  }, {
    "id": 105,
    "text": "",
    "type": "string"
  }, {
    "id": 106,
    "text": "",
    "type": "string"
  }, {
    "id": 107,
    "text": "",
    "type": "local variable"
  }, {
    "id": 108,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 109,
    "text": "",
    "type": "string"
  }, {
    "id": 110,
    "text": "",
    "type": "string"
  }, {
    "id": 111,
    "text": "",
    "type": "string"
  }, {
    "id": 112,
    "text": "",
    "type": "string"
  }, {
    "id": 113,
    "text": "",
    "type": "local variable"
  }, {
    "id": 114,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 115,
    "text": "",
    "type": "string"
  }, {
    "id": 116,
    "text": "",
    "type": "string"
  }, {
    "id": 117,
    "text": "",
    "type": "string"
  }, {
    "id": 118,
    "text": "",
    "type": "string"
  }, {
    "id": 119,
    "text": "",
    "type": "string"
  }, {
    "id": 120,
    "text": "",
    "type": "string"
  }, {
    "id": 121,
    "text": "",
    "type": "string"
  }, {
    "id": 122,
    "text": "",
    "type": "string"
  }, {
    "id": 123,
    "text": "",
    "type": "string"
  }, {
    "id": 124,
    "text": "",
    "type": "string"
  }, {
    "id": 125,
    "text": "",
    "type": "string"
  }, {
    "id": 126,
    "text": "",
    "type": "string"
  }, {
    "id": 127,
    "text": "",
    "type": "string"
  }, {
    "id": 128,
    "text": "",
    "type": "string"
  }, {
    "id": 129,
    "text": "",
    "type": "string"
  }, {
    "id": 130,
    "text": "",
    "type": "string"
  }, {
    "id": 131,
    "text": "",
    "type": "string"
  }, {
    "id": 132,
    "text": "",
    "type": "string"
  }, {
    "id": 133,
    "text": "",
    "type": "string"
  }, {
    "id": 134,
    "text": "",
    "type": "string"
  }, {
    "id": 135,
    "text": "",
    "type": "string"
  }, {
    "id": 136,
    "text": "",
    "type": "string"
  }, {
    "id": 137,
    "text": "",
    "type": "string"
  }, {
    "id": 138,
    "text": "",
    "type": "string"
  }, {
    "id": 139,
    "text": "",
    "type": "string"
  }, {
    "id": 140,
    "text": "",
    "type": "string"
  }, {
    "id": 141,
    "text": "",
    "type": "string"
  }, {
    "id": 142,
    "text": "",
    "type": "string"
  }, {
    "id": 143,
    "text": "",
    "type": "string"
  }, {
    "id": 144,
    "text": "",
    "type": "string"
  }, {
    "id": 145,
    "text": "",
    "type": "string"
  }, {
    "id": 146,
    "text": "",
    "type": "string"
  }, {
    "id": 147,
    "text": "",
    "type": "string"
  }, {
    "id": 148,
    "text": "",
    "type": "string"
  }, {
    "id": 149,
    "text": "",
    "type": "string"
  }, {
    "id": 150,
    "text": "",
    "type": "string"
  }, {
    "id": 151,
    "text": "",
    "type": "string"
  }, {
    "id": 152,
    "text": "",
    "type": "string"
  }, {
    "id": 153,
    "text": "",
    "type": "string"
  }, {
    "id": 154,
    "text": "",
    "type": "string"
  }, {
    "id": 155,
    "text": "",
    "type": "string"
  }, {
    "id": 156,
    "text": "",
    "type": "string"
  }, {
    "id": 157,
    "text": "",
    "type": "string"
  }, {
    "id": 158,
    "text": "",
    "type": "string"
  }, {
    "id": 159,
    "text": "",
    "type": "string"
  }, {
    "id": 160,
    "text": "",
    "type": "string"
  }, {
    "id": 161,
    "text": "",
    "type": "string"
  }, {
    "id": 162,
    "text": "",
    "type": "string"
  }, {
    "id": 163,
    "text": "",
    "type": "string"
  }, {
    "id": 164,
    "text": "",
    "type": "string"
  }, {
    "id": 165,
    "text": "",
    "type": "string"
  }, {
    "id": 166,
    "text": "",
    "type": "string"
  }, {
    "id": 167,
    "text": "",
    "type": "string"
  }, {
    "id": 168,
    "text": "",
    "type": "string"
  }, {
    "id": 169,
    "text": "",
    "type": "string"
  }, {
    "id": 170,
    "text": "",
    "type": "string"
  }, {
    "id": 171,
    "text": "",
    "type": "string"
  }, {
    "id": 172,
    "text": "",
    "type": "string"
  }, {
    "id": 173,
    "text": "",
    "type": "string"
  }, {
    "id": 174,
    "text": "",
    "type": "string"
  }, {
    "id": 175,
    "text": "",
    "type": "string"
  }, {
    "id": 176,
    "text": "",
    "type": "string"
  }, {
    "id": 177,
    "text": "",
    "type": "string"
  }, {
    "id": 178,
    "text": "",
    "type": "string"
  }, {
    "id": 179,
    "text": "",
    "type": "string"
  }, {
    "id": 180,
    "text": "",
    "type": "string"
  }, {
    "id": 181,
    "text": "",
    "type": "string"
  }, {
    "id": 182,
    "text": "",
    "type": "string"
  }, {
    "id": 183,
    "text": "",
    "type": "string"
  }, {
    "id": 184,
    "text": "",
    "type": "string"
  }, {
    "id": 185,
    "text": "",
    "type": "string"
  }, {
    "id": 186,
    "text": "",
    "type": "string"
  }, {
    "id": 187,
    "text": "",
    "type": "string"
  }, {
    "id": 188,
    "text": "",
    "type": "string"
  }, {
    "id": 189,
    "text": "",
    "type": "string"
  }, {
    "id": 190,
    "text": "",
    "type": "string"
  }, {
    "id": 191,
    "text": "",
    "type": "string"
  } ]
}