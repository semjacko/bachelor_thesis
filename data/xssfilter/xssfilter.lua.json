{
  "_filename": "xssfilter.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/xssfilter/lua/xssfilter.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 12
  }, {
    "from": 7,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 5
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 14,
    "label": "has",
    "to": 20
  }, {
    "from": 14,
    "label": "has",
    "to": 21
  }, {
    "from": 14,
    "label": "has",
    "to": 22
  }, {
    "from": 14,
    "label": "has",
    "to": 23
  }, {
    "from": 14,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 24,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 21
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 33
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 29,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 29,
    "label": "has",
    "to": 38
  }, {
    "from": 24,
    "label": "has",
    "to": 39
  }, {
    "from": 14,
    "label": "has",
    "to": 40
  }, {
    "from": 14,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 14,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 14,
    "label": "has",
    "to": 5
  }, {
    "from": 14,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 16
  }, {
    "from": 46,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 46,
    "label": "has",
    "to": 5
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 48,
    "label": "has",
    "to": 5
  }, {
    "from": 48,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 5
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 57,
    "label": "has",
    "to": 5
  }, {
    "from": 57,
    "label": "has",
    "to": 60
  }, {
    "from": 57,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 63,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 69,
    "label": "has",
    "to": 76
  }, {
    "from": 69,
    "label": "has",
    "to": 77
  }, {
    "from": 69,
    "label": "has",
    "to": 78
  }, {
    "from": 63,
    "label": "has",
    "to": 79
  }, {
    "from": 57,
    "label": "has",
    "to": 80
  }, {
    "from": 57,
    "label": "has",
    "to": 5
  }, {
    "from": 57,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 63,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 69,
    "label": "has",
    "to": 76
  }, {
    "from": 69,
    "label": "has",
    "to": 77
  }, {
    "from": 69,
    "label": "has",
    "to": 78
  }, {
    "from": 63,
    "label": "has",
    "to": 79
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 84,
    "label": "has",
    "to": 5
  }, {
    "from": 84,
    "label": "has",
    "to": 88
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 89,
    "label": "has",
    "to": 92
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 5
  }, {
    "from": 93,
    "label": "has",
    "to": 5
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 5
  }, {
    "from": 96,
    "label": "has",
    "to": 5
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 99,
    "label": "has",
    "to": 18
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 89,
    "label": "calls",
    "to": 2
  }, {
    "from": 57,
    "label": "calls",
    "to": 103
  }, {
    "from": 14,
    "label": "calls",
    "to": 107
  }, {
    "from": 14,
    "label": "calls",
    "to": 107
  }, {
    "from": 14,
    "label": "calls",
    "to": 107
  }, {
    "from": 57,
    "label": "calls",
    "to": 107
  }, {
    "from": 14,
    "label": "calls",
    "to": 110
  }, {
    "from": 14,
    "label": "calls",
    "to": 110
  }, {
    "from": 14,
    "label": "calls",
    "to": 113
  }, {
    "from": 14,
    "label": "calls",
    "to": 113
  }, {
    "from": 57,
    "label": "calls",
    "to": 48
  }, {
    "from": 14,
    "label": "calls",
    "to": 106
  }, {
    "from": 14,
    "label": "calls",
    "to": 106
  }, {
    "from": 14,
    "label": "calls",
    "to": 106
  }, {
    "from": 14,
    "label": "calls",
    "to": 106
  }, {
    "from": 14,
    "label": "calls",
    "to": 106
  }, {
    "from": 14,
    "label": "calls",
    "to": 106
  }, {
    "from": 89,
    "label": "calls",
    "to": 104
  }, {
    "from": 7,
    "label": "calls",
    "to": 102
  }, {
    "from": 48,
    "label": "calls",
    "to": 102
  }, {
    "from": 57,
    "label": "calls",
    "to": 102
  }, {
    "from": 57,
    "label": "calls",
    "to": 114
  }, {
    "from": 2,
    "label": "calls",
    "to": 108
  }, {
    "from": 101,
    "label": "calls",
    "to": 109
  }, {
    "from": 14,
    "label": "calls",
    "to": 46
  }, {
    "from": 14,
    "label": "calls",
    "to": 46
  }, {
    "from": 48,
    "label": "calls",
    "to": 111
  }, {
    "from": 57,
    "label": "calls",
    "to": 111
  }, {
    "from": 57,
    "label": "calls",
    "to": 111
  }, {
    "from": 46,
    "label": "calls",
    "to": 112
  }, {
    "from": 57,
    "label": "calls",
    "to": 82
  }, {
    "from": 57,
    "label": "calls",
    "to": 82
  }, {
    "from": 14,
    "label": "calls",
    "to": 105
  }, {
    "from": 1,
    "label": "contains",
    "to": 101
  }, {
    "from": 101,
    "label": "declares",
    "to": 2
  }, {
    "from": 101,
    "label": "declares",
    "to": 7
  }, {
    "from": 101,
    "label": "declares",
    "to": 14
  }, {
    "from": 101,
    "label": "declares",
    "to": 46
  }, {
    "from": 101,
    "label": "declares",
    "to": 48
  }, {
    "from": 101,
    "label": "declares",
    "to": 55
  }, {
    "from": 101,
    "label": "declares",
    "to": 57
  }, {
    "from": 101,
    "label": "declares",
    "to": 82
  }, {
    "from": 101,
    "label": "declares",
    "to": 84
  }, {
    "from": 101,
    "label": "declares",
    "to": 89
  }, {
    "from": 101,
    "label": "declares",
    "to": 93
  }, {
    "from": 101,
    "label": "declares",
    "to": 96
  }, {
    "from": 101,
    "label": "declares",
    "to": 99
  }, {
    "from": 1,
    "label": "contains",
    "to": 115
  }, {
    "from": 1,
    "label": "contains",
    "to": 116
  }, {
    "from": 115,
    "label": "initializes",
    "to": 117
  }, {
    "from": 117,
    "label": "assigns",
    "to": 118
  }, {
    "from": 115,
    "label": "initializes",
    "to": 119
  }, {
    "from": 119,
    "label": "assigns",
    "to": 120
  }, {
    "from": 120,
    "label": "assigns",
    "to": 121
  }, {
    "from": 121,
    "label": "assigns",
    "to": 122
  }, {
    "from": 120,
    "label": "assigns",
    "to": 123
  }, {
    "from": 123,
    "label": "assigns",
    "to": 124
  }, {
    "from": 115,
    "label": "initializes",
    "to": 125
  }, {
    "from": 125,
    "label": "assigns",
    "to": 126
  }, {
    "from": 115,
    "label": "initializes",
    "to": 127
  }, {
    "from": 127,
    "label": "assigns",
    "to": 128
  }, {
    "from": 115,
    "label": "initializes",
    "to": 129
  }, {
    "from": 129,
    "label": "assigns",
    "to": 130
  }, {
    "from": 17,
    "label": "hasArgument",
    "to": 99
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "xssfilter",
    "type": "module"
  }, {
    "id": 2,
    "text": "function new(allowed_tags, generic_attrs)\r\n   local obj = setmetatable({}, XSSFilter_mt)\r\n   obj:init(allowed_tags)\r\n   return obj\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local obj = setmetatable({}, XSSFilter_mt)",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "obj:init(allowed_tags)",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "function XSSFilter:init(allowed_tags, generic_attrs)\r\n   args = args or {}\r\n   self.allowed_tags = allowed_tags or ALLOWED_TAGS\r\n   for i,v in ipairs(self.allowed_tags) do\r\n      self.allowed_tags[v] = self.allowed_tags[v] or {}\r\n   end\r\n   self.generic_attributes = generic_attrs or GENERIC_ATTRIBUTES\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "args = args or {}",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "self.allowed_tags = allowed_tags or ALLOWED_TAGS",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "for i,v in ipairs(self.allowed_tags) do\r\n      self.allowed_tags[v] = self.allowed_tags[v] or {}\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 11,
    "text": "self.allowed_tags[v] = self.allowed_tags[v] or {}",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "self.generic_attributes = generic_attrs or GENERIC_ATTRIBUTES",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "local function parse_xml(s)\r\n\r\n   --- An auxiliary function to parse tag's attributes\r\n   local function parse_attributes(s)\r\n      local arg = {}\r\n         string.gsub(s, \"(%w+)=([\\\"'])(.-)%2\", function (w, _, a)\r\n         arg[w] = a\r\n         end)\r\n      return arg\r\n   end\r\n\r\n   local stack = {}\r\n   local top = {}\r\n   table.insert(stack, top)\r\n   local ni,c,label,xarg, empty\r\n   local i, j = 1, 1\r\n   while true do\r\n      ni,j,c,label,xarg, empty = string.find(s, \"<(%/?)(%w+)(.-)(%/?)>\", i)\r\n      if not ni then break end\r\n      local text = string.sub(s, i, ni-1)\r\n      --if not string.find(text, \"^%s*$\") then\r\n      table.insert(top, text)\r\n      --end\r\n      if empty == \"/\" then  -- empty element tag\r\n         table.insert(top, {label=label, xarg=parse_attributes(xarg), empty=1})\r\n      elseif c == \"\" then   -- start tag\r\n         top = {label=label, xarg=parse_attributes(xarg)}\r\n         table.insert(stack, top)   -- new level\r\n      else  -- end tag\r\n         local toclose = table.remove(stack)  -- remove top\r\n         top = stack[#stack]\r\n         if #stack < 1 then\r\n            error(\"nothing to close with \"..label)\r\n         end\r\n         if toclose.label ~= label then\r\n            error(\"trying to close \"..toclose.label..\" with \"..label)\r\n         end\r\n         table.insert(top, toclose)\r\n      end\r\n      i = j+1\r\n   end\r\n   local text = string.sub(s, i)\r\n   if not string.find(text, \"^%s*$\") then\r\n      table.insert(stack[stack.n], text)\r\n   end\r\n   if #stack > 1 then\r\n      error(\"unclosed \"..stack[stack.n].label)\r\n   end\r\n   return stack[1]\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "local function parse_attributes(s)\r\n      local arg = {}\r\n         string.gsub(s, \"(%w+)=([\\\"'])(.-)%2\", function (w, _, a)\r\n         arg[w] = a\r\n         end)\r\n      return arg\r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 16,
    "text": "local arg = {}",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "string.gsub(s, \"(%w+)=([\\\"'])(.-)%2\", function (w, _, a)\r\n         arg[w] = a\r\n         end)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "arg[w] = a",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "local stack = {}",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "local top = {}",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "table.insert(stack, top)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "local ni,c,label,xarg, empty",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "local i, j = 1, 1",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "while true do\r\n      ni,j,c,label,xarg, empty = string.find(s, \"<(%/?)(%w+)(.-)(%/?)>\", i)\r\n      if not ni then break end\r\n      local text = string.sub(s, i, ni-1)\r\n      --if not string.find(text, \"^%s*$\") then\r\n      table.insert(top, text)\r\n      --end\r\n      if empty == \"/\" then  -- empty element tag\r\n         table.insert(top, {label=label, xarg=parse_attributes(xarg), empty=1})\r\n      elseif c == \"\" then   -- start tag\r\n         top = {label=label, xarg=parse_attributes(xarg)}\r\n         table.insert(stack, top)   -- new level\r\n      else  -- end tag\r\n         local toclose = table.remove(stack)  -- remove top\r\n         top = stack[#stack]\r\n         if #stack < 1 then\r\n            error(\"nothing to close with \"..label)\r\n         end\r\n         if toclose.label ~= label then\r\n            error(\"trying to close \"..toclose.label..\" with \"..label)\r\n         end\r\n         table.insert(top, toclose)\r\n      end\r\n      i = j+1\r\n   end",
    "type": "statement:while"
  }, {
    "id": 25,
    "text": "ni,j,c,label,xarg, empty = string.find(s, \"<(%/?)(%w+)(.-)(%/?)>\", i)",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "if not ni then break end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "local text = string.sub(s, i, ni-1)",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "table.insert(top, text)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "if empty == \"/\" then  -- empty element tag\r\n         table.insert(top, {label=label, xarg=parse_attributes(xarg), empty=1})\r\n      elseif c == \"\" then   -- start tag\r\n         top = {label=label, xarg=parse_attributes(xarg)}\r\n         table.insert(stack, top)   -- new level\r\n      else  -- end tag\r\n         local toclose = table.remove(stack)  -- remove top\r\n         top = stack[#stack]\r\n         if #stack < 1 then\r\n            error(\"nothing to close with \"..label)\r\n         end\r\n         if toclose.label ~= label then\r\n            error(\"trying to close \"..toclose.label..\" with \"..label)\r\n         end\r\n         table.insert(top, toclose)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "table.insert(top, {label=label, xarg=parse_attributes(xarg), empty=1})",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "top = {label=label, xarg=parse_attributes(xarg)}",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "local toclose = table.remove(stack)",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "top = stack[#stack]",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "if #stack < 1 then\r\n            error(\"nothing to close with \"..label)\r\n         end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "error(\"nothing to close with \"..label)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "if toclose.label ~= label then\r\n            error(\"trying to close \"..toclose.label..\" with \"..label)\r\n         end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "error(\"trying to close \"..toclose.label..\" with \"..label)",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "table.insert(top, toclose)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "i = j+1",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "local text = string.sub(s, i)",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "if not string.find(text, \"^%s*$\") then\r\n      table.insert(stack[stack.n], text)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "table.insert(stack[stack.n], text)",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "if #stack > 1 then\r\n      error(\"unclosed \"..stack[stack.n].label)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "error(\"unclosed \"..stack[stack.n].label)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "local function parse_attributes(s)\r\n      local arg = {}\r\n         string.gsub(s, \"(%w+)=([\\\"'])(.-)%2\", function (w, _, a)\r\n         arg[w] = a\r\n         end)\r\n      return arg\r\n   end",
    "type": "function"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "local function find_match(value, patterns)\r\n   patterns = patterns or {}\r\n   if type(patterns) == \"string\" then patterns = {patterns} end\r\n   for _, pattern in ipairs(patterns) do\r\n      if value:find(pattern) then return true end\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "patterns = patterns or {}",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "if type(patterns) == \"string\" then patterns = {patterns} end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "patterns = {patterns}",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "for _, pattern in ipairs(patterns) do\r\n      if value:find(pattern) then return true end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 53,
    "text": "if value:find(pattern) then return true end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "local function dummy_test()\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function XSSFilter:filter(html)\r\n   local status, parsed = pcall(parse_xml, \"<xml>\"..html..\"</xml>\")\r\n   if not status then\r\n      return nil, \"XSSFilter could not parse (X)HTML:\\n\"..html:gsub(\"<\", \"&lt;\"):gsub(\">\", \"&gt;\")\r\n   end\r\n\r\n   local buffer = \"\"\r\n\r\n   -- this function is called recursively on all nodes\r\n   function xml2string(t)\r\n      for i,child in ipairs(t) do\r\n         if type(child) == \"string\" then\r\n            buffer = buffer..child\r\n         elseif type(child) == \"table\" then\r\n            local taginfo = self.allowed_tags[child.label]\r\n            if not taginfo then\r\n               buffer = buffer..self:get_replacement(child.label, \"not allowed\")\r\n            else\r\n               local test_result, why_not =  (taginfo._test or dummy_test)(child)\r\n               if not test_result then\r\n                  buffer = buffer..self:get_replacement(child.label, why_not)\r\n               else\r\n                  -- ok, let's put the tag in\r\n                  -- we might still strip some attributes, but silently\r\n                  buffer = buffer..\"<\"..child.label\r\n                  for attr, value in pairs(child.xarg) do\r\n                     local patterns = taginfo[attr] or self.generic_attributes[attr] or {}\r\n                     if find_match(value, patterns) then\r\n                        buffer = buffer..\" \"..attr..'=\"'..value:gsub('\"', \"&quot;\")..'\"'\r\n                     end\r\n                  end\r\n                  buffer = buffer..\">\"\r\n                  xml2string(child)\r\n                  buffer = buffer..\"</\"..child.label..\">\"\r\n               end\r\n            end\r\n         else\r\n            error(\"XSSFilter: Unexpected type of field in parsed XML\")\r\n         end\r\n      end\r\n   end\r\n   -- call the xml2string() function on the first top node.\r\n   xml2string(parsed[2])\r\n   return buffer   \r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "local status, parsed = pcall(parse_xml, \"<xml>\"..html..\"</xml>\")",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "if not status then\r\n      return nil, \"XSSFilter could not parse (X)HTML:\\n\"..html:gsub(\"<\", \"&lt;\"):gsub(\">\", \"&gt;\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "local buffer = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "function xml2string(t)\r\n      for i,child in ipairs(t) do\r\n         if type(child) == \"string\" then\r\n            buffer = buffer..child\r\n         elseif type(child) == \"table\" then\r\n            local taginfo = self.allowed_tags[child.label]\r\n            if not taginfo then\r\n               buffer = buffer..self:get_replacement(child.label, \"not allowed\")\r\n            else\r\n               local test_result, why_not =  (taginfo._test or dummy_test)(child)\r\n               if not test_result then\r\n                  buffer = buffer..self:get_replacement(child.label, why_not)\r\n               else\r\n                  -- ok, let's put the tag in\r\n                  -- we might still strip some attributes, but silently\r\n                  buffer = buffer..\"<\"..child.label\r\n                  for attr, value in pairs(child.xarg) do\r\n                     local patterns = taginfo[attr] or self.generic_attributes[attr] or {}\r\n                     if find_match(value, patterns) then\r\n                        buffer = buffer..\" \"..attr..'=\"'..value:gsub('\"', \"&quot;\")..'\"'\r\n                     end\r\n                  end\r\n                  buffer = buffer..\">\"\r\n                  xml2string(child)\r\n                  buffer = buffer..\"</\"..child.label..\">\"\r\n               end\r\n            end\r\n         else\r\n            error(\"XSSFilter: Unexpected type of field in parsed XML\")\r\n         end\r\n      end\r\n   end",
    "type": "statement:globalfunction"
  }, {
    "id": 62,
    "text": "for i,child in ipairs(t) do\r\n         if type(child) == \"string\" then\r\n            buffer = buffer..child\r\n         elseif type(child) == \"table\" then\r\n            local taginfo = self.allowed_tags[child.label]\r\n            if not taginfo then\r\n               buffer = buffer..self:get_replacement(child.label, \"not allowed\")\r\n            else\r\n               local test_result, why_not =  (taginfo._test or dummy_test)(child)\r\n               if not test_result then\r\n                  buffer = buffer..self:get_replacement(child.label, why_not)\r\n               else\r\n                  -- ok, let's put the tag in\r\n                  -- we might still strip some attributes, but silently\r\n                  buffer = buffer..\"<\"..child.label\r\n                  for attr, value in pairs(child.xarg) do\r\n                     local patterns = taginfo[attr] or self.generic_attributes[attr] or {}\r\n                     if find_match(value, patterns) then\r\n                        buffer = buffer..\" \"..attr..'=\"'..value:gsub('\"', \"&quot;\")..'\"'\r\n                     end\r\n                  end\r\n                  buffer = buffer..\">\"\r\n                  xml2string(child)\r\n                  buffer = buffer..\"</\"..child.label..\">\"\r\n               end\r\n            end\r\n         else\r\n            error(\"XSSFilter: Unexpected type of field in parsed XML\")\r\n         end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 63,
    "text": "if type(child) == \"string\" then\r\n            buffer = buffer..child\r\n         elseif type(child) == \"table\" then\r\n            local taginfo = self.allowed_tags[child.label]\r\n            if not taginfo then\r\n               buffer = buffer..self:get_replacement(child.label, \"not allowed\")\r\n            else\r\n               local test_result, why_not =  (taginfo._test or dummy_test)(child)\r\n               if not test_result then\r\n                  buffer = buffer..self:get_replacement(child.label, why_not)\r\n               else\r\n                  -- ok, let's put the tag in\r\n                  -- we might still strip some attributes, but silently\r\n                  buffer = buffer..\"<\"..child.label\r\n                  for attr, value in pairs(child.xarg) do\r\n                     local patterns = taginfo[attr] or self.generic_attributes[attr] or {}\r\n                     if find_match(value, patterns) then\r\n                        buffer = buffer..\" \"..attr..'=\"'..value:gsub('\"', \"&quot;\")..'\"'\r\n                     end\r\n                  end\r\n                  buffer = buffer..\">\"\r\n                  xml2string(child)\r\n                  buffer = buffer..\"</\"..child.label..\">\"\r\n               end\r\n            end\r\n         else\r\n            error(\"XSSFilter: Unexpected type of field in parsed XML\")\r\n         end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "buffer = buffer..child",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "local taginfo = self.allowed_tags[child.label]",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "if not taginfo then\r\n               buffer = buffer..self:get_replacement(child.label, \"not allowed\")\r\n            else\r\n               local test_result, why_not =  (taginfo._test or dummy_test)(child)\r\n               if not test_result then\r\n                  buffer = buffer..self:get_replacement(child.label, why_not)\r\n               else\r\n                  -- ok, let's put the tag in\r\n                  -- we might still strip some attributes, but silently\r\n                  buffer = buffer..\"<\"..child.label\r\n                  for attr, value in pairs(child.xarg) do\r\n                     local patterns = taginfo[attr] or self.generic_attributes[attr] or {}\r\n                     if find_match(value, patterns) then\r\n                        buffer = buffer..\" \"..attr..'=\"'..value:gsub('\"', \"&quot;\")..'\"'\r\n                     end\r\n                  end\r\n                  buffer = buffer..\">\"\r\n                  xml2string(child)\r\n                  buffer = buffer..\"</\"..child.label..\">\"\r\n               end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "buffer = buffer..self:get_replacement(child.label, \"not allowed\")",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "local test_result, why_not =  (taginfo._test or dummy_test)(child)",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "if not test_result then\r\n                  buffer = buffer..self:get_replacement(child.label, why_not)\r\n               else\r\n                  -- ok, let's put the tag in\r\n                  -- we might still strip some attributes, but silently\r\n                  buffer = buffer..\"<\"..child.label\r\n                  for attr, value in pairs(child.xarg) do\r\n                     local patterns = taginfo[attr] or self.generic_attributes[attr] or {}\r\n                     if find_match(value, patterns) then\r\n                        buffer = buffer..\" \"..attr..'=\"'..value:gsub('\"', \"&quot;\")..'\"'\r\n                     end\r\n                  end\r\n                  buffer = buffer..\">\"\r\n                  xml2string(child)\r\n                  buffer = buffer..\"</\"..child.label..\">\"\r\n               end",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "buffer = buffer..self:get_replacement(child.label, why_not)",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "buffer = buffer..\"<\"..child.label",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "for attr, value in pairs(child.xarg) do\r\n                     local patterns = taginfo[attr] or self.generic_attributes[attr] or {}\r\n                     if find_match(value, patterns) then\r\n                        buffer = buffer..\" \"..attr..'=\"'..value:gsub('\"', \"&quot;\")..'\"'\r\n                     end\r\n                  end",
    "type": "statement:genericfor"
  }, {
    "id": 73,
    "text": "local patterns = taginfo[attr] or self.generic_attributes[attr] or {}",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "if find_match(value, patterns) then\r\n                        buffer = buffer..\" \"..attr..'=\"'..value:gsub('\"', \"&quot;\")..'\"'\r\n                     end",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "buffer = buffer..\" \"..attr..'=\"'..value:gsub('\"', \"&quot;\")..'\"'",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "buffer = buffer..\">\"",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "xml2string(child)",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "buffer = buffer..\"</\"..child.label..\">\"",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "error(\"XSSFilter: Unexpected type of field in parsed XML\")",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "xml2string(parsed[2])",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "function xml2string(t)\r\n      for i,child in ipairs(t) do\r\n         if type(child) == \"string\" then\r\n            buffer = buffer..child\r\n         elseif type(child) == \"table\" then\r\n            local taginfo = self.allowed_tags[child.label]\r\n            if not taginfo then\r\n               buffer = buffer..self:get_replacement(child.label, \"not allowed\")\r\n            else\r\n               local test_result, why_not =  (taginfo._test or dummy_test)(child)\r\n               if not test_result then\r\n                  buffer = buffer..self:get_replacement(child.label, why_not)\r\n               else\r\n                  -- ok, let's put the tag in\r\n                  -- we might still strip some attributes, but silently\r\n                  buffer = buffer..\"<\"..child.label\r\n                  for attr, value in pairs(child.xarg) do\r\n                     local patterns = taginfo[attr] or self.generic_attributes[attr] or {}\r\n                     if find_match(value, patterns) then\r\n                        buffer = buffer..\" \"..attr..'=\"'..value:gsub('\"', \"&quot;\")..'\"'\r\n                     end\r\n                  end\r\n                  buffer = buffer..\">\"\r\n                  xml2string(child)\r\n                  buffer = buffer..\"</\"..child.label..\">\"\r\n               end\r\n            end\r\n         else\r\n            error(\"XSSFilter: Unexpected type of field in parsed XML\")\r\n         end\r\n      end\r\n   end",
    "type": "function"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "function XSSFilter:get_replacement(tag, message)\r\n   local buffer = \"<code>[HTML tag &lt;\"..tag..\"&gt; removed\"\r\n   if message then\r\n      buffer = buffer..\": \"..message\r\n   end\r\n   return buffer..\"]</code>\"\r\nend",
    "type": "function"
  }, {
    "id": 85,
    "text": "local buffer = \"<code>[HTML tag &lt;\"..tag..\"&gt; removed\"",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "if message then\r\n      buffer = buffer..\": \"..message\r\n   end",
    "type": "statement:if"
  }, {
    "id": 87,
    "text": "buffer = buffer..\": \"..message",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 89,
    "text": "local function test()\r\n   local xssf = new()\r\n\r\n   print(xssf:filter[[\r\n\r\n     This is just a <b>test</b>.  Really, no big <strong class='asdf(\"foo\")'>deal</strong>.\r\n     \r\n     <ul>\r\n      <li>ok?</li>\r\n     </ul>\r\n\r\n     And a little <script src=\"foo/bar\"> </script>.\r\n\r\n     <methodCall kind=\"xuxu\">\r\n      <methodName>examples.getStateName</methodName>\r\n      <params>\r\n         <param>\r\n            <value><i4>41</i4></value>\r\n            </param>\r\n         </params>\r\n      </methodCall>\r\n   ]])\r\nend",
    "type": "function"
  }, {
    "id": 90,
    "text": "local xssf = new()",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "print(xssf:filter[[\r\n\r\n     This is just a <b>test</b>.  Really, no big <strong class='asdf(\"foo\")'>deal</strong>.\r\n     \r\n     <ul>\r\n      <li>ok?</li>\r\n     </ul>\r\n\r\n     And a little <script src=\"foo/bar\"> </script>.\r\n\r\n     <methodCall kind=\"xuxu\">\r\n      <methodName>examples.getStateName</methodName>\r\n      <params>\r\n         <param>\r\n            <value><i4>41</i4></value>\r\n            </param>\r\n         </params>\r\n      </methodCall>\r\n   ]])",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 93,
    "text": "function(tag)\r\n         if not tag.xarg.style or not tag.xarg.style:find(\"url\") then\r\n            return true\r\n         else\r\n            return nil, \"'url' not allowed in the value of 'style'\"\r\n         end\r\n      end",
    "type": "function"
  }, {
    "id": 94,
    "text": "if not tag.xarg.style or not tag.xarg.style:find(\"url\") then\r\n            return true\r\n         else\r\n            return nil, \"'url' not allowed in the value of 'style'\"\r\n         end",
    "type": "statement:if"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "function(tag)\r\n         if tag.xarg.type==\"image/svg+xml\" then\r\n            return true\r\n         else\r\n            return false, \"only 'image/svg+xml' is allowed for 'type'\"\r\n         end\r\n      end",
    "type": "function"
  }, {
    "id": 97,
    "text": "if tag.xarg.type==\"image/svg+xml\" then\r\n            return true\r\n         else\r\n            return false, \"only 'image/svg+xml' is allowed for 'type'\"\r\n         end",
    "type": "statement:if"
  }, {
    "id": 98,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 99,
    "text": "function (w, _, a)\r\n         arg[w] = a\r\n         end",
    "type": "function"
  }, {
    "id": 100,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 101,
    "text": "",
    "type": "function container"
  }, {
    "id": 102,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 103,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 104,
    "text": "print",
    "type": "global function"
  }, {
    "id": 105,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 106,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 107,
    "text": "error",
    "type": "global function"
  }, {
    "id": 108,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 109,
    "text": "module",
    "type": "global function"
  }, {
    "id": 110,
    "text": "find",
    "type": "global function"
  }, {
    "id": 111,
    "text": "type",
    "type": "global function"
  }, {
    "id": 112,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 113,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 114,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 115,
    "text": "",
    "type": "variable container"
  }, {
    "id": 116,
    "text": "",
    "type": "require container"
  }, {
    "id": 117,
    "text": "",
    "type": "local variable"
  }, {
    "id": 118,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 119,
    "text": "",
    "type": "local variable"
  }, {
    "id": 120,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 121,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 122,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 123,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 124,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 125,
    "text": "",
    "type": "global variable"
  }, {
    "id": 126,
    "text": "",
    "type": "n/a"
  }, {
    "id": 127,
    "text": "",
    "type": "global variable"
  }, {
    "id": 128,
    "text": "",
    "type": "n/a"
  }, {
    "id": 129,
    "text": "",
    "type": "global variable"
  }, {
    "id": 130,
    "text": "",
    "type": "n/a"
  } ]
}