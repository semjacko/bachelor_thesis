{
  "_filename": "copas.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/copas/src/copas/copas.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 4
  }, {
    "from": 9,
    "label": "has",
    "to": 4
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 4
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 11,
    "label": "has",
    "to": 4
  }, {
    "from": 11,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 21,
    "label": "has",
    "to": 25
  }, {
    "from": 21,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 21,
    "label": "has",
    "to": 33
  }, {
    "from": 21,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 21,
    "label": "has",
    "to": 37
  }, {
    "from": 21,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 21,
    "label": "has",
    "to": 4
  }, {
    "from": 17,
    "label": "has",
    "to": 4
  }, {
    "from": 17,
    "label": "has",
    "to": 42
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 47,
    "label": "has",
    "to": 51
  }, {
    "from": 47,
    "label": "has",
    "to": 52
  }, {
    "from": 44,
    "label": "has",
    "to": 4
  }, {
    "from": 44,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 54,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 50
  }, {
    "from": 57,
    "label": "has",
    "to": 51
  }, {
    "from": 57,
    "label": "has",
    "to": 52
  }, {
    "from": 54,
    "label": "has",
    "to": 4
  }, {
    "from": 54,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 46
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 50
  }, {
    "from": 63,
    "label": "has",
    "to": 51
  }, {
    "from": 63,
    "label": "has",
    "to": 52
  }, {
    "from": 61,
    "label": "has",
    "to": 4
  }, {
    "from": 61,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 67,
    "label": "has",
    "to": 70
  }, {
    "from": 67,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 71,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 71,
    "label": "has",
    "to": 74
  }, {
    "from": 71,
    "label": "has",
    "to": 75
  }, {
    "from": 67,
    "label": "has",
    "to": 4
  }, {
    "from": 67,
    "label": "has",
    "to": 78
  }, {
    "from": 79,
    "label": "has",
    "to": 68
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 80,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 80,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 77
  }, {
    "from": 80,
    "label": "has",
    "to": 74
  }, {
    "from": 80,
    "label": "has",
    "to": 75
  }, {
    "from": 79,
    "label": "has",
    "to": 4
  }, {
    "from": 79,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 84,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 87,
    "label": "has",
    "to": 91
  }, {
    "from": 87,
    "label": "has",
    "to": 92
  }, {
    "from": 84,
    "label": "has",
    "to": 4
  }, {
    "from": 84,
    "label": "has",
    "to": 4
  }, {
    "from": 84,
    "label": "has",
    "to": 93
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 4
  }, {
    "from": 96,
    "label": "has",
    "to": 4
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 99,
    "label": "has",
    "to": 103
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 107,
    "label": "has",
    "to": 4
  }, {
    "from": 107,
    "label": "has",
    "to": 109
  }, {
    "from": 107,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 110,
    "label": "has",
    "to": 112
  }, {
    "from": 110,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 110,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 110,
    "label": "has",
    "to": 117
  }, {
    "from": 107,
    "label": "has",
    "to": 118
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 119,
    "label": "has",
    "to": 121
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 121,
    "label": "has",
    "to": 123
  }, {
    "from": 121,
    "label": "has",
    "to": 124
  }, {
    "from": 119,
    "label": "has",
    "to": 4
  }, {
    "from": 119,
    "label": "has",
    "to": 125
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 126,
    "label": "has",
    "to": 128
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 129,
    "label": "has",
    "to": 131
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 132,
    "label": "has",
    "to": 134
  }, {
    "from": 132,
    "label": "has",
    "to": 135
  }, {
    "from": 132,
    "label": "has",
    "to": 136
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 137,
    "label": "has",
    "to": 123
  }, {
    "from": 137,
    "label": "has",
    "to": 135
  }, {
    "from": 137,
    "label": "has",
    "to": 139
  }, {
    "from": 137,
    "label": "has",
    "to": 140
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 142,
    "label": "has",
    "to": 144
  }, {
    "from": 141,
    "label": "has",
    "to": 145
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 146,
    "label": "has",
    "to": 149
  }, {
    "from": 146,
    "label": "has",
    "to": 4
  }, {
    "from": 146,
    "label": "has",
    "to": 150
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 151,
    "label": "has",
    "to": 153
  }, {
    "from": 151,
    "label": "has",
    "to": 154
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 155,
    "label": "has",
    "to": 153
  }, {
    "from": 155,
    "label": "has",
    "to": 157
  }, {
    "from": 158,
    "label": "has",
    "to": 4
  }, {
    "from": 158,
    "label": "has",
    "to": 159
  }, {
    "from": 160,
    "label": "has",
    "to": 161
  }, {
    "from": 160,
    "label": "has",
    "to": 162
  }, {
    "from": 163,
    "label": "has",
    "to": 164
  }, {
    "from": 163,
    "label": "has",
    "to": 165
  }, {
    "from": 166,
    "label": "has",
    "to": 167
  }, {
    "from": 166,
    "label": "has",
    "to": 168
  }, {
    "from": 166,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 4
  }, {
    "from": 166,
    "label": "has",
    "to": 170
  }, {
    "from": 166,
    "label": "has",
    "to": 171
  }, {
    "from": 166,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 172,
    "label": "has",
    "to": 174
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 175,
    "label": "has",
    "to": 176
  }, {
    "from": 175,
    "label": "has",
    "to": 177
  }, {
    "from": 175,
    "label": "has",
    "to": 178
  }, {
    "from": 172,
    "label": "has",
    "to": 179
  }, {
    "from": 179,
    "label": "has",
    "to": 180
  }, {
    "from": 180,
    "label": "has",
    "to": 181
  }, {
    "from": 180,
    "label": "has",
    "to": 182
  }, {
    "from": 180,
    "label": "has",
    "to": 183
  }, {
    "from": 166,
    "label": "has",
    "to": 184
  }, {
    "from": 166,
    "label": "has",
    "to": 4
  }, {
    "from": 166,
    "label": "has",
    "to": 4
  }, {
    "from": 166,
    "label": "has",
    "to": 185
  }, {
    "from": 186,
    "label": "has",
    "to": 4
  }, {
    "from": 187,
    "label": "has",
    "to": 188
  }, {
    "from": 187,
    "label": "has",
    "to": 189
  }, {
    "from": 187,
    "label": "has",
    "to": 190
  }, {
    "from": 190,
    "label": "has",
    "to": 191
  }, {
    "from": 187,
    "label": "has",
    "to": 192
  }, {
    "from": 187,
    "label": "has",
    "to": 193
  }, {
    "from": 187,
    "label": "has",
    "to": 4
  }, {
    "from": 187,
    "label": "has",
    "to": 194
  }, {
    "from": 194,
    "label": "has",
    "to": 7
  }, {
    "from": 187,
    "label": "has",
    "to": 195
  }, {
    "from": 195,
    "label": "has",
    "to": 196
  }, {
    "from": 196,
    "label": "has",
    "to": 197
  }, {
    "from": 187,
    "label": "has",
    "to": 4
  }, {
    "from": 187,
    "label": "has",
    "to": 198
  }, {
    "from": 199,
    "label": "has",
    "to": 200
  }, {
    "from": 200,
    "label": "has",
    "to": 201
  }, {
    "from": 199,
    "label": "has",
    "to": 202
  }, {
    "from": 203,
    "label": "has",
    "to": 4
  }, {
    "from": 203,
    "label": "has",
    "to": 204
  }, {
    "from": 205,
    "label": "has",
    "to": 12
  }, {
    "from": 205,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 205,
    "label": "has",
    "to": 4
  }, {
    "from": 205,
    "label": "has",
    "to": 206
  }, {
    "from": 207,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 207,
    "label": "has",
    "to": 208
  }, {
    "from": 209,
    "label": "has",
    "to": 25
  }, {
    "from": 209,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 209,
    "label": "has",
    "to": 210
  }, {
    "from": 211,
    "label": "has",
    "to": 33
  }, {
    "from": 211,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 211,
    "label": "has",
    "to": 212
  }, {
    "from": 213,
    "label": "has",
    "to": 37
  }, {
    "from": 213,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 213,
    "label": "has",
    "to": 4
  }, {
    "from": 213,
    "label": "has",
    "to": 214
  }, {
    "from": 215,
    "label": "has",
    "to": 108
  }, {
    "from": 215,
    "label": "has",
    "to": 4
  }, {
    "from": 215,
    "label": "has",
    "to": 216
  }, {
    "from": 216,
    "label": "has",
    "to": 217
  }, {
    "from": 216,
    "label": "has",
    "to": 218
  }, {
    "from": 215,
    "label": "has",
    "to": 4
  }, {
    "from": 215,
    "label": "has",
    "to": 219
  }, {
    "from": 215,
    "label": "has",
    "to": 220
  }, {
    "from": 215,
    "label": "has",
    "to": 221
  }, {
    "from": 221,
    "label": "has",
    "to": 222
  }, {
    "from": 215,
    "label": "has",
    "to": 223
  }, {
    "from": 215,
    "label": "has",
    "to": 224
  }, {
    "from": 215,
    "label": "has",
    "to": 225
  }, {
    "from": 226,
    "label": "has",
    "to": 227
  }, {
    "from": 226,
    "label": "has",
    "to": 228
  }, {
    "from": 226,
    "label": "has",
    "to": 4
  }, {
    "from": 226,
    "label": "has",
    "to": 229
  }, {
    "from": 230,
    "label": "has",
    "to": 219
  }, {
    "from": 230,
    "label": "has",
    "to": 231
  }, {
    "from": 230,
    "label": "has",
    "to": 4
  }, {
    "from": 230,
    "label": "has",
    "to": 232
  }, {
    "from": 230,
    "label": "has",
    "to": 233
  }, {
    "from": 230,
    "label": "has",
    "to": 234
  }, {
    "from": 230,
    "label": "has",
    "to": 4
  }, {
    "from": 230,
    "label": "has",
    "to": 235
  }, {
    "from": 236,
    "label": "has",
    "to": 237
  }, {
    "from": 236,
    "label": "has",
    "to": 238
  }, {
    "from": 238,
    "label": "has",
    "to": 239
  }, {
    "from": 238,
    "label": "has",
    "to": 240
  }, {
    "from": 238,
    "label": "has",
    "to": 241
  }, {
    "from": 238,
    "label": "has",
    "to": 242
  }, {
    "from": 242,
    "label": "has",
    "to": 243
  }, {
    "from": 243,
    "label": "has",
    "to": 244
  }, {
    "from": 243,
    "label": "has",
    "to": 245
  }, {
    "from": 243,
    "label": "has",
    "to": 246
  }, {
    "from": 243,
    "label": "has",
    "to": 239
  }, {
    "from": 236,
    "label": "has",
    "to": 4
  }, {
    "from": 236,
    "label": "has",
    "to": 247
  }, {
    "from": 248,
    "label": "has",
    "to": 4
  }, {
    "from": 248,
    "label": "has",
    "to": 249
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 250,
    "label": "has",
    "to": 4
  }, {
    "from": 250,
    "label": "has",
    "to": 4
  }, {
    "from": 250,
    "label": "has",
    "to": 252
  }, {
    "from": 253,
    "label": "has",
    "to": 4
  }, {
    "from": 253,
    "label": "has",
    "to": 254
  }, {
    "from": 255,
    "label": "has",
    "to": 256
  }, {
    "from": 255,
    "label": "has",
    "to": 4
  }, {
    "from": 255,
    "label": "has",
    "to": 257
  }, {
    "from": 258,
    "label": "has",
    "to": 4
  }, {
    "from": 258,
    "label": "has",
    "to": 259
  }, {
    "from": 260,
    "label": "has",
    "to": 4
  }, {
    "from": 260,
    "label": "has",
    "to": 261
  }, {
    "from": 262,
    "label": "has",
    "to": 4
  }, {
    "from": 262,
    "label": "has",
    "to": 263
  }, {
    "from": 264,
    "label": "has",
    "to": 4
  }, {
    "from": 264,
    "label": "has",
    "to": 265
  }, {
    "from": 266,
    "label": "has",
    "to": 4
  }, {
    "from": 266,
    "label": "has",
    "to": 267
  }, {
    "from": 268,
    "label": "has",
    "to": 256
  }, {
    "from": 268,
    "label": "has",
    "to": 4
  }, {
    "from": 268,
    "label": "has",
    "to": 269
  }, {
    "from": 270,
    "label": "has",
    "to": 271
  }, {
    "from": 270,
    "label": "has",
    "to": 4
  }, {
    "from": 270,
    "label": "has",
    "to": 272
  }, {
    "from": 273,
    "label": "has",
    "to": 274
  }, {
    "from": 273,
    "label": "has",
    "to": 4
  }, {
    "from": 273,
    "label": "has",
    "to": 271
  }, {
    "from": 273,
    "label": "has",
    "to": 4
  }, {
    "from": 273,
    "label": "has",
    "to": 275
  }, {
    "from": 276,
    "label": "has",
    "to": 277
  }, {
    "from": 276,
    "label": "has",
    "to": 278
  }, {
    "from": 278,
    "label": "has",
    "to": 279
  }, {
    "from": 278,
    "label": "has",
    "to": 280
  }, {
    "from": 278,
    "label": "has",
    "to": 281
  }, {
    "from": 276,
    "label": "has",
    "to": 282
  }, {
    "from": 283,
    "label": "has",
    "to": 271
  }, {
    "from": 283,
    "label": "has",
    "to": 4
  }, {
    "from": 283,
    "label": "has",
    "to": 284
  }, {
    "from": 285,
    "label": "has",
    "to": 274
  }, {
    "from": 285,
    "label": "has",
    "to": 4
  }, {
    "from": 285,
    "label": "has",
    "to": 271
  }, {
    "from": 285,
    "label": "has",
    "to": 4
  }, {
    "from": 285,
    "label": "has",
    "to": 286
  }, {
    "from": 287,
    "label": "has",
    "to": 288
  }, {
    "from": 287,
    "label": "has",
    "to": 289
  }, {
    "from": 287,
    "label": "has",
    "to": 290
  }, {
    "from": 291,
    "label": "has",
    "to": 292
  }, {
    "from": 291,
    "label": "has",
    "to": 293
  }, {
    "from": 141,
    "label": "calls",
    "to": 132
  }, {
    "from": 119,
    "label": "calls",
    "to": 303
  }, {
    "from": 137,
    "label": "calls",
    "to": 303
  }, {
    "from": 146,
    "label": "calls",
    "to": 303
  }, {
    "from": 294,
    "label": "calls",
    "to": 17
  }, {
    "from": 294,
    "label": "calls",
    "to": 17
  }, {
    "from": 294,
    "label": "calls",
    "to": 17
  }, {
    "from": 107,
    "label": "calls",
    "to": 310
  }, {
    "from": 96,
    "label": "calls",
    "to": 306
  }, {
    "from": 141,
    "label": "calls",
    "to": 306
  }, {
    "from": 294,
    "label": "calls",
    "to": 307
  }, {
    "from": 187,
    "label": "calls",
    "to": 158
  }, {
    "from": 141,
    "label": "calls",
    "to": 137
  }, {
    "from": 9,
    "label": "calls",
    "to": 2
  }, {
    "from": 104,
    "label": "calls",
    "to": 318
  }, {
    "from": 199,
    "label": "calls",
    "to": 187
  }, {
    "from": 294,
    "label": "calls",
    "to": 155
  }, {
    "from": 187,
    "label": "calls",
    "to": 319
  }, {
    "from": 294,
    "label": "calls",
    "to": 54
  }, {
    "from": 9,
    "label": "calls",
    "to": 296
  }, {
    "from": 11,
    "label": "calls",
    "to": 296
  }, {
    "from": 107,
    "label": "calls",
    "to": 296
  }, {
    "from": 294,
    "label": "calls",
    "to": 151
  }, {
    "from": 166,
    "label": "calls",
    "to": 304
  }, {
    "from": 166,
    "label": "calls",
    "to": 304
  }, {
    "from": 67,
    "label": "calls",
    "to": 322
  }, {
    "from": 79,
    "label": "calls",
    "to": 322
  }, {
    "from": 294,
    "label": "calls",
    "to": 308
  }, {
    "from": 2,
    "label": "calls",
    "to": 308
  }, {
    "from": 11,
    "label": "calls",
    "to": 308
  }, {
    "from": 187,
    "label": "calls",
    "to": 308
  }, {
    "from": 119,
    "label": "calls",
    "to": 107
  }, {
    "from": 126,
    "label": "calls",
    "to": 107
  }, {
    "from": 129,
    "label": "calls",
    "to": 107
  }, {
    "from": 137,
    "label": "calls",
    "to": 107
  }, {
    "from": 146,
    "label": "calls",
    "to": 107
  }, {
    "from": 294,
    "label": "calls",
    "to": 107
  }, {
    "from": 44,
    "label": "calls",
    "to": 314
  }, {
    "from": 54,
    "label": "calls",
    "to": 314
  }, {
    "from": 61,
    "label": "calls",
    "to": 314
  }, {
    "from": 67,
    "label": "calls",
    "to": 314
  }, {
    "from": 67,
    "label": "calls",
    "to": 314
  }, {
    "from": 79,
    "label": "calls",
    "to": 314
  }, {
    "from": 79,
    "label": "calls",
    "to": 314
  }, {
    "from": 84,
    "label": "calls",
    "to": 314
  }, {
    "from": 160,
    "label": "calls",
    "to": 314
  }, {
    "from": 294,
    "label": "calls",
    "to": 79
  }, {
    "from": 96,
    "label": "calls",
    "to": 309
  }, {
    "from": 141,
    "label": "calls",
    "to": 309
  }, {
    "from": 294,
    "label": "calls",
    "to": 94
  }, {
    "from": 294,
    "label": "calls",
    "to": 94
  }, {
    "from": 294,
    "label": "calls",
    "to": 44
  }, {
    "from": 294,
    "label": "calls",
    "to": 44
  }, {
    "from": 294,
    "label": "calls",
    "to": 305
  }, {
    "from": 294,
    "label": "calls",
    "to": 305
  }, {
    "from": 166,
    "label": "calls",
    "to": 186
  }, {
    "from": 166,
    "label": "calls",
    "to": 186
  }, {
    "from": 166,
    "label": "calls",
    "to": 186
  }, {
    "from": 294,
    "label": "calls",
    "to": 67
  }, {
    "from": 294,
    "label": "calls",
    "to": 67
  }, {
    "from": 294,
    "label": "calls",
    "to": 311
  }, {
    "from": 294,
    "label": "calls",
    "to": 311
  }, {
    "from": 17,
    "label": "calls",
    "to": 312
  }, {
    "from": 294,
    "label": "calls",
    "to": 312
  }, {
    "from": 294,
    "label": "calls",
    "to": 312
  }, {
    "from": 294,
    "label": "calls",
    "to": 312
  }, {
    "from": 294,
    "label": "calls",
    "to": 312
  }, {
    "from": 166,
    "label": "calls",
    "to": 298
  }, {
    "from": 294,
    "label": "calls",
    "to": 119
  }, {
    "from": 294,
    "label": "calls",
    "to": 61
  }, {
    "from": 17,
    "label": "calls",
    "to": 316
  }, {
    "from": 96,
    "label": "calls",
    "to": 316
  }, {
    "from": 96,
    "label": "calls",
    "to": 316
  }, {
    "from": 11,
    "label": "calls",
    "to": 317
  }, {
    "from": 11,
    "label": "calls",
    "to": 317
  }, {
    "from": 187,
    "label": "calls",
    "to": 166
  }, {
    "from": 2,
    "label": "calls",
    "to": 315
  }, {
    "from": 61,
    "label": "calls",
    "to": 315
  }, {
    "from": 146,
    "label": "calls",
    "to": 315
  }, {
    "from": 294,
    "label": "calls",
    "to": 320
  }, {
    "from": 294,
    "label": "calls",
    "to": 320
  }, {
    "from": 99,
    "label": "calls",
    "to": 313
  }, {
    "from": 294,
    "label": "calls",
    "to": 321
  }, {
    "from": 294,
    "label": "calls",
    "to": 321
  }, {
    "from": 44,
    "label": "calls",
    "to": 321
  }, {
    "from": 54,
    "label": "calls",
    "to": 321
  }, {
    "from": 61,
    "label": "calls",
    "to": 321
  }, {
    "from": 67,
    "label": "calls",
    "to": 321
  }, {
    "from": 67,
    "label": "calls",
    "to": 321
  }, {
    "from": 79,
    "label": "calls",
    "to": 321
  }, {
    "from": 79,
    "label": "calls",
    "to": 321
  }, {
    "from": 84,
    "label": "calls",
    "to": 321
  }, {
    "from": 166,
    "label": "calls",
    "to": 321
  }, {
    "from": 187,
    "label": "calls",
    "to": 321
  }, {
    "from": 1,
    "label": "contains",
    "to": 294
  }, {
    "from": 294,
    "label": "declares",
    "to": 2
  }, {
    "from": 294,
    "label": "declares",
    "to": 9
  }, {
    "from": 294,
    "label": "declares",
    "to": 11
  }, {
    "from": 294,
    "label": "declares",
    "to": 17
  }, {
    "from": 294,
    "label": "declares",
    "to": 43
  }, {
    "from": 294,
    "label": "declares",
    "to": 44
  }, {
    "from": 294,
    "label": "declares",
    "to": 54
  }, {
    "from": 294,
    "label": "declares",
    "to": 61
  }, {
    "from": 294,
    "label": "declares",
    "to": 67
  }, {
    "from": 294,
    "label": "declares",
    "to": 79
  }, {
    "from": 294,
    "label": "declares",
    "to": 84
  }, {
    "from": 294,
    "label": "declares",
    "to": 94
  }, {
    "from": 294,
    "label": "declares",
    "to": 96
  }, {
    "from": 294,
    "label": "declares",
    "to": 99
  }, {
    "from": 294,
    "label": "declares",
    "to": 104
  }, {
    "from": 294,
    "label": "declares",
    "to": 107
  }, {
    "from": 294,
    "label": "declares",
    "to": 119
  }, {
    "from": 294,
    "label": "declares",
    "to": 126
  }, {
    "from": 294,
    "label": "declares",
    "to": 129
  }, {
    "from": 294,
    "label": "declares",
    "to": 132
  }, {
    "from": 294,
    "label": "declares",
    "to": 137
  }, {
    "from": 294,
    "label": "declares",
    "to": 141
  }, {
    "from": 294,
    "label": "declares",
    "to": 146
  }, {
    "from": 294,
    "label": "declares",
    "to": 151
  }, {
    "from": 294,
    "label": "declares",
    "to": 155
  }, {
    "from": 294,
    "label": "declares",
    "to": 158
  }, {
    "from": 294,
    "label": "declares",
    "to": 160
  }, {
    "from": 294,
    "label": "declares",
    "to": 163
  }, {
    "from": 294,
    "label": "declares",
    "to": 166
  }, {
    "from": 294,
    "label": "declares",
    "to": 186
  }, {
    "from": 294,
    "label": "declares",
    "to": 187
  }, {
    "from": 294,
    "label": "declares",
    "to": 199
  }, {
    "from": 294,
    "label": "declares",
    "to": 203
  }, {
    "from": 294,
    "label": "declares",
    "to": 205
  }, {
    "from": 294,
    "label": "declares",
    "to": 207
  }, {
    "from": 294,
    "label": "declares",
    "to": 209
  }, {
    "from": 294,
    "label": "declares",
    "to": 211
  }, {
    "from": 294,
    "label": "declares",
    "to": 213
  }, {
    "from": 294,
    "label": "declares",
    "to": 215
  }, {
    "from": 294,
    "label": "declares",
    "to": 226
  }, {
    "from": 294,
    "label": "declares",
    "to": 230
  }, {
    "from": 294,
    "label": "declares",
    "to": 236
  }, {
    "from": 294,
    "label": "declares",
    "to": 248
  }, {
    "from": 294,
    "label": "declares",
    "to": 250
  }, {
    "from": 294,
    "label": "declares",
    "to": 253
  }, {
    "from": 294,
    "label": "declares",
    "to": 255
  }, {
    "from": 294,
    "label": "declares",
    "to": 258
  }, {
    "from": 294,
    "label": "declares",
    "to": 260
  }, {
    "from": 294,
    "label": "declares",
    "to": 262
  }, {
    "from": 294,
    "label": "declares",
    "to": 264
  }, {
    "from": 294,
    "label": "declares",
    "to": 266
  }, {
    "from": 294,
    "label": "declares",
    "to": 268
  }, {
    "from": 294,
    "label": "declares",
    "to": 270
  }, {
    "from": 294,
    "label": "declares",
    "to": 273
  }, {
    "from": 294,
    "label": "declares",
    "to": 276
  }, {
    "from": 294,
    "label": "declares",
    "to": 283
  }, {
    "from": 294,
    "label": "declares",
    "to": 285
  }, {
    "from": 294,
    "label": "declares",
    "to": 287
  }, {
    "from": 294,
    "label": "declares",
    "to": 291
  }, {
    "from": 1,
    "label": "declares",
    "to": 299
  }, {
    "from": 1,
    "label": "declares",
    "to": 300
  }, {
    "from": 1,
    "label": "declares",
    "to": 301
  }, {
    "from": 1,
    "label": "declares",
    "to": 302
  }, {
    "from": 1,
    "label": "contains",
    "to": 323
  }, {
    "from": 1,
    "label": "contains",
    "to": 324
  }, {
    "from": 323,
    "label": "initializes",
    "to": 325
  }, {
    "from": 325,
    "label": "assigns",
    "to": 326
  }, {
    "from": 323,
    "label": "initializes",
    "to": 327
  }, {
    "from": 327,
    "label": "assigns",
    "to": 328
  }, {
    "from": 323,
    "label": "initializes",
    "to": 329
  }, {
    "from": 329,
    "label": "assigns",
    "to": 330
  }, {
    "from": 323,
    "label": "initializes",
    "to": 331
  }, {
    "from": 331,
    "label": "assigns",
    "to": 332
  }, {
    "from": 323,
    "label": "initializes",
    "to": 333
  }, {
    "from": 333,
    "label": "assigns",
    "to": 334
  }, {
    "from": 323,
    "label": "initializes",
    "to": 335
  }, {
    "from": 335,
    "label": "assigns",
    "to": 336
  }, {
    "from": 336,
    "label": "assigns",
    "to": 337
  }, {
    "from": 337,
    "label": "assigns",
    "to": 338
  }, {
    "from": 336,
    "label": "assigns",
    "to": 339
  }, {
    "from": 339,
    "label": "assigns",
    "to": 340
  }, {
    "from": 336,
    "label": "assigns",
    "to": 341
  }, {
    "from": 341,
    "label": "assigns",
    "to": 342
  }, {
    "from": 336,
    "label": "assigns",
    "to": 343
  }, {
    "from": 343,
    "label": "assigns",
    "to": 344
  }, {
    "from": 336,
    "label": "assigns",
    "to": 345
  }, {
    "from": 345,
    "label": "assigns",
    "to": 346
  }, {
    "from": 336,
    "label": "assigns",
    "to": 347
  }, {
    "from": 347,
    "label": "assigns",
    "to": 348
  }, {
    "from": 336,
    "label": "assigns",
    "to": 349
  }, {
    "from": 349,
    "label": "assigns",
    "to": 350
  }, {
    "from": 336,
    "label": "assigns",
    "to": 351
  }, {
    "from": 351,
    "label": "assigns",
    "to": 352
  }, {
    "from": 336,
    "label": "assigns",
    "to": 353
  }, {
    "from": 353,
    "label": "assigns",
    "to": 354
  }, {
    "from": 323,
    "label": "initializes",
    "to": 355
  }, {
    "from": 355,
    "label": "assigns",
    "to": 356
  }, {
    "from": 323,
    "label": "initializes",
    "to": 357
  }, {
    "from": 357,
    "label": "assigns",
    "to": 358
  }, {
    "from": 323,
    "label": "initializes",
    "to": 359
  }, {
    "from": 359,
    "label": "assigns",
    "to": 360
  }, {
    "from": 323,
    "label": "initializes",
    "to": 361
  }, {
    "from": 361,
    "label": "assigns",
    "to": 362
  }, {
    "from": 323,
    "label": "initializes",
    "to": 363
  }, {
    "from": 363,
    "label": "assigns",
    "to": 364
  }, {
    "from": 323,
    "label": "initializes",
    "to": 365
  }, {
    "from": 365,
    "label": "assigns",
    "to": 366
  }, {
    "from": 366,
    "label": "assigns",
    "to": 367
  }, {
    "from": 367,
    "label": "assigns",
    "to": 368
  }, {
    "from": 323,
    "label": "initializes",
    "to": 369
  }, {
    "from": 369,
    "label": "assigns",
    "to": 370
  }, {
    "from": 370,
    "label": "assigns",
    "to": 371
  }, {
    "from": 371,
    "label": "assigns",
    "to": 372
  }, {
    "from": 323,
    "label": "initializes",
    "to": 373
  }, {
    "from": 373,
    "label": "assigns",
    "to": 374
  }, {
    "from": 323,
    "label": "initializes",
    "to": 375
  }, {
    "from": 375,
    "label": "assigns",
    "to": 376
  }, {
    "from": 323,
    "label": "initializes",
    "to": 377
  }, {
    "from": 377,
    "label": "assigns",
    "to": 378
  }, {
    "from": 378,
    "label": "assigns",
    "to": 379
  }, {
    "from": 379,
    "label": "assigns",
    "to": 380
  }, {
    "from": 378,
    "label": "assigns",
    "to": 381
  }, {
    "from": 381,
    "label": "assigns",
    "to": 382
  }, {
    "from": 323,
    "label": "initializes",
    "to": 383
  }, {
    "from": 383,
    "label": "assigns",
    "to": 384
  }, {
    "from": 384,
    "label": "assigns",
    "to": 385
  }, {
    "from": 385,
    "label": "assigns",
    "to": 386
  }, {
    "from": 384,
    "label": "assigns",
    "to": 387
  }, {
    "from": 387,
    "label": "assigns",
    "to": 388
  }, {
    "from": 323,
    "label": "initializes",
    "to": 389
  }, {
    "from": 389,
    "label": "assigns",
    "to": 390
  }, {
    "from": 390,
    "label": "assigns",
    "to": 391
  }, {
    "from": 391,
    "label": "assigns",
    "to": 392
  }, {
    "from": 323,
    "label": "initializes",
    "to": 393
  }, {
    "from": 393,
    "label": "assigns",
    "to": 394
  }, {
    "from": 323,
    "label": "initializes",
    "to": 395
  }, {
    "from": 323,
    "label": "initializes",
    "to": 396
  }, {
    "from": 323,
    "label": "initializes",
    "to": 397
  }, {
    "from": 323,
    "label": "initializes",
    "to": 398
  }, {
    "from": 324,
    "label": "initializes",
    "to": 399
  }, {
    "from": 399,
    "label": "requires",
    "to": 297
  }, {
    "from": 324,
    "label": "initializes",
    "to": 400
  }, {
    "from": 400,
    "label": "requires",
    "to": 295
  }, {
    "from": 1,
    "label": "provides",
    "to": 401
  }, {
    "from": 331,
    "label": "represents",
    "to": 402
  }, {
    "from": 401,
    "label": "provides",
    "to": 402
  }, {
    "from": 403,
    "label": "requires",
    "to": 1
  }, {
    "from": 404,
    "label": "requires",
    "to": 1
  }, {
    "from": 331,
    "label": "contains",
    "to": 44
  }, {
    "from": 331,
    "label": "contains",
    "to": 54
  }, {
    "from": 331,
    "label": "contains",
    "to": 61
  }, {
    "from": 331,
    "label": "contains",
    "to": 67
  }, {
    "from": 331,
    "label": "contains",
    "to": 79
  }, {
    "from": 331,
    "label": "contains",
    "to": 84
  }, {
    "from": 331,
    "label": "contains",
    "to": 94
  }, {
    "from": 331,
    "label": "contains",
    "to": 96
  }, {
    "from": 331,
    "label": "contains",
    "to": 99
  }, {
    "from": 331,
    "label": "contains",
    "to": 141
  }, {
    "from": 331,
    "label": "contains",
    "to": 146
  }, {
    "from": 331,
    "label": "contains",
    "to": 160
  }, {
    "from": 331,
    "label": "contains",
    "to": 163
  }, {
    "from": 331,
    "label": "contains",
    "to": 187
  }, {
    "from": 331,
    "label": "contains",
    "to": 199
  }, {
    "from": 7,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 7,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 7,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 7,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 7,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 7,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 7,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 7,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 7,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 14,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 14,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 14,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 14,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 14,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 14,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 14,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 14,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 14,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 15,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 15,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 15,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 15,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 15,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 15,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 15,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 15,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 15,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 21,
    "label": "hasArgument",
    "to": 207
  }, {
    "from": 21,
    "label": "hasArgument",
    "to": 209
  }, {
    "from": 21,
    "label": "hasArgument",
    "to": 211
  }, {
    "from": 21,
    "label": "hasArgument",
    "to": 213
  }, {
    "from": 21,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 21,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 21,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 21,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 21,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 21,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 21,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 21,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 21,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 52,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 52,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 52,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 52,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 52,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 52,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 52,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 52,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 52,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 75,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 75,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 75,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 75,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 75,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 75,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 75,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 75,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 75,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 85,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 85,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 85,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 85,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 85,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 85,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 85,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 85,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 85,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 92,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 92,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 92,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 92,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 92,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 92,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 92,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 92,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 92,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 105,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 105,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 105,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 105,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 105,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 105,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 105,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 105,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 105,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 111,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 111,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 111,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 111,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 111,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 111,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 111,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 111,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 111,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 112,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 112,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 112,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 112,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 112,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 112,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 112,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 112,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 112,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 114,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 114,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 114,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 114,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 114,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 114,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 114,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 114,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 114,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 116,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 116,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 116,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 116,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 116,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 116,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 116,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 116,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 116,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 122,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 122,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 122,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 122,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 122,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 122,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 122,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 122,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 122,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 124,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 124,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 124,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 124,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 124,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 124,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 124,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 124,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 124,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 127,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 127,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 127,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 127,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 127,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 127,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 127,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 127,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 127,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 130,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 130,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 130,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 130,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 130,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 130,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 130,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 130,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 130,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 133,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 133,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 133,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 133,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 133,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 133,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 133,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 133,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 133,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 135,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 135,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 135,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 135,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 135,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 135,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 135,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 135,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 135,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 138,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 138,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 138,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 138,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 138,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 138,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 138,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 138,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 138,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 139,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 139,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 139,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 139,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 139,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 139,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 139,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 139,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 139,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 143,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 143,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 143,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 143,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 143,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 143,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 143,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 143,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 143,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 144,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 144,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 144,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 144,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 144,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 144,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 144,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 144,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 144,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 149,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 149,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 149,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 149,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 149,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 149,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 149,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 149,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 149,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 161,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 161,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 161,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 161,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 161,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 161,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 161,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 161,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 161,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 164,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 164,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 164,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 164,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 164,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 164,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 164,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 164,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 164,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 188,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 188,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 188,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 188,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 188,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 188,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 188,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 188,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 188,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 197,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 197,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 197,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 197,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 197,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 197,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 197,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 197,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 197,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 201,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 201,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 201,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 201,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 201,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 201,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 201,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 201,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 201,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 223,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 223,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 223,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 223,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 223,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 223,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 223,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 223,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 223,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 224,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 224,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 224,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 224,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 224,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 224,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 224,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 224,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 224,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 233,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 233,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 233,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 233,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 233,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 233,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 233,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 233,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 233,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 234,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 234,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 234,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 234,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 234,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 234,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 234,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 234,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 234,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 239,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 239,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 239,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 239,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 239,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 239,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 239,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 239,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 239,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 244,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 244,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 244,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 244,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 244,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 244,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 244,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 244,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 244,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 246,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 246,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 246,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 246,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 246,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 246,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 246,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 246,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 246,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 280,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 280,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 280,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 280,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 280,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 280,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 280,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 280,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 280,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 281,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 281,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 281,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 281,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 281,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 281,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 281,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 281,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 281,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 288,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 288,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 288,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 288,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 288,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 288,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 288,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 288,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 288,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 289,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 289,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 289,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 289,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 289,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 289,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 289,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 289,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 289,
    "label": "hasArgument",
    "to": 392
  }, {
    "from": 292,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 292,
    "label": "hasArgument",
    "to": 350
  }, {
    "from": 292,
    "label": "hasArgument",
    "to": 352
  }, {
    "from": 292,
    "label": "hasArgument",
    "to": 354
  }, {
    "from": 292,
    "label": "hasArgument",
    "to": 380
  }, {
    "from": 292,
    "label": "hasArgument",
    "to": 382
  }, {
    "from": 292,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 292,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 292,
    "label": "hasArgument",
    "to": 392
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "copas",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function statusHandler(status, ...)\r\n  if status then return ... end\r\n  local err = (...)\r\n  if type(err) == \"table\" then\r\n    return nil, err[1]\r\n  else\r\n    error(err)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "if status then return ... end",
    "type": "statement:if"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "local err = (...)",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "if type(err) == \"table\" then\r\n    return nil, err[1]\r\n  else\r\n    error(err)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "error(err)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function socket.protect(func)\r\n  return function (...)\r\n           return statusHandler(coxpcall.pcall(func, ...))\r\n         end\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function socket.newtry(finalizer)\r\n  return function (...)\r\n           local status = (...)\r\n           if not status then\r\n             coxpcall.pcall(finalizer, select(2, ...))\r\n             error({ (select(2, ...)) }, 0)\r\n           end\r\n           return ...\r\n         end\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "local status = (...)",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "if not status then\r\n             coxpcall.pcall(finalizer, select(2, ...))\r\n             error({ (select(2, ...)) }, 0)\r\n           end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "coxpcall.pcall(finalizer, select(2, ...))",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "error({ (select(2, ...)) }, 0)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "local function newset()\r\n  local reverse = {}\r\n  local set = {}\r\n  local q = {}\r\n  setmetatable(set, { __index = {\r\n                        insert = function(set, value)\r\n                                   if not reverse[value] then\r\n                                     set[#set + 1] = value\r\n                                     reverse[value] = #set\r\n                                   end\r\n                                 end,\r\n\r\n                        remove = function(set, value)\r\n                                   local index = reverse[value]\r\n                                   if index then\r\n                                     reverse[value] = nil\r\n                                     local top = set[#set]\r\n                                     set[#set] = nil\r\n                                     if top ~= value then\r\n                                       reverse[top] = index\r\n                                       set[index] = top\r\n                                     end\r\n                                   end\r\n                                 end,\r\n\r\n                        push = function (set, key, itm)\r\n                                 local qKey = q[key]\r\n                                 if qKey == nil then\r\n                                   q[key] = {itm}\r\n                                 else\r\n                                   qKey[#qKey + 1] = itm\r\n                                 end\r\n                               end,\r\n\r\n                        pop = function (set, key)\r\n                                local t = q[key]\r\n                                if t ~= nil then\r\n                                  local ret = table.remove (t, 1)\r\n                                  if t[1] == nil then\r\n                                    q[key] = nil\r\n                                  end\r\n                                  return ret\r\n                                end\r\n                              end\r\n                    }})\r\n  return set\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "local reverse = {}",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "local set = {}",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "local q = {}",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "setmetatable(set, { __index = {\r\n                        insert = function(set, value)\r\n                                   if not reverse[value] then\r\n                                     set[#set + 1] = value\r\n                                     reverse[value] = #set\r\n                                   end\r\n                                 end,\r\n\r\n                        remove = function(set, value)\r\n                                   local index = reverse[value]\r\n                                   if index then\r\n                                     reverse[value] = nil\r\n                                     local top = set[#set]\r\n                                     set[#set] = nil\r\n                                     if top ~= value then\r\n                                       reverse[top] = index\r\n                                       set[index] = top\r\n                                     end\r\n                                   end\r\n                                 end,\r\n\r\n                        push = function (set, key, itm)\r\n                                 local qKey = q[key]\r\n                                 if qKey == nil then\r\n                                   q[key] = {itm}\r\n                                 else\r\n                                   qKey[#qKey + 1] = itm\r\n                                 end\r\n                               end,\r\n\r\n                        pop = function (set, key)\r\n                                local t = q[key]\r\n                                if t ~= nil then\r\n                                  local ret = table.remove (t, 1)\r\n                                  if t[1] == nil then\r\n                                    q[key] = nil\r\n                                  end\r\n                                  return ret\r\n                                end\r\n                              end\r\n                    }})",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "if not reverse[value] then\r\n                                     set[#set + 1] = value\r\n                                     reverse[value] = #set\r\n                                   end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "set[#set + 1] = value",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "reverse[value] = #set",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "local index = reverse[value]",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "if index then\r\n                                     reverse[value] = nil\r\n                                     local top = set[#set]\r\n                                     set[#set] = nil\r\n                                     if top ~= value then\r\n                                       reverse[top] = index\r\n                                       set[index] = top\r\n                                     end\r\n                                   end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "reverse[value] = nil",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "local top = set[#set]",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "set[#set] = nil",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "if top ~= value then\r\n                                       reverse[top] = index\r\n                                       set[index] = top\r\n                                     end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "reverse[top] = index",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "set[index] = top",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "local qKey = q[key]",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "if qKey == nil then\r\n                                   q[key] = {itm}\r\n                                 else\r\n                                   qKey[#qKey + 1] = itm\r\n                                 end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "q[key] = {itm}",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "qKey[#qKey + 1] = itm",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "local t = q[key]",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "if t ~= nil then\r\n                                  local ret = table.remove (t, 1)\r\n                                  if t[1] == nil then\r\n                                    q[key] = nil\r\n                                  end\r\n                                  return ret\r\n                                end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "local ret = table.remove (t, 1)",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "if t[1] == nil then\r\n                                    q[key] = nil\r\n                                  end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "q[key] = nil",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function()end",
    "type": "function"
  }, {
    "id": 44,
    "text": "function copas.receive(client, pattern, part)\r\n  local s, err\r\n  pattern = pattern or \"*l\"\r\n  repeat\r\n    s, err, part = client:receive(pattern, part)\r\n    if s or err ~= \"timeout\" then\r\n      _reading_log[client] = nil\r\n      return s, err, part\r\n    end\r\n    _reading_log[client] = gettime()\r\n    coroutine.yield(client, _reading)\r\n  until false\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "local s, err",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "pattern = pattern or \"*l\"",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "repeat\r\n    s, err, part = client:receive(pattern, part)\r\n    if s or err ~= \"timeout\" then\r\n      _reading_log[client] = nil\r\n      return s, err, part\r\n    end\r\n    _reading_log[client] = gettime()\r\n    coroutine.yield(client, _reading)\r\n  until false",
    "type": "statement:repeat"
  }, {
    "id": 48,
    "text": "s, err, part = client:receive(pattern, part)",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "if s or err ~= \"timeout\" then\r\n      _reading_log[client] = nil\r\n      return s, err, part\r\n    end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "_reading_log[client] = nil",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "_reading_log[client] = gettime()",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "coroutine.yield(client, _reading)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "function copas.receivefrom(client, size)\r\n  local s, err, port\r\n  size = size or UDP_DATAGRAM_MAX\r\n  repeat\r\n    s, err, port = client:receivefrom(size) -- upon success err holds ip address\r\n    if s or err ~= \"timeout\" then\r\n      _reading_log[client] = nil\r\n      return s, err, port\r\n    end\r\n    _reading_log[client] = gettime()\r\n    coroutine.yield(client, _reading)\r\n  until false\r\nend",
    "type": "function"
  }, {
    "id": 55,
    "text": "local s, err, port",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "size = size or UDP_DATAGRAM_MAX",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "repeat\r\n    s, err, port = client:receivefrom(size) -- upon success err holds ip address\r\n    if s or err ~= \"timeout\" then\r\n      _reading_log[client] = nil\r\n      return s, err, port\r\n    end\r\n    _reading_log[client] = gettime()\r\n    coroutine.yield(client, _reading)\r\n  until false",
    "type": "statement:repeat"
  }, {
    "id": 58,
    "text": "s, err, port = client:receivefrom(size)",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "if s or err ~= \"timeout\" then\r\n      _reading_log[client] = nil\r\n      return s, err, port\r\n    end",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function copas.receivePartial(client, pattern)\r\n  local s, err, part\r\n  pattern = pattern or \"*l\"\r\n  repeat\r\n    s, err, part = client:receive(pattern)\r\n    if s or ( (type(pattern)==\"number\") and part~=\"\" and part ~=nil ) or\r\n      err ~= \"timeout\" then\r\n      _reading_log[client] = nil\r\n      return s, err, part\r\n    end\r\n    _reading_log[client] = gettime()\r\n    coroutine.yield(client, _reading)\r\n  until false\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "local s, err, part",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "repeat\r\n    s, err, part = client:receive(pattern)\r\n    if s or ( (type(pattern)==\"number\") and part~=\"\" and part ~=nil ) or\r\n      err ~= \"timeout\" then\r\n      _reading_log[client] = nil\r\n      return s, err, part\r\n    end\r\n    _reading_log[client] = gettime()\r\n    coroutine.yield(client, _reading)\r\n  until false",
    "type": "statement:repeat"
  }, {
    "id": 64,
    "text": "s, err, part = client:receive(pattern)",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "if s or ( (type(pattern)==\"number\") and part~=\"\" and part ~=nil ) or\r\n      err ~= \"timeout\" then\r\n      _reading_log[client] = nil\r\n      return s, err, part\r\n    end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "function copas.send(client, data, from, to)\r\n  local s, err,sent\r\n  from = from or 1\r\n  local lastIndex = from - 1\r\n\r\n  repeat\r\n    s, err, lastIndex = client:send(data, lastIndex + 1, to)\r\n    -- adds extra corrotine swap\r\n    -- garantees that high throuput dont take other threads to starvation\r\n    if (math.random(100) > 90) then\r\n      _writing_log[client] = gettime()\r\n      coroutine.yield(client, _writing)\r\n    end\r\n    if s or err ~= \"timeout\" then\r\n      _writing_log[client] = nil\r\n      return s, err,lastIndex\r\n    end\r\n    _writing_log[client] = gettime()\r\n    coroutine.yield(client, _writing)\r\n  until false\r\nend",
    "type": "function"
  }, {
    "id": 68,
    "text": "local s, err,sent",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "from = from or 1",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "local lastIndex = from - 1",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "repeat\r\n    s, err, lastIndex = client:send(data, lastIndex + 1, to)\r\n    -- adds extra corrotine swap\r\n    -- garantees that high throuput dont take other threads to starvation\r\n    if (math.random(100) > 90) then\r\n      _writing_log[client] = gettime()\r\n      coroutine.yield(client, _writing)\r\n    end\r\n    if s or err ~= \"timeout\" then\r\n      _writing_log[client] = nil\r\n      return s, err,lastIndex\r\n    end\r\n    _writing_log[client] = gettime()\r\n    coroutine.yield(client, _writing)\r\n  until false",
    "type": "statement:repeat"
  }, {
    "id": 72,
    "text": "s, err, lastIndex = client:send(data, lastIndex + 1, to)",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "if (math.random(100) > 90) then\r\n      _writing_log[client] = gettime()\r\n      coroutine.yield(client, _writing)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "_writing_log[client] = gettime()",
    "type": "statement:assign"
  }, {
    "id": 75,
    "text": "coroutine.yield(client, _writing)",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "if s or err ~= \"timeout\" then\r\n      _writing_log[client] = nil\r\n      return s, err,lastIndex\r\n    end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "_writing_log[client] = nil",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "function copas.sendto(client, data, ip, port)\r\n  local s, err,sent\r\n\r\n  repeat\r\n    s, err = client:sendto(data, ip, port)\r\n    -- adds extra corrotine swap\r\n    -- garantees that high throuput dont take other threads to starvation\r\n    if (math.random(100) > 90) then\r\n      _writing_log[client] = gettime()\r\n      coroutine.yield(client, _writing)\r\n    end\r\n    if s or err ~= \"timeout\" then\r\n      _writing_log[client] = nil\r\n      return s, err\r\n    end\r\n    _writing_log[client] = gettime()\r\n    coroutine.yield(client, _writing)\r\n  until false\r\nend",
    "type": "function"
  }, {
    "id": 80,
    "text": "repeat\r\n    s, err = client:sendto(data, ip, port)\r\n    -- adds extra corrotine swap\r\n    -- garantees that high throuput dont take other threads to starvation\r\n    if (math.random(100) > 90) then\r\n      _writing_log[client] = gettime()\r\n      coroutine.yield(client, _writing)\r\n    end\r\n    if s or err ~= \"timeout\" then\r\n      _writing_log[client] = nil\r\n      return s, err\r\n    end\r\n    _writing_log[client] = gettime()\r\n    coroutine.yield(client, _writing)\r\n  until false",
    "type": "statement:repeat"
  }, {
    "id": 81,
    "text": "s, err = client:sendto(data, ip, port)",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "if s or err ~= \"timeout\" then\r\n      _writing_log[client] = nil\r\n      return s, err\r\n    end",
    "type": "statement:if"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "function copas.connect(skt, host, port)\r\n  skt:settimeout(0)\r\n  local ret, err\r\n  repeat\r\n    ret, err = skt:connect (host, port)\r\n    if ret or err ~= \"timeout\" then\r\n      _writing_log[skt] = nil\r\n      return ret, err\r\n    end\r\n    _writing_log[skt] = gettime()\r\n    coroutine.yield(skt, _writing)\r\n  until false\r\n  return ret, err\r\nend",
    "type": "function"
  }, {
    "id": 85,
    "text": "skt:settimeout(0)",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "local ret, err",
    "type": "statement:localassign"
  }, {
    "id": 87,
    "text": "repeat\r\n    ret, err = skt:connect (host, port)\r\n    if ret or err ~= \"timeout\" then\r\n      _writing_log[skt] = nil\r\n      return ret, err\r\n    end\r\n    _writing_log[skt] = gettime()\r\n    coroutine.yield(skt, _writing)\r\n  until false",
    "type": "statement:repeat"
  }, {
    "id": 88,
    "text": "ret, err = skt:connect (host, port)",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "if ret or err ~= \"timeout\" then\r\n      _writing_log[skt] = nil\r\n      return ret, err\r\n    end",
    "type": "statement:if"
  }, {
    "id": 90,
    "text": "_writing_log[skt] = nil",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "_writing_log[skt] = gettime()",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "coroutine.yield(skt, _writing)",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 94,
    "text": "function copas.flush(client)\r\nend",
    "type": "function"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "function copas.wrap (skt)\r\n  if string.sub(tostring(skt),1,3) == \"udp\" then\r\n    return  setmetatable ({socket = skt}, _skt_mt_udp)\r\n  else\r\n    return  setmetatable ({socket = skt}, _skt_mt)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 97,
    "text": "if string.sub(tostring(skt),1,3) == \"udp\" then\r\n    return  setmetatable ({socket = skt}, _skt_mt_udp)\r\n  else\r\n    return  setmetatable ({socket = skt}, _skt_mt)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 98,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 99,
    "text": "function copas.setErrorHandler (err)\r\n  local co = coroutine.running()\r\n  if co then\r\n    _errhandlers [co] = err\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 100,
    "text": "local co = coroutine.running()",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "if co then\r\n    _errhandlers [co] = err\r\n  end",
    "type": "statement:if"
  }, {
    "id": 102,
    "text": "_errhandlers [co] = err",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 104,
    "text": "local function _deferror (msg, co, skt)\r\n  print (msg, co, skt)\r\nend",
    "type": "function"
  }, {
    "id": 105,
    "text": "print (msg, co, skt)",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 107,
    "text": "local function _doTick (co, skt, ...)\r\n  if not co then return end\r\n\r\n  local ok, res, new_q = coroutine.resume(co, skt, ...)\r\n\r\n  if ok and res and new_q then\r\n    new_q:insert (res)\r\n    new_q:push (res, co)\r\n  else\r\n    if not ok then coxpcall.pcall (_errhandlers [co] or _deferror, res, co, skt) end\r\n    if skt and copas.autoclose then skt:close() end\r\n    _errhandlers [co] = nil\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 108,
    "text": "if not co then return end",
    "type": "statement:if"
  }, {
    "id": 109,
    "text": "local ok, res, new_q = coroutine.resume(co, skt, ...)",
    "type": "statement:localassign"
  }, {
    "id": 110,
    "text": "if ok and res and new_q then\r\n    new_q:insert (res)\r\n    new_q:push (res, co)\r\n  else\r\n    if not ok then coxpcall.pcall (_errhandlers [co] or _deferror, res, co, skt) end\r\n    if skt and copas.autoclose then skt:close() end\r\n    _errhandlers [co] = nil\r\n  end",
    "type": "statement:if"
  }, {
    "id": 111,
    "text": "new_q:insert (res)",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "new_q:push (res, co)",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "if not ok then coxpcall.pcall (_errhandlers [co] or _deferror, res, co, skt) end",
    "type": "statement:if"
  }, {
    "id": 114,
    "text": "coxpcall.pcall (_errhandlers [co] or _deferror, res, co, skt)",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "if skt and copas.autoclose then skt:close() end",
    "type": "statement:if"
  }, {
    "id": 116,
    "text": "skt:close()",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "_errhandlers [co] = nil",
    "type": "statement:assign"
  }, {
    "id": 118,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 119,
    "text": "local function _accept(input, handler)\r\n  local client = input:accept()\r\n  if client then\r\n    client:settimeout(0)\r\n    local co = coroutine.create(handler)\r\n    _doTick (co, client)\r\n    --_reading:insert(client)\r\n  end\r\n  return client\r\nend",
    "type": "function"
  }, {
    "id": 120,
    "text": "local client = input:accept()",
    "type": "statement:localassign"
  }, {
    "id": 121,
    "text": "if client then\r\n    client:settimeout(0)\r\n    local co = coroutine.create(handler)\r\n    _doTick (co, client)\r\n    --_reading:insert(client)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 122,
    "text": "client:settimeout(0)",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "local co = coroutine.create(handler)",
    "type": "statement:localassign"
  }, {
    "id": 124,
    "text": "_doTick (co, client)",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 126,
    "text": "local function _tickRead (skt)\r\n  _doTick (_reading:pop (skt), skt)\r\nend",
    "type": "function"
  }, {
    "id": 127,
    "text": "_doTick (_reading:pop (skt), skt)",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 129,
    "text": "local function _tickWrite (skt)\r\n  _doTick (_writing:pop (skt), skt)\r\nend",
    "type": "function"
  }, {
    "id": 130,
    "text": "_doTick (_writing:pop (skt), skt)",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 132,
    "text": "local function addTCPserver(server, handler, timeout)\r\n  server:settimeout(timeout or 0.1)\r\n  _servers[server] = handler\r\n  _reading:insert(server)\r\nend",
    "type": "function"
  }, {
    "id": 133,
    "text": "server:settimeout(timeout or 0.1)",
    "type": "statement:functioncall"
  }, {
    "id": 134,
    "text": "_servers[server] = handler",
    "type": "statement:assign"
  }, {
    "id": 135,
    "text": "_reading:insert(server)",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 137,
    "text": "local function addUDPserver(server, handler, timeout)\r\n    server:settimeout(timeout or 0)\r\n    local co = coroutine.create(handler)\r\n    _reading:insert(server)\r\n    _doTick (co, server)\r\nend",
    "type": "function"
  }, {
    "id": 138,
    "text": "server:settimeout(timeout or 0)",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "_doTick (co, server)",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 141,
    "text": "function copas.addserver(server, handler, timeout)\r\n    if string.sub(tostring(server),1,3) == \"udp\" then\r\n        addUDPserver(server, handler, timeout)\r\n    else\r\n        addTCPserver(server, handler, timeout)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 142,
    "text": "if string.sub(tostring(server),1,3) == \"udp\" then\r\n        addUDPserver(server, handler, timeout)\r\n    else\r\n        addTCPserver(server, handler, timeout)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 143,
    "text": "addUDPserver(server, handler, timeout)",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "addTCPserver(server, handler, timeout)",
    "type": "statement:functioncall"
  }, {
    "id": 145,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 146,
    "text": "function copas.addthread(thread, ...)\r\n  if type(thread) ~= \"thread\" then\r\n    thread = coroutine.create(thread)\r\n  end\r\n  _doTick (thread, nil, ...)\r\n  return thread\r\nend",
    "type": "function"
  }, {
    "id": 147,
    "text": "if type(thread) ~= \"thread\" then\r\n    thread = coroutine.create(thread)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 148,
    "text": "thread = coroutine.create(thread)",
    "type": "statement:assign"
  }, {
    "id": 149,
    "text": "_doTick (thread, nil, ...)",
    "type": "statement:functioncall"
  }, {
    "id": 150,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 151,
    "text": "local function addtaskRead (tsk)\r\n  -- lets tasks call the default _tick()\r\n  tsk.def_tick = _tickRead\r\n\r\n  _tasks [tsk] = true\r\nend",
    "type": "function"
  }, {
    "id": 152,
    "text": "tsk.def_tick = _tickRead",
    "type": "statement:assign"
  }, {
    "id": 153,
    "text": "_tasks [tsk] = true",
    "type": "statement:assign"
  }, {
    "id": 154,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 155,
    "text": "local function addtaskWrite (tsk)\r\n  -- lets tasks call the default _tick()\r\n  tsk.def_tick = _tickWrite\r\n\r\n  _tasks [tsk] = true\r\nend",
    "type": "function"
  }, {
    "id": 156,
    "text": "tsk.def_tick = _tickWrite",
    "type": "statement:assign"
  }, {
    "id": 157,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 158,
    "text": "local function tasks ()\r\n  return next, _tasks\r\nend",
    "type": "function"
  }, {
    "id": 159,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 160,
    "text": "function copas.sleep(sleeptime)\r\n    coroutine.yield((sleeptime or 0), _sleeping)\r\nend",
    "type": "function"
  }, {
    "id": 161,
    "text": "coroutine.yield((sleeptime or 0), _sleeping)",
    "type": "statement:functioncall"
  }, {
    "id": 162,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 163,
    "text": "function copas.wakeup(co)\r\n    _sleeping:wakeup(co)\r\nend",
    "type": "function"
  }, {
    "id": 164,
    "text": "_sleeping:wakeup(co)",
    "type": "statement:functioncall"
  }, {
    "id": 165,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 166,
    "text": "local function _select (timeout)\r\n  local err\r\n  local now = gettime()\r\n  local duration = function(t2, t1) return t2-t1 end\r\n\r\n  _readable_t._evs, _writable_t._evs, err = socket.select(_reading, _writing, timeout)\r\n  local r_evs, w_evs = _readable_t._evs, _writable_t._evs\r\n\r\n  if duration(now, last_cleansing) > WATCH_DOG_TIMEOUT then\r\n    last_cleansing = now\r\n    for k,v in pairs(_reading_log) do\r\n      if not r_evs[k] and duration(now, v) > WATCH_DOG_TIMEOUT then\r\n        _reading_log[k] = nil\r\n        r_evs[#r_evs + 1] = k\r\n        r_evs[k] = #r_evs\r\n      end\r\n    end\r\n\r\n    for k,v in pairs(_writing_log) do\r\n      if not w_evs[k] and duration(now, v) > WATCH_DOG_TIMEOUT then\r\n        _writing_log[k] = nil\r\n        w_evs[#w_evs + 1] = k\r\n        w_evs[k] = #w_evs\r\n      end\r\n    end\r\n  end\r\n\r\n  if err == \"timeout\" and #r_evs + #w_evs > 0 then\r\n    return nil\r\n  else\r\n    return err\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 167,
    "text": "local err",
    "type": "statement:localassign"
  }, {
    "id": 168,
    "text": "local now = gettime()",
    "type": "statement:localassign"
  }, {
    "id": 169,
    "text": "local duration = function(t2, t1) return t2-t1 end",
    "type": "statement:localassign"
  }, {
    "id": 170,
    "text": "_readable_t._evs, _writable_t._evs, err = socket.select(_reading, _writing, timeout)",
    "type": "statement:assign"
  }, {
    "id": 171,
    "text": "local r_evs, w_evs = _readable_t._evs, _writable_t._evs",
    "type": "statement:localassign"
  }, {
    "id": 172,
    "text": "if duration(now, last_cleansing) > WATCH_DOG_TIMEOUT then\r\n    last_cleansing = now\r\n    for k,v in pairs(_reading_log) do\r\n      if not r_evs[k] and duration(now, v) > WATCH_DOG_TIMEOUT then\r\n        _reading_log[k] = nil\r\n        r_evs[#r_evs + 1] = k\r\n        r_evs[k] = #r_evs\r\n      end\r\n    end\r\n\r\n    for k,v in pairs(_writing_log) do\r\n      if not w_evs[k] and duration(now, v) > WATCH_DOG_TIMEOUT then\r\n        _writing_log[k] = nil\r\n        w_evs[#w_evs + 1] = k\r\n        w_evs[k] = #w_evs\r\n      end\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 173,
    "text": "last_cleansing = now",
    "type": "statement:assign"
  }, {
    "id": 174,
    "text": "for k,v in pairs(_reading_log) do\r\n      if not r_evs[k] and duration(now, v) > WATCH_DOG_TIMEOUT then\r\n        _reading_log[k] = nil\r\n        r_evs[#r_evs + 1] = k\r\n        r_evs[k] = #r_evs\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 175,
    "text": "if not r_evs[k] and duration(now, v) > WATCH_DOG_TIMEOUT then\r\n        _reading_log[k] = nil\r\n        r_evs[#r_evs + 1] = k\r\n        r_evs[k] = #r_evs\r\n      end",
    "type": "statement:if"
  }, {
    "id": 176,
    "text": "_reading_log[k] = nil",
    "type": "statement:assign"
  }, {
    "id": 177,
    "text": "r_evs[#r_evs + 1] = k",
    "type": "statement:assign"
  }, {
    "id": 178,
    "text": "r_evs[k] = #r_evs",
    "type": "statement:assign"
  }, {
    "id": 179,
    "text": "for k,v in pairs(_writing_log) do\r\n      if not w_evs[k] and duration(now, v) > WATCH_DOG_TIMEOUT then\r\n        _writing_log[k] = nil\r\n        w_evs[#w_evs + 1] = k\r\n        w_evs[k] = #w_evs\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 180,
    "text": "if not w_evs[k] and duration(now, v) > WATCH_DOG_TIMEOUT then\r\n        _writing_log[k] = nil\r\n        w_evs[#w_evs + 1] = k\r\n        w_evs[k] = #w_evs\r\n      end",
    "type": "statement:if"
  }, {
    "id": 181,
    "text": "_writing_log[k] = nil",
    "type": "statement:assign"
  }, {
    "id": 182,
    "text": "w_evs[#w_evs + 1] = k",
    "type": "statement:assign"
  }, {
    "id": 183,
    "text": "w_evs[k] = #w_evs",
    "type": "statement:assign"
  }, {
    "id": 184,
    "text": "if err == \"timeout\" and #r_evs + #w_evs > 0 then\r\n    return nil\r\n  else\r\n    return err\r\n  end",
    "type": "statement:if"
  }, {
    "id": 185,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 186,
    "text": "function(t2, t1) return t2-t1 end",
    "type": "function"
  }, {
    "id": 187,
    "text": "function copas.step(timeout)\r\n  _sleeping_t:tick(gettime())\r\n\r\n  -- Need to wake up the select call it time for the next sleeping event\r\n  local nextwait = _sleeping:getnext()\r\n  if nextwait then\r\n    timeout = timeout and math.min(nextwait, timeout) or nextwait\r\n  end\r\n\r\n  local err = _select (timeout)\r\n  if err == \"timeout\" then return false end\r\n\r\n  if err then\r\n    error(err)\r\n  end\r\n\r\n  for tsk in tasks() do\r\n    for ev in tsk:events() do\r\n      tsk:tick (ev)\r\n    end\r\n  end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 188,
    "text": "_sleeping_t:tick(gettime())",
    "type": "statement:functioncall"
  }, {
    "id": 189,
    "text": "local nextwait = _sleeping:getnext()",
    "type": "statement:localassign"
  }, {
    "id": 190,
    "text": "if nextwait then\r\n    timeout = timeout and math.min(nextwait, timeout) or nextwait\r\n  end",
    "type": "statement:if"
  }, {
    "id": 191,
    "text": "timeout = timeout and math.min(nextwait, timeout) or nextwait",
    "type": "statement:assign"
  }, {
    "id": 192,
    "text": "local err = _select (timeout)",
    "type": "statement:localassign"
  }, {
    "id": 193,
    "text": "if err == \"timeout\" then return false end",
    "type": "statement:if"
  }, {
    "id": 194,
    "text": "if err then\r\n    error(err)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 195,
    "text": "for tsk in tasks() do\r\n    for ev in tsk:events() do\r\n      tsk:tick (ev)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 196,
    "text": "for ev in tsk:events() do\r\n      tsk:tick (ev)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 197,
    "text": "tsk:tick (ev)",
    "type": "statement:functioncall"
  }, {
    "id": 198,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 199,
    "text": "function copas.loop(timeout)\r\n  while true do\r\n    copas.step(timeout)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 200,
    "text": "while true do\r\n    copas.step(timeout)\r\n  end",
    "type": "statement:while"
  }, {
    "id": 201,
    "text": "copas.step(timeout)",
    "type": "statement:functioncall"
  }, {
    "id": 202,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 203,
    "text": "function (...)\r\n           return statusHandler(coxpcall.pcall(func, ...))\r\n         end",
    "type": "function"
  }, {
    "id": 204,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 205,
    "text": "function (...)\r\n           local status = (...)\r\n           if not status then\r\n             coxpcall.pcall(finalizer, select(2, ...))\r\n             error({ (select(2, ...)) }, 0)\r\n           end\r\n           return ...\r\n         end",
    "type": "function"
  }, {
    "id": 206,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 207,
    "text": "function(set, value)\r\n                                   if not reverse[value] then\r\n                                     set[#set + 1] = value\r\n                                     reverse[value] = #set\r\n                                   end\r\n                                 end",
    "type": "function"
  }, {
    "id": 208,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 209,
    "text": "function(set, value)\r\n                                   local index = reverse[value]\r\n                                   if index then\r\n                                     reverse[value] = nil\r\n                                     local top = set[#set]\r\n                                     set[#set] = nil\r\n                                     if top ~= value then\r\n                                       reverse[top] = index\r\n                                       set[index] = top\r\n                                     end\r\n                                   end\r\n                                 end",
    "type": "function"
  }, {
    "id": 210,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 211,
    "text": "function (set, key, itm)\r\n                                 local qKey = q[key]\r\n                                 if qKey == nil then\r\n                                   q[key] = {itm}\r\n                                 else\r\n                                   qKey[#qKey + 1] = itm\r\n                                 end\r\n                               end",
    "type": "function"
  }, {
    "id": 212,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 213,
    "text": "function (set, key)\r\n                                local t = q[key]\r\n                                if t ~= nil then\r\n                                  local ret = table.remove (t, 1)\r\n                                  if t[1] == nil then\r\n                                    q[key] = nil\r\n                                  end\r\n                                  return ret\r\n                                end\r\n                              end",
    "type": "function"
  }, {
    "id": 214,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 215,
    "text": "function(self, sleeptime, co)\r\n        if not co then return end\r\n        if sleeptime<0 then\r\n            --sleep until explicit wakeup through copas.wakeup\r\n            self.lethargy[co] = true\r\n            return\r\n        else\r\n            sleeptime = gettime() + sleeptime\r\n        end\r\n        local t, c = self.times, self.cos\r\n        local i, cou = 1, #t\r\n        --TODO: do a binary search\r\n        while i<=cou and t[i]<=sleeptime do i=i+1 end\r\n        table.insert(t, i, sleeptime)\r\n        table.insert(c, i, co)\r\n    end",
    "type": "function"
  }, {
    "id": 216,
    "text": "if sleeptime<0 then\r\n            --sleep until explicit wakeup through copas.wakeup\r\n            self.lethargy[co] = true\r\n            return\r\n        else\r\n            sleeptime = gettime() + sleeptime\r\n        end",
    "type": "statement:if"
  }, {
    "id": 217,
    "text": "self.lethargy[co] = true",
    "type": "statement:assign"
  }, {
    "id": 218,
    "text": "sleeptime = gettime() + sleeptime",
    "type": "statement:assign"
  }, {
    "id": 219,
    "text": "local t, c = self.times, self.cos",
    "type": "statement:localassign"
  }, {
    "id": 220,
    "text": "local i, cou = 1, #t",
    "type": "statement:localassign"
  }, {
    "id": 221,
    "text": "while i<=cou and t[i]<=sleeptime do i=i+1 end",
    "type": "statement:while"
  }, {
    "id": 222,
    "text": "i=i+1",
    "type": "statement:assign"
  }, {
    "id": 223,
    "text": "table.insert(t, i, sleeptime)",
    "type": "statement:functioncall"
  }, {
    "id": 224,
    "text": "table.insert(c, i, co)",
    "type": "statement:functioncall"
  }, {
    "id": 225,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 226,
    "text": "function(self)  -- returns delay until next sleep expires, or nil if there is none\r\n        local t = self.times\r\n        local delay = t[1] and t[1] - gettime() or nil\r\n\r\n        return delay and math.max(delay, 0) or nil\r\n    end",
    "type": "function"
  }, {
    "id": 227,
    "text": "local t = self.times",
    "type": "statement:localassign"
  }, {
    "id": 228,
    "text": "local delay = t[1] and t[1] - gettime() or nil",
    "type": "statement:localassign"
  }, {
    "id": 229,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 230,
    "text": "function(self, time)\r\n        local t, c = self.times, self.cos\r\n        if #t==0 or time<t[1] then return end\r\n        local co = c[1]\r\n        table.remove(t, 1)\r\n        table.remove(c, 1)\r\n        return co\r\n    end",
    "type": "function"
  }, {
    "id": 231,
    "text": "if #t==0 or time<t[1] then return end",
    "type": "statement:if"
  }, {
    "id": 232,
    "text": "local co = c[1]",
    "type": "statement:localassign"
  }, {
    "id": 233,
    "text": "table.remove(t, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 234,
    "text": "table.remove(c, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 235,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 236,
    "text": "function(self, co)\r\n        local let = self.lethargy\r\n        if let[co] then\r\n            self:push(0, co)\r\n            let[co] = nil\r\n        else\r\n            let = self.cos\r\n            for i=1,#let do\r\n                if let[i]==co then\r\n                    table.remove(let, i)\r\n                    local tm = self.times[i]\r\n                    table.remove(self.times, i)\r\n                    self:push(0, co)\r\n                    return\r\n                end\r\n            end\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 237,
    "text": "local let = self.lethargy",
    "type": "statement:localassign"
  }, {
    "id": 238,
    "text": "if let[co] then\r\n            self:push(0, co)\r\n            let[co] = nil\r\n        else\r\n            let = self.cos\r\n            for i=1,#let do\r\n                if let[i]==co then\r\n                    table.remove(let, i)\r\n                    local tm = self.times[i]\r\n                    table.remove(self.times, i)\r\n                    self:push(0, co)\r\n                    return\r\n                end\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 239,
    "text": "self:push(0, co)",
    "type": "statement:functioncall"
  }, {
    "id": 240,
    "text": "let[co] = nil",
    "type": "statement:assign"
  }, {
    "id": 241,
    "text": "let = self.cos",
    "type": "statement:assign"
  }, {
    "id": 242,
    "text": "for i=1,#let do\r\n                if let[i]==co then\r\n                    table.remove(let, i)\r\n                    local tm = self.times[i]\r\n                    table.remove(self.times, i)\r\n                    self:push(0, co)\r\n                    return\r\n                end\r\n            end",
    "type": "statement:numericfor"
  }, {
    "id": 243,
    "text": "if let[i]==co then\r\n                    table.remove(let, i)\r\n                    local tm = self.times[i]\r\n                    table.remove(self.times, i)\r\n                    self:push(0, co)\r\n                    return\r\n                end",
    "type": "statement:if"
  }, {
    "id": 244,
    "text": "table.remove(let, i)",
    "type": "statement:functioncall"
  }, {
    "id": 245,
    "text": "local tm = self.times[i]",
    "type": "statement:localassign"
  }, {
    "id": 246,
    "text": "table.remove(self.times, i)",
    "type": "statement:functioncall"
  }, {
    "id": 247,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 248,
    "text": "function (self, data, from, to)\r\n                            return copas.send (self.socket, data, from, to)\r\n                          end",
    "type": "function"
  }, {
    "id": 249,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 250,
    "text": "function (self, pattern)\r\n                               if (self.timeout==0) then\r\n                                 return copas.receivePartial(self.socket, pattern)\r\n                               end\r\n                               return copas.receive(self.socket, pattern)\r\n                             end",
    "type": "function"
  }, {
    "id": 251,
    "text": "if (self.timeout==0) then\r\n                                 return copas.receivePartial(self.socket, pattern)\r\n                               end",
    "type": "statement:if"
  }, {
    "id": 252,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 253,
    "text": "function (self)\r\n                             return copas.flush(self.socket)\r\n                           end",
    "type": "function"
  }, {
    "id": 254,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 255,
    "text": "function (self,time)\r\n                                  self.timeout=time\r\n                                  return\r\n                                end",
    "type": "function"
  }, {
    "id": 256,
    "text": "self.timeout=time",
    "type": "statement:assign"
  }, {
    "id": 257,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 258,
    "text": "function (self, data)\r\n                            return copas.send (self.socket, data)\r\n                          end",
    "type": "function"
  }, {
    "id": 259,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 260,
    "text": "function (self, data, ip, port)\r\n                            return copas.sendto (self.socket, data, ip, port)\r\n                          end",
    "type": "function"
  }, {
    "id": 261,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 262,
    "text": "function (self, size)\r\n                               return copas.receive (self.socket, (size or UDP_DATAGRAM_MAX))\r\n                             end",
    "type": "function"
  }, {
    "id": 263,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 264,
    "text": "function (self, size)\r\n                               return copas.receivefrom (self.socket, (size or UDP_DATAGRAM_MAX))\r\n                             end",
    "type": "function"
  }, {
    "id": 265,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 266,
    "text": "function (self)\r\n                             return copas.flush (self.socket)\r\n                           end",
    "type": "function"
  }, {
    "id": 267,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 268,
    "text": "function (self,time)\r\n                                  self.timeout=time\r\n                                  return\r\n                                end",
    "type": "function"
  }, {
    "id": 269,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 270,
    "text": "function ()\r\n                      i = i + 1\r\n                      return self._evs [i]\r\n                    end",
    "type": "function"
  }, {
    "id": 271,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 272,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 273,
    "text": "function(self)\r\n             local i = 0\r\n             return function ()\r\n                      i = i + 1\r\n                      return self._evs [i]\r\n                    end\r\n           end",
    "type": "function"
  }, {
    "id": 274,
    "text": "local i = 0",
    "type": "statement:localassign"
  }, {
    "id": 275,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 276,
    "text": "function (self, input)\r\n           local handler = _servers[input]\r\n           if handler then\r\n             input = _accept(input, handler)\r\n           else\r\n             _reading:remove (input)\r\n             self.def_tick (input)\r\n           end\r\n         end",
    "type": "function"
  }, {
    "id": 277,
    "text": "local handler = _servers[input]",
    "type": "statement:localassign"
  }, {
    "id": 278,
    "text": "if handler then\r\n             input = _accept(input, handler)\r\n           else\r\n             _reading:remove (input)\r\n             self.def_tick (input)\r\n           end",
    "type": "statement:if"
  }, {
    "id": 279,
    "text": "input = _accept(input, handler)",
    "type": "statement:assign"
  }, {
    "id": 280,
    "text": "_reading:remove (input)",
    "type": "statement:functioncall"
  }, {
    "id": 281,
    "text": "self.def_tick (input)",
    "type": "statement:functioncall"
  }, {
    "id": 282,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 283,
    "text": "function ()\r\n                      i = i + 1\r\n                      return self._evs [i]\r\n                    end",
    "type": "function"
  }, {
    "id": 284,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 285,
    "text": "function (self)\r\n             local i = 0\r\n             return function ()\r\n                      i = i + 1\r\n                      return self._evs [i]\r\n                    end\r\n           end",
    "type": "function"
  }, {
    "id": 286,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 287,
    "text": "function (self, output)\r\n           _writing:remove (output)\r\n           self.def_tick (output)\r\n         end",
    "type": "function"
  }, {
    "id": 288,
    "text": "_writing:remove (output)",
    "type": "statement:functioncall"
  }, {
    "id": 289,
    "text": "self.def_tick (output)",
    "type": "statement:functioncall"
  }, {
    "id": 290,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 291,
    "text": "function (self, time, ...)\r\n       _doTick(_sleeping:pop(time), ...)\r\n    end",
    "type": "function"
  }, {
    "id": 292,
    "text": "_doTick(_sleeping:pop(time), ...)",
    "type": "statement:functioncall"
  }, {
    "id": 293,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 294,
    "text": "",
    "type": "function container"
  }, {
    "id": 295,
    "text": "coxpcall",
    "type": "module"
  }, {
    "id": 296,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 297,
    "text": "socket",
    "type": "module"
  }, {
    "id": 298,
    "text": "select",
    "type": "global function"
  }, {
    "id": 299,
    "text": "wrap",
    "type": "global function"
  }, {
    "id": 300,
    "text": "addserver",
    "type": "global function"
  }, {
    "id": 301,
    "text": "loop",
    "type": "global function"
  }, {
    "id": 302,
    "text": "connect",
    "type": "global function"
  }, {
    "id": 303,
    "text": "create",
    "type": "global function"
  }, {
    "id": 304,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 305,
    "text": "def_tick",
    "type": "global function"
  }, {
    "id": 306,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 307,
    "text": "max",
    "type": "global function"
  }, {
    "id": 308,
    "text": "error",
    "type": "global function"
  }, {
    "id": 309,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 310,
    "text": "resume",
    "type": "global function"
  }, {
    "id": 311,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 312,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 313,
    "text": "running",
    "type": "global function"
  }, {
    "id": 314,
    "text": "yield",
    "type": "global function"
  }, {
    "id": 315,
    "text": "type",
    "type": "global function"
  }, {
    "id": 316,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 317,
    "text": "select",
    "type": "global function"
  }, {
    "id": 318,
    "text": "print",
    "type": "global function"
  }, {
    "id": 319,
    "text": "min",
    "type": "global function"
  }, {
    "id": 320,
    "text": "require",
    "type": "global function"
  }, {
    "id": 321,
    "text": "gettime",
    "type": "global function"
  }, {
    "id": 322,
    "text": "random",
    "type": "global function"
  }, {
    "id": 323,
    "text": "",
    "type": "variable container"
  }, {
    "id": 324,
    "text": "",
    "type": "require container"
  }, {
    "id": 325,
    "text": "",
    "type": "local variable"
  }, {
    "id": 326,
    "text": "",
    "type": "n/a"
  }, {
    "id": 327,
    "text": "",
    "type": "local variable"
  }, {
    "id": 328,
    "text": "",
    "type": "number"
  }, {
    "id": 329,
    "text": "",
    "type": "local variable"
  }, {
    "id": 330,
    "text": "",
    "type": "number"
  }, {
    "id": 331,
    "text": "",
    "type": "local variable"
  }, {
    "id": 332,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 333,
    "text": "",
    "type": "local variable"
  }, {
    "id": 334,
    "text": "",
    "type": "n/a"
  }, {
    "id": 335,
    "text": "",
    "type": "local variable"
  }, {
    "id": 336,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 337,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 338,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 339,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 340,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 341,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 342,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 343,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 344,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 345,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 346,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 347,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 348,
    "text": "",
    "type": "function"
  }, {
    "id": 349,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 350,
    "text": "",
    "type": "function"
  }, {
    "id": 351,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 352,
    "text": "",
    "type": "function"
  }, {
    "id": 353,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 354,
    "text": "",
    "type": "function"
  }, {
    "id": 355,
    "text": "",
    "type": "local variable"
  }, {
    "id": 356,
    "text": "",
    "type": "n/a"
  }, {
    "id": 357,
    "text": "",
    "type": "local variable"
  }, {
    "id": 358,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 359,
    "text": "",
    "type": "local variable"
  }, {
    "id": 360,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 361,
    "text": "",
    "type": "local variable"
  }, {
    "id": 362,
    "text": "",
    "type": "n/a"
  }, {
    "id": 363,
    "text": "",
    "type": "local variable"
  }, {
    "id": 364,
    "text": "",
    "type": "n/a"
  }, {
    "id": 365,
    "text": "",
    "type": "local variable"
  }, {
    "id": 366,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 367,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 368,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 369,
    "text": "",
    "type": "local variable"
  }, {
    "id": 370,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 371,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 372,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 373,
    "text": "",
    "type": "local variable"
  }, {
    "id": 374,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 375,
    "text": "",
    "type": "local variable"
  }, {
    "id": 376,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 377,
    "text": "",
    "type": "local variable"
  }, {
    "id": 378,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 379,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 380,
    "text": "",
    "type": "function"
  }, {
    "id": 381,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 382,
    "text": "",
    "type": "function"
  }, {
    "id": 383,
    "text": "",
    "type": "local variable"
  }, {
    "id": 384,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 385,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 386,
    "text": "",
    "type": "function"
  }, {
    "id": 387,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 388,
    "text": "",
    "type": "function"
  }, {
    "id": 389,
    "text": "",
    "type": "local variable"
  }, {
    "id": 390,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 391,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 392,
    "text": "",
    "type": "function"
  }, {
    "id": 393,
    "text": "",
    "type": "local variable"
  }, {
    "id": 394,
    "text": "",
    "type": "number"
  }, {
    "id": 395,
    "text": "",
    "type": "global variable"
  }, {
    "id": 396,
    "text": "",
    "type": "global variable"
  }, {
    "id": 397,
    "text": "",
    "type": "global variable"
  }, {
    "id": 398,
    "text": "",
    "type": "global variable"
  }, {
    "id": 399,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 400,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 401,
    "text": "",
    "type": "interface container"
  }, {
    "id": 402,
    "text": "",
    "type": "interface"
  }, {
    "id": 403,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 404,
    "text": "",
    "type": "require local variable"
  } ]
}