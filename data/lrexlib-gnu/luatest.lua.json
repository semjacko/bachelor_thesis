{
  "_filename": "luatest.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lrexlib-gnu/test/luatest.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 14,
    "label": "has",
    "to": 4
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 22,
    "label": "has",
    "to": 4
  }, {
    "from": 22,
    "label": "has",
    "to": 4
  }, {
    "from": 20,
    "label": "has",
    "to": 27
  }, {
    "from": 20,
    "label": "has",
    "to": 4
  }, {
    "from": 20,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 23
  }, {
    "from": 29,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 29,
    "label": "has",
    "to": 26
  }, {
    "from": 29,
    "label": "has",
    "to": 4
  }, {
    "from": 29,
    "label": "has",
    "to": 4
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 6
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 34,
    "label": "has",
    "to": 40
  }, {
    "from": 31,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 48,
    "label": "has",
    "to": 53
  }, {
    "from": 48,
    "label": "has",
    "to": 44
  }, {
    "from": 48,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 46
  }, {
    "from": 54,
    "label": "has",
    "to": 47
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 45,
    "label": "has",
    "to": 56
  }, {
    "from": 42,
    "label": "has",
    "to": 57
  }, {
    "from": 42,
    "label": "has",
    "to": 4
  }, {
    "from": 42,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 59,
    "label": "has",
    "to": 62
  }, {
    "from": 59,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 46
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 63,
    "label": "has",
    "to": 68
  }, {
    "from": 59,
    "label": "has",
    "to": 4
  }, {
    "from": 59,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 72,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 72,
    "label": "has",
    "to": 82
  }, {
    "from": 70,
    "label": "has",
    "to": 4
  }, {
    "from": 70,
    "label": "has",
    "to": 83
  }, {
    "from": 31,
    "label": "calls",
    "to": 96
  }, {
    "from": 31,
    "label": "calls",
    "to": 96
  }, {
    "from": 31,
    "label": "calls",
    "to": 96
  }, {
    "from": 70,
    "label": "calls",
    "to": 42
  }, {
    "from": 31,
    "label": "calls",
    "to": 86
  }, {
    "from": 70,
    "label": "calls",
    "to": 92
  }, {
    "from": 70,
    "label": "calls",
    "to": 59
  }, {
    "from": 31,
    "label": "calls",
    "to": 31
  }, {
    "from": 42,
    "label": "calls",
    "to": 20
  }, {
    "from": 42,
    "label": "calls",
    "to": 20
  }, {
    "from": 59,
    "label": "calls",
    "to": 20
  }, {
    "from": 59,
    "label": "calls",
    "to": 20
  }, {
    "from": 42,
    "label": "calls",
    "to": 87
  }, {
    "from": 20,
    "label": "calls",
    "to": 29
  }, {
    "from": 20,
    "label": "calls",
    "to": 29
  }, {
    "from": 42,
    "label": "calls",
    "to": 89
  }, {
    "from": 42,
    "label": "calls",
    "to": 90
  }, {
    "from": 42,
    "label": "calls",
    "to": 91
  }, {
    "from": 42,
    "label": "calls",
    "to": 91
  }, {
    "from": 59,
    "label": "calls",
    "to": 91
  }, {
    "from": 59,
    "label": "calls",
    "to": 91
  }, {
    "from": 42,
    "label": "calls",
    "to": 14
  }, {
    "from": 42,
    "label": "calls",
    "to": 14
  }, {
    "from": 59,
    "label": "calls",
    "to": 14
  }, {
    "from": 14,
    "label": "calls",
    "to": 93
  }, {
    "from": 14,
    "label": "calls",
    "to": 93
  }, {
    "from": 42,
    "label": "calls",
    "to": 95
  }, {
    "from": 42,
    "label": "calls",
    "to": 95
  }, {
    "from": 59,
    "label": "calls",
    "to": 95
  }, {
    "from": 2,
    "label": "calls",
    "to": 97
  }, {
    "from": 2,
    "label": "calls",
    "to": 97
  }, {
    "from": 31,
    "label": "calls",
    "to": 97
  }, {
    "from": 42,
    "label": "calls",
    "to": 97
  }, {
    "from": 42,
    "label": "calls",
    "to": 97
  }, {
    "from": 42,
    "label": "calls",
    "to": 97
  }, {
    "from": 70,
    "label": "calls",
    "to": 97
  }, {
    "from": 70,
    "label": "calls",
    "to": 97
  }, {
    "from": 2,
    "label": "calls",
    "to": 88
  }, {
    "from": 31,
    "label": "calls",
    "to": 88
  }, {
    "from": 70,
    "label": "calls",
    "to": 88
  }, {
    "from": 70,
    "label": "calls",
    "to": 88
  }, {
    "from": 2,
    "label": "calls",
    "to": 2
  }, {
    "from": 42,
    "label": "calls",
    "to": 2
  }, {
    "from": 59,
    "label": "calls",
    "to": 2
  }, {
    "from": 70,
    "label": "calls",
    "to": 94
  }, {
    "from": 70,
    "label": "calls",
    "to": 94
  }, {
    "from": 1,
    "label": "contains",
    "to": 84
  }, {
    "from": 84,
    "label": "declares",
    "to": 2
  }, {
    "from": 84,
    "label": "declares",
    "to": 14
  }, {
    "from": 84,
    "label": "declares",
    "to": 20
  }, {
    "from": 84,
    "label": "declares",
    "to": 29
  }, {
    "from": 84,
    "label": "declares",
    "to": 31
  }, {
    "from": 84,
    "label": "declares",
    "to": 42
  }, {
    "from": 84,
    "label": "declares",
    "to": 59
  }, {
    "from": 84,
    "label": "declares",
    "to": 70
  }, {
    "from": 85,
    "label": "calls",
    "to": 31
  }, {
    "from": 85,
    "label": "calls",
    "to": 70
  }, {
    "from": 98,
    "label": "requires",
    "to": 1
  }, {
    "from": 99,
    "label": "requires",
    "to": 1
  }, {
    "from": 100,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 101
  }, {
    "from": 1,
    "label": "contains",
    "to": 102
  }, {
    "from": 101,
    "label": "initializes",
    "to": 103
  }, {
    "from": 103,
    "label": "assigns",
    "to": 104
  }, {
    "from": 1,
    "label": "provides",
    "to": 105
  }, {
    "from": 2,
    "label": "represents",
    "to": 106
  }, {
    "from": 105,
    "label": "provides",
    "to": 106
  }, {
    "from": 103,
    "label": "represents",
    "to": 107
  }, {
    "from": 105,
    "label": "provides",
    "to": 107
  }, {
    "from": 31,
    "label": "represents",
    "to": 108
  }, {
    "from": 105,
    "label": "provides",
    "to": 108
  }, {
    "from": 42,
    "label": "represents",
    "to": 109
  }, {
    "from": 105,
    "label": "provides",
    "to": 109
  }, {
    "from": 59,
    "label": "represents",
    "to": 110
  }, {
    "from": 105,
    "label": "provides",
    "to": 110
  }, {
    "from": 70,
    "label": "represents",
    "to": 111
  }, {
    "from": 105,
    "label": "provides",
    "to": 111
  }, {
    "from": 112,
    "label": "requires",
    "to": 1
  }, {
    "from": 113,
    "label": "requires",
    "to": 1
  }, {
    "from": 114,
    "label": "requires",
    "to": 1
  }, {
    "from": 115,
    "label": "requires",
    "to": 1
  }, {
    "from": 116,
    "label": "requires",
    "to": 1
  }, {
    "from": 117,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "luatest",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function eq (t1, t2, lut)\r\n  if t1 == t2 then return true end\r\n  if type(t1) ~= \"table\" or type(t2) ~= \"table\" or #t1 ~= #t2 then\r\n    return false\r\n  end\r\n\r\n  lut = lut or {} -- look-up table: are these 2 arrays already compared?\r\n  lut[t1] = lut[t1] or {}\r\n  if lut[t1][t2] then return true end\r\n  lut[t2] = lut[t2] or {}\r\n  lut[t1][t2], lut[t2][t1] = true, true\r\n\r\n  for k,v in ipairs (t1) do\r\n    if not eq (t2[k], v, lut) then return false end -- recursion\r\n  end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "if t1 == t2 then return true end",
    "type": "statement:if"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "if type(t1) ~= \"table\" or type(t2) ~= \"table\" or #t1 ~= #t2 then\r\n    return false\r\n  end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "lut = lut or {}",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "lut[t1] = lut[t1] or {}",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "if lut[t1][t2] then return true end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "lut[t2] = lut[t2] or {}",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "lut[t1][t2], lut[t2][t1] = true, true",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "for k,v in ipairs (t1) do\r\n    if not eq (t2[k], v, lut) then return false end -- recursion\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 12,
    "text": "if not eq (t2[k], v, lut) then return false end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "local function packNT (...)\r\n  local t = {}\r\n  for i=1, select (\"#\", ...) do\r\n    local v = select (i, ...)\r\n    t[i] = (v == nil) and NT or v\r\n  end\r\n  return t\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "for i=1, select (\"#\", ...) do\r\n    local v = select (i, ...)\r\n    t[i] = (v == nil) and NT or v\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 17,
    "text": "local v = select (i, ...)",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "t[i] = (v == nil) and NT or v",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "local function unpackNT (t)\r\n  local len = #t\r\n  local function unpack_from (i)\r\n    local v = t[i]\r\n    if v == NT then v = nil end\r\n    if i == len then return v end\r\n    return v, unpack_from (i+1)\r\n  end\r\n  if len > 0 then return unpack_from (1) end\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "local len = #t",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "local function unpack_from (i)\r\n    local v = t[i]\r\n    if v == NT then v = nil end\r\n    if i == len then return v end\r\n    return v, unpack_from (i+1)\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 23,
    "text": "local v = t[i]",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "if v == NT then v = nil end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "v = nil",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "if i == len then return v end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "if len > 0 then return unpack_from (1) end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "local function unpack_from (i)\r\n    local v = t[i]\r\n    if v == NT then v = nil end\r\n    if i == len then return v end\r\n    return v, unpack_from (i+1)\r\n  end",
    "type": "function"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "local function print_results (val, indent, lut)\r\n  indent = indent or \"\"\r\n  lut = lut or {} -- look-up table\r\n  local str = tostring (val)\r\n  if type (val) == \"table\" then\r\n    if lut[val] then\r\n      io.write (indent, str, \"\\n\")\r\n    else\r\n      lut[val] = true\r\n      io.write (indent, str, \"\\n\")\r\n      for i,v in ipairs (val) do\r\n        print_results (v, \"  \" .. indent, lut) -- recursion\r\n      end\r\n    end\r\n  else\r\n    io.write (indent, val == NT and \"nil\" or str, \"\\n\")\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "indent = indent or \"\"",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "local str = tostring (val)",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "if type (val) == \"table\" then\r\n    if lut[val] then\r\n      io.write (indent, str, \"\\n\")\r\n    else\r\n      lut[val] = true\r\n      io.write (indent, str, \"\\n\")\r\n      for i,v in ipairs (val) do\r\n        print_results (v, \"  \" .. indent, lut) -- recursion\r\n      end\r\n    end\r\n  else\r\n    io.write (indent, val == NT and \"nil\" or str, \"\\n\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "if lut[val] then\r\n      io.write (indent, str, \"\\n\")\r\n    else\r\n      lut[val] = true\r\n      io.write (indent, str, \"\\n\")\r\n      for i,v in ipairs (val) do\r\n        print_results (v, \"  \" .. indent, lut) -- recursion\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "io.write (indent, str, \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "lut[val] = true",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "for i,v in ipairs (val) do\r\n        print_results (v, \"  \" .. indent, lut) -- recursion\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 39,
    "text": "print_results (v, \"  \" .. indent, lut)",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "io.write (indent, val == NT and \"nil\" or str, \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "local function test_function (test, func)\r\n  local res\r\n  local t = packNT (pcall (func, unpackNT (test[1])))\r\n  if t[1] then\r\n    table.remove (t, 1)\r\n    res = t\r\n    if alien then\r\n      local subject = test[1][1]\r\n      local buf = alien.buffer (#subject)\r\n      if #subject > 0 then\r\n        alien.memmove (buf:topointer (), subject, #subject)\r\n      end\r\n      test[1][1] = buf\r\n      local t = packNT (pcall (func, unpackNT (test[1])))\r\n      if t[1] then\r\n        table.remove (t, 1)\r\n        res = t\r\n      else\r\n        print \"alien test failed\"\r\n        res = t[2] --> error_message\r\n      end\r\n    end\r\n  else\r\n    res = t[2] --> error_message\r\n  end\r\n  local how = (type (res) == type (test[2])) and\r\n    (type (res) == \"string\" or eq (res, test[2])) -- allow error messages to differ\r\n  return how, res\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "local res",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "local t = packNT (pcall (func, unpackNT (test[1])))",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "if t[1] then\r\n    table.remove (t, 1)\r\n    res = t\r\n    if alien then\r\n      local subject = test[1][1]\r\n      local buf = alien.buffer (#subject)\r\n      if #subject > 0 then\r\n        alien.memmove (buf:topointer (), subject, #subject)\r\n      end\r\n      test[1][1] = buf\r\n      local t = packNT (pcall (func, unpackNT (test[1])))\r\n      if t[1] then\r\n        table.remove (t, 1)\r\n        res = t\r\n      else\r\n        print \"alien test failed\"\r\n        res = t[2] --> error_message\r\n      end\r\n    end\r\n  else\r\n    res = t[2] --> error_message\r\n  end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "table.remove (t, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "res = t",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "if alien then\r\n      local subject = test[1][1]\r\n      local buf = alien.buffer (#subject)\r\n      if #subject > 0 then\r\n        alien.memmove (buf:topointer (), subject, #subject)\r\n      end\r\n      test[1][1] = buf\r\n      local t = packNT (pcall (func, unpackNT (test[1])))\r\n      if t[1] then\r\n        table.remove (t, 1)\r\n        res = t\r\n      else\r\n        print \"alien test failed\"\r\n        res = t[2] --> error_message\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "local subject = test[1][1]",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "local buf = alien.buffer (#subject)",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "if #subject > 0 then\r\n        alien.memmove (buf:topointer (), subject, #subject)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "alien.memmove (buf:topointer (), subject, #subject)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "test[1][1] = buf",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "if t[1] then\r\n        table.remove (t, 1)\r\n        res = t\r\n      else\r\n        print \"alien test failed\"\r\n        res = t[2] --> error_message\r\n      end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "print \"alien test failed\"",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "res = t[2]",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "local how = (type (res) == type (test[2])) and\r\n    (type (res) == \"string\" or eq (res, test[2]))",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "local function test_method (test, constructor, name)\r\n  local res1, res2\r\n  local subject = test[2][1]\r\n  local ok, r = pcall (constructor, unpackNT (test[1]))\r\n  if ok then\r\n    local t = packNT (pcall (r[name], r, unpackNT (test[2])))\r\n    if t[1] then\r\n      table.remove (t, 1)\r\n      res1, res2 = t\r\n    else\r\n      res1, res2 = 2, t[2] --> 2, error_message\r\n    end\r\n  else\r\n    res1, res2 = 1, r  --> 1, error_message\r\n  end\r\n  return eq (res1, test[3]), res1, res2\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "local res1, res2",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "local subject = test[2][1]",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "local ok, r = pcall (constructor, unpackNT (test[1]))",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "if ok then\r\n    local t = packNT (pcall (r[name], r, unpackNT (test[2])))\r\n    if t[1] then\r\n      table.remove (t, 1)\r\n      res1, res2 = t\r\n    else\r\n      res1, res2 = 2, t[2] --> 2, error_message\r\n    end\r\n  else\r\n    res1, res2 = 1, r  --> 1, error_message\r\n  end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "local t = packNT (pcall (r[name], r, unpackNT (test[2])))",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "if t[1] then\r\n      table.remove (t, 1)\r\n      res1, res2 = t\r\n    else\r\n      res1, res2 = 2, t[2] --> 2, error_message\r\n    end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "res1, res2 = t",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "res1, res2 = 2, t[2]",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "res1, res2 = 1, r",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "local function test_set (set, lib)\r\n  local list = {}\r\n\r\n  if type (set.Func) == \"function\" then\r\n    local func = set.Func\r\n    for i,test in ipairs (set) do\r\n      local ok, res = test_function (test, func)\r\n      if not ok then\r\n        table.insert (list, {i=i, res})\r\n      end\r\n    end\r\n\r\n  elseif type (set.Method) == \"string\" then\r\n    for i,test in ipairs (set) do\r\n      local ok, res1, res2 = test_method (test, lib.new, set.Method)\r\n      if not ok then\r\n        table.insert (list, {i=i, res1, res2})\r\n      end\r\n    end\r\n\r\n  else\r\n    error (\"neither set.Func nor set.Method is valid\")\r\n  end\r\n\r\n  return list\r\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "local list = {}",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "if type (set.Func) == \"function\" then\r\n    local func = set.Func\r\n    for i,test in ipairs (set) do\r\n      local ok, res = test_function (test, func)\r\n      if not ok then\r\n        table.insert (list, {i=i, res})\r\n      end\r\n    end\r\n\r\n  elseif type (set.Method) == \"string\" then\r\n    for i,test in ipairs (set) do\r\n      local ok, res1, res2 = test_method (test, lib.new, set.Method)\r\n      if not ok then\r\n        table.insert (list, {i=i, res1, res2})\r\n      end\r\n    end\r\n\r\n  else\r\n    error (\"neither set.Func nor set.Method is valid\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "local func = set.Func",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "for i,test in ipairs (set) do\r\n      local ok, res = test_function (test, func)\r\n      if not ok then\r\n        table.insert (list, {i=i, res})\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 75,
    "text": "local ok, res = test_function (test, func)",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "if not ok then\r\n        table.insert (list, {i=i, res})\r\n      end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "table.insert (list, {i=i, res})",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "for i,test in ipairs (set) do\r\n      local ok, res1, res2 = test_method (test, lib.new, set.Method)\r\n      if not ok then\r\n        table.insert (list, {i=i, res1, res2})\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 79,
    "text": "local ok, res1, res2 = test_method (test, lib.new, set.Method)",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "if not ok then\r\n        table.insert (list, {i=i, res1, res2})\r\n      end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "table.insert (list, {i=i, res1, res2})",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "error (\"neither set.Func nor set.Method is valid\")",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "",
    "type": "function container"
  }, {
    "id": 85,
    "text": "local function test_library (libname, setfile, verbose)\r\n  if verbose then\r\n    print ((\"[lib: %s; file: %s]\"):format (libname, setfile))\r\n  end\r\n  local lib = require (libname)\r\n  local f = require (setfile)\r\n  local sets = f (libname)\r\n\r\n  local realalien = alien\r\n  if libname == \"rex_posix\" and not lib.flags ().STARTEND and alien then\r\n    alien = nil\r\n    io.stderr:write (\"Cannot run posix tests with alien without REG_STARTEND\\n\")\r\n  end\r\n\r\n  local n = 0 -- number of failures\r\n  for _, set in ipairs (sets) do\r\n    if verbose then\r\n      print (set.Name or \"Unnamed set\")\r\n    end\r\n    local err = luatest.test_set (set, lib)\r\n    if verbose then\r\n      for _,v in ipairs (err) do\r\n        print (\"  Test \" .. v.i)\r\n        luatest.print_results (v, \"  \")\r\n      end\r\n    end\r\n    n = n + #err\r\n  end\r\n  if verbose then\r\n    print \"\"\r\n  end\r\n  alien = realalien\r\n  return n\r\nend",
    "type": "function"
  }, {
    "id": 86,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 87,
    "text": "buffer",
    "type": "global function"
  }, {
    "id": 88,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 89,
    "text": "memmove",
    "type": "global function"
  }, {
    "id": 90,
    "text": "print",
    "type": "global function"
  }, {
    "id": 91,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 92,
    "text": "error",
    "type": "global function"
  }, {
    "id": 93,
    "text": "select",
    "type": "global function"
  }, {
    "id": 94,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 95,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 96,
    "text": "write",
    "type": "global function"
  }, {
    "id": 97,
    "text": "type",
    "type": "global function"
  }, {
    "id": 98,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 99,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 100,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 101,
    "text": "",
    "type": "variable container"
  }, {
    "id": 102,
    "text": "",
    "type": "require container"
  }, {
    "id": 103,
    "text": "",
    "type": "local variable"
  }, {
    "id": 104,
    "text": "",
    "type": "string"
  }, {
    "id": 105,
    "text": "",
    "type": "interface container"
  }, {
    "id": 106,
    "text": "",
    "type": "interface"
  }, {
    "id": 107,
    "text": "",
    "type": "interface"
  }, {
    "id": 108,
    "text": "",
    "type": "interface"
  }, {
    "id": 109,
    "text": "",
    "type": "interface"
  }, {
    "id": 110,
    "text": "",
    "type": "interface"
  }, {
    "id": 111,
    "text": "",
    "type": "interface"
  }, {
    "id": 112,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 113,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 114,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 115,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 116,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 117,
    "text": "",
    "type": "require local variable"
  } ]
}