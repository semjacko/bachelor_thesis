{
  "_filename": "tools.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-odbc/test/tools.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 14
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 13
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 18,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 25,
    "label": "has",
    "to": 29
  }, {
    "from": 18,
    "label": "has",
    "to": 13
  }, {
    "from": 18,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 18,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 18,
    "label": "has",
    "to": 13
  }, {
    "from": 18,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 13
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 35,
    "label": "has",
    "to": 39
  }, {
    "from": 35,
    "label": "has",
    "to": 13
  }, {
    "from": 35,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 41,
    "label": "has",
    "to": 13
  }, {
    "from": 41,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 13
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 13
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 37
  }, {
    "from": 50,
    "label": "has",
    "to": 13
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 13
  }, {
    "from": 50,
    "label": "has",
    "to": 39
  }, {
    "from": 50,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 50,
    "label": "has",
    "to": 13
  }, {
    "from": 50,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 57,
    "label": "has",
    "to": 13
  }, {
    "from": 57,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 37
  }, {
    "from": 61,
    "label": "has",
    "to": 13
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 13
  }, {
    "from": 61,
    "label": "has",
    "to": 39
  }, {
    "from": 61,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 61,
    "label": "has",
    "to": 13
  }, {
    "from": 61,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 13
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 13
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 70,
    "label": "has",
    "to": 13
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 74,
    "label": "has",
    "to": 13
  }, {
    "from": 74,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 13
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 4
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "has",
    "to": 12
  }, {
    "from": 87,
    "label": "has",
    "to": 13
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 89,
    "label": "has",
    "to": 53
  }, {
    "from": 89,
    "label": "has",
    "to": 13
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 91,
    "label": "has",
    "to": 64
  }, {
    "from": 91,
    "label": "has",
    "to": 13
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 46,
    "label": "calls",
    "to": 41
  }, {
    "from": 41,
    "label": "calls",
    "to": 103
  }, {
    "from": 2,
    "label": "calls",
    "to": 100
  }, {
    "from": 2,
    "label": "calls",
    "to": 100
  }, {
    "from": 10,
    "label": "calls",
    "to": 97
  }, {
    "from": 57,
    "label": "calls",
    "to": 46
  }, {
    "from": 70,
    "label": "calls",
    "to": 61
  }, {
    "from": 2,
    "label": "calls",
    "to": 106
  }, {
    "from": 2,
    "label": "calls",
    "to": 104
  }, {
    "from": 57,
    "label": "calls",
    "to": 48
  }, {
    "from": 10,
    "label": "calls",
    "to": 16
  }, {
    "from": 46,
    "label": "calls",
    "to": 35
  }, {
    "from": 48,
    "label": "calls",
    "to": 35
  }, {
    "from": 66,
    "label": "calls",
    "to": 35
  }, {
    "from": 68,
    "label": "calls",
    "to": 35
  }, {
    "from": 82,
    "label": "calls",
    "to": 102
  }, {
    "from": 82,
    "label": "calls",
    "to": 102
  }, {
    "from": 41,
    "label": "calls",
    "to": 101
  }, {
    "from": 2,
    "label": "calls",
    "to": 98
  }, {
    "from": 18,
    "label": "calls",
    "to": 96
  }, {
    "from": 57,
    "label": "calls",
    "to": 50
  }, {
    "from": 93,
    "label": "calls",
    "to": 109
  }, {
    "from": 93,
    "label": "calls",
    "to": 109
  }, {
    "from": 93,
    "label": "calls",
    "to": 109
  }, {
    "from": 74,
    "label": "calls",
    "to": 109
  }, {
    "from": 80,
    "label": "calls",
    "to": 107
  }, {
    "from": 74,
    "label": "calls",
    "to": 95
  }, {
    "from": 70,
    "label": "calls",
    "to": 68
  }, {
    "from": 16,
    "label": "calls",
    "to": 108
  }, {
    "from": 74,
    "label": "calls",
    "to": 105
  }, {
    "from": 74,
    "label": "calls",
    "to": 99
  }, {
    "from": 70,
    "label": "calls",
    "to": 66
  }, {
    "from": 1,
    "label": "contains",
    "to": 93
  }, {
    "from": 93,
    "label": "declares",
    "to": 2
  }, {
    "from": 93,
    "label": "declares",
    "to": 10
  }, {
    "from": 93,
    "label": "declares",
    "to": 16
  }, {
    "from": 93,
    "label": "declares",
    "to": 18
  }, {
    "from": 93,
    "label": "declares",
    "to": 35
  }, {
    "from": 93,
    "label": "declares",
    "to": 41
  }, {
    "from": 93,
    "label": "declares",
    "to": 46
  }, {
    "from": 93,
    "label": "declares",
    "to": 48
  }, {
    "from": 93,
    "label": "declares",
    "to": 50
  }, {
    "from": 93,
    "label": "declares",
    "to": 57
  }, {
    "from": 93,
    "label": "declares",
    "to": 61
  }, {
    "from": 93,
    "label": "declares",
    "to": 66
  }, {
    "from": 93,
    "label": "declares",
    "to": 68
  }, {
    "from": 93,
    "label": "declares",
    "to": 70
  }, {
    "from": 93,
    "label": "declares",
    "to": 74
  }, {
    "from": 93,
    "label": "declares",
    "to": 80
  }, {
    "from": 93,
    "label": "declares",
    "to": 82
  }, {
    "from": 93,
    "label": "declares",
    "to": 85
  }, {
    "from": 93,
    "label": "declares",
    "to": 87
  }, {
    "from": 93,
    "label": "declares",
    "to": 89
  }, {
    "from": 93,
    "label": "declares",
    "to": 91
  }, {
    "from": 110,
    "label": "requires",
    "to": 1
  }, {
    "from": 110,
    "label": "requires",
    "to": 1
  }, {
    "from": 110,
    "label": "requires",
    "to": 1
  }, {
    "from": 110,
    "label": "requires",
    "to": 1
  }, {
    "from": 110,
    "label": "requires",
    "to": 1
  }, {
    "from": 110,
    "label": "requires",
    "to": 1
  }, {
    "from": 110,
    "label": "requires",
    "to": 1
  }, {
    "from": 110,
    "label": "requires",
    "to": 1
  }, {
    "from": 110,
    "label": "requires",
    "to": 1
  }, {
    "from": 110,
    "label": "requires",
    "to": 1
  }, {
    "from": 110,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 111
  }, {
    "from": 1,
    "label": "contains",
    "to": 112
  }, {
    "from": 111,
    "label": "initializes",
    "to": 113
  }, {
    "from": 113,
    "label": "assigns",
    "to": 114
  }, {
    "from": 111,
    "label": "initializes",
    "to": 115
  }, {
    "from": 115,
    "label": "assigns",
    "to": 116
  }, {
    "from": 111,
    "label": "initializes",
    "to": 117
  }, {
    "from": 117,
    "label": "assigns",
    "to": 118
  }, {
    "from": 112,
    "label": "initializes",
    "to": 119
  }, {
    "from": 119,
    "label": "requires",
    "to": 94
  }, {
    "from": 112,
    "label": "initializes",
    "to": 110
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "tools",
    "type": "module"
  }, {
    "id": 2,
    "text": "function run_test(arg)\r\n  local _, emsg = xpcall(function()\r\n    lunit.main(arg)\r\n  end, debug.traceback)\r\n  if emsg then\r\n    print(emsg)\r\n    os.exit(1)\r\n  end\r\n  if lunit.stats.failed > 0 then\r\n    os.exit(1)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local _, emsg = xpcall(function()\r\n    lunit.main(arg)\r\n  end, debug.traceback)",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "lunit.main(arg)",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "if emsg then\r\n    print(emsg)\r\n    os.exit(1)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "print(emsg)",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "os.exit(1)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "if lunit.stats.failed > 0 then\r\n    os.exit(1)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function is_dsn_exists(env, dsn_name)\r\n  local cnt, d = return_count(env:datasources(function(dsn) \r\n    if dsn:upper() == dsn_name:upper() then return dsn end\r\n  end))\r\n  assert((cnt == 0) or ( d:upper() == dsn_name:upper() ))\r\n  return d\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "local cnt, d = return_count(env:datasources(function(dsn) \r\n    if dsn:upper() == dsn_name:upper() then return dsn end\r\n  end))",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "if dsn:upper() == dsn_name:upper() then return dsn end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 14,
    "text": "assert((cnt == 0) or ( d:upper() == dsn_name:upper() ))",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function return_count(...)\r\n  return select('#', ...), ...\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function do_connect()\r\n  local env, cnn\r\n  local err\r\n  env,err = odbc.environment()\r\n  if env then\r\n    env:setautoclosecnn(false)\r\n    cnn,err = env:connection()\r\n    if cnn then\r\n      cnn:setautoclosestmt(false)\r\n      local ok ok, err = cnn:driverconnect(CNN_DRV)\r\n      if ok then return env, cnn end\r\n    end\r\n  end\r\n  if cnn then cnn:destroy() end\r\n  if env then env:destroy() end\r\n  return nil, err\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "local env, cnn",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "local err",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "env,err = odbc.environment()",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "if env then\r\n    env:setautoclosecnn(false)\r\n    cnn,err = env:connection()\r\n    if cnn then\r\n      cnn:setautoclosestmt(false)\r\n      local ok ok, err = cnn:driverconnect(CNN_DRV)\r\n      if ok then return env, cnn end\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "env:setautoclosecnn(false)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "cnn,err = env:connection()",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "if cnn then\r\n      cnn:setautoclosestmt(false)\r\n      local ok ok, err = cnn:driverconnect(CNN_DRV)\r\n      if ok then return env, cnn end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "cnn:setautoclosestmt(false)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "local ok",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "ok, err = cnn:driverconnect(CNN_DRV)",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "if ok then return env, cnn end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "if cnn then cnn:destroy() end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "cnn:destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "if env then env:destroy() end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "env:destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function exec_ddl(cnn, cmd)\r\n  local stmt, err = cnn:statement()\r\n  if not stmt then return nil, err end\r\n  local ok, err = stmt:execute (cmd)\r\n  stmt:destroy()\r\n  return ok, err \r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "local stmt, err = cnn:statement()",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "if not stmt then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "local ok, err = stmt:execute (cmd)",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "stmt:destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function define_table (n)\r\n  local t = {}\r\n  for i = 1, n do\r\n    table.insert (t, \"f\"..i..\" \"..DEFINITION_STRING_TYPE_NAME)\r\n  end\r\n  return \"create table \" .. TEST_TABLE_NAME .. \" (\"..table.concat (t, ',')..\")\"\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "for i = 1, n do\r\n    table.insert (t, \"f\"..i..\" \"..DEFINITION_STRING_TYPE_NAME)\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 44,
    "text": "table.insert (t, \"f\"..i..\" \"..DEFINITION_STRING_TYPE_NAME)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function create_table (cnn)\r\n  return exec_ddl(cnn, define_table(TOTAL_FIELDS))\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function drop_table(cnn)\r\n  return exec_ddl(cnn, 'drop table ' .. TEST_TABLE_NAME)\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function table_exists(cnn)\r\n  local stmt, err = cnn:tables()\r\n  if not stmt then return nil, err end\r\n  local found, err = stmt:foreach(function(_,_,t)\r\n    if t:lower() == TEST_TABLE_NAME:lower() then return true end\r\n  end)\r\n  stmt:destroy()\r\n  if (not found) and (not err) then found = false end\r\n  return found, err\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "local stmt, err = cnn:tables()",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "local found, err = stmt:foreach(function(_,_,t)\r\n    if t:lower() == TEST_TABLE_NAME:lower() then return true end\r\n  end)",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "if t:lower() == TEST_TABLE_NAME:lower() then return true end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "if (not found) and (not err) then found = false end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "found = false",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function ensure_table(cnn)\r\n  if table_exists(cnn) then drop_table(cnn) end\r\n  return create_table(cnn)\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "if table_exists(cnn) then drop_table(cnn) end",
    "type": "statement:if"
  }, {
    "id": 59,
    "text": "drop_table(cnn)",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function proc_exists(cnn)\r\n  local stmt, err = cnn:procedures()\r\n  if not stmt then return nil, err end\r\n  local found, err = stmt:foreach(function(_,_,t)\r\n    if t:lower() == TEST_PROC_NAME:lower() then return true end\r\n  end)\r\n  stmt:destroy()\r\n  if (not found) and (not err) then found = false end\r\n  return found, err\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "local stmt, err = cnn:procedures()",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "local found, err = stmt:foreach(function(_,_,t)\r\n    if t:lower() == TEST_PROC_NAME:lower() then return true end\r\n  end)",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "if t:lower() == TEST_PROC_NAME:lower() then return true end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function create_proc (cnn)\r\n  return exec_ddl(cnn, TEST_PROC_CREATE)\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "function drop_proc(cnn)\r\n  return exec_ddl(cnn, TEST_PROC_DROP)\r\nend",
    "type": "function"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function ensure_proc(cnn)\r\n  if proc_exists(cnn) then drop_proc(cnn) end\r\n  return create_proc(cnn)\r\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "if proc_exists(cnn) then drop_proc(cnn) end",
    "type": "statement:if"
  }, {
    "id": 72,
    "text": "drop_proc(cnn)",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function TEST_CASE (name)\r\n  local lunit = require\"lunit\"\r\n  if not IS_LUA52 then\r\n    module(name, package.seeall, lunit.testcase)\r\n    setfenv(2, _M)\r\n  else\r\n    return lunit.module(name, 'seeall')\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 75,
    "text": "local lunit = require\"lunit\"",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "if not IS_LUA52 then\r\n    module(name, package.seeall, lunit.testcase)\r\n    setfenv(2, _M)\r\n  else\r\n    return lunit.module(name, 'seeall')\r\n  end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "module(name, package.seeall, lunit.testcase)",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "setfenv(2, _M)",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "function weak_ptr(val)\r\n  return setmetatable({value = val},{__mode = 'v'})\r\nend",
    "type": "function"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "function gc_collect()\r\n  collectgarbage(\"collect\")\r\n  collectgarbage(\"collect\")\r\nend",
    "type": "function"
  }, {
    "id": 83,
    "text": "collectgarbage(\"collect\")",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "function()\r\n    lunit.main(arg)\r\n  end",
    "type": "function"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "function(dsn) \r\n    if dsn:upper() == dsn_name:upper() then return dsn end\r\n  end",
    "type": "function"
  }, {
    "id": 88,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 89,
    "text": "function(_,_,t)\r\n    if t:lower() == TEST_TABLE_NAME:lower() then return true end\r\n  end",
    "type": "function"
  }, {
    "id": 90,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 91,
    "text": "function(_,_,t)\r\n    if t:lower() == TEST_PROC_NAME:lower() then return true end\r\n  end",
    "type": "function"
  }, {
    "id": 92,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 93,
    "text": "",
    "type": "function container"
  }, {
    "id": 94,
    "text": "lunit",
    "type": "module"
  }, {
    "id": 95,
    "text": "module",
    "type": "global function"
  }, {
    "id": 96,
    "text": "environment",
    "type": "global function"
  }, {
    "id": 97,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 98,
    "text": "print",
    "type": "global function"
  }, {
    "id": 99,
    "text": "module",
    "type": "global function"
  }, {
    "id": 100,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 101,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 102,
    "text": "collectgarbage",
    "type": "global function"
  }, {
    "id": 103,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 104,
    "text": "xpcall",
    "type": "global function"
  }, {
    "id": 105,
    "text": "setfenv",
    "type": "global function"
  }, {
    "id": 106,
    "text": "main",
    "type": "global function"
  }, {
    "id": 107,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 108,
    "text": "select",
    "type": "global function"
  }, {
    "id": 109,
    "text": "require",
    "type": "global function"
  }, {
    "id": 110,
    "text": "",
    "type": "global variable"
  }, {
    "id": 111,
    "text": "",
    "type": "variable container"
  }, {
    "id": 112,
    "text": "",
    "type": "require container"
  }, {
    "id": 113,
    "text": "",
    "type": "global variable"
  }, {
    "id": 114,
    "text": "",
    "type": "n/a"
  }, {
    "id": 115,
    "text": "",
    "type": "global variable"
  }, {
    "id": 116,
    "text": "",
    "type": "n/a"
  }, {
    "id": 117,
    "text": "",
    "type": "global variable"
  }, {
    "id": 118,
    "text": "",
    "type": "n/a"
  }, {
    "id": 119,
    "text": "",
    "type": "require local variable"
  } ]
}