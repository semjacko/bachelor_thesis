{
  "_filename": "dba.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-odbc/lua/odbc/dba.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 8
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 7
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 14
  }, {
    "from": 10,
    "label": "has",
    "to": 7
  }, {
    "from": 10,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 12
  }, {
    "from": 16,
    "label": "has",
    "to": 7
  }, {
    "from": 16,
    "label": "has",
    "to": 13
  }, {
    "from": 16,
    "label": "has",
    "to": 14
  }, {
    "from": 16,
    "label": "has",
    "to": 7
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 7
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 19,
    "label": "has",
    "to": 7
  }, {
    "from": 19,
    "label": "has",
    "to": 7
  }, {
    "from": 19,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 7
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 7
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 7
  }, {
    "from": 28,
    "label": "has",
    "to": 7
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 7
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 33,
    "label": "has",
    "to": 7
  }, {
    "from": 33,
    "label": "has",
    "to": 40
  }, {
    "from": 33,
    "label": "has",
    "to": 7
  }, {
    "from": 33,
    "label": "has",
    "to": 41
  }, {
    "from": 33,
    "label": "has",
    "to": 42
  }, {
    "from": 33,
    "label": "has",
    "to": 7
  }, {
    "from": 33,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 33,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 6
  }, {
    "from": 44,
    "label": "has",
    "to": 7
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 44,
    "label": "has",
    "to": 7
  }, {
    "from": 44,
    "label": "has",
    "to": 7
  }, {
    "from": 44,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 45
  }, {
    "from": 50,
    "label": "has",
    "to": 6
  }, {
    "from": 50,
    "label": "has",
    "to": 7
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 50,
    "label": "has",
    "to": 7
  }, {
    "from": 50,
    "label": "has",
    "to": 7
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 7
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 55,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 7
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 7
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 12
  }, {
    "from": 63,
    "label": "has",
    "to": 7
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 63,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 63,
    "label": "has",
    "to": 68
  }, {
    "from": 63,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 63,
    "label": "has",
    "to": 7
  }, {
    "from": 63,
    "label": "has",
    "to": 7
  }, {
    "from": 63,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 7
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 74,
    "label": "has",
    "to": 7
  }, {
    "from": 74,
    "label": "has",
    "to": 7
  }, {
    "from": 74,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 75
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 80,
    "label": "has",
    "to": 83
  }, {
    "from": 80,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 85,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 90,
    "label": "has",
    "to": 93
  }, {
    "from": 90,
    "label": "has",
    "to": 94
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 90,
    "label": "has",
    "to": 95
  }, {
    "from": 90,
    "label": "has",
    "to": 96
  }, {
    "from": 85,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 85,
    "label": "has",
    "to": 99
  }, {
    "from": 85,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 100,
    "label": "has",
    "to": 102
  }, {
    "from": 85,
    "label": "has",
    "to": 12
  }, {
    "from": 85,
    "label": "has",
    "to": 7
  }, {
    "from": 85,
    "label": "has",
    "to": 103
  }, {
    "from": 85,
    "label": "has",
    "to": 7
  }, {
    "from": 85,
    "label": "has",
    "to": 104
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 105,
    "label": "has",
    "to": 75
  }, {
    "from": 105,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 105,
    "label": "has",
    "to": 109
  }, {
    "from": 105,
    "label": "has",
    "to": 110
  }, {
    "from": 105,
    "label": "has",
    "to": 7
  }, {
    "from": 105,
    "label": "has",
    "to": 111
  }, {
    "from": 105,
    "label": "has",
    "to": 7
  }, {
    "from": 105,
    "label": "has",
    "to": 112
  }, {
    "from": 113,
    "label": "has",
    "to": 7
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 115,
    "label": "has",
    "to": 21
  }, {
    "from": 115,
    "label": "has",
    "to": 7
  }, {
    "from": 115,
    "label": "has",
    "to": 117
  }, {
    "from": 115,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 26
  }, {
    "from": 115,
    "label": "has",
    "to": 7
  }, {
    "from": 115,
    "label": "has",
    "to": 7
  }, {
    "from": 115,
    "label": "has",
    "to": 119
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 120,
    "label": "has",
    "to": 122
  }, {
    "from": 120,
    "label": "has",
    "to": 7
  }, {
    "from": 120,
    "label": "has",
    "to": 123
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 124,
    "label": "has",
    "to": 126
  }, {
    "from": 124,
    "label": "has",
    "to": 127
  }, {
    "from": 124,
    "label": "has",
    "to": 21
  }, {
    "from": 124,
    "label": "has",
    "to": 7
  }, {
    "from": 124,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 128,
    "label": "has",
    "to": 130
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 130,
    "label": "has",
    "to": 132
  }, {
    "from": 130,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 26
  }, {
    "from": 130,
    "label": "has",
    "to": 134
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 135,
    "label": "has",
    "to": 137
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 137,
    "label": "has",
    "to": 139
  }, {
    "from": 139,
    "label": "has",
    "to": 26
  }, {
    "from": 137,
    "label": "has",
    "to": 26
  }, {
    "from": 130,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 140,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 26
  }, {
    "from": 124,
    "label": "has",
    "to": 7
  }, {
    "from": 124,
    "label": "has",
    "to": 7
  }, {
    "from": 124,
    "label": "has",
    "to": 7
  }, {
    "from": 124,
    "label": "has",
    "to": 7
  }, {
    "from": 124,
    "label": "has",
    "to": 143
  }, {
    "from": 124,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 26
  }, {
    "from": 124,
    "label": "has",
    "to": 7
  }, {
    "from": 124,
    "label": "has",
    "to": 144
  }, {
    "from": 124,
    "label": "has",
    "to": 7
  }, {
    "from": 124,
    "label": "has",
    "to": 26
  }, {
    "from": 124,
    "label": "has",
    "to": 7
  }, {
    "from": 124,
    "label": "has",
    "to": 145
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 146,
    "label": "has",
    "to": 148
  }, {
    "from": 146,
    "label": "has",
    "to": 7
  }, {
    "from": 146,
    "label": "has",
    "to": 149
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 146,
    "label": "has",
    "to": 7
  }, {
    "from": 146,
    "label": "has",
    "to": 7
  }, {
    "from": 146,
    "label": "has",
    "to": 151
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 152,
    "label": "has",
    "to": 21
  }, {
    "from": 152,
    "label": "has",
    "to": 7
  }, {
    "from": 152,
    "label": "has",
    "to": 154
  }, {
    "from": 152,
    "label": "has",
    "to": 7
  }, {
    "from": 152,
    "label": "has",
    "to": 155
  }, {
    "from": 152,
    "label": "has",
    "to": 26
  }, {
    "from": 152,
    "label": "has",
    "to": 7
  }, {
    "from": 152,
    "label": "has",
    "to": 156
  }, {
    "from": 157,
    "label": "has",
    "to": 153
  }, {
    "from": 157,
    "label": "has",
    "to": 21
  }, {
    "from": 157,
    "label": "has",
    "to": 7
  }, {
    "from": 157,
    "label": "has",
    "to": 154
  }, {
    "from": 157,
    "label": "has",
    "to": 7
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 157,
    "label": "has",
    "to": 26
  }, {
    "from": 157,
    "label": "has",
    "to": 159
  }, {
    "from": 157,
    "label": "has",
    "to": 7
  }, {
    "from": 157,
    "label": "has",
    "to": 7
  }, {
    "from": 157,
    "label": "has",
    "to": 160
  }, {
    "from": 161,
    "label": "has",
    "to": 7
  }, {
    "from": 162,
    "label": "has",
    "to": 7
  }, {
    "from": 163,
    "label": "has",
    "to": 7
  }, {
    "from": 164,
    "label": "has",
    "to": 165
  }, {
    "from": 164,
    "label": "has",
    "to": 110
  }, {
    "from": 164,
    "label": "has",
    "to": 7
  }, {
    "from": 164,
    "label": "has",
    "to": 7
  }, {
    "from": 164,
    "label": "has",
    "to": 166
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 167,
    "label": "has",
    "to": 169
  }, {
    "from": 167,
    "label": "has",
    "to": 170
  }, {
    "from": 170,
    "label": "has",
    "to": 171
  }, {
    "from": 167,
    "label": "has",
    "to": 172
  }, {
    "from": 167,
    "label": "has",
    "to": 173
  }, {
    "from": 167,
    "label": "has",
    "to": 21
  }, {
    "from": 167,
    "label": "has",
    "to": 7
  }, {
    "from": 167,
    "label": "has",
    "to": 154
  }, {
    "from": 167,
    "label": "has",
    "to": 7
  }, {
    "from": 167,
    "label": "has",
    "to": 174
  }, {
    "from": 167,
    "label": "has",
    "to": 7
  }, {
    "from": 167,
    "label": "has",
    "to": 175
  }, {
    "from": 176,
    "label": "has",
    "to": 7
  }, {
    "from": 177,
    "label": "has",
    "to": 7
  }, {
    "from": 178,
    "label": "has",
    "to": 7
  }, {
    "from": 179,
    "label": "has",
    "to": 7
  }, {
    "from": 180,
    "label": "has",
    "to": 173
  }, {
    "from": 180,
    "label": "has",
    "to": 181
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 180,
    "label": "has",
    "to": 183
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 180,
    "label": "has",
    "to": 174
  }, {
    "from": 180,
    "label": "has",
    "to": 7
  }, {
    "from": 180,
    "label": "has",
    "to": 185
  }, {
    "from": 186,
    "label": "has",
    "to": 7
  }, {
    "from": 187,
    "label": "has",
    "to": 7
  }, {
    "from": 188,
    "label": "has",
    "to": 7
  }, {
    "from": 189,
    "label": "has",
    "to": 7
  }, {
    "from": 190,
    "label": "has",
    "to": 191
  }, {
    "from": 190,
    "label": "has",
    "to": 168
  }, {
    "from": 190,
    "label": "has",
    "to": 192
  }, {
    "from": 190,
    "label": "has",
    "to": 193
  }, {
    "from": 190,
    "label": "has",
    "to": 194
  }, {
    "from": 194,
    "label": "has",
    "to": 195
  }, {
    "from": 194,
    "label": "has",
    "to": 196
  }, {
    "from": 190,
    "label": "has",
    "to": 197
  }, {
    "from": 190,
    "label": "has",
    "to": 7
  }, {
    "from": 190,
    "label": "has",
    "to": 7
  }, {
    "from": 190,
    "label": "has",
    "to": 198
  }, {
    "from": 199,
    "label": "has",
    "to": 75
  }, {
    "from": 199,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 199,
    "label": "has",
    "to": 83
  }, {
    "from": 199,
    "label": "has",
    "to": 200
  }, {
    "from": 201,
    "label": "has",
    "to": 75
  }, {
    "from": 201,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 201,
    "label": "has",
    "to": 7
  }, {
    "from": 201,
    "label": "has",
    "to": 7
  }, {
    "from": 201,
    "label": "has",
    "to": 202
  }, {
    "from": 203,
    "label": "has",
    "to": 7
  }, {
    "from": 203,
    "label": "has",
    "to": 204
  }, {
    "from": 205,
    "label": "has",
    "to": 7
  }, {
    "from": 205,
    "label": "has",
    "to": 206
  }, {
    "from": 207,
    "label": "has",
    "to": 7
  }, {
    "from": 207,
    "label": "has",
    "to": 208
  }, {
    "from": 209,
    "label": "has",
    "to": 7
  }, {
    "from": 209,
    "label": "has",
    "to": 210
  }, {
    "from": 211,
    "label": "has",
    "to": 7
  }, {
    "from": 211,
    "label": "has",
    "to": 212
  }, {
    "from": 213,
    "label": "has",
    "to": 214
  }, {
    "from": 213,
    "label": "has",
    "to": 7
  }, {
    "from": 213,
    "label": "has",
    "to": 215
  }, {
    "from": 213,
    "label": "has",
    "to": 216
  }, {
    "from": 213,
    "label": "has",
    "to": 217
  }, {
    "from": 213,
    "label": "has",
    "to": 7
  }, {
    "from": 213,
    "label": "has",
    "to": 7
  }, {
    "from": 213,
    "label": "has",
    "to": 218
  }, {
    "from": 219,
    "label": "has",
    "to": 220
  }, {
    "from": 220,
    "label": "has",
    "to": 221
  }, {
    "from": 220,
    "label": "has",
    "to": 110
  }, {
    "from": 220,
    "label": "has",
    "to": 222
  }, {
    "from": 219,
    "label": "has",
    "to": 7
  }, {
    "from": 219,
    "label": "has",
    "to": 7
  }, {
    "from": 219,
    "label": "has",
    "to": 223
  }, {
    "from": 224,
    "label": "has",
    "to": 225
  }, {
    "from": 224,
    "label": "has",
    "to": 226
  }, {
    "from": 224,
    "label": "has",
    "to": 227
  }, {
    "from": 224,
    "label": "has",
    "to": 7
  }, {
    "from": 224,
    "label": "has",
    "to": 228
  }, {
    "from": 224,
    "label": "has",
    "to": 7
  }, {
    "from": 224,
    "label": "has",
    "to": 75
  }, {
    "from": 224,
    "label": "has",
    "to": 229
  }, {
    "from": 229,
    "label": "has",
    "to": 230
  }, {
    "from": 229,
    "label": "has",
    "to": 231
  }, {
    "from": 231,
    "label": "has",
    "to": 232
  }, {
    "from": 232,
    "label": "has",
    "to": 233
  }, {
    "from": 233,
    "label": "has",
    "to": 234
  }, {
    "from": 233,
    "label": "has",
    "to": 235
  }, {
    "from": 233,
    "label": "has",
    "to": 236
  }, {
    "from": 229,
    "label": "has",
    "to": 237
  }, {
    "from": 224,
    "label": "has",
    "to": 7
  }, {
    "from": 224,
    "label": "has",
    "to": 7
  }, {
    "from": 224,
    "label": "has",
    "to": 7
  }, {
    "from": 224,
    "label": "has",
    "to": 238
  }, {
    "from": 238,
    "label": "has",
    "to": 239
  }, {
    "from": 239,
    "label": "has",
    "to": 240
  }, {
    "from": 239,
    "label": "has",
    "to": 241
  }, {
    "from": 241,
    "label": "has",
    "to": 230
  }, {
    "from": 241,
    "label": "has",
    "to": 242
  }, {
    "from": 242,
    "label": "has",
    "to": 243
  }, {
    "from": 243,
    "label": "has",
    "to": 244
  }, {
    "from": 243,
    "label": "has",
    "to": 235
  }, {
    "from": 243,
    "label": "has",
    "to": 236
  }, {
    "from": 241,
    "label": "has",
    "to": 245
  }, {
    "from": 238,
    "label": "has",
    "to": 246
  }, {
    "from": 246,
    "label": "has",
    "to": 247
  }, {
    "from": 246,
    "label": "has",
    "to": 248
  }, {
    "from": 224,
    "label": "has",
    "to": 7
  }, {
    "from": 224,
    "label": "has",
    "to": 7
  }, {
    "from": 224,
    "label": "has",
    "to": 7
  }, {
    "from": 224,
    "label": "has",
    "to": 7
  }, {
    "from": 224,
    "label": "has",
    "to": 7
  }, {
    "from": 224,
    "label": "has",
    "to": 7
  }, {
    "from": 224,
    "label": "has",
    "to": 7
  }, {
    "from": 224,
    "label": "has",
    "to": 249
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 250,
    "label": "has",
    "to": 7
  }, {
    "from": 250,
    "label": "has",
    "to": 252
  }, {
    "from": 252,
    "label": "has",
    "to": 253
  }, {
    "from": 250,
    "label": "has",
    "to": 254
  }, {
    "from": 254,
    "label": "has",
    "to": 221
  }, {
    "from": 254,
    "label": "has",
    "to": 110
  }, {
    "from": 250,
    "label": "has",
    "to": 7
  }, {
    "from": 250,
    "label": "has",
    "to": 222
  }, {
    "from": 250,
    "label": "has",
    "to": 255
  }, {
    "from": 250,
    "label": "has",
    "to": 7
  }, {
    "from": 250,
    "label": "has",
    "to": 256
  }, {
    "from": 256,
    "label": "has",
    "to": 129
  }, {
    "from": 256,
    "label": "has",
    "to": 257
  }, {
    "from": 256,
    "label": "has",
    "to": 258
  }, {
    "from": 250,
    "label": "has",
    "to": 7
  }, {
    "from": 250,
    "label": "has",
    "to": 259
  }, {
    "from": 250,
    "label": "has",
    "to": 7
  }, {
    "from": 250,
    "label": "has",
    "to": 7
  }, {
    "from": 250,
    "label": "has",
    "to": 260
  }, {
    "from": 261,
    "label": "has",
    "to": 262
  }, {
    "from": 261,
    "label": "has",
    "to": 110
  }, {
    "from": 261,
    "label": "has",
    "to": 7
  }, {
    "from": 261,
    "label": "has",
    "to": 263
  }, {
    "from": 261,
    "label": "has",
    "to": 7
  }, {
    "from": 261,
    "label": "has",
    "to": 7
  }, {
    "from": 261,
    "label": "has",
    "to": 264
  }, {
    "from": 265,
    "label": "has",
    "to": 7
  }, {
    "from": 265,
    "label": "has",
    "to": 266
  }, {
    "from": 267,
    "label": "has",
    "to": 251
  }, {
    "from": 267,
    "label": "has",
    "to": 7
  }, {
    "from": 267,
    "label": "has",
    "to": 262
  }, {
    "from": 267,
    "label": "has",
    "to": 110
  }, {
    "from": 267,
    "label": "has",
    "to": 7
  }, {
    "from": 267,
    "label": "has",
    "to": 268
  }, {
    "from": 268,
    "label": "has",
    "to": 269
  }, {
    "from": 267,
    "label": "has",
    "to": 7
  }, {
    "from": 267,
    "label": "has",
    "to": 7
  }, {
    "from": 267,
    "label": "has",
    "to": 270
  }, {
    "from": 271,
    "label": "has",
    "to": 153
  }, {
    "from": 271,
    "label": "has",
    "to": 21
  }, {
    "from": 271,
    "label": "has",
    "to": 7
  }, {
    "from": 271,
    "label": "has",
    "to": 272
  }, {
    "from": 271,
    "label": "has",
    "to": 7
  }, {
    "from": 271,
    "label": "has",
    "to": 155
  }, {
    "from": 271,
    "label": "has",
    "to": 273
  }, {
    "from": 271,
    "label": "has",
    "to": 7
  }, {
    "from": 271,
    "label": "has",
    "to": 274
  }, {
    "from": 275,
    "label": "has",
    "to": 153
  }, {
    "from": 275,
    "label": "has",
    "to": 21
  }, {
    "from": 275,
    "label": "has",
    "to": 7
  }, {
    "from": 275,
    "label": "has",
    "to": 272
  }, {
    "from": 275,
    "label": "has",
    "to": 7
  }, {
    "from": 275,
    "label": "has",
    "to": 158
  }, {
    "from": 275,
    "label": "has",
    "to": 273
  }, {
    "from": 275,
    "label": "has",
    "to": 159
  }, {
    "from": 275,
    "label": "has",
    "to": 7
  }, {
    "from": 275,
    "label": "has",
    "to": 7
  }, {
    "from": 275,
    "label": "has",
    "to": 276
  }, {
    "from": 277,
    "label": "has",
    "to": 7
  }, {
    "from": 278,
    "label": "has",
    "to": 7
  }, {
    "from": 279,
    "label": "has",
    "to": 7
  }, {
    "from": 280,
    "label": "has",
    "to": 165
  }, {
    "from": 280,
    "label": "has",
    "to": 110
  }, {
    "from": 280,
    "label": "has",
    "to": 7
  }, {
    "from": 280,
    "label": "has",
    "to": 7
  }, {
    "from": 280,
    "label": "has",
    "to": 281
  }, {
    "from": 282,
    "label": "has",
    "to": 283
  }, {
    "from": 282,
    "label": "has",
    "to": 284
  }, {
    "from": 282,
    "label": "has",
    "to": 285
  }, {
    "from": 285,
    "label": "has",
    "to": 286
  }, {
    "from": 285,
    "label": "has",
    "to": 287
  }, {
    "from": 287,
    "label": "has",
    "to": 286
  }, {
    "from": 287,
    "label": "has",
    "to": 288
  }, {
    "from": 285,
    "label": "has",
    "to": 288
  }, {
    "from": 285,
    "label": "has",
    "to": 286
  }, {
    "from": 285,
    "label": "has",
    "to": 289
  }, {
    "from": 282,
    "label": "has",
    "to": 290
  }, {
    "from": 290,
    "label": "has",
    "to": 291
  }, {
    "from": 282,
    "label": "has",
    "to": 7
  }, {
    "from": 282,
    "label": "has",
    "to": 7
  }, {
    "from": 282,
    "label": "has",
    "to": 292
  }, {
    "from": 282,
    "label": "has",
    "to": 110
  }, {
    "from": 282,
    "label": "has",
    "to": 7
  }, {
    "from": 282,
    "label": "has",
    "to": 7
  }, {
    "from": 282,
    "label": "has",
    "to": 293
  }, {
    "from": 294,
    "label": "has",
    "to": 7
  }, {
    "from": 295,
    "label": "has",
    "to": 7
  }, {
    "from": 296,
    "label": "has",
    "to": 7
  }, {
    "from": 297,
    "label": "has",
    "to": 7
  }, {
    "from": 298,
    "label": "has",
    "to": 299
  }, {
    "from": 298,
    "label": "has",
    "to": 181
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 298,
    "label": "has",
    "to": 7
  }, {
    "from": 298,
    "label": "has",
    "to": 300
  }, {
    "from": 301,
    "label": "has",
    "to": 7
  }, {
    "from": 302,
    "label": "has",
    "to": 7
  }, {
    "from": 303,
    "label": "has",
    "to": 7
  }, {
    "from": 304,
    "label": "has",
    "to": 7
  }, {
    "from": 305,
    "label": "has",
    "to": 191
  }, {
    "from": 305,
    "label": "has",
    "to": 192
  }, {
    "from": 305,
    "label": "has",
    "to": 306
  }, {
    "from": 305,
    "label": "has",
    "to": 307
  }, {
    "from": 305,
    "label": "has",
    "to": 308
  }, {
    "from": 305,
    "label": "has",
    "to": 197
  }, {
    "from": 305,
    "label": "has",
    "to": 7
  }, {
    "from": 305,
    "label": "has",
    "to": 7
  }, {
    "from": 305,
    "label": "has",
    "to": 309
  }, {
    "from": 310,
    "label": "has",
    "to": 7
  }, {
    "from": 310,
    "label": "has",
    "to": 311
  }, {
    "from": 312,
    "label": "has",
    "to": 125
  }, {
    "from": 312,
    "label": "has",
    "to": 313
  }, {
    "from": 312,
    "label": "has",
    "to": 7
  }, {
    "from": 312,
    "label": "has",
    "to": 314
  }, {
    "from": 312,
    "label": "has",
    "to": 7
  }, {
    "from": 312,
    "label": "has",
    "to": 315
  }, {
    "from": 312,
    "label": "has",
    "to": 75
  }, {
    "from": 312,
    "label": "has",
    "to": 316
  }, {
    "from": 312,
    "label": "has",
    "to": 317
  }, {
    "from": 312,
    "label": "has",
    "to": 318
  }, {
    "from": 318,
    "label": "has",
    "to": 319
  }, {
    "from": 318,
    "label": "has",
    "to": 320
  }, {
    "from": 312,
    "label": "has",
    "to": 7
  }, {
    "from": 312,
    "label": "has",
    "to": 321
  }, {
    "from": 322,
    "label": "has",
    "to": 7
  }, {
    "from": 322,
    "label": "has",
    "to": 323
  }, {
    "from": 324,
    "label": "has",
    "to": 75
  }, {
    "from": 324,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 324,
    "label": "has",
    "to": 83
  }, {
    "from": 324,
    "label": "has",
    "to": 325
  }, {
    "from": 326,
    "label": "has",
    "to": 75
  }, {
    "from": 326,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 326,
    "label": "has",
    "to": 7
  }, {
    "from": 326,
    "label": "has",
    "to": 7
  }, {
    "from": 326,
    "label": "has",
    "to": 327
  }, {
    "from": 328,
    "label": "has",
    "to": 7
  }, {
    "from": 328,
    "label": "has",
    "to": 329
  }, {
    "from": 330,
    "label": "has",
    "to": 7
  }, {
    "from": 330,
    "label": "has",
    "to": 331
  }, {
    "from": 332,
    "label": "has",
    "to": 333
  }, {
    "from": 332,
    "label": "has",
    "to": 7
  }, {
    "from": 332,
    "label": "has",
    "to": 334
  }, {
    "from": 332,
    "label": "has",
    "to": 7
  }, {
    "from": 332,
    "label": "has",
    "to": 335
  }, {
    "from": 335,
    "label": "has",
    "to": 336
  }, {
    "from": 335,
    "label": "has",
    "to": 337
  }, {
    "from": 335,
    "label": "has",
    "to": 338
  }, {
    "from": 332,
    "label": "has",
    "to": 7
  }, {
    "from": 332,
    "label": "has",
    "to": 339
  }, {
    "from": 332,
    "label": "has",
    "to": 7
  }, {
    "from": 332,
    "label": "has",
    "to": 340
  }, {
    "from": 341,
    "label": "has",
    "to": 333
  }, {
    "from": 341,
    "label": "has",
    "to": 7
  }, {
    "from": 341,
    "label": "has",
    "to": 342
  }, {
    "from": 341,
    "label": "has",
    "to": 343
  }, {
    "from": 341,
    "label": "has",
    "to": 7
  }, {
    "from": 341,
    "label": "has",
    "to": 7
  }, {
    "from": 341,
    "label": "has",
    "to": 344
  }, {
    "from": 345,
    "label": "has",
    "to": 333
  }, {
    "from": 345,
    "label": "has",
    "to": 7
  }, {
    "from": 345,
    "label": "has",
    "to": 346
  }, {
    "from": 345,
    "label": "has",
    "to": 347
  }, {
    "from": 347,
    "label": "has",
    "to": 348
  }, {
    "from": 347,
    "label": "has",
    "to": 343
  }, {
    "from": 347,
    "label": "has",
    "to": 336
  }, {
    "from": 347,
    "label": "has",
    "to": 337
  }, {
    "from": 347,
    "label": "has",
    "to": 338
  }, {
    "from": 345,
    "label": "has",
    "to": 7
  }, {
    "from": 345,
    "label": "has",
    "to": 7
  }, {
    "from": 345,
    "label": "has",
    "to": 339
  }, {
    "from": 345,
    "label": "has",
    "to": 7
  }, {
    "from": 345,
    "label": "has",
    "to": 349
  }, {
    "from": 350,
    "label": "has",
    "to": 333
  }, {
    "from": 350,
    "label": "has",
    "to": 7
  }, {
    "from": 350,
    "label": "has",
    "to": 351
  }, {
    "from": 350,
    "label": "has",
    "to": 343
  }, {
    "from": 350,
    "label": "has",
    "to": 7
  }, {
    "from": 350,
    "label": "has",
    "to": 7
  }, {
    "from": 350,
    "label": "has",
    "to": 352
  }, {
    "from": 353,
    "label": "has",
    "to": 333
  }, {
    "from": 353,
    "label": "has",
    "to": 7
  }, {
    "from": 353,
    "label": "has",
    "to": 7
  }, {
    "from": 353,
    "label": "has",
    "to": 354
  }, {
    "from": 355,
    "label": "has",
    "to": 333
  }, {
    "from": 355,
    "label": "has",
    "to": 7
  }, {
    "from": 355,
    "label": "has",
    "to": 7
  }, {
    "from": 355,
    "label": "has",
    "to": 356
  }, {
    "from": 357,
    "label": "has",
    "to": 358
  }, {
    "from": 357,
    "label": "has",
    "to": 359
  }, {
    "from": 357,
    "label": "has",
    "to": 7
  }, {
    "from": 357,
    "label": "has",
    "to": 360
  }, {
    "from": 361,
    "label": "has",
    "to": 362
  }, {
    "from": 361,
    "label": "has",
    "to": 363
  }, {
    "from": 361,
    "label": "has",
    "to": 7
  }, {
    "from": 361,
    "label": "has",
    "to": 7
  }, {
    "from": 361,
    "label": "has",
    "to": 364
  }, {
    "from": 365,
    "label": "has",
    "to": 366
  }, {
    "from": 365,
    "label": "has",
    "to": 7
  }, {
    "from": 365,
    "label": "has",
    "to": 367
  }, {
    "from": 365,
    "label": "has",
    "to": 368
  }, {
    "from": 365,
    "label": "has",
    "to": 7
  }, {
    "from": 365,
    "label": "has",
    "to": 369
  }, {
    "from": 365,
    "label": "has",
    "to": 7
  }, {
    "from": 365,
    "label": "has",
    "to": 370
  }, {
    "from": 365,
    "label": "has",
    "to": 7
  }, {
    "from": 365,
    "label": "has",
    "to": 371
  }, {
    "from": 365,
    "label": "has",
    "to": 7
  }, {
    "from": 365,
    "label": "has",
    "to": 7
  }, {
    "from": 365,
    "label": "has",
    "to": 372
  }, {
    "from": 373,
    "label": "has",
    "to": 374
  }, {
    "from": 373,
    "label": "has",
    "to": 375
  }, {
    "from": 373,
    "label": "has",
    "to": 376
  }, {
    "from": 373,
    "label": "has",
    "to": 377
  }, {
    "from": 373,
    "label": "has",
    "to": 378
  }, {
    "from": 378,
    "label": "has",
    "to": 379
  }, {
    "from": 378,
    "label": "has",
    "to": 380
  }, {
    "from": 378,
    "label": "has",
    "to": 381
  }, {
    "from": 381,
    "label": "has",
    "to": 382
  }, {
    "from": 381,
    "label": "has",
    "to": 383
  }, {
    "from": 381,
    "label": "has",
    "to": 384
  }, {
    "from": 378,
    "label": "has",
    "to": 385
  }, {
    "from": 378,
    "label": "has",
    "to": 21
  }, {
    "from": 378,
    "label": "has",
    "to": 7
  }, {
    "from": 378,
    "label": "has",
    "to": 174
  }, {
    "from": 378,
    "label": "has",
    "to": 386
  }, {
    "from": 378,
    "label": "has",
    "to": 7
  }, {
    "from": 378,
    "label": "has",
    "to": 7
  }, {
    "from": 373,
    "label": "has",
    "to": 387
  }, {
    "from": 373,
    "label": "has",
    "to": 388
  }, {
    "from": 373,
    "label": "has",
    "to": 389
  }, {
    "from": 389,
    "label": "has",
    "to": 7
  }, {
    "from": 373,
    "label": "has",
    "to": 390
  }, {
    "from": 390,
    "label": "has",
    "to": 7
  }, {
    "from": 373,
    "label": "has",
    "to": 391
  }, {
    "from": 391,
    "label": "has",
    "to": 7
  }, {
    "from": 373,
    "label": "has",
    "to": 392
  }, {
    "from": 392,
    "label": "has",
    "to": 7
  }, {
    "from": 373,
    "label": "has",
    "to": 393
  }, {
    "from": 394,
    "label": "has",
    "to": 379
  }, {
    "from": 394,
    "label": "has",
    "to": 380
  }, {
    "from": 394,
    "label": "has",
    "to": 381
  }, {
    "from": 381,
    "label": "has",
    "to": 382
  }, {
    "from": 381,
    "label": "has",
    "to": 383
  }, {
    "from": 381,
    "label": "has",
    "to": 384
  }, {
    "from": 394,
    "label": "has",
    "to": 385
  }, {
    "from": 394,
    "label": "has",
    "to": 21
  }, {
    "from": 394,
    "label": "has",
    "to": 7
  }, {
    "from": 394,
    "label": "has",
    "to": 174
  }, {
    "from": 394,
    "label": "has",
    "to": 386
  }, {
    "from": 394,
    "label": "has",
    "to": 7
  }, {
    "from": 394,
    "label": "has",
    "to": 7
  }, {
    "from": 394,
    "label": "has",
    "to": 395
  }, {
    "from": 396,
    "label": "has",
    "to": 7
  }, {
    "from": 397,
    "label": "has",
    "to": 7
  }, {
    "from": 398,
    "label": "has",
    "to": 7
  }, {
    "from": 399,
    "label": "has",
    "to": 7
  }, {
    "from": 400,
    "label": "has",
    "to": 36
  }, {
    "from": 400,
    "label": "has",
    "to": 37
  }, {
    "from": 400,
    "label": "has",
    "to": 7
  }, {
    "from": 400,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 400,
    "label": "has",
    "to": 401
  }, {
    "from": 402,
    "label": "has",
    "to": 41
  }, {
    "from": 402,
    "label": "has",
    "to": 42
  }, {
    "from": 402,
    "label": "has",
    "to": 7
  }, {
    "from": 402,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 402,
    "label": "has",
    "to": 403
  }, {
    "from": 55,
    "label": "calls",
    "to": 409
  }, {
    "from": 85,
    "label": "calls",
    "to": 409
  }, {
    "from": 85,
    "label": "calls",
    "to": 409
  }, {
    "from": 85,
    "label": "calls",
    "to": 409
  }, {
    "from": 105,
    "label": "calls",
    "to": 409
  }, {
    "from": 120,
    "label": "calls",
    "to": 409
  }, {
    "from": 120,
    "label": "calls",
    "to": 409
  }, {
    "from": 124,
    "label": "calls",
    "to": 409
  }, {
    "from": 124,
    "label": "calls",
    "to": 409
  }, {
    "from": 124,
    "label": "calls",
    "to": 409
  }, {
    "from": 167,
    "label": "calls",
    "to": 409
  }, {
    "from": 190,
    "label": "calls",
    "to": 409
  }, {
    "from": 190,
    "label": "calls",
    "to": 409
  }, {
    "from": 404,
    "label": "calls",
    "to": 409
  }, {
    "from": 224,
    "label": "calls",
    "to": 409
  }, {
    "from": 250,
    "label": "calls",
    "to": 409
  }, {
    "from": 305,
    "label": "calls",
    "to": 409
  }, {
    "from": 312,
    "label": "calls",
    "to": 409
  }, {
    "from": 404,
    "label": "calls",
    "to": 409
  }, {
    "from": 404,
    "label": "calls",
    "to": 409
  }, {
    "from": 404,
    "label": "calls",
    "to": 409
  }, {
    "from": 404,
    "label": "calls",
    "to": 409
  }, {
    "from": 332,
    "label": "calls",
    "to": 409
  }, {
    "from": 345,
    "label": "calls",
    "to": 409
  }, {
    "from": 357,
    "label": "calls",
    "to": 409
  }, {
    "from": 373,
    "label": "calls",
    "to": 409
  }, {
    "from": 373,
    "label": "calls",
    "to": 409
  }, {
    "from": 373,
    "label": "calls",
    "to": 409
  }, {
    "from": 224,
    "label": "calls",
    "to": 410
  }, {
    "from": 404,
    "label": "calls",
    "to": 406
  }, {
    "from": 33,
    "label": "calls",
    "to": 411
  }, {
    "from": 33,
    "label": "calls",
    "to": 411
  }, {
    "from": 180,
    "label": "calls",
    "to": 411
  }, {
    "from": 180,
    "label": "calls",
    "to": 411
  }, {
    "from": 298,
    "label": "calls",
    "to": 411
  }, {
    "from": 373,
    "label": "calls",
    "to": 394
  }, {
    "from": 373,
    "label": "calls",
    "to": 394
  }, {
    "from": 373,
    "label": "calls",
    "to": 394
  }, {
    "from": 373,
    "label": "calls",
    "to": 394
  }, {
    "from": 4,
    "label": "calls",
    "to": 425
  }, {
    "from": 10,
    "label": "calls",
    "to": 425
  }, {
    "from": 16,
    "label": "calls",
    "to": 425
  }, {
    "from": 19,
    "label": "calls",
    "to": 425
  }, {
    "from": 124,
    "label": "calls",
    "to": 412
  }, {
    "from": 124,
    "label": "calls",
    "to": 412
  }, {
    "from": 404,
    "label": "calls",
    "to": 412
  }, {
    "from": 404,
    "label": "calls",
    "to": 412
  }, {
    "from": 224,
    "label": "calls",
    "to": 412
  }, {
    "from": 224,
    "label": "calls",
    "to": 412
  }, {
    "from": 404,
    "label": "calls",
    "to": 373
  }, {
    "from": 404,
    "label": "calls",
    "to": 373
  }, {
    "from": 404,
    "label": "calls",
    "to": 373
  }, {
    "from": 404,
    "label": "calls",
    "to": 373
  }, {
    "from": 404,
    "label": "calls",
    "to": 373
  }, {
    "from": 404,
    "label": "calls",
    "to": 373
  }, {
    "from": 404,
    "label": "calls",
    "to": 373
  }, {
    "from": 404,
    "label": "calls",
    "to": 373
  }, {
    "from": 404,
    "label": "calls",
    "to": 373
  }, {
    "from": 404,
    "label": "calls",
    "to": 373
  }, {
    "from": 404,
    "label": "calls",
    "to": 373
  }, {
    "from": 404,
    "label": "calls",
    "to": 373
  }, {
    "from": 404,
    "label": "calls",
    "to": 373
  }, {
    "from": 404,
    "label": "calls",
    "to": 373
  }, {
    "from": 404,
    "label": "calls",
    "to": 373
  }, {
    "from": 190,
    "label": "calls",
    "to": 424
  }, {
    "from": 190,
    "label": "calls",
    "to": 424
  }, {
    "from": 305,
    "label": "calls",
    "to": 424
  }, {
    "from": 277,
    "label": "calls",
    "to": 275
  }, {
    "from": 278,
    "label": "calls",
    "to": 275
  }, {
    "from": 279,
    "label": "calls",
    "to": 275
  }, {
    "from": 10,
    "label": "calls",
    "to": 413
  }, {
    "from": 16,
    "label": "calls",
    "to": 413
  }, {
    "from": 105,
    "label": "calls",
    "to": 413
  }, {
    "from": 152,
    "label": "calls",
    "to": 413
  }, {
    "from": 271,
    "label": "calls",
    "to": 413
  }, {
    "from": 373,
    "label": "calls",
    "to": 413
  }, {
    "from": 301,
    "label": "calls",
    "to": 298
  }, {
    "from": 302,
    "label": "calls",
    "to": 298
  }, {
    "from": 303,
    "label": "calls",
    "to": 298
  }, {
    "from": 304,
    "label": "calls",
    "to": 298
  }, {
    "from": 113,
    "label": "calls",
    "to": 19
  }, {
    "from": 373,
    "label": "calls",
    "to": 426
  }, {
    "from": 53,
    "label": "calls",
    "to": 4
  }, {
    "from": 44,
    "label": "calls",
    "to": 53
  }, {
    "from": 50,
    "label": "calls",
    "to": 53
  }, {
    "from": 224,
    "label": "calls",
    "to": 427
  }, {
    "from": 224,
    "label": "calls",
    "to": 427
  }, {
    "from": 404,
    "label": "calls",
    "to": 427
  }, {
    "from": 404,
    "label": "calls",
    "to": 427
  }, {
    "from": 404,
    "label": "calls",
    "to": 407
  }, {
    "from": 105,
    "label": "calls",
    "to": 414
  }, {
    "from": 152,
    "label": "calls",
    "to": 414
  }, {
    "from": 271,
    "label": "calls",
    "to": 414
  }, {
    "from": 373,
    "label": "calls",
    "to": 414
  }, {
    "from": 373,
    "label": "calls",
    "to": 365
  }, {
    "from": 186,
    "label": "calls",
    "to": 180
  }, {
    "from": 187,
    "label": "calls",
    "to": 180
  }, {
    "from": 188,
    "label": "calls",
    "to": 180
  }, {
    "from": 189,
    "label": "calls",
    "to": 180
  }, {
    "from": 59,
    "label": "calls",
    "to": 430
  }, {
    "from": 74,
    "label": "calls",
    "to": 430
  }, {
    "from": 80,
    "label": "calls",
    "to": 430
  }, {
    "from": 105,
    "label": "calls",
    "to": 430
  }, {
    "from": 199,
    "label": "calls",
    "to": 430
  }, {
    "from": 201,
    "label": "calls",
    "to": 430
  }, {
    "from": 219,
    "label": "calls",
    "to": 430
  }, {
    "from": 224,
    "label": "calls",
    "to": 430
  }, {
    "from": 250,
    "label": "calls",
    "to": 430
  }, {
    "from": 312,
    "label": "calls",
    "to": 430
  }, {
    "from": 324,
    "label": "calls",
    "to": 430
  }, {
    "from": 326,
    "label": "calls",
    "to": 430
  }, {
    "from": 4,
    "label": "calls",
    "to": 420
  }, {
    "from": 124,
    "label": "calls",
    "to": 28
  }, {
    "from": 124,
    "label": "calls",
    "to": 28
  }, {
    "from": 224,
    "label": "calls",
    "to": 28
  }, {
    "from": 224,
    "label": "calls",
    "to": 28
  }, {
    "from": 224,
    "label": "calls",
    "to": 28
  }, {
    "from": 224,
    "label": "calls",
    "to": 28
  }, {
    "from": 404,
    "label": "calls",
    "to": 428
  }, {
    "from": 404,
    "label": "calls",
    "to": 428
  }, {
    "from": 404,
    "label": "calls",
    "to": 428
  }, {
    "from": 404,
    "label": "calls",
    "to": 428
  }, {
    "from": 404,
    "label": "calls",
    "to": 428
  }, {
    "from": 404,
    "label": "calls",
    "to": 428
  }, {
    "from": 124,
    "label": "calls",
    "to": 415
  }, {
    "from": 312,
    "label": "calls",
    "to": 415
  }, {
    "from": 16,
    "label": "calls",
    "to": 429
  }, {
    "from": 404,
    "label": "calls",
    "to": 408
  }, {
    "from": 180,
    "label": "calls",
    "to": 33
  }, {
    "from": 298,
    "label": "calls",
    "to": 33
  }, {
    "from": 294,
    "label": "calls",
    "to": 282
  }, {
    "from": 295,
    "label": "calls",
    "to": 282
  }, {
    "from": 296,
    "label": "calls",
    "to": 282
  }, {
    "from": 297,
    "label": "calls",
    "to": 282
  }, {
    "from": 305,
    "label": "calls",
    "to": 282
  }, {
    "from": 124,
    "label": "calls",
    "to": 417
  }, {
    "from": 224,
    "label": "calls",
    "to": 417
  }, {
    "from": 224,
    "label": "calls",
    "to": 417
  }, {
    "from": 28,
    "label": "calls",
    "to": 418
  }, {
    "from": 55,
    "label": "calls",
    "to": 418
  }, {
    "from": 85,
    "label": "calls",
    "to": 418
  }, {
    "from": 85,
    "label": "calls",
    "to": 418
  }, {
    "from": 85,
    "label": "calls",
    "to": 418
  }, {
    "from": 120,
    "label": "calls",
    "to": 418
  }, {
    "from": 120,
    "label": "calls",
    "to": 418
  }, {
    "from": 124,
    "label": "calls",
    "to": 418
  }, {
    "from": 124,
    "label": "calls",
    "to": 418
  }, {
    "from": 124,
    "label": "calls",
    "to": 418
  }, {
    "from": 124,
    "label": "calls",
    "to": 418
  }, {
    "from": 146,
    "label": "calls",
    "to": 418
  }, {
    "from": 152,
    "label": "calls",
    "to": 418
  }, {
    "from": 157,
    "label": "calls",
    "to": 418
  }, {
    "from": 167,
    "label": "calls",
    "to": 418
  }, {
    "from": 167,
    "label": "calls",
    "to": 418
  }, {
    "from": 167,
    "label": "calls",
    "to": 418
  }, {
    "from": 180,
    "label": "calls",
    "to": 418
  }, {
    "from": 190,
    "label": "calls",
    "to": 418
  }, {
    "from": 190,
    "label": "calls",
    "to": 418
  }, {
    "from": 404,
    "label": "calls",
    "to": 418
  }, {
    "from": 404,
    "label": "calls",
    "to": 418
  }, {
    "from": 404,
    "label": "calls",
    "to": 418
  }, {
    "from": 224,
    "label": "calls",
    "to": 418
  }, {
    "from": 224,
    "label": "calls",
    "to": 418
  }, {
    "from": 250,
    "label": "calls",
    "to": 418
  }, {
    "from": 250,
    "label": "calls",
    "to": 418
  }, {
    "from": 282,
    "label": "calls",
    "to": 418
  }, {
    "from": 282,
    "label": "calls",
    "to": 418
  }, {
    "from": 282,
    "label": "calls",
    "to": 418
  }, {
    "from": 305,
    "label": "calls",
    "to": 418
  }, {
    "from": 312,
    "label": "calls",
    "to": 418
  }, {
    "from": 332,
    "label": "calls",
    "to": 418
  }, {
    "from": 332,
    "label": "calls",
    "to": 418
  }, {
    "from": 345,
    "label": "calls",
    "to": 418
  }, {
    "from": 345,
    "label": "calls",
    "to": 418
  }, {
    "from": 357,
    "label": "calls",
    "to": 418
  }, {
    "from": 365,
    "label": "calls",
    "to": 418
  }, {
    "from": 105,
    "label": "calls",
    "to": 85
  }, {
    "from": 61,
    "label": "calls",
    "to": 10
  }, {
    "from": 161,
    "label": "calls",
    "to": 157
  }, {
    "from": 162,
    "label": "calls",
    "to": 157
  }, {
    "from": 163,
    "label": "calls",
    "to": 157
  }, {
    "from": 105,
    "label": "calls",
    "to": 431
  }, {
    "from": 167,
    "label": "calls",
    "to": 431
  }, {
    "from": 404,
    "label": "calls",
    "to": 431
  }, {
    "from": 282,
    "label": "calls",
    "to": 431
  }, {
    "from": 282,
    "label": "calls",
    "to": 431
  }, {
    "from": 305,
    "label": "calls",
    "to": 416
  }, {
    "from": 33,
    "label": "calls",
    "to": 432
  }, {
    "from": 305,
    "label": "calls",
    "to": 432
  }, {
    "from": 404,
    "label": "calls",
    "to": 433
  }, {
    "from": 404,
    "label": "calls",
    "to": 433
  }, {
    "from": 176,
    "label": "calls",
    "to": 167
  }, {
    "from": 177,
    "label": "calls",
    "to": 167
  }, {
    "from": 178,
    "label": "calls",
    "to": 167
  }, {
    "from": 179,
    "label": "calls",
    "to": 167
  }, {
    "from": 190,
    "label": "calls",
    "to": 167
  }, {
    "from": 190,
    "label": "calls",
    "to": 167
  }, {
    "from": 120,
    "label": "calls",
    "to": 419
  }, {
    "from": 2,
    "label": "contains",
    "to": 404
  }, {
    "from": 404,
    "label": "declares",
    "to": 4
  }, {
    "from": 404,
    "label": "declares",
    "to": 10
  }, {
    "from": 404,
    "label": "declares",
    "to": 16
  }, {
    "from": 404,
    "label": "declares",
    "to": 19
  }, {
    "from": 404,
    "label": "declares",
    "to": 28
  }, {
    "from": 404,
    "label": "declares",
    "to": 33
  }, {
    "from": 404,
    "label": "declares",
    "to": 44
  }, {
    "from": 404,
    "label": "declares",
    "to": 50
  }, {
    "from": 404,
    "label": "declares",
    "to": 53
  }, {
    "from": 404,
    "label": "declares",
    "to": 55
  }, {
    "from": 404,
    "label": "declares",
    "to": 59
  }, {
    "from": 404,
    "label": "declares",
    "to": 61
  }, {
    "from": 404,
    "label": "declares",
    "to": 63
  }, {
    "from": 404,
    "label": "declares",
    "to": 72
  }, {
    "from": 404,
    "label": "declares",
    "to": 74
  }, {
    "from": 404,
    "label": "declares",
    "to": 80
  }, {
    "from": 404,
    "label": "declares",
    "to": 85
  }, {
    "from": 404,
    "label": "declares",
    "to": 105
  }, {
    "from": 404,
    "label": "declares",
    "to": 113
  }, {
    "from": 404,
    "label": "declares",
    "to": 115
  }, {
    "from": 404,
    "label": "declares",
    "to": 120
  }, {
    "from": 404,
    "label": "declares",
    "to": 124
  }, {
    "from": 404,
    "label": "declares",
    "to": 146
  }, {
    "from": 404,
    "label": "declares",
    "to": 152
  }, {
    "from": 404,
    "label": "declares",
    "to": 157
  }, {
    "from": 404,
    "label": "declares",
    "to": 161
  }, {
    "from": 404,
    "label": "declares",
    "to": 162
  }, {
    "from": 404,
    "label": "declares",
    "to": 163
  }, {
    "from": 404,
    "label": "declares",
    "to": 164
  }, {
    "from": 404,
    "label": "declares",
    "to": 167
  }, {
    "from": 404,
    "label": "declares",
    "to": 176
  }, {
    "from": 404,
    "label": "declares",
    "to": 177
  }, {
    "from": 404,
    "label": "declares",
    "to": 178
  }, {
    "from": 404,
    "label": "declares",
    "to": 179
  }, {
    "from": 404,
    "label": "declares",
    "to": 180
  }, {
    "from": 404,
    "label": "declares",
    "to": 186
  }, {
    "from": 404,
    "label": "declares",
    "to": 187
  }, {
    "from": 404,
    "label": "declares",
    "to": 188
  }, {
    "from": 404,
    "label": "declares",
    "to": 189
  }, {
    "from": 404,
    "label": "declares",
    "to": 190
  }, {
    "from": 404,
    "label": "declares",
    "to": 199
  }, {
    "from": 404,
    "label": "declares",
    "to": 201
  }, {
    "from": 404,
    "label": "declares",
    "to": 203
  }, {
    "from": 404,
    "label": "declares",
    "to": 205
  }, {
    "from": 404,
    "label": "declares",
    "to": 207
  }, {
    "from": 404,
    "label": "declares",
    "to": 209
  }, {
    "from": 404,
    "label": "declares",
    "to": 211
  }, {
    "from": 404,
    "label": "declares",
    "to": 213
  }, {
    "from": 404,
    "label": "declares",
    "to": 219
  }, {
    "from": 404,
    "label": "declares",
    "to": 224
  }, {
    "from": 404,
    "label": "declares",
    "to": 250
  }, {
    "from": 404,
    "label": "declares",
    "to": 261
  }, {
    "from": 404,
    "label": "declares",
    "to": 265
  }, {
    "from": 404,
    "label": "declares",
    "to": 267
  }, {
    "from": 404,
    "label": "declares",
    "to": 271
  }, {
    "from": 404,
    "label": "declares",
    "to": 275
  }, {
    "from": 404,
    "label": "declares",
    "to": 277
  }, {
    "from": 404,
    "label": "declares",
    "to": 278
  }, {
    "from": 404,
    "label": "declares",
    "to": 279
  }, {
    "from": 404,
    "label": "declares",
    "to": 280
  }, {
    "from": 404,
    "label": "declares",
    "to": 282
  }, {
    "from": 404,
    "label": "declares",
    "to": 294
  }, {
    "from": 404,
    "label": "declares",
    "to": 295
  }, {
    "from": 404,
    "label": "declares",
    "to": 296
  }, {
    "from": 404,
    "label": "declares",
    "to": 297
  }, {
    "from": 404,
    "label": "declares",
    "to": 298
  }, {
    "from": 404,
    "label": "declares",
    "to": 301
  }, {
    "from": 404,
    "label": "declares",
    "to": 302
  }, {
    "from": 404,
    "label": "declares",
    "to": 303
  }, {
    "from": 404,
    "label": "declares",
    "to": 304
  }, {
    "from": 404,
    "label": "declares",
    "to": 305
  }, {
    "from": 404,
    "label": "declares",
    "to": 310
  }, {
    "from": 404,
    "label": "declares",
    "to": 312
  }, {
    "from": 404,
    "label": "declares",
    "to": 322
  }, {
    "from": 404,
    "label": "declares",
    "to": 324
  }, {
    "from": 404,
    "label": "declares",
    "to": 326
  }, {
    "from": 404,
    "label": "declares",
    "to": 328
  }, {
    "from": 404,
    "label": "declares",
    "to": 330
  }, {
    "from": 404,
    "label": "declares",
    "to": 332
  }, {
    "from": 404,
    "label": "declares",
    "to": 341
  }, {
    "from": 404,
    "label": "declares",
    "to": 345
  }, {
    "from": 404,
    "label": "declares",
    "to": 350
  }, {
    "from": 404,
    "label": "declares",
    "to": 353
  }, {
    "from": 404,
    "label": "declares",
    "to": 355
  }, {
    "from": 404,
    "label": "declares",
    "to": 357
  }, {
    "from": 404,
    "label": "declares",
    "to": 361
  }, {
    "from": 404,
    "label": "declares",
    "to": 365
  }, {
    "from": 404,
    "label": "declares",
    "to": 373
  }, {
    "from": 404,
    "label": "declares",
    "to": 394
  }, {
    "from": 404,
    "label": "declares",
    "to": 396
  }, {
    "from": 404,
    "label": "declares",
    "to": 397
  }, {
    "from": 404,
    "label": "declares",
    "to": 398
  }, {
    "from": 404,
    "label": "declares",
    "to": 399
  }, {
    "from": 404,
    "label": "declares",
    "to": 400
  }, {
    "from": 404,
    "label": "declares",
    "to": 402
  }, {
    "from": 2,
    "label": "declares",
    "to": 405
  }, {
    "from": 2,
    "label": "declares",
    "to": 421
  }, {
    "from": 2,
    "label": "declares",
    "to": 422
  }, {
    "from": 2,
    "label": "declares",
    "to": 423
  }, {
    "from": 28,
    "label": "represents",
    "to": 434
  }, {
    "from": 33,
    "label": "represents",
    "to": 435
  }, {
    "from": 2,
    "label": "contains",
    "to": 436
  }, {
    "from": 2,
    "label": "contains",
    "to": 437
  }, {
    "from": 436,
    "label": "initializes",
    "to": 438
  }, {
    "from": 438,
    "label": "assigns",
    "to": 439
  }, {
    "from": 436,
    "label": "initializes",
    "to": 440
  }, {
    "from": 440,
    "label": "assigns",
    "to": 441
  }, {
    "from": 436,
    "label": "initializes",
    "to": 442
  }, {
    "from": 442,
    "label": "assigns",
    "to": 443
  }, {
    "from": 436,
    "label": "initializes",
    "to": 444
  }, {
    "from": 444,
    "label": "assigns",
    "to": 445
  }, {
    "from": 436,
    "label": "initializes",
    "to": 446
  }, {
    "from": 446,
    "label": "assigns",
    "to": 447
  }, {
    "from": 436,
    "label": "initializes",
    "to": 448
  }, {
    "from": 448,
    "label": "assigns",
    "to": 449
  }, {
    "from": 436,
    "label": "initializes",
    "to": 450
  }, {
    "from": 450,
    "label": "assigns",
    "to": 451
  }, {
    "from": 436,
    "label": "initializes",
    "to": 452
  }, {
    "from": 452,
    "label": "assigns",
    "to": 453
  }, {
    "from": 436,
    "label": "initializes",
    "to": 454
  }, {
    "from": 454,
    "label": "assigns",
    "to": 455
  }, {
    "from": 436,
    "label": "initializes",
    "to": 456
  }, {
    "from": 456,
    "label": "assigns",
    "to": 457
  }, {
    "from": 436,
    "label": "initializes",
    "to": 458
  }, {
    "from": 458,
    "label": "assigns",
    "to": 459
  }, {
    "from": 436,
    "label": "initializes",
    "to": 460
  }, {
    "from": 460,
    "label": "assigns",
    "to": 461
  }, {
    "from": 436,
    "label": "initializes",
    "to": 462
  }, {
    "from": 462,
    "label": "assigns",
    "to": 463
  }, {
    "from": 436,
    "label": "initializes",
    "to": 464
  }, {
    "from": 464,
    "label": "assigns",
    "to": 465
  }, {
    "from": 436,
    "label": "initializes",
    "to": 466
  }, {
    "from": 466,
    "label": "assigns",
    "to": 467
  }, {
    "from": 436,
    "label": "initializes",
    "to": 468
  }, {
    "from": 468,
    "label": "assigns",
    "to": 469
  }, {
    "from": 436,
    "label": "initializes",
    "to": 470
  }, {
    "from": 470,
    "label": "assigns",
    "to": 471
  }, {
    "from": 436,
    "label": "initializes",
    "to": 472
  }, {
    "from": 472,
    "label": "assigns",
    "to": 473
  }, {
    "from": 473,
    "label": "assigns",
    "to": 474
  }, {
    "from": 474,
    "label": "assigns",
    "to": 475
  }, {
    "from": 473,
    "label": "assigns",
    "to": 476
  }, {
    "from": 476,
    "label": "assigns",
    "to": 477
  }, {
    "from": 436,
    "label": "initializes",
    "to": 478
  }, {
    "from": 478,
    "label": "assigns",
    "to": 479
  }, {
    "from": 479,
    "label": "assigns",
    "to": 480
  }, {
    "from": 480,
    "label": "assigns",
    "to": 481
  }, {
    "from": 479,
    "label": "assigns",
    "to": 482
  }, {
    "from": 482,
    "label": "assigns",
    "to": 483
  }, {
    "from": 479,
    "label": "assigns",
    "to": 484
  }, {
    "from": 484,
    "label": "assigns",
    "to": 485
  }, {
    "from": 479,
    "label": "assigns",
    "to": 486
  }, {
    "from": 486,
    "label": "assigns",
    "to": 487
  }, {
    "from": 479,
    "label": "assigns",
    "to": 488
  }, {
    "from": 488,
    "label": "assigns",
    "to": 489
  }, {
    "from": 479,
    "label": "assigns",
    "to": 490
  }, {
    "from": 490,
    "label": "assigns",
    "to": 491
  }, {
    "from": 479,
    "label": "assigns",
    "to": 492
  }, {
    "from": 492,
    "label": "assigns",
    "to": 493
  }, {
    "from": 479,
    "label": "assigns",
    "to": 494
  }, {
    "from": 494,
    "label": "assigns",
    "to": 495
  }, {
    "from": 479,
    "label": "assigns",
    "to": 496
  }, {
    "from": 496,
    "label": "assigns",
    "to": 497
  }, {
    "from": 479,
    "label": "assigns",
    "to": 498
  }, {
    "from": 498,
    "label": "assigns",
    "to": 499
  }, {
    "from": 479,
    "label": "assigns",
    "to": 500
  }, {
    "from": 500,
    "label": "assigns",
    "to": 501
  }, {
    "from": 479,
    "label": "assigns",
    "to": 502
  }, {
    "from": 502,
    "label": "assigns",
    "to": 503
  }, {
    "from": 479,
    "label": "assigns",
    "to": 504
  }, {
    "from": 504,
    "label": "assigns",
    "to": 505
  }, {
    "from": 479,
    "label": "assigns",
    "to": 506
  }, {
    "from": 506,
    "label": "assigns",
    "to": 507
  }, {
    "from": 479,
    "label": "assigns",
    "to": 508
  }, {
    "from": 508,
    "label": "assigns",
    "to": 509
  }, {
    "from": 479,
    "label": "assigns",
    "to": 510
  }, {
    "from": 510,
    "label": "assigns",
    "to": 511
  }, {
    "from": 479,
    "label": "assigns",
    "to": 512
  }, {
    "from": 512,
    "label": "assigns",
    "to": 513
  }, {
    "from": 479,
    "label": "assigns",
    "to": 514
  }, {
    "from": 514,
    "label": "assigns",
    "to": 515
  }, {
    "from": 479,
    "label": "assigns",
    "to": 516
  }, {
    "from": 516,
    "label": "assigns",
    "to": 517
  }, {
    "from": 479,
    "label": "assigns",
    "to": 518
  }, {
    "from": 518,
    "label": "assigns",
    "to": 519
  }, {
    "from": 479,
    "label": "assigns",
    "to": 520
  }, {
    "from": 520,
    "label": "assigns",
    "to": 521
  }, {
    "from": 436,
    "label": "initializes",
    "to": 522
  }, {
    "from": 522,
    "label": "assigns",
    "to": 523
  }, {
    "from": 523,
    "label": "assigns",
    "to": 524
  }, {
    "from": 524,
    "label": "assigns",
    "to": 525
  }, {
    "from": 523,
    "label": "assigns",
    "to": 526
  }, {
    "from": 526,
    "label": "assigns",
    "to": 527
  }, {
    "from": 523,
    "label": "assigns",
    "to": 528
  }, {
    "from": 528,
    "label": "assigns",
    "to": 529
  }, {
    "from": 523,
    "label": "assigns",
    "to": 530
  }, {
    "from": 530,
    "label": "assigns",
    "to": 531
  }, {
    "from": 523,
    "label": "assigns",
    "to": 532
  }, {
    "from": 532,
    "label": "assigns",
    "to": 533
  }, {
    "from": 437,
    "label": "initializes",
    "to": 534
  }, {
    "from": 534,
    "label": "requires",
    "to": 3
  }, {
    "from": 437,
    "label": "initializes",
    "to": 535
  }, {
    "from": 535,
    "label": "requires",
    "to": 1
  }, {
    "from": 2,
    "label": "provides",
    "to": 536
  }, {
    "from": 536,
    "label": "provides",
    "to": 537
  }, {
    "from": 538,
    "label": "requires",
    "to": 2
  }, {
    "from": 539,
    "label": "requires",
    "to": 2
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "utils",
    "type": "module"
  }, {
    "id": 2,
    "text": "dba",
    "type": "module"
  }, {
    "id": 3,
    "text": "proxy",
    "type": "module"
  }, {
    "id": 4,
    "text": "local function Environment_new(...)\r\n  local env, err = environment(...)\r\n  if not env then return nil, err end\r\n\r\n  set_user_val(env, {})\r\n\r\n  return env\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "local env, err = environment(...)",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "if not env then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 8,
    "text": "set_user_val(env, {})",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "local function Connection_new(env, ...)\r\n  local cnn, err = env:connection_impl()\r\n  if not cnn then return nil, err end\r\n  cnn:setautoclosestmt(true)\r\n\r\n  set_user_val(cnn, {\r\n    params = pack_n(...);\r\n  })\r\n\r\n  return cnn\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "local cnn, err = env:connection_impl()",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "if not cnn then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "cnn:setautoclosestmt(true)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "set_user_val(cnn, {\r\n    params = pack_n(...);\r\n  })",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "local function Connection_wrap(hcnn, ...)\r\n  local cnn, err = init_connection(hcnn)\r\n  if not cnn then return nil, err end\r\n  cnn:setautoclosestmt(true)\r\n\r\n  set_user_val(cnn, {\r\n    params = pack_n(...);\r\n  })\r\n\r\n  return cnn\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "local cnn, err = init_connection(hcnn)",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "local function Statement_new(cnn, sql)\r\n  local stmt, err = cnn:statement_impl()\r\n  if not stmt then return nil, err end\r\n\r\n  set_user_val(stmt,{})\r\n\r\n  if sql then \r\n    local ok, err = stmt:set_sql(sql)\r\n    if not ok then\r\n      stmt:destroy()\r\n      return nil, err\r\n    end\r\n  end\r\n\r\n  return stmt\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "local stmt, err = cnn:statement_impl()",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "if not stmt then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "set_user_val(stmt,{})",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "if sql then \r\n    local ok, err = stmt:set_sql(sql)\r\n    if not ok then\r\n      stmt:destroy()\r\n      return nil, err\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "local ok, err = stmt:set_sql(sql)",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "if not ok then\r\n      stmt:destroy()\r\n      return nil, err\r\n    end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "stmt:destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "local function bind_param(stmt, i, val, ...)\r\n  if val == odbc.PARAM_NULL    then return stmt:bindnull(i)    end\r\n  if val == odbc.PARAM_DEFAULT then return stmt:binddefault(i) end\r\n  if type(val) == 'userdata' then\r\n    return stmt:vbind_param(i, val, ...)\r\n  end\r\n  return stmt:bind_impl(i, val, ...)\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "if val == odbc.PARAM_NULL    then return stmt:bindnull(i)    end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "if val == odbc.PARAM_DEFAULT then return stmt:binddefault(i) end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "if type(val) == 'userdata' then\r\n    return stmt:vbind_param(i, val, ...)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "local function rows(cur, fetch_mode)\r\n  local res = {}\r\n  if fetch_mode then\r\n    return function ()\r\n      local res, err = cur:fetch(res, fetch_mode)\r\n      if res then return res end\r\n      if err then throw(err) end\r\n    end\r\n  end\r\n\r\n  local n = #cur:colnames()\r\n  return function ()\r\n    local res, err = cur:fetch(res, 'n')\r\n    if res then return unpack(res, 1, n) end\r\n    if err then throw(err) end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "local res = {}",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "if fetch_mode then\r\n    return function ()\r\n      local res, err = cur:fetch(res, fetch_mode)\r\n      if res then return res end\r\n      if err then throw(err) end\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "local res, err = cur:fetch(res, fetch_mode)",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "if res then return res end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "if err then throw(err) end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "throw(err)",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "local n = #cur:colnames()",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "local res, err = cur:fetch(res, 'n')",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "if res then return unpack(res, 1, n) end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function odbc.Connect(...)\r\n  local env, err = odbc.Environment()\r\n  if not env then return nil, err end\r\n  local cnn, err = env:connect(...)\r\n  if not cnn then \r\n    env:destroy()\r\n    return nil, err\r\n  end\r\n  return cnn, env\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "local env, err = odbc.Environment()",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "local cnn, err = env:connect(...)",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "if not cnn then \r\n    env:destroy()\r\n    return nil, err\r\n  end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "env:destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function odbc.Connection(...)\r\n  local env, err = odbc.Environment()\r\n  if not env then return nil, err end\r\n  local cnn, err = env:connection(...)\r\n  if not cnn then \r\n    env:destroy()\r\n    return nil, err\r\n  end\r\n  return cnn, env\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "local cnn, err = env:connection(...)",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function odbc.Environment(...)\r\n  return Environment_new(...)\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "function Environment:set_login_timeout(ms)\r\n  assert((ms == nil) or (type(ms) == \"number\"))\r\n  user_val(self).login_timeout = ms\r\nend",
    "type": "function"
  }, {
    "id": 56,
    "text": "assert((ms == nil) or (type(ms) == \"number\"))",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "user_val(self).login_timeout = ms",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function Environment:get_login_timeout()\r\n  return user_val(self).login_timeout\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function Environment:connection(...)\r\n  return Connection_new(self, ...)\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function Environment:connect(...)\r\n  local cnn, err = self:connection(...)\r\n  if not cnn then return nil, err end\r\n  local ms = self:get_login_timeout()\r\n  if ms then cnn:set_login_timeout(ms) end\r\n  local ok, err = cnn:connect()\r\n  if not ok then cnn:destroy() return nil, err end\r\n  return cnn\r\nend",
    "type": "function"
  }, {
    "id": 64,
    "text": "local cnn, err = self:connection(...)",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "local ms = self:get_login_timeout()",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "if ms then cnn:set_login_timeout(ms) end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "cnn:set_login_timeout(ms)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "local ok, err = cnn:connect()",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "if not ok then cnn:destroy() return nil, err end",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "cnn:destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "function Environment:handle()\r\n  return self\r\nend",
    "type": "function"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function Environment:get_config(name)\r\n  local private_ = user_val(self)\r\n  if private_.lib_opt then\r\n    local val = private_.lib_opt[name]\r\n    if val ~= nil then return val end\r\n  end\r\n  return DBA_OPTIONS[name]\r\nend",
    "type": "function"
  }, {
    "id": 75,
    "text": "local private_ = user_val(self)",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "if private_.lib_opt then\r\n    local val = private_.lib_opt[name]\r\n    if val ~= nil then return val end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "local val = private_.lib_opt[name]",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "if val ~= nil then return val end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "function Environment:set_config(name, value)\r\n  local private_ = user_val(self)\r\n  if not private_.lib_opt then private_.lib_opt = {} end\r\n  private_.lib_opt[name] = value\r\nend",
    "type": "function"
  }, {
    "id": 81,
    "text": "if not private_.lib_opt then private_.lib_opt = {} end",
    "type": "statement:if"
  }, {
    "id": 82,
    "text": "private_.lib_opt = {}",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "private_.lib_opt[name] = value",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "local function connect(obj, ...)\r\n  local dsn, lgn, pwd, autocommit = ...\r\n  local cnndrv_params\r\n  if type(dsn) == 'table' then\r\n    cnndrv_params, autocommit = ...\r\n  else\r\n    if type(lgn) == 'boolean' then\r\n      assert(pwd == nil)\r\n      assert(autocommit == nil)\r\n      autocommit = lgn\r\n      lgn = nil\r\n    elseif type(pwd) == 'boolean' then\r\n      assert(autocommit == nil)\r\n      autocommit = pwd\r\n      pwd = nil\r\n    end\r\n  end\r\n\r\n  if autocommit == nil then autocommit = true end\r\n\r\n  local cnn, err\r\n  if cnndrv_params then cnn, err = obj:driverconnect(cnndrv_params)\r\n  else cnn, err  = obj:connect_impl(dsn, lgn or \"\", pwd or \"\") end\r\n\r\n  if not cnn then return nil, err end\r\n  cnn:setautocommit(autocommit)\r\n\r\n  return cnn, err\r\nend",
    "type": "function"
  }, {
    "id": 86,
    "text": "local dsn, lgn, pwd, autocommit = ...",
    "type": "statement:localassign"
  }, {
    "id": 87,
    "text": "local cnndrv_params",
    "type": "statement:localassign"
  }, {
    "id": 88,
    "text": "if type(dsn) == 'table' then\r\n    cnndrv_params, autocommit = ...\r\n  else\r\n    if type(lgn) == 'boolean' then\r\n      assert(pwd == nil)\r\n      assert(autocommit == nil)\r\n      autocommit = lgn\r\n      lgn = nil\r\n    elseif type(pwd) == 'boolean' then\r\n      assert(autocommit == nil)\r\n      autocommit = pwd\r\n      pwd = nil\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 89,
    "text": "cnndrv_params, autocommit = ...",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "if type(lgn) == 'boolean' then\r\n      assert(pwd == nil)\r\n      assert(autocommit == nil)\r\n      autocommit = lgn\r\n      lgn = nil\r\n    elseif type(pwd) == 'boolean' then\r\n      assert(autocommit == nil)\r\n      autocommit = pwd\r\n      pwd = nil\r\n    end",
    "type": "statement:if"
  }, {
    "id": 91,
    "text": "assert(pwd == nil)",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "assert(autocommit == nil)",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "autocommit = lgn",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "lgn = nil",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "autocommit = pwd",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "pwd = nil",
    "type": "statement:assign"
  }, {
    "id": 97,
    "text": "if autocommit == nil then autocommit = true end",
    "type": "statement:if"
  }, {
    "id": 98,
    "text": "autocommit = true",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "local cnn, err",
    "type": "statement:localassign"
  }, {
    "id": 100,
    "text": "if cnndrv_params then cnn, err = obj:driverconnect(cnndrv_params)\r\n  else cnn, err  = obj:connect_impl(dsn, lgn or \"\", pwd or \"\") end",
    "type": "statement:if"
  }, {
    "id": 101,
    "text": "cnn, err = obj:driverconnect(cnndrv_params)",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "cnn, err  = obj:connect_impl(dsn, lgn or \"\", pwd or \"\")",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "cnn:setautocommit(autocommit)",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 105,
    "text": "function Connection:connect(...)\r\n  self:disconnect()\r\n  local private_ = user_val(self)\r\n\r\n  if select('#', ...) > 0 then \r\n    private_.params = pack_n(...)\r\n  end\r\n\r\n  local ok, err = connect(self, unpack_n(private_.params))\r\n  if not ok then return nil, err end\r\n\r\n  assert(self == ok)\r\n  return self, err\r\nend",
    "type": "function"
  }, {
    "id": 106,
    "text": "self:disconnect()",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "if select('#', ...) > 0 then \r\n    private_.params = pack_n(...)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 108,
    "text": "private_.params = pack_n(...)",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "local ok, err = connect(self, unpack_n(private_.params))",
    "type": "statement:localassign"
  }, {
    "id": 110,
    "text": "if not ok then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 111,
    "text": "assert(self == ok)",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 113,
    "text": "function Connection:statement(sql)\r\n  return Statement_new(self, sql)\r\nend",
    "type": "function"
  }, {
    "id": 114,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 115,
    "text": "function Connection:prepare(sql)\r\n  local stmt, err = self:statement(sql)\r\n  if not stmt then return nil, err end\r\n  local ok, err = stmt:prepare()\r\n  if not ok then \r\n    stmt:destroy()\r\n    return nil, err\r\n  end\r\n  return stmt\r\nend",
    "type": "function"
  }, {
    "id": 116,
    "text": "local stmt, err = self:statement(sql)",
    "type": "statement:localassign"
  }, {
    "id": 117,
    "text": "local ok, err = stmt:prepare()",
    "type": "statement:localassign"
  }, {
    "id": 118,
    "text": "if not ok then \r\n    stmt:destroy()\r\n    return nil, err\r\n  end",
    "type": "statement:if"
  }, {
    "id": 119,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 120,
    "text": "function Connection:apply_params(sql, params)\r\n  assert(type(sql)    == \"string\")\r\n  assert(type(params) == \"table\" )\r\n  return param_utils.apply_params(self, sql, params)\r\nend",
    "type": "function"
  }, {
    "id": 121,
    "text": "assert(type(sql)    == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "assert(type(params) == \"table\" )",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 124,
    "text": "function Connection:execute(sql, params)\r\n  assert(type(sql) == \"string\")\r\n  assert((params == nil) or (type(params) == \"table\"))\r\n  local stmt, err = self:statement_impl()\r\n  if not stmt then return nil, err end\r\n  if params then\r\n    assert(type(params) == 'table')\r\n    --[[if not self:supports_bind_param() or self:get_config\"FORCE_REPLACE_PARAMS\" then\r\n      sql, err = self:apply_params(sql, params)\r\n      if not sql then return nil, err end\r\n    else--]]\r\n    if type((next(params))) == 'string' then -- named parameters\r\n      local parnames\r\n      sql, parnames = param_utils.translate_params(sql, true)\r\n      if not sql then\r\n        stmt:destroy()\r\n        return nil, parnames\r\n      end\r\n      if parnames then -- parameters found in sql\r\n        for paramNo, paramName in ipairs(parnames) do\r\n          local value = params[paramName]\r\n          if value ~= nil then\r\n            local ok, err = bind_param(stmt, paramNo, value)\r\n            if not ok then\r\n              stmt:destroy()\r\n              return nil, err, i\r\n            end\r\n          else\r\n            stmt:destroy()\r\n            return nil, ERROR.unknown_parameter .. paramName\r\n          end\r\n        end\r\n      end\r\n    else\r\n      for i, v in ipairs(params) do\r\n        local ok, err = bind_param(stmt, i, v)\r\n        if not ok then\r\n          stmt:destroy()\r\n          return nil, err, i\r\n        end\r\n      end\r\n    end\r\n  end\r\n  local ok, err = stmt:execute_impl(sql)\r\n  if not ok then \r\n    stmt:destroy()\r\n    return nil, err\r\n  end\r\n  if ok == stmt then\r\n    return stmt\r\n  end\r\n  stmt:destroy()\r\n  return ok\r\nend",
    "type": "function"
  }, {
    "id": 125,
    "text": "assert(type(sql) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "assert((params == nil) or (type(params) == \"table\"))",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "local stmt, err = self:statement_impl()",
    "type": "statement:localassign"
  }, {
    "id": 128,
    "text": "if params then\r\n    assert(type(params) == 'table')\r\n    --[[if not self:supports_bind_param() or self:get_config\"FORCE_REPLACE_PARAMS\" then\r\n      sql, err = self:apply_params(sql, params)\r\n      if not sql then return nil, err end\r\n    else--]]\r\n    if type((next(params))) == 'string' then -- named parameters\r\n      local parnames\r\n      sql, parnames = param_utils.translate_params(sql, true)\r\n      if not sql then\r\n        stmt:destroy()\r\n        return nil, parnames\r\n      end\r\n      if parnames then -- parameters found in sql\r\n        for paramNo, paramName in ipairs(parnames) do\r\n          local value = params[paramName]\r\n          if value ~= nil then\r\n            local ok, err = bind_param(stmt, paramNo, value)\r\n            if not ok then\r\n              stmt:destroy()\r\n              return nil, err, i\r\n            end\r\n          else\r\n            stmt:destroy()\r\n            return nil, ERROR.unknown_parameter .. paramName\r\n          end\r\n        end\r\n      end\r\n    else\r\n      for i, v in ipairs(params) do\r\n        local ok, err = bind_param(stmt, i, v)\r\n        if not ok then\r\n          stmt:destroy()\r\n          return nil, err, i\r\n        end\r\n      end\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 129,
    "text": "assert(type(params) == 'table')",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "if type((next(params))) == 'string' then -- named parameters\r\n      local parnames\r\n      sql, parnames = param_utils.translate_params(sql, true)\r\n      if not sql then\r\n        stmt:destroy()\r\n        return nil, parnames\r\n      end\r\n      if parnames then -- parameters found in sql\r\n        for paramNo, paramName in ipairs(parnames) do\r\n          local value = params[paramName]\r\n          if value ~= nil then\r\n            local ok, err = bind_param(stmt, paramNo, value)\r\n            if not ok then\r\n              stmt:destroy()\r\n              return nil, err, i\r\n            end\r\n          else\r\n            stmt:destroy()\r\n            return nil, ERROR.unknown_parameter .. paramName\r\n          end\r\n        end\r\n      end\r\n    else\r\n      for i, v in ipairs(params) do\r\n        local ok, err = bind_param(stmt, i, v)\r\n        if not ok then\r\n          stmt:destroy()\r\n          return nil, err, i\r\n        end\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 131,
    "text": "local parnames",
    "type": "statement:localassign"
  }, {
    "id": 132,
    "text": "sql, parnames = param_utils.translate_params(sql, true)",
    "type": "statement:assign"
  }, {
    "id": 133,
    "text": "if not sql then\r\n        stmt:destroy()\r\n        return nil, parnames\r\n      end",
    "type": "statement:if"
  }, {
    "id": 134,
    "text": "if parnames then -- parameters found in sql\r\n        for paramNo, paramName in ipairs(parnames) do\r\n          local value = params[paramName]\r\n          if value ~= nil then\r\n            local ok, err = bind_param(stmt, paramNo, value)\r\n            if not ok then\r\n              stmt:destroy()\r\n              return nil, err, i\r\n            end\r\n          else\r\n            stmt:destroy()\r\n            return nil, ERROR.unknown_parameter .. paramName\r\n          end\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 135,
    "text": "for paramNo, paramName in ipairs(parnames) do\r\n          local value = params[paramName]\r\n          if value ~= nil then\r\n            local ok, err = bind_param(stmt, paramNo, value)\r\n            if not ok then\r\n              stmt:destroy()\r\n              return nil, err, i\r\n            end\r\n          else\r\n            stmt:destroy()\r\n            return nil, ERROR.unknown_parameter .. paramName\r\n          end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 136,
    "text": "local value = params[paramName]",
    "type": "statement:localassign"
  }, {
    "id": 137,
    "text": "if value ~= nil then\r\n            local ok, err = bind_param(stmt, paramNo, value)\r\n            if not ok then\r\n              stmt:destroy()\r\n              return nil, err, i\r\n            end\r\n          else\r\n            stmt:destroy()\r\n            return nil, ERROR.unknown_parameter .. paramName\r\n          end",
    "type": "statement:if"
  }, {
    "id": 138,
    "text": "local ok, err = bind_param(stmt, paramNo, value)",
    "type": "statement:localassign"
  }, {
    "id": 139,
    "text": "if not ok then\r\n              stmt:destroy()\r\n              return nil, err, i\r\n            end",
    "type": "statement:if"
  }, {
    "id": 140,
    "text": "for i, v in ipairs(params) do\r\n        local ok, err = bind_param(stmt, i, v)\r\n        if not ok then\r\n          stmt:destroy()\r\n          return nil, err, i\r\n        end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 141,
    "text": "local ok, err = bind_param(stmt, i, v)",
    "type": "statement:localassign"
  }, {
    "id": 142,
    "text": "if not ok then\r\n          stmt:destroy()\r\n          return nil, err, i\r\n        end",
    "type": "statement:if"
  }, {
    "id": 143,
    "text": "local ok, err = stmt:execute_impl(sql)",
    "type": "statement:localassign"
  }, {
    "id": 144,
    "text": "if ok == stmt then\r\n    return stmt\r\n  end",
    "type": "statement:if"
  }, {
    "id": 145,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 146,
    "text": "function Connection:exec(...)\r\n  local res, err = self:execute(...)\r\n  if not res then return nil, err end\r\n  if type(res) ~= 'number' then \r\n    res:destroy()\r\n    return nil, ERROR.ret_cursor\r\n  end\r\n  return res\r\nend",
    "type": "function"
  }, {
    "id": 147,
    "text": "local res, err = self:execute(...)",
    "type": "statement:localassign"
  }, {
    "id": 148,
    "text": "if not res then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 149,
    "text": "if type(res) ~= 'number' then \r\n    res:destroy()\r\n    return nil, ERROR.ret_cursor\r\n  end",
    "type": "statement:if"
  }, {
    "id": 150,
    "text": "res:destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 152,
    "text": "function Connection:first_row(...)\r\n  local stmt, err = self:execute(...)\r\n  if not stmt then return nil, err end\r\n  if type(stmt) == 'number' then return nil, ERROR.no_cursor end\r\n  local args = pack_n(stmt:fetch())\r\n  stmt:destroy()\r\n  return unpack_n(args)\r\nend",
    "type": "function"
  }, {
    "id": 153,
    "text": "local stmt, err = self:execute(...)",
    "type": "statement:localassign"
  }, {
    "id": 154,
    "text": "if type(stmt) == 'number' then return nil, ERROR.no_cursor end",
    "type": "statement:if"
  }, {
    "id": 155,
    "text": "local args = pack_n(stmt:fetch())",
    "type": "statement:localassign"
  }, {
    "id": 156,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 157,
    "text": "local function Connection_first_Xrow(self, fetch_mode, ...)\r\n  local stmt, err = self:execute(...)\r\n  if not stmt then return nil, err end\r\n  if type(stmt) == 'number' then return nil, ERROR.no_cursor end\r\n  local row, err = stmt:fetch({}, fetch_mode)\r\n  stmt:destroy()\r\n  if not row then return nil, err end\r\n  return row\r\nend",
    "type": "function"
  }, {
    "id": 158,
    "text": "local row, err = stmt:fetch({}, fetch_mode)",
    "type": "statement:localassign"
  }, {
    "id": 159,
    "text": "if not row then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 160,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 161,
    "text": "function Connection:first_irow(...) return Connection_first_Xrow(self, 'n', ...) end",
    "type": "function"
  }, {
    "id": 162,
    "text": "function Connection:first_nrow(...) return Connection_first_Xrow(self, 'a', ...) end",
    "type": "function"
  }, {
    "id": 163,
    "text": "function Connection:first_trow(...) return Connection_first_Xrow(self, 'an', ...) end",
    "type": "function"
  }, {
    "id": 164,
    "text": "function Connection:first_value(...)\r\n  local ok, err = self:first_irow(...)\r\n  if not ok then return nil, err end\r\n  return ok[1]\r\nend",
    "type": "function"
  }, {
    "id": 165,
    "text": "local ok, err = self:first_irow(...)",
    "type": "statement:localassign"
  }, {
    "id": 166,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 167,
    "text": "local function Connection_Xeach(self, fetch_mode, sql, ...)\r\n  assert(type(sql) == 'string')\r\n  local n, params = 2, ...\r\n  if type(params) ~= 'table' then n, params = 1, nil end\r\n  local callback = select(n, ...)\r\n\r\n  local stmt, err = self:execute(sql, params)\r\n  if not stmt then return nil, err end\r\n  if type(stmt) == 'number' then return nil, ERROR.no_cursor end\r\n  stmt:setdestroyonclose(true)\r\n  return stmt:foreach(fetch_mode, true, callback)\r\nend",
    "type": "function"
  }, {
    "id": 168,
    "text": "assert(type(sql) == 'string')",
    "type": "statement:functioncall"
  }, {
    "id": 169,
    "text": "local n, params = 2, ...",
    "type": "statement:localassign"
  }, {
    "id": 170,
    "text": "if type(params) ~= 'table' then n, params = 1, nil end",
    "type": "statement:if"
  }, {
    "id": 171,
    "text": "n, params = 1, nil",
    "type": "statement:assign"
  }, {
    "id": 172,
    "text": "local callback = select(n, ...)",
    "type": "statement:localassign"
  }, {
    "id": 173,
    "text": "local stmt, err = self:execute(sql, params)",
    "type": "statement:localassign"
  }, {
    "id": 174,
    "text": "stmt:setdestroyonclose(true)",
    "type": "statement:functioncall"
  }, {
    "id": 175,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 176,
    "text": "function Connection:each(...)  return Connection_Xeach(self, nil,  ...) end",
    "type": "function"
  }, {
    "id": 177,
    "text": "function Connection:ieach(...) return Connection_Xeach(self, 'n',  ...) end",
    "type": "function"
  }, {
    "id": 178,
    "text": "function Connection:neach(...) return Connection_Xeach(self, 'a',  ...) end",
    "type": "function"
  }, {
    "id": 179,
    "text": "function Connection:teach(...) return Connection_Xeach(self, 'an', ...) end",
    "type": "function"
  }, {
    "id": 180,
    "text": "local function Connection_Xrows(self, fetch_mode, sql, params)\r\n  local stmt, err = self:execute(sql, params)\r\n  if not stmt then throw(err, 2) end\r\n  if type(stmt) == 'number' then throw(ERROR.no_cursor, 2) end\r\n  stmt:setdestroyonclose(true)\r\n\r\n  return rows(stmt, fetch_mode)\r\nend",
    "type": "function"
  }, {
    "id": 181,
    "text": "if not stmt then throw(err, 2) end",
    "type": "statement:if"
  }, {
    "id": 182,
    "text": "throw(err, 2)",
    "type": "statement:functioncall"
  }, {
    "id": 183,
    "text": "if type(stmt) == 'number' then throw(ERROR.no_cursor, 2) end",
    "type": "statement:if"
  }, {
    "id": 184,
    "text": "throw(ERROR.no_cursor, 2)",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 186,
    "text": "function Connection:rows(...)  return Connection_Xrows(self, nil,  ...) end",
    "type": "function"
  }, {
    "id": 187,
    "text": "function Connection:irows(...) return Connection_Xrows(self, 'n',  ...) end",
    "type": "function"
  }, {
    "id": 188,
    "text": "function Connection:nrows(...) return Connection_Xrows(self, 'a',  ...) end",
    "type": "function"
  }, {
    "id": 189,
    "text": "function Connection:trows(...) return Connection_Xrows(self, 'an', ...) end",
    "type": "function"
  }, {
    "id": 190,
    "text": "function Connection:fetch_all(fetch_mode, sql, param)\r\n  assert(type(fetch_mode) == 'string')\r\n  assert(type(sql) == 'string')\r\n  local result = {}\r\n  local ok, err\r\n  if param then\r\n    ok, err = Connection_Xeach(self, fetch_mode, sql, param, collect(result))\r\n  else\r\n    ok, err = Connection_Xeach(self, fetch_mode, sql, collect(result))\r\n  end\r\n  if err == nil then return result end\r\n  return nil, err\r\nend",
    "type": "function"
  }, {
    "id": 191,
    "text": "assert(type(fetch_mode) == 'string')",
    "type": "statement:functioncall"
  }, {
    "id": 192,
    "text": "local result = {}",
    "type": "statement:localassign"
  }, {
    "id": 193,
    "text": "local ok, err",
    "type": "statement:localassign"
  }, {
    "id": 194,
    "text": "if param then\r\n    ok, err = Connection_Xeach(self, fetch_mode, sql, param, collect(result))\r\n  else\r\n    ok, err = Connection_Xeach(self, fetch_mode, sql, collect(result))\r\n  end",
    "type": "statement:if"
  }, {
    "id": 195,
    "text": "ok, err = Connection_Xeach(self, fetch_mode, sql, param, collect(result))",
    "type": "statement:assign"
  }, {
    "id": 196,
    "text": "ok, err = Connection_Xeach(self, fetch_mode, sql, collect(result))",
    "type": "statement:assign"
  }, {
    "id": 197,
    "text": "if err == nil then return result end",
    "type": "statement:if"
  }, {
    "id": 198,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 199,
    "text": "function Connection:set_config(name, value)\r\n  local private_ = user_val(self)\r\n  if not private_.lib_opt then private_.lib_opt = {} end\r\n  private_.lib_opt[name] = value\r\nend",
    "type": "function"
  }, {
    "id": 200,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 201,
    "text": "function Connection:get_config(name )\r\n  local private_ = user_val(self)\r\n  if private_.lib_opt then\r\n    local val = private_.lib_opt[name]\r\n    if val ~= nil then return val end\r\n  end\r\n  return self:environment():get_config(name)\r\nend",
    "type": "function"
  }, {
    "id": 202,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 203,
    "text": "function Statement:vbind_col(i, val, ...)\r\n  --- @todo better detect of using proxy module\r\n  return val:bind_col(self._self or self, i, ...)\r\nend",
    "type": "function"
  }, {
    "id": 204,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 205,
    "text": "function Statement:vbind_param(i, val, ...)\r\n  --- @todo better detect of using proxy module\r\n  return val:bind_param(self._self or self, i, ...)\r\nend",
    "type": "function"
  }, {
    "id": 206,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 207,
    "text": "function(self, ...)\r\n    return odbc[tname]():bind_col(self._self or self, ...)\r\n  end",
    "type": "function"
  }, {
    "id": 208,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 209,
    "text": "function(self, i, val, ...)\r\n    return odbc[tname](val):bind_param(self._self or self, i, ...)\r\n  end",
    "type": "function"
  }, {
    "id": 210,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 211,
    "text": "function(self, i, size, ...)\r\n    return odbc[tname](size):bind_col(self._self or self, i, ...)\r\n  end",
    "type": "function"
  }, {
    "id": 212,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 213,
    "text": "function(self, i, size, ...)\r\n    if type(size) == 'string' then\r\n      return odbc[tname](size):bind_param(self._self or self, i, ...)\r\n    end\r\n    assert(type(size) == 'number')\r\n    local val = ...\r\n    if type(val) == 'string' then\r\n      return odbc[tname](size, val):bind_param(self._self or self, i, select(2, ...))\r\n    end\r\n    return odbc[tname](size):bind_param(self._self or self, i, ...)\r\n  end",
    "type": "function"
  }, {
    "id": 214,
    "text": "if type(size) == 'string' then\r\n      return odbc[tname](size):bind_param(self._self or self, i, ...)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 215,
    "text": "assert(type(size) == 'number')",
    "type": "statement:functioncall"
  }, {
    "id": 216,
    "text": "local val = ...",
    "type": "statement:localassign"
  }, {
    "id": 217,
    "text": "if type(val) == 'string' then\r\n      return odbc[tname](size, val):bind_param(self._self or self, i, select(2, ...))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 218,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 219,
    "text": "function Statement:prepare(sql)\r\n  if sql then\r\n    local ok, err = self:set_sql(sql)\r\n    if not ok then return nil, err end\r\n  else\r\n    sql = user_val(self).sql\r\n  end\r\n  return self:prepare_impl(sql)\r\nend",
    "type": "function"
  }, {
    "id": 220,
    "text": "if sql then\r\n    local ok, err = self:set_sql(sql)\r\n    if not ok then return nil, err end\r\n  else\r\n    sql = user_val(self).sql\r\n  end",
    "type": "statement:if"
  }, {
    "id": 221,
    "text": "local ok, err = self:set_sql(sql)",
    "type": "statement:localassign"
  }, {
    "id": 222,
    "text": "sql = user_val(self).sql",
    "type": "statement:assign"
  }, {
    "id": 223,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 224,
    "text": "function Statement:bind(paramID, val, ...)\r\n  local paramID_type = type(paramID)\r\n  assert((paramID_type == 'string')or(paramID_type == 'number')or(paramID_type == 'table'))\r\n\r\n  if self:opened() then return nil, ERROR.query_opened end\r\n\r\n  if paramID_type == \"number\" then\r\n    return bind_param(self, paramID, val)\r\n  end\r\n\r\n  local private_ = user_val(self)\r\n\r\n  if paramID_type == \"string\" then\r\n    local flag\r\n    if private_.parnames then\r\n      for paramNo, paramName in ipairs(private_.parnames) do\r\n        if paramName == paramID then\r\n          local ok, err = bind_param(self, paramNo, val, ...)\r\n          if not ok then return nil, err, paramNo end\r\n          flag = true\r\n        end\r\n      end\r\n    end\r\n    if not flag then return nil, ERROR.unknown_parameter .. paramID end\r\n    return true\r\n  end\r\n\r\n  if paramID_type == \"table\" then\r\n    if type(next(paramID)) == 'string' then\r\n      if not private_.parnames then\r\n        return nil, ERROR.unknown_parameter .. tostring(next(paramID))\r\n      end\r\n      for paramName, paramValue in pairs(paramID) do\r\n        local flag\r\n        for paramNo, paramName2 in ipairs(private_.parnames) do\r\n          if paramName == paramName2 then\r\n            local ok, err = bind_param(self, paramNo, paramValue, ...)\r\n            if not ok then return nil, err, paramNo end\r\n            flag = true\r\n          end\r\n        end\r\n        if not flag then return nil, ERROR.unknown_parameter .. paramName end\r\n      end\r\n      return true\r\n    end\r\n\r\n    for i, v in pairs(paramID) do\r\n      local ok, err = bind_param(self, i, v)\r\n      if not ok then\r\n        return nil, err, i\r\n      end\r\n    end\r\n    return true\r\n  end\r\n\r\n  return self:bind_impl(paramID, val, ...)\r\nend",
    "type": "function"
  }, {
    "id": 225,
    "text": "local paramID_type = type(paramID)",
    "type": "statement:localassign"
  }, {
    "id": 226,
    "text": "assert((paramID_type == 'string')or(paramID_type == 'number')or(paramID_type == 'table'))",
    "type": "statement:functioncall"
  }, {
    "id": 227,
    "text": "if self:opened() then return nil, ERROR.query_opened end",
    "type": "statement:if"
  }, {
    "id": 228,
    "text": "if paramID_type == \"number\" then\r\n    return bind_param(self, paramID, val)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 229,
    "text": "if paramID_type == \"string\" then\r\n    local flag\r\n    if private_.parnames then\r\n      for paramNo, paramName in ipairs(private_.parnames) do\r\n        if paramName == paramID then\r\n          local ok, err = bind_param(self, paramNo, val, ...)\r\n          if not ok then return nil, err, paramNo end\r\n          flag = true\r\n        end\r\n      end\r\n    end\r\n    if not flag then return nil, ERROR.unknown_parameter .. paramID end\r\n    return true\r\n  end",
    "type": "statement:if"
  }, {
    "id": 230,
    "text": "local flag",
    "type": "statement:localassign"
  }, {
    "id": 231,
    "text": "if private_.parnames then\r\n      for paramNo, paramName in ipairs(private_.parnames) do\r\n        if paramName == paramID then\r\n          local ok, err = bind_param(self, paramNo, val, ...)\r\n          if not ok then return nil, err, paramNo end\r\n          flag = true\r\n        end\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 232,
    "text": "for paramNo, paramName in ipairs(private_.parnames) do\r\n        if paramName == paramID then\r\n          local ok, err = bind_param(self, paramNo, val, ...)\r\n          if not ok then return nil, err, paramNo end\r\n          flag = true\r\n        end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 233,
    "text": "if paramName == paramID then\r\n          local ok, err = bind_param(self, paramNo, val, ...)\r\n          if not ok then return nil, err, paramNo end\r\n          flag = true\r\n        end",
    "type": "statement:if"
  }, {
    "id": 234,
    "text": "local ok, err = bind_param(self, paramNo, val, ...)",
    "type": "statement:localassign"
  }, {
    "id": 235,
    "text": "if not ok then return nil, err, paramNo end",
    "type": "statement:if"
  }, {
    "id": 236,
    "text": "flag = true",
    "type": "statement:assign"
  }, {
    "id": 237,
    "text": "if not flag then return nil, ERROR.unknown_parameter .. paramID end",
    "type": "statement:if"
  }, {
    "id": 238,
    "text": "if paramID_type == \"table\" then\r\n    if type(next(paramID)) == 'string' then\r\n      if not private_.parnames then\r\n        return nil, ERROR.unknown_parameter .. tostring(next(paramID))\r\n      end\r\n      for paramName, paramValue in pairs(paramID) do\r\n        local flag\r\n        for paramNo, paramName2 in ipairs(private_.parnames) do\r\n          if paramName == paramName2 then\r\n            local ok, err = bind_param(self, paramNo, paramValue, ...)\r\n            if not ok then return nil, err, paramNo end\r\n            flag = true\r\n          end\r\n        end\r\n        if not flag then return nil, ERROR.unknown_parameter .. paramName end\r\n      end\r\n      return true\r\n    end\r\n\r\n    for i, v in pairs(paramID) do\r\n      local ok, err = bind_param(self, i, v)\r\n      if not ok then\r\n        return nil, err, i\r\n      end\r\n    end\r\n    return true\r\n  end",
    "type": "statement:if"
  }, {
    "id": 239,
    "text": "if type(next(paramID)) == 'string' then\r\n      if not private_.parnames then\r\n        return nil, ERROR.unknown_parameter .. tostring(next(paramID))\r\n      end\r\n      for paramName, paramValue in pairs(paramID) do\r\n        local flag\r\n        for paramNo, paramName2 in ipairs(private_.parnames) do\r\n          if paramName == paramName2 then\r\n            local ok, err = bind_param(self, paramNo, paramValue, ...)\r\n            if not ok then return nil, err, paramNo end\r\n            flag = true\r\n          end\r\n        end\r\n        if not flag then return nil, ERROR.unknown_parameter .. paramName end\r\n      end\r\n      return true\r\n    end",
    "type": "statement:if"
  }, {
    "id": 240,
    "text": "if not private_.parnames then\r\n        return nil, ERROR.unknown_parameter .. tostring(next(paramID))\r\n      end",
    "type": "statement:if"
  }, {
    "id": 241,
    "text": "for paramName, paramValue in pairs(paramID) do\r\n        local flag\r\n        for paramNo, paramName2 in ipairs(private_.parnames) do\r\n          if paramName == paramName2 then\r\n            local ok, err = bind_param(self, paramNo, paramValue, ...)\r\n            if not ok then return nil, err, paramNo end\r\n            flag = true\r\n          end\r\n        end\r\n        if not flag then return nil, ERROR.unknown_parameter .. paramName end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 242,
    "text": "for paramNo, paramName2 in ipairs(private_.parnames) do\r\n          if paramName == paramName2 then\r\n            local ok, err = bind_param(self, paramNo, paramValue, ...)\r\n            if not ok then return nil, err, paramNo end\r\n            flag = true\r\n          end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 243,
    "text": "if paramName == paramName2 then\r\n            local ok, err = bind_param(self, paramNo, paramValue, ...)\r\n            if not ok then return nil, err, paramNo end\r\n            flag = true\r\n          end",
    "type": "statement:if"
  }, {
    "id": 244,
    "text": "local ok, err = bind_param(self, paramNo, paramValue, ...)",
    "type": "statement:localassign"
  }, {
    "id": 245,
    "text": "if not flag then return nil, ERROR.unknown_parameter .. paramName end",
    "type": "statement:if"
  }, {
    "id": 246,
    "text": "for i, v in pairs(paramID) do\r\n      local ok, err = bind_param(self, i, v)\r\n      if not ok then\r\n        return nil, err, i\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 247,
    "text": "local ok, err = bind_param(self, i, v)",
    "type": "statement:localassign"
  }, {
    "id": 248,
    "text": "if not ok then\r\n        return nil, err, i\r\n      end",
    "type": "statement:if"
  }, {
    "id": 249,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 250,
    "text": "function Statement:execute(sql, params)\r\n  if not self:closed() then return nil, ERROR.query_opened end\r\n\r\n  if not params and type(sql) == 'table' then\r\n    params, sql = sql, nil\r\n  end\r\n\r\n  if sql ~= nil then\r\n    local ok, err = self:set_sql(sql)\r\n    if not ok then return nil, err end\r\n  end\r\n  sql = user_val(self).sql\r\n\r\n  if not sql then return nil, ERROR.no_sql_text end\r\n\r\n  if params ~= nil then\r\n    assert(type(params) == 'table')\r\n    local ok, err, i = self:bind(params)\r\n    if not ok then return nil, err, i end\r\n  end\r\n\r\n  if self:prepared() then return self:execute_impl() end\r\n\r\n  return self:execute_impl(sql)\r\nend",
    "type": "function"
  }, {
    "id": 251,
    "text": "if not self:closed() then return nil, ERROR.query_opened end",
    "type": "statement:if"
  }, {
    "id": 252,
    "text": "if not params and type(sql) == 'table' then\r\n    params, sql = sql, nil\r\n  end",
    "type": "statement:if"
  }, {
    "id": 253,
    "text": "params, sql = sql, nil",
    "type": "statement:assign"
  }, {
    "id": 254,
    "text": "if sql ~= nil then\r\n    local ok, err = self:set_sql(sql)\r\n    if not ok then return nil, err end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 255,
    "text": "if not sql then return nil, ERROR.no_sql_text end",
    "type": "statement:if"
  }, {
    "id": 256,
    "text": "if params ~= nil then\r\n    assert(type(params) == 'table')\r\n    local ok, err, i = self:bind(params)\r\n    if not ok then return nil, err, i end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 257,
    "text": "local ok, err, i = self:bind(params)",
    "type": "statement:localassign"
  }, {
    "id": 258,
    "text": "if not ok then return nil, err, i end",
    "type": "statement:if"
  }, {
    "id": 259,
    "text": "if self:prepared() then return self:execute_impl() end",
    "type": "statement:if"
  }, {
    "id": 260,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 261,
    "text": "function Statement:open(...)\r\n  local ok, err = self:execute(...)\r\n  if not ok then return nil, err end\r\n  if ok ~= self then return nil, ERROR.no_cursor end\r\n  return ok\r\nend",
    "type": "function"
  }, {
    "id": 262,
    "text": "local ok, err = self:execute(...)",
    "type": "statement:localassign"
  }, {
    "id": 263,
    "text": "if ok ~= self then return nil, ERROR.no_cursor end",
    "type": "statement:if"
  }, {
    "id": 264,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 265,
    "text": "function Statement:opened()\r\n  return not self:closed()\r\nend",
    "type": "function"
  }, {
    "id": 266,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 267,
    "text": "function Statement:exec(...)\r\n  if not self:closed() then return nil, ERROR.query_opened end\r\n\r\n  local ok, err = self:execute(...)\r\n  if not ok then return nil, err end\r\n  if ok == self then\r\n    self:close()\r\n    return nil, \"no resultset\"\r\n  end\r\n  return ok\r\nend",
    "type": "function"
  }, {
    "id": 268,
    "text": "if ok == self then\r\n    self:close()\r\n    return nil, \"no resultset\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 269,
    "text": "self:close()",
    "type": "statement:functioncall"
  }, {
    "id": 270,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 271,
    "text": "function Statement:first_row(...)\r\n  local stmt, err = self:execute(...)\r\n  if not stmt then return nil, err end\r\n  if stmt ~= self then return nil, ERROR.no_cursor end\r\n  local args = pack_n(stmt:fetch())\r\n  stmt:close()\r\n  return unpack_n(args)\r\nend",
    "type": "function"
  }, {
    "id": 272,
    "text": "if stmt ~= self then return nil, ERROR.no_cursor end",
    "type": "statement:if"
  }, {
    "id": 273,
    "text": "stmt:close()",
    "type": "statement:functioncall"
  }, {
    "id": 274,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 275,
    "text": "local function Statement_first_Xrow(self, fetch_mode, ...)\r\n  local stmt, err = self:execute(...)\r\n  if not stmt then return nil, err end\r\n  if stmt ~= self then return nil, ERROR.no_cursor end\r\n  local row, err = stmt:fetch({}, fetch_mode)\r\n  stmt:close()\r\n  if not row then return nil, err end\r\n  return row\r\nend",
    "type": "function"
  }, {
    "id": 276,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 277,
    "text": "function Statement:first_irow(...) return Statement_first_Xrow(self, 'n', ...) end",
    "type": "function"
  }, {
    "id": 278,
    "text": "function Statement:first_nrow(...) return Statement_first_Xrow(self, 'a', ...) end",
    "type": "function"
  }, {
    "id": 279,
    "text": "function Statement:first_trow(...) return Statement_first_Xrow(self, 'an', ...) end",
    "type": "function"
  }, {
    "id": 280,
    "text": "function Statement:first_value(...)\r\n  local ok, err = self:first_irow(...)\r\n  if not ok then return nil, err end\r\n  return ok[1]\r\nend",
    "type": "function"
  }, {
    "id": 281,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 282,
    "text": "local function Statement_Xeach(self, fetch_mode, ...)\r\n  local n = 1\r\n  local sql, params  = ...\r\n  if type(sql) == 'string' then\r\n    n = n + 1\r\n    if type(params) == 'table' then \r\n      n = n + 1\r\n    else \r\n      params = nil\r\n    end\r\n  elseif type(sql) == 'table' then\r\n    params = nil\r\n    n = n + 1\r\n  else \r\n    sql, params = nil\r\n  end\r\n\r\n  if not self:closed() then \r\n    if sql or params then return nil, ERROR.query_opened end\r\n    return self:foreach(fetch_mode, select(n, ...))\r\n  end\r\n\r\n  local ok, err = self:open(sql, params)\r\n  if not ok then return nil, err end\r\n\r\n  return self:foreach(fetch_mode, select(n, ...))\r\nend",
    "type": "function"
  }, {
    "id": 283,
    "text": "local n = 1",
    "type": "statement:localassign"
  }, {
    "id": 284,
    "text": "local sql, params  = ...",
    "type": "statement:localassign"
  }, {
    "id": 285,
    "text": "if type(sql) == 'string' then\r\n    n = n + 1\r\n    if type(params) == 'table' then \r\n      n = n + 1\r\n    else \r\n      params = nil\r\n    end\r\n  elseif type(sql) == 'table' then\r\n    params = nil\r\n    n = n + 1\r\n  else \r\n    sql, params = nil\r\n  end",
    "type": "statement:if"
  }, {
    "id": 286,
    "text": "n = n + 1",
    "type": "statement:assign"
  }, {
    "id": 287,
    "text": "if type(params) == 'table' then \r\n      n = n + 1\r\n    else \r\n      params = nil\r\n    end",
    "type": "statement:if"
  }, {
    "id": 288,
    "text": "params = nil",
    "type": "statement:assign"
  }, {
    "id": 289,
    "text": "sql, params = nil",
    "type": "statement:assign"
  }, {
    "id": 290,
    "text": "if not self:closed() then \r\n    if sql or params then return nil, ERROR.query_opened end\r\n    return self:foreach(fetch_mode, select(n, ...))\r\n  end",
    "type": "statement:if"
  }, {
    "id": 291,
    "text": "if sql or params then return nil, ERROR.query_opened end",
    "type": "statement:if"
  }, {
    "id": 292,
    "text": "local ok, err = self:open(sql, params)",
    "type": "statement:localassign"
  }, {
    "id": 293,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 294,
    "text": "function Statement:each(...)  return Statement_Xeach(self, nil,  ...) end",
    "type": "function"
  }, {
    "id": 295,
    "text": "function Statement:ieach(...) return Statement_Xeach(self, 'n',  ...) end",
    "type": "function"
  }, {
    "id": 296,
    "text": "function Statement:neach(...) return Statement_Xeach(self, 'a',  ...) end",
    "type": "function"
  }, {
    "id": 297,
    "text": "function Statement:teach(...) return Statement_Xeach(self, 'an', ...) end",
    "type": "function"
  }, {
    "id": 298,
    "text": "local function Statement_Xrows(self, fetch_mode, sql, params)\r\n  local stmt, err = self:open(sql, params)\r\n  if not stmt then throw(err, 2) end\r\n\r\n  return rows(self, fetch_mode)\r\nend",
    "type": "function"
  }, {
    "id": 299,
    "text": "local stmt, err = self:open(sql, params)",
    "type": "statement:localassign"
  }, {
    "id": 300,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 301,
    "text": "function Statement:rows(...)  return Statement_Xrows(self, nil,  ...) end",
    "type": "function"
  }, {
    "id": 302,
    "text": "function Statement:irows(...) return Statement_Xrows(self, 'n',  ...) end",
    "type": "function"
  }, {
    "id": 303,
    "text": "function Statement:nrows(...) return Statement_Xrows(self, 'a',  ...) end",
    "type": "function"
  }, {
    "id": 304,
    "text": "function Statement:trows(...) return Statement_Xrows(self, 'an', ...) end",
    "type": "function"
  }, {
    "id": 305,
    "text": "function Statement:fetch_all(fetch_mode, ...)\r\n  assert(type(fetch_mode) == 'string')\r\n  local result = {}\r\n  local args = {...};\r\n  table.insert(args, collect(result))\r\n  local ok, err = Statement_Xeach(self, fetch_mode, unpack(args))\r\n  if err == nil then return result end\r\n  return nil, err\r\nend",
    "type": "function"
  }, {
    "id": 306,
    "text": "local args = {...}",
    "type": "statement:localassign"
  }, {
    "id": 307,
    "text": "table.insert(args, collect(result))",
    "type": "statement:functioncall"
  }, {
    "id": 308,
    "text": "local ok, err = Statement_Xeach(self, fetch_mode, unpack(args))",
    "type": "statement:localassign"
  }, {
    "id": 309,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 310,
    "text": "function Statement:supports_prepare()\r\n  return self:connection():supports_prepare()\r\nend",
    "type": "function"
  }, {
    "id": 311,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 312,
    "text": "function Statement:set_sql(sql)\r\n  assert(type(sql) == \"string\")\r\n\r\n  if self:prepared()   then return nil, ERROR.query_prepared end\r\n  if not self:closed() then return nil, ERROR.query_opened   end\r\n\r\n  self:reset()\r\n  local private_ = user_val(self)\r\n  private_.sql   = sql\r\n\r\n  local sql, parnames = param_utils.translate_params(sql)\r\n  if sql and parnames then\r\n    private_.sql, private_.parnames = sql, parnames\r\n  else \r\n    private_.parnames = nil\r\n  end\r\n\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 313,
    "text": "if self:prepared()   then return nil, ERROR.query_prepared end",
    "type": "statement:if"
  }, {
    "id": 314,
    "text": "if not self:closed() then return nil, ERROR.query_opened   end",
    "type": "statement:if"
  }, {
    "id": 315,
    "text": "self:reset()",
    "type": "statement:functioncall"
  }, {
    "id": 316,
    "text": "private_.sql   = sql",
    "type": "statement:assign"
  }, {
    "id": 317,
    "text": "local sql, parnames = param_utils.translate_params(sql)",
    "type": "statement:localassign"
  }, {
    "id": 318,
    "text": "if sql and parnames then\r\n    private_.sql, private_.parnames = sql, parnames\r\n  else \r\n    private_.parnames = nil\r\n  end",
    "type": "statement:if"
  }, {
    "id": 319,
    "text": "private_.sql, private_.parnames = sql, parnames",
    "type": "statement:assign"
  }, {
    "id": 320,
    "text": "private_.parnames = nil",
    "type": "statement:assign"
  }, {
    "id": 321,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 322,
    "text": "function Statement:handle()\r\n  return self\r\nend",
    "type": "function"
  }, {
    "id": 323,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 324,
    "text": "function Statement:set_config(name, value)\r\n  local private_ = user_val(self)\r\n  if not private_.lib_opt then private_.lib_opt = {} end\r\n  private_.lib_opt[name] = value\r\nend",
    "type": "function"
  }, {
    "id": 325,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 326,
    "text": "function Statement:get_config(name )\r\n  local private_ = user_val(self)\r\n  if private_.lib_opt then\r\n    local val = private_.lib_opt[name]\r\n    if val ~= nil then return val end\r\n  end\r\n  return self:connection():get_config(name)\r\nend",
    "type": "function"
  }, {
    "id": 327,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 328,
    "text": "function Connection:supports_async_mode()\r\n  return self:supportsAsyncStatement()\r\nend",
    "type": "function"
  }, {
    "id": 329,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 330,
    "text": "function Statement:supports_async_mode()\r\n  return self:connection():supportsAsyncStatement()\r\nend",
    "type": "function"
  }, {
    "id": 331,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 332,
    "text": "function Connection:supports_transaction(lvl)\r\n  if not self:connected() then return nil, ERROR.cnn_not_opened end\r\n  if lvl == nil then return self:supportsTransactions() end\r\n  if type(lvl) == 'string' then \r\n    local lvl_n = TRANSACTION_LEVEL[lvl] \r\n    if not lvl_n then return nil, ERROR.unknown_txn_lvl .. lvl end\r\n    lvl = lvl_n\r\n  end\r\n\r\n  assert(type(lvl) == 'number')\r\n  return self:supportsTransactionIsolationLevel(lvl)\r\nend",
    "type": "function"
  }, {
    "id": 333,
    "text": "if not self:connected() then return nil, ERROR.cnn_not_opened end",
    "type": "statement:if"
  }, {
    "id": 334,
    "text": "if lvl == nil then return self:supportsTransactions() end",
    "type": "statement:if"
  }, {
    "id": 335,
    "text": "if type(lvl) == 'string' then \r\n    local lvl_n = TRANSACTION_LEVEL[lvl] \r\n    if not lvl_n then return nil, ERROR.unknown_txn_lvl .. lvl end\r\n    lvl = lvl_n\r\n  end",
    "type": "statement:if"
  }, {
    "id": 336,
    "text": "local lvl_n = TRANSACTION_LEVEL[lvl]",
    "type": "statement:localassign"
  }, {
    "id": 337,
    "text": "if not lvl_n then return nil, ERROR.unknown_txn_lvl .. lvl end",
    "type": "statement:if"
  }, {
    "id": 338,
    "text": "lvl = lvl_n",
    "type": "statement:assign"
  }, {
    "id": 339,
    "text": "assert(type(lvl) == 'number')",
    "type": "statement:functioncall"
  }, {
    "id": 340,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 341,
    "text": "function Connection:default_transaction()\r\n  if not self:connected() then return nil, ERROR.cnn_not_opened end\r\n  local lvl, err = self:getDefaultTransactionIsolation()\r\n  if not lvl then return nil, err end\r\n  return lvl, TRANSACTION_LEVEL[lvl]\r\nend",
    "type": "function"
  }, {
    "id": 342,
    "text": "local lvl, err = self:getDefaultTransactionIsolation()",
    "type": "statement:localassign"
  }, {
    "id": 343,
    "text": "if not lvl then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 344,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 345,
    "text": "function Connection:set_transaction_level(lvl)\r\n  if not self:connected() then return nil, ERROR.cnn_not_opened end\r\n\r\n  local err \r\n  if lvl == nil then\r\n    lvl, err = self:default_transaction()\r\n    if not lvl then return nil, err end;\r\n  elseif type(lvl) == 'string' then \r\n    local lvl_n = TRANSACTION_LEVEL[lvl] \r\n    if not lvl_n then return nil, ERROR.unknown_txn_lvl .. lvl end\r\n    lvl = lvl_n\r\n  end\r\n\r\n  assert(type(lvl) == 'number')\r\n  return self:settransactionisolation(lvl)\r\nend",
    "type": "function"
  }, {
    "id": 346,
    "text": "local err",
    "type": "statement:localassign"
  }, {
    "id": 347,
    "text": "if lvl == nil then\r\n    lvl, err = self:default_transaction()\r\n    if not lvl then return nil, err end;\r\n  elseif type(lvl) == 'string' then \r\n    local lvl_n = TRANSACTION_LEVEL[lvl] \r\n    if not lvl_n then return nil, ERROR.unknown_txn_lvl .. lvl end\r\n    lvl = lvl_n\r\n  end",
    "type": "statement:if"
  }, {
    "id": 348,
    "text": "lvl, err = self:default_transaction()",
    "type": "statement:assign"
  }, {
    "id": 349,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 350,
    "text": "function Connection:get_transaction_level()\r\n  if not self:connected() then return nil, ERROR.cnn_not_opened end\r\n\r\n  local lvl, err = self:gettransactionisolation()\r\n  if not lvl then return nil, err end\r\n  return lvl, TRANSACTION_LEVEL[lvl]\r\nend",
    "type": "function"
  }, {
    "id": 351,
    "text": "local lvl, err = self:gettransactionisolation()",
    "type": "statement:localassign"
  }, {
    "id": 352,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 353,
    "text": "function Connection:supports_bind_param()\r\n  if not self:connected() then return nil, ERROR.cnn_not_opened end\r\n  return self:supportsBindParam()\r\nend",
    "type": "function"
  }, {
    "id": 354,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 355,
    "text": "function Connection:supports_prepare()\r\n  if not self:connected() then return nil, ERROR.cnn_not_opened end\r\n  return self:supportsPrepare()\r\nend",
    "type": "function"
  }, {
    "id": 356,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 357,
    "text": "function Connection:set_login_timeout(ms)\r\n  assert((ms == nil) or (type(ms) == 'number'))\r\n  self:setlogintimeout(ms or -1)\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 358,
    "text": "assert((ms == nil) or (type(ms) == 'number'))",
    "type": "statement:functioncall"
  }, {
    "id": 359,
    "text": "self:setlogintimeout(ms or -1)",
    "type": "statement:functioncall"
  }, {
    "id": 360,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 361,
    "text": "function Connection:get_login_timeout()\r\n  local ms = self:getlogintimeout()\r\n  if ms == -1 then return nil end\r\n  return ms\r\nend",
    "type": "function"
  }, {
    "id": 362,
    "text": "local ms = self:getlogintimeout()",
    "type": "statement:localassign"
  }, {
    "id": 363,
    "text": "if ms == -1 then return nil end",
    "type": "statement:if"
  }, {
    "id": 364,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 365,
    "text": "local function callable(fn)\r\n  if not fn then return false end\r\n  local t = type(fn)\r\n  if t == 'function' then return true  end\r\n  if t == 'number'   then return false end\r\n  if t == 'boolean'  then return false end\r\n  if t == 'string'   then return false end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 366,
    "text": "if not fn then return false end",
    "type": "statement:if"
  }, {
    "id": 367,
    "text": "local t = type(fn)",
    "type": "statement:localassign"
  }, {
    "id": 368,
    "text": "if t == 'function' then return true  end",
    "type": "statement:if"
  }, {
    "id": 369,
    "text": "if t == 'number'   then return false end",
    "type": "statement:if"
  }, {
    "id": 370,
    "text": "if t == 'boolean'  then return false end",
    "type": "statement:if"
  }, {
    "id": 371,
    "text": "if t == 'string'   then return false end",
    "type": "statement:if"
  }, {
    "id": 372,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 373,
    "text": "local function implement(name, newname)\r\n  local impl_name  = name .. \"_impl\"\r\n  assert(     Connection[name]      )\r\n  assert( not Connection[impl_name] )\r\n  assert( not Connection[newname]   )\r\n  local impl = function (self, fetch_mode, ...)\r\n    local arg = pack_n(...)\r\n    local fn = arg[arg.n]\r\n    if callable(fn) then -- assume this callback\r\n      arg[arg.n] = nil\r\n      arg.n = arg.n - 1\r\n    else fn = nil end\r\n\r\n    local stmt, err = self[impl_name](self, unpack_n(arg))\r\n    if not stmt then return nil, err end\r\n    stmt:setdestroyonclose(true)\r\n\r\n    if fn then return stmt:foreach(fetch_mode, true, fn) end\r\n    return stmt:fetch_all(fetch_mode or 'a', true)\r\n  end\r\n\r\n  newname = newname or name\r\n  Connection[ name ..'_impl' ] = Connection[ name ]\r\n  Connection[         newname   ] = function(self, ...) return impl(self, nil,  ...) end\r\n  Connection[ 'i'  .. newname   ] = function(self, ...) return impl(self, 'n',  ...) end\r\n  Connection[ 'n'  .. newname   ] = function(self, ...) return impl(self, 'a',  ...) end\r\n  Connection[ 't'  .. newname   ] = function(self, ...) return impl(self, 'an', ...) end\r\nend",
    "type": "function"
  }, {
    "id": 374,
    "text": "local impl_name  = name .. \"_impl\"",
    "type": "statement:localassign"
  }, {
    "id": 375,
    "text": "assert(     Connection[name]      )",
    "type": "statement:functioncall"
  }, {
    "id": 376,
    "text": "assert( not Connection[impl_name] )",
    "type": "statement:functioncall"
  }, {
    "id": 377,
    "text": "assert( not Connection[newname]   )",
    "type": "statement:functioncall"
  }, {
    "id": 378,
    "text": "local impl = function (self, fetch_mode, ...)\r\n    local arg = pack_n(...)\r\n    local fn = arg[arg.n]\r\n    if callable(fn) then -- assume this callback\r\n      arg[arg.n] = nil\r\n      arg.n = arg.n - 1\r\n    else fn = nil end\r\n\r\n    local stmt, err = self[impl_name](self, unpack_n(arg))\r\n    if not stmt then return nil, err end\r\n    stmt:setdestroyonclose(true)\r\n\r\n    if fn then return stmt:foreach(fetch_mode, true, fn) end\r\n    return stmt:fetch_all(fetch_mode or 'a', true)\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 379,
    "text": "local arg = pack_n(...)",
    "type": "statement:localassign"
  }, {
    "id": 380,
    "text": "local fn = arg[arg.n]",
    "type": "statement:localassign"
  }, {
    "id": 381,
    "text": "if callable(fn) then -- assume this callback\r\n      arg[arg.n] = nil\r\n      arg.n = arg.n - 1\r\n    else fn = nil end",
    "type": "statement:if"
  }, {
    "id": 382,
    "text": "arg[arg.n] = nil",
    "type": "statement:assign"
  }, {
    "id": 383,
    "text": "arg.n = arg.n - 1",
    "type": "statement:assign"
  }, {
    "id": 384,
    "text": "fn = nil",
    "type": "statement:assign"
  }, {
    "id": 385,
    "text": "local stmt, err = self[impl_name](self, unpack_n(arg))",
    "type": "statement:localassign"
  }, {
    "id": 386,
    "text": "if fn then return stmt:foreach(fetch_mode, true, fn) end",
    "type": "statement:if"
  }, {
    "id": 387,
    "text": "newname = newname or name",
    "type": "statement:assign"
  }, {
    "id": 388,
    "text": "Connection[ name ..'_impl' ] = Connection[ name ]",
    "type": "statement:assign"
  }, {
    "id": 389,
    "text": "Connection[         newname   ] = function(self, ...) return impl(self, nil,  ...) end",
    "type": "statement:assign"
  }, {
    "id": 390,
    "text": "Connection[ 'i'  .. newname   ] = function(self, ...) return impl(self, 'n',  ...) end",
    "type": "statement:assign"
  }, {
    "id": 391,
    "text": "Connection[ 'n'  .. newname   ] = function(self, ...) return impl(self, 'a',  ...) end",
    "type": "statement:assign"
  }, {
    "id": 392,
    "text": "Connection[ 't'  .. newname   ] = function(self, ...) return impl(self, 'an', ...) end",
    "type": "statement:assign"
  }, {
    "id": 393,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 394,
    "text": "function (self, fetch_mode, ...)\r\n    local arg = pack_n(...)\r\n    local fn = arg[arg.n]\r\n    if callable(fn) then -- assume this callback\r\n      arg[arg.n] = nil\r\n      arg.n = arg.n - 1\r\n    else fn = nil end\r\n\r\n    local stmt, err = self[impl_name](self, unpack_n(arg))\r\n    if not stmt then return nil, err end\r\n    stmt:setdestroyonclose(true)\r\n\r\n    if fn then return stmt:foreach(fetch_mode, true, fn) end\r\n    return stmt:fetch_all(fetch_mode or 'a', true)\r\n  end",
    "type": "function"
  }, {
    "id": 395,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 396,
    "text": "function(self, ...) return impl(self, nil,  ...) end",
    "type": "function"
  }, {
    "id": 397,
    "text": "function(self, ...) return impl(self, 'n',  ...) end",
    "type": "function"
  }, {
    "id": 398,
    "text": "function(self, ...) return impl(self, 'a',  ...) end",
    "type": "function"
  }, {
    "id": 399,
    "text": "function(self, ...) return impl(self, 'an', ...) end",
    "type": "function"
  }, {
    "id": 400,
    "text": "function ()\r\n      local res, err = cur:fetch(res, fetch_mode)\r\n      if res then return res end\r\n      if err then throw(err) end\r\n    end",
    "type": "function"
  }, {
    "id": 401,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 402,
    "text": "function ()\r\n    local res, err = cur:fetch(res, 'n')\r\n    if res then return unpack(res, 1, n) end\r\n    if err then throw(err) end\r\n  end",
    "type": "function"
  }, {
    "id": 403,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 404,
    "text": "",
    "type": "function container"
  }, {
    "id": 405,
    "text": "load",
    "type": "global function"
  }, {
    "id": 406,
    "text": "getcnnmeta",
    "type": "global function"
  }, {
    "id": 407,
    "text": "getstmtmeta",
    "type": "global function"
  }, {
    "id": 408,
    "text": "getenvmeta",
    "type": "global function"
  }, {
    "id": 409,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 410,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 411,
    "text": "throw",
    "type": "global function"
  }, {
    "id": 412,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 413,
    "text": "pack_n",
    "type": "global function"
  }, {
    "id": 414,
    "text": "unpack_n",
    "type": "global function"
  }, {
    "id": 415,
    "text": "translate_params",
    "type": "global function"
  }, {
    "id": 416,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 417,
    "text": "next",
    "type": "global function"
  }, {
    "id": 418,
    "text": "type",
    "type": "global function"
  }, {
    "id": 419,
    "text": "apply_params",
    "type": "global function"
  }, {
    "id": 420,
    "text": "environment",
    "type": "global function"
  }, {
    "id": 421,
    "text": "ulong",
    "type": "global function"
  }, {
    "id": 422,
    "text": "Connect",
    "type": "global function"
  }, {
    "id": 423,
    "text": "Environment",
    "type": "global function"
  }, {
    "id": 424,
    "text": "collect",
    "type": "global function"
  }, {
    "id": 425,
    "text": "set_user_val",
    "type": "global function"
  }, {
    "id": 426,
    "text": "self[impl_name]",
    "type": "global function"
  }, {
    "id": 427,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 428,
    "text": "odbc[tname]",
    "type": "global function"
  }, {
    "id": 429,
    "text": "init_connection",
    "type": "global function"
  }, {
    "id": 430,
    "text": "user_val",
    "type": "global function"
  }, {
    "id": 431,
    "text": "select",
    "type": "global function"
  }, {
    "id": 432,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 433,
    "text": "require",
    "type": "global function"
  }, {
    "id": 434,
    "text": "",
    "type": "interface"
  }, {
    "id": 435,
    "text": "",
    "type": "interface"
  }, {
    "id": 436,
    "text": "",
    "type": "variable container"
  }, {
    "id": 437,
    "text": "",
    "type": "require container"
  }, {
    "id": 438,
    "text": "",
    "type": "local variable"
  }, {
    "id": 439,
    "text": "",
    "type": "n/a"
  }, {
    "id": 440,
    "text": "",
    "type": "local variable"
  }, {
    "id": 441,
    "text": "",
    "type": "n/a"
  }, {
    "id": 442,
    "text": "",
    "type": "local variable"
  }, {
    "id": 443,
    "text": "",
    "type": "n/a"
  }, {
    "id": 444,
    "text": "",
    "type": "local variable"
  }, {
    "id": 445,
    "text": "",
    "type": "n/a"
  }, {
    "id": 446,
    "text": "",
    "type": "local variable"
  }, {
    "id": 447,
    "text": "",
    "type": "n/a"
  }, {
    "id": 448,
    "text": "",
    "type": "local variable"
  }, {
    "id": 449,
    "text": "",
    "type": "n/a"
  }, {
    "id": 450,
    "text": "",
    "type": "local variable"
  }, {
    "id": 451,
    "text": "",
    "type": "n/a"
  }, {
    "id": 452,
    "text": "",
    "type": "local variable"
  }, {
    "id": 453,
    "text": "",
    "type": "n/a"
  }, {
    "id": 454,
    "text": "",
    "type": "local variable"
  }, {
    "id": 455,
    "text": "",
    "type": "n/a"
  }, {
    "id": 456,
    "text": "",
    "type": "local variable"
  }, {
    "id": 457,
    "text": "",
    "type": "n/a"
  }, {
    "id": 458,
    "text": "",
    "type": "local variable"
  }, {
    "id": 459,
    "text": "",
    "type": "n/a"
  }, {
    "id": 460,
    "text": "",
    "type": "local variable"
  }, {
    "id": 461,
    "text": "",
    "type": "n/a"
  }, {
    "id": 462,
    "text": "",
    "type": "local variable"
  }, {
    "id": 463,
    "text": "",
    "type": "n/a"
  }, {
    "id": 464,
    "text": "",
    "type": "local variable"
  }, {
    "id": 465,
    "text": "",
    "type": "n/a"
  }, {
    "id": 466,
    "text": "",
    "type": "local variable"
  }, {
    "id": 467,
    "text": "",
    "type": "n/a"
  }, {
    "id": 468,
    "text": "",
    "type": "local variable"
  }, {
    "id": 469,
    "text": "",
    "type": "n/a"
  }, {
    "id": 470,
    "text": "",
    "type": "local variable"
  }, {
    "id": 471,
    "text": "",
    "type": "n/a"
  }, {
    "id": 472,
    "text": "",
    "type": "local variable"
  }, {
    "id": 473,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 474,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 475,
    "text": "",
    "type": "boolean"
  }, {
    "id": 476,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 477,
    "text": "",
    "type": "boolean"
  }, {
    "id": 478,
    "text": "",
    "type": "local variable"
  }, {
    "id": 479,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 480,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 481,
    "text": "",
    "type": "string"
  }, {
    "id": 482,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 483,
    "text": "",
    "type": "string"
  }, {
    "id": 484,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 485,
    "text": "",
    "type": "string"
  }, {
    "id": 486,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 487,
    "text": "",
    "type": "string"
  }, {
    "id": 488,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 489,
    "text": "",
    "type": "string"
  }, {
    "id": 490,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 491,
    "text": "",
    "type": "string"
  }, {
    "id": 492,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 493,
    "text": "",
    "type": "string"
  }, {
    "id": 494,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 495,
    "text": "",
    "type": "string"
  }, {
    "id": 496,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 497,
    "text": "",
    "type": "string"
  }, {
    "id": 498,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 499,
    "text": "",
    "type": "string"
  }, {
    "id": 500,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 501,
    "text": "",
    "type": "string"
  }, {
    "id": 502,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 503,
    "text": "",
    "type": "string"
  }, {
    "id": 504,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 505,
    "text": "",
    "type": "string"
  }, {
    "id": 506,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 507,
    "text": "",
    "type": "string"
  }, {
    "id": 508,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 509,
    "text": "",
    "type": "string"
  }, {
    "id": 510,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 511,
    "text": "",
    "type": "string"
  }, {
    "id": 512,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 513,
    "text": "",
    "type": "string"
  }, {
    "id": 514,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 515,
    "text": "",
    "type": "string"
  }, {
    "id": 516,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 517,
    "text": "",
    "type": "string"
  }, {
    "id": 518,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 519,
    "text": "",
    "type": "string"
  }, {
    "id": 520,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 521,
    "text": "",
    "type": "string"
  }, {
    "id": 522,
    "text": "",
    "type": "local variable"
  }, {
    "id": 523,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 524,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 525,
    "text": "",
    "type": "string"
  }, {
    "id": 526,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 527,
    "text": "",
    "type": "string"
  }, {
    "id": 528,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 529,
    "text": "",
    "type": "string"
  }, {
    "id": 530,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 531,
    "text": "",
    "type": "string"
  }, {
    "id": 532,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 533,
    "text": "",
    "type": "string"
  }, {
    "id": 534,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 535,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 536,
    "text": "",
    "type": "interface container"
  }, {
    "id": 537,
    "text": "",
    "type": "interface"
  }, {
    "id": 538,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 539,
    "text": "",
    "type": "require local variable"
  } ]
}