{
  "_filename": "07_test_odbc_val.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-odbc/test/07_test_odbc_val.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 13,
    "label": "has",
    "to": 18
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 19
  }, {
    "from": 13,
    "label": "has",
    "to": 18
  }, {
    "from": 13,
    "label": "has",
    "to": 17
  }, {
    "from": 13,
    "label": "has",
    "to": 19
  }, {
    "from": 13,
    "label": "has",
    "to": 18
  }, {
    "from": 13,
    "label": "has",
    "to": 20
  }, {
    "from": 13,
    "label": "has",
    "to": 19
  }, {
    "from": 13,
    "label": "has",
    "to": 18
  }, {
    "from": 13,
    "label": "has",
    "to": 21
  }, {
    "from": 13,
    "label": "has",
    "to": 22
  }, {
    "from": 9,
    "label": "has",
    "to": 23
  }, {
    "from": 9,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 7,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 11
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 28,
    "label": "has",
    "to": 33
  }, {
    "from": 28,
    "label": "has",
    "to": 34
  }, {
    "from": 28,
    "label": "has",
    "to": 35
  }, {
    "from": 28,
    "label": "has",
    "to": 36
  }, {
    "from": 27,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 11
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 34
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 38,
    "label": "has",
    "to": 42
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 38,
    "label": "has",
    "to": 43
  }, {
    "from": 38,
    "label": "has",
    "to": 44
  }, {
    "from": 38,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 11
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 46,
    "label": "has",
    "to": 34
  }, {
    "from": 46,
    "label": "has",
    "to": 49
  }, {
    "from": 46,
    "label": "has",
    "to": 50
  }, {
    "from": 46,
    "label": "has",
    "to": 49
  }, {
    "from": 46,
    "label": "has",
    "to": 51
  }, {
    "from": 46,
    "label": "has",
    "to": 52
  }, {
    "from": 46,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 11
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 54,
    "label": "has",
    "to": 34
  }, {
    "from": 54,
    "label": "has",
    "to": 57
  }, {
    "from": 54,
    "label": "has",
    "to": 58
  }, {
    "from": 54,
    "label": "has",
    "to": 59
  }, {
    "from": 54,
    "label": "has",
    "to": 60
  }, {
    "from": 54,
    "label": "has",
    "to": 61
  }, {
    "from": 54,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 63,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 67,
    "label": "has",
    "to": 70
  }, {
    "from": 67,
    "label": "has",
    "to": 71
  }, {
    "from": 67,
    "label": "has",
    "to": 72
  }, {
    "from": 67,
    "label": "has",
    "to": 73
  }, {
    "from": 67,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 74,
    "label": "has",
    "to": 77
  }, {
    "from": 74,
    "label": "has",
    "to": 78
  }, {
    "from": 67,
    "label": "has",
    "to": 79
  }, {
    "from": 67,
    "label": "has",
    "to": 80
  }, {
    "from": 67,
    "label": "has",
    "to": 81
  }, {
    "from": 67,
    "label": "has",
    "to": 82
  }, {
    "from": 67,
    "label": "has",
    "to": 83
  }, {
    "from": 67,
    "label": "has",
    "to": 84
  }, {
    "from": 67,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 86,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 86,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 86,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 86,
    "label": "has",
    "to": 84
  }, {
    "from": 86,
    "label": "has",
    "to": 95
  }, {
    "from": 86,
    "label": "has",
    "to": 96
  }, {
    "from": 86,
    "label": "has",
    "to": 97
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 98,
    "label": "has",
    "to": 100
  }, {
    "from": 98,
    "label": "has",
    "to": 101
  }, {
    "from": 98,
    "label": "has",
    "to": 71
  }, {
    "from": 98,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 103,
    "label": "has",
    "to": 106
  }, {
    "from": 103,
    "label": "has",
    "to": 107
  }, {
    "from": 103,
    "label": "has",
    "to": 108
  }, {
    "from": 103,
    "label": "has",
    "to": 109
  }, {
    "from": 103,
    "label": "has",
    "to": 110
  }, {
    "from": 103,
    "label": "has",
    "to": 111
  }, {
    "from": 103,
    "label": "has",
    "to": 112
  }, {
    "from": 103,
    "label": "has",
    "to": 113
  }, {
    "from": 103,
    "label": "has",
    "to": 114
  }, {
    "from": 115,
    "label": "has",
    "to": 15
  }, {
    "from": 116,
    "label": "has",
    "to": 17
  }, {
    "from": 38,
    "label": "calls",
    "to": 119
  }, {
    "from": 67,
    "label": "calls",
    "to": 133
  }, {
    "from": 7,
    "label": "calls",
    "to": 121
  }, {
    "from": 7,
    "label": "calls",
    "to": 121
  }, {
    "from": 7,
    "label": "calls",
    "to": 121
  }, {
    "from": 27,
    "label": "calls",
    "to": 121
  }, {
    "from": 38,
    "label": "calls",
    "to": 121
  }, {
    "from": 46,
    "label": "calls",
    "to": 121
  }, {
    "from": 54,
    "label": "calls",
    "to": 121
  }, {
    "from": 63,
    "label": "calls",
    "to": 121
  }, {
    "from": 103,
    "label": "calls",
    "to": 122
  }, {
    "from": 7,
    "label": "calls",
    "to": 139
  }, {
    "from": 27,
    "label": "calls",
    "to": 139
  }, {
    "from": 27,
    "label": "calls",
    "to": 139
  }, {
    "from": 27,
    "label": "calls",
    "to": 139
  }, {
    "from": 27,
    "label": "calls",
    "to": 139
  }, {
    "from": 38,
    "label": "calls",
    "to": 139
  }, {
    "from": 38,
    "label": "calls",
    "to": 139
  }, {
    "from": 38,
    "label": "calls",
    "to": 139
  }, {
    "from": 46,
    "label": "calls",
    "to": 139
  }, {
    "from": 46,
    "label": "calls",
    "to": 139
  }, {
    "from": 46,
    "label": "calls",
    "to": 139
  }, {
    "from": 54,
    "label": "calls",
    "to": 139
  }, {
    "from": 54,
    "label": "calls",
    "to": 139
  }, {
    "from": 54,
    "label": "calls",
    "to": 139
  }, {
    "from": 63,
    "label": "calls",
    "to": 139
  }, {
    "from": 67,
    "label": "calls",
    "to": 139
  }, {
    "from": 67,
    "label": "calls",
    "to": 139
  }, {
    "from": 67,
    "label": "calls",
    "to": 139
  }, {
    "from": 103,
    "label": "calls",
    "to": 139
  }, {
    "from": 103,
    "label": "calls",
    "to": 139
  }, {
    "from": 103,
    "label": "calls",
    "to": 139
  }, {
    "from": 103,
    "label": "calls",
    "to": 139
  }, {
    "from": 103,
    "label": "calls",
    "to": 139
  }, {
    "from": 67,
    "label": "calls",
    "to": 135
  }, {
    "from": 46,
    "label": "calls",
    "to": 126
  }, {
    "from": 103,
    "label": "calls",
    "to": 127
  }, {
    "from": 103,
    "label": "calls",
    "to": 127
  }, {
    "from": 7,
    "label": "calls",
    "to": 137
  }, {
    "from": 7,
    "label": "calls",
    "to": 137
  }, {
    "from": 27,
    "label": "calls",
    "to": 137
  }, {
    "from": 63,
    "label": "calls",
    "to": 123
  }, {
    "from": 103,
    "label": "calls",
    "to": 131
  }, {
    "from": 103,
    "label": "calls",
    "to": 131
  }, {
    "from": 7,
    "label": "calls",
    "to": 124
  }, {
    "from": 27,
    "label": "calls",
    "to": 124
  }, {
    "from": 7,
    "label": "calls",
    "to": 134
  }, {
    "from": 7,
    "label": "calls",
    "to": 134
  }, {
    "from": 7,
    "label": "calls",
    "to": 134
  }, {
    "from": 27,
    "label": "calls",
    "to": 134
  }, {
    "from": 38,
    "label": "calls",
    "to": 134
  }, {
    "from": 46,
    "label": "calls",
    "to": 134
  }, {
    "from": 54,
    "label": "calls",
    "to": 134
  }, {
    "from": 67,
    "label": "calls",
    "to": 134
  }, {
    "from": 67,
    "label": "calls",
    "to": 134
  }, {
    "from": 67,
    "label": "calls",
    "to": 134
  }, {
    "from": 67,
    "label": "calls",
    "to": 134
  }, {
    "from": 67,
    "label": "calls",
    "to": 134
  }, {
    "from": 67,
    "label": "calls",
    "to": 134
  }, {
    "from": 67,
    "label": "calls",
    "to": 134
  }, {
    "from": 67,
    "label": "calls",
    "to": 134
  }, {
    "from": 67,
    "label": "calls",
    "to": 134
  }, {
    "from": 67,
    "label": "calls",
    "to": 134
  }, {
    "from": 103,
    "label": "calls",
    "to": 134
  }, {
    "from": 67,
    "label": "calls",
    "to": 120
  }, {
    "from": 3,
    "label": "calls",
    "to": 120
  }, {
    "from": 63,
    "label": "calls",
    "to": 130
  }, {
    "from": 67,
    "label": "calls",
    "to": 130
  }, {
    "from": 67,
    "label": "calls",
    "to": 130
  }, {
    "from": 38,
    "label": "calls",
    "to": 140
  }, {
    "from": 46,
    "label": "calls",
    "to": 140
  }, {
    "from": 54,
    "label": "calls",
    "to": 140
  }, {
    "from": 3,
    "label": "calls",
    "to": 140
  }, {
    "from": 3,
    "label": "calls",
    "to": 67
  }, {
    "from": 54,
    "label": "calls",
    "to": 132
  }, {
    "from": 3,
    "label": "calls",
    "to": 128
  }, {
    "from": 117,
    "label": "calls",
    "to": 2
  }, {
    "from": 103,
    "label": "calls",
    "to": 129
  }, {
    "from": 5,
    "label": "calls",
    "to": 63
  }, {
    "from": 117,
    "label": "calls",
    "to": 138
  }, {
    "from": 117,
    "label": "calls",
    "to": 138
  }, {
    "from": 117,
    "label": "calls",
    "to": 138
  }, {
    "from": 7,
    "label": "calls",
    "to": 136
  }, {
    "from": 7,
    "label": "calls",
    "to": 136
  }, {
    "from": 117,
    "label": "calls",
    "to": 125
  }, {
    "from": 117,
    "label": "calls",
    "to": 125
  }, {
    "from": 1,
    "label": "contains",
    "to": 117
  }, {
    "from": 117,
    "label": "declares",
    "to": 2
  }, {
    "from": 117,
    "label": "declares",
    "to": 3
  }, {
    "from": 117,
    "label": "declares",
    "to": 5
  }, {
    "from": 117,
    "label": "declares",
    "to": 7
  }, {
    "from": 117,
    "label": "declares",
    "to": 27
  }, {
    "from": 117,
    "label": "declares",
    "to": 38
  }, {
    "from": 117,
    "label": "declares",
    "to": 46
  }, {
    "from": 117,
    "label": "declares",
    "to": 54
  }, {
    "from": 117,
    "label": "declares",
    "to": 63
  }, {
    "from": 117,
    "label": "declares",
    "to": 67
  }, {
    "from": 117,
    "label": "declares",
    "to": 86
  }, {
    "from": 117,
    "label": "declares",
    "to": 98
  }, {
    "from": 117,
    "label": "declares",
    "to": 103
  }, {
    "from": 117,
    "label": "declares",
    "to": 115
  }, {
    "from": 117,
    "label": "declares",
    "to": 116
  }, {
    "from": 1,
    "label": "contains",
    "to": 142
  }, {
    "from": 1,
    "label": "contains",
    "to": 143
  }, {
    "from": 142,
    "label": "initializes",
    "to": 144
  }, {
    "from": 144,
    "label": "assigns",
    "to": 145
  }, {
    "from": 142,
    "label": "initializes",
    "to": 146
  }, {
    "from": 146,
    "label": "assigns",
    "to": 147
  }, {
    "from": 147,
    "label": "assigns",
    "to": 148
  }, {
    "from": 142,
    "label": "initializes",
    "to": 149
  }, {
    "from": 149,
    "label": "assigns",
    "to": 150
  }, {
    "from": 142,
    "label": "initializes",
    "to": 151
  }, {
    "from": 151,
    "label": "assigns",
    "to": 152
  }, {
    "from": 152,
    "label": "assigns",
    "to": 153
  }, {
    "from": 152,
    "label": "assigns",
    "to": 154
  }, {
    "from": 152,
    "label": "assigns",
    "to": 155
  }, {
    "from": 152,
    "label": "assigns",
    "to": 156
  }, {
    "from": 152,
    "label": "assigns",
    "to": 157
  }, {
    "from": 152,
    "label": "assigns",
    "to": 158
  }, {
    "from": 152,
    "label": "assigns",
    "to": 159
  }, {
    "from": 152,
    "label": "assigns",
    "to": 160
  }, {
    "from": 152,
    "label": "assigns",
    "to": 161
  }, {
    "from": 152,
    "label": "assigns",
    "to": 162
  }, {
    "from": 152,
    "label": "assigns",
    "to": 163
  }, {
    "from": 152,
    "label": "assigns",
    "to": 164
  }, {
    "from": 152,
    "label": "assigns",
    "to": 165
  }, {
    "from": 152,
    "label": "assigns",
    "to": 166
  }, {
    "from": 152,
    "label": "assigns",
    "to": 167
  }, {
    "from": 152,
    "label": "assigns",
    "to": 168
  }, {
    "from": 152,
    "label": "assigns",
    "to": 169
  }, {
    "from": 142,
    "label": "initializes",
    "to": 170
  }, {
    "from": 170,
    "label": "assigns",
    "to": 171
  }, {
    "from": 171,
    "label": "assigns",
    "to": 172
  }, {
    "from": 172,
    "label": "assigns",
    "to": 173
  }, {
    "from": 171,
    "label": "assigns",
    "to": 174
  }, {
    "from": 174,
    "label": "assigns",
    "to": 175
  }, {
    "from": 171,
    "label": "assigns",
    "to": 176
  }, {
    "from": 176,
    "label": "assigns",
    "to": 177
  }, {
    "from": 171,
    "label": "assigns",
    "to": 178
  }, {
    "from": 178,
    "label": "assigns",
    "to": 179
  }, {
    "from": 171,
    "label": "assigns",
    "to": 180
  }, {
    "from": 180,
    "label": "assigns",
    "to": 181
  }, {
    "from": 171,
    "label": "assigns",
    "to": 182
  }, {
    "from": 182,
    "label": "assigns",
    "to": 183
  }, {
    "from": 171,
    "label": "assigns",
    "to": 184
  }, {
    "from": 184,
    "label": "assigns",
    "to": 185
  }, {
    "from": 171,
    "label": "assigns",
    "to": 186
  }, {
    "from": 186,
    "label": "assigns",
    "to": 187
  }, {
    "from": 171,
    "label": "assigns",
    "to": 188
  }, {
    "from": 188,
    "label": "assigns",
    "to": 189
  }, {
    "from": 171,
    "label": "assigns",
    "to": 190
  }, {
    "from": 190,
    "label": "assigns",
    "to": 191
  }, {
    "from": 171,
    "label": "assigns",
    "to": 192
  }, {
    "from": 192,
    "label": "assigns",
    "to": 193
  }, {
    "from": 171,
    "label": "assigns",
    "to": 194
  }, {
    "from": 194,
    "label": "assigns",
    "to": 195
  }, {
    "from": 171,
    "label": "assigns",
    "to": 196
  }, {
    "from": 196,
    "label": "assigns",
    "to": 197
  }, {
    "from": 171,
    "label": "assigns",
    "to": 198
  }, {
    "from": 198,
    "label": "assigns",
    "to": 199
  }, {
    "from": 171,
    "label": "assigns",
    "to": 200
  }, {
    "from": 200,
    "label": "assigns",
    "to": 201
  }, {
    "from": 171,
    "label": "assigns",
    "to": 202
  }, {
    "from": 202,
    "label": "assigns",
    "to": 203
  }, {
    "from": 142,
    "label": "initializes",
    "to": 204
  }, {
    "from": 204,
    "label": "assigns",
    "to": 205
  }, {
    "from": 142,
    "label": "initializes",
    "to": 206
  }, {
    "from": 206,
    "label": "assigns",
    "to": 207
  }, {
    "from": 142,
    "label": "initializes",
    "to": 208
  }, {
    "from": 142,
    "label": "initializes",
    "to": 209
  }, {
    "from": 142,
    "label": "initializes",
    "to": 210
  }, {
    "from": 142,
    "label": "initializes",
    "to": 211
  }, {
    "from": 211,
    "label": "assigns",
    "to": 212
  }, {
    "from": 142,
    "label": "initializes",
    "to": 213
  }, {
    "from": 213,
    "label": "assigns",
    "to": 214
  }, {
    "from": 143,
    "label": "initializes",
    "to": 215
  }, {
    "from": 215,
    "label": "requires",
    "to": 118
  }, {
    "from": 143,
    "label": "initializes",
    "to": 141
  }, {
    "from": 143,
    "label": "initializes",
    "to": 141
  }, {
    "from": 141,
    "label": "requires",
    "to": 1
  }, {
    "from": 14,
    "label": "hasArgument",
    "to": 115
  }, {
    "from": 16,
    "label": "hasArgument",
    "to": 116
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "07_test_odbc_val",
    "type": "module"
  }, {
    "id": 2,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 3,
    "text": "function setup()\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "function teardown()\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "function test_ctor()\r\n  local val;\r\n  for i, tname in ipairs(types)do \r\n    val = odbc[tname]()    assert_true(val:is_null())\r\n    val = odbc[tname](nil) assert_true(val:is_null())\r\n    if(tname ~= 'bit')then\r\n      assert_error('fail empty assign to ' .. tname, function() val:set() end)\r\n      assert_error('fail nil   assign to ' .. tname, function() val:set(nil) end)\r\n    else\r\n      val:set(true) val:set()    assert_false(val:get())\r\n      val:set(true) val:set(nil) assert_false(val:get())\r\n      val:set(true) val:set(0)   assert_false(val:get())\r\n      val:set(true) val:set(1)   assert_true (val:get())\r\n    end\r\n    local sz = tsize[tname]\r\n    if sz then assert_equal(sz, val:size()) end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "local val",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "for i, tname in ipairs(types)do \r\n    val = odbc[tname]()    assert_true(val:is_null())\r\n    val = odbc[tname](nil) assert_true(val:is_null())\r\n    if(tname ~= 'bit')then\r\n      assert_error('fail empty assign to ' .. tname, function() val:set() end)\r\n      assert_error('fail nil   assign to ' .. tname, function() val:set(nil) end)\r\n    else\r\n      val:set(true) val:set()    assert_false(val:get())\r\n      val:set(true) val:set(nil) assert_false(val:get())\r\n      val:set(true) val:set(0)   assert_false(val:get())\r\n      val:set(true) val:set(1)   assert_true (val:get())\r\n    end\r\n    local sz = tsize[tname]\r\n    if sz then assert_equal(sz, val:size()) end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 10,
    "text": "val = odbc[tname]()",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "assert_true(val:is_null())",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "val = odbc[tname](nil)",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "if(tname ~= 'bit')then\r\n      assert_error('fail empty assign to ' .. tname, function() val:set() end)\r\n      assert_error('fail nil   assign to ' .. tname, function() val:set(nil) end)\r\n    else\r\n      val:set(true) val:set()    assert_false(val:get())\r\n      val:set(true) val:set(nil) assert_false(val:get())\r\n      val:set(true) val:set(0)   assert_false(val:get())\r\n      val:set(true) val:set(1)   assert_true (val:get())\r\n    end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "assert_error('fail empty assign to ' .. tname, function() val:set() end)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "val:set()",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "assert_error('fail nil   assign to ' .. tname, function() val:set(nil) end)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "val:set(nil)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "val:set(true)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "assert_false(val:get())",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "val:set(0)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "val:set(1)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "assert_true (val:get())",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "local sz = tsize[tname]",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "if sz then assert_equal(sz, val:size()) end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "assert_equal(sz, val:size())",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function test_buf()\r\n  for _, tname in ipairs{\"binary\",\"char\"} do\r\n    local val = odbc[tname](10)\r\n    assert_equal(10, val:size())\r\n    assert_equal(0,  val:length())\r\n    assert_true(val:is_null())\r\n    val:set(\"\")\r\n    assert_equal(0, val:length())\r\n    assert_false(val:is_null())\r\n    val:set((\"\\0\"):rep(2*val:size()))\r\n    assert_equal(val:size(), val:length())\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "for _, tname in ipairs{\"binary\",\"char\"} do\r\n    local val = odbc[tname](10)\r\n    assert_equal(10, val:size())\r\n    assert_equal(0,  val:length())\r\n    assert_true(val:is_null())\r\n    val:set(\"\")\r\n    assert_equal(0, val:length())\r\n    assert_false(val:is_null())\r\n    val:set((\"\\0\"):rep(2*val:size()))\r\n    assert_equal(val:size(), val:length())\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 29,
    "text": "local val = odbc[tname](10)",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "assert_equal(10, val:size())",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "assert_equal(0,  val:length())",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "val:set(\"\")",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "assert_equal(0, val:length())",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "assert_false(val:is_null())",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "val:set((\"\\0\"):rep(2*val:size()))",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "assert_equal(val:size(), val:length())",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function test_date()\r\n  val = assert_not_nil(odbc.date())\r\n  assert_true(val:is_null())\r\n  val:set(\"1995-05-08\")\r\n  assert_false(val:is_null())\r\n  assert_equal(\"1995-05-08\", val:get())\r\n  val:set(\"1999a-08-a08\")\r\n  assert_equal(\"1995-05-08\", val:get())\r\n  val:set(\"1999-8-7\")\r\n  assert_equal(\"1999-08-07\", val:get())\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "val = assert_not_nil(odbc.date())",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "val:set(\"1995-05-08\")",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "assert_equal(\"1995-05-08\", val:get())",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "val:set(\"1999a-08-a08\")",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "val:set(\"1999-8-7\")",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "assert_equal(\"1999-08-07\", val:get())",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function test_time()\r\n  val = assert_not_nil(odbc.time())\r\n  assert_true(val:is_null())\r\n  val:set(\"5:8:9\")\r\n  assert_false(val:is_null())\r\n  assert_equal(\"05:08:09\", val:get())\r\n  val:set(\"aa:bb:cc\")\r\n  assert_equal(\"05:08:09\", val:get())\r\n  val:set(\"06:07:08\")\r\n  assert_equal(\"06:07:08\", val:get())\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "val = assert_not_nil(odbc.time())",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "val:set(\"5:8:9\")",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "assert_equal(\"05:08:09\", val:get())",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "val:set(\"aa:bb:cc\")",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "val:set(\"06:07:08\")",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "assert_equal(\"06:07:08\", val:get())",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "function test_timestamp()\r\n  val = assert_not_nil(odbc.timestamp())\r\n  assert_true(val:is_null())\r\n  val:set(\"1995-2-01 5:8:9.123\")\r\n  assert_false(val:is_null())\r\n  assert_equal(\"1995-02-01 05:08:09.123\", val:get())\r\n  val:set(\"1995-2-01 5:8:9.0\")\r\n  assert_equal(\"1995-02-01 05:08:09\", val:get())\r\n  val:set(\"1995-3-02 7:9:5\")\r\n  assert_equal(\"1995-03-02 07:09:05\", val:get())\r\nend",
    "type": "function"
  }, {
    "id": 55,
    "text": "val = assert_not_nil(odbc.timestamp())",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "val:set(\"1995-2-01 5:8:9.123\")",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "assert_equal(\"1995-02-01 05:08:09.123\", val:get())",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "val:set(\"1995-2-01 5:8:9.0\")",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "assert_equal(\"1995-02-01 05:08:09\", val:get())",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "val:set(\"1995-3-02 7:9:5\")",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "assert_equal(\"1995-03-02 07:09:05\", val:get())",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "local function fin_table()\r\n  assert_equal(DROP_TABLE_RETURN_VALUE, drop_table(cnn))\r\n  assert_false(table_exists(cnn))\r\nend",
    "type": "function"
  }, {
    "id": 64,
    "text": "assert_equal(DROP_TABLE_RETURN_VALUE, drop_table(cnn))",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "assert_false(table_exists(cnn))",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "local function init_table()\r\n  assert_boolean(table_exists(cnn))\r\n  assert_equal(CREATE_TABLE_RETURN_VALUE, ensure_table(cnn))\r\n  assert_true(table_exists(cnn))\r\n  stmt = assert(cnn:statement())\r\n  assert_true(cnn:setautocommit(false))\r\n  assert_true(stmt:prepare(\"insert into \" .. TEST_TABLE_NAME .. \"(f1,f2) values(?,?)\"))\r\n  for i = 1, TEST_ROWS do\r\n    assert_true(stmt:bindbin(1, TEST_BIN_VAL))\r\n    assert_true(stmt:bindstr(2, TEST_STR_VAL))\r\n    assert_equal(1, stmt:execute())\r\n    assert_true(stmt:closed())\r\n  end\r\n  assert_true( cnn:commit()   )\r\n  assert_true( stmt:reset()   )\r\n  assert_true(cnn:setautocommit(true))\r\n  assert_equal(TEST_ROWS, stmt:execute(\"select count(*) from \" .. TEST_TABLE_NAME):fetch() )\r\n  assert_true( stmt:destroy() )\r\n  stmt = nil\r\nend",
    "type": "function"
  }, {
    "id": 68,
    "text": "assert_boolean(table_exists(cnn))",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "assert_equal(CREATE_TABLE_RETURN_VALUE, ensure_table(cnn))",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "assert_true(table_exists(cnn))",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "stmt = assert(cnn:statement())",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "assert_true(cnn:setautocommit(false))",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "assert_true(stmt:prepare(\"insert into \" .. TEST_TABLE_NAME .. \"(f1,f2) values(?,?)\"))",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "for i = 1, TEST_ROWS do\r\n    assert_true(stmt:bindbin(1, TEST_BIN_VAL))\r\n    assert_true(stmt:bindstr(2, TEST_STR_VAL))\r\n    assert_equal(1, stmt:execute())\r\n    assert_true(stmt:closed())\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 75,
    "text": "assert_true(stmt:bindbin(1, TEST_BIN_VAL))",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "assert_true(stmt:bindstr(2, TEST_STR_VAL))",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "assert_equal(1, stmt:execute())",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "assert_true(stmt:closed())",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "assert_true( cnn:commit()   )",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "assert_true( stmt:reset()   )",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "assert_true(cnn:setautocommit(true))",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "assert_equal(TEST_ROWS, stmt:execute(\"select count(*) from \" .. TEST_TABLE_NAME):fetch() )",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "assert_true( stmt:destroy() )",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "stmt = nil",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "function teardown()\r\n  if cnn and cnn:connected() then fin_table() end\r\n  if stmt then stmt:destroy() end\r\n  if cnn  then cnn:destroy()  end\r\n  if env  then env:destroy()  end\r\n  stmt = nil\r\n  cnn  = nil\r\n  env  = nil\r\nend",
    "type": "function"
  }, {
    "id": 87,
    "text": "if cnn and cnn:connected() then fin_table() end",
    "type": "statement:if"
  }, {
    "id": 88,
    "text": "fin_table()",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "if stmt then stmt:destroy() end",
    "type": "statement:if"
  }, {
    "id": 90,
    "text": "stmt:destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "if cnn  then cnn:destroy()  end",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "cnn:destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "if env  then env:destroy()  end",
    "type": "statement:if"
  }, {
    "id": 94,
    "text": "env:destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "cnn  = nil",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "env  = nil",
    "type": "statement:assign"
  }, {
    "id": 97,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 98,
    "text": "function setup()\r\n  env, cnn = do_connect()\r\n  assert_not_nil(env, cnn)\r\n  init_table()\r\n  stmt = assert(cnn:statement())\r\nend",
    "type": "function"
  }, {
    "id": 99,
    "text": "env, cnn = do_connect()",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "assert_not_nil(env, cnn)",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "init_table()",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "function test_overflow()\r\n  local binVal = assert_userdata(odbc.binary(10):bind_col(stmt, 1))\r\n  local strVal = assert_userdata(odbc.char(10):bind_col(stmt, 2))\r\n\r\n  assert_equal(stmt, stmt:execute(\"select f1, f2 from \" .. TEST_TABLE_NAME))\r\n  assert_true(stmt:vfetch())\r\n\r\n  assert_equal(binVal:size(), binVal:length())\r\n  assert_equal(strVal:size(), strVal:length())\r\n\r\n  local subBin = string.sub(TEST_BIN_VAL, 1, binVal:length())\r\n  local subStr = string.sub(TEST_STR_VAL, 1, strVal:length())\r\n  assert_equal(subBin, binVal:get())\r\n  assert_equal(subStr, strVal:get())\r\nend",
    "type": "function"
  }, {
    "id": 104,
    "text": "local binVal = assert_userdata(odbc.binary(10):bind_col(stmt, 1))",
    "type": "statement:localassign"
  }, {
    "id": 105,
    "text": "local strVal = assert_userdata(odbc.char(10):bind_col(stmt, 2))",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "assert_equal(stmt, stmt:execute(\"select f1, f2 from \" .. TEST_TABLE_NAME))",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "assert_true(stmt:vfetch())",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "assert_equal(binVal:size(), binVal:length())",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "assert_equal(strVal:size(), strVal:length())",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "local subBin = string.sub(TEST_BIN_VAL, 1, binVal:length())",
    "type": "statement:localassign"
  }, {
    "id": 111,
    "text": "local subStr = string.sub(TEST_STR_VAL, 1, strVal:length())",
    "type": "statement:localassign"
  }, {
    "id": 112,
    "text": "assert_equal(subBin, binVal:get())",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "assert_equal(subStr, strVal:get())",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 115,
    "text": "function() val:set() end",
    "type": "function"
  }, {
    "id": 116,
    "text": "function() val:set(nil) end",
    "type": "function"
  }, {
    "id": 117,
    "text": "",
    "type": "function container"
  }, {
    "id": 118,
    "text": "lunit",
    "type": "module"
  }, {
    "id": 119,
    "text": "date",
    "type": "global function"
  }, {
    "id": 120,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 121,
    "text": "assert_false",
    "type": "global function"
  }, {
    "id": 122,
    "text": "char",
    "type": "global function"
  }, {
    "id": 123,
    "text": "drop_table",
    "type": "global function"
  }, {
    "id": 124,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 125,
    "text": "TEST_CASE",
    "type": "global function"
  }, {
    "id": 126,
    "text": "time",
    "type": "global function"
  }, {
    "id": 127,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 128,
    "text": "do_connect",
    "type": "global function"
  }, {
    "id": 129,
    "text": "binary",
    "type": "global function"
  }, {
    "id": 130,
    "text": "table_exists",
    "type": "global function"
  }, {
    "id": 131,
    "text": "assert_userdata",
    "type": "global function"
  }, {
    "id": 132,
    "text": "timestamp",
    "type": "global function"
  }, {
    "id": 133,
    "text": "assert_boolean",
    "type": "global function"
  }, {
    "id": 134,
    "text": "assert_true",
    "type": "global function"
  }, {
    "id": 135,
    "text": "ensure_table",
    "type": "global function"
  }, {
    "id": 136,
    "text": "assert_error",
    "type": "global function"
  }, {
    "id": 137,
    "text": "odbc[tname]",
    "type": "global function"
  }, {
    "id": 138,
    "text": "require",
    "type": "global function"
  }, {
    "id": 139,
    "text": "assert_equal",
    "type": "global function"
  }, {
    "id": 140,
    "text": "assert_not_nil",
    "type": "global function"
  }, {
    "id": 141,
    "text": "",
    "type": "global variable"
  }, {
    "id": 142,
    "text": "",
    "type": "variable container"
  }, {
    "id": 143,
    "text": "",
    "type": "require container"
  }, {
    "id": 144,
    "text": "",
    "type": "local variable"
  }, {
    "id": 145,
    "text": "",
    "type": "n/a"
  }, {
    "id": 146,
    "text": "",
    "type": "local variable"
  }, {
    "id": 147,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 148,
    "text": "",
    "type": "symbol"
  }, {
    "id": 149,
    "text": "",
    "type": "local variable"
  }, {
    "id": 150,
    "text": "",
    "type": "n/a"
  }, {
    "id": 151,
    "text": "",
    "type": "local variable"
  }, {
    "id": 152,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 153,
    "text": "",
    "type": "string"
  }, {
    "id": 154,
    "text": "",
    "type": "string"
  }, {
    "id": 155,
    "text": "",
    "type": "string"
  }, {
    "id": 156,
    "text": "",
    "type": "string"
  }, {
    "id": 157,
    "text": "",
    "type": "string"
  }, {
    "id": 158,
    "text": "",
    "type": "string"
  }, {
    "id": 159,
    "text": "",
    "type": "string"
  }, {
    "id": 160,
    "text": "",
    "type": "string"
  }, {
    "id": 161,
    "text": "",
    "type": "string"
  }, {
    "id": 162,
    "text": "",
    "type": "string"
  }, {
    "id": 163,
    "text": "",
    "type": "string"
  }, {
    "id": 164,
    "text": "",
    "type": "string"
  }, {
    "id": 165,
    "text": "",
    "type": "string"
  }, {
    "id": 166,
    "text": "",
    "type": "string"
  }, {
    "id": 167,
    "text": "",
    "type": "string"
  }, {
    "id": 168,
    "text": "",
    "type": "string"
  }, {
    "id": 169,
    "text": "",
    "type": "string"
  }, {
    "id": 170,
    "text": "",
    "type": "local variable"
  }, {
    "id": 171,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 172,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 173,
    "text": "",
    "type": "number"
  }, {
    "id": 174,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 175,
    "text": "",
    "type": "number"
  }, {
    "id": 176,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 177,
    "text": "",
    "type": "number"
  }, {
    "id": 178,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 179,
    "text": "",
    "type": "number"
  }, {
    "id": 180,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 181,
    "text": "",
    "type": "number"
  }, {
    "id": 182,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 183,
    "text": "",
    "type": "number"
  }, {
    "id": 184,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 185,
    "text": "",
    "type": "number"
  }, {
    "id": 186,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 187,
    "text": "",
    "type": "number"
  }, {
    "id": 188,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 189,
    "text": "",
    "type": "number"
  }, {
    "id": 190,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 191,
    "text": "",
    "type": "number"
  }, {
    "id": 192,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 193,
    "text": "",
    "type": "number"
  }, {
    "id": 194,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 195,
    "text": "",
    "type": "number"
  }, {
    "id": 196,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 197,
    "text": "",
    "type": "number"
  }, {
    "id": 198,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 199,
    "text": "",
    "type": "keyword"
  }, {
    "id": 200,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 201,
    "text": "",
    "type": "keyword"
  }, {
    "id": 202,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 203,
    "text": "",
    "type": "keyword"
  }, {
    "id": 204,
    "text": "",
    "type": "local variable"
  }, {
    "id": 205,
    "text": "",
    "type": "n/a"
  }, {
    "id": 206,
    "text": "",
    "type": "local variable"
  }, {
    "id": 207,
    "text": "",
    "type": "number"
  }, {
    "id": 208,
    "text": "",
    "type": "local variable"
  }, {
    "id": 209,
    "text": "",
    "type": "local variable"
  }, {
    "id": 210,
    "text": "",
    "type": "local variable"
  }, {
    "id": 211,
    "text": "",
    "type": "local variable"
  }, {
    "id": 212,
    "text": "",
    "type": "n/a"
  }, {
    "id": 213,
    "text": "",
    "type": "local variable"
  }, {
    "id": 214,
    "text": "",
    "type": "n/a"
  }, {
    "id": 215,
    "text": "",
    "type": "require local variable"
  } ]
}