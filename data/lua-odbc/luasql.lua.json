{
  "_filename": "luasql.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-odbc/lua/odbc/luasql.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 11
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 12
  }, {
    "from": 6,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 4
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 4
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 18,
    "label": "has",
    "to": 4
  }, {
    "from": 18,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 4
  }, {
    "from": 23,
    "label": "has",
    "to": 4
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 4
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 30
  }, {
    "from": 26,
    "label": "has",
    "to": 31
  }, {
    "from": 26,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 26,
    "label": "has",
    "to": 4
  }, {
    "from": 26,
    "label": "has",
    "to": 4
  }, {
    "from": 26,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 4
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 4
  }, {
    "from": 39,
    "label": "has",
    "to": 4
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 4
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 4
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 4
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 4
  }, {
    "from": 48,
    "label": "has",
    "to": 30
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 48,
    "label": "has",
    "to": 4
  }, {
    "from": 48,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 48,
    "label": "has",
    "to": 4
  }, {
    "from": 48,
    "label": "has",
    "to": 4
  }, {
    "from": 48,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 56,
    "label": "has",
    "to": 59
  }, {
    "from": 56,
    "label": "has",
    "to": 60
  }, {
    "from": 56,
    "label": "has",
    "to": 4
  }, {
    "from": 56,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 62,
    "label": "has",
    "to": 4
  }, {
    "from": 62,
    "label": "has",
    "to": 4
  }, {
    "from": 62,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 4
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 4
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 4
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 4
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 75,
    "label": "calls",
    "to": 18
  }, {
    "from": 75,
    "label": "calls",
    "to": 78
  }, {
    "from": 75,
    "label": "calls",
    "to": 78
  }, {
    "from": 75,
    "label": "calls",
    "to": 80
  }, {
    "from": 75,
    "label": "calls",
    "to": 79
  }, {
    "from": 75,
    "label": "calls",
    "to": 2
  }, {
    "from": 18,
    "label": "calls",
    "to": 76
  }, {
    "from": 26,
    "label": "calls",
    "to": 35
  }, {
    "from": 67,
    "label": "calls",
    "to": 6
  }, {
    "from": 18,
    "label": "calls",
    "to": 82
  }, {
    "from": 35,
    "label": "calls",
    "to": 82
  }, {
    "from": 56,
    "label": "calls",
    "to": 82
  }, {
    "from": 75,
    "label": "calls",
    "to": 83
  }, {
    "from": 75,
    "label": "calls",
    "to": 84
  }, {
    "from": 48,
    "label": "calls",
    "to": 56
  }, {
    "from": 75,
    "label": "calls",
    "to": 85
  }, {
    "from": 35,
    "label": "calls",
    "to": 77
  }, {
    "from": 35,
    "label": "calls",
    "to": 77
  }, {
    "from": 56,
    "label": "calls",
    "to": 77
  }, {
    "from": 56,
    "label": "calls",
    "to": 77
  }, {
    "from": 75,
    "label": "calls",
    "to": 81
  }, {
    "from": 1,
    "label": "contains",
    "to": 75
  }, {
    "from": 75,
    "label": "declares",
    "to": 2
  }, {
    "from": 75,
    "label": "declares",
    "to": 6
  }, {
    "from": 75,
    "label": "declares",
    "to": 17
  }, {
    "from": 75,
    "label": "declares",
    "to": 18
  }, {
    "from": 75,
    "label": "declares",
    "to": 23
  }, {
    "from": 75,
    "label": "declares",
    "to": 26
  }, {
    "from": 75,
    "label": "declares",
    "to": 35
  }, {
    "from": 75,
    "label": "declares",
    "to": 39
  }, {
    "from": 75,
    "label": "declares",
    "to": 42
  }, {
    "from": 75,
    "label": "declares",
    "to": 44
  }, {
    "from": 75,
    "label": "declares",
    "to": 46
  }, {
    "from": 75,
    "label": "declares",
    "to": 48
  }, {
    "from": 75,
    "label": "declares",
    "to": 56
  }, {
    "from": 75,
    "label": "declares",
    "to": 62
  }, {
    "from": 75,
    "label": "declares",
    "to": 67
  }, {
    "from": 75,
    "label": "declares",
    "to": 69
  }, {
    "from": 75,
    "label": "declares",
    "to": 71
  }, {
    "from": 75,
    "label": "declares",
    "to": 73
  }, {
    "from": 1,
    "label": "contains",
    "to": 86
  }, {
    "from": 1,
    "label": "contains",
    "to": 87
  }, {
    "from": 86,
    "label": "initializes",
    "to": 88
  }, {
    "from": 88,
    "label": "assigns",
    "to": 89
  }, {
    "from": 89,
    "label": "assigns",
    "to": 90
  }, {
    "from": 90,
    "label": "assigns",
    "to": 91
  }, {
    "from": 86,
    "label": "initializes",
    "to": 92
  }, {
    "from": 92,
    "label": "assigns",
    "to": 93
  }, {
    "from": 93,
    "label": "assigns",
    "to": 94
  }, {
    "from": 94,
    "label": "assigns",
    "to": 95
  }, {
    "from": 86,
    "label": "initializes",
    "to": 96
  }, {
    "from": 96,
    "label": "assigns",
    "to": 97
  }, {
    "from": 97,
    "label": "assigns",
    "to": 98
  }, {
    "from": 98,
    "label": "assigns",
    "to": 99
  }, {
    "from": 86,
    "label": "initializes",
    "to": 100
  }, {
    "from": 100,
    "label": "assigns",
    "to": 101
  }, {
    "from": 86,
    "label": "initializes",
    "to": 102
  }, {
    "from": 86,
    "label": "initializes",
    "to": 103
  }, {
    "from": 86,
    "label": "initializes",
    "to": 104
  }, {
    "from": 86,
    "label": "initializes",
    "to": 105
  }, {
    "from": 86,
    "label": "initializes",
    "to": 106
  }, {
    "from": 106,
    "label": "assigns",
    "to": 107
  }, {
    "from": 86,
    "label": "initializes",
    "to": 108
  }, {
    "from": 108,
    "label": "assigns",
    "to": 109
  }, {
    "from": 86,
    "label": "initializes",
    "to": 110
  }, {
    "from": 110,
    "label": "assigns",
    "to": 111
  }, {
    "from": 86,
    "label": "initializes",
    "to": 112
  }, {
    "from": 112,
    "label": "assigns",
    "to": 113
  }, {
    "from": 86,
    "label": "initializes",
    "to": 114
  }, {
    "from": 114,
    "label": "assigns",
    "to": 115
  }, {
    "from": 87,
    "label": "initializes",
    "to": 116
  }, {
    "from": 116,
    "label": "requires",
    "to": 117
  }, {
    "from": 1,
    "label": "provides",
    "to": 118
  }, {
    "from": 106,
    "label": "represents",
    "to": 119
  }, {
    "from": 118,
    "label": "provides",
    "to": 119
  }, {
    "from": 120,
    "label": "requires",
    "to": 117
  }, {
    "from": 121,
    "label": "requires",
    "to": 117
  }, {
    "from": 122,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "luasql",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function null2nil(v)\r\n    if v == odbc.NULL then return nil end\r\n    return v\r\n  end",
    "type": "function"
  }, {
    "id": 3,
    "text": "if v == odbc.NULL then return nil end",
    "type": "statement:if"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "function (...)\r\n    if type((...)) == \"table\" then\r\n      local t = (...)\r\n      for k, v in pairs(t) do\r\n        t[k] = null2nil(t[k])\r\n      end\r\n      return t\r\n    end\r\n\r\n    if va then return va.map(null2nil, ...) end\r\n\r\n    local t, n = {...}, select('#', ...)\r\n    for i = 1, n do\r\n      if t[i] == odbc.NULL then t[i] = nil end\r\n    end\r\n    return unpack(t, 1, n)\r\n  end",
    "type": "function"
  }, {
    "id": 7,
    "text": "if type((...)) == \"table\" then\r\n      local t = (...)\r\n      for k, v in pairs(t) do\r\n        t[k] = null2nil(t[k])\r\n      end\r\n      return t\r\n    end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "local t = (...)",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "for k, v in pairs(t) do\r\n        t[k] = null2nil(t[k])\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 10,
    "text": "t[k] = null2nil(t[k])",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "if va then return va.map(null2nil, ...) end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "local t, n = {...}, select('#', ...)",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "for i = 1, n do\r\n      if t[i] == odbc.NULL then t[i] = nil end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 14,
    "text": "if t[i] == odbc.NULL then t[i] = nil end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "t[i] = nil",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function (...) return ... end",
    "type": "function"
  }, {
    "id": 18,
    "text": "function Environment_new()\r\n  local env, err = odbc.environment()\r\n  if not env then return nil, err end\r\n  env:setautoclosecnn(false)\r\n  return setmetatable({private_={env = env}}, Environment)\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "local env, err = odbc.environment()",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "if not env then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "env:setautoclosecnn(false)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function Environment:close()\r\n  if not self.private_.env:destroyed() then\r\n    return self.private_.env:destroy()\r\n  end\r\n  return false\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "if not self.private_.env:destroyed() then\r\n    return self.private_.env:destroy()\r\n  end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function Environment:connect(...)\r\n  local cnn, err = self.private_.env:connection()\r\n  if not cnn then return nil, err end\r\n  cnn:setautoclosestmt(false)\r\n  local ok ok, err = cnn:connect(...)\r\n  if not ok then cnn:destroy() return nil, err end\r\n  return Connection_new(cnn, self)\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "local cnn, err = self.private_.env:connection()",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "if not cnn then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "cnn:setautoclosestmt(false)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "local ok",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "ok, err = cnn:connect(...)",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "if not ok then cnn:destroy() return nil, err end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "cnn:destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function Connection_new(cnn, env)\r\n  assert(cnn)\r\n  assert(cnn:environment() == env.private_.env)\r\n  return setmetatable({private_={cnn = cnn;env=env}}, Connection)\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "assert(cnn)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "assert(cnn:environment() == env.private_.env)",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function Connection:close()\r\n  if not self.private_.cnn:destroyed() then\r\n    return self.private_.cnn:destroy()\r\n  end\r\n  return false\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "if not self.private_.cnn:destroyed() then\r\n    return self.private_.cnn:destroy()\r\n  end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function Connection:commit()\r\n  return self.private_.cnn:commit()\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function Connection:rollback()\r\n  return self.private_.cnn:rollback()\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function Connection:setautocommit(val)\r\n  return self.private_.cnn:setautocommit(val)\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function Connection:execute(sql)\r\n  local stmt, err = self.private_.cnn:statement()\r\n  if not stmt then return nil, err end\r\n  local ok ok,err = stmt:execute(sql)\r\n  if not ok then return nil, err end\r\n  if stmt:closed() then\r\n    stmt:destroy()\r\n    return ok\r\n  end\r\n  return Cursor_new(stmt, self)\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "local stmt, err = self.private_.cnn:statement()",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "if not stmt then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "ok,err = stmt:execute(sql)",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "if not ok then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "if stmt:closed() then\r\n    stmt:destroy()\r\n    return ok\r\n  end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "stmt:destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function Cursor_new(stmt, cnn)\r\n  assert(stmt)\r\n  assert(stmt:connection() == cnn.private_.cnn)\r\n  stmt:setautoclose(true)\r\n  stmt:setdestroyonclose(true)\r\n  return setmetatable({private_={stmt=stmt,cnn=cnn}}, Cursor)\r\nend",
    "type": "function"
  }, {
    "id": 57,
    "text": "assert(stmt)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "assert(stmt:connection() == cnn.private_.cnn)",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "stmt:setautoclose(true)",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "stmt:setdestroyonclose(true)",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "function Cursor:close()\r\n  if not self.private_.stmt:destroyed() then\r\n    local ret = self.private_.stmt:closed()\r\n    ret = self.private_.stmt:destroy() and (not ret)\r\n    return ret\r\n  end\r\n  return false\r\nend",
    "type": "function"
  }, {
    "id": 63,
    "text": "if not self.private_.stmt:destroyed() then\r\n    local ret = self.private_.stmt:closed()\r\n    ret = self.private_.stmt:destroy() and (not ret)\r\n    return ret\r\n  end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "local ret = self.private_.stmt:closed()",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "ret = self.private_.stmt:destroy() and (not ret)",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "function Cursor:fetch(...)\r\n  return conv_null(self.private_.stmt:fetch(...))\r\nend",
    "type": "function"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function Cursor:getcolnames()\r\n  return self.private_.stmt:colnames()\r\nend",
    "type": "function"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "function Cursor:getcoltypes()\r\n  return self.private_.stmt:coltypes()\r\nend",
    "type": "function"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "function()\r\n  return Environment_new()\r\nend",
    "type": "function"
  }, {
    "id": 74,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 75,
    "text": "",
    "type": "function container"
  }, {
    "id": 76,
    "text": "environment",
    "type": "global function"
  }, {
    "id": 77,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 78,
    "text": "type",
    "type": "global function"
  }, {
    "id": 79,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 80,
    "text": "map",
    "type": "global function"
  }, {
    "id": 81,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 82,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 83,
    "text": "select",
    "type": "global function"
  }, {
    "id": 84,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 85,
    "text": "require",
    "type": "global function"
  }, {
    "id": 86,
    "text": "",
    "type": "variable container"
  }, {
    "id": 87,
    "text": "",
    "type": "require container"
  }, {
    "id": 88,
    "text": "",
    "type": "local variable"
  }, {
    "id": 89,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 90,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 91,
    "text": "",
    "type": "string"
  }, {
    "id": 92,
    "text": "",
    "type": "local variable"
  }, {
    "id": 93,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 94,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 95,
    "text": "",
    "type": "string"
  }, {
    "id": 96,
    "text": "",
    "type": "local variable"
  }, {
    "id": 97,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 98,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 99,
    "text": "",
    "type": "string"
  }, {
    "id": 100,
    "text": "",
    "type": "local variable"
  }, {
    "id": 101,
    "text": "",
    "type": "n/a"
  }, {
    "id": 102,
    "text": "",
    "type": "local variable"
  }, {
    "id": 103,
    "text": "",
    "type": "local variable"
  }, {
    "id": 104,
    "text": "",
    "type": "local variable"
  }, {
    "id": 105,
    "text": "",
    "type": "local variable"
  }, {
    "id": 106,
    "text": "",
    "type": "global variable"
  }, {
    "id": 107,
    "text": "",
    "type": "n/a"
  }, {
    "id": 108,
    "text": "",
    "type": "global variable"
  }, {
    "id": 109,
    "text": "",
    "type": "n/a"
  }, {
    "id": 110,
    "text": "",
    "type": "global variable"
  }, {
    "id": 111,
    "text": "",
    "type": "n/a"
  }, {
    "id": 112,
    "text": "",
    "type": "global variable"
  }, {
    "id": 113,
    "text": "",
    "type": "n/a"
  }, {
    "id": 114,
    "text": "",
    "type": "global variable"
  }, {
    "id": 115,
    "text": "",
    "type": "n/a"
  }, {
    "id": 116,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 117,
    "text": "core",
    "type": "module"
  }, {
    "id": 118,
    "text": "",
    "type": "interface container"
  }, {
    "id": 119,
    "text": "",
    "type": "interface"
  }, {
    "id": 120,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 121,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 122,
    "text": "",
    "type": "require local variable"
  } ]
}