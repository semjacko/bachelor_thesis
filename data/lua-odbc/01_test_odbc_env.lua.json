{
  "_filename": "01_test_odbc_env.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-odbc/test/01_test_odbc_env.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 15
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 22,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 24
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 38,
    "label": "has",
    "to": 42
  }, {
    "from": 38,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 38,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 46,
    "label": "has",
    "to": 49
  }, {
    "from": 46,
    "label": "has",
    "to": 50
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 51
  }, {
    "from": 46,
    "label": "has",
    "to": 52
  }, {
    "from": 46,
    "label": "has",
    "to": 53
  }, {
    "from": 46,
    "label": "has",
    "to": 54
  }, {
    "from": 46,
    "label": "has",
    "to": 55
  }, {
    "from": 46,
    "label": "has",
    "to": 12
  }, {
    "from": 46,
    "label": "has",
    "to": 54
  }, {
    "from": 46,
    "label": "has",
    "to": 56
  }, {
    "from": 46,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 24
  }, {
    "from": 59,
    "label": "has",
    "to": 24
  }, {
    "from": 60,
    "label": "has",
    "to": 44
  }, {
    "from": 22,
    "label": "calls",
    "to": 3
  }, {
    "from": 29,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 63
  }, {
    "from": 22,
    "label": "calls",
    "to": 63
  }, {
    "from": 29,
    "label": "calls",
    "to": 63
  }, {
    "from": 46,
    "label": "calls",
    "to": 63
  }, {
    "from": 7,
    "label": "calls",
    "to": 71
  }, {
    "from": 38,
    "label": "calls",
    "to": 64
  }, {
    "from": 3,
    "label": "calls",
    "to": 78
  }, {
    "from": 46,
    "label": "calls",
    "to": 78
  }, {
    "from": 46,
    "label": "calls",
    "to": 78
  }, {
    "from": 46,
    "label": "calls",
    "to": 78
  }, {
    "from": 46,
    "label": "calls",
    "to": 78
  }, {
    "from": 46,
    "label": "calls",
    "to": 78
  }, {
    "from": 14,
    "label": "calls",
    "to": 75
  }, {
    "from": 14,
    "label": "calls",
    "to": 75
  }, {
    "from": 18,
    "label": "calls",
    "to": 75
  }, {
    "from": 46,
    "label": "calls",
    "to": 72
  }, {
    "from": 46,
    "label": "calls",
    "to": 72
  }, {
    "from": 46,
    "label": "calls",
    "to": 72
  }, {
    "from": 3,
    "label": "calls",
    "to": 66
  }, {
    "from": 22,
    "label": "calls",
    "to": 67
  }, {
    "from": 29,
    "label": "calls",
    "to": 67
  }, {
    "from": 46,
    "label": "calls",
    "to": 69
  }, {
    "from": 46,
    "label": "calls",
    "to": 69
  }, {
    "from": 35,
    "label": "calls",
    "to": 73
  }, {
    "from": 46,
    "label": "calls",
    "to": 70
  }, {
    "from": 35,
    "label": "calls",
    "to": 79
  }, {
    "from": 38,
    "label": "calls",
    "to": 79
  }, {
    "from": 38,
    "label": "calls",
    "to": 76
  }, {
    "from": 29,
    "label": "calls",
    "to": 14
  }, {
    "from": 61,
    "label": "calls",
    "to": 2
  }, {
    "from": 22,
    "label": "calls",
    "to": 18
  }, {
    "from": 3,
    "label": "calls",
    "to": 65
  }, {
    "from": 61,
    "label": "calls",
    "to": 77
  }, {
    "from": 61,
    "label": "calls",
    "to": 77
  }, {
    "from": 61,
    "label": "calls",
    "to": 77
  }, {
    "from": 61,
    "label": "calls",
    "to": 68
  }, {
    "from": 38,
    "label": "calls",
    "to": 74
  }, {
    "from": 38,
    "label": "calls",
    "to": 74
  }, {
    "from": 38,
    "label": "calls",
    "to": 74
  }, {
    "from": 1,
    "label": "contains",
    "to": 61
  }, {
    "from": 61,
    "label": "declares",
    "to": 2
  }, {
    "from": 61,
    "label": "declares",
    "to": 3
  }, {
    "from": 61,
    "label": "declares",
    "to": 7
  }, {
    "from": 61,
    "label": "declares",
    "to": 10
  }, {
    "from": 61,
    "label": "declares",
    "to": 14
  }, {
    "from": 61,
    "label": "declares",
    "to": 18
  }, {
    "from": 61,
    "label": "declares",
    "to": 22
  }, {
    "from": 61,
    "label": "declares",
    "to": 29
  }, {
    "from": 61,
    "label": "declares",
    "to": 35
  }, {
    "from": 61,
    "label": "declares",
    "to": 38
  }, {
    "from": 61,
    "label": "declares",
    "to": 46
  }, {
    "from": 61,
    "label": "declares",
    "to": 58
  }, {
    "from": 61,
    "label": "declares",
    "to": 59
  }, {
    "from": 61,
    "label": "declares",
    "to": 60
  }, {
    "from": 1,
    "label": "contains",
    "to": 81
  }, {
    "from": 1,
    "label": "contains",
    "to": 82
  }, {
    "from": 81,
    "label": "initializes",
    "to": 83
  }, {
    "from": 83,
    "label": "assigns",
    "to": 84
  }, {
    "from": 81,
    "label": "initializes",
    "to": 85
  }, {
    "from": 85,
    "label": "assigns",
    "to": 86
  }, {
    "from": 86,
    "label": "assigns",
    "to": 87
  }, {
    "from": 81,
    "label": "initializes",
    "to": 88
  }, {
    "from": 88,
    "label": "assigns",
    "to": 89
  }, {
    "from": 81,
    "label": "initializes",
    "to": 90
  }, {
    "from": 82,
    "label": "initializes",
    "to": 91
  }, {
    "from": 91,
    "label": "requires",
    "to": 62
  }, {
    "from": 82,
    "label": "initializes",
    "to": 80
  }, {
    "from": 82,
    "label": "initializes",
    "to": 80
  }, {
    "from": 80,
    "label": "requires",
    "to": 1
  }, {
    "from": 23,
    "label": "hasArgument",
    "to": 58
  }, {
    "from": 30,
    "label": "hasArgument",
    "to": 59
  }, {
    "from": 43,
    "label": "hasArgument",
    "to": 60
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "01_test_odbc_env",
    "type": "module"
  }, {
    "id": 2,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 3,
    "text": "local function assert_noret(fn, ...)\r\n  local n = return_count(fn())\r\n  assert_equal(0, n, ...)\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local n = return_count(fn())",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "assert_equal(0, n, ...)",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "function setup()\r\n  env = odbc.environment()\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "env = odbc.environment()",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function teardown()\r\n  if env then env:destroy() end\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "if env then env:destroy() end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "env:destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "local function check_dsn(name, desc)\r\n  assert_string(name)\r\n  assert_string(desc)\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "assert_string(name)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "assert_string(desc)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "local function check_drv(name, params)\r\n  assert_string(name)\r\n  if(params ~= nil) then assert_table(params) end\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "if(params ~= nil) then assert_table(params) end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "assert_table(params)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function test_drivers()\r\n  assert_noret(function() return env:drivers(check_drv) end)\r\n  local t = assert_table(env:drivers())\r\n  for _, v in ipairs(t) do check_drv((unpack or table.unpack)(v))end\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "assert_noret(function() return env:drivers(check_drv) end)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 25,
    "text": "local t = assert_table(env:drivers())",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "for _, v in ipairs(t) do check_drv((unpack or table.unpack)(v))end",
    "type": "statement:genericfor"
  }, {
    "id": 27,
    "text": "check_drv((unpack or table.unpack)(v))",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function test_datasources()\r\n  assert_noret(function() return env:datasources(check_dsn) end)\r\n  local t = assert_table(env:datasources())\r\n  for _, v in ipairs(t) do check_dsn((unpack or table.unpack)(v))end\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "assert_noret(function() return env:datasources(check_dsn) end)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "local t = assert_table(env:datasources())",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "for _, v in ipairs(t) do check_dsn((unpack or table.unpack)(v))end",
    "type": "statement:genericfor"
  }, {
    "id": 33,
    "text": "check_dsn((unpack or table.unpack)(v))",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function test_exists_dsn()\r\n-- we can find \r\n-- @see is_dsn_exists\r\n  assert_not_nil(is_dsn_exists(env, CNN_DSN[1]), 'Can not find test dsn')\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "assert_not_nil(is_dsn_exists(env, CNN_DSN[1]), 'Can not find test dsn')",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function test_destroy()\r\n  assert_not_nil(env)\r\n  assert_false(env:destroyed())\r\n  assert_true(env:destroy())\r\n  assert_true(env:destroyed())\r\n  assert_error(function() env:drivers() end)\r\n  assert_true(env:destroy())\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "assert_not_nil(env)",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "assert_false(env:destroyed())",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "assert_true(env:destroy())",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "assert_true(env:destroyed())",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "assert_error(function() env:drivers() end)",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "env:drivers()",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function test_uservalue()\r\n  assert_nil(env:getuservalue())\r\n  assert_equal(env, env:setuservalue(123))\r\n  assert_equal(123, env:getuservalue())\r\n  assert_equal(env, env:setuservalue())\r\n  assert_nil(env:getuservalue())\r\n  local ptr = weak_ptr{}\r\n  assert_equal(env, env:setuservalue(ptr.value))\r\n  assert_equal(ptr.value, env:getuservalue())\r\n  gc_collect()\r\n  assert_table(ptr.value)\r\n  env:destroy()\r\n  gc_collect()\r\n  assert_nil(ptr.value)\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "assert_nil(env:getuservalue())",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "assert_equal(env, env:setuservalue(123))",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "assert_equal(123, env:getuservalue())",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "assert_equal(env, env:setuservalue())",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "local ptr = weak_ptr{}",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "assert_equal(env, env:setuservalue(ptr.value))",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "assert_equal(ptr.value, env:getuservalue())",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "gc_collect()",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "assert_table(ptr.value)",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "assert_nil(ptr.value)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function() return env:drivers(check_drv) end",
    "type": "function"
  }, {
    "id": 59,
    "text": "function() return env:datasources(check_dsn) end",
    "type": "function"
  }, {
    "id": 60,
    "text": "function() env:drivers() end",
    "type": "function"
  }, {
    "id": 61,
    "text": "",
    "type": "function container"
  }, {
    "id": 62,
    "text": "lunit",
    "type": "module"
  }, {
    "id": 63,
    "text": "assert_table",
    "type": "global function"
  }, {
    "id": 64,
    "text": "assert_false",
    "type": "global function"
  }, {
    "id": 65,
    "text": "fn",
    "type": "global function"
  }, {
    "id": 66,
    "text": "return_count",
    "type": "global function"
  }, {
    "id": 67,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 68,
    "text": "TEST_CASE",
    "type": "global function"
  }, {
    "id": 69,
    "text": "gc_collect",
    "type": "global function"
  }, {
    "id": 70,
    "text": "weak_ptr",
    "type": "global function"
  }, {
    "id": 71,
    "text": "environment",
    "type": "global function"
  }, {
    "id": 72,
    "text": "assert_nil",
    "type": "global function"
  }, {
    "id": 73,
    "text": "is_dsn_exists",
    "type": "global function"
  }, {
    "id": 74,
    "text": "assert_true",
    "type": "global function"
  }, {
    "id": 75,
    "text": "assert_string",
    "type": "global function"
  }, {
    "id": 76,
    "text": "assert_error",
    "type": "global function"
  }, {
    "id": 77,
    "text": "require",
    "type": "global function"
  }, {
    "id": 78,
    "text": "assert_equal",
    "type": "global function"
  }, {
    "id": 79,
    "text": "assert_not_nil",
    "type": "global function"
  }, {
    "id": 80,
    "text": "",
    "type": "global variable"
  }, {
    "id": 81,
    "text": "",
    "type": "variable container"
  }, {
    "id": 82,
    "text": "",
    "type": "require container"
  }, {
    "id": 83,
    "text": "",
    "type": "local variable"
  }, {
    "id": 84,
    "text": "",
    "type": "n/a"
  }, {
    "id": 85,
    "text": "",
    "type": "local variable"
  }, {
    "id": 86,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 87,
    "text": "",
    "type": "symbol"
  }, {
    "id": 88,
    "text": "",
    "type": "local variable"
  }, {
    "id": 89,
    "text": "",
    "type": "n/a"
  }, {
    "id": 90,
    "text": "",
    "type": "local variable"
  }, {
    "id": 91,
    "text": "",
    "type": "require local variable"
  } ]
}