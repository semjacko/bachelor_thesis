{
  "_filename": "06_test_odbc_more.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-odbc/test/06_test_odbc_more.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 3,
    "label": "has",
    "to": 11
  }, {
    "from": 3,
    "label": "has",
    "to": 12
  }, {
    "from": 3,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 6
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 20,
    "label": "has",
    "to": 24
  }, {
    "from": 20,
    "label": "has",
    "to": 25
  }, {
    "from": 20,
    "label": "has",
    "to": 26
  }, {
    "from": 20,
    "label": "has",
    "to": 27
  }, {
    "from": 20,
    "label": "has",
    "to": 28
  }, {
    "from": 20,
    "label": "has",
    "to": 29
  }, {
    "from": 20,
    "label": "has",
    "to": 30
  }, {
    "from": 20,
    "label": "has",
    "to": 31
  }, {
    "from": 20,
    "label": "has",
    "to": 32
  }, {
    "from": 20,
    "label": "has",
    "to": 33
  }, {
    "from": 20,
    "label": "has",
    "to": 34
  }, {
    "from": 20,
    "label": "has",
    "to": 35
  }, {
    "from": 20,
    "label": "has",
    "to": 36
  }, {
    "from": 20,
    "label": "has",
    "to": 37
  }, {
    "from": 20,
    "label": "has",
    "to": 38
  }, {
    "from": 20,
    "label": "has",
    "to": 26
  }, {
    "from": 20,
    "label": "has",
    "to": 39
  }, {
    "from": 20,
    "label": "has",
    "to": 40
  }, {
    "from": 20,
    "label": "has",
    "to": 41
  }, {
    "from": 20,
    "label": "has",
    "to": 42
  }, {
    "from": 20,
    "label": "has",
    "to": 43
  }, {
    "from": 20,
    "label": "has",
    "to": 44
  }, {
    "from": 20,
    "label": "has",
    "to": 45
  }, {
    "from": 20,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 20,
    "label": "has",
    "to": 49
  }, {
    "from": 20,
    "label": "has",
    "to": 50
  }, {
    "from": 20,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 48
  }, {
    "from": 20,
    "label": "has",
    "to": 49
  }, {
    "from": 20,
    "label": "has",
    "to": 47
  }, {
    "from": 20,
    "label": "has",
    "to": 48
  }, {
    "from": 20,
    "label": "has",
    "to": 52
  }, {
    "from": 20,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 54,
    "label": "has",
    "to": 58
  }, {
    "from": 54,
    "label": "has",
    "to": 5
  }, {
    "from": 54,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 55
  }, {
    "from": 60,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 60,
    "label": "has",
    "to": 5
  }, {
    "from": 60,
    "label": "has",
    "to": 63
  }, {
    "from": 3,
    "label": "calls",
    "to": 66
  }, {
    "from": 14,
    "label": "calls",
    "to": 66
  }, {
    "from": 20,
    "label": "calls",
    "to": 67
  }, {
    "from": 20,
    "label": "calls",
    "to": 67
  }, {
    "from": 14,
    "label": "calls",
    "to": 68
  }, {
    "from": 54,
    "label": "calls",
    "to": 68
  }, {
    "from": 54,
    "label": "calls",
    "to": 68
  }, {
    "from": 54,
    "label": "calls",
    "to": 68
  }, {
    "from": 60,
    "label": "calls",
    "to": 68
  }, {
    "from": 60,
    "label": "calls",
    "to": 68
  }, {
    "from": 60,
    "label": "calls",
    "to": 68
  }, {
    "from": 20,
    "label": "calls",
    "to": 69
  }, {
    "from": 20,
    "label": "calls",
    "to": 69
  }, {
    "from": 54,
    "label": "calls",
    "to": 20
  }, {
    "from": 60,
    "label": "calls",
    "to": 20
  }, {
    "from": 64,
    "label": "calls",
    "to": 70
  }, {
    "from": 20,
    "label": "calls",
    "to": 74
  }, {
    "from": 20,
    "label": "calls",
    "to": 74
  }, {
    "from": 20,
    "label": "calls",
    "to": 74
  }, {
    "from": 60,
    "label": "calls",
    "to": 74
  }, {
    "from": 14,
    "label": "calls",
    "to": 72
  }, {
    "from": 64,
    "label": "calls",
    "to": 2
  }, {
    "from": 20,
    "label": "calls",
    "to": 73
  }, {
    "from": 20,
    "label": "calls",
    "to": 76
  }, {
    "from": 20,
    "label": "calls",
    "to": 76
  }, {
    "from": 20,
    "label": "calls",
    "to": 76
  }, {
    "from": 20,
    "label": "calls",
    "to": 76
  }, {
    "from": 20,
    "label": "calls",
    "to": 76
  }, {
    "from": 20,
    "label": "calls",
    "to": 76
  }, {
    "from": 20,
    "label": "calls",
    "to": 76
  }, {
    "from": 20,
    "label": "calls",
    "to": 76
  }, {
    "from": 20,
    "label": "calls",
    "to": 76
  }, {
    "from": 20,
    "label": "calls",
    "to": 76
  }, {
    "from": 20,
    "label": "calls",
    "to": 76
  }, {
    "from": 20,
    "label": "calls",
    "to": 76
  }, {
    "from": 20,
    "label": "calls",
    "to": 76
  }, {
    "from": 20,
    "label": "calls",
    "to": 76
  }, {
    "from": 20,
    "label": "calls",
    "to": 76
  }, {
    "from": 20,
    "label": "calls",
    "to": 76
  }, {
    "from": 20,
    "label": "calls",
    "to": 76
  }, {
    "from": 20,
    "label": "calls",
    "to": 76
  }, {
    "from": 20,
    "label": "calls",
    "to": 76
  }, {
    "from": 20,
    "label": "calls",
    "to": 76
  }, {
    "from": 64,
    "label": "calls",
    "to": 75
  }, {
    "from": 64,
    "label": "calls",
    "to": 75
  }, {
    "from": 64,
    "label": "calls",
    "to": 75
  }, {
    "from": 14,
    "label": "calls",
    "to": 71
  }, {
    "from": 14,
    "label": "calls",
    "to": 77
  }, {
    "from": 1,
    "label": "contains",
    "to": 64
  }, {
    "from": 64,
    "label": "declares",
    "to": 2
  }, {
    "from": 64,
    "label": "declares",
    "to": 3
  }, {
    "from": 64,
    "label": "declares",
    "to": 14
  }, {
    "from": 64,
    "label": "declares",
    "to": 20
  }, {
    "from": 64,
    "label": "declares",
    "to": 54
  }, {
    "from": 64,
    "label": "declares",
    "to": 60
  }, {
    "from": 1,
    "label": "contains",
    "to": 79
  }, {
    "from": 1,
    "label": "contains",
    "to": 80
  }, {
    "from": 79,
    "label": "initializes",
    "to": 81
  }, {
    "from": 81,
    "label": "assigns",
    "to": 82
  }, {
    "from": 79,
    "label": "initializes",
    "to": 83
  }, {
    "from": 83,
    "label": "assigns",
    "to": 84
  }, {
    "from": 84,
    "label": "assigns",
    "to": 85
  }, {
    "from": 79,
    "label": "initializes",
    "to": 86
  }, {
    "from": 86,
    "label": "assigns",
    "to": 87
  }, {
    "from": 79,
    "label": "initializes",
    "to": 88
  }, {
    "from": 79,
    "label": "initializes",
    "to": 89
  }, {
    "from": 79,
    "label": "initializes",
    "to": 90
  }, {
    "from": 79,
    "label": "initializes",
    "to": 91
  }, {
    "from": 91,
    "label": "assigns",
    "to": 92
  }, {
    "from": 80,
    "label": "initializes",
    "to": 93
  }, {
    "from": 93,
    "label": "requires",
    "to": 65
  }, {
    "from": 80,
    "label": "initializes",
    "to": 78
  }, {
    "from": 80,
    "label": "initializes",
    "to": 78
  }, {
    "from": 78,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "06_test_odbc_more",
    "type": "module"
  }, {
    "id": 2,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 3,
    "text": "function teardown()\r\n  if stmt then stmt:destroy() end\r\n\r\n  drop_proc(cnn)\r\n\r\n  if cnn then cnn:destroy() end\r\n  if env then env:destroy() end\r\n  cnn = nil\r\n  env = nil\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "if stmt then stmt:destroy() end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "stmt:destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "drop_proc(cnn)",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "if cnn then cnn:destroy() end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "cnn:destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "if env then env:destroy() end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "env:destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "cnn = nil",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "env = nil",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function setup()\r\n  env, cnn = do_connect()\r\n  assert_not_nil(env, cnn)\r\n  if TEST_PROC_CREATE_MULTI_RS then\r\n    drop_proc(cnn)\r\n    assert(exec_ddl(cnn, TEST_PROC_CREATE_MULTI_RS))\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "env, cnn = do_connect()",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "assert_not_nil(env, cnn)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "if TEST_PROC_CREATE_MULTI_RS then\r\n    drop_proc(cnn)\r\n    assert(exec_ddl(cnn, TEST_PROC_CREATE_MULTI_RS))\r\n  end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "assert(exec_ddl(cnn, TEST_PROC_CREATE_MULTI_RS))",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function FETCH_AND_ASSERT(cur)\r\n  local cols = assert_table(cur:colnames())\r\n  assert_equal(2, #cols)\r\n  assert_equal('INTVAL1', cols[1]:upper())\r\n  assert_equal('INTVAL2', cols[2]:upper())\r\n\r\n  local t = {}\r\n  assert_equal(t, cur:fetch(t,\"n\"))\r\n  assert_equal(1, t[1])\r\n  assert_equal(2, t[2])\r\n\r\n  local a, b = cur:fetch()\r\n  assert_equal(11, a)\r\n  assert_equal(12, b)\r\n\r\n  local c2 = cur:nextresultset()\r\n  assert_equal(cur, c2)\r\n\r\n  cols = assert_table(cur:colnames())\r\n  assert_equal(3, #cols)\r\n  assert_equal('STRVAL1', cols[1]:upper())\r\n  assert_equal('STRVAL2', cols[2]:upper())\r\n  assert_equal('STRVAL3', cols[3]:upper())\r\n\r\n  assert_equal(t, cur:fetch(t,\"n\"))\r\n  assert_equal('hello', t[1])\r\n  assert_equal('world', t[2])\r\n  assert_equal('!!!',   t[3])\r\n\r\n  local a,b,c = cur:fetch()\r\n  assert_equal('some',  a)\r\n  assert_equal('other', b)\r\n  assert_equal('row',   c)\r\n\r\n  if DBMS ~= 'MySQL' then\r\n    assert_false(cur:nextresultset())\r\n    assert_true(cur:close())\r\n    return\r\n  end\r\n\r\n  local res = cur:nextresultset()\r\n  if res == false then\r\n    assert_true(cur:close())\r\n    return;\r\n  end\r\n  assert_false(cur:nextresultset())\r\n  assert_true(cur:close())\r\n  skip(\"FIXME :MySQL nextresultset return one more reusltset\")\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "local cols = assert_table(cur:colnames())",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "assert_equal(2, #cols)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "assert_equal('INTVAL1', cols[1]:upper())",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "assert_equal('INTVAL2', cols[2]:upper())",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "assert_equal(t, cur:fetch(t,\"n\"))",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "assert_equal(1, t[1])",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "assert_equal(2, t[2])",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "local a, b = cur:fetch()",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "assert_equal(11, a)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "assert_equal(12, b)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "local c2 = cur:nextresultset()",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "assert_equal(cur, c2)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "cols = assert_table(cur:colnames())",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "assert_equal(3, #cols)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "assert_equal('STRVAL1', cols[1]:upper())",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "assert_equal('STRVAL2', cols[2]:upper())",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "assert_equal('STRVAL3', cols[3]:upper())",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "assert_equal('hello', t[1])",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "assert_equal('world', t[2])",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "assert_equal('!!!',   t[3])",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "local a,b,c = cur:fetch()",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "assert_equal('some',  a)",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "assert_equal('other', b)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "assert_equal('row',   c)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "if DBMS ~= 'MySQL' then\r\n    assert_false(cur:nextresultset())\r\n    assert_true(cur:close())\r\n    return\r\n  end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "assert_false(cur:nextresultset())",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "assert_true(cur:close())",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 50,
    "text": "local res = cur:nextresultset()",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "if res == false then\r\n    assert_true(cur:close())\r\n    return;\r\n  end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "skip(\"FIXME :MySQL nextresultset return one more reusltset\")",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "function test_exec()\r\n  stmt = assert(cnn:statement())\r\n  if TEST_PROC_CREATE_MULTI_RS then\r\n    sql = assert(TEST_PROC_CALL_MULTI_RS)\r\n  end\r\n  FETCH_AND_ASSERT( assert(stmt:execute(sql)) )\r\n  stmt:destroy()\r\nend",
    "type": "function"
  }, {
    "id": 55,
    "text": "stmt = assert(cnn:statement())",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "if TEST_PROC_CREATE_MULTI_RS then\r\n    sql = assert(TEST_PROC_CALL_MULTI_RS)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "sql = assert(TEST_PROC_CALL_MULTI_RS)",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "FETCH_AND_ASSERT( assert(stmt:execute(sql)) )",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function test_prepared()\r\n  stmt = assert(cnn:statement())\r\n  if TEST_PROC_CREATE_MULTI_RS then\r\n    sql = assert(TEST_PROC_CALL_MULTI_RS)\r\n  end\r\n  assert_true(stmt:prepare(sql))\r\n  FETCH_AND_ASSERT( assert(stmt:execute()) )\r\n  stmt:destroy()\r\nend",
    "type": "function"
  }, {
    "id": 61,
    "text": "assert_true(stmt:prepare(sql))",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "FETCH_AND_ASSERT( assert(stmt:execute()) )",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "",
    "type": "function container"
  }, {
    "id": 65,
    "text": "lunit",
    "type": "module"
  }, {
    "id": 66,
    "text": "drop_proc",
    "type": "global function"
  }, {
    "id": 67,
    "text": "assert_table",
    "type": "global function"
  }, {
    "id": 68,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 69,
    "text": "assert_false",
    "type": "global function"
  }, {
    "id": 70,
    "text": "TEST_CASE",
    "type": "global function"
  }, {
    "id": 71,
    "text": "exec_ddl",
    "type": "global function"
  }, {
    "id": 72,
    "text": "do_connect",
    "type": "global function"
  }, {
    "id": 73,
    "text": "skip",
    "type": "global function"
  }, {
    "id": 74,
    "text": "assert_true",
    "type": "global function"
  }, {
    "id": 75,
    "text": "require",
    "type": "global function"
  }, {
    "id": 76,
    "text": "assert_equal",
    "type": "global function"
  }, {
    "id": 77,
    "text": "assert_not_nil",
    "type": "global function"
  }, {
    "id": 78,
    "text": "",
    "type": "global variable"
  }, {
    "id": 79,
    "text": "",
    "type": "variable container"
  }, {
    "id": 80,
    "text": "",
    "type": "require container"
  }, {
    "id": 81,
    "text": "",
    "type": "local variable"
  }, {
    "id": 82,
    "text": "",
    "type": "n/a"
  }, {
    "id": 83,
    "text": "",
    "type": "local variable"
  }, {
    "id": 84,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 85,
    "text": "",
    "type": "symbol"
  }, {
    "id": 86,
    "text": "",
    "type": "local variable"
  }, {
    "id": 87,
    "text": "",
    "type": "n/a"
  }, {
    "id": 88,
    "text": "",
    "type": "local variable"
  }, {
    "id": 89,
    "text": "",
    "type": "local variable"
  }, {
    "id": 90,
    "text": "",
    "type": "local variable"
  }, {
    "id": 91,
    "text": "",
    "type": "local variable"
  }, {
    "id": 92,
    "text": "",
    "type": "string"
  }, {
    "id": 93,
    "text": "",
    "type": "require local variable"
  } ]
}