{
  "_filename": "utils.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-odbc/lua/odbc/dba/utils.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 3
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 3
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 3
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 3
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 3
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 3
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 30
  }, {
    "from": 26,
    "label": "has",
    "to": 31
  }, {
    "from": 26,
    "label": "has",
    "to": 32
  }, {
    "from": 26,
    "label": "has",
    "to": 33
  }, {
    "from": 26,
    "label": "has",
    "to": 34
  }, {
    "from": 26,
    "label": "has",
    "to": 35
  }, {
    "from": 26,
    "label": "has",
    "to": 36
  }, {
    "from": 26,
    "label": "has",
    "to": 37
  }, {
    "from": 26,
    "label": "has",
    "to": 38
  }, {
    "from": 26,
    "label": "has",
    "to": 39
  }, {
    "from": 26,
    "label": "has",
    "to": 40
  }, {
    "from": 26,
    "label": "has",
    "to": 41
  }, {
    "from": 26,
    "label": "has",
    "to": 42
  }, {
    "from": 26,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 3
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 3
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 3
  }, {
    "from": 52,
    "label": "has",
    "to": 3
  }, {
    "from": 53,
    "label": "has",
    "to": 3
  }, {
    "from": 54,
    "label": "has",
    "to": 3
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 55,
    "label": "has",
    "to": 58
  }, {
    "from": 55,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 59,
    "label": "has",
    "to": 62
  }, {
    "from": 59,
    "label": "has",
    "to": 3
  }, {
    "from": 59,
    "label": "has",
    "to": 3
  }, {
    "from": 59,
    "label": "has",
    "to": 3
  }, {
    "from": 59,
    "label": "has",
    "to": 3
  }, {
    "from": 59,
    "label": "has",
    "to": 3
  }, {
    "from": 59,
    "label": "has",
    "to": 63
  }, {
    "from": 55,
    "label": "has",
    "to": 64
  }, {
    "from": 55,
    "label": "has",
    "to": 3
  }, {
    "from": 55,
    "label": "has",
    "to": 3
  }, {
    "from": 55,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 66,
    "label": "has",
    "to": 70
  }, {
    "from": 66,
    "label": "has",
    "to": 58
  }, {
    "from": 66,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 72,
    "label": "has",
    "to": 3
  }, {
    "from": 72,
    "label": "has",
    "to": 75
  }, {
    "from": 72,
    "label": "has",
    "to": 3
  }, {
    "from": 71,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 3
  }, {
    "from": 71,
    "label": "has",
    "to": 3
  }, {
    "from": 66,
    "label": "has",
    "to": 77
  }, {
    "from": 66,
    "label": "has",
    "to": 64
  }, {
    "from": 66,
    "label": "has",
    "to": 3
  }, {
    "from": 66,
    "label": "has",
    "to": 78
  }, {
    "from": 66,
    "label": "has",
    "to": 3
  }, {
    "from": 66,
    "label": "has",
    "to": 3
  }, {
    "from": 66,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 72,
    "label": "has",
    "to": 3
  }, {
    "from": 72,
    "label": "has",
    "to": 75
  }, {
    "from": 72,
    "label": "has",
    "to": 3
  }, {
    "from": 80,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 3
  }, {
    "from": 80,
    "label": "has",
    "to": 3
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 82,
    "label": "has",
    "to": 3
  }, {
    "from": 82,
    "label": "has",
    "to": 75
  }, {
    "from": 82,
    "label": "has",
    "to": 3
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 75
  }, {
    "from": 84,
    "label": "has",
    "to": 3
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 19
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 88,
    "label": "has",
    "to": 3
  }, {
    "from": 88,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 89
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 92,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 92,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 97,
    "label": "has",
    "to": 100
  }, {
    "from": 92,
    "label": "has",
    "to": 3
  }, {
    "from": 92,
    "label": "has",
    "to": 101
  }, {
    "from": 102,
    "label": "has",
    "to": 89
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 102,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 106,
    "label": "has",
    "to": 108
  }, {
    "from": 102,
    "label": "has",
    "to": 3
  }, {
    "from": 102,
    "label": "has",
    "to": 109
  }, {
    "from": 110,
    "label": "has",
    "to": 60
  }, {
    "from": 110,
    "label": "has",
    "to": 61
  }, {
    "from": 110,
    "label": "has",
    "to": 62
  }, {
    "from": 110,
    "label": "has",
    "to": 3
  }, {
    "from": 110,
    "label": "has",
    "to": 3
  }, {
    "from": 110,
    "label": "has",
    "to": 3
  }, {
    "from": 110,
    "label": "has",
    "to": 3
  }, {
    "from": 110,
    "label": "has",
    "to": 3
  }, {
    "from": 110,
    "label": "has",
    "to": 63
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 112,
    "label": "calls",
    "to": 115
  }, {
    "from": 112,
    "label": "calls",
    "to": 115
  }, {
    "from": 112,
    "label": "calls",
    "to": 115
  }, {
    "from": 112,
    "label": "calls",
    "to": 115
  }, {
    "from": 112,
    "label": "calls",
    "to": 115
  }, {
    "from": 23,
    "label": "calls",
    "to": 115
  }, {
    "from": 26,
    "label": "calls",
    "to": 115
  }, {
    "from": 26,
    "label": "calls",
    "to": 115
  }, {
    "from": 26,
    "label": "calls",
    "to": 115
  }, {
    "from": 26,
    "label": "calls",
    "to": 115
  }, {
    "from": 26,
    "label": "calls",
    "to": 115
  }, {
    "from": 26,
    "label": "calls",
    "to": 115
  }, {
    "from": 26,
    "label": "calls",
    "to": 115
  }, {
    "from": 26,
    "label": "calls",
    "to": 115
  }, {
    "from": 26,
    "label": "calls",
    "to": 115
  }, {
    "from": 26,
    "label": "calls",
    "to": 115
  }, {
    "from": 26,
    "label": "calls",
    "to": 115
  }, {
    "from": 26,
    "label": "calls",
    "to": 115
  }, {
    "from": 26,
    "label": "calls",
    "to": 115
  }, {
    "from": 66,
    "label": "calls",
    "to": 115
  }, {
    "from": 5,
    "label": "calls",
    "to": 126
  }, {
    "from": 55,
    "label": "calls",
    "to": 53
  }, {
    "from": 112,
    "label": "calls",
    "to": 116
  }, {
    "from": 26,
    "label": "calls",
    "to": 116
  }, {
    "from": 26,
    "label": "calls",
    "to": 116
  }, {
    "from": 26,
    "label": "calls",
    "to": 116
  }, {
    "from": 53,
    "label": "calls",
    "to": 116
  }, {
    "from": 26,
    "label": "calls",
    "to": 23
  }, {
    "from": 26,
    "label": "calls",
    "to": 23
  }, {
    "from": 112,
    "label": "calls",
    "to": 23
  }, {
    "from": 112,
    "label": "calls",
    "to": 23
  }, {
    "from": 112,
    "label": "calls",
    "to": 23
  }, {
    "from": 112,
    "label": "calls",
    "to": 23
  }, {
    "from": 112,
    "label": "calls",
    "to": 23
  }, {
    "from": 112,
    "label": "calls",
    "to": 23
  }, {
    "from": 112,
    "label": "calls",
    "to": 23
  }, {
    "from": 112,
    "label": "calls",
    "to": 23
  }, {
    "from": 112,
    "label": "calls",
    "to": 23
  }, {
    "from": 112,
    "label": "calls",
    "to": 23
  }, {
    "from": 112,
    "label": "calls",
    "to": 23
  }, {
    "from": 112,
    "label": "calls",
    "to": 23
  }, {
    "from": 112,
    "label": "calls",
    "to": 23
  }, {
    "from": 112,
    "label": "calls",
    "to": 26
  }, {
    "from": 66,
    "label": "calls",
    "to": 80
  }, {
    "from": 80,
    "label": "calls",
    "to": 14
  }, {
    "from": 55,
    "label": "calls",
    "to": 49
  }, {
    "from": 18,
    "label": "calls",
    "to": 5
  }, {
    "from": 112,
    "label": "calls",
    "to": 5
  }, {
    "from": 112,
    "label": "calls",
    "to": 5
  }, {
    "from": 18,
    "label": "calls",
    "to": 121
  }, {
    "from": 112,
    "label": "calls",
    "to": 121
  }, {
    "from": 112,
    "label": "calls",
    "to": 121
  }, {
    "from": 80,
    "label": "calls",
    "to": 121
  }, {
    "from": 80,
    "label": "calls",
    "to": 121
  }, {
    "from": 14,
    "label": "calls",
    "to": 118
  }, {
    "from": 112,
    "label": "calls",
    "to": 118
  }, {
    "from": 112,
    "label": "calls",
    "to": 118
  }, {
    "from": 112,
    "label": "calls",
    "to": 118
  }, {
    "from": 112,
    "label": "calls",
    "to": 127
  }, {
    "from": 10,
    "label": "calls",
    "to": 131
  }, {
    "from": 112,
    "label": "calls",
    "to": 122
  }, {
    "from": 112,
    "label": "calls",
    "to": 122
  }, {
    "from": 112,
    "label": "calls",
    "to": 122
  }, {
    "from": 23,
    "label": "calls",
    "to": 122
  }, {
    "from": 55,
    "label": "calls",
    "to": 122
  }, {
    "from": 66,
    "label": "calls",
    "to": 122
  }, {
    "from": 21,
    "label": "calls",
    "to": 130
  }, {
    "from": 112,
    "label": "calls",
    "to": 130
  }, {
    "from": 23,
    "label": "calls",
    "to": 130
  }, {
    "from": 55,
    "label": "calls",
    "to": 52
  }, {
    "from": 54,
    "label": "calls",
    "to": 51
  }, {
    "from": 12,
    "label": "calls",
    "to": 132
  }, {
    "from": 51,
    "label": "calls",
    "to": 124
  }, {
    "from": 55,
    "label": "calls",
    "to": 124
  }, {
    "from": 66,
    "label": "calls",
    "to": 124
  }, {
    "from": 112,
    "label": "calls",
    "to": 117
  }, {
    "from": 55,
    "label": "calls",
    "to": 54
  }, {
    "from": 1,
    "label": "contains",
    "to": 112
  }, {
    "from": 112,
    "label": "declares",
    "to": 2
  }, {
    "from": 112,
    "label": "declares",
    "to": 5
  }, {
    "from": 112,
    "label": "declares",
    "to": 10
  }, {
    "from": 112,
    "label": "declares",
    "to": 12
  }, {
    "from": 112,
    "label": "declares",
    "to": 14
  }, {
    "from": 112,
    "label": "declares",
    "to": 18
  }, {
    "from": 112,
    "label": "declares",
    "to": 21
  }, {
    "from": 112,
    "label": "declares",
    "to": 23
  }, {
    "from": 112,
    "label": "declares",
    "to": 26
  }, {
    "from": 112,
    "label": "declares",
    "to": 44
  }, {
    "from": 112,
    "label": "declares",
    "to": 46
  }, {
    "from": 112,
    "label": "declares",
    "to": 49
  }, {
    "from": 112,
    "label": "declares",
    "to": 51
  }, {
    "from": 112,
    "label": "declares",
    "to": 52
  }, {
    "from": 112,
    "label": "declares",
    "to": 53
  }, {
    "from": 112,
    "label": "declares",
    "to": 54
  }, {
    "from": 112,
    "label": "declares",
    "to": 55
  }, {
    "from": 112,
    "label": "declares",
    "to": 66
  }, {
    "from": 112,
    "label": "declares",
    "to": 80
  }, {
    "from": 112,
    "label": "declares",
    "to": 82
  }, {
    "from": 112,
    "label": "declares",
    "to": 84
  }, {
    "from": 112,
    "label": "declares",
    "to": 86
  }, {
    "from": 112,
    "label": "declares",
    "to": 88
  }, {
    "from": 112,
    "label": "declares",
    "to": 92
  }, {
    "from": 112,
    "label": "declares",
    "to": 102
  }, {
    "from": 112,
    "label": "declares",
    "to": 110
  }, {
    "from": 1,
    "label": "declares",
    "to": 129
  }, {
    "from": 1,
    "label": "contains",
    "to": 133
  }, {
    "from": 1,
    "label": "contains",
    "to": 134
  }, {
    "from": 133,
    "label": "initializes",
    "to": 135
  }, {
    "from": 133,
    "label": "initializes",
    "to": 136
  }, {
    "from": 136,
    "label": "assigns",
    "to": 137
  }, {
    "from": 133,
    "label": "initializes",
    "to": 138
  }, {
    "from": 133,
    "label": "initializes",
    "to": 139
  }, {
    "from": 139,
    "label": "assigns",
    "to": 140
  }, {
    "from": 140,
    "label": "assigns",
    "to": 141
  }, {
    "from": 141,
    "label": "assigns",
    "to": 142
  }, {
    "from": 140,
    "label": "assigns",
    "to": 143
  }, {
    "from": 143,
    "label": "assigns",
    "to": 144
  }, {
    "from": 140,
    "label": "assigns",
    "to": 145
  }, {
    "from": 145,
    "label": "assigns",
    "to": 146
  }, {
    "from": 140,
    "label": "assigns",
    "to": 147
  }, {
    "from": 147,
    "label": "assigns",
    "to": 148
  }, {
    "from": 140,
    "label": "assigns",
    "to": 149
  }, {
    "from": 149,
    "label": "assigns",
    "to": 150
  }, {
    "from": 140,
    "label": "assigns",
    "to": 151
  }, {
    "from": 151,
    "label": "assigns",
    "to": 152
  }, {
    "from": 140,
    "label": "assigns",
    "to": 153
  }, {
    "from": 153,
    "label": "assigns",
    "to": 154
  }, {
    "from": 140,
    "label": "assigns",
    "to": 155
  }, {
    "from": 155,
    "label": "assigns",
    "to": 156
  }, {
    "from": 140,
    "label": "assigns",
    "to": 157
  }, {
    "from": 157,
    "label": "assigns",
    "to": 158
  }, {
    "from": 140,
    "label": "assigns",
    "to": 159
  }, {
    "from": 159,
    "label": "assigns",
    "to": 160
  }, {
    "from": 140,
    "label": "assigns",
    "to": 161
  }, {
    "from": 161,
    "label": "assigns",
    "to": 162
  }, {
    "from": 140,
    "label": "assigns",
    "to": 163
  }, {
    "from": 163,
    "label": "assigns",
    "to": 164
  }, {
    "from": 140,
    "label": "assigns",
    "to": 165
  }, {
    "from": 165,
    "label": "assigns",
    "to": 166
  }, {
    "from": 133,
    "label": "initializes",
    "to": 167
  }, {
    "from": 167,
    "label": "assigns",
    "to": 168
  }, {
    "from": 133,
    "label": "initializes",
    "to": 169
  }, {
    "from": 169,
    "label": "assigns",
    "to": 170
  }, {
    "from": 1,
    "label": "provides",
    "to": 171
  }, {
    "from": 136,
    "label": "represents",
    "to": 172
  }, {
    "from": 171,
    "label": "provides",
    "to": 172
  }, {
    "from": 119,
    "label": "represents",
    "to": 173
  }, {
    "from": 171,
    "label": "provides",
    "to": 173
  }, {
    "from": 120,
    "label": "represents",
    "to": 174
  }, {
    "from": 171,
    "label": "provides",
    "to": 174
  }, {
    "from": 14,
    "label": "represents",
    "to": 175
  }, {
    "from": 171,
    "label": "provides",
    "to": 175
  }, {
    "from": 123,
    "label": "represents",
    "to": 176
  }, {
    "from": 171,
    "label": "provides",
    "to": 176
  }, {
    "from": 21,
    "label": "represents",
    "to": 177
  }, {
    "from": 171,
    "label": "provides",
    "to": 177
  }, {
    "from": 23,
    "label": "represents",
    "to": 178
  }, {
    "from": 171,
    "label": "provides",
    "to": 178
  }, {
    "from": 139,
    "label": "represents",
    "to": 179
  }, {
    "from": 171,
    "label": "provides",
    "to": 179
  }, {
    "from": 167,
    "label": "represents",
    "to": 180
  }, {
    "from": 171,
    "label": "provides",
    "to": 180
  }, {
    "from": 128,
    "label": "represents",
    "to": 181
  }, {
    "from": 171,
    "label": "provides",
    "to": 181
  }, {
    "from": 125,
    "label": "represents",
    "to": 182
  }, {
    "from": 171,
    "label": "provides",
    "to": 182
  }, {
    "from": 113,
    "label": "represents",
    "to": 183
  }, {
    "from": 171,
    "label": "provides",
    "to": 183
  }, {
    "from": 114,
    "label": "represents",
    "to": 184
  }, {
    "from": 171,
    "label": "provides",
    "to": 184
  }, {
    "from": 185,
    "label": "requires",
    "to": 1
  }, {
    "from": 167,
    "label": "contains",
    "to": 51
  }, {
    "from": 167,
    "label": "contains",
    "to": 52
  }, {
    "from": 167,
    "label": "contains",
    "to": 53
  }, {
    "from": 167,
    "label": "contains",
    "to": 54
  }, {
    "from": 167,
    "label": "contains",
    "to": 55
  }, {
    "from": 167,
    "label": "contains",
    "to": 66
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "utils",
    "type": "module"
  }, {
    "id": 2,
    "text": "function(err, lvl)\r\n    return error(tostring(err), (lvl or 1)+1)\r\n  end",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "local function clone(t)\r\n  local o = {}\r\n  for k, v in pairs(t) do o[k] = v end\r\n  return o\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local o = {}",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "for k, v in pairs(t) do o[k] = v end",
    "type": "statement:genericfor"
  }, {
    "id": 8,
    "text": "o[k] = v",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "local function pack_n(...)\r\n  return {n = select('#', ...), ...}\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "local function unpack_n(t, s)\r\n  return unpack(t, s or 1, t.n or #t)\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "local function ifind(val,t)\r\n  for i,v in ipairs(t) do\r\n    if v == val then\r\n      return i\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "for i,v in ipairs(t) do\r\n    if v == val then\r\n      return i\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 16,
    "text": "if v == val then\r\n      return i\r\n    end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "local function collect(t)\r\n  return function(row)\r\n    table.insert(t, clone(row))\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "table.insert(t, clone(row))",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "local function make_cahe()\r\n  return setmetatable({}, {__mode=\"k\"})\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "local function E(msg,state,code)\r\n  assert(type(msg) == \"string\")\r\n  return setmetatable({{message=msg;state=state;code=code}}, ErrorMeta)\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "assert(type(msg) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "local function test_error()\r\n  local err = E\"some error\"\r\n  assert(#err == 1)\r\n  assert(err.message == \"some error\")\r\n  assert(err[1].message == \"some error\")\r\n  assert(tostring(err) == \"some error\")\r\n\r\n  local er2 = err..\" value\"\r\n  assert(#er2 == 1)\r\n  assert(er2.message == \"some error value\")\r\n  assert(er2[1].message == \"some error value\")\r\n  assert(tostring(er2) == \"some error value\")\r\n\r\n  local er2 = err..E\"other error\"\r\n  assert(#er2 == 2)\r\n  assert(er2.message == \"some error\")\r\n  assert(er2[1].message == \"some error\")\r\n  assert(er2[2].message == \"other error\")\r\n  assert(tostring(er2) == \"some error\\nother error\")\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "local err = E\"some error\"",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "assert(#err == 1)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "assert(err.message == \"some error\")",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "assert(err[1].message == \"some error\")",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "assert(tostring(err) == \"some error\")",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "local er2 = err..\" value\"",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "assert(#er2 == 1)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "assert(er2.message == \"some error value\")",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "assert(er2[1].message == \"some error value\")",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "assert(tostring(er2) == \"some error value\")",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "local er2 = err..E\"other error\"",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "assert(#er2 == 2)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "assert(er2.message == \"some error\")",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "assert(er2[1].message == \"some error\")",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "assert(er2[2].message == \"other error\")",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "assert(tostring(er2) == \"some error\\nother error\")",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "local function user_val(ud)\r\n  return ud:getuservalue()\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "local function set_user_val(ud, val)\r\n  ud:setuservalue(val)\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "ud:setuservalue(val)",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "local function stringQuoteChar(cnn)\r\n  return cnn:identifierQuoteString() == \"'\" and '\"' or \"'\"\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "function param_utils.quoted (s,q) return (q .. string.gsub(s, q, q..q) .. q) end",
    "type": "function"
  }, {
    "id": 52,
    "text": "function param_utils.bool2sql(v) return v and 1 or 0 end",
    "type": "function"
  }, {
    "id": 53,
    "text": "function param_utils.num2sql(v)  return tostring(v) end",
    "type": "function"
  }, {
    "id": 54,
    "text": "function param_utils.str2sql(v, q) return param_utils.quoted(v, q or \"'\") end",
    "type": "function"
  }, {
    "id": 55,
    "text": "function param_utils.apply_params(cnn, sql, params)\r\n  params = params or {}\r\n  local q = cnn and stringQuoteChar(cnn) or \"'\"\r\n\r\n  local err\r\n  local str = string.gsub(sql,param_utils.param_pattern,function(param)\r\n    local v = params[param]\r\n    local tv = type(v)\r\n    if    (\"number\"      == tv)then return param_utils.num2sql (v)\r\n    elseif(\"string\"      == tv)then return param_utils.str2sql (v, q)\r\n    elseif(\"boolean\"     == tv)then return param_utils.bool2sql(v)\r\n    elseif(PARAM_NULL    ==  v)then return 'NULL'\r\n    elseif(PARAM_DEFAULT ==  v)then return 'DEFAULT'\r\n    end\r\n    err = ERROR.unknown_parameter .. param\r\n  end)\r\n  if err then return nil, err end\r\n  return str\r\nend",
    "type": "function"
  }, {
    "id": 56,
    "text": "params = params or {}",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "local q = cnn and stringQuoteChar(cnn) or \"'\"",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "local err",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "local str = string.gsub(sql,param_utils.param_pattern,function(param)\r\n    local v = params[param]\r\n    local tv = type(v)\r\n    if    (\"number\"      == tv)then return param_utils.num2sql (v)\r\n    elseif(\"string\"      == tv)then return param_utils.str2sql (v, q)\r\n    elseif(\"boolean\"     == tv)then return param_utils.bool2sql(v)\r\n    elseif(PARAM_NULL    ==  v)then return 'NULL'\r\n    elseif(PARAM_DEFAULT ==  v)then return 'DEFAULT'\r\n    end\r\n    err = ERROR.unknown_parameter .. param\r\n  end)",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "local v = params[param]",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "local tv = type(v)",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "if    (\"number\"      == tv)then return param_utils.num2sql (v)\r\n    elseif(\"string\"      == tv)then return param_utils.str2sql (v, q)\r\n    elseif(\"boolean\"     == tv)then return param_utils.bool2sql(v)\r\n    elseif(PARAM_NULL    ==  v)then return 'NULL'\r\n    elseif(PARAM_DEFAULT ==  v)then return 'DEFAULT'\r\n    end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "err = ERROR.unknown_parameter .. param",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "if err then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function param_utils.translate_params(sql,parnames)\r\n  if parnames == nil then parnames = true end\r\n  assert(type(parnames) == 'table' or (parnames == true))\r\n  local param_list={}\r\n  local err\r\n  local function replace()\r\n    local function t1(param) \r\n      -- assert(type(parnames) == 'table')\r\n      if not ifind(param, parnames) then\r\n        err = ERROR.unsolved_parameter .. param\r\n        return\r\n      end\r\n      table.insert(param_list, param)\r\n      return '?'\r\n    end\r\n\r\n    local function t2(param)\r\n      -- assert(parnames == true)\r\n      table.insert(param_list, param)\r\n      return '?'\r\n    end\r\n\r\n    return (parnames == true) and t2 or t1\r\n  end\r\n\r\n  local str = string.gsub(sql,param_utils.param_pattern,replace())\r\n  if err then return nil, err end\r\n  if #param_list == 0 then return sql end\r\n  return str, param_list\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "if parnames == nil then parnames = true end",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "parnames = true",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "assert(type(parnames) == 'table' or (parnames == true))",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "local param_list={}",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "local function replace()\r\n    local function t1(param) \r\n      -- assert(type(parnames) == 'table')\r\n      if not ifind(param, parnames) then\r\n        err = ERROR.unsolved_parameter .. param\r\n        return\r\n      end\r\n      table.insert(param_list, param)\r\n      return '?'\r\n    end\r\n\r\n    local function t2(param)\r\n      -- assert(parnames == true)\r\n      table.insert(param_list, param)\r\n      return '?'\r\n    end\r\n\r\n    return (parnames == true) and t2 or t1\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 72,
    "text": "local function t1(param) \r\n      -- assert(type(parnames) == 'table')\r\n      if not ifind(param, parnames) then\r\n        err = ERROR.unsolved_parameter .. param\r\n        return\r\n      end\r\n      table.insert(param_list, param)\r\n      return '?'\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 73,
    "text": "if not ifind(param, parnames) then\r\n        err = ERROR.unsolved_parameter .. param\r\n        return\r\n      end",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "err = ERROR.unsolved_parameter .. param",
    "type": "statement:assign"
  }, {
    "id": 75,
    "text": "table.insert(param_list, param)",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "local function t2(param)\r\n      -- assert(parnames == true)\r\n      table.insert(param_list, param)\r\n      return '?'\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 77,
    "text": "local str = string.gsub(sql,param_utils.param_pattern,replace())",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "if #param_list == 0 then return sql end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "local function replace()\r\n    local function t1(param) \r\n      -- assert(type(parnames) == 'table')\r\n      if not ifind(param, parnames) then\r\n        err = ERROR.unsolved_parameter .. param\r\n        return\r\n      end\r\n      table.insert(param_list, param)\r\n      return '?'\r\n    end\r\n\r\n    local function t2(param)\r\n      -- assert(parnames == true)\r\n      table.insert(param_list, param)\r\n      return '?'\r\n    end\r\n\r\n    return (parnames == true) and t2 or t1\r\n  end",
    "type": "function"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "local function t1(param) \r\n      -- assert(type(parnames) == 'table')\r\n      if not ifind(param, parnames) then\r\n        err = ERROR.unsolved_parameter .. param\r\n        return\r\n      end\r\n      table.insert(param_list, param)\r\n      return '?'\r\n    end",
    "type": "function"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "local function t2(param)\r\n      -- assert(parnames == true)\r\n      table.insert(param_list, param)\r\n      return '?'\r\n    end",
    "type": "function"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "function(row)\r\n    table.insert(t, clone(row))\r\n  end",
    "type": "function"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "function (self, key)\r\n    assert(#self > 0)\r\n    local row = rawget(self, 1)\r\n    return row and row[key]\r\n  end",
    "type": "function"
  }, {
    "id": 89,
    "text": "assert(#self > 0)",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "local row = rawget(self, 1)",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "function (self, rhs)\r\n    assert(type(self) == 'table')\r\n    assert(#self > 0)\r\n\r\n    local t = {}\r\n    for _,v in ipairs(self)  do table.insert(t, clone(v)) end\r\n    if type(rhs) == 'table' then\r\n      for _,v in ipairs(rhs) do table.insert(t, clone(v)) end\r\n    else\r\n      assert(type(rhs) == 'string')\r\n      t[1].message = t[1].message .. rhs\r\n    end\r\n    return setmetatable(t, ErrorMeta)\r\n  end",
    "type": "function"
  }, {
    "id": 93,
    "text": "assert(type(self) == 'table')",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "for _,v in ipairs(self)  do table.insert(t, clone(v)) end",
    "type": "statement:genericfor"
  }, {
    "id": 96,
    "text": "table.insert(t, clone(v))",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "if type(rhs) == 'table' then\r\n      for _,v in ipairs(rhs) do table.insert(t, clone(v)) end\r\n    else\r\n      assert(type(rhs) == 'string')\r\n      t[1].message = t[1].message .. rhs\r\n    end",
    "type": "statement:if"
  }, {
    "id": 98,
    "text": "for _,v in ipairs(rhs) do table.insert(t, clone(v)) end",
    "type": "statement:genericfor"
  }, {
    "id": 99,
    "text": "assert(type(rhs) == 'string')",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "t[1].message = t[1].message .. rhs",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 102,
    "text": "function(self)\r\n    assert(#self > 0)\r\n    local res = \"\"\r\n    for i,t in ipairs(self) do\r\n      if t.message then\r\n        if #res == 0 then res = t.message\r\n        else res = res .. \"\\n\" .. t.message end\r\n      end\r\n    end\r\n    return res\r\n  end",
    "type": "function"
  }, {
    "id": 103,
    "text": "local res = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 104,
    "text": "for i,t in ipairs(self) do\r\n      if t.message then\r\n        if #res == 0 then res = t.message\r\n        else res = res .. \"\\n\" .. t.message end\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 105,
    "text": "if t.message then\r\n        if #res == 0 then res = t.message\r\n        else res = res .. \"\\n\" .. t.message end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 106,
    "text": "if #res == 0 then res = t.message\r\n        else res = res .. \"\\n\" .. t.message end",
    "type": "statement:if"
  }, {
    "id": 107,
    "text": "res = t.message",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "res = res .. \"\\n\" .. t.message",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 110,
    "text": "function(param)\r\n    local v = params[param]\r\n    local tv = type(v)\r\n    if    (\"number\"      == tv)then return param_utils.num2sql (v)\r\n    elseif(\"string\"      == tv)then return param_utils.str2sql (v, q)\r\n    elseif(\"boolean\"     == tv)then return param_utils.bool2sql(v)\r\n    elseif(PARAM_NULL    ==  v)then return 'NULL'\r\n    elseif(PARAM_DEFAULT ==  v)then return 'DEFAULT'\r\n    end\r\n    err = ERROR.unknown_parameter .. param\r\n  end",
    "type": "function"
  }, {
    "id": 111,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 112,
    "text": "",
    "type": "function container"
  }, {
    "id": 113,
    "text": "local function bind_param(stmt, i, val, ...)\r\n  if val == odbc.PARAM_NULL    then return stmt:bindnull(i)    end\r\n  if val == odbc.PARAM_DEFAULT then return stmt:binddefault(i) end\r\n  if type(val) == 'userdata' then\r\n    return stmt:vbind_param(i, val, ...)\r\n  end\r\n  return stmt:bind_impl(i, val, ...)\r\nend",
    "type": "function"
  }, {
    "id": 114,
    "text": "local function rows(cur, fetch_mode)\r\n  local res = {}\r\n  if fetch_mode then\r\n    return function ()\r\n      local res, err = cur:fetch(res, fetch_mode)\r\n      if res then return res end\r\n      if err then throw(err) end\r\n    end\r\n  end\r\n\r\n  local n = #cur:colnames()\r\n  return function ()\r\n    local res, err = cur:fetch(res, 'n')\r\n    if res then return unpack(res, 1, n) end\r\n    if err then throw(err) end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 115,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 116,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 117,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 118,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 119,
    "text": "pack_n",
    "type": "global function"
  }, {
    "id": 120,
    "text": "unpack_n",
    "type": "global function"
  }, {
    "id": 121,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 122,
    "text": "type",
    "type": "global function"
  }, {
    "id": 123,
    "text": "collect",
    "type": "global function"
  }, {
    "id": 124,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 125,
    "text": "set_user_val",
    "type": "global function"
  }, {
    "id": 126,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 127,
    "text": "error",
    "type": "global function"
  }, {
    "id": 128,
    "text": "user_val",
    "type": "global function"
  }, {
    "id": 129,
    "text": "execute",
    "type": "global function"
  }, {
    "id": 130,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 131,
    "text": "select",
    "type": "global function"
  }, {
    "id": 132,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 133,
    "text": "",
    "type": "variable container"
  }, {
    "id": 134,
    "text": "",
    "type": "require container"
  }, {
    "id": 135,
    "text": "",
    "type": "local variable"
  }, {
    "id": 136,
    "text": "",
    "type": "local variable"
  }, {
    "id": 137,
    "text": "",
    "type": "n/a"
  }, {
    "id": 138,
    "text": "",
    "type": "local variable"
  }, {
    "id": 139,
    "text": "",
    "type": "local variable"
  }, {
    "id": 140,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 141,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 142,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 143,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 144,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 145,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 146,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 147,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 148,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 149,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 150,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 151,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 152,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 153,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 154,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 155,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 156,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 157,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 158,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 159,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 160,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 161,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 162,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 163,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 164,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 165,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 166,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 167,
    "text": "",
    "type": "local variable"
  }, {
    "id": 168,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 169,
    "text": "",
    "type": "global variable"
  }, {
    "id": 170,
    "text": "",
    "type": "n/a"
  }, {
    "id": 171,
    "text": "",
    "type": "interface container"
  }, {
    "id": 172,
    "text": "",
    "type": "interface"
  }, {
    "id": 173,
    "text": "",
    "type": "interface"
  }, {
    "id": 174,
    "text": "",
    "type": "interface"
  }, {
    "id": 175,
    "text": "",
    "type": "interface"
  }, {
    "id": 176,
    "text": "",
    "type": "interface"
  }, {
    "id": 177,
    "text": "",
    "type": "interface"
  }, {
    "id": 178,
    "text": "",
    "type": "interface"
  }, {
    "id": 179,
    "text": "",
    "type": "interface"
  }, {
    "id": 180,
    "text": "",
    "type": "interface"
  }, {
    "id": 181,
    "text": "",
    "type": "interface"
  }, {
    "id": 182,
    "text": "",
    "type": "interface"
  }, {
    "id": 183,
    "text": "",
    "type": "interface"
  }, {
    "id": 184,
    "text": "",
    "type": "interface"
  }, {
    "id": 185,
    "text": "",
    "type": "require local variable"
  } ]
}