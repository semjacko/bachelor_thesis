{
  "_filename": "02_test_odbc_cnn.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-odbc/test/02_test_odbc_cnn.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 18,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 18,
    "label": "has",
    "to": 24
  }, {
    "from": 18,
    "label": "has",
    "to": 25
  }, {
    "from": 18,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 23
  }, {
    "from": 18,
    "label": "has",
    "to": 24
  }, {
    "from": 18,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 21
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 28,
    "label": "has",
    "to": 33
  }, {
    "from": 28,
    "label": "has",
    "to": 34
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 35
  }, {
    "from": 28,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 29
  }, {
    "from": 37,
    "label": "has",
    "to": 30
  }, {
    "from": 37,
    "label": "has",
    "to": 31
  }, {
    "from": 37,
    "label": "has",
    "to": 21
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 30
  }, {
    "from": 37,
    "label": "has",
    "to": 31
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 40,
    "label": "has",
    "to": 44
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 45
  }, {
    "from": 40,
    "label": "has",
    "to": 46
  }, {
    "from": 40,
    "label": "has",
    "to": 47
  }, {
    "from": 40,
    "label": "has",
    "to": 48
  }, {
    "from": 40,
    "label": "has",
    "to": 49
  }, {
    "from": 40,
    "label": "has",
    "to": 5
  }, {
    "from": 40,
    "label": "has",
    "to": 48
  }, {
    "from": 40,
    "label": "has",
    "to": 50
  }, {
    "from": 40,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 53,
    "label": "has",
    "to": 48
  }, {
    "from": 53,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 53,
    "label": "has",
    "to": 50
  }, {
    "from": 52,
    "label": "has",
    "to": 5
  }, {
    "from": 52,
    "label": "has",
    "to": 60
  }, {
    "from": 52,
    "label": "has",
    "to": 61
  }, {
    "from": 52,
    "label": "has",
    "to": 62
  }, {
    "from": 52,
    "label": "has",
    "to": 61
  }, {
    "from": 52,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 54
  }, {
    "from": 64,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 64,
    "label": "has",
    "to": 48
  }, {
    "from": 64,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 64,
    "label": "has",
    "to": 50
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 67,
    "label": "has",
    "to": 70
  }, {
    "from": 67,
    "label": "has",
    "to": 71
  }, {
    "from": 67,
    "label": "has",
    "to": 72
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 5
  }, {
    "from": 67,
    "label": "has",
    "to": 73
  }, {
    "from": 66,
    "label": "has",
    "to": 5
  }, {
    "from": 66,
    "label": "has",
    "to": 74
  }, {
    "from": 66,
    "label": "has",
    "to": 75
  }, {
    "from": 66,
    "label": "has",
    "to": 61
  }, {
    "from": 66,
    "label": "has",
    "to": 76
  }, {
    "from": 66,
    "label": "has",
    "to": 75
  }, {
    "from": 66,
    "label": "has",
    "to": 61
  }, {
    "from": 66,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 68
  }, {
    "from": 78,
    "label": "has",
    "to": 69
  }, {
    "from": 78,
    "label": "has",
    "to": 70
  }, {
    "from": 78,
    "label": "has",
    "to": 71
  }, {
    "from": 78,
    "label": "has",
    "to": 72
  }, {
    "from": 78,
    "label": "has",
    "to": 68
  }, {
    "from": 78,
    "label": "has",
    "to": 5
  }, {
    "from": 78,
    "label": "has",
    "to": 73
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 23
  }, {
    "from": 81,
    "label": "has",
    "to": 23
  }, {
    "from": 40,
    "label": "calls",
    "to": 84
  }, {
    "from": 18,
    "label": "calls",
    "to": 92
  }, {
    "from": 18,
    "label": "calls",
    "to": 92
  }, {
    "from": 18,
    "label": "calls",
    "to": 92
  }, {
    "from": 28,
    "label": "calls",
    "to": 92
  }, {
    "from": 28,
    "label": "calls",
    "to": 92
  }, {
    "from": 28,
    "label": "calls",
    "to": 92
  }, {
    "from": 28,
    "label": "calls",
    "to": 92
  }, {
    "from": 28,
    "label": "calls",
    "to": 92
  }, {
    "from": 37,
    "label": "calls",
    "to": 92
  }, {
    "from": 37,
    "label": "calls",
    "to": 92
  }, {
    "from": 37,
    "label": "calls",
    "to": 92
  }, {
    "from": 37,
    "label": "calls",
    "to": 92
  }, {
    "from": 37,
    "label": "calls",
    "to": 92
  }, {
    "from": 52,
    "label": "calls",
    "to": 92
  }, {
    "from": 52,
    "label": "calls",
    "to": 92
  }, {
    "from": 18,
    "label": "calls",
    "to": 85
  }, {
    "from": 28,
    "label": "calls",
    "to": 85
  }, {
    "from": 37,
    "label": "calls",
    "to": 85
  }, {
    "from": 11,
    "label": "calls",
    "to": 98
  }, {
    "from": 18,
    "label": "calls",
    "to": 98
  }, {
    "from": 18,
    "label": "calls",
    "to": 98
  }, {
    "from": 64,
    "label": "calls",
    "to": 98
  }, {
    "from": 66,
    "label": "calls",
    "to": 98
  }, {
    "from": 66,
    "label": "calls",
    "to": 98
  }, {
    "from": 28,
    "label": "calls",
    "to": 93
  }, {
    "from": 40,
    "label": "calls",
    "to": 91
  }, {
    "from": 40,
    "label": "calls",
    "to": 91
  }, {
    "from": 40,
    "label": "calls",
    "to": 91
  }, {
    "from": 64,
    "label": "calls",
    "to": 91
  }, {
    "from": 40,
    "label": "calls",
    "to": 87
  }, {
    "from": 40,
    "label": "calls",
    "to": 87
  }, {
    "from": 64,
    "label": "calls",
    "to": 87
  }, {
    "from": 40,
    "label": "calls",
    "to": 88
  }, {
    "from": 64,
    "label": "calls",
    "to": 88
  }, {
    "from": 15,
    "label": "calls",
    "to": 97
  }, {
    "from": 28,
    "label": "calls",
    "to": 97
  }, {
    "from": 28,
    "label": "calls",
    "to": 97
  }, {
    "from": 37,
    "label": "calls",
    "to": 97
  }, {
    "from": 40,
    "label": "calls",
    "to": 97
  }, {
    "from": 40,
    "label": "calls",
    "to": 97
  }, {
    "from": 40,
    "label": "calls",
    "to": 97
  }, {
    "from": 40,
    "label": "calls",
    "to": 97
  }, {
    "from": 40,
    "label": "calls",
    "to": 97
  }, {
    "from": 64,
    "label": "calls",
    "to": 97
  }, {
    "from": 64,
    "label": "calls",
    "to": 97
  }, {
    "from": 64,
    "label": "calls",
    "to": 97
  }, {
    "from": 64,
    "label": "calls",
    "to": 97
  }, {
    "from": 52,
    "label": "calls",
    "to": 64
  }, {
    "from": 52,
    "label": "calls",
    "to": 64
  }, {
    "from": 66,
    "label": "calls",
    "to": 64
  }, {
    "from": 66,
    "label": "calls",
    "to": 64
  }, {
    "from": 11,
    "label": "calls",
    "to": 89
  }, {
    "from": 82,
    "label": "calls",
    "to": 2
  }, {
    "from": 18,
    "label": "calls",
    "to": 90
  }, {
    "from": 37,
    "label": "calls",
    "to": 95
  }, {
    "from": 18,
    "label": "calls",
    "to": 94
  }, {
    "from": 82,
    "label": "calls",
    "to": 86
  }, {
    "from": 82,
    "label": "calls",
    "to": 96
  }, {
    "from": 82,
    "label": "calls",
    "to": 96
  }, {
    "from": 82,
    "label": "calls",
    "to": 96
  }, {
    "from": 1,
    "label": "contains",
    "to": 82
  }, {
    "from": 82,
    "label": "declares",
    "to": 2
  }, {
    "from": 82,
    "label": "declares",
    "to": 3
  }, {
    "from": 82,
    "label": "declares",
    "to": 11
  }, {
    "from": 82,
    "label": "declares",
    "to": 15
  }, {
    "from": 82,
    "label": "declares",
    "to": 18
  }, {
    "from": 82,
    "label": "declares",
    "to": 28
  }, {
    "from": 82,
    "label": "declares",
    "to": 37
  }, {
    "from": 82,
    "label": "declares",
    "to": 40
  }, {
    "from": 82,
    "label": "declares",
    "to": 52
  }, {
    "from": 82,
    "label": "declares",
    "to": 64
  }, {
    "from": 82,
    "label": "declares",
    "to": 66
  }, {
    "from": 82,
    "label": "declares",
    "to": 78
  }, {
    "from": 82,
    "label": "declares",
    "to": 80
  }, {
    "from": 82,
    "label": "declares",
    "to": 81
  }, {
    "from": 1,
    "label": "contains",
    "to": 100
  }, {
    "from": 1,
    "label": "contains",
    "to": 101
  }, {
    "from": 100,
    "label": "initializes",
    "to": 102
  }, {
    "from": 102,
    "label": "assigns",
    "to": 103
  }, {
    "from": 100,
    "label": "initializes",
    "to": 104
  }, {
    "from": 104,
    "label": "assigns",
    "to": 105
  }, {
    "from": 105,
    "label": "assigns",
    "to": 106
  }, {
    "from": 100,
    "label": "initializes",
    "to": 107
  }, {
    "from": 107,
    "label": "assigns",
    "to": 108
  }, {
    "from": 100,
    "label": "initializes",
    "to": 109
  }, {
    "from": 100,
    "label": "initializes",
    "to": 110
  }, {
    "from": 101,
    "label": "initializes",
    "to": 111
  }, {
    "from": 111,
    "label": "requires",
    "to": 83
  }, {
    "from": 101,
    "label": "initializes",
    "to": 99
  }, {
    "from": 101,
    "label": "initializes",
    "to": 99
  }, {
    "from": 99,
    "label": "requires",
    "to": 1
  }, {
    "from": 22,
    "label": "hasArgument",
    "to": 80
  }, {
    "from": 22,
    "label": "hasArgument",
    "to": 81
  }, {
    "from": 26,
    "label": "hasArgument",
    "to": 80
  }, {
    "from": 26,
    "label": "hasArgument",
    "to": 81
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "02_test_odbc_cnn",
    "type": "module"
  }, {
    "id": 2,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 3,
    "text": "function teardown()\r\n  if cnn then cnn:destroy() end\r\n  if env then env:destroy() end\r\n  cnn = nil\r\n  env = nil\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "if cnn then cnn:destroy() end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "cnn:destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "if env then env:destroy() end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "env:destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "cnn = nil",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "env = nil",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function setup()\r\n  env, cnn = do_connect()\r\n  assert_not_nil(env, cnn)\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "env, cnn = do_connect()",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "assert_not_nil(env, cnn)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function test_basic()\r\n  assert_equal(env, cnn:environment())\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "assert_equal(env, cnn:environment())",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function test_destroy()\r\n  assert_not_nil(env)\r\n  assert_not_nil(cnn)\r\n  assert_false(cnn:destroyed())\r\n  assert_pass(function() cnn:drvname() end)\r\n  assert_true(cnn:destroy())\r\n  assert_true(cnn:destroyed())\r\n  assert_error(function() cnn:drvname() end)\r\n  assert_true(cnn:destroy())\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "assert_not_nil(env)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "assert_not_nil(cnn)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "assert_false(cnn:destroyed())",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "assert_pass(function() cnn:drvname() end)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "cnn:drvname()",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "assert_true(cnn:destroy())",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "assert_true(cnn:destroyed())",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "assert_error(function() cnn:drvname() end)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function test_driverconnect()\r\n  assert_true(cnn:connected())\r\n  assert_true(cnn:disconnect())\r\n  assert_true(not cnn:connected())\r\n  assert_false(cnn:destroyed())\r\n  local c, str = cnn:driverconnect(CNN_DRV)\r\n  assert_equal(cnn, c)\r\n  assert_string(str)\r\n  assert_true(cnn:connected())\r\n  assert_true(cnn:disconnect())\r\n  assert_equal(cnn, cnn:driverconnect(str))\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "assert_true(cnn:connected())",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "assert_true(cnn:disconnect())",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "assert_true(not cnn:connected())",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "local c, str = cnn:driverconnect(CNN_DRV)",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "assert_equal(cnn, c)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "assert_string(str)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "assert_equal(cnn, cnn:driverconnect(str))",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function test_connect()\r\n  assert_true(cnn:connected())\r\n  assert_true(cnn:disconnect())\r\n  assert_true(not cnn:connected())\r\n  assert_false(cnn:destroyed())\r\n  assert_equal(cnn, cnn:connect(unpack(CNN_DSN)))\r\n  assert_true(cnn:disconnect())\r\n  assert_true(not cnn:connected())\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "assert_equal(cnn, cnn:connect(unpack(CNN_DSN)))",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function test_uservalue()\r\n  assert_nil(cnn:getuservalue())\r\n  assert_equal(cnn, cnn:setuservalue(123))\r\n  assert_equal(123, cnn:getuservalue())\r\n  assert_equal(cnn, cnn:setuservalue())\r\n  assert_nil(cnn:getuservalue())\r\n  local ptr = weak_ptr{}\r\n  assert_equal(cnn, cnn:setuservalue(ptr.value))\r\n  assert_equal(ptr.value, cnn:getuservalue())\r\n  gc_collect()\r\n  assert_table(ptr.value)\r\n  cnn:destroy()\r\n  gc_collect()\r\n  assert_nil(ptr.value)\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "assert_nil(cnn:getuservalue())",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "assert_equal(cnn, cnn:setuservalue(123))",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "assert_equal(123, cnn:getuservalue())",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "assert_equal(cnn, cnn:setuservalue())",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "local ptr = weak_ptr{}",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "assert_equal(cnn, cnn:setuservalue(ptr.value))",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "assert_equal(ptr.value, cnn:getuservalue())",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "gc_collect()",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "assert_table(ptr.value)",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "assert_nil(ptr.value)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function test_weak()\r\n  local function test()\r\n    local ptr\r\n    do \r\n      local cnn = env:connection()\r\n      ptr = weak_ptr(cnn)\r\n    end\r\n    gc_collect()\r\n    if ptr.value then cnn = ptr.value end -- for destroy in teardown\r\n    assert_nil(ptr.value)\r\n  end\r\n\r\n  cnn:destroy()\r\n\r\n  assert_true(env:setautoclosecnn(false))\r\n  test()\r\n  assert_true(env:setautoclosecnn(true))\r\n  test()\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "local function test()\r\n    local ptr\r\n    do \r\n      local cnn = env:connection()\r\n      ptr = weak_ptr(cnn)\r\n    end\r\n    gc_collect()\r\n    if ptr.value then cnn = ptr.value end -- for destroy in teardown\r\n    assert_nil(ptr.value)\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 54,
    "text": "local ptr",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "do \r\n      local cnn = env:connection()\r\n      ptr = weak_ptr(cnn)\r\n    end",
    "type": "statement:do"
  }, {
    "id": 56,
    "text": "local cnn = env:connection()",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "ptr = weak_ptr(cnn)",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "if ptr.value then cnn = ptr.value end",
    "type": "statement:if"
  }, {
    "id": 59,
    "text": "cnn = ptr.value",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "assert_true(env:setautoclosecnn(false))",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "test()",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "assert_true(env:setautoclosecnn(true))",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "local function test()\r\n    local ptr\r\n    do \r\n      local cnn = env:connection()\r\n      ptr = weak_ptr(cnn)\r\n    end\r\n    gc_collect()\r\n    if ptr.value then cnn = ptr.value end -- for destroy in teardown\r\n    assert_nil(ptr.value)\r\n  end",
    "type": "function"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function test_connection_counter()\r\n  local function test()\r\n    assert_equal(1, env:connection_count())\r\n    local cnn2 = assert_not_nil(env:connection())\r\n    local n, err = env:connection_count()\r\n    cnn2:destroy()\r\n    assert_equal(2, n, err)\r\n    assert_equal(1, env:connection_count())\r\n    cnn:destroy()\r\n    assert_equal(0, env:connection_count())\r\n  end\r\n\r\n  cnn:destroy()\r\n  env:setautoclosecnn(false)\r\n  cnn = assert_not_nil(env:connection())\r\n  test()\r\n\r\n  env:setautoclosecnn(true)\r\n  cnn = assert_not_nil(env:connection())\r\n  test()\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "local function test()\r\n    assert_equal(1, env:connection_count())\r\n    local cnn2 = assert_not_nil(env:connection())\r\n    local n, err = env:connection_count()\r\n    cnn2:destroy()\r\n    assert_equal(2, n, err)\r\n    assert_equal(1, env:connection_count())\r\n    cnn:destroy()\r\n    assert_equal(0, env:connection_count())\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 68,
    "text": "assert_equal(1, env:connection_count())",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "local cnn2 = assert_not_nil(env:connection())",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "local n, err = env:connection_count()",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "cnn2:destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "assert_equal(2, n, err)",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "assert_equal(0, env:connection_count())",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "env:setautoclosecnn(false)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "cnn = assert_not_nil(env:connection())",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "env:setautoclosecnn(true)",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "local function test()\r\n    assert_equal(1, env:connection_count())\r\n    local cnn2 = assert_not_nil(env:connection())\r\n    local n, err = env:connection_count()\r\n    cnn2:destroy()\r\n    assert_equal(2, n, err)\r\n    assert_equal(1, env:connection_count())\r\n    cnn:destroy()\r\n    assert_equal(0, env:connection_count())\r\n  end",
    "type": "function"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "function() cnn:drvname() end",
    "type": "function"
  }, {
    "id": 81,
    "text": "function() cnn:drvname() end",
    "type": "function"
  }, {
    "id": 82,
    "text": "",
    "type": "function container"
  }, {
    "id": 83,
    "text": "lunit",
    "type": "module"
  }, {
    "id": 84,
    "text": "assert_table",
    "type": "global function"
  }, {
    "id": 85,
    "text": "assert_false",
    "type": "global function"
  }, {
    "id": 86,
    "text": "TEST_CASE",
    "type": "global function"
  }, {
    "id": 87,
    "text": "gc_collect",
    "type": "global function"
  }, {
    "id": 88,
    "text": "weak_ptr",
    "type": "global function"
  }, {
    "id": 89,
    "text": "do_connect",
    "type": "global function"
  }, {
    "id": 90,
    "text": "assert_pass",
    "type": "global function"
  }, {
    "id": 91,
    "text": "assert_nil",
    "type": "global function"
  }, {
    "id": 92,
    "text": "assert_true",
    "type": "global function"
  }, {
    "id": 93,
    "text": "assert_string",
    "type": "global function"
  }, {
    "id": 94,
    "text": "assert_error",
    "type": "global function"
  }, {
    "id": 95,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 96,
    "text": "require",
    "type": "global function"
  }, {
    "id": 97,
    "text": "assert_equal",
    "type": "global function"
  }, {
    "id": 98,
    "text": "assert_not_nil",
    "type": "global function"
  }, {
    "id": 99,
    "text": "",
    "type": "global variable"
  }, {
    "id": 100,
    "text": "",
    "type": "variable container"
  }, {
    "id": 101,
    "text": "",
    "type": "require container"
  }, {
    "id": 102,
    "text": "",
    "type": "local variable"
  }, {
    "id": 103,
    "text": "",
    "type": "n/a"
  }, {
    "id": 104,
    "text": "",
    "type": "local variable"
  }, {
    "id": 105,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 106,
    "text": "",
    "type": "symbol"
  }, {
    "id": 107,
    "text": "",
    "type": "local variable"
  }, {
    "id": 108,
    "text": "",
    "type": "n/a"
  }, {
    "id": 109,
    "text": "",
    "type": "local variable"
  }, {
    "id": 110,
    "text": "",
    "type": "local variable"
  }, {
    "id": 111,
    "text": "",
    "type": "require local variable"
  } ]
}