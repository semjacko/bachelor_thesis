{
  "_filename": "04_test_odbc_bind.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-odbc/test/04_test_odbc_bind.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 9,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 9,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 9,
    "label": "has",
    "to": 18
  }, {
    "from": 9,
    "label": "has",
    "to": 19
  }, {
    "from": 9,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 4
  }, {
    "from": 25,
    "label": "has",
    "to": 4
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 4
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 4
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 4
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 4
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 4
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 4
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 37,
    "label": "has",
    "to": 4
  }, {
    "from": 37,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 4
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 44,
    "label": "has",
    "to": 48
  }, {
    "from": 44,
    "label": "has",
    "to": 49
  }, {
    "from": 44,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 44,
    "label": "has",
    "to": 53
  }, {
    "from": 44,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 44,
    "label": "has",
    "to": 56
  }, {
    "from": 44,
    "label": "has",
    "to": 57
  }, {
    "from": 44,
    "label": "has",
    "to": 58
  }, {
    "from": 44,
    "label": "has",
    "to": 59
  }, {
    "from": 44,
    "label": "has",
    "to": 60
  }, {
    "from": 44,
    "label": "has",
    "to": 61
  }, {
    "from": 44,
    "label": "has",
    "to": 62
  }, {
    "from": 44,
    "label": "has",
    "to": 63
  }, {
    "from": 44,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 44,
    "label": "has",
    "to": 66
  }, {
    "from": 44,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 44,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 70,
    "label": "has",
    "to": 74
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 70,
    "label": "has",
    "to": 75
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 70,
    "label": "has",
    "to": 76
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 70,
    "label": "has",
    "to": 77
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 70,
    "label": "has",
    "to": 78
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 70,
    "label": "has",
    "to": 79
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 70,
    "label": "has",
    "to": 80
  }, {
    "from": 70,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 81,
    "label": "has",
    "to": 73
  }, {
    "from": 70,
    "label": "has",
    "to": 83
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 70,
    "label": "has",
    "to": 84
  }, {
    "from": 70,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 73
  }, {
    "from": 70,
    "label": "has",
    "to": 87
  }, {
    "from": 70,
    "label": "has",
    "to": 56
  }, {
    "from": 70,
    "label": "has",
    "to": 88
  }, {
    "from": 70,
    "label": "has",
    "to": 89
  }, {
    "from": 70,
    "label": "has",
    "to": 90
  }, {
    "from": 70,
    "label": "has",
    "to": 91
  }, {
    "from": 70,
    "label": "has",
    "to": 92
  }, {
    "from": 70,
    "label": "has",
    "to": 93
  }, {
    "from": 70,
    "label": "has",
    "to": 94
  }, {
    "from": 70,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 70,
    "label": "has",
    "to": 97
  }, {
    "from": 70,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 70,
    "label": "has",
    "to": 100
  }, {
    "from": 101,
    "label": "has",
    "to": 71
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 101,
    "label": "has",
    "to": 73
  }, {
    "from": 101,
    "label": "has",
    "to": 103
  }, {
    "from": 101,
    "label": "has",
    "to": 73
  }, {
    "from": 101,
    "label": "has",
    "to": 104
  }, {
    "from": 101,
    "label": "has",
    "to": 73
  }, {
    "from": 101,
    "label": "has",
    "to": 105
  }, {
    "from": 101,
    "label": "has",
    "to": 73
  }, {
    "from": 101,
    "label": "has",
    "to": 106
  }, {
    "from": 101,
    "label": "has",
    "to": 73
  }, {
    "from": 101,
    "label": "has",
    "to": 107
  }, {
    "from": 101,
    "label": "has",
    "to": 73
  }, {
    "from": 101,
    "label": "has",
    "to": 108
  }, {
    "from": 101,
    "label": "has",
    "to": 73
  }, {
    "from": 101,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 109,
    "label": "has",
    "to": 73
  }, {
    "from": 101,
    "label": "has",
    "to": 111
  }, {
    "from": 101,
    "label": "has",
    "to": 73
  }, {
    "from": 101,
    "label": "has",
    "to": 112
  }, {
    "from": 101,
    "label": "has",
    "to": 73
  }, {
    "from": 101,
    "label": "has",
    "to": 113
  }, {
    "from": 114,
    "label": "has",
    "to": 71
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 114,
    "label": "has",
    "to": 73
  }, {
    "from": 114,
    "label": "has",
    "to": 116
  }, {
    "from": 114,
    "label": "has",
    "to": 73
  }, {
    "from": 114,
    "label": "has",
    "to": 117
  }, {
    "from": 114,
    "label": "has",
    "to": 73
  }, {
    "from": 114,
    "label": "has",
    "to": 118
  }, {
    "from": 114,
    "label": "has",
    "to": 73
  }, {
    "from": 114,
    "label": "has",
    "to": 119
  }, {
    "from": 114,
    "label": "has",
    "to": 73
  }, {
    "from": 114,
    "label": "has",
    "to": 120
  }, {
    "from": 114,
    "label": "has",
    "to": 73
  }, {
    "from": 114,
    "label": "has",
    "to": 108
  }, {
    "from": 114,
    "label": "has",
    "to": 73
  }, {
    "from": 114,
    "label": "has",
    "to": 121
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 121,
    "label": "has",
    "to": 73
  }, {
    "from": 114,
    "label": "has",
    "to": 123
  }, {
    "from": 114,
    "label": "has",
    "to": 73
  }, {
    "from": 114,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 124,
    "label": "has",
    "to": 73
  }, {
    "from": 114,
    "label": "has",
    "to": 126
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 127,
    "label": "has",
    "to": 129
  }, {
    "from": 127,
    "label": "has",
    "to": 130
  }, {
    "from": 127,
    "label": "has",
    "to": 131
  }, {
    "from": 127,
    "label": "has",
    "to": 132
  }, {
    "from": 127,
    "label": "has",
    "to": 133
  }, {
    "from": 127,
    "label": "has",
    "to": 134
  }, {
    "from": 127,
    "label": "has",
    "to": 135
  }, {
    "from": 127,
    "label": "has",
    "to": 136
  }, {
    "from": 127,
    "label": "has",
    "to": 135
  }, {
    "from": 127,
    "label": "has",
    "to": 137
  }, {
    "from": 127,
    "label": "has",
    "to": 138
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 139,
    "label": "has",
    "to": 4
  }, {
    "from": 139,
    "label": "has",
    "to": 128
  }, {
    "from": 139,
    "label": "has",
    "to": 129
  }, {
    "from": 139,
    "label": "has",
    "to": 130
  }, {
    "from": 139,
    "label": "has",
    "to": 131
  }, {
    "from": 139,
    "label": "has",
    "to": 141
  }, {
    "from": 139,
    "label": "has",
    "to": 142
  }, {
    "from": 139,
    "label": "has",
    "to": 143
  }, {
    "from": 139,
    "label": "has",
    "to": 144
  }, {
    "from": 139,
    "label": "has",
    "to": 145
  }, {
    "from": 139,
    "label": "has",
    "to": 136
  }, {
    "from": 139,
    "label": "has",
    "to": 146
  }, {
    "from": 139,
    "label": "has",
    "to": 147
  }, {
    "from": 139,
    "label": "has",
    "to": 148
  }, {
    "from": 139,
    "label": "has",
    "to": 149
  }, {
    "from": 139,
    "label": "has",
    "to": 132
  }, {
    "from": 139,
    "label": "has",
    "to": 133
  }, {
    "from": 139,
    "label": "has",
    "to": 134
  }, {
    "from": 139,
    "label": "has",
    "to": 135
  }, {
    "from": 139,
    "label": "has",
    "to": 150
  }, {
    "from": 139,
    "label": "has",
    "to": 151
  }, {
    "from": 152,
    "label": "has",
    "to": 128
  }, {
    "from": 152,
    "label": "has",
    "to": 129
  }, {
    "from": 152,
    "label": "has",
    "to": 130
  }, {
    "from": 152,
    "label": "has",
    "to": 131
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 152,
    "label": "has",
    "to": 137
  }, {
    "from": 152,
    "label": "has",
    "to": 150
  }, {
    "from": 152,
    "label": "has",
    "to": 154
  }, {
    "from": 155,
    "label": "has",
    "to": 128
  }, {
    "from": 155,
    "label": "has",
    "to": 129
  }, {
    "from": 155,
    "label": "has",
    "to": 130
  }, {
    "from": 155,
    "label": "has",
    "to": 131
  }, {
    "from": 155,
    "label": "has",
    "to": 141
  }, {
    "from": 155,
    "label": "has",
    "to": 153
  }, {
    "from": 155,
    "label": "has",
    "to": 146
  }, {
    "from": 155,
    "label": "has",
    "to": 150
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 157,
    "label": "has",
    "to": 159
  }, {
    "from": 157,
    "label": "has",
    "to": 160
  }, {
    "from": 157,
    "label": "has",
    "to": 161
  }, {
    "from": 157,
    "label": "has",
    "to": 162
  }, {
    "from": 157,
    "label": "has",
    "to": 163
  }, {
    "from": 157,
    "label": "has",
    "to": 164
  }, {
    "from": 157,
    "label": "has",
    "to": 165
  }, {
    "from": 157,
    "label": "has",
    "to": 166
  }, {
    "from": 157,
    "label": "has",
    "to": 167
  }, {
    "from": 157,
    "label": "has",
    "to": 128
  }, {
    "from": 157,
    "label": "has",
    "to": 129
  }, {
    "from": 157,
    "label": "has",
    "to": 130
  }, {
    "from": 157,
    "label": "has",
    "to": 131
  }, {
    "from": 157,
    "label": "has",
    "to": 71
  }, {
    "from": 157,
    "label": "has",
    "to": 168
  }, {
    "from": 157,
    "label": "has",
    "to": 73
  }, {
    "from": 157,
    "label": "has",
    "to": 169
  }, {
    "from": 157,
    "label": "has",
    "to": 73
  }, {
    "from": 157,
    "label": "has",
    "to": 170
  }, {
    "from": 157,
    "label": "has",
    "to": 73
  }, {
    "from": 157,
    "label": "has",
    "to": 171
  }, {
    "from": 157,
    "label": "has",
    "to": 73
  }, {
    "from": 157,
    "label": "has",
    "to": 172
  }, {
    "from": 157,
    "label": "has",
    "to": 73
  }, {
    "from": 157,
    "label": "has",
    "to": 173
  }, {
    "from": 157,
    "label": "has",
    "to": 73
  }, {
    "from": 157,
    "label": "has",
    "to": 174
  }, {
    "from": 157,
    "label": "has",
    "to": 73
  }, {
    "from": 157,
    "label": "has",
    "to": 175
  }, {
    "from": 175,
    "label": "has",
    "to": 176
  }, {
    "from": 175,
    "label": "has",
    "to": 73
  }, {
    "from": 157,
    "label": "has",
    "to": 177
  }, {
    "from": 157,
    "label": "has",
    "to": 73
  }, {
    "from": 157,
    "label": "has",
    "to": 178
  }, {
    "from": 157,
    "label": "has",
    "to": 73
  }, {
    "from": 157,
    "label": "has",
    "to": 137
  }, {
    "from": 157,
    "label": "has",
    "to": 179
  }, {
    "from": 157,
    "label": "has",
    "to": 180
  }, {
    "from": 157,
    "label": "has",
    "to": 71
  }, {
    "from": 157,
    "label": "has",
    "to": 168
  }, {
    "from": 157,
    "label": "has",
    "to": 73
  }, {
    "from": 157,
    "label": "has",
    "to": 169
  }, {
    "from": 157,
    "label": "has",
    "to": 73
  }, {
    "from": 157,
    "label": "has",
    "to": 170
  }, {
    "from": 157,
    "label": "has",
    "to": 73
  }, {
    "from": 157,
    "label": "has",
    "to": 171
  }, {
    "from": 157,
    "label": "has",
    "to": 73
  }, {
    "from": 157,
    "label": "has",
    "to": 172
  }, {
    "from": 157,
    "label": "has",
    "to": 73
  }, {
    "from": 157,
    "label": "has",
    "to": 173
  }, {
    "from": 157,
    "label": "has",
    "to": 73
  }, {
    "from": 157,
    "label": "has",
    "to": 174
  }, {
    "from": 157,
    "label": "has",
    "to": 73
  }, {
    "from": 157,
    "label": "has",
    "to": 175
  }, {
    "from": 175,
    "label": "has",
    "to": 176
  }, {
    "from": 175,
    "label": "has",
    "to": 73
  }, {
    "from": 157,
    "label": "has",
    "to": 177
  }, {
    "from": 157,
    "label": "has",
    "to": 73
  }, {
    "from": 157,
    "label": "has",
    "to": 178
  }, {
    "from": 157,
    "label": "has",
    "to": 73
  }, {
    "from": 157,
    "label": "has",
    "to": 146
  }, {
    "from": 157,
    "label": "has",
    "to": 181
  }, {
    "from": 157,
    "label": "has",
    "to": 150
  }, {
    "from": 157,
    "label": "has",
    "to": 182
  }, {
    "from": 183,
    "label": "has",
    "to": 5
  }, {
    "from": 184,
    "label": "has",
    "to": 4
  }, {
    "from": 184,
    "label": "has",
    "to": 185
  }, {
    "from": 186,
    "label": "has",
    "to": 39
  }, {
    "from": 186,
    "label": "has",
    "to": 40
  }, {
    "from": 186,
    "label": "has",
    "to": 4
  }, {
    "from": 186,
    "label": "has",
    "to": 187
  }, {
    "from": 70,
    "label": "calls",
    "to": 191
  }, {
    "from": 9,
    "label": "calls",
    "to": 192
  }, {
    "from": 127,
    "label": "calls",
    "to": 202
  }, {
    "from": 139,
    "label": "calls",
    "to": 202
  }, {
    "from": 152,
    "label": "calls",
    "to": 202
  }, {
    "from": 155,
    "label": "calls",
    "to": 202
  }, {
    "from": 157,
    "label": "calls",
    "to": 202
  }, {
    "from": 188,
    "label": "calls",
    "to": 194
  }, {
    "from": 188,
    "label": "calls",
    "to": 194
  }, {
    "from": 70,
    "label": "calls",
    "to": 194
  }, {
    "from": 70,
    "label": "calls",
    "to": 194
  }, {
    "from": 70,
    "label": "calls",
    "to": 194
  }, {
    "from": 70,
    "label": "calls",
    "to": 194
  }, {
    "from": 70,
    "label": "calls",
    "to": 194
  }, {
    "from": 70,
    "label": "calls",
    "to": 194
  }, {
    "from": 70,
    "label": "calls",
    "to": 194
  }, {
    "from": 70,
    "label": "calls",
    "to": 194
  }, {
    "from": 70,
    "label": "calls",
    "to": 194
  }, {
    "from": 70,
    "label": "calls",
    "to": 194
  }, {
    "from": 127,
    "label": "calls",
    "to": 194
  }, {
    "from": 139,
    "label": "calls",
    "to": 194
  }, {
    "from": 139,
    "label": "calls",
    "to": 194
  }, {
    "from": 152,
    "label": "calls",
    "to": 194
  }, {
    "from": 155,
    "label": "calls",
    "to": 194
  }, {
    "from": 157,
    "label": "calls",
    "to": 194
  }, {
    "from": 127,
    "label": "calls",
    "to": 195
  }, {
    "from": 139,
    "label": "calls",
    "to": 195
  }, {
    "from": 70,
    "label": "calls",
    "to": 196
  }, {
    "from": 157,
    "label": "calls",
    "to": 196
  }, {
    "from": 157,
    "label": "calls",
    "to": 196
  }, {
    "from": 44,
    "label": "calls",
    "to": 216
  }, {
    "from": 44,
    "label": "calls",
    "to": 216
  }, {
    "from": 44,
    "label": "calls",
    "to": 216
  }, {
    "from": 44,
    "label": "calls",
    "to": 216
  }, {
    "from": 44,
    "label": "calls",
    "to": 216
  }, {
    "from": 44,
    "label": "calls",
    "to": 216
  }, {
    "from": 44,
    "label": "calls",
    "to": 216
  }, {
    "from": 44,
    "label": "calls",
    "to": 216
  }, {
    "from": 44,
    "label": "calls",
    "to": 216
  }, {
    "from": 44,
    "label": "calls",
    "to": 216
  }, {
    "from": 44,
    "label": "calls",
    "to": 216
  }, {
    "from": 44,
    "label": "calls",
    "to": 216
  }, {
    "from": 44,
    "label": "calls",
    "to": 216
  }, {
    "from": 70,
    "label": "calls",
    "to": 216
  }, {
    "from": 70,
    "label": "calls",
    "to": 216
  }, {
    "from": 70,
    "label": "calls",
    "to": 216
  }, {
    "from": 70,
    "label": "calls",
    "to": 216
  }, {
    "from": 70,
    "label": "calls",
    "to": 216
  }, {
    "from": 70,
    "label": "calls",
    "to": 216
  }, {
    "from": 70,
    "label": "calls",
    "to": 216
  }, {
    "from": 70,
    "label": "calls",
    "to": 216
  }, {
    "from": 70,
    "label": "calls",
    "to": 216
  }, {
    "from": 70,
    "label": "calls",
    "to": 216
  }, {
    "from": 70,
    "label": "calls",
    "to": 216
  }, {
    "from": 70,
    "label": "calls",
    "to": 216
  }, {
    "from": 127,
    "label": "calls",
    "to": 216
  }, {
    "from": 127,
    "label": "calls",
    "to": 216
  }, {
    "from": 139,
    "label": "calls",
    "to": 216
  }, {
    "from": 139,
    "label": "calls",
    "to": 216
  }, {
    "from": 139,
    "label": "calls",
    "to": 216
  }, {
    "from": 157,
    "label": "calls",
    "to": 216
  }, {
    "from": 157,
    "label": "calls",
    "to": 216
  }, {
    "from": 157,
    "label": "calls",
    "to": 216
  }, {
    "from": 157,
    "label": "calls",
    "to": 216
  }, {
    "from": 157,
    "label": "calls",
    "to": 216
  }, {
    "from": 157,
    "label": "calls",
    "to": 216
  }, {
    "from": 157,
    "label": "calls",
    "to": 216
  }, {
    "from": 157,
    "label": "calls",
    "to": 216
  }, {
    "from": 157,
    "label": "calls",
    "to": 216
  }, {
    "from": 157,
    "label": "calls",
    "to": 216
  }, {
    "from": 157,
    "label": "calls",
    "to": 216
  }, {
    "from": 157,
    "label": "calls",
    "to": 216
  }, {
    "from": 157,
    "label": "calls",
    "to": 216
  }, {
    "from": 157,
    "label": "calls",
    "to": 216
  }, {
    "from": 157,
    "label": "calls",
    "to": 216
  }, {
    "from": 157,
    "label": "calls",
    "to": 216
  }, {
    "from": 157,
    "label": "calls",
    "to": 216
  }, {
    "from": 157,
    "label": "calls",
    "to": 216
  }, {
    "from": 157,
    "label": "calls",
    "to": 216
  }, {
    "from": 157,
    "label": "calls",
    "to": 216
  }, {
    "from": 188,
    "label": "calls",
    "to": 197
  }, {
    "from": 70,
    "label": "calls",
    "to": 203
  }, {
    "from": 157,
    "label": "calls",
    "to": 203
  }, {
    "from": 127,
    "label": "calls",
    "to": 204
  }, {
    "from": 127,
    "label": "calls",
    "to": 204
  }, {
    "from": 139,
    "label": "calls",
    "to": 204
  }, {
    "from": 139,
    "label": "calls",
    "to": 204
  }, {
    "from": 152,
    "label": "calls",
    "to": 204
  }, {
    "from": 152,
    "label": "calls",
    "to": 204
  }, {
    "from": 155,
    "label": "calls",
    "to": 204
  }, {
    "from": 155,
    "label": "calls",
    "to": 204
  }, {
    "from": 157,
    "label": "calls",
    "to": 204
  }, {
    "from": 157,
    "label": "calls",
    "to": 204
  }, {
    "from": 127,
    "label": "calls",
    "to": 205
  }, {
    "from": 127,
    "label": "calls",
    "to": 205
  }, {
    "from": 139,
    "label": "calls",
    "to": 205
  }, {
    "from": 139,
    "label": "calls",
    "to": 205
  }, {
    "from": 127,
    "label": "calls",
    "to": 44
  }, {
    "from": 139,
    "label": "calls",
    "to": 44
  }, {
    "from": 152,
    "label": "calls",
    "to": 44
  }, {
    "from": 155,
    "label": "calls",
    "to": 44
  }, {
    "from": 157,
    "label": "calls",
    "to": 44
  }, {
    "from": 157,
    "label": "calls",
    "to": 44
  }, {
    "from": 70,
    "label": "calls",
    "to": 198
  }, {
    "from": 157,
    "label": "calls",
    "to": 198
  }, {
    "from": 70,
    "label": "calls",
    "to": 206
  }, {
    "from": 157,
    "label": "calls",
    "to": 206
  }, {
    "from": 188,
    "label": "calls",
    "to": 207
  }, {
    "from": 139,
    "label": "calls",
    "to": 208
  }, {
    "from": 188,
    "label": "calls",
    "to": 209
  }, {
    "from": 70,
    "label": "calls",
    "to": 25
  }, {
    "from": 157,
    "label": "calls",
    "to": 25
  }, {
    "from": 70,
    "label": "calls",
    "to": 211
  }, {
    "from": 101,
    "label": "calls",
    "to": 211
  }, {
    "from": 101,
    "label": "calls",
    "to": 211
  }, {
    "from": 101,
    "label": "calls",
    "to": 211
  }, {
    "from": 101,
    "label": "calls",
    "to": 211
  }, {
    "from": 101,
    "label": "calls",
    "to": 211
  }, {
    "from": 101,
    "label": "calls",
    "to": 211
  }, {
    "from": 101,
    "label": "calls",
    "to": 211
  }, {
    "from": 101,
    "label": "calls",
    "to": 211
  }, {
    "from": 101,
    "label": "calls",
    "to": 211
  }, {
    "from": 101,
    "label": "calls",
    "to": 211
  }, {
    "from": 114,
    "label": "calls",
    "to": 211
  }, {
    "from": 114,
    "label": "calls",
    "to": 211
  }, {
    "from": 114,
    "label": "calls",
    "to": 211
  }, {
    "from": 114,
    "label": "calls",
    "to": 211
  }, {
    "from": 114,
    "label": "calls",
    "to": 211
  }, {
    "from": 114,
    "label": "calls",
    "to": 211
  }, {
    "from": 114,
    "label": "calls",
    "to": 211
  }, {
    "from": 114,
    "label": "calls",
    "to": 211
  }, {
    "from": 114,
    "label": "calls",
    "to": 211
  }, {
    "from": 114,
    "label": "calls",
    "to": 211
  }, {
    "from": 127,
    "label": "calls",
    "to": 211
  }, {
    "from": 139,
    "label": "calls",
    "to": 211
  }, {
    "from": 139,
    "label": "calls",
    "to": 211
  }, {
    "from": 139,
    "label": "calls",
    "to": 211
  }, {
    "from": 139,
    "label": "calls",
    "to": 211
  }, {
    "from": 139,
    "label": "calls",
    "to": 211
  }, {
    "from": 152,
    "label": "calls",
    "to": 211
  }, {
    "from": 152,
    "label": "calls",
    "to": 211
  }, {
    "from": 155,
    "label": "calls",
    "to": 211
  }, {
    "from": 155,
    "label": "calls",
    "to": 211
  }, {
    "from": 155,
    "label": "calls",
    "to": 211
  }, {
    "from": 157,
    "label": "calls",
    "to": 211
  }, {
    "from": 157,
    "label": "calls",
    "to": 211
  }, {
    "from": 6,
    "label": "calls",
    "to": 212
  }, {
    "from": 70,
    "label": "calls",
    "to": 213
  }, {
    "from": 70,
    "label": "calls",
    "to": 213
  }, {
    "from": 157,
    "label": "calls",
    "to": 213
  }, {
    "from": 157,
    "label": "calls",
    "to": 213
  }, {
    "from": 127,
    "label": "calls",
    "to": 210
  }, {
    "from": 139,
    "label": "calls",
    "to": 210
  }, {
    "from": 152,
    "label": "calls",
    "to": 210
  }, {
    "from": 155,
    "label": "calls",
    "to": 210
  }, {
    "from": 157,
    "label": "calls",
    "to": 210
  }, {
    "from": 188,
    "label": "calls",
    "to": 3
  }, {
    "from": 21,
    "label": "calls",
    "to": 217
  }, {
    "from": 157,
    "label": "calls",
    "to": 70
  }, {
    "from": 157,
    "label": "calls",
    "to": 70
  }, {
    "from": 3,
    "label": "calls",
    "to": 190
  }, {
    "from": 188,
    "label": "calls",
    "to": 2
  }, {
    "from": 139,
    "label": "calls",
    "to": 193
  }, {
    "from": 139,
    "label": "calls",
    "to": 193
  }, {
    "from": 70,
    "label": "calls",
    "to": 214
  }, {
    "from": 157,
    "label": "calls",
    "to": 214
  }, {
    "from": 21,
    "label": "calls",
    "to": 200
  }, {
    "from": 127,
    "label": "calls",
    "to": 101
  }, {
    "from": 139,
    "label": "calls",
    "to": 101
  }, {
    "from": 70,
    "label": "calls",
    "to": 201
  }, {
    "from": 70,
    "label": "calls",
    "to": 201
  }, {
    "from": 157,
    "label": "calls",
    "to": 201
  }, {
    "from": 157,
    "label": "calls",
    "to": 201
  }, {
    "from": 188,
    "label": "calls",
    "to": 199
  }, {
    "from": 188,
    "label": "calls",
    "to": 215
  }, {
    "from": 188,
    "label": "calls",
    "to": 215
  }, {
    "from": 188,
    "label": "calls",
    "to": 215
  }, {
    "from": 152,
    "label": "calls",
    "to": 114
  }, {
    "from": 155,
    "label": "calls",
    "to": 114
  }, {
    "from": 114,
    "label": "calls",
    "to": 37
  }, {
    "from": 114,
    "label": "calls",
    "to": 37
  }, {
    "from": 1,
    "label": "contains",
    "to": 188
  }, {
    "from": 188,
    "label": "declares",
    "to": 2
  }, {
    "from": 188,
    "label": "declares",
    "to": 3
  }, {
    "from": 188,
    "label": "declares",
    "to": 6
  }, {
    "from": 188,
    "label": "declares",
    "to": 9
  }, {
    "from": 188,
    "label": "declares",
    "to": 21
  }, {
    "from": 188,
    "label": "declares",
    "to": 25
  }, {
    "from": 188,
    "label": "declares",
    "to": 27
  }, {
    "from": 188,
    "label": "declares",
    "to": 29
  }, {
    "from": 188,
    "label": "declares",
    "to": 31
  }, {
    "from": 188,
    "label": "declares",
    "to": 33
  }, {
    "from": 188,
    "label": "declares",
    "to": 35
  }, {
    "from": 188,
    "label": "declares",
    "to": 37
  }, {
    "from": 188,
    "label": "declares",
    "to": 42
  }, {
    "from": 188,
    "label": "declares",
    "to": 44
  }, {
    "from": 188,
    "label": "declares",
    "to": 70
  }, {
    "from": 188,
    "label": "declares",
    "to": 101
  }, {
    "from": 188,
    "label": "declares",
    "to": 114
  }, {
    "from": 188,
    "label": "declares",
    "to": 127
  }, {
    "from": 188,
    "label": "declares",
    "to": 139
  }, {
    "from": 188,
    "label": "declares",
    "to": 152
  }, {
    "from": 188,
    "label": "declares",
    "to": 155
  }, {
    "from": 188,
    "label": "declares",
    "to": 157
  }, {
    "from": 188,
    "label": "declares",
    "to": 183
  }, {
    "from": 188,
    "label": "declares",
    "to": 184
  }, {
    "from": 188,
    "label": "declares",
    "to": 186
  }, {
    "from": 1,
    "label": "contains",
    "to": 219
  }, {
    "from": 1,
    "label": "contains",
    "to": 220
  }, {
    "from": 219,
    "label": "initializes",
    "to": 221
  }, {
    "from": 221,
    "label": "assigns",
    "to": 222
  }, {
    "from": 219,
    "label": "initializes",
    "to": 223
  }, {
    "from": 223,
    "label": "assigns",
    "to": 224
  }, {
    "from": 219,
    "label": "initializes",
    "to": 225
  }, {
    "from": 225,
    "label": "assigns",
    "to": 226
  }, {
    "from": 219,
    "label": "initializes",
    "to": 227
  }, {
    "from": 227,
    "label": "assigns",
    "to": 228
  }, {
    "from": 228,
    "label": "assigns",
    "to": 229
  }, {
    "from": 219,
    "label": "initializes",
    "to": 230
  }, {
    "from": 230,
    "label": "assigns",
    "to": 231
  }, {
    "from": 220,
    "label": "initializes",
    "to": 232
  }, {
    "from": 232,
    "label": "requires",
    "to": 189
  }, {
    "from": 220,
    "label": "initializes",
    "to": 218
  }, {
    "from": 220,
    "label": "initializes",
    "to": 218
  }, {
    "from": 218,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "04_test_odbc_bind",
    "type": "module"
  }, {
    "id": 2,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 3,
    "text": "local function SKIP(msg) return function() lunit.skip(msg) end end",
    "type": "function"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "lunit.skip(msg)",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "local function assert_opt_string(v, ...)\r\n  if v == nil then return v, ... end\r\n  return assert_string(v, ...)\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "if v == nil then return v, ... end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function teardown()\r\n  if cnn and cnn:connected() then drop_proc(cnn) end\r\n  if stmt then stmt:destroy() end\r\n  if cnn then cnn:destroy() end\r\n  if env then env:destroy() end\r\n  cnn = nil\r\n  env = nil\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "if cnn and cnn:connected() then drop_proc(cnn) end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "drop_proc(cnn)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "if stmt then stmt:destroy() end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "stmt:destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "if cnn then cnn:destroy() end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "cnn:destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "if env then env:destroy() end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "env:destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "cnn = nil",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "env = nil",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function setup()\r\n  env, cnn = do_connect()\r\n  assert_not_nil(env, cnn)\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "env, cnn = do_connect()",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "assert_not_nil(env, cnn)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function(b)\r\n  return(string.gsub(b, \"([a-fA-F0-9][a-fA-F0-9])\", function(v)\r\n    return string.char( tonumber(v, 16) )\r\n  end))\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "local function get_int()\r\n  return inIntVal;\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "local function get_uint()\r\n  return inUIntVal\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "local function get_double()\r\n  return inDoubleVal\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "local function get_date()\r\n  return inDateVal\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "local function get_bool()\r\n  return inBoolVal\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "local function create_get_bin_by(str,n)\r\n  local pos = 1\r\n  return function()\r\n    local data = str:sub(pos,pos+n-1)\r\n    pos = pos + n\r\n    return data\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "local pos = 1",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "local data = str:sub(pos,pos+n-1)",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "pos = pos + n",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "local function get_uuid()\r\n  return inGuidVal\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "local function EXEC_AND_ASSERT(qrySQL)\r\n  if qrySQL then assert_equal(stmt, stmt:execute(qrySQL))\r\n  else assert_equal(stmt, stmt:execute()) end\r\n\r\n  assert_equal(1, stmt:rowcount())\r\n  local outIntVal, outUIntVal, outDoubleVal, outStringVal,\r\n  outBinaryVal, outDateVal, outNullVal, outDefaultVal,\r\n  outBoolVal,outGuidVal = stmt:fetch()\r\n\r\n  if not PROC_SUPPORT_DEFAULT then\r\n    outBoolVal, outGuidVal = outDefaultVal, outBoolVal, outGuidVal \r\n    outDefaultVal = \"----\"\r\n  end\r\n\r\n  local test_bin_val = inBinaryVal\r\n  if DBMS == 'MySQL' then\r\n    test_bin_val = inBinaryVal .. ('\\0'):rep(#outBinaryVal - #inBinaryVal)\r\n  end\r\n\r\n\r\n  stmt:close()\r\n\r\n  -- print()\r\n  -- print('IntVal     =', outIntVal      )\r\n  -- print('UIntVal    =', outUIntVal     )\r\n  -- print('DoubleVal  =', outDoubleVal   )\r\n  -- print('StringVal  =', outStringVal   )\r\n  -- print('BinaryVal  =', outBinaryVal   )\r\n  -- print('DateVal    =', outDateVal     )\r\n  -- print('NullVal    =', outNullVal     )\r\n  -- print('DefaultVal =', outDefaultVal  )\r\n  -- print('BoolVal    =', outBoolVal     )\r\n  -- print('GuidVal    =', outGuidVal     )\r\n  -- print\"=================================\"\r\n\r\n  assert_equal(inIntVal    , outIntVal      )\r\n  assert_equal(inUIntVal   , outUIntVal     )\r\n  assert_equal(inDoubleVal , outDoubleVal   )\r\n  assert_equal(inStringVal , outStringVal   )\r\n  assert_equal(test_bin_val, outBinaryVal   )\r\n  assert_equal(inDateVal   , outDateVal     )\r\n  assert_equal(inNullVal   , outNullVal     )\r\n  if PROC_SUPPORT_DEFAULT then\r\n    assert_equal(inDefaultVal, outDefaultVal  )\r\n  end\r\n  assert_equal(inBoolVal   , outBoolVal     )\r\n  if HAS_GUID_TYPE then\r\n    assert_equal(inGuidVal   , outGuidVal     )\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "if qrySQL then assert_equal(stmt, stmt:execute(qrySQL))\r\n  else assert_equal(stmt, stmt:execute()) end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "assert_equal(stmt, stmt:execute(qrySQL))",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "assert_equal(stmt, stmt:execute())",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "assert_equal(1, stmt:rowcount())",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "local outIntVal, outUIntVal, outDoubleVal, outStringVal,\r\n  outBinaryVal, outDateVal, outNullVal, outDefaultVal,\r\n  outBoolVal,outGuidVal = stmt:fetch()",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "if not PROC_SUPPORT_DEFAULT then\r\n    outBoolVal, outGuidVal = outDefaultVal, outBoolVal, outGuidVal \r\n    outDefaultVal = \"----\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "outBoolVal, outGuidVal = outDefaultVal, outBoolVal, outGuidVal",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "outDefaultVal = \"----\"",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "local test_bin_val = inBinaryVal",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "if DBMS == 'MySQL' then\r\n    test_bin_val = inBinaryVal .. ('\\0'):rep(#outBinaryVal - #inBinaryVal)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "test_bin_val = inBinaryVal .. ('\\0'):rep(#outBinaryVal - #inBinaryVal)",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "stmt:close()",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "assert_equal(inIntVal    , outIntVal      )",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "assert_equal(inUIntVal   , outUIntVal     )",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "assert_equal(inDoubleVal , outDoubleVal   )",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "assert_equal(inStringVal , outStringVal   )",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "assert_equal(test_bin_val, outBinaryVal   )",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "assert_equal(inDateVal   , outDateVal     )",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "assert_equal(inNullVal   , outNullVal     )",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "if PROC_SUPPORT_DEFAULT then\r\n    assert_equal(inDefaultVal, outDefaultVal  )\r\n  end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "assert_equal(inDefaultVal, outDefaultVal  )",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "assert_equal(inBoolVal   , outBoolVal     )",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "if HAS_GUID_TYPE then\r\n    assert_equal(inGuidVal   , outGuidVal     )\r\n  end",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "assert_equal(inGuidVal   , outGuidVal     )",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "local function VEXEC_AND_ASSERT(qrySQL)\r\n  if qrySQL then assert_equal(stmt, stmt:execute(qrySQL))\r\n  else assert_equal(stmt, stmt:execute()) end\r\n\r\n  local i = 1\r\n  local outIntVal     = assert( odbc.slong()              :bind_col(stmt, i ) ) i = i + 1\r\n  local outUIntVal    = assert( odbc.ulong()              :bind_col(stmt, i ) ) i = i + 1\r\n  local outDoubleVal  = assert( odbc.double()             :bind_col(stmt, i ) ) i = i + 1\r\n  local outStringVal  = assert( odbc.char(#inStringVal)   :bind_col(stmt, i ) ) i = i + 1\r\n  local outBinaryVal  = assert( odbc.binary(#inBinaryVal) :bind_col(stmt, i ) ) i = i + 1\r\n  local outDateVal    = assert( odbc.date()               :bind_col(stmt, i ) ) i = i + 1\r\n  local outNullVal    = assert( odbc.utinyint()           :bind_col(stmt, i ) ) i = i + 1\r\n  local outDefaultVal if PROC_SUPPORT_DEFAULT then\r\n    outDefaultVal = assert( odbc.ulong()              :bind_col(stmt, i ) ) i = i + 1\r\n  end\r\n  local outBoolVal    = assert( odbc.bit()                :bind_col(stmt, i ) ) i = i + 1\r\n  local outGuidVal    if HAS_GUID_TYPE then\r\n    outGuidVal    = assert( odbc.binary(#inGuidVal)   :bind_col(stmt, i ) ) i = i + 1\r\n  end\r\n\r\n  assert_true(stmt:vfetch())\r\n  stmt:close()\r\n\r\n  -- print()\r\n  -- print('IntVal     =', outIntVal      :get())\r\n  -- print('UIntVal    =', outUIntVal     :get())\r\n  -- print('DoubleVal  =', outDoubleVal   :get())\r\n  -- print('StringVal  =', outStringVal   :get())\r\n  -- print('BinaryVal  =', outBinaryVal   :get())\r\n  -- print('DateVal    =', outDateVal     :get())\r\n  -- print('NullVal    =', outNullVal     :get())\r\n  -- print('DefaultVal =', outDefaultVal  :get())\r\n  -- print('BoolVal    =', outBoolVal     :get())\r\n  -- print('GuidVal    =', outGuidVal     :get())\r\n  -- print\"=================================\"\r\n\r\n  assert_equal(inIntVal    , outIntVal      :get())\r\n  assert_equal(inUIntVal   , outUIntVal     :get())\r\n  assert_equal(inDoubleVal , outDoubleVal   :get())\r\n  assert_equal(inStringVal , outStringVal   :get())\r\n  assert_equal(inBinaryVal , outBinaryVal   :get())\r\n  assert_equal(inDateVal   , outDateVal     :get())\r\n  assert_equal(inNullVal   , outNullVal     :get())\r\n  if PROC_SUPPORT_DEFAULT then\r\n    assert_equal(inDefaultVal, outDefaultVal  :get())\r\n  end\r\n  assert_equal(inBoolVal   , outBoolVal     :get())\r\n  if HAS_GUID_TYPE then\r\n    assert_equal(x(inGuidVal), outGuidVal     :get())\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "local i = 1",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "local outIntVal     = assert( odbc.slong()              :bind_col(stmt, i ) )",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "local outUIntVal    = assert( odbc.ulong()              :bind_col(stmt, i ) )",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "local outDoubleVal  = assert( odbc.double()             :bind_col(stmt, i ) )",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "local outStringVal  = assert( odbc.char(#inStringVal)   :bind_col(stmt, i ) )",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "local outBinaryVal  = assert( odbc.binary(#inBinaryVal) :bind_col(stmt, i ) )",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "local outDateVal    = assert( odbc.date()               :bind_col(stmt, i ) )",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "local outNullVal    = assert( odbc.utinyint()           :bind_col(stmt, i ) )",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "local outDefaultVal",
    "type": "statement:localassign"
  }, {
    "id": 81,
    "text": "if PROC_SUPPORT_DEFAULT then\r\n    outDefaultVal = assert( odbc.ulong()              :bind_col(stmt, i ) ) i = i + 1\r\n  end",
    "type": "statement:if"
  }, {
    "id": 82,
    "text": "outDefaultVal = assert( odbc.ulong()              :bind_col(stmt, i ) )",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "local outBoolVal    = assert( odbc.bit()                :bind_col(stmt, i ) )",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "local outGuidVal",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "if HAS_GUID_TYPE then\r\n    outGuidVal    = assert( odbc.binary(#inGuidVal)   :bind_col(stmt, i ) ) i = i + 1\r\n  end",
    "type": "statement:if"
  }, {
    "id": 86,
    "text": "outGuidVal    = assert( odbc.binary(#inGuidVal)   :bind_col(stmt, i ) )",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "assert_true(stmt:vfetch())",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "assert_equal(inIntVal    , outIntVal      :get())",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "assert_equal(inUIntVal   , outUIntVal     :get())",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "assert_equal(inDoubleVal , outDoubleVal   :get())",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "assert_equal(inStringVal , outStringVal   :get())",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "assert_equal(inBinaryVal , outBinaryVal   :get())",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "assert_equal(inDateVal   , outDateVal     :get())",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "assert_equal(inNullVal   , outNullVal     :get())",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "if PROC_SUPPORT_DEFAULT then\r\n    assert_equal(inDefaultVal, outDefaultVal  :get())\r\n  end",
    "type": "statement:if"
  }, {
    "id": 96,
    "text": "assert_equal(inDefaultVal, outDefaultVal  :get())",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "assert_equal(inBoolVal   , outBoolVal     :get())",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "if HAS_GUID_TYPE then\r\n    assert_equal(x(inGuidVal), outGuidVal     :get())\r\n  end",
    "type": "statement:if"
  }, {
    "id": 99,
    "text": "assert_equal(x(inGuidVal), outGuidVal     :get())",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 101,
    "text": "local function BIND(stmt)\r\n  local i = 1\r\n  assert_true(stmt:bindnum    (i,inIntVal    )) i = i + 1\r\n  assert_true(stmt:bindnum    (i,inUIntVal   )) i = i + 1\r\n  assert_true(stmt:bindnum    (i,inDoubleVal )) i = i + 1\r\n  assert_true(stmt:bindstr    (i,inStringVal )) i = i + 1\r\n  assert_true(stmt:bindbin    (i,inBinaryVal )) i = i + 1\r\n  assert_true(stmt:bindstr    (i,inDateVal   )) i = i + 1\r\n  assert_true(stmt:bindnull   (i             )) i = i + 1\r\n  if PROC_SUPPORT_DEFAULT then\r\n    assert_true(stmt:binddefault(i           )) i = i + 1\r\n  end\r\n  assert_true(stmt:bindbool   (i,inBoolVal   )) i = i + 1\r\n  assert_true(stmt:bindstr    (i,inGuidVal   )) i = i + 1\r\nend",
    "type": "function"
  }, {
    "id": 102,
    "text": "assert_true(stmt:bindnum    (i,inIntVal    ))",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "assert_true(stmt:bindnum    (i,inUIntVal   ))",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "assert_true(stmt:bindnum    (i,inDoubleVal ))",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "assert_true(stmt:bindstr    (i,inStringVal ))",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "assert_true(stmt:bindbin    (i,inBinaryVal ))",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "assert_true(stmt:bindstr    (i,inDateVal   ))",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "assert_true(stmt:bindnull   (i             ))",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "if PROC_SUPPORT_DEFAULT then\r\n    assert_true(stmt:binddefault(i           )) i = i + 1\r\n  end",
    "type": "statement:if"
  }, {
    "id": 110,
    "text": "assert_true(stmt:binddefault(i           ))",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "assert_true(stmt:bindbool   (i,inBoolVal   ))",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "assert_true(stmt:bindstr    (i,inGuidVal   ))",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 114,
    "text": "local function BIND_CB(stmt)\r\n  local i = 1\r\n  assert_true(stmt:bindnum    (i, get_int    ))                       i = i + 1\r\n  assert_true(stmt:bindnum    (i, get_uint   ))                       i = i + 1\r\n  assert_true(stmt:bindnum    (i, get_double ))                       i = i + 1\r\n  assert_true(stmt:bindstr    (i, create_get_bin_by(inStringVal,10))) i = i + 1\r\n  assert_true(stmt:bindbin    (i, create_get_bin_by(inBinaryVal,10))) i = i + 1\r\n  assert_true(stmt:bindstr    (i, get_date, #inDateVal   ))           i = i + 1\r\n  assert_true(stmt:bindnull   (i             ))                       i = i + 1\r\n  if PROC_SUPPORT_DEFAULT then\r\n    assert_true(stmt:binddefault(i             ))                     i = i + 1\r\n  end\r\n  assert_true(stmt:bindbool   (i, get_bool   ))                       i = i + 1\r\n  if HAS_GUID_TYPE then\r\n    assert_true(stmt:bindstr    (i, get_uuid   ,#inGuidVal))          i = i + 1\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 115,
    "text": "assert_true(stmt:bindnum    (i, get_int    ))",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "assert_true(stmt:bindnum    (i, get_uint   ))",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "assert_true(stmt:bindnum    (i, get_double ))",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "assert_true(stmt:bindstr    (i, create_get_bin_by(inStringVal,10)))",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "assert_true(stmt:bindbin    (i, create_get_bin_by(inBinaryVal,10)))",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "assert_true(stmt:bindstr    (i, get_date, #inDateVal   ))",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "if PROC_SUPPORT_DEFAULT then\r\n    assert_true(stmt:binddefault(i             ))                     i = i + 1\r\n  end",
    "type": "statement:if"
  }, {
    "id": 122,
    "text": "assert_true(stmt:binddefault(i             ))",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "assert_true(stmt:bindbool   (i, get_bool   ))",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "if HAS_GUID_TYPE then\r\n    assert_true(stmt:bindstr    (i, get_uuid   ,#inGuidVal))          i = i + 1\r\n  end",
    "type": "statement:if"
  }, {
    "id": 125,
    "text": "assert_true(stmt:bindstr    (i, get_uuid   ,#inGuidVal))",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 127,
    "text": "function test_1()\r\n  assert_boolean(proc_exists(cnn))\r\n  assert(ensure_proc(cnn))\r\n  assert_true(proc_exists(cnn))\r\n\r\n  stmt = cnn:statement()\r\n  assert_false(stmt:prepared())\r\n  assert_nil(stmt:colnames())\r\n  assert_nil(stmt:coltypes())\r\n  assert_equal(-1, stmt:parcount())\r\n\r\n  BIND(stmt)\r\n\r\n  assert_equal(-1, stmt:parcount())\r\n  EXEC_AND_ASSERT(TEST_PROC_CALL)\r\nend",
    "type": "function"
  }, {
    "id": 128,
    "text": "assert_boolean(proc_exists(cnn))",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "assert(ensure_proc(cnn))",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "assert_true(proc_exists(cnn))",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "stmt = cnn:statement()",
    "type": "statement:assign"
  }, {
    "id": 132,
    "text": "assert_false(stmt:prepared())",
    "type": "statement:functioncall"
  }, {
    "id": 133,
    "text": "assert_nil(stmt:colnames())",
    "type": "statement:functioncall"
  }, {
    "id": 134,
    "text": "assert_nil(stmt:coltypes())",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "assert_equal(-1, stmt:parcount())",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "BIND(stmt)",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "EXEC_AND_ASSERT(TEST_PROC_CALL)",
    "type": "statement:functioncall"
  }, {
    "id": 138,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 139,
    "text": "function test_2()\r\n  if DBMS == 'MySQL' then return skip'MySQL does not supported' end\r\n\r\n  assert_boolean(proc_exists(cnn))\r\n  assert(ensure_proc(cnn))\r\n  assert_true(proc_exists(cnn))\r\n\r\n  stmt = cnn:statement()\r\n  assert_true(stmt:prepare(TEST_PROC_CALL))\r\n  assert_true(stmt:prepared())\r\n  local col = assert_table(stmt:colnames())\r\n  local typ = assert_table(stmt:coltypes())\r\n  assert((stmt:parcount() == 10) or (stmt:parcount() == -1))\r\n\r\n  BIND(stmt)\r\n\r\n  EXEC_AND_ASSERT()\r\n  \r\n  assert_equal(col, stmt:colnames())\r\n  assert_equal(typ, stmt:coltypes())\r\n\r\n  assert_true(stmt:reset())\r\n  assert_false(stmt:prepared())\r\n  assert_nil(stmt:colnames())\r\n  assert_nil(stmt:coltypes())\r\n  assert_equal(-1, stmt:parcount())\r\n\r\n  assert_true(stmt:destroy())\r\nend",
    "type": "function"
  }, {
    "id": 140,
    "text": "if DBMS == 'MySQL' then return skip'MySQL does not supported' end",
    "type": "statement:if"
  }, {
    "id": 141,
    "text": "assert_true(stmt:prepare(TEST_PROC_CALL))",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "assert_true(stmt:prepared())",
    "type": "statement:functioncall"
  }, {
    "id": 143,
    "text": "local col = assert_table(stmt:colnames())",
    "type": "statement:localassign"
  }, {
    "id": 144,
    "text": "local typ = assert_table(stmt:coltypes())",
    "type": "statement:localassign"
  }, {
    "id": 145,
    "text": "assert((stmt:parcount() == 10) or (stmt:parcount() == -1))",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "EXEC_AND_ASSERT()",
    "type": "statement:functioncall"
  }, {
    "id": 147,
    "text": "assert_equal(col, stmt:colnames())",
    "type": "statement:functioncall"
  }, {
    "id": 148,
    "text": "assert_equal(typ, stmt:coltypes())",
    "type": "statement:functioncall"
  }, {
    "id": 149,
    "text": "assert_true(stmt:reset())",
    "type": "statement:functioncall"
  }, {
    "id": 150,
    "text": "assert_true(stmt:destroy())",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 152,
    "text": "function test_3()\r\n  assert_boolean(proc_exists(cnn))\r\n  assert(ensure_proc(cnn))\r\n  assert_true(proc_exists(cnn))\r\n\r\n  stmt = cnn:statement()\r\n  BIND_CB(stmt)\r\n  EXEC_AND_ASSERT(TEST_PROC_CALL)\r\n  assert_true(stmt:destroy())\r\nend",
    "type": "function"
  }, {
    "id": 153,
    "text": "BIND_CB(stmt)",
    "type": "statement:functioncall"
  }, {
    "id": 154,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 155,
    "text": "function test_4()\r\n  assert_boolean(proc_exists(cnn))\r\n  assert(ensure_proc(cnn))\r\n  assert_true(proc_exists(cnn))\r\n\r\n  stmt = cnn:statement()\r\n  assert_true(stmt:prepare(TEST_PROC_CALL))\r\n  \r\n  BIND_CB(stmt)\r\n  EXEC_AND_ASSERT()\r\n  assert_true(stmt:destroy())\r\nend",
    "type": "function"
  }, {
    "id": 156,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 157,
    "text": "function test_bind_value()\r\n  local vIntVal     = odbc.slong(-0x7FFFFFFF)\r\n  local vUIntVal    = odbc.ulong(0xFFFFFFFF)\r\n  local vDoubleVal  = odbc.double(1234.235664879123456)\r\n  local vStringVal  = odbc.char(\"Hello world\")\r\n  local vBinaryVal  = odbc.binary(\"\\000\\001\\002\\003\")\r\n  local vDateVal    = odbc.char(\"2011-01-01\") -- sybase has error. for date : Cannot convert SQLDATETIME to a date\r\n  local vNullVal    = odbc.utinyint()\r\n  local vDefaultVal = odbc.ulong(1234)\r\n  local vBoolVal    = odbc.bit(true)\r\n  local vGuidVal    = odbc.binary(x'B1BB49A2B4014413BEBB7ACD10399875')\r\n\r\n  assert_boolean(proc_exists(cnn))\r\n  assert(ensure_proc(cnn))\r\n  assert_true(proc_exists(cnn))\r\n\r\n  stmt = cnn:statement()\r\n\r\n  local i = 1\r\n  assert_equal(vIntVal     , vIntVal     :bind_param(stmt, i  )) i = i + 1\r\n  assert_equal(vUIntVal    , vUIntVal    :bind_param(stmt, i  )) i = i + 1\r\n  assert_equal(vDoubleVal  , vDoubleVal  :bind_param(stmt, i  )) i = i + 1\r\n  assert_equal(vStringVal  , vStringVal  :bind_param(stmt, i  )) i = i + 1\r\n  assert_equal(vBinaryVal  , vBinaryVal  :bind_param(stmt, i  )) i = i + 1\r\n  assert_equal(vDateVal    , vDateVal    :bind_param(stmt, i, odbc.PARAM_INPUT, odbc.DATE)) i = i + 1\r\n  assert_equal(vNullVal    , vNullVal    :bind_param(stmt, i  )) i = i + 1\r\n  if PROC_SUPPORT_DEFAULT then\r\n    assert_equal(vDefaultVal , vDefaultVal :bind_param(stmt, i  )) i = i + 1\r\n  end\r\n  assert_equal(vBoolVal    , vBoolVal    :bind_param(stmt, i  )) i = i + 1\r\n  assert_equal(vGuidVal    , vGuidVal    :bind_param(stmt, i  )) i = i + 1\r\n\r\n  EXEC_AND_ASSERT(TEST_PROC_CALL)\r\n  VEXEC_AND_ASSERT(TEST_PROC_CALL)\r\n\r\n  stmt:prepare(TEST_PROC_CALL)\r\n\r\n  local i = 1\r\n  assert_equal(vIntVal     , vIntVal     :bind_param(stmt, i  )) i = i + 1\r\n  assert_equal(vUIntVal    , vUIntVal    :bind_param(stmt, i  )) i = i + 1\r\n  assert_equal(vDoubleVal  , vDoubleVal  :bind_param(stmt, i  )) i = i + 1\r\n  assert_equal(vStringVal  , vStringVal  :bind_param(stmt, i  )) i = i + 1\r\n  assert_equal(vBinaryVal  , vBinaryVal  :bind_param(stmt, i  )) i = i + 1\r\n  assert_equal(vDateVal    , vDateVal    :bind_param(stmt, i, odbc.PARAM_INPUT, odbc.DATE)) i = i + 1\r\n  assert_equal(vNullVal    , vNullVal    :bind_param(stmt, i  )) i = i + 1\r\n  if PROC_SUPPORT_DEFAULT then\r\n    assert_equal(vDefaultVal , vDefaultVal :bind_param(stmt, i  )) i = i + 1\r\n  end\r\n  assert_equal(vBoolVal    , vBoolVal    :bind_param(stmt, i  )) i = i + 1\r\n  assert_equal(vGuidVal    , vGuidVal    :bind_param(stmt, i  )) i = i + 1\r\n\r\n  EXEC_AND_ASSERT()\r\n  VEXEC_AND_ASSERT()\r\n\r\n  assert_true(stmt:destroy())\r\nend",
    "type": "function"
  }, {
    "id": 158,
    "text": "local vIntVal     = odbc.slong(-0x7FFFFFFF)",
    "type": "statement:localassign"
  }, {
    "id": 159,
    "text": "local vUIntVal    = odbc.ulong(0xFFFFFFFF)",
    "type": "statement:localassign"
  }, {
    "id": 160,
    "text": "local vDoubleVal  = odbc.double(1234.235664879123456)",
    "type": "statement:localassign"
  }, {
    "id": 161,
    "text": "local vStringVal  = odbc.char(\"Hello world\")",
    "type": "statement:localassign"
  }, {
    "id": 162,
    "text": "local vBinaryVal  = odbc.binary(\"\\000\\001\\002\\003\")",
    "type": "statement:localassign"
  }, {
    "id": 163,
    "text": "local vDateVal    = odbc.char(\"2011-01-01\")",
    "type": "statement:localassign"
  }, {
    "id": 164,
    "text": "local vNullVal    = odbc.utinyint()",
    "type": "statement:localassign"
  }, {
    "id": 165,
    "text": "local vDefaultVal = odbc.ulong(1234)",
    "type": "statement:localassign"
  }, {
    "id": 166,
    "text": "local vBoolVal    = odbc.bit(true)",
    "type": "statement:localassign"
  }, {
    "id": 167,
    "text": "local vGuidVal    = odbc.binary(x'B1BB49A2B4014413BEBB7ACD10399875')",
    "type": "statement:localassign"
  }, {
    "id": 168,
    "text": "assert_equal(vIntVal     , vIntVal     :bind_param(stmt, i  ))",
    "type": "statement:functioncall"
  }, {
    "id": 169,
    "text": "assert_equal(vUIntVal    , vUIntVal    :bind_param(stmt, i  ))",
    "type": "statement:functioncall"
  }, {
    "id": 170,
    "text": "assert_equal(vDoubleVal  , vDoubleVal  :bind_param(stmt, i  ))",
    "type": "statement:functioncall"
  }, {
    "id": 171,
    "text": "assert_equal(vStringVal  , vStringVal  :bind_param(stmt, i  ))",
    "type": "statement:functioncall"
  }, {
    "id": 172,
    "text": "assert_equal(vBinaryVal  , vBinaryVal  :bind_param(stmt, i  ))",
    "type": "statement:functioncall"
  }, {
    "id": 173,
    "text": "assert_equal(vDateVal    , vDateVal    :bind_param(stmt, i, odbc.PARAM_INPUT, odbc.DATE))",
    "type": "statement:functioncall"
  }, {
    "id": 174,
    "text": "assert_equal(vNullVal    , vNullVal    :bind_param(stmt, i  ))",
    "type": "statement:functioncall"
  }, {
    "id": 175,
    "text": "if PROC_SUPPORT_DEFAULT then\r\n    assert_equal(vDefaultVal , vDefaultVal :bind_param(stmt, i  )) i = i + 1\r\n  end",
    "type": "statement:if"
  }, {
    "id": 176,
    "text": "assert_equal(vDefaultVal , vDefaultVal :bind_param(stmt, i  ))",
    "type": "statement:functioncall"
  }, {
    "id": 177,
    "text": "assert_equal(vBoolVal    , vBoolVal    :bind_param(stmt, i  ))",
    "type": "statement:functioncall"
  }, {
    "id": 178,
    "text": "assert_equal(vGuidVal    , vGuidVal    :bind_param(stmt, i  ))",
    "type": "statement:functioncall"
  }, {
    "id": 179,
    "text": "VEXEC_AND_ASSERT(TEST_PROC_CALL)",
    "type": "statement:functioncall"
  }, {
    "id": 180,
    "text": "stmt:prepare(TEST_PROC_CALL)",
    "type": "statement:functioncall"
  }, {
    "id": 181,
    "text": "VEXEC_AND_ASSERT()",
    "type": "statement:functioncall"
  }, {
    "id": 182,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 183,
    "text": "function() lunit.skip(msg) end",
    "type": "function"
  }, {
    "id": 184,
    "text": "function(v)\r\n    return string.char( tonumber(v, 16) )\r\n  end",
    "type": "function"
  }, {
    "id": 185,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 186,
    "text": "function()\r\n    local data = str:sub(pos,pos+n-1)\r\n    pos = pos + n\r\n    return data\r\n  end",
    "type": "function"
  }, {
    "id": 187,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 188,
    "text": "",
    "type": "function container"
  }, {
    "id": 189,
    "text": "lunit",
    "type": "module"
  }, {
    "id": 190,
    "text": "skip",
    "type": "global function"
  }, {
    "id": 191,
    "text": "date",
    "type": "global function"
  }, {
    "id": 192,
    "text": "drop_proc",
    "type": "global function"
  }, {
    "id": 193,
    "text": "assert_table",
    "type": "global function"
  }, {
    "id": 194,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 195,
    "text": "assert_false",
    "type": "global function"
  }, {
    "id": 196,
    "text": "char",
    "type": "global function"
  }, {
    "id": 197,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 198,
    "text": "bit",
    "type": "global function"
  }, {
    "id": 199,
    "text": "TEST_CASE",
    "type": "global function"
  }, {
    "id": 200,
    "text": "do_connect",
    "type": "global function"
  }, {
    "id": 201,
    "text": "binary",
    "type": "global function"
  }, {
    "id": 202,
    "text": "ensure_proc",
    "type": "global function"
  }, {
    "id": 203,
    "text": "slong",
    "type": "global function"
  }, {
    "id": 204,
    "text": "proc_exists",
    "type": "global function"
  }, {
    "id": 205,
    "text": "assert_nil",
    "type": "global function"
  }, {
    "id": 206,
    "text": "double",
    "type": "global function"
  }, {
    "id": 207,
    "text": "char",
    "type": "global function"
  }, {
    "id": 208,
    "text": "skip",
    "type": "global function"
  }, {
    "id": 209,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 210,
    "text": "assert_boolean",
    "type": "global function"
  }, {
    "id": 211,
    "text": "assert_true",
    "type": "global function"
  }, {
    "id": 212,
    "text": "assert_string",
    "type": "global function"
  }, {
    "id": 213,
    "text": "ulong",
    "type": "global function"
  }, {
    "id": 214,
    "text": "utinyint",
    "type": "global function"
  }, {
    "id": 215,
    "text": "require",
    "type": "global function"
  }, {
    "id": 216,
    "text": "assert_equal",
    "type": "global function"
  }, {
    "id": 217,
    "text": "assert_not_nil",
    "type": "global function"
  }, {
    "id": 218,
    "text": "",
    "type": "global variable"
  }, {
    "id": 219,
    "text": "",
    "type": "variable container"
  }, {
    "id": 220,
    "text": "",
    "type": "require container"
  }, {
    "id": 221,
    "text": "",
    "type": "local variable"
  }, {
    "id": 222,
    "text": "",
    "type": "n/a"
  }, {
    "id": 223,
    "text": "",
    "type": "local variable"
  }, {
    "id": 224,
    "text": "",
    "type": "n/a"
  }, {
    "id": 225,
    "text": "",
    "type": "local variable"
  }, {
    "id": 226,
    "text": "",
    "type": "n/a"
  }, {
    "id": 227,
    "text": "",
    "type": "local variable"
  }, {
    "id": 228,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 229,
    "text": "",
    "type": "symbol"
  }, {
    "id": 230,
    "text": "",
    "type": "local variable"
  }, {
    "id": 231,
    "text": "",
    "type": "n/a"
  }, {
    "id": 232,
    "text": "",
    "type": "require local variable"
  } ]
}