{
  "_filename": "proxy.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-odbc/lua/odbc/proxy.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 3
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 3
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 12,
    "label": "has",
    "to": 3
  }, {
    "from": 10,
    "label": "has",
    "to": 18
  }, {
    "from": 10,
    "label": "has",
    "to": 3
  }, {
    "from": 10,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 3
  }, {
    "from": 21,
    "label": "has",
    "to": 3
  }, {
    "from": 22,
    "label": "has",
    "to": 3
  }, {
    "from": 23,
    "label": "has",
    "to": 3
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 3
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 24,
    "label": "has",
    "to": 3
  }, {
    "from": 24,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 3
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 30,
    "label": "has",
    "to": 34
  }, {
    "from": 30,
    "label": "has",
    "to": 3
  }, {
    "from": 30,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 26
  }, {
    "from": 36,
    "label": "has",
    "to": 3
  }, {
    "from": 36,
    "label": "has",
    "to": 27
  }, {
    "from": 36,
    "label": "has",
    "to": 28
  }, {
    "from": 36,
    "label": "has",
    "to": 3
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 3
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 3
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 42,
    "label": "has",
    "to": 46
  }, {
    "from": 42,
    "label": "has",
    "to": 3
  }, {
    "from": 42,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 40
  }, {
    "from": 48,
    "label": "has",
    "to": 3
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 32
  }, {
    "from": 50,
    "label": "has",
    "to": 3
  }, {
    "from": 50,
    "label": "has",
    "to": 3
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 53,
    "label": "has",
    "to": 3
  }, {
    "from": 53,
    "label": "has",
    "to": 56
  }, {
    "from": 53,
    "label": "has",
    "to": 3
  }, {
    "from": 53,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 55
  }, {
    "from": 58,
    "label": "has",
    "to": 3
  }, {
    "from": 58,
    "label": "has",
    "to": 56
  }, {
    "from": 58,
    "label": "has",
    "to": 3
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 37
  }, {
    "from": 61,
    "label": "has",
    "to": 26
  }, {
    "from": 61,
    "label": "has",
    "to": 3
  }, {
    "from": 61,
    "label": "has",
    "to": 3
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 40
  }, {
    "from": 63,
    "label": "has",
    "to": 3
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 55
  }, {
    "from": 65,
    "label": "has",
    "to": 3
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 65,
    "label": "has",
    "to": 3
  }, {
    "from": 65,
    "label": "has",
    "to": 3
  }, {
    "from": 65,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 13
  }, {
    "from": 69,
    "label": "has",
    "to": 14
  }, {
    "from": 69,
    "label": "has",
    "to": 3
  }, {
    "from": 69,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 3
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 69,
    "label": "has",
    "to": 3
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 53,
    "label": "calls",
    "to": 75
  }, {
    "from": 58,
    "label": "calls",
    "to": 75
  }, {
    "from": 2,
    "label": "calls",
    "to": 80
  }, {
    "from": 10,
    "label": "calls",
    "to": 80
  }, {
    "from": 71,
    "label": "calls",
    "to": 80
  }, {
    "from": 24,
    "label": "calls",
    "to": 80
  }, {
    "from": 30,
    "label": "calls",
    "to": 80
  }, {
    "from": 36,
    "label": "calls",
    "to": 80
  }, {
    "from": 42,
    "label": "calls",
    "to": 80
  }, {
    "from": 42,
    "label": "calls",
    "to": 83
  }, {
    "from": 71,
    "label": "calls",
    "to": 72
  }, {
    "from": 10,
    "label": "calls",
    "to": 76
  }, {
    "from": 58,
    "label": "calls",
    "to": 86
  }, {
    "from": 24,
    "label": "calls",
    "to": 7
  }, {
    "from": 30,
    "label": "calls",
    "to": 7
  }, {
    "from": 36,
    "label": "calls",
    "to": 7
  }, {
    "from": 39,
    "label": "calls",
    "to": 7
  }, {
    "from": 42,
    "label": "calls",
    "to": 7
  }, {
    "from": 48,
    "label": "calls",
    "to": 7
  }, {
    "from": 63,
    "label": "calls",
    "to": 7
  }, {
    "from": 71,
    "label": "calls",
    "to": 10
  }, {
    "from": 71,
    "label": "calls",
    "to": 10
  }, {
    "from": 71,
    "label": "calls",
    "to": 10
  }, {
    "from": 71,
    "label": "calls",
    "to": 74
  }, {
    "from": 36,
    "label": "calls",
    "to": 82
  }, {
    "from": 61,
    "label": "calls",
    "to": 82
  }, {
    "from": 10,
    "label": "calls",
    "to": 85
  }, {
    "from": 71,
    "label": "calls",
    "to": 73
  }, {
    "from": 39,
    "label": "calls",
    "to": 87
  }, {
    "from": 48,
    "label": "calls",
    "to": 87
  }, {
    "from": 63,
    "label": "calls",
    "to": 87
  }, {
    "from": 24,
    "label": "calls",
    "to": 84
  }, {
    "from": 65,
    "label": "calls",
    "to": 77
  }, {
    "from": 30,
    "label": "calls",
    "to": 81
  }, {
    "from": 50,
    "label": "calls",
    "to": 81
  }, {
    "from": 71,
    "label": "calls",
    "to": 2
  }, {
    "from": 10,
    "label": "calls",
    "to": 79
  }, {
    "from": 71,
    "label": "calls",
    "to": 88
  }, {
    "from": 53,
    "label": "calls",
    "to": 78
  }, {
    "from": 50,
    "label": "calls",
    "to": 5
  }, {
    "from": 61,
    "label": "calls",
    "to": 5
  }, {
    "from": 1,
    "label": "contains",
    "to": 71
  }, {
    "from": 71,
    "label": "declares",
    "to": 2
  }, {
    "from": 71,
    "label": "declares",
    "to": 5
  }, {
    "from": 71,
    "label": "declares",
    "to": 7
  }, {
    "from": 71,
    "label": "declares",
    "to": 10
  }, {
    "from": 71,
    "label": "declares",
    "to": 20
  }, {
    "from": 71,
    "label": "declares",
    "to": 21
  }, {
    "from": 71,
    "label": "declares",
    "to": 22
  }, {
    "from": 71,
    "label": "declares",
    "to": 23
  }, {
    "from": 71,
    "label": "declares",
    "to": 24
  }, {
    "from": 71,
    "label": "declares",
    "to": 30
  }, {
    "from": 71,
    "label": "declares",
    "to": 36
  }, {
    "from": 71,
    "label": "declares",
    "to": 39
  }, {
    "from": 71,
    "label": "declares",
    "to": 42
  }, {
    "from": 71,
    "label": "declares",
    "to": 48
  }, {
    "from": 71,
    "label": "declares",
    "to": 50
  }, {
    "from": 71,
    "label": "declares",
    "to": 53
  }, {
    "from": 71,
    "label": "declares",
    "to": 58
  }, {
    "from": 71,
    "label": "declares",
    "to": 61
  }, {
    "from": 71,
    "label": "declares",
    "to": 63
  }, {
    "from": 71,
    "label": "declares",
    "to": 65
  }, {
    "from": 71,
    "label": "declares",
    "to": 69
  }, {
    "from": 89,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 91
  }, {
    "from": 1,
    "label": "contains",
    "to": 92
  }, {
    "from": 91,
    "label": "initializes",
    "to": 93
  }, {
    "from": 93,
    "label": "assigns",
    "to": 94
  }, {
    "from": 91,
    "label": "initializes",
    "to": 95
  }, {
    "from": 95,
    "label": "assigns",
    "to": 96
  }, {
    "from": 91,
    "label": "initializes",
    "to": 97
  }, {
    "from": 97,
    "label": "assigns",
    "to": 98
  }, {
    "from": 91,
    "label": "initializes",
    "to": 99
  }, {
    "from": 99,
    "label": "assigns",
    "to": 100
  }, {
    "from": 91,
    "label": "initializes",
    "to": 101
  }, {
    "from": 101,
    "label": "assigns",
    "to": 102
  }, {
    "from": 91,
    "label": "initializes",
    "to": 103
  }, {
    "from": 103,
    "label": "assigns",
    "to": 104
  }, {
    "from": 91,
    "label": "initializes",
    "to": 105
  }, {
    "from": 105,
    "label": "assigns",
    "to": 106
  }, {
    "from": 91,
    "label": "initializes",
    "to": 107
  }, {
    "from": 107,
    "label": "assigns",
    "to": 108
  }, {
    "from": 91,
    "label": "initializes",
    "to": 109
  }, {
    "from": 109,
    "label": "assigns",
    "to": 110
  }, {
    "from": 91,
    "label": "initializes",
    "to": 111
  }, {
    "from": 111,
    "label": "assigns",
    "to": 112
  }, {
    "from": 91,
    "label": "initializes",
    "to": 113
  }, {
    "from": 113,
    "label": "assigns",
    "to": 114
  }, {
    "from": 91,
    "label": "initializes",
    "to": 115
  }, {
    "from": 115,
    "label": "assigns",
    "to": 116
  }, {
    "from": 91,
    "label": "initializes",
    "to": 117
  }, {
    "from": 117,
    "label": "assigns",
    "to": 118
  }, {
    "from": 91,
    "label": "initializes",
    "to": 119
  }, {
    "from": 119,
    "label": "assigns",
    "to": 120
  }, {
    "from": 91,
    "label": "initializes",
    "to": 121
  }, {
    "from": 121,
    "label": "assigns",
    "to": 122
  }, {
    "from": 91,
    "label": "initializes",
    "to": 123
  }, {
    "from": 123,
    "label": "assigns",
    "to": 124
  }, {
    "from": 91,
    "label": "initializes",
    "to": 125
  }, {
    "from": 125,
    "label": "assigns",
    "to": 126
  }, {
    "from": 91,
    "label": "initializes",
    "to": 127
  }, {
    "from": 127,
    "label": "assigns",
    "to": 128
  }, {
    "from": 92,
    "label": "initializes",
    "to": 129
  }, {
    "from": 129,
    "label": "requires",
    "to": 90
  }, {
    "from": 1,
    "label": "provides",
    "to": 130
  }, {
    "from": 103,
    "label": "represents",
    "to": 131
  }, {
    "from": 130,
    "label": "provides",
    "to": 131
  }, {
    "from": 12,
    "label": "hasArgument",
    "to": 20
  }, {
    "from": 12,
    "label": "hasArgument",
    "to": 69
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "proxy",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function make_cahe()\r\n  return setmeta({}, {__mode=\"k\"})\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "local function user_val(ud)\r\n  return USER_VALUES[ud]\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "local function set_user_val(ud, val)\r\n  USER_VALUES[ud] = val\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "USER_VALUES[ud] = val",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "local function make_proxy(t)\r\n  local proxy = {}\r\n  setmeta(proxy,{__index = function(self, key)\r\n    local fun = rawget(t, key)\r\n    if not fun then return nil end\r\n    if type(fun) == \"function\" then\r\n      proxy[key] = function(self, ...) return fun(self._self, ...) end\r\n    else \r\n      proxy[key] = fun\r\n    end\r\n    return proxy[key]\r\n  end})\r\n  proxy.__index = proxy\r\n  return proxy\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "local proxy = {}",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "setmeta(proxy,{__index = function(self, key)\r\n    local fun = rawget(t, key)\r\n    if not fun then return nil end\r\n    if type(fun) == \"function\" then\r\n      proxy[key] = function(self, ...) return fun(self._self, ...) end\r\n    else \r\n      proxy[key] = fun\r\n    end\r\n    return proxy[key]\r\n  end})",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "local fun = rawget(t, key)",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "if not fun then return nil end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "if type(fun) == \"function\" then\r\n      proxy[key] = function(self, ...) return fun(self._self, ...) end\r\n    else \r\n      proxy[key] = fun\r\n    end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "proxy[key] = function(self, ...) return fun(self._self, ...) end",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "proxy[key] = fun",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "proxy.__index = proxy",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function(self, ...) return fun(self._self, ...) end",
    "type": "function"
  }, {
    "id": 21,
    "text": "function _M.getenvmeta()  return Environment end",
    "type": "function"
  }, {
    "id": 22,
    "text": "function _M.getcnnmeta()  return Connection  end",
    "type": "function"
  }, {
    "id": 23,
    "text": "function _M.getstmtmeta() return Statement   end",
    "type": "function"
  }, {
    "id": 24,
    "text": "function _M.init_connection(...)\r\n  local cnn, err = init_connection(...)\r\n  if not cnn then return nil, err end\r\n  local obj = setmeta({_self=cnn}, Connection)\r\n  set_user_val(cnn, obj)\r\n  return obj\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "local cnn, err = init_connection(...)",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "if not cnn then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "local obj = setmeta({_self=cnn}, Connection)",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "set_user_val(cnn, obj)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function _M.environment(...)\r\n  local env, err = environment(...)\r\n  if not env then return nil, err end\r\n  local obj = setmeta({_self=env}, Environment)\r\n  set_user_val(env, obj)\r\n  return obj\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "local env, err = environment(...)",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "if not env then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "local obj = setmeta({_self=env}, Environment)",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "set_user_val(env, obj)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function Environment:connection(...)\r\n  local cnn, err = connection(self, ...)\r\n  if not cnn then return nil, err end\r\n  local obj = setmeta({_self=cnn}, Connection)\r\n  set_user_val(cnn, obj)\r\n  return obj\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "local cnn, err = connection(self, ...)",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function Environment:destroy(...)\r\n  set_user_val(self._self, nil)\r\n  return destroy(self, ...)\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "set_user_val(self._self, nil)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function Connection:statement(...)\r\n  local stmt, err = statement(self, ...)\r\n  if not stmt then return nil, err end\r\n  local obj = setmeta({_self=stmt}, Statement)\r\n  set_user_val(stmt, obj)\r\n  return obj\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "local stmt, err = statement(self, ...)",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "if not stmt then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "local obj = setmeta({_self=stmt}, Statement)",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "set_user_val(stmt, obj)",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function Connection:destroy(...)\r\n  set_user_val(self._self, nil)\r\n  return destroy(self, ...)\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function Connection:environment(...)\r\n  local env, err = environment(self, ...)\r\n  if not env then return nil, err end\r\n  return user_val(env)\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "local env, err = environment(self, ...)",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function Connection:connect(...)\r\n  local ok, err = connect(self, ...)\r\n  if not ok then return nil, err end\r\n  assert(ok == self._self)\r\n  return self\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "local ok, err = connect(self, ...)",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "if not ok then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "assert(ok == self._self)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function Connection:driverconnect(...)\r\n  local ok, err = driverconnect(self, ...)\r\n  if not ok then return nil, err end\r\n  assert(ok == self._self)\r\n  return self\r\nend",
    "type": "function"
  }, {
    "id": 59,
    "text": "local ok, err = driverconnect(self, ...)",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function Statement:connection(...)\r\n  local cnn, err = connection(self, ...)\r\n  if not cnn then return nil, err end\r\n  return user_val(cnn)\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function Statement:destroy(...)\r\n  set_user_val(self._self, nil)\r\n  return destroy(self, ...)\r\nend",
    "type": "function"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "function Statement:execute(...)\r\n  local ok, err = execute(self, ...)\r\n  if not ok then return nil, err end\r\n  if ok == self._self then return self end\r\n  return ok\r\nend",
    "type": "function"
  }, {
    "id": 66,
    "text": "local ok, err = execute(self, ...)",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "if ok == self._self then return self end",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function(self, key)\r\n    local fun = rawget(t, key)\r\n    if not fun then return nil end\r\n    if type(fun) == \"function\" then\r\n      proxy[key] = function(self, ...) return fun(self._self, ...) end\r\n    else \r\n      proxy[key] = fun\r\n    end\r\n    return proxy[key]\r\n  end",
    "type": "function"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "",
    "type": "function container"
  }, {
    "id": 72,
    "text": "getcnnmeta",
    "type": "global function"
  }, {
    "id": 73,
    "text": "getstmtmeta",
    "type": "global function"
  }, {
    "id": 74,
    "text": "getenvmeta",
    "type": "global function"
  }, {
    "id": 75,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 76,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 77,
    "text": "execute",
    "type": "global function"
  }, {
    "id": 78,
    "text": "connect",
    "type": "global function"
  }, {
    "id": 79,
    "text": "type",
    "type": "global function"
  }, {
    "id": 80,
    "text": "setmeta",
    "type": "global function"
  }, {
    "id": 81,
    "text": "environment",
    "type": "global function"
  }, {
    "id": 82,
    "text": "connection",
    "type": "global function"
  }, {
    "id": 83,
    "text": "statement",
    "type": "global function"
  }, {
    "id": 84,
    "text": "init_connection",
    "type": "global function"
  }, {
    "id": 85,
    "text": "fun",
    "type": "global function"
  }, {
    "id": 86,
    "text": "driverconnect",
    "type": "global function"
  }, {
    "id": 87,
    "text": "destroy",
    "type": "global function"
  }, {
    "id": 88,
    "text": "require",
    "type": "global function"
  }, {
    "id": 89,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 90,
    "text": "core",
    "type": "module"
  }, {
    "id": 91,
    "text": "",
    "type": "variable container"
  }, {
    "id": 92,
    "text": "",
    "type": "require container"
  }, {
    "id": 93,
    "text": "",
    "type": "local variable"
  }, {
    "id": 94,
    "text": "",
    "type": "n/a"
  }, {
    "id": 95,
    "text": "",
    "type": "local variable"
  }, {
    "id": 96,
    "text": "",
    "type": "n/a"
  }, {
    "id": 97,
    "text": "",
    "type": "local variable"
  }, {
    "id": 98,
    "text": "",
    "type": "n/a"
  }, {
    "id": 99,
    "text": "",
    "type": "local variable"
  }, {
    "id": 100,
    "text": "",
    "type": "n/a"
  }, {
    "id": 101,
    "text": "",
    "type": "local variable"
  }, {
    "id": 102,
    "text": "",
    "type": "n/a"
  }, {
    "id": 103,
    "text": "",
    "type": "local variable"
  }, {
    "id": 104,
    "text": "",
    "type": "n/a"
  }, {
    "id": 105,
    "text": "",
    "type": "local variable"
  }, {
    "id": 106,
    "text": "",
    "type": "n/a"
  }, {
    "id": 107,
    "text": "",
    "type": "local variable"
  }, {
    "id": 108,
    "text": "",
    "type": "n/a"
  }, {
    "id": 109,
    "text": "",
    "type": "local variable"
  }, {
    "id": 110,
    "text": "",
    "type": "n/a"
  }, {
    "id": 111,
    "text": "",
    "type": "local variable"
  }, {
    "id": 112,
    "text": "",
    "type": "n/a"
  }, {
    "id": 113,
    "text": "",
    "type": "local variable"
  }, {
    "id": 114,
    "text": "",
    "type": "n/a"
  }, {
    "id": 115,
    "text": "",
    "type": "local variable"
  }, {
    "id": 116,
    "text": "",
    "type": "n/a"
  }, {
    "id": 117,
    "text": "",
    "type": "local variable"
  }, {
    "id": 118,
    "text": "",
    "type": "n/a"
  }, {
    "id": 119,
    "text": "",
    "type": "local variable"
  }, {
    "id": 120,
    "text": "",
    "type": "n/a"
  }, {
    "id": 121,
    "text": "",
    "type": "local variable"
  }, {
    "id": 122,
    "text": "",
    "type": "n/a"
  }, {
    "id": 123,
    "text": "",
    "type": "local variable"
  }, {
    "id": 124,
    "text": "",
    "type": "n/a"
  }, {
    "id": 125,
    "text": "",
    "type": "local variable"
  }, {
    "id": 126,
    "text": "",
    "type": "n/a"
  }, {
    "id": 127,
    "text": "",
    "type": "local variable"
  }, {
    "id": 128,
    "text": "",
    "type": "n/a"
  }, {
    "id": 129,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 130,
    "text": "",
    "type": "interface container"
  }, {
    "id": 131,
    "text": "",
    "type": "interface"
  } ]
}