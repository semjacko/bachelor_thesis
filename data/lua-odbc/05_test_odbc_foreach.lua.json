{
  "_filename": "05_test_odbc_foreach.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-odbc/test/05_test_odbc_foreach.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 4
  }, {
    "from": 8,
    "label": "has",
    "to": 5
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 14
  }, {
    "from": 10,
    "label": "has",
    "to": 15
  }, {
    "from": 10,
    "label": "has",
    "to": 16
  }, {
    "from": 10,
    "label": "has",
    "to": 17
  }, {
    "from": 10,
    "label": "has",
    "to": 18
  }, {
    "from": 10,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 10,
    "label": "has",
    "to": 23
  }, {
    "from": 10,
    "label": "has",
    "to": 24
  }, {
    "from": 10,
    "label": "has",
    "to": 25
  }, {
    "from": 10,
    "label": "has",
    "to": 26
  }, {
    "from": 10,
    "label": "has",
    "to": 27
  }, {
    "from": 10,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 33,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 33,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 33,
    "label": "has",
    "to": 42
  }, {
    "from": 33,
    "label": "has",
    "to": 43
  }, {
    "from": 33,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 49,
    "label": "has",
    "to": 53
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 54
  }, {
    "from": 49,
    "label": "has",
    "to": 55
  }, {
    "from": 49,
    "label": "has",
    "to": 56
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 58,
    "label": "has",
    "to": 61
  }, {
    "from": 58,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 55
  }, {
    "from": 58,
    "label": "has",
    "to": 63
  }, {
    "from": 58,
    "label": "has",
    "to": 64
  }, {
    "from": 58,
    "label": "has",
    "to": 65
  }, {
    "from": 58,
    "label": "has",
    "to": 51
  }, {
    "from": 58,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 51
  }, {
    "from": 67,
    "label": "has",
    "to": 51
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 51
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 51
  }, {
    "from": 69,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 69,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 76,
    "label": "has",
    "to": 79
  }, {
    "from": 76,
    "label": "has",
    "to": 65
  }, {
    "from": 76,
    "label": "has",
    "to": 80
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 76,
    "label": "has",
    "to": 81
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 76,
    "label": "has",
    "to": 81
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 76,
    "label": "has",
    "to": 82
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 76,
    "label": "has",
    "to": 83
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 76,
    "label": "has",
    "to": 84
  }, {
    "from": 76,
    "label": "has",
    "to": 65
  }, {
    "from": 76,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 76,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 76,
    "label": "has",
    "to": 89
  }, {
    "from": 76,
    "label": "has",
    "to": 90
  }, {
    "from": 69,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 91,
    "label": "has",
    "to": 94
  }, {
    "from": 91,
    "label": "has",
    "to": 95
  }, {
    "from": 91,
    "label": "has",
    "to": 65
  }, {
    "from": 91,
    "label": "has",
    "to": 80
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 91,
    "label": "has",
    "to": 96
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 91,
    "label": "has",
    "to": 96
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 91,
    "label": "has",
    "to": 97
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 91,
    "label": "has",
    "to": 98
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 91,
    "label": "has",
    "to": 99
  }, {
    "from": 91,
    "label": "has",
    "to": 95
  }, {
    "from": 91,
    "label": "has",
    "to": 65
  }, {
    "from": 91,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 91,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 91,
    "label": "has",
    "to": 95
  }, {
    "from": 91,
    "label": "has",
    "to": 65
  }, {
    "from": 91,
    "label": "has",
    "to": 90
  }, {
    "from": 69,
    "label": "has",
    "to": 104
  }, {
    "from": 69,
    "label": "has",
    "to": 15
  }, {
    "from": 69,
    "label": "has",
    "to": 105
  }, {
    "from": 69,
    "label": "has",
    "to": 106
  }, {
    "from": 69,
    "label": "has",
    "to": 107
  }, {
    "from": 69,
    "label": "has",
    "to": 108
  }, {
    "from": 69,
    "label": "has",
    "to": 109
  }, {
    "from": 69,
    "label": "has",
    "to": 110
  }, {
    "from": 69,
    "label": "has",
    "to": 111
  }, {
    "from": 112,
    "label": "has",
    "to": 71
  }, {
    "from": 112,
    "label": "has",
    "to": 51
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 114,
    "label": "has",
    "to": 73
  }, {
    "from": 114,
    "label": "has",
    "to": 51
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 116,
    "label": "has",
    "to": 75
  }, {
    "from": 117,
    "label": "has",
    "to": 77
  }, {
    "from": 117,
    "label": "has",
    "to": 78
  }, {
    "from": 117,
    "label": "has",
    "to": 79
  }, {
    "from": 117,
    "label": "has",
    "to": 65
  }, {
    "from": 117,
    "label": "has",
    "to": 80
  }, {
    "from": 117,
    "label": "has",
    "to": 78
  }, {
    "from": 117,
    "label": "has",
    "to": 81
  }, {
    "from": 117,
    "label": "has",
    "to": 78
  }, {
    "from": 117,
    "label": "has",
    "to": 81
  }, {
    "from": 117,
    "label": "has",
    "to": 78
  }, {
    "from": 117,
    "label": "has",
    "to": 82
  }, {
    "from": 117,
    "label": "has",
    "to": 78
  }, {
    "from": 117,
    "label": "has",
    "to": 83
  }, {
    "from": 117,
    "label": "has",
    "to": 78
  }, {
    "from": 117,
    "label": "has",
    "to": 84
  }, {
    "from": 117,
    "label": "has",
    "to": 65
  }, {
    "from": 117,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 117,
    "label": "has",
    "to": 78
  }, {
    "from": 117,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 117,
    "label": "has",
    "to": 89
  }, {
    "from": 117,
    "label": "has",
    "to": 90
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 119,
    "label": "has",
    "to": 92
  }, {
    "from": 119,
    "label": "has",
    "to": 93
  }, {
    "from": 119,
    "label": "has",
    "to": 94
  }, {
    "from": 119,
    "label": "has",
    "to": 95
  }, {
    "from": 119,
    "label": "has",
    "to": 65
  }, {
    "from": 119,
    "label": "has",
    "to": 80
  }, {
    "from": 119,
    "label": "has",
    "to": 93
  }, {
    "from": 119,
    "label": "has",
    "to": 96
  }, {
    "from": 119,
    "label": "has",
    "to": 93
  }, {
    "from": 119,
    "label": "has",
    "to": 96
  }, {
    "from": 119,
    "label": "has",
    "to": 93
  }, {
    "from": 119,
    "label": "has",
    "to": 97
  }, {
    "from": 119,
    "label": "has",
    "to": 93
  }, {
    "from": 119,
    "label": "has",
    "to": 98
  }, {
    "from": 119,
    "label": "has",
    "to": 93
  }, {
    "from": 119,
    "label": "has",
    "to": 99
  }, {
    "from": 119,
    "label": "has",
    "to": 95
  }, {
    "from": 119,
    "label": "has",
    "to": 65
  }, {
    "from": 119,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 119,
    "label": "has",
    "to": 93
  }, {
    "from": 119,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 119,
    "label": "has",
    "to": 95
  }, {
    "from": 119,
    "label": "has",
    "to": 65
  }, {
    "from": 119,
    "label": "has",
    "to": 90
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 121,
    "label": "has",
    "to": 104
  }, {
    "from": 121,
    "label": "has",
    "to": 15
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 121,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 121,
    "label": "has",
    "to": 125
  }, {
    "from": 121,
    "label": "has",
    "to": 126
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 126,
    "label": "has",
    "to": 128
  }, {
    "from": 126,
    "label": "has",
    "to": 129
  }, {
    "from": 121,
    "label": "has",
    "to": 130
  }, {
    "from": 121,
    "label": "has",
    "to": 22
  }, {
    "from": 121,
    "label": "has",
    "to": 131
  }, {
    "from": 121,
    "label": "has",
    "to": 109
  }, {
    "from": 121,
    "label": "has",
    "to": 110
  }, {
    "from": 121,
    "label": "has",
    "to": 132
  }, {
    "from": 133,
    "label": "has",
    "to": 104
  }, {
    "from": 133,
    "label": "has",
    "to": 15
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 134,
    "label": "has",
    "to": 51
  }, {
    "from": 133,
    "label": "has",
    "to": 22
  }, {
    "from": 133,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 136,
    "label": "has",
    "to": 51
  }, {
    "from": 133,
    "label": "has",
    "to": 22
  }, {
    "from": 133,
    "label": "has",
    "to": 109
  }, {
    "from": 133,
    "label": "has",
    "to": 110
  }, {
    "from": 133,
    "label": "has",
    "to": 138
  }, {
    "from": 139,
    "label": "has",
    "to": 104
  }, {
    "from": 139,
    "label": "has",
    "to": 15
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 141,
    "label": "has",
    "to": 75
  }, {
    "from": 139,
    "label": "has",
    "to": 22
  }, {
    "from": 139,
    "label": "has",
    "to": 109
  }, {
    "from": 139,
    "label": "has",
    "to": 110
  }, {
    "from": 139,
    "label": "has",
    "to": 142
  }, {
    "from": 143,
    "label": "has",
    "to": 60
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 143,
    "label": "has",
    "to": 145
  }, {
    "from": 143,
    "label": "has",
    "to": 146
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 143,
    "label": "has",
    "to": 95
  }, {
    "from": 143,
    "label": "has",
    "to": 148
  }, {
    "from": 143,
    "label": "has",
    "to": 90
  }, {
    "from": 143,
    "label": "has",
    "to": 149
  }, {
    "from": 143,
    "label": "has",
    "to": 150
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 143,
    "label": "has",
    "to": 104
  }, {
    "from": 143,
    "label": "has",
    "to": 60
  }, {
    "from": 143,
    "label": "has",
    "to": 152
  }, {
    "from": 143,
    "label": "has",
    "to": 153
  }, {
    "from": 143,
    "label": "has",
    "to": 154
  }, {
    "from": 143,
    "label": "has",
    "to": 155
  }, {
    "from": 143,
    "label": "has",
    "to": 156
  }, {
    "from": 143,
    "label": "has",
    "to": 157
  }, {
    "from": 143,
    "label": "has",
    "to": 154
  }, {
    "from": 143,
    "label": "has",
    "to": 155
  }, {
    "from": 143,
    "label": "has",
    "to": 158
  }, {
    "from": 143,
    "label": "has",
    "to": 155
  }, {
    "from": 143,
    "label": "has",
    "to": 158
  }, {
    "from": 143,
    "label": "has",
    "to": 159
  }, {
    "from": 143,
    "label": "has",
    "to": 109
  }, {
    "from": 143,
    "label": "has",
    "to": 110
  }, {
    "from": 143,
    "label": "has",
    "to": 160
  }, {
    "from": 161,
    "label": "has",
    "to": 51
  }, {
    "from": 162,
    "label": "has",
    "to": 86
  }, {
    "from": 163,
    "label": "has",
    "to": 88
  }, {
    "from": 164,
    "label": "has",
    "to": 101
  }, {
    "from": 165,
    "label": "has",
    "to": 103
  }, {
    "from": 166,
    "label": "has",
    "to": 124
  }, {
    "from": 167,
    "label": "has",
    "to": 127
  }, {
    "from": 167,
    "label": "has",
    "to": 128
  }, {
    "from": 167,
    "label": "has",
    "to": 129
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 169,
    "label": "has",
    "to": 135
  }, {
    "from": 169,
    "label": "has",
    "to": 51
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 171,
    "label": "has",
    "to": 137
  }, {
    "from": 171,
    "label": "has",
    "to": 51
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 173,
    "label": "has",
    "to": 75
  }, {
    "from": 174,
    "label": "has",
    "to": 141
  }, {
    "from": 141,
    "label": "has",
    "to": 75
  }, {
    "from": 175,
    "label": "has",
    "to": 147
  }, {
    "from": 176,
    "label": "has",
    "to": 151
  }, {
    "from": 112,
    "label": "calls",
    "to": 179
  }, {
    "from": 10,
    "label": "calls",
    "to": 191
  }, {
    "from": 29,
    "label": "calls",
    "to": 181
  }, {
    "from": 58,
    "label": "calls",
    "to": 181
  }, {
    "from": 117,
    "label": "calls",
    "to": 181
  }, {
    "from": 117,
    "label": "calls",
    "to": 181
  }, {
    "from": 117,
    "label": "calls",
    "to": 181
  }, {
    "from": 119,
    "label": "calls",
    "to": 181
  }, {
    "from": 119,
    "label": "calls",
    "to": 181
  }, {
    "from": 119,
    "label": "calls",
    "to": 181
  }, {
    "from": 119,
    "label": "calls",
    "to": 181
  }, {
    "from": 119,
    "label": "calls",
    "to": 181
  }, {
    "from": 119,
    "label": "calls",
    "to": 181
  }, {
    "from": 143,
    "label": "calls",
    "to": 181
  }, {
    "from": 143,
    "label": "calls",
    "to": 181
  }, {
    "from": 3,
    "label": "calls",
    "to": 200
  }, {
    "from": 3,
    "label": "calls",
    "to": 200
  }, {
    "from": 3,
    "label": "calls",
    "to": 200
  }, {
    "from": 8,
    "label": "calls",
    "to": 200
  }, {
    "from": 8,
    "label": "calls",
    "to": 200
  }, {
    "from": 10,
    "label": "calls",
    "to": 200
  }, {
    "from": 10,
    "label": "calls",
    "to": 200
  }, {
    "from": 10,
    "label": "calls",
    "to": 200
  }, {
    "from": 10,
    "label": "calls",
    "to": 200
  }, {
    "from": 29,
    "label": "calls",
    "to": 200
  }, {
    "from": 58,
    "label": "calls",
    "to": 200
  }, {
    "from": 121,
    "label": "calls",
    "to": 200
  }, {
    "from": 121,
    "label": "calls",
    "to": 200
  }, {
    "from": 143,
    "label": "calls",
    "to": 200
  }, {
    "from": 143,
    "label": "calls",
    "to": 200
  }, {
    "from": 143,
    "label": "calls",
    "to": 200
  }, {
    "from": 143,
    "label": "calls",
    "to": 200
  }, {
    "from": 143,
    "label": "calls",
    "to": 200
  }, {
    "from": 143,
    "label": "calls",
    "to": 200
  }, {
    "from": 143,
    "label": "calls",
    "to": 200
  }, {
    "from": 121,
    "label": "calls",
    "to": 182
  }, {
    "from": 67,
    "label": "calls",
    "to": 183
  }, {
    "from": 29,
    "label": "calls",
    "to": 184
  }, {
    "from": 33,
    "label": "calls",
    "to": 184
  }, {
    "from": 121,
    "label": "calls",
    "to": 185
  }, {
    "from": 133,
    "label": "calls",
    "to": 185
  }, {
    "from": 133,
    "label": "calls",
    "to": 185
  }, {
    "from": 143,
    "label": "calls",
    "to": 49
  }, {
    "from": 143,
    "label": "calls",
    "to": 49
  }, {
    "from": 69,
    "label": "calls",
    "to": 117
  }, {
    "from": 69,
    "label": "calls",
    "to": 117
  }, {
    "from": 177,
    "label": "calls",
    "to": 2
  }, {
    "from": 10,
    "label": "calls",
    "to": 189
  }, {
    "from": 10,
    "label": "calls",
    "to": 189
  }, {
    "from": 29,
    "label": "calls",
    "to": 189
  }, {
    "from": 133,
    "label": "calls",
    "to": 3
  }, {
    "from": 10,
    "label": "calls",
    "to": 192
  }, {
    "from": 10,
    "label": "calls",
    "to": 192
  }, {
    "from": 10,
    "label": "calls",
    "to": 192
  }, {
    "from": 10,
    "label": "calls",
    "to": 192
  }, {
    "from": 10,
    "label": "calls",
    "to": 192
  }, {
    "from": 10,
    "label": "calls",
    "to": 192
  }, {
    "from": 10,
    "label": "calls",
    "to": 192
  }, {
    "from": 10,
    "label": "calls",
    "to": 192
  }, {
    "from": 117,
    "label": "calls",
    "to": 192
  }, {
    "from": 117,
    "label": "calls",
    "to": 192
  }, {
    "from": 117,
    "label": "calls",
    "to": 192
  }, {
    "from": 117,
    "label": "calls",
    "to": 192
  }, {
    "from": 117,
    "label": "calls",
    "to": 192
  }, {
    "from": 117,
    "label": "calls",
    "to": 192
  }, {
    "from": 117,
    "label": "calls",
    "to": 192
  }, {
    "from": 117,
    "label": "calls",
    "to": 192
  }, {
    "from": 119,
    "label": "calls",
    "to": 192
  }, {
    "from": 119,
    "label": "calls",
    "to": 192
  }, {
    "from": 119,
    "label": "calls",
    "to": 192
  }, {
    "from": 119,
    "label": "calls",
    "to": 192
  }, {
    "from": 119,
    "label": "calls",
    "to": 192
  }, {
    "from": 119,
    "label": "calls",
    "to": 192
  }, {
    "from": 119,
    "label": "calls",
    "to": 192
  }, {
    "from": 119,
    "label": "calls",
    "to": 192
  }, {
    "from": 69,
    "label": "calls",
    "to": 192
  }, {
    "from": 121,
    "label": "calls",
    "to": 192
  }, {
    "from": 121,
    "label": "calls",
    "to": 192
  }, {
    "from": 133,
    "label": "calls",
    "to": 192
  }, {
    "from": 133,
    "label": "calls",
    "to": 192
  }, {
    "from": 133,
    "label": "calls",
    "to": 192
  }, {
    "from": 139,
    "label": "calls",
    "to": 192
  }, {
    "from": 139,
    "label": "calls",
    "to": 192
  }, {
    "from": 143,
    "label": "calls",
    "to": 192
  }, {
    "from": 143,
    "label": "calls",
    "to": 192
  }, {
    "from": 143,
    "label": "calls",
    "to": 192
  }, {
    "from": 143,
    "label": "calls",
    "to": 192
  }, {
    "from": 143,
    "label": "calls",
    "to": 192
  }, {
    "from": 121,
    "label": "calls",
    "to": 187
  }, {
    "from": 10,
    "label": "calls",
    "to": 193
  }, {
    "from": 116,
    "label": "calls",
    "to": 195
  }, {
    "from": 139,
    "label": "calls",
    "to": 195
  }, {
    "from": 10,
    "label": "calls",
    "to": 196
  }, {
    "from": 69,
    "label": "calls",
    "to": 67
  }, {
    "from": 69,
    "label": "calls",
    "to": 67
  }, {
    "from": 69,
    "label": "calls",
    "to": 67
  }, {
    "from": 69,
    "label": "calls",
    "to": 67
  }, {
    "from": 117,
    "label": "calls",
    "to": 58
  }, {
    "from": 117,
    "label": "calls",
    "to": 58
  }, {
    "from": 117,
    "label": "calls",
    "to": 58
  }, {
    "from": 117,
    "label": "calls",
    "to": 58
  }, {
    "from": 117,
    "label": "calls",
    "to": 58
  }, {
    "from": 117,
    "label": "calls",
    "to": 58
  }, {
    "from": 117,
    "label": "calls",
    "to": 58
  }, {
    "from": 117,
    "label": "calls",
    "to": 58
  }, {
    "from": 117,
    "label": "calls",
    "to": 58
  }, {
    "from": 119,
    "label": "calls",
    "to": 58
  }, {
    "from": 119,
    "label": "calls",
    "to": 58
  }, {
    "from": 119,
    "label": "calls",
    "to": 58
  }, {
    "from": 119,
    "label": "calls",
    "to": 58
  }, {
    "from": 119,
    "label": "calls",
    "to": 58
  }, {
    "from": 119,
    "label": "calls",
    "to": 58
  }, {
    "from": 119,
    "label": "calls",
    "to": 58
  }, {
    "from": 119,
    "label": "calls",
    "to": 58
  }, {
    "from": 119,
    "label": "calls",
    "to": 58
  }, {
    "from": 121,
    "label": "calls",
    "to": 58
  }, {
    "from": 133,
    "label": "calls",
    "to": 58
  }, {
    "from": 133,
    "label": "calls",
    "to": 58
  }, {
    "from": 139,
    "label": "calls",
    "to": 58
  }, {
    "from": 69,
    "label": "calls",
    "to": 29
  }, {
    "from": 121,
    "label": "calls",
    "to": 29
  }, {
    "from": 133,
    "label": "calls",
    "to": 29
  }, {
    "from": 139,
    "label": "calls",
    "to": 29
  }, {
    "from": 143,
    "label": "calls",
    "to": 29
  }, {
    "from": 10,
    "label": "calls",
    "to": 180
  }, {
    "from": 69,
    "label": "calls",
    "to": 180
  }, {
    "from": 121,
    "label": "calls",
    "to": 180
  }, {
    "from": 133,
    "label": "calls",
    "to": 180
  }, {
    "from": 139,
    "label": "calls",
    "to": 180
  }, {
    "from": 69,
    "label": "calls",
    "to": 119
  }, {
    "from": 69,
    "label": "calls",
    "to": 119
  }, {
    "from": 121,
    "label": "calls",
    "to": 197
  }, {
    "from": 139,
    "label": "calls",
    "to": 197
  }, {
    "from": 143,
    "label": "calls",
    "to": 197
  }, {
    "from": 143,
    "label": "calls",
    "to": 197
  }, {
    "from": 117,
    "label": "calls",
    "to": 190
  }, {
    "from": 117,
    "label": "calls",
    "to": 190
  }, {
    "from": 119,
    "label": "calls",
    "to": 190
  }, {
    "from": 119,
    "label": "calls",
    "to": 190
  }, {
    "from": 67,
    "label": "calls",
    "to": 198
  }, {
    "from": 45,
    "label": "calls",
    "to": 188
  }, {
    "from": 69,
    "label": "calls",
    "to": 10
  }, {
    "from": 121,
    "label": "calls",
    "to": 10
  }, {
    "from": 133,
    "label": "calls",
    "to": 10
  }, {
    "from": 139,
    "label": "calls",
    "to": 10
  }, {
    "from": 143,
    "label": "calls",
    "to": 10
  }, {
    "from": 114,
    "label": "calls",
    "to": 194
  }, {
    "from": 45,
    "label": "calls",
    "to": 201
  }, {
    "from": 177,
    "label": "calls",
    "to": 199
  }, {
    "from": 177,
    "label": "calls",
    "to": 199
  }, {
    "from": 177,
    "label": "calls",
    "to": 199
  }, {
    "from": 177,
    "label": "calls",
    "to": 186
  }, {
    "from": 133,
    "label": "calls",
    "to": 8
  }, {
    "from": 1,
    "label": "contains",
    "to": 177
  }, {
    "from": 177,
    "label": "declares",
    "to": 2
  }, {
    "from": 177,
    "label": "declares",
    "to": 3
  }, {
    "from": 177,
    "label": "declares",
    "to": 8
  }, {
    "from": 177,
    "label": "declares",
    "to": 10
  }, {
    "from": 177,
    "label": "declares",
    "to": 29
  }, {
    "from": 177,
    "label": "declares",
    "to": 33
  }, {
    "from": 177,
    "label": "declares",
    "to": 45
  }, {
    "from": 177,
    "label": "declares",
    "to": 49
  }, {
    "from": 177,
    "label": "declares",
    "to": 58
  }, {
    "from": 177,
    "label": "declares",
    "to": 67
  }, {
    "from": 177,
    "label": "declares",
    "to": 69
  }, {
    "from": 177,
    "label": "declares",
    "to": 112
  }, {
    "from": 177,
    "label": "declares",
    "to": 114
  }, {
    "from": 177,
    "label": "declares",
    "to": 116
  }, {
    "from": 177,
    "label": "declares",
    "to": 117
  }, {
    "from": 177,
    "label": "declares",
    "to": 119
  }, {
    "from": 177,
    "label": "declares",
    "to": 121
  }, {
    "from": 177,
    "label": "declares",
    "to": 133
  }, {
    "from": 177,
    "label": "declares",
    "to": 139
  }, {
    "from": 177,
    "label": "declares",
    "to": 143
  }, {
    "from": 177,
    "label": "declares",
    "to": 161
  }, {
    "from": 177,
    "label": "declares",
    "to": 162
  }, {
    "from": 177,
    "label": "declares",
    "to": 163
  }, {
    "from": 177,
    "label": "declares",
    "to": 164
  }, {
    "from": 177,
    "label": "declares",
    "to": 165
  }, {
    "from": 177,
    "label": "declares",
    "to": 166
  }, {
    "from": 177,
    "label": "declares",
    "to": 167
  }, {
    "from": 177,
    "label": "declares",
    "to": 169
  }, {
    "from": 177,
    "label": "declares",
    "to": 171
  }, {
    "from": 177,
    "label": "declares",
    "to": 173
  }, {
    "from": 177,
    "label": "declares",
    "to": 174
  }, {
    "from": 177,
    "label": "declares",
    "to": 175
  }, {
    "from": 177,
    "label": "declares",
    "to": 176
  }, {
    "from": 1,
    "label": "contains",
    "to": 203
  }, {
    "from": 1,
    "label": "contains",
    "to": 204
  }, {
    "from": 203,
    "label": "initializes",
    "to": 205
  }, {
    "from": 205,
    "label": "assigns",
    "to": 206
  }, {
    "from": 203,
    "label": "initializes",
    "to": 207
  }, {
    "from": 207,
    "label": "assigns",
    "to": 208
  }, {
    "from": 208,
    "label": "assigns",
    "to": 209
  }, {
    "from": 203,
    "label": "initializes",
    "to": 210
  }, {
    "from": 210,
    "label": "assigns",
    "to": 211
  }, {
    "from": 203,
    "label": "initializes",
    "to": 212
  }, {
    "from": 212,
    "label": "assigns",
    "to": 213
  }, {
    "from": 203,
    "label": "initializes",
    "to": 214
  }, {
    "from": 203,
    "label": "initializes",
    "to": 215
  }, {
    "from": 203,
    "label": "initializes",
    "to": 216
  }, {
    "from": 203,
    "label": "initializes",
    "to": 217
  }, {
    "from": 217,
    "label": "assigns",
    "to": 218
  }, {
    "from": 204,
    "label": "initializes",
    "to": 219
  }, {
    "from": 219,
    "label": "requires",
    "to": 178
  }, {
    "from": 204,
    "label": "initializes",
    "to": 202
  }, {
    "from": 204,
    "label": "initializes",
    "to": 202
  }, {
    "from": 202,
    "label": "requires",
    "to": 1
  }, {
    "from": 85,
    "label": "hasArgument",
    "to": 162
  }, {
    "from": 87,
    "label": "hasArgument",
    "to": 163
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 164
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 165
  }, {
    "from": 123,
    "label": "hasArgument",
    "to": 166
  }, {
    "from": 134,
    "label": "hasArgument",
    "to": 169
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 171
  }, {
    "from": 140,
    "label": "hasArgument",
    "to": 173
  }, {
    "from": 140,
    "label": "hasArgument",
    "to": 174
  }, {
    "from": 141,
    "label": "hasArgument",
    "to": 173
  }, {
    "from": 146,
    "label": "hasArgument",
    "to": 175
  }, {
    "from": 150,
    "label": "hasArgument",
    "to": 176
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "05_test_odbc_foreach",
    "type": "module"
  }, {
    "id": 2,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 3,
    "text": "local function assert_equal3(a,b,c, ra,rb,rc)\r\n  assert_equal(a,ra)\r\n  assert_equal(b,rb)\r\n  assert_equal(c,rc)\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "assert_equal(a,ra)",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "assert_equal(b,rb)",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "assert_equal(c,rc)",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "local function assert_equal2(a,b, ra,rb)\r\n  assert_equal(a,ra)\r\n  assert_equal(b,rb)\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "local function init_table()\r\n  local val = odbc.ulong()\r\n  assert_boolean(table_exists(cnn))\r\n  assert_equal(CREATE_TABLE_RETURN_VALUE, ensure_table(cnn))\r\n  assert_true(table_exists(cnn))\r\n  stmt = assert(cnn:statement())\r\n  assert_true(cnn:setautocommit(false))\r\n  assert_true(stmt:prepare(\"insert into \" .. TEST_TABLE_NAME .. \"(f1) values(?)\"))\r\n  assert_equal(val, val:bind_param(stmt,1))\r\n  for i = 1, TEST_ROWS do\r\n    val:set(i)\r\n    assert_equal(1, stmt:execute())\r\n    assert_true(stmt:closed())\r\n  end\r\n  assert_true( cnn:commit()   )\r\n  assert_true( stmt:reset()   )\r\n  assert_true(cnn:setautocommit(true))\r\n  assert_equal(TEST_ROWS, stmt:execute(\"select count(*) from \" .. TEST_TABLE_NAME):fetch() )\r\n  assert_true( stmt:destroy() )\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "local val = odbc.ulong()",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "assert_boolean(table_exists(cnn))",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "assert_equal(CREATE_TABLE_RETURN_VALUE, ensure_table(cnn))",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "assert_true(table_exists(cnn))",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "stmt = assert(cnn:statement())",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "assert_true(cnn:setautocommit(false))",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "assert_true(stmt:prepare(\"insert into \" .. TEST_TABLE_NAME .. \"(f1) values(?)\"))",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "assert_equal(val, val:bind_param(stmt,1))",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "for i = 1, TEST_ROWS do\r\n    val:set(i)\r\n    assert_equal(1, stmt:execute())\r\n    assert_true(stmt:closed())\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 20,
    "text": "val:set(i)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "assert_equal(1, stmt:execute())",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "assert_true(stmt:closed())",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "assert_true( cnn:commit()   )",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "assert_true( stmt:reset()   )",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "assert_true(cnn:setautocommit(true))",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "assert_equal(TEST_ROWS, stmt:execute(\"select count(*) from \" .. TEST_TABLE_NAME):fetch() )",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "assert_true( stmt:destroy() )",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "local function fin_table()\r\n  assert_equal(DROP_TABLE_RETURN_VALUE, drop_table(cnn))\r\n  assert_false(table_exists(cnn))\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "assert_equal(DROP_TABLE_RETURN_VALUE, drop_table(cnn))",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "assert_false(table_exists(cnn))",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function teardown()\r\n  if cnn and cnn:connected() then drop_table(cnn) end\r\n  if stmt then stmt:destroy() end\r\n  if cnn then cnn:destroy() end\r\n  if env then env:destroy() end\r\n  cnn = nil\r\n  env = nil\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "if cnn and cnn:connected() then drop_table(cnn) end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "drop_table(cnn)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "if stmt then stmt:destroy() end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "stmt:destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "if cnn then cnn:destroy() end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "cnn:destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "if env then env:destroy() end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "env:destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "cnn = nil",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "env = nil",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function setup()\r\n  env, cnn = do_connect()\r\n  assert_not_nil(env, cnn)\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "env, cnn = do_connect()",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "assert_not_nil(env, cnn)",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "local function count_rows()\r\n  if UPDATE_RETURN_ROWS then\r\n    return stmt:execute('update ' .. TEST_TABLE_NAME .. ' set f1=f1')\r\n  end\r\n  local n,err = stmt:execute('select count(*) from '.. TEST_TABLE_NAME)\r\n  if not n then return n, err end\r\n  n, err = stmt:fetch()\r\n  stmt:close()\r\n  if n then return n end\r\n  return n, err\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "if UPDATE_RETURN_ROWS then\r\n    return stmt:execute('update ' .. TEST_TABLE_NAME .. ' set f1=f1')\r\n  end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 52,
    "text": "local n,err = stmt:execute('select count(*) from '.. TEST_TABLE_NAME)",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "if not n then return n, err end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "n, err = stmt:fetch()",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "stmt:close()",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "if n then return n end",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "local function open_stmt(autodestroy)\r\n  if stmt:destroyed() then stmt = cnn:statement() end\r\n  stmt:setdestroyonclose(false)\r\n  if not stmt:closed() then stmt:close() end\r\n  stmt:setdestroyonclose(autodestroy)\r\n\r\n  assert_equal(stmt, stmt:execute(sql))\r\n  assert_false(stmt:closed())\r\n  return stmt\r\nend",
    "type": "function"
  }, {
    "id": 59,
    "text": "if stmt:destroyed() then stmt = cnn:statement() end",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "stmt = cnn:statement()",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "stmt:setdestroyonclose(false)",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "if not stmt:closed() then stmt:close() end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "stmt:setdestroyonclose(autodestroy)",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "assert_equal(stmt, stmt:execute(sql))",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "assert_false(stmt:closed())",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "local function make_fn(fn)\r\n  return setmetatable({},{__call = function(self, ...) return fn(...) end})\r\nend",
    "type": "function"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function test_call()\r\n  local function assert_table_(v) \r\n    assert_table(v)\r\n    return 1\r\n  end\r\n\r\n  local function assert_string_(v) \r\n    assert_string(v)\r\n    return 1\r\n  end\r\n\r\n  local function rise_error() error('some error') end\r\n\r\n  local function inner_test (assert_table_, assert_string_)\r\n\r\n    open_stmt():foreach(assert_string_)             assert_true (stmt:closed())\r\n\r\n    open_stmt():foreach(false, assert_string_)      assert_false(stmt:closed())\r\n    stmt:foreach(nil, assert_string_)               assert_true (stmt:closed())\r\n\r\n    open_stmt():foreach('', assert_table_)          assert_true (stmt:closed())\r\n    open_stmt():foreach('', assert_table_)          assert_true (stmt:closed())\r\n\r\n    open_stmt():foreach(nil, nil, assert_string_)   assert_true (stmt:closed())\r\n    open_stmt():foreach('', nil, assert_table_)     assert_true (stmt:closed())\r\n    open_stmt():foreach(nil, false, assert_string_) assert_false(stmt:closed())\r\n\r\n    assert_error_match('some error', function() open_stmt():foreach(rise_error) end)\r\n    assert_true (stmt:closed())\r\n    assert_error_match('some error', function() open_stmt():foreach(false, rise_error) end)\r\n    assert_false (stmt:closed())\r\n\r\n    assert_true(stmt:close())\r\n  end\r\n\r\n  local function inner_test2 (assert_table_, assert_string_)\r\n\r\n    open_stmt(true):foreach(assert_string_)             assert_true (stmt:destroyed())\r\n\r\n    open_stmt(true):foreach(false, assert_string_)      assert_false(stmt:destroyed()) assert_false(stmt:closed())\r\n    stmt:foreach(nil, assert_string_)               assert_true (stmt:destroyed())\r\n\r\n    open_stmt(true):foreach('', assert_table_)          assert_true (stmt:destroyed())\r\n    open_stmt(true):foreach('', assert_table_)          assert_true (stmt:destroyed())\r\n\r\n    open_stmt(true):foreach(nil, nil, assert_string_)   assert_true (stmt:destroyed())\r\n    open_stmt(true):foreach('', nil, assert_table_)     assert_true (stmt:destroyed())\r\n    open_stmt(true):foreach(nil, false, assert_string_) assert_false(stmt:destroyed()) assert_false(stmt:closed())\r\n\r\n    assert_error_match('some error', function() open_stmt(true):foreach(rise_error) end)\r\n    assert_true (stmt:destroyed())\r\n    assert_error_match('some error', function() open_stmt(true):foreach(false, rise_error) end)\r\n    assert_false(stmt:destroyed())\r\n    assert_false(stmt:closed())\r\n\r\n    assert_true(stmt:close())\r\n  end\r\n\r\n  init_table()\r\n  stmt = assert(cnn:statement())\r\n  inner_test (        assert_table_,          assert_string_)\r\n  inner_test (make_fn(assert_table_), make_fn(assert_string_))\r\n  inner_test2(        assert_table_,          assert_string_)\r\n  inner_test2(make_fn(assert_table_), make_fn(assert_string_))\r\n  assert_true(stmt:destroy())\r\n  fin_table()\r\nend",
    "type": "function"
  }, {
    "id": 70,
    "text": "local function assert_table_(v) \r\n    assert_table(v)\r\n    return 1\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 71,
    "text": "assert_table(v)",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "local function assert_string_(v) \r\n    assert_string(v)\r\n    return 1\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 73,
    "text": "assert_string(v)",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "local function rise_error() error('some error') end",
    "type": "statement:localfunction"
  }, {
    "id": 75,
    "text": "error('some error')",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "local function inner_test (assert_table_, assert_string_)\r\n\r\n    open_stmt():foreach(assert_string_)             assert_true (stmt:closed())\r\n\r\n    open_stmt():foreach(false, assert_string_)      assert_false(stmt:closed())\r\n    stmt:foreach(nil, assert_string_)               assert_true (stmt:closed())\r\n\r\n    open_stmt():foreach('', assert_table_)          assert_true (stmt:closed())\r\n    open_stmt():foreach('', assert_table_)          assert_true (stmt:closed())\r\n\r\n    open_stmt():foreach(nil, nil, assert_string_)   assert_true (stmt:closed())\r\n    open_stmt():foreach('', nil, assert_table_)     assert_true (stmt:closed())\r\n    open_stmt():foreach(nil, false, assert_string_) assert_false(stmt:closed())\r\n\r\n    assert_error_match('some error', function() open_stmt():foreach(rise_error) end)\r\n    assert_true (stmt:closed())\r\n    assert_error_match('some error', function() open_stmt():foreach(false, rise_error) end)\r\n    assert_false (stmt:closed())\r\n\r\n    assert_true(stmt:close())\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 77,
    "text": "open_stmt():foreach(assert_string_)",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "assert_true (stmt:closed())",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "open_stmt():foreach(false, assert_string_)",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "stmt:foreach(nil, assert_string_)",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "open_stmt():foreach('', assert_table_)",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "open_stmt():foreach(nil, nil, assert_string_)",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "open_stmt():foreach('', nil, assert_table_)",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "open_stmt():foreach(nil, false, assert_string_)",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "assert_error_match('some error', function() open_stmt():foreach(rise_error) end)",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "open_stmt():foreach(rise_error)",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "assert_error_match('some error', function() open_stmt():foreach(false, rise_error) end)",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "open_stmt():foreach(false, rise_error)",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "assert_false (stmt:closed())",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "assert_true(stmt:close())",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "local function inner_test2 (assert_table_, assert_string_)\r\n\r\n    open_stmt(true):foreach(assert_string_)             assert_true (stmt:destroyed())\r\n\r\n    open_stmt(true):foreach(false, assert_string_)      assert_false(stmt:destroyed()) assert_false(stmt:closed())\r\n    stmt:foreach(nil, assert_string_)               assert_true (stmt:destroyed())\r\n\r\n    open_stmt(true):foreach('', assert_table_)          assert_true (stmt:destroyed())\r\n    open_stmt(true):foreach('', assert_table_)          assert_true (stmt:destroyed())\r\n\r\n    open_stmt(true):foreach(nil, nil, assert_string_)   assert_true (stmt:destroyed())\r\n    open_stmt(true):foreach('', nil, assert_table_)     assert_true (stmt:destroyed())\r\n    open_stmt(true):foreach(nil, false, assert_string_) assert_false(stmt:destroyed()) assert_false(stmt:closed())\r\n\r\n    assert_error_match('some error', function() open_stmt(true):foreach(rise_error) end)\r\n    assert_true (stmt:destroyed())\r\n    assert_error_match('some error', function() open_stmt(true):foreach(false, rise_error) end)\r\n    assert_false(stmt:destroyed())\r\n    assert_false(stmt:closed())\r\n\r\n    assert_true(stmt:close())\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 92,
    "text": "open_stmt(true):foreach(assert_string_)",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "assert_true (stmt:destroyed())",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "open_stmt(true):foreach(false, assert_string_)",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "assert_false(stmt:destroyed())",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "open_stmt(true):foreach('', assert_table_)",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "open_stmt(true):foreach(nil, nil, assert_string_)",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "open_stmt(true):foreach('', nil, assert_table_)",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "open_stmt(true):foreach(nil, false, assert_string_)",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "assert_error_match('some error', function() open_stmt(true):foreach(rise_error) end)",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "open_stmt(true):foreach(rise_error)",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "assert_error_match('some error', function() open_stmt(true):foreach(false, rise_error) end)",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "open_stmt(true):foreach(false, rise_error)",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "init_table()",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "inner_test (        assert_table_,          assert_string_)",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "inner_test (make_fn(assert_table_), make_fn(assert_string_))",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "inner_test2(        assert_table_,          assert_string_)",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "inner_test2(make_fn(assert_table_), make_fn(assert_string_))",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "assert_true(stmt:destroy())",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "fin_table()",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 112,
    "text": "local function assert_table_(v) \r\n    assert_table(v)\r\n    return 1\r\n  end",
    "type": "function"
  }, {
    "id": 113,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 114,
    "text": "local function assert_string_(v) \r\n    assert_string(v)\r\n    return 1\r\n  end",
    "type": "function"
  }, {
    "id": 115,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 116,
    "text": "local function rise_error() error('some error') end",
    "type": "function"
  }, {
    "id": 117,
    "text": "local function inner_test (assert_table_, assert_string_)\r\n\r\n    open_stmt():foreach(assert_string_)             assert_true (stmt:closed())\r\n\r\n    open_stmt():foreach(false, assert_string_)      assert_false(stmt:closed())\r\n    stmt:foreach(nil, assert_string_)               assert_true (stmt:closed())\r\n\r\n    open_stmt():foreach('', assert_table_)          assert_true (stmt:closed())\r\n    open_stmt():foreach('', assert_table_)          assert_true (stmt:closed())\r\n\r\n    open_stmt():foreach(nil, nil, assert_string_)   assert_true (stmt:closed())\r\n    open_stmt():foreach('', nil, assert_table_)     assert_true (stmt:closed())\r\n    open_stmt():foreach(nil, false, assert_string_) assert_false(stmt:closed())\r\n\r\n    assert_error_match('some error', function() open_stmt():foreach(rise_error) end)\r\n    assert_true (stmt:closed())\r\n    assert_error_match('some error', function() open_stmt():foreach(false, rise_error) end)\r\n    assert_false (stmt:closed())\r\n\r\n    assert_true(stmt:close())\r\n  end",
    "type": "function"
  }, {
    "id": 118,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 119,
    "text": "local function inner_test2 (assert_table_, assert_string_)\r\n\r\n    open_stmt(true):foreach(assert_string_)             assert_true (stmt:destroyed())\r\n\r\n    open_stmt(true):foreach(false, assert_string_)      assert_false(stmt:destroyed()) assert_false(stmt:closed())\r\n    stmt:foreach(nil, assert_string_)               assert_true (stmt:destroyed())\r\n\r\n    open_stmt(true):foreach('', assert_table_)          assert_true (stmt:destroyed())\r\n    open_stmt(true):foreach('', assert_table_)          assert_true (stmt:destroyed())\r\n\r\n    open_stmt(true):foreach(nil, nil, assert_string_)   assert_true (stmt:destroyed())\r\n    open_stmt(true):foreach('', nil, assert_table_)     assert_true (stmt:destroyed())\r\n    open_stmt(true):foreach(nil, false, assert_string_) assert_false(stmt:destroyed()) assert_false(stmt:closed())\r\n\r\n    assert_error_match('some error', function() open_stmt(true):foreach(rise_error) end)\r\n    assert_true (stmt:destroyed())\r\n    assert_error_match('some error', function() open_stmt(true):foreach(false, rise_error) end)\r\n    assert_false(stmt:destroyed())\r\n    assert_false(stmt:closed())\r\n\r\n    assert_true(stmt:close())\r\n  end",
    "type": "function"
  }, {
    "id": 120,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 121,
    "text": "function test_cover()\r\n  init_table()\r\n  stmt = assert(cnn:statement())\r\n  stmt = open_stmt()\r\n  assert_error(function() stmt:execute(sql) end)\r\n\r\n  local t = {}\r\n  local cnt = return_count(stmt:foreach(function(f1)\r\n    local n = tonumber(f1)\r\n    assert_number(n)\r\n    t[n] = true\r\n  end))\r\n\r\n  assert_equal(TEST_ROWS, #t)\r\n  assert_true(stmt:closed())\r\n  assert_equal(0, cnt)\r\n  assert_true(stmt:destroy())\r\n  fin_table()\r\nend",
    "type": "function"
  }, {
    "id": 122,
    "text": "stmt = open_stmt()",
    "type": "statement:assign"
  }, {
    "id": 123,
    "text": "assert_error(function() stmt:execute(sql) end)",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "stmt:execute(sql)",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 126,
    "text": "local cnt = return_count(stmt:foreach(function(f1)\r\n    local n = tonumber(f1)\r\n    assert_number(n)\r\n    t[n] = true\r\n  end))",
    "type": "statement:localassign"
  }, {
    "id": 127,
    "text": "local n = tonumber(f1)",
    "type": "statement:localassign"
  }, {
    "id": 128,
    "text": "assert_number(n)",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "t[n] = true",
    "type": "statement:assign"
  }, {
    "id": 130,
    "text": "assert_equal(TEST_ROWS, #t)",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "assert_equal(0, cnt)",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 133,
    "text": "function test_return()\r\n  init_table()\r\n  stmt = assert(cnn:statement())\r\n\r\n  assert_equal3(2, true, 'match',\r\n    return_count(open_stmt():foreach(function(f1)\r\n      if f1 == '50' then return true, 'match' end\r\n    end))\r\n  )\r\n  assert_true(stmt:closed())\r\n\r\n  assert_equal2(1, nil, \r\n    return_count(open_stmt():foreach(function(f1)\r\n      if f1 == '50' then return nil end\r\n    end))\r\n  )\r\n  assert_true(stmt:closed())\r\n\r\n  assert_true(stmt:destroy())\r\n  fin_table()\r\nend",
    "type": "function"
  }, {
    "id": 134,
    "text": "assert_equal3(2, true, 'match',\r\n    return_count(open_stmt():foreach(function(f1)\r\n      if f1 == '50' then return true, 'match' end\r\n    end))\r\n  )",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "if f1 == '50' then return true, 'match' end",
    "type": "statement:if"
  }, {
    "id": 136,
    "text": "assert_equal2(1, nil, \r\n    return_count(open_stmt():foreach(function(f1)\r\n      if f1 == '50' then return nil end\r\n    end))\r\n  )",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "if f1 == '50' then return nil end",
    "type": "statement:if"
  }, {
    "id": 138,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 139,
    "text": "function test_error()\r\n  init_table()\r\n  stmt = assert(cnn:statement())\r\n\r\n  assert_error(function() open_stmt():foreach(function() error('some error') end) end)\r\n  assert_true(stmt:closed())\r\n\r\n  assert_true(stmt:destroy())\r\n  fin_table()\r\nend",
    "type": "function"
  }, {
    "id": 140,
    "text": "assert_error(function() open_stmt():foreach(function() error('some error') end) end)",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "open_stmt():foreach(function() error('some error') end)",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 143,
    "text": "function test_stmt()\r\n\r\n  stmt = cnn:statement()\r\n  assert_true(stmt:getautoclose())\r\n  assert_false(stmt:getdestroyonclose())\r\n  assert_error(function() stmt:getlogintimeout() end)\r\n\r\n  assert_false(stmt:destroyed())\r\n  assert_true(stmt:setdestroyonclose(true))\r\n  assert_true(stmt:close())\r\n  assert_true(stmt:destroyed())\r\n  assert_error(function() stmt:getautoclose() end)\r\n\r\n  init_table()\r\n  stmt = cnn:statement()\r\n\r\n  cnn:setautocommit(false)\r\n  assert_equal(TEST_ROWS, count_rows())\r\n  assert_equal(TEST_ROWS, stmt:execute('delete from ' .. TEST_TABLE_NAME) )\r\n  assert_equal(0,         stmt:execute('update ' .. TEST_TABLE_NAME .. ' set f1=f1') )\r\n  cnn:rollback()\r\n\r\n  assert_equal(TEST_ROWS, count_rows() )\r\n  assert_equal(TEST_ROWS, stmt:execute('delete from ' .. TEST_TABLE_NAME) )\r\n  assert_equal(0,         stmt:execute('update ' .. TEST_TABLE_NAME .. ' set f1=f1') )\r\n  cnn:commit()\r\n\r\n  assert_equal(0,         stmt:execute('update ' .. TEST_TABLE_NAME .. ' set f1=f1') )\r\n  cnn:commit()\r\n\r\n  cnn:setautocommit(true)\r\n  assert_true(stmt:destroy())\r\n  fin_table()\r\nend",
    "type": "function"
  }, {
    "id": 144,
    "text": "assert_true(stmt:getautoclose())",
    "type": "statement:functioncall"
  }, {
    "id": 145,
    "text": "assert_false(stmt:getdestroyonclose())",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "assert_error(function() stmt:getlogintimeout() end)",
    "type": "statement:functioncall"
  }, {
    "id": 147,
    "text": "stmt:getlogintimeout()",
    "type": "statement:functioncall"
  }, {
    "id": 148,
    "text": "assert_true(stmt:setdestroyonclose(true))",
    "type": "statement:functioncall"
  }, {
    "id": 149,
    "text": "assert_true(stmt:destroyed())",
    "type": "statement:functioncall"
  }, {
    "id": 150,
    "text": "assert_error(function() stmt:getautoclose() end)",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "stmt:getautoclose()",
    "type": "statement:functioncall"
  }, {
    "id": 152,
    "text": "cnn:setautocommit(false)",
    "type": "statement:functioncall"
  }, {
    "id": 153,
    "text": "assert_equal(TEST_ROWS, count_rows())",
    "type": "statement:functioncall"
  }, {
    "id": 154,
    "text": "assert_equal(TEST_ROWS, stmt:execute('delete from ' .. TEST_TABLE_NAME) )",
    "type": "statement:functioncall"
  }, {
    "id": 155,
    "text": "assert_equal(0,         stmt:execute('update ' .. TEST_TABLE_NAME .. ' set f1=f1') )",
    "type": "statement:functioncall"
  }, {
    "id": 156,
    "text": "cnn:rollback()",
    "type": "statement:functioncall"
  }, {
    "id": 157,
    "text": "assert_equal(TEST_ROWS, count_rows() )",
    "type": "statement:functioncall"
  }, {
    "id": 158,
    "text": "cnn:commit()",
    "type": "statement:functioncall"
  }, {
    "id": 159,
    "text": "cnn:setautocommit(true)",
    "type": "statement:functioncall"
  }, {
    "id": 160,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 161,
    "text": "function(self, ...) return fn(...) end",
    "type": "function"
  }, {
    "id": 162,
    "text": "function() open_stmt():foreach(rise_error) end",
    "type": "function"
  }, {
    "id": 163,
    "text": "function() open_stmt():foreach(false, rise_error) end",
    "type": "function"
  }, {
    "id": 164,
    "text": "function() open_stmt(true):foreach(rise_error) end",
    "type": "function"
  }, {
    "id": 165,
    "text": "function() open_stmt(true):foreach(false, rise_error) end",
    "type": "function"
  }, {
    "id": 166,
    "text": "function() stmt:execute(sql) end",
    "type": "function"
  }, {
    "id": 167,
    "text": "function(f1)\r\n    local n = tonumber(f1)\r\n    assert_number(n)\r\n    t[n] = true\r\n  end",
    "type": "function"
  }, {
    "id": 168,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 169,
    "text": "function(f1)\r\n      if f1 == '50' then return true, 'match' end\r\n    end",
    "type": "function"
  }, {
    "id": 170,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 171,
    "text": "function(f1)\r\n      if f1 == '50' then return nil end\r\n    end",
    "type": "function"
  }, {
    "id": 172,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 173,
    "text": "function() error('some error') end",
    "type": "function"
  }, {
    "id": 174,
    "text": "function() open_stmt():foreach(function() error('some error') end) end",
    "type": "function"
  }, {
    "id": 175,
    "text": "function() stmt:getlogintimeout() end",
    "type": "function"
  }, {
    "id": 176,
    "text": "function() stmt:getautoclose() end",
    "type": "function"
  }, {
    "id": 177,
    "text": "",
    "type": "function container"
  }, {
    "id": 178,
    "text": "lunit",
    "type": "module"
  }, {
    "id": 179,
    "text": "assert_table",
    "type": "global function"
  }, {
    "id": 180,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 181,
    "text": "assert_false",
    "type": "global function"
  }, {
    "id": 182,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 183,
    "text": "fn",
    "type": "global function"
  }, {
    "id": 184,
    "text": "drop_table",
    "type": "global function"
  }, {
    "id": 185,
    "text": "return_count",
    "type": "global function"
  }, {
    "id": 186,
    "text": "TEST_CASE",
    "type": "global function"
  }, {
    "id": 187,
    "text": "assert_number",
    "type": "global function"
  }, {
    "id": 188,
    "text": "do_connect",
    "type": "global function"
  }, {
    "id": 189,
    "text": "table_exists",
    "type": "global function"
  }, {
    "id": 190,
    "text": "assert_error_match",
    "type": "global function"
  }, {
    "id": 191,
    "text": "assert_boolean",
    "type": "global function"
  }, {
    "id": 192,
    "text": "assert_true",
    "type": "global function"
  }, {
    "id": 193,
    "text": "ensure_table",
    "type": "global function"
  }, {
    "id": 194,
    "text": "assert_string",
    "type": "global function"
  }, {
    "id": 195,
    "text": "error",
    "type": "global function"
  }, {
    "id": 196,
    "text": "ulong",
    "type": "global function"
  }, {
    "id": 197,
    "text": "assert_error",
    "type": "global function"
  }, {
    "id": 198,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 199,
    "text": "require",
    "type": "global function"
  }, {
    "id": 200,
    "text": "assert_equal",
    "type": "global function"
  }, {
    "id": 201,
    "text": "assert_not_nil",
    "type": "global function"
  }, {
    "id": 202,
    "text": "",
    "type": "global variable"
  }, {
    "id": 203,
    "text": "",
    "type": "variable container"
  }, {
    "id": 204,
    "text": "",
    "type": "require container"
  }, {
    "id": 205,
    "text": "",
    "type": "local variable"
  }, {
    "id": 206,
    "text": "",
    "type": "n/a"
  }, {
    "id": 207,
    "text": "",
    "type": "local variable"
  }, {
    "id": 208,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 209,
    "text": "",
    "type": "symbol"
  }, {
    "id": 210,
    "text": "",
    "type": "local variable"
  }, {
    "id": 211,
    "text": "",
    "type": "n/a"
  }, {
    "id": 212,
    "text": "",
    "type": "local variable"
  }, {
    "id": 213,
    "text": "",
    "type": "number"
  }, {
    "id": 214,
    "text": "",
    "type": "local variable"
  }, {
    "id": 215,
    "text": "",
    "type": "local variable"
  }, {
    "id": 216,
    "text": "",
    "type": "local variable"
  }, {
    "id": 217,
    "text": "",
    "type": "local variable"
  }, {
    "id": 218,
    "text": "",
    "type": "n/a"
  }, {
    "id": 219,
    "text": "",
    "type": "require local variable"
  } ]
}