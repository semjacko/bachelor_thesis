{
  "_filename": "test50.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/luagraph/test/test50.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 13,
    "label": "has",
    "to": 17
  }, {
    "from": 13,
    "label": "has",
    "to": 18
  }, {
    "from": 12,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 20,
    "label": "has",
    "to": 24
  }, {
    "from": 20,
    "label": "has",
    "to": 25
  }, {
    "from": 20,
    "label": "has",
    "to": 26
  }, {
    "from": 20,
    "label": "has",
    "to": 27
  }, {
    "from": 20,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 41,
    "label": "has",
    "to": 45
  }, {
    "from": 41,
    "label": "has",
    "to": 46
  }, {
    "from": 41,
    "label": "has",
    "to": 47
  }, {
    "from": 41,
    "label": "has",
    "to": 48
  }, {
    "from": 41,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 41,
    "label": "has",
    "to": 51
  }, {
    "from": 41,
    "label": "has",
    "to": 52
  }, {
    "from": 41,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 41,
    "label": "has",
    "to": 56
  }, {
    "from": 41,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 56
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 61,
    "label": "has",
    "to": 64
  }, {
    "from": 61,
    "label": "has",
    "to": 65
  }, {
    "from": 61,
    "label": "has",
    "to": 66
  }, {
    "from": 61,
    "label": "has",
    "to": 67
  }, {
    "from": 61,
    "label": "has",
    "to": 68
  }, {
    "from": 61,
    "label": "has",
    "to": 69
  }, {
    "from": 61,
    "label": "has",
    "to": 70
  }, {
    "from": 61,
    "label": "has",
    "to": 56
  }, {
    "from": 61,
    "label": "has",
    "to": 5
  }, {
    "from": 61,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 72,
    "label": "has",
    "to": 75
  }, {
    "from": 72,
    "label": "has",
    "to": 21
  }, {
    "from": 72,
    "label": "has",
    "to": 76
  }, {
    "from": 72,
    "label": "has",
    "to": 77
  }, {
    "from": 72,
    "label": "has",
    "to": 78
  }, {
    "from": 72,
    "label": "has",
    "to": 79
  }, {
    "from": 72,
    "label": "has",
    "to": 80
  }, {
    "from": 72,
    "label": "has",
    "to": 81
  }, {
    "from": 72,
    "label": "has",
    "to": 82
  }, {
    "from": 72,
    "label": "has",
    "to": 83
  }, {
    "from": 72,
    "label": "has",
    "to": 84
  }, {
    "from": 72,
    "label": "has",
    "to": 56
  }, {
    "from": 72,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 74
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 86,
    "label": "has",
    "to": 89
  }, {
    "from": 86,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 86,
    "label": "has",
    "to": 92
  }, {
    "from": 86,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 91
  }, {
    "from": 86,
    "label": "has",
    "to": 94
  }, {
    "from": 86,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 91
  }, {
    "from": 86,
    "label": "has",
    "to": 96
  }, {
    "from": 86,
    "label": "has",
    "to": 97
  }, {
    "from": 86,
    "label": "has",
    "to": 98
  }, {
    "from": 86,
    "label": "has",
    "to": 99
  }, {
    "from": 86,
    "label": "has",
    "to": 100
  }, {
    "from": 86,
    "label": "has",
    "to": 101
  }, {
    "from": 86,
    "label": "has",
    "to": 102
  }, {
    "from": 86,
    "label": "has",
    "to": 103
  }, {
    "from": 86,
    "label": "has",
    "to": 104
  }, {
    "from": 86,
    "label": "has",
    "to": 105
  }, {
    "from": 86,
    "label": "has",
    "to": 106
  }, {
    "from": 86,
    "label": "has",
    "to": 107
  }, {
    "from": 86,
    "label": "has",
    "to": 108
  }, {
    "from": 86,
    "label": "has",
    "to": 109
  }, {
    "from": 86,
    "label": "has",
    "to": 110
  }, {
    "from": 86,
    "label": "has",
    "to": 111
  }, {
    "from": 86,
    "label": "has",
    "to": 112
  }, {
    "from": 86,
    "label": "has",
    "to": 84
  }, {
    "from": 86,
    "label": "has",
    "to": 113
  }, {
    "from": 86,
    "label": "has",
    "to": 114
  }, {
    "from": 86,
    "label": "has",
    "to": 115
  }, {
    "from": 86,
    "label": "has",
    "to": 56
  }, {
    "from": 86,
    "label": "has",
    "to": 116
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 117,
    "label": "has",
    "to": 119
  }, {
    "from": 117,
    "label": "has",
    "to": 120
  }, {
    "from": 117,
    "label": "has",
    "to": 121
  }, {
    "from": 117,
    "label": "has",
    "to": 122
  }, {
    "from": 117,
    "label": "has",
    "to": 123
  }, {
    "from": 117,
    "label": "has",
    "to": 124
  }, {
    "from": 117,
    "label": "has",
    "to": 125
  }, {
    "from": 117,
    "label": "has",
    "to": 126
  }, {
    "from": 117,
    "label": "has",
    "to": 127
  }, {
    "from": 117,
    "label": "has",
    "to": 128
  }, {
    "from": 117,
    "label": "has",
    "to": 129
  }, {
    "from": 117,
    "label": "has",
    "to": 130
  }, {
    "from": 117,
    "label": "has",
    "to": 131
  }, {
    "from": 117,
    "label": "has",
    "to": 132
  }, {
    "from": 117,
    "label": "has",
    "to": 133
  }, {
    "from": 117,
    "label": "has",
    "to": 134
  }, {
    "from": 117,
    "label": "has",
    "to": 135
  }, {
    "from": 117,
    "label": "has",
    "to": 136
  }, {
    "from": 117,
    "label": "has",
    "to": 137
  }, {
    "from": 117,
    "label": "has",
    "to": 138
  }, {
    "from": 117,
    "label": "has",
    "to": 139
  }, {
    "from": 117,
    "label": "has",
    "to": 140
  }, {
    "from": 117,
    "label": "has",
    "to": 141
  }, {
    "from": 117,
    "label": "has",
    "to": 142
  }, {
    "from": 117,
    "label": "has",
    "to": 143
  }, {
    "from": 117,
    "label": "has",
    "to": 144
  }, {
    "from": 117,
    "label": "has",
    "to": 70
  }, {
    "from": 117,
    "label": "has",
    "to": 56
  }, {
    "from": 117,
    "label": "has",
    "to": 145
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 146,
    "label": "has",
    "to": 119
  }, {
    "from": 146,
    "label": "has",
    "to": 120
  }, {
    "from": 146,
    "label": "has",
    "to": 121
  }, {
    "from": 146,
    "label": "has",
    "to": 123
  }, {
    "from": 146,
    "label": "has",
    "to": 124
  }, {
    "from": 146,
    "label": "has",
    "to": 148
  }, {
    "from": 146,
    "label": "has",
    "to": 149
  }, {
    "from": 146,
    "label": "has",
    "to": 150
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 150,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 146,
    "label": "has",
    "to": 154
  }, {
    "from": 146,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 155,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 146,
    "label": "has",
    "to": 159
  }, {
    "from": 146,
    "label": "has",
    "to": 160
  }, {
    "from": 160,
    "label": "has",
    "to": 161
  }, {
    "from": 146,
    "label": "has",
    "to": 162
  }, {
    "from": 146,
    "label": "has",
    "to": 163
  }, {
    "from": 146,
    "label": "has",
    "to": 164
  }, {
    "from": 164,
    "label": "has",
    "to": 165
  }, {
    "from": 146,
    "label": "has",
    "to": 144
  }, {
    "from": 146,
    "label": "has",
    "to": 70
  }, {
    "from": 146,
    "label": "has",
    "to": 166
  }, {
    "from": 146,
    "label": "has",
    "to": 167
  }, {
    "from": 146,
    "label": "has",
    "to": 168
  }, {
    "from": 168,
    "label": "has",
    "to": 169
  }, {
    "from": 168,
    "label": "has",
    "to": 170
  }, {
    "from": 170,
    "label": "has",
    "to": 171
  }, {
    "from": 146,
    "label": "has",
    "to": 172
  }, {
    "from": 146,
    "label": "has",
    "to": 56
  }, {
    "from": 146,
    "label": "has",
    "to": 173
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 174,
    "label": "has",
    "to": 176
  }, {
    "from": 174,
    "label": "has",
    "to": 177
  }, {
    "from": 174,
    "label": "has",
    "to": 178
  }, {
    "from": 174,
    "label": "has",
    "to": 179
  }, {
    "from": 174,
    "label": "has",
    "to": 180
  }, {
    "from": 174,
    "label": "has",
    "to": 181
  }, {
    "from": 174,
    "label": "has",
    "to": 182
  }, {
    "from": 174,
    "label": "has",
    "to": 183
  }, {
    "from": 174,
    "label": "has",
    "to": 184
  }, {
    "from": 174,
    "label": "has",
    "to": 172
  }, {
    "from": 174,
    "label": "has",
    "to": 56
  }, {
    "from": 174,
    "label": "has",
    "to": 185
  }, {
    "from": 186,
    "label": "has",
    "to": 187
  }, {
    "from": 186,
    "label": "has",
    "to": 188
  }, {
    "from": 186,
    "label": "has",
    "to": 189
  }, {
    "from": 186,
    "label": "has",
    "to": 190
  }, {
    "from": 186,
    "label": "has",
    "to": 191
  }, {
    "from": 186,
    "label": "has",
    "to": 172
  }, {
    "from": 186,
    "label": "has",
    "to": 70
  }, {
    "from": 186,
    "label": "has",
    "to": 56
  }, {
    "from": 186,
    "label": "has",
    "to": 192
  }, {
    "from": 193,
    "label": "has",
    "to": 194
  }, {
    "from": 193,
    "label": "has",
    "to": 195
  }, {
    "from": 193,
    "label": "has",
    "to": 196
  }, {
    "from": 193,
    "label": "has",
    "to": 197
  }, {
    "from": 193,
    "label": "has",
    "to": 198
  }, {
    "from": 193,
    "label": "has",
    "to": 199
  }, {
    "from": 193,
    "label": "has",
    "to": 70
  }, {
    "from": 193,
    "label": "has",
    "to": 56
  }, {
    "from": 193,
    "label": "has",
    "to": 200
  }, {
    "from": 201,
    "label": "has",
    "to": 202
  }, {
    "from": 201,
    "label": "has",
    "to": 203
  }, {
    "from": 201,
    "label": "has",
    "to": 204
  }, {
    "from": 204,
    "label": "has",
    "to": 205
  }, {
    "from": 201,
    "label": "has",
    "to": 56
  }, {
    "from": 201,
    "label": "has",
    "to": 206
  }, {
    "from": 207,
    "label": "has",
    "to": 208
  }, {
    "from": 207,
    "label": "has",
    "to": 209
  }, {
    "from": 207,
    "label": "has",
    "to": 210
  }, {
    "from": 207,
    "label": "has",
    "to": 211
  }, {
    "from": 207,
    "label": "has",
    "to": 212
  }, {
    "from": 207,
    "label": "has",
    "to": 213
  }, {
    "from": 207,
    "label": "has",
    "to": 214
  }, {
    "from": 207,
    "label": "has",
    "to": 215
  }, {
    "from": 207,
    "label": "has",
    "to": 216
  }, {
    "from": 207,
    "label": "has",
    "to": 211
  }, {
    "from": 207,
    "label": "has",
    "to": 217
  }, {
    "from": 207,
    "label": "has",
    "to": 172
  }, {
    "from": 207,
    "label": "has",
    "to": 70
  }, {
    "from": 207,
    "label": "has",
    "to": 56
  }, {
    "from": 207,
    "label": "has",
    "to": 218
  }, {
    "from": 219,
    "label": "has",
    "to": 220
  }, {
    "from": 219,
    "label": "has",
    "to": 221
  }, {
    "from": 219,
    "label": "has",
    "to": 222
  }, {
    "from": 219,
    "label": "has",
    "to": 223
  }, {
    "from": 219,
    "label": "has",
    "to": 224
  }, {
    "from": 219,
    "label": "has",
    "to": 225
  }, {
    "from": 219,
    "label": "has",
    "to": 226
  }, {
    "from": 219,
    "label": "has",
    "to": 227
  }, {
    "from": 219,
    "label": "has",
    "to": 228
  }, {
    "from": 219,
    "label": "has",
    "to": 172
  }, {
    "from": 219,
    "label": "has",
    "to": 70
  }, {
    "from": 219,
    "label": "has",
    "to": 56
  }, {
    "from": 219,
    "label": "has",
    "to": 229
  }, {
    "from": 230,
    "label": "has",
    "to": 231
  }, {
    "from": 230,
    "label": "has",
    "to": 221
  }, {
    "from": 230,
    "label": "has",
    "to": 232
  }, {
    "from": 230,
    "label": "has",
    "to": 233
  }, {
    "from": 230,
    "label": "has",
    "to": 234
  }, {
    "from": 230,
    "label": "has",
    "to": 235
  }, {
    "from": 230,
    "label": "has",
    "to": 236
  }, {
    "from": 230,
    "label": "has",
    "to": 237
  }, {
    "from": 230,
    "label": "has",
    "to": 238
  }, {
    "from": 230,
    "label": "has",
    "to": 239
  }, {
    "from": 230,
    "label": "has",
    "to": 240
  }, {
    "from": 230,
    "label": "has",
    "to": 241
  }, {
    "from": 230,
    "label": "has",
    "to": 242
  }, {
    "from": 242,
    "label": "has",
    "to": 5
  }, {
    "from": 230,
    "label": "has",
    "to": 142
  }, {
    "from": 230,
    "label": "has",
    "to": 243
  }, {
    "from": 230,
    "label": "has",
    "to": 172
  }, {
    "from": 230,
    "label": "has",
    "to": 244
  }, {
    "from": 230,
    "label": "has",
    "to": 70
  }, {
    "from": 230,
    "label": "has",
    "to": 56
  }, {
    "from": 230,
    "label": "has",
    "to": 245
  }, {
    "from": 246,
    "label": "has",
    "to": 247
  }, {
    "from": 246,
    "label": "has",
    "to": 221
  }, {
    "from": 246,
    "label": "has",
    "to": 248
  }, {
    "from": 246,
    "label": "has",
    "to": 249
  }, {
    "from": 246,
    "label": "has",
    "to": 250
  }, {
    "from": 246,
    "label": "has",
    "to": 240
  }, {
    "from": 246,
    "label": "has",
    "to": 251
  }, {
    "from": 246,
    "label": "has",
    "to": 252
  }, {
    "from": 246,
    "label": "has",
    "to": 253
  }, {
    "from": 246,
    "label": "has",
    "to": 254
  }, {
    "from": 246,
    "label": "has",
    "to": 255
  }, {
    "from": 246,
    "label": "has",
    "to": 240
  }, {
    "from": 246,
    "label": "has",
    "to": 256
  }, {
    "from": 246,
    "label": "has",
    "to": 240
  }, {
    "from": 246,
    "label": "has",
    "to": 257
  }, {
    "from": 246,
    "label": "has",
    "to": 240
  }, {
    "from": 246,
    "label": "has",
    "to": 172
  }, {
    "from": 246,
    "label": "has",
    "to": 244
  }, {
    "from": 246,
    "label": "has",
    "to": 70
  }, {
    "from": 246,
    "label": "has",
    "to": 56
  }, {
    "from": 246,
    "label": "has",
    "to": 258
  }, {
    "from": 259,
    "label": "has",
    "to": 260
  }, {
    "from": 259,
    "label": "has",
    "to": 261
  }, {
    "from": 259,
    "label": "has",
    "to": 262
  }, {
    "from": 259,
    "label": "has",
    "to": 263
  }, {
    "from": 259,
    "label": "has",
    "to": 264
  }, {
    "from": 259,
    "label": "has",
    "to": 256
  }, {
    "from": 259,
    "label": "has",
    "to": 172
  }, {
    "from": 259,
    "label": "has",
    "to": 70
  }, {
    "from": 259,
    "label": "has",
    "to": 56
  }, {
    "from": 259,
    "label": "has",
    "to": 265
  }, {
    "from": 266,
    "label": "has",
    "to": 260
  }, {
    "from": 266,
    "label": "has",
    "to": 267
  }, {
    "from": 266,
    "label": "has",
    "to": 268
  }, {
    "from": 266,
    "label": "has",
    "to": 269
  }, {
    "from": 266,
    "label": "has",
    "to": 270
  }, {
    "from": 266,
    "label": "has",
    "to": 271
  }, {
    "from": 266,
    "label": "has",
    "to": 272
  }, {
    "from": 266,
    "label": "has",
    "to": 172
  }, {
    "from": 266,
    "label": "has",
    "to": 56
  }, {
    "from": 266,
    "label": "has",
    "to": 273
  }, {
    "from": 274,
    "label": "has",
    "to": 275
  }, {
    "from": 274,
    "label": "has",
    "to": 276
  }, {
    "from": 274,
    "label": "has",
    "to": 277
  }, {
    "from": 274,
    "label": "has",
    "to": 278
  }, {
    "from": 278,
    "label": "has",
    "to": 279
  }, {
    "from": 274,
    "label": "has",
    "to": 148
  }, {
    "from": 274,
    "label": "has",
    "to": 280
  }, {
    "from": 274,
    "label": "has",
    "to": 281
  }, {
    "from": 281,
    "label": "has",
    "to": 282
  }, {
    "from": 281,
    "label": "has",
    "to": 283
  }, {
    "from": 283,
    "label": "has",
    "to": 284
  }, {
    "from": 274,
    "label": "has",
    "to": 154
  }, {
    "from": 274,
    "label": "has",
    "to": 285
  }, {
    "from": 285,
    "label": "has",
    "to": 286
  }, {
    "from": 274,
    "label": "has",
    "to": 172
  }, {
    "from": 274,
    "label": "has",
    "to": 162
  }, {
    "from": 274,
    "label": "has",
    "to": 287
  }, {
    "from": 274,
    "label": "has",
    "to": 285
  }, {
    "from": 285,
    "label": "has",
    "to": 286
  }, {
    "from": 274,
    "label": "has",
    "to": 166
  }, {
    "from": 274,
    "label": "has",
    "to": 288
  }, {
    "from": 274,
    "label": "has",
    "to": 289
  }, {
    "from": 274,
    "label": "has",
    "to": 290
  }, {
    "from": 274,
    "label": "has",
    "to": 291
  }, {
    "from": 291,
    "label": "has",
    "to": 292
  }, {
    "from": 291,
    "label": "has",
    "to": 293
  }, {
    "from": 293,
    "label": "has",
    "to": 294
  }, {
    "from": 274,
    "label": "has",
    "to": 285
  }, {
    "from": 285,
    "label": "has",
    "to": 286
  }, {
    "from": 274,
    "label": "has",
    "to": 172
  }, {
    "from": 274,
    "label": "has",
    "to": 70
  }, {
    "from": 274,
    "label": "has",
    "to": 56
  }, {
    "from": 274,
    "label": "has",
    "to": 295
  }, {
    "from": 296,
    "label": "has",
    "to": 297
  }, {
    "from": 296,
    "label": "has",
    "to": 298
  }, {
    "from": 296,
    "label": "has",
    "to": 222
  }, {
    "from": 296,
    "label": "has",
    "to": 210
  }, {
    "from": 296,
    "label": "has",
    "to": 211
  }, {
    "from": 296,
    "label": "has",
    "to": 299
  }, {
    "from": 296,
    "label": "has",
    "to": 300
  }, {
    "from": 296,
    "label": "has",
    "to": 301
  }, {
    "from": 296,
    "label": "has",
    "to": 302
  }, {
    "from": 296,
    "label": "has",
    "to": 303
  }, {
    "from": 296,
    "label": "has",
    "to": 304
  }, {
    "from": 296,
    "label": "has",
    "to": 305
  }, {
    "from": 296,
    "label": "has",
    "to": 306
  }, {
    "from": 296,
    "label": "has",
    "to": 307
  }, {
    "from": 296,
    "label": "has",
    "to": 308
  }, {
    "from": 296,
    "label": "has",
    "to": 309
  }, {
    "from": 296,
    "label": "has",
    "to": 310
  }, {
    "from": 296,
    "label": "has",
    "to": 311
  }, {
    "from": 296,
    "label": "has",
    "to": 312
  }, {
    "from": 296,
    "label": "has",
    "to": 313
  }, {
    "from": 296,
    "label": "has",
    "to": 314
  }, {
    "from": 296,
    "label": "has",
    "to": 315
  }, {
    "from": 296,
    "label": "has",
    "to": 316
  }, {
    "from": 296,
    "label": "has",
    "to": 240
  }, {
    "from": 296,
    "label": "has",
    "to": 317
  }, {
    "from": 296,
    "label": "has",
    "to": 240
  }, {
    "from": 296,
    "label": "has",
    "to": 172
  }, {
    "from": 296,
    "label": "has",
    "to": 70
  }, {
    "from": 296,
    "label": "has",
    "to": 56
  }, {
    "from": 296,
    "label": "has",
    "to": 318
  }, {
    "from": 319,
    "label": "has",
    "to": 320
  }, {
    "from": 319,
    "label": "has",
    "to": 221
  }, {
    "from": 319,
    "label": "has",
    "to": 248
  }, {
    "from": 319,
    "label": "has",
    "to": 249
  }, {
    "from": 319,
    "label": "has",
    "to": 321
  }, {
    "from": 319,
    "label": "has",
    "to": 322
  }, {
    "from": 319,
    "label": "has",
    "to": 323
  }, {
    "from": 319,
    "label": "has",
    "to": 240
  }, {
    "from": 319,
    "label": "has",
    "to": 324
  }, {
    "from": 319,
    "label": "has",
    "to": 325
  }, {
    "from": 319,
    "label": "has",
    "to": 326
  }, {
    "from": 319,
    "label": "has",
    "to": 314
  }, {
    "from": 319,
    "label": "has",
    "to": 240
  }, {
    "from": 319,
    "label": "has",
    "to": 172
  }, {
    "from": 319,
    "label": "has",
    "to": 70
  }, {
    "from": 319,
    "label": "has",
    "to": 56
  }, {
    "from": 319,
    "label": "has",
    "to": 327
  }, {
    "from": 328,
    "label": "has",
    "to": 329
  }, {
    "from": 328,
    "label": "has",
    "to": 330
  }, {
    "from": 328,
    "label": "has",
    "to": 331
  }, {
    "from": 331,
    "label": "has",
    "to": 148
  }, {
    "from": 331,
    "label": "has",
    "to": 332
  }, {
    "from": 332,
    "label": "has",
    "to": 333
  }, {
    "from": 332,
    "label": "has",
    "to": 334
  }, {
    "from": 334,
    "label": "has",
    "to": 335
  }, {
    "from": 334,
    "label": "has",
    "to": 336
  }, {
    "from": 336,
    "label": "has",
    "to": 337
  }, {
    "from": 334,
    "label": "has",
    "to": 338
  }, {
    "from": 338,
    "label": "has",
    "to": 339
  }, {
    "from": 328,
    "label": "has",
    "to": 340
  }, {
    "from": 340,
    "label": "has",
    "to": 154
  }, {
    "from": 340,
    "label": "has",
    "to": 341
  }, {
    "from": 341,
    "label": "has",
    "to": 333
  }, {
    "from": 341,
    "label": "has",
    "to": 342
  }, {
    "from": 342,
    "label": "has",
    "to": 343
  }, {
    "from": 341,
    "label": "has",
    "to": 344
  }, {
    "from": 344,
    "label": "has",
    "to": 345
  }, {
    "from": 328,
    "label": "has",
    "to": 172
  }, {
    "from": 328,
    "label": "has",
    "to": 70
  }, {
    "from": 328,
    "label": "has",
    "to": 56
  }, {
    "from": 328,
    "label": "has",
    "to": 346
  }, {
    "from": 347,
    "label": "has",
    "to": 348
  }, {
    "from": 347,
    "label": "has",
    "to": 221
  }, {
    "from": 347,
    "label": "has",
    "to": 349
  }, {
    "from": 347,
    "label": "has",
    "to": 222
  }, {
    "from": 347,
    "label": "has",
    "to": 240
  }, {
    "from": 347,
    "label": "has",
    "to": 350
  }, {
    "from": 347,
    "label": "has",
    "to": 351
  }, {
    "from": 347,
    "label": "has",
    "to": 352
  }, {
    "from": 347,
    "label": "has",
    "to": 353
  }, {
    "from": 347,
    "label": "has",
    "to": 354
  }, {
    "from": 347,
    "label": "has",
    "to": 355
  }, {
    "from": 347,
    "label": "has",
    "to": 356
  }, {
    "from": 347,
    "label": "has",
    "to": 357
  }, {
    "from": 347,
    "label": "has",
    "to": 240
  }, {
    "from": 347,
    "label": "has",
    "to": 172
  }, {
    "from": 347,
    "label": "has",
    "to": 56
  }, {
    "from": 347,
    "label": "has",
    "to": 358
  }, {
    "from": 359,
    "label": "has",
    "to": 360
  }, {
    "from": 359,
    "label": "has",
    "to": 221
  }, {
    "from": 359,
    "label": "has",
    "to": 361
  }, {
    "from": 359,
    "label": "has",
    "to": 349
  }, {
    "from": 359,
    "label": "has",
    "to": 211
  }, {
    "from": 359,
    "label": "has",
    "to": 362
  }, {
    "from": 359,
    "label": "has",
    "to": 363
  }, {
    "from": 359,
    "label": "has",
    "to": 364
  }, {
    "from": 359,
    "label": "has",
    "to": 240
  }, {
    "from": 359,
    "label": "has",
    "to": 365
  }, {
    "from": 359,
    "label": "has",
    "to": 366
  }, {
    "from": 359,
    "label": "has",
    "to": 367
  }, {
    "from": 359,
    "label": "has",
    "to": 368
  }, {
    "from": 359,
    "label": "has",
    "to": 369
  }, {
    "from": 359,
    "label": "has",
    "to": 370
  }, {
    "from": 359,
    "label": "has",
    "to": 371
  }, {
    "from": 359,
    "label": "has",
    "to": 372
  }, {
    "from": 359,
    "label": "has",
    "to": 240
  }, {
    "from": 359,
    "label": "has",
    "to": 373
  }, {
    "from": 359,
    "label": "has",
    "to": 374
  }, {
    "from": 359,
    "label": "has",
    "to": 375
  }, {
    "from": 359,
    "label": "has",
    "to": 376
  }, {
    "from": 359,
    "label": "has",
    "to": 377
  }, {
    "from": 359,
    "label": "has",
    "to": 378
  }, {
    "from": 359,
    "label": "has",
    "to": 379
  }, {
    "from": 359,
    "label": "has",
    "to": 380
  }, {
    "from": 359,
    "label": "has",
    "to": 381
  }, {
    "from": 359,
    "label": "has",
    "to": 382
  }, {
    "from": 359,
    "label": "has",
    "to": 383
  }, {
    "from": 359,
    "label": "has",
    "to": 384
  }, {
    "from": 359,
    "label": "has",
    "to": 385
  }, {
    "from": 359,
    "label": "has",
    "to": 386
  }, {
    "from": 359,
    "label": "has",
    "to": 387
  }, {
    "from": 359,
    "label": "has",
    "to": 388
  }, {
    "from": 359,
    "label": "has",
    "to": 56
  }, {
    "from": 359,
    "label": "has",
    "to": 389
  }, {
    "from": 390,
    "label": "has",
    "to": 391
  }, {
    "from": 390,
    "label": "has",
    "to": 392
  }, {
    "from": 390,
    "label": "has",
    "to": 393
  }, {
    "from": 390,
    "label": "has",
    "to": 394
  }, {
    "from": 390,
    "label": "has",
    "to": 395
  }, {
    "from": 390,
    "label": "has",
    "to": 396
  }, {
    "from": 390,
    "label": "has",
    "to": 397
  }, {
    "from": 390,
    "label": "has",
    "to": 398
  }, {
    "from": 390,
    "label": "has",
    "to": 399
  }, {
    "from": 390,
    "label": "has",
    "to": 400
  }, {
    "from": 390,
    "label": "has",
    "to": 401
  }, {
    "from": 390,
    "label": "has",
    "to": 402
  }, {
    "from": 402,
    "label": "has",
    "to": 403
  }, {
    "from": 402,
    "label": "has",
    "to": 5
  }, {
    "from": 390,
    "label": "has",
    "to": 404
  }, {
    "from": 390,
    "label": "has",
    "to": 405
  }, {
    "from": 405,
    "label": "has",
    "to": 406
  }, {
    "from": 405,
    "label": "has",
    "to": 5
  }, {
    "from": 390,
    "label": "has",
    "to": 407
  }, {
    "from": 390,
    "label": "has",
    "to": 408
  }, {
    "from": 390,
    "label": "has",
    "to": 409
  }, {
    "from": 390,
    "label": "has",
    "to": 410
  }, {
    "from": 390,
    "label": "has",
    "to": 411
  }, {
    "from": 390,
    "label": "has",
    "to": 56
  }, {
    "from": 390,
    "label": "has",
    "to": 412
  }, {
    "from": 413,
    "label": "has",
    "to": 403
  }, {
    "from": 413,
    "label": "has",
    "to": 5
  }, {
    "from": 413,
    "label": "has",
    "to": 414
  }, {
    "from": 415,
    "label": "has",
    "to": 406
  }, {
    "from": 415,
    "label": "has",
    "to": 5
  }, {
    "from": 415,
    "label": "has",
    "to": 416
  }, {
    "from": 417,
    "label": "has",
    "to": 418
  }, {
    "from": 417,
    "label": "has",
    "to": 419
  }, {
    "from": 417,
    "label": "has",
    "to": 420
  }, {
    "from": 417,
    "label": "has",
    "to": 421
  }, {
    "from": 417,
    "label": "has",
    "to": 422
  }, {
    "from": 417,
    "label": "has",
    "to": 423
  }, {
    "from": 417,
    "label": "has",
    "to": 424
  }, {
    "from": 417,
    "label": "has",
    "to": 425
  }, {
    "from": 417,
    "label": "has",
    "to": 426
  }, {
    "from": 417,
    "label": "has",
    "to": 427
  }, {
    "from": 417,
    "label": "has",
    "to": 428
  }, {
    "from": 417,
    "label": "has",
    "to": 429
  }, {
    "from": 417,
    "label": "has",
    "to": 430
  }, {
    "from": 417,
    "label": "has",
    "to": 431
  }, {
    "from": 417,
    "label": "has",
    "to": 432
  }, {
    "from": 432,
    "label": "has",
    "to": 433
  }, {
    "from": 417,
    "label": "has",
    "to": 434
  }, {
    "from": 417,
    "label": "has",
    "to": 435
  }, {
    "from": 417,
    "label": "has",
    "to": 436
  }, {
    "from": 417,
    "label": "has",
    "to": 437
  }, {
    "from": 417,
    "label": "has",
    "to": 438
  }, {
    "from": 417,
    "label": "has",
    "to": 439
  }, {
    "from": 417,
    "label": "has",
    "to": 440
  }, {
    "from": 417,
    "label": "has",
    "to": 441
  }, {
    "from": 417,
    "label": "has",
    "to": 442
  }, {
    "from": 417,
    "label": "has",
    "to": 443
  }, {
    "from": 417,
    "label": "has",
    "to": 444
  }, {
    "from": 417,
    "label": "has",
    "to": 445
  }, {
    "from": 417,
    "label": "has",
    "to": 446
  }, {
    "from": 417,
    "label": "has",
    "to": 447
  }, {
    "from": 417,
    "label": "has",
    "to": 448
  }, {
    "from": 417,
    "label": "has",
    "to": 449
  }, {
    "from": 417,
    "label": "has",
    "to": 56
  }, {
    "from": 417,
    "label": "has",
    "to": 450
  }, {
    "from": 451,
    "label": "has",
    "to": 452
  }, {
    "from": 451,
    "label": "has",
    "to": 330
  }, {
    "from": 451,
    "label": "has",
    "to": 453
  }, {
    "from": 451,
    "label": "has",
    "to": 454
  }, {
    "from": 451,
    "label": "has",
    "to": 455
  }, {
    "from": 451,
    "label": "has",
    "to": 456
  }, {
    "from": 451,
    "label": "has",
    "to": 457
  }, {
    "from": 451,
    "label": "has",
    "to": 458
  }, {
    "from": 451,
    "label": "has",
    "to": 459
  }, {
    "from": 451,
    "label": "has",
    "to": 56
  }, {
    "from": 451,
    "label": "has",
    "to": 460
  }, {
    "from": 461,
    "label": "has",
    "to": 462
  }, {
    "from": 461,
    "label": "has",
    "to": 463
  }, {
    "from": 461,
    "label": "has",
    "to": 464
  }, {
    "from": 461,
    "label": "has",
    "to": 21
  }, {
    "from": 461,
    "label": "has",
    "to": 465
  }, {
    "from": 461,
    "label": "has",
    "to": 466
  }, {
    "from": 461,
    "label": "has",
    "to": 467
  }, {
    "from": 461,
    "label": "has",
    "to": 468
  }, {
    "from": 461,
    "label": "has",
    "to": 469
  }, {
    "from": 461,
    "label": "has",
    "to": 470
  }, {
    "from": 461,
    "label": "has",
    "to": 172
  }, {
    "from": 461,
    "label": "has",
    "to": 56
  }, {
    "from": 461,
    "label": "has",
    "to": 471
  }, {
    "from": 472,
    "label": "has",
    "to": 473
  }, {
    "from": 472,
    "label": "has",
    "to": 474
  }, {
    "from": 472,
    "label": "has",
    "to": 475
  }, {
    "from": 472,
    "label": "has",
    "to": 476
  }, {
    "from": 472,
    "label": "has",
    "to": 477
  }, {
    "from": 472,
    "label": "has",
    "to": 478
  }, {
    "from": 472,
    "label": "has",
    "to": 479
  }, {
    "from": 472,
    "label": "has",
    "to": 480
  }, {
    "from": 472,
    "label": "has",
    "to": 481
  }, {
    "from": 472,
    "label": "has",
    "to": 482
  }, {
    "from": 472,
    "label": "has",
    "to": 483
  }, {
    "from": 472,
    "label": "has",
    "to": 484
  }, {
    "from": 472,
    "label": "has",
    "to": 485
  }, {
    "from": 472,
    "label": "has",
    "to": 486
  }, {
    "from": 472,
    "label": "has",
    "to": 240
  }, {
    "from": 472,
    "label": "has",
    "to": 388
  }, {
    "from": 472,
    "label": "has",
    "to": 172
  }, {
    "from": 472,
    "label": "has",
    "to": 56
  }, {
    "from": 472,
    "label": "has",
    "to": 487
  }, {
    "from": 488,
    "label": "has",
    "to": 489
  }, {
    "from": 488,
    "label": "has",
    "to": 490
  }, {
    "from": 488,
    "label": "has",
    "to": 491
  }, {
    "from": 488,
    "label": "has",
    "to": 492
  }, {
    "from": 488,
    "label": "has",
    "to": 493
  }, {
    "from": 488,
    "label": "has",
    "to": 494
  }, {
    "from": 488,
    "label": "has",
    "to": 495
  }, {
    "from": 495,
    "label": "has",
    "to": 496
  }, {
    "from": 495,
    "label": "has",
    "to": 497
  }, {
    "from": 497,
    "label": "has",
    "to": 498
  }, {
    "from": 488,
    "label": "has",
    "to": 499
  }, {
    "from": 488,
    "label": "has",
    "to": 500
  }, {
    "from": 488,
    "label": "has",
    "to": 501
  }, {
    "from": 488,
    "label": "has",
    "to": 502
  }, {
    "from": 488,
    "label": "has",
    "to": 240
  }, {
    "from": 488,
    "label": "has",
    "to": 388
  }, {
    "from": 488,
    "label": "has",
    "to": 172
  }, {
    "from": 488,
    "label": "has",
    "to": 56
  }, {
    "from": 488,
    "label": "has",
    "to": 503
  }, {
    "from": 504,
    "label": "has",
    "to": 505
  }, {
    "from": 504,
    "label": "has",
    "to": 506
  }, {
    "from": 506,
    "label": "has",
    "to": 507
  }, {
    "from": 506,
    "label": "has",
    "to": 508
  }, {
    "from": 504,
    "label": "has",
    "to": 509
  }, {
    "from": 504,
    "label": "has",
    "to": 510
  }, {
    "from": 511,
    "label": "has",
    "to": 512
  }, {
    "from": 512,
    "label": "has",
    "to": 513
  }, {
    "from": 511,
    "label": "has",
    "to": 514
  }, {
    "from": 515,
    "label": "has",
    "to": 91
  }, {
    "from": 516,
    "label": "has",
    "to": 91
  }, {
    "from": 517,
    "label": "has",
    "to": 91
  }, {
    "from": 518,
    "label": "has",
    "to": 5
  }, {
    "from": 519,
    "label": "has",
    "to": 433
  }, {
    "from": 520,
    "label": "calls",
    "to": 540
  }, {
    "from": 488,
    "label": "calls",
    "to": 525
  }, {
    "from": 488,
    "label": "calls",
    "to": 525
  }, {
    "from": 488,
    "label": "calls",
    "to": 525
  }, {
    "from": 488,
    "label": "calls",
    "to": 525
  }, {
    "from": 488,
    "label": "calls",
    "to": 525
  }, {
    "from": 488,
    "label": "calls",
    "to": 525
  }, {
    "from": 2,
    "label": "calls",
    "to": 526
  }, {
    "from": 20,
    "label": "calls",
    "to": 526
  }, {
    "from": 41,
    "label": "calls",
    "to": 526
  }, {
    "from": 41,
    "label": "calls",
    "to": 526
  }, {
    "from": 41,
    "label": "calls",
    "to": 526
  }, {
    "from": 41,
    "label": "calls",
    "to": 526
  }, {
    "from": 41,
    "label": "calls",
    "to": 526
  }, {
    "from": 41,
    "label": "calls",
    "to": 526
  }, {
    "from": 61,
    "label": "calls",
    "to": 526
  }, {
    "from": 61,
    "label": "calls",
    "to": 526
  }, {
    "from": 61,
    "label": "calls",
    "to": 526
  }, {
    "from": 61,
    "label": "calls",
    "to": 526
  }, {
    "from": 72,
    "label": "calls",
    "to": 526
  }, {
    "from": 72,
    "label": "calls",
    "to": 526
  }, {
    "from": 86,
    "label": "calls",
    "to": 526
  }, {
    "from": 86,
    "label": "calls",
    "to": 526
  }, {
    "from": 86,
    "label": "calls",
    "to": 526
  }, {
    "from": 86,
    "label": "calls",
    "to": 526
  }, {
    "from": 86,
    "label": "calls",
    "to": 526
  }, {
    "from": 86,
    "label": "calls",
    "to": 526
  }, {
    "from": 86,
    "label": "calls",
    "to": 526
  }, {
    "from": 86,
    "label": "calls",
    "to": 526
  }, {
    "from": 86,
    "label": "calls",
    "to": 526
  }, {
    "from": 86,
    "label": "calls",
    "to": 526
  }, {
    "from": 86,
    "label": "calls",
    "to": 526
  }, {
    "from": 86,
    "label": "calls",
    "to": 526
  }, {
    "from": 86,
    "label": "calls",
    "to": 526
  }, {
    "from": 117,
    "label": "calls",
    "to": 526
  }, {
    "from": 117,
    "label": "calls",
    "to": 526
  }, {
    "from": 117,
    "label": "calls",
    "to": 526
  }, {
    "from": 117,
    "label": "calls",
    "to": 526
  }, {
    "from": 117,
    "label": "calls",
    "to": 526
  }, {
    "from": 117,
    "label": "calls",
    "to": 526
  }, {
    "from": 117,
    "label": "calls",
    "to": 526
  }, {
    "from": 117,
    "label": "calls",
    "to": 526
  }, {
    "from": 117,
    "label": "calls",
    "to": 526
  }, {
    "from": 117,
    "label": "calls",
    "to": 526
  }, {
    "from": 117,
    "label": "calls",
    "to": 526
  }, {
    "from": 117,
    "label": "calls",
    "to": 526
  }, {
    "from": 117,
    "label": "calls",
    "to": 526
  }, {
    "from": 117,
    "label": "calls",
    "to": 526
  }, {
    "from": 117,
    "label": "calls",
    "to": 526
  }, {
    "from": 117,
    "label": "calls",
    "to": 526
  }, {
    "from": 117,
    "label": "calls",
    "to": 526
  }, {
    "from": 117,
    "label": "calls",
    "to": 526
  }, {
    "from": 146,
    "label": "calls",
    "to": 526
  }, {
    "from": 146,
    "label": "calls",
    "to": 526
  }, {
    "from": 146,
    "label": "calls",
    "to": 526
  }, {
    "from": 146,
    "label": "calls",
    "to": 526
  }, {
    "from": 146,
    "label": "calls",
    "to": 526
  }, {
    "from": 146,
    "label": "calls",
    "to": 526
  }, {
    "from": 146,
    "label": "calls",
    "to": 526
  }, {
    "from": 174,
    "label": "calls",
    "to": 526
  }, {
    "from": 174,
    "label": "calls",
    "to": 526
  }, {
    "from": 193,
    "label": "calls",
    "to": 526
  }, {
    "from": 193,
    "label": "calls",
    "to": 526
  }, {
    "from": 193,
    "label": "calls",
    "to": 526
  }, {
    "from": 193,
    "label": "calls",
    "to": 526
  }, {
    "from": 207,
    "label": "calls",
    "to": 526
  }, {
    "from": 207,
    "label": "calls",
    "to": 526
  }, {
    "from": 207,
    "label": "calls",
    "to": 526
  }, {
    "from": 207,
    "label": "calls",
    "to": 526
  }, {
    "from": 207,
    "label": "calls",
    "to": 526
  }, {
    "from": 207,
    "label": "calls",
    "to": 526
  }, {
    "from": 219,
    "label": "calls",
    "to": 526
  }, {
    "from": 219,
    "label": "calls",
    "to": 526
  }, {
    "from": 219,
    "label": "calls",
    "to": 526
  }, {
    "from": 219,
    "label": "calls",
    "to": 526
  }, {
    "from": 219,
    "label": "calls",
    "to": 526
  }, {
    "from": 230,
    "label": "calls",
    "to": 526
  }, {
    "from": 230,
    "label": "calls",
    "to": 526
  }, {
    "from": 230,
    "label": "calls",
    "to": 526
  }, {
    "from": 230,
    "label": "calls",
    "to": 526
  }, {
    "from": 230,
    "label": "calls",
    "to": 526
  }, {
    "from": 230,
    "label": "calls",
    "to": 526
  }, {
    "from": 230,
    "label": "calls",
    "to": 526
  }, {
    "from": 230,
    "label": "calls",
    "to": 526
  }, {
    "from": 230,
    "label": "calls",
    "to": 526
  }, {
    "from": 246,
    "label": "calls",
    "to": 526
  }, {
    "from": 246,
    "label": "calls",
    "to": 526
  }, {
    "from": 246,
    "label": "calls",
    "to": 526
  }, {
    "from": 246,
    "label": "calls",
    "to": 526
  }, {
    "from": 246,
    "label": "calls",
    "to": 526
  }, {
    "from": 246,
    "label": "calls",
    "to": 526
  }, {
    "from": 259,
    "label": "calls",
    "to": 526
  }, {
    "from": 259,
    "label": "calls",
    "to": 526
  }, {
    "from": 259,
    "label": "calls",
    "to": 526
  }, {
    "from": 266,
    "label": "calls",
    "to": 526
  }, {
    "from": 266,
    "label": "calls",
    "to": 526
  }, {
    "from": 266,
    "label": "calls",
    "to": 526
  }, {
    "from": 274,
    "label": "calls",
    "to": 526
  }, {
    "from": 274,
    "label": "calls",
    "to": 526
  }, {
    "from": 274,
    "label": "calls",
    "to": 526
  }, {
    "from": 274,
    "label": "calls",
    "to": 526
  }, {
    "from": 296,
    "label": "calls",
    "to": 526
  }, {
    "from": 296,
    "label": "calls",
    "to": 526
  }, {
    "from": 296,
    "label": "calls",
    "to": 526
  }, {
    "from": 296,
    "label": "calls",
    "to": 526
  }, {
    "from": 296,
    "label": "calls",
    "to": 526
  }, {
    "from": 296,
    "label": "calls",
    "to": 526
  }, {
    "from": 296,
    "label": "calls",
    "to": 526
  }, {
    "from": 296,
    "label": "calls",
    "to": 526
  }, {
    "from": 296,
    "label": "calls",
    "to": 526
  }, {
    "from": 296,
    "label": "calls",
    "to": 526
  }, {
    "from": 296,
    "label": "calls",
    "to": 526
  }, {
    "from": 296,
    "label": "calls",
    "to": 526
  }, {
    "from": 296,
    "label": "calls",
    "to": 526
  }, {
    "from": 296,
    "label": "calls",
    "to": 526
  }, {
    "from": 296,
    "label": "calls",
    "to": 526
  }, {
    "from": 296,
    "label": "calls",
    "to": 526
  }, {
    "from": 296,
    "label": "calls",
    "to": 526
  }, {
    "from": 296,
    "label": "calls",
    "to": 526
  }, {
    "from": 296,
    "label": "calls",
    "to": 526
  }, {
    "from": 296,
    "label": "calls",
    "to": 526
  }, {
    "from": 319,
    "label": "calls",
    "to": 526
  }, {
    "from": 319,
    "label": "calls",
    "to": 526
  }, {
    "from": 319,
    "label": "calls",
    "to": 526
  }, {
    "from": 319,
    "label": "calls",
    "to": 526
  }, {
    "from": 319,
    "label": "calls",
    "to": 526
  }, {
    "from": 319,
    "label": "calls",
    "to": 526
  }, {
    "from": 319,
    "label": "calls",
    "to": 526
  }, {
    "from": 319,
    "label": "calls",
    "to": 526
  }, {
    "from": 319,
    "label": "calls",
    "to": 526
  }, {
    "from": 319,
    "label": "calls",
    "to": 526
  }, {
    "from": 328,
    "label": "calls",
    "to": 526
  }, {
    "from": 347,
    "label": "calls",
    "to": 526
  }, {
    "from": 347,
    "label": "calls",
    "to": 526
  }, {
    "from": 347,
    "label": "calls",
    "to": 526
  }, {
    "from": 347,
    "label": "calls",
    "to": 526
  }, {
    "from": 347,
    "label": "calls",
    "to": 526
  }, {
    "from": 347,
    "label": "calls",
    "to": 526
  }, {
    "from": 347,
    "label": "calls",
    "to": 526
  }, {
    "from": 347,
    "label": "calls",
    "to": 526
  }, {
    "from": 347,
    "label": "calls",
    "to": 526
  }, {
    "from": 347,
    "label": "calls",
    "to": 526
  }, {
    "from": 347,
    "label": "calls",
    "to": 526
  }, {
    "from": 359,
    "label": "calls",
    "to": 526
  }, {
    "from": 359,
    "label": "calls",
    "to": 526
  }, {
    "from": 359,
    "label": "calls",
    "to": 526
  }, {
    "from": 359,
    "label": "calls",
    "to": 526
  }, {
    "from": 359,
    "label": "calls",
    "to": 526
  }, {
    "from": 359,
    "label": "calls",
    "to": 526
  }, {
    "from": 359,
    "label": "calls",
    "to": 526
  }, {
    "from": 359,
    "label": "calls",
    "to": 526
  }, {
    "from": 359,
    "label": "calls",
    "to": 526
  }, {
    "from": 359,
    "label": "calls",
    "to": 526
  }, {
    "from": 359,
    "label": "calls",
    "to": 526
  }, {
    "from": 359,
    "label": "calls",
    "to": 526
  }, {
    "from": 359,
    "label": "calls",
    "to": 526
  }, {
    "from": 390,
    "label": "calls",
    "to": 526
  }, {
    "from": 390,
    "label": "calls",
    "to": 526
  }, {
    "from": 390,
    "label": "calls",
    "to": 526
  }, {
    "from": 390,
    "label": "calls",
    "to": 526
  }, {
    "from": 390,
    "label": "calls",
    "to": 526
  }, {
    "from": 390,
    "label": "calls",
    "to": 526
  }, {
    "from": 390,
    "label": "calls",
    "to": 526
  }, {
    "from": 390,
    "label": "calls",
    "to": 526
  }, {
    "from": 390,
    "label": "calls",
    "to": 526
  }, {
    "from": 390,
    "label": "calls",
    "to": 526
  }, {
    "from": 390,
    "label": "calls",
    "to": 526
  }, {
    "from": 417,
    "label": "calls",
    "to": 526
  }, {
    "from": 417,
    "label": "calls",
    "to": 526
  }, {
    "from": 417,
    "label": "calls",
    "to": 526
  }, {
    "from": 417,
    "label": "calls",
    "to": 526
  }, {
    "from": 417,
    "label": "calls",
    "to": 526
  }, {
    "from": 417,
    "label": "calls",
    "to": 526
  }, {
    "from": 417,
    "label": "calls",
    "to": 526
  }, {
    "from": 417,
    "label": "calls",
    "to": 526
  }, {
    "from": 417,
    "label": "calls",
    "to": 526
  }, {
    "from": 417,
    "label": "calls",
    "to": 526
  }, {
    "from": 417,
    "label": "calls",
    "to": 526
  }, {
    "from": 417,
    "label": "calls",
    "to": 526
  }, {
    "from": 417,
    "label": "calls",
    "to": 526
  }, {
    "from": 417,
    "label": "calls",
    "to": 526
  }, {
    "from": 417,
    "label": "calls",
    "to": 526
  }, {
    "from": 417,
    "label": "calls",
    "to": 526
  }, {
    "from": 417,
    "label": "calls",
    "to": 526
  }, {
    "from": 417,
    "label": "calls",
    "to": 526
  }, {
    "from": 417,
    "label": "calls",
    "to": 526
  }, {
    "from": 417,
    "label": "calls",
    "to": 526
  }, {
    "from": 417,
    "label": "calls",
    "to": 526
  }, {
    "from": 451,
    "label": "calls",
    "to": 526
  }, {
    "from": 451,
    "label": "calls",
    "to": 526
  }, {
    "from": 461,
    "label": "calls",
    "to": 526
  }, {
    "from": 461,
    "label": "calls",
    "to": 526
  }, {
    "from": 461,
    "label": "calls",
    "to": 526
  }, {
    "from": 472,
    "label": "calls",
    "to": 526
  }, {
    "from": 472,
    "label": "calls",
    "to": 526
  }, {
    "from": 472,
    "label": "calls",
    "to": 526
  }, {
    "from": 488,
    "label": "calls",
    "to": 526
  }, {
    "from": 488,
    "label": "calls",
    "to": 526
  }, {
    "from": 12,
    "label": "calls",
    "to": 527
  }, {
    "from": 20,
    "label": "calls",
    "to": 527
  }, {
    "from": 72,
    "label": "calls",
    "to": 527
  }, {
    "from": 461,
    "label": "calls",
    "to": 527
  }, {
    "from": 520,
    "label": "calls",
    "to": 511
  }, {
    "from": 488,
    "label": "calls",
    "to": 546
  }, {
    "from": 488,
    "label": "calls",
    "to": 530
  }, {
    "from": 488,
    "label": "calls",
    "to": 530
  }, {
    "from": 488,
    "label": "calls",
    "to": 530
  }, {
    "from": 488,
    "label": "calls",
    "to": 530
  }, {
    "from": 488,
    "label": "calls",
    "to": 530
  }, {
    "from": 359,
    "label": "calls",
    "to": 12
  }, {
    "from": 472,
    "label": "calls",
    "to": 12
  }, {
    "from": 488,
    "label": "calls",
    "to": 12
  }, {
    "from": 520,
    "label": "calls",
    "to": 34
  }, {
    "from": 7,
    "label": "calls",
    "to": 531
  }, {
    "from": 12,
    "label": "calls",
    "to": 531
  }, {
    "from": 12,
    "label": "calls",
    "to": 537
  }, {
    "from": 461,
    "label": "calls",
    "to": 537
  }, {
    "from": 117,
    "label": "calls",
    "to": 532
  }, {
    "from": 201,
    "label": "calls",
    "to": 532
  }, {
    "from": 230,
    "label": "calls",
    "to": 532
  }, {
    "from": 417,
    "label": "calls",
    "to": 532
  }, {
    "from": 488,
    "label": "calls",
    "to": 538
  }, {
    "from": 12,
    "label": "calls",
    "to": 539
  }, {
    "from": 72,
    "label": "calls",
    "to": 7
  }, {
    "from": 230,
    "label": "calls",
    "to": 7
  }, {
    "from": 246,
    "label": "calls",
    "to": 7
  }, {
    "from": 246,
    "label": "calls",
    "to": 7
  }, {
    "from": 246,
    "label": "calls",
    "to": 7
  }, {
    "from": 246,
    "label": "calls",
    "to": 7
  }, {
    "from": 296,
    "label": "calls",
    "to": 7
  }, {
    "from": 296,
    "label": "calls",
    "to": 7
  }, {
    "from": 319,
    "label": "calls",
    "to": 7
  }, {
    "from": 319,
    "label": "calls",
    "to": 7
  }, {
    "from": 347,
    "label": "calls",
    "to": 7
  }, {
    "from": 347,
    "label": "calls",
    "to": 7
  }, {
    "from": 359,
    "label": "calls",
    "to": 7
  }, {
    "from": 359,
    "label": "calls",
    "to": 7
  }, {
    "from": 417,
    "label": "calls",
    "to": 7
  }, {
    "from": 417,
    "label": "calls",
    "to": 7
  }, {
    "from": 472,
    "label": "calls",
    "to": 7
  }, {
    "from": 488,
    "label": "calls",
    "to": 7
  }, {
    "from": 511,
    "label": "calls",
    "to": 541
  }, {
    "from": 41,
    "label": "calls",
    "to": 542
  }, {
    "from": 41,
    "label": "calls",
    "to": 542
  }, {
    "from": 511,
    "label": "calls",
    "to": 542
  }, {
    "from": 41,
    "label": "calls",
    "to": 29
  }, {
    "from": 41,
    "label": "calls",
    "to": 29
  }, {
    "from": 58,
    "label": "calls",
    "to": 29
  }, {
    "from": 58,
    "label": "calls",
    "to": 29
  }, {
    "from": 61,
    "label": "calls",
    "to": 29
  }, {
    "from": 61,
    "label": "calls",
    "to": 29
  }, {
    "from": 72,
    "label": "calls",
    "to": 29
  }, {
    "from": 72,
    "label": "calls",
    "to": 29
  }, {
    "from": 86,
    "label": "calls",
    "to": 29
  }, {
    "from": 86,
    "label": "calls",
    "to": 29
  }, {
    "from": 117,
    "label": "calls",
    "to": 29
  }, {
    "from": 117,
    "label": "calls",
    "to": 29
  }, {
    "from": 146,
    "label": "calls",
    "to": 29
  }, {
    "from": 146,
    "label": "calls",
    "to": 29
  }, {
    "from": 174,
    "label": "calls",
    "to": 29
  }, {
    "from": 174,
    "label": "calls",
    "to": 29
  }, {
    "from": 186,
    "label": "calls",
    "to": 29
  }, {
    "from": 186,
    "label": "calls",
    "to": 29
  }, {
    "from": 193,
    "label": "calls",
    "to": 29
  }, {
    "from": 193,
    "label": "calls",
    "to": 29
  }, {
    "from": 201,
    "label": "calls",
    "to": 29
  }, {
    "from": 201,
    "label": "calls",
    "to": 29
  }, {
    "from": 207,
    "label": "calls",
    "to": 29
  }, {
    "from": 207,
    "label": "calls",
    "to": 29
  }, {
    "from": 219,
    "label": "calls",
    "to": 29
  }, {
    "from": 219,
    "label": "calls",
    "to": 29
  }, {
    "from": 230,
    "label": "calls",
    "to": 29
  }, {
    "from": 230,
    "label": "calls",
    "to": 29
  }, {
    "from": 246,
    "label": "calls",
    "to": 29
  }, {
    "from": 246,
    "label": "calls",
    "to": 29
  }, {
    "from": 259,
    "label": "calls",
    "to": 29
  }, {
    "from": 259,
    "label": "calls",
    "to": 29
  }, {
    "from": 266,
    "label": "calls",
    "to": 29
  }, {
    "from": 266,
    "label": "calls",
    "to": 29
  }, {
    "from": 274,
    "label": "calls",
    "to": 29
  }, {
    "from": 274,
    "label": "calls",
    "to": 29
  }, {
    "from": 296,
    "label": "calls",
    "to": 29
  }, {
    "from": 296,
    "label": "calls",
    "to": 29
  }, {
    "from": 319,
    "label": "calls",
    "to": 29
  }, {
    "from": 319,
    "label": "calls",
    "to": 29
  }, {
    "from": 328,
    "label": "calls",
    "to": 29
  }, {
    "from": 328,
    "label": "calls",
    "to": 29
  }, {
    "from": 347,
    "label": "calls",
    "to": 29
  }, {
    "from": 347,
    "label": "calls",
    "to": 29
  }, {
    "from": 359,
    "label": "calls",
    "to": 29
  }, {
    "from": 359,
    "label": "calls",
    "to": 29
  }, {
    "from": 390,
    "label": "calls",
    "to": 29
  }, {
    "from": 390,
    "label": "calls",
    "to": 29
  }, {
    "from": 417,
    "label": "calls",
    "to": 29
  }, {
    "from": 417,
    "label": "calls",
    "to": 29
  }, {
    "from": 451,
    "label": "calls",
    "to": 29
  }, {
    "from": 451,
    "label": "calls",
    "to": 29
  }, {
    "from": 461,
    "label": "calls",
    "to": 29
  }, {
    "from": 461,
    "label": "calls",
    "to": 29
  }, {
    "from": 472,
    "label": "calls",
    "to": 29
  }, {
    "from": 472,
    "label": "calls",
    "to": 29
  }, {
    "from": 488,
    "label": "calls",
    "to": 29
  }, {
    "from": 488,
    "label": "calls",
    "to": 29
  }, {
    "from": 41,
    "label": "calls",
    "to": 522
  }, {
    "from": 41,
    "label": "calls",
    "to": 522
  }, {
    "from": 72,
    "label": "calls",
    "to": 522
  }, {
    "from": 86,
    "label": "calls",
    "to": 522
  }, {
    "from": 146,
    "label": "calls",
    "to": 522
  }, {
    "from": 266,
    "label": "calls",
    "to": 522
  }, {
    "from": 274,
    "label": "calls",
    "to": 522
  }, {
    "from": 328,
    "label": "calls",
    "to": 522
  }, {
    "from": 417,
    "label": "calls",
    "to": 522
  }, {
    "from": 451,
    "label": "calls",
    "to": 522
  }, {
    "from": 520,
    "label": "calls",
    "to": 524
  }, {
    "from": 61,
    "label": "calls",
    "to": 545
  }, {
    "from": 117,
    "label": "calls",
    "to": 545
  }, {
    "from": 146,
    "label": "calls",
    "to": 545
  }, {
    "from": 186,
    "label": "calls",
    "to": 545
  }, {
    "from": 193,
    "label": "calls",
    "to": 545
  }, {
    "from": 207,
    "label": "calls",
    "to": 545
  }, {
    "from": 219,
    "label": "calls",
    "to": 545
  }, {
    "from": 230,
    "label": "calls",
    "to": 545
  }, {
    "from": 246,
    "label": "calls",
    "to": 545
  }, {
    "from": 259,
    "label": "calls",
    "to": 545
  }, {
    "from": 274,
    "label": "calls",
    "to": 545
  }, {
    "from": 296,
    "label": "calls",
    "to": 545
  }, {
    "from": 319,
    "label": "calls",
    "to": 545
  }, {
    "from": 328,
    "label": "calls",
    "to": 545
  }, {
    "from": 520,
    "label": "calls",
    "to": 545
  }, {
    "from": 520,
    "label": "calls",
    "to": 536
  }, {
    "from": 520,
    "label": "calls",
    "to": 536
  }, {
    "from": 20,
    "label": "calls",
    "to": 543
  }, {
    "from": 20,
    "label": "calls",
    "to": 543
  }, {
    "from": 72,
    "label": "calls",
    "to": 543
  }, {
    "from": 72,
    "label": "calls",
    "to": 543
  }, {
    "from": 2,
    "label": "calls",
    "to": 523
  }, {
    "from": 61,
    "label": "calls",
    "to": 523
  }, {
    "from": 61,
    "label": "calls",
    "to": 523
  }, {
    "from": 86,
    "label": "calls",
    "to": 523
  }, {
    "from": 117,
    "label": "calls",
    "to": 523
  }, {
    "from": 146,
    "label": "calls",
    "to": 523
  }, {
    "from": 174,
    "label": "calls",
    "to": 523
  }, {
    "from": 186,
    "label": "calls",
    "to": 523
  }, {
    "from": 193,
    "label": "calls",
    "to": 523
  }, {
    "from": 207,
    "label": "calls",
    "to": 523
  }, {
    "from": 219,
    "label": "calls",
    "to": 523
  }, {
    "from": 230,
    "label": "calls",
    "to": 523
  }, {
    "from": 246,
    "label": "calls",
    "to": 523
  }, {
    "from": 259,
    "label": "calls",
    "to": 523
  }, {
    "from": 274,
    "label": "calls",
    "to": 523
  }, {
    "from": 296,
    "label": "calls",
    "to": 523
  }, {
    "from": 319,
    "label": "calls",
    "to": 523
  }, {
    "from": 347,
    "label": "calls",
    "to": 523
  }, {
    "from": 359,
    "label": "calls",
    "to": 523
  }, {
    "from": 359,
    "label": "calls",
    "to": 523
  }, {
    "from": 390,
    "label": "calls",
    "to": 523
  }, {
    "from": 417,
    "label": "calls",
    "to": 523
  }, {
    "from": 417,
    "label": "calls",
    "to": 523
  }, {
    "from": 461,
    "label": "calls",
    "to": 523
  }, {
    "from": 472,
    "label": "calls",
    "to": 523
  }, {
    "from": 504,
    "label": "calls",
    "to": 523
  }, {
    "from": 520,
    "label": "calls",
    "to": 544
  }, {
    "from": 520,
    "label": "calls",
    "to": 544
  }, {
    "from": 41,
    "label": "calls",
    "to": 534
  }, {
    "from": 41,
    "label": "calls",
    "to": 534
  }, {
    "from": 41,
    "label": "calls",
    "to": 2
  }, {
    "from": 41,
    "label": "calls",
    "to": 2
  }, {
    "from": 41,
    "label": "calls",
    "to": 2
  }, {
    "from": 41,
    "label": "calls",
    "to": 38
  }, {
    "from": 41,
    "label": "calls",
    "to": 38
  }, {
    "from": 41,
    "label": "calls",
    "to": 38
  }, {
    "from": 86,
    "label": "calls",
    "to": 38
  }, {
    "from": 86,
    "label": "calls",
    "to": 38
  }, {
    "from": 86,
    "label": "calls",
    "to": 38
  }, {
    "from": 86,
    "label": "calls",
    "to": 38
  }, {
    "from": 86,
    "label": "calls",
    "to": 38
  }, {
    "from": 86,
    "label": "calls",
    "to": 38
  }, {
    "from": 86,
    "label": "calls",
    "to": 38
  }, {
    "from": 86,
    "label": "calls",
    "to": 38
  }, {
    "from": 86,
    "label": "calls",
    "to": 38
  }, {
    "from": 86,
    "label": "calls",
    "to": 38
  }, {
    "from": 86,
    "label": "calls",
    "to": 38
  }, {
    "from": 86,
    "label": "calls",
    "to": 38
  }, {
    "from": 117,
    "label": "calls",
    "to": 38
  }, {
    "from": 117,
    "label": "calls",
    "to": 38
  }, {
    "from": 117,
    "label": "calls",
    "to": 38
  }, {
    "from": 117,
    "label": "calls",
    "to": 38
  }, {
    "from": 117,
    "label": "calls",
    "to": 38
  }, {
    "from": 117,
    "label": "calls",
    "to": 38
  }, {
    "from": 146,
    "label": "calls",
    "to": 38
  }, {
    "from": 146,
    "label": "calls",
    "to": 38
  }, {
    "from": 146,
    "label": "calls",
    "to": 38
  }, {
    "from": 146,
    "label": "calls",
    "to": 38
  }, {
    "from": 146,
    "label": "calls",
    "to": 38
  }, {
    "from": 146,
    "label": "calls",
    "to": 38
  }, {
    "from": 146,
    "label": "calls",
    "to": 38
  }, {
    "from": 146,
    "label": "calls",
    "to": 38
  }, {
    "from": 146,
    "label": "calls",
    "to": 38
  }, {
    "from": 201,
    "label": "calls",
    "to": 38
  }, {
    "from": 207,
    "label": "calls",
    "to": 38
  }, {
    "from": 207,
    "label": "calls",
    "to": 38
  }, {
    "from": 207,
    "label": "calls",
    "to": 38
  }, {
    "from": 207,
    "label": "calls",
    "to": 38
  }, {
    "from": 219,
    "label": "calls",
    "to": 38
  }, {
    "from": 219,
    "label": "calls",
    "to": 38
  }, {
    "from": 219,
    "label": "calls",
    "to": 38
  }, {
    "from": 230,
    "label": "calls",
    "to": 38
  }, {
    "from": 230,
    "label": "calls",
    "to": 38
  }, {
    "from": 246,
    "label": "calls",
    "to": 38
  }, {
    "from": 246,
    "label": "calls",
    "to": 38
  }, {
    "from": 246,
    "label": "calls",
    "to": 38
  }, {
    "from": 246,
    "label": "calls",
    "to": 38
  }, {
    "from": 259,
    "label": "calls",
    "to": 38
  }, {
    "from": 266,
    "label": "calls",
    "to": 38
  }, {
    "from": 274,
    "label": "calls",
    "to": 38
  }, {
    "from": 274,
    "label": "calls",
    "to": 38
  }, {
    "from": 274,
    "label": "calls",
    "to": 38
  }, {
    "from": 274,
    "label": "calls",
    "to": 38
  }, {
    "from": 274,
    "label": "calls",
    "to": 38
  }, {
    "from": 274,
    "label": "calls",
    "to": 38
  }, {
    "from": 274,
    "label": "calls",
    "to": 38
  }, {
    "from": 274,
    "label": "calls",
    "to": 38
  }, {
    "from": 274,
    "label": "calls",
    "to": 38
  }, {
    "from": 274,
    "label": "calls",
    "to": 38
  }, {
    "from": 328,
    "label": "calls",
    "to": 38
  }, {
    "from": 328,
    "label": "calls",
    "to": 38
  }, {
    "from": 328,
    "label": "calls",
    "to": 38
  }, {
    "from": 328,
    "label": "calls",
    "to": 38
  }, {
    "from": 328,
    "label": "calls",
    "to": 38
  }, {
    "from": 328,
    "label": "calls",
    "to": 38
  }, {
    "from": 328,
    "label": "calls",
    "to": 38
  }, {
    "from": 328,
    "label": "calls",
    "to": 38
  }, {
    "from": 328,
    "label": "calls",
    "to": 38
  }, {
    "from": 359,
    "label": "calls",
    "to": 38
  }, {
    "from": 359,
    "label": "calls",
    "to": 38
  }, {
    "from": 359,
    "label": "calls",
    "to": 38
  }, {
    "from": 359,
    "label": "calls",
    "to": 38
  }, {
    "from": 390,
    "label": "calls",
    "to": 38
  }, {
    "from": 390,
    "label": "calls",
    "to": 38
  }, {
    "from": 417,
    "label": "calls",
    "to": 38
  }, {
    "from": 417,
    "label": "calls",
    "to": 38
  }, {
    "from": 417,
    "label": "calls",
    "to": 38
  }, {
    "from": 451,
    "label": "calls",
    "to": 38
  }, {
    "from": 451,
    "label": "calls",
    "to": 38
  }, {
    "from": 451,
    "label": "calls",
    "to": 38
  }, {
    "from": 461,
    "label": "calls",
    "to": 38
  }, {
    "from": 461,
    "label": "calls",
    "to": 38
  }, {
    "from": 488,
    "label": "calls",
    "to": 38
  }, {
    "from": 488,
    "label": "calls",
    "to": 38
  }, {
    "from": 488,
    "label": "calls",
    "to": 38
  }, {
    "from": 488,
    "label": "calls",
    "to": 38
  }, {
    "from": 488,
    "label": "calls",
    "to": 38
  }, {
    "from": 520,
    "label": "calls",
    "to": 38
  }, {
    "from": 488,
    "label": "calls",
    "to": 533
  }, {
    "from": 488,
    "label": "calls",
    "to": 533
  }, {
    "from": 488,
    "label": "calls",
    "to": 533
  }, {
    "from": 520,
    "label": "calls",
    "to": 547
  }, {
    "from": 520,
    "label": "calls",
    "to": 547
  }, {
    "from": 520,
    "label": "calls",
    "to": 547
  }, {
    "from": 86,
    "label": "calls",
    "to": 535
  }, {
    "from": 86,
    "label": "calls",
    "to": 535
  }, {
    "from": 86,
    "label": "calls",
    "to": 535
  }, {
    "from": 41,
    "label": "calls",
    "to": 528
  }, {
    "from": 41,
    "label": "calls",
    "to": 528
  }, {
    "from": 207,
    "label": "calls",
    "to": 528
  }, {
    "from": 207,
    "label": "calls",
    "to": 528
  }, {
    "from": 207,
    "label": "calls",
    "to": 528
  }, {
    "from": 230,
    "label": "calls",
    "to": 528
  }, {
    "from": 328,
    "label": "calls",
    "to": 528
  }, {
    "from": 417,
    "label": "calls",
    "to": 528
  }, {
    "from": 417,
    "label": "calls",
    "to": 528
  }, {
    "from": 359,
    "label": "calls",
    "to": 529
  }, {
    "from": 1,
    "label": "contains",
    "to": 520
  }, {
    "from": 520,
    "label": "declares",
    "to": 2
  }, {
    "from": 520,
    "label": "declares",
    "to": 7
  }, {
    "from": 520,
    "label": "declares",
    "to": 12
  }, {
    "from": 520,
    "label": "declares",
    "to": 20
  }, {
    "from": 520,
    "label": "declares",
    "to": 29
  }, {
    "from": 520,
    "label": "declares",
    "to": 34
  }, {
    "from": 520,
    "label": "declares",
    "to": 38
  }, {
    "from": 520,
    "label": "declares",
    "to": 41
  }, {
    "from": 520,
    "label": "declares",
    "to": 58
  }, {
    "from": 520,
    "label": "declares",
    "to": 61
  }, {
    "from": 520,
    "label": "declares",
    "to": 72
  }, {
    "from": 520,
    "label": "declares",
    "to": 86
  }, {
    "from": 520,
    "label": "declares",
    "to": 117
  }, {
    "from": 520,
    "label": "declares",
    "to": 146
  }, {
    "from": 520,
    "label": "declares",
    "to": 174
  }, {
    "from": 520,
    "label": "declares",
    "to": 186
  }, {
    "from": 520,
    "label": "declares",
    "to": 193
  }, {
    "from": 520,
    "label": "declares",
    "to": 201
  }, {
    "from": 520,
    "label": "declares",
    "to": 207
  }, {
    "from": 520,
    "label": "declares",
    "to": 219
  }, {
    "from": 520,
    "label": "declares",
    "to": 230
  }, {
    "from": 520,
    "label": "declares",
    "to": 246
  }, {
    "from": 520,
    "label": "declares",
    "to": 259
  }, {
    "from": 520,
    "label": "declares",
    "to": 266
  }, {
    "from": 520,
    "label": "declares",
    "to": 274
  }, {
    "from": 520,
    "label": "declares",
    "to": 296
  }, {
    "from": 520,
    "label": "declares",
    "to": 319
  }, {
    "from": 520,
    "label": "declares",
    "to": 328
  }, {
    "from": 520,
    "label": "declares",
    "to": 347
  }, {
    "from": 520,
    "label": "declares",
    "to": 359
  }, {
    "from": 520,
    "label": "declares",
    "to": 390
  }, {
    "from": 520,
    "label": "declares",
    "to": 413
  }, {
    "from": 520,
    "label": "declares",
    "to": 415
  }, {
    "from": 520,
    "label": "declares",
    "to": 417
  }, {
    "from": 520,
    "label": "declares",
    "to": 451
  }, {
    "from": 520,
    "label": "declares",
    "to": 461
  }, {
    "from": 520,
    "label": "declares",
    "to": 472
  }, {
    "from": 520,
    "label": "declares",
    "to": 488
  }, {
    "from": 520,
    "label": "declares",
    "to": 504
  }, {
    "from": 520,
    "label": "declares",
    "to": 511
  }, {
    "from": 520,
    "label": "declares",
    "to": 515
  }, {
    "from": 520,
    "label": "declares",
    "to": 516
  }, {
    "from": 520,
    "label": "declares",
    "to": 517
  }, {
    "from": 520,
    "label": "declares",
    "to": 518
  }, {
    "from": 520,
    "label": "declares",
    "to": 519
  }, {
    "from": 1,
    "label": "contains",
    "to": 548
  }, {
    "from": 1,
    "label": "contains",
    "to": 549
  }, {
    "from": 548,
    "label": "initializes",
    "to": 550
  }, {
    "from": 550,
    "label": "assigns",
    "to": 551
  }, {
    "from": 548,
    "label": "initializes",
    "to": 552
  }, {
    "from": 552,
    "label": "assigns",
    "to": 553
  }, {
    "from": 548,
    "label": "initializes",
    "to": 554
  }, {
    "from": 554,
    "label": "assigns",
    "to": 555
  }, {
    "from": 548,
    "label": "initializes",
    "to": 556
  }, {
    "from": 556,
    "label": "assigns",
    "to": 557
  }, {
    "from": 548,
    "label": "initializes",
    "to": 558
  }, {
    "from": 558,
    "label": "assigns",
    "to": 559
  }, {
    "from": 548,
    "label": "initializes",
    "to": 560
  }, {
    "from": 560,
    "label": "assigns",
    "to": 561
  }, {
    "from": 548,
    "label": "initializes",
    "to": 562
  }, {
    "from": 562,
    "label": "assigns",
    "to": 563
  }, {
    "from": 548,
    "label": "initializes",
    "to": 564
  }, {
    "from": 564,
    "label": "assigns",
    "to": 565
  }, {
    "from": 565,
    "label": "assigns",
    "to": 566
  }, {
    "from": 565,
    "label": "assigns",
    "to": 567
  }, {
    "from": 565,
    "label": "assigns",
    "to": 568
  }, {
    "from": 565,
    "label": "assigns",
    "to": 569
  }, {
    "from": 565,
    "label": "assigns",
    "to": 570
  }, {
    "from": 565,
    "label": "assigns",
    "to": 571
  }, {
    "from": 565,
    "label": "assigns",
    "to": 572
  }, {
    "from": 565,
    "label": "assigns",
    "to": 573
  }, {
    "from": 565,
    "label": "assigns",
    "to": 574
  }, {
    "from": 565,
    "label": "assigns",
    "to": 575
  }, {
    "from": 565,
    "label": "assigns",
    "to": 576
  }, {
    "from": 565,
    "label": "assigns",
    "to": 577
  }, {
    "from": 565,
    "label": "assigns",
    "to": 578
  }, {
    "from": 565,
    "label": "assigns",
    "to": 579
  }, {
    "from": 565,
    "label": "assigns",
    "to": 580
  }, {
    "from": 565,
    "label": "assigns",
    "to": 581
  }, {
    "from": 565,
    "label": "assigns",
    "to": 582
  }, {
    "from": 565,
    "label": "assigns",
    "to": 583
  }, {
    "from": 565,
    "label": "assigns",
    "to": 584
  }, {
    "from": 565,
    "label": "assigns",
    "to": 585
  }, {
    "from": 565,
    "label": "assigns",
    "to": 586
  }, {
    "from": 565,
    "label": "assigns",
    "to": 587
  }, {
    "from": 565,
    "label": "assigns",
    "to": 588
  }, {
    "from": 565,
    "label": "assigns",
    "to": 589
  }, {
    "from": 565,
    "label": "assigns",
    "to": 590
  }, {
    "from": 565,
    "label": "assigns",
    "to": 591
  }, {
    "from": 565,
    "label": "assigns",
    "to": 592
  }, {
    "from": 549,
    "label": "initializes",
    "to": 593
  }, {
    "from": 593,
    "label": "requires",
    "to": 521
  }, {
    "from": 90,
    "label": "hasArgument",
    "to": 515
  }, {
    "from": 90,
    "label": "hasArgument",
    "to": 516
  }, {
    "from": 90,
    "label": "hasArgument",
    "to": 517
  }, {
    "from": 93,
    "label": "hasArgument",
    "to": 515
  }, {
    "from": 93,
    "label": "hasArgument",
    "to": 516
  }, {
    "from": 93,
    "label": "hasArgument",
    "to": 517
  }, {
    "from": 95,
    "label": "hasArgument",
    "to": 515
  }, {
    "from": 95,
    "label": "hasArgument",
    "to": 516
  }, {
    "from": 95,
    "label": "hasArgument",
    "to": 517
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "test50",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function newgraph(name, kind)\r\n  local g, err = graph.open(name, kind)\r\n  assert(g, err);\r\n  return g\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local g, err = graph.open(name, kind)",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "assert(g, err)",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "local function gprint(g) \r\n  if printgraph == true then\r\n    print()\r\n    g:write()\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "if printgraph == true then\r\n    print()\r\n    g:write()\r\n  end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "print()",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "g:write()",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "local function gshow(g)\r\n  if showgraph == true then\r\n    local fname = os.tmpname()..\".dot\"\r\n    print(fname)\r\n    g:write(fname) os.execute(\"dotty \"..fname)\r\n    os.remove(fname)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "if showgraph == true then\r\n    local fname = os.tmpname()..\".dot\"\r\n    print(fname)\r\n    g:write(fname) os.execute(\"dotty \"..fname)\r\n    os.remove(fname)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "local fname = os.tmpname()..\".dot\"",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "print(fname)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "g:write(fname)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "os.execute(\"dotty \"..fname)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "os.remove(fname)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "local function gcompare(g, ref)\r\n  local fn = os.tmpname()\r\n  g:write(fn)\r\n  local fref = io.open(ref, \"r\")\r\n  local sres = fref:read(\"*a\")\r\n  local fnow = io.open(fn, \"r\")\r\n  local snow = fnow:read(\"*a\")\r\n  assert(sres == snow)\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "local fn = os.tmpname()",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "g:write(fn)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "local fref = io.open(ref, \"r\")",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "local sres = fref:read(\"*a\")",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "local fnow = io.open(fn, \"r\")",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "local snow = fnow:read(\"*a\")",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "assert(sres == snow)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function(fmt, ...)\r\n\t\tlog:debug(\"============================ \")\r\n\t\tlog:info(fmt, unpack(arg))\r\n\t\tlog:debug(\"\\n\")\r\n\t      end",
    "type": "function"
  }, {
    "id": 30,
    "text": "log:debug(\"============================ \")",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "log:info(fmt, unpack(arg))",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "log:debug(\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function(fmt, ...) \r\n\t       log:info(string.format(fmt, unpack(arg)))\r\n\t       io.stdout:flush()\r\n\t     end",
    "type": "function"
  }, {
    "id": 35,
    "text": "log:info(string.format(fmt, unpack(arg)))",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "io.stdout:flush()",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function(fmt, ...) \r\n\t\tlog:debug(string.format(fmt, unpack(arg))) \r\n\t      end",
    "type": "function"
  }, {
    "id": 39,
    "text": "log:debug(string.format(fmt, unpack(arg)))",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "local function test_graph_base()\r\n  intro(\"Test graph: open and read ...\")\r\n  local g = {}, err\r\n  -- New graph: create with discipline\r\n  g[1] = assert(newgraph(\"G1-base\", \"undirected\"))\r\n  -- New graph: create with default discipline\r\n  g[2] = assert(newgraph(\"G2-base\"))\r\n  -- New graph: read from file\r\n  g[3] = assert(graph.read(\"test/test_dat1.dot\"))\r\n  -- New graph: undirected\r\n  g[4] = assert(newgraph(\"G4-base\", \"undirected\"))\r\n\r\n\r\n  -- Show properties\r\n  debug(\"Properties:\\n\")\r\n  for _,h in pairs(g) do\r\n    debug(\"  %q: type=%s strict=%s directed=%s nnodes=%d nedges=%d id=%d\\n\",\r\n\t  h.name, type(h), tostring(h.isstrict), tostring(h.isdirected),\r\n\t  h.nnodes, h.nedges, h.id)\r\n  end\r\n\r\n  -- New graph: error in reading\r\n  g[5], err = graph.read(\"___does__not__exist__\")\r\n  assert(g[5] == nil and type(err) == \"string\")\r\n\r\n  -- Close all created graphs\r\n  for _,v in pairs(g) do \r\n    debug(\"closing %q\\n\", v.name)\r\n    assert(v:close()) \r\n  end\r\n  intro(\"passed\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "intro(\"Test graph: open and read ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "local g = {}, err",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "g[1] = assert(newgraph(\"G1-base\", \"undirected\"))",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "g[2] = assert(newgraph(\"G2-base\"))",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "g[3] = assert(graph.read(\"test/test_dat1.dot\"))",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "g[4] = assert(newgraph(\"G4-base\", \"undirected\"))",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "debug(\"Properties:\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "for _,h in pairs(g) do\r\n    debug(\"  %q: type=%s strict=%s directed=%s nnodes=%d nedges=%d id=%d\\n\",\r\n\t  h.name, type(h), tostring(h.isstrict), tostring(h.isdirected),\r\n\t  h.nnodes, h.nedges, h.id)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 50,
    "text": "debug(\"  %q: type=%s strict=%s directed=%s nnodes=%d nedges=%d id=%d\\n\",\r\n\t  h.name, type(h), tostring(h.isstrict), tostring(h.isdirected),\r\n\t  h.nnodes, h.nedges, h.id)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "g[5], err = graph.read(\"___does__not__exist__\")",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "assert(g[5] == nil and type(err) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "for _,v in pairs(g) do \r\n    debug(\"closing %q\\n\", v.name)\r\n    assert(v:close()) \r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 54,
    "text": "debug(\"closing %q\\n\", v.name)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "assert(v:close())",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "intro(\"passed\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "local function test_graph_properties(g)\r\n  intro(\"Test graph: properties ...\")\r\n  -- Show properties\r\n  intro(\"passed\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 59,
    "text": "intro(\"Test graph: properties ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "local function test_graph_meta(g)\r\n  intro(\"Test graph: metamethods ...\")\r\n  local g1 = assert(graph.open(\"G1-meta\"))\r\n  local g2 = assert(graph.open(\"G2-meta\"))\r\n  local h = g1\r\n  assert(h == g1)\r\n  assert(h ~= g2)\r\n  g1:close()\r\n  g2:close()\r\n  collectgarbage(0)\r\n  intro(\"passed\\n\")\r\n  return h\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "intro(\"Test graph: metamethods ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "local g1 = assert(graph.open(\"G1-meta\"))",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "local g2 = assert(graph.open(\"G2-meta\"))",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "local h = g1",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "assert(h == g1)",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "assert(h ~= g2)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "g1:close()",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "g2:close()",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "collectgarbage(0)",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "local function test_graph_write()\r\n  intro(\"Test graph: write ...\")\r\n  local h = assert(graph.read(\"test/test_dat1.dot\"))\r\n  -- Write to stdout\r\n  gprint(h)\r\n  -- Write to file\r\n  local fn = os.tmpname()\r\n  h:write(fn)\r\n  -- Compare contents with reference\r\n  local fref = io.open(\"test/ref.dot\",\"r\")\r\n  local sref = fref:read(\"*a\")\r\n  local f = io.open(fn)\r\n  local s = f:read(\"*a\")\r\n  assert(s == sref)\r\n  fref:close()\r\n  f:close()\r\n  h:close()\r\n  intro(\"passed\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 73,
    "text": "intro(\"Test graph: write ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "local h = assert(graph.read(\"test/test_dat1.dot\"))",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "gprint(h)",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "h:write(fn)",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "local fref = io.open(\"test/ref.dot\",\"r\")",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "local sref = fref:read(\"*a\")",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "local f = io.open(fn)",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "local s = f:read(\"*a\")",
    "type": "statement:localassign"
  }, {
    "id": 81,
    "text": "assert(s == sref)",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "fref:close()",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "h:close()",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "local function test_graph_defattr()\r\n  intro(\"Test graph: default attributes ...\")\r\n  local h = assert(graph.read(\"test/test_dat1.dot\"))\r\n  -- Getting initial default attributes\r\n  debug(\"Initial default attributes:\\n\")\r\n  debug(\"  graphs:\\n\")\r\n  table.foreach(h:getgraphattr(), function(k,v) debug(\"    %s=%q\\n\", k, v) end)\r\n  debug(\"  nodes:\\n\")\r\n  table.foreach(h:getnodeattr(), function(k,v) debug(\"    %s=%q\\n\", k, v) end)\r\n  debug(\"  edges:\\n\")\r\n  table.foreach(h:getedgeattr(), function(k,v) debug(\"    %s=%q\\n\", k, v) end)\r\n  -- Set attributes in parent\r\n  debug(\"Default attributes after modifications:\\n\")\r\n  n = assert(h:setattr{\r\n\t       edge = {shape=\"box\", color=\"blue\", whatever=\"noidea\", anumber=71, ['3']=\"spu\"},\r\n\t       node = {color=\"red\", whatever=\"donotknow\", anumber=17, ['3'] = \"ups\"}\r\n\t     })\r\n  assert(n == 9)\r\n  local h2 = assert(h:subgraph(\"h2\"))\r\n  local hh3 = assert(graph.open(\"hh3\"))\r\n  local hh4 = assert(hh3:subgraph(\"hh4\"))\r\n\r\n  -- Check: parent shares attribute with client if client doesn't define something\r\n  --        different\r\n  assert(h2:defaults().edge.whatever == h:defaults().edge.whatever)\r\n\r\n  -- Set attributes in childs\r\n  assert(h:setattr{edge={att=\"att\"}})\r\n  assert(hh4:setattr{edge={att=\"tta\"}})\r\n  assert(h2:setattr{edge={att=\"xtt2\"}})\r\n  debug(\"  h.edge.att = %q\\n\", h:defaults().edge.att)\r\n  debug(\"  h2.edge.att = %q\\n\", h2:defaults().edge.att)\r\n  debug(\"  h3.edge.att = %q\\n\", hh3:defaults().edge.att or \"nil\")\r\n  debug(\"  h4.edge.att = %q\\n\", hh4:defaults().edge.att or \"nil\")\r\n\r\n  -- Check: child shares defaults with parent\r\n  assert(h:defaults().edge.att ~= h2:defaults().edge.att)\r\n  assert(hh3:defaults().edge.att == hh4:defaults().edge.att)\r\n\r\n  -- Check: defaults in different subtrees are not shared\r\n  assert(h:defaults().edge.att ~= hh3:defaults().edge.att)\r\n\r\n  h:close()\r\n  h2:close()\r\n  hh3:close()\r\n  hh4:close()\r\n  intro(\"passed\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 87,
    "text": "intro(\"Test graph: default attributes ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "debug(\"Initial default attributes:\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "debug(\"  graphs:\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "table.foreach(h:getgraphattr(), function(k,v) debug(\"    %s=%q\\n\", k, v) end)",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "debug(\"    %s=%q\\n\", k, v)",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "debug(\"  nodes:\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "table.foreach(h:getnodeattr(), function(k,v) debug(\"    %s=%q\\n\", k, v) end)",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "debug(\"  edges:\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "table.foreach(h:getedgeattr(), function(k,v) debug(\"    %s=%q\\n\", k, v) end)",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "debug(\"Default attributes after modifications:\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "n = assert(h:setattr{\r\n\t       edge = {shape=\"box\", color=\"blue\", whatever=\"noidea\", anumber=71, ['3']=\"spu\"},\r\n\t       node = {color=\"red\", whatever=\"donotknow\", anumber=17, ['3'] = \"ups\"}\r\n\t     })",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "assert(n == 9)",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "local h2 = assert(h:subgraph(\"h2\"))",
    "type": "statement:localassign"
  }, {
    "id": 100,
    "text": "local hh3 = assert(graph.open(\"hh3\"))",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "local hh4 = assert(hh3:subgraph(\"hh4\"))",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "assert(h2:defaults().edge.whatever == h:defaults().edge.whatever)",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "assert(h:setattr{edge={att=\"att\"}})",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "assert(hh4:setattr{edge={att=\"tta\"}})",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "assert(h2:setattr{edge={att=\"xtt2\"}})",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "debug(\"  h.edge.att = %q\\n\", h:defaults().edge.att)",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "debug(\"  h2.edge.att = %q\\n\", h2:defaults().edge.att)",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "debug(\"  h3.edge.att = %q\\n\", hh3:defaults().edge.att or \"nil\")",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "debug(\"  h4.edge.att = %q\\n\", hh4:defaults().edge.att or \"nil\")",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "assert(h:defaults().edge.att ~= h2:defaults().edge.att)",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "assert(hh3:defaults().edge.att == hh4:defaults().edge.att)",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "assert(h:defaults().edge.att ~= hh3:defaults().edge.att)",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "h2:close()",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "hh3:close()",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "hh4:close()",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 117,
    "text": "local function test_graph_subgraph()\r\n  intro(\"Test graph: subgraphs ...\")\r\n  local root = assert(graph.open(\"Root\", \"directed\"))\r\n  local mother = assert(root:subgraph(\"Mother\"))\r\n  local father = assert(root:subgraph(\"Father\"))\r\n  assert(father ~= root:subgraph(\"Mother\"))\r\n  local son = assert(mother:subgraph(\"Son\"))\r\n  local daughter = assert(father:subgraph(\"Daughter\"))\r\n  -- Print the tree\r\n  debug(\"root=%q mother=%q son=%q daughter=%q\\n\",\r\n\troot.name, mother.name, son.name, daughter.name)\r\n  debug(\"root=%d mother=%d son=%d daughter=%d\\n\",\r\n\troot.id, mother.id, son.id, daughter.id)\r\n  debug(\"%q: parent=%q root=%q\\n\", \r\n\tmother.name, mother.parent.name, mother.root.name)\r\n  debug(\"%q: parent=%q root=%q\\n\", \r\n\tson.name, son.parent.name, son.root.name)\r\n  debug(\"%q: parent=%q root=%q\\n\", \r\n\tdaughter.name, daughter.parent.name, daughter.root.name)\r\n  -- Check parent/root relations \r\n  assert(root == mother.parent)\r\n  assert(root == son.root)\r\n  assert(mother == son.parent)\r\n  assert(father == daughter.parent)\r\n  assert(root:subgraph(\"Mother\") == mother)\r\n  assert(root:subgraph(\"Father\") == father)\r\n  assert(root.isroot == true)\r\n  assert(mother.isroot == false)\r\n  assert(father.isroot == false)\r\n  assert(son.graph == son)\r\n  assert(root.graph == root)\r\n  rv, res1, res2 = pcall(root.subgraph, root)\r\n  assert(rv == false)\r\n  -- This must close all other graphs created here !\r\n  debug(\"Closing graph root ...\\n\")\r\n  root:close()\r\n  collectgarbage(0)\r\n  intro(\"passed\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 118,
    "text": "intro(\"Test graph: subgraphs ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "local root = assert(graph.open(\"Root\", \"directed\"))",
    "type": "statement:localassign"
  }, {
    "id": 120,
    "text": "local mother = assert(root:subgraph(\"Mother\"))",
    "type": "statement:localassign"
  }, {
    "id": 121,
    "text": "local father = assert(root:subgraph(\"Father\"))",
    "type": "statement:localassign"
  }, {
    "id": 122,
    "text": "assert(father ~= root:subgraph(\"Mother\"))",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "local son = assert(mother:subgraph(\"Son\"))",
    "type": "statement:localassign"
  }, {
    "id": 124,
    "text": "local daughter = assert(father:subgraph(\"Daughter\"))",
    "type": "statement:localassign"
  }, {
    "id": 125,
    "text": "debug(\"root=%q mother=%q son=%q daughter=%q\\n\",\r\n\troot.name, mother.name, son.name, daughter.name)",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "debug(\"root=%d mother=%d son=%d daughter=%d\\n\",\r\n\troot.id, mother.id, son.id, daughter.id)",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "debug(\"%q: parent=%q root=%q\\n\", \r\n\tmother.name, mother.parent.name, mother.root.name)",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "debug(\"%q: parent=%q root=%q\\n\", \r\n\tson.name, son.parent.name, son.root.name)",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "debug(\"%q: parent=%q root=%q\\n\", \r\n\tdaughter.name, daughter.parent.name, daughter.root.name)",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "assert(root == mother.parent)",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "assert(root == son.root)",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "assert(mother == son.parent)",
    "type": "statement:functioncall"
  }, {
    "id": 133,
    "text": "assert(father == daughter.parent)",
    "type": "statement:functioncall"
  }, {
    "id": 134,
    "text": "assert(root:subgraph(\"Mother\") == mother)",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "assert(root:subgraph(\"Father\") == father)",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "assert(root.isroot == true)",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "assert(mother.isroot == false)",
    "type": "statement:functioncall"
  }, {
    "id": 138,
    "text": "assert(father.isroot == false)",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "assert(son.graph == son)",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "assert(root.graph == root)",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "rv, res1, res2 = pcall(root.subgraph, root)",
    "type": "statement:assign"
  }, {
    "id": 142,
    "text": "assert(rv == false)",
    "type": "statement:functioncall"
  }, {
    "id": 143,
    "text": "debug(\"Closing graph root ...\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "root:close()",
    "type": "statement:functioncall"
  }, {
    "id": 145,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 146,
    "text": "local function test_graph_iterate()\r\n  intro(\"Test graph: graph iteration ...\")\r\n  local root = assert(graph.open(\"Root\", \"directed\"))\r\n  local mother = assert(root:subgraph(\"Mother\"))\r\n  local father = assert(root:subgraph(\"Father\"))\r\n  local son = assert(mother:subgraph(\"Son\"))\r\n  local daughter = assert(father:subgraph(\"Daughter\"))\r\n\r\n  -- Iteration 1\r\n  debug(\"Iteration 1\\n\")\r\n  local g = nil\r\n  repeat\r\n    g = root:getnext(g)\r\n    if g then\r\n      debug(\"  next of %s: %s\\n\", root.name, g.name)\r\n    end\r\n  until g == nil\r\n  \r\n  -- Iteration 2\r\n  debug(\"Iteration 2\\n\")\r\n  for g in root:walk() do\r\n    debug(\" %s\\n\", g.name)\r\n    for h in g:walk() do\r\n      debug(\"    %s\\n\", h.name)\r\n    end\r\n  end\r\n  \r\n  local g = {}\r\n  for i = 1, 20 do\r\n    g[i] = root:subgraph(\"sub-\"..i)\r\n  end\r\n  \r\n  -- Iteration 3\r\n  debug(\"Iteration 3\\n\")\r\n  local t = {}\r\n  for g in root:walk() do \r\n    assert(g.parent == root) \r\n  end\r\n\r\n  -- Closes all graphs\r\n  root:close()\r\n  collectgarbage(0)\r\n\r\n  -- Iteration 4\r\n  debug(\"Iteration 4\\n\")\r\n  g = assert(graph.read(\"test/test_dat2.dot\"))\r\n  for v in g:walkgraphs() do\r\n    debug(\" %s\\n\", v.name)\r\n    for w in v:walk() do\r\n      debug(\"   %s\\n\", w.name)\r\n    end\r\n  end\r\n  g:close()\r\n  intro(\"passed\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 147,
    "text": "intro(\"Test graph: graph iteration ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 148,
    "text": "debug(\"Iteration 1\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 149,
    "text": "local g = nil",
    "type": "statement:localassign"
  }, {
    "id": 150,
    "text": "repeat\r\n    g = root:getnext(g)\r\n    if g then\r\n      debug(\"  next of %s: %s\\n\", root.name, g.name)\r\n    end\r\n  until g == nil",
    "type": "statement:repeat"
  }, {
    "id": 151,
    "text": "g = root:getnext(g)",
    "type": "statement:assign"
  }, {
    "id": 152,
    "text": "if g then\r\n      debug(\"  next of %s: %s\\n\", root.name, g.name)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 153,
    "text": "debug(\"  next of %s: %s\\n\", root.name, g.name)",
    "type": "statement:functioncall"
  }, {
    "id": 154,
    "text": "debug(\"Iteration 2\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 155,
    "text": "for g in root:walk() do\r\n    debug(\" %s\\n\", g.name)\r\n    for h in g:walk() do\r\n      debug(\"    %s\\n\", h.name)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 156,
    "text": "debug(\" %s\\n\", g.name)",
    "type": "statement:functioncall"
  }, {
    "id": 157,
    "text": "for h in g:walk() do\r\n      debug(\"    %s\\n\", h.name)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 158,
    "text": "debug(\"    %s\\n\", h.name)",
    "type": "statement:functioncall"
  }, {
    "id": 159,
    "text": "local g = {}",
    "type": "statement:localassign"
  }, {
    "id": 160,
    "text": "for i = 1, 20 do\r\n    g[i] = root:subgraph(\"sub-\"..i)\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 161,
    "text": "g[i] = root:subgraph(\"sub-\"..i)",
    "type": "statement:assign"
  }, {
    "id": 162,
    "text": "debug(\"Iteration 3\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 163,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 164,
    "text": "for g in root:walk() do \r\n    assert(g.parent == root) \r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 165,
    "text": "assert(g.parent == root)",
    "type": "statement:functioncall"
  }, {
    "id": 166,
    "text": "debug(\"Iteration 4\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 167,
    "text": "g = assert(graph.read(\"test/test_dat2.dot\"))",
    "type": "statement:assign"
  }, {
    "id": 168,
    "text": "for v in g:walkgraphs() do\r\n    debug(\" %s\\n\", v.name)\r\n    for w in v:walk() do\r\n      debug(\"   %s\\n\", w.name)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 169,
    "text": "debug(\" %s\\n\", v.name)",
    "type": "statement:functioncall"
  }, {
    "id": 170,
    "text": "for w in v:walk() do\r\n      debug(\"   %s\\n\", w.name)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 171,
    "text": "debug(\"   %s\\n\", w.name)",
    "type": "statement:functioncall"
  }, {
    "id": 172,
    "text": "g:close()",
    "type": "statement:functioncall"
  }, {
    "id": 173,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 174,
    "text": "local function test_graph_strict()\r\n  intro(\"Test graph: strict ...\")\r\n  local g = graph.open(\"G\", \"strictdirected\")\r\n  local n1 = g:node(\"N1\")\r\n  local n2 = g:node(\"N2\")\r\n  local e1 = g:edge(n1, n2, \"n1=>n2\")\r\n  local e2 = g:edge(n1, n2, \"n1...n2\")\r\n  local e3 = g:edge(n2, n1, \"n2=>n1\")\r\n  local e4 = g:edge(n1, n1, \"n1=>n1\")\r\n  -- first edge must be present\r\n  assert(g:findedge(n1, n2, \"n1=>n2\"))\r\n  -- second edge must not be present\r\n  assert(not g:findedge(n1, n2, \"n1...n2\"))\r\n  g:close()\r\n  intro(\"passed\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 175,
    "text": "intro(\"Test graph: strict ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 176,
    "text": "local g = graph.open(\"G\", \"strictdirected\")",
    "type": "statement:localassign"
  }, {
    "id": 177,
    "text": "local n1 = g:node(\"N1\")",
    "type": "statement:localassign"
  }, {
    "id": 178,
    "text": "local n2 = g:node(\"N2\")",
    "type": "statement:localassign"
  }, {
    "id": 179,
    "text": "local e1 = g:edge(n1, n2, \"n1=>n2\")",
    "type": "statement:localassign"
  }, {
    "id": 180,
    "text": "local e2 = g:edge(n1, n2, \"n1...n2\")",
    "type": "statement:localassign"
  }, {
    "id": 181,
    "text": "local e3 = g:edge(n2, n1, \"n2=>n1\")",
    "type": "statement:localassign"
  }, {
    "id": 182,
    "text": "local e4 = g:edge(n1, n1, \"n1=>n1\")",
    "type": "statement:localassign"
  }, {
    "id": 183,
    "text": "assert(g:findedge(n1, n2, \"n1=>n2\"))",
    "type": "statement:functioncall"
  }, {
    "id": 184,
    "text": "assert(not g:findedge(n1, n2, \"n1...n2\"))",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 186,
    "text": "local function test_delete()\r\n  intro(\"Test graph: delete object ...\")\r\n  local g = graph.open(\"G-delete\")\r\n  local sg = g:subgraph(\"SG-delete\")\r\n  local ssg = sg:subgraph(\"SSG-delete\")\r\n  local rv, err  = g:delete(sg)\r\n  g:close()\r\n  collectgarbage(0)\r\n  intro(\"passed\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 187,
    "text": "intro(\"Test graph: delete object ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 188,
    "text": "local g = graph.open(\"G-delete\")",
    "type": "statement:localassign"
  }, {
    "id": 189,
    "text": "local sg = g:subgraph(\"SG-delete\")",
    "type": "statement:localassign"
  }, {
    "id": 190,
    "text": "local ssg = sg:subgraph(\"SSG-delete\")",
    "type": "statement:localassign"
  }, {
    "id": 191,
    "text": "local rv, err  = g:delete(sg)",
    "type": "statement:localassign"
  }, {
    "id": 192,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 193,
    "text": "local function test_close()\r\n  intro(\"Test graph: close ...\")\r\n  -- Closing graphs\r\n  local g = graph.open(\"G-close\")\r\n  local sg1 = assert(g:subgraph(\"SG1-close\"))\r\n  local sg2 = assert(g:subgraph(\"SG2-close\"))\r\n  local ssg1 = assert(sg1:subgraph(\"SSG1-close\"))\r\n  assert(g:close())\r\n  collectgarbage(0)\r\n  intro(\"passed\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 194,
    "text": "intro(\"Test graph: close ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 195,
    "text": "local g = graph.open(\"G-close\")",
    "type": "statement:localassign"
  }, {
    "id": 196,
    "text": "local sg1 = assert(g:subgraph(\"SG1-close\"))",
    "type": "statement:localassign"
  }, {
    "id": 197,
    "text": "local sg2 = assert(g:subgraph(\"SG2-close\"))",
    "type": "statement:localassign"
  }, {
    "id": 198,
    "text": "local ssg1 = assert(sg1:subgraph(\"SSG1-close\"))",
    "type": "statement:localassign"
  }, {
    "id": 199,
    "text": "assert(g:close())",
    "type": "statement:functioncall"
  }, {
    "id": 200,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 201,
    "text": "local function test_close_error()\r\n  intro(\"Test graph: close with error ...\")\r\n  local rv, err = pcall(graph.close, 0)\r\n  if not rv then debug(\"Error while closing: %q\\n\", err) end\r\n  intro(\"passed\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 202,
    "text": "intro(\"Test graph: close with error ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 203,
    "text": "local rv, err = pcall(graph.close, 0)",
    "type": "statement:localassign"
  }, {
    "id": 204,
    "text": "if not rv then debug(\"Error while closing: %q\\n\", err) end",
    "type": "statement:if"
  }, {
    "id": 205,
    "text": "debug(\"Error while closing: %q\\n\", err)",
    "type": "statement:functioncall"
  }, {
    "id": 206,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 207,
    "text": "local function test_node_base()\r\n  intro(\"Test node: base node tests ...\")\r\n  local g = assert(graph.open(\"G-base\"))\r\n\r\n  -- Implict creation\r\n  local n1 = assert(g:node(\"N1\"))\r\n  local n2 = assert(g:node(\"N2\"))\r\n  assert(g == n1.graph)\r\n  assert(g == n2.graph)\r\n  debug(\"n1 is %s\\n\", tostring(n1))\r\n  debug(\"graph of n1 is %q\\n\", n1.graph.name)\r\n  -- Lookup\r\n  debug(\"n1 is %s\\n\", tostring(g:node(\"N1\")))\r\n\r\n  -- A second node\r\n  local n2 = assert(g:node(\"N2\"))\r\n  debug(\"n2 is %s\\n\", tostring(n2))\r\n\r\n  g:close()\r\n  collectgarbage(0)\r\n  intro(\"passed\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 208,
    "text": "intro(\"Test node: base node tests ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 209,
    "text": "local g = assert(graph.open(\"G-base\"))",
    "type": "statement:localassign"
  }, {
    "id": 210,
    "text": "local n1 = assert(g:node(\"N1\"))",
    "type": "statement:localassign"
  }, {
    "id": 211,
    "text": "local n2 = assert(g:node(\"N2\"))",
    "type": "statement:localassign"
  }, {
    "id": 212,
    "text": "assert(g == n1.graph)",
    "type": "statement:functioncall"
  }, {
    "id": 213,
    "text": "assert(g == n2.graph)",
    "type": "statement:functioncall"
  }, {
    "id": 214,
    "text": "debug(\"n1 is %s\\n\", tostring(n1))",
    "type": "statement:functioncall"
  }, {
    "id": 215,
    "text": "debug(\"graph of n1 is %q\\n\", n1.graph.name)",
    "type": "statement:functioncall"
  }, {
    "id": 216,
    "text": "debug(\"n1 is %s\\n\", tostring(g:node(\"N1\")))",
    "type": "statement:functioncall"
  }, {
    "id": 217,
    "text": "debug(\"n2 is %s\\n\", tostring(n2))",
    "type": "statement:functioncall"
  }, {
    "id": 218,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 219,
    "text": "local function test_node_properties()\r\n  intro(\"Test node: node properties ...\")\r\n  local g = assert(graph.open(\"G\"))\r\n  local sg = assert(g:subgraph(\"SG\"))\r\n  local n1 = assert(g:node(\"Na1\"))\r\n  local n2 = assert(g:node(\"Na2\"))\r\n  local n3 = assert(sg:node(\"Na3\"))\r\n  debug(\"nx.id = %d %d %d\\n\", n1.id, n2.id, n3.id)\r\n  debug(\"nx.name = %q %q %q\\n\", n1.name, n2.name, n3.name)\r\n  debug(\"nx.graph = %q %q %q\\n\", n1.graph.name, n2.graph.name, n3.graph.name)\r\n  g:close()\r\n  collectgarbage(0)\r\n  intro(\"passed\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 220,
    "text": "intro(\"Test node: node properties ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 221,
    "text": "local g = assert(graph.open(\"G\"))",
    "type": "statement:localassign"
  }, {
    "id": 222,
    "text": "local sg = assert(g:subgraph(\"SG\"))",
    "type": "statement:localassign"
  }, {
    "id": 223,
    "text": "local n1 = assert(g:node(\"Na1\"))",
    "type": "statement:localassign"
  }, {
    "id": 224,
    "text": "local n2 = assert(g:node(\"Na2\"))",
    "type": "statement:localassign"
  }, {
    "id": 225,
    "text": "local n3 = assert(sg:node(\"Na3\"))",
    "type": "statement:localassign"
  }, {
    "id": 226,
    "text": "debug(\"nx.id = %d %d %d\\n\", n1.id, n2.id, n3.id)",
    "type": "statement:functioncall"
  }, {
    "id": 227,
    "text": "debug(\"nx.name = %q %q %q\\n\", n1.name, n2.name, n3.name)",
    "type": "statement:functioncall"
  }, {
    "id": 228,
    "text": "debug(\"nx.graph = %q %q %q\\n\", n1.graph.name, n2.graph.name, n3.graph.name)",
    "type": "statement:functioncall"
  }, {
    "id": 229,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 230,
    "text": "local function test_node_meta()\r\n  intro(\"Test node: node metamethods ...\")\r\n  local g = assert(graph.open(\"G\"))\r\n  local n1 = assert(g:node(\"Nx1\"))\r\n  local n2 = assert(g:node(\"Nx1\"))\r\n  local n3 = assert(g:node(\"Nx3\"))\r\n  assert(n1 == n2)\r\n  local e = assert(n1..n2)\r\n  e.label = \"n1 ==> n2\"\r\n  local e2 = assert(n3+n1)\r\n  e.label = \"n3 ==> n1\"\r\n  gprint(g)\r\n  local rv = assert(n1:delete())\r\n  -- Check whether userdata became invalid after node deletion\r\n  local rv, err = pcall(function(n) return n.name end, n1)\r\n  assert(rv == false)\r\n  debug(\"check userdata invalidation: rv=%s err=%q\\n\", tostring(rv), err)\r\n  g:close()\r\n  debug(\"Collecting garbage ...\\n\")\r\n  collectgarbage(0)\r\n  intro(\"passed\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 231,
    "text": "intro(\"Test node: node metamethods ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 232,
    "text": "local n1 = assert(g:node(\"Nx1\"))",
    "type": "statement:localassign"
  }, {
    "id": 233,
    "text": "local n2 = assert(g:node(\"Nx1\"))",
    "type": "statement:localassign"
  }, {
    "id": 234,
    "text": "local n3 = assert(g:node(\"Nx3\"))",
    "type": "statement:localassign"
  }, {
    "id": 235,
    "text": "assert(n1 == n2)",
    "type": "statement:functioncall"
  }, {
    "id": 236,
    "text": "local e = assert(n1..n2)",
    "type": "statement:localassign"
  }, {
    "id": 237,
    "text": "e.label = \"n1 ==> n2\"",
    "type": "statement:assign"
  }, {
    "id": 238,
    "text": "local e2 = assert(n3+n1)",
    "type": "statement:localassign"
  }, {
    "id": 239,
    "text": "e.label = \"n3 ==> n1\"",
    "type": "statement:assign"
  }, {
    "id": 240,
    "text": "gprint(g)",
    "type": "statement:functioncall"
  }, {
    "id": 241,
    "text": "local rv = assert(n1:delete())",
    "type": "statement:localassign"
  }, {
    "id": 242,
    "text": "local rv, err = pcall(function(n) return n.name end, n1)",
    "type": "statement:localassign"
  }, {
    "id": 243,
    "text": "debug(\"check userdata invalidation: rv=%s err=%q\\n\", tostring(rv), err)",
    "type": "statement:functioncall"
  }, {
    "id": 244,
    "text": "debug(\"Collecting garbage ...\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 245,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 246,
    "text": "local function test_node_subnode()\r\n  intro(\"Test node: subnodes ...\")\r\n  local g = assert(graph.open(\"G\"))\r\n  local sg1 = assert(g:subgraph(\"SG1\"))\r\n  local sg2 = assert(g:subgraph(\"SG2\"))\r\n  local n = assert(sg1:node(\"N1\"))\r\n  gprint(g)\r\n  local sn = assert(sg2:subnode(n, true))\r\n  assert(n == sn)\r\n  debug(\"n.name=%q sb.name=%q\\n\", n.name, sn.name)\r\n  debug(\"n.seq=%d sn.seq=%d\\n\", n.seq, sn.seq)\r\n  debug(\"n.id=%d sn.id=%d\\n\", n.id, sn.id)\r\n  gprint(g)\r\n  n:delete()\r\n  gprint(g)\r\n  sg1:close()\r\n  gprint(g)\r\n  g:close()\r\n  debug(\"Collecting garbage ...\\n\")\r\n  collectgarbage(0)\r\n  intro(\"passed\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 247,
    "text": "intro(\"Test node: subnodes ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 248,
    "text": "local sg1 = assert(g:subgraph(\"SG1\"))",
    "type": "statement:localassign"
  }, {
    "id": 249,
    "text": "local sg2 = assert(g:subgraph(\"SG2\"))",
    "type": "statement:localassign"
  }, {
    "id": 250,
    "text": "local n = assert(sg1:node(\"N1\"))",
    "type": "statement:localassign"
  }, {
    "id": 251,
    "text": "local sn = assert(sg2:subnode(n, true))",
    "type": "statement:localassign"
  }, {
    "id": 252,
    "text": "assert(n == sn)",
    "type": "statement:functioncall"
  }, {
    "id": 253,
    "text": "debug(\"n.name=%q sb.name=%q\\n\", n.name, sn.name)",
    "type": "statement:functioncall"
  }, {
    "id": 254,
    "text": "debug(\"n.seq=%d sn.seq=%d\\n\", n.seq, sn.seq)",
    "type": "statement:functioncall"
  }, {
    "id": 255,
    "text": "debug(\"n.id=%d sn.id=%d\\n\", n.id, sn.id)",
    "type": "statement:functioncall"
  }, {
    "id": 256,
    "text": "n:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 257,
    "text": "sg1:close()",
    "type": "statement:functioncall"
  }, {
    "id": 258,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 259,
    "text": "local function test_node_degree()\r\n  intro(\"Test node: node degree ...\")\r\n  local g = assert(graph.open(\"G-degree\"))\r\n  local n = assert(g:node(\"N1-degree\"))\r\n  local rv = assert(n:degree())\r\n  debug(\"n:degree() = %d\\n\", rv)\r\n  n:delete()\r\n  g:close()\r\n  collectgarbage(0)\r\n  intro(\"passed\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 260,
    "text": "intro(\"Test node: node degree ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 261,
    "text": "local g = assert(graph.open(\"G-degree\"))",
    "type": "statement:localassign"
  }, {
    "id": 262,
    "text": "local n = assert(g:node(\"N1-degree\"))",
    "type": "statement:localassign"
  }, {
    "id": 263,
    "text": "local rv = assert(n:degree())",
    "type": "statement:localassign"
  }, {
    "id": 264,
    "text": "debug(\"n:degree() = %d\\n\", rv)",
    "type": "statement:functioncall"
  }, {
    "id": 265,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 266,
    "text": "local function test_node_degree2()\r\n  intro(\"Test node: node degree ...\")\r\n  local g = graph.read(\"test/test_dat1.dot\")\r\n  local n = g:node(\"NE_WEST\")\r\n  debug(\"inputs: %d outputs: %d sum: %d\\n\", \r\n\tn:degree(\"*i\"), n:degree(\"*o\"), n:degree(\"*a\"))\r\n  assert(n:degree(\"*i\") == 3)\r\n  assert(n:degree(\"*o\") == 4)\r\n  assert(n:degree() == 7)\r\n  g:close()\r\n  intro(\"passed\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 267,
    "text": "local g = graph.read(\"test/test_dat1.dot\")",
    "type": "statement:localassign"
  }, {
    "id": 268,
    "text": "local n = g:node(\"NE_WEST\")",
    "type": "statement:localassign"
  }, {
    "id": 269,
    "text": "debug(\"inputs: %d outputs: %d sum: %d\\n\", \r\n\tn:degree(\"*i\"), n:degree(\"*o\"), n:degree(\"*a\"))",
    "type": "statement:functioncall"
  }, {
    "id": 270,
    "text": "assert(n:degree(\"*i\") == 3)",
    "type": "statement:functioncall"
  }, {
    "id": 271,
    "text": "assert(n:degree(\"*o\") == 4)",
    "type": "statement:functioncall"
  }, {
    "id": 272,
    "text": "assert(n:degree() == 7)",
    "type": "statement:functioncall"
  }, {
    "id": 273,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 274,
    "text": "local function test_node_iterate()\r\n  intro(\"Test node: node iteration ...\")\r\n  local g = assert(graph.open(\"G-nodeiter\"))\r\n  local n = {}\r\n  for i = 1, 20 do\r\n    n[i] = assert(g:node(\"N\"..i..\"-nodeiter\"))\r\n  end\r\n\r\n  -- Iteration 1\r\n  debug(\"Iteration 1\\n\")\r\n  local n = nil\r\n  repeat\r\n    n = g:nextnode(n)\r\n    if n then\r\n      debug(\"  next node of %s: %s %d\\n\", g.name, n.name, n.id)\r\n    end\r\n  until n == nil\r\n\r\n  -- Iteration 2\r\n  debug(\"Iteration 2\\n\")\r\n  for n in g:walknodes() do\r\n    debug(\"  %s\\n\", n.name)\r\n  end\r\n  g:close()\r\n\r\n  -- Iteration 3\r\n  debug(\"Iteration 3\\n\")\r\n  g = assert(graph.read(\"test/test_dat1.dot\"))\r\n  for n in g:walknodes() do\r\n    debug(\"  %s\\n\", n.name)\r\n  end\r\n\r\n  -- Iteration 4\r\n  debug(\"Iteration 4\\n\")\r\n  sg =assert(g:subgraph(\"SG\"))\r\n  sn1 = sg:node(\"SN1\")\r\n  sn2 = sg:node(\"SN2\")\r\n  for h in g:walk() do\r\n    debug(\"  sg.name=%s\\n\", h.name)\r\n    for n in h:walknodes() do\r\n      debug(\"    %s\\n\", n.name)\r\n    end\r\n  end\r\n  for n in g:walknodes() do\r\n    debug(\"  %s\\n\", n.name)\r\n  end\r\n  g:close()\r\n  collectgarbage(0)\r\n  intro(\"passed\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 275,
    "text": "intro(\"Test node: node iteration ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 276,
    "text": "local g = assert(graph.open(\"G-nodeiter\"))",
    "type": "statement:localassign"
  }, {
    "id": 277,
    "text": "local n = {}",
    "type": "statement:localassign"
  }, {
    "id": 278,
    "text": "for i = 1, 20 do\r\n    n[i] = assert(g:node(\"N\"..i..\"-nodeiter\"))\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 279,
    "text": "n[i] = assert(g:node(\"N\"..i..\"-nodeiter\"))",
    "type": "statement:assign"
  }, {
    "id": 280,
    "text": "local n = nil",
    "type": "statement:localassign"
  }, {
    "id": 281,
    "text": "repeat\r\n    n = g:nextnode(n)\r\n    if n then\r\n      debug(\"  next node of %s: %s %d\\n\", g.name, n.name, n.id)\r\n    end\r\n  until n == nil",
    "type": "statement:repeat"
  }, {
    "id": 282,
    "text": "n = g:nextnode(n)",
    "type": "statement:assign"
  }, {
    "id": 283,
    "text": "if n then\r\n      debug(\"  next node of %s: %s %d\\n\", g.name, n.name, n.id)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 284,
    "text": "debug(\"  next node of %s: %s %d\\n\", g.name, n.name, n.id)",
    "type": "statement:functioncall"
  }, {
    "id": 285,
    "text": "for n in g:walknodes() do\r\n    debug(\"  %s\\n\", n.name)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 286,
    "text": "debug(\"  %s\\n\", n.name)",
    "type": "statement:functioncall"
  }, {
    "id": 287,
    "text": "g = assert(graph.read(\"test/test_dat1.dot\"))",
    "type": "statement:assign"
  }, {
    "id": 288,
    "text": "sg =assert(g:subgraph(\"SG\"))",
    "type": "statement:assign"
  }, {
    "id": 289,
    "text": "sn1 = sg:node(\"SN1\")",
    "type": "statement:assign"
  }, {
    "id": 290,
    "text": "sn2 = sg:node(\"SN2\")",
    "type": "statement:assign"
  }, {
    "id": 291,
    "text": "for h in g:walk() do\r\n    debug(\"  sg.name=%s\\n\", h.name)\r\n    for n in h:walknodes() do\r\n      debug(\"    %s\\n\", n.name)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 292,
    "text": "debug(\"  sg.name=%s\\n\", h.name)",
    "type": "statement:functioncall"
  }, {
    "id": 293,
    "text": "for n in h:walknodes() do\r\n      debug(\"    %s\\n\", n.name)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 294,
    "text": "debug(\"    %s\\n\", n.name)",
    "type": "statement:functioncall"
  }, {
    "id": 295,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 296,
    "text": "local function test_edge_base()\r\n  intro(\"Test edge: edge base ...\")\r\n  local g = assert(graph.open(\"G\",\"strictdirected\"))\r\n  local sg = assert(g:subgraph(\"SG\"))\r\n  local n1 = assert(g:node(\"N1\"))\r\n  local n2 = assert(g:node(\"N2\"))\r\n  -- retrieve 'N2' into new variable for later use\r\n  local n3 = assert(g:node(\"N2\"))\r\n  -- 1. edge\r\n  local e1 = assert(g:edge(n1, n2, \"E1:N1=>N2\"))\r\n  assert(e1.label == \"E1:N1=>N2\")\r\n\r\n  -- 2. edge but with n3 instead of n2\r\n  local e3 = assert(g:edge(n3, n1, \"E2:N2=>N1\"))\r\n  assert(e1 ~= e3)\r\n  e1.headport = \"head\"\r\n  e3.tailport = \"tail\"\r\n  -- Insert a subgraph\r\n  local ns1 = assert(sg:node(\"SN1\"))\r\n  local ns2 = assert(sg:node(\"SN2\"))\r\n  local ns3 = assert(sg:node(\"SN3\"))\r\n  local es1 = assert(sg:edge(ns1, ns2, \"ES2\"))\r\n  local es2 = assert(g:edge(n1, ns2, \"XXX\"))\r\n  local es3 = assert(ns3:edge(n1, \"duda\"))\r\n  local es4 = assert(ns3:edge(\"IMP1\", \"ES2\"))\r\n  -- retrieve edge check\r\n  local e2 = assert(g:edge(n1, n2))\r\n  assert(e1 == e2)\r\n\r\n  -- check head and tail\r\n  assert(e1.tail == n1)\r\n  assert(e1.head == n2)\r\n  gprint(g)\r\n  e1:delete()\r\n  gprint(g)\r\n  g:close()\r\n  collectgarbage(0)\r\n  intro(\"passed\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 297,
    "text": "intro(\"Test edge: edge base ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 298,
    "text": "local g = assert(graph.open(\"G\",\"strictdirected\"))",
    "type": "statement:localassign"
  }, {
    "id": 299,
    "text": "local n3 = assert(g:node(\"N2\"))",
    "type": "statement:localassign"
  }, {
    "id": 300,
    "text": "local e1 = assert(g:edge(n1, n2, \"E1:N1=>N2\"))",
    "type": "statement:localassign"
  }, {
    "id": 301,
    "text": "assert(e1.label == \"E1:N1=>N2\")",
    "type": "statement:functioncall"
  }, {
    "id": 302,
    "text": "local e3 = assert(g:edge(n3, n1, \"E2:N2=>N1\"))",
    "type": "statement:localassign"
  }, {
    "id": 303,
    "text": "assert(e1 ~= e3)",
    "type": "statement:functioncall"
  }, {
    "id": 304,
    "text": "e1.headport = \"head\"",
    "type": "statement:assign"
  }, {
    "id": 305,
    "text": "e3.tailport = \"tail\"",
    "type": "statement:assign"
  }, {
    "id": 306,
    "text": "local ns1 = assert(sg:node(\"SN1\"))",
    "type": "statement:localassign"
  }, {
    "id": 307,
    "text": "local ns2 = assert(sg:node(\"SN2\"))",
    "type": "statement:localassign"
  }, {
    "id": 308,
    "text": "local ns3 = assert(sg:node(\"SN3\"))",
    "type": "statement:localassign"
  }, {
    "id": 309,
    "text": "local es1 = assert(sg:edge(ns1, ns2, \"ES2\"))",
    "type": "statement:localassign"
  }, {
    "id": 310,
    "text": "local es2 = assert(g:edge(n1, ns2, \"XXX\"))",
    "type": "statement:localassign"
  }, {
    "id": 311,
    "text": "local es3 = assert(ns3:edge(n1, \"duda\"))",
    "type": "statement:localassign"
  }, {
    "id": 312,
    "text": "local es4 = assert(ns3:edge(\"IMP1\", \"ES2\"))",
    "type": "statement:localassign"
  }, {
    "id": 313,
    "text": "local e2 = assert(g:edge(n1, n2))",
    "type": "statement:localassign"
  }, {
    "id": 314,
    "text": "assert(e1 == e2)",
    "type": "statement:functioncall"
  }, {
    "id": 315,
    "text": "assert(e1.tail == n1)",
    "type": "statement:functioncall"
  }, {
    "id": 316,
    "text": "assert(e1.head == n2)",
    "type": "statement:functioncall"
  }, {
    "id": 317,
    "text": "e1:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 318,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 319,
    "text": "local function test_edge_subedge()\r\n  intro(\"Test edge: subedges ...\")\r\n  local g = assert(graph.open(\"G\"))\r\n  local sg1 = assert(g:subgraph(\"SG1\"))\r\n  local sg2 = assert(g:subgraph(\"SG2\"))\r\n  local n1 = assert(sg1:node(\"N1\"))\r\n  local n2 = assert(sg1:node(\"N2\"))\r\n  local e1 = assert(n1:edge(n2, \"E1\"))\r\n  gprint(g)\r\n  local e2 = assert(sg2:subedge(e1, true))\r\n  assert(n1 == sg2:node(\"N1\"))\r\n  assert(n2 == sg2:node(\"N2\"))\r\n  assert(e1 == e2)\r\n  gprint(g)\r\n  g:close()\r\n  collectgarbage(0)\r\n  intro(\"passed\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 320,
    "text": "intro(\"Test edge: subedges ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 321,
    "text": "local n1 = assert(sg1:node(\"N1\"))",
    "type": "statement:localassign"
  }, {
    "id": 322,
    "text": "local n2 = assert(sg1:node(\"N2\"))",
    "type": "statement:localassign"
  }, {
    "id": 323,
    "text": "local e1 = assert(n1:edge(n2, \"E1\"))",
    "type": "statement:localassign"
  }, {
    "id": 324,
    "text": "local e2 = assert(sg2:subedge(e1, true))",
    "type": "statement:localassign"
  }, {
    "id": 325,
    "text": "assert(n1 == sg2:node(\"N1\"))",
    "type": "statement:functioncall"
  }, {
    "id": 326,
    "text": "assert(n2 == sg2:node(\"N2\"))",
    "type": "statement:functioncall"
  }, {
    "id": 327,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 328,
    "text": "local function test_edge_iterate()\r\n  intro(\"Test edge: iteration ...\")\r\n  local g = assert(graph.read(\"test/test_dat1.dot\"))\r\n  -- Iteration 1\r\n  if true then\r\n  debug(\"Iteration 1\\n\")\r\n  for n in g:walknodes() do\r\n    debug(\"  node: %q\\n\", n.name)\r\n    for e in n:walkedges() do\r\n      debug(\"    edge %d %q %q %s\\n\", e.id, e.name, e.label, tostring(e))\r\n      if e.tail then debug(\"    - tail: %q\\n\", e.tail.name) end\r\n      if e.head then debug(\"    - head: %q\\n\", e.head.name) end\r\n    end\r\n  end\r\n  end\r\n  -- Iteration 2\r\n  if true then\r\n  debug(\"Iteration 2\\n\")\r\n  for n in g:walknodes() do\r\n    debug(\"  node: %q\\n\", n.name)\r\n    for e in n:walkinputs() do\r\n      debug(\"    input %q\\n\", \"%\"..e.name)\r\n    end\r\n    for e in n:walkoutputs() do\r\n      debug(\"    output %q\\n\", \"%\"..e.name)\r\n    end\r\n  end\r\n  end\r\n  g:close()\r\n  collectgarbage(0)\r\n  intro(\"passed\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 329,
    "text": "intro(\"Test edge: iteration ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 330,
    "text": "local g = assert(graph.read(\"test/test_dat1.dot\"))",
    "type": "statement:localassign"
  }, {
    "id": 331,
    "text": "if true then\r\n  debug(\"Iteration 1\\n\")\r\n  for n in g:walknodes() do\r\n    debug(\"  node: %q\\n\", n.name)\r\n    for e in n:walkedges() do\r\n      debug(\"    edge %d %q %q %s\\n\", e.id, e.name, e.label, tostring(e))\r\n      if e.tail then debug(\"    - tail: %q\\n\", e.tail.name) end\r\n      if e.head then debug(\"    - head: %q\\n\", e.head.name) end\r\n    end\r\n  end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 332,
    "text": "for n in g:walknodes() do\r\n    debug(\"  node: %q\\n\", n.name)\r\n    for e in n:walkedges() do\r\n      debug(\"    edge %d %q %q %s\\n\", e.id, e.name, e.label, tostring(e))\r\n      if e.tail then debug(\"    - tail: %q\\n\", e.tail.name) end\r\n      if e.head then debug(\"    - head: %q\\n\", e.head.name) end\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 333,
    "text": "debug(\"  node: %q\\n\", n.name)",
    "type": "statement:functioncall"
  }, {
    "id": 334,
    "text": "for e in n:walkedges() do\r\n      debug(\"    edge %d %q %q %s\\n\", e.id, e.name, e.label, tostring(e))\r\n      if e.tail then debug(\"    - tail: %q\\n\", e.tail.name) end\r\n      if e.head then debug(\"    - head: %q\\n\", e.head.name) end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 335,
    "text": "debug(\"    edge %d %q %q %s\\n\", e.id, e.name, e.label, tostring(e))",
    "type": "statement:functioncall"
  }, {
    "id": 336,
    "text": "if e.tail then debug(\"    - tail: %q\\n\", e.tail.name) end",
    "type": "statement:if"
  }, {
    "id": 337,
    "text": "debug(\"    - tail: %q\\n\", e.tail.name)",
    "type": "statement:functioncall"
  }, {
    "id": 338,
    "text": "if e.head then debug(\"    - head: %q\\n\", e.head.name) end",
    "type": "statement:if"
  }, {
    "id": 339,
    "text": "debug(\"    - head: %q\\n\", e.head.name)",
    "type": "statement:functioncall"
  }, {
    "id": 340,
    "text": "if true then\r\n  debug(\"Iteration 2\\n\")\r\n  for n in g:walknodes() do\r\n    debug(\"  node: %q\\n\", n.name)\r\n    for e in n:walkinputs() do\r\n      debug(\"    input %q\\n\", \"%\"..e.name)\r\n    end\r\n    for e in n:walkoutputs() do\r\n      debug(\"    output %q\\n\", \"%\"..e.name)\r\n    end\r\n  end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 341,
    "text": "for n in g:walknodes() do\r\n    debug(\"  node: %q\\n\", n.name)\r\n    for e in n:walkinputs() do\r\n      debug(\"    input %q\\n\", \"%\"..e.name)\r\n    end\r\n    for e in n:walkoutputs() do\r\n      debug(\"    output %q\\n\", \"%\"..e.name)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 342,
    "text": "for e in n:walkinputs() do\r\n      debug(\"    input %q\\n\", \"%\"..e.name)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 343,
    "text": "debug(\"    input %q\\n\", \"%\"..e.name)",
    "type": "statement:functioncall"
  }, {
    "id": 344,
    "text": "for e in n:walkoutputs() do\r\n      debug(\"    output %q\\n\", \"%\"..e.name)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 345,
    "text": "debug(\"    output %q\\n\", \"%\"..e.name)",
    "type": "statement:functioncall"
  }, {
    "id": 346,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 347,
    "text": "local function test_rename()\r\n  intro(\"Test misc: renaming objects ...\")\r\n  local g = assert(graph.open(\"G\"))\r\n  local n = assert(g:node(\"N1\"))\r\n  local sg = assert(g:subgraph(\"SG\"))\r\n  gprint(g)\r\n  local rv = assert(n:rename(\"N2\") == \"N1\")\r\n  local rv = assert(g:rename(\"G1\") == \"G\")\r\n  assert(n.name == \"N2\")\r\n  assert(g.name == \"G1\")\r\n  local rv = assert(g:rename(\"G2\") == \"G1\")\r\n  local rv = assert(sg:rename(\"SG2\") == \"SG\")\r\n  local rv = assert(n:rename())\r\n  assert(n.name == \"node@\"..n.id)\r\n  gprint(g)\r\n  g:close()\r\n  intro(\"passed\\n\");\r\nend",
    "type": "function"
  }, {
    "id": 348,
    "text": "intro(\"Test misc: renaming objects ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 349,
    "text": "local n = assert(g:node(\"N1\"))",
    "type": "statement:localassign"
  }, {
    "id": 350,
    "text": "local rv = assert(n:rename(\"N2\") == \"N1\")",
    "type": "statement:localassign"
  }, {
    "id": 351,
    "text": "local rv = assert(g:rename(\"G1\") == \"G\")",
    "type": "statement:localassign"
  }, {
    "id": 352,
    "text": "assert(n.name == \"N2\")",
    "type": "statement:functioncall"
  }, {
    "id": 353,
    "text": "assert(g.name == \"G1\")",
    "type": "statement:functioncall"
  }, {
    "id": 354,
    "text": "local rv = assert(g:rename(\"G2\") == \"G1\")",
    "type": "statement:localassign"
  }, {
    "id": 355,
    "text": "local rv = assert(sg:rename(\"SG2\") == \"SG\")",
    "type": "statement:localassign"
  }, {
    "id": 356,
    "text": "local rv = assert(n:rename())",
    "type": "statement:localassign"
  }, {
    "id": 357,
    "text": "assert(n.name == \"node@\"..n.id)",
    "type": "statement:functioncall"
  }, {
    "id": 358,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 359,
    "text": "local function test_attr()\r\n  intro(\"Test misc: attribute access ...\")\r\n  local g = assert(graph.open(\"G\"))\r\n  assert(g:declare{\r\n\t   node = {shape=\"box\", color=\"blue\", width=3},\r\n\t   edge = {color=\"red\", label=\"\"}})\r\n  local n = assert(g:node(\"N1\"))\r\n  local n2 = assert(g:node(\"N2\"))\r\n  local n3 = assert(g:node(\"N3\"))\r\n  local e = assert(n:edge(n2, \"E1\"))\r\n  local e2 = assert(n:edge(n3, \"E2\"))\r\n  gprint(g)\r\n  -- Types\r\n  assert(g:type() == \"graph\")\r\n  assert(n2:type() == \"node\")\r\n  assert(e:type() == \"edge\")\r\n  -- Get\r\n  assert(n.shape == \"box\")\r\n  debug(\"1. shape: %q\\n\", n.shape)\r\n  -- Failed get\r\n--  rv, err = pcall(function () print(n.hello) end)\r\n--  assert(rv == false)\r\n--  debug(\"Test: failed get error: %q\\n\", err)\r\n  -- Set\r\n  n.shape = \"circle\"\r\n  n.width = 5\r\n  debug(\"2. shape: %s width: %d\\n\", n.shape, tonumber(n.width))\r\n  gprint(g)\r\n  -- Failed set\r\n--  rv, err = pcall(function(key, val) n[key] = val end, \"hello\", \"helloval\")\r\n--  assert(rv == false)\r\n--  debug(\"Test: failed set error: %q\\n\", err)\r\n  -- Implicit set\r\n  local xg = graph.open(\"XG\")\r\n  local xn = xg:node(\"XN\")\r\n  xn.anysym = \"anysym\"\r\n  local yn = xg:node(\"YN\")\r\n  debug(\"xn.anysym=%s\\n\", xn.anysym)\r\n  assert(xn.anysym == \"anysym\")\r\n  yn.anysym=\"none\"\r\n  debug(\"yn.anysym=%s\\n\", yn.anysym)\r\n  assert(yn.anysym == \"none\")\r\n  -- Just a try\r\n  n.shape=\"box\"\r\n  n2.shape=\"circle\"\r\n  n2.color=\"red\"\r\n  n.width=1\r\n  e.color = \"green\"\r\n  e.label = \"this is an edge\"\r\n  gshow(g)\r\n  intro(\"passed\\n\");\r\nend",
    "type": "function"
  }, {
    "id": 360,
    "text": "intro(\"Test misc: attribute access ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 361,
    "text": "assert(g:declare{\r\n\t   node = {shape=\"box\", color=\"blue\", width=3},\r\n\t   edge = {color=\"red\", label=\"\"}})",
    "type": "statement:functioncall"
  }, {
    "id": 362,
    "text": "local n3 = assert(g:node(\"N3\"))",
    "type": "statement:localassign"
  }, {
    "id": 363,
    "text": "local e = assert(n:edge(n2, \"E1\"))",
    "type": "statement:localassign"
  }, {
    "id": 364,
    "text": "local e2 = assert(n:edge(n3, \"E2\"))",
    "type": "statement:localassign"
  }, {
    "id": 365,
    "text": "assert(g:type() == \"graph\")",
    "type": "statement:functioncall"
  }, {
    "id": 366,
    "text": "assert(n2:type() == \"node\")",
    "type": "statement:functioncall"
  }, {
    "id": 367,
    "text": "assert(e:type() == \"edge\")",
    "type": "statement:functioncall"
  }, {
    "id": 368,
    "text": "assert(n.shape == \"box\")",
    "type": "statement:functioncall"
  }, {
    "id": 369,
    "text": "debug(\"1. shape: %q\\n\", n.shape)",
    "type": "statement:functioncall"
  }, {
    "id": 370,
    "text": "n.shape = \"circle\"",
    "type": "statement:assign"
  }, {
    "id": 371,
    "text": "n.width = 5",
    "type": "statement:assign"
  }, {
    "id": 372,
    "text": "debug(\"2. shape: %s width: %d\\n\", n.shape, tonumber(n.width))",
    "type": "statement:functioncall"
  }, {
    "id": 373,
    "text": "local xg = graph.open(\"XG\")",
    "type": "statement:localassign"
  }, {
    "id": 374,
    "text": "local xn = xg:node(\"XN\")",
    "type": "statement:localassign"
  }, {
    "id": 375,
    "text": "xn.anysym = \"anysym\"",
    "type": "statement:assign"
  }, {
    "id": 376,
    "text": "local yn = xg:node(\"YN\")",
    "type": "statement:localassign"
  }, {
    "id": 377,
    "text": "debug(\"xn.anysym=%s\\n\", xn.anysym)",
    "type": "statement:functioncall"
  }, {
    "id": 378,
    "text": "assert(xn.anysym == \"anysym\")",
    "type": "statement:functioncall"
  }, {
    "id": 379,
    "text": "yn.anysym=\"none\"",
    "type": "statement:assign"
  }, {
    "id": 380,
    "text": "debug(\"yn.anysym=%s\\n\", yn.anysym)",
    "type": "statement:functioncall"
  }, {
    "id": 381,
    "text": "assert(yn.anysym == \"none\")",
    "type": "statement:functioncall"
  }, {
    "id": 382,
    "text": "n.shape=\"box\"",
    "type": "statement:assign"
  }, {
    "id": 383,
    "text": "n2.shape=\"circle\"",
    "type": "statement:assign"
  }, {
    "id": 384,
    "text": "n2.color=\"red\"",
    "type": "statement:assign"
  }, {
    "id": 385,
    "text": "n.width=1",
    "type": "statement:assign"
  }, {
    "id": 386,
    "text": "e.color = \"green\"",
    "type": "statement:assign"
  }, {
    "id": 387,
    "text": "e.label = \"this is an edge\"",
    "type": "statement:assign"
  }, {
    "id": 388,
    "text": "gshow(g)",
    "type": "statement:functioncall"
  }, {
    "id": 389,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 390,
    "text": "local function test_anyattrib()\r\n  intro(\"Test misc: anyattrib  ...\")\r\n  g = assert(graph.open(\"G\"))\r\n  n1 = assert(g:node(\"N1\"))\r\n  n2 = assert(g:node(\"N2\"))\r\n  e1 = assert(g:edge(n1, n2, \"n1=>n2\"))\r\n  e2 = assert(g:edge(n2, n1, \"n2=>n1\"))\r\n  local t = {1,2,3}\r\n  n1.someval = t\r\n  assert(n1.someval == t)\r\n  n2.someval = true\r\n  assert(n2.someval == true)\r\n  n1.method = function(self, param) \r\n\t\tdebug(\"node name: %q %q\\n\", self.name, param) \r\n\t\treturn param  \r\n\t      end\r\n  e1.someval = 17.2\r\n  e2.method = function(self, param) \r\n\t\tdebug(\"edge label: %q %q\\n\", self.label, param) \r\n\t\treturn param\r\n\t      end\r\n  assert(n1:method(\"called n1\") == \"called n1\")\r\n  assert(e2:method(\"called e2\") == \"called e2\")\r\n  e2[t] = \"hey\"\r\n  assert(e2[t] == \"hey\")\r\n  assert(e2[n1.someval] == \"hey\")\r\n  intro(\"passed\\n\");\r\nend",
    "type": "function"
  }, {
    "id": 391,
    "text": "intro(\"Test misc: anyattrib  ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 392,
    "text": "g = assert(graph.open(\"G\"))",
    "type": "statement:assign"
  }, {
    "id": 393,
    "text": "n1 = assert(g:node(\"N1\"))",
    "type": "statement:assign"
  }, {
    "id": 394,
    "text": "n2 = assert(g:node(\"N2\"))",
    "type": "statement:assign"
  }, {
    "id": 395,
    "text": "e1 = assert(g:edge(n1, n2, \"n1=>n2\"))",
    "type": "statement:assign"
  }, {
    "id": 396,
    "text": "e2 = assert(g:edge(n2, n1, \"n2=>n1\"))",
    "type": "statement:assign"
  }, {
    "id": 397,
    "text": "local t = {1,2,3}",
    "type": "statement:localassign"
  }, {
    "id": 398,
    "text": "n1.someval = t",
    "type": "statement:assign"
  }, {
    "id": 399,
    "text": "assert(n1.someval == t)",
    "type": "statement:functioncall"
  }, {
    "id": 400,
    "text": "n2.someval = true",
    "type": "statement:assign"
  }, {
    "id": 401,
    "text": "assert(n2.someval == true)",
    "type": "statement:functioncall"
  }, {
    "id": 402,
    "text": "n1.method = function(self, param) \r\n\t\tdebug(\"node name: %q %q\\n\", self.name, param) \r\n\t\treturn param  \r\n\t      end",
    "type": "statement:assign"
  }, {
    "id": 403,
    "text": "debug(\"node name: %q %q\\n\", self.name, param)",
    "type": "statement:functioncall"
  }, {
    "id": 404,
    "text": "e1.someval = 17.2",
    "type": "statement:assign"
  }, {
    "id": 405,
    "text": "e2.method = function(self, param) \r\n\t\tdebug(\"edge label: %q %q\\n\", self.label, param) \r\n\t\treturn param\r\n\t      end",
    "type": "statement:assign"
  }, {
    "id": 406,
    "text": "debug(\"edge label: %q %q\\n\", self.label, param)",
    "type": "statement:functioncall"
  }, {
    "id": 407,
    "text": "assert(n1:method(\"called n1\") == \"called n1\")",
    "type": "statement:functioncall"
  }, {
    "id": 408,
    "text": "assert(e2:method(\"called e2\") == \"called e2\")",
    "type": "statement:functioncall"
  }, {
    "id": 409,
    "text": "e2[t] = \"hey\"",
    "type": "statement:assign"
  }, {
    "id": 410,
    "text": "assert(e2[t] == \"hey\")",
    "type": "statement:functioncall"
  }, {
    "id": 411,
    "text": "assert(e2[n1.someval] == \"hey\")",
    "type": "statement:functioncall"
  }, {
    "id": 412,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 413,
    "text": "function(self, param) \r\n\t\tdebug(\"node name: %q %q\\n\", self.name, param) \r\n\t\treturn param  \r\n\t      end",
    "type": "function"
  }, {
    "id": 414,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 415,
    "text": "function(self, param) \r\n\t\tdebug(\"edge label: %q %q\\n\", self.label, param) \r\n\t\treturn param\r\n\t      end",
    "type": "function"
  }, {
    "id": 416,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 417,
    "text": "local function test_contains()\r\n  intro(\"Test misc: containment  ...\")\r\n  local g1 = assert(graph.open(\"G1\"))\r\n  g1:declare{node={shape=\"box\"}}\r\n  local sg1 = assert(g1:subgraph(\"SG1\"))\r\n  local g2 = assert(graph.open(\"G2\"))\r\n  g2:declare{node={shape=\"box\"}}\r\n  local g3 = assert(graph.read(\"test/test_dat1.dot\"))\r\n  local n1 = assert(g1:node(\"N1\")) n1.shape=\"circle\"\r\n  local n2 = assert(g2:node(\"N2\"))\r\n  local n3 = assert(g2:node(\"N1\")) n3.shape=\"ellipse\"\r\n  local e1 = assert(g2:edge(n2,n3,\"n2->n3\"))\r\n  local e2 = assert(g1:edge(n1,n1,\"n1->n1\"))\r\n  local err, res1, res2 = pcall(function() local e3 = assert(g1:edge(n2,n1,\"n2->n1\")) end)\r\n  assert(err == false)\r\n  debug(\"Test: edge with nodes in different graphs: %q %q\\n\", tostring(res1), tostring(res2));\r\n  assert(g1:contains(n1) == true)\r\n  assert(g1:contains(n2) == false)\r\n  assert(g1:contains(n3) == false)\r\n  assert(g2:contains(n1) == false)\r\n  assert(g2:contains(n2) == true)\r\n  assert(g2:contains(n3) == true)\r\n  assert(g1:node(\"N2\", nil, true) == nil)\r\n  assert(g1:node(\"N1\", nil, true) == n1)\r\n  assert(g1:idnode(n1.id) == n1)\r\n  assert(g2:idnode(n2.id) ~= n3)\r\n  debug(\"n1.id=%d n2.id=%d n3.id=%d\\n\", n1.id, n2.id, n3.id)\r\n  debug(\"e1.graph=%q e2.graph=%q\\n\", e1.graph.name, e2.graph.name)\r\n  gprint(g1)\r\n  gprint(g2)\r\n--  print(n1:type(), n3:type()) \r\n--  print(n1.shape, n3.shape)\r\n--  print(\"g1:\", g1:contains(n1), g1:contains(n2), g1:contains(n3), g1:node(\"N2\", false), g1:node(\"N1\"))\r\n--  print(\"g2:\", g2:contains(n1), g2:contains(n2), g2:contains(n3), g2:node(\"N2\", false), g2:node(\"N1\"))\r\n  intro(\"passed\\n\");\r\nend",
    "type": "function"
  }, {
    "id": 418,
    "text": "intro(\"Test misc: containment  ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 419,
    "text": "local g1 = assert(graph.open(\"G1\"))",
    "type": "statement:localassign"
  }, {
    "id": 420,
    "text": "g1:declare{node={shape=\"box\"}}",
    "type": "statement:functioncall"
  }, {
    "id": 421,
    "text": "local sg1 = assert(g1:subgraph(\"SG1\"))",
    "type": "statement:localassign"
  }, {
    "id": 422,
    "text": "local g2 = assert(graph.open(\"G2\"))",
    "type": "statement:localassign"
  }, {
    "id": 423,
    "text": "g2:declare{node={shape=\"box\"}}",
    "type": "statement:functioncall"
  }, {
    "id": 424,
    "text": "local g3 = assert(graph.read(\"test/test_dat1.dot\"))",
    "type": "statement:localassign"
  }, {
    "id": 425,
    "text": "local n1 = assert(g1:node(\"N1\"))",
    "type": "statement:localassign"
  }, {
    "id": 426,
    "text": "n1.shape=\"circle\"",
    "type": "statement:assign"
  }, {
    "id": 427,
    "text": "local n2 = assert(g2:node(\"N2\"))",
    "type": "statement:localassign"
  }, {
    "id": 428,
    "text": "local n3 = assert(g2:node(\"N1\"))",
    "type": "statement:localassign"
  }, {
    "id": 429,
    "text": "n3.shape=\"ellipse\"",
    "type": "statement:assign"
  }, {
    "id": 430,
    "text": "local e1 = assert(g2:edge(n2,n3,\"n2->n3\"))",
    "type": "statement:localassign"
  }, {
    "id": 431,
    "text": "local e2 = assert(g1:edge(n1,n1,\"n1->n1\"))",
    "type": "statement:localassign"
  }, {
    "id": 432,
    "text": "local err, res1, res2 = pcall(function() local e3 = assert(g1:edge(n2,n1,\"n2->n1\")) end)",
    "type": "statement:localassign"
  }, {
    "id": 433,
    "text": "local e3 = assert(g1:edge(n2,n1,\"n2->n1\"))",
    "type": "statement:localassign"
  }, {
    "id": 434,
    "text": "assert(err == false)",
    "type": "statement:functioncall"
  }, {
    "id": 435,
    "text": "debug(\"Test: edge with nodes in different graphs: %q %q\\n\", tostring(res1), tostring(res2))",
    "type": "statement:functioncall"
  }, {
    "id": 436,
    "text": "assert(g1:contains(n1) == true)",
    "type": "statement:functioncall"
  }, {
    "id": 437,
    "text": "assert(g1:contains(n2) == false)",
    "type": "statement:functioncall"
  }, {
    "id": 438,
    "text": "assert(g1:contains(n3) == false)",
    "type": "statement:functioncall"
  }, {
    "id": 439,
    "text": "assert(g2:contains(n1) == false)",
    "type": "statement:functioncall"
  }, {
    "id": 440,
    "text": "assert(g2:contains(n2) == true)",
    "type": "statement:functioncall"
  }, {
    "id": 441,
    "text": "assert(g2:contains(n3) == true)",
    "type": "statement:functioncall"
  }, {
    "id": 442,
    "text": "assert(g1:node(\"N2\", nil, true) == nil)",
    "type": "statement:functioncall"
  }, {
    "id": 443,
    "text": "assert(g1:node(\"N1\", nil, true) == n1)",
    "type": "statement:functioncall"
  }, {
    "id": 444,
    "text": "assert(g1:idnode(n1.id) == n1)",
    "type": "statement:functioncall"
  }, {
    "id": 445,
    "text": "assert(g2:idnode(n2.id) ~= n3)",
    "type": "statement:functioncall"
  }, {
    "id": 446,
    "text": "debug(\"n1.id=%d n2.id=%d n3.id=%d\\n\", n1.id, n2.id, n3.id)",
    "type": "statement:functioncall"
  }, {
    "id": 447,
    "text": "debug(\"e1.graph=%q e2.graph=%q\\n\", e1.graph.name, e2.graph.name)",
    "type": "statement:functioncall"
  }, {
    "id": 448,
    "text": "gprint(g1)",
    "type": "statement:functioncall"
  }, {
    "id": 449,
    "text": "gprint(g2)",
    "type": "statement:functioncall"
  }, {
    "id": 450,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 451,
    "text": "local function test_find()\r\n  intro(\"Test misc: finding  ...\")\r\n  local g = assert(graph.read(\"test/test_dat1.dot\"))\r\n  local tail = g:findnode(\"NE_EAST\")\r\n  local head = g:findnode(\"CE_WEST\")\r\n  debug(\"tail.name = %q\\n\", tail.name)\r\n  debug(\"head.name = %q\\n\", head.name)\r\n  local e = g:findedge(tail, head)\r\n  assert(e.label == \"out1 => in2\")\r\n  debug(\"e.label = %q\\n\", e.label)\r\n  intro(\"passed\\n\");\r\nend",
    "type": "function"
  }, {
    "id": 452,
    "text": "intro(\"Test misc: finding  ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 453,
    "text": "local tail = g:findnode(\"NE_EAST\")",
    "type": "statement:localassign"
  }, {
    "id": 454,
    "text": "local head = g:findnode(\"CE_WEST\")",
    "type": "statement:localassign"
  }, {
    "id": 455,
    "text": "debug(\"tail.name = %q\\n\", tail.name)",
    "type": "statement:functioncall"
  }, {
    "id": 456,
    "text": "debug(\"head.name = %q\\n\", head.name)",
    "type": "statement:functioncall"
  }, {
    "id": 457,
    "text": "local e = g:findedge(tail, head)",
    "type": "statement:localassign"
  }, {
    "id": 458,
    "text": "assert(e.label == \"out1 => in2\")",
    "type": "statement:functioncall"
  }, {
    "id": 459,
    "text": "debug(\"e.label = %q\\n\", e.label)",
    "type": "statement:functioncall"
  }, {
    "id": 460,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 461,
    "text": "local function test_layout()\r\n  intro(\"Test layout: layout  ...\")\r\n  local g, t = graph.open(\"Gx\")\r\n  local e1 = g:edge{\"n1\", \"n2\", label=\"n1=>n2\"}\r\n  local fn = os.tmpname()\r\n  assert(g:layout())\r\n  debug(\"PLAIN:\\n\")\r\n  assert(g:render(\"plain\", fn))\r\n  debug(\"XDOT:\\n\")\r\n  assert(g:render(\"xdot\", fn))\r\n  os.remove(fn)\r\n  g:close()\r\n  intro(\"passed\\n\");\r\nend",
    "type": "function"
  }, {
    "id": 462,
    "text": "intro(\"Test layout: layout  ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 463,
    "text": "local g, t = graph.open(\"Gx\")",
    "type": "statement:localassign"
  }, {
    "id": 464,
    "text": "local e1 = g:edge{\"n1\", \"n2\", label=\"n1=>n2\"}",
    "type": "statement:localassign"
  }, {
    "id": 465,
    "text": "assert(g:layout())",
    "type": "statement:functioncall"
  }, {
    "id": 466,
    "text": "debug(\"PLAIN:\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 467,
    "text": "assert(g:render(\"plain\", fn))",
    "type": "statement:functioncall"
  }, {
    "id": 468,
    "text": "debug(\"XDOT:\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 469,
    "text": "assert(g:render(\"xdot\", fn))",
    "type": "statement:functioncall"
  }, {
    "id": 470,
    "text": "os.remove(fn)",
    "type": "statement:functioncall"
  }, {
    "id": 471,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 472,
    "text": "local function test_cluster()\r\n  intro(\"Test misc: cluster  ...\")\r\n  local g,t = graph.open(\"G\", \"directed\")\r\n  g:declare{node={shape = \"box\"}, edge={color=\"red\"}}\r\n  local c1 = g:cluster(\"SG1\")\r\n  local c2 = g:cluster(\"SG2\")\r\n  local n1 = c1:node{\"n1\", shape = \"circle\"}\r\n  local n2 = c2:node{\"n2\", shape = \"ellipse\"}\r\n  local n3 = c2:node{\"n3\"}\r\n  local e1 = g:edge(n2, n1, \"n2=>n1\")\r\n  local e2 = g:edge(n1, n2, \"n1=>n2\")\r\n  local e3 = g:edge{n1, n2, n3, label = \"n1=>n2=>n3\", color=\"blue\"}\r\n  assert(g:type(c1) == \"graph\")\r\n  assert(c1.parent == g)\r\n  assert(c2.parent == g)\r\n  gprint(g)\r\n  gshow(g)\r\n  g:close()\r\n  intro(\"passed\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 473,
    "text": "intro(\"Test misc: cluster  ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 474,
    "text": "local g,t = graph.open(\"G\", \"directed\")",
    "type": "statement:localassign"
  }, {
    "id": 475,
    "text": "g:declare{node={shape = \"box\"}, edge={color=\"red\"}}",
    "type": "statement:functioncall"
  }, {
    "id": 476,
    "text": "local c1 = g:cluster(\"SG1\")",
    "type": "statement:localassign"
  }, {
    "id": 477,
    "text": "local c2 = g:cluster(\"SG2\")",
    "type": "statement:localassign"
  }, {
    "id": 478,
    "text": "local n1 = c1:node{\"n1\", shape = \"circle\"}",
    "type": "statement:localassign"
  }, {
    "id": 479,
    "text": "local n2 = c2:node{\"n2\", shape = \"ellipse\"}",
    "type": "statement:localassign"
  }, {
    "id": 480,
    "text": "local n3 = c2:node{\"n3\"}",
    "type": "statement:localassign"
  }, {
    "id": 481,
    "text": "local e1 = g:edge(n2, n1, \"n2=>n1\")",
    "type": "statement:localassign"
  }, {
    "id": 482,
    "text": "local e2 = g:edge(n1, n2, \"n1=>n2\")",
    "type": "statement:localassign"
  }, {
    "id": 483,
    "text": "local e3 = g:edge{n1, n2, n3, label = \"n1=>n2=>n3\", color=\"blue\"}",
    "type": "statement:localassign"
  }, {
    "id": 484,
    "text": "assert(g:type(c1) == \"graph\")",
    "type": "statement:functioncall"
  }, {
    "id": 485,
    "text": "assert(c1.parent == g)",
    "type": "statement:functioncall"
  }, {
    "id": 486,
    "text": "assert(c2.parent == g)",
    "type": "statement:functioncall"
  }, {
    "id": 487,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 488,
    "text": "local function test_graphtab()\r\n  intro(\"Test misc: graph from table  ...\")\r\n  local node, edge, subgraph, cluster, digraph = \r\n    graph.node, graph.edge, graph.subgraph, graph.cluster, graph.digraph\r\n  xn = node{\"xn\", color=\"red\"}\r\n  local g = digraph{\"G\",\r\n    node = {shape = \"box\", color = \"blue\"},\r\n    edge = {color = \"red\"},\r\n    cluster{\"SG\",\r\n      edge{\r\n\tnode{\"sn1\"},\r\n\tnode{\"sn2\"},\r\n\txn\r\n      }\r\n    },\r\n    edge{\r\n      node{\"n1\", shape = \"box\", color = \"black\"},\r\n      node{\"n2\", shape = \"circle\"},\r\n      node{\"n3\", shape = \"ellipse\"},\r\n      xn,\r\n      label = \"n1=>n2=>n3\",\r\n      color = \"green\"\r\n    },\r\n    edge{\"sn2\", \"n1\", label=\"sn1=>n1\"}\r\n  }\r\n  debug(\"g.name=%q\\n\", g.name)\r\n  local s = tostring\r\n  for n in g:walknodes() do\r\n    debug(\"  n.name=%q n.shape=%q n.color=%q\\n\", \r\n\t   s(n.name), s(n.shape), s(n.color))\r\n    for e in n:walkedges() do\r\n      debug(\"    e.label=%q e.color=%q\\n\", s(e.label), s(e.color))\r\n    end\r\n  end\r\n  assert(g.nnodes == 6)\r\n  assert(g.nedges == 6)\r\n  debug(\"%d nodes\\n\", g.nnodes)\r\n  debug(\"%d edges\\n\", g.nedges)\r\n  gprint(g)\r\n  gshow(g)\r\n  g:close()\r\n  intro(\"passed\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 489,
    "text": "intro(\"Test misc: graph from table  ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 490,
    "text": "local node, edge, subgraph, cluster, digraph = \r\n    graph.node, graph.edge, graph.subgraph, graph.cluster, graph.digraph",
    "type": "statement:localassign"
  }, {
    "id": 491,
    "text": "xn = node{\"xn\", color=\"red\"}",
    "type": "statement:assign"
  }, {
    "id": 492,
    "text": "local g = digraph{\"G\",\r\n    node = {shape = \"box\", color = \"blue\"},\r\n    edge = {color = \"red\"},\r\n    cluster{\"SG\",\r\n      edge{\r\n\tnode{\"sn1\"},\r\n\tnode{\"sn2\"},\r\n\txn\r\n      }\r\n    },\r\n    edge{\r\n      node{\"n1\", shape = \"box\", color = \"black\"},\r\n      node{\"n2\", shape = \"circle\"},\r\n      node{\"n3\", shape = \"ellipse\"},\r\n      xn,\r\n      label = \"n1=>n2=>n3\",\r\n      color = \"green\"\r\n    },\r\n    edge{\"sn2\", \"n1\", label=\"sn1=>n1\"}\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 493,
    "text": "debug(\"g.name=%q\\n\", g.name)",
    "type": "statement:functioncall"
  }, {
    "id": 494,
    "text": "local s = tostring",
    "type": "statement:localassign"
  }, {
    "id": 495,
    "text": "for n in g:walknodes() do\r\n    debug(\"  n.name=%q n.shape=%q n.color=%q\\n\", \r\n\t   s(n.name), s(n.shape), s(n.color))\r\n    for e in n:walkedges() do\r\n      debug(\"    e.label=%q e.color=%q\\n\", s(e.label), s(e.color))\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 496,
    "text": "debug(\"  n.name=%q n.shape=%q n.color=%q\\n\", \r\n\t   s(n.name), s(n.shape), s(n.color))",
    "type": "statement:functioncall"
  }, {
    "id": 497,
    "text": "for e in n:walkedges() do\r\n      debug(\"    e.label=%q e.color=%q\\n\", s(e.label), s(e.color))\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 498,
    "text": "debug(\"    e.label=%q e.color=%q\\n\", s(e.label), s(e.color))",
    "type": "statement:functioncall"
  }, {
    "id": 499,
    "text": "assert(g.nnodes == 6)",
    "type": "statement:functioncall"
  }, {
    "id": 500,
    "text": "assert(g.nedges == 6)",
    "type": "statement:functioncall"
  }, {
    "id": 501,
    "text": "debug(\"%d nodes\\n\", g.nnodes)",
    "type": "statement:functioncall"
  }, {
    "id": 502,
    "text": "debug(\"%d edges\\n\", g.nedges)",
    "type": "statement:functioncall"
  }, {
    "id": 503,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 504,
    "text": "local function test_xx()\r\n  local g = graph.open(\"G\")\r\n  for i = 1,500 do\r\n    local n = g:node(\"A\"..i)\r\n    g:node(\"B\"..i):edge(n, \"E\"..i)\r\n  end\r\n  g:write(\"x3.dot\")\r\nend",
    "type": "function"
  }, {
    "id": 505,
    "text": "local g = graph.open(\"G\")",
    "type": "statement:localassign"
  }, {
    "id": 506,
    "text": "for i = 1,500 do\r\n    local n = g:node(\"A\"..i)\r\n    g:node(\"B\"..i):edge(n, \"E\"..i)\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 507,
    "text": "local n = g:node(\"A\"..i)",
    "type": "statement:localassign"
  }, {
    "id": 508,
    "text": "g:node(\"B\"..i):edge(n, \"E\"..i)",
    "type": "statement:functioncall"
  }, {
    "id": 509,
    "text": "g:write(\"x3.dot\")",
    "type": "statement:functioncall"
  }, {
    "id": 510,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 511,
    "text": "local function test()\r\n  for _, f in pairs(tests) do\r\n    f()\r\n    -- print(\">>> \", gcinfo())\r\n  end\r\n  -- print(\">>> \", gcinfo())\r\nend",
    "type": "function"
  }, {
    "id": 512,
    "text": "for _, f in pairs(tests) do\r\n    f()\r\n    -- print(\">>> \", gcinfo())\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 513,
    "text": "f()",
    "type": "statement:functioncall"
  }, {
    "id": 514,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 515,
    "text": "function(k,v) debug(\"    %s=%q\\n\", k, v) end",
    "type": "function"
  }, {
    "id": 516,
    "text": "function(k,v) debug(\"    %s=%q\\n\", k, v) end",
    "type": "function"
  }, {
    "id": 517,
    "text": "function(k,v) debug(\"    %s=%q\\n\", k, v) end",
    "type": "function"
  }, {
    "id": 518,
    "text": "function(n) return n.name end",
    "type": "function"
  }, {
    "id": 519,
    "text": "function() local e3 = assert(g1:edge(n2,n1,\"n2->n1\")) end",
    "type": "function"
  }, {
    "id": 520,
    "text": "",
    "type": "function container"
  }, {
    "id": 521,
    "text": "graph",
    "type": "module"
  }, {
    "id": 522,
    "text": "read",
    "type": "global function"
  }, {
    "id": 523,
    "text": "open",
    "type": "global function"
  }, {
    "id": 524,
    "text": "console",
    "type": "global function"
  }, {
    "id": 525,
    "text": "node",
    "type": "global function"
  }, {
    "id": 526,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 527,
    "text": "tmpname",
    "type": "global function"
  }, {
    "id": 528,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 529,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 530,
    "text": "s",
    "type": "global function"
  }, {
    "id": 531,
    "text": "print",
    "type": "global function"
  }, {
    "id": 532,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 533,
    "text": "edge",
    "type": "global function"
  }, {
    "id": 534,
    "text": "type",
    "type": "global function"
  }, {
    "id": 535,
    "text": "foreach",
    "type": "global function"
  }, {
    "id": 536,
    "text": "format",
    "type": "global function"
  }, {
    "id": 537,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 538,
    "text": "digraph",
    "type": "global function"
  }, {
    "id": 539,
    "text": "execute",
    "type": "global function"
  }, {
    "id": 540,
    "text": "upper",
    "type": "global function"
  }, {
    "id": 541,
    "text": "f",
    "type": "global function"
  }, {
    "id": 542,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 543,
    "text": "open",
    "type": "global function"
  }, {
    "id": 544,
    "text": "require",
    "type": "global function"
  }, {
    "id": 545,
    "text": "collectgarbage",
    "type": "global function"
  }, {
    "id": 546,
    "text": "cluster",
    "type": "global function"
  }, {
    "id": 547,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 548,
    "text": "",
    "type": "variable container"
  }, {
    "id": 549,
    "text": "",
    "type": "require container"
  }, {
    "id": 550,
    "text": "",
    "type": "local variable"
  }, {
    "id": 551,
    "text": "",
    "type": "boolean"
  }, {
    "id": 552,
    "text": "",
    "type": "local variable"
  }, {
    "id": 553,
    "text": "",
    "type": "boolean"
  }, {
    "id": 554,
    "text": "",
    "type": "local variable"
  }, {
    "id": 555,
    "text": "",
    "type": "n/a"
  }, {
    "id": 556,
    "text": "",
    "type": "local variable"
  }, {
    "id": 557,
    "text": "",
    "type": "n/a"
  }, {
    "id": 558,
    "text": "",
    "type": "local variable"
  }, {
    "id": 559,
    "text": "",
    "type": "n/a"
  }, {
    "id": 560,
    "text": "",
    "type": "local variable"
  }, {
    "id": 561,
    "text": "",
    "type": "n/a"
  }, {
    "id": 562,
    "text": "",
    "type": "local variable"
  }, {
    "id": 563,
    "text": "",
    "type": "n/a"
  }, {
    "id": 564,
    "text": "",
    "type": "local variable"
  }, {
    "id": 565,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 566,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 567,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 568,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 569,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 570,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 571,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 572,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 573,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 574,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 575,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 576,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 577,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 578,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 579,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 580,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 581,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 582,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 583,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 584,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 585,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 586,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 587,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 588,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 589,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 590,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 591,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 592,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 593,
    "text": "",
    "type": "require local variable"
  } ]
}