{
  "_filename": "compat-5.1.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luagraph/src/compat-5.1r5/compat-5.1.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 11
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 14
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 11
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 17,
    "label": "has",
    "to": 11
  }, {
    "from": 17,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 11
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 11
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 14
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 19
  }, {
    "from": 31,
    "label": "has",
    "to": 11
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 31,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 22
  }, {
    "from": 31,
    "label": "has",
    "to": 11
  }, {
    "from": 31,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 11
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 40,
    "label": "has",
    "to": 44
  }, {
    "from": 40,
    "label": "has",
    "to": 11
  }, {
    "from": 40,
    "label": "has",
    "to": 33
  }, {
    "from": 40,
    "label": "has",
    "to": 45
  }, {
    "from": 40,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 22
  }, {
    "from": 40,
    "label": "has",
    "to": 11
  }, {
    "from": 40,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 48,
    "label": "has",
    "to": 11
  }, {
    "from": 48,
    "label": "has",
    "to": 53
  }, {
    "from": 48,
    "label": "has",
    "to": 54
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 56,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 56,
    "label": "has",
    "to": 11
  }, {
    "from": 56,
    "label": "has",
    "to": 62
  }, {
    "from": 56,
    "label": "has",
    "to": 63
  }, {
    "from": 56,
    "label": "has",
    "to": 64
  }, {
    "from": 56,
    "label": "has",
    "to": 65
  }, {
    "from": 56,
    "label": "has",
    "to": 66
  }, {
    "from": 56,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 56,
    "label": "has",
    "to": 69
  }, {
    "from": 56,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 56,
    "label": "has",
    "to": 11
  }, {
    "from": 56,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 73,
    "label": "has",
    "to": 76
  }, {
    "from": 73,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 81
  }, {
    "from": 77,
    "label": "has",
    "to": 82
  }, {
    "from": 77,
    "label": "has",
    "to": 83
  }, {
    "from": 73,
    "label": "has",
    "to": 11
  }, {
    "from": 73,
    "label": "has",
    "to": 11
  }, {
    "from": 73,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 85,
    "label": "has",
    "to": 88
  }, {
    "from": 85,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 85,
    "label": "has",
    "to": 92
  }, {
    "from": 85,
    "label": "has",
    "to": 93
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 94,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 96,
    "label": "has",
    "to": 100
  }, {
    "from": 94,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 101,
    "label": "has",
    "to": 103
  }, {
    "from": 101,
    "label": "has",
    "to": 104
  }, {
    "from": 94,
    "label": "has",
    "to": 105
  }, {
    "from": 94,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 94,
    "label": "has",
    "to": 108
  }, {
    "from": 17,
    "label": "calls",
    "to": 2
  }, {
    "from": 31,
    "label": "calls",
    "to": 2
  }, {
    "from": 40,
    "label": "calls",
    "to": 2
  }, {
    "from": 2,
    "label": "calls",
    "to": 130
  }, {
    "from": 13,
    "label": "calls",
    "to": 130
  }, {
    "from": 17,
    "label": "calls",
    "to": 130
  }, {
    "from": 17,
    "label": "calls",
    "to": 130
  }, {
    "from": 31,
    "label": "calls",
    "to": 130
  }, {
    "from": 31,
    "label": "calls",
    "to": 130
  }, {
    "from": 40,
    "label": "calls",
    "to": 130
  }, {
    "from": 48,
    "label": "calls",
    "to": 130
  }, {
    "from": 56,
    "label": "calls",
    "to": 130
  }, {
    "from": 56,
    "label": "calls",
    "to": 130
  }, {
    "from": 2,
    "label": "calls",
    "to": 110
  }, {
    "from": 13,
    "label": "calls",
    "to": 110
  }, {
    "from": 13,
    "label": "calls",
    "to": 110
  }, {
    "from": 17,
    "label": "calls",
    "to": 110
  }, {
    "from": 31,
    "label": "calls",
    "to": 110
  }, {
    "from": 48,
    "label": "calls",
    "to": 110
  }, {
    "from": 56,
    "label": "calls",
    "to": 110
  }, {
    "from": 73,
    "label": "calls",
    "to": 110
  }, {
    "from": 85,
    "label": "calls",
    "to": 110
  }, {
    "from": 31,
    "label": "calls",
    "to": 28
  }, {
    "from": 109,
    "label": "calls",
    "to": 126
  }, {
    "from": 109,
    "label": "calls",
    "to": 126
  }, {
    "from": 2,
    "label": "calls",
    "to": 122
  }, {
    "from": 17,
    "label": "calls",
    "to": 123
  }, {
    "from": 31,
    "label": "calls",
    "to": 123
  }, {
    "from": 40,
    "label": "calls",
    "to": 123
  }, {
    "from": 48,
    "label": "calls",
    "to": 123
  }, {
    "from": 56,
    "label": "calls",
    "to": 123
  }, {
    "from": 94,
    "label": "calls",
    "to": 123
  }, {
    "from": 2,
    "label": "calls",
    "to": 115
  }, {
    "from": 2,
    "label": "calls",
    "to": 115
  }, {
    "from": 24,
    "label": "calls",
    "to": 115
  }, {
    "from": 24,
    "label": "calls",
    "to": 115
  }, {
    "from": 28,
    "label": "calls",
    "to": 115
  }, {
    "from": 40,
    "label": "calls",
    "to": 115
  }, {
    "from": 94,
    "label": "calls",
    "to": 115
  }, {
    "from": 17,
    "label": "calls",
    "to": 124
  }, {
    "from": 31,
    "label": "calls",
    "to": 24
  }, {
    "from": 40,
    "label": "calls",
    "to": 24
  }, {
    "from": 56,
    "label": "calls",
    "to": 116
  }, {
    "from": 48,
    "label": "calls",
    "to": 120
  }, {
    "from": 94,
    "label": "calls",
    "to": 73
  }, {
    "from": 48,
    "label": "calls",
    "to": 127
  }, {
    "from": 94,
    "label": "calls",
    "to": 127
  }, {
    "from": 85,
    "label": "calls",
    "to": 131
  }, {
    "from": 94,
    "label": "calls",
    "to": 119
  }, {
    "from": 73,
    "label": "calls",
    "to": 112
  }, {
    "from": 73,
    "label": "calls",
    "to": 112
  }, {
    "from": 73,
    "label": "calls",
    "to": 121
  }, {
    "from": 56,
    "label": "calls",
    "to": 48
  }, {
    "from": 73,
    "label": "calls",
    "to": 111
  }, {
    "from": 85,
    "label": "calls",
    "to": 129
  }, {
    "from": 73,
    "label": "calls",
    "to": 128
  }, {
    "from": 31,
    "label": "calls",
    "to": 125
  }, {
    "from": 31,
    "label": "calls",
    "to": 125
  }, {
    "from": 40,
    "label": "calls",
    "to": 125
  }, {
    "from": 2,
    "label": "calls",
    "to": 113
  }, {
    "from": 13,
    "label": "calls",
    "to": 113
  }, {
    "from": 13,
    "label": "calls",
    "to": 113
  }, {
    "from": 13,
    "label": "calls",
    "to": 113
  }, {
    "from": 17,
    "label": "calls",
    "to": 113
  }, {
    "from": 17,
    "label": "calls",
    "to": 113
  }, {
    "from": 31,
    "label": "calls",
    "to": 113
  }, {
    "from": 31,
    "label": "calls",
    "to": 113
  }, {
    "from": 48,
    "label": "calls",
    "to": 113
  }, {
    "from": 56,
    "label": "calls",
    "to": 113
  }, {
    "from": 56,
    "label": "calls",
    "to": 113
  }, {
    "from": 73,
    "label": "calls",
    "to": 113
  }, {
    "from": 73,
    "label": "calls",
    "to": 113
  }, {
    "from": 85,
    "label": "calls",
    "to": 113
  }, {
    "from": 94,
    "label": "calls",
    "to": 113
  }, {
    "from": 94,
    "label": "calls",
    "to": 117
  }, {
    "from": 2,
    "label": "calls",
    "to": 118
  }, {
    "from": 94,
    "label": "calls",
    "to": 114
  }, {
    "from": 1,
    "label": "contains",
    "to": 109
  }, {
    "from": 109,
    "label": "declares",
    "to": 2
  }, {
    "from": 109,
    "label": "declares",
    "to": 13
  }, {
    "from": 109,
    "label": "declares",
    "to": 17
  }, {
    "from": 109,
    "label": "declares",
    "to": 24
  }, {
    "from": 109,
    "label": "declares",
    "to": 28
  }, {
    "from": 109,
    "label": "declares",
    "to": 31
  }, {
    "from": 109,
    "label": "declares",
    "to": 40
  }, {
    "from": 109,
    "label": "declares",
    "to": 48
  }, {
    "from": 109,
    "label": "declares",
    "to": 55
  }, {
    "from": 109,
    "label": "declares",
    "to": 56
  }, {
    "from": 109,
    "label": "declares",
    "to": 73
  }, {
    "from": 109,
    "label": "declares",
    "to": 85
  }, {
    "from": 109,
    "label": "declares",
    "to": 94
  }, {
    "from": 1,
    "label": "contains",
    "to": 132
  }, {
    "from": 1,
    "label": "contains",
    "to": 133
  }, {
    "from": 132,
    "label": "initializes",
    "to": 134
  }, {
    "from": 134,
    "label": "assigns",
    "to": 135
  }, {
    "from": 132,
    "label": "initializes",
    "to": 136
  }, {
    "from": 136,
    "label": "assigns",
    "to": 137
  }, {
    "from": 132,
    "label": "initializes",
    "to": 138
  }, {
    "from": 138,
    "label": "assigns",
    "to": 139
  }, {
    "from": 132,
    "label": "initializes",
    "to": 140
  }, {
    "from": 140,
    "label": "assigns",
    "to": 141
  }, {
    "from": 132,
    "label": "initializes",
    "to": 142
  }, {
    "from": 142,
    "label": "assigns",
    "to": 143
  }, {
    "from": 132,
    "label": "initializes",
    "to": 144
  }, {
    "from": 144,
    "label": "assigns",
    "to": 145
  }, {
    "from": 132,
    "label": "initializes",
    "to": 146
  }, {
    "from": 146,
    "label": "assigns",
    "to": 147
  }, {
    "from": 132,
    "label": "initializes",
    "to": 148
  }, {
    "from": 148,
    "label": "assigns",
    "to": 149
  }, {
    "from": 132,
    "label": "initializes",
    "to": 150
  }, {
    "from": 150,
    "label": "assigns",
    "to": 151
  }, {
    "from": 132,
    "label": "initializes",
    "to": 152
  }, {
    "from": 152,
    "label": "assigns",
    "to": 153
  }, {
    "from": 132,
    "label": "initializes",
    "to": 154
  }, {
    "from": 154,
    "label": "assigns",
    "to": 155
  }, {
    "from": 132,
    "label": "initializes",
    "to": 156
  }, {
    "from": 156,
    "label": "assigns",
    "to": 157
  }, {
    "from": 132,
    "label": "initializes",
    "to": 158
  }, {
    "from": 158,
    "label": "assigns",
    "to": 159
  }, {
    "from": 132,
    "label": "initializes",
    "to": 160
  }, {
    "from": 160,
    "label": "assigns",
    "to": 161
  }, {
    "from": 132,
    "label": "initializes",
    "to": 162
  }, {
    "from": 162,
    "label": "assigns",
    "to": 163
  }, {
    "from": 132,
    "label": "initializes",
    "to": 164
  }, {
    "from": 164,
    "label": "assigns",
    "to": 165
  }, {
    "from": 132,
    "label": "initializes",
    "to": 166
  }, {
    "from": 166,
    "label": "assigns",
    "to": 167
  }, {
    "from": 132,
    "label": "initializes",
    "to": 168
  }, {
    "from": 168,
    "label": "assigns",
    "to": 169
  }, {
    "from": 132,
    "label": "initializes",
    "to": 170
  }, {
    "from": 170,
    "label": "assigns",
    "to": 171
  }, {
    "from": 132,
    "label": "initializes",
    "to": 172
  }, {
    "from": 172,
    "label": "assigns",
    "to": 173
  }, {
    "from": 132,
    "label": "initializes",
    "to": 174
  }, {
    "from": 174,
    "label": "assigns",
    "to": 175
  }, {
    "from": 132,
    "label": "initializes",
    "to": 176
  }, {
    "from": 176,
    "label": "assigns",
    "to": 177
  }, {
    "from": 132,
    "label": "initializes",
    "to": 178
  }, {
    "from": 178,
    "label": "assigns",
    "to": 179
  }, {
    "from": 132,
    "label": "initializes",
    "to": 180
  }, {
    "from": 180,
    "label": "assigns",
    "to": 181
  }, {
    "from": 132,
    "label": "initializes",
    "to": 182
  }, {
    "from": 182,
    "label": "assigns",
    "to": 183
  }, {
    "from": 132,
    "label": "initializes",
    "to": 184
  }, {
    "from": 184,
    "label": "assigns",
    "to": 185
  }, {
    "from": 132,
    "label": "initializes",
    "to": 186
  }, {
    "from": 132,
    "label": "initializes",
    "to": 187
  }, {
    "from": 187,
    "label": "assigns",
    "to": 188
  }, {
    "from": 132,
    "label": "initializes",
    "to": 189
  }, {
    "from": 189,
    "label": "assigns",
    "to": 190
  }, {
    "from": 132,
    "label": "initializes",
    "to": 191
  }, {
    "from": 191,
    "label": "assigns",
    "to": 192
  }, {
    "from": 132,
    "label": "initializes",
    "to": 193
  }, {
    "from": 193,
    "label": "assigns",
    "to": 194
  }, {
    "from": 132,
    "label": "initializes",
    "to": 195
  }, {
    "from": 195,
    "label": "assigns",
    "to": 196
  }, {
    "from": 132,
    "label": "initializes",
    "to": 197
  }, {
    "from": 197,
    "label": "assigns",
    "to": 198
  }, {
    "from": 132,
    "label": "initializes",
    "to": 199
  }, {
    "from": 199,
    "label": "assigns",
    "to": 200
  }, {
    "from": 132,
    "label": "initializes",
    "to": 201
  }, {
    "from": 201,
    "label": "assigns",
    "to": 202
  }, {
    "from": 132,
    "label": "initializes",
    "to": 203
  }, {
    "from": 203,
    "label": "assigns",
    "to": 204
  }, {
    "from": 132,
    "label": "initializes",
    "to": 205
  }, {
    "from": 205,
    "label": "assigns",
    "to": 206
  }, {
    "from": 132,
    "label": "initializes",
    "to": 207
  }, {
    "from": 207,
    "label": "assigns",
    "to": 208
  }, {
    "from": 132,
    "label": "initializes",
    "to": 209
  }, {
    "from": 209,
    "label": "assigns",
    "to": 210
  }, {
    "from": 132,
    "label": "initializes",
    "to": 211
  }, {
    "from": 211,
    "label": "assigns",
    "to": 212
  }, {
    "from": 132,
    "label": "initializes",
    "to": 213
  }, {
    "from": 213,
    "label": "assigns",
    "to": 214
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "compat-5",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function findfile (name, pname)\r\n\tname = gsub (name, \"%.\", LUA_DIRSEP)\r\n\tlocal path = _PACKAGE[pname]\r\n\tassert (type(path) == \"string\", format (\"package.%s must be a string\", pname))\r\n\tfor c in gfind (path, \"[^;]+\") do\r\n\t\tc = gsub (c, \"%\"..LUA_PATH_MARK, name)\r\n\t\tlocal f = io.open (c)\r\n\t\tif f then\r\n\t\t\tf:close ()\r\n\t\t\treturn c\r\n\t\tend\r\n\tend\r\n\treturn nil -- not found\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "name = gsub (name, \"%.\", LUA_DIRSEP)",
    "type": "statement:assign"
  }, {
    "id": 4,
    "text": "local path = _PACKAGE[pname]",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "assert (type(path) == \"string\", format (\"package.%s must be a string\", pname))",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "for c in gfind (path, \"[^;]+\") do\r\n\t\tc = gsub (c, \"%\"..LUA_PATH_MARK, name)\r\n\t\tlocal f = io.open (c)\r\n\t\tif f then\r\n\t\t\tf:close ()\r\n\t\t\treturn c\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 7,
    "text": "c = gsub (c, \"%\"..LUA_PATH_MARK, name)",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "local f = io.open (c)",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "if f then\r\n\t\t\tf:close ()\r\n\t\t\treturn c\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "f:close ()",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "local function loader_preload (name)\r\n\tassert (type(name) == \"string\", format (\r\n\t\t\"bad argument #1 to `require' (string expected, got %s)\", type(name)))\r\n\tassert (type(_PRELOAD) == \"table\", \"`package.preload' must be a table\")\r\n\treturn _PRELOAD[name]\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "assert (type(name) == \"string\", format (\r\n\t\t\"bad argument #1 to `require' (string expected, got %s)\", type(name)))",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "assert (type(_PRELOAD) == \"table\", \"`package.preload' must be a table\")",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "local function loader_Lua (name)\r\n\tassert (type(name) == \"string\", format (\r\n\t\t\"bad argument #1 to `require' (string expected, got %s)\", type(name)))\r\n\tlocal filename = findfile (name, \"path\")\r\n\tif not filename then\r\n\t\treturn false\r\n\tend\r\n\tlocal f, err = loadfile (filename)\r\n\tif not f then\r\n\t\terror (format (\"error loading module `%s' (%s)\", name, err))\r\n\tend\r\n\treturn f\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "local filename = findfile (name, \"path\")",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "if not filename then\r\n\t\treturn false\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "local f, err = loadfile (filename)",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "if not f then\r\n\t\terror (format (\"error loading module `%s' (%s)\", name, err))\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "error (format (\"error loading module `%s' (%s)\", name, err))",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "local function mkfuncname (name)\r\n\tname = gsub (name, \"^.*%\"..LUA_IGMARK, \"\")\r\n\tname = gsub (name, \"%.\", LUA_OFSEP)\r\n\treturn POF..name\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "name = gsub (name, \"^.*%\"..LUA_IGMARK, \"\")",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "name = gsub (name, \"%.\", LUA_OFSEP)",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "local function old_mkfuncname (name)\r\n\t--name = gsub (name, \"^.*%\"..LUA_IGMARK, \"\")\r\n\tname = gsub (name, \"%.\", OLD_LUA_OFSEP)\r\n\treturn POF..name\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "name = gsub (name, \"%.\", OLD_LUA_OFSEP)",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "local function loader_C (name)\r\n\tassert (type(name) == \"string\", format (\r\n\t\t\"bad argument #1 to `require' (string expected, got %s)\", type(name)))\r\n\tlocal filename = findfile (name, \"cpath\")\r\n\tif not filename then\r\n\t\treturn false\r\n\tend\r\n\tlocal funcname = mkfuncname (name)\r\n\tlocal f, err = loadlib (filename, funcname)\r\n\tif not f then\r\n\t\tfuncname = old_mkfuncname (name)\r\n\t\tf, err = loadlib (filename, funcname)\r\n\t\tif not f then\r\n\t\t\terror (format (\"error loading module `%s' (%s)\", name, err))\r\n\t\tend\r\n\tend\r\n\treturn f\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "local filename = findfile (name, \"cpath\")",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "local funcname = mkfuncname (name)",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "local f, err = loadlib (filename, funcname)",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "if not f then\r\n\t\tfuncname = old_mkfuncname (name)\r\n\t\tf, err = loadlib (filename, funcname)\r\n\t\tif not f then\r\n\t\t\terror (format (\"error loading module `%s' (%s)\", name, err))\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "funcname = old_mkfuncname (name)",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "f, err = loadlib (filename, funcname)",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "if not f then\r\n\t\t\terror (format (\"error loading module `%s' (%s)\", name, err))\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "local function loader_Croot (name)\r\n\tlocal p = gsub (name, \"^([^.]*).-$\", \"%1\")\r\n\tif p == \"\" then\r\n\t\treturn\r\n\tend\r\n\tlocal filename = findfile (p, \"cpath\")\r\n\tif not filename then\r\n\t\treturn\r\n\tend\r\n\tlocal funcname = mkfuncname (name)\r\n\tlocal f, err, where = loadlib (filename, funcname)\r\n\tif f then\r\n\t\treturn f\r\n\telseif where ~= \"init\" then\r\n\t\terror (format (\"error loading module `%s' (%s)\", name, err))\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "local p = gsub (name, \"^([^.]*).-$\", \"%1\")",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "if p == \"\" then\r\n\t\treturn\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "local filename = findfile (p, \"cpath\")",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "if not filename then\r\n\t\treturn\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "local f, err, where = loadlib (filename, funcname)",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "if f then\r\n\t\treturn f\r\n\telseif where ~= \"init\" then\r\n\t\terror (format (\"error loading module `%s' (%s)\", name, err))\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "local function load (name, loaders)\r\n\t-- iterate over available loaders\r\n\tassert (type (loaders) == \"table\", \"`package.loaders' must be a table\")\r\n\tfor i, loader in ipairs (loaders) do\r\n\t\tlocal f = loader (name)\r\n\t\tif f then\r\n\t\t\treturn f\r\n\t\tend\r\n\tend\r\n\terror (format (\"module `%s' not found\", name))\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "assert (type (loaders) == \"table\", \"`package.loaders' must be a table\")",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "for i, loader in ipairs (loaders) do\r\n\t\tlocal f = loader (name)\r\n\t\tif f then\r\n\t\t\treturn f\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 51,
    "text": "local f = loader (name)",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "if f then\r\n\t\t\treturn f\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "error (format (\"module `%s' not found\", name))",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "function () end",
    "type": "function"
  }, {
    "id": 56,
    "text": "function _G.require (modname)\r\n\tassert (type(modname) == \"string\", format (\r\n\t\t\"bad argument #1 to `require' (string expected, got %s)\", type(name)))\r\n\tlocal p = _LOADED[modname]\r\n\tif p then -- is it there?\r\n\t\tif p == sentinel then\r\n\t\t\terror (format (\"loop or previous error loading module '%s'\", modname))\r\n\t\tend\r\n\t\treturn p -- package is already loaded\r\n\tend\r\n\tlocal init = load (modname, _LOADERS)\r\n\t_LOADED[modname] = sentinel\r\n\tlocal actual_arg = _G.arg\r\n\t_G.arg = { modname }\r\n\tlocal res = init (modname)\r\n\tif res then\r\n\t\t_LOADED[modname] = res\r\n\tend\r\n\t_G.arg = actual_arg\r\n\tif _LOADED[modname] == sentinel then\r\n\t\t_LOADED[modname] = true\r\n\tend\r\n\treturn _LOADED[modname]\r\nend",
    "type": "function"
  }, {
    "id": 57,
    "text": "assert (type(modname) == \"string\", format (\r\n\t\t\"bad argument #1 to `require' (string expected, got %s)\", type(name)))",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "local p = _LOADED[modname]",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "if p then -- is it there?\r\n\t\tif p == sentinel then\r\n\t\t\terror (format (\"loop or previous error loading module '%s'\", modname))\r\n\t\tend\r\n\t\treturn p -- package is already loaded\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "if p == sentinel then\r\n\t\t\terror (format (\"loop or previous error loading module '%s'\", modname))\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "error (format (\"loop or previous error loading module '%s'\", modname))",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "local init = load (modname, _LOADERS)",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "_LOADED[modname] = sentinel",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "local actual_arg = _G.arg",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "_G.arg = { modname }",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "local res = init (modname)",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "if res then\r\n\t\t_LOADED[modname] = res\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "_LOADED[modname] = res",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "_G.arg = actual_arg",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "if _LOADED[modname] == sentinel then\r\n\t\t_LOADED[modname] = true\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "_LOADED[modname] = true",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "local function findtable (t, f)\r\n\tassert (type(f)==\"string\", \"not a valid field name (\"..tostring(f)..\")\")\r\n\tlocal ff = f..\".\"\r\n\tlocal ok, e, w = find (ff, '(.-)%.', 1)\r\n\twhile ok do\r\n\t\tlocal nt = rawget (t, w)\r\n\t\tif not nt then\r\n\t\t\tnt = {}\r\n\t\t\tt[w] = nt\r\n\t\telseif type(t) ~= \"table\" then\r\n\t\t\treturn sub (f, e+1)\r\n\t\tend\r\n\t\tt = nt\r\n\t\tok, e, w = find (ff, '(.-)%.', e+1)\r\n\tend\r\n\treturn t\r\nend",
    "type": "function"
  }, {
    "id": 74,
    "text": "assert (type(f)==\"string\", \"not a valid field name (\"..tostring(f)..\")\")",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "local ff = f..\".\"",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "local ok, e, w = find (ff, '(.-)%.', 1)",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "while ok do\r\n\t\tlocal nt = rawget (t, w)\r\n\t\tif not nt then\r\n\t\t\tnt = {}\r\n\t\t\tt[w] = nt\r\n\t\telseif type(t) ~= \"table\" then\r\n\t\t\treturn sub (f, e+1)\r\n\t\tend\r\n\t\tt = nt\r\n\t\tok, e, w = find (ff, '(.-)%.', e+1)\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 78,
    "text": "local nt = rawget (t, w)",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "if not nt then\r\n\t\t\tnt = {}\r\n\t\t\tt[w] = nt\r\n\t\telseif type(t) ~= \"table\" then\r\n\t\t\treturn sub (f, e+1)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 80,
    "text": "nt = {}",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "t[w] = nt",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "t = nt",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "ok, e, w = find (ff, '(.-)%.', e+1)",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "function _PACKAGE.seeall (module)\r\n\tlocal t = type(module)\r\n\tassert (t == \"table\", \"bad argument #1 to package.seeall (table expected, got \"..t..\")\")\r\n\tlocal meta = getmetatable (module)\r\n\tif not meta then\r\n\t\tmeta = {}\r\n\t\tsetmetatable (module, meta)\r\n\tend\r\n\tmeta.__index = _G\r\nend",
    "type": "function"
  }, {
    "id": 86,
    "text": "local t = type(module)",
    "type": "statement:localassign"
  }, {
    "id": 87,
    "text": "assert (t == \"table\", \"bad argument #1 to package.seeall (table expected, got \"..t..\")\")",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "local meta = getmetatable (module)",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "if not meta then\r\n\t\tmeta = {}\r\n\t\tsetmetatable (module, meta)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 90,
    "text": "meta = {}",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "setmetatable (module, meta)",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "meta.__index = _G",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 94,
    "text": "function _G.module (modname, ...)\r\n\tlocal ns = _LOADED[modname]\r\n\tif type(ns) ~= \"table\" then\r\n\t\tns = findtable (_G, modname)\r\n\t\tif not ns then\r\n\t\t\terror (string.format (\"name conflict for module '%s'\", modname))\r\n\t\tend\r\n\t\t_LOADED[modname] = ns\r\n\tend\r\n\tif not ns._NAME then\r\n\t\tns._NAME = modname\r\n\t\tns._M = ns\r\n\t\tns._PACKAGE = gsub (modname, \"[^.]*$\", \"\")\r\n\tend\r\n\tsetfenv (2, ns)\r\n\tfor i, f in ipairs (arg) do\r\n\t\tf (ns)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 95,
    "text": "local ns = _LOADED[modname]",
    "type": "statement:localassign"
  }, {
    "id": 96,
    "text": "if type(ns) ~= \"table\" then\r\n\t\tns = findtable (_G, modname)\r\n\t\tif not ns then\r\n\t\t\terror (string.format (\"name conflict for module '%s'\", modname))\r\n\t\tend\r\n\t\t_LOADED[modname] = ns\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "ns = findtable (_G, modname)",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "if not ns then\r\n\t\t\terror (string.format (\"name conflict for module '%s'\", modname))\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 99,
    "text": "error (string.format (\"name conflict for module '%s'\", modname))",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "_LOADED[modname] = ns",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "if not ns._NAME then\r\n\t\tns._NAME = modname\r\n\t\tns._M = ns\r\n\t\tns._PACKAGE = gsub (modname, \"[^.]*$\", \"\")\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 102,
    "text": "ns._NAME = modname",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "ns._M = ns",
    "type": "statement:assign"
  }, {
    "id": 104,
    "text": "ns._PACKAGE = gsub (modname, \"[^.]*$\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "setfenv (2, ns)",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "for i, f in ipairs (arg) do\r\n\t\tf (ns)\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 107,
    "text": "f (ns)",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 109,
    "text": "",
    "type": "function container"
  }, {
    "id": 110,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 111,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 112,
    "text": "find",
    "type": "global function"
  }, {
    "id": 113,
    "text": "type",
    "type": "global function"
  }, {
    "id": 114,
    "text": "format",
    "type": "global function"
  }, {
    "id": 115,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 116,
    "text": "init",
    "type": "global function"
  }, {
    "id": 117,
    "text": "setfenv",
    "type": "global function"
  }, {
    "id": 118,
    "text": "gfind",
    "type": "global function"
  }, {
    "id": 119,
    "text": "f",
    "type": "global function"
  }, {
    "id": 120,
    "text": "loader",
    "type": "global function"
  }, {
    "id": 121,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 122,
    "text": "open",
    "type": "global function"
  }, {
    "id": 123,
    "text": "error",
    "type": "global function"
  }, {
    "id": 124,
    "text": "loadfile",
    "type": "global function"
  }, {
    "id": 125,
    "text": "loadlib",
    "type": "global function"
  }, {
    "id": 126,
    "text": "getenv",
    "type": "global function"
  }, {
    "id": 127,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 128,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 129,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 130,
    "text": "format",
    "type": "global function"
  }, {
    "id": 131,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 132,
    "text": "",
    "type": "variable container"
  }, {
    "id": 133,
    "text": "",
    "type": "require container"
  }, {
    "id": 134,
    "text": "",
    "type": "local variable"
  }, {
    "id": 135,
    "text": "",
    "type": "string"
  }, {
    "id": 136,
    "text": "",
    "type": "local variable"
  }, {
    "id": 137,
    "text": "",
    "type": "string"
  }, {
    "id": 138,
    "text": "",
    "type": "local variable"
  }, {
    "id": 139,
    "text": "",
    "type": "string"
  }, {
    "id": 140,
    "text": "",
    "type": "local variable"
  }, {
    "id": 141,
    "text": "",
    "type": "string"
  }, {
    "id": 142,
    "text": "",
    "type": "local variable"
  }, {
    "id": 143,
    "text": "",
    "type": "string"
  }, {
    "id": 144,
    "text": "",
    "type": "local variable"
  }, {
    "id": 145,
    "text": "",
    "type": "string"
  }, {
    "id": 146,
    "text": "",
    "type": "local variable"
  }, {
    "id": 147,
    "text": "",
    "type": "n/a"
  }, {
    "id": 148,
    "text": "",
    "type": "local variable"
  }, {
    "id": 149,
    "text": "",
    "type": "n/a"
  }, {
    "id": 150,
    "text": "",
    "type": "local variable"
  }, {
    "id": 151,
    "text": "",
    "type": "n/a"
  }, {
    "id": 152,
    "text": "",
    "type": "local variable"
  }, {
    "id": 153,
    "text": "",
    "type": "n/a"
  }, {
    "id": 154,
    "text": "",
    "type": "local variable"
  }, {
    "id": 155,
    "text": "",
    "type": "n/a"
  }, {
    "id": 156,
    "text": "",
    "type": "local variable"
  }, {
    "id": 157,
    "text": "",
    "type": "n/a"
  }, {
    "id": 158,
    "text": "",
    "type": "local variable"
  }, {
    "id": 159,
    "text": "",
    "type": "n/a"
  }, {
    "id": 160,
    "text": "",
    "type": "local variable"
  }, {
    "id": 161,
    "text": "",
    "type": "n/a"
  }, {
    "id": 162,
    "text": "",
    "type": "local variable"
  }, {
    "id": 163,
    "text": "",
    "type": "n/a"
  }, {
    "id": 164,
    "text": "",
    "type": "local variable"
  }, {
    "id": 165,
    "text": "",
    "type": "n/a"
  }, {
    "id": 166,
    "text": "",
    "type": "local variable"
  }, {
    "id": 167,
    "text": "",
    "type": "n/a"
  }, {
    "id": 168,
    "text": "",
    "type": "local variable"
  }, {
    "id": 169,
    "text": "",
    "type": "n/a"
  }, {
    "id": 170,
    "text": "",
    "type": "local variable"
  }, {
    "id": 171,
    "text": "",
    "type": "n/a"
  }, {
    "id": 172,
    "text": "",
    "type": "local variable"
  }, {
    "id": 173,
    "text": "",
    "type": "n/a"
  }, {
    "id": 174,
    "text": "",
    "type": "local variable"
  }, {
    "id": 175,
    "text": "",
    "type": "n/a"
  }, {
    "id": 176,
    "text": "",
    "type": "local variable"
  }, {
    "id": 177,
    "text": "",
    "type": "n/a"
  }, {
    "id": 178,
    "text": "",
    "type": "local variable"
  }, {
    "id": 179,
    "text": "",
    "type": "n/a"
  }, {
    "id": 180,
    "text": "",
    "type": "local variable"
  }, {
    "id": 181,
    "text": "",
    "type": "n/a"
  }, {
    "id": 182,
    "text": "",
    "type": "local variable"
  }, {
    "id": 183,
    "text": "",
    "type": "n/a"
  }, {
    "id": 184,
    "text": "",
    "type": "local variable"
  }, {
    "id": 185,
    "text": "",
    "type": "n/a"
  }, {
    "id": 186,
    "text": "",
    "type": "global variable"
  }, {
    "id": 187,
    "text": "",
    "type": "global variable"
  }, {
    "id": 188,
    "text": "",
    "type": "n/a"
  }, {
    "id": 189,
    "text": "",
    "type": "global variable"
  }, {
    "id": 190,
    "text": "",
    "type": "n/a"
  }, {
    "id": 191,
    "text": "",
    "type": "global variable"
  }, {
    "id": 192,
    "text": "",
    "type": "n/a"
  }, {
    "id": 193,
    "text": "",
    "type": "global variable"
  }, {
    "id": 194,
    "text": "",
    "type": "n/a"
  }, {
    "id": 195,
    "text": "",
    "type": "global variable"
  }, {
    "id": 196,
    "text": "",
    "type": "n/a"
  }, {
    "id": 197,
    "text": "",
    "type": "global variable"
  }, {
    "id": 198,
    "text": "",
    "type": "n/a"
  }, {
    "id": 199,
    "text": "",
    "type": "global variable"
  }, {
    "id": 200,
    "text": "",
    "type": "n/a"
  }, {
    "id": 201,
    "text": "",
    "type": "global variable"
  }, {
    "id": 202,
    "text": "",
    "type": "n/a"
  }, {
    "id": 203,
    "text": "",
    "type": "global variable"
  }, {
    "id": 204,
    "text": "",
    "type": "n/a"
  }, {
    "id": 205,
    "text": "",
    "type": "global variable"
  }, {
    "id": 206,
    "text": "",
    "type": "n/a"
  }, {
    "id": 207,
    "text": "",
    "type": "global variable"
  }, {
    "id": 208,
    "text": "",
    "type": "n/a"
  }, {
    "id": 209,
    "text": "",
    "type": "global variable"
  }, {
    "id": 210,
    "text": "",
    "type": "n/a"
  }, {
    "id": 211,
    "text": "",
    "type": "global variable"
  }, {
    "id": 212,
    "text": "",
    "type": "n/a"
  }, {
    "id": 213,
    "text": "",
    "type": "global variable"
  }, {
    "id": 214,
    "text": "",
    "type": "n/a"
  } ]
}