{
  "_filename": "graph50.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luagraph/graph50.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 8,
    "label": "has",
    "to": 3
  }, {
    "from": 8,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 9
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 13,
    "label": "has",
    "to": 3
  }, {
    "from": 13,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 3
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 18,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 26,
    "label": "has",
    "to": 33
  }, {
    "from": 26,
    "label": "has",
    "to": 34
  }, {
    "from": 26,
    "label": "has",
    "to": 35
  }, {
    "from": 26,
    "label": "has",
    "to": 36
  }, {
    "from": 23,
    "label": "has",
    "to": 37
  }, {
    "from": 23,
    "label": "has",
    "to": 38
  }, {
    "from": 23,
    "label": "has",
    "to": 39
  }, {
    "from": 23,
    "label": "has",
    "to": 40
  }, {
    "from": 23,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 23,
    "label": "has",
    "to": 3
  }, {
    "from": 23,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 46,
    "label": "has",
    "to": 3
  }, {
    "from": 46,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 52,
    "label": "has",
    "to": 56
  }, {
    "from": 52,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 62,
    "label": "has",
    "to": 65
  }, {
    "from": 61,
    "label": "has",
    "to": 66
  }, {
    "from": 61,
    "label": "has",
    "to": 67
  }, {
    "from": 61,
    "label": "has",
    "to": 68
  }, {
    "from": 59,
    "label": "has",
    "to": 69
  }, {
    "from": 59,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 70,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 70,
    "label": "has",
    "to": 76
  }, {
    "from": 70,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 70,
    "label": "has",
    "to": 79
  }, {
    "from": 59,
    "label": "has",
    "to": 80
  }, {
    "from": 57,
    "label": "has",
    "to": 81
  }, {
    "from": 57,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 85,
    "label": "has",
    "to": 88
  }, {
    "from": 84,
    "label": "has",
    "to": 89
  }, {
    "from": 57,
    "label": "has",
    "to": 90
  }, {
    "from": 57,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 57,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 57,
    "label": "has",
    "to": 76
  }, {
    "from": 57,
    "label": "has",
    "to": 95
  }, {
    "from": 52,
    "label": "has",
    "to": 3
  }, {
    "from": 52,
    "label": "has",
    "to": 3
  }, {
    "from": 52,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 27
  }, {
    "from": 99,
    "label": "has",
    "to": 28
  }, {
    "from": 99,
    "label": "has",
    "to": 58
  }, {
    "from": 99,
    "label": "has",
    "to": 33
  }, {
    "from": 99,
    "label": "has",
    "to": 34
  }, {
    "from": 99,
    "label": "has",
    "to": 35
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 97,
    "label": "has",
    "to": 101
  }, {
    "from": 97,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 97,
    "label": "has",
    "to": 104
  }, {
    "from": 97,
    "label": "has",
    "to": 3
  }, {
    "from": 97,
    "label": "has",
    "to": 105
  }, {
    "from": 106,
    "label": "has",
    "to": 3
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 106,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 109,
    "label": "has",
    "to": 111
  }, {
    "from": 106,
    "label": "has",
    "to": 112
  }, {
    "from": 106,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 106,
    "label": "has",
    "to": 3
  }, {
    "from": 106,
    "label": "has",
    "to": 115
  }, {
    "from": 116,
    "label": "has",
    "to": 3
  }, {
    "from": 116,
    "label": "has",
    "to": 107
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 118,
    "label": "has",
    "to": 111
  }, {
    "from": 116,
    "label": "has",
    "to": 112
  }, {
    "from": 116,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 114
  }, {
    "from": 116,
    "label": "has",
    "to": 3
  }, {
    "from": 116,
    "label": "has",
    "to": 121
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 122,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 27
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 124,
    "label": "has",
    "to": 126
  }, {
    "from": 124,
    "label": "has",
    "to": 58
  }, {
    "from": 124,
    "label": "has",
    "to": 33
  }, {
    "from": 124,
    "label": "has",
    "to": 127
  }, {
    "from": 124,
    "label": "has",
    "to": 128
  }, {
    "from": 124,
    "label": "has",
    "to": 129
  }, {
    "from": 124,
    "label": "has",
    "to": 130
  }, {
    "from": 122,
    "label": "has",
    "to": 131
  }, {
    "from": 122,
    "label": "has",
    "to": 132
  }, {
    "from": 122,
    "label": "has",
    "to": 101
  }, {
    "from": 122,
    "label": "has",
    "to": 133
  }, {
    "from": 122,
    "label": "has",
    "to": 134
  }, {
    "from": 122,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 122,
    "label": "has",
    "to": 104
  }, {
    "from": 122,
    "label": "has",
    "to": 3
  }, {
    "from": 122,
    "label": "has",
    "to": 135
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 136,
    "label": "has",
    "to": 3
  }, {
    "from": 136,
    "label": "has",
    "to": 3
  }, {
    "from": 136,
    "label": "has",
    "to": 138
  }, {
    "from": 139,
    "label": "has",
    "to": 3
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 141,
    "label": "has",
    "to": 3
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 143,
    "label": "has",
    "to": 145
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 145,
    "label": "has",
    "to": 147
  }, {
    "from": 145,
    "label": "has",
    "to": 148
  }, {
    "from": 145,
    "label": "has",
    "to": 149
  }, {
    "from": 143,
    "label": "has",
    "to": 3
  }, {
    "from": 143,
    "label": "has",
    "to": 150
  }, {
    "from": 151,
    "label": "has",
    "to": 144
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 151,
    "label": "has",
    "to": 3
  }, {
    "from": 151,
    "label": "has",
    "to": 3
  }, {
    "from": 151,
    "label": "has",
    "to": 155
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 156,
    "label": "has",
    "to": 158
  }, {
    "from": 156,
    "label": "has",
    "to": 3
  }, {
    "from": 156,
    "label": "has",
    "to": 159
  }, {
    "from": 156,
    "label": "has",
    "to": 160
  }, {
    "from": 156,
    "label": "has",
    "to": 161
  }, {
    "from": 156,
    "label": "has",
    "to": 162
  }, {
    "from": 156,
    "label": "has",
    "to": 163
  }, {
    "from": 156,
    "label": "has",
    "to": 164
  }, {
    "from": 156,
    "label": "has",
    "to": 165
  }, {
    "from": 156,
    "label": "has",
    "to": 166
  }, {
    "from": 156,
    "label": "has",
    "to": 167
  }, {
    "from": 156,
    "label": "has",
    "to": 168
  }, {
    "from": 156,
    "label": "has",
    "to": 169
  }, {
    "from": 156,
    "label": "has",
    "to": 170
  }, {
    "from": 156,
    "label": "has",
    "to": 171
  }, {
    "from": 156,
    "label": "has",
    "to": 172
  }, {
    "from": 156,
    "label": "has",
    "to": 173
  }, {
    "from": 156,
    "label": "has",
    "to": 174
  }, {
    "from": 175,
    "label": "has",
    "to": 24
  }, {
    "from": 175,
    "label": "has",
    "to": 25
  }, {
    "from": 175,
    "label": "has",
    "to": 176
  }, {
    "from": 175,
    "label": "has",
    "to": 177
  }, {
    "from": 177,
    "label": "has",
    "to": 33
  }, {
    "from": 177,
    "label": "has",
    "to": 178
  }, {
    "from": 177,
    "label": "has",
    "to": 128
  }, {
    "from": 177,
    "label": "has",
    "to": 27
  }, {
    "from": 177,
    "label": "has",
    "to": 179
  }, {
    "from": 177,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 175,
    "label": "has",
    "to": 180
  }, {
    "from": 175,
    "label": "has",
    "to": 39
  }, {
    "from": 175,
    "label": "has",
    "to": 40
  }, {
    "from": 175,
    "label": "has",
    "to": 181
  }, {
    "from": 175,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 175,
    "label": "has",
    "to": 3
  }, {
    "from": 175,
    "label": "has",
    "to": 182
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 184,
    "label": "has",
    "to": 185
  }, {
    "from": 185,
    "label": "has",
    "to": 186
  }, {
    "from": 183,
    "label": "has",
    "to": 187
  }, {
    "from": 188,
    "label": "has",
    "to": 189
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 190,
    "label": "has",
    "to": 191
  }, {
    "from": 189,
    "label": "has",
    "to": 192
  }, {
    "from": 188,
    "label": "has",
    "to": 193
  }, {
    "from": 194,
    "label": "has",
    "to": 195
  }, {
    "from": 195,
    "label": "has",
    "to": 196
  }, {
    "from": 195,
    "label": "has",
    "to": 197
  }, {
    "from": 195,
    "label": "has",
    "to": 198
  }, {
    "from": 195,
    "label": "has",
    "to": 199
  }, {
    "from": 194,
    "label": "has",
    "to": 200
  }, {
    "from": 201,
    "label": "has",
    "to": 202
  }, {
    "from": 201,
    "label": "has",
    "to": 203
  }, {
    "from": 201,
    "label": "has",
    "to": 3
  }, {
    "from": 201,
    "label": "has",
    "to": 181
  }, {
    "from": 201,
    "label": "has",
    "to": 204
  }, {
    "from": 204,
    "label": "has",
    "to": 205
  }, {
    "from": 204,
    "label": "has",
    "to": 206
  }, {
    "from": 204,
    "label": "has",
    "to": 207
  }, {
    "from": 201,
    "label": "has",
    "to": 3
  }, {
    "from": 201,
    "label": "has",
    "to": 3
  }, {
    "from": 201,
    "label": "has",
    "to": 208
  }, {
    "from": 209,
    "label": "has",
    "to": 210
  }, {
    "from": 209,
    "label": "has",
    "to": 211
  }, {
    "from": 211,
    "label": "has",
    "to": 212
  }, {
    "from": 209,
    "label": "has",
    "to": 213
  }, {
    "from": 209,
    "label": "has",
    "to": 214
  }, {
    "from": 209,
    "label": "has",
    "to": 215
  }, {
    "from": 215,
    "label": "has",
    "to": 216
  }, {
    "from": 216,
    "label": "has",
    "to": 217
  }, {
    "from": 216,
    "label": "has",
    "to": 218
  }, {
    "from": 216,
    "label": "has",
    "to": 219
  }, {
    "from": 209,
    "label": "has",
    "to": 220
  }, {
    "from": 220,
    "label": "has",
    "to": 221
  }, {
    "from": 221,
    "label": "has",
    "to": 222
  }, {
    "from": 221,
    "label": "has",
    "to": 223
  }, {
    "from": 209,
    "label": "has",
    "to": 3
  }, {
    "from": 209,
    "label": "has",
    "to": 224
  }, {
    "from": 225,
    "label": "has",
    "to": 3
  }, {
    "from": 225,
    "label": "has",
    "to": 226
  }, {
    "from": 227,
    "label": "has",
    "to": 3
  }, {
    "from": 227,
    "label": "has",
    "to": 228
  }, {
    "from": 229,
    "label": "has",
    "to": 3
  }, {
    "from": 229,
    "label": "has",
    "to": 230
  }, {
    "from": 231,
    "label": "has",
    "to": 3
  }, {
    "from": 231,
    "label": "has",
    "to": 232
  }, {
    "from": 233,
    "label": "has",
    "to": 3
  }, {
    "from": 233,
    "label": "has",
    "to": 234
  }, {
    "from": 233,
    "label": "has",
    "to": 235
  }, {
    "from": 233,
    "label": "has",
    "to": 212
  }, {
    "from": 233,
    "label": "has",
    "to": 236
  }, {
    "from": 236,
    "label": "has",
    "to": 237
  }, {
    "from": 237,
    "label": "has",
    "to": 238
  }, {
    "from": 237,
    "label": "has",
    "to": 219
  }, {
    "from": 233,
    "label": "has",
    "to": 239
  }, {
    "from": 239,
    "label": "has",
    "to": 240
  }, {
    "from": 240,
    "label": "has",
    "to": 241
  }, {
    "from": 240,
    "label": "has",
    "to": 219
  }, {
    "from": 233,
    "label": "has",
    "to": 3
  }, {
    "from": 233,
    "label": "has",
    "to": 242
  }, {
    "from": 243,
    "label": "has",
    "to": 244
  }, {
    "from": 243,
    "label": "has",
    "to": 245
  }, {
    "from": 243,
    "label": "has",
    "to": 3
  }, {
    "from": 243,
    "label": "has",
    "to": 246
  }, {
    "from": 247,
    "label": "has",
    "to": 3
  }, {
    "from": 247,
    "label": "has",
    "to": 3
  }, {
    "from": 247,
    "label": "has",
    "to": 248
  }, {
    "from": 249,
    "label": "has",
    "to": 3
  }, {
    "from": 249,
    "label": "has",
    "to": 3
  }, {
    "from": 249,
    "label": "has",
    "to": 250
  }, {
    "from": 251,
    "label": "has",
    "to": 3
  }, {
    "from": 251,
    "label": "has",
    "to": 252
  }, {
    "from": 251,
    "label": "has",
    "to": 253
  }, {
    "from": 253,
    "label": "has",
    "to": 254
  }, {
    "from": 254,
    "label": "has",
    "to": 255
  }, {
    "from": 254,
    "label": "has",
    "to": 256
  }, {
    "from": 254,
    "label": "has",
    "to": 257
  }, {
    "from": 251,
    "label": "has",
    "to": 3
  }, {
    "from": 251,
    "label": "has",
    "to": 258
  }, {
    "from": 259,
    "label": "has",
    "to": 260
  }, {
    "from": 259,
    "label": "has",
    "to": 261
  }, {
    "from": 259,
    "label": "has",
    "to": 262
  }, {
    "from": 263,
    "label": "has",
    "to": 4
  }, {
    "from": 263,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 263,
    "label": "has",
    "to": 3
  }, {
    "from": 263,
    "label": "has",
    "to": 264
  }, {
    "from": 265,
    "label": "has",
    "to": 63
  }, {
    "from": 265,
    "label": "has",
    "to": 64
  }, {
    "from": 265,
    "label": "has",
    "to": 65
  }, {
    "from": 265,
    "label": "has",
    "to": 266
  }, {
    "from": 267,
    "label": "has",
    "to": 86
  }, {
    "from": 267,
    "label": "has",
    "to": 87
  }, {
    "from": 267,
    "label": "has",
    "to": 88
  }, {
    "from": 267,
    "label": "has",
    "to": 268
  }, {
    "from": 269,
    "label": "has",
    "to": 107
  }, {
    "from": 269,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 109,
    "label": "has",
    "to": 111
  }, {
    "from": 269,
    "label": "has",
    "to": 112
  }, {
    "from": 269,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 269,
    "label": "has",
    "to": 3
  }, {
    "from": 269,
    "label": "has",
    "to": 270
  }, {
    "from": 271,
    "label": "has",
    "to": 107
  }, {
    "from": 271,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 118,
    "label": "has",
    "to": 111
  }, {
    "from": 271,
    "label": "has",
    "to": 112
  }, {
    "from": 271,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 114
  }, {
    "from": 271,
    "label": "has",
    "to": 3
  }, {
    "from": 271,
    "label": "has",
    "to": 272
  }, {
    "from": 273,
    "label": "has",
    "to": 234
  }, {
    "from": 273,
    "label": "has",
    "to": 235
  }, {
    "from": 273,
    "label": "has",
    "to": 212
  }, {
    "from": 273,
    "label": "has",
    "to": 236
  }, {
    "from": 236,
    "label": "has",
    "to": 237
  }, {
    "from": 237,
    "label": "has",
    "to": 238
  }, {
    "from": 237,
    "label": "has",
    "to": 219
  }, {
    "from": 273,
    "label": "has",
    "to": 239
  }, {
    "from": 239,
    "label": "has",
    "to": 240
  }, {
    "from": 240,
    "label": "has",
    "to": 241
  }, {
    "from": 240,
    "label": "has",
    "to": 219
  }, {
    "from": 273,
    "label": "has",
    "to": 3
  }, {
    "from": 273,
    "label": "has",
    "to": 274
  }, {
    "from": 275,
    "label": "has",
    "to": 3
  }, {
    "from": 275,
    "label": "has",
    "to": 276
  }, {
    "from": 277,
    "label": "has",
    "to": 3
  }, {
    "from": 277,
    "label": "has",
    "to": 278
  }, {
    "from": 279,
    "label": "has",
    "to": 252
  }, {
    "from": 279,
    "label": "has",
    "to": 253
  }, {
    "from": 253,
    "label": "has",
    "to": 254
  }, {
    "from": 254,
    "label": "has",
    "to": 255
  }, {
    "from": 254,
    "label": "has",
    "to": 256
  }, {
    "from": 254,
    "label": "has",
    "to": 257
  }, {
    "from": 279,
    "label": "has",
    "to": 3
  }, {
    "from": 279,
    "label": "has",
    "to": 280
  }, {
    "from": 122,
    "label": "calls",
    "to": 288
  }, {
    "from": 209,
    "label": "calls",
    "to": 288
  }, {
    "from": 233,
    "label": "calls",
    "to": 288
  }, {
    "from": 243,
    "label": "calls",
    "to": 288
  }, {
    "from": 143,
    "label": "calls",
    "to": 289
  }, {
    "from": 52,
    "label": "calls",
    "to": 18
  }, {
    "from": 52,
    "label": "calls",
    "to": 18
  }, {
    "from": 97,
    "label": "calls",
    "to": 18
  }, {
    "from": 122,
    "label": "calls",
    "to": 18
  }, {
    "from": 194,
    "label": "calls",
    "to": 188
  }, {
    "from": 201,
    "label": "calls",
    "to": 188
  }, {
    "from": 188,
    "label": "calls",
    "to": 183
  }, {
    "from": 201,
    "label": "calls",
    "to": 290
  }, {
    "from": 175,
    "label": "calls",
    "to": 156
  }, {
    "from": 201,
    "label": "calls",
    "to": 156
  }, {
    "from": 52,
    "label": "calls",
    "to": 301
  }, {
    "from": 106,
    "label": "calls",
    "to": 301
  }, {
    "from": 116,
    "label": "calls",
    "to": 301
  }, {
    "from": 209,
    "label": "calls",
    "to": 301
  }, {
    "from": 233,
    "label": "calls",
    "to": 301
  }, {
    "from": 8,
    "label": "calls",
    "to": 2
  }, {
    "from": 23,
    "label": "calls",
    "to": 2
  }, {
    "from": 175,
    "label": "calls",
    "to": 2
  }, {
    "from": 209,
    "label": "calls",
    "to": 2
  }, {
    "from": 233,
    "label": "calls",
    "to": 2
  }, {
    "from": 46,
    "label": "calls",
    "to": 303
  }, {
    "from": 52,
    "label": "calls",
    "to": 303
  }, {
    "from": 143,
    "label": "calls",
    "to": 295
  }, {
    "from": 143,
    "label": "calls",
    "to": 296
  }, {
    "from": 281,
    "label": "calls",
    "to": 283
  }, {
    "from": 52,
    "label": "calls",
    "to": 283
  }, {
    "from": 52,
    "label": "calls",
    "to": 283
  }, {
    "from": 243,
    "label": "calls",
    "to": 233
  }, {
    "from": 23,
    "label": "calls",
    "to": 304
  }, {
    "from": 13,
    "label": "calls",
    "to": 297
  }, {
    "from": 23,
    "label": "calls",
    "to": 297
  }, {
    "from": 52,
    "label": "calls",
    "to": 297
  }, {
    "from": 97,
    "label": "calls",
    "to": 297
  }, {
    "from": 122,
    "label": "calls",
    "to": 297
  }, {
    "from": 175,
    "label": "calls",
    "to": 297
  }, {
    "from": 251,
    "label": "calls",
    "to": 297
  }, {
    "from": 106,
    "label": "calls",
    "to": 292
  }, {
    "from": 116,
    "label": "calls",
    "to": 292
  }, {
    "from": 209,
    "label": "calls",
    "to": 292
  }, {
    "from": 233,
    "label": "calls",
    "to": 292
  }, {
    "from": 251,
    "label": "calls",
    "to": 292
  }, {
    "from": 175,
    "label": "calls",
    "to": 300
  }, {
    "from": 209,
    "label": "calls",
    "to": 175
  }, {
    "from": 23,
    "label": "calls",
    "to": 298
  }, {
    "from": 46,
    "label": "calls",
    "to": 298
  }, {
    "from": 52,
    "label": "calls",
    "to": 298
  }, {
    "from": 52,
    "label": "calls",
    "to": 298
  }, {
    "from": 97,
    "label": "calls",
    "to": 298
  }, {
    "from": 122,
    "label": "calls",
    "to": 298
  }, {
    "from": 209,
    "label": "calls",
    "to": 298
  }, {
    "from": 209,
    "label": "calls",
    "to": 298
  }, {
    "from": 233,
    "label": "calls",
    "to": 298
  }, {
    "from": 233,
    "label": "calls",
    "to": 298
  }, {
    "from": 251,
    "label": "calls",
    "to": 298
  }, {
    "from": 194,
    "label": "calls",
    "to": 194
  }, {
    "from": 201,
    "label": "calls",
    "to": 194
  }, {
    "from": 122,
    "label": "calls",
    "to": 293
  }, {
    "from": 106,
    "label": "calls",
    "to": 286
  }, {
    "from": 116,
    "label": "calls",
    "to": 286
  }, {
    "from": 46,
    "label": "calls",
    "to": 23
  }, {
    "from": 281,
    "label": "calls",
    "to": 302
  }, {
    "from": 281,
    "label": "calls",
    "to": 302
  }, {
    "from": 52,
    "label": "calls",
    "to": 287
  }, {
    "from": 52,
    "label": "calls",
    "to": 287
  }, {
    "from": 183,
    "label": "calls",
    "to": 287
  }, {
    "from": 188,
    "label": "calls",
    "to": 287
  }, {
    "from": 194,
    "label": "calls",
    "to": 287
  }, {
    "from": 251,
    "label": "calls",
    "to": 287
  }, {
    "from": 225,
    "label": "calls",
    "to": 209
  }, {
    "from": 227,
    "label": "calls",
    "to": 209
  }, {
    "from": 229,
    "label": "calls",
    "to": 209
  }, {
    "from": 231,
    "label": "calls",
    "to": 209
  }, {
    "from": 2,
    "label": "calls",
    "to": 305
  }, {
    "from": 2,
    "label": "calls",
    "to": 305
  }, {
    "from": 52,
    "label": "calls",
    "to": 8
  }, {
    "from": 97,
    "label": "calls",
    "to": 8
  }, {
    "from": 122,
    "label": "calls",
    "to": 8
  }, {
    "from": 281,
    "label": "calls",
    "to": 291
  }, {
    "from": 2,
    "label": "calls",
    "to": 294
  }, {
    "from": 23,
    "label": "calls",
    "to": 294
  }, {
    "from": 23,
    "label": "calls",
    "to": 294
  }, {
    "from": 23,
    "label": "calls",
    "to": 294
  }, {
    "from": 23,
    "label": "calls",
    "to": 294
  }, {
    "from": 46,
    "label": "calls",
    "to": 294
  }, {
    "from": 46,
    "label": "calls",
    "to": 294
  }, {
    "from": 52,
    "label": "calls",
    "to": 294
  }, {
    "from": 52,
    "label": "calls",
    "to": 294
  }, {
    "from": 52,
    "label": "calls",
    "to": 294
  }, {
    "from": 52,
    "label": "calls",
    "to": 294
  }, {
    "from": 52,
    "label": "calls",
    "to": 294
  }, {
    "from": 52,
    "label": "calls",
    "to": 294
  }, {
    "from": 97,
    "label": "calls",
    "to": 294
  }, {
    "from": 97,
    "label": "calls",
    "to": 294
  }, {
    "from": 106,
    "label": "calls",
    "to": 294
  }, {
    "from": 106,
    "label": "calls",
    "to": 294
  }, {
    "from": 116,
    "label": "calls",
    "to": 294
  }, {
    "from": 116,
    "label": "calls",
    "to": 294
  }, {
    "from": 122,
    "label": "calls",
    "to": 294
  }, {
    "from": 122,
    "label": "calls",
    "to": 294
  }, {
    "from": 122,
    "label": "calls",
    "to": 294
  }, {
    "from": 175,
    "label": "calls",
    "to": 294
  }, {
    "from": 175,
    "label": "calls",
    "to": 294
  }, {
    "from": 175,
    "label": "calls",
    "to": 294
  }, {
    "from": 175,
    "label": "calls",
    "to": 294
  }, {
    "from": 209,
    "label": "calls",
    "to": 294
  }, {
    "from": 209,
    "label": "calls",
    "to": 294
  }, {
    "from": 209,
    "label": "calls",
    "to": 294
  }, {
    "from": 209,
    "label": "calls",
    "to": 294
  }, {
    "from": 233,
    "label": "calls",
    "to": 294
  }, {
    "from": 233,
    "label": "calls",
    "to": 294
  }, {
    "from": 233,
    "label": "calls",
    "to": 294
  }, {
    "from": 243,
    "label": "calls",
    "to": 294
  }, {
    "from": 251,
    "label": "calls",
    "to": 294
  }, {
    "from": 251,
    "label": "calls",
    "to": 294
  }, {
    "from": 251,
    "label": "calls",
    "to": 294
  }, {
    "from": 18,
    "label": "calls",
    "to": 306
  }, {
    "from": 156,
    "label": "calls",
    "to": 306
  }, {
    "from": 209,
    "label": "calls",
    "to": 285
  }, {
    "from": 233,
    "label": "calls",
    "to": 285
  }, {
    "from": 281,
    "label": "calls",
    "to": 299
  }, {
    "from": 281,
    "label": "calls",
    "to": 299
  }, {
    "from": 281,
    "label": "calls",
    "to": 299
  }, {
    "from": 1,
    "label": "contains",
    "to": 281
  }, {
    "from": 281,
    "label": "declares",
    "to": 2
  }, {
    "from": 281,
    "label": "declares",
    "to": 8
  }, {
    "from": 281,
    "label": "declares",
    "to": 13
  }, {
    "from": 281,
    "label": "declares",
    "to": 18
  }, {
    "from": 281,
    "label": "declares",
    "to": 23
  }, {
    "from": 281,
    "label": "declares",
    "to": 46
  }, {
    "from": 281,
    "label": "declares",
    "to": 52
  }, {
    "from": 281,
    "label": "declares",
    "to": 97
  }, {
    "from": 281,
    "label": "declares",
    "to": 106
  }, {
    "from": 281,
    "label": "declares",
    "to": 116
  }, {
    "from": 281,
    "label": "declares",
    "to": 122
  }, {
    "from": 281,
    "label": "declares",
    "to": 136
  }, {
    "from": 281,
    "label": "declares",
    "to": 139
  }, {
    "from": 281,
    "label": "declares",
    "to": 141
  }, {
    "from": 281,
    "label": "declares",
    "to": 143
  }, {
    "from": 281,
    "label": "declares",
    "to": 151
  }, {
    "from": 281,
    "label": "declares",
    "to": 156
  }, {
    "from": 281,
    "label": "declares",
    "to": 175
  }, {
    "from": 281,
    "label": "declares",
    "to": 183
  }, {
    "from": 281,
    "label": "declares",
    "to": 188
  }, {
    "from": 281,
    "label": "declares",
    "to": 194
  }, {
    "from": 281,
    "label": "declares",
    "to": 201
  }, {
    "from": 281,
    "label": "declares",
    "to": 209
  }, {
    "from": 281,
    "label": "declares",
    "to": 225
  }, {
    "from": 281,
    "label": "declares",
    "to": 227
  }, {
    "from": 281,
    "label": "declares",
    "to": 229
  }, {
    "from": 281,
    "label": "declares",
    "to": 231
  }, {
    "from": 281,
    "label": "declares",
    "to": 233
  }, {
    "from": 281,
    "label": "declares",
    "to": 243
  }, {
    "from": 281,
    "label": "declares",
    "to": 247
  }, {
    "from": 281,
    "label": "declares",
    "to": 249
  }, {
    "from": 281,
    "label": "declares",
    "to": 251
  }, {
    "from": 281,
    "label": "declares",
    "to": 259
  }, {
    "from": 281,
    "label": "declares",
    "to": 263
  }, {
    "from": 281,
    "label": "declares",
    "to": 265
  }, {
    "from": 281,
    "label": "declares",
    "to": 267
  }, {
    "from": 281,
    "label": "declares",
    "to": 269
  }, {
    "from": 281,
    "label": "declares",
    "to": 271
  }, {
    "from": 281,
    "label": "declares",
    "to": 273
  }, {
    "from": 281,
    "label": "declares",
    "to": 275
  }, {
    "from": 281,
    "label": "declares",
    "to": 277
  }, {
    "from": 281,
    "label": "declares",
    "to": 279
  }, {
    "from": 1,
    "label": "contains",
    "to": 308
  }, {
    "from": 1,
    "label": "contains",
    "to": 309
  }, {
    "from": 308,
    "label": "initializes",
    "to": 310
  }, {
    "from": 310,
    "label": "assigns",
    "to": 311
  }, {
    "from": 308,
    "label": "initializes",
    "to": 312
  }, {
    "from": 312,
    "label": "assigns",
    "to": 313
  }, {
    "from": 308,
    "label": "initializes",
    "to": 314
  }, {
    "from": 314,
    "label": "assigns",
    "to": 315
  }, {
    "from": 308,
    "label": "initializes",
    "to": 316
  }, {
    "from": 316,
    "label": "assigns",
    "to": 317
  }, {
    "from": 308,
    "label": "initializes",
    "to": 318
  }, {
    "from": 318,
    "label": "assigns",
    "to": 319
  }, {
    "from": 308,
    "label": "initializes",
    "to": 320
  }, {
    "from": 320,
    "label": "assigns",
    "to": 321
  }, {
    "from": 308,
    "label": "initializes",
    "to": 322
  }, {
    "from": 322,
    "label": "assigns",
    "to": 323
  }, {
    "from": 308,
    "label": "initializes",
    "to": 324
  }, {
    "from": 324,
    "label": "assigns",
    "to": 325
  }, {
    "from": 308,
    "label": "initializes",
    "to": 326
  }, {
    "from": 326,
    "label": "assigns",
    "to": 327
  }, {
    "from": 308,
    "label": "initializes",
    "to": 328
  }, {
    "from": 328,
    "label": "assigns",
    "to": 329
  }, {
    "from": 329,
    "label": "assigns",
    "to": 330
  }, {
    "from": 330,
    "label": "assigns",
    "to": 331
  }, {
    "from": 329,
    "label": "assigns",
    "to": 332
  }, {
    "from": 332,
    "label": "assigns",
    "to": 333
  }, {
    "from": 329,
    "label": "assigns",
    "to": 334
  }, {
    "from": 334,
    "label": "assigns",
    "to": 335
  }, {
    "from": 308,
    "label": "initializes",
    "to": 336
  }, {
    "from": 308,
    "label": "initializes",
    "to": 337
  }, {
    "from": 337,
    "label": "assigns",
    "to": 338
  }, {
    "from": 308,
    "label": "initializes",
    "to": 339
  }, {
    "from": 339,
    "label": "assigns",
    "to": 340
  }, {
    "from": 309,
    "label": "initializes",
    "to": 341
  }, {
    "from": 341,
    "label": "requires",
    "to": 342
  }, {
    "from": 309,
    "label": "initializes",
    "to": 343
  }, {
    "from": 343,
    "label": "requires",
    "to": 282
  }, {
    "from": 309,
    "label": "initializes",
    "to": 344
  }, {
    "from": 344,
    "label": "requires",
    "to": 284
  }, {
    "from": 1,
    "label": "provides",
    "to": 345
  }, {
    "from": 307,
    "label": "represents",
    "to": 346
  }, {
    "from": 345,
    "label": "provides",
    "to": 346
  }, {
    "from": 347,
    "label": "requires",
    "to": 342
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 265
  }, {
    "from": 85,
    "label": "hasArgument",
    "to": 267
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "graph50",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function npairs(t)\r\n  return function(t, prev)\r\n\t   k,v = base.next(t, prev)\r\n\t   while type(k) == \"number\" do\r\n\t     k,v = base.next(t, prev)\r\n\t     prev = k\r\n\t   end\r\n\t   return k,v\r\n\t end, t, nil\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "k,v = base.next(t, prev)",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "while type(k) == \"number\" do\r\n\t     k,v = base.next(t, prev)\r\n\t     prev = k\r\n\t   end",
    "type": "statement:while"
  }, {
    "id": 6,
    "text": "prev = k",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "local function attribs(params)\r\n  local t = {}\r\n  for k,v in npairs(params) do\r\n    t[k] = v\r\n  end\r\n  return t\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "for k,v in npairs(params) do\r\n    t[k] = v\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 11,
    "text": "t[k] = v",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "local function getattrib(self)\r\n  local t = {}\r\n  local defined = self.graph:defaults()[self:type()]\r\n  for k,v in pairs(defined) do \r\n    t[k] = self:rawget(k)\r\n  end\r\n  return t\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "local defined = self.graph:defaults()[self:type()]",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "for k,v in pairs(defined) do \r\n    t[k] = self:rawget(k)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 16,
    "text": "t[k] = self:rawget(k)",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "local function addmethod(self, name, func)\r\n  local mt = getmetatable(self)\r\n  if not mt or mt[name] then return end\r\n  mt[name] = func\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "local mt = getmetatable(self)",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "if not mt or mt[name] then return end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "mt[name] = func",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "local function _subgraph(self, ...)\r\n  local name\r\n  local attr = {graph={}}\r\n  if type(arg[1]) == \"table\" then\r\n    name = arg[1][1]\r\n    nocreate = arg[1][2]\r\n    for k,v in npairs(arg[1]) do\r\n      if type(v) == \"table\" then\r\n\tattr[k] = v\r\n      else\r\n\tattr.graph[k] = v\r\n      end\r\n    end\r\n  elseif type(arg[1]) == \"string\" then\r\n    name = arg[1]\r\n    attr = arg[2] or {}\r\n    nocreate = arg[3]\r\n  else\r\n    error(\"missing subgraph name\")\r\n  end\r\n  local g, err = self:__subgraph(name)\r\n  _overload(g)\r\n  g:declare(defattr)\r\n  g:declare(attr)\r\n  for k,v in pairs(attr) do\r\n    if type(v) == \"table\" then\r\n      g:declare(v)\r\n    else\r\n      g:declare{graph={k=v}}\r\n    end\r\n  end\r\n  return g, err\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "local name",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "local attr = {graph={}}",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "if type(arg[1]) == \"table\" then\r\n    name = arg[1][1]\r\n    nocreate = arg[1][2]\r\n    for k,v in npairs(arg[1]) do\r\n      if type(v) == \"table\" then\r\n\tattr[k] = v\r\n      else\r\n\tattr.graph[k] = v\r\n      end\r\n    end\r\n  elseif type(arg[1]) == \"string\" then\r\n    name = arg[1]\r\n    attr = arg[2] or {}\r\n    nocreate = arg[3]\r\n  else\r\n    error(\"missing subgraph name\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "name = arg[1][1]",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "nocreate = arg[1][2]",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "for k,v in npairs(arg[1]) do\r\n      if type(v) == \"table\" then\r\n\tattr[k] = v\r\n      else\r\n\tattr.graph[k] = v\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 30,
    "text": "if type(v) == \"table\" then\r\n\tattr[k] = v\r\n      else\r\n\tattr.graph[k] = v\r\n      end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "attr[k] = v",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "attr.graph[k] = v",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "name = arg[1]",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "attr = arg[2] or {}",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "nocreate = arg[3]",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "error(\"missing subgraph name\")",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "local g, err = self:__subgraph(name)",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "_overload(g)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "g:declare(defattr)",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "g:declare(attr)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "for k,v in pairs(attr) do\r\n    if type(v) == \"table\" then\r\n      g:declare(v)\r\n    else\r\n      g:declare{graph={k=v}}\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 42,
    "text": "if type(v) == \"table\" then\r\n      g:declare(v)\r\n    else\r\n      g:declare{graph={k=v}}\r\n    end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "g:declare(v)",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "g:declare{graph={k=v}}",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "local function _cluster(self, ...)\r\n  if type(arg[1]) == \"table\" then\r\n    arg[1][1] = \"cluster_\"..arg[1][1]\r\n  elseif type(arg[1]) == \"string\" then\r\n    arg[1] = \"cluster_\"..arg[1]\r\n  else\r\n    error(\"missing cluster name\")\r\n  end\r\n  return _subgraph(self, base.unpack(arg))\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "if type(arg[1]) == \"table\" then\r\n    arg[1][1] = \"cluster_\"..arg[1][1]\r\n  elseif type(arg[1]) == \"string\" then\r\n    arg[1] = \"cluster_\"..arg[1]\r\n  else\r\n    error(\"missing cluster name\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "arg[1][1] = \"cluster_\"..arg[1][1]",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "arg[1] = \"cluster_\"..arg[1]",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "error(\"missing cluster name\")",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "local function _edge(self, ...)\r\n  local nodes, edges = {}, {}\r\n  local attr\r\n  local node = {}\r\n  local last\r\n  if type(arg[1]) == \"table\" then\r\n    attr = attribs(arg[1])\r\n    -- create the edges\r\n    for i, v in ipairs(arg[1]) do\r\n      -- we must care about ports here:\r\n      node = {}\r\n      if type(v) == \"string\" then\r\n\tstring.gsub(v, \"^(%w+):*(%w*):*(%w*)\", function(u, v, w)\r\n\t\t\t\t\t\tnode.name = u\r\n\t\t\t\t\t\tnode.port = v\r\n\t\t\t\t\t\tnode.compass = w\r\n\t\t\t\t\t       end)\r\n\tnode.node = self:__node(node.name)\r\n      elseif type(v) == \"userdata\" then\r\n\tnode.node = v\r\n      else\r\n\terror(\"wrong node type\")\r\n      end\r\n      table.insert(nodes, node.node)\r\n      if i > 1 then\r\n\t-- Create edges and set attributes to each edge\r\n\tlocal e = self:__edge(last.node, node.node)\r\n\tif last.port then e.tailport = last.port end\r\n\tif node.port then e.headport = node.port end\r\n\taddmethod(e, \"getattrib\", getattrib)\r\n\tfor k,v in pairs(attr) do\r\n\t  e[k] = v\r\n\tend\r\n\ttable.insert(edges, e)\r\n      end\r\n      last = node\r\n    end\r\n    return edges, nodes\r\n  elseif type(arg[1]) == \"string\" or type(arg[1]) == \"userdata\" then\r\n    local node = {[1]={},[2]={}}\r\n    for i = 1,2 do\r\n      local v = arg[i]\r\n      -- we must care about ports here:\r\n      if type(v) == \"string\" then\r\n\tstring.gsub(v, \"^(%w+):*(%w*):*(%w*)\", function(u, v, w)\r\n\t\t\t\t\t\t node[i].name = u\r\n\t\t\t\t\t\t node[i].port = v\r\n\t\t\t\t\t\t node[i].compass = w\r\n\t\t\t\t\t       end)\r\n\targ[i] = self:__node(node[i].name)\r\n      end\r\n    end\r\n    local e = self:__edge(base.unpack(arg))\r\n    if node[1].port then e.tailport=node[1].port end\r\n    if node[2].port then e.headport=node[2].port end\r\n    addmethod(e, \"getattrib\", getattrib)\r\n    return e, tail, head\r\n  else\r\n    error(\"invalid edge declaration\")\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "local nodes, edges = {}, {}",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "local attr",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "local node = {}",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "local last",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "if type(arg[1]) == \"table\" then\r\n    attr = attribs(arg[1])\r\n    -- create the edges\r\n    for i, v in ipairs(arg[1]) do\r\n      -- we must care about ports here:\r\n      node = {}\r\n      if type(v) == \"string\" then\r\n\tstring.gsub(v, \"^(%w+):*(%w*):*(%w*)\", function(u, v, w)\r\n\t\t\t\t\t\tnode.name = u\r\n\t\t\t\t\t\tnode.port = v\r\n\t\t\t\t\t\tnode.compass = w\r\n\t\t\t\t\t       end)\r\n\tnode.node = self:__node(node.name)\r\n      elseif type(v) == \"userdata\" then\r\n\tnode.node = v\r\n      else\r\n\terror(\"wrong node type\")\r\n      end\r\n      table.insert(nodes, node.node)\r\n      if i > 1 then\r\n\t-- Create edges and set attributes to each edge\r\n\tlocal e = self:__edge(last.node, node.node)\r\n\tif last.port then e.tailport = last.port end\r\n\tif node.port then e.headport = node.port end\r\n\taddmethod(e, \"getattrib\", getattrib)\r\n\tfor k,v in pairs(attr) do\r\n\t  e[k] = v\r\n\tend\r\n\ttable.insert(edges, e)\r\n      end\r\n      last = node\r\n    end\r\n    return edges, nodes\r\n  elseif type(arg[1]) == \"string\" or type(arg[1]) == \"userdata\" then\r\n    local node = {[1]={},[2]={}}\r\n    for i = 1,2 do\r\n      local v = arg[i]\r\n      -- we must care about ports here:\r\n      if type(v) == \"string\" then\r\n\tstring.gsub(v, \"^(%w+):*(%w*):*(%w*)\", function(u, v, w)\r\n\t\t\t\t\t\t node[i].name = u\r\n\t\t\t\t\t\t node[i].port = v\r\n\t\t\t\t\t\t node[i].compass = w\r\n\t\t\t\t\t       end)\r\n\targ[i] = self:__node(node[i].name)\r\n      end\r\n    end\r\n    local e = self:__edge(base.unpack(arg))\r\n    if node[1].port then e.tailport=node[1].port end\r\n    if node[2].port then e.headport=node[2].port end\r\n    addmethod(e, \"getattrib\", getattrib)\r\n    return e, tail, head\r\n  else\r\n    error(\"invalid edge declaration\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "attr = attribs(arg[1])",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "for i, v in ipairs(arg[1]) do\r\n      -- we must care about ports here:\r\n      node = {}\r\n      if type(v) == \"string\" then\r\n\tstring.gsub(v, \"^(%w+):*(%w*):*(%w*)\", function(u, v, w)\r\n\t\t\t\t\t\tnode.name = u\r\n\t\t\t\t\t\tnode.port = v\r\n\t\t\t\t\t\tnode.compass = w\r\n\t\t\t\t\t       end)\r\n\tnode.node = self:__node(node.name)\r\n      elseif type(v) == \"userdata\" then\r\n\tnode.node = v\r\n      else\r\n\terror(\"wrong node type\")\r\n      end\r\n      table.insert(nodes, node.node)\r\n      if i > 1 then\r\n\t-- Create edges and set attributes to each edge\r\n\tlocal e = self:__edge(last.node, node.node)\r\n\tif last.port then e.tailport = last.port end\r\n\tif node.port then e.headport = node.port end\r\n\taddmethod(e, \"getattrib\", getattrib)\r\n\tfor k,v in pairs(attr) do\r\n\t  e[k] = v\r\n\tend\r\n\ttable.insert(edges, e)\r\n      end\r\n      last = node\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 60,
    "text": "node = {}",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "if type(v) == \"string\" then\r\n\tstring.gsub(v, \"^(%w+):*(%w*):*(%w*)\", function(u, v, w)\r\n\t\t\t\t\t\tnode.name = u\r\n\t\t\t\t\t\tnode.port = v\r\n\t\t\t\t\t\tnode.compass = w\r\n\t\t\t\t\t       end)\r\n\tnode.node = self:__node(node.name)\r\n      elseif type(v) == \"userdata\" then\r\n\tnode.node = v\r\n      else\r\n\terror(\"wrong node type\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "string.gsub(v, \"^(%w+):*(%w*):*(%w*)\", function(u, v, w)\r\n\t\t\t\t\t\tnode.name = u\r\n\t\t\t\t\t\tnode.port = v\r\n\t\t\t\t\t\tnode.compass = w\r\n\t\t\t\t\t       end)",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "node.name = u",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "node.port = v",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "node.compass = w",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "node.node = self:__node(node.name)",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "node.node = v",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "error(\"wrong node type\")",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "table.insert(nodes, node.node)",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "if i > 1 then\r\n\t-- Create edges and set attributes to each edge\r\n\tlocal e = self:__edge(last.node, node.node)\r\n\tif last.port then e.tailport = last.port end\r\n\tif node.port then e.headport = node.port end\r\n\taddmethod(e, \"getattrib\", getattrib)\r\n\tfor k,v in pairs(attr) do\r\n\t  e[k] = v\r\n\tend\r\n\ttable.insert(edges, e)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "local e = self:__edge(last.node, node.node)",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "if last.port then e.tailport = last.port end",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "e.tailport = last.port",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "if node.port then e.headport = node.port end",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "e.headport = node.port",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "addmethod(e, \"getattrib\", getattrib)",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "for k,v in pairs(attr) do\r\n\t  e[k] = v\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 78,
    "text": "e[k] = v",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "table.insert(edges, e)",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "last = node",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "local node = {[1]={},[2]={}}",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "for i = 1,2 do\r\n      local v = arg[i]\r\n      -- we must care about ports here:\r\n      if type(v) == \"string\" then\r\n\tstring.gsub(v, \"^(%w+):*(%w*):*(%w*)\", function(u, v, w)\r\n\t\t\t\t\t\t node[i].name = u\r\n\t\t\t\t\t\t node[i].port = v\r\n\t\t\t\t\t\t node[i].compass = w\r\n\t\t\t\t\t       end)\r\n\targ[i] = self:__node(node[i].name)\r\n      end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 83,
    "text": "local v = arg[i]",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "if type(v) == \"string\" then\r\n\tstring.gsub(v, \"^(%w+):*(%w*):*(%w*)\", function(u, v, w)\r\n\t\t\t\t\t\t node[i].name = u\r\n\t\t\t\t\t\t node[i].port = v\r\n\t\t\t\t\t\t node[i].compass = w\r\n\t\t\t\t\t       end)\r\n\targ[i] = self:__node(node[i].name)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 85,
    "text": "string.gsub(v, \"^(%w+):*(%w*):*(%w*)\", function(u, v, w)\r\n\t\t\t\t\t\t node[i].name = u\r\n\t\t\t\t\t\t node[i].port = v\r\n\t\t\t\t\t\t node[i].compass = w\r\n\t\t\t\t\t       end)",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "node[i].name = u",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "node[i].port = v",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "node[i].compass = w",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "arg[i] = self:__node(node[i].name)",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "local e = self:__edge(base.unpack(arg))",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "if node[1].port then e.tailport=node[1].port end",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "e.tailport=node[1].port",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "if node[2].port then e.headport=node[2].port end",
    "type": "statement:if"
  }, {
    "id": 94,
    "text": "e.headport=node[2].port",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "error(\"invalid edge declaration\")",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "local function _node(self, ...)\r\n  local name, attr\r\n  if type(arg[1]) == \"table\" then\r\n    name = arg[1][1]\r\n    nocreate = arg[1][2]\r\n    attr = attribs(arg[1])\r\n  elseif type(arg[1]) == \"string\" then\r\n    name = arg[1]\r\n    attr = arg[2] or {}\r\n    nocreate = arg[3]\r\n  else\r\n    error(\"missing node name\")\r\n  end\r\n  local n = self:__node(name, nocreate)\r\n  for k,v in pairs(attr) do\r\n    n[k] = v\r\n  end\r\n  addmethod(n, \"getattrib\", getattrib)\r\n  return n\r\nend",
    "type": "function"
  }, {
    "id": 98,
    "text": "local name, attr",
    "type": "statement:localassign"
  }, {
    "id": 99,
    "text": "if type(arg[1]) == \"table\" then\r\n    name = arg[1][1]\r\n    nocreate = arg[1][2]\r\n    attr = attribs(arg[1])\r\n  elseif type(arg[1]) == \"string\" then\r\n    name = arg[1]\r\n    attr = arg[2] or {}\r\n    nocreate = arg[3]\r\n  else\r\n    error(\"missing node name\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 100,
    "text": "error(\"missing node name\")",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "local n = self:__node(name, nocreate)",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "for k,v in pairs(attr) do\r\n    n[k] = v\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 103,
    "text": "n[k] = v",
    "type": "statement:assign"
  }, {
    "id": 104,
    "text": "addmethod(n, \"getattrib\", getattrib)",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 106,
    "text": "function hbox(t)\r\n  return function(dir)\r\n\t   local ss = \"\"\r\n\t   for k, v in ipairs(t) do\r\n\t     if type(v) == \"function\" then\r\n\t       ss = ss .. v(\"h\") .. \"|\"\r\n\t     elseif type(v) == \"string\" then\r\n\t       ss = ss .. v .. \"|\"\r\n\t     end\r\n\t   end\r\n\t   ss = string.sub(ss, 1, -2)\r\n\t   if dir ~= \"h\" then ss = \"{\" .. ss .. \"}\" end\r\n\t   return ss\r\n\t end\r\nend",
    "type": "function"
  }, {
    "id": 107,
    "text": "local ss = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 108,
    "text": "for k, v in ipairs(t) do\r\n\t     if type(v) == \"function\" then\r\n\t       ss = ss .. v(\"h\") .. \"|\"\r\n\t     elseif type(v) == \"string\" then\r\n\t       ss = ss .. v .. \"|\"\r\n\t     end\r\n\t   end",
    "type": "statement:genericfor"
  }, {
    "id": 109,
    "text": "if type(v) == \"function\" then\r\n\t       ss = ss .. v(\"h\") .. \"|\"\r\n\t     elseif type(v) == \"string\" then\r\n\t       ss = ss .. v .. \"|\"\r\n\t     end",
    "type": "statement:if"
  }, {
    "id": 110,
    "text": "ss = ss .. v(\"h\") .. \"|\"",
    "type": "statement:assign"
  }, {
    "id": 111,
    "text": "ss = ss .. v .. \"|\"",
    "type": "statement:assign"
  }, {
    "id": 112,
    "text": "ss = string.sub(ss, 1, -2)",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "if dir ~= \"h\" then ss = \"{\" .. ss .. \"}\" end",
    "type": "statement:if"
  }, {
    "id": 114,
    "text": "ss = \"{\" .. ss .. \"}\"",
    "type": "statement:assign"
  }, {
    "id": 115,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 116,
    "text": "function vbox(t)\r\n  return function(dir)\r\n\t   local ss = \"\"\r\n\t   for k, v in ipairs(t) do\r\n\t     if type(v) == \"function\" then\r\n\t       ss = ss .. v(\"v\") .. \"|\"\r\n\t     elseif type(v) == \"string\" then\r\n\t       ss = ss .. v .. \"|\"\r\n\t     end\r\n\t   end\r\n\t   ss = string.sub(ss, 1, -2)\r\n\t   if dir ~= \"v\" then ss = \"{\" .. ss .. \"}\" end\r\n\t   return ss\r\n\t end\r\nend",
    "type": "function"
  }, {
    "id": 117,
    "text": "for k, v in ipairs(t) do\r\n\t     if type(v) == \"function\" then\r\n\t       ss = ss .. v(\"v\") .. \"|\"\r\n\t     elseif type(v) == \"string\" then\r\n\t       ss = ss .. v .. \"|\"\r\n\t     end\r\n\t   end",
    "type": "statement:genericfor"
  }, {
    "id": 118,
    "text": "if type(v) == \"function\" then\r\n\t       ss = ss .. v(\"v\") .. \"|\"\r\n\t     elseif type(v) == \"string\" then\r\n\t       ss = ss .. v .. \"|\"\r\n\t     end",
    "type": "statement:if"
  }, {
    "id": 119,
    "text": "ss = ss .. v(\"v\") .. \"|\"",
    "type": "statement:assign"
  }, {
    "id": 120,
    "text": "if dir ~= \"v\" then ss = \"{\" .. ss .. \"}\" end",
    "type": "statement:if"
  }, {
    "id": 121,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 122,
    "text": "local function _record(self, ...)\r\n  local name, attr, labelfunc\r\n  if type(arg[1]) == \"table\" then\r\n    name = arg[1][1]\r\n    lfunc = arg[1][2]\r\n    nocreate = arg[1][3]\r\n    attr = attribs(arg[1])\r\n  elseif type(arg[1]) == \"string\" then\r\n    name = arg[1]\r\n    lfunc = arg[2]\r\n    attr = arg[3] or {}\r\n    nocreate = arg[4]\r\n  else\r\n    error(\"missing record name\")\r\n  end\r\n  assert(type(lfunc) == \"function\", \"missing record struct\")\r\n  local label = lfunc(\"h\")\r\n  local n = self:__node(name, nocreate)\r\n  n.shape = \"record\"\r\n  n.label = label\r\n  for k,v in pairs(attr) do\r\n    n[k] = v\r\n  end\r\n  addmethod(n, \"getattrib\", getattrib)\r\n  return n\r\nend",
    "type": "function"
  }, {
    "id": 123,
    "text": "local name, attr, labelfunc",
    "type": "statement:localassign"
  }, {
    "id": 124,
    "text": "if type(arg[1]) == \"table\" then\r\n    name = arg[1][1]\r\n    lfunc = arg[1][2]\r\n    nocreate = arg[1][3]\r\n    attr = attribs(arg[1])\r\n  elseif type(arg[1]) == \"string\" then\r\n    name = arg[1]\r\n    lfunc = arg[2]\r\n    attr = arg[3] or {}\r\n    nocreate = arg[4]\r\n  else\r\n    error(\"missing record name\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 125,
    "text": "lfunc = arg[1][2]",
    "type": "statement:assign"
  }, {
    "id": 126,
    "text": "nocreate = arg[1][3]",
    "type": "statement:assign"
  }, {
    "id": 127,
    "text": "lfunc = arg[2]",
    "type": "statement:assign"
  }, {
    "id": 128,
    "text": "attr = arg[3] or {}",
    "type": "statement:assign"
  }, {
    "id": 129,
    "text": "nocreate = arg[4]",
    "type": "statement:assign"
  }, {
    "id": 130,
    "text": "error(\"missing record name\")",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "assert(type(lfunc) == \"function\", \"missing record struct\")",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "local label = lfunc(\"h\")",
    "type": "statement:localassign"
  }, {
    "id": 133,
    "text": "n.shape = \"record\"",
    "type": "statement:assign"
  }, {
    "id": 134,
    "text": "n.label = label",
    "type": "statement:assign"
  }, {
    "id": 135,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 136,
    "text": "local function findnode(self, name)\r\n  if not name then \r\n    return nil, \"not found\" \r\n  end\r\n  return self:__node(name, true)\r\nend",
    "type": "function"
  }, {
    "id": 137,
    "text": "if not name then \r\n    return nil, \"not found\" \r\n  end",
    "type": "statement:if"
  }, {
    "id": 138,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 139,
    "text": "local function findedge(self, tail, head, label)\r\n  return self:_findedge(tail, head, label)\r\nend",
    "type": "function"
  }, {
    "id": 140,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 141,
    "text": "local function findsubgraph(self, tail, head)\r\n  return self:_subgraph(tail, head, false)\r\nend",
    "type": "function"
  }, {
    "id": 142,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 143,
    "text": "local function showdotty(self, doit)\r\n  doit = doit or true\r\n  if doit == true then\r\n    local fn = os.tmpname()..\".dot\"\r\n    self:write(fn)\r\n    rv = os.execute(\"dotty \"..fn)\r\n    os.remove(fn)\r\n    return rv\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 144,
    "text": "doit = doit or true",
    "type": "statement:assign"
  }, {
    "id": 145,
    "text": "if doit == true then\r\n    local fn = os.tmpname()..\".dot\"\r\n    self:write(fn)\r\n    rv = os.execute(\"dotty \"..fn)\r\n    os.remove(fn)\r\n    return rv\r\n  end",
    "type": "statement:if"
  }, {
    "id": 146,
    "text": "local fn = os.tmpname()..\".dot\"",
    "type": "statement:localassign"
  }, {
    "id": 147,
    "text": "self:write(fn)",
    "type": "statement:functioncall"
  }, {
    "id": 148,
    "text": "rv = os.execute(\"dotty \"..fn)",
    "type": "statement:assign"
  }, {
    "id": 149,
    "text": "os.remove(fn)",
    "type": "statement:functioncall"
  }, {
    "id": 150,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 151,
    "text": "local function show(self, doit)\r\n  doit = doit or true\r\n  if doit == true then\r\n    if _GVMINOR > 8 then\r\n      self:layout()\r\n      return self:render(\"gtk\")\r\n    else\r\n      return self:showdotty(doit)\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 152,
    "text": "if doit == true then\r\n    if _GVMINOR > 8 then\r\n      self:layout()\r\n      return self:render(\"gtk\")\r\n    else\r\n      return self:showdotty(doit)\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 153,
    "text": "if _GVMINOR > 8 then\r\n      self:layout()\r\n      return self:render(\"gtk\")\r\n    else\r\n      return self:showdotty(doit)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 154,
    "text": "self:layout()",
    "type": "statement:functioncall"
  }, {
    "id": 155,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 156,
    "text": "local function overload(g)\r\n  local mt = getmetatable(g)\r\n  if mt.overloaded == true then return end\r\n  mt.__edge = mt.edge\r\n  mt.__node = mt.node\r\n  mt.__subgraph = mt.subgraph\r\n  mt.edge = _edge\r\n  mt.node = _node\r\n  mt.subgraph = _subgraph\r\n  mt.cluster = _cluster\r\n  mt.record = _record\r\n  mt._findedge = mt.findedge\r\n  mt.findedge = findedge\r\n  mt.findnode = findnode\r\n  mt.findsubgraph = findsubgraph\r\n  mt.showdotty = showdotty\r\n  mt.show = show\r\n  mt.overloaded = true\r\nend",
    "type": "function"
  }, {
    "id": 157,
    "text": "local mt = getmetatable(g)",
    "type": "statement:localassign"
  }, {
    "id": 158,
    "text": "if mt.overloaded == true then return end",
    "type": "statement:if"
  }, {
    "id": 159,
    "text": "mt.__edge = mt.edge",
    "type": "statement:assign"
  }, {
    "id": 160,
    "text": "mt.__node = mt.node",
    "type": "statement:assign"
  }, {
    "id": 161,
    "text": "mt.__subgraph = mt.subgraph",
    "type": "statement:assign"
  }, {
    "id": 162,
    "text": "mt.edge = _edge",
    "type": "statement:assign"
  }, {
    "id": 163,
    "text": "mt.node = _node",
    "type": "statement:assign"
  }, {
    "id": 164,
    "text": "mt.subgraph = _subgraph",
    "type": "statement:assign"
  }, {
    "id": 165,
    "text": "mt.cluster = _cluster",
    "type": "statement:assign"
  }, {
    "id": 166,
    "text": "mt.record = _record",
    "type": "statement:assign"
  }, {
    "id": 167,
    "text": "mt._findedge = mt.findedge",
    "type": "statement:assign"
  }, {
    "id": 168,
    "text": "mt.findedge = findedge",
    "type": "statement:assign"
  }, {
    "id": 169,
    "text": "mt.findnode = findnode",
    "type": "statement:assign"
  }, {
    "id": 170,
    "text": "mt.findsubgraph = findsubgraph",
    "type": "statement:assign"
  }, {
    "id": 171,
    "text": "mt.showdotty = showdotty",
    "type": "statement:assign"
  }, {
    "id": 172,
    "text": "mt.show = show",
    "type": "statement:assign"
  }, {
    "id": 173,
    "text": "mt.overloaded = true",
    "type": "statement:assign"
  }, {
    "id": 174,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 175,
    "text": "function open(...)\r\n  local name\r\n  local attr = {graph={}}\r\n  local g\r\n\r\n  if type(arg[1]) == \"string\" then\r\n    -- Syntax 1: graph.open(\"NAME\",\"directed\", {graph={ATTR,..}, edge={ATTR,..}, node={ATTR,..}})\r\n    name = arg[1]\r\n    kind = arg[2]\r\n    attr = arg[3] or {}\r\n  \r\n  elseif type(arg[1]) == \"table\" then\r\n    -- Syntax 2: graph.open{\"NAME\", \"kind\", ATTR, ATTR}\r\n    name = arg[1][1]\r\n    kind = arg[1][2]\r\n    for k,v in npairs(arg[1]) do\r\n      if type(v) == \"table\" then\r\n\tattr[k] = v\r\n      else\r\n\tattr.graph[k] = v\r\n      end\r\n    end\r\n  end\r\n  -- Create the graph and declare attributes\r\n  g = _open(name, kind)\r\n  g:declare(defattr)\r\n  g:declare(attr)\r\n\r\n  -- adjust methods\r\n  overload(g)\r\n\r\n  -- set attributes\r\n  for k,v in pairs(attr) do\r\n    if type(v) == \"table\" then\r\n      g:declare(v)\r\n    else\r\n      g:declare{graph={k=v}}\r\n    end\r\n  end\r\n  return g\r\nend",
    "type": "function"
  }, {
    "id": 176,
    "text": "local g",
    "type": "statement:localassign"
  }, {
    "id": 177,
    "text": "if type(arg[1]) == \"string\" then\r\n    -- Syntax 1: graph.open(\"NAME\",\"directed\", {graph={ATTR,..}, edge={ATTR,..}, node={ATTR,..}})\r\n    name = arg[1]\r\n    kind = arg[2]\r\n    attr = arg[3] or {}\r\n  \r\n  elseif type(arg[1]) == \"table\" then\r\n    -- Syntax 2: graph.open{\"NAME\", \"kind\", ATTR, ATTR}\r\n    name = arg[1][1]\r\n    kind = arg[1][2]\r\n    for k,v in npairs(arg[1]) do\r\n      if type(v) == \"table\" then\r\n\tattr[k] = v\r\n      else\r\n\tattr.graph[k] = v\r\n      end\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 178,
    "text": "kind = arg[2]",
    "type": "statement:assign"
  }, {
    "id": 179,
    "text": "kind = arg[1][2]",
    "type": "statement:assign"
  }, {
    "id": 180,
    "text": "g = _open(name, kind)",
    "type": "statement:assign"
  }, {
    "id": 181,
    "text": "overload(g)",
    "type": "statement:functioncall"
  }, {
    "id": 182,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 183,
    "text": "local function getedge(n, elist)\r\n  for e in n:walkedges() do\r\n    if not elist[e] then\r\n      table.insert(elist, e)\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 184,
    "text": "for e in n:walkedges() do\r\n    if not elist[e] then\r\n      table.insert(elist, e)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 185,
    "text": "if not elist[e] then\r\n      table.insert(elist, e)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 186,
    "text": "table.insert(elist, e)",
    "type": "statement:functioncall"
  }, {
    "id": 187,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 188,
    "text": "local function getnode(g, nlist, elist)\r\n  for n in g:walknodes() do\r\n    if elist then\r\n      getedge(n, elist)\r\n    end\r\n    table.insert(nlist, n)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 189,
    "text": "for n in g:walknodes() do\r\n    if elist then\r\n      getedge(n, elist)\r\n    end\r\n    table.insert(nlist, n)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 190,
    "text": "if elist then\r\n      getedge(n, elist)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 191,
    "text": "getedge(n, elist)",
    "type": "statement:functioncall"
  }, {
    "id": 192,
    "text": "table.insert(nlist, n)",
    "type": "statement:functioncall"
  }, {
    "id": 193,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 194,
    "text": "local function getsubg(g, glist)\r\n  for sg in g:walk() do\r\n    local t = {sg, graph = {}, node = {}, edge = {}}\r\n    table.insert(glist, t)\r\n    getsubg(sg, t.graph)\r\n    getnode(sg, t.node, t.edge)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 195,
    "text": "for sg in g:walk() do\r\n    local t = {sg, graph = {}, node = {}, edge = {}}\r\n    table.insert(glist, t)\r\n    getsubg(sg, t.graph)\r\n    getnode(sg, t.node, t.edge)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 196,
    "text": "local t = {sg, graph = {}, node = {}, edge = {}}",
    "type": "statement:localassign"
  }, {
    "id": 197,
    "text": "table.insert(glist, t)",
    "type": "statement:functioncall"
  }, {
    "id": 198,
    "text": "getsubg(sg, t.graph)",
    "type": "statement:functioncall"
  }, {
    "id": 199,
    "text": "getnode(sg, t.node, t.edge)",
    "type": "statement:functioncall"
  }, {
    "id": 200,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 201,
    "text": "function read(fname, doscan)\r\n  local g, err = _read(fname)\r\n  if not g then return g, err end\r\n  overload(g)\r\n  if doscan == true then\r\n    local t = {\r\n      g,\r\n      graph={},\r\n      node={},\r\n      edge={}\r\n    }\r\n    getsubg(g, t.graph)\r\n    getnode(g, t.node, t.edge)\r\n    return g, t\r\n  else\r\n    return g\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 202,
    "text": "local g, err = _read(fname)",
    "type": "statement:localassign"
  }, {
    "id": 203,
    "text": "if not g then return g, err end",
    "type": "statement:if"
  }, {
    "id": 204,
    "text": "if doscan == true then\r\n    local t = {\r\n      g,\r\n      graph={},\r\n      node={},\r\n      edge={}\r\n    }\r\n    getsubg(g, t.graph)\r\n    getnode(g, t.node, t.edge)\r\n    return g, t\r\n  else\r\n    return g\r\n  end",
    "type": "statement:if"
  }, {
    "id": 205,
    "text": "local t = {\r\n      g,\r\n      graph={},\r\n      node={},\r\n      edge={}\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 206,
    "text": "getsubg(g, t.graph)",
    "type": "statement:functioncall"
  }, {
    "id": 207,
    "text": "getnode(g, t.node, t.edge)",
    "type": "statement:functioncall"
  }, {
    "id": 208,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 209,
    "text": "local function _graph(t, typ)\r\n  local name = t.name or t[1]\r\n  if type(t[1]) == \"string\" then \r\n    table.remove(t, 1)\r\n  end\r\n  assert(name, \"missing name\")\r\n  local g = open(name, typ)\r\n  for k, v in npairs(t) do\r\n    if type(v) == \"table\" then\r\n      g:declare{[k] = v} \r\n    elseif type(v) == \"string\" then\r\n      g[k] = v\r\n    else\r\n      error(\"invalid attribute type\")\r\n    end\r\n  end\r\n  for k,v in ipairs(t) do\r\n    if type(v) == \"function\" then\r\n      v(g)\r\n    else\r\n      error(\"invalid graph attribute\")\r\n    end\r\n  end\r\n  return g\r\nend",
    "type": "function"
  }, {
    "id": 210,
    "text": "local name = t.name or t[1]",
    "type": "statement:localassign"
  }, {
    "id": 211,
    "text": "if type(t[1]) == \"string\" then \r\n    table.remove(t, 1)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 212,
    "text": "table.remove(t, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 213,
    "text": "assert(name, \"missing name\")",
    "type": "statement:functioncall"
  }, {
    "id": 214,
    "text": "local g = open(name, typ)",
    "type": "statement:localassign"
  }, {
    "id": 215,
    "text": "for k, v in npairs(t) do\r\n    if type(v) == \"table\" then\r\n      g:declare{[k] = v} \r\n    elseif type(v) == \"string\" then\r\n      g[k] = v\r\n    else\r\n      error(\"invalid attribute type\")\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 216,
    "text": "if type(v) == \"table\" then\r\n      g:declare{[k] = v} \r\n    elseif type(v) == \"string\" then\r\n      g[k] = v\r\n    else\r\n      error(\"invalid attribute type\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 217,
    "text": "g:declare{[k] = v}",
    "type": "statement:functioncall"
  }, {
    "id": 218,
    "text": "g[k] = v",
    "type": "statement:assign"
  }, {
    "id": 219,
    "text": "error(\"invalid attribute type\")",
    "type": "statement:functioncall"
  }, {
    "id": 220,
    "text": "for k,v in ipairs(t) do\r\n    if type(v) == \"function\" then\r\n      v(g)\r\n    else\r\n      error(\"invalid graph attribute\")\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 221,
    "text": "if type(v) == \"function\" then\r\n      v(g)\r\n    else\r\n      error(\"invalid graph attribute\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 222,
    "text": "v(g)",
    "type": "statement:functioncall"
  }, {
    "id": 223,
    "text": "error(\"invalid graph attribute\")",
    "type": "statement:functioncall"
  }, {
    "id": 224,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 225,
    "text": "function digraph(t)\r\n  return _graph(t, \"directed\")\r\nend",
    "type": "function"
  }, {
    "id": 226,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 227,
    "text": "function strictdigraph(t)\r\n  return _graph(t, \"strictdirected\")\r\nend",
    "type": "function"
  }, {
    "id": 228,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 229,
    "text": "function graph.graph(t)\r\n  return _graph(t, \"undirected\")\r\nend",
    "type": "function"
  }, {
    "id": 230,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 231,
    "text": "function strictgraph(t)\r\n  return _graph(t, \"strict\")\r\nend",
    "type": "function"
  }, {
    "id": 232,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 233,
    "text": "function subgraph(t)\r\n  return function(g) \r\n\t   assert(type(t[1]) == \"string\", \"missing subgraph name\")\r\n\t   local sg = g:subgraph(t[1])\r\n\t   table.remove(t, 1)\r\n\t   for k, v in npairs(t) do\r\n\t     if type(v) == \"string\" then\r\n\t       sg[k] = v\r\n\t     else\r\n\t       error(\"invalid attribute type\")\r\n\t     end\r\n\t   end\r\n\t   for k,v in ipairs(t) do\r\n\t     if type(v) == \"function\" then\r\n\t       v(sg)\r\n\t     else\r\n\t       error(\"invalid attribute type\")\r\n\t     end\r\n\t   end\r\n\t   return sg\r\n\t end\r\nend",
    "type": "function"
  }, {
    "id": 234,
    "text": "assert(type(t[1]) == \"string\", \"missing subgraph name\")",
    "type": "statement:functioncall"
  }, {
    "id": 235,
    "text": "local sg = g:subgraph(t[1])",
    "type": "statement:localassign"
  }, {
    "id": 236,
    "text": "for k, v in npairs(t) do\r\n\t     if type(v) == \"string\" then\r\n\t       sg[k] = v\r\n\t     else\r\n\t       error(\"invalid attribute type\")\r\n\t     end\r\n\t   end",
    "type": "statement:genericfor"
  }, {
    "id": 237,
    "text": "if type(v) == \"string\" then\r\n\t       sg[k] = v\r\n\t     else\r\n\t       error(\"invalid attribute type\")\r\n\t     end",
    "type": "statement:if"
  }, {
    "id": 238,
    "text": "sg[k] = v",
    "type": "statement:assign"
  }, {
    "id": 239,
    "text": "for k,v in ipairs(t) do\r\n\t     if type(v) == \"function\" then\r\n\t       v(sg)\r\n\t     else\r\n\t       error(\"invalid attribute type\")\r\n\t     end\r\n\t   end",
    "type": "statement:genericfor"
  }, {
    "id": 240,
    "text": "if type(v) == \"function\" then\r\n\t       v(sg)\r\n\t     else\r\n\t       error(\"invalid attribute type\")\r\n\t     end",
    "type": "statement:if"
  }, {
    "id": 241,
    "text": "v(sg)",
    "type": "statement:functioncall"
  }, {
    "id": 242,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 243,
    "text": "function cluster(t)\r\n  assert(type(t[1]) == \"string\", \"missing cluster name\")\r\n  t[1] = \"cluster_\"..t[1]\r\n  return subgraph(t)\r\nend",
    "type": "function"
  }, {
    "id": 244,
    "text": "assert(type(t[1]) == \"string\", \"missing cluster name\")",
    "type": "statement:functioncall"
  }, {
    "id": 245,
    "text": "t[1] = \"cluster_\"..t[1]",
    "type": "statement:assign"
  }, {
    "id": 246,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 247,
    "text": "function node(t)\r\n  return function(g) \r\n\t   return g:node(t) \r\n\t end\r\nend",
    "type": "function"
  }, {
    "id": 248,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 249,
    "text": "function record(t)\r\n  return function(g) \r\n\t   return g:record(t) \r\n\t end\r\nend",
    "type": "function"
  }, {
    "id": 250,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 251,
    "text": "function edge(t)\r\n  return function(g) \r\n\t   local p = {}\r\n\t   for k,v in pairs(t) do\r\n\t     if type(v) == \"function\" then\r\n\t       table.insert(p, v(g))\r\n\t     elseif type(v) == \"string\" or type(v) == \"userdata\" then\r\n\t       p[k] = v\r\n\t     else \r\n\t       error(\"invalid parameter\")\r\n\t     end\r\n\t   end\r\n\t   return g:edge(p) \r\n\t end\r\nend",
    "type": "function"
  }, {
    "id": 252,
    "text": "local p = {}",
    "type": "statement:localassign"
  }, {
    "id": 253,
    "text": "for k,v in pairs(t) do\r\n\t     if type(v) == \"function\" then\r\n\t       table.insert(p, v(g))\r\n\t     elseif type(v) == \"string\" or type(v) == \"userdata\" then\r\n\t       p[k] = v\r\n\t     else \r\n\t       error(\"invalid parameter\")\r\n\t     end\r\n\t   end",
    "type": "statement:genericfor"
  }, {
    "id": 254,
    "text": "if type(v) == \"function\" then\r\n\t       table.insert(p, v(g))\r\n\t     elseif type(v) == \"string\" or type(v) == \"userdata\" then\r\n\t       p[k] = v\r\n\t     else \r\n\t       error(\"invalid parameter\")\r\n\t     end",
    "type": "statement:if"
  }, {
    "id": 255,
    "text": "table.insert(p, v(g))",
    "type": "statement:functioncall"
  }, {
    "id": 256,
    "text": "p[k] = v",
    "type": "statement:assign"
  }, {
    "id": 257,
    "text": "error(\"invalid parameter\")",
    "type": "statement:functioncall"
  }, {
    "id": 258,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 259,
    "text": "function(u,v)\r\n\t      _GVMAJOR=base.tonumber(u)\r\n\t      _GVMINOR=base.tonumber(v)\r\n\t    end",
    "type": "function"
  }, {
    "id": 260,
    "text": "_GVMAJOR=base.tonumber(u)",
    "type": "statement:assign"
  }, {
    "id": 261,
    "text": "_GVMINOR=base.tonumber(v)",
    "type": "statement:assign"
  }, {
    "id": 262,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 263,
    "text": "function(t, prev)\r\n\t   k,v = base.next(t, prev)\r\n\t   while type(k) == \"number\" do\r\n\t     k,v = base.next(t, prev)\r\n\t     prev = k\r\n\t   end\r\n\t   return k,v\r\n\t end",
    "type": "function"
  }, {
    "id": 264,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 265,
    "text": "function(u, v, w)\r\n\t\t\t\t\t\tnode.name = u\r\n\t\t\t\t\t\tnode.port = v\r\n\t\t\t\t\t\tnode.compass = w\r\n\t\t\t\t\t       end",
    "type": "function"
  }, {
    "id": 266,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 267,
    "text": "function(u, v, w)\r\n\t\t\t\t\t\t node[i].name = u\r\n\t\t\t\t\t\t node[i].port = v\r\n\t\t\t\t\t\t node[i].compass = w\r\n\t\t\t\t\t       end",
    "type": "function"
  }, {
    "id": 268,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 269,
    "text": "function(dir)\r\n\t   local ss = \"\"\r\n\t   for k, v in ipairs(t) do\r\n\t     if type(v) == \"function\" then\r\n\t       ss = ss .. v(\"h\") .. \"|\"\r\n\t     elseif type(v) == \"string\" then\r\n\t       ss = ss .. v .. \"|\"\r\n\t     end\r\n\t   end\r\n\t   ss = string.sub(ss, 1, -2)\r\n\t   if dir ~= \"h\" then ss = \"{\" .. ss .. \"}\" end\r\n\t   return ss\r\n\t end",
    "type": "function"
  }, {
    "id": 270,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 271,
    "text": "function(dir)\r\n\t   local ss = \"\"\r\n\t   for k, v in ipairs(t) do\r\n\t     if type(v) == \"function\" then\r\n\t       ss = ss .. v(\"v\") .. \"|\"\r\n\t     elseif type(v) == \"string\" then\r\n\t       ss = ss .. v .. \"|\"\r\n\t     end\r\n\t   end\r\n\t   ss = string.sub(ss, 1, -2)\r\n\t   if dir ~= \"v\" then ss = \"{\" .. ss .. \"}\" end\r\n\t   return ss\r\n\t end",
    "type": "function"
  }, {
    "id": 272,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 273,
    "text": "function(g) \r\n\t   assert(type(t[1]) == \"string\", \"missing subgraph name\")\r\n\t   local sg = g:subgraph(t[1])\r\n\t   table.remove(t, 1)\r\n\t   for k, v in npairs(t) do\r\n\t     if type(v) == \"string\" then\r\n\t       sg[k] = v\r\n\t     else\r\n\t       error(\"invalid attribute type\")\r\n\t     end\r\n\t   end\r\n\t   for k,v in ipairs(t) do\r\n\t     if type(v) == \"function\" then\r\n\t       v(sg)\r\n\t     else\r\n\t       error(\"invalid attribute type\")\r\n\t     end\r\n\t   end\r\n\t   return sg\r\n\t end",
    "type": "function"
  }, {
    "id": 274,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 275,
    "text": "function(g) \r\n\t   return g:node(t) \r\n\t end",
    "type": "function"
  }, {
    "id": 276,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 277,
    "text": "function(g) \r\n\t   return g:record(t) \r\n\t end",
    "type": "function"
  }, {
    "id": 278,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 279,
    "text": "function(g) \r\n\t   local p = {}\r\n\t   for k,v in pairs(t) do\r\n\t     if type(v) == \"function\" then\r\n\t       table.insert(p, v(g))\r\n\t     elseif type(v) == \"string\" or type(v) == \"userdata\" then\r\n\t       p[k] = v\r\n\t     else \r\n\t       error(\"invalid parameter\")\r\n\t     end\r\n\t   end\r\n\t   return g:edge(p) \r\n\t end",
    "type": "function"
  }, {
    "id": 280,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 281,
    "text": "",
    "type": "function container"
  }, {
    "id": 282,
    "text": "string",
    "type": "module"
  }, {
    "id": 283,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 284,
    "text": "table",
    "type": "module"
  }, {
    "id": 285,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 286,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 287,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 288,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 289,
    "text": "tmpname",
    "type": "global function"
  }, {
    "id": 290,
    "text": "_read",
    "type": "global function"
  }, {
    "id": 291,
    "text": "module",
    "type": "global function"
  }, {
    "id": 292,
    "text": "v",
    "type": "global function"
  }, {
    "id": 293,
    "text": "lfunc",
    "type": "global function"
  }, {
    "id": 294,
    "text": "type",
    "type": "global function"
  }, {
    "id": 295,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 296,
    "text": "execute",
    "type": "global function"
  }, {
    "id": 297,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 298,
    "text": "error",
    "type": "global function"
  }, {
    "id": 299,
    "text": "require",
    "type": "global function"
  }, {
    "id": 300,
    "text": "_open",
    "type": "global function"
  }, {
    "id": 301,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 302,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 303,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 304,
    "text": "_overload",
    "type": "global function"
  }, {
    "id": 305,
    "text": "next",
    "type": "global function"
  }, {
    "id": 306,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 307,
    "text": "",
    "type": "local variable"
  }, {
    "id": 308,
    "text": "",
    "type": "variable container"
  }, {
    "id": 309,
    "text": "",
    "type": "require container"
  }, {
    "id": 310,
    "text": "",
    "type": "local variable"
  }, {
    "id": 311,
    "text": "",
    "type": "n/a"
  }, {
    "id": 312,
    "text": "",
    "type": "local variable"
  }, {
    "id": 313,
    "text": "",
    "type": "n/a"
  }, {
    "id": 314,
    "text": "",
    "type": "local variable"
  }, {
    "id": 315,
    "text": "",
    "type": "n/a"
  }, {
    "id": 316,
    "text": "",
    "type": "local variable"
  }, {
    "id": 317,
    "text": "",
    "type": "n/a"
  }, {
    "id": 318,
    "text": "",
    "type": "local variable"
  }, {
    "id": 319,
    "text": "",
    "type": "n/a"
  }, {
    "id": 320,
    "text": "",
    "type": "local variable"
  }, {
    "id": 321,
    "text": "",
    "type": "n/a"
  }, {
    "id": 322,
    "text": "",
    "type": "local variable"
  }, {
    "id": 323,
    "text": "",
    "type": "n/a"
  }, {
    "id": 324,
    "text": "",
    "type": "local variable"
  }, {
    "id": 325,
    "text": "",
    "type": "n/a"
  }, {
    "id": 326,
    "text": "",
    "type": "local variable"
  }, {
    "id": 327,
    "text": "",
    "type": "n/a"
  }, {
    "id": 328,
    "text": "",
    "type": "local variable"
  }, {
    "id": 329,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 330,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 331,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 332,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 333,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 334,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 335,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 336,
    "text": "",
    "type": "local variable"
  }, {
    "id": 337,
    "text": "",
    "type": "global variable"
  }, {
    "id": 338,
    "text": "",
    "type": "n/a"
  }, {
    "id": 339,
    "text": "",
    "type": "global variable"
  }, {
    "id": 340,
    "text": "",
    "type": "n/a"
  }, {
    "id": 341,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 342,
    "text": "core",
    "type": "module"
  }, {
    "id": 343,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 344,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 345,
    "text": "",
    "type": "interface container"
  }, {
    "id": 346,
    "text": "",
    "type": "interface"
  }, {
    "id": 347,
    "text": "",
    "type": "require local variable"
  } ]
}