{
  "_filename": "lip.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lip/lip.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 8
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 8
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 8
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 8
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 8
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 8
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 8
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 8
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 8
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 8
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 8
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 8
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 70,
    "label": "has",
    "to": 8
  }, {
    "from": 70,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 76,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 75
  }, {
    "from": 70,
    "label": "has",
    "to": 8
  }, {
    "from": 70,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 83,
    "label": "has",
    "to": 85
  }, {
    "from": 83,
    "label": "has",
    "to": 86
  }, {
    "from": 81,
    "label": "has",
    "to": 86
  }, {
    "from": 70,
    "label": "has",
    "to": 8
  }, {
    "from": 70,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 72
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 91,
    "label": "has",
    "to": 95
  }, {
    "from": 88,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 97,
    "label": "has",
    "to": 100
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 101,
    "label": "has",
    "to": 103
  }, {
    "from": 101,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 105,
    "label": "has",
    "to": 107
  }, {
    "from": 101,
    "label": "has",
    "to": 8
  }, {
    "from": 101,
    "label": "has",
    "to": 108
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 109,
    "label": "has",
    "to": 112
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 109,
    "label": "has",
    "to": 114
  }, {
    "from": 109,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 116,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 119,
    "label": "has",
    "to": 121
  }, {
    "from": 119,
    "label": "has",
    "to": 8
  }, {
    "from": 118,
    "label": "has",
    "to": 122
  }, {
    "from": 118,
    "label": "has",
    "to": 123
  }, {
    "from": 118,
    "label": "has",
    "to": 124
  }, {
    "from": 118,
    "label": "has",
    "to": 125
  }, {
    "from": 118,
    "label": "has",
    "to": 126
  }, {
    "from": 118,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 127,
    "label": "has",
    "to": 129
  }, {
    "from": 127,
    "label": "has",
    "to": 130
  }, {
    "from": 127,
    "label": "has",
    "to": 8
  }, {
    "from": 118,
    "label": "has",
    "to": 123
  }, {
    "from": 118,
    "label": "has",
    "to": 131
  }, {
    "from": 116,
    "label": "has",
    "to": 132
  }, {
    "from": 116,
    "label": "has",
    "to": 133
  }, {
    "from": 116,
    "label": "has",
    "to": 134
  }, {
    "from": 116,
    "label": "has",
    "to": 135
  }, {
    "from": 116,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 136,
    "label": "has",
    "to": 138
  }, {
    "from": 116,
    "label": "has",
    "to": 139
  }, {
    "from": 115,
    "label": "has",
    "to": 140
  }, {
    "from": 115,
    "label": "has",
    "to": 133
  }, {
    "from": 115,
    "label": "has",
    "to": 141
  }, {
    "from": 115,
    "label": "has",
    "to": 142
  }, {
    "from": 115,
    "label": "has",
    "to": 143
  }, {
    "from": 115,
    "label": "has",
    "to": 144
  }, {
    "from": 115,
    "label": "has",
    "to": 133
  }, {
    "from": 115,
    "label": "has",
    "to": 145
  }, {
    "from": 115,
    "label": "has",
    "to": 146
  }, {
    "from": 109,
    "label": "has",
    "to": 8
  }, {
    "from": 109,
    "label": "has",
    "to": 8
  }, {
    "from": 109,
    "label": "has",
    "to": 8
  }, {
    "from": 109,
    "label": "has",
    "to": 8
  }, {
    "from": 109,
    "label": "has",
    "to": 8
  }, {
    "from": 109,
    "label": "has",
    "to": 8
  }, {
    "from": 109,
    "label": "has",
    "to": 8
  }, {
    "from": 109,
    "label": "has",
    "to": 8
  }, {
    "from": 109,
    "label": "has",
    "to": 8
  }, {
    "from": 109,
    "label": "has",
    "to": 8
  }, {
    "from": 109,
    "label": "has",
    "to": 8
  }, {
    "from": 109,
    "label": "has",
    "to": 147
  }, {
    "from": 148,
    "label": "has",
    "to": 120
  }, {
    "from": 148,
    "label": "has",
    "to": 121
  }, {
    "from": 148,
    "label": "has",
    "to": 8
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 150,
    "label": "has",
    "to": 128
  }, {
    "from": 150,
    "label": "has",
    "to": 129
  }, {
    "from": 150,
    "label": "has",
    "to": 130
  }, {
    "from": 150,
    "label": "has",
    "to": 8
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 152,
    "label": "has",
    "to": 154
  }, {
    "from": 152,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 155,
    "label": "has",
    "to": 157
  }, {
    "from": 152,
    "label": "has",
    "to": 158
  }, {
    "from": 19,
    "label": "calls",
    "to": 160
  }, {
    "from": 101,
    "label": "calls",
    "to": 101
  }, {
    "from": 109,
    "label": "calls",
    "to": 101
  }, {
    "from": 22,
    "label": "calls",
    "to": 162
  }, {
    "from": 22,
    "label": "calls",
    "to": 162
  }, {
    "from": 37,
    "label": "calls",
    "to": 162
  }, {
    "from": 37,
    "label": "calls",
    "to": 162
  }, {
    "from": 40,
    "label": "calls",
    "to": 162
  }, {
    "from": 40,
    "label": "calls",
    "to": 162
  }, {
    "from": 43,
    "label": "calls",
    "to": 162
  }, {
    "from": 46,
    "label": "calls",
    "to": 162
  }, {
    "from": 49,
    "label": "calls",
    "to": 162
  }, {
    "from": 49,
    "label": "calls",
    "to": 162
  }, {
    "from": 49,
    "label": "calls",
    "to": 163
  }, {
    "from": 109,
    "label": "calls",
    "to": 163
  }, {
    "from": 109,
    "label": "calls",
    "to": 163
  }, {
    "from": 109,
    "label": "calls",
    "to": 163
  }, {
    "from": 109,
    "label": "calls",
    "to": 163
  }, {
    "from": 109,
    "label": "calls",
    "to": 163
  }, {
    "from": 109,
    "label": "calls",
    "to": 148
  }, {
    "from": 109,
    "label": "calls",
    "to": 168
  }, {
    "from": 70,
    "label": "calls",
    "to": 109
  }, {
    "from": 70,
    "label": "calls",
    "to": 109
  }, {
    "from": 70,
    "label": "calls",
    "to": 109
  }, {
    "from": 109,
    "label": "calls",
    "to": 109
  }, {
    "from": 109,
    "label": "calls",
    "to": 109
  }, {
    "from": 109,
    "label": "calls",
    "to": 109
  }, {
    "from": 109,
    "label": "calls",
    "to": 109
  }, {
    "from": 109,
    "label": "calls",
    "to": 109
  }, {
    "from": 109,
    "label": "calls",
    "to": 109
  }, {
    "from": 109,
    "label": "calls",
    "to": 109
  }, {
    "from": 152,
    "label": "calls",
    "to": 109
  }, {
    "from": 97,
    "label": "calls",
    "to": 164
  }, {
    "from": 109,
    "label": "calls",
    "to": 66
  }, {
    "from": 109,
    "label": "calls",
    "to": 66
  }, {
    "from": 109,
    "label": "calls",
    "to": 167
  }, {
    "from": 88,
    "label": "calls",
    "to": 88
  }, {
    "from": 109,
    "label": "calls",
    "to": 88
  }, {
    "from": 56,
    "label": "calls",
    "to": 53
  }, {
    "from": 6,
    "label": "calls",
    "to": 2
  }, {
    "from": 10,
    "label": "calls",
    "to": 2
  }, {
    "from": 13,
    "label": "calls",
    "to": 2
  }, {
    "from": 16,
    "label": "calls",
    "to": 2
  }, {
    "from": 19,
    "label": "calls",
    "to": 2
  }, {
    "from": 22,
    "label": "calls",
    "to": 2
  }, {
    "from": 25,
    "label": "calls",
    "to": 2
  }, {
    "from": 28,
    "label": "calls",
    "to": 2
  }, {
    "from": 31,
    "label": "calls",
    "to": 2
  }, {
    "from": 34,
    "label": "calls",
    "to": 2
  }, {
    "from": 37,
    "label": "calls",
    "to": 2
  }, {
    "from": 40,
    "label": "calls",
    "to": 2
  }, {
    "from": 43,
    "label": "calls",
    "to": 2
  }, {
    "from": 70,
    "label": "calls",
    "to": 2
  }, {
    "from": 70,
    "label": "calls",
    "to": 2
  }, {
    "from": 88,
    "label": "calls",
    "to": 2
  }, {
    "from": 88,
    "label": "calls",
    "to": 2
  }, {
    "from": 109,
    "label": "calls",
    "to": 2
  }, {
    "from": 109,
    "label": "calls",
    "to": 2
  }, {
    "from": 109,
    "label": "calls",
    "to": 2
  }, {
    "from": 109,
    "label": "calls",
    "to": 2
  }, {
    "from": 109,
    "label": "calls",
    "to": 2
  }, {
    "from": 109,
    "label": "calls",
    "to": 2
  }, {
    "from": 109,
    "label": "calls",
    "to": 2
  }, {
    "from": 109,
    "label": "calls",
    "to": 2
  }, {
    "from": 109,
    "label": "calls",
    "to": 2
  }, {
    "from": 109,
    "label": "calls",
    "to": 2
  }, {
    "from": 152,
    "label": "calls",
    "to": 2
  }, {
    "from": 109,
    "label": "calls",
    "to": 70
  }, {
    "from": 109,
    "label": "calls",
    "to": 70
  }, {
    "from": 109,
    "label": "calls",
    "to": 70
  }, {
    "from": 109,
    "label": "calls",
    "to": 97
  }, {
    "from": 109,
    "label": "calls",
    "to": 97
  }, {
    "from": 152,
    "label": "calls",
    "to": 97
  }, {
    "from": 66,
    "label": "calls",
    "to": 165
  }, {
    "from": 70,
    "label": "calls",
    "to": 165
  }, {
    "from": 88,
    "label": "calls",
    "to": 165
  }, {
    "from": 101,
    "label": "calls",
    "to": 165
  }, {
    "from": 152,
    "label": "calls",
    "to": 165
  }, {
    "from": 109,
    "label": "calls",
    "to": 166
  }, {
    "from": 109,
    "label": "calls",
    "to": 166
  }, {
    "from": 70,
    "label": "calls",
    "to": 170
  }, {
    "from": 70,
    "label": "calls",
    "to": 170
  }, {
    "from": 70,
    "label": "calls",
    "to": 170
  }, {
    "from": 70,
    "label": "calls",
    "to": 170
  }, {
    "from": 70,
    "label": "calls",
    "to": 170
  }, {
    "from": 70,
    "label": "calls",
    "to": 170
  }, {
    "from": 70,
    "label": "calls",
    "to": 170
  }, {
    "from": 88,
    "label": "calls",
    "to": 170
  }, {
    "from": 88,
    "label": "calls",
    "to": 170
  }, {
    "from": 101,
    "label": "calls",
    "to": 170
  }, {
    "from": 109,
    "label": "calls",
    "to": 170
  }, {
    "from": 109,
    "label": "calls",
    "to": 170
  }, {
    "from": 109,
    "label": "calls",
    "to": 170
  }, {
    "from": 109,
    "label": "calls",
    "to": 170
  }, {
    "from": 109,
    "label": "calls",
    "to": 170
  }, {
    "from": 109,
    "label": "calls",
    "to": 170
  }, {
    "from": 109,
    "label": "calls",
    "to": 170
  }, {
    "from": 109,
    "label": "calls",
    "to": 170
  }, {
    "from": 109,
    "label": "calls",
    "to": 170
  }, {
    "from": 109,
    "label": "calls",
    "to": 169
  }, {
    "from": 2,
    "label": "calls",
    "to": 161
  }, {
    "from": 46,
    "label": "calls",
    "to": 161
  }, {
    "from": 59,
    "label": "calls",
    "to": 161
  }, {
    "from": 59,
    "label": "calls",
    "to": 161
  }, {
    "from": 59,
    "label": "calls",
    "to": 161
  }, {
    "from": 63,
    "label": "calls",
    "to": 161
  }, {
    "from": 53,
    "label": "calls",
    "to": 49
  }, {
    "from": 1,
    "label": "contains",
    "to": 159
  }, {
    "from": 159,
    "label": "declares",
    "to": 2
  }, {
    "from": 159,
    "label": "declares",
    "to": 6
  }, {
    "from": 159,
    "label": "declares",
    "to": 10
  }, {
    "from": 159,
    "label": "declares",
    "to": 13
  }, {
    "from": 159,
    "label": "declares",
    "to": 16
  }, {
    "from": 159,
    "label": "declares",
    "to": 19
  }, {
    "from": 159,
    "label": "declares",
    "to": 22
  }, {
    "from": 159,
    "label": "declares",
    "to": 25
  }, {
    "from": 159,
    "label": "declares",
    "to": 28
  }, {
    "from": 159,
    "label": "declares",
    "to": 31
  }, {
    "from": 159,
    "label": "declares",
    "to": 34
  }, {
    "from": 159,
    "label": "declares",
    "to": 37
  }, {
    "from": 159,
    "label": "declares",
    "to": 40
  }, {
    "from": 159,
    "label": "declares",
    "to": 43
  }, {
    "from": 159,
    "label": "declares",
    "to": 46
  }, {
    "from": 159,
    "label": "declares",
    "to": 49
  }, {
    "from": 159,
    "label": "declares",
    "to": 53
  }, {
    "from": 159,
    "label": "declares",
    "to": 56
  }, {
    "from": 159,
    "label": "declares",
    "to": 59
  }, {
    "from": 159,
    "label": "declares",
    "to": 63
  }, {
    "from": 159,
    "label": "declares",
    "to": 66
  }, {
    "from": 159,
    "label": "declares",
    "to": 70
  }, {
    "from": 159,
    "label": "declares",
    "to": 88
  }, {
    "from": 159,
    "label": "declares",
    "to": 97
  }, {
    "from": 159,
    "label": "declares",
    "to": 101
  }, {
    "from": 159,
    "label": "declares",
    "to": 109
  }, {
    "from": 159,
    "label": "declares",
    "to": 148
  }, {
    "from": 159,
    "label": "declares",
    "to": 150
  }, {
    "from": 159,
    "label": "declares",
    "to": 152
  }, {
    "from": 1,
    "label": "contains",
    "to": 171
  }, {
    "from": 1,
    "label": "contains",
    "to": 172
  }, {
    "from": 171,
    "label": "initializes",
    "to": 173
  }, {
    "from": 173,
    "label": "assigns",
    "to": 174
  }, {
    "from": 171,
    "label": "initializes",
    "to": 175
  }, {
    "from": 171,
    "label": "initializes",
    "to": 176
  }, {
    "from": 176,
    "label": "assigns",
    "to": 177
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "lip",
    "type": "module"
  }, {
    "id": 2,
    "text": "function lip_debug_print(val)\r\n if(Lisp.verbose) then\r\n  print(val)\r\n end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "if(Lisp.verbose) then\r\n  print(val)\r\n end",
    "type": "statement:if"
  }, {
    "id": 4,
    "text": "print(val)",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "function add(x, y)\r\n lip_debug_print(\"> add \" .. x .. \", \" .. y)\r\n return x + y\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "lip_debug_print(\"> add \" .. x .. \", \" .. y)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function sub(x, y)\r\n lip_debug_print(\"> sub \" .. x .. \", \" .. y)\r\n return x - y\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "lip_debug_print(\"> sub \" .. x .. \", \" .. y)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function mut(x, y)\r\n lip_debug_print(\"> mut \" .. x .. \", \" .. y)\r\n return x * y\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "lip_debug_print(\"> mut \" .. x .. \", \" .. y)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function div(x, y)\r\n lip_debug_print(\"> div \" .. x .. \", \" .. y)\r\n return x / y;\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "lip_debug_print(\"> div \" .. x .. \", \" .. y)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function mod(x, y)\r\n lip_debug_print(\"> mod \" .. x .. \", \" .. y)\r\n return math.mod(x, y)\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "lip_debug_print(\"> mod \" .. x .. \", \" .. y)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function eq(x, y)\r\n lip_debug_print(\"> eq \" .. tostring(x) .. \", \" .. tostring(y))\r\n return x == y\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "lip_debug_print(\"> eq \" .. tostring(x) .. \", \" .. tostring(y))",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function gt(x, y)\r\n lip_debug_print(\"> gt \" .. x .. \", \" .. y)\r\n return x > y\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "lip_debug_print(\"> gt \" .. x .. \", \" .. y)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function ge(x, y)\r\n lip_debug_print(\"> ge \" .. x .. \", \" .. y)\r\n return x >= y\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "lip_debug_print(\"> ge \" .. x .. \", \" .. y)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function lt(x, y)\r\n lip_debug_print(\"> lt \" .. x .. \", \" .. y)\r\n return x < y\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "lip_debug_print(\"> lt \" .. x .. \", \" .. y)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function le(x, y)\r\n lip_debug_print(\"> le \" .. x .. \", \" .. y)\r\n return x <= y\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "lip_debug_print(\"> le \" .. x .. \", \" .. y)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function _or(x, y)\r\n lip_debug_print(\"> or \" .. tostring(x) .. \", \" .. tostring(y))\r\n return x or y\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "lip_debug_print(\"> or \" .. tostring(x) .. \", \" .. tostring(y))",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function _and(x, y)\r\n lip_debug_print(\"> and \" .. tostring(x) .. \", \" .. tostring(y))\r\n return x and y\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "lip_debug_print(\"> and \" .. tostring(x) .. \", \" .. tostring(y))",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function _not(x)\r\n lip_debug_print(\"> not \" .. tostring(x))\r\n return not x\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "lip_debug_print(\"> not \" .. tostring(x))",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function lip_print(v)\r\n print(\"[lip print] : \" .. tostring(v))\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "print(\"[lip print] : \" .. tostring(v))",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function lip_assert_eq(lhs, rhs)\r\n if(lhs ~= rhs) then error('[lip assert] failed : ' .. tostring(lhs) .. ', ' .. tostring(rhs)) end\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "if(lhs ~= rhs) then error('[lip assert] failed : ' .. tostring(lhs) .. ', ' .. tostring(rhs)) end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "error('[lip assert] failed : ' .. tostring(lhs) .. ', ' .. tostring(rhs))",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function lip_assert_true(v)\r\n lip_assert_eq(v, true)\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "lip_assert_eq(v, true)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function lip_assert_false(v)\r\n lip_assert_true(not v)\r\nend",
    "type": "function"
  }, {
    "id": 57,
    "text": "lip_assert_true(not v)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function lip_for_whom()\r\n print(\"------------------------------\")\r\n print(\"-- Lip\\'s written for Xu Hui --\")\r\n print(\"------------------------------\")\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "print(\"------------------------------\")",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "print(\"-- Lip\\'s written for Xu Hui --\")",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function lip_version()\r\n print('Lip 0.1 Alpha copyright(c) hanzhao(abrash_han@hotmail.com)')\r\nend",
    "type": "function"
  }, {
    "id": 64,
    "text": "print('Lip 0.1 Alpha copyright(c) hanzhao(abrash_han@hotmail.com)')",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function pass_args(parm, arg)\r\n for i = 1, table.getn(parm) do\r\n  -- should here be an exec on each arg?\r\n  arg[parm[i]] = arg[i]\r\n end\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "for i = 1, table.getn(parm) do\r\n  -- should here be an exec on each arg?\r\n  arg[parm[i]] = arg[i]\r\n end",
    "type": "statement:numericfor"
  }, {
    "id": 68,
    "text": "arg[parm[i]] = arg[i]",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function bind_args(stat, upper)\r\n  local rslt = {}\r\n  local n = table.getn(stat)\r\n  \r\n  if(type(stat[1]) == \"function\" and type(stat[2]) == \"table\") then\r\n    -- native function call, if stat[2] is not table, it's just another\r\n    -- function arg\r\n    lip_debug_print('stat[1] is function')\r\n    rslt[1] = lisp_exec(stat, upper)\r\n    return rslt\r\n  end\r\n  \r\n  -- it's a lisp defined function call\r\n  if(type(stat[1]) == \"string\" and type(stat[2]) == \"table\") then\r\n    lip_debug_print('stat[1] is string')\r\n    local val = upper[stat[1]]\r\n    if(type(val) == \"function\") then\r\n     -- func call\r\n     rslt[1] = lisp_exec(stat, upper)\r\n     return rslt\r\n    end\r\n  end\r\n  \r\n  --[[ it's an anonymous lambda\r\n  if(type(stat[1]) == \"number\" and stat[1] == Lisp.lambda) then\r\n   if(type(stat[2]) ~= \"table\") then\r\n    error(\"expect table as params for anonymous lambda but get \" .. type(stat[2]))\r\n   end\r\n   rslt[1] = lisp_exec(stat, upper)\r\n   return rslt\r\n  end]]--\r\n  \r\n  for i=1, n do\r\n   if(type(stat[i]) == \"table\") then\r\n    rslt[i] = lisp_exec(stat[i], upper)\r\n   elseif(type(stat[i]) == \"string\") then\r\n    if(upper[stat[i]]) then\r\n     -- defined names, param or named lambda\r\n     local val = upper[stat[i]]\r\n     --[[if(type(val) == \"function\") then\r\n      -- func call\r\n      --rslt[1] = lisp_exec(stat, upper)\r\n      --return rslt\r\n      error(\"argument error, unexpected function.\")\r\n     else--]]\r\n      -- normal arg\r\n      rslt[i] = val\r\n     --end\r\n    else\r\n     -- normal string\r\n     rslt[i] = stat[i]\r\n    end\r\n   else\r\n    rslt[i] = stat[i]\r\n   end\r\n  end\r\n  return rslt\r\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "local rslt = {}",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "local n = table.getn(stat)",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "if(type(stat[1]) == \"function\" and type(stat[2]) == \"table\") then\r\n    -- native function call, if stat[2] is not table, it's just another\r\n    -- function arg\r\n    lip_debug_print('stat[1] is function')\r\n    rslt[1] = lisp_exec(stat, upper)\r\n    return rslt\r\n  end",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "lip_debug_print('stat[1] is function')",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "rslt[1] = lisp_exec(stat, upper)",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "if(type(stat[1]) == \"string\" and type(stat[2]) == \"table\") then\r\n    lip_debug_print('stat[1] is string')\r\n    local val = upper[stat[1]]\r\n    if(type(val) == \"function\") then\r\n     -- func call\r\n     rslt[1] = lisp_exec(stat, upper)\r\n     return rslt\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "lip_debug_print('stat[1] is string')",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "local val = upper[stat[1]]",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "if(type(val) == \"function\") then\r\n     -- func call\r\n     rslt[1] = lisp_exec(stat, upper)\r\n     return rslt\r\n    end",
    "type": "statement:if"
  }, {
    "id": 80,
    "text": "for i=1, n do\r\n   if(type(stat[i]) == \"table\") then\r\n    rslt[i] = lisp_exec(stat[i], upper)\r\n   elseif(type(stat[i]) == \"string\") then\r\n    if(upper[stat[i]]) then\r\n     -- defined names, param or named lambda\r\n     local val = upper[stat[i]]\r\n     --[[if(type(val) == \"function\") then\r\n      -- func call\r\n      --rslt[1] = lisp_exec(stat, upper)\r\n      --return rslt\r\n      error(\"argument error, unexpected function.\")\r\n     else--]]\r\n      -- normal arg\r\n      rslt[i] = val\r\n     --end\r\n    else\r\n     -- normal string\r\n     rslt[i] = stat[i]\r\n    end\r\n   else\r\n    rslt[i] = stat[i]\r\n   end\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 81,
    "text": "if(type(stat[i]) == \"table\") then\r\n    rslt[i] = lisp_exec(stat[i], upper)\r\n   elseif(type(stat[i]) == \"string\") then\r\n    if(upper[stat[i]]) then\r\n     -- defined names, param or named lambda\r\n     local val = upper[stat[i]]\r\n     --[[if(type(val) == \"function\") then\r\n      -- func call\r\n      --rslt[1] = lisp_exec(stat, upper)\r\n      --return rslt\r\n      error(\"argument error, unexpected function.\")\r\n     else--]]\r\n      -- normal arg\r\n      rslt[i] = val\r\n     --end\r\n    else\r\n     -- normal string\r\n     rslt[i] = stat[i]\r\n    end\r\n   else\r\n    rslt[i] = stat[i]\r\n   end",
    "type": "statement:if"
  }, {
    "id": 82,
    "text": "rslt[i] = lisp_exec(stat[i], upper)",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "if(upper[stat[i]]) then\r\n     -- defined names, param or named lambda\r\n     local val = upper[stat[i]]\r\n     --[[if(type(val) == \"function\") then\r\n      -- func call\r\n      --rslt[1] = lisp_exec(stat, upper)\r\n      --return rslt\r\n      error(\"argument error, unexpected function.\")\r\n     else--]]\r\n      -- normal arg\r\n      rslt[i] = val\r\n     --end\r\n    else\r\n     -- normal string\r\n     rslt[i] = stat[i]\r\n    end",
    "type": "statement:if"
  }, {
    "id": 84,
    "text": "local val = upper[stat[i]]",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "rslt[i] = val",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "rslt[i] = stat[i]",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "function bind_closure(stat, ctxt, except)\r\n lip_debug_print(\"bind closure\")\r\n local n = table.getn(stat)\r\n for i = 1, n do\r\n  if(type(stat[i]) == 'string') then\r\n   lip_debug_print(stat[i])\r\n   if(ctxt[stat[i]] and not except[stat[i]]) then\r\n    stat[i] = ctxt[stat[i]]\r\n   end\r\n  elseif(type(stat[i]) == 'table') then\r\n   bind_closure(stat[i], ctxt, except)\r\n  else\r\n   -- no other type need to be handled here\r\n  end\r\n end\r\nend",
    "type": "function"
  }, {
    "id": 89,
    "text": "lip_debug_print(\"bind closure\")",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "for i = 1, n do\r\n  if(type(stat[i]) == 'string') then\r\n   lip_debug_print(stat[i])\r\n   if(ctxt[stat[i]] and not except[stat[i]]) then\r\n    stat[i] = ctxt[stat[i]]\r\n   end\r\n  elseif(type(stat[i]) == 'table') then\r\n   bind_closure(stat[i], ctxt, except)\r\n  else\r\n   -- no other type need to be handled here\r\n  end\r\n end",
    "type": "statement:numericfor"
  }, {
    "id": 91,
    "text": "if(type(stat[i]) == 'string') then\r\n   lip_debug_print(stat[i])\r\n   if(ctxt[stat[i]] and not except[stat[i]]) then\r\n    stat[i] = ctxt[stat[i]]\r\n   end\r\n  elseif(type(stat[i]) == 'table') then\r\n   bind_closure(stat[i], ctxt, except)\r\n  else\r\n   -- no other type need to be handled here\r\n  end",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "lip_debug_print(stat[i])",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "if(ctxt[stat[i]] and not except[stat[i]]) then\r\n    stat[i] = ctxt[stat[i]]\r\n   end",
    "type": "statement:if"
  }, {
    "id": 94,
    "text": "stat[i] = ctxt[stat[i]]",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "bind_closure(stat[i], ctxt, except)",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "function chain_up(tbl, meta)\r\n setmetatable(tbl, meta)\r\n meta.__index = meta\r\nend",
    "type": "function"
  }, {
    "id": 98,
    "text": "setmetatable(tbl, meta)",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "meta.__index = meta",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 101,
    "text": "function cpytbl(src)\r\n local n = table.getn(src)\r\n local dst = {}\r\n for i = 1, n do\r\n  if(type(src[i]) == 'table') then\r\n   dst[i] = cpytbl(src[i])\r\n  else\r\n   dst[i] = src[i]\r\n  end\r\n end\r\n return dst\r\nend",
    "type": "function"
  }, {
    "id": 102,
    "text": "local n = table.getn(src)",
    "type": "statement:localassign"
  }, {
    "id": 103,
    "text": "local dst = {}",
    "type": "statement:localassign"
  }, {
    "id": 104,
    "text": "for i = 1, n do\r\n  if(type(src[i]) == 'table') then\r\n   dst[i] = cpytbl(src[i])\r\n  else\r\n   dst[i] = src[i]\r\n  end\r\n end",
    "type": "statement:numericfor"
  }, {
    "id": 105,
    "text": "if(type(src[i]) == 'table') then\r\n   dst[i] = cpytbl(src[i])\r\n  else\r\n   dst[i] = src[i]\r\n  end",
    "type": "statement:if"
  }, {
    "id": 106,
    "text": "dst[i] = cpytbl(src[i])",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "dst[i] = src[i]",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 109,
    "text": "function lisp_exec(stat, upper)\r\n if(stat[1] == nil) then error(\"error: unknown stat[1].\") end\r\n if(upper == nil) then error(\"error: no context passed in.\") end\r\n \r\n -- where to find names\r\n setfenv(1, upper)\r\n \r\n if(type(stat[1]) == \"number\") then\r\n  -- lisp key words\r\n  if(stat[1] == Lisp.lambda) then\r\n   lip_debug_print(\"define lambda\")\r\n   if(type(stat[2]) == \"string\") then -- named lambda\r\n    -- name, param, body\r\n    local func = function (arg)\r\n\t              -- bind \r\n\t              pass_args(stat[3], arg)\r\n                      -- name lookup\r\n\t              chain_up(arg, upper) \r\n\t              return lisp_exec(stat[4], arg)\r\n                 end\r\n\r\n    -- a new func name defined(in upper context), so latter can be called\r\n    upper[stat[2]] = func\r\n    --table.foreach(upper, print)\r\n    Lisp.lisp_func_reg[func] = true\r\n    return func\r\n    \r\n   elseif(type(stat[2]) == \"table\") then -- anonymous lambda\r\n    -- param, body\r\n    lip_debug_print(\"anonymous lambda\")\r\n    --table.foreach(upper, print)\r\n    \r\n    -- closure need a copy\r\n    local stat3cpy = cpytbl(stat[3])\r\n    bind_closure(stat3cpy, upper, stat[2])\r\n    local func = function (arg)\r\n                  -- bind\r\n                  local tabled_arg = arg\r\n                  pass_args(stat[2], tabled_arg)\r\n\r\n                  -- name lookup\r\n                  chain_up(tabled_arg, upper)\r\n                  return lisp_exec(stat3cpy, tabled_arg)\r\n                 end\r\n                 \r\n     Lisp.lisp_func_reg[func] = true\r\n     return func\r\n   else\r\n    error('unsupported lambda type' .. type(stat[2]))\r\n   end\r\n   \r\n  elseif(stat[1] == Lisp.ret) then\r\n   -- {ret, {vals}}\r\n   lip_debug_print(\"return\")\r\n   --return lisp_exec(stat[2], upper)\r\n   local rslt = bind_args(stat[2], upper)\r\n   return rslt[1] -- only one return val\r\n   \r\n  elseif(stat[1] == Lisp.cond) then\r\n   -- {Lisp.cond, bool-expression, true-first, false-second}\r\n   lip_debug_print(\"- cond\")\r\n   --table.foreach(stat[2], print)\r\n   local rslt = lisp_exec(stat[2], upper)\r\n   if(rslt) then\r\n    lip_debug_print(\"-- cond true\")\r\n    return lisp_exec(stat[3], upper) -- true\r\n   else\r\n    lip_debug_print(\"-- cond false\")\r\n    return lisp_exec(stat[4], upper) -- false\r\n   end\r\n  elseif(stat[1] == Lisp.arg) then\r\n   -- {Lisp.arg, {args}}\r\n   return lisp_exec(stat[2], upper)\r\n  else\r\n   error('unrecognized key word : ' .. stat[1])\r\n  end\r\n  \r\n elseif(type(stat[1]) == \"function\") then\r\n  -- native lua function call\r\n  -- {func, {args}}\r\n  lip_debug_print(\"native function call\")\r\n  -- bind args\r\n  \r\n  local rslt = bind_args(stat[2], upper)\r\n  if(Lisp.lisp_func_reg[stat[1]]) then\r\n   -- lisp defined function need args be in table\r\n   return stat[1](rslt)\r\n  else\r\n   -- unpack the result to call native lua func\r\n   return stat[1](unpack(rslt))\r\n  end\r\n  \r\n elseif(type(stat[1]) == \"table\") then\r\n  -- {{closure}, {args}}\r\n  -- calc stat[1] first\r\n  lip_debug_print(\"- eval table\")\r\n  -- it's a function call? defining a closure\r\n  --bind_closure(stat[1][2], upper, {})\r\n  --table.foreach(stat[1][2], print)\r\n  local func = lisp_exec(stat[1], upper)\r\n  \r\n  --stat[1] = func\r\n  --lisp_exec(stat, upper)\r\n  \r\n  return func(stat[2])\r\n\r\n elseif(type(stat[1]) == \"string\") then\r\n  -- lisp defined function\r\n  lip_debug_print(\"call lisp defined function : \" .. stat[1])\r\n  -- it must be in upper context\r\n  -- local arg = lisp_exec(stat[2], upper)\r\n  local rslt = bind_args(stat[2], upper)\r\n  --table.foreach(rslt, print)\r\n  return upper[stat[1]](rslt)\r\n elseif(type(stat[1]) == \"boolean\") then\r\n  -- bool expression\r\n  lip_debug_print(\"boolean expression\")\r\n  return stat[1]\r\n else\r\n  error('unsupported stat[1] type : ' .. type(stat[1]))\r\n end\r\nend",
    "type": "function"
  }, {
    "id": 110,
    "text": "if(stat[1] == nil) then error(\"error: unknown stat[1].\") end",
    "type": "statement:if"
  }, {
    "id": 111,
    "text": "error(\"error: unknown stat[1].\")",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "if(upper == nil) then error(\"error: no context passed in.\") end",
    "type": "statement:if"
  }, {
    "id": 113,
    "text": "error(\"error: no context passed in.\")",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "setfenv(1, upper)",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "if(type(stat[1]) == \"number\") then\r\n  -- lisp key words\r\n  if(stat[1] == Lisp.lambda) then\r\n   lip_debug_print(\"define lambda\")\r\n   if(type(stat[2]) == \"string\") then -- named lambda\r\n    -- name, param, body\r\n    local func = function (arg)\r\n\t              -- bind \r\n\t              pass_args(stat[3], arg)\r\n                      -- name lookup\r\n\t              chain_up(arg, upper) \r\n\t              return lisp_exec(stat[4], arg)\r\n                 end\r\n\r\n    -- a new func name defined(in upper context), so latter can be called\r\n    upper[stat[2]] = func\r\n    --table.foreach(upper, print)\r\n    Lisp.lisp_func_reg[func] = true\r\n    return func\r\n    \r\n   elseif(type(stat[2]) == \"table\") then -- anonymous lambda\r\n    -- param, body\r\n    lip_debug_print(\"anonymous lambda\")\r\n    --table.foreach(upper, print)\r\n    \r\n    -- closure need a copy\r\n    local stat3cpy = cpytbl(stat[3])\r\n    bind_closure(stat3cpy, upper, stat[2])\r\n    local func = function (arg)\r\n                  -- bind\r\n                  local tabled_arg = arg\r\n                  pass_args(stat[2], tabled_arg)\r\n\r\n                  -- name lookup\r\n                  chain_up(tabled_arg, upper)\r\n                  return lisp_exec(stat3cpy, tabled_arg)\r\n                 end\r\n                 \r\n     Lisp.lisp_func_reg[func] = true\r\n     return func\r\n   else\r\n    error('unsupported lambda type' .. type(stat[2]))\r\n   end\r\n   \r\n  elseif(stat[1] == Lisp.ret) then\r\n   -- {ret, {vals}}\r\n   lip_debug_print(\"return\")\r\n   --return lisp_exec(stat[2], upper)\r\n   local rslt = bind_args(stat[2], upper)\r\n   return rslt[1] -- only one return val\r\n   \r\n  elseif(stat[1] == Lisp.cond) then\r\n   -- {Lisp.cond, bool-expression, true-first, false-second}\r\n   lip_debug_print(\"- cond\")\r\n   --table.foreach(stat[2], print)\r\n   local rslt = lisp_exec(stat[2], upper)\r\n   if(rslt) then\r\n    lip_debug_print(\"-- cond true\")\r\n    return lisp_exec(stat[3], upper) -- true\r\n   else\r\n    lip_debug_print(\"-- cond false\")\r\n    return lisp_exec(stat[4], upper) -- false\r\n   end\r\n  elseif(stat[1] == Lisp.arg) then\r\n   -- {Lisp.arg, {args}}\r\n   return lisp_exec(stat[2], upper)\r\n  else\r\n   error('unrecognized key word : ' .. stat[1])\r\n  end\r\n  \r\n elseif(type(stat[1]) == \"function\") then\r\n  -- native lua function call\r\n  -- {func, {args}}\r\n  lip_debug_print(\"native function call\")\r\n  -- bind args\r\n  \r\n  local rslt = bind_args(stat[2], upper)\r\n  if(Lisp.lisp_func_reg[stat[1]]) then\r\n   -- lisp defined function need args be in table\r\n   return stat[1](rslt)\r\n  else\r\n   -- unpack the result to call native lua func\r\n   return stat[1](unpack(rslt))\r\n  end\r\n  \r\n elseif(type(stat[1]) == \"table\") then\r\n  -- {{closure}, {args}}\r\n  -- calc stat[1] first\r\n  lip_debug_print(\"- eval table\")\r\n  -- it's a function call? defining a closure\r\n  --bind_closure(stat[1][2], upper, {})\r\n  --table.foreach(stat[1][2], print)\r\n  local func = lisp_exec(stat[1], upper)\r\n  \r\n  --stat[1] = func\r\n  --lisp_exec(stat, upper)\r\n  \r\n  return func(stat[2])\r\n\r\n elseif(type(stat[1]) == \"string\") then\r\n  -- lisp defined function\r\n  lip_debug_print(\"call lisp defined function : \" .. stat[1])\r\n  -- it must be in upper context\r\n  -- local arg = lisp_exec(stat[2], upper)\r\n  local rslt = bind_args(stat[2], upper)\r\n  --table.foreach(rslt, print)\r\n  return upper[stat[1]](rslt)\r\n elseif(type(stat[1]) == \"boolean\") then\r\n  -- bool expression\r\n  lip_debug_print(\"boolean expression\")\r\n  return stat[1]\r\n else\r\n  error('unsupported stat[1] type : ' .. type(stat[1]))\r\n end",
    "type": "statement:if"
  }, {
    "id": 116,
    "text": "if(stat[1] == Lisp.lambda) then\r\n   lip_debug_print(\"define lambda\")\r\n   if(type(stat[2]) == \"string\") then -- named lambda\r\n    -- name, param, body\r\n    local func = function (arg)\r\n\t              -- bind \r\n\t              pass_args(stat[3], arg)\r\n                      -- name lookup\r\n\t              chain_up(arg, upper) \r\n\t              return lisp_exec(stat[4], arg)\r\n                 end\r\n\r\n    -- a new func name defined(in upper context), so latter can be called\r\n    upper[stat[2]] = func\r\n    --table.foreach(upper, print)\r\n    Lisp.lisp_func_reg[func] = true\r\n    return func\r\n    \r\n   elseif(type(stat[2]) == \"table\") then -- anonymous lambda\r\n    -- param, body\r\n    lip_debug_print(\"anonymous lambda\")\r\n    --table.foreach(upper, print)\r\n    \r\n    -- closure need a copy\r\n    local stat3cpy = cpytbl(stat[3])\r\n    bind_closure(stat3cpy, upper, stat[2])\r\n    local func = function (arg)\r\n                  -- bind\r\n                  local tabled_arg = arg\r\n                  pass_args(stat[2], tabled_arg)\r\n\r\n                  -- name lookup\r\n                  chain_up(tabled_arg, upper)\r\n                  return lisp_exec(stat3cpy, tabled_arg)\r\n                 end\r\n                 \r\n     Lisp.lisp_func_reg[func] = true\r\n     return func\r\n   else\r\n    error('unsupported lambda type' .. type(stat[2]))\r\n   end\r\n   \r\n  elseif(stat[1] == Lisp.ret) then\r\n   -- {ret, {vals}}\r\n   lip_debug_print(\"return\")\r\n   --return lisp_exec(stat[2], upper)\r\n   local rslt = bind_args(stat[2], upper)\r\n   return rslt[1] -- only one return val\r\n   \r\n  elseif(stat[1] == Lisp.cond) then\r\n   -- {Lisp.cond, bool-expression, true-first, false-second}\r\n   lip_debug_print(\"- cond\")\r\n   --table.foreach(stat[2], print)\r\n   local rslt = lisp_exec(stat[2], upper)\r\n   if(rslt) then\r\n    lip_debug_print(\"-- cond true\")\r\n    return lisp_exec(stat[3], upper) -- true\r\n   else\r\n    lip_debug_print(\"-- cond false\")\r\n    return lisp_exec(stat[4], upper) -- false\r\n   end\r\n  elseif(stat[1] == Lisp.arg) then\r\n   -- {Lisp.arg, {args}}\r\n   return lisp_exec(stat[2], upper)\r\n  else\r\n   error('unrecognized key word : ' .. stat[1])\r\n  end",
    "type": "statement:if"
  }, {
    "id": 117,
    "text": "lip_debug_print(\"define lambda\")",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "if(type(stat[2]) == \"string\") then -- named lambda\r\n    -- name, param, body\r\n    local func = function (arg)\r\n\t              -- bind \r\n\t              pass_args(stat[3], arg)\r\n                      -- name lookup\r\n\t              chain_up(arg, upper) \r\n\t              return lisp_exec(stat[4], arg)\r\n                 end\r\n\r\n    -- a new func name defined(in upper context), so latter can be called\r\n    upper[stat[2]] = func\r\n    --table.foreach(upper, print)\r\n    Lisp.lisp_func_reg[func] = true\r\n    return func\r\n    \r\n   elseif(type(stat[2]) == \"table\") then -- anonymous lambda\r\n    -- param, body\r\n    lip_debug_print(\"anonymous lambda\")\r\n    --table.foreach(upper, print)\r\n    \r\n    -- closure need a copy\r\n    local stat3cpy = cpytbl(stat[3])\r\n    bind_closure(stat3cpy, upper, stat[2])\r\n    local func = function (arg)\r\n                  -- bind\r\n                  local tabled_arg = arg\r\n                  pass_args(stat[2], tabled_arg)\r\n\r\n                  -- name lookup\r\n                  chain_up(tabled_arg, upper)\r\n                  return lisp_exec(stat3cpy, tabled_arg)\r\n                 end\r\n                 \r\n     Lisp.lisp_func_reg[func] = true\r\n     return func\r\n   else\r\n    error('unsupported lambda type' .. type(stat[2]))\r\n   end",
    "type": "statement:if"
  }, {
    "id": 119,
    "text": "local func = function (arg)\r\n\t              -- bind \r\n\t              pass_args(stat[3], arg)\r\n                      -- name lookup\r\n\t              chain_up(arg, upper) \r\n\t              return lisp_exec(stat[4], arg)\r\n                 end",
    "type": "statement:localassign"
  }, {
    "id": 120,
    "text": "pass_args(stat[3], arg)",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "chain_up(arg, upper)",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "upper[stat[2]] = func",
    "type": "statement:assign"
  }, {
    "id": 123,
    "text": "Lisp.lisp_func_reg[func] = true",
    "type": "statement:assign"
  }, {
    "id": 124,
    "text": "lip_debug_print(\"anonymous lambda\")",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "local stat3cpy = cpytbl(stat[3])",
    "type": "statement:localassign"
  }, {
    "id": 126,
    "text": "bind_closure(stat3cpy, upper, stat[2])",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "local func = function (arg)\r\n                  -- bind\r\n                  local tabled_arg = arg\r\n                  pass_args(stat[2], tabled_arg)\r\n\r\n                  -- name lookup\r\n                  chain_up(tabled_arg, upper)\r\n                  return lisp_exec(stat3cpy, tabled_arg)\r\n                 end",
    "type": "statement:localassign"
  }, {
    "id": 128,
    "text": "local tabled_arg = arg",
    "type": "statement:localassign"
  }, {
    "id": 129,
    "text": "pass_args(stat[2], tabled_arg)",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "chain_up(tabled_arg, upper)",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "error('unsupported lambda type' .. type(stat[2]))",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "lip_debug_print(\"return\")",
    "type": "statement:functioncall"
  }, {
    "id": 133,
    "text": "local rslt = bind_args(stat[2], upper)",
    "type": "statement:localassign"
  }, {
    "id": 134,
    "text": "lip_debug_print(\"- cond\")",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "local rslt = lisp_exec(stat[2], upper)",
    "type": "statement:localassign"
  }, {
    "id": 136,
    "text": "if(rslt) then\r\n    lip_debug_print(\"-- cond true\")\r\n    return lisp_exec(stat[3], upper) -- true\r\n   else\r\n    lip_debug_print(\"-- cond false\")\r\n    return lisp_exec(stat[4], upper) -- false\r\n   end",
    "type": "statement:if"
  }, {
    "id": 137,
    "text": "lip_debug_print(\"-- cond true\")",
    "type": "statement:functioncall"
  }, {
    "id": 138,
    "text": "lip_debug_print(\"-- cond false\")",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "error('unrecognized key word : ' .. stat[1])",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "lip_debug_print(\"native function call\")",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "if(Lisp.lisp_func_reg[stat[1]]) then\r\n   -- lisp defined function need args be in table\r\n   return stat[1](rslt)\r\n  else\r\n   -- unpack the result to call native lua func\r\n   return stat[1](unpack(rslt))\r\n  end",
    "type": "statement:if"
  }, {
    "id": 142,
    "text": "lip_debug_print(\"- eval table\")",
    "type": "statement:functioncall"
  }, {
    "id": 143,
    "text": "local func = lisp_exec(stat[1], upper)",
    "type": "statement:localassign"
  }, {
    "id": 144,
    "text": "lip_debug_print(\"call lisp defined function : \" .. stat[1])",
    "type": "statement:functioncall"
  }, {
    "id": 145,
    "text": "lip_debug_print(\"boolean expression\")",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "error('unsupported stat[1] type : ' .. type(stat[1]))",
    "type": "statement:functioncall"
  }, {
    "id": 147,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 148,
    "text": "function (arg)\r\n\t              -- bind \r\n\t              pass_args(stat[3], arg)\r\n                      -- name lookup\r\n\t              chain_up(arg, upper) \r\n\t              return lisp_exec(stat[4], arg)\r\n                 end",
    "type": "function"
  }, {
    "id": 149,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 150,
    "text": "function (arg)\r\n                  -- bind\r\n                  local tabled_arg = arg\r\n                  pass_args(stat[2], tabled_arg)\r\n\r\n                  -- name lookup\r\n                  chain_up(tabled_arg, upper)\r\n                  return lisp_exec(stat3cpy, tabled_arg)\r\n                 end",
    "type": "function"
  }, {
    "id": 151,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 152,
    "text": "function lip_runner(prog)\r\n chain_up(prog, _G)\r\n local n = table.getn(prog)\r\n for i=1, n do\r\n  lip_debug_print(\"exec \" .. i)\r\n  lisp_exec(prog[i], prog)\r\n end\r\nend",
    "type": "function"
  }, {
    "id": 153,
    "text": "chain_up(prog, _G)",
    "type": "statement:functioncall"
  }, {
    "id": 154,
    "text": "local n = table.getn(prog)",
    "type": "statement:localassign"
  }, {
    "id": 155,
    "text": "for i=1, n do\r\n  lip_debug_print(\"exec \" .. i)\r\n  lisp_exec(prog[i], prog)\r\n end",
    "type": "statement:numericfor"
  }, {
    "id": 156,
    "text": "lip_debug_print(\"exec \" .. i)",
    "type": "statement:functioncall"
  }, {
    "id": 157,
    "text": "lisp_exec(prog[i], prog)",
    "type": "statement:functioncall"
  }, {
    "id": 158,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 159,
    "text": "",
    "type": "function container"
  }, {
    "id": 160,
    "text": "mod",
    "type": "global function"
  }, {
    "id": 161,
    "text": "print",
    "type": "global function"
  }, {
    "id": 162,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 163,
    "text": "error",
    "type": "global function"
  }, {
    "id": 164,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 165,
    "text": "getn",
    "type": "global function"
  }, {
    "id": 166,
    "text": "stat[1]",
    "type": "global function"
  }, {
    "id": 167,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 168,
    "text": "upper[stat[1]]",
    "type": "global function"
  }, {
    "id": 169,
    "text": "setfenv",
    "type": "global function"
  }, {
    "id": 170,
    "text": "type",
    "type": "global function"
  }, {
    "id": 171,
    "text": "",
    "type": "variable container"
  }, {
    "id": 172,
    "text": "",
    "type": "require container"
  }, {
    "id": 173,
    "text": "",
    "type": "global variable"
  }, {
    "id": 174,
    "text": "",
    "type": "n/a"
  }, {
    "id": 175,
    "text": "",
    "type": "global variable"
  }, {
    "id": 176,
    "text": "",
    "type": "global variable"
  }, {
    "id": 177,
    "text": "",
    "type": "n/a"
  } ]
}