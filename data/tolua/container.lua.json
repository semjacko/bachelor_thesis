{
  "_filename": "container.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/tolua/src/bin/lua/container.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 3
  }, {
    "from": 10,
    "label": "has",
    "to": 4
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 7
  }, {
    "from": 10,
    "label": "has",
    "to": 8
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 4
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 7
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 19,
    "label": "has",
    "to": 24
  }, {
    "from": 19,
    "label": "has",
    "to": 25
  }, {
    "from": 19,
    "label": "has",
    "to": 17
  }, {
    "from": 19,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 17
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 17
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 17
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 17
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 17
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 17
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 17
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 17
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 53,
    "label": "has",
    "to": 56
  }, {
    "from": 51,
    "label": "has",
    "to": 17
  }, {
    "from": 51,
    "label": "has",
    "to": 17
  }, {
    "from": 51,
    "label": "has",
    "to": 17
  }, {
    "from": 51,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 3
  }, {
    "from": 58,
    "label": "has",
    "to": 4
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 7
  }, {
    "from": 58,
    "label": "has",
    "to": 8
  }, {
    "from": 58,
    "label": "has",
    "to": 17
  }, {
    "from": 58,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 65,
    "label": "has",
    "to": 56
  }, {
    "from": 63,
    "label": "has",
    "to": 17
  }, {
    "from": 63,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 64
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 67
  }, {
    "from": 71,
    "label": "has",
    "to": 56
  }, {
    "from": 69,
    "label": "has",
    "to": 17
  }, {
    "from": 69,
    "label": "has",
    "to": 17
  }, {
    "from": 69,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 17
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 76,
    "label": "has",
    "to": 79
  }, {
    "from": 76,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 81,
    "label": "has",
    "to": 84
  }, {
    "from": 81,
    "label": "has",
    "to": 85
  }, {
    "from": 81,
    "label": "has",
    "to": 86
  }, {
    "from": 81,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 88,
    "label": "has",
    "to": 93
  }, {
    "from": 88,
    "label": "has",
    "to": 94
  }, {
    "from": 88,
    "label": "has",
    "to": 95
  }, {
    "from": 88,
    "label": "has",
    "to": 17
  }, {
    "from": 88,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 82
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 97,
    "label": "has",
    "to": 100
  }, {
    "from": 97,
    "label": "has",
    "to": 101
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 102,
    "label": "has",
    "to": 17
  }, {
    "from": 102,
    "label": "has",
    "to": 106
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 108,
    "label": "has",
    "to": 110
  }, {
    "from": 107,
    "label": "has",
    "to": 17
  }, {
    "from": 107,
    "label": "has",
    "to": 111
  }, {
    "from": 107,
    "label": "has",
    "to": 112
  }, {
    "from": 107,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 4
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 116,
    "label": "has",
    "to": 118
  }, {
    "from": 115,
    "label": "has",
    "to": 7
  }, {
    "from": 113,
    "label": "has",
    "to": 119
  }, {
    "from": 107,
    "label": "has",
    "to": 17
  }, {
    "from": 107,
    "label": "has",
    "to": 17
  }, {
    "from": 107,
    "label": "has",
    "to": 120
  }, {
    "from": 121,
    "label": "has",
    "to": 112
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 4
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 124,
    "label": "has",
    "to": 7
  }, {
    "from": 122,
    "label": "has",
    "to": 119
  }, {
    "from": 121,
    "label": "has",
    "to": 17
  }, {
    "from": 121,
    "label": "has",
    "to": 17
  }, {
    "from": 121,
    "label": "has",
    "to": 126
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 127,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 129,
    "label": "has",
    "to": 56
  }, {
    "from": 127,
    "label": "has",
    "to": 17
  }, {
    "from": 127,
    "label": "has",
    "to": 17
  }, {
    "from": 127,
    "label": "has",
    "to": 131
  }, {
    "from": 127,
    "label": "has",
    "to": 17
  }, {
    "from": 127,
    "label": "has",
    "to": 17
  }, {
    "from": 127,
    "label": "has",
    "to": 132
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 133,
    "label": "has",
    "to": 17
  }, {
    "from": 133,
    "label": "has",
    "to": 111
  }, {
    "from": 133,
    "label": "has",
    "to": 112
  }, {
    "from": 133,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 4
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 137,
    "label": "has",
    "to": 7
  }, {
    "from": 135,
    "label": "has",
    "to": 119
  }, {
    "from": 133,
    "label": "has",
    "to": 17
  }, {
    "from": 133,
    "label": "has",
    "to": 17
  }, {
    "from": 133,
    "label": "has",
    "to": 139
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 141,
    "label": "has",
    "to": 143
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 140,
    "label": "has",
    "to": 17
  }, {
    "from": 140,
    "label": "has",
    "to": 145
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 145,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 147,
    "label": "has",
    "to": 149
  }, {
    "from": 140,
    "label": "has",
    "to": 17
  }, {
    "from": 140,
    "label": "has",
    "to": 150
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 150,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 140,
    "label": "has",
    "to": 17
  }, {
    "from": 140,
    "label": "has",
    "to": 154
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 154,
    "label": "has",
    "to": 156
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 156,
    "label": "has",
    "to": 158
  }, {
    "from": 140,
    "label": "has",
    "to": 17
  }, {
    "from": 140,
    "label": "has",
    "to": 159
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 159,
    "label": "has",
    "to": 161
  }, {
    "from": 161,
    "label": "has",
    "to": 157
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 140,
    "label": "has",
    "to": 17
  }, {
    "from": 140,
    "label": "has",
    "to": 163
  }, {
    "from": 163,
    "label": "has",
    "to": 164
  }, {
    "from": 163,
    "label": "has",
    "to": 165
  }, {
    "from": 165,
    "label": "has",
    "to": 157
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 140,
    "label": "has",
    "to": 17
  }, {
    "from": 140,
    "label": "has",
    "to": 167
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 167,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 157
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 140,
    "label": "has",
    "to": 17
  }, {
    "from": 140,
    "label": "has",
    "to": 171
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 171,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 157
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 140,
    "label": "has",
    "to": 17
  }, {
    "from": 140,
    "label": "has",
    "to": 173
  }, {
    "from": 173,
    "label": "has",
    "to": 174
  }, {
    "from": 173,
    "label": "has",
    "to": 175
  }, {
    "from": 175,
    "label": "has",
    "to": 176
  }, {
    "from": 173,
    "label": "has",
    "to": 177
  }, {
    "from": 177,
    "label": "has",
    "to": 157
  }, {
    "from": 177,
    "label": "has",
    "to": 178
  }, {
    "from": 140,
    "label": "has",
    "to": 17
  }, {
    "from": 140,
    "label": "has",
    "to": 179
  }, {
    "from": 179,
    "label": "has",
    "to": 180
  }, {
    "from": 179,
    "label": "has",
    "to": 181
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 179,
    "label": "has",
    "to": 183
  }, {
    "from": 183,
    "label": "has",
    "to": 157
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 140,
    "label": "has",
    "to": 17
  }, {
    "from": 140,
    "label": "has",
    "to": 185
  }, {
    "from": 185,
    "label": "has",
    "to": 186
  }, {
    "from": 185,
    "label": "has",
    "to": 187
  }, {
    "from": 187,
    "label": "has",
    "to": 188
  }, {
    "from": 185,
    "label": "has",
    "to": 183
  }, {
    "from": 183,
    "label": "has",
    "to": 157
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 140,
    "label": "has",
    "to": 17
  }, {
    "from": 140,
    "label": "has",
    "to": 189
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 189,
    "label": "has",
    "to": 191
  }, {
    "from": 189,
    "label": "has",
    "to": 192
  }, {
    "from": 189,
    "label": "has",
    "to": 193
  }, {
    "from": 189,
    "label": "has",
    "to": 194
  }, {
    "from": 194,
    "label": "has",
    "to": 195
  }, {
    "from": 194,
    "label": "has",
    "to": 196
  }, {
    "from": 196,
    "label": "has",
    "to": 197
  }, {
    "from": 196,
    "label": "has",
    "to": 198
  }, {
    "from": 198,
    "label": "has",
    "to": 199
  }, {
    "from": 198,
    "label": "has",
    "to": 200
  }, {
    "from": 200,
    "label": "has",
    "to": 201
  }, {
    "from": 200,
    "label": "has",
    "to": 202
  }, {
    "from": 202,
    "label": "has",
    "to": 191
  }, {
    "from": 202,
    "label": "has",
    "to": 203
  }, {
    "from": 202,
    "label": "has",
    "to": 204
  }, {
    "from": 204,
    "label": "has",
    "to": 191
  }, {
    "from": 204,
    "label": "has",
    "to": 205
  }, {
    "from": 189,
    "label": "has",
    "to": 206
  }, {
    "from": 206,
    "label": "has",
    "to": 207
  }, {
    "from": 207,
    "label": "has",
    "to": 208
  }, {
    "from": 207,
    "label": "has",
    "to": 209
  }, {
    "from": 206,
    "label": "has",
    "to": 157
  }, {
    "from": 206,
    "label": "has",
    "to": 210
  }, {
    "from": 140,
    "label": "has",
    "to": 17
  }, {
    "from": 140,
    "label": "has",
    "to": 211
  }, {
    "from": 211,
    "label": "has",
    "to": 212
  }, {
    "from": 211,
    "label": "has",
    "to": 213
  }, {
    "from": 213,
    "label": "has",
    "to": 157
  }, {
    "from": 213,
    "label": "has",
    "to": 214
  }, {
    "from": 140,
    "label": "has",
    "to": 17
  }, {
    "from": 140,
    "label": "has",
    "to": 215
  }, {
    "from": 215,
    "label": "has",
    "to": 216
  }, {
    "from": 215,
    "label": "has",
    "to": 217
  }, {
    "from": 217,
    "label": "has",
    "to": 157
  }, {
    "from": 217,
    "label": "has",
    "to": 218
  }, {
    "from": 140,
    "label": "has",
    "to": 17
  }, {
    "from": 140,
    "label": "has",
    "to": 219
  }, {
    "from": 219,
    "label": "has",
    "to": 220
  }, {
    "from": 219,
    "label": "has",
    "to": 217
  }, {
    "from": 217,
    "label": "has",
    "to": 157
  }, {
    "from": 217,
    "label": "has",
    "to": 218
  }, {
    "from": 140,
    "label": "has",
    "to": 17
  }, {
    "from": 140,
    "label": "has",
    "to": 221
  }, {
    "from": 221,
    "label": "has",
    "to": 222
  }, {
    "from": 221,
    "label": "has",
    "to": 223
  }, {
    "from": 223,
    "label": "has",
    "to": 157
  }, {
    "from": 223,
    "label": "has",
    "to": 224
  }, {
    "from": 140,
    "label": "has",
    "to": 17
  }, {
    "from": 140,
    "label": "has",
    "to": 225
  }, {
    "from": 225,
    "label": "has",
    "to": 226
  }, {
    "from": 225,
    "label": "has",
    "to": 227
  }, {
    "from": 140,
    "label": "has",
    "to": 17
  }, {
    "from": 140,
    "label": "has",
    "to": 228
  }, {
    "from": 229,
    "label": "has",
    "to": 230
  }, {
    "from": 230,
    "label": "has",
    "to": 231
  }, {
    "from": 229,
    "label": "has",
    "to": 232
  }, {
    "from": 102,
    "label": "calls",
    "to": 242
  }, {
    "from": 140,
    "label": "calls",
    "to": 234
  }, {
    "from": 140,
    "label": "calls",
    "to": 234
  }, {
    "from": 140,
    "label": "calls",
    "to": 247
  }, {
    "from": 140,
    "label": "calls",
    "to": 247
  }, {
    "from": 140,
    "label": "calls",
    "to": 247
  }, {
    "from": 140,
    "label": "calls",
    "to": 247
  }, {
    "from": 140,
    "label": "calls",
    "to": 247
  }, {
    "from": 140,
    "label": "calls",
    "to": 247
  }, {
    "from": 140,
    "label": "calls",
    "to": 247
  }, {
    "from": 140,
    "label": "calls",
    "to": 247
  }, {
    "from": 140,
    "label": "calls",
    "to": 247
  }, {
    "from": 140,
    "label": "calls",
    "to": 247
  }, {
    "from": 140,
    "label": "calls",
    "to": 247
  }, {
    "from": 140,
    "label": "calls",
    "to": 247
  }, {
    "from": 140,
    "label": "calls",
    "to": 247
  }, {
    "from": 140,
    "label": "calls",
    "to": 247
  }, {
    "from": 140,
    "label": "calls",
    "to": 247
  }, {
    "from": 140,
    "label": "calls",
    "to": 247
  }, {
    "from": 140,
    "label": "calls",
    "to": 247
  }, {
    "from": 140,
    "label": "calls",
    "to": 247
  }, {
    "from": 140,
    "label": "calls",
    "to": 247
  }, {
    "from": 140,
    "label": "calls",
    "to": 247
  }, {
    "from": 140,
    "label": "calls",
    "to": 247
  }, {
    "from": 140,
    "label": "calls",
    "to": 247
  }, {
    "from": 140,
    "label": "calls",
    "to": 247
  }, {
    "from": 140,
    "label": "calls",
    "to": 247
  }, {
    "from": 140,
    "label": "calls",
    "to": 247
  }, {
    "from": 140,
    "label": "calls",
    "to": 247
  }, {
    "from": 140,
    "label": "calls",
    "to": 239
  }, {
    "from": 140,
    "label": "calls",
    "to": 248
  }, {
    "from": 107,
    "label": "calls",
    "to": 243
  }, {
    "from": 133,
    "label": "calls",
    "to": 243
  }, {
    "from": 140,
    "label": "calls",
    "to": 243
  }, {
    "from": 107,
    "label": "calls",
    "to": 44
  }, {
    "from": 107,
    "label": "calls",
    "to": 44
  }, {
    "from": 140,
    "label": "calls",
    "to": 240
  }, {
    "from": 140,
    "label": "calls",
    "to": 235
  }, {
    "from": 140,
    "label": "calls",
    "to": 236
  }, {
    "from": 140,
    "label": "calls",
    "to": 251
  }, {
    "from": 140,
    "label": "calls",
    "to": 251
  }, {
    "from": 140,
    "label": "calls",
    "to": 237
  }, {
    "from": 34,
    "label": "calls",
    "to": 63
  }, {
    "from": 81,
    "label": "calls",
    "to": 63
  }, {
    "from": 88,
    "label": "calls",
    "to": 63
  }, {
    "from": 97,
    "label": "calls",
    "to": 63
  }, {
    "from": 2,
    "label": "calls",
    "to": 31
  }, {
    "from": 10,
    "label": "calls",
    "to": 31
  }, {
    "from": 58,
    "label": "calls",
    "to": 31
  }, {
    "from": 140,
    "label": "calls",
    "to": 244
  }, {
    "from": 140,
    "label": "calls",
    "to": 244
  }, {
    "from": 233,
    "label": "calls",
    "to": 249
  }, {
    "from": 19,
    "label": "calls",
    "to": 249
  }, {
    "from": 140,
    "label": "calls",
    "to": 245
  }, {
    "from": 140,
    "label": "calls",
    "to": 250
  }, {
    "from": 2,
    "label": "calls",
    "to": 27
  }, {
    "from": 10,
    "label": "calls",
    "to": 27
  }, {
    "from": 58,
    "label": "calls",
    "to": 27
  }, {
    "from": 140,
    "label": "calls",
    "to": 238
  }, {
    "from": 140,
    "label": "calls",
    "to": 246
  }, {
    "from": 140,
    "label": "calls",
    "to": 246
  }, {
    "from": 140,
    "label": "calls",
    "to": 241
  }, {
    "from": 140,
    "label": "calls",
    "to": 241
  }, {
    "from": 140,
    "label": "calls",
    "to": 241
  }, {
    "from": 140,
    "label": "calls",
    "to": 241
  }, {
    "from": 140,
    "label": "calls",
    "to": 241
  }, {
    "from": 140,
    "label": "calls",
    "to": 241
  }, {
    "from": 140,
    "label": "calls",
    "to": 241
  }, {
    "from": 140,
    "label": "calls",
    "to": 241
  }, {
    "from": 140,
    "label": "calls",
    "to": 241
  }, {
    "from": 140,
    "label": "calls",
    "to": 241
  }, {
    "from": 140,
    "label": "calls",
    "to": 241
  }, {
    "from": 140,
    "label": "calls",
    "to": 241
  }, {
    "from": 140,
    "label": "calls",
    "to": 241
  }, {
    "from": 140,
    "label": "calls",
    "to": 241
  }, {
    "from": 140,
    "label": "calls",
    "to": 241
  }, {
    "from": 140,
    "label": "calls",
    "to": 241
  }, {
    "from": 140,
    "label": "calls",
    "to": 241
  }, {
    "from": 140,
    "label": "calls",
    "to": 241
  }, {
    "from": 140,
    "label": "calls",
    "to": 241
  }, {
    "from": 140,
    "label": "calls",
    "to": 241
  }, {
    "from": 140,
    "label": "calls",
    "to": 241
  }, {
    "from": 140,
    "label": "calls",
    "to": 241
  }, {
    "from": 140,
    "label": "calls",
    "to": 241
  }, {
    "from": 140,
    "label": "calls",
    "to": 241
  }, {
    "from": 140,
    "label": "calls",
    "to": 241
  }, {
    "from": 140,
    "label": "calls",
    "to": 241
  }, {
    "from": 140,
    "label": "calls",
    "to": 241
  }, {
    "from": 140,
    "label": "calls",
    "to": 241
  }, {
    "from": 140,
    "label": "calls",
    "to": 241
  }, {
    "from": 140,
    "label": "calls",
    "to": 241
  }, {
    "from": 140,
    "label": "calls",
    "to": 241
  }, {
    "from": 1,
    "label": "contains",
    "to": 233
  }, {
    "from": 233,
    "label": "declares",
    "to": 2
  }, {
    "from": 233,
    "label": "declares",
    "to": 10
  }, {
    "from": 233,
    "label": "declares",
    "to": 14
  }, {
    "from": 233,
    "label": "declares",
    "to": 19
  }, {
    "from": 233,
    "label": "declares",
    "to": 27
  }, {
    "from": 233,
    "label": "declares",
    "to": 31
  }, {
    "from": 233,
    "label": "declares",
    "to": 34
  }, {
    "from": 233,
    "label": "declares",
    "to": 36
  }, {
    "from": 233,
    "label": "declares",
    "to": 38
  }, {
    "from": 233,
    "label": "declares",
    "to": 40
  }, {
    "from": 233,
    "label": "declares",
    "to": 42
  }, {
    "from": 233,
    "label": "declares",
    "to": 44
  }, {
    "from": 233,
    "label": "declares",
    "to": 46
  }, {
    "from": 233,
    "label": "declares",
    "to": 49
  }, {
    "from": 233,
    "label": "declares",
    "to": 51
  }, {
    "from": 233,
    "label": "declares",
    "to": 58
  }, {
    "from": 233,
    "label": "declares",
    "to": 63
  }, {
    "from": 233,
    "label": "declares",
    "to": 69
  }, {
    "from": 233,
    "label": "declares",
    "to": 74
  }, {
    "from": 233,
    "label": "declares",
    "to": 76
  }, {
    "from": 233,
    "label": "declares",
    "to": 81
  }, {
    "from": 233,
    "label": "declares",
    "to": 88
  }, {
    "from": 233,
    "label": "declares",
    "to": 97
  }, {
    "from": 233,
    "label": "declares",
    "to": 102
  }, {
    "from": 233,
    "label": "declares",
    "to": 107
  }, {
    "from": 233,
    "label": "declares",
    "to": 121
  }, {
    "from": 233,
    "label": "declares",
    "to": 127
  }, {
    "from": 233,
    "label": "declares",
    "to": 133
  }, {
    "from": 233,
    "label": "declares",
    "to": 140
  }, {
    "from": 233,
    "label": "declares",
    "to": 229
  }, {
    "from": 1,
    "label": "contains",
    "to": 252
  }, {
    "from": 1,
    "label": "contains",
    "to": 253
  }, {
    "from": 252,
    "label": "initializes",
    "to": 254
  }, {
    "from": 254,
    "label": "assigns",
    "to": 255
  }, {
    "from": 252,
    "label": "initializes",
    "to": 256
  }, {
    "from": 256,
    "label": "assigns",
    "to": 257
  }, {
    "from": 252,
    "label": "initializes",
    "to": 258
  }, {
    "from": 258,
    "label": "assigns",
    "to": 259
  }, {
    "from": 252,
    "label": "initializes",
    "to": 260
  }, {
    "from": 260,
    "label": "assigns",
    "to": 261
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "container",
    "type": "module"
  }, {
    "id": 2,
    "text": "function classContainer:decltype ()\r\n push(self)\r\n local i=1\r\n while self[i] do\r\n  self[i]:decltype()\r\n  i = i+1\r\n end\r\n pop()\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "push(self)",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "local i=1",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "while self[i] do\r\n  self[i]:decltype()\r\n  i = i+1\r\n end",
    "type": "statement:while"
  }, {
    "id": 6,
    "text": "self[i]:decltype()",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "i = i+1",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "pop()",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function classContainer:supcode ()\r\n push(self)\r\n local i=1\r\n while self[i] do\r\n  self[i]:supcode()\r\n  i = i+1\r\n end\r\n pop()\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "while self[i] do\r\n  self[i]:supcode()\r\n  i = i+1\r\n end",
    "type": "statement:while"
  }, {
    "id": 12,
    "text": "self[i]:supcode()",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function classContainer:hasvar ()\r\n local i=1\r\n while self[i] do\r\n  if self[i]:isvariable() then\r\n\t\t return 1\r\n\t\tend\r\n  i = i+1\r\n end\r\n\treturn 0\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "while self[i] do\r\n  if self[i]:isvariable() then\r\n\t\t return 1\r\n\t\tend\r\n  i = i+1\r\n end",
    "type": "statement:while"
  }, {
    "id": 16,
    "text": "if self[i]:isvariable() then\r\n\t\t return 1\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function _Container (self)\r\n setmetatable(self,classContainer)\r\n self.n = 0\r\n self.typedefs = {tolua_n=0}\r\n self.usertypes = {}\r\n self.enums = {tolua_n=0}\r\n self.lnames = {}\r\n return self\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "setmetatable(self,classContainer)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "self.n = 0",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "self.typedefs = {tolua_n=0}",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "self.usertypes = {}",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "self.enums = {tolua_n=0}",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "self.lnames = {}",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function push (t)\r\n\tt.prox = classContainer.curr\r\n classContainer.curr = t\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "t.prox = classContainer.curr",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "classContainer.curr = t",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function pop ()\r\n--print(\"name\",classContainer.curr.name)\r\n--foreach(classContainer.curr.usertypes,print)\r\n--print(\"______________\")\r\n classContainer.curr = classContainer.curr.prox\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "classContainer.curr = classContainer.curr.prox",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function getcurrnamespace ()\r\n\treturn getnamespace(classContainer.curr) \r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function append (t)\r\n return classContainer.curr:append(t)\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function appendtypedef (t)\r\n return classContainer.curr:appendtypedef(t)\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function appendusertype (t)\r\n return classContainer.curr:appendusertype(t)\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function appendenum (t)\r\n return classContainer.curr:appendenum(t)\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function applytypedef (type)\r\n return classContainer.curr:applytypedef(type)\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function findtype (type)\r\n local t = classContainer.curr:findtype(type)\r\n\treturn t\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "local t = classContainer.curr:findtype(type)",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function istypedef (type)\r\n return classContainer.curr:istypedef(type)\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "function fulltype (t)\r\n local curr =  classContainer.curr\r\n\twhile curr do\r\n\t if curr then\r\n\t\t if curr.typedefs and curr.typedefs[t] then\r\n\t\t  return curr.typedefs[t]\r\n\t\t elseif curr.usertypes and curr.usertypes[t] then\r\n\t\t  return curr.usertypes[t]\r\n\t\t\tend\r\n\t\tend\r\n\t curr = curr.prox\r\n\tend\r\n\treturn t\r\nend",
    "type": "function"
  }, {
    "id": 52,
    "text": "local curr =  classContainer.curr",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "while curr do\r\n\t if curr then\r\n\t\t if curr.typedefs and curr.typedefs[t] then\r\n\t\t  return curr.typedefs[t]\r\n\t\t elseif curr.usertypes and curr.usertypes[t] then\r\n\t\t  return curr.usertypes[t]\r\n\t\t\tend\r\n\t\tend\r\n\t curr = curr.prox\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 54,
    "text": "if curr then\r\n\t\t if curr.typedefs and curr.typedefs[t] then\r\n\t\t  return curr.typedefs[t]\r\n\t\t elseif curr.usertypes and curr.usertypes[t] then\r\n\t\t  return curr.usertypes[t]\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "if curr.typedefs and curr.typedefs[t] then\r\n\t\t  return curr.typedefs[t]\r\n\t\t elseif curr.usertypes and curr.usertypes[t] then\r\n\t\t  return curr.usertypes[t]\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "curr = curr.prox",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function classContainer:requirecollection (t)\r\n push(self)\r\n local i=1\r\n\tlocal r = false\r\n while self[i] do\r\n  r = self[i]:requirecollection(t) or r\r\n  i = i+1\r\n end\r\n\tpop()\r\n\treturn r\r\nend",
    "type": "function"
  }, {
    "id": 59,
    "text": "local r = false",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "while self[i] do\r\n  r = self[i]:requirecollection(t) or r\r\n  i = i+1\r\n end",
    "type": "statement:while"
  }, {
    "id": 61,
    "text": "r = self[i]:requirecollection(t) or r",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function getnamespace (curr)\r\n\tlocal namespace = ''\r\n\twhile curr do\r\n\t if curr and \r\n\t\t   ( curr.classtype == 'class' or curr.classtype == 'namespace')\r\n\t\tthen\r\n\t\t namespace = curr.name .. '::' .. namespace \r\n\t\tend\r\n\t curr = curr.prox\r\n\tend\r\n\treturn namespace\r\nend",
    "type": "function"
  }, {
    "id": 64,
    "text": "local namespace = ''",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "while curr do\r\n\t if curr and \r\n\t\t   ( curr.classtype == 'class' or curr.classtype == 'namespace')\r\n\t\tthen\r\n\t\t namespace = curr.name .. '::' .. namespace \r\n\t\tend\r\n\t curr = curr.prox\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 66,
    "text": "if curr and \r\n\t\t   ( curr.classtype == 'class' or curr.classtype == 'namespace')\r\n\t\tthen\r\n\t\t namespace = curr.name .. '::' .. namespace \r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "namespace = curr.name .. '::' .. namespace",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function getonlynamespace ()\r\n local curr = classContainer.curr\r\n\tlocal namespace = ''\r\n\twhile curr do\r\n\t\tif curr.classtype == 'class' then\r\n\t\t return namespace \r\n\t\telseif curr.classtype == 'namespace' then\r\n\t\t namespace = curr.name .. '::' .. namespace \r\n\t\tend\r\n\t curr = curr.prox\r\n\tend\r\n\treturn namespace\r\nend",
    "type": "function"
  }, {
    "id": 70,
    "text": "local curr = classContainer.curr",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "while curr do\r\n\t\tif curr.classtype == 'class' then\r\n\t\t return namespace \r\n\t\telseif curr.classtype == 'namespace' then\r\n\t\t namespace = curr.name .. '::' .. namespace \r\n\t\tend\r\n\t curr = curr.prox\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 72,
    "text": "if curr.classtype == 'class' then\r\n\t\t return namespace \r\n\t\telseif curr.classtype == 'namespace' then\r\n\t\t namespace = curr.name .. '::' .. namespace \r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function isenum (type)\r\n return classContainer.curr:isenum(type)\r\nend",
    "type": "function"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "function classContainer:append (t)\r\n self.n = self.n + 1\r\n self[self.n] = t\r\n t.parent = self\r\nend",
    "type": "function"
  }, {
    "id": 77,
    "text": "self.n = self.n + 1",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "self[self.n] = t",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "t.parent = self",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "function classContainer:appendtypedef (t)\r\n local namespace = getnamespace(classContainer.curr)\r\n self.typedefs.tolua_n = self.typedefs.tolua_n + 1\r\n self.typedefs[self.typedefs.tolua_n] = t\r\n self.typedefs[t.utype] = namespace .. t.utype\r\n global_typedefs[namespace..t.utype] = t\r\nend",
    "type": "function"
  }, {
    "id": 82,
    "text": "local namespace = getnamespace(classContainer.curr)",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "self.typedefs.tolua_n = self.typedefs.tolua_n + 1",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "self.typedefs[self.typedefs.tolua_n] = t",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "self.typedefs[t.utype] = namespace .. t.utype",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "global_typedefs[namespace..t.utype] = t",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "function classContainer:appendusertype (t)\r\n local container\r\n\tif t == self.name then\r\n\t container = self.prox\r\n\telse\r\n\t container = self\r\n\tend\r\n local ft = getnamespace(container) .. t\r\n\tcontainer.usertypes[t] = ft\r\n\t_usertype[ft] = ft\r\n\treturn ft\r\nend",
    "type": "function"
  }, {
    "id": 89,
    "text": "local container",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "if t == self.name then\r\n\t container = self.prox\r\n\telse\r\n\t container = self\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 91,
    "text": "container = self.prox",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "container = self",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "local ft = getnamespace(container) .. t",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "container.usertypes[t] = ft",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "_usertype[ft] = ft",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "function classContainer:appendenum (t)\r\n local namespace = getnamespace(classContainer.curr)\r\n self.enums.tolua_n = self.enums.tolua_n + 1\r\n self.enums[self.enums.tolua_n] = t\r\n global_enums[namespace..t.name] = t\r\nend",
    "type": "function"
  }, {
    "id": 98,
    "text": "self.enums.tolua_n = self.enums.tolua_n + 1",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "self.enums[self.enums.tolua_n] = t",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "global_enums[namespace..t.name] = t",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 102,
    "text": "function classContainer:overload (lname)\r\n if not self.lnames[lname] then \r\n  self.lnames[lname] = 0\r\n else\r\n  self.lnames[lname] = self.lnames[lname] + 1\r\n end\r\n return format(\"%02d\",self.lnames[lname])\r\nend",
    "type": "function"
  }, {
    "id": 103,
    "text": "if not self.lnames[lname] then \r\n  self.lnames[lname] = 0\r\n else\r\n  self.lnames[lname] = self.lnames[lname] + 1\r\n end",
    "type": "statement:if"
  }, {
    "id": 104,
    "text": "self.lnames[lname] = 0",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "self.lnames[lname] = self.lnames[lname] + 1",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 107,
    "text": "function classContainer:applytypedef (type)\r\n if global_typedefs[type] then\r\n\tlocal mod1, type1 = global_typedefs[type].mod, global_typedefs[type].type \r\n\tlocal mod2, type2 = applytypedef(type1)\r\n\treturn mod2 .. ' ' .. mod1, type2\r\n end\r\n local basetype = gsub(type,\"^.*::\",\"\")\r\n local env = self\r\n while env do\r\n  if env.typedefs then\r\n   local i=1\r\n   while env.typedefs[i] do\r\n    if env.typedefs[i].utype == basetype then\r\n\t    local mod1,type1 = env.typedefs[i].mod,env.typedefs[i].type\r\n     local mod2,type2 = applytypedef(type1)\r\n     return mod2..' '..mod1,type2\r\n\t   end\r\n\t  i = i+1\r\n   end\r\n  end\r\n  env = env.parent\r\n end\r\n return '',type\r\nend",
    "type": "function"
  }, {
    "id": 108,
    "text": "if global_typedefs[type] then\r\n\tlocal mod1, type1 = global_typedefs[type].mod, global_typedefs[type].type \r\n\tlocal mod2, type2 = applytypedef(type1)\r\n\treturn mod2 .. ' ' .. mod1, type2\r\n end",
    "type": "statement:if"
  }, {
    "id": 109,
    "text": "local mod1, type1 = global_typedefs[type].mod, global_typedefs[type].type",
    "type": "statement:localassign"
  }, {
    "id": 110,
    "text": "local mod2, type2 = applytypedef(type1)",
    "type": "statement:localassign"
  }, {
    "id": 111,
    "text": "local basetype = gsub(type,\"^.*::\",\"\")",
    "type": "statement:localassign"
  }, {
    "id": 112,
    "text": "local env = self",
    "type": "statement:localassign"
  }, {
    "id": 113,
    "text": "while env do\r\n  if env.typedefs then\r\n   local i=1\r\n   while env.typedefs[i] do\r\n    if env.typedefs[i].utype == basetype then\r\n\t    local mod1,type1 = env.typedefs[i].mod,env.typedefs[i].type\r\n     local mod2,type2 = applytypedef(type1)\r\n     return mod2..' '..mod1,type2\r\n\t   end\r\n\t  i = i+1\r\n   end\r\n  end\r\n  env = env.parent\r\n end",
    "type": "statement:while"
  }, {
    "id": 114,
    "text": "if env.typedefs then\r\n   local i=1\r\n   while env.typedefs[i] do\r\n    if env.typedefs[i].utype == basetype then\r\n\t    local mod1,type1 = env.typedefs[i].mod,env.typedefs[i].type\r\n     local mod2,type2 = applytypedef(type1)\r\n     return mod2..' '..mod1,type2\r\n\t   end\r\n\t  i = i+1\r\n   end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 115,
    "text": "while env.typedefs[i] do\r\n    if env.typedefs[i].utype == basetype then\r\n\t    local mod1,type1 = env.typedefs[i].mod,env.typedefs[i].type\r\n     local mod2,type2 = applytypedef(type1)\r\n     return mod2..' '..mod1,type2\r\n\t   end\r\n\t  i = i+1\r\n   end",
    "type": "statement:while"
  }, {
    "id": 116,
    "text": "if env.typedefs[i].utype == basetype then\r\n\t    local mod1,type1 = env.typedefs[i].mod,env.typedefs[i].type\r\n     local mod2,type2 = applytypedef(type1)\r\n     return mod2..' '..mod1,type2\r\n\t   end",
    "type": "statement:if"
  }, {
    "id": 117,
    "text": "local mod1,type1 = env.typedefs[i].mod,env.typedefs[i].type",
    "type": "statement:localassign"
  }, {
    "id": 118,
    "text": "local mod2,type2 = applytypedef(type1)",
    "type": "statement:localassign"
  }, {
    "id": 119,
    "text": "env = env.parent",
    "type": "statement:assign"
  }, {
    "id": 120,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 121,
    "text": "function classContainer:istypedef (type)\r\n local env = self\r\n while env do\r\n  if env.typedefs then\r\n   local i=1\r\n   while env.typedefs[i] do\r\n    if env.typedefs[i].utype == type then\r\n         return type\r\n        end\r\n        i = i+1\r\n   end\r\n  end\r\n  env = env.parent\r\n end\r\n return nil \r\nend",
    "type": "function"
  }, {
    "id": 122,
    "text": "while env do\r\n  if env.typedefs then\r\n   local i=1\r\n   while env.typedefs[i] do\r\n    if env.typedefs[i].utype == type then\r\n         return type\r\n        end\r\n        i = i+1\r\n   end\r\n  end\r\n  env = env.parent\r\n end",
    "type": "statement:while"
  }, {
    "id": 123,
    "text": "if env.typedefs then\r\n   local i=1\r\n   while env.typedefs[i] do\r\n    if env.typedefs[i].utype == type then\r\n         return type\r\n        end\r\n        i = i+1\r\n   end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 124,
    "text": "while env.typedefs[i] do\r\n    if env.typedefs[i].utype == type then\r\n         return type\r\n        end\r\n        i = i+1\r\n   end",
    "type": "statement:while"
  }, {
    "id": 125,
    "text": "if env.typedefs[i].utype == type then\r\n         return type\r\n        end",
    "type": "statement:if"
  }, {
    "id": 126,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 127,
    "text": "function classContainer:findtype (t)\r\n local curr =  self\r\n\twhile curr do\r\n\t\tif curr.typedefs and curr.typedefs[t] then\r\n\t\t return curr.typedefs[t]\r\n\t\telseif curr.usertypes and curr.usertypes[t] then\r\n\t\t return curr.usertypes[t]\r\n\t\tend\r\n\t curr = curr.prox\r\n\tend\r\n\tif _basic[t] then\r\n\t return t\r\n\tend\r\n\treturn nil\r\nend",
    "type": "function"
  }, {
    "id": 128,
    "text": "local curr =  self",
    "type": "statement:localassign"
  }, {
    "id": 129,
    "text": "while curr do\r\n\t\tif curr.typedefs and curr.typedefs[t] then\r\n\t\t return curr.typedefs[t]\r\n\t\telseif curr.usertypes and curr.usertypes[t] then\r\n\t\t return curr.usertypes[t]\r\n\t\tend\r\n\t curr = curr.prox\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 130,
    "text": "if curr.typedefs and curr.typedefs[t] then\r\n\t\t return curr.typedefs[t]\r\n\t\telseif curr.usertypes and curr.usertypes[t] then\r\n\t\t return curr.usertypes[t]\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 131,
    "text": "if _basic[t] then\r\n\t return t\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 132,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 133,
    "text": "function classContainer:isenum (type)\r\n if global_enums[type] then\r\n  return true\r\n end\r\n local basetype = gsub(type,\"^.*::\",\"\")\r\n local env = self\r\n while env do\r\n  if env.enums then\r\n   local i=1\r\n   while env.enums[i] do\r\n    if env.enums[i].name == basetype then\r\n         return true\r\n        end\r\n        i = i+1\r\n   end\r\n  end\r\n  env = env.parent\r\n end\r\n return false \r\nend",
    "type": "function"
  }, {
    "id": 134,
    "text": "if global_enums[type] then\r\n  return true\r\n end",
    "type": "statement:if"
  }, {
    "id": 135,
    "text": "while env do\r\n  if env.enums then\r\n   local i=1\r\n   while env.enums[i] do\r\n    if env.enums[i].name == basetype then\r\n         return true\r\n        end\r\n        i = i+1\r\n   end\r\n  end\r\n  env = env.parent\r\n end",
    "type": "statement:while"
  }, {
    "id": 136,
    "text": "if env.enums then\r\n   local i=1\r\n   while env.enums[i] do\r\n    if env.enums[i].name == basetype then\r\n         return true\r\n        end\r\n        i = i+1\r\n   end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 137,
    "text": "while env.enums[i] do\r\n    if env.enums[i].name == basetype then\r\n         return true\r\n        end\r\n        i = i+1\r\n   end",
    "type": "statement:while"
  }, {
    "id": 138,
    "text": "if env.enums[i].name == basetype then\r\n         return true\r\n        end",
    "type": "statement:if"
  }, {
    "id": 139,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 140,
    "text": "function classContainer:doparse (s)\r\n\r\n -- try Lua code\r\n do\r\n  local b,e,code = strfind(s,\"^%s*(%b\\1\\2)\")\r\n  if b then\r\n   Code(strsub(code,2,-2))\r\n   return strsub(s,e+1)\r\n  end \r\n end \r\n\r\n -- try C code\r\n do\r\n  local b,e,code = strfind(s,\"^%s*(%b\\3\\4)\")\r\n  if b then\r\n\t\t code = '{'..strsub(code,2,-2)..'\\n}\\n'\r\n   Verbatim(code,'r')        -- verbatim code for 'r'egister fragment\r\n   return strsub(s,e+1)\r\n  end \r\n end \r\n\r\n -- try verbatim\r\n do\r\n  local b,e,line = strfind(s,\"^%s*%$(.-\\n)\")\r\n  if b then\r\n   Verbatim(line)\r\n   return strsub(s,e+1)\r\n  end \r\n end \r\n\r\n\r\n -- try module\r\n do\r\n  local b,e,name,body = strfind(s,\"^%s*module%s%s*([_%w][_%w]*)%s*(%b{})%s*\")\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Module(name,body)\r\n   return strsub(s,e+1)\r\n  end\r\n end\r\n\r\n -- try namesapce\r\n do\r\n  local b,e,name,body = strfind(s,\"^%s*namespace%s%s*([_%w][_%w]*)%s*(%b{})%s*\")\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Namespace(name,body)\r\n   return strsub(s,e+1)\r\n  end\r\n end\r\n\r\n -- try define\r\n do\r\n  local b,e,name = strfind(s,\"^%s*#define%s%s*([^%s]*)[^\\n]*\\n%s*\")\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Define(name)\r\n   return strsub(s,e+1)\r\n  end\r\n end\r\n\r\n -- try enumerates\r\n do\r\n  local b,e,name,body = strfind(s,\"^%s*enum%s+(%S*)%s*(%b{})%s*;?%s*\")\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Enumerate(name,body)\r\n   return strsub(s,e+1)\r\n  end\r\n end\r\n\r\n do\r\n  local b,e,body,name = strfind(s,\"^%s*typedef%s+enum[^{]*(%b{})%s*([%w_][^%s]*)%s*;%s*\")\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Enumerate(name,body)\r\n   return strsub(s,e+1)\r\n  end\r\n end\r\n\r\n -- try operator \r\n do\r\n  local b,e,decl,kind,arg,const = strfind(s,\"^%s*([_%w][_%w%s%*&:]*operator)%s*([^%s][^%s]*)%s*(%b())%s*(c?o?n?s?t?)%s*;%s*\")\r\n  if not b then\r\n\t\t -- try inline\r\n   b,e,decl,kind,arg,const = strfind(s,\"^%s*([_%w][_%w%s%*&:]*operator)%s*([^%s][^%s]*)%s*(%b())%s*(c?o?n?s?t?)%s*%b{}%s*;?%s*\")\r\n  end \r\n\t\tif b then\r\n   _curr_code = strsub(s,b,e)\r\n   Operator(decl,kind,arg,const)\r\n   return strsub(s,e+1)\r\n  end\r\n end\r\n\r\n -- try function\r\n do\r\n  local b,e,decl,arg,const = strfind(s,\"^%s*([~_%w][_@%w%s%*&:]*[_%w])%s*(%b())%s*(c?o?n?s?t?)%s*=?%s*0?%s*;%s*\")\r\n  if not b then\r\n   -- try a single letter function name\r\n   b,e,decl,arg,const = strfind(s,\"^%s*([_%w])%s*(%b())%s*(c?o?n?s?t?)%s*;%s*\")\r\n  end\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Function(decl,arg,const)\r\n   return strsub(s,e+1)\r\n  end\r\n end\r\n\r\n -- try inline function\r\n do\r\n  local b,e,decl,arg,const = strfind(s,\"^%s*([~_%w][_@%w%s%*&:]*[_%w])%s*(%b())%s*(c?o?n?s?t?).-%b{}%s*;?%s*\")\r\n  if not b then\r\n   -- try a single letter function name\r\n   b,e,decl,arg,const = strfind(s,\"^%s*([_%w])%s*(%b())%s*(c?o?n?s?t?).-%b{}%s*;?%s*\")\r\n  end\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Function(decl,arg,const)\r\n   return strsub(s,e+1)\r\n  end\r\n end\r\n\r\n -- try class\r\n do\r\n\t local b,e,name,base,body\r\n\t\tbase = '' body = ''\r\n\t\tb,e,name = strfind(s,\"^%s*class%s*([_%w][_%w@]*)%s*;\")  -- dummy class\r\n\t\tif not b then\r\n\t\t\tb,e,name = strfind(s,\"^%s*struct%s*([_%w][_%w@]*)%s*;\")    -- dummy struct\r\n\t\t\tif not b then\r\n\t\t\t\tb,e,name,base,body = strfind(s,\"^%s*class%s*([_%w][_%w@]*)%s*(.-)%s*(%b{})%s*;%s*\")\r\n\t\t\t\tif not b then\r\n\t\t\t\t\tb,e,name,base,body = strfind(s,\"^%s*struct%s*([_%w][_%w@]*)%s*(.-)%s*(%b{})%s*;%s*\")\r\n\t\t\t\t\tif not b then\r\n\t\t\t\t\t\tb,e,name,base,body = strfind(s,\"^%s*union%s*([_%w][_%w@]*)%s*(.-)%s*(%b{})%s*;%s*\")\r\n\t\t\t\t\t\tif not b then\r\n\t\t\t\t\t\t\tbase = ''\r\n\t\t\t\t\t\t\tb,e,body,name = strfind(s,\"^%s*typedef%s%s*struct%s*[_%w]*%s*(%b{})%s*([_%w][_%w@]*)%s*;%s*\")\r\n\t\t\t\t\t\tif not b then\r\n\t\t\t\t\t\t\tbase = ''\r\n\t\t\t\t\t\t\t\tb,e,body,name = strfind(s,\"^%s*typedef%s%s*union%s*[_%w]*%s*(%b{})%s*([_%w][_%w@]*)%s*;%s*\")\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\t\tif b then\r\n\t\t\tif base ~= '' then \r\n\t\t\t\tlocal b,e\r\n\t\t\t\tb,e,base = strfind(base,\".-([_%w][_%w]*)$\") \r\n\t\t\tend\r\n\t\t\t_curr_code = strsub(s,b,e)\r\n\t\t\tClass(name,base,body)\r\n\t\t\treturn strsub(s,e+1)\r\n\t\tend\r\n\tend\r\n\r\n -- try typedef\r\n do\r\n  local b,e,types = strfind(s,\"^%s*typedef%s%s*(.-)%s*;%s*\")\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Typedef(types)\r\n   return strsub(s,e+1)\r\n  end\r\n end\r\n\r\n -- try variable\r\n do\r\n  local b,e,decl = strfind(s,\"^%s*([_%w][_@%s%w%d%*&:]*[_%w%d])%s*;%s*\")\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Variable(decl)\r\n   return strsub(s,e+1)\r\n  end\r\n end\r\n\r\n\t-- try string\r\n do\r\n  local b,e,decl = strfind(s,\"^%s*([_%w]?[_%s%w%d]-char%s+[_@%w%d]*%s*%[%s*%S+%s*%])%s*;%s*\")\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Variable(decl)\r\n   return strsub(s,e+1)\r\n  end\r\n end\r\n\r\n -- try array\r\n do\r\n  local b,e,decl = strfind(s,\"^%s*([_%w][][_@%s%w%d%*&:]*[]_%w%d])%s*;%s*\")\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Array(decl)\r\n   return strsub(s,e+1)\r\n  end\r\n end\r\n\r\n -- no matching\r\n if gsub(s,\"%s%s*\",\"\") ~= \"\" then\r\n  _curr_code = s\r\n  error(\"#parse error\")\r\n else\r\n  return \"\"\r\n end\r\n\r\nend",
    "type": "function"
  }, {
    "id": 141,
    "text": "do\r\n  local b,e,code = strfind(s,\"^%s*(%b\\1\\2)\")\r\n  if b then\r\n   Code(strsub(code,2,-2))\r\n   return strsub(s,e+1)\r\n  end \r\n end",
    "type": "statement:do"
  }, {
    "id": 142,
    "text": "local b,e,code = strfind(s,\"^%s*(%b\\1\\2)\")",
    "type": "statement:localassign"
  }, {
    "id": 143,
    "text": "if b then\r\n   Code(strsub(code,2,-2))\r\n   return strsub(s,e+1)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 144,
    "text": "Code(strsub(code,2,-2))",
    "type": "statement:functioncall"
  }, {
    "id": 145,
    "text": "do\r\n  local b,e,code = strfind(s,\"^%s*(%b\\3\\4)\")\r\n  if b then\r\n\t\t code = '{'..strsub(code,2,-2)..'\\n}\\n'\r\n   Verbatim(code,'r')        -- verbatim code for 'r'egister fragment\r\n   return strsub(s,e+1)\r\n  end \r\n end",
    "type": "statement:do"
  }, {
    "id": 146,
    "text": "local b,e,code = strfind(s,\"^%s*(%b\\3\\4)\")",
    "type": "statement:localassign"
  }, {
    "id": 147,
    "text": "if b then\r\n\t\t code = '{'..strsub(code,2,-2)..'\\n}\\n'\r\n   Verbatim(code,'r')        -- verbatim code for 'r'egister fragment\r\n   return strsub(s,e+1)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 148,
    "text": "code = '{'..strsub(code,2,-2)..'\\n}\\n'",
    "type": "statement:assign"
  }, {
    "id": 149,
    "text": "Verbatim(code,'r')",
    "type": "statement:functioncall"
  }, {
    "id": 150,
    "text": "do\r\n  local b,e,line = strfind(s,\"^%s*%$(.-\\n)\")\r\n  if b then\r\n   Verbatim(line)\r\n   return strsub(s,e+1)\r\n  end \r\n end",
    "type": "statement:do"
  }, {
    "id": 151,
    "text": "local b,e,line = strfind(s,\"^%s*%$(.-\\n)\")",
    "type": "statement:localassign"
  }, {
    "id": 152,
    "text": "if b then\r\n   Verbatim(line)\r\n   return strsub(s,e+1)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 153,
    "text": "Verbatim(line)",
    "type": "statement:functioncall"
  }, {
    "id": 154,
    "text": "do\r\n  local b,e,name,body = strfind(s,\"^%s*module%s%s*([_%w][_%w]*)%s*(%b{})%s*\")\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Module(name,body)\r\n   return strsub(s,e+1)\r\n  end\r\n end",
    "type": "statement:do"
  }, {
    "id": 155,
    "text": "local b,e,name,body = strfind(s,\"^%s*module%s%s*([_%w][_%w]*)%s*(%b{})%s*\")",
    "type": "statement:localassign"
  }, {
    "id": 156,
    "text": "if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Module(name,body)\r\n   return strsub(s,e+1)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 157,
    "text": "_curr_code = strsub(s,b,e)",
    "type": "statement:assign"
  }, {
    "id": 158,
    "text": "Module(name,body)",
    "type": "statement:functioncall"
  }, {
    "id": 159,
    "text": "do\r\n  local b,e,name,body = strfind(s,\"^%s*namespace%s%s*([_%w][_%w]*)%s*(%b{})%s*\")\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Namespace(name,body)\r\n   return strsub(s,e+1)\r\n  end\r\n end",
    "type": "statement:do"
  }, {
    "id": 160,
    "text": "local b,e,name,body = strfind(s,\"^%s*namespace%s%s*([_%w][_%w]*)%s*(%b{})%s*\")",
    "type": "statement:localassign"
  }, {
    "id": 161,
    "text": "if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Namespace(name,body)\r\n   return strsub(s,e+1)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 162,
    "text": "Namespace(name,body)",
    "type": "statement:functioncall"
  }, {
    "id": 163,
    "text": "do\r\n  local b,e,name = strfind(s,\"^%s*#define%s%s*([^%s]*)[^\\n]*\\n%s*\")\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Define(name)\r\n   return strsub(s,e+1)\r\n  end\r\n end",
    "type": "statement:do"
  }, {
    "id": 164,
    "text": "local b,e,name = strfind(s,\"^%s*#define%s%s*([^%s]*)[^\\n]*\\n%s*\")",
    "type": "statement:localassign"
  }, {
    "id": 165,
    "text": "if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Define(name)\r\n   return strsub(s,e+1)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 166,
    "text": "Define(name)",
    "type": "statement:functioncall"
  }, {
    "id": 167,
    "text": "do\r\n  local b,e,name,body = strfind(s,\"^%s*enum%s+(%S*)%s*(%b{})%s*;?%s*\")\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Enumerate(name,body)\r\n   return strsub(s,e+1)\r\n  end\r\n end",
    "type": "statement:do"
  }, {
    "id": 168,
    "text": "local b,e,name,body = strfind(s,\"^%s*enum%s+(%S*)%s*(%b{})%s*;?%s*\")",
    "type": "statement:localassign"
  }, {
    "id": 169,
    "text": "if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Enumerate(name,body)\r\n   return strsub(s,e+1)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 170,
    "text": "Enumerate(name,body)",
    "type": "statement:functioncall"
  }, {
    "id": 171,
    "text": "do\r\n  local b,e,body,name = strfind(s,\"^%s*typedef%s+enum[^{]*(%b{})%s*([%w_][^%s]*)%s*;%s*\")\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Enumerate(name,body)\r\n   return strsub(s,e+1)\r\n  end\r\n end",
    "type": "statement:do"
  }, {
    "id": 172,
    "text": "local b,e,body,name = strfind(s,\"^%s*typedef%s+enum[^{]*(%b{})%s*([%w_][^%s]*)%s*;%s*\")",
    "type": "statement:localassign"
  }, {
    "id": 173,
    "text": "do\r\n  local b,e,decl,kind,arg,const = strfind(s,\"^%s*([_%w][_%w%s%*&:]*operator)%s*([^%s][^%s]*)%s*(%b())%s*(c?o?n?s?t?)%s*;%s*\")\r\n  if not b then\r\n\t\t -- try inline\r\n   b,e,decl,kind,arg,const = strfind(s,\"^%s*([_%w][_%w%s%*&:]*operator)%s*([^%s][^%s]*)%s*(%b())%s*(c?o?n?s?t?)%s*%b{}%s*;?%s*\")\r\n  end \r\n\t\tif b then\r\n   _curr_code = strsub(s,b,e)\r\n   Operator(decl,kind,arg,const)\r\n   return strsub(s,e+1)\r\n  end\r\n end",
    "type": "statement:do"
  }, {
    "id": 174,
    "text": "local b,e,decl,kind,arg,const = strfind(s,\"^%s*([_%w][_%w%s%*&:]*operator)%s*([^%s][^%s]*)%s*(%b())%s*(c?o?n?s?t?)%s*;%s*\")",
    "type": "statement:localassign"
  }, {
    "id": 175,
    "text": "if not b then\r\n\t\t -- try inline\r\n   b,e,decl,kind,arg,const = strfind(s,\"^%s*([_%w][_%w%s%*&:]*operator)%s*([^%s][^%s]*)%s*(%b())%s*(c?o?n?s?t?)%s*%b{}%s*;?%s*\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 176,
    "text": "b,e,decl,kind,arg,const = strfind(s,\"^%s*([_%w][_%w%s%*&:]*operator)%s*([^%s][^%s]*)%s*(%b())%s*(c?o?n?s?t?)%s*%b{}%s*;?%s*\")",
    "type": "statement:assign"
  }, {
    "id": 177,
    "text": "if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Operator(decl,kind,arg,const)\r\n   return strsub(s,e+1)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 178,
    "text": "Operator(decl,kind,arg,const)",
    "type": "statement:functioncall"
  }, {
    "id": 179,
    "text": "do\r\n  local b,e,decl,arg,const = strfind(s,\"^%s*([~_%w][_@%w%s%*&:]*[_%w])%s*(%b())%s*(c?o?n?s?t?)%s*=?%s*0?%s*;%s*\")\r\n  if not b then\r\n   -- try a single letter function name\r\n   b,e,decl,arg,const = strfind(s,\"^%s*([_%w])%s*(%b())%s*(c?o?n?s?t?)%s*;%s*\")\r\n  end\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Function(decl,arg,const)\r\n   return strsub(s,e+1)\r\n  end\r\n end",
    "type": "statement:do"
  }, {
    "id": 180,
    "text": "local b,e,decl,arg,const = strfind(s,\"^%s*([~_%w][_@%w%s%*&:]*[_%w])%s*(%b())%s*(c?o?n?s?t?)%s*=?%s*0?%s*;%s*\")",
    "type": "statement:localassign"
  }, {
    "id": 181,
    "text": "if not b then\r\n   -- try a single letter function name\r\n   b,e,decl,arg,const = strfind(s,\"^%s*([_%w])%s*(%b())%s*(c?o?n?s?t?)%s*;%s*\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 182,
    "text": "b,e,decl,arg,const = strfind(s,\"^%s*([_%w])%s*(%b())%s*(c?o?n?s?t?)%s*;%s*\")",
    "type": "statement:assign"
  }, {
    "id": 183,
    "text": "if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Function(decl,arg,const)\r\n   return strsub(s,e+1)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 184,
    "text": "Function(decl,arg,const)",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "do\r\n  local b,e,decl,arg,const = strfind(s,\"^%s*([~_%w][_@%w%s%*&:]*[_%w])%s*(%b())%s*(c?o?n?s?t?).-%b{}%s*;?%s*\")\r\n  if not b then\r\n   -- try a single letter function name\r\n   b,e,decl,arg,const = strfind(s,\"^%s*([_%w])%s*(%b())%s*(c?o?n?s?t?).-%b{}%s*;?%s*\")\r\n  end\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Function(decl,arg,const)\r\n   return strsub(s,e+1)\r\n  end\r\n end",
    "type": "statement:do"
  }, {
    "id": 186,
    "text": "local b,e,decl,arg,const = strfind(s,\"^%s*([~_%w][_@%w%s%*&:]*[_%w])%s*(%b())%s*(c?o?n?s?t?).-%b{}%s*;?%s*\")",
    "type": "statement:localassign"
  }, {
    "id": 187,
    "text": "if not b then\r\n   -- try a single letter function name\r\n   b,e,decl,arg,const = strfind(s,\"^%s*([_%w])%s*(%b())%s*(c?o?n?s?t?).-%b{}%s*;?%s*\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 188,
    "text": "b,e,decl,arg,const = strfind(s,\"^%s*([_%w])%s*(%b())%s*(c?o?n?s?t?).-%b{}%s*;?%s*\")",
    "type": "statement:assign"
  }, {
    "id": 189,
    "text": "do\r\n\t local b,e,name,base,body\r\n\t\tbase = '' body = ''\r\n\t\tb,e,name = strfind(s,\"^%s*class%s*([_%w][_%w@]*)%s*;\")  -- dummy class\r\n\t\tif not b then\r\n\t\t\tb,e,name = strfind(s,\"^%s*struct%s*([_%w][_%w@]*)%s*;\")    -- dummy struct\r\n\t\t\tif not b then\r\n\t\t\t\tb,e,name,base,body = strfind(s,\"^%s*class%s*([_%w][_%w@]*)%s*(.-)%s*(%b{})%s*;%s*\")\r\n\t\t\t\tif not b then\r\n\t\t\t\t\tb,e,name,base,body = strfind(s,\"^%s*struct%s*([_%w][_%w@]*)%s*(.-)%s*(%b{})%s*;%s*\")\r\n\t\t\t\t\tif not b then\r\n\t\t\t\t\t\tb,e,name,base,body = strfind(s,\"^%s*union%s*([_%w][_%w@]*)%s*(.-)%s*(%b{})%s*;%s*\")\r\n\t\t\t\t\t\tif not b then\r\n\t\t\t\t\t\t\tbase = ''\r\n\t\t\t\t\t\t\tb,e,body,name = strfind(s,\"^%s*typedef%s%s*struct%s*[_%w]*%s*(%b{})%s*([_%w][_%w@]*)%s*;%s*\")\r\n\t\t\t\t\t\tif not b then\r\n\t\t\t\t\t\t\tbase = ''\r\n\t\t\t\t\t\t\t\tb,e,body,name = strfind(s,\"^%s*typedef%s%s*union%s*[_%w]*%s*(%b{})%s*([_%w][_%w@]*)%s*;%s*\")\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\t\tif b then\r\n\t\t\tif base ~= '' then \r\n\t\t\t\tlocal b,e\r\n\t\t\t\tb,e,base = strfind(base,\".-([_%w][_%w]*)$\") \r\n\t\t\tend\r\n\t\t\t_curr_code = strsub(s,b,e)\r\n\t\t\tClass(name,base,body)\r\n\t\t\treturn strsub(s,e+1)\r\n\t\tend\r\n\tend",
    "type": "statement:do"
  }, {
    "id": 190,
    "text": "local b,e,name,base,body",
    "type": "statement:localassign"
  }, {
    "id": 191,
    "text": "base = ''",
    "type": "statement:assign"
  }, {
    "id": 192,
    "text": "body = ''",
    "type": "statement:assign"
  }, {
    "id": 193,
    "text": "b,e,name = strfind(s,\"^%s*class%s*([_%w][_%w@]*)%s*;\")",
    "type": "statement:assign"
  }, {
    "id": 194,
    "text": "if not b then\r\n\t\t\tb,e,name = strfind(s,\"^%s*struct%s*([_%w][_%w@]*)%s*;\")    -- dummy struct\r\n\t\t\tif not b then\r\n\t\t\t\tb,e,name,base,body = strfind(s,\"^%s*class%s*([_%w][_%w@]*)%s*(.-)%s*(%b{})%s*;%s*\")\r\n\t\t\t\tif not b then\r\n\t\t\t\t\tb,e,name,base,body = strfind(s,\"^%s*struct%s*([_%w][_%w@]*)%s*(.-)%s*(%b{})%s*;%s*\")\r\n\t\t\t\t\tif not b then\r\n\t\t\t\t\t\tb,e,name,base,body = strfind(s,\"^%s*union%s*([_%w][_%w@]*)%s*(.-)%s*(%b{})%s*;%s*\")\r\n\t\t\t\t\t\tif not b then\r\n\t\t\t\t\t\t\tbase = ''\r\n\t\t\t\t\t\t\tb,e,body,name = strfind(s,\"^%s*typedef%s%s*struct%s*[_%w]*%s*(%b{})%s*([_%w][_%w@]*)%s*;%s*\")\r\n\t\t\t\t\t\tif not b then\r\n\t\t\t\t\t\t\tbase = ''\r\n\t\t\t\t\t\t\t\tb,e,body,name = strfind(s,\"^%s*typedef%s%s*union%s*[_%w]*%s*(%b{})%s*([_%w][_%w@]*)%s*;%s*\")\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 195,
    "text": "b,e,name = strfind(s,\"^%s*struct%s*([_%w][_%w@]*)%s*;\")",
    "type": "statement:assign"
  }, {
    "id": 196,
    "text": "if not b then\r\n\t\t\t\tb,e,name,base,body = strfind(s,\"^%s*class%s*([_%w][_%w@]*)%s*(.-)%s*(%b{})%s*;%s*\")\r\n\t\t\t\tif not b then\r\n\t\t\t\t\tb,e,name,base,body = strfind(s,\"^%s*struct%s*([_%w][_%w@]*)%s*(.-)%s*(%b{})%s*;%s*\")\r\n\t\t\t\t\tif not b then\r\n\t\t\t\t\t\tb,e,name,base,body = strfind(s,\"^%s*union%s*([_%w][_%w@]*)%s*(.-)%s*(%b{})%s*;%s*\")\r\n\t\t\t\t\t\tif not b then\r\n\t\t\t\t\t\t\tbase = ''\r\n\t\t\t\t\t\t\tb,e,body,name = strfind(s,\"^%s*typedef%s%s*struct%s*[_%w]*%s*(%b{})%s*([_%w][_%w@]*)%s*;%s*\")\r\n\t\t\t\t\t\tif not b then\r\n\t\t\t\t\t\t\tbase = ''\r\n\t\t\t\t\t\t\t\tb,e,body,name = strfind(s,\"^%s*typedef%s%s*union%s*[_%w]*%s*(%b{})%s*([_%w][_%w@]*)%s*;%s*\")\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 197,
    "text": "b,e,name,base,body = strfind(s,\"^%s*class%s*([_%w][_%w@]*)%s*(.-)%s*(%b{})%s*;%s*\")",
    "type": "statement:assign"
  }, {
    "id": 198,
    "text": "if not b then\r\n\t\t\t\t\tb,e,name,base,body = strfind(s,\"^%s*struct%s*([_%w][_%w@]*)%s*(.-)%s*(%b{})%s*;%s*\")\r\n\t\t\t\t\tif not b then\r\n\t\t\t\t\t\tb,e,name,base,body = strfind(s,\"^%s*union%s*([_%w][_%w@]*)%s*(.-)%s*(%b{})%s*;%s*\")\r\n\t\t\t\t\t\tif not b then\r\n\t\t\t\t\t\t\tbase = ''\r\n\t\t\t\t\t\t\tb,e,body,name = strfind(s,\"^%s*typedef%s%s*struct%s*[_%w]*%s*(%b{})%s*([_%w][_%w@]*)%s*;%s*\")\r\n\t\t\t\t\t\tif not b then\r\n\t\t\t\t\t\t\tbase = ''\r\n\t\t\t\t\t\t\t\tb,e,body,name = strfind(s,\"^%s*typedef%s%s*union%s*[_%w]*%s*(%b{})%s*([_%w][_%w@]*)%s*;%s*\")\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 199,
    "text": "b,e,name,base,body = strfind(s,\"^%s*struct%s*([_%w][_%w@]*)%s*(.-)%s*(%b{})%s*;%s*\")",
    "type": "statement:assign"
  }, {
    "id": 200,
    "text": "if not b then\r\n\t\t\t\t\t\tb,e,name,base,body = strfind(s,\"^%s*union%s*([_%w][_%w@]*)%s*(.-)%s*(%b{})%s*;%s*\")\r\n\t\t\t\t\t\tif not b then\r\n\t\t\t\t\t\t\tbase = ''\r\n\t\t\t\t\t\t\tb,e,body,name = strfind(s,\"^%s*typedef%s%s*struct%s*[_%w]*%s*(%b{})%s*([_%w][_%w@]*)%s*;%s*\")\r\n\t\t\t\t\t\tif not b then\r\n\t\t\t\t\t\t\tbase = ''\r\n\t\t\t\t\t\t\t\tb,e,body,name = strfind(s,\"^%s*typedef%s%s*union%s*[_%w]*%s*(%b{})%s*([_%w][_%w@]*)%s*;%s*\")\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 201,
    "text": "b,e,name,base,body = strfind(s,\"^%s*union%s*([_%w][_%w@]*)%s*(.-)%s*(%b{})%s*;%s*\")",
    "type": "statement:assign"
  }, {
    "id": 202,
    "text": "if not b then\r\n\t\t\t\t\t\t\tbase = ''\r\n\t\t\t\t\t\t\tb,e,body,name = strfind(s,\"^%s*typedef%s%s*struct%s*[_%w]*%s*(%b{})%s*([_%w][_%w@]*)%s*;%s*\")\r\n\t\t\t\t\t\tif not b then\r\n\t\t\t\t\t\t\tbase = ''\r\n\t\t\t\t\t\t\t\tb,e,body,name = strfind(s,\"^%s*typedef%s%s*union%s*[_%w]*%s*(%b{})%s*([_%w][_%w@]*)%s*;%s*\")\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 203,
    "text": "b,e,body,name = strfind(s,\"^%s*typedef%s%s*struct%s*[_%w]*%s*(%b{})%s*([_%w][_%w@]*)%s*;%s*\")",
    "type": "statement:assign"
  }, {
    "id": 204,
    "text": "if not b then\r\n\t\t\t\t\t\t\tbase = ''\r\n\t\t\t\t\t\t\t\tb,e,body,name = strfind(s,\"^%s*typedef%s%s*union%s*[_%w]*%s*(%b{})%s*([_%w][_%w@]*)%s*;%s*\")\r\n\t\t\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 205,
    "text": "b,e,body,name = strfind(s,\"^%s*typedef%s%s*union%s*[_%w]*%s*(%b{})%s*([_%w][_%w@]*)%s*;%s*\")",
    "type": "statement:assign"
  }, {
    "id": 206,
    "text": "if b then\r\n\t\t\tif base ~= '' then \r\n\t\t\t\tlocal b,e\r\n\t\t\t\tb,e,base = strfind(base,\".-([_%w][_%w]*)$\") \r\n\t\t\tend\r\n\t\t\t_curr_code = strsub(s,b,e)\r\n\t\t\tClass(name,base,body)\r\n\t\t\treturn strsub(s,e+1)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 207,
    "text": "if base ~= '' then \r\n\t\t\t\tlocal b,e\r\n\t\t\t\tb,e,base = strfind(base,\".-([_%w][_%w]*)$\") \r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 208,
    "text": "local b,e",
    "type": "statement:localassign"
  }, {
    "id": 209,
    "text": "b,e,base = strfind(base,\".-([_%w][_%w]*)$\")",
    "type": "statement:assign"
  }, {
    "id": 210,
    "text": "Class(name,base,body)",
    "type": "statement:functioncall"
  }, {
    "id": 211,
    "text": "do\r\n  local b,e,types = strfind(s,\"^%s*typedef%s%s*(.-)%s*;%s*\")\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Typedef(types)\r\n   return strsub(s,e+1)\r\n  end\r\n end",
    "type": "statement:do"
  }, {
    "id": 212,
    "text": "local b,e,types = strfind(s,\"^%s*typedef%s%s*(.-)%s*;%s*\")",
    "type": "statement:localassign"
  }, {
    "id": 213,
    "text": "if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Typedef(types)\r\n   return strsub(s,e+1)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 214,
    "text": "Typedef(types)",
    "type": "statement:functioncall"
  }, {
    "id": 215,
    "text": "do\r\n  local b,e,decl = strfind(s,\"^%s*([_%w][_@%s%w%d%*&:]*[_%w%d])%s*;%s*\")\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Variable(decl)\r\n   return strsub(s,e+1)\r\n  end\r\n end",
    "type": "statement:do"
  }, {
    "id": 216,
    "text": "local b,e,decl = strfind(s,\"^%s*([_%w][_@%s%w%d%*&:]*[_%w%d])%s*;%s*\")",
    "type": "statement:localassign"
  }, {
    "id": 217,
    "text": "if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Variable(decl)\r\n   return strsub(s,e+1)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 218,
    "text": "Variable(decl)",
    "type": "statement:functioncall"
  }, {
    "id": 219,
    "text": "do\r\n  local b,e,decl = strfind(s,\"^%s*([_%w]?[_%s%w%d]-char%s+[_@%w%d]*%s*%[%s*%S+%s*%])%s*;%s*\")\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Variable(decl)\r\n   return strsub(s,e+1)\r\n  end\r\n end",
    "type": "statement:do"
  }, {
    "id": 220,
    "text": "local b,e,decl = strfind(s,\"^%s*([_%w]?[_%s%w%d]-char%s+[_@%w%d]*%s*%[%s*%S+%s*%])%s*;%s*\")",
    "type": "statement:localassign"
  }, {
    "id": 221,
    "text": "do\r\n  local b,e,decl = strfind(s,\"^%s*([_%w][][_@%s%w%d%*&:]*[]_%w%d])%s*;%s*\")\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Array(decl)\r\n   return strsub(s,e+1)\r\n  end\r\n end",
    "type": "statement:do"
  }, {
    "id": 222,
    "text": "local b,e,decl = strfind(s,\"^%s*([_%w][][_@%s%w%d%*&:]*[]_%w%d])%s*;%s*\")",
    "type": "statement:localassign"
  }, {
    "id": 223,
    "text": "if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Array(decl)\r\n   return strsub(s,e+1)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 224,
    "text": "Array(decl)",
    "type": "statement:functioncall"
  }, {
    "id": 225,
    "text": "if gsub(s,\"%s%s*\",\"\") ~= \"\" then\r\n  _curr_code = s\r\n  error(\"#parse error\")\r\n else\r\n  return \"\"\r\n end",
    "type": "statement:if"
  }, {
    "id": 226,
    "text": "_curr_code = s",
    "type": "statement:assign"
  }, {
    "id": 227,
    "text": "error(\"#parse error\")",
    "type": "statement:functioncall"
  }, {
    "id": 228,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 229,
    "text": "function classContainer:parse (s)\r\n while s ~= '' do\r\n  s = self:doparse(s)\r\n end\r\nend",
    "type": "function"
  }, {
    "id": 230,
    "text": "while s ~= '' do\r\n  s = self:doparse(s)\r\n end",
    "type": "statement:while"
  }, {
    "id": 231,
    "text": "s = self:doparse(s)",
    "type": "statement:assign"
  }, {
    "id": 232,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 233,
    "text": "",
    "type": "function container"
  }, {
    "id": 234,
    "text": "Verbatim",
    "type": "global function"
  }, {
    "id": 235,
    "text": "Typedef",
    "type": "global function"
  }, {
    "id": 236,
    "text": "Define",
    "type": "global function"
  }, {
    "id": 237,
    "text": "Array",
    "type": "global function"
  }, {
    "id": 238,
    "text": "Operator",
    "type": "global function"
  }, {
    "id": 239,
    "text": "Namespace",
    "type": "global function"
  }, {
    "id": 240,
    "text": "Class",
    "type": "global function"
  }, {
    "id": 241,
    "text": "strsub",
    "type": "global function"
  }, {
    "id": 242,
    "text": "format",
    "type": "global function"
  }, {
    "id": 243,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 244,
    "text": "Enumerate",
    "type": "global function"
  }, {
    "id": 245,
    "text": "Module",
    "type": "global function"
  }, {
    "id": 246,
    "text": "Function",
    "type": "global function"
  }, {
    "id": 247,
    "text": "strfind",
    "type": "global function"
  }, {
    "id": 248,
    "text": "error",
    "type": "global function"
  }, {
    "id": 249,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 250,
    "text": "Code",
    "type": "global function"
  }, {
    "id": 251,
    "text": "Variable",
    "type": "global function"
  }, {
    "id": 252,
    "text": "",
    "type": "variable container"
  }, {
    "id": 253,
    "text": "",
    "type": "require container"
  }, {
    "id": 254,
    "text": "",
    "type": "global variable"
  }, {
    "id": 255,
    "text": "",
    "type": "n/a"
  }, {
    "id": 256,
    "text": "",
    "type": "global variable"
  }, {
    "id": 257,
    "text": "",
    "type": "n/a"
  }, {
    "id": 258,
    "text": "",
    "type": "global variable"
  }, {
    "id": 259,
    "text": "",
    "type": "n/a"
  }, {
    "id": 260,
    "text": "",
    "type": "global variable"
  }, {
    "id": 261,
    "text": "",
    "type": "n/a"
  } ]
}