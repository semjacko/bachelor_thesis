{
  "_filename": "doit.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/tolua/src/bin/lua/doit.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 2,
    "label": "has",
    "to": 14
  }, {
    "from": 2,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 2,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 2,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 13
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 23,
    "label": "has",
    "to": 21
  }, {
    "from": 2,
    "label": "has",
    "to": 27
  }, {
    "from": 2,
    "label": "calls",
    "to": 32
  }, {
    "from": 2,
    "label": "calls",
    "to": 32
  }, {
    "from": 2,
    "label": "calls",
    "to": 32
  }, {
    "from": 2,
    "label": "calls",
    "to": 29
  }, {
    "from": 2,
    "label": "calls",
    "to": 31
  }, {
    "from": 2,
    "label": "calls",
    "to": 30
  }, {
    "from": 2,
    "label": "calls",
    "to": 30
  }, {
    "from": 2,
    "label": "calls",
    "to": 30
  }, {
    "from": 2,
    "label": "calls",
    "to": 30
  }, {
    "from": 1,
    "label": "contains",
    "to": 28
  }, {
    "from": 28,
    "label": "declares",
    "to": 2
  }, {
    "from": 1,
    "label": "contains",
    "to": 33
  }, {
    "from": 1,
    "label": "contains",
    "to": 34
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "doit",
    "type": "module"
  }, {
    "id": 2,
    "text": "function doit ()\r\n\t-- define package name, if not provided\r\n\tif not flags.n then\r\n\t\tif flags.f then\r\n\t\t\tflags.n = gsub(flags.f,\"%..*\",\"\")\r\n\t\telse\r\n\t\t\terror(\"#no package name nor input file provided\")\r\n\t\tend\r\n\tend\r\n\r\n\t-- proccess package\r\n\tlocal p  = Package(flags.n,flags.f)\r\n\r\n\tif flags.p then\r\n\t\treturn        -- only parse\r\n\tend\r\n\r\n\tif flags.o then\r\n\t\tlocal st,msg = writeto(flags.o)\r\n\t\tif not st then\r\n\t\t\terror('#'..msg)\r\n\t\tend\r\n\tend\r\n\r\n\tp:decltype()\r\n\tif flags.P then\r\n\t\tp:print()\r\n\telse\r\n\t\tp:preamble()\r\n\t\tp:supcode()\r\n\t\tp:register()\r\n\tend\r\n\r\n\tif flags.o then\r\n\t\twriteto()\r\n\tend\r\n\r\n\t-- write header file\r\n\tif not flags.P then\r\n\t\tif flags.H then\r\n\t\t\tlocal st,msg = writeto(flags.H)\r\n\t\t\tif not st then\r\n\t\t\t\terror('#'..msg)\r\n\t\t\tend\r\n\t\t\tp:header()\r\n\t\t\twriteto()\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "if not flags.n then\r\n\t\tif flags.f then\r\n\t\t\tflags.n = gsub(flags.f,\"%..*\",\"\")\r\n\t\telse\r\n\t\t\terror(\"#no package name nor input file provided\")\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 4,
    "text": "if flags.f then\r\n\t\t\tflags.n = gsub(flags.f,\"%..*\",\"\")\r\n\t\telse\r\n\t\t\terror(\"#no package name nor input file provided\")\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "flags.n = gsub(flags.f,\"%..*\",\"\")",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "error(\"#no package name nor input file provided\")",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "local p  = Package(flags.n,flags.f)",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "if flags.p then\r\n\t\treturn        -- only parse\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 10,
    "text": "if flags.o then\r\n\t\tlocal st,msg = writeto(flags.o)\r\n\t\tif not st then\r\n\t\t\terror('#'..msg)\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "local st,msg = writeto(flags.o)",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "if not st then\r\n\t\t\terror('#'..msg)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "error('#'..msg)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "p:decltype()",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "if flags.P then\r\n\t\tp:print()\r\n\telse\r\n\t\tp:preamble()\r\n\t\tp:supcode()\r\n\t\tp:register()\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "p:print()",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "p:preamble()",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "p:supcode()",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "p:register()",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "if flags.o then\r\n\t\twriteto()\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "writeto()",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "if not flags.P then\r\n\t\tif flags.H then\r\n\t\t\tlocal st,msg = writeto(flags.H)\r\n\t\t\tif not st then\r\n\t\t\t\terror('#'..msg)\r\n\t\t\tend\r\n\t\t\tp:header()\r\n\t\t\twriteto()\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "if flags.H then\r\n\t\t\tlocal st,msg = writeto(flags.H)\r\n\t\t\tif not st then\r\n\t\t\t\terror('#'..msg)\r\n\t\t\tend\r\n\t\t\tp:header()\r\n\t\t\twriteto()\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "local st,msg = writeto(flags.H)",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "if not st then\r\n\t\t\t\terror('#'..msg)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "p:header()",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "",
    "type": "function container"
  }, {
    "id": 29,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 30,
    "text": "writeto",
    "type": "global function"
  }, {
    "id": 31,
    "text": "Package",
    "type": "global function"
  }, {
    "id": 32,
    "text": "error",
    "type": "global function"
  }, {
    "id": 33,
    "text": "",
    "type": "variable container"
  }, {
    "id": 34,
    "text": "",
    "type": "require container"
  } ]
}