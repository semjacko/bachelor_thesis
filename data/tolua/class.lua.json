{
  "_filename": "class.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/tolua/src/bin/lua/class.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 8
  }, {
    "from": 4,
    "label": "has",
    "to": 9
  }, {
    "from": 4,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 2,
    "label": "has",
    "to": 15
  }, {
    "from": 2,
    "label": "has",
    "to": 16
  }, {
    "from": 2,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 3
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 11
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 14
  }, {
    "from": 18,
    "label": "has",
    "to": 16
  }, {
    "from": 18,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 18,
    "label": "has",
    "to": 25
  }, {
    "from": 18,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 3
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 27,
    "label": "has",
    "to": 11
  }, {
    "from": 27,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 14
  }, {
    "from": 27,
    "label": "has",
    "to": 16
  }, {
    "from": 27,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 34,
    "label": "has",
    "to": 38
  }, {
    "from": 34,
    "label": "has",
    "to": 39
  }, {
    "from": 34,
    "label": "has",
    "to": 40
  }, {
    "from": 34,
    "label": "has",
    "to": 41
  }, {
    "from": 34,
    "label": "has",
    "to": 11
  }, {
    "from": 34,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 14
  }, {
    "from": 34,
    "label": "has",
    "to": 44
  }, {
    "from": 34,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 46,
    "label": "has",
    "to": 49
  }, {
    "from": 46,
    "label": "has",
    "to": 25
  }, {
    "from": 46,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 51,
    "label": "has",
    "to": 54
  }, {
    "from": 51,
    "label": "has",
    "to": 16
  }, {
    "from": 51,
    "label": "has",
    "to": 55
  }, {
    "from": 51,
    "label": "calls",
    "to": 65
  }, {
    "from": 46,
    "label": "calls",
    "to": 58
  }, {
    "from": 51,
    "label": "calls",
    "to": 62
  }, {
    "from": 34,
    "label": "calls",
    "to": 68
  }, {
    "from": 34,
    "label": "calls",
    "to": 68
  }, {
    "from": 34,
    "label": "calls",
    "to": 68
  }, {
    "from": 34,
    "label": "calls",
    "to": 68
  }, {
    "from": 34,
    "label": "calls",
    "to": 68
  }, {
    "from": 34,
    "label": "calls",
    "to": 68
  }, {
    "from": 34,
    "label": "calls",
    "to": 68
  }, {
    "from": 34,
    "label": "calls",
    "to": 68
  }, {
    "from": 27,
    "label": "calls",
    "to": 59
  }, {
    "from": 2,
    "label": "calls",
    "to": 66
  }, {
    "from": 18,
    "label": "calls",
    "to": 66
  }, {
    "from": 27,
    "label": "calls",
    "to": 66
  }, {
    "from": 51,
    "label": "calls",
    "to": 66
  }, {
    "from": 18,
    "label": "calls",
    "to": 63
  }, {
    "from": 27,
    "label": "calls",
    "to": 57
  }, {
    "from": 51,
    "label": "calls",
    "to": 46
  }, {
    "from": 2,
    "label": "calls",
    "to": 60
  }, {
    "from": 18,
    "label": "calls",
    "to": 60
  }, {
    "from": 27,
    "label": "calls",
    "to": 60
  }, {
    "from": 51,
    "label": "calls",
    "to": 60
  }, {
    "from": 2,
    "label": "calls",
    "to": 64
  }, {
    "from": 2,
    "label": "calls",
    "to": 64
  }, {
    "from": 2,
    "label": "calls",
    "to": 64
  }, {
    "from": 2,
    "label": "calls",
    "to": 64
  }, {
    "from": 2,
    "label": "calls",
    "to": 64
  }, {
    "from": 2,
    "label": "calls",
    "to": 64
  }, {
    "from": 2,
    "label": "calls",
    "to": 64
  }, {
    "from": 2,
    "label": "calls",
    "to": 64
  }, {
    "from": 56,
    "label": "calls",
    "to": 67
  }, {
    "from": 46,
    "label": "calls",
    "to": 67
  }, {
    "from": 51,
    "label": "calls",
    "to": 61
  }, {
    "from": 1,
    "label": "contains",
    "to": 56
  }, {
    "from": 56,
    "label": "declares",
    "to": 2
  }, {
    "from": 56,
    "label": "declares",
    "to": 18
  }, {
    "from": 56,
    "label": "declares",
    "to": 27
  }, {
    "from": 56,
    "label": "declares",
    "to": 34
  }, {
    "from": 56,
    "label": "declares",
    "to": 46
  }, {
    "from": 56,
    "label": "declares",
    "to": 51
  }, {
    "from": 1,
    "label": "contains",
    "to": 69
  }, {
    "from": 1,
    "label": "contains",
    "to": 70
  }, {
    "from": 69,
    "label": "initializes",
    "to": 71
  }, {
    "from": 71,
    "label": "assigns",
    "to": 72
  }, {
    "from": 69,
    "label": "initializes",
    "to": 73
  }, {
    "from": 73,
    "label": "assigns",
    "to": 74
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "class",
    "type": "module"
  }, {
    "id": 2,
    "text": "function classClass:register ()\r\n push(self)\r\n if _collect[self.type] then\r\n \toutput('#ifdef __cplusplus\\n')\r\n \toutput(' tolua_cclass(tolua_S,\"'..self.lname..'\",\"'..self.type..'\",\"'..self.btype..'\",'.._collect[self.type]..');')\r\n \toutput('#else\\n')\r\n \toutput(' tolua_cclass(tolua_S,\"'..self.lname..'\",\"'..self.type..'\",\"'..self.btype..'\",NULL);')\r\n \toutput('#endif\\n')\r\n else\r\n\toutput(' tolua_cclass(tolua_S,\"'..self.lname..'\",\"'..self.type..'\",\"'..self.btype..'\",NULL);')\r\n end\r\n output(' tolua_beginmodule(tolua_S,\"'..self.lname..'\");')\r\n local i=1\r\n while self[i] do\r\n  self[i]:register()\r\n  i = i+1\r\n end\r\n\toutput(' tolua_endmodule(tolua_S);')\r\n\tpop()\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "push(self)",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "if _collect[self.type] then\r\n \toutput('#ifdef __cplusplus\\n')\r\n \toutput(' tolua_cclass(tolua_S,\"'..self.lname..'\",\"'..self.type..'\",\"'..self.btype..'\",'.._collect[self.type]..');')\r\n \toutput('#else\\n')\r\n \toutput(' tolua_cclass(tolua_S,\"'..self.lname..'\",\"'..self.type..'\",\"'..self.btype..'\",NULL);')\r\n \toutput('#endif\\n')\r\n else\r\n\toutput(' tolua_cclass(tolua_S,\"'..self.lname..'\",\"'..self.type..'\",\"'..self.btype..'\",NULL);')\r\n end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "output('#ifdef __cplusplus\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "output(' tolua_cclass(tolua_S,\"'..self.lname..'\",\"'..self.type..'\",\"'..self.btype..'\",'.._collect[self.type]..');')",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "output('#else\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "output(' tolua_cclass(tolua_S,\"'..self.lname..'\",\"'..self.type..'\",\"'..self.btype..'\",NULL);')",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "output('#endif\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "output(' tolua_beginmodule(tolua_S,\"'..self.lname..'\");')",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "local i=1",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "while self[i] do\r\n  self[i]:register()\r\n  i = i+1\r\n end",
    "type": "statement:while"
  }, {
    "id": 13,
    "text": "self[i]:register()",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "i = i+1",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "output(' tolua_endmodule(tolua_S);')",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "pop()",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function classClass:requirecollection (t)\r\n push(self)\r\n\tlocal r = false\r\n local i=1\r\n while self[i] do\r\n  r = self[i]:requirecollection(t) or r\r\n  i = i+1\r\n end\r\n pop()\r\n\t-- only class that exports destructor can be appropriately collected  \r\n\tif self._delete then\r\n  t[self.type] = \"tolua_collect_\" .. gsub(self.type,\"::\",\"_\")\r\n\t\tr = true\r\n\tend\r\n return r\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "local r = false",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "while self[i] do\r\n  r = self[i]:requirecollection(t) or r\r\n  i = i+1\r\n end",
    "type": "statement:while"
  }, {
    "id": 21,
    "text": "r = self[i]:requirecollection(t) or r",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "if self._delete then\r\n  t[self.type] = \"tolua_collect_\" .. gsub(self.type,\"::\",\"_\")\r\n\t\tr = true\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "t[self.type] = \"tolua_collect_\" .. gsub(self.type,\"::\",\"_\")",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "r = true",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function classClass:decltype ()\r\n push(self)\r\n\tself.type = regtype(self.name)\r\n\tself.btype = typevar(self.base)\r\n\tself.ctype = 'const '..self.type\r\n local i=1\r\n while self[i] do\r\n  self[i]:decltype()\r\n  i = i+1\r\n end\r\n\tpop()\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "self.type = regtype(self.name)",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "self.btype = typevar(self.base)",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "self.ctype = 'const '..self.type",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "while self[i] do\r\n  self[i]:decltype()\r\n  i = i+1\r\n end",
    "type": "statement:while"
  }, {
    "id": 32,
    "text": "self[i]:decltype()",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function classClass:print (ident,close)\r\n print(ident..\"Class{\")\r\n print(ident..\" name = '\"..self.name..\"',\")\r\n print(ident..\" base = '\"..self.base..\"';\")\r\n print(ident..\" lname = '\"..self.lname..\"',\")\r\n print(ident..\" type = '\"..self.type..\"',\")\r\n print(ident..\" btype = '\"..self.btype..\"',\")\r\n print(ident..\" ctype = '\"..self.ctype..\"',\")\r\n local i=1\r\n while self[i] do\r\n  self[i]:print(ident..\" \",\",\")\r\n  i = i+1\r\n end\r\n print(ident..\"}\"..close)\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "print(ident..\"Class{\")",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "print(ident..\" name = '\"..self.name..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "print(ident..\" base = '\"..self.base..\"';\")",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "print(ident..\" lname = '\"..self.lname..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "print(ident..\" type = '\"..self.type..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "print(ident..\" btype = '\"..self.btype..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "print(ident..\" ctype = '\"..self.ctype..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "while self[i] do\r\n  self[i]:print(ident..\" \",\",\")\r\n  i = i+1\r\n end",
    "type": "statement:while"
  }, {
    "id": 43,
    "text": "self[i]:print(ident..\" \",\",\")",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "print(ident..\"}\"..close)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function _Class (t)\r\n setmetatable(t,classClass)\r\n t:buildnames()\r\n append(t)\r\n return t\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "setmetatable(t,classClass)",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "t:buildnames()",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "append(t)",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "function Class (n,p,b)\r\n local c = _Class(_Container{name=n, base=p})\r\n push(c)\r\n c:parse(strsub(b,2,strlen(b)-1)) -- eliminate braces\r\n pop()\r\nend",
    "type": "function"
  }, {
    "id": 52,
    "text": "local c = _Class(_Container{name=n, base=p})",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "push(c)",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "c:parse(strsub(b,2,strlen(b)-1))",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "",
    "type": "function container"
  }, {
    "id": 57,
    "text": "typevar",
    "type": "global function"
  }, {
    "id": 58,
    "text": "append",
    "type": "global function"
  }, {
    "id": 59,
    "text": "regtype",
    "type": "global function"
  }, {
    "id": 60,
    "text": "push",
    "type": "global function"
  }, {
    "id": 61,
    "text": "strsub",
    "type": "global function"
  }, {
    "id": 62,
    "text": "strlen",
    "type": "global function"
  }, {
    "id": 63,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 64,
    "text": "output",
    "type": "global function"
  }, {
    "id": 65,
    "text": "_Container",
    "type": "global function"
  }, {
    "id": 66,
    "text": "pop",
    "type": "global function"
  }, {
    "id": 67,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 68,
    "text": "print",
    "type": "global function"
  }, {
    "id": 69,
    "text": "",
    "type": "variable container"
  }, {
    "id": 70,
    "text": "",
    "type": "require container"
  }, {
    "id": 71,
    "text": "",
    "type": "global variable"
  }, {
    "id": 72,
    "text": "",
    "type": "n/a"
  }, {
    "id": 73,
    "text": "",
    "type": "global variable"
  }, {
    "id": 74,
    "text": "",
    "type": "n/a"
  } ]
}