{
  "_filename": "basic.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/tolua/src/bin/lua/basic.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 8,
    "label": "has",
    "to": 12
  }, {
    "from": 8,
    "label": "has",
    "to": 12
  }, {
    "from": 8,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 19,
    "label": "has",
    "to": 24
  }, {
    "from": 19,
    "label": "has",
    "to": 25
  }, {
    "from": 19,
    "label": "has",
    "to": 26
  }, {
    "from": 17,
    "label": "has",
    "to": 27
  }, {
    "from": 14,
    "label": "has",
    "to": 12
  }, {
    "from": 14,
    "label": "has",
    "to": 28
  }, {
    "from": 14,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 15
  }, {
    "from": 30,
    "label": "has",
    "to": 16
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 28
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 12
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 33,
    "label": "has",
    "to": 12
  }, {
    "from": 33,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 38,
    "label": "has",
    "to": 12
  }, {
    "from": 38,
    "label": "has",
    "to": 12
  }, {
    "from": 38,
    "label": "has",
    "to": 12
  }, {
    "from": 38,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 44,
    "label": "has",
    "to": 48
  }, {
    "from": 44,
    "label": "has",
    "to": 12
  }, {
    "from": 44,
    "label": "has",
    "to": 12
  }, {
    "from": 44,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 12
  }, {
    "from": 50,
    "label": "has",
    "to": 55
  }, {
    "from": 50,
    "label": "has",
    "to": 56
  }, {
    "from": 50,
    "label": "has",
    "to": 57
  }, {
    "from": 50,
    "label": "has",
    "to": 58
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 50,
    "label": "has",
    "to": 59
  }, {
    "from": 50,
    "label": "has",
    "to": 12
  }, {
    "from": 50,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 53
  }, {
    "from": 61,
    "label": "has",
    "to": 54
  }, {
    "from": 61,
    "label": "has",
    "to": 12
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 63,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 63,
    "label": "has",
    "to": 12
  }, {
    "from": 63,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 72,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 75,
    "label": "has",
    "to": 78
  }, {
    "from": 75,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 75,
    "label": "has",
    "to": 68
  }, {
    "from": 72,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 72,
    "label": "has",
    "to": 12
  }, {
    "from": 72,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 73
  }, {
    "from": 85,
    "label": "has",
    "to": 74
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 86,
    "label": "has",
    "to": 89
  }, {
    "from": 86,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 86,
    "label": "has",
    "to": 68
  }, {
    "from": 85,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 82
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 85,
    "label": "has",
    "to": 92
  }, {
    "from": 14,
    "label": "calls",
    "to": 96
  }, {
    "from": 14,
    "label": "calls",
    "to": 96
  }, {
    "from": 30,
    "label": "calls",
    "to": 96
  }, {
    "from": 85,
    "label": "calls",
    "to": 96
  }, {
    "from": 85,
    "label": "calls",
    "to": 96
  }, {
    "from": 85,
    "label": "calls",
    "to": 96
  }, {
    "from": 33,
    "label": "calls",
    "to": 94
  }, {
    "from": 33,
    "label": "calls",
    "to": 44
  }, {
    "from": 14,
    "label": "calls",
    "to": 104
  }, {
    "from": 2,
    "label": "calls",
    "to": 101
  }, {
    "from": 14,
    "label": "calls",
    "to": 101
  }, {
    "from": 72,
    "label": "calls",
    "to": 101
  }, {
    "from": 72,
    "label": "calls",
    "to": 101
  }, {
    "from": 72,
    "label": "calls",
    "to": 101
  }, {
    "from": 85,
    "label": "calls",
    "to": 101
  }, {
    "from": 85,
    "label": "calls",
    "to": 101
  }, {
    "from": 85,
    "label": "calls",
    "to": 101
  }, {
    "from": 2,
    "label": "calls",
    "to": 102
  }, {
    "from": 8,
    "label": "calls",
    "to": 97
  }, {
    "from": 14,
    "label": "calls",
    "to": 97
  }, {
    "from": 14,
    "label": "calls",
    "to": 97
  }, {
    "from": 14,
    "label": "calls",
    "to": 97
  }, {
    "from": 44,
    "label": "calls",
    "to": 97
  }, {
    "from": 50,
    "label": "calls",
    "to": 97
  }, {
    "from": 50,
    "label": "calls",
    "to": 97
  }, {
    "from": 50,
    "label": "calls",
    "to": 97
  }, {
    "from": 50,
    "label": "calls",
    "to": 97
  }, {
    "from": 44,
    "label": "calls",
    "to": 103
  }, {
    "from": 14,
    "label": "calls",
    "to": 100
  }, {
    "from": 33,
    "label": "calls",
    "to": 99
  }, {
    "from": 38,
    "label": "calls",
    "to": 99
  }, {
    "from": 8,
    "label": "calls",
    "to": 98
  }, {
    "from": 2,
    "label": "calls",
    "to": 105
  }, {
    "from": 14,
    "label": "calls",
    "to": 95
  }, {
    "from": 14,
    "label": "calls",
    "to": 95
  }, {
    "from": 72,
    "label": "calls",
    "to": 95
  }, {
    "from": 85,
    "label": "calls",
    "to": 95
  }, {
    "from": 1,
    "label": "contains",
    "to": 93
  }, {
    "from": 93,
    "label": "declares",
    "to": 2
  }, {
    "from": 93,
    "label": "declares",
    "to": 8
  }, {
    "from": 93,
    "label": "declares",
    "to": 14
  }, {
    "from": 93,
    "label": "declares",
    "to": 30
  }, {
    "from": 93,
    "label": "declares",
    "to": 33
  }, {
    "from": 93,
    "label": "declares",
    "to": 38
  }, {
    "from": 93,
    "label": "declares",
    "to": 44
  }, {
    "from": 93,
    "label": "declares",
    "to": 50
  }, {
    "from": 93,
    "label": "declares",
    "to": 61
  }, {
    "from": 93,
    "label": "declares",
    "to": 63
  }, {
    "from": 93,
    "label": "declares",
    "to": 72
  }, {
    "from": 93,
    "label": "declares",
    "to": 85
  }, {
    "from": 1,
    "label": "contains",
    "to": 106
  }, {
    "from": 1,
    "label": "contains",
    "to": 107
  }, {
    "from": 106,
    "label": "initializes",
    "to": 108
  }, {
    "from": 108,
    "label": "assigns",
    "to": 109
  }, {
    "from": 106,
    "label": "initializes",
    "to": 110
  }, {
    "from": 110,
    "label": "assigns",
    "to": 111
  }, {
    "from": 106,
    "label": "initializes",
    "to": 112
  }, {
    "from": 112,
    "label": "assigns",
    "to": 113
  }, {
    "from": 106,
    "label": "initializes",
    "to": 114
  }, {
    "from": 114,
    "label": "assigns",
    "to": 115
  }, {
    "from": 106,
    "label": "initializes",
    "to": 116
  }, {
    "from": 116,
    "label": "assigns",
    "to": 117
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "basic",
    "type": "module"
  }, {
    "id": 2,
    "text": "function appendrenaming (s)\r\n local b,e,old,new = strfind(s,\"%s*(.-)%s*@%s*(.-)%s*$\")\r\n\tif not b then\r\n\t error(\"#Invalid renaming syntax; it should be of the form: pattern@pattern\")\r\n\tend\r\n\ttinsert(_renaming,{old=old, new=new})\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local b,e,old,new = strfind(s,\"%s*(.-)%s*@%s*(.-)%s*$\")",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "if not b then\r\n\t error(\"#Invalid renaming syntax; it should be of the form: pattern@pattern\")\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "error(\"#Invalid renaming syntax; it should be of the form: pattern@pattern\")",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "tinsert(_renaming,{old=old, new=new})",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function applyrenaming (s)\r\n\tfor i=1,getn(_renaming) do\r\n\t local m,n = gsub(s,_renaming[i].old,_renaming[i].new)\r\n\t\tif n ~= 0 then\r\n\t\t return m\r\n\t\tend\r\n\tend\r\n\treturn nil\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "for i=1,getn(_renaming) do\r\n\t local m,n = gsub(s,_renaming[i].old,_renaming[i].new)\r\n\t\tif n ~= 0 then\r\n\t\t return m\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 10,
    "text": "local m,n = gsub(s,_renaming[i].old,_renaming[i].new)",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "if n ~= 0 then\r\n\t\t return m\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function tolua_error (s,f)\r\n local out = _OUTPUT\r\n _OUTPUT = _STDERR\r\n if strsub(s,1,1) == '#' then\r\n  write(\"\\n** tolua: \"..strsub(s,2)..\".\\n\\n\")\r\n  if _curr_code then\r\n   local _,_,s = strfind(_curr_code,\"^%s*(.-\\n)\") -- extract first line\r\n   if s==nil then s = _curr_code end\r\n   s = gsub(s,\"_userdata\",\"void*\") -- return with 'void*'\r\n   s = gsub(s,\"_cstring\",\"char*\")  -- return with 'char*'\r\n   s = gsub(s,\"_lstate\",\"lua_State*\")  -- return with 'lua_State*'\r\n   write(\"Code being processed:\\n\"..s..\"\\n\")\r\n  end\r\n else\r\n  print(debug.traceback(\"\\n** tolua internal error: \"..f..s..\".\\n\\n\"))\r\n  return\r\n end\r\n _OUTPUT = out\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "local out = _OUTPUT",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "_OUTPUT = _STDERR",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "if strsub(s,1,1) == '#' then\r\n  write(\"\\n** tolua: \"..strsub(s,2)..\".\\n\\n\")\r\n  if _curr_code then\r\n   local _,_,s = strfind(_curr_code,\"^%s*(.-\\n)\") -- extract first line\r\n   if s==nil then s = _curr_code end\r\n   s = gsub(s,\"_userdata\",\"void*\") -- return with 'void*'\r\n   s = gsub(s,\"_cstring\",\"char*\")  -- return with 'char*'\r\n   s = gsub(s,\"_lstate\",\"lua_State*\")  -- return with 'lua_State*'\r\n   write(\"Code being processed:\\n\"..s..\"\\n\")\r\n  end\r\n else\r\n  print(debug.traceback(\"\\n** tolua internal error: \"..f..s..\".\\n\\n\"))\r\n  return\r\n end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "write(\"\\n** tolua: \"..strsub(s,2)..\".\\n\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "if _curr_code then\r\n   local _,_,s = strfind(_curr_code,\"^%s*(.-\\n)\") -- extract first line\r\n   if s==nil then s = _curr_code end\r\n   s = gsub(s,\"_userdata\",\"void*\") -- return with 'void*'\r\n   s = gsub(s,\"_cstring\",\"char*\")  -- return with 'char*'\r\n   s = gsub(s,\"_lstate\",\"lua_State*\")  -- return with 'lua_State*'\r\n   write(\"Code being processed:\\n\"..s..\"\\n\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "local _,_,s = strfind(_curr_code,\"^%s*(.-\\n)\")",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "if s==nil then s = _curr_code end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "s = _curr_code",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "s = gsub(s,\"_userdata\",\"void*\")",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "s = gsub(s,\"_cstring\",\"char*\")",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "s = gsub(s,\"_lstate\",\"lua_State*\")",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "write(\"Code being processed:\\n\"..s..\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "print(debug.traceback(\"\\n** tolua internal error: \"..f..s..\".\\n\\n\"))",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "_OUTPUT = out",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function warning (msg)\r\n local out = _OUTPUT\r\n _OUTPUT = _STDERR\r\n write(\"\\n** tolua warning: \"..msg..\".\\n\\n\")\r\n _OUTPUT = out\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "write(\"\\n** tolua warning: \"..msg..\".\\n\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function regtype (t)\r\n local ft = findtype(t)\r\n\tif isbasic(t) then\r\n\t return t\r\n\tend\r\n if not ft then\r\n\t\treturn appendusertype(t)\r\n end\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "local ft = findtype(t)",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "if isbasic(t) then\r\n\t return t\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "if not ft then\r\n\t\treturn appendusertype(t)\r\n end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function typevar(type)\r\n if type == '' or type == 'void' or type == \"...\" then\r\n  return type\r\n else\r\n\t\tlocal ft = findtype(type)\r\n  if ft then\r\n   return ft\r\n  end\r\n\t\t_usertype[type] = type\r\n\t\treturn type\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "if type == '' or type == 'void' or type == \"...\" then\r\n  return type\r\n else\r\n\t\tlocal ft = findtype(type)\r\n  if ft then\r\n   return ft\r\n  end\r\n\t\t_usertype[type] = type\r\n\t\treturn type\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "local ft = findtype(type)",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "if ft then\r\n   return ft\r\n  end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "_usertype[type] = type",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function isbasic (type)\r\n local t = gsub(type,'const ','')\r\n local m,t = applytypedef(t)\r\n local b = _basic[t]\r\n if b then\r\n  return b,_basic_ctype[b]\r\n end\r\n return nil\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "local t = gsub(type,'const ','')",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "local m,t = applytypedef(t)",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "local b = _basic[t]",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "if b then\r\n  return b,_basic_ctype[b]\r\n end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function split (s,t)\r\n local l = {n=0}\r\n local f = function (s)\r\n  l.n = l.n + 1\r\n  l[l.n] = s\r\n  return \"\"\r\n end\r\n local p = \"%s*(.-)%s*\"..t..\"%s*\"\r\n s = gsub(s,\"^%s+\",\"\")\r\n s = gsub(s,\"%s+$\",\"\")\r\n s = gsub(s,p,f)\r\n l.n = l.n + 1\r\n l[l.n] = gsub(s,\"(%s%s*)$\",\"\")\r\n return l\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "local l = {n=0}",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "local f = function (s)\r\n  l.n = l.n + 1\r\n  l[l.n] = s\r\n  return \"\"\r\n end",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "l.n = l.n + 1",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "l[l.n] = s",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "local p = \"%s*(.-)%s*\"..t..\"%s*\"",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "s = gsub(s,\"^%s+\",\"\")",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "s = gsub(s,\"%s+$\",\"\")",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "s = gsub(s,p,f)",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "l[l.n] = gsub(s,\"(%s%s*)$\",\"\")",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function (s)\r\n  l.n = l.n + 1\r\n  l[l.n] = s\r\n  return \"\"\r\n end",
    "type": "function"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function concat (t,f,l)\r\n local s = ''\r\n local i=f\r\n while i<=l do\r\n  s = s..t[i]\r\n  i = i+1\r\n  if i <= l then s = s..' ' end\r\n end\r\n return s\r\nend",
    "type": "function"
  }, {
    "id": 64,
    "text": "local s = ''",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "local i=f",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "while i<=l do\r\n  s = s..t[i]\r\n  i = i+1\r\n  if i <= l then s = s..' ' end\r\n end",
    "type": "statement:while"
  }, {
    "id": 67,
    "text": "s = s..t[i]",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "i = i+1",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "if i <= l then s = s..' ' end",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "s = s..' '",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "function concatparam (line, ...)\r\n local arg = {...}\r\n local i=1\r\n while i<=#arg do\r\n  if _cont and not strfind(_cont,'[%(,\"]') and \r\n     strfind(arg[i],\"^[%a_~]\") then \r\n\t    line = line .. ' ' \r\n  end\r\n  line = line .. arg[i]\r\n  if arg[i] ~= '' then\r\n   _cont = strsub(arg[i],-1,-1)\r\n  end\r\n  i = i+1\r\n end\r\n if strfind(arg[#arg],\"[%/%)%;%{%}]$\") then \r\n  _cont=nil line = line .. '\\n'\r\n end\r\n\treturn line\r\nend",
    "type": "function"
  }, {
    "id": 73,
    "text": "local arg = {...}",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "local i=1",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "while i<=#arg do\r\n  if _cont and not strfind(_cont,'[%(,\"]') and \r\n     strfind(arg[i],\"^[%a_~]\") then \r\n\t    line = line .. ' ' \r\n  end\r\n  line = line .. arg[i]\r\n  if arg[i] ~= '' then\r\n   _cont = strsub(arg[i],-1,-1)\r\n  end\r\n  i = i+1\r\n end",
    "type": "statement:while"
  }, {
    "id": 76,
    "text": "if _cont and not strfind(_cont,'[%(,\"]') and \r\n     strfind(arg[i],\"^[%a_~]\") then \r\n\t    line = line .. ' ' \r\n  end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "line = line .. ' '",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "line = line .. arg[i]",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "if arg[i] ~= '' then\r\n   _cont = strsub(arg[i],-1,-1)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 80,
    "text": "_cont = strsub(arg[i],-1,-1)",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "if strfind(arg[#arg],\"[%/%)%;%{%}]$\") then \r\n  _cont=nil line = line .. '\\n'\r\n end",
    "type": "statement:if"
  }, {
    "id": 82,
    "text": "_cont=nil",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "line = line .. '\\n'",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "function output (...)\r\n local arg = {...}\r\n local i=1\r\n while i<=#arg do\r\n  if _cont and not strfind(_cont,'[%(,\"]') and \r\n     strfind(arg[i],\"^[%a_~]\") then \r\n\t    write(' ') \r\n  end\r\n  write(arg[i])\r\n  if arg[i] ~= '' then\r\n   _cont = strsub(arg[i],-1,-1)\r\n  end\r\n  i = i+1\r\n end\r\n if strfind(arg[#arg],\"[%/%)%;%{%}]$\") then \r\n  _cont=nil write('\\n')\r\n end\r\nend",
    "type": "function"
  }, {
    "id": 86,
    "text": "while i<=#arg do\r\n  if _cont and not strfind(_cont,'[%(,\"]') and \r\n     strfind(arg[i],\"^[%a_~]\") then \r\n\t    write(' ') \r\n  end\r\n  write(arg[i])\r\n  if arg[i] ~= '' then\r\n   _cont = strsub(arg[i],-1,-1)\r\n  end\r\n  i = i+1\r\n end",
    "type": "statement:while"
  }, {
    "id": 87,
    "text": "if _cont and not strfind(_cont,'[%(,\"]') and \r\n     strfind(arg[i],\"^[%a_~]\") then \r\n\t    write(' ') \r\n  end",
    "type": "statement:if"
  }, {
    "id": 88,
    "text": "write(' ')",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "write(arg[i])",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "if strfind(arg[#arg],\"[%/%)%;%{%}]$\") then \r\n  _cont=nil write('\\n')\r\n end",
    "type": "statement:if"
  }, {
    "id": 91,
    "text": "write('\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 93,
    "text": "",
    "type": "function container"
  }, {
    "id": 94,
    "text": "appendusertype",
    "type": "global function"
  }, {
    "id": 95,
    "text": "strsub",
    "type": "global function"
  }, {
    "id": 96,
    "text": "write",
    "type": "global function"
  }, {
    "id": 97,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 98,
    "text": "getn",
    "type": "global function"
  }, {
    "id": 99,
    "text": "findtype",
    "type": "global function"
  }, {
    "id": 100,
    "text": "traceback",
    "type": "global function"
  }, {
    "id": 101,
    "text": "strfind",
    "type": "global function"
  }, {
    "id": 102,
    "text": "error",
    "type": "global function"
  }, {
    "id": 103,
    "text": "applytypedef",
    "type": "global function"
  }, {
    "id": 104,
    "text": "print",
    "type": "global function"
  }, {
    "id": 105,
    "text": "tinsert",
    "type": "global function"
  }, {
    "id": 106,
    "text": "",
    "type": "variable container"
  }, {
    "id": 107,
    "text": "",
    "type": "require container"
  }, {
    "id": 108,
    "text": "",
    "type": "global variable"
  }, {
    "id": 109,
    "text": "",
    "type": "n/a"
  }, {
    "id": 110,
    "text": "",
    "type": "global variable"
  }, {
    "id": 111,
    "text": "",
    "type": "n/a"
  }, {
    "id": 112,
    "text": "",
    "type": "global variable"
  }, {
    "id": 113,
    "text": "",
    "type": "n/a"
  }, {
    "id": 114,
    "text": "",
    "type": "global variable"
  }, {
    "id": 115,
    "text": "",
    "type": "n/a"
  }, {
    "id": 116,
    "text": "",
    "type": "global variable"
  }, {
    "id": 117,
    "text": "",
    "type": "n/a"
  } ]
}