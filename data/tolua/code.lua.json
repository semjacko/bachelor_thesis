{
  "_filename": "code.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/tolua/src/bin/lua/code.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 9,
    "label": "has",
    "to": 15
  }, {
    "from": 2,
    "label": "has",
    "to": 16
  }, {
    "from": 2,
    "label": "has",
    "to": 17
  }, {
    "from": 2,
    "label": "has",
    "to": 18
  }, {
    "from": 2,
    "label": "has",
    "to": 19
  }, {
    "from": 2,
    "label": "has",
    "to": 20
  }, {
    "from": 2,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 15
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 15
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 10
  }, {
    "from": 33,
    "label": "has",
    "to": 11
  }, {
    "from": 33,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 33,
    "label": "has",
    "to": 15
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 2,
    "label": "calls",
    "to": 38
  }, {
    "from": 2,
    "label": "calls",
    "to": 42
  }, {
    "from": 2,
    "label": "calls",
    "to": 42
  }, {
    "from": 27,
    "label": "calls",
    "to": 36
  }, {
    "from": 22,
    "label": "calls",
    "to": 44
  }, {
    "from": 22,
    "label": "calls",
    "to": 44
  }, {
    "from": 22,
    "label": "calls",
    "to": 44
  }, {
    "from": 2,
    "label": "calls",
    "to": 37
  }, {
    "from": 2,
    "label": "calls",
    "to": 40
  }, {
    "from": 31,
    "label": "calls",
    "to": 27
  }, {
    "from": 2,
    "label": "calls",
    "to": 41
  }, {
    "from": 2,
    "label": "calls",
    "to": 41
  }, {
    "from": 2,
    "label": "calls",
    "to": 41
  }, {
    "from": 2,
    "label": "calls",
    "to": 41
  }, {
    "from": 2,
    "label": "calls",
    "to": 41
  }, {
    "from": 2,
    "label": "calls",
    "to": 41
  }, {
    "from": 2,
    "label": "calls",
    "to": 41
  }, {
    "from": 2,
    "label": "calls",
    "to": 39
  }, {
    "from": 35,
    "label": "calls",
    "to": 43
  }, {
    "from": 27,
    "label": "calls",
    "to": 43
  }, {
    "from": 1,
    "label": "contains",
    "to": 35
  }, {
    "from": 35,
    "label": "declares",
    "to": 2
  }, {
    "from": 35,
    "label": "declares",
    "to": 22
  }, {
    "from": 35,
    "label": "declares",
    "to": 27
  }, {
    "from": 35,
    "label": "declares",
    "to": 31
  }, {
    "from": 35,
    "label": "declares",
    "to": 33
  }, {
    "from": 1,
    "label": "contains",
    "to": 45
  }, {
    "from": 1,
    "label": "contains",
    "to": 46
  }, {
    "from": 45,
    "label": "initializes",
    "to": 47
  }, {
    "from": 47,
    "label": "assigns",
    "to": 48
  }, {
    "from": 45,
    "label": "initializes",
    "to": 49
  }, {
    "from": 49,
    "label": "assigns",
    "to": 50
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "code",
    "type": "module"
  }, {
    "id": 2,
    "text": "function classCode:register ()\r\n -- clean Lua code\r\n local s = clean(self.text)\r\n if not s then\r\n  error(\"parser error in embedded code\")  \r\n end\r\n \r\n -- convert to C\r\n output('\\n { /* begin embedded lua code */\\n')\r\n output('  static unsigned char B[] = {\\n   ')\r\n local t={n=0}\r\n local b = gsub(s,'(.)',function (c) \r\n                         local e = '' \r\n                         t.n=t.n+1 if t.n==15 then t.n=0 e='\\n   ' end \r\n                         return format('%3u,%s',strbyte(c),e) \r\n                        end\r\n               )\r\n output(b..strbyte(\" \"))\r\n output('\\n  };\\n')\r\n output('  if (luaL_loadbuffer(tolua_S,(char*)B,sizeof(B),\"tolua: embedded Lua code\") == LUA_OK)\\n')\r\n output('    lua_pcall(tolua_S,0,LUA_MULTRET,0);')\r\n output(' } /* end of embedded lua code */\\n\\n')\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local s = clean(self.text)",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "if not s then\r\n  error(\"parser error in embedded code\")  \r\n end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "error(\"parser error in embedded code\")",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "output('\\n { /* begin embedded lua code */\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "output('  static unsigned char B[] = {\\n   ')",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "local t={n=0}",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "local b = gsub(s,'(.)',function (c) \r\n                         local e = '' \r\n                         t.n=t.n+1 if t.n==15 then t.n=0 e='\\n   ' end \r\n                         return format('%3u,%s',strbyte(c),e) \r\n                        end\r\n               )",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "local e = ''",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "t.n=t.n+1",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "if t.n==15 then t.n=0 e='\\n   ' end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "t.n=0",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "e='\\n   '",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 16,
    "text": "output(b..strbyte(\" \"))",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "output('\\n  };\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "output('  if (luaL_loadbuffer(tolua_S,(char*)B,sizeof(B),\"tolua: embedded Lua code\") == LUA_OK)\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "output('    lua_pcall(tolua_S,0,LUA_MULTRET,0);')",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "output(' } /* end of embedded lua code */\\n\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function classCode:print (ident,close)\r\n print(ident..\"Code{\")\r\n print(ident..\" text = [[\"..self.text..\"]],\")\r\n print(ident..\"}\"..close)\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "print(ident..\"Code{\")",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "print(ident..\" text = [[\"..self.text..\"]],\")",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "print(ident..\"}\"..close)",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function _Code (t)\r\n setmetatable(t,classCode)\r\n append(t)\r\n return t\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "setmetatable(t,classCode)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "append(t)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function Code (l)\r\n return _Code {\r\n  text = l\r\n }\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function (c) \r\n                         local e = '' \r\n                         t.n=t.n+1 if t.n==15 then t.n=0 e='\\n   ' end \r\n                         return format('%3u,%s',strbyte(c),e) \r\n                        end",
    "type": "function"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "",
    "type": "function container"
  }, {
    "id": 36,
    "text": "append",
    "type": "global function"
  }, {
    "id": 37,
    "text": "clean",
    "type": "global function"
  }, {
    "id": 38,
    "text": "format",
    "type": "global function"
  }, {
    "id": 39,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 40,
    "text": "error",
    "type": "global function"
  }, {
    "id": 41,
    "text": "output",
    "type": "global function"
  }, {
    "id": 42,
    "text": "strbyte",
    "type": "global function"
  }, {
    "id": 43,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 44,
    "text": "print",
    "type": "global function"
  }, {
    "id": 45,
    "text": "",
    "type": "variable container"
  }, {
    "id": 46,
    "text": "",
    "type": "require container"
  }, {
    "id": 47,
    "text": "",
    "type": "global variable"
  }, {
    "id": 48,
    "text": "",
    "type": "n/a"
  }, {
    "id": 49,
    "text": "",
    "type": "global variable"
  }, {
    "id": 50,
    "text": "",
    "type": "n/a"
  } ]
}