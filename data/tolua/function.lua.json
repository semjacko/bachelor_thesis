{
  "_filename": "function.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/tolua/src/bin/lua/function.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 12,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 12,
    "label": "has",
    "to": 20
  }, {
    "from": 12,
    "label": "has",
    "to": 21
  }, {
    "from": 12,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 12,
    "label": "has",
    "to": 24
  }, {
    "from": 12,
    "label": "has",
    "to": 25
  }, {
    "from": 12,
    "label": "has",
    "to": 26
  }, {
    "from": 12,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 12,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 30,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 30,
    "label": "has",
    "to": 38
  }, {
    "from": 12,
    "label": "has",
    "to": 39
  }, {
    "from": 12,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 7
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 41,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 41,
    "label": "has",
    "to": 10
  }, {
    "from": 40,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 12,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 12,
    "label": "has",
    "to": 52
  }, {
    "from": 12,
    "label": "has",
    "to": 53
  }, {
    "from": 12,
    "label": "has",
    "to": 54
  }, {
    "from": 12,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 12,
    "label": "has",
    "to": 57
  }, {
    "from": 12,
    "label": "has",
    "to": 26
  }, {
    "from": 12,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 12,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 58,
    "label": "has",
    "to": 61
  }, {
    "from": 58,
    "label": "has",
    "to": 62
  }, {
    "from": 12,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 7
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 46
  }, {
    "from": 64,
    "label": "has",
    "to": 10
  }, {
    "from": 12,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 23
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 56
  }, {
    "from": 12,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 12,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 7
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 46
  }, {
    "from": 70,
    "label": "has",
    "to": 10
  }, {
    "from": 12,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 73,
    "label": "has",
    "to": 76
  }, {
    "from": 73,
    "label": "has",
    "to": 77
  }, {
    "from": 73,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 78,
    "label": "has",
    "to": 82
  }, {
    "from": 78,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 78,
    "label": "has",
    "to": 85
  }, {
    "from": 73,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 86,
    "label": "has",
    "to": 89
  }, {
    "from": 86,
    "label": "has",
    "to": 90
  }, {
    "from": 73,
    "label": "has",
    "to": 7
  }, {
    "from": 73,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 10
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 73,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 95,
    "label": "has",
    "to": 97
  }, {
    "from": 73,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 98,
    "label": "has",
    "to": 100
  }, {
    "from": 98,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 101,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 104,
    "label": "has",
    "to": 107
  }, {
    "from": 101,
    "label": "has",
    "to": 108
  }, {
    "from": 101,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 109,
    "label": "has",
    "to": 111
  }, {
    "from": 109,
    "label": "has",
    "to": 112
  }, {
    "from": 109,
    "label": "has",
    "to": 113
  }, {
    "from": 109,
    "label": "has",
    "to": 114
  }, {
    "from": 109,
    "label": "has",
    "to": 115
  }, {
    "from": 109,
    "label": "has",
    "to": 116
  }, {
    "from": 109,
    "label": "has",
    "to": 56
  }, {
    "from": 109,
    "label": "has",
    "to": 117
  }, {
    "from": 109,
    "label": "has",
    "to": 118
  }, {
    "from": 109,
    "label": "has",
    "to": 119
  }, {
    "from": 109,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 120,
    "label": "has",
    "to": 122
  }, {
    "from": 120,
    "label": "has",
    "to": 123
  }, {
    "from": 73,
    "label": "has",
    "to": 7
  }, {
    "from": 73,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 124,
    "label": "has",
    "to": 10
  }, {
    "from": 73,
    "label": "has",
    "to": 126
  }, {
    "from": 73,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 73,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 7
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 129,
    "label": "has",
    "to": 46
  }, {
    "from": 128,
    "label": "has",
    "to": 10
  }, {
    "from": 73,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 7
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 132,
    "label": "has",
    "to": 10
  }, {
    "from": 12,
    "label": "has",
    "to": 134
  }, {
    "from": 12,
    "label": "has",
    "to": 135
  }, {
    "from": 12,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 23
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 136,
    "label": "has",
    "to": 138
  }, {
    "from": 136,
    "label": "has",
    "to": 139
  }, {
    "from": 136,
    "label": "has",
    "to": 56
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 136,
    "label": "has",
    "to": 140
  }, {
    "from": 12,
    "label": "has",
    "to": 141
  }, {
    "from": 12,
    "label": "has",
    "to": 142
  }, {
    "from": 12,
    "label": "has",
    "to": 143
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 144,
    "label": "has",
    "to": 146
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 147,
    "label": "has",
    "to": 149
  }, {
    "from": 147,
    "label": "has",
    "to": 150
  }, {
    "from": 147,
    "label": "has",
    "to": 151
  }, {
    "from": 147,
    "label": "has",
    "to": 152
  }, {
    "from": 147,
    "label": "has",
    "to": 153
  }, {
    "from": 147,
    "label": "has",
    "to": 154
  }, {
    "from": 147,
    "label": "has",
    "to": 155
  }, {
    "from": 147,
    "label": "has",
    "to": 153
  }, {
    "from": 147,
    "label": "has",
    "to": 156
  }, {
    "from": 147,
    "label": "has",
    "to": 7
  }, {
    "from": 147,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 157,
    "label": "has",
    "to": 10
  }, {
    "from": 147,
    "label": "has",
    "to": 159
  }, {
    "from": 147,
    "label": "has",
    "to": 160
  }, {
    "from": 147,
    "label": "has",
    "to": 161
  }, {
    "from": 162,
    "label": "has",
    "to": 163
  }, {
    "from": 162,
    "label": "has",
    "to": 164
  }, {
    "from": 164,
    "label": "has",
    "to": 165
  }, {
    "from": 164,
    "label": "has",
    "to": 166
  }, {
    "from": 164,
    "label": "has",
    "to": 167
  }, {
    "from": 162,
    "label": "has",
    "to": 7
  }, {
    "from": 162,
    "label": "has",
    "to": 168
  }, {
    "from": 168,
    "label": "has",
    "to": 169
  }, {
    "from": 168,
    "label": "has",
    "to": 10
  }, {
    "from": 162,
    "label": "has",
    "to": 170
  }, {
    "from": 162,
    "label": "has",
    "to": 171
  }, {
    "from": 172,
    "label": "has",
    "to": 170
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 174,
    "label": "has",
    "to": 176
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 174,
    "label": "has",
    "to": 178
  }, {
    "from": 174,
    "label": "has",
    "to": 179
  }, {
    "from": 179,
    "label": "has",
    "to": 180
  }, {
    "from": 180,
    "label": "has",
    "to": 181
  }, {
    "from": 180,
    "label": "has",
    "to": 182
  }, {
    "from": 180,
    "label": "has",
    "to": 183
  }, {
    "from": 180,
    "label": "has",
    "to": 184
  }, {
    "from": 180,
    "label": "has",
    "to": 185
  }, {
    "from": 180,
    "label": "has",
    "to": 186
  }, {
    "from": 180,
    "label": "has",
    "to": 187
  }, {
    "from": 174,
    "label": "has",
    "to": 188
  }, {
    "from": 174,
    "label": "has",
    "to": 170
  }, {
    "from": 174,
    "label": "has",
    "to": 189
  }, {
    "from": 190,
    "label": "has",
    "to": 191
  }, {
    "from": 190,
    "label": "has",
    "to": 7
  }, {
    "from": 190,
    "label": "has",
    "to": 192
  }, {
    "from": 190,
    "label": "has",
    "to": 193
  }, {
    "from": 193,
    "label": "has",
    "to": 194
  }, {
    "from": 193,
    "label": "has",
    "to": 195
  }, {
    "from": 193,
    "label": "has",
    "to": 10
  }, {
    "from": 190,
    "label": "has",
    "to": 196
  }, {
    "from": 190,
    "label": "has",
    "to": 197
  }, {
    "from": 190,
    "label": "has",
    "to": 198
  }, {
    "from": 190,
    "label": "has",
    "to": 170
  }, {
    "from": 190,
    "label": "has",
    "to": 199
  }, {
    "from": 190,
    "label": "calls",
    "to": 206
  }, {
    "from": 12,
    "label": "calls",
    "to": 204
  }, {
    "from": 174,
    "label": "calls",
    "to": 202
  }, {
    "from": 12,
    "label": "calls",
    "to": 210
  }, {
    "from": 12,
    "label": "calls",
    "to": 210
  }, {
    "from": 12,
    "label": "calls",
    "to": 210
  }, {
    "from": 12,
    "label": "calls",
    "to": 210
  }, {
    "from": 12,
    "label": "calls",
    "to": 210
  }, {
    "from": 12,
    "label": "calls",
    "to": 210
  }, {
    "from": 162,
    "label": "calls",
    "to": 210
  }, {
    "from": 147,
    "label": "calls",
    "to": 213
  }, {
    "from": 147,
    "label": "calls",
    "to": 213
  }, {
    "from": 147,
    "label": "calls",
    "to": 213
  }, {
    "from": 147,
    "label": "calls",
    "to": 213
  }, {
    "from": 147,
    "label": "calls",
    "to": 213
  }, {
    "from": 147,
    "label": "calls",
    "to": 213
  }, {
    "from": 147,
    "label": "calls",
    "to": 213
  }, {
    "from": 147,
    "label": "calls",
    "to": 213
  }, {
    "from": 147,
    "label": "calls",
    "to": 213
  }, {
    "from": 147,
    "label": "calls",
    "to": 213
  }, {
    "from": 147,
    "label": "calls",
    "to": 213
  }, {
    "from": 147,
    "label": "calls",
    "to": 213
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 12,
    "label": "calls",
    "to": 211
  }, {
    "from": 144,
    "label": "calls",
    "to": 211
  }, {
    "from": 174,
    "label": "calls",
    "to": 208
  }, {
    "from": 200,
    "label": "calls",
    "to": 212
  }, {
    "from": 174,
    "label": "calls",
    "to": 212
  }, {
    "from": 2,
    "label": "calls",
    "to": 201
  }, {
    "from": 190,
    "label": "calls",
    "to": 209
  }, {
    "from": 190,
    "label": "calls",
    "to": 209
  }, {
    "from": 2,
    "label": "calls",
    "to": 207
  }, {
    "from": 12,
    "label": "calls",
    "to": 207
  }, {
    "from": 12,
    "label": "calls",
    "to": 207
  }, {
    "from": 2,
    "label": "calls",
    "to": 205
  }, {
    "from": 162,
    "label": "calls",
    "to": 205
  }, {
    "from": 162,
    "label": "calls",
    "to": 205
  }, {
    "from": 190,
    "label": "calls",
    "to": 174
  }, {
    "from": 12,
    "label": "calls",
    "to": 203
  }, {
    "from": 12,
    "label": "calls",
    "to": 203
  }, {
    "from": 190,
    "label": "calls",
    "to": 203
  }, {
    "from": 1,
    "label": "contains",
    "to": 200
  }, {
    "from": 200,
    "label": "declares",
    "to": 2
  }, {
    "from": 200,
    "label": "declares",
    "to": 12
  }, {
    "from": 200,
    "label": "declares",
    "to": 144
  }, {
    "from": 200,
    "label": "declares",
    "to": 147
  }, {
    "from": 200,
    "label": "declares",
    "to": 162
  }, {
    "from": 200,
    "label": "declares",
    "to": 172
  }, {
    "from": 200,
    "label": "declares",
    "to": 174
  }, {
    "from": 200,
    "label": "declares",
    "to": 190
  }, {
    "from": 1,
    "label": "contains",
    "to": 214
  }, {
    "from": 1,
    "label": "contains",
    "to": 215
  }, {
    "from": 214,
    "label": "initializes",
    "to": 216
  }, {
    "from": 216,
    "label": "assigns",
    "to": 217
  }, {
    "from": 214,
    "label": "initializes",
    "to": 218
  }, {
    "from": 218,
    "label": "assigns",
    "to": 219
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "function",
    "type": "module"
  }, {
    "id": 2,
    "text": "function classFunction:decltype ()\r\n self.type = typevar(self.type)\r\n if strfind(self.mod,'const') then\r\n\t self.type = 'const '..self.type\r\n\t\tself.mod = gsub(self.mod,'const%s*','')\r\n\tend\r\n local i=1\r\n while self.args[i] do\r\n  self.args[i]:decltype()\r\n  i = i+1\r\n end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "self.type = typevar(self.type)",
    "type": "statement:assign"
  }, {
    "id": 4,
    "text": "if strfind(self.mod,'const') then\r\n\t self.type = 'const '..self.type\r\n\t\tself.mod = gsub(self.mod,'const%s*','')\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "self.type = 'const '..self.type",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "self.mod = gsub(self.mod,'const%s*','')",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "local i=1",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "while self.args[i] do\r\n  self.args[i]:decltype()\r\n  i = i+1\r\n end",
    "type": "statement:while"
  }, {
    "id": 9,
    "text": "self.args[i]:decltype()",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "i = i+1",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function classFunction:supcode ()\r\n local overload = strsub(self.cname,-2,-1) - 1  -- indicate overloaded func\r\n local nret = 0      -- number of returned values\r\n local class = self:inclass()\r\n local _,_,static = strfind(self.mod,'^%s*(static)')\r\n\r\n if class then\r\n  output(\"/* method:\",self.name,\" of class \",class,\" */\")\r\n else\r\n  output(\"/* function:\",self.name,\" */\")\r\n end\r\n output(\"static int\",self.cname,\"(lua_State* tolua_S)\")\r\n output(\"{\")\r\n\r\n -- check types\r\n\tif overload < 0 then\r\n\t output('#ifndef TOLUA_RELEASE\\n')\r\n\tend\r\n\toutput(' tolua_Error tolua_err;')\r\n output(' if (\\n')\r\n -- check self\r\n local narg\r\n if class then narg=2 else narg=1 end\r\n if class then\r\n\t local func = 'tolua_isusertype'\r\n\t\tlocal type = self.parent.type\r\n\t\tif self.const ~= '' then\r\n\t\t type = self.const .. \" \" .. type\r\n\t\tend\r\n\t if self.name=='new' or static~=nil then\r\n\t\t func = 'tolua_isusertable'\r\n\t\t\ttype = self.parent.type\r\n\t\tend\r\n\t\toutput('     !'..func..'(tolua_S,1,\"'..type..'\",0,&tolua_err) || \\n') \r\n end\r\n -- check args\r\n local vararg = false\r\n if self.args[1].type ~= 'void' then\r\n  local i=1\r\n  while self.args[i] and self.args[i].type ~= \"...\" do\r\n\t\t local btype = isbasic(self.args[i].type) \r\n\t\t\tif btype ~= 'state' then\r\n    output('     !'..self.args[i]:outchecktype(narg,false)..' || \\n')\r\n   end\r\n\t\t\tif btype ~= 'state' then\r\n        narg = narg+1\r\n\t\t\tend\r\n   i = i+1\r\n  end\r\n  if self.args[i] then\r\n   vararg = true\r\n  end\r\n end\r\n -- check end of list \r\n if not vararg then\r\n   output('     !tolua_isnoobj(tolua_S,'..narg..',&tolua_err)\\n')\r\n else\r\n   output('     0\\n')\r\n end\r\n output('    )')\r\n output('  goto tolua_lerror;')\r\n\r\n output(' else\\n')\r\n\tif overload < 0 then\r\n\t output('#endif\\n')\r\n\tend\r\n\toutput(' {')\r\n \r\n -- declare self, if the case\r\n local narg\r\n if class then narg=2 else narg=1 end\r\n if class and self.name~='new' and static==nil then\r\n  output(' ',self.const,self.parent.type,'*','self = ')\r\n  output('(',self.const,self.parent.type,'*) ')\r\n  output('tolua_tousertype(tolua_S,1,0);')\r\n elseif static then\r\n  _,_,self.mod = strfind(self.mod,'^%s*static%s%s*(.*)')\r\n end\r\n -- declare parameters\r\n if self.args[1].type ~= 'void' then\r\n  local i=1\r\n  while self.args[i] and self.args[i].type ~= \"...\" do\r\n   self.args[i]:declare(narg)\r\n\t\t\tif isbasic(self.args[i].type) ~= \"state\" then\r\n        narg = narg+1\r\n\t\t\tend\r\n   i = i+1\r\n  end\r\n end\r\n\r\n -- check self\r\n if class and self.name~='new' and static==nil then \r\n\t output('#ifndef TOLUA_RELEASE\\n')\r\n  output('  if (!self) tolua_error(tolua_S,\"invalid \\'self\\' in function \\''..self.name..'\\'\",NULL);');\r\n\t output('#endif\\n')\r\n end\r\n\r\n -- get array element values\r\n if class then narg=2 else narg=1 end\r\n if self.args[1].type ~= 'void' then\r\n  local i=1\r\n  while self.args[i] and self.args[i].type ~= \"...\" do\r\n\t if isbasic(self.args[i].type) ~= \"state\" then\r\n     self.args[i]:getarray(narg)\r\n     narg = narg+1\r\n   end\r\n   i = i+1\r\n  end\r\n end\r\n\r\n -- call function\r\n if class and self.name=='delete' then\r\n  output('  tolua_release(tolua_S,self);')\r\n  output('  delete self;')\r\n elseif class and self.name == 'operator&[]' then\r\n  output('  self->operator[](',self.args[1].name,'-1) = ',self.args[2].name,';')\r\n else\r\n  output('  {')\r\n  if self.type ~= '' and self.type ~= 'void' then\r\n   local ctype = self.type\r\n   if ctype == 'value' or ctype == 'function' then\r\n    ctype = 'int'\r\n   end\r\n   output('  ',self.mod,ctype,self.ptr,'tolua_ret = ')\r\n   if isbasic(self.type) or self.ptr ~= '' then\r\n    output('(',self.mod,ctype,self.ptr,') ')\r\n   end\r\n  else\r\n   output('  ')\r\n  end\r\n  if class and self.name=='new' then\r\n   output('new',self.type,'(')\r\n  elseif class and static then\r\n   output(class..'::'..self.name,'(')\r\n  elseif class then\r\n   output('self->'..self.name,'(')\r\n  else\r\n   output(self.name,'(')\r\n  end\r\n\r\n  -- write parameters\r\n  local i=1\r\n  while self.args[i] and self.args[i].type ~= \"...\" do\r\n   self.args[i]:passpar()\r\n   i = i+1\r\n   if self.args[i] and self.args[i].type ~= \"...\" then\r\n    output(',')\r\n   end\r\n  end\r\n     \r\n  if class and self.name == 'operator[]' then\r\n   output('-1);')\r\n\t\telse\r\n   output(');')\r\n\t\tend\r\n\r\n  -- return values\r\n  if self.type ~= '' and self.type ~= 'void' then\r\n   nret = nret + 1\r\n   local t,ct = isbasic(self.type)\r\n   if t then\r\n     if t=='function' then t='value' end\r\n     if self.type == 'tolua_index' then\r\n      output('   if (tolua_ret < 0) lua_pushnil(tolua_S);')\r\n      output('   else tolua_push'..t..'(tolua_S,(',ct,')tolua_ret+1);')\r\n     else\r\n      output('   tolua_push'..t..'(tolua_S,(',ct,')tolua_ret);')\r\n     end\r\n   else\r\n\t\t\t t = self.type\r\n    if self.ptr == '' then\r\n     output('   {')\r\n     output('#ifdef __cplusplus\\n')\r\n     output('    void* tolua_obj = new',t,'(tolua_ret);') \r\n\t    output('    tolua_pushusertype(tolua_S,tolua_clone(tolua_S,tolua_obj,'.. (_collect[t] or 'NULL') ..'),\"',t,'\");')\r\n     output('#else\\n')\r\n     output('    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(',t,'));')\r\n\t    output('    tolua_pushusertype(tolua_S,tolua_clone(tolua_S,tolua_obj,NULL),\"',t,'\");')\r\n     output('#endif\\n')\r\n     output('   }')\r\n    elseif self.ptr == '&' then\r\n     output('   tolua_pushusertype(tolua_S,(void*)&tolua_ret,\"',t,'\");')\r\n    else\r\n     output('   tolua_pushusertype(tolua_S,(void*)tolua_ret,\"',t,'\");')\r\n     if self.mod == 'tolua_own' then\r\n       output('   lua_pushcfunction(tolua_S, tolua_bnd_takeownership);')\r\n       output('   lua_pushvalue(tolua_S, -2);')\r\n       output('   lua_call(tolua_S, 1, 0);')\r\n     end\r\n    end\r\n   end\r\n  end\r\n  local i=1\r\n  while self.args[i] do\r\n   nret = nret + self.args[i]:retvalue()\r\n   i = i+1\r\n  end\r\n  output('  }')\r\n\r\n  -- set array element values\r\n  if class then narg=2 else narg=1 end\r\n  if self.args[1].type ~= 'void' then\r\n   local i=1\r\n   while self.args[i] do\r\n     if isbasic(self.args[i].type) ~= \"state\" then\r\n       self.args[i]:setarray(narg)\r\n       narg = narg+1\r\n     end\r\n     i = i+1\r\n   end\r\n  end\r\n \r\n  -- free dynamically allocated array\r\n  if self.args[1].type ~= 'void' then\r\n   local i=1\r\n   while self.args[i] do\r\n    self.args[i]:freearray()\r\n    i = i+1\r\n   end\r\n  end\r\n end\r\n\r\n output(' }')\r\n output(' return '..nret..';')\r\n\r\n -- call overloaded function or generate error\r\n\tif overload < 0 then\r\n\t output('#ifndef TOLUA_RELEASE\\n')\r\n  output('tolua_lerror:\\n')\r\n  output(' tolua_error(tolua_S,\"#ferror in function \\''..self.lname..'\\'.\",&tolua_err);')\r\n  output(' return 0;')\r\n  output('#endif\\n')\r\n\telse\r\n  output('tolua_lerror:\\n')\r\n  output(' return '..strsub(self.cname,1,-3)..format(\"%02d\",overload)..'(tolua_S);')\r\n end\r\n output('}')\r\n output('\\n')\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "local overload = strsub(self.cname,-2,-1) - 1",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "local nret = 0",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "local class = self:inclass()",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "local _,_,static = strfind(self.mod,'^%s*(static)')",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "if class then\r\n  output(\"/* method:\",self.name,\" of class \",class,\" */\")\r\n else\r\n  output(\"/* function:\",self.name,\" */\")\r\n end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "output(\"/* method:\",self.name,\" of class \",class,\" */\")",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "output(\"/* function:\",self.name,\" */\")",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "output(\"static int\",self.cname,\"(lua_State* tolua_S)\")",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "output(\"{\")",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "if overload < 0 then\r\n\t output('#ifndef TOLUA_RELEASE\\n')\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "output('#ifndef TOLUA_RELEASE\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "output(' tolua_Error tolua_err;')",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "output(' if (\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "local narg",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "if class then narg=2 else narg=1 end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "narg=2",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "narg=1",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "if class then\r\n\t local func = 'tolua_isusertype'\r\n\t\tlocal type = self.parent.type\r\n\t\tif self.const ~= '' then\r\n\t\t type = self.const .. \" \" .. type\r\n\t\tend\r\n\t if self.name=='new' or static~=nil then\r\n\t\t func = 'tolua_isusertable'\r\n\t\t\ttype = self.parent.type\r\n\t\tend\r\n\t\toutput('     !'..func..'(tolua_S,1,\"'..type..'\",0,&tolua_err) || \\n') \r\n end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "local func = 'tolua_isusertype'",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "local type = self.parent.type",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "if self.const ~= '' then\r\n\t\t type = self.const .. \" \" .. type\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "type = self.const .. \" \" .. type",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "if self.name=='new' or static~=nil then\r\n\t\t func = 'tolua_isusertable'\r\n\t\t\ttype = self.parent.type\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "func = 'tolua_isusertable'",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "type = self.parent.type",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "output('     !'..func..'(tolua_S,1,\"'..type..'\",0,&tolua_err) || \\n')",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "local vararg = false",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "if self.args[1].type ~= 'void' then\r\n  local i=1\r\n  while self.args[i] and self.args[i].type ~= \"...\" do\r\n\t\t local btype = isbasic(self.args[i].type) \r\n\t\t\tif btype ~= 'state' then\r\n    output('     !'..self.args[i]:outchecktype(narg,false)..' || \\n')\r\n   end\r\n\t\t\tif btype ~= 'state' then\r\n        narg = narg+1\r\n\t\t\tend\r\n   i = i+1\r\n  end\r\n  if self.args[i] then\r\n   vararg = true\r\n  end\r\n end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "while self.args[i] and self.args[i].type ~= \"...\" do\r\n\t\t local btype = isbasic(self.args[i].type) \r\n\t\t\tif btype ~= 'state' then\r\n    output('     !'..self.args[i]:outchecktype(narg,false)..' || \\n')\r\n   end\r\n\t\t\tif btype ~= 'state' then\r\n        narg = narg+1\r\n\t\t\tend\r\n   i = i+1\r\n  end",
    "type": "statement:while"
  }, {
    "id": 42,
    "text": "local btype = isbasic(self.args[i].type)",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "if btype ~= 'state' then\r\n    output('     !'..self.args[i]:outchecktype(narg,false)..' || \\n')\r\n   end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "output('     !'..self.args[i]:outchecktype(narg,false)..' || \\n')",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "if btype ~= 'state' then\r\n        narg = narg+1\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "narg = narg+1",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "if self.args[i] then\r\n   vararg = true\r\n  end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "vararg = true",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "if not vararg then\r\n   output('     !tolua_isnoobj(tolua_S,'..narg..',&tolua_err)\\n')\r\n else\r\n   output('     0\\n')\r\n end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "output('     !tolua_isnoobj(tolua_S,'..narg..',&tolua_err)\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "output('     0\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "output('    )')",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "output('  goto tolua_lerror;')",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "output(' else\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "if overload < 0 then\r\n\t output('#endif\\n')\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "output('#endif\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "output(' {')",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "if class and self.name~='new' and static==nil then\r\n  output(' ',self.const,self.parent.type,'*','self = ')\r\n  output('(',self.const,self.parent.type,'*) ')\r\n  output('tolua_tousertype(tolua_S,1,0);')\r\n elseif static then\r\n  _,_,self.mod = strfind(self.mod,'^%s*static%s%s*(.*)')\r\n end",
    "type": "statement:if"
  }, {
    "id": 59,
    "text": "output(' ',self.const,self.parent.type,'*','self = ')",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "output('(',self.const,self.parent.type,'*) ')",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "output('tolua_tousertype(tolua_S,1,0);')",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "_,_,self.mod = strfind(self.mod,'^%s*static%s%s*(.*)')",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "if self.args[1].type ~= 'void' then\r\n  local i=1\r\n  while self.args[i] and self.args[i].type ~= \"...\" do\r\n   self.args[i]:declare(narg)\r\n\t\t\tif isbasic(self.args[i].type) ~= \"state\" then\r\n        narg = narg+1\r\n\t\t\tend\r\n   i = i+1\r\n  end\r\n end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "while self.args[i] and self.args[i].type ~= \"...\" do\r\n   self.args[i]:declare(narg)\r\n\t\t\tif isbasic(self.args[i].type) ~= \"state\" then\r\n        narg = narg+1\r\n\t\t\tend\r\n   i = i+1\r\n  end",
    "type": "statement:while"
  }, {
    "id": 65,
    "text": "self.args[i]:declare(narg)",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "if isbasic(self.args[i].type) ~= \"state\" then\r\n        narg = narg+1\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "if class and self.name~='new' and static==nil then \r\n\t output('#ifndef TOLUA_RELEASE\\n')\r\n  output('  if (!self) tolua_error(tolua_S,\"invalid \\'self\\' in function \\''..self.name..'\\'\",NULL);');\r\n\t output('#endif\\n')\r\n end",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "output('  if (!self) tolua_error(tolua_S,\"invalid \\'self\\' in function \\''..self.name..'\\'\",NULL);')",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "if self.args[1].type ~= 'void' then\r\n  local i=1\r\n  while self.args[i] and self.args[i].type ~= \"...\" do\r\n\t if isbasic(self.args[i].type) ~= \"state\" then\r\n     self.args[i]:getarray(narg)\r\n     narg = narg+1\r\n   end\r\n   i = i+1\r\n  end\r\n end",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "while self.args[i] and self.args[i].type ~= \"...\" do\r\n\t if isbasic(self.args[i].type) ~= \"state\" then\r\n     self.args[i]:getarray(narg)\r\n     narg = narg+1\r\n   end\r\n   i = i+1\r\n  end",
    "type": "statement:while"
  }, {
    "id": 71,
    "text": "if isbasic(self.args[i].type) ~= \"state\" then\r\n     self.args[i]:getarray(narg)\r\n     narg = narg+1\r\n   end",
    "type": "statement:if"
  }, {
    "id": 72,
    "text": "self.args[i]:getarray(narg)",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "if class and self.name=='delete' then\r\n  output('  tolua_release(tolua_S,self);')\r\n  output('  delete self;')\r\n elseif class and self.name == 'operator&[]' then\r\n  output('  self->operator[](',self.args[1].name,'-1) = ',self.args[2].name,';')\r\n else\r\n  output('  {')\r\n  if self.type ~= '' and self.type ~= 'void' then\r\n   local ctype = self.type\r\n   if ctype == 'value' or ctype == 'function' then\r\n    ctype = 'int'\r\n   end\r\n   output('  ',self.mod,ctype,self.ptr,'tolua_ret = ')\r\n   if isbasic(self.type) or self.ptr ~= '' then\r\n    output('(',self.mod,ctype,self.ptr,') ')\r\n   end\r\n  else\r\n   output('  ')\r\n  end\r\n  if class and self.name=='new' then\r\n   output('new',self.type,'(')\r\n  elseif class and static then\r\n   output(class..'::'..self.name,'(')\r\n  elseif class then\r\n   output('self->'..self.name,'(')\r\n  else\r\n   output(self.name,'(')\r\n  end\r\n\r\n  -- write parameters\r\n  local i=1\r\n  while self.args[i] and self.args[i].type ~= \"...\" do\r\n   self.args[i]:passpar()\r\n   i = i+1\r\n   if self.args[i] and self.args[i].type ~= \"...\" then\r\n    output(',')\r\n   end\r\n  end\r\n     \r\n  if class and self.name == 'operator[]' then\r\n   output('-1);')\r\n\t\telse\r\n   output(');')\r\n\t\tend\r\n\r\n  -- return values\r\n  if self.type ~= '' and self.type ~= 'void' then\r\n   nret = nret + 1\r\n   local t,ct = isbasic(self.type)\r\n   if t then\r\n     if t=='function' then t='value' end\r\n     if self.type == 'tolua_index' then\r\n      output('   if (tolua_ret < 0) lua_pushnil(tolua_S);')\r\n      output('   else tolua_push'..t..'(tolua_S,(',ct,')tolua_ret+1);')\r\n     else\r\n      output('   tolua_push'..t..'(tolua_S,(',ct,')tolua_ret);')\r\n     end\r\n   else\r\n\t\t\t t = self.type\r\n    if self.ptr == '' then\r\n     output('   {')\r\n     output('#ifdef __cplusplus\\n')\r\n     output('    void* tolua_obj = new',t,'(tolua_ret);') \r\n\t    output('    tolua_pushusertype(tolua_S,tolua_clone(tolua_S,tolua_obj,'.. (_collect[t] or 'NULL') ..'),\"',t,'\");')\r\n     output('#else\\n')\r\n     output('    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(',t,'));')\r\n\t    output('    tolua_pushusertype(tolua_S,tolua_clone(tolua_S,tolua_obj,NULL),\"',t,'\");')\r\n     output('#endif\\n')\r\n     output('   }')\r\n    elseif self.ptr == '&' then\r\n     output('   tolua_pushusertype(tolua_S,(void*)&tolua_ret,\"',t,'\");')\r\n    else\r\n     output('   tolua_pushusertype(tolua_S,(void*)tolua_ret,\"',t,'\");')\r\n     if self.mod == 'tolua_own' then\r\n       output('   lua_pushcfunction(tolua_S, tolua_bnd_takeownership);')\r\n       output('   lua_pushvalue(tolua_S, -2);')\r\n       output('   lua_call(tolua_S, 1, 0);')\r\n     end\r\n    end\r\n   end\r\n  end\r\n  local i=1\r\n  while self.args[i] do\r\n   nret = nret + self.args[i]:retvalue()\r\n   i = i+1\r\n  end\r\n  output('  }')\r\n\r\n  -- set array element values\r\n  if class then narg=2 else narg=1 end\r\n  if self.args[1].type ~= 'void' then\r\n   local i=1\r\n   while self.args[i] do\r\n     if isbasic(self.args[i].type) ~= \"state\" then\r\n       self.args[i]:setarray(narg)\r\n       narg = narg+1\r\n     end\r\n     i = i+1\r\n   end\r\n  end\r\n \r\n  -- free dynamically allocated array\r\n  if self.args[1].type ~= 'void' then\r\n   local i=1\r\n   while self.args[i] do\r\n    self.args[i]:freearray()\r\n    i = i+1\r\n   end\r\n  end\r\n end",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "output('  tolua_release(tolua_S,self);')",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "output('  delete self;')",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "output('  self->operator[](',self.args[1].name,'-1) = ',self.args[2].name,';')",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "output('  {')",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "if self.type ~= '' and self.type ~= 'void' then\r\n   local ctype = self.type\r\n   if ctype == 'value' or ctype == 'function' then\r\n    ctype = 'int'\r\n   end\r\n   output('  ',self.mod,ctype,self.ptr,'tolua_ret = ')\r\n   if isbasic(self.type) or self.ptr ~= '' then\r\n    output('(',self.mod,ctype,self.ptr,') ')\r\n   end\r\n  else\r\n   output('  ')\r\n  end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "local ctype = self.type",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "if ctype == 'value' or ctype == 'function' then\r\n    ctype = 'int'\r\n   end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "ctype = 'int'",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "output('  ',self.mod,ctype,self.ptr,'tolua_ret = ')",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "if isbasic(self.type) or self.ptr ~= '' then\r\n    output('(',self.mod,ctype,self.ptr,') ')\r\n   end",
    "type": "statement:if"
  }, {
    "id": 84,
    "text": "output('(',self.mod,ctype,self.ptr,') ')",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "output('  ')",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "if class and self.name=='new' then\r\n   output('new',self.type,'(')\r\n  elseif class and static then\r\n   output(class..'::'..self.name,'(')\r\n  elseif class then\r\n   output('self->'..self.name,'(')\r\n  else\r\n   output(self.name,'(')\r\n  end",
    "type": "statement:if"
  }, {
    "id": 87,
    "text": "output('new',self.type,'(')",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "output(class..'::'..self.name,'(')",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "output('self->'..self.name,'(')",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "output(self.name,'(')",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "while self.args[i] and self.args[i].type ~= \"...\" do\r\n   self.args[i]:passpar()\r\n   i = i+1\r\n   if self.args[i] and self.args[i].type ~= \"...\" then\r\n    output(',')\r\n   end\r\n  end",
    "type": "statement:while"
  }, {
    "id": 92,
    "text": "self.args[i]:passpar()",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "if self.args[i] and self.args[i].type ~= \"...\" then\r\n    output(',')\r\n   end",
    "type": "statement:if"
  }, {
    "id": 94,
    "text": "output(',')",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "if class and self.name == 'operator[]' then\r\n   output('-1);')\r\n\t\telse\r\n   output(');')\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 96,
    "text": "output('-1);')",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "output(');')",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "if self.type ~= '' and self.type ~= 'void' then\r\n   nret = nret + 1\r\n   local t,ct = isbasic(self.type)\r\n   if t then\r\n     if t=='function' then t='value' end\r\n     if self.type == 'tolua_index' then\r\n      output('   if (tolua_ret < 0) lua_pushnil(tolua_S);')\r\n      output('   else tolua_push'..t..'(tolua_S,(',ct,')tolua_ret+1);')\r\n     else\r\n      output('   tolua_push'..t..'(tolua_S,(',ct,')tolua_ret);')\r\n     end\r\n   else\r\n\t\t\t t = self.type\r\n    if self.ptr == '' then\r\n     output('   {')\r\n     output('#ifdef __cplusplus\\n')\r\n     output('    void* tolua_obj = new',t,'(tolua_ret);') \r\n\t    output('    tolua_pushusertype(tolua_S,tolua_clone(tolua_S,tolua_obj,'.. (_collect[t] or 'NULL') ..'),\"',t,'\");')\r\n     output('#else\\n')\r\n     output('    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(',t,'));')\r\n\t    output('    tolua_pushusertype(tolua_S,tolua_clone(tolua_S,tolua_obj,NULL),\"',t,'\");')\r\n     output('#endif\\n')\r\n     output('   }')\r\n    elseif self.ptr == '&' then\r\n     output('   tolua_pushusertype(tolua_S,(void*)&tolua_ret,\"',t,'\");')\r\n    else\r\n     output('   tolua_pushusertype(tolua_S,(void*)tolua_ret,\"',t,'\");')\r\n     if self.mod == 'tolua_own' then\r\n       output('   lua_pushcfunction(tolua_S, tolua_bnd_takeownership);')\r\n       output('   lua_pushvalue(tolua_S, -2);')\r\n       output('   lua_call(tolua_S, 1, 0);')\r\n     end\r\n    end\r\n   end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 99,
    "text": "nret = nret + 1",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "local t,ct = isbasic(self.type)",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "if t then\r\n     if t=='function' then t='value' end\r\n     if self.type == 'tolua_index' then\r\n      output('   if (tolua_ret < 0) lua_pushnil(tolua_S);')\r\n      output('   else tolua_push'..t..'(tolua_S,(',ct,')tolua_ret+1);')\r\n     else\r\n      output('   tolua_push'..t..'(tolua_S,(',ct,')tolua_ret);')\r\n     end\r\n   else\r\n\t\t\t t = self.type\r\n    if self.ptr == '' then\r\n     output('   {')\r\n     output('#ifdef __cplusplus\\n')\r\n     output('    void* tolua_obj = new',t,'(tolua_ret);') \r\n\t    output('    tolua_pushusertype(tolua_S,tolua_clone(tolua_S,tolua_obj,'.. (_collect[t] or 'NULL') ..'),\"',t,'\");')\r\n     output('#else\\n')\r\n     output('    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(',t,'));')\r\n\t    output('    tolua_pushusertype(tolua_S,tolua_clone(tolua_S,tolua_obj,NULL),\"',t,'\");')\r\n     output('#endif\\n')\r\n     output('   }')\r\n    elseif self.ptr == '&' then\r\n     output('   tolua_pushusertype(tolua_S,(void*)&tolua_ret,\"',t,'\");')\r\n    else\r\n     output('   tolua_pushusertype(tolua_S,(void*)tolua_ret,\"',t,'\");')\r\n     if self.mod == 'tolua_own' then\r\n       output('   lua_pushcfunction(tolua_S, tolua_bnd_takeownership);')\r\n       output('   lua_pushvalue(tolua_S, -2);')\r\n       output('   lua_call(tolua_S, 1, 0);')\r\n     end\r\n    end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 102,
    "text": "if t=='function' then t='value' end",
    "type": "statement:if"
  }, {
    "id": 103,
    "text": "t='value'",
    "type": "statement:assign"
  }, {
    "id": 104,
    "text": "if self.type == 'tolua_index' then\r\n      output('   if (tolua_ret < 0) lua_pushnil(tolua_S);')\r\n      output('   else tolua_push'..t..'(tolua_S,(',ct,')tolua_ret+1);')\r\n     else\r\n      output('   tolua_push'..t..'(tolua_S,(',ct,')tolua_ret);')\r\n     end",
    "type": "statement:if"
  }, {
    "id": 105,
    "text": "output('   if (tolua_ret < 0) lua_pushnil(tolua_S);')",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "output('   else tolua_push'..t..'(tolua_S,(',ct,')tolua_ret+1);')",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "output('   tolua_push'..t..'(tolua_S,(',ct,')tolua_ret);')",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "t = self.type",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "if self.ptr == '' then\r\n     output('   {')\r\n     output('#ifdef __cplusplus\\n')\r\n     output('    void* tolua_obj = new',t,'(tolua_ret);') \r\n\t    output('    tolua_pushusertype(tolua_S,tolua_clone(tolua_S,tolua_obj,'.. (_collect[t] or 'NULL') ..'),\"',t,'\");')\r\n     output('#else\\n')\r\n     output('    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(',t,'));')\r\n\t    output('    tolua_pushusertype(tolua_S,tolua_clone(tolua_S,tolua_obj,NULL),\"',t,'\");')\r\n     output('#endif\\n')\r\n     output('   }')\r\n    elseif self.ptr == '&' then\r\n     output('   tolua_pushusertype(tolua_S,(void*)&tolua_ret,\"',t,'\");')\r\n    else\r\n     output('   tolua_pushusertype(tolua_S,(void*)tolua_ret,\"',t,'\");')\r\n     if self.mod == 'tolua_own' then\r\n       output('   lua_pushcfunction(tolua_S, tolua_bnd_takeownership);')\r\n       output('   lua_pushvalue(tolua_S, -2);')\r\n       output('   lua_call(tolua_S, 1, 0);')\r\n     end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 110,
    "text": "output('   {')",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "output('#ifdef __cplusplus\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "output('    void* tolua_obj = new',t,'(tolua_ret);')",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "output('    tolua_pushusertype(tolua_S,tolua_clone(tolua_S,tolua_obj,'.. (_collect[t] or 'NULL') ..'),\"',t,'\");')",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "output('#else\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "output('    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(',t,'));')",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "output('    tolua_pushusertype(tolua_S,tolua_clone(tolua_S,tolua_obj,NULL),\"',t,'\");')",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "output('   }')",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "output('   tolua_pushusertype(tolua_S,(void*)&tolua_ret,\"',t,'\");')",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "output('   tolua_pushusertype(tolua_S,(void*)tolua_ret,\"',t,'\");')",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "if self.mod == 'tolua_own' then\r\n       output('   lua_pushcfunction(tolua_S, tolua_bnd_takeownership);')\r\n       output('   lua_pushvalue(tolua_S, -2);')\r\n       output('   lua_call(tolua_S, 1, 0);')\r\n     end",
    "type": "statement:if"
  }, {
    "id": 121,
    "text": "output('   lua_pushcfunction(tolua_S, tolua_bnd_takeownership);')",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "output('   lua_pushvalue(tolua_S, -2);')",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "output('   lua_call(tolua_S, 1, 0);')",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "while self.args[i] do\r\n   nret = nret + self.args[i]:retvalue()\r\n   i = i+1\r\n  end",
    "type": "statement:while"
  }, {
    "id": 125,
    "text": "nret = nret + self.args[i]:retvalue()",
    "type": "statement:assign"
  }, {
    "id": 126,
    "text": "output('  }')",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "if self.args[1].type ~= 'void' then\r\n   local i=1\r\n   while self.args[i] do\r\n     if isbasic(self.args[i].type) ~= \"state\" then\r\n       self.args[i]:setarray(narg)\r\n       narg = narg+1\r\n     end\r\n     i = i+1\r\n   end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 128,
    "text": "while self.args[i] do\r\n     if isbasic(self.args[i].type) ~= \"state\" then\r\n       self.args[i]:setarray(narg)\r\n       narg = narg+1\r\n     end\r\n     i = i+1\r\n   end",
    "type": "statement:while"
  }, {
    "id": 129,
    "text": "if isbasic(self.args[i].type) ~= \"state\" then\r\n       self.args[i]:setarray(narg)\r\n       narg = narg+1\r\n     end",
    "type": "statement:if"
  }, {
    "id": 130,
    "text": "self.args[i]:setarray(narg)",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "if self.args[1].type ~= 'void' then\r\n   local i=1\r\n   while self.args[i] do\r\n    self.args[i]:freearray()\r\n    i = i+1\r\n   end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 132,
    "text": "while self.args[i] do\r\n    self.args[i]:freearray()\r\n    i = i+1\r\n   end",
    "type": "statement:while"
  }, {
    "id": 133,
    "text": "self.args[i]:freearray()",
    "type": "statement:functioncall"
  }, {
    "id": 134,
    "text": "output(' }')",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "output(' return '..nret..';')",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "if overload < 0 then\r\n\t output('#ifndef TOLUA_RELEASE\\n')\r\n  output('tolua_lerror:\\n')\r\n  output(' tolua_error(tolua_S,\"#ferror in function \\''..self.lname..'\\'.\",&tolua_err);')\r\n  output(' return 0;')\r\n  output('#endif\\n')\r\n\telse\r\n  output('tolua_lerror:\\n')\r\n  output(' return '..strsub(self.cname,1,-3)..format(\"%02d\",overload)..'(tolua_S);')\r\n end",
    "type": "statement:if"
  }, {
    "id": 137,
    "text": "output('tolua_lerror:\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 138,
    "text": "output(' tolua_error(tolua_S,\"#ferror in function \\''..self.lname..'\\'.\",&tolua_err);')",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "output(' return 0;')",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "output(' return '..strsub(self.cname,1,-3)..format(\"%02d\",overload)..'(tolua_S);')",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "output('}')",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "output('\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 143,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 144,
    "text": "function classFunction:register ()\r\n output(' tolua_function(tolua_S,\"'..self.lname..'\",'..self.cname..');')\r\nend",
    "type": "function"
  }, {
    "id": 145,
    "text": "output(' tolua_function(tolua_S,\"'..self.lname..'\",'..self.cname..');')",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 147,
    "text": "function classFunction:print (ident,close)\r\n print(ident..\"Function{\")\r\n print(ident..\" mod  = '\"..self.mod..\"',\")\r\n print(ident..\" type = '\"..self.type..\"',\")\r\n print(ident..\" ptr  = '\"..self.ptr..\"',\")\r\n print(ident..\" name = '\"..self.name..\"',\")\r\n print(ident..\" lname = '\"..self.lname..\"',\")\r\n print(ident..\" const = '\"..self.const..\"',\")\r\n print(ident..\" cname = '\"..self.cname..\"',\")\r\n print(ident..\" lname = '\"..self.lname..\"',\")\r\n print(ident..\" args = {\")\r\n local i=1\r\n while self.args[i] do\r\n  self.args[i]:print(ident..\"  \",\",\")\r\n  i = i+1\r\n end\r\n print(ident..\" }\")\r\n print(ident..\"}\"..close)\r\nend",
    "type": "function"
  }, {
    "id": 148,
    "text": "print(ident..\"Function{\")",
    "type": "statement:functioncall"
  }, {
    "id": 149,
    "text": "print(ident..\" mod  = '\"..self.mod..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 150,
    "text": "print(ident..\" type = '\"..self.type..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "print(ident..\" ptr  = '\"..self.ptr..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 152,
    "text": "print(ident..\" name = '\"..self.name..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 153,
    "text": "print(ident..\" lname = '\"..self.lname..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 154,
    "text": "print(ident..\" const = '\"..self.const..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 155,
    "text": "print(ident..\" cname = '\"..self.cname..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 156,
    "text": "print(ident..\" args = {\")",
    "type": "statement:functioncall"
  }, {
    "id": 157,
    "text": "while self.args[i] do\r\n  self.args[i]:print(ident..\"  \",\",\")\r\n  i = i+1\r\n end",
    "type": "statement:while"
  }, {
    "id": 158,
    "text": "self.args[i]:print(ident..\"  \",\",\")",
    "type": "statement:functioncall"
  }, {
    "id": 159,
    "text": "print(ident..\" }\")",
    "type": "statement:functioncall"
  }, {
    "id": 160,
    "text": "print(ident..\"}\"..close)",
    "type": "statement:functioncall"
  }, {
    "id": 161,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 162,
    "text": "function classFunction:requirecollection (t)\r\n\tlocal r = false\r\n\tif self.type ~= '' and not isbasic(self.type) and self.ptr=='' then\r\n\t local type = gsub(self.type,\"%s*const%s*\",\"\")\r\n\t t[type] = \"tolua_collect_\" .. gsub(type,\"::\",\"_\")\r\n\t r = true\r\n\tend\r\n\tlocal i=1\r\n\twhile self.args[i] do\r\n\t\tr = self.args[i]:requirecollection(t) or r\r\n\t\ti = i+1\r\n\tend\r\n\treturn r\r\nend",
    "type": "function"
  }, {
    "id": 163,
    "text": "local r = false",
    "type": "statement:localassign"
  }, {
    "id": 164,
    "text": "if self.type ~= '' and not isbasic(self.type) and self.ptr=='' then\r\n\t local type = gsub(self.type,\"%s*const%s*\",\"\")\r\n\t t[type] = \"tolua_collect_\" .. gsub(type,\"::\",\"_\")\r\n\t r = true\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 165,
    "text": "local type = gsub(self.type,\"%s*const%s*\",\"\")",
    "type": "statement:localassign"
  }, {
    "id": 166,
    "text": "t[type] = \"tolua_collect_\" .. gsub(type,\"::\",\"_\")",
    "type": "statement:assign"
  }, {
    "id": 167,
    "text": "r = true",
    "type": "statement:assign"
  }, {
    "id": 168,
    "text": "while self.args[i] do\r\n\t\tr = self.args[i]:requirecollection(t) or r\r\n\t\ti = i+1\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 169,
    "text": "r = self.args[i]:requirecollection(t) or r",
    "type": "statement:assign"
  }, {
    "id": 170,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 171,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 172,
    "text": "function classFunction:overload ()\r\n return self.parent:overload(self.lname)\r\nend",
    "type": "function"
  }, {
    "id": 173,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 174,
    "text": "function _Function (t)\r\n setmetatable(t,classFunction)\r\n\r\n if t.const ~= 'const' and t.const ~= '' then\r\n  error(\"#invalid 'const' specification\")\r\n end\r\n\r\n append(t)\r\n if t:inclass() then\r\n  if t.name == t.parent.name then\r\n   t.name = 'new'\r\n   t.lname = 'new'\r\n   t.type = t.parent.name\r\n   t.ptr = '*'\r\n  elseif t.name == '~'..t.parent.name then\r\n   t.name = 'delete'\r\n   t.lname = 'delete'\r\n   t.parent._delete = true\r\n  end\r\n end\r\n t.cname = t:cfuncname(\"tolua\")..t:overload(t)\r\n return t\r\nend",
    "type": "function"
  }, {
    "id": 175,
    "text": "setmetatable(t,classFunction)",
    "type": "statement:functioncall"
  }, {
    "id": 176,
    "text": "if t.const ~= 'const' and t.const ~= '' then\r\n  error(\"#invalid 'const' specification\")\r\n end",
    "type": "statement:if"
  }, {
    "id": 177,
    "text": "error(\"#invalid 'const' specification\")",
    "type": "statement:functioncall"
  }, {
    "id": 178,
    "text": "append(t)",
    "type": "statement:functioncall"
  }, {
    "id": 179,
    "text": "if t:inclass() then\r\n  if t.name == t.parent.name then\r\n   t.name = 'new'\r\n   t.lname = 'new'\r\n   t.type = t.parent.name\r\n   t.ptr = '*'\r\n  elseif t.name == '~'..t.parent.name then\r\n   t.name = 'delete'\r\n   t.lname = 'delete'\r\n   t.parent._delete = true\r\n  end\r\n end",
    "type": "statement:if"
  }, {
    "id": 180,
    "text": "if t.name == t.parent.name then\r\n   t.name = 'new'\r\n   t.lname = 'new'\r\n   t.type = t.parent.name\r\n   t.ptr = '*'\r\n  elseif t.name == '~'..t.parent.name then\r\n   t.name = 'delete'\r\n   t.lname = 'delete'\r\n   t.parent._delete = true\r\n  end",
    "type": "statement:if"
  }, {
    "id": 181,
    "text": "t.name = 'new'",
    "type": "statement:assign"
  }, {
    "id": 182,
    "text": "t.lname = 'new'",
    "type": "statement:assign"
  }, {
    "id": 183,
    "text": "t.type = t.parent.name",
    "type": "statement:assign"
  }, {
    "id": 184,
    "text": "t.ptr = '*'",
    "type": "statement:assign"
  }, {
    "id": 185,
    "text": "t.name = 'delete'",
    "type": "statement:assign"
  }, {
    "id": 186,
    "text": "t.lname = 'delete'",
    "type": "statement:assign"
  }, {
    "id": 187,
    "text": "t.parent._delete = true",
    "type": "statement:assign"
  }, {
    "id": 188,
    "text": "t.cname = t:cfuncname(\"tolua\")..t:overload(t)",
    "type": "statement:assign"
  }, {
    "id": 189,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 190,
    "text": "function Function (d,a,c)\r\n local t = split(strsub(a,2,-2),',') -- eliminate braces\r\n local i=1\r\n local l = {n=0}\r\n while t[i] do\r\n  l.n = l.n+1\r\n  l[l.n] = Declaration(t[i],'var')\r\n  i = i+1\r\n end\r\n local f = Declaration(d,'func')\r\n f.args = l\r\n f.const = c\r\n return _Function(f)\r\nend",
    "type": "function"
  }, {
    "id": 191,
    "text": "local t = split(strsub(a,2,-2),',')",
    "type": "statement:localassign"
  }, {
    "id": 192,
    "text": "local l = {n=0}",
    "type": "statement:localassign"
  }, {
    "id": 193,
    "text": "while t[i] do\r\n  l.n = l.n+1\r\n  l[l.n] = Declaration(t[i],'var')\r\n  i = i+1\r\n end",
    "type": "statement:while"
  }, {
    "id": 194,
    "text": "l.n = l.n+1",
    "type": "statement:assign"
  }, {
    "id": 195,
    "text": "l[l.n] = Declaration(t[i],'var')",
    "type": "statement:assign"
  }, {
    "id": 196,
    "text": "local f = Declaration(d,'func')",
    "type": "statement:localassign"
  }, {
    "id": 197,
    "text": "f.args = l",
    "type": "statement:assign"
  }, {
    "id": 198,
    "text": "f.const = c",
    "type": "statement:assign"
  }, {
    "id": 199,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 200,
    "text": "",
    "type": "function container"
  }, {
    "id": 201,
    "text": "typevar",
    "type": "global function"
  }, {
    "id": 202,
    "text": "append",
    "type": "global function"
  }, {
    "id": 203,
    "text": "strsub",
    "type": "global function"
  }, {
    "id": 204,
    "text": "format",
    "type": "global function"
  }, {
    "id": 205,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 206,
    "text": "split",
    "type": "global function"
  }, {
    "id": 207,
    "text": "strfind",
    "type": "global function"
  }, {
    "id": 208,
    "text": "error",
    "type": "global function"
  }, {
    "id": 209,
    "text": "Declaration",
    "type": "global function"
  }, {
    "id": 210,
    "text": "isbasic",
    "type": "global function"
  }, {
    "id": 211,
    "text": "output",
    "type": "global function"
  }, {
    "id": 212,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 213,
    "text": "print",
    "type": "global function"
  }, {
    "id": 214,
    "text": "",
    "type": "variable container"
  }, {
    "id": 215,
    "text": "",
    "type": "require container"
  }, {
    "id": 216,
    "text": "",
    "type": "global variable"
  }, {
    "id": 217,
    "text": "",
    "type": "n/a"
  }, {
    "id": 218,
    "text": "",
    "type": "global variable"
  }, {
    "id": 219,
    "text": "",
    "type": "n/a"
  } ]
}