{
  "_filename": "operator.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/tolua/src/bin/lua/operator.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 2,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 2,
    "label": "has",
    "to": 17
  }, {
    "from": 2,
    "label": "has",
    "to": 18
  }, {
    "from": 2,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 20,
    "label": "has",
    "to": 24
  }, {
    "from": 20,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 20,
    "label": "has",
    "to": 27
  }, {
    "from": 20,
    "label": "has",
    "to": 28
  }, {
    "from": 20,
    "label": "has",
    "to": 29
  }, {
    "from": 20,
    "label": "has",
    "to": 30
  }, {
    "from": 20,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 13
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 32,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 16
  }, {
    "from": 32,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 39,
    "label": "has",
    "to": 37
  }, {
    "from": 39,
    "label": "has",
    "to": 43
  }, {
    "from": 39,
    "label": "has",
    "to": 44
  }, {
    "from": 32,
    "label": "has",
    "to": 45
  }, {
    "from": 32,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 32,
    "label": "has",
    "to": 48
  }, {
    "from": 32,
    "label": "has",
    "to": 49
  }, {
    "from": 32,
    "label": "has",
    "to": 50
  }, {
    "from": 32,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 32,
    "label": "has",
    "to": 53
  }, {
    "from": 32,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 32,
    "label": "has",
    "to": 30
  }, {
    "from": 32,
    "label": "has",
    "to": 56
  }, {
    "from": 32,
    "label": "calls",
    "to": 62
  }, {
    "from": 20,
    "label": "calls",
    "to": 58
  }, {
    "from": 32,
    "label": "calls",
    "to": 60
  }, {
    "from": 2,
    "label": "calls",
    "to": 68
  }, {
    "from": 2,
    "label": "calls",
    "to": 68
  }, {
    "from": 2,
    "label": "calls",
    "to": 68
  }, {
    "from": 2,
    "label": "calls",
    "to": 68
  }, {
    "from": 2,
    "label": "calls",
    "to": 68
  }, {
    "from": 2,
    "label": "calls",
    "to": 68
  }, {
    "from": 2,
    "label": "calls",
    "to": 68
  }, {
    "from": 2,
    "label": "calls",
    "to": 68
  }, {
    "from": 2,
    "label": "calls",
    "to": 68
  }, {
    "from": 2,
    "label": "calls",
    "to": 68
  }, {
    "from": 2,
    "label": "calls",
    "to": 68
  }, {
    "from": 2,
    "label": "calls",
    "to": 68
  }, {
    "from": 32,
    "label": "calls",
    "to": 63
  }, {
    "from": 20,
    "label": "calls",
    "to": 64
  }, {
    "from": 20,
    "label": "calls",
    "to": 64
  }, {
    "from": 32,
    "label": "calls",
    "to": 64
  }, {
    "from": 32,
    "label": "calls",
    "to": 64
  }, {
    "from": 57,
    "label": "calls",
    "to": 67
  }, {
    "from": 20,
    "label": "calls",
    "to": 67
  }, {
    "from": 32,
    "label": "calls",
    "to": 61
  }, {
    "from": 32,
    "label": "calls",
    "to": 61
  }, {
    "from": 32,
    "label": "calls",
    "to": 20
  }, {
    "from": 32,
    "label": "calls",
    "to": 66
  }, {
    "from": 32,
    "label": "calls",
    "to": 32
  }, {
    "from": 32,
    "label": "calls",
    "to": 65
  }, {
    "from": 32,
    "label": "calls",
    "to": 65
  }, {
    "from": 32,
    "label": "calls",
    "to": 65
  }, {
    "from": 32,
    "label": "calls",
    "to": 59
  }, {
    "from": 1,
    "label": "contains",
    "to": 57
  }, {
    "from": 57,
    "label": "declares",
    "to": 2
  }, {
    "from": 57,
    "label": "declares",
    "to": 20
  }, {
    "from": 57,
    "label": "declares",
    "to": 32
  }, {
    "from": 1,
    "label": "contains",
    "to": 69
  }, {
    "from": 1,
    "label": "contains",
    "to": 70
  }, {
    "from": 69,
    "label": "initializes",
    "to": 71
  }, {
    "from": 71,
    "label": "assigns",
    "to": 72
  }, {
    "from": 69,
    "label": "initializes",
    "to": 73
  }, {
    "from": 73,
    "label": "assigns",
    "to": 74
  }, {
    "from": 69,
    "label": "initializes",
    "to": 75
  }, {
    "from": 75,
    "label": "assigns",
    "to": 76
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "operator",
    "type": "module"
  }, {
    "id": 2,
    "text": "function classOperator:print (ident,close)\r\n print(ident..\"Operator{\")\r\n print(ident..\" kind  = '\"..self.kind..\"',\")\r\n print(ident..\" mod  = '\"..self.mod..\"',\")\r\n print(ident..\" type = '\"..self.type..\"',\")\r\n print(ident..\" ptr  = '\"..self.ptr..\"',\")\r\n print(ident..\" name = '\"..self.name..\"',\")\r\n print(ident..\" const = '\"..self.const..\"',\")\r\n print(ident..\" cname = '\"..self.cname..\"',\")\r\n print(ident..\" lname = '\"..self.lname..\"',\")\r\n print(ident..\" args = {\")\r\n local i=1\r\n while self.args[i] do\r\n  self.args[i]:print(ident..\"  \",\",\")\r\n  i = i+1\r\n end\r\n print(ident..\" }\")\r\n print(ident..\"}\"..close)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "print(ident..\"Operator{\")",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "print(ident..\" kind  = '\"..self.kind..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "print(ident..\" mod  = '\"..self.mod..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "print(ident..\" type = '\"..self.type..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "print(ident..\" ptr  = '\"..self.ptr..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "print(ident..\" name = '\"..self.name..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "print(ident..\" const = '\"..self.const..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "print(ident..\" cname = '\"..self.cname..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "print(ident..\" lname = '\"..self.lname..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "print(ident..\" args = {\")",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "local i=1",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "while self.args[i] do\r\n  self.args[i]:print(ident..\"  \",\",\")\r\n  i = i+1\r\n end",
    "type": "statement:while"
  }, {
    "id": 15,
    "text": "self.args[i]:print(ident..\"  \",\",\")",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "i = i+1",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "print(ident..\" }\")",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "print(ident..\"}\"..close)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function _Operator (t)\r\n setmetatable(t,classOperator)\r\n\r\n if t.const ~= 'const' and t.const ~= '' then\r\n  error(\"#invalid 'const' specification\")\r\n end\r\n\r\n append(t)\r\n if not t:inclass() then\r\n  error(\"#operator can only be defined as class member\")\r\n end\r\n\r\n t.name = t.name .. \"_\" .. _TM[t.kind]\r\n t.cname = t:cfuncname(\"tolua\")..t:overload(t)\r\n t.name = \"operator\" .. t.kind  -- set appropriate calling name\r\n return t\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "setmetatable(t,classOperator)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "if t.const ~= 'const' and t.const ~= '' then\r\n  error(\"#invalid 'const' specification\")\r\n end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "error(\"#invalid 'const' specification\")",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "append(t)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "if not t:inclass() then\r\n  error(\"#operator can only be defined as class member\")\r\n end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "error(\"#operator can only be defined as class member\")",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "t.name = t.name .. \"_\" .. _TM[t.kind]",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "t.cname = t:cfuncname(\"tolua\")..t:overload(t)",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "t.name = \"operator\" .. t.kind",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function Operator (d,k,a,c)\r\n\tlocal ref = ''\r\n local t = split(strsub(a,2,strlen(a)-1),',') -- eliminate braces\r\n local i=1\r\n local l = {n=0}\r\n while t[i] do\r\n  l.n = l.n+1\r\n  l[l.n] = Declaration(t[i],'var')\r\n  i = i+1\r\n end\r\n if k == '[]' then\r\n\t local _\r\n\t _, _, ref = strfind(d,'(&)')\r\n  d = gsub(d,'&','')\r\n elseif k=='&[]' then\r\n  l.n = l.n+1\r\n  l[l.n] = Declaration(d,'var')\r\n  l[l.n].name = 'tolua_value'\r\n end\r\n local f = Declaration(d,'func')\r\n if k == '[]' and (l[1]==nil or isbasic(l[1].type)~='number') then\r\n  error('operator[] can only be defined for numeric index.')\r\n end\r\n f.args = l\r\n f.const = c\r\n f.kind = gsub(k,\"%s\",\"\")\r\n if not _TM[f.kind] then\r\n  error(\"tolua: no support for operator\" .. f.kind)\r\n end\r\n f.lname = \".\".._TM[f.kind]\r\n if f.kind == '[]' and ref=='&' and f.const~='const' then\r\n  Operator(d,'&'..k,a,c) \t-- create correspoding set operator\r\n end\r\n return _Operator(f)\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "local ref = ''",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "local t = split(strsub(a,2,strlen(a)-1),',')",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "local l = {n=0}",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "while t[i] do\r\n  l.n = l.n+1\r\n  l[l.n] = Declaration(t[i],'var')\r\n  i = i+1\r\n end",
    "type": "statement:while"
  }, {
    "id": 37,
    "text": "l.n = l.n+1",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "l[l.n] = Declaration(t[i],'var')",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "if k == '[]' then\r\n\t local _\r\n\t _, _, ref = strfind(d,'(&)')\r\n  d = gsub(d,'&','')\r\n elseif k=='&[]' then\r\n  l.n = l.n+1\r\n  l[l.n] = Declaration(d,'var')\r\n  l[l.n].name = 'tolua_value'\r\n end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "local _",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "_, _, ref = strfind(d,'(&)')",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "d = gsub(d,'&','')",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "l[l.n] = Declaration(d,'var')",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "l[l.n].name = 'tolua_value'",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "local f = Declaration(d,'func')",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "if k == '[]' and (l[1]==nil or isbasic(l[1].type)~='number') then\r\n  error('operator[] can only be defined for numeric index.')\r\n end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "error('operator[] can only be defined for numeric index.')",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "f.args = l",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "f.const = c",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "f.kind = gsub(k,\"%s\",\"\")",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "if not _TM[f.kind] then\r\n  error(\"tolua: no support for operator\" .. f.kind)\r\n end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "error(\"tolua: no support for operator\" .. f.kind)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "f.lname = \".\".._TM[f.kind]",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "if f.kind == '[]' and ref=='&' and f.const~='const' then\r\n  Operator(d,'&'..k,a,c) \t-- create correspoding set operator\r\n end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "Operator(d,'&'..k,a,c)",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "",
    "type": "function container"
  }, {
    "id": 58,
    "text": "append",
    "type": "global function"
  }, {
    "id": 59,
    "text": "strsub",
    "type": "global function"
  }, {
    "id": 60,
    "text": "strlen",
    "type": "global function"
  }, {
    "id": 61,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 62,
    "text": "split",
    "type": "global function"
  }, {
    "id": 63,
    "text": "strfind",
    "type": "global function"
  }, {
    "id": 64,
    "text": "error",
    "type": "global function"
  }, {
    "id": 65,
    "text": "Declaration",
    "type": "global function"
  }, {
    "id": 66,
    "text": "isbasic",
    "type": "global function"
  }, {
    "id": 67,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 68,
    "text": "print",
    "type": "global function"
  }, {
    "id": 69,
    "text": "",
    "type": "variable container"
  }, {
    "id": 70,
    "text": "",
    "type": "require container"
  }, {
    "id": 71,
    "text": "",
    "type": "global variable"
  }, {
    "id": 72,
    "text": "",
    "type": "n/a"
  }, {
    "id": 73,
    "text": "",
    "type": "global variable"
  }, {
    "id": 74,
    "text": "",
    "type": "n/a"
  }, {
    "id": 75,
    "text": "",
    "type": "global variable"
  }, {
    "id": 76,
    "text": "",
    "type": "n/a"
  } ]
}