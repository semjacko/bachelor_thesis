{
  "_filename": "dissector.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-zmq/ws/dissector.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 3
  }, {
    "from": 9,
    "label": "has",
    "to": 4
  }, {
    "from": 9,
    "label": "has",
    "to": 5
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 18,
    "label": "has",
    "to": 24
  }, {
    "from": 13,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 13,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 13,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 4
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 32,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 4
  }, {
    "from": 32,
    "label": "has",
    "to": 37
  }, {
    "from": 32,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 32,
    "label": "has",
    "to": 44
  }, {
    "from": 32,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 32,
    "label": "has",
    "to": 48
  }, {
    "from": 32,
    "label": "has",
    "to": 49
  }, {
    "from": 32,
    "label": "has",
    "to": 4
  }, {
    "from": 32,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 4
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 53,
    "label": "has",
    "to": 56
  }, {
    "from": 53,
    "label": "has",
    "to": 57
  }, {
    "from": 53,
    "label": "has",
    "to": 58
  }, {
    "from": 53,
    "label": "has",
    "to": 59
  }, {
    "from": 53,
    "label": "has",
    "to": 60
  }, {
    "from": 53,
    "label": "has",
    "to": 61
  }, {
    "from": 53,
    "label": "has",
    "to": 62
  }, {
    "from": 53,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 63,
    "label": "has",
    "to": 66
  }, {
    "from": 63,
    "label": "has",
    "to": 67
  }, {
    "from": 63,
    "label": "has",
    "to": 61
  }, {
    "from": 63,
    "label": "has",
    "to": 68
  }, {
    "from": 63,
    "label": "has",
    "to": 69
  }, {
    "from": 63,
    "label": "has",
    "to": 70
  }, {
    "from": 63,
    "label": "has",
    "to": 71
  }, {
    "from": 53,
    "label": "has",
    "to": 72
  }, {
    "from": 53,
    "label": "has",
    "to": 73
  }, {
    "from": 53,
    "label": "has",
    "to": 74
  }, {
    "from": 53,
    "label": "has",
    "to": 75
  }, {
    "from": 53,
    "label": "has",
    "to": 76
  }, {
    "from": 53,
    "label": "has",
    "to": 77
  }, {
    "from": 53,
    "label": "has",
    "to": 78
  }, {
    "from": 53,
    "label": "has",
    "to": 62
  }, {
    "from": 53,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 81
  }, {
    "from": 53,
    "label": "has",
    "to": 82
  }, {
    "from": 53,
    "label": "has",
    "to": 83
  }, {
    "from": 53,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 84,
    "label": "has",
    "to": 87
  }, {
    "from": 84,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 84,
    "label": "has",
    "to": 91
  }, {
    "from": 53,
    "label": "has",
    "to": 92
  }, {
    "from": 53,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 94,
    "label": "has",
    "to": 96
  }, {
    "from": 93,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 53,
    "label": "has",
    "to": 100
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 101,
    "label": "has",
    "to": 103
  }, {
    "from": 101,
    "label": "has",
    "to": 104
  }, {
    "from": 101,
    "label": "has",
    "to": 105
  }, {
    "from": 101,
    "label": "has",
    "to": 106
  }, {
    "from": 101,
    "label": "has",
    "to": 107
  }, {
    "from": 101,
    "label": "has",
    "to": 108
  }, {
    "from": 101,
    "label": "has",
    "to": 109
  }, {
    "from": 101,
    "label": "has",
    "to": 110
  }, {
    "from": 101,
    "label": "has",
    "to": 111
  }, {
    "from": 101,
    "label": "has",
    "to": 112
  }, {
    "from": 101,
    "label": "has",
    "to": 113
  }, {
    "from": 101,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 114,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 116,
    "label": "has",
    "to": 118
  }, {
    "from": 114,
    "label": "has",
    "to": 119
  }, {
    "from": 114,
    "label": "has",
    "to": 120
  }, {
    "from": 114,
    "label": "has",
    "to": 121
  }, {
    "from": 114,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 117
  }, {
    "from": 123,
    "label": "has",
    "to": 118
  }, {
    "from": 122,
    "label": "has",
    "to": 124
  }, {
    "from": 122,
    "label": "has",
    "to": 125
  }, {
    "from": 122,
    "label": "has",
    "to": 126
  }, {
    "from": 114,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 127,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 129,
    "label": "has",
    "to": 131
  }, {
    "from": 114,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 117
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 114,
    "label": "has",
    "to": 134
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 114,
    "label": "has",
    "to": 136
  }, {
    "from": 114,
    "label": "has",
    "to": 137
  }, {
    "from": 114,
    "label": "has",
    "to": 138
  }, {
    "from": 114,
    "label": "has",
    "to": 139
  }, {
    "from": 114,
    "label": "has",
    "to": 140
  }, {
    "from": 114,
    "label": "has",
    "to": 141
  }, {
    "from": 114,
    "label": "has",
    "to": 142
  }, {
    "from": 101,
    "label": "has",
    "to": 143
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 101,
    "label": "has",
    "to": 145
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 145,
    "label": "has",
    "to": 147
  }, {
    "from": 101,
    "label": "has",
    "to": 148
  }, {
    "from": 101,
    "label": "has",
    "to": 149
  }, {
    "from": 101,
    "label": "has",
    "to": 150
  }, {
    "from": 53,
    "label": "calls",
    "to": 163
  }, {
    "from": 53,
    "label": "calls",
    "to": 163
  }, {
    "from": 53,
    "label": "calls",
    "to": 163
  }, {
    "from": 53,
    "label": "calls",
    "to": 163
  }, {
    "from": 53,
    "label": "calls",
    "to": 163
  }, {
    "from": 53,
    "label": "calls",
    "to": 163
  }, {
    "from": 53,
    "label": "calls",
    "to": 163
  }, {
    "from": 53,
    "label": "calls",
    "to": 163
  }, {
    "from": 101,
    "label": "calls",
    "to": 163
  }, {
    "from": 101,
    "label": "calls",
    "to": 163
  }, {
    "from": 2,
    "label": "calls",
    "to": 158
  }, {
    "from": 9,
    "label": "calls",
    "to": 158
  }, {
    "from": 32,
    "label": "calls",
    "to": 152
  }, {
    "from": 13,
    "label": "calls",
    "to": 159
  }, {
    "from": 32,
    "label": "calls",
    "to": 159
  }, {
    "from": 53,
    "label": "calls",
    "to": 153
  }, {
    "from": 53,
    "label": "calls",
    "to": 153
  }, {
    "from": 101,
    "label": "calls",
    "to": 153
  }, {
    "from": 13,
    "label": "calls",
    "to": 154
  }, {
    "from": 13,
    "label": "calls",
    "to": 154
  }, {
    "from": 13,
    "label": "calls",
    "to": 154
  }, {
    "from": 13,
    "label": "calls",
    "to": 154
  }, {
    "from": 53,
    "label": "calls",
    "to": 154
  }, {
    "from": 101,
    "label": "calls",
    "to": 154
  }, {
    "from": 151,
    "label": "calls",
    "to": 155
  }, {
    "from": 151,
    "label": "calls",
    "to": 155
  }, {
    "from": 151,
    "label": "calls",
    "to": 32
  }, {
    "from": 32,
    "label": "calls",
    "to": 156
  }, {
    "from": 151,
    "label": "calls",
    "to": 162
  }, {
    "from": 53,
    "label": "calls",
    "to": 157
  }, {
    "from": 53,
    "label": "calls",
    "to": 157
  }, {
    "from": 53,
    "label": "calls",
    "to": 157
  }, {
    "from": 53,
    "label": "calls",
    "to": 157
  }, {
    "from": 53,
    "label": "calls",
    "to": 157
  }, {
    "from": 151,
    "label": "calls",
    "to": 161
  }, {
    "from": 151,
    "label": "calls",
    "to": 161
  }, {
    "from": 151,
    "label": "calls",
    "to": 161
  }, {
    "from": 151,
    "label": "calls",
    "to": 161
  }, {
    "from": 151,
    "label": "calls",
    "to": 161
  }, {
    "from": 151,
    "label": "calls",
    "to": 161
  }, {
    "from": 151,
    "label": "calls",
    "to": 161
  }, {
    "from": 101,
    "label": "calls",
    "to": 53
  }, {
    "from": 53,
    "label": "calls",
    "to": 30
  }, {
    "from": 101,
    "label": "calls",
    "to": 164
  }, {
    "from": 101,
    "label": "calls",
    "to": 164
  }, {
    "from": 101,
    "label": "calls",
    "to": 164
  }, {
    "from": 101,
    "label": "calls",
    "to": 164
  }, {
    "from": 32,
    "label": "calls",
    "to": 160
  }, {
    "from": 13,
    "label": "calls",
    "to": 2
  }, {
    "from": 13,
    "label": "calls",
    "to": 9
  }, {
    "from": 151,
    "label": "calls",
    "to": 9
  }, {
    "from": 1,
    "label": "contains",
    "to": 151
  }, {
    "from": 151,
    "label": "declares",
    "to": 2
  }, {
    "from": 151,
    "label": "declares",
    "to": 9
  }, {
    "from": 151,
    "label": "declares",
    "to": 13
  }, {
    "from": 151,
    "label": "declares",
    "to": 30
  }, {
    "from": 151,
    "label": "declares",
    "to": 32
  }, {
    "from": 151,
    "label": "declares",
    "to": 51
  }, {
    "from": 151,
    "label": "declares",
    "to": 53
  }, {
    "from": 151,
    "label": "declares",
    "to": 101
  }, {
    "from": 1,
    "label": "contains",
    "to": 165
  }, {
    "from": 1,
    "label": "contains",
    "to": 166
  }, {
    "from": 165,
    "label": "initializes",
    "to": 167
  }, {
    "from": 167,
    "label": "assigns",
    "to": 168
  }, {
    "from": 165,
    "label": "initializes",
    "to": 169
  }, {
    "from": 169,
    "label": "assigns",
    "to": 170
  }, {
    "from": 165,
    "label": "initializes",
    "to": 171
  }, {
    "from": 171,
    "label": "assigns",
    "to": 172
  }, {
    "from": 165,
    "label": "initializes",
    "to": 173
  }, {
    "from": 173,
    "label": "assigns",
    "to": 174
  }, {
    "from": 165,
    "label": "initializes",
    "to": 175
  }, {
    "from": 175,
    "label": "assigns",
    "to": 176
  }, {
    "from": 165,
    "label": "initializes",
    "to": 177
  }, {
    "from": 177,
    "label": "assigns",
    "to": 178
  }, {
    "from": 165,
    "label": "initializes",
    "to": 179
  }, {
    "from": 179,
    "label": "assigns",
    "to": 180
  }, {
    "from": 165,
    "label": "initializes",
    "to": 181
  }, {
    "from": 181,
    "label": "assigns",
    "to": 182
  }, {
    "from": 165,
    "label": "initializes",
    "to": 183
  }, {
    "from": 183,
    "label": "assigns",
    "to": 184
  }, {
    "from": 165,
    "label": "initializes",
    "to": 185
  }, {
    "from": 185,
    "label": "assigns",
    "to": 186
  }, {
    "from": 165,
    "label": "initializes",
    "to": 187
  }, {
    "from": 187,
    "label": "assigns",
    "to": 188
  }, {
    "from": 165,
    "label": "initializes",
    "to": 189
  }, {
    "from": 189,
    "label": "assigns",
    "to": 190
  }, {
    "from": 165,
    "label": "initializes",
    "to": 191
  }, {
    "from": 191,
    "label": "assigns",
    "to": 192
  }, {
    "from": 165,
    "label": "initializes",
    "to": 193
  }, {
    "from": 193,
    "label": "assigns",
    "to": 194
  }, {
    "from": 194,
    "label": "assigns",
    "to": 195
  }, {
    "from": 195,
    "label": "assigns",
    "to": 196
  }, {
    "from": 194,
    "label": "assigns",
    "to": 197
  }, {
    "from": 197,
    "label": "assigns",
    "to": 198
  }, {
    "from": 165,
    "label": "initializes",
    "to": 199
  }, {
    "from": 199,
    "label": "assigns",
    "to": 200
  }, {
    "from": 165,
    "label": "initializes",
    "to": 201
  }, {
    "from": 201,
    "label": "assigns",
    "to": 202
  }, {
    "from": 202,
    "label": "assigns",
    "to": 203
  }, {
    "from": 203,
    "label": "assigns",
    "to": 204
  }, {
    "from": 202,
    "label": "assigns",
    "to": 205
  }, {
    "from": 205,
    "label": "assigns",
    "to": 206
  }, {
    "from": 165,
    "label": "initializes",
    "to": 207
  }, {
    "from": 207,
    "label": "assigns",
    "to": 208
  }, {
    "from": 208,
    "label": "assigns",
    "to": 209
  }, {
    "from": 165,
    "label": "initializes",
    "to": 210
  }, {
    "from": 210,
    "label": "assigns",
    "to": 211
  }, {
    "from": 165,
    "label": "initializes",
    "to": 212
  }, {
    "from": 212,
    "label": "assigns",
    "to": 213
  }, {
    "from": 213,
    "label": "assigns",
    "to": 214
  }, {
    "from": 213,
    "label": "assigns",
    "to": 215
  }, {
    "from": 213,
    "label": "assigns",
    "to": 216
  }, {
    "from": 213,
    "label": "assigns",
    "to": 217
  }, {
    "from": 165,
    "label": "initializes",
    "to": 218
  }, {
    "from": 218,
    "label": "assigns",
    "to": 219
  }, {
    "from": 165,
    "label": "initializes",
    "to": 220
  }, {
    "from": 220,
    "label": "assigns",
    "to": 221
  }, {
    "from": 165,
    "label": "initializes",
    "to": 222
  }, {
    "from": 222,
    "label": "assigns",
    "to": 223
  }, {
    "from": 165,
    "label": "initializes",
    "to": 224
  }, {
    "from": 224,
    "label": "assigns",
    "to": 225
  }, {
    "from": 165,
    "label": "initializes",
    "to": 226
  }, {
    "from": 226,
    "label": "assigns",
    "to": 227
  }, {
    "from": 165,
    "label": "initializes",
    "to": 228
  }, {
    "from": 228,
    "label": "assigns",
    "to": 229
  }, {
    "from": 165,
    "label": "initializes",
    "to": 230
  }, {
    "from": 230,
    "label": "assigns",
    "to": 231
  }, {
    "from": 165,
    "label": "initializes",
    "to": 232
  }, {
    "from": 232,
    "label": "assigns",
    "to": 233
  }, {
    "from": 165,
    "label": "initializes",
    "to": 234
  }, {
    "from": 234,
    "label": "assigns",
    "to": 235
  }, {
    "from": 165,
    "label": "initializes",
    "to": 236
  }, {
    "from": 236,
    "label": "assigns",
    "to": 237
  }, {
    "from": 165,
    "label": "initializes",
    "to": 238
  }, {
    "from": 238,
    "label": "assigns",
    "to": 239
  }, {
    "from": 165,
    "label": "initializes",
    "to": 240
  }, {
    "from": 240,
    "label": "assigns",
    "to": 241
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "dissector",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function unregister_tcp_port_range(start_port, end_port)\r\n\tif not start_port or start_port <= 0 or not end_port or end_port <= 0 then\r\n\t\treturn\r\n\tend\r\n\tlocal tcp_port_table = DissectorTable.get(\"tcp.port\")\r\n\tfor port = start_port,end_port do\r\n\t\ttcp_port_table:remove(port,zmq_proto)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "if not start_port or start_port <= 0 or not end_port or end_port <= 0 then\r\n\t\treturn\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "local tcp_port_table = DissectorTable.get(\"tcp.port\")",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "for port = start_port,end_port do\r\n\t\ttcp_port_table:remove(port,zmq_proto)\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 7,
    "text": "tcp_port_table:remove(port,zmq_proto)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "local function register_tcp_port_range(start_port, end_port)\r\n\tif not start_port or start_port <= 0 or not end_port or end_port <= 0 then\r\n\t\treturn\r\n\tend\r\n\tlocal tcp_port_table = DissectorTable.get(\"tcp.port\")\r\n\tfor port = start_port,end_port do\r\n\t\ttcp_port_table:add(port,zmq_proto)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "for port = start_port,end_port do\r\n\t\ttcp_port_table:add(port,zmq_proto)\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 11,
    "text": "tcp_port_table:add(port,zmq_proto)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function zmq_proto.init(arg1, arg2)\r\n\tlocal old_start, old_end\r\n\tlocal new_start, new_end\r\n\t-- check if preferences have changed.\r\n\tfor pref_name,old_v in pairs(current_settings) do\r\n\t\tlocal new_v = zmq_proto.prefs[pref_name]\r\n\t\tif new_v ~= old_v then\r\n\t\t\tif pref_name == \"tcp_port_start\" then\r\n\t\t\t\told_start = old_v\r\n\t\t\t\tnew_start = new_v\r\n\t\t\telseif pref_name == \"tcp_port_end\" then\r\n\t\t\t\told_end = old_v\r\n\t\t\t\tnew_end = new_v\r\n\t\t\tend\r\n\t\t\t-- save new value.\r\n\t\t\tcurrent_settings[pref_name] = new_v\r\n\t\tend\r\n\tend\r\n\t-- un-register old port range\r\n\tif old_start and old_end then\r\n\t\tunregister_tcp_port_range(tonumber(old_start), tonumber(old_end))\r\n\tend\r\n\t-- register new port range.\r\n\tif new_start and new_end then\r\n\t\tregister_tcp_port_range(tonumber(new_start), tonumber(new_end))\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "local old_start, old_end",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "local new_start, new_end",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "for pref_name,old_v in pairs(current_settings) do\r\n\t\tlocal new_v = zmq_proto.prefs[pref_name]\r\n\t\tif new_v ~= old_v then\r\n\t\t\tif pref_name == \"tcp_port_start\" then\r\n\t\t\t\told_start = old_v\r\n\t\t\t\tnew_start = new_v\r\n\t\t\telseif pref_name == \"tcp_port_end\" then\r\n\t\t\t\told_end = old_v\r\n\t\t\t\tnew_end = new_v\r\n\t\t\tend\r\n\t\t\t-- save new value.\r\n\t\t\tcurrent_settings[pref_name] = new_v\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 17,
    "text": "local new_v = zmq_proto.prefs[pref_name]",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "if new_v ~= old_v then\r\n\t\t\tif pref_name == \"tcp_port_start\" then\r\n\t\t\t\told_start = old_v\r\n\t\t\t\tnew_start = new_v\r\n\t\t\telseif pref_name == \"tcp_port_end\" then\r\n\t\t\t\told_end = old_v\r\n\t\t\t\tnew_end = new_v\r\n\t\t\tend\r\n\t\t\t-- save new value.\r\n\t\t\tcurrent_settings[pref_name] = new_v\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "if pref_name == \"tcp_port_start\" then\r\n\t\t\t\told_start = old_v\r\n\t\t\t\tnew_start = new_v\r\n\t\t\telseif pref_name == \"tcp_port_end\" then\r\n\t\t\t\told_end = old_v\r\n\t\t\t\tnew_end = new_v\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "old_start = old_v",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "new_start = new_v",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "old_end = old_v",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "new_end = new_v",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "current_settings[pref_name] = new_v",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "if old_start and old_end then\r\n\t\tunregister_tcp_port_range(tonumber(old_start), tonumber(old_end))\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "unregister_tcp_port_range(tonumber(old_start), tonumber(old_end))",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "if new_start and new_end then\r\n\t\tregister_tcp_port_range(tonumber(new_start), tonumber(new_end))\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "register_tcp_port_range(tonumber(new_start), tonumber(new_end))",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "local function parse_flags(flags)\r\n\treturn bits_lookup[flags] or bits_lookup[1]\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "local function make_bits(bits)\r\n\tlocal proxy = newproxy(true)\r\n\tlocal meta = getmetatable(proxy)\r\n\tmeta.__index = bits\r\n\tmeta.__tostring = function()\r\n\t\treturn bits.flags\r\n\tend\r\n\t-- combind bits into string description.\r\n\tlocal flags = nil\r\n\tfor i=1,#flag_names do\r\n\t\tlocal name = flag_names[i]\r\n\t\tif bits[name] then\r\n\t\t\tif flags then\r\n\t\t\t\tflags = flags .. ',' .. name\r\n\t\t\telse\r\n\t\t\t\tflags = name\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\t-- combind bits into one byte value.\r\n\tlocal byte = 0x00\r\n\tfor k,v in pairs(bits) do\r\n\t\tlocal bit = assert(BITS[k], \"Invalid bit name.\")\r\n\t\tbyte = byte + BITS[k]\r\n\tend\r\n\tbits.flags = flags or ''\r\n\tbits.byte = byte\r\n\treturn proxy\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "local proxy = newproxy(true)",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "local meta = getmetatable(proxy)",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "meta.__index = bits",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "meta.__tostring = function()\r\n\t\treturn bits.flags\r\n\tend",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "local flags = nil",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "for i=1,#flag_names do\r\n\t\tlocal name = flag_names[i]\r\n\t\tif bits[name] then\r\n\t\t\tif flags then\r\n\t\t\t\tflags = flags .. ',' .. name\r\n\t\t\telse\r\n\t\t\t\tflags = name\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 39,
    "text": "local name = flag_names[i]",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "if bits[name] then\r\n\t\t\tif flags then\r\n\t\t\t\tflags = flags .. ',' .. name\r\n\t\t\telse\r\n\t\t\t\tflags = name\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "if flags then\r\n\t\t\t\tflags = flags .. ',' .. name\r\n\t\t\telse\r\n\t\t\t\tflags = name\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "flags = flags .. ',' .. name",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "flags = name",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "local byte = 0x00",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "for k,v in pairs(bits) do\r\n\t\tlocal bit = assert(BITS[k], \"Invalid bit name.\")\r\n\t\tbyte = byte + BITS[k]\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 46,
    "text": "local bit = assert(BITS[k], \"Invalid bit name.\")",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "byte = byte + BITS[k]",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "bits.flags = flags or ''",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "bits.byte = byte",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "function()\r\n\t\treturn bits.flags\r\n\tend",
    "type": "function"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "local function zmq_dissect_frame(buffer, pinfo, frame_tree, tap)\r\n\tlocal rang,offset\r\n\t-- Frame length\r\n\toffset = 0\r\n\tlocal len_off = offset\r\n\tlocal len8_rang = buffer(offset,1)\r\n\tlocal len_rang = len8_rang\r\n\tlocal frame_len = len8_rang:uint()\r\n\t\t-- 8bit length field\r\n\tlocal ti = frame_tree:add(fds.length8, len8_rang)\r\n\tti:set_hidden()\r\n\toffset = offset + 1\r\n\tif frame_len == 255 then\r\n\t\tlocal len64_rang = buffer(offset, 8)\r\n\t\tlen_rang = buffer(len_off, 9)\r\n\t\tframe_len = tonumber(tostring(len64_rang:uint64()))\r\n\t\t-- 64bit length field.\r\n\t\tlocal ti = frame_tree:add(fds.length64, len64_rang)\r\n\t\tti:set_hidden()\r\n\t\toffset = offset + 8\r\n\t\tlocal ti = frame_tree:add(fds.length, len_rang)\r\n\t\tti:set_text(format(\"Frame Length: %d\", frame_length))\r\n\telse\r\n\t\tframe_tree:add(fds.length, len_rang)\r\n\tend\r\n\t-- Frame flags\r\n\trang = buffer(offset,1)\r\n\tlocal flags = rang:uint()\r\n\tlocal flags_bits = parse_flags(flags)\r\n\tlocal flags_list = flags_bits.flags\r\n\tlocal flags_tree = frame_tree:add(fds.flags, rang)\r\n\tflags_tree:set_text(format('Flags: 0x%02X (%s)', flags, flags_list))\r\n\tflags_tree:add(fds.flags_more, rang)\r\n\toffset = offset + 1\r\n\tif flags_bits.MORE then\r\n\t\ttap.more = tap.more + 1\r\n\telse\r\n\t\t-- if the 'more' flag is not set then this is the last frame in a message.\r\n\t\ttap.msgs = tap.msgs + 1\r\n\tend\r\n\t-- Frame body\r\n\tlocal body_len = frame_len - 1\r\n\tlocal body = ''\r\n\tif body_len > 0 then\r\n\t\ttap.body_bytes = tap.body_bytes + body_len\r\n\t\trang = buffer(offset, body_len)\r\n\t\tlocal ti = frame_tree:add_le(fds.body, rang)\r\n\t\tif body_len <= 4 then\r\n\t\t\tbody = format(\"%08x\", rang:uint())\r\n\t\telse\r\n\t\t\tbody = tostring(rang)\r\n\t\tend\r\n\t\tti:set_text(format(\"%s\", body))\r\n\tend\r\n\toffset = offset + body_len\r\n\t-- frame summary\r\n\tif body_len > 0 then\r\n\t\tif flags_bits.MORE then\r\n\t\t\tframe_tree:set_text(format(\"Frame: [MORE] Body[%u]=%s\", body_len, body))\r\n\t\telse\r\n\t\t\tframe_tree:set_text(format(\"Frame: Body[%u]=%s\", body_len, body))\r\n\t\tend\r\n\telse\r\n\t\tif flags_bits.MORE then\r\n\t\t\tframe_tree:set_text(format(\"Frame: [MORE] No data\"))\r\n\t\telse\r\n\t\t\tframe_tree:set_text(format(\"Frame: No data\"))\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "local rang,offset",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "offset = 0",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "local len_off = offset",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "local len8_rang = buffer(offset,1)",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "local len_rang = len8_rang",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "local frame_len = len8_rang:uint()",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "local ti = frame_tree:add(fds.length8, len8_rang)",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "ti:set_hidden()",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "offset = offset + 1",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "if frame_len == 255 then\r\n\t\tlocal len64_rang = buffer(offset, 8)\r\n\t\tlen_rang = buffer(len_off, 9)\r\n\t\tframe_len = tonumber(tostring(len64_rang:uint64()))\r\n\t\t-- 64bit length field.\r\n\t\tlocal ti = frame_tree:add(fds.length64, len64_rang)\r\n\t\tti:set_hidden()\r\n\t\toffset = offset + 8\r\n\t\tlocal ti = frame_tree:add(fds.length, len_rang)\r\n\t\tti:set_text(format(\"Frame Length: %d\", frame_length))\r\n\telse\r\n\t\tframe_tree:add(fds.length, len_rang)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "local len64_rang = buffer(offset, 8)",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "len_rang = buffer(len_off, 9)",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "frame_len = tonumber(tostring(len64_rang:uint64()))",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "local ti = frame_tree:add(fds.length64, len64_rang)",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "offset = offset + 8",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "local ti = frame_tree:add(fds.length, len_rang)",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "ti:set_text(format(\"Frame Length: %d\", frame_length))",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "frame_tree:add(fds.length, len_rang)",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "rang = buffer(offset,1)",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "local flags = rang:uint()",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "local flags_bits = parse_flags(flags)",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "local flags_list = flags_bits.flags",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "local flags_tree = frame_tree:add(fds.flags, rang)",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "flags_tree:set_text(format('Flags: 0x%02X (%s)', flags, flags_list))",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "flags_tree:add(fds.flags_more, rang)",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "if flags_bits.MORE then\r\n\t\ttap.more = tap.more + 1\r\n\telse\r\n\t\t-- if the 'more' flag is not set then this is the last frame in a message.\r\n\t\ttap.msgs = tap.msgs + 1\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 80,
    "text": "tap.more = tap.more + 1",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "tap.msgs = tap.msgs + 1",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "local body_len = frame_len - 1",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "local body = ''",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "if body_len > 0 then\r\n\t\ttap.body_bytes = tap.body_bytes + body_len\r\n\t\trang = buffer(offset, body_len)\r\n\t\tlocal ti = frame_tree:add_le(fds.body, rang)\r\n\t\tif body_len <= 4 then\r\n\t\t\tbody = format(\"%08x\", rang:uint())\r\n\t\telse\r\n\t\t\tbody = tostring(rang)\r\n\t\tend\r\n\t\tti:set_text(format(\"%s\", body))\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 85,
    "text": "tap.body_bytes = tap.body_bytes + body_len",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "rang = buffer(offset, body_len)",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "local ti = frame_tree:add_le(fds.body, rang)",
    "type": "statement:localassign"
  }, {
    "id": 88,
    "text": "if body_len <= 4 then\r\n\t\t\tbody = format(\"%08x\", rang:uint())\r\n\t\telse\r\n\t\t\tbody = tostring(rang)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 89,
    "text": "body = format(\"%08x\", rang:uint())",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "body = tostring(rang)",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "ti:set_text(format(\"%s\", body))",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "offset = offset + body_len",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "if body_len > 0 then\r\n\t\tif flags_bits.MORE then\r\n\t\t\tframe_tree:set_text(format(\"Frame: [MORE] Body[%u]=%s\", body_len, body))\r\n\t\telse\r\n\t\t\tframe_tree:set_text(format(\"Frame: Body[%u]=%s\", body_len, body))\r\n\t\tend\r\n\telse\r\n\t\tif flags_bits.MORE then\r\n\t\t\tframe_tree:set_text(format(\"Frame: [MORE] No data\"))\r\n\t\telse\r\n\t\t\tframe_tree:set_text(format(\"Frame: No data\"))\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 94,
    "text": "if flags_bits.MORE then\r\n\t\t\tframe_tree:set_text(format(\"Frame: [MORE] Body[%u]=%s\", body_len, body))\r\n\t\telse\r\n\t\t\tframe_tree:set_text(format(\"Frame: Body[%u]=%s\", body_len, body))\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 95,
    "text": "frame_tree:set_text(format(\"Frame: [MORE] Body[%u]=%s\", body_len, body))",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "frame_tree:set_text(format(\"Frame: Body[%u]=%s\", body_len, body))",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "if flags_bits.MORE then\r\n\t\t\tframe_tree:set_text(format(\"Frame: [MORE] No data\"))\r\n\t\telse\r\n\t\t\tframe_tree:set_text(format(\"Frame: No data\"))\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 98,
    "text": "frame_tree:set_text(format(\"Frame: [MORE] No data\"))",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "frame_tree:set_text(format(\"Frame: No data\"))",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 101,
    "text": "function zmq_proto.dissector(tvb,pinfo,tree)\r\n\tlocal offset = 0\r\n\tlocal tvb_length = tvb:len()\r\n\tlocal reported_length = tvb:reported_len()\r\n\tlocal length_remaining\r\n\tlocal zmq_tree\r\n\tlocal rang\r\n\tlocal frames = 0\r\n\tlocal tap = {}\r\n\r\n\ttap.frames = 0\r\n\ttap.msgs = 0\r\n\ttap.more = 0\r\n\ttap.body_bytes = 0\r\n\r\n\twhile(offset < reported_length and offset < tvb_length) do\r\n\t\tlength_remaining = tvb_length - offset\r\n\t\t-- check for fixed part of PDU\r\n\t\tif length_remaining < 2 then\r\n\t\t\tpinfo.desegment_offset = offset\r\n\t\t\tpinfo.desegment_len = DESEGMENT_ONE_MORE_SEGMENT\r\n\t\t\tbreak\r\n\t\tend\r\n\t\t-- decode frame length\r\n\t\t\t-- decode single byte frame length\r\n\t\trang = tvb(offset, 1)\r\n\t\tlocal frame_len = rang:le_uint()\r\n\t\tlocal pdu_len = frame_len + 1\r\n\t\tif frame_len == 255 then\r\n\t\t\t-- make sure there is enough bytes\r\n\t\t\tif length_remaining < 10 then\r\n\t\t\t\tpinfo.desegment_offset = offset\r\n\t\t\t\tpinfo.desegment_len = DESEGMENT_ONE_MORE_SEGMENT\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\t\t-- decode extra long frame length.\r\n\t\t\trang = tvb(offset + 1, 8)\r\n\t\t\tframe_len = tonumber(tostring(rang:uint64()))\r\n\t\t\tpdu_len = frame_len + 9\r\n\t\tend\r\n\t\t-- provide hints to tcp\r\n\t\tif not pinfo.visited then\r\n\t\t\tlocal remaining_bytes = reported_length - offset\r\n\t\t\tif pdu_len > remaining_bytes then\r\n\t\t\t\tpinfo.want_pdu_tracking = 2\r\n\t\t\t\tpinfo.bytes_until_next_pdu = pdu_len - remaining_bytes\r\n\t\t\tend\r\n\t\tend\r\n\t\t-- check if we need more bytes to dissect this frame.\r\n\t\tif length_remaining < pdu_len then\r\n\t\t\tpinfo.desegment_offset = offset\r\n\t\t\tpinfo.desegment_len = (pdu_len - length_remaining)\r\n\t\t\tbreak\r\n\t\tend\r\n\t\t-- dissect zmq frame\r\n\t\tif not zmq_tree then\r\n\t\t\tzmq_tree = tree:add(zmq_proto,tvb(),\"ZMQ frames\")\r\n\t\tend\r\n\t\trang = tvb(offset, pdu_len)\r\n\t\tlocal frame_tree = zmq_tree:add(fds.frame, rang)\r\n\t\tzmq_dissect_frame(rang:tvb(), pinfo, frame_tree, tap)\r\n\t\tframes = frames + 1\r\n\t\t-- step to next frame.\r\n\t\tlocal offset_before = offset\r\n\t\toffset = offset + pdu_len\r\n\t\tif offset < offset_before then break end\r\n\tend\r\n\tif zmq_tree then\r\n\t\tzmq_tree:set_text(format(\"ZMQ frames=%u\", frames))\r\n\tend\r\n\tif frames > 0 then\r\n\t\ttap.frames = frames\r\n\t\tpinfo.tap_data = tap\r\n\tend\r\n\t-- Info column\r\n\tpinfo.cols.protocol = \"ZMQ\"\r\n\tpinfo.cols.info = format('ZMQ frames=%u',frames)\r\nend",
    "type": "function"
  }, {
    "id": 102,
    "text": "local offset = 0",
    "type": "statement:localassign"
  }, {
    "id": 103,
    "text": "local tvb_length = tvb:len()",
    "type": "statement:localassign"
  }, {
    "id": 104,
    "text": "local reported_length = tvb:reported_len()",
    "type": "statement:localassign"
  }, {
    "id": 105,
    "text": "local length_remaining",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "local zmq_tree",
    "type": "statement:localassign"
  }, {
    "id": 107,
    "text": "local rang",
    "type": "statement:localassign"
  }, {
    "id": 108,
    "text": "local frames = 0",
    "type": "statement:localassign"
  }, {
    "id": 109,
    "text": "local tap = {}",
    "type": "statement:localassign"
  }, {
    "id": 110,
    "text": "tap.frames = 0",
    "type": "statement:assign"
  }, {
    "id": 111,
    "text": "tap.msgs = 0",
    "type": "statement:assign"
  }, {
    "id": 112,
    "text": "tap.more = 0",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "tap.body_bytes = 0",
    "type": "statement:assign"
  }, {
    "id": 114,
    "text": "while(offset < reported_length and offset < tvb_length) do\r\n\t\tlength_remaining = tvb_length - offset\r\n\t\t-- check for fixed part of PDU\r\n\t\tif length_remaining < 2 then\r\n\t\t\tpinfo.desegment_offset = offset\r\n\t\t\tpinfo.desegment_len = DESEGMENT_ONE_MORE_SEGMENT\r\n\t\t\tbreak\r\n\t\tend\r\n\t\t-- decode frame length\r\n\t\t\t-- decode single byte frame length\r\n\t\trang = tvb(offset, 1)\r\n\t\tlocal frame_len = rang:le_uint()\r\n\t\tlocal pdu_len = frame_len + 1\r\n\t\tif frame_len == 255 then\r\n\t\t\t-- make sure there is enough bytes\r\n\t\t\tif length_remaining < 10 then\r\n\t\t\t\tpinfo.desegment_offset = offset\r\n\t\t\t\tpinfo.desegment_len = DESEGMENT_ONE_MORE_SEGMENT\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\t\t-- decode extra long frame length.\r\n\t\t\trang = tvb(offset + 1, 8)\r\n\t\t\tframe_len = tonumber(tostring(rang:uint64()))\r\n\t\t\tpdu_len = frame_len + 9\r\n\t\tend\r\n\t\t-- provide hints to tcp\r\n\t\tif not pinfo.visited then\r\n\t\t\tlocal remaining_bytes = reported_length - offset\r\n\t\t\tif pdu_len > remaining_bytes then\r\n\t\t\t\tpinfo.want_pdu_tracking = 2\r\n\t\t\t\tpinfo.bytes_until_next_pdu = pdu_len - remaining_bytes\r\n\t\t\tend\r\n\t\tend\r\n\t\t-- check if we need more bytes to dissect this frame.\r\n\t\tif length_remaining < pdu_len then\r\n\t\t\tpinfo.desegment_offset = offset\r\n\t\t\tpinfo.desegment_len = (pdu_len - length_remaining)\r\n\t\t\tbreak\r\n\t\tend\r\n\t\t-- dissect zmq frame\r\n\t\tif not zmq_tree then\r\n\t\t\tzmq_tree = tree:add(zmq_proto,tvb(),\"ZMQ frames\")\r\n\t\tend\r\n\t\trang = tvb(offset, pdu_len)\r\n\t\tlocal frame_tree = zmq_tree:add(fds.frame, rang)\r\n\t\tzmq_dissect_frame(rang:tvb(), pinfo, frame_tree, tap)\r\n\t\tframes = frames + 1\r\n\t\t-- step to next frame.\r\n\t\tlocal offset_before = offset\r\n\t\toffset = offset + pdu_len\r\n\t\tif offset < offset_before then break end\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 115,
    "text": "length_remaining = tvb_length - offset",
    "type": "statement:assign"
  }, {
    "id": 116,
    "text": "if length_remaining < 2 then\r\n\t\t\tpinfo.desegment_offset = offset\r\n\t\t\tpinfo.desegment_len = DESEGMENT_ONE_MORE_SEGMENT\r\n\t\t\tbreak\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 117,
    "text": "pinfo.desegment_offset = offset",
    "type": "statement:assign"
  }, {
    "id": 118,
    "text": "pinfo.desegment_len = DESEGMENT_ONE_MORE_SEGMENT",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "rang = tvb(offset, 1)",
    "type": "statement:assign"
  }, {
    "id": 120,
    "text": "local frame_len = rang:le_uint()",
    "type": "statement:localassign"
  }, {
    "id": 121,
    "text": "local pdu_len = frame_len + 1",
    "type": "statement:localassign"
  }, {
    "id": 122,
    "text": "if frame_len == 255 then\r\n\t\t\t-- make sure there is enough bytes\r\n\t\t\tif length_remaining < 10 then\r\n\t\t\t\tpinfo.desegment_offset = offset\r\n\t\t\t\tpinfo.desegment_len = DESEGMENT_ONE_MORE_SEGMENT\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\t\t-- decode extra long frame length.\r\n\t\t\trang = tvb(offset + 1, 8)\r\n\t\t\tframe_len = tonumber(tostring(rang:uint64()))\r\n\t\t\tpdu_len = frame_len + 9\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 123,
    "text": "if length_remaining < 10 then\r\n\t\t\t\tpinfo.desegment_offset = offset\r\n\t\t\t\tpinfo.desegment_len = DESEGMENT_ONE_MORE_SEGMENT\r\n\t\t\t\tbreak\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 124,
    "text": "rang = tvb(offset + 1, 8)",
    "type": "statement:assign"
  }, {
    "id": 125,
    "text": "frame_len = tonumber(tostring(rang:uint64()))",
    "type": "statement:assign"
  }, {
    "id": 126,
    "text": "pdu_len = frame_len + 9",
    "type": "statement:assign"
  }, {
    "id": 127,
    "text": "if not pinfo.visited then\r\n\t\t\tlocal remaining_bytes = reported_length - offset\r\n\t\t\tif pdu_len > remaining_bytes then\r\n\t\t\t\tpinfo.want_pdu_tracking = 2\r\n\t\t\t\tpinfo.bytes_until_next_pdu = pdu_len - remaining_bytes\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 128,
    "text": "local remaining_bytes = reported_length - offset",
    "type": "statement:localassign"
  }, {
    "id": 129,
    "text": "if pdu_len > remaining_bytes then\r\n\t\t\t\tpinfo.want_pdu_tracking = 2\r\n\t\t\t\tpinfo.bytes_until_next_pdu = pdu_len - remaining_bytes\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 130,
    "text": "pinfo.want_pdu_tracking = 2",
    "type": "statement:assign"
  }, {
    "id": 131,
    "text": "pinfo.bytes_until_next_pdu = pdu_len - remaining_bytes",
    "type": "statement:assign"
  }, {
    "id": 132,
    "text": "if length_remaining < pdu_len then\r\n\t\t\tpinfo.desegment_offset = offset\r\n\t\t\tpinfo.desegment_len = (pdu_len - length_remaining)\r\n\t\t\tbreak\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 133,
    "text": "pinfo.desegment_len = (pdu_len - length_remaining)",
    "type": "statement:assign"
  }, {
    "id": 134,
    "text": "if not zmq_tree then\r\n\t\t\tzmq_tree = tree:add(zmq_proto,tvb(),\"ZMQ frames\")\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 135,
    "text": "zmq_tree = tree:add(zmq_proto,tvb(),\"ZMQ frames\")",
    "type": "statement:assign"
  }, {
    "id": 136,
    "text": "rang = tvb(offset, pdu_len)",
    "type": "statement:assign"
  }, {
    "id": 137,
    "text": "local frame_tree = zmq_tree:add(fds.frame, rang)",
    "type": "statement:localassign"
  }, {
    "id": 138,
    "text": "zmq_dissect_frame(rang:tvb(), pinfo, frame_tree, tap)",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "frames = frames + 1",
    "type": "statement:assign"
  }, {
    "id": 140,
    "text": "local offset_before = offset",
    "type": "statement:localassign"
  }, {
    "id": 141,
    "text": "offset = offset + pdu_len",
    "type": "statement:assign"
  }, {
    "id": 142,
    "text": "if offset < offset_before then break end",
    "type": "statement:if"
  }, {
    "id": 143,
    "text": "if zmq_tree then\r\n\t\tzmq_tree:set_text(format(\"ZMQ frames=%u\", frames))\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 144,
    "text": "zmq_tree:set_text(format(\"ZMQ frames=%u\", frames))",
    "type": "statement:functioncall"
  }, {
    "id": 145,
    "text": "if frames > 0 then\r\n\t\ttap.frames = frames\r\n\t\tpinfo.tap_data = tap\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 146,
    "text": "tap.frames = frames",
    "type": "statement:assign"
  }, {
    "id": 147,
    "text": "pinfo.tap_data = tap",
    "type": "statement:assign"
  }, {
    "id": 148,
    "text": "pinfo.cols.protocol = \"ZMQ\"",
    "type": "statement:assign"
  }, {
    "id": 149,
    "text": "pinfo.cols.info = format('ZMQ frames=%u',frames)",
    "type": "statement:assign"
  }, {
    "id": 150,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 151,
    "text": "",
    "type": "function container"
  }, {
    "id": 152,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 153,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 154,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 155,
    "text": "string",
    "type": "global function"
  }, {
    "id": 156,
    "text": "newproxy",
    "type": "global function"
  }, {
    "id": 157,
    "text": "buffer",
    "type": "global function"
  }, {
    "id": 158,
    "text": "get",
    "type": "global function"
  }, {
    "id": 159,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 160,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 161,
    "text": "new",
    "type": "global function"
  }, {
    "id": 162,
    "text": "Proto",
    "type": "global function"
  }, {
    "id": 163,
    "text": "format",
    "type": "global function"
  }, {
    "id": 164,
    "text": "tvb",
    "type": "global function"
  }, {
    "id": 165,
    "text": "",
    "type": "variable container"
  }, {
    "id": 166,
    "text": "",
    "type": "require container"
  }, {
    "id": 167,
    "text": "",
    "type": "local variable"
  }, {
    "id": 168,
    "text": "",
    "type": "n/a"
  }, {
    "id": 169,
    "text": "",
    "type": "local variable"
  }, {
    "id": 170,
    "text": "",
    "type": "n/a"
  }, {
    "id": 171,
    "text": "",
    "type": "local variable"
  }, {
    "id": 172,
    "text": "",
    "type": "n/a"
  }, {
    "id": 173,
    "text": "",
    "type": "local variable"
  }, {
    "id": 174,
    "text": "",
    "type": "n/a"
  }, {
    "id": 175,
    "text": "",
    "type": "local variable"
  }, {
    "id": 176,
    "text": "",
    "type": "n/a"
  }, {
    "id": 177,
    "text": "",
    "type": "local variable"
  }, {
    "id": 178,
    "text": "",
    "type": "n/a"
  }, {
    "id": 179,
    "text": "",
    "type": "local variable"
  }, {
    "id": 180,
    "text": "",
    "type": "n/a"
  }, {
    "id": 181,
    "text": "",
    "type": "local variable"
  }, {
    "id": 182,
    "text": "",
    "type": "n/a"
  }, {
    "id": 183,
    "text": "",
    "type": "local variable"
  }, {
    "id": 184,
    "text": "",
    "type": "n/a"
  }, {
    "id": 185,
    "text": "",
    "type": "local variable"
  }, {
    "id": 186,
    "text": "",
    "type": "n/a"
  }, {
    "id": 187,
    "text": "",
    "type": "local variable"
  }, {
    "id": 188,
    "text": "",
    "type": "n/a"
  }, {
    "id": 189,
    "text": "",
    "type": "local variable"
  }, {
    "id": 190,
    "text": "",
    "type": "n/a"
  }, {
    "id": 191,
    "text": "",
    "type": "local variable"
  }, {
    "id": 192,
    "text": "",
    "type": "n/a"
  }, {
    "id": 193,
    "text": "",
    "type": "local variable"
  }, {
    "id": 194,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 195,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 196,
    "text": "",
    "type": "_simpleexp"
  }, {
    "id": 197,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 198,
    "text": "",
    "type": "_simpleexp"
  }, {
    "id": 199,
    "text": "",
    "type": "local variable"
  }, {
    "id": 200,
    "text": "",
    "type": "n/a"
  }, {
    "id": 201,
    "text": "",
    "type": "local variable"
  }, {
    "id": 202,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 203,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 204,
    "text": "",
    "type": "number"
  }, {
    "id": 205,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 206,
    "text": "",
    "type": "number"
  }, {
    "id": 207,
    "text": "",
    "type": "local variable"
  }, {
    "id": 208,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 209,
    "text": "",
    "type": "string"
  }, {
    "id": 210,
    "text": "",
    "type": "local variable"
  }, {
    "id": 211,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 212,
    "text": "",
    "type": "local variable"
  }, {
    "id": 213,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 214,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 215,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 216,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 217,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 218,
    "text": "",
    "type": "local variable"
  }, {
    "id": 219,
    "text": "",
    "type": "number"
  }, {
    "id": 220,
    "text": "",
    "type": "local variable"
  }, {
    "id": 221,
    "text": "",
    "type": "number"
  }, {
    "id": 222,
    "text": "",
    "type": "global variable"
  }, {
    "id": 223,
    "text": "",
    "type": "n/a"
  }, {
    "id": 224,
    "text": "",
    "type": "global variable"
  }, {
    "id": 225,
    "text": "",
    "type": "n/a"
  }, {
    "id": 226,
    "text": "",
    "type": "global variable"
  }, {
    "id": 227,
    "text": "",
    "type": "n/a"
  }, {
    "id": 228,
    "text": "",
    "type": "global variable"
  }, {
    "id": 229,
    "text": "",
    "type": "n/a"
  }, {
    "id": 230,
    "text": "",
    "type": "global variable"
  }, {
    "id": 231,
    "text": "",
    "type": "n/a"
  }, {
    "id": 232,
    "text": "",
    "type": "global variable"
  }, {
    "id": 233,
    "text": "",
    "type": "n/a"
  }, {
    "id": 234,
    "text": "",
    "type": "global variable"
  }, {
    "id": 235,
    "text": "",
    "type": "n/a"
  }, {
    "id": 236,
    "text": "",
    "type": "global variable"
  }, {
    "id": 237,
    "text": "",
    "type": "n/a"
  }, {
    "id": 238,
    "text": "",
    "type": "global variable"
  }, {
    "id": 239,
    "text": "",
    "type": "n/a"
  }, {
    "id": 240,
    "text": "",
    "type": "global variable"
  }, {
    "id": 241,
    "text": "",
    "type": "n/a"
  } ]
}