{
  "_filename": "socket.nobj.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-zmq/src/socket.nobj.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 4
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 17,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 17,
    "label": "has",
    "to": 24
  }, {
    "from": 14,
    "label": "has",
    "to": 25
  }, {
    "from": 14,
    "label": "has",
    "to": 26
  }, {
    "from": 14,
    "label": "has",
    "to": 11
  }, {
    "from": 14,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 30
  }, {
    "from": 33,
    "label": "has",
    "to": 31
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 11
  }, {
    "from": 36,
    "label": "has",
    "to": 11
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 4
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 39,
    "label": "has",
    "to": 11
  }, {
    "from": 39,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 49,
    "label": "has",
    "to": 53
  }, {
    "from": 49,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 54,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 54,
    "label": "has",
    "to": 60
  }, {
    "from": 49,
    "label": "has",
    "to": 61
  }, {
    "from": 49,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 62,
    "label": "has",
    "to": 66
  }, {
    "from": 45,
    "label": "has",
    "to": 11
  }, {
    "from": 45,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 68,
    "label": "has",
    "to": 11
  }, {
    "from": 68,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 68,
    "label": "has",
    "to": 76
  }, {
    "from": 68,
    "label": "has",
    "to": 77
  }, {
    "from": 68,
    "label": "has",
    "to": 78
  }, {
    "from": 68,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 81
  }, {
    "from": 79,
    "label": "has",
    "to": 82
  }, {
    "from": 79,
    "label": "has",
    "to": 83
  }, {
    "from": 79,
    "label": "has",
    "to": 84
  }, {
    "from": 79,
    "label": "has",
    "to": 85
  }, {
    "from": 79,
    "label": "has",
    "to": 86
  }, {
    "from": 79,
    "label": "has",
    "to": 87
  }, {
    "from": 68,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 68,
    "label": "has",
    "to": 90
  }, {
    "from": 68,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 93,
    "label": "has",
    "to": 96
  }, {
    "from": 93,
    "label": "has",
    "to": 97
  }, {
    "from": 93,
    "label": "has",
    "to": 98
  }, {
    "from": 92,
    "label": "has",
    "to": 99
  }, {
    "from": 92,
    "label": "has",
    "to": 100
  }, {
    "from": 92,
    "label": "has",
    "to": 11
  }, {
    "from": 92,
    "label": "has",
    "to": 101
  }, {
    "from": 92,
    "label": "has",
    "to": 102
  }, {
    "from": 92,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 104,
    "label": "has",
    "to": 107
  }, {
    "from": 103,
    "label": "has",
    "to": 108
  }, {
    "from": 92,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 110,
    "label": "has",
    "to": 112
  }, {
    "from": 110,
    "label": "has",
    "to": 113
  }, {
    "from": 109,
    "label": "has",
    "to": 114
  }, {
    "from": 92,
    "label": "has",
    "to": 115
  }, {
    "from": 92,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 116,
    "label": "has",
    "to": 118
  }, {
    "from": 92,
    "label": "has",
    "to": 119
  }, {
    "from": 92,
    "label": "has",
    "to": 120
  }, {
    "from": 121,
    "label": "calls",
    "to": 133
  }, {
    "from": 121,
    "label": "calls",
    "to": 133
  }, {
    "from": 121,
    "label": "calls",
    "to": 133
  }, {
    "from": 121,
    "label": "calls",
    "to": 45
  }, {
    "from": 121,
    "label": "calls",
    "to": 14
  }, {
    "from": 121,
    "label": "calls",
    "to": 12
  }, {
    "from": 121,
    "label": "calls",
    "to": 12
  }, {
    "from": 121,
    "label": "calls",
    "to": 12
  }, {
    "from": 45,
    "label": "calls",
    "to": 128
  }, {
    "from": 45,
    "label": "calls",
    "to": 128
  }, {
    "from": 121,
    "label": "calls",
    "to": 128
  }, {
    "from": 121,
    "label": "calls",
    "to": 128
  }, {
    "from": 121,
    "label": "calls",
    "to": 128
  }, {
    "from": 121,
    "label": "calls",
    "to": 128
  }, {
    "from": 121,
    "label": "calls",
    "to": 129
  }, {
    "from": 121,
    "label": "calls",
    "to": 129
  }, {
    "from": 121,
    "label": "calls",
    "to": 129
  }, {
    "from": 121,
    "label": "calls",
    "to": 129
  }, {
    "from": 121,
    "label": "calls",
    "to": 129
  }, {
    "from": 121,
    "label": "calls",
    "to": 129
  }, {
    "from": 2,
    "label": "calls",
    "to": 134
  }, {
    "from": 14,
    "label": "calls",
    "to": 10
  }, {
    "from": 14,
    "label": "calls",
    "to": 10
  }, {
    "from": 28,
    "label": "calls",
    "to": 10
  }, {
    "from": 28,
    "label": "calls",
    "to": 10
  }, {
    "from": 33,
    "label": "calls",
    "to": 10
  }, {
    "from": 33,
    "label": "calls",
    "to": 10
  }, {
    "from": 121,
    "label": "calls",
    "to": 10
  }, {
    "from": 121,
    "label": "calls",
    "to": 10
  }, {
    "from": 121,
    "label": "calls",
    "to": 10
  }, {
    "from": 121,
    "label": "calls",
    "to": 10
  }, {
    "from": 121,
    "label": "calls",
    "to": 130
  }, {
    "from": 36,
    "label": "calls",
    "to": 36
  }, {
    "from": 45,
    "label": "calls",
    "to": 36
  }, {
    "from": 121,
    "label": "calls",
    "to": 126
  }, {
    "from": 121,
    "label": "calls",
    "to": 131
  }, {
    "from": 121,
    "label": "calls",
    "to": 33
  }, {
    "from": 121,
    "label": "calls",
    "to": 33
  }, {
    "from": 121,
    "label": "calls",
    "to": 135
  }, {
    "from": 121,
    "label": "calls",
    "to": 135
  }, {
    "from": 121,
    "label": "calls",
    "to": 135
  }, {
    "from": 121,
    "label": "calls",
    "to": 135
  }, {
    "from": 45,
    "label": "calls",
    "to": 39
  }, {
    "from": 45,
    "label": "calls",
    "to": 123
  }, {
    "from": 121,
    "label": "calls",
    "to": 123
  }, {
    "from": 121,
    "label": "calls",
    "to": 123
  }, {
    "from": 121,
    "label": "calls",
    "to": 123
  }, {
    "from": 121,
    "label": "calls",
    "to": 123
  }, {
    "from": 121,
    "label": "calls",
    "to": 123
  }, {
    "from": 45,
    "label": "calls",
    "to": 124
  }, {
    "from": 45,
    "label": "calls",
    "to": 124
  }, {
    "from": 121,
    "label": "calls",
    "to": 124
  }, {
    "from": 121,
    "label": "calls",
    "to": 124
  }, {
    "from": 121,
    "label": "calls",
    "to": 124
  }, {
    "from": 121,
    "label": "calls",
    "to": 124
  }, {
    "from": 121,
    "label": "calls",
    "to": 124
  }, {
    "from": 121,
    "label": "calls",
    "to": 124
  }, {
    "from": 121,
    "label": "calls",
    "to": 124
  }, {
    "from": 121,
    "label": "calls",
    "to": 124
  }, {
    "from": 121,
    "label": "calls",
    "to": 28
  }, {
    "from": 121,
    "label": "calls",
    "to": 132
  }, {
    "from": 121,
    "label": "calls",
    "to": 2
  }, {
    "from": 121,
    "label": "calls",
    "to": 2
  }, {
    "from": 121,
    "label": "calls",
    "to": 125
  }, {
    "from": 121,
    "label": "calls",
    "to": 127
  }, {
    "from": 121,
    "label": "calls",
    "to": 127
  }, {
    "from": 121,
    "label": "calls",
    "to": 127
  }, {
    "from": 121,
    "label": "calls",
    "to": 127
  }, {
    "from": 121,
    "label": "calls",
    "to": 127
  }, {
    "from": 121,
    "label": "calls",
    "to": 127
  }, {
    "from": 121,
    "label": "calls",
    "to": 127
  }, {
    "from": 121,
    "label": "calls",
    "to": 127
  }, {
    "from": 121,
    "label": "calls",
    "to": 122
  }, {
    "from": 121,
    "label": "calls",
    "to": 122
  }, {
    "from": 1,
    "label": "contains",
    "to": 121
  }, {
    "from": 121,
    "label": "declares",
    "to": 2
  }, {
    "from": 121,
    "label": "declares",
    "to": 10
  }, {
    "from": 121,
    "label": "declares",
    "to": 12
  }, {
    "from": 121,
    "label": "declares",
    "to": 14
  }, {
    "from": 121,
    "label": "declares",
    "to": 28
  }, {
    "from": 121,
    "label": "declares",
    "to": 33
  }, {
    "from": 121,
    "label": "declares",
    "to": 36
  }, {
    "from": 121,
    "label": "declares",
    "to": 39
  }, {
    "from": 121,
    "label": "declares",
    "to": 45
  }, {
    "from": 121,
    "label": "declares",
    "to": 68
  }, {
    "from": 121,
    "label": "declares",
    "to": 92
  }, {
    "from": 1,
    "label": "contains",
    "to": 136
  }, {
    "from": 1,
    "label": "contains",
    "to": 137
  }, {
    "from": 136,
    "label": "initializes",
    "to": 138
  }, {
    "from": 138,
    "label": "assigns",
    "to": 139
  }, {
    "from": 139,
    "label": "assigns",
    "to": 140
  }, {
    "from": 140,
    "label": "assigns",
    "to": 141
  }, {
    "from": 139,
    "label": "assigns",
    "to": 142
  }, {
    "from": 142,
    "label": "assigns",
    "to": 143
  }, {
    "from": 139,
    "label": "assigns",
    "to": 144
  }, {
    "from": 144,
    "label": "assigns",
    "to": 145
  }, {
    "from": 139,
    "label": "assigns",
    "to": 146
  }, {
    "from": 146,
    "label": "assigns",
    "to": 147
  }, {
    "from": 139,
    "label": "assigns",
    "to": 148
  }, {
    "from": 148,
    "label": "assigns",
    "to": 149
  }, {
    "from": 139,
    "label": "assigns",
    "to": 150
  }, {
    "from": 150,
    "label": "assigns",
    "to": 151
  }, {
    "from": 139,
    "label": "assigns",
    "to": 152
  }, {
    "from": 152,
    "label": "assigns",
    "to": 153
  }, {
    "from": 136,
    "label": "initializes",
    "to": 154
  }, {
    "from": 154,
    "label": "assigns",
    "to": 155
  }, {
    "from": 155,
    "label": "assigns",
    "to": 156
  }, {
    "from": 156,
    "label": "assigns",
    "to": 157
  }, {
    "from": 155,
    "label": "assigns",
    "to": 158
  }, {
    "from": 158,
    "label": "assigns",
    "to": 159
  }, {
    "from": 155,
    "label": "assigns",
    "to": 160
  }, {
    "from": 160,
    "label": "assigns",
    "to": 161
  }, {
    "from": 136,
    "label": "initializes",
    "to": 162
  }, {
    "from": 162,
    "label": "assigns",
    "to": 163
  }, {
    "from": 163,
    "label": "assigns",
    "to": 164
  }, {
    "from": 163,
    "label": "assigns",
    "to": 165
  }, {
    "from": 163,
    "label": "assigns",
    "to": 166
  }, {
    "from": 136,
    "label": "initializes",
    "to": 167
  }, {
    "from": 167,
    "label": "assigns",
    "to": 168
  }, {
    "from": 136,
    "label": "initializes",
    "to": 169
  }, {
    "from": 169,
    "label": "assigns",
    "to": 170
  }, {
    "from": 136,
    "label": "initializes",
    "to": 171
  }, {
    "from": 171,
    "label": "assigns",
    "to": 172
  }, {
    "from": 136,
    "label": "initializes",
    "to": 173
  }, {
    "from": 173,
    "label": "assigns",
    "to": 174
  }, {
    "from": 136,
    "label": "initializes",
    "to": 175
  }, {
    "from": 175,
    "label": "assigns",
    "to": 176
  }, {
    "from": 136,
    "label": "initializes",
    "to": 177
  }, {
    "from": 177,
    "label": "assigns",
    "to": 178
  }, {
    "from": 136,
    "label": "initializes",
    "to": 179
  }, {
    "from": 179,
    "label": "assigns",
    "to": 180
  }, {
    "from": 136,
    "label": "initializes",
    "to": 181
  }, {
    "from": 136,
    "label": "initializes",
    "to": 182
  }, {
    "from": 182,
    "label": "assigns",
    "to": 183
  }, {
    "from": 136,
    "label": "initializes",
    "to": 184
  }, {
    "from": 184,
    "label": "assigns",
    "to": 185
  }, {
    "from": 136,
    "label": "initializes",
    "to": 186
  }, {
    "from": 186,
    "label": "assigns",
    "to": 187
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "socket",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function foreach_opt(func)\r\n\tfor i=1,#socket_options do\r\n\t\tlocal ver_opts = socket_options[i]\r\n\t\tfor num=1,max_options do\r\n\t\t\tlocal opt = ver_opts[num]\r\n\t\t\tif opt then\r\n\t\t\t\tfunc(num, opt, ver_opts)\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "for i=1,#socket_options do\r\n\t\tlocal ver_opts = socket_options[i]\r\n\t\tfor num=1,max_options do\r\n\t\t\tlocal opt = ver_opts[num]\r\n\t\t\tif opt then\r\n\t\t\t\tfunc(num, opt, ver_opts)\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 4,
    "text": "local ver_opts = socket_options[i]",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "for num=1,max_options do\r\n\t\t\tlocal opt = ver_opts[num]\r\n\t\t\tif opt then\r\n\t\t\t\tfunc(num, opt, ver_opts)\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 6,
    "text": "local opt = ver_opts[num]",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "if opt then\r\n\t\t\t\tfunc(num, opt, ver_opts)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "func(num, opt, ver_opts)",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function(t,val) return table.insert(t,val) end",
    "type": "function"
  }, {
    "id": 11,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 12,
    "text": "local function template(data, templ)\r\n\treturn templ:gsub(\"%${(.-)}\", data)\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "local function get_methods(opt, ver)\r\n\tlocal num = opt.num\r\n\t-- check if methods have been created\r\n\tlocal methods = socket_methods[num]\r\n\r\n\tif not methods then\r\n\t\tadd(ffi_opt_names, \"\\t\\t[\".. num .. \"] = '\" .. opt.name .. \"',\\n\")\r\n\t\t-- need to create methods info.\r\n\t\tmethods = {\r\n\t\t\tnum=num,\r\n\t\t\tname=opt.name,\r\n\t\t\tget=opt.get, set=opt.set, c_get=opt.c_get, c_set=opt.c_set,\r\n\t\t\tltype=opt.ltype, otype=opt.otype, mode=opt.mode,\r\n\t\t\tversions = {},\r\n\t\t}\r\n\r\n\t\t-- initialize all version as not-supported.\r\n\t\tfor i=1,#socket_options do\r\n\t\t\tlocal ver_opts = socket_options[i]\r\n\t\t\tmethods[ver_opts.ver_def] = false\r\n\t\tend\r\n\r\n\t\tif num > max_methods then max_methods = num end\r\n\r\n\t\tsocket_methods[num] = methods\r\n\tend\r\n\r\n\t-- mark this version as supporting the option.\r\n\tmethods[ver.ver_def] = true\r\n\tadd(methods.versions, ver)\r\n\r\n\treturn methods\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "local num = opt.num",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "local methods = socket_methods[num]",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "if not methods then\r\n\t\tadd(ffi_opt_names, \"\\t\\t[\".. num .. \"] = '\" .. opt.name .. \"',\\n\")\r\n\t\t-- need to create methods info.\r\n\t\tmethods = {\r\n\t\t\tnum=num,\r\n\t\t\tname=opt.name,\r\n\t\t\tget=opt.get, set=opt.set, c_get=opt.c_get, c_set=opt.c_set,\r\n\t\t\tltype=opt.ltype, otype=opt.otype, mode=opt.mode,\r\n\t\t\tversions = {},\r\n\t\t}\r\n\r\n\t\t-- initialize all version as not-supported.\r\n\t\tfor i=1,#socket_options do\r\n\t\t\tlocal ver_opts = socket_options[i]\r\n\t\t\tmethods[ver_opts.ver_def] = false\r\n\t\tend\r\n\r\n\t\tif num > max_methods then max_methods = num end\r\n\r\n\t\tsocket_methods[num] = methods\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "add(ffi_opt_names, \"\\t\\t[\".. num .. \"] = '\" .. opt.name .. \"',\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "methods = {\r\n\t\t\tnum=num,\r\n\t\t\tname=opt.name,\r\n\t\t\tget=opt.get, set=opt.set, c_get=opt.c_get, c_set=opt.c_set,\r\n\t\t\tltype=opt.ltype, otype=opt.otype, mode=opt.mode,\r\n\t\t\tversions = {},\r\n\t\t}",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "for i=1,#socket_options do\r\n\t\t\tlocal ver_opts = socket_options[i]\r\n\t\t\tmethods[ver_opts.ver_def] = false\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 21,
    "text": "methods[ver_opts.ver_def] = false",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "if num > max_methods then max_methods = num end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "max_methods = num",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "socket_methods[num] = methods",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "methods[ver.ver_def] = true",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "add(methods.versions, ver)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "local function if_def(def)\r\n\tlocal code = \"#if \" .. def .. \"\\n\"\r\n\tadd(options_c_code, code)\r\n\tadd(opt_types, code)\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "local code = \"#if \" .. def .. \"\\n\"",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "add(options_c_code, code)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "add(opt_types, code)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "local function endif(def)\r\n\tlocal code = \"#endif /* #if \" .. def .. \" */\\n\"\r\n\tadd(options_c_code, code)\r\n\tadd(opt_types, code)\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "local code = \"#endif /* #if \" .. def .. \" */\\n\"",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "local function tunpack(tab, idx, max)\r\n\tif idx == max then return tab[idx] end\r\n\treturn tab[idx], tunpack(tab, idx + 1, max)\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "if idx == max then return tab[idx] end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "local function build_meth_if_def(meth)\r\n\tlocal v = {}\r\n\tfor i=1,#socket_options do\r\n\t\tlocal ver_opts = socket_options[i]\r\n\t\tif meth[ver_opts.ver_def] then\r\n\t\t\tv[#v+1] = ver_opts.ver_def\r\n\t\tend\r\n\tend\r\n\treturn v\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "local v = {}",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "for i=1,#socket_options do\r\n\t\tlocal ver_opts = socket_options[i]\r\n\t\tif meth[ver_opts.ver_def] then\r\n\t\t\tv[#v+1] = ver_opts.ver_def\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 42,
    "text": "if meth[ver_opts.ver_def] then\r\n\t\t\tv[#v+1] = ver_opts.ver_def\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "v[#v+1] = ver_opts.ver_def",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "local function build_option_methods()\r\n\tlocal m = {}\r\n\r\n\tfor i=1,max_methods do\r\n\t\tlocal meth = socket_methods[i]\r\n\t\tif meth then\r\n\t\t\tlocal ltype = meth.ltype\r\n\t\t\tlocal name\r\n\t\t\t-- get list of version defs for this method.\r\n\t\t\tlocal if_defs = build_meth_if_def(meth)\r\n\t\t\t-- generate getter method.\r\n\t\t\tname = meth.get\r\n\t\t\tif name then\r\n\t\t\t\tlocal args = { ltype, \"&value\" }\r\n\t\t\t\tlocal val_out = { ltype, \"&value\" }\r\n\t\t\t\tif meth.otype == 'BLOB' then\r\n\t\t\t\t\tval_out = { 'char *', \"value\", has_length = true }\r\n\t\t\t\t\targs = { 'char *', \"value\", \"size_t\", \"&#value\" }\r\n\t\t\t\tend\r\n\t\t\t\tm[#m+1] = method (name) { if_defs = if_defs,\r\n\t\t\t\t\tvar_out(val_out),\r\n\t\t\t\t\tc_method_call \"ZMQ_Error\" (meth.c_get) (args),\r\n\t\t\t\t}\r\n\t\t\tend\r\n\t\t\t-- generate setter method.\r\n\t\t\tname = meth.set\r\n\t\t\tif name then\r\n\t\t\t\tlocal args = { ltype, \"value\" }\r\n\t\t\t\tif meth.otype == 'BLOB' then\r\n\t\t\t\t\targs = { ltype, \"value\", \"size_t\", \"#value\" }\r\n\t\t\t\tend\r\n\t\t\t\tm[#m+1] = method (name) { if_defs = if_defs,\r\n\t\t\t\t\tc_method_call \"ZMQ_Error\" (meth.c_set) (args),\r\n\t\t\t\t}\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\r\n\treturn tunpack(m, 1, #m)\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "local m = {}",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "for i=1,max_methods do\r\n\t\tlocal meth = socket_methods[i]\r\n\t\tif meth then\r\n\t\t\tlocal ltype = meth.ltype\r\n\t\t\tlocal name\r\n\t\t\t-- get list of version defs for this method.\r\n\t\t\tlocal if_defs = build_meth_if_def(meth)\r\n\t\t\t-- generate getter method.\r\n\t\t\tname = meth.get\r\n\t\t\tif name then\r\n\t\t\t\tlocal args = { ltype, \"&value\" }\r\n\t\t\t\tlocal val_out = { ltype, \"&value\" }\r\n\t\t\t\tif meth.otype == 'BLOB' then\r\n\t\t\t\t\tval_out = { 'char *', \"value\", has_length = true }\r\n\t\t\t\t\targs = { 'char *', \"value\", \"size_t\", \"&#value\" }\r\n\t\t\t\tend\r\n\t\t\t\tm[#m+1] = method (name) { if_defs = if_defs,\r\n\t\t\t\t\tvar_out(val_out),\r\n\t\t\t\t\tc_method_call \"ZMQ_Error\" (meth.c_get) (args),\r\n\t\t\t\t}\r\n\t\t\tend\r\n\t\t\t-- generate setter method.\r\n\t\t\tname = meth.set\r\n\t\t\tif name then\r\n\t\t\t\tlocal args = { ltype, \"value\" }\r\n\t\t\t\tif meth.otype == 'BLOB' then\r\n\t\t\t\t\targs = { ltype, \"value\", \"size_t\", \"#value\" }\r\n\t\t\t\tend\r\n\t\t\t\tm[#m+1] = method (name) { if_defs = if_defs,\r\n\t\t\t\t\tc_method_call \"ZMQ_Error\" (meth.c_set) (args),\r\n\t\t\t\t}\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 48,
    "text": "local meth = socket_methods[i]",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "if meth then\r\n\t\t\tlocal ltype = meth.ltype\r\n\t\t\tlocal name\r\n\t\t\t-- get list of version defs for this method.\r\n\t\t\tlocal if_defs = build_meth_if_def(meth)\r\n\t\t\t-- generate getter method.\r\n\t\t\tname = meth.get\r\n\t\t\tif name then\r\n\t\t\t\tlocal args = { ltype, \"&value\" }\r\n\t\t\t\tlocal val_out = { ltype, \"&value\" }\r\n\t\t\t\tif meth.otype == 'BLOB' then\r\n\t\t\t\t\tval_out = { 'char *', \"value\", has_length = true }\r\n\t\t\t\t\targs = { 'char *', \"value\", \"size_t\", \"&#value\" }\r\n\t\t\t\tend\r\n\t\t\t\tm[#m+1] = method (name) { if_defs = if_defs,\r\n\t\t\t\t\tvar_out(val_out),\r\n\t\t\t\t\tc_method_call \"ZMQ_Error\" (meth.c_get) (args),\r\n\t\t\t\t}\r\n\t\t\tend\r\n\t\t\t-- generate setter method.\r\n\t\t\tname = meth.set\r\n\t\t\tif name then\r\n\t\t\t\tlocal args = { ltype, \"value\" }\r\n\t\t\t\tif meth.otype == 'BLOB' then\r\n\t\t\t\t\targs = { ltype, \"value\", \"size_t\", \"#value\" }\r\n\t\t\t\tend\r\n\t\t\t\tm[#m+1] = method (name) { if_defs = if_defs,\r\n\t\t\t\t\tc_method_call \"ZMQ_Error\" (meth.c_set) (args),\r\n\t\t\t\t}\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "local ltype = meth.ltype",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "local name",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "local if_defs = build_meth_if_def(meth)",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "name = meth.get",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "if name then\r\n\t\t\t\tlocal args = { ltype, \"&value\" }\r\n\t\t\t\tlocal val_out = { ltype, \"&value\" }\r\n\t\t\t\tif meth.otype == 'BLOB' then\r\n\t\t\t\t\tval_out = { 'char *', \"value\", has_length = true }\r\n\t\t\t\t\targs = { 'char *', \"value\", \"size_t\", \"&#value\" }\r\n\t\t\t\tend\r\n\t\t\t\tm[#m+1] = method (name) { if_defs = if_defs,\r\n\t\t\t\t\tvar_out(val_out),\r\n\t\t\t\t\tc_method_call \"ZMQ_Error\" (meth.c_get) (args),\r\n\t\t\t\t}\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "local args = { ltype, \"&value\" }",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "local val_out = { ltype, \"&value\" }",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "if meth.otype == 'BLOB' then\r\n\t\t\t\t\tval_out = { 'char *', \"value\", has_length = true }\r\n\t\t\t\t\targs = { 'char *', \"value\", \"size_t\", \"&#value\" }\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "val_out = { 'char *', \"value\", has_length = true }",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "args = { 'char *', \"value\", \"size_t\", \"&#value\" }",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "m[#m+1] = method (name) { if_defs = if_defs,\r\n\t\t\t\t\tvar_out(val_out),\r\n\t\t\t\t\tc_method_call \"ZMQ_Error\" (meth.c_get) (args),\r\n\t\t\t\t}",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "name = meth.set",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "if name then\r\n\t\t\t\tlocal args = { ltype, \"value\" }\r\n\t\t\t\tif meth.otype == 'BLOB' then\r\n\t\t\t\t\targs = { ltype, \"value\", \"size_t\", \"#value\" }\r\n\t\t\t\tend\r\n\t\t\t\tm[#m+1] = method (name) { if_defs = if_defs,\r\n\t\t\t\t\tc_method_call \"ZMQ_Error\" (meth.c_set) (args),\r\n\t\t\t\t}\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "local args = { ltype, \"value\" }",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "if meth.otype == 'BLOB' then\r\n\t\t\t\t\targs = { ltype, \"value\", \"size_t\", \"#value\" }\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "args = { ltype, \"value\", \"size_t\", \"#value\" }",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "m[#m+1] = method (name) { if_defs = if_defs,\r\n\t\t\t\t\tc_method_call \"ZMQ_Error\" (meth.c_set) (args),\r\n\t\t\t\t}",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "function(num, opt, ver)\r\n\topt.num = num\r\n\tif not opt.name then\r\n\t\topt.name = 'none'\r\n\t\topt.otype = 'NONE'\r\n\t\topt.DEF = 'unused'\r\n\t\treturn\r\n\tend\r\n\t-- track max option number for each version.\r\n\tif not ver.max_opt or ver.max_opt < num then\r\n\t\tver.max_opt = num\r\n\tend\r\n\topt.DEF = \"ZMQ_\" .. opt.name:upper()\r\n\t-- ctype & ffi_type\r\n\tlocal ctype = OPT_TYPES[opt.otype]\r\n\topt.ctype = ctype\r\n\tif opt.otype == 'BLOB' then\r\n\t\topt.ffi_type = 'string'\r\n\t\topt.set_len_param = ', size_t value_len'\r\n\t\topt.set_val_name = 'value'\r\n\t\topt.set_len_name = 'value_len'\r\n\telseif ctype ~= 'NONE' then\r\n\t\topt.ffi_type = ctype .. '[1]'\r\n\t\topt.set_len_param = ''\r\n\t\topt.set_val_name = '&value'\r\n\t\topt.set_len_name = 'sizeof(value)'\r\n\tend\r\n\t-- getter/setter names\r\n\tfor meth,prefix in pairs(get_set_prefix[opt.mode]) do\r\n\t\topt[meth] = prefix .. opt.name\r\n\tend\r\n\t-- create common list of option get/set methods.\r\n\tlocal methods = get_methods(opt, ver)\r\nend",
    "type": "function"
  }, {
    "id": 69,
    "text": "opt.num = num",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "if not opt.name then\r\n\t\topt.name = 'none'\r\n\t\topt.otype = 'NONE'\r\n\t\topt.DEF = 'unused'\r\n\t\treturn\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "opt.name = 'none'",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "opt.otype = 'NONE'",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "opt.DEF = 'unused'",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "if not ver.max_opt or ver.max_opt < num then\r\n\t\tver.max_opt = num\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "ver.max_opt = num",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "opt.DEF = \"ZMQ_\" .. opt.name:upper()",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "local ctype = OPT_TYPES[opt.otype]",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "opt.ctype = ctype",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "if opt.otype == 'BLOB' then\r\n\t\topt.ffi_type = 'string'\r\n\t\topt.set_len_param = ', size_t value_len'\r\n\t\topt.set_val_name = 'value'\r\n\t\topt.set_len_name = 'value_len'\r\n\telseif ctype ~= 'NONE' then\r\n\t\topt.ffi_type = ctype .. '[1]'\r\n\t\topt.set_len_param = ''\r\n\t\topt.set_val_name = '&value'\r\n\t\topt.set_len_name = 'sizeof(value)'\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 80,
    "text": "opt.ffi_type = 'string'",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "opt.set_len_param = ', size_t value_len'",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "opt.set_val_name = 'value'",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "opt.set_len_name = 'value_len'",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "opt.ffi_type = ctype .. '[1]'",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "opt.set_len_param = ''",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "opt.set_val_name = '&value'",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "opt.set_len_name = 'sizeof(value)'",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "for meth,prefix in pairs(get_set_prefix[opt.mode]) do\r\n\t\topt[meth] = prefix .. opt.name\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 89,
    "text": "opt[meth] = prefix .. opt.name",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "local methods = get_methods(opt, ver)",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "function(num, opt, ver)\r\n\tif ver ~= last_ver then\r\n\t\tif last_ver then\r\n\t\t\tendif(last_ver.ver_def)\r\n\t\tend\r\n\t\tlast_ver = ver\r\n\t\tif_def(ver.ver_def)\r\n\t\tadd(opt_types, template(ver,[[\r\n#define ${ver_def}_MAX_OPT ${max_opt}\r\n]]))\r\n\tend\r\n\tadd(opt_types, template(opt,[[\r\n  OPT_TYPE_${otype},  /* ${num} ${DEF} */\r\n]]))\r\n\tif opt.name == 'none' then return end\r\n\t-- generate setter\r\n\tlocal set = ''\r\n\tlocal get = ''\r\n\tif opt.c_set then\r\n\t\tif opt.otype == 'BLOB' then\r\n\t\t\tset = [[\r\nZMQ_Error ${c_set}(ZMQ_Socket *sock, const char *value, size_t str_len) {\r\n\treturn zmq_setsockopt(sock, ${DEF}, value, str_len);\r\n]]\r\n\t\telseif opt.ctype == opt.ltype then\r\n\t\t\tset = [[\r\nZMQ_Error ${c_set}(ZMQ_Socket *sock, ${ltype} value) {\r\n\treturn zmq_setsockopt(sock, ${DEF}, &value, sizeof(value));\r\n]]\r\n\t\telse\r\n\t\t\tset = [[\r\nZMQ_Error ${c_set}(ZMQ_Socket *sock, ${ltype} value) {\r\n\t${ctype} val = (${ctype})value;\r\n\treturn zmq_setsockopt(sock, ${DEF}, &val, sizeof(val));\r\n]]\r\n\t\tend\r\n\t\tset = set .. \"}\\n\\n\"\r\n\tend\r\n\t-- generate getter\r\n\tif opt.c_get then\r\n\t\tif opt.otype == 'BLOB' then\r\n\t\t\tget = [[\r\nZMQ_Error ${c_get}(ZMQ_Socket *sock, char *value, size_t *len) {\r\n\treturn zmq_getsockopt(sock, ${DEF}, value, len);\r\n]]\r\n\t\telseif opt.ctype == opt.ltype then\r\n\t\t\tget = [[\r\nZMQ_Error ${c_get}(ZMQ_Socket *sock, ${ltype} *value) {\r\n\tsize_t val_len = sizeof(${ltype});\r\n\treturn zmq_getsockopt(sock, ${DEF}, value, &val_len);\r\n]]\r\n\t\telse\r\n\t\t\tget = [[\r\nZMQ_Error ${c_get}(ZMQ_Socket *sock, ${ltype} *value) {\r\n\t${ctype} val;\r\n\tsize_t val_len = sizeof(val);\r\n\tint rc = zmq_getsockopt(sock, ${DEF}, &val, &val_len);\r\n\t*value = (${ltype})val;\r\n\treturn rc;\r\n]]\r\n\t\tend\r\n\t\tget = get .. \"}\\n\\n\"\r\n\tend\r\n\tlocal templ\r\n\tif opt.custom then\r\n\t\ttempl = opt.custom\r\n\telse\r\n\t\ttempl = set .. get\r\n\tend\r\n\tadd(options_c_code, template(opt,templ))\r\nend",
    "type": "function"
  }, {
    "id": 93,
    "text": "if ver ~= last_ver then\r\n\t\tif last_ver then\r\n\t\t\tendif(last_ver.ver_def)\r\n\t\tend\r\n\t\tlast_ver = ver\r\n\t\tif_def(ver.ver_def)\r\n\t\tadd(opt_types, template(ver,[[\r\n#define ${ver_def}_MAX_OPT ${max_opt}\r\n]]))\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 94,
    "text": "if last_ver then\r\n\t\t\tendif(last_ver.ver_def)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 95,
    "text": "endif(last_ver.ver_def)",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "last_ver = ver",
    "type": "statement:assign"
  }, {
    "id": 97,
    "text": "if_def(ver.ver_def)",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "add(opt_types, template(ver,[[\r\n#define ${ver_def}_MAX_OPT ${max_opt}\r\n]]))",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "add(opt_types, template(opt,[[\r\n  OPT_TYPE_${otype},  /* ${num} ${DEF} */\r\n]]))",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "if opt.name == 'none' then return end",
    "type": "statement:if"
  }, {
    "id": 101,
    "text": "local set = ''",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "local get = ''",
    "type": "statement:localassign"
  }, {
    "id": 103,
    "text": "if opt.c_set then\r\n\t\tif opt.otype == 'BLOB' then\r\n\t\t\tset = [[\r\nZMQ_Error ${c_set}(ZMQ_Socket *sock, const char *value, size_t str_len) {\r\n\treturn zmq_setsockopt(sock, ${DEF}, value, str_len);\r\n]]\r\n\t\telseif opt.ctype == opt.ltype then\r\n\t\t\tset = [[\r\nZMQ_Error ${c_set}(ZMQ_Socket *sock, ${ltype} value) {\r\n\treturn zmq_setsockopt(sock, ${DEF}, &value, sizeof(value));\r\n]]\r\n\t\telse\r\n\t\t\tset = [[\r\nZMQ_Error ${c_set}(ZMQ_Socket *sock, ${ltype} value) {\r\n\t${ctype} val = (${ctype})value;\r\n\treturn zmq_setsockopt(sock, ${DEF}, &val, sizeof(val));\r\n]]\r\n\t\tend\r\n\t\tset = set .. \"}\\n\\n\"\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 104,
    "text": "if opt.otype == 'BLOB' then\r\n\t\t\tset = [[\r\nZMQ_Error ${c_set}(ZMQ_Socket *sock, const char *value, size_t str_len) {\r\n\treturn zmq_setsockopt(sock, ${DEF}, value, str_len);\r\n]]\r\n\t\telseif opt.ctype == opt.ltype then\r\n\t\t\tset = [[\r\nZMQ_Error ${c_set}(ZMQ_Socket *sock, ${ltype} value) {\r\n\treturn zmq_setsockopt(sock, ${DEF}, &value, sizeof(value));\r\n]]\r\n\t\telse\r\n\t\t\tset = [[\r\nZMQ_Error ${c_set}(ZMQ_Socket *sock, ${ltype} value) {\r\n\t${ctype} val = (${ctype})value;\r\n\treturn zmq_setsockopt(sock, ${DEF}, &val, sizeof(val));\r\n]]\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 105,
    "text": "set = [[\r\nZMQ_Error ${c_set}(ZMQ_Socket *sock, const char *value, size_t str_len) {\r\n\treturn zmq_setsockopt(sock, ${DEF}, value, str_len);\r\n]]",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "set = [[\r\nZMQ_Error ${c_set}(ZMQ_Socket *sock, ${ltype} value) {\r\n\treturn zmq_setsockopt(sock, ${DEF}, &value, sizeof(value));\r\n]]",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "set = [[\r\nZMQ_Error ${c_set}(ZMQ_Socket *sock, ${ltype} value) {\r\n\t${ctype} val = (${ctype})value;\r\n\treturn zmq_setsockopt(sock, ${DEF}, &val, sizeof(val));\r\n]]",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "set = set .. \"}\\n\\n\"",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "if opt.c_get then\r\n\t\tif opt.otype == 'BLOB' then\r\n\t\t\tget = [[\r\nZMQ_Error ${c_get}(ZMQ_Socket *sock, char *value, size_t *len) {\r\n\treturn zmq_getsockopt(sock, ${DEF}, value, len);\r\n]]\r\n\t\telseif opt.ctype == opt.ltype then\r\n\t\t\tget = [[\r\nZMQ_Error ${c_get}(ZMQ_Socket *sock, ${ltype} *value) {\r\n\tsize_t val_len = sizeof(${ltype});\r\n\treturn zmq_getsockopt(sock, ${DEF}, value, &val_len);\r\n]]\r\n\t\telse\r\n\t\t\tget = [[\r\nZMQ_Error ${c_get}(ZMQ_Socket *sock, ${ltype} *value) {\r\n\t${ctype} val;\r\n\tsize_t val_len = sizeof(val);\r\n\tint rc = zmq_getsockopt(sock, ${DEF}, &val, &val_len);\r\n\t*value = (${ltype})val;\r\n\treturn rc;\r\n]]\r\n\t\tend\r\n\t\tget = get .. \"}\\n\\n\"\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 110,
    "text": "if opt.otype == 'BLOB' then\r\n\t\t\tget = [[\r\nZMQ_Error ${c_get}(ZMQ_Socket *sock, char *value, size_t *len) {\r\n\treturn zmq_getsockopt(sock, ${DEF}, value, len);\r\n]]\r\n\t\telseif opt.ctype == opt.ltype then\r\n\t\t\tget = [[\r\nZMQ_Error ${c_get}(ZMQ_Socket *sock, ${ltype} *value) {\r\n\tsize_t val_len = sizeof(${ltype});\r\n\treturn zmq_getsockopt(sock, ${DEF}, value, &val_len);\r\n]]\r\n\t\telse\r\n\t\t\tget = [[\r\nZMQ_Error ${c_get}(ZMQ_Socket *sock, ${ltype} *value) {\r\n\t${ctype} val;\r\n\tsize_t val_len = sizeof(val);\r\n\tint rc = zmq_getsockopt(sock, ${DEF}, &val, &val_len);\r\n\t*value = (${ltype})val;\r\n\treturn rc;\r\n]]\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 111,
    "text": "get = [[\r\nZMQ_Error ${c_get}(ZMQ_Socket *sock, char *value, size_t *len) {\r\n\treturn zmq_getsockopt(sock, ${DEF}, value, len);\r\n]]",
    "type": "statement:assign"
  }, {
    "id": 112,
    "text": "get = [[\r\nZMQ_Error ${c_get}(ZMQ_Socket *sock, ${ltype} *value) {\r\n\tsize_t val_len = sizeof(${ltype});\r\n\treturn zmq_getsockopt(sock, ${DEF}, value, &val_len);\r\n]]",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "get = [[\r\nZMQ_Error ${c_get}(ZMQ_Socket *sock, ${ltype} *value) {\r\n\t${ctype} val;\r\n\tsize_t val_len = sizeof(val);\r\n\tint rc = zmq_getsockopt(sock, ${DEF}, &val, &val_len);\r\n\t*value = (${ltype})val;\r\n\treturn rc;\r\n]]",
    "type": "statement:assign"
  }, {
    "id": 114,
    "text": "get = get .. \"}\\n\\n\"",
    "type": "statement:assign"
  }, {
    "id": 115,
    "text": "local templ",
    "type": "statement:localassign"
  }, {
    "id": 116,
    "text": "if opt.custom then\r\n\t\ttempl = opt.custom\r\n\telse\r\n\t\ttempl = set .. get\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 117,
    "text": "templ = opt.custom",
    "type": "statement:assign"
  }, {
    "id": 118,
    "text": "templ = set .. get",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "add(options_c_code, template(opt,templ))",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 121,
    "text": "",
    "type": "function container"
  }, {
    "id": 122,
    "text": "c_export_method_call",
    "type": "global function"
  }, {
    "id": 123,
    "text": "var_out",
    "type": "global function"
  }, {
    "id": 124,
    "text": "method",
    "type": "global function"
  }, {
    "id": 125,
    "text": "ffi_cdef",
    "type": "global function"
  }, {
    "id": 126,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 127,
    "text": "ffi_source",
    "type": "global function"
  }, {
    "id": 128,
    "text": "c_method_call",
    "type": "global function"
  }, {
    "id": 129,
    "text": "c_source",
    "type": "global function"
  }, {
    "id": 130,
    "text": "object",
    "type": "global function"
  }, {
    "id": 131,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 132,
    "text": "destructor",
    "type": "global function"
  }, {
    "id": 133,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 134,
    "text": "func",
    "type": "global function"
  }, {
    "id": 135,
    "text": "var_in",
    "type": "global function"
  }, {
    "id": 136,
    "text": "",
    "type": "variable container"
  }, {
    "id": 137,
    "text": "",
    "type": "require container"
  }, {
    "id": 138,
    "text": "",
    "type": "local variable"
  }, {
    "id": 139,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 140,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 141,
    "text": "",
    "type": "string"
  }, {
    "id": 142,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 143,
    "text": "",
    "type": "string"
  }, {
    "id": 144,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 145,
    "text": "",
    "type": "string"
  }, {
    "id": 146,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 147,
    "text": "",
    "type": "string"
  }, {
    "id": 148,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 149,
    "text": "",
    "type": "string"
  }, {
    "id": 150,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 151,
    "text": "",
    "type": "string"
  }, {
    "id": 152,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 153,
    "text": "",
    "type": "string"
  }, {
    "id": 154,
    "text": "",
    "type": "local variable"
  }, {
    "id": 155,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 156,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 157,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 158,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 159,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 160,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 161,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 162,
    "text": "",
    "type": "local variable"
  }, {
    "id": 163,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 164,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 165,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 166,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 167,
    "text": "",
    "type": "local variable"
  }, {
    "id": 168,
    "text": "",
    "type": "number"
  }, {
    "id": 169,
    "text": "",
    "type": "local variable"
  }, {
    "id": 170,
    "text": "",
    "type": "n/a"
  }, {
    "id": 171,
    "text": "",
    "type": "local variable"
  }, {
    "id": 172,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 173,
    "text": "",
    "type": "local variable"
  }, {
    "id": 174,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 175,
    "text": "",
    "type": "local variable"
  }, {
    "id": 176,
    "text": "",
    "type": "number"
  }, {
    "id": 177,
    "text": "",
    "type": "local variable"
  }, {
    "id": 178,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 179,
    "text": "",
    "type": "local variable"
  }, {
    "id": 180,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 181,
    "text": "",
    "type": "local variable"
  }, {
    "id": 182,
    "text": "",
    "type": "global variable"
  }, {
    "id": 183,
    "text": "",
    "type": "n/a"
  }, {
    "id": 184,
    "text": "",
    "type": "global variable"
  }, {
    "id": 185,
    "text": "",
    "type": "n/a"
  }, {
    "id": 186,
    "text": "",
    "type": "global variable"
  }, {
    "id": 187,
    "text": "",
    "type": "n/a"
  } ]
}