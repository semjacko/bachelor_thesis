{
  "_filename": "ev_subscriber.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-zmq/examples/ev_subscriber.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 5
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 5
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 5
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 5
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 15,
    "label": "has",
    "to": 20
  }, {
    "from": 15,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 21,
    "label": "has",
    "to": 5
  }, {
    "from": 21,
    "label": "has",
    "to": 26
  }, {
    "from": 15,
    "label": "has",
    "to": 27
  }, {
    "from": 15,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 15,
    "label": "has",
    "to": 30
  }, {
    "from": 15,
    "label": "has",
    "to": 31
  }, {
    "from": 15,
    "label": "has",
    "to": 5
  }, {
    "from": 15,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 33,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 22
  }, {
    "from": 38,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 38,
    "label": "has",
    "to": 5
  }, {
    "from": 38,
    "label": "has",
    "to": 26
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 27
  }, {
    "from": 40,
    "label": "has",
    "to": 29
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 33,
    "label": "calls",
    "to": 47
  }, {
    "from": 15,
    "label": "calls",
    "to": 44
  }, {
    "from": 15,
    "label": "calls",
    "to": 45
  }, {
    "from": 33,
    "label": "calls",
    "to": 48
  }, {
    "from": 15,
    "label": "calls",
    "to": 50
  }, {
    "from": 42,
    "label": "calls",
    "to": 51
  }, {
    "from": 42,
    "label": "calls",
    "to": 51
  }, {
    "from": 42,
    "label": "calls",
    "to": 46
  }, {
    "from": 33,
    "label": "calls",
    "to": 49
  }, {
    "from": 42,
    "label": "calls",
    "to": 15
  }, {
    "from": 42,
    "label": "calls",
    "to": 15
  }, {
    "from": 1,
    "label": "contains",
    "to": 42
  }, {
    "from": 42,
    "label": "declares",
    "to": 2
  }, {
    "from": 42,
    "label": "declares",
    "to": 7
  }, {
    "from": 42,
    "label": "declares",
    "to": 9
  }, {
    "from": 42,
    "label": "declares",
    "to": 11
  }, {
    "from": 42,
    "label": "declares",
    "to": 13
  }, {
    "from": 42,
    "label": "declares",
    "to": 15
  }, {
    "from": 42,
    "label": "declares",
    "to": 33
  }, {
    "from": 42,
    "label": "declares",
    "to": 38
  }, {
    "from": 42,
    "label": "declares",
    "to": 40
  }, {
    "from": 1,
    "label": "contains",
    "to": 53
  }, {
    "from": 1,
    "label": "contains",
    "to": 54
  }, {
    "from": 53,
    "label": "initializes",
    "to": 55
  }, {
    "from": 55,
    "label": "assigns",
    "to": 56
  }, {
    "from": 53,
    "label": "initializes",
    "to": 57
  }, {
    "from": 57,
    "label": "assigns",
    "to": 58
  }, {
    "from": 53,
    "label": "initializes",
    "to": 59
  }, {
    "from": 59,
    "label": "assigns",
    "to": 60
  }, {
    "from": 53,
    "label": "initializes",
    "to": 61
  }, {
    "from": 61,
    "label": "assigns",
    "to": 62
  }, {
    "from": 53,
    "label": "initializes",
    "to": 63
  }, {
    "from": 63,
    "label": "assigns",
    "to": 64
  }, {
    "from": 53,
    "label": "initializes",
    "to": 65
  }, {
    "from": 65,
    "label": "assigns",
    "to": 66
  }, {
    "from": 53,
    "label": "initializes",
    "to": 67
  }, {
    "from": 53,
    "label": "initializes",
    "to": 68
  }, {
    "from": 54,
    "label": "initializes",
    "to": 69
  }, {
    "from": 69,
    "label": "requires",
    "to": 43
  }, {
    "from": 54,
    "label": "initializes",
    "to": 52
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "ev_subscriber",
    "type": "module"
  }, {
    "id": 2,
    "text": "function sub_worker_mt:close(...)\r\n    self.s_io_idle:stop(self.loop)\r\n    self.s_io_read:stop(self.loop)\r\n    return self.socket:close(...)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "self.s_io_idle:stop(self.loop)",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "self.s_io_read:stop(self.loop)",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "function sub_worker_mt:bind(...)\r\n    return self.socket:bind(...)\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function sub_worker_mt:connect(...)\r\n    return self.socket:connect(...)\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function sub_worker_mt:sub(topic)\r\n    return self.socket:setopt(zmq.SUBSCRIBE, topic)\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function sub_worker_mt:unsub(topic)\r\n    return self.socket:setopt(zmq.UNSUBSCRIBE, topic)\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "local function sub_worker(loop, ctx, msg_cb)\r\n    local s = ctx:socket(zmq.SUB)\r\n    local self = { loop = loop, socket = s, msg_cb = msg_cb }\r\n    setmetatable(self, sub_worker_mt)\r\n    -- create ev callbacks for recving data.\r\n    -- need idle watcher since ZeroMQ sockets are edge-triggered instead of level-triggered\r\n    local s_io_idle\r\n    local s_io_read\r\n    s_io_idle = ev.Idle.new(function()\r\n        local msg, err = s:recv(zmq.NOBLOCK)\r\n        if err == 'timeout' then\r\n            -- need to block on read IO\r\n            s_io_idle:stop(loop)\r\n            s_io_read:start(loop)\r\n            return\r\n        end\r\n        self:msg_cb(msg)\r\n    end)\r\n    s_io_idle:start(loop)\r\n    s_io_read = ev.IO.new(function()\r\n        s_io_idle:start(loop)\r\n        s_io_read:stop(loop)\r\n    end, s:getopt(zmq.FD), ev.READ)\r\n    self.s_io_idle = s_io_idle\r\n    self.s_io_read = s_io_read\r\n    return self\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "local s = ctx:socket(zmq.SUB)",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "local self = { loop = loop, socket = s, msg_cb = msg_cb }",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "setmetatable(self, sub_worker_mt)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "local s_io_idle",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "local s_io_read",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "s_io_idle = ev.Idle.new(function()\r\n        local msg, err = s:recv(zmq.NOBLOCK)\r\n        if err == 'timeout' then\r\n            -- need to block on read IO\r\n            s_io_idle:stop(loop)\r\n            s_io_read:start(loop)\r\n            return\r\n        end\r\n        self:msg_cb(msg)\r\n    end)",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "local msg, err = s:recv(zmq.NOBLOCK)",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "if err == 'timeout' then\r\n            -- need to block on read IO\r\n            s_io_idle:stop(loop)\r\n            s_io_read:start(loop)\r\n            return\r\n        end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "s_io_idle:stop(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "s_io_read:start(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "self:msg_cb(msg)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "s_io_idle:start(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "s_io_read = ev.IO.new(function()\r\n        s_io_idle:start(loop)\r\n        s_io_read:stop(loop)\r\n    end, s:getopt(zmq.FD), ev.READ)",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "s_io_read:stop(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "self.s_io_idle = s_io_idle",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "self.s_io_read = s_io_read",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "local function handle_msg(worker, msg)\r\n    local msg_id = tonumber(msg)\r\n    if math.mod(msg_id, 10000) == 0 then print(worker.id, msg_id) end\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "local msg_id = tonumber(msg)",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "if math.mod(msg_id, 10000) == 0 then print(worker.id, msg_id) end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "print(worker.id, msg_id)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function()\r\n        local msg, err = s:recv(zmq.NOBLOCK)\r\n        if err == 'timeout' then\r\n            -- need to block on read IO\r\n            s_io_idle:stop(loop)\r\n            s_io_read:start(loop)\r\n            return\r\n        end\r\n        self:msg_cb(msg)\r\n    end",
    "type": "function"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function()\r\n        s_io_idle:start(loop)\r\n        s_io_read:stop(loop)\r\n    end",
    "type": "function"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "",
    "type": "function container"
  }, {
    "id": 43,
    "text": "ev",
    "type": "module"
  }, {
    "id": 44,
    "text": "Idle.new",
    "type": "global function"
  }, {
    "id": 45,
    "text": "IO.new",
    "type": "global function"
  }, {
    "id": 46,
    "text": "init",
    "type": "global function"
  }, {
    "id": 47,
    "text": "mod",
    "type": "global function"
  }, {
    "id": 48,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 49,
    "text": "print",
    "type": "global function"
  }, {
    "id": 50,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 51,
    "text": "require",
    "type": "global function"
  }, {
    "id": 52,
    "text": "",
    "type": "global variable"
  }, {
    "id": 53,
    "text": "",
    "type": "variable container"
  }, {
    "id": 54,
    "text": "",
    "type": "require container"
  }, {
    "id": 55,
    "text": "",
    "type": "local variable"
  }, {
    "id": 56,
    "text": "",
    "type": "n/a"
  }, {
    "id": 57,
    "text": "",
    "type": "local variable"
  }, {
    "id": 58,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 59,
    "text": "",
    "type": "local variable"
  }, {
    "id": 60,
    "text": "",
    "type": "n/a"
  }, {
    "id": 61,
    "text": "",
    "type": "local variable"
  }, {
    "id": 62,
    "text": "",
    "type": "n/a"
  }, {
    "id": 63,
    "text": "",
    "type": "local variable"
  }, {
    "id": 64,
    "text": "",
    "type": "n/a"
  }, {
    "id": 65,
    "text": "",
    "type": "global variable"
  }, {
    "id": 66,
    "text": "",
    "type": "n/a"
  }, {
    "id": 67,
    "text": "",
    "type": "global variable"
  }, {
    "id": 68,
    "text": "",
    "type": "global variable"
  }, {
    "id": 69,
    "text": "",
    "type": "require local variable"
  } ]
}