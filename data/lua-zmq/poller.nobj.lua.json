{
  "_filename": "poller.nobj.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-zmq/src/poller.nobj.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 12,
    "label": "calls",
    "to": 22
  }, {
    "from": 12,
    "label": "calls",
    "to": 23
  }, {
    "from": 12,
    "label": "calls",
    "to": 10
  }, {
    "from": 1,
    "label": "contains",
    "to": 12
  }, {
    "from": 12,
    "label": "declares",
    "to": 2
  }, {
    "from": 12,
    "label": "declares",
    "to": 3
  }, {
    "from": 12,
    "label": "declares",
    "to": 4
  }, {
    "from": 12,
    "label": "declares",
    "to": 5
  }, {
    "from": 12,
    "label": "declares",
    "to": 6
  }, {
    "from": 12,
    "label": "declares",
    "to": 7
  }, {
    "from": 12,
    "label": "declares",
    "to": 8
  }, {
    "from": 12,
    "label": "declares",
    "to": 9
  }, {
    "from": 12,
    "label": "declares",
    "to": 10
  }, {
    "from": 12,
    "label": "declares",
    "to": 11
  }, {
    "from": 12,
    "label": "calls",
    "to": 20
  }, {
    "from": 12,
    "label": "calls",
    "to": 16
  }, {
    "from": 12,
    "label": "calls",
    "to": 16
  }, {
    "from": 12,
    "label": "calls",
    "to": 16
  }, {
    "from": 12,
    "label": "calls",
    "to": 16
  }, {
    "from": 12,
    "label": "calls",
    "to": 16
  }, {
    "from": 12,
    "label": "calls",
    "to": 13
  }, {
    "from": 12,
    "label": "calls",
    "to": 13
  }, {
    "from": 12,
    "label": "calls",
    "to": 13
  }, {
    "from": 12,
    "label": "calls",
    "to": 13
  }, {
    "from": 12,
    "label": "calls",
    "to": 13
  }, {
    "from": 12,
    "label": "calls",
    "to": 13
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 18
  }, {
    "from": 12,
    "label": "calls",
    "to": 19
  }, {
    "from": 12,
    "label": "calls",
    "to": 19
  }, {
    "from": 12,
    "label": "calls",
    "to": 19
  }, {
    "from": 12,
    "label": "calls",
    "to": 19
  }, {
    "from": 12,
    "label": "calls",
    "to": 19
  }, {
    "from": 12,
    "label": "calls",
    "to": 19
  }, {
    "from": 12,
    "label": "calls",
    "to": 19
  }, {
    "from": 12,
    "label": "calls",
    "to": 19
  }, {
    "from": 12,
    "label": "calls",
    "to": 19
  }, {
    "from": 12,
    "label": "calls",
    "to": 19
  }, {
    "from": 12,
    "label": "calls",
    "to": 17
  }, {
    "from": 12,
    "label": "calls",
    "to": 17
  }, {
    "from": 12,
    "label": "calls",
    "to": 17
  }, {
    "from": 12,
    "label": "calls",
    "to": 15
  }, {
    "from": 12,
    "label": "calls",
    "to": 15
  }, {
    "from": 12,
    "label": "calls",
    "to": 24
  }, {
    "from": 12,
    "label": "calls",
    "to": 24
  }, {
    "from": 12,
    "label": "calls",
    "to": 24
  }, {
    "from": 12,
    "label": "calls",
    "to": 24
  }, {
    "from": 12,
    "label": "calls",
    "to": 24
  }, {
    "from": 12,
    "label": "calls",
    "to": 24
  }, {
    "from": 12,
    "label": "calls",
    "to": 24
  }, {
    "from": 12,
    "label": "calls",
    "to": 21
  }, {
    "from": 1,
    "label": "contains",
    "to": 25
  }, {
    "from": 1,
    "label": "contains",
    "to": 26
  }, {
    "from": 25,
    "label": "initializes",
    "to": 27
  }, {
    "from": 25,
    "label": "initializes",
    "to": 28
  }, {
    "from": 25,
    "label": "initializes",
    "to": 29
  }, {
    "from": 25,
    "label": "initializes",
    "to": 30
  }, {
    "from": 25,
    "label": "initializes",
    "to": 31
  }, {
    "from": 25,
    "label": "initializes",
    "to": 32
  }, {
    "from": 26,
    "label": "initializes",
    "to": 33
  }, {
    "from": 1,
    "label": "provides",
    "to": 34
  }, {
    "from": 34,
    "label": "provides",
    "to": 35
  }, {
    "from": 1,
    "label": "contains",
    "to": 36
  }, {
    "from": 1,
    "label": "contains",
    "to": 37
  }, {
    "from": 36,
    "label": "initializes",
    "to": 38
  }, {
    "from": 38,
    "label": "assigns",
    "to": 39
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "poller",
    "type": "module"
  }, {
    "id": 2,
    "text": "function poller_mt:add(sock, events, cb)\r\n\tlocal id = self.poller:add(sock, events)\r\n\tself.callbacks[id] = function(revents) return cb(sock, revents) end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function(revents) return cb(sock, revents) end",
    "type": "function"
  }, {
    "id": 4,
    "text": "function poller_mt:modify(sock, events, cb)\r\n\tlocal id\r\n\tif events ~= 0 and cb then\r\n\t\tid = self.poller:modify(sock, events)\r\n\t\tself.callbacks[id] = function(revents) return cb(sock, revents) end\r\n\telse\r\n\t\tid = self:remove(sock)\r\n\t\tself.callbacks[id] = nil\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function(revents) return cb(sock, revents) end",
    "type": "function"
  }, {
    "id": 6,
    "text": "function poller_mt:remove(sock)\r\n\tlocal id = self.poller:remove(sock)\r\n\tself.callbacks[id] = nil\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function poller_mt:poll(timeout)\r\n\tlocal poller = self.poller\r\n\tlocal count, err = poller:poll(timeout)\r\n\tif not count then\r\n\t\treturn nil, err\r\n\tend\r\n\tlocal callbacks = self.callbacks\r\n\tfor i=1,count do\r\n\t\tlocal id, revents = poller:next_revents_idx()\r\n\t\tcallbacks[id](revents)\r\n\tend\r\n\treturn count\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function poller_mt:start()\r\n\tself.is_running = true\r\n\twhile self.is_running do\r\n\t\tstatus, err = self:poll(-1)\r\n\t\tif not status then\r\n\t\t\treturn false, err\r\n\t\tend\r\n\tend\r\n\treturn true\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function poller_mt:stop()\r\n\tself.is_running = false\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "function M.new(pre_alloc)\r\n\treturn setmetatable({\r\n\t\tpoller = zmq.ZMQ_Poller(pre_alloc),\r\n\t\tcallbacks = {},\r\n\t}, poller_mt)\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "function(tab, ...) return M.new(...) end",
    "type": "function"
  }, {
    "id": 12,
    "text": "",
    "type": "function container"
  }, {
    "id": 13,
    "text": "var_out",
    "type": "global function"
  }, {
    "id": 14,
    "text": "method",
    "type": "global function"
  }, {
    "id": 15,
    "text": "ffi_cdef",
    "type": "global function"
  }, {
    "id": 16,
    "text": "ffi_source",
    "type": "global function"
  }, {
    "id": 17,
    "text": "c_method_call",
    "type": "global function"
  }, {
    "id": 18,
    "text": "constructor",
    "type": "global function"
  }, {
    "id": 19,
    "text": "c_source",
    "type": "global function"
  }, {
    "id": 20,
    "text": "object",
    "type": "global function"
  }, {
    "id": 21,
    "text": "destructor",
    "type": "global function"
  }, {
    "id": 22,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 23,
    "text": "require",
    "type": "global function"
  }, {
    "id": 24,
    "text": "var_in",
    "type": "global function"
  }, {
    "id": 25,
    "text": "",
    "type": "variable container"
  }, {
    "id": 26,
    "text": "",
    "type": "require container"
  }, {
    "id": 27,
    "text": "",
    "type": "local variable"
  }, {
    "id": 28,
    "text": "",
    "type": "local variable"
  }, {
    "id": 29,
    "text": "",
    "type": "local variable"
  }, {
    "id": 30,
    "text": "",
    "type": "local variable"
  }, {
    "id": 31,
    "text": "",
    "type": "local variable"
  }, {
    "id": 32,
    "text": "",
    "type": "global variable"
  }, {
    "id": 33,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 34,
    "text": "",
    "type": "interface container"
  }, {
    "id": 35,
    "text": "",
    "type": "interface"
  }, {
    "id": 36,
    "text": "",
    "type": "variable container"
  }, {
    "id": 37,
    "text": "",
    "type": "require container"
  }, {
    "id": 38,
    "text": "",
    "type": "local variable"
  }, {
    "id": 39,
    "text": "",
    "type": "string"
  } ]
}