{
  "_filename": "tap.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-zmq/ws/tap.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 2,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 12
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 14
  }, {
    "from": 22,
    "label": "has",
    "to": 15
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 12
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 4
  }, {
    "from": 26,
    "label": "has",
    "to": 6
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 12
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 14
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 12
  }, {
    "from": 26,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 12
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 14
  }, {
    "from": 33,
    "label": "has",
    "to": 29
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 12
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 38
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 40,
    "label": "has",
    "to": 45
  }, {
    "from": 2,
    "label": "calls",
    "to": 52
  }, {
    "from": 26,
    "label": "calls",
    "to": 52
  }, {
    "from": 46,
    "label": "calls",
    "to": 51
  }, {
    "from": 2,
    "label": "calls",
    "to": 47
  }, {
    "from": 46,
    "label": "calls",
    "to": 2
  }, {
    "from": 26,
    "label": "calls",
    "to": 49
  }, {
    "from": 46,
    "label": "calls",
    "to": 48
  }, {
    "from": 2,
    "label": "calls",
    "to": 50
  }, {
    "from": 26,
    "label": "calls",
    "to": 50
  }, {
    "from": 46,
    "label": "calls",
    "to": 26
  }, {
    "from": 1,
    "label": "contains",
    "to": 46
  }, {
    "from": 46,
    "label": "declares",
    "to": 2
  }, {
    "from": 46,
    "label": "declares",
    "to": 18
  }, {
    "from": 46,
    "label": "declares",
    "to": 20
  }, {
    "from": 46,
    "label": "declares",
    "to": 22
  }, {
    "from": 46,
    "label": "declares",
    "to": 24
  }, {
    "from": 46,
    "label": "declares",
    "to": 26
  }, {
    "from": 46,
    "label": "declares",
    "to": 31
  }, {
    "from": 46,
    "label": "declares",
    "to": 33
  }, {
    "from": 46,
    "label": "declares",
    "to": 35
  }, {
    "from": 46,
    "label": "declares",
    "to": 37
  }, {
    "from": 46,
    "label": "declares",
    "to": 40
  }, {
    "from": 53,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 54
  }, {
    "from": 1,
    "label": "contains",
    "to": 55
  }, {
    "from": 54,
    "label": "initializes",
    "to": 56
  }, {
    "from": 56,
    "label": "assigns",
    "to": 57
  }, {
    "from": 54,
    "label": "initializes",
    "to": 58
  }, {
    "from": 58,
    "label": "assigns",
    "to": 59
  }, {
    "from": 54,
    "label": "initializes",
    "to": 60
  }, {
    "from": 60,
    "label": "assigns",
    "to": 61
  }, {
    "from": 54,
    "label": "initializes",
    "to": 62
  }, {
    "from": 62,
    "label": "assigns",
    "to": 63
  }, {
    "from": 1,
    "label": "provides",
    "to": 64
  }, {
    "from": 64,
    "label": "provides",
    "to": 65
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "tap",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function create_window_tap(name, create)\r\n\twin_instances = win_instances + 1\r\n\r\n\tlocal td, tap_filter, tap_type = create()\r\n\r\n\t-- tap's output window.\r\n\tlocal win = TextWindow.new(name .. \" \" .. win_instances)\r\n\r\n\t-- this tap will be local to the menu_function that called it\r\n\tlocal tap = Listener.new(tap_type, tap_filter)\r\n\r\n\t-- callback to remove the tap when the text window closes\r\n\tfunction remove_tap()\r\n\t\tif tap and tap.remove then\r\n\t\t\ttap:remove()\r\n\t\tend\r\n\tend\r\n\r\n\t-- make sure the tap doesn't hang around after the window was closed\r\n\twin:set_atclose(remove_tap)\r\n\r\n\t-- this function will be called for every packet\r\n\tfunction tap.packet(pinfo,tvb, tree, tapdata)\r\n\t\treturn td:packet(pinfo, tvb, tree, tapdata)\r\n\tend\r\n\r\n\t-- this function will be called once every few seconds to redraw the window\r\n\tfunction tap.draw()\r\n\t\tlocal text = td:draw()\r\n\t\twin:set(text)\r\n\tend\r\n\r\n\t\t-- this function will be called at the end of the capture run.\r\n\tfunction tap.reset()\r\n\t\treturn td:reset()\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "win_instances = win_instances + 1",
    "type": "statement:assign"
  }, {
    "id": 4,
    "text": "local td, tap_filter, tap_type = create()",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local win = TextWindow.new(name .. \" \" .. win_instances)",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "local tap = Listener.new(tap_type, tap_filter)",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "function remove_tap()\r\n\t\tif tap and tap.remove then\r\n\t\t\ttap:remove()\r\n\t\tend\r\n\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 8,
    "text": "if tap and tap.remove then\r\n\t\t\ttap:remove()\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "tap:remove()",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "win:set_atclose(remove_tap)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "function tap.packet(pinfo,tvb, tree, tapdata)\r\n\t\treturn td:packet(pinfo, tvb, tree, tapdata)\r\n\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 12,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 13,
    "text": "function tap.draw()\r\n\t\tlocal text = td:draw()\r\n\t\twin:set(text)\r\n\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 14,
    "text": "local text = td:draw()",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "win:set(text)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "function tap.reset()\r\n\t\treturn td:reset()\r\n\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function remove_tap()\r\n\t\tif tap and tap.remove then\r\n\t\t\ttap:remove()\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function tap.packet(pinfo,tvb, tree, tapdata)\r\n\t\treturn td:packet(pinfo, tvb, tree, tapdata)\r\n\tend",
    "type": "function"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function tap.draw()\r\n\t\tlocal text = td:draw()\r\n\t\twin:set(text)\r\n\tend",
    "type": "function"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function tap.reset()\r\n\t\treturn td:reset()\r\n\tend",
    "type": "function"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "local function create_tshark_tap(name, create)\r\n\r\n\tlocal td, tap_filter, tap_type = create()\r\n\r\n\t-- this tap will be local to the menu_function that called it\r\n\tlocal tap = Listener.new(tap_type, tap_filter)\r\n\r\n\t-- this function will be called for every packet\r\n\tfunction tap.packet(pinfo,tvb,tapdata)\r\n\t\treturn td:packet(pinfo, tvb, tapdata)\r\n\tend\r\n\r\n\t-- this function will be called once every few seconds to redraw the window\r\n\tfunction tap.draw()\r\n\t\tlocal text = td:draw()\r\n\t\tdebug(name .. \" results:\\n\" .. text)\r\n\tend\r\n\r\n\t\t-- this function will be called at the end of the capture run.\r\n\tfunction tap.reset()\r\n\t\treturn td:reset()\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "function tap.packet(pinfo,tvb,tapdata)\r\n\t\treturn td:packet(pinfo, tvb, tapdata)\r\n\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 28,
    "text": "function tap.draw()\r\n\t\tlocal text = td:draw()\r\n\t\tdebug(name .. \" results:\\n\" .. text)\r\n\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 29,
    "text": "debug(name .. \" results:\\n\" .. text)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function tap.packet(pinfo,tvb,tapdata)\r\n\t\treturn td:packet(pinfo, tvb, tapdata)\r\n\tend",
    "type": "function"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function tap.draw()\r\n\t\tlocal text = td:draw()\r\n\t\tdebug(name .. \" results:\\n\" .. text)\r\n\tend",
    "type": "function"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function tap.reset()\r\n\t\treturn td:reset()\r\n\tend",
    "type": "function"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function()\r\n\t\t\tcreate_window_tap(name, create)\r\n\t\tend",
    "type": "function"
  }, {
    "id": 38,
    "text": "create_window_tap(name, create)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function (name, create)\r\n\tif gui_enabled() then\r\n\t\t-- menu callback.\r\n\t\tlocal create_tap = function()\r\n\t\t\tcreate_window_tap(name, create)\r\n\t\tend\r\n\t\t-- register menu item if running from wireshark\r\n\t\tregister_menu(name, create_tap, MENU_TOOLS_UNSORTED)\r\n\telse\r\n\t\t-- we are running from tshark, create a non-gui tap now.\r\n\t\tcreate_tshark_tap(name, create)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "if gui_enabled() then\r\n\t\t-- menu callback.\r\n\t\tlocal create_tap = function()\r\n\t\t\tcreate_window_tap(name, create)\r\n\t\tend\r\n\t\t-- register menu item if running from wireshark\r\n\t\tregister_menu(name, create_tap, MENU_TOOLS_UNSORTED)\r\n\telse\r\n\t\t-- we are running from tshark, create a non-gui tap now.\r\n\t\tcreate_tshark_tap(name, create)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "local create_tap = function()\r\n\t\t\tcreate_window_tap(name, create)\r\n\t\tend",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "register_menu(name, create_tap, MENU_TOOLS_UNSORTED)",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "create_tshark_tap(name, create)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "",
    "type": "function container"
  }, {
    "id": 47,
    "text": "new",
    "type": "global function"
  }, {
    "id": 48,
    "text": "gui_enabled",
    "type": "global function"
  }, {
    "id": 49,
    "text": "debug",
    "type": "global function"
  }, {
    "id": 50,
    "text": "create",
    "type": "global function"
  }, {
    "id": 51,
    "text": "register_menu",
    "type": "global function"
  }, {
    "id": 52,
    "text": "new",
    "type": "global function"
  }, {
    "id": 53,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 54,
    "text": "",
    "type": "variable container"
  }, {
    "id": 55,
    "text": "",
    "type": "require container"
  }, {
    "id": 56,
    "text": "",
    "type": "local variable"
  }, {
    "id": 57,
    "text": "",
    "type": "n/a"
  }, {
    "id": 58,
    "text": "",
    "type": "local variable"
  }, {
    "id": 59,
    "text": "",
    "type": "n/a"
  }, {
    "id": 60,
    "text": "",
    "type": "local variable"
  }, {
    "id": 61,
    "text": "",
    "type": "n/a"
  }, {
    "id": 62,
    "text": "",
    "type": "local variable"
  }, {
    "id": 63,
    "text": "",
    "type": "number"
  }, {
    "id": 64,
    "text": "",
    "type": "interface container"
  }, {
    "id": 65,
    "text": "",
    "type": "interface"
  } ]
}