{
  "_filename": "test_file_loader.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/busted/busted/modules/test_file_loader.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 8,
    "label": "has",
    "to": 12
  }, {
    "from": 8,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 8,
    "label": "has",
    "to": 12
  }, {
    "from": 8,
    "label": "has",
    "to": 12
  }, {
    "from": 4,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 12
  }, {
    "from": 15,
    "label": "has",
    "to": 12
  }, {
    "from": 4,
    "label": "has",
    "to": 17
  }, {
    "from": 4,
    "label": "has",
    "to": 18
  }, {
    "from": 2,
    "label": "has",
    "to": 19
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 21,
    "label": "has",
    "to": 12
  }, {
    "from": 21,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 12
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 30,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 37,
    "label": "has",
    "to": 41
  }, {
    "from": 30,
    "label": "has",
    "to": 12
  }, {
    "from": 30,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 9
  }, {
    "from": 43,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 43,
    "label": "has",
    "to": 12
  }, {
    "from": 43,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 43,
    "label": "has",
    "to": 12
  }, {
    "from": 43,
    "label": "has",
    "to": 12
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 16
  }, {
    "from": 45,
    "label": "has",
    "to": 12
  }, {
    "from": 45,
    "label": "has",
    "to": 12
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 47,
    "label": "has",
    "to": 51
  }, {
    "from": 47,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 47,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 3
  }, {
    "from": 55,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 8,
    "label": "has",
    "to": 12
  }, {
    "from": 8,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 8,
    "label": "has",
    "to": 12
  }, {
    "from": 8,
    "label": "has",
    "to": 12
  }, {
    "from": 4,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 12
  }, {
    "from": 15,
    "label": "has",
    "to": 12
  }, {
    "from": 4,
    "label": "has",
    "to": 17
  }, {
    "from": 4,
    "label": "has",
    "to": 18
  }, {
    "from": 55,
    "label": "has",
    "to": 19
  }, {
    "from": 55,
    "label": "has",
    "to": 12
  }, {
    "from": 47,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 22
  }, {
    "from": 56,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 56,
    "label": "has",
    "to": 12
  }, {
    "from": 47,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 57,
    "label": "has",
    "to": 12
  }, {
    "from": 47,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 31
  }, {
    "from": 58,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 58,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 37,
    "label": "has",
    "to": 41
  }, {
    "from": 58,
    "label": "has",
    "to": 12
  }, {
    "from": 47,
    "label": "has",
    "to": 12
  }, {
    "from": 47,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "calls",
    "to": 68
  }, {
    "from": 60,
    "label": "calls",
    "to": 75
  }, {
    "from": 60,
    "label": "calls",
    "to": 74
  }, {
    "from": 60,
    "label": "calls",
    "to": 74
  }, {
    "from": 60,
    "label": "calls",
    "to": 70
  }, {
    "from": 60,
    "label": "calls",
    "to": 63
  }, {
    "from": 60,
    "label": "calls",
    "to": 63
  }, {
    "from": 60,
    "label": "calls",
    "to": 69
  }, {
    "from": 60,
    "label": "calls",
    "to": 69
  }, {
    "from": 60,
    "label": "calls",
    "to": 72
  }, {
    "from": 60,
    "label": "calls",
    "to": 61
  }, {
    "from": 60,
    "label": "calls",
    "to": 21
  }, {
    "from": 60,
    "label": "calls",
    "to": 67
  }, {
    "from": 60,
    "label": "calls",
    "to": 67
  }, {
    "from": 60,
    "label": "calls",
    "to": 67
  }, {
    "from": 60,
    "label": "calls",
    "to": 67
  }, {
    "from": 60,
    "label": "calls",
    "to": 73
  }, {
    "from": 60,
    "label": "calls",
    "to": 26
  }, {
    "from": 60,
    "label": "calls",
    "to": 66
  }, {
    "from": 60,
    "label": "calls",
    "to": 66
  }, {
    "from": 60,
    "label": "calls",
    "to": 71
  }, {
    "from": 60,
    "label": "calls",
    "to": 2
  }, {
    "from": 60,
    "label": "calls",
    "to": 62
  }, {
    "from": 60,
    "label": "calls",
    "to": 65
  }, {
    "from": 60,
    "label": "calls",
    "to": 77
  }, {
    "from": 60,
    "label": "calls",
    "to": 77
  }, {
    "from": 60,
    "label": "calls",
    "to": 77
  }, {
    "from": 60,
    "label": "calls",
    "to": 77
  }, {
    "from": 60,
    "label": "calls",
    "to": 77
  }, {
    "from": 60,
    "label": "calls",
    "to": 64
  }, {
    "from": 60,
    "label": "calls",
    "to": 76
  }, {
    "from": 1,
    "label": "contains",
    "to": 60
  }, {
    "from": 60,
    "label": "declares",
    "to": 2
  }, {
    "from": 60,
    "label": "declares",
    "to": 21
  }, {
    "from": 60,
    "label": "declares",
    "to": 26
  }, {
    "from": 60,
    "label": "declares",
    "to": 30
  }, {
    "from": 60,
    "label": "declares",
    "to": 43
  }, {
    "from": 60,
    "label": "declares",
    "to": 45
  }, {
    "from": 60,
    "label": "declares",
    "to": 47
  }, {
    "from": 1,
    "label": "contains",
    "to": 80
  }, {
    "from": 1,
    "label": "contains",
    "to": 81
  }, {
    "from": 81,
    "label": "initializes",
    "to": 82
  }, {
    "from": 82,
    "label": "requires",
    "to": 83
  }, {
    "from": 81,
    "label": "initializes",
    "to": 84
  }, {
    "from": 84,
    "label": "requires",
    "to": 79
  }, {
    "from": 81,
    "label": "initializes",
    "to": 85
  }, {
    "from": 85,
    "label": "requires",
    "to": 86
  }, {
    "from": 81,
    "label": "initializes",
    "to": 87
  }, {
    "from": 87,
    "label": "requires",
    "to": 78
  }, {
    "from": 81,
    "label": "initializes",
    "to": 88
  }, {
    "from": 88,
    "label": "requires",
    "to": 89
  }, {
    "from": 1,
    "label": "provides",
    "to": 90
  }, {
    "from": 90,
    "label": "provides",
    "to": 91
  }, {
    "from": 92,
    "label": "requires",
    "to": 83
  }, {
    "from": 93,
    "label": "requires",
    "to": 83
  }, {
    "from": 94,
    "label": "requires",
    "to": 83
  }, {
    "from": 95,
    "label": "requires",
    "to": 1
  }, {
    "from": 96,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "test_file_loader",
    "type": "module"
  }, {
    "id": 2,
    "text": "function(rootFile, patterns, options)\r\n    local fileList\r\n\r\n    if path.isfile(rootFile) then\r\n      fileList = { rootFile }\r\n    elseif path.isdir(rootFile) then\r\n      local getfiles = options.recursive and dir.getallfiles or dir.getfiles\r\n      fileList = getfiles(rootFile)\r\n\r\n      fileList = tablex.filter(fileList, function(filename)\r\n        local basename = path.basename(filename)\r\n        for _, patt in ipairs(options.excludes) do\r\n          if patt ~= '' and basename:find(patt) then\r\n            return nil\r\n          end\r\n        end\r\n        for _, patt in ipairs(patterns) do\r\n          if basename:find(patt) then\r\n            return true\r\n          end\r\n        end\r\n        return #patterns == 0\r\n      end)\r\n\r\n      fileList = tablex.filter(fileList, function(filename)\r\n        if path.is_windows then\r\n          return not filename:find('%\\\\%.%w+.%w+')\r\n        else\r\n          return not filename:find('/%.%w+.%w+')\r\n        end\r\n      end)\r\n    else\r\n      busted.publish({ 'error' }, {}, nil, s('output.file_not_found'):format(rootFile), {})\r\n      fileList = {}\r\n    end\r\n\r\n    table.sort(fileList)\r\n    return fileList\r\n  end",
    "type": "function"
  }, {
    "id": 3,
    "text": "local fileList",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "if path.isfile(rootFile) then\r\n      fileList = { rootFile }\r\n    elseif path.isdir(rootFile) then\r\n      local getfiles = options.recursive and dir.getallfiles or dir.getfiles\r\n      fileList = getfiles(rootFile)\r\n\r\n      fileList = tablex.filter(fileList, function(filename)\r\n        local basename = path.basename(filename)\r\n        for _, patt in ipairs(options.excludes) do\r\n          if patt ~= '' and basename:find(patt) then\r\n            return nil\r\n          end\r\n        end\r\n        for _, patt in ipairs(patterns) do\r\n          if basename:find(patt) then\r\n            return true\r\n          end\r\n        end\r\n        return #patterns == 0\r\n      end)\r\n\r\n      fileList = tablex.filter(fileList, function(filename)\r\n        if path.is_windows then\r\n          return not filename:find('%\\\\%.%w+.%w+')\r\n        else\r\n          return not filename:find('/%.%w+.%w+')\r\n        end\r\n      end)\r\n    else\r\n      busted.publish({ 'error' }, {}, nil, s('output.file_not_found'):format(rootFile), {})\r\n      fileList = {}\r\n    end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "fileList = { rootFile }",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "local getfiles = options.recursive and dir.getallfiles or dir.getfiles",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "fileList = getfiles(rootFile)",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "fileList = tablex.filter(fileList, function(filename)\r\n        local basename = path.basename(filename)\r\n        for _, patt in ipairs(options.excludes) do\r\n          if patt ~= '' and basename:find(patt) then\r\n            return nil\r\n          end\r\n        end\r\n        for _, patt in ipairs(patterns) do\r\n          if basename:find(patt) then\r\n            return true\r\n          end\r\n        end\r\n        return #patterns == 0\r\n      end)",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "local basename = path.basename(filename)",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "for _, patt in ipairs(options.excludes) do\r\n          if patt ~= '' and basename:find(patt) then\r\n            return nil\r\n          end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 11,
    "text": "if patt ~= '' and basename:find(patt) then\r\n            return nil\r\n          end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 13,
    "text": "for _, patt in ipairs(patterns) do\r\n          if basename:find(patt) then\r\n            return true\r\n          end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 14,
    "text": "if basename:find(patt) then\r\n            return true\r\n          end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "fileList = tablex.filter(fileList, function(filename)\r\n        if path.is_windows then\r\n          return not filename:find('%\\\\%.%w+.%w+')\r\n        else\r\n          return not filename:find('/%.%w+.%w+')\r\n        end\r\n      end)",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "if path.is_windows then\r\n          return not filename:find('%\\\\%.%w+.%w+')\r\n        else\r\n          return not filename:find('/%.%w+.%w+')\r\n        end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "busted.publish({ 'error' }, {}, nil, s('output.file_not_found'):format(rootFile), {})",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "fileList = {}",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "table.sort(fileList)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function(rootFiles, patterns, options)\r\n    local fileList = {}\r\n    for _, root in ipairs(rootFiles) do\r\n      tablex.insertvalues(fileList, getTestFiles(root, patterns, options))\r\n    end\r\n    return fileList\r\n  end",
    "type": "function"
  }, {
    "id": 22,
    "text": "local fileList = {}",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "for _, root in ipairs(rootFiles) do\r\n      tablex.insertvalues(fileList, getTestFiles(root, patterns, options))\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 24,
    "text": "tablex.insertvalues(fileList, getTestFiles(root, patterns, options))",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function(busted, filename)\r\n    for _, v in pairs(fileLoaders) do\r\n      if v.match(busted, filename) then\r\n        return v.load(busted, filename)\r\n      end\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 27,
    "text": "for _, v in pairs(fileLoaders) do\r\n      if v.match(busted, filename) then\r\n        return v.load(busted, filename)\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 28,
    "text": "if v.match(busted, filename) then\r\n        return v.load(busted, filename)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function(rootFiles, patterns, options)\r\n    local fileList = getAllTestFiles(rootFiles, patterns, options)\r\n\r\n    for i, fileName in ipairs(fileList) do\r\n      local testFile, getTrace, rewriteMessage = loadTestFile(busted, fileName)\r\n\r\n      if testFile then\r\n        local file = setmetatable({\r\n          getTrace = getTrace,\r\n          rewriteMessage = rewriteMessage\r\n        }, {\r\n          __call = testFile\r\n        })\r\n\r\n        busted.executors.file(fileName, file)\r\n      end\r\n    end\r\n\r\n    if #fileList == 0 then\r\n      local pattern = patterns[1]\r\n      if #patterns > 1 then\r\n        pattern = '\\n\\t' .. table.concat(patterns, '\\n\\t')\r\n      end\r\n      busted.publish({ 'error' }, {}, nil, s('output.no_test_files_match'):format(pattern), {})\r\n    end\r\n\r\n    return fileList\r\n  end",
    "type": "function"
  }, {
    "id": 31,
    "text": "local fileList = getAllTestFiles(rootFiles, patterns, options)",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "for i, fileName in ipairs(fileList) do\r\n      local testFile, getTrace, rewriteMessage = loadTestFile(busted, fileName)\r\n\r\n      if testFile then\r\n        local file = setmetatable({\r\n          getTrace = getTrace,\r\n          rewriteMessage = rewriteMessage\r\n        }, {\r\n          __call = testFile\r\n        })\r\n\r\n        busted.executors.file(fileName, file)\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 33,
    "text": "local testFile, getTrace, rewriteMessage = loadTestFile(busted, fileName)",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "if testFile then\r\n        local file = setmetatable({\r\n          getTrace = getTrace,\r\n          rewriteMessage = rewriteMessage\r\n        }, {\r\n          __call = testFile\r\n        })\r\n\r\n        busted.executors.file(fileName, file)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "local file = setmetatable({\r\n          getTrace = getTrace,\r\n          rewriteMessage = rewriteMessage\r\n        }, {\r\n          __call = testFile\r\n        })",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "busted.executors.file(fileName, file)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "if #fileList == 0 then\r\n      local pattern = patterns[1]\r\n      if #patterns > 1 then\r\n        pattern = '\\n\\t' .. table.concat(patterns, '\\n\\t')\r\n      end\r\n      busted.publish({ 'error' }, {}, nil, s('output.no_test_files_match'):format(pattern), {})\r\n    end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "local pattern = patterns[1]",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "if #patterns > 1 then\r\n        pattern = '\\n\\t' .. table.concat(patterns, '\\n\\t')\r\n      end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "pattern = '\\n\\t' .. table.concat(patterns, '\\n\\t')",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "busted.publish({ 'error' }, {}, nil, s('output.no_test_files_match'):format(pattern), {})",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function(filename)\r\n        local basename = path.basename(filename)\r\n        for _, patt in ipairs(options.excludes) do\r\n          if patt ~= '' and basename:find(patt) then\r\n            return nil\r\n          end\r\n        end\r\n        for _, patt in ipairs(patterns) do\r\n          if basename:find(patt) then\r\n            return true\r\n          end\r\n        end\r\n        return #patterns == 0\r\n      end",
    "type": "function"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function(filename)\r\n        if path.is_windows then\r\n          return not filename:find('%\\\\%.%w+.%w+')\r\n        else\r\n          return not filename:find('/%.%w+.%w+')\r\n        end\r\n      end",
    "type": "function"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function(busted, loaders)\r\n  local path = require 'pl.path'\r\n  local dir = require 'pl.dir'\r\n  local tablex = require 'pl.tablex'\r\n  local fileLoaders = {}\r\n\r\n  for _, v in pairs(loaders) do\r\n    local loader = require('busted.modules.files.'..v)\r\n    fileLoaders[#fileLoaders+1] = loader\r\n  end\r\n\r\n  local getTestFiles = function(rootFile, patterns, options)\r\n    local fileList\r\n\r\n    if path.isfile(rootFile) then\r\n      fileList = { rootFile }\r\n    elseif path.isdir(rootFile) then\r\n      local getfiles = options.recursive and dir.getallfiles or dir.getfiles\r\n      fileList = getfiles(rootFile)\r\n\r\n      fileList = tablex.filter(fileList, function(filename)\r\n        local basename = path.basename(filename)\r\n        for _, patt in ipairs(options.excludes) do\r\n          if patt ~= '' and basename:find(patt) then\r\n            return nil\r\n          end\r\n        end\r\n        for _, patt in ipairs(patterns) do\r\n          if basename:find(patt) then\r\n            return true\r\n          end\r\n        end\r\n        return #patterns == 0\r\n      end)\r\n\r\n      fileList = tablex.filter(fileList, function(filename)\r\n        if path.is_windows then\r\n          return not filename:find('%\\\\%.%w+.%w+')\r\n        else\r\n          return not filename:find('/%.%w+.%w+')\r\n        end\r\n      end)\r\n    else\r\n      busted.publish({ 'error' }, {}, nil, s('output.file_not_found'):format(rootFile), {})\r\n      fileList = {}\r\n    end\r\n\r\n    table.sort(fileList)\r\n    return fileList\r\n  end\r\n\r\n  local getAllTestFiles = function(rootFiles, patterns, options)\r\n    local fileList = {}\r\n    for _, root in ipairs(rootFiles) do\r\n      tablex.insertvalues(fileList, getTestFiles(root, patterns, options))\r\n    end\r\n    return fileList\r\n  end\r\n\r\n  -- runs a testfile, loading its tests\r\n  local loadTestFile = function(busted, filename)\r\n    for _, v in pairs(fileLoaders) do\r\n      if v.match(busted, filename) then\r\n        return v.load(busted, filename)\r\n      end\r\n    end\r\n  end\r\n\r\n  local loadTestFiles = function(rootFiles, patterns, options)\r\n    local fileList = getAllTestFiles(rootFiles, patterns, options)\r\n\r\n    for i, fileName in ipairs(fileList) do\r\n      local testFile, getTrace, rewriteMessage = loadTestFile(busted, fileName)\r\n\r\n      if testFile then\r\n        local file = setmetatable({\r\n          getTrace = getTrace,\r\n          rewriteMessage = rewriteMessage\r\n        }, {\r\n          __call = testFile\r\n        })\r\n\r\n        busted.executors.file(fileName, file)\r\n      end\r\n    end\r\n\r\n    if #fileList == 0 then\r\n      local pattern = patterns[1]\r\n      if #patterns > 1 then\r\n        pattern = '\\n\\t' .. table.concat(patterns, '\\n\\t')\r\n      end\r\n      busted.publish({ 'error' }, {}, nil, s('output.no_test_files_match'):format(pattern), {})\r\n    end\r\n\r\n    return fileList\r\n  end\r\n\r\n  return loadTestFiles, loadTestFile, getAllTestFiles\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "local path = require 'pl.path'",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "local dir = require 'pl.dir'",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "local tablex = require 'pl.tablex'",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "local fileLoaders = {}",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "for _, v in pairs(loaders) do\r\n    local loader = require('busted.modules.files.'..v)\r\n    fileLoaders[#fileLoaders+1] = loader\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 53,
    "text": "local loader = require('busted.modules.files.'..v)",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "fileLoaders[#fileLoaders+1] = loader",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "local getTestFiles = function(rootFile, patterns, options)\r\n    local fileList\r\n\r\n    if path.isfile(rootFile) then\r\n      fileList = { rootFile }\r\n    elseif path.isdir(rootFile) then\r\n      local getfiles = options.recursive and dir.getallfiles or dir.getfiles\r\n      fileList = getfiles(rootFile)\r\n\r\n      fileList = tablex.filter(fileList, function(filename)\r\n        local basename = path.basename(filename)\r\n        for _, patt in ipairs(options.excludes) do\r\n          if patt ~= '' and basename:find(patt) then\r\n            return nil\r\n          end\r\n        end\r\n        for _, patt in ipairs(patterns) do\r\n          if basename:find(patt) then\r\n            return true\r\n          end\r\n        end\r\n        return #patterns == 0\r\n      end)\r\n\r\n      fileList = tablex.filter(fileList, function(filename)\r\n        if path.is_windows then\r\n          return not filename:find('%\\\\%.%w+.%w+')\r\n        else\r\n          return not filename:find('/%.%w+.%w+')\r\n        end\r\n      end)\r\n    else\r\n      busted.publish({ 'error' }, {}, nil, s('output.file_not_found'):format(rootFile), {})\r\n      fileList = {}\r\n    end\r\n\r\n    table.sort(fileList)\r\n    return fileList\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "local getAllTestFiles = function(rootFiles, patterns, options)\r\n    local fileList = {}\r\n    for _, root in ipairs(rootFiles) do\r\n      tablex.insertvalues(fileList, getTestFiles(root, patterns, options))\r\n    end\r\n    return fileList\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "local loadTestFile = function(busted, filename)\r\n    for _, v in pairs(fileLoaders) do\r\n      if v.match(busted, filename) then\r\n        return v.load(busted, filename)\r\n      end\r\n    end\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "local loadTestFiles = function(rootFiles, patterns, options)\r\n    local fileList = getAllTestFiles(rootFiles, patterns, options)\r\n\r\n    for i, fileName in ipairs(fileList) do\r\n      local testFile, getTrace, rewriteMessage = loadTestFile(busted, fileName)\r\n\r\n      if testFile then\r\n        local file = setmetatable({\r\n          getTrace = getTrace,\r\n          rewriteMessage = rewriteMessage\r\n        }, {\r\n          __call = testFile\r\n        })\r\n\r\n        busted.executors.file(fileName, file)\r\n      end\r\n    end\r\n\r\n    if #fileList == 0 then\r\n      local pattern = patterns[1]\r\n      if #patterns > 1 then\r\n        pattern = '\\n\\t' .. table.concat(patterns, '\\n\\t')\r\n      end\r\n      busted.publish({ 'error' }, {}, nil, s('output.no_test_files_match'):format(pattern), {})\r\n    end\r\n\r\n    return fileList\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "",
    "type": "function container"
  }, {
    "id": 61,
    "text": "isdir",
    "type": "global function"
  }, {
    "id": 62,
    "text": "insertvalues",
    "type": "global function"
  }, {
    "id": 63,
    "text": "publish",
    "type": "global function"
  }, {
    "id": 64,
    "text": "isfile",
    "type": "global function"
  }, {
    "id": 65,
    "text": "basename",
    "type": "global function"
  }, {
    "id": 66,
    "text": "filter",
    "type": "global function"
  }, {
    "id": 67,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 68,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 69,
    "text": "s",
    "type": "global function"
  }, {
    "id": 70,
    "text": "busted.executors.file",
    "type": "global function"
  }, {
    "id": 71,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 72,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 73,
    "text": "load",
    "type": "global function"
  }, {
    "id": 74,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 75,
    "text": "match",
    "type": "global function"
  }, {
    "id": 76,
    "text": "getfiles",
    "type": "global function"
  }, {
    "id": 77,
    "text": "require",
    "type": "global function"
  }, {
    "id": 78,
    "text": "tablex",
    "type": "module"
  }, {
    "id": 79,
    "text": "path",
    "type": "module"
  }, {
    "id": 80,
    "text": "",
    "type": "variable container"
  }, {
    "id": 81,
    "text": "",
    "type": "require container"
  }, {
    "id": 82,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 83,
    "text": "say",
    "type": "module"
  }, {
    "id": 84,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 85,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 86,
    "text": "dir",
    "type": "module"
  }, {
    "id": 87,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 88,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 89,
    "text": "v)",
    "type": "module"
  }, {
    "id": 90,
    "text": "",
    "type": "interface container"
  }, {
    "id": 91,
    "text": "",
    "type": "interface"
  }, {
    "id": 92,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 93,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 94,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 95,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 96,
    "text": "",
    "type": "require local variable"
  } ]
}