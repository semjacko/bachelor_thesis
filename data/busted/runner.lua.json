{
  "_filename": "runner.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/busted/busted/runner.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 11
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 16
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 16
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 22
  }, {
    "from": 25,
    "label": "has",
    "to": 23
  }, {
    "from": 25,
    "label": "has",
    "to": 16
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 16
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 33
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 29,
    "label": "has",
    "to": 35
  }, {
    "from": 29,
    "label": "has",
    "to": 36
  }, {
    "from": 29,
    "label": "has",
    "to": 37
  }, {
    "from": 29,
    "label": "has",
    "to": 38
  }, {
    "from": 29,
    "label": "has",
    "to": 39
  }, {
    "from": 29,
    "label": "has",
    "to": 40
  }, {
    "from": 29,
    "label": "has",
    "to": 41
  }, {
    "from": 29,
    "label": "has",
    "to": 42
  }, {
    "from": 29,
    "label": "has",
    "to": 43
  }, {
    "from": 29,
    "label": "has",
    "to": 44
  }, {
    "from": 29,
    "label": "has",
    "to": 45
  }, {
    "from": 29,
    "label": "has",
    "to": 46
  }, {
    "from": 29,
    "label": "has",
    "to": 47
  }, {
    "from": 29,
    "label": "has",
    "to": 48
  }, {
    "from": 29,
    "label": "has",
    "to": 49
  }, {
    "from": 29,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 29,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 29,
    "label": "has",
    "to": 56
  }, {
    "from": 29,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 52
  }, {
    "from": 29,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 29,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 29,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 29,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 29,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 29,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 29,
    "label": "has",
    "to": 73
  }, {
    "from": 29,
    "label": "has",
    "to": 74
  }, {
    "from": 29,
    "label": "has",
    "to": 75
  }, {
    "from": 29,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 15
  }, {
    "from": 76,
    "label": "has",
    "to": 16
  }, {
    "from": 29,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 19
  }, {
    "from": 77,
    "label": "has",
    "to": 16
  }, {
    "from": 29,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 22
  }, {
    "from": 78,
    "label": "has",
    "to": 23
  }, {
    "from": 78,
    "label": "has",
    "to": 16
  }, {
    "from": 29,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 22
  }, {
    "from": 79,
    "label": "has",
    "to": 23
  }, {
    "from": 79,
    "label": "has",
    "to": 16
  }, {
    "from": 29,
    "label": "has",
    "to": 80
  }, {
    "from": 29,
    "label": "has",
    "to": 81
  }, {
    "from": 29,
    "label": "has",
    "to": 82
  }, {
    "from": 29,
    "label": "has",
    "to": 83
  }, {
    "from": 29,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 29,
    "label": "has",
    "to": 86
  }, {
    "from": 29,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 87,
    "label": "has",
    "to": 90
  }, {
    "from": 87,
    "label": "has",
    "to": 91
  }, {
    "from": 87,
    "label": "has",
    "to": 92
  }, {
    "from": 87,
    "label": "has",
    "to": 93
  }, {
    "from": 29,
    "label": "has",
    "to": 94
  }, {
    "from": 29,
    "label": "has",
    "to": 95
  }, {
    "from": 29,
    "label": "has",
    "to": 96
  }, {
    "from": 29,
    "label": "has",
    "to": 97
  }, {
    "from": 29,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 29,
    "label": "has",
    "to": 100
  }, {
    "from": 101,
    "label": "calls",
    "to": 105
  }, {
    "from": 101,
    "label": "calls",
    "to": 125
  }, {
    "from": 101,
    "label": "calls",
    "to": 115
  }, {
    "from": 101,
    "label": "calls",
    "to": 106
  }, {
    "from": 101,
    "label": "calls",
    "to": 120
  }, {
    "from": 101,
    "label": "calls",
    "to": 109
  }, {
    "from": 101,
    "label": "calls",
    "to": 118
  }, {
    "from": 101,
    "label": "calls",
    "to": 118
  }, {
    "from": 101,
    "label": "calls",
    "to": 118
  }, {
    "from": 101,
    "label": "calls",
    "to": 118
  }, {
    "from": 101,
    "label": "calls",
    "to": 126
  }, {
    "from": 101,
    "label": "calls",
    "to": 126
  }, {
    "from": 101,
    "label": "calls",
    "to": 126
  }, {
    "from": 101,
    "label": "calls",
    "to": 126
  }, {
    "from": 101,
    "label": "calls",
    "to": 126
  }, {
    "from": 101,
    "label": "calls",
    "to": 126
  }, {
    "from": 101,
    "label": "calls",
    "to": 126
  }, {
    "from": 101,
    "label": "calls",
    "to": 126
  }, {
    "from": 101,
    "label": "calls",
    "to": 126
  }, {
    "from": 101,
    "label": "calls",
    "to": 126
  }, {
    "from": 101,
    "label": "calls",
    "to": 126
  }, {
    "from": 101,
    "label": "calls",
    "to": 126
  }, {
    "from": 101,
    "label": "calls",
    "to": 126
  }, {
    "from": 101,
    "label": "calls",
    "to": 126
  }, {
    "from": 101,
    "label": "calls",
    "to": 126
  }, {
    "from": 101,
    "label": "calls",
    "to": 126
  }, {
    "from": 101,
    "label": "calls",
    "to": 126
  }, {
    "from": 101,
    "label": "calls",
    "to": 113
  }, {
    "from": 101,
    "label": "calls",
    "to": 116
  }, {
    "from": 101,
    "label": "calls",
    "to": 121
  }, {
    "from": 101,
    "label": "calls",
    "to": 110
  }, {
    "from": 101,
    "label": "calls",
    "to": 104
  }, {
    "from": 101,
    "label": "calls",
    "to": 114
  }, {
    "from": 101,
    "label": "calls",
    "to": 111
  }, {
    "from": 101,
    "label": "calls",
    "to": 111
  }, {
    "from": 101,
    "label": "calls",
    "to": 111
  }, {
    "from": 101,
    "label": "calls",
    "to": 111
  }, {
    "from": 101,
    "label": "calls",
    "to": 103
  }, {
    "from": 101,
    "label": "calls",
    "to": 103
  }, {
    "from": 101,
    "label": "calls",
    "to": 103
  }, {
    "from": 101,
    "label": "calls",
    "to": 124
  }, {
    "from": 101,
    "label": "calls",
    "to": 102
  }, {
    "from": 101,
    "label": "calls",
    "to": 108
  }, {
    "from": 101,
    "label": "calls",
    "to": 112
  }, {
    "from": 101,
    "label": "calls",
    "to": 112
  }, {
    "from": 101,
    "label": "calls",
    "to": 122
  }, {
    "from": 101,
    "label": "calls",
    "to": 117
  }, {
    "from": 101,
    "label": "calls",
    "to": 123
  }, {
    "from": 101,
    "label": "calls",
    "to": 119
  }, {
    "from": 11,
    "label": "contains",
    "to": 101
  }, {
    "from": 101,
    "label": "declares",
    "to": 13
  }, {
    "from": 101,
    "label": "declares",
    "to": 14
  }, {
    "from": 101,
    "label": "declares",
    "to": 18
  }, {
    "from": 101,
    "label": "declares",
    "to": 21
  }, {
    "from": 101,
    "label": "declares",
    "to": 25
  }, {
    "from": 101,
    "label": "declares",
    "to": 29
  }, {
    "from": 11,
    "label": "contains",
    "to": 130
  }, {
    "from": 11,
    "label": "contains",
    "to": 131
  }, {
    "from": 130,
    "label": "initializes",
    "to": 132
  }, {
    "from": 132,
    "label": "assigns",
    "to": 133
  }, {
    "from": 131,
    "label": "initializes",
    "to": 134
  }, {
    "from": 134,
    "label": "requires",
    "to": 128
  }, {
    "from": 131,
    "label": "initializes",
    "to": 135
  }, {
    "from": 135,
    "label": "requires",
    "to": 127
  }, {
    "from": 131,
    "label": "initializes",
    "to": 136
  }, {
    "from": 136,
    "label": "requires",
    "to": 107
  }, {
    "from": 131,
    "label": "initializes",
    "to": 137
  }, {
    "from": 137,
    "label": "requires",
    "to": 12
  }, {
    "from": 131,
    "label": "initializes",
    "to": 138
  }, {
    "from": 138,
    "label": "requires",
    "to": 1
  }, {
    "from": 131,
    "label": "initializes",
    "to": 139
  }, {
    "from": 139,
    "label": "requires",
    "to": 1
  }, {
    "from": 131,
    "label": "initializes",
    "to": 140
  }, {
    "from": 140,
    "label": "requires",
    "to": 2
  }, {
    "from": 131,
    "label": "initializes",
    "to": 141
  }, {
    "from": 141,
    "label": "requires",
    "to": 4
  }, {
    "from": 131,
    "label": "initializes",
    "to": 142
  }, {
    "from": 142,
    "label": "requires",
    "to": 5
  }, {
    "from": 131,
    "label": "initializes",
    "to": 143
  }, {
    "from": 143,
    "label": "requires",
    "to": 6
  }, {
    "from": 131,
    "label": "initializes",
    "to": 144
  }, {
    "from": 144,
    "label": "requires",
    "to": 8
  }, {
    "from": 131,
    "label": "initializes",
    "to": 145
  }, {
    "from": 145,
    "label": "requires",
    "to": 7
  }, {
    "from": 131,
    "label": "initializes",
    "to": 146
  }, {
    "from": 146,
    "label": "requires",
    "to": 10
  }, {
    "from": 131,
    "label": "initializes",
    "to": 147
  }, {
    "from": 147,
    "label": "requires",
    "to": 9
  }, {
    "from": 131,
    "label": "initializes",
    "to": 148
  }, {
    "from": 148,
    "label": "requires",
    "to": 3
  }, {
    "from": 131,
    "label": "initializes",
    "to": 129
  }, {
    "from": 11,
    "label": "provides",
    "to": 149
  }, {
    "from": 149,
    "label": "provides",
    "to": 150
  }, {
    "from": 129,
    "label": "requires",
    "to": 11
  }, {
    "from": 76,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 77,
    "label": "hasArgument",
    "to": 18
  }, {
    "from": 78,
    "label": "hasArgument",
    "to": 21
  }, {
    "from": 79,
    "label": "hasArgument",
    "to": 25
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "compatibility",
    "type": "module"
  }, {
    "id": 2,
    "text": "core",
    "type": "module"
  }, {
    "id": 3,
    "text": "execute",
    "type": "module"
  }, {
    "id": 4,
    "text": "cli",
    "type": "module"
  }, {
    "id": 5,
    "text": "filter_loader",
    "type": "module"
  }, {
    "id": 6,
    "text": "helper_loader",
    "type": "module"
  }, {
    "id": 7,
    "text": "luacov",
    "type": "module"
  }, {
    "id": 8,
    "text": "output_handler_loader",
    "type": "module"
  }, {
    "id": 9,
    "text": "standalone_loader",
    "type": "module"
  }, {
    "id": 10,
    "text": "test_file_loader",
    "type": "module"
  }, {
    "id": 11,
    "text": "runner",
    "type": "module"
  }, {
    "id": 12,
    "text": "utils",
    "type": "module"
  }, {
    "id": 13,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 14,
    "text": "function(element, parent, message)\r\n    io.stderr:write(appName .. ': error: Cannot load output library: ' .. element.name .. '\\n' .. message .. '\\n')\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 15,
    "text": "io.stderr:write(appName .. ': error: Cannot load output library: ' .. element.name .. '\\n' .. message .. '\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function(element, parent, message)\r\n    io.stderr:write(appName .. ': error: Cannot load helper script: ' .. element.name .. '\\n' .. message .. '\\n')\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 19,
    "text": "io.stderr:write(appName .. ': error: Cannot load helper script: ' .. element.name .. '\\n' .. message .. '\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function(element, parent, message)\r\n    errors = errors + 1\r\n    busted.skipAll = quitOnError\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 22,
    "text": "errors = errors + 1",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "busted.skipAll = quitOnError",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function(element, parent, message)\r\n    if element.descriptor == 'it' then\r\n      failures = failures + 1\r\n    else\r\n      errors = errors + 1\r\n    end\r\n    busted.skipAll = quitOnError\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 26,
    "text": "if element.descriptor == 'it' then\r\n      failures = failures + 1\r\n    else\r\n      errors = errors + 1\r\n    end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "failures = failures + 1",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function(options)\r\n  if loaded then return function() end else loaded = true end\r\n\r\n  local isatty = io.type(io.stdout) == 'file' and term.isatty(io.stdout)\r\n  options = tablex.update(require 'busted.options', options or {})\r\n  options.output = options.output or (isatty and 'utfTerminal' or 'plainTerminal')\r\n\r\n  local busted = require 'busted.core'()\r\n\r\n  local cli = require 'busted.modules.cli'(options)\r\n  local filterLoader = require 'busted.modules.filter_loader'()\r\n  local helperLoader = require 'busted.modules.helper_loader'()\r\n  local outputHandlerLoader = require 'busted.modules.output_handler_loader'()\r\n\r\n  local luacov = require 'busted.modules.luacov'()\r\n\r\n  require 'busted'(busted)\r\n\r\n  local level = 2\r\n  local info = debug.getinfo(level, 'Sf')\r\n  local source = info.source\r\n  local fileName = source:sub(1,1) == '@' and source:sub(2) or nil\r\n  local forceExit = fileName == nil\r\n\r\n  -- Parse the cli arguments\r\n  local appName = path.basename(fileName or 'busted')\r\n  cli:set_name(appName)\r\n  local cliArgs, err = cli:parse(arg)\r\n  if not cliArgs then\r\n    io.stderr:write(err .. '\\n')\r\n    exit(1, forceExit)\r\n  end\r\n\r\n  if cliArgs.version then\r\n    -- Return early if asked for the version\r\n    print(busted.version)\r\n    exit(0, forceExit)\r\n  end\r\n\r\n  -- Load current working directory\r\n  local _, err = path.chdir(path.normpath(cliArgs.directory))\r\n  if err then\r\n    io.stderr:write(appName .. ': error: ' .. err .. '\\n')\r\n    exit(1, forceExit)\r\n  end\r\n\r\n  -- If coverage arg is passed in, load LuaCovsupport\r\n  if cliArgs.coverage then\r\n    luacov()\r\n  end\r\n\r\n  -- If auto-insulate is disabled, re-register file without insulation\r\n  if not cliArgs['auto-insulate'] then\r\n    busted.register('file', 'file', {})\r\n  end\r\n\r\n  -- If lazy is enabled, make lazy setup/teardown the default\r\n  if cliArgs.lazy then\r\n    busted.register('setup', 'lazy_setup')\r\n    busted.register('teardown', 'lazy_teardown')\r\n  end\r\n\r\n  -- Add additional package paths based on lpath and cpath cliArgs\r\n  if #cliArgs.lpath > 0 then\r\n    package.path = (cliArgs.lpath .. ';' .. package.path):gsub(';;',';')\r\n  end\r\n\r\n  if #cliArgs.cpath > 0 then\r\n    package.cpath = (cliArgs.cpath .. ';' .. package.cpath):gsub(';;',';')\r\n  end\r\n\r\n  -- Load and execute commands given on the command-line\r\n  if cliArgs.e then\r\n    for k,v in ipairs(cliArgs.e) do\r\n      loadstring(v)()\r\n    end\r\n  end\r\n\r\n  -- watch for test errors and failures\r\n  local failures = 0\r\n  local errors = 0\r\n  local quitOnError = not cliArgs['keep-going']\r\n\r\n  busted.subscribe({ 'error', 'output' }, function(element, parent, message)\r\n    io.stderr:write(appName .. ': error: Cannot load output library: ' .. element.name .. '\\n' .. message .. '\\n')\r\n    return nil, true\r\n  end)\r\n\r\n  busted.subscribe({ 'error', 'helper' }, function(element, parent, message)\r\n    io.stderr:write(appName .. ': error: Cannot load helper script: ' .. element.name .. '\\n' .. message .. '\\n')\r\n    return nil, true\r\n  end)\r\n\r\n  busted.subscribe({ 'error' }, function(element, parent, message)\r\n    errors = errors + 1\r\n    busted.skipAll = quitOnError\r\n    return nil, true\r\n  end)\r\n\r\n  busted.subscribe({ 'failure' }, function(element, parent, message)\r\n    if element.descriptor == 'it' then\r\n      failures = failures + 1\r\n    else\r\n      errors = errors + 1\r\n    end\r\n    busted.skipAll = quitOnError\r\n    return nil, true\r\n  end)\r\n\r\n  -- Set up randomization options\r\n  busted.sort = cliArgs['sort-tests']\r\n  busted.randomize = cliArgs['shuffle-tests']\r\n  busted.randomseed = tonumber(cliArgs.seed) or utils.urandom() or os.time()\r\n\r\n  -- Set up output handler to listen to events\r\n  outputHandlerLoader(busted, cliArgs.output, {\r\n    defaultOutput = options.output,\r\n    enableSound = cliArgs['enable-sound'],\r\n    verbose = cliArgs.verbose,\r\n    suppressPending = cliArgs['suppress-pending'],\r\n    language = cliArgs.lang,\r\n    deferPrint = cliArgs['defer-print'],\r\n    arguments = cliArgs.Xoutput,\r\n  })\r\n\r\n  -- Set up helper script\r\n  if cliArgs.helper and cliArgs.helper ~= '' then\r\n    helperLoader(busted, cliArgs.helper, {\r\n      verbose = cliArgs.verbose,\r\n      language = cliArgs.lang,\r\n      arguments = cliArgs.Xhelper\r\n    })\r\n  end\r\n\r\n  -- Load tag and test filters\r\n  filterLoader(busted, {\r\n    tags = cliArgs.tags,\r\n    excludeTags = cliArgs['exclude-tags'],\r\n    filter = cliArgs.filter,\r\n    filterOut = cliArgs['filter-out'],\r\n    list = cliArgs.list,\r\n    nokeepgoing = not cliArgs['keep-going'],\r\n    suppressPending = cliArgs['suppress-pending'],\r\n  })\r\n\r\n  if cliArgs.ROOT then\r\n    -- Load test directories/files\r\n    local rootFiles = cliArgs.ROOT\r\n    local patterns = cliArgs.pattern\r\n    local testFileLoader = require 'busted.modules.test_file_loader'(busted, cliArgs.loaders)\r\n    testFileLoader(rootFiles, patterns, {\r\n      excludes = cliArgs['exclude-pattern'],\r\n      verbose = cliArgs.verbose,\r\n      recursive = cliArgs['recursive'],\r\n    })\r\n  else\r\n    -- Running standalone, use standalone loader\r\n    local testFileLoader = require 'busted.modules.standalone_loader'(busted)\r\n    testFileLoader(info, { verbose = cliArgs.verbose })\r\n  end\r\n\r\n  local runs = cliArgs['repeat']\r\n  local execute = require 'busted.execute'(busted)\r\n  execute(runs, {\r\n    seed = cliArgs.seed,\r\n    shuffle = cliArgs['shuffle-files'],\r\n    sort = cliArgs['sort-files'],\r\n  })\r\n\r\n  busted.publish({ 'exit' })\r\n\r\n  if options.standalone or failures > 0 or errors > 0 then\r\n    exit(failures + errors, forceExit)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "if loaded then return function() end else loaded = true end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "loaded = true",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "local isatty = io.type(io.stdout) == 'file' and term.isatty(io.stdout)",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "options = tablex.update(require 'busted.options', options or {})",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "options.output = options.output or (isatty and 'utfTerminal' or 'plainTerminal')",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "local busted = require 'busted.core'()",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "local cli = require 'busted.modules.cli'(options)",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "local filterLoader = require 'busted.modules.filter_loader'()",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "local helperLoader = require 'busted.modules.helper_loader'()",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "local outputHandlerLoader = require 'busted.modules.output_handler_loader'()",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "local luacov = require 'busted.modules.luacov'()",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "require 'busted'(busted)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "local level = 2",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "local info = debug.getinfo(level, 'Sf')",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "local source = info.source",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "local fileName = source:sub(1,1) == '@' and source:sub(2) or nil",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "local forceExit = fileName == nil",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "local appName = path.basename(fileName or 'busted')",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "cli:set_name(appName)",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "local cliArgs, err = cli:parse(arg)",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "if not cliArgs then\r\n    io.stderr:write(err .. '\\n')\r\n    exit(1, forceExit)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "io.stderr:write(err .. '\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "exit(1, forceExit)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "if cliArgs.version then\r\n    -- Return early if asked for the version\r\n    print(busted.version)\r\n    exit(0, forceExit)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "print(busted.version)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "exit(0, forceExit)",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "local _, err = path.chdir(path.normpath(cliArgs.directory))",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "if err then\r\n    io.stderr:write(appName .. ': error: ' .. err .. '\\n')\r\n    exit(1, forceExit)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "io.stderr:write(appName .. ': error: ' .. err .. '\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "if cliArgs.coverage then\r\n    luacov()\r\n  end",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "luacov()",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "if not cliArgs['auto-insulate'] then\r\n    busted.register('file', 'file', {})\r\n  end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "busted.register('file', 'file', {})",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "if cliArgs.lazy then\r\n    busted.register('setup', 'lazy_setup')\r\n    busted.register('teardown', 'lazy_teardown')\r\n  end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "busted.register('setup', 'lazy_setup')",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "busted.register('teardown', 'lazy_teardown')",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "if #cliArgs.lpath > 0 then\r\n    package.path = (cliArgs.lpath .. ';' .. package.path):gsub(';;',';')\r\n  end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "package.path = (cliArgs.lpath .. ';' .. package.path):gsub(';;',';')",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "if #cliArgs.cpath > 0 then\r\n    package.cpath = (cliArgs.cpath .. ';' .. package.cpath):gsub(';;',';')\r\n  end",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "package.cpath = (cliArgs.cpath .. ';' .. package.cpath):gsub(';;',';')",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "if cliArgs.e then\r\n    for k,v in ipairs(cliArgs.e) do\r\n      loadstring(v)()\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "for k,v in ipairs(cliArgs.e) do\r\n      loadstring(v)()\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 72,
    "text": "loadstring(v)()",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "local failures = 0",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "local errors = 0",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "local quitOnError = not cliArgs['keep-going']",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "busted.subscribe({ 'error', 'output' }, function(element, parent, message)\r\n    io.stderr:write(appName .. ': error: Cannot load output library: ' .. element.name .. '\\n' .. message .. '\\n')\r\n    return nil, true\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "busted.subscribe({ 'error', 'helper' }, function(element, parent, message)\r\n    io.stderr:write(appName .. ': error: Cannot load helper script: ' .. element.name .. '\\n' .. message .. '\\n')\r\n    return nil, true\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "busted.subscribe({ 'error' }, function(element, parent, message)\r\n    errors = errors + 1\r\n    busted.skipAll = quitOnError\r\n    return nil, true\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "busted.subscribe({ 'failure' }, function(element, parent, message)\r\n    if element.descriptor == 'it' then\r\n      failures = failures + 1\r\n    else\r\n      errors = errors + 1\r\n    end\r\n    busted.skipAll = quitOnError\r\n    return nil, true\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "busted.sort = cliArgs['sort-tests']",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "busted.randomize = cliArgs['shuffle-tests']",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "busted.randomseed = tonumber(cliArgs.seed) or utils.urandom() or os.time()",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "outputHandlerLoader(busted, cliArgs.output, {\r\n    defaultOutput = options.output,\r\n    enableSound = cliArgs['enable-sound'],\r\n    verbose = cliArgs.verbose,\r\n    suppressPending = cliArgs['suppress-pending'],\r\n    language = cliArgs.lang,\r\n    deferPrint = cliArgs['defer-print'],\r\n    arguments = cliArgs.Xoutput,\r\n  })",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "if cliArgs.helper and cliArgs.helper ~= '' then\r\n    helperLoader(busted, cliArgs.helper, {\r\n      verbose = cliArgs.verbose,\r\n      language = cliArgs.lang,\r\n      arguments = cliArgs.Xhelper\r\n    })\r\n  end",
    "type": "statement:if"
  }, {
    "id": 85,
    "text": "helperLoader(busted, cliArgs.helper, {\r\n      verbose = cliArgs.verbose,\r\n      language = cliArgs.lang,\r\n      arguments = cliArgs.Xhelper\r\n    })",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "filterLoader(busted, {\r\n    tags = cliArgs.tags,\r\n    excludeTags = cliArgs['exclude-tags'],\r\n    filter = cliArgs.filter,\r\n    filterOut = cliArgs['filter-out'],\r\n    list = cliArgs.list,\r\n    nokeepgoing = not cliArgs['keep-going'],\r\n    suppressPending = cliArgs['suppress-pending'],\r\n  })",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "if cliArgs.ROOT then\r\n    -- Load test directories/files\r\n    local rootFiles = cliArgs.ROOT\r\n    local patterns = cliArgs.pattern\r\n    local testFileLoader = require 'busted.modules.test_file_loader'(busted, cliArgs.loaders)\r\n    testFileLoader(rootFiles, patterns, {\r\n      excludes = cliArgs['exclude-pattern'],\r\n      verbose = cliArgs.verbose,\r\n      recursive = cliArgs['recursive'],\r\n    })\r\n  else\r\n    -- Running standalone, use standalone loader\r\n    local testFileLoader = require 'busted.modules.standalone_loader'(busted)\r\n    testFileLoader(info, { verbose = cliArgs.verbose })\r\n  end",
    "type": "statement:if"
  }, {
    "id": 88,
    "text": "local rootFiles = cliArgs.ROOT",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "local patterns = cliArgs.pattern",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "local testFileLoader = require 'busted.modules.test_file_loader'(busted, cliArgs.loaders)",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "testFileLoader(rootFiles, patterns, {\r\n      excludes = cliArgs['exclude-pattern'],\r\n      verbose = cliArgs.verbose,\r\n      recursive = cliArgs['recursive'],\r\n    })",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "local testFileLoader = require 'busted.modules.standalone_loader'(busted)",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "testFileLoader(info, { verbose = cliArgs.verbose })",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "local runs = cliArgs['repeat']",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "local execute = require 'busted.execute'(busted)",
    "type": "statement:localassign"
  }, {
    "id": 96,
    "text": "execute(runs, {\r\n    seed = cliArgs.seed,\r\n    shuffle = cliArgs['shuffle-files'],\r\n    sort = cliArgs['sort-files'],\r\n  })",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "busted.publish({ 'exit' })",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "if options.standalone or failures > 0 or errors > 0 then\r\n    exit(failures + errors, forceExit)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 99,
    "text": "exit(failures + errors, forceExit)",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 101,
    "text": "",
    "type": "function container"
  }, {
    "id": 102,
    "text": "function()\r\n    local f = io.open('/dev/urandom', 'rb')\r\n    if not f then return nil end\r\n    local s = f:read(4) f:close()\r\n    local bytes = {s:byte(1, 4)}\r\n    local value = 0\r\n    for _, v in ipairs(bytes) do\r\n      value = value * 256 + v\r\n    end\r\n    return value\r\n  end",
    "type": "function"
  }, {
    "id": 103,
    "text": "register",
    "type": "global function"
  }, {
    "id": 104,
    "text": "chdir",
    "type": "global function"
  }, {
    "id": 105,
    "text": "update",
    "type": "global function"
  }, {
    "id": 106,
    "text": "publish",
    "type": "global function"
  }, {
    "id": 107,
    "text": "term",
    "type": "module"
  }, {
    "id": 108,
    "text": "isatty",
    "type": "global function"
  }, {
    "id": 109,
    "text": "normpath",
    "type": "global function"
  }, {
    "id": 110,
    "text": "basename",
    "type": "global function"
  }, {
    "id": 111,
    "text": "subscribe",
    "type": "global function"
  }, {
    "id": 112,
    "text": "testFileLoader",
    "type": "global function"
  }, {
    "id": 113,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 114,
    "text": "print",
    "type": "global function"
  }, {
    "id": 115,
    "text": "getinfo",
    "type": "global function"
  }, {
    "id": 116,
    "text": "execute",
    "type": "global function"
  }, {
    "id": 117,
    "text": "loadstring",
    "type": "global function"
  }, {
    "id": 118,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 119,
    "text": "helperLoader",
    "type": "global function"
  }, {
    "id": 120,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 121,
    "text": "time",
    "type": "global function"
  }, {
    "id": 122,
    "text": "filterLoader",
    "type": "global function"
  }, {
    "id": 123,
    "text": "type",
    "type": "global function"
  }, {
    "id": 124,
    "text": "luacov",
    "type": "global function"
  }, {
    "id": 125,
    "text": "outputHandlerLoader",
    "type": "global function"
  }, {
    "id": 126,
    "text": "require",
    "type": "global function"
  }, {
    "id": 127,
    "text": "tablex",
    "type": "module"
  }, {
    "id": 128,
    "text": "path",
    "type": "module"
  }, {
    "id": 129,
    "text": "",
    "type": "global variable"
  }, {
    "id": 130,
    "text": "",
    "type": "variable container"
  }, {
    "id": 131,
    "text": "",
    "type": "require container"
  }, {
    "id": 132,
    "text": "",
    "type": "local variable"
  }, {
    "id": 133,
    "text": "",
    "type": "boolean"
  }, {
    "id": 134,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 135,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 136,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 137,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 138,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 139,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 140,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 141,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 142,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 143,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 144,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 145,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 146,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 147,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 148,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 149,
    "text": "",
    "type": "interface container"
  }, {
    "id": 150,
    "text": "",
    "type": "interface"
  } ]
}