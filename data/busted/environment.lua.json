{
  "_filename": "environment.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/busted/busted/environment.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 5
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 5
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 19,
    "label": "has",
    "to": 24
  }, {
    "from": 19,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 26,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 26,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 5
  }, {
    "from": 26,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 5
  }, {
    "from": 26,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 19,
    "label": "has",
    "to": 24
  }, {
    "from": 26,
    "label": "has",
    "to": 5
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 3,
    "label": "calls",
    "to": 3
  }, {
    "from": 12,
    "label": "calls",
    "to": 3
  }, {
    "from": 30,
    "label": "calls",
    "to": 32
  }, {
    "from": 3,
    "label": "calls",
    "to": 35
  }, {
    "from": 17,
    "label": "calls",
    "to": 33
  }, {
    "from": 19,
    "label": "calls",
    "to": 31
  }, {
    "from": 30,
    "label": "calls",
    "to": 36
  }, {
    "from": 12,
    "label": "calls",
    "to": 34
  }, {
    "from": 14,
    "label": "calls",
    "to": 34
  }, {
    "from": 19,
    "label": "calls",
    "to": 34
  }, {
    "from": 14,
    "label": "calls",
    "to": 7
  }, {
    "from": 2,
    "label": "contains",
    "to": 30
  }, {
    "from": 30,
    "label": "declares",
    "to": 3
  }, {
    "from": 30,
    "label": "declares",
    "to": 7
  }, {
    "from": 30,
    "label": "declares",
    "to": 12
  }, {
    "from": 30,
    "label": "declares",
    "to": 14
  }, {
    "from": 30,
    "label": "declares",
    "to": 17
  }, {
    "from": 30,
    "label": "declares",
    "to": 19
  }, {
    "from": 30,
    "label": "declares",
    "to": 26
  }, {
    "from": 40,
    "label": "requires",
    "to": 2
  }, {
    "from": 2,
    "label": "contains",
    "to": 41
  }, {
    "from": 2,
    "label": "contains",
    "to": 42
  }, {
    "from": 42,
    "label": "initializes",
    "to": 43
  }, {
    "from": 43,
    "label": "requires",
    "to": 1
  }, {
    "from": 2,
    "label": "provides",
    "to": 44
  }, {
    "from": 44,
    "label": "provides",
    "to": 45
  }, {
    "from": 37,
    "label": "contains",
    "to": 12
  }, {
    "from": 38,
    "label": "contains",
    "to": 12
  }, {
    "from": 39,
    "label": "contains",
    "to": 12
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "compatibility",
    "type": "module"
  }, {
    "id": 2,
    "text": "environment",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function getEnv(self, key)\r\n    if not self then return nil end\r\n    return\r\n      self.env and self.env[key] or\r\n      getEnv(context.parent(self), key) or\r\n      _G[key]\r\n  end",
    "type": "function"
  }, {
    "id": 4,
    "text": "if not self then return nil end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "local function setEnv(self, key, value)\r\n    if not self.env then self.env = {} end\r\n    self.env[key] = value\r\n  end",
    "type": "function"
  }, {
    "id": 8,
    "text": "if not self.env then self.env = {} end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "self.env = {}",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "self.env[key] = value",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "local function __index(self, key)\r\n    return getEnv(context.get(), key)\r\n  end",
    "type": "function"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "local function __newindex(self, key, value)\r\n    setEnv(context.get(), key, value)\r\n  end",
    "type": "function"
  }, {
    "id": 15,
    "text": "setEnv(context.get(), key, value)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function environment.wrap(fn)\r\n    return setfenv(fn, env)\r\n  end",
    "type": "function"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function environment.set(key, value)\r\n    local env = context.get('env')\r\n\r\n    if not env then\r\n      env = {}\r\n      context.set('env', env)\r\n    end\r\n\r\n    env[key] = value\r\n  end",
    "type": "function"
  }, {
    "id": 20,
    "text": "local env = context.get('env')",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "if not env then\r\n      env = {}\r\n      context.set('env', env)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "env = {}",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "context.set('env', env)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "env[key] = value",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function(context)\r\n\r\n  local environment = {}\r\n\r\n  local function getEnv(self, key)\r\n    if not self then return nil end\r\n    return\r\n      self.env and self.env[key] or\r\n      getEnv(context.parent(self), key) or\r\n      _G[key]\r\n  end\r\n\r\n  local function setEnv(self, key, value)\r\n    if not self.env then self.env = {} end\r\n    self.env[key] = value\r\n  end\r\n\r\n  local function __index(self, key)\r\n    return getEnv(context.get(), key)\r\n  end\r\n\r\n  local function __newindex(self, key, value)\r\n    setEnv(context.get(), key, value)\r\n  end\r\n\r\n  local env = setmetatable({}, { __index=__index, __newindex=__newindex })\r\n\r\n  function environment.wrap(fn)\r\n    return setfenv(fn, env)\r\n  end\r\n\r\n  function environment.set(key, value)\r\n    local env = context.get('env')\r\n\r\n    if not env then\r\n      env = {}\r\n      context.set('env', env)\r\n    end\r\n\r\n    env[key] = value\r\n  end\r\n  return environment\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "local environment = {}",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "local env = setmetatable({}, { __index=__index, __newindex=__newindex })",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "",
    "type": "function container"
  }, {
    "id": 31,
    "text": "set",
    "type": "global function"
  }, {
    "id": 32,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 33,
    "text": "setfenv",
    "type": "global function"
  }, {
    "id": 34,
    "text": "get",
    "type": "global function"
  }, {
    "id": 35,
    "text": "parent",
    "type": "global function"
  }, {
    "id": 36,
    "text": "require",
    "type": "global function"
  }, {
    "id": 37,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 38,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 39,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 40,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 41,
    "text": "",
    "type": "variable container"
  }, {
    "id": 42,
    "text": "",
    "type": "require container"
  }, {
    "id": 43,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 44,
    "text": "",
    "type": "interface container"
  }, {
    "id": 45,
    "text": "",
    "type": "interface"
  } ]
}