{
  "_filename": "core_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/busted/spec/core_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 5,
    "label": "has",
    "to": 11
  }, {
    "from": 5,
    "label": "has",
    "to": 12
  }, {
    "from": 5,
    "label": "has",
    "to": 13
  }, {
    "from": 5,
    "label": "has",
    "to": 14
  }, {
    "from": 5,
    "label": "has",
    "to": 15
  }, {
    "from": 5,
    "label": "has",
    "to": 16
  }, {
    "from": 5,
    "label": "has",
    "to": 17
  }, {
    "from": 5,
    "label": "has",
    "to": 18
  }, {
    "from": 5,
    "label": "has",
    "to": 19
  }, {
    "from": 5,
    "label": "has",
    "to": 20
  }, {
    "from": 5,
    "label": "has",
    "to": 21
  }, {
    "from": 5,
    "label": "has",
    "to": 22
  }, {
    "from": 5,
    "label": "has",
    "to": 23
  }, {
    "from": 5,
    "label": "has",
    "to": 24
  }, {
    "from": 5,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 27
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 30
  }, {
    "from": 32,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 27
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 40,
    "label": "has",
    "to": 30
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 33
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 27
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 30
  }, {
    "from": 42,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 48
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 48
  }, {
    "from": 57,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 48
  }, {
    "from": 57,
    "label": "has",
    "to": 61
  }, {
    "from": 57,
    "label": "has",
    "to": 62
  }, {
    "from": 57,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 55
  }, {
    "from": 57,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 48
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 68
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 71
  }, {
    "from": 73,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 58
  }, {
    "from": 77,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 48
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 68
  }, {
    "from": 78,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 71
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 48
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 48
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 48
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 92,
    "label": "has",
    "to": 95
  }, {
    "from": 92,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 90
  }, {
    "from": 92,
    "label": "has",
    "to": 97
  }, {
    "from": 98,
    "label": "has",
    "to": 58
  }, {
    "from": 98,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 48
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 83
  }, {
    "from": 98,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 48
  }, {
    "from": 100,
    "label": "has",
    "to": 94
  }, {
    "from": 100,
    "label": "has",
    "to": 95
  }, {
    "from": 100,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 90
  }, {
    "from": 98,
    "label": "has",
    "to": 101
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 103
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 103
  }, {
    "from": 107,
    "label": "has",
    "to": 109
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 110,
    "label": "has",
    "to": 112
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 111
  }, {
    "from": 113,
    "label": "has",
    "to": 115
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 116,
    "label": "has",
    "to": 118
  }, {
    "from": 116,
    "label": "has",
    "to": 119
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 120,
    "label": "has",
    "to": 122
  }, {
    "from": 120,
    "label": "has",
    "to": 123
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 124,
    "label": "has",
    "to": 118
  }, {
    "from": 124,
    "label": "has",
    "to": 126
  }, {
    "from": 127,
    "label": "has",
    "to": 121
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 127,
    "label": "has",
    "to": 129
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 130,
    "label": "has",
    "to": 132
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 133,
    "label": "has",
    "to": 135
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 136,
    "label": "has",
    "to": 118
  }, {
    "from": 136,
    "label": "has",
    "to": 138
  }, {
    "from": 139,
    "label": "has",
    "to": 121
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 139,
    "label": "has",
    "to": 141
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 142,
    "label": "has",
    "to": 118
  }, {
    "from": 142,
    "label": "has",
    "to": 144
  }, {
    "from": 145,
    "label": "has",
    "to": 121
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 145,
    "label": "has",
    "to": 147
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 148,
    "label": "has",
    "to": 150
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 151,
    "label": "has",
    "to": 153
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 137
  }, {
    "from": 155,
    "label": "has",
    "to": 118
  }, {
    "from": 154,
    "label": "has",
    "to": 156
  }, {
    "from": 156,
    "label": "has",
    "to": 121
  }, {
    "from": 156,
    "label": "has",
    "to": 140
  }, {
    "from": 154,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 143
  }, {
    "from": 157,
    "label": "has",
    "to": 118
  }, {
    "from": 154,
    "label": "has",
    "to": 158
  }, {
    "from": 158,
    "label": "has",
    "to": 121
  }, {
    "from": 158,
    "label": "has",
    "to": 146
  }, {
    "from": 154,
    "label": "has",
    "to": 159
  }, {
    "from": 159,
    "label": "has",
    "to": 149
  }, {
    "from": 154,
    "label": "has",
    "to": 160
  }, {
    "from": 160,
    "label": "has",
    "to": 152
  }, {
    "from": 154,
    "label": "has",
    "to": 161
  }, {
    "from": 162,
    "label": "has",
    "to": 163
  }, {
    "from": 162,
    "label": "has",
    "to": 164
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 166,
    "label": "has",
    "to": 117
  }, {
    "from": 166,
    "label": "has",
    "to": 118
  }, {
    "from": 165,
    "label": "has",
    "to": 167
  }, {
    "from": 167,
    "label": "has",
    "to": 121
  }, {
    "from": 167,
    "label": "has",
    "to": 122
  }, {
    "from": 165,
    "label": "has",
    "to": 168
  }, {
    "from": 168,
    "label": "has",
    "to": 125
  }, {
    "from": 168,
    "label": "has",
    "to": 118
  }, {
    "from": 165,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 121
  }, {
    "from": 169,
    "label": "has",
    "to": 128
  }, {
    "from": 165,
    "label": "has",
    "to": 170
  }, {
    "from": 170,
    "label": "has",
    "to": 131
  }, {
    "from": 165,
    "label": "has",
    "to": 171
  }, {
    "from": 171,
    "label": "has",
    "to": 134
  }, {
    "from": 165,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 137
  }, {
    "from": 155,
    "label": "has",
    "to": 118
  }, {
    "from": 172,
    "label": "has",
    "to": 156
  }, {
    "from": 156,
    "label": "has",
    "to": 121
  }, {
    "from": 156,
    "label": "has",
    "to": 140
  }, {
    "from": 172,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 143
  }, {
    "from": 157,
    "label": "has",
    "to": 118
  }, {
    "from": 172,
    "label": "has",
    "to": 158
  }, {
    "from": 158,
    "label": "has",
    "to": 121
  }, {
    "from": 158,
    "label": "has",
    "to": 146
  }, {
    "from": 172,
    "label": "has",
    "to": 159
  }, {
    "from": 159,
    "label": "has",
    "to": 149
  }, {
    "from": 172,
    "label": "has",
    "to": 160
  }, {
    "from": 160,
    "label": "has",
    "to": 152
  }, {
    "from": 165,
    "label": "has",
    "to": 173
  }, {
    "from": 173,
    "label": "has",
    "to": 163
  }, {
    "from": 165,
    "label": "has",
    "to": 174
  }, {
    "from": 175,
    "label": "has",
    "to": 176
  }, {
    "from": 175,
    "label": "has",
    "to": 177
  }, {
    "from": 175,
    "label": "has",
    "to": 178
  }, {
    "from": 179,
    "label": "has",
    "to": 180
  }, {
    "from": 180,
    "label": "has",
    "to": 176
  }, {
    "from": 180,
    "label": "has",
    "to": 177
  }, {
    "from": 179,
    "label": "has",
    "to": 181
  }, {
    "from": 182,
    "label": "has",
    "to": 183
  }, {
    "from": 182,
    "label": "has",
    "to": 2
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 182,
    "label": "has",
    "to": 184
  }, {
    "from": 184,
    "label": "has",
    "to": 166
  }, {
    "from": 166,
    "label": "has",
    "to": 117
  }, {
    "from": 166,
    "label": "has",
    "to": 118
  }, {
    "from": 184,
    "label": "has",
    "to": 167
  }, {
    "from": 167,
    "label": "has",
    "to": 121
  }, {
    "from": 167,
    "label": "has",
    "to": 122
  }, {
    "from": 184,
    "label": "has",
    "to": 168
  }, {
    "from": 168,
    "label": "has",
    "to": 125
  }, {
    "from": 168,
    "label": "has",
    "to": 118
  }, {
    "from": 184,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 121
  }, {
    "from": 169,
    "label": "has",
    "to": 128
  }, {
    "from": 184,
    "label": "has",
    "to": 170
  }, {
    "from": 170,
    "label": "has",
    "to": 131
  }, {
    "from": 184,
    "label": "has",
    "to": 171
  }, {
    "from": 171,
    "label": "has",
    "to": 134
  }, {
    "from": 184,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 137
  }, {
    "from": 155,
    "label": "has",
    "to": 118
  }, {
    "from": 172,
    "label": "has",
    "to": 156
  }, {
    "from": 156,
    "label": "has",
    "to": 121
  }, {
    "from": 156,
    "label": "has",
    "to": 140
  }, {
    "from": 172,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 143
  }, {
    "from": 157,
    "label": "has",
    "to": 118
  }, {
    "from": 172,
    "label": "has",
    "to": 158
  }, {
    "from": 158,
    "label": "has",
    "to": 121
  }, {
    "from": 158,
    "label": "has",
    "to": 146
  }, {
    "from": 172,
    "label": "has",
    "to": 159
  }, {
    "from": 159,
    "label": "has",
    "to": 149
  }, {
    "from": 172,
    "label": "has",
    "to": 160
  }, {
    "from": 160,
    "label": "has",
    "to": 152
  }, {
    "from": 184,
    "label": "has",
    "to": 173
  }, {
    "from": 173,
    "label": "has",
    "to": 163
  }, {
    "from": 182,
    "label": "has",
    "to": 185
  }, {
    "from": 185,
    "label": "has",
    "to": 180
  }, {
    "from": 180,
    "label": "has",
    "to": 176
  }, {
    "from": 180,
    "label": "has",
    "to": 177
  }, {
    "from": 182,
    "label": "has",
    "to": 186
  }, {
    "from": 188,
    "label": "has",
    "to": 189
  }, {
    "from": 188,
    "label": "has",
    "to": 190
  }, {
    "from": 188,
    "label": "has",
    "to": 191
  }, {
    "from": 192,
    "label": "has",
    "to": 193
  }, {
    "from": 192,
    "label": "has",
    "to": 194
  }, {
    "from": 195,
    "label": "has",
    "to": 196
  }, {
    "from": 195,
    "label": "has",
    "to": 197
  }, {
    "from": 197,
    "label": "has",
    "to": 189
  }, {
    "from": 197,
    "label": "has",
    "to": 190
  }, {
    "from": 195,
    "label": "has",
    "to": 198
  }, {
    "from": 198,
    "label": "has",
    "to": 193
  }, {
    "from": 195,
    "label": "has",
    "to": 199
  }, {
    "from": 200,
    "label": "has",
    "to": 201
  }, {
    "from": 200,
    "label": "has",
    "to": 202
  }, {
    "from": 203,
    "label": "has",
    "to": 204
  }, {
    "from": 203,
    "label": "has",
    "to": 205
  }, {
    "from": 206,
    "label": "has",
    "to": 207
  }, {
    "from": 206,
    "label": "has",
    "to": 208
  }, {
    "from": 209,
    "label": "has",
    "to": 210
  }, {
    "from": 209,
    "label": "has",
    "to": 211
  }, {
    "from": 212,
    "label": "has",
    "to": 213
  }, {
    "from": 212,
    "label": "has",
    "to": 214
  }, {
    "from": 212,
    "label": "has",
    "to": 215
  }, {
    "from": 212,
    "label": "has",
    "to": 216
  }, {
    "from": 217,
    "label": "has",
    "to": 218
  }, {
    "from": 217,
    "label": "has",
    "to": 219
  }, {
    "from": 217,
    "label": "has",
    "to": 220
  }, {
    "from": 217,
    "label": "has",
    "to": 221
  }, {
    "from": 217,
    "label": "has",
    "to": 215
  }, {
    "from": 217,
    "label": "has",
    "to": 222
  }, {
    "from": 223,
    "label": "has",
    "to": 224
  }, {
    "from": 223,
    "label": "has",
    "to": 225
  }, {
    "from": 226,
    "label": "has",
    "to": 218
  }, {
    "from": 226,
    "label": "has",
    "to": 219
  }, {
    "from": 226,
    "label": "has",
    "to": 220
  }, {
    "from": 226,
    "label": "has",
    "to": 221
  }, {
    "from": 226,
    "label": "has",
    "to": 227
  }, {
    "from": 228,
    "label": "has",
    "to": 229
  }, {
    "from": 229,
    "label": "has",
    "to": 218
  }, {
    "from": 229,
    "label": "has",
    "to": 219
  }, {
    "from": 229,
    "label": "has",
    "to": 220
  }, {
    "from": 229,
    "label": "has",
    "to": 221
  }, {
    "from": 228,
    "label": "has",
    "to": 230
  }, {
    "from": 231,
    "label": "has",
    "to": 215
  }, {
    "from": 231,
    "label": "has",
    "to": 232
  }, {
    "from": 233,
    "label": "has",
    "to": 234
  }, {
    "from": 234,
    "label": "has",
    "to": 215
  }, {
    "from": 233,
    "label": "has",
    "to": 235
  }, {
    "from": 233,
    "label": "has",
    "to": 236
  }, {
    "from": 237,
    "label": "has",
    "to": 238
  }, {
    "from": 237,
    "label": "has",
    "to": 239
  }, {
    "from": 239,
    "label": "has",
    "to": 201
  }, {
    "from": 237,
    "label": "has",
    "to": 240
  }, {
    "from": 240,
    "label": "has",
    "to": 204
  }, {
    "from": 237,
    "label": "has",
    "to": 241
  }, {
    "from": 241,
    "label": "has",
    "to": 207
  }, {
    "from": 237,
    "label": "has",
    "to": 242
  }, {
    "from": 242,
    "label": "has",
    "to": 210
  }, {
    "from": 237,
    "label": "has",
    "to": 243
  }, {
    "from": 243,
    "label": "has",
    "to": 213
  }, {
    "from": 243,
    "label": "has",
    "to": 214
  }, {
    "from": 243,
    "label": "has",
    "to": 215
  }, {
    "from": 237,
    "label": "has",
    "to": 244
  }, {
    "from": 244,
    "label": "has",
    "to": 218
  }, {
    "from": 244,
    "label": "has",
    "to": 219
  }, {
    "from": 244,
    "label": "has",
    "to": 220
  }, {
    "from": 244,
    "label": "has",
    "to": 221
  }, {
    "from": 244,
    "label": "has",
    "to": 215
  }, {
    "from": 237,
    "label": "has",
    "to": 245
  }, {
    "from": 245,
    "label": "has",
    "to": 224
  }, {
    "from": 237,
    "label": "has",
    "to": 246
  }, {
    "from": 246,
    "label": "has",
    "to": 229
  }, {
    "from": 229,
    "label": "has",
    "to": 218
  }, {
    "from": 229,
    "label": "has",
    "to": 219
  }, {
    "from": 229,
    "label": "has",
    "to": 220
  }, {
    "from": 229,
    "label": "has",
    "to": 221
  }, {
    "from": 237,
    "label": "has",
    "to": 247
  }, {
    "from": 247,
    "label": "has",
    "to": 234
  }, {
    "from": 234,
    "label": "has",
    "to": 215
  }, {
    "from": 247,
    "label": "has",
    "to": 235
  }, {
    "from": 237,
    "label": "has",
    "to": 248
  }, {
    "from": 249,
    "label": "has",
    "to": 250
  }, {
    "from": 249,
    "label": "has",
    "to": 251
  }, {
    "from": 249,
    "label": "has",
    "to": 252
  }, {
    "from": 249,
    "label": "has",
    "to": 253
  }, {
    "from": 249,
    "label": "has",
    "to": 254
  }, {
    "from": 249,
    "label": "has",
    "to": 255
  }, {
    "from": 256,
    "label": "has",
    "to": 257
  }, {
    "from": 257,
    "label": "has",
    "to": 250
  }, {
    "from": 257,
    "label": "has",
    "to": 251
  }, {
    "from": 257,
    "label": "has",
    "to": 252
  }, {
    "from": 257,
    "label": "has",
    "to": 253
  }, {
    "from": 257,
    "label": "has",
    "to": 254
  }, {
    "from": 256,
    "label": "has",
    "to": 258
  }, {
    "from": 259,
    "label": "has",
    "to": 111
  }, {
    "from": 259,
    "label": "has",
    "to": 260
  }, {
    "from": 261,
    "label": "has",
    "to": 262
  }, {
    "from": 262,
    "label": "has",
    "to": 111
  }, {
    "from": 261,
    "label": "has",
    "to": 263
  }, {
    "from": 264,
    "label": "has",
    "to": 48
  }, {
    "from": 264,
    "label": "has",
    "to": 265
  }, {
    "from": 266,
    "label": "has",
    "to": 48
  }, {
    "from": 266,
    "label": "has",
    "to": 267
  }, {
    "from": 268,
    "label": "has",
    "to": 48
  }, {
    "from": 268,
    "label": "has",
    "to": 269
  }, {
    "from": 270,
    "label": "has",
    "to": 48
  }, {
    "from": 270,
    "label": "has",
    "to": 271
  }, {
    "from": 272,
    "label": "has",
    "to": 48
  }, {
    "from": 272,
    "label": "has",
    "to": 273
  }, {
    "from": 274,
    "label": "has",
    "to": 48
  }, {
    "from": 274,
    "label": "has",
    "to": 275
  }, {
    "from": 276,
    "label": "has",
    "to": 277
  }, {
    "from": 277,
    "label": "has",
    "to": 48
  }, {
    "from": 276,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 48
  }, {
    "from": 276,
    "label": "has",
    "to": 278
  }, {
    "from": 278,
    "label": "has",
    "to": 48
  }, {
    "from": 276,
    "label": "has",
    "to": 279
  }, {
    "from": 279,
    "label": "has",
    "to": 48
  }, {
    "from": 276,
    "label": "has",
    "to": 280
  }, {
    "from": 280,
    "label": "has",
    "to": 48
  }, {
    "from": 276,
    "label": "has",
    "to": 281
  }, {
    "from": 281,
    "label": "has",
    "to": 48
  }, {
    "from": 276,
    "label": "has",
    "to": 282
  }, {
    "from": 283,
    "label": "has",
    "to": 284
  }, {
    "from": 283,
    "label": "has",
    "to": 285
  }, {
    "from": 286,
    "label": "has",
    "to": 58
  }, {
    "from": 286,
    "label": "has",
    "to": 287
  }, {
    "from": 287,
    "label": "has",
    "to": 277
  }, {
    "from": 277,
    "label": "has",
    "to": 48
  }, {
    "from": 287,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 48
  }, {
    "from": 287,
    "label": "has",
    "to": 278
  }, {
    "from": 278,
    "label": "has",
    "to": 48
  }, {
    "from": 287,
    "label": "has",
    "to": 279
  }, {
    "from": 279,
    "label": "has",
    "to": 48
  }, {
    "from": 287,
    "label": "has",
    "to": 280
  }, {
    "from": 280,
    "label": "has",
    "to": 48
  }, {
    "from": 287,
    "label": "has",
    "to": 281
  }, {
    "from": 281,
    "label": "has",
    "to": 48
  }, {
    "from": 286,
    "label": "has",
    "to": 288
  }, {
    "from": 288,
    "label": "has",
    "to": 284
  }, {
    "from": 286,
    "label": "has",
    "to": 289
  }, {
    "from": 290,
    "label": "has",
    "to": 6
  }, {
    "from": 290,
    "label": "has",
    "to": 291
  }, {
    "from": 292,
    "label": "has",
    "to": 9
  }, {
    "from": 292,
    "label": "has",
    "to": 10
  }, {
    "from": 292,
    "label": "has",
    "to": 293
  }, {
    "from": 294,
    "label": "has",
    "to": 11
  }, {
    "from": 294,
    "label": "has",
    "to": 12
  }, {
    "from": 294,
    "label": "has",
    "to": 295
  }, {
    "from": 296,
    "label": "has",
    "to": 14
  }, {
    "from": 296,
    "label": "has",
    "to": 15
  }, {
    "from": 296,
    "label": "has",
    "to": 16
  }, {
    "from": 296,
    "label": "has",
    "to": 297
  }, {
    "from": 298,
    "label": "has",
    "to": 17
  }, {
    "from": 298,
    "label": "has",
    "to": 18
  }, {
    "from": 298,
    "label": "has",
    "to": 19
  }, {
    "from": 298,
    "label": "has",
    "to": 20
  }, {
    "from": 298,
    "label": "has",
    "to": 299
  }, {
    "from": 300,
    "label": "has",
    "to": 21
  }, {
    "from": 300,
    "label": "has",
    "to": 22
  }, {
    "from": 300,
    "label": "has",
    "to": 23
  }, {
    "from": 300,
    "label": "has",
    "to": 24
  }, {
    "from": 300,
    "label": "has",
    "to": 301
  }, {
    "from": 302,
    "label": "has",
    "to": 8
  }, {
    "from": 302,
    "label": "has",
    "to": 303
  }, {
    "from": 304,
    "label": "has",
    "to": 13
  }, {
    "from": 304,
    "label": "has",
    "to": 305
  }, {
    "from": 306,
    "label": "has",
    "to": 307
  }, {
    "from": 307,
    "label": "has",
    "to": 13
  }, {
    "from": 306,
    "label": "has",
    "to": 308
  }, {
    "from": 309,
    "label": "has",
    "to": 310
  }, {
    "from": 310,
    "label": "has",
    "to": 6
  }, {
    "from": 309,
    "label": "has",
    "to": 311
  }, {
    "from": 311,
    "label": "has",
    "to": 9
  }, {
    "from": 311,
    "label": "has",
    "to": 10
  }, {
    "from": 309,
    "label": "has",
    "to": 312
  }, {
    "from": 312,
    "label": "has",
    "to": 11
  }, {
    "from": 312,
    "label": "has",
    "to": 12
  }, {
    "from": 309,
    "label": "has",
    "to": 313
  }, {
    "from": 313,
    "label": "has",
    "to": 14
  }, {
    "from": 313,
    "label": "has",
    "to": 15
  }, {
    "from": 313,
    "label": "has",
    "to": 16
  }, {
    "from": 309,
    "label": "has",
    "to": 314
  }, {
    "from": 314,
    "label": "has",
    "to": 17
  }, {
    "from": 314,
    "label": "has",
    "to": 18
  }, {
    "from": 314,
    "label": "has",
    "to": 19
  }, {
    "from": 314,
    "label": "has",
    "to": 20
  }, {
    "from": 309,
    "label": "has",
    "to": 315
  }, {
    "from": 315,
    "label": "has",
    "to": 21
  }, {
    "from": 315,
    "label": "has",
    "to": 22
  }, {
    "from": 315,
    "label": "has",
    "to": 23
  }, {
    "from": 315,
    "label": "has",
    "to": 24
  }, {
    "from": 309,
    "label": "has",
    "to": 316
  }, {
    "from": 316,
    "label": "has",
    "to": 8
  }, {
    "from": 309,
    "label": "has",
    "to": 317
  }, {
    "from": 317,
    "label": "has",
    "to": 307
  }, {
    "from": 307,
    "label": "has",
    "to": 13
  }, {
    "from": 309,
    "label": "has",
    "to": 318
  }, {
    "from": 319,
    "label": "has",
    "to": 320
  }, {
    "from": 321,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 5,
    "label": "has",
    "to": 11
  }, {
    "from": 5,
    "label": "has",
    "to": 12
  }, {
    "from": 5,
    "label": "has",
    "to": 13
  }, {
    "from": 5,
    "label": "has",
    "to": 14
  }, {
    "from": 5,
    "label": "has",
    "to": 15
  }, {
    "from": 5,
    "label": "has",
    "to": 16
  }, {
    "from": 5,
    "label": "has",
    "to": 17
  }, {
    "from": 5,
    "label": "has",
    "to": 18
  }, {
    "from": 5,
    "label": "has",
    "to": 19
  }, {
    "from": 5,
    "label": "has",
    "to": 20
  }, {
    "from": 5,
    "label": "has",
    "to": 21
  }, {
    "from": 5,
    "label": "has",
    "to": 22
  }, {
    "from": 5,
    "label": "has",
    "to": 23
  }, {
    "from": 5,
    "label": "has",
    "to": 24
  }, {
    "from": 321,
    "label": "has",
    "to": 322
  }, {
    "from": 321,
    "label": "has",
    "to": 323
  }, {
    "from": 321,
    "label": "has",
    "to": 324
  }, {
    "from": 321,
    "label": "has",
    "to": 325
  }, {
    "from": 321,
    "label": "has",
    "to": 326
  }, {
    "from": 321,
    "label": "has",
    "to": 327
  }, {
    "from": 328,
    "label": "has",
    "to": 329
  }, {
    "from": 328,
    "label": "has",
    "to": 330
  }, {
    "from": 331,
    "label": "has",
    "to": 332
  }, {
    "from": 331,
    "label": "has",
    "to": 333
  }, {
    "from": 334,
    "label": "has",
    "to": 335
  }, {
    "from": 335,
    "label": "has",
    "to": 329
  }, {
    "from": 334,
    "label": "has",
    "to": 336
  }, {
    "from": 336,
    "label": "has",
    "to": 332
  }, {
    "from": 334,
    "label": "has",
    "to": 337
  }, {
    "from": 338,
    "label": "has",
    "to": 339
  }, {
    "from": 338,
    "label": "has",
    "to": 340
  }, {
    "from": 338,
    "label": "has",
    "to": 341
  }, {
    "from": 342,
    "label": "has",
    "to": 343
  }, {
    "from": 342,
    "label": "has",
    "to": 344
  }, {
    "from": 342,
    "label": "has",
    "to": 345
  }, {
    "from": 345,
    "label": "has",
    "to": 335
  }, {
    "from": 335,
    "label": "has",
    "to": 329
  }, {
    "from": 345,
    "label": "has",
    "to": 336
  }, {
    "from": 336,
    "label": "has",
    "to": 332
  }, {
    "from": 342,
    "label": "has",
    "to": 346
  }, {
    "from": 346,
    "label": "has",
    "to": 339
  }, {
    "from": 346,
    "label": "has",
    "to": 340
  }, {
    "from": 342,
    "label": "has",
    "to": 347
  }, {
    "from": 348,
    "label": "has",
    "to": 349
  }, {
    "from": 348,
    "label": "has",
    "to": 350
  }, {
    "from": 351,
    "label": "has",
    "to": 352
  }, {
    "from": 351,
    "label": "has",
    "to": 353
  }, {
    "from": 354,
    "label": "has",
    "to": 355
  }, {
    "from": 355,
    "label": "has",
    "to": 349
  }, {
    "from": 354,
    "label": "has",
    "to": 356
  }, {
    "from": 356,
    "label": "has",
    "to": 352
  }, {
    "from": 354,
    "label": "has",
    "to": 357
  }, {
    "from": 358,
    "label": "has",
    "to": 329
  }, {
    "from": 358,
    "label": "has",
    "to": 359
  }, {
    "from": 360,
    "label": "has",
    "to": 332
  }, {
    "from": 360,
    "label": "has",
    "to": 361
  }, {
    "from": 362,
    "label": "has",
    "to": 329
  }, {
    "from": 362,
    "label": "has",
    "to": 363
  }, {
    "from": 364,
    "label": "has",
    "to": 332
  }, {
    "from": 364,
    "label": "has",
    "to": 365
  }, {
    "from": 366,
    "label": "has",
    "to": 367
  }, {
    "from": 367,
    "label": "has",
    "to": 329
  }, {
    "from": 366,
    "label": "has",
    "to": 368
  }, {
    "from": 368,
    "label": "has",
    "to": 332
  }, {
    "from": 366,
    "label": "has",
    "to": 369
  }, {
    "from": 370,
    "label": "has",
    "to": 371
  }, {
    "from": 371,
    "label": "has",
    "to": 329
  }, {
    "from": 370,
    "label": "has",
    "to": 372
  }, {
    "from": 372,
    "label": "has",
    "to": 332
  }, {
    "from": 370,
    "label": "has",
    "to": 373
  }, {
    "from": 373,
    "label": "has",
    "to": 367
  }, {
    "from": 367,
    "label": "has",
    "to": 329
  }, {
    "from": 373,
    "label": "has",
    "to": 368
  }, {
    "from": 368,
    "label": "has",
    "to": 332
  }, {
    "from": 370,
    "label": "has",
    "to": 374
  }, {
    "from": 375,
    "label": "has",
    "to": 376
  }, {
    "from": 375,
    "label": "has",
    "to": 377
  }, {
    "from": 375,
    "label": "has",
    "to": 378
  }, {
    "from": 379,
    "label": "has",
    "to": 343
  }, {
    "from": 379,
    "label": "has",
    "to": 344
  }, {
    "from": 379,
    "label": "has",
    "to": 380
  }, {
    "from": 380,
    "label": "has",
    "to": 371
  }, {
    "from": 371,
    "label": "has",
    "to": 329
  }, {
    "from": 380,
    "label": "has",
    "to": 372
  }, {
    "from": 372,
    "label": "has",
    "to": 332
  }, {
    "from": 380,
    "label": "has",
    "to": 373
  }, {
    "from": 373,
    "label": "has",
    "to": 367
  }, {
    "from": 367,
    "label": "has",
    "to": 329
  }, {
    "from": 373,
    "label": "has",
    "to": 368
  }, {
    "from": 368,
    "label": "has",
    "to": 332
  }, {
    "from": 379,
    "label": "has",
    "to": 381
  }, {
    "from": 381,
    "label": "has",
    "to": 376
  }, {
    "from": 381,
    "label": "has",
    "to": 377
  }, {
    "from": 379,
    "label": "has",
    "to": 382
  }, {
    "from": 383,
    "label": "has",
    "to": 329
  }, {
    "from": 383,
    "label": "has",
    "to": 384
  }, {
    "from": 385,
    "label": "has",
    "to": 332
  }, {
    "from": 385,
    "label": "has",
    "to": 386
  }, {
    "from": 387,
    "label": "has",
    "to": 329
  }, {
    "from": 387,
    "label": "has",
    "to": 388
  }, {
    "from": 389,
    "label": "has",
    "to": 332
  }, {
    "from": 389,
    "label": "has",
    "to": 390
  }, {
    "from": 391,
    "label": "has",
    "to": 392
  }, {
    "from": 391,
    "label": "has",
    "to": 393
  }, {
    "from": 394,
    "label": "has",
    "to": 392
  }, {
    "from": 394,
    "label": "has",
    "to": 395
  }, {
    "from": 396,
    "label": "has",
    "to": 377
  }, {
    "from": 396,
    "label": "has",
    "to": 397
  }, {
    "from": 398,
    "label": "has",
    "to": 371
  }, {
    "from": 371,
    "label": "has",
    "to": 329
  }, {
    "from": 398,
    "label": "has",
    "to": 372
  }, {
    "from": 372,
    "label": "has",
    "to": 332
  }, {
    "from": 398,
    "label": "has",
    "to": 399
  }, {
    "from": 399,
    "label": "has",
    "to": 392
  }, {
    "from": 398,
    "label": "has",
    "to": 400
  }, {
    "from": 400,
    "label": "has",
    "to": 392
  }, {
    "from": 398,
    "label": "has",
    "to": 401
  }, {
    "from": 401,
    "label": "has",
    "to": 377
  }, {
    "from": 398,
    "label": "has",
    "to": 402
  }, {
    "from": 403,
    "label": "has",
    "to": 332
  }, {
    "from": 403,
    "label": "has",
    "to": 404
  }, {
    "from": 405,
    "label": "has",
    "to": 340
  }, {
    "from": 405,
    "label": "has",
    "to": 406
  }, {
    "from": 407,
    "label": "has",
    "to": 372
  }, {
    "from": 372,
    "label": "has",
    "to": 332
  }, {
    "from": 407,
    "label": "has",
    "to": 408
  }, {
    "from": 408,
    "label": "has",
    "to": 340
  }, {
    "from": 407,
    "label": "has",
    "to": 409
  }, {
    "from": 410,
    "label": "has",
    "to": 329
  }, {
    "from": 410,
    "label": "has",
    "to": 411
  }, {
    "from": 412,
    "label": "has",
    "to": 413
  }, {
    "from": 412,
    "label": "has",
    "to": 414
  }, {
    "from": 415,
    "label": "has",
    "to": 416
  }, {
    "from": 415,
    "label": "has",
    "to": 417
  }, {
    "from": 418,
    "label": "has",
    "to": 371
  }, {
    "from": 371,
    "label": "has",
    "to": 329
  }, {
    "from": 418,
    "label": "has",
    "to": 419
  }, {
    "from": 419,
    "label": "has",
    "to": 413
  }, {
    "from": 418,
    "label": "has",
    "to": 420
  }, {
    "from": 420,
    "label": "has",
    "to": 416
  }, {
    "from": 418,
    "label": "has",
    "to": 421
  }, {
    "from": 422,
    "label": "has",
    "to": 343
  }, {
    "from": 422,
    "label": "has",
    "to": 344
  }, {
    "from": 422,
    "label": "has",
    "to": 423
  }, {
    "from": 423,
    "label": "has",
    "to": 329
  }, {
    "from": 422,
    "label": "has",
    "to": 424
  }, {
    "from": 424,
    "label": "has",
    "to": 332
  }, {
    "from": 422,
    "label": "has",
    "to": 425
  }, {
    "from": 425,
    "label": "has",
    "to": 371
  }, {
    "from": 371,
    "label": "has",
    "to": 329
  }, {
    "from": 425,
    "label": "has",
    "to": 372
  }, {
    "from": 372,
    "label": "has",
    "to": 332
  }, {
    "from": 425,
    "label": "has",
    "to": 399
  }, {
    "from": 399,
    "label": "has",
    "to": 392
  }, {
    "from": 425,
    "label": "has",
    "to": 400
  }, {
    "from": 400,
    "label": "has",
    "to": 392
  }, {
    "from": 425,
    "label": "has",
    "to": 401
  }, {
    "from": 401,
    "label": "has",
    "to": 377
  }, {
    "from": 422,
    "label": "has",
    "to": 426
  }, {
    "from": 426,
    "label": "has",
    "to": 372
  }, {
    "from": 372,
    "label": "has",
    "to": 332
  }, {
    "from": 426,
    "label": "has",
    "to": 408
  }, {
    "from": 408,
    "label": "has",
    "to": 340
  }, {
    "from": 422,
    "label": "has",
    "to": 427
  }, {
    "from": 427,
    "label": "has",
    "to": 371
  }, {
    "from": 371,
    "label": "has",
    "to": 329
  }, {
    "from": 427,
    "label": "has",
    "to": 419
  }, {
    "from": 419,
    "label": "has",
    "to": 413
  }, {
    "from": 427,
    "label": "has",
    "to": 420
  }, {
    "from": 420,
    "label": "has",
    "to": 416
  }, {
    "from": 422,
    "label": "has",
    "to": 428
  }, {
    "from": 429,
    "label": "calls",
    "to": 444
  }, {
    "from": 429,
    "label": "calls",
    "to": 448
  }, {
    "from": 429,
    "label": "calls",
    "to": 448
  }, {
    "from": 429,
    "label": "calls",
    "to": 448
  }, {
    "from": 429,
    "label": "calls",
    "to": 448
  }, {
    "from": 429,
    "label": "calls",
    "to": 448
  }, {
    "from": 429,
    "label": "calls",
    "to": 448
  }, {
    "from": 429,
    "label": "calls",
    "to": 448
  }, {
    "from": 429,
    "label": "calls",
    "to": 448
  }, {
    "from": 429,
    "label": "calls",
    "to": 448
  }, {
    "from": 429,
    "label": "calls",
    "to": 448
  }, {
    "from": 429,
    "label": "calls",
    "to": 448
  }, {
    "from": 429,
    "label": "calls",
    "to": 448
  }, {
    "from": 429,
    "label": "calls",
    "to": 430
  }, {
    "from": 429,
    "label": "calls",
    "to": 433
  }, {
    "from": 429,
    "label": "calls",
    "to": 440
  }, {
    "from": 429,
    "label": "calls",
    "to": 440
  }, {
    "from": 429,
    "label": "calls",
    "to": 440
  }, {
    "from": 429,
    "label": "calls",
    "to": 440
  }, {
    "from": 429,
    "label": "calls",
    "to": 440
  }, {
    "from": 429,
    "label": "calls",
    "to": 440
  }, {
    "from": 429,
    "label": "calls",
    "to": 440
  }, {
    "from": 429,
    "label": "calls",
    "to": 440
  }, {
    "from": 429,
    "label": "calls",
    "to": 440
  }, {
    "from": 429,
    "label": "calls",
    "to": 440
  }, {
    "from": 429,
    "label": "calls",
    "to": 440
  }, {
    "from": 429,
    "label": "calls",
    "to": 440
  }, {
    "from": 429,
    "label": "calls",
    "to": 440
  }, {
    "from": 429,
    "label": "calls",
    "to": 440
  }, {
    "from": 429,
    "label": "calls",
    "to": 440
  }, {
    "from": 429,
    "label": "calls",
    "to": 440
  }, {
    "from": 429,
    "label": "calls",
    "to": 440
  }, {
    "from": 429,
    "label": "calls",
    "to": 440
  }, {
    "from": 429,
    "label": "calls",
    "to": 440
  }, {
    "from": 429,
    "label": "calls",
    "to": 440
  }, {
    "from": 429,
    "label": "calls",
    "to": 440
  }, {
    "from": 429,
    "label": "calls",
    "to": 440
  }, {
    "from": 429,
    "label": "calls",
    "to": 440
  }, {
    "from": 429,
    "label": "calls",
    "to": 441
  }, {
    "from": 429,
    "label": "calls",
    "to": 445
  }, {
    "from": 429,
    "label": "calls",
    "to": 445
  }, {
    "from": 429,
    "label": "calls",
    "to": 435
  }, {
    "from": 429,
    "label": "calls",
    "to": 435
  }, {
    "from": 429,
    "label": "calls",
    "to": 435
  }, {
    "from": 429,
    "label": "calls",
    "to": 435
  }, {
    "from": 429,
    "label": "calls",
    "to": 435
  }, {
    "from": 429,
    "label": "calls",
    "to": 435
  }, {
    "from": 429,
    "label": "calls",
    "to": 435
  }, {
    "from": 429,
    "label": "calls",
    "to": 435
  }, {
    "from": 429,
    "label": "calls",
    "to": 435
  }, {
    "from": 429,
    "label": "calls",
    "to": 435
  }, {
    "from": 429,
    "label": "calls",
    "to": 455
  }, {
    "from": 429,
    "label": "calls",
    "to": 455
  }, {
    "from": 429,
    "label": "calls",
    "to": 455
  }, {
    "from": 429,
    "label": "calls",
    "to": 455
  }, {
    "from": 429,
    "label": "calls",
    "to": 455
  }, {
    "from": 429,
    "label": "calls",
    "to": 455
  }, {
    "from": 429,
    "label": "calls",
    "to": 455
  }, {
    "from": 429,
    "label": "calls",
    "to": 438
  }, {
    "from": 429,
    "label": "calls",
    "to": 438
  }, {
    "from": 429,
    "label": "calls",
    "to": 442
  }, {
    "from": 429,
    "label": "calls",
    "to": 442
  }, {
    "from": 429,
    "label": "calls",
    "to": 442
  }, {
    "from": 429,
    "label": "calls",
    "to": 442
  }, {
    "from": 429,
    "label": "calls",
    "to": 442
  }, {
    "from": 429,
    "label": "calls",
    "to": 446
  }, {
    "from": 429,
    "label": "calls",
    "to": 453
  }, {
    "from": 429,
    "label": "calls",
    "to": 453
  }, {
    "from": 429,
    "label": "calls",
    "to": 453
  }, {
    "from": 429,
    "label": "calls",
    "to": 453
  }, {
    "from": 429,
    "label": "calls",
    "to": 453
  }, {
    "from": 429,
    "label": "calls",
    "to": 453
  }, {
    "from": 429,
    "label": "calls",
    "to": 453
  }, {
    "from": 429,
    "label": "calls",
    "to": 453
  }, {
    "from": 429,
    "label": "calls",
    "to": 453
  }, {
    "from": 429,
    "label": "calls",
    "to": 453
  }, {
    "from": 429,
    "label": "calls",
    "to": 453
  }, {
    "from": 429,
    "label": "calls",
    "to": 453
  }, {
    "from": 429,
    "label": "calls",
    "to": 453
  }, {
    "from": 429,
    "label": "calls",
    "to": 443
  }, {
    "from": 429,
    "label": "calls",
    "to": 443
  }, {
    "from": 429,
    "label": "calls",
    "to": 443
  }, {
    "from": 429,
    "label": "calls",
    "to": 443
  }, {
    "from": 429,
    "label": "calls",
    "to": 443
  }, {
    "from": 429,
    "label": "calls",
    "to": 443
  }, {
    "from": 429,
    "label": "calls",
    "to": 2
  }, {
    "from": 429,
    "label": "calls",
    "to": 2
  }, {
    "from": 429,
    "label": "calls",
    "to": 2
  }, {
    "from": 429,
    "label": "calls",
    "to": 2
  }, {
    "from": 429,
    "label": "calls",
    "to": 2
  }, {
    "from": 429,
    "label": "calls",
    "to": 2
  }, {
    "from": 429,
    "label": "calls",
    "to": 2
  }, {
    "from": 429,
    "label": "calls",
    "to": 2
  }, {
    "from": 429,
    "label": "calls",
    "to": 2
  }, {
    "from": 429,
    "label": "calls",
    "to": 2
  }, {
    "from": 429,
    "label": "calls",
    "to": 2
  }, {
    "from": 429,
    "label": "calls",
    "to": 2
  }, {
    "from": 429,
    "label": "calls",
    "to": 2
  }, {
    "from": 429,
    "label": "calls",
    "to": 447
  }, {
    "from": 429,
    "label": "calls",
    "to": 452
  }, {
    "from": 2,
    "label": "calls",
    "to": 454
  }, {
    "from": 429,
    "label": "calls",
    "to": 432
  }, {
    "from": 429,
    "label": "calls",
    "to": 432
  }, {
    "from": 429,
    "label": "calls",
    "to": 432
  }, {
    "from": 429,
    "label": "calls",
    "to": 432
  }, {
    "from": 429,
    "label": "calls",
    "to": 432
  }, {
    "from": 429,
    "label": "calls",
    "to": 432
  }, {
    "from": 429,
    "label": "calls",
    "to": 432
  }, {
    "from": 429,
    "label": "calls",
    "to": 432
  }, {
    "from": 429,
    "label": "calls",
    "to": 432
  }, {
    "from": 429,
    "label": "calls",
    "to": 432
  }, {
    "from": 429,
    "label": "calls",
    "to": 432
  }, {
    "from": 429,
    "label": "calls",
    "to": 432
  }, {
    "from": 429,
    "label": "calls",
    "to": 432
  }, {
    "from": 429,
    "label": "calls",
    "to": 432
  }, {
    "from": 429,
    "label": "calls",
    "to": 432
  }, {
    "from": 429,
    "label": "calls",
    "to": 432
  }, {
    "from": 429,
    "label": "calls",
    "to": 432
  }, {
    "from": 5,
    "label": "calls",
    "to": 432
  }, {
    "from": 5,
    "label": "calls",
    "to": 432
  }, {
    "from": 5,
    "label": "calls",
    "to": 432
  }, {
    "from": 5,
    "label": "calls",
    "to": 432
  }, {
    "from": 5,
    "label": "calls",
    "to": 432
  }, {
    "from": 5,
    "label": "calls",
    "to": 432
  }, {
    "from": 5,
    "label": "calls",
    "to": 432
  }, {
    "from": 5,
    "label": "calls",
    "to": 432
  }, {
    "from": 5,
    "label": "calls",
    "to": 432
  }, {
    "from": 5,
    "label": "calls",
    "to": 432
  }, {
    "from": 5,
    "label": "calls",
    "to": 432
  }, {
    "from": 5,
    "label": "calls",
    "to": 432
  }, {
    "from": 5,
    "label": "calls",
    "to": 432
  }, {
    "from": 5,
    "label": "calls",
    "to": 432
  }, {
    "from": 5,
    "label": "calls",
    "to": 432
  }, {
    "from": 5,
    "label": "calls",
    "to": 432
  }, {
    "from": 5,
    "label": "calls",
    "to": 432
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 434
  }, {
    "from": 429,
    "label": "calls",
    "to": 436
  }, {
    "from": 429,
    "label": "calls",
    "to": 439
  }, {
    "from": 429,
    "label": "calls",
    "to": 439
  }, {
    "from": 429,
    "label": "calls",
    "to": 439
  }, {
    "from": 429,
    "label": "calls",
    "to": 439
  }, {
    "from": 429,
    "label": "calls",
    "to": 439
  }, {
    "from": 429,
    "label": "calls",
    "to": 439
  }, {
    "from": 5,
    "label": "calls",
    "to": 439
  }, {
    "from": 5,
    "label": "calls",
    "to": 439
  }, {
    "from": 429,
    "label": "calls",
    "to": 451
  }, {
    "from": 429,
    "label": "calls",
    "to": 456
  }, {
    "from": 429,
    "label": "calls",
    "to": 456
  }, {
    "from": 429,
    "label": "calls",
    "to": 456
  }, {
    "from": 429,
    "label": "calls",
    "to": 456
  }, {
    "from": 429,
    "label": "calls",
    "to": 456
  }, {
    "from": 429,
    "label": "calls",
    "to": 456
  }, {
    "from": 429,
    "label": "calls",
    "to": 456
  }, {
    "from": 429,
    "label": "calls",
    "to": 456
  }, {
    "from": 429,
    "label": "calls",
    "to": 456
  }, {
    "from": 429,
    "label": "calls",
    "to": 456
  }, {
    "from": 429,
    "label": "calls",
    "to": 456
  }, {
    "from": 429,
    "label": "calls",
    "to": 450
  }, {
    "from": 429,
    "label": "calls",
    "to": 431
  }, {
    "from": 429,
    "label": "calls",
    "to": 431
  }, {
    "from": 429,
    "label": "calls",
    "to": 431
  }, {
    "from": 429,
    "label": "calls",
    "to": 431
  }, {
    "from": 429,
    "label": "calls",
    "to": 431
  }, {
    "from": 429,
    "label": "calls",
    "to": 437
  }, {
    "from": 429,
    "label": "calls",
    "to": 437
  }, {
    "from": 429,
    "label": "calls",
    "to": 437
  }, {
    "from": 429,
    "label": "calls",
    "to": 437
  }, {
    "from": 429,
    "label": "calls",
    "to": 437
  }, {
    "from": 429,
    "label": "calls",
    "to": 437
  }, {
    "from": 429,
    "label": "calls",
    "to": 437
  }, {
    "from": 429,
    "label": "calls",
    "to": 437
  }, {
    "from": 429,
    "label": "calls",
    "to": 437
  }, {
    "from": 429,
    "label": "calls",
    "to": 437
  }, {
    "from": 429,
    "label": "calls",
    "to": 437
  }, {
    "from": 429,
    "label": "calls",
    "to": 437
  }, {
    "from": 429,
    "label": "calls",
    "to": 437
  }, {
    "from": 429,
    "label": "calls",
    "to": 437
  }, {
    "from": 429,
    "label": "calls",
    "to": 437
  }, {
    "from": 429,
    "label": "calls",
    "to": 437
  }, {
    "from": 429,
    "label": "calls",
    "to": 437
  }, {
    "from": 429,
    "label": "calls",
    "to": 437
  }, {
    "from": 429,
    "label": "calls",
    "to": 437
  }, {
    "from": 429,
    "label": "calls",
    "to": 437
  }, {
    "from": 429,
    "label": "calls",
    "to": 437
  }, {
    "from": 429,
    "label": "calls",
    "to": 437
  }, {
    "from": 429,
    "label": "calls",
    "to": 437
  }, {
    "from": 429,
    "label": "calls",
    "to": 437
  }, {
    "from": 429,
    "label": "calls",
    "to": 437
  }, {
    "from": 429,
    "label": "calls",
    "to": 437
  }, {
    "from": 429,
    "label": "calls",
    "to": 437
  }, {
    "from": 429,
    "label": "calls",
    "to": 437
  }, {
    "from": 429,
    "label": "calls",
    "to": 437
  }, {
    "from": 429,
    "label": "calls",
    "to": 437
  }, {
    "from": 429,
    "label": "calls",
    "to": 437
  }, {
    "from": 429,
    "label": "calls",
    "to": 437
  }, {
    "from": 429,
    "label": "calls",
    "to": 449
  }, {
    "from": 429,
    "label": "calls",
    "to": 449
  }, {
    "from": 429,
    "label": "calls",
    "to": 449
  }, {
    "from": 429,
    "label": "calls",
    "to": 449
  }, {
    "from": 429,
    "label": "calls",
    "to": 449
  }, {
    "from": 429,
    "label": "calls",
    "to": 449
  }, {
    "from": 1,
    "label": "contains",
    "to": 429
  }, {
    "from": 429,
    "label": "declares",
    "to": 2
  }, {
    "from": 429,
    "label": "declares",
    "to": 5
  }, {
    "from": 429,
    "label": "declares",
    "to": 26
  }, {
    "from": 429,
    "label": "declares",
    "to": 29
  }, {
    "from": 429,
    "label": "declares",
    "to": 32
  }, {
    "from": 429,
    "label": "declares",
    "to": 37
  }, {
    "from": 429,
    "label": "declares",
    "to": 39
  }, {
    "from": 429,
    "label": "declares",
    "to": 40
  }, {
    "from": 429,
    "label": "declares",
    "to": 42
  }, {
    "from": 429,
    "label": "declares",
    "to": 47
  }, {
    "from": 429,
    "label": "declares",
    "to": 50
  }, {
    "from": 429,
    "label": "declares",
    "to": 52
  }, {
    "from": 429,
    "label": "declares",
    "to": 53
  }, {
    "from": 429,
    "label": "declares",
    "to": 54
  }, {
    "from": 429,
    "label": "declares",
    "to": 57
  }, {
    "from": 429,
    "label": "declares",
    "to": 65
  }, {
    "from": 429,
    "label": "declares",
    "to": 67
  }, {
    "from": 429,
    "label": "declares",
    "to": 70
  }, {
    "from": 429,
    "label": "declares",
    "to": 73
  }, {
    "from": 429,
    "label": "declares",
    "to": 77
  }, {
    "from": 429,
    "label": "declares",
    "to": 80
  }, {
    "from": 429,
    "label": "declares",
    "to": 82
  }, {
    "from": 429,
    "label": "declares",
    "to": 85
  }, {
    "from": 429,
    "label": "declares",
    "to": 87
  }, {
    "from": 429,
    "label": "declares",
    "to": 88
  }, {
    "from": 429,
    "label": "declares",
    "to": 89
  }, {
    "from": 429,
    "label": "declares",
    "to": 92
  }, {
    "from": 429,
    "label": "declares",
    "to": 98
  }, {
    "from": 429,
    "label": "declares",
    "to": 102
  }, {
    "from": 429,
    "label": "declares",
    "to": 104
  }, {
    "from": 429,
    "label": "declares",
    "to": 107
  }, {
    "from": 429,
    "label": "declares",
    "to": 110
  }, {
    "from": 429,
    "label": "declares",
    "to": 113
  }, {
    "from": 429,
    "label": "declares",
    "to": 116
  }, {
    "from": 429,
    "label": "declares",
    "to": 120
  }, {
    "from": 429,
    "label": "declares",
    "to": 124
  }, {
    "from": 429,
    "label": "declares",
    "to": 127
  }, {
    "from": 429,
    "label": "declares",
    "to": 130
  }, {
    "from": 429,
    "label": "declares",
    "to": 133
  }, {
    "from": 429,
    "label": "declares",
    "to": 136
  }, {
    "from": 429,
    "label": "declares",
    "to": 139
  }, {
    "from": 429,
    "label": "declares",
    "to": 142
  }, {
    "from": 429,
    "label": "declares",
    "to": 145
  }, {
    "from": 429,
    "label": "declares",
    "to": 148
  }, {
    "from": 429,
    "label": "declares",
    "to": 151
  }, {
    "from": 429,
    "label": "declares",
    "to": 154
  }, {
    "from": 429,
    "label": "declares",
    "to": 162
  }, {
    "from": 429,
    "label": "declares",
    "to": 165
  }, {
    "from": 429,
    "label": "declares",
    "to": 175
  }, {
    "from": 429,
    "label": "declares",
    "to": 179
  }, {
    "from": 429,
    "label": "declares",
    "to": 182
  }, {
    "from": 429,
    "label": "declares",
    "to": 187
  }, {
    "from": 429,
    "label": "declares",
    "to": 188
  }, {
    "from": 429,
    "label": "declares",
    "to": 192
  }, {
    "from": 429,
    "label": "declares",
    "to": 195
  }, {
    "from": 429,
    "label": "declares",
    "to": 200
  }, {
    "from": 429,
    "label": "declares",
    "to": 203
  }, {
    "from": 429,
    "label": "declares",
    "to": 206
  }, {
    "from": 429,
    "label": "declares",
    "to": 209
  }, {
    "from": 429,
    "label": "declares",
    "to": 212
  }, {
    "from": 429,
    "label": "declares",
    "to": 217
  }, {
    "from": 429,
    "label": "declares",
    "to": 223
  }, {
    "from": 429,
    "label": "declares",
    "to": 226
  }, {
    "from": 429,
    "label": "declares",
    "to": 228
  }, {
    "from": 429,
    "label": "declares",
    "to": 231
  }, {
    "from": 429,
    "label": "declares",
    "to": 233
  }, {
    "from": 429,
    "label": "declares",
    "to": 237
  }, {
    "from": 429,
    "label": "declares",
    "to": 249
  }, {
    "from": 429,
    "label": "declares",
    "to": 256
  }, {
    "from": 429,
    "label": "declares",
    "to": 259
  }, {
    "from": 429,
    "label": "declares",
    "to": 261
  }, {
    "from": 429,
    "label": "declares",
    "to": 264
  }, {
    "from": 429,
    "label": "declares",
    "to": 266
  }, {
    "from": 429,
    "label": "declares",
    "to": 268
  }, {
    "from": 429,
    "label": "declares",
    "to": 270
  }, {
    "from": 429,
    "label": "declares",
    "to": 272
  }, {
    "from": 429,
    "label": "declares",
    "to": 274
  }, {
    "from": 429,
    "label": "declares",
    "to": 276
  }, {
    "from": 429,
    "label": "declares",
    "to": 283
  }, {
    "from": 429,
    "label": "declares",
    "to": 286
  }, {
    "from": 429,
    "label": "declares",
    "to": 290
  }, {
    "from": 429,
    "label": "declares",
    "to": 292
  }, {
    "from": 429,
    "label": "declares",
    "to": 294
  }, {
    "from": 429,
    "label": "declares",
    "to": 296
  }, {
    "from": 429,
    "label": "declares",
    "to": 298
  }, {
    "from": 429,
    "label": "declares",
    "to": 300
  }, {
    "from": 429,
    "label": "declares",
    "to": 302
  }, {
    "from": 429,
    "label": "declares",
    "to": 304
  }, {
    "from": 429,
    "label": "declares",
    "to": 306
  }, {
    "from": 429,
    "label": "declares",
    "to": 309
  }, {
    "from": 429,
    "label": "declares",
    "to": 319
  }, {
    "from": 429,
    "label": "declares",
    "to": 321
  }, {
    "from": 429,
    "label": "declares",
    "to": 328
  }, {
    "from": 429,
    "label": "declares",
    "to": 331
  }, {
    "from": 429,
    "label": "declares",
    "to": 334
  }, {
    "from": 429,
    "label": "declares",
    "to": 338
  }, {
    "from": 429,
    "label": "declares",
    "to": 342
  }, {
    "from": 429,
    "label": "declares",
    "to": 348
  }, {
    "from": 429,
    "label": "declares",
    "to": 351
  }, {
    "from": 429,
    "label": "declares",
    "to": 354
  }, {
    "from": 429,
    "label": "declares",
    "to": 358
  }, {
    "from": 429,
    "label": "declares",
    "to": 360
  }, {
    "from": 429,
    "label": "declares",
    "to": 362
  }, {
    "from": 429,
    "label": "declares",
    "to": 364
  }, {
    "from": 429,
    "label": "declares",
    "to": 366
  }, {
    "from": 429,
    "label": "declares",
    "to": 370
  }, {
    "from": 429,
    "label": "declares",
    "to": 375
  }, {
    "from": 429,
    "label": "declares",
    "to": 379
  }, {
    "from": 429,
    "label": "declares",
    "to": 383
  }, {
    "from": 429,
    "label": "declares",
    "to": 385
  }, {
    "from": 429,
    "label": "declares",
    "to": 387
  }, {
    "from": 429,
    "label": "declares",
    "to": 389
  }, {
    "from": 429,
    "label": "declares",
    "to": 391
  }, {
    "from": 429,
    "label": "declares",
    "to": 394
  }, {
    "from": 429,
    "label": "declares",
    "to": 396
  }, {
    "from": 429,
    "label": "declares",
    "to": 398
  }, {
    "from": 429,
    "label": "declares",
    "to": 403
  }, {
    "from": 429,
    "label": "declares",
    "to": 405
  }, {
    "from": 429,
    "label": "declares",
    "to": 407
  }, {
    "from": 429,
    "label": "declares",
    "to": 410
  }, {
    "from": 429,
    "label": "declares",
    "to": 412
  }, {
    "from": 429,
    "label": "declares",
    "to": 415
  }, {
    "from": 429,
    "label": "declares",
    "to": 418
  }, {
    "from": 429,
    "label": "declares",
    "to": 422
  }, {
    "from": 1,
    "label": "contains",
    "to": 457
  }, {
    "from": 1,
    "label": "contains",
    "to": 458
  }, {
    "from": 34,
    "label": "hasArgument",
    "to": 26
  }, {
    "from": 34,
    "label": "hasArgument",
    "to": 37
  }, {
    "from": 35,
    "label": "hasArgument",
    "to": 29
  }, {
    "from": 35,
    "label": "hasArgument",
    "to": 40
  }, {
    "from": 43,
    "label": "hasArgument",
    "to": 26
  }, {
    "from": 43,
    "label": "hasArgument",
    "to": 37
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 39
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 52
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 53
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 87
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 88
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 187
  }, {
    "from": 45,
    "label": "hasArgument",
    "to": 29
  }, {
    "from": 45,
    "label": "hasArgument",
    "to": 40
  }, {
    "from": 59,
    "label": "hasArgument",
    "to": 47
  }, {
    "from": 59,
    "label": "hasArgument",
    "to": 50
  }, {
    "from": 59,
    "label": "hasArgument",
    "to": 65
  }, {
    "from": 59,
    "label": "hasArgument",
    "to": 80
  }, {
    "from": 60,
    "label": "hasArgument",
    "to": 47
  }, {
    "from": 60,
    "label": "hasArgument",
    "to": 50
  }, {
    "from": 60,
    "label": "hasArgument",
    "to": 65
  }, {
    "from": 60,
    "label": "hasArgument",
    "to": 80
  }, {
    "from": 61,
    "label": "hasArgument",
    "to": 39
  }, {
    "from": 61,
    "label": "hasArgument",
    "to": 52
  }, {
    "from": 61,
    "label": "hasArgument",
    "to": 53
  }, {
    "from": 61,
    "label": "hasArgument",
    "to": 87
  }, {
    "from": 61,
    "label": "hasArgument",
    "to": 88
  }, {
    "from": 61,
    "label": "hasArgument",
    "to": 187
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 39
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 52
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 53
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 87
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 88
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 187
  }, {
    "from": 63,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 74,
    "label": "hasArgument",
    "to": 67
  }, {
    "from": 75,
    "label": "hasArgument",
    "to": 70
  }, {
    "from": 78,
    "label": "hasArgument",
    "to": 67
  }, {
    "from": 78,
    "label": "hasArgument",
    "to": 70
  }, {
    "from": 78,
    "label": "hasArgument",
    "to": 73
  }, {
    "from": 93,
    "label": "hasArgument",
    "to": 85
  }, {
    "from": 93,
    "label": "hasArgument",
    "to": 264
  }, {
    "from": 93,
    "label": "hasArgument",
    "to": 266
  }, {
    "from": 93,
    "label": "hasArgument",
    "to": 268
  }, {
    "from": 93,
    "label": "hasArgument",
    "to": 270
  }, {
    "from": 93,
    "label": "hasArgument",
    "to": 272
  }, {
    "from": 93,
    "label": "hasArgument",
    "to": 274
  }, {
    "from": 94,
    "label": "hasArgument",
    "to": 39
  }, {
    "from": 94,
    "label": "hasArgument",
    "to": 52
  }, {
    "from": 94,
    "label": "hasArgument",
    "to": 53
  }, {
    "from": 94,
    "label": "hasArgument",
    "to": 87
  }, {
    "from": 94,
    "label": "hasArgument",
    "to": 88
  }, {
    "from": 94,
    "label": "hasArgument",
    "to": 187
  }, {
    "from": 95,
    "label": "hasArgument",
    "to": 39
  }, {
    "from": 95,
    "label": "hasArgument",
    "to": 52
  }, {
    "from": 95,
    "label": "hasArgument",
    "to": 53
  }, {
    "from": 95,
    "label": "hasArgument",
    "to": 87
  }, {
    "from": 95,
    "label": "hasArgument",
    "to": 88
  }, {
    "from": 95,
    "label": "hasArgument",
    "to": 187
  }, {
    "from": 96,
    "label": "hasArgument",
    "to": 89
  }, {
    "from": 99,
    "label": "hasArgument",
    "to": 82
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 85
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 89
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 92
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 264
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 266
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 268
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 270
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 272
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 274
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 39
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 52
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 53
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 87
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 88
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 187
  }, {
    "from": 105,
    "label": "hasArgument",
    "to": 102
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 102
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 104
  }, {
    "from": 114,
    "label": "hasArgument",
    "to": 110
  }, {
    "from": 155,
    "label": "hasArgument",
    "to": 136
  }, {
    "from": 156,
    "label": "hasArgument",
    "to": 139
  }, {
    "from": 157,
    "label": "hasArgument",
    "to": 142
  }, {
    "from": 158,
    "label": "hasArgument",
    "to": 145
  }, {
    "from": 159,
    "label": "hasArgument",
    "to": 148
  }, {
    "from": 160,
    "label": "hasArgument",
    "to": 151
  }, {
    "from": 166,
    "label": "hasArgument",
    "to": 116
  }, {
    "from": 167,
    "label": "hasArgument",
    "to": 120
  }, {
    "from": 168,
    "label": "hasArgument",
    "to": 124
  }, {
    "from": 169,
    "label": "hasArgument",
    "to": 127
  }, {
    "from": 170,
    "label": "hasArgument",
    "to": 130
  }, {
    "from": 171,
    "label": "hasArgument",
    "to": 133
  }, {
    "from": 172,
    "label": "hasArgument",
    "to": 136
  }, {
    "from": 172,
    "label": "hasArgument",
    "to": 139
  }, {
    "from": 172,
    "label": "hasArgument",
    "to": 142
  }, {
    "from": 172,
    "label": "hasArgument",
    "to": 145
  }, {
    "from": 172,
    "label": "hasArgument",
    "to": 148
  }, {
    "from": 172,
    "label": "hasArgument",
    "to": 151
  }, {
    "from": 172,
    "label": "hasArgument",
    "to": 154
  }, {
    "from": 173,
    "label": "hasArgument",
    "to": 162
  }, {
    "from": 180,
    "label": "hasArgument",
    "to": 175
  }, {
    "from": 184,
    "label": "hasArgument",
    "to": 116
  }, {
    "from": 184,
    "label": "hasArgument",
    "to": 120
  }, {
    "from": 184,
    "label": "hasArgument",
    "to": 124
  }, {
    "from": 184,
    "label": "hasArgument",
    "to": 127
  }, {
    "from": 184,
    "label": "hasArgument",
    "to": 130
  }, {
    "from": 184,
    "label": "hasArgument",
    "to": 133
  }, {
    "from": 184,
    "label": "hasArgument",
    "to": 136
  }, {
    "from": 184,
    "label": "hasArgument",
    "to": 139
  }, {
    "from": 184,
    "label": "hasArgument",
    "to": 142
  }, {
    "from": 184,
    "label": "hasArgument",
    "to": 145
  }, {
    "from": 184,
    "label": "hasArgument",
    "to": 148
  }, {
    "from": 184,
    "label": "hasArgument",
    "to": 151
  }, {
    "from": 184,
    "label": "hasArgument",
    "to": 154
  }, {
    "from": 184,
    "label": "hasArgument",
    "to": 162
  }, {
    "from": 184,
    "label": "hasArgument",
    "to": 165
  }, {
    "from": 185,
    "label": "hasArgument",
    "to": 175
  }, {
    "from": 185,
    "label": "hasArgument",
    "to": 179
  }, {
    "from": 197,
    "label": "hasArgument",
    "to": 188
  }, {
    "from": 198,
    "label": "hasArgument",
    "to": 192
  }, {
    "from": 229,
    "label": "hasArgument",
    "to": 226
  }, {
    "from": 234,
    "label": "hasArgument",
    "to": 231
  }, {
    "from": 239,
    "label": "hasArgument",
    "to": 200
  }, {
    "from": 240,
    "label": "hasArgument",
    "to": 203
  }, {
    "from": 241,
    "label": "hasArgument",
    "to": 206
  }, {
    "from": 242,
    "label": "hasArgument",
    "to": 209
  }, {
    "from": 243,
    "label": "hasArgument",
    "to": 212
  }, {
    "from": 244,
    "label": "hasArgument",
    "to": 217
  }, {
    "from": 245,
    "label": "hasArgument",
    "to": 223
  }, {
    "from": 246,
    "label": "hasArgument",
    "to": 226
  }, {
    "from": 246,
    "label": "hasArgument",
    "to": 228
  }, {
    "from": 247,
    "label": "hasArgument",
    "to": 231
  }, {
    "from": 247,
    "label": "hasArgument",
    "to": 233
  }, {
    "from": 257,
    "label": "hasArgument",
    "to": 249
  }, {
    "from": 262,
    "label": "hasArgument",
    "to": 259
  }, {
    "from": 277,
    "label": "hasArgument",
    "to": 85
  }, {
    "from": 277,
    "label": "hasArgument",
    "to": 264
  }, {
    "from": 277,
    "label": "hasArgument",
    "to": 266
  }, {
    "from": 277,
    "label": "hasArgument",
    "to": 268
  }, {
    "from": 277,
    "label": "hasArgument",
    "to": 270
  }, {
    "from": 277,
    "label": "hasArgument",
    "to": 272
  }, {
    "from": 277,
    "label": "hasArgument",
    "to": 274
  }, {
    "from": 278,
    "label": "hasArgument",
    "to": 85
  }, {
    "from": 278,
    "label": "hasArgument",
    "to": 264
  }, {
    "from": 278,
    "label": "hasArgument",
    "to": 266
  }, {
    "from": 278,
    "label": "hasArgument",
    "to": 268
  }, {
    "from": 278,
    "label": "hasArgument",
    "to": 270
  }, {
    "from": 278,
    "label": "hasArgument",
    "to": 272
  }, {
    "from": 278,
    "label": "hasArgument",
    "to": 274
  }, {
    "from": 279,
    "label": "hasArgument",
    "to": 85
  }, {
    "from": 279,
    "label": "hasArgument",
    "to": 264
  }, {
    "from": 279,
    "label": "hasArgument",
    "to": 266
  }, {
    "from": 279,
    "label": "hasArgument",
    "to": 268
  }, {
    "from": 279,
    "label": "hasArgument",
    "to": 270
  }, {
    "from": 279,
    "label": "hasArgument",
    "to": 272
  }, {
    "from": 279,
    "label": "hasArgument",
    "to": 274
  }, {
    "from": 280,
    "label": "hasArgument",
    "to": 85
  }, {
    "from": 280,
    "label": "hasArgument",
    "to": 264
  }, {
    "from": 280,
    "label": "hasArgument",
    "to": 266
  }, {
    "from": 280,
    "label": "hasArgument",
    "to": 268
  }, {
    "from": 280,
    "label": "hasArgument",
    "to": 270
  }, {
    "from": 280,
    "label": "hasArgument",
    "to": 272
  }, {
    "from": 280,
    "label": "hasArgument",
    "to": 274
  }, {
    "from": 281,
    "label": "hasArgument",
    "to": 85
  }, {
    "from": 281,
    "label": "hasArgument",
    "to": 264
  }, {
    "from": 281,
    "label": "hasArgument",
    "to": 266
  }, {
    "from": 281,
    "label": "hasArgument",
    "to": 268
  }, {
    "from": 281,
    "label": "hasArgument",
    "to": 270
  }, {
    "from": 281,
    "label": "hasArgument",
    "to": 272
  }, {
    "from": 281,
    "label": "hasArgument",
    "to": 274
  }, {
    "from": 287,
    "label": "hasArgument",
    "to": 85
  }, {
    "from": 287,
    "label": "hasArgument",
    "to": 264
  }, {
    "from": 287,
    "label": "hasArgument",
    "to": 266
  }, {
    "from": 287,
    "label": "hasArgument",
    "to": 268
  }, {
    "from": 287,
    "label": "hasArgument",
    "to": 270
  }, {
    "from": 287,
    "label": "hasArgument",
    "to": 272
  }, {
    "from": 287,
    "label": "hasArgument",
    "to": 274
  }, {
    "from": 287,
    "label": "hasArgument",
    "to": 276
  }, {
    "from": 288,
    "label": "hasArgument",
    "to": 283
  }, {
    "from": 307,
    "label": "hasArgument",
    "to": 304
  }, {
    "from": 310,
    "label": "hasArgument",
    "to": 290
  }, {
    "from": 311,
    "label": "hasArgument",
    "to": 292
  }, {
    "from": 312,
    "label": "hasArgument",
    "to": 294
  }, {
    "from": 313,
    "label": "hasArgument",
    "to": 296
  }, {
    "from": 314,
    "label": "hasArgument",
    "to": 298
  }, {
    "from": 315,
    "label": "hasArgument",
    "to": 300
  }, {
    "from": 316,
    "label": "hasArgument",
    "to": 302
  }, {
    "from": 317,
    "label": "hasArgument",
    "to": 304
  }, {
    "from": 317,
    "label": "hasArgument",
    "to": 306
  }, {
    "from": 326,
    "label": "hasArgument",
    "to": 319
  }, {
    "from": 335,
    "label": "hasArgument",
    "to": 328
  }, {
    "from": 335,
    "label": "hasArgument",
    "to": 358
  }, {
    "from": 335,
    "label": "hasArgument",
    "to": 387
  }, {
    "from": 335,
    "label": "hasArgument",
    "to": 410
  }, {
    "from": 336,
    "label": "hasArgument",
    "to": 331
  }, {
    "from": 336,
    "label": "hasArgument",
    "to": 360
  }, {
    "from": 336,
    "label": "hasArgument",
    "to": 389
  }, {
    "from": 336,
    "label": "hasArgument",
    "to": 403
  }, {
    "from": 345,
    "label": "hasArgument",
    "to": 328
  }, {
    "from": 345,
    "label": "hasArgument",
    "to": 331
  }, {
    "from": 345,
    "label": "hasArgument",
    "to": 334
  }, {
    "from": 345,
    "label": "hasArgument",
    "to": 358
  }, {
    "from": 345,
    "label": "hasArgument",
    "to": 360
  }, {
    "from": 345,
    "label": "hasArgument",
    "to": 387
  }, {
    "from": 345,
    "label": "hasArgument",
    "to": 389
  }, {
    "from": 345,
    "label": "hasArgument",
    "to": 403
  }, {
    "from": 345,
    "label": "hasArgument",
    "to": 410
  }, {
    "from": 346,
    "label": "hasArgument",
    "to": 338
  }, {
    "from": 355,
    "label": "hasArgument",
    "to": 348
  }, {
    "from": 356,
    "label": "hasArgument",
    "to": 351
  }, {
    "from": 367,
    "label": "hasArgument",
    "to": 362
  }, {
    "from": 368,
    "label": "hasArgument",
    "to": 364
  }, {
    "from": 371,
    "label": "hasArgument",
    "to": 328
  }, {
    "from": 371,
    "label": "hasArgument",
    "to": 358
  }, {
    "from": 371,
    "label": "hasArgument",
    "to": 387
  }, {
    "from": 371,
    "label": "hasArgument",
    "to": 410
  }, {
    "from": 372,
    "label": "hasArgument",
    "to": 331
  }, {
    "from": 372,
    "label": "hasArgument",
    "to": 360
  }, {
    "from": 372,
    "label": "hasArgument",
    "to": 389
  }, {
    "from": 372,
    "label": "hasArgument",
    "to": 403
  }, {
    "from": 373,
    "label": "hasArgument",
    "to": 362
  }, {
    "from": 373,
    "label": "hasArgument",
    "to": 364
  }, {
    "from": 373,
    "label": "hasArgument",
    "to": 366
  }, {
    "from": 380,
    "label": "hasArgument",
    "to": 328
  }, {
    "from": 380,
    "label": "hasArgument",
    "to": 331
  }, {
    "from": 380,
    "label": "hasArgument",
    "to": 358
  }, {
    "from": 380,
    "label": "hasArgument",
    "to": 360
  }, {
    "from": 380,
    "label": "hasArgument",
    "to": 362
  }, {
    "from": 380,
    "label": "hasArgument",
    "to": 364
  }, {
    "from": 380,
    "label": "hasArgument",
    "to": 366
  }, {
    "from": 380,
    "label": "hasArgument",
    "to": 370
  }, {
    "from": 380,
    "label": "hasArgument",
    "to": 387
  }, {
    "from": 380,
    "label": "hasArgument",
    "to": 389
  }, {
    "from": 380,
    "label": "hasArgument",
    "to": 403
  }, {
    "from": 380,
    "label": "hasArgument",
    "to": 410
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 375
  }, {
    "from": 399,
    "label": "hasArgument",
    "to": 391
  }, {
    "from": 399,
    "label": "hasArgument",
    "to": 394
  }, {
    "from": 400,
    "label": "hasArgument",
    "to": 391
  }, {
    "from": 400,
    "label": "hasArgument",
    "to": 394
  }, {
    "from": 401,
    "label": "hasArgument",
    "to": 396
  }, {
    "from": 408,
    "label": "hasArgument",
    "to": 405
  }, {
    "from": 419,
    "label": "hasArgument",
    "to": 412
  }, {
    "from": 420,
    "label": "hasArgument",
    "to": 415
  }, {
    "from": 423,
    "label": "hasArgument",
    "to": 383
  }, {
    "from": 424,
    "label": "hasArgument",
    "to": 385
  }, {
    "from": 425,
    "label": "hasArgument",
    "to": 328
  }, {
    "from": 425,
    "label": "hasArgument",
    "to": 331
  }, {
    "from": 425,
    "label": "hasArgument",
    "to": 358
  }, {
    "from": 425,
    "label": "hasArgument",
    "to": 360
  }, {
    "from": 425,
    "label": "hasArgument",
    "to": 387
  }, {
    "from": 425,
    "label": "hasArgument",
    "to": 389
  }, {
    "from": 425,
    "label": "hasArgument",
    "to": 391
  }, {
    "from": 425,
    "label": "hasArgument",
    "to": 394
  }, {
    "from": 425,
    "label": "hasArgument",
    "to": 396
  }, {
    "from": 425,
    "label": "hasArgument",
    "to": 398
  }, {
    "from": 425,
    "label": "hasArgument",
    "to": 403
  }, {
    "from": 425,
    "label": "hasArgument",
    "to": 410
  }, {
    "from": 426,
    "label": "hasArgument",
    "to": 331
  }, {
    "from": 426,
    "label": "hasArgument",
    "to": 360
  }, {
    "from": 426,
    "label": "hasArgument",
    "to": 389
  }, {
    "from": 426,
    "label": "hasArgument",
    "to": 403
  }, {
    "from": 426,
    "label": "hasArgument",
    "to": 405
  }, {
    "from": 426,
    "label": "hasArgument",
    "to": 407
  }, {
    "from": 427,
    "label": "hasArgument",
    "to": 328
  }, {
    "from": 427,
    "label": "hasArgument",
    "to": 358
  }, {
    "from": 427,
    "label": "hasArgument",
    "to": 387
  }, {
    "from": 427,
    "label": "hasArgument",
    "to": 410
  }, {
    "from": 427,
    "label": "hasArgument",
    "to": 412
  }, {
    "from": 427,
    "label": "hasArgument",
    "to": 415
  }, {
    "from": 427,
    "label": "hasArgument",
    "to": 418
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "core_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function report_level(desc)\r\n    testorder = testorder .. string.rep(' ', level * 2) .. desc .. '\\n'\r\n  end",
    "type": "function"
  }, {
    "id": 3,
    "text": "testorder = testorder .. string.rep(' ', level * 2) .. desc .. '\\n'",
    "type": "statement:assign"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "local function testUnsupported()\r\n    assert.is_nil(file)\r\n    assert.is_nil(finally)\r\n    assert.has_error(randomize, \"'randomize' not supported inside current context block\")\r\n\r\n    assert.has_error(describe, \"'describe' not supported inside current context block\")\r\n    assert.has_error(context, \"'context' not supported inside current context block\")\r\n\r\n    assert.has_error(insulate, \"'insulate' not supported inside current context block\")\r\n    assert.has_error(expose, \"'expose' not supported inside current context block\")\r\n\r\n    assert.has_error(pending, \"'pending' not supported inside current context block\")\r\n\r\n    assert.has_error(it, \"'it' not supported inside current context block\")\r\n    assert.has_error(spec, \"'spec' not supported inside current context block\")\r\n    assert.has_error(test, \"'test' not supported inside current context block\")\r\n\r\n    assert.has_error(setup, \"'setup' not supported inside current context block\")\r\n    assert.has_error(before_each, \"'before_each' not supported inside current context block\")\r\n    assert.has_error(after_each, \"'after_each' not supported inside current context block\")\r\n    assert.has_error(teardown, \"'teardown' not supported inside current context block\")\r\n\r\n    assert.has_error(lazy_setup, \"'lazy_setup' not supported inside current context block\")\r\n    assert.has_error(lazy_teardown, \"'lazy_teardown' not supported inside current context block\")\r\n    assert.has_error(strict_setup, \"'strict_setup' not supported inside current context block\")\r\n    assert.has_error(strict_teardown, \"'strict_teardown' not supported inside current context block\")\r\n  end",
    "type": "function"
  }, {
    "id": 6,
    "text": "assert.is_nil(file)",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "assert.is_nil(finally)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "assert.has_error(randomize, \"'randomize' not supported inside current context block\")",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "assert.has_error(describe, \"'describe' not supported inside current context block\")",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "assert.has_error(context, \"'context' not supported inside current context block\")",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "assert.has_error(insulate, \"'insulate' not supported inside current context block\")",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "assert.has_error(expose, \"'expose' not supported inside current context block\")",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "assert.has_error(pending, \"'pending' not supported inside current context block\")",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "assert.has_error(it, \"'it' not supported inside current context block\")",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "assert.has_error(spec, \"'spec' not supported inside current context block\")",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "assert.has_error(test, \"'test' not supported inside current context block\")",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "assert.has_error(setup, \"'setup' not supported inside current context block\")",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "assert.has_error(before_each, \"'before_each' not supported inside current context block\")",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "assert.has_error(after_each, \"'after_each' not supported inside current context block\")",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "assert.has_error(teardown, \"'teardown' not supported inside current context block\")",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "assert.has_error(lazy_setup, \"'lazy_setup' not supported inside current context block\")",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "assert.has_error(lazy_teardown, \"'lazy_teardown' not supported inside current context block\")",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "assert.has_error(strict_setup, \"'strict_setup' not supported inside current context block\")",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "assert.has_error(strict_teardown, \"'strict_teardown' not supported inside current context block\")",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function()\r\n    test_val = true\r\n  end",
    "type": "function"
  }, {
    "id": 27,
    "text": "test_val = true",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function()\r\n    assert(test_val)\r\n  end",
    "type": "function"
  }, {
    "id": 30,
    "text": "assert(test_val)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function()\r\n  local test_val = false\r\n\r\n  before_each(function()\r\n    test_val = true\r\n  end)\r\n\r\n  it('is called', function()\r\n    assert(test_val)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "local test_val = false",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "before_each(function()\r\n    test_val = true\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "it('is called', function()\r\n    assert(test_val)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function()\r\n    test_val = true\r\n  end",
    "type": "function"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 40,
    "text": "function()\r\n    assert(test_val)\r\n  end",
    "type": "function"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function()\r\n  local test_val = false\r\n\r\n  after_each(function()\r\n    test_val = true\r\n  end)\r\n\r\n  it('runs once to fire an after_each and then', function() end)\r\n  it('checks if after_each was called', function()\r\n    assert(test_val)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "after_each(function()\r\n    test_val = true\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "it('runs once to fire an after_each and then', function() end)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "it('checks if after_each was called', function()\r\n    assert(test_val)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function()\r\n    test_val = test_val + 1\r\n  end",
    "type": "function"
  }, {
    "id": 48,
    "text": "test_val = test_val + 1",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function()\r\n    test_val = test_val + 1\r\n  end",
    "type": "function"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 53,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 54,
    "text": "function() \r\n    assert(test_val == 5)\r\n  end",
    "type": "function"
  }, {
    "id": 55,
    "text": "assert(test_val == 5)",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function()\r\n  local test_val = 0\r\n\r\n  before_each(function()\r\n    test_val = test_val + 1\r\n  end)\r\n\r\n  after_each(function()\r\n    test_val = test_val + 1\r\n  end)\r\n\r\n  it('checks if both were called', function() end)\r\n  it('runs again just to be sure', function() end)\r\n\r\n  it('checks the value', function() \r\n    assert(test_val == 5)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "local test_val = 0",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "before_each(function()\r\n    test_val = test_val + 1\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "after_each(function()\r\n    test_val = test_val + 1\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "it('checks if both were called', function() end)",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "it('runs again just to be sure', function() end)",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "it('checks the value', function() \r\n    assert(test_val == 5)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "function()\r\n    test_val = test_val + 1\r\n  end",
    "type": "function"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "function()\r\n      assert(test_val == 1)\r\n    end",
    "type": "function"
  }, {
    "id": 68,
    "text": "assert(test_val == 1)",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function()\r\n      assert(test_val == 2)\r\n    end",
    "type": "function"
  }, {
    "id": 71,
    "text": "assert(test_val == 2)",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "function()\r\n    it('derps', function()\r\n      assert(test_val == 1)\r\n    end)\r\n\r\n    it('herps', function()\r\n      assert(test_val == 2)\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 74,
    "text": "it('derps', function()\r\n      assert(test_val == 1)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "it('herps', function()\r\n      assert(test_val == 2)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "function()\r\n  local test_val = 0\r\n\r\n  before_each(function()\r\n    test_val = test_val + 1\r\n  end)\r\n\r\n  describe('A block', function()\r\n    it('derps', function()\r\n      assert(test_val == 1)\r\n    end)\r\n\r\n    it('herps', function()\r\n      assert(test_val == 2)\r\n    end)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 78,
    "text": "describe('A block', function()\r\n    it('derps', function()\r\n      assert(test_val == 1)\r\n    end)\r\n\r\n    it('herps', function()\r\n      assert(test_val == 2)\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "function()\r\n    test_val = test_val + 1\r\n  end",
    "type": "function"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "function()\r\n    assert.are.equal(1, test_val)\r\n  end",
    "type": "function"
  }, {
    "id": 83,
    "text": "assert.are.equal(1, test_val)",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "function()\r\n      test_val = test_val + 1\r\n    end",
    "type": "function"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 88,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 89,
    "text": "function()\r\n      assert.equal(7, test_val)\r\n    end",
    "type": "function"
  }, {
    "id": 90,
    "text": "assert.equal(7, test_val)",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "function()\r\n    before_each(function()\r\n      test_val = test_val + 1\r\n    end)\r\n\r\n    it('derps', function() end) --add two: two before-eaches\r\n    it('herps', function() end)\r\n\r\n    it('checks the value', function()\r\n      assert.equal(7, test_val)\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 93,
    "text": "before_each(function()\r\n      test_val = test_val + 1\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "it('derps', function() end)",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "it('herps', function() end)",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "it('checks the value', function()\r\n      assert.equal(7, test_val)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 98,
    "text": "function()\r\n  local test_val = 0\r\n\r\n  before_each(function()\r\n    test_val = test_val + 1\r\n  end)\r\n\r\n  it('checks the value', function()\r\n    assert.are.equal(1, test_val)\r\n  end)\r\n\r\n  describe('A block', function()\r\n    before_each(function()\r\n      test_val = test_val + 1\r\n    end)\r\n\r\n    it('derps', function() end) --add two: two before-eaches\r\n    it('herps', function() end)\r\n\r\n    it('checks the value', function()\r\n      assert.equal(7, test_val)\r\n    end)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 99,
    "text": "it('checks the value', function()\r\n    assert.are.equal(1, test_val)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "describe('A block', function()\r\n    before_each(function()\r\n      test_val = test_val + 1\r\n    end)\r\n\r\n    it('derps', function() end) --add two: two before-eaches\r\n    it('herps', function() end)\r\n\r\n    it('checks the value', function()\r\n      assert.equal(7, test_val)\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 102,
    "text": "function() assert(false, 'this should fail') end",
    "type": "function"
  }, {
    "id": 103,
    "text": "assert(false, 'this should fail')",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "function()\r\n    assert.has.error(function() assert(false, 'this should fail') end)\r\n  end",
    "type": "function"
  }, {
    "id": 105,
    "text": "assert.has.error(function() assert(false, 'this should fail') end)",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 107,
    "text": "function()\r\n  it('explodes', function()\r\n    assert.has.error(function() assert(false, 'this should fail') end)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 108,
    "text": "it('explodes', function()\r\n    assert.has.error(function() assert(false, 'this should fail') end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 110,
    "text": "function()\r\n    assert(true)\r\n  end",
    "type": "function"
  }, {
    "id": 111,
    "text": "assert(true)",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 113,
    "text": "function()\r\n  it('runs', function()\r\n    assert(true)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 114,
    "text": "it('runs', function()\r\n    assert(true)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 116,
    "text": "function()\r\n      report_level('setup A')\r\n      level = level + 1\r\n    end",
    "type": "function"
  }, {
    "id": 117,
    "text": "report_level('setup A')",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "level = level + 1",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 120,
    "text": "function()\r\n      level = level - 1\r\n      report_level('teardown A')\r\n    end",
    "type": "function"
  }, {
    "id": 121,
    "text": "level = level - 1",
    "type": "statement:assign"
  }, {
    "id": 122,
    "text": "report_level('teardown A')",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 124,
    "text": "function()\r\n      report_level('before_each A')\r\n      level = level + 1\r\n    end",
    "type": "function"
  }, {
    "id": 125,
    "text": "report_level('before_each A')",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 127,
    "text": "function()\r\n      level = level - 1\r\n      report_level('after_each A')\r\n    end",
    "type": "function"
  }, {
    "id": 128,
    "text": "report_level('after_each A')",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 130,
    "text": "function()\r\n      report_level('test A one')\r\n    end",
    "type": "function"
  }, {
    "id": 131,
    "text": "report_level('test A one')",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 133,
    "text": "function()\r\n      report_level('test A two')\r\n    end",
    "type": "function"
  }, {
    "id": 134,
    "text": "report_level('test A two')",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 136,
    "text": "function()\r\n        report_level('setup B')\r\n        level = level + 1\r\n      end",
    "type": "function"
  }, {
    "id": 137,
    "text": "report_level('setup B')",
    "type": "statement:functioncall"
  }, {
    "id": 138,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 139,
    "text": "function()\r\n        level = level - 1\r\n        report_level('teardown B')\r\n      end",
    "type": "function"
  }, {
    "id": 140,
    "text": "report_level('teardown B')",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 142,
    "text": "function()\r\n        report_level('before_each B')\r\n        level = level + 1\r\n      end",
    "type": "function"
  }, {
    "id": 143,
    "text": "report_level('before_each B')",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 145,
    "text": "function()\r\n        level = level - 1\r\n        report_level('after_each B')\r\n      end",
    "type": "function"
  }, {
    "id": 146,
    "text": "report_level('after_each B')",
    "type": "statement:functioncall"
  }, {
    "id": 147,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 148,
    "text": "function()\r\n        report_level('test B one')\r\n      end",
    "type": "function"
  }, {
    "id": 149,
    "text": "report_level('test B one')",
    "type": "statement:functioncall"
  }, {
    "id": 150,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 151,
    "text": "function()\r\n        report_level('test B two')\r\n      end",
    "type": "function"
  }, {
    "id": 152,
    "text": "report_level('test B two')",
    "type": "statement:functioncall"
  }, {
    "id": 153,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 154,
    "text": "function()\r\n\r\n      setup(function()\r\n        report_level('setup B')\r\n        level = level + 1\r\n      end)\r\n\r\n      teardown(function()\r\n        level = level - 1\r\n        report_level('teardown B')\r\n      end)\r\n\r\n      before_each(function()\r\n        report_level('before_each B')\r\n        level = level + 1\r\n      end)\r\n\r\n      after_each(function()\r\n        level = level - 1\r\n        report_level('after_each B')\r\n      end)\r\n\r\n      it('tests B one', function()\r\n        report_level('test B one')\r\n      end)\r\n\r\n      it('tests B two', function()\r\n        report_level('test B two')\r\n      end)\r\n    end",
    "type": "function"
  }, {
    "id": 155,
    "text": "setup(function()\r\n        report_level('setup B')\r\n        level = level + 1\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 156,
    "text": "teardown(function()\r\n        level = level - 1\r\n        report_level('teardown B')\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 157,
    "text": "before_each(function()\r\n        report_level('before_each B')\r\n        level = level + 1\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 158,
    "text": "after_each(function()\r\n        level = level - 1\r\n        report_level('after_each B')\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 159,
    "text": "it('tests B one', function()\r\n        report_level('test B one')\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 160,
    "text": "it('tests B two', function()\r\n        report_level('test B two')\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 161,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 162,
    "text": "function()\r\n      report_level('test A three')\r\n    end",
    "type": "function"
  }, {
    "id": 163,
    "text": "report_level('test A three')",
    "type": "statement:functioncall"
  }, {
    "id": 164,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 165,
    "text": "function()\r\n\r\n    setup(function()\r\n      report_level('setup A')\r\n      level = level + 1\r\n    end)\r\n\r\n    teardown(function()\r\n      level = level - 1\r\n      report_level('teardown A')\r\n    end)\r\n\r\n    before_each(function()\r\n      report_level('before_each A')\r\n      level = level + 1\r\n    end)\r\n\r\n    after_each(function()\r\n      level = level - 1\r\n      report_level('after_each A')\r\n    end)\r\n\r\n    it('tests A one', function()\r\n      report_level('test A one')\r\n    end)\r\n\r\n    it('tests A two', function()\r\n      report_level('test A two')\r\n    end)\r\n\r\n    describe('describe level B', function()\r\n\r\n      setup(function()\r\n        report_level('setup B')\r\n        level = level + 1\r\n      end)\r\n\r\n      teardown(function()\r\n        level = level - 1\r\n        report_level('teardown B')\r\n      end)\r\n\r\n      before_each(function()\r\n        report_level('before_each B')\r\n        level = level + 1\r\n      end)\r\n\r\n      after_each(function()\r\n        level = level - 1\r\n        report_level('after_each B')\r\n      end)\r\n\r\n      it('tests B one', function()\r\n        report_level('test B one')\r\n      end)\r\n\r\n      it('tests B two', function()\r\n        report_level('test B two')\r\n      end)\r\n    end)\r\n\r\n    it('tests A three', function()\r\n      report_level('test A three')\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 166,
    "text": "setup(function()\r\n      report_level('setup A')\r\n      level = level + 1\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 167,
    "text": "teardown(function()\r\n      level = level - 1\r\n      report_level('teardown A')\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 168,
    "text": "before_each(function()\r\n      report_level('before_each A')\r\n      level = level + 1\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 169,
    "text": "after_each(function()\r\n      level = level - 1\r\n      report_level('after_each A')\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 170,
    "text": "it('tests A one', function()\r\n      report_level('test A one')\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 171,
    "text": "it('tests A two', function()\r\n      report_level('test A two')\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 172,
    "text": "describe('describe level B', function()\r\n\r\n      setup(function()\r\n        report_level('setup B')\r\n        level = level + 1\r\n      end)\r\n\r\n      teardown(function()\r\n        level = level - 1\r\n        report_level('teardown B')\r\n      end)\r\n\r\n      before_each(function()\r\n        report_level('before_each B')\r\n        level = level + 1\r\n      end)\r\n\r\n      after_each(function()\r\n        level = level - 1\r\n        report_level('after_each B')\r\n      end)\r\n\r\n      it('tests B one', function()\r\n        report_level('test B one')\r\n      end)\r\n\r\n      it('tests B two', function()\r\n        report_level('test B two')\r\n      end)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 173,
    "text": "it('tests A three', function()\r\n      report_level('test A three')\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 174,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 175,
    "text": "function()\r\n    local expected = [[setup A\r\n  before_each A\r\n    test A one\r\n  after_each A\r\n  before_each A\r\n    test A two\r\n  after_each A\r\n  setup B\r\n    before_each A\r\n      before_each B\r\n        test B one\r\n      after_each B\r\n    after_each A\r\n    before_each A\r\n      before_each B\r\n        test B two\r\n      after_each B\r\n    after_each A\r\n  teardown B\r\n  before_each A\r\n    test A three\r\n  after_each A\r\nteardown A\r\n]]\r\n      assert.is.equal(expected, testorder)\r\n    end",
    "type": "function"
  }, {
    "id": 176,
    "text": "local expected = [[setup A\r\n  before_each A\r\n    test A one\r\n  after_each A\r\n  before_each A\r\n    test A two\r\n  after_each A\r\n  setup B\r\n    before_each A\r\n      before_each B\r\n        test B one\r\n      after_each B\r\n    after_each A\r\n    before_each A\r\n      before_each B\r\n        test B two\r\n      after_each B\r\n    after_each A\r\n  teardown B\r\n  before_each A\r\n    test A three\r\n  after_each A\r\nteardown A\r\n]]",
    "type": "statement:localassign"
  }, {
    "id": 177,
    "text": "assert.is.equal(expected, testorder)",
    "type": "statement:functioncall"
  }, {
    "id": 178,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 179,
    "text": "function()\r\n    it('verifies order of execution', function()\r\n    local expected = [[setup A\r\n  before_each A\r\n    test A one\r\n  after_each A\r\n  before_each A\r\n    test A two\r\n  after_each A\r\n  setup B\r\n    before_each A\r\n      before_each B\r\n        test B one\r\n      after_each B\r\n    after_each A\r\n    before_each A\r\n      before_each B\r\n        test B two\r\n      after_each B\r\n    after_each A\r\n  teardown B\r\n  before_each A\r\n    test A three\r\n  after_each A\r\nteardown A\r\n]]\r\n      assert.is.equal(expected, testorder)\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 180,
    "text": "it('verifies order of execution', function()\r\n    local expected = [[setup A\r\n  before_each A\r\n    test A one\r\n  after_each A\r\n  before_each A\r\n    test A two\r\n  after_each A\r\n  setup B\r\n    before_each A\r\n      before_each B\r\n        test B one\r\n      after_each B\r\n    after_each A\r\n    before_each A\r\n      before_each B\r\n        test B two\r\n      after_each B\r\n    after_each A\r\n  teardown B\r\n  before_each A\r\n    test A three\r\n  after_each A\r\nteardown A\r\n]]\r\n      assert.is.equal(expected, testorder)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 181,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 182,
    "text": "function()\r\n  local testorder, level = '', 0\r\n\r\n  local function report_level(desc)\r\n    testorder = testorder .. string.rep(' ', level * 2) .. desc .. '\\n'\r\n  end\r\n\r\n  describe('describe, level A', function()\r\n\r\n    setup(function()\r\n      report_level('setup A')\r\n      level = level + 1\r\n    end)\r\n\r\n    teardown(function()\r\n      level = level - 1\r\n      report_level('teardown A')\r\n    end)\r\n\r\n    before_each(function()\r\n      report_level('before_each A')\r\n      level = level + 1\r\n    end)\r\n\r\n    after_each(function()\r\n      level = level - 1\r\n      report_level('after_each A')\r\n    end)\r\n\r\n    it('tests A one', function()\r\n      report_level('test A one')\r\n    end)\r\n\r\n    it('tests A two', function()\r\n      report_level('test A two')\r\n    end)\r\n\r\n    describe('describe level B', function()\r\n\r\n      setup(function()\r\n        report_level('setup B')\r\n        level = level + 1\r\n      end)\r\n\r\n      teardown(function()\r\n        level = level - 1\r\n        report_level('teardown B')\r\n      end)\r\n\r\n      before_each(function()\r\n        report_level('before_each B')\r\n        level = level + 1\r\n      end)\r\n\r\n      after_each(function()\r\n        level = level - 1\r\n        report_level('after_each B')\r\n      end)\r\n\r\n      it('tests B one', function()\r\n        report_level('test B one')\r\n      end)\r\n\r\n      it('tests B two', function()\r\n        report_level('test B two')\r\n      end)\r\n    end)\r\n\r\n    it('tests A three', function()\r\n      report_level('test A three')\r\n    end)\r\n  end)\r\n\r\n  describe('Test testorder', function()\r\n    it('verifies order of execution', function()\r\n    local expected = [[setup A\r\n  before_each A\r\n    test A one\r\n  after_each A\r\n  before_each A\r\n    test A two\r\n  after_each A\r\n  setup B\r\n    before_each A\r\n      before_each B\r\n        test B one\r\n      after_each B\r\n    after_each A\r\n    before_each A\r\n      before_each B\r\n        test B two\r\n      after_each B\r\n    after_each A\r\n  teardown B\r\n  before_each A\r\n    test A three\r\n  after_each A\r\nteardown A\r\n]]\r\n      assert.is.equal(expected, testorder)\r\n    end)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 183,
    "text": "local testorder, level = '', 0",
    "type": "statement:localassign"
  }, {
    "id": 184,
    "text": "describe('describe, level A', function()\r\n\r\n    setup(function()\r\n      report_level('setup A')\r\n      level = level + 1\r\n    end)\r\n\r\n    teardown(function()\r\n      level = level - 1\r\n      report_level('teardown A')\r\n    end)\r\n\r\n    before_each(function()\r\n      report_level('before_each A')\r\n      level = level + 1\r\n    end)\r\n\r\n    after_each(function()\r\n      level = level - 1\r\n      report_level('after_each A')\r\n    end)\r\n\r\n    it('tests A one', function()\r\n      report_level('test A one')\r\n    end)\r\n\r\n    it('tests A two', function()\r\n      report_level('test A two')\r\n    end)\r\n\r\n    describe('describe level B', function()\r\n\r\n      setup(function()\r\n        report_level('setup B')\r\n        level = level + 1\r\n      end)\r\n\r\n      teardown(function()\r\n        level = level - 1\r\n        report_level('teardown B')\r\n      end)\r\n\r\n      before_each(function()\r\n        report_level('before_each B')\r\n        level = level + 1\r\n      end)\r\n\r\n      after_each(function()\r\n        level = level - 1\r\n        report_level('after_each B')\r\n      end)\r\n\r\n      it('tests B one', function()\r\n        report_level('test B one')\r\n      end)\r\n\r\n      it('tests B two', function()\r\n        report_level('test B two')\r\n      end)\r\n    end)\r\n\r\n    it('tests A three', function()\r\n      report_level('test A three')\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "describe('Test testorder', function()\r\n    it('verifies order of execution', function()\r\n    local expected = [[setup A\r\n  before_each A\r\n    test A one\r\n  after_each A\r\n  before_each A\r\n    test A two\r\n  after_each A\r\n  setup B\r\n    before_each A\r\n      before_each B\r\n        test B one\r\n      after_each B\r\n    after_each A\r\n    before_each A\r\n      before_each B\r\n        test B two\r\n      after_each B\r\n    after_each A\r\n  teardown B\r\n  before_each A\r\n    test A three\r\n  after_each A\r\nteardown A\r\n]]\r\n      assert.is.equal(expected, testorder)\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 186,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 187,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 188,
    "text": "function()\r\n    finally(f)\r\n    assert.is_true(true)\r\n  end",
    "type": "function"
  }, {
    "id": 189,
    "text": "finally(f)",
    "type": "statement:functioncall"
  }, {
    "id": 190,
    "text": "assert.is_true(true)",
    "type": "statement:functioncall"
  }, {
    "id": 191,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 192,
    "text": "function()\r\n    assert.spy(f).was_called(1)\r\n  end",
    "type": "function"
  }, {
    "id": 193,
    "text": "assert.spy(f).was_called(1)",
    "type": "statement:functioncall"
  }, {
    "id": 194,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 195,
    "text": "function()\r\n  local f = spy.new(function() end)\r\n\r\n  it('write variable in finally', function()\r\n    finally(f)\r\n    assert.is_true(true)\r\n  end)\r\n\r\n  it('ensures finally was called', function()\r\n    assert.spy(f).was_called(1)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 196,
    "text": "local f = spy.new(function() end)",
    "type": "statement:localassign"
  }, {
    "id": 197,
    "text": "it('write variable in finally', function()\r\n    finally(f)\r\n    assert.is_true(true)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 198,
    "text": "it('ensures finally was called', function()\r\n    assert.spy(f).was_called(1)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 199,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 200,
    "text": "function()\r\n    globalsetup = 'globalsetup'\r\n  end",
    "type": "function"
  }, {
    "id": 201,
    "text": "globalsetup = 'globalsetup'",
    "type": "statement:assign"
  }, {
    "id": 202,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 203,
    "text": "function()\r\n    globalteardown = 'globalteardown'\r\n  end",
    "type": "function"
  }, {
    "id": 204,
    "text": "globalteardown = 'globalteardown'",
    "type": "statement:assign"
  }, {
    "id": 205,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 206,
    "text": "function()\r\n    globalbefore = 'globalbefore'\r\n  end",
    "type": "function"
  }, {
    "id": 207,
    "text": "globalbefore = 'globalbefore'",
    "type": "statement:assign"
  }, {
    "id": 208,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 209,
    "text": "function()\r\n    globalafter = 'globalafter'\r\n  end",
    "type": "function"
  }, {
    "id": 210,
    "text": "globalafter = 'globalafter'",
    "type": "statement:assign"
  }, {
    "id": 211,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 212,
    "text": "function()\r\n    assert.equal(nil, globalafter)\r\n    assert.equal(nil, globalteardown)\r\n    notglobal = 'notglobal'\r\n  end",
    "type": "function"
  }, {
    "id": 213,
    "text": "assert.equal(nil, globalafter)",
    "type": "statement:functioncall"
  }, {
    "id": 214,
    "text": "assert.equal(nil, globalteardown)",
    "type": "statement:functioncall"
  }, {
    "id": 215,
    "text": "notglobal = 'notglobal'",
    "type": "statement:assign"
  }, {
    "id": 216,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 217,
    "text": "function()\r\n    assert.equal('global', global)\r\n    assert.equal('globalsetup', globalsetup)\r\n    assert.equal('globalbefore', globalbefore)\r\n    assert.equal('globalafter', globalafter)\r\n    notglobal = 'notglobal'\r\n  end",
    "type": "function"
  }, {
    "id": 218,
    "text": "assert.equal('global', global)",
    "type": "statement:functioncall"
  }, {
    "id": 219,
    "text": "assert.equal('globalsetup', globalsetup)",
    "type": "statement:functioncall"
  }, {
    "id": 220,
    "text": "assert.equal('globalbefore', globalbefore)",
    "type": "statement:functioncall"
  }, {
    "id": 221,
    "text": "assert.equal('globalafter', globalafter)",
    "type": "statement:functioncall"
  }, {
    "id": 222,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 223,
    "text": "function()\r\n    assert.equal(nil, notglobal)\r\n  end",
    "type": "function"
  }, {
    "id": 224,
    "text": "assert.equal(nil, notglobal)",
    "type": "statement:functioncall"
  }, {
    "id": 225,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 226,
    "text": "function()\r\n      assert.equal('global', global)\r\n      assert.equal('globalsetup', globalsetup)\r\n      assert.equal('globalbefore', globalbefore)\r\n      assert.equal('globalafter', globalafter)\r\n    end",
    "type": "function"
  }, {
    "id": 227,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 228,
    "text": "function()\r\n    it('from child', function()\r\n      assert.equal('global', global)\r\n      assert.equal('globalsetup', globalsetup)\r\n      assert.equal('globalbefore', globalbefore)\r\n      assert.equal('globalafter', globalafter)\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 229,
    "text": "it('from child', function()\r\n      assert.equal('global', global)\r\n      assert.equal('globalsetup', globalsetup)\r\n      assert.equal('globalbefore', globalbefore)\r\n      assert.equal('globalafter', globalafter)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 230,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 231,
    "text": "function()\r\n      notglobal = 'notglobal'\r\n    end",
    "type": "function"
  }, {
    "id": 232,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 233,
    "text": "function()\r\n    it('has a global', function()\r\n      notglobal = 'notglobal'\r\n    end)\r\n\r\n    assert.are.equal(notglobal, nil)\r\n  end",
    "type": "function"
  }, {
    "id": 234,
    "text": "it('has a global', function()\r\n      notglobal = 'notglobal'\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 235,
    "text": "assert.are.equal(notglobal, nil)",
    "type": "statement:functioncall"
  }, {
    "id": 236,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 237,
    "text": "function()\r\n  global = 'global'\r\n\r\n  setup(function()\r\n    globalsetup = 'globalsetup'\r\n  end)\r\n\r\n  teardown(function()\r\n    globalteardown = 'globalteardown'\r\n  end)\r\n\r\n  before_each(function()\r\n    globalbefore = 'globalbefore'\r\n  end)\r\n\r\n  after_each(function()\r\n    globalafter = 'globalafter'\r\n  end)\r\n\r\n  it('cannot access globals which have not been created yet', function()\r\n    assert.equal(nil, globalafter)\r\n    assert.equal(nil, globalteardown)\r\n    notglobal = 'notglobal'\r\n  end)\r\n\r\n  it('can access globals', function()\r\n    assert.equal('global', global)\r\n    assert.equal('globalsetup', globalsetup)\r\n    assert.equal('globalbefore', globalbefore)\r\n    assert.equal('globalafter', globalafter)\r\n    notglobal = 'notglobal'\r\n  end)\r\n\r\n  it('cannot access globals set in siblings', function()\r\n    assert.equal(nil, notglobal)\r\n  end)\r\n\r\n  describe('can access parent globals', function()\r\n    it('from child', function()\r\n      assert.equal('global', global)\r\n      assert.equal('globalsetup', globalsetup)\r\n      assert.equal('globalbefore', globalbefore)\r\n      assert.equal('globalafter', globalafter)\r\n    end)\r\n  end)\r\n\r\n  describe('cannot access globals set in children', function()\r\n    it('has a global', function()\r\n      notglobal = 'notglobal'\r\n    end)\r\n\r\n    assert.are.equal(notglobal, nil)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 238,
    "text": "global = 'global'",
    "type": "statement:assign"
  }, {
    "id": 239,
    "text": "setup(function()\r\n    globalsetup = 'globalsetup'\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 240,
    "text": "teardown(function()\r\n    globalteardown = 'globalteardown'\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 241,
    "text": "before_each(function()\r\n    globalbefore = 'globalbefore'\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 242,
    "text": "after_each(function()\r\n    globalafter = 'globalafter'\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 243,
    "text": "it('cannot access globals which have not been created yet', function()\r\n    assert.equal(nil, globalafter)\r\n    assert.equal(nil, globalteardown)\r\n    notglobal = 'notglobal'\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 244,
    "text": "it('can access globals', function()\r\n    assert.equal('global', global)\r\n    assert.equal('globalsetup', globalsetup)\r\n    assert.equal('globalbefore', globalbefore)\r\n    assert.equal('globalafter', globalafter)\r\n    notglobal = 'notglobal'\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 245,
    "text": "it('cannot access globals set in siblings', function()\r\n    assert.equal(nil, notglobal)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 246,
    "text": "describe('can access parent globals', function()\r\n    it('from child', function()\r\n      assert.equal('global', global)\r\n      assert.equal('globalsetup', globalsetup)\r\n      assert.equal('globalbefore', globalbefore)\r\n      assert.equal('globalafter', globalafter)\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 247,
    "text": "describe('cannot access globals set in children', function()\r\n    it('has a global', function()\r\n      notglobal = 'notglobal'\r\n    end)\r\n\r\n    assert.are.equal(notglobal, nil)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 248,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 249,
    "text": "function()\r\n    assert.is_nil(global)\r\n    assert.is_nil(globalsetup)\r\n    assert.is_nil(globalbefore)\r\n    assert.is_nil(globalafter)\r\n    assert.is_nil(globalteardown)\r\n  end",
    "type": "function"
  }, {
    "id": 250,
    "text": "assert.is_nil(global)",
    "type": "statement:functioncall"
  }, {
    "id": 251,
    "text": "assert.is_nil(globalsetup)",
    "type": "statement:functioncall"
  }, {
    "id": 252,
    "text": "assert.is_nil(globalbefore)",
    "type": "statement:functioncall"
  }, {
    "id": 253,
    "text": "assert.is_nil(globalafter)",
    "type": "statement:functioncall"
  }, {
    "id": 254,
    "text": "assert.is_nil(globalteardown)",
    "type": "statement:functioncall"
  }, {
    "id": 255,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 256,
    "text": "function()\r\n  it('globals in previous describe are not available', function()\r\n    assert.is_nil(global)\r\n    assert.is_nil(globalsetup)\r\n    assert.is_nil(globalbefore)\r\n    assert.is_nil(globalafter)\r\n    assert.is_nil(globalteardown)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 257,
    "text": "it('globals in previous describe are not available', function()\r\n    assert.is_nil(global)\r\n    assert.is_nil(globalsetup)\r\n    assert.is_nil(globalbefore)\r\n    assert.is_nil(globalafter)\r\n    assert.is_nil(globalteardown)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 258,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 259,
    "text": "function()\r\n      assert(true)\r\n   end",
    "type": "function"
  }, {
    "id": 260,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 261,
    "text": "function()\r\n   it 'works' (function()\r\n      assert(true)\r\n   end)\r\nend",
    "type": "function"
  }, {
    "id": 262,
    "text": "it 'works' (function()\r\n      assert(true)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 263,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 264,
    "text": "function()\r\n      test_val = test_val + 1\r\n    end",
    "type": "function"
  }, {
    "id": 265,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 266,
    "text": "function()\r\n      test_val = test_val + 1\r\n    end",
    "type": "function"
  }, {
    "id": 267,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 268,
    "text": "function()\r\n      test_val = test_val + 1\r\n    end",
    "type": "function"
  }, {
    "id": 269,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 270,
    "text": "function()\r\n      test_val = test_val + 1\r\n    end",
    "type": "function"
  }, {
    "id": 271,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 272,
    "text": "function()\r\n      test_val = test_val + 1\r\n    end",
    "type": "function"
  }, {
    "id": 273,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 274,
    "text": "function()\r\n      test_val = test_val + 1\r\n    end",
    "type": "function"
  }, {
    "id": 275,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 276,
    "text": "function()\r\n    setup(function()\r\n      test_val = test_val + 1\r\n    end)\r\n\r\n    before_each(function()\r\n      test_val = test_val + 1\r\n    end)\r\n\r\n    after_each(function()\r\n      test_val = test_val + 1\r\n    end)\r\n\r\n    teardown(function()\r\n      test_val = test_val + 1\r\n    end)\r\n\r\n    spec('runs spec alias', function()\r\n      test_val = test_val + 1\r\n    end)\r\n\r\n    test('runs test alias', function()\r\n      test_val = test_val + 1\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 277,
    "text": "setup(function()\r\n      test_val = test_val + 1\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 278,
    "text": "after_each(function()\r\n      test_val = test_val + 1\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 279,
    "text": "teardown(function()\r\n      test_val = test_val + 1\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 280,
    "text": "spec('runs spec alias', function()\r\n      test_val = test_val + 1\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 281,
    "text": "test('runs test alias', function()\r\n      test_val = test_val + 1\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 282,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 283,
    "text": "function()\r\n    assert.is_equal(8, test_val)\r\n  end",
    "type": "function"
  }, {
    "id": 284,
    "text": "assert.is_equal(8, test_val)",
    "type": "statement:functioncall"
  }, {
    "id": 285,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 286,
    "text": "function()\r\n  local test_val = 0\r\n\r\n  context('runs context alias', function()\r\n    setup(function()\r\n      test_val = test_val + 1\r\n    end)\r\n\r\n    before_each(function()\r\n      test_val = test_val + 1\r\n    end)\r\n\r\n    after_each(function()\r\n      test_val = test_val + 1\r\n    end)\r\n\r\n    teardown(function()\r\n      test_val = test_val + 1\r\n    end)\r\n\r\n    spec('runs spec alias', function()\r\n      test_val = test_val + 1\r\n    end)\r\n\r\n    test('runs test alias', function()\r\n      test_val = test_val + 1\r\n    end)\r\n  end)\r\n\r\n  it('checks aliases were executed', function()\r\n    assert.is_equal(8, test_val)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 287,
    "text": "context('runs context alias', function()\r\n    setup(function()\r\n      test_val = test_val + 1\r\n    end)\r\n\r\n    before_each(function()\r\n      test_val = test_val + 1\r\n    end)\r\n\r\n    after_each(function()\r\n      test_val = test_val + 1\r\n    end)\r\n\r\n    teardown(function()\r\n      test_val = test_val + 1\r\n    end)\r\n\r\n    spec('runs spec alias', function()\r\n      test_val = test_val + 1\r\n    end)\r\n\r\n    test('runs test alias', function()\r\n      test_val = test_val + 1\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 288,
    "text": "it('checks aliases were executed', function()\r\n    assert.is_equal(8, test_val)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 289,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 290,
    "text": "function()\r\n    assert.is_nil(file)\r\n  end",
    "type": "function"
  }, {
    "id": 291,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 292,
    "text": "function()\r\n    assert.has_error(describe, \"'describe' not supported inside current context block\")\r\n    assert.has_error(context, \"'context' not supported inside current context block\")\r\n  end",
    "type": "function"
  }, {
    "id": 293,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 294,
    "text": "function()\r\n    assert.has_error(insulate, \"'insulate' not supported inside current context block\")\r\n    assert.has_error(expose, \"'expose' not supported inside current context block\")\r\n  end",
    "type": "function"
  }, {
    "id": 295,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 296,
    "text": "function()\r\n    assert.has_error(it, \"'it' not supported inside current context block\")\r\n    assert.has_error(spec, \"'spec' not supported inside current context block\")\r\n    assert.has_error(test, \"'test' not supported inside current context block\")\r\n  end",
    "type": "function"
  }, {
    "id": 297,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 298,
    "text": "function()\r\n    assert.has_error(setup, \"'setup' not supported inside current context block\")\r\n    assert.has_error(before_each, \"'before_each' not supported inside current context block\")\r\n    assert.has_error(after_each, \"'after_each' not supported inside current context block\")\r\n    assert.has_error(teardown, \"'teardown' not supported inside current context block\")\r\n  end",
    "type": "function"
  }, {
    "id": 299,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 300,
    "text": "function()\r\n    assert.has_error(lazy_setup, \"'lazy_setup' not supported inside current context block\")\r\n    assert.has_error(lazy_teardown, \"'lazy_teardown' not supported inside current context block\")\r\n    assert.has_error(strict_setup, \"'strict_setup' not supported inside current context block\")\r\n    assert.has_error(strict_teardown, \"'strict_teardown' not supported inside current context block\")\r\n  end",
    "type": "function"
  }, {
    "id": 301,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 302,
    "text": "function()\r\n    assert.has_error(randomize, \"'randomize' not supported inside current context block\")\r\n  end",
    "type": "function"
  }, {
    "id": 303,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 304,
    "text": "function()\r\n      assert.has_error(pending, \"'pending' not supported inside current context block\")\r\n    end",
    "type": "function"
  }, {
    "id": 305,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 306,
    "text": "function()\r\n    finally(function()\r\n      assert.has_error(pending, \"'pending' not supported inside current context block\")\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 307,
    "text": "finally(function()\r\n      assert.has_error(pending, \"'pending' not supported inside current context block\")\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 308,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 309,
    "text": "function()\r\n  it('it block does not have file executor', function()\r\n    assert.is_nil(file)\r\n  end)\r\n\r\n  it('it block throws error on describe/context', function()\r\n    assert.has_error(describe, \"'describe' not supported inside current context block\")\r\n    assert.has_error(context, \"'context' not supported inside current context block\")\r\n  end)\r\n\r\n  it('it block throws error on insulate/expose', function()\r\n    assert.has_error(insulate, \"'insulate' not supported inside current context block\")\r\n    assert.has_error(expose, \"'expose' not supported inside current context block\")\r\n  end)\r\n\r\n  it('it block throws error on it/spec/test', function()\r\n    assert.has_error(it, \"'it' not supported inside current context block\")\r\n    assert.has_error(spec, \"'spec' not supported inside current context block\")\r\n    assert.has_error(test, \"'test' not supported inside current context block\")\r\n  end)\r\n\r\n  it('it block throws error on setup/before_each/after_each/teardown', function()\r\n    assert.has_error(setup, \"'setup' not supported inside current context block\")\r\n    assert.has_error(before_each, \"'before_each' not supported inside current context block\")\r\n    assert.has_error(after_each, \"'after_each' not supported inside current context block\")\r\n    assert.has_error(teardown, \"'teardown' not supported inside current context block\")\r\n  end)\r\n\r\n  it('it block throws error on lazy/strict setup/teardown', function()\r\n    assert.has_error(lazy_setup, \"'lazy_setup' not supported inside current context block\")\r\n    assert.has_error(lazy_teardown, \"'lazy_teardown' not supported inside current context block\")\r\n    assert.has_error(strict_setup, \"'strict_setup' not supported inside current context block\")\r\n    assert.has_error(strict_teardown, \"'strict_teardown' not supported inside current context block\")\r\n  end)\r\n\r\n  it('it block throws error on randomize', function()\r\n    assert.has_error(randomize, \"'randomize' not supported inside current context block\")\r\n  end)\r\n\r\n  it('finaly block throws error on pending', function()\r\n    finally(function()\r\n      assert.has_error(pending, \"'pending' not supported inside current context block\")\r\n    end)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 310,
    "text": "it('it block does not have file executor', function()\r\n    assert.is_nil(file)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 311,
    "text": "it('it block throws error on describe/context', function()\r\n    assert.has_error(describe, \"'describe' not supported inside current context block\")\r\n    assert.has_error(context, \"'context' not supported inside current context block\")\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 312,
    "text": "it('it block throws error on insulate/expose', function()\r\n    assert.has_error(insulate, \"'insulate' not supported inside current context block\")\r\n    assert.has_error(expose, \"'expose' not supported inside current context block\")\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 313,
    "text": "it('it block throws error on it/spec/test', function()\r\n    assert.has_error(it, \"'it' not supported inside current context block\")\r\n    assert.has_error(spec, \"'spec' not supported inside current context block\")\r\n    assert.has_error(test, \"'test' not supported inside current context block\")\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 314,
    "text": "it('it block throws error on setup/before_each/after_each/teardown', function()\r\n    assert.has_error(setup, \"'setup' not supported inside current context block\")\r\n    assert.has_error(before_each, \"'before_each' not supported inside current context block\")\r\n    assert.has_error(after_each, \"'after_each' not supported inside current context block\")\r\n    assert.has_error(teardown, \"'teardown' not supported inside current context block\")\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 315,
    "text": "it('it block throws error on lazy/strict setup/teardown', function()\r\n    assert.has_error(lazy_setup, \"'lazy_setup' not supported inside current context block\")\r\n    assert.has_error(lazy_teardown, \"'lazy_teardown' not supported inside current context block\")\r\n    assert.has_error(strict_setup, \"'strict_setup' not supported inside current context block\")\r\n    assert.has_error(strict_teardown, \"'strict_teardown' not supported inside current context block\")\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 316,
    "text": "it('it block throws error on randomize', function()\r\n    assert.has_error(randomize, \"'randomize' not supported inside current context block\")\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 317,
    "text": "it('finaly block throws error on pending', function()\r\n    finally(function()\r\n      assert.has_error(pending, \"'pending' not supported inside current context block\")\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 318,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 319,
    "text": "function()\r\n  end",
    "type": "function"
  }, {
    "id": 320,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 321,
    "text": "function()\r\n  local function testUnsupported()\r\n    assert.is_nil(file)\r\n    assert.is_nil(finally)\r\n    assert.has_error(randomize, \"'randomize' not supported inside current context block\")\r\n\r\n    assert.has_error(describe, \"'describe' not supported inside current context block\")\r\n    assert.has_error(context, \"'context' not supported inside current context block\")\r\n\r\n    assert.has_error(insulate, \"'insulate' not supported inside current context block\")\r\n    assert.has_error(expose, \"'expose' not supported inside current context block\")\r\n\r\n    assert.has_error(pending, \"'pending' not supported inside current context block\")\r\n\r\n    assert.has_error(it, \"'it' not supported inside current context block\")\r\n    assert.has_error(spec, \"'spec' not supported inside current context block\")\r\n    assert.has_error(test, \"'test' not supported inside current context block\")\r\n\r\n    assert.has_error(setup, \"'setup' not supported inside current context block\")\r\n    assert.has_error(before_each, \"'before_each' not supported inside current context block\")\r\n    assert.has_error(after_each, \"'after_each' not supported inside current context block\")\r\n    assert.has_error(teardown, \"'teardown' not supported inside current context block\")\r\n\r\n    assert.has_error(lazy_setup, \"'lazy_setup' not supported inside current context block\")\r\n    assert.has_error(lazy_teardown, \"'lazy_teardown' not supported inside current context block\")\r\n    assert.has_error(strict_setup, \"'strict_setup' not supported inside current context block\")\r\n    assert.has_error(strict_teardown, \"'strict_teardown' not supported inside current context block\")\r\n  end\r\n\r\n  setup(testUnsupported)\r\n  teardown(testUnsupported)\r\n  before_each(testUnsupported)\r\n  after_each(testUnsupported)\r\n\r\n  it('tests nothing, all tests performed by support functions', function()\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 322,
    "text": "setup(testUnsupported)",
    "type": "statement:functioncall"
  }, {
    "id": 323,
    "text": "teardown(testUnsupported)",
    "type": "statement:functioncall"
  }, {
    "id": 324,
    "text": "before_each(testUnsupported)",
    "type": "statement:functioncall"
  }, {
    "id": 325,
    "text": "after_each(testUnsupported)",
    "type": "statement:functioncall"
  }, {
    "id": 326,
    "text": "it('tests nothing, all tests performed by support functions', function()\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 327,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 328,
    "text": "function()\r\n      setup_count = setup_count + 1\r\n    end",
    "type": "function"
  }, {
    "id": 329,
    "text": "setup_count = setup_count + 1",
    "type": "statement:assign"
  }, {
    "id": 330,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 331,
    "text": "function()\r\n      teardown_count = teardown_count + 1\r\n    end",
    "type": "function"
  }, {
    "id": 332,
    "text": "teardown_count = teardown_count + 1",
    "type": "statement:assign"
  }, {
    "id": 333,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 334,
    "text": "function()\r\n    strict_setup(function()\r\n      setup_count = setup_count + 1\r\n    end)\r\n\r\n    strict_teardown(function()\r\n      teardown_count = teardown_count + 1\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 335,
    "text": "strict_setup(function()\r\n      setup_count = setup_count + 1\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 336,
    "text": "strict_teardown(function()\r\n      teardown_count = teardown_count + 1\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 337,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 338,
    "text": "function()\r\n    assert.is_equal(1, setup_count)\r\n    assert.is_equal(1, teardown_count)\r\n  end",
    "type": "function"
  }, {
    "id": 339,
    "text": "assert.is_equal(1, setup_count)",
    "type": "statement:functioncall"
  }, {
    "id": 340,
    "text": "assert.is_equal(1, teardown_count)",
    "type": "statement:functioncall"
  }, {
    "id": 341,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 342,
    "text": "function()\r\n  local setup_count = 0\r\n  local teardown_count = 0\r\n\r\n  describe('in describe with no tests', function()\r\n    strict_setup(function()\r\n      setup_count = setup_count + 1\r\n    end)\r\n\r\n    strict_teardown(function()\r\n      teardown_count = teardown_count + 1\r\n    end)\r\n  end)\r\n\r\n  it('executes setup/teardown in previous block with no tests', function()\r\n    assert.is_equal(1, setup_count)\r\n    assert.is_equal(1, teardown_count)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 343,
    "text": "local setup_count = 0",
    "type": "statement:localassign"
  }, {
    "id": 344,
    "text": "local teardown_count = 0",
    "type": "statement:localassign"
  }, {
    "id": 345,
    "text": "describe('in describe with no tests', function()\r\n    strict_setup(function()\r\n      setup_count = setup_count + 1\r\n    end)\r\n\r\n    strict_teardown(function()\r\n      teardown_count = teardown_count + 1\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 346,
    "text": "it('executes setup/teardown in previous block with no tests', function()\r\n    assert.is_equal(1, setup_count)\r\n    assert.is_equal(1, teardown_count)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 347,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 348,
    "text": "function()\r\n    assert(false, 'setup should not execute since no tests')\r\n  end",
    "type": "function"
  }, {
    "id": 349,
    "text": "assert(false, 'setup should not execute since no tests')",
    "type": "statement:functioncall"
  }, {
    "id": 350,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 351,
    "text": "function()\r\n    assert(false, 'teardown should not execute since no tests')\r\n  end",
    "type": "function"
  }, {
    "id": 352,
    "text": "assert(false, 'teardown should not execute since no tests')",
    "type": "statement:functioncall"
  }, {
    "id": 353,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 354,
    "text": "function()\r\n  lazy_setup(function()\r\n    assert(false, 'setup should not execute since no tests')\r\n  end)\r\n\r\n  lazy_teardown(function()\r\n    assert(false, 'teardown should not execute since no tests')\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 355,
    "text": "lazy_setup(function()\r\n    assert(false, 'setup should not execute since no tests')\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 356,
    "text": "lazy_teardown(function()\r\n    assert(false, 'teardown should not execute since no tests')\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 357,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 358,
    "text": "function()\r\n      setup_count = setup_count + 1\r\n    end",
    "type": "function"
  }, {
    "id": 359,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 360,
    "text": "function()\r\n      teardown_count = teardown_count + 1\r\n    end",
    "type": "function"
  }, {
    "id": 361,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 362,
    "text": "function()\r\n        setup_count = setup_count + 1\r\n      end",
    "type": "function"
  }, {
    "id": 363,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 364,
    "text": "function()\r\n        teardown_count = teardown_count + 1\r\n      end",
    "type": "function"
  }, {
    "id": 365,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 366,
    "text": "function()\r\n      lazy_setup(function()\r\n        setup_count = setup_count + 1\r\n      end)\r\n\r\n      lazy_teardown(function()\r\n        teardown_count = teardown_count + 1\r\n      end)\r\n    end",
    "type": "function"
  }, {
    "id": 367,
    "text": "lazy_setup(function()\r\n        setup_count = setup_count + 1\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 368,
    "text": "lazy_teardown(function()\r\n        teardown_count = teardown_count + 1\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 369,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 370,
    "text": "function()\r\n    lazy_setup(function()\r\n      setup_count = setup_count + 1\r\n    end)\r\n\r\n    lazy_teardown(function()\r\n      teardown_count = teardown_count + 1\r\n    end)\r\n\r\n    describe('with inner nested describe with no tests', function()\r\n      lazy_setup(function()\r\n        setup_count = setup_count + 1\r\n      end)\r\n\r\n      lazy_teardown(function()\r\n        teardown_count = teardown_count + 1\r\n      end)\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 371,
    "text": "lazy_setup(function()\r\n      setup_count = setup_count + 1\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 372,
    "text": "lazy_teardown(function()\r\n      teardown_count = teardown_count + 1\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 373,
    "text": "describe('with inner nested describe with no tests', function()\r\n      lazy_setup(function()\r\n        setup_count = setup_count + 1\r\n      end)\r\n\r\n      lazy_teardown(function()\r\n        teardown_count = teardown_count + 1\r\n      end)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 374,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 375,
    "text": "function()\r\n    assert.is_equal(0, setup_count)\r\n    assert.is_equal(0, teardown_count)\r\n  end",
    "type": "function"
  }, {
    "id": 376,
    "text": "assert.is_equal(0, setup_count)",
    "type": "statement:functioncall"
  }, {
    "id": 377,
    "text": "assert.is_equal(0, teardown_count)",
    "type": "statement:functioncall"
  }, {
    "id": 378,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 379,
    "text": "function()\r\n  local setup_count = 0\r\n  local teardown_count = 0\r\n\r\n  describe('with nested describe with no tests', function()\r\n    lazy_setup(function()\r\n      setup_count = setup_count + 1\r\n    end)\r\n\r\n    lazy_teardown(function()\r\n      teardown_count = teardown_count + 1\r\n    end)\r\n\r\n    describe('with inner nested describe with no tests', function()\r\n      lazy_setup(function()\r\n        setup_count = setup_count + 1\r\n      end)\r\n\r\n      lazy_teardown(function()\r\n        teardown_count = teardown_count + 1\r\n      end)\r\n    end)\r\n  end)\r\n\r\n  it('does not run setup/teardown', function()\r\n    assert.is_equal(0, setup_count)\r\n    assert.is_equal(0, teardown_count)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 380,
    "text": "describe('with nested describe with no tests', function()\r\n    lazy_setup(function()\r\n      setup_count = setup_count + 1\r\n    end)\r\n\r\n    lazy_teardown(function()\r\n      teardown_count = teardown_count + 1\r\n    end)\r\n\r\n    describe('with inner nested describe with no tests', function()\r\n      lazy_setup(function()\r\n        setup_count = setup_count + 1\r\n      end)\r\n\r\n      lazy_teardown(function()\r\n        teardown_count = teardown_count + 1\r\n      end)\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 381,
    "text": "it('does not run setup/teardown', function()\r\n    assert.is_equal(0, setup_count)\r\n    assert.is_equal(0, teardown_count)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 382,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 383,
    "text": "function()\r\n    setup_count = setup_count + 1\r\n  end",
    "type": "function"
  }, {
    "id": 384,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 385,
    "text": "function()\r\n    teardown_count = teardown_count + 1\r\n  end",
    "type": "function"
  }, {
    "id": 386,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 387,
    "text": "function()\r\n      setup_count = setup_count + 1\r\n    end",
    "type": "function"
  }, {
    "id": 388,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 389,
    "text": "function()\r\n      teardown_count = teardown_count + 1\r\n    end",
    "type": "function"
  }, {
    "id": 390,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 391,
    "text": "function()\r\n      assert.is_equal(2, setup_count)\r\n    end",
    "type": "function"
  }, {
    "id": 392,
    "text": "assert.is_equal(2, setup_count)",
    "type": "statement:functioncall"
  }, {
    "id": 393,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 394,
    "text": "function()\r\n      assert.is_equal(2, setup_count)\r\n    end",
    "type": "function"
  }, {
    "id": 395,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 396,
    "text": "function()\r\n      assert.is_equal(0, teardown_count)\r\n    end",
    "type": "function"
  }, {
    "id": 397,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 398,
    "text": "function()\r\n    lazy_setup(function()\r\n      setup_count = setup_count + 1\r\n    end)\r\n\r\n    lazy_teardown(function()\r\n      teardown_count = teardown_count + 1\r\n    end)\r\n\r\n    it('runs all setups', function()\r\n      assert.is_equal(2, setup_count)\r\n    end)\r\n\r\n    it('runs setups only once', function()\r\n      assert.is_equal(2, setup_count)\r\n    end)\r\n\r\n    it('runs teardown after all tests complete', function()\r\n      assert.is_equal(0, teardown_count)\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 399,
    "text": "it('runs all setups', function()\r\n      assert.is_equal(2, setup_count)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 400,
    "text": "it('runs setups only once', function()\r\n      assert.is_equal(2, setup_count)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 401,
    "text": "it('runs teardown after all tests complete', function()\r\n      assert.is_equal(0, teardown_count)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 402,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 403,
    "text": "function()\r\n      teardown_count = teardown_count + 1\r\n    end",
    "type": "function"
  }, {
    "id": 404,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 405,
    "text": "function()\r\n      assert.is_equal(1, teardown_count)\r\n    end",
    "type": "function"
  }, {
    "id": 406,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 407,
    "text": "function()\r\n    lazy_teardown(function()\r\n      teardown_count = teardown_count + 1\r\n    end)\r\n\r\n    it('verify teardown ran after previous describe completes', function()\r\n      assert.is_equal(1, teardown_count)\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 408,
    "text": "it('verify teardown ran after previous describe completes', function()\r\n      assert.is_equal(1, teardown_count)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 409,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 410,
    "text": "function()\r\n      setup_count = setup_count + 1\r\n    end",
    "type": "function"
  }, {
    "id": 411,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 412,
    "text": "function()\r\n      assert.is_equal(3, setup_count)\r\n    end",
    "type": "function"
  }, {
    "id": 413,
    "text": "assert.is_equal(3, setup_count)",
    "type": "statement:functioncall"
  }, {
    "id": 414,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 415,
    "text": "function()\r\n      assert.is_equal(2, teardown_count)\r\n    end",
    "type": "function"
  }, {
    "id": 416,
    "text": "assert.is_equal(2, teardown_count)",
    "type": "statement:functioncall"
  }, {
    "id": 417,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 418,
    "text": "function()\r\n    lazy_setup(function()\r\n      setup_count = setup_count + 1\r\n    end)\r\n\r\n    it('runs setup for new describe', function()\r\n      assert.is_equal(3, setup_count)\r\n    end)\r\n\r\n    it('verify teardown ran after previous describe completes', function()\r\n      assert.is_equal(2, teardown_count)\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 419,
    "text": "it('runs setup for new describe', function()\r\n      assert.is_equal(3, setup_count)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 420,
    "text": "it('verify teardown ran after previous describe completes', function()\r\n      assert.is_equal(2, teardown_count)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 421,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 422,
    "text": "function()\r\n  local setup_count = 0\r\n  local teardown_count = 0\r\n\r\n  lazy_setup(function()\r\n    setup_count = setup_count + 1\r\n  end)\r\n\r\n  lazy_teardown(function()\r\n    teardown_count = teardown_count + 1\r\n  end)\r\n\r\n  describe('nested describe with tests', function()\r\n    lazy_setup(function()\r\n      setup_count = setup_count + 1\r\n    end)\r\n\r\n    lazy_teardown(function()\r\n      teardown_count = teardown_count + 1\r\n    end)\r\n\r\n    it('runs all setups', function()\r\n      assert.is_equal(2, setup_count)\r\n    end)\r\n\r\n    it('runs setups only once', function()\r\n      assert.is_equal(2, setup_count)\r\n    end)\r\n\r\n    it('runs teardown after all tests complete', function()\r\n      assert.is_equal(0, teardown_count)\r\n    end)\r\n  end)\r\n\r\n  describe('second nested describe', function()\r\n    lazy_teardown(function()\r\n      teardown_count = teardown_count + 1\r\n    end)\r\n\r\n    it('verify teardown ran after previous describe completes', function()\r\n      assert.is_equal(1, teardown_count)\r\n    end)\r\n  end)\r\n\r\n  describe('another nested describe with tests', function()\r\n    lazy_setup(function()\r\n      setup_count = setup_count + 1\r\n    end)\r\n\r\n    it('runs setup for new describe', function()\r\n      assert.is_equal(3, setup_count)\r\n    end)\r\n\r\n    it('verify teardown ran after previous describe completes', function()\r\n      assert.is_equal(2, teardown_count)\r\n    end)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 423,
    "text": "lazy_setup(function()\r\n    setup_count = setup_count + 1\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 424,
    "text": "lazy_teardown(function()\r\n    teardown_count = teardown_count + 1\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 425,
    "text": "describe('nested describe with tests', function()\r\n    lazy_setup(function()\r\n      setup_count = setup_count + 1\r\n    end)\r\n\r\n    lazy_teardown(function()\r\n      teardown_count = teardown_count + 1\r\n    end)\r\n\r\n    it('runs all setups', function()\r\n      assert.is_equal(2, setup_count)\r\n    end)\r\n\r\n    it('runs setups only once', function()\r\n      assert.is_equal(2, setup_count)\r\n    end)\r\n\r\n    it('runs teardown after all tests complete', function()\r\n      assert.is_equal(0, teardown_count)\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 426,
    "text": "describe('second nested describe', function()\r\n    lazy_teardown(function()\r\n      teardown_count = teardown_count + 1\r\n    end)\r\n\r\n    it('verify teardown ran after previous describe completes', function()\r\n      assert.is_equal(1, teardown_count)\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 427,
    "text": "describe('another nested describe with tests', function()\r\n    lazy_setup(function()\r\n      setup_count = setup_count + 1\r\n    end)\r\n\r\n    it('runs setup for new describe', function()\r\n      assert.is_equal(3, setup_count)\r\n    end)\r\n\r\n    it('verify teardown ran after previous describe completes', function()\r\n      assert.is_equal(2, teardown_count)\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 428,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 429,
    "text": "",
    "type": "function container"
  }, {
    "id": 430,
    "text": "test",
    "type": "global function"
  }, {
    "id": 431,
    "text": "setup",
    "type": "global function"
  }, {
    "id": 432,
    "text": "has_error",
    "type": "global function"
  }, {
    "id": 433,
    "text": "context",
    "type": "global function"
  }, {
    "id": 434,
    "text": "it",
    "type": "global function"
  }, {
    "id": 435,
    "text": "before_each",
    "type": "global function"
  }, {
    "id": 436,
    "text": "is_true",
    "type": "global function"
  }, {
    "id": 437,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 438,
    "text": "finally",
    "type": "global function"
  }, {
    "id": 439,
    "text": "is_nil",
    "type": "global function"
  }, {
    "id": 440,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 441,
    "text": "spec",
    "type": "global function"
  }, {
    "id": 442,
    "text": "teardown",
    "type": "global function"
  }, {
    "id": 443,
    "text": "lazy_teardown",
    "type": "global function"
  }, {
    "id": 444,
    "text": "spy",
    "type": "global function"
  }, {
    "id": 445,
    "text": "assert.are.equal",
    "type": "global function"
  }, {
    "id": 446,
    "text": "assert.is.equal",
    "type": "global function"
  }, {
    "id": 447,
    "text": "new",
    "type": "global function"
  }, {
    "id": 448,
    "text": "equal",
    "type": "global function"
  }, {
    "id": 449,
    "text": "lazy_setup",
    "type": "global function"
  }, {
    "id": 450,
    "text": "strict_setup",
    "type": "global function"
  }, {
    "id": 451,
    "text": "assert.has.error",
    "type": "global function"
  }, {
    "id": 452,
    "text": "strict_teardown",
    "type": "global function"
  }, {
    "id": 453,
    "text": "type",
    "type": "global function"
  }, {
    "id": 454,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 455,
    "text": "after_each",
    "type": "global function"
  }, {
    "id": 456,
    "text": "is_equal",
    "type": "global function"
  }, {
    "id": 457,
    "text": "",
    "type": "variable container"
  }, {
    "id": 458,
    "text": "",
    "type": "require container"
  } ]
}