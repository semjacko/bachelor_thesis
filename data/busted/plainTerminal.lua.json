{
  "_filename": "plainTerminal.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/busted/busted/outputHandlers/plainTerminal.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 4,
    "label": "has",
    "to": 10
  }, {
    "from": 4,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 12,
    "label": "has",
    "to": 10
  }, {
    "from": 12,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 19,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 19,
    "label": "has",
    "to": 10
  }, {
    "from": 19,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 33
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 29,
    "label": "has",
    "to": 35
  }, {
    "from": 29,
    "label": "has",
    "to": 36
  }, {
    "from": 29,
    "label": "has",
    "to": 37
  }, {
    "from": 29,
    "label": "has",
    "to": 38
  }, {
    "from": 29,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 29,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 29,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 29,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 29,
    "label": "has",
    "to": 51
  }, {
    "from": 29,
    "label": "has",
    "to": 10
  }, {
    "from": 29,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 56,
    "label": "has",
    "to": 59
  }, {
    "from": 54,
    "label": "has",
    "to": 60
  }, {
    "from": 54,
    "label": "has",
    "to": 61
  }, {
    "from": 53,
    "label": "has",
    "to": 10
  }, {
    "from": 53,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 63,
    "label": "has",
    "to": 61
  }, {
    "from": 63,
    "label": "has",
    "to": 10
  }, {
    "from": 63,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 67,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 68
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 67,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 68
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 67,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 68
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 67,
    "label": "has",
    "to": 10
  }, {
    "from": 67,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 61
  }, {
    "from": 77,
    "label": "has",
    "to": 10
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 80,
    "label": "has",
    "to": 82
  }, {
    "from": 80,
    "label": "has",
    "to": 83
  }, {
    "from": 80,
    "label": "has",
    "to": 84
  }, {
    "from": 80,
    "label": "has",
    "to": 85
  }, {
    "from": 80,
    "label": "has",
    "to": 86
  }, {
    "from": 80,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 5
  }, {
    "from": 87,
    "label": "has",
    "to": 6
  }, {
    "from": 87,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 87,
    "label": "has",
    "to": 10
  }, {
    "from": 80,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 13
  }, {
    "from": 88,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 88,
    "label": "has",
    "to": 10
  }, {
    "from": 80,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 20
  }, {
    "from": 89,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 89,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 89,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 89,
    "label": "has",
    "to": 10
  }, {
    "from": 80,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 30
  }, {
    "from": 90,
    "label": "has",
    "to": 31
  }, {
    "from": 90,
    "label": "has",
    "to": 32
  }, {
    "from": 90,
    "label": "has",
    "to": 33
  }, {
    "from": 90,
    "label": "has",
    "to": 34
  }, {
    "from": 90,
    "label": "has",
    "to": 35
  }, {
    "from": 90,
    "label": "has",
    "to": 36
  }, {
    "from": 90,
    "label": "has",
    "to": 37
  }, {
    "from": 90,
    "label": "has",
    "to": 38
  }, {
    "from": 90,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 90,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 90,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 90,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 90,
    "label": "has",
    "to": 51
  }, {
    "from": 90,
    "label": "has",
    "to": 10
  }, {
    "from": 80,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 56,
    "label": "has",
    "to": 59
  }, {
    "from": 54,
    "label": "has",
    "to": 60
  }, {
    "from": 54,
    "label": "has",
    "to": 61
  }, {
    "from": 91,
    "label": "has",
    "to": 10
  }, {
    "from": 80,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 64
  }, {
    "from": 92,
    "label": "has",
    "to": 65
  }, {
    "from": 92,
    "label": "has",
    "to": 61
  }, {
    "from": 92,
    "label": "has",
    "to": 10
  }, {
    "from": 80,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 68
  }, {
    "from": 93,
    "label": "has",
    "to": 69
  }, {
    "from": 93,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 68
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 93,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 68
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 93,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 68
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 93,
    "label": "has",
    "to": 10
  }, {
    "from": 80,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 78
  }, {
    "from": 94,
    "label": "has",
    "to": 61
  }, {
    "from": 94,
    "label": "has",
    "to": 10
  }, {
    "from": 80,
    "label": "has",
    "to": 95
  }, {
    "from": 80,
    "label": "has",
    "to": 96
  }, {
    "from": 80,
    "label": "has",
    "to": 97
  }, {
    "from": 80,
    "label": "has",
    "to": 98
  }, {
    "from": 80,
    "label": "has",
    "to": 99
  }, {
    "from": 80,
    "label": "has",
    "to": 100
  }, {
    "from": 80,
    "label": "has",
    "to": 101
  }, {
    "from": 80,
    "label": "has",
    "to": 10
  }, {
    "from": 80,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "calls",
    "to": 12
  }, {
    "from": 103,
    "label": "calls",
    "to": 12
  }, {
    "from": 103,
    "label": "calls",
    "to": 107
  }, {
    "from": 103,
    "label": "calls",
    "to": 107
  }, {
    "from": 103,
    "label": "calls",
    "to": 107
  }, {
    "from": 103,
    "label": "calls",
    "to": 112
  }, {
    "from": 103,
    "label": "calls",
    "to": 112
  }, {
    "from": 103,
    "label": "calls",
    "to": 112
  }, {
    "from": 103,
    "label": "calls",
    "to": 109
  }, {
    "from": 103,
    "label": "calls",
    "to": 109
  }, {
    "from": 103,
    "label": "calls",
    "to": 109
  }, {
    "from": 103,
    "label": "calls",
    "to": 109
  }, {
    "from": 103,
    "label": "calls",
    "to": 109
  }, {
    "from": 103,
    "label": "calls",
    "to": 109
  }, {
    "from": 103,
    "label": "calls",
    "to": 109
  }, {
    "from": 103,
    "label": "calls",
    "to": 109
  }, {
    "from": 103,
    "label": "calls",
    "to": 4
  }, {
    "from": 103,
    "label": "calls",
    "to": 105
  }, {
    "from": 103,
    "label": "calls",
    "to": 108
  }, {
    "from": 103,
    "label": "calls",
    "to": 108
  }, {
    "from": 103,
    "label": "calls",
    "to": 108
  }, {
    "from": 103,
    "label": "calls",
    "to": 29
  }, {
    "from": 103,
    "label": "calls",
    "to": 110
  }, {
    "from": 103,
    "label": "calls",
    "to": 110
  }, {
    "from": 103,
    "label": "calls",
    "to": 110
  }, {
    "from": 103,
    "label": "calls",
    "to": 110
  }, {
    "from": 103,
    "label": "calls",
    "to": 110
  }, {
    "from": 103,
    "label": "calls",
    "to": 110
  }, {
    "from": 103,
    "label": "calls",
    "to": 110
  }, {
    "from": 103,
    "label": "calls",
    "to": 110
  }, {
    "from": 103,
    "label": "calls",
    "to": 110
  }, {
    "from": 103,
    "label": "calls",
    "to": 110
  }, {
    "from": 103,
    "label": "calls",
    "to": 110
  }, {
    "from": 103,
    "label": "calls",
    "to": 110
  }, {
    "from": 103,
    "label": "calls",
    "to": 110
  }, {
    "from": 103,
    "label": "calls",
    "to": 110
  }, {
    "from": 103,
    "label": "calls",
    "to": 110
  }, {
    "from": 103,
    "label": "calls",
    "to": 110
  }, {
    "from": 103,
    "label": "calls",
    "to": 19
  }, {
    "from": 103,
    "label": "calls",
    "to": 19
  }, {
    "from": 103,
    "label": "calls",
    "to": 111
  }, {
    "from": 103,
    "label": "calls",
    "to": 111
  }, {
    "from": 103,
    "label": "calls",
    "to": 113
  }, {
    "from": 103,
    "label": "calls",
    "to": 113
  }, {
    "from": 103,
    "label": "calls",
    "to": 113
  }, {
    "from": 103,
    "label": "calls",
    "to": 113
  }, {
    "from": 103,
    "label": "calls",
    "to": 104
  }, {
    "from": 103,
    "label": "calls",
    "to": 104
  }, {
    "from": 103,
    "label": "calls",
    "to": 106
  }, {
    "from": 103,
    "label": "calls",
    "to": 106
  }, {
    "from": 103,
    "label": "calls",
    "to": 106
  }, {
    "from": 103,
    "label": "calls",
    "to": 106
  }, {
    "from": 103,
    "label": "calls",
    "to": 106
  }, {
    "from": 103,
    "label": "calls",
    "to": 106
  }, {
    "from": 103,
    "label": "calls",
    "to": 106
  }, {
    "from": 2,
    "label": "contains",
    "to": 103
  }, {
    "from": 103,
    "label": "declares",
    "to": 4
  }, {
    "from": 103,
    "label": "declares",
    "to": 12
  }, {
    "from": 103,
    "label": "declares",
    "to": 19
  }, {
    "from": 103,
    "label": "declares",
    "to": 29
  }, {
    "from": 103,
    "label": "declares",
    "to": 53
  }, {
    "from": 103,
    "label": "declares",
    "to": 63
  }, {
    "from": 103,
    "label": "declares",
    "to": 67
  }, {
    "from": 103,
    "label": "declares",
    "to": 77
  }, {
    "from": 103,
    "label": "declares",
    "to": 80
  }, {
    "from": 2,
    "label": "contains",
    "to": 116
  }, {
    "from": 2,
    "label": "contains",
    "to": 117
  }, {
    "from": 117,
    "label": "initializes",
    "to": 118
  }, {
    "from": 118,
    "label": "requires",
    "to": 115
  }, {
    "from": 117,
    "label": "initializes",
    "to": 119
  }, {
    "from": 119,
    "label": "requires",
    "to": 114
  }, {
    "from": 117,
    "label": "initializes",
    "to": 120
  }, {
    "from": 120,
    "label": "requires",
    "to": 3
  }, {
    "from": 117,
    "label": "initializes",
    "to": 121
  }, {
    "from": 121,
    "label": "requires",
    "to": 1
  }, {
    "from": 2,
    "label": "provides",
    "to": 122
  }, {
    "from": 122,
    "label": "provides",
    "to": 123
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "base",
    "type": "module"
  }, {
    "id": 2,
    "text": "plainTerminal",
    "type": "module"
  }, {
    "id": 3,
    "text": "busted",
    "type": "module"
  }, {
    "id": 4,
    "text": "function(pending)\r\n    local name = pending.name\r\n\r\n    local string = s('output.pending') .. ' -> ' ..\r\n      pending.trace.short_src .. ' @ ' ..\r\n      pending.trace.currentline  ..\r\n      '\\n' .. name\r\n\r\n    if type(pending.message) == 'string' then\r\n      string = string .. '\\n' .. pending.message\r\n    elseif pending.message ~= nil then\r\n      string = string .. '\\n' .. pretty.write(pending.message)\r\n    end\r\n\r\n    return string\r\n  end",
    "type": "function"
  }, {
    "id": 5,
    "text": "local name = pending.name",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "local string = s('output.pending') .. ' -> ' ..\r\n      pending.trace.short_src .. ' @ ' ..\r\n      pending.trace.currentline  ..\r\n      '\\n' .. name",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "if type(pending.message) == 'string' then\r\n      string = string .. '\\n' .. pending.message\r\n    elseif pending.message ~= nil then\r\n      string = string .. '\\n' .. pretty.write(pending.message)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "string = string .. '\\n' .. pending.message",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "string = string .. '\\n' .. pretty.write(pending.message)",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function(failure)\r\n    local string = failure.randomseed and ('Random seed: ' .. failure.randomseed .. '\\n') or ''\r\n    if type(failure.message) == 'string' then\r\n      string = string .. failure.message\r\n    elseif failure.message == nil then\r\n      string = string .. 'Nil error'\r\n    else\r\n      string = string .. pretty.write(failure.message)\r\n    end\r\n\r\n    return string\r\n  end",
    "type": "function"
  }, {
    "id": 13,
    "text": "local string = failure.randomseed and ('Random seed: ' .. failure.randomseed .. '\\n') or ''",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "if type(failure.message) == 'string' then\r\n      string = string .. failure.message\r\n    elseif failure.message == nil then\r\n      string = string .. 'Nil error'\r\n    else\r\n      string = string .. pretty.write(failure.message)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "string = string .. failure.message",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "string = string .. 'Nil error'",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "string = string .. pretty.write(failure.message)",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function(failure, isError)\r\n    local string = s('output.failure') .. ' -> '\r\n    if isError then\r\n      string = s('output.error') .. ' -> '\r\n    end\r\n\r\n    if not failure.element.trace or not failure.element.trace.short_src then\r\n      string = string ..\r\n        failureMessage(failure) .. '\\n' ..\r\n        failure.name\r\n    else\r\n      string = string ..\r\n        failure.element.trace.short_src .. ' @ ' ..\r\n        failure.element.trace.currentline .. '\\n' ..\r\n        failure.name .. '\\n' ..\r\n        failureMessage(failure)\r\n    end\r\n\r\n    if options.verbose and failure.trace and failure.trace.traceback then\r\n      string = string .. '\\n' .. failure.trace.traceback\r\n    end\r\n\r\n    return string\r\n  end",
    "type": "function"
  }, {
    "id": 20,
    "text": "local string = s('output.failure') .. ' -> '",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "if isError then\r\n      string = s('output.error') .. ' -> '\r\n    end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "string = s('output.error') .. ' -> '",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "if not failure.element.trace or not failure.element.trace.short_src then\r\n      string = string ..\r\n        failureMessage(failure) .. '\\n' ..\r\n        failure.name\r\n    else\r\n      string = string ..\r\n        failure.element.trace.short_src .. ' @ ' ..\r\n        failure.element.trace.currentline .. '\\n' ..\r\n        failure.name .. '\\n' ..\r\n        failureMessage(failure)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "string = string ..\r\n        failureMessage(failure) .. '\\n' ..\r\n        failure.name",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "string = string ..\r\n        failure.element.trace.short_src .. ' @ ' ..\r\n        failure.element.trace.currentline .. '\\n' ..\r\n        failure.name .. '\\n' ..\r\n        failureMessage(failure)",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "if options.verbose and failure.trace and failure.trace.traceback then\r\n      string = string .. '\\n' .. failure.trace.traceback\r\n    end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "string = string .. '\\n' .. failure.trace.traceback",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function()\r\n    local successString = s('output.success_plural')\r\n    local failureString = s('output.failure_plural')\r\n    local pendingString = s('output.pending_plural')\r\n    local errorString = s('output.error_plural')\r\n\r\n    local sec = handler.getDuration()\r\n    local successes = handler.successesCount\r\n    local pendings = handler.pendingsCount\r\n    local failures = handler.failuresCount\r\n    local errors = handler.errorsCount\r\n\r\n    if successes == 0 then\r\n      successString = s('output.success_zero')\r\n    elseif successes == 1 then\r\n      successString = s('output.success_single')\r\n    end\r\n\r\n    if failures == 0 then\r\n      failureString = s('output.failure_zero')\r\n    elseif failures == 1 then\r\n      failureString = s('output.failure_single')\r\n    end\r\n\r\n    if pendings == 0 then\r\n      pendingString = s('output.pending_zero')\r\n    elseif pendings == 1 then\r\n      pendingString = s('output.pending_single')\r\n    end\r\n\r\n    if errors == 0 then\r\n      errorString = s('output.error_zero')\r\n    elseif errors == 1 then\r\n      errorString = s('output.error_single')\r\n    end\r\n\r\n    local formattedTime = ('%.6f'):format(sec):gsub('([0-9])0+$', '%1')\r\n\r\n    return successes .. ' ' .. successString .. ' / ' ..\r\n      failures .. ' ' .. failureString .. ' / ' ..\r\n      errors .. ' ' .. errorString .. ' / ' ..\r\n      pendings .. ' ' .. pendingString .. ' : ' ..\r\n      formattedTime .. ' ' .. s('output.seconds')\r\n  end",
    "type": "function"
  }, {
    "id": 30,
    "text": "local successString = s('output.success_plural')",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "local failureString = s('output.failure_plural')",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "local pendingString = s('output.pending_plural')",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "local errorString = s('output.error_plural')",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "local sec = handler.getDuration()",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "local successes = handler.successesCount",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "local pendings = handler.pendingsCount",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "local failures = handler.failuresCount",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "local errors = handler.errorsCount",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "if successes == 0 then\r\n      successString = s('output.success_zero')\r\n    elseif successes == 1 then\r\n      successString = s('output.success_single')\r\n    end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "successString = s('output.success_zero')",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "successString = s('output.success_single')",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "if failures == 0 then\r\n      failureString = s('output.failure_zero')\r\n    elseif failures == 1 then\r\n      failureString = s('output.failure_single')\r\n    end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "failureString = s('output.failure_zero')",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "failureString = s('output.failure_single')",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "if pendings == 0 then\r\n      pendingString = s('output.pending_zero')\r\n    elseif pendings == 1 then\r\n      pendingString = s('output.pending_single')\r\n    end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "pendingString = s('output.pending_zero')",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "pendingString = s('output.pending_single')",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "if errors == 0 then\r\n      errorString = s('output.error_zero')\r\n    elseif errors == 1 then\r\n      errorString = s('output.error_single')\r\n    end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "errorString = s('output.error_zero')",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "errorString = s('output.error_single')",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "local formattedTime = ('%.6f'):format(sec):gsub('([0-9])0+$', '%1')",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function(element, parent, status, debug)\r\n    if not options.deferPrint then\r\n      local string = successDot\r\n\r\n      if status == 'pending' then\r\n        string = pendingDot\r\n      elseif status == 'failure' then\r\n        string = failureDot\r\n      elseif status == 'error' then\r\n        string = errorDot\r\n      end\r\n\r\n      io.write(string)\r\n      io.flush()\r\n    end\r\n\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 54,
    "text": "if not options.deferPrint then\r\n      local string = successDot\r\n\r\n      if status == 'pending' then\r\n        string = pendingDot\r\n      elseif status == 'failure' then\r\n        string = failureDot\r\n      elseif status == 'error' then\r\n        string = errorDot\r\n      end\r\n\r\n      io.write(string)\r\n      io.flush()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "local string = successDot",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "if status == 'pending' then\r\n        string = pendingDot\r\n      elseif status == 'failure' then\r\n        string = failureDot\r\n      elseif status == 'error' then\r\n        string = errorDot\r\n      end",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "string = pendingDot",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "string = failureDot",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "string = errorDot",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "io.write(string)",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "io.flush()",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function(suite, count, total)\r\n    local runString = (total > 1 and '\\nRepeating all tests (run %u of %u) . . .\\n\\n' or '')\r\n    io.write(runString:format(count, total))\r\n    io.flush()\r\n\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 64,
    "text": "local runString = (total > 1 and '\\nRepeating all tests (run %u of %u) . . .\\n\\n' or '')",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "io.write(runString:format(count, total))",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "function()\r\n    print('')\r\n    print(statusString())\r\n\r\n    for i, pending in pairs(handler.pendings) do\r\n      print('')\r\n      print(pendingDescription(pending))\r\n    end\r\n\r\n    for i, err in pairs(handler.failures) do\r\n      print('')\r\n      print(failureDescription(err))\r\n    end\r\n\r\n    for i, err in pairs(handler.errors) do\r\n      print('')\r\n      print(failureDescription(err, true))\r\n    end\r\n\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 68,
    "text": "print('')",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "print(statusString())",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "for i, pending in pairs(handler.pendings) do\r\n      print('')\r\n      print(pendingDescription(pending))\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 71,
    "text": "print(pendingDescription(pending))",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "for i, err in pairs(handler.failures) do\r\n      print('')\r\n      print(failureDescription(err))\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 73,
    "text": "print(failureDescription(err))",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "for i, err in pairs(handler.errors) do\r\n      print('')\r\n      print(failureDescription(err, true))\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 75,
    "text": "print(failureDescription(err, true))",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "function(element, parent, message, debug)\r\n    io.write(errorDot)\r\n    io.flush()\r\n\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 78,
    "text": "io.write(errorDot)",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "function(options)\r\n  local busted = require 'busted'\r\n  local handler = require 'busted.outputHandlers.base'()\r\n\r\n  local successDot =  '+'\r\n  local failureDot =  '-'\r\n  local errorDot =  '*'\r\n  local pendingDot = '.'\r\n\r\n  local pendingDescription = function(pending)\r\n    local name = pending.name\r\n\r\n    local string = s('output.pending') .. ' -> ' ..\r\n      pending.trace.short_src .. ' @ ' ..\r\n      pending.trace.currentline  ..\r\n      '\\n' .. name\r\n\r\n    if type(pending.message) == 'string' then\r\n      string = string .. '\\n' .. pending.message\r\n    elseif pending.message ~= nil then\r\n      string = string .. '\\n' .. pretty.write(pending.message)\r\n    end\r\n\r\n    return string\r\n  end\r\n\r\n  local failureMessage = function(failure)\r\n    local string = failure.randomseed and ('Random seed: ' .. failure.randomseed .. '\\n') or ''\r\n    if type(failure.message) == 'string' then\r\n      string = string .. failure.message\r\n    elseif failure.message == nil then\r\n      string = string .. 'Nil error'\r\n    else\r\n      string = string .. pretty.write(failure.message)\r\n    end\r\n\r\n    return string\r\n  end\r\n\r\n  local failureDescription = function(failure, isError)\r\n    local string = s('output.failure') .. ' -> '\r\n    if isError then\r\n      string = s('output.error') .. ' -> '\r\n    end\r\n\r\n    if not failure.element.trace or not failure.element.trace.short_src then\r\n      string = string ..\r\n        failureMessage(failure) .. '\\n' ..\r\n        failure.name\r\n    else\r\n      string = string ..\r\n        failure.element.trace.short_src .. ' @ ' ..\r\n        failure.element.trace.currentline .. '\\n' ..\r\n        failure.name .. '\\n' ..\r\n        failureMessage(failure)\r\n    end\r\n\r\n    if options.verbose and failure.trace and failure.trace.traceback then\r\n      string = string .. '\\n' .. failure.trace.traceback\r\n    end\r\n\r\n    return string\r\n  end\r\n\r\n  local statusString = function()\r\n    local successString = s('output.success_plural')\r\n    local failureString = s('output.failure_plural')\r\n    local pendingString = s('output.pending_plural')\r\n    local errorString = s('output.error_plural')\r\n\r\n    local sec = handler.getDuration()\r\n    local successes = handler.successesCount\r\n    local pendings = handler.pendingsCount\r\n    local failures = handler.failuresCount\r\n    local errors = handler.errorsCount\r\n\r\n    if successes == 0 then\r\n      successString = s('output.success_zero')\r\n    elseif successes == 1 then\r\n      successString = s('output.success_single')\r\n    end\r\n\r\n    if failures == 0 then\r\n      failureString = s('output.failure_zero')\r\n    elseif failures == 1 then\r\n      failureString = s('output.failure_single')\r\n    end\r\n\r\n    if pendings == 0 then\r\n      pendingString = s('output.pending_zero')\r\n    elseif pendings == 1 then\r\n      pendingString = s('output.pending_single')\r\n    end\r\n\r\n    if errors == 0 then\r\n      errorString = s('output.error_zero')\r\n    elseif errors == 1 then\r\n      errorString = s('output.error_single')\r\n    end\r\n\r\n    local formattedTime = ('%.6f'):format(sec):gsub('([0-9])0+$', '%1')\r\n\r\n    return successes .. ' ' .. successString .. ' / ' ..\r\n      failures .. ' ' .. failureString .. ' / ' ..\r\n      errors .. ' ' .. errorString .. ' / ' ..\r\n      pendings .. ' ' .. pendingString .. ' : ' ..\r\n      formattedTime .. ' ' .. s('output.seconds')\r\n  end\r\n\r\n  handler.testEnd = function(element, parent, status, debug)\r\n    if not options.deferPrint then\r\n      local string = successDot\r\n\r\n      if status == 'pending' then\r\n        string = pendingDot\r\n      elseif status == 'failure' then\r\n        string = failureDot\r\n      elseif status == 'error' then\r\n        string = errorDot\r\n      end\r\n\r\n      io.write(string)\r\n      io.flush()\r\n    end\r\n\r\n    return nil, true\r\n  end\r\n\r\n  handler.suiteStart = function(suite, count, total)\r\n    local runString = (total > 1 and '\\nRepeating all tests (run %u of %u) . . .\\n\\n' or '')\r\n    io.write(runString:format(count, total))\r\n    io.flush()\r\n\r\n    return nil, true\r\n  end\r\n\r\n  handler.suiteEnd = function()\r\n    print('')\r\n    print(statusString())\r\n\r\n    for i, pending in pairs(handler.pendings) do\r\n      print('')\r\n      print(pendingDescription(pending))\r\n    end\r\n\r\n    for i, err in pairs(handler.failures) do\r\n      print('')\r\n      print(failureDescription(err))\r\n    end\r\n\r\n    for i, err in pairs(handler.errors) do\r\n      print('')\r\n      print(failureDescription(err, true))\r\n    end\r\n\r\n    return nil, true\r\n  end\r\n\r\n  handler.error = function(element, parent, message, debug)\r\n    io.write(errorDot)\r\n    io.flush()\r\n\r\n    return nil, true\r\n  end\r\n\r\n  busted.subscribe({ 'test', 'end' }, handler.testEnd, { predicate = handler.cancelOnPending })\r\n  busted.subscribe({ 'suite', 'start' }, handler.suiteStart)\r\n  busted.subscribe({ 'suite', 'end' }, handler.suiteEnd)\r\n  busted.subscribe({ 'error', 'file' }, handler.error)\r\n  busted.subscribe({ 'failure', 'file' }, handler.error)\r\n  busted.subscribe({ 'error', 'describe' }, handler.error)\r\n  busted.subscribe({ 'failure', 'describe' }, handler.error)\r\n\r\n  return handler\r\nend",
    "type": "function"
  }, {
    "id": 81,
    "text": "local busted = require 'busted'",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "local handler = require 'busted.outputHandlers.base'()",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "local successDot =  '+'",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "local failureDot =  '-'",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "local errorDot =  '*'",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "local pendingDot = '.'",
    "type": "statement:localassign"
  }, {
    "id": 87,
    "text": "local pendingDescription = function(pending)\r\n    local name = pending.name\r\n\r\n    local string = s('output.pending') .. ' -> ' ..\r\n      pending.trace.short_src .. ' @ ' ..\r\n      pending.trace.currentline  ..\r\n      '\\n' .. name\r\n\r\n    if type(pending.message) == 'string' then\r\n      string = string .. '\\n' .. pending.message\r\n    elseif pending.message ~= nil then\r\n      string = string .. '\\n' .. pretty.write(pending.message)\r\n    end\r\n\r\n    return string\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 88,
    "text": "local failureMessage = function(failure)\r\n    local string = failure.randomseed and ('Random seed: ' .. failure.randomseed .. '\\n') or ''\r\n    if type(failure.message) == 'string' then\r\n      string = string .. failure.message\r\n    elseif failure.message == nil then\r\n      string = string .. 'Nil error'\r\n    else\r\n      string = string .. pretty.write(failure.message)\r\n    end\r\n\r\n    return string\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "local failureDescription = function(failure, isError)\r\n    local string = s('output.failure') .. ' -> '\r\n    if isError then\r\n      string = s('output.error') .. ' -> '\r\n    end\r\n\r\n    if not failure.element.trace or not failure.element.trace.short_src then\r\n      string = string ..\r\n        failureMessage(failure) .. '\\n' ..\r\n        failure.name\r\n    else\r\n      string = string ..\r\n        failure.element.trace.short_src .. ' @ ' ..\r\n        failure.element.trace.currentline .. '\\n' ..\r\n        failure.name .. '\\n' ..\r\n        failureMessage(failure)\r\n    end\r\n\r\n    if options.verbose and failure.trace and failure.trace.traceback then\r\n      string = string .. '\\n' .. failure.trace.traceback\r\n    end\r\n\r\n    return string\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "local statusString = function()\r\n    local successString = s('output.success_plural')\r\n    local failureString = s('output.failure_plural')\r\n    local pendingString = s('output.pending_plural')\r\n    local errorString = s('output.error_plural')\r\n\r\n    local sec = handler.getDuration()\r\n    local successes = handler.successesCount\r\n    local pendings = handler.pendingsCount\r\n    local failures = handler.failuresCount\r\n    local errors = handler.errorsCount\r\n\r\n    if successes == 0 then\r\n      successString = s('output.success_zero')\r\n    elseif successes == 1 then\r\n      successString = s('output.success_single')\r\n    end\r\n\r\n    if failures == 0 then\r\n      failureString = s('output.failure_zero')\r\n    elseif failures == 1 then\r\n      failureString = s('output.failure_single')\r\n    end\r\n\r\n    if pendings == 0 then\r\n      pendingString = s('output.pending_zero')\r\n    elseif pendings == 1 then\r\n      pendingString = s('output.pending_single')\r\n    end\r\n\r\n    if errors == 0 then\r\n      errorString = s('output.error_zero')\r\n    elseif errors == 1 then\r\n      errorString = s('output.error_single')\r\n    end\r\n\r\n    local formattedTime = ('%.6f'):format(sec):gsub('([0-9])0+$', '%1')\r\n\r\n    return successes .. ' ' .. successString .. ' / ' ..\r\n      failures .. ' ' .. failureString .. ' / ' ..\r\n      errors .. ' ' .. errorString .. ' / ' ..\r\n      pendings .. ' ' .. pendingString .. ' : ' ..\r\n      formattedTime .. ' ' .. s('output.seconds')\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "handler.testEnd = function(element, parent, status, debug)\r\n    if not options.deferPrint then\r\n      local string = successDot\r\n\r\n      if status == 'pending' then\r\n        string = pendingDot\r\n      elseif status == 'failure' then\r\n        string = failureDot\r\n      elseif status == 'error' then\r\n        string = errorDot\r\n      end\r\n\r\n      io.write(string)\r\n      io.flush()\r\n    end\r\n\r\n    return nil, true\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "handler.suiteStart = function(suite, count, total)\r\n    local runString = (total > 1 and '\\nRepeating all tests (run %u of %u) . . .\\n\\n' or '')\r\n    io.write(runString:format(count, total))\r\n    io.flush()\r\n\r\n    return nil, true\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "handler.suiteEnd = function()\r\n    print('')\r\n    print(statusString())\r\n\r\n    for i, pending in pairs(handler.pendings) do\r\n      print('')\r\n      print(pendingDescription(pending))\r\n    end\r\n\r\n    for i, err in pairs(handler.failures) do\r\n      print('')\r\n      print(failureDescription(err))\r\n    end\r\n\r\n    for i, err in pairs(handler.errors) do\r\n      print('')\r\n      print(failureDescription(err, true))\r\n    end\r\n\r\n    return nil, true\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "handler.error = function(element, parent, message, debug)\r\n    io.write(errorDot)\r\n    io.flush()\r\n\r\n    return nil, true\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "busted.subscribe({ 'test', 'end' }, handler.testEnd, { predicate = handler.cancelOnPending })",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "busted.subscribe({ 'suite', 'start' }, handler.suiteStart)",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "busted.subscribe({ 'suite', 'end' }, handler.suiteEnd)",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "busted.subscribe({ 'error', 'file' }, handler.error)",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "busted.subscribe({ 'failure', 'file' }, handler.error)",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "busted.subscribe({ 'error', 'describe' }, handler.error)",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "busted.subscribe({ 'failure', 'describe' }, handler.error)",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "",
    "type": "function container"
  }, {
    "id": 104,
    "text": "write",
    "type": "global function"
  }, {
    "id": 105,
    "text": "getDuration",
    "type": "global function"
  }, {
    "id": 106,
    "text": "subscribe",
    "type": "global function"
  }, {
    "id": 107,
    "text": "write",
    "type": "global function"
  }, {
    "id": 108,
    "text": "flush",
    "type": "global function"
  }, {
    "id": 109,
    "text": "print",
    "type": "global function"
  }, {
    "id": 110,
    "text": "s",
    "type": "global function"
  }, {
    "id": 111,
    "text": "type",
    "type": "global function"
  }, {
    "id": 112,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 113,
    "text": "require",
    "type": "global function"
  }, {
    "id": 114,
    "text": "pretty",
    "type": "module"
  }, {
    "id": 115,
    "text": "say",
    "type": "module"
  }, {
    "id": 116,
    "text": "",
    "type": "variable container"
  }, {
    "id": 117,
    "text": "",
    "type": "require container"
  }, {
    "id": 118,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 119,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 120,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 121,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 122,
    "text": "",
    "type": "interface container"
  }, {
    "id": 123,
    "text": "",
    "type": "interface"
  } ]
}