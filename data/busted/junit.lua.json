{
  "_filename": "junit.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/busted/busted/outputHandlers/junit.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 8
  }, {
    "from": 4,
    "label": "has",
    "to": 9
  }, {
    "from": 4,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 9
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 9
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 15,
    "label": "has",
    "to": 20
  }, {
    "from": 15,
    "label": "has",
    "to": 21
  }, {
    "from": 15,
    "label": "has",
    "to": 22
  }, {
    "from": 15,
    "label": "has",
    "to": 9
  }, {
    "from": 15,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 24,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 30,
    "label": "has",
    "to": 34
  }, {
    "from": 24,
    "label": "has",
    "to": 9
  }, {
    "from": 24,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 37,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 37,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 37,
    "label": "has",
    "to": 45
  }, {
    "from": 36,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 9
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 51,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 54,
    "label": "has",
    "to": 57
  }, {
    "from": 54,
    "label": "has",
    "to": 58
  }, {
    "from": 54,
    "label": "has",
    "to": 59
  }, {
    "from": 51,
    "label": "has",
    "to": 9
  }, {
    "from": 51,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 61,
    "label": "has",
    "to": 9
  }, {
    "from": 61,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 65,
    "label": "has",
    "to": 9
  }, {
    "from": 65,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 66
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 70,
    "label": "has",
    "to": 75
  }, {
    "from": 69,
    "label": "has",
    "to": 9
  }, {
    "from": 69,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 77,
    "label": "has",
    "to": 80
  }, {
    "from": 77,
    "label": "has",
    "to": 81
  }, {
    "from": 77,
    "label": "has",
    "to": 82
  }, {
    "from": 77,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 77,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 5
  }, {
    "from": 85,
    "label": "has",
    "to": 6
  }, {
    "from": 85,
    "label": "has",
    "to": 7
  }, {
    "from": 85,
    "label": "has",
    "to": 8
  }, {
    "from": 85,
    "label": "has",
    "to": 9
  }, {
    "from": 77,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 9
  }, {
    "from": 77,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 9
  }, {
    "from": 77,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 16
  }, {
    "from": 86,
    "label": "has",
    "to": 17
  }, {
    "from": 86,
    "label": "has",
    "to": 18
  }, {
    "from": 86,
    "label": "has",
    "to": 19
  }, {
    "from": 86,
    "label": "has",
    "to": 20
  }, {
    "from": 86,
    "label": "has",
    "to": 21
  }, {
    "from": 86,
    "label": "has",
    "to": 22
  }, {
    "from": 86,
    "label": "has",
    "to": 9
  }, {
    "from": 77,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 25
  }, {
    "from": 87,
    "label": "has",
    "to": 26
  }, {
    "from": 87,
    "label": "has",
    "to": 27
  }, {
    "from": 87,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 87,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 30,
    "label": "has",
    "to": 34
  }, {
    "from": 87,
    "label": "has",
    "to": 9
  }, {
    "from": 77,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 37,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 37,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 37,
    "label": "has",
    "to": 45
  }, {
    "from": 77,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 48
  }, {
    "from": 88,
    "label": "has",
    "to": 49
  }, {
    "from": 88,
    "label": "has",
    "to": 9
  }, {
    "from": 77,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 52
  }, {
    "from": 89,
    "label": "has",
    "to": 53
  }, {
    "from": 89,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 54,
    "label": "has",
    "to": 57
  }, {
    "from": 54,
    "label": "has",
    "to": 58
  }, {
    "from": 54,
    "label": "has",
    "to": 59
  }, {
    "from": 89,
    "label": "has",
    "to": 9
  }, {
    "from": 77,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 62
  }, {
    "from": 90,
    "label": "has",
    "to": 63
  }, {
    "from": 90,
    "label": "has",
    "to": 9
  }, {
    "from": 77,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 66
  }, {
    "from": 91,
    "label": "has",
    "to": 67
  }, {
    "from": 91,
    "label": "has",
    "to": 9
  }, {
    "from": 77,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 66
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 70,
    "label": "has",
    "to": 75
  }, {
    "from": 92,
    "label": "has",
    "to": 9
  }, {
    "from": 77,
    "label": "has",
    "to": 93
  }, {
    "from": 77,
    "label": "has",
    "to": 94
  }, {
    "from": 77,
    "label": "has",
    "to": 95
  }, {
    "from": 77,
    "label": "has",
    "to": 96
  }, {
    "from": 77,
    "label": "has",
    "to": 97
  }, {
    "from": 77,
    "label": "has",
    "to": 98
  }, {
    "from": 77,
    "label": "has",
    "to": 99
  }, {
    "from": 77,
    "label": "has",
    "to": 100
  }, {
    "from": 77,
    "label": "has",
    "to": 101
  }, {
    "from": 77,
    "label": "has",
    "to": 9
  }, {
    "from": 77,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "calls",
    "to": 104
  }, {
    "from": 11,
    "label": "calls",
    "to": 107
  }, {
    "from": 103,
    "label": "calls",
    "to": 109
  }, {
    "from": 103,
    "label": "calls",
    "to": 109
  }, {
    "from": 103,
    "label": "calls",
    "to": 109
  }, {
    "from": 103,
    "label": "calls",
    "to": 109
  }, {
    "from": 103,
    "label": "calls",
    "to": 109
  }, {
    "from": 103,
    "label": "calls",
    "to": 109
  }, {
    "from": 103,
    "label": "calls",
    "to": 109
  }, {
    "from": 103,
    "label": "calls",
    "to": 109
  }, {
    "from": 103,
    "label": "calls",
    "to": 109
  }, {
    "from": 13,
    "label": "calls",
    "to": 11
  }, {
    "from": 103,
    "label": "calls",
    "to": 11
  }, {
    "from": 103,
    "label": "calls",
    "to": 11
  }, {
    "from": 103,
    "label": "calls",
    "to": 111
  }, {
    "from": 103,
    "label": "calls",
    "to": 110
  }, {
    "from": 103,
    "label": "calls",
    "to": 115
  }, {
    "from": 103,
    "label": "calls",
    "to": 116
  }, {
    "from": 103,
    "label": "calls",
    "to": 116
  }, {
    "from": 103,
    "label": "calls",
    "to": 116
  }, {
    "from": 103,
    "label": "calls",
    "to": 116
  }, {
    "from": 103,
    "label": "calls",
    "to": 36
  }, {
    "from": 103,
    "label": "calls",
    "to": 36
  }, {
    "from": 103,
    "label": "calls",
    "to": 36
  }, {
    "from": 103,
    "label": "calls",
    "to": 36
  }, {
    "from": 103,
    "label": "calls",
    "to": 108
  }, {
    "from": 13,
    "label": "calls",
    "to": 108
  }, {
    "from": 103,
    "label": "calls",
    "to": 113
  }, {
    "from": 103,
    "label": "calls",
    "to": 106
  }, {
    "from": 103,
    "label": "calls",
    "to": 114
  }, {
    "from": 103,
    "label": "calls",
    "to": 114
  }, {
    "from": 103,
    "label": "calls",
    "to": 13
  }, {
    "from": 103,
    "label": "calls",
    "to": 105
  }, {
    "from": 103,
    "label": "calls",
    "to": 105
  }, {
    "from": 103,
    "label": "calls",
    "to": 105
  }, {
    "from": 103,
    "label": "calls",
    "to": 112
  }, {
    "from": 2,
    "label": "contains",
    "to": 103
  }, {
    "from": 103,
    "label": "declares",
    "to": 4
  }, {
    "from": 103,
    "label": "declares",
    "to": 11
  }, {
    "from": 103,
    "label": "declares",
    "to": 13
  }, {
    "from": 103,
    "label": "declares",
    "to": 15
  }, {
    "from": 103,
    "label": "declares",
    "to": 24
  }, {
    "from": 103,
    "label": "declares",
    "to": 36
  }, {
    "from": 103,
    "label": "declares",
    "to": 47
  }, {
    "from": 103,
    "label": "declares",
    "to": 51
  }, {
    "from": 103,
    "label": "declares",
    "to": 61
  }, {
    "from": 103,
    "label": "declares",
    "to": 65
  }, {
    "from": 103,
    "label": "declares",
    "to": 69
  }, {
    "from": 103,
    "label": "declares",
    "to": 77
  }, {
    "from": 2,
    "label": "contains",
    "to": 117
  }, {
    "from": 2,
    "label": "contains",
    "to": 118
  }, {
    "from": 118,
    "label": "initializes",
    "to": 119
  }, {
    "from": 119,
    "label": "requires",
    "to": 120
  }, {
    "from": 118,
    "label": "initializes",
    "to": 121
  }, {
    "from": 121,
    "label": "requires",
    "to": 122
  }, {
    "from": 118,
    "label": "initializes",
    "to": 123
  }, {
    "from": 123,
    "label": "requires",
    "to": 3
  }, {
    "from": 118,
    "label": "initializes",
    "to": 124
  }, {
    "from": 124,
    "label": "requires",
    "to": 1
  }, {
    "from": 2,
    "label": "provides",
    "to": 125
  }, {
    "from": 125,
    "label": "provides",
    "to": 126
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "base",
    "type": "module"
  }, {
    "id": 2,
    "text": "junit",
    "type": "module"
  }, {
    "id": 3,
    "text": "busted",
    "type": "module"
  }, {
    "id": 4,
    "text": "function(suite, count, total)\r\n    local suite_xml = {\r\n      start_tick = suite.starttick,\r\n      xml_doc = xml.new('testsuite', {\r\n        name = 'Run ' .. count .. ' of ' .. total,\r\n        tests = 0,\r\n        errors = 0,\r\n        failures = 0,\r\n        skip = 0,\r\n        timestamp = os.date('!%Y-%m-%dT%H:%M:%S'),\r\n      })\r\n    }\r\n    top.xml_doc:add_direct_child(suite_xml.xml_doc)\r\n    table.insert(stack, top)\r\n    top = suite_xml\r\n\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 5,
    "text": "local suite_xml = {\r\n      start_tick = suite.starttick,\r\n      xml_doc = xml.new('testsuite', {\r\n        name = 'Run ' .. count .. ' of ' .. total,\r\n        tests = 0,\r\n        errors = 0,\r\n        failures = 0,\r\n        skip = 0,\r\n        timestamp = os.date('!%Y-%m-%dT%H:%M:%S'),\r\n      })\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "top.xml_doc:add_direct_child(suite_xml.xml_doc)",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "table.insert(stack, top)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "top = suite_xml",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "local function formatDuration(duration)\r\n    return string.format(\"%.2f\", duration)\r\n  end",
    "type": "function"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "local function elapsed(start_time)\r\n    return formatDuration(busted.monotime() - start_time)\r\n  end",
    "type": "function"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function(suite, count, total)\r\n    local suite_xml = top\r\n    suite_xml.xml_doc.attr.time = formatDuration(suite.duration)\r\n\r\n    top = table.remove(stack)\r\n    top.xml_doc.attr.tests = top.xml_doc.attr.tests + suite_xml.xml_doc.attr.tests\r\n    top.xml_doc.attr.errors = top.xml_doc.attr.errors + suite_xml.xml_doc.attr.errors\r\n    top.xml_doc.attr.failures = top.xml_doc.attr.failures + suite_xml.xml_doc.attr.failures\r\n    top.xml_doc.attr.skip = top.xml_doc.attr.skip + suite_xml.xml_doc.attr.skip\r\n\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 16,
    "text": "local suite_xml = top",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "suite_xml.xml_doc.attr.time = formatDuration(suite.duration)",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "top = table.remove(stack)",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "top.xml_doc.attr.tests = top.xml_doc.attr.tests + suite_xml.xml_doc.attr.tests",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "top.xml_doc.attr.errors = top.xml_doc.attr.errors + suite_xml.xml_doc.attr.errors",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "top.xml_doc.attr.failures = top.xml_doc.attr.failures + suite_xml.xml_doc.attr.failures",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "top.xml_doc.attr.skip = top.xml_doc.attr.skip + suite_xml.xml_doc.attr.skip",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function()\r\n    top.xml_doc.attr.time = elapsed(top.start_tick)\r\n    local output_string = xml.tostring(top.xml_doc, '', '\\t', nil, false)\r\n    local file\r\n    if 'string' == type(output_file_name) then\r\n      file = io.open(output_file_name, 'w+b' )\r\n    end\r\n    if file then\r\n      file:write(output_string)\r\n      file:write('\\n')\r\n      file:close()\r\n    else\r\n      print(output_string)\r\n    end\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 25,
    "text": "top.xml_doc.attr.time = elapsed(top.start_tick)",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "local output_string = xml.tostring(top.xml_doc, '', '\\t', nil, false)",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "local file",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "if 'string' == type(output_file_name) then\r\n      file = io.open(output_file_name, 'w+b' )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "file = io.open(output_file_name, 'w+b' )",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "if file then\r\n      file:write(output_string)\r\n      file:write('\\n')\r\n      file:close()\r\n    else\r\n      print(output_string)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "file:write(output_string)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "file:write('\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "file:close()",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "print(output_string)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "local function testStatus(element, parent, message, status, trace)\r\n    if status ~= 'success' then\r\n      testcase_node:addtag(status)\r\n      if status ~= 'pending' and parent and parent.randomseed then\r\n        testcase_node:text('Random seed: ' .. parent.randomseed .. '\\n')\r\n      end\r\n      if message then testcase_node:text(message) end\r\n      if trace and trace.traceback then testcase_node:text(trace.traceback) end\r\n      testcase_node:up()\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 37,
    "text": "if status ~= 'success' then\r\n      testcase_node:addtag(status)\r\n      if status ~= 'pending' and parent and parent.randomseed then\r\n        testcase_node:text('Random seed: ' .. parent.randomseed .. '\\n')\r\n      end\r\n      if message then testcase_node:text(message) end\r\n      if trace and trace.traceback then testcase_node:text(trace.traceback) end\r\n      testcase_node:up()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "testcase_node:addtag(status)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "if status ~= 'pending' and parent and parent.randomseed then\r\n        testcase_node:text('Random seed: ' .. parent.randomseed .. '\\n')\r\n      end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "testcase_node:text('Random seed: ' .. parent.randomseed .. '\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "if message then testcase_node:text(message) end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "testcase_node:text(message)",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "if trace and trace.traceback then testcase_node:text(trace.traceback) end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "testcase_node:text(trace.traceback)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "testcase_node:up()",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function(element, parent)\r\n    testcase_node = xml.new('testcase', {\r\n      classname = element.trace.short_src .. ':' .. element.trace.currentline,\r\n      name = handler.getFullName(element),\r\n    })\r\n    top.xml_doc:add_direct_child(testcase_node)\r\n\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 48,
    "text": "testcase_node = xml.new('testcase', {\r\n      classname = element.trace.short_src .. ':' .. element.trace.currentline,\r\n      name = handler.getFullName(element),\r\n    })",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "top.xml_doc:add_direct_child(testcase_node)",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "function(element, parent, status)\r\n    top.xml_doc.attr.tests = top.xml_doc.attr.tests + 1\r\n    testcase_node:set_attrib(\"time\", formatDuration(element.duration))\r\n\r\n    if status == 'success' then\r\n      testStatus(element, parent, nil, 'success')\r\n    elseif status == 'pending' then\r\n      top.xml_doc.attr.skip = top.xml_doc.attr.skip + 1\r\n      local formatted = handler.pendings[#handler.pendings]\r\n      local trace = element.trace ~= formatted.trace and formatted.trace\r\n      testStatus(element, parent, formatted.message, 'skipped', trace)\r\n    end\r\n\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 52,
    "text": "top.xml_doc.attr.tests = top.xml_doc.attr.tests + 1",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "testcase_node:set_attrib(\"time\", formatDuration(element.duration))",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "if status == 'success' then\r\n      testStatus(element, parent, nil, 'success')\r\n    elseif status == 'pending' then\r\n      top.xml_doc.attr.skip = top.xml_doc.attr.skip + 1\r\n      local formatted = handler.pendings[#handler.pendings]\r\n      local trace = element.trace ~= formatted.trace and formatted.trace\r\n      testStatus(element, parent, formatted.message, 'skipped', trace)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "testStatus(element, parent, nil, 'success')",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "top.xml_doc.attr.skip = top.xml_doc.attr.skip + 1",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "local formatted = handler.pendings[#handler.pendings]",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "local trace = element.trace ~= formatted.trace and formatted.trace",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "testStatus(element, parent, formatted.message, 'skipped', trace)",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function(element, parent, message, trace)\r\n    top.xml_doc.attr.failures = top.xml_doc.attr.failures + 1\r\n    testStatus(element, parent, message, 'failure', trace)\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 62,
    "text": "top.xml_doc.attr.failures = top.xml_doc.attr.failures + 1",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "testStatus(element, parent, message, 'failure', trace)",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "function(element, parent, message, trace)\r\n    top.xml_doc.attr.errors = top.xml_doc.attr.errors + 1\r\n    testStatus(element, parent, message, 'error', trace)\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 66,
    "text": "top.xml_doc.attr.errors = top.xml_doc.attr.errors + 1",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "testStatus(element, parent, message, 'error', trace)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function(element, parent, message, trace)\r\n    if element.descriptor ~= 'it' then\r\n      top.xml_doc.attr.errors = top.xml_doc.attr.errors + 1\r\n      top.xml_doc:addtag('error')\r\n      top.xml_doc:text(message)\r\n      if trace and trace.traceback then\r\n        top.xml_doc:text(trace.traceback)\r\n      end\r\n      top.xml_doc:up()\r\n    end\r\n\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 70,
    "text": "if element.descriptor ~= 'it' then\r\n      top.xml_doc.attr.errors = top.xml_doc.attr.errors + 1\r\n      top.xml_doc:addtag('error')\r\n      top.xml_doc:text(message)\r\n      if trace and trace.traceback then\r\n        top.xml_doc:text(trace.traceback)\r\n      end\r\n      top.xml_doc:up()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "top.xml_doc:addtag('error')",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "top.xml_doc:text(message)",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "if trace and trace.traceback then\r\n        top.xml_doc:text(trace.traceback)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "top.xml_doc:text(trace.traceback)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "top.xml_doc:up()",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "function(options)\r\n  local busted = require 'busted'\r\n  local handler = require 'busted.outputHandlers.base'()\r\n  local top = {\r\n    start_tick = busted.monotime(),\r\n    xml_doc = xml.new('testsuites', {\r\n      tests = 0,\r\n      errors = 0,\r\n      failures = 0,\r\n      skip = 0,\r\n    })\r\n  }\r\n  local stack = {}\r\n  local testcase_node\r\n  if 'table' == type(options.arguments) then\r\n    --the first argument should be the name of the xml file.\r\n    output_file_name = options.arguments[1]\r\n  end\r\n\r\n  handler.suiteStart = function(suite, count, total)\r\n    local suite_xml = {\r\n      start_tick = suite.starttick,\r\n      xml_doc = xml.new('testsuite', {\r\n        name = 'Run ' .. count .. ' of ' .. total,\r\n        tests = 0,\r\n        errors = 0,\r\n        failures = 0,\r\n        skip = 0,\r\n        timestamp = os.date('!%Y-%m-%dT%H:%M:%S'),\r\n      })\r\n    }\r\n    top.xml_doc:add_direct_child(suite_xml.xml_doc)\r\n    table.insert(stack, top)\r\n    top = suite_xml\r\n\r\n    return nil, true\r\n  end\r\n\r\n  local function formatDuration(duration)\r\n    return string.format(\"%.2f\", duration)\r\n  end\r\n\r\n  local function elapsed(start_time)\r\n    return formatDuration(busted.monotime() - start_time)\r\n  end\r\n\r\n  handler.suiteEnd = function(suite, count, total)\r\n    local suite_xml = top\r\n    suite_xml.xml_doc.attr.time = formatDuration(suite.duration)\r\n\r\n    top = table.remove(stack)\r\n    top.xml_doc.attr.tests = top.xml_doc.attr.tests + suite_xml.xml_doc.attr.tests\r\n    top.xml_doc.attr.errors = top.xml_doc.attr.errors + suite_xml.xml_doc.attr.errors\r\n    top.xml_doc.attr.failures = top.xml_doc.attr.failures + suite_xml.xml_doc.attr.failures\r\n    top.xml_doc.attr.skip = top.xml_doc.attr.skip + suite_xml.xml_doc.attr.skip\r\n\r\n    return nil, true\r\n  end\r\n\r\n  handler.exit = function()\r\n    top.xml_doc.attr.time = elapsed(top.start_tick)\r\n    local output_string = xml.tostring(top.xml_doc, '', '\\t', nil, false)\r\n    local file\r\n    if 'string' == type(output_file_name) then\r\n      file = io.open(output_file_name, 'w+b' )\r\n    end\r\n    if file then\r\n      file:write(output_string)\r\n      file:write('\\n')\r\n      file:close()\r\n    else\r\n      print(output_string)\r\n    end\r\n    return nil, true\r\n  end\r\n\r\n  local function testStatus(element, parent, message, status, trace)\r\n    if status ~= 'success' then\r\n      testcase_node:addtag(status)\r\n      if status ~= 'pending' and parent and parent.randomseed then\r\n        testcase_node:text('Random seed: ' .. parent.randomseed .. '\\n')\r\n      end\r\n      if message then testcase_node:text(message) end\r\n      if trace and trace.traceback then testcase_node:text(trace.traceback) end\r\n      testcase_node:up()\r\n    end\r\n  end\r\n\r\n  handler.testStart = function(element, parent)\r\n    testcase_node = xml.new('testcase', {\r\n      classname = element.trace.short_src .. ':' .. element.trace.currentline,\r\n      name = handler.getFullName(element),\r\n    })\r\n    top.xml_doc:add_direct_child(testcase_node)\r\n\r\n    return nil, true\r\n  end\r\n\r\n  handler.testEnd = function(element, parent, status)\r\n    top.xml_doc.attr.tests = top.xml_doc.attr.tests + 1\r\n    testcase_node:set_attrib(\"time\", formatDuration(element.duration))\r\n\r\n    if status == 'success' then\r\n      testStatus(element, parent, nil, 'success')\r\n    elseif status == 'pending' then\r\n      top.xml_doc.attr.skip = top.xml_doc.attr.skip + 1\r\n      local formatted = handler.pendings[#handler.pendings]\r\n      local trace = element.trace ~= formatted.trace and formatted.trace\r\n      testStatus(element, parent, formatted.message, 'skipped', trace)\r\n    end\r\n\r\n    return nil, true\r\n  end\r\n\r\n  handler.failureTest = function(element, parent, message, trace)\r\n    top.xml_doc.attr.failures = top.xml_doc.attr.failures + 1\r\n    testStatus(element, parent, message, 'failure', trace)\r\n    return nil, true\r\n  end\r\n\r\n  handler.errorTest = function(element, parent, message, trace)\r\n    top.xml_doc.attr.errors = top.xml_doc.attr.errors + 1\r\n    testStatus(element, parent, message, 'error', trace)\r\n    return nil, true\r\n  end\r\n\r\n  handler.error = function(element, parent, message, trace)\r\n    if element.descriptor ~= 'it' then\r\n      top.xml_doc.attr.errors = top.xml_doc.attr.errors + 1\r\n      top.xml_doc:addtag('error')\r\n      top.xml_doc:text(message)\r\n      if trace and trace.traceback then\r\n        top.xml_doc:text(trace.traceback)\r\n      end\r\n      top.xml_doc:up()\r\n    end\r\n\r\n    return nil, true\r\n  end\r\n\r\n  busted.subscribe({ 'exit' }, handler.exit)\r\n  busted.subscribe({ 'suite', 'start' }, handler.suiteStart)\r\n  busted.subscribe({ 'suite', 'end' }, handler.suiteEnd)\r\n  busted.subscribe({ 'test', 'start' }, handler.testStart, { predicate = handler.cancelOnPending })\r\n  busted.subscribe({ 'test', 'end' }, handler.testEnd, { predicate = handler.cancelOnPending })\r\n  busted.subscribe({ 'error', 'it' }, handler.errorTest)\r\n  busted.subscribe({ 'failure', 'it' }, handler.failureTest)\r\n  busted.subscribe({ 'error' }, handler.error)\r\n  busted.subscribe({ 'failure' }, handler.error)\r\n\r\n  return handler\r\nend",
    "type": "function"
  }, {
    "id": 78,
    "text": "local busted = require 'busted'",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "local handler = require 'busted.outputHandlers.base'()",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "local top = {\r\n    start_tick = busted.monotime(),\r\n    xml_doc = xml.new('testsuites', {\r\n      tests = 0,\r\n      errors = 0,\r\n      failures = 0,\r\n      skip = 0,\r\n    })\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 81,
    "text": "local stack = {}",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "local testcase_node",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "if 'table' == type(options.arguments) then\r\n    --the first argument should be the name of the xml file.\r\n    output_file_name = options.arguments[1]\r\n  end",
    "type": "statement:if"
  }, {
    "id": 84,
    "text": "output_file_name = options.arguments[1]",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "handler.suiteStart = function(suite, count, total)\r\n    local suite_xml = {\r\n      start_tick = suite.starttick,\r\n      xml_doc = xml.new('testsuite', {\r\n        name = 'Run ' .. count .. ' of ' .. total,\r\n        tests = 0,\r\n        errors = 0,\r\n        failures = 0,\r\n        skip = 0,\r\n        timestamp = os.date('!%Y-%m-%dT%H:%M:%S'),\r\n      })\r\n    }\r\n    top.xml_doc:add_direct_child(suite_xml.xml_doc)\r\n    table.insert(stack, top)\r\n    top = suite_xml\r\n\r\n    return nil, true\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "handler.suiteEnd = function(suite, count, total)\r\n    local suite_xml = top\r\n    suite_xml.xml_doc.attr.time = formatDuration(suite.duration)\r\n\r\n    top = table.remove(stack)\r\n    top.xml_doc.attr.tests = top.xml_doc.attr.tests + suite_xml.xml_doc.attr.tests\r\n    top.xml_doc.attr.errors = top.xml_doc.attr.errors + suite_xml.xml_doc.attr.errors\r\n    top.xml_doc.attr.failures = top.xml_doc.attr.failures + suite_xml.xml_doc.attr.failures\r\n    top.xml_doc.attr.skip = top.xml_doc.attr.skip + suite_xml.xml_doc.attr.skip\r\n\r\n    return nil, true\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "handler.exit = function()\r\n    top.xml_doc.attr.time = elapsed(top.start_tick)\r\n    local output_string = xml.tostring(top.xml_doc, '', '\\t', nil, false)\r\n    local file\r\n    if 'string' == type(output_file_name) then\r\n      file = io.open(output_file_name, 'w+b' )\r\n    end\r\n    if file then\r\n      file:write(output_string)\r\n      file:write('\\n')\r\n      file:close()\r\n    else\r\n      print(output_string)\r\n    end\r\n    return nil, true\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "handler.testStart = function(element, parent)\r\n    testcase_node = xml.new('testcase', {\r\n      classname = element.trace.short_src .. ':' .. element.trace.currentline,\r\n      name = handler.getFullName(element),\r\n    })\r\n    top.xml_doc:add_direct_child(testcase_node)\r\n\r\n    return nil, true\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "handler.testEnd = function(element, parent, status)\r\n    top.xml_doc.attr.tests = top.xml_doc.attr.tests + 1\r\n    testcase_node:set_attrib(\"time\", formatDuration(element.duration))\r\n\r\n    if status == 'success' then\r\n      testStatus(element, parent, nil, 'success')\r\n    elseif status == 'pending' then\r\n      top.xml_doc.attr.skip = top.xml_doc.attr.skip + 1\r\n      local formatted = handler.pendings[#handler.pendings]\r\n      local trace = element.trace ~= formatted.trace and formatted.trace\r\n      testStatus(element, parent, formatted.message, 'skipped', trace)\r\n    end\r\n\r\n    return nil, true\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "handler.failureTest = function(element, parent, message, trace)\r\n    top.xml_doc.attr.failures = top.xml_doc.attr.failures + 1\r\n    testStatus(element, parent, message, 'failure', trace)\r\n    return nil, true\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "handler.errorTest = function(element, parent, message, trace)\r\n    top.xml_doc.attr.errors = top.xml_doc.attr.errors + 1\r\n    testStatus(element, parent, message, 'error', trace)\r\n    return nil, true\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "handler.error = function(element, parent, message, trace)\r\n    if element.descriptor ~= 'it' then\r\n      top.xml_doc.attr.errors = top.xml_doc.attr.errors + 1\r\n      top.xml_doc:addtag('error')\r\n      top.xml_doc:text(message)\r\n      if trace and trace.traceback then\r\n        top.xml_doc:text(trace.traceback)\r\n      end\r\n      top.xml_doc:up()\r\n    end\r\n\r\n    return nil, true\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "busted.subscribe({ 'exit' }, handler.exit)",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "busted.subscribe({ 'suite', 'start' }, handler.suiteStart)",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "busted.subscribe({ 'suite', 'end' }, handler.suiteEnd)",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "busted.subscribe({ 'test', 'start' }, handler.testStart, { predicate = handler.cancelOnPending })",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "busted.subscribe({ 'test', 'end' }, handler.testEnd, { predicate = handler.cancelOnPending })",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "busted.subscribe({ 'error', 'it' }, handler.errorTest)",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "busted.subscribe({ 'failure', 'it' }, handler.failureTest)",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "busted.subscribe({ 'error' }, handler.error)",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "busted.subscribe({ 'failure' }, handler.error)",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "",
    "type": "function container"
  }, {
    "id": 104,
    "text": "getFullName",
    "type": "global function"
  }, {
    "id": 105,
    "text": "new",
    "type": "global function"
  }, {
    "id": 106,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 107,
    "text": "format",
    "type": "global function"
  }, {
    "id": 108,
    "text": "monotime",
    "type": "global function"
  }, {
    "id": 109,
    "text": "subscribe",
    "type": "global function"
  }, {
    "id": 110,
    "text": "print",
    "type": "global function"
  }, {
    "id": 111,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 112,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 113,
    "text": "date",
    "type": "global function"
  }, {
    "id": 114,
    "text": "type",
    "type": "global function"
  }, {
    "id": 115,
    "text": "open",
    "type": "global function"
  }, {
    "id": 116,
    "text": "require",
    "type": "global function"
  }, {
    "id": 117,
    "text": "",
    "type": "variable container"
  }, {
    "id": 118,
    "text": "",
    "type": "require container"
  }, {
    "id": 119,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 120,
    "text": "xml",
    "type": "module"
  }, {
    "id": 121,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 122,
    "text": "(string)",
    "type": "module"
  }, {
    "id": 123,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 124,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 125,
    "text": "",
    "type": "interface container"
  }, {
    "id": 126,
    "text": "",
    "type": "interface"
  } ]
}