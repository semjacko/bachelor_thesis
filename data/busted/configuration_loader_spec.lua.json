{
  "_filename": "configuration_loader_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/busted/spec/modules/configuration_loader_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 9
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 11
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 9
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 15
  }, {
    "from": 17,
    "label": "has",
    "to": 11
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 18
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 19
  }, {
    "from": 21,
    "label": "has",
    "to": 15
  }, {
    "from": 21,
    "label": "has",
    "to": 11
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 23
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 15
  }, {
    "from": 25,
    "label": "has",
    "to": 11
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 22
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 11
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 33,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 9
  }, {
    "from": 38,
    "label": "has",
    "to": 35
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 3
  }, {
    "from": 45,
    "label": "has",
    "to": 4
  }, {
    "from": 45,
    "label": "has",
    "to": 5
  }, {
    "from": 42,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 8
  }, {
    "from": 46,
    "label": "has",
    "to": 9
  }, {
    "from": 46,
    "label": "has",
    "to": 10
  }, {
    "from": 46,
    "label": "has",
    "to": 11
  }, {
    "from": 42,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 9
  }, {
    "from": 47,
    "label": "has",
    "to": 14
  }, {
    "from": 47,
    "label": "has",
    "to": 15
  }, {
    "from": 47,
    "label": "has",
    "to": 11
  }, {
    "from": 42,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 18
  }, {
    "from": 48,
    "label": "has",
    "to": 9
  }, {
    "from": 48,
    "label": "has",
    "to": 19
  }, {
    "from": 48,
    "label": "has",
    "to": 15
  }, {
    "from": 48,
    "label": "has",
    "to": 11
  }, {
    "from": 42,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 22
  }, {
    "from": 49,
    "label": "has",
    "to": 18
  }, {
    "from": 49,
    "label": "has",
    "to": 23
  }, {
    "from": 49,
    "label": "has",
    "to": 19
  }, {
    "from": 49,
    "label": "has",
    "to": 15
  }, {
    "from": 49,
    "label": "has",
    "to": 11
  }, {
    "from": 42,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 26
  }, {
    "from": 50,
    "label": "has",
    "to": 23
  }, {
    "from": 50,
    "label": "has",
    "to": 27
  }, {
    "from": 50,
    "label": "has",
    "to": 15
  }, {
    "from": 50,
    "label": "has",
    "to": 11
  }, {
    "from": 42,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 22
  }, {
    "from": 51,
    "label": "has",
    "to": 30
  }, {
    "from": 51,
    "label": "has",
    "to": 31
  }, {
    "from": 51,
    "label": "has",
    "to": 11
  }, {
    "from": 42,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 34
  }, {
    "from": 52,
    "label": "has",
    "to": 35
  }, {
    "from": 52,
    "label": "has",
    "to": 36
  }, {
    "from": 42,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 39
  }, {
    "from": 53,
    "label": "has",
    "to": 9
  }, {
    "from": 53,
    "label": "has",
    "to": 35
  }, {
    "from": 53,
    "label": "has",
    "to": 40
  }, {
    "from": 42,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "calls",
    "to": 60
  }, {
    "from": 55,
    "label": "calls",
    "to": 60
  }, {
    "from": 55,
    "label": "calls",
    "to": 60
  }, {
    "from": 55,
    "label": "calls",
    "to": 60
  }, {
    "from": 55,
    "label": "calls",
    "to": 60
  }, {
    "from": 55,
    "label": "calls",
    "to": 60
  }, {
    "from": 55,
    "label": "calls",
    "to": 60
  }, {
    "from": 55,
    "label": "calls",
    "to": 60
  }, {
    "from": 55,
    "label": "calls",
    "to": 59
  }, {
    "from": 55,
    "label": "calls",
    "to": 59
  }, {
    "from": 55,
    "label": "calls",
    "to": 61
  }, {
    "from": 55,
    "label": "calls",
    "to": 61
  }, {
    "from": 55,
    "label": "calls",
    "to": 61
  }, {
    "from": 55,
    "label": "calls",
    "to": 61
  }, {
    "from": 55,
    "label": "calls",
    "to": 61
  }, {
    "from": 55,
    "label": "calls",
    "to": 61
  }, {
    "from": 55,
    "label": "calls",
    "to": 61
  }, {
    "from": 55,
    "label": "calls",
    "to": 61
  }, {
    "from": 55,
    "label": "calls",
    "to": 61
  }, {
    "from": 55,
    "label": "calls",
    "to": 61
  }, {
    "from": 55,
    "label": "calls",
    "to": 57
  }, {
    "from": 55,
    "label": "calls",
    "to": 62
  }, {
    "from": 55,
    "label": "calls",
    "to": 62
  }, {
    "from": 55,
    "label": "calls",
    "to": 62
  }, {
    "from": 55,
    "label": "calls",
    "to": 62
  }, {
    "from": 55,
    "label": "calls",
    "to": 62
  }, {
    "from": 55,
    "label": "calls",
    "to": 62
  }, {
    "from": 55,
    "label": "calls",
    "to": 62
  }, {
    "from": 55,
    "label": "calls",
    "to": 62
  }, {
    "from": 55,
    "label": "calls",
    "to": 63
  }, {
    "from": 55,
    "label": "calls",
    "to": 58
  }, {
    "from": 55,
    "label": "calls",
    "to": 56
  }, {
    "from": 55,
    "label": "calls",
    "to": 56
  }, {
    "from": 55,
    "label": "calls",
    "to": 56
  }, {
    "from": 55,
    "label": "calls",
    "to": 56
  }, {
    "from": 55,
    "label": "calls",
    "to": 56
  }, {
    "from": 55,
    "label": "calls",
    "to": 56
  }, {
    "from": 55,
    "label": "calls",
    "to": 56
  }, {
    "from": 55,
    "label": "calls",
    "to": 56
  }, {
    "from": 1,
    "label": "contains",
    "to": 55
  }, {
    "from": 55,
    "label": "declares",
    "to": 2
  }, {
    "from": 55,
    "label": "declares",
    "to": 7
  }, {
    "from": 55,
    "label": "declares",
    "to": 13
  }, {
    "from": 55,
    "label": "declares",
    "to": 17
  }, {
    "from": 55,
    "label": "declares",
    "to": 21
  }, {
    "from": 55,
    "label": "declares",
    "to": 25
  }, {
    "from": 55,
    "label": "declares",
    "to": 29
  }, {
    "from": 55,
    "label": "declares",
    "to": 33
  }, {
    "from": 55,
    "label": "declares",
    "to": 38
  }, {
    "from": 55,
    "label": "declares",
    "to": 42
  }, {
    "from": 1,
    "label": "contains",
    "to": 64
  }, {
    "from": 1,
    "label": "contains",
    "to": 65
  }, {
    "from": 45,
    "label": "hasArgument",
    "to": 2
  }, {
    "from": 46,
    "label": "hasArgument",
    "to": 7
  }, {
    "from": 47,
    "label": "hasArgument",
    "to": 13
  }, {
    "from": 48,
    "label": "hasArgument",
    "to": 17
  }, {
    "from": 49,
    "label": "hasArgument",
    "to": 21
  }, {
    "from": 50,
    "label": "hasArgument",
    "to": 25
  }, {
    "from": 51,
    "label": "hasArgument",
    "to": 29
  }, {
    "from": 52,
    "label": "hasArgument",
    "to": 33
  }, {
    "from": 53,
    "label": "hasArgument",
    "to": 38
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "configuration_loader_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "function()\r\n    testConfig = {\r\n      _all = {\r\n        other = 'stuff',\r\n      },\r\n      default = {\r\n        output = 'utfTerminal'\r\n      },\r\n      windows = {\r\n        output = 'plainTerminal'\r\n      }\r\n    }\r\n\r\n    cliArgs = { }\r\n    defaults = { }\r\n  end",
    "type": "function"
  }, {
    "id": 3,
    "text": "testConfig = {\r\n      _all = {\r\n        other = 'stuff',\r\n      },\r\n      default = {\r\n        output = 'utfTerminal'\r\n      },\r\n      windows = {\r\n        output = 'plainTerminal'\r\n      }\r\n    }",
    "type": "statement:assign"
  }, {
    "id": 4,
    "text": "cliArgs = { }",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "defaults = { }",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "function()\r\n    local testConfig = { }\r\n    local config, err = configLoader(testConfig, cliArgs)\r\n\r\n    assert.are.same({}, config)\r\n    assert.are.equal(nil, err)\r\n  end",
    "type": "function"
  }, {
    "id": 8,
    "text": "local testConfig = { }",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "local config, err = configLoader(testConfig, cliArgs)",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "assert.are.same({}, config)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "assert.are.equal(nil, err)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function()\r\n    local config, err = configLoader(testConfig, cliArgs)\r\n\r\n    assert.are.same(testConfig.default.output, config.output)\r\n    assert.are.same(testConfig._all.other, config.other)\r\n    assert.are.equal(nil, err)\r\n  end",
    "type": "function"
  }, {
    "id": 14,
    "text": "assert.are.same(testConfig.default.output, config.output)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "assert.are.same(testConfig._all.other, config.other)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function()\r\n    cliArgs.run = 'windows'\r\n    local config, err = configLoader(testConfig, cliArgs)\r\n\r\n    assert.are.same(testConfig.windows.output, config.output)\r\n    assert.are.same(testConfig._all.other, config.other)\r\n    assert.are.equal(nil, err)\r\n  end",
    "type": "function"
  }, {
    "id": 18,
    "text": "cliArgs.run = 'windows'",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "assert.are.same(testConfig.windows.output, config.output)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function()\r\n    defaults = { output = 'TAP' }\r\n    cliArgs.run = 'windows'\r\n    local config, err = configLoader(testConfig, cliArgs, defaults)\r\n\r\n    assert.are.same(testConfig.windows.output, config.output)\r\n    assert.are.same(testConfig._all.other, config.other)\r\n    assert.are.equal(nil, err)\r\n  end",
    "type": "function"
  }, {
    "id": 22,
    "text": "defaults = { output = 'TAP' }",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "local config, err = configLoader(testConfig, cliArgs, defaults)",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function()\r\n    cliArgs = { output = 'TAP' }\r\n    local config, err = configLoader(testConfig, cliArgs, defaults)\r\n\r\n    assert.are.same(cliArgs.output, config.output)\r\n    assert.are.same(testConfig._all.other, config.other)\r\n    assert.are.equal(nil, err)\r\n  end",
    "type": "function"
  }, {
    "id": 26,
    "text": "cliArgs = { output = 'TAP' }",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "assert.are.same(cliArgs.output, config.output)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function()\r\n    defaults = { output = 'TAP' }\r\n    local config, err = configLoader({}, {}, defaults)\r\n\r\n    assert.are.same(defaults, config)\r\n    assert.are.equal(nil, err)\r\n  end",
    "type": "function"
  }, {
    "id": 30,
    "text": "local config, err = configLoader({}, {}, defaults)",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "assert.are.same(defaults, config)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function()\r\n    local config, err = configLoader('invalid', cliArgs)\r\n    assert.is_nil(config)\r\n    assert.are.equal('.busted file does not return a table.', err)\r\n  end",
    "type": "function"
  }, {
    "id": 34,
    "text": "local config, err = configLoader('invalid', cliArgs)",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "assert.is_nil(config)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "assert.are.equal('.busted file does not return a table.', err)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function()\r\n    cliArgs.run = 'invalid'\r\n    local config, err = configLoader(testConfig, cliArgs)\r\n    assert.is_nil(config)\r\n    assert.are.equal('Task `invalid` not found, or not a table.', err)\r\n  end",
    "type": "function"
  }, {
    "id": 39,
    "text": "cliArgs.run = 'invalid'",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "assert.are.equal('Task `invalid` not found, or not a table.', err)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function()\r\n  local configLoader = require 'busted.modules.configuration_loader'()\r\n  local testConfig, cliArgs, defaults\r\n\r\n  before_each(function()\r\n    testConfig = {\r\n      _all = {\r\n        other = 'stuff',\r\n      },\r\n      default = {\r\n        output = 'utfTerminal'\r\n      },\r\n      windows = {\r\n        output = 'plainTerminal'\r\n      }\r\n    }\r\n\r\n    cliArgs = { }\r\n    defaults = { }\r\n  end)\r\n\r\n  it('returns a valid config with no config file', function()\r\n    local testConfig = { }\r\n    local config, err = configLoader(testConfig, cliArgs)\r\n\r\n    assert.are.same({}, config)\r\n    assert.are.equal(nil, err)\r\n  end)\r\n\r\n  it('returns a valid config with default config', function()\r\n    local config, err = configLoader(testConfig, cliArgs)\r\n\r\n    assert.are.same(testConfig.default.output, config.output)\r\n    assert.are.same(testConfig._all.other, config.other)\r\n    assert.are.equal(nil, err)\r\n  end)\r\n\r\n  it('returns a valid config with specified config', function()\r\n    cliArgs.run = 'windows'\r\n    local config, err = configLoader(testConfig, cliArgs)\r\n\r\n    assert.are.same(testConfig.windows.output, config.output)\r\n    assert.are.same(testConfig._all.other, config.other)\r\n    assert.are.equal(nil, err)\r\n  end)\r\n\r\n  it('returns a valid config with specified config and defaults specified', function()\r\n    defaults = { output = 'TAP' }\r\n    cliArgs.run = 'windows'\r\n    local config, err = configLoader(testConfig, cliArgs, defaults)\r\n\r\n    assert.are.same(testConfig.windows.output, config.output)\r\n    assert.are.same(testConfig._all.other, config.other)\r\n    assert.are.equal(nil, err)\r\n  end)\r\n\r\n  it('returns a valid config with cliArgs and defaults specified', function()\r\n    cliArgs = { output = 'TAP' }\r\n    local config, err = configLoader(testConfig, cliArgs, defaults)\r\n\r\n    assert.are.same(cliArgs.output, config.output)\r\n    assert.are.same(testConfig._all.other, config.other)\r\n    assert.are.equal(nil, err)\r\n  end)\r\n\r\n  it('returns a valid config with defaults if no configs present', function()\r\n    defaults = { output = 'TAP' }\r\n    local config, err = configLoader({}, {}, defaults)\r\n\r\n    assert.are.same(defaults, config)\r\n    assert.are.equal(nil, err)\r\n  end)\r\n\r\n  it('returns an error with an invalid config', function()\r\n    local config, err = configLoader('invalid', cliArgs)\r\n    assert.is_nil(config)\r\n    assert.are.equal('.busted file does not return a table.', err)\r\n  end)\r\n\r\n  it('returns an error with an invalid run', function()\r\n    cliArgs.run = 'invalid'\r\n    local config, err = configLoader(testConfig, cliArgs)\r\n    assert.is_nil(config)\r\n    assert.are.equal('Task `invalid` not found, or not a table.', err)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "local configLoader = require 'busted.modules.configuration_loader'()",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "local testConfig, cliArgs, defaults",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "before_each(function()\r\n    testConfig = {\r\n      _all = {\r\n        other = 'stuff',\r\n      },\r\n      default = {\r\n        output = 'utfTerminal'\r\n      },\r\n      windows = {\r\n        output = 'plainTerminal'\r\n      }\r\n    }\r\n\r\n    cliArgs = { }\r\n    defaults = { }\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "it('returns a valid config with no config file', function()\r\n    local testConfig = { }\r\n    local config, err = configLoader(testConfig, cliArgs)\r\n\r\n    assert.are.same({}, config)\r\n    assert.are.equal(nil, err)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "it('returns a valid config with default config', function()\r\n    local config, err = configLoader(testConfig, cliArgs)\r\n\r\n    assert.are.same(testConfig.default.output, config.output)\r\n    assert.are.same(testConfig._all.other, config.other)\r\n    assert.are.equal(nil, err)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "it('returns a valid config with specified config', function()\r\n    cliArgs.run = 'windows'\r\n    local config, err = configLoader(testConfig, cliArgs)\r\n\r\n    assert.are.same(testConfig.windows.output, config.output)\r\n    assert.are.same(testConfig._all.other, config.other)\r\n    assert.are.equal(nil, err)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "it('returns a valid config with specified config and defaults specified', function()\r\n    defaults = { output = 'TAP' }\r\n    cliArgs.run = 'windows'\r\n    local config, err = configLoader(testConfig, cliArgs, defaults)\r\n\r\n    assert.are.same(testConfig.windows.output, config.output)\r\n    assert.are.same(testConfig._all.other, config.other)\r\n    assert.are.equal(nil, err)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "it('returns a valid config with cliArgs and defaults specified', function()\r\n    cliArgs = { output = 'TAP' }\r\n    local config, err = configLoader(testConfig, cliArgs, defaults)\r\n\r\n    assert.are.same(cliArgs.output, config.output)\r\n    assert.are.same(testConfig._all.other, config.other)\r\n    assert.are.equal(nil, err)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "it('returns a valid config with defaults if no configs present', function()\r\n    defaults = { output = 'TAP' }\r\n    local config, err = configLoader({}, {}, defaults)\r\n\r\n    assert.are.same(defaults, config)\r\n    assert.are.equal(nil, err)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "it('returns an error with an invalid config', function()\r\n    local config, err = configLoader('invalid', cliArgs)\r\n    assert.is_nil(config)\r\n    assert.are.equal('.busted file does not return a table.', err)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "it('returns an error with an invalid run', function()\r\n    cliArgs.run = 'invalid'\r\n    local config, err = configLoader(testConfig, cliArgs)\r\n    assert.is_nil(config)\r\n    assert.are.equal('Task `invalid` not found, or not a table.', err)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "",
    "type": "function container"
  }, {
    "id": 56,
    "text": "it",
    "type": "global function"
  }, {
    "id": 57,
    "text": "before_each",
    "type": "global function"
  }, {
    "id": 58,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 59,
    "text": "is_nil",
    "type": "global function"
  }, {
    "id": 60,
    "text": "assert.are.equal",
    "type": "global function"
  }, {
    "id": 61,
    "text": "assert.are.same",
    "type": "global function"
  }, {
    "id": 62,
    "text": "configLoader",
    "type": "global function"
  }, {
    "id": 63,
    "text": "require",
    "type": "global function"
  }, {
    "id": 64,
    "text": "",
    "type": "variable container"
  }, {
    "id": 65,
    "text": "",
    "type": "require container"
  } ]
}