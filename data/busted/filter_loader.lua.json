{
  "_filename": "filter_loader.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/busted/busted/modules/filter_loader.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 9
  }, {
    "from": 12,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 9
  }, {
    "from": 15,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 9
  }, {
    "from": 19,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 9
  }, {
    "from": 22,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 26,
    "label": "has",
    "to": 31
  }, {
    "from": 25,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 33
  }, {
    "from": 2,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 9
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 2,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 9
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 2,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 47,
    "label": "has",
    "to": 51
  }, {
    "from": 47,
    "label": "has",
    "to": 52
  }, {
    "from": 47,
    "label": "has",
    "to": 53
  }, {
    "from": 47,
    "label": "has",
    "to": 54
  }, {
    "from": 47,
    "label": "has",
    "to": 55
  }, {
    "from": 47,
    "label": "has",
    "to": 56
  }, {
    "from": 47,
    "label": "has",
    "to": 57
  }, {
    "from": 47,
    "label": "has",
    "to": 58
  }, {
    "from": 47,
    "label": "has",
    "to": 59
  }, {
    "from": 2,
    "label": "has",
    "to": 60
  }, {
    "from": 2,
    "label": "has",
    "to": 61
  }, {
    "from": 2,
    "label": "has",
    "to": 62
  }, {
    "from": 2,
    "label": "has",
    "to": 63
  }, {
    "from": 2,
    "label": "has",
    "to": 64
  }, {
    "from": 2,
    "label": "has",
    "to": 65
  }, {
    "from": 2,
    "label": "has",
    "to": 66
  }, {
    "from": 2,
    "label": "has",
    "to": 67
  }, {
    "from": 2,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 4
  }, {
    "from": 69,
    "label": "has",
    "to": 5
  }, {
    "from": 69,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 69,
    "label": "has",
    "to": 9
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 11
  }, {
    "from": 71,
    "label": "has",
    "to": 9
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 73,
    "label": "has",
    "to": 9
  }, {
    "from": 73,
    "label": "has",
    "to": 9
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 75,
    "label": "has",
    "to": 16
  }, {
    "from": 75,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 75,
    "label": "has",
    "to": 9
  }, {
    "from": 75,
    "label": "has",
    "to": 9
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 77,
    "label": "has",
    "to": 9
  }, {
    "from": 77,
    "label": "has",
    "to": 9
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 79,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 79,
    "label": "has",
    "to": 9
  }, {
    "from": 79,
    "label": "has",
    "to": 9
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 26,
    "label": "has",
    "to": 31
  }, {
    "from": 81,
    "label": "has",
    "to": 9
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 83,
    "label": "has",
    "to": 9
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 86,
    "label": "has",
    "to": 35
  }, {
    "from": 86,
    "label": "has",
    "to": 9
  }, {
    "from": 86,
    "label": "has",
    "to": 36
  }, {
    "from": 86,
    "label": "has",
    "to": 9
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 9
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 90,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 9
  }, {
    "from": 93,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 9
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 95,
    "label": "has",
    "to": 2
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 9
  }, {
    "from": 12,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 9
  }, {
    "from": 15,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 9
  }, {
    "from": 19,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 9
  }, {
    "from": 22,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 26,
    "label": "has",
    "to": 31
  }, {
    "from": 25,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 33
  }, {
    "from": 2,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 9
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 2,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 9
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 2,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 47,
    "label": "has",
    "to": 51
  }, {
    "from": 47,
    "label": "has",
    "to": 52
  }, {
    "from": 47,
    "label": "has",
    "to": 53
  }, {
    "from": 47,
    "label": "has",
    "to": 54
  }, {
    "from": 47,
    "label": "has",
    "to": 55
  }, {
    "from": 47,
    "label": "has",
    "to": 56
  }, {
    "from": 47,
    "label": "has",
    "to": 57
  }, {
    "from": 47,
    "label": "has",
    "to": 58
  }, {
    "from": 47,
    "label": "has",
    "to": 59
  }, {
    "from": 2,
    "label": "has",
    "to": 60
  }, {
    "from": 2,
    "label": "has",
    "to": 61
  }, {
    "from": 2,
    "label": "has",
    "to": 62
  }, {
    "from": 2,
    "label": "has",
    "to": 63
  }, {
    "from": 2,
    "label": "has",
    "to": 64
  }, {
    "from": 2,
    "label": "has",
    "to": 65
  }, {
    "from": 2,
    "label": "has",
    "to": 66
  }, {
    "from": 2,
    "label": "has",
    "to": 67
  }, {
    "from": 95,
    "label": "has",
    "to": 9
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 2,
    "label": "calls",
    "to": 105
  }, {
    "from": 2,
    "label": "calls",
    "to": 104
  }, {
    "from": 2,
    "label": "calls",
    "to": 101
  }, {
    "from": 2,
    "label": "calls",
    "to": 101
  }, {
    "from": 2,
    "label": "calls",
    "to": 103
  }, {
    "from": 2,
    "label": "calls",
    "to": 90
  }, {
    "from": 2,
    "label": "calls",
    "to": 90
  }, {
    "from": 2,
    "label": "calls",
    "to": 90
  }, {
    "from": 2,
    "label": "calls",
    "to": 90
  }, {
    "from": 2,
    "label": "calls",
    "to": 90
  }, {
    "from": 2,
    "label": "calls",
    "to": 90
  }, {
    "from": 2,
    "label": "calls",
    "to": 90
  }, {
    "from": 2,
    "label": "calls",
    "to": 90
  }, {
    "from": 2,
    "label": "calls",
    "to": 98
  }, {
    "from": 2,
    "label": "calls",
    "to": 69
  }, {
    "from": 2,
    "label": "calls",
    "to": 69
  }, {
    "from": 2,
    "label": "calls",
    "to": 69
  }, {
    "from": 2,
    "label": "calls",
    "to": 69
  }, {
    "from": 2,
    "label": "calls",
    "to": 106
  }, {
    "from": 2,
    "label": "calls",
    "to": 106
  }, {
    "from": 2,
    "label": "calls",
    "to": 106
  }, {
    "from": 2,
    "label": "calls",
    "to": 106
  }, {
    "from": 2,
    "label": "calls",
    "to": 99
  }, {
    "from": 2,
    "label": "calls",
    "to": 99
  }, {
    "from": 2,
    "label": "calls",
    "to": 99
  }, {
    "from": 2,
    "label": "calls",
    "to": 99
  }, {
    "from": 2,
    "label": "calls",
    "to": 99
  }, {
    "from": 2,
    "label": "calls",
    "to": 99
  }, {
    "from": 2,
    "label": "calls",
    "to": 99
  }, {
    "from": 2,
    "label": "calls",
    "to": 99
  }, {
    "from": 2,
    "label": "calls",
    "to": 99
  }, {
    "from": 2,
    "label": "calls",
    "to": 99
  }, {
    "from": 2,
    "label": "calls",
    "to": 107
  }, {
    "from": 2,
    "label": "calls",
    "to": 71
  }, {
    "from": 2,
    "label": "calls",
    "to": 71
  }, {
    "from": 2,
    "label": "calls",
    "to": 100
  }, {
    "from": 2,
    "label": "calls",
    "to": 93
  }, {
    "from": 2,
    "label": "calls",
    "to": 93
  }, {
    "from": 2,
    "label": "calls",
    "to": 93
  }, {
    "from": 2,
    "label": "calls",
    "to": 93
  }, {
    "from": 2,
    "label": "calls",
    "to": 102
  }, {
    "from": 1,
    "label": "contains",
    "to": 97
  }, {
    "from": 97,
    "label": "declares",
    "to": 2
  }, {
    "from": 97,
    "label": "declares",
    "to": 69
  }, {
    "from": 97,
    "label": "declares",
    "to": 71
  }, {
    "from": 97,
    "label": "declares",
    "to": 73
  }, {
    "from": 97,
    "label": "declares",
    "to": 75
  }, {
    "from": 97,
    "label": "declares",
    "to": 77
  }, {
    "from": 97,
    "label": "declares",
    "to": 79
  }, {
    "from": 97,
    "label": "declares",
    "to": 81
  }, {
    "from": 97,
    "label": "declares",
    "to": 83
  }, {
    "from": 97,
    "label": "declares",
    "to": 85
  }, {
    "from": 97,
    "label": "declares",
    "to": 86
  }, {
    "from": 97,
    "label": "declares",
    "to": 88
  }, {
    "from": 97,
    "label": "declares",
    "to": 90
  }, {
    "from": 97,
    "label": "declares",
    "to": 92
  }, {
    "from": 97,
    "label": "declares",
    "to": 93
  }, {
    "from": 97,
    "label": "declares",
    "to": 95
  }, {
    "from": 1,
    "label": "contains",
    "to": 108
  }, {
    "from": 1,
    "label": "contains",
    "to": 109
  }, {
    "from": 1,
    "label": "provides",
    "to": 110
  }, {
    "from": 110,
    "label": "provides",
    "to": 111
  }, {
    "from": 112,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "filter_loader",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function filter(busted, options)\r\n    local getFullName = function(name)\r\n      local parent = busted.context.get()\r\n      local names = { name }\r\n\r\n      while parent and (parent.name or parent.descriptor) and\r\n            parent.descriptor ~= 'file' do\r\n        table.insert(names, 1, parent.name or parent.descriptor)\r\n        parent = busted.context.parent(parent)\r\n      end\r\n\r\n      return table.concat(names, ' ')\r\n    end\r\n\r\n    local hasTag = function(name, tag)\r\n      local found = name:find('#' .. tag)\r\n      return (found ~= nil)\r\n    end\r\n\r\n    local filterExcludeTags = function(name)\r\n      for i, tag in pairs(options.excludeTags) do\r\n        if hasTag(name, tag) then\r\n          return nil, false\r\n        end\r\n      end\r\n      return nil, true\r\n    end\r\n\r\n    local filterTags = function(name)\r\n      local fullname = getFullName(name)\r\n      for i, tag in pairs(options.tags) do\r\n        if hasTag(fullname, tag) then\r\n          return nil, true\r\n        end\r\n      end\r\n      return nil, (#options.tags == 0)\r\n    end\r\n\r\n    local filterOutNames = function(name)\r\n      for _, filter in pairs(options.filterOut) do\r\n        if getFullName(name):find(filter) ~= nil then\r\n          return nil, false\r\n        end\r\n      end\r\n      return nil, true\r\n    end\r\n\r\n    local filterNames = function(name)\r\n      for _, filter in pairs(options.filter) do\r\n        if getFullName(name):find(filter) ~= nil then\r\n          return nil, true\r\n        end\r\n      end\r\n      return nil, (#options.filter == 0)\r\n    end\r\n\r\n    local printTestName = function(element, parent, status)\r\n      if not (options.suppressPending and status == 'pending') then\r\n        local fullname = getFullName()\r\n        local trace = element.trace\r\n        if trace and trace.what == 'Lua' then\r\n          fullname = trace.short_src .. ':' .. trace.currentline .. ': ' .. fullname\r\n        end\r\n        print(fullname)\r\n      end\r\n      return nil, false\r\n    end\r\n\r\n    local ignoreAll = function()\r\n      return nil, false\r\n    end\r\n\r\n    local noop = function() end\r\n    local stubOut = function(descriptor, name, fn, ...)\r\n      if fn == noop then\r\n        return nil, true\r\n      end\r\n      busted.publish({ 'register', descriptor }, name, noop, ...)\r\n      return nil, false\r\n    end\r\n\r\n    local skipOnError = function()\r\n      return nil, not busted.skipAll\r\n    end\r\n\r\n    local applyFilter = function(descriptors, name, fn)\r\n      if options[name] and options[name] ~= '' then\r\n        for _, descriptor in ipairs(descriptors) do\r\n          busted.subscribe({ 'register', descriptor }, fn, { priority = 1 })\r\n        end\r\n      end\r\n    end\r\n\r\n    local applyDescFilter = function(descriptors, name, fn)\r\n      if options[name] and options[name] ~= '' then\r\n        for _, descriptor in ipairs(descriptors) do\r\n          local f = function(...) return fn(descriptor, ...) end\r\n          busted.subscribe({ 'register', descriptor }, f, { priority = 1 })\r\n        end\r\n      end\r\n    end\r\n\r\n    if options.list then\r\n      busted.subscribe({ 'suite', 'start' }, ignoreAll, { priority = 1 })\r\n      busted.subscribe({ 'suite', 'end' }, ignoreAll, { priority = 1 })\r\n      busted.subscribe({ 'file', 'start' }, ignoreAll, { priority = 1 })\r\n      busted.subscribe({ 'file', 'end' }, ignoreAll, { priority = 1 })\r\n      busted.subscribe({ 'describe', 'start' }, ignoreAll, { priority = 1 })\r\n      busted.subscribe({ 'describe', 'end' }, ignoreAll, { priority = 1 })\r\n      busted.subscribe({ 'test', 'start' }, ignoreAll, { priority = 1 })\r\n      busted.subscribe({ 'test', 'end' }, printTestName, { priority = 1 })\r\n      applyDescFilter({ 'setup', 'teardown', 'before_each', 'after_each' }, 'list', stubOut)\r\n      applyDescFilter({ 'lazy_setup', 'lazy_teardown' }, 'list', stubOut)\r\n      applyDescFilter({ 'strict_setup', 'strict_teardown' }, 'list', stubOut)\r\n      applyDescFilter({ 'it', 'pending' }, 'list', stubOut)\r\n    end\r\n\r\n    applyFilter({ 'lazy_setup', 'lazy_teardown' }, 'nokeepgoing', skipOnError)\r\n    applyFilter({ 'strict_setup', 'strict_teardown' }, 'nokeepgoing', skipOnError)\r\n    applyFilter({ 'setup', 'teardown', 'before_each', 'after_each' }, 'nokeepgoing', skipOnError)\r\n    applyFilter({ 'file', 'describe', 'it', 'pending' }, 'nokeepgoing', skipOnError)\r\n\r\n    -- The following filters are applied in reverse order\r\n    applyFilter({ 'it', 'pending' }            , 'filter'     , filterNames      )\r\n    applyFilter({ 'describe', 'it', 'pending' }, 'filterOut'  , filterOutNames   )\r\n    applyFilter({ 'it', 'pending' }            , 'tags'       , filterTags       )\r\n    applyFilter({ 'describe', 'it', 'pending' }, 'excludeTags', filterExcludeTags)\r\n  end",
    "type": "function"
  }, {
    "id": 3,
    "text": "local getFullName = function(name)\r\n      local parent = busted.context.get()\r\n      local names = { name }\r\n\r\n      while parent and (parent.name or parent.descriptor) and\r\n            parent.descriptor ~= 'file' do\r\n        table.insert(names, 1, parent.name or parent.descriptor)\r\n        parent = busted.context.parent(parent)\r\n      end\r\n\r\n      return table.concat(names, ' ')\r\n    end",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local parent = busted.context.get()",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local names = { name }",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "while parent and (parent.name or parent.descriptor) and\r\n            parent.descriptor ~= 'file' do\r\n        table.insert(names, 1, parent.name or parent.descriptor)\r\n        parent = busted.context.parent(parent)\r\n      end",
    "type": "statement:while"
  }, {
    "id": 7,
    "text": "table.insert(names, 1, parent.name or parent.descriptor)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "parent = busted.context.parent(parent)",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 10,
    "text": "local hasTag = function(name, tag)\r\n      local found = name:find('#' .. tag)\r\n      return (found ~= nil)\r\n    end",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "local found = name:find('#' .. tag)",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "local filterExcludeTags = function(name)\r\n      for i, tag in pairs(options.excludeTags) do\r\n        if hasTag(name, tag) then\r\n          return nil, false\r\n        end\r\n      end\r\n      return nil, true\r\n    end",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "for i, tag in pairs(options.excludeTags) do\r\n        if hasTag(name, tag) then\r\n          return nil, false\r\n        end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 14,
    "text": "if hasTag(name, tag) then\r\n          return nil, false\r\n        end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "local filterTags = function(name)\r\n      local fullname = getFullName(name)\r\n      for i, tag in pairs(options.tags) do\r\n        if hasTag(fullname, tag) then\r\n          return nil, true\r\n        end\r\n      end\r\n      return nil, (#options.tags == 0)\r\n    end",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "local fullname = getFullName(name)",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "for i, tag in pairs(options.tags) do\r\n        if hasTag(fullname, tag) then\r\n          return nil, true\r\n        end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 18,
    "text": "if hasTag(fullname, tag) then\r\n          return nil, true\r\n        end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "local filterOutNames = function(name)\r\n      for _, filter in pairs(options.filterOut) do\r\n        if getFullName(name):find(filter) ~= nil then\r\n          return nil, false\r\n        end\r\n      end\r\n      return nil, true\r\n    end",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "for _, filter in pairs(options.filterOut) do\r\n        if getFullName(name):find(filter) ~= nil then\r\n          return nil, false\r\n        end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 21,
    "text": "if getFullName(name):find(filter) ~= nil then\r\n          return nil, false\r\n        end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "local filterNames = function(name)\r\n      for _, filter in pairs(options.filter) do\r\n        if getFullName(name):find(filter) ~= nil then\r\n          return nil, true\r\n        end\r\n      end\r\n      return nil, (#options.filter == 0)\r\n    end",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "for _, filter in pairs(options.filter) do\r\n        if getFullName(name):find(filter) ~= nil then\r\n          return nil, true\r\n        end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 24,
    "text": "if getFullName(name):find(filter) ~= nil then\r\n          return nil, true\r\n        end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "local printTestName = function(element, parent, status)\r\n      if not (options.suppressPending and status == 'pending') then\r\n        local fullname = getFullName()\r\n        local trace = element.trace\r\n        if trace and trace.what == 'Lua' then\r\n          fullname = trace.short_src .. ':' .. trace.currentline .. ': ' .. fullname\r\n        end\r\n        print(fullname)\r\n      end\r\n      return nil, false\r\n    end",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "if not (options.suppressPending and status == 'pending') then\r\n        local fullname = getFullName()\r\n        local trace = element.trace\r\n        if trace and trace.what == 'Lua' then\r\n          fullname = trace.short_src .. ':' .. trace.currentline .. ': ' .. fullname\r\n        end\r\n        print(fullname)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "local fullname = getFullName()",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "local trace = element.trace",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "if trace and trace.what == 'Lua' then\r\n          fullname = trace.short_src .. ':' .. trace.currentline .. ': ' .. fullname\r\n        end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "fullname = trace.short_src .. ':' .. trace.currentline .. ': ' .. fullname",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "print(fullname)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "local ignoreAll = function()\r\n      return nil, false\r\n    end",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "local noop = function() end",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "local stubOut = function(descriptor, name, fn, ...)\r\n      if fn == noop then\r\n        return nil, true\r\n      end\r\n      busted.publish({ 'register', descriptor }, name, noop, ...)\r\n      return nil, false\r\n    end",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "if fn == noop then\r\n        return nil, true\r\n      end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "busted.publish({ 'register', descriptor }, name, noop, ...)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "local skipOnError = function()\r\n      return nil, not busted.skipAll\r\n    end",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "local applyFilter = function(descriptors, name, fn)\r\n      if options[name] and options[name] ~= '' then\r\n        for _, descriptor in ipairs(descriptors) do\r\n          busted.subscribe({ 'register', descriptor }, fn, { priority = 1 })\r\n        end\r\n      end\r\n    end",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "if options[name] and options[name] ~= '' then\r\n        for _, descriptor in ipairs(descriptors) do\r\n          busted.subscribe({ 'register', descriptor }, fn, { priority = 1 })\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "for _, descriptor in ipairs(descriptors) do\r\n          busted.subscribe({ 'register', descriptor }, fn, { priority = 1 })\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 41,
    "text": "busted.subscribe({ 'register', descriptor }, fn, { priority = 1 })",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "local applyDescFilter = function(descriptors, name, fn)\r\n      if options[name] and options[name] ~= '' then\r\n        for _, descriptor in ipairs(descriptors) do\r\n          local f = function(...) return fn(descriptor, ...) end\r\n          busted.subscribe({ 'register', descriptor }, f, { priority = 1 })\r\n        end\r\n      end\r\n    end",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "if options[name] and options[name] ~= '' then\r\n        for _, descriptor in ipairs(descriptors) do\r\n          local f = function(...) return fn(descriptor, ...) end\r\n          busted.subscribe({ 'register', descriptor }, f, { priority = 1 })\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "for _, descriptor in ipairs(descriptors) do\r\n          local f = function(...) return fn(descriptor, ...) end\r\n          busted.subscribe({ 'register', descriptor }, f, { priority = 1 })\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 45,
    "text": "local f = function(...) return fn(descriptor, ...) end",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "busted.subscribe({ 'register', descriptor }, f, { priority = 1 })",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "if options.list then\r\n      busted.subscribe({ 'suite', 'start' }, ignoreAll, { priority = 1 })\r\n      busted.subscribe({ 'suite', 'end' }, ignoreAll, { priority = 1 })\r\n      busted.subscribe({ 'file', 'start' }, ignoreAll, { priority = 1 })\r\n      busted.subscribe({ 'file', 'end' }, ignoreAll, { priority = 1 })\r\n      busted.subscribe({ 'describe', 'start' }, ignoreAll, { priority = 1 })\r\n      busted.subscribe({ 'describe', 'end' }, ignoreAll, { priority = 1 })\r\n      busted.subscribe({ 'test', 'start' }, ignoreAll, { priority = 1 })\r\n      busted.subscribe({ 'test', 'end' }, printTestName, { priority = 1 })\r\n      applyDescFilter({ 'setup', 'teardown', 'before_each', 'after_each' }, 'list', stubOut)\r\n      applyDescFilter({ 'lazy_setup', 'lazy_teardown' }, 'list', stubOut)\r\n      applyDescFilter({ 'strict_setup', 'strict_teardown' }, 'list', stubOut)\r\n      applyDescFilter({ 'it', 'pending' }, 'list', stubOut)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "busted.subscribe({ 'suite', 'start' }, ignoreAll, { priority = 1 })",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "busted.subscribe({ 'suite', 'end' }, ignoreAll, { priority = 1 })",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "busted.subscribe({ 'file', 'start' }, ignoreAll, { priority = 1 })",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "busted.subscribe({ 'file', 'end' }, ignoreAll, { priority = 1 })",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "busted.subscribe({ 'describe', 'start' }, ignoreAll, { priority = 1 })",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "busted.subscribe({ 'describe', 'end' }, ignoreAll, { priority = 1 })",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "busted.subscribe({ 'test', 'start' }, ignoreAll, { priority = 1 })",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "busted.subscribe({ 'test', 'end' }, printTestName, { priority = 1 })",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "applyDescFilter({ 'setup', 'teardown', 'before_each', 'after_each' }, 'list', stubOut)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "applyDescFilter({ 'lazy_setup', 'lazy_teardown' }, 'list', stubOut)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "applyDescFilter({ 'strict_setup', 'strict_teardown' }, 'list', stubOut)",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "applyDescFilter({ 'it', 'pending' }, 'list', stubOut)",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "applyFilter({ 'lazy_setup', 'lazy_teardown' }, 'nokeepgoing', skipOnError)",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "applyFilter({ 'strict_setup', 'strict_teardown' }, 'nokeepgoing', skipOnError)",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "applyFilter({ 'setup', 'teardown', 'before_each', 'after_each' }, 'nokeepgoing', skipOnError)",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "applyFilter({ 'file', 'describe', 'it', 'pending' }, 'nokeepgoing', skipOnError)",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "applyFilter({ 'it', 'pending' }            , 'filter'     , filterNames      )",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "applyFilter({ 'describe', 'it', 'pending' }, 'filterOut'  , filterOutNames   )",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "applyFilter({ 'it', 'pending' }            , 'tags'       , filterTags       )",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "applyFilter({ 'describe', 'it', 'pending' }, 'excludeTags', filterExcludeTags)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function(name)\r\n      local parent = busted.context.get()\r\n      local names = { name }\r\n\r\n      while parent and (parent.name or parent.descriptor) and\r\n            parent.descriptor ~= 'file' do\r\n        table.insert(names, 1, parent.name or parent.descriptor)\r\n        parent = busted.context.parent(parent)\r\n      end\r\n\r\n      return table.concat(names, ' ')\r\n    end",
    "type": "function"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "function(name, tag)\r\n      local found = name:find('#' .. tag)\r\n      return (found ~= nil)\r\n    end",
    "type": "function"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "function(name)\r\n      for i, tag in pairs(options.excludeTags) do\r\n        if hasTag(name, tag) then\r\n          return nil, false\r\n        end\r\n      end\r\n      return nil, true\r\n    end",
    "type": "function"
  }, {
    "id": 74,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 75,
    "text": "function(name)\r\n      local fullname = getFullName(name)\r\n      for i, tag in pairs(options.tags) do\r\n        if hasTag(fullname, tag) then\r\n          return nil, true\r\n        end\r\n      end\r\n      return nil, (#options.tags == 0)\r\n    end",
    "type": "function"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "function(name)\r\n      for _, filter in pairs(options.filterOut) do\r\n        if getFullName(name):find(filter) ~= nil then\r\n          return nil, false\r\n        end\r\n      end\r\n      return nil, true\r\n    end",
    "type": "function"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "function(name)\r\n      for _, filter in pairs(options.filter) do\r\n        if getFullName(name):find(filter) ~= nil then\r\n          return nil, true\r\n        end\r\n      end\r\n      return nil, (#options.filter == 0)\r\n    end",
    "type": "function"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "function(element, parent, status)\r\n      if not (options.suppressPending and status == 'pending') then\r\n        local fullname = getFullName()\r\n        local trace = element.trace\r\n        if trace and trace.what == 'Lua' then\r\n          fullname = trace.short_src .. ':' .. trace.currentline .. ': ' .. fullname\r\n        end\r\n        print(fullname)\r\n      end\r\n      return nil, false\r\n    end",
    "type": "function"
  }, {
    "id": 82,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 83,
    "text": "function()\r\n      return nil, false\r\n    end",
    "type": "function"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 86,
    "text": "function(descriptor, name, fn, ...)\r\n      if fn == noop then\r\n        return nil, true\r\n      end\r\n      busted.publish({ 'register', descriptor }, name, noop, ...)\r\n      return nil, false\r\n    end",
    "type": "function"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "function()\r\n      return nil, not busted.skipAll\r\n    end",
    "type": "function"
  }, {
    "id": 89,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 90,
    "text": "function(descriptors, name, fn)\r\n      if options[name] and options[name] ~= '' then\r\n        for _, descriptor in ipairs(descriptors) do\r\n          busted.subscribe({ 'register', descriptor }, fn, { priority = 1 })\r\n        end\r\n      end\r\n    end",
    "type": "function"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "function(...) return fn(descriptor, ...) end",
    "type": "function"
  }, {
    "id": 93,
    "text": "function(descriptors, name, fn)\r\n      if options[name] and options[name] ~= '' then\r\n        for _, descriptor in ipairs(descriptors) do\r\n          local f = function(...) return fn(descriptor, ...) end\r\n          busted.subscribe({ 'register', descriptor }, f, { priority = 1 })\r\n        end\r\n      end\r\n    end",
    "type": "function"
  }, {
    "id": 94,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 95,
    "text": "function()\r\n  local function filter(busted, options)\r\n    local getFullName = function(name)\r\n      local parent = busted.context.get()\r\n      local names = { name }\r\n\r\n      while parent and (parent.name or parent.descriptor) and\r\n            parent.descriptor ~= 'file' do\r\n        table.insert(names, 1, parent.name or parent.descriptor)\r\n        parent = busted.context.parent(parent)\r\n      end\r\n\r\n      return table.concat(names, ' ')\r\n    end\r\n\r\n    local hasTag = function(name, tag)\r\n      local found = name:find('#' .. tag)\r\n      return (found ~= nil)\r\n    end\r\n\r\n    local filterExcludeTags = function(name)\r\n      for i, tag in pairs(options.excludeTags) do\r\n        if hasTag(name, tag) then\r\n          return nil, false\r\n        end\r\n      end\r\n      return nil, true\r\n    end\r\n\r\n    local filterTags = function(name)\r\n      local fullname = getFullName(name)\r\n      for i, tag in pairs(options.tags) do\r\n        if hasTag(fullname, tag) then\r\n          return nil, true\r\n        end\r\n      end\r\n      return nil, (#options.tags == 0)\r\n    end\r\n\r\n    local filterOutNames = function(name)\r\n      for _, filter in pairs(options.filterOut) do\r\n        if getFullName(name):find(filter) ~= nil then\r\n          return nil, false\r\n        end\r\n      end\r\n      return nil, true\r\n    end\r\n\r\n    local filterNames = function(name)\r\n      for _, filter in pairs(options.filter) do\r\n        if getFullName(name):find(filter) ~= nil then\r\n          return nil, true\r\n        end\r\n      end\r\n      return nil, (#options.filter == 0)\r\n    end\r\n\r\n    local printTestName = function(element, parent, status)\r\n      if not (options.suppressPending and status == 'pending') then\r\n        local fullname = getFullName()\r\n        local trace = element.trace\r\n        if trace and trace.what == 'Lua' then\r\n          fullname = trace.short_src .. ':' .. trace.currentline .. ': ' .. fullname\r\n        end\r\n        print(fullname)\r\n      end\r\n      return nil, false\r\n    end\r\n\r\n    local ignoreAll = function()\r\n      return nil, false\r\n    end\r\n\r\n    local noop = function() end\r\n    local stubOut = function(descriptor, name, fn, ...)\r\n      if fn == noop then\r\n        return nil, true\r\n      end\r\n      busted.publish({ 'register', descriptor }, name, noop, ...)\r\n      return nil, false\r\n    end\r\n\r\n    local skipOnError = function()\r\n      return nil, not busted.skipAll\r\n    end\r\n\r\n    local applyFilter = function(descriptors, name, fn)\r\n      if options[name] and options[name] ~= '' then\r\n        for _, descriptor in ipairs(descriptors) do\r\n          busted.subscribe({ 'register', descriptor }, fn, { priority = 1 })\r\n        end\r\n      end\r\n    end\r\n\r\n    local applyDescFilter = function(descriptors, name, fn)\r\n      if options[name] and options[name] ~= '' then\r\n        for _, descriptor in ipairs(descriptors) do\r\n          local f = function(...) return fn(descriptor, ...) end\r\n          busted.subscribe({ 'register', descriptor }, f, { priority = 1 })\r\n        end\r\n      end\r\n    end\r\n\r\n    if options.list then\r\n      busted.subscribe({ 'suite', 'start' }, ignoreAll, { priority = 1 })\r\n      busted.subscribe({ 'suite', 'end' }, ignoreAll, { priority = 1 })\r\n      busted.subscribe({ 'file', 'start' }, ignoreAll, { priority = 1 })\r\n      busted.subscribe({ 'file', 'end' }, ignoreAll, { priority = 1 })\r\n      busted.subscribe({ 'describe', 'start' }, ignoreAll, { priority = 1 })\r\n      busted.subscribe({ 'describe', 'end' }, ignoreAll, { priority = 1 })\r\n      busted.subscribe({ 'test', 'start' }, ignoreAll, { priority = 1 })\r\n      busted.subscribe({ 'test', 'end' }, printTestName, { priority = 1 })\r\n      applyDescFilter({ 'setup', 'teardown', 'before_each', 'after_each' }, 'list', stubOut)\r\n      applyDescFilter({ 'lazy_setup', 'lazy_teardown' }, 'list', stubOut)\r\n      applyDescFilter({ 'strict_setup', 'strict_teardown' }, 'list', stubOut)\r\n      applyDescFilter({ 'it', 'pending' }, 'list', stubOut)\r\n    end\r\n\r\n    applyFilter({ 'lazy_setup', 'lazy_teardown' }, 'nokeepgoing', skipOnError)\r\n    applyFilter({ 'strict_setup', 'strict_teardown' }, 'nokeepgoing', skipOnError)\r\n    applyFilter({ 'setup', 'teardown', 'before_each', 'after_each' }, 'nokeepgoing', skipOnError)\r\n    applyFilter({ 'file', 'describe', 'it', 'pending' }, 'nokeepgoing', skipOnError)\r\n\r\n    -- The following filters are applied in reverse order\r\n    applyFilter({ 'it', 'pending' }            , 'filter'     , filterNames      )\r\n    applyFilter({ 'describe', 'it', 'pending' }, 'filterOut'  , filterOutNames   )\r\n    applyFilter({ 'it', 'pending' }            , 'tags'       , filterTags       )\r\n    applyFilter({ 'describe', 'it', 'pending' }, 'excludeTags', filterExcludeTags)\r\n  end\r\n\r\n  return filter\r\nend",
    "type": "function"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "",
    "type": "function container"
  }, {
    "id": 98,
    "text": "publish",
    "type": "global function"
  }, {
    "id": 99,
    "text": "subscribe",
    "type": "global function"
  }, {
    "id": 100,
    "text": "fn",
    "type": "global function"
  }, {
    "id": 101,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 102,
    "text": "print",
    "type": "global function"
  }, {
    "id": 103,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 104,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 105,
    "text": "busted.context.get",
    "type": "global function"
  }, {
    "id": 106,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 107,
    "text": "busted.context.parent",
    "type": "global function"
  }, {
    "id": 108,
    "text": "",
    "type": "variable container"
  }, {
    "id": 109,
    "text": "",
    "type": "require container"
  }, {
    "id": 110,
    "text": "",
    "type": "interface container"
  }, {
    "id": 111,
    "text": "",
    "type": "interface"
  }, {
    "id": 112,
    "text": "",
    "type": "require local variable"
  } ]
}