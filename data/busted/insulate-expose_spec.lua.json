{
  "_filename": "insulate-expose_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/busted/spec/insulate-expose_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 12,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 9
  }, {
    "from": 21,
    "label": "has",
    "to": 10
  }, {
    "from": 18,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 13
  }, {
    "from": 22,
    "label": "has",
    "to": 14
  }, {
    "from": 22,
    "label": "has",
    "to": 15
  }, {
    "from": 22,
    "label": "has",
    "to": 16
  }, {
    "from": 18,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 28,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 25
  }, {
    "from": 35,
    "label": "has",
    "to": 26
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 29
  }, {
    "from": 36,
    "label": "has",
    "to": 30
  }, {
    "from": 36,
    "label": "has",
    "to": 31
  }, {
    "from": 36,
    "label": "has",
    "to": 32
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 19
  }, {
    "from": 39,
    "label": "has",
    "to": 20
  }, {
    "from": 39,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 9
  }, {
    "from": 21,
    "label": "has",
    "to": 10
  }, {
    "from": 39,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 13
  }, {
    "from": 22,
    "label": "has",
    "to": 14
  }, {
    "from": 22,
    "label": "has",
    "to": 15
  }, {
    "from": 22,
    "label": "has",
    "to": 16
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 25
  }, {
    "from": 35,
    "label": "has",
    "to": 26
  }, {
    "from": 40,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 29
  }, {
    "from": 36,
    "label": "has",
    "to": 30
  }, {
    "from": 36,
    "label": "has",
    "to": 31
  }, {
    "from": 36,
    "label": "has",
    "to": 32
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 46,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 13
  }, {
    "from": 50,
    "label": "has",
    "to": 14
  }, {
    "from": 50,
    "label": "has",
    "to": 15
  }, {
    "from": 50,
    "label": "has",
    "to": 16
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 19
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 43
  }, {
    "from": 55,
    "label": "has",
    "to": 44
  }, {
    "from": 52,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 47
  }, {
    "from": 56,
    "label": "has",
    "to": 48
  }, {
    "from": 52,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 13
  }, {
    "from": 57,
    "label": "has",
    "to": 14
  }, {
    "from": 57,
    "label": "has",
    "to": 15
  }, {
    "from": 57,
    "label": "has",
    "to": 16
  }, {
    "from": 52,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 19
  }, {
    "from": 60,
    "label": "has",
    "to": 53
  }, {
    "from": 60,
    "label": "has",
    "to": 54
  }, {
    "from": 60,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 43
  }, {
    "from": 55,
    "label": "has",
    "to": 44
  }, {
    "from": 60,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 47
  }, {
    "from": 56,
    "label": "has",
    "to": 48
  }, {
    "from": 60,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 13
  }, {
    "from": 57,
    "label": "has",
    "to": 14
  }, {
    "from": 57,
    "label": "has",
    "to": 15
  }, {
    "from": 57,
    "label": "has",
    "to": 16
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 43
  }, {
    "from": 62,
    "label": "has",
    "to": 44
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 47
  }, {
    "from": 64,
    "label": "has",
    "to": 48
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 13
  }, {
    "from": 66,
    "label": "has",
    "to": 14
  }, {
    "from": 66,
    "label": "has",
    "to": 15
  }, {
    "from": 66,
    "label": "has",
    "to": 16
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 43
  }, {
    "from": 69,
    "label": "has",
    "to": 44
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 47
  }, {
    "from": 70,
    "label": "has",
    "to": 48
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 13
  }, {
    "from": 71,
    "label": "has",
    "to": 14
  }, {
    "from": 71,
    "label": "has",
    "to": 15
  }, {
    "from": 71,
    "label": "has",
    "to": 16
  }, {
    "from": 68,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 19
  }, {
    "from": 60,
    "label": "has",
    "to": 53
  }, {
    "from": 60,
    "label": "has",
    "to": 54
  }, {
    "from": 60,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 43
  }, {
    "from": 55,
    "label": "has",
    "to": 44
  }, {
    "from": 60,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 47
  }, {
    "from": 56,
    "label": "has",
    "to": 48
  }, {
    "from": 60,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 13
  }, {
    "from": 57,
    "label": "has",
    "to": 14
  }, {
    "from": 57,
    "label": "has",
    "to": 15
  }, {
    "from": 57,
    "label": "has",
    "to": 16
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 43
  }, {
    "from": 69,
    "label": "has",
    "to": 44
  }, {
    "from": 75,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 47
  }, {
    "from": 70,
    "label": "has",
    "to": 48
  }, {
    "from": 75,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 13
  }, {
    "from": 71,
    "label": "has",
    "to": 14
  }, {
    "from": 71,
    "label": "has",
    "to": 15
  }, {
    "from": 71,
    "label": "has",
    "to": 16
  }, {
    "from": 73,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 29
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 44
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 47
  }, {
    "from": 80,
    "label": "has",
    "to": 48
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 14
  }, {
    "from": 82,
    "label": "has",
    "to": 15
  }, {
    "from": 82,
    "label": "has",
    "to": 16
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 19
  }, {
    "from": 60,
    "label": "has",
    "to": 53
  }, {
    "from": 60,
    "label": "has",
    "to": 54
  }, {
    "from": 60,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 43
  }, {
    "from": 55,
    "label": "has",
    "to": 44
  }, {
    "from": 60,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 47
  }, {
    "from": 56,
    "label": "has",
    "to": 48
  }, {
    "from": 60,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 13
  }, {
    "from": 57,
    "label": "has",
    "to": 14
  }, {
    "from": 57,
    "label": "has",
    "to": 15
  }, {
    "from": 57,
    "label": "has",
    "to": 16
  }, {
    "from": 85,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 43
  }, {
    "from": 69,
    "label": "has",
    "to": 44
  }, {
    "from": 75,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 47
  }, {
    "from": 70,
    "label": "has",
    "to": 48
  }, {
    "from": 75,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 13
  }, {
    "from": 71,
    "label": "has",
    "to": 14
  }, {
    "from": 71,
    "label": "has",
    "to": 15
  }, {
    "from": 71,
    "label": "has",
    "to": 16
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 29
  }, {
    "from": 86,
    "label": "has",
    "to": 78
  }, {
    "from": 86,
    "label": "has",
    "to": 44
  }, {
    "from": 84,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 47
  }, {
    "from": 87,
    "label": "has",
    "to": 48
  }, {
    "from": 84,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 14
  }, {
    "from": 88,
    "label": "has",
    "to": 15
  }, {
    "from": 88,
    "label": "has",
    "to": 16
  }, {
    "from": 84,
    "label": "has",
    "to": 89
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 90,
    "label": "has",
    "to": 93
  }, {
    "from": 94,
    "label": "has",
    "to": 29
  }, {
    "from": 94,
    "label": "has",
    "to": 30
  }, {
    "from": 94,
    "label": "has",
    "to": 31
  }, {
    "from": 94,
    "label": "has",
    "to": 32
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 91
  }, {
    "from": 97,
    "label": "has",
    "to": 92
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 29
  }, {
    "from": 98,
    "label": "has",
    "to": 30
  }, {
    "from": 98,
    "label": "has",
    "to": 31
  }, {
    "from": 98,
    "label": "has",
    "to": 32
  }, {
    "from": 96,
    "label": "has",
    "to": 99
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 100,
    "label": "has",
    "to": 102
  }, {
    "from": 100,
    "label": "has",
    "to": 103
  }, {
    "from": 100,
    "label": "has",
    "to": 104
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 105,
    "label": "has",
    "to": 102
  }, {
    "from": 105,
    "label": "has",
    "to": 103
  }, {
    "from": 105,
    "label": "has",
    "to": 107
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 101
  }, {
    "from": 109,
    "label": "has",
    "to": 102
  }, {
    "from": 109,
    "label": "has",
    "to": 103
  }, {
    "from": 108,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 106
  }, {
    "from": 110,
    "label": "has",
    "to": 102
  }, {
    "from": 110,
    "label": "has",
    "to": 103
  }, {
    "from": 108,
    "label": "has",
    "to": 111
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 112,
    "label": "has",
    "to": 102
  }, {
    "from": 112,
    "label": "has",
    "to": 103
  }, {
    "from": 112,
    "label": "has",
    "to": 114
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 113
  }, {
    "from": 116,
    "label": "has",
    "to": 102
  }, {
    "from": 116,
    "label": "has",
    "to": 103
  }, {
    "from": 115,
    "label": "has",
    "to": 117
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 118,
    "label": "has",
    "to": 120
  }, {
    "from": 118,
    "label": "has",
    "to": 121
  }, {
    "from": 118,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 3
  }, {
    "from": 122,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 122,
    "label": "has",
    "to": 6
  }, {
    "from": 118,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 101
  }, {
    "from": 109,
    "label": "has",
    "to": 102
  }, {
    "from": 109,
    "label": "has",
    "to": 103
  }, {
    "from": 123,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 106
  }, {
    "from": 110,
    "label": "has",
    "to": 102
  }, {
    "from": 110,
    "label": "has",
    "to": 103
  }, {
    "from": 118,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 113
  }, {
    "from": 116,
    "label": "has",
    "to": 102
  }, {
    "from": 116,
    "label": "has",
    "to": 103
  }, {
    "from": 118,
    "label": "has",
    "to": 125
  }, {
    "from": 126,
    "label": "calls",
    "to": 2
  }, {
    "from": 126,
    "label": "calls",
    "to": 2
  }, {
    "from": 126,
    "label": "calls",
    "to": 2
  }, {
    "from": 126,
    "label": "calls",
    "to": 135
  }, {
    "from": 126,
    "label": "calls",
    "to": 127
  }, {
    "from": 126,
    "label": "calls",
    "to": 128
  }, {
    "from": 126,
    "label": "calls",
    "to": 128
  }, {
    "from": 126,
    "label": "calls",
    "to": 128
  }, {
    "from": 126,
    "label": "calls",
    "to": 128
  }, {
    "from": 126,
    "label": "calls",
    "to": 128
  }, {
    "from": 126,
    "label": "calls",
    "to": 128
  }, {
    "from": 126,
    "label": "calls",
    "to": 128
  }, {
    "from": 126,
    "label": "calls",
    "to": 128
  }, {
    "from": 126,
    "label": "calls",
    "to": 128
  }, {
    "from": 126,
    "label": "calls",
    "to": 128
  }, {
    "from": 126,
    "label": "calls",
    "to": 128
  }, {
    "from": 126,
    "label": "calls",
    "to": 128
  }, {
    "from": 126,
    "label": "calls",
    "to": 128
  }, {
    "from": 126,
    "label": "calls",
    "to": 128
  }, {
    "from": 126,
    "label": "calls",
    "to": 128
  }, {
    "from": 126,
    "label": "calls",
    "to": 128
  }, {
    "from": 126,
    "label": "calls",
    "to": 128
  }, {
    "from": 126,
    "label": "calls",
    "to": 128
  }, {
    "from": 126,
    "label": "calls",
    "to": 133
  }, {
    "from": 126,
    "label": "calls",
    "to": 133
  }, {
    "from": 126,
    "label": "calls",
    "to": 133
  }, {
    "from": 126,
    "label": "calls",
    "to": 132
  }, {
    "from": 126,
    "label": "calls",
    "to": 132
  }, {
    "from": 126,
    "label": "calls",
    "to": 132
  }, {
    "from": 126,
    "label": "calls",
    "to": 132
  }, {
    "from": 126,
    "label": "calls",
    "to": 132
  }, {
    "from": 126,
    "label": "calls",
    "to": 132
  }, {
    "from": 126,
    "label": "calls",
    "to": 132
  }, {
    "from": 126,
    "label": "calls",
    "to": 132
  }, {
    "from": 126,
    "label": "calls",
    "to": 132
  }, {
    "from": 126,
    "label": "calls",
    "to": 132
  }, {
    "from": 126,
    "label": "calls",
    "to": 132
  }, {
    "from": 126,
    "label": "calls",
    "to": 132
  }, {
    "from": 126,
    "label": "calls",
    "to": 132
  }, {
    "from": 126,
    "label": "calls",
    "to": 132
  }, {
    "from": 126,
    "label": "calls",
    "to": 132
  }, {
    "from": 126,
    "label": "calls",
    "to": 132
  }, {
    "from": 126,
    "label": "calls",
    "to": 132
  }, {
    "from": 126,
    "label": "calls",
    "to": 132
  }, {
    "from": 126,
    "label": "calls",
    "to": 132
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 131
  }, {
    "from": 126,
    "label": "calls",
    "to": 131
  }, {
    "from": 126,
    "label": "calls",
    "to": 131
  }, {
    "from": 126,
    "label": "calls",
    "to": 131
  }, {
    "from": 126,
    "label": "calls",
    "to": 131
  }, {
    "from": 126,
    "label": "calls",
    "to": 131
  }, {
    "from": 126,
    "label": "calls",
    "to": 131
  }, {
    "from": 126,
    "label": "calls",
    "to": 131
  }, {
    "from": 126,
    "label": "calls",
    "to": 129
  }, {
    "from": 126,
    "label": "calls",
    "to": 129
  }, {
    "from": 126,
    "label": "calls",
    "to": 136
  }, {
    "from": 126,
    "label": "calls",
    "to": 136
  }, {
    "from": 126,
    "label": "calls",
    "to": 136
  }, {
    "from": 126,
    "label": "calls",
    "to": 136
  }, {
    "from": 126,
    "label": "calls",
    "to": 130
  }, {
    "from": 126,
    "label": "calls",
    "to": 130
  }, {
    "from": 126,
    "label": "calls",
    "to": 130
  }, {
    "from": 126,
    "label": "calls",
    "to": 137
  }, {
    "from": 126,
    "label": "calls",
    "to": 137
  }, {
    "from": 126,
    "label": "calls",
    "to": 137
  }, {
    "from": 1,
    "label": "contains",
    "to": 126
  }, {
    "from": 126,
    "label": "declares",
    "to": 2
  }, {
    "from": 126,
    "label": "declares",
    "to": 8
  }, {
    "from": 126,
    "label": "declares",
    "to": 12
  }, {
    "from": 126,
    "label": "declares",
    "to": 18
  }, {
    "from": 126,
    "label": "declares",
    "to": 24
  }, {
    "from": 126,
    "label": "declares",
    "to": 28
  }, {
    "from": 126,
    "label": "declares",
    "to": 34
  }, {
    "from": 126,
    "label": "declares",
    "to": 38
  }, {
    "from": 126,
    "label": "declares",
    "to": 42
  }, {
    "from": 126,
    "label": "declares",
    "to": 46
  }, {
    "from": 126,
    "label": "declares",
    "to": 50
  }, {
    "from": 126,
    "label": "declares",
    "to": 52
  }, {
    "from": 126,
    "label": "declares",
    "to": 59
  }, {
    "from": 126,
    "label": "declares",
    "to": 62
  }, {
    "from": 126,
    "label": "declares",
    "to": 64
  }, {
    "from": 126,
    "label": "declares",
    "to": 66
  }, {
    "from": 126,
    "label": "declares",
    "to": 68
  }, {
    "from": 126,
    "label": "declares",
    "to": 73
  }, {
    "from": 126,
    "label": "declares",
    "to": 77
  }, {
    "from": 126,
    "label": "declares",
    "to": 80
  }, {
    "from": 126,
    "label": "declares",
    "to": 82
  }, {
    "from": 126,
    "label": "declares",
    "to": 84
  }, {
    "from": 126,
    "label": "declares",
    "to": 90
  }, {
    "from": 126,
    "label": "declares",
    "to": 94
  }, {
    "from": 126,
    "label": "declares",
    "to": 96
  }, {
    "from": 126,
    "label": "declares",
    "to": 100
  }, {
    "from": 126,
    "label": "declares",
    "to": 105
  }, {
    "from": 126,
    "label": "declares",
    "to": 108
  }, {
    "from": 126,
    "label": "declares",
    "to": 112
  }, {
    "from": 126,
    "label": "declares",
    "to": 115
  }, {
    "from": 126,
    "label": "declares",
    "to": 118
  }, {
    "from": 1,
    "label": "contains",
    "to": 138
  }, {
    "from": 1,
    "label": "contains",
    "to": 139
  }, {
    "from": 21,
    "label": "hasArgument",
    "to": 8
  }, {
    "from": 22,
    "label": "hasArgument",
    "to": 12
  }, {
    "from": 35,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 36,
    "label": "hasArgument",
    "to": 28
  }, {
    "from": 39,
    "label": "hasArgument",
    "to": 8
  }, {
    "from": 39,
    "label": "hasArgument",
    "to": 12
  }, {
    "from": 39,
    "label": "hasArgument",
    "to": 18
  }, {
    "from": 40,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 40,
    "label": "hasArgument",
    "to": 28
  }, {
    "from": 40,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 55,
    "label": "hasArgument",
    "to": 42
  }, {
    "from": 56,
    "label": "hasArgument",
    "to": 46
  }, {
    "from": 57,
    "label": "hasArgument",
    "to": 50
  }, {
    "from": 60,
    "label": "hasArgument",
    "to": 42
  }, {
    "from": 60,
    "label": "hasArgument",
    "to": 46
  }, {
    "from": 60,
    "label": "hasArgument",
    "to": 50
  }, {
    "from": 60,
    "label": "hasArgument",
    "to": 52
  }, {
    "from": 69,
    "label": "hasArgument",
    "to": 62
  }, {
    "from": 70,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 71,
    "label": "hasArgument",
    "to": 66
  }, {
    "from": 74,
    "label": "hasArgument",
    "to": 42
  }, {
    "from": 74,
    "label": "hasArgument",
    "to": 46
  }, {
    "from": 74,
    "label": "hasArgument",
    "to": 50
  }, {
    "from": 74,
    "label": "hasArgument",
    "to": 52
  }, {
    "from": 74,
    "label": "hasArgument",
    "to": 59
  }, {
    "from": 75,
    "label": "hasArgument",
    "to": 62
  }, {
    "from": 75,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 75,
    "label": "hasArgument",
    "to": 66
  }, {
    "from": 75,
    "label": "hasArgument",
    "to": 68
  }, {
    "from": 85,
    "label": "hasArgument",
    "to": 42
  }, {
    "from": 85,
    "label": "hasArgument",
    "to": 46
  }, {
    "from": 85,
    "label": "hasArgument",
    "to": 50
  }, {
    "from": 85,
    "label": "hasArgument",
    "to": 52
  }, {
    "from": 85,
    "label": "hasArgument",
    "to": 59
  }, {
    "from": 85,
    "label": "hasArgument",
    "to": 62
  }, {
    "from": 85,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 85,
    "label": "hasArgument",
    "to": 66
  }, {
    "from": 85,
    "label": "hasArgument",
    "to": 68
  }, {
    "from": 85,
    "label": "hasArgument",
    "to": 73
  }, {
    "from": 86,
    "label": "hasArgument",
    "to": 77
  }, {
    "from": 87,
    "label": "hasArgument",
    "to": 80
  }, {
    "from": 88,
    "label": "hasArgument",
    "to": 82
  }, {
    "from": 97,
    "label": "hasArgument",
    "to": 90
  }, {
    "from": 98,
    "label": "hasArgument",
    "to": 94
  }, {
    "from": 109,
    "label": "hasArgument",
    "to": 100
  }, {
    "from": 110,
    "label": "hasArgument",
    "to": 105
  }, {
    "from": 116,
    "label": "hasArgument",
    "to": 112
  }, {
    "from": 123,
    "label": "hasArgument",
    "to": 100
  }, {
    "from": 123,
    "label": "hasArgument",
    "to": 105
  }, {
    "from": 123,
    "label": "hasArgument",
    "to": 108
  }, {
    "from": 124,
    "label": "hasArgument",
    "to": 112
  }, {
    "from": 124,
    "label": "hasArgument",
    "to": 115
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "insulate-expose_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "function(args)\r\n    local success, exitcode, out, err = utils.executeex(busted_cmd .. ' ' .. args)\r\n    if exitcode > 255 then\r\n      exitcode = math.floor(exitcode/256), exitcode - math.floor(exitcode/256)*256\r\n    end\r\n    return not not success, exitcode, out, err\r\n  end",
    "type": "function"
  }, {
    "id": 3,
    "text": "local success, exitcode, out, err = utils.executeex(busted_cmd .. ' ' .. args)",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "if exitcode > 255 then\r\n      exitcode = math.floor(exitcode/256), exitcode - math.floor(exitcode/256)*256\r\n    end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "exitcode = math.floor(exitcode/256), exitcode - math.floor(exitcode/256)*256",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function()\r\n      assert.is_not_nil(insuated_global)\r\n      assert.is_not_nil(_G.insuated_global)\r\n    end",
    "type": "function"
  }, {
    "id": 9,
    "text": "assert.is_not_nil(insuated_global)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "assert.is_not_nil(_G.insuated_global)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function()\r\n      assert.is_not_nil(pl)\r\n      assert.is_not_nil(Date)\r\n      assert.is_not_nil(package.loaded.pl)\r\n      assert.is_not_nil(package.loaded['pl.Date'])\r\n    end",
    "type": "function"
  }, {
    "id": 13,
    "text": "assert.is_not_nil(pl)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "assert.is_not_nil(Date)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "assert.is_not_nil(package.loaded.pl)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "assert.is_not_nil(package.loaded['pl.Date'])",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function()\r\n    pl = require 'pl'\r\n    _G.insuated_global = true\r\n\r\n    it('updates insuated global table _G', function()\r\n      assert.is_not_nil(insuated_global)\r\n      assert.is_not_nil(_G.insuated_global)\r\n    end)\r\n\r\n    it('updates package.loaded', function()\r\n      assert.is_not_nil(pl)\r\n      assert.is_not_nil(Date)\r\n      assert.is_not_nil(package.loaded.pl)\r\n      assert.is_not_nil(package.loaded['pl.Date'])\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 19,
    "text": "pl = require 'pl'",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "_G.insuated_global = true",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "it('updates insuated global table _G', function()\r\n      assert.is_not_nil(insuated_global)\r\n      assert.is_not_nil(_G.insuated_global)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "it('updates package.loaded', function()\r\n      assert.is_not_nil(pl)\r\n      assert.is_not_nil(Date)\r\n      assert.is_not_nil(package.loaded.pl)\r\n      assert.is_not_nil(package.loaded['pl.Date'])\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function()\r\n      assert.is_nil(insuated_global)\r\n      assert.is_nil(_G.insuated_global)\r\n    end",
    "type": "function"
  }, {
    "id": 25,
    "text": "assert.is_nil(insuated_global)",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "assert.is_nil(_G.insuated_global)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function()\r\n      assert.is_nil(pl)\r\n      assert.is_nil(Date)\r\n      assert.is_nil(package.loaded.pl)\r\n      assert.is_nil(package.loaded['pl.Date'])\r\n    end",
    "type": "function"
  }, {
    "id": 29,
    "text": "assert.is_nil(pl)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "assert.is_nil(Date)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "assert.is_nil(package.loaded.pl)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "assert.is_nil(package.loaded['pl.Date'])",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function()\r\n    it('restores insuated global table _G', function()\r\n      assert.is_nil(insuated_global)\r\n      assert.is_nil(_G.insuated_global)\r\n    end)\r\n\r\n    it('restores package.loaded', function()\r\n      assert.is_nil(pl)\r\n      assert.is_nil(Date)\r\n      assert.is_nil(package.loaded.pl)\r\n      assert.is_nil(package.loaded['pl.Date'])\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 35,
    "text": "it('restores insuated global table _G', function()\r\n      assert.is_nil(insuated_global)\r\n      assert.is_nil(_G.insuated_global)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "it('restores package.loaded', function()\r\n      assert.is_nil(pl)\r\n      assert.is_nil(Date)\r\n      assert.is_nil(package.loaded.pl)\r\n      assert.is_nil(package.loaded['pl.Date'])\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function()\r\n  insulate('environment inside insulate', function()\r\n    pl = require 'pl'\r\n    _G.insuated_global = true\r\n\r\n    it('updates insuated global table _G', function()\r\n      assert.is_not_nil(insuated_global)\r\n      assert.is_not_nil(_G.insuated_global)\r\n    end)\r\n\r\n    it('updates package.loaded', function()\r\n      assert.is_not_nil(pl)\r\n      assert.is_not_nil(Date)\r\n      assert.is_not_nil(package.loaded.pl)\r\n      assert.is_not_nil(package.loaded['pl.Date'])\r\n    end)\r\n  end)\r\n\r\n  describe('environment after insulate', function()\r\n    it('restores insuated global table _G', function()\r\n      assert.is_nil(insuated_global)\r\n      assert.is_nil(_G.insuated_global)\r\n    end)\r\n\r\n    it('restores package.loaded', function()\r\n      assert.is_nil(pl)\r\n      assert.is_nil(Date)\r\n      assert.is_nil(package.loaded.pl)\r\n      assert.is_nil(package.loaded['pl.Date'])\r\n    end)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "insulate('environment inside insulate', function()\r\n    pl = require 'pl'\r\n    _G.insuated_global = true\r\n\r\n    it('updates insuated global table _G', function()\r\n      assert.is_not_nil(insuated_global)\r\n      assert.is_not_nil(_G.insuated_global)\r\n    end)\r\n\r\n    it('updates package.loaded', function()\r\n      assert.is_not_nil(pl)\r\n      assert.is_not_nil(Date)\r\n      assert.is_not_nil(package.loaded.pl)\r\n      assert.is_not_nil(package.loaded['pl.Date'])\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "describe('environment after insulate', function()\r\n    it('restores insuated global table _G', function()\r\n      assert.is_nil(insuated_global)\r\n      assert.is_nil(_G.insuated_global)\r\n    end)\r\n\r\n    it('restores package.loaded', function()\r\n      assert.is_nil(pl)\r\n      assert.is_nil(Date)\r\n      assert.is_nil(package.loaded.pl)\r\n      assert.is_nil(package.loaded['pl.Date'])\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function()\r\n          assert.is_not_nil(exposed_global)\r\n          assert.is_nil(_G.exposed_global)\r\n        end",
    "type": "function"
  }, {
    "id": 43,
    "text": "assert.is_not_nil(exposed_global)",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "assert.is_nil(_G.exposed_global)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function()\r\n          assert.is_not_nil(global)\r\n          assert.is_not_nil(_G.global)\r\n        end",
    "type": "function"
  }, {
    "id": 47,
    "text": "assert.is_not_nil(global)",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "assert.is_not_nil(_G.global)",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function()\r\n          assert.is_not_nil(pl)\r\n          assert.is_not_nil(Date)\r\n          assert.is_not_nil(package.loaded.pl)\r\n          assert.is_not_nil(package.loaded['pl.Date'])\r\n        end",
    "type": "function"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function()\r\n        pl = require 'pl'\r\n        exposed_global = true\r\n        _G.global = true\r\n\r\n        it('creates exposed global', function()\r\n          assert.is_not_nil(exposed_global)\r\n          assert.is_nil(_G.exposed_global)\r\n        end)\r\n\r\n        it('updates global table _G', function()\r\n          assert.is_not_nil(global)\r\n          assert.is_not_nil(_G.global)\r\n        end)\r\n\r\n        it('updates package.loaded', function()\r\n          assert.is_not_nil(pl)\r\n          assert.is_not_nil(Date)\r\n          assert.is_not_nil(package.loaded.pl)\r\n          assert.is_not_nil(package.loaded['pl.Date'])\r\n        end)\r\n      end",
    "type": "function"
  }, {
    "id": 53,
    "text": "exposed_global = true",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "_G.global = true",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "it('creates exposed global', function()\r\n          assert.is_not_nil(exposed_global)\r\n          assert.is_nil(_G.exposed_global)\r\n        end)",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "it('updates global table _G', function()\r\n          assert.is_not_nil(global)\r\n          assert.is_not_nil(_G.global)\r\n        end)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "it('updates package.loaded', function()\r\n          assert.is_not_nil(pl)\r\n          assert.is_not_nil(Date)\r\n          assert.is_not_nil(package.loaded.pl)\r\n          assert.is_not_nil(package.loaded['pl.Date'])\r\n        end)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function()\r\n      expose('tests environment inside expose block', function()\r\n        pl = require 'pl'\r\n        exposed_global = true\r\n        _G.global = true\r\n\r\n        it('creates exposed global', function()\r\n          assert.is_not_nil(exposed_global)\r\n          assert.is_nil(_G.exposed_global)\r\n        end)\r\n\r\n        it('updates global table _G', function()\r\n          assert.is_not_nil(global)\r\n          assert.is_not_nil(_G.global)\r\n        end)\r\n\r\n        it('updates package.loaded', function()\r\n          assert.is_not_nil(pl)\r\n          assert.is_not_nil(Date)\r\n          assert.is_not_nil(package.loaded.pl)\r\n          assert.is_not_nil(package.loaded['pl.Date'])\r\n        end)\r\n      end)\r\n    end",
    "type": "function"
  }, {
    "id": 60,
    "text": "expose('tests environment inside expose block', function()\r\n        pl = require 'pl'\r\n        exposed_global = true\r\n        _G.global = true\r\n\r\n        it('creates exposed global', function()\r\n          assert.is_not_nil(exposed_global)\r\n          assert.is_nil(_G.exposed_global)\r\n        end)\r\n\r\n        it('updates global table _G', function()\r\n          assert.is_not_nil(global)\r\n          assert.is_not_nil(_G.global)\r\n        end)\r\n\r\n        it('updates package.loaded', function()\r\n          assert.is_not_nil(pl)\r\n          assert.is_not_nil(Date)\r\n          assert.is_not_nil(package.loaded.pl)\r\n          assert.is_not_nil(package.loaded['pl.Date'])\r\n        end)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "function()\r\n        assert.is_not_nil(exposed_global)\r\n        assert.is_nil(_G.exposed_global)\r\n      end",
    "type": "function"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "function()\r\n        assert.is_not_nil(global)\r\n        assert.is_not_nil(_G.global)\r\n      end",
    "type": "function"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function()\r\n        assert.is_not_nil(pl)\r\n        assert.is_not_nil(Date)\r\n        assert.is_not_nil(package.loaded.pl)\r\n        assert.is_not_nil(package.loaded['pl.Date'])\r\n      end",
    "type": "function"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "function()\r\n      it('creates exposed global in outer block', function()\r\n        assert.is_not_nil(exposed_global)\r\n        assert.is_nil(_G.exposed_global)\r\n      end)\r\n\r\n      it('does not restore global table _G', function()\r\n        assert.is_not_nil(global)\r\n        assert.is_not_nil(_G.global)\r\n      end)\r\n\r\n      it('does not restore package.loaded', function()\r\n        assert.is_not_nil(pl)\r\n        assert.is_not_nil(Date)\r\n        assert.is_not_nil(package.loaded.pl)\r\n        assert.is_not_nil(package.loaded['pl.Date'])\r\n      end)\r\n    end",
    "type": "function"
  }, {
    "id": 69,
    "text": "it('creates exposed global in outer block', function()\r\n        assert.is_not_nil(exposed_global)\r\n        assert.is_nil(_G.exposed_global)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "it('does not restore global table _G', function()\r\n        assert.is_not_nil(global)\r\n        assert.is_not_nil(_G.global)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "it('does not restore package.loaded', function()\r\n        assert.is_not_nil(pl)\r\n        assert.is_not_nil(Date)\r\n        assert.is_not_nil(package.loaded.pl)\r\n        assert.is_not_nil(package.loaded['pl.Date'])\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "function()\r\n    insulate('inside insulate block', function()\r\n      expose('tests environment inside expose block', function()\r\n        pl = require 'pl'\r\n        exposed_global = true\r\n        _G.global = true\r\n\r\n        it('creates exposed global', function()\r\n          assert.is_not_nil(exposed_global)\r\n          assert.is_nil(_G.exposed_global)\r\n        end)\r\n\r\n        it('updates global table _G', function()\r\n          assert.is_not_nil(global)\r\n          assert.is_not_nil(_G.global)\r\n        end)\r\n\r\n        it('updates package.loaded', function()\r\n          assert.is_not_nil(pl)\r\n          assert.is_not_nil(Date)\r\n          assert.is_not_nil(package.loaded.pl)\r\n          assert.is_not_nil(package.loaded['pl.Date'])\r\n        end)\r\n      end)\r\n    end)\r\n\r\n    describe('neutralizes insulation', function()\r\n      it('creates exposed global in outer block', function()\r\n        assert.is_not_nil(exposed_global)\r\n        assert.is_nil(_G.exposed_global)\r\n      end)\r\n\r\n      it('does not restore global table _G', function()\r\n        assert.is_not_nil(global)\r\n        assert.is_not_nil(_G.global)\r\n      end)\r\n\r\n      it('does not restore package.loaded', function()\r\n        assert.is_not_nil(pl)\r\n        assert.is_not_nil(Date)\r\n        assert.is_not_nil(package.loaded.pl)\r\n        assert.is_not_nil(package.loaded['pl.Date'])\r\n      end)\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 74,
    "text": "insulate('inside insulate block', function()\r\n      expose('tests environment inside expose block', function()\r\n        pl = require 'pl'\r\n        exposed_global = true\r\n        _G.global = true\r\n\r\n        it('creates exposed global', function()\r\n          assert.is_not_nil(exposed_global)\r\n          assert.is_nil(_G.exposed_global)\r\n        end)\r\n\r\n        it('updates global table _G', function()\r\n          assert.is_not_nil(global)\r\n          assert.is_not_nil(_G.global)\r\n        end)\r\n\r\n        it('updates package.loaded', function()\r\n          assert.is_not_nil(pl)\r\n          assert.is_not_nil(Date)\r\n          assert.is_not_nil(package.loaded.pl)\r\n          assert.is_not_nil(package.loaded['pl.Date'])\r\n        end)\r\n      end)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "describe('neutralizes insulation', function()\r\n      it('creates exposed global in outer block', function()\r\n        assert.is_not_nil(exposed_global)\r\n        assert.is_nil(_G.exposed_global)\r\n      end)\r\n\r\n      it('does not restore global table _G', function()\r\n        assert.is_not_nil(global)\r\n        assert.is_not_nil(_G.global)\r\n      end)\r\n\r\n      it('does not restore package.loaded', function()\r\n        assert.is_not_nil(pl)\r\n        assert.is_not_nil(Date)\r\n        assert.is_not_nil(package.loaded.pl)\r\n        assert.is_not_nil(package.loaded['pl.Date'])\r\n      end)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "function()\r\n    assert.is_nil(pl)\r\n    assert.is_nil(exposed_global)\r\n    assert.is_nil(_G.exposed_global)\r\n  end",
    "type": "function"
  }, {
    "id": 78,
    "text": "assert.is_nil(exposed_global)",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "function()\r\n    assert.is_not_nil(global)\r\n    assert.is_not_nil(_G.global)\r\n  end",
    "type": "function"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "function()\r\n    assert.is_not_nil(Date)\r\n    assert.is_not_nil(package.loaded.pl)\r\n    assert.is_not_nil(package.loaded['pl.Date'])\r\n  end",
    "type": "function"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "function()\r\n  describe('Tests expose', function()\r\n    insulate('inside insulate block', function()\r\n      expose('tests environment inside expose block', function()\r\n        pl = require 'pl'\r\n        exposed_global = true\r\n        _G.global = true\r\n\r\n        it('creates exposed global', function()\r\n          assert.is_not_nil(exposed_global)\r\n          assert.is_nil(_G.exposed_global)\r\n        end)\r\n\r\n        it('updates global table _G', function()\r\n          assert.is_not_nil(global)\r\n          assert.is_not_nil(_G.global)\r\n        end)\r\n\r\n        it('updates package.loaded', function()\r\n          assert.is_not_nil(pl)\r\n          assert.is_not_nil(Date)\r\n          assert.is_not_nil(package.loaded.pl)\r\n          assert.is_not_nil(package.loaded['pl.Date'])\r\n        end)\r\n      end)\r\n    end)\r\n\r\n    describe('neutralizes insulation', function()\r\n      it('creates exposed global in outer block', function()\r\n        assert.is_not_nil(exposed_global)\r\n        assert.is_nil(_G.exposed_global)\r\n      end)\r\n\r\n      it('does not restore global table _G', function()\r\n        assert.is_not_nil(global)\r\n        assert.is_not_nil(_G.global)\r\n      end)\r\n\r\n      it('does not restore package.loaded', function()\r\n        assert.is_not_nil(pl)\r\n        assert.is_not_nil(Date)\r\n        assert.is_not_nil(package.loaded.pl)\r\n        assert.is_not_nil(package.loaded['pl.Date'])\r\n      end)\r\n    end)\r\n  end)\r\n\r\n  it('Tests exposed globals does not exist in outer most block', function()\r\n    assert.is_nil(pl)\r\n    assert.is_nil(exposed_global)\r\n    assert.is_nil(_G.exposed_global)\r\n  end)\r\n\r\n  it('Tests global table _G persists without insulate', function()\r\n    assert.is_not_nil(global)\r\n    assert.is_not_nil(_G.global)\r\n  end)\r\n\r\n  it('Tests package.loaded persists without insulate', function()\r\n    assert.is_not_nil(Date)\r\n    assert.is_not_nil(package.loaded.pl)\r\n    assert.is_not_nil(package.loaded['pl.Date'])\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 85,
    "text": "describe('Tests expose', function()\r\n    insulate('inside insulate block', function()\r\n      expose('tests environment inside expose block', function()\r\n        pl = require 'pl'\r\n        exposed_global = true\r\n        _G.global = true\r\n\r\n        it('creates exposed global', function()\r\n          assert.is_not_nil(exposed_global)\r\n          assert.is_nil(_G.exposed_global)\r\n        end)\r\n\r\n        it('updates global table _G', function()\r\n          assert.is_not_nil(global)\r\n          assert.is_not_nil(_G.global)\r\n        end)\r\n\r\n        it('updates package.loaded', function()\r\n          assert.is_not_nil(pl)\r\n          assert.is_not_nil(Date)\r\n          assert.is_not_nil(package.loaded.pl)\r\n          assert.is_not_nil(package.loaded['pl.Date'])\r\n        end)\r\n      end)\r\n    end)\r\n\r\n    describe('neutralizes insulation', function()\r\n      it('creates exposed global in outer block', function()\r\n        assert.is_not_nil(exposed_global)\r\n        assert.is_nil(_G.exposed_global)\r\n      end)\r\n\r\n      it('does not restore global table _G', function()\r\n        assert.is_not_nil(global)\r\n        assert.is_not_nil(_G.global)\r\n      end)\r\n\r\n      it('does not restore package.loaded', function()\r\n        assert.is_not_nil(pl)\r\n        assert.is_not_nil(Date)\r\n        assert.is_not_nil(package.loaded.pl)\r\n        assert.is_not_nil(package.loaded['pl.Date'])\r\n      end)\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "it('Tests exposed globals does not exist in outer most block', function()\r\n    assert.is_nil(pl)\r\n    assert.is_nil(exposed_global)\r\n    assert.is_nil(_G.exposed_global)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "it('Tests global table _G persists without insulate', function()\r\n    assert.is_not_nil(global)\r\n    assert.is_not_nil(_G.global)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "it('Tests package.loaded persists without insulate', function()\r\n    assert.is_not_nil(Date)\r\n    assert.is_not_nil(package.loaded.pl)\r\n    assert.is_not_nil(package.loaded['pl.Date'])\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 90,
    "text": "function()\r\n    assert.is_nil(global)\r\n    assert.is_nil(_G.global)\r\n  end",
    "type": "function"
  }, {
    "id": 91,
    "text": "assert.is_nil(global)",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "assert.is_nil(_G.global)",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 94,
    "text": "function()\r\n    assert.is_nil(pl)\r\n    assert.is_nil(Date)\r\n    assert.is_nil(package.loaded.pl)\r\n    assert.is_nil(package.loaded['pl.Date'])\r\n  end",
    "type": "function"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "function()\r\n  it('restores global table _G', function()\r\n    assert.is_nil(global)\r\n    assert.is_nil(_G.global)\r\n  end)\r\n\r\n  it('restores package.loaded', function()\r\n    assert.is_nil(pl)\r\n    assert.is_nil(Date)\r\n    assert.is_nil(package.loaded.pl)\r\n    assert.is_nil(package.loaded['pl.Date'])\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 97,
    "text": "it('restores global table _G', function()\r\n    assert.is_nil(global)\r\n    assert.is_nil(_G.global)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "it('restores package.loaded', function()\r\n    assert.is_nil(pl)\r\n    assert.is_nil(Date)\r\n    assert.is_nil(package.loaded.pl)\r\n    assert.is_nil(package.loaded['pl.Date'])\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 100,
    "text": "function()\r\n      local success, exitcode = executeBusted('spec/insulate_file1.lua spec/insulate_file2.lua')\r\n      assert.is_true(success)\r\n      assert.is_equal(0, exitcode)\r\n    end",
    "type": "function"
  }, {
    "id": 101,
    "text": "local success, exitcode = executeBusted('spec/insulate_file1.lua spec/insulate_file2.lua')",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "assert.is_true(success)",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "assert.is_equal(0, exitcode)",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 105,
    "text": "function()\r\n      local success, exitcode = executeBusted('spec/insulate_file2.lua spec/insulate_file1.lua')\r\n      assert.is_true(success)\r\n      assert.is_equal(0, exitcode)\r\n    end",
    "type": "function"
  }, {
    "id": 106,
    "text": "local success, exitcode = executeBusted('spec/insulate_file2.lua spec/insulate_file1.lua')",
    "type": "statement:localassign"
  }, {
    "id": 107,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 108,
    "text": "function()\r\n    it('works between files', function()\r\n      local success, exitcode = executeBusted('spec/insulate_file1.lua spec/insulate_file2.lua')\r\n      assert.is_true(success)\r\n      assert.is_equal(0, exitcode)\r\n    end)\r\n\r\n    it('works between files independent of order', function()\r\n      local success, exitcode = executeBusted('spec/insulate_file2.lua spec/insulate_file1.lua')\r\n      assert.is_true(success)\r\n      assert.is_equal(0, exitcode)\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 109,
    "text": "it('works between files', function()\r\n      local success, exitcode = executeBusted('spec/insulate_file1.lua spec/insulate_file2.lua')\r\n      assert.is_true(success)\r\n      assert.is_equal(0, exitcode)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "it('works between files independent of order', function()\r\n      local success, exitcode = executeBusted('spec/insulate_file2.lua spec/insulate_file1.lua')\r\n      assert.is_true(success)\r\n      assert.is_equal(0, exitcode)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 112,
    "text": "function()\r\n      local success, exitcode = executeBusted('spec/expose_file1.lua spec/expose_file2.lua')\r\n      assert.is_true(success)\r\n      assert.is_equal(0, exitcode)\r\n    end",
    "type": "function"
  }, {
    "id": 113,
    "text": "local success, exitcode = executeBusted('spec/expose_file1.lua spec/expose_file2.lua')",
    "type": "statement:localassign"
  }, {
    "id": 114,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 115,
    "text": "function()\r\n    it('works between files', function()\r\n      local success, exitcode = executeBusted('spec/expose_file1.lua spec/expose_file2.lua')\r\n      assert.is_true(success)\r\n      assert.is_equal(0, exitcode)\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 116,
    "text": "it('works between files', function()\r\n      local success, exitcode = executeBusted('spec/expose_file1.lua spec/expose_file2.lua')\r\n      assert.is_true(success)\r\n      assert.is_equal(0, exitcode)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 118,
    "text": "function()\r\n  local path = require 'pl.path'\r\n  local utils = require 'pl.utils'\r\n  local busted_cmd = path.is_windows and 'lua bin/busted' or 'bin/busted'\r\n\r\n  local executeBusted = function(args)\r\n    local success, exitcode, out, err = utils.executeex(busted_cmd .. ' ' .. args)\r\n    if exitcode > 255 then\r\n      exitcode = math.floor(exitcode/256), exitcode - math.floor(exitcode/256)*256\r\n    end\r\n    return not not success, exitcode, out, err\r\n  end\r\n\r\n  describe('file insulation', function()\r\n    it('works between files', function()\r\n      local success, exitcode = executeBusted('spec/insulate_file1.lua spec/insulate_file2.lua')\r\n      assert.is_true(success)\r\n      assert.is_equal(0, exitcode)\r\n    end)\r\n\r\n    it('works between files independent of order', function()\r\n      local success, exitcode = executeBusted('spec/insulate_file2.lua spec/insulate_file1.lua')\r\n      assert.is_true(success)\r\n      assert.is_equal(0, exitcode)\r\n    end)\r\n  end)\r\n\r\n  describe('expose from file context', function()\r\n    it('works between files', function()\r\n      local success, exitcode = executeBusted('spec/expose_file1.lua spec/expose_file2.lua')\r\n      assert.is_true(success)\r\n      assert.is_equal(0, exitcode)\r\n    end)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 119,
    "text": "local path = require 'pl.path'",
    "type": "statement:localassign"
  }, {
    "id": 120,
    "text": "local utils = require 'pl.utils'",
    "type": "statement:localassign"
  }, {
    "id": 121,
    "text": "local busted_cmd = path.is_windows and 'lua bin/busted' or 'bin/busted'",
    "type": "statement:localassign"
  }, {
    "id": 122,
    "text": "local executeBusted = function(args)\r\n    local success, exitcode, out, err = utils.executeex(busted_cmd .. ' ' .. args)\r\n    if exitcode > 255 then\r\n      exitcode = math.floor(exitcode/256), exitcode - math.floor(exitcode/256)*256\r\n    end\r\n    return not not success, exitcode, out, err\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 123,
    "text": "describe('file insulation', function()\r\n    it('works between files', function()\r\n      local success, exitcode = executeBusted('spec/insulate_file1.lua spec/insulate_file2.lua')\r\n      assert.is_true(success)\r\n      assert.is_equal(0, exitcode)\r\n    end)\r\n\r\n    it('works between files independent of order', function()\r\n      local success, exitcode = executeBusted('spec/insulate_file2.lua spec/insulate_file1.lua')\r\n      assert.is_true(success)\r\n      assert.is_equal(0, exitcode)\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "describe('expose from file context', function()\r\n    it('works between files', function()\r\n      local success, exitcode = executeBusted('spec/expose_file1.lua spec/expose_file2.lua')\r\n      assert.is_true(success)\r\n      assert.is_equal(0, exitcode)\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 126,
    "text": "",
    "type": "function container"
  }, {
    "id": 127,
    "text": "executeex",
    "type": "global function"
  }, {
    "id": 128,
    "text": "it",
    "type": "global function"
  }, {
    "id": 129,
    "text": "floor",
    "type": "global function"
  }, {
    "id": 130,
    "text": "is_true",
    "type": "global function"
  }, {
    "id": 131,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 132,
    "text": "is_nil",
    "type": "global function"
  }, {
    "id": 133,
    "text": "insulate",
    "type": "global function"
  }, {
    "id": 134,
    "text": "is_not_nil",
    "type": "global function"
  }, {
    "id": 135,
    "text": "expose",
    "type": "global function"
  }, {
    "id": 136,
    "text": "require",
    "type": "global function"
  }, {
    "id": 137,
    "text": "is_equal",
    "type": "global function"
  }, {
    "id": 138,
    "text": "",
    "type": "variable container"
  }, {
    "id": 139,
    "text": "",
    "type": "require container"
  } ]
}