{
  "_filename": "gtest.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/busted/busted/outputHandlers/gtest.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 4,
    "label": "has",
    "to": 10
  }, {
    "from": 4,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 12,
    "label": "has",
    "to": 18
  }, {
    "from": 12,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 12,
    "label": "has",
    "to": 10
  }, {
    "from": 12,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 10
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 6
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 33
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 27,
    "label": "has",
    "to": 10
  }, {
    "from": 27,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 6
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 43,
    "label": "has",
    "to": 46
  }, {
    "from": 41,
    "label": "has",
    "to": 10
  }, {
    "from": 41,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 48,
    "label": "has",
    "to": 53
  }, {
    "from": 48,
    "label": "has",
    "to": 54
  }, {
    "from": 48,
    "label": "has",
    "to": 55
  }, {
    "from": 48,
    "label": "has",
    "to": 56
  }, {
    "from": 48,
    "label": "has",
    "to": 57
  }, {
    "from": 48,
    "label": "has",
    "to": 10
  }, {
    "from": 48,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 10
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 61,
    "label": "has",
    "to": 64
  }, {
    "from": 61,
    "label": "has",
    "to": 65
  }, {
    "from": 61,
    "label": "has",
    "to": 66
  }, {
    "from": 61,
    "label": "has",
    "to": 67
  }, {
    "from": 61,
    "label": "has",
    "to": 68
  }, {
    "from": 61,
    "label": "has",
    "to": 10
  }, {
    "from": 61,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 70,
    "label": "has",
    "to": 75
  }, {
    "from": 70,
    "label": "has",
    "to": 76
  }, {
    "from": 70,
    "label": "has",
    "to": 77
  }, {
    "from": 70,
    "label": "has",
    "to": 10
  }, {
    "from": 70,
    "label": "has",
    "to": 78
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 81
  }, {
    "from": 79,
    "label": "has",
    "to": 82
  }, {
    "from": 79,
    "label": "has",
    "to": 83
  }, {
    "from": 79,
    "label": "has",
    "to": 84
  }, {
    "from": 79,
    "label": "has",
    "to": 85
  }, {
    "from": 79,
    "label": "has",
    "to": 77
  }, {
    "from": 79,
    "label": "has",
    "to": 10
  }, {
    "from": 79,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "has",
    "to": 63
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 77
  }, {
    "from": 87,
    "label": "has",
    "to": 10
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 90,
    "label": "has",
    "to": 93
  }, {
    "from": 90,
    "label": "has",
    "to": 94
  }, {
    "from": 90,
    "label": "has",
    "to": 77
  }, {
    "from": 90,
    "label": "has",
    "to": 10
  }, {
    "from": 90,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 77
  }, {
    "from": 96,
    "label": "has",
    "to": 10
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 99,
    "label": "has",
    "to": 102
  }, {
    "from": 99,
    "label": "has",
    "to": 103
  }, {
    "from": 99,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 104,
    "label": "has",
    "to": 107
  }, {
    "from": 104,
    "label": "has",
    "to": 108
  }, {
    "from": 104,
    "label": "has",
    "to": 109
  }, {
    "from": 104,
    "label": "has",
    "to": 110
  }, {
    "from": 104,
    "label": "has",
    "to": 111
  }, {
    "from": 104,
    "label": "has",
    "to": 112
  }, {
    "from": 99,
    "label": "has",
    "to": 113
  }, {
    "from": 99,
    "label": "has",
    "to": 77
  }, {
    "from": 99,
    "label": "has",
    "to": 10
  }, {
    "from": 99,
    "label": "has",
    "to": 114
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 116,
    "label": "has",
    "to": 77
  }, {
    "from": 115,
    "label": "has",
    "to": 10
  }, {
    "from": 115,
    "label": "has",
    "to": 118
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 120,
    "label": "has",
    "to": 77
  }, {
    "from": 119,
    "label": "has",
    "to": 10
  }, {
    "from": 119,
    "label": "has",
    "to": 122
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 121
  }, {
    "from": 125,
    "label": "has",
    "to": 77
  }, {
    "from": 124,
    "label": "has",
    "to": 111
  }, {
    "from": 123,
    "label": "has",
    "to": 10
  }, {
    "from": 123,
    "label": "has",
    "to": 126
  }, {
    "from": 127,
    "label": "has",
    "to": 10
  }, {
    "from": 128,
    "label": "has",
    "to": 10
  }, {
    "from": 128,
    "label": "has",
    "to": 10
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 129,
    "label": "has",
    "to": 131
  }, {
    "from": 129,
    "label": "has",
    "to": 132
  }, {
    "from": 129,
    "label": "has",
    "to": 133
  }, {
    "from": 129,
    "label": "has",
    "to": 134
  }, {
    "from": 129,
    "label": "has",
    "to": 135
  }, {
    "from": 129,
    "label": "has",
    "to": 136
  }, {
    "from": 129,
    "label": "has",
    "to": 137
  }, {
    "from": 129,
    "label": "has",
    "to": 138
  }, {
    "from": 129,
    "label": "has",
    "to": 139
  }, {
    "from": 129,
    "label": "has",
    "to": 140
  }, {
    "from": 129,
    "label": "has",
    "to": 141
  }, {
    "from": 129,
    "label": "has",
    "to": 142
  }, {
    "from": 129,
    "label": "has",
    "to": 143
  }, {
    "from": 129,
    "label": "has",
    "to": 144
  }, {
    "from": 129,
    "label": "has",
    "to": 145
  }, {
    "from": 129,
    "label": "has",
    "to": 146
  }, {
    "from": 129,
    "label": "has",
    "to": 147
  }, {
    "from": 129,
    "label": "has",
    "to": 148
  }, {
    "from": 129,
    "label": "has",
    "to": 149
  }, {
    "from": 129,
    "label": "has",
    "to": 150
  }, {
    "from": 129,
    "label": "has",
    "to": 151
  }, {
    "from": 129,
    "label": "has",
    "to": 152
  }, {
    "from": 129,
    "label": "has",
    "to": 153
  }, {
    "from": 129,
    "label": "has",
    "to": 154
  }, {
    "from": 154,
    "label": "has",
    "to": 5
  }, {
    "from": 154,
    "label": "has",
    "to": 6
  }, {
    "from": 154,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 154,
    "label": "has",
    "to": 10
  }, {
    "from": 129,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 13
  }, {
    "from": 155,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 155,
    "label": "has",
    "to": 18
  }, {
    "from": 155,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 155,
    "label": "has",
    "to": 10
  }, {
    "from": 129,
    "label": "has",
    "to": 156
  }, {
    "from": 156,
    "label": "has",
    "to": 23
  }, {
    "from": 156,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 156,
    "label": "has",
    "to": 10
  }, {
    "from": 129,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 6
  }, {
    "from": 157,
    "label": "has",
    "to": 28
  }, {
    "from": 157,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 33
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 157,
    "label": "has",
    "to": 10
  }, {
    "from": 129,
    "label": "has",
    "to": 158
  }, {
    "from": 158,
    "label": "has",
    "to": 6
  }, {
    "from": 158,
    "label": "has",
    "to": 42
  }, {
    "from": 158,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 43,
    "label": "has",
    "to": 46
  }, {
    "from": 158,
    "label": "has",
    "to": 10
  }, {
    "from": 129,
    "label": "has",
    "to": 159
  }, {
    "from": 159,
    "label": "has",
    "to": 49
  }, {
    "from": 159,
    "label": "has",
    "to": 50
  }, {
    "from": 159,
    "label": "has",
    "to": 51
  }, {
    "from": 159,
    "label": "has",
    "to": 52
  }, {
    "from": 159,
    "label": "has",
    "to": 53
  }, {
    "from": 159,
    "label": "has",
    "to": 54
  }, {
    "from": 159,
    "label": "has",
    "to": 55
  }, {
    "from": 159,
    "label": "has",
    "to": 56
  }, {
    "from": 159,
    "label": "has",
    "to": 57
  }, {
    "from": 159,
    "label": "has",
    "to": 10
  }, {
    "from": 129,
    "label": "has",
    "to": 160
  }, {
    "from": 160,
    "label": "has",
    "to": 10
  }, {
    "from": 129,
    "label": "has",
    "to": 161
  }, {
    "from": 161,
    "label": "has",
    "to": 62
  }, {
    "from": 161,
    "label": "has",
    "to": 63
  }, {
    "from": 161,
    "label": "has",
    "to": 64
  }, {
    "from": 161,
    "label": "has",
    "to": 65
  }, {
    "from": 161,
    "label": "has",
    "to": 66
  }, {
    "from": 161,
    "label": "has",
    "to": 67
  }, {
    "from": 161,
    "label": "has",
    "to": 68
  }, {
    "from": 161,
    "label": "has",
    "to": 10
  }, {
    "from": 129,
    "label": "has",
    "to": 162
  }, {
    "from": 162,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 162,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 162,
    "label": "has",
    "to": 75
  }, {
    "from": 162,
    "label": "has",
    "to": 76
  }, {
    "from": 162,
    "label": "has",
    "to": 77
  }, {
    "from": 162,
    "label": "has",
    "to": 10
  }, {
    "from": 129,
    "label": "has",
    "to": 163
  }, {
    "from": 163,
    "label": "has",
    "to": 80
  }, {
    "from": 163,
    "label": "has",
    "to": 81
  }, {
    "from": 163,
    "label": "has",
    "to": 82
  }, {
    "from": 163,
    "label": "has",
    "to": 83
  }, {
    "from": 163,
    "label": "has",
    "to": 84
  }, {
    "from": 163,
    "label": "has",
    "to": 85
  }, {
    "from": 163,
    "label": "has",
    "to": 77
  }, {
    "from": 163,
    "label": "has",
    "to": 10
  }, {
    "from": 129,
    "label": "has",
    "to": 164
  }, {
    "from": 164,
    "label": "has",
    "to": 63
  }, {
    "from": 164,
    "label": "has",
    "to": 88
  }, {
    "from": 164,
    "label": "has",
    "to": 77
  }, {
    "from": 164,
    "label": "has",
    "to": 10
  }, {
    "from": 129,
    "label": "has",
    "to": 165
  }, {
    "from": 165,
    "label": "has",
    "to": 91
  }, {
    "from": 165,
    "label": "has",
    "to": 92
  }, {
    "from": 165,
    "label": "has",
    "to": 93
  }, {
    "from": 165,
    "label": "has",
    "to": 94
  }, {
    "from": 165,
    "label": "has",
    "to": 77
  }, {
    "from": 165,
    "label": "has",
    "to": 10
  }, {
    "from": 129,
    "label": "has",
    "to": 166
  }, {
    "from": 166,
    "label": "has",
    "to": 97
  }, {
    "from": 166,
    "label": "has",
    "to": 77
  }, {
    "from": 166,
    "label": "has",
    "to": 10
  }, {
    "from": 129,
    "label": "has",
    "to": 167
  }, {
    "from": 167,
    "label": "has",
    "to": 100
  }, {
    "from": 167,
    "label": "has",
    "to": 101
  }, {
    "from": 167,
    "label": "has",
    "to": 102
  }, {
    "from": 167,
    "label": "has",
    "to": 103
  }, {
    "from": 167,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 104,
    "label": "has",
    "to": 107
  }, {
    "from": 104,
    "label": "has",
    "to": 108
  }, {
    "from": 104,
    "label": "has",
    "to": 109
  }, {
    "from": 104,
    "label": "has",
    "to": 110
  }, {
    "from": 104,
    "label": "has",
    "to": 111
  }, {
    "from": 104,
    "label": "has",
    "to": 112
  }, {
    "from": 167,
    "label": "has",
    "to": 113
  }, {
    "from": 167,
    "label": "has",
    "to": 77
  }, {
    "from": 167,
    "label": "has",
    "to": 10
  }, {
    "from": 129,
    "label": "has",
    "to": 168
  }, {
    "from": 168,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 116,
    "label": "has",
    "to": 77
  }, {
    "from": 168,
    "label": "has",
    "to": 10
  }, {
    "from": 129,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 120,
    "label": "has",
    "to": 77
  }, {
    "from": 169,
    "label": "has",
    "to": 10
  }, {
    "from": 129,
    "label": "has",
    "to": 170
  }, {
    "from": 170,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 121
  }, {
    "from": 125,
    "label": "has",
    "to": 77
  }, {
    "from": 124,
    "label": "has",
    "to": 111
  }, {
    "from": 170,
    "label": "has",
    "to": 10
  }, {
    "from": 129,
    "label": "has",
    "to": 171
  }, {
    "from": 129,
    "label": "has",
    "to": 172
  }, {
    "from": 129,
    "label": "has",
    "to": 173
  }, {
    "from": 129,
    "label": "has",
    "to": 174
  }, {
    "from": 129,
    "label": "has",
    "to": 175
  }, {
    "from": 129,
    "label": "has",
    "to": 176
  }, {
    "from": 129,
    "label": "has",
    "to": 177
  }, {
    "from": 129,
    "label": "has",
    "to": 178
  }, {
    "from": 129,
    "label": "has",
    "to": 179
  }, {
    "from": 129,
    "label": "has",
    "to": 180
  }, {
    "from": 129,
    "label": "has",
    "to": 181
  }, {
    "from": 129,
    "label": "has",
    "to": 10
  }, {
    "from": 129,
    "label": "has",
    "to": 182
  }, {
    "from": 183,
    "label": "calls",
    "to": 193
  }, {
    "from": 183,
    "label": "calls",
    "to": 193
  }, {
    "from": 183,
    "label": "calls",
    "to": 193
  }, {
    "from": 183,
    "label": "calls",
    "to": 193
  }, {
    "from": 183,
    "label": "calls",
    "to": 195
  }, {
    "from": 183,
    "label": "calls",
    "to": 195
  }, {
    "from": 183,
    "label": "calls",
    "to": 195
  }, {
    "from": 183,
    "label": "calls",
    "to": 195
  }, {
    "from": 183,
    "label": "calls",
    "to": 195
  }, {
    "from": 183,
    "label": "calls",
    "to": 195
  }, {
    "from": 183,
    "label": "calls",
    "to": 195
  }, {
    "from": 183,
    "label": "calls",
    "to": 195
  }, {
    "from": 183,
    "label": "calls",
    "to": 195
  }, {
    "from": 183,
    "label": "calls",
    "to": 195
  }, {
    "from": 183,
    "label": "calls",
    "to": 195
  }, {
    "from": 183,
    "label": "calls",
    "to": 195
  }, {
    "from": 183,
    "label": "calls",
    "to": 195
  }, {
    "from": 183,
    "label": "calls",
    "to": 195
  }, {
    "from": 183,
    "label": "calls",
    "to": 198
  }, {
    "from": 183,
    "label": "calls",
    "to": 194
  }, {
    "from": 183,
    "label": "calls",
    "to": 194
  }, {
    "from": 183,
    "label": "calls",
    "to": 59
  }, {
    "from": 183,
    "label": "calls",
    "to": 59
  }, {
    "from": 183,
    "label": "calls",
    "to": 27
  }, {
    "from": 183,
    "label": "calls",
    "to": 27
  }, {
    "from": 183,
    "label": "calls",
    "to": 27
  }, {
    "from": 183,
    "label": "calls",
    "to": 196
  }, {
    "from": 183,
    "label": "calls",
    "to": 196
  }, {
    "from": 183,
    "label": "calls",
    "to": 196
  }, {
    "from": 183,
    "label": "calls",
    "to": 196
  }, {
    "from": 183,
    "label": "calls",
    "to": 196
  }, {
    "from": 183,
    "label": "calls",
    "to": 196
  }, {
    "from": 183,
    "label": "calls",
    "to": 196
  }, {
    "from": 183,
    "label": "calls",
    "to": 196
  }, {
    "from": 183,
    "label": "calls",
    "to": 196
  }, {
    "from": 183,
    "label": "calls",
    "to": 22
  }, {
    "from": 183,
    "label": "calls",
    "to": 22
  }, {
    "from": 183,
    "label": "calls",
    "to": 199
  }, {
    "from": 183,
    "label": "calls",
    "to": 185
  }, {
    "from": 183,
    "label": "calls",
    "to": 202
  }, {
    "from": 183,
    "label": "calls",
    "to": 197
  }, {
    "from": 183,
    "label": "calls",
    "to": 190
  }, {
    "from": 183,
    "label": "calls",
    "to": 190
  }, {
    "from": 183,
    "label": "calls",
    "to": 190
  }, {
    "from": 183,
    "label": "calls",
    "to": 190
  }, {
    "from": 183,
    "label": "calls",
    "to": 190
  }, {
    "from": 183,
    "label": "calls",
    "to": 190
  }, {
    "from": 183,
    "label": "calls",
    "to": 190
  }, {
    "from": 183,
    "label": "calls",
    "to": 190
  }, {
    "from": 183,
    "label": "calls",
    "to": 190
  }, {
    "from": 183,
    "label": "calls",
    "to": 187
  }, {
    "from": 183,
    "label": "calls",
    "to": 189
  }, {
    "from": 183,
    "label": "calls",
    "to": 189
  }, {
    "from": 183,
    "label": "calls",
    "to": 191
  }, {
    "from": 183,
    "label": "calls",
    "to": 191
  }, {
    "from": 183,
    "label": "calls",
    "to": 191
  }, {
    "from": 183,
    "label": "calls",
    "to": 192
  }, {
    "from": 183,
    "label": "calls",
    "to": 192
  }, {
    "from": 183,
    "label": "calls",
    "to": 192
  }, {
    "from": 183,
    "label": "calls",
    "to": 192
  }, {
    "from": 183,
    "label": "calls",
    "to": 192
  }, {
    "from": 183,
    "label": "calls",
    "to": 192
  }, {
    "from": 183,
    "label": "calls",
    "to": 192
  }, {
    "from": 183,
    "label": "calls",
    "to": 192
  }, {
    "from": 183,
    "label": "calls",
    "to": 192
  }, {
    "from": 183,
    "label": "calls",
    "to": 192
  }, {
    "from": 183,
    "label": "calls",
    "to": 192
  }, {
    "from": 183,
    "label": "calls",
    "to": 48
  }, {
    "from": 183,
    "label": "calls",
    "to": 200
  }, {
    "from": 183,
    "label": "calls",
    "to": 184
  }, {
    "from": 183,
    "label": "calls",
    "to": 184
  }, {
    "from": 183,
    "label": "calls",
    "to": 12
  }, {
    "from": 183,
    "label": "calls",
    "to": 12
  }, {
    "from": 183,
    "label": "calls",
    "to": 12
  }, {
    "from": 183,
    "label": "calls",
    "to": 201
  }, {
    "from": 183,
    "label": "calls",
    "to": 201
  }, {
    "from": 183,
    "label": "calls",
    "to": 203
  }, {
    "from": 183,
    "label": "calls",
    "to": 203
  }, {
    "from": 183,
    "label": "calls",
    "to": 203
  }, {
    "from": 183,
    "label": "calls",
    "to": 203
  }, {
    "from": 183,
    "label": "calls",
    "to": 203
  }, {
    "from": 183,
    "label": "calls",
    "to": 203
  }, {
    "from": 183,
    "label": "calls",
    "to": 41
  }, {
    "from": 183,
    "label": "calls",
    "to": 41
  }, {
    "from": 183,
    "label": "calls",
    "to": 41
  }, {
    "from": 183,
    "label": "calls",
    "to": 188
  }, {
    "from": 183,
    "label": "calls",
    "to": 188
  }, {
    "from": 183,
    "label": "calls",
    "to": 188
  }, {
    "from": 2,
    "label": "contains",
    "to": 183
  }, {
    "from": 183,
    "label": "declares",
    "to": 4
  }, {
    "from": 183,
    "label": "declares",
    "to": 12
  }, {
    "from": 183,
    "label": "declares",
    "to": 22
  }, {
    "from": 183,
    "label": "declares",
    "to": 27
  }, {
    "from": 183,
    "label": "declares",
    "to": 41
  }, {
    "from": 183,
    "label": "declares",
    "to": 48
  }, {
    "from": 183,
    "label": "declares",
    "to": 59
  }, {
    "from": 183,
    "label": "declares",
    "to": 61
  }, {
    "from": 183,
    "label": "declares",
    "to": 70
  }, {
    "from": 183,
    "label": "declares",
    "to": 79
  }, {
    "from": 183,
    "label": "declares",
    "to": 87
  }, {
    "from": 183,
    "label": "declares",
    "to": 90
  }, {
    "from": 183,
    "label": "declares",
    "to": 96
  }, {
    "from": 183,
    "label": "declares",
    "to": 99
  }, {
    "from": 183,
    "label": "declares",
    "to": 115
  }, {
    "from": 183,
    "label": "declares",
    "to": 119
  }, {
    "from": 183,
    "label": "declares",
    "to": 123
  }, {
    "from": 183,
    "label": "declares",
    "to": 127
  }, {
    "from": 183,
    "label": "declares",
    "to": 128
  }, {
    "from": 183,
    "label": "declares",
    "to": 129
  }, {
    "from": 2,
    "label": "contains",
    "to": 209
  }, {
    "from": 2,
    "label": "contains",
    "to": 210
  }, {
    "from": 209,
    "label": "initializes",
    "to": 211
  }, {
    "from": 209,
    "label": "initializes",
    "to": 212
  }, {
    "from": 212,
    "label": "assigns",
    "to": 213
  }, {
    "from": 209,
    "label": "initializes",
    "to": 214
  }, {
    "from": 214,
    "label": "assigns",
    "to": 215
  }, {
    "from": 210,
    "label": "initializes",
    "to": 216
  }, {
    "from": 216,
    "label": "requires",
    "to": 208
  }, {
    "from": 210,
    "label": "initializes",
    "to": 217
  }, {
    "from": 217,
    "label": "requires",
    "to": 207
  }, {
    "from": 210,
    "label": "initializes",
    "to": 218
  }, {
    "from": 218,
    "label": "requires",
    "to": 186
  }, {
    "from": 210,
    "label": "initializes",
    "to": 219
  }, {
    "from": 219,
    "label": "requires",
    "to": 3
  }, {
    "from": 210,
    "label": "initializes",
    "to": 220
  }, {
    "from": 220,
    "label": "requires",
    "to": 1
  }, {
    "from": 2,
    "label": "provides",
    "to": 221
  }, {
    "from": 221,
    "label": "provides",
    "to": 222
  }, {
    "from": 204,
    "label": "contains",
    "to": 128
  }, {
    "from": 205,
    "label": "contains",
    "to": 128
  }, {
    "from": 206,
    "label": "contains",
    "to": 128
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "base",
    "type": "module"
  }, {
    "id": 2,
    "text": "gtest",
    "type": "module"
  }, {
    "id": 3,
    "text": "busted",
    "type": "module"
  }, {
    "id": 4,
    "text": "function(pending)\r\n    local name = pending.name\r\n    local string = ''\r\n\r\n    if type(pending.message) == 'string' then\r\n      string = string .. pending.message .. '\\n'\r\n    elseif pending.message ~= nil then\r\n      string = string .. pretty.write(pending.message) .. '\\n'\r\n    end\r\n\r\n    return string\r\n  end",
    "type": "function"
  }, {
    "id": 5,
    "text": "local name = pending.name",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "local string = ''",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "if type(pending.message) == 'string' then\r\n      string = string .. pending.message .. '\\n'\r\n    elseif pending.message ~= nil then\r\n      string = string .. pretty.write(pending.message) .. '\\n'\r\n    end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "string = string .. pending.message .. '\\n'",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "string = string .. pretty.write(pending.message) .. '\\n'",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function(failure)\r\n    local string = failure.randomseed and ('Random seed: ' .. failure.randomseed .. '\\n') or ''\r\n    if type(failure.message) == 'string' then\r\n      string = string .. failure.message\r\n    elseif failure.message == nil then\r\n      string = string .. 'Nil error'\r\n    else\r\n      string = string .. pretty.write(failure.message)\r\n    end\r\n\r\n    string = string .. '\\n'\r\n\r\n    if options.verbose and failure.trace and failure.trace.traceback then\r\n      string = string .. failure.trace.traceback .. '\\n'\r\n    end\r\n\r\n    return string\r\n  end",
    "type": "function"
  }, {
    "id": 13,
    "text": "local string = failure.randomseed and ('Random seed: ' .. failure.randomseed .. '\\n') or ''",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "if type(failure.message) == 'string' then\r\n      string = string .. failure.message\r\n    elseif failure.message == nil then\r\n      string = string .. 'Nil error'\r\n    else\r\n      string = string .. pretty.write(failure.message)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "string = string .. failure.message",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "string = string .. 'Nil error'",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "string = string .. pretty.write(failure.message)",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "string = string .. '\\n'",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "if options.verbose and failure.trace and failure.trace.traceback then\r\n      string = string .. failure.trace.traceback .. '\\n'\r\n    end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "string = string .. failure.trace.traceback .. '\\n'",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function(element)\r\n    local fileline = ''\r\n    if element.trace or element.trace.short_src then\r\n      fileline = colors.cyan(element.trace.short_src) .. ' @ ' ..\r\n                 colors.cyan(element.trace.currentline) .. ': '\r\n    end\r\n    return fileline\r\n  end",
    "type": "function"
  }, {
    "id": 23,
    "text": "local fileline = ''",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "if element.trace or element.trace.short_src then\r\n      fileline = colors.cyan(element.trace.short_src) .. ' @ ' ..\r\n                 colors.cyan(element.trace.currentline) .. ': '\r\n    end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "fileline = colors.cyan(element.trace.short_src) .. ' @ ' ..\r\n                 colors.cyan(element.trace.currentline) .. ': '",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function(status, count, list, getDescription)\r\n    local string = ''\r\n    local header = summaryStrings[status].header\r\n    if count > 0 and header then\r\n      local tests = (count == 1 and 'test' or 'tests')\r\n      local errors = (count == 1 and 'error' or 'errors')\r\n      string = header:format(count, status == 'error' and errors or tests)\r\n\r\n      local testString = summaryStrings[status].test\r\n      if testString then\r\n        for _, t in ipairs(list) do\r\n          local fullname = getFileLine(t.element) .. colors.bright(t.name)\r\n          string = string .. testString:format(fullname)\r\n          if options.deferPrint then\r\n            string = string .. getDescription(t)\r\n          end\r\n        end\r\n      end\r\n    end\r\n    return string\r\n  end",
    "type": "function"
  }, {
    "id": 28,
    "text": "local header = summaryStrings[status].header",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "if count > 0 and header then\r\n      local tests = (count == 1 and 'test' or 'tests')\r\n      local errors = (count == 1 and 'error' or 'errors')\r\n      string = header:format(count, status == 'error' and errors or tests)\r\n\r\n      local testString = summaryStrings[status].test\r\n      if testString then\r\n        for _, t in ipairs(list) do\r\n          local fullname = getFileLine(t.element) .. colors.bright(t.name)\r\n          string = string .. testString:format(fullname)\r\n          if options.deferPrint then\r\n            string = string .. getDescription(t)\r\n          end\r\n        end\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "local tests = (count == 1 and 'test' or 'tests')",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "local errors = (count == 1 and 'error' or 'errors')",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "string = header:format(count, status == 'error' and errors or tests)",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "local testString = summaryStrings[status].test",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "if testString then\r\n        for _, t in ipairs(list) do\r\n          local fullname = getFileLine(t.element) .. colors.bright(t.name)\r\n          string = string .. testString:format(fullname)\r\n          if options.deferPrint then\r\n            string = string .. getDescription(t)\r\n          end\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "for _, t in ipairs(list) do\r\n          local fullname = getFileLine(t.element) .. colors.bright(t.name)\r\n          string = string .. testString:format(fullname)\r\n          if options.deferPrint then\r\n            string = string .. getDescription(t)\r\n          end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 36,
    "text": "local fullname = getFileLine(t.element) .. colors.bright(t.name)",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "string = string .. testString:format(fullname)",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "if options.deferPrint then\r\n            string = string .. getDescription(t)\r\n          end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "string = string .. getDescription(t)",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function(status, count)\r\n    local string = ''\r\n    local footer = summaryStrings[status].footer\r\n    if count > 0 and footer then\r\n      local tests = (count == 1 and 'TEST' or 'TESTS')\r\n      local errors = (count == 1 and 'ERROR' or 'ERRORS')\r\n      string = footer:format(count, status == 'error' and errors or tests)\r\n    end\r\n    return string\r\n  end",
    "type": "function"
  }, {
    "id": 42,
    "text": "local footer = summaryStrings[status].footer",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "if count > 0 and footer then\r\n      local tests = (count == 1 and 'TEST' or 'TESTS')\r\n      local errors = (count == 1 and 'ERROR' or 'ERRORS')\r\n      string = footer:format(count, status == 'error' and errors or tests)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "local tests = (count == 1 and 'TEST' or 'TESTS')",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "local errors = (count == 1 and 'ERROR' or 'ERRORS')",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "string = footer:format(count, status == 'error' and errors or tests)",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function()\r\n    local tests = (successCount == 1 and 'test' or 'tests')\r\n    local string = successStatus:format(successCount, tests)\r\n\r\n    string = string .. getTestList('skipped', skippedCount, handler.pendings, pendingDescription)\r\n    string = string .. getTestList('failure', failureCount, handler.failures, failureDescription)\r\n    string = string .. getTestList('error', errorCount, handler.errors, failureDescription)\r\n\r\n    string = string .. ((skippedCount + failureCount + errorCount) > 0 and '\\n' or '')\r\n    string = string .. getSummary('skipped', skippedCount)\r\n    string = string .. getSummary('failure', failureCount)\r\n    string = string .. getSummary('error', errorCount)\r\n\r\n    return string\r\n  end",
    "type": "function"
  }, {
    "id": 49,
    "text": "local tests = (successCount == 1 and 'test' or 'tests')",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "local string = successStatus:format(successCount, tests)",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "string = string .. getTestList('skipped', skippedCount, handler.pendings, pendingDescription)",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "string = string .. getTestList('failure', failureCount, handler.failures, failureDescription)",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "string = string .. getTestList('error', errorCount, handler.errors, failureDescription)",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "string = string .. ((skippedCount + failureCount + errorCount) > 0 and '\\n' or '')",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "string = string .. getSummary('skipped', skippedCount)",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "string = string .. getSummary('failure', failureCount)",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "string = string .. getSummary('error', errorCount)",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function(element)\r\n    return getFileLine(element) .. colors.bright(handler.getFullName(element))\r\n  end",
    "type": "function"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function()\r\n    fileCount = 0\r\n    fileTestCount = 0\r\n    testCount = 0\r\n    successCount = 0\r\n    skippedCount = 0\r\n    failureCount = 0\r\n    errorCount = 0\r\n\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 62,
    "text": "fileCount = 0",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "fileTestCount = 0",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "testCount = 0",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "successCount = 0",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "skippedCount = 0",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "failureCount = 0",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "errorCount = 0",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function(suite, count, total, randomseed)\r\n    if total > 1 then\r\n      io.write(repeatSuiteString:format(count, total))\r\n    end\r\n    if randomseed then\r\n      io.write(randomizeString:format(randomseed))\r\n    end\r\n    io.write(suiteStartString)\r\n    io.write(globalSetup)\r\n    io.flush()\r\n\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 71,
    "text": "if total > 1 then\r\n      io.write(repeatSuiteString:format(count, total))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 72,
    "text": "io.write(repeatSuiteString:format(count, total))",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "if randomseed then\r\n      io.write(randomizeString:format(randomseed))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "io.write(randomizeString:format(randomseed))",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "io.write(suiteStartString)",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "io.write(globalSetup)",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "io.flush()",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "function(suite, count, total)\r\n    local elapsedTime_ms = suite.duration * 1000\r\n    local tests = (testCount == 1 and 'test' or 'tests')\r\n    local files = (fileCount == 1 and 'file' or 'files')\r\n    io.write(globalTeardown)\r\n    io.write(suiteEndString:format(testCount, tests, fileCount, files, elapsedTime_ms))\r\n    io.write(getSummaryString())\r\n    io.flush()\r\n\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 80,
    "text": "local elapsedTime_ms = suite.duration * 1000",
    "type": "statement:localassign"
  }, {
    "id": 81,
    "text": "local tests = (testCount == 1 and 'test' or 'tests')",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "local files = (fileCount == 1 and 'file' or 'files')",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "io.write(globalTeardown)",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "io.write(suiteEndString:format(testCount, tests, fileCount, files, elapsedTime_ms))",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "io.write(getSummaryString())",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "function(file)\r\n    fileTestCount = 0\r\n    io.write(fileStartString:format(file.name))\r\n    io.flush()\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 88,
    "text": "io.write(fileStartString:format(file.name))",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 90,
    "text": "function(file)\r\n    local elapsedTime_ms = file.duration * 1000\r\n    local tests = (fileTestCount == 1 and 'test' or 'tests')\r\n    fileCount = fileCount + 1\r\n    io.write(fileEndString:format(fileTestCount, tests, file.name, elapsedTime_ms))\r\n    io.flush()\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 91,
    "text": "local elapsedTime_ms = file.duration * 1000",
    "type": "statement:localassign"
  }, {
    "id": 92,
    "text": "local tests = (fileTestCount == 1 and 'test' or 'tests')",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "fileCount = fileCount + 1",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "io.write(fileEndString:format(fileTestCount, tests, file.name, elapsedTime_ms))",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "function(element, parent)\r\n    io.write(runString:format(getFullName(element)))\r\n    io.flush()\r\n\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 97,
    "text": "io.write(runString:format(getFullName(element)))",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 99,
    "text": "function(element, parent, status, debug)\r\n    local elapsedTime_ms = element.duration * 1000\r\n    local string\r\n\r\n    fileTestCount = fileTestCount + 1\r\n    testCount = testCount + 1\r\n    if status == 'success' then\r\n      successCount = successCount + 1\r\n      string = successString\r\n    elseif status == 'pending' then\r\n      skippedCount = skippedCount + 1\r\n      string = skippedString\r\n    elseif status == 'failure' then\r\n      failureCount = failureCount + 1\r\n      string = failureString\r\n    elseif status == 'error' then\r\n      errorCount = errorCount + 1\r\n      string = errorString\r\n    end\r\n\r\n    io.write(string:format(getFullName(element), elapsedTime_ms))\r\n    io.flush()\r\n\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 100,
    "text": "local elapsedTime_ms = element.duration * 1000",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "local string",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "fileTestCount = fileTestCount + 1",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "testCount = testCount + 1",
    "type": "statement:assign"
  }, {
    "id": 104,
    "text": "if status == 'success' then\r\n      successCount = successCount + 1\r\n      string = successString\r\n    elseif status == 'pending' then\r\n      skippedCount = skippedCount + 1\r\n      string = skippedString\r\n    elseif status == 'failure' then\r\n      failureCount = failureCount + 1\r\n      string = failureString\r\n    elseif status == 'error' then\r\n      errorCount = errorCount + 1\r\n      string = errorString\r\n    end",
    "type": "statement:if"
  }, {
    "id": 105,
    "text": "successCount = successCount + 1",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "string = successString",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "skippedCount = skippedCount + 1",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "string = skippedString",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "failureCount = failureCount + 1",
    "type": "statement:assign"
  }, {
    "id": 110,
    "text": "string = failureString",
    "type": "statement:assign"
  }, {
    "id": 111,
    "text": "errorCount = errorCount + 1",
    "type": "statement:assign"
  }, {
    "id": 112,
    "text": "string = errorString",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "io.write(string:format(getFullName(element), elapsedTime_ms))",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 115,
    "text": "function(element, parent, message, debug)\r\n    if not options.deferPrint then\r\n      io.write(failureDescription(handler.failures[#handler.failures]))\r\n      io.flush()\r\n    end\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 116,
    "text": "if not options.deferPrint then\r\n      io.write(failureDescription(handler.failures[#handler.failures]))\r\n      io.flush()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 117,
    "text": "io.write(failureDescription(handler.failures[#handler.failures]))",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 119,
    "text": "function(element, parent, message, debug)\r\n    if not options.deferPrint then\r\n      io.write(failureDescription(handler.errors[#handler.errors]))\r\n      io.flush()\r\n    end\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 120,
    "text": "if not options.deferPrint then\r\n      io.write(failureDescription(handler.errors[#handler.errors]))\r\n      io.flush()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 121,
    "text": "io.write(failureDescription(handler.errors[#handler.errors]))",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 123,
    "text": "function(element, parent, message, debug)\r\n    if element.descriptor ~= 'it' then\r\n      if not options.deferPrint then\r\n        io.write(failureDescription(handler.errors[#handler.errors]))\r\n        io.flush()\r\n      end\r\n      errorCount = errorCount + 1\r\n    end\r\n\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 124,
    "text": "if element.descriptor ~= 'it' then\r\n      if not options.deferPrint then\r\n        io.write(failureDescription(handler.errors[#handler.errors]))\r\n        io.flush()\r\n      end\r\n      errorCount = errorCount + 1\r\n    end",
    "type": "statement:if"
  }, {
    "id": 125,
    "text": "if not options.deferPrint then\r\n        io.write(failureDescription(handler.errors[#handler.errors]))\r\n        io.flush()\r\n      end",
    "type": "statement:if"
  }, {
    "id": 126,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 127,
    "text": "function(s) return s end",
    "type": "function"
  }, {
    "id": 128,
    "text": "function() return function(s) return s end end",
    "type": "function"
  }, {
    "id": 129,
    "text": "function(options)\r\n  local busted = require 'busted'\r\n  local handler = require 'busted.outputHandlers.base'()\r\n\r\n  local repeatSuiteString = '\\nRepeating all tests (run %u of %u) . . .\\n\\n'\r\n  local randomizeString  = colors.yellow('Note: Randomizing test order with a seed of %u.\\n')\r\n  local suiteStartString = colors.green  ('[==========]') .. ' Running tests from scanned files.\\n'\r\n  local globalSetup      = colors.green  ('[----------]') .. ' Global test environment setup.\\n'\r\n  local fileStartString  = colors.green  ('[----------]') .. ' Running tests from %s\\n'\r\n  local runString        = colors.green  ('[ RUN      ]') .. ' %s\\n'\r\n  local successString    = colors.green  ('[       OK ]') .. ' %s (%.2f ms)\\n'\r\n  local skippedString    = colors.yellow ('[ SKIPPED  ]') .. ' %s (%.2f ms)\\n'\r\n  local failureString    = colors.red    ('[  FAILED  ]') .. ' %s (%.2f ms)\\n'\r\n  local errorString      = colors.magenta('[  ERROR   ]') .. ' %s (%.2f ms)\\n'\r\n  local fileEndString    = colors.green  ('[----------]') .. ' %u %s from %s (%.2f ms total)\\n\\n'\r\n  local globalTeardown   = colors.green  ('[----------]') .. ' Global test environment teardown.\\n'\r\n  local suiteEndString   = colors.green  ('[==========]') .. ' %u %s from %u test %s ran. (%.2f ms total)\\n'\r\n  local successStatus    = colors.green  ('[  PASSED  ]') .. ' %u %s.\\n'\r\n\r\n  local summaryStrings = {\r\n    skipped = {\r\n      header = colors.yellow ('[ SKIPPED  ]') .. ' %u %s, listed below:\\n',\r\n      test   = colors.yellow ('[ SKIPPED  ]') .. ' %s\\n',\r\n      footer = ' %u SKIPPED %s\\n',\r\n    },\r\n\r\n    failure = {\r\n      header = colors.red    ('[  FAILED  ]') .. ' %u %s, listed below:\\n',\r\n      test   = colors.red    ('[  FAILED  ]') .. ' %s\\n',\r\n      footer = ' %u FAILED %s\\n',\r\n    },\r\n\r\n    error = {\r\n      header = colors.magenta('[  ERROR   ]') .. ' %u %s, listed below:\\n',\r\n      test   = colors.magenta('[  ERROR   ]') .. ' %s\\n',\r\n      footer = ' %u %s\\n',\r\n    },\r\n  }\r\n\r\n  local fileCount = 0\r\n  local fileTestCount = 0\r\n  local testCount = 0\r\n  local successCount = 0\r\n  local skippedCount = 0\r\n  local failureCount = 0\r\n  local errorCount = 0\r\n\r\n  local pendingDescription = function(pending)\r\n    local name = pending.name\r\n    local string = ''\r\n\r\n    if type(pending.message) == 'string' then\r\n      string = string .. pending.message .. '\\n'\r\n    elseif pending.message ~= nil then\r\n      string = string .. pretty.write(pending.message) .. '\\n'\r\n    end\r\n\r\n    return string\r\n  end\r\n\r\n  local failureDescription = function(failure)\r\n    local string = failure.randomseed and ('Random seed: ' .. failure.randomseed .. '\\n') or ''\r\n    if type(failure.message) == 'string' then\r\n      string = string .. failure.message\r\n    elseif failure.message == nil then\r\n      string = string .. 'Nil error'\r\n    else\r\n      string = string .. pretty.write(failure.message)\r\n    end\r\n\r\n    string = string .. '\\n'\r\n\r\n    if options.verbose and failure.trace and failure.trace.traceback then\r\n      string = string .. failure.trace.traceback .. '\\n'\r\n    end\r\n\r\n    return string\r\n  end\r\n\r\n  local getFileLine = function(element)\r\n    local fileline = ''\r\n    if element.trace or element.trace.short_src then\r\n      fileline = colors.cyan(element.trace.short_src) .. ' @ ' ..\r\n                 colors.cyan(element.trace.currentline) .. ': '\r\n    end\r\n    return fileline\r\n  end\r\n\r\n  local getTestList = function(status, count, list, getDescription)\r\n    local string = ''\r\n    local header = summaryStrings[status].header\r\n    if count > 0 and header then\r\n      local tests = (count == 1 and 'test' or 'tests')\r\n      local errors = (count == 1 and 'error' or 'errors')\r\n      string = header:format(count, status == 'error' and errors or tests)\r\n\r\n      local testString = summaryStrings[status].test\r\n      if testString then\r\n        for _, t in ipairs(list) do\r\n          local fullname = getFileLine(t.element) .. colors.bright(t.name)\r\n          string = string .. testString:format(fullname)\r\n          if options.deferPrint then\r\n            string = string .. getDescription(t)\r\n          end\r\n        end\r\n      end\r\n    end\r\n    return string\r\n  end\r\n\r\n  local getSummary = function(status, count)\r\n    local string = ''\r\n    local footer = summaryStrings[status].footer\r\n    if count > 0 and footer then\r\n      local tests = (count == 1 and 'TEST' or 'TESTS')\r\n      local errors = (count == 1 and 'ERROR' or 'ERRORS')\r\n      string = footer:format(count, status == 'error' and errors or tests)\r\n    end\r\n    return string\r\n  end\r\n\r\n  local getSummaryString = function()\r\n    local tests = (successCount == 1 and 'test' or 'tests')\r\n    local string = successStatus:format(successCount, tests)\r\n\r\n    string = string .. getTestList('skipped', skippedCount, handler.pendings, pendingDescription)\r\n    string = string .. getTestList('failure', failureCount, handler.failures, failureDescription)\r\n    string = string .. getTestList('error', errorCount, handler.errors, failureDescription)\r\n\r\n    string = string .. ((skippedCount + failureCount + errorCount) > 0 and '\\n' or '')\r\n    string = string .. getSummary('skipped', skippedCount)\r\n    string = string .. getSummary('failure', failureCount)\r\n    string = string .. getSummary('error', errorCount)\r\n\r\n    return string\r\n  end\r\n\r\n  local getFullName = function(element)\r\n    return getFileLine(element) .. colors.bright(handler.getFullName(element))\r\n  end\r\n\r\n  handler.suiteReset = function()\r\n    fileCount = 0\r\n    fileTestCount = 0\r\n    testCount = 0\r\n    successCount = 0\r\n    skippedCount = 0\r\n    failureCount = 0\r\n    errorCount = 0\r\n\r\n    return nil, true\r\n  end\r\n\r\n  handler.suiteStart = function(suite, count, total, randomseed)\r\n    if total > 1 then\r\n      io.write(repeatSuiteString:format(count, total))\r\n    end\r\n    if randomseed then\r\n      io.write(randomizeString:format(randomseed))\r\n    end\r\n    io.write(suiteStartString)\r\n    io.write(globalSetup)\r\n    io.flush()\r\n\r\n    return nil, true\r\n  end\r\n\r\n  handler.suiteEnd = function(suite, count, total)\r\n    local elapsedTime_ms = suite.duration * 1000\r\n    local tests = (testCount == 1 and 'test' or 'tests')\r\n    local files = (fileCount == 1 and 'file' or 'files')\r\n    io.write(globalTeardown)\r\n    io.write(suiteEndString:format(testCount, tests, fileCount, files, elapsedTime_ms))\r\n    io.write(getSummaryString())\r\n    io.flush()\r\n\r\n    return nil, true\r\n  end\r\n\r\n  handler.fileStart = function(file)\r\n    fileTestCount = 0\r\n    io.write(fileStartString:format(file.name))\r\n    io.flush()\r\n    return nil, true\r\n  end\r\n\r\n  handler.fileEnd = function(file)\r\n    local elapsedTime_ms = file.duration * 1000\r\n    local tests = (fileTestCount == 1 and 'test' or 'tests')\r\n    fileCount = fileCount + 1\r\n    io.write(fileEndString:format(fileTestCount, tests, file.name, elapsedTime_ms))\r\n    io.flush()\r\n    return nil, true\r\n  end\r\n\r\n  handler.testStart = function(element, parent)\r\n    io.write(runString:format(getFullName(element)))\r\n    io.flush()\r\n\r\n    return nil, true\r\n  end\r\n\r\n  handler.testEnd = function(element, parent, status, debug)\r\n    local elapsedTime_ms = element.duration * 1000\r\n    local string\r\n\r\n    fileTestCount = fileTestCount + 1\r\n    testCount = testCount + 1\r\n    if status == 'success' then\r\n      successCount = successCount + 1\r\n      string = successString\r\n    elseif status == 'pending' then\r\n      skippedCount = skippedCount + 1\r\n      string = skippedString\r\n    elseif status == 'failure' then\r\n      failureCount = failureCount + 1\r\n      string = failureString\r\n    elseif status == 'error' then\r\n      errorCount = errorCount + 1\r\n      string = errorString\r\n    end\r\n\r\n    io.write(string:format(getFullName(element), elapsedTime_ms))\r\n    io.flush()\r\n\r\n    return nil, true\r\n  end\r\n\r\n  handler.testFailure = function(element, parent, message, debug)\r\n    if not options.deferPrint then\r\n      io.write(failureDescription(handler.failures[#handler.failures]))\r\n      io.flush()\r\n    end\r\n    return nil, true\r\n  end\r\n\r\n  handler.testError = function(element, parent, message, debug)\r\n    if not options.deferPrint then\r\n      io.write(failureDescription(handler.errors[#handler.errors]))\r\n      io.flush()\r\n    end\r\n    return nil, true\r\n  end\r\n\r\n  handler.error = function(element, parent, message, debug)\r\n    if element.descriptor ~= 'it' then\r\n      if not options.deferPrint then\r\n        io.write(failureDescription(handler.errors[#handler.errors]))\r\n        io.flush()\r\n      end\r\n      errorCount = errorCount + 1\r\n    end\r\n\r\n    return nil, true\r\n  end\r\n\r\n  busted.subscribe({ 'suite', 'reset' }, handler.suiteReset)\r\n  busted.subscribe({ 'suite', 'start' }, handler.suiteStart)\r\n  busted.subscribe({ 'suite', 'end' }, handler.suiteEnd)\r\n  busted.subscribe({ 'file', 'start' }, handler.fileStart)\r\n  busted.subscribe({ 'file', 'end' }, handler.fileEnd)\r\n  busted.subscribe({ 'test', 'start' }, handler.testStart, { predicate = handler.cancelOnPending })\r\n  busted.subscribe({ 'test', 'end' }, handler.testEnd, { predicate = handler.cancelOnPending })\r\n  busted.subscribe({ 'failure', 'it' }, handler.testFailure)\r\n  busted.subscribe({ 'error', 'it' }, handler.testError)\r\n  busted.subscribe({ 'failure' }, handler.error)\r\n  busted.subscribe({ 'error' }, handler.error)\r\n\r\n  return handler\r\nend",
    "type": "function"
  }, {
    "id": 130,
    "text": "local busted = require 'busted'",
    "type": "statement:localassign"
  }, {
    "id": 131,
    "text": "local handler = require 'busted.outputHandlers.base'()",
    "type": "statement:localassign"
  }, {
    "id": 132,
    "text": "local repeatSuiteString = '\\nRepeating all tests (run %u of %u) . . .\\n\\n'",
    "type": "statement:localassign"
  }, {
    "id": 133,
    "text": "local randomizeString  = colors.yellow('Note: Randomizing test order with a seed of %u.\\n')",
    "type": "statement:localassign"
  }, {
    "id": 134,
    "text": "local suiteStartString = colors.green  ('[==========]') .. ' Running tests from scanned files.\\n'",
    "type": "statement:localassign"
  }, {
    "id": 135,
    "text": "local globalSetup      = colors.green  ('[----------]') .. ' Global test environment setup.\\n'",
    "type": "statement:localassign"
  }, {
    "id": 136,
    "text": "local fileStartString  = colors.green  ('[----------]') .. ' Running tests from %s\\n'",
    "type": "statement:localassign"
  }, {
    "id": 137,
    "text": "local runString        = colors.green  ('[ RUN      ]') .. ' %s\\n'",
    "type": "statement:localassign"
  }, {
    "id": 138,
    "text": "local successString    = colors.green  ('[       OK ]') .. ' %s (%.2f ms)\\n'",
    "type": "statement:localassign"
  }, {
    "id": 139,
    "text": "local skippedString    = colors.yellow ('[ SKIPPED  ]') .. ' %s (%.2f ms)\\n'",
    "type": "statement:localassign"
  }, {
    "id": 140,
    "text": "local failureString    = colors.red    ('[  FAILED  ]') .. ' %s (%.2f ms)\\n'",
    "type": "statement:localassign"
  }, {
    "id": 141,
    "text": "local errorString      = colors.magenta('[  ERROR   ]') .. ' %s (%.2f ms)\\n'",
    "type": "statement:localassign"
  }, {
    "id": 142,
    "text": "local fileEndString    = colors.green  ('[----------]') .. ' %u %s from %s (%.2f ms total)\\n\\n'",
    "type": "statement:localassign"
  }, {
    "id": 143,
    "text": "local globalTeardown   = colors.green  ('[----------]') .. ' Global test environment teardown.\\n'",
    "type": "statement:localassign"
  }, {
    "id": 144,
    "text": "local suiteEndString   = colors.green  ('[==========]') .. ' %u %s from %u test %s ran. (%.2f ms total)\\n'",
    "type": "statement:localassign"
  }, {
    "id": 145,
    "text": "local successStatus    = colors.green  ('[  PASSED  ]') .. ' %u %s.\\n'",
    "type": "statement:localassign"
  }, {
    "id": 146,
    "text": "local summaryStrings = {\r\n    skipped = {\r\n      header = colors.yellow ('[ SKIPPED  ]') .. ' %u %s, listed below:\\n',\r\n      test   = colors.yellow ('[ SKIPPED  ]') .. ' %s\\n',\r\n      footer = ' %u SKIPPED %s\\n',\r\n    },\r\n\r\n    failure = {\r\n      header = colors.red    ('[  FAILED  ]') .. ' %u %s, listed below:\\n',\r\n      test   = colors.red    ('[  FAILED  ]') .. ' %s\\n',\r\n      footer = ' %u FAILED %s\\n',\r\n    },\r\n\r\n    error = {\r\n      header = colors.magenta('[  ERROR   ]') .. ' %u %s, listed below:\\n',\r\n      test   = colors.magenta('[  ERROR   ]') .. ' %s\\n',\r\n      footer = ' %u %s\\n',\r\n    },\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 147,
    "text": "local fileCount = 0",
    "type": "statement:localassign"
  }, {
    "id": 148,
    "text": "local fileTestCount = 0",
    "type": "statement:localassign"
  }, {
    "id": 149,
    "text": "local testCount = 0",
    "type": "statement:localassign"
  }, {
    "id": 150,
    "text": "local successCount = 0",
    "type": "statement:localassign"
  }, {
    "id": 151,
    "text": "local skippedCount = 0",
    "type": "statement:localassign"
  }, {
    "id": 152,
    "text": "local failureCount = 0",
    "type": "statement:localassign"
  }, {
    "id": 153,
    "text": "local errorCount = 0",
    "type": "statement:localassign"
  }, {
    "id": 154,
    "text": "local pendingDescription = function(pending)\r\n    local name = pending.name\r\n    local string = ''\r\n\r\n    if type(pending.message) == 'string' then\r\n      string = string .. pending.message .. '\\n'\r\n    elseif pending.message ~= nil then\r\n      string = string .. pretty.write(pending.message) .. '\\n'\r\n    end\r\n\r\n    return string\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 155,
    "text": "local failureDescription = function(failure)\r\n    local string = failure.randomseed and ('Random seed: ' .. failure.randomseed .. '\\n') or ''\r\n    if type(failure.message) == 'string' then\r\n      string = string .. failure.message\r\n    elseif failure.message == nil then\r\n      string = string .. 'Nil error'\r\n    else\r\n      string = string .. pretty.write(failure.message)\r\n    end\r\n\r\n    string = string .. '\\n'\r\n\r\n    if options.verbose and failure.trace and failure.trace.traceback then\r\n      string = string .. failure.trace.traceback .. '\\n'\r\n    end\r\n\r\n    return string\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 156,
    "text": "local getFileLine = function(element)\r\n    local fileline = ''\r\n    if element.trace or element.trace.short_src then\r\n      fileline = colors.cyan(element.trace.short_src) .. ' @ ' ..\r\n                 colors.cyan(element.trace.currentline) .. ': '\r\n    end\r\n    return fileline\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 157,
    "text": "local getTestList = function(status, count, list, getDescription)\r\n    local string = ''\r\n    local header = summaryStrings[status].header\r\n    if count > 0 and header then\r\n      local tests = (count == 1 and 'test' or 'tests')\r\n      local errors = (count == 1 and 'error' or 'errors')\r\n      string = header:format(count, status == 'error' and errors or tests)\r\n\r\n      local testString = summaryStrings[status].test\r\n      if testString then\r\n        for _, t in ipairs(list) do\r\n          local fullname = getFileLine(t.element) .. colors.bright(t.name)\r\n          string = string .. testString:format(fullname)\r\n          if options.deferPrint then\r\n            string = string .. getDescription(t)\r\n          end\r\n        end\r\n      end\r\n    end\r\n    return string\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 158,
    "text": "local getSummary = function(status, count)\r\n    local string = ''\r\n    local footer = summaryStrings[status].footer\r\n    if count > 0 and footer then\r\n      local tests = (count == 1 and 'TEST' or 'TESTS')\r\n      local errors = (count == 1 and 'ERROR' or 'ERRORS')\r\n      string = footer:format(count, status == 'error' and errors or tests)\r\n    end\r\n    return string\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 159,
    "text": "local getSummaryString = function()\r\n    local tests = (successCount == 1 and 'test' or 'tests')\r\n    local string = successStatus:format(successCount, tests)\r\n\r\n    string = string .. getTestList('skipped', skippedCount, handler.pendings, pendingDescription)\r\n    string = string .. getTestList('failure', failureCount, handler.failures, failureDescription)\r\n    string = string .. getTestList('error', errorCount, handler.errors, failureDescription)\r\n\r\n    string = string .. ((skippedCount + failureCount + errorCount) > 0 and '\\n' or '')\r\n    string = string .. getSummary('skipped', skippedCount)\r\n    string = string .. getSummary('failure', failureCount)\r\n    string = string .. getSummary('error', errorCount)\r\n\r\n    return string\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 160,
    "text": "local getFullName = function(element)\r\n    return getFileLine(element) .. colors.bright(handler.getFullName(element))\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 161,
    "text": "handler.suiteReset = function()\r\n    fileCount = 0\r\n    fileTestCount = 0\r\n    testCount = 0\r\n    successCount = 0\r\n    skippedCount = 0\r\n    failureCount = 0\r\n    errorCount = 0\r\n\r\n    return nil, true\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 162,
    "text": "handler.suiteStart = function(suite, count, total, randomseed)\r\n    if total > 1 then\r\n      io.write(repeatSuiteString:format(count, total))\r\n    end\r\n    if randomseed then\r\n      io.write(randomizeString:format(randomseed))\r\n    end\r\n    io.write(suiteStartString)\r\n    io.write(globalSetup)\r\n    io.flush()\r\n\r\n    return nil, true\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 163,
    "text": "handler.suiteEnd = function(suite, count, total)\r\n    local elapsedTime_ms = suite.duration * 1000\r\n    local tests = (testCount == 1 and 'test' or 'tests')\r\n    local files = (fileCount == 1 and 'file' or 'files')\r\n    io.write(globalTeardown)\r\n    io.write(suiteEndString:format(testCount, tests, fileCount, files, elapsedTime_ms))\r\n    io.write(getSummaryString())\r\n    io.flush()\r\n\r\n    return nil, true\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 164,
    "text": "handler.fileStart = function(file)\r\n    fileTestCount = 0\r\n    io.write(fileStartString:format(file.name))\r\n    io.flush()\r\n    return nil, true\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 165,
    "text": "handler.fileEnd = function(file)\r\n    local elapsedTime_ms = file.duration * 1000\r\n    local tests = (fileTestCount == 1 and 'test' or 'tests')\r\n    fileCount = fileCount + 1\r\n    io.write(fileEndString:format(fileTestCount, tests, file.name, elapsedTime_ms))\r\n    io.flush()\r\n    return nil, true\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 166,
    "text": "handler.testStart = function(element, parent)\r\n    io.write(runString:format(getFullName(element)))\r\n    io.flush()\r\n\r\n    return nil, true\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 167,
    "text": "handler.testEnd = function(element, parent, status, debug)\r\n    local elapsedTime_ms = element.duration * 1000\r\n    local string\r\n\r\n    fileTestCount = fileTestCount + 1\r\n    testCount = testCount + 1\r\n    if status == 'success' then\r\n      successCount = successCount + 1\r\n      string = successString\r\n    elseif status == 'pending' then\r\n      skippedCount = skippedCount + 1\r\n      string = skippedString\r\n    elseif status == 'failure' then\r\n      failureCount = failureCount + 1\r\n      string = failureString\r\n    elseif status == 'error' then\r\n      errorCount = errorCount + 1\r\n      string = errorString\r\n    end\r\n\r\n    io.write(string:format(getFullName(element), elapsedTime_ms))\r\n    io.flush()\r\n\r\n    return nil, true\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 168,
    "text": "handler.testFailure = function(element, parent, message, debug)\r\n    if not options.deferPrint then\r\n      io.write(failureDescription(handler.failures[#handler.failures]))\r\n      io.flush()\r\n    end\r\n    return nil, true\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 169,
    "text": "handler.testError = function(element, parent, message, debug)\r\n    if not options.deferPrint then\r\n      io.write(failureDescription(handler.errors[#handler.errors]))\r\n      io.flush()\r\n    end\r\n    return nil, true\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 170,
    "text": "handler.error = function(element, parent, message, debug)\r\n    if element.descriptor ~= 'it' then\r\n      if not options.deferPrint then\r\n        io.write(failureDescription(handler.errors[#handler.errors]))\r\n        io.flush()\r\n      end\r\n      errorCount = errorCount + 1\r\n    end\r\n\r\n    return nil, true\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 171,
    "text": "busted.subscribe({ 'suite', 'reset' }, handler.suiteReset)",
    "type": "statement:functioncall"
  }, {
    "id": 172,
    "text": "busted.subscribe({ 'suite', 'start' }, handler.suiteStart)",
    "type": "statement:functioncall"
  }, {
    "id": 173,
    "text": "busted.subscribe({ 'suite', 'end' }, handler.suiteEnd)",
    "type": "statement:functioncall"
  }, {
    "id": 174,
    "text": "busted.subscribe({ 'file', 'start' }, handler.fileStart)",
    "type": "statement:functioncall"
  }, {
    "id": 175,
    "text": "busted.subscribe({ 'file', 'end' }, handler.fileEnd)",
    "type": "statement:functioncall"
  }, {
    "id": 176,
    "text": "busted.subscribe({ 'test', 'start' }, handler.testStart, { predicate = handler.cancelOnPending })",
    "type": "statement:functioncall"
  }, {
    "id": 177,
    "text": "busted.subscribe({ 'test', 'end' }, handler.testEnd, { predicate = handler.cancelOnPending })",
    "type": "statement:functioncall"
  }, {
    "id": 178,
    "text": "busted.subscribe({ 'failure', 'it' }, handler.testFailure)",
    "type": "statement:functioncall"
  }, {
    "id": 179,
    "text": "busted.subscribe({ 'error', 'it' }, handler.testError)",
    "type": "statement:functioncall"
  }, {
    "id": 180,
    "text": "busted.subscribe({ 'failure' }, handler.error)",
    "type": "statement:functioncall"
  }, {
    "id": 181,
    "text": "busted.subscribe({ 'error' }, handler.error)",
    "type": "statement:functioncall"
  }, {
    "id": 182,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 183,
    "text": "",
    "type": "function container"
  }, {
    "id": 184,
    "text": "write",
    "type": "global function"
  }, {
    "id": 185,
    "text": "getFullName",
    "type": "global function"
  }, {
    "id": 186,
    "text": "term",
    "type": "module"
  }, {
    "id": 187,
    "text": "isatty",
    "type": "global function"
  }, {
    "id": 188,
    "text": "red",
    "type": "global function"
  }, {
    "id": 189,
    "text": "cyan",
    "type": "global function"
  }, {
    "id": 190,
    "text": "green",
    "type": "global function"
  }, {
    "id": 191,
    "text": "magenta",
    "type": "global function"
  }, {
    "id": 192,
    "text": "subscribe",
    "type": "global function"
  }, {
    "id": 193,
    "text": "yellow",
    "type": "global function"
  }, {
    "id": 194,
    "text": "bright",
    "type": "global function"
  }, {
    "id": 195,
    "text": "write",
    "type": "global function"
  }, {
    "id": 196,
    "text": "flush",
    "type": "global function"
  }, {
    "id": 197,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 198,
    "text": "getenv",
    "type": "global function"
  }, {
    "id": 199,
    "text": "getDescription",
    "type": "global function"
  }, {
    "id": 200,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 201,
    "text": "type",
    "type": "global function"
  }, {
    "id": 202,
    "text": "type",
    "type": "global function"
  }, {
    "id": 203,
    "text": "require",
    "type": "global function"
  }, {
    "id": 204,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 205,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 206,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 207,
    "text": "pretty",
    "type": "module"
  }, {
    "id": 208,
    "text": "say",
    "type": "module"
  }, {
    "id": 209,
    "text": "",
    "type": "variable container"
  }, {
    "id": 210,
    "text": "",
    "type": "require container"
  }, {
    "id": 211,
    "text": "",
    "type": "local variable"
  }, {
    "id": 212,
    "text": "",
    "type": "local variable"
  }, {
    "id": 213,
    "text": "",
    "type": "n/a"
  }, {
    "id": 214,
    "text": "",
    "type": "local variable"
  }, {
    "id": 215,
    "text": "",
    "type": "n/a"
  }, {
    "id": 216,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 217,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 218,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 219,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 220,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 221,
    "text": "",
    "type": "interface container"
  }, {
    "id": 222,
    "text": "",
    "type": "interface"
  } ]
}