{
  "_filename": "sound.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/busted/busted/outputHandlers/sound.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 8,
    "label": "has",
    "to": 12
  }, {
    "from": 8,
    "label": "has",
    "to": 13
  }, {
    "from": 8,
    "label": "has",
    "to": 14
  }, {
    "from": 4,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 4,
    "label": "has",
    "to": 18
  }, {
    "from": 4,
    "label": "has",
    "to": 19
  }, {
    "from": 4,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 21,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 5
  }, {
    "from": 25,
    "label": "has",
    "to": 6
  }, {
    "from": 25,
    "label": "has",
    "to": 7
  }, {
    "from": 25,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 8,
    "label": "has",
    "to": 12
  }, {
    "from": 8,
    "label": "has",
    "to": 13
  }, {
    "from": 8,
    "label": "has",
    "to": 14
  }, {
    "from": 25,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 25,
    "label": "has",
    "to": 18
  }, {
    "from": 25,
    "label": "has",
    "to": 19
  }, {
    "from": 21,
    "label": "has",
    "to": 26
  }, {
    "from": 21,
    "label": "has",
    "to": 19
  }, {
    "from": 21,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "calls",
    "to": 29
  }, {
    "from": 28,
    "label": "calls",
    "to": 32
  }, {
    "from": 28,
    "label": "calls",
    "to": 33
  }, {
    "from": 28,
    "label": "calls",
    "to": 33
  }, {
    "from": 28,
    "label": "calls",
    "to": 33
  }, {
    "from": 28,
    "label": "calls",
    "to": 33
  }, {
    "from": 28,
    "label": "calls",
    "to": 30
  }, {
    "from": 28,
    "label": "calls",
    "to": 31
  }, {
    "from": 2,
    "label": "contains",
    "to": 28
  }, {
    "from": 28,
    "label": "declares",
    "to": 4
  }, {
    "from": 28,
    "label": "declares",
    "to": 21
  }, {
    "from": 34,
    "label": "requires",
    "to": 2
  }, {
    "from": 2,
    "label": "contains",
    "to": 36
  }, {
    "from": 2,
    "label": "contains",
    "to": 37
  }, {
    "from": 37,
    "label": "initializes",
    "to": 38
  }, {
    "from": 38,
    "label": "requires",
    "to": 39
  }, {
    "from": 37,
    "label": "initializes",
    "to": 40
  }, {
    "from": 40,
    "label": "requires",
    "to": 3
  }, {
    "from": 37,
    "label": "initializes",
    "to": 41
  }, {
    "from": 41,
    "label": "requires",
    "to": 1
  }, {
    "from": 37,
    "label": "initializes",
    "to": 42
  }, {
    "from": 42,
    "label": "requires",
    "to": 35
  }, {
    "from": 2,
    "label": "provides",
    "to": 43
  }, {
    "from": 43,
    "label": "provides",
    "to": 44
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "base",
    "type": "module"
  }, {
    "id": 2,
    "text": "sound",
    "type": "module"
  }, {
    "id": 3,
    "text": "busted",
    "type": "module"
  }, {
    "id": 4,
    "text": "function()\r\n    local system = app.platform()\r\n    local sayer_pre, sayer_post\r\n    local messages\r\n\r\n    if system == 'Linux' then\r\n      sayer_pre = 'espeak -s 160 '\r\n      sayer_post = ' > /dev/null 2>&1'\r\n    elseif system and system:match('^Windows') then\r\n      sayer_pre = 'echo '\r\n      sayer_post = ' | ptts'\r\n    else\r\n      sayer_pre = 'say '\r\n      sayer_post = ''\r\n    end\r\n\r\n    if handler.failuresCount > 0 then\r\n      messages = language.failure_messages\r\n    else\r\n      messages = language.success_messages\r\n    end\r\n\r\n    io.popen(sayer_pre .. '\"' .. messages[math.random(1, #messages)] .. '\"' .. sayer_post)\r\n\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 5,
    "text": "local system = app.platform()",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "local sayer_pre, sayer_post",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "local messages",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "if system == 'Linux' then\r\n      sayer_pre = 'espeak -s 160 '\r\n      sayer_post = ' > /dev/null 2>&1'\r\n    elseif system and system:match('^Windows') then\r\n      sayer_pre = 'echo '\r\n      sayer_post = ' | ptts'\r\n    else\r\n      sayer_pre = 'say '\r\n      sayer_post = ''\r\n    end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "sayer_pre = 'espeak -s 160 '",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "sayer_post = ' > /dev/null 2>&1'",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "sayer_pre = 'echo '",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "sayer_post = ' | ptts'",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "sayer_pre = 'say '",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "sayer_post = ''",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "if handler.failuresCount > 0 then\r\n      messages = language.failure_messages\r\n    else\r\n      messages = language.success_messages\r\n    end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "messages = language.failure_messages",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "messages = language.success_messages",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "io.popen(sayer_pre .. '\"' .. messages[math.random(1, #messages)] .. '\"' .. sayer_post)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function(options)\r\n  local busted = require 'busted'\r\n  local handler = require 'busted.outputHandlers.base'()\r\n  local language = require('busted.languages.' .. options.language)\r\n\r\n  handler.suiteEnd = function()\r\n    local system = app.platform()\r\n    local sayer_pre, sayer_post\r\n    local messages\r\n\r\n    if system == 'Linux' then\r\n      sayer_pre = 'espeak -s 160 '\r\n      sayer_post = ' > /dev/null 2>&1'\r\n    elseif system and system:match('^Windows') then\r\n      sayer_pre = 'echo '\r\n      sayer_post = ' | ptts'\r\n    else\r\n      sayer_pre = 'say '\r\n      sayer_post = ''\r\n    end\r\n\r\n    if handler.failuresCount > 0 then\r\n      messages = language.failure_messages\r\n    else\r\n      messages = language.success_messages\r\n    end\r\n\r\n    io.popen(sayer_pre .. '\"' .. messages[math.random(1, #messages)] .. '\"' .. sayer_post)\r\n\r\n    return nil, true\r\n  end\r\n\r\n  busted.subscribe({ 'suite', 'end' }, handler.suiteEnd)\r\n\r\n  return handler\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "local busted = require 'busted'",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "local handler = require 'busted.outputHandlers.base'()",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "local language = require('busted.languages.' .. options.language)",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "handler.suiteEnd = function()\r\n    local system = app.platform()\r\n    local sayer_pre, sayer_post\r\n    local messages\r\n\r\n    if system == 'Linux' then\r\n      sayer_pre = 'espeak -s 160 '\r\n      sayer_post = ' > /dev/null 2>&1'\r\n    elseif system and system:match('^Windows') then\r\n      sayer_pre = 'echo '\r\n      sayer_post = ' | ptts'\r\n    else\r\n      sayer_pre = 'say '\r\n      sayer_post = ''\r\n    end\r\n\r\n    if handler.failuresCount > 0 then\r\n      messages = language.failure_messages\r\n    else\r\n      messages = language.success_messages\r\n    end\r\n\r\n    io.popen(sayer_pre .. '\"' .. messages[math.random(1, #messages)] .. '\"' .. sayer_post)\r\n\r\n    return nil, true\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "busted.subscribe({ 'suite', 'end' }, handler.suiteEnd)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "",
    "type": "function container"
  }, {
    "id": 29,
    "text": "platform",
    "type": "global function"
  }, {
    "id": 30,
    "text": "subscribe",
    "type": "global function"
  }, {
    "id": 31,
    "text": "random",
    "type": "global function"
  }, {
    "id": 32,
    "text": "popen",
    "type": "global function"
  }, {
    "id": 33,
    "text": "require",
    "type": "global function"
  }, {
    "id": 34,
    "text": "",
    "type": "global variable"
  }, {
    "id": 35,
    "text": "language)",
    "type": "module"
  }, {
    "id": 36,
    "text": "",
    "type": "variable container"
  }, {
    "id": 37,
    "text": "",
    "type": "require container"
  }, {
    "id": 38,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 39,
    "text": "app",
    "type": "module"
  }, {
    "id": 40,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 41,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 42,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 43,
    "text": "",
    "type": "interface container"
  }, {
    "id": 44,
    "text": "",
    "type": "interface"
  } ]
}