{
  "_filename": "status.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/busted/busted/status.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 7,
    "label": "has",
    "to": 4
  }, {
    "from": 8,
    "label": "has",
    "to": 4
  }, {
    "from": 9,
    "label": "has",
    "to": 4
  }, {
    "from": 10,
    "label": "has",
    "to": 4
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 4
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 4
  }, {
    "from": 23,
    "label": "has",
    "to": 4
  }, {
    "from": 23,
    "label": "has",
    "to": 4
  }, {
    "from": 23,
    "label": "has",
    "to": 4
  }, {
    "from": 23,
    "label": "has",
    "to": 4
  }, {
    "from": 23,
    "label": "has",
    "to": 13
  }, {
    "from": 23,
    "label": "has",
    "to": 16
  }, {
    "from": 23,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 21,
    "label": "has",
    "to": 4
  }, {
    "from": 21,
    "label": "has",
    "to": 4
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "calls",
    "to": 2
  }, {
    "from": 25,
    "label": "calls",
    "to": 2
  }, {
    "from": 25,
    "label": "calls",
    "to": 2
  }, {
    "from": 2,
    "label": "calls",
    "to": 26
  }, {
    "from": 25,
    "label": "calls",
    "to": 27
  }, {
    "from": 1,
    "label": "contains",
    "to": 25
  }, {
    "from": 25,
    "label": "declares",
    "to": 2
  }, {
    "from": 25,
    "label": "declares",
    "to": 6
  }, {
    "from": 25,
    "label": "declares",
    "to": 7
  }, {
    "from": 25,
    "label": "declares",
    "to": 8
  }, {
    "from": 25,
    "label": "declares",
    "to": 9
  }, {
    "from": 25,
    "label": "declares",
    "to": 10
  }, {
    "from": 25,
    "label": "declares",
    "to": 12
  }, {
    "from": 25,
    "label": "declares",
    "to": 15
  }, {
    "from": 25,
    "label": "declares",
    "to": 20
  }, {
    "from": 25,
    "label": "declares",
    "to": 21
  }, {
    "from": 1,
    "label": "contains",
    "to": 28
  }, {
    "from": 1,
    "label": "contains",
    "to": 29
  }, {
    "from": 1,
    "label": "provides",
    "to": 30
  }, {
    "from": 30,
    "label": "provides",
    "to": 31
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "status",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function get_status(status)\r\n  local smap = {\r\n    ['success'] = 'success',\r\n    ['pending'] = 'pending',\r\n    ['failure'] = 'failure',\r\n    ['error'] = 'error',\r\n    ['true'] = 'success',\r\n    ['false'] = 'failure',\r\n    ['nil'] = 'error',\r\n  }\r\n  return smap[tostring(status)] or 'error'\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local smap = {\r\n    ['success'] = 'success',\r\n    ['pending'] = 'pending',\r\n    ['failure'] = 'failure',\r\n    ['error'] = 'error',\r\n    ['true'] = 'success',\r\n    ['false'] = 'failure',\r\n    ['nil'] = 'error',\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "function(self) return (objstat == 'success') end",
    "type": "function"
  }, {
    "id": 7,
    "text": "function(self) return (objstat == 'pending') end",
    "type": "function"
  }, {
    "id": 8,
    "text": "function(self) return (objstat == 'failure') end",
    "type": "function"
  }, {
    "id": 9,
    "text": "function(self) return (objstat == 'error') end",
    "type": "function"
  }, {
    "id": 10,
    "text": "function(self)\r\n      return objstat\r\n    end",
    "type": "function"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function(self, status)\r\n      objstat = get_status(status)\r\n    end",
    "type": "function"
  }, {
    "id": 13,
    "text": "objstat = get_status(status)",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function(self, status)\r\n      -- prefer current failure/error status over new status\r\n      status = get_status(status)\r\n      if objstat == 'success' or (objstat == 'pending' and status ~= 'success') then\r\n        objstat = status\r\n      end\r\n    end",
    "type": "function"
  }, {
    "id": 16,
    "text": "status = get_status(status)",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "if objstat == 'success' or (objstat == 'pending' and status ~= 'success') then\r\n        objstat = status\r\n      end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "objstat = status",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function(self) return objstat end",
    "type": "function"
  }, {
    "id": 21,
    "text": "function(inital_status)\r\n  local objstat = get_status(inital_status)\r\n  local obj = {\r\n    success = function(self) return (objstat == 'success') end,\r\n    pending = function(self) return (objstat == 'pending') end,\r\n    failure = function(self) return (objstat == 'failure') end,\r\n    error   = function(self) return (objstat == 'error') end,\r\n\r\n    get = function(self)\r\n      return objstat\r\n    end,\r\n\r\n    set = function(self, status)\r\n      objstat = get_status(status)\r\n    end,\r\n\r\n    update = function(self, status)\r\n      -- prefer current failure/error status over new status\r\n      status = get_status(status)\r\n      if objstat == 'success' or (objstat == 'pending' and status ~= 'success') then\r\n        objstat = status\r\n      end\r\n    end\r\n  }\r\n\r\n  return setmetatable(obj, {\r\n    __index = {},\r\n    __tostring = function(self) return objstat end\r\n  })\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "local objstat = get_status(inital_status)",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "local obj = {\r\n    success = function(self) return (objstat == 'success') end,\r\n    pending = function(self) return (objstat == 'pending') end,\r\n    failure = function(self) return (objstat == 'failure') end,\r\n    error   = function(self) return (objstat == 'error') end,\r\n\r\n    get = function(self)\r\n      return objstat\r\n    end,\r\n\r\n    set = function(self, status)\r\n      objstat = get_status(status)\r\n    end,\r\n\r\n    update = function(self, status)\r\n      -- prefer current failure/error status over new status\r\n      status = get_status(status)\r\n      if objstat == 'success' or (objstat == 'pending' and status ~= 'success') then\r\n        objstat = status\r\n      end\r\n    end\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "",
    "type": "function container"
  }, {
    "id": 26,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 27,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 28,
    "text": "",
    "type": "variable container"
  }, {
    "id": 29,
    "text": "",
    "type": "require container"
  }, {
    "id": 30,
    "text": "",
    "type": "interface container"
  }, {
    "id": 31,
    "text": "",
    "type": "interface"
  } ]
}