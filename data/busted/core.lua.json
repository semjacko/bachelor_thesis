{
  "_filename": "core.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/busted/busted/core.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 8
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 8
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 8
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 14,
    "label": "has",
    "to": 20
  }, {
    "from": 14,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 14,
    "label": "has",
    "to": 24
  }, {
    "from": 14,
    "label": "has",
    "to": 25
  }, {
    "from": 14,
    "label": "has",
    "to": 26
  }, {
    "from": 14,
    "label": "has",
    "to": 8
  }, {
    "from": 14,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 16
  }, {
    "from": 28,
    "label": "has",
    "to": 17
  }, {
    "from": 28,
    "label": "has",
    "to": 8
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 26
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 30,
    "label": "has",
    "to": 34
  }, {
    "from": 30,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 30,
    "label": "has",
    "to": 8
  }, {
    "from": 30,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 8
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 8
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 8
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 46,
    "label": "has",
    "to": 8
  }, {
    "from": 46,
    "label": "has",
    "to": 8
  }, {
    "from": 46,
    "label": "has",
    "to": 8
  }, {
    "from": 46,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 54,
    "label": "has",
    "to": 57
  }, {
    "from": 54,
    "label": "has",
    "to": 58
  }, {
    "from": 54,
    "label": "has",
    "to": 59
  }, {
    "from": 54,
    "label": "has",
    "to": 60
  }, {
    "from": 54,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 62,
    "label": "has",
    "to": 65
  }, {
    "from": 62,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 67,
    "label": "has",
    "to": 70
  }, {
    "from": 67,
    "label": "has",
    "to": 71
  }, {
    "from": 67,
    "label": "has",
    "to": 72
  }, {
    "from": 67,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 74,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 78,
    "label": "has",
    "to": 81
  }, {
    "from": 78,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 82,
    "label": "has",
    "to": 85
  }, {
    "from": 78,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 87,
    "label": "has",
    "to": 90
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 86,
    "label": "has",
    "to": 91
  }, {
    "from": 78,
    "label": "has",
    "to": 92
  }, {
    "from": 78,
    "label": "has",
    "to": 93
  }, {
    "from": 78,
    "label": "has",
    "to": 8
  }, {
    "from": 78,
    "label": "has",
    "to": 94
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 95,
    "label": "has",
    "to": 97
  }, {
    "from": 95,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 98,
    "label": "has",
    "to": 100
  }, {
    "from": 98,
    "label": "has",
    "to": 101
  }, {
    "from": 98,
    "label": "has",
    "to": 102
  }, {
    "from": 98,
    "label": "has",
    "to": 103
  }, {
    "from": 95,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 95,
    "label": "has",
    "to": 8
  }, {
    "from": 95,
    "label": "has",
    "to": 106
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 107,
    "label": "has",
    "to": 109
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 110,
    "label": "has",
    "to": 112
  }, {
    "from": 110,
    "label": "has",
    "to": 113
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 114,
    "label": "has",
    "to": 116
  }, {
    "from": 114,
    "label": "has",
    "to": 117
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 118,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 120,
    "label": "has",
    "to": 122
  }, {
    "from": 120,
    "label": "has",
    "to": 123
  }, {
    "from": 120,
    "label": "has",
    "to": 124
  }, {
    "from": 120,
    "label": "has",
    "to": 125
  }, {
    "from": 120,
    "label": "has",
    "to": 126
  }, {
    "from": 120,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 127,
    "label": "has",
    "to": 129
  }, {
    "from": 120,
    "label": "has",
    "to": 130
  }, {
    "from": 120,
    "label": "has",
    "to": 131
  }, {
    "from": 118,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 133,
    "label": "has",
    "to": 135
  }, {
    "from": 132,
    "label": "has",
    "to": 136
  }, {
    "from": 132,
    "label": "has",
    "to": 137
  }, {
    "from": 132,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 132,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 132,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 132,
    "label": "has",
    "to": 8
  }, {
    "from": 118,
    "label": "has",
    "to": 144
  }, {
    "from": 118,
    "label": "has",
    "to": 145
  }, {
    "from": 118,
    "label": "has",
    "to": 146
  }, {
    "from": 118,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 137
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 147,
    "label": "has",
    "to": 149
  }, {
    "from": 147,
    "label": "has",
    "to": 150
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 150,
    "label": "has",
    "to": 152
  }, {
    "from": 118,
    "label": "has",
    "to": 153
  }, {
    "from": 154,
    "label": "has",
    "to": 141
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 156,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 133,
    "label": "has",
    "to": 135
  }, {
    "from": 156,
    "label": "has",
    "to": 136
  }, {
    "from": 156,
    "label": "has",
    "to": 137
  }, {
    "from": 156,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 156,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 156,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 156,
    "label": "has",
    "to": 8
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 158,
    "label": "has",
    "to": 159
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 158,
    "label": "has",
    "to": 161
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 161,
    "label": "has",
    "to": 163
  }, {
    "from": 163,
    "label": "has",
    "to": 164
  }, {
    "from": 164,
    "label": "has",
    "to": 165
  }, {
    "from": 158,
    "label": "has",
    "to": 166
  }, {
    "from": 167,
    "label": "has",
    "to": 8
  }, {
    "from": 168,
    "label": "has",
    "to": 8
  }, {
    "from": 169,
    "label": "has",
    "to": 83
  }, {
    "from": 169,
    "label": "has",
    "to": 84
  }, {
    "from": 169,
    "label": "has",
    "to": 85
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 171,
    "label": "has",
    "to": 105
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 173,
    "label": "has",
    "to": 137
  }, {
    "from": 173,
    "label": "has",
    "to": 148
  }, {
    "from": 173,
    "label": "has",
    "to": 149
  }, {
    "from": 173,
    "label": "has",
    "to": 150
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 150,
    "label": "has",
    "to": 152
  }, {
    "from": 173,
    "label": "has",
    "to": 174
  }, {
    "from": 175,
    "label": "has",
    "to": 165
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 176,
    "label": "has",
    "to": 178
  }, {
    "from": 176,
    "label": "has",
    "to": 179
  }, {
    "from": 176,
    "label": "has",
    "to": 180
  }, {
    "from": 176,
    "label": "has",
    "to": 181
  }, {
    "from": 176,
    "label": "has",
    "to": 182
  }, {
    "from": 176,
    "label": "has",
    "to": 183
  }, {
    "from": 176,
    "label": "has",
    "to": 184
  }, {
    "from": 176,
    "label": "has",
    "to": 185
  }, {
    "from": 176,
    "label": "has",
    "to": 186
  }, {
    "from": 176,
    "label": "has",
    "to": 187
  }, {
    "from": 176,
    "label": "has",
    "to": 188
  }, {
    "from": 176,
    "label": "has",
    "to": 189
  }, {
    "from": 176,
    "label": "has",
    "to": 190
  }, {
    "from": 176,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 8
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 14,
    "label": "has",
    "to": 20
  }, {
    "from": 14,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 14,
    "label": "has",
    "to": 24
  }, {
    "from": 14,
    "label": "has",
    "to": 25
  }, {
    "from": 14,
    "label": "has",
    "to": 26
  }, {
    "from": 14,
    "label": "has",
    "to": 8
  }, {
    "from": 176,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 26
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 30,
    "label": "has",
    "to": 34
  }, {
    "from": 30,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 30,
    "label": "has",
    "to": 8
  }, {
    "from": 176,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 8
  }, {
    "from": 176,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 8
  }, {
    "from": 176,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 8
  }, {
    "from": 176,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 46,
    "label": "has",
    "to": 8
  }, {
    "from": 46,
    "label": "has",
    "to": 8
  }, {
    "from": 46,
    "label": "has",
    "to": 8
  }, {
    "from": 176,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 54,
    "label": "has",
    "to": 57
  }, {
    "from": 54,
    "label": "has",
    "to": 58
  }, {
    "from": 54,
    "label": "has",
    "to": 59
  }, {
    "from": 54,
    "label": "has",
    "to": 60
  }, {
    "from": 176,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 62,
    "label": "has",
    "to": 65
  }, {
    "from": 176,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 67,
    "label": "has",
    "to": 70
  }, {
    "from": 67,
    "label": "has",
    "to": 71
  }, {
    "from": 67,
    "label": "has",
    "to": 72
  }, {
    "from": 176,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 176,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 78,
    "label": "has",
    "to": 81
  }, {
    "from": 78,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 82,
    "label": "has",
    "to": 85
  }, {
    "from": 78,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 87,
    "label": "has",
    "to": 90
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 86,
    "label": "has",
    "to": 91
  }, {
    "from": 78,
    "label": "has",
    "to": 92
  }, {
    "from": 78,
    "label": "has",
    "to": 93
  }, {
    "from": 78,
    "label": "has",
    "to": 8
  }, {
    "from": 176,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 95,
    "label": "has",
    "to": 97
  }, {
    "from": 95,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 98,
    "label": "has",
    "to": 100
  }, {
    "from": 98,
    "label": "has",
    "to": 101
  }, {
    "from": 98,
    "label": "has",
    "to": 102
  }, {
    "from": 98,
    "label": "has",
    "to": 103
  }, {
    "from": 95,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 95,
    "label": "has",
    "to": 8
  }, {
    "from": 176,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 176,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 110,
    "label": "has",
    "to": 112
  }, {
    "from": 176,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 114,
    "label": "has",
    "to": 116
  }, {
    "from": 176,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 118,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 120,
    "label": "has",
    "to": 122
  }, {
    "from": 120,
    "label": "has",
    "to": 123
  }, {
    "from": 120,
    "label": "has",
    "to": 124
  }, {
    "from": 120,
    "label": "has",
    "to": 125
  }, {
    "from": 120,
    "label": "has",
    "to": 126
  }, {
    "from": 120,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 127,
    "label": "has",
    "to": 129
  }, {
    "from": 120,
    "label": "has",
    "to": 130
  }, {
    "from": 120,
    "label": "has",
    "to": 131
  }, {
    "from": 118,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 133,
    "label": "has",
    "to": 135
  }, {
    "from": 132,
    "label": "has",
    "to": 136
  }, {
    "from": 132,
    "label": "has",
    "to": 137
  }, {
    "from": 132,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 132,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 132,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 132,
    "label": "has",
    "to": 8
  }, {
    "from": 118,
    "label": "has",
    "to": 144
  }, {
    "from": 118,
    "label": "has",
    "to": 145
  }, {
    "from": 118,
    "label": "has",
    "to": 146
  }, {
    "from": 118,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 137
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 147,
    "label": "has",
    "to": 149
  }, {
    "from": 147,
    "label": "has",
    "to": 150
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 150,
    "label": "has",
    "to": 152
  }, {
    "from": 176,
    "label": "has",
    "to": 158
  }, {
    "from": 158,
    "label": "has",
    "to": 159
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 158,
    "label": "has",
    "to": 161
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 161,
    "label": "has",
    "to": 163
  }, {
    "from": 163,
    "label": "has",
    "to": 164
  }, {
    "from": 164,
    "label": "has",
    "to": 165
  }, {
    "from": 176,
    "label": "has",
    "to": 8
  }, {
    "from": 176,
    "label": "has",
    "to": 191
  }, {
    "from": 95,
    "label": "calls",
    "to": 204
  }, {
    "from": 95,
    "label": "calls",
    "to": 204
  }, {
    "from": 78,
    "label": "calls",
    "to": 40
  }, {
    "from": 95,
    "label": "calls",
    "to": 40
  }, {
    "from": 118,
    "label": "calls",
    "to": 40
  }, {
    "from": 14,
    "label": "calls",
    "to": 46
  }, {
    "from": 30,
    "label": "calls",
    "to": 46
  }, {
    "from": 54,
    "label": "calls",
    "to": 211
  }, {
    "from": 62,
    "label": "calls",
    "to": 211
  }, {
    "from": 14,
    "label": "calls",
    "to": 198
  }, {
    "from": 14,
    "label": "calls",
    "to": 198
  }, {
    "from": 78,
    "label": "calls",
    "to": 30
  }, {
    "from": 78,
    "label": "calls",
    "to": 30
  }, {
    "from": 78,
    "label": "calls",
    "to": 5
  }, {
    "from": 74,
    "label": "calls",
    "to": 12
  }, {
    "from": 118,
    "label": "calls",
    "to": 12
  }, {
    "from": 14,
    "label": "calls",
    "to": 214
  }, {
    "from": 30,
    "label": "calls",
    "to": 14
  }, {
    "from": 78,
    "label": "calls",
    "to": 14
  }, {
    "from": 78,
    "label": "calls",
    "to": 14
  }, {
    "from": 118,
    "label": "calls",
    "to": 14
  }, {
    "from": 78,
    "label": "calls",
    "to": 200
  }, {
    "from": 118,
    "label": "calls",
    "to": 42
  }, {
    "from": 54,
    "label": "calls",
    "to": 212
  }, {
    "from": 118,
    "label": "calls",
    "to": 154
  }, {
    "from": 14,
    "label": "calls",
    "to": 215
  }, {
    "from": 67,
    "label": "calls",
    "to": 224
  }, {
    "from": 158,
    "label": "calls",
    "to": 225
  }, {
    "from": 118,
    "label": "calls",
    "to": 207
  }, {
    "from": 118,
    "label": "calls",
    "to": 207
  }, {
    "from": 158,
    "label": "calls",
    "to": 207
  }, {
    "from": 30,
    "label": "calls",
    "to": 218
  }, {
    "from": 14,
    "label": "calls",
    "to": 213
  }, {
    "from": 14,
    "label": "calls",
    "to": 213
  }, {
    "from": 14,
    "label": "calls",
    "to": 213
  }, {
    "from": 95,
    "label": "calls",
    "to": 78
  }, {
    "from": 158,
    "label": "calls",
    "to": 78
  }, {
    "from": 158,
    "label": "calls",
    "to": 210
  }, {
    "from": 78,
    "label": "calls",
    "to": 197
  }, {
    "from": 95,
    "label": "calls",
    "to": 206
  }, {
    "from": 95,
    "label": "calls",
    "to": 206
  }, {
    "from": 118,
    "label": "calls",
    "to": 201
  }, {
    "from": 110,
    "label": "calls",
    "to": 202
  }, {
    "from": 114,
    "label": "calls",
    "to": 202
  }, {
    "from": 46,
    "label": "calls",
    "to": 208
  }, {
    "from": 46,
    "label": "calls",
    "to": 208
  }, {
    "from": 78,
    "label": "calls",
    "to": 208
  }, {
    "from": 118,
    "label": "calls",
    "to": 208
  }, {
    "from": 78,
    "label": "calls",
    "to": 227
  }, {
    "from": 192,
    "label": "calls",
    "to": 219
  }, {
    "from": 30,
    "label": "calls",
    "to": 219
  }, {
    "from": 192,
    "label": "calls",
    "to": 228
  }, {
    "from": 192,
    "label": "calls",
    "to": 228
  }, {
    "from": 192,
    "label": "calls",
    "to": 228
  }, {
    "from": 192,
    "label": "calls",
    "to": 228
  }, {
    "from": 192,
    "label": "calls",
    "to": 228
  }, {
    "from": 192,
    "label": "calls",
    "to": 228
  }, {
    "from": 192,
    "label": "calls",
    "to": 228
  }, {
    "from": 192,
    "label": "calls",
    "to": 228
  }, {
    "from": 192,
    "label": "calls",
    "to": 228
  }, {
    "from": 192,
    "label": "calls",
    "to": 228
  }, {
    "from": 74,
    "label": "calls",
    "to": 203
  }, {
    "from": 10,
    "label": "calls",
    "to": 223
  }, {
    "from": 12,
    "label": "calls",
    "to": 223
  }, {
    "from": 54,
    "label": "calls",
    "to": 223
  }, {
    "from": 118,
    "label": "calls",
    "to": 223
  }, {
    "from": 118,
    "label": "calls",
    "to": 223
  }, {
    "from": 192,
    "label": "calls",
    "to": 205
  }, {
    "from": 30,
    "label": "calls",
    "to": 199
  }, {
    "from": 78,
    "label": "calls",
    "to": 209
  }, {
    "from": 110,
    "label": "calls",
    "to": 107
  }, {
    "from": 118,
    "label": "calls",
    "to": 110
  }, {
    "from": 14,
    "label": "calls",
    "to": 28
  }, {
    "from": 54,
    "label": "calls",
    "to": 222
  }, {
    "from": 62,
    "label": "calls",
    "to": 222
  }, {
    "from": 67,
    "label": "calls",
    "to": 222
  }, {
    "from": 95,
    "label": "calls",
    "to": 216
  }, {
    "from": 30,
    "label": "calls",
    "to": 10
  }, {
    "from": 54,
    "label": "calls",
    "to": 10
  }, {
    "from": 78,
    "label": "calls",
    "to": 221
  }, {
    "from": 95,
    "label": "calls",
    "to": 221
  }, {
    "from": 67,
    "label": "calls",
    "to": 217
  }, {
    "from": 5,
    "label": "calls",
    "to": 220
  }, {
    "from": 10,
    "label": "calls",
    "to": 220
  }, {
    "from": 12,
    "label": "calls",
    "to": 220
  }, {
    "from": 67,
    "label": "calls",
    "to": 220
  }, {
    "from": 74,
    "label": "calls",
    "to": 220
  }, {
    "from": 158,
    "label": "calls",
    "to": 226
  }, {
    "from": 3,
    "label": "contains",
    "to": 192
  }, {
    "from": 192,
    "label": "declares",
    "to": 5
  }, {
    "from": 192,
    "label": "declares",
    "to": 10
  }, {
    "from": 192,
    "label": "declares",
    "to": 12
  }, {
    "from": 192,
    "label": "declares",
    "to": 14
  }, {
    "from": 192,
    "label": "declares",
    "to": 28
  }, {
    "from": 192,
    "label": "declares",
    "to": 30
  }, {
    "from": 192,
    "label": "declares",
    "to": 40
  }, {
    "from": 192,
    "label": "declares",
    "to": 42
  }, {
    "from": 192,
    "label": "declares",
    "to": 44
  }, {
    "from": 192,
    "label": "declares",
    "to": 46
  }, {
    "from": 192,
    "label": "declares",
    "to": 54
  }, {
    "from": 192,
    "label": "declares",
    "to": 62
  }, {
    "from": 192,
    "label": "declares",
    "to": 67
  }, {
    "from": 192,
    "label": "declares",
    "to": 74
  }, {
    "from": 192,
    "label": "declares",
    "to": 78
  }, {
    "from": 192,
    "label": "declares",
    "to": 95
  }, {
    "from": 192,
    "label": "declares",
    "to": 107
  }, {
    "from": 192,
    "label": "declares",
    "to": 110
  }, {
    "from": 192,
    "label": "declares",
    "to": 114
  }, {
    "from": 192,
    "label": "declares",
    "to": 118
  }, {
    "from": 192,
    "label": "declares",
    "to": 154
  }, {
    "from": 192,
    "label": "declares",
    "to": 156
  }, {
    "from": 192,
    "label": "declares",
    "to": 158
  }, {
    "from": 192,
    "label": "declares",
    "to": 167
  }, {
    "from": 192,
    "label": "declares",
    "to": 168
  }, {
    "from": 192,
    "label": "declares",
    "to": 169
  }, {
    "from": 192,
    "label": "declares",
    "to": 171
  }, {
    "from": 192,
    "label": "declares",
    "to": 173
  }, {
    "from": 192,
    "label": "declares",
    "to": 175
  }, {
    "from": 192,
    "label": "declares",
    "to": 176
  }, {
    "from": 3,
    "label": "contains",
    "to": 229
  }, {
    "from": 3,
    "label": "contains",
    "to": 230
  }, {
    "from": 229,
    "label": "initializes",
    "to": 231
  }, {
    "from": 231,
    "label": "assigns",
    "to": 232
  }, {
    "from": 229,
    "label": "initializes",
    "to": 233
  }, {
    "from": 233,
    "label": "assigns",
    "to": 234
  }, {
    "from": 234,
    "label": "assigns",
    "to": 235
  }, {
    "from": 235,
    "label": "assigns",
    "to": 236
  }, {
    "from": 234,
    "label": "assigns",
    "to": 237
  }, {
    "from": 237,
    "label": "assigns",
    "to": 238
  }, {
    "from": 234,
    "label": "assigns",
    "to": 239
  }, {
    "from": 239,
    "label": "assigns",
    "to": 240
  }, {
    "from": 229,
    "label": "initializes",
    "to": 241
  }, {
    "from": 241,
    "label": "assigns",
    "to": 242
  }, {
    "from": 242,
    "label": "assigns",
    "to": 243
  }, {
    "from": 243,
    "label": "assigns",
    "to": 244
  }, {
    "from": 242,
    "label": "assigns",
    "to": 245
  }, {
    "from": 245,
    "label": "assigns",
    "to": 246
  }, {
    "from": 229,
    "label": "initializes",
    "to": 247
  }, {
    "from": 247,
    "label": "assigns",
    "to": 248
  }, {
    "from": 248,
    "label": "assigns",
    "to": 249
  }, {
    "from": 249,
    "label": "assigns",
    "to": 250
  }, {
    "from": 248,
    "label": "assigns",
    "to": 251
  }, {
    "from": 251,
    "label": "assigns",
    "to": 252
  }, {
    "from": 248,
    "label": "assigns",
    "to": 253
  }, {
    "from": 253,
    "label": "assigns",
    "to": 254
  }, {
    "from": 230,
    "label": "initializes",
    "to": 255
  }, {
    "from": 255,
    "label": "requires",
    "to": 1
  }, {
    "from": 230,
    "label": "initializes",
    "to": 256
  }, {
    "from": 256,
    "label": "requires",
    "to": 1
  }, {
    "from": 230,
    "label": "initializes",
    "to": 257
  }, {
    "from": 257,
    "label": "requires",
    "to": 1
  }, {
    "from": 230,
    "label": "initializes",
    "to": 258
  }, {
    "from": 258,
    "label": "requires",
    "to": 259
  }, {
    "from": 230,
    "label": "initializes",
    "to": 260
  }, {
    "from": 260,
    "label": "requires",
    "to": 261
  }, {
    "from": 230,
    "label": "initializes",
    "to": 262
  }, {
    "from": 262,
    "label": "requires",
    "to": 263
  }, {
    "from": 230,
    "label": "initializes",
    "to": 264
  }, {
    "from": 264,
    "label": "requires",
    "to": 265
  }, {
    "from": 230,
    "label": "initializes",
    "to": 266
  }, {
    "from": 266,
    "label": "requires",
    "to": 2
  }, {
    "from": 230,
    "label": "initializes",
    "to": 267
  }, {
    "from": 267,
    "label": "requires",
    "to": 4
  }, {
    "from": 3,
    "label": "provides",
    "to": 268
  }, {
    "from": 268,
    "label": "provides",
    "to": 269
  }, {
    "from": 270,
    "label": "requires",
    "to": 259
  }, {
    "from": 271,
    "label": "requires",
    "to": 3
  }, {
    "from": 272,
    "label": "requires",
    "to": 259
  }, {
    "from": 273,
    "label": "requires",
    "to": 259
  }, {
    "from": 274,
    "label": "requires",
    "to": 259
  }, {
    "from": 275,
    "label": "requires",
    "to": 259
  }, {
    "from": 276,
    "label": "requires",
    "to": 259
  }, {
    "from": 277,
    "label": "requires",
    "to": 259
  }, {
    "from": 278,
    "label": "requires",
    "to": 261
  }, {
    "from": 279,
    "label": "requires",
    "to": 261
  }, {
    "from": 280,
    "label": "requires",
    "to": 261
  }, {
    "from": 281,
    "label": "requires",
    "to": 261
  }, {
    "from": 282,
    "label": "requires",
    "to": 259
  }, {
    "from": 283,
    "label": "requires",
    "to": 3
  }, {
    "from": 284,
    "label": "requires",
    "to": 259
  }, {
    "from": 285,
    "label": "requires",
    "to": 259
  }, {
    "from": 235,
    "label": "contains",
    "to": 193
  }, {
    "from": 243,
    "label": "contains",
    "to": 193
  }, {
    "from": 249,
    "label": "contains",
    "to": 193
  }, {
    "from": 235,
    "label": "contains",
    "to": 194
  }, {
    "from": 243,
    "label": "contains",
    "to": 194
  }, {
    "from": 249,
    "label": "contains",
    "to": 194
  }, {
    "from": 235,
    "label": "contains",
    "to": 195
  }, {
    "from": 243,
    "label": "contains",
    "to": 195
  }, {
    "from": 249,
    "label": "contains",
    "to": 195
  }, {
    "from": 235,
    "label": "contains",
    "to": 196
  }, {
    "from": 243,
    "label": "contains",
    "to": 196
  }, {
    "from": 249,
    "label": "contains",
    "to": 196
  }, {
    "from": 59,
    "label": "hasArgument",
    "to": 238
  }, {
    "from": 59,
    "label": "hasArgument",
    "to": 252
  }, {
    "from": 60,
    "label": "hasArgument",
    "to": 238
  }, {
    "from": 60,
    "label": "hasArgument",
    "to": 252
  }, {
    "from": 64,
    "label": "hasArgument",
    "to": 238
  }, {
    "from": 64,
    "label": "hasArgument",
    "to": 252
  }, {
    "from": 65,
    "label": "hasArgument",
    "to": 238
  }, {
    "from": 65,
    "label": "hasArgument",
    "to": 252
  }, {
    "from": 70,
    "label": "hasArgument",
    "to": 238
  }, {
    "from": 70,
    "label": "hasArgument",
    "to": 252
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 238
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 252
  }, {
    "from": 76,
    "label": "hasArgument",
    "to": 238
  }, {
    "from": 76,
    "label": "hasArgument",
    "to": 252
  }, {
    "from": 79,
    "label": "hasArgument",
    "to": 238
  }, {
    "from": 79,
    "label": "hasArgument",
    "to": 252
  }, {
    "from": 91,
    "label": "hasArgument",
    "to": 238
  }, {
    "from": 91,
    "label": "hasArgument",
    "to": 252
  }, {
    "from": 93,
    "label": "hasArgument",
    "to": 238
  }, {
    "from": 93,
    "label": "hasArgument",
    "to": 252
  }, {
    "from": 105,
    "label": "hasArgument",
    "to": 238
  }, {
    "from": 105,
    "label": "hasArgument",
    "to": 252
  }, {
    "from": 111,
    "label": "hasArgument",
    "to": 238
  }, {
    "from": 111,
    "label": "hasArgument",
    "to": 252
  }, {
    "from": 112,
    "label": "hasArgument",
    "to": 238
  }, {
    "from": 112,
    "label": "hasArgument",
    "to": 252
  }, {
    "from": 116,
    "label": "hasArgument",
    "to": 238
  }, {
    "from": 116,
    "label": "hasArgument",
    "to": 252
  }, {
    "from": 141,
    "label": "hasArgument",
    "to": 238
  }, {
    "from": 141,
    "label": "hasArgument",
    "to": 252
  }, {
    "from": 143,
    "label": "hasArgument",
    "to": 238
  }, {
    "from": 143,
    "label": "hasArgument",
    "to": 252
  }, {
    "from": 146,
    "label": "hasArgument",
    "to": 238
  }, {
    "from": 146,
    "label": "hasArgument",
    "to": 252
  }, {
    "from": 147,
    "label": "hasArgument",
    "to": 173
  }, {
    "from": 147,
    "label": "hasArgument",
    "to": 238
  }, {
    "from": 147,
    "label": "hasArgument",
    "to": 252
  }, {
    "from": 149,
    "label": "hasArgument",
    "to": 238
  }, {
    "from": 149,
    "label": "hasArgument",
    "to": 252
  }, {
    "from": 164,
    "label": "hasArgument",
    "to": 175
  }, {
    "from": 164,
    "label": "hasArgument",
    "to": 238
  }, {
    "from": 164,
    "label": "hasArgument",
    "to": 252
  }, {
    "from": 165,
    "label": "hasArgument",
    "to": 238
  }, {
    "from": 165,
    "label": "hasArgument",
    "to": 252
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "compatibility",
    "type": "module"
  }, {
    "id": 2,
    "text": "context",
    "type": "module"
  }, {
    "id": 3,
    "text": "core",
    "type": "module"
  }, {
    "id": 4,
    "text": "environment",
    "type": "module"
  }, {
    "id": 5,
    "text": "local function errortype(obj)\r\n  local mt = debug.getmetatable(obj)\r\n  if mt == failureMt or mt == failureMtNoString then\r\n    return 'failure'\r\n  elseif mt == pendingMt then\r\n    return 'pending'\r\n  end\r\n  return 'error'\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local mt = debug.getmetatable(obj)",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "if mt == failureMt or mt == failureMtNoString then\r\n    return 'failure'\r\n  elseif mt == pendingMt then\r\n    return 'pending'\r\n  end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "local function hasToString(obj)\r\n  return type(obj) == 'string' or (debug.getmetatable(obj) or {}).__tostring\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "local function isCallable(obj)\r\n  return type(obj) == 'function' or (debug.getmetatable(obj) or {}).__call\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function busted.getTrace(element, level, msg)\r\n    local function trimTrace(info)\r\n      local index = info.traceback:find('\\n%s*%[C]')\r\n      info.traceback = info.traceback:sub(1, index)\r\n      return info\r\n    end\r\n    level = level or  3\r\n\r\n    local thisdir = path.dirname(debug.getinfo(1, 'Sl').source)\r\n    local info = debug.getinfo(level, 'Sl')\r\n    while info.what == 'C' or info.short_src:match('luassert[/\\\\].*%.lua$') or\r\n          (info.source:sub(1,1) == '@' and thisdir == path.dirname(info.source)) do\r\n      level = level + 1\r\n      info = debug.getinfo(level, 'Sl')\r\n    end\r\n\r\n    info.traceback = debug.traceback('', level)\r\n    info.message = msg\r\n\r\n    local file = busted.getFile(element)\r\n    return file and file.getTrace(file.name, info) or trimTrace(info)\r\n  end",
    "type": "function"
  }, {
    "id": 15,
    "text": "local function trimTrace(info)\r\n      local index = info.traceback:find('\\n%s*%[C]')\r\n      info.traceback = info.traceback:sub(1, index)\r\n      return info\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 16,
    "text": "local index = info.traceback:find('\\n%s*%[C]')",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "info.traceback = info.traceback:sub(1, index)",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "level = level or  3",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "local thisdir = path.dirname(debug.getinfo(1, 'Sl').source)",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "local info = debug.getinfo(level, 'Sl')",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "while info.what == 'C' or info.short_src:match('luassert[/\\\\].*%.lua$') or\r\n          (info.source:sub(1,1) == '@' and thisdir == path.dirname(info.source)) do\r\n      level = level + 1\r\n      info = debug.getinfo(level, 'Sl')\r\n    end",
    "type": "statement:while"
  }, {
    "id": 22,
    "text": "level = level + 1",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "info = debug.getinfo(level, 'Sl')",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "info.traceback = debug.traceback('', level)",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "info.message = msg",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "local file = busted.getFile(element)",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "local function trimTrace(info)\r\n      local index = info.traceback:find('\\n%s*%[C]')\r\n      info.traceback = info.traceback:sub(1, index)\r\n      return info\r\n    end",
    "type": "function"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function busted.rewriteMessage(element, message, trace)\r\n    local file = busted.getFile(element)\r\n    local msg = hasToString(message) and tostring(message)\r\n    msg = msg or (message ~= nil and pretty.write(message) or 'Nil error')\r\n    msg = (file and file.rewriteMessage and file.rewriteMessage(file.name, msg) or msg)\r\n\r\n    local hasFileLine = msg:match('^[^\\n]-:%d+: .*')\r\n    if not hasFileLine then\r\n      local trace = trace or busted.getTrace(element, 3, message)\r\n      local fileline = trace.short_src .. ':' .. trace.currentline .. ': '\r\n      msg = fileline .. msg\r\n    end\r\n\r\n    return msg\r\n  end",
    "type": "function"
  }, {
    "id": 31,
    "text": "local msg = hasToString(message) and tostring(message)",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "msg = msg or (message ~= nil and pretty.write(message) or 'Nil error')",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "msg = (file and file.rewriteMessage and file.rewriteMessage(file.name, msg) or msg)",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "local hasFileLine = msg:match('^[^\\n]-:%d+: .*')",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "if not hasFileLine then\r\n      local trace = trace or busted.getTrace(element, 3, message)\r\n      local fileline = trace.short_src .. ':' .. trace.currentline .. ': '\r\n      msg = fileline .. msg\r\n    end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "local trace = trace or busted.getTrace(element, 3, message)",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "local fileline = trace.short_src .. ':' .. trace.currentline .. ': '",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "msg = fileline .. msg",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function busted.publish(...)\r\n    return mediator:publish(...)\r\n  end",
    "type": "function"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function busted.subscribe(...)\r\n    return mediator:subscribe(...)\r\n  end",
    "type": "function"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function busted.unsubscribe(...)\r\n    return mediator:removeSubscriber(...)\r\n  end",
    "type": "function"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function busted.getFile(element)\r\n    local parent = busted.context.parent(element)\r\n\r\n    while parent do\r\n      if parent.file then\r\n        local file = parent.file[1]\r\n        return {\r\n          name = file.name,\r\n          getTrace = file.run.getTrace,\r\n          rewriteMessage = file.run.rewriteMessage\r\n        }\r\n      end\r\n\r\n      if parent.descriptor == 'file' then\r\n        return {\r\n          name = parent.name,\r\n          getTrace = parent.run.getTrace,\r\n          rewriteMessage = parent.run.rewriteMessage\r\n        }\r\n      end\r\n\r\n      parent = busted.context.parent(parent)\r\n    end\r\n\r\n    return parent\r\n  end",
    "type": "function"
  }, {
    "id": 47,
    "text": "local parent = busted.context.parent(element)",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "while parent do\r\n      if parent.file then\r\n        local file = parent.file[1]\r\n        return {\r\n          name = file.name,\r\n          getTrace = file.run.getTrace,\r\n          rewriteMessage = file.run.rewriteMessage\r\n        }\r\n      end\r\n\r\n      if parent.descriptor == 'file' then\r\n        return {\r\n          name = parent.name,\r\n          getTrace = parent.run.getTrace,\r\n          rewriteMessage = parent.run.rewriteMessage\r\n        }\r\n      end\r\n\r\n      parent = busted.context.parent(parent)\r\n    end",
    "type": "statement:while"
  }, {
    "id": 49,
    "text": "if parent.file then\r\n        local file = parent.file[1]\r\n        return {\r\n          name = file.name,\r\n          getTrace = file.run.getTrace,\r\n          rewriteMessage = file.run.rewriteMessage\r\n        }\r\n      end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "local file = parent.file[1]",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "if parent.descriptor == 'file' then\r\n        return {\r\n          name = parent.name,\r\n          getTrace = parent.run.getTrace,\r\n          rewriteMessage = parent.run.rewriteMessage\r\n        }\r\n      end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "parent = busted.context.parent(parent)",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "function busted.fail(msg, level)\r\n    local rawlevel = (type(level) ~= 'number' or level <= 0) and level\r\n    local level = level or 1\r\n    local _, emsg = pcall(throw, msg, rawlevel or level+2)\r\n    local e = { message = emsg }\r\n    setmetatable(e, hasToString(msg) and failureMt or failureMtNoString)\r\n    throw(e, rawlevel or level+1)\r\n  end",
    "type": "function"
  }, {
    "id": 55,
    "text": "local rawlevel = (type(level) ~= 'number' or level <= 0) and level",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "local level = level or 1",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "local _, emsg = pcall(throw, msg, rawlevel or level+2)",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "local e = { message = emsg }",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "setmetatable(e, hasToString(msg) and failureMt or failureMtNoString)",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "throw(e, rawlevel or level+1)",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "function busted.pending(msg)\r\n    local p = { message = msg }\r\n    setmetatable(p, pendingMt)\r\n    throw(p)\r\n  end",
    "type": "function"
  }, {
    "id": 63,
    "text": "local p = { message = msg }",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "setmetatable(p, pendingMt)",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "throw(p)",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "function busted.bindfenv(callable, var, value)\r\n    local env = {}\r\n    local f = (debug.getmetatable(callable) or {}).__call or callable\r\n    setmetatable(env, { __index = getfenv(f) })\r\n    env[var] = value\r\n    setfenv(f, env)\r\n  end",
    "type": "function"
  }, {
    "id": 68,
    "text": "local env = {}",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "local f = (debug.getmetatable(callable) or {}).__call or callable",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "setmetatable(env, { __index = getfenv(f) })",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "env[var] = value",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "setfenv(f, env)",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function busted.wrap(callable)\r\n    if isCallable(callable) then\r\n      -- prioritize __call if it exists, like in files\r\n      environment.wrap((debug.getmetatable(callable) or {}).__call or callable)\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 75,
    "text": "if isCallable(callable) then\r\n      -- prioritize __call if it exists, like in files\r\n      environment.wrap((debug.getmetatable(callable) or {}).__call or callable)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "environment.wrap((debug.getmetatable(callable) or {}).__call or callable)",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "function busted.safe(descriptor, run, element)\r\n    busted.context.push(element)\r\n    local trace, message\r\n    local status = 'success'\r\n\r\n    local ret = { xpcall(run, function(msg)\r\n      status = errortype(msg)\r\n      trace = busted.getTrace(element, 3, msg)\r\n      message = busted.rewriteMessage(element, msg, trace)\r\n    end) }\r\n\r\n    if not ret[1] then\r\n      if status == 'success' then\r\n        status = 'error'\r\n        trace = busted.getTrace(element, 3, ret[2])\r\n        message = busted.rewriteMessage(element, ret[2], trace)\r\n      elseif status == 'failure' and descriptor ~= 'it' then\r\n        -- Only 'it' blocks can generate test failures. Failures in all\r\n        -- other blocks are errors outside the test.\r\n        status = 'error'\r\n      end\r\n      -- Note: descriptor may be different from element.descriptor when\r\n      -- safe_publish is used (i.e. for test start/end). The safe_publish\r\n      -- descriptor needs to be different for 'it' blocks so that we can\r\n      -- detect that a 'failure' in a test start/end handler is not really\r\n      -- a test failure, but rather an error outside the test, much like a\r\n      -- failure in a support function (i.e. before_each/after_each or\r\n      -- setup/teardown).\r\n      busted.publish({ status, element.descriptor }, element, busted.context.parent(element), message, trace)\r\n    end\r\n    ret[1] = busted.status(status)\r\n\r\n    busted.context.pop()\r\n    return unpack(ret)\r\n  end",
    "type": "function"
  }, {
    "id": 79,
    "text": "busted.context.push(element)",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "local trace, message",
    "type": "statement:localassign"
  }, {
    "id": 81,
    "text": "local status = 'success'",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "local ret = { xpcall(run, function(msg)\r\n      status = errortype(msg)\r\n      trace = busted.getTrace(element, 3, msg)\r\n      message = busted.rewriteMessage(element, msg, trace)\r\n    end) }",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "status = errortype(msg)",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "trace = busted.getTrace(element, 3, msg)",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "message = busted.rewriteMessage(element, msg, trace)",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "if not ret[1] then\r\n      if status == 'success' then\r\n        status = 'error'\r\n        trace = busted.getTrace(element, 3, ret[2])\r\n        message = busted.rewriteMessage(element, ret[2], trace)\r\n      elseif status == 'failure' and descriptor ~= 'it' then\r\n        -- Only 'it' blocks can generate test failures. Failures in all\r\n        -- other blocks are errors outside the test.\r\n        status = 'error'\r\n      end\r\n      -- Note: descriptor may be different from element.descriptor when\r\n      -- safe_publish is used (i.e. for test start/end). The safe_publish\r\n      -- descriptor needs to be different for 'it' blocks so that we can\r\n      -- detect that a 'failure' in a test start/end handler is not really\r\n      -- a test failure, but rather an error outside the test, much like a\r\n      -- failure in a support function (i.e. before_each/after_each or\r\n      -- setup/teardown).\r\n      busted.publish({ status, element.descriptor }, element, busted.context.parent(element), message, trace)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 87,
    "text": "if status == 'success' then\r\n        status = 'error'\r\n        trace = busted.getTrace(element, 3, ret[2])\r\n        message = busted.rewriteMessage(element, ret[2], trace)\r\n      elseif status == 'failure' and descriptor ~= 'it' then\r\n        -- Only 'it' blocks can generate test failures. Failures in all\r\n        -- other blocks are errors outside the test.\r\n        status = 'error'\r\n      end",
    "type": "statement:if"
  }, {
    "id": 88,
    "text": "status = 'error'",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "trace = busted.getTrace(element, 3, ret[2])",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "message = busted.rewriteMessage(element, ret[2], trace)",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "busted.publish({ status, element.descriptor }, element, busted.context.parent(element), message, trace)",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "ret[1] = busted.status(status)",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "busted.context.pop()",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 95,
    "text": "function busted.safe_publish(descriptor, channel, element, ...)\r\n    local args = {...}\r\n    local n = select('#', ...)\r\n    if channel[2] == 'start' then\r\n      element.starttick = busted.monotime()\r\n      element.starttime = busted.gettime()\r\n    elseif channel[2] == 'end' then\r\n      element.endtime = busted.gettime()\r\n      element.endtick = busted.monotime()\r\n      element.duration = element.starttick and (element.endtick - element.starttick)\r\n    end\r\n    local status = busted.safe(descriptor, function()\r\n      busted.publish(channel, element, unpack(args, 1, n))\r\n    end, element)\r\n    return status:success()\r\n  end",
    "type": "function"
  }, {
    "id": 96,
    "text": "local args = {...}",
    "type": "statement:localassign"
  }, {
    "id": 97,
    "text": "local n = select('#', ...)",
    "type": "statement:localassign"
  }, {
    "id": 98,
    "text": "if channel[2] == 'start' then\r\n      element.starttick = busted.monotime()\r\n      element.starttime = busted.gettime()\r\n    elseif channel[2] == 'end' then\r\n      element.endtime = busted.gettime()\r\n      element.endtick = busted.monotime()\r\n      element.duration = element.starttick and (element.endtick - element.starttick)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 99,
    "text": "element.starttick = busted.monotime()",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "element.starttime = busted.gettime()",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "element.endtime = busted.gettime()",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "element.endtick = busted.monotime()",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "element.duration = element.starttick and (element.endtick - element.starttick)",
    "type": "statement:assign"
  }, {
    "id": 104,
    "text": "local status = busted.safe(descriptor, function()\r\n      busted.publish(channel, element, unpack(args, 1, n))\r\n    end, element)",
    "type": "statement:localassign"
  }, {
    "id": 105,
    "text": "busted.publish(channel, element, unpack(args, 1, n))",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 107,
    "text": "function busted.exportApi(key, value)\r\n    busted.api[key] = value\r\n  end",
    "type": "function"
  }, {
    "id": 108,
    "text": "busted.api[key] = value",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 110,
    "text": "function busted.export(key, value)\r\n    busted.exportApi(key, value)\r\n    environment.set(key, value)\r\n  end",
    "type": "function"
  }, {
    "id": 111,
    "text": "busted.exportApi(key, value)",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "environment.set(key, value)",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 114,
    "text": "function busted.hide(key, value)\r\n    busted.api[key] = nil\r\n    environment.set(key, nil)\r\n  end",
    "type": "function"
  }, {
    "id": 115,
    "text": "busted.api[key] = nil",
    "type": "statement:assign"
  }, {
    "id": 116,
    "text": "environment.set(key, nil)",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 118,
    "text": "function busted.register(descriptor, executor, attributes)\r\n    local alias = nil\r\n    if type(executor) == 'string' then\r\n      alias = descriptor\r\n      descriptor = executor\r\n      executor = executors[descriptor]\r\n      attributes = attributes or eattributes[descriptor]\r\n      executors[alias] = executor\r\n      eattributes[alias] = attributes\r\n    else\r\n      if executor ~= nil and not isCallable(executor) then\r\n        attributes = executor\r\n        executor = nil\r\n      end\r\n      executors[descriptor] = executor\r\n      eattributes[descriptor] = attributes\r\n    end\r\n\r\n    local publisher = function(name, fn)\r\n      if not fn and type(name) == 'function' then\r\n        fn = name\r\n        name = alias\r\n      end\r\n\r\n      local trace\r\n\r\n      local ctx = busted.context.get()\r\n      if busted.context.parent(ctx) then\r\n        trace = busted.getTrace(ctx, 3, name)\r\n      end\r\n\r\n      local publish = function(f)\r\n        busted.publish({ 'register', descriptor }, name, f, trace, attributes)\r\n      end\r\n\r\n      if fn then publish(fn) else return publish end\r\n    end\r\n\r\n    local edescriptor = alias or descriptor\r\n    busted.executors[edescriptor] = publisher\r\n    busted.export(edescriptor, publisher)\r\n\r\n    busted.subscribe({ 'register', descriptor }, function(name, fn, trace, attributes)\r\n      local ctx = busted.context.get()\r\n      local plugin = {\r\n        descriptor = descriptor,\r\n        attributes = attributes or {},\r\n        name = name,\r\n        run = fn,\r\n        trace = trace,\r\n        starttick = nil,\r\n        endtick = nil,\r\n        starttime = nil,\r\n        endtime = nil,\r\n        duration = nil,\r\n      }\r\n\r\n      busted.context.attach(plugin)\r\n\r\n      if not ctx[descriptor] then\r\n        ctx[descriptor] = { plugin }\r\n      else\r\n        ctx[descriptor][#ctx[descriptor]+1] = plugin\r\n      end\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 119,
    "text": "local alias = nil",
    "type": "statement:localassign"
  }, {
    "id": 120,
    "text": "if type(executor) == 'string' then\r\n      alias = descriptor\r\n      descriptor = executor\r\n      executor = executors[descriptor]\r\n      attributes = attributes or eattributes[descriptor]\r\n      executors[alias] = executor\r\n      eattributes[alias] = attributes\r\n    else\r\n      if executor ~= nil and not isCallable(executor) then\r\n        attributes = executor\r\n        executor = nil\r\n      end\r\n      executors[descriptor] = executor\r\n      eattributes[descriptor] = attributes\r\n    end",
    "type": "statement:if"
  }, {
    "id": 121,
    "text": "alias = descriptor",
    "type": "statement:assign"
  }, {
    "id": 122,
    "text": "descriptor = executor",
    "type": "statement:assign"
  }, {
    "id": 123,
    "text": "executor = executors[descriptor]",
    "type": "statement:assign"
  }, {
    "id": 124,
    "text": "attributes = attributes or eattributes[descriptor]",
    "type": "statement:assign"
  }, {
    "id": 125,
    "text": "executors[alias] = executor",
    "type": "statement:assign"
  }, {
    "id": 126,
    "text": "eattributes[alias] = attributes",
    "type": "statement:assign"
  }, {
    "id": 127,
    "text": "if executor ~= nil and not isCallable(executor) then\r\n        attributes = executor\r\n        executor = nil\r\n      end",
    "type": "statement:if"
  }, {
    "id": 128,
    "text": "attributes = executor",
    "type": "statement:assign"
  }, {
    "id": 129,
    "text": "executor = nil",
    "type": "statement:assign"
  }, {
    "id": 130,
    "text": "executors[descriptor] = executor",
    "type": "statement:assign"
  }, {
    "id": 131,
    "text": "eattributes[descriptor] = attributes",
    "type": "statement:assign"
  }, {
    "id": 132,
    "text": "local publisher = function(name, fn)\r\n      if not fn and type(name) == 'function' then\r\n        fn = name\r\n        name = alias\r\n      end\r\n\r\n      local trace\r\n\r\n      local ctx = busted.context.get()\r\n      if busted.context.parent(ctx) then\r\n        trace = busted.getTrace(ctx, 3, name)\r\n      end\r\n\r\n      local publish = function(f)\r\n        busted.publish({ 'register', descriptor }, name, f, trace, attributes)\r\n      end\r\n\r\n      if fn then publish(fn) else return publish end\r\n    end",
    "type": "statement:localassign"
  }, {
    "id": 133,
    "text": "if not fn and type(name) == 'function' then\r\n        fn = name\r\n        name = alias\r\n      end",
    "type": "statement:if"
  }, {
    "id": 134,
    "text": "fn = name",
    "type": "statement:assign"
  }, {
    "id": 135,
    "text": "name = alias",
    "type": "statement:assign"
  }, {
    "id": 136,
    "text": "local trace",
    "type": "statement:localassign"
  }, {
    "id": 137,
    "text": "local ctx = busted.context.get()",
    "type": "statement:localassign"
  }, {
    "id": 138,
    "text": "if busted.context.parent(ctx) then\r\n        trace = busted.getTrace(ctx, 3, name)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 139,
    "text": "trace = busted.getTrace(ctx, 3, name)",
    "type": "statement:assign"
  }, {
    "id": 140,
    "text": "local publish = function(f)\r\n        busted.publish({ 'register', descriptor }, name, f, trace, attributes)\r\n      end",
    "type": "statement:localassign"
  }, {
    "id": 141,
    "text": "busted.publish({ 'register', descriptor }, name, f, trace, attributes)",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "if fn then publish(fn) else return publish end",
    "type": "statement:if"
  }, {
    "id": 143,
    "text": "publish(fn)",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "local edescriptor = alias or descriptor",
    "type": "statement:localassign"
  }, {
    "id": 145,
    "text": "busted.executors[edescriptor] = publisher",
    "type": "statement:assign"
  }, {
    "id": 146,
    "text": "busted.export(edescriptor, publisher)",
    "type": "statement:functioncall"
  }, {
    "id": 147,
    "text": "busted.subscribe({ 'register', descriptor }, function(name, fn, trace, attributes)\r\n      local ctx = busted.context.get()\r\n      local plugin = {\r\n        descriptor = descriptor,\r\n        attributes = attributes or {},\r\n        name = name,\r\n        run = fn,\r\n        trace = trace,\r\n        starttick = nil,\r\n        endtick = nil,\r\n        starttime = nil,\r\n        endtime = nil,\r\n        duration = nil,\r\n      }\r\n\r\n      busted.context.attach(plugin)\r\n\r\n      if not ctx[descriptor] then\r\n        ctx[descriptor] = { plugin }\r\n      else\r\n        ctx[descriptor][#ctx[descriptor]+1] = plugin\r\n      end\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 148,
    "text": "local plugin = {\r\n        descriptor = descriptor,\r\n        attributes = attributes or {},\r\n        name = name,\r\n        run = fn,\r\n        trace = trace,\r\n        starttick = nil,\r\n        endtick = nil,\r\n        starttime = nil,\r\n        endtime = nil,\r\n        duration = nil,\r\n      }",
    "type": "statement:localassign"
  }, {
    "id": 149,
    "text": "busted.context.attach(plugin)",
    "type": "statement:functioncall"
  }, {
    "id": 150,
    "text": "if not ctx[descriptor] then\r\n        ctx[descriptor] = { plugin }\r\n      else\r\n        ctx[descriptor][#ctx[descriptor]+1] = plugin\r\n      end",
    "type": "statement:if"
  }, {
    "id": 151,
    "text": "ctx[descriptor] = { plugin }",
    "type": "statement:assign"
  }, {
    "id": 152,
    "text": "ctx[descriptor][#ctx[descriptor]+1] = plugin",
    "type": "statement:assign"
  }, {
    "id": 153,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 154,
    "text": "function(f)\r\n        busted.publish({ 'register', descriptor }, name, f, trace, attributes)\r\n      end",
    "type": "function"
  }, {
    "id": 155,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 156,
    "text": "function(name, fn)\r\n      if not fn and type(name) == 'function' then\r\n        fn = name\r\n        name = alias\r\n      end\r\n\r\n      local trace\r\n\r\n      local ctx = busted.context.get()\r\n      if busted.context.parent(ctx) then\r\n        trace = busted.getTrace(ctx, 3, name)\r\n      end\r\n\r\n      local publish = function(f)\r\n        busted.publish({ 'register', descriptor }, name, f, trace, attributes)\r\n      end\r\n\r\n      if fn then publish(fn) else return publish end\r\n    end",
    "type": "function"
  }, {
    "id": 157,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 158,
    "text": "function busted.execute(current)\r\n    if not current then current = busted.context.get() end\r\n    for _, v in pairs(busted.context.children(current)) do\r\n      local executor = executors[v.descriptor]\r\n      if executor and not busted.skipAll then\r\n        busted.safe(v.descriptor, function() executor(v) end, v)\r\n      end\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 159,
    "text": "if not current then current = busted.context.get() end",
    "type": "statement:if"
  }, {
    "id": 160,
    "text": "current = busted.context.get()",
    "type": "statement:assign"
  }, {
    "id": 161,
    "text": "for _, v in pairs(busted.context.children(current)) do\r\n      local executor = executors[v.descriptor]\r\n      if executor and not busted.skipAll then\r\n        busted.safe(v.descriptor, function() executor(v) end, v)\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 162,
    "text": "local executor = executors[v.descriptor]",
    "type": "statement:localassign"
  }, {
    "id": 163,
    "text": "if executor and not busted.skipAll then\r\n        busted.safe(v.descriptor, function() executor(v) end, v)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 164,
    "text": "busted.safe(v.descriptor, function() executor(v) end, v)",
    "type": "statement:functioncall"
  }, {
    "id": 165,
    "text": "executor(v)",
    "type": "statement:functioncall"
  }, {
    "id": 166,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 167,
    "text": "function(e) return tostring(e.message) end",
    "type": "function"
  }, {
    "id": 168,
    "text": "function(p) return p.message end",
    "type": "function"
  }, {
    "id": 169,
    "text": "function(msg)\r\n      status = errortype(msg)\r\n      trace = busted.getTrace(element, 3, msg)\r\n      message = busted.rewriteMessage(element, msg, trace)\r\n    end",
    "type": "function"
  }, {
    "id": 170,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 171,
    "text": "function()\r\n      busted.publish(channel, element, unpack(args, 1, n))\r\n    end",
    "type": "function"
  }, {
    "id": 172,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 173,
    "text": "function(name, fn, trace, attributes)\r\n      local ctx = busted.context.get()\r\n      local plugin = {\r\n        descriptor = descriptor,\r\n        attributes = attributes or {},\r\n        name = name,\r\n        run = fn,\r\n        trace = trace,\r\n        starttick = nil,\r\n        endtick = nil,\r\n        starttime = nil,\r\n        endtime = nil,\r\n        duration = nil,\r\n      }\r\n\r\n      busted.context.attach(plugin)\r\n\r\n      if not ctx[descriptor] then\r\n        ctx[descriptor] = { plugin }\r\n      else\r\n        ctx[descriptor][#ctx[descriptor]+1] = plugin\r\n      end\r\n    end",
    "type": "function"
  }, {
    "id": 174,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 175,
    "text": "function() executor(v) end",
    "type": "function"
  }, {
    "id": 176,
    "text": "function()\r\n  local mediator = require 'mediator'()\r\n\r\n  local busted = {}\r\n  busted.version = '2.0.rc12-0'\r\n\r\n  local root = require 'busted.context'()\r\n  busted.context = root.ref()\r\n\r\n  local environment = require 'busted.environment'(busted.context)\r\n\r\n  busted.api = {}\r\n  busted.executors = {}\r\n  local executors = {}\r\n  local eattributes = {}\r\n\r\n  busted.gettime = system.gettime\r\n  busted.monotime = system.monotime\r\n  busted.sleep = system.sleep\r\n  busted.status = require 'busted.status'\r\n\r\n  function busted.getTrace(element, level, msg)\r\n    local function trimTrace(info)\r\n      local index = info.traceback:find('\\n%s*%[C]')\r\n      info.traceback = info.traceback:sub(1, index)\r\n      return info\r\n    end\r\n    level = level or  3\r\n\r\n    local thisdir = path.dirname(debug.getinfo(1, 'Sl').source)\r\n    local info = debug.getinfo(level, 'Sl')\r\n    while info.what == 'C' or info.short_src:match('luassert[/\\\\].*%.lua$') or\r\n          (info.source:sub(1,1) == '@' and thisdir == path.dirname(info.source)) do\r\n      level = level + 1\r\n      info = debug.getinfo(level, 'Sl')\r\n    end\r\n\r\n    info.traceback = debug.traceback('', level)\r\n    info.message = msg\r\n\r\n    local file = busted.getFile(element)\r\n    return file and file.getTrace(file.name, info) or trimTrace(info)\r\n  end\r\n\r\n  function busted.rewriteMessage(element, message, trace)\r\n    local file = busted.getFile(element)\r\n    local msg = hasToString(message) and tostring(message)\r\n    msg = msg or (message ~= nil and pretty.write(message) or 'Nil error')\r\n    msg = (file and file.rewriteMessage and file.rewriteMessage(file.name, msg) or msg)\r\n\r\n    local hasFileLine = msg:match('^[^\\n]-:%d+: .*')\r\n    if not hasFileLine then\r\n      local trace = trace or busted.getTrace(element, 3, message)\r\n      local fileline = trace.short_src .. ':' .. trace.currentline .. ': '\r\n      msg = fileline .. msg\r\n    end\r\n\r\n    return msg\r\n  end\r\n\r\n  function busted.publish(...)\r\n    return mediator:publish(...)\r\n  end\r\n\r\n  function busted.subscribe(...)\r\n    return mediator:subscribe(...)\r\n  end\r\n\r\n  function busted.unsubscribe(...)\r\n    return mediator:removeSubscriber(...)\r\n  end\r\n\r\n  function busted.getFile(element)\r\n    local parent = busted.context.parent(element)\r\n\r\n    while parent do\r\n      if parent.file then\r\n        local file = parent.file[1]\r\n        return {\r\n          name = file.name,\r\n          getTrace = file.run.getTrace,\r\n          rewriteMessage = file.run.rewriteMessage\r\n        }\r\n      end\r\n\r\n      if parent.descriptor == 'file' then\r\n        return {\r\n          name = parent.name,\r\n          getTrace = parent.run.getTrace,\r\n          rewriteMessage = parent.run.rewriteMessage\r\n        }\r\n      end\r\n\r\n      parent = busted.context.parent(parent)\r\n    end\r\n\r\n    return parent\r\n  end\r\n\r\n  function busted.fail(msg, level)\r\n    local rawlevel = (type(level) ~= 'number' or level <= 0) and level\r\n    local level = level or 1\r\n    local _, emsg = pcall(throw, msg, rawlevel or level+2)\r\n    local e = { message = emsg }\r\n    setmetatable(e, hasToString(msg) and failureMt or failureMtNoString)\r\n    throw(e, rawlevel or level+1)\r\n  end\r\n\r\n  function busted.pending(msg)\r\n    local p = { message = msg }\r\n    setmetatable(p, pendingMt)\r\n    throw(p)\r\n  end\r\n\r\n  function busted.bindfenv(callable, var, value)\r\n    local env = {}\r\n    local f = (debug.getmetatable(callable) or {}).__call or callable\r\n    setmetatable(env, { __index = getfenv(f) })\r\n    env[var] = value\r\n    setfenv(f, env)\r\n  end\r\n\r\n  function busted.wrap(callable)\r\n    if isCallable(callable) then\r\n      -- prioritize __call if it exists, like in files\r\n      environment.wrap((debug.getmetatable(callable) or {}).__call or callable)\r\n    end\r\n  end\r\n\r\n  function busted.safe(descriptor, run, element)\r\n    busted.context.push(element)\r\n    local trace, message\r\n    local status = 'success'\r\n\r\n    local ret = { xpcall(run, function(msg)\r\n      status = errortype(msg)\r\n      trace = busted.getTrace(element, 3, msg)\r\n      message = busted.rewriteMessage(element, msg, trace)\r\n    end) }\r\n\r\n    if not ret[1] then\r\n      if status == 'success' then\r\n        status = 'error'\r\n        trace = busted.getTrace(element, 3, ret[2])\r\n        message = busted.rewriteMessage(element, ret[2], trace)\r\n      elseif status == 'failure' and descriptor ~= 'it' then\r\n        -- Only 'it' blocks can generate test failures. Failures in all\r\n        -- other blocks are errors outside the test.\r\n        status = 'error'\r\n      end\r\n      -- Note: descriptor may be different from element.descriptor when\r\n      -- safe_publish is used (i.e. for test start/end). The safe_publish\r\n      -- descriptor needs to be different for 'it' blocks so that we can\r\n      -- detect that a 'failure' in a test start/end handler is not really\r\n      -- a test failure, but rather an error outside the test, much like a\r\n      -- failure in a support function (i.e. before_each/after_each or\r\n      -- setup/teardown).\r\n      busted.publish({ status, element.descriptor }, element, busted.context.parent(element), message, trace)\r\n    end\r\n    ret[1] = busted.status(status)\r\n\r\n    busted.context.pop()\r\n    return unpack(ret)\r\n  end\r\n\r\n  function busted.safe_publish(descriptor, channel, element, ...)\r\n    local args = {...}\r\n    local n = select('#', ...)\r\n    if channel[2] == 'start' then\r\n      element.starttick = busted.monotime()\r\n      element.starttime = busted.gettime()\r\n    elseif channel[2] == 'end' then\r\n      element.endtime = busted.gettime()\r\n      element.endtick = busted.monotime()\r\n      element.duration = element.starttick and (element.endtick - element.starttick)\r\n    end\r\n    local status = busted.safe(descriptor, function()\r\n      busted.publish(channel, element, unpack(args, 1, n))\r\n    end, element)\r\n    return status:success()\r\n  end\r\n\r\n  function busted.exportApi(key, value)\r\n    busted.api[key] = value\r\n  end\r\n\r\n  function busted.export(key, value)\r\n    busted.exportApi(key, value)\r\n    environment.set(key, value)\r\n  end\r\n\r\n  function busted.hide(key, value)\r\n    busted.api[key] = nil\r\n    environment.set(key, nil)\r\n  end\r\n\r\n  function busted.register(descriptor, executor, attributes)\r\n    local alias = nil\r\n    if type(executor) == 'string' then\r\n      alias = descriptor\r\n      descriptor = executor\r\n      executor = executors[descriptor]\r\n      attributes = attributes or eattributes[descriptor]\r\n      executors[alias] = executor\r\n      eattributes[alias] = attributes\r\n    else\r\n      if executor ~= nil and not isCallable(executor) then\r\n        attributes = executor\r\n        executor = nil\r\n      end\r\n      executors[descriptor] = executor\r\n      eattributes[descriptor] = attributes\r\n    end\r\n\r\n    local publisher = function(name, fn)\r\n      if not fn and type(name) == 'function' then\r\n        fn = name\r\n        name = alias\r\n      end\r\n\r\n      local trace\r\n\r\n      local ctx = busted.context.get()\r\n      if busted.context.parent(ctx) then\r\n        trace = busted.getTrace(ctx, 3, name)\r\n      end\r\n\r\n      local publish = function(f)\r\n        busted.publish({ 'register', descriptor }, name, f, trace, attributes)\r\n      end\r\n\r\n      if fn then publish(fn) else return publish end\r\n    end\r\n\r\n    local edescriptor = alias or descriptor\r\n    busted.executors[edescriptor] = publisher\r\n    busted.export(edescriptor, publisher)\r\n\r\n    busted.subscribe({ 'register', descriptor }, function(name, fn, trace, attributes)\r\n      local ctx = busted.context.get()\r\n      local plugin = {\r\n        descriptor = descriptor,\r\n        attributes = attributes or {},\r\n        name = name,\r\n        run = fn,\r\n        trace = trace,\r\n        starttick = nil,\r\n        endtick = nil,\r\n        starttime = nil,\r\n        endtime = nil,\r\n        duration = nil,\r\n      }\r\n\r\n      busted.context.attach(plugin)\r\n\r\n      if not ctx[descriptor] then\r\n        ctx[descriptor] = { plugin }\r\n      else\r\n        ctx[descriptor][#ctx[descriptor]+1] = plugin\r\n      end\r\n    end)\r\n  end\r\n\r\n  function busted.execute(current)\r\n    if not current then current = busted.context.get() end\r\n    for _, v in pairs(busted.context.children(current)) do\r\n      local executor = executors[v.descriptor]\r\n      if executor and not busted.skipAll then\r\n        busted.safe(v.descriptor, function() executor(v) end, v)\r\n      end\r\n    end\r\n  end\r\n\r\n  return busted\r\nend",
    "type": "function"
  }, {
    "id": 177,
    "text": "local mediator = require 'mediator'()",
    "type": "statement:localassign"
  }, {
    "id": 178,
    "text": "local busted = {}",
    "type": "statement:localassign"
  }, {
    "id": 179,
    "text": "busted.version = '2.0.rc12-0'",
    "type": "statement:assign"
  }, {
    "id": 180,
    "text": "local root = require 'busted.context'()",
    "type": "statement:localassign"
  }, {
    "id": 181,
    "text": "busted.context = root.ref()",
    "type": "statement:assign"
  }, {
    "id": 182,
    "text": "local environment = require 'busted.environment'(busted.context)",
    "type": "statement:localassign"
  }, {
    "id": 183,
    "text": "busted.api = {}",
    "type": "statement:assign"
  }, {
    "id": 184,
    "text": "busted.executors = {}",
    "type": "statement:assign"
  }, {
    "id": 185,
    "text": "local executors = {}",
    "type": "statement:localassign"
  }, {
    "id": 186,
    "text": "local eattributes = {}",
    "type": "statement:localassign"
  }, {
    "id": 187,
    "text": "busted.gettime = system.gettime",
    "type": "statement:assign"
  }, {
    "id": 188,
    "text": "busted.monotime = system.monotime",
    "type": "statement:assign"
  }, {
    "id": 189,
    "text": "busted.sleep = system.sleep",
    "type": "statement:assign"
  }, {
    "id": 190,
    "text": "busted.status = require 'busted.status'",
    "type": "statement:assign"
  }, {
    "id": 191,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 192,
    "text": "",
    "type": "function container"
  }, {
    "id": 193,
    "text": "local function __index(self, key)\r\n    return getEnv(context.get(), key)\r\n  end",
    "type": "function"
  }, {
    "id": 194,
    "text": "function(self, key)\r\n        return busted.api[key]\r\n      end",
    "type": "function"
  }, {
    "id": 195,
    "text": "function() return function(s) return s end end",
    "type": "function"
  }, {
    "id": 196,
    "text": "function() return function(s) return s end end",
    "type": "function"
  }, {
    "id": 197,
    "text": "context.pop",
    "type": "global function"
  }, {
    "id": 198,
    "text": "dirname",
    "type": "global function"
  }, {
    "id": 199,
    "text": "write",
    "type": "global function"
  }, {
    "id": 200,
    "text": "context.push",
    "type": "global function"
  }, {
    "id": 201,
    "text": "context.attach",
    "type": "global function"
  }, {
    "id": 202,
    "text": "set",
    "type": "global function"
  }, {
    "id": 203,
    "text": "wrap",
    "type": "global function"
  }, {
    "id": 204,
    "text": "gettime",
    "type": "global function"
  }, {
    "id": 205,
    "text": "ref",
    "type": "global function"
  }, {
    "id": 206,
    "text": "monotime",
    "type": "global function"
  }, {
    "id": 207,
    "text": "context.get",
    "type": "global function"
  }, {
    "id": 208,
    "text": "context.parent",
    "type": "global function"
  }, {
    "id": 209,
    "text": "status",
    "type": "global function"
  }, {
    "id": 210,
    "text": "context.children",
    "type": "global function"
  }, {
    "id": 211,
    "text": "throw",
    "type": "global function"
  }, {
    "id": 212,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 213,
    "text": "getinfo",
    "type": "global function"
  }, {
    "id": 214,
    "text": "getTrace",
    "type": "global function"
  }, {
    "id": 215,
    "text": "traceback",
    "type": "global function"
  }, {
    "id": 216,
    "text": "select",
    "type": "global function"
  }, {
    "id": 217,
    "text": "getfenv",
    "type": "global function"
  }, {
    "id": 218,
    "text": "rewriteMessage",
    "type": "global function"
  }, {
    "id": 219,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 220,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 221,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 222,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 223,
    "text": "type",
    "type": "global function"
  }, {
    "id": 224,
    "text": "setfenv",
    "type": "global function"
  }, {
    "id": 225,
    "text": "executor",
    "type": "global function"
  }, {
    "id": 226,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 227,
    "text": "xpcall",
    "type": "global function"
  }, {
    "id": 228,
    "text": "require",
    "type": "global function"
  }, {
    "id": 229,
    "text": "",
    "type": "variable container"
  }, {
    "id": 230,
    "text": "",
    "type": "require container"
  }, {
    "id": 231,
    "text": "",
    "type": "local variable"
  }, {
    "id": 232,
    "text": "",
    "type": "n/a"
  }, {
    "id": 233,
    "text": "",
    "type": "local variable"
  }, {
    "id": 234,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 235,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 236,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 237,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 238,
    "text": "",
    "type": "function"
  }, {
    "id": 239,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 240,
    "text": "",
    "type": "string"
  }, {
    "id": 241,
    "text": "",
    "type": "local variable"
  }, {
    "id": 242,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 243,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 244,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 245,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 246,
    "text": "",
    "type": "string"
  }, {
    "id": 247,
    "text": "",
    "type": "local variable"
  }, {
    "id": 248,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 249,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 250,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 251,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 252,
    "text": "",
    "type": "function"
  }, {
    "id": 253,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 254,
    "text": "",
    "type": "string"
  }, {
    "id": 255,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 256,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 257,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 258,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 259,
    "text": "path",
    "type": "module"
  }, {
    "id": 260,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 261,
    "text": "pretty",
    "type": "module"
  }, {
    "id": 262,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 263,
    "text": "system",
    "type": "module"
  }, {
    "id": 264,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 265,
    "text": "mediator",
    "type": "module"
  }, {
    "id": 266,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 267,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 268,
    "text": "",
    "type": "interface container"
  }, {
    "id": 269,
    "text": "",
    "type": "interface"
  }, {
    "id": 270,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 271,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 272,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 273,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 274,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 275,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 276,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 277,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 278,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 279,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 280,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 281,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 282,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 283,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 284,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 285,
    "text": "",
    "type": "require local variable"
  } ]
}