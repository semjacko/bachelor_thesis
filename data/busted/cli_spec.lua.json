{
  "_filename": "cli_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/busted/spec/modules/cli_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 2,
    "label": "has",
    "to": 14
  }, {
    "from": 2,
    "label": "has",
    "to": 15
  }, {
    "from": 2,
    "label": "has",
    "to": 16
  }, {
    "from": 2,
    "label": "has",
    "to": 17
  }, {
    "from": 2,
    "label": "has",
    "to": 18
  }, {
    "from": 2,
    "label": "has",
    "to": 19
  }, {
    "from": 2,
    "label": "has",
    "to": 20
  }, {
    "from": 2,
    "label": "has",
    "to": 21
  }, {
    "from": 2,
    "label": "has",
    "to": 22
  }, {
    "from": 2,
    "label": "has",
    "to": 23
  }, {
    "from": 2,
    "label": "has",
    "to": 24
  }, {
    "from": 2,
    "label": "has",
    "to": 25
  }, {
    "from": 2,
    "label": "has",
    "to": 26
  }, {
    "from": 2,
    "label": "has",
    "to": 27
  }, {
    "from": 2,
    "label": "has",
    "to": 28
  }, {
    "from": 2,
    "label": "has",
    "to": 29
  }, {
    "from": 2,
    "label": "has",
    "to": 30
  }, {
    "from": 2,
    "label": "has",
    "to": 31
  }, {
    "from": 2,
    "label": "has",
    "to": 32
  }, {
    "from": 2,
    "label": "has",
    "to": 33
  }, {
    "from": 2,
    "label": "has",
    "to": 34
  }, {
    "from": 2,
    "label": "has",
    "to": 35
  }, {
    "from": 2,
    "label": "has",
    "to": 36
  }, {
    "from": 2,
    "label": "has",
    "to": 37
  }, {
    "from": 2,
    "label": "has",
    "to": 38
  }, {
    "from": 2,
    "label": "has",
    "to": 39
  }, {
    "from": 2,
    "label": "has",
    "to": 40
  }, {
    "from": 2,
    "label": "has",
    "to": 41
  }, {
    "from": 2,
    "label": "has",
    "to": 42
  }, {
    "from": 2,
    "label": "has",
    "to": 43
  }, {
    "from": 2,
    "label": "has",
    "to": 44
  }, {
    "from": 2,
    "label": "has",
    "to": 45
  }, {
    "from": 2,
    "label": "has",
    "to": 46
  }, {
    "from": 2,
    "label": "has",
    "to": 47
  }, {
    "from": 2,
    "label": "has",
    "to": 48
  }, {
    "from": 2,
    "label": "has",
    "to": 49
  }, {
    "from": 2,
    "label": "has",
    "to": 50
  }, {
    "from": 2,
    "label": "has",
    "to": 51
  }, {
    "from": 2,
    "label": "has",
    "to": 52
  }, {
    "from": 2,
    "label": "has",
    "to": 53
  }, {
    "from": 2,
    "label": "has",
    "to": 54
  }, {
    "from": 2,
    "label": "has",
    "to": 55
  }, {
    "from": 2,
    "label": "has",
    "to": 56
  }, {
    "from": 2,
    "label": "has",
    "to": 57
  }, {
    "from": 2,
    "label": "has",
    "to": 58
  }, {
    "from": 2,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 7
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 60,
    "label": "has",
    "to": 63
  }, {
    "from": 60,
    "label": "has",
    "to": 64
  }, {
    "from": 60,
    "label": "has",
    "to": 50
  }, {
    "from": 60,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 66,
    "label": "has",
    "to": 70
  }, {
    "from": 66,
    "label": "has",
    "to": 71
  }, {
    "from": 66,
    "label": "has",
    "to": 72
  }, {
    "from": 66,
    "label": "has",
    "to": 73
  }, {
    "from": 66,
    "label": "has",
    "to": 74
  }, {
    "from": 66,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 67
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 76,
    "label": "has",
    "to": 79
  }, {
    "from": 76,
    "label": "has",
    "to": 80
  }, {
    "from": 76,
    "label": "has",
    "to": 81
  }, {
    "from": 76,
    "label": "has",
    "to": 82
  }, {
    "from": 76,
    "label": "has",
    "to": 83
  }, {
    "from": 76,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 67
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 85,
    "label": "has",
    "to": 88
  }, {
    "from": 85,
    "label": "has",
    "to": 20
  }, {
    "from": 85,
    "label": "has",
    "to": 21
  }, {
    "from": 85,
    "label": "has",
    "to": 22
  }, {
    "from": 85,
    "label": "has",
    "to": 89
  }, {
    "from": 85,
    "label": "has",
    "to": 90
  }, {
    "from": 91,
    "label": "has",
    "to": 67
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 31
  }, {
    "from": 91,
    "label": "has",
    "to": 88
  }, {
    "from": 91,
    "label": "has",
    "to": 25
  }, {
    "from": 91,
    "label": "has",
    "to": 28
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 94,
    "label": "has",
    "to": 67
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 94,
    "label": "has",
    "to": 33
  }, {
    "from": 94,
    "label": "has",
    "to": 34
  }, {
    "from": 94,
    "label": "has",
    "to": 35
  }, {
    "from": 94,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 67
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 38
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 97,
    "label": "has",
    "to": 100
  }, {
    "from": 97,
    "label": "has",
    "to": 101
  }, {
    "from": 102,
    "label": "has",
    "to": 67
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 102,
    "label": "has",
    "to": 104
  }, {
    "from": 102,
    "label": "has",
    "to": 99
  }, {
    "from": 102,
    "label": "has",
    "to": 100
  }, {
    "from": 102,
    "label": "has",
    "to": 105
  }, {
    "from": 106,
    "label": "has",
    "to": 67
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 106,
    "label": "has",
    "to": 108
  }, {
    "from": 106,
    "label": "has",
    "to": 109
  }, {
    "from": 106,
    "label": "has",
    "to": 110
  }, {
    "from": 106,
    "label": "has",
    "to": 111
  }, {
    "from": 112,
    "label": "has",
    "to": 67
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 112,
    "label": "has",
    "to": 108
  }, {
    "from": 112,
    "label": "has",
    "to": 109
  }, {
    "from": 112,
    "label": "has",
    "to": 110
  }, {
    "from": 112,
    "label": "has",
    "to": 114
  }, {
    "from": 115,
    "label": "has",
    "to": 67
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 115,
    "label": "has",
    "to": 104
  }, {
    "from": 115,
    "label": "has",
    "to": 109
  }, {
    "from": 115,
    "label": "has",
    "to": 100
  }, {
    "from": 115,
    "label": "has",
    "to": 117
  }, {
    "from": 118,
    "label": "has",
    "to": 67
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 118,
    "label": "has",
    "to": 41
  }, {
    "from": 118,
    "label": "has",
    "to": 120
  }, {
    "from": 118,
    "label": "has",
    "to": 121
  }, {
    "from": 118,
    "label": "has",
    "to": 122
  }, {
    "from": 123,
    "label": "has",
    "to": 67
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 123,
    "label": "has",
    "to": 125
  }, {
    "from": 123,
    "label": "has",
    "to": 120
  }, {
    "from": 123,
    "label": "has",
    "to": 121
  }, {
    "from": 123,
    "label": "has",
    "to": 126
  }, {
    "from": 127,
    "label": "has",
    "to": 67
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 127,
    "label": "has",
    "to": 129
  }, {
    "from": 127,
    "label": "has",
    "to": 130
  }, {
    "from": 127,
    "label": "has",
    "to": 131
  }, {
    "from": 127,
    "label": "has",
    "to": 132
  }, {
    "from": 133,
    "label": "has",
    "to": 67
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 133,
    "label": "has",
    "to": 129
  }, {
    "from": 133,
    "label": "has",
    "to": 130
  }, {
    "from": 133,
    "label": "has",
    "to": 131
  }, {
    "from": 133,
    "label": "has",
    "to": 135
  }, {
    "from": 136,
    "label": "has",
    "to": 67
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 136,
    "label": "has",
    "to": 125
  }, {
    "from": 136,
    "label": "has",
    "to": 130
  }, {
    "from": 136,
    "label": "has",
    "to": 121
  }, {
    "from": 136,
    "label": "has",
    "to": 138
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 139,
    "label": "has",
    "to": 141
  }, {
    "from": 139,
    "label": "has",
    "to": 142
  }, {
    "from": 139,
    "label": "has",
    "to": 143
  }, {
    "from": 139,
    "label": "has",
    "to": 144
  }, {
    "from": 139,
    "label": "has",
    "to": 145
  }, {
    "from": 146,
    "label": "has",
    "to": 140
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 146,
    "label": "has",
    "to": 142
  }, {
    "from": 146,
    "label": "has",
    "to": 148
  }, {
    "from": 146,
    "label": "has",
    "to": 149
  }, {
    "from": 150,
    "label": "has",
    "to": 140
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 150,
    "label": "has",
    "to": 152
  }, {
    "from": 150,
    "label": "has",
    "to": 153
  }, {
    "from": 154,
    "label": "has",
    "to": 67
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 154,
    "label": "has",
    "to": 156
  }, {
    "from": 154,
    "label": "has",
    "to": 157
  }, {
    "from": 154,
    "label": "has",
    "to": 158
  }, {
    "from": 159,
    "label": "has",
    "to": 67
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 159,
    "label": "has",
    "to": 161
  }, {
    "from": 159,
    "label": "has",
    "to": 162
  }, {
    "from": 159,
    "label": "has",
    "to": 163
  }, {
    "from": 164,
    "label": "has",
    "to": 67
  }, {
    "from": 164,
    "label": "has",
    "to": 165
  }, {
    "from": 164,
    "label": "has",
    "to": 166
  }, {
    "from": 164,
    "label": "has",
    "to": 167
  }, {
    "from": 164,
    "label": "has",
    "to": 168
  }, {
    "from": 169,
    "label": "has",
    "to": 67
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 169,
    "label": "has",
    "to": 171
  }, {
    "from": 169,
    "label": "has",
    "to": 172
  }, {
    "from": 169,
    "label": "has",
    "to": 173
  }, {
    "from": 174,
    "label": "has",
    "to": 67
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 174,
    "label": "has",
    "to": 176
  }, {
    "from": 174,
    "label": "has",
    "to": 177
  }, {
    "from": 178,
    "label": "has",
    "to": 67
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 178,
    "label": "has",
    "to": 180
  }, {
    "from": 178,
    "label": "has",
    "to": 181
  }, {
    "from": 182,
    "label": "has",
    "to": 67
  }, {
    "from": 182,
    "label": "has",
    "to": 183
  }, {
    "from": 182,
    "label": "has",
    "to": 184
  }, {
    "from": 182,
    "label": "has",
    "to": 185
  }, {
    "from": 182,
    "label": "has",
    "to": 186
  }, {
    "from": 182,
    "label": "has",
    "to": 187
  }, {
    "from": 188,
    "label": "has",
    "to": 67
  }, {
    "from": 188,
    "label": "has",
    "to": 189
  }, {
    "from": 188,
    "label": "has",
    "to": 190
  }, {
    "from": 188,
    "label": "has",
    "to": 191
  }, {
    "from": 188,
    "label": "has",
    "to": 192
  }, {
    "from": 193,
    "label": "has",
    "to": 67
  }, {
    "from": 193,
    "label": "has",
    "to": 194
  }, {
    "from": 193,
    "label": "has",
    "to": 195
  }, {
    "from": 193,
    "label": "has",
    "to": 196
  }, {
    "from": 193,
    "label": "has",
    "to": 197
  }, {
    "from": 193,
    "label": "has",
    "to": 198
  }, {
    "from": 199,
    "label": "has",
    "to": 67
  }, {
    "from": 199,
    "label": "has",
    "to": 200
  }, {
    "from": 199,
    "label": "has",
    "to": 201
  }, {
    "from": 199,
    "label": "has",
    "to": 202
  }, {
    "from": 199,
    "label": "has",
    "to": 203
  }, {
    "from": 204,
    "label": "has",
    "to": 67
  }, {
    "from": 204,
    "label": "has",
    "to": 205
  }, {
    "from": 204,
    "label": "has",
    "to": 206
  }, {
    "from": 204,
    "label": "has",
    "to": 207
  }, {
    "from": 204,
    "label": "has",
    "to": 208
  }, {
    "from": 209,
    "label": "has",
    "to": 67
  }, {
    "from": 209,
    "label": "has",
    "to": 210
  }, {
    "from": 209,
    "label": "has",
    "to": 211
  }, {
    "from": 209,
    "label": "has",
    "to": 212
  }, {
    "from": 213,
    "label": "has",
    "to": 67
  }, {
    "from": 213,
    "label": "has",
    "to": 214
  }, {
    "from": 213,
    "label": "has",
    "to": 215
  }, {
    "from": 213,
    "label": "has",
    "to": 216
  }, {
    "from": 213,
    "label": "has",
    "to": 217
  }, {
    "from": 218,
    "label": "has",
    "to": 67
  }, {
    "from": 218,
    "label": "has",
    "to": 219
  }, {
    "from": 218,
    "label": "has",
    "to": 220
  }, {
    "from": 218,
    "label": "has",
    "to": 221
  }, {
    "from": 218,
    "label": "has",
    "to": 222
  }, {
    "from": 223,
    "label": "has",
    "to": 67
  }, {
    "from": 223,
    "label": "has",
    "to": 224
  }, {
    "from": 223,
    "label": "has",
    "to": 225
  }, {
    "from": 223,
    "label": "has",
    "to": 226
  }, {
    "from": 227,
    "label": "has",
    "to": 228
  }, {
    "from": 228,
    "label": "has",
    "to": 3
  }, {
    "from": 228,
    "label": "has",
    "to": 4
  }, {
    "from": 228,
    "label": "has",
    "to": 5
  }, {
    "from": 228,
    "label": "has",
    "to": 6
  }, {
    "from": 228,
    "label": "has",
    "to": 7
  }, {
    "from": 228,
    "label": "has",
    "to": 8
  }, {
    "from": 228,
    "label": "has",
    "to": 9
  }, {
    "from": 228,
    "label": "has",
    "to": 10
  }, {
    "from": 228,
    "label": "has",
    "to": 11
  }, {
    "from": 228,
    "label": "has",
    "to": 12
  }, {
    "from": 228,
    "label": "has",
    "to": 13
  }, {
    "from": 228,
    "label": "has",
    "to": 14
  }, {
    "from": 228,
    "label": "has",
    "to": 15
  }, {
    "from": 228,
    "label": "has",
    "to": 16
  }, {
    "from": 228,
    "label": "has",
    "to": 17
  }, {
    "from": 228,
    "label": "has",
    "to": 18
  }, {
    "from": 228,
    "label": "has",
    "to": 19
  }, {
    "from": 228,
    "label": "has",
    "to": 20
  }, {
    "from": 228,
    "label": "has",
    "to": 21
  }, {
    "from": 228,
    "label": "has",
    "to": 22
  }, {
    "from": 228,
    "label": "has",
    "to": 23
  }, {
    "from": 228,
    "label": "has",
    "to": 24
  }, {
    "from": 228,
    "label": "has",
    "to": 25
  }, {
    "from": 228,
    "label": "has",
    "to": 26
  }, {
    "from": 228,
    "label": "has",
    "to": 27
  }, {
    "from": 228,
    "label": "has",
    "to": 28
  }, {
    "from": 228,
    "label": "has",
    "to": 29
  }, {
    "from": 228,
    "label": "has",
    "to": 30
  }, {
    "from": 228,
    "label": "has",
    "to": 31
  }, {
    "from": 228,
    "label": "has",
    "to": 32
  }, {
    "from": 228,
    "label": "has",
    "to": 33
  }, {
    "from": 228,
    "label": "has",
    "to": 34
  }, {
    "from": 228,
    "label": "has",
    "to": 35
  }, {
    "from": 228,
    "label": "has",
    "to": 36
  }, {
    "from": 228,
    "label": "has",
    "to": 37
  }, {
    "from": 228,
    "label": "has",
    "to": 38
  }, {
    "from": 228,
    "label": "has",
    "to": 39
  }, {
    "from": 228,
    "label": "has",
    "to": 40
  }, {
    "from": 228,
    "label": "has",
    "to": 41
  }, {
    "from": 228,
    "label": "has",
    "to": 42
  }, {
    "from": 228,
    "label": "has",
    "to": 43
  }, {
    "from": 228,
    "label": "has",
    "to": 44
  }, {
    "from": 228,
    "label": "has",
    "to": 45
  }, {
    "from": 228,
    "label": "has",
    "to": 46
  }, {
    "from": 228,
    "label": "has",
    "to": 47
  }, {
    "from": 228,
    "label": "has",
    "to": 48
  }, {
    "from": 228,
    "label": "has",
    "to": 49
  }, {
    "from": 228,
    "label": "has",
    "to": 50
  }, {
    "from": 228,
    "label": "has",
    "to": 51
  }, {
    "from": 228,
    "label": "has",
    "to": 52
  }, {
    "from": 228,
    "label": "has",
    "to": 53
  }, {
    "from": 228,
    "label": "has",
    "to": 54
  }, {
    "from": 228,
    "label": "has",
    "to": 55
  }, {
    "from": 228,
    "label": "has",
    "to": 56
  }, {
    "from": 228,
    "label": "has",
    "to": 57
  }, {
    "from": 228,
    "label": "has",
    "to": 58
  }, {
    "from": 227,
    "label": "has",
    "to": 229
  }, {
    "from": 229,
    "label": "has",
    "to": 61
  }, {
    "from": 229,
    "label": "has",
    "to": 7
  }, {
    "from": 229,
    "label": "has",
    "to": 62
  }, {
    "from": 229,
    "label": "has",
    "to": 63
  }, {
    "from": 229,
    "label": "has",
    "to": 64
  }, {
    "from": 229,
    "label": "has",
    "to": 50
  }, {
    "from": 227,
    "label": "has",
    "to": 230
  }, {
    "from": 230,
    "label": "has",
    "to": 67
  }, {
    "from": 230,
    "label": "has",
    "to": 68
  }, {
    "from": 230,
    "label": "has",
    "to": 69
  }, {
    "from": 230,
    "label": "has",
    "to": 70
  }, {
    "from": 230,
    "label": "has",
    "to": 71
  }, {
    "from": 230,
    "label": "has",
    "to": 72
  }, {
    "from": 230,
    "label": "has",
    "to": 73
  }, {
    "from": 230,
    "label": "has",
    "to": 74
  }, {
    "from": 227,
    "label": "has",
    "to": 231
  }, {
    "from": 231,
    "label": "has",
    "to": 67
  }, {
    "from": 231,
    "label": "has",
    "to": 77
  }, {
    "from": 231,
    "label": "has",
    "to": 78
  }, {
    "from": 231,
    "label": "has",
    "to": 79
  }, {
    "from": 231,
    "label": "has",
    "to": 80
  }, {
    "from": 231,
    "label": "has",
    "to": 81
  }, {
    "from": 231,
    "label": "has",
    "to": 82
  }, {
    "from": 231,
    "label": "has",
    "to": 83
  }, {
    "from": 227,
    "label": "has",
    "to": 232
  }, {
    "from": 232,
    "label": "has",
    "to": 67
  }, {
    "from": 232,
    "label": "has",
    "to": 86
  }, {
    "from": 232,
    "label": "has",
    "to": 87
  }, {
    "from": 232,
    "label": "has",
    "to": 88
  }, {
    "from": 232,
    "label": "has",
    "to": 20
  }, {
    "from": 232,
    "label": "has",
    "to": 21
  }, {
    "from": 232,
    "label": "has",
    "to": 22
  }, {
    "from": 232,
    "label": "has",
    "to": 89
  }, {
    "from": 227,
    "label": "has",
    "to": 233
  }, {
    "from": 233,
    "label": "has",
    "to": 67
  }, {
    "from": 233,
    "label": "has",
    "to": 92
  }, {
    "from": 233,
    "label": "has",
    "to": 31
  }, {
    "from": 233,
    "label": "has",
    "to": 88
  }, {
    "from": 233,
    "label": "has",
    "to": 25
  }, {
    "from": 233,
    "label": "has",
    "to": 28
  }, {
    "from": 227,
    "label": "has",
    "to": 234
  }, {
    "from": 234,
    "label": "has",
    "to": 67
  }, {
    "from": 234,
    "label": "has",
    "to": 95
  }, {
    "from": 234,
    "label": "has",
    "to": 33
  }, {
    "from": 234,
    "label": "has",
    "to": 34
  }, {
    "from": 234,
    "label": "has",
    "to": 35
  }, {
    "from": 227,
    "label": "has",
    "to": 235
  }, {
    "from": 235,
    "label": "has",
    "to": 67
  }, {
    "from": 235,
    "label": "has",
    "to": 98
  }, {
    "from": 235,
    "label": "has",
    "to": 38
  }, {
    "from": 235,
    "label": "has",
    "to": 99
  }, {
    "from": 235,
    "label": "has",
    "to": 100
  }, {
    "from": 227,
    "label": "has",
    "to": 236
  }, {
    "from": 236,
    "label": "has",
    "to": 67
  }, {
    "from": 236,
    "label": "has",
    "to": 103
  }, {
    "from": 236,
    "label": "has",
    "to": 104
  }, {
    "from": 236,
    "label": "has",
    "to": 99
  }, {
    "from": 236,
    "label": "has",
    "to": 100
  }, {
    "from": 227,
    "label": "has",
    "to": 237
  }, {
    "from": 237,
    "label": "has",
    "to": 67
  }, {
    "from": 237,
    "label": "has",
    "to": 107
  }, {
    "from": 237,
    "label": "has",
    "to": 108
  }, {
    "from": 237,
    "label": "has",
    "to": 109
  }, {
    "from": 237,
    "label": "has",
    "to": 110
  }, {
    "from": 227,
    "label": "has",
    "to": 238
  }, {
    "from": 238,
    "label": "has",
    "to": 67
  }, {
    "from": 238,
    "label": "has",
    "to": 113
  }, {
    "from": 238,
    "label": "has",
    "to": 108
  }, {
    "from": 238,
    "label": "has",
    "to": 109
  }, {
    "from": 238,
    "label": "has",
    "to": 110
  }, {
    "from": 227,
    "label": "has",
    "to": 239
  }, {
    "from": 239,
    "label": "has",
    "to": 67
  }, {
    "from": 239,
    "label": "has",
    "to": 116
  }, {
    "from": 239,
    "label": "has",
    "to": 104
  }, {
    "from": 239,
    "label": "has",
    "to": 109
  }, {
    "from": 239,
    "label": "has",
    "to": 100
  }, {
    "from": 227,
    "label": "has",
    "to": 240
  }, {
    "from": 240,
    "label": "has",
    "to": 67
  }, {
    "from": 240,
    "label": "has",
    "to": 119
  }, {
    "from": 240,
    "label": "has",
    "to": 41
  }, {
    "from": 240,
    "label": "has",
    "to": 120
  }, {
    "from": 240,
    "label": "has",
    "to": 121
  }, {
    "from": 227,
    "label": "has",
    "to": 241
  }, {
    "from": 241,
    "label": "has",
    "to": 67
  }, {
    "from": 241,
    "label": "has",
    "to": 124
  }, {
    "from": 241,
    "label": "has",
    "to": 125
  }, {
    "from": 241,
    "label": "has",
    "to": 120
  }, {
    "from": 241,
    "label": "has",
    "to": 121
  }, {
    "from": 227,
    "label": "has",
    "to": 242
  }, {
    "from": 242,
    "label": "has",
    "to": 67
  }, {
    "from": 242,
    "label": "has",
    "to": 128
  }, {
    "from": 242,
    "label": "has",
    "to": 129
  }, {
    "from": 242,
    "label": "has",
    "to": 130
  }, {
    "from": 242,
    "label": "has",
    "to": 131
  }, {
    "from": 227,
    "label": "has",
    "to": 243
  }, {
    "from": 243,
    "label": "has",
    "to": 67
  }, {
    "from": 243,
    "label": "has",
    "to": 134
  }, {
    "from": 243,
    "label": "has",
    "to": 129
  }, {
    "from": 243,
    "label": "has",
    "to": 130
  }, {
    "from": 243,
    "label": "has",
    "to": 131
  }, {
    "from": 227,
    "label": "has",
    "to": 244
  }, {
    "from": 244,
    "label": "has",
    "to": 67
  }, {
    "from": 244,
    "label": "has",
    "to": 137
  }, {
    "from": 244,
    "label": "has",
    "to": 125
  }, {
    "from": 244,
    "label": "has",
    "to": 130
  }, {
    "from": 244,
    "label": "has",
    "to": 121
  }, {
    "from": 227,
    "label": "has",
    "to": 245
  }, {
    "from": 245,
    "label": "has",
    "to": 140
  }, {
    "from": 245,
    "label": "has",
    "to": 141
  }, {
    "from": 245,
    "label": "has",
    "to": 142
  }, {
    "from": 245,
    "label": "has",
    "to": 143
  }, {
    "from": 245,
    "label": "has",
    "to": 144
  }, {
    "from": 227,
    "label": "has",
    "to": 246
  }, {
    "from": 246,
    "label": "has",
    "to": 140
  }, {
    "from": 246,
    "label": "has",
    "to": 147
  }, {
    "from": 246,
    "label": "has",
    "to": 142
  }, {
    "from": 246,
    "label": "has",
    "to": 148
  }, {
    "from": 227,
    "label": "has",
    "to": 247
  }, {
    "from": 247,
    "label": "has",
    "to": 140
  }, {
    "from": 247,
    "label": "has",
    "to": 151
  }, {
    "from": 247,
    "label": "has",
    "to": 152
  }, {
    "from": 227,
    "label": "has",
    "to": 248
  }, {
    "from": 248,
    "label": "has",
    "to": 67
  }, {
    "from": 248,
    "label": "has",
    "to": 155
  }, {
    "from": 248,
    "label": "has",
    "to": 156
  }, {
    "from": 248,
    "label": "has",
    "to": 157
  }, {
    "from": 227,
    "label": "has",
    "to": 249
  }, {
    "from": 249,
    "label": "has",
    "to": 67
  }, {
    "from": 249,
    "label": "has",
    "to": 160
  }, {
    "from": 249,
    "label": "has",
    "to": 161
  }, {
    "from": 249,
    "label": "has",
    "to": 162
  }, {
    "from": 227,
    "label": "has",
    "to": 250
  }, {
    "from": 250,
    "label": "has",
    "to": 67
  }, {
    "from": 250,
    "label": "has",
    "to": 165
  }, {
    "from": 250,
    "label": "has",
    "to": 166
  }, {
    "from": 250,
    "label": "has",
    "to": 167
  }, {
    "from": 227,
    "label": "has",
    "to": 251
  }, {
    "from": 251,
    "label": "has",
    "to": 67
  }, {
    "from": 251,
    "label": "has",
    "to": 170
  }, {
    "from": 251,
    "label": "has",
    "to": 171
  }, {
    "from": 251,
    "label": "has",
    "to": 172
  }, {
    "from": 227,
    "label": "has",
    "to": 252
  }, {
    "from": 252,
    "label": "has",
    "to": 67
  }, {
    "from": 252,
    "label": "has",
    "to": 175
  }, {
    "from": 252,
    "label": "has",
    "to": 176
  }, {
    "from": 227,
    "label": "has",
    "to": 253
  }, {
    "from": 253,
    "label": "has",
    "to": 67
  }, {
    "from": 253,
    "label": "has",
    "to": 179
  }, {
    "from": 253,
    "label": "has",
    "to": 180
  }, {
    "from": 227,
    "label": "has",
    "to": 254
  }, {
    "from": 254,
    "label": "has",
    "to": 67
  }, {
    "from": 254,
    "label": "has",
    "to": 183
  }, {
    "from": 254,
    "label": "has",
    "to": 184
  }, {
    "from": 254,
    "label": "has",
    "to": 185
  }, {
    "from": 254,
    "label": "has",
    "to": 186
  }, {
    "from": 227,
    "label": "has",
    "to": 255
  }, {
    "from": 255,
    "label": "has",
    "to": 67
  }, {
    "from": 255,
    "label": "has",
    "to": 189
  }, {
    "from": 255,
    "label": "has",
    "to": 190
  }, {
    "from": 255,
    "label": "has",
    "to": 191
  }, {
    "from": 227,
    "label": "has",
    "to": 256
  }, {
    "from": 256,
    "label": "has",
    "to": 67
  }, {
    "from": 256,
    "label": "has",
    "to": 194
  }, {
    "from": 256,
    "label": "has",
    "to": 195
  }, {
    "from": 256,
    "label": "has",
    "to": 196
  }, {
    "from": 256,
    "label": "has",
    "to": 197
  }, {
    "from": 227,
    "label": "has",
    "to": 257
  }, {
    "from": 257,
    "label": "has",
    "to": 67
  }, {
    "from": 257,
    "label": "has",
    "to": 200
  }, {
    "from": 257,
    "label": "has",
    "to": 201
  }, {
    "from": 257,
    "label": "has",
    "to": 202
  }, {
    "from": 227,
    "label": "has",
    "to": 258
  }, {
    "from": 258,
    "label": "has",
    "to": 67
  }, {
    "from": 258,
    "label": "has",
    "to": 205
  }, {
    "from": 258,
    "label": "has",
    "to": 206
  }, {
    "from": 258,
    "label": "has",
    "to": 207
  }, {
    "from": 227,
    "label": "has",
    "to": 259
  }, {
    "from": 259,
    "label": "has",
    "to": 67
  }, {
    "from": 259,
    "label": "has",
    "to": 210
  }, {
    "from": 259,
    "label": "has",
    "to": 211
  }, {
    "from": 227,
    "label": "has",
    "to": 260
  }, {
    "from": 260,
    "label": "has",
    "to": 67
  }, {
    "from": 260,
    "label": "has",
    "to": 214
  }, {
    "from": 260,
    "label": "has",
    "to": 215
  }, {
    "from": 260,
    "label": "has",
    "to": 216
  }, {
    "from": 227,
    "label": "has",
    "to": 261
  }, {
    "from": 261,
    "label": "has",
    "to": 67
  }, {
    "from": 261,
    "label": "has",
    "to": 219
  }, {
    "from": 261,
    "label": "has",
    "to": 220
  }, {
    "from": 261,
    "label": "has",
    "to": 221
  }, {
    "from": 227,
    "label": "has",
    "to": 262
  }, {
    "from": 262,
    "label": "has",
    "to": 67
  }, {
    "from": 262,
    "label": "has",
    "to": 224
  }, {
    "from": 262,
    "label": "has",
    "to": 225
  }, {
    "from": 227,
    "label": "has",
    "to": 263
  }, {
    "from": 264,
    "label": "has",
    "to": 3
  }, {
    "from": 264,
    "label": "has",
    "to": 4
  }, {
    "from": 264,
    "label": "has",
    "to": 5
  }, {
    "from": 264,
    "label": "has",
    "to": 6
  }, {
    "from": 264,
    "label": "has",
    "to": 265
  }, {
    "from": 264,
    "label": "has",
    "to": 8
  }, {
    "from": 264,
    "label": "has",
    "to": 9
  }, {
    "from": 264,
    "label": "has",
    "to": 266
  }, {
    "from": 264,
    "label": "has",
    "to": 267
  }, {
    "from": 264,
    "label": "has",
    "to": 268
  }, {
    "from": 264,
    "label": "has",
    "to": 13
  }, {
    "from": 264,
    "label": "has",
    "to": 14
  }, {
    "from": 264,
    "label": "has",
    "to": 15
  }, {
    "from": 264,
    "label": "has",
    "to": 16
  }, {
    "from": 264,
    "label": "has",
    "to": 17
  }, {
    "from": 264,
    "label": "has",
    "to": 18
  }, {
    "from": 264,
    "label": "has",
    "to": 19
  }, {
    "from": 264,
    "label": "has",
    "to": 20
  }, {
    "from": 264,
    "label": "has",
    "to": 21
  }, {
    "from": 264,
    "label": "has",
    "to": 22
  }, {
    "from": 264,
    "label": "has",
    "to": 23
  }, {
    "from": 264,
    "label": "has",
    "to": 24
  }, {
    "from": 264,
    "label": "has",
    "to": 25
  }, {
    "from": 264,
    "label": "has",
    "to": 26
  }, {
    "from": 264,
    "label": "has",
    "to": 27
  }, {
    "from": 264,
    "label": "has",
    "to": 28
  }, {
    "from": 264,
    "label": "has",
    "to": 29
  }, {
    "from": 264,
    "label": "has",
    "to": 30
  }, {
    "from": 264,
    "label": "has",
    "to": 31
  }, {
    "from": 264,
    "label": "has",
    "to": 32
  }, {
    "from": 264,
    "label": "has",
    "to": 33
  }, {
    "from": 264,
    "label": "has",
    "to": 34
  }, {
    "from": 264,
    "label": "has",
    "to": 35
  }, {
    "from": 264,
    "label": "has",
    "to": 36
  }, {
    "from": 264,
    "label": "has",
    "to": 37
  }, {
    "from": 264,
    "label": "has",
    "to": 38
  }, {
    "from": 264,
    "label": "has",
    "to": 39
  }, {
    "from": 264,
    "label": "has",
    "to": 40
  }, {
    "from": 264,
    "label": "has",
    "to": 41
  }, {
    "from": 264,
    "label": "has",
    "to": 42
  }, {
    "from": 264,
    "label": "has",
    "to": 43
  }, {
    "from": 264,
    "label": "has",
    "to": 44
  }, {
    "from": 264,
    "label": "has",
    "to": 45
  }, {
    "from": 264,
    "label": "has",
    "to": 46
  }, {
    "from": 264,
    "label": "has",
    "to": 47
  }, {
    "from": 264,
    "label": "has",
    "to": 269
  }, {
    "from": 264,
    "label": "has",
    "to": 270
  }, {
    "from": 264,
    "label": "has",
    "to": 271
  }, {
    "from": 264,
    "label": "has",
    "to": 272
  }, {
    "from": 264,
    "label": "has",
    "to": 273
  }, {
    "from": 264,
    "label": "has",
    "to": 274
  }, {
    "from": 264,
    "label": "has",
    "to": 275
  }, {
    "from": 264,
    "label": "has",
    "to": 276
  }, {
    "from": 264,
    "label": "has",
    "to": 277
  }, {
    "from": 264,
    "label": "has",
    "to": 278
  }, {
    "from": 264,
    "label": "has",
    "to": 279
  }, {
    "from": 264,
    "label": "has",
    "to": 280
  }, {
    "from": 281,
    "label": "has",
    "to": 3
  }, {
    "from": 281,
    "label": "has",
    "to": 4
  }, {
    "from": 281,
    "label": "has",
    "to": 5
  }, {
    "from": 281,
    "label": "has",
    "to": 6
  }, {
    "from": 281,
    "label": "has",
    "to": 282
  }, {
    "from": 281,
    "label": "has",
    "to": 8
  }, {
    "from": 281,
    "label": "has",
    "to": 9
  }, {
    "from": 281,
    "label": "has",
    "to": 266
  }, {
    "from": 281,
    "label": "has",
    "to": 11
  }, {
    "from": 281,
    "label": "has",
    "to": 12
  }, {
    "from": 281,
    "label": "has",
    "to": 283
  }, {
    "from": 281,
    "label": "has",
    "to": 284
  }, {
    "from": 281,
    "label": "has",
    "to": 13
  }, {
    "from": 281,
    "label": "has",
    "to": 14
  }, {
    "from": 281,
    "label": "has",
    "to": 15
  }, {
    "from": 281,
    "label": "has",
    "to": 16
  }, {
    "from": 281,
    "label": "has",
    "to": 17
  }, {
    "from": 281,
    "label": "has",
    "to": 18
  }, {
    "from": 281,
    "label": "has",
    "to": 19
  }, {
    "from": 281,
    "label": "has",
    "to": 20
  }, {
    "from": 281,
    "label": "has",
    "to": 21
  }, {
    "from": 281,
    "label": "has",
    "to": 22
  }, {
    "from": 281,
    "label": "has",
    "to": 23
  }, {
    "from": 281,
    "label": "has",
    "to": 24
  }, {
    "from": 281,
    "label": "has",
    "to": 25
  }, {
    "from": 281,
    "label": "has",
    "to": 26
  }, {
    "from": 281,
    "label": "has",
    "to": 27
  }, {
    "from": 281,
    "label": "has",
    "to": 28
  }, {
    "from": 281,
    "label": "has",
    "to": 29
  }, {
    "from": 281,
    "label": "has",
    "to": 30
  }, {
    "from": 281,
    "label": "has",
    "to": 31
  }, {
    "from": 281,
    "label": "has",
    "to": 32
  }, {
    "from": 281,
    "label": "has",
    "to": 33
  }, {
    "from": 281,
    "label": "has",
    "to": 34
  }, {
    "from": 281,
    "label": "has",
    "to": 35
  }, {
    "from": 281,
    "label": "has",
    "to": 38
  }, {
    "from": 281,
    "label": "has",
    "to": 39
  }, {
    "from": 281,
    "label": "has",
    "to": 40
  }, {
    "from": 281,
    "label": "has",
    "to": 41
  }, {
    "from": 281,
    "label": "has",
    "to": 42
  }, {
    "from": 281,
    "label": "has",
    "to": 43
  }, {
    "from": 281,
    "label": "has",
    "to": 44
  }, {
    "from": 281,
    "label": "has",
    "to": 45
  }, {
    "from": 281,
    "label": "has",
    "to": 46
  }, {
    "from": 281,
    "label": "has",
    "to": 269
  }, {
    "from": 281,
    "label": "has",
    "to": 270
  }, {
    "from": 281,
    "label": "has",
    "to": 271
  }, {
    "from": 281,
    "label": "has",
    "to": 272
  }, {
    "from": 281,
    "label": "has",
    "to": 273
  }, {
    "from": 281,
    "label": "has",
    "to": 274
  }, {
    "from": 281,
    "label": "has",
    "to": 275
  }, {
    "from": 281,
    "label": "has",
    "to": 276
  }, {
    "from": 281,
    "label": "has",
    "to": 277
  }, {
    "from": 281,
    "label": "has",
    "to": 278
  }, {
    "from": 281,
    "label": "has",
    "to": 279
  }, {
    "from": 281,
    "label": "has",
    "to": 285
  }, {
    "from": 286,
    "label": "has",
    "to": 6
  }, {
    "from": 286,
    "label": "has",
    "to": 287
  }, {
    "from": 286,
    "label": "has",
    "to": 288
  }, {
    "from": 286,
    "label": "has",
    "to": 289
  }, {
    "from": 286,
    "label": "has",
    "to": 290
  }, {
    "from": 286,
    "label": "has",
    "to": 291
  }, {
    "from": 286,
    "label": "has",
    "to": 292
  }, {
    "from": 286,
    "label": "has",
    "to": 293
  }, {
    "from": 286,
    "label": "has",
    "to": 294
  }, {
    "from": 286,
    "label": "has",
    "to": 295
  }, {
    "from": 286,
    "label": "has",
    "to": 296
  }, {
    "from": 286,
    "label": "has",
    "to": 297
  }, {
    "from": 286,
    "label": "has",
    "to": 298
  }, {
    "from": 299,
    "label": "has",
    "to": 6
  }, {
    "from": 299,
    "label": "has",
    "to": 300
  }, {
    "from": 299,
    "label": "has",
    "to": 301
  }, {
    "from": 299,
    "label": "has",
    "to": 302
  }, {
    "from": 299,
    "label": "has",
    "to": 303
  }, {
    "from": 299,
    "label": "has",
    "to": 304
  }, {
    "from": 299,
    "label": "has",
    "to": 305
  }, {
    "from": 299,
    "label": "has",
    "to": 294
  }, {
    "from": 299,
    "label": "has",
    "to": 295
  }, {
    "from": 299,
    "label": "has",
    "to": 296
  }, {
    "from": 299,
    "label": "has",
    "to": 306
  }, {
    "from": 299,
    "label": "has",
    "to": 307
  }, {
    "from": 308,
    "label": "has",
    "to": 6
  }, {
    "from": 308,
    "label": "has",
    "to": 309
  }, {
    "from": 308,
    "label": "has",
    "to": 310
  }, {
    "from": 308,
    "label": "has",
    "to": 311
  }, {
    "from": 308,
    "label": "has",
    "to": 312
  }, {
    "from": 308,
    "label": "has",
    "to": 313
  }, {
    "from": 308,
    "label": "has",
    "to": 314
  }, {
    "from": 308,
    "label": "has",
    "to": 315
  }, {
    "from": 316,
    "label": "has",
    "to": 6
  }, {
    "from": 316,
    "label": "has",
    "to": 317
  }, {
    "from": 316,
    "label": "has",
    "to": 318
  }, {
    "from": 316,
    "label": "has",
    "to": 311
  }, {
    "from": 316,
    "label": "has",
    "to": 319
  }, {
    "from": 316,
    "label": "has",
    "to": 320
  }, {
    "from": 321,
    "label": "has",
    "to": 6
  }, {
    "from": 321,
    "label": "has",
    "to": 322
  }, {
    "from": 321,
    "label": "has",
    "to": 323
  }, {
    "from": 321,
    "label": "has",
    "to": 311
  }, {
    "from": 321,
    "label": "has",
    "to": 324
  }, {
    "from": 321,
    "label": "has",
    "to": 325
  }, {
    "from": 326,
    "label": "has",
    "to": 327
  }, {
    "from": 327,
    "label": "has",
    "to": 3
  }, {
    "from": 327,
    "label": "has",
    "to": 4
  }, {
    "from": 327,
    "label": "has",
    "to": 5
  }, {
    "from": 327,
    "label": "has",
    "to": 6
  }, {
    "from": 327,
    "label": "has",
    "to": 265
  }, {
    "from": 327,
    "label": "has",
    "to": 8
  }, {
    "from": 327,
    "label": "has",
    "to": 9
  }, {
    "from": 327,
    "label": "has",
    "to": 266
  }, {
    "from": 327,
    "label": "has",
    "to": 267
  }, {
    "from": 327,
    "label": "has",
    "to": 268
  }, {
    "from": 327,
    "label": "has",
    "to": 13
  }, {
    "from": 327,
    "label": "has",
    "to": 14
  }, {
    "from": 327,
    "label": "has",
    "to": 15
  }, {
    "from": 327,
    "label": "has",
    "to": 16
  }, {
    "from": 327,
    "label": "has",
    "to": 17
  }, {
    "from": 327,
    "label": "has",
    "to": 18
  }, {
    "from": 327,
    "label": "has",
    "to": 19
  }, {
    "from": 327,
    "label": "has",
    "to": 20
  }, {
    "from": 327,
    "label": "has",
    "to": 21
  }, {
    "from": 327,
    "label": "has",
    "to": 22
  }, {
    "from": 327,
    "label": "has",
    "to": 23
  }, {
    "from": 327,
    "label": "has",
    "to": 24
  }, {
    "from": 327,
    "label": "has",
    "to": 25
  }, {
    "from": 327,
    "label": "has",
    "to": 26
  }, {
    "from": 327,
    "label": "has",
    "to": 27
  }, {
    "from": 327,
    "label": "has",
    "to": 28
  }, {
    "from": 327,
    "label": "has",
    "to": 29
  }, {
    "from": 327,
    "label": "has",
    "to": 30
  }, {
    "from": 327,
    "label": "has",
    "to": 31
  }, {
    "from": 327,
    "label": "has",
    "to": 32
  }, {
    "from": 327,
    "label": "has",
    "to": 33
  }, {
    "from": 327,
    "label": "has",
    "to": 34
  }, {
    "from": 327,
    "label": "has",
    "to": 35
  }, {
    "from": 327,
    "label": "has",
    "to": 36
  }, {
    "from": 327,
    "label": "has",
    "to": 37
  }, {
    "from": 327,
    "label": "has",
    "to": 38
  }, {
    "from": 327,
    "label": "has",
    "to": 39
  }, {
    "from": 327,
    "label": "has",
    "to": 40
  }, {
    "from": 327,
    "label": "has",
    "to": 41
  }, {
    "from": 327,
    "label": "has",
    "to": 42
  }, {
    "from": 327,
    "label": "has",
    "to": 43
  }, {
    "from": 327,
    "label": "has",
    "to": 44
  }, {
    "from": 327,
    "label": "has",
    "to": 45
  }, {
    "from": 327,
    "label": "has",
    "to": 46
  }, {
    "from": 327,
    "label": "has",
    "to": 47
  }, {
    "from": 327,
    "label": "has",
    "to": 269
  }, {
    "from": 327,
    "label": "has",
    "to": 270
  }, {
    "from": 327,
    "label": "has",
    "to": 271
  }, {
    "from": 327,
    "label": "has",
    "to": 272
  }, {
    "from": 327,
    "label": "has",
    "to": 273
  }, {
    "from": 327,
    "label": "has",
    "to": 274
  }, {
    "from": 327,
    "label": "has",
    "to": 275
  }, {
    "from": 327,
    "label": "has",
    "to": 276
  }, {
    "from": 327,
    "label": "has",
    "to": 277
  }, {
    "from": 327,
    "label": "has",
    "to": 278
  }, {
    "from": 327,
    "label": "has",
    "to": 279
  }, {
    "from": 326,
    "label": "has",
    "to": 328
  }, {
    "from": 328,
    "label": "has",
    "to": 3
  }, {
    "from": 328,
    "label": "has",
    "to": 4
  }, {
    "from": 328,
    "label": "has",
    "to": 5
  }, {
    "from": 328,
    "label": "has",
    "to": 6
  }, {
    "from": 328,
    "label": "has",
    "to": 282
  }, {
    "from": 328,
    "label": "has",
    "to": 8
  }, {
    "from": 328,
    "label": "has",
    "to": 9
  }, {
    "from": 328,
    "label": "has",
    "to": 266
  }, {
    "from": 328,
    "label": "has",
    "to": 11
  }, {
    "from": 328,
    "label": "has",
    "to": 12
  }, {
    "from": 328,
    "label": "has",
    "to": 283
  }, {
    "from": 328,
    "label": "has",
    "to": 284
  }, {
    "from": 328,
    "label": "has",
    "to": 13
  }, {
    "from": 328,
    "label": "has",
    "to": 14
  }, {
    "from": 328,
    "label": "has",
    "to": 15
  }, {
    "from": 328,
    "label": "has",
    "to": 16
  }, {
    "from": 328,
    "label": "has",
    "to": 17
  }, {
    "from": 328,
    "label": "has",
    "to": 18
  }, {
    "from": 328,
    "label": "has",
    "to": 19
  }, {
    "from": 328,
    "label": "has",
    "to": 20
  }, {
    "from": 328,
    "label": "has",
    "to": 21
  }, {
    "from": 328,
    "label": "has",
    "to": 22
  }, {
    "from": 328,
    "label": "has",
    "to": 23
  }, {
    "from": 328,
    "label": "has",
    "to": 24
  }, {
    "from": 328,
    "label": "has",
    "to": 25
  }, {
    "from": 328,
    "label": "has",
    "to": 26
  }, {
    "from": 328,
    "label": "has",
    "to": 27
  }, {
    "from": 328,
    "label": "has",
    "to": 28
  }, {
    "from": 328,
    "label": "has",
    "to": 29
  }, {
    "from": 328,
    "label": "has",
    "to": 30
  }, {
    "from": 328,
    "label": "has",
    "to": 31
  }, {
    "from": 328,
    "label": "has",
    "to": 32
  }, {
    "from": 328,
    "label": "has",
    "to": 33
  }, {
    "from": 328,
    "label": "has",
    "to": 34
  }, {
    "from": 328,
    "label": "has",
    "to": 35
  }, {
    "from": 328,
    "label": "has",
    "to": 38
  }, {
    "from": 328,
    "label": "has",
    "to": 39
  }, {
    "from": 328,
    "label": "has",
    "to": 40
  }, {
    "from": 328,
    "label": "has",
    "to": 41
  }, {
    "from": 328,
    "label": "has",
    "to": 42
  }, {
    "from": 328,
    "label": "has",
    "to": 43
  }, {
    "from": 328,
    "label": "has",
    "to": 44
  }, {
    "from": 328,
    "label": "has",
    "to": 45
  }, {
    "from": 328,
    "label": "has",
    "to": 46
  }, {
    "from": 328,
    "label": "has",
    "to": 269
  }, {
    "from": 328,
    "label": "has",
    "to": 270
  }, {
    "from": 328,
    "label": "has",
    "to": 271
  }, {
    "from": 328,
    "label": "has",
    "to": 272
  }, {
    "from": 328,
    "label": "has",
    "to": 273
  }, {
    "from": 328,
    "label": "has",
    "to": 274
  }, {
    "from": 328,
    "label": "has",
    "to": 275
  }, {
    "from": 328,
    "label": "has",
    "to": 276
  }, {
    "from": 328,
    "label": "has",
    "to": 277
  }, {
    "from": 328,
    "label": "has",
    "to": 278
  }, {
    "from": 328,
    "label": "has",
    "to": 279
  }, {
    "from": 326,
    "label": "has",
    "to": 329
  }, {
    "from": 329,
    "label": "has",
    "to": 6
  }, {
    "from": 329,
    "label": "has",
    "to": 287
  }, {
    "from": 329,
    "label": "has",
    "to": 288
  }, {
    "from": 329,
    "label": "has",
    "to": 289
  }, {
    "from": 329,
    "label": "has",
    "to": 290
  }, {
    "from": 329,
    "label": "has",
    "to": 291
  }, {
    "from": 329,
    "label": "has",
    "to": 292
  }, {
    "from": 329,
    "label": "has",
    "to": 293
  }, {
    "from": 329,
    "label": "has",
    "to": 294
  }, {
    "from": 329,
    "label": "has",
    "to": 295
  }, {
    "from": 329,
    "label": "has",
    "to": 296
  }, {
    "from": 329,
    "label": "has",
    "to": 297
  }, {
    "from": 326,
    "label": "has",
    "to": 330
  }, {
    "from": 330,
    "label": "has",
    "to": 6
  }, {
    "from": 330,
    "label": "has",
    "to": 300
  }, {
    "from": 330,
    "label": "has",
    "to": 301
  }, {
    "from": 330,
    "label": "has",
    "to": 302
  }, {
    "from": 330,
    "label": "has",
    "to": 303
  }, {
    "from": 330,
    "label": "has",
    "to": 304
  }, {
    "from": 330,
    "label": "has",
    "to": 305
  }, {
    "from": 330,
    "label": "has",
    "to": 294
  }, {
    "from": 330,
    "label": "has",
    "to": 295
  }, {
    "from": 330,
    "label": "has",
    "to": 296
  }, {
    "from": 330,
    "label": "has",
    "to": 306
  }, {
    "from": 326,
    "label": "has",
    "to": 331
  }, {
    "from": 331,
    "label": "has",
    "to": 6
  }, {
    "from": 331,
    "label": "has",
    "to": 309
  }, {
    "from": 331,
    "label": "has",
    "to": 310
  }, {
    "from": 331,
    "label": "has",
    "to": 311
  }, {
    "from": 331,
    "label": "has",
    "to": 312
  }, {
    "from": 331,
    "label": "has",
    "to": 313
  }, {
    "from": 331,
    "label": "has",
    "to": 314
  }, {
    "from": 326,
    "label": "has",
    "to": 332
  }, {
    "from": 332,
    "label": "has",
    "to": 6
  }, {
    "from": 332,
    "label": "has",
    "to": 317
  }, {
    "from": 332,
    "label": "has",
    "to": 318
  }, {
    "from": 332,
    "label": "has",
    "to": 311
  }, {
    "from": 332,
    "label": "has",
    "to": 319
  }, {
    "from": 326,
    "label": "has",
    "to": 333
  }, {
    "from": 333,
    "label": "has",
    "to": 6
  }, {
    "from": 333,
    "label": "has",
    "to": 322
  }, {
    "from": 333,
    "label": "has",
    "to": 323
  }, {
    "from": 333,
    "label": "has",
    "to": 311
  }, {
    "from": 333,
    "label": "has",
    "to": 324
  }, {
    "from": 326,
    "label": "has",
    "to": 334
  }, {
    "from": 335,
    "label": "has",
    "to": 336
  }, {
    "from": 335,
    "label": "has",
    "to": 337
  }, {
    "from": 338,
    "label": "has",
    "to": 67
  }, {
    "from": 338,
    "label": "has",
    "to": 317
  }, {
    "from": 338,
    "label": "has",
    "to": 339
  }, {
    "from": 338,
    "label": "has",
    "to": 311
  }, {
    "from": 338,
    "label": "has",
    "to": 340
  }, {
    "from": 338,
    "label": "has",
    "to": 341
  }, {
    "from": 342,
    "label": "has",
    "to": 67
  }, {
    "from": 342,
    "label": "has",
    "to": 317
  }, {
    "from": 342,
    "label": "has",
    "to": 343
  }, {
    "from": 342,
    "label": "has",
    "to": 311
  }, {
    "from": 342,
    "label": "has",
    "to": 344
  }, {
    "from": 342,
    "label": "has",
    "to": 345
  }, {
    "from": 346,
    "label": "has",
    "to": 347
  }, {
    "from": 347,
    "label": "has",
    "to": 336
  }, {
    "from": 346,
    "label": "has",
    "to": 348
  }, {
    "from": 348,
    "label": "has",
    "to": 67
  }, {
    "from": 348,
    "label": "has",
    "to": 317
  }, {
    "from": 348,
    "label": "has",
    "to": 339
  }, {
    "from": 348,
    "label": "has",
    "to": 311
  }, {
    "from": 348,
    "label": "has",
    "to": 340
  }, {
    "from": 346,
    "label": "has",
    "to": 349
  }, {
    "from": 349,
    "label": "has",
    "to": 67
  }, {
    "from": 349,
    "label": "has",
    "to": 317
  }, {
    "from": 349,
    "label": "has",
    "to": 343
  }, {
    "from": 349,
    "label": "has",
    "to": 311
  }, {
    "from": 349,
    "label": "has",
    "to": 344
  }, {
    "from": 346,
    "label": "has",
    "to": 350
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 362
  }, {
    "from": 351,
    "label": "calls",
    "to": 357
  }, {
    "from": 351,
    "label": "calls",
    "to": 357
  }, {
    "from": 351,
    "label": "calls",
    "to": 357
  }, {
    "from": 351,
    "label": "calls",
    "to": 357
  }, {
    "from": 351,
    "label": "calls",
    "to": 357
  }, {
    "from": 351,
    "label": "calls",
    "to": 357
  }, {
    "from": 351,
    "label": "calls",
    "to": 357
  }, {
    "from": 351,
    "label": "calls",
    "to": 357
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 352
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 355
  }, {
    "from": 351,
    "label": "calls",
    "to": 358
  }, {
    "from": 351,
    "label": "calls",
    "to": 358
  }, {
    "from": 351,
    "label": "calls",
    "to": 358
  }, {
    "from": 351,
    "label": "calls",
    "to": 358
  }, {
    "from": 351,
    "label": "calls",
    "to": 358
  }, {
    "from": 351,
    "label": "calls",
    "to": 358
  }, {
    "from": 351,
    "label": "calls",
    "to": 358
  }, {
    "from": 351,
    "label": "calls",
    "to": 358
  }, {
    "from": 351,
    "label": "calls",
    "to": 358
  }, {
    "from": 351,
    "label": "calls",
    "to": 358
  }, {
    "from": 351,
    "label": "calls",
    "to": 358
  }, {
    "from": 351,
    "label": "calls",
    "to": 358
  }, {
    "from": 351,
    "label": "calls",
    "to": 358
  }, {
    "from": 351,
    "label": "calls",
    "to": 358
  }, {
    "from": 351,
    "label": "calls",
    "to": 358
  }, {
    "from": 351,
    "label": "calls",
    "to": 358
  }, {
    "from": 351,
    "label": "calls",
    "to": 358
  }, {
    "from": 351,
    "label": "calls",
    "to": 358
  }, {
    "from": 351,
    "label": "calls",
    "to": 358
  }, {
    "from": 351,
    "label": "calls",
    "to": 358
  }, {
    "from": 351,
    "label": "calls",
    "to": 358
  }, {
    "from": 351,
    "label": "calls",
    "to": 358
  }, {
    "from": 351,
    "label": "calls",
    "to": 358
  }, {
    "from": 351,
    "label": "calls",
    "to": 358
  }, {
    "from": 351,
    "label": "calls",
    "to": 358
  }, {
    "from": 351,
    "label": "calls",
    "to": 358
  }, {
    "from": 351,
    "label": "calls",
    "to": 358
  }, {
    "from": 351,
    "label": "calls",
    "to": 358
  }, {
    "from": 351,
    "label": "calls",
    "to": 358
  }, {
    "from": 351,
    "label": "calls",
    "to": 358
  }, {
    "from": 351,
    "label": "calls",
    "to": 358
  }, {
    "from": 351,
    "label": "calls",
    "to": 358
  }, {
    "from": 351,
    "label": "calls",
    "to": 358
  }, {
    "from": 351,
    "label": "calls",
    "to": 358
  }, {
    "from": 351,
    "label": "calls",
    "to": 358
  }, {
    "from": 351,
    "label": "calls",
    "to": 358
  }, {
    "from": 351,
    "label": "calls",
    "to": 358
  }, {
    "from": 351,
    "label": "calls",
    "to": 358
  }, {
    "from": 351,
    "label": "calls",
    "to": 358
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 354
  }, {
    "from": 351,
    "label": "calls",
    "to": 359
  }, {
    "from": 351,
    "label": "calls",
    "to": 359
  }, {
    "from": 351,
    "label": "calls",
    "to": 359
  }, {
    "from": 351,
    "label": "calls",
    "to": 353
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 360
  }, {
    "from": 351,
    "label": "calls",
    "to": 356
  }, {
    "from": 351,
    "label": "calls",
    "to": 356
  }, {
    "from": 351,
    "label": "calls",
    "to": 356
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 351,
    "label": "calls",
    "to": 361
  }, {
    "from": 1,
    "label": "contains",
    "to": 351
  }, {
    "from": 351,
    "label": "declares",
    "to": 2
  }, {
    "from": 351,
    "label": "declares",
    "to": 60
  }, {
    "from": 351,
    "label": "declares",
    "to": 66
  }, {
    "from": 351,
    "label": "declares",
    "to": 76
  }, {
    "from": 351,
    "label": "declares",
    "to": 85
  }, {
    "from": 351,
    "label": "declares",
    "to": 91
  }, {
    "from": 351,
    "label": "declares",
    "to": 94
  }, {
    "from": 351,
    "label": "declares",
    "to": 97
  }, {
    "from": 351,
    "label": "declares",
    "to": 102
  }, {
    "from": 351,
    "label": "declares",
    "to": 106
  }, {
    "from": 351,
    "label": "declares",
    "to": 112
  }, {
    "from": 351,
    "label": "declares",
    "to": 115
  }, {
    "from": 351,
    "label": "declares",
    "to": 118
  }, {
    "from": 351,
    "label": "declares",
    "to": 123
  }, {
    "from": 351,
    "label": "declares",
    "to": 127
  }, {
    "from": 351,
    "label": "declares",
    "to": 133
  }, {
    "from": 351,
    "label": "declares",
    "to": 136
  }, {
    "from": 351,
    "label": "declares",
    "to": 139
  }, {
    "from": 351,
    "label": "declares",
    "to": 146
  }, {
    "from": 351,
    "label": "declares",
    "to": 150
  }, {
    "from": 351,
    "label": "declares",
    "to": 154
  }, {
    "from": 351,
    "label": "declares",
    "to": 159
  }, {
    "from": 351,
    "label": "declares",
    "to": 164
  }, {
    "from": 351,
    "label": "declares",
    "to": 169
  }, {
    "from": 351,
    "label": "declares",
    "to": 174
  }, {
    "from": 351,
    "label": "declares",
    "to": 178
  }, {
    "from": 351,
    "label": "declares",
    "to": 182
  }, {
    "from": 351,
    "label": "declares",
    "to": 188
  }, {
    "from": 351,
    "label": "declares",
    "to": 193
  }, {
    "from": 351,
    "label": "declares",
    "to": 199
  }, {
    "from": 351,
    "label": "declares",
    "to": 204
  }, {
    "from": 351,
    "label": "declares",
    "to": 209
  }, {
    "from": 351,
    "label": "declares",
    "to": 213
  }, {
    "from": 351,
    "label": "declares",
    "to": 218
  }, {
    "from": 351,
    "label": "declares",
    "to": 223
  }, {
    "from": 351,
    "label": "declares",
    "to": 227
  }, {
    "from": 351,
    "label": "declares",
    "to": 264
  }, {
    "from": 351,
    "label": "declares",
    "to": 281
  }, {
    "from": 351,
    "label": "declares",
    "to": 286
  }, {
    "from": 351,
    "label": "declares",
    "to": 299
  }, {
    "from": 351,
    "label": "declares",
    "to": 308
  }, {
    "from": 351,
    "label": "declares",
    "to": 316
  }, {
    "from": 351,
    "label": "declares",
    "to": 321
  }, {
    "from": 351,
    "label": "declares",
    "to": 326
  }, {
    "from": 351,
    "label": "declares",
    "to": 335
  }, {
    "from": 351,
    "label": "declares",
    "to": 338
  }, {
    "from": 351,
    "label": "declares",
    "to": 342
  }, {
    "from": 351,
    "label": "declares",
    "to": 346
  }, {
    "from": 1,
    "label": "contains",
    "to": 364
  }, {
    "from": 1,
    "label": "contains",
    "to": 365
  }, {
    "from": 364,
    "label": "initializes",
    "to": 366
  }, {
    "from": 366,
    "label": "assigns",
    "to": 367
  }, {
    "from": 365,
    "label": "initializes",
    "to": 368
  }, {
    "from": 368,
    "label": "requires",
    "to": 363
  }, {
    "from": 228,
    "label": "hasArgument",
    "to": 2
  }, {
    "from": 229,
    "label": "hasArgument",
    "to": 60
  }, {
    "from": 230,
    "label": "hasArgument",
    "to": 66
  }, {
    "from": 231,
    "label": "hasArgument",
    "to": 76
  }, {
    "from": 232,
    "label": "hasArgument",
    "to": 85
  }, {
    "from": 233,
    "label": "hasArgument",
    "to": 91
  }, {
    "from": 234,
    "label": "hasArgument",
    "to": 94
  }, {
    "from": 235,
    "label": "hasArgument",
    "to": 97
  }, {
    "from": 236,
    "label": "hasArgument",
    "to": 102
  }, {
    "from": 237,
    "label": "hasArgument",
    "to": 106
  }, {
    "from": 238,
    "label": "hasArgument",
    "to": 112
  }, {
    "from": 239,
    "label": "hasArgument",
    "to": 115
  }, {
    "from": 240,
    "label": "hasArgument",
    "to": 118
  }, {
    "from": 241,
    "label": "hasArgument",
    "to": 123
  }, {
    "from": 242,
    "label": "hasArgument",
    "to": 127
  }, {
    "from": 243,
    "label": "hasArgument",
    "to": 133
  }, {
    "from": 244,
    "label": "hasArgument",
    "to": 136
  }, {
    "from": 245,
    "label": "hasArgument",
    "to": 139
  }, {
    "from": 246,
    "label": "hasArgument",
    "to": 146
  }, {
    "from": 247,
    "label": "hasArgument",
    "to": 150
  }, {
    "from": 248,
    "label": "hasArgument",
    "to": 154
  }, {
    "from": 249,
    "label": "hasArgument",
    "to": 159
  }, {
    "from": 250,
    "label": "hasArgument",
    "to": 164
  }, {
    "from": 251,
    "label": "hasArgument",
    "to": 169
  }, {
    "from": 252,
    "label": "hasArgument",
    "to": 174
  }, {
    "from": 253,
    "label": "hasArgument",
    "to": 178
  }, {
    "from": 254,
    "label": "hasArgument",
    "to": 182
  }, {
    "from": 255,
    "label": "hasArgument",
    "to": 188
  }, {
    "from": 256,
    "label": "hasArgument",
    "to": 193
  }, {
    "from": 257,
    "label": "hasArgument",
    "to": 199
  }, {
    "from": 258,
    "label": "hasArgument",
    "to": 204
  }, {
    "from": 259,
    "label": "hasArgument",
    "to": 209
  }, {
    "from": 260,
    "label": "hasArgument",
    "to": 213
  }, {
    "from": 261,
    "label": "hasArgument",
    "to": 218
  }, {
    "from": 262,
    "label": "hasArgument",
    "to": 223
  }, {
    "from": 327,
    "label": "hasArgument",
    "to": 264
  }, {
    "from": 328,
    "label": "hasArgument",
    "to": 281
  }, {
    "from": 329,
    "label": "hasArgument",
    "to": 286
  }, {
    "from": 330,
    "label": "hasArgument",
    "to": 299
  }, {
    "from": 331,
    "label": "hasArgument",
    "to": 308
  }, {
    "from": 332,
    "label": "hasArgument",
    "to": 316
  }, {
    "from": 333,
    "label": "hasArgument",
    "to": 321
  }, {
    "from": 347,
    "label": "hasArgument",
    "to": 335
  }, {
    "from": 348,
    "label": "hasArgument",
    "to": 338
  }, {
    "from": 349,
    "label": "hasArgument",
    "to": 342
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "cli_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "function()\r\n    local defaultOutput = 'default_output_handler'\r\n    local lpath = './src/?.lua;./src/?/?.lua;./src/?/init.lua'\r\n    local cpath = path.is_windows and './csrc/?.dll;./csrc/?/?.dll;' or './csrc/?.so;./csrc/?/?.so;'\r\n    local cli = require 'busted.modules.cli'({ standalone = false, output = defaultOutput })\r\n    local args = cli:parse({})\r\n    assert.is_equal(defaultOutput, args.o)\r\n    assert.is_equal(defaultOutput, args.output)\r\n    assert.is_same({'spec'}, args.ROOT)\r\n    assert.is_equal('./', args.C)\r\n    assert.is_equal('./', args.directory)\r\n    assert.is_equal('/dev/urandom or os.time()', args.seed)\r\n    assert.is_equal('en', args.lang)\r\n    assert.is_equal(1, args['repeat'])\r\n    assert.is_equal(lpath, args.m)\r\n    assert.is_equal(lpath, args.lpath)\r\n    assert.is_equal(cpath, args.cpath)\r\n    assert.is_true(args['auto-insulate'])\r\n    assert.is_true(args.k)\r\n    assert.is_true(args['keep-going'])\r\n    assert.is_true(args.R)\r\n    assert.is_true(args['recursive'])\r\n    assert.is_false(args.c)\r\n    assert.is_false(args.coverage)\r\n    assert.is_false(args.version)\r\n    assert.is_false(args.v)\r\n    assert.is_false(args.verbose)\r\n    assert.is_false(args.l)\r\n    assert.is_false(args.list)\r\n    assert.is_false(args.lazy)\r\n    assert.is_false(args.s)\r\n    assert.is_false(args['enable-sound'])\r\n    assert.is_false(args['suppress-pending'])\r\n    assert.is_false(args['defer-print'])\r\n    assert.is_nil(args.f)\r\n    assert.is_nil(args['config-file'])\r\n    assert.is_nil(args.shuffle)\r\n    assert.is_nil(args['shuffle-files'])\r\n    assert.is_nil(args['shuffle-tests'])\r\n    assert.is_nil(args.sort)\r\n    assert.is_nil(args['sort-files'])\r\n    assert.is_nil(args['sort-tests'])\r\n    assert.is_nil(args.r)\r\n    assert.is_nil(args.run)\r\n    assert.is_nil(args.helper)\r\n    assert.is_same({}, args.e)\r\n    assert.is_same({'_spec'}, args.p)\r\n    assert.is_same({'_spec'}, args.pattern)\r\n    assert.is_same({}, args['exclude-pattern'])\r\n    assert.is_same({}, args.t)\r\n    assert.is_same({}, args.tags)\r\n    assert.is_same({}, args['exclude-tags'])\r\n    assert.is_same({}, args.filter)\r\n    assert.is_same({}, args['filter-out'])\r\n    assert.is_same({}, args.Xoutput)\r\n    assert.is_same({}, args.Xhelper)\r\n    assert.is_same({'lua', 'moonscript'}, args.loaders)\r\n  end",
    "type": "function"
  }, {
    "id": 3,
    "text": "local defaultOutput = 'default_output_handler'",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local lpath = './src/?.lua;./src/?/?.lua;./src/?/init.lua'",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local cpath = path.is_windows and './csrc/?.dll;./csrc/?/?.dll;' or './csrc/?.so;./csrc/?/?.so;'",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "local cli = require 'busted.modules.cli'({ standalone = false, output = defaultOutput })",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "local args = cli:parse({})",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "assert.is_equal(defaultOutput, args.o)",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "assert.is_equal(defaultOutput, args.output)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "assert.is_same({'spec'}, args.ROOT)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "assert.is_equal('./', args.C)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "assert.is_equal('./', args.directory)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "assert.is_equal('/dev/urandom or os.time()', args.seed)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "assert.is_equal('en', args.lang)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "assert.is_equal(1, args['repeat'])",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "assert.is_equal(lpath, args.m)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "assert.is_equal(lpath, args.lpath)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "assert.is_equal(cpath, args.cpath)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "assert.is_true(args['auto-insulate'])",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "assert.is_true(args.k)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "assert.is_true(args['keep-going'])",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "assert.is_true(args.R)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "assert.is_true(args['recursive'])",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "assert.is_false(args.c)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "assert.is_false(args.coverage)",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "assert.is_false(args.version)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "assert.is_false(args.v)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "assert.is_false(args.verbose)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "assert.is_false(args.l)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "assert.is_false(args.list)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "assert.is_false(args.lazy)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "assert.is_false(args.s)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "assert.is_false(args['enable-sound'])",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "assert.is_false(args['suppress-pending'])",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "assert.is_false(args['defer-print'])",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "assert.is_nil(args.f)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "assert.is_nil(args['config-file'])",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "assert.is_nil(args.shuffle)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "assert.is_nil(args['shuffle-files'])",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "assert.is_nil(args['shuffle-tests'])",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "assert.is_nil(args.sort)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "assert.is_nil(args['sort-files'])",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "assert.is_nil(args['sort-tests'])",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "assert.is_nil(args.r)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "assert.is_nil(args.run)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "assert.is_nil(args.helper)",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "assert.is_same({}, args.e)",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "assert.is_same({'_spec'}, args.p)",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "assert.is_same({'_spec'}, args.pattern)",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "assert.is_same({}, args['exclude-pattern'])",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "assert.is_same({}, args.t)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "assert.is_same({}, args.tags)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "assert.is_same({}, args['exclude-tags'])",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "assert.is_same({}, args.filter)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "assert.is_same({}, args['filter-out'])",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "assert.is_same({}, args.Xoutput)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "assert.is_same({}, args.Xhelper)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "assert.is_same({'lua', 'moonscript'}, args.loaders)",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'({ standalone = true })\r\n    local args = cli:parse({})\r\n    assert.is_nil(args.ROOT)\r\n    assert.is_same({}, args.p)\r\n    assert.is_same({}, args.pattern)\r\n    assert.is_same({}, args['exclude-pattern'])\r\n  end",
    "type": "function"
  }, {
    "id": 61,
    "text": "local cli = require 'busted.modules.cli'({ standalone = true })",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "assert.is_nil(args.ROOT)",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "assert.is_same({}, args.p)",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "assert.is_same({}, args.pattern)",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '-v', '--version', '--coverage', '--defer-print', '--suppress-pending' })\r\n    assert.is_true(args.v)\r\n    assert.is_true(args.verbose)\r\n    assert.is_true(args.version)\r\n    assert.is_true(args.coverage)\r\n    assert.is_true(args['defer-print'])\r\n    assert.is_true(args['suppress-pending'])\r\n  end",
    "type": "function"
  }, {
    "id": 67,
    "text": "local cli = require 'busted.modules.cli'()",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "local args = cli:parse({ '-v', '--version', '--coverage', '--defer-print', '--suppress-pending' })",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "assert.is_true(args.v)",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "assert.is_true(args.verbose)",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "assert.is_true(args.version)",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "assert.is_true(args.coverage)",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "assert.is_true(args['defer-print'])",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "assert.is_true(args['suppress-pending'])",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '-s', '--list', '-k', '--no-keep-going', '-R', '--no-recursive' })\r\n    assert.is_true(args.s)\r\n    assert.is_true(args['enable-sound'])\r\n    assert.is_true(args.l)\r\n    assert.is_true(args.list)\r\n    assert.is_false(args['keep-going'])\r\n    assert.is_false(args['recursive'])\r\n  end",
    "type": "function"
  }, {
    "id": 77,
    "text": "local args = cli:parse({ '-s', '--list', '-k', '--no-keep-going', '-R', '--no-recursive' })",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "assert.is_true(args.s)",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "assert.is_true(args['enable-sound'])",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "assert.is_true(args.l)",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "assert.is_true(args.list)",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "assert.is_false(args['keep-going'])",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "assert.is_false(args['recursive'])",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--lazy', '--no-auto-insulate', '-k', '-R' })\r\n    assert.is_true(args.lazy)\r\n    assert.is_false(args['auto-insulate'])\r\n    assert.is_true(args.k)\r\n    assert.is_true(args['keep-going'])\r\n    assert.is_true(args.R)\r\n    assert.is_true(args.recursive)\r\n  end",
    "type": "function"
  }, {
    "id": 86,
    "text": "local args = cli:parse({ '--lazy', '--no-auto-insulate', '-k', '-R' })",
    "type": "statement:localassign"
  }, {
    "id": 87,
    "text": "assert.is_true(args.lazy)",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "assert.is_false(args['auto-insulate'])",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "assert.is_true(args.recursive)",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 91,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--no-lazy', '--no-auto-insulate', '--no-coverage', '--no-verbose' })\r\n    assert.is_false(args.lazy)\r\n    assert.is_false(args['auto-insulate'])\r\n    assert.is_false(args.coverage)\r\n    assert.is_false(args.verbose)\r\n  end",
    "type": "function"
  }, {
    "id": 92,
    "text": "local args = cli:parse({ '--no-lazy', '--no-auto-insulate', '--no-coverage', '--no-verbose' })",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 94,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--no-enable-sound', '--no-suppress-pending', '--no-defer-print' })\r\n    assert.is_false(args['enable-sound'])\r\n    assert.is_false(args['suppress-pending'])\r\n    assert.is_false(args['defer-print'])\r\n  end",
    "type": "function"
  }, {
    "id": 95,
    "text": "local args = cli:parse({ '--no-enable-sound', '--no-suppress-pending', '--no-defer-print' })",
    "type": "statement:localassign"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--shuffle-files', '--shuffle-tests' })\r\n    assert.is_nil(args.shuffle)\r\n    assert.is_true(args['shuffle-files'])\r\n    assert.is_true(args['shuffle-tests'])\r\n  end",
    "type": "function"
  }, {
    "id": 98,
    "text": "local args = cli:parse({ '--shuffle-files', '--shuffle-tests' })",
    "type": "statement:localassign"
  }, {
    "id": 99,
    "text": "assert.is_true(args['shuffle-files'])",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "assert.is_true(args['shuffle-tests'])",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 102,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--shuffle', })\r\n    assert.is_true(args.shuffle)\r\n    assert.is_true(args['shuffle-files'])\r\n    assert.is_true(args['shuffle-tests'])\r\n  end",
    "type": "function"
  }, {
    "id": 103,
    "text": "local args = cli:parse({ '--shuffle', })",
    "type": "statement:localassign"
  }, {
    "id": 104,
    "text": "assert.is_true(args.shuffle)",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 106,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--no-shuffle', '--no-shuffle-files', '--no-shuffle-tests' })\r\n    assert.is_false(args.shuffle)\r\n    assert.is_false(args['shuffle-files'])\r\n    assert.is_false(args['shuffle-tests'])\r\n  end",
    "type": "function"
  }, {
    "id": 107,
    "text": "local args = cli:parse({ '--no-shuffle', '--no-shuffle-files', '--no-shuffle-tests' })",
    "type": "statement:localassign"
  }, {
    "id": 108,
    "text": "assert.is_false(args.shuffle)",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "assert.is_false(args['shuffle-files'])",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "assert.is_false(args['shuffle-tests'])",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 112,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--no-shuffle', })\r\n    assert.is_false(args.shuffle)\r\n    assert.is_false(args['shuffle-files'])\r\n    assert.is_false(args['shuffle-tests'])\r\n  end",
    "type": "function"
  }, {
    "id": 113,
    "text": "local args = cli:parse({ '--no-shuffle', })",
    "type": "statement:localassign"
  }, {
    "id": 114,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 115,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--shuffle', '--no-shuffle-files' })\r\n    assert.is_true(args.shuffle)\r\n    assert.is_false(args['shuffle-files'])\r\n    assert.is_true(args['shuffle-tests'])\r\n  end",
    "type": "function"
  }, {
    "id": 116,
    "text": "local args = cli:parse({ '--shuffle', '--no-shuffle-files' })",
    "type": "statement:localassign"
  }, {
    "id": 117,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 118,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--sort-files', '--sort-tests' })\r\n    assert.is_nil(args.sort)\r\n    assert.is_true(args['sort-files'])\r\n    assert.is_true(args['sort-tests'])\r\n  end",
    "type": "function"
  }, {
    "id": 119,
    "text": "local args = cli:parse({ '--sort-files', '--sort-tests' })",
    "type": "statement:localassign"
  }, {
    "id": 120,
    "text": "assert.is_true(args['sort-files'])",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "assert.is_true(args['sort-tests'])",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 123,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--sort', })\r\n    assert.is_true(args.sort)\r\n    assert.is_true(args['sort-files'])\r\n    assert.is_true(args['sort-tests'])\r\n  end",
    "type": "function"
  }, {
    "id": 124,
    "text": "local args = cli:parse({ '--sort', })",
    "type": "statement:localassign"
  }, {
    "id": 125,
    "text": "assert.is_true(args.sort)",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 127,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--no-sort', '--no-sort-files', '--no-sort-tests' })\r\n    assert.is_false(args.sort)\r\n    assert.is_false(args['sort-files'])\r\n    assert.is_false(args['sort-tests'])\r\n  end",
    "type": "function"
  }, {
    "id": 128,
    "text": "local args = cli:parse({ '--no-sort', '--no-sort-files', '--no-sort-tests' })",
    "type": "statement:localassign"
  }, {
    "id": 129,
    "text": "assert.is_false(args.sort)",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "assert.is_false(args['sort-files'])",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "assert.is_false(args['sort-tests'])",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 133,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--no-sort', })\r\n    assert.is_false(args.sort)\r\n    assert.is_false(args['sort-files'])\r\n    assert.is_false(args['sort-tests'])\r\n  end",
    "type": "function"
  }, {
    "id": 134,
    "text": "local args = cli:parse({ '--no-sort', })",
    "type": "statement:localassign"
  }, {
    "id": 135,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 136,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--sort', '--no-sort-files' })\r\n    assert.is_true(args.sort)\r\n    assert.is_false(args['sort-files'])\r\n    assert.is_true(args['sort-tests'])\r\n  end",
    "type": "function"
  }, {
    "id": 137,
    "text": "local args = cli:parse({ '--sort', '--no-sort-files' })",
    "type": "statement:localassign"
  }, {
    "id": 138,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 139,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'({ standalone = false })\r\n    local args = cli:parse({ '-p', 'match_files', 'root_is_here' })\r\n    assert.is_same({'root_is_here'}, args.ROOT)\r\n    assert.is_same({'match_files'}, args.p)\r\n    assert.is_same({'match_files'}, args.pattern)\r\n  end",
    "type": "function"
  }, {
    "id": 140,
    "text": "local cli = require 'busted.modules.cli'({ standalone = false })",
    "type": "statement:localassign"
  }, {
    "id": 141,
    "text": "local args = cli:parse({ '-p', 'match_files', 'root_is_here' })",
    "type": "statement:localassign"
  }, {
    "id": 142,
    "text": "assert.is_same({'root_is_here'}, args.ROOT)",
    "type": "statement:functioncall"
  }, {
    "id": 143,
    "text": "assert.is_same({'match_files'}, args.p)",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "assert.is_same({'match_files'}, args.pattern)",
    "type": "statement:functioncall"
  }, {
    "id": 145,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 146,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'({ standalone = false })\r\n    local args = cli:parse({ '--exclude-pattern', 'exclude_files', 'root_is_here' })\r\n    assert.is_same({'root_is_here'}, args.ROOT)\r\n    assert.is_same({'exclude_files'}, args['exclude-pattern'])\r\n  end",
    "type": "function"
  }, {
    "id": 147,
    "text": "local args = cli:parse({ '--exclude-pattern', 'exclude_files', 'root_is_here' })",
    "type": "statement:localassign"
  }, {
    "id": 148,
    "text": "assert.is_same({'exclude_files'}, args['exclude-pattern'])",
    "type": "statement:functioncall"
  }, {
    "id": 149,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 150,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'({ standalone = false })\r\n    local args = cli:parse({'root1_path', 'root2_path', 'root3_path'})\r\n    assert.is_same({'root1_path', 'root2_path', 'root3_path'}, args.ROOT)\r\n  end",
    "type": "function"
  }, {
    "id": 151,
    "text": "local args = cli:parse({'root1_path', 'root2_path', 'root3_path'})",
    "type": "statement:localassign"
  }, {
    "id": 152,
    "text": "assert.is_same({'root1_path', 'root2_path', 'root3_path'}, args.ROOT)",
    "type": "statement:functioncall"
  }, {
    "id": 153,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 154,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--directory=/path/to/dir' })\r\n    assert.is_equal(normpath('/path/to/dir'), args.C)\r\n    assert.is_equal(normpath('/path/to/dir'), args.directory)\r\n  end",
    "type": "function"
  }, {
    "id": 155,
    "text": "local args = cli:parse({ '--directory=/path/to/dir' })",
    "type": "statement:localassign"
  }, {
    "id": 156,
    "text": "assert.is_equal(normpath('/path/to/dir'), args.C)",
    "type": "statement:functioncall"
  }, {
    "id": 157,
    "text": "assert.is_equal(normpath('/path/to/dir'), args.directory)",
    "type": "statement:functioncall"
  }, {
    "id": 158,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 159,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--directory=/path/to', '-C', 'dir', '--directory=subdir' })\r\n    assert.is_equal(normpath('/path/to/dir/subdir'), args.C)\r\n    assert.is_equal(normpath('/path/to/dir/subdir'), args.directory)\r\n  end",
    "type": "function"
  }, {
    "id": 160,
    "text": "local args = cli:parse({ '--directory=/path/to', '-C', 'dir', '--directory=subdir' })",
    "type": "statement:localassign"
  }, {
    "id": 161,
    "text": "assert.is_equal(normpath('/path/to/dir/subdir'), args.C)",
    "type": "statement:functioncall"
  }, {
    "id": 162,
    "text": "assert.is_equal(normpath('/path/to/dir/subdir'), args.directory)",
    "type": "statement:functioncall"
  }, {
    "id": 163,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 164,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--directory=/path/to', '-C', 'dir', '--directory=/new/path' })\r\n    assert.is_equal(normpath('/new/path'), args.C)\r\n    assert.is_equal(normpath('/new/path'), args.directory)\r\n  end",
    "type": "function"
  }, {
    "id": 165,
    "text": "local args = cli:parse({ '--directory=/path/to', '-C', 'dir', '--directory=/new/path' })",
    "type": "statement:localassign"
  }, {
    "id": 166,
    "text": "assert.is_equal(normpath('/new/path'), args.C)",
    "type": "statement:functioncall"
  }, {
    "id": 167,
    "text": "assert.is_equal(normpath('/new/path'), args.directory)",
    "type": "statement:functioncall"
  }, {
    "id": 168,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 169,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--run=task' })\r\n    assert.is_equal('task', args.r)\r\n    assert.is_equal('task', args.run)\r\n  end",
    "type": "function"
  }, {
    "id": 170,
    "text": "local args = cli:parse({ '--run=task' })",
    "type": "statement:localassign"
  }, {
    "id": 171,
    "text": "assert.is_equal('task', args.r)",
    "type": "statement:functioncall"
  }, {
    "id": 172,
    "text": "assert.is_equal('task', args.run)",
    "type": "statement:functioncall"
  }, {
    "id": 173,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 174,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--lang=fr' })\r\n    assert.is_equal('fr', args.lang)\r\n  end",
    "type": "function"
  }, {
    "id": 175,
    "text": "local args = cli:parse({ '--lang=fr' })",
    "type": "statement:localassign"
  }, {
    "id": 176,
    "text": "assert.is_equal('fr', args.lang)",
    "type": "statement:functioncall"
  }, {
    "id": 177,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 178,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--repeat=23' })\r\n    assert.is_equal(23, args['repeat'])\r\n  end",
    "type": "function"
  }, {
    "id": 179,
    "text": "local args = cli:parse({ '--repeat=23' })",
    "type": "statement:localassign"
  }, {
    "id": 180,
    "text": "assert.is_equal(23, args['repeat'])",
    "type": "statement:functioncall"
  }, {
    "id": 181,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 182,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '-o', 'output_handler', '-Xoutput', '--flag,-f', '-Xoutput', '--opt=val' })\r\n    assert.is_equal('output_handler', args.o)\r\n    assert.is_equal('output_handler', args.output)\r\n    assert.is_same({'--flag', '-f', '--opt=val'}, args.Xoutput)\r\n  end",
    "type": "function"
  }, {
    "id": 183,
    "text": "local args = cli:parse({ '-o', 'output_handler', '-Xoutput', '--flag,-f', '-Xoutput', '--opt=val' })",
    "type": "statement:localassign"
  }, {
    "id": 184,
    "text": "assert.is_equal('output_handler', args.o)",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "assert.is_equal('output_handler', args.output)",
    "type": "statement:functioncall"
  }, {
    "id": 186,
    "text": "assert.is_same({'--flag', '-f', '--opt=val'}, args.Xoutput)",
    "type": "statement:functioncall"
  }, {
    "id": 187,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 188,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--helper=helper_script', '-Xhelper', '--flag,-f', '-Xhelper', '--opt=val'  })\r\n    assert.is_equal('helper_script', args.helper)\r\n    assert.is_same({'--flag', '-f', '--opt=val'}, args.Xhelper)\r\n  end",
    "type": "function"
  }, {
    "id": 189,
    "text": "local args = cli:parse({ '--helper=helper_script', '-Xhelper', '--flag,-f', '-Xhelper', '--opt=val'  })",
    "type": "statement:localassign"
  }, {
    "id": 190,
    "text": "assert.is_equal('helper_script', args.helper)",
    "type": "statement:functioncall"
  }, {
    "id": 191,
    "text": "assert.is_same({'--flag', '-f', '--opt=val'}, args.Xhelper)",
    "type": "statement:functioncall"
  }, {
    "id": 192,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 193,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--tags=tag1,tag2', '-t', 'tag3', '--exclude-tags=etag1', '--exclude-tags=etag2,etag3' })\r\n    assert.is_same({'tag1', 'tag2', 'tag3'}, args.t)\r\n    assert.is_same({'tag1', 'tag2', 'tag3'}, args.tags)\r\n    assert.is_same({'etag1', 'etag2', 'etag3'}, args['exclude-tags'])\r\n  end",
    "type": "function"
  }, {
    "id": 194,
    "text": "local args = cli:parse({ '--tags=tag1,tag2', '-t', 'tag3', '--exclude-tags=etag1', '--exclude-tags=etag2,etag3' })",
    "type": "statement:localassign"
  }, {
    "id": 195,
    "text": "assert.is_same({'tag1', 'tag2', 'tag3'}, args.t)",
    "type": "statement:functioncall"
  }, {
    "id": 196,
    "text": "assert.is_same({'tag1', 'tag2', 'tag3'}, args.tags)",
    "type": "statement:functioncall"
  }, {
    "id": 197,
    "text": "assert.is_same({'etag1', 'etag2', 'etag3'}, args['exclude-tags'])",
    "type": "statement:functioncall"
  }, {
    "id": 198,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 199,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--filter=_filt', '--filter-out=_filterout' })\r\n    assert.is_same({'_filt'}, args.filter)\r\n    assert.is_same({'_filterout'}, args['filter-out'])\r\n  end",
    "type": "function"
  }, {
    "id": 200,
    "text": "local args = cli:parse({ '--filter=_filt', '--filter-out=_filterout' })",
    "type": "statement:localassign"
  }, {
    "id": 201,
    "text": "assert.is_same({'_filt'}, args.filter)",
    "type": "statement:functioncall"
  }, {
    "id": 202,
    "text": "assert.is_same({'_filterout'}, args['filter-out'])",
    "type": "statement:functioncall"
  }, {
    "id": 203,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 204,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--filter=_filt1', '--filter=_filt2', '--filter-out=_filterout1', '--filter-out=_filterout2' })\r\n    assert.is_same({'_filt1', '_filt2'}, args.filter)\r\n    assert.is_same({'_filterout1', '_filterout2'}, args['filter-out'])\r\n  end",
    "type": "function"
  }, {
    "id": 205,
    "text": "local args = cli:parse({ '--filter=_filt1', '--filter=_filt2', '--filter-out=_filterout1', '--filter-out=_filterout2' })",
    "type": "statement:localassign"
  }, {
    "id": 206,
    "text": "assert.is_same({'_filt1', '_filt2'}, args.filter)",
    "type": "statement:functioncall"
  }, {
    "id": 207,
    "text": "assert.is_same({'_filterout1', '_filterout2'}, args['filter-out'])",
    "type": "statement:functioncall"
  }, {
    "id": 208,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 209,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--loaders=load1,load2', '--loaders=load3' })\r\n    assert.is_same({'load1', 'load2', 'load3'}, args.loaders)\r\n  end",
    "type": "function"
  }, {
    "id": 210,
    "text": "local args = cli:parse({ '--loaders=load1,load2', '--loaders=load3' })",
    "type": "statement:localassign"
  }, {
    "id": 211,
    "text": "assert.is_same({'load1', 'load2', 'load3'}, args.loaders)",
    "type": "statement:functioncall"
  }, {
    "id": 212,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 213,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '-C', '/root', '--lpath=./path1/?.lua', '-m', './path2/?.lua' })\r\n    assert.is_equal('./path1/?.lua;./path2/?.lua', args.m)\r\n    assert.is_equal('./path1/?.lua;./path2/?.lua', args.lpath)\r\n  end",
    "type": "function"
  }, {
    "id": 214,
    "text": "local args = cli:parse({ '-C', '/root', '--lpath=./path1/?.lua', '-m', './path2/?.lua' })",
    "type": "statement:localassign"
  }, {
    "id": 215,
    "text": "assert.is_equal('./path1/?.lua;./path2/?.lua', args.m)",
    "type": "statement:functioncall"
  }, {
    "id": 216,
    "text": "assert.is_equal('./path1/?.lua;./path2/?.lua', args.lpath)",
    "type": "statement:functioncall"
  }, {
    "id": 217,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 218,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '-C', '/croot', '--lpath=./path1/?.so', '-m', './path2/?.so' })\r\n    assert.is_equal('./path1/?.so;./path2/?.so', args.m)\r\n    assert.is_equal('./path1/?.so;./path2/?.so', args.lpath)\r\n  end",
    "type": "function"
  }, {
    "id": 219,
    "text": "local args = cli:parse({ '-C', '/croot', '--lpath=./path1/?.so', '-m', './path2/?.so' })",
    "type": "statement:localassign"
  }, {
    "id": 220,
    "text": "assert.is_equal('./path1/?.so;./path2/?.so', args.m)",
    "type": "statement:functioncall"
  }, {
    "id": 221,
    "text": "assert.is_equal('./path1/?.so;./path2/?.so', args.lpath)",
    "type": "statement:functioncall"
  }, {
    "id": 222,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 223,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '-e', 'statement1', '-e', 'statement2' })\r\n    assert.is_same({'statement1', 'statement2'}, args.e)\r\n  end",
    "type": "function"
  }, {
    "id": 224,
    "text": "local args = cli:parse({ '-e', 'statement1', '-e', 'statement2' })",
    "type": "statement:localassign"
  }, {
    "id": 225,
    "text": "assert.is_same({'statement1', 'statement2'}, args.e)",
    "type": "statement:functioncall"
  }, {
    "id": 226,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 227,
    "text": "function()\r\n  it('default options', function()\r\n    local defaultOutput = 'default_output_handler'\r\n    local lpath = './src/?.lua;./src/?/?.lua;./src/?/init.lua'\r\n    local cpath = path.is_windows and './csrc/?.dll;./csrc/?/?.dll;' or './csrc/?.so;./csrc/?/?.so;'\r\n    local cli = require 'busted.modules.cli'({ standalone = false, output = defaultOutput })\r\n    local args = cli:parse({})\r\n    assert.is_equal(defaultOutput, args.o)\r\n    assert.is_equal(defaultOutput, args.output)\r\n    assert.is_same({'spec'}, args.ROOT)\r\n    assert.is_equal('./', args.C)\r\n    assert.is_equal('./', args.directory)\r\n    assert.is_equal('/dev/urandom or os.time()', args.seed)\r\n    assert.is_equal('en', args.lang)\r\n    assert.is_equal(1, args['repeat'])\r\n    assert.is_equal(lpath, args.m)\r\n    assert.is_equal(lpath, args.lpath)\r\n    assert.is_equal(cpath, args.cpath)\r\n    assert.is_true(args['auto-insulate'])\r\n    assert.is_true(args.k)\r\n    assert.is_true(args['keep-going'])\r\n    assert.is_true(args.R)\r\n    assert.is_true(args['recursive'])\r\n    assert.is_false(args.c)\r\n    assert.is_false(args.coverage)\r\n    assert.is_false(args.version)\r\n    assert.is_false(args.v)\r\n    assert.is_false(args.verbose)\r\n    assert.is_false(args.l)\r\n    assert.is_false(args.list)\r\n    assert.is_false(args.lazy)\r\n    assert.is_false(args.s)\r\n    assert.is_false(args['enable-sound'])\r\n    assert.is_false(args['suppress-pending'])\r\n    assert.is_false(args['defer-print'])\r\n    assert.is_nil(args.f)\r\n    assert.is_nil(args['config-file'])\r\n    assert.is_nil(args.shuffle)\r\n    assert.is_nil(args['shuffle-files'])\r\n    assert.is_nil(args['shuffle-tests'])\r\n    assert.is_nil(args.sort)\r\n    assert.is_nil(args['sort-files'])\r\n    assert.is_nil(args['sort-tests'])\r\n    assert.is_nil(args.r)\r\n    assert.is_nil(args.run)\r\n    assert.is_nil(args.helper)\r\n    assert.is_same({}, args.e)\r\n    assert.is_same({'_spec'}, args.p)\r\n    assert.is_same({'_spec'}, args.pattern)\r\n    assert.is_same({}, args['exclude-pattern'])\r\n    assert.is_same({}, args.t)\r\n    assert.is_same({}, args.tags)\r\n    assert.is_same({}, args['exclude-tags'])\r\n    assert.is_same({}, args.filter)\r\n    assert.is_same({}, args['filter-out'])\r\n    assert.is_same({}, args.Xoutput)\r\n    assert.is_same({}, args.Xhelper)\r\n    assert.is_same({'lua', 'moonscript'}, args.loaders)\r\n  end)\r\n\r\n  it('standalone options disables ROOT and --pattern', function()\r\n    local cli = require 'busted.modules.cli'({ standalone = true })\r\n    local args = cli:parse({})\r\n    assert.is_nil(args.ROOT)\r\n    assert.is_same({}, args.p)\r\n    assert.is_same({}, args.pattern)\r\n    assert.is_same({}, args['exclude-pattern'])\r\n  end)\r\n\r\n  it('specify flags', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '-v', '--version', '--coverage', '--defer-print', '--suppress-pending' })\r\n    assert.is_true(args.v)\r\n    assert.is_true(args.verbose)\r\n    assert.is_true(args.version)\r\n    assert.is_true(args.coverage)\r\n    assert.is_true(args['defer-print'])\r\n    assert.is_true(args['suppress-pending'])\r\n  end)\r\n\r\n  it('specify more flags', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '-s', '--list', '-k', '--no-keep-going', '-R', '--no-recursive' })\r\n    assert.is_true(args.s)\r\n    assert.is_true(args['enable-sound'])\r\n    assert.is_true(args.l)\r\n    assert.is_true(args.list)\r\n    assert.is_false(args['keep-going'])\r\n    assert.is_false(args['recursive'])\r\n  end)\r\n\r\n  it('specify even more flags', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--lazy', '--no-auto-insulate', '-k', '-R' })\r\n    assert.is_true(args.lazy)\r\n    assert.is_false(args['auto-insulate'])\r\n    assert.is_true(args.k)\r\n    assert.is_true(args['keep-going'])\r\n    assert.is_true(args.R)\r\n    assert.is_true(args.recursive)\r\n  end)\r\n\r\n  it('specify no-flags', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--no-lazy', '--no-auto-insulate', '--no-coverage', '--no-verbose' })\r\n    assert.is_false(args.lazy)\r\n    assert.is_false(args['auto-insulate'])\r\n    assert.is_false(args.coverage)\r\n    assert.is_false(args.verbose)\r\n  end)\r\n\r\n  it('specify more no-flags', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--no-enable-sound', '--no-suppress-pending', '--no-defer-print' })\r\n    assert.is_false(args['enable-sound'])\r\n    assert.is_false(args['suppress-pending'])\r\n    assert.is_false(args['defer-print'])\r\n  end)\r\n\r\n  it('specify shuffle flags', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--shuffle-files', '--shuffle-tests' })\r\n    assert.is_nil(args.shuffle)\r\n    assert.is_true(args['shuffle-files'])\r\n    assert.is_true(args['shuffle-tests'])\r\n  end)\r\n\r\n  it('specify shuffle flag only', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--shuffle', })\r\n    assert.is_true(args.shuffle)\r\n    assert.is_true(args['shuffle-files'])\r\n    assert.is_true(args['shuffle-tests'])\r\n  end)\r\n\r\n  it('specify shuffle no-flags', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--no-shuffle', '--no-shuffle-files', '--no-shuffle-tests' })\r\n    assert.is_false(args.shuffle)\r\n    assert.is_false(args['shuffle-files'])\r\n    assert.is_false(args['shuffle-tests'])\r\n  end)\r\n\r\n  it('specify no-shuffle flag only', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--no-shuffle', })\r\n    assert.is_false(args.shuffle)\r\n    assert.is_false(args['shuffle-files'])\r\n    assert.is_false(args['shuffle-tests'])\r\n  end)\r\n\r\n  it('specify shuffle and no-shuffle flags', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--shuffle', '--no-shuffle-files' })\r\n    assert.is_true(args.shuffle)\r\n    assert.is_false(args['shuffle-files'])\r\n    assert.is_true(args['shuffle-tests'])\r\n  end)\r\n\r\n  it('specify sort flags', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--sort-files', '--sort-tests' })\r\n    assert.is_nil(args.sort)\r\n    assert.is_true(args['sort-files'])\r\n    assert.is_true(args['sort-tests'])\r\n  end)\r\n\r\n  it('specify sort flag only', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--sort', })\r\n    assert.is_true(args.sort)\r\n    assert.is_true(args['sort-files'])\r\n    assert.is_true(args['sort-tests'])\r\n  end)\r\n\r\n  it('specify sort no-flags', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--no-sort', '--no-sort-files', '--no-sort-tests' })\r\n    assert.is_false(args.sort)\r\n    assert.is_false(args['sort-files'])\r\n    assert.is_false(args['sort-tests'])\r\n  end)\r\n\r\n  it('specify no-sort flag only', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--no-sort', })\r\n    assert.is_false(args.sort)\r\n    assert.is_false(args['sort-files'])\r\n    assert.is_false(args['sort-tests'])\r\n  end)\r\n\r\n  it('specify sort and no-sort flags', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--sort', '--no-sort-files' })\r\n    assert.is_true(args.sort)\r\n    assert.is_false(args['sort-files'])\r\n    assert.is_true(args['sort-tests'])\r\n  end)\r\n\r\n  it('specify ROOT arg and --pattern', function()\r\n    local cli = require 'busted.modules.cli'({ standalone = false })\r\n    local args = cli:parse({ '-p', 'match_files', 'root_is_here' })\r\n    assert.is_same({'root_is_here'}, args.ROOT)\r\n    assert.is_same({'match_files'}, args.p)\r\n    assert.is_same({'match_files'}, args.pattern)\r\n  end)\r\n\r\n  it('specify ROOT arg and --exclude-pattern', function()\r\n    local cli = require 'busted.modules.cli'({ standalone = false })\r\n    local args = cli:parse({ '--exclude-pattern', 'exclude_files', 'root_is_here' })\r\n    assert.is_same({'root_is_here'}, args.ROOT)\r\n    assert.is_same({'exclude_files'}, args['exclude-pattern'])\r\n  end)\r\n\r\n  it('specify multiple root paths', function()\r\n    local cli = require 'busted.modules.cli'({ standalone = false })\r\n    local args = cli:parse({'root1_path', 'root2_path', 'root3_path'})\r\n    assert.is_same({'root1_path', 'root2_path', 'root3_path'}, args.ROOT)\r\n  end)\r\n\r\n  it('specify --directory', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--directory=/path/to/dir' })\r\n    assert.is_equal(normpath('/path/to/dir'), args.C)\r\n    assert.is_equal(normpath('/path/to/dir'), args.directory)\r\n  end)\r\n\r\n  it('specify --directory multiple times', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--directory=/path/to', '-C', 'dir', '--directory=subdir' })\r\n    assert.is_equal(normpath('/path/to/dir/subdir'), args.C)\r\n    assert.is_equal(normpath('/path/to/dir/subdir'), args.directory)\r\n  end)\r\n\r\n  it('specify --directory multiple times with multiple roots', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--directory=/path/to', '-C', 'dir', '--directory=/new/path' })\r\n    assert.is_equal(normpath('/new/path'), args.C)\r\n    assert.is_equal(normpath('/new/path'), args.directory)\r\n  end)\r\n\r\n  it('specify --run', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--run=task' })\r\n    assert.is_equal('task', args.r)\r\n    assert.is_equal('task', args.run)\r\n  end)\r\n\r\n  it('specify --lang', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--lang=fr' })\r\n    assert.is_equal('fr', args.lang)\r\n  end)\r\n\r\n  it('specify --repeat', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--repeat=23' })\r\n    assert.is_equal(23, args['repeat'])\r\n  end)\r\n\r\n  it('specify output library', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '-o', 'output_handler', '-Xoutput', '--flag,-f', '-Xoutput', '--opt=val' })\r\n    assert.is_equal('output_handler', args.o)\r\n    assert.is_equal('output_handler', args.output)\r\n    assert.is_same({'--flag', '-f', '--opt=val'}, args.Xoutput)\r\n  end)\r\n\r\n  it('specify helper script', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--helper=helper_script', '-Xhelper', '--flag,-f', '-Xhelper', '--opt=val'  })\r\n    assert.is_equal('helper_script', args.helper)\r\n    assert.is_same({'--flag', '-f', '--opt=val'}, args.Xhelper)\r\n  end)\r\n\r\n  it('specify --tags and --exclude-tags', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--tags=tag1,tag2', '-t', 'tag3', '--exclude-tags=etag1', '--exclude-tags=etag2,etag3' })\r\n    assert.is_same({'tag1', 'tag2', 'tag3'}, args.t)\r\n    assert.is_same({'tag1', 'tag2', 'tag3'}, args.tags)\r\n    assert.is_same({'etag1', 'etag2', 'etag3'}, args['exclude-tags'])\r\n  end)\r\n\r\n  it('specify --filter and --filter-out', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--filter=_filt', '--filter-out=_filterout' })\r\n    assert.is_same({'_filt'}, args.filter)\r\n    assert.is_same({'_filterout'}, args['filter-out'])\r\n  end)\r\n\r\n  it('specify --filter and --filter-out multiple times', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--filter=_filt1', '--filter=_filt2', '--filter-out=_filterout1', '--filter-out=_filterout2' })\r\n    assert.is_same({'_filt1', '_filt2'}, args.filter)\r\n    assert.is_same({'_filterout1', '_filterout2'}, args['filter-out'])\r\n  end)\r\n\r\n  it('specify --loaders', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--loaders=load1,load2', '--loaders=load3' })\r\n    assert.is_same({'load1', 'load2', 'load3'}, args.loaders)\r\n  end)\r\n\r\n  it('specify --lpath', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '-C', '/root', '--lpath=./path1/?.lua', '-m', './path2/?.lua' })\r\n    assert.is_equal('./path1/?.lua;./path2/?.lua', args.m)\r\n    assert.is_equal('./path1/?.lua;./path2/?.lua', args.lpath)\r\n  end)\r\n\r\n  it('specify --cpath', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '-C', '/croot', '--lpath=./path1/?.so', '-m', './path2/?.so' })\r\n    assert.is_equal('./path1/?.so;./path2/?.so', args.m)\r\n    assert.is_equal('./path1/?.so;./path2/?.so', args.lpath)\r\n  end)\r\n\r\n  it('specify -e statement', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '-e', 'statement1', '-e', 'statement2' })\r\n    assert.is_same({'statement1', 'statement2'}, args.e)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 228,
    "text": "it('default options', function()\r\n    local defaultOutput = 'default_output_handler'\r\n    local lpath = './src/?.lua;./src/?/?.lua;./src/?/init.lua'\r\n    local cpath = path.is_windows and './csrc/?.dll;./csrc/?/?.dll;' or './csrc/?.so;./csrc/?/?.so;'\r\n    local cli = require 'busted.modules.cli'({ standalone = false, output = defaultOutput })\r\n    local args = cli:parse({})\r\n    assert.is_equal(defaultOutput, args.o)\r\n    assert.is_equal(defaultOutput, args.output)\r\n    assert.is_same({'spec'}, args.ROOT)\r\n    assert.is_equal('./', args.C)\r\n    assert.is_equal('./', args.directory)\r\n    assert.is_equal('/dev/urandom or os.time()', args.seed)\r\n    assert.is_equal('en', args.lang)\r\n    assert.is_equal(1, args['repeat'])\r\n    assert.is_equal(lpath, args.m)\r\n    assert.is_equal(lpath, args.lpath)\r\n    assert.is_equal(cpath, args.cpath)\r\n    assert.is_true(args['auto-insulate'])\r\n    assert.is_true(args.k)\r\n    assert.is_true(args['keep-going'])\r\n    assert.is_true(args.R)\r\n    assert.is_true(args['recursive'])\r\n    assert.is_false(args.c)\r\n    assert.is_false(args.coverage)\r\n    assert.is_false(args.version)\r\n    assert.is_false(args.v)\r\n    assert.is_false(args.verbose)\r\n    assert.is_false(args.l)\r\n    assert.is_false(args.list)\r\n    assert.is_false(args.lazy)\r\n    assert.is_false(args.s)\r\n    assert.is_false(args['enable-sound'])\r\n    assert.is_false(args['suppress-pending'])\r\n    assert.is_false(args['defer-print'])\r\n    assert.is_nil(args.f)\r\n    assert.is_nil(args['config-file'])\r\n    assert.is_nil(args.shuffle)\r\n    assert.is_nil(args['shuffle-files'])\r\n    assert.is_nil(args['shuffle-tests'])\r\n    assert.is_nil(args.sort)\r\n    assert.is_nil(args['sort-files'])\r\n    assert.is_nil(args['sort-tests'])\r\n    assert.is_nil(args.r)\r\n    assert.is_nil(args.run)\r\n    assert.is_nil(args.helper)\r\n    assert.is_same({}, args.e)\r\n    assert.is_same({'_spec'}, args.p)\r\n    assert.is_same({'_spec'}, args.pattern)\r\n    assert.is_same({}, args['exclude-pattern'])\r\n    assert.is_same({}, args.t)\r\n    assert.is_same({}, args.tags)\r\n    assert.is_same({}, args['exclude-tags'])\r\n    assert.is_same({}, args.filter)\r\n    assert.is_same({}, args['filter-out'])\r\n    assert.is_same({}, args.Xoutput)\r\n    assert.is_same({}, args.Xhelper)\r\n    assert.is_same({'lua', 'moonscript'}, args.loaders)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 229,
    "text": "it('standalone options disables ROOT and --pattern', function()\r\n    local cli = require 'busted.modules.cli'({ standalone = true })\r\n    local args = cli:parse({})\r\n    assert.is_nil(args.ROOT)\r\n    assert.is_same({}, args.p)\r\n    assert.is_same({}, args.pattern)\r\n    assert.is_same({}, args['exclude-pattern'])\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 230,
    "text": "it('specify flags', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '-v', '--version', '--coverage', '--defer-print', '--suppress-pending' })\r\n    assert.is_true(args.v)\r\n    assert.is_true(args.verbose)\r\n    assert.is_true(args.version)\r\n    assert.is_true(args.coverage)\r\n    assert.is_true(args['defer-print'])\r\n    assert.is_true(args['suppress-pending'])\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 231,
    "text": "it('specify more flags', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '-s', '--list', '-k', '--no-keep-going', '-R', '--no-recursive' })\r\n    assert.is_true(args.s)\r\n    assert.is_true(args['enable-sound'])\r\n    assert.is_true(args.l)\r\n    assert.is_true(args.list)\r\n    assert.is_false(args['keep-going'])\r\n    assert.is_false(args['recursive'])\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 232,
    "text": "it('specify even more flags', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--lazy', '--no-auto-insulate', '-k', '-R' })\r\n    assert.is_true(args.lazy)\r\n    assert.is_false(args['auto-insulate'])\r\n    assert.is_true(args.k)\r\n    assert.is_true(args['keep-going'])\r\n    assert.is_true(args.R)\r\n    assert.is_true(args.recursive)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 233,
    "text": "it('specify no-flags', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--no-lazy', '--no-auto-insulate', '--no-coverage', '--no-verbose' })\r\n    assert.is_false(args.lazy)\r\n    assert.is_false(args['auto-insulate'])\r\n    assert.is_false(args.coverage)\r\n    assert.is_false(args.verbose)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 234,
    "text": "it('specify more no-flags', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--no-enable-sound', '--no-suppress-pending', '--no-defer-print' })\r\n    assert.is_false(args['enable-sound'])\r\n    assert.is_false(args['suppress-pending'])\r\n    assert.is_false(args['defer-print'])\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 235,
    "text": "it('specify shuffle flags', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--shuffle-files', '--shuffle-tests' })\r\n    assert.is_nil(args.shuffle)\r\n    assert.is_true(args['shuffle-files'])\r\n    assert.is_true(args['shuffle-tests'])\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 236,
    "text": "it('specify shuffle flag only', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--shuffle', })\r\n    assert.is_true(args.shuffle)\r\n    assert.is_true(args['shuffle-files'])\r\n    assert.is_true(args['shuffle-tests'])\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 237,
    "text": "it('specify shuffle no-flags', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--no-shuffle', '--no-shuffle-files', '--no-shuffle-tests' })\r\n    assert.is_false(args.shuffle)\r\n    assert.is_false(args['shuffle-files'])\r\n    assert.is_false(args['shuffle-tests'])\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 238,
    "text": "it('specify no-shuffle flag only', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--no-shuffle', })\r\n    assert.is_false(args.shuffle)\r\n    assert.is_false(args['shuffle-files'])\r\n    assert.is_false(args['shuffle-tests'])\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 239,
    "text": "it('specify shuffle and no-shuffle flags', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--shuffle', '--no-shuffle-files' })\r\n    assert.is_true(args.shuffle)\r\n    assert.is_false(args['shuffle-files'])\r\n    assert.is_true(args['shuffle-tests'])\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 240,
    "text": "it('specify sort flags', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--sort-files', '--sort-tests' })\r\n    assert.is_nil(args.sort)\r\n    assert.is_true(args['sort-files'])\r\n    assert.is_true(args['sort-tests'])\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 241,
    "text": "it('specify sort flag only', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--sort', })\r\n    assert.is_true(args.sort)\r\n    assert.is_true(args['sort-files'])\r\n    assert.is_true(args['sort-tests'])\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 242,
    "text": "it('specify sort no-flags', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--no-sort', '--no-sort-files', '--no-sort-tests' })\r\n    assert.is_false(args.sort)\r\n    assert.is_false(args['sort-files'])\r\n    assert.is_false(args['sort-tests'])\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 243,
    "text": "it('specify no-sort flag only', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--no-sort', })\r\n    assert.is_false(args.sort)\r\n    assert.is_false(args['sort-files'])\r\n    assert.is_false(args['sort-tests'])\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 244,
    "text": "it('specify sort and no-sort flags', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--sort', '--no-sort-files' })\r\n    assert.is_true(args.sort)\r\n    assert.is_false(args['sort-files'])\r\n    assert.is_true(args['sort-tests'])\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 245,
    "text": "it('specify ROOT arg and --pattern', function()\r\n    local cli = require 'busted.modules.cli'({ standalone = false })\r\n    local args = cli:parse({ '-p', 'match_files', 'root_is_here' })\r\n    assert.is_same({'root_is_here'}, args.ROOT)\r\n    assert.is_same({'match_files'}, args.p)\r\n    assert.is_same({'match_files'}, args.pattern)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 246,
    "text": "it('specify ROOT arg and --exclude-pattern', function()\r\n    local cli = require 'busted.modules.cli'({ standalone = false })\r\n    local args = cli:parse({ '--exclude-pattern', 'exclude_files', 'root_is_here' })\r\n    assert.is_same({'root_is_here'}, args.ROOT)\r\n    assert.is_same({'exclude_files'}, args['exclude-pattern'])\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 247,
    "text": "it('specify multiple root paths', function()\r\n    local cli = require 'busted.modules.cli'({ standalone = false })\r\n    local args = cli:parse({'root1_path', 'root2_path', 'root3_path'})\r\n    assert.is_same({'root1_path', 'root2_path', 'root3_path'}, args.ROOT)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 248,
    "text": "it('specify --directory', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--directory=/path/to/dir' })\r\n    assert.is_equal(normpath('/path/to/dir'), args.C)\r\n    assert.is_equal(normpath('/path/to/dir'), args.directory)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 249,
    "text": "it('specify --directory multiple times', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--directory=/path/to', '-C', 'dir', '--directory=subdir' })\r\n    assert.is_equal(normpath('/path/to/dir/subdir'), args.C)\r\n    assert.is_equal(normpath('/path/to/dir/subdir'), args.directory)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 250,
    "text": "it('specify --directory multiple times with multiple roots', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--directory=/path/to', '-C', 'dir', '--directory=/new/path' })\r\n    assert.is_equal(normpath('/new/path'), args.C)\r\n    assert.is_equal(normpath('/new/path'), args.directory)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 251,
    "text": "it('specify --run', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--run=task' })\r\n    assert.is_equal('task', args.r)\r\n    assert.is_equal('task', args.run)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 252,
    "text": "it('specify --lang', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--lang=fr' })\r\n    assert.is_equal('fr', args.lang)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 253,
    "text": "it('specify --repeat', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--repeat=23' })\r\n    assert.is_equal(23, args['repeat'])\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 254,
    "text": "it('specify output library', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '-o', 'output_handler', '-Xoutput', '--flag,-f', '-Xoutput', '--opt=val' })\r\n    assert.is_equal('output_handler', args.o)\r\n    assert.is_equal('output_handler', args.output)\r\n    assert.is_same({'--flag', '-f', '--opt=val'}, args.Xoutput)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 255,
    "text": "it('specify helper script', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--helper=helper_script', '-Xhelper', '--flag,-f', '-Xhelper', '--opt=val'  })\r\n    assert.is_equal('helper_script', args.helper)\r\n    assert.is_same({'--flag', '-f', '--opt=val'}, args.Xhelper)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 256,
    "text": "it('specify --tags and --exclude-tags', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--tags=tag1,tag2', '-t', 'tag3', '--exclude-tags=etag1', '--exclude-tags=etag2,etag3' })\r\n    assert.is_same({'tag1', 'tag2', 'tag3'}, args.t)\r\n    assert.is_same({'tag1', 'tag2', 'tag3'}, args.tags)\r\n    assert.is_same({'etag1', 'etag2', 'etag3'}, args['exclude-tags'])\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 257,
    "text": "it('specify --filter and --filter-out', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--filter=_filt', '--filter-out=_filterout' })\r\n    assert.is_same({'_filt'}, args.filter)\r\n    assert.is_same({'_filterout'}, args['filter-out'])\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 258,
    "text": "it('specify --filter and --filter-out multiple times', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--filter=_filt1', '--filter=_filt2', '--filter-out=_filterout1', '--filter-out=_filterout2' })\r\n    assert.is_same({'_filt1', '_filt2'}, args.filter)\r\n    assert.is_same({'_filterout1', '_filterout2'}, args['filter-out'])\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 259,
    "text": "it('specify --loaders', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '--loaders=load1,load2', '--loaders=load3' })\r\n    assert.is_same({'load1', 'load2', 'load3'}, args.loaders)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 260,
    "text": "it('specify --lpath', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '-C', '/root', '--lpath=./path1/?.lua', '-m', './path2/?.lua' })\r\n    assert.is_equal('./path1/?.lua;./path2/?.lua', args.m)\r\n    assert.is_equal('./path1/?.lua;./path2/?.lua', args.lpath)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 261,
    "text": "it('specify --cpath', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '-C', '/croot', '--lpath=./path1/?.so', '-m', './path2/?.so' })\r\n    assert.is_equal('./path1/?.so;./path2/?.so', args.m)\r\n    assert.is_equal('./path1/?.so;./path2/?.so', args.lpath)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 262,
    "text": "it('specify -e statement', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    local args = cli:parse({ '-e', 'statement1', '-e', 'statement2' })\r\n    assert.is_same({'statement1', 'statement2'}, args.e)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 263,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 264,
    "text": "function()\r\n    local defaultOutput = 'default_output_handler'\r\n    local lpath = './src/?.lua;./src/?/?.lua;./src/?/init.lua'\r\n    local cpath = path.is_windows and './csrc/?.dll;./csrc/?/?.dll;' or './csrc/?.so;./csrc/?/?.so;'\r\n    local cli = require 'busted.modules.cli'({ standalone = false, output = defaultOutput })\r\n    local args = cli:parse({ '--directory=spec/.hidden' })\r\n    assert.is_equal(defaultOutput, args.o)\r\n    assert.is_equal(defaultOutput, args.output)\r\n    assert.is_same({'specs'}, args.ROOT)\r\n    assert.is_equal(normpath('spec/.hidden'), args.C)\r\n    assert.is_equal(normpath('spec/.hidden'), args.directory)\r\n    assert.is_equal('/dev/urandom or os.time()', args.seed)\r\n    assert.is_equal('en', args.lang)\r\n    assert.is_equal(1, args['repeat'])\r\n    assert.is_equal(lpath, args.m)\r\n    assert.is_equal(lpath, args.lpath)\r\n    assert.is_equal(cpath, args.cpath)\r\n    assert.is_true(args['auto-insulate'])\r\n    assert.is_true(args.k)\r\n    assert.is_true(args['keep-going'])\r\n    assert.is_true(args.R)\r\n    assert.is_true(args['recursive'])\r\n    assert.is_false(args.c)\r\n    assert.is_false(args.coverage)\r\n    assert.is_false(args.version)\r\n    assert.is_false(args.v)\r\n    assert.is_false(args.verbose)\r\n    assert.is_false(args.l)\r\n    assert.is_false(args.list)\r\n    assert.is_false(args.lazy)\r\n    assert.is_false(args.s)\r\n    assert.is_false(args['enable-sound'])\r\n    assert.is_false(args['suppress-pending'])\r\n    assert.is_false(args['defer-print'])\r\n    assert.is_nil(args.f)\r\n    assert.is_nil(args['config-file'])\r\n    assert.is_nil(args.shuffle)\r\n    assert.is_nil(args['shuffle-files'])\r\n    assert.is_nil(args['shuffle-tests'])\r\n    assert.is_nil(args.sort)\r\n    assert.is_nil(args['sort-files'])\r\n    assert.is_nil(args['sort-tests'])\r\n    assert.is_nil(args.r)\r\n    assert.is_nil(args.run)\r\n    assert.is_nil(args.helper)\r\n    assert.is_same({}, args.e)\r\n    assert.is_same({'_spec%.lua$'}, args.p)\r\n    assert.is_same({'_spec%.lua$'}, args.pattern)\r\n    assert.is_same({'_exclude'}, args['exclude-pattern'])\r\n    assert.is_same({'tag11', 'tag22', 'tag33'}, args.t)\r\n    assert.is_same({'tag11', 'tag22', 'tag33'}, args.tags)\r\n    assert.is_same({'etag11', 'etag22', 'etag33'}, args['exclude-tags'])\r\n    assert.is_same({'filt'}, args.filter)\r\n    assert.is_same({'filt-out'}, args['filter-out'])\r\n    assert.is_same({'-f', '--flag'}, args.Xoutput)\r\n    assert.is_same({'-v', '--verbose'}, args.Xhelper)\r\n    assert.is_same({'terra', 'moonscript'}, args.loaders)\r\n  end",
    "type": "function"
  }, {
    "id": 265,
    "text": "local args = cli:parse({ '--directory=spec/.hidden' })",
    "type": "statement:localassign"
  }, {
    "id": 266,
    "text": "assert.is_same({'specs'}, args.ROOT)",
    "type": "statement:functioncall"
  }, {
    "id": 267,
    "text": "assert.is_equal(normpath('spec/.hidden'), args.C)",
    "type": "statement:functioncall"
  }, {
    "id": 268,
    "text": "assert.is_equal(normpath('spec/.hidden'), args.directory)",
    "type": "statement:functioncall"
  }, {
    "id": 269,
    "text": "assert.is_same({'_spec%.lua$'}, args.p)",
    "type": "statement:functioncall"
  }, {
    "id": 270,
    "text": "assert.is_same({'_spec%.lua$'}, args.pattern)",
    "type": "statement:functioncall"
  }, {
    "id": 271,
    "text": "assert.is_same({'_exclude'}, args['exclude-pattern'])",
    "type": "statement:functioncall"
  }, {
    "id": 272,
    "text": "assert.is_same({'tag11', 'tag22', 'tag33'}, args.t)",
    "type": "statement:functioncall"
  }, {
    "id": 273,
    "text": "assert.is_same({'tag11', 'tag22', 'tag33'}, args.tags)",
    "type": "statement:functioncall"
  }, {
    "id": 274,
    "text": "assert.is_same({'etag11', 'etag22', 'etag33'}, args['exclude-tags'])",
    "type": "statement:functioncall"
  }, {
    "id": 275,
    "text": "assert.is_same({'filt'}, args.filter)",
    "type": "statement:functioncall"
  }, {
    "id": 276,
    "text": "assert.is_same({'filt-out'}, args['filter-out'])",
    "type": "statement:functioncall"
  }, {
    "id": 277,
    "text": "assert.is_same({'-f', '--flag'}, args.Xoutput)",
    "type": "statement:functioncall"
  }, {
    "id": 278,
    "text": "assert.is_same({'-v', '--verbose'}, args.Xhelper)",
    "type": "statement:functioncall"
  }, {
    "id": 279,
    "text": "assert.is_same({'terra', 'moonscript'}, args.loaders)",
    "type": "statement:functioncall"
  }, {
    "id": 280,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 281,
    "text": "function()\r\n    local defaultOutput = 'default_output_handler'\r\n    local lpath = './src/?.lua;./src/?/?.lua;./src/?/init.lua'\r\n    local cpath = path.is_windows and './csrc/?.dll;./csrc/?/?.dll;' or './csrc/?.so;./csrc/?/?.so;'\r\n    local cli = require 'busted.modules.cli'({ standalone = false, output = defaultOutput })\r\n    local args = cli:parse({ '--config-file', 'spec/.hidden/.busted' })\r\n    assert.is_equal(defaultOutput, args.o)\r\n    assert.is_equal(defaultOutput, args.output)\r\n    assert.is_same({'specs'}, args.ROOT)\r\n    assert.is_equal('./', args.C)\r\n    assert.is_equal('./', args.directory)\r\n    assert.is_equal('spec/.hidden/.busted', args.f)\r\n    assert.is_equal('spec/.hidden/.busted', args['config-file'])\r\n    assert.is_equal('/dev/urandom or os.time()', args.seed)\r\n    assert.is_equal('en', args.lang)\r\n    assert.is_equal(1, args['repeat'])\r\n    assert.is_equal(lpath, args.m)\r\n    assert.is_equal(lpath, args.lpath)\r\n    assert.is_equal(cpath, args.cpath)\r\n    assert.is_true(args['auto-insulate'])\r\n    assert.is_true(args.k)\r\n    assert.is_true(args['keep-going'])\r\n    assert.is_true(args.R)\r\n    assert.is_true(args['recursive'])\r\n    assert.is_false(args.c)\r\n    assert.is_false(args.coverage)\r\n    assert.is_false(args.version)\r\n    assert.is_false(args.v)\r\n    assert.is_false(args.verbose)\r\n    assert.is_false(args.l)\r\n    assert.is_false(args.list)\r\n    assert.is_false(args.lazy)\r\n    assert.is_false(args.s)\r\n    assert.is_false(args['enable-sound'])\r\n    assert.is_false(args['suppress-pending'])\r\n    assert.is_false(args['defer-print'])\r\n    assert.is_nil(args.shuffle)\r\n    assert.is_nil(args['shuffle-files'])\r\n    assert.is_nil(args['shuffle-tests'])\r\n    assert.is_nil(args.sort)\r\n    assert.is_nil(args['sort-files'])\r\n    assert.is_nil(args['sort-tests'])\r\n    assert.is_nil(args.r)\r\n    assert.is_nil(args.run)\r\n    assert.is_nil(args.helper)\r\n    assert.is_same({'_spec%.lua$'}, args.p)\r\n    assert.is_same({'_spec%.lua$'}, args.pattern)\r\n    assert.is_same({'_exclude'}, args['exclude-pattern'])\r\n    assert.is_same({'tag11', 'tag22', 'tag33'}, args.t)\r\n    assert.is_same({'tag11', 'tag22', 'tag33'}, args.tags)\r\n    assert.is_same({'etag11', 'etag22', 'etag33'}, args['exclude-tags'])\r\n    assert.is_same({'filt'}, args.filter)\r\n    assert.is_same({'filt-out'}, args['filter-out'])\r\n    assert.is_same({'-f', '--flag'}, args.Xoutput)\r\n    assert.is_same({'-v', '--verbose'}, args.Xhelper)\r\n    assert.is_same({'terra', 'moonscript'}, args.loaders)\r\n  end",
    "type": "function"
  }, {
    "id": 282,
    "text": "local args = cli:parse({ '--config-file', 'spec/.hidden/.busted' })",
    "type": "statement:localassign"
  }, {
    "id": 283,
    "text": "assert.is_equal('spec/.hidden/.busted', args.f)",
    "type": "statement:functioncall"
  }, {
    "id": 284,
    "text": "assert.is_equal('spec/.hidden/.busted', args['config-file'])",
    "type": "statement:functioncall"
  }, {
    "id": 285,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 286,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'({ standalone = false, output = defaultOutput })\r\n    local args = cli:parse({ '--directory=spec/.hidden', '--run=test' })\r\n    assert.is_same({'_test1%.lua$', '_test2%.lua$'}, args.pattern)\r\n    assert.is_same({'_exclude1', '_exclude2'}, args['exclude-pattern'])\r\n    assert.is_same({'filt1', 'filt2'}, args.filter)\r\n    assert.is_same({'filt1-out', 'filt2-out'}, args['filter-out'])\r\n    assert.is_same({'tests'}, args.ROOT)\r\n    assert.is_same({'test1', 'test2', 'test3'}, args.tags)\r\n    assert.is_same({'etest1', 'etest2', 'etest3'}, args['exclude-tags'])\r\n    assert.is_same({'-s','--sound'}, args.Xoutput)\r\n    assert.is_same({'-t', '--print'}, args.Xhelper)\r\n    assert.is_same({'lua', 'terra'}, args.loaders)\r\n  end",
    "type": "function"
  }, {
    "id": 287,
    "text": "local args = cli:parse({ '--directory=spec/.hidden', '--run=test' })",
    "type": "statement:localassign"
  }, {
    "id": 288,
    "text": "assert.is_same({'_test1%.lua$', '_test2%.lua$'}, args.pattern)",
    "type": "statement:functioncall"
  }, {
    "id": 289,
    "text": "assert.is_same({'_exclude1', '_exclude2'}, args['exclude-pattern'])",
    "type": "statement:functioncall"
  }, {
    "id": 290,
    "text": "assert.is_same({'filt1', 'filt2'}, args.filter)",
    "type": "statement:functioncall"
  }, {
    "id": 291,
    "text": "assert.is_same({'filt1-out', 'filt2-out'}, args['filter-out'])",
    "type": "statement:functioncall"
  }, {
    "id": 292,
    "text": "assert.is_same({'tests'}, args.ROOT)",
    "type": "statement:functioncall"
  }, {
    "id": 293,
    "text": "assert.is_same({'test1', 'test2', 'test3'}, args.tags)",
    "type": "statement:functioncall"
  }, {
    "id": 294,
    "text": "assert.is_same({'etest1', 'etest2', 'etest3'}, args['exclude-tags'])",
    "type": "statement:functioncall"
  }, {
    "id": 295,
    "text": "assert.is_same({'-s','--sound'}, args.Xoutput)",
    "type": "statement:functioncall"
  }, {
    "id": 296,
    "text": "assert.is_same({'-t', '--print'}, args.Xhelper)",
    "type": "statement:functioncall"
  }, {
    "id": 297,
    "text": "assert.is_same({'lua', 'terra'}, args.loaders)",
    "type": "statement:functioncall"
  }, {
    "id": 298,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 299,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'({ standalone = false, output = defaultOutput })\r\n    local args = cli:parse({ '--directory=spec/.hidden', '--run=test', '-t', 'tag1', '-p', 'patt', '--filter=fin', '--filter-out=fout', '--exclude-pattern', '', '--loaders=moonscript' })\r\n    assert.is_same({'patt'}, args.pattern)\r\n    assert.is_same({''}, args['exclude-pattern'])\r\n    assert.is_same({'fin'}, args.filter)\r\n    assert.is_same({'fout'}, args['filter-out'])\r\n    assert.is_same({'tag1'}, args.tags)\r\n    assert.is_same({'etest1', 'etest2', 'etest3'}, args['exclude-tags'])\r\n    assert.is_same({'-s','--sound'}, args.Xoutput)\r\n    assert.is_same({'-t', '--print'}, args.Xhelper)\r\n    assert.is_same({'moonscript'}, args.loaders)\r\n  end",
    "type": "function"
  }, {
    "id": 300,
    "text": "local args = cli:parse({ '--directory=spec/.hidden', '--run=test', '-t', 'tag1', '-p', 'patt', '--filter=fin', '--filter-out=fout', '--exclude-pattern', '', '--loaders=moonscript' })",
    "type": "statement:localassign"
  }, {
    "id": 301,
    "text": "assert.is_same({'patt'}, args.pattern)",
    "type": "statement:functioncall"
  }, {
    "id": 302,
    "text": "assert.is_same({''}, args['exclude-pattern'])",
    "type": "statement:functioncall"
  }, {
    "id": 303,
    "text": "assert.is_same({'fin'}, args.filter)",
    "type": "statement:functioncall"
  }, {
    "id": 304,
    "text": "assert.is_same({'fout'}, args['filter-out'])",
    "type": "statement:functioncall"
  }, {
    "id": 305,
    "text": "assert.is_same({'tag1'}, args.tags)",
    "type": "statement:functioncall"
  }, {
    "id": 306,
    "text": "assert.is_same({'moonscript'}, args.loaders)",
    "type": "statement:functioncall"
  }, {
    "id": 307,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 308,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'({ standalone = false, output = defaultOutput })\r\n    cli:set_name('app')\r\n    local args, err = cli:parse({ '--config-file=spec/.hidden/.busted_bad', '--run=test' })\r\n    assert.is_nil(args)\r\n    assert.has_match('^app: error: spec/.hidden/.busted_bad:8: ', err)\r\n    assert.has_match(\"'doesnotexist'\", err)\r\n    assert.has_match(\"a nil value\", err)\r\n  end",
    "type": "function"
  }, {
    "id": 309,
    "text": "cli:set_name('app')",
    "type": "statement:functioncall"
  }, {
    "id": 310,
    "text": "local args, err = cli:parse({ '--config-file=spec/.hidden/.busted_bad', '--run=test' })",
    "type": "statement:localassign"
  }, {
    "id": 311,
    "text": "assert.is_nil(args)",
    "type": "statement:functioncall"
  }, {
    "id": 312,
    "text": "assert.has_match('^app: error: spec/.hidden/.busted_bad:8: ', err)",
    "type": "statement:functioncall"
  }, {
    "id": 313,
    "text": "assert.has_match(\"'doesnotexist'\", err)",
    "type": "statement:functioncall"
  }, {
    "id": 314,
    "text": "assert.has_match(\"a nil value\", err)",
    "type": "statement:functioncall"
  }, {
    "id": 315,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 316,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'({ standalone = false, output = defaultOutput })\r\n    cli:set_name('myapp')\r\n    local args, err = cli:parse({ '--config-file=spec/.hidden/.busted_empty' })\r\n    assert.is_nil(args)\r\n    assert.is_equal('myapp: error: .busted file does not return a table.', err)\r\n  end",
    "type": "function"
  }, {
    "id": 317,
    "text": "cli:set_name('myapp')",
    "type": "statement:functioncall"
  }, {
    "id": 318,
    "text": "local args, err = cli:parse({ '--config-file=spec/.hidden/.busted_empty' })",
    "type": "statement:localassign"
  }, {
    "id": 319,
    "text": "assert.is_equal('myapp: error: .busted file does not return a table.', err)",
    "type": "statement:functioncall"
  }, {
    "id": 320,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 321,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'({ standalone = false, output = defaultOutput })\r\n    cli:set_name('appname')\r\n    local args, err = cli:parse({ '--config-file=spec/.hidden/.busted', '--run=invalid' })\r\n    assert.is_nil(args)\r\n    assert.is_equal('appname: error: Task `invalid` not found, or not a table.', err)\r\n  end",
    "type": "function"
  }, {
    "id": 322,
    "text": "cli:set_name('appname')",
    "type": "statement:functioncall"
  }, {
    "id": 323,
    "text": "local args, err = cli:parse({ '--config-file=spec/.hidden/.busted', '--run=invalid' })",
    "type": "statement:localassign"
  }, {
    "id": 324,
    "text": "assert.is_equal('appname: error: Task `invalid` not found, or not a table.', err)",
    "type": "statement:functioncall"
  }, {
    "id": 325,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 326,
    "text": "function()\r\n  it('default options', function()\r\n    local defaultOutput = 'default_output_handler'\r\n    local lpath = './src/?.lua;./src/?/?.lua;./src/?/init.lua'\r\n    local cpath = path.is_windows and './csrc/?.dll;./csrc/?/?.dll;' or './csrc/?.so;./csrc/?/?.so;'\r\n    local cli = require 'busted.modules.cli'({ standalone = false, output = defaultOutput })\r\n    local args = cli:parse({ '--directory=spec/.hidden' })\r\n    assert.is_equal(defaultOutput, args.o)\r\n    assert.is_equal(defaultOutput, args.output)\r\n    assert.is_same({'specs'}, args.ROOT)\r\n    assert.is_equal(normpath('spec/.hidden'), args.C)\r\n    assert.is_equal(normpath('spec/.hidden'), args.directory)\r\n    assert.is_equal('/dev/urandom or os.time()', args.seed)\r\n    assert.is_equal('en', args.lang)\r\n    assert.is_equal(1, args['repeat'])\r\n    assert.is_equal(lpath, args.m)\r\n    assert.is_equal(lpath, args.lpath)\r\n    assert.is_equal(cpath, args.cpath)\r\n    assert.is_true(args['auto-insulate'])\r\n    assert.is_true(args.k)\r\n    assert.is_true(args['keep-going'])\r\n    assert.is_true(args.R)\r\n    assert.is_true(args['recursive'])\r\n    assert.is_false(args.c)\r\n    assert.is_false(args.coverage)\r\n    assert.is_false(args.version)\r\n    assert.is_false(args.v)\r\n    assert.is_false(args.verbose)\r\n    assert.is_false(args.l)\r\n    assert.is_false(args.list)\r\n    assert.is_false(args.lazy)\r\n    assert.is_false(args.s)\r\n    assert.is_false(args['enable-sound'])\r\n    assert.is_false(args['suppress-pending'])\r\n    assert.is_false(args['defer-print'])\r\n    assert.is_nil(args.f)\r\n    assert.is_nil(args['config-file'])\r\n    assert.is_nil(args.shuffle)\r\n    assert.is_nil(args['shuffle-files'])\r\n    assert.is_nil(args['shuffle-tests'])\r\n    assert.is_nil(args.sort)\r\n    assert.is_nil(args['sort-files'])\r\n    assert.is_nil(args['sort-tests'])\r\n    assert.is_nil(args.r)\r\n    assert.is_nil(args.run)\r\n    assert.is_nil(args.helper)\r\n    assert.is_same({}, args.e)\r\n    assert.is_same({'_spec%.lua$'}, args.p)\r\n    assert.is_same({'_spec%.lua$'}, args.pattern)\r\n    assert.is_same({'_exclude'}, args['exclude-pattern'])\r\n    assert.is_same({'tag11', 'tag22', 'tag33'}, args.t)\r\n    assert.is_same({'tag11', 'tag22', 'tag33'}, args.tags)\r\n    assert.is_same({'etag11', 'etag22', 'etag33'}, args['exclude-tags'])\r\n    assert.is_same({'filt'}, args.filter)\r\n    assert.is_same({'filt-out'}, args['filter-out'])\r\n    assert.is_same({'-f', '--flag'}, args.Xoutput)\r\n    assert.is_same({'-v', '--verbose'}, args.Xhelper)\r\n    assert.is_same({'terra', 'moonscript'}, args.loaders)\r\n  end)\r\n\r\n  it('default options with --config-file option', function()\r\n    local defaultOutput = 'default_output_handler'\r\n    local lpath = './src/?.lua;./src/?/?.lua;./src/?/init.lua'\r\n    local cpath = path.is_windows and './csrc/?.dll;./csrc/?/?.dll;' or './csrc/?.so;./csrc/?/?.so;'\r\n    local cli = require 'busted.modules.cli'({ standalone = false, output = defaultOutput })\r\n    local args = cli:parse({ '--config-file', 'spec/.hidden/.busted' })\r\n    assert.is_equal(defaultOutput, args.o)\r\n    assert.is_equal(defaultOutput, args.output)\r\n    assert.is_same({'specs'}, args.ROOT)\r\n    assert.is_equal('./', args.C)\r\n    assert.is_equal('./', args.directory)\r\n    assert.is_equal('spec/.hidden/.busted', args.f)\r\n    assert.is_equal('spec/.hidden/.busted', args['config-file'])\r\n    assert.is_equal('/dev/urandom or os.time()', args.seed)\r\n    assert.is_equal('en', args.lang)\r\n    assert.is_equal(1, args['repeat'])\r\n    assert.is_equal(lpath, args.m)\r\n    assert.is_equal(lpath, args.lpath)\r\n    assert.is_equal(cpath, args.cpath)\r\n    assert.is_true(args['auto-insulate'])\r\n    assert.is_true(args.k)\r\n    assert.is_true(args['keep-going'])\r\n    assert.is_true(args.R)\r\n    assert.is_true(args['recursive'])\r\n    assert.is_false(args.c)\r\n    assert.is_false(args.coverage)\r\n    assert.is_false(args.version)\r\n    assert.is_false(args.v)\r\n    assert.is_false(args.verbose)\r\n    assert.is_false(args.l)\r\n    assert.is_false(args.list)\r\n    assert.is_false(args.lazy)\r\n    assert.is_false(args.s)\r\n    assert.is_false(args['enable-sound'])\r\n    assert.is_false(args['suppress-pending'])\r\n    assert.is_false(args['defer-print'])\r\n    assert.is_nil(args.shuffle)\r\n    assert.is_nil(args['shuffle-files'])\r\n    assert.is_nil(args['shuffle-tests'])\r\n    assert.is_nil(args.sort)\r\n    assert.is_nil(args['sort-files'])\r\n    assert.is_nil(args['sort-tests'])\r\n    assert.is_nil(args.r)\r\n    assert.is_nil(args.run)\r\n    assert.is_nil(args.helper)\r\n    assert.is_same({'_spec%.lua$'}, args.p)\r\n    assert.is_same({'_spec%.lua$'}, args.pattern)\r\n    assert.is_same({'_exclude'}, args['exclude-pattern'])\r\n    assert.is_same({'tag11', 'tag22', 'tag33'}, args.t)\r\n    assert.is_same({'tag11', 'tag22', 'tag33'}, args.tags)\r\n    assert.is_same({'etag11', 'etag22', 'etag33'}, args['exclude-tags'])\r\n    assert.is_same({'filt'}, args.filter)\r\n    assert.is_same({'filt-out'}, args['filter-out'])\r\n    assert.is_same({'-f', '--flag'}, args.Xoutput)\r\n    assert.is_same({'-v', '--verbose'}, args.Xhelper)\r\n    assert.is_same({'terra', 'moonscript'}, args.loaders)\r\n  end)\r\n\r\n  it('load configuration options', function()\r\n    local cli = require 'busted.modules.cli'({ standalone = false, output = defaultOutput })\r\n    local args = cli:parse({ '--directory=spec/.hidden', '--run=test' })\r\n    assert.is_same({'_test1%.lua$', '_test2%.lua$'}, args.pattern)\r\n    assert.is_same({'_exclude1', '_exclude2'}, args['exclude-pattern'])\r\n    assert.is_same({'filt1', 'filt2'}, args.filter)\r\n    assert.is_same({'filt1-out', 'filt2-out'}, args['filter-out'])\r\n    assert.is_same({'tests'}, args.ROOT)\r\n    assert.is_same({'test1', 'test2', 'test3'}, args.tags)\r\n    assert.is_same({'etest1', 'etest2', 'etest3'}, args['exclude-tags'])\r\n    assert.is_same({'-s','--sound'}, args.Xoutput)\r\n    assert.is_same({'-t', '--print'}, args.Xhelper)\r\n    assert.is_same({'lua', 'terra'}, args.loaders)\r\n  end)\r\n\r\n  it('load configuration options and override with command-line', function()\r\n    local cli = require 'busted.modules.cli'({ standalone = false, output = defaultOutput })\r\n    local args = cli:parse({ '--directory=spec/.hidden', '--run=test', '-t', 'tag1', '-p', 'patt', '--filter=fin', '--filter-out=fout', '--exclude-pattern', '', '--loaders=moonscript' })\r\n    assert.is_same({'patt'}, args.pattern)\r\n    assert.is_same({''}, args['exclude-pattern'])\r\n    assert.is_same({'fin'}, args.filter)\r\n    assert.is_same({'fout'}, args['filter-out'])\r\n    assert.is_same({'tag1'}, args.tags)\r\n    assert.is_same({'etest1', 'etest2', 'etest3'}, args['exclude-tags'])\r\n    assert.is_same({'-s','--sound'}, args.Xoutput)\r\n    assert.is_same({'-t', '--print'}, args.Xhelper)\r\n    assert.is_same({'moonscript'}, args.loaders)\r\n  end)\r\n\r\n  it('detects error in configuration file', function()\r\n    local cli = require 'busted.modules.cli'({ standalone = false, output = defaultOutput })\r\n    cli:set_name('app')\r\n    local args, err = cli:parse({ '--config-file=spec/.hidden/.busted_bad', '--run=test' })\r\n    assert.is_nil(args)\r\n    assert.has_match('^app: error: spec/.hidden/.busted_bad:8: ', err)\r\n    assert.has_match(\"'doesnotexist'\", err)\r\n    assert.has_match(\"a nil value\", err)\r\n  end)\r\n\r\n  it('detects invalid configuration file', function()\r\n    local cli = require 'busted.modules.cli'({ standalone = false, output = defaultOutput })\r\n    cli:set_name('myapp')\r\n    local args, err = cli:parse({ '--config-file=spec/.hidden/.busted_empty' })\r\n    assert.is_nil(args)\r\n    assert.is_equal('myapp: error: .busted file does not return a table.', err)\r\n  end)\r\n\r\n  it('detects unknown/invalid task', function()\r\n    local cli = require 'busted.modules.cli'({ standalone = false, output = defaultOutput })\r\n    cli:set_name('appname')\r\n    local args, err = cli:parse({ '--config-file=spec/.hidden/.busted', '--run=invalid' })\r\n    assert.is_nil(args)\r\n    assert.is_equal('appname: error: Task `invalid` not found, or not a table.', err)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 327,
    "text": "it('default options', function()\r\n    local defaultOutput = 'default_output_handler'\r\n    local lpath = './src/?.lua;./src/?/?.lua;./src/?/init.lua'\r\n    local cpath = path.is_windows and './csrc/?.dll;./csrc/?/?.dll;' or './csrc/?.so;./csrc/?/?.so;'\r\n    local cli = require 'busted.modules.cli'({ standalone = false, output = defaultOutput })\r\n    local args = cli:parse({ '--directory=spec/.hidden' })\r\n    assert.is_equal(defaultOutput, args.o)\r\n    assert.is_equal(defaultOutput, args.output)\r\n    assert.is_same({'specs'}, args.ROOT)\r\n    assert.is_equal(normpath('spec/.hidden'), args.C)\r\n    assert.is_equal(normpath('spec/.hidden'), args.directory)\r\n    assert.is_equal('/dev/urandom or os.time()', args.seed)\r\n    assert.is_equal('en', args.lang)\r\n    assert.is_equal(1, args['repeat'])\r\n    assert.is_equal(lpath, args.m)\r\n    assert.is_equal(lpath, args.lpath)\r\n    assert.is_equal(cpath, args.cpath)\r\n    assert.is_true(args['auto-insulate'])\r\n    assert.is_true(args.k)\r\n    assert.is_true(args['keep-going'])\r\n    assert.is_true(args.R)\r\n    assert.is_true(args['recursive'])\r\n    assert.is_false(args.c)\r\n    assert.is_false(args.coverage)\r\n    assert.is_false(args.version)\r\n    assert.is_false(args.v)\r\n    assert.is_false(args.verbose)\r\n    assert.is_false(args.l)\r\n    assert.is_false(args.list)\r\n    assert.is_false(args.lazy)\r\n    assert.is_false(args.s)\r\n    assert.is_false(args['enable-sound'])\r\n    assert.is_false(args['suppress-pending'])\r\n    assert.is_false(args['defer-print'])\r\n    assert.is_nil(args.f)\r\n    assert.is_nil(args['config-file'])\r\n    assert.is_nil(args.shuffle)\r\n    assert.is_nil(args['shuffle-files'])\r\n    assert.is_nil(args['shuffle-tests'])\r\n    assert.is_nil(args.sort)\r\n    assert.is_nil(args['sort-files'])\r\n    assert.is_nil(args['sort-tests'])\r\n    assert.is_nil(args.r)\r\n    assert.is_nil(args.run)\r\n    assert.is_nil(args.helper)\r\n    assert.is_same({}, args.e)\r\n    assert.is_same({'_spec%.lua$'}, args.p)\r\n    assert.is_same({'_spec%.lua$'}, args.pattern)\r\n    assert.is_same({'_exclude'}, args['exclude-pattern'])\r\n    assert.is_same({'tag11', 'tag22', 'tag33'}, args.t)\r\n    assert.is_same({'tag11', 'tag22', 'tag33'}, args.tags)\r\n    assert.is_same({'etag11', 'etag22', 'etag33'}, args['exclude-tags'])\r\n    assert.is_same({'filt'}, args.filter)\r\n    assert.is_same({'filt-out'}, args['filter-out'])\r\n    assert.is_same({'-f', '--flag'}, args.Xoutput)\r\n    assert.is_same({'-v', '--verbose'}, args.Xhelper)\r\n    assert.is_same({'terra', 'moonscript'}, args.loaders)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 328,
    "text": "it('default options with --config-file option', function()\r\n    local defaultOutput = 'default_output_handler'\r\n    local lpath = './src/?.lua;./src/?/?.lua;./src/?/init.lua'\r\n    local cpath = path.is_windows and './csrc/?.dll;./csrc/?/?.dll;' or './csrc/?.so;./csrc/?/?.so;'\r\n    local cli = require 'busted.modules.cli'({ standalone = false, output = defaultOutput })\r\n    local args = cli:parse({ '--config-file', 'spec/.hidden/.busted' })\r\n    assert.is_equal(defaultOutput, args.o)\r\n    assert.is_equal(defaultOutput, args.output)\r\n    assert.is_same({'specs'}, args.ROOT)\r\n    assert.is_equal('./', args.C)\r\n    assert.is_equal('./', args.directory)\r\n    assert.is_equal('spec/.hidden/.busted', args.f)\r\n    assert.is_equal('spec/.hidden/.busted', args['config-file'])\r\n    assert.is_equal('/dev/urandom or os.time()', args.seed)\r\n    assert.is_equal('en', args.lang)\r\n    assert.is_equal(1, args['repeat'])\r\n    assert.is_equal(lpath, args.m)\r\n    assert.is_equal(lpath, args.lpath)\r\n    assert.is_equal(cpath, args.cpath)\r\n    assert.is_true(args['auto-insulate'])\r\n    assert.is_true(args.k)\r\n    assert.is_true(args['keep-going'])\r\n    assert.is_true(args.R)\r\n    assert.is_true(args['recursive'])\r\n    assert.is_false(args.c)\r\n    assert.is_false(args.coverage)\r\n    assert.is_false(args.version)\r\n    assert.is_false(args.v)\r\n    assert.is_false(args.verbose)\r\n    assert.is_false(args.l)\r\n    assert.is_false(args.list)\r\n    assert.is_false(args.lazy)\r\n    assert.is_false(args.s)\r\n    assert.is_false(args['enable-sound'])\r\n    assert.is_false(args['suppress-pending'])\r\n    assert.is_false(args['defer-print'])\r\n    assert.is_nil(args.shuffle)\r\n    assert.is_nil(args['shuffle-files'])\r\n    assert.is_nil(args['shuffle-tests'])\r\n    assert.is_nil(args.sort)\r\n    assert.is_nil(args['sort-files'])\r\n    assert.is_nil(args['sort-tests'])\r\n    assert.is_nil(args.r)\r\n    assert.is_nil(args.run)\r\n    assert.is_nil(args.helper)\r\n    assert.is_same({'_spec%.lua$'}, args.p)\r\n    assert.is_same({'_spec%.lua$'}, args.pattern)\r\n    assert.is_same({'_exclude'}, args['exclude-pattern'])\r\n    assert.is_same({'tag11', 'tag22', 'tag33'}, args.t)\r\n    assert.is_same({'tag11', 'tag22', 'tag33'}, args.tags)\r\n    assert.is_same({'etag11', 'etag22', 'etag33'}, args['exclude-tags'])\r\n    assert.is_same({'filt'}, args.filter)\r\n    assert.is_same({'filt-out'}, args['filter-out'])\r\n    assert.is_same({'-f', '--flag'}, args.Xoutput)\r\n    assert.is_same({'-v', '--verbose'}, args.Xhelper)\r\n    assert.is_same({'terra', 'moonscript'}, args.loaders)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 329,
    "text": "it('load configuration options', function()\r\n    local cli = require 'busted.modules.cli'({ standalone = false, output = defaultOutput })\r\n    local args = cli:parse({ '--directory=spec/.hidden', '--run=test' })\r\n    assert.is_same({'_test1%.lua$', '_test2%.lua$'}, args.pattern)\r\n    assert.is_same({'_exclude1', '_exclude2'}, args['exclude-pattern'])\r\n    assert.is_same({'filt1', 'filt2'}, args.filter)\r\n    assert.is_same({'filt1-out', 'filt2-out'}, args['filter-out'])\r\n    assert.is_same({'tests'}, args.ROOT)\r\n    assert.is_same({'test1', 'test2', 'test3'}, args.tags)\r\n    assert.is_same({'etest1', 'etest2', 'etest3'}, args['exclude-tags'])\r\n    assert.is_same({'-s','--sound'}, args.Xoutput)\r\n    assert.is_same({'-t', '--print'}, args.Xhelper)\r\n    assert.is_same({'lua', 'terra'}, args.loaders)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 330,
    "text": "it('load configuration options and override with command-line', function()\r\n    local cli = require 'busted.modules.cli'({ standalone = false, output = defaultOutput })\r\n    local args = cli:parse({ '--directory=spec/.hidden', '--run=test', '-t', 'tag1', '-p', 'patt', '--filter=fin', '--filter-out=fout', '--exclude-pattern', '', '--loaders=moonscript' })\r\n    assert.is_same({'patt'}, args.pattern)\r\n    assert.is_same({''}, args['exclude-pattern'])\r\n    assert.is_same({'fin'}, args.filter)\r\n    assert.is_same({'fout'}, args['filter-out'])\r\n    assert.is_same({'tag1'}, args.tags)\r\n    assert.is_same({'etest1', 'etest2', 'etest3'}, args['exclude-tags'])\r\n    assert.is_same({'-s','--sound'}, args.Xoutput)\r\n    assert.is_same({'-t', '--print'}, args.Xhelper)\r\n    assert.is_same({'moonscript'}, args.loaders)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 331,
    "text": "it('detects error in configuration file', function()\r\n    local cli = require 'busted.modules.cli'({ standalone = false, output = defaultOutput })\r\n    cli:set_name('app')\r\n    local args, err = cli:parse({ '--config-file=spec/.hidden/.busted_bad', '--run=test' })\r\n    assert.is_nil(args)\r\n    assert.has_match('^app: error: spec/.hidden/.busted_bad:8: ', err)\r\n    assert.has_match(\"'doesnotexist'\", err)\r\n    assert.has_match(\"a nil value\", err)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 332,
    "text": "it('detects invalid configuration file', function()\r\n    local cli = require 'busted.modules.cli'({ standalone = false, output = defaultOutput })\r\n    cli:set_name('myapp')\r\n    local args, err = cli:parse({ '--config-file=spec/.hidden/.busted_empty' })\r\n    assert.is_nil(args)\r\n    assert.is_equal('myapp: error: .busted file does not return a table.', err)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 333,
    "text": "it('detects unknown/invalid task', function()\r\n    local cli = require 'busted.modules.cli'({ standalone = false, output = defaultOutput })\r\n    cli:set_name('appname')\r\n    local args, err = cli:parse({ '--config-file=spec/.hidden/.busted', '--run=invalid' })\r\n    assert.is_nil(args)\r\n    assert.is_equal('appname: error: Task `invalid` not found, or not a table.', err)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 334,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 335,
    "text": "function()\r\n    package.loaded['cliargs'] = nil\r\n  end",
    "type": "function"
  }, {
    "id": 336,
    "text": "package.loaded['cliargs'] = nil",
    "type": "statement:assign"
  }, {
    "id": 337,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 338,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'()\r\n    cli:set_name('myapp')\r\n    local args, err = cli:parse({ '--repeat=abc'})\r\n    assert.is_nil(args)\r\n    assert.is_equal('myapp: error: argument to --repeat must be a number; re-run with --help for usage.', err)\r\n  end",
    "type": "function"
  }, {
    "id": 339,
    "text": "local args, err = cli:parse({ '--repeat=abc'})",
    "type": "statement:localassign"
  }, {
    "id": 340,
    "text": "assert.is_equal('myapp: error: argument to --repeat must be a number; re-run with --help for usage.', err)",
    "type": "statement:functioncall"
  }, {
    "id": 341,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 342,
    "text": "function()\r\n    local cli = require 'busted.modules.cli'()\r\n    cli:set_name('myapp')\r\n    local args, err = cli:parse({ '--tags=tag1', '--exclude-tags=tag1' })\r\n    assert.is_nil(args)\r\n    assert.is_equal('myapp: error: Cannot use --tags and --exclude-tags for the same tags', err)\r\n  end",
    "type": "function"
  }, {
    "id": 343,
    "text": "local args, err = cli:parse({ '--tags=tag1', '--exclude-tags=tag1' })",
    "type": "statement:localassign"
  }, {
    "id": 344,
    "text": "assert.is_equal('myapp: error: Cannot use --tags and --exclude-tags for the same tags', err)",
    "type": "statement:functioncall"
  }, {
    "id": 345,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 346,
    "text": "function()\r\n  before_each(function()\r\n    package.loaded['cliargs'] = nil\r\n  end)\r\n\r\n  it('with invalid --repeat value', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    cli:set_name('myapp')\r\n    local args, err = cli:parse({ '--repeat=abc'})\r\n    assert.is_nil(args)\r\n    assert.is_equal('myapp: error: argument to --repeat must be a number; re-run with --help for usage.', err)\r\n  end)\r\n\r\n  it('with same tag for --tags and --exclude-tags', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    cli:set_name('myapp')\r\n    local args, err = cli:parse({ '--tags=tag1', '--exclude-tags=tag1' })\r\n    assert.is_nil(args)\r\n    assert.is_equal('myapp: error: Cannot use --tags and --exclude-tags for the same tags', err)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 347,
    "text": "before_each(function()\r\n    package.loaded['cliargs'] = nil\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 348,
    "text": "it('with invalid --repeat value', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    cli:set_name('myapp')\r\n    local args, err = cli:parse({ '--repeat=abc'})\r\n    assert.is_nil(args)\r\n    assert.is_equal('myapp: error: argument to --repeat must be a number; re-run with --help for usage.', err)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 349,
    "text": "it('with same tag for --tags and --exclude-tags', function()\r\n    local cli = require 'busted.modules.cli'()\r\n    cli:set_name('myapp')\r\n    local args, err = cli:parse({ '--tags=tag1', '--exclude-tags=tag1' })\r\n    assert.is_nil(args)\r\n    assert.is_equal('myapp: error: Cannot use --tags and --exclude-tags for the same tags', err)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 350,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 351,
    "text": "",
    "type": "function container"
  }, {
    "id": 352,
    "text": "it",
    "type": "global function"
  }, {
    "id": 353,
    "text": "before_each",
    "type": "global function"
  }, {
    "id": 354,
    "text": "is_same",
    "type": "global function"
  }, {
    "id": 355,
    "text": "is_true",
    "type": "global function"
  }, {
    "id": 356,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 357,
    "text": "normpath",
    "type": "global function"
  }, {
    "id": 358,
    "text": "is_nil",
    "type": "global function"
  }, {
    "id": 359,
    "text": "has_match",
    "type": "global function"
  }, {
    "id": 360,
    "text": "require",
    "type": "global function"
  }, {
    "id": 361,
    "text": "is_equal",
    "type": "global function"
  }, {
    "id": 362,
    "text": "is_false",
    "type": "global function"
  }, {
    "id": 363,
    "text": "path",
    "type": "module"
  }, {
    "id": 364,
    "text": "",
    "type": "variable container"
  }, {
    "id": 365,
    "text": "",
    "type": "require container"
  }, {
    "id": 366,
    "text": "",
    "type": "local variable"
  }, {
    "id": 367,
    "text": "",
    "type": "n/a"
  }, {
    "id": 368,
    "text": "",
    "type": "require local variable"
  } ]
}