{
  "_filename": "TAP.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/busted/busted/outputHandlers/TAP.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 6
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 11,
    "label": "has",
    "to": 17
  }, {
    "from": 11,
    "label": "has",
    "to": 18
  }, {
    "from": 11,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 11,
    "label": "has",
    "to": 21
  }, {
    "from": 11,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 11,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 25,
    "label": "has",
    "to": 6
  }, {
    "from": 25,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 34,
    "label": "has",
    "to": 38
  }, {
    "from": 34,
    "label": "has",
    "to": 39
  }, {
    "from": 34,
    "label": "has",
    "to": 40
  }, {
    "from": 32,
    "label": "has",
    "to": 6
  }, {
    "from": 32,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 33
  }, {
    "from": 43,
    "label": "has",
    "to": 40
  }, {
    "from": 42,
    "label": "has",
    "to": 6
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 45,
    "label": "has",
    "to": 49
  }, {
    "from": 45,
    "label": "has",
    "to": 50
  }, {
    "from": 45,
    "label": "has",
    "to": 51
  }, {
    "from": 45,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 5
  }, {
    "from": 52,
    "label": "has",
    "to": 6
  }, {
    "from": 45,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 9
  }, {
    "from": 53,
    "label": "has",
    "to": 6
  }, {
    "from": 45,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 11,
    "label": "has",
    "to": 17
  }, {
    "from": 11,
    "label": "has",
    "to": 18
  }, {
    "from": 11,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 11,
    "label": "has",
    "to": 21
  }, {
    "from": 11,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 45,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 26
  }, {
    "from": 54,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 54,
    "label": "has",
    "to": 6
  }, {
    "from": 45,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 33
  }, {
    "from": 55,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 34,
    "label": "has",
    "to": 38
  }, {
    "from": 34,
    "label": "has",
    "to": 39
  }, {
    "from": 34,
    "label": "has",
    "to": 40
  }, {
    "from": 55,
    "label": "has",
    "to": 6
  }, {
    "from": 45,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 33
  }, {
    "from": 43,
    "label": "has",
    "to": 40
  }, {
    "from": 56,
    "label": "has",
    "to": 6
  }, {
    "from": 45,
    "label": "has",
    "to": 57
  }, {
    "from": 45,
    "label": "has",
    "to": 58
  }, {
    "from": 45,
    "label": "has",
    "to": 59
  }, {
    "from": 45,
    "label": "has",
    "to": 60
  }, {
    "from": 45,
    "label": "has",
    "to": 61
  }, {
    "from": 45,
    "label": "has",
    "to": 6
  }, {
    "from": 45,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "calls",
    "to": 65
  }, {
    "from": 11,
    "label": "calls",
    "to": 64
  }, {
    "from": 63,
    "label": "calls",
    "to": 67
  }, {
    "from": 11,
    "label": "calls",
    "to": 67
  }, {
    "from": 11,
    "label": "calls",
    "to": 67
  }, {
    "from": 11,
    "label": "calls",
    "to": 67
  }, {
    "from": 11,
    "label": "calls",
    "to": 67
  }, {
    "from": 11,
    "label": "calls",
    "to": 67
  }, {
    "from": 63,
    "label": "calls",
    "to": 67
  }, {
    "from": 63,
    "label": "calls",
    "to": 67
  }, {
    "from": 63,
    "label": "calls",
    "to": 67
  }, {
    "from": 11,
    "label": "calls",
    "to": 68
  }, {
    "from": 63,
    "label": "calls",
    "to": 69
  }, {
    "from": 63,
    "label": "calls",
    "to": 69
  }, {
    "from": 63,
    "label": "calls",
    "to": 69
  }, {
    "from": 63,
    "label": "calls",
    "to": 66
  }, {
    "from": 63,
    "label": "calls",
    "to": 66
  }, {
    "from": 63,
    "label": "calls",
    "to": 66
  }, {
    "from": 63,
    "label": "calls",
    "to": 66
  }, {
    "from": 63,
    "label": "calls",
    "to": 66
  }, {
    "from": 63,
    "label": "calls",
    "to": 11
  }, {
    "from": 63,
    "label": "calls",
    "to": 11
  }, {
    "from": 63,
    "label": "calls",
    "to": 11
  }, {
    "from": 2,
    "label": "contains",
    "to": 63
  }, {
    "from": 63,
    "label": "declares",
    "to": 4
  }, {
    "from": 63,
    "label": "declares",
    "to": 8
  }, {
    "from": 63,
    "label": "declares",
    "to": 11
  }, {
    "from": 63,
    "label": "declares",
    "to": 25
  }, {
    "from": 63,
    "label": "declares",
    "to": 32
  }, {
    "from": 63,
    "label": "declares",
    "to": 42
  }, {
    "from": 63,
    "label": "declares",
    "to": 45
  }, {
    "from": 2,
    "label": "contains",
    "to": 71
  }, {
    "from": 2,
    "label": "contains",
    "to": 72
  }, {
    "from": 72,
    "label": "initializes",
    "to": 73
  }, {
    "from": 73,
    "label": "requires",
    "to": 70
  }, {
    "from": 72,
    "label": "initializes",
    "to": 74
  }, {
    "from": 74,
    "label": "requires",
    "to": 3
  }, {
    "from": 72,
    "label": "initializes",
    "to": 75
  }, {
    "from": 75,
    "label": "requires",
    "to": 1
  }, {
    "from": 2,
    "label": "provides",
    "to": 76
  }, {
    "from": 76,
    "label": "provides",
    "to": 77
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "base",
    "type": "module"
  }, {
    "id": 2,
    "text": "TAP",
    "type": "module"
  }, {
    "id": 3,
    "text": "busted",
    "type": "module"
  }, {
    "id": 4,
    "text": "function()\r\n    counter = 0\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 5,
    "text": "counter = 0",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function()\r\n    print('1..' .. counter)\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 9,
    "text": "print('1..' .. counter)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "local function showFailure(t)\r\n    local message = t.message\r\n    local trace = t.trace or {}\r\n\r\n    if message == nil then\r\n      message = 'Nil error'\r\n    elseif type(message) ~= 'string' then\r\n      message = pretty.write(message)\r\n    end\r\n\r\n    print(failure:format(counter, t.name))\r\n    print('# ' .. t.element.trace.short_src .. ' @ ' .. t.element.trace.currentline)\r\n    if t.randomseed then print('# Random seed: ' .. t.randomseed) end\r\n    print('# Failure message: ' .. message:gsub('\\n', '\\n# '))\r\n    if options.verbose and trace.traceback then\r\n      print('# ' .. trace.traceback:gsub('^\\n', '', 1):gsub('\\n', '\\n# '))\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 12,
    "text": "local message = t.message",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "local trace = t.trace or {}",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "if message == nil then\r\n      message = 'Nil error'\r\n    elseif type(message) ~= 'string' then\r\n      message = pretty.write(message)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "message = 'Nil error'",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "message = pretty.write(message)",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "print(failure:format(counter, t.name))",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "print('# ' .. t.element.trace.short_src .. ' @ ' .. t.element.trace.currentline)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "if t.randomseed then print('# Random seed: ' .. t.randomseed) end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "print('# Random seed: ' .. t.randomseed)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "print('# Failure message: ' .. message:gsub('\\n', '\\n# '))",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "if options.verbose and trace.traceback then\r\n      print('# ' .. trace.traceback:gsub('^\\n', '', 1):gsub('\\n', '\\n# '))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "print('# ' .. trace.traceback:gsub('^\\n', '', 1):gsub('\\n', '\\n# '))",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function(element, parent)\r\n    local trace = element.trace\r\n    if options.verbose and trace and trace.short_src then\r\n      local fileline = trace.short_src .. ' @ ' ..  trace.currentline .. ': '\r\n      local testName = fileline .. handler.getFullName(element)\r\n      print('# ' .. testName)\r\n    end\r\n\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 26,
    "text": "local trace = element.trace",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "if options.verbose and trace and trace.short_src then\r\n      local fileline = trace.short_src .. ' @ ' ..  trace.currentline .. ': '\r\n      local testName = fileline .. handler.getFullName(element)\r\n      print('# ' .. testName)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "local fileline = trace.short_src .. ' @ ' ..  trace.currentline .. ': '",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "local testName = fileline .. handler.getFullName(element)",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "print('# ' .. testName)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function(element, parent, status, trace)\r\n    counter = counter + 1\r\n    if status == 'success' then\r\n      local t = handler.successes[#handler.successes]\r\n      print(success:format(counter, t.name))\r\n    elseif status == 'pending' then\r\n      local t = handler.pendings[#handler.pendings]\r\n      print(skip:format(counter, (t.message or t.name)))\r\n    elseif status == 'failure' then\r\n      showFailure(handler.failures[#handler.failures])\r\n    elseif status == 'error' then\r\n      showFailure(handler.errors[#handler.errors])\r\n    end\r\n\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 33,
    "text": "counter = counter + 1",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "if status == 'success' then\r\n      local t = handler.successes[#handler.successes]\r\n      print(success:format(counter, t.name))\r\n    elseif status == 'pending' then\r\n      local t = handler.pendings[#handler.pendings]\r\n      print(skip:format(counter, (t.message or t.name)))\r\n    elseif status == 'failure' then\r\n      showFailure(handler.failures[#handler.failures])\r\n    elseif status == 'error' then\r\n      showFailure(handler.errors[#handler.errors])\r\n    end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "local t = handler.successes[#handler.successes]",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "print(success:format(counter, t.name))",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "local t = handler.pendings[#handler.pendings]",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "print(skip:format(counter, (t.message or t.name)))",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "showFailure(handler.failures[#handler.failures])",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "showFailure(handler.errors[#handler.errors])",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function(element, parent, message, debug)\r\n    if element.descriptor ~= 'it' then\r\n      counter = counter + 1\r\n      showFailure(handler.errors[#handler.errors])\r\n    end\r\n\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 43,
    "text": "if element.descriptor ~= 'it' then\r\n      counter = counter + 1\r\n      showFailure(handler.errors[#handler.errors])\r\n    end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function(options)\r\n  local busted = require 'busted'\r\n  local handler = require 'busted.outputHandlers.base'()\r\n\r\n  local success = 'ok %u - %s'\r\n  local failure = 'not ' .. success\r\n  local skip = 'ok %u - # SKIP %s'\r\n  local counter = 0\r\n\r\n  handler.suiteReset = function()\r\n    counter = 0\r\n    return nil, true\r\n  end\r\n\r\n  handler.suiteEnd = function()\r\n    print('1..' .. counter)\r\n    return nil, true\r\n  end\r\n\r\n  local function showFailure(t)\r\n    local message = t.message\r\n    local trace = t.trace or {}\r\n\r\n    if message == nil then\r\n      message = 'Nil error'\r\n    elseif type(message) ~= 'string' then\r\n      message = pretty.write(message)\r\n    end\r\n\r\n    print(failure:format(counter, t.name))\r\n    print('# ' .. t.element.trace.short_src .. ' @ ' .. t.element.trace.currentline)\r\n    if t.randomseed then print('# Random seed: ' .. t.randomseed) end\r\n    print('# Failure message: ' .. message:gsub('\\n', '\\n# '))\r\n    if options.verbose and trace.traceback then\r\n      print('# ' .. trace.traceback:gsub('^\\n', '', 1):gsub('\\n', '\\n# '))\r\n    end\r\n  end\r\n\r\n  handler.testStart = function(element, parent)\r\n    local trace = element.trace\r\n    if options.verbose and trace and trace.short_src then\r\n      local fileline = trace.short_src .. ' @ ' ..  trace.currentline .. ': '\r\n      local testName = fileline .. handler.getFullName(element)\r\n      print('# ' .. testName)\r\n    end\r\n\r\n    return nil, true\r\n  end\r\n\r\n  handler.testEnd = function(element, parent, status, trace)\r\n    counter = counter + 1\r\n    if status == 'success' then\r\n      local t = handler.successes[#handler.successes]\r\n      print(success:format(counter, t.name))\r\n    elseif status == 'pending' then\r\n      local t = handler.pendings[#handler.pendings]\r\n      print(skip:format(counter, (t.message or t.name)))\r\n    elseif status == 'failure' then\r\n      showFailure(handler.failures[#handler.failures])\r\n    elseif status == 'error' then\r\n      showFailure(handler.errors[#handler.errors])\r\n    end\r\n\r\n    return nil, true\r\n  end\r\n\r\n  handler.error = function(element, parent, message, debug)\r\n    if element.descriptor ~= 'it' then\r\n      counter = counter + 1\r\n      showFailure(handler.errors[#handler.errors])\r\n    end\r\n\r\n    return nil, true\r\n  end\r\n\r\n  busted.subscribe({ 'suite', 'reset' }, handler.suiteReset)\r\n  busted.subscribe({ 'suite', 'end' }, handler.suiteEnd)\r\n  busted.subscribe({ 'test', 'start' }, handler.testStart, { predicate = handler.cancelOnPending })\r\n  busted.subscribe({ 'test', 'end' }, handler.testEnd, { predicate = handler.cancelOnPending })\r\n  busted.subscribe({ 'error' }, handler.error)\r\n\r\n  return handler\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "local busted = require 'busted'",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "local handler = require 'busted.outputHandlers.base'()",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "local success = 'ok %u - %s'",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "local failure = 'not ' .. success",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "local skip = 'ok %u - # SKIP %s'",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "local counter = 0",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "handler.suiteReset = function()\r\n    counter = 0\r\n    return nil, true\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "handler.suiteEnd = function()\r\n    print('1..' .. counter)\r\n    return nil, true\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "handler.testStart = function(element, parent)\r\n    local trace = element.trace\r\n    if options.verbose and trace and trace.short_src then\r\n      local fileline = trace.short_src .. ' @ ' ..  trace.currentline .. ': '\r\n      local testName = fileline .. handler.getFullName(element)\r\n      print('# ' .. testName)\r\n    end\r\n\r\n    return nil, true\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "handler.testEnd = function(element, parent, status, trace)\r\n    counter = counter + 1\r\n    if status == 'success' then\r\n      local t = handler.successes[#handler.successes]\r\n      print(success:format(counter, t.name))\r\n    elseif status == 'pending' then\r\n      local t = handler.pendings[#handler.pendings]\r\n      print(skip:format(counter, (t.message or t.name)))\r\n    elseif status == 'failure' then\r\n      showFailure(handler.failures[#handler.failures])\r\n    elseif status == 'error' then\r\n      showFailure(handler.errors[#handler.errors])\r\n    end\r\n\r\n    return nil, true\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "handler.error = function(element, parent, message, debug)\r\n    if element.descriptor ~= 'it' then\r\n      counter = counter + 1\r\n      showFailure(handler.errors[#handler.errors])\r\n    end\r\n\r\n    return nil, true\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "busted.subscribe({ 'suite', 'reset' }, handler.suiteReset)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "busted.subscribe({ 'suite', 'end' }, handler.suiteEnd)",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "busted.subscribe({ 'test', 'start' }, handler.testStart, { predicate = handler.cancelOnPending })",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "busted.subscribe({ 'test', 'end' }, handler.testEnd, { predicate = handler.cancelOnPending })",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "busted.subscribe({ 'error' }, handler.error)",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "",
    "type": "function container"
  }, {
    "id": 64,
    "text": "write",
    "type": "global function"
  }, {
    "id": 65,
    "text": "getFullName",
    "type": "global function"
  }, {
    "id": 66,
    "text": "subscribe",
    "type": "global function"
  }, {
    "id": 67,
    "text": "print",
    "type": "global function"
  }, {
    "id": 68,
    "text": "type",
    "type": "global function"
  }, {
    "id": 69,
    "text": "require",
    "type": "global function"
  }, {
    "id": 70,
    "text": "pretty",
    "type": "module"
  }, {
    "id": 71,
    "text": "",
    "type": "variable container"
  }, {
    "id": 72,
    "text": "",
    "type": "require container"
  }, {
    "id": 73,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 74,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 75,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 76,
    "text": "",
    "type": "interface container"
  }, {
    "id": 77,
    "text": "",
    "type": "interface"
  } ]
}