{
  "_filename": "cli.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/busted/busted/modules/cli.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 3
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 9,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 9,
    "label": "has",
    "to": 7
  }, {
    "from": 9,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 7
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 19
  }, {
    "from": 21,
    "label": "has",
    "to": 7
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 23,
    "label": "has",
    "to": 7
  }, {
    "from": 23,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 7
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 28,
    "label": "has",
    "to": 33
  }, {
    "from": 28,
    "label": "has",
    "to": 7
  }, {
    "from": 28,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 24
  }, {
    "from": 35,
    "label": "has",
    "to": 25
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 7
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 24
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 36
  }, {
    "from": 38,
    "label": "has",
    "to": 7
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 7
  }, {
    "from": 41,
    "label": "has",
    "to": 7
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 7
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 7
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 53,
    "label": "has",
    "to": 7
  }, {
    "from": 53,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 57,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 61,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 65,
    "label": "has",
    "to": 7
  }, {
    "from": 65,
    "label": "has",
    "to": 68
  }, {
    "from": 65,
    "label": "has",
    "to": 69
  }, {
    "from": 65,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 7
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 70,
    "label": "has",
    "to": 75
  }, {
    "from": 65,
    "label": "has",
    "to": 7
  }, {
    "from": 65,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 65,
    "label": "has",
    "to": 79
  }, {
    "from": 65,
    "label": "has",
    "to": 80
  }, {
    "from": 65,
    "label": "has",
    "to": 81
  }, {
    "from": 65,
    "label": "has",
    "to": 82
  }, {
    "from": 65,
    "label": "has",
    "to": 83
  }, {
    "from": 65,
    "label": "has",
    "to": 84
  }, {
    "from": 65,
    "label": "has",
    "to": 85
  }, {
    "from": 65,
    "label": "has",
    "to": 86
  }, {
    "from": 65,
    "label": "has",
    "to": 87
  }, {
    "from": 65,
    "label": "has",
    "to": 88
  }, {
    "from": 65,
    "label": "has",
    "to": 89
  }, {
    "from": 65,
    "label": "has",
    "to": 90
  }, {
    "from": 65,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 65,
    "label": "has",
    "to": 7
  }, {
    "from": 65,
    "label": "has",
    "to": 94
  }, {
    "from": 65,
    "label": "has",
    "to": 7
  }, {
    "from": 65,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "has",
    "to": 72
  }, {
    "from": 96,
    "label": "has",
    "to": 7
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 98,
    "label": "has",
    "to": 7
  }, {
    "from": 98,
    "label": "has",
    "to": 100
  }, {
    "from": 101,
    "label": "has",
    "to": 99
  }, {
    "from": 101,
    "label": "has",
    "to": 7
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 7
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 105,
    "label": "has",
    "to": 107
  }, {
    "from": 105,
    "label": "has",
    "to": 108
  }, {
    "from": 105,
    "label": "has",
    "to": 109
  }, {
    "from": 105,
    "label": "has",
    "to": 110
  }, {
    "from": 105,
    "label": "has",
    "to": 111
  }, {
    "from": 105,
    "label": "has",
    "to": 112
  }, {
    "from": 105,
    "label": "has",
    "to": 113
  }, {
    "from": 105,
    "label": "has",
    "to": 114
  }, {
    "from": 105,
    "label": "has",
    "to": 115
  }, {
    "from": 105,
    "label": "has",
    "to": 116
  }, {
    "from": 105,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 105,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 9,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 9,
    "label": "has",
    "to": 7
  }, {
    "from": 105,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 7
  }, {
    "from": 105,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 19
  }, {
    "from": 21,
    "label": "has",
    "to": 7
  }, {
    "from": 105,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 23,
    "label": "has",
    "to": 7
  }, {
    "from": 105,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 7
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 28,
    "label": "has",
    "to": 33
  }, {
    "from": 28,
    "label": "has",
    "to": 7
  }, {
    "from": 105,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 24
  }, {
    "from": 35,
    "label": "has",
    "to": 25
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 7
  }, {
    "from": 105,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 24
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 36
  }, {
    "from": 38,
    "label": "has",
    "to": 7
  }, {
    "from": 105,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 7
  }, {
    "from": 41,
    "label": "has",
    "to": 7
  }, {
    "from": 105,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 7
  }, {
    "from": 105,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 7
  }, {
    "from": 105,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 53,
    "label": "has",
    "to": 7
  }, {
    "from": 105,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 105,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 105,
    "label": "has",
    "to": 117
  }, {
    "from": 105,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 118,
    "label": "has",
    "to": 120
  }, {
    "from": 118,
    "label": "has",
    "to": 121
  }, {
    "from": 105,
    "label": "has",
    "to": 122
  }, {
    "from": 105,
    "label": "has",
    "to": 123
  }, {
    "from": 105,
    "label": "has",
    "to": 124
  }, {
    "from": 105,
    "label": "has",
    "to": 125
  }, {
    "from": 105,
    "label": "has",
    "to": 126
  }, {
    "from": 105,
    "label": "has",
    "to": 127
  }, {
    "from": 105,
    "label": "has",
    "to": 128
  }, {
    "from": 105,
    "label": "has",
    "to": 129
  }, {
    "from": 105,
    "label": "has",
    "to": 130
  }, {
    "from": 105,
    "label": "has",
    "to": 131
  }, {
    "from": 105,
    "label": "has",
    "to": 132
  }, {
    "from": 105,
    "label": "has",
    "to": 133
  }, {
    "from": 105,
    "label": "has",
    "to": 134
  }, {
    "from": 105,
    "label": "has",
    "to": 135
  }, {
    "from": 105,
    "label": "has",
    "to": 136
  }, {
    "from": 105,
    "label": "has",
    "to": 137
  }, {
    "from": 105,
    "label": "has",
    "to": 138
  }, {
    "from": 105,
    "label": "has",
    "to": 139
  }, {
    "from": 105,
    "label": "has",
    "to": 140
  }, {
    "from": 105,
    "label": "has",
    "to": 141
  }, {
    "from": 105,
    "label": "has",
    "to": 142
  }, {
    "from": 105,
    "label": "has",
    "to": 143
  }, {
    "from": 105,
    "label": "has",
    "to": 144
  }, {
    "from": 105,
    "label": "has",
    "to": 145
  }, {
    "from": 105,
    "label": "has",
    "to": 146
  }, {
    "from": 105,
    "label": "has",
    "to": 147
  }, {
    "from": 105,
    "label": "has",
    "to": 148
  }, {
    "from": 105,
    "label": "has",
    "to": 149
  }, {
    "from": 105,
    "label": "has",
    "to": 150
  }, {
    "from": 105,
    "label": "has",
    "to": 151
  }, {
    "from": 105,
    "label": "has",
    "to": 152
  }, {
    "from": 105,
    "label": "has",
    "to": 153
  }, {
    "from": 105,
    "label": "has",
    "to": 154
  }, {
    "from": 105,
    "label": "has",
    "to": 155
  }, {
    "from": 105,
    "label": "has",
    "to": 156
  }, {
    "from": 105,
    "label": "has",
    "to": 157
  }, {
    "from": 105,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 65,
    "label": "has",
    "to": 7
  }, {
    "from": 65,
    "label": "has",
    "to": 68
  }, {
    "from": 65,
    "label": "has",
    "to": 69
  }, {
    "from": 65,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 7
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 70,
    "label": "has",
    "to": 75
  }, {
    "from": 65,
    "label": "has",
    "to": 7
  }, {
    "from": 65,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 65,
    "label": "has",
    "to": 79
  }, {
    "from": 65,
    "label": "has",
    "to": 80
  }, {
    "from": 65,
    "label": "has",
    "to": 81
  }, {
    "from": 65,
    "label": "has",
    "to": 82
  }, {
    "from": 65,
    "label": "has",
    "to": 83
  }, {
    "from": 65,
    "label": "has",
    "to": 84
  }, {
    "from": 65,
    "label": "has",
    "to": 85
  }, {
    "from": 65,
    "label": "has",
    "to": 86
  }, {
    "from": 65,
    "label": "has",
    "to": 87
  }, {
    "from": 65,
    "label": "has",
    "to": 88
  }, {
    "from": 65,
    "label": "has",
    "to": 89
  }, {
    "from": 65,
    "label": "has",
    "to": 90
  }, {
    "from": 65,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 65,
    "label": "has",
    "to": 7
  }, {
    "from": 65,
    "label": "has",
    "to": 94
  }, {
    "from": 65,
    "label": "has",
    "to": 7
  }, {
    "from": 105,
    "label": "has",
    "to": 7
  }, {
    "from": 105,
    "label": "has",
    "to": 99
  }, {
    "from": 105,
    "label": "has",
    "to": 7
  }, {
    "from": 105,
    "label": "has",
    "to": 99
  }, {
    "from": 105,
    "label": "has",
    "to": 7
  }, {
    "from": 105,
    "label": "has",
    "to": 7
  }, {
    "from": 105,
    "label": "has",
    "to": 158
  }, {
    "from": 65,
    "label": "calls",
    "to": 170
  }, {
    "from": 65,
    "label": "calls",
    "to": 9
  }, {
    "from": 65,
    "label": "calls",
    "to": 9
  }, {
    "from": 65,
    "label": "calls",
    "to": 9
  }, {
    "from": 65,
    "label": "calls",
    "to": 9
  }, {
    "from": 65,
    "label": "calls",
    "to": 9
  }, {
    "from": 65,
    "label": "calls",
    "to": 174
  }, {
    "from": 65,
    "label": "calls",
    "to": 174
  }, {
    "from": 28,
    "label": "calls",
    "to": 172
  }, {
    "from": 65,
    "label": "calls",
    "to": 172
  }, {
    "from": 53,
    "label": "calls",
    "to": 163
  }, {
    "from": 65,
    "label": "calls",
    "to": 163
  }, {
    "from": 23,
    "label": "calls",
    "to": 21
  }, {
    "from": 65,
    "label": "calls",
    "to": 176
  }, {
    "from": 65,
    "label": "calls",
    "to": 177
  }, {
    "from": 65,
    "label": "calls",
    "to": 167
  }, {
    "from": 9,
    "label": "calls",
    "to": 161
  }, {
    "from": 23,
    "label": "calls",
    "to": 161
  }, {
    "from": 35,
    "label": "calls",
    "to": 161
  }, {
    "from": 65,
    "label": "calls",
    "to": 168
  }, {
    "from": 9,
    "label": "calls",
    "to": 165
  }, {
    "from": 45,
    "label": "calls",
    "to": 41
  }, {
    "from": 49,
    "label": "calls",
    "to": 41
  }, {
    "from": 38,
    "label": "calls",
    "to": 169
  }, {
    "from": 35,
    "label": "calls",
    "to": 16
  }, {
    "from": 38,
    "label": "calls",
    "to": 16
  }, {
    "from": 45,
    "label": "calls",
    "to": 16
  }, {
    "from": 49,
    "label": "calls",
    "to": 16
  }, {
    "from": 53,
    "label": "calls",
    "to": 16
  }, {
    "from": 57,
    "label": "calls",
    "to": 16
  }, {
    "from": 57,
    "label": "calls",
    "to": 16
  }, {
    "from": 61,
    "label": "calls",
    "to": 16
  }, {
    "from": 61,
    "label": "calls",
    "to": 16
  }, {
    "from": 65,
    "label": "calls",
    "to": 175
  }, {
    "from": 6,
    "label": "calls",
    "to": 173
  }, {
    "from": 9,
    "label": "calls",
    "to": 173
  }, {
    "from": 65,
    "label": "calls",
    "to": 166
  }, {
    "from": 53,
    "label": "calls",
    "to": 160
  }, {
    "from": 65,
    "label": "calls",
    "to": 160
  }, {
    "from": 65,
    "label": "calls",
    "to": 6
  }, {
    "from": 65,
    "label": "calls",
    "to": 6
  }, {
    "from": 65,
    "label": "calls",
    "to": 6
  }, {
    "from": 65,
    "label": "calls",
    "to": 6
  }, {
    "from": 65,
    "label": "calls",
    "to": 6
  }, {
    "from": 9,
    "label": "calls",
    "to": 162
  }, {
    "from": 23,
    "label": "calls",
    "to": 162
  }, {
    "from": 35,
    "label": "calls",
    "to": 162
  }, {
    "from": 159,
    "label": "calls",
    "to": 65
  }, {
    "from": 159,
    "label": "calls",
    "to": 178
  }, {
    "from": 159,
    "label": "calls",
    "to": 178
  }, {
    "from": 159,
    "label": "calls",
    "to": 178
  }, {
    "from": 159,
    "label": "calls",
    "to": 178
  }, {
    "from": 159,
    "label": "calls",
    "to": 178
  }, {
    "from": 159,
    "label": "calls",
    "to": 178
  }, {
    "from": 159,
    "label": "calls",
    "to": 178
  }, {
    "from": 65,
    "label": "calls",
    "to": 171
  }, {
    "from": 65,
    "label": "calls",
    "to": 164
  }, {
    "from": 3,
    "label": "contains",
    "to": 159
  }, {
    "from": 159,
    "label": "declares",
    "to": 6
  }, {
    "from": 159,
    "label": "declares",
    "to": 9
  }, {
    "from": 159,
    "label": "declares",
    "to": 16
  }, {
    "from": 159,
    "label": "declares",
    "to": 21
  }, {
    "from": 159,
    "label": "declares",
    "to": 23
  }, {
    "from": 159,
    "label": "declares",
    "to": 28
  }, {
    "from": 159,
    "label": "declares",
    "to": 35
  }, {
    "from": 159,
    "label": "declares",
    "to": 38
  }, {
    "from": 159,
    "label": "declares",
    "to": 41
  }, {
    "from": 159,
    "label": "declares",
    "to": 45
  }, {
    "from": 159,
    "label": "declares",
    "to": 49
  }, {
    "from": 159,
    "label": "declares",
    "to": 53
  }, {
    "from": 159,
    "label": "declares",
    "to": 57
  }, {
    "from": 159,
    "label": "declares",
    "to": 61
  }, {
    "from": 159,
    "label": "declares",
    "to": 65
  }, {
    "from": 159,
    "label": "declares",
    "to": 96
  }, {
    "from": 159,
    "label": "declares",
    "to": 98
  }, {
    "from": 159,
    "label": "declares",
    "to": 101
  }, {
    "from": 159,
    "label": "declares",
    "to": 103
  }, {
    "from": 159,
    "label": "declares",
    "to": 105
  }, {
    "from": 3,
    "label": "contains",
    "to": 181
  }, {
    "from": 3,
    "label": "contains",
    "to": 182
  }, {
    "from": 182,
    "label": "initializes",
    "to": 183
  }, {
    "from": 183,
    "label": "requires",
    "to": 5
  }, {
    "from": 182,
    "label": "initializes",
    "to": 184
  }, {
    "from": 184,
    "label": "requires",
    "to": 180
  }, {
    "from": 182,
    "label": "initializes",
    "to": 185
  }, {
    "from": 185,
    "label": "requires",
    "to": 179
  }, {
    "from": 182,
    "label": "initializes",
    "to": 186
  }, {
    "from": 186,
    "label": "requires",
    "to": 1
  }, {
    "from": 182,
    "label": "initializes",
    "to": 187
  }, {
    "from": 187,
    "label": "requires",
    "to": 1
  }, {
    "from": 182,
    "label": "initializes",
    "to": 188
  }, {
    "from": 188,
    "label": "requires",
    "to": 2
  }, {
    "from": 182,
    "label": "initializes",
    "to": 189
  }, {
    "from": 189,
    "label": "requires",
    "to": 4
  }, {
    "from": 3,
    "label": "provides",
    "to": 190
  }, {
    "from": 190,
    "label": "provides",
    "to": 191
  }, {
    "from": 192,
    "label": "requires",
    "to": 3
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "compatibility",
    "type": "module"
  }, {
    "id": 2,
    "text": "core",
    "type": "module"
  }, {
    "id": 3,
    "text": "cli",
    "type": "module"
  }, {
    "id": 4,
    "text": "configuration_loader",
    "type": "module"
  }, {
    "id": 5,
    "text": "utils",
    "type": "module"
  }, {
    "id": 6,
    "text": "local function makeList(values)\r\n    return type(values) == 'table' and values or { values }\r\n  end",
    "type": "function"
  }, {
    "id": 7,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "local function fixupList(values, sep)\r\n    local sep = sep or ','\r\n    local list = type(values) == 'table' and values or { values }\r\n    local olist = {}\r\n    for _, v in ipairs(list) do\r\n      tablex.insertvalues(olist, utils.split(v, sep))\r\n    end\r\n    return olist\r\n  end",
    "type": "function"
  }, {
    "id": 10,
    "text": "local sep = sep or ','",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "local list = type(values) == 'table' and values or { values }",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "local olist = {}",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "for _, v in ipairs(list) do\r\n      tablex.insertvalues(olist, utils.split(v, sep))\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 14,
    "text": "tablex.insertvalues(olist, utils.split(v, sep))",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "local function processOption(key, value, altkey, opt)\r\n    if altkey then cliArgsParsed[altkey] = value end\r\n    cliArgsParsed[key] = value\r\n    return true\r\n  end",
    "type": "function"
  }, {
    "id": 17,
    "text": "if altkey then cliArgsParsed[altkey] = value end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "cliArgsParsed[altkey] = value",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "cliArgsParsed[key] = value",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "local function processArg(key, value)\r\n    cliArgsParsed[key] = value\r\n    return true\r\n  end",
    "type": "function"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "local function processArgList(key, value)\r\n    local list = cliArgsParsed[key] or {}\r\n    tablex.insertvalues(list, utils.split(value, ','))\r\n    processArg(key, list)\r\n    return true\r\n  end",
    "type": "function"
  }, {
    "id": 24,
    "text": "local list = cliArgsParsed[key] or {}",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "tablex.insertvalues(list, utils.split(value, ','))",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "processArg(key, list)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "local function processNumber(key, value, altkey, opt)\r\n    local number = tonumber(value)\r\n    if not number then\r\n      return nil, 'argument to ' .. opt:gsub('=.*', '') .. ' must be a number'\r\n    end\r\n    if altkey then cliArgsParsed[altkey] = number end\r\n    cliArgsParsed[key] = number\r\n    return true\r\n  end",
    "type": "function"
  }, {
    "id": 29,
    "text": "local number = tonumber(value)",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "if not number then\r\n      return nil, 'argument to ' .. opt:gsub('=.*', '') .. ' must be a number'\r\n    end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "if altkey then cliArgsParsed[altkey] = number end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "cliArgsParsed[altkey] = number",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "cliArgsParsed[key] = number",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "local function processList(key, value, altkey, opt)\r\n    local list = cliArgsParsed[key] or {}\r\n    tablex.insertvalues(list, utils.split(value, ','))\r\n    processOption(key, list, altkey, opt)\r\n    return true\r\n  end",
    "type": "function"
  }, {
    "id": 36,
    "text": "processOption(key, list, altkey, opt)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "local function processMultiOption(key, value, altkey, opt)\r\n    local list = cliArgsParsed[key] or {}\r\n    table.insert(list, value)\r\n    processOption(key, list, altkey, opt)\r\n    return true\r\n  end",
    "type": "function"
  }, {
    "id": 39,
    "text": "table.insert(list, value)",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "local function append(s1, s2, sep)\r\n    local sep = sep or ''\r\n    if not s1 then return s2 end\r\n    return s1 .. sep .. s2\r\n  end",
    "type": "function"
  }, {
    "id": 42,
    "text": "local sep = sep or ''",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "if not s1 then return s2 end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "local function processLoaders(key, value, altkey, opt)\r\n    local loaders = append(cliArgsParsed[key], value, ',')\r\n    processOption(key, loaders, altkey, opt)\r\n    return true\r\n  end",
    "type": "function"
  }, {
    "id": 46,
    "text": "local loaders = append(cliArgsParsed[key], value, ',')",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "processOption(key, loaders, altkey, opt)",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "local function processPath(key, value, altkey, opt)\r\n    local lpath = append(cliArgsParsed[key], value, ';')\r\n    processOption(key, lpath, altkey, opt)\r\n    return true\r\n  end",
    "type": "function"
  }, {
    "id": 50,
    "text": "local lpath = append(cliArgsParsed[key], value, ';')",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "processOption(key, lpath, altkey, opt)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "local function processDir(key, value, altkey, opt)\r\n    local dpath = path.normpath(path.join(cliArgsParsed[key] or '', value))\r\n    processOption(key, dpath, altkey, opt)\r\n    return true\r\n  end",
    "type": "function"
  }, {
    "id": 54,
    "text": "local dpath = path.normpath(path.join(cliArgsParsed[key] or '', value))",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "processOption(key, dpath, altkey, opt)",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "local function processShuffle(key, value, altkey, opt)\r\n    processOption('shuffle-files', value, nil, opt)\r\n    processOption('shuffle-tests', value, nil, opt)\r\n  end",
    "type": "function"
  }, {
    "id": 58,
    "text": "processOption('shuffle-files', value, nil, opt)",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "processOption('shuffle-tests', value, nil, opt)",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "local function processSort(key, value, altkey, opt)\r\n    processOption('sort-files', value, nil, opt)\r\n    processOption('sort-tests', value, nil, opt)\r\n  end",
    "type": "function"
  }, {
    "id": 62,
    "text": "processOption('sort-files', value, nil, opt)",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "processOption('sort-tests', value, nil, opt)",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "local function parse(args)\r\n    -- Parse the cli arguments\r\n    local cliArgs, cliErr = cli:parse(args)\r\n    if not cliArgs then\r\n      return nil, appName .. ': error: ' .. cliErr .. '; re-run with --help for usage.'\r\n    end\r\n\r\n    -- Load busted config file if available\r\n    local bustedConfigFilePath = cliArgs.f or path.normpath(path.join(cliArgs.directory, '.busted'))\r\n    local bustedConfigFile = loadfile(bustedConfigFilePath)\r\n    if bustedConfigFile then\r\n      local ok, config = pcall(function()\r\n        local conf, err = configLoader(bustedConfigFile(), cliArgsParsed, cliArgs)\r\n        return conf or error(err, 0)\r\n      end)\r\n      if not ok then\r\n        return nil, appName .. ': error: ' .. config\r\n      else\r\n        cliArgs = config\r\n      end\r\n    else\r\n      cliArgs = tablex.merge(cliArgs, cliArgsParsed, true)\r\n    end\r\n\r\n    -- Switch lua, we should rebuild this feature once luarocks changes how it\r\n    -- handles executeable lua files.\r\n    if cliArgs['lua'] and not cliArgs['ignore-lua'] then\r\n      local _, code = execute(\r\n        cliArgs['lua']..' '..args[0]..' --ignore-lua '..table.concat(args, ' ')\r\n      )\r\n      exit(code)\r\n    end\r\n\r\n    -- Ensure multi-options are in a list\r\n    cliArgs.e = makeList(cliArgs.e)\r\n    cliArgs.pattern = makeList(cliArgs.pattern)\r\n    cliArgs.p = cliArgs.pattern\r\n    cliArgs['exclude-pattern'] = makeList(cliArgs['exclude-pattern'])\r\n    cliArgs.filter = makeList(cliArgs.filter)\r\n    cliArgs['filter-out'] = makeList(cliArgs['filter-out'])\r\n\r\n    -- Fixup options in case options from config file are not of the right form\r\n    cliArgs.tags = fixupList(cliArgs.tags)\r\n    cliArgs.t = cliArgs.tags\r\n    cliArgs['exclude-tags'] = fixupList(cliArgs['exclude-tags'])\r\n    cliArgs.loaders = fixupList(cliArgs.loaders)\r\n    cliArgs.Xoutput = fixupList(cliArgs.Xoutput)\r\n    cliArgs.Xhelper = fixupList(cliArgs.Xhelper)\r\n\r\n    -- We report an error if the same tag appears in both `options.tags`\r\n    -- and `options.excluded_tags` because it does not make sense for the\r\n    -- user to tell Busted to include and exclude the same tests at the\r\n    -- same time.\r\n    for _, excluded in pairs(cliArgs['exclude-tags']) do\r\n      for _, included in pairs(cliArgs.tags) do\r\n        if excluded == included then\r\n          return nil, appName .. ': error: Cannot use --tags and --exclude-tags for the same tags'\r\n        end\r\n      end\r\n    end\r\n\r\n    cliArgs['repeat'] = tonumber(cliArgs['repeat'])\r\n\r\n    return cliArgs\r\n  end",
    "type": "function"
  }, {
    "id": 66,
    "text": "local cliArgs, cliErr = cli:parse(args)",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "if not cliArgs then\r\n      return nil, appName .. ': error: ' .. cliErr .. '; re-run with --help for usage.'\r\n    end",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "local bustedConfigFilePath = cliArgs.f or path.normpath(path.join(cliArgs.directory, '.busted'))",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "local bustedConfigFile = loadfile(bustedConfigFilePath)",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "if bustedConfigFile then\r\n      local ok, config = pcall(function()\r\n        local conf, err = configLoader(bustedConfigFile(), cliArgsParsed, cliArgs)\r\n        return conf or error(err, 0)\r\n      end)\r\n      if not ok then\r\n        return nil, appName .. ': error: ' .. config\r\n      else\r\n        cliArgs = config\r\n      end\r\n    else\r\n      cliArgs = tablex.merge(cliArgs, cliArgsParsed, true)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "local ok, config = pcall(function()\r\n        local conf, err = configLoader(bustedConfigFile(), cliArgsParsed, cliArgs)\r\n        return conf or error(err, 0)\r\n      end)",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "local conf, err = configLoader(bustedConfigFile(), cliArgsParsed, cliArgs)",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "if not ok then\r\n        return nil, appName .. ': error: ' .. config\r\n      else\r\n        cliArgs = config\r\n      end",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "cliArgs = config",
    "type": "statement:assign"
  }, {
    "id": 75,
    "text": "cliArgs = tablex.merge(cliArgs, cliArgsParsed, true)",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "if cliArgs['lua'] and not cliArgs['ignore-lua'] then\r\n      local _, code = execute(\r\n        cliArgs['lua']..' '..args[0]..' --ignore-lua '..table.concat(args, ' ')\r\n      )\r\n      exit(code)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "local _, code = execute(\r\n        cliArgs['lua']..' '..args[0]..' --ignore-lua '..table.concat(args, ' ')\r\n      )",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "exit(code)",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "cliArgs.e = makeList(cliArgs.e)",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "cliArgs.pattern = makeList(cliArgs.pattern)",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "cliArgs.p = cliArgs.pattern",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "cliArgs['exclude-pattern'] = makeList(cliArgs['exclude-pattern'])",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "cliArgs.filter = makeList(cliArgs.filter)",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "cliArgs['filter-out'] = makeList(cliArgs['filter-out'])",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "cliArgs.tags = fixupList(cliArgs.tags)",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "cliArgs.t = cliArgs.tags",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "cliArgs['exclude-tags'] = fixupList(cliArgs['exclude-tags'])",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "cliArgs.loaders = fixupList(cliArgs.loaders)",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "cliArgs.Xoutput = fixupList(cliArgs.Xoutput)",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "cliArgs.Xhelper = fixupList(cliArgs.Xhelper)",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "for _, excluded in pairs(cliArgs['exclude-tags']) do\r\n      for _, included in pairs(cliArgs.tags) do\r\n        if excluded == included then\r\n          return nil, appName .. ': error: Cannot use --tags and --exclude-tags for the same tags'\r\n        end\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 92,
    "text": "for _, included in pairs(cliArgs.tags) do\r\n        if excluded == included then\r\n          return nil, appName .. ': error: Cannot use --tags and --exclude-tags for the same tags'\r\n        end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 93,
    "text": "if excluded == included then\r\n          return nil, appName .. ': error: Cannot use --tags and --exclude-tags for the same tags'\r\n        end",
    "type": "statement:if"
  }, {
    "id": 94,
    "text": "cliArgs['repeat'] = tonumber(cliArgs['repeat'])",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "function()\r\n        local conf, err = configLoader(bustedConfigFile(), cliArgsParsed, cliArgs)\r\n        return conf or error(err, 0)\r\n      end",
    "type": "function"
  }, {
    "id": 97,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 98,
    "text": "function(self, name)\r\n      appName = name\r\n      return cli:set_name(name)\r\n    end",
    "type": "function"
  }, {
    "id": 99,
    "text": "appName = name",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 101,
    "text": "function(self, name)\r\n      appName = name\r\n      return cli:set_silent(name)\r\n    end",
    "type": "function"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "function(self, args)\r\n      return parse(args)\r\n    end",
    "type": "function"
  }, {
    "id": 104,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 105,
    "text": "function(options)\r\n  local appName = ''\r\n  local options = options or {}\r\n  local cli = require 'cliargs.core'()\r\n\r\n  local configLoader = require 'busted.modules.configuration_loader'()\r\n\r\n  -- Default cli arg values\r\n  local defaultOutput = options.output or 'utfTerminal'\r\n  local defaultLoaders = 'lua,moonscript'\r\n  local defaultPattern = '_spec'\r\n  local defaultSeed = '/dev/urandom or os.time()'\r\n  local lpathprefix = './src/?.lua;./src/?/?.lua;./src/?/init.lua'\r\n  local cpathprefix = path.is_windows and './csrc/?.dll;./csrc/?/?.dll;' or './csrc/?.so;./csrc/?/?.so;'\r\n\r\n  local cliArgsParsed = {}\r\n\r\n  local function makeList(values)\r\n    return type(values) == 'table' and values or { values }\r\n  end\r\n\r\n  local function fixupList(values, sep)\r\n    local sep = sep or ','\r\n    local list = type(values) == 'table' and values or { values }\r\n    local olist = {}\r\n    for _, v in ipairs(list) do\r\n      tablex.insertvalues(olist, utils.split(v, sep))\r\n    end\r\n    return olist\r\n  end\r\n\r\n  local function processOption(key, value, altkey, opt)\r\n    if altkey then cliArgsParsed[altkey] = value end\r\n    cliArgsParsed[key] = value\r\n    return true\r\n  end\r\n\r\n  local function processArg(key, value)\r\n    cliArgsParsed[key] = value\r\n    return true\r\n  end\r\n\r\n  local function processArgList(key, value)\r\n    local list = cliArgsParsed[key] or {}\r\n    tablex.insertvalues(list, utils.split(value, ','))\r\n    processArg(key, list)\r\n    return true\r\n  end\r\n\r\n  local function processNumber(key, value, altkey, opt)\r\n    local number = tonumber(value)\r\n    if not number then\r\n      return nil, 'argument to ' .. opt:gsub('=.*', '') .. ' must be a number'\r\n    end\r\n    if altkey then cliArgsParsed[altkey] = number end\r\n    cliArgsParsed[key] = number\r\n    return true\r\n  end\r\n\r\n  local function processList(key, value, altkey, opt)\r\n    local list = cliArgsParsed[key] or {}\r\n    tablex.insertvalues(list, utils.split(value, ','))\r\n    processOption(key, list, altkey, opt)\r\n    return true\r\n  end\r\n\r\n  local function processMultiOption(key, value, altkey, opt)\r\n    local list = cliArgsParsed[key] or {}\r\n    table.insert(list, value)\r\n    processOption(key, list, altkey, opt)\r\n    return true\r\n  end\r\n\r\n  local function append(s1, s2, sep)\r\n    local sep = sep or ''\r\n    if not s1 then return s2 end\r\n    return s1 .. sep .. s2\r\n  end\r\n\r\n  local function processLoaders(key, value, altkey, opt)\r\n    local loaders = append(cliArgsParsed[key], value, ',')\r\n    processOption(key, loaders, altkey, opt)\r\n    return true\r\n  end\r\n\r\n  local function processPath(key, value, altkey, opt)\r\n    local lpath = append(cliArgsParsed[key], value, ';')\r\n    processOption(key, lpath, altkey, opt)\r\n    return true\r\n  end\r\n\r\n  local function processDir(key, value, altkey, opt)\r\n    local dpath = path.normpath(path.join(cliArgsParsed[key] or '', value))\r\n    processOption(key, dpath, altkey, opt)\r\n    return true\r\n  end\r\n\r\n  local function processShuffle(key, value, altkey, opt)\r\n    processOption('shuffle-files', value, nil, opt)\r\n    processOption('shuffle-tests', value, nil, opt)\r\n  end\r\n\r\n  local function processSort(key, value, altkey, opt)\r\n    processOption('sort-files', value, nil, opt)\r\n    processOption('sort-tests', value, nil, opt)\r\n  end\r\n\r\n  -- Load up the command-line interface options\r\n  cli:flag('--version', 'prints the program version and exits', false, processOption)\r\n\r\n  if not options.standalone then\r\n    cli:splat('ROOT', 'test script file/folder. Folders will be traversed for any file that matches the --pattern option.', 'spec', 999, processArgList)\r\n\r\n    cli:option('-p, --pattern=PATTERN', 'only run test files matching the Lua pattern', defaultPattern, processMultiOption)\r\n    cli:option('--exclude-pattern=PATTERN', 'do not run test files matching the Lua pattern, takes precedence over --pattern', nil, processMultiOption)\r\n  end\r\n\r\n  cli:option('-e STATEMENT', 'execute statement STATEMENT', nil, processMultiOption)\r\n  cli:option('-o, --output=LIBRARY', 'output library to load', defaultOutput, processOption)\r\n  cli:option('-C, --directory=DIR', 'change to directory DIR before running tests. If multiple options are specified, each is interpreted relative to the previous one.', './', processDir)\r\n  cli:option('-f, --config-file=FILE', 'load configuration options from FILE', nil, processOptions)\r\n  cli:option('-t, --tags=TAGS', 'only run tests with these #tags', {}, processList)\r\n  cli:option('--exclude-tags=TAGS', 'do not run tests with these #tags, takes precedence over --tags', {}, processList)\r\n  cli:option('--filter=PATTERN', 'only run test names matching the Lua pattern', {}, processMultiOption)\r\n  cli:option('--filter-out=PATTERN', 'do not run test names matching the Lua pattern, takes precedence over --filter', {}, processMultiOption)\r\n  cli:option('-m, --lpath=PATH', 'optional path to be prefixed to the Lua module search path', lpathprefix, processPath)\r\n  cli:option('--cpath=PATH', 'optional path to be prefixed to the Lua C module search path', cpathprefix, processPath)\r\n  cli:option('-r, --run=RUN', 'config to run from .busted file', nil, processOption)\r\n  cli:option('--repeat=COUNT', 'run the tests repeatedly', '1', processNumber)\r\n  cli:option('--seed=SEED', 'random seed value to use for shuffling test order', defaultSeed, processNumber)\r\n  cli:option('--lang=LANG', 'language for error messages', 'en', processOption)\r\n  cli:option('--loaders=NAME', 'test file loaders', defaultLoaders, processLoaders)\r\n  cli:option('--helper=PATH', 'A helper script that is run before tests', nil, processOption)\r\n  cli:option('--lua=LUA', 'The path to the lua interpreter busted should run under', nil, processOption)\r\n\r\n  cli:option('-Xoutput OPTION', 'pass `OPTION` as an option to the output handler. If `OPTION` contains commas, it is split into multiple options at the commas.', {}, processList)\r\n  cli:option('-Xhelper OPTION', 'pass `OPTION` as an option to the helper script. If `OPTION` contains commas, it is split into multiple options at the commas.', {}, processList)\r\n\r\n  cli:flag('-c, --[no-]coverage', 'do code coverage analysis (requires `LuaCov` to be installed)', false, processOption)\r\n  cli:flag('-v, --[no-]verbose', 'verbose output of errors', false, processOption)\r\n  cli:flag('-s, --[no-]enable-sound', 'executes `say` command if available', false, processOption)\r\n  cli:flag('-l, --list', 'list the names of all tests instead of running them', false, processOption)\r\n  cli:flag('--ignore-lua', 'Whether or not to ignore the lua directive', false, processOption)\r\n  cli:flag('--[no-]lazy', 'use lazy setup/teardown as the default', false, processOption)\r\n  cli:flag('--[no-]auto-insulate', 'enable file insulation', true, processOption)\r\n  cli:flag('-k, --[no-]keep-going', 'continue as much as possible after an error or failure', true, processOption)\r\n  cli:flag('-R, --[no-]recursive', 'recurse into subdirectories', true, processOption)\r\n  cli:flag('--[no-]shuffle', 'randomize file and test order, takes precedence over --sort (--shuffle-test and --shuffle-files)', processShuffle)\r\n  cli:flag('--[no-]shuffle-files', 'randomize file execution order, takes precedence over --sort-files', processOption)\r\n  cli:flag('--[no-]shuffle-tests', 'randomize test order within a file, takes precedence over --sort-tests', processOption)\r\n  cli:flag('--[no-]sort', 'sort file and test order (--sort-tests and --sort-files)', processSort)\r\n  cli:flag('--[no-]sort-files', 'sort file execution order', processOption)\r\n  cli:flag('--[no-]sort-tests', 'sort test order within a file', processOption)\r\n  cli:flag('--[no-]suppress-pending', 'suppress `pending` test output', false, processOption)\r\n  cli:flag('--[no-]defer-print', 'defer print to when test suite is complete', false, processOption)\r\n\r\n  local function parse(args)\r\n    -- Parse the cli arguments\r\n    local cliArgs, cliErr = cli:parse(args)\r\n    if not cliArgs then\r\n      return nil, appName .. ': error: ' .. cliErr .. '; re-run with --help for usage.'\r\n    end\r\n\r\n    -- Load busted config file if available\r\n    local bustedConfigFilePath = cliArgs.f or path.normpath(path.join(cliArgs.directory, '.busted'))\r\n    local bustedConfigFile = loadfile(bustedConfigFilePath)\r\n    if bustedConfigFile then\r\n      local ok, config = pcall(function()\r\n        local conf, err = configLoader(bustedConfigFile(), cliArgsParsed, cliArgs)\r\n        return conf or error(err, 0)\r\n      end)\r\n      if not ok then\r\n        return nil, appName .. ': error: ' .. config\r\n      else\r\n        cliArgs = config\r\n      end\r\n    else\r\n      cliArgs = tablex.merge(cliArgs, cliArgsParsed, true)\r\n    end\r\n\r\n    -- Switch lua, we should rebuild this feature once luarocks changes how it\r\n    -- handles executeable lua files.\r\n    if cliArgs['lua'] and not cliArgs['ignore-lua'] then\r\n      local _, code = execute(\r\n        cliArgs['lua']..' '..args[0]..' --ignore-lua '..table.concat(args, ' ')\r\n      )\r\n      exit(code)\r\n    end\r\n\r\n    -- Ensure multi-options are in a list\r\n    cliArgs.e = makeList(cliArgs.e)\r\n    cliArgs.pattern = makeList(cliArgs.pattern)\r\n    cliArgs.p = cliArgs.pattern\r\n    cliArgs['exclude-pattern'] = makeList(cliArgs['exclude-pattern'])\r\n    cliArgs.filter = makeList(cliArgs.filter)\r\n    cliArgs['filter-out'] = makeList(cliArgs['filter-out'])\r\n\r\n    -- Fixup options in case options from config file are not of the right form\r\n    cliArgs.tags = fixupList(cliArgs.tags)\r\n    cliArgs.t = cliArgs.tags\r\n    cliArgs['exclude-tags'] = fixupList(cliArgs['exclude-tags'])\r\n    cliArgs.loaders = fixupList(cliArgs.loaders)\r\n    cliArgs.Xoutput = fixupList(cliArgs.Xoutput)\r\n    cliArgs.Xhelper = fixupList(cliArgs.Xhelper)\r\n\r\n    -- We report an error if the same tag appears in both `options.tags`\r\n    -- and `options.excluded_tags` because it does not make sense for the\r\n    -- user to tell Busted to include and exclude the same tests at the\r\n    -- same time.\r\n    for _, excluded in pairs(cliArgs['exclude-tags']) do\r\n      for _, included in pairs(cliArgs.tags) do\r\n        if excluded == included then\r\n          return nil, appName .. ': error: Cannot use --tags and --exclude-tags for the same tags'\r\n        end\r\n      end\r\n    end\r\n\r\n    cliArgs['repeat'] = tonumber(cliArgs['repeat'])\r\n\r\n    return cliArgs\r\n  end\r\n\r\n  return {\r\n    set_name = function(self, name)\r\n      appName = name\r\n      return cli:set_name(name)\r\n    end,\r\n\r\n    set_silent = function(self, name)\r\n      appName = name\r\n      return cli:set_silent(name)\r\n    end,\r\n\r\n    parse = function(self, args)\r\n      return parse(args)\r\n    end\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 106,
    "text": "local appName = ''",
    "type": "statement:localassign"
  }, {
    "id": 107,
    "text": "local options = options or {}",
    "type": "statement:localassign"
  }, {
    "id": 108,
    "text": "local cli = require 'cliargs.core'()",
    "type": "statement:localassign"
  }, {
    "id": 109,
    "text": "local configLoader = require 'busted.modules.configuration_loader'()",
    "type": "statement:localassign"
  }, {
    "id": 110,
    "text": "local defaultOutput = options.output or 'utfTerminal'",
    "type": "statement:localassign"
  }, {
    "id": 111,
    "text": "local defaultLoaders = 'lua,moonscript'",
    "type": "statement:localassign"
  }, {
    "id": 112,
    "text": "local defaultPattern = '_spec'",
    "type": "statement:localassign"
  }, {
    "id": 113,
    "text": "local defaultSeed = '/dev/urandom or os.time()'",
    "type": "statement:localassign"
  }, {
    "id": 114,
    "text": "local lpathprefix = './src/?.lua;./src/?/?.lua;./src/?/init.lua'",
    "type": "statement:localassign"
  }, {
    "id": 115,
    "text": "local cpathprefix = path.is_windows and './csrc/?.dll;./csrc/?/?.dll;' or './csrc/?.so;./csrc/?/?.so;'",
    "type": "statement:localassign"
  }, {
    "id": 116,
    "text": "local cliArgsParsed = {}",
    "type": "statement:localassign"
  }, {
    "id": 117,
    "text": "cli:flag('--version', 'prints the program version and exits', false, processOption)",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "if not options.standalone then\r\n    cli:splat('ROOT', 'test script file/folder. Folders will be traversed for any file that matches the --pattern option.', 'spec', 999, processArgList)\r\n\r\n    cli:option('-p, --pattern=PATTERN', 'only run test files matching the Lua pattern', defaultPattern, processMultiOption)\r\n    cli:option('--exclude-pattern=PATTERN', 'do not run test files matching the Lua pattern, takes precedence over --pattern', nil, processMultiOption)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 119,
    "text": "cli:splat('ROOT', 'test script file/folder. Folders will be traversed for any file that matches the --pattern option.', 'spec', 999, processArgList)",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "cli:option('-p, --pattern=PATTERN', 'only run test files matching the Lua pattern', defaultPattern, processMultiOption)",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "cli:option('--exclude-pattern=PATTERN', 'do not run test files matching the Lua pattern, takes precedence over --pattern', nil, processMultiOption)",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "cli:option('-e STATEMENT', 'execute statement STATEMENT', nil, processMultiOption)",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "cli:option('-o, --output=LIBRARY', 'output library to load', defaultOutput, processOption)",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "cli:option('-C, --directory=DIR', 'change to directory DIR before running tests. If multiple options are specified, each is interpreted relative to the previous one.', './', processDir)",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "cli:option('-f, --config-file=FILE', 'load configuration options from FILE', nil, processOptions)",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "cli:option('-t, --tags=TAGS', 'only run tests with these #tags', {}, processList)",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "cli:option('--exclude-tags=TAGS', 'do not run tests with these #tags, takes precedence over --tags', {}, processList)",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "cli:option('--filter=PATTERN', 'only run test names matching the Lua pattern', {}, processMultiOption)",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "cli:option('--filter-out=PATTERN', 'do not run test names matching the Lua pattern, takes precedence over --filter', {}, processMultiOption)",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "cli:option('-m, --lpath=PATH', 'optional path to be prefixed to the Lua module search path', lpathprefix, processPath)",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "cli:option('--cpath=PATH', 'optional path to be prefixed to the Lua C module search path', cpathprefix, processPath)",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "cli:option('-r, --run=RUN', 'config to run from .busted file', nil, processOption)",
    "type": "statement:functioncall"
  }, {
    "id": 133,
    "text": "cli:option('--repeat=COUNT', 'run the tests repeatedly', '1', processNumber)",
    "type": "statement:functioncall"
  }, {
    "id": 134,
    "text": "cli:option('--seed=SEED', 'random seed value to use for shuffling test order', defaultSeed, processNumber)",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "cli:option('--lang=LANG', 'language for error messages', 'en', processOption)",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "cli:option('--loaders=NAME', 'test file loaders', defaultLoaders, processLoaders)",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "cli:option('--helper=PATH', 'A helper script that is run before tests', nil, processOption)",
    "type": "statement:functioncall"
  }, {
    "id": 138,
    "text": "cli:option('--lua=LUA', 'The path to the lua interpreter busted should run under', nil, processOption)",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "cli:option('-Xoutput OPTION', 'pass `OPTION` as an option to the output handler. If `OPTION` contains commas, it is split into multiple options at the commas.', {}, processList)",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "cli:option('-Xhelper OPTION', 'pass `OPTION` as an option to the helper script. If `OPTION` contains commas, it is split into multiple options at the commas.', {}, processList)",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "cli:flag('-c, --[no-]coverage', 'do code coverage analysis (requires `LuaCov` to be installed)', false, processOption)",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "cli:flag('-v, --[no-]verbose', 'verbose output of errors', false, processOption)",
    "type": "statement:functioncall"
  }, {
    "id": 143,
    "text": "cli:flag('-s, --[no-]enable-sound', 'executes `say` command if available', false, processOption)",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "cli:flag('-l, --list', 'list the names of all tests instead of running them', false, processOption)",
    "type": "statement:functioncall"
  }, {
    "id": 145,
    "text": "cli:flag('--ignore-lua', 'Whether or not to ignore the lua directive', false, processOption)",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "cli:flag('--[no-]lazy', 'use lazy setup/teardown as the default', false, processOption)",
    "type": "statement:functioncall"
  }, {
    "id": 147,
    "text": "cli:flag('--[no-]auto-insulate', 'enable file insulation', true, processOption)",
    "type": "statement:functioncall"
  }, {
    "id": 148,
    "text": "cli:flag('-k, --[no-]keep-going', 'continue as much as possible after an error or failure', true, processOption)",
    "type": "statement:functioncall"
  }, {
    "id": 149,
    "text": "cli:flag('-R, --[no-]recursive', 'recurse into subdirectories', true, processOption)",
    "type": "statement:functioncall"
  }, {
    "id": 150,
    "text": "cli:flag('--[no-]shuffle', 'randomize file and test order, takes precedence over --sort (--shuffle-test and --shuffle-files)', processShuffle)",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "cli:flag('--[no-]shuffle-files', 'randomize file execution order, takes precedence over --sort-files', processOption)",
    "type": "statement:functioncall"
  }, {
    "id": 152,
    "text": "cli:flag('--[no-]shuffle-tests', 'randomize test order within a file, takes precedence over --sort-tests', processOption)",
    "type": "statement:functioncall"
  }, {
    "id": 153,
    "text": "cli:flag('--[no-]sort', 'sort file and test order (--sort-tests and --sort-files)', processSort)",
    "type": "statement:functioncall"
  }, {
    "id": 154,
    "text": "cli:flag('--[no-]sort-files', 'sort file execution order', processOption)",
    "type": "statement:functioncall"
  }, {
    "id": 155,
    "text": "cli:flag('--[no-]sort-tests', 'sort test order within a file', processOption)",
    "type": "statement:functioncall"
  }, {
    "id": 156,
    "text": "cli:flag('--[no-]suppress-pending', 'suppress `pending` test output', false, processOption)",
    "type": "statement:functioncall"
  }, {
    "id": 157,
    "text": "cli:flag('--[no-]defer-print', 'defer print to when test suite is complete', false, processOption)",
    "type": "statement:functioncall"
  }, {
    "id": 158,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 159,
    "text": "",
    "type": "function container"
  }, {
    "id": 160,
    "text": "join",
    "type": "global function"
  }, {
    "id": 161,
    "text": "split",
    "type": "global function"
  }, {
    "id": 162,
    "text": "insertvalues",
    "type": "global function"
  }, {
    "id": 163,
    "text": "normpath",
    "type": "global function"
  }, {
    "id": 164,
    "text": "merge",
    "type": "global function"
  }, {
    "id": 165,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 166,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 167,
    "text": "bustedConfigFile",
    "type": "global function"
  }, {
    "id": 168,
    "text": "execute",
    "type": "global function"
  }, {
    "id": 169,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 170,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 171,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 172,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 173,
    "text": "type",
    "type": "global function"
  }, {
    "id": 174,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 175,
    "text": "loadfile",
    "type": "global function"
  }, {
    "id": 176,
    "text": "error",
    "type": "global function"
  }, {
    "id": 177,
    "text": "configLoader",
    "type": "global function"
  }, {
    "id": 178,
    "text": "require",
    "type": "global function"
  }, {
    "id": 179,
    "text": "tablex",
    "type": "module"
  }, {
    "id": 180,
    "text": "path",
    "type": "module"
  }, {
    "id": 181,
    "text": "",
    "type": "variable container"
  }, {
    "id": 182,
    "text": "",
    "type": "require container"
  }, {
    "id": 183,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 184,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 185,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 186,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 187,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 188,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 189,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 190,
    "text": "",
    "type": "interface container"
  }, {
    "id": 191,
    "text": "",
    "type": "interface"
  }, {
    "id": 192,
    "text": "",
    "type": "require local variable"
  } ]
}