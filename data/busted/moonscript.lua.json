{
  "_filename": "moonscript.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/busted/busted/modules/files/moonscript.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 4,
    "label": "has",
    "to": 9
  }, {
    "from": 4,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 11,
    "label": "has",
    "to": 9
  }, {
    "from": 11,
    "label": "has",
    "to": 9
  }, {
    "from": 11,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 9
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 9
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 19,
    "label": "has",
    "to": 9
  }, {
    "from": 19,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 20
  }, {
    "from": 29,
    "label": "has",
    "to": 9
  }, {
    "from": 29,
    "label": "has",
    "to": 21
  }, {
    "from": 29,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 29,
    "label": "has",
    "to": 9
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 32,
    "label": "has",
    "to": 36
  }, {
    "from": 28,
    "label": "has",
    "to": 9
  }, {
    "from": 28,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 38,
    "label": "has",
    "to": 42
  }, {
    "from": 38,
    "label": "has",
    "to": 43
  }, {
    "from": 38,
    "label": "has",
    "to": 44
  }, {
    "from": 38,
    "label": "has",
    "to": 9
  }, {
    "from": 38,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 46,
    "label": "has",
    "to": 9
  }, {
    "from": 46,
    "label": "has",
    "to": 23
  }, {
    "from": 46,
    "label": "has",
    "to": 49
  }, {
    "from": 46,
    "label": "has",
    "to": 9
  }, {
    "from": 46,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 9
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 53,
    "label": "has",
    "to": 9
  }, {
    "from": 53,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 9
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "calls",
    "to": 19
  }, {
    "from": 60,
    "label": "calls",
    "to": 19
  }, {
    "from": 60,
    "label": "calls",
    "to": 4
  }, {
    "from": 60,
    "label": "calls",
    "to": 70
  }, {
    "from": 60,
    "label": "calls",
    "to": 70
  }, {
    "from": 60,
    "label": "calls",
    "to": 70
  }, {
    "from": 60,
    "label": "calls",
    "to": 70
  }, {
    "from": 60,
    "label": "calls",
    "to": 69
  }, {
    "from": 60,
    "label": "calls",
    "to": 63
  }, {
    "from": 60,
    "label": "calls",
    "to": 72
  }, {
    "from": 60,
    "label": "calls",
    "to": 28
  }, {
    "from": 60,
    "label": "calls",
    "to": 64
  }, {
    "from": 60,
    "label": "calls",
    "to": 65
  }, {
    "from": 60,
    "label": "calls",
    "to": 71
  }, {
    "from": 60,
    "label": "calls",
    "to": 68
  }, {
    "from": 60,
    "label": "calls",
    "to": 17
  }, {
    "from": 60,
    "label": "calls",
    "to": 17
  }, {
    "from": 60,
    "label": "calls",
    "to": 17
  }, {
    "from": 60,
    "label": "calls",
    "to": 73
  }, {
    "from": 60,
    "label": "calls",
    "to": 73
  }, {
    "from": 60,
    "label": "calls",
    "to": 73
  }, {
    "from": 60,
    "label": "calls",
    "to": 73
  }, {
    "from": 60,
    "label": "calls",
    "to": 11
  }, {
    "from": 60,
    "label": "calls",
    "to": 11
  }, {
    "from": 60,
    "label": "calls",
    "to": 11
  }, {
    "from": 60,
    "label": "calls",
    "to": 11
  }, {
    "from": 60,
    "label": "calls",
    "to": 66
  }, {
    "from": 1,
    "label": "contains",
    "to": 60
  }, {
    "from": 60,
    "label": "declares",
    "to": 4
  }, {
    "from": 60,
    "label": "declares",
    "to": 11
  }, {
    "from": 60,
    "label": "declares",
    "to": 17
  }, {
    "from": 60,
    "label": "declares",
    "to": 19
  }, {
    "from": 60,
    "label": "declares",
    "to": 28
  }, {
    "from": 60,
    "label": "declares",
    "to": 38
  }, {
    "from": 60,
    "label": "declares",
    "to": 46
  }, {
    "from": 60,
    "label": "declares",
    "to": 51
  }, {
    "from": 60,
    "label": "declares",
    "to": 53
  }, {
    "from": 60,
    "label": "declares",
    "to": 58
  }, {
    "from": 1,
    "label": "declares",
    "to": 64
  }, {
    "from": 1,
    "label": "declares",
    "to": 67
  }, {
    "from": 1,
    "label": "contains",
    "to": 76
  }, {
    "from": 1,
    "label": "contains",
    "to": 77
  }, {
    "from": 76,
    "label": "initializes",
    "to": 78
  }, {
    "from": 78,
    "label": "assigns",
    "to": 79
  }, {
    "from": 76,
    "label": "initializes",
    "to": 80
  }, {
    "from": 76,
    "label": "initializes",
    "to": 81
  }, {
    "from": 76,
    "label": "initializes",
    "to": 82
  }, {
    "from": 76,
    "label": "initializes",
    "to": 83
  }, {
    "from": 83,
    "label": "assigns",
    "to": 84
  }, {
    "from": 76,
    "label": "initializes",
    "to": 85
  }, {
    "from": 85,
    "label": "assigns",
    "to": 86
  }, {
    "from": 76,
    "label": "initializes",
    "to": 87
  }, {
    "from": 87,
    "label": "assigns",
    "to": 88
  }, {
    "from": 76,
    "label": "initializes",
    "to": 89
  }, {
    "from": 89,
    "label": "assigns",
    "to": 90
  }, {
    "from": 76,
    "label": "initializes",
    "to": 91
  }, {
    "from": 91,
    "label": "assigns",
    "to": 92
  }, {
    "from": 76,
    "label": "initializes",
    "to": 93
  }, {
    "from": 93,
    "label": "assigns",
    "to": 94
  }, {
    "from": 76,
    "label": "initializes",
    "to": 95
  }, {
    "from": 95,
    "label": "assigns",
    "to": 96
  }, {
    "from": 76,
    "label": "initializes",
    "to": 97
  }, {
    "from": 97,
    "label": "assigns",
    "to": 98
  }, {
    "from": 76,
    "label": "initializes",
    "to": 99
  }, {
    "from": 99,
    "label": "assigns",
    "to": 100
  }, {
    "from": 76,
    "label": "initializes",
    "to": 101
  }, {
    "from": 101,
    "label": "assigns",
    "to": 102
  }, {
    "from": 77,
    "label": "initializes",
    "to": 103
  }, {
    "from": 103,
    "label": "requires",
    "to": 74
  }, {
    "from": 1,
    "label": "provides",
    "to": 104
  }, {
    "from": 75,
    "label": "represents",
    "to": 105
  }, {
    "from": 104,
    "label": "provides",
    "to": 105
  }, {
    "from": 93,
    "label": "contains",
    "to": 2
  }, {
    "from": 93,
    "label": "contains",
    "to": 3
  }, {
    "from": 75,
    "label": "contains",
    "to": 51
  }, {
    "from": 93,
    "label": "contains",
    "to": 51
  }, {
    "from": 106,
    "label": "contains",
    "to": 51
  }, {
    "from": 75,
    "label": "contains",
    "to": 53
  }, {
    "from": 93,
    "label": "contains",
    "to": 53
  }, {
    "from": 106,
    "label": "contains",
    "to": 53
  }, {
    "from": 93,
    "label": "contains",
    "to": 61
  }, {
    "from": 93,
    "label": "contains",
    "to": 62
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "moonscript",
    "type": "module"
  }, {
    "id": 2,
    "text": "function(busted, filename)\r\n  return path.extension(filename) == '.lua'\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function(busted, filename)\r\n  local file, err = loadfile(filename)\r\n  if not file then\r\n    busted.publish({ 'error', 'file' }, { descriptor = 'file', name = filename }, nil, err, {})\r\n  end\r\n  return file, getTrace\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function(fname, pos)\r\n  if not _cache[fname] then\r\n    local f = io.open(fname)\r\n    _cache[fname] = f:read('*a')\r\n    f:close()\r\n  end\r\n\r\n  return util.pos_to_line(_cache[fname], pos)\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "if not _cache[fname] then\r\n    local f = io.open(fname)\r\n    _cache[fname] = f:read('*a')\r\n    f:close()\r\n  end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "local f = io.open(fname)",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "_cache[fname] = f:read('*a')",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function(fname, lineno)\r\n  local tbl = line_tables['@' .. fname]\r\n  if fname and tbl then\r\n    for i = lineno, 0 ,-1 do\r\n      if tbl[i] then\r\n        return lookup_line(fname, tbl[i])\r\n      end\r\n    end\r\n  end\r\n\r\n  return lineno\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "local tbl = line_tables['@' .. fname]",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "if fname and tbl then\r\n    for i = lineno, 0 ,-1 do\r\n      if tbl[i] then\r\n        return lookup_line(fname, tbl[i])\r\n      end\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "for i = lineno, 0 ,-1 do\r\n      if tbl[i] then\r\n        return lookup_line(fname, tbl[i])\r\n      end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 15,
    "text": "if tbl[i] then\r\n        return lookup_line(fname, tbl[i])\r\n      end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function(filename)\r\n  -- sometimes moonscript gives files like [string \"./filename.moon\"], so\r\n  -- we'll chop it up to only get the filename.\r\n  return filename:match('string \"(.+)\"') or filename\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function(line, pattern, sub)\r\n    if line == nil then return '' end\r\n\r\n    local fname, lineno = line:match(pattern)\r\n\r\n    if fname and lineno then\r\n      fname = rewrite_filename(fname)\r\n      local new_lineno = rewrite_linenumber(fname, tonumber(lineno))\r\n      if new_lineno then\r\n        line = line:gsub(sub:format(tonumber(lineno)), sub:format(tonumber(new_lineno)))\r\n      end\r\n    end\r\n\r\n    return line\r\n  end",
    "type": "function"
  }, {
    "id": 20,
    "text": "if line == nil then return '' end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "local fname, lineno = line:match(pattern)",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "if fname and lineno then\r\n      fname = rewrite_filename(fname)\r\n      local new_lineno = rewrite_linenumber(fname, tonumber(lineno))\r\n      if new_lineno then\r\n        line = line:gsub(sub:format(tonumber(lineno)), sub:format(tonumber(new_lineno)))\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "fname = rewrite_filename(fname)",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "local new_lineno = rewrite_linenumber(fname, tonumber(lineno))",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "if new_lineno then\r\n        line = line:gsub(sub:format(tonumber(lineno)), sub:format(tonumber(new_lineno)))\r\n      end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "line = line:gsub(sub:format(tonumber(lineno)), sub:format(tonumber(new_lineno)))",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function(fname, trace)\r\n  local rewrite_one = function(line, pattern, sub)\r\n    if line == nil then return '' end\r\n\r\n    local fname, lineno = line:match(pattern)\r\n\r\n    if fname and lineno then\r\n      fname = rewrite_filename(fname)\r\n      local new_lineno = rewrite_linenumber(fname, tonumber(lineno))\r\n      if new_lineno then\r\n        line = line:gsub(sub:format(tonumber(lineno)), sub:format(tonumber(new_lineno)))\r\n      end\r\n    end\r\n\r\n    return line\r\n  end\r\n\r\n  local lines = {}\r\n  local j = 0\r\n\r\n  for line in trace:gmatch('[^\\r\\n]+') do\r\n    j = j + 1\r\n    line = rewrite_one(line, '%s*(.-):(%d+): ', ':%d:')\r\n    line = rewrite_one(line, '<(.*):(%d+)>', ':%d>')\r\n    lines[j] = line\r\n  end\r\n\r\n  return '\\n' .. table.concat(lines, trace:match('[\\r\\n]+')) .. '\\n'\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "local rewrite_one = function(line, pattern, sub)\r\n    if line == nil then return '' end\r\n\r\n    local fname, lineno = line:match(pattern)\r\n\r\n    if fname and lineno then\r\n      fname = rewrite_filename(fname)\r\n      local new_lineno = rewrite_linenumber(fname, tonumber(lineno))\r\n      if new_lineno then\r\n        line = line:gsub(sub:format(tonumber(lineno)), sub:format(tonumber(new_lineno)))\r\n      end\r\n    end\r\n\r\n    return line\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "local lines = {}",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "local j = 0",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "for line in trace:gmatch('[^\\r\\n]+') do\r\n    j = j + 1\r\n    line = rewrite_one(line, '%s*(.-):(%d+): ', ':%d:')\r\n    line = rewrite_one(line, '<(.*):(%d+)>', ':%d>')\r\n    lines[j] = line\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 33,
    "text": "j = j + 1",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "line = rewrite_one(line, '%s*(.-):(%d+): ', ':%d:')",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "line = rewrite_one(line, '<(.*):(%d+)>', ':%d>')",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "lines[j] = line",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function(filename, info)\r\n  local index = info.traceback:find('\\n%s*%[C]')\r\n  info.traceback = info.traceback:sub(1, index)\r\n\r\n  info.short_src = rewrite_filename(info.short_src)\r\n  info.traceback = rewrite_traceback(filename, info.traceback)\r\n  info.linedefined = rewrite_linenumber(filename, info.linedefined)\r\n  info.currentline = rewrite_linenumber(filename, info.currentline)\r\n\r\n  return info\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "local index = info.traceback:find('\\n%s*%[C]')",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "info.traceback = info.traceback:sub(1, index)",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "info.short_src = rewrite_filename(info.short_src)",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "info.traceback = rewrite_traceback(filename, info.traceback)",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "info.linedefined = rewrite_linenumber(filename, info.linedefined)",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "info.currentline = rewrite_linenumber(filename, info.currentline)",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function(filename, message)\r\n  local fname, line, msg = message:match('^([^\\n]-):(%d+): (.*)')\r\n  if not fname then\r\n    return message\r\n  end\r\n\r\n  fname = rewrite_filename(fname)\r\n  line = rewrite_linenumber(fname, tonumber(line))\r\n\r\n  return fname .. ':' .. tostring(line) .. ': ' .. msg\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "local fname, line, msg = message:match('^([^\\n]-):(%d+): (.*)')",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "if not fname then\r\n    return message\r\n  end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "line = rewrite_linenumber(fname, tonumber(line))",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "function(busted, filename)\r\n  return ok and path.extension(filename) == '.moon'\r\nend",
    "type": "function"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function(busted, filename)\r\n  local file, err = moonscript.loadfile(filename)\r\n  if not file then\r\n    busted.publish({ 'error', 'file' }, { descriptor = 'file', name = filename }, nil, err, {})\r\n  end\r\n  return file, getTrace, rewriteMessage\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "local file, err = moonscript.loadfile(filename)",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "if not file then\r\n    busted.publish({ 'error', 'file' }, { descriptor = 'file', name = filename }, nil, err, {})\r\n  end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "busted.publish({ 'error', 'file' }, { descriptor = 'file', name = filename }, nil, err, {})",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function()\r\n  return require 'moonscript', require 'moonscript.line_tables', require 'moonscript.util'\r\nend",
    "type": "function"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "",
    "type": "function container"
  }, {
    "id": 61,
    "text": "function(busted, filename)\r\n  return ok and path.extension(filename) == '.t'\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "function(busted, filename)\r\n  local file, err = terralib.loadfile(filename)\r\n  if not file then\r\n    busted.publish({ 'error', 'file' }, { descriptor = 'file', name = filename }, nil, err, {})\r\n  end\r\n  return file, getTrace\r\nend",
    "type": "function"
  }, {
    "id": 63,
    "text": "publish",
    "type": "global function"
  }, {
    "id": 64,
    "text": "loadfile",
    "type": "global function"
  }, {
    "id": 65,
    "text": "extension",
    "type": "global function"
  }, {
    "id": 66,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 67,
    "text": "dofile",
    "type": "global function"
  }, {
    "id": 68,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 69,
    "text": "pos_to_line",
    "type": "global function"
  }, {
    "id": 70,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 71,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 72,
    "text": "open",
    "type": "global function"
  }, {
    "id": 73,
    "text": "require",
    "type": "global function"
  }, {
    "id": 74,
    "text": "path",
    "type": "module"
  }, {
    "id": 75,
    "text": "",
    "type": "local variable"
  }, {
    "id": 76,
    "text": "",
    "type": "variable container"
  }, {
    "id": 77,
    "text": "",
    "type": "require container"
  }, {
    "id": 78,
    "text": "",
    "type": "local variable"
  }, {
    "id": 79,
    "text": "",
    "type": "n/a"
  }, {
    "id": 80,
    "text": "",
    "type": "local variable"
  }, {
    "id": 81,
    "text": "",
    "type": "local variable"
  }, {
    "id": 82,
    "text": "",
    "type": "local variable"
  }, {
    "id": 83,
    "text": "",
    "type": "local variable"
  }, {
    "id": 84,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 85,
    "text": "",
    "type": "local variable"
  }, {
    "id": 86,
    "text": "",
    "type": "n/a"
  }, {
    "id": 87,
    "text": "",
    "type": "local variable"
  }, {
    "id": 88,
    "text": "",
    "type": "n/a"
  }, {
    "id": 89,
    "text": "",
    "type": "local variable"
  }, {
    "id": 90,
    "text": "",
    "type": "n/a"
  }, {
    "id": 91,
    "text": "",
    "type": "local variable"
  }, {
    "id": 92,
    "text": "",
    "type": "n/a"
  }, {
    "id": 93,
    "text": "",
    "type": "local variable"
  }, {
    "id": 94,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 95,
    "text": "",
    "type": "local variable"
  }, {
    "id": 96,
    "text": "",
    "type": "n/a"
  }, {
    "id": 97,
    "text": "",
    "type": "local variable"
  }, {
    "id": 98,
    "text": "",
    "type": "n/a"
  }, {
    "id": 99,
    "text": "",
    "type": "global variable"
  }, {
    "id": 100,
    "text": "",
    "type": "n/a"
  }, {
    "id": 101,
    "text": "",
    "type": "global variable"
  }, {
    "id": 102,
    "text": "",
    "type": "n/a"
  }, {
    "id": 103,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 104,
    "text": "",
    "type": "interface container"
  }, {
    "id": 105,
    "text": "",
    "type": "interface"
  }, {
    "id": 106,
    "text": "",
    "type": "local variable"
  } ]
}