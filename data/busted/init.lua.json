{
  "_filename": "init.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/busted/busted/init.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 14
  }, {
    "from": 3,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 15,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 15,
    "label": "has",
    "to": 22
  }, {
    "from": 15,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 15,
    "label": "has",
    "to": 25
  }, {
    "from": 15,
    "label": "has",
    "to": 26
  }, {
    "from": 15,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 27,
    "label": "has",
    "to": 35
  }, {
    "from": 15,
    "label": "has",
    "to": 36
  }, {
    "from": 3,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 16
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 37,
    "label": "has",
    "to": 41
  }, {
    "from": 3,
    "label": "has",
    "to": 42
  }, {
    "from": 3,
    "label": "has",
    "to": 43
  }, {
    "from": 3,
    "label": "has",
    "to": 44
  }, {
    "from": 3,
    "label": "has",
    "to": 45
  }, {
    "from": 3,
    "label": "has",
    "to": 46
  }, {
    "from": 3,
    "label": "has",
    "to": 47
  }, {
    "from": 3,
    "label": "has",
    "to": 48
  }, {
    "from": 3,
    "label": "has",
    "to": 49
  }, {
    "from": 3,
    "label": "has",
    "to": 50
  }, {
    "from": 3,
    "label": "has",
    "to": 51
  }, {
    "from": 3,
    "label": "has",
    "to": 52
  }, {
    "from": 3,
    "label": "has",
    "to": 53
  }, {
    "from": 3,
    "label": "has",
    "to": 54
  }, {
    "from": 3,
    "label": "has",
    "to": 55
  }, {
    "from": 3,
    "label": "has",
    "to": 56
  }, {
    "from": 3,
    "label": "has",
    "to": 57
  }, {
    "from": 3,
    "label": "has",
    "to": 58
  }, {
    "from": 3,
    "label": "has",
    "to": 59
  }, {
    "from": 3,
    "label": "has",
    "to": 60
  }, {
    "from": 3,
    "label": "has",
    "to": 61
  }, {
    "from": 3,
    "label": "has",
    "to": 62
  }, {
    "from": 3,
    "label": "has",
    "to": 63
  }, {
    "from": 3,
    "label": "has",
    "to": 64
  }, {
    "from": 3,
    "label": "has",
    "to": 65
  }, {
    "from": 3,
    "label": "has",
    "to": 66
  }, {
    "from": 3,
    "label": "has",
    "to": 67
  }, {
    "from": 3,
    "label": "has",
    "to": 68
  }, {
    "from": 3,
    "label": "has",
    "to": 69
  }, {
    "from": 3,
    "label": "has",
    "to": 70
  }, {
    "from": 3,
    "label": "has",
    "to": 71
  }, {
    "from": 3,
    "label": "has",
    "to": 72
  }, {
    "from": 3,
    "label": "has",
    "to": 73
  }, {
    "from": 3,
    "label": "has",
    "to": 74
  }, {
    "from": 3,
    "label": "has",
    "to": 75
  }, {
    "from": 3,
    "label": "has",
    "to": 76
  }, {
    "from": 3,
    "label": "has",
    "to": 77
  }, {
    "from": 3,
    "label": "has",
    "to": 78
  }, {
    "from": 3,
    "label": "has",
    "to": 79
  }, {
    "from": 3,
    "label": "has",
    "to": 80
  }, {
    "from": 3,
    "label": "has",
    "to": 81
  }, {
    "from": 3,
    "label": "has",
    "to": 82
  }, {
    "from": 3,
    "label": "has",
    "to": 19
  }, {
    "from": 3,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 6
  }, {
    "from": 84,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 84,
    "label": "has",
    "to": 9
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 11
  }, {
    "from": 86,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 86,
    "label": "has",
    "to": 14
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 24
  }, {
    "from": 89,
    "label": "has",
    "to": 16
  }, {
    "from": 89,
    "label": "has",
    "to": 17
  }, {
    "from": 89,
    "label": "has",
    "to": 18
  }, {
    "from": 89,
    "label": "has",
    "to": 19
  }, {
    "from": 89,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 89,
    "label": "has",
    "to": 22
  }, {
    "from": 89,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 89,
    "label": "has",
    "to": 25
  }, {
    "from": 89,
    "label": "has",
    "to": 26
  }, {
    "from": 89,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 27,
    "label": "has",
    "to": 35
  }, {
    "from": 89,
    "label": "has",
    "to": 36
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 91,
    "label": "has",
    "to": 16
  }, {
    "from": 91,
    "label": "has",
    "to": 38
  }, {
    "from": 91,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 91,
    "label": "has",
    "to": 41
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 93,
    "label": "has",
    "to": 19
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 95,
    "label": "has",
    "to": 97
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 98,
    "label": "has",
    "to": 19
  }, {
    "from": 98,
    "label": "has",
    "to": 19
  }, {
    "from": 98,
    "label": "has",
    "to": 96
  }, {
    "from": 98,
    "label": "has",
    "to": 100
  }, {
    "from": 3,
    "label": "calls",
    "to": 118
  }, {
    "from": 3,
    "label": "calls",
    "to": 118
  }, {
    "from": 3,
    "label": "calls",
    "to": 118
  }, {
    "from": 3,
    "label": "calls",
    "to": 118
  }, {
    "from": 3,
    "label": "calls",
    "to": 118
  }, {
    "from": 3,
    "label": "calls",
    "to": 118
  }, {
    "from": 3,
    "label": "calls",
    "to": 118
  }, {
    "from": 3,
    "label": "calls",
    "to": 118
  }, {
    "from": 3,
    "label": "calls",
    "to": 118
  }, {
    "from": 3,
    "label": "calls",
    "to": 118
  }, {
    "from": 3,
    "label": "calls",
    "to": 118
  }, {
    "from": 3,
    "label": "calls",
    "to": 107
  }, {
    "from": 3,
    "label": "calls",
    "to": 106
  }, {
    "from": 3,
    "label": "calls",
    "to": 106
  }, {
    "from": 3,
    "label": "calls",
    "to": 113
  }, {
    "from": 101,
    "label": "calls",
    "to": 119
  }, {
    "from": 3,
    "label": "calls",
    "to": 110
  }, {
    "from": 3,
    "label": "calls",
    "to": 114
  }, {
    "from": 3,
    "label": "calls",
    "to": 114
  }, {
    "from": 3,
    "label": "calls",
    "to": 111
  }, {
    "from": 3,
    "label": "calls",
    "to": 111
  }, {
    "from": 3,
    "label": "calls",
    "to": 103
  }, {
    "from": 3,
    "label": "calls",
    "to": 121
  }, {
    "from": 3,
    "label": "calls",
    "to": 121
  }, {
    "from": 3,
    "label": "calls",
    "to": 121
  }, {
    "from": 3,
    "label": "calls",
    "to": 105
  }, {
    "from": 3,
    "label": "calls",
    "to": 108
  }, {
    "from": 3,
    "label": "calls",
    "to": 102
  }, {
    "from": 3,
    "label": "calls",
    "to": 102
  }, {
    "from": 3,
    "label": "calls",
    "to": 102
  }, {
    "from": 3,
    "label": "calls",
    "to": 102
  }, {
    "from": 3,
    "label": "calls",
    "to": 102
  }, {
    "from": 3,
    "label": "calls",
    "to": 102
  }, {
    "from": 3,
    "label": "calls",
    "to": 102
  }, {
    "from": 3,
    "label": "calls",
    "to": 102
  }, {
    "from": 3,
    "label": "calls",
    "to": 102
  }, {
    "from": 3,
    "label": "calls",
    "to": 102
  }, {
    "from": 3,
    "label": "calls",
    "to": 102
  }, {
    "from": 3,
    "label": "calls",
    "to": 102
  }, {
    "from": 3,
    "label": "calls",
    "to": 102
  }, {
    "from": 3,
    "label": "calls",
    "to": 102
  }, {
    "from": 3,
    "label": "calls",
    "to": 102
  }, {
    "from": 3,
    "label": "calls",
    "to": 102
  }, {
    "from": 3,
    "label": "calls",
    "to": 102
  }, {
    "from": 3,
    "label": "calls",
    "to": 116
  }, {
    "from": 3,
    "label": "calls",
    "to": 116
  }, {
    "from": 3,
    "label": "calls",
    "to": 116
  }, {
    "from": 3,
    "label": "calls",
    "to": 116
  }, {
    "from": 3,
    "label": "calls",
    "to": 116
  }, {
    "from": 3,
    "label": "calls",
    "to": 116
  }, {
    "from": 3,
    "label": "calls",
    "to": 116
  }, {
    "from": 3,
    "label": "calls",
    "to": 116
  }, {
    "from": 101,
    "label": "calls",
    "to": 115
  }, {
    "from": 101,
    "label": "calls",
    "to": 115
  }, {
    "from": 3,
    "label": "calls",
    "to": 104
  }, {
    "from": 3,
    "label": "calls",
    "to": 120
  }, {
    "from": 3,
    "label": "calls",
    "to": 120
  }, {
    "from": 3,
    "label": "calls",
    "to": 117
  }, {
    "from": 3,
    "label": "calls",
    "to": 117
  }, {
    "from": 3,
    "label": "calls",
    "to": 117
  }, {
    "from": 3,
    "label": "calls",
    "to": 117
  }, {
    "from": 3,
    "label": "calls",
    "to": 117
  }, {
    "from": 3,
    "label": "calls",
    "to": 122
  }, {
    "from": 3,
    "label": "calls",
    "to": 122
  }, {
    "from": 3,
    "label": "calls",
    "to": 122
  }, {
    "from": 3,
    "label": "calls",
    "to": 122
  }, {
    "from": 3,
    "label": "calls",
    "to": 122
  }, {
    "from": 3,
    "label": "calls",
    "to": 122
  }, {
    "from": 3,
    "label": "calls",
    "to": 109
  }, {
    "from": 101,
    "label": "calls",
    "to": 3
  }, {
    "from": 2,
    "label": "contains",
    "to": 101
  }, {
    "from": 101,
    "label": "declares",
    "to": 3
  }, {
    "from": 101,
    "label": "declares",
    "to": 84
  }, {
    "from": 101,
    "label": "declares",
    "to": 86
  }, {
    "from": 101,
    "label": "declares",
    "to": 88
  }, {
    "from": 101,
    "label": "declares",
    "to": 89
  }, {
    "from": 101,
    "label": "declares",
    "to": 91
  }, {
    "from": 101,
    "label": "declares",
    "to": 93
  }, {
    "from": 101,
    "label": "declares",
    "to": 95
  }, {
    "from": 101,
    "label": "declares",
    "to": 98
  }, {
    "from": 2,
    "label": "contains",
    "to": 126
  }, {
    "from": 2,
    "label": "contains",
    "to": 127
  }, {
    "from": 127,
    "label": "initializes",
    "to": 128
  }, {
    "from": 128,
    "label": "requires",
    "to": 1
  }, {
    "from": 127,
    "label": "initializes",
    "to": 129
  }, {
    "from": 129,
    "label": "requires",
    "to": 130
  }, {
    "from": 127,
    "label": "initializes",
    "to": 131
  }, {
    "from": 131,
    "label": "requires",
    "to": 112
  }, {
    "from": 127,
    "label": "initializes",
    "to": 132
  }, {
    "from": 132,
    "label": "requires",
    "to": 133
  }, {
    "from": 127,
    "label": "initializes",
    "to": 134
  }, {
    "from": 134,
    "label": "requires",
    "to": 135
  }, {
    "from": 127,
    "label": "initializes",
    "to": 136
  }, {
    "from": 136,
    "label": "requires",
    "to": 137
  }, {
    "from": 2,
    "label": "provides",
    "to": 138
  }, {
    "from": 115,
    "label": "represents",
    "to": 139
  }, {
    "from": 138,
    "label": "provides",
    "to": 139
  }, {
    "from": 123,
    "label": "contains",
    "to": 93
  }, {
    "from": 124,
    "label": "contains",
    "to": 93
  }, {
    "from": 125,
    "label": "contains",
    "to": 93
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "block",
    "type": "module"
  }, {
    "id": 2,
    "text": "init",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function init(busted)\r\n  local block = require 'busted.block'(busted)\r\n\r\n  local file = function(file)\r\n    busted.wrap(file.run)\r\n    if busted.safe_publish('file', { 'file', 'start' }, file) then\r\n      block.execute('file', file)\r\n    end\r\n    busted.safe_publish('file', { 'file', 'end' }, file)\r\n  end\r\n\r\n  local describe = function(describe)\r\n    local parent = busted.context.parent(describe)\r\n    if busted.safe_publish('describe', { 'describe', 'start' }, describe, parent) then\r\n      block.execute('describe', describe)\r\n    end\r\n    busted.safe_publish('describe', { 'describe', 'end' }, describe, parent)\r\n  end\r\n\r\n  local it = function(element)\r\n    local parent = busted.context.parent(element)\r\n    local finally\r\n\r\n    if not block.lazySetup(parent) then\r\n      -- skip test if any setup failed\r\n      return\r\n    end\r\n\r\n    if not element.env then element.env = {} end\r\n\r\n    block.rejectAll(element)\r\n    element.env.finally = function(fn) finally = fn end\r\n    element.env.pending = busted.pending\r\n\r\n    local pass, ancestor = block.execAll('before_each', parent, true)\r\n\r\n    if pass then\r\n      local status = busted.status('success')\r\n      if busted.safe_publish('test', { 'test', 'start' }, element, parent) then\r\n        status:update(busted.safe('it', element.run, element))\r\n        if finally then\r\n          block.reject('pending', element)\r\n          status:update(busted.safe('finally', finally, element))\r\n        end\r\n      else\r\n        status = busted.status('error')\r\n      end\r\n      busted.safe_publish('test', { 'test', 'end' }, element, parent, tostring(status))\r\n    end\r\n\r\n    block.dexecAll('after_each', ancestor, true)\r\n  end\r\n\r\n  local pending = function(element)\r\n    local parent = busted.context.parent(element)\r\n    local status = 'pending'\r\n    if not busted.safe_publish('it', { 'test', 'start' }, element, parent) then\r\n      status = 'error'\r\n    end\r\n    busted.safe_publish('it', { 'test', 'end' }, element, parent, status)\r\n  end\r\n\r\n  busted.register('file', file, { envmode = 'insulate' })\r\n\r\n  busted.register('describe', describe)\r\n  busted.register('insulate', 'describe', { envmode = 'insulate' })\r\n  busted.register('expose', 'describe', { envmode = 'expose' })\r\n\r\n  busted.register('it', it)\r\n\r\n  busted.register('pending', pending)\r\n\r\n  busted.register('before_each', { envmode = 'unwrap' })\r\n  busted.register('after_each', { envmode = 'unwrap' })\r\n\r\n  busted.register('lazy_setup', { envmode = 'unwrap' })\r\n  busted.register('lazy_teardown', { envmode = 'unwrap' })\r\n  busted.register('strict_setup', { envmode = 'unwrap' })\r\n  busted.register('strict_teardown', { envmode = 'unwrap' })\r\n\r\n  busted.register('setup', 'strict_setup')\r\n  busted.register('teardown', 'strict_teardown')\r\n\r\n  busted.register('context', 'describe')\r\n  busted.register('spec', 'it')\r\n  busted.register('test', 'it')\r\n\r\n  busted.hide('file')\r\n\r\n  local assert = require 'luassert'\r\n  local spy    = require 'luassert.spy'\r\n  local mock   = require 'luassert.mock'\r\n  local stub   = require 'luassert.stub'\r\n  local match  = require 'luassert.match'\r\n\r\n  busted.export('assert', assert)\r\n  busted.export('spy', spy)\r\n  busted.export('mock', mock)\r\n  busted.export('stub', stub)\r\n  busted.export('match', match)\r\n\r\n  busted.exportApi('publish', busted.publish)\r\n  busted.exportApi('subscribe', busted.subscribe)\r\n  busted.exportApi('unsubscribe', busted.unsubscribe)\r\n\r\n  busted.exportApi('bindfenv', busted.bindfenv)\r\n  busted.exportApi('fail', busted.fail)\r\n  busted.exportApi('gettime', busted.gettime)\r\n  busted.exportApi('monotime', busted.monotime)\r\n  busted.exportApi('sleep', busted.sleep)\r\n  busted.exportApi('parent', busted.context.parent)\r\n  busted.exportApi('children', busted.context.children)\r\n  busted.exportApi('version', busted.version)\r\n\r\n  busted.bindfenv(assert, 'error', busted.fail)\r\n  busted.bindfenv(assert.is_true, 'error', busted.fail)\r\n\r\n  return busted\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local block = require 'busted.block'(busted)",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local file = function(file)\r\n    busted.wrap(file.run)\r\n    if busted.safe_publish('file', { 'file', 'start' }, file) then\r\n      block.execute('file', file)\r\n    end\r\n    busted.safe_publish('file', { 'file', 'end' }, file)\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "busted.wrap(file.run)",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "if busted.safe_publish('file', { 'file', 'start' }, file) then\r\n      block.execute('file', file)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "block.execute('file', file)",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "busted.safe_publish('file', { 'file', 'end' }, file)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "local describe = function(describe)\r\n    local parent = busted.context.parent(describe)\r\n    if busted.safe_publish('describe', { 'describe', 'start' }, describe, parent) then\r\n      block.execute('describe', describe)\r\n    end\r\n    busted.safe_publish('describe', { 'describe', 'end' }, describe, parent)\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "local parent = busted.context.parent(describe)",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "if busted.safe_publish('describe', { 'describe', 'start' }, describe, parent) then\r\n      block.execute('describe', describe)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "block.execute('describe', describe)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "busted.safe_publish('describe', { 'describe', 'end' }, describe, parent)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "local it = function(element)\r\n    local parent = busted.context.parent(element)\r\n    local finally\r\n\r\n    if not block.lazySetup(parent) then\r\n      -- skip test if any setup failed\r\n      return\r\n    end\r\n\r\n    if not element.env then element.env = {} end\r\n\r\n    block.rejectAll(element)\r\n    element.env.finally = function(fn) finally = fn end\r\n    element.env.pending = busted.pending\r\n\r\n    local pass, ancestor = block.execAll('before_each', parent, true)\r\n\r\n    if pass then\r\n      local status = busted.status('success')\r\n      if busted.safe_publish('test', { 'test', 'start' }, element, parent) then\r\n        status:update(busted.safe('it', element.run, element))\r\n        if finally then\r\n          block.reject('pending', element)\r\n          status:update(busted.safe('finally', finally, element))\r\n        end\r\n      else\r\n        status = busted.status('error')\r\n      end\r\n      busted.safe_publish('test', { 'test', 'end' }, element, parent, tostring(status))\r\n    end\r\n\r\n    block.dexecAll('after_each', ancestor, true)\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "local parent = busted.context.parent(element)",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "local finally",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "if not block.lazySetup(parent) then\r\n      -- skip test if any setup failed\r\n      return\r\n    end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 20,
    "text": "if not element.env then element.env = {} end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "element.env = {}",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "block.rejectAll(element)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "element.env.finally = function(fn) finally = fn end",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "finally = fn",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "element.env.pending = busted.pending",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "local pass, ancestor = block.execAll('before_each', parent, true)",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "if pass then\r\n      local status = busted.status('success')\r\n      if busted.safe_publish('test', { 'test', 'start' }, element, parent) then\r\n        status:update(busted.safe('it', element.run, element))\r\n        if finally then\r\n          block.reject('pending', element)\r\n          status:update(busted.safe('finally', finally, element))\r\n        end\r\n      else\r\n        status = busted.status('error')\r\n      end\r\n      busted.safe_publish('test', { 'test', 'end' }, element, parent, tostring(status))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "local status = busted.status('success')",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "if busted.safe_publish('test', { 'test', 'start' }, element, parent) then\r\n        status:update(busted.safe('it', element.run, element))\r\n        if finally then\r\n          block.reject('pending', element)\r\n          status:update(busted.safe('finally', finally, element))\r\n        end\r\n      else\r\n        status = busted.status('error')\r\n      end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "status:update(busted.safe('it', element.run, element))",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "if finally then\r\n          block.reject('pending', element)\r\n          status:update(busted.safe('finally', finally, element))\r\n        end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "block.reject('pending', element)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "status:update(busted.safe('finally', finally, element))",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "status = busted.status('error')",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "busted.safe_publish('test', { 'test', 'end' }, element, parent, tostring(status))",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "block.dexecAll('after_each', ancestor, true)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "local pending = function(element)\r\n    local parent = busted.context.parent(element)\r\n    local status = 'pending'\r\n    if not busted.safe_publish('it', { 'test', 'start' }, element, parent) then\r\n      status = 'error'\r\n    end\r\n    busted.safe_publish('it', { 'test', 'end' }, element, parent, status)\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "local status = 'pending'",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "if not busted.safe_publish('it', { 'test', 'start' }, element, parent) then\r\n      status = 'error'\r\n    end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "status = 'error'",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "busted.safe_publish('it', { 'test', 'end' }, element, parent, status)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "busted.register('file', file, { envmode = 'insulate' })",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "busted.register('describe', describe)",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "busted.register('insulate', 'describe', { envmode = 'insulate' })",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "busted.register('expose', 'describe', { envmode = 'expose' })",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "busted.register('it', it)",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "busted.register('pending', pending)",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "busted.register('before_each', { envmode = 'unwrap' })",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "busted.register('after_each', { envmode = 'unwrap' })",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "busted.register('lazy_setup', { envmode = 'unwrap' })",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "busted.register('lazy_teardown', { envmode = 'unwrap' })",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "busted.register('strict_setup', { envmode = 'unwrap' })",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "busted.register('strict_teardown', { envmode = 'unwrap' })",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "busted.register('setup', 'strict_setup')",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "busted.register('teardown', 'strict_teardown')",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "busted.register('context', 'describe')",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "busted.register('spec', 'it')",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "busted.register('test', 'it')",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "busted.hide('file')",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "local assert = require 'luassert'",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "local spy    = require 'luassert.spy'",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "local mock   = require 'luassert.mock'",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "local stub   = require 'luassert.stub'",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "local match  = require 'luassert.match'",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "busted.export('assert', assert)",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "busted.export('spy', spy)",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "busted.export('mock', mock)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "busted.export('stub', stub)",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "busted.export('match', match)",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "busted.exportApi('publish', busted.publish)",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "busted.exportApi('subscribe', busted.subscribe)",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "busted.exportApi('unsubscribe', busted.unsubscribe)",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "busted.exportApi('bindfenv', busted.bindfenv)",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "busted.exportApi('fail', busted.fail)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "busted.exportApi('gettime', busted.gettime)",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "busted.exportApi('monotime', busted.monotime)",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "busted.exportApi('sleep', busted.sleep)",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "busted.exportApi('parent', busted.context.parent)",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "busted.exportApi('children', busted.context.children)",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "busted.exportApi('version', busted.version)",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "busted.bindfenv(assert, 'error', busted.fail)",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "busted.bindfenv(assert.is_true, 'error', busted.fail)",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "function(file)\r\n    busted.wrap(file.run)\r\n    if busted.safe_publish('file', { 'file', 'start' }, file) then\r\n      block.execute('file', file)\r\n    end\r\n    busted.safe_publish('file', { 'file', 'end' }, file)\r\n  end",
    "type": "function"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "function(describe)\r\n    local parent = busted.context.parent(describe)\r\n    if busted.safe_publish('describe', { 'describe', 'start' }, describe, parent) then\r\n      block.execute('describe', describe)\r\n    end\r\n    busted.safe_publish('describe', { 'describe', 'end' }, describe, parent)\r\n  end",
    "type": "function"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "function(fn) finally = fn end",
    "type": "function"
  }, {
    "id": 89,
    "text": "function(element)\r\n    local parent = busted.context.parent(element)\r\n    local finally\r\n\r\n    if not block.lazySetup(parent) then\r\n      -- skip test if any setup failed\r\n      return\r\n    end\r\n\r\n    if not element.env then element.env = {} end\r\n\r\n    block.rejectAll(element)\r\n    element.env.finally = function(fn) finally = fn end\r\n    element.env.pending = busted.pending\r\n\r\n    local pass, ancestor = block.execAll('before_each', parent, true)\r\n\r\n    if pass then\r\n      local status = busted.status('success')\r\n      if busted.safe_publish('test', { 'test', 'start' }, element, parent) then\r\n        status:update(busted.safe('it', element.run, element))\r\n        if finally then\r\n          block.reject('pending', element)\r\n          status:update(busted.safe('finally', finally, element))\r\n        end\r\n      else\r\n        status = busted.status('error')\r\n      end\r\n      busted.safe_publish('test', { 'test', 'end' }, element, parent, tostring(status))\r\n    end\r\n\r\n    block.dexecAll('after_each', ancestor, true)\r\n  end",
    "type": "function"
  }, {
    "id": 90,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 91,
    "text": "function(element)\r\n    local parent = busted.context.parent(element)\r\n    local status = 'pending'\r\n    if not busted.safe_publish('it', { 'test', 'start' }, element, parent) then\r\n      status = 'error'\r\n    end\r\n    busted.safe_publish('it', { 'test', 'end' }, element, parent, status)\r\n  end",
    "type": "function"
  }, {
    "id": 92,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 93,
    "text": "function(self, key)\r\n        return busted.api[key]\r\n      end",
    "type": "function"
  }, {
    "id": 94,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 95,
    "text": "function(self, key, value)\r\n        error('Attempt to modify busted')\r\n      end",
    "type": "function"
  }, {
    "id": 96,
    "text": "error('Attempt to modify busted')",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 98,
    "text": "function(self, busted)\r\n    init(busted)\r\n\r\n    return setmetatable(self, {\r\n      __index = function(self, key)\r\n        return busted.api[key]\r\n      end,\r\n\r\n      __newindex = function(self, key, value)\r\n        error('Attempt to modify busted')\r\n      end\r\n    })\r\n  end",
    "type": "function"
  }, {
    "id": 99,
    "text": "init(busted)",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 101,
    "text": "",
    "type": "function container"
  }, {
    "id": 102,
    "text": "register",
    "type": "global function"
  }, {
    "id": 103,
    "text": "execAll",
    "type": "global function"
  }, {
    "id": 104,
    "text": "dexecAll",
    "type": "global function"
  }, {
    "id": 105,
    "text": "reject",
    "type": "global function"
  }, {
    "id": 106,
    "text": "execute",
    "type": "global function"
  }, {
    "id": 107,
    "text": "lazySetup",
    "type": "global function"
  }, {
    "id": 108,
    "text": "rejectAll",
    "type": "global function"
  }, {
    "id": 109,
    "text": "wrap",
    "type": "global function"
  }, {
    "id": 110,
    "text": "hide",
    "type": "global function"
  }, {
    "id": 111,
    "text": "status",
    "type": "global function"
  }, {
    "id": 112,
    "text": "spy",
    "type": "module"
  }, {
    "id": 113,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 114,
    "text": "bindfenv",
    "type": "global function"
  }, {
    "id": 115,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 116,
    "text": "safe_publish",
    "type": "global function"
  }, {
    "id": 117,
    "text": "export",
    "type": "global function"
  }, {
    "id": 118,
    "text": "exportApi",
    "type": "global function"
  }, {
    "id": 119,
    "text": "error",
    "type": "global function"
  }, {
    "id": 120,
    "text": "safe",
    "type": "global function"
  }, {
    "id": 121,
    "text": "busted.context.parent",
    "type": "global function"
  }, {
    "id": 122,
    "text": "require",
    "type": "global function"
  }, {
    "id": 123,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 124,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 125,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 126,
    "text": "",
    "type": "variable container"
  }, {
    "id": 127,
    "text": "",
    "type": "require container"
  }, {
    "id": 128,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 129,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 130,
    "text": "luassert",
    "type": "module"
  }, {
    "id": 131,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 132,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 133,
    "text": "mock",
    "type": "module"
  }, {
    "id": 134,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 135,
    "text": "stub",
    "type": "module"
  }, {
    "id": 136,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 137,
    "text": "match",
    "type": "module"
  }, {
    "id": 138,
    "text": "",
    "type": "interface container"
  }, {
    "id": 139,
    "text": "",
    "type": "interface"
  } ]
}