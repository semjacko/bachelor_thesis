{
  "_filename": "block.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/busted/busted/block.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 11
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 15,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 22,
    "label": "has",
    "to": 7
  }, {
    "from": 22,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 28,
    "label": "has",
    "to": 7
  }, {
    "from": 28,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 28,
    "label": "has",
    "to": 35
  }, {
    "from": 28,
    "label": "has",
    "to": 36
  }, {
    "from": 28,
    "label": "has",
    "to": 7
  }, {
    "from": 28,
    "label": "has",
    "to": 37
  }, {
    "from": 28,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 28,
    "label": "has",
    "to": 43
  }, {
    "from": 28,
    "label": "has",
    "to": 7
  }, {
    "from": 28,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 29
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 45,
    "label": "has",
    "to": 7
  }, {
    "from": 45,
    "label": "has",
    "to": 49
  }, {
    "from": 45,
    "label": "has",
    "to": 37
  }, {
    "from": 45,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 45,
    "label": "has",
    "to": 7
  }, {
    "from": 45,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 29
  }, {
    "from": 54,
    "label": "has",
    "to": 49
  }, {
    "from": 54,
    "label": "has",
    "to": 37
  }, {
    "from": 54,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 52
  }, {
    "from": 54,
    "label": "has",
    "to": 7
  }, {
    "from": 54,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 7
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 60,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 7
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 7
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 69,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 77,
    "label": "has",
    "to": 80
  }, {
    "from": 76,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 76,
    "label": "has",
    "to": 83
  }, {
    "from": 76,
    "label": "has",
    "to": 84
  }, {
    "from": 69,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 73
  }, {
    "from": 86,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 6
  }, {
    "from": 88,
    "label": "has",
    "to": 7
  }, {
    "from": 88,
    "label": "has",
    "to": 7
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 90,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 90,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 90,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 22,
    "label": "has",
    "to": 7
  }, {
    "from": 90,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 28,
    "label": "has",
    "to": 7
  }, {
    "from": 28,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 28,
    "label": "has",
    "to": 35
  }, {
    "from": 28,
    "label": "has",
    "to": 36
  }, {
    "from": 28,
    "label": "has",
    "to": 7
  }, {
    "from": 28,
    "label": "has",
    "to": 37
  }, {
    "from": 28,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 28,
    "label": "has",
    "to": 43
  }, {
    "from": 28,
    "label": "has",
    "to": 7
  }, {
    "from": 90,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 29
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 45,
    "label": "has",
    "to": 7
  }, {
    "from": 45,
    "label": "has",
    "to": 49
  }, {
    "from": 45,
    "label": "has",
    "to": 37
  }, {
    "from": 45,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 45,
    "label": "has",
    "to": 7
  }, {
    "from": 90,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 29
  }, {
    "from": 54,
    "label": "has",
    "to": 49
  }, {
    "from": 54,
    "label": "has",
    "to": 37
  }, {
    "from": 54,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 52
  }, {
    "from": 54,
    "label": "has",
    "to": 7
  }, {
    "from": 90,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 7
  }, {
    "from": 90,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 90,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 7
  }, {
    "from": 90,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 7
  }, {
    "from": 90,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 69,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 77,
    "label": "has",
    "to": 80
  }, {
    "from": 76,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 76,
    "label": "has",
    "to": 83
  }, {
    "from": 76,
    "label": "has",
    "to": 84
  }, {
    "from": 90,
    "label": "has",
    "to": 7
  }, {
    "from": 90,
    "label": "has",
    "to": 93
  }, {
    "from": 94,
    "label": "calls",
    "to": 105
  }, {
    "from": 69,
    "label": "calls",
    "to": 67
  }, {
    "from": 28,
    "label": "calls",
    "to": 28
  }, {
    "from": 58,
    "label": "calls",
    "to": 28
  }, {
    "from": 15,
    "label": "calls",
    "to": 106
  }, {
    "from": 69,
    "label": "calls",
    "to": 65
  }, {
    "from": 22,
    "label": "calls",
    "to": 109
  }, {
    "from": 69,
    "label": "calls",
    "to": 109
  }, {
    "from": 69,
    "label": "calls",
    "to": 107
  }, {
    "from": 69,
    "label": "calls",
    "to": 107
  }, {
    "from": 9,
    "label": "calls",
    "to": 108
  }, {
    "from": 15,
    "label": "calls",
    "to": 95
  }, {
    "from": 4,
    "label": "calls",
    "to": 104
  }, {
    "from": 45,
    "label": "calls",
    "to": 45
  }, {
    "from": 65,
    "label": "calls",
    "to": 45
  }, {
    "from": 28,
    "label": "calls",
    "to": 110
  }, {
    "from": 45,
    "label": "calls",
    "to": 110
  }, {
    "from": 54,
    "label": "calls",
    "to": 110
  }, {
    "from": 15,
    "label": "calls",
    "to": 9
  }, {
    "from": 15,
    "label": "calls",
    "to": 9
  }, {
    "from": 22,
    "label": "calls",
    "to": 15
  }, {
    "from": 28,
    "label": "calls",
    "to": 96
  }, {
    "from": 45,
    "label": "calls",
    "to": 96
  }, {
    "from": 54,
    "label": "calls",
    "to": 96
  }, {
    "from": 69,
    "label": "calls",
    "to": 4
  }, {
    "from": 28,
    "label": "calls",
    "to": 22
  }, {
    "from": 45,
    "label": "calls",
    "to": 22
  }, {
    "from": 54,
    "label": "calls",
    "to": 22
  }, {
    "from": 69,
    "label": "calls",
    "to": 102
  }, {
    "from": 69,
    "label": "calls",
    "to": 101
  }, {
    "from": 69,
    "label": "calls",
    "to": 100
  }, {
    "from": 69,
    "label": "calls",
    "to": 100
  }, {
    "from": 94,
    "label": "calls",
    "to": 111
  }, {
    "from": 94,
    "label": "calls",
    "to": 111
  }, {
    "from": 94,
    "label": "calls",
    "to": 111
  }, {
    "from": 69,
    "label": "calls",
    "to": 98
  }, {
    "from": 28,
    "label": "calls",
    "to": 97
  }, {
    "from": 45,
    "label": "calls",
    "to": 97
  }, {
    "from": 54,
    "label": "calls",
    "to": 97
  }, {
    "from": 22,
    "label": "calls",
    "to": 103
  }, {
    "from": 15,
    "label": "calls",
    "to": 99
  }, {
    "from": 69,
    "label": "calls",
    "to": 60
  }, {
    "from": 54,
    "label": "calls",
    "to": 54
  }, {
    "from": 60,
    "label": "calls",
    "to": 54
  }, {
    "from": 67,
    "label": "calls",
    "to": 54
  }, {
    "from": 1,
    "label": "contains",
    "to": 94
  }, {
    "from": 94,
    "label": "declares",
    "to": 4
  }, {
    "from": 94,
    "label": "declares",
    "to": 9
  }, {
    "from": 94,
    "label": "declares",
    "to": 13
  }, {
    "from": 94,
    "label": "declares",
    "to": 15
  }, {
    "from": 94,
    "label": "declares",
    "to": 22
  }, {
    "from": 94,
    "label": "declares",
    "to": 28
  }, {
    "from": 94,
    "label": "declares",
    "to": 45
  }, {
    "from": 94,
    "label": "declares",
    "to": 54
  }, {
    "from": 94,
    "label": "declares",
    "to": 58
  }, {
    "from": 94,
    "label": "declares",
    "to": 60
  }, {
    "from": 94,
    "label": "declares",
    "to": 65
  }, {
    "from": 94,
    "label": "declares",
    "to": 67
  }, {
    "from": 94,
    "label": "declares",
    "to": 69
  }, {
    "from": 94,
    "label": "declares",
    "to": 86
  }, {
    "from": 94,
    "label": "declares",
    "to": 88
  }, {
    "from": 94,
    "label": "declares",
    "to": 90
  }, {
    "from": 1,
    "label": "contains",
    "to": 112
  }, {
    "from": 1,
    "label": "contains",
    "to": 113
  }, {
    "from": 113,
    "label": "initializes",
    "to": 114
  }, {
    "from": 114,
    "label": "requires",
    "to": 2
  }, {
    "from": 113,
    "label": "initializes",
    "to": 115
  }, {
    "from": 115,
    "label": "requires",
    "to": 2
  }, {
    "from": 113,
    "label": "initializes",
    "to": 116
  }, {
    "from": 116,
    "label": "requires",
    "to": 3
  }, {
    "from": 1,
    "label": "provides",
    "to": 117
  }, {
    "from": 117,
    "label": "provides",
    "to": 118
  }, {
    "from": 119,
    "label": "requires",
    "to": 1
  }, {
    "from": 120,
    "label": "requires",
    "to": 1
  }, {
    "from": 5,
    "label": "hasArgument",
    "to": 88
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "block",
    "type": "module"
  }, {
    "id": 2,
    "text": "compatibility",
    "type": "module"
  }, {
    "id": 3,
    "text": "utils",
    "type": "module"
  }, {
    "id": 4,
    "text": "local function sort(elements)\r\n  table.sort(elements, function(t1, t2)\r\n    if t1.name and t2.name then\r\n      return t1.name < t2.name\r\n    end\r\n    return t2.name ~= nil\r\n  end)\r\n  return elements\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "table.sort(elements, function(t1, t2)\r\n    if t1.name and t2.name then\r\n      return t1.name < t2.name\r\n    end\r\n    return t2.name ~= nil\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "if t1.name and t2.name then\r\n      return t1.name < t2.name\r\n    end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function block.reject(descriptor, element)\r\n    element.env[descriptor] = function(...)\r\n      error(\"'\" .. descriptor .. \"' not supported inside current context block\", 2)\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 10,
    "text": "element.env[descriptor] = function(...)\r\n      error(\"'\" .. descriptor .. \"' not supported inside current context block\", 2)\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "error(\"'\" .. descriptor .. \"' not supported inside current context block\", 2)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function(...)\r\n      error(\"'\" .. descriptor .. \"' not supported inside current context block\", 2)\r\n    end",
    "type": "function"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function block.rejectAll(element)\r\n    local env = getfenv(element.run)\r\n    block.reject('randomize', element)\r\n    for descriptor, _ in pairs(busted.executors) do\r\n      if root.env[descriptor] and (env ~= _G and env[descriptor] or rawget(env, descriptor)) then\r\n        block.reject(descriptor, element)\r\n      end\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 16,
    "text": "local env = getfenv(element.run)",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "block.reject('randomize', element)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "for descriptor, _ in pairs(busted.executors) do\r\n      if root.env[descriptor] and (env ~= _G and env[descriptor] or rawget(env, descriptor)) then\r\n        block.reject(descriptor, element)\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 19,
    "text": "if root.env[descriptor] and (env ~= _G and env[descriptor] or rawget(env, descriptor)) then\r\n        block.reject(descriptor, element)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "block.reject(descriptor, element)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "local function exec(descriptor, element)\r\n    if not element.env then element.env = {} end\r\n    block.rejectAll(element)\r\n    local ret = { busted.safe(descriptor, element.run, element) }\r\n    return unpack(ret)\r\n  end",
    "type": "function"
  }, {
    "id": 23,
    "text": "if not element.env then element.env = {} end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "element.env = {}",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "block.rejectAll(element)",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "local ret = { busted.safe(descriptor, element.run, element) }",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function block.execAllOnce(descriptor, current, err)\r\n    local parent = busted.context.parent(current)\r\n\r\n    if parent then\r\n      local success = block.execAllOnce(descriptor, parent)\r\n      if not success then\r\n        return success\r\n      end\r\n    end\r\n\r\n    if not current[descriptor] then\r\n      current[descriptor] = {}\r\n    end\r\n    local list = current[descriptor]\r\n    if list.success ~= nil then\r\n      return list.success\r\n    end\r\n\r\n    local success = true\r\n    for _, v in ipairs(list) do\r\n      if not exec(descriptor, v):success() then\r\n        if err then err(descriptor) end\r\n        success = false\r\n      end\r\n    end\r\n\r\n    list.success = success\r\n\r\n    return success\r\n  end",
    "type": "function"
  }, {
    "id": 29,
    "text": "local parent = busted.context.parent(current)",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "if parent then\r\n      local success = block.execAllOnce(descriptor, parent)\r\n      if not success then\r\n        return success\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "local success = block.execAllOnce(descriptor, parent)",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "if not success then\r\n        return success\r\n      end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "if not current[descriptor] then\r\n      current[descriptor] = {}\r\n    end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "current[descriptor] = {}",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "local list = current[descriptor]",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "if list.success ~= nil then\r\n      return list.success\r\n    end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "local success = true",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "for _, v in ipairs(list) do\r\n      if not exec(descriptor, v):success() then\r\n        if err then err(descriptor) end\r\n        success = false\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 39,
    "text": "if not exec(descriptor, v):success() then\r\n        if err then err(descriptor) end\r\n        success = false\r\n      end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "if err then err(descriptor) end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "err(descriptor)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "success = false",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "list.success = success",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function block.execAll(descriptor, current, propagate, err)\r\n    local parent = busted.context.parent(current)\r\n\r\n    if propagate and parent then\r\n      local success, ancestor = block.execAll(descriptor, parent, propagate)\r\n      if not success then\r\n        return success, ancestor\r\n      end\r\n    end\r\n\r\n    local list = current[descriptor] or {}\r\n\r\n    local success = true\r\n    for _, v in ipairs(list) do\r\n      if not exec(descriptor, v):success() then\r\n        if err then err(descriptor) end\r\n        success = nil\r\n      end\r\n    end\r\n    return success, current\r\n  end",
    "type": "function"
  }, {
    "id": 46,
    "text": "if propagate and parent then\r\n      local success, ancestor = block.execAll(descriptor, parent, propagate)\r\n      if not success then\r\n        return success, ancestor\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "local success, ancestor = block.execAll(descriptor, parent, propagate)",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "if not success then\r\n        return success, ancestor\r\n      end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "local list = current[descriptor] or {}",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "for _, v in ipairs(list) do\r\n      if not exec(descriptor, v):success() then\r\n        if err then err(descriptor) end\r\n        success = nil\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 51,
    "text": "if not exec(descriptor, v):success() then\r\n        if err then err(descriptor) end\r\n        success = nil\r\n      end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "success = nil",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "function block.dexecAll(descriptor, current, propagate, err)\r\n    local parent = busted.context.parent(current)\r\n    local list = current[descriptor] or {}\r\n\r\n    local success = true\r\n    for _, v in ipairs(list) do\r\n      if not exec(descriptor, v):success() then\r\n        if err then err(descriptor) end\r\n        success = nil\r\n      end\r\n    end\r\n\r\n    if propagate and parent then\r\n      if not block.dexecAll(descriptor, parent, propagate) then\r\n        success = nil\r\n      end\r\n    end\r\n    return success\r\n  end",
    "type": "function"
  }, {
    "id": 55,
    "text": "if propagate and parent then\r\n      if not block.dexecAll(descriptor, parent, propagate) then\r\n        success = nil\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "if not block.dexecAll(descriptor, parent, propagate) then\r\n        success = nil\r\n      end",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function block.lazySetup(element, err)\r\n    return block.execAllOnce('lazy_setup', element, err)\r\n  end",
    "type": "function"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function block.lazyTeardown(element, err)\r\n    if element.lazy_setup and element.lazy_setup.success ~= nil then\r\n      block.dexecAll('lazy_teardown', element, nil, err)\r\n      element.lazy_setup.success = nil\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 61,
    "text": "if element.lazy_setup and element.lazy_setup.success ~= nil then\r\n      block.dexecAll('lazy_teardown', element, nil, err)\r\n      element.lazy_setup.success = nil\r\n    end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "block.dexecAll('lazy_teardown', element, nil, err)",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "element.lazy_setup.success = nil",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "function block.setup(element, err)\r\n      return block.execAll('strict_setup', element, nil, err)\r\n  end",
    "type": "function"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "function block.teardown(element, err)\r\n      return block.dexecAll('strict_teardown', element, nil, err)\r\n  end",
    "type": "function"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function block.execute(descriptor, element)\r\n    if not element.env then element.env = {} end\r\n\r\n    local randomize = busted.randomize\r\n    local randomseed = busted.randomseed\r\n    element.env.randomize = function(...)\r\n      randomize = (select('#', ...) == 0 or ...)\r\n      if randomize then\r\n        randomseed = tonumber(({...})[1]) or tonumber(({...})[2]) or randomseed\r\n      end\r\n    end\r\n\r\n    if busted.safe(descriptor, element.run, element):success() then\r\n      if busted.sort then\r\n        sort(busted.context.children(element))\r\n      elseif randomize then\r\n        element.randomseed = randomseed\r\n        shuffle(busted.context.children(element), randomseed)\r\n      end\r\n\r\n      if block.setup(element) then\r\n        busted.execute(element)\r\n      end\r\n\r\n      block.lazyTeardown(element)\r\n      block.teardown(element)\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 70,
    "text": "local randomize = busted.randomize",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "local randomseed = busted.randomseed",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "element.env.randomize = function(...)\r\n      randomize = (select('#', ...) == 0 or ...)\r\n      if randomize then\r\n        randomseed = tonumber(({...})[1]) or tonumber(({...})[2]) or randomseed\r\n      end\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "randomize = (select('#', ...) == 0 or ...)",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "if randomize then\r\n        randomseed = tonumber(({...})[1]) or tonumber(({...})[2]) or randomseed\r\n      end",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "randomseed = tonumber(({...})[1]) or tonumber(({...})[2]) or randomseed",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "if busted.safe(descriptor, element.run, element):success() then\r\n      if busted.sort then\r\n        sort(busted.context.children(element))\r\n      elseif randomize then\r\n        element.randomseed = randomseed\r\n        shuffle(busted.context.children(element), randomseed)\r\n      end\r\n\r\n      if block.setup(element) then\r\n        busted.execute(element)\r\n      end\r\n\r\n      block.lazyTeardown(element)\r\n      block.teardown(element)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "if busted.sort then\r\n        sort(busted.context.children(element))\r\n      elseif randomize then\r\n        element.randomseed = randomseed\r\n        shuffle(busted.context.children(element), randomseed)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "sort(busted.context.children(element))",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "element.randomseed = randomseed",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "shuffle(busted.context.children(element), randomseed)",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "if block.setup(element) then\r\n        busted.execute(element)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 82,
    "text": "busted.execute(element)",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "block.lazyTeardown(element)",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "block.teardown(element)",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "function(...)\r\n      randomize = (select('#', ...) == 0 or ...)\r\n      if randomize then\r\n        randomseed = tonumber(({...})[1]) or tonumber(({...})[2]) or randomseed\r\n      end\r\n    end",
    "type": "function"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "function(t1, t2)\r\n    if t1.name and t2.name then\r\n      return t1.name < t2.name\r\n    end\r\n    return t2.name ~= nil\r\n  end",
    "type": "function"
  }, {
    "id": 89,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 90,
    "text": "function(busted)\r\n  local block = {}\r\n  local root = busted.context.get()\r\n\r\n  function block.reject(descriptor, element)\r\n    element.env[descriptor] = function(...)\r\n      error(\"'\" .. descriptor .. \"' not supported inside current context block\", 2)\r\n    end\r\n  end\r\n\r\n  function block.rejectAll(element)\r\n    local env = getfenv(element.run)\r\n    block.reject('randomize', element)\r\n    for descriptor, _ in pairs(busted.executors) do\r\n      if root.env[descriptor] and (env ~= _G and env[descriptor] or rawget(env, descriptor)) then\r\n        block.reject(descriptor, element)\r\n      end\r\n    end\r\n  end\r\n\r\n  local function exec(descriptor, element)\r\n    if not element.env then element.env = {} end\r\n    block.rejectAll(element)\r\n    local ret = { busted.safe(descriptor, element.run, element) }\r\n    return unpack(ret)\r\n  end\r\n\r\n  function block.execAllOnce(descriptor, current, err)\r\n    local parent = busted.context.parent(current)\r\n\r\n    if parent then\r\n      local success = block.execAllOnce(descriptor, parent)\r\n      if not success then\r\n        return success\r\n      end\r\n    end\r\n\r\n    if not current[descriptor] then\r\n      current[descriptor] = {}\r\n    end\r\n    local list = current[descriptor]\r\n    if list.success ~= nil then\r\n      return list.success\r\n    end\r\n\r\n    local success = true\r\n    for _, v in ipairs(list) do\r\n      if not exec(descriptor, v):success() then\r\n        if err then err(descriptor) end\r\n        success = false\r\n      end\r\n    end\r\n\r\n    list.success = success\r\n\r\n    return success\r\n  end\r\n\r\n  function block.execAll(descriptor, current, propagate, err)\r\n    local parent = busted.context.parent(current)\r\n\r\n    if propagate and parent then\r\n      local success, ancestor = block.execAll(descriptor, parent, propagate)\r\n      if not success then\r\n        return success, ancestor\r\n      end\r\n    end\r\n\r\n    local list = current[descriptor] or {}\r\n\r\n    local success = true\r\n    for _, v in ipairs(list) do\r\n      if not exec(descriptor, v):success() then\r\n        if err then err(descriptor) end\r\n        success = nil\r\n      end\r\n    end\r\n    return success, current\r\n  end\r\n\r\n  function block.dexecAll(descriptor, current, propagate, err)\r\n    local parent = busted.context.parent(current)\r\n    local list = current[descriptor] or {}\r\n\r\n    local success = true\r\n    for _, v in ipairs(list) do\r\n      if not exec(descriptor, v):success() then\r\n        if err then err(descriptor) end\r\n        success = nil\r\n      end\r\n    end\r\n\r\n    if propagate and parent then\r\n      if not block.dexecAll(descriptor, parent, propagate) then\r\n        success = nil\r\n      end\r\n    end\r\n    return success\r\n  end\r\n\r\n  function block.lazySetup(element, err)\r\n    return block.execAllOnce('lazy_setup', element, err)\r\n  end\r\n\r\n  function block.lazyTeardown(element, err)\r\n    if element.lazy_setup and element.lazy_setup.success ~= nil then\r\n      block.dexecAll('lazy_teardown', element, nil, err)\r\n      element.lazy_setup.success = nil\r\n    end\r\n  end\r\n\r\n  function block.setup(element, err)\r\n      return block.execAll('strict_setup', element, nil, err)\r\n  end\r\n\r\n  function block.teardown(element, err)\r\n      return block.dexecAll('strict_teardown', element, nil, err)\r\n  end\r\n\r\n  function block.execute(descriptor, element)\r\n    if not element.env then element.env = {} end\r\n\r\n    local randomize = busted.randomize\r\n    local randomseed = busted.randomseed\r\n    element.env.randomize = function(...)\r\n      randomize = (select('#', ...) == 0 or ...)\r\n      if randomize then\r\n        randomseed = tonumber(({...})[1]) or tonumber(({...})[2]) or randomseed\r\n      end\r\n    end\r\n\r\n    if busted.safe(descriptor, element.run, element):success() then\r\n      if busted.sort then\r\n        sort(busted.context.children(element))\r\n      elseif randomize then\r\n        element.randomseed = randomseed\r\n        shuffle(busted.context.children(element), randomseed)\r\n      end\r\n\r\n      if block.setup(element) then\r\n        busted.execute(element)\r\n      end\r\n\r\n      block.lazyTeardown(element)\r\n      block.teardown(element)\r\n    end\r\n  end\r\n\r\n  return block\r\nend",
    "type": "function"
  }, {
    "id": 91,
    "text": "local block = {}",
    "type": "statement:localassign"
  }, {
    "id": 92,
    "text": "local root = busted.context.get()",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 94,
    "text": "",
    "type": "function container"
  }, {
    "id": 95,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 96,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 97,
    "text": "err",
    "type": "global function"
  }, {
    "id": 98,
    "text": "select",
    "type": "global function"
  }, {
    "id": 99,
    "text": "getfenv",
    "type": "global function"
  }, {
    "id": 100,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 101,
    "text": "execute",
    "type": "global function"
  }, {
    "id": 102,
    "text": "shuffle",
    "type": "global function"
  }, {
    "id": 103,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 104,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 105,
    "text": "busted.context.get",
    "type": "global function"
  }, {
    "id": 106,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 107,
    "text": "busted.context.children",
    "type": "global function"
  }, {
    "id": 108,
    "text": "error",
    "type": "global function"
  }, {
    "id": 109,
    "text": "safe",
    "type": "global function"
  }, {
    "id": 110,
    "text": "busted.context.parent",
    "type": "global function"
  }, {
    "id": 111,
    "text": "require",
    "type": "global function"
  }, {
    "id": 112,
    "text": "",
    "type": "variable container"
  }, {
    "id": 113,
    "text": "",
    "type": "require container"
  }, {
    "id": 114,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 115,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 116,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 117,
    "text": "",
    "type": "interface container"
  }, {
    "id": 118,
    "text": "",
    "type": "interface"
  }, {
    "id": 119,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 120,
    "text": "",
    "type": "require local variable"
  } ]
}