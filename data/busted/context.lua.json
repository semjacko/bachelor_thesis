{
  "_filename": "context.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/busted/busted/context.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 8,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 8,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 18,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 18,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 27,
    "label": "has",
    "to": 31
  }, {
    "from": 15,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 32,
    "label": "has",
    "to": 38
  }, {
    "from": 15,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 39,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 15,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 6
  }, {
    "from": 45,
    "label": "has",
    "to": 6
  }, {
    "from": 15,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 15,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 49,
    "label": "has",
    "to": 53
  }, {
    "from": 49,
    "label": "has",
    "to": 54
  }, {
    "from": 49,
    "label": "has",
    "to": 55
  }, {
    "from": 15,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 56,
    "label": "has",
    "to": 59
  }, {
    "from": 56,
    "label": "has",
    "to": 60
  }, {
    "from": 15,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 6
  }, {
    "from": 15,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 6
  }, {
    "from": 15,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 63,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 63,
    "label": "has",
    "to": 68
  }, {
    "from": 63,
    "label": "has",
    "to": 69
  }, {
    "from": 15,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 70,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 15,
    "label": "has",
    "to": 6
  }, {
    "from": 15,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 19
  }, {
    "from": 78,
    "label": "has",
    "to": 20
  }, {
    "from": 78,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 78,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 78,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 27,
    "label": "has",
    "to": 31
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 33
  }, {
    "from": 80,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 80,
    "label": "has",
    "to": 38
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 40
  }, {
    "from": 82,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 82,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 46
  }, {
    "from": 84,
    "label": "has",
    "to": 6
  }, {
    "from": 84,
    "label": "has",
    "to": 6
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 48
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 50
  }, {
    "from": 88,
    "label": "has",
    "to": 51
  }, {
    "from": 88,
    "label": "has",
    "to": 52
  }, {
    "from": 88,
    "label": "has",
    "to": 53
  }, {
    "from": 88,
    "label": "has",
    "to": 54
  }, {
    "from": 88,
    "label": "has",
    "to": 55
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 90,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 90,
    "label": "has",
    "to": 59
  }, {
    "from": 90,
    "label": "has",
    "to": 60
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 6
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 94,
    "label": "has",
    "to": 6
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 96,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 96,
    "label": "has",
    "to": 68
  }, {
    "from": 96,
    "label": "has",
    "to": 69
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 98,
    "label": "has",
    "to": 71
  }, {
    "from": 98,
    "label": "has",
    "to": 72
  }, {
    "from": 98,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 98,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 100,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 27,
    "label": "has",
    "to": 31
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 102,
    "label": "has",
    "to": 104
  }, {
    "from": 102,
    "label": "has",
    "to": 105
  }, {
    "from": 102,
    "label": "has",
    "to": 106
  }, {
    "from": 102,
    "label": "has",
    "to": 107
  }, {
    "from": 102,
    "label": "has",
    "to": 108
  }, {
    "from": 102,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 18,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 18,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 27,
    "label": "has",
    "to": 31
  }, {
    "from": 15,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 32,
    "label": "has",
    "to": 38
  }, {
    "from": 15,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 39,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 15,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 6
  }, {
    "from": 45,
    "label": "has",
    "to": 6
  }, {
    "from": 15,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 15,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 49,
    "label": "has",
    "to": 53
  }, {
    "from": 49,
    "label": "has",
    "to": 54
  }, {
    "from": 49,
    "label": "has",
    "to": 55
  }, {
    "from": 15,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 56,
    "label": "has",
    "to": 59
  }, {
    "from": 56,
    "label": "has",
    "to": 60
  }, {
    "from": 15,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 6
  }, {
    "from": 15,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 6
  }, {
    "from": 15,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 63,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 63,
    "label": "has",
    "to": 68
  }, {
    "from": 63,
    "label": "has",
    "to": 69
  }, {
    "from": 15,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 70,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 15,
    "label": "has",
    "to": 6
  }, {
    "from": 102,
    "label": "has",
    "to": 6
  }, {
    "from": 102,
    "label": "has",
    "to": 109
  }, {
    "from": 82,
    "label": "calls",
    "to": 8
  }, {
    "from": 8,
    "label": "calls",
    "to": 116
  }, {
    "from": 2,
    "label": "calls",
    "to": 117
  }, {
    "from": 15,
    "label": "calls",
    "to": 80
  }, {
    "from": 8,
    "label": "calls",
    "to": 119
  }, {
    "from": 82,
    "label": "calls",
    "to": 114
  }, {
    "from": 15,
    "label": "calls",
    "to": 114
  }, {
    "from": 80,
    "label": "calls",
    "to": 2
  }, {
    "from": 82,
    "label": "calls",
    "to": 2
  }, {
    "from": 15,
    "label": "calls",
    "to": 82
  }, {
    "from": 15,
    "label": "calls",
    "to": 120
  }, {
    "from": 15,
    "label": "calls",
    "to": 120
  }, {
    "from": 8,
    "label": "calls",
    "to": 118
  }, {
    "from": 78,
    "label": "calls",
    "to": 118
  }, {
    "from": 2,
    "label": "calls",
    "to": 112
  }, {
    "from": 110,
    "label": "calls",
    "to": 123
  }, {
    "from": 78,
    "label": "calls",
    "to": 94
  }, {
    "from": 2,
    "label": "calls",
    "to": 111
  }, {
    "from": 80,
    "label": "calls",
    "to": 113
  }, {
    "from": 15,
    "label": "calls",
    "to": 113
  }, {
    "from": 15,
    "label": "calls",
    "to": 113
  }, {
    "from": 80,
    "label": "calls",
    "to": 78
  }, {
    "from": 80,
    "label": "calls",
    "to": 78
  }, {
    "from": 1,
    "label": "contains",
    "to": 110
  }, {
    "from": 110,
    "label": "declares",
    "to": 2
  }, {
    "from": 110,
    "label": "declares",
    "to": 8
  }, {
    "from": 110,
    "label": "declares",
    "to": 15
  }, {
    "from": 110,
    "label": "declares",
    "to": 78
  }, {
    "from": 110,
    "label": "declares",
    "to": 80
  }, {
    "from": 110,
    "label": "declares",
    "to": 82
  }, {
    "from": 110,
    "label": "declares",
    "to": 84
  }, {
    "from": 110,
    "label": "declares",
    "to": 86
  }, {
    "from": 110,
    "label": "declares",
    "to": 88
  }, {
    "from": 110,
    "label": "declares",
    "to": 90
  }, {
    "from": 110,
    "label": "declares",
    "to": 92
  }, {
    "from": 110,
    "label": "declares",
    "to": 94
  }, {
    "from": 110,
    "label": "declares",
    "to": 96
  }, {
    "from": 110,
    "label": "declares",
    "to": 98
  }, {
    "from": 110,
    "label": "declares",
    "to": 100
  }, {
    "from": 110,
    "label": "declares",
    "to": 102
  }, {
    "from": 1,
    "label": "declares",
    "to": 115
  }, {
    "from": 1,
    "label": "declares",
    "to": 121
  }, {
    "from": 1,
    "label": "declares",
    "to": 122
  }, {
    "from": 1,
    "label": "contains",
    "to": 124
  }, {
    "from": 1,
    "label": "contains",
    "to": 125
  }, {
    "from": 125,
    "label": "initializes",
    "to": 126
  }, {
    "from": 126,
    "label": "requires",
    "to": 127
  }, {
    "from": 1,
    "label": "provides",
    "to": 128
  }, {
    "from": 128,
    "label": "provides",
    "to": 129
  }, {
    "from": 130,
    "label": "requires",
    "to": 1
  }, {
    "from": 131,
    "label": "requires",
    "to": 127
  }, {
    "from": 132,
    "label": "requires",
    "to": 127
  }, {
    "from": 133,
    "label": "requires",
    "to": 127
  }, {
    "from": 134,
    "label": "requires",
    "to": 127
  }, {
    "from": 135,
    "label": "requires",
    "to": 127
  }, {
    "from": 26,
    "label": "hasArgument",
    "to": 100
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "context",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function save()\r\n  local g = {}\r\n  for k,_ in next, _G, nil do\r\n    g[k] = rawget(_G, k)\r\n  end\r\n  return {\r\n    gmt = debug.getmetatable(_G),\r\n    g = g,\r\n    loaded = tablex.copy(package.loaded)\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local g = {}",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "for k,_ in next, _G, nil do\r\n    g[k] = rawget(_G, k)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 5,
    "text": "g[k] = rawget(_G, k)",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "local function restore(state)\r\n  setmetatable(_G, state.gmt)\r\n  for k,_ in next, _G, nil do\r\n    rawset(_G, k, state.g[k])\r\n  end\r\n  for k,_ in pairs(package.loaded) do\r\n    package.loaded[k] = state.loaded[k]\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "setmetatable(_G, state.gmt)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "for k,_ in next, _G, nil do\r\n    rawset(_G, k, state.g[k])\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 11,
    "text": "rawset(_G, k, state.g[k])",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "for k,_ in pairs(package.loaded) do\r\n    package.loaded[k] = state.loaded[k]\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 13,
    "text": "package.loaded[k] = state.loaded[k]",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function context.ref()\r\n    local ref = {}\r\n    local ctx = data\r\n\r\n    local function unwrap(element, levels)\r\n      local levels = levels or 1\r\n      local parent = element\r\n      for i = 1, levels do\r\n        parent = ref.parent(parent)\r\n        if not parent then break end\r\n      end\r\n      if not element.env then element.env = {} end\r\n      setmetatable(element.env, {\r\n        __newindex = function(self, key, value)\r\n          if not parent then\r\n            _G[key] = value\r\n          else\r\n            if not parent.env then parent.env = {} end\r\n            parent.env[key] = value\r\n          end\r\n        end\r\n      })\r\n    end\r\n\r\n    local function push_state(current)\r\n      local state = false\r\n      if current.attributes.envmode == 'insulate' then\r\n        state = save()\r\n      elseif current.attributes.envmode == 'unwrap' then\r\n        unwrap(current)\r\n      elseif current.attributes.envmode == 'expose' then\r\n        unwrap(current, 2)\r\n      end\r\n      table.insert(states, state)\r\n    end\r\n\r\n    local function pop_state(current)\r\n      local state = table.remove(states)\r\n      if current.attributes.envmode == 'expose' then\r\n        states[#states] = states[#states] and save()\r\n      end\r\n      if state then\r\n        restore(state)\r\n      end\r\n    end\r\n\r\n    function ref.get(key)\r\n      if not key then return ctx end\r\n      return ctx[key]\r\n    end\r\n\r\n    function ref.set(key, value)\r\n      ctx[key] = value\r\n    end\r\n\r\n    function ref.clear()\r\n      data = { descriptor = 'suite', attributes = {} }\r\n      parents = {}\r\n      children = {}\r\n      stack = {}\r\n      states = {}\r\n      ctx = data\r\n    end\r\n\r\n    function ref.attach(child)\r\n      if not children[ctx] then children[ctx] = {} end\r\n      parents[child] = ctx\r\n      table.insert(children[ctx], child)\r\n    end\r\n\r\n    function ref.children(parent)\r\n      return children[parent] or {}\r\n    end\r\n\r\n    function ref.parent(child)\r\n      return parents[child]\r\n    end\r\n\r\n    function ref.push(current)\r\n      if not parents[current] and current ~= data then error('Detached child. Cannot push.') end\r\n      if ctx ~= current then push_state(current) end\r\n      table.insert(stack, ctx)\r\n      ctx = current\r\n    end\r\n\r\n    function ref.pop()\r\n      local current = ctx\r\n      ctx = table.remove(stack)\r\n      if ctx ~= current then pop_state(current) end\r\n      if not ctx then error('Context stack empty. Cannot pop.') end\r\n    end\r\n\r\n    return ref\r\n  end",
    "type": "function"
  }, {
    "id": 16,
    "text": "local ref = {}",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "local ctx = data",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "local function unwrap(element, levels)\r\n      local levels = levels or 1\r\n      local parent = element\r\n      for i = 1, levels do\r\n        parent = ref.parent(parent)\r\n        if not parent then break end\r\n      end\r\n      if not element.env then element.env = {} end\r\n      setmetatable(element.env, {\r\n        __newindex = function(self, key, value)\r\n          if not parent then\r\n            _G[key] = value\r\n          else\r\n            if not parent.env then parent.env = {} end\r\n            parent.env[key] = value\r\n          end\r\n        end\r\n      })\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 19,
    "text": "local levels = levels or 1",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "local parent = element",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "for i = 1, levels do\r\n        parent = ref.parent(parent)\r\n        if not parent then break end\r\n      end",
    "type": "statement:numericfor"
  }, {
    "id": 22,
    "text": "parent = ref.parent(parent)",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "if not parent then break end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "if not element.env then element.env = {} end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "element.env = {}",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "setmetatable(element.env, {\r\n        __newindex = function(self, key, value)\r\n          if not parent then\r\n            _G[key] = value\r\n          else\r\n            if not parent.env then parent.env = {} end\r\n            parent.env[key] = value\r\n          end\r\n        end\r\n      })",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "if not parent then\r\n            _G[key] = value\r\n          else\r\n            if not parent.env then parent.env = {} end\r\n            parent.env[key] = value\r\n          end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "_G[key] = value",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "if not parent.env then parent.env = {} end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "parent.env = {}",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "parent.env[key] = value",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "local function push_state(current)\r\n      local state = false\r\n      if current.attributes.envmode == 'insulate' then\r\n        state = save()\r\n      elseif current.attributes.envmode == 'unwrap' then\r\n        unwrap(current)\r\n      elseif current.attributes.envmode == 'expose' then\r\n        unwrap(current, 2)\r\n      end\r\n      table.insert(states, state)\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 33,
    "text": "local state = false",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "if current.attributes.envmode == 'insulate' then\r\n        state = save()\r\n      elseif current.attributes.envmode == 'unwrap' then\r\n        unwrap(current)\r\n      elseif current.attributes.envmode == 'expose' then\r\n        unwrap(current, 2)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "state = save()",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "unwrap(current)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "unwrap(current, 2)",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "table.insert(states, state)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "local function pop_state(current)\r\n      local state = table.remove(states)\r\n      if current.attributes.envmode == 'expose' then\r\n        states[#states] = states[#states] and save()\r\n      end\r\n      if state then\r\n        restore(state)\r\n      end\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 40,
    "text": "local state = table.remove(states)",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "if current.attributes.envmode == 'expose' then\r\n        states[#states] = states[#states] and save()\r\n      end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "states[#states] = states[#states] and save()",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "if state then\r\n        restore(state)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "restore(state)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "function ref.get(key)\r\n      if not key then return ctx end\r\n      return ctx[key]\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 46,
    "text": "if not key then return ctx end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "function ref.set(key, value)\r\n      ctx[key] = value\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 48,
    "text": "ctx[key] = value",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "function ref.clear()\r\n      data = { descriptor = 'suite', attributes = {} }\r\n      parents = {}\r\n      children = {}\r\n      stack = {}\r\n      states = {}\r\n      ctx = data\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 50,
    "text": "data = { descriptor = 'suite', attributes = {} }",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "parents = {}",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "children = {}",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "stack = {}",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "states = {}",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "ctx = data",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "function ref.attach(child)\r\n      if not children[ctx] then children[ctx] = {} end\r\n      parents[child] = ctx\r\n      table.insert(children[ctx], child)\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 57,
    "text": "if not children[ctx] then children[ctx] = {} end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "children[ctx] = {}",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "parents[child] = ctx",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "table.insert(children[ctx], child)",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "function ref.children(parent)\r\n      return children[parent] or {}\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 62,
    "text": "function ref.parent(child)\r\n      return parents[child]\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 63,
    "text": "function ref.push(current)\r\n      if not parents[current] and current ~= data then error('Detached child. Cannot push.') end\r\n      if ctx ~= current then push_state(current) end\r\n      table.insert(stack, ctx)\r\n      ctx = current\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 64,
    "text": "if not parents[current] and current ~= data then error('Detached child. Cannot push.') end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "error('Detached child. Cannot push.')",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "if ctx ~= current then push_state(current) end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "push_state(current)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "table.insert(stack, ctx)",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "ctx = current",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "function ref.pop()\r\n      local current = ctx\r\n      ctx = table.remove(stack)\r\n      if ctx ~= current then pop_state(current) end\r\n      if not ctx then error('Context stack empty. Cannot pop.') end\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 71,
    "text": "local current = ctx",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "ctx = table.remove(stack)",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "if ctx ~= current then pop_state(current) end",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "pop_state(current)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "if not ctx then error('Context stack empty. Cannot pop.') end",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "error('Context stack empty. Cannot pop.')",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "local function unwrap(element, levels)\r\n      local levels = levels or 1\r\n      local parent = element\r\n      for i = 1, levels do\r\n        parent = ref.parent(parent)\r\n        if not parent then break end\r\n      end\r\n      if not element.env then element.env = {} end\r\n      setmetatable(element.env, {\r\n        __newindex = function(self, key, value)\r\n          if not parent then\r\n            _G[key] = value\r\n          else\r\n            if not parent.env then parent.env = {} end\r\n            parent.env[key] = value\r\n          end\r\n        end\r\n      })\r\n    end",
    "type": "function"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "local function push_state(current)\r\n      local state = false\r\n      if current.attributes.envmode == 'insulate' then\r\n        state = save()\r\n      elseif current.attributes.envmode == 'unwrap' then\r\n        unwrap(current)\r\n      elseif current.attributes.envmode == 'expose' then\r\n        unwrap(current, 2)\r\n      end\r\n      table.insert(states, state)\r\n    end",
    "type": "function"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "local function pop_state(current)\r\n      local state = table.remove(states)\r\n      if current.attributes.envmode == 'expose' then\r\n        states[#states] = states[#states] and save()\r\n      end\r\n      if state then\r\n        restore(state)\r\n      end\r\n    end",
    "type": "function"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "function ref.get(key)\r\n      if not key then return ctx end\r\n      return ctx[key]\r\n    end",
    "type": "function"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "function ref.set(key, value)\r\n      ctx[key] = value\r\n    end",
    "type": "function"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "function ref.clear()\r\n      data = { descriptor = 'suite', attributes = {} }\r\n      parents = {}\r\n      children = {}\r\n      stack = {}\r\n      states = {}\r\n      ctx = data\r\n    end",
    "type": "function"
  }, {
    "id": 89,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 90,
    "text": "function ref.attach(child)\r\n      if not children[ctx] then children[ctx] = {} end\r\n      parents[child] = ctx\r\n      table.insert(children[ctx], child)\r\n    end",
    "type": "function"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "function ref.children(parent)\r\n      return children[parent] or {}\r\n    end",
    "type": "function"
  }, {
    "id": 93,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 94,
    "text": "function ref.parent(child)\r\n      return parents[child]\r\n    end",
    "type": "function"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "function ref.push(current)\r\n      if not parents[current] and current ~= data then error('Detached child. Cannot push.') end\r\n      if ctx ~= current then push_state(current) end\r\n      table.insert(stack, ctx)\r\n      ctx = current\r\n    end",
    "type": "function"
  }, {
    "id": 97,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 98,
    "text": "function ref.pop()\r\n      local current = ctx\r\n      ctx = table.remove(stack)\r\n      if ctx ~= current then pop_state(current) end\r\n      if not ctx then error('Context stack empty. Cannot pop.') end\r\n    end",
    "type": "function"
  }, {
    "id": 99,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 100,
    "text": "function(self, key, value)\r\n          if not parent then\r\n            _G[key] = value\r\n          else\r\n            if not parent.env then parent.env = {} end\r\n            parent.env[key] = value\r\n          end\r\n        end",
    "type": "function"
  }, {
    "id": 101,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 102,
    "text": "function()\r\n  local context = {}\r\n\r\n  local data = { descriptor = 'suite', attributes = {} }\r\n  local parents = {}\r\n  local children = {}\r\n  local stack = {}\r\n  local states = {}\r\n\r\n  function context.ref()\r\n    local ref = {}\r\n    local ctx = data\r\n\r\n    local function unwrap(element, levels)\r\n      local levels = levels or 1\r\n      local parent = element\r\n      for i = 1, levels do\r\n        parent = ref.parent(parent)\r\n        if not parent then break end\r\n      end\r\n      if not element.env then element.env = {} end\r\n      setmetatable(element.env, {\r\n        __newindex = function(self, key, value)\r\n          if not parent then\r\n            _G[key] = value\r\n          else\r\n            if not parent.env then parent.env = {} end\r\n            parent.env[key] = value\r\n          end\r\n        end\r\n      })\r\n    end\r\n\r\n    local function push_state(current)\r\n      local state = false\r\n      if current.attributes.envmode == 'insulate' then\r\n        state = save()\r\n      elseif current.attributes.envmode == 'unwrap' then\r\n        unwrap(current)\r\n      elseif current.attributes.envmode == 'expose' then\r\n        unwrap(current, 2)\r\n      end\r\n      table.insert(states, state)\r\n    end\r\n\r\n    local function pop_state(current)\r\n      local state = table.remove(states)\r\n      if current.attributes.envmode == 'expose' then\r\n        states[#states] = states[#states] and save()\r\n      end\r\n      if state then\r\n        restore(state)\r\n      end\r\n    end\r\n\r\n    function ref.get(key)\r\n      if not key then return ctx end\r\n      return ctx[key]\r\n    end\r\n\r\n    function ref.set(key, value)\r\n      ctx[key] = value\r\n    end\r\n\r\n    function ref.clear()\r\n      data = { descriptor = 'suite', attributes = {} }\r\n      parents = {}\r\n      children = {}\r\n      stack = {}\r\n      states = {}\r\n      ctx = data\r\n    end\r\n\r\n    function ref.attach(child)\r\n      if not children[ctx] then children[ctx] = {} end\r\n      parents[child] = ctx\r\n      table.insert(children[ctx], child)\r\n    end\r\n\r\n    function ref.children(parent)\r\n      return children[parent] or {}\r\n    end\r\n\r\n    function ref.parent(child)\r\n      return parents[child]\r\n    end\r\n\r\n    function ref.push(current)\r\n      if not parents[current] and current ~= data then error('Detached child. Cannot push.') end\r\n      if ctx ~= current then push_state(current) end\r\n      table.insert(stack, ctx)\r\n      ctx = current\r\n    end\r\n\r\n    function ref.pop()\r\n      local current = ctx\r\n      ctx = table.remove(stack)\r\n      if ctx ~= current then pop_state(current) end\r\n      if not ctx then error('Context stack empty. Cannot pop.') end\r\n    end\r\n\r\n    return ref\r\n  end\r\n\r\n  return context\r\nend",
    "type": "function"
  }, {
    "id": 103,
    "text": "local context = {}",
    "type": "statement:localassign"
  }, {
    "id": 104,
    "text": "local data = { descriptor = 'suite', attributes = {} }",
    "type": "statement:localassign"
  }, {
    "id": 105,
    "text": "local parents = {}",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "local children = {}",
    "type": "statement:localassign"
  }, {
    "id": 107,
    "text": "local stack = {}",
    "type": "statement:localassign"
  }, {
    "id": 108,
    "text": "local states = {}",
    "type": "statement:localassign"
  }, {
    "id": 109,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 110,
    "text": "",
    "type": "function container"
  }, {
    "id": 111,
    "text": "copy",
    "type": "global function"
  }, {
    "id": 112,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 113,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 114,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 115,
    "text": "set",
    "type": "global function"
  }, {
    "id": 116,
    "text": "rawset",
    "type": "global function"
  }, {
    "id": 117,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 118,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 119,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 120,
    "text": "error",
    "type": "global function"
  }, {
    "id": 121,
    "text": "get",
    "type": "global function"
  }, {
    "id": 122,
    "text": "parent",
    "type": "global function"
  }, {
    "id": 123,
    "text": "require",
    "type": "global function"
  }, {
    "id": 124,
    "text": "",
    "type": "variable container"
  }, {
    "id": 125,
    "text": "",
    "type": "require container"
  }, {
    "id": 126,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 127,
    "text": "tablex",
    "type": "module"
  }, {
    "id": 128,
    "text": "",
    "type": "interface container"
  }, {
    "id": 129,
    "text": "",
    "type": "interface"
  }, {
    "id": 130,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 131,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 132,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 133,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 134,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 135,
    "text": "",
    "type": "require local variable"
  } ]
}