{
  "_filename": "cl_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/busted/spec/cl_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 5
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 10,
    "label": "has",
    "to": 5
  }, {
    "from": 10,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 12
  }, {
    "from": 16,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 16,
    "label": "has",
    "to": 5
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 24
  }, {
    "from": 19,
    "label": "has",
    "to": 25
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 26
  }, {
    "from": 19,
    "label": "has",
    "to": 27
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 26
  }, {
    "from": 19,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 33
  }, {
    "from": 29,
    "label": "has",
    "to": 21
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 29,
    "label": "has",
    "to": 35
  }, {
    "from": 29,
    "label": "has",
    "to": 21
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 29,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 21
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 21
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 21
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 41,
    "label": "has",
    "to": 21
  }, {
    "from": 41,
    "label": "has",
    "to": 45
  }, {
    "from": 41,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 21
  }, {
    "from": 47,
    "label": "has",
    "to": 26
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 21
  }, {
    "from": 50,
    "label": "has",
    "to": 34
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 31
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 21
  }, {
    "from": 54,
    "label": "has",
    "to": 45
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 21
  }, {
    "from": 57,
    "label": "has",
    "to": 22
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 57,
    "label": "has",
    "to": 21
  }, {
    "from": 57,
    "label": "has",
    "to": 24
  }, {
    "from": 57,
    "label": "has",
    "to": 60
  }, {
    "from": 57,
    "label": "has",
    "to": 21
  }, {
    "from": 57,
    "label": "has",
    "to": 34
  }, {
    "from": 57,
    "label": "has",
    "to": 61
  }, {
    "from": 57,
    "label": "has",
    "to": 21
  }, {
    "from": 57,
    "label": "has",
    "to": 26
  }, {
    "from": 57,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 21
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 63,
    "label": "has",
    "to": 66
  }, {
    "from": 63,
    "label": "has",
    "to": 21
  }, {
    "from": 63,
    "label": "has",
    "to": 43
  }, {
    "from": 63,
    "label": "has",
    "to": 67
  }, {
    "from": 63,
    "label": "has",
    "to": 21
  }, {
    "from": 63,
    "label": "has",
    "to": 24
  }, {
    "from": 63,
    "label": "has",
    "to": 68
  }, {
    "from": 63,
    "label": "has",
    "to": 31
  }, {
    "from": 63,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 31
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 21
  }, {
    "from": 73,
    "label": "has",
    "to": 43
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 73,
    "label": "has",
    "to": 21
  }, {
    "from": 73,
    "label": "has",
    "to": 45
  }, {
    "from": 73,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 21
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 77,
    "label": "has",
    "to": 80
  }, {
    "from": 77,
    "label": "has",
    "to": 21
  }, {
    "from": 77,
    "label": "has",
    "to": 34
  }, {
    "from": 77,
    "label": "has",
    "to": 81
  }, {
    "from": 77,
    "label": "has",
    "to": 21
  }, {
    "from": 77,
    "label": "has",
    "to": 24
  }, {
    "from": 77,
    "label": "has",
    "to": 82
  }, {
    "from": 77,
    "label": "has",
    "to": 21
  }, {
    "from": 77,
    "label": "has",
    "to": 24
  }, {
    "from": 77,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 84,
    "label": "has",
    "to": 87
  }, {
    "from": 84,
    "label": "has",
    "to": 88
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 86
  }, {
    "from": 89,
    "label": "has",
    "to": 87
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 31
  }, {
    "from": 92,
    "label": "has",
    "to": 32
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 95,
    "label": "has",
    "to": 31
  }, {
    "from": 95,
    "label": "has",
    "to": 32
  }, {
    "from": 95,
    "label": "has",
    "to": 97
  }, {
    "from": 95,
    "label": "has",
    "to": 21
  }, {
    "from": 95,
    "label": "has",
    "to": 98
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 31
  }, {
    "from": 99,
    "label": "has",
    "to": 32
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 102,
    "label": "has",
    "to": 21
  }, {
    "from": 102,
    "label": "has",
    "to": 104
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 105,
    "label": "has",
    "to": 21
  }, {
    "from": 105,
    "label": "has",
    "to": 45
  }, {
    "from": 105,
    "label": "has",
    "to": 107
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 108,
    "label": "has",
    "to": 21
  }, {
    "from": 108,
    "label": "has",
    "to": 45
  }, {
    "from": 108,
    "label": "has",
    "to": 110
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 31
  }, {
    "from": 111,
    "label": "has",
    "to": 32
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 111,
    "label": "has",
    "to": 21
  }, {
    "from": 111,
    "label": "has",
    "to": 34
  }, {
    "from": 111,
    "label": "has",
    "to": 114
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 115,
    "label": "has",
    "to": 31
  }, {
    "from": 115,
    "label": "has",
    "to": 32
  }, {
    "from": 115,
    "label": "has",
    "to": 117
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 118,
    "label": "has",
    "to": 21
  }, {
    "from": 118,
    "label": "has",
    "to": 120
  }, {
    "from": 118,
    "label": "has",
    "to": 121
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 122,
    "label": "has",
    "to": 124
  }, {
    "from": 122,
    "label": "has",
    "to": 31
  }, {
    "from": 122,
    "label": "has",
    "to": 32
  }, {
    "from": 122,
    "label": "has",
    "to": 125
  }, {
    "from": 122,
    "label": "has",
    "to": 126
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 20
  }, {
    "from": 128,
    "label": "has",
    "to": 21
  }, {
    "from": 128,
    "label": "has",
    "to": 22
  }, {
    "from": 128,
    "label": "has",
    "to": 23
  }, {
    "from": 128,
    "label": "has",
    "to": 21
  }, {
    "from": 128,
    "label": "has",
    "to": 24
  }, {
    "from": 128,
    "label": "has",
    "to": 25
  }, {
    "from": 128,
    "label": "has",
    "to": 21
  }, {
    "from": 128,
    "label": "has",
    "to": 26
  }, {
    "from": 128,
    "label": "has",
    "to": 27
  }, {
    "from": 128,
    "label": "has",
    "to": 21
  }, {
    "from": 128,
    "label": "has",
    "to": 26
  }, {
    "from": 127,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 30
  }, {
    "from": 129,
    "label": "has",
    "to": 31
  }, {
    "from": 129,
    "label": "has",
    "to": 32
  }, {
    "from": 129,
    "label": "has",
    "to": 33
  }, {
    "from": 129,
    "label": "has",
    "to": 21
  }, {
    "from": 129,
    "label": "has",
    "to": 34
  }, {
    "from": 129,
    "label": "has",
    "to": 35
  }, {
    "from": 129,
    "label": "has",
    "to": 21
  }, {
    "from": 129,
    "label": "has",
    "to": 34
  }, {
    "from": 127,
    "label": "has",
    "to": 130
  }, {
    "from": 130,
    "label": "has",
    "to": 38
  }, {
    "from": 130,
    "label": "has",
    "to": 21
  }, {
    "from": 130,
    "label": "has",
    "to": 39
  }, {
    "from": 130,
    "label": "has",
    "to": 21
  }, {
    "from": 127,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 42
  }, {
    "from": 131,
    "label": "has",
    "to": 21
  }, {
    "from": 131,
    "label": "has",
    "to": 43
  }, {
    "from": 131,
    "label": "has",
    "to": 44
  }, {
    "from": 131,
    "label": "has",
    "to": 21
  }, {
    "from": 131,
    "label": "has",
    "to": 45
  }, {
    "from": 127,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 48
  }, {
    "from": 132,
    "label": "has",
    "to": 21
  }, {
    "from": 132,
    "label": "has",
    "to": 26
  }, {
    "from": 127,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 51
  }, {
    "from": 133,
    "label": "has",
    "to": 21
  }, {
    "from": 133,
    "label": "has",
    "to": 34
  }, {
    "from": 133,
    "label": "has",
    "to": 52
  }, {
    "from": 133,
    "label": "has",
    "to": 31
  }, {
    "from": 127,
    "label": "has",
    "to": 134
  }, {
    "from": 134,
    "label": "has",
    "to": 55
  }, {
    "from": 134,
    "label": "has",
    "to": 21
  }, {
    "from": 134,
    "label": "has",
    "to": 45
  }, {
    "from": 127,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 58
  }, {
    "from": 135,
    "label": "has",
    "to": 21
  }, {
    "from": 135,
    "label": "has",
    "to": 22
  }, {
    "from": 135,
    "label": "has",
    "to": 59
  }, {
    "from": 135,
    "label": "has",
    "to": 21
  }, {
    "from": 135,
    "label": "has",
    "to": 24
  }, {
    "from": 135,
    "label": "has",
    "to": 60
  }, {
    "from": 135,
    "label": "has",
    "to": 21
  }, {
    "from": 135,
    "label": "has",
    "to": 34
  }, {
    "from": 135,
    "label": "has",
    "to": 61
  }, {
    "from": 135,
    "label": "has",
    "to": 21
  }, {
    "from": 135,
    "label": "has",
    "to": 26
  }, {
    "from": 127,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 64
  }, {
    "from": 136,
    "label": "has",
    "to": 21
  }, {
    "from": 136,
    "label": "has",
    "to": 65
  }, {
    "from": 136,
    "label": "has",
    "to": 66
  }, {
    "from": 136,
    "label": "has",
    "to": 21
  }, {
    "from": 136,
    "label": "has",
    "to": 43
  }, {
    "from": 136,
    "label": "has",
    "to": 67
  }, {
    "from": 136,
    "label": "has",
    "to": 21
  }, {
    "from": 136,
    "label": "has",
    "to": 24
  }, {
    "from": 136,
    "label": "has",
    "to": 68
  }, {
    "from": 136,
    "label": "has",
    "to": 31
  }, {
    "from": 127,
    "label": "has",
    "to": 137
  }, {
    "from": 137,
    "label": "has",
    "to": 71
  }, {
    "from": 137,
    "label": "has",
    "to": 31
  }, {
    "from": 127,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 74
  }, {
    "from": 138,
    "label": "has",
    "to": 21
  }, {
    "from": 138,
    "label": "has",
    "to": 43
  }, {
    "from": 138,
    "label": "has",
    "to": 75
  }, {
    "from": 138,
    "label": "has",
    "to": 21
  }, {
    "from": 138,
    "label": "has",
    "to": 45
  }, {
    "from": 127,
    "label": "has",
    "to": 139
  }, {
    "from": 139,
    "label": "has",
    "to": 78
  }, {
    "from": 139,
    "label": "has",
    "to": 21
  }, {
    "from": 139,
    "label": "has",
    "to": 79
  }, {
    "from": 139,
    "label": "has",
    "to": 80
  }, {
    "from": 139,
    "label": "has",
    "to": 21
  }, {
    "from": 139,
    "label": "has",
    "to": 34
  }, {
    "from": 139,
    "label": "has",
    "to": 81
  }, {
    "from": 139,
    "label": "has",
    "to": 21
  }, {
    "from": 139,
    "label": "has",
    "to": 24
  }, {
    "from": 139,
    "label": "has",
    "to": 82
  }, {
    "from": 139,
    "label": "has",
    "to": 21
  }, {
    "from": 139,
    "label": "has",
    "to": 24
  }, {
    "from": 127,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 85
  }, {
    "from": 140,
    "label": "has",
    "to": 86
  }, {
    "from": 140,
    "label": "has",
    "to": 87
  }, {
    "from": 127,
    "label": "has",
    "to": 141
  }, {
    "from": 141,
    "label": "has",
    "to": 90
  }, {
    "from": 141,
    "label": "has",
    "to": 86
  }, {
    "from": 141,
    "label": "has",
    "to": 87
  }, {
    "from": 127,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 93
  }, {
    "from": 142,
    "label": "has",
    "to": 31
  }, {
    "from": 142,
    "label": "has",
    "to": 32
  }, {
    "from": 127,
    "label": "has",
    "to": 143
  }, {
    "from": 143,
    "label": "has",
    "to": 96
  }, {
    "from": 143,
    "label": "has",
    "to": 31
  }, {
    "from": 143,
    "label": "has",
    "to": 32
  }, {
    "from": 143,
    "label": "has",
    "to": 97
  }, {
    "from": 143,
    "label": "has",
    "to": 21
  }, {
    "from": 127,
    "label": "has",
    "to": 144
  }, {
    "from": 144,
    "label": "has",
    "to": 100
  }, {
    "from": 144,
    "label": "has",
    "to": 31
  }, {
    "from": 144,
    "label": "has",
    "to": 32
  }, {
    "from": 127,
    "label": "has",
    "to": 145
  }, {
    "from": 145,
    "label": "has",
    "to": 103
  }, {
    "from": 145,
    "label": "has",
    "to": 21
  }, {
    "from": 127,
    "label": "has",
    "to": 146
  }, {
    "from": 146,
    "label": "has",
    "to": 106
  }, {
    "from": 146,
    "label": "has",
    "to": 21
  }, {
    "from": 146,
    "label": "has",
    "to": 45
  }, {
    "from": 127,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 109
  }, {
    "from": 147,
    "label": "has",
    "to": 21
  }, {
    "from": 147,
    "label": "has",
    "to": 45
  }, {
    "from": 127,
    "label": "has",
    "to": 148
  }, {
    "from": 148,
    "label": "has",
    "to": 112
  }, {
    "from": 148,
    "label": "has",
    "to": 31
  }, {
    "from": 148,
    "label": "has",
    "to": 32
  }, {
    "from": 148,
    "label": "has",
    "to": 113
  }, {
    "from": 148,
    "label": "has",
    "to": 21
  }, {
    "from": 148,
    "label": "has",
    "to": 34
  }, {
    "from": 127,
    "label": "has",
    "to": 149
  }, {
    "from": 149,
    "label": "has",
    "to": 116
  }, {
    "from": 149,
    "label": "has",
    "to": 31
  }, {
    "from": 149,
    "label": "has",
    "to": 32
  }, {
    "from": 127,
    "label": "has",
    "to": 150
  }, {
    "from": 150,
    "label": "has",
    "to": 119
  }, {
    "from": 150,
    "label": "has",
    "to": 21
  }, {
    "from": 150,
    "label": "has",
    "to": 120
  }, {
    "from": 127,
    "label": "has",
    "to": 151
  }, {
    "from": 151,
    "label": "has",
    "to": 123
  }, {
    "from": 151,
    "label": "has",
    "to": 124
  }, {
    "from": 151,
    "label": "has",
    "to": 31
  }, {
    "from": 151,
    "label": "has",
    "to": 32
  }, {
    "from": 151,
    "label": "has",
    "to": 125
  }, {
    "from": 127,
    "label": "has",
    "to": 152
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 153,
    "label": "has",
    "to": 21
  }, {
    "from": 153,
    "label": "has",
    "to": 155
  }, {
    "from": 153,
    "label": "has",
    "to": 156
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 157,
    "label": "has",
    "to": 159
  }, {
    "from": 157,
    "label": "has",
    "to": 160
  }, {
    "from": 157,
    "label": "has",
    "to": 161
  }, {
    "from": 162,
    "label": "has",
    "to": 163
  }, {
    "from": 163,
    "label": "has",
    "to": 154
  }, {
    "from": 163,
    "label": "has",
    "to": 21
  }, {
    "from": 163,
    "label": "has",
    "to": 155
  }, {
    "from": 162,
    "label": "has",
    "to": 164
  }, {
    "from": 164,
    "label": "has",
    "to": 158
  }, {
    "from": 164,
    "label": "has",
    "to": 159
  }, {
    "from": 164,
    "label": "has",
    "to": 160
  }, {
    "from": 162,
    "label": "has",
    "to": 165
  }, {
    "from": 166,
    "label": "has",
    "to": 167
  }, {
    "from": 166,
    "label": "has",
    "to": 21
  }, {
    "from": 166,
    "label": "has",
    "to": 24
  }, {
    "from": 166,
    "label": "has",
    "to": 168
  }, {
    "from": 166,
    "label": "has",
    "to": 21
  }, {
    "from": 166,
    "label": "has",
    "to": 34
  }, {
    "from": 166,
    "label": "has",
    "to": 169
  }, {
    "from": 166,
    "label": "has",
    "to": 21
  }, {
    "from": 166,
    "label": "has",
    "to": 24
  }, {
    "from": 166,
    "label": "has",
    "to": 170
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 171,
    "label": "has",
    "to": 31
  }, {
    "from": 171,
    "label": "has",
    "to": 32
  }, {
    "from": 171,
    "label": "has",
    "to": 173
  }, {
    "from": 171,
    "label": "has",
    "to": 21
  }, {
    "from": 171,
    "label": "has",
    "to": 34
  }, {
    "from": 171,
    "label": "has",
    "to": 174
  }, {
    "from": 175,
    "label": "has",
    "to": 176
  }, {
    "from": 175,
    "label": "has",
    "to": 21
  }, {
    "from": 175,
    "label": "has",
    "to": 177
  }, {
    "from": 175,
    "label": "has",
    "to": 31
  }, {
    "from": 175,
    "label": "has",
    "to": 178
  }, {
    "from": 179,
    "label": "has",
    "to": 180
  }, {
    "from": 179,
    "label": "has",
    "to": 21
  }, {
    "from": 179,
    "label": "has",
    "to": 181
  }, {
    "from": 179,
    "label": "has",
    "to": 182
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 183,
    "label": "has",
    "to": 31
  }, {
    "from": 183,
    "label": "has",
    "to": 32
  }, {
    "from": 183,
    "label": "has",
    "to": 185
  }, {
    "from": 186,
    "label": "has",
    "to": 187
  }, {
    "from": 186,
    "label": "has",
    "to": 21
  }, {
    "from": 186,
    "label": "has",
    "to": 188
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 189,
    "label": "has",
    "to": 21
  }, {
    "from": 189,
    "label": "has",
    "to": 24
  }, {
    "from": 189,
    "label": "has",
    "to": 191
  }, {
    "from": 192,
    "label": "has",
    "to": 193
  }, {
    "from": 193,
    "label": "has",
    "to": 167
  }, {
    "from": 193,
    "label": "has",
    "to": 21
  }, {
    "from": 193,
    "label": "has",
    "to": 24
  }, {
    "from": 193,
    "label": "has",
    "to": 168
  }, {
    "from": 193,
    "label": "has",
    "to": 21
  }, {
    "from": 193,
    "label": "has",
    "to": 34
  }, {
    "from": 193,
    "label": "has",
    "to": 169
  }, {
    "from": 193,
    "label": "has",
    "to": 21
  }, {
    "from": 193,
    "label": "has",
    "to": 24
  }, {
    "from": 192,
    "label": "has",
    "to": 194
  }, {
    "from": 194,
    "label": "has",
    "to": 172
  }, {
    "from": 194,
    "label": "has",
    "to": 31
  }, {
    "from": 194,
    "label": "has",
    "to": 32
  }, {
    "from": 194,
    "label": "has",
    "to": 173
  }, {
    "from": 194,
    "label": "has",
    "to": 21
  }, {
    "from": 194,
    "label": "has",
    "to": 34
  }, {
    "from": 192,
    "label": "has",
    "to": 195
  }, {
    "from": 195,
    "label": "has",
    "to": 176
  }, {
    "from": 195,
    "label": "has",
    "to": 21
  }, {
    "from": 195,
    "label": "has",
    "to": 177
  }, {
    "from": 195,
    "label": "has",
    "to": 31
  }, {
    "from": 192,
    "label": "has",
    "to": 196
  }, {
    "from": 196,
    "label": "has",
    "to": 180
  }, {
    "from": 196,
    "label": "has",
    "to": 21
  }, {
    "from": 196,
    "label": "has",
    "to": 181
  }, {
    "from": 192,
    "label": "has",
    "to": 197
  }, {
    "from": 197,
    "label": "has",
    "to": 184
  }, {
    "from": 197,
    "label": "has",
    "to": 31
  }, {
    "from": 197,
    "label": "has",
    "to": 32
  }, {
    "from": 192,
    "label": "has",
    "to": 198
  }, {
    "from": 198,
    "label": "has",
    "to": 187
  }, {
    "from": 198,
    "label": "has",
    "to": 21
  }, {
    "from": 192,
    "label": "has",
    "to": 199
  }, {
    "from": 199,
    "label": "has",
    "to": 190
  }, {
    "from": 199,
    "label": "has",
    "to": 21
  }, {
    "from": 199,
    "label": "has",
    "to": 24
  }, {
    "from": 192,
    "label": "has",
    "to": 200
  }, {
    "from": 201,
    "label": "has",
    "to": 202
  }, {
    "from": 201,
    "label": "has",
    "to": 21
  }, {
    "from": 201,
    "label": "has",
    "to": 24
  }, {
    "from": 201,
    "label": "has",
    "to": 203
  }, {
    "from": 201,
    "label": "has",
    "to": 21
  }, {
    "from": 201,
    "label": "has",
    "to": 34
  }, {
    "from": 201,
    "label": "has",
    "to": 204
  }, {
    "from": 201,
    "label": "has",
    "to": 21
  }, {
    "from": 201,
    "label": "has",
    "to": 24
  }, {
    "from": 201,
    "label": "has",
    "to": 205
  }, {
    "from": 206,
    "label": "has",
    "to": 207
  }, {
    "from": 207,
    "label": "has",
    "to": 202
  }, {
    "from": 207,
    "label": "has",
    "to": 21
  }, {
    "from": 207,
    "label": "has",
    "to": 24
  }, {
    "from": 207,
    "label": "has",
    "to": 203
  }, {
    "from": 207,
    "label": "has",
    "to": 21
  }, {
    "from": 207,
    "label": "has",
    "to": 34
  }, {
    "from": 207,
    "label": "has",
    "to": 204
  }, {
    "from": 207,
    "label": "has",
    "to": 21
  }, {
    "from": 207,
    "label": "has",
    "to": 24
  }, {
    "from": 206,
    "label": "has",
    "to": 208
  }, {
    "from": 209,
    "label": "has",
    "to": 210
  }, {
    "from": 209,
    "label": "has",
    "to": 211
  }, {
    "from": 209,
    "label": "has",
    "to": 212
  }, {
    "from": 209,
    "label": "has",
    "to": 213
  }, {
    "from": 214,
    "label": "has",
    "to": 215
  }, {
    "from": 214,
    "label": "has",
    "to": 216
  }, {
    "from": 214,
    "label": "has",
    "to": 217
  }, {
    "from": 214,
    "label": "has",
    "to": 218
  }, {
    "from": 219,
    "label": "has",
    "to": 220
  }, {
    "from": 219,
    "label": "has",
    "to": 221
  }, {
    "from": 219,
    "label": "has",
    "to": 217
  }, {
    "from": 219,
    "label": "has",
    "to": 222
  }, {
    "from": 223,
    "label": "has",
    "to": 224
  }, {
    "from": 224,
    "label": "has",
    "to": 210
  }, {
    "from": 224,
    "label": "has",
    "to": 211
  }, {
    "from": 224,
    "label": "has",
    "to": 212
  }, {
    "from": 223,
    "label": "has",
    "to": 225
  }, {
    "from": 225,
    "label": "has",
    "to": 215
  }, {
    "from": 225,
    "label": "has",
    "to": 216
  }, {
    "from": 225,
    "label": "has",
    "to": 217
  }, {
    "from": 223,
    "label": "has",
    "to": 226
  }, {
    "from": 226,
    "label": "has",
    "to": 220
  }, {
    "from": 226,
    "label": "has",
    "to": 221
  }, {
    "from": 226,
    "label": "has",
    "to": 217
  }, {
    "from": 223,
    "label": "has",
    "to": 227
  }, {
    "from": 228,
    "label": "has",
    "to": 229
  }, {
    "from": 228,
    "label": "has",
    "to": 230
  }, {
    "from": 228,
    "label": "has",
    "to": 231
  }, {
    "from": 228,
    "label": "has",
    "to": 232
  }, {
    "from": 228,
    "label": "has",
    "to": 233
  }, {
    "from": 234,
    "label": "has",
    "to": 235
  }, {
    "from": 234,
    "label": "has",
    "to": 230
  }, {
    "from": 234,
    "label": "has",
    "to": 236
  }, {
    "from": 234,
    "label": "has",
    "to": 232
  }, {
    "from": 234,
    "label": "has",
    "to": 237
  }, {
    "from": 238,
    "label": "has",
    "to": 239
  }, {
    "from": 238,
    "label": "has",
    "to": 230
  }, {
    "from": 238,
    "label": "has",
    "to": 240
  }, {
    "from": 238,
    "label": "has",
    "to": 232
  }, {
    "from": 238,
    "label": "has",
    "to": 241
  }, {
    "from": 242,
    "label": "has",
    "to": 243
  }, {
    "from": 243,
    "label": "has",
    "to": 229
  }, {
    "from": 243,
    "label": "has",
    "to": 230
  }, {
    "from": 243,
    "label": "has",
    "to": 231
  }, {
    "from": 243,
    "label": "has",
    "to": 232
  }, {
    "from": 242,
    "label": "has",
    "to": 244
  }, {
    "from": 244,
    "label": "has",
    "to": 235
  }, {
    "from": 244,
    "label": "has",
    "to": 230
  }, {
    "from": 244,
    "label": "has",
    "to": 236
  }, {
    "from": 244,
    "label": "has",
    "to": 232
  }, {
    "from": 242,
    "label": "has",
    "to": 245
  }, {
    "from": 245,
    "label": "has",
    "to": 239
  }, {
    "from": 245,
    "label": "has",
    "to": 230
  }, {
    "from": 245,
    "label": "has",
    "to": 240
  }, {
    "from": 245,
    "label": "has",
    "to": 232
  }, {
    "from": 242,
    "label": "has",
    "to": 246
  }, {
    "from": 247,
    "label": "has",
    "to": 210
  }, {
    "from": 247,
    "label": "has",
    "to": 248
  }, {
    "from": 247,
    "label": "has",
    "to": 249
  }, {
    "from": 247,
    "label": "has",
    "to": 250
  }, {
    "from": 247,
    "label": "has",
    "to": 251
  }, {
    "from": 247,
    "label": "has",
    "to": 252
  }, {
    "from": 247,
    "label": "has",
    "to": 253
  }, {
    "from": 247,
    "label": "has",
    "to": 254
  }, {
    "from": 255,
    "label": "has",
    "to": 256
  }, {
    "from": 255,
    "label": "has",
    "to": 249
  }, {
    "from": 255,
    "label": "has",
    "to": 257
  }, {
    "from": 255,
    "label": "has",
    "to": 232
  }, {
    "from": 255,
    "label": "has",
    "to": 258
  }, {
    "from": 259,
    "label": "has",
    "to": 260
  }, {
    "from": 259,
    "label": "has",
    "to": 249
  }, {
    "from": 259,
    "label": "has",
    "to": 261
  }, {
    "from": 259,
    "label": "has",
    "to": 232
  }, {
    "from": 259,
    "label": "has",
    "to": 262
  }, {
    "from": 263,
    "label": "has",
    "to": 264
  }, {
    "from": 263,
    "label": "has",
    "to": 249
  }, {
    "from": 263,
    "label": "has",
    "to": 265
  }, {
    "from": 263,
    "label": "has",
    "to": 232
  }, {
    "from": 263,
    "label": "has",
    "to": 266
  }, {
    "from": 267,
    "label": "has",
    "to": 268
  }, {
    "from": 267,
    "label": "has",
    "to": 249
  }, {
    "from": 267,
    "label": "has",
    "to": 269
  }, {
    "from": 267,
    "label": "has",
    "to": 232
  }, {
    "from": 267,
    "label": "has",
    "to": 270
  }, {
    "from": 271,
    "label": "has",
    "to": 272
  }, {
    "from": 271,
    "label": "has",
    "to": 273
  }, {
    "from": 271,
    "label": "has",
    "to": 274
  }, {
    "from": 271,
    "label": "has",
    "to": 232
  }, {
    "from": 271,
    "label": "has",
    "to": 275
  }, {
    "from": 276,
    "label": "has",
    "to": 277
  }, {
    "from": 276,
    "label": "has",
    "to": 248
  }, {
    "from": 276,
    "label": "has",
    "to": 278
  }, {
    "from": 276,
    "label": "has",
    "to": 279
  }, {
    "from": 276,
    "label": "has",
    "to": 280
  }, {
    "from": 276,
    "label": "has",
    "to": 252
  }, {
    "from": 276,
    "label": "has",
    "to": 253
  }, {
    "from": 276,
    "label": "has",
    "to": 281
  }, {
    "from": 282,
    "label": "has",
    "to": 283
  }, {
    "from": 282,
    "label": "has",
    "to": 284
  }, {
    "from": 282,
    "label": "has",
    "to": 285
  }, {
    "from": 282,
    "label": "has",
    "to": 286
  }, {
    "from": 282,
    "label": "has",
    "to": 287
  }, {
    "from": 288,
    "label": "has",
    "to": 289
  }, {
    "from": 288,
    "label": "has",
    "to": 290
  }, {
    "from": 288,
    "label": "has",
    "to": 284
  }, {
    "from": 288,
    "label": "has",
    "to": 291
  }, {
    "from": 288,
    "label": "has",
    "to": 292
  }, {
    "from": 288,
    "label": "has",
    "to": 293
  }, {
    "from": 288,
    "label": "has",
    "to": 294
  }, {
    "from": 288,
    "label": "has",
    "to": 295
  }, {
    "from": 296,
    "label": "has",
    "to": 297
  }, {
    "from": 296,
    "label": "has",
    "to": 298
  }, {
    "from": 296,
    "label": "has",
    "to": 284
  }, {
    "from": 296,
    "label": "has",
    "to": 299
  }, {
    "from": 296,
    "label": "has",
    "to": 300
  }, {
    "from": 296,
    "label": "has",
    "to": 293
  }, {
    "from": 296,
    "label": "has",
    "to": 294
  }, {
    "from": 296,
    "label": "has",
    "to": 301
  }, {
    "from": 302,
    "label": "has",
    "to": 303
  }, {
    "from": 302,
    "label": "has",
    "to": 304
  }, {
    "from": 302,
    "label": "has",
    "to": 305
  }, {
    "from": 302,
    "label": "has",
    "to": 286
  }, {
    "from": 302,
    "label": "has",
    "to": 306
  }, {
    "from": 307,
    "label": "has",
    "to": 308
  }, {
    "from": 307,
    "label": "has",
    "to": 304
  }, {
    "from": 307,
    "label": "has",
    "to": 309
  }, {
    "from": 307,
    "label": "has",
    "to": 286
  }, {
    "from": 307,
    "label": "has",
    "to": 310
  }, {
    "from": 311,
    "label": "has",
    "to": 312
  }, {
    "from": 311,
    "label": "has",
    "to": 304
  }, {
    "from": 311,
    "label": "has",
    "to": 313
  }, {
    "from": 311,
    "label": "has",
    "to": 286
  }, {
    "from": 311,
    "label": "has",
    "to": 314
  }, {
    "from": 315,
    "label": "has",
    "to": 316
  }, {
    "from": 317,
    "label": "has",
    "to": 318
  }, {
    "from": 318,
    "label": "has",
    "to": 316
  }, {
    "from": 317,
    "label": "has",
    "to": 319
  }, {
    "from": 317,
    "label": "has",
    "to": 319
  }, {
    "from": 317,
    "label": "has",
    "to": 320
  }, {
    "from": 322,
    "label": "has",
    "to": 323
  }, {
    "from": 323,
    "label": "has",
    "to": 318
  }, {
    "from": 318,
    "label": "has",
    "to": 316
  }, {
    "from": 323,
    "label": "has",
    "to": 319
  }, {
    "from": 323,
    "label": "has",
    "to": 319
  }, {
    "from": 322,
    "label": "has",
    "to": 324
  }, {
    "from": 324,
    "label": "has",
    "to": 325
  }, {
    "from": 322,
    "label": "has",
    "to": 326
  }, {
    "from": 322,
    "label": "has",
    "to": 298
  }, {
    "from": 322,
    "label": "has",
    "to": 327
  }, {
    "from": 322,
    "label": "has",
    "to": 328
  }, {
    "from": 322,
    "label": "has",
    "to": 21
  }, {
    "from": 322,
    "label": "has",
    "to": 45
  }, {
    "from": 322,
    "label": "has",
    "to": 329
  }, {
    "from": 322,
    "label": "has",
    "to": 232
  }, {
    "from": 322,
    "label": "has",
    "to": 330
  }, {
    "from": 331,
    "label": "has",
    "to": 332
  }, {
    "from": 332,
    "label": "has",
    "to": 210
  }, {
    "from": 332,
    "label": "has",
    "to": 248
  }, {
    "from": 332,
    "label": "has",
    "to": 249
  }, {
    "from": 332,
    "label": "has",
    "to": 250
  }, {
    "from": 332,
    "label": "has",
    "to": 251
  }, {
    "from": 332,
    "label": "has",
    "to": 252
  }, {
    "from": 332,
    "label": "has",
    "to": 253
  }, {
    "from": 331,
    "label": "has",
    "to": 333
  }, {
    "from": 333,
    "label": "has",
    "to": 256
  }, {
    "from": 333,
    "label": "has",
    "to": 249
  }, {
    "from": 333,
    "label": "has",
    "to": 257
  }, {
    "from": 333,
    "label": "has",
    "to": 232
  }, {
    "from": 331,
    "label": "has",
    "to": 334
  }, {
    "from": 334,
    "label": "has",
    "to": 260
  }, {
    "from": 334,
    "label": "has",
    "to": 249
  }, {
    "from": 334,
    "label": "has",
    "to": 261
  }, {
    "from": 334,
    "label": "has",
    "to": 232
  }, {
    "from": 331,
    "label": "has",
    "to": 335
  }, {
    "from": 335,
    "label": "has",
    "to": 264
  }, {
    "from": 335,
    "label": "has",
    "to": 249
  }, {
    "from": 335,
    "label": "has",
    "to": 265
  }, {
    "from": 335,
    "label": "has",
    "to": 232
  }, {
    "from": 331,
    "label": "has",
    "to": 336
  }, {
    "from": 336,
    "label": "has",
    "to": 268
  }, {
    "from": 336,
    "label": "has",
    "to": 249
  }, {
    "from": 336,
    "label": "has",
    "to": 269
  }, {
    "from": 336,
    "label": "has",
    "to": 232
  }, {
    "from": 331,
    "label": "has",
    "to": 337
  }, {
    "from": 337,
    "label": "has",
    "to": 272
  }, {
    "from": 337,
    "label": "has",
    "to": 273
  }, {
    "from": 337,
    "label": "has",
    "to": 274
  }, {
    "from": 337,
    "label": "has",
    "to": 232
  }, {
    "from": 331,
    "label": "has",
    "to": 338
  }, {
    "from": 338,
    "label": "has",
    "to": 277
  }, {
    "from": 338,
    "label": "has",
    "to": 248
  }, {
    "from": 338,
    "label": "has",
    "to": 278
  }, {
    "from": 338,
    "label": "has",
    "to": 279
  }, {
    "from": 338,
    "label": "has",
    "to": 280
  }, {
    "from": 338,
    "label": "has",
    "to": 252
  }, {
    "from": 338,
    "label": "has",
    "to": 253
  }, {
    "from": 331,
    "label": "has",
    "to": 339
  }, {
    "from": 339,
    "label": "has",
    "to": 283
  }, {
    "from": 339,
    "label": "has",
    "to": 284
  }, {
    "from": 339,
    "label": "has",
    "to": 285
  }, {
    "from": 339,
    "label": "has",
    "to": 286
  }, {
    "from": 331,
    "label": "has",
    "to": 340
  }, {
    "from": 340,
    "label": "has",
    "to": 289
  }, {
    "from": 340,
    "label": "has",
    "to": 290
  }, {
    "from": 340,
    "label": "has",
    "to": 284
  }, {
    "from": 340,
    "label": "has",
    "to": 291
  }, {
    "from": 340,
    "label": "has",
    "to": 292
  }, {
    "from": 340,
    "label": "has",
    "to": 293
  }, {
    "from": 340,
    "label": "has",
    "to": 294
  }, {
    "from": 331,
    "label": "has",
    "to": 341
  }, {
    "from": 341,
    "label": "has",
    "to": 297
  }, {
    "from": 341,
    "label": "has",
    "to": 298
  }, {
    "from": 341,
    "label": "has",
    "to": 284
  }, {
    "from": 341,
    "label": "has",
    "to": 299
  }, {
    "from": 341,
    "label": "has",
    "to": 300
  }, {
    "from": 341,
    "label": "has",
    "to": 293
  }, {
    "from": 341,
    "label": "has",
    "to": 294
  }, {
    "from": 331,
    "label": "has",
    "to": 342
  }, {
    "from": 342,
    "label": "has",
    "to": 303
  }, {
    "from": 342,
    "label": "has",
    "to": 304
  }, {
    "from": 342,
    "label": "has",
    "to": 305
  }, {
    "from": 342,
    "label": "has",
    "to": 286
  }, {
    "from": 331,
    "label": "has",
    "to": 343
  }, {
    "from": 343,
    "label": "has",
    "to": 308
  }, {
    "from": 343,
    "label": "has",
    "to": 304
  }, {
    "from": 343,
    "label": "has",
    "to": 309
  }, {
    "from": 343,
    "label": "has",
    "to": 286
  }, {
    "from": 331,
    "label": "has",
    "to": 344
  }, {
    "from": 344,
    "label": "has",
    "to": 312
  }, {
    "from": 344,
    "label": "has",
    "to": 304
  }, {
    "from": 344,
    "label": "has",
    "to": 313
  }, {
    "from": 344,
    "label": "has",
    "to": 286
  }, {
    "from": 331,
    "label": "has",
    "to": 345
  }, {
    "from": 345,
    "label": "has",
    "to": 323
  }, {
    "from": 323,
    "label": "has",
    "to": 318
  }, {
    "from": 318,
    "label": "has",
    "to": 316
  }, {
    "from": 323,
    "label": "has",
    "to": 319
  }, {
    "from": 323,
    "label": "has",
    "to": 319
  }, {
    "from": 345,
    "label": "has",
    "to": 324
  }, {
    "from": 324,
    "label": "has",
    "to": 325
  }, {
    "from": 345,
    "label": "has",
    "to": 326
  }, {
    "from": 345,
    "label": "has",
    "to": 298
  }, {
    "from": 345,
    "label": "has",
    "to": 327
  }, {
    "from": 345,
    "label": "has",
    "to": 328
  }, {
    "from": 345,
    "label": "has",
    "to": 21
  }, {
    "from": 345,
    "label": "has",
    "to": 45
  }, {
    "from": 345,
    "label": "has",
    "to": 329
  }, {
    "from": 345,
    "label": "has",
    "to": 232
  }, {
    "from": 331,
    "label": "has",
    "to": 346
  }, {
    "from": 347,
    "label": "has",
    "to": 348
  }, {
    "from": 347,
    "label": "has",
    "to": 349
  }, {
    "from": 347,
    "label": "has",
    "to": 249
  }, {
    "from": 347,
    "label": "has",
    "to": 350
  }, {
    "from": 347,
    "label": "has",
    "to": 351
  }, {
    "from": 347,
    "label": "has",
    "to": 252
  }, {
    "from": 347,
    "label": "has",
    "to": 253
  }, {
    "from": 347,
    "label": "has",
    "to": 352
  }, {
    "from": 353,
    "label": "has",
    "to": 354
  }, {
    "from": 353,
    "label": "has",
    "to": 248
  }, {
    "from": 353,
    "label": "has",
    "to": 249
  }, {
    "from": 353,
    "label": "has",
    "to": 355
  }, {
    "from": 353,
    "label": "has",
    "to": 356
  }, {
    "from": 353,
    "label": "has",
    "to": 252
  }, {
    "from": 353,
    "label": "has",
    "to": 253
  }, {
    "from": 353,
    "label": "has",
    "to": 357
  }, {
    "from": 358,
    "label": "has",
    "to": 359
  }, {
    "from": 358,
    "label": "has",
    "to": 249
  }, {
    "from": 358,
    "label": "has",
    "to": 360
  }, {
    "from": 358,
    "label": "has",
    "to": 232
  }, {
    "from": 358,
    "label": "has",
    "to": 361
  }, {
    "from": 362,
    "label": "has",
    "to": 363
  }, {
    "from": 362,
    "label": "has",
    "to": 249
  }, {
    "from": 362,
    "label": "has",
    "to": 364
  }, {
    "from": 362,
    "label": "has",
    "to": 232
  }, {
    "from": 362,
    "label": "has",
    "to": 365
  }, {
    "from": 366,
    "label": "has",
    "to": 367
  }, {
    "from": 367,
    "label": "has",
    "to": 348
  }, {
    "from": 367,
    "label": "has",
    "to": 349
  }, {
    "from": 367,
    "label": "has",
    "to": 249
  }, {
    "from": 367,
    "label": "has",
    "to": 350
  }, {
    "from": 367,
    "label": "has",
    "to": 351
  }, {
    "from": 367,
    "label": "has",
    "to": 252
  }, {
    "from": 367,
    "label": "has",
    "to": 253
  }, {
    "from": 366,
    "label": "has",
    "to": 368
  }, {
    "from": 368,
    "label": "has",
    "to": 354
  }, {
    "from": 368,
    "label": "has",
    "to": 248
  }, {
    "from": 368,
    "label": "has",
    "to": 249
  }, {
    "from": 368,
    "label": "has",
    "to": 355
  }, {
    "from": 368,
    "label": "has",
    "to": 356
  }, {
    "from": 368,
    "label": "has",
    "to": 252
  }, {
    "from": 368,
    "label": "has",
    "to": 253
  }, {
    "from": 366,
    "label": "has",
    "to": 369
  }, {
    "from": 369,
    "label": "has",
    "to": 359
  }, {
    "from": 369,
    "label": "has",
    "to": 249
  }, {
    "from": 369,
    "label": "has",
    "to": 360
  }, {
    "from": 369,
    "label": "has",
    "to": 232
  }, {
    "from": 366,
    "label": "has",
    "to": 370
  }, {
    "from": 370,
    "label": "has",
    "to": 363
  }, {
    "from": 370,
    "label": "has",
    "to": 249
  }, {
    "from": 370,
    "label": "has",
    "to": 364
  }, {
    "from": 370,
    "label": "has",
    "to": 232
  }, {
    "from": 366,
    "label": "has",
    "to": 371
  }, {
    "from": 372,
    "label": "has",
    "to": 373
  }, {
    "from": 372,
    "label": "has",
    "to": 374
  }, {
    "from": 372,
    "label": "has",
    "to": 31
  }, {
    "from": 372,
    "label": "has",
    "to": 32
  }, {
    "from": 372,
    "label": "has",
    "to": 375
  }, {
    "from": 376,
    "label": "has",
    "to": 377
  }, {
    "from": 376,
    "label": "has",
    "to": 378
  }, {
    "from": 376,
    "label": "has",
    "to": 379
  }, {
    "from": 376,
    "label": "has",
    "to": 380
  }, {
    "from": 376,
    "label": "has",
    "to": 381
  }, {
    "from": 376,
    "label": "has",
    "to": 382
  }, {
    "from": 376,
    "label": "has",
    "to": 383
  }, {
    "from": 384,
    "label": "has",
    "to": 385
  }, {
    "from": 384,
    "label": "has",
    "to": 378
  }, {
    "from": 384,
    "label": "has",
    "to": 379
  }, {
    "from": 384,
    "label": "has",
    "to": 380
  }, {
    "from": 384,
    "label": "has",
    "to": 386
  }, {
    "from": 384,
    "label": "has",
    "to": 387
  }, {
    "from": 384,
    "label": "has",
    "to": 388
  }, {
    "from": 389,
    "label": "has",
    "to": 390
  }, {
    "from": 390,
    "label": "has",
    "to": 373
  }, {
    "from": 390,
    "label": "has",
    "to": 374
  }, {
    "from": 390,
    "label": "has",
    "to": 31
  }, {
    "from": 390,
    "label": "has",
    "to": 32
  }, {
    "from": 389,
    "label": "has",
    "to": 391
  }, {
    "from": 391,
    "label": "has",
    "to": 377
  }, {
    "from": 391,
    "label": "has",
    "to": 378
  }, {
    "from": 391,
    "label": "has",
    "to": 379
  }, {
    "from": 391,
    "label": "has",
    "to": 380
  }, {
    "from": 391,
    "label": "has",
    "to": 381
  }, {
    "from": 391,
    "label": "has",
    "to": 382
  }, {
    "from": 389,
    "label": "has",
    "to": 392
  }, {
    "from": 392,
    "label": "has",
    "to": 385
  }, {
    "from": 392,
    "label": "has",
    "to": 378
  }, {
    "from": 392,
    "label": "has",
    "to": 379
  }, {
    "from": 392,
    "label": "has",
    "to": 380
  }, {
    "from": 392,
    "label": "has",
    "to": 386
  }, {
    "from": 392,
    "label": "has",
    "to": 387
  }, {
    "from": 389,
    "label": "has",
    "to": 393
  }, {
    "from": 394,
    "label": "has",
    "to": 373
  }, {
    "from": 394,
    "label": "has",
    "to": 395
  }, {
    "from": 394,
    "label": "has",
    "to": 31
  }, {
    "from": 394,
    "label": "has",
    "to": 32
  }, {
    "from": 394,
    "label": "has",
    "to": 396
  }, {
    "from": 397,
    "label": "has",
    "to": 373
  }, {
    "from": 397,
    "label": "has",
    "to": 398
  }, {
    "from": 397,
    "label": "has",
    "to": 21
  }, {
    "from": 397,
    "label": "has",
    "to": 399
  }, {
    "from": 400,
    "label": "has",
    "to": 401
  }, {
    "from": 400,
    "label": "has",
    "to": 402
  }, {
    "from": 400,
    "label": "has",
    "to": 403
  }, {
    "from": 400,
    "label": "has",
    "to": 404
  }, {
    "from": 405,
    "label": "has",
    "to": 406
  }, {
    "from": 405,
    "label": "has",
    "to": 407
  }, {
    "from": 405,
    "label": "has",
    "to": 408
  }, {
    "from": 405,
    "label": "has",
    "to": 409
  }, {
    "from": 410,
    "label": "has",
    "to": 411
  }, {
    "from": 411,
    "label": "has",
    "to": 373
  }, {
    "from": 411,
    "label": "has",
    "to": 395
  }, {
    "from": 411,
    "label": "has",
    "to": 31
  }, {
    "from": 411,
    "label": "has",
    "to": 32
  }, {
    "from": 410,
    "label": "has",
    "to": 412
  }, {
    "from": 412,
    "label": "has",
    "to": 373
  }, {
    "from": 412,
    "label": "has",
    "to": 398
  }, {
    "from": 412,
    "label": "has",
    "to": 21
  }, {
    "from": 410,
    "label": "has",
    "to": 413
  }, {
    "from": 413,
    "label": "has",
    "to": 401
  }, {
    "from": 413,
    "label": "has",
    "to": 402
  }, {
    "from": 413,
    "label": "has",
    "to": 403
  }, {
    "from": 410,
    "label": "has",
    "to": 414
  }, {
    "from": 414,
    "label": "has",
    "to": 406
  }, {
    "from": 414,
    "label": "has",
    "to": 407
  }, {
    "from": 414,
    "label": "has",
    "to": 408
  }, {
    "from": 410,
    "label": "has",
    "to": 415
  }, {
    "from": 416,
    "label": "has",
    "to": 417
  }, {
    "from": 416,
    "label": "has",
    "to": 31
  }, {
    "from": 416,
    "label": "has",
    "to": 32
  }, {
    "from": 416,
    "label": "has",
    "to": 418
  }, {
    "from": 419,
    "label": "has",
    "to": 420
  }, {
    "from": 420,
    "label": "has",
    "to": 421
  }, {
    "from": 421,
    "label": "has",
    "to": 417
  }, {
    "from": 421,
    "label": "has",
    "to": 31
  }, {
    "from": 421,
    "label": "has",
    "to": 32
  }, {
    "from": 419,
    "label": "has",
    "to": 422
  }, {
    "from": 423,
    "label": "has",
    "to": 424
  }, {
    "from": 423,
    "label": "has",
    "to": 31
  }, {
    "from": 423,
    "label": "has",
    "to": 32
  }, {
    "from": 423,
    "label": "has",
    "to": 425
  }, {
    "from": 426,
    "label": "has",
    "to": 427
  }, {
    "from": 427,
    "label": "has",
    "to": 428
  }, {
    "from": 428,
    "label": "has",
    "to": 424
  }, {
    "from": 428,
    "label": "has",
    "to": 31
  }, {
    "from": 428,
    "label": "has",
    "to": 32
  }, {
    "from": 426,
    "label": "has",
    "to": 429
  }, {
    "from": 430,
    "label": "has",
    "to": 431
  }, {
    "from": 430,
    "label": "has",
    "to": 21
  }, {
    "from": 430,
    "label": "has",
    "to": 26
  }, {
    "from": 430,
    "label": "has",
    "to": 432
  }, {
    "from": 433,
    "label": "has",
    "to": 373
  }, {
    "from": 433,
    "label": "has",
    "to": 434
  }, {
    "from": 433,
    "label": "has",
    "to": 21
  }, {
    "from": 433,
    "label": "has",
    "to": 435
  }, {
    "from": 436,
    "label": "has",
    "to": 437
  }, {
    "from": 437,
    "label": "has",
    "to": 431
  }, {
    "from": 437,
    "label": "has",
    "to": 21
  }, {
    "from": 437,
    "label": "has",
    "to": 26
  }, {
    "from": 436,
    "label": "has",
    "to": 438
  }, {
    "from": 438,
    "label": "has",
    "to": 373
  }, {
    "from": 438,
    "label": "has",
    "to": 434
  }, {
    "from": 438,
    "label": "has",
    "to": 21
  }, {
    "from": 436,
    "label": "has",
    "to": 439
  }, {
    "from": 440,
    "label": "has",
    "to": 441
  }, {
    "from": 440,
    "label": "has",
    "to": 21
  }, {
    "from": 440,
    "label": "has",
    "to": 45
  }, {
    "from": 440,
    "label": "has",
    "to": 442
  }, {
    "from": 443,
    "label": "has",
    "to": 444
  }, {
    "from": 444,
    "label": "has",
    "to": 441
  }, {
    "from": 444,
    "label": "has",
    "to": 21
  }, {
    "from": 444,
    "label": "has",
    "to": 45
  }, {
    "from": 443,
    "label": "has",
    "to": 445
  }, {
    "from": 446,
    "label": "has",
    "to": 447
  }, {
    "from": 446,
    "label": "has",
    "to": 21
  }, {
    "from": 446,
    "label": "has",
    "to": 45
  }, {
    "from": 446,
    "label": "has",
    "to": 448
  }, {
    "from": 449,
    "label": "has",
    "to": 450
  }, {
    "from": 450,
    "label": "has",
    "to": 447
  }, {
    "from": 450,
    "label": "has",
    "to": 21
  }, {
    "from": 450,
    "label": "has",
    "to": 45
  }, {
    "from": 449,
    "label": "has",
    "to": 451
  }, {
    "from": 452,
    "label": "has",
    "to": 453
  }, {
    "from": 452,
    "label": "has",
    "to": 21
  }, {
    "from": 452,
    "label": "has",
    "to": 45
  }, {
    "from": 452,
    "label": "has",
    "to": 454
  }, {
    "from": 455,
    "label": "has",
    "to": 456
  }, {
    "from": 456,
    "label": "has",
    "to": 453
  }, {
    "from": 456,
    "label": "has",
    "to": 21
  }, {
    "from": 456,
    "label": "has",
    "to": 45
  }, {
    "from": 455,
    "label": "has",
    "to": 457
  }, {
    "from": 458,
    "label": "has",
    "to": 459
  }, {
    "from": 458,
    "label": "has",
    "to": 460
  }, {
    "from": 458,
    "label": "has",
    "to": 461
  }, {
    "from": 458,
    "label": "has",
    "to": 462
  }, {
    "from": 463,
    "label": "has",
    "to": 464
  }, {
    "from": 463,
    "label": "has",
    "to": 465
  }, {
    "from": 463,
    "label": "has",
    "to": 466
  }, {
    "from": 463,
    "label": "has",
    "to": 467
  }, {
    "from": 468,
    "label": "has",
    "to": 469
  }, {
    "from": 468,
    "label": "has",
    "to": 465
  }, {
    "from": 468,
    "label": "has",
    "to": 470
  }, {
    "from": 468,
    "label": "has",
    "to": 471
  }, {
    "from": 472,
    "label": "has",
    "to": 473
  }, {
    "from": 472,
    "label": "has",
    "to": 465
  }, {
    "from": 472,
    "label": "has",
    "to": 470
  }, {
    "from": 472,
    "label": "has",
    "to": 474
  }, {
    "from": 475,
    "label": "has",
    "to": 476
  }, {
    "from": 476,
    "label": "has",
    "to": 459
  }, {
    "from": 476,
    "label": "has",
    "to": 460
  }, {
    "from": 476,
    "label": "has",
    "to": 461
  }, {
    "from": 475,
    "label": "has",
    "to": 477
  }, {
    "from": 477,
    "label": "has",
    "to": 464
  }, {
    "from": 477,
    "label": "has",
    "to": 465
  }, {
    "from": 477,
    "label": "has",
    "to": 466
  }, {
    "from": 475,
    "label": "has",
    "to": 478
  }, {
    "from": 478,
    "label": "has",
    "to": 469
  }, {
    "from": 478,
    "label": "has",
    "to": 465
  }, {
    "from": 478,
    "label": "has",
    "to": 470
  }, {
    "from": 475,
    "label": "has",
    "to": 479
  }, {
    "from": 479,
    "label": "has",
    "to": 473
  }, {
    "from": 479,
    "label": "has",
    "to": 465
  }, {
    "from": 479,
    "label": "has",
    "to": 470
  }, {
    "from": 475,
    "label": "has",
    "to": 480
  }, {
    "from": 481,
    "label": "has",
    "to": 482
  }, {
    "from": 481,
    "label": "has",
    "to": 31
  }, {
    "from": 481,
    "label": "has",
    "to": 483
  }, {
    "from": 484,
    "label": "has",
    "to": 485
  }, {
    "from": 484,
    "label": "has",
    "to": 21
  }, {
    "from": 484,
    "label": "has",
    "to": 45
  }, {
    "from": 484,
    "label": "has",
    "to": 486
  }, {
    "from": 487,
    "label": "has",
    "to": 488
  }, {
    "from": 487,
    "label": "has",
    "to": 21
  }, {
    "from": 487,
    "label": "has",
    "to": 34
  }, {
    "from": 487,
    "label": "has",
    "to": 489
  }, {
    "from": 490,
    "label": "has",
    "to": 491
  }, {
    "from": 490,
    "label": "has",
    "to": 21
  }, {
    "from": 490,
    "label": "has",
    "to": 34
  }, {
    "from": 490,
    "label": "has",
    "to": 492
  }, {
    "from": 493,
    "label": "has",
    "to": 494
  }, {
    "from": 494,
    "label": "has",
    "to": 482
  }, {
    "from": 494,
    "label": "has",
    "to": 31
  }, {
    "from": 493,
    "label": "has",
    "to": 495
  }, {
    "from": 495,
    "label": "has",
    "to": 485
  }, {
    "from": 495,
    "label": "has",
    "to": 21
  }, {
    "from": 495,
    "label": "has",
    "to": 45
  }, {
    "from": 493,
    "label": "has",
    "to": 496
  }, {
    "from": 496,
    "label": "has",
    "to": 488
  }, {
    "from": 496,
    "label": "has",
    "to": 21
  }, {
    "from": 496,
    "label": "has",
    "to": 34
  }, {
    "from": 493,
    "label": "has",
    "to": 497
  }, {
    "from": 497,
    "label": "has",
    "to": 491
  }, {
    "from": 497,
    "label": "has",
    "to": 21
  }, {
    "from": 497,
    "label": "has",
    "to": 34
  }, {
    "from": 493,
    "label": "has",
    "to": 498
  }, {
    "from": 499,
    "label": "has",
    "to": 500
  }, {
    "from": 499,
    "label": "has",
    "to": 21
  }, {
    "from": 499,
    "label": "has",
    "to": 45
  }, {
    "from": 499,
    "label": "has",
    "to": 501
  }, {
    "from": 502,
    "label": "has",
    "to": 503
  }, {
    "from": 502,
    "label": "has",
    "to": 21
  }, {
    "from": 502,
    "label": "has",
    "to": 24
  }, {
    "from": 502,
    "label": "has",
    "to": 504
  }, {
    "from": 505,
    "label": "has",
    "to": 506
  }, {
    "from": 505,
    "label": "has",
    "to": 21
  }, {
    "from": 505,
    "label": "has",
    "to": 26
  }, {
    "from": 505,
    "label": "has",
    "to": 507
  }, {
    "from": 508,
    "label": "has",
    "to": 509
  }, {
    "from": 508,
    "label": "has",
    "to": 21
  }, {
    "from": 508,
    "label": "has",
    "to": 26
  }, {
    "from": 508,
    "label": "has",
    "to": 510
  }, {
    "from": 511,
    "label": "has",
    "to": 512
  }, {
    "from": 511,
    "label": "has",
    "to": 21
  }, {
    "from": 511,
    "label": "has",
    "to": 24
  }, {
    "from": 511,
    "label": "has",
    "to": 513
  }, {
    "from": 514,
    "label": "has",
    "to": 515
  }, {
    "from": 514,
    "label": "has",
    "to": 21
  }, {
    "from": 514,
    "label": "has",
    "to": 32
  }, {
    "from": 514,
    "label": "has",
    "to": 516
  }, {
    "from": 517,
    "label": "has",
    "to": 518
  }, {
    "from": 517,
    "label": "has",
    "to": 21
  }, {
    "from": 517,
    "label": "has",
    "to": 34
  }, {
    "from": 517,
    "label": "has",
    "to": 519
  }, {
    "from": 520,
    "label": "has",
    "to": 521
  }, {
    "from": 520,
    "label": "has",
    "to": 21
  }, {
    "from": 520,
    "label": "has",
    "to": 34
  }, {
    "from": 520,
    "label": "has",
    "to": 522
  }, {
    "from": 523,
    "label": "has",
    "to": 524
  }, {
    "from": 523,
    "label": "has",
    "to": 21
  }, {
    "from": 523,
    "label": "has",
    "to": 26
  }, {
    "from": 523,
    "label": "has",
    "to": 525
  }, {
    "from": 526,
    "label": "has",
    "to": 527
  }, {
    "from": 527,
    "label": "has",
    "to": 500
  }, {
    "from": 527,
    "label": "has",
    "to": 21
  }, {
    "from": 527,
    "label": "has",
    "to": 45
  }, {
    "from": 526,
    "label": "has",
    "to": 528
  }, {
    "from": 528,
    "label": "has",
    "to": 503
  }, {
    "from": 528,
    "label": "has",
    "to": 21
  }, {
    "from": 528,
    "label": "has",
    "to": 24
  }, {
    "from": 526,
    "label": "has",
    "to": 529
  }, {
    "from": 529,
    "label": "has",
    "to": 506
  }, {
    "from": 529,
    "label": "has",
    "to": 21
  }, {
    "from": 529,
    "label": "has",
    "to": 26
  }, {
    "from": 526,
    "label": "has",
    "to": 530
  }, {
    "from": 530,
    "label": "has",
    "to": 509
  }, {
    "from": 530,
    "label": "has",
    "to": 21
  }, {
    "from": 530,
    "label": "has",
    "to": 26
  }, {
    "from": 526,
    "label": "has",
    "to": 531
  }, {
    "from": 531,
    "label": "has",
    "to": 512
  }, {
    "from": 531,
    "label": "has",
    "to": 21
  }, {
    "from": 531,
    "label": "has",
    "to": 24
  }, {
    "from": 526,
    "label": "has",
    "to": 532
  }, {
    "from": 532,
    "label": "has",
    "to": 515
  }, {
    "from": 532,
    "label": "has",
    "to": 21
  }, {
    "from": 532,
    "label": "has",
    "to": 32
  }, {
    "from": 526,
    "label": "has",
    "to": 533
  }, {
    "from": 533,
    "label": "has",
    "to": 518
  }, {
    "from": 533,
    "label": "has",
    "to": 21
  }, {
    "from": 533,
    "label": "has",
    "to": 34
  }, {
    "from": 526,
    "label": "has",
    "to": 534
  }, {
    "from": 534,
    "label": "has",
    "to": 521
  }, {
    "from": 534,
    "label": "has",
    "to": 21
  }, {
    "from": 534,
    "label": "has",
    "to": 34
  }, {
    "from": 526,
    "label": "has",
    "to": 535
  }, {
    "from": 535,
    "label": "has",
    "to": 524
  }, {
    "from": 535,
    "label": "has",
    "to": 21
  }, {
    "from": 535,
    "label": "has",
    "to": 26
  }, {
    "from": 526,
    "label": "has",
    "to": 536
  }, {
    "from": 537,
    "label": "has",
    "to": 538
  }, {
    "from": 537,
    "label": "has",
    "to": 31
  }, {
    "from": 537,
    "label": "has",
    "to": 539
  }, {
    "from": 540,
    "label": "has",
    "to": 541
  }, {
    "from": 541,
    "label": "has",
    "to": 538
  }, {
    "from": 541,
    "label": "has",
    "to": 31
  }, {
    "from": 540,
    "label": "has",
    "to": 542
  }, {
    "from": 543,
    "label": "has",
    "to": 544
  }, {
    "from": 543,
    "label": "has",
    "to": 31
  }, {
    "from": 543,
    "label": "has",
    "to": 32
  }, {
    "from": 543,
    "label": "has",
    "to": 545
  }, {
    "from": 543,
    "label": "has",
    "to": 546
  }, {
    "from": 547,
    "label": "has",
    "to": 548
  }, {
    "from": 548,
    "label": "has",
    "to": 544
  }, {
    "from": 548,
    "label": "has",
    "to": 31
  }, {
    "from": 548,
    "label": "has",
    "to": 32
  }, {
    "from": 548,
    "label": "has",
    "to": 545
  }, {
    "from": 547,
    "label": "has",
    "to": 549
  }, {
    "from": 550,
    "label": "calls",
    "to": 16
  }, {
    "from": 550,
    "label": "calls",
    "to": 16
  }, {
    "from": 550,
    "label": "calls",
    "to": 16
  }, {
    "from": 550,
    "label": "calls",
    "to": 16
  }, {
    "from": 550,
    "label": "calls",
    "to": 16
  }, {
    "from": 550,
    "label": "calls",
    "to": 16
  }, {
    "from": 550,
    "label": "calls",
    "to": 16
  }, {
    "from": 550,
    "label": "calls",
    "to": 16
  }, {
    "from": 550,
    "label": "calls",
    "to": 16
  }, {
    "from": 550,
    "label": "calls",
    "to": 16
  }, {
    "from": 550,
    "label": "calls",
    "to": 16
  }, {
    "from": 550,
    "label": "calls",
    "to": 561
  }, {
    "from": 550,
    "label": "calls",
    "to": 563
  }, {
    "from": 550,
    "label": "calls",
    "to": 559
  }, {
    "from": 550,
    "label": "calls",
    "to": 559
  }, {
    "from": 550,
    "label": "calls",
    "to": 559
  }, {
    "from": 550,
    "label": "calls",
    "to": 559
  }, {
    "from": 550,
    "label": "calls",
    "to": 559
  }, {
    "from": 550,
    "label": "calls",
    "to": 559
  }, {
    "from": 550,
    "label": "calls",
    "to": 559
  }, {
    "from": 550,
    "label": "calls",
    "to": 559
  }, {
    "from": 550,
    "label": "calls",
    "to": 559
  }, {
    "from": 550,
    "label": "calls",
    "to": 559
  }, {
    "from": 550,
    "label": "calls",
    "to": 559
  }, {
    "from": 550,
    "label": "calls",
    "to": 559
  }, {
    "from": 550,
    "label": "calls",
    "to": 559
  }, {
    "from": 550,
    "label": "calls",
    "to": 559
  }, {
    "from": 550,
    "label": "calls",
    "to": 559
  }, {
    "from": 550,
    "label": "calls",
    "to": 559
  }, {
    "from": 550,
    "label": "calls",
    "to": 559
  }, {
    "from": 550,
    "label": "calls",
    "to": 559
  }, {
    "from": 550,
    "label": "calls",
    "to": 559
  }, {
    "from": 550,
    "label": "calls",
    "to": 559
  }, {
    "from": 550,
    "label": "calls",
    "to": 559
  }, {
    "from": 550,
    "label": "calls",
    "to": 559
  }, {
    "from": 550,
    "label": "calls",
    "to": 565
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 10
  }, {
    "from": 550,
    "label": "calls",
    "to": 566
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 569
  }, {
    "from": 550,
    "label": "calls",
    "to": 554
  }, {
    "from": 550,
    "label": "calls",
    "to": 554
  }, {
    "from": 550,
    "label": "calls",
    "to": 554
  }, {
    "from": 550,
    "label": "calls",
    "to": 554
  }, {
    "from": 550,
    "label": "calls",
    "to": 7
  }, {
    "from": 550,
    "label": "calls",
    "to": 7
  }, {
    "from": 550,
    "label": "calls",
    "to": 7
  }, {
    "from": 550,
    "label": "calls",
    "to": 552
  }, {
    "from": 550,
    "label": "calls",
    "to": 552
  }, {
    "from": 550,
    "label": "calls",
    "to": 560
  }, {
    "from": 550,
    "label": "calls",
    "to": 560
  }, {
    "from": 550,
    "label": "calls",
    "to": 562
  }, {
    "from": 550,
    "label": "calls",
    "to": 557
  }, {
    "from": 550,
    "label": "calls",
    "to": 557
  }, {
    "from": 550,
    "label": "calls",
    "to": 557
  }, {
    "from": 550,
    "label": "calls",
    "to": 557
  }, {
    "from": 550,
    "label": "calls",
    "to": 557
  }, {
    "from": 550,
    "label": "calls",
    "to": 557
  }, {
    "from": 550,
    "label": "calls",
    "to": 557
  }, {
    "from": 550,
    "label": "calls",
    "to": 557
  }, {
    "from": 550,
    "label": "calls",
    "to": 557
  }, {
    "from": 550,
    "label": "calls",
    "to": 557
  }, {
    "from": 550,
    "label": "calls",
    "to": 557
  }, {
    "from": 550,
    "label": "calls",
    "to": 557
  }, {
    "from": 550,
    "label": "calls",
    "to": 557
  }, {
    "from": 550,
    "label": "calls",
    "to": 557
  }, {
    "from": 550,
    "label": "calls",
    "to": 557
  }, {
    "from": 550,
    "label": "calls",
    "to": 557
  }, {
    "from": 550,
    "label": "calls",
    "to": 557
  }, {
    "from": 550,
    "label": "calls",
    "to": 557
  }, {
    "from": 550,
    "label": "calls",
    "to": 557
  }, {
    "from": 550,
    "label": "calls",
    "to": 557
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 570
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 555
  }, {
    "from": 550,
    "label": "calls",
    "to": 553
  }, {
    "from": 550,
    "label": "calls",
    "to": 564
  }, {
    "from": 550,
    "label": "calls",
    "to": 3
  }, {
    "from": 550,
    "label": "calls",
    "to": 556
  }, {
    "from": 550,
    "label": "calls",
    "to": 556
  }, {
    "from": 550,
    "label": "calls",
    "to": 567
  }, {
    "from": 550,
    "label": "calls",
    "to": 568
  }, {
    "from": 550,
    "label": "calls",
    "to": 568
  }, {
    "from": 550,
    "label": "calls",
    "to": 558
  }, {
    "from": 550,
    "label": "calls",
    "to": 558
  }, {
    "from": 550,
    "label": "calls",
    "to": 558
  }, {
    "from": 550,
    "label": "calls",
    "to": 558
  }, {
    "from": 550,
    "label": "calls",
    "to": 558
  }, {
    "from": 550,
    "label": "calls",
    "to": 558
  }, {
    "from": 550,
    "label": "calls",
    "to": 558
  }, {
    "from": 550,
    "label": "calls",
    "to": 558
  }, {
    "from": 550,
    "label": "calls",
    "to": 558
  }, {
    "from": 550,
    "label": "calls",
    "to": 558
  }, {
    "from": 550,
    "label": "calls",
    "to": 558
  }, {
    "from": 550,
    "label": "calls",
    "to": 558
  }, {
    "from": 550,
    "label": "calls",
    "to": 558
  }, {
    "from": 550,
    "label": "calls",
    "to": 558
  }, {
    "from": 550,
    "label": "calls",
    "to": 558
  }, {
    "from": 550,
    "label": "calls",
    "to": 558
  }, {
    "from": 550,
    "label": "calls",
    "to": 558
  }, {
    "from": 550,
    "label": "calls",
    "to": 558
  }, {
    "from": 550,
    "label": "calls",
    "to": 558
  }, {
    "from": 550,
    "label": "calls",
    "to": 558
  }, {
    "from": 550,
    "label": "calls",
    "to": 551
  }, {
    "from": 2,
    "label": "contains",
    "to": 550
  }, {
    "from": 550,
    "label": "declares",
    "to": 3
  }, {
    "from": 550,
    "label": "declares",
    "to": 7
  }, {
    "from": 550,
    "label": "declares",
    "to": 10
  }, {
    "from": 550,
    "label": "declares",
    "to": 16
  }, {
    "from": 550,
    "label": "declares",
    "to": 19
  }, {
    "from": 550,
    "label": "declares",
    "to": 29
  }, {
    "from": 550,
    "label": "declares",
    "to": 37
  }, {
    "from": 550,
    "label": "declares",
    "to": 41
  }, {
    "from": 550,
    "label": "declares",
    "to": 47
  }, {
    "from": 550,
    "label": "declares",
    "to": 50
  }, {
    "from": 550,
    "label": "declares",
    "to": 54
  }, {
    "from": 550,
    "label": "declares",
    "to": 57
  }, {
    "from": 550,
    "label": "declares",
    "to": 63
  }, {
    "from": 550,
    "label": "declares",
    "to": 70
  }, {
    "from": 550,
    "label": "declares",
    "to": 73
  }, {
    "from": 550,
    "label": "declares",
    "to": 77
  }, {
    "from": 550,
    "label": "declares",
    "to": 84
  }, {
    "from": 550,
    "label": "declares",
    "to": 89
  }, {
    "from": 550,
    "label": "declares",
    "to": 92
  }, {
    "from": 550,
    "label": "declares",
    "to": 95
  }, {
    "from": 550,
    "label": "declares",
    "to": 99
  }, {
    "from": 550,
    "label": "declares",
    "to": 102
  }, {
    "from": 550,
    "label": "declares",
    "to": 105
  }, {
    "from": 550,
    "label": "declares",
    "to": 108
  }, {
    "from": 550,
    "label": "declares",
    "to": 111
  }, {
    "from": 550,
    "label": "declares",
    "to": 115
  }, {
    "from": 550,
    "label": "declares",
    "to": 118
  }, {
    "from": 550,
    "label": "declares",
    "to": 122
  }, {
    "from": 550,
    "label": "declares",
    "to": 127
  }, {
    "from": 550,
    "label": "declares",
    "to": 153
  }, {
    "from": 550,
    "label": "declares",
    "to": 157
  }, {
    "from": 550,
    "label": "declares",
    "to": 162
  }, {
    "from": 550,
    "label": "declares",
    "to": 166
  }, {
    "from": 550,
    "label": "declares",
    "to": 171
  }, {
    "from": 550,
    "label": "declares",
    "to": 175
  }, {
    "from": 550,
    "label": "declares",
    "to": 179
  }, {
    "from": 550,
    "label": "declares",
    "to": 183
  }, {
    "from": 550,
    "label": "declares",
    "to": 186
  }, {
    "from": 550,
    "label": "declares",
    "to": 189
  }, {
    "from": 550,
    "label": "declares",
    "to": 192
  }, {
    "from": 550,
    "label": "declares",
    "to": 201
  }, {
    "from": 550,
    "label": "declares",
    "to": 206
  }, {
    "from": 550,
    "label": "declares",
    "to": 209
  }, {
    "from": 550,
    "label": "declares",
    "to": 214
  }, {
    "from": 550,
    "label": "declares",
    "to": 219
  }, {
    "from": 550,
    "label": "declares",
    "to": 223
  }, {
    "from": 550,
    "label": "declares",
    "to": 228
  }, {
    "from": 550,
    "label": "declares",
    "to": 234
  }, {
    "from": 550,
    "label": "declares",
    "to": 238
  }, {
    "from": 550,
    "label": "declares",
    "to": 242
  }, {
    "from": 550,
    "label": "declares",
    "to": 247
  }, {
    "from": 550,
    "label": "declares",
    "to": 255
  }, {
    "from": 550,
    "label": "declares",
    "to": 259
  }, {
    "from": 550,
    "label": "declares",
    "to": 263
  }, {
    "from": 550,
    "label": "declares",
    "to": 267
  }, {
    "from": 550,
    "label": "declares",
    "to": 271
  }, {
    "from": 550,
    "label": "declares",
    "to": 276
  }, {
    "from": 550,
    "label": "declares",
    "to": 282
  }, {
    "from": 550,
    "label": "declares",
    "to": 288
  }, {
    "from": 550,
    "label": "declares",
    "to": 296
  }, {
    "from": 550,
    "label": "declares",
    "to": 302
  }, {
    "from": 550,
    "label": "declares",
    "to": 307
  }, {
    "from": 550,
    "label": "declares",
    "to": 311
  }, {
    "from": 550,
    "label": "declares",
    "to": 315
  }, {
    "from": 550,
    "label": "declares",
    "to": 317
  }, {
    "from": 550,
    "label": "declares",
    "to": 321
  }, {
    "from": 550,
    "label": "declares",
    "to": 322
  }, {
    "from": 550,
    "label": "declares",
    "to": 331
  }, {
    "from": 550,
    "label": "declares",
    "to": 347
  }, {
    "from": 550,
    "label": "declares",
    "to": 353
  }, {
    "from": 550,
    "label": "declares",
    "to": 358
  }, {
    "from": 550,
    "label": "declares",
    "to": 362
  }, {
    "from": 550,
    "label": "declares",
    "to": 366
  }, {
    "from": 550,
    "label": "declares",
    "to": 372
  }, {
    "from": 550,
    "label": "declares",
    "to": 376
  }, {
    "from": 550,
    "label": "declares",
    "to": 384
  }, {
    "from": 550,
    "label": "declares",
    "to": 389
  }, {
    "from": 550,
    "label": "declares",
    "to": 394
  }, {
    "from": 550,
    "label": "declares",
    "to": 397
  }, {
    "from": 550,
    "label": "declares",
    "to": 400
  }, {
    "from": 550,
    "label": "declares",
    "to": 405
  }, {
    "from": 550,
    "label": "declares",
    "to": 410
  }, {
    "from": 550,
    "label": "declares",
    "to": 416
  }, {
    "from": 550,
    "label": "declares",
    "to": 419
  }, {
    "from": 550,
    "label": "declares",
    "to": 423
  }, {
    "from": 550,
    "label": "declares",
    "to": 426
  }, {
    "from": 550,
    "label": "declares",
    "to": 430
  }, {
    "from": 550,
    "label": "declares",
    "to": 433
  }, {
    "from": 550,
    "label": "declares",
    "to": 436
  }, {
    "from": 550,
    "label": "declares",
    "to": 440
  }, {
    "from": 550,
    "label": "declares",
    "to": 443
  }, {
    "from": 550,
    "label": "declares",
    "to": 446
  }, {
    "from": 550,
    "label": "declares",
    "to": 449
  }, {
    "from": 550,
    "label": "declares",
    "to": 452
  }, {
    "from": 550,
    "label": "declares",
    "to": 455
  }, {
    "from": 550,
    "label": "declares",
    "to": 458
  }, {
    "from": 550,
    "label": "declares",
    "to": 463
  }, {
    "from": 550,
    "label": "declares",
    "to": 468
  }, {
    "from": 550,
    "label": "declares",
    "to": 472
  }, {
    "from": 550,
    "label": "declares",
    "to": 475
  }, {
    "from": 550,
    "label": "declares",
    "to": 481
  }, {
    "from": 550,
    "label": "declares",
    "to": 484
  }, {
    "from": 550,
    "label": "declares",
    "to": 487
  }, {
    "from": 550,
    "label": "declares",
    "to": 490
  }, {
    "from": 550,
    "label": "declares",
    "to": 493
  }, {
    "from": 550,
    "label": "declares",
    "to": 499
  }, {
    "from": 550,
    "label": "declares",
    "to": 502
  }, {
    "from": 550,
    "label": "declares",
    "to": 505
  }, {
    "from": 550,
    "label": "declares",
    "to": 508
  }, {
    "from": 550,
    "label": "declares",
    "to": 511
  }, {
    "from": 550,
    "label": "declares",
    "to": 514
  }, {
    "from": 550,
    "label": "declares",
    "to": 517
  }, {
    "from": 550,
    "label": "declares",
    "to": 520
  }, {
    "from": 550,
    "label": "declares",
    "to": 523
  }, {
    "from": 550,
    "label": "declares",
    "to": 526
  }, {
    "from": 550,
    "label": "declares",
    "to": 537
  }, {
    "from": 550,
    "label": "declares",
    "to": 540
  }, {
    "from": 550,
    "label": "declares",
    "to": 543
  }, {
    "from": 550,
    "label": "declares",
    "to": 547
  }, {
    "from": 2,
    "label": "contains",
    "to": 572
  }, {
    "from": 2,
    "label": "contains",
    "to": 573
  }, {
    "from": 572,
    "label": "initializes",
    "to": 574
  }, {
    "from": 574,
    "label": "assigns",
    "to": 575
  }, {
    "from": 572,
    "label": "initializes",
    "to": 576
  }, {
    "from": 576,
    "label": "assigns",
    "to": 577
  }, {
    "from": 572,
    "label": "initializes",
    "to": 578
  }, {
    "from": 578,
    "label": "assigns",
    "to": 579
  }, {
    "from": 572,
    "label": "initializes",
    "to": 580
  }, {
    "from": 580,
    "label": "assigns",
    "to": 581
  }, {
    "from": 572,
    "label": "initializes",
    "to": 582
  }, {
    "from": 582,
    "label": "assigns",
    "to": 583
  }, {
    "from": 572,
    "label": "initializes",
    "to": 584
  }, {
    "from": 584,
    "label": "assigns",
    "to": 585
  }, {
    "from": 572,
    "label": "initializes",
    "to": 586
  }, {
    "from": 586,
    "label": "assigns",
    "to": 587
  }, {
    "from": 572,
    "label": "initializes",
    "to": 588
  }, {
    "from": 588,
    "label": "assigns",
    "to": 589
  }, {
    "from": 573,
    "label": "initializes",
    "to": 590
  }, {
    "from": 590,
    "label": "requires",
    "to": 1
  }, {
    "from": 573,
    "label": "initializes",
    "to": 591
  }, {
    "from": 591,
    "label": "requires",
    "to": 571
  }, {
    "from": 128,
    "label": "hasArgument",
    "to": 19
  }, {
    "from": 129,
    "label": "hasArgument",
    "to": 29
  }, {
    "from": 130,
    "label": "hasArgument",
    "to": 37
  }, {
    "from": 131,
    "label": "hasArgument",
    "to": 41
  }, {
    "from": 132,
    "label": "hasArgument",
    "to": 47
  }, {
    "from": 133,
    "label": "hasArgument",
    "to": 50
  }, {
    "from": 134,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 135,
    "label": "hasArgument",
    "to": 57
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 63
  }, {
    "from": 137,
    "label": "hasArgument",
    "to": 70
  }, {
    "from": 138,
    "label": "hasArgument",
    "to": 73
  }, {
    "from": 139,
    "label": "hasArgument",
    "to": 77
  }, {
    "from": 140,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 141,
    "label": "hasArgument",
    "to": 89
  }, {
    "from": 142,
    "label": "hasArgument",
    "to": 92
  }, {
    "from": 143,
    "label": "hasArgument",
    "to": 95
  }, {
    "from": 144,
    "label": "hasArgument",
    "to": 99
  }, {
    "from": 145,
    "label": "hasArgument",
    "to": 102
  }, {
    "from": 146,
    "label": "hasArgument",
    "to": 105
  }, {
    "from": 147,
    "label": "hasArgument",
    "to": 108
  }, {
    "from": 148,
    "label": "hasArgument",
    "to": 111
  }, {
    "from": 149,
    "label": "hasArgument",
    "to": 115
  }, {
    "from": 150,
    "label": "hasArgument",
    "to": 118
  }, {
    "from": 151,
    "label": "hasArgument",
    "to": 122
  }, {
    "from": 163,
    "label": "hasArgument",
    "to": 153
  }, {
    "from": 164,
    "label": "hasArgument",
    "to": 157
  }, {
    "from": 193,
    "label": "hasArgument",
    "to": 166
  }, {
    "from": 194,
    "label": "hasArgument",
    "to": 171
  }, {
    "from": 195,
    "label": "hasArgument",
    "to": 175
  }, {
    "from": 196,
    "label": "hasArgument",
    "to": 179
  }, {
    "from": 197,
    "label": "hasArgument",
    "to": 183
  }, {
    "from": 198,
    "label": "hasArgument",
    "to": 186
  }, {
    "from": 199,
    "label": "hasArgument",
    "to": 189
  }, {
    "from": 207,
    "label": "hasArgument",
    "to": 201
  }, {
    "from": 224,
    "label": "hasArgument",
    "to": 209
  }, {
    "from": 225,
    "label": "hasArgument",
    "to": 214
  }, {
    "from": 226,
    "label": "hasArgument",
    "to": 219
  }, {
    "from": 243,
    "label": "hasArgument",
    "to": 228
  }, {
    "from": 244,
    "label": "hasArgument",
    "to": 234
  }, {
    "from": 245,
    "label": "hasArgument",
    "to": 238
  }, {
    "from": 318,
    "label": "hasArgument",
    "to": 315
  }, {
    "from": 332,
    "label": "hasArgument",
    "to": 247
  }, {
    "from": 333,
    "label": "hasArgument",
    "to": 255
  }, {
    "from": 334,
    "label": "hasArgument",
    "to": 259
  }, {
    "from": 335,
    "label": "hasArgument",
    "to": 263
  }, {
    "from": 336,
    "label": "hasArgument",
    "to": 267
  }, {
    "from": 337,
    "label": "hasArgument",
    "to": 271
  }, {
    "from": 338,
    "label": "hasArgument",
    "to": 276
  }, {
    "from": 339,
    "label": "hasArgument",
    "to": 282
  }, {
    "from": 340,
    "label": "hasArgument",
    "to": 288
  }, {
    "from": 341,
    "label": "hasArgument",
    "to": 296
  }, {
    "from": 342,
    "label": "hasArgument",
    "to": 302
  }, {
    "from": 343,
    "label": "hasArgument",
    "to": 307
  }, {
    "from": 344,
    "label": "hasArgument",
    "to": 311
  }, {
    "from": 345,
    "label": "hasArgument",
    "to": 315
  }, {
    "from": 345,
    "label": "hasArgument",
    "to": 317
  }, {
    "from": 345,
    "label": "hasArgument",
    "to": 322
  }, {
    "from": 345,
    "label": "hasArgument",
    "to": 321
  }, {
    "from": 367,
    "label": "hasArgument",
    "to": 347
  }, {
    "from": 368,
    "label": "hasArgument",
    "to": 353
  }, {
    "from": 369,
    "label": "hasArgument",
    "to": 358
  }, {
    "from": 370,
    "label": "hasArgument",
    "to": 362
  }, {
    "from": 390,
    "label": "hasArgument",
    "to": 372
  }, {
    "from": 391,
    "label": "hasArgument",
    "to": 376
  }, {
    "from": 392,
    "label": "hasArgument",
    "to": 384
  }, {
    "from": 411,
    "label": "hasArgument",
    "to": 394
  }, {
    "from": 412,
    "label": "hasArgument",
    "to": 397
  }, {
    "from": 413,
    "label": "hasArgument",
    "to": 400
  }, {
    "from": 414,
    "label": "hasArgument",
    "to": 405
  }, {
    "from": 421,
    "label": "hasArgument",
    "to": 416
  }, {
    "from": 428,
    "label": "hasArgument",
    "to": 423
  }, {
    "from": 437,
    "label": "hasArgument",
    "to": 430
  }, {
    "from": 438,
    "label": "hasArgument",
    "to": 433
  }, {
    "from": 444,
    "label": "hasArgument",
    "to": 440
  }, {
    "from": 450,
    "label": "hasArgument",
    "to": 446
  }, {
    "from": 456,
    "label": "hasArgument",
    "to": 452
  }, {
    "from": 476,
    "label": "hasArgument",
    "to": 458
  }, {
    "from": 477,
    "label": "hasArgument",
    "to": 463
  }, {
    "from": 478,
    "label": "hasArgument",
    "to": 468
  }, {
    "from": 479,
    "label": "hasArgument",
    "to": 472
  }, {
    "from": 494,
    "label": "hasArgument",
    "to": 481
  }, {
    "from": 495,
    "label": "hasArgument",
    "to": 484
  }, {
    "from": 496,
    "label": "hasArgument",
    "to": 487
  }, {
    "from": 497,
    "label": "hasArgument",
    "to": 490
  }, {
    "from": 527,
    "label": "hasArgument",
    "to": 499
  }, {
    "from": 528,
    "label": "hasArgument",
    "to": 502
  }, {
    "from": 529,
    "label": "hasArgument",
    "to": 505
  }, {
    "from": 530,
    "label": "hasArgument",
    "to": 508
  }, {
    "from": 531,
    "label": "hasArgument",
    "to": 511
  }, {
    "from": 532,
    "label": "hasArgument",
    "to": 514
  }, {
    "from": 533,
    "label": "hasArgument",
    "to": 517
  }, {
    "from": 534,
    "label": "hasArgument",
    "to": 520
  }, {
    "from": 535,
    "label": "hasArgument",
    "to": 523
  }, {
    "from": 541,
    "label": "hasArgument",
    "to": 537
  }, {
    "from": 548,
    "label": "hasArgument",
    "to": 543
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "utils",
    "type": "module"
  }, {
    "id": 2,
    "text": "cl_spec",
    "type": "module"
  }, {
    "id": 3,
    "text": "function(exitcode)\r\n  if exitcode>255 then\r\n    return math.floor(exitcode/256), exitcode - math.floor(exitcode/256)*256\r\n  else\r\n    return exitcode\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "if exitcode>255 then\r\n    return math.floor(exitcode/256), exitcode - math.floor(exitcode/256)*256\r\n  else\r\n    return exitcode\r\n  end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "function(cmd)\r\n  local success, exitcode, out, err = utils.executeex(cmd)\r\n  return not not success, modexit(exitcode), out, err\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "local success, exitcode, out, err = utils.executeex(cmd)",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function(args)\r\n  local success, exitcode, out, err = execute(busted_cmd .. ' ' .. args)\r\n  local count = 0\r\n  for failures, errors in out:gmatch('(%d+) failures? / (%d+) errors?') do\r\n    count = count + failures + errors\r\n  end\r\n  return success, count, out, err\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "local success, exitcode, out, err = execute(busted_cmd .. ' ' .. args)",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "local count = 0",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "for failures, errors in out:gmatch('(%d+) failures? / (%d+) errors?') do\r\n    count = count + failures + errors\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 14,
    "text": "count = count + failures + errors",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function(args)\r\n  local success, exitcode, out, err = execute('lua ' .. args)\r\n  local count = 0\r\n  for failures, errors in out:gmatch('(%d+) failures? / (%d+) errors?') do\r\n    count = count + failures + errors\r\n  end\r\n  return success, count, out, err\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "local success, exitcode, out, err = execute('lua ' .. args)",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function()\r\n    local success, errcnt = executeBusted('--pattern=_tags.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(8, errcnt)\r\n    success, errcnt = executeBusted('--pattern=_tags.lua$ --tags=tag1')\r\n    assert.is_false(success)\r\n    assert.is_equal(3, errcnt)\r\n    success, errcnt = executeBusted('--pattern=_tags.lua$ --tags=tag1,tag2')\r\n    assert.is_false(success)\r\n    assert.is_equal(4, errcnt)\r\n    success, errcnt = executeBusted('--pattern=_tags.lua$ --tags=tag1 --tags=tag2')\r\n    assert.is_false(success)\r\n    assert.is_equal(4, errcnt)\r\n  end",
    "type": "function"
  }, {
    "id": 20,
    "text": "local success, errcnt = executeBusted('--pattern=_tags.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "assert.is_false(success)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "assert.is_equal(8, errcnt)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "success, errcnt = executeBusted('--pattern=_tags.lua$ --tags=tag1')",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "assert.is_equal(3, errcnt)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "success, errcnt = executeBusted('--pattern=_tags.lua$ --tags=tag1,tag2')",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "assert.is_equal(4, errcnt)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "success, errcnt = executeBusted('--pattern=_tags.lua$ --tags=tag1 --tags=tag2')",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function()\r\n    local success, errcnt = executeBusted('--pattern=_tags.lua$ --exclude-tags=tag1,tag2,dtag1,dtag2')\r\n    assert.is_true(success)\r\n    assert.is_equal(0, errcnt)\r\n    success, errcnt = executeBusted('--pattern=_tags.lua$ --exclude-tags=tag2,dtag1,dtag2')\r\n    assert.is_false(success)\r\n    assert.is_equal(2, errcnt)\r\n    success, errcnt = executeBusted('--pattern=_tags.lua$ --exclude-tags=tag2 --exclude-tags=dtag1,dtag2')\r\n    assert.is_false(success)\r\n    assert.is_equal(2, errcnt)\r\n  end",
    "type": "function"
  }, {
    "id": 30,
    "text": "local success, errcnt = executeBusted('--pattern=_tags.lua$ --exclude-tags=tag1,tag2,dtag1,dtag2')",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "assert.is_true(success)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "assert.is_equal(0, errcnt)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "success, errcnt = executeBusted('--pattern=_tags.lua$ --exclude-tags=tag2,dtag1,dtag2')",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "assert.is_equal(2, errcnt)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "success, errcnt = executeBusted('--pattern=_tags.lua$ --exclude-tags=tag2 --exclude-tags=dtag1,dtag2')",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function ()\r\n    local success, errcnt = executeBusted('--pattern=_tags.lua$ --tags=tag1 --exclude-tags=tag1')\r\n    assert.is_false(success)\r\n    success, errcnt = executeBusted('--pattern=_tags.lua$ --tags=tag3 --exclude-tags=tag4')\r\n    assert.is_false(success)\r\n  end",
    "type": "function"
  }, {
    "id": 38,
    "text": "local success, errcnt = executeBusted('--pattern=_tags.lua$ --tags=tag1 --exclude-tags=tag1')",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "success, errcnt = executeBusted('--pattern=_tags.lua$ --tags=tag3 --exclude-tags=tag4')",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function ()\r\n    local success, errcnt = executeBusted('--pattern=_tags.lua$ --tags=dtag1')\r\n    assert.is_false(success)\r\n    assert.is_equal(5, errcnt)\r\n    success, errcnt = executeBusted('--pattern=_tags.lua$ --tags=dtag2')\r\n    assert.is_false(success)\r\n    assert.is_equal(1, errcnt)\r\n  end",
    "type": "function"
  }, {
    "id": 42,
    "text": "local success, errcnt = executeBusted('--pattern=_tags.lua$ --tags=dtag1')",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "assert.is_equal(5, errcnt)",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "success, errcnt = executeBusted('--pattern=_tags.lua$ --tags=dtag2')",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "assert.is_equal(1, errcnt)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function ()\r\n    local success, errcnt = executeBusted('--pattern=\"^cl_.*fail.*.lua$\" --exclude-pattern=\"failing\"')\r\n    assert.is_false(success)\r\n    assert.is_equal(4, errcnt)\r\n  end",
    "type": "function"
  }, {
    "id": 48,
    "text": "local success, errcnt = executeBusted('--pattern=\"^cl_.*fail.*.lua$\" --exclude-pattern=\"failing\"')",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function ()\r\n    local success, errcnt = executeBusted('--pattern=\"cl_two_failures.lua$\" --exclude-pattern \"\"')\r\n    assert.is_false(success)\r\n    assert.is_equal(2, errcnt)\r\n    local success, errcnt = executeBusted('--pattern=\"cl_success.lua$\" --exclude-pattern=')\r\n    assert.is_true(success)\r\n  end",
    "type": "function"
  }, {
    "id": 51,
    "text": "local success, errcnt = executeBusted('--pattern=\"cl_two_failures.lua$\" --exclude-pattern \"\"')",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "local success, errcnt = executeBusted('--pattern=\"cl_success.lua$\" --exclude-pattern=')",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "function ()\r\n    local success, errcnt = executeBusted('--pattern=\"^cl_.*fail.*.lua$\" --exclude-pattern=\"fail\"')\r\n    assert.is_false(success)\r\n    assert.is_equal(1, errcnt)\r\n  end",
    "type": "function"
  }, {
    "id": 55,
    "text": "local success, errcnt = executeBusted('--pattern=\"^cl_.*fail.*.lua$\" --exclude-pattern=\"fail\"')",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function ()\r\n    local success, errcnt = executeBusted('--pattern=_filter.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(8, errcnt)\r\n    success, errcnt = executeBusted('--pattern=_filter.lua$ --filter=\"pattern1\"')\r\n    assert.is_false(success)\r\n    assert.is_equal(3, errcnt)\r\n    success, errcnt = executeBusted('--pattern=_filter.lua$ --filter=\"pattern2\"')\r\n    assert.is_false(success)\r\n    assert.is_equal(2, errcnt)\r\n    success, errcnt = executeBusted('--pattern=_filter.lua$ --filter=\"pattern1\" --filter=\"pattern2\"')\r\n    assert.is_false(success)\r\n    assert.is_equal(4, errcnt)\r\n  end",
    "type": "function"
  }, {
    "id": 58,
    "text": "local success, errcnt = executeBusted('--pattern=_filter.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "success, errcnt = executeBusted('--pattern=_filter.lua$ --filter=\"pattern1\"')",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "success, errcnt = executeBusted('--pattern=_filter.lua$ --filter=\"pattern2\"')",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "success, errcnt = executeBusted('--pattern=_filter.lua$ --filter=\"pattern1\" --filter=\"pattern2\"')",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function ()\r\n    local success, errcnt = executeBusted('--pattern=_filter.lua$ --filter-out=\"pattern1\"')\r\n    assert.is_false(success)\r\n    assert.is_equal(6, errcnt)\r\n    success, errcnt = executeBusted('--pattern=_filter.lua$ --filter-out=\"pattern%d\"')\r\n    assert.is_false(success)\r\n    assert.is_equal(5, errcnt)\r\n    success, errcnt = executeBusted('--pattern=_filter.lua$ --filter-out=\"patt1\" --filter-out=\"patt2\"')\r\n    assert.is_false(success)\r\n    assert.is_equal(3, errcnt)\r\n    success, errcnt = executeBusted('--pattern=_filter.lua$ --filter-out=\"patt.*(%d)\"')\r\n    assert.is_true(success)\r\n  end",
    "type": "function"
  }, {
    "id": 64,
    "text": "local success, errcnt = executeBusted('--pattern=_filter.lua$ --filter-out=\"pattern1\"')",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "assert.is_equal(6, errcnt)",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "success, errcnt = executeBusted('--pattern=_filter.lua$ --filter-out=\"pattern%d\"')",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "success, errcnt = executeBusted('--pattern=_filter.lua$ --filter-out=\"patt1\" --filter-out=\"patt2\"')",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "success, errcnt = executeBusted('--pattern=_filter.lua$ --filter-out=\"patt.*(%d)\"')",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function ()\r\n    local success, errcnt = executeBusted('--pattern=_filter.lua$ --filter=\"pattern3\" --filter-out=\"patt.*[12]\"')\r\n    assert.is_true(success)\r\n  end",
    "type": "function"
  }, {
    "id": 71,
    "text": "local success, errcnt = executeBusted('--pattern=_filter.lua$ --filter=\"pattern3\" --filter-out=\"patt.*[12]\"')",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "function ()\r\n    local success, errcnt = executeBusted('--pattern=_filter.lua$ --filter=\"patt1\"')\r\n    assert.is_false(success)\r\n    assert.is_equal(5, errcnt)\r\n    success, errcnt = executeBusted('--pattern=_filter.lua$ --filter=\"patt2\"')\r\n    assert.is_false(success)\r\n    assert.is_equal(1, errcnt)\r\n  end",
    "type": "function"
  }, {
    "id": 74,
    "text": "local success, errcnt = executeBusted('--pattern=_filter.lua$ --filter=\"patt1\"')",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "success, errcnt = executeBusted('--pattern=_filter.lua$ --filter=\"patt2\"')",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "function()\r\n    local success, errcnt = executeBusted('--lazy --pattern=_tags.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(7, errcnt)\r\n    success, errcnt = executeBusted('--lazy --pattern=_tags.lua$ --tags=tag1')\r\n    assert.is_false(success)\r\n    assert.is_equal(2, errcnt)\r\n    success, errcnt = executeBusted('--lazy --pattern=_tags.lua$ --tags=tag1,tag2')\r\n    assert.is_false(success)\r\n    assert.is_equal(3, errcnt)\r\n    success, errcnt = executeBusted('--lazy --pattern=_tags.lua$ --tags=tag1 --tags=tag2')\r\n    assert.is_false(success)\r\n    assert.is_equal(3, errcnt)\r\n  end",
    "type": "function"
  }, {
    "id": 78,
    "text": "local success, errcnt = executeBusted('--lazy --pattern=_tags.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "assert.is_equal(7, errcnt)",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "success, errcnt = executeBusted('--lazy --pattern=_tags.lua$ --tags=tag1')",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "success, errcnt = executeBusted('--lazy --pattern=_tags.lua$ --tags=tag1,tag2')",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "success, errcnt = executeBusted('--lazy --pattern=_tags.lua$ --tags=tag1 --tags=tag2')",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "function()\r\n    local _, _, result = executeBusted('-l --pattern=cl_list.lua$')\r\n    local expected = 'spec/cl_list.lua:4: Tests list test 1\\n' ..\r\n                     'spec/cl_list.lua:7: Tests list test 2\\n' ..\r\n                     'spec/cl_list.lua:10: Tests list test 3\\n'\r\n    assert.is_equal(normpath(expected), result)\r\n  end",
    "type": "function"
  }, {
    "id": 85,
    "text": "local _, _, result = executeBusted('-l --pattern=cl_list.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "local expected = 'spec/cl_list.lua:4: Tests list test 1\\n' ..\r\n                     'spec/cl_list.lua:7: Tests list test 2\\n' ..\r\n                     'spec/cl_list.lua:10: Tests list test 3\\n'",
    "type": "statement:localassign"
  }, {
    "id": 87,
    "text": "assert.is_equal(normpath(expected), result)",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 89,
    "text": "function()\r\n    local _, _, result = executeBusted('--list --pattern=cl_list.lua$')\r\n    local expected = 'spec/cl_list.lua:4: Tests list test 1\\n' ..\r\n                     'spec/cl_list.lua:7: Tests list test 2\\n' ..\r\n                     'spec/cl_list.lua:10: Tests list test 3\\n'\r\n    assert.is_equal(normpath(expected), result)\r\n  end",
    "type": "function"
  }, {
    "id": 90,
    "text": "local _, _, result = executeBusted('--list --pattern=cl_list.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "function()\r\n    local success, errcnt = executeBusted('--lpath=\"spec/?.lua\" spec/cl_lua_path.lua')\r\n    assert.is_true(success)\r\n    assert.is_equal(0, errcnt)\r\n  end",
    "type": "function"
  }, {
    "id": 93,
    "text": "local success, errcnt = executeBusted('--lpath=\"spec/?.lua\" spec/cl_lua_path.lua')",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 95,
    "text": "function()\r\n    local success, errcnt = executeBusted('--pattern=cl_success.lua$ --lang=en')\r\n    assert.is_true(success)\r\n    assert.is_equal(0, errcnt)\r\n    success, errcnt = executeBusted('--pattern=cl_success --lang=not_found_here')\r\n    assert.is_false(success)\r\n  end",
    "type": "function"
  }, {
    "id": 96,
    "text": "local success, errcnt = executeBusted('--pattern=cl_success.lua$ --lang=en')",
    "type": "statement:localassign"
  }, {
    "id": 97,
    "text": "success, errcnt = executeBusted('--pattern=cl_success --lang=not_found_here')",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 99,
    "text": "function()\r\n    local success, errcnt = executeBusted('--version')\r\n    assert.is_true(success)\r\n    assert.is_equal(0, errcnt)\r\n  end",
    "type": "function"
  }, {
    "id": 100,
    "text": "local success, errcnt = executeBusted('--version')",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 102,
    "text": "function()\r\n    local success, errcnt = executeBusted('--help')\r\n    assert.is_false(success)\r\n  end",
    "type": "function"
  }, {
    "id": 103,
    "text": "local success, errcnt = executeBusted('--help')",
    "type": "statement:localassign"
  }, {
    "id": 104,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 105,
    "text": "function()\r\n    local success, errcnt = executeBusted('--pattern=cl_compile_fail.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(1, errcnt)\r\n  end",
    "type": "function"
  }, {
    "id": 106,
    "text": "local success, errcnt = executeBusted('--pattern=cl_compile_fail.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 107,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 108,
    "text": "function()\r\n    local success, errcnt = executeBusted('--pattern=cl_execute_fail.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(1, errcnt)\r\n  end",
    "type": "function"
  }, {
    "id": 109,
    "text": "local success, errcnt = executeBusted('--pattern=cl_execute_fail.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 110,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 111,
    "text": "function()\r\n    local success, errcnt = executeBusted('--pattern=cl_success.lua$ --output=TAP')\r\n    assert.is_true(success)\r\n    assert.is_equal(0, errcnt)\r\n    success, errcnt = executeBusted('--pattern=cl_two_failures.lua$ --output=not_found_here')\r\n    assert.is_false(success)\r\n    assert.is_equal(2, errcnt)\r\n  end",
    "type": "function"
  }, {
    "id": 112,
    "text": "local success, errcnt = executeBusted('--pattern=cl_success.lua$ --output=TAP')",
    "type": "statement:localassign"
  }, {
    "id": 113,
    "text": "success, errcnt = executeBusted('--pattern=cl_two_failures.lua$ --output=not_found_here')",
    "type": "statement:assign"
  }, {
    "id": 114,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 115,
    "text": "function()\r\n    local success, errcnt = executeBusted('--pattern=cl_success.lua$ --output=busted.outputHandlers.TAP')\r\n    assert.is_true(success)\r\n    assert.is_equal(0, errcnt)\r\n  end",
    "type": "function"
  }, {
    "id": 116,
    "text": "local success, errcnt = executeBusted('--pattern=cl_success.lua$ --output=busted.outputHandlers.TAP')",
    "type": "statement:localassign"
  }, {
    "id": 117,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 118,
    "text": "function()\r\n    local success, exitcode = execute(busted_cmd ..' --pattern=this_filename_does_simply_not_exist$')\r\n    assert.is_false(success)\r\n    assert.is_equal(1, exitcode)\r\n  end",
    "type": "function"
  }, {
    "id": 119,
    "text": "local success, exitcode = execute(busted_cmd ..' --pattern=this_filename_does_simply_not_exist$')",
    "type": "statement:localassign"
  }, {
    "id": 120,
    "text": "assert.is_equal(1, exitcode)",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 122,
    "text": "function()\r\n    local lua_exe = normpath(path.is_windows and 'spec/lua.bat' or 'spec/lua.lua')\r\n    local success, errcnt, out = executeBusted('--lua=' .. lua_exe .. ' spec/cl_success.lua')\r\n    assert.is_true(success)\r\n    assert.is_equal(0, errcnt)\r\n    assert.equal('bin/busted --ignore-lua --lua=' .. lua_exe .. ' spec/cl_success.lua\\n', out)\r\n  end",
    "type": "function"
  }, {
    "id": 123,
    "text": "local lua_exe = normpath(path.is_windows and 'spec/lua.bat' or 'spec/lua.lua')",
    "type": "statement:localassign"
  }, {
    "id": 124,
    "text": "local success, errcnt, out = executeBusted('--lua=' .. lua_exe .. ' spec/cl_success.lua')",
    "type": "statement:localassign"
  }, {
    "id": 125,
    "text": "assert.equal('bin/busted --ignore-lua --lua=' .. lua_exe .. ' spec/cl_success.lua\\n', out)",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 127,
    "text": "function()\r\n  it('tests running with --tags specified', function()\r\n    local success, errcnt = executeBusted('--pattern=_tags.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(8, errcnt)\r\n    success, errcnt = executeBusted('--pattern=_tags.lua$ --tags=tag1')\r\n    assert.is_false(success)\r\n    assert.is_equal(3, errcnt)\r\n    success, errcnt = executeBusted('--pattern=_tags.lua$ --tags=tag1,tag2')\r\n    assert.is_false(success)\r\n    assert.is_equal(4, errcnt)\r\n    success, errcnt = executeBusted('--pattern=_tags.lua$ --tags=tag1 --tags=tag2')\r\n    assert.is_false(success)\r\n    assert.is_equal(4, errcnt)\r\n  end)\r\n\r\n  it('tests running with --exclude-tags specified', function()\r\n    local success, errcnt = executeBusted('--pattern=_tags.lua$ --exclude-tags=tag1,tag2,dtag1,dtag2')\r\n    assert.is_true(success)\r\n    assert.is_equal(0, errcnt)\r\n    success, errcnt = executeBusted('--pattern=_tags.lua$ --exclude-tags=tag2,dtag1,dtag2')\r\n    assert.is_false(success)\r\n    assert.is_equal(2, errcnt)\r\n    success, errcnt = executeBusted('--pattern=_tags.lua$ --exclude-tags=tag2 --exclude-tags=dtag1,dtag2')\r\n    assert.is_false(success)\r\n    assert.is_equal(2, errcnt)\r\n  end)\r\n\r\n  it('tests running with --tags and --exclude-tags specified', function ()\r\n    local success, errcnt = executeBusted('--pattern=_tags.lua$ --tags=tag1 --exclude-tags=tag1')\r\n    assert.is_false(success)\r\n    success, errcnt = executeBusted('--pattern=_tags.lua$ --tags=tag3 --exclude-tags=tag4')\r\n    assert.is_false(success)\r\n  end)\r\n\r\n  it('tests running with --tags specified in describe', function ()\r\n    local success, errcnt = executeBusted('--pattern=_tags.lua$ --tags=dtag1')\r\n    assert.is_false(success)\r\n    assert.is_equal(5, errcnt)\r\n    success, errcnt = executeBusted('--pattern=_tags.lua$ --tags=dtag2')\r\n    assert.is_false(success)\r\n    assert.is_equal(1, errcnt)\r\n  end)\r\n\r\n  it('tests running with --exclude-pattern specified', function ()\r\n    local success, errcnt = executeBusted('--pattern=\"^cl_.*fail.*.lua$\" --exclude-pattern=\"failing\"')\r\n    assert.is_false(success)\r\n    assert.is_equal(4, errcnt)\r\n  end)\r\n\r\n  it('tests running with --exclude-pattern=\"\" disables exclude-pattern', function ()\r\n    local success, errcnt = executeBusted('--pattern=\"cl_two_failures.lua$\" --exclude-pattern \"\"')\r\n    assert.is_false(success)\r\n    assert.is_equal(2, errcnt)\r\n    local success, errcnt = executeBusted('--pattern=\"cl_success.lua$\" --exclude-pattern=')\r\n    assert.is_true(success)\r\n  end)\r\n\r\n  it('tests running with the same --pattern and --exclude-pattern specified', function ()\r\n    local success, errcnt = executeBusted('--pattern=\"^cl_.*fail.*.lua$\" --exclude-pattern=\"fail\"')\r\n    assert.is_false(success)\r\n    assert.is_equal(1, errcnt)\r\n  end)\r\n\r\n  it('tests running with --filter specified', function ()\r\n    local success, errcnt = executeBusted('--pattern=_filter.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(8, errcnt)\r\n    success, errcnt = executeBusted('--pattern=_filter.lua$ --filter=\"pattern1\"')\r\n    assert.is_false(success)\r\n    assert.is_equal(3, errcnt)\r\n    success, errcnt = executeBusted('--pattern=_filter.lua$ --filter=\"pattern2\"')\r\n    assert.is_false(success)\r\n    assert.is_equal(2, errcnt)\r\n    success, errcnt = executeBusted('--pattern=_filter.lua$ --filter=\"pattern1\" --filter=\"pattern2\"')\r\n    assert.is_false(success)\r\n    assert.is_equal(4, errcnt)\r\n  end)\r\n\r\n  it('tests running with --filter-out specified', function ()\r\n    local success, errcnt = executeBusted('--pattern=_filter.lua$ --filter-out=\"pattern1\"')\r\n    assert.is_false(success)\r\n    assert.is_equal(6, errcnt)\r\n    success, errcnt = executeBusted('--pattern=_filter.lua$ --filter-out=\"pattern%d\"')\r\n    assert.is_false(success)\r\n    assert.is_equal(5, errcnt)\r\n    success, errcnt = executeBusted('--pattern=_filter.lua$ --filter-out=\"patt1\" --filter-out=\"patt2\"')\r\n    assert.is_false(success)\r\n    assert.is_equal(3, errcnt)\r\n    success, errcnt = executeBusted('--pattern=_filter.lua$ --filter-out=\"patt.*(%d)\"')\r\n    assert.is_true(success)\r\n  end)\r\n\r\n  it('tests running with --filter and --filter-out specified', function ()\r\n    local success, errcnt = executeBusted('--pattern=_filter.lua$ --filter=\"pattern3\" --filter-out=\"patt.*[12]\"')\r\n    assert.is_true(success)\r\n  end)\r\n\r\n  it('tests running with --filter specified in describe', function ()\r\n    local success, errcnt = executeBusted('--pattern=_filter.lua$ --filter=\"patt1\"')\r\n    assert.is_false(success)\r\n    assert.is_equal(5, errcnt)\r\n    success, errcnt = executeBusted('--pattern=_filter.lua$ --filter=\"patt2\"')\r\n    assert.is_false(success)\r\n    assert.is_equal(1, errcnt)\r\n  end)\r\n\r\n  it('tests running with --lazy specified', function()\r\n    local success, errcnt = executeBusted('--lazy --pattern=_tags.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(7, errcnt)\r\n    success, errcnt = executeBusted('--lazy --pattern=_tags.lua$ --tags=tag1')\r\n    assert.is_false(success)\r\n    assert.is_equal(2, errcnt)\r\n    success, errcnt = executeBusted('--lazy --pattern=_tags.lua$ --tags=tag1,tag2')\r\n    assert.is_false(success)\r\n    assert.is_equal(3, errcnt)\r\n    success, errcnt = executeBusted('--lazy --pattern=_tags.lua$ --tags=tag1 --tags=tag2')\r\n    assert.is_false(success)\r\n    assert.is_equal(3, errcnt)\r\n  end)\r\n\r\n  it('tests running with -l specified', function()\r\n    local _, _, result = executeBusted('-l --pattern=cl_list.lua$')\r\n    local expected = 'spec/cl_list.lua:4: Tests list test 1\\n' ..\r\n                     'spec/cl_list.lua:7: Tests list test 2\\n' ..\r\n                     'spec/cl_list.lua:10: Tests list test 3\\n'\r\n    assert.is_equal(normpath(expected), result)\r\n  end)\r\n\r\n  it('tests running with --list specified', function()\r\n    local _, _, result = executeBusted('--list --pattern=cl_list.lua$')\r\n    local expected = 'spec/cl_list.lua:4: Tests list test 1\\n' ..\r\n                     'spec/cl_list.lua:7: Tests list test 2\\n' ..\r\n                     'spec/cl_list.lua:10: Tests list test 3\\n'\r\n    assert.is_equal(normpath(expected), result)\r\n  end)\r\n\r\n  it('tests running with --lpath specified', function()\r\n    local success, errcnt = executeBusted('--lpath=\"spec/?.lua\" spec/cl_lua_path.lua')\r\n    assert.is_true(success)\r\n    assert.is_equal(0, errcnt)\r\n  end)\r\n\r\n  it('tests running with --lang specified', function()\r\n    local success, errcnt = executeBusted('--pattern=cl_success.lua$ --lang=en')\r\n    assert.is_true(success)\r\n    assert.is_equal(0, errcnt)\r\n    success, errcnt = executeBusted('--pattern=cl_success --lang=not_found_here')\r\n    assert.is_false(success)\r\n  end)\r\n\r\n  it('tests running with --version specified', function()\r\n    local success, errcnt = executeBusted('--version')\r\n    assert.is_true(success)\r\n    assert.is_equal(0, errcnt)\r\n  end)\r\n\r\n  it('tests running with --help specified', function()\r\n    local success, errcnt = executeBusted('--help')\r\n    assert.is_false(success)\r\n  end)\r\n\r\n  it('tests running a non-compiling testfile', function()\r\n    local success, errcnt = executeBusted('--pattern=cl_compile_fail.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(1, errcnt)\r\n  end)\r\n\r\n  it('tests running a testfile throwing errors when being run', function()\r\n    local success, errcnt = executeBusted('--pattern=cl_execute_fail.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(1, errcnt)\r\n  end)\r\n\r\n  it('tests running with --output specified', function()\r\n    local success, errcnt = executeBusted('--pattern=cl_success.lua$ --output=TAP')\r\n    assert.is_true(success)\r\n    assert.is_equal(0, errcnt)\r\n    success, errcnt = executeBusted('--pattern=cl_two_failures.lua$ --output=not_found_here')\r\n    assert.is_false(success)\r\n    assert.is_equal(2, errcnt)\r\n  end)\r\n\r\n  it('tests running with --output specified with module in lua path', function()\r\n    local success, errcnt = executeBusted('--pattern=cl_success.lua$ --output=busted.outputHandlers.TAP')\r\n    assert.is_true(success)\r\n    assert.is_equal(0, errcnt)\r\n  end)\r\n\r\n  it('tests no tests to exit with a fail-exitcode', function()\r\n    local success, exitcode = execute(busted_cmd ..' --pattern=this_filename_does_simply_not_exist$')\r\n    assert.is_false(success)\r\n    assert.is_equal(1, exitcode)\r\n  end)\r\n\r\n  it('can switch interpreters', function()\r\n    local lua_exe = normpath(path.is_windows and 'spec/lua.bat' or 'spec/lua.lua')\r\n    local success, errcnt, out = executeBusted('--lua=' .. lua_exe .. ' spec/cl_success.lua')\r\n    assert.is_true(success)\r\n    assert.is_equal(0, errcnt)\r\n    assert.equal('bin/busted --ignore-lua --lua=' .. lua_exe .. ' spec/cl_success.lua\\n', out)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 128,
    "text": "it('tests running with --tags specified', function()\r\n    local success, errcnt = executeBusted('--pattern=_tags.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(8, errcnt)\r\n    success, errcnt = executeBusted('--pattern=_tags.lua$ --tags=tag1')\r\n    assert.is_false(success)\r\n    assert.is_equal(3, errcnt)\r\n    success, errcnt = executeBusted('--pattern=_tags.lua$ --tags=tag1,tag2')\r\n    assert.is_false(success)\r\n    assert.is_equal(4, errcnt)\r\n    success, errcnt = executeBusted('--pattern=_tags.lua$ --tags=tag1 --tags=tag2')\r\n    assert.is_false(success)\r\n    assert.is_equal(4, errcnt)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "it('tests running with --exclude-tags specified', function()\r\n    local success, errcnt = executeBusted('--pattern=_tags.lua$ --exclude-tags=tag1,tag2,dtag1,dtag2')\r\n    assert.is_true(success)\r\n    assert.is_equal(0, errcnt)\r\n    success, errcnt = executeBusted('--pattern=_tags.lua$ --exclude-tags=tag2,dtag1,dtag2')\r\n    assert.is_false(success)\r\n    assert.is_equal(2, errcnt)\r\n    success, errcnt = executeBusted('--pattern=_tags.lua$ --exclude-tags=tag2 --exclude-tags=dtag1,dtag2')\r\n    assert.is_false(success)\r\n    assert.is_equal(2, errcnt)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "it('tests running with --tags and --exclude-tags specified', function ()\r\n    local success, errcnt = executeBusted('--pattern=_tags.lua$ --tags=tag1 --exclude-tags=tag1')\r\n    assert.is_false(success)\r\n    success, errcnt = executeBusted('--pattern=_tags.lua$ --tags=tag3 --exclude-tags=tag4')\r\n    assert.is_false(success)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "it('tests running with --tags specified in describe', function ()\r\n    local success, errcnt = executeBusted('--pattern=_tags.lua$ --tags=dtag1')\r\n    assert.is_false(success)\r\n    assert.is_equal(5, errcnt)\r\n    success, errcnt = executeBusted('--pattern=_tags.lua$ --tags=dtag2')\r\n    assert.is_false(success)\r\n    assert.is_equal(1, errcnt)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "it('tests running with --exclude-pattern specified', function ()\r\n    local success, errcnt = executeBusted('--pattern=\"^cl_.*fail.*.lua$\" --exclude-pattern=\"failing\"')\r\n    assert.is_false(success)\r\n    assert.is_equal(4, errcnt)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 133,
    "text": "it('tests running with --exclude-pattern=\"\" disables exclude-pattern', function ()\r\n    local success, errcnt = executeBusted('--pattern=\"cl_two_failures.lua$\" --exclude-pattern \"\"')\r\n    assert.is_false(success)\r\n    assert.is_equal(2, errcnt)\r\n    local success, errcnt = executeBusted('--pattern=\"cl_success.lua$\" --exclude-pattern=')\r\n    assert.is_true(success)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 134,
    "text": "it('tests running with the same --pattern and --exclude-pattern specified', function ()\r\n    local success, errcnt = executeBusted('--pattern=\"^cl_.*fail.*.lua$\" --exclude-pattern=\"fail\"')\r\n    assert.is_false(success)\r\n    assert.is_equal(1, errcnt)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "it('tests running with --filter specified', function ()\r\n    local success, errcnt = executeBusted('--pattern=_filter.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(8, errcnt)\r\n    success, errcnt = executeBusted('--pattern=_filter.lua$ --filter=\"pattern1\"')\r\n    assert.is_false(success)\r\n    assert.is_equal(3, errcnt)\r\n    success, errcnt = executeBusted('--pattern=_filter.lua$ --filter=\"pattern2\"')\r\n    assert.is_false(success)\r\n    assert.is_equal(2, errcnt)\r\n    success, errcnt = executeBusted('--pattern=_filter.lua$ --filter=\"pattern1\" --filter=\"pattern2\"')\r\n    assert.is_false(success)\r\n    assert.is_equal(4, errcnt)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "it('tests running with --filter-out specified', function ()\r\n    local success, errcnt = executeBusted('--pattern=_filter.lua$ --filter-out=\"pattern1\"')\r\n    assert.is_false(success)\r\n    assert.is_equal(6, errcnt)\r\n    success, errcnt = executeBusted('--pattern=_filter.lua$ --filter-out=\"pattern%d\"')\r\n    assert.is_false(success)\r\n    assert.is_equal(5, errcnt)\r\n    success, errcnt = executeBusted('--pattern=_filter.lua$ --filter-out=\"patt1\" --filter-out=\"patt2\"')\r\n    assert.is_false(success)\r\n    assert.is_equal(3, errcnt)\r\n    success, errcnt = executeBusted('--pattern=_filter.lua$ --filter-out=\"patt.*(%d)\"')\r\n    assert.is_true(success)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "it('tests running with --filter and --filter-out specified', function ()\r\n    local success, errcnt = executeBusted('--pattern=_filter.lua$ --filter=\"pattern3\" --filter-out=\"patt.*[12]\"')\r\n    assert.is_true(success)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 138,
    "text": "it('tests running with --filter specified in describe', function ()\r\n    local success, errcnt = executeBusted('--pattern=_filter.lua$ --filter=\"patt1\"')\r\n    assert.is_false(success)\r\n    assert.is_equal(5, errcnt)\r\n    success, errcnt = executeBusted('--pattern=_filter.lua$ --filter=\"patt2\"')\r\n    assert.is_false(success)\r\n    assert.is_equal(1, errcnt)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "it('tests running with --lazy specified', function()\r\n    local success, errcnt = executeBusted('--lazy --pattern=_tags.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(7, errcnt)\r\n    success, errcnt = executeBusted('--lazy --pattern=_tags.lua$ --tags=tag1')\r\n    assert.is_false(success)\r\n    assert.is_equal(2, errcnt)\r\n    success, errcnt = executeBusted('--lazy --pattern=_tags.lua$ --tags=tag1,tag2')\r\n    assert.is_false(success)\r\n    assert.is_equal(3, errcnt)\r\n    success, errcnt = executeBusted('--lazy --pattern=_tags.lua$ --tags=tag1 --tags=tag2')\r\n    assert.is_false(success)\r\n    assert.is_equal(3, errcnt)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "it('tests running with -l specified', function()\r\n    local _, _, result = executeBusted('-l --pattern=cl_list.lua$')\r\n    local expected = 'spec/cl_list.lua:4: Tests list test 1\\n' ..\r\n                     'spec/cl_list.lua:7: Tests list test 2\\n' ..\r\n                     'spec/cl_list.lua:10: Tests list test 3\\n'\r\n    assert.is_equal(normpath(expected), result)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "it('tests running with --list specified', function()\r\n    local _, _, result = executeBusted('--list --pattern=cl_list.lua$')\r\n    local expected = 'spec/cl_list.lua:4: Tests list test 1\\n' ..\r\n                     'spec/cl_list.lua:7: Tests list test 2\\n' ..\r\n                     'spec/cl_list.lua:10: Tests list test 3\\n'\r\n    assert.is_equal(normpath(expected), result)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "it('tests running with --lpath specified', function()\r\n    local success, errcnt = executeBusted('--lpath=\"spec/?.lua\" spec/cl_lua_path.lua')\r\n    assert.is_true(success)\r\n    assert.is_equal(0, errcnt)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 143,
    "text": "it('tests running with --lang specified', function()\r\n    local success, errcnt = executeBusted('--pattern=cl_success.lua$ --lang=en')\r\n    assert.is_true(success)\r\n    assert.is_equal(0, errcnt)\r\n    success, errcnt = executeBusted('--pattern=cl_success --lang=not_found_here')\r\n    assert.is_false(success)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "it('tests running with --version specified', function()\r\n    local success, errcnt = executeBusted('--version')\r\n    assert.is_true(success)\r\n    assert.is_equal(0, errcnt)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 145,
    "text": "it('tests running with --help specified', function()\r\n    local success, errcnt = executeBusted('--help')\r\n    assert.is_false(success)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "it('tests running a non-compiling testfile', function()\r\n    local success, errcnt = executeBusted('--pattern=cl_compile_fail.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(1, errcnt)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 147,
    "text": "it('tests running a testfile throwing errors when being run', function()\r\n    local success, errcnt = executeBusted('--pattern=cl_execute_fail.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(1, errcnt)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 148,
    "text": "it('tests running with --output specified', function()\r\n    local success, errcnt = executeBusted('--pattern=cl_success.lua$ --output=TAP')\r\n    assert.is_true(success)\r\n    assert.is_equal(0, errcnt)\r\n    success, errcnt = executeBusted('--pattern=cl_two_failures.lua$ --output=not_found_here')\r\n    assert.is_false(success)\r\n    assert.is_equal(2, errcnt)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 149,
    "text": "it('tests running with --output specified with module in lua path', function()\r\n    local success, errcnt = executeBusted('--pattern=cl_success.lua$ --output=busted.outputHandlers.TAP')\r\n    assert.is_true(success)\r\n    assert.is_equal(0, errcnt)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 150,
    "text": "it('tests no tests to exit with a fail-exitcode', function()\r\n    local success, exitcode = execute(busted_cmd ..' --pattern=this_filename_does_simply_not_exist$')\r\n    assert.is_false(success)\r\n    assert.is_equal(1, exitcode)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "it('can switch interpreters', function()\r\n    local lua_exe = normpath(path.is_windows and 'spec/lua.bat' or 'spec/lua.lua')\r\n    local success, errcnt, out = executeBusted('--lua=' .. lua_exe .. ' spec/cl_success.lua')\r\n    assert.is_true(success)\r\n    assert.is_equal(0, errcnt)\r\n    assert.equal('bin/busted --ignore-lua --lua=' .. lua_exe .. ' spec/cl_success.lua\\n', out)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 152,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 153,
    "text": "function()\r\n    local success, errcnt = executeBusted('--pattern=cl_failing_support.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(16, errcnt)\r\n  end",
    "type": "function"
  }, {
    "id": 154,
    "text": "local success, errcnt = executeBusted('--pattern=cl_failing_support.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 155,
    "text": "assert.is_equal(16, errcnt)",
    "type": "statement:functioncall"
  }, {
    "id": 156,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 157,
    "text": "function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --pattern=cl_failing_support.lua$')\r\n    local _, numErrors = result:gsub('Error %-> .-\\n','')\r\n    assert.is_equal(16, numErrors)\r\n  end",
    "type": "function"
  }, {
    "id": 158,
    "text": "local _, _, result = executeBusted('--output=plainTerminal --pattern=cl_failing_support.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 159,
    "text": "local _, numErrors = result:gsub('Error %-> .-\\n','')",
    "type": "statement:localassign"
  }, {
    "id": 160,
    "text": "assert.is_equal(16, numErrors)",
    "type": "statement:functioncall"
  }, {
    "id": 161,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 162,
    "text": "function()\r\n  it('tests failing setup/before_each/after_each/teardown functions', function()\r\n    local success, errcnt = executeBusted('--pattern=cl_failing_support.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(16, errcnt)\r\n  end)\r\n\r\n  it('tests failing support functions as errors', function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --pattern=cl_failing_support.lua$')\r\n    local _, numErrors = result:gsub('Error %-> .-\\n','')\r\n    assert.is_equal(16, numErrors)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 163,
    "text": "it('tests failing setup/before_each/after_each/teardown functions', function()\r\n    local success, errcnt = executeBusted('--pattern=cl_failing_support.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(16, errcnt)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 164,
    "text": "it('tests failing support functions as errors', function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --pattern=cl_failing_support.lua$')\r\n    local _, numErrors = result:gsub('Error %-> .-\\n','')\r\n    assert.is_equal(16, numErrors)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 165,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 166,
    "text": "function()\r\n    local success, errcnt = executeLua('spec/cl_standalone.lua')\r\n    assert.is_false(success)\r\n    assert.is_equal(3, errcnt)\r\n    success, errcnt = executeLua('spec/cl_standalone.lua --tags=tag1')\r\n    assert.is_false(success)\r\n    assert.is_equal(2, errcnt)\r\n    success, errcnt = executeLua('spec/cl_standalone.lua --tags=tag1,tag2')\r\n    assert.is_false(success)\r\n    assert.is_equal(3, errcnt)\r\n  end",
    "type": "function"
  }, {
    "id": 167,
    "text": "local success, errcnt = executeLua('spec/cl_standalone.lua')",
    "type": "statement:localassign"
  }, {
    "id": 168,
    "text": "success, errcnt = executeLua('spec/cl_standalone.lua --tags=tag1')",
    "type": "statement:assign"
  }, {
    "id": 169,
    "text": "success, errcnt = executeLua('spec/cl_standalone.lua --tags=tag1,tag2')",
    "type": "statement:assign"
  }, {
    "id": 170,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 171,
    "text": "function()\r\n    local success, errcnt = executeLua('spec/cl_standalone.lua --exclude-tags=tag1,tag2')\r\n    assert.is_true(success)\r\n    assert.is_equal(0, errcnt)\r\n    success, errcnt = executeLua('spec/cl_standalone.lua --exclude-tags=tag2')\r\n    assert.is_false(success)\r\n    assert.is_equal(2, errcnt)\r\n  end",
    "type": "function"
  }, {
    "id": 172,
    "text": "local success, errcnt = executeLua('spec/cl_standalone.lua --exclude-tags=tag1,tag2')",
    "type": "statement:localassign"
  }, {
    "id": 173,
    "text": "success, errcnt = executeLua('spec/cl_standalone.lua --exclude-tags=tag2')",
    "type": "statement:assign"
  }, {
    "id": 174,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 175,
    "text": "function ()\r\n    local success, errcnt = executeLua('spec/cl_standalone.lua --tags=tag1 --exclude-tags=tag1')\r\n    assert.is_false(success)\r\n    success, errcnt = executeLua('spec/cl_standalone.lua --tags=tag3 --exclude-tags=tag4')\r\n    assert.is_true(success)\r\n  end",
    "type": "function"
  }, {
    "id": 176,
    "text": "local success, errcnt = executeLua('spec/cl_standalone.lua --tags=tag1 --exclude-tags=tag1')",
    "type": "statement:localassign"
  }, {
    "id": 177,
    "text": "success, errcnt = executeLua('spec/cl_standalone.lua --tags=tag3 --exclude-tags=tag4')",
    "type": "statement:assign"
  }, {
    "id": 178,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 179,
    "text": "function ()\r\n    local success, errcnt = executeLua('spec/cl_standalone.lua --helper=spec/cl_helper_script.lua -Xhelper \"--fail-teardown,--fail-after-each\"')\r\n    assert.is_false(success)\r\n    assert.is_equal(9, errcnt)\r\n  end",
    "type": "function"
  }, {
    "id": 180,
    "text": "local success, errcnt = executeLua('spec/cl_standalone.lua --helper=spec/cl_helper_script.lua -Xhelper \"--fail-teardown,--fail-after-each\"')",
    "type": "statement:localassign"
  }, {
    "id": 181,
    "text": "assert.is_equal(9, errcnt)",
    "type": "statement:functioncall"
  }, {
    "id": 182,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 183,
    "text": "function()\r\n    local success, errcnt = executeLua('spec/cl_standalone.lua --version')\r\n    assert.is_true(success)\r\n    assert.is_equal(0, errcnt)\r\n  end",
    "type": "function"
  }, {
    "id": 184,
    "text": "local success, errcnt = executeLua('spec/cl_standalone.lua --version')",
    "type": "statement:localassign"
  }, {
    "id": 185,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 186,
    "text": "function()\r\n    local success, errcnt = executeLua('spec/cl_standalone.lua --help')\r\n    assert.is_false(success)\r\n  end",
    "type": "function"
  }, {
    "id": 187,
    "text": "local success, errcnt = executeLua('spec/cl_standalone.lua --help')",
    "type": "statement:localassign"
  }, {
    "id": 188,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 189,
    "text": "function()\r\n    local success, errcnt = executeLua('< spec/cl_standalone.lua')\r\n    assert.is_false(success)\r\n    assert.is_equal(3, errcnt)\r\n  end",
    "type": "function"
  }, {
    "id": 190,
    "text": "local success, errcnt = executeLua('< spec/cl_standalone.lua')",
    "type": "statement:localassign"
  }, {
    "id": 191,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 192,
    "text": "function()\r\n  it('tests running with --tags specified', function()\r\n    local success, errcnt = executeLua('spec/cl_standalone.lua')\r\n    assert.is_false(success)\r\n    assert.is_equal(3, errcnt)\r\n    success, errcnt = executeLua('spec/cl_standalone.lua --tags=tag1')\r\n    assert.is_false(success)\r\n    assert.is_equal(2, errcnt)\r\n    success, errcnt = executeLua('spec/cl_standalone.lua --tags=tag1,tag2')\r\n    assert.is_false(success)\r\n    assert.is_equal(3, errcnt)\r\n  end)\r\n\r\n  it('tests running with --exclude-tags specified', function()\r\n    local success, errcnt = executeLua('spec/cl_standalone.lua --exclude-tags=tag1,tag2')\r\n    assert.is_true(success)\r\n    assert.is_equal(0, errcnt)\r\n    success, errcnt = executeLua('spec/cl_standalone.lua --exclude-tags=tag2')\r\n    assert.is_false(success)\r\n    assert.is_equal(2, errcnt)\r\n  end)\r\n\r\n  it('tests running with --tags and --exclude-tags specified', function ()\r\n    local success, errcnt = executeLua('spec/cl_standalone.lua --tags=tag1 --exclude-tags=tag1')\r\n    assert.is_false(success)\r\n    success, errcnt = executeLua('spec/cl_standalone.lua --tags=tag3 --exclude-tags=tag4')\r\n    assert.is_true(success)\r\n  end)\r\n\r\n  it('tests running with --helper specified', function ()\r\n    local success, errcnt = executeLua('spec/cl_standalone.lua --helper=spec/cl_helper_script.lua -Xhelper \"--fail-teardown,--fail-after-each\"')\r\n    assert.is_false(success)\r\n    assert.is_equal(9, errcnt)\r\n  end)\r\n\r\n  it('tests running with --version specified', function()\r\n    local success, errcnt = executeLua('spec/cl_standalone.lua --version')\r\n    assert.is_true(success)\r\n    assert.is_equal(0, errcnt)\r\n  end)\r\n\r\n  it('tests running with --help specified', function()\r\n    local success, errcnt = executeLua('spec/cl_standalone.lua --help')\r\n    assert.is_false(success)\r\n  end)\r\n\r\n  it('tests running via stdin', function()\r\n    local success, errcnt = executeLua('< spec/cl_standalone.lua')\r\n    assert.is_false(success)\r\n    assert.is_equal(3, errcnt)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 193,
    "text": "it('tests running with --tags specified', function()\r\n    local success, errcnt = executeLua('spec/cl_standalone.lua')\r\n    assert.is_false(success)\r\n    assert.is_equal(3, errcnt)\r\n    success, errcnt = executeLua('spec/cl_standalone.lua --tags=tag1')\r\n    assert.is_false(success)\r\n    assert.is_equal(2, errcnt)\r\n    success, errcnt = executeLua('spec/cl_standalone.lua --tags=tag1,tag2')\r\n    assert.is_false(success)\r\n    assert.is_equal(3, errcnt)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 194,
    "text": "it('tests running with --exclude-tags specified', function()\r\n    local success, errcnt = executeLua('spec/cl_standalone.lua --exclude-tags=tag1,tag2')\r\n    assert.is_true(success)\r\n    assert.is_equal(0, errcnt)\r\n    success, errcnt = executeLua('spec/cl_standalone.lua --exclude-tags=tag2')\r\n    assert.is_false(success)\r\n    assert.is_equal(2, errcnt)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 195,
    "text": "it('tests running with --tags and --exclude-tags specified', function ()\r\n    local success, errcnt = executeLua('spec/cl_standalone.lua --tags=tag1 --exclude-tags=tag1')\r\n    assert.is_false(success)\r\n    success, errcnt = executeLua('spec/cl_standalone.lua --tags=tag3 --exclude-tags=tag4')\r\n    assert.is_true(success)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 196,
    "text": "it('tests running with --helper specified', function ()\r\n    local success, errcnt = executeLua('spec/cl_standalone.lua --helper=spec/cl_helper_script.lua -Xhelper \"--fail-teardown,--fail-after-each\"')\r\n    assert.is_false(success)\r\n    assert.is_equal(9, errcnt)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 197,
    "text": "it('tests running with --version specified', function()\r\n    local success, errcnt = executeLua('spec/cl_standalone.lua --version')\r\n    assert.is_true(success)\r\n    assert.is_equal(0, errcnt)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 198,
    "text": "it('tests running with --help specified', function()\r\n    local success, errcnt = executeLua('spec/cl_standalone.lua --help')\r\n    assert.is_false(success)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 199,
    "text": "it('tests running via stdin', function()\r\n    local success, errcnt = executeLua('< spec/cl_standalone.lua')\r\n    assert.is_false(success)\r\n    assert.is_equal(3, errcnt)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 200,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 201,
    "text": "function()\r\n    local success, errcnt = executeBusted('spec/cl_standalone.lua')\r\n    assert.is_false(success)\r\n    assert.is_equal(3, errcnt)\r\n    success, errcnt = executeBusted('--tags=tag1 spec/cl_standalone.lua')\r\n    assert.is_false(success)\r\n    assert.is_equal(2, errcnt)\r\n    success, errcnt = executeBusted('--tags=tag1,tag2 spec/cl_standalone.lua')\r\n    assert.is_false(success)\r\n    assert.is_equal(3, errcnt)\r\n  end",
    "type": "function"
  }, {
    "id": 202,
    "text": "local success, errcnt = executeBusted('spec/cl_standalone.lua')",
    "type": "statement:localassign"
  }, {
    "id": 203,
    "text": "success, errcnt = executeBusted('--tags=tag1 spec/cl_standalone.lua')",
    "type": "statement:assign"
  }, {
    "id": 204,
    "text": "success, errcnt = executeBusted('--tags=tag1,tag2 spec/cl_standalone.lua')",
    "type": "statement:assign"
  }, {
    "id": 205,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 206,
    "text": "function()\r\n  it('runs standalone spec', function()\r\n    local success, errcnt = executeBusted('spec/cl_standalone.lua')\r\n    assert.is_false(success)\r\n    assert.is_equal(3, errcnt)\r\n    success, errcnt = executeBusted('--tags=tag1 spec/cl_standalone.lua')\r\n    assert.is_false(success)\r\n    assert.is_equal(2, errcnt)\r\n    success, errcnt = executeBusted('--tags=tag1,tag2 spec/cl_standalone.lua')\r\n    assert.is_false(success)\r\n    assert.is_equal(3, errcnt)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 207,
    "text": "it('runs standalone spec', function()\r\n    local success, errcnt = executeBusted('spec/cl_standalone.lua')\r\n    assert.is_false(success)\r\n    assert.is_equal(3, errcnt)\r\n    success, errcnt = executeBusted('--tags=tag1 spec/cl_standalone.lua')\r\n    assert.is_false(success)\r\n    assert.is_equal(2, errcnt)\r\n    success, errcnt = executeBusted('--tags=tag1,tag2 spec/cl_standalone.lua')\r\n    assert.is_false(success)\r\n    assert.is_equal(3, errcnt)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 208,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 209,
    "text": "function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --pattern=cl_errors.lua$ --tags=testerr')\r\n    local errmsg = result:match('(Error %-> .-)\\n')\r\n    assert.is_truthy(errmsg)\r\n  end",
    "type": "function"
  }, {
    "id": 210,
    "text": "local _, _, result = executeBusted('--output=plainTerminal --pattern=cl_errors.lua$ --tags=testerr')",
    "type": "statement:localassign"
  }, {
    "id": 211,
    "text": "local errmsg = result:match('(Error %-> .-)\\n')",
    "type": "statement:localassign"
  }, {
    "id": 212,
    "text": "assert.is_truthy(errmsg)",
    "type": "statement:functioncall"
  }, {
    "id": 213,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 214,
    "text": "function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --pattern=cl_two_failures.lua$')\r\n    local failmsg = result:match('(Failure %-> .-)\\n')\r\n    assert.is_truthy(failmsg)\r\n  end",
    "type": "function"
  }, {
    "id": 215,
    "text": "local _, _, result = executeBusted('--output=plainTerminal --pattern=cl_two_failures.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 216,
    "text": "local failmsg = result:match('(Failure %-> .-)\\n')",
    "type": "statement:localassign"
  }, {
    "id": 217,
    "text": "assert.is_truthy(failmsg)",
    "type": "statement:functioncall"
  }, {
    "id": 218,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 219,
    "text": "function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --pattern=cl_errors.lua$ --tags=luaerr')\r\n    local failmsg = result:match('(Error %-> .-)\\n')\r\n    assert.is_truthy(failmsg)\r\n  end",
    "type": "function"
  }, {
    "id": 220,
    "text": "local _, _, result = executeBusted('--output=plainTerminal --pattern=cl_errors.lua$ --tags=luaerr')",
    "type": "statement:localassign"
  }, {
    "id": 221,
    "text": "local failmsg = result:match('(Error %-> .-)\\n')",
    "type": "statement:localassign"
  }, {
    "id": 222,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 223,
    "text": "function()\r\n  it('by detecting errors as test errors', function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --pattern=cl_errors.lua$ --tags=testerr')\r\n    local errmsg = result:match('(Error %-> .-)\\n')\r\n    assert.is_truthy(errmsg)\r\n  end)\r\n\r\n  it('by detecting assert failures as test failures', function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --pattern=cl_two_failures.lua$')\r\n    local failmsg = result:match('(Failure %-> .-)\\n')\r\n    assert.is_truthy(failmsg)\r\n  end)\r\n\r\n  it('by detecting Lua runtime errors as test errors', function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --pattern=cl_errors.lua$ --tags=luaerr')\r\n    local failmsg = result:match('(Error %-> .-)\\n')\r\n    assert.is_truthy(failmsg)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 224,
    "text": "it('by detecting errors as test errors', function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --pattern=cl_errors.lua$ --tags=testerr')\r\n    local errmsg = result:match('(Error %-> .-)\\n')\r\n    assert.is_truthy(errmsg)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 225,
    "text": "it('by detecting assert failures as test failures', function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --pattern=cl_two_failures.lua$')\r\n    local failmsg = result:match('(Failure %-> .-)\\n')\r\n    assert.is_truthy(failmsg)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 226,
    "text": "it('by detecting Lua runtime errors as test errors', function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --pattern=cl_errors.lua$ --tags=luaerr')\r\n    local failmsg = result:match('(Error %-> .-)\\n')\r\n    assert.is_truthy(failmsg)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 227,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 228,
    "text": "function()\r\n    local _, _, result = executeBusted('--verbose --pattern=cl_errors.lua$ --tags=testerr')\r\n    local errmsg = result:match('(stack traceback:.*)\\n')\r\n    local expected = [[stack traceback:\r\n\tspec/cl_errors.lua:6: in function <spec/cl_errors.lua:5>\r\n]]\r\n    assert.is_equal(normpath(expected), errmsg)\r\n  end",
    "type": "function"
  }, {
    "id": 229,
    "text": "local _, _, result = executeBusted('--verbose --pattern=cl_errors.lua$ --tags=testerr')",
    "type": "statement:localassign"
  }, {
    "id": 230,
    "text": "local errmsg = result:match('(stack traceback:.*)\\n')",
    "type": "statement:localassign"
  }, {
    "id": 231,
    "text": "local expected = [[stack traceback:\r\n\tspec/cl_errors.lua:6: in function <spec/cl_errors.lua:5>\r\n]]",
    "type": "statement:localassign"
  }, {
    "id": 232,
    "text": "assert.is_equal(normpath(expected), errmsg)",
    "type": "statement:functioncall"
  }, {
    "id": 233,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 234,
    "text": "function()\r\n    local _, _, result = executeBusted('--verbose --pattern=cl_two_failures.lua$ --tags=err1')\r\n    local errmsg = result:match('(stack traceback:.*)\\n')\r\n    local expected = [[stack traceback:\r\n\tspec/cl_two_failures.lua:6: in function <spec/cl_two_failures.lua:5>\r\n]]\r\n    assert.is_equal(normpath(expected), errmsg)\r\n  end",
    "type": "function"
  }, {
    "id": 235,
    "text": "local _, _, result = executeBusted('--verbose --pattern=cl_two_failures.lua$ --tags=err1')",
    "type": "statement:localassign"
  }, {
    "id": 236,
    "text": "local expected = [[stack traceback:\r\n\tspec/cl_two_failures.lua:6: in function <spec/cl_two_failures.lua:5>\r\n]]",
    "type": "statement:localassign"
  }, {
    "id": 237,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 238,
    "text": "function()\r\n    local _, _, result = executeBusted('--verbose --pattern=cl_errors.lua$ --tags=luaerr')\r\n    local errmsg = result:match('(stack traceback:.*)\\n')\r\n    local expected = [[stack traceback:\r\n\tspec/cl_errors.lua:11: in function <spec/cl_errors.lua:9>\r\n]]\r\n    assert.is_equal(normpath(expected), errmsg)\r\n  end",
    "type": "function"
  }, {
    "id": 239,
    "text": "local _, _, result = executeBusted('--verbose --pattern=cl_errors.lua$ --tags=luaerr')",
    "type": "statement:localassign"
  }, {
    "id": 240,
    "text": "local expected = [[stack traceback:\r\n\tspec/cl_errors.lua:11: in function <spec/cl_errors.lua:9>\r\n]]",
    "type": "statement:localassign"
  }, {
    "id": 241,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 242,
    "text": "function()\r\n  it('when throwing an error', function()\r\n    local _, _, result = executeBusted('--verbose --pattern=cl_errors.lua$ --tags=testerr')\r\n    local errmsg = result:match('(stack traceback:.*)\\n')\r\n    local expected = [[stack traceback:\r\n\tspec/cl_errors.lua:6: in function <spec/cl_errors.lua:5>\r\n]]\r\n    assert.is_equal(normpath(expected), errmsg)\r\n  end)\r\n\r\n  it('when assertion fails', function()\r\n    local _, _, result = executeBusted('--verbose --pattern=cl_two_failures.lua$ --tags=err1')\r\n    local errmsg = result:match('(stack traceback:.*)\\n')\r\n    local expected = [[stack traceback:\r\n\tspec/cl_two_failures.lua:6: in function <spec/cl_two_failures.lua:5>\r\n]]\r\n    assert.is_equal(normpath(expected), errmsg)\r\n  end)\r\n\r\n  it('when Lua runtime error', function()\r\n    local _, _, result = executeBusted('--verbose --pattern=cl_errors.lua$ --tags=luaerr')\r\n    local errmsg = result:match('(stack traceback:.*)\\n')\r\n    local expected = [[stack traceback:\r\n\tspec/cl_errors.lua:11: in function <spec/cl_errors.lua:9>\r\n]]\r\n    assert.is_equal(normpath(expected), errmsg)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 243,
    "text": "it('when throwing an error', function()\r\n    local _, _, result = executeBusted('--verbose --pattern=cl_errors.lua$ --tags=testerr')\r\n    local errmsg = result:match('(stack traceback:.*)\\n')\r\n    local expected = [[stack traceback:\r\n\tspec/cl_errors.lua:6: in function <spec/cl_errors.lua:5>\r\n]]\r\n    assert.is_equal(normpath(expected), errmsg)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 244,
    "text": "it('when assertion fails', function()\r\n    local _, _, result = executeBusted('--verbose --pattern=cl_two_failures.lua$ --tags=err1')\r\n    local errmsg = result:match('(stack traceback:.*)\\n')\r\n    local expected = [[stack traceback:\r\n\tspec/cl_two_failures.lua:6: in function <spec/cl_two_failures.lua:5>\r\n]]\r\n    assert.is_equal(normpath(expected), errmsg)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 245,
    "text": "it('when Lua runtime error', function()\r\n    local _, _, result = executeBusted('--verbose --pattern=cl_errors.lua$ --tags=luaerr')\r\n    local errmsg = result:match('(stack traceback:.*)\\n')\r\n    local expected = [[stack traceback:\r\n\tspec/cl_errors.lua:11: in function <spec/cl_errors.lua:9>\r\n]]\r\n    assert.is_equal(normpath(expected), errmsg)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 246,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 247,
    "text": "function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --pattern=cl_errors.lua$ --tags=testerr')\r\n    local err = result:match('(Error %-> .-)\\n')\r\n    local errmsg = result:match('\\n(spec[/\\\\].-)\\n')\r\n    local expectedErr = \"Error -> spec/cl_errors.lua @ 5\"\r\n    local expectedMsg = \"spec/cl_errors.lua:6: force an error\"\r\n    assert.is_equal(normpath(expectedErr), err)\r\n    assert.is_equal(normpath(expectedMsg), errmsg)\r\n  end",
    "type": "function"
  }, {
    "id": 248,
    "text": "local err = result:match('(Error %-> .-)\\n')",
    "type": "statement:localassign"
  }, {
    "id": 249,
    "text": "local errmsg = result:match('\\n(spec[/\\\\].-)\\n')",
    "type": "statement:localassign"
  }, {
    "id": 250,
    "text": "local expectedErr = \"Error -> spec/cl_errors.lua @ 5\"",
    "type": "statement:localassign"
  }, {
    "id": 251,
    "text": "local expectedMsg = \"spec/cl_errors.lua:6: force an error\"",
    "type": "statement:localassign"
  }, {
    "id": 252,
    "text": "assert.is_equal(normpath(expectedErr), err)",
    "type": "statement:functioncall"
  }, {
    "id": 253,
    "text": "assert.is_equal(normpath(expectedMsg), errmsg)",
    "type": "statement:functioncall"
  }, {
    "id": 254,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 255,
    "text": "function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --tags=table --pattern=cl_error_messages.lua$')\r\n    local errmsg = result:match('\\n(spec[/\\\\].-)\\n')\r\n    local expected = 'spec/cl_error_messages.lua:5: {'\r\n    assert.is_equal(normpath(expected), errmsg)\r\n  end",
    "type": "function"
  }, {
    "id": 256,
    "text": "local _, _, result = executeBusted('--output=plainTerminal --tags=table --pattern=cl_error_messages.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 257,
    "text": "local expected = 'spec/cl_error_messages.lua:5: {'",
    "type": "statement:localassign"
  }, {
    "id": 258,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 259,
    "text": "function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --tags=nil --pattern=cl_error_messages.lua$')\r\n    local errmsg = result:match('\\n(spec[/\\\\].-)\\n')\r\n    local expected = 'spec/cl_error_messages.lua:9: Nil error'\r\n    assert.is_equal(normpath(expected), errmsg)\r\n  end",
    "type": "function"
  }, {
    "id": 260,
    "text": "local _, _, result = executeBusted('--output=plainTerminal --tags=nil --pattern=cl_error_messages.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 261,
    "text": "local expected = 'spec/cl_error_messages.lua:9: Nil error'",
    "type": "statement:localassign"
  }, {
    "id": 262,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 263,
    "text": "function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --tags=tostring --pattern=cl_error_messages.lua$')\r\n    local errmsg = result:match('\\n(spec[/\\\\].-)\\n')\r\n    local expected = 'spec/cl_error_messages.lua:17: {}'\r\n    assert.is_equal(normpath(expected), errmsg)\r\n  end",
    "type": "function"
  }, {
    "id": 264,
    "text": "local _, _, result = executeBusted('--output=plainTerminal --tags=tostring --pattern=cl_error_messages.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 265,
    "text": "local expected = 'spec/cl_error_messages.lua:17: {}'",
    "type": "statement:localassign"
  }, {
    "id": 266,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 267,
    "text": "function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --tags=pcall --pattern=cl_error_messages.lua$')\r\n    local errmsg = result:match('\\n(spec[/\\\\].-)\\n')\r\n    local expected = 'spec/cl_error_messages.lua:22: error after pcall'\r\n    assert.is_equal(normpath(expected), errmsg)\r\n  end",
    "type": "function"
  }, {
    "id": 268,
    "text": "local _, _, result = executeBusted('--output=plainTerminal --tags=pcall --pattern=cl_error_messages.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 269,
    "text": "local expected = 'spec/cl_error_messages.lua:22: error after pcall'",
    "type": "statement:localassign"
  }, {
    "id": 270,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 271,
    "text": "function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --pattern=cl_compile_fail.lua$')\r\n    local errmsg = result:match('(Error %-> .-:%d+:) ')\r\n    local expected = \"Error -> spec/cl_compile_fail.lua:3:\"\r\n    assert.is_equal(normpath(expected), errmsg)\r\n  end",
    "type": "function"
  }, {
    "id": 272,
    "text": "local _, _, result = executeBusted('--output=plainTerminal --pattern=cl_compile_fail.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 273,
    "text": "local errmsg = result:match('(Error %-> .-:%d+:) ')",
    "type": "statement:localassign"
  }, {
    "id": 274,
    "text": "local expected = \"Error -> spec/cl_compile_fail.lua:3:\"",
    "type": "statement:localassign"
  }, {
    "id": 275,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 276,
    "text": "function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --pattern=cl_execute_fail.lua$')\r\n    local err = result:match('(Error %-> .-)\\n')\r\n    local errmsg = result:match('\\n(spec[/\\\\]cl_execute_fail%.lua:%d+:.-)\\n')\r\n    local expectedErr = 'Error -> spec/cl_execute_fail.lua @ 4'\r\n    local expectedMsg = 'spec/cl_execute_fail.lua:4: This compiles fine, but throws an error when being run'\r\n    assert.is_equal(normpath(expectedErr), err)\r\n    assert.is_equal(normpath(expectedMsg), errmsg)\r\n  end",
    "type": "function"
  }, {
    "id": 277,
    "text": "local _, _, result = executeBusted('--output=plainTerminal --pattern=cl_execute_fail.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 278,
    "text": "local errmsg = result:match('\\n(spec[/\\\\]cl_execute_fail%.lua:%d+:.-)\\n')",
    "type": "statement:localassign"
  }, {
    "id": 279,
    "text": "local expectedErr = 'Error -> spec/cl_execute_fail.lua @ 4'",
    "type": "statement:localassign"
  }, {
    "id": 280,
    "text": "local expectedMsg = 'spec/cl_execute_fail.lua:4: This compiles fine, but throws an error when being run'",
    "type": "statement:localassign"
  }, {
    "id": 281,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 282,
    "text": "function()\r\n    local _, _, result, rerr = executeBusted('--pattern=cl_two_failures.lua$ --output=not_found_here 2>&1')\r\n    local errmsg = rerr:match('(.-)\\n')\r\n    local expected = 'busted: error: Cannot load output library: not_found_here'\r\n    assert.is_equal(expected, errmsg)\r\n  end",
    "type": "function"
  }, {
    "id": 283,
    "text": "local _, _, result, rerr = executeBusted('--pattern=cl_two_failures.lua$ --output=not_found_here 2>&1')",
    "type": "statement:localassign"
  }, {
    "id": 284,
    "text": "local errmsg = rerr:match('(.-)\\n')",
    "type": "statement:localassign"
  }, {
    "id": 285,
    "text": "local expected = 'busted: error: Cannot load output library: not_found_here'",
    "type": "statement:localassign"
  }, {
    "id": 286,
    "text": "assert.is_equal(expected, errmsg)",
    "type": "statement:functioncall"
  }, {
    "id": 287,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 288,
    "text": "function()\r\n    local _, _, result, rerr = executeBusted('--output=plainTerminal --pattern=cl_two_failures.lua$ --helper=not_found_here 2>&1')\r\n    local err = result:match('Error %-> .-:%d+: (.-)\\n')\r\n    local errmsg = rerr:match('(.-)\\n')\r\n    local expectedErr = \"module 'not_found_here' not found:\"\r\n    local expectedMsg = 'busted: error: Cannot load helper script: not_found_here'\r\n    assert.is_equal(expectedErr, err)\r\n    assert.is_equal(expectedMsg, errmsg)\r\n  end",
    "type": "function"
  }, {
    "id": 289,
    "text": "local _, _, result, rerr = executeBusted('--output=plainTerminal --pattern=cl_two_failures.lua$ --helper=not_found_here 2>&1')",
    "type": "statement:localassign"
  }, {
    "id": 290,
    "text": "local err = result:match('Error %-> .-:%d+: (.-)\\n')",
    "type": "statement:localassign"
  }, {
    "id": 291,
    "text": "local expectedErr = \"module 'not_found_here' not found:\"",
    "type": "statement:localassign"
  }, {
    "id": 292,
    "text": "local expectedMsg = 'busted: error: Cannot load helper script: not_found_here'",
    "type": "statement:localassign"
  }, {
    "id": 293,
    "text": "assert.is_equal(expectedErr, err)",
    "type": "statement:functioncall"
  }, {
    "id": 294,
    "text": "assert.is_equal(expectedMsg, errmsg)",
    "type": "statement:functioncall"
  }, {
    "id": 295,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 296,
    "text": "function()\r\n    local _, _, result, rerr = executeBusted('--output=plainTerminal --pattern=cl_two_failures.lua$ --helper=not_found_here.lua 2>&1')\r\n    local err = result:match('Error %-> (.-)\\n')\r\n    local errmsg = rerr:match('(.-)\\n')\r\n    local expectedErr = 'cannot open not_found_here.lua: No such file or directory'\r\n    local expectedMsg = 'busted: error: Cannot load helper script: not_found_here.lua'\r\n    assert.is_equal(expectedErr, err)\r\n    assert.is_equal(expectedMsg, errmsg)\r\n  end",
    "type": "function"
  }, {
    "id": 297,
    "text": "local _, _, result, rerr = executeBusted('--output=plainTerminal --pattern=cl_two_failures.lua$ --helper=not_found_here.lua 2>&1')",
    "type": "statement:localassign"
  }, {
    "id": 298,
    "text": "local err = result:match('Error %-> (.-)\\n')",
    "type": "statement:localassign"
  }, {
    "id": 299,
    "text": "local expectedErr = 'cannot open not_found_here.lua: No such file or directory'",
    "type": "statement:localassign"
  }, {
    "id": 300,
    "text": "local expectedMsg = 'busted: error: Cannot load helper script: not_found_here.lua'",
    "type": "statement:localassign"
  }, {
    "id": 301,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 302,
    "text": "function()\r\n    local _, _, result = executeBusted('--output=plainTerminal does_not_exist.lua')\r\n    local errmsg = result:match('Error %-> (.-)\\n')\r\n    local expected = 'Cannot find file or directory: does_not_exist.lua'\r\n    assert.is_equal(expected, errmsg)\r\n  end",
    "type": "function"
  }, {
    "id": 303,
    "text": "local _, _, result = executeBusted('--output=plainTerminal does_not_exist.lua')",
    "type": "statement:localassign"
  }, {
    "id": 304,
    "text": "local errmsg = result:match('Error %-> (.-)\\n')",
    "type": "statement:localassign"
  }, {
    "id": 305,
    "text": "local expected = 'Cannot find file or directory: does_not_exist.lua'",
    "type": "statement:localassign"
  }, {
    "id": 306,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 307,
    "text": "function()\r\n    local _, _, result = executeBusted('--output=plainTerminal does_not_exist')\r\n    local errmsg = result:match('Error %-> (.-)\\n')\r\n    local expected = 'Cannot find file or directory: does_not_exist'\r\n    assert.is_equal(expected, errmsg)\r\n  end",
    "type": "function"
  }, {
    "id": 308,
    "text": "local _, _, result = executeBusted('--output=plainTerminal does_not_exist')",
    "type": "statement:localassign"
  }, {
    "id": 309,
    "text": "local expected = 'Cannot find file or directory: does_not_exist'",
    "type": "statement:localassign"
  }, {
    "id": 310,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 311,
    "text": "function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --pattern=this_filename_does_simply_not_exist$')\r\n    local errmsg = result:match('Error %-> (.-)\\n')\r\n    local expected = 'No test files found matching Lua pattern: this_filename_does_simply_not_exist$'\r\n    assert.is_equal(expected, errmsg)\r\n  end",
    "type": "function"
  }, {
    "id": 312,
    "text": "local _, _, result = executeBusted('--output=plainTerminal --pattern=this_filename_does_simply_not_exist$')",
    "type": "statement:localassign"
  }, {
    "id": 313,
    "text": "local expected = 'No test files found matching Lua pattern: this_filename_does_simply_not_exist$'",
    "type": "statement:localassign"
  }, {
    "id": 314,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 315,
    "text": "function() error('gc error') end",
    "type": "function"
  }, {
    "id": 316,
    "text": "error('gc error')",
    "type": "statement:functioncall"
  }, {
    "id": 317,
    "text": "function()\r\n      setmetatable({}, { __gc = function() error('gc error') end})\r\n      collectgarbage()\r\n      collectgarbage()\r\n    end",
    "type": "function"
  }, {
    "id": 318,
    "text": "setmetatable({}, { __gc = function() error('gc error') end})",
    "type": "statement:functioncall"
  }, {
    "id": 319,
    "text": "collectgarbage()",
    "type": "statement:functioncall"
  }, {
    "id": 320,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 321,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 322,
    "text": "function()\r\n    local noGC = xpcall(function()\r\n      setmetatable({}, { __gc = function() error('gc error') end})\r\n      collectgarbage()\r\n      collectgarbage()\r\n    end, function() end)\r\n    if noGC then pending('no __gc metamethod support') end\r\n\r\n    local success, errcnt, result = executeBusted('--pattern=cl_gc_error.lua$')\r\n    local err = result:match('Error %-> (.-)\\n')\r\n    local errmsg = result:match('\\n([^\\n]-%(spec[/\\\\].-%))\\n')\r\n    local expected = 'error in __gc metamethod (spec/cl_gc_error.lua:5: gc error)'\r\n    assert.is_false(success)\r\n    assert.is_equal(1, errcnt)\r\n    assert.is_truthy(err)\r\n    assert.is_equal(normpath(expected), errmsg)\r\n  end",
    "type": "function"
  }, {
    "id": 323,
    "text": "local noGC = xpcall(function()\r\n      setmetatable({}, { __gc = function() error('gc error') end})\r\n      collectgarbage()\r\n      collectgarbage()\r\n    end, function() end)",
    "type": "statement:localassign"
  }, {
    "id": 324,
    "text": "if noGC then pending('no __gc metamethod support') end",
    "type": "statement:if"
  }, {
    "id": 325,
    "text": "pending('no __gc metamethod support')",
    "type": "statement:functioncall"
  }, {
    "id": 326,
    "text": "local success, errcnt, result = executeBusted('--pattern=cl_gc_error.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 327,
    "text": "local errmsg = result:match('\\n([^\\n]-%(spec[/\\\\].-%))\\n')",
    "type": "statement:localassign"
  }, {
    "id": 328,
    "text": "local expected = 'error in __gc metamethod (spec/cl_gc_error.lua:5: gc error)'",
    "type": "statement:localassign"
  }, {
    "id": 329,
    "text": "assert.is_truthy(err)",
    "type": "statement:functioncall"
  }, {
    "id": 330,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 331,
    "text": "function()\r\n  it('when throwing errors in a test', function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --pattern=cl_errors.lua$ --tags=testerr')\r\n    local err = result:match('(Error %-> .-)\\n')\r\n    local errmsg = result:match('\\n(spec[/\\\\].-)\\n')\r\n    local expectedErr = \"Error -> spec/cl_errors.lua @ 5\"\r\n    local expectedMsg = \"spec/cl_errors.lua:6: force an error\"\r\n    assert.is_equal(normpath(expectedErr), err)\r\n    assert.is_equal(normpath(expectedMsg), errmsg)\r\n  end)\r\n\r\n  it('when throwing an error table', function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --tags=table --pattern=cl_error_messages.lua$')\r\n    local errmsg = result:match('\\n(spec[/\\\\].-)\\n')\r\n    local expected = 'spec/cl_error_messages.lua:5: {'\r\n    assert.is_equal(normpath(expected), errmsg)\r\n  end)\r\n\r\n  it('when throwing a nil error', function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --tags=nil --pattern=cl_error_messages.lua$')\r\n    local errmsg = result:match('\\n(spec[/\\\\].-)\\n')\r\n    local expected = 'spec/cl_error_messages.lua:9: Nil error'\r\n    assert.is_equal(normpath(expected), errmsg)\r\n  end)\r\n\r\n  it('when throwing an error table with __tostring', function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --tags=tostring --pattern=cl_error_messages.lua$')\r\n    local errmsg = result:match('\\n(spec[/\\\\].-)\\n')\r\n    local expected = 'spec/cl_error_messages.lua:17: {}'\r\n    assert.is_equal(normpath(expected), errmsg)\r\n  end)\r\n\r\n  it('when throwing after a pcall', function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --tags=pcall --pattern=cl_error_messages.lua$')\r\n    local errmsg = result:match('\\n(spec[/\\\\].-)\\n')\r\n    local expected = 'spec/cl_error_messages.lua:22: error after pcall'\r\n    assert.is_equal(normpath(expected), errmsg)\r\n  end)\r\n\r\n  it('when running a non-compiling testfile', function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --pattern=cl_compile_fail.lua$')\r\n    local errmsg = result:match('(Error %-> .-:%d+:) ')\r\n    local expected = \"Error -> spec/cl_compile_fail.lua:3:\"\r\n    assert.is_equal(normpath(expected), errmsg)\r\n  end)\r\n\r\n  it('when a testfile throws errors', function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --pattern=cl_execute_fail.lua$')\r\n    local err = result:match('(Error %-> .-)\\n')\r\n    local errmsg = result:match('\\n(spec[/\\\\]cl_execute_fail%.lua:%d+:.-)\\n')\r\n    local expectedErr = 'Error -> spec/cl_execute_fail.lua @ 4'\r\n    local expectedMsg = 'spec/cl_execute_fail.lua:4: This compiles fine, but throws an error when being run'\r\n    assert.is_equal(normpath(expectedErr), err)\r\n    assert.is_equal(normpath(expectedMsg), errmsg)\r\n  end)\r\n\r\n  it('when output library not found', function()\r\n    local _, _, result, rerr = executeBusted('--pattern=cl_two_failures.lua$ --output=not_found_here 2>&1')\r\n    local errmsg = rerr:match('(.-)\\n')\r\n    local expected = 'busted: error: Cannot load output library: not_found_here'\r\n    assert.is_equal(expected, errmsg)\r\n  end)\r\n\r\n  it('when helper script not found', function()\r\n    local _, _, result, rerr = executeBusted('--output=plainTerminal --pattern=cl_two_failures.lua$ --helper=not_found_here 2>&1')\r\n    local err = result:match('Error %-> .-:%d+: (.-)\\n')\r\n    local errmsg = rerr:match('(.-)\\n')\r\n    local expectedErr = \"module 'not_found_here' not found:\"\r\n    local expectedMsg = 'busted: error: Cannot load helper script: not_found_here'\r\n    assert.is_equal(expectedErr, err)\r\n    assert.is_equal(expectedMsg, errmsg)\r\n  end)\r\n\r\n  it('when helper lua script not found', function()\r\n    local _, _, result, rerr = executeBusted('--output=plainTerminal --pattern=cl_two_failures.lua$ --helper=not_found_here.lua 2>&1')\r\n    local err = result:match('Error %-> (.-)\\n')\r\n    local errmsg = rerr:match('(.-)\\n')\r\n    local expectedErr = 'cannot open not_found_here.lua: No such file or directory'\r\n    local expectedMsg = 'busted: error: Cannot load helper script: not_found_here.lua'\r\n    assert.is_equal(expectedErr, err)\r\n    assert.is_equal(expectedMsg, errmsg)\r\n  end)\r\n\r\n  it('when test file not found', function()\r\n    local _, _, result = executeBusted('--output=plainTerminal does_not_exist.lua')\r\n    local errmsg = result:match('Error %-> (.-)\\n')\r\n    local expected = 'Cannot find file or directory: does_not_exist.lua'\r\n    assert.is_equal(expected, errmsg)\r\n  end)\r\n\r\n  it('when test directory not found', function()\r\n    local _, _, result = executeBusted('--output=plainTerminal does_not_exist')\r\n    local errmsg = result:match('Error %-> (.-)\\n')\r\n    local expected = 'Cannot find file or directory: does_not_exist'\r\n    assert.is_equal(expected, errmsg)\r\n  end)\r\n\r\n  it('when no test files matching Lua pattern', function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --pattern=this_filename_does_simply_not_exist$')\r\n    local errmsg = result:match('Error %-> (.-)\\n')\r\n    local expected = 'No test files found matching Lua pattern: this_filename_does_simply_not_exist$'\r\n    assert.is_equal(expected, errmsg)\r\n  end)\r\n\r\n  it('when __gc metamethod throws error', function()\r\n    local noGC = xpcall(function()\r\n      setmetatable({}, { __gc = function() error('gc error') end})\r\n      collectgarbage()\r\n      collectgarbage()\r\n    end, function() end)\r\n    if noGC then pending('no __gc metamethod support') end\r\n\r\n    local success, errcnt, result = executeBusted('--pattern=cl_gc_error.lua$')\r\n    local err = result:match('Error %-> (.-)\\n')\r\n    local errmsg = result:match('\\n([^\\n]-%(spec[/\\\\].-%))\\n')\r\n    local expected = 'error in __gc metamethod (spec/cl_gc_error.lua:5: gc error)'\r\n    assert.is_false(success)\r\n    assert.is_equal(1, errcnt)\r\n    assert.is_truthy(err)\r\n    assert.is_equal(normpath(expected), errmsg)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 332,
    "text": "it('when throwing errors in a test', function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --pattern=cl_errors.lua$ --tags=testerr')\r\n    local err = result:match('(Error %-> .-)\\n')\r\n    local errmsg = result:match('\\n(spec[/\\\\].-)\\n')\r\n    local expectedErr = \"Error -> spec/cl_errors.lua @ 5\"\r\n    local expectedMsg = \"spec/cl_errors.lua:6: force an error\"\r\n    assert.is_equal(normpath(expectedErr), err)\r\n    assert.is_equal(normpath(expectedMsg), errmsg)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 333,
    "text": "it('when throwing an error table', function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --tags=table --pattern=cl_error_messages.lua$')\r\n    local errmsg = result:match('\\n(spec[/\\\\].-)\\n')\r\n    local expected = 'spec/cl_error_messages.lua:5: {'\r\n    assert.is_equal(normpath(expected), errmsg)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 334,
    "text": "it('when throwing a nil error', function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --tags=nil --pattern=cl_error_messages.lua$')\r\n    local errmsg = result:match('\\n(spec[/\\\\].-)\\n')\r\n    local expected = 'spec/cl_error_messages.lua:9: Nil error'\r\n    assert.is_equal(normpath(expected), errmsg)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 335,
    "text": "it('when throwing an error table with __tostring', function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --tags=tostring --pattern=cl_error_messages.lua$')\r\n    local errmsg = result:match('\\n(spec[/\\\\].-)\\n')\r\n    local expected = 'spec/cl_error_messages.lua:17: {}'\r\n    assert.is_equal(normpath(expected), errmsg)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 336,
    "text": "it('when throwing after a pcall', function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --tags=pcall --pattern=cl_error_messages.lua$')\r\n    local errmsg = result:match('\\n(spec[/\\\\].-)\\n')\r\n    local expected = 'spec/cl_error_messages.lua:22: error after pcall'\r\n    assert.is_equal(normpath(expected), errmsg)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 337,
    "text": "it('when running a non-compiling testfile', function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --pattern=cl_compile_fail.lua$')\r\n    local errmsg = result:match('(Error %-> .-:%d+:) ')\r\n    local expected = \"Error -> spec/cl_compile_fail.lua:3:\"\r\n    assert.is_equal(normpath(expected), errmsg)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 338,
    "text": "it('when a testfile throws errors', function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --pattern=cl_execute_fail.lua$')\r\n    local err = result:match('(Error %-> .-)\\n')\r\n    local errmsg = result:match('\\n(spec[/\\\\]cl_execute_fail%.lua:%d+:.-)\\n')\r\n    local expectedErr = 'Error -> spec/cl_execute_fail.lua @ 4'\r\n    local expectedMsg = 'spec/cl_execute_fail.lua:4: This compiles fine, but throws an error when being run'\r\n    assert.is_equal(normpath(expectedErr), err)\r\n    assert.is_equal(normpath(expectedMsg), errmsg)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 339,
    "text": "it('when output library not found', function()\r\n    local _, _, result, rerr = executeBusted('--pattern=cl_two_failures.lua$ --output=not_found_here 2>&1')\r\n    local errmsg = rerr:match('(.-)\\n')\r\n    local expected = 'busted: error: Cannot load output library: not_found_here'\r\n    assert.is_equal(expected, errmsg)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 340,
    "text": "it('when helper script not found', function()\r\n    local _, _, result, rerr = executeBusted('--output=plainTerminal --pattern=cl_two_failures.lua$ --helper=not_found_here 2>&1')\r\n    local err = result:match('Error %-> .-:%d+: (.-)\\n')\r\n    local errmsg = rerr:match('(.-)\\n')\r\n    local expectedErr = \"module 'not_found_here' not found:\"\r\n    local expectedMsg = 'busted: error: Cannot load helper script: not_found_here'\r\n    assert.is_equal(expectedErr, err)\r\n    assert.is_equal(expectedMsg, errmsg)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 341,
    "text": "it('when helper lua script not found', function()\r\n    local _, _, result, rerr = executeBusted('--output=plainTerminal --pattern=cl_two_failures.lua$ --helper=not_found_here.lua 2>&1')\r\n    local err = result:match('Error %-> (.-)\\n')\r\n    local errmsg = rerr:match('(.-)\\n')\r\n    local expectedErr = 'cannot open not_found_here.lua: No such file or directory'\r\n    local expectedMsg = 'busted: error: Cannot load helper script: not_found_here.lua'\r\n    assert.is_equal(expectedErr, err)\r\n    assert.is_equal(expectedMsg, errmsg)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 342,
    "text": "it('when test file not found', function()\r\n    local _, _, result = executeBusted('--output=plainTerminal does_not_exist.lua')\r\n    local errmsg = result:match('Error %-> (.-)\\n')\r\n    local expected = 'Cannot find file or directory: does_not_exist.lua'\r\n    assert.is_equal(expected, errmsg)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 343,
    "text": "it('when test directory not found', function()\r\n    local _, _, result = executeBusted('--output=plainTerminal does_not_exist')\r\n    local errmsg = result:match('Error %-> (.-)\\n')\r\n    local expected = 'Cannot find file or directory: does_not_exist'\r\n    assert.is_equal(expected, errmsg)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 344,
    "text": "it('when no test files matching Lua pattern', function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --pattern=this_filename_does_simply_not_exist$')\r\n    local errmsg = result:match('Error %-> (.-)\\n')\r\n    local expected = 'No test files found matching Lua pattern: this_filename_does_simply_not_exist$'\r\n    assert.is_equal(expected, errmsg)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 345,
    "text": "it('when __gc metamethod throws error', function()\r\n    local noGC = xpcall(function()\r\n      setmetatable({}, { __gc = function() error('gc error') end})\r\n      collectgarbage()\r\n      collectgarbage()\r\n    end, function() end)\r\n    if noGC then pending('no __gc metamethod support') end\r\n\r\n    local success, errcnt, result = executeBusted('--pattern=cl_gc_error.lua$')\r\n    local err = result:match('Error %-> (.-)\\n')\r\n    local errmsg = result:match('\\n([^\\n]-%(spec[/\\\\].-%))\\n')\r\n    local expected = 'error in __gc metamethod (spec/cl_gc_error.lua:5: gc error)'\r\n    assert.is_false(success)\r\n    assert.is_equal(1, errcnt)\r\n    assert.is_truthy(err)\r\n    assert.is_equal(normpath(expected), errmsg)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 346,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 347,
    "text": "function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --pattern=cl_moonscript_error_messages.moon$ --tags=fail')\r\n    local err = result:match('(Failure %-> .-)\\n')\r\n    local errmsg = result:match('\\n(spec[/\\\\].-)\\n')\r\n    local expectedErr = \"Failure -> spec/cl_moonscript_error_messages.moon @ 4\"\r\n    local expectedMsg = \"spec/cl_moonscript_error_messages.moon:5: Expected objects to be equal.\"\r\n    assert.is_equal(normpath(expectedErr), err)\r\n    assert.is_equal(normpath(expectedMsg), errmsg)\r\n  end",
    "type": "function"
  }, {
    "id": 348,
    "text": "local _, _, result = executeBusted('--output=plainTerminal --pattern=cl_moonscript_error_messages.moon$ --tags=fail')",
    "type": "statement:localassign"
  }, {
    "id": 349,
    "text": "local err = result:match('(Failure %-> .-)\\n')",
    "type": "statement:localassign"
  }, {
    "id": 350,
    "text": "local expectedErr = \"Failure -> spec/cl_moonscript_error_messages.moon @ 4\"",
    "type": "statement:localassign"
  }, {
    "id": 351,
    "text": "local expectedMsg = \"spec/cl_moonscript_error_messages.moon:5: Expected objects to be equal.\"",
    "type": "statement:localassign"
  }, {
    "id": 352,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 353,
    "text": "function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --pattern=cl_moonscript_error_messages.moon$ --tags=string')\r\n    local err = result:match('(Error %-> .-)\\n')\r\n    local errmsg = result:match('\\n(spec[/\\\\].-)\\n')\r\n    local expectedErr = \"Error -> spec/cl_moonscript_error_messages.moon @ 16\"\r\n    local expectedMsg = \"spec/cl_moonscript_error_messages.moon:17: error message\"\r\n    assert.is_equal(normpath(expectedErr), err)\r\n    assert.is_equal(normpath(expectedMsg), errmsg)\r\n  end",
    "type": "function"
  }, {
    "id": 354,
    "text": "local _, _, result = executeBusted('--output=plainTerminal --pattern=cl_moonscript_error_messages.moon$ --tags=string')",
    "type": "statement:localassign"
  }, {
    "id": 355,
    "text": "local expectedErr = \"Error -> spec/cl_moonscript_error_messages.moon @ 16\"",
    "type": "statement:localassign"
  }, {
    "id": 356,
    "text": "local expectedMsg = \"spec/cl_moonscript_error_messages.moon:17: error message\"",
    "type": "statement:localassign"
  }, {
    "id": 357,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 358,
    "text": "function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --tags=table --pattern=cl_moonscript_error_messages.moon$')\r\n    local errmsg = result:match('\\n(spec[/\\\\].-)\\n')\r\n    local expected = 'spec/cl_moonscript_error_messages.moon:9: {'\r\n    assert.is_equal(normpath(expected), errmsg)\r\n  end",
    "type": "function"
  }, {
    "id": 359,
    "text": "local _, _, result = executeBusted('--output=plainTerminal --tags=table --pattern=cl_moonscript_error_messages.moon$')",
    "type": "statement:localassign"
  }, {
    "id": 360,
    "text": "local expected = 'spec/cl_moonscript_error_messages.moon:9: {'",
    "type": "statement:localassign"
  }, {
    "id": 361,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 362,
    "text": "function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --tags=nil --pattern=cl_moonscript_error_messages.moon$')\r\n    local errmsg = result:match('\\n(spec[/\\\\].-)\\n')\r\n    local expected = 'spec/cl_moonscript_error_messages.moon:13: Nil error'\r\n    assert.is_equal(normpath(expected), errmsg)\r\n  end",
    "type": "function"
  }, {
    "id": 363,
    "text": "local _, _, result = executeBusted('--output=plainTerminal --tags=nil --pattern=cl_moonscript_error_messages.moon$')",
    "type": "statement:localassign"
  }, {
    "id": 364,
    "text": "local expected = 'spec/cl_moonscript_error_messages.moon:13: Nil error'",
    "type": "statement:localassign"
  }, {
    "id": 365,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 366,
    "text": "function()\r\n  it('when assertion fails', function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --pattern=cl_moonscript_error_messages.moon$ --tags=fail')\r\n    local err = result:match('(Failure %-> .-)\\n')\r\n    local errmsg = result:match('\\n(spec[/\\\\].-)\\n')\r\n    local expectedErr = \"Failure -> spec/cl_moonscript_error_messages.moon @ 4\"\r\n    local expectedMsg = \"spec/cl_moonscript_error_messages.moon:5: Expected objects to be equal.\"\r\n    assert.is_equal(normpath(expectedErr), err)\r\n    assert.is_equal(normpath(expectedMsg), errmsg)\r\n  end)\r\n\r\n  it('when throwing string errors', function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --pattern=cl_moonscript_error_messages.moon$ --tags=string')\r\n    local err = result:match('(Error %-> .-)\\n')\r\n    local errmsg = result:match('\\n(spec[/\\\\].-)\\n')\r\n    local expectedErr = \"Error -> spec/cl_moonscript_error_messages.moon @ 16\"\r\n    local expectedMsg = \"spec/cl_moonscript_error_messages.moon:17: error message\"\r\n    assert.is_equal(normpath(expectedErr), err)\r\n    assert.is_equal(normpath(expectedMsg), errmsg)\r\n  end)\r\n\r\n  it('when throwing an error table', function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --tags=table --pattern=cl_moonscript_error_messages.moon$')\r\n    local errmsg = result:match('\\n(spec[/\\\\].-)\\n')\r\n    local expected = 'spec/cl_moonscript_error_messages.moon:9: {'\r\n    assert.is_equal(normpath(expected), errmsg)\r\n  end)\r\n\r\n  it('when throwing a nil error', function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --tags=nil --pattern=cl_moonscript_error_messages.moon$')\r\n    local errmsg = result:match('\\n(spec[/\\\\].-)\\n')\r\n    local expected = 'spec/cl_moonscript_error_messages.moon:13: Nil error'\r\n    assert.is_equal(normpath(expected), errmsg)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 367,
    "text": "it('when assertion fails', function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --pattern=cl_moonscript_error_messages.moon$ --tags=fail')\r\n    local err = result:match('(Failure %-> .-)\\n')\r\n    local errmsg = result:match('\\n(spec[/\\\\].-)\\n')\r\n    local expectedErr = \"Failure -> spec/cl_moonscript_error_messages.moon @ 4\"\r\n    local expectedMsg = \"spec/cl_moonscript_error_messages.moon:5: Expected objects to be equal.\"\r\n    assert.is_equal(normpath(expectedErr), err)\r\n    assert.is_equal(normpath(expectedMsg), errmsg)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 368,
    "text": "it('when throwing string errors', function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --pattern=cl_moonscript_error_messages.moon$ --tags=string')\r\n    local err = result:match('(Error %-> .-)\\n')\r\n    local errmsg = result:match('\\n(spec[/\\\\].-)\\n')\r\n    local expectedErr = \"Error -> spec/cl_moonscript_error_messages.moon @ 16\"\r\n    local expectedMsg = \"spec/cl_moonscript_error_messages.moon:17: error message\"\r\n    assert.is_equal(normpath(expectedErr), err)\r\n    assert.is_equal(normpath(expectedMsg), errmsg)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 369,
    "text": "it('when throwing an error table', function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --tags=table --pattern=cl_moonscript_error_messages.moon$')\r\n    local errmsg = result:match('\\n(spec[/\\\\].-)\\n')\r\n    local expected = 'spec/cl_moonscript_error_messages.moon:9: {'\r\n    assert.is_equal(normpath(expected), errmsg)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 370,
    "text": "it('when throwing a nil error', function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --tags=nil --pattern=cl_moonscript_error_messages.moon$')\r\n    local errmsg = result:match('\\n(spec[/\\\\].-)\\n')\r\n    local expected = 'spec/cl_moonscript_error_messages.moon:13: Nil error'\r\n    assert.is_equal(normpath(expected), errmsg)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 371,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 372,
    "text": "function()\r\n    local success, errcnt\r\n    success, errcnt = executeBusted('--pattern=cl_pending.lua$')\r\n    assert.is_true(success)\r\n    assert.is_equal(0, errcnt)\r\n  end",
    "type": "function"
  }, {
    "id": 373,
    "text": "local success, errcnt",
    "type": "statement:localassign"
  }, {
    "id": 374,
    "text": "success, errcnt = executeBusted('--pattern=cl_pending.lua$')",
    "type": "statement:assign"
  }, {
    "id": 375,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 376,
    "text": "function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --pattern=cl_pending.lua$')\r\n    local line1 = result:match('.-\\n')\r\n    local _, pendingDots = line1:gsub('%.', '')\r\n    local _, numPending = result:gsub('Pending %-> .-\\n', '')\r\n    assert.is_equal(2, pendingDots)\r\n    assert.is_equal(2, numPending)\r\n  end",
    "type": "function"
  }, {
    "id": 377,
    "text": "local _, _, result = executeBusted('--output=plainTerminal --pattern=cl_pending.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 378,
    "text": "local line1 = result:match('.-\\n')",
    "type": "statement:localassign"
  }, {
    "id": 379,
    "text": "local _, pendingDots = line1:gsub('%.', '')",
    "type": "statement:localassign"
  }, {
    "id": 380,
    "text": "local _, numPending = result:gsub('Pending %-> .-\\n', '')",
    "type": "statement:localassign"
  }, {
    "id": 381,
    "text": "assert.is_equal(2, pendingDots)",
    "type": "statement:functioncall"
  }, {
    "id": 382,
    "text": "assert.is_equal(2, numPending)",
    "type": "statement:functioncall"
  }, {
    "id": 383,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 384,
    "text": "function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --suppress-pending --pattern=cl_pending.lua$')\r\n    local line1 = result:match('.-\\n')\r\n    local _, pendingDots = line1:gsub('%.', '')\r\n    local _, numPending = result:gsub('Pending %-> .-\\n', '')\r\n    assert.is_equal(0, pendingDots)\r\n    assert.is_equal(0, numPending)\r\n  end",
    "type": "function"
  }, {
    "id": 385,
    "text": "local _, _, result = executeBusted('--output=plainTerminal --suppress-pending --pattern=cl_pending.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 386,
    "text": "assert.is_equal(0, pendingDots)",
    "type": "statement:functioncall"
  }, {
    "id": 387,
    "text": "assert.is_equal(0, numPending)",
    "type": "statement:functioncall"
  }, {
    "id": 388,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 389,
    "text": "function()\r\n  it('skips tests inside pending scope', function()\r\n    local success, errcnt\r\n    success, errcnt = executeBusted('--pattern=cl_pending.lua$')\r\n    assert.is_true(success)\r\n    assert.is_equal(0, errcnt)\r\n  end)\r\n\r\n  it('detects tests as pending', function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --pattern=cl_pending.lua$')\r\n    local line1 = result:match('.-\\n')\r\n    local _, pendingDots = line1:gsub('%.', '')\r\n    local _, numPending = result:gsub('Pending %-> .-\\n', '')\r\n    assert.is_equal(2, pendingDots)\r\n    assert.is_equal(2, numPending)\r\n  end)\r\n\r\n  it('--suppress-pending option is honored', function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --suppress-pending --pattern=cl_pending.lua$')\r\n    local line1 = result:match('.-\\n')\r\n    local _, pendingDots = line1:gsub('%.', '')\r\n    local _, numPending = result:gsub('Pending %-> .-\\n', '')\r\n    assert.is_equal(0, pendingDots)\r\n    assert.is_equal(0, numPending)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 390,
    "text": "it('skips tests inside pending scope', function()\r\n    local success, errcnt\r\n    success, errcnt = executeBusted('--pattern=cl_pending.lua$')\r\n    assert.is_true(success)\r\n    assert.is_equal(0, errcnt)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 391,
    "text": "it('detects tests as pending', function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --pattern=cl_pending.lua$')\r\n    local line1 = result:match('.-\\n')\r\n    local _, pendingDots = line1:gsub('%.', '')\r\n    local _, numPending = result:gsub('Pending %-> .-\\n', '')\r\n    assert.is_equal(2, pendingDots)\r\n    assert.is_equal(2, numPending)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 392,
    "text": "it('--suppress-pending option is honored', function()\r\n    local _, _, result = executeBusted('--output=plainTerminal --suppress-pending --pattern=cl_pending.lua$')\r\n    local line1 = result:match('.-\\n')\r\n    local _, pendingDots = line1:gsub('%.', '')\r\n    local _, numPending = result:gsub('Pending %-> .-\\n', '')\r\n    assert.is_equal(0, pendingDots)\r\n    assert.is_equal(0, numPending)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 393,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 394,
    "text": "function()\r\n    local success, errcnt\r\n    success, errcnt = executeBusted('--seed=12345 --pattern=cl_random_seed.lua$')\r\n    assert.is_true(success)\r\n    assert.is_equal(0, errcnt)\r\n  end",
    "type": "function"
  }, {
    "id": 395,
    "text": "success, errcnt = executeBusted('--seed=12345 --pattern=cl_random_seed.lua$')",
    "type": "statement:assign"
  }, {
    "id": 396,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 397,
    "text": "function()\r\n    local success, errcnt\r\n    success, errcnt = executeBusted('--seed=abcd --pattern=cl_random_seed.lua$')\r\n    assert.is_false(success)\r\n  end",
    "type": "function"
  }, {
    "id": 398,
    "text": "success, errcnt = executeBusted('--seed=abcd --pattern=cl_random_seed.lua$')",
    "type": "statement:assign"
  }, {
    "id": 399,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 400,
    "text": "function()\r\n    local _, _, result = executeBusted('--seed=789 --pattern=cl_random_seed.lua$')\r\n    local seed = result:match('Random seed: (%d+)\\n')\r\n    assert.is_equal(789, tonumber(seed))\r\n  end",
    "type": "function"
  }, {
    "id": 401,
    "text": "local _, _, result = executeBusted('--seed=789 --pattern=cl_random_seed.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 402,
    "text": "local seed = result:match('Random seed: (%d+)\\n')",
    "type": "statement:localassign"
  }, {
    "id": 403,
    "text": "assert.is_equal(789, tonumber(seed))",
    "type": "statement:functioncall"
  }, {
    "id": 404,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 405,
    "text": "function()\r\n    local _, _, result = executeBusted('--seed=789 --pattern=cl_two_failures.lua$')\r\n    local seed = result:match('Random seed:')\r\n    assert.is_equal(nil, seed)\r\n  end",
    "type": "function"
  }, {
    "id": 406,
    "text": "local _, _, result = executeBusted('--seed=789 --pattern=cl_two_failures.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 407,
    "text": "local seed = result:match('Random seed:')",
    "type": "statement:localassign"
  }, {
    "id": 408,
    "text": "assert.is_equal(nil, seed)",
    "type": "statement:functioncall"
  }, {
    "id": 409,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 410,
    "text": "function()\r\n  it('test seed value', function()\r\n    local success, errcnt\r\n    success, errcnt = executeBusted('--seed=12345 --pattern=cl_random_seed.lua$')\r\n    assert.is_true(success)\r\n    assert.is_equal(0, errcnt)\r\n  end)\r\n\r\n  it('test invalid seed value exits with error', function()\r\n    local success, errcnt\r\n    success, errcnt = executeBusted('--seed=abcd --pattern=cl_random_seed.lua$')\r\n    assert.is_false(success)\r\n  end)\r\n\r\n  it('test failure outputs random seed value', function()\r\n    local _, _, result = executeBusted('--seed=789 --pattern=cl_random_seed.lua$')\r\n    local seed = result:match('Random seed: (%d+)\\n')\r\n    assert.is_equal(789, tonumber(seed))\r\n  end)\r\n\r\n  it('test non-randomized failure does not output seed value', function()\r\n    local _, _, result = executeBusted('--seed=789 --pattern=cl_two_failures.lua$')\r\n    local seed = result:match('Random seed:')\r\n    assert.is_equal(nil, seed)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 411,
    "text": "it('test seed value', function()\r\n    local success, errcnt\r\n    success, errcnt = executeBusted('--seed=12345 --pattern=cl_random_seed.lua$')\r\n    assert.is_true(success)\r\n    assert.is_equal(0, errcnt)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 412,
    "text": "it('test invalid seed value exits with error', function()\r\n    local success, errcnt\r\n    success, errcnt = executeBusted('--seed=abcd --pattern=cl_random_seed.lua$')\r\n    assert.is_false(success)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 413,
    "text": "it('test failure outputs random seed value', function()\r\n    local _, _, result = executeBusted('--seed=789 --pattern=cl_random_seed.lua$')\r\n    local seed = result:match('Random seed: (%d+)\\n')\r\n    assert.is_equal(789, tonumber(seed))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 414,
    "text": "it('test non-randomized failure does not output seed value', function()\r\n    local _, _, result = executeBusted('--seed=789 --pattern=cl_two_failures.lua$')\r\n    local seed = result:match('Random seed:')\r\n    assert.is_equal(nil, seed)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 415,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 416,
    "text": "function()\r\n      local success, errcnt = executeBusted(opt .. ' --pattern=cl_randomize.lua$')\r\n      assert.is_true(success)\r\n      assert.is_equal(0, errcnt)\r\n    end",
    "type": "function"
  }, {
    "id": 417,
    "text": "local success, errcnt = executeBusted(opt .. ' --pattern=cl_randomize.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 418,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 419,
    "text": "function()\r\n  for _, opt in ipairs({ '--shuffle', '--shuffle-tests' }) do\r\n    it('forces test shuffling for non-randomized tests, ' .. opt, function()\r\n      local success, errcnt = executeBusted(opt .. ' --pattern=cl_randomize.lua$')\r\n      assert.is_true(success)\r\n      assert.is_equal(0, errcnt)\r\n    end)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 420,
    "text": "for _, opt in ipairs({ '--shuffle', '--shuffle-tests' }) do\r\n    it('forces test shuffling for non-randomized tests, ' .. opt, function()\r\n      local success, errcnt = executeBusted(opt .. ' --pattern=cl_randomize.lua$')\r\n      assert.is_true(success)\r\n      assert.is_equal(0, errcnt)\r\n    end)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 421,
    "text": "it('forces test shuffling for non-randomized tests, ' .. opt, function()\r\n      local success, errcnt = executeBusted(opt .. ' --pattern=cl_randomize.lua$')\r\n      assert.is_true(success)\r\n      assert.is_equal(0, errcnt)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 422,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 423,
    "text": "function()\r\n      local success, errcnt = executeBusted(opt .. ' --pattern=cl_sort.lua$')\r\n      assert.is_true(success)\r\n      assert.is_equal(0, errcnt)\r\n    end",
    "type": "function"
  }, {
    "id": 424,
    "text": "local success, errcnt = executeBusted(opt .. ' --pattern=cl_sort.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 425,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 426,
    "text": "function()\r\n  for _, opt in ipairs({ '--sort', '--sort-tests' }) do\r\n    it('sorts tests by name, ' .. opt, function()\r\n      local success, errcnt = executeBusted(opt .. ' --pattern=cl_sort.lua$')\r\n      assert.is_true(success)\r\n      assert.is_equal(0, errcnt)\r\n    end)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 427,
    "text": "for _, opt in ipairs({ '--sort', '--sort-tests' }) do\r\n    it('sorts tests by name, ' .. opt, function()\r\n      local success, errcnt = executeBusted(opt .. ' --pattern=cl_sort.lua$')\r\n      assert.is_true(success)\r\n      assert.is_equal(0, errcnt)\r\n    end)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 428,
    "text": "it('sorts tests by name, ' .. opt, function()\r\n      local success, errcnt = executeBusted(opt .. ' --pattern=cl_sort.lua$')\r\n      assert.is_true(success)\r\n      assert.is_equal(0, errcnt)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 429,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 430,
    "text": "function()\r\n    local success, errcnt = executeBusted('--repeat=2 --pattern=cl_two_failures.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(4, errcnt)\r\n  end",
    "type": "function"
  }, {
    "id": 431,
    "text": "local success, errcnt = executeBusted('--repeat=2 --pattern=cl_two_failures.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 432,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 433,
    "text": "function()\r\n    local success, errcnt\r\n    success, errcnt = executeBusted('--repeat=abc --pattern=cl_success.lua$')\r\n    assert.is_false(success)\r\n  end",
    "type": "function"
  }, {
    "id": 434,
    "text": "success, errcnt = executeBusted('--repeat=abc --pattern=cl_success.lua$')",
    "type": "statement:assign"
  }, {
    "id": 435,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 436,
    "text": "function()\r\n  it('forces tests to repeat n times', function()\r\n    local success, errcnt = executeBusted('--repeat=2 --pattern=cl_two_failures.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(4, errcnt)\r\n  end)\r\n\r\n  it('exits with error when repeat is invalid', function()\r\n    local success, errcnt\r\n    success, errcnt = executeBusted('--repeat=abc --pattern=cl_success.lua$')\r\n    assert.is_false(success)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 437,
    "text": "it('forces tests to repeat n times', function()\r\n    local success, errcnt = executeBusted('--repeat=2 --pattern=cl_two_failures.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(4, errcnt)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 438,
    "text": "it('exits with error when repeat is invalid', function()\r\n    local success, errcnt\r\n    success, errcnt = executeBusted('--repeat=abc --pattern=cl_success.lua$')\r\n    assert.is_false(success)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 439,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 440,
    "text": "function()\r\n    local success, errcnt = executeBusted('--no-keep-going --pattern=cl_two_failures.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(1, errcnt)\r\n  end",
    "type": "function"
  }, {
    "id": 441,
    "text": "local success, errcnt = executeBusted('--no-keep-going --pattern=cl_two_failures.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 442,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 443,
    "text": "function()\r\n  it('skips all tests after first error', function()\r\n    local success, errcnt = executeBusted('--no-keep-going --pattern=cl_two_failures.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(1, errcnt)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 444,
    "text": "it('skips all tests after first error', function()\r\n    local success, errcnt = executeBusted('--no-keep-going --pattern=cl_two_failures.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(1, errcnt)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 445,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 446,
    "text": "function()\r\n    local success, errcnt = executeBusted('--no-recursive --pattern=cl_two_failures.lua$ .')\r\n    assert.is_false(success)\r\n    assert.is_equal(1, errcnt)\r\n  end",
    "type": "function"
  }, {
    "id": 447,
    "text": "local success, errcnt = executeBusted('--no-recursive --pattern=cl_two_failures.lua$ .')",
    "type": "statement:localassign"
  }, {
    "id": 448,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 449,
    "text": "function()\r\n  it('does not run any tests in subdirectories', function()\r\n    local success, errcnt = executeBusted('--no-recursive --pattern=cl_two_failures.lua$ .')\r\n    assert.is_false(success)\r\n    assert.is_equal(1, errcnt)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 450,
    "text": "it('does not run any tests in subdirectories', function()\r\n    local success, errcnt = executeBusted('--no-recursive --pattern=cl_two_failures.lua$ .')\r\n    assert.is_false(success)\r\n    assert.is_equal(1, errcnt)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 451,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 452,
    "text": "function()\r\n    local success, errcnt = executeBusted('--no-auto-insulate --pattern=insulate_file.*.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(1, errcnt)\r\n  end",
    "type": "function"
  }, {
    "id": 453,
    "text": "local success, errcnt = executeBusted('--no-auto-insulate --pattern=insulate_file.*.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 454,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 455,
    "text": "function()\r\n  it('does not insulate test files', function()\r\n    local success, errcnt = executeBusted('--no-auto-insulate --pattern=insulate_file.*.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(1, errcnt)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 456,
    "text": "it('does not insulate test files', function()\r\n    local success, errcnt = executeBusted('--no-auto-insulate --pattern=insulate_file.*.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(1, errcnt)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 457,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 458,
    "text": "function()\r\n    local _, _, result = executeBusted('--output=spec/cl_output_handler.lua --pattern=cl_success.lua$')\r\n    local status = result:match('^%[(.-)]')\r\n    assert.is_equal(' success', status)\r\n  end",
    "type": "function"
  }, {
    "id": 459,
    "text": "local _, _, result = executeBusted('--output=spec/cl_output_handler.lua --pattern=cl_success.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 460,
    "text": "local status = result:match('^%[(.-)]')",
    "type": "statement:localassign"
  }, {
    "id": 461,
    "text": "assert.is_equal(' success', status)",
    "type": "statement:functioncall"
  }, {
    "id": 462,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 463,
    "text": "function()\r\n    local _, _, result = executeBusted('--output=spec/cl_output_handler.lua -Xoutput \"--time\" --pattern=cl_success.lua$')\r\n    local timestamp = result:match('^%[(.-)]')\r\n    assert.is_equal('Fri Jan 02 10:17:36 1970', timestamp)\r\n  end",
    "type": "function"
  }, {
    "id": 464,
    "text": "local _, _, result = executeBusted('--output=spec/cl_output_handler.lua -Xoutput \"--time\" --pattern=cl_success.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 465,
    "text": "local timestamp = result:match('^%[(.-)]')",
    "type": "statement:localassign"
  }, {
    "id": 466,
    "text": "assert.is_equal('Fri Jan 02 10:17:36 1970', timestamp)",
    "type": "statement:functioncall"
  }, {
    "id": 467,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 468,
    "text": "function()\r\n    local _, _, result = executeBusted('--output=spec/cl_output_handler.lua -Xoutput \"--time,--time-format=!%H:%M:%S\" --pattern=cl_success.lua$')\r\n    local timestamp = result:match('^%[(.-)]')\r\n    assert.is_equal('10:17:36', timestamp)\r\n  end",
    "type": "function"
  }, {
    "id": 469,
    "text": "local _, _, result = executeBusted('--output=spec/cl_output_handler.lua -Xoutput \"--time,--time-format=!%H:%M:%S\" --pattern=cl_success.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 470,
    "text": "assert.is_equal('10:17:36', timestamp)",
    "type": "statement:functioncall"
  }, {
    "id": 471,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 472,
    "text": "function()\r\n    local _, _, result = executeBusted('--output=spec/cl_output_handler.lua -Xoutput \"--time\" -Xoutput \"--time-format=!%H:%M:%S\" --pattern=cl_success.lua$')\r\n    local timestamp = result:match('^%[(.-)]')\r\n    assert.is_equal('10:17:36', timestamp)\r\n  end",
    "type": "function"
  }, {
    "id": 473,
    "text": "local _, _, result = executeBusted('--output=spec/cl_output_handler.lua -Xoutput \"--time\" -Xoutput \"--time-format=!%H:%M:%S\" --pattern=cl_success.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 474,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 475,
    "text": "function()\r\n  it('forwards no options to output handler when no options specified', function()\r\n    local _, _, result = executeBusted('--output=spec/cl_output_handler.lua --pattern=cl_success.lua$')\r\n    local status = result:match('^%[(.-)]')\r\n    assert.is_equal(' success', status)\r\n  end)\r\n\r\n  it('forwards single option to output handler', function()\r\n    local _, _, result = executeBusted('--output=spec/cl_output_handler.lua -Xoutput \"--time\" --pattern=cl_success.lua$')\r\n    local timestamp = result:match('^%[(.-)]')\r\n    assert.is_equal('Fri Jan 02 10:17:36 1970', timestamp)\r\n  end)\r\n\r\n  it('forwards multiple options to output handler', function()\r\n    local _, _, result = executeBusted('--output=spec/cl_output_handler.lua -Xoutput \"--time,--time-format=!%H:%M:%S\" --pattern=cl_success.lua$')\r\n    local timestamp = result:match('^%[(.-)]')\r\n    assert.is_equal('10:17:36', timestamp)\r\n  end)\r\n\r\n  it('forwards multiple options to output handler using multiple -Xoutput', function()\r\n    local _, _, result = executeBusted('--output=spec/cl_output_handler.lua -Xoutput \"--time\" -Xoutput \"--time-format=!%H:%M:%S\" --pattern=cl_success.lua$')\r\n    local timestamp = result:match('^%[(.-)]')\r\n    assert.is_equal('10:17:36', timestamp)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 476,
    "text": "it('forwards no options to output handler when no options specified', function()\r\n    local _, _, result = executeBusted('--output=spec/cl_output_handler.lua --pattern=cl_success.lua$')\r\n    local status = result:match('^%[(.-)]')\r\n    assert.is_equal(' success', status)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 477,
    "text": "it('forwards single option to output handler', function()\r\n    local _, _, result = executeBusted('--output=spec/cl_output_handler.lua -Xoutput \"--time\" --pattern=cl_success.lua$')\r\n    local timestamp = result:match('^%[(.-)]')\r\n    assert.is_equal('Fri Jan 02 10:17:36 1970', timestamp)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 478,
    "text": "it('forwards multiple options to output handler', function()\r\n    local _, _, result = executeBusted('--output=spec/cl_output_handler.lua -Xoutput \"--time,--time-format=!%H:%M:%S\" --pattern=cl_success.lua$')\r\n    local timestamp = result:match('^%[(.-)]')\r\n    assert.is_equal('10:17:36', timestamp)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 479,
    "text": "it('forwards multiple options to output handler using multiple -Xoutput', function()\r\n    local _, _, result = executeBusted('--output=spec/cl_output_handler.lua -Xoutput \"--time\" -Xoutput \"--time-format=!%H:%M:%S\" --pattern=cl_success.lua$')\r\n    local timestamp = result:match('^%[(.-)]')\r\n    assert.is_equal('10:17:36', timestamp)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 480,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 481,
    "text": "function()\r\n    local success = executeBusted('--helper=spec/cl_helper_script.lua --pattern=cl_success.lua$')\r\n    assert.is_true(success)\r\n  end",
    "type": "function"
  }, {
    "id": 482,
    "text": "local success = executeBusted('--helper=spec/cl_helper_script.lua --pattern=cl_success.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 483,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 484,
    "text": "function()\r\n    local success, errcnt = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-before-each\" --pattern=cl_success.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(1, errcnt)\r\n  end",
    "type": "function"
  }, {
    "id": 485,
    "text": "local success, errcnt = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-before-each\" --pattern=cl_success.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 486,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 487,
    "text": "function()\r\n    local success, errcnt = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-before-each,--fail-after-each\" --pattern=cl_success.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(2, errcnt)\r\n  end",
    "type": "function"
  }, {
    "id": 488,
    "text": "local success, errcnt = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-before-each,--fail-after-each\" --pattern=cl_success.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 489,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 490,
    "text": "function()\r\n    local success, errcnt = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-before-each\" -Xhelper \"--fail-after-each\" --pattern=cl_success.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(2, errcnt)\r\n  end",
    "type": "function"
  }, {
    "id": 491,
    "text": "local success, errcnt = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-before-each\" -Xhelper \"--fail-after-each\" --pattern=cl_success.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 492,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 493,
    "text": "function()\r\n  it('forwards no options to helper script when no options specified', function()\r\n    local success = executeBusted('--helper=spec/cl_helper_script.lua --pattern=cl_success.lua$')\r\n    assert.is_true(success)\r\n  end)\r\n\r\n  it('forwards single option to helper script', function()\r\n    local success, errcnt = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-before-each\" --pattern=cl_success.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(1, errcnt)\r\n  end)\r\n\r\n  it('forwards multiple options to helper script', function()\r\n    local success, errcnt = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-before-each,--fail-after-each\" --pattern=cl_success.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(2, errcnt)\r\n  end)\r\n\r\n  it('forwards multiple options to helper script using multiple -Xhelper', function()\r\n    local success, errcnt = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-before-each\" -Xhelper \"--fail-after-each\" --pattern=cl_success.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(2, errcnt)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 494,
    "text": "it('forwards no options to helper script when no options specified', function()\r\n    local success = executeBusted('--helper=spec/cl_helper_script.lua --pattern=cl_success.lua$')\r\n    assert.is_true(success)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 495,
    "text": "it('forwards single option to helper script', function()\r\n    local success, errcnt = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-before-each\" --pattern=cl_success.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(1, errcnt)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 496,
    "text": "it('forwards multiple options to helper script', function()\r\n    local success, errcnt = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-before-each,--fail-after-each\" --pattern=cl_success.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(2, errcnt)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 497,
    "text": "it('forwards multiple options to helper script using multiple -Xhelper', function()\r\n    local success, errcnt = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-before-each\" -Xhelper \"--fail-after-each\" --pattern=cl_success.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(2, errcnt)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 498,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 499,
    "text": "function()\r\n    local success, errcnt = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-setup\" --pattern=cl_two_failures.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(1, errcnt)\r\n  end",
    "type": "function"
  }, {
    "id": 500,
    "text": "local success, errcnt = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-setup\" --pattern=cl_two_failures.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 501,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 502,
    "text": "function()\r\n    local success, errcnt = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-teardown\" --pattern=cl_two_failures.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(3, errcnt)\r\n  end",
    "type": "function"
  }, {
    "id": 503,
    "text": "local success, errcnt = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-teardown\" --pattern=cl_two_failures.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 504,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 505,
    "text": "function()\r\n    local success, errcnt = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-setup,--fail-teardown\" --pattern=cl_success.lua$ --repeat=2')\r\n    assert.is_false(success)\r\n    assert.is_equal(4, errcnt)\r\n  end",
    "type": "function"
  }, {
    "id": 506,
    "text": "local success, errcnt = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-setup,--fail-teardown\" --pattern=cl_success.lua$ --repeat=2')",
    "type": "statement:localassign"
  }, {
    "id": 507,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 508,
    "text": "function()\r\n    local success, errcnt = executeBusted('--lazy --helper=spec/cl_helper_script.lua -Xhelper \"--fail-setup,--fail-teardown\" --pattern=cl_success.lua$ --repeat=2')\r\n    assert.is_false(success)\r\n    assert.is_equal(4, errcnt)\r\n  end",
    "type": "function"
  }, {
    "id": 509,
    "text": "local success, errcnt = executeBusted('--lazy --helper=spec/cl_helper_script.lua -Xhelper \"--fail-setup,--fail-teardown\" --pattern=cl_success.lua$ --repeat=2')",
    "type": "statement:localassign"
  }, {
    "id": 510,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 511,
    "text": "function()\r\n    local success, errcnt, result = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-suite-start,--fail-suite-reset\" --pattern=cl_success.lua$ --repeat=2')\r\n    assert.is_false(success)\r\n    assert.is_equal(3, errcnt)\r\n  end",
    "type": "function"
  }, {
    "id": 512,
    "text": "local success, errcnt, result = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-suite-start,--fail-suite-reset\" --pattern=cl_success.lua$ --repeat=2')",
    "type": "statement:localassign"
  }, {
    "id": 513,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 514,
    "text": "function()\r\n    local success, errcnt = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-suite-end\" --pattern=cl_success.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(0, errcnt)\r\n  end",
    "type": "function"
  }, {
    "id": 515,
    "text": "local success, errcnt = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-suite-end\" --pattern=cl_success.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 516,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 517,
    "text": "function()\r\n    local success, errcnt = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-file-start,--fail-file-end\" --pattern=cl_success.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(2, errcnt)\r\n  end",
    "type": "function"
  }, {
    "id": 518,
    "text": "local success, errcnt = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-file-start,--fail-file-end\" --pattern=cl_success.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 519,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 520,
    "text": "function()\r\n    local success, errcnt = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-describe-start,--fail-describe-end\" --pattern=cl_success.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(2, errcnt)\r\n  end",
    "type": "function"
  }, {
    "id": 521,
    "text": "local success, errcnt = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-describe-start,--fail-describe-end\" --pattern=cl_success.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 522,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 523,
    "text": "function()\r\n    local success, errcnt = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-test-start,--fail-test-end\" --pattern=cl_two_failures.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(4, errcnt)\r\n  end",
    "type": "function"
  }, {
    "id": 524,
    "text": "local success, errcnt = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-test-start,--fail-test-end\" --pattern=cl_two_failures.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 525,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 526,
    "text": "function()\r\n  it('can add setup to test suite', function()\r\n    local success, errcnt = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-setup\" --pattern=cl_two_failures.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(1, errcnt)\r\n  end)\r\n\r\n  it('can add teardown to test suite', function()\r\n    local success, errcnt = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-teardown\" --pattern=cl_two_failures.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(3, errcnt)\r\n  end)\r\n\r\n  it('runs setup/teardown for mutiple runs', function()\r\n    local success, errcnt = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-setup,--fail-teardown\" --pattern=cl_success.lua$ --repeat=2')\r\n    assert.is_false(success)\r\n    assert.is_equal(4, errcnt)\r\n  end)\r\n\r\n  it('runs setup/teardown for mutiple runs with --lazy', function()\r\n    local success, errcnt = executeBusted('--lazy --helper=spec/cl_helper_script.lua -Xhelper \"--fail-setup,--fail-teardown\" --pattern=cl_success.lua$ --repeat=2')\r\n    assert.is_false(success)\r\n    assert.is_equal(4, errcnt)\r\n  end)\r\n\r\n  it('can subscribe to suite start/reset', function()\r\n    local success, errcnt, result = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-suite-start,--fail-suite-reset\" --pattern=cl_success.lua$ --repeat=2')\r\n    assert.is_false(success)\r\n    assert.is_equal(3, errcnt)\r\n  end)\r\n\r\n  it('can subscribe to suite end', function()\r\n    local success, errcnt = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-suite-end\" --pattern=cl_success.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(0, errcnt)\r\n  end)\r\n\r\n  it('can subscribe to file start/end', function()\r\n    local success, errcnt = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-file-start,--fail-file-end\" --pattern=cl_success.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(2, errcnt)\r\n  end)\r\n\r\n  it('can subscribe to describe start/end', function()\r\n    local success, errcnt = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-describe-start,--fail-describe-end\" --pattern=cl_success.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(2, errcnt)\r\n  end)\r\n\r\n  it('can subscribe to test start/end', function()\r\n    local success, errcnt = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-test-start,--fail-test-end\" --pattern=cl_two_failures.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(4, errcnt)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 527,
    "text": "it('can add setup to test suite', function()\r\n    local success, errcnt = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-setup\" --pattern=cl_two_failures.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(1, errcnt)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 528,
    "text": "it('can add teardown to test suite', function()\r\n    local success, errcnt = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-teardown\" --pattern=cl_two_failures.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(3, errcnt)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 529,
    "text": "it('runs setup/teardown for mutiple runs', function()\r\n    local success, errcnt = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-setup,--fail-teardown\" --pattern=cl_success.lua$ --repeat=2')\r\n    assert.is_false(success)\r\n    assert.is_equal(4, errcnt)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 530,
    "text": "it('runs setup/teardown for mutiple runs with --lazy', function()\r\n    local success, errcnt = executeBusted('--lazy --helper=spec/cl_helper_script.lua -Xhelper \"--fail-setup,--fail-teardown\" --pattern=cl_success.lua$ --repeat=2')\r\n    assert.is_false(success)\r\n    assert.is_equal(4, errcnt)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 531,
    "text": "it('can subscribe to suite start/reset', function()\r\n    local success, errcnt, result = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-suite-start,--fail-suite-reset\" --pattern=cl_success.lua$ --repeat=2')\r\n    assert.is_false(success)\r\n    assert.is_equal(3, errcnt)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 532,
    "text": "it('can subscribe to suite end', function()\r\n    local success, errcnt = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-suite-end\" --pattern=cl_success.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(0, errcnt)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 533,
    "text": "it('can subscribe to file start/end', function()\r\n    local success, errcnt = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-file-start,--fail-file-end\" --pattern=cl_success.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(2, errcnt)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 534,
    "text": "it('can subscribe to describe start/end', function()\r\n    local success, errcnt = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-describe-start,--fail-describe-end\" --pattern=cl_success.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(2, errcnt)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 535,
    "text": "it('can subscribe to test start/end', function()\r\n    local success, errcnt = executeBusted('--helper=spec/cl_helper_script.lua -Xhelper \"--fail-test-start,--fail-test-end\" --pattern=cl_two_failures.lua$')\r\n    assert.is_false(success)\r\n    assert.is_equal(4, errcnt)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 536,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 537,
    "text": "function()\r\n    local success = executeBusted('--helper=spec/cl_helper_script.lua --pattern=strict_spec.lua$')\r\n    assert.is_true(success)\r\n  end",
    "type": "function"
  }, {
    "id": 538,
    "text": "local success = executeBusted('--helper=spec/cl_helper_script.lua --pattern=strict_spec.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 539,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 540,
    "text": "function()\r\n  it('does not detect any errors', function()\r\n    local success = executeBusted('--helper=spec/cl_helper_script.lua --pattern=strict_spec.lua$')\r\n    assert.is_true(success)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 541,
    "text": "it('does not detect any errors', function()\r\n    local success = executeBusted('--helper=spec/cl_helper_script.lua --pattern=strict_spec.lua$')\r\n    assert.is_true(success)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 542,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 543,
    "text": "function()\r\n    local success, errcnt, result = executeBusted('-e \"print(\\\\\\\"hello world\\\\\\\")\" --pattern=cl_success.lua$')\r\n    assert.is_true(success)\r\n    assert.is_equal(0, errcnt)\r\n    assert.is_equal('hello world', result:match('(.-)\\n'))\r\n  end",
    "type": "function"
  }, {
    "id": 544,
    "text": "local success, errcnt, result = executeBusted('-e \"print(\\\\\\\"hello world\\\\\\\")\" --pattern=cl_success.lua$')",
    "type": "statement:localassign"
  }, {
    "id": 545,
    "text": "assert.is_equal('hello world', result:match('(.-)\\n'))",
    "type": "statement:functioncall"
  }, {
    "id": 546,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 547,
    "text": "function()\r\n  it('will run the specified statement', function()\r\n    local success, errcnt, result = executeBusted('-e \"print(\\\\\\\"hello world\\\\\\\")\" --pattern=cl_success.lua$')\r\n    assert.is_true(success)\r\n    assert.is_equal(0, errcnt)\r\n    assert.is_equal('hello world', result:match('(.-)\\n'))\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 548,
    "text": "it('will run the specified statement', function()\r\n    local success, errcnt, result = executeBusted('-e \"print(\\\\\\\"hello world\\\\\\\")\" --pattern=cl_success.lua$')\r\n    assert.is_true(success)\r\n    assert.is_equal(0, errcnt)\r\n    assert.is_equal('hello world', result:match('(.-)\\n'))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 549,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 550,
    "text": "",
    "type": "function container"
  }, {
    "id": 551,
    "text": "executeex",
    "type": "global function"
  }, {
    "id": 552,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 553,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 554,
    "text": "is_truthy",
    "type": "global function"
  }, {
    "id": 555,
    "text": "it",
    "type": "global function"
  }, {
    "id": 556,
    "text": "floor",
    "type": "global function"
  }, {
    "id": 557,
    "text": "is_true",
    "type": "global function"
  }, {
    "id": 558,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 559,
    "text": "normpath",
    "type": "global function"
  }, {
    "id": 560,
    "text": "collectgarbage",
    "type": "global function"
  }, {
    "id": 561,
    "text": "describe_moon",
    "type": "global function"
  }, {
    "id": 562,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 563,
    "text": "equal",
    "type": "global function"
  }, {
    "id": 564,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 565,
    "text": "error",
    "type": "global function"
  }, {
    "id": 566,
    "text": "xpcall",
    "type": "global function"
  }, {
    "id": 567,
    "text": "pending",
    "type": "global function"
  }, {
    "id": 568,
    "text": "require",
    "type": "global function"
  }, {
    "id": 569,
    "text": "is_equal",
    "type": "global function"
  }, {
    "id": 570,
    "text": "is_false",
    "type": "global function"
  }, {
    "id": 571,
    "text": "path",
    "type": "module"
  }, {
    "id": 572,
    "text": "",
    "type": "variable container"
  }, {
    "id": 573,
    "text": "",
    "type": "require container"
  }, {
    "id": 574,
    "text": "",
    "type": "local variable"
  }, {
    "id": 575,
    "text": "",
    "type": "n/a"
  }, {
    "id": 576,
    "text": "",
    "type": "local variable"
  }, {
    "id": 577,
    "text": "",
    "type": "n/a"
  }, {
    "id": 578,
    "text": "",
    "type": "local variable"
  }, {
    "id": 579,
    "text": "",
    "type": "n/a"
  }, {
    "id": 580,
    "text": "",
    "type": "local variable"
  }, {
    "id": 581,
    "text": "",
    "type": "n/a"
  }, {
    "id": 582,
    "text": "",
    "type": "local variable"
  }, {
    "id": 583,
    "text": "",
    "type": "n/a"
  }, {
    "id": 584,
    "text": "",
    "type": "local variable"
  }, {
    "id": 585,
    "text": "",
    "type": "n/a"
  }, {
    "id": 586,
    "text": "",
    "type": "local variable"
  }, {
    "id": 587,
    "text": "",
    "type": "n/a"
  }, {
    "id": 588,
    "text": "",
    "type": "local variable"
  }, {
    "id": 589,
    "text": "",
    "type": "n/a"
  }, {
    "id": 590,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 591,
    "text": "",
    "type": "require local variable"
  } ]
}