{
  "_filename": "output_handler_loader.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/busted/busted/modules/output_handler_loader.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 7,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 7,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 7,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 7,
    "label": "has",
    "to": 23
  }, {
    "from": 7,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 17
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 8
  }, {
    "from": 29,
    "label": "has",
    "to": 9
  }, {
    "from": 29,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 29,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 29,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 29,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 29,
    "label": "has",
    "to": 23
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "calls",
    "to": 36
  }, {
    "from": 32,
    "label": "calls",
    "to": 36
  }, {
    "from": 32,
    "label": "calls",
    "to": 36
  }, {
    "from": 32,
    "label": "calls",
    "to": 34
  }, {
    "from": 32,
    "label": "calls",
    "to": 35
  }, {
    "from": 32,
    "label": "calls",
    "to": 35
  }, {
    "from": 32,
    "label": "calls",
    "to": 39
  }, {
    "from": 32,
    "label": "calls",
    "to": 38
  }, {
    "from": 32,
    "label": "calls",
    "to": 40
  }, {
    "from": 32,
    "label": "calls",
    "to": 40
  }, {
    "from": 32,
    "label": "calls",
    "to": 40
  }, {
    "from": 32,
    "label": "calls",
    "to": 40
  }, {
    "from": 32,
    "label": "calls",
    "to": 40
  }, {
    "from": 32,
    "label": "calls",
    "to": 40
  }, {
    "from": 32,
    "label": "calls",
    "to": 37
  }, {
    "from": 32,
    "label": "calls",
    "to": 33
  }, {
    "from": 1,
    "label": "contains",
    "to": 32
  }, {
    "from": 32,
    "label": "declares",
    "to": 7
  }, {
    "from": 32,
    "label": "declares",
    "to": 25
  }, {
    "from": 32,
    "label": "declares",
    "to": 27
  }, {
    "from": 32,
    "label": "declares",
    "to": 28
  }, {
    "from": 1,
    "label": "contains",
    "to": 42
  }, {
    "from": 1,
    "label": "contains",
    "to": 43
  }, {
    "from": 42,
    "label": "initializes",
    "to": 44
  }, {
    "from": 44,
    "label": "assigns",
    "to": 45
  }, {
    "from": 42,
    "label": "initializes",
    "to": 46
  }, {
    "from": 43,
    "label": "initializes",
    "to": 47
  }, {
    "from": 47,
    "label": "requires",
    "to": 41
  }, {
    "from": 43,
    "label": "initializes",
    "to": 48
  }, {
    "from": 48,
    "label": "requires",
    "to": 4
  }, {
    "from": 43,
    "label": "initializes",
    "to": 49
  }, {
    "from": 49,
    "label": "requires",
    "to": 2
  }, {
    "from": 1,
    "label": "provides",
    "to": 50
  }, {
    "from": 50,
    "label": "provides",
    "to": 51
  }, {
    "from": 52,
    "label": "initializes",
    "to": 49
  }, {
    "from": 49,
    "label": "requires",
    "to": 53
  }, {
    "from": 52,
    "label": "initializes",
    "to": 49
  }, {
    "from": 49,
    "label": "requires",
    "to": 54
  }, {
    "from": 56,
    "label": "requires",
    "to": 1
  }, {
    "from": 55,
    "label": "initializes",
    "to": 49
  }, {
    "from": 49,
    "label": "requires",
    "to": 5
  }, {
    "from": 57,
    "label": "initializes",
    "to": 49
  }, {
    "from": 49,
    "label": "requires",
    "to": 3
  }, {
    "from": 58,
    "label": "initializes",
    "to": 49
  }, {
    "from": 49,
    "label": "requires",
    "to": 59
  }, {
    "from": 60,
    "label": "requires",
    "to": 1
  }, {
    "from": 61,
    "label": "initializes",
    "to": 49
  }, {
    "from": 49,
    "label": "requires",
    "to": 6
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "output_handler_loader",
    "type": "module"
  }, {
    "id": 2,
    "text": "sound",
    "type": "module"
  }, {
    "id": 3,
    "text": "runner",
    "type": "module"
  }, {
    "id": 4,
    "text": "utils",
    "type": "module"
  }, {
    "id": 5,
    "text": "busted",
    "type": "module"
  }, {
    "id": 6,
    "text": "strict",
    "type": "module"
  }, {
    "id": 7,
    "text": "function(busted, output, options)\r\n    local handler\r\n\r\n    utils.copy_interpreter_args(options.arguments)\r\n    local success, err = pcall(function()\r\n      if output:match('%.lua$') then\r\n        handler = dofile(path.normpath(output))\r\n      elseif hasMoon and output:match('%.moon$') then\r\n        handler = moonscript.dofile(path.normpath(output))\r\n      else\r\n        handler = require('busted.outputHandlers.' .. output)\r\n      end\r\n    end)\r\n\r\n    if not success and err:match(\"module '.-' not found:\") then\r\n      success, err = pcall(function() handler = require(output) end)\r\n    end\r\n\r\n    if not success then\r\n      busted.publish({ 'error', 'output' }, { descriptor = 'output', name = output }, nil, err, {})\r\n      handler = require('busted.outputHandlers.' .. options.defaultOutput)\r\n    end\r\n\r\n    if options.enableSound then\r\n      require 'busted.outputHandlers.sound'(options)\r\n    end\r\n\r\n    handler(options):subscribe(options)\r\n  end",
    "type": "function"
  }, {
    "id": 8,
    "text": "local handler",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "utils.copy_interpreter_args(options.arguments)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "local success, err = pcall(function()\r\n      if output:match('%.lua$') then\r\n        handler = dofile(path.normpath(output))\r\n      elseif hasMoon and output:match('%.moon$') then\r\n        handler = moonscript.dofile(path.normpath(output))\r\n      else\r\n        handler = require('busted.outputHandlers.' .. output)\r\n      end\r\n    end)",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "if output:match('%.lua$') then\r\n        handler = dofile(path.normpath(output))\r\n      elseif hasMoon and output:match('%.moon$') then\r\n        handler = moonscript.dofile(path.normpath(output))\r\n      else\r\n        handler = require('busted.outputHandlers.' .. output)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "handler = dofile(path.normpath(output))",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "handler = moonscript.dofile(path.normpath(output))",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "handler = require('busted.outputHandlers.' .. output)",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "if not success and err:match(\"module '.-' not found:\") then\r\n      success, err = pcall(function() handler = require(output) end)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "success, err = pcall(function() handler = require(output) end)",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "handler = require(output)",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "if not success then\r\n      busted.publish({ 'error', 'output' }, { descriptor = 'output', name = output }, nil, err, {})\r\n      handler = require('busted.outputHandlers.' .. options.defaultOutput)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "busted.publish({ 'error', 'output' }, { descriptor = 'output', name = output }, nil, err, {})",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "handler = require('busted.outputHandlers.' .. options.defaultOutput)",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "if options.enableSound then\r\n      require 'busted.outputHandlers.sound'(options)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "require 'busted.outputHandlers.sound'(options)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "handler(options):subscribe(options)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function()\r\n      if output:match('%.lua$') then\r\n        handler = dofile(path.normpath(output))\r\n      elseif hasMoon and output:match('%.moon$') then\r\n        handler = moonscript.dofile(path.normpath(output))\r\n      else\r\n        handler = require('busted.outputHandlers.' .. output)\r\n      end\r\n    end",
    "type": "function"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function() handler = require(output) end",
    "type": "function"
  }, {
    "id": 28,
    "text": "function()\r\n  local loadOutputHandler = function(busted, output, options)\r\n    local handler\r\n\r\n    utils.copy_interpreter_args(options.arguments)\r\n    local success, err = pcall(function()\r\n      if output:match('%.lua$') then\r\n        handler = dofile(path.normpath(output))\r\n      elseif hasMoon and output:match('%.moon$') then\r\n        handler = moonscript.dofile(path.normpath(output))\r\n      else\r\n        handler = require('busted.outputHandlers.' .. output)\r\n      end\r\n    end)\r\n\r\n    if not success and err:match(\"module '.-' not found:\") then\r\n      success, err = pcall(function() handler = require(output) end)\r\n    end\r\n\r\n    if not success then\r\n      busted.publish({ 'error', 'output' }, { descriptor = 'output', name = output }, nil, err, {})\r\n      handler = require('busted.outputHandlers.' .. options.defaultOutput)\r\n    end\r\n\r\n    if options.enableSound then\r\n      require 'busted.outputHandlers.sound'(options)\r\n    end\r\n\r\n    handler(options):subscribe(options)\r\n  end\r\n\r\n  return loadOutputHandler\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "local loadOutputHandler = function(busted, output, options)\r\n    local handler\r\n\r\n    utils.copy_interpreter_args(options.arguments)\r\n    local success, err = pcall(function()\r\n      if output:match('%.lua$') then\r\n        handler = dofile(path.normpath(output))\r\n      elseif hasMoon and output:match('%.moon$') then\r\n        handler = moonscript.dofile(path.normpath(output))\r\n      else\r\n        handler = require('busted.outputHandlers.' .. output)\r\n      end\r\n    end)\r\n\r\n    if not success and err:match(\"module '.-' not found:\") then\r\n      success, err = pcall(function() handler = require(output) end)\r\n    end\r\n\r\n    if not success then\r\n      busted.publish({ 'error', 'output' }, { descriptor = 'output', name = output }, nil, err, {})\r\n      handler = require('busted.outputHandlers.' .. options.defaultOutput)\r\n    end\r\n\r\n    if options.enableSound then\r\n      require 'busted.outputHandlers.sound'(options)\r\n    end\r\n\r\n    handler(options):subscribe(options)\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "",
    "type": "function container"
  }, {
    "id": 33,
    "text": "function(arguments)\r\n    -- copy non-positive command-line args auto-inserted by Lua interpreter\r\n    if arguments and _G.arg then\r\n      local i = 0\r\n      while _G.arg[i] do\r\n        arguments[i] = _G.arg[i]\r\n        i = i - 1\r\n      end\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 34,
    "text": "publish",
    "type": "global function"
  }, {
    "id": 35,
    "text": "normpath",
    "type": "global function"
  }, {
    "id": 36,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 37,
    "text": "dofile",
    "type": "global function"
  }, {
    "id": 38,
    "text": "handler",
    "type": "global function"
  }, {
    "id": 39,
    "text": "dofile",
    "type": "global function"
  }, {
    "id": 40,
    "text": "require",
    "type": "global function"
  }, {
    "id": 41,
    "text": "path",
    "type": "module"
  }, {
    "id": 42,
    "text": "",
    "type": "variable container"
  }, {
    "id": 43,
    "text": "",
    "type": "require container"
  }, {
    "id": 44,
    "text": "",
    "type": "local variable"
  }, {
    "id": 45,
    "text": "",
    "type": "n/a"
  }, {
    "id": 46,
    "text": "",
    "type": "local variable"
  }, {
    "id": 47,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 48,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 49,
    "text": "",
    "type": "global variable"
  }, {
    "id": 50,
    "text": "",
    "type": "interface container"
  }, {
    "id": 51,
    "text": "",
    "type": "interface"
  }, {
    "id": 52,
    "text": "",
    "type": "require container"
  }, {
    "id": 53,
    "text": "en)",
    "type": "module"
  }, {
    "id": 54,
    "text": "language)",
    "type": "module"
  }, {
    "id": 55,
    "text": "",
    "type": "require container"
  }, {
    "id": 56,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 57,
    "text": "",
    "type": "require container"
  }, {
    "id": 58,
    "text": "",
    "type": "require container"
  }, {
    "id": 59,
    "text": "pl",
    "type": "module"
  }, {
    "id": 60,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 61,
    "text": "",
    "type": "require container"
  } ]
}