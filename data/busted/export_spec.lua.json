{
  "_filename": "export_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/busted/spec/export_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 4,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 11,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 16,
    "label": "has",
    "to": 21
  }, {
    "from": 16,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 23,
    "label": "has",
    "to": 27
  }, {
    "from": 23,
    "label": "has",
    "to": 28
  }, {
    "from": 23,
    "label": "has",
    "to": 29
  }, {
    "from": 23,
    "label": "has",
    "to": 30
  }, {
    "from": 23,
    "label": "has",
    "to": 31
  }, {
    "from": 23,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 33,
    "label": "has",
    "to": 37
  }, {
    "from": 33,
    "label": "has",
    "to": 38
  }, {
    "from": 33,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 42,
    "label": "has",
    "to": 46
  }, {
    "from": 42,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 48
  }, {
    "from": 42,
    "label": "has",
    "to": 49
  }, {
    "from": 42,
    "label": "has",
    "to": 50
  }, {
    "from": 42,
    "label": "has",
    "to": 51
  }, {
    "from": 42,
    "label": "has",
    "to": 52
  }, {
    "from": 42,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 54,
    "label": "has",
    "to": 57
  }, {
    "from": 54,
    "label": "has",
    "to": 58
  }, {
    "from": 54,
    "label": "has",
    "to": 59
  }, {
    "from": 54,
    "label": "has",
    "to": 60
  }, {
    "from": 54,
    "label": "has",
    "to": 61
  }, {
    "from": 54,
    "label": "has",
    "to": 62
  }, {
    "from": 54,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 3
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 13
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 3
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 76,
    "label": "has",
    "to": 79
  }, {
    "from": 76,
    "label": "has",
    "to": 80
  }, {
    "from": 76,
    "label": "has",
    "to": 81
  }, {
    "from": 76,
    "label": "has",
    "to": 82
  }, {
    "from": 76,
    "label": "has",
    "to": 83
  }, {
    "from": 76,
    "label": "has",
    "to": 84
  }, {
    "from": 76,
    "label": "has",
    "to": 85
  }, {
    "from": 76,
    "label": "has",
    "to": 86
  }, {
    "from": 76,
    "label": "has",
    "to": 87
  }, {
    "from": 76,
    "label": "has",
    "to": 88
  }, {
    "from": 76,
    "label": "has",
    "to": 89
  }, {
    "from": 76,
    "label": "has",
    "to": 90
  }, {
    "from": 76,
    "label": "has",
    "to": 91
  }, {
    "from": 76,
    "label": "has",
    "to": 92
  }, {
    "from": 76,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 6
  }, {
    "from": 76,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 9
  }, {
    "from": 76,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 12
  }, {
    "from": 95,
    "label": "has",
    "to": 13
  }, {
    "from": 95,
    "label": "has",
    "to": 14
  }, {
    "from": 76,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 17
  }, {
    "from": 96,
    "label": "has",
    "to": 18
  }, {
    "from": 96,
    "label": "has",
    "to": 19
  }, {
    "from": 96,
    "label": "has",
    "to": 20
  }, {
    "from": 96,
    "label": "has",
    "to": 21
  }, {
    "from": 76,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 24
  }, {
    "from": 97,
    "label": "has",
    "to": 25
  }, {
    "from": 97,
    "label": "has",
    "to": 26
  }, {
    "from": 97,
    "label": "has",
    "to": 27
  }, {
    "from": 97,
    "label": "has",
    "to": 28
  }, {
    "from": 97,
    "label": "has",
    "to": 29
  }, {
    "from": 97,
    "label": "has",
    "to": 30
  }, {
    "from": 97,
    "label": "has",
    "to": 31
  }, {
    "from": 76,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 34
  }, {
    "from": 98,
    "label": "has",
    "to": 35
  }, {
    "from": 98,
    "label": "has",
    "to": 36
  }, {
    "from": 98,
    "label": "has",
    "to": 37
  }, {
    "from": 98,
    "label": "has",
    "to": 38
  }, {
    "from": 76,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 43
  }, {
    "from": 99,
    "label": "has",
    "to": 44
  }, {
    "from": 99,
    "label": "has",
    "to": 45
  }, {
    "from": 99,
    "label": "has",
    "to": 46
  }, {
    "from": 99,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 41
  }, {
    "from": 99,
    "label": "has",
    "to": 48
  }, {
    "from": 99,
    "label": "has",
    "to": 49
  }, {
    "from": 99,
    "label": "has",
    "to": 50
  }, {
    "from": 99,
    "label": "has",
    "to": 51
  }, {
    "from": 99,
    "label": "has",
    "to": 52
  }, {
    "from": 76,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 55
  }, {
    "from": 100,
    "label": "has",
    "to": 56
  }, {
    "from": 100,
    "label": "has",
    "to": 57
  }, {
    "from": 100,
    "label": "has",
    "to": 58
  }, {
    "from": 100,
    "label": "has",
    "to": 59
  }, {
    "from": 100,
    "label": "has",
    "to": 60
  }, {
    "from": 100,
    "label": "has",
    "to": 61
  }, {
    "from": 100,
    "label": "has",
    "to": 62
  }, {
    "from": 76,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 3
  }, {
    "from": 101,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 65
  }, {
    "from": 101,
    "label": "has",
    "to": 13
  }, {
    "from": 76,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 3
  }, {
    "from": 102,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 71
  }, {
    "from": 76,
    "label": "has",
    "to": 103
  }, {
    "from": 104,
    "label": "calls",
    "to": 113
  }, {
    "from": 104,
    "label": "calls",
    "to": 111
  }, {
    "from": 104,
    "label": "calls",
    "to": 111
  }, {
    "from": 104,
    "label": "calls",
    "to": 112
  }, {
    "from": 104,
    "label": "calls",
    "to": 114
  }, {
    "from": 104,
    "label": "calls",
    "to": 114
  }, {
    "from": 104,
    "label": "calls",
    "to": 114
  }, {
    "from": 104,
    "label": "calls",
    "to": 114
  }, {
    "from": 104,
    "label": "calls",
    "to": 114
  }, {
    "from": 104,
    "label": "calls",
    "to": 114
  }, {
    "from": 104,
    "label": "calls",
    "to": 114
  }, {
    "from": 104,
    "label": "calls",
    "to": 106
  }, {
    "from": 104,
    "label": "calls",
    "to": 106
  }, {
    "from": 104,
    "label": "calls",
    "to": 106
  }, {
    "from": 104,
    "label": "calls",
    "to": 106
  }, {
    "from": 104,
    "label": "calls",
    "to": 106
  }, {
    "from": 104,
    "label": "calls",
    "to": 106
  }, {
    "from": 104,
    "label": "calls",
    "to": 106
  }, {
    "from": 104,
    "label": "calls",
    "to": 106
  }, {
    "from": 104,
    "label": "calls",
    "to": 106
  }, {
    "from": 104,
    "label": "calls",
    "to": 106
  }, {
    "from": 104,
    "label": "calls",
    "to": 105
  }, {
    "from": 104,
    "label": "calls",
    "to": 105
  }, {
    "from": 104,
    "label": "calls",
    "to": 110
  }, {
    "from": 104,
    "label": "calls",
    "to": 110
  }, {
    "from": 104,
    "label": "calls",
    "to": 107
  }, {
    "from": 104,
    "label": "calls",
    "to": 108
  }, {
    "from": 104,
    "label": "calls",
    "to": 108
  }, {
    "from": 104,
    "label": "calls",
    "to": 115
  }, {
    "from": 104,
    "label": "calls",
    "to": 116
  }, {
    "from": 104,
    "label": "calls",
    "to": 116
  }, {
    "from": 104,
    "label": "calls",
    "to": 116
  }, {
    "from": 104,
    "label": "calls",
    "to": 116
  }, {
    "from": 104,
    "label": "calls",
    "to": 116
  }, {
    "from": 104,
    "label": "calls",
    "to": 116
  }, {
    "from": 104,
    "label": "calls",
    "to": 116
  }, {
    "from": 104,
    "label": "calls",
    "to": 116
  }, {
    "from": 104,
    "label": "calls",
    "to": 116
  }, {
    "from": 104,
    "label": "calls",
    "to": 116
  }, {
    "from": 104,
    "label": "calls",
    "to": 116
  }, {
    "from": 104,
    "label": "calls",
    "to": 116
  }, {
    "from": 104,
    "label": "calls",
    "to": 116
  }, {
    "from": 104,
    "label": "calls",
    "to": 116
  }, {
    "from": 104,
    "label": "calls",
    "to": 116
  }, {
    "from": 104,
    "label": "calls",
    "to": 116
  }, {
    "from": 104,
    "label": "calls",
    "to": 116
  }, {
    "from": 104,
    "label": "calls",
    "to": 116
  }, {
    "from": 104,
    "label": "calls",
    "to": 116
  }, {
    "from": 104,
    "label": "calls",
    "to": 116
  }, {
    "from": 104,
    "label": "calls",
    "to": 116
  }, {
    "from": 104,
    "label": "calls",
    "to": 116
  }, {
    "from": 104,
    "label": "calls",
    "to": 116
  }, {
    "from": 104,
    "label": "calls",
    "to": 116
  }, {
    "from": 104,
    "label": "calls",
    "to": 116
  }, {
    "from": 104,
    "label": "calls",
    "to": 116
  }, {
    "from": 104,
    "label": "calls",
    "to": 116
  }, {
    "from": 104,
    "label": "calls",
    "to": 116
  }, {
    "from": 104,
    "label": "calls",
    "to": 116
  }, {
    "from": 104,
    "label": "calls",
    "to": 116
  }, {
    "from": 104,
    "label": "calls",
    "to": 116
  }, {
    "from": 104,
    "label": "calls",
    "to": 116
  }, {
    "from": 104,
    "label": "calls",
    "to": 116
  }, {
    "from": 104,
    "label": "calls",
    "to": 116
  }, {
    "from": 104,
    "label": "calls",
    "to": 116
  }, {
    "from": 104,
    "label": "calls",
    "to": 109
  }, {
    "from": 104,
    "label": "calls",
    "to": 117
  }, {
    "from": 104,
    "label": "calls",
    "to": 117
  }, {
    "from": 104,
    "label": "calls",
    "to": 117
  }, {
    "from": 104,
    "label": "calls",
    "to": 117
  }, {
    "from": 104,
    "label": "calls",
    "to": 117
  }, {
    "from": 104,
    "label": "calls",
    "to": 117
  }, {
    "from": 104,
    "label": "calls",
    "to": 117
  }, {
    "from": 104,
    "label": "calls",
    "to": 117
  }, {
    "from": 104,
    "label": "calls",
    "to": 117
  }, {
    "from": 104,
    "label": "calls",
    "to": 117
  }, {
    "from": 104,
    "label": "calls",
    "to": 117
  }, {
    "from": 104,
    "label": "calls",
    "to": 117
  }, {
    "from": 104,
    "label": "calls",
    "to": 117
  }, {
    "from": 104,
    "label": "calls",
    "to": 117
  }, {
    "from": 104,
    "label": "calls",
    "to": 117
  }, {
    "from": 104,
    "label": "calls",
    "to": 117
  }, {
    "from": 104,
    "label": "calls",
    "to": 117
  }, {
    "from": 104,
    "label": "calls",
    "to": 117
  }, {
    "from": 104,
    "label": "calls",
    "to": 117
  }, {
    "from": 104,
    "label": "calls",
    "to": 117
  }, {
    "from": 104,
    "label": "calls",
    "to": 117
  }, {
    "from": 104,
    "label": "calls",
    "to": 117
  }, {
    "from": 104,
    "label": "calls",
    "to": 117
  }, {
    "from": 1,
    "label": "contains",
    "to": 104
  }, {
    "from": 104,
    "label": "declares",
    "to": 2
  }, {
    "from": 104,
    "label": "declares",
    "to": 4
  }, {
    "from": 104,
    "label": "declares",
    "to": 5
  }, {
    "from": 104,
    "label": "declares",
    "to": 8
  }, {
    "from": 104,
    "label": "declares",
    "to": 11
  }, {
    "from": 104,
    "label": "declares",
    "to": 16
  }, {
    "from": 104,
    "label": "declares",
    "to": 23
  }, {
    "from": 104,
    "label": "declares",
    "to": 33
  }, {
    "from": 104,
    "label": "declares",
    "to": 40
  }, {
    "from": 104,
    "label": "declares",
    "to": 42
  }, {
    "from": 104,
    "label": "declares",
    "to": 54
  }, {
    "from": 104,
    "label": "declares",
    "to": 64
  }, {
    "from": 104,
    "label": "declares",
    "to": 66
  }, {
    "from": 104,
    "label": "declares",
    "to": 70
  }, {
    "from": 104,
    "label": "declares",
    "to": 72
  }, {
    "from": 104,
    "label": "declares",
    "to": 76
  }, {
    "from": 1,
    "label": "contains",
    "to": 118
  }, {
    "from": 1,
    "label": "contains",
    "to": 119
  }, {
    "from": 68,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 74,
    "label": "hasArgument",
    "to": 70
  }, {
    "from": 93,
    "label": "hasArgument",
    "to": 5
  }, {
    "from": 94,
    "label": "hasArgument",
    "to": 8
  }, {
    "from": 95,
    "label": "hasArgument",
    "to": 11
  }, {
    "from": 96,
    "label": "hasArgument",
    "to": 16
  }, {
    "from": 97,
    "label": "hasArgument",
    "to": 23
  }, {
    "from": 98,
    "label": "hasArgument",
    "to": 33
  }, {
    "from": 99,
    "label": "hasArgument",
    "to": 40
  }, {
    "from": 99,
    "label": "hasArgument",
    "to": 42
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 101,
    "label": "hasArgument",
    "to": 2
  }, {
    "from": 101,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 101,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 101,
    "label": "hasArgument",
    "to": 66
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 2
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 70
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 72
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "export_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "function() assert(false) end",
    "type": "function"
  }, {
    "id": 3,
    "text": "assert(false)",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "function() assert(false) end",
    "type": "function"
  }, {
    "id": 5,
    "text": "function()\r\n    assert.is_nil(require 'busted'.init)\r\n  end",
    "type": "function"
  }, {
    "id": 6,
    "text": "assert.is_nil(require 'busted'.init)",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function()\r\n    assert.is_nil(require 'busted'.file)\r\n  end",
    "type": "function"
  }, {
    "id": 9,
    "text": "assert.is_nil(require 'busted'.file)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function()\r\n    assert.is_equal(describe, require 'busted'.describe)\r\n    assert.is_equal(it, require 'busted'.it)\r\n    assert.is_equal(pending, require 'busted'.pending)\r\n  end",
    "type": "function"
  }, {
    "id": 12,
    "text": "assert.is_equal(describe, require 'busted'.describe)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "assert.is_equal(it, require 'busted'.it)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "assert.is_equal(pending, require 'busted'.pending)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function()\r\n    assert.is_equal(context, require 'busted'.context)\r\n    assert.is_equal(insulate, require 'busted'.insulate)\r\n    assert.is_equal(expose, require 'busted'.expose)\r\n    assert.is_equal(spec, require 'busted'.spec)\r\n    assert.is_equal(test, require 'busted'.test)\r\n  end",
    "type": "function"
  }, {
    "id": 17,
    "text": "assert.is_equal(context, require 'busted'.context)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "assert.is_equal(insulate, require 'busted'.insulate)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "assert.is_equal(expose, require 'busted'.expose)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "assert.is_equal(spec, require 'busted'.spec)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "assert.is_equal(test, require 'busted'.test)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function()\r\n    assert.is_equal(setup, require 'busted'.setup)\r\n    assert.is_equal(teardown, require 'busted'.teardown)\r\n    assert.is_equal(lazy_setup, require 'busted'.lazy_setup)\r\n    assert.is_equal(lazy_teardown, require 'busted'.lazy_teardown)\r\n    assert.is_equal(strict_setup, require 'busted'.strict_setup)\r\n    assert.is_equal(strict_teardown, require 'busted'.strict_teardown)\r\n    assert.is_equal(before_each, require 'busted'.before_each)\r\n    assert.is_equal(after_each, require 'busted'.after_each)\r\n  end",
    "type": "function"
  }, {
    "id": 24,
    "text": "assert.is_equal(setup, require 'busted'.setup)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "assert.is_equal(teardown, require 'busted'.teardown)",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "assert.is_equal(lazy_setup, require 'busted'.lazy_setup)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "assert.is_equal(lazy_teardown, require 'busted'.lazy_teardown)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "assert.is_equal(strict_setup, require 'busted'.strict_setup)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "assert.is_equal(strict_teardown, require 'busted'.strict_teardown)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "assert.is_equal(before_each, require 'busted'.before_each)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "assert.is_equal(after_each, require 'busted'.after_each)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function()\r\n    assert.is_equal(assert, require 'busted'.assert)\r\n    assert.is_equal(spy, require 'busted'.spy)\r\n    assert.is_equal(mock, require 'busted'.mock)\r\n    assert.is_equal(stub, require 'busted'.stub)\r\n    assert.is_equal(match, require 'busted'.match)\r\n  end",
    "type": "function"
  }, {
    "id": 34,
    "text": "assert.is_equal(assert, require 'busted'.assert)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "assert.is_equal(spy, require 'busted'.spy)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "assert.is_equal(mock, require 'busted'.mock)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "assert.is_equal(stub, require 'busted'.stub)",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "assert.is_equal(match, require 'busted'.match)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function(...) foo = {...} end",
    "type": "function"
  }, {
    "id": 41,
    "text": "foo = {...}",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "function()\r\n    local foo\r\n    local publish = require 'busted'.publish\r\n    local subscribe = require 'busted'.subscribe\r\n    local unsubscribe = require 'busted'.unsubscribe\r\n    local sub = subscribe({'export_test'}, function(...) foo = {...} end)\r\n    publish({'export_test'}, 'value1', 'value2' )\r\n    local unsub = unsubscribe(sub.id, {'export_test'})\r\n    publish({'export_test'}, 'new_value1', 'new_value2')\r\n    assert.is_same({'value1', 'value2'}, foo)\r\n    assert.is_equal(sub, unsub)\r\n  end",
    "type": "function"
  }, {
    "id": 43,
    "text": "local foo",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "local publish = require 'busted'.publish",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "local subscribe = require 'busted'.subscribe",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "local unsubscribe = require 'busted'.unsubscribe",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "local sub = subscribe({'export_test'}, function(...) foo = {...} end)",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "publish({'export_test'}, 'value1', 'value2' )",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "local unsub = unsubscribe(sub.id, {'export_test'})",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "publish({'export_test'}, 'new_value1', 'new_value2')",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "assert.is_same({'value1', 'value2'}, foo)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "assert.is_equal(sub, unsub)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "function()\r\n    assert.is_function(require 'busted'.bindfenv)\r\n    assert.is_function(require 'busted'.fail)\r\n    assert.is_function(require 'busted'.gettime)\r\n    assert.is_function(require 'busted'.monotime)\r\n    assert.is_function(require 'busted'.sleep)\r\n    assert.is_function(require 'busted'.parent)\r\n    assert.is_function(require 'busted'.children)\r\n    assert.is_string(require 'busted'.version)\r\n  end",
    "type": "function"
  }, {
    "id": 55,
    "text": "assert.is_function(require 'busted'.bindfenv)",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "assert.is_function(require 'busted'.fail)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "assert.is_function(require 'busted'.gettime)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "assert.is_function(require 'busted'.monotime)",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "assert.is_function(require 'busted'.sleep)",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "assert.is_function(require 'busted'.parent)",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "assert.is_function(require 'busted'.children)",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "assert.is_string(require 'busted'.version)",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "function() require 'busted'.it = foo end",
    "type": "function"
  }, {
    "id": 65,
    "text": "require 'busted'.it = foo",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "function()\r\n    local foo = function() assert(false) end\r\n    assert.has_error(function() require 'busted'.it = foo end)\r\n    assert.is_equal(it, require 'busted'.it)\r\n  end",
    "type": "function"
  }, {
    "id": 67,
    "text": "local foo = function() assert(false) end",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "assert.has_error(function() require 'busted'.it = foo end)",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function() require 'busted'.foo = bar end",
    "type": "function"
  }, {
    "id": 71,
    "text": "require 'busted'.foo = bar",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "function()\r\n    local bar = function() assert(false) end\r\n    assert.has_error(function() require 'busted'.foo = bar end)\r\n  end",
    "type": "function"
  }, {
    "id": 73,
    "text": "local bar = function() assert(false) end",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "assert.has_error(function() require 'busted'.foo = bar end)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "function()\r\n  local describe = describe\r\n  local context = context\r\n  local insulate = insulate\r\n  local expose = expose\r\n  local it = it\r\n  local pending = pending\r\n  local spec = spec\r\n  local test = test\r\n  local setup = setup\r\n  local teardown = teardown\r\n  local before_each = before_each\r\n  local after_each = after_each\r\n  local lazy_setup = lazy_setup\r\n  local lazy_teardown = lazy_teardown\r\n  local strict_setup = strict_setup\r\n  local strict_teardown = strict_teardown\r\n\r\n  it('does not export init', function()\r\n    assert.is_nil(require 'busted'.init)\r\n  end)\r\n\r\n  it('does not export file executor', function()\r\n    assert.is_nil(require 'busted'.file)\r\n  end)\r\n\r\n  it('exports describe/it/pending', function()\r\n    assert.is_equal(describe, require 'busted'.describe)\r\n    assert.is_equal(it, require 'busted'.it)\r\n    assert.is_equal(pending, require 'busted'.pending)\r\n  end)\r\n\r\n  it('exports aliases', function()\r\n    assert.is_equal(context, require 'busted'.context)\r\n    assert.is_equal(insulate, require 'busted'.insulate)\r\n    assert.is_equal(expose, require 'busted'.expose)\r\n    assert.is_equal(spec, require 'busted'.spec)\r\n    assert.is_equal(test, require 'busted'.test)\r\n  end)\r\n\r\n  it('exports support functions', function()\r\n    assert.is_equal(setup, require 'busted'.setup)\r\n    assert.is_equal(teardown, require 'busted'.teardown)\r\n    assert.is_equal(lazy_setup, require 'busted'.lazy_setup)\r\n    assert.is_equal(lazy_teardown, require 'busted'.lazy_teardown)\r\n    assert.is_equal(strict_setup, require 'busted'.strict_setup)\r\n    assert.is_equal(strict_teardown, require 'busted'.strict_teardown)\r\n    assert.is_equal(before_each, require 'busted'.before_each)\r\n    assert.is_equal(after_each, require 'busted'.after_each)\r\n  end)\r\n\r\n  it('exports assert, mocks, and matchers', function()\r\n    assert.is_equal(assert, require 'busted'.assert)\r\n    assert.is_equal(spy, require 'busted'.spy)\r\n    assert.is_equal(mock, require 'busted'.mock)\r\n    assert.is_equal(stub, require 'busted'.stub)\r\n    assert.is_equal(match, require 'busted'.match)\r\n  end)\r\n\r\n  it('exports publish/subscribe', function()\r\n    local foo\r\n    local publish = require 'busted'.publish\r\n    local subscribe = require 'busted'.subscribe\r\n    local unsubscribe = require 'busted'.unsubscribe\r\n    local sub = subscribe({'export_test'}, function(...) foo = {...} end)\r\n    publish({'export_test'}, 'value1', 'value2' )\r\n    local unsub = unsubscribe(sub.id, {'export_test'})\r\n    publish({'export_test'}, 'new_value1', 'new_value2')\r\n    assert.is_same({'value1', 'value2'}, foo)\r\n    assert.is_equal(sub, unsub)\r\n  end)\r\n\r\n  it('exports other functions/variables', function()\r\n    assert.is_function(require 'busted'.bindfenv)\r\n    assert.is_function(require 'busted'.fail)\r\n    assert.is_function(require 'busted'.gettime)\r\n    assert.is_function(require 'busted'.monotime)\r\n    assert.is_function(require 'busted'.sleep)\r\n    assert.is_function(require 'busted'.parent)\r\n    assert.is_function(require 'busted'.children)\r\n    assert.is_string(require 'busted'.version)\r\n  end)\r\n\r\n  it('functions cannot be overwritten', function()\r\n    local foo = function() assert(false) end\r\n    assert.has_error(function() require 'busted'.it = foo end)\r\n    assert.is_equal(it, require 'busted'.it)\r\n  end)\r\n\r\n  it('cannot add new fields', function()\r\n    local bar = function() assert(false) end\r\n    assert.has_error(function() require 'busted'.foo = bar end)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 77,
    "text": "local describe = describe",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "local context = context",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "local insulate = insulate",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "local expose = expose",
    "type": "statement:localassign"
  }, {
    "id": 81,
    "text": "local it = it",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "local pending = pending",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "local spec = spec",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "local test = test",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "local setup = setup",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "local teardown = teardown",
    "type": "statement:localassign"
  }, {
    "id": 87,
    "text": "local before_each = before_each",
    "type": "statement:localassign"
  }, {
    "id": 88,
    "text": "local after_each = after_each",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "local lazy_setup = lazy_setup",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "local lazy_teardown = lazy_teardown",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "local strict_setup = strict_setup",
    "type": "statement:localassign"
  }, {
    "id": 92,
    "text": "local strict_teardown = strict_teardown",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "it('does not export init', function()\r\n    assert.is_nil(require 'busted'.init)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "it('does not export file executor', function()\r\n    assert.is_nil(require 'busted'.file)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "it('exports describe/it/pending', function()\r\n    assert.is_equal(describe, require 'busted'.describe)\r\n    assert.is_equal(it, require 'busted'.it)\r\n    assert.is_equal(pending, require 'busted'.pending)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "it('exports aliases', function()\r\n    assert.is_equal(context, require 'busted'.context)\r\n    assert.is_equal(insulate, require 'busted'.insulate)\r\n    assert.is_equal(expose, require 'busted'.expose)\r\n    assert.is_equal(spec, require 'busted'.spec)\r\n    assert.is_equal(test, require 'busted'.test)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "it('exports support functions', function()\r\n    assert.is_equal(setup, require 'busted'.setup)\r\n    assert.is_equal(teardown, require 'busted'.teardown)\r\n    assert.is_equal(lazy_setup, require 'busted'.lazy_setup)\r\n    assert.is_equal(lazy_teardown, require 'busted'.lazy_teardown)\r\n    assert.is_equal(strict_setup, require 'busted'.strict_setup)\r\n    assert.is_equal(strict_teardown, require 'busted'.strict_teardown)\r\n    assert.is_equal(before_each, require 'busted'.before_each)\r\n    assert.is_equal(after_each, require 'busted'.after_each)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "it('exports assert, mocks, and matchers', function()\r\n    assert.is_equal(assert, require 'busted'.assert)\r\n    assert.is_equal(spy, require 'busted'.spy)\r\n    assert.is_equal(mock, require 'busted'.mock)\r\n    assert.is_equal(stub, require 'busted'.stub)\r\n    assert.is_equal(match, require 'busted'.match)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "it('exports publish/subscribe', function()\r\n    local foo\r\n    local publish = require 'busted'.publish\r\n    local subscribe = require 'busted'.subscribe\r\n    local unsubscribe = require 'busted'.unsubscribe\r\n    local sub = subscribe({'export_test'}, function(...) foo = {...} end)\r\n    publish({'export_test'}, 'value1', 'value2' )\r\n    local unsub = unsubscribe(sub.id, {'export_test'})\r\n    publish({'export_test'}, 'new_value1', 'new_value2')\r\n    assert.is_same({'value1', 'value2'}, foo)\r\n    assert.is_equal(sub, unsub)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "it('exports other functions/variables', function()\r\n    assert.is_function(require 'busted'.bindfenv)\r\n    assert.is_function(require 'busted'.fail)\r\n    assert.is_function(require 'busted'.gettime)\r\n    assert.is_function(require 'busted'.monotime)\r\n    assert.is_function(require 'busted'.sleep)\r\n    assert.is_function(require 'busted'.parent)\r\n    assert.is_function(require 'busted'.children)\r\n    assert.is_string(require 'busted'.version)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "it('functions cannot be overwritten', function()\r\n    local foo = function() assert(false) end\r\n    assert.has_error(function() require 'busted'.it = foo end)\r\n    assert.is_equal(it, require 'busted'.it)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "it('cannot add new fields', function()\r\n    local bar = function() assert(false) end\r\n    assert.has_error(function() require 'busted'.foo = bar end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 104,
    "text": "",
    "type": "function container"
  }, {
    "id": 105,
    "text": "has_error",
    "type": "global function"
  }, {
    "id": 106,
    "text": "it",
    "type": "global function"
  }, {
    "id": 107,
    "text": "is_same",
    "type": "global function"
  }, {
    "id": 108,
    "text": "publish",
    "type": "global function"
  }, {
    "id": 109,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 110,
    "text": "is_nil",
    "type": "global function"
  }, {
    "id": 111,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 112,
    "text": "is_string",
    "type": "global function"
  }, {
    "id": 113,
    "text": "unsubscribe",
    "type": "global function"
  }, {
    "id": 114,
    "text": "is_function",
    "type": "global function"
  }, {
    "id": 115,
    "text": "subscribe",
    "type": "global function"
  }, {
    "id": 116,
    "text": "require",
    "type": "global function"
  }, {
    "id": 117,
    "text": "is_equal",
    "type": "global function"
  }, {
    "id": 118,
    "text": "",
    "type": "variable container"
  }, {
    "id": 119,
    "text": "",
    "type": "require container"
  } ]
}