{
  "_filename": "done.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/busted/busted/done.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 11
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 18,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 18,
    "label": "has",
    "to": 25
  }, {
    "from": 16,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 21
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 23
  }, {
    "from": 29,
    "label": "has",
    "to": 24
  }, {
    "from": 26,
    "label": "has",
    "to": 25
  }, {
    "from": 16,
    "label": "has",
    "to": 30
  }, {
    "from": 16,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 38,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 41
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 38,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 34,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 34,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 30
  }, {
    "from": 54,
    "label": "has",
    "to": 33
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 33
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "calls",
    "to": 60
  }, {
    "from": 59,
    "label": "calls",
    "to": 60
  }, {
    "from": 59,
    "label": "calls",
    "to": 60
  }, {
    "from": 59,
    "label": "calls",
    "to": 60
  }, {
    "from": 59,
    "label": "calls",
    "to": 61
  }, {
    "from": 59,
    "label": "calls",
    "to": 61
  }, {
    "from": 59,
    "label": "calls",
    "to": 61
  }, {
    "from": 59,
    "label": "calls",
    "to": 62
  }, {
    "from": 59,
    "label": "calls",
    "to": 62
  }, {
    "from": 59,
    "label": "calls",
    "to": 64
  }, {
    "from": 59,
    "label": "calls",
    "to": 64
  }, {
    "from": 59,
    "label": "calls",
    "to": 67
  }, {
    "from": 59,
    "label": "calls",
    "to": 67
  }, {
    "from": 59,
    "label": "calls",
    "to": 67
  }, {
    "from": 59,
    "label": "calls",
    "to": 67
  }, {
    "from": 59,
    "label": "calls",
    "to": 67
  }, {
    "from": 59,
    "label": "calls",
    "to": 65
  }, {
    "from": 59,
    "label": "calls",
    "to": 66
  }, {
    "from": 59,
    "label": "calls",
    "to": 66
  }, {
    "from": 59,
    "label": "calls",
    "to": 66
  }, {
    "from": 59,
    "label": "calls",
    "to": 66
  }, {
    "from": 59,
    "label": "calls",
    "to": 63
  }, {
    "from": 59,
    "label": "calls",
    "to": 68
  }, {
    "from": 1,
    "label": "contains",
    "to": 59
  }, {
    "from": 59,
    "label": "declares",
    "to": 2
  }, {
    "from": 59,
    "label": "declares",
    "to": 9
  }, {
    "from": 59,
    "label": "declares",
    "to": 13
  }, {
    "from": 59,
    "label": "declares",
    "to": 16
  }, {
    "from": 59,
    "label": "declares",
    "to": 32
  }, {
    "from": 59,
    "label": "declares",
    "to": 34
  }, {
    "from": 59,
    "label": "declares",
    "to": 54
  }, {
    "from": 59,
    "label": "declares",
    "to": 57
  }, {
    "from": 1,
    "label": "contains",
    "to": 69
  }, {
    "from": 1,
    "label": "contains",
    "to": 70
  }, {
    "from": 69,
    "label": "initializes",
    "to": 71
  }, {
    "from": 71,
    "label": "assigns",
    "to": 72
  }, {
    "from": 69,
    "label": "initializes",
    "to": 73
  }, {
    "from": 73,
    "label": "assigns",
    "to": 74
  }, {
    "from": 69,
    "label": "initializes",
    "to": 75
  }, {
    "from": 75,
    "label": "assigns",
    "to": 76
  }, {
    "from": 69,
    "label": "initializes",
    "to": 77
  }, {
    "from": 77,
    "label": "assigns",
    "to": 78
  }, {
    "from": 69,
    "label": "initializes",
    "to": 79
  }, {
    "from": 79,
    "label": "assigns",
    "to": 80
  }, {
    "from": 69,
    "label": "initializes",
    "to": 81
  }, {
    "from": 81,
    "label": "assigns",
    "to": 82
  }, {
    "from": 69,
    "label": "initializes",
    "to": 83
  }, {
    "from": 83,
    "label": "assigns",
    "to": 84
  }, {
    "from": 69,
    "label": "initializes",
    "to": 85
  }, {
    "from": 85,
    "label": "assigns",
    "to": 86
  }, {
    "from": 1,
    "label": "provides",
    "to": 87
  }, {
    "from": 71,
    "label": "represents",
    "to": 88
  }, {
    "from": 87,
    "label": "provides",
    "to": 88
  }, {
    "from": 71,
    "label": "contains",
    "to": 2
  }, {
    "from": 71,
    "label": "contains",
    "to": 9
  }, {
    "from": 71,
    "label": "contains",
    "to": 13
  }, {
    "from": 71,
    "label": "contains",
    "to": 16
  }, {
    "from": 71,
    "label": "contains",
    "to": 32
  }, {
    "from": 71,
    "label": "contains",
    "to": 34
  }, {
    "from": 71,
    "label": "contains",
    "to": 54
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "done",
    "type": "module"
  }, {
    "id": 2,
    "text": "function(self, ...)\r\n  local tlist = { ... }\r\n\r\n  for _, token in ipairs(tlist) do\r\n    if type(token) ~= 'string' then\r\n      error('Wait tokens must be strings. Got '..type(token), 2)\r\n    end\r\n    table.insert(self.tokens, token)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local tlist = { ... }",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "for _, token in ipairs(tlist) do\r\n    if type(token) ~= 'string' then\r\n      error('Wait tokens must be strings. Got '..type(token), 2)\r\n    end\r\n    table.insert(self.tokens, token)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 5,
    "text": "if type(token) ~= 'string' then\r\n      error('Wait tokens must be strings. Got '..type(token), 2)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "error('Wait tokens must be strings. Got '..type(token), 2)",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "table.insert(self.tokens, token)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function(self, ...)\r\n  self.ordered = false\r\n  self:wait(...)\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "self.ordered = false",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "self:wait(...)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function(self, ...)\r\n  self.ordered = true\r\n  self:wait(...)\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "self.ordered = true",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function(self)\r\n  local list\r\n\r\n  if #self.tokens_done == 0 then\r\n    list = 'No tokens received.'\r\n  else\r\n    list = 'Tokens received ('..tostring(#self.tokens_done)..')'\r\n    local s = ': '\r\n\r\n    for _,t in ipairs(self.tokens_done) do\r\n      list = list .. s .. '\\''..t..'\\''\r\n      s = ', '\r\n    end\r\n\r\n    list = list .. '.'\r\n  end\r\n\r\n  if #self.tokens == 0 then\r\n    list = list .. ' No more tokens expected.'\r\n  else\r\n    list = list .. ' Tokens not received ('..tostring(#self.tokens)..')'\r\n    local s = ': '\r\n\r\n    for _, t in ipairs(self.tokens) do\r\n      list = list .. s .. '\\''..t..'\\''\r\n      s = ', '\r\n    end\r\n\r\n    list = list .. '.'\r\n  end\r\n\r\n  return list\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "local list",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "if #self.tokens_done == 0 then\r\n    list = 'No tokens received.'\r\n  else\r\n    list = 'Tokens received ('..tostring(#self.tokens_done)..')'\r\n    local s = ': '\r\n\r\n    for _,t in ipairs(self.tokens_done) do\r\n      list = list .. s .. '\\''..t..'\\''\r\n      s = ', '\r\n    end\r\n\r\n    list = list .. '.'\r\n  end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "list = 'No tokens received.'",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "list = 'Tokens received ('..tostring(#self.tokens_done)..')'",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "local s = ': '",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "for _,t in ipairs(self.tokens_done) do\r\n      list = list .. s .. '\\''..t..'\\''\r\n      s = ', '\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 23,
    "text": "list = list .. s .. '\\''..t..'\\''",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "s = ', '",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "list = list .. '.'",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "if #self.tokens == 0 then\r\n    list = list .. ' No more tokens expected.'\r\n  else\r\n    list = list .. ' Tokens not received ('..tostring(#self.tokens)..')'\r\n    local s = ': '\r\n\r\n    for _, t in ipairs(self.tokens) do\r\n      list = list .. s .. '\\''..t..'\\''\r\n      s = ', '\r\n    end\r\n\r\n    list = list .. '.'\r\n  end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "list = list .. ' No more tokens expected.'",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "list = list .. ' Tokens not received ('..tostring(#self.tokens)..')'",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "for _, t in ipairs(self.tokens) do\r\n      list = list .. s .. '\\''..t..'\\''\r\n      s = ', '\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 30,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function(self, ...) self:_done(...) end",
    "type": "function"
  }, {
    "id": 33,
    "text": "self:_done(...)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "function(self, token)\r\n  if token then\r\n    if type(token) ~= 'string' then\r\n      error('Wait tokens must be strings. Got '..type(token), 3)\r\n    end\r\n\r\n    if self.ordered then\r\n      if self.tokens[1] == token then\r\n        table.remove(self.tokens, 1)\r\n        table.insert(self.tokens_done, token)\r\n      else\r\n        if self.tokens[1] then\r\n          error(('Bad token, expected \\'%s\\' got \\'%s\\'. %s'):format(self.tokens[1], token, self:tokenlist()), 3)\r\n        else\r\n          error(('Bad token (no more tokens expected) got \\'%s\\'. %s'):format(token, self:tokenlist()), 3)\r\n        end\r\n      end\r\n    else\r\n      -- unordered\r\n      for i, t in ipairs(self.tokens) do\r\n        if t == token then\r\n          table.remove(self.tokens, i)\r\n          table.insert(self.tokens_done, token)\r\n          token = nil\r\n          break\r\n        end\r\n      end\r\n\r\n      if token then\r\n        error(('Unknown token \\'%s\\'. %s'):format(token, self:tokenlist()), 3)\r\n      end\r\n    end\r\n  end\r\n  if not next(self.tokens) then\r\n    -- no more tokens, so we're really done...\r\n    self.done_cb()\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "if token then\r\n    if type(token) ~= 'string' then\r\n      error('Wait tokens must be strings. Got '..type(token), 3)\r\n    end\r\n\r\n    if self.ordered then\r\n      if self.tokens[1] == token then\r\n        table.remove(self.tokens, 1)\r\n        table.insert(self.tokens_done, token)\r\n      else\r\n        if self.tokens[1] then\r\n          error(('Bad token, expected \\'%s\\' got \\'%s\\'. %s'):format(self.tokens[1], token, self:tokenlist()), 3)\r\n        else\r\n          error(('Bad token (no more tokens expected) got \\'%s\\'. %s'):format(token, self:tokenlist()), 3)\r\n        end\r\n      end\r\n    else\r\n      -- unordered\r\n      for i, t in ipairs(self.tokens) do\r\n        if t == token then\r\n          table.remove(self.tokens, i)\r\n          table.insert(self.tokens_done, token)\r\n          token = nil\r\n          break\r\n        end\r\n      end\r\n\r\n      if token then\r\n        error(('Unknown token \\'%s\\'. %s'):format(token, self:tokenlist()), 3)\r\n      end\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "if type(token) ~= 'string' then\r\n      error('Wait tokens must be strings. Got '..type(token), 3)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "error('Wait tokens must be strings. Got '..type(token), 3)",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "if self.ordered then\r\n      if self.tokens[1] == token then\r\n        table.remove(self.tokens, 1)\r\n        table.insert(self.tokens_done, token)\r\n      else\r\n        if self.tokens[1] then\r\n          error(('Bad token, expected \\'%s\\' got \\'%s\\'. %s'):format(self.tokens[1], token, self:tokenlist()), 3)\r\n        else\r\n          error(('Bad token (no more tokens expected) got \\'%s\\'. %s'):format(token, self:tokenlist()), 3)\r\n        end\r\n      end\r\n    else\r\n      -- unordered\r\n      for i, t in ipairs(self.tokens) do\r\n        if t == token then\r\n          table.remove(self.tokens, i)\r\n          table.insert(self.tokens_done, token)\r\n          token = nil\r\n          break\r\n        end\r\n      end\r\n\r\n      if token then\r\n        error(('Unknown token \\'%s\\'. %s'):format(token, self:tokenlist()), 3)\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "if self.tokens[1] == token then\r\n        table.remove(self.tokens, 1)\r\n        table.insert(self.tokens_done, token)\r\n      else\r\n        if self.tokens[1] then\r\n          error(('Bad token, expected \\'%s\\' got \\'%s\\'. %s'):format(self.tokens[1], token, self:tokenlist()), 3)\r\n        else\r\n          error(('Bad token (no more tokens expected) got \\'%s\\'. %s'):format(token, self:tokenlist()), 3)\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "table.remove(self.tokens, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "table.insert(self.tokens_done, token)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "if self.tokens[1] then\r\n          error(('Bad token, expected \\'%s\\' got \\'%s\\'. %s'):format(self.tokens[1], token, self:tokenlist()), 3)\r\n        else\r\n          error(('Bad token (no more tokens expected) got \\'%s\\'. %s'):format(token, self:tokenlist()), 3)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "error(('Bad token, expected \\'%s\\' got \\'%s\\'. %s'):format(self.tokens[1], token, self:tokenlist()), 3)",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "error(('Bad token (no more tokens expected) got \\'%s\\'. %s'):format(token, self:tokenlist()), 3)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "for i, t in ipairs(self.tokens) do\r\n        if t == token then\r\n          table.remove(self.tokens, i)\r\n          table.insert(self.tokens_done, token)\r\n          token = nil\r\n          break\r\n        end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 46,
    "text": "if t == token then\r\n          table.remove(self.tokens, i)\r\n          table.insert(self.tokens_done, token)\r\n          token = nil\r\n          break\r\n        end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "table.remove(self.tokens, i)",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "token = nil",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "if token then\r\n        error(('Unknown token \\'%s\\'. %s'):format(token, self:tokenlist()), 3)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "error(('Unknown token \\'%s\\'. %s'):format(token, self:tokenlist()), 3)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "if not next(self.tokens) then\r\n    -- no more tokens, so we're really done...\r\n    self.done_cb()\r\n  end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "self.done_cb()",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "function(done_callback)\r\n  local obj = {\r\n    tokens = {},\r\n    tokens_done = {},\r\n    done_cb = done_callback,\r\n    ordered = true,  -- default for sign off of tokens\r\n  }\r\n\r\n  return setmetatable( obj, {\r\n    __call = function(self, ...)\r\n      self:_done(...)\r\n    end,\r\n    __index = M,\r\n  })\r\nend",
    "type": "function"
  }, {
    "id": 55,
    "text": "local obj = {\r\n    tokens = {},\r\n    tokens_done = {},\r\n    done_cb = done_callback,\r\n    ordered = true,  -- default for sign off of tokens\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function(self, ...)\r\n      self:_done(...)\r\n    end",
    "type": "function"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "",
    "type": "function container"
  }, {
    "id": 60,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 61,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 62,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 63,
    "text": "next",
    "type": "global function"
  }, {
    "id": 64,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 65,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 66,
    "text": "type",
    "type": "global function"
  }, {
    "id": 67,
    "text": "error",
    "type": "global function"
  }, {
    "id": 68,
    "text": "done_cb",
    "type": "global function"
  }, {
    "id": 69,
    "text": "",
    "type": "variable container"
  }, {
    "id": 70,
    "text": "",
    "type": "require container"
  }, {
    "id": 71,
    "text": "",
    "type": "local variable"
  }, {
    "id": 72,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 73,
    "text": "",
    "type": "global variable"
  }, {
    "id": 74,
    "text": "",
    "type": "n/a"
  }, {
    "id": 75,
    "text": "",
    "type": "global variable"
  }, {
    "id": 76,
    "text": "",
    "type": "n/a"
  }, {
    "id": 77,
    "text": "",
    "type": "global variable"
  }, {
    "id": 78,
    "text": "",
    "type": "n/a"
  }, {
    "id": 79,
    "text": "",
    "type": "global variable"
  }, {
    "id": 80,
    "text": "",
    "type": "n/a"
  }, {
    "id": 81,
    "text": "",
    "type": "global variable"
  }, {
    "id": 82,
    "text": "",
    "type": "n/a"
  }, {
    "id": 83,
    "text": "",
    "type": "global variable"
  }, {
    "id": 84,
    "text": "",
    "type": "n/a"
  }, {
    "id": 85,
    "text": "",
    "type": "global variable"
  }, {
    "id": 86,
    "text": "",
    "type": "n/a"
  }, {
    "id": 87,
    "text": "",
    "type": "interface container"
  }, {
    "id": 88,
    "text": "",
    "type": "interface"
  } ]
}