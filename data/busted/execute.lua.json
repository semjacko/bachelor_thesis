{
  "_filename": "execute.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/busted/busted/execute.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 12,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 12,
    "label": "has",
    "to": 22
  }, {
    "from": 9,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 23,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 23,
    "label": "has",
    "to": 32
  }, {
    "from": 23,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 33,
    "label": "has",
    "to": 37
  }, {
    "from": 23,
    "label": "has",
    "to": 38
  }, {
    "from": 23,
    "label": "has",
    "to": 39
  }, {
    "from": 9,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 13
  }, {
    "from": 41,
    "label": "has",
    "to": 14
  }, {
    "from": 41,
    "label": "has",
    "to": 15
  }, {
    "from": 41,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 41,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 41,
    "label": "has",
    "to": 22
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 6
  }, {
    "from": 43,
    "label": "has",
    "to": 7
  }, {
    "from": 43,
    "label": "has",
    "to": 7
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 12,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 12,
    "label": "has",
    "to": 22
  }, {
    "from": 9,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 23,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 23,
    "label": "has",
    "to": 32
  }, {
    "from": 23,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 33,
    "label": "has",
    "to": 37
  }, {
    "from": 23,
    "label": "has",
    "to": 38
  }, {
    "from": 23,
    "label": "has",
    "to": 39
  }, {
    "from": 45,
    "label": "has",
    "to": 7
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 9,
    "label": "calls",
    "to": 62
  }, {
    "from": 9,
    "label": "calls",
    "to": 62
  }, {
    "from": 9,
    "label": "calls",
    "to": 62
  }, {
    "from": 9,
    "label": "calls",
    "to": 62
  }, {
    "from": 9,
    "label": "calls",
    "to": 51
  }, {
    "from": 9,
    "label": "calls",
    "to": 63
  }, {
    "from": 9,
    "label": "calls",
    "to": 63
  }, {
    "from": 9,
    "label": "calls",
    "to": 49
  }, {
    "from": 9,
    "label": "calls",
    "to": 64
  }, {
    "from": 9,
    "label": "calls",
    "to": 64
  }, {
    "from": 9,
    "label": "calls",
    "to": 64
  }, {
    "from": 9,
    "label": "calls",
    "to": 54
  }, {
    "from": 9,
    "label": "calls",
    "to": 65
  }, {
    "from": 4,
    "label": "calls",
    "to": 59
  }, {
    "from": 9,
    "label": "calls",
    "to": 61
  }, {
    "from": 9,
    "label": "calls",
    "to": 4
  }, {
    "from": 9,
    "label": "calls",
    "to": 53
  }, {
    "from": 9,
    "label": "calls",
    "to": 57
  }, {
    "from": 9,
    "label": "calls",
    "to": 60
  }, {
    "from": 9,
    "label": "calls",
    "to": 58
  }, {
    "from": 9,
    "label": "calls",
    "to": 58
  }, {
    "from": 9,
    "label": "calls",
    "to": 58
  }, {
    "from": 9,
    "label": "calls",
    "to": 52
  }, {
    "from": 9,
    "label": "calls",
    "to": 56
  }, {
    "from": 9,
    "label": "calls",
    "to": 50
  }, {
    "from": 48,
    "label": "calls",
    "to": 66
  }, {
    "from": 48,
    "label": "calls",
    "to": 66
  }, {
    "from": 48,
    "label": "calls",
    "to": 66
  }, {
    "from": 48,
    "label": "calls",
    "to": 66
  }, {
    "from": 9,
    "label": "calls",
    "to": 41
  }, {
    "from": 9,
    "label": "calls",
    "to": 55
  }, {
    "from": 2,
    "label": "contains",
    "to": 48
  }, {
    "from": 48,
    "label": "declares",
    "to": 4
  }, {
    "from": 48,
    "label": "declares",
    "to": 9
  }, {
    "from": 48,
    "label": "declares",
    "to": 41
  }, {
    "from": 48,
    "label": "declares",
    "to": 43
  }, {
    "from": 48,
    "label": "declares",
    "to": 45
  }, {
    "from": 2,
    "label": "contains",
    "to": 68
  }, {
    "from": 2,
    "label": "contains",
    "to": 69
  }, {
    "from": 69,
    "label": "initializes",
    "to": 70
  }, {
    "from": 70,
    "label": "requires",
    "to": 3
  }, {
    "from": 69,
    "label": "initializes",
    "to": 71
  }, {
    "from": 71,
    "label": "requires",
    "to": 3
  }, {
    "from": 69,
    "label": "initializes",
    "to": 72
  }, {
    "from": 72,
    "label": "requires",
    "to": 67
  }, {
    "from": 69,
    "label": "initializes",
    "to": 73
  }, {
    "from": 73,
    "label": "requires",
    "to": 1
  }, {
    "from": 2,
    "label": "provides",
    "to": 74
  }, {
    "from": 74,
    "label": "provides",
    "to": 75
  }, {
    "from": 76,
    "label": "requires",
    "to": 2
  }, {
    "from": 5,
    "label": "hasArgument",
    "to": 43
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "block",
    "type": "module"
  }, {
    "id": 2,
    "text": "execute",
    "type": "module"
  }, {
    "id": 3,
    "text": "utils",
    "type": "module"
  }, {
    "id": 4,
    "text": "local function sort(elements)\r\n  table.sort(elements, function(t1, t2)\r\n    if t1.name and t2.name then\r\n      return t1.name < t2.name\r\n    end\r\n    return t2.name ~= nil\r\n  end)\r\n  return elements\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "table.sort(elements, function(t1, t2)\r\n    if t1.name and t2.name then\r\n      return t1.name < t2.name\r\n    end\r\n    return t2.name ~= nil\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "if t1.name and t2.name then\r\n      return t1.name < t2.name\r\n    end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "local function execute(runs, options)\r\n    local root = busted.context.get()\r\n    local children = tablex.copy(busted.context.children(root))\r\n\r\n    local function suite_reset()\r\n      local oldctx = busted.context.get()\r\n\r\n      busted.context.clear()\r\n      local ctx = busted.context.get()\r\n      for k, v in pairs(oldctx) do\r\n        ctx[k] = v\r\n      end\r\n\r\n      for _, child in ipairs(children) do\r\n        for descriptor, _ in pairs(busted.executors) do\r\n          child[descriptor] = nil\r\n        end\r\n        busted.context.attach(child)\r\n      end\r\n\r\n      busted.randomseed = tonumber(options.seed) or urandom() or os.time()\r\n    end\r\n\r\n    for i = 1, runs do\r\n      if i > 1 then\r\n        suite_reset()\r\n        root = busted.context.get()\r\n        busted.safe_publish('suite', { 'suite', 'reset' }, root, i, runs)\r\n      end\r\n\r\n      if options.sort then\r\n        sort(busted.context.children(root))\r\n      elseif options.shuffle then\r\n        root.randomseed = busted.randomseed\r\n        shuffle(busted.context.children(root), busted.randomseed)\r\n      end\r\n\r\n      local seed = (busted.randomize and busted.randomseed or nil)\r\n      if busted.safe_publish('suite', { 'suite', 'start' }, root, i, runs, seed) then\r\n        if block.setup(root) then\r\n          busted.execute()\r\n        end\r\n        block.lazyTeardown(root)\r\n        block.teardown(root)\r\n      end\r\n      busted.safe_publish('suite', { 'suite', 'end' }, root, i, runs)\r\n\r\n      if busted.skipAll then\r\n        break\r\n      end\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 10,
    "text": "local root = busted.context.get()",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "local children = tablex.copy(busted.context.children(root))",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "local function suite_reset()\r\n      local oldctx = busted.context.get()\r\n\r\n      busted.context.clear()\r\n      local ctx = busted.context.get()\r\n      for k, v in pairs(oldctx) do\r\n        ctx[k] = v\r\n      end\r\n\r\n      for _, child in ipairs(children) do\r\n        for descriptor, _ in pairs(busted.executors) do\r\n          child[descriptor] = nil\r\n        end\r\n        busted.context.attach(child)\r\n      end\r\n\r\n      busted.randomseed = tonumber(options.seed) or urandom() or os.time()\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 13,
    "text": "local oldctx = busted.context.get()",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "busted.context.clear()",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "local ctx = busted.context.get()",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "for k, v in pairs(oldctx) do\r\n        ctx[k] = v\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 17,
    "text": "ctx[k] = v",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "for _, child in ipairs(children) do\r\n        for descriptor, _ in pairs(busted.executors) do\r\n          child[descriptor] = nil\r\n        end\r\n        busted.context.attach(child)\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 19,
    "text": "for descriptor, _ in pairs(busted.executors) do\r\n          child[descriptor] = nil\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 20,
    "text": "child[descriptor] = nil",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "busted.context.attach(child)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "busted.randomseed = tonumber(options.seed) or urandom() or os.time()",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "for i = 1, runs do\r\n      if i > 1 then\r\n        suite_reset()\r\n        root = busted.context.get()\r\n        busted.safe_publish('suite', { 'suite', 'reset' }, root, i, runs)\r\n      end\r\n\r\n      if options.sort then\r\n        sort(busted.context.children(root))\r\n      elseif options.shuffle then\r\n        root.randomseed = busted.randomseed\r\n        shuffle(busted.context.children(root), busted.randomseed)\r\n      end\r\n\r\n      local seed = (busted.randomize and busted.randomseed or nil)\r\n      if busted.safe_publish('suite', { 'suite', 'start' }, root, i, runs, seed) then\r\n        if block.setup(root) then\r\n          busted.execute()\r\n        end\r\n        block.lazyTeardown(root)\r\n        block.teardown(root)\r\n      end\r\n      busted.safe_publish('suite', { 'suite', 'end' }, root, i, runs)\r\n\r\n      if busted.skipAll then\r\n        break\r\n      end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 24,
    "text": "if i > 1 then\r\n        suite_reset()\r\n        root = busted.context.get()\r\n        busted.safe_publish('suite', { 'suite', 'reset' }, root, i, runs)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "suite_reset()",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "root = busted.context.get()",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "busted.safe_publish('suite', { 'suite', 'reset' }, root, i, runs)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "if options.sort then\r\n        sort(busted.context.children(root))\r\n      elseif options.shuffle then\r\n        root.randomseed = busted.randomseed\r\n        shuffle(busted.context.children(root), busted.randomseed)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "sort(busted.context.children(root))",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "root.randomseed = busted.randomseed",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "shuffle(busted.context.children(root), busted.randomseed)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "local seed = (busted.randomize and busted.randomseed or nil)",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "if busted.safe_publish('suite', { 'suite', 'start' }, root, i, runs, seed) then\r\n        if block.setup(root) then\r\n          busted.execute()\r\n        end\r\n        block.lazyTeardown(root)\r\n        block.teardown(root)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "if block.setup(root) then\r\n          busted.execute()\r\n        end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "busted.execute()",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "block.lazyTeardown(root)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "block.teardown(root)",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "busted.safe_publish('suite', { 'suite', 'end' }, root, i, runs)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "if busted.skipAll then\r\n        break\r\n      end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "local function suite_reset()\r\n      local oldctx = busted.context.get()\r\n\r\n      busted.context.clear()\r\n      local ctx = busted.context.get()\r\n      for k, v in pairs(oldctx) do\r\n        ctx[k] = v\r\n      end\r\n\r\n      for _, child in ipairs(children) do\r\n        for descriptor, _ in pairs(busted.executors) do\r\n          child[descriptor] = nil\r\n        end\r\n        busted.context.attach(child)\r\n      end\r\n\r\n      busted.randomseed = tonumber(options.seed) or urandom() or os.time()\r\n    end",
    "type": "function"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function(t1, t2)\r\n    if t1.name and t2.name then\r\n      return t1.name < t2.name\r\n    end\r\n    return t2.name ~= nil\r\n  end",
    "type": "function"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function(busted)\r\n  local block = require 'busted.block'(busted)\r\n\r\n  local function execute(runs, options)\r\n    local root = busted.context.get()\r\n    local children = tablex.copy(busted.context.children(root))\r\n\r\n    local function suite_reset()\r\n      local oldctx = busted.context.get()\r\n\r\n      busted.context.clear()\r\n      local ctx = busted.context.get()\r\n      for k, v in pairs(oldctx) do\r\n        ctx[k] = v\r\n      end\r\n\r\n      for _, child in ipairs(children) do\r\n        for descriptor, _ in pairs(busted.executors) do\r\n          child[descriptor] = nil\r\n        end\r\n        busted.context.attach(child)\r\n      end\r\n\r\n      busted.randomseed = tonumber(options.seed) or urandom() or os.time()\r\n    end\r\n\r\n    for i = 1, runs do\r\n      if i > 1 then\r\n        suite_reset()\r\n        root = busted.context.get()\r\n        busted.safe_publish('suite', { 'suite', 'reset' }, root, i, runs)\r\n      end\r\n\r\n      if options.sort then\r\n        sort(busted.context.children(root))\r\n      elseif options.shuffle then\r\n        root.randomseed = busted.randomseed\r\n        shuffle(busted.context.children(root), busted.randomseed)\r\n      end\r\n\r\n      local seed = (busted.randomize and busted.randomseed or nil)\r\n      if busted.safe_publish('suite', { 'suite', 'start' }, root, i, runs, seed) then\r\n        if block.setup(root) then\r\n          busted.execute()\r\n        end\r\n        block.lazyTeardown(root)\r\n        block.teardown(root)\r\n      end\r\n      busted.safe_publish('suite', { 'suite', 'end' }, root, i, runs)\r\n\r\n      if busted.skipAll then\r\n        break\r\n      end\r\n    end\r\n  end\r\n\r\n  return execute\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "local block = require 'busted.block'(busted)",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "",
    "type": "function container"
  }, {
    "id": 49,
    "text": "setup",
    "type": "global function"
  }, {
    "id": 50,
    "text": "copy",
    "type": "global function"
  }, {
    "id": 51,
    "text": "teardown",
    "type": "global function"
  }, {
    "id": 52,
    "text": "lazyTeardown",
    "type": "global function"
  }, {
    "id": 53,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 54,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 55,
    "text": "time",
    "type": "global function"
  }, {
    "id": 56,
    "text": "execute",
    "type": "global function"
  }, {
    "id": 57,
    "text": "shuffle",
    "type": "global function"
  }, {
    "id": 58,
    "text": "safe_publish",
    "type": "global function"
  }, {
    "id": 59,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 60,
    "text": "busted.context.clear",
    "type": "global function"
  }, {
    "id": 61,
    "text": "urandom",
    "type": "global function"
  }, {
    "id": 62,
    "text": "busted.context.get",
    "type": "global function"
  }, {
    "id": 63,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 64,
    "text": "busted.context.children",
    "type": "global function"
  }, {
    "id": 65,
    "text": "busted.context.attach",
    "type": "global function"
  }, {
    "id": 66,
    "text": "require",
    "type": "global function"
  }, {
    "id": 67,
    "text": "tablex",
    "type": "module"
  }, {
    "id": 68,
    "text": "",
    "type": "variable container"
  }, {
    "id": 69,
    "text": "",
    "type": "require container"
  }, {
    "id": 70,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 71,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 72,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 73,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 74,
    "text": "",
    "type": "interface container"
  }, {
    "id": 75,
    "text": "",
    "type": "interface"
  }, {
    "id": 76,
    "text": "",
    "type": "require local variable"
  } ]
}