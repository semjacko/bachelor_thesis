{
  "_filename": "base.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/busted/busted/outputHandlers/base.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 6,
    "label": "has",
    "to": 11
  }, {
    "from": 6,
    "label": "has",
    "to": 12
  }, {
    "from": 6,
    "label": "has",
    "to": 13
  }, {
    "from": 6,
    "label": "has",
    "to": 14
  }, {
    "from": 6,
    "label": "has",
    "to": 15
  }, {
    "from": 6,
    "label": "has",
    "to": 16
  }, {
    "from": 6,
    "label": "has",
    "to": 17
  }, {
    "from": 6,
    "label": "has",
    "to": 18
  }, {
    "from": 6,
    "label": "has",
    "to": 19
  }, {
    "from": 6,
    "label": "has",
    "to": 20
  }, {
    "from": 6,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 22,
    "label": "has",
    "to": 4
  }, {
    "from": 22,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 29,
    "label": "has",
    "to": 4
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 29,
    "label": "has",
    "to": 4
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 4
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 4
  }, {
    "from": 39,
    "label": "has",
    "to": 4
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 4
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 46,
    "label": "has",
    "to": 49
  }, {
    "from": 46,
    "label": "has",
    "to": 50
  }, {
    "from": 46,
    "label": "has",
    "to": 51
  }, {
    "from": 46,
    "label": "has",
    "to": 52
  }, {
    "from": 46,
    "label": "has",
    "to": 53
  }, {
    "from": 46,
    "label": "has",
    "to": 54
  }, {
    "from": 46,
    "label": "has",
    "to": 55
  }, {
    "from": 46,
    "label": "has",
    "to": 4
  }, {
    "from": 46,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 57,
    "label": "has",
    "to": 4
  }, {
    "from": 57,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 4
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 66,
    "label": "has",
    "to": 70
  }, {
    "from": 66,
    "label": "has",
    "to": 71
  }, {
    "from": 66,
    "label": "has",
    "to": 72
  }, {
    "from": 64,
    "label": "has",
    "to": 4
  }, {
    "from": 64,
    "label": "has",
    "to": 4
  }, {
    "from": 64,
    "label": "has",
    "to": 73
  }, {
    "from": 64,
    "label": "has",
    "to": 74
  }, {
    "from": 64,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 75,
    "label": "has",
    "to": 78
  }, {
    "from": 64,
    "label": "has",
    "to": 79
  }, {
    "from": 64,
    "label": "has",
    "to": 4
  }, {
    "from": 64,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 74
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 81,
    "label": "has",
    "to": 4
  }, {
    "from": 81,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 4
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 88,
    "label": "has",
    "to": 4
  }, {
    "from": 88,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 89
  }, {
    "from": 93,
    "label": "has",
    "to": 90
  }, {
    "from": 92,
    "label": "has",
    "to": 4
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 95,
    "label": "has",
    "to": 97
  }, {
    "from": 95,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 4
  }, {
    "from": 95,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 7
  }, {
    "from": 99,
    "label": "has",
    "to": 8
  }, {
    "from": 99,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 99,
    "label": "has",
    "to": 11
  }, {
    "from": 99,
    "label": "has",
    "to": 12
  }, {
    "from": 99,
    "label": "has",
    "to": 13
  }, {
    "from": 99,
    "label": "has",
    "to": 14
  }, {
    "from": 99,
    "label": "has",
    "to": 15
  }, {
    "from": 99,
    "label": "has",
    "to": 16
  }, {
    "from": 99,
    "label": "has",
    "to": 17
  }, {
    "from": 99,
    "label": "has",
    "to": 18
  }, {
    "from": 99,
    "label": "has",
    "to": 19
  }, {
    "from": 99,
    "label": "has",
    "to": 20
  }, {
    "from": 95,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 23
  }, {
    "from": 100,
    "label": "has",
    "to": 24
  }, {
    "from": 100,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 100,
    "label": "has",
    "to": 4
  }, {
    "from": 95,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 29,
    "label": "has",
    "to": 4
  }, {
    "from": 101,
    "label": "has",
    "to": 36
  }, {
    "from": 101,
    "label": "has",
    "to": 37
  }, {
    "from": 101,
    "label": "has",
    "to": 4
  }, {
    "from": 95,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 40
  }, {
    "from": 102,
    "label": "has",
    "to": 4
  }, {
    "from": 102,
    "label": "has",
    "to": 4
  }, {
    "from": 95,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 43
  }, {
    "from": 103,
    "label": "has",
    "to": 44
  }, {
    "from": 103,
    "label": "has",
    "to": 4
  }, {
    "from": 95,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 47
  }, {
    "from": 104,
    "label": "has",
    "to": 48
  }, {
    "from": 104,
    "label": "has",
    "to": 49
  }, {
    "from": 104,
    "label": "has",
    "to": 50
  }, {
    "from": 104,
    "label": "has",
    "to": 51
  }, {
    "from": 104,
    "label": "has",
    "to": 52
  }, {
    "from": 104,
    "label": "has",
    "to": 53
  }, {
    "from": 104,
    "label": "has",
    "to": 54
  }, {
    "from": 104,
    "label": "has",
    "to": 55
  }, {
    "from": 104,
    "label": "has",
    "to": 4
  }, {
    "from": 95,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 58
  }, {
    "from": 105,
    "label": "has",
    "to": 59
  }, {
    "from": 105,
    "label": "has",
    "to": 4
  }, {
    "from": 95,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 62
  }, {
    "from": 106,
    "label": "has",
    "to": 4
  }, {
    "from": 95,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 65
  }, {
    "from": 107,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 66,
    "label": "has",
    "to": 70
  }, {
    "from": 66,
    "label": "has",
    "to": 71
  }, {
    "from": 66,
    "label": "has",
    "to": 72
  }, {
    "from": 107,
    "label": "has",
    "to": 4
  }, {
    "from": 107,
    "label": "has",
    "to": 4
  }, {
    "from": 107,
    "label": "has",
    "to": 73
  }, {
    "from": 107,
    "label": "has",
    "to": 74
  }, {
    "from": 107,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 75,
    "label": "has",
    "to": 78
  }, {
    "from": 107,
    "label": "has",
    "to": 79
  }, {
    "from": 107,
    "label": "has",
    "to": 4
  }, {
    "from": 95,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 74
  }, {
    "from": 108,
    "label": "has",
    "to": 82
  }, {
    "from": 108,
    "label": "has",
    "to": 83
  }, {
    "from": 108,
    "label": "has",
    "to": 4
  }, {
    "from": 95,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 86
  }, {
    "from": 109,
    "label": "has",
    "to": 4
  }, {
    "from": 95,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 89
  }, {
    "from": 110,
    "label": "has",
    "to": 90
  }, {
    "from": 110,
    "label": "has",
    "to": 4
  }, {
    "from": 95,
    "label": "has",
    "to": 111
  }, {
    "from": 111,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 89
  }, {
    "from": 93,
    "label": "has",
    "to": 90
  }, {
    "from": 111,
    "label": "has",
    "to": 4
  }, {
    "from": 95,
    "label": "has",
    "to": 4
  }, {
    "from": 95,
    "label": "has",
    "to": 112
  }, {
    "from": 113,
    "label": "calls",
    "to": 22
  }, {
    "from": 113,
    "label": "calls",
    "to": 117
  }, {
    "from": 113,
    "label": "calls",
    "to": 114
  }, {
    "from": 113,
    "label": "calls",
    "to": 114
  }, {
    "from": 113,
    "label": "calls",
    "to": 116
  }, {
    "from": 113,
    "label": "calls",
    "to": 116
  }, {
    "from": 113,
    "label": "calls",
    "to": 116
  }, {
    "from": 113,
    "label": "calls",
    "to": 116
  }, {
    "from": 113,
    "label": "calls",
    "to": 116
  }, {
    "from": 113,
    "label": "calls",
    "to": 29
  }, {
    "from": 113,
    "label": "calls",
    "to": 115
  }, {
    "from": 113,
    "label": "calls",
    "to": 115
  }, {
    "from": 113,
    "label": "calls",
    "to": 115
  }, {
    "from": 113,
    "label": "calls",
    "to": 115
  }, {
    "from": 113,
    "label": "calls",
    "to": 115
  }, {
    "from": 113,
    "label": "calls",
    "to": 115
  }, {
    "from": 113,
    "label": "calls",
    "to": 115
  }, {
    "from": 113,
    "label": "calls",
    "to": 115
  }, {
    "from": 113,
    "label": "calls",
    "to": 115
  }, {
    "from": 113,
    "label": "calls",
    "to": 115
  }, {
    "from": 113,
    "label": "calls",
    "to": 35
  }, {
    "from": 113,
    "label": "calls",
    "to": 35
  }, {
    "from": 113,
    "label": "calls",
    "to": 35
  }, {
    "from": 113,
    "label": "calls",
    "to": 35
  }, {
    "from": 29,
    "label": "calls",
    "to": 119
  }, {
    "from": 113,
    "label": "calls",
    "to": 121
  }, {
    "from": 113,
    "label": "calls",
    "to": 121
  }, {
    "from": 113,
    "label": "calls",
    "to": 121
  }, {
    "from": 113,
    "label": "calls",
    "to": 118
  }, {
    "from": 113,
    "label": "calls",
    "to": 118
  }, {
    "from": 113,
    "label": "calls",
    "to": 118
  }, {
    "from": 113,
    "label": "calls",
    "to": 120
  }, {
    "from": 1,
    "label": "contains",
    "to": 113
  }, {
    "from": 113,
    "label": "declares",
    "to": 3
  }, {
    "from": 113,
    "label": "declares",
    "to": 6
  }, {
    "from": 113,
    "label": "declares",
    "to": 22
  }, {
    "from": 113,
    "label": "declares",
    "to": 29
  }, {
    "from": 113,
    "label": "declares",
    "to": 35
  }, {
    "from": 113,
    "label": "declares",
    "to": 39
  }, {
    "from": 113,
    "label": "declares",
    "to": 42
  }, {
    "from": 113,
    "label": "declares",
    "to": 46
  }, {
    "from": 113,
    "label": "declares",
    "to": 57
  }, {
    "from": 113,
    "label": "declares",
    "to": 61
  }, {
    "from": 113,
    "label": "declares",
    "to": 64
  }, {
    "from": 113,
    "label": "declares",
    "to": 81
  }, {
    "from": 113,
    "label": "declares",
    "to": 85
  }, {
    "from": 113,
    "label": "declares",
    "to": 88
  }, {
    "from": 113,
    "label": "declares",
    "to": 92
  }, {
    "from": 113,
    "label": "declares",
    "to": 95
  }, {
    "from": 1,
    "label": "contains",
    "to": 123
  }, {
    "from": 1,
    "label": "contains",
    "to": 124
  }, {
    "from": 124,
    "label": "initializes",
    "to": 125
  }, {
    "from": 125,
    "label": "requires",
    "to": 2
  }, {
    "from": 124,
    "label": "initializes",
    "to": 122
  }, {
    "from": 122,
    "label": "requires",
    "to": 126
  }, {
    "from": 124,
    "label": "initializes",
    "to": 122
  }, {
    "from": 122,
    "label": "requires",
    "to": 127
  }, {
    "from": 1,
    "label": "provides",
    "to": 128
  }, {
    "from": 128,
    "label": "provides",
    "to": 129
  }, {
    "from": 130,
    "label": "requires",
    "to": 1
  }, {
    "from": 131,
    "label": "requires",
    "to": 1
  }, {
    "from": 132,
    "label": "requires",
    "to": 1
  }, {
    "from": 133,
    "label": "requires",
    "to": 1
  }, {
    "from": 134,
    "label": "requires",
    "to": 1
  }, {
    "from": 135,
    "label": "requires",
    "to": 127
  }, {
    "from": 136,
    "label": "requires",
    "to": 1
  }, {
    "from": 137,
    "label": "requires",
    "to": 1
  }, {
    "from": 138,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "base",
    "type": "module"
  }, {
    "id": 2,
    "text": "busted",
    "type": "module"
  }, {
    "id": 3,
    "text": "function(element, parent, status)\r\n    return not ((element.descriptor == 'pending' or status == 'pending') and handler.options.suppressPending)\r\n  end",
    "type": "function"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "function(handler, options)\r\n    require('busted.languages.en')\r\n    handler.options = options\r\n\r\n    if options.language ~= 'en' then\r\n      require('busted.languages.' .. options.language)\r\n    end\r\n\r\n    busted.subscribe({ 'suite', 'reset' }, handler.baseSuiteReset, { priority = 1 })\r\n    busted.subscribe({ 'suite', 'start' }, handler.baseSuiteStart, { priority = 1 })\r\n    busted.subscribe({ 'suite', 'end' }, handler.baseSuiteEnd, { priority = 1 })\r\n    busted.subscribe({ 'test', 'start' }, handler.baseTestStart, { priority = 1, predicate = handler.cancelOnPending })\r\n    busted.subscribe({ 'test', 'end' }, handler.baseTestEnd, { priority = 1, predicate = handler.cancelOnPending })\r\n    busted.subscribe({ 'pending' }, handler.basePending, { priority = 1, predicate = handler.cancelOnPending })\r\n    busted.subscribe({ 'failure', 'it' }, handler.baseTestFailure, { priority = 1 })\r\n    busted.subscribe({ 'error', 'it' }, handler.baseTestError, { priority = 1 })\r\n    busted.subscribe({ 'failure' }, handler.baseError, { priority = 1 })\r\n    busted.subscribe({ 'error' }, handler.baseError, { priority = 1 })\r\n  end",
    "type": "function"
  }, {
    "id": 7,
    "text": "require('busted.languages.en')",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "handler.options = options",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "if options.language ~= 'en' then\r\n      require('busted.languages.' .. options.language)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "require('busted.languages.' .. options.language)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "busted.subscribe({ 'suite', 'reset' }, handler.baseSuiteReset, { priority = 1 })",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "busted.subscribe({ 'suite', 'start' }, handler.baseSuiteStart, { priority = 1 })",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "busted.subscribe({ 'suite', 'end' }, handler.baseSuiteEnd, { priority = 1 })",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "busted.subscribe({ 'test', 'start' }, handler.baseTestStart, { priority = 1, predicate = handler.cancelOnPending })",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "busted.subscribe({ 'test', 'end' }, handler.baseTestEnd, { priority = 1, predicate = handler.cancelOnPending })",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "busted.subscribe({ 'pending' }, handler.basePending, { priority = 1, predicate = handler.cancelOnPending })",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "busted.subscribe({ 'failure', 'it' }, handler.baseTestFailure, { priority = 1 })",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "busted.subscribe({ 'error', 'it' }, handler.baseTestError, { priority = 1 })",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "busted.subscribe({ 'failure' }, handler.baseError, { priority = 1 })",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "busted.subscribe({ 'error' }, handler.baseError, { priority = 1 })",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function(context)\r\n    local parent = busted.parent(context)\r\n    local names = { (context.name or context.descriptor) }\r\n\r\n    while parent and (parent.name or parent.descriptor) and\r\n          parent.descriptor ~= 'file' do\r\n\r\n      table.insert(names, 1, parent.name or parent.descriptor)\r\n      parent = busted.parent(parent)\r\n    end\r\n\r\n    return table.concat(names, ' ')\r\n  end",
    "type": "function"
  }, {
    "id": 23,
    "text": "local parent = busted.parent(context)",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "local names = { (context.name or context.descriptor) }",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "while parent and (parent.name or parent.descriptor) and\r\n          parent.descriptor ~= 'file' do\r\n\r\n      table.insert(names, 1, parent.name or parent.descriptor)\r\n      parent = busted.parent(parent)\r\n    end",
    "type": "statement:while"
  }, {
    "id": 26,
    "text": "table.insert(names, 1, parent.name or parent.descriptor)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "parent = busted.parent(parent)",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "local function copyElement(e)\r\n      local copy = {}\r\n      for k,v in next, e do\r\n        if type(v) ~= 'function' and k ~= 'env' then\r\n          copy[k] = v\r\n        end\r\n      end\r\n      return copy\r\n    end",
    "type": "function"
  }, {
    "id": 30,
    "text": "local copy = {}",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "for k,v in next, e do\r\n        if type(v) ~= 'function' and k ~= 'env' then\r\n          copy[k] = v\r\n        end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 32,
    "text": "if type(v) ~= 'function' and k ~= 'env' then\r\n          copy[k] = v\r\n        end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "copy[k] = v",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function(element, parent, message, debug, isError)\r\n    local function copyElement(e)\r\n      local copy = {}\r\n      for k,v in next, e do\r\n        if type(v) ~= 'function' and k ~= 'env' then\r\n          copy[k] = v\r\n        end\r\n      end\r\n      return copy\r\n    end\r\n\r\n    local formatted = {\r\n      trace = debug or element.trace,\r\n      element = copyElement(element),\r\n      name = handler.getFullName(element),\r\n      message = message,\r\n      randomseed = parent and parent.randomseed,\r\n      isError = isError\r\n    }\r\n    formatted.element.trace = element.trace or debug\r\n\r\n    return formatted\r\n  end",
    "type": "function"
  }, {
    "id": 36,
    "text": "local formatted = {\r\n      trace = debug or element.trace,\r\n      element = copyElement(element),\r\n      name = handler.getFullName(element),\r\n      message = message,\r\n      randomseed = parent and parent.randomseed,\r\n      isError = isError\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "formatted.element.trace = element.trace or debug",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function()\r\n    if not handler.endTick or not handler.startTick then\r\n      return 0\r\n    end\r\n\r\n    return handler.endTick - handler.startTick\r\n  end",
    "type": "function"
  }, {
    "id": 40,
    "text": "if not handler.endTick or not handler.startTick then\r\n      return 0\r\n    end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function(suite)\r\n    handler.startTick = suite.starttick\r\n    handler.startTime = suite.starttime\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 43,
    "text": "handler.startTick = suite.starttick",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "handler.startTime = suite.starttime",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function()\r\n    handler.successes = {}\r\n    handler.successesCount = 0\r\n    handler.pendings = {}\r\n    handler.pendingsCount = 0\r\n    handler.failures = {}\r\n    handler.failuresCount = 0\r\n    handler.errors = {}\r\n    handler.errorsCount = 0\r\n    handler.inProgress = {}\r\n\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 47,
    "text": "handler.successes = {}",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "handler.successesCount = 0",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "handler.pendings = {}",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "handler.pendingsCount = 0",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "handler.failures = {}",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "handler.failuresCount = 0",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "handler.errors = {}",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "handler.errorsCount = 0",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "handler.inProgress = {}",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function(suite)\r\n    handler.endTick = suite.endtick\r\n    handler.endTime = suite.endtime\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 58,
    "text": "handler.endTick = suite.endtick",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "handler.endTime = suite.endtime",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function(element, parent)\r\n    handler.inProgress[tostring(element)] = {}\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 62,
    "text": "handler.inProgress[tostring(element)] = {}",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "function(element, parent, status, debug)\r\n    local insertTable\r\n\r\n    if status == 'success' then\r\n      insertTable = handler.successes\r\n      handler.successesCount = handler.successesCount + 1\r\n    elseif status == 'pending' then\r\n      insertTable = handler.pendings\r\n      handler.pendingsCount = handler.pendingsCount + 1\r\n    elseif status == 'failure' then\r\n      -- failure already saved in failure handler\r\n      handler.failuresCount = handler.failuresCount + 1\r\n      return nil, true\r\n    elseif status == 'error' then\r\n      -- error count already incremented and saved in error handler\r\n      insertTable = handler.errors\r\n      return nil, true\r\n    end\r\n\r\n    local formatted = handler.format(element, parent, element.message, debug)\r\n\r\n    local id = tostring(element)\r\n    if handler.inProgress[id] then\r\n      for k, v in pairs(handler.inProgress[id]) do\r\n        formatted[k] = v\r\n      end\r\n\r\n      handler.inProgress[id] = nil\r\n    end\r\n\r\n    table.insert(insertTable, formatted)\r\n\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 65,
    "text": "local insertTable",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "if status == 'success' then\r\n      insertTable = handler.successes\r\n      handler.successesCount = handler.successesCount + 1\r\n    elseif status == 'pending' then\r\n      insertTable = handler.pendings\r\n      handler.pendingsCount = handler.pendingsCount + 1\r\n    elseif status == 'failure' then\r\n      -- failure already saved in failure handler\r\n      handler.failuresCount = handler.failuresCount + 1\r\n      return nil, true\r\n    elseif status == 'error' then\r\n      -- error count already incremented and saved in error handler\r\n      insertTable = handler.errors\r\n      return nil, true\r\n    end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "insertTable = handler.successes",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "handler.successesCount = handler.successesCount + 1",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "insertTable = handler.pendings",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "handler.pendingsCount = handler.pendingsCount + 1",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "handler.failuresCount = handler.failuresCount + 1",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "insertTable = handler.errors",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "local formatted = handler.format(element, parent, element.message, debug)",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "local id = tostring(element)",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "if handler.inProgress[id] then\r\n      for k, v in pairs(handler.inProgress[id]) do\r\n        formatted[k] = v\r\n      end\r\n\r\n      handler.inProgress[id] = nil\r\n    end",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "for k, v in pairs(handler.inProgress[id]) do\r\n        formatted[k] = v\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 77,
    "text": "formatted[k] = v",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "handler.inProgress[id] = nil",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "table.insert(insertTable, formatted)",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "function(element, parent, message, debug)\r\n    local id = tostring(element)\r\n    handler.inProgress[id].message = message\r\n    handler.inProgress[id].trace = debug\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 82,
    "text": "handler.inProgress[id].message = message",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "handler.inProgress[id].trace = debug",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "function(element, parent, message, debug)\r\n    table.insert(handler.failures, handler.format(element, parent, message, debug))\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 86,
    "text": "table.insert(handler.failures, handler.format(element, parent, message, debug))",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "function(element, parent, message, debug)\r\n    handler.errorsCount = handler.errorsCount + 1\r\n    table.insert(handler.errors, handler.format(element, parent, message, debug, true))\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 89,
    "text": "handler.errorsCount = handler.errorsCount + 1",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "table.insert(handler.errors, handler.format(element, parent, message, debug, true))",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "function(element, parent, message, debug)\r\n    if element.descriptor ~= 'it' then\r\n      handler.errorsCount = handler.errorsCount + 1\r\n      table.insert(handler.errors, handler.format(element, parent, message, debug, true))\r\n    end\r\n\r\n    return nil, true\r\n  end",
    "type": "function"
  }, {
    "id": 93,
    "text": "if element.descriptor ~= 'it' then\r\n      handler.errorsCount = handler.errorsCount + 1\r\n      table.insert(handler.errors, handler.format(element, parent, message, debug, true))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 94,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 95,
    "text": "function()\r\n  local busted = require 'busted'\r\n  local handler = {\r\n    successes = {},\r\n    successesCount = 0,\r\n    pendings = {},\r\n    pendingsCount = 0,\r\n    failures = {},\r\n    failuresCount = 0,\r\n    errors = {},\r\n    errorsCount = 0,\r\n    inProgress = {}\r\n  }\r\n\r\n  handler.cancelOnPending = function(element, parent, status)\r\n    return not ((element.descriptor == 'pending' or status == 'pending') and handler.options.suppressPending)\r\n  end\r\n\r\n  handler.subscribe = function(handler, options)\r\n    require('busted.languages.en')\r\n    handler.options = options\r\n\r\n    if options.language ~= 'en' then\r\n      require('busted.languages.' .. options.language)\r\n    end\r\n\r\n    busted.subscribe({ 'suite', 'reset' }, handler.baseSuiteReset, { priority = 1 })\r\n    busted.subscribe({ 'suite', 'start' }, handler.baseSuiteStart, { priority = 1 })\r\n    busted.subscribe({ 'suite', 'end' }, handler.baseSuiteEnd, { priority = 1 })\r\n    busted.subscribe({ 'test', 'start' }, handler.baseTestStart, { priority = 1, predicate = handler.cancelOnPending })\r\n    busted.subscribe({ 'test', 'end' }, handler.baseTestEnd, { priority = 1, predicate = handler.cancelOnPending })\r\n    busted.subscribe({ 'pending' }, handler.basePending, { priority = 1, predicate = handler.cancelOnPending })\r\n    busted.subscribe({ 'failure', 'it' }, handler.baseTestFailure, { priority = 1 })\r\n    busted.subscribe({ 'error', 'it' }, handler.baseTestError, { priority = 1 })\r\n    busted.subscribe({ 'failure' }, handler.baseError, { priority = 1 })\r\n    busted.subscribe({ 'error' }, handler.baseError, { priority = 1 })\r\n  end\r\n\r\n  handler.getFullName = function(context)\r\n    local parent = busted.parent(context)\r\n    local names = { (context.name or context.descriptor) }\r\n\r\n    while parent and (parent.name or parent.descriptor) and\r\n          parent.descriptor ~= 'file' do\r\n\r\n      table.insert(names, 1, parent.name or parent.descriptor)\r\n      parent = busted.parent(parent)\r\n    end\r\n\r\n    return table.concat(names, ' ')\r\n  end\r\n\r\n  handler.format = function(element, parent, message, debug, isError)\r\n    local function copyElement(e)\r\n      local copy = {}\r\n      for k,v in next, e do\r\n        if type(v) ~= 'function' and k ~= 'env' then\r\n          copy[k] = v\r\n        end\r\n      end\r\n      return copy\r\n    end\r\n\r\n    local formatted = {\r\n      trace = debug or element.trace,\r\n      element = copyElement(element),\r\n      name = handler.getFullName(element),\r\n      message = message,\r\n      randomseed = parent and parent.randomseed,\r\n      isError = isError\r\n    }\r\n    formatted.element.trace = element.trace or debug\r\n\r\n    return formatted\r\n  end\r\n\r\n  handler.getDuration = function()\r\n    if not handler.endTick or not handler.startTick then\r\n      return 0\r\n    end\r\n\r\n    return handler.endTick - handler.startTick\r\n  end\r\n\r\n  handler.baseSuiteStart = function(suite)\r\n    handler.startTick = suite.starttick\r\n    handler.startTime = suite.starttime\r\n    return nil, true\r\n  end\r\n\r\n  handler.baseSuiteReset = function()\r\n    handler.successes = {}\r\n    handler.successesCount = 0\r\n    handler.pendings = {}\r\n    handler.pendingsCount = 0\r\n    handler.failures = {}\r\n    handler.failuresCount = 0\r\n    handler.errors = {}\r\n    handler.errorsCount = 0\r\n    handler.inProgress = {}\r\n\r\n    return nil, true\r\n  end\r\n\r\n  handler.baseSuiteEnd = function(suite)\r\n    handler.endTick = suite.endtick\r\n    handler.endTime = suite.endtime\r\n    return nil, true\r\n  end\r\n\r\n  handler.baseTestStart = function(element, parent)\r\n    handler.inProgress[tostring(element)] = {}\r\n    return nil, true\r\n  end\r\n\r\n  handler.baseTestEnd = function(element, parent, status, debug)\r\n    local insertTable\r\n\r\n    if status == 'success' then\r\n      insertTable = handler.successes\r\n      handler.successesCount = handler.successesCount + 1\r\n    elseif status == 'pending' then\r\n      insertTable = handler.pendings\r\n      handler.pendingsCount = handler.pendingsCount + 1\r\n    elseif status == 'failure' then\r\n      -- failure already saved in failure handler\r\n      handler.failuresCount = handler.failuresCount + 1\r\n      return nil, true\r\n    elseif status == 'error' then\r\n      -- error count already incremented and saved in error handler\r\n      insertTable = handler.errors\r\n      return nil, true\r\n    end\r\n\r\n    local formatted = handler.format(element, parent, element.message, debug)\r\n\r\n    local id = tostring(element)\r\n    if handler.inProgress[id] then\r\n      for k, v in pairs(handler.inProgress[id]) do\r\n        formatted[k] = v\r\n      end\r\n\r\n      handler.inProgress[id] = nil\r\n    end\r\n\r\n    table.insert(insertTable, formatted)\r\n\r\n    return nil, true\r\n  end\r\n\r\n  handler.basePending = function(element, parent, message, debug)\r\n    local id = tostring(element)\r\n    handler.inProgress[id].message = message\r\n    handler.inProgress[id].trace = debug\r\n    return nil, true\r\n  end\r\n\r\n  handler.baseTestFailure = function(element, parent, message, debug)\r\n    table.insert(handler.failures, handler.format(element, parent, message, debug))\r\n    return nil, true\r\n  end\r\n\r\n  handler.baseTestError = function(element, parent, message, debug)\r\n    handler.errorsCount = handler.errorsCount + 1\r\n    table.insert(handler.errors, handler.format(element, parent, message, debug, true))\r\n    return nil, true\r\n  end\r\n\r\n  handler.baseError = function(element, parent, message, debug)\r\n    if element.descriptor ~= 'it' then\r\n      handler.errorsCount = handler.errorsCount + 1\r\n      table.insert(handler.errors, handler.format(element, parent, message, debug, true))\r\n    end\r\n\r\n    return nil, true\r\n  end\r\n\r\n  return handler\r\nend",
    "type": "function"
  }, {
    "id": 96,
    "text": "local busted = require 'busted'",
    "type": "statement:localassign"
  }, {
    "id": 97,
    "text": "local handler = {\r\n    successes = {},\r\n    successesCount = 0,\r\n    pendings = {},\r\n    pendingsCount = 0,\r\n    failures = {},\r\n    failuresCount = 0,\r\n    errors = {},\r\n    errorsCount = 0,\r\n    inProgress = {}\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 98,
    "text": "handler.cancelOnPending = function(element, parent, status)\r\n    return not ((element.descriptor == 'pending' or status == 'pending') and handler.options.suppressPending)\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "handler.subscribe = function(handler, options)\r\n    require('busted.languages.en')\r\n    handler.options = options\r\n\r\n    if options.language ~= 'en' then\r\n      require('busted.languages.' .. options.language)\r\n    end\r\n\r\n    busted.subscribe({ 'suite', 'reset' }, handler.baseSuiteReset, { priority = 1 })\r\n    busted.subscribe({ 'suite', 'start' }, handler.baseSuiteStart, { priority = 1 })\r\n    busted.subscribe({ 'suite', 'end' }, handler.baseSuiteEnd, { priority = 1 })\r\n    busted.subscribe({ 'test', 'start' }, handler.baseTestStart, { priority = 1, predicate = handler.cancelOnPending })\r\n    busted.subscribe({ 'test', 'end' }, handler.baseTestEnd, { priority = 1, predicate = handler.cancelOnPending })\r\n    busted.subscribe({ 'pending' }, handler.basePending, { priority = 1, predicate = handler.cancelOnPending })\r\n    busted.subscribe({ 'failure', 'it' }, handler.baseTestFailure, { priority = 1 })\r\n    busted.subscribe({ 'error', 'it' }, handler.baseTestError, { priority = 1 })\r\n    busted.subscribe({ 'failure' }, handler.baseError, { priority = 1 })\r\n    busted.subscribe({ 'error' }, handler.baseError, { priority = 1 })\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "handler.getFullName = function(context)\r\n    local parent = busted.parent(context)\r\n    local names = { (context.name or context.descriptor) }\r\n\r\n    while parent and (parent.name or parent.descriptor) and\r\n          parent.descriptor ~= 'file' do\r\n\r\n      table.insert(names, 1, parent.name or parent.descriptor)\r\n      parent = busted.parent(parent)\r\n    end\r\n\r\n    return table.concat(names, ' ')\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "handler.format = function(element, parent, message, debug, isError)\r\n    local function copyElement(e)\r\n      local copy = {}\r\n      for k,v in next, e do\r\n        if type(v) ~= 'function' and k ~= 'env' then\r\n          copy[k] = v\r\n        end\r\n      end\r\n      return copy\r\n    end\r\n\r\n    local formatted = {\r\n      trace = debug or element.trace,\r\n      element = copyElement(element),\r\n      name = handler.getFullName(element),\r\n      message = message,\r\n      randomseed = parent and parent.randomseed,\r\n      isError = isError\r\n    }\r\n    formatted.element.trace = element.trace or debug\r\n\r\n    return formatted\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "handler.getDuration = function()\r\n    if not handler.endTick or not handler.startTick then\r\n      return 0\r\n    end\r\n\r\n    return handler.endTick - handler.startTick\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "handler.baseSuiteStart = function(suite)\r\n    handler.startTick = suite.starttick\r\n    handler.startTime = suite.starttime\r\n    return nil, true\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 104,
    "text": "handler.baseSuiteReset = function()\r\n    handler.successes = {}\r\n    handler.successesCount = 0\r\n    handler.pendings = {}\r\n    handler.pendingsCount = 0\r\n    handler.failures = {}\r\n    handler.failuresCount = 0\r\n    handler.errors = {}\r\n    handler.errorsCount = 0\r\n    handler.inProgress = {}\r\n\r\n    return nil, true\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "handler.baseSuiteEnd = function(suite)\r\n    handler.endTick = suite.endtick\r\n    handler.endTime = suite.endtime\r\n    return nil, true\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "handler.baseTestStart = function(element, parent)\r\n    handler.inProgress[tostring(element)] = {}\r\n    return nil, true\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "handler.baseTestEnd = function(element, parent, status, debug)\r\n    local insertTable\r\n\r\n    if status == 'success' then\r\n      insertTable = handler.successes\r\n      handler.successesCount = handler.successesCount + 1\r\n    elseif status == 'pending' then\r\n      insertTable = handler.pendings\r\n      handler.pendingsCount = handler.pendingsCount + 1\r\n    elseif status == 'failure' then\r\n      -- failure already saved in failure handler\r\n      handler.failuresCount = handler.failuresCount + 1\r\n      return nil, true\r\n    elseif status == 'error' then\r\n      -- error count already incremented and saved in error handler\r\n      insertTable = handler.errors\r\n      return nil, true\r\n    end\r\n\r\n    local formatted = handler.format(element, parent, element.message, debug)\r\n\r\n    local id = tostring(element)\r\n    if handler.inProgress[id] then\r\n      for k, v in pairs(handler.inProgress[id]) do\r\n        formatted[k] = v\r\n      end\r\n\r\n      handler.inProgress[id] = nil\r\n    end\r\n\r\n    table.insert(insertTable, formatted)\r\n\r\n    return nil, true\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "handler.basePending = function(element, parent, message, debug)\r\n    local id = tostring(element)\r\n    handler.inProgress[id].message = message\r\n    handler.inProgress[id].trace = debug\r\n    return nil, true\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "handler.baseTestFailure = function(element, parent, message, debug)\r\n    table.insert(handler.failures, handler.format(element, parent, message, debug))\r\n    return nil, true\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 110,
    "text": "handler.baseTestError = function(element, parent, message, debug)\r\n    handler.errorsCount = handler.errorsCount + 1\r\n    table.insert(handler.errors, handler.format(element, parent, message, debug, true))\r\n    return nil, true\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 111,
    "text": "handler.baseError = function(element, parent, message, debug)\r\n    if element.descriptor ~= 'it' then\r\n      handler.errorsCount = handler.errorsCount + 1\r\n      table.insert(handler.errors, handler.format(element, parent, message, debug, true))\r\n    end\r\n\r\n    return nil, true\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 112,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 113,
    "text": "",
    "type": "function container"
  }, {
    "id": 114,
    "text": "parent",
    "type": "global function"
  }, {
    "id": 115,
    "text": "subscribe",
    "type": "global function"
  }, {
    "id": 116,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 117,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 118,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 119,
    "text": "type",
    "type": "global function"
  }, {
    "id": 120,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 121,
    "text": "require",
    "type": "global function"
  }, {
    "id": 122,
    "text": "",
    "type": "global variable"
  }, {
    "id": 123,
    "text": "",
    "type": "variable container"
  }, {
    "id": 124,
    "text": "",
    "type": "require container"
  }, {
    "id": 125,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 126,
    "text": "en)",
    "type": "module"
  }, {
    "id": 127,
    "text": "language)",
    "type": "module"
  }, {
    "id": 128,
    "text": "",
    "type": "interface container"
  }, {
    "id": 129,
    "text": "",
    "type": "interface"
  }, {
    "id": 130,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 131,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 132,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 133,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 134,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 135,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 136,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 137,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 138,
    "text": "",
    "type": "require local variable"
  } ]
}