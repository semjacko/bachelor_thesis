{
  "_filename": "async_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/busted/spec/async_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 4,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 6
  }, {
    "from": 12,
    "label": "has",
    "to": 6
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 13,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 3
  }, {
    "from": 13,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 3
  }, {
    "from": 13,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 6
  }, {
    "from": 13,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 8
  }, {
    "from": 13,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 10
  }, {
    "from": 13,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 6
  }, {
    "from": 13,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 6
  }, {
    "from": 13,
    "label": "has",
    "to": 23
  }, {
    "from": 13,
    "label": "has",
    "to": 24
  }, {
    "from": 13,
    "label": "has",
    "to": 25
  }, {
    "from": 13,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 3
  }, {
    "from": 28,
    "label": "has",
    "to": 3
  }, {
    "from": 29,
    "label": "has",
    "to": 6
  }, {
    "from": 30,
    "label": "has",
    "to": 8
  }, {
    "from": 31,
    "label": "has",
    "to": 10
  }, {
    "from": 32,
    "label": "has",
    "to": 6
  }, {
    "from": 33,
    "label": "has",
    "to": 14
  }, {
    "from": 33,
    "label": "has",
    "to": 15
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 3
  }, {
    "from": 33,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 3
  }, {
    "from": 33,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 6
  }, {
    "from": 33,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 8
  }, {
    "from": 33,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 10
  }, {
    "from": 33,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 6
  }, {
    "from": 33,
    "label": "has",
    "to": 23
  }, {
    "from": 33,
    "label": "has",
    "to": 24
  }, {
    "from": 33,
    "label": "has",
    "to": 25
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 8
  }, {
    "from": 37,
    "label": "has",
    "to": 3
  }, {
    "from": 38,
    "label": "has",
    "to": 8
  }, {
    "from": 39,
    "label": "has",
    "to": 14
  }, {
    "from": 39,
    "label": "has",
    "to": 15
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 8
  }, {
    "from": 39,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 3
  }, {
    "from": 39,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 8
  }, {
    "from": 39,
    "label": "has",
    "to": 24
  }, {
    "from": 39,
    "label": "has",
    "to": 25
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 14
  }, {
    "from": 44,
    "label": "has",
    "to": 15
  }, {
    "from": 44,
    "label": "has",
    "to": 16
  }, {
    "from": 44,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 3
  }, {
    "from": 44,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 3
  }, {
    "from": 44,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 6
  }, {
    "from": 44,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 8
  }, {
    "from": 44,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 10
  }, {
    "from": 44,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 6
  }, {
    "from": 44,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 6
  }, {
    "from": 44,
    "label": "has",
    "to": 23
  }, {
    "from": 44,
    "label": "has",
    "to": 24
  }, {
    "from": 44,
    "label": "has",
    "to": 25
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 14
  }, {
    "from": 45,
    "label": "has",
    "to": 15
  }, {
    "from": 45,
    "label": "has",
    "to": 34
  }, {
    "from": 45,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 3
  }, {
    "from": 45,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 3
  }, {
    "from": 45,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 6
  }, {
    "from": 45,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 8
  }, {
    "from": 45,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 10
  }, {
    "from": 45,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 6
  }, {
    "from": 45,
    "label": "has",
    "to": 23
  }, {
    "from": 45,
    "label": "has",
    "to": 24
  }, {
    "from": 45,
    "label": "has",
    "to": 25
  }, {
    "from": 43,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 14
  }, {
    "from": 46,
    "label": "has",
    "to": 15
  }, {
    "from": 46,
    "label": "has",
    "to": 40
  }, {
    "from": 46,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 8
  }, {
    "from": 46,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 3
  }, {
    "from": 46,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 8
  }, {
    "from": 46,
    "label": "has",
    "to": 24
  }, {
    "from": 46,
    "label": "has",
    "to": 25
  }, {
    "from": 43,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 14
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 25
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 14
  }, {
    "from": 52,
    "label": "has",
    "to": 49
  }, {
    "from": 52,
    "label": "has",
    "to": 50
  }, {
    "from": 52,
    "label": "has",
    "to": 25
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 14
  }, {
    "from": 54,
    "label": "has",
    "to": 49
  }, {
    "from": 54,
    "label": "has",
    "to": 50
  }, {
    "from": 54,
    "label": "has",
    "to": 25
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 14
  }, {
    "from": 56,
    "label": "has",
    "to": 49
  }, {
    "from": 56,
    "label": "has",
    "to": 50
  }, {
    "from": 56,
    "label": "has",
    "to": 25
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 14
  }, {
    "from": 58,
    "label": "has",
    "to": 49
  }, {
    "from": 58,
    "label": "has",
    "to": 50
  }, {
    "from": 58,
    "label": "has",
    "to": 25
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 14
  }, {
    "from": 61,
    "label": "has",
    "to": 49
  }, {
    "from": 61,
    "label": "has",
    "to": 50
  }, {
    "from": 61,
    "label": "has",
    "to": 25
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 14
  }, {
    "from": 62,
    "label": "has",
    "to": 49
  }, {
    "from": 62,
    "label": "has",
    "to": 50
  }, {
    "from": 62,
    "label": "has",
    "to": 25
  }, {
    "from": 60,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 14
  }, {
    "from": 63,
    "label": "has",
    "to": 49
  }, {
    "from": 63,
    "label": "has",
    "to": 50
  }, {
    "from": 63,
    "label": "has",
    "to": 25
  }, {
    "from": 60,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 14
  }, {
    "from": 64,
    "label": "has",
    "to": 49
  }, {
    "from": 64,
    "label": "has",
    "to": 50
  }, {
    "from": 64,
    "label": "has",
    "to": 25
  }, {
    "from": 60,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 14
  }, {
    "from": 65,
    "label": "has",
    "to": 49
  }, {
    "from": 65,
    "label": "has",
    "to": 50
  }, {
    "from": 65,
    "label": "has",
    "to": 25
  }, {
    "from": 60,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "calls",
    "to": 71
  }, {
    "from": 67,
    "label": "calls",
    "to": 71
  }, {
    "from": 67,
    "label": "calls",
    "to": 71
  }, {
    "from": 67,
    "label": "calls",
    "to": 71
  }, {
    "from": 67,
    "label": "calls",
    "to": 71
  }, {
    "from": 67,
    "label": "calls",
    "to": 71
  }, {
    "from": 67,
    "label": "calls",
    "to": 71
  }, {
    "from": 67,
    "label": "calls",
    "to": 71
  }, {
    "from": 67,
    "label": "calls",
    "to": 69
  }, {
    "from": 67,
    "label": "calls",
    "to": 69
  }, {
    "from": 67,
    "label": "calls",
    "to": 69
  }, {
    "from": 67,
    "label": "calls",
    "to": 69
  }, {
    "from": 67,
    "label": "calls",
    "to": 69
  }, {
    "from": 67,
    "label": "calls",
    "to": 69
  }, {
    "from": 67,
    "label": "calls",
    "to": 69
  }, {
    "from": 67,
    "label": "calls",
    "to": 69
  }, {
    "from": 67,
    "label": "calls",
    "to": 69
  }, {
    "from": 67,
    "label": "calls",
    "to": 69
  }, {
    "from": 67,
    "label": "calls",
    "to": 69
  }, {
    "from": 67,
    "label": "calls",
    "to": 69
  }, {
    "from": 67,
    "label": "calls",
    "to": 69
  }, {
    "from": 67,
    "label": "calls",
    "to": 69
  }, {
    "from": 67,
    "label": "calls",
    "to": 69
  }, {
    "from": 67,
    "label": "calls",
    "to": 69
  }, {
    "from": 67,
    "label": "calls",
    "to": 69
  }, {
    "from": 67,
    "label": "calls",
    "to": 69
  }, {
    "from": 67,
    "label": "calls",
    "to": 69
  }, {
    "from": 67,
    "label": "calls",
    "to": 69
  }, {
    "from": 67,
    "label": "calls",
    "to": 69
  }, {
    "from": 67,
    "label": "calls",
    "to": 69
  }, {
    "from": 67,
    "label": "calls",
    "to": 69
  }, {
    "from": 67,
    "label": "calls",
    "to": 69
  }, {
    "from": 67,
    "label": "calls",
    "to": 76
  }, {
    "from": 67,
    "label": "calls",
    "to": 76
  }, {
    "from": 67,
    "label": "calls",
    "to": 76
  }, {
    "from": 67,
    "label": "calls",
    "to": 77
  }, {
    "from": 67,
    "label": "calls",
    "to": 77
  }, {
    "from": 67,
    "label": "calls",
    "to": 77
  }, {
    "from": 67,
    "label": "calls",
    "to": 77
  }, {
    "from": 67,
    "label": "calls",
    "to": 77
  }, {
    "from": 67,
    "label": "calls",
    "to": 70
  }, {
    "from": 67,
    "label": "calls",
    "to": 70
  }, {
    "from": 67,
    "label": "calls",
    "to": 70
  }, {
    "from": 67,
    "label": "calls",
    "to": 70
  }, {
    "from": 67,
    "label": "calls",
    "to": 70
  }, {
    "from": 67,
    "label": "calls",
    "to": 70
  }, {
    "from": 67,
    "label": "calls",
    "to": 70
  }, {
    "from": 67,
    "label": "calls",
    "to": 70
  }, {
    "from": 67,
    "label": "calls",
    "to": 68
  }, {
    "from": 67,
    "label": "calls",
    "to": 78
  }, {
    "from": 67,
    "label": "calls",
    "to": 78
  }, {
    "from": 67,
    "label": "calls",
    "to": 79
  }, {
    "from": 67,
    "label": "calls",
    "to": 80
  }, {
    "from": 67,
    "label": "calls",
    "to": 80
  }, {
    "from": 67,
    "label": "calls",
    "to": 80
  }, {
    "from": 67,
    "label": "calls",
    "to": 80
  }, {
    "from": 67,
    "label": "calls",
    "to": 80
  }, {
    "from": 67,
    "label": "calls",
    "to": 80
  }, {
    "from": 67,
    "label": "calls",
    "to": 80
  }, {
    "from": 67,
    "label": "calls",
    "to": 80
  }, {
    "from": 67,
    "label": "calls",
    "to": 81
  }, {
    "from": 67,
    "label": "calls",
    "to": 81
  }, {
    "from": 67,
    "label": "calls",
    "to": 73
  }, {
    "from": 67,
    "label": "calls",
    "to": 72
  }, {
    "from": 67,
    "label": "calls",
    "to": 72
  }, {
    "from": 67,
    "label": "calls",
    "to": 72
  }, {
    "from": 67,
    "label": "calls",
    "to": 72
  }, {
    "from": 67,
    "label": "calls",
    "to": 74
  }, {
    "from": 67,
    "label": "calls",
    "to": 75
  }, {
    "from": 67,
    "label": "calls",
    "to": 75
  }, {
    "from": 67,
    "label": "calls",
    "to": 75
  }, {
    "from": 67,
    "label": "calls",
    "to": 75
  }, {
    "from": 67,
    "label": "calls",
    "to": 75
  }, {
    "from": 1,
    "label": "contains",
    "to": 67
  }, {
    "from": 67,
    "label": "declares",
    "to": 2
  }, {
    "from": 67,
    "label": "declares",
    "to": 4
  }, {
    "from": 67,
    "label": "declares",
    "to": 5
  }, {
    "from": 67,
    "label": "declares",
    "to": 7
  }, {
    "from": 67,
    "label": "declares",
    "to": 9
  }, {
    "from": 67,
    "label": "declares",
    "to": 11
  }, {
    "from": 67,
    "label": "declares",
    "to": 12
  }, {
    "from": 67,
    "label": "declares",
    "to": 13
  }, {
    "from": 67,
    "label": "declares",
    "to": 27
  }, {
    "from": 67,
    "label": "declares",
    "to": 28
  }, {
    "from": 67,
    "label": "declares",
    "to": 29
  }, {
    "from": 67,
    "label": "declares",
    "to": 30
  }, {
    "from": 67,
    "label": "declares",
    "to": 31
  }, {
    "from": 67,
    "label": "declares",
    "to": 32
  }, {
    "from": 67,
    "label": "declares",
    "to": 33
  }, {
    "from": 67,
    "label": "declares",
    "to": 36
  }, {
    "from": 67,
    "label": "declares",
    "to": 37
  }, {
    "from": 67,
    "label": "declares",
    "to": 38
  }, {
    "from": 67,
    "label": "declares",
    "to": 39
  }, {
    "from": 67,
    "label": "declares",
    "to": 43
  }, {
    "from": 67,
    "label": "declares",
    "to": 48
  }, {
    "from": 67,
    "label": "declares",
    "to": 52
  }, {
    "from": 67,
    "label": "declares",
    "to": 54
  }, {
    "from": 67,
    "label": "declares",
    "to": 56
  }, {
    "from": 67,
    "label": "declares",
    "to": 58
  }, {
    "from": 67,
    "label": "declares",
    "to": 60
  }, {
    "from": 1,
    "label": "contains",
    "to": 82
  }, {
    "from": 1,
    "label": "contains",
    "to": 83
  }, {
    "from": 17,
    "label": "hasArgument",
    "to": 2
  }, {
    "from": 17,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 17,
    "label": "hasArgument",
    "to": 27
  }, {
    "from": 17,
    "label": "hasArgument",
    "to": 28
  }, {
    "from": 17,
    "label": "hasArgument",
    "to": 37
  }, {
    "from": 18,
    "label": "hasArgument",
    "to": 2
  }, {
    "from": 18,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 18,
    "label": "hasArgument",
    "to": 27
  }, {
    "from": 18,
    "label": "hasArgument",
    "to": 28
  }, {
    "from": 18,
    "label": "hasArgument",
    "to": 37
  }, {
    "from": 19,
    "label": "hasArgument",
    "to": 5
  }, {
    "from": 19,
    "label": "hasArgument",
    "to": 11
  }, {
    "from": 19,
    "label": "hasArgument",
    "to": 12
  }, {
    "from": 19,
    "label": "hasArgument",
    "to": 29
  }, {
    "from": 19,
    "label": "hasArgument",
    "to": 32
  }, {
    "from": 20,
    "label": "hasArgument",
    "to": 7
  }, {
    "from": 20,
    "label": "hasArgument",
    "to": 30
  }, {
    "from": 20,
    "label": "hasArgument",
    "to": 36
  }, {
    "from": 20,
    "label": "hasArgument",
    "to": 38
  }, {
    "from": 21,
    "label": "hasArgument",
    "to": 9
  }, {
    "from": 21,
    "label": "hasArgument",
    "to": 31
  }, {
    "from": 22,
    "label": "hasArgument",
    "to": 5
  }, {
    "from": 22,
    "label": "hasArgument",
    "to": 11
  }, {
    "from": 22,
    "label": "hasArgument",
    "to": 12
  }, {
    "from": 22,
    "label": "hasArgument",
    "to": 29
  }, {
    "from": 22,
    "label": "hasArgument",
    "to": 32
  }, {
    "from": 41,
    "label": "hasArgument",
    "to": 7
  }, {
    "from": 41,
    "label": "hasArgument",
    "to": 30
  }, {
    "from": 41,
    "label": "hasArgument",
    "to": 36
  }, {
    "from": 41,
    "label": "hasArgument",
    "to": 38
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 2
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 5
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 7
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 9
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 11
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 12
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 13
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 27
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 28
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 29
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 30
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 31
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 32
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 36
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 37
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 38
  }, {
    "from": 45,
    "label": "hasArgument",
    "to": 2
  }, {
    "from": 45,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 45,
    "label": "hasArgument",
    "to": 5
  }, {
    "from": 45,
    "label": "hasArgument",
    "to": 7
  }, {
    "from": 45,
    "label": "hasArgument",
    "to": 9
  }, {
    "from": 45,
    "label": "hasArgument",
    "to": 11
  }, {
    "from": 45,
    "label": "hasArgument",
    "to": 12
  }, {
    "from": 45,
    "label": "hasArgument",
    "to": 27
  }, {
    "from": 45,
    "label": "hasArgument",
    "to": 28
  }, {
    "from": 45,
    "label": "hasArgument",
    "to": 29
  }, {
    "from": 45,
    "label": "hasArgument",
    "to": 30
  }, {
    "from": 45,
    "label": "hasArgument",
    "to": 31
  }, {
    "from": 45,
    "label": "hasArgument",
    "to": 32
  }, {
    "from": 45,
    "label": "hasArgument",
    "to": 33
  }, {
    "from": 45,
    "label": "hasArgument",
    "to": 36
  }, {
    "from": 45,
    "label": "hasArgument",
    "to": 37
  }, {
    "from": 45,
    "label": "hasArgument",
    "to": 38
  }, {
    "from": 46,
    "label": "hasArgument",
    "to": 2
  }, {
    "from": 46,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 46,
    "label": "hasArgument",
    "to": 7
  }, {
    "from": 46,
    "label": "hasArgument",
    "to": 27
  }, {
    "from": 46,
    "label": "hasArgument",
    "to": 28
  }, {
    "from": 46,
    "label": "hasArgument",
    "to": 30
  }, {
    "from": 46,
    "label": "hasArgument",
    "to": 36
  }, {
    "from": 46,
    "label": "hasArgument",
    "to": 37
  }, {
    "from": 46,
    "label": "hasArgument",
    "to": 38
  }, {
    "from": 46,
    "label": "hasArgument",
    "to": 39
  }, {
    "from": 61,
    "label": "hasArgument",
    "to": 48
  }, {
    "from": 61,
    "label": "hasArgument",
    "to": 52
  }, {
    "from": 61,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 61,
    "label": "hasArgument",
    "to": 56
  }, {
    "from": 61,
    "label": "hasArgument",
    "to": 58
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 48
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 52
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 56
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 58
  }, {
    "from": 63,
    "label": "hasArgument",
    "to": 48
  }, {
    "from": 63,
    "label": "hasArgument",
    "to": 52
  }, {
    "from": 63,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 63,
    "label": "hasArgument",
    "to": 56
  }, {
    "from": 63,
    "label": "hasArgument",
    "to": 58
  }, {
    "from": 64,
    "label": "hasArgument",
    "to": 48
  }, {
    "from": 64,
    "label": "hasArgument",
    "to": 52
  }, {
    "from": 64,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 64,
    "label": "hasArgument",
    "to": 56
  }, {
    "from": 64,
    "label": "hasArgument",
    "to": 58
  }, {
    "from": 65,
    "label": "hasArgument",
    "to": 48
  }, {
    "from": 65,
    "label": "hasArgument",
    "to": 52
  }, {
    "from": 65,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 65,
    "label": "hasArgument",
    "to": 56
  }, {
    "from": 65,
    "label": "hasArgument",
    "to": 58
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "async_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "function() done('1') end",
    "type": "function"
  }, {
    "id": 3,
    "text": "done('1')",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "function() done('1') end",
    "type": "function"
  }, {
    "id": 5,
    "text": "function() done('3') end",
    "type": "function"
  }, {
    "id": 6,
    "text": "done('3')",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "function() done('2') end",
    "type": "function"
  }, {
    "id": 8,
    "text": "done('2')",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "function() done('this is no valid token') end",
    "type": "function"
  }, {
    "id": 10,
    "text": "done('this is no valid token')",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "function() done('3') end",
    "type": "function"
  }, {
    "id": 12,
    "text": "function() done('3') end",
    "type": "function"
  }, {
    "id": 13,
    "text": "function()\r\n    async()\r\n    stub(done, 'done_cb') -- create a stub to prevent actually calling 'done'\r\n    done:wait_ordered('1', '2', '3')\r\n\r\n    assert.has_no_error(function() done('1') end)\r\n    assert.has_error(function() done('1') end) -- was already done\r\n    assert.has_error(function() done('3') end) -- bad order\r\n    assert.has_no_error(function() done('2') end)\r\n    assert.has_error(function() done('this is no valid token') end)\r\n    assert.has_no_error(function() done('3') end)\r\n    assert.has_error(function() done('3') end) -- tokenlist empty by now\r\n    assert.stub(done.done_cb).was.called(1)\r\n\r\n    done.done_cb:revert() -- revert so test can complete\r\n    done()\r\n  end",
    "type": "function"
  }, {
    "id": 14,
    "text": "async()",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "stub(done, 'done_cb')",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "done:wait_ordered('1', '2', '3')",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "assert.has_no_error(function() done('1') end)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "assert.has_error(function() done('1') end)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "assert.has_error(function() done('3') end)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "assert.has_no_error(function() done('2') end)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "assert.has_error(function() done('this is no valid token') end)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "assert.has_no_error(function() done('3') end)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "assert.stub(done.done_cb).was.called(1)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "done.done_cb:revert()",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "done()",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function() done('1') end",
    "type": "function"
  }, {
    "id": 28,
    "text": "function() done('1') end",
    "type": "function"
  }, {
    "id": 29,
    "text": "function() done('3') end",
    "type": "function"
  }, {
    "id": 30,
    "text": "function() done('2') end",
    "type": "function"
  }, {
    "id": 31,
    "text": "function() done('this is no valid token') end",
    "type": "function"
  }, {
    "id": 32,
    "text": "function() done('3') end",
    "type": "function"
  }, {
    "id": 33,
    "text": "function()\r\n    async()\r\n    stub(done, 'done_cb') -- create a stub to prevent actually calling 'done'\r\n    done:wait_unordered('1', '2', '3')\r\n\r\n    assert.has_no_error(function() done('1') end)\r\n    assert.has_error(function() done('1') end) -- was already done\r\n    assert.has_no_error(function() done('3') end) -- different order\r\n    assert.has_no_error(function() done('2') end)\r\n    assert.has_error(function() done('this is no valid token') end)\r\n    assert.has_error(function() done('3') end) -- tokenlist empty by now\r\n    assert.stub(done.done_cb).was.called(1)\r\n\r\n    done.done_cb:revert() -- revert so test can complete\r\n    done()\r\n  end",
    "type": "function"
  }, {
    "id": 34,
    "text": "done:wait_unordered('1', '2', '3')",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function() done('2') end",
    "type": "function"
  }, {
    "id": 37,
    "text": "function() done('1') end",
    "type": "function"
  }, {
    "id": 38,
    "text": "function() done('2') end",
    "type": "function"
  }, {
    "id": 39,
    "text": "function()\r\n    async()\r\n    stub(done, 'done_cb') -- create a stub to prevent actually calling 'done'\r\n    done:wait('1', '2')\r\n\r\n    assert.has_error(function() done('2') end) -- different order\r\n    assert.has_no_error(function() done('1') end)\r\n    assert.has_no_error(function() done('2') end)\r\n\r\n    done.done_cb:revert() -- revert so test can complete\r\n    done()\r\n  end",
    "type": "function"
  }, {
    "id": 40,
    "text": "done:wait('1', '2')",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "assert.has_error(function() done('2') end)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function()\r\n\r\n  it('Tests done call back ordered', function()\r\n    async()\r\n    stub(done, 'done_cb') -- create a stub to prevent actually calling 'done'\r\n    done:wait_ordered('1', '2', '3')\r\n\r\n    assert.has_no_error(function() done('1') end)\r\n    assert.has_error(function() done('1') end) -- was already done\r\n    assert.has_error(function() done('3') end) -- bad order\r\n    assert.has_no_error(function() done('2') end)\r\n    assert.has_error(function() done('this is no valid token') end)\r\n    assert.has_no_error(function() done('3') end)\r\n    assert.has_error(function() done('3') end) -- tokenlist empty by now\r\n    assert.stub(done.done_cb).was.called(1)\r\n\r\n    done.done_cb:revert() -- revert so test can complete\r\n    done()\r\n  end)\r\n\r\n  it('Tests done call back unordered', function()\r\n    async()\r\n    stub(done, 'done_cb') -- create a stub to prevent actually calling 'done'\r\n    done:wait_unordered('1', '2', '3')\r\n\r\n    assert.has_no_error(function() done('1') end)\r\n    assert.has_error(function() done('1') end) -- was already done\r\n    assert.has_no_error(function() done('3') end) -- different order\r\n    assert.has_no_error(function() done('2') end)\r\n    assert.has_error(function() done('this is no valid token') end)\r\n    assert.has_error(function() done('3') end) -- tokenlist empty by now\r\n    assert.stub(done.done_cb).was.called(1)\r\n\r\n    done.done_cb:revert() -- revert so test can complete\r\n    done()\r\n  end)\r\n\r\n  it('Tests done call back defaulting to ordered', function()\r\n    async()\r\n    stub(done, 'done_cb') -- create a stub to prevent actually calling 'done'\r\n    done:wait('1', '2')\r\n\r\n    assert.has_error(function() done('2') end) -- different order\r\n    assert.has_no_error(function() done('1') end)\r\n    assert.has_no_error(function() done('2') end)\r\n\r\n    done.done_cb:revert() -- revert so test can complete\r\n    done()\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "it('Tests done call back ordered', function()\r\n    async()\r\n    stub(done, 'done_cb') -- create a stub to prevent actually calling 'done'\r\n    done:wait_ordered('1', '2', '3')\r\n\r\n    assert.has_no_error(function() done('1') end)\r\n    assert.has_error(function() done('1') end) -- was already done\r\n    assert.has_error(function() done('3') end) -- bad order\r\n    assert.has_no_error(function() done('2') end)\r\n    assert.has_error(function() done('this is no valid token') end)\r\n    assert.has_no_error(function() done('3') end)\r\n    assert.has_error(function() done('3') end) -- tokenlist empty by now\r\n    assert.stub(done.done_cb).was.called(1)\r\n\r\n    done.done_cb:revert() -- revert so test can complete\r\n    done()\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "it('Tests done call back unordered', function()\r\n    async()\r\n    stub(done, 'done_cb') -- create a stub to prevent actually calling 'done'\r\n    done:wait_unordered('1', '2', '3')\r\n\r\n    assert.has_no_error(function() done('1') end)\r\n    assert.has_error(function() done('1') end) -- was already done\r\n    assert.has_no_error(function() done('3') end) -- different order\r\n    assert.has_no_error(function() done('2') end)\r\n    assert.has_error(function() done('this is no valid token') end)\r\n    assert.has_error(function() done('3') end) -- tokenlist empty by now\r\n    assert.stub(done.done_cb).was.called(1)\r\n\r\n    done.done_cb:revert() -- revert so test can complete\r\n    done()\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "it('Tests done call back defaulting to ordered', function()\r\n    async()\r\n    stub(done, 'done_cb') -- create a stub to prevent actually calling 'done'\r\n    done:wait('1', '2')\r\n\r\n    assert.has_error(function() done('2') end) -- different order\r\n    assert.has_no_error(function() done('1') end)\r\n    assert.has_no_error(function() done('2') end)\r\n\r\n    done.done_cb:revert() -- revert so test can complete\r\n    done()\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function()\r\n    async()\r\n    assert.is_table(done)\r\n    assert.is_function(done.wait)\r\n    done()\r\n  end",
    "type": "function"
  }, {
    "id": 49,
    "text": "assert.is_table(done)",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "assert.is_function(done.wait)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function()\r\n    async()\r\n    assert.is_table(done)\r\n    assert.is_function(done.wait)\r\n    done()\r\n  end",
    "type": "function"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "function()\r\n    async()\r\n    assert.is_table(done)\r\n    assert.is_function(done.wait)\r\n    done()\r\n  end",
    "type": "function"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function()\r\n    async()\r\n    assert.is_table(done)\r\n    assert.is_function(done.wait)\r\n    done()\r\n  end",
    "type": "function"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function()\r\n    async()\r\n    assert.is_table(done)\r\n    assert.is_function(done.wait)\r\n    done()\r\n  end",
    "type": "function"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function()\r\n  setup(function()\r\n    async()\r\n    assert.is_table(done)\r\n    assert.is_function(done.wait)\r\n    done()\r\n  end)\r\n\r\n  before_each(function()\r\n    async()\r\n    assert.is_table(done)\r\n    assert.is_function(done.wait)\r\n    done()\r\n  end)\r\n\r\n  after_each(function()\r\n    async()\r\n    assert.is_table(done)\r\n    assert.is_function(done.wait)\r\n    done()\r\n  end)\r\n\r\n  teardown(function()\r\n    async()\r\n    assert.is_table(done)\r\n    assert.is_function(done.wait)\r\n    done()\r\n  end)\r\n\r\n  it('Tests done callbacks being provided for async tests', function()\r\n    async()\r\n    assert.is_table(done)\r\n    assert.is_function(done.wait)\r\n    done()\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 61,
    "text": "setup(function()\r\n    async()\r\n    assert.is_table(done)\r\n    assert.is_function(done.wait)\r\n    done()\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "before_each(function()\r\n    async()\r\n    assert.is_table(done)\r\n    assert.is_function(done.wait)\r\n    done()\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "after_each(function()\r\n    async()\r\n    assert.is_table(done)\r\n    assert.is_function(done.wait)\r\n    done()\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "teardown(function()\r\n    async()\r\n    assert.is_table(done)\r\n    assert.is_function(done.wait)\r\n    done()\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "it('Tests done callbacks being provided for async tests', function()\r\n    async()\r\n    assert.is_table(done)\r\n    assert.is_function(done.wait)\r\n    done()\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "",
    "type": "function container"
  }, {
    "id": 68,
    "text": "setup",
    "type": "global function"
  }, {
    "id": 69,
    "text": "done",
    "type": "global function"
  }, {
    "id": 70,
    "text": "has_error",
    "type": "global function"
  }, {
    "id": 71,
    "text": "has_no_error",
    "type": "global function"
  }, {
    "id": 72,
    "text": "it",
    "type": "global function"
  }, {
    "id": 73,
    "text": "before_each",
    "type": "global function"
  }, {
    "id": 74,
    "text": "teardown",
    "type": "global function"
  }, {
    "id": 75,
    "text": "is_table",
    "type": "global function"
  }, {
    "id": 76,
    "text": "stub",
    "type": "global function"
  }, {
    "id": 77,
    "text": "is_function",
    "type": "global function"
  }, {
    "id": 78,
    "text": "stub",
    "type": "global function"
  }, {
    "id": 79,
    "text": "after_each",
    "type": "global function"
  }, {
    "id": 80,
    "text": "async",
    "type": "global function"
  }, {
    "id": 81,
    "text": "pending",
    "type": "global function"
  }, {
    "id": 82,
    "text": "",
    "type": "variable container"
  }, {
    "id": 83,
    "text": "",
    "type": "require container"
  } ]
}