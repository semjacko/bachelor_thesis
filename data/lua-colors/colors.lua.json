{
  "_filename": "colors.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-colors/lua/colors.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 8,
    "label": "has",
    "to": 14
  }, {
    "from": 8,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 15,
    "label": "has",
    "to": 20
  }, {
    "from": 15,
    "label": "has",
    "to": 6
  }, {
    "from": 15,
    "label": "has",
    "to": 6
  }, {
    "from": 15,
    "label": "has",
    "to": 6
  }, {
    "from": 15,
    "label": "has",
    "to": 6
  }, {
    "from": 8,
    "label": "has",
    "to": 6
  }, {
    "from": 8,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 22,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 22,
    "label": "has",
    "to": 20
  }, {
    "from": 22,
    "label": "has",
    "to": 6
  }, {
    "from": 22,
    "label": "has",
    "to": 6
  }, {
    "from": 22,
    "label": "has",
    "to": 6
  }, {
    "from": 22,
    "label": "has",
    "to": 6
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 24,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 24,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 24,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 33,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 33,
    "label": "has",
    "to": 40
  }, {
    "from": 24,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 24,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 24,
    "label": "has",
    "to": 6
  }, {
    "from": 24,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 6
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 48,
    "label": "has",
    "to": 6
  }, {
    "from": 48,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 6
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 6
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 6
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 6
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 6
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 6
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 6
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 6
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 6
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 74,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 74,
    "label": "has",
    "to": 6
  }, {
    "from": 74,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 6
  }, {
    "from": 80,
    "label": "has",
    "to": 6
  }, {
    "from": 80,
    "label": "has",
    "to": 82
  }, {
    "from": 83,
    "label": "has",
    "to": 6
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 6
  }, {
    "from": 85,
    "label": "has",
    "to": 6
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 6
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 90,
    "label": "has",
    "to": 6
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 6
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 48,
    "label": "calls",
    "to": 95
  }, {
    "from": 55,
    "label": "calls",
    "to": 2
  }, {
    "from": 66,
    "label": "calls",
    "to": 2
  }, {
    "from": 68,
    "label": "calls",
    "to": 2
  }, {
    "from": 70,
    "label": "calls",
    "to": 2
  }, {
    "from": 72,
    "label": "calls",
    "to": 2
  }, {
    "from": 48,
    "label": "calls",
    "to": 99
  }, {
    "from": 24,
    "label": "calls",
    "to": 100
  }, {
    "from": 46,
    "label": "calls",
    "to": 101
  }, {
    "from": 46,
    "label": "calls",
    "to": 101
  }, {
    "from": 46,
    "label": "calls",
    "to": 101
  }, {
    "from": 48,
    "label": "calls",
    "to": 96
  }, {
    "from": 74,
    "label": "calls",
    "to": 98
  }, {
    "from": 8,
    "label": "calls",
    "to": 22
  }, {
    "from": 8,
    "label": "calls",
    "to": 22
  }, {
    "from": 8,
    "label": "calls",
    "to": 22
  }, {
    "from": 48,
    "label": "calls",
    "to": 8
  }, {
    "from": 48,
    "label": "calls",
    "to": 8
  }, {
    "from": 74,
    "label": "calls",
    "to": 83
  }, {
    "from": 2,
    "label": "calls",
    "to": 102
  }, {
    "from": 46,
    "label": "calls",
    "to": 24
  }, {
    "from": 2,
    "label": "calls",
    "to": 46
  }, {
    "from": 2,
    "label": "calls",
    "to": 104
  }, {
    "from": 24,
    "label": "calls",
    "to": 105
  }, {
    "from": 94,
    "label": "calls",
    "to": 103
  }, {
    "from": 2,
    "label": "calls",
    "to": 97
  }, {
    "from": 1,
    "label": "contains",
    "to": 94
  }, {
    "from": 94,
    "label": "declares",
    "to": 2
  }, {
    "from": 94,
    "label": "declares",
    "to": 8
  }, {
    "from": 94,
    "label": "declares",
    "to": 22
  }, {
    "from": 94,
    "label": "declares",
    "to": 24
  }, {
    "from": 94,
    "label": "declares",
    "to": 46
  }, {
    "from": 94,
    "label": "declares",
    "to": 48
  }, {
    "from": 94,
    "label": "declares",
    "to": 55
  }, {
    "from": 94,
    "label": "declares",
    "to": 57
  }, {
    "from": 94,
    "label": "declares",
    "to": 59
  }, {
    "from": 94,
    "label": "declares",
    "to": 62
  }, {
    "from": 94,
    "label": "declares",
    "to": 64
  }, {
    "from": 94,
    "label": "declares",
    "to": 66
  }, {
    "from": 94,
    "label": "declares",
    "to": 68
  }, {
    "from": 94,
    "label": "declares",
    "to": 70
  }, {
    "from": 94,
    "label": "declares",
    "to": 72
  }, {
    "from": 94,
    "label": "declares",
    "to": 74
  }, {
    "from": 94,
    "label": "declares",
    "to": 80
  }, {
    "from": 94,
    "label": "declares",
    "to": 83
  }, {
    "from": 94,
    "label": "declares",
    "to": 85
  }, {
    "from": 94,
    "label": "declares",
    "to": 88
  }, {
    "from": 94,
    "label": "declares",
    "to": 90
  }, {
    "from": 94,
    "label": "declares",
    "to": 92
  }, {
    "from": 1,
    "label": "contains",
    "to": 106
  }, {
    "from": 1,
    "label": "contains",
    "to": 107
  }, {
    "from": 106,
    "label": "initializes",
    "to": 108
  }, {
    "from": 108,
    "label": "assigns",
    "to": 109
  }, {
    "from": 106,
    "label": "initializes",
    "to": 110
  }, {
    "from": 110,
    "label": "assigns",
    "to": 111
  }, {
    "from": 111,
    "label": "assigns",
    "to": 112
  }, {
    "from": 112,
    "label": "assigns",
    "to": 113
  }, {
    "from": 111,
    "label": "assigns",
    "to": 114
  }, {
    "from": 114,
    "label": "assigns",
    "to": 115
  }, {
    "from": 106,
    "label": "initializes",
    "to": 116
  }, {
    "from": 116,
    "label": "assigns",
    "to": 117
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "colors",
    "type": "module"
  }, {
    "id": 2,
    "text": "function new(H, S, L)\r\n   if type(H) == \"string\" and H:sub(1,1)==\"#\" and H:len() == 7 then\r\n      H, S, L = rgb_string_to_hsl(H)\r\n   end\r\n   assert(Color_mt)\r\n   return setmetatable({H = H, S = S, L = L}, Color_mt)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "if type(H) == \"string\" and H:sub(1,1)==\"#\" and H:len() == 7 then\r\n      H, S, L = rgb_string_to_hsl(H)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 4,
    "text": "H, S, L = rgb_string_to_hsl(H)",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "assert(Color_mt)",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function hsl_to_rgb(h, s, L)\r\n   h = h/360\r\n   local m1, m2\r\n   if L<=0.5 then \r\n      m2 = L*(s+1)\r\n   else \r\n      m2 = L+s-L*s\r\n   end\r\n   m1 = L*2-m2\r\n\r\n   local function _h2rgb(m1, m2, h)\r\n      if h<0 then h = h+1 end\r\n      if h>1 then h = h-1 end\r\n      if h*6<1 then \r\n         return m1+(m2-m1)*h*6\r\n      elseif h*2<1 then \r\n         return m2 \r\n      elseif h*3<2 then \r\n         return m1+(m2-m1)*(2/3-h)*6\r\n      else\r\n         return m1\r\n      end\r\n   end\r\n\r\n   return _h2rgb(m1, m2, h+1/3), _h2rgb(m1, m2, h), _h2rgb(m1, m2, h-1/3)\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "h = h/360",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "local m1, m2",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "if L<=0.5 then \r\n      m2 = L*(s+1)\r\n   else \r\n      m2 = L+s-L*s\r\n   end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "m2 = L*(s+1)",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "m2 = L+s-L*s",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "m1 = L*2-m2",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "local function _h2rgb(m1, m2, h)\r\n      if h<0 then h = h+1 end\r\n      if h>1 then h = h-1 end\r\n      if h*6<1 then \r\n         return m1+(m2-m1)*h*6\r\n      elseif h*2<1 then \r\n         return m2 \r\n      elseif h*3<2 then \r\n         return m1+(m2-m1)*(2/3-h)*6\r\n      else\r\n         return m1\r\n      end\r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 16,
    "text": "if h<0 then h = h+1 end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "h = h+1",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "if h>1 then h = h-1 end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "h = h-1",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "if h*6<1 then \r\n         return m1+(m2-m1)*h*6\r\n      elseif h*2<1 then \r\n         return m2 \r\n      elseif h*3<2 then \r\n         return m1+(m2-m1)*(2/3-h)*6\r\n      else\r\n         return m1\r\n      end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "local function _h2rgb(m1, m2, h)\r\n      if h<0 then h = h+1 end\r\n      if h>1 then h = h-1 end\r\n      if h*6<1 then \r\n         return m1+(m2-m1)*h*6\r\n      elseif h*2<1 then \r\n         return m2 \r\n      elseif h*3<2 then \r\n         return m1+(m2-m1)*(2/3-h)*6\r\n      else\r\n         return m1\r\n      end\r\n   end",
    "type": "function"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function rgb_to_hsl(r, g, b)\r\n   --r, g, b = r/255, g/255, b/255\r\n   local min = math.min(r, g, b)\r\n   local max = math.max(r, g, b)\r\n   local delta = max - min\r\n\r\n   local h, s, l = 0, 0, ((min+max)/2)\r\n\r\n   if l > 0 and l < 0.5 then s = delta/(max+min) end\r\n   if l >= 0.5 and l < 1 then s = delta/(2-max-min) end\r\n\r\n   if delta > 0 then\r\n      if max == r and max ~= g then h = h + (g-b)/delta end\r\n      if max == g and max ~= b then h = h + 2 + (b-r)/delta end\r\n      if max == b and max ~= r then h = h + 4 + (r-g)/delta end\r\n      h = h / 6;\r\n   end\r\n\r\n   if h < 0 then h = h + 1 end\r\n   if h > 1 then h = h - 1 end\r\n\r\n   return h * 360, s, l\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "local min = math.min(r, g, b)",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "local max = math.max(r, g, b)",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "local delta = max - min",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "local h, s, l = 0, 0, ((min+max)/2)",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "if l > 0 and l < 0.5 then s = delta/(max+min) end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "s = delta/(max+min)",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "if l >= 0.5 and l < 1 then s = delta/(2-max-min) end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "s = delta/(2-max-min)",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "if delta > 0 then\r\n      if max == r and max ~= g then h = h + (g-b)/delta end\r\n      if max == g and max ~= b then h = h + 2 + (b-r)/delta end\r\n      if max == b and max ~= r then h = h + 4 + (r-g)/delta end\r\n      h = h / 6;\r\n   end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "if max == r and max ~= g then h = h + (g-b)/delta end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "h = h + (g-b)/delta",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "if max == g and max ~= b then h = h + 2 + (b-r)/delta end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "h = h + 2 + (b-r)/delta",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "if max == b and max ~= r then h = h + 4 + (r-g)/delta end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "h = h + 4 + (r-g)/delta",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "h = h / 6",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "if h < 0 then h = h + 1 end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "h = h + 1",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "if h > 1 then h = h - 1 end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "h = h - 1",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function rgb_string_to_hsl(rgb)\r\n   return rgb_to_hsl(tonumber(rgb:sub(2,3), 16)/256, \r\n                     tonumber(rgb:sub(4,5), 16)/256,\r\n                     tonumber(rgb:sub(6,7), 16)/256)\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function Color:to_rgb()\r\n   local r, g, b = hsl_to_rgb(self.H, self.S, self.L)\r\n   local rgb = {hsl_to_rgb(self.H, self.S, self.L)}\r\n   local buffer = \"#\"\r\n   for i,v in ipairs(rgb) do\r\n\t  buffer = buffer..string.format(\"%02x\",math.floor(v*256+0.5))\r\n   end\r\n   return buffer\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "local r, g, b = hsl_to_rgb(self.H, self.S, self.L)",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "local rgb = {hsl_to_rgb(self.H, self.S, self.L)}",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "local buffer = \"#\"",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "for i,v in ipairs(rgb) do\r\n\t  buffer = buffer..string.format(\"%02x\",math.floor(v*256+0.5))\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 53,
    "text": "buffer = buffer..string.format(\"%02x\",math.floor(v*256+0.5))",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "function Color:hue_offset(delta)\r\n   return new((self.H + delta) % 360, self.S, self.L)\r\nend",
    "type": "function"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function Color:complementary() \r\n   return self:hue_offset(180)\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function Color:neighbors(angle)\r\n   local angle = angle or 30\r\n   return self:hue_offset(angle), self:hue_offset(360-angle)\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "local angle = angle or 30",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "function Color:triadic() \r\n   return self:neighbors(120)\r\nend",
    "type": "function"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "function Color:split_complementary(angle)\r\n   return self:neighbors(180-(angle or 30))\r\nend",
    "type": "function"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function Color:desaturate_to(saturation)\r\n   return new(self.H, saturation, self.L)\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "function Color:desaturate_by(r)\r\n   return new(self.H, self.S*r, self.L)\r\nend",
    "type": "function"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function Color:lighten_to(lightness)\r\n   return new(self.H, self.S, lightness)\r\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "function Color:lighten_by(r)\r\n   return new(self.H, self.S, self.L*r)\r\nend",
    "type": "function"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function Color:variations(f, n)\r\n   n = n or 5\r\n   local results = {}\r\n   for i=1,n do\r\n\t  table.insert(results, f(self, i, n))\r\n   end\r\n   return results\r\nend",
    "type": "function"
  }, {
    "id": 75,
    "text": "n = n or 5",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "local results = {}",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "for i=1,n do\r\n\t  table.insert(results, f(self, i, n))\r\n   end",
    "type": "statement:numericfor"
  }, {
    "id": 78,
    "text": "table.insert(results, f(self, i, n))",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "function Color:tints(n)\r\n   local f = function (color, i, n) \r\n                return color:lighten_to(color.L + (1-color.L)/n*i)\r\n             end\r\n   return self:variations(f, n)\r\nend",
    "type": "function"
  }, {
    "id": 81,
    "text": "local f = function (color, i, n) \r\n                return color:lighten_to(color.L + (1-color.L)/n*i)\r\n             end",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 83,
    "text": "function (color, i, n) \r\n                return color:lighten_to(color.L + (1-color.L)/n*i)\r\n             end",
    "type": "function"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "function Color:shades(n)\r\n   local f = function (color, i, n) \r\n                return color:lighten_to(color.L - (color.L)/n*i)\r\n             end\r\n   return self:variations(f, n)\r\nend",
    "type": "function"
  }, {
    "id": 86,
    "text": "local f = function (color, i, n) \r\n                return color:lighten_to(color.L - (color.L)/n*i)\r\n             end",
    "type": "statement:localassign"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "function (color, i, n) \r\n                return color:lighten_to(color.L - (color.L)/n*i)\r\n             end",
    "type": "function"
  }, {
    "id": 89,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 90,
    "text": "function Color:tint(r)\r\n      return self:lighten_to(self.L + (1-self.L)*r)\r\nend",
    "type": "function"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "function Color:shade(r)\r\n      return self:lighten_to(self.L - self.L*r)\r\nend",
    "type": "function"
  }, {
    "id": 93,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 94,
    "text": "",
    "type": "function container"
  }, {
    "id": 95,
    "text": "format",
    "type": "global function"
  }, {
    "id": 96,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 97,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 98,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 99,
    "text": "floor",
    "type": "global function"
  }, {
    "id": 100,
    "text": "max",
    "type": "global function"
  }, {
    "id": 101,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 102,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 103,
    "text": "module",
    "type": "global function"
  }, {
    "id": 104,
    "text": "type",
    "type": "global function"
  }, {
    "id": 105,
    "text": "min",
    "type": "global function"
  }, {
    "id": 106,
    "text": "",
    "type": "variable container"
  }, {
    "id": 107,
    "text": "",
    "type": "require container"
  }, {
    "id": 108,
    "text": "",
    "type": "local variable"
  }, {
    "id": 109,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 110,
    "text": "",
    "type": "local variable"
  }, {
    "id": 111,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 112,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 113,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 114,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 115,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 116,
    "text": "",
    "type": "global variable"
  }, {
    "id": 117,
    "text": "",
    "type": "n/a"
  } ]
}