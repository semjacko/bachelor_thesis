{
  "_filename": "common_sets.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lrexlib-tre/test/common_sets.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 8,
    "label": "has",
    "to": 4
  }, {
    "from": 7,
    "label": "has",
    "to": 4
  }, {
    "from": 7,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 9
  }, {
    "from": 15,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 15,
    "label": "has",
    "to": 4
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 9
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 12
  }, {
    "from": 19,
    "label": "has",
    "to": 13
  }, {
    "from": 18,
    "label": "has",
    "to": 4
  }, {
    "from": 17,
    "label": "has",
    "to": 4
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 9
  }, {
    "from": 22,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 12
  }, {
    "from": 19,
    "label": "has",
    "to": 13
  }, {
    "from": 22,
    "label": "has",
    "to": 4
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 4
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 4
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 4
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 4
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 4
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 4
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 4
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 4
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 4
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 4
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 4
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 4
  }, {
    "from": 47,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 4
  }, {
    "from": 47,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 4
  }, {
    "from": 47,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 4
  }, {
    "from": 47,
    "label": "has",
    "to": 54
  }, {
    "from": 47,
    "label": "has",
    "to": 4
  }, {
    "from": 47,
    "label": "has",
    "to": 55
  }, {
    "from": 57,
    "label": "has",
    "to": 4
  }, {
    "from": 58,
    "label": "has",
    "to": 4
  }, {
    "from": 59,
    "label": "has",
    "to": 4
  }, {
    "from": 60,
    "label": "has",
    "to": 4
  }, {
    "from": 61,
    "label": "has",
    "to": 4
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 54
  }, {
    "from": 62,
    "label": "has",
    "to": 4
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 4
  }, {
    "from": 65,
    "label": "has",
    "to": 4
  }, {
    "from": 65,
    "label": "has",
    "to": 4
  }, {
    "from": 65,
    "label": "has",
    "to": 4
  }, {
    "from": 65,
    "label": "has",
    "to": 4
  }, {
    "from": 65,
    "label": "has",
    "to": 4
  }, {
    "from": 65,
    "label": "has",
    "to": 4
  }, {
    "from": 65,
    "label": "has",
    "to": 4
  }, {
    "from": 65,
    "label": "has",
    "to": 4
  }, {
    "from": 65,
    "label": "has",
    "to": 4
  }, {
    "from": 65,
    "label": "has",
    "to": 4
  }, {
    "from": 65,
    "label": "has",
    "to": 4
  }, {
    "from": 65,
    "label": "has",
    "to": 4
  }, {
    "from": 65,
    "label": "has",
    "to": 4
  }, {
    "from": 65,
    "label": "has",
    "to": 4
  }, {
    "from": 65,
    "label": "has",
    "to": 4
  }, {
    "from": 65,
    "label": "has",
    "to": 4
  }, {
    "from": 65,
    "label": "has",
    "to": 4
  }, {
    "from": 65,
    "label": "has",
    "to": 4
  }, {
    "from": 65,
    "label": "has",
    "to": 4
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 4
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 71,
    "label": "has",
    "to": 4
  }, {
    "from": 72,
    "label": "has",
    "to": 4
  }, {
    "from": 73,
    "label": "has",
    "to": 4
  }, {
    "from": 74,
    "label": "has",
    "to": 4
  }, {
    "from": 75,
    "label": "has",
    "to": 4
  }, {
    "from": 76,
    "label": "has",
    "to": 4
  }, {
    "from": 77,
    "label": "has",
    "to": 4
  }, {
    "from": 78,
    "label": "has",
    "to": 4
  }, {
    "from": 79,
    "label": "has",
    "to": 4
  }, {
    "from": 80,
    "label": "has",
    "to": 4
  }, {
    "from": 81,
    "label": "has",
    "to": 4
  }, {
    "from": 82,
    "label": "has",
    "to": 4
  }, {
    "from": 83,
    "label": "has",
    "to": 4
  }, {
    "from": 84,
    "label": "has",
    "to": 4
  }, {
    "from": 85,
    "label": "has",
    "to": 4
  }, {
    "from": 86,
    "label": "has",
    "to": 4
  }, {
    "from": 87,
    "label": "has",
    "to": 4
  }, {
    "from": 88,
    "label": "has",
    "to": 4
  }, {
    "from": 89,
    "label": "has",
    "to": 4
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 90,
    "label": "has",
    "to": 4
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 93,
    "label": "calls",
    "to": 40
  }, {
    "from": 17,
    "label": "calls",
    "to": 95
  }, {
    "from": 5,
    "label": "calls",
    "to": 100
  }, {
    "from": 7,
    "label": "calls",
    "to": 100
  }, {
    "from": 17,
    "label": "calls",
    "to": 100
  }, {
    "from": 24,
    "label": "calls",
    "to": 100
  }, {
    "from": 26,
    "label": "calls",
    "to": 100
  }, {
    "from": 36,
    "label": "calls",
    "to": 100
  }, {
    "from": 93,
    "label": "calls",
    "to": 30
  }, {
    "from": 93,
    "label": "calls",
    "to": 24
  }, {
    "from": 93,
    "label": "calls",
    "to": 43
  }, {
    "from": 93,
    "label": "calls",
    "to": 26
  }, {
    "from": 47,
    "label": "calls",
    "to": 94
  }, {
    "from": 93,
    "label": "calls",
    "to": 62
  }, {
    "from": 93,
    "label": "calls",
    "to": 7
  }, {
    "from": 93,
    "label": "calls",
    "to": 28
  }, {
    "from": 93,
    "label": "calls",
    "to": 97
  }, {
    "from": 93,
    "label": "calls",
    "to": 97
  }, {
    "from": 7,
    "label": "calls",
    "to": 96
  }, {
    "from": 17,
    "label": "calls",
    "to": 96
  }, {
    "from": 93,
    "label": "calls",
    "to": 45
  }, {
    "from": 93,
    "label": "calls",
    "to": 17
  }, {
    "from": 93,
    "label": "calls",
    "to": 36
  }, {
    "from": 7,
    "label": "calls",
    "to": 98
  }, {
    "from": 17,
    "label": "calls",
    "to": 98
  }, {
    "from": 7,
    "label": "calls",
    "to": 3
  }, {
    "from": 7,
    "label": "calls",
    "to": 3
  }, {
    "from": 17,
    "label": "calls",
    "to": 3
  }, {
    "from": 17,
    "label": "calls",
    "to": 3
  }, {
    "from": 17,
    "label": "calls",
    "to": 3
  }, {
    "from": 36,
    "label": "calls",
    "to": 5
  }, {
    "from": 40,
    "label": "calls",
    "to": 5
  }, {
    "from": 43,
    "label": "calls",
    "to": 5
  }, {
    "from": 45,
    "label": "calls",
    "to": 5
  }, {
    "from": 47,
    "label": "calls",
    "to": 5
  }, {
    "from": 62,
    "label": "calls",
    "to": 5
  }, {
    "from": 65,
    "label": "calls",
    "to": 5
  }, {
    "from": 93,
    "label": "calls",
    "to": 32
  }, {
    "from": 93,
    "label": "calls",
    "to": 34
  }, {
    "from": 7,
    "label": "calls",
    "to": 99
  }, {
    "from": 93,
    "label": "calls",
    "to": 65
  }, {
    "from": 93,
    "label": "calls",
    "to": 47
  }, {
    "from": 1,
    "label": "contains",
    "to": 93
  }, {
    "from": 93,
    "label": "declares",
    "to": 3
  }, {
    "from": 93,
    "label": "declares",
    "to": 5
  }, {
    "from": 93,
    "label": "declares",
    "to": 7
  }, {
    "from": 93,
    "label": "declares",
    "to": 15
  }, {
    "from": 93,
    "label": "declares",
    "to": 17
  }, {
    "from": 93,
    "label": "declares",
    "to": 22
  }, {
    "from": 93,
    "label": "declares",
    "to": 24
  }, {
    "from": 93,
    "label": "declares",
    "to": 26
  }, {
    "from": 93,
    "label": "declares",
    "to": 28
  }, {
    "from": 93,
    "label": "declares",
    "to": 30
  }, {
    "from": 93,
    "label": "declares",
    "to": 32
  }, {
    "from": 93,
    "label": "declares",
    "to": 34
  }, {
    "from": 93,
    "label": "declares",
    "to": 36
  }, {
    "from": 93,
    "label": "declares",
    "to": 40
  }, {
    "from": 93,
    "label": "declares",
    "to": 43
  }, {
    "from": 93,
    "label": "declares",
    "to": 45
  }, {
    "from": 93,
    "label": "declares",
    "to": 47
  }, {
    "from": 93,
    "label": "declares",
    "to": 56
  }, {
    "from": 93,
    "label": "declares",
    "to": 57
  }, {
    "from": 93,
    "label": "declares",
    "to": 58
  }, {
    "from": 93,
    "label": "declares",
    "to": 59
  }, {
    "from": 93,
    "label": "declares",
    "to": 60
  }, {
    "from": 93,
    "label": "declares",
    "to": 61
  }, {
    "from": 93,
    "label": "declares",
    "to": 62
  }, {
    "from": 93,
    "label": "declares",
    "to": 65
  }, {
    "from": 93,
    "label": "declares",
    "to": 68
  }, {
    "from": 93,
    "label": "declares",
    "to": 70
  }, {
    "from": 93,
    "label": "declares",
    "to": 71
  }, {
    "from": 93,
    "label": "declares",
    "to": 72
  }, {
    "from": 93,
    "label": "declares",
    "to": 73
  }, {
    "from": 93,
    "label": "declares",
    "to": 74
  }, {
    "from": 93,
    "label": "declares",
    "to": 75
  }, {
    "from": 93,
    "label": "declares",
    "to": 76
  }, {
    "from": 93,
    "label": "declares",
    "to": 77
  }, {
    "from": 93,
    "label": "declares",
    "to": 78
  }, {
    "from": 93,
    "label": "declares",
    "to": 79
  }, {
    "from": 93,
    "label": "declares",
    "to": 80
  }, {
    "from": 93,
    "label": "declares",
    "to": 81
  }, {
    "from": 93,
    "label": "declares",
    "to": 82
  }, {
    "from": 93,
    "label": "declares",
    "to": 83
  }, {
    "from": 93,
    "label": "declares",
    "to": 84
  }, {
    "from": 93,
    "label": "declares",
    "to": 85
  }, {
    "from": 93,
    "label": "declares",
    "to": 86
  }, {
    "from": 93,
    "label": "declares",
    "to": 87
  }, {
    "from": 93,
    "label": "declares",
    "to": 88
  }, {
    "from": 93,
    "label": "declares",
    "to": 89
  }, {
    "from": 93,
    "label": "declares",
    "to": 90
  }, {
    "from": 1,
    "label": "contains",
    "to": 101
  }, {
    "from": 1,
    "label": "contains",
    "to": 102
  }, {
    "from": 101,
    "label": "initializes",
    "to": 103
  }, {
    "from": 103,
    "label": "assigns",
    "to": 104
  }, {
    "from": 102,
    "label": "initializes",
    "to": 105
  }, {
    "from": 105,
    "label": "requires",
    "to": 2
  }, {
    "from": 102,
    "label": "initializes",
    "to": 106
  }, {
    "from": 106,
    "label": "requires",
    "to": 107
  }, {
    "from": 1,
    "label": "provides",
    "to": 108
  }, {
    "from": 108,
    "label": "provides",
    "to": 109
  }, {
    "from": 110,
    "label": "requires",
    "to": 107
  }, {
    "from": 111,
    "label": "requires",
    "to": 107
  }, {
    "from": 112,
    "label": "requires",
    "to": 107
  }, {
    "from": 113,
    "label": "requires",
    "to": 107
  }, {
    "from": 114,
    "label": "requires",
    "to": 107
  }, {
    "from": 115,
    "label": "requires",
    "to": 107
  }, {
    "from": 116,
    "label": "requires",
    "to": 107
  }, {
    "from": 117,
    "label": "requires",
    "to": 107
  }, {
    "from": 118,
    "label": "requires",
    "to": 107
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "common_sets",
    "type": "module"
  }, {
    "id": 2,
    "text": "luatest",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function norm(a) return a==nil and N or a end",
    "type": "function"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "local function get_gsub (lib)\r\n  return lib.gsub or\r\n    function (subj, pattern, repl, n)\r\n      return lib.new (pattern) : gsub (subj, repl, n)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "local function set_f_gmatch (lib, flg)\r\n  -- gmatch (s, p, [cf], [ef])\r\n  local function test_gmatch (subj, patt)\r\n    local out, guard = {}, 10\r\n    for a, b in lib.gmatch (subj, patt) do\r\n      table.insert (out, { norm(a), norm(b) })\r\n      guard = guard - 1\r\n      if guard == 0 then break end\r\n    end\r\n    return unpack (out)\r\n  end\r\n  return {\r\n    Name = \"Function gmatch\",\r\n    Func = test_gmatch,\r\n  --{  subj             patt         results }\r\n    { {\"ab\",            lib.new\".\"}, {{\"a\",N}, {\"b\",N} } },\r\n    { {(\"abcd\"):rep(3), \"(.)b.(d)\"}, {{\"a\",\"d\"},{\"a\",\"d\"},{\"a\",\"d\"}} },\r\n    { {\"abcd\",          \".*\" },      {{\"abcd\",N},{\"\",N}  } },--zero-length match\r\n    { {\"abc\",           \"^.\" },      {{\"a\",N}} },--anchored pattern\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "local function test_gmatch (subj, patt)\r\n    local out, guard = {}, 10\r\n    for a, b in lib.gmatch (subj, patt) do\r\n      table.insert (out, { norm(a), norm(b) })\r\n      guard = guard - 1\r\n      if guard == 0 then break end\r\n    end\r\n    return unpack (out)\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 9,
    "text": "local out, guard = {}, 10",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "for a, b in lib.gmatch (subj, patt) do\r\n      table.insert (out, { norm(a), norm(b) })\r\n      guard = guard - 1\r\n      if guard == 0 then break end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 11,
    "text": "table.insert (out, { norm(a), norm(b) })",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "guard = guard - 1",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "if guard == 0 then break end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "local function test_gmatch (subj, patt)\r\n    local out, guard = {}, 10\r\n    for a, b in lib.gmatch (subj, patt) do\r\n      table.insert (out, { norm(a), norm(b) })\r\n      guard = guard - 1\r\n      if guard == 0 then break end\r\n    end\r\n    return unpack (out)\r\n  end",
    "type": "function"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "local function set_f_split (lib, flg)\r\n  -- split (s, p, [cf], [ef])\r\n  local function test_split (subj, patt)\r\n    local out, guard = {}, 10\r\n    for a, b, c in lib.split (subj, patt) do\r\n      table.insert (out, { norm(a), norm(b), norm(c) })\r\n      guard = guard - 1\r\n      if guard == 0 then break end\r\n    end\r\n    return unpack (out)\r\n  end\r\n  return {\r\n    Name = \"Function split\",\r\n    Func = test_split,\r\n  --{  subj             patt      results }\r\n    { {\"ab\",     lib.new\",\"},     {{\"ab\",N,N},                           } },\r\n    { {\"ab\",            \",\"},     {{\"ab\",N,N},                           } },\r\n    { {\",\",             \",\"},     {{\"\",\",\",N},     {\"\", N, N},           } },\r\n    { {\",,\",            \",\"},     {{\"\",\",\",N},     {\"\",\",\",N},  {\"\",N,N} } },\r\n    { {\"a,b\",           \",\"},     {{\"a\",\",\",N},    {\"b\",N,N},            } },\r\n    { {\",a,b\",          \",\"},     {{\"\",\",\",N},     {\"a\",\",\",N}, {\"b\",N,N}} },\r\n    { {\"a,b,\",          \",\"},     {{\"a\",\",\",N},    {\"b\",\",\",N}, {\"\",N,N} } },\r\n    { {\"a,,b\",          \",\"},     {{\"a\",\",\",N},    {\"\",\",\",N},  {\"b\",N,N}} },\r\n    { {\"ab<78>c\", \"<(.)(.)>\"},    {{\"ab\",\"7\",\"8\"}, {\"c\",N,N},            } },\r\n    { {\"abc\",          \"^.\"},     {{\"\", \"a\",N},    {\"bc\",N,N},           } },--anchored pattern\r\n    { {\"abc\",           \"^\"},     {{\"\", \"\", N},    {\"abc\",N,N},          } },\r\n--  { {\"abc\",           \"$\"},     {{\"abc\",\"\",N},   {\"\",N,N},             } },\r\n--  { {\"abc\",         \"^|$\"},     {{\"\", \"\", N},    {\"abc\",\"\",N},{\"\",N,N},} },\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "local function test_split (subj, patt)\r\n    local out, guard = {}, 10\r\n    for a, b, c in lib.split (subj, patt) do\r\n      table.insert (out, { norm(a), norm(b), norm(c) })\r\n      guard = guard - 1\r\n      if guard == 0 then break end\r\n    end\r\n    return unpack (out)\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 19,
    "text": "for a, b, c in lib.split (subj, patt) do\r\n      table.insert (out, { norm(a), norm(b), norm(c) })\r\n      guard = guard - 1\r\n      if guard == 0 then break end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 20,
    "text": "table.insert (out, { norm(a), norm(b), norm(c) })",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "local function test_split (subj, patt)\r\n    local out, guard = {}, 10\r\n    for a, b, c in lib.split (subj, patt) do\r\n      table.insert (out, { norm(a), norm(b), norm(c) })\r\n      guard = guard - 1\r\n      if guard == 0 then break end\r\n    end\r\n    return unpack (out)\r\n  end",
    "type": "function"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "local function set_f_find (lib, flg)\r\n  return {\r\n    Name = \"Function find\",\r\n    Func = lib.find,\r\n  --  {subj, patt, st},         { results }\r\n    { {\"abcd\", lib.new\".+\"},    { 1,4 }   },      -- [none]\r\n    { {\"abcd\", \".+\"},           { 1,4 }   },      -- [none]\r\n    { {\"abcd\", \".+\", 2},        { 2,4 }   },      -- positive st\r\n    { {\"abcd\", \".+\", -2},       { 3,4 }   },      -- negative st\r\n    { {\"abcd\", \".*\"},           { 1,4 }   },      -- [none]\r\n    { {\"abc\",  \"bc\"},           { 2,3 }   },      -- [none]\r\n    { {\"abcd\", \"(.)b.(d)\"},     { 1,4,\"a\",\"d\" }}, -- [captures]\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "local function set_f_match (lib, flg)\r\n  return {\r\n    Name = \"Function match\",\r\n    Func = lib.match,\r\n  --  {subj, patt, st},         { results }\r\n    { {\"abcd\", lib.new\".+\"},    {\"abcd\"}  }, -- [none]\r\n    { {\"abcd\", \".+\"},           {\"abcd\"}  }, -- [none]\r\n    { {\"abcd\", \".+\", 2},        {\"bcd\"}   }, -- positive st\r\n    { {\"abcd\", \".+\", -2},       {\"cd\"}    }, -- negative st\r\n    { {\"abcd\", \".*\"},           {\"abcd\"}  }, -- [none]\r\n    { {\"abc\",  \"bc\"},           {\"bc\"}    }, -- [none]\r\n    { {\"abcd\", \"(.)b.(d)\"},     {\"a\",\"d\"} }, -- [captures]\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "local function set_m_exec (lib, flg)\r\n  return {\r\n    Name = \"Method exec\",\r\n    Method = \"exec\",\r\n  --{patt},                 {subj, st}           { results }\r\n    { {\".+\"},               {\"abcd\"},            {1,4,{}}  }, -- [none]\r\n    { {\".+\"},               {\"abcd\",2},          {2,4,{}}  }, -- positive st\r\n    { {\".+\"},               {\"abcd\",-2},         {3,4,{}}  }, -- negative st\r\n    { {\".*\"},               {\"abcd\"},            {1,4,{}}  }, -- [none]\r\n    { {\"bc\"},               {\"abc\"},             {2,3,{}}  }, -- [none]\r\n    { { \"(.)b.(d)\"},        {\"abcd\"},            {1,4,{1,1,4,4}}},--[captures]\r\n    { {\"(a+)6+(b+)\"},       {\"Taa66bbT\",2},      {2,7,{2,3,6,7}}},--[st+captures]\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "local function set_m_tfind (lib, flg)\r\n  return {\r\n    Name = \"Method tfind\",\r\n    Method = \"tfind\",\r\n  --{patt},                 {subj, st}           { results }\r\n    { {\".+\"},               {\"abcd\"},            {1,4,{}}  }, -- [none]\r\n    { {\".+\"},               {\"abcd\",2},          {2,4,{}}  }, -- positive st\r\n    { {\".+\"},               {\"abcd\",-2},         {3,4,{}}  }, -- negative st\r\n    { {\".*\"},               {\"abcd\"},            {1,4,{}}  }, -- [none]\r\n    { {\"bc\"},               {\"abc\"},             {2,3,{}}  }, -- [none]\r\n    { {\"(.)b.(d)\"},         {\"abcd\"},            {1,4,{\"a\",\"d\"}}},--[captures]\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "local function set_m_find (lib, flg)\r\n  return {\r\n    Name = \"Method find\",\r\n    Method = \"find\",\r\n  --{patt},                 {subj, st}           { results }\r\n    { {\".+\"},               {\"abcd\"},            {1,4}  }, -- [none]\r\n    { {\".+\"},               {\"abcd\",2},          {2,4}  }, -- positive st\r\n    { {\".+\"},               {\"abcd\",-2},         {3,4}  }, -- negative st\r\n    { {\".*\"},               {\"abcd\"},            {1,4}  }, -- [none]\r\n    { {\"bc\"},               {\"abc\"},             {2,3}  }, -- [none]\r\n    { {\"(.)b.(d)\"},         {\"abcd\"},            {1,4,\"a\",\"d\"}},--[captures]\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "local function set_m_match (lib, flg)\r\n  return {\r\n    Name = \"Method match\",\r\n    Method = \"match\",\r\n  --{patt},                 {subj, st}           { results }\r\n    { {\".+\"},               {\"abcd\"},            {\"abcd\"}  }, -- [none]\r\n    { {\".+\"},               {\"abcd\",2},          {\"bcd\" }  }, -- positive st\r\n    { {\".+\"},               {\"abcd\",-2},         {\"cd\"  }  }, -- negative st\r\n    { {\".*\"},               {\"abcd\"},            {\"abcd\"}  }, -- [none]\r\n    { {\"bc\"},               {\"abc\"},             {\"bc\"  }  }, -- [none]\r\n    {{ \"(.)b.(d)\"},         {\"abcd\"},            {\"a\",\"d\"} }, --[captures]\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "local function set_f_gsub1 (lib, flg)\r\n  local subj, pat = \"abcdef\", \"[abef]+\"\r\n  local cpat = lib.new(pat)\r\n  return {\r\n    Name = \"Function gsub, set1\",\r\n    Func = get_gsub (lib),\r\n  --{ s,       p,    f,   n,    res1,  res2, res3 },\r\n    { {subj,  cpat,  \"\",  0},   {subj,    0, 0} }, -- test \"n\" + empty_replace\r\n    { {subj,   pat,  \"\",  0},   {subj,    0, 0} }, -- test \"n\" + empty_replace\r\n    { {subj,   pat,  \"\", -1},   {subj,    0, 0} }, -- test \"n\" + empty_replace\r\n    { {subj,   pat,  \"\",  1},   {\"cdef\",  1, 1} },\r\n    { {subj,   pat,  \"\",  2},   {\"cd\",    2, 2} },\r\n    { {subj,   pat,  \"\",  3},   {\"cd\",    2, 2} },\r\n    { {subj,   pat,  \"\"    },   {\"cd\",    2, 2} },\r\n    { {subj,   pat,  \"#\", 0},   {subj,    0, 0} }, -- test \"n\" + non-empty_replace\r\n    { {subj,   pat,  \"#\", 1},   {\"#cdef\", 1, 1} },\r\n    { {subj,   pat,  \"#\", 2},   {\"#cd#\",  2, 2} },\r\n    { {subj,   pat,  \"#\", 3},   {\"#cd#\",  2, 2} },\r\n    { {subj,   pat,  \"#\"   },   {\"#cd#\",  2, 2} },\r\n    { {\"abc\",  \"^.\", \"#\"   },   {\"#bc\",   1, 1} }, -- anchored pattern\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "local subj, pat = \"abcdef\", \"[abef]+\"",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "local cpat = lib.new(pat)",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "local function set_f_gsub2 (lib, flg)\r\n  local subj, pat = \"abc\", \"([ac])\"\r\n  return {\r\n    Name = \"Function gsub, set2\",\r\n    Func = get_gsub (lib),\r\n  --{ s,     p,   f,   n,     res1,    res2, res3 },\r\n    { {subj, pat, \"<%1>\" },   {\"<a>b<c>\", 2, 2} }, -- test non-escaped chars in f\r\n    { {subj, pat, \"%<%1%>\" }, {\"<a>b<c>\", 2, 2} }, -- test escaped chars in f\r\n    { {subj, pat, \"\" },       {\"b\",       2, 2} }, -- test empty replace\r\n    { {subj, pat, \"1\" },      {\"1b1\",     2, 2} }, -- test odd and even %'s in f\r\n    { {subj, pat, \"%1\" },     {\"abc\",     2, 2} },\r\n    { {subj, pat, \"%%1\" },    {\"%1b%1\",   2, 2} },\r\n    { {subj, pat, \"%%%1\" },   {\"%ab%c\",   2, 2} },\r\n    { {subj, pat, \"%%%%1\" },  {\"%%1b%%1\", 2, 2} },\r\n    { {subj, pat, \"%%%%%1\" }, {\"%%ab%%c\", 2, 2} },\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "local subj, pat = \"abc\", \"([ac])\"",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "local function set_f_gsub3 (lib, flg)\r\n  return {\r\n    Name = \"Function gsub, set3\",\r\n    Func = get_gsub (lib),\r\n  --{ s,      p,      f,  n,   res1,res2,res3 },\r\n    { {\"abc\", \"a\",    \"%0\" }, {\"abc\", 1, 1} }, -- test (in)valid capture index\r\n    { {\"abc\", \"a\",    \"%1\" }, {\"abc\", 1, 1} },\r\n    { {\"abc\", \"[ac]\", \"%1\" }, {\"abc\", 2, 2} },\r\n    { {\"abc\", \"(a)\",  \"%1\" }, {\"abc\", 1, 1} },\r\n    { {\"abc\", \"(a)\",  \"%2\" }, \"invalid capture index\" },\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "local function set_f_gsub4 (lib, flg)\r\n  return {\r\n    Name = \"Function gsub, set4\",\r\n    Func = get_gsub (lib),\r\n  --{ s,           p,              f, n,  res1,      res2, res3 },\r\n    { {\"a2c3\",     \".\",            \"#\" }, {\"####\",      4, 4} }, -- test .\r\n    { {\"a2c3\",     \".+\",           \"#\" }, {\"#\",         1, 1} }, -- test .+\r\n    { {\"a2c3\",     \".*\",           \"#\" }, {\"##\",        2, 2} }, -- test .*\r\n    { {\"/* */ */\", \"\\\\/\\\\*(.*)\\\\*\\\\/\", \"#\" }, {\"#\",     1, 1} },\r\n    { {\"a2c3\",     \"[0-9]\",        \"#\" }, {\"a#c#\",      2, 2} }, -- test %d\r\n    { {\"a2c3\",     \"[^0-9]\",       \"#\" }, {\"#2#3\",      2, 2} }, -- test %D\r\n    { {\"a \\t\\nb\",  \"[ \\t\\n]\",      \"#\" }, {\"a###b\",     3, 3} }, -- test %s\r\n    { {\"a \\t\\nb\",  \"[^ \\t\\n]\",     \"#\" }, {\"# \\t\\n#\",   2, 2} }, -- test %S\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "local function set_f_gsub5 (lib, flg)\r\n  local function frep1 () end                       -- returns nothing\r\n  local function frep2 () return \"#\" end            -- ignores arguments\r\n  local function frep3 (...) return table.concat({...}, \",\") end -- \"normal\"\r\n  local function frep4 () return {} end             -- invalid return type\r\n  local function frep5 () return \"7\", \"a\" end       -- 2-nd return is \"a\"\r\n  local function frep6 () return \"7\", \"break\" end   -- 2-nd return is \"break\"\r\n  local subj = \"a2c3\"\r\n  return {\r\n    Name = \"Function gsub, set5\",\r\n    Func = get_gsub (lib),\r\n  --{ s,     p,          f,   n,   res1,     res2, res3 },\r\n    { {subj, \"a(.)c(.)\", frep1 }, {subj,        1, 0} },\r\n    { {subj, \"a(.)c(.)\", frep2 }, {\"#\",         1, 1} },\r\n    { {subj, \"a(.)c(.)\", frep3 }, {\"2,3\",       1, 1} },\r\n    { {subj, \"a.c.\",     frep3 }, {subj,        1, 1} },\r\n    { {subj, \"z*\",       frep1 }, {subj,        5, 0} },\r\n    { {subj, \"z*\",       frep2 }, {\"#a#2#c#3#\", 5, 5} },\r\n    { {subj, \"z*\",       frep3 }, {subj,        5, 5} },\r\n    { {subj, subj,       frep4 }, \"invalid return type\" },\r\n    { {\"abc\",\".\",        frep5 }, {\"777\",       3, 3} },\r\n    { {\"abc\",\".\",        frep6 }, {\"777\",       3, 3} },\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "local function frep1 () end",
    "type": "statement:localfunction"
  }, {
    "id": 49,
    "text": "local function frep2 () return \"#\" end",
    "type": "statement:localfunction"
  }, {
    "id": 50,
    "text": "local function frep3 (...) return table.concat({...}, \",\") end",
    "type": "statement:localfunction"
  }, {
    "id": 51,
    "text": "local function frep4 () return {} end",
    "type": "statement:localfunction"
  }, {
    "id": 52,
    "text": "local function frep5 () return \"7\", \"a\" end",
    "type": "statement:localfunction"
  }, {
    "id": 53,
    "text": "local function frep6 () return \"7\", \"break\" end",
    "type": "statement:localfunction"
  }, {
    "id": 54,
    "text": "local subj = \"a2c3\"",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "local function frep1 () end",
    "type": "function"
  }, {
    "id": 57,
    "text": "local function frep2 () return \"#\" end",
    "type": "function"
  }, {
    "id": 58,
    "text": "local function frep3 (...) return table.concat({...}, \",\") end",
    "type": "function"
  }, {
    "id": 59,
    "text": "local function frep4 () return {} end",
    "type": "function"
  }, {
    "id": 60,
    "text": "local function frep5 () return \"7\", \"a\" end",
    "type": "function"
  }, {
    "id": 61,
    "text": "local function frep6 () return \"7\", \"break\" end",
    "type": "function"
  }, {
    "id": 62,
    "text": "local function set_f_gsub6 (lib, flg)\r\n  local tab1, tab2, tab3 = {}, { [\"2\"] = 56 }, { [\"2\"] = {} }\r\n  local subj = \"a2c3\"\r\n  return {\r\n    Name = \"Function gsub, set6\",\r\n    Func = get_gsub (lib),\r\n  --{ s,     p,          f, n,   res1,res2,res3 },\r\n    { {subj, \"a(.)c(.)\", tab1 }, {subj,  1, 0} },\r\n    { {subj, \"a(.)c(.)\", tab2 }, {\"56\",  1, 1} },\r\n    { {subj, \"a(.)c(.)\", tab3 }, \"invalid replacement type\" },\r\n    { {subj, \"a.c.\",     tab1 }, {subj,  1, 0} },\r\n    { {subj, \"a.c.\",     tab2 }, {subj,  1, 0} },\r\n    { {subj, \"a.c.\",     tab3 }, {subj,  1, 0} },\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 63,
    "text": "local tab1, tab2, tab3 = {}, { [\"2\"] = 56 }, { [\"2\"] = {} }",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "local function set_f_gsub8 (lib, flg)\r\n  local subj, patt, repl = \"abcdef\", \"..\", \"*\"\r\n  return {\r\n    Name = \"Function gsub, set8\",\r\n    Func = get_gsub (lib),\r\n  --{ s,     p,       f, n,                                    res1,  res2, res3 },\r\n    { {subj, patt, repl, function() end },                    {\"abcdef\", 3, 0} },\r\n    { {subj, patt, repl, function() return nil end },         {\"abcdef\", 3, 0} },\r\n    { {subj, patt, repl, function() return false end },       {\"abcdef\", 3, 0} },\r\n    { {subj, patt, repl, function() return true end },        {\"***\",    3, 3} },\r\n    { {subj, patt, repl, function() return {} end },          {\"***\",    3, 3} },\r\n    { {subj, patt, repl, function() return \"#\" end },         {\"###\",    3, 3} },\r\n    { {subj, patt, repl, function() return 57 end },          {\"575757\", 3, 3} },\r\n    { {subj, patt, repl, function (from) return from end },   {\"135\",    3, 3} },\r\n    { {subj, patt, repl, function (from, to) return to end }, {\"246\",    3, 3} },\r\n    { {subj, patt, repl, function (from,to,rep) return rep end },\r\n                                                              {\"***\",    3, 3} },\r\n    { {subj, patt, repl, function (from, to, rep) return rep..to..from end },\r\n                                                           {\"*21*43*65\", 3, 3} },\r\n    { {subj, patt, repl, function() return nil end },         {\"abcdef\", 3, 0} },\r\n    { {subj, patt, repl, function() return nil, nil end },    {\"abcdef\", 3, 0} },\r\n    { {subj, patt, repl, function() return nil, false end },  {\"abcdef\", 3, 0} },\r\n    { {subj, patt, repl, function() return nil, true end },   {\"ab**\",   3, 2} },\r\n    { {subj, patt, repl, function() return true, true end },  {\"***\",    3, 3} },\r\n    { {subj, patt, repl, function() return nil, 0 end },      {\"abcdef\", 1, 0} },\r\n    { {subj, patt, repl, function() return true, 0 end },     {\"*cdef\",  1, 1} },\r\n    { {subj, patt, repl, function() return nil, 1 end },      {\"ab*ef\",  2, 1} },\r\n    { {subj, patt, repl, function() return true, 1 end },     {\"**ef\",   2, 2} },\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 66,
    "text": "local subj, patt, repl = \"abcdef\", \"..\", \"*\"",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "function (subj, pattern, repl, n)\r\n      return lib.new (pattern) : gsub (subj, repl, n)\r\n    end",
    "type": "function"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 71,
    "text": "function() return nil end",
    "type": "function"
  }, {
    "id": 72,
    "text": "function() return false end",
    "type": "function"
  }, {
    "id": 73,
    "text": "function() return true end",
    "type": "function"
  }, {
    "id": 74,
    "text": "function() return {} end",
    "type": "function"
  }, {
    "id": 75,
    "text": "function() return \"#\" end",
    "type": "function"
  }, {
    "id": 76,
    "text": "function() return 57 end",
    "type": "function"
  }, {
    "id": 77,
    "text": "function (from) return from end",
    "type": "function"
  }, {
    "id": 78,
    "text": "function (from, to) return to end",
    "type": "function"
  }, {
    "id": 79,
    "text": "function (from,to,rep) return rep end",
    "type": "function"
  }, {
    "id": 80,
    "text": "function (from, to, rep) return rep..to..from end",
    "type": "function"
  }, {
    "id": 81,
    "text": "function() return nil end",
    "type": "function"
  }, {
    "id": 82,
    "text": "function() return nil, nil end",
    "type": "function"
  }, {
    "id": 83,
    "text": "function() return nil, false end",
    "type": "function"
  }, {
    "id": 84,
    "text": "function() return nil, true end",
    "type": "function"
  }, {
    "id": 85,
    "text": "function() return true, true end",
    "type": "function"
  }, {
    "id": 86,
    "text": "function() return nil, 0 end",
    "type": "function"
  }, {
    "id": 87,
    "text": "function() return true, 0 end",
    "type": "function"
  }, {
    "id": 88,
    "text": "function() return nil, 1 end",
    "type": "function"
  }, {
    "id": 89,
    "text": "function() return true, 1 end",
    "type": "function"
  }, {
    "id": 90,
    "text": "function (libname)\r\n  local lib = require (libname)\r\n  return {\r\n    set_f_gmatch    (lib),\r\n    set_f_split     (lib),\r\n    set_f_find      (lib),\r\n    set_f_match     (lib),\r\n    set_m_exec      (lib),\r\n    set_m_tfind     (lib),\r\n    set_m_find      (lib),\r\n    set_m_match     (lib),\r\n    set_f_gsub1     (lib),\r\n    set_f_gsub2     (lib),\r\n    set_f_gsub3     (lib),\r\n    set_f_gsub4     (lib),\r\n    set_f_gsub5     (lib),\r\n    set_f_gsub6     (lib),\r\n    set_f_gsub8     (lib),\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 91,
    "text": "local lib = require (libname)",
    "type": "statement:localassign"
  }, {
    "id": 92,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 93,
    "text": "",
    "type": "function container"
  }, {
    "id": 94,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 95,
    "text": "split",
    "type": "global function"
  }, {
    "id": 96,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 97,
    "text": "require",
    "type": "global function"
  }, {
    "id": 98,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 99,
    "text": "gmatch",
    "type": "global function"
  }, {
    "id": 100,
    "text": "new",
    "type": "global function"
  }, {
    "id": 101,
    "text": "",
    "type": "variable container"
  }, {
    "id": 102,
    "text": "",
    "type": "require container"
  }, {
    "id": 103,
    "text": "",
    "type": "local variable"
  }, {
    "id": 104,
    "text": "",
    "type": "n/a"
  }, {
    "id": 105,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 106,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 107,
    "text": "(libname)",
    "type": "module"
  }, {
    "id": 108,
    "text": "",
    "type": "interface container"
  }, {
    "id": 109,
    "text": "",
    "type": "interface"
  }, {
    "id": 110,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 111,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 112,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 113,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 114,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 115,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 116,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 117,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 118,
    "text": "",
    "type": "require local variable"
  } ]
}