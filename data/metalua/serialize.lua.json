{
  "_filename": "serialize.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/metalua/src/lib/serialize.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 12,
    "label": "has",
    "to": 17
  }, {
    "from": 12,
    "label": "has",
    "to": 18
  }, {
    "from": 12,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 12,
    "label": "has",
    "to": 22
  }, {
    "from": 12,
    "label": "has",
    "to": 23
  }, {
    "from": 12,
    "label": "has",
    "to": 24
  }, {
    "from": 2,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 11
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 25,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 30,
    "label": "has",
    "to": 37
  }, {
    "from": 2,
    "label": "has",
    "to": 38
  }, {
    "from": 2,
    "label": "has",
    "to": 39
  }, {
    "from": 2,
    "label": "has",
    "to": 40
  }, {
    "from": 2,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 11
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 11
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 41,
    "label": "has",
    "to": 45
  }, {
    "from": 41,
    "label": "has",
    "to": 11
  }, {
    "from": 41,
    "label": "has",
    "to": 46
  }, {
    "from": 41,
    "label": "has",
    "to": 47
  }, {
    "from": 41,
    "label": "has",
    "to": 48
  }, {
    "from": 41,
    "label": "has",
    "to": 49
  }, {
    "from": 41,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 52,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 56,
    "label": "has",
    "to": 60
  }, {
    "from": 52,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 52,
    "label": "has",
    "to": 64
  }, {
    "from": 50,
    "label": "has",
    "to": 11
  }, {
    "from": 50,
    "label": "has",
    "to": 11
  }, {
    "from": 50,
    "label": "has",
    "to": 11
  }, {
    "from": 50,
    "label": "has",
    "to": 11
  }, {
    "from": 50,
    "label": "has",
    "to": 11
  }, {
    "from": 50,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 66,
    "label": "has",
    "to": 70
  }, {
    "from": 2,
    "label": "has",
    "to": 71
  }, {
    "from": 2,
    "label": "has",
    "to": 72
  }, {
    "from": 2,
    "label": "has",
    "to": 73
  }, {
    "from": 2,
    "label": "has",
    "to": 74
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 10
  }, {
    "from": 76,
    "label": "has",
    "to": 11
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 13
  }, {
    "from": 78,
    "label": "has",
    "to": 14
  }, {
    "from": 78,
    "label": "has",
    "to": 15
  }, {
    "from": 78,
    "label": "has",
    "to": 16
  }, {
    "from": 78,
    "label": "has",
    "to": 17
  }, {
    "from": 78,
    "label": "has",
    "to": 18
  }, {
    "from": 78,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 78,
    "label": "has",
    "to": 22
  }, {
    "from": 78,
    "label": "has",
    "to": 23
  }, {
    "from": 78,
    "label": "has",
    "to": 24
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 26
  }, {
    "from": 80,
    "label": "has",
    "to": 11
  }, {
    "from": 80,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 80,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 30,
    "label": "has",
    "to": 37
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 42
  }, {
    "from": 82,
    "label": "has",
    "to": 11
  }, {
    "from": 82,
    "label": "has",
    "to": 43
  }, {
    "from": 82,
    "label": "has",
    "to": 11
  }, {
    "from": 82,
    "label": "has",
    "to": 44
  }, {
    "from": 82,
    "label": "has",
    "to": 45
  }, {
    "from": 82,
    "label": "has",
    "to": 11
  }, {
    "from": 82,
    "label": "has",
    "to": 46
  }, {
    "from": 82,
    "label": "has",
    "to": 47
  }, {
    "from": 82,
    "label": "has",
    "to": 48
  }, {
    "from": 82,
    "label": "has",
    "to": 49
  }, {
    "from": 82,
    "label": "has",
    "to": 11
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 51
  }, {
    "from": 84,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 52,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 56,
    "label": "has",
    "to": 60
  }, {
    "from": 52,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 52,
    "label": "has",
    "to": 64
  }, {
    "from": 84,
    "label": "has",
    "to": 11
  }, {
    "from": 84,
    "label": "has",
    "to": 11
  }, {
    "from": 84,
    "label": "has",
    "to": 11
  }, {
    "from": 84,
    "label": "has",
    "to": 11
  }, {
    "from": 84,
    "label": "has",
    "to": 11
  }, {
    "from": 84,
    "label": "has",
    "to": 11
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 66,
    "label": "has",
    "to": 70
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 2,
    "label": "calls",
    "to": 86
  }, {
    "from": 2,
    "label": "calls",
    "to": 97
  }, {
    "from": 2,
    "label": "calls",
    "to": 97
  }, {
    "from": 78,
    "label": "calls",
    "to": 95
  }, {
    "from": 78,
    "label": "calls",
    "to": 95
  }, {
    "from": 86,
    "label": "calls",
    "to": 95
  }, {
    "from": 80,
    "label": "calls",
    "to": 100
  }, {
    "from": 2,
    "label": "calls",
    "to": 100
  }, {
    "from": 80,
    "label": "calls",
    "to": 80
  }, {
    "from": 80,
    "label": "calls",
    "to": 80
  }, {
    "from": 2,
    "label": "calls",
    "to": 80
  }, {
    "from": 2,
    "label": "calls",
    "to": 99
  }, {
    "from": 2,
    "label": "calls",
    "to": 76
  }, {
    "from": 2,
    "label": "calls",
    "to": 90
  }, {
    "from": 86,
    "label": "calls",
    "to": 90
  }, {
    "from": 78,
    "label": "calls",
    "to": 91
  }, {
    "from": 2,
    "label": "calls",
    "to": 91
  }, {
    "from": 2,
    "label": "calls",
    "to": 91
  }, {
    "from": 2,
    "label": "calls",
    "to": 91
  }, {
    "from": 2,
    "label": "calls",
    "to": 91
  }, {
    "from": 86,
    "label": "calls",
    "to": 91
  }, {
    "from": 2,
    "label": "calls",
    "to": 96
  }, {
    "from": 80,
    "label": "calls",
    "to": 92
  }, {
    "from": 80,
    "label": "calls",
    "to": 92
  }, {
    "from": 2,
    "label": "calls",
    "to": 92
  }, {
    "from": 2,
    "label": "calls",
    "to": 93
  }, {
    "from": 2,
    "label": "calls",
    "to": 93
  }, {
    "from": 80,
    "label": "calls",
    "to": 78
  }, {
    "from": 2,
    "label": "calls",
    "to": 84
  }, {
    "from": 2,
    "label": "calls",
    "to": 84
  }, {
    "from": 86,
    "label": "calls",
    "to": 94
  }, {
    "from": 2,
    "label": "calls",
    "to": 98
  }, {
    "from": 2,
    "label": "calls",
    "to": 89
  }, {
    "from": 2,
    "label": "calls",
    "to": 82
  }, {
    "from": 2,
    "label": "calls",
    "to": 82
  }, {
    "from": 2,
    "label": "calls",
    "to": 82
  }, {
    "from": 86,
    "label": "calls",
    "to": 82
  }, {
    "from": 86,
    "label": "calls",
    "to": 82
  }, {
    "from": 86,
    "label": "calls",
    "to": 82
  }, {
    "from": 2,
    "label": "calls",
    "to": 82
  }, {
    "from": 1,
    "label": "contains",
    "to": 88
  }, {
    "from": 88,
    "label": "declares",
    "to": 2
  }, {
    "from": 88,
    "label": "declares",
    "to": 76
  }, {
    "from": 88,
    "label": "declares",
    "to": 78
  }, {
    "from": 88,
    "label": "declares",
    "to": 80
  }, {
    "from": 88,
    "label": "declares",
    "to": 82
  }, {
    "from": 88,
    "label": "declares",
    "to": 84
  }, {
    "from": 88,
    "label": "declares",
    "to": 86
  }, {
    "from": 101,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 102
  }, {
    "from": 1,
    "label": "contains",
    "to": 103
  }, {
    "from": 102,
    "label": "initializes",
    "to": 104
  }, {
    "from": 104,
    "label": "assigns",
    "to": 105
  }, {
    "from": 105,
    "label": "assigns",
    "to": 106
  }, {
    "from": 106,
    "label": "assigns",
    "to": 107
  }, {
    "from": 105,
    "label": "assigns",
    "to": 108
  }, {
    "from": 108,
    "label": "assigns",
    "to": 109
  }, {
    "from": 105,
    "label": "assigns",
    "to": 110
  }, {
    "from": 110,
    "label": "assigns",
    "to": 111
  }, {
    "from": 105,
    "label": "assigns",
    "to": 112
  }, {
    "from": 112,
    "label": "assigns",
    "to": 113
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "serialize",
    "type": "module"
  }, {
    "id": 2,
    "text": "function serialize (x)\r\n   \r\n   local gensym_max =  0  -- index of the gensym() symbol generator\r\n   local seen_once  = { } -- element->true set of elements seen exactly once in the table\r\n   local multiple   = { } -- element->varname set of elements seen more than once\r\n   local nested     = { } -- transient, set of elements currently being traversed\r\n   local nest_points  = { }\r\n   local nest_patches = { }\r\n   \r\n   -- Generate fresh indexes to store new sub-tables:\r\n   local function gensym()\r\n      gensym_max = gensym_max + 1 ;  return gensym_max\r\n   end\r\n   \r\n   -----------------------------------------------------------------------------\r\n   -- `nest_points' are places where a (recursive) table appears within\r\n   -- itself, directly or not.  for instance, all of these chunks\r\n   -- create nest points in table `x':\r\n   --\r\n   -- \"x = { }; x[x] = 1\"\r\n   -- \"x = { }; x[1] = x\"\r\n   -- \"x = { }; x[1] = { y = { x } }\".\r\n   --\r\n   -- To handle those, two tables are created by `mark_nest_point()':\r\n   --\r\n   -- * `nest_points [parent]' associates all keys and values in table\r\n   --   parent which create a nest_point with boolean `true'\r\n   --\r\n   -- * `nest_patches' contains a list of `{ parent, key, value }'\r\n   --   tuples creating a nest point. They're all dumped after all the\r\n   --   other table operations have been performed.\r\n   --\r\n   -- `mark_nest_point (p, k, v)' fills tables `nest_points' and\r\n   -- `nest_patches' with informations required to remember that\r\n   -- key/value `(k,v)' creates a nest point in parent table `p'. It\r\n   -- also marks `p' as occuring multiple times, since several\r\n   -- references to it will be required in order to patch the nest\r\n   -- points.\r\n   -----------------------------------------------------------------------------\r\n   local function mark_nest_point (parent, k, v)\r\n      local nk, nv = nested[k], nested[v]\r\n      assert (not nk or seen_once[k] or multiple[k])\r\n      assert (not nv or seen_once[v] or multiple[v])\r\n      local mode = (nk and nv and \"kv\") or (nk and \"k\") or (\"v\")\r\n      local parent_np = nest_points [parent]\r\n      local pair = { k, v }\r\n      if not parent_np then parent_np = { }; nest_points [parent] = parent_np end\r\n      parent_np [k], parent_np [v] = nk, nv\r\n      table.insert (nest_patches, { parent, k, v })\r\n      seen_once [parent], multiple [parent]  = nil, true\r\n   end\r\n   \r\n   -----------------------------------------------------------------------------\r\n   -- 1st pass, list the tables and functions which appear more than once in `x'\r\n   -----------------------------------------------------------------------------\r\n   local function mark_multiple_occurences (x)\r\n      if no_identity [type(x)] then return end\r\n      if     seen_once [x]     then seen_once [x], multiple [x] = nil, true\r\n      elseif multiple  [x]     then -- pass\r\n      else   seen_once [x] = true end\r\n      \r\n      if type (x) == 'table' then\r\n         nested [x] = true\r\n         for k, v in pairs (x) do\r\n            if nested[k] or nested[v] then mark_nest_point (x, k, v) else\r\n               mark_multiple_occurences (k)\r\n               mark_multiple_occurences (v)\r\n            end\r\n         end\r\n         nested [x] = nil\r\n      end\r\n   end\r\n\r\n   local dumped    = { } -- multiply occuring values already dumped in localdefs\r\n   local localdefs = { } -- already dumped local definitions as source code lines\r\n\r\n\r\n   -- mutually recursive functions:\r\n   local dump_val, dump_or_ref_val\r\n\r\n   ------------------------------------------------------------------------------\r\n   -- if `x' occurs multiple times, dump the local var rather than the\r\n   -- value. If it's the first time it's dumped, also dump the content\r\n   -- in localdefs.\r\n   ------------------------------------------------------------------------------            \r\n   function dump_or_ref_val (x)\r\n      if nested[x] then return 'false' end -- placeholder for recursive reference\r\n      if not multiple[x] then return dump_val (x) end\r\n      local var = dumped [x]\r\n      if var then return \"_[\" .. var .. \"]\" end -- already referenced\r\n      local val = dump_val(x) -- first occurence, create and register reference\r\n      var = gensym()\r\n      table.insert(localdefs, \"_[\"..var..\"]=\"..val)\r\n      dumped [x] = var\r\n      return \"_[\" .. var .. \"]\"\r\n   end\r\n\r\n   -----------------------------------------------------------------------------\r\n   -- 2nd pass, dump the object; subparts occuring multiple times are dumped\r\n   -- in local variables, which can then be referenced multiple times;\r\n   -- care is taken to dump local vars in an order which repect dependencies.\r\n   -----------------------------------------------------------------------------\r\n   function dump_val(x)\r\n      local  t = type(x)\r\n      if     x==nil        then return 'nil'\r\n      elseif t==\"number\"   then return tostring(x)\r\n      elseif t==\"string\"   then return string.format(\"%q\", x)\r\n      elseif t==\"boolean\"  then return x and \"true\" or \"false\"\r\n      elseif t==\"function\" then\r\n         return string.format (\"loadstring(%q,'@serialized')\", string.dump (x))\r\n      elseif t==\"table\" then\r\n\r\n         local acc        = { }\r\n         local idx_dumped = { }\r\n         local np         = nest_points [x]\r\n         for i, v in ipairs(x) do\r\n            if np and np[v] then\r\n               table.insert (acc, 'false') -- placeholder\r\n            else\r\n               table.insert (acc, dump_or_ref_val(v))\r\n            end\r\n            idx_dumped[i] = true\r\n         end\r\n         for k, v in pairs(x) do\r\n            if np and (np[k] or np[v]) then\r\n               --check_multiple(k); check_multiple(v) -- force dumps in localdefs\r\n            elseif not idx_dumped[k] then\r\n               table.insert (acc, \"[\" .. dump_or_ref_val(k) .. \"] = \" .. dump_or_ref_val(v))\r\n            end\r\n         end\r\n         return \"{ \"..table.concat(acc,\", \")..\" }\"\r\n      else\r\n         error (\"Can't serialize data of type \"..t)\r\n      end\r\n   end\r\n          \r\n   -- Patch the recursive table entries:\r\n   local function dump_nest_patches()\r\n      for _, entry in ipairs(nest_patches) do\r\n         local p, k, v = unpack (entry)\r\n         assert (multiple[p])\r\n         local set = dump_or_ref_val (p) .. \"[\" .. dump_or_ref_val (k) .. \"] = \" .. \r\n            dump_or_ref_val (v) .. \" -- rec \"\r\n         table.insert (localdefs, set)\r\n      end\r\n   end\r\n   \r\n   mark_multiple_occurences (x)\r\n   local toplevel = dump_or_ref_val (x)\r\n   dump_nest_patches()\r\n\r\n   if next (localdefs) then\r\n      -- Dump local vars containing shared or recursive parts,\r\n      -- then the main table using them.\r\n      return \"local _={ }\\n\" ..\r\n         table.concat (localdefs, \"\\n\") .. \r\n         \"\\nreturn \" .. toplevel\r\n   else\r\n      -- No shared part, straightforward dump:\r\n      return \"return \" .. toplevel\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local gensym_max =  0",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local seen_once  = { }",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local multiple   = { }",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "local nested     = { }",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "local nest_points  = { }",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "local nest_patches = { }",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "local function gensym()\r\n      gensym_max = gensym_max + 1 ;  return gensym_max\r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 10,
    "text": "gensym_max = gensym_max + 1",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 12,
    "text": "local function mark_nest_point (parent, k, v)\r\n      local nk, nv = nested[k], nested[v]\r\n      assert (not nk or seen_once[k] or multiple[k])\r\n      assert (not nv or seen_once[v] or multiple[v])\r\n      local mode = (nk and nv and \"kv\") or (nk and \"k\") or (\"v\")\r\n      local parent_np = nest_points [parent]\r\n      local pair = { k, v }\r\n      if not parent_np then parent_np = { }; nest_points [parent] = parent_np end\r\n      parent_np [k], parent_np [v] = nk, nv\r\n      table.insert (nest_patches, { parent, k, v })\r\n      seen_once [parent], multiple [parent]  = nil, true\r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 13,
    "text": "local nk, nv = nested[k], nested[v]",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "assert (not nk or seen_once[k] or multiple[k])",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "assert (not nv or seen_once[v] or multiple[v])",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "local mode = (nk and nv and \"kv\") or (nk and \"k\") or (\"v\")",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "local parent_np = nest_points [parent]",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "local pair = { k, v }",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "if not parent_np then parent_np = { }; nest_points [parent] = parent_np end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "parent_np = { }",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "nest_points [parent] = parent_np",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "parent_np [k], parent_np [v] = nk, nv",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "table.insert (nest_patches, { parent, k, v })",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "seen_once [parent], multiple [parent]  = nil, true",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "local function mark_multiple_occurences (x)\r\n      if no_identity [type(x)] then return end\r\n      if     seen_once [x]     then seen_once [x], multiple [x] = nil, true\r\n      elseif multiple  [x]     then -- pass\r\n      else   seen_once [x] = true end\r\n      \r\n      if type (x) == 'table' then\r\n         nested [x] = true\r\n         for k, v in pairs (x) do\r\n            if nested[k] or nested[v] then mark_nest_point (x, k, v) else\r\n               mark_multiple_occurences (k)\r\n               mark_multiple_occurences (v)\r\n            end\r\n         end\r\n         nested [x] = nil\r\n      end\r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 26,
    "text": "if no_identity [type(x)] then return end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "if     seen_once [x]     then seen_once [x], multiple [x] = nil, true\r\n      elseif multiple  [x]     then -- pass\r\n      else   seen_once [x] = true end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "seen_once [x], multiple [x] = nil, true",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "seen_once [x] = true",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "if type (x) == 'table' then\r\n         nested [x] = true\r\n         for k, v in pairs (x) do\r\n            if nested[k] or nested[v] then mark_nest_point (x, k, v) else\r\n               mark_multiple_occurences (k)\r\n               mark_multiple_occurences (v)\r\n            end\r\n         end\r\n         nested [x] = nil\r\n      end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "nested [x] = true",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "for k, v in pairs (x) do\r\n            if nested[k] or nested[v] then mark_nest_point (x, k, v) else\r\n               mark_multiple_occurences (k)\r\n               mark_multiple_occurences (v)\r\n            end\r\n         end",
    "type": "statement:genericfor"
  }, {
    "id": 33,
    "text": "if nested[k] or nested[v] then mark_nest_point (x, k, v) else\r\n               mark_multiple_occurences (k)\r\n               mark_multiple_occurences (v)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "mark_nest_point (x, k, v)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "mark_multiple_occurences (k)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "mark_multiple_occurences (v)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "nested [x] = nil",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "local dumped    = { }",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "local localdefs = { }",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "local dump_val, dump_or_ref_val",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "function dump_or_ref_val (x)\r\n      if nested[x] then return 'false' end -- placeholder for recursive reference\r\n      if not multiple[x] then return dump_val (x) end\r\n      local var = dumped [x]\r\n      if var then return \"_[\" .. var .. \"]\" end -- already referenced\r\n      local val = dump_val(x) -- first occurence, create and register reference\r\n      var = gensym()\r\n      table.insert(localdefs, \"_[\"..var..\"]=\"..val)\r\n      dumped [x] = var\r\n      return \"_[\" .. var .. \"]\"\r\n   end",
    "type": "statement:globalfunction"
  }, {
    "id": 42,
    "text": "if nested[x] then return 'false' end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "if not multiple[x] then return dump_val (x) end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "local var = dumped [x]",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "if var then return \"_[\" .. var .. \"]\" end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "local val = dump_val(x)",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "var = gensym()",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "table.insert(localdefs, \"_[\"..var..\"]=\"..val)",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "dumped [x] = var",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "function dump_val(x)\r\n      local  t = type(x)\r\n      if     x==nil        then return 'nil'\r\n      elseif t==\"number\"   then return tostring(x)\r\n      elseif t==\"string\"   then return string.format(\"%q\", x)\r\n      elseif t==\"boolean\"  then return x and \"true\" or \"false\"\r\n      elseif t==\"function\" then\r\n         return string.format (\"loadstring(%q,'@serialized')\", string.dump (x))\r\n      elseif t==\"table\" then\r\n\r\n         local acc        = { }\r\n         local idx_dumped = { }\r\n         local np         = nest_points [x]\r\n         for i, v in ipairs(x) do\r\n            if np and np[v] then\r\n               table.insert (acc, 'false') -- placeholder\r\n            else\r\n               table.insert (acc, dump_or_ref_val(v))\r\n            end\r\n            idx_dumped[i] = true\r\n         end\r\n         for k, v in pairs(x) do\r\n            if np and (np[k] or np[v]) then\r\n               --check_multiple(k); check_multiple(v) -- force dumps in localdefs\r\n            elseif not idx_dumped[k] then\r\n               table.insert (acc, \"[\" .. dump_or_ref_val(k) .. \"] = \" .. dump_or_ref_val(v))\r\n            end\r\n         end\r\n         return \"{ \"..table.concat(acc,\", \")..\" }\"\r\n      else\r\n         error (\"Can't serialize data of type \"..t)\r\n      end\r\n   end",
    "type": "statement:globalfunction"
  }, {
    "id": 51,
    "text": "local  t = type(x)",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "if     x==nil        then return 'nil'\r\n      elseif t==\"number\"   then return tostring(x)\r\n      elseif t==\"string\"   then return string.format(\"%q\", x)\r\n      elseif t==\"boolean\"  then return x and \"true\" or \"false\"\r\n      elseif t==\"function\" then\r\n         return string.format (\"loadstring(%q,'@serialized')\", string.dump (x))\r\n      elseif t==\"table\" then\r\n\r\n         local acc        = { }\r\n         local idx_dumped = { }\r\n         local np         = nest_points [x]\r\n         for i, v in ipairs(x) do\r\n            if np and np[v] then\r\n               table.insert (acc, 'false') -- placeholder\r\n            else\r\n               table.insert (acc, dump_or_ref_val(v))\r\n            end\r\n            idx_dumped[i] = true\r\n         end\r\n         for k, v in pairs(x) do\r\n            if np and (np[k] or np[v]) then\r\n               --check_multiple(k); check_multiple(v) -- force dumps in localdefs\r\n            elseif not idx_dumped[k] then\r\n               table.insert (acc, \"[\" .. dump_or_ref_val(k) .. \"] = \" .. dump_or_ref_val(v))\r\n            end\r\n         end\r\n         return \"{ \"..table.concat(acc,\", \")..\" }\"\r\n      else\r\n         error (\"Can't serialize data of type \"..t)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "local acc        = { }",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "local idx_dumped = { }",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "local np         = nest_points [x]",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "for i, v in ipairs(x) do\r\n            if np and np[v] then\r\n               table.insert (acc, 'false') -- placeholder\r\n            else\r\n               table.insert (acc, dump_or_ref_val(v))\r\n            end\r\n            idx_dumped[i] = true\r\n         end",
    "type": "statement:genericfor"
  }, {
    "id": 57,
    "text": "if np and np[v] then\r\n               table.insert (acc, 'false') -- placeholder\r\n            else\r\n               table.insert (acc, dump_or_ref_val(v))\r\n            end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "table.insert (acc, 'false')",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "table.insert (acc, dump_or_ref_val(v))",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "idx_dumped[i] = true",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "for k, v in pairs(x) do\r\n            if np and (np[k] or np[v]) then\r\n               --check_multiple(k); check_multiple(v) -- force dumps in localdefs\r\n            elseif not idx_dumped[k] then\r\n               table.insert (acc, \"[\" .. dump_or_ref_val(k) .. \"] = \" .. dump_or_ref_val(v))\r\n            end\r\n         end",
    "type": "statement:genericfor"
  }, {
    "id": 62,
    "text": "if np and (np[k] or np[v]) then\r\n               --check_multiple(k); check_multiple(v) -- force dumps in localdefs\r\n            elseif not idx_dumped[k] then\r\n               table.insert (acc, \"[\" .. dump_or_ref_val(k) .. \"] = \" .. dump_or_ref_val(v))\r\n            end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "table.insert (acc, \"[\" .. dump_or_ref_val(k) .. \"] = \" .. dump_or_ref_val(v))",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "error (\"Can't serialize data of type \"..t)",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "local function dump_nest_patches()\r\n      for _, entry in ipairs(nest_patches) do\r\n         local p, k, v = unpack (entry)\r\n         assert (multiple[p])\r\n         local set = dump_or_ref_val (p) .. \"[\" .. dump_or_ref_val (k) .. \"] = \" .. \r\n            dump_or_ref_val (v) .. \" -- rec \"\r\n         table.insert (localdefs, set)\r\n      end\r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 66,
    "text": "for _, entry in ipairs(nest_patches) do\r\n         local p, k, v = unpack (entry)\r\n         assert (multiple[p])\r\n         local set = dump_or_ref_val (p) .. \"[\" .. dump_or_ref_val (k) .. \"] = \" .. \r\n            dump_or_ref_val (v) .. \" -- rec \"\r\n         table.insert (localdefs, set)\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 67,
    "text": "local p, k, v = unpack (entry)",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "assert (multiple[p])",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "local set = dump_or_ref_val (p) .. \"[\" .. dump_or_ref_val (k) .. \"] = \" .. \r\n            dump_or_ref_val (v) .. \" -- rec \"",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "table.insert (localdefs, set)",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "mark_multiple_occurences (x)",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "local toplevel = dump_or_ref_val (x)",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "dump_nest_patches()",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "if next (localdefs) then\r\n      -- Dump local vars containing shared or recursive parts,\r\n      -- then the main table using them.\r\n      return \"local _={ }\\n\" ..\r\n         table.concat (localdefs, \"\\n\") .. \r\n         \"\\nreturn \" .. toplevel\r\n   else\r\n      -- No shared part, straightforward dump:\r\n      return \"return \" .. toplevel\r\n   end",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "local function gensym()\r\n      gensym_max = gensym_max + 1 ;  return gensym_max\r\n   end",
    "type": "function"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "local function mark_nest_point (parent, k, v)\r\n      local nk, nv = nested[k], nested[v]\r\n      assert (not nk or seen_once[k] or multiple[k])\r\n      assert (not nv or seen_once[v] or multiple[v])\r\n      local mode = (nk and nv and \"kv\") or (nk and \"k\") or (\"v\")\r\n      local parent_np = nest_points [parent]\r\n      local pair = { k, v }\r\n      if not parent_np then parent_np = { }; nest_points [parent] = parent_np end\r\n      parent_np [k], parent_np [v] = nk, nv\r\n      table.insert (nest_patches, { parent, k, v })\r\n      seen_once [parent], multiple [parent]  = nil, true\r\n   end",
    "type": "function"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "local function mark_multiple_occurences (x)\r\n      if no_identity [type(x)] then return end\r\n      if     seen_once [x]     then seen_once [x], multiple [x] = nil, true\r\n      elseif multiple  [x]     then -- pass\r\n      else   seen_once [x] = true end\r\n      \r\n      if type (x) == 'table' then\r\n         nested [x] = true\r\n         for k, v in pairs (x) do\r\n            if nested[k] or nested[v] then mark_nest_point (x, k, v) else\r\n               mark_multiple_occurences (k)\r\n               mark_multiple_occurences (v)\r\n            end\r\n         end\r\n         nested [x] = nil\r\n      end\r\n   end",
    "type": "function"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "function dump_or_ref_val (x)\r\n      if nested[x] then return 'false' end -- placeholder for recursive reference\r\n      if not multiple[x] then return dump_val (x) end\r\n      local var = dumped [x]\r\n      if var then return \"_[\" .. var .. \"]\" end -- already referenced\r\n      local val = dump_val(x) -- first occurence, create and register reference\r\n      var = gensym()\r\n      table.insert(localdefs, \"_[\"..var..\"]=\"..val)\r\n      dumped [x] = var\r\n      return \"_[\" .. var .. \"]\"\r\n   end",
    "type": "function"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "function dump_val(x)\r\n      local  t = type(x)\r\n      if     x==nil        then return 'nil'\r\n      elseif t==\"number\"   then return tostring(x)\r\n      elseif t==\"string\"   then return string.format(\"%q\", x)\r\n      elseif t==\"boolean\"  then return x and \"true\" or \"false\"\r\n      elseif t==\"function\" then\r\n         return string.format (\"loadstring(%q,'@serialized')\", string.dump (x))\r\n      elseif t==\"table\" then\r\n\r\n         local acc        = { }\r\n         local idx_dumped = { }\r\n         local np         = nest_points [x]\r\n         for i, v in ipairs(x) do\r\n            if np and np[v] then\r\n               table.insert (acc, 'false') -- placeholder\r\n            else\r\n               table.insert (acc, dump_or_ref_val(v))\r\n            end\r\n            idx_dumped[i] = true\r\n         end\r\n         for k, v in pairs(x) do\r\n            if np and (np[k] or np[v]) then\r\n               --check_multiple(k); check_multiple(v) -- force dumps in localdefs\r\n            elseif not idx_dumped[k] then\r\n               table.insert (acc, \"[\" .. dump_or_ref_val(k) .. \"] = \" .. dump_or_ref_val(v))\r\n            end\r\n         end\r\n         return \"{ \"..table.concat(acc,\", \")..\" }\"\r\n      else\r\n         error (\"Can't serialize data of type \"..t)\r\n      end\r\n   end",
    "type": "function"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "local function dump_nest_patches()\r\n      for _, entry in ipairs(nest_patches) do\r\n         local p, k, v = unpack (entry)\r\n         assert (multiple[p])\r\n         local set = dump_or_ref_val (p) .. \"[\" .. dump_or_ref_val (k) .. \"] = \" .. \r\n            dump_or_ref_val (v) .. \" -- rec \"\r\n         table.insert (localdefs, set)\r\n      end\r\n   end",
    "type": "function"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "",
    "type": "function container"
  }, {
    "id": 89,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 90,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 91,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 92,
    "text": "type",
    "type": "global function"
  }, {
    "id": 93,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 94,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 95,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 96,
    "text": "next",
    "type": "global function"
  }, {
    "id": 97,
    "text": "format",
    "type": "global function"
  }, {
    "id": 98,
    "text": "dump",
    "type": "global function"
  }, {
    "id": 99,
    "text": "error",
    "type": "global function"
  }, {
    "id": 100,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 101,
    "text": "",
    "type": "global variable"
  }, {
    "id": 102,
    "text": "",
    "type": "variable container"
  }, {
    "id": 103,
    "text": "",
    "type": "require container"
  }, {
    "id": 104,
    "text": "",
    "type": "local variable"
  }, {
    "id": 105,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 106,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 107,
    "text": "",
    "type": "number"
  }, {
    "id": 108,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 109,
    "text": "",
    "type": "number"
  }, {
    "id": 110,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 111,
    "text": "",
    "type": "number"
  }, {
    "id": 112,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 113,
    "text": "",
    "type": "number"
  } ]
}