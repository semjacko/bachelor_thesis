{
  "_filename": "bootstrap.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/metalua/src/build-utils/bootstrap.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 6
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 6
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 6
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 21,
    "label": "has",
    "to": 2
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 21,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 6
  }, {
    "from": 21,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 6
  }, {
    "from": 21,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 6
  }, {
    "from": 21,
    "label": "has",
    "to": 25
  }, {
    "from": 21,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 27,
    "label": "has",
    "to": 31
  }, {
    "from": 27,
    "label": "has",
    "to": 32
  }, {
    "from": 27,
    "label": "has",
    "to": 33
  }, {
    "from": 27,
    "label": "has",
    "to": 34
  }, {
    "from": 27,
    "label": "has",
    "to": 35
  }, {
    "from": 27,
    "label": "has",
    "to": 36
  }, {
    "from": 27,
    "label": "has",
    "to": 37
  }, {
    "from": 27,
    "label": "has",
    "to": 38
  }, {
    "from": 27,
    "label": "has",
    "to": 39
  }, {
    "from": 27,
    "label": "has",
    "to": 40
  }, {
    "from": 2,
    "label": "calls",
    "to": 47
  }, {
    "from": 2,
    "label": "calls",
    "to": 45
  }, {
    "from": 27,
    "label": "calls",
    "to": 45
  }, {
    "from": 41,
    "label": "calls",
    "to": 42
  }, {
    "from": 41,
    "label": "calls",
    "to": 42
  }, {
    "from": 41,
    "label": "calls",
    "to": 44
  }, {
    "from": 41,
    "label": "calls",
    "to": 43
  }, {
    "from": 27,
    "label": "calls",
    "to": 43
  }, {
    "from": 27,
    "label": "calls",
    "to": 43
  }, {
    "from": 2,
    "label": "calls",
    "to": 48
  }, {
    "from": 27,
    "label": "calls",
    "to": 48
  }, {
    "from": 27,
    "label": "calls",
    "to": 50
  }, {
    "from": 16,
    "label": "calls",
    "to": 49
  }, {
    "from": 27,
    "label": "calls",
    "to": 49
  }, {
    "from": 27,
    "label": "calls",
    "to": 49
  }, {
    "from": 16,
    "label": "calls",
    "to": 12
  }, {
    "from": 12,
    "label": "calls",
    "to": 8
  }, {
    "from": 27,
    "label": "calls",
    "to": 8
  }, {
    "from": 12,
    "label": "calls",
    "to": 2
  }, {
    "from": 41,
    "label": "calls",
    "to": 51
  }, {
    "from": 41,
    "label": "calls",
    "to": 51
  }, {
    "from": 41,
    "label": "calls",
    "to": 51
  }, {
    "from": 41,
    "label": "calls",
    "to": 51
  }, {
    "from": 41,
    "label": "calls",
    "to": 51
  }, {
    "from": 8,
    "label": "calls",
    "to": 46
  }, {
    "from": 41,
    "label": "calls",
    "to": 27
  }, {
    "from": 1,
    "label": "contains",
    "to": 41
  }, {
    "from": 41,
    "label": "declares",
    "to": 2
  }, {
    "from": 41,
    "label": "declares",
    "to": 8
  }, {
    "from": 41,
    "label": "declares",
    "to": 12
  }, {
    "from": 41,
    "label": "declares",
    "to": 16
  }, {
    "from": 41,
    "label": "declares",
    "to": 21
  }, {
    "from": 41,
    "label": "declares",
    "to": 27
  }, {
    "from": 1,
    "label": "contains",
    "to": 53
  }, {
    "from": 1,
    "label": "contains",
    "to": 54
  }, {
    "from": 53,
    "label": "initializes",
    "to": 55
  }, {
    "from": 55,
    "label": "assigns",
    "to": 56
  }, {
    "from": 53,
    "label": "initializes",
    "to": 57
  }, {
    "from": 57,
    "label": "assigns",
    "to": 58
  }, {
    "from": 54,
    "label": "initializes",
    "to": 52
  }, {
    "from": 54,
    "label": "initializes",
    "to": 52
  }, {
    "from": 54,
    "label": "initializes",
    "to": 52
  }, {
    "from": 54,
    "label": "initializes",
    "to": 52
  }, {
    "from": 54,
    "label": "initializes",
    "to": 52
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "bootstrap",
    "type": "module"
  }, {
    "id": 2,
    "text": "function mlc.function_of_ast (ast)\r\n      local  proto = bytecode.metalua_compile (ast)\r\n      local  dump  = bytecode.dump_string (proto)\r\n      local  func  = string.undump(dump) \r\n      return func\r\n   end",
    "type": "function"
  }, {
    "id": 3,
    "text": "local  proto = bytecode.metalua_compile (ast)",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local  dump  = bytecode.dump_string (proto)",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local  func  = string.undump(dump)",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function mlc.ast_of_luastring (src)\r\n      local  lx  = mlp.lexer:newstream (src)\r\n      local  ast = mlp.chunk (lx)\r\n      return ast\r\n   end",
    "type": "function"
  }, {
    "id": 9,
    "text": "local  lx  = mlp.lexer:newstream (src)",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "local  ast = mlp.chunk (lx)",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function mlc.function_of_luastring (src)\r\n      local  ast  = mlc.ast_of_luastring (src)\r\n      local  func = mlc.function_of_ast(ast)\r\n      return func\r\n   end",
    "type": "function"
  }, {
    "id": 13,
    "text": "local  ast  = mlc.ast_of_luastring (src)",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "local  func = mlc.function_of_ast(ast)",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function mlc.function_of_luafile (name)\r\n      local f   = io.open(name, 'r')\r\n      local src = f:read '*a'\r\n      f:close()\r\n      return mlc.function_of_luastring (src, \"@\"..name)\r\n   end",
    "type": "function"
  }, {
    "id": 17,
    "text": "local f   = io.open(name, 'r')",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "local src = f:read '*a'",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function()\r\n\r\n   print \"Loading fake metalua.mlc module for compiler bootstrapping\"\r\n\r\n   mlc = { } \r\n   mlc.metabugs = false\r\n\r\n   function mlc.function_of_ast (ast)\r\n      local  proto = bytecode.metalua_compile (ast)\r\n      local  dump  = bytecode.dump_string (proto)\r\n      local  func  = string.undump(dump) \r\n      return func\r\n   end\r\n   \r\n   function mlc.ast_of_luastring (src)\r\n      local  lx  = mlp.lexer:newstream (src)\r\n      local  ast = mlp.chunk (lx)\r\n      return ast\r\n   end\r\n   \r\n   function mlc.function_of_luastring (src)\r\n      local  ast  = mlc.ast_of_luastring (src)\r\n      local  func = mlc.function_of_ast(ast)\r\n      return func\r\n   end\r\n\r\n   function mlc.function_of_luafile (name)\r\n      local f   = io.open(name, 'r')\r\n      local src = f:read '*a'\r\n      f:close()\r\n      return mlc.function_of_luastring (src, \"@\"..name)\r\n   end\r\n\r\n   -- don't let require() fork a separate process for *.mlua compilations.\r\n   package.metalua_nopopen = true\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "print \"Loading fake metalua.mlc module for compiler bootstrapping\"",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "mlc = { }",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "mlc.metabugs = false",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "package.metalua_nopopen = true",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "local function compile_file (src_filename)\r\n   print(\"Compiling \"..src_filename..\"... \")\r\n   local src_file     = io.open (src_filename, 'r')\r\n   local src          = src_file:read '*a'; src_file:close()\r\n   local ast          = mlc.ast_of_luastring (src)\r\n   local proto        = bytecode.metalua_compile (ast, '@'..src_filename)\r\n   local dump         = bytecode.dump_string (proto)\r\n   local dst_filename = cfg.output or error \"no output file name specified\"\r\n   local dst_file     = io.open (dst_filename, 'wb')\r\n   dst_file:write(dump)\r\n   dst_file:close()\r\n   print(\"...Wrote \"..dst_filename)\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "print(\"Compiling \"..src_filename..\"... \")",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "local src_file     = io.open (src_filename, 'r')",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "local src          = src_file:read '*a'",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "src_file:close()",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "local ast          = mlc.ast_of_luastring (src)",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "local proto        = bytecode.metalua_compile (ast, '@'..src_filename)",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "local dump         = bytecode.dump_string (proto)",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "local dst_filename = cfg.output or error \"no output file name specified\"",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "local dst_file     = io.open (dst_filename, 'wb')",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "dst_file:write(dump)",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "dst_file:close()",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "print(\"...Wrote \"..dst_filename)",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "",
    "type": "function container"
  }, {
    "id": 42,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 43,
    "text": "print",
    "type": "global function"
  }, {
    "id": 44,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 45,
    "text": "dump_string",
    "type": "global function"
  }, {
    "id": 46,
    "text": "chunk",
    "type": "global function"
  }, {
    "id": 47,
    "text": "undump",
    "type": "global function"
  }, {
    "id": 48,
    "text": "metalua_compile",
    "type": "global function"
  }, {
    "id": 49,
    "text": "open",
    "type": "global function"
  }, {
    "id": 50,
    "text": "error",
    "type": "global function"
  }, {
    "id": 51,
    "text": "require",
    "type": "global function"
  }, {
    "id": 52,
    "text": "",
    "type": "global variable"
  }, {
    "id": 53,
    "text": "",
    "type": "variable container"
  }, {
    "id": 54,
    "text": "",
    "type": "require container"
  }, {
    "id": 55,
    "text": "",
    "type": "global variable"
  }, {
    "id": 56,
    "text": "",
    "type": "n/a"
  }, {
    "id": 57,
    "text": "",
    "type": "global variable"
  }, {
    "id": 58,
    "text": "",
    "type": "n/a"
  } ]
}