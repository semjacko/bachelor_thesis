{
  "_filename": "mlc_xcall.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/metalua/src/lib/metalua/mlc_xcall.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 11,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 15
  }, {
    "from": 9,
    "label": "has",
    "to": 16
  }, {
    "from": 2,
    "label": "has",
    "to": 17
  }, {
    "from": 2,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 18,
    "label": "has",
    "to": 22
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 23
  }, {
    "from": 2,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 8
  }, {
    "from": 26,
    "label": "has",
    "to": 12
  }, {
    "from": 26,
    "label": "has",
    "to": 13
  }, {
    "from": 26,
    "label": "has",
    "to": 14
  }, {
    "from": 26,
    "label": "has",
    "to": 8
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 28,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 33,
    "label": "has",
    "to": 37
  }, {
    "from": 28,
    "label": "has",
    "to": 38
  }, {
    "from": 28,
    "label": "has",
    "to": 8
  }, {
    "from": 28,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 40,
    "label": "has",
    "to": 45
  }, {
    "from": 40,
    "label": "has",
    "to": 46
  }, {
    "from": 40,
    "label": "has",
    "to": 47
  }, {
    "from": 40,
    "label": "has",
    "to": 48
  }, {
    "from": 40,
    "label": "has",
    "to": 8
  }, {
    "from": 40,
    "label": "has",
    "to": 49
  }, {
    "from": 28,
    "label": "calls",
    "to": 60
  }, {
    "from": 2,
    "label": "calls",
    "to": 58
  }, {
    "from": 2,
    "label": "calls",
    "to": 54
  }, {
    "from": 2,
    "label": "calls",
    "to": 54
  }, {
    "from": 2,
    "label": "calls",
    "to": 52
  }, {
    "from": 40,
    "label": "calls",
    "to": 52
  }, {
    "from": 28,
    "label": "calls",
    "to": 61
  }, {
    "from": 40,
    "label": "calls",
    "to": 61
  }, {
    "from": 2,
    "label": "calls",
    "to": 62
  }, {
    "from": 28,
    "label": "calls",
    "to": 62
  }, {
    "from": 40,
    "label": "calls",
    "to": 62
  }, {
    "from": 2,
    "label": "calls",
    "to": 53
  }, {
    "from": 25,
    "label": "calls",
    "to": 63
  }, {
    "from": 28,
    "label": "calls",
    "to": 56
  }, {
    "from": 26,
    "label": "calls",
    "to": 57
  }, {
    "from": 28,
    "label": "calls",
    "to": 51
  }, {
    "from": 40,
    "label": "calls",
    "to": 51
  }, {
    "from": 2,
    "label": "calls",
    "to": 64
  }, {
    "from": 2,
    "label": "calls",
    "to": 64
  }, {
    "from": 2,
    "label": "calls",
    "to": 55
  }, {
    "from": 40,
    "label": "calls",
    "to": 28
  }, {
    "from": 1,
    "label": "contains",
    "to": 50
  }, {
    "from": 50,
    "label": "declares",
    "to": 2
  }, {
    "from": 50,
    "label": "declares",
    "to": 25
  }, {
    "from": 50,
    "label": "declares",
    "to": 26
  }, {
    "from": 50,
    "label": "declares",
    "to": 28
  }, {
    "from": 50,
    "label": "declares",
    "to": 40
  }, {
    "from": 1,
    "label": "declares",
    "to": 59
  }, {
    "from": 1,
    "label": "contains",
    "to": 66
  }, {
    "from": 1,
    "label": "contains",
    "to": 67
  }, {
    "from": 66,
    "label": "initializes",
    "to": 68
  }, {
    "from": 68,
    "label": "assigns",
    "to": 69
  }, {
    "from": 66,
    "label": "initializes",
    "to": 70
  }, {
    "from": 70,
    "label": "assigns",
    "to": 71
  }, {
    "from": 67,
    "label": "initializes",
    "to": 65
  }, {
    "from": 67,
    "label": "initializes",
    "to": 65
  }, {
    "from": 1,
    "label": "provides",
    "to": 72
  }, {
    "from": 70,
    "label": "represents",
    "to": 73
  }, {
    "from": 72,
    "label": "provides",
    "to": 73
  }, {
    "from": 65,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "mlc_xcall",
    "type": "module"
  }, {
    "id": 2,
    "text": "function mlc_xcall.server (luafilename, astfilename, metabugs)\r\n\r\n   -- We don't want these to be loaded when people only do client-side business\r\n   require 'metalua.compiler'\r\n   require 'serialize'\r\n\r\n   mlc.metabugs = metabugs\r\n\r\n   -- compile the content of luafile name in an AST, serialized in astfilename\r\n   --local status, ast = pcall (mlc.luafile_to_ast, luafilename)\r\n   local status, ast\r\n   local function compile() return mlc.luafile_to_ast (luafilename) end\r\n   if mlc.metabugs then \r\n      print 'mlc_xcall.server/metabugs'\r\n      --status, ast = xpcall (compile, debug.traceback)\r\n      --status, ast = xpcall (compile, debug.traceback)\r\n      local function tb(msg)\r\n         local r = debug.traceback(msg)\r\n\r\n         -- Cut superfluous end lines\r\n         local line_re = '\\n[^\\n]*'\r\n         local re =  \"^(.-)\" .. (line_re) :rep (STACK_LINES_TO_CUT) .. \"$\"\r\n         return r :strmatch (re) or r\r\n      end\r\n      --status, ast = xpcall (compile, debug.traceback)\r\n      status, ast = xpcall (compile, tb)\r\n   else status, ast = pcall (compile) end\r\n   local out = io.open (astfilename, 'w')\r\n   if status then -- success\r\n      out:write (serialize (ast))\r\n      out:close ()\r\n      os.exit (0)\r\n   else -- failure, `ast' is actually the error message\r\n      out:write (ast)\r\n      out:close ()\r\n      os.exit (-1)\r\n   end      \r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "require 'metalua.compiler'",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "require 'serialize'",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "mlc.metabugs = metabugs",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "local status, ast",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "local function compile() return mlc.luafile_to_ast (luafilename) end",
    "type": "statement:localfunction"
  }, {
    "id": 8,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 9,
    "text": "if mlc.metabugs then \r\n      print 'mlc_xcall.server/metabugs'\r\n      --status, ast = xpcall (compile, debug.traceback)\r\n      --status, ast = xpcall (compile, debug.traceback)\r\n      local function tb(msg)\r\n         local r = debug.traceback(msg)\r\n\r\n         -- Cut superfluous end lines\r\n         local line_re = '\\n[^\\n]*'\r\n         local re =  \"^(.-)\" .. (line_re) :rep (STACK_LINES_TO_CUT) .. \"$\"\r\n         return r :strmatch (re) or r\r\n      end\r\n      --status, ast = xpcall (compile, debug.traceback)\r\n      status, ast = xpcall (compile, tb)\r\n   else status, ast = pcall (compile) end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "print 'mlc_xcall.server/metabugs'",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "local function tb(msg)\r\n         local r = debug.traceback(msg)\r\n\r\n         -- Cut superfluous end lines\r\n         local line_re = '\\n[^\\n]*'\r\n         local re =  \"^(.-)\" .. (line_re) :rep (STACK_LINES_TO_CUT) .. \"$\"\r\n         return r :strmatch (re) or r\r\n      end",
    "type": "statement:localfunction"
  }, {
    "id": 12,
    "text": "local r = debug.traceback(msg)",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "local line_re = '\\n[^\\n]*'",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "local re =  \"^(.-)\" .. (line_re) :rep (STACK_LINES_TO_CUT) .. \"$\"",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "status, ast = xpcall (compile, tb)",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "status, ast = pcall (compile)",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "local out = io.open (astfilename, 'w')",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "if status then -- success\r\n      out:write (serialize (ast))\r\n      out:close ()\r\n      os.exit (0)\r\n   else -- failure, `ast' is actually the error message\r\n      out:write (ast)\r\n      out:close ()\r\n      os.exit (-1)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "out:write (serialize (ast))",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "out:close ()",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "os.exit (0)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "out:write (ast)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "os.exit (-1)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "local function compile() return mlc.luafile_to_ast (luafilename) end",
    "type": "function"
  }, {
    "id": 26,
    "text": "local function tb(msg)\r\n         local r = debug.traceback(msg)\r\n\r\n         -- Cut superfluous end lines\r\n         local line_re = '\\n[^\\n]*'\r\n         local re =  \"^(.-)\" .. (line_re) :rep (STACK_LINES_TO_CUT) .. \"$\"\r\n         return r :strmatch (re) or r\r\n      end",
    "type": "function"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function mlc_xcall.client_file (luafile)\r\n\r\n   -- printf(\"\\n\\nmlc_xcall.client_file(%q)\\n\\n\", luafile)\r\n\r\n   local tmpfilename = os.tmpname()\r\n   local cmd = string.format (\r\n      [=[%s -l metalua.mlc_xcall -e \"mlc_xcall.server([[%s]], [[%s]], %s)\"]=], \r\n      (_PROGDIR and _PROGDIR..\"/lua\" or \"lua\"), luafile, tmpfilename, mlc.metabugs and \"true\" or \"false\")\r\n\r\n   -- printf(\"os.execute [[%s]]\\n\\n\", cmd)\r\n\r\n   local status = (0 == os.execute (cmd))\r\n   local result -- ast or error msg\r\n   if status then \r\n      result = (lua_loadfile or loadfile) (tmpfilename) ()\r\n   else\r\n      local f = io.open (tmpfilename)\r\n      result = f :read '*a'\r\n      f :close()\r\n   end\r\n   os.remove(tmpfilename)\r\n   return status, result\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "local tmpfilename = os.tmpname()",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "local cmd = string.format (\r\n      [=[%s -l metalua.mlc_xcall -e \"mlc_xcall.server([[%s]], [[%s]], %s)\"]=], \r\n      (_PROGDIR and _PROGDIR..\"/lua\" or \"lua\"), luafile, tmpfilename, mlc.metabugs and \"true\" or \"false\")",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "local status = (0 == os.execute (cmd))",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "local result",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "if status then \r\n      result = (lua_loadfile or loadfile) (tmpfilename) ()\r\n   else\r\n      local f = io.open (tmpfilename)\r\n      result = f :read '*a'\r\n      f :close()\r\n   end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "result = (lua_loadfile or loadfile) (tmpfilename) ()",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "local f = io.open (tmpfilename)",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "result = f :read '*a'",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "f :close()",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "os.remove(tmpfilename)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function mlc_xcall.client_literal (luasrc)\r\n   local srcfilename = os.tmpname()\r\n   local srcfile, msg = io.open (srcfilename, 'w')\r\n   if not srcfile then print(msg) end\r\n   srcfile :write (luasrc)\r\n   srcfile :close ()\r\n   local status, ast = mlc_xcall.client_file (srcfilename)\r\n   os.remove(srcfilename)\r\n   return status, ast\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "local srcfilename = os.tmpname()",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "local srcfile, msg = io.open (srcfilename, 'w')",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "if not srcfile then print(msg) end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "print(msg)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "srcfile :write (luasrc)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "srcfile :close ()",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "local status, ast = mlc_xcall.client_file (srcfilename)",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "os.remove(srcfilename)",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "",
    "type": "function container"
  }, {
    "id": 51,
    "text": "tmpname",
    "type": "global function"
  }, {
    "id": 52,
    "text": "print",
    "type": "global function"
  }, {
    "id": 53,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 54,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 55,
    "text": "xpcall",
    "type": "global function"
  }, {
    "id": 56,
    "text": "execute",
    "type": "global function"
  }, {
    "id": 57,
    "text": "traceback",
    "type": "global function"
  }, {
    "id": 58,
    "text": "serialize",
    "type": "global function"
  }, {
    "id": 59,
    "text": "client_file",
    "type": "global function"
  }, {
    "id": 60,
    "text": "format",
    "type": "global function"
  }, {
    "id": 61,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 62,
    "text": "open",
    "type": "global function"
  }, {
    "id": 63,
    "text": "luafile_to_ast",
    "type": "global function"
  }, {
    "id": 64,
    "text": "require",
    "type": "global function"
  }, {
    "id": 65,
    "text": "",
    "type": "global variable"
  }, {
    "id": 66,
    "text": "",
    "type": "variable container"
  }, {
    "id": 67,
    "text": "",
    "type": "require container"
  }, {
    "id": 68,
    "text": "",
    "type": "local variable"
  }, {
    "id": 69,
    "text": "",
    "type": "number"
  }, {
    "id": 70,
    "text": "",
    "type": "global variable"
  }, {
    "id": 71,
    "text": "",
    "type": "n/a"
  }, {
    "id": 72,
    "text": "",
    "type": "interface container"
  }, {
    "id": 73,
    "text": "",
    "type": "interface"
  } ]
}