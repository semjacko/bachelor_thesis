{
  "_filename": "base.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/metalua/src/lib/metalua/base.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 4
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 10,
    "label": "has",
    "to": 8
  }, {
    "from": 10,
    "label": "has",
    "to": 8
  }, {
    "from": 10,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 8
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 19
  }, {
    "from": 21,
    "label": "has",
    "to": 8
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 27,
    "label": "has",
    "to": 8
  }, {
    "from": 25,
    "label": "has",
    "to": 8
  }, {
    "from": 25,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 28
  }, {
    "from": 32,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 32,
    "label": "has",
    "to": 8
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 8
  }, {
    "from": 35,
    "label": "has",
    "to": 8
  }, {
    "from": 35,
    "label": "has",
    "to": 8
  }, {
    "from": 36,
    "label": "has",
    "to": 8
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 43,
    "label": "has",
    "to": 8
  }, {
    "from": 40,
    "label": "has",
    "to": 8
  }, {
    "from": 40,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 44
  }, {
    "from": 47,
    "label": "has",
    "to": 45
  }, {
    "from": 47,
    "label": "has",
    "to": 8
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 51,
    "label": "has",
    "to": 8
  }, {
    "from": 49,
    "label": "has",
    "to": 8
  }, {
    "from": 49,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 52
  }, {
    "from": 55,
    "label": "has",
    "to": 53
  }, {
    "from": 55,
    "label": "has",
    "to": 8
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 59,
    "label": "has",
    "to": 8
  }, {
    "from": 57,
    "label": "has",
    "to": 8
  }, {
    "from": 57,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 60
  }, {
    "from": 63,
    "label": "has",
    "to": 61
  }, {
    "from": 63,
    "label": "has",
    "to": 8
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 8
  }, {
    "from": 36,
    "label": "calls",
    "to": 74
  }, {
    "from": 37,
    "label": "calls",
    "to": 74
  }, {
    "from": 66,
    "label": "calls",
    "to": 70
  }, {
    "from": 2,
    "label": "calls",
    "to": 71
  }, {
    "from": 10,
    "label": "calls",
    "to": 71
  }, {
    "from": 40,
    "label": "calls",
    "to": 71
  }, {
    "from": 49,
    "label": "calls",
    "to": 71
  }, {
    "from": 57,
    "label": "calls",
    "to": 71
  }, {
    "from": 66,
    "label": "calls",
    "to": 79
  }, {
    "from": 47,
    "label": "calls",
    "to": 73
  }, {
    "from": 47,
    "label": "calls",
    "to": 73
  }, {
    "from": 2,
    "label": "calls",
    "to": 78
  }, {
    "from": 16,
    "label": "calls",
    "to": 49
  }, {
    "from": 21,
    "label": "calls",
    "to": 49
  }, {
    "from": 2,
    "label": "calls",
    "to": 72
  }, {
    "from": 2,
    "label": "calls",
    "to": 68
  }, {
    "from": 10,
    "label": "calls",
    "to": 68
  }, {
    "from": 40,
    "label": "calls",
    "to": 68
  }, {
    "from": 49,
    "label": "calls",
    "to": 68
  }, {
    "from": 57,
    "label": "calls",
    "to": 68
  }, {
    "from": 10,
    "label": "calls",
    "to": 77
  }, {
    "from": 10,
    "label": "calls",
    "to": 75
  }, {
    "from": 32,
    "label": "calls",
    "to": 69
  }, {
    "from": 32,
    "label": "calls",
    "to": 69
  }, {
    "from": 2,
    "label": "calls",
    "to": 76
  }, {
    "from": 10,
    "label": "calls",
    "to": 76
  }, {
    "from": 32,
    "label": "calls",
    "to": 80
  }, {
    "from": 36,
    "label": "calls",
    "to": 67
  }, {
    "from": 1,
    "label": "contains",
    "to": 66
  }, {
    "from": 66,
    "label": "declares",
    "to": 2
  }, {
    "from": 66,
    "label": "declares",
    "to": 10
  }, {
    "from": 66,
    "label": "declares",
    "to": 16
  }, {
    "from": 66,
    "label": "declares",
    "to": 21
  }, {
    "from": 66,
    "label": "declares",
    "to": 25
  }, {
    "from": 66,
    "label": "declares",
    "to": 32
  }, {
    "from": 66,
    "label": "declares",
    "to": 34
  }, {
    "from": 66,
    "label": "declares",
    "to": 35
  }, {
    "from": 66,
    "label": "declares",
    "to": 36
  }, {
    "from": 66,
    "label": "declares",
    "to": 37
  }, {
    "from": 66,
    "label": "declares",
    "to": 40
  }, {
    "from": 66,
    "label": "declares",
    "to": 47
  }, {
    "from": 66,
    "label": "declares",
    "to": 49
  }, {
    "from": 66,
    "label": "declares",
    "to": 55
  }, {
    "from": 66,
    "label": "declares",
    "to": 57
  }, {
    "from": 66,
    "label": "declares",
    "to": 63
  }, {
    "from": 66,
    "label": "declares",
    "to": 65
  }, {
    "from": 81,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 82
  }, {
    "from": 1,
    "label": "contains",
    "to": 83
  }, {
    "from": 82,
    "label": "initializes",
    "to": 84
  }, {
    "from": 81,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "base",
    "type": "module"
  }, {
    "id": 2,
    "text": "function pairs(x)\r\n   assert(type(x)=='table', 'pairs() expects a table')\r\n   local mt = getmetatable(x)\r\n   if mt then\r\n      local mtp = mt.__pairs\r\n      if mtp then return mtp(x) end\r\n   end\r\n   return rawpairs(x)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "assert(type(x)=='table', 'pairs() expects a table')",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "local mt = getmetatable(x)",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "if mt then\r\n      local mtp = mt.__pairs\r\n      if mtp then return mtp(x) end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "local mtp = mt.__pairs",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "if mtp then return mtp(x) end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function ipairs(x)\r\n   assert(type(x)=='table', 'ipairs() expects a table')\r\n   local mt = getmetatable(x)\r\n   if mt then\r\n      local mti = mt.__ipairs\r\n      if mti then return mti(x) end\r\n   end\r\n   return rawipairs(x)\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "assert(type(x)=='table', 'ipairs() expects a table')",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "if mt then\r\n      local mti = mt.__ipairs\r\n      if mti then return mti(x) end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "local mti = mt.__ipairs",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "if mti then return mti(x) end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function min (a, ...)\r\n   for n in values{...} do if n<a then a=n end end\r\n   return a\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "for n in values{...} do if n<a then a=n end end",
    "type": "statement:genericfor"
  }, {
    "id": 18,
    "text": "if n<a then a=n end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "a=n",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function max (a, ...)\r\n   for n in values{...} do if n>a then a=n end end\r\n   return a\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "for n in values{...} do if n>a then a=n end end",
    "type": "statement:genericfor"
  }, {
    "id": 23,
    "text": "if n>a then a=n end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function o (...)\r\n   local args = {...}\r\n   local function g (...)\r\n      local result = {...}\r\n      for i=#args, 1, -1 do result = {args[i](unpack(result))} end\r\n      return unpack (result)\r\n   end\r\n   return g\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "local args = {...}",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "local function g (...)\r\n      local result = {...}\r\n      for i=#args, 1, -1 do result = {args[i](unpack(result))} end\r\n      return unpack (result)\r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 28,
    "text": "local result = {...}",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "for i=#args, 1, -1 do result = {args[i](unpack(result))} end",
    "type": "statement:numericfor"
  }, {
    "id": 30,
    "text": "result = {args[i](unpack(result))}",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "local function g (...)\r\n      local result = {...}\r\n      for i=#args, 1, -1 do result = {args[i](unpack(result))} end\r\n      return unpack (result)\r\n   end",
    "type": "function"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function id (...) return ... end",
    "type": "function"
  }, {
    "id": 35,
    "text": "function const (k) return function () return k end end",
    "type": "function"
  }, {
    "id": 36,
    "text": "function printf(...) return print(string.format(...)) end",
    "type": "function"
  }, {
    "id": 37,
    "text": "function eprintf(...) \r\n   io.stderr:write(string.format(...)..\"\\n\") \r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "io.stderr:write(string.format(...)..\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function ivalues (x)\r\n   assert(type(x)=='table', 'ivalues() expects a table')\r\n   local i = 1\r\n   local function iterator ()\r\n      local r = x[i]; i=i+1; return r\r\n   end\r\n   return iterator\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "assert(type(x)=='table', 'ivalues() expects a table')",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "local i = 1",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "local function iterator ()\r\n      local r = x[i]; i=i+1; return r\r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 44,
    "text": "local r = x[i]",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "i=i+1",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "local function iterator ()\r\n      local r = x[i]; i=i+1; return r\r\n   end",
    "type": "function"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function values (x)\r\n   assert(type(x)=='table', 'values() expects a table')\r\n   local function iterator (state)\r\n      local it\r\n      state.content, it = next(state.list, state.content)\r\n      return it\r\n   end\r\n   return iterator, { list = x }\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "assert(type(x)=='table', 'values() expects a table')",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "local function iterator (state)\r\n      local it\r\n      state.content, it = next(state.list, state.content)\r\n      return it\r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 52,
    "text": "local it",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "state.content, it = next(state.list, state.content)",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "local function iterator (state)\r\n      local it\r\n      state.content, it = next(state.list, state.content)\r\n      return it\r\n   end",
    "type": "function"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function keys (x)\r\n   assert(type(x)=='table', 'keys() expects a table')\r\n   local function iterator (state)\r\n      local it = next(state.list, state.content)\r\n      state.content = it\r\n      return it\r\n   end\r\n   return iterator, { list = x }\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "assert(type(x)=='table', 'keys() expects a table')",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "local function iterator (state)\r\n      local it = next(state.list, state.content)\r\n      state.content = it\r\n      return it\r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 60,
    "text": "local it = next(state.list, state.content)",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "state.content = it",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "local function iterator (state)\r\n      local it = next(state.list, state.content)\r\n      state.content = it\r\n      return it\r\n   end",
    "type": "function"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "function () return k end",
    "type": "function"
  }, {
    "id": 66,
    "text": "",
    "type": "function container"
  }, {
    "id": 67,
    "text": "print",
    "type": "global function"
  }, {
    "id": 68,
    "text": "type",
    "type": "global function"
  }, {
    "id": 69,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 70,
    "text": "getfenv",
    "type": "global function"
  }, {
    "id": 71,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 72,
    "text": "mtp",
    "type": "global function"
  }, {
    "id": 73,
    "text": "next",
    "type": "global function"
  }, {
    "id": 74,
    "text": "format",
    "type": "global function"
  }, {
    "id": 75,
    "text": "rawipairs",
    "type": "global function"
  }, {
    "id": 76,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 77,
    "text": "mti",
    "type": "global function"
  }, {
    "id": 78,
    "text": "rawpairs",
    "type": "global function"
  }, {
    "id": 79,
    "text": "rawset",
    "type": "global function"
  }, {
    "id": 80,
    "text": "args[i]",
    "type": "global function"
  }, {
    "id": 81,
    "text": "",
    "type": "global variable"
  }, {
    "id": 82,
    "text": "",
    "type": "variable container"
  }, {
    "id": 83,
    "text": "",
    "type": "require container"
  }, {
    "id": 84,
    "text": "",
    "type": "global variable"
  } ]
}