{
  "_filename": "mlp_misc.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/metalua/src/compiler/mlp_misc.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 9,
    "label": "has",
    "to": 7
  }, {
    "from": 9,
    "label": "has",
    "to": 7
  }, {
    "from": 9,
    "label": "has",
    "to": 7
  }, {
    "from": 9,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 7
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 7
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 21,
    "label": "has",
    "to": 7
  }, {
    "from": 21,
    "label": "has",
    "to": 7
  }, {
    "from": 21,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 10
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 12
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 28,
    "label": "has",
    "to": 7
  }, {
    "from": 28,
    "label": "has",
    "to": 7
  }, {
    "from": 28,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 7
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 36,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 43,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 42,
    "label": "has",
    "to": 7
  }, {
    "from": 42,
    "label": "has",
    "to": 7
  }, {
    "from": 42,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 6
  }, {
    "from": 49,
    "label": "has",
    "to": 7
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 7
  }, {
    "from": 9,
    "label": "calls",
    "to": 55
  }, {
    "from": 16,
    "label": "calls",
    "to": 55
  }, {
    "from": 28,
    "label": "calls",
    "to": 55
  }, {
    "from": 9,
    "label": "calls",
    "to": 62
  }, {
    "from": 28,
    "label": "calls",
    "to": 62
  }, {
    "from": 52,
    "label": "calls",
    "to": 62
  }, {
    "from": 2,
    "label": "calls",
    "to": 58
  }, {
    "from": 2,
    "label": "calls",
    "to": 58
  }, {
    "from": 2,
    "label": "calls",
    "to": 58
  }, {
    "from": 21,
    "label": "calls",
    "to": 58
  }, {
    "from": 52,
    "label": "calls",
    "to": 59
  }, {
    "from": 2,
    "label": "calls",
    "to": 57
  }, {
    "from": 18,
    "label": "calls",
    "to": 54
  }, {
    "from": 16,
    "label": "calls",
    "to": 9
  }, {
    "from": 52,
    "label": "calls",
    "to": 63
  }, {
    "from": 42,
    "label": "calls",
    "to": 61
  }, {
    "from": 2,
    "label": "calls",
    "to": 53
  }, {
    "from": 2,
    "label": "calls",
    "to": 53
  }, {
    "from": 2,
    "label": "calls",
    "to": 53
  }, {
    "from": 21,
    "label": "calls",
    "to": 60
  }, {
    "from": 21,
    "label": "calls",
    "to": 60
  }, {
    "from": 28,
    "label": "calls",
    "to": 60
  }, {
    "from": 42,
    "label": "calls",
    "to": 60
  }, {
    "from": 21,
    "label": "calls",
    "to": 56
  }, {
    "from": 42,
    "label": "calls",
    "to": 36
  }, {
    "from": 1,
    "label": "contains",
    "to": 52
  }, {
    "from": 52,
    "label": "declares",
    "to": 2
  }, {
    "from": 52,
    "label": "declares",
    "to": 9
  }, {
    "from": 52,
    "label": "declares",
    "to": 16
  }, {
    "from": 52,
    "label": "declares",
    "to": 18
  }, {
    "from": 52,
    "label": "declares",
    "to": 21
  }, {
    "from": 52,
    "label": "declares",
    "to": 28
  }, {
    "from": 52,
    "label": "declares",
    "to": 34
  }, {
    "from": 52,
    "label": "declares",
    "to": 36
  }, {
    "from": 52,
    "label": "declares",
    "to": 42
  }, {
    "from": 52,
    "label": "declares",
    "to": 49
  }, {
    "from": 52,
    "label": "declares",
    "to": 51
  }, {
    "from": 1,
    "label": "contains",
    "to": 64
  }, {
    "from": 1,
    "label": "contains",
    "to": 65
  }, {
    "from": 64,
    "label": "initializes",
    "to": 66
  }, {
    "from": 66,
    "label": "assigns",
    "to": 67
  }, {
    "from": 64,
    "label": "initializes",
    "to": 68
  }, {
    "from": 68,
    "label": "assigns",
    "to": 69
  }, {
    "from": 64,
    "label": "initializes",
    "to": 70
  }, {
    "from": 70,
    "label": "assigns",
    "to": 71
  }, {
    "from": 28,
    "label": "represents",
    "to": 72
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "mlp_misc",
    "type": "module"
  }, {
    "id": 2,
    "text": "function fget (n, tag) \r\n   assert (type (n) == \"number\")\r\n   if tag then\r\n      assert (type (tag) == \"string\")\r\n      return function (x) \r\n         assert (type (x[n]) == \"table\")       \r\n         return {tag=tag, unpack(x[n])} end \r\n   else\r\n      return function (x) return x[n] end \r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "assert (type (n) == \"number\")",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "if tag then\r\n      assert (type (tag) == \"string\")\r\n      return function (x) \r\n         assert (type (x[n]) == \"table\")       \r\n         return {tag=tag, unpack(x[n])} end \r\n   else\r\n      return function (x) return x[n] end \r\n   end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "assert (type (tag) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "assert (type (x[n]) == \"table\")",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function opt_id (lx)\r\n   local a = lx:peek();\r\n   if lx:is_keyword (a, \"-{\") then\r\n      local v = gg.sequence{ \"-{\", splice_content, \"}\" } (lx) [1]\r\n      if v.tag ~= \"Id\" and v.tag ~= \"Splice\" then\r\n         gg.parse_error(lx,\"Bad id splice\")\r\n      end\r\n      return v\r\n   elseif a.tag == \"Id\" then return lx:next()\r\n   else return false end\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "local a = lx:peek()",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "if lx:is_keyword (a, \"-{\") then\r\n      local v = gg.sequence{ \"-{\", splice_content, \"}\" } (lx) [1]\r\n      if v.tag ~= \"Id\" and v.tag ~= \"Splice\" then\r\n         gg.parse_error(lx,\"Bad id splice\")\r\n      end\r\n      return v\r\n   elseif a.tag == \"Id\" then return lx:next()\r\n   else return false end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "local v = gg.sequence{ \"-{\", splice_content, \"}\" } (lx) [1]",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "if v.tag ~= \"Id\" and v.tag ~= \"Splice\" then\r\n         gg.parse_error(lx,\"Bad id splice\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "gg.parse_error(lx,\"Bad id splice\")",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function id (lx)\r\n   return opt_id (lx) or gg.parse_error(lx,\"Identifier expected\")\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function gensym (arg)\r\n   gensymidx = gensymidx + 1\r\n   return { tag=\"Id\", _G.string.format(\".%i.%s\", gensymidx, arg or \"\")}\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "gensymidx = gensymidx + 1",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function id2string (id)\r\n   --print(\"id2string:\", disp.ast(id))\r\n   if id.tag == \"Id\" then id.tag = \"String\"; return id\r\n   elseif id.tag == \"Splice\" then\r\n      assert (in_a_quote, \"can't do id2string on an outermost splice\")\r\n      error (\"id2string on splice not implemented\")\r\n      -- Evaluating id[1] will produce `Id{ xxx },\r\n      -- and we want it to produce `String{ xxx }\r\n      -- Morally, this is what I want:\r\n      -- return `String{ `Index{ `Splice{ id[1] }, `Number 1 } }\r\n      -- That is, without sugar:\r\n      return {tag=\"String\",  {tag=\"Index\", {tag=\"Splice\", id[1] }, \r\n                                           {tag=\"Number\", 1 } } }\r\n   else error (\"Identifier expected: \".._G.table.tostring(id, 'nohash')) end\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "if id.tag == \"Id\" then id.tag = \"String\"; return id\r\n   elseif id.tag == \"Splice\" then\r\n      assert (in_a_quote, \"can't do id2string on an outermost splice\")\r\n      error (\"id2string on splice not implemented\")\r\n      -- Evaluating id[1] will produce `Id{ xxx },\r\n      -- and we want it to produce `String{ xxx }\r\n      -- Morally, this is what I want:\r\n      -- return `String{ `Index{ `Splice{ id[1] }, `Number 1 } }\r\n      -- That is, without sugar:\r\n      return {tag=\"String\",  {tag=\"Index\", {tag=\"Splice\", id[1] }, \r\n                                           {tag=\"Number\", 1 } } }\r\n   else error (\"Identifier expected: \".._G.table.tostring(id, 'nohash')) end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "id.tag = \"String\"",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "assert (in_a_quote, \"can't do id2string on an outermost splice\")",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "error (\"id2string on splice not implemented\")",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "error (\"Identifier expected: \".._G.table.tostring(id, 'nohash'))",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function string (lx)\r\n   local a = lx:peek()\r\n   if lx:is_keyword (a, \"-{\") then\r\n      local v = gg.sequence{ \"-{\", splice_content, \"}\" } (lx) [1]\r\n      if v.tag ~= \"\" and v.tag ~= \"Splice\" then\r\n         gg.parse_error(lx,\"Bad string splice\")\r\n      end\r\n      return v\r\n   elseif a.tag == \"String\" then return lx:next()\r\n   else error \"String expected\" end\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "if lx:is_keyword (a, \"-{\") then\r\n      local v = gg.sequence{ \"-{\", splice_content, \"}\" } (lx) [1]\r\n      if v.tag ~= \"\" and v.tag ~= \"Splice\" then\r\n         gg.parse_error(lx,\"Bad string splice\")\r\n      end\r\n      return v\r\n   elseif a.tag == \"String\" then return lx:next()\r\n   else error \"String expected\" end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "if v.tag ~= \"\" and v.tag ~= \"Splice\" then\r\n         gg.parse_error(lx,\"Bad string splice\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "gg.parse_error(lx,\"Bad string splice\")",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "error \"String expected\"",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function opt_string (lx)\r\n   return lx:peek().tag == \"String\" and lx:next()\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function skip_initial_sharp_comment (lx)\r\n   -- Dirty hack: I'm happily fondling lexer's private parts\r\n   -- FIXME: redundant with lexer:newstream()\r\n   lx :sync()\r\n   local i = lx.src:match (\"^#.-\\n()\", lx.i)\r\n   if i then lx.i, lx.column_offset, lx.line = i, i, lx.line+1 end\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "lx :sync()",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "local i = lx.src:match (\"^#.-\\n()\", lx.i)",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "if i then lx.i, lx.column_offset, lx.line = i, i, lx.line+1 end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "lx.i, lx.column_offset, lx.line = i, i, lx.line+1",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "local function _chunk (lx)\r\n   if lx:peek().tag == 'Eof' then return { } -- handle empty files\r\n   else \r\n      skip_initial_sharp_comment (lx)\r\n      local chunk = block (lx)\r\n      if lx:peek().tag ~= \"Eof\" then error \"End-of-file expected\" end\r\n      return chunk\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "if lx:peek().tag == 'Eof' then return { } -- handle empty files\r\n   else \r\n      skip_initial_sharp_comment (lx)\r\n      local chunk = block (lx)\r\n      if lx:peek().tag ~= \"Eof\" then error \"End-of-file expected\" end\r\n      return chunk\r\n   end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "skip_initial_sharp_comment (lx)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "local chunk = block (lx)",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "if lx:peek().tag ~= \"Eof\" then error \"End-of-file expected\" end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "error \"End-of-file expected\"",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function (x) \r\n         assert (type (x[n]) == \"table\")       \r\n         return {tag=tag, unpack(x[n])} end",
    "type": "function"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "function (x) return x[n] end",
    "type": "function"
  }, {
    "id": 52,
    "text": "",
    "type": "function container"
  }, {
    "id": 53,
    "text": "type",
    "type": "global function"
  }, {
    "id": 54,
    "text": "_G.string.format",
    "type": "global function"
  }, {
    "id": 55,
    "text": "parse_error",
    "type": "global function"
  }, {
    "id": 56,
    "text": "_G.table.tostring",
    "type": "global function"
  }, {
    "id": 57,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 58,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 59,
    "text": "list",
    "type": "global function"
  }, {
    "id": 60,
    "text": "error",
    "type": "global function"
  }, {
    "id": 61,
    "text": "block",
    "type": "global function"
  }, {
    "id": 62,
    "text": "sequence",
    "type": "global function"
  }, {
    "id": 63,
    "text": "module",
    "type": "global function"
  }, {
    "id": 64,
    "text": "",
    "type": "variable container"
  }, {
    "id": 65,
    "text": "",
    "type": "require container"
  }, {
    "id": 66,
    "text": "",
    "type": "local variable"
  }, {
    "id": 67,
    "text": "",
    "type": "number"
  }, {
    "id": 68,
    "text": "",
    "type": "global variable"
  }, {
    "id": 69,
    "text": "",
    "type": "n/a"
  }, {
    "id": 70,
    "text": "",
    "type": "global variable"
  }, {
    "id": 71,
    "text": "",
    "type": "n/a"
  }, {
    "id": 72,
    "text": "",
    "type": "interface"
  } ]
}