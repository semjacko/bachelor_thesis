{
  "_filename": "mlp_stat.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/metalua/src/compiler/mlp_stat.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 4,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 6,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 12,
    "label": "has",
    "to": 3
  }, {
    "from": 12,
    "label": "has",
    "to": 3
  }, {
    "from": 12,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 3
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 29,
    "label": "has",
    "to": 35
  }, {
    "from": 29,
    "label": "has",
    "to": 36
  }, {
    "from": 29,
    "label": "has",
    "to": 3
  }, {
    "from": 29,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 38,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 38,
    "label": "has",
    "to": 3
  }, {
    "from": 38,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 16
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 46,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 15
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 49,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 49,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 57,
    "label": "has",
    "to": 60
  }, {
    "from": 55,
    "label": "has",
    "to": 61
  }, {
    "from": 46,
    "label": "has",
    "to": 3
  }, {
    "from": 46,
    "label": "has",
    "to": 3
  }, {
    "from": 46,
    "label": "has",
    "to": 3
  }, {
    "from": 46,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 15
  }, {
    "from": 65,
    "label": "has",
    "to": 3
  }, {
    "from": 65,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 3
  }, {
    "from": 70,
    "label": "has",
    "to": 3
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 71,
    "label": "has",
    "to": 3
  }, {
    "from": 71,
    "label": "has",
    "to": 74
  }, {
    "from": 75,
    "label": "has",
    "to": 3
  }, {
    "from": 76,
    "label": "has",
    "to": 3
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 3
  }, {
    "from": 79,
    "label": "has",
    "to": 3
  }, {
    "from": 80,
    "label": "calls",
    "to": 95
  }, {
    "from": 80,
    "label": "calls",
    "to": 95
  }, {
    "from": 12,
    "label": "calls",
    "to": 91
  }, {
    "from": 46,
    "label": "calls",
    "to": 91
  }, {
    "from": 6,
    "label": "calls",
    "to": 93
  }, {
    "from": 12,
    "label": "calls",
    "to": 93
  }, {
    "from": 29,
    "label": "calls",
    "to": 93
  }, {
    "from": 24,
    "label": "calls",
    "to": 94
  }, {
    "from": 80,
    "label": "calls",
    "to": 94
  }, {
    "from": 46,
    "label": "calls",
    "to": 85
  }, {
    "from": 80,
    "label": "calls",
    "to": 88
  }, {
    "from": 80,
    "label": "calls",
    "to": 82
  }, {
    "from": 80,
    "label": "calls",
    "to": 83
  }, {
    "from": 80,
    "label": "calls",
    "to": 83
  }, {
    "from": 80,
    "label": "calls",
    "to": 83
  }, {
    "from": 6,
    "label": "calls",
    "to": 84
  }, {
    "from": 80,
    "label": "calls",
    "to": 92
  }, {
    "from": 80,
    "label": "calls",
    "to": 92
  }, {
    "from": 12,
    "label": "calls",
    "to": 92
  }, {
    "from": 80,
    "label": "calls",
    "to": 92
  }, {
    "from": 80,
    "label": "calls",
    "to": 92
  }, {
    "from": 80,
    "label": "calls",
    "to": 97
  }, {
    "from": 80,
    "label": "calls",
    "to": 97
  }, {
    "from": 80,
    "label": "calls",
    "to": 97
  }, {
    "from": 6,
    "label": "calls",
    "to": 87
  }, {
    "from": 46,
    "label": "calls",
    "to": 87
  }, {
    "from": 12,
    "label": "calls",
    "to": 5
  }, {
    "from": 12,
    "label": "calls",
    "to": 5
  }, {
    "from": 46,
    "label": "calls",
    "to": 5
  }, {
    "from": 46,
    "label": "calls",
    "to": 5
  }, {
    "from": 80,
    "label": "calls",
    "to": 86
  }, {
    "from": 80,
    "label": "calls",
    "to": 98
  }, {
    "from": 12,
    "label": "calls",
    "to": 90
  }, {
    "from": 80,
    "label": "calls",
    "to": 90
  }, {
    "from": 80,
    "label": "calls",
    "to": 99
  }, {
    "from": 12,
    "label": "calls",
    "to": 96
  }, {
    "from": 80,
    "label": "calls",
    "to": 81
  }, {
    "from": 80,
    "label": "calls",
    "to": 81
  }, {
    "from": 80,
    "label": "calls",
    "to": 81
  }, {
    "from": 46,
    "label": "calls",
    "to": 89
  }, {
    "from": 46,
    "label": "calls",
    "to": 89
  }, {
    "from": 1,
    "label": "contains",
    "to": 80
  }, {
    "from": 80,
    "label": "declares",
    "to": 2
  }, {
    "from": 80,
    "label": "declares",
    "to": 4
  }, {
    "from": 80,
    "label": "declares",
    "to": 5
  }, {
    "from": 80,
    "label": "declares",
    "to": 6
  }, {
    "from": 80,
    "label": "declares",
    "to": 12
  }, {
    "from": 80,
    "label": "declares",
    "to": 24
  }, {
    "from": 80,
    "label": "declares",
    "to": 29
  }, {
    "from": 80,
    "label": "declares",
    "to": 38
  }, {
    "from": 80,
    "label": "declares",
    "to": 46
  }, {
    "from": 80,
    "label": "declares",
    "to": 63
  }, {
    "from": 80,
    "label": "declares",
    "to": 65
  }, {
    "from": 80,
    "label": "declares",
    "to": 69
  }, {
    "from": 80,
    "label": "declares",
    "to": 70
  }, {
    "from": 80,
    "label": "declares",
    "to": 71
  }, {
    "from": 80,
    "label": "declares",
    "to": 75
  }, {
    "from": 80,
    "label": "declares",
    "to": 76
  }, {
    "from": 80,
    "label": "declares",
    "to": 77
  }, {
    "from": 80,
    "label": "declares",
    "to": 79
  }, {
    "from": 1,
    "label": "contains",
    "to": 100
  }, {
    "from": 1,
    "label": "contains",
    "to": 101
  }, {
    "from": 100,
    "label": "initializes",
    "to": 102
  }, {
    "from": 102,
    "label": "assigns",
    "to": 103
  }, {
    "from": 100,
    "label": "initializes",
    "to": 104
  }, {
    "from": 104,
    "label": "assigns",
    "to": 105
  }, {
    "from": 100,
    "label": "initializes",
    "to": 106
  }, {
    "from": 106,
    "label": "assigns",
    "to": 107
  }, {
    "from": 100,
    "label": "initializes",
    "to": 108
  }, {
    "from": 108,
    "label": "assigns",
    "to": 109
  }, {
    "from": 109,
    "label": "assigns",
    "to": 110
  }, {
    "from": 109,
    "label": "assigns",
    "to": 111
  }, {
    "from": 109,
    "label": "assigns",
    "to": 112
  }, {
    "from": 109,
    "label": "assigns",
    "to": 113
  }, {
    "from": 109,
    "label": "assigns",
    "to": 114
  }, {
    "from": 109,
    "label": "assigns",
    "to": 115
  }, {
    "from": 109,
    "label": "assigns",
    "to": 116
  }, {
    "from": 100,
    "label": "initializes",
    "to": 117
  }, {
    "from": 117,
    "label": "assigns",
    "to": 118
  }, {
    "from": 100,
    "label": "initializes",
    "to": 119
  }, {
    "from": 119,
    "label": "assigns",
    "to": 120
  }, {
    "from": 100,
    "label": "initializes",
    "to": 121
  }, {
    "from": 121,
    "label": "assigns",
    "to": 122
  }, {
    "from": 100,
    "label": "initializes",
    "to": 123
  }, {
    "from": 123,
    "label": "assigns",
    "to": 124
  }, {
    "from": 100,
    "label": "initializes",
    "to": 125
  }, {
    "from": 125,
    "label": "assigns",
    "to": 126
  }, {
    "from": 100,
    "label": "initializes",
    "to": 127
  }, {
    "from": 127,
    "label": "assigns",
    "to": 128
  }, {
    "from": 100,
    "label": "initializes",
    "to": 129
  }, {
    "from": 129,
    "label": "assigns",
    "to": 130
  }, {
    "from": 100,
    "label": "initializes",
    "to": 131
  }, {
    "from": 131,
    "label": "assigns",
    "to": 132
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "mlp_stat",
    "type": "module"
  }, {
    "id": 2,
    "text": "function (lx) return mlp.expr     (lx) end",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "function (lx) return mlp.func_val (lx) end",
    "type": "function"
  }, {
    "id": 5,
    "text": "function (lx) return mlp.expr_list(lx) end",
    "type": "function"
  }, {
    "id": 6,
    "text": "function block_terminators:add(x) \r\n   if type (x) == \"table\" then for _, y in ipairs(x) do self:add (y) end\r\n   else _G.table.insert (self, x) end\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "if type (x) == \"table\" then for _, y in ipairs(x) do self:add (y) end\r\n   else _G.table.insert (self, x) end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "for _, y in ipairs(x) do self:add (y) end",
    "type": "statement:genericfor"
  }, {
    "id": 9,
    "text": "self:add (y)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "_G.table.insert (self, x)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function for_header (lx)\r\n   local var = mlp.id (lx)\r\n   if lx:is_keyword (lx:peek(), \"=\") then \r\n      -- Fornum: only 1 variable\r\n      lx:next() -- skip \"=\"\r\n      local e = expr_list (lx)\r\n      assert (2 <= #e and #e <= 3, \"2 or 3 values in a fornum\")\r\n      return { tag=\"Fornum\", var, unpack (e) }\r\n   else\r\n      -- Forin: there might be several vars\r\n      local a = lx:is_keyword (lx:next(), \",\", \"in\")\r\n      if a==\"in\" then var_list = { var, lineinfo = var.lineinfo } else\r\n         -- several vars; first \",\" skipped, read other vars\r\n         var_list = gg.list{ \r\n            primary = id, separators = \",\", terminators = \"in\" } (lx)\r\n         _G.table.insert (var_list, 1, var) -- put back the first variable\r\n         lx:next() -- skip \"in\"\r\n      end\r\n      local e = expr_list (lx)\r\n      return { tag=\"Forin\", var_list, e }\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "local var = mlp.id (lx)",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "if lx:is_keyword (lx:peek(), \"=\") then \r\n      -- Fornum: only 1 variable\r\n      lx:next() -- skip \"=\"\r\n      local e = expr_list (lx)\r\n      assert (2 <= #e and #e <= 3, \"2 or 3 values in a fornum\")\r\n      return { tag=\"Fornum\", var, unpack (e) }\r\n   else\r\n      -- Forin: there might be several vars\r\n      local a = lx:is_keyword (lx:next(), \",\", \"in\")\r\n      if a==\"in\" then var_list = { var, lineinfo = var.lineinfo } else\r\n         -- several vars; first \",\" skipped, read other vars\r\n         var_list = gg.list{ \r\n            primary = id, separators = \",\", terminators = \"in\" } (lx)\r\n         _G.table.insert (var_list, 1, var) -- put back the first variable\r\n         lx:next() -- skip \"in\"\r\n      end\r\n      local e = expr_list (lx)\r\n      return { tag=\"Forin\", var_list, e }\r\n   end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "lx:next()",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "local e = expr_list (lx)",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "assert (2 <= #e and #e <= 3, \"2 or 3 values in a fornum\")",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "local a = lx:is_keyword (lx:next(), \",\", \"in\")",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "if a==\"in\" then var_list = { var, lineinfo = var.lineinfo } else\r\n         -- several vars; first \",\" skipped, read other vars\r\n         var_list = gg.list{ \r\n            primary = id, separators = \",\", terminators = \"in\" } (lx)\r\n         _G.table.insert (var_list, 1, var) -- put back the first variable\r\n         lx:next() -- skip \"in\"\r\n      end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "var_list = { var, lineinfo = var.lineinfo }",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "var_list = gg.list{ \r\n            primary = id, separators = \",\", terminators = \"in\" } (lx)",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "_G.table.insert (var_list, 1, var)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "local function fn_builder (list)\r\n   local r = list[1]\r\n   for i = 2, #list do r = { tag=\"Index\", r, id2string(list[i]) } end\r\n   return r\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "local r = list[1]",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "for i = 2, #list do r = { tag=\"Index\", r, id2string(list[i]) } end",
    "type": "statement:numericfor"
  }, {
    "id": 27,
    "text": "r = { tag=\"Index\", r, id2string(list[i]) }",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "local function funcdef_builder(x)\r\n   local name, method, func = x[1], x[2], x[3]\r\n   if method then \r\n      name = { tag=\"Index\", name, method, lineinfo = {\r\n         first = name.lineinfo.first,\r\n         last  = method.lineinfo.last } }\r\n      _G.table.insert (func[1], 1, {tag=\"Id\", \"self\"}) \r\n   end\r\n   local r = { tag=\"Set\", {name}, {func} } \r\n   r[1].lineinfo = name.lineinfo\r\n   r[2].lineinfo = func.lineinfo\r\n   return r\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "local name, method, func = x[1], x[2], x[3]",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "if method then \r\n      name = { tag=\"Index\", name, method, lineinfo = {\r\n         first = name.lineinfo.first,\r\n         last  = method.lineinfo.last } }\r\n      _G.table.insert (func[1], 1, {tag=\"Id\", \"self\"}) \r\n   end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "name = { tag=\"Index\", name, method, lineinfo = {\r\n         first = name.lineinfo.first,\r\n         last  = method.lineinfo.last } }",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "_G.table.insert (func[1], 1, {tag=\"Id\", \"self\"})",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "local r = { tag=\"Set\", {name}, {func} }",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "r[1].lineinfo = name.lineinfo",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "r[2].lineinfo = func.lineinfo",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "local function if_builder (x)\r\n   local cb_pairs, else_block, r = x[1], x[2], {tag=\"If\"}\r\n   for i=1,#cb_pairs do r[2*i-1]=cb_pairs[i][1]; r[2*i]=cb_pairs[i][2] end\r\n   if else_block then r[#r+1] = else_block end\r\n   return r\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "local cb_pairs, else_block, r = x[1], x[2], {tag=\"If\"}",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "for i=1,#cb_pairs do r[2*i-1]=cb_pairs[i][1]; r[2*i]=cb_pairs[i][2] end",
    "type": "statement:numericfor"
  }, {
    "id": 41,
    "text": "r[2*i-1]=cb_pairs[i][1]",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "r[2*i]=cb_pairs[i][2]",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "if else_block then r[#r+1] = else_block end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "r[#r+1] = else_block",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "local function assign_or_call_stat_parser (lx)\r\n   local e = expr_list (lx)\r\n   local a = lx:is_keyword(lx:peek())\r\n   local op = a and stat.assignments[a]\r\n   if op then\r\n      --FIXME: check that [e] is a LHS\r\n      lx:next()\r\n      local v = expr_list (lx)\r\n      if type(op)==\"string\" then return { tag=op, e, v }\r\n      else return op (e, v) end\r\n   else \r\n      assert (#e > 0)\r\n      if #e > 1 then \r\n         gg.parse_error (lx, \r\n            \"comma is not a valid statement separator; statement can be \"..\r\n            \"separated by semicolons, or not separated at all\") end\r\n      if e[1].tag ~= \"Call\" and e[1].tag ~= \"Invoke\" then\r\n         local typename\r\n         if e[1].tag == 'Id' then \r\n            typename = '(\"'..e[1][1]..'\") is an identifier'\r\n         elseif e[1].tag == 'Op' then \r\n            typename = \"is an arithmetic operation\"\r\n         else typename = \"is of type '\"..(e[1].tag or \"<list>\")..\"'\" end\r\n\r\n         gg.parse_error (lx, \"This expression \" .. typename ..\r\n            \"; a statement was expected, and only function and method call \"..\r\n            \"expressions can be used as statements\");\r\n      end\r\n      return e[1]\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "local a = lx:is_keyword(lx:peek())",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "local op = a and stat.assignments[a]",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "if op then\r\n      --FIXME: check that [e] is a LHS\r\n      lx:next()\r\n      local v = expr_list (lx)\r\n      if type(op)==\"string\" then return { tag=op, e, v }\r\n      else return op (e, v) end\r\n   else \r\n      assert (#e > 0)\r\n      if #e > 1 then \r\n         gg.parse_error (lx, \r\n            \"comma is not a valid statement separator; statement can be \"..\r\n            \"separated by semicolons, or not separated at all\") end\r\n      if e[1].tag ~= \"Call\" and e[1].tag ~= \"Invoke\" then\r\n         local typename\r\n         if e[1].tag == 'Id' then \r\n            typename = '(\"'..e[1][1]..'\") is an identifier'\r\n         elseif e[1].tag == 'Op' then \r\n            typename = \"is an arithmetic operation\"\r\n         else typename = \"is of type '\"..(e[1].tag or \"<list>\")..\"'\" end\r\n\r\n         gg.parse_error (lx, \"This expression \" .. typename ..\r\n            \"; a statement was expected, and only function and method call \"..\r\n            \"expressions can be used as statements\");\r\n      end\r\n      return e[1]\r\n   end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "local v = expr_list (lx)",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "if type(op)==\"string\" then return { tag=op, e, v }\r\n      else return op (e, v) end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "assert (#e > 0)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "if #e > 1 then \r\n         gg.parse_error (lx, \r\n            \"comma is not a valid statement separator; statement can be \"..\r\n            \"separated by semicolons, or not separated at all\") end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "gg.parse_error (lx, \r\n            \"comma is not a valid statement separator; statement can be \"..\r\n            \"separated by semicolons, or not separated at all\")",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "if e[1].tag ~= \"Call\" and e[1].tag ~= \"Invoke\" then\r\n         local typename\r\n         if e[1].tag == 'Id' then \r\n            typename = '(\"'..e[1][1]..'\") is an identifier'\r\n         elseif e[1].tag == 'Op' then \r\n            typename = \"is an arithmetic operation\"\r\n         else typename = \"is of type '\"..(e[1].tag or \"<list>\")..\"'\" end\r\n\r\n         gg.parse_error (lx, \"This expression \" .. typename ..\r\n            \"; a statement was expected, and only function and method call \"..\r\n            \"expressions can be used as statements\");\r\n      end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "local typename",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "if e[1].tag == 'Id' then \r\n            typename = '(\"'..e[1][1]..'\") is an identifier'\r\n         elseif e[1].tag == 'Op' then \r\n            typename = \"is an arithmetic operation\"\r\n         else typename = \"is of type '\"..(e[1].tag or \"<list>\")..\"'\" end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "typename = '(\"'..e[1][1]..'\") is an identifier'",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "typename = \"is an arithmetic operation\"",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "typename = \"is of type '\"..(e[1].tag or \"<list>\")..\"'\"",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "gg.parse_error (lx, \"This expression \" .. typename ..\r\n            \"; a statement was expected, and only function and method call \"..\r\n            \"expressions can be used as statements\")",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function stat.assignments:add(k, v) self[k] = v end",
    "type": "function"
  }, {
    "id": 64,
    "text": "self[k] = v",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "function (lx)\r\n      -- FIXME use gg.optkeyword()\r\n      local x = stat (lx)\r\n      if lx:is_keyword (lx:peek(), \";\") then lx:next() end\r\n      return x\r\n   end",
    "type": "function"
  }, {
    "id": 66,
    "text": "local x = stat (lx)",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "if lx:is_keyword (lx:peek(), \";\") then lx:next() end",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function() return { } end",
    "type": "function"
  }, {
    "id": 70,
    "text": "function(x) return x and id2string(x) end",
    "type": "function"
  }, {
    "id": 71,
    "text": "function(x) \r\n         local vars = { x[1], lineinfo = x[1].lineinfo }\r\n         local vals = { x[2], lineinfo = x[2].lineinfo }\r\n         return { tag=\"Localrec\", vars, vals } \r\n      end",
    "type": "function"
  }, {
    "id": 72,
    "text": "local vars = { x[1], lineinfo = x[1].lineinfo }",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "local vals = { x[2], lineinfo = x[2].lineinfo }",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 75,
    "text": "function(x) return {tag=\"Local\", x[1], x[2] or { } } end",
    "type": "function"
  }, {
    "id": 76,
    "text": "function (x) return { tag=\"Do\", unpack (x[1]) } end",
    "type": "function"
  }, {
    "id": 77,
    "text": "function (x) x[1][#x[1]+1] = x[2]; return x[1] end",
    "type": "function"
  }, {
    "id": 78,
    "text": "x[1][#x[1]+1] = x[2]",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "function() return { tag=\"Break\" } end",
    "type": "function"
  }, {
    "id": 80,
    "text": "",
    "type": "function container"
  }, {
    "id": 81,
    "text": "fget",
    "type": "global function"
  }, {
    "id": 82,
    "text": "func_val",
    "type": "global function"
  }, {
    "id": 83,
    "text": "onkeyword",
    "type": "global function"
  }, {
    "id": 84,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 85,
    "text": "op",
    "type": "global function"
  }, {
    "id": 86,
    "text": "stat",
    "type": "global function"
  }, {
    "id": 87,
    "text": "type",
    "type": "global function"
  }, {
    "id": 88,
    "text": "expr_list",
    "type": "global function"
  }, {
    "id": 89,
    "text": "parse_error",
    "type": "global function"
  }, {
    "id": 90,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 91,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 92,
    "text": "list",
    "type": "global function"
  }, {
    "id": 93,
    "text": "_G.table.insert",
    "type": "global function"
  }, {
    "id": 94,
    "text": "id2string",
    "type": "global function"
  }, {
    "id": 95,
    "text": "sequence",
    "type": "global function"
  }, {
    "id": 96,
    "text": "id",
    "type": "global function"
  }, {
    "id": 97,
    "text": "multisequence",
    "type": "global function"
  }, {
    "id": 98,
    "text": "module",
    "type": "global function"
  }, {
    "id": 99,
    "text": "expr",
    "type": "global function"
  }, {
    "id": 100,
    "text": "",
    "type": "variable container"
  }, {
    "id": 101,
    "text": "",
    "type": "require container"
  }, {
    "id": 102,
    "text": "",
    "type": "local variable"
  }, {
    "id": 103,
    "text": "",
    "type": "n/a"
  }, {
    "id": 104,
    "text": "",
    "type": "local variable"
  }, {
    "id": 105,
    "text": "",
    "type": "n/a"
  }, {
    "id": 106,
    "text": "",
    "type": "local variable"
  }, {
    "id": 107,
    "text": "",
    "type": "n/a"
  }, {
    "id": 108,
    "text": "",
    "type": "local variable"
  }, {
    "id": 109,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 110,
    "text": "",
    "type": "string"
  }, {
    "id": 111,
    "text": "",
    "type": "string"
  }, {
    "id": 112,
    "text": "",
    "type": "string"
  }, {
    "id": 113,
    "text": "",
    "type": "string"
  }, {
    "id": 114,
    "text": "",
    "type": "string"
  }, {
    "id": 115,
    "text": "",
    "type": "string"
  }, {
    "id": 116,
    "text": "",
    "type": "string"
  }, {
    "id": 117,
    "text": "",
    "type": "local variable"
  }, {
    "id": 118,
    "text": "",
    "type": "n/a"
  }, {
    "id": 119,
    "text": "",
    "type": "local variable"
  }, {
    "id": 120,
    "text": "",
    "type": "n/a"
  }, {
    "id": 121,
    "text": "",
    "type": "local variable"
  }, {
    "id": 122,
    "text": "",
    "type": "n/a"
  }, {
    "id": 123,
    "text": "",
    "type": "local variable"
  }, {
    "id": 124,
    "text": "",
    "type": "n/a"
  }, {
    "id": 125,
    "text": "",
    "type": "global variable"
  }, {
    "id": 126,
    "text": "",
    "type": "n/a"
  }, {
    "id": 127,
    "text": "",
    "type": "global variable"
  }, {
    "id": 128,
    "text": "",
    "type": "n/a"
  }, {
    "id": 129,
    "text": "",
    "type": "global variable"
  }, {
    "id": 130,
    "text": "",
    "type": "n/a"
  }, {
    "id": 131,
    "text": "",
    "type": "global variable"
  }, {
    "id": 132,
    "text": "",
    "type": "n/a"
  } ]
}