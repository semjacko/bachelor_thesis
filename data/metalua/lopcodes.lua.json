{
  "_filename": "lopcodes.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/metalua/src/compiler/lopcodes.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 4
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 4
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 4
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 4
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 4
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 4
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 4
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 4
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 4
  }, {
    "from": 33,
    "label": "has",
    "to": 4
  }, {
    "from": 34,
    "label": "has",
    "to": 4
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 35,
    "label": "has",
    "to": 40
  }, {
    "from": 35,
    "label": "has",
    "to": 41
  }, {
    "from": 35,
    "label": "has",
    "to": 42
  }, {
    "from": 35,
    "label": "has",
    "to": 43
  }, {
    "from": 35,
    "label": "has",
    "to": 4
  }, {
    "from": 35,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 4
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 4
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "calls",
    "to": 56
  }, {
    "from": 30,
    "label": "calls",
    "to": 32
  }, {
    "from": 30,
    "label": "calls",
    "to": 32
  }, {
    "from": 30,
    "label": "calls",
    "to": 32
  }, {
    "from": 30,
    "label": "calls",
    "to": 32
  }, {
    "from": 52,
    "label": "calls",
    "to": 59
  }, {
    "from": 52,
    "label": "calls",
    "to": 59
  }, {
    "from": 52,
    "label": "calls",
    "to": 59
  }, {
    "from": 52,
    "label": "calls",
    "to": 59
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 52,
    "label": "calls",
    "to": 55
  }, {
    "from": 33,
    "label": "calls",
    "to": 55
  }, {
    "from": 52,
    "label": "calls",
    "to": 53
  }, {
    "from": 30,
    "label": "calls",
    "to": 58
  }, {
    "from": 30,
    "label": "calls",
    "to": 34
  }, {
    "from": 30,
    "label": "calls",
    "to": 34
  }, {
    "from": 30,
    "label": "calls",
    "to": 34
  }, {
    "from": 48,
    "label": "calls",
    "to": 57
  }, {
    "from": 45,
    "label": "calls",
    "to": 60
  }, {
    "from": 48,
    "label": "calls",
    "to": 54
  }, {
    "from": 50,
    "label": "calls",
    "to": 54
  }, {
    "from": 52,
    "label": "calls",
    "to": 61
  }, {
    "from": 1,
    "label": "contains",
    "to": 52
  }, {
    "from": 52,
    "label": "declares",
    "to": 2
  }, {
    "from": 52,
    "label": "declares",
    "to": 3
  }, {
    "from": 52,
    "label": "declares",
    "to": 5
  }, {
    "from": 52,
    "label": "declares",
    "to": 8
  }, {
    "from": 52,
    "label": "declares",
    "to": 9
  }, {
    "from": 52,
    "label": "declares",
    "to": 11
  }, {
    "from": 52,
    "label": "declares",
    "to": 12
  }, {
    "from": 52,
    "label": "declares",
    "to": 14
  }, {
    "from": 52,
    "label": "declares",
    "to": 15
  }, {
    "from": 52,
    "label": "declares",
    "to": 17
  }, {
    "from": 52,
    "label": "declares",
    "to": 18
  }, {
    "from": 52,
    "label": "declares",
    "to": 20
  }, {
    "from": 52,
    "label": "declares",
    "to": 21
  }, {
    "from": 52,
    "label": "declares",
    "to": 23
  }, {
    "from": 52,
    "label": "declares",
    "to": 24
  }, {
    "from": 52,
    "label": "declares",
    "to": 26
  }, {
    "from": 52,
    "label": "declares",
    "to": 28
  }, {
    "from": 52,
    "label": "declares",
    "to": 30
  }, {
    "from": 52,
    "label": "declares",
    "to": 32
  }, {
    "from": 52,
    "label": "declares",
    "to": 33
  }, {
    "from": 52,
    "label": "declares",
    "to": 34
  }, {
    "from": 52,
    "label": "declares",
    "to": 35
  }, {
    "from": 52,
    "label": "declares",
    "to": 45
  }, {
    "from": 52,
    "label": "declares",
    "to": 48
  }, {
    "from": 52,
    "label": "declares",
    "to": 50
  }, {
    "from": 1,
    "label": "contains",
    "to": 62
  }, {
    "from": 1,
    "label": "contains",
    "to": 63
  }, {
    "from": 62,
    "label": "initializes",
    "to": 64
  }, {
    "from": 64,
    "label": "assigns",
    "to": 65
  }, {
    "from": 62,
    "label": "initializes",
    "to": 66
  }, {
    "from": 66,
    "label": "assigns",
    "to": 67
  }, {
    "from": 62,
    "label": "initializes",
    "to": 68
  }, {
    "from": 68,
    "label": "assigns",
    "to": 69
  }, {
    "from": 62,
    "label": "initializes",
    "to": 70
  }, {
    "from": 62,
    "label": "initializes",
    "to": 71
  }, {
    "from": 62,
    "label": "initializes",
    "to": 72
  }, {
    "from": 72,
    "label": "assigns",
    "to": 73
  }, {
    "from": 62,
    "label": "initializes",
    "to": 74
  }, {
    "from": 62,
    "label": "initializes",
    "to": 75
  }, {
    "from": 62,
    "label": "initializes",
    "to": 76
  }, {
    "from": 76,
    "label": "assigns",
    "to": 77
  }, {
    "from": 62,
    "label": "initializes",
    "to": 78
  }, {
    "from": 78,
    "label": "assigns",
    "to": 79
  }, {
    "from": 62,
    "label": "initializes",
    "to": 80
  }, {
    "from": 80,
    "label": "assigns",
    "to": 81
  }, {
    "from": 62,
    "label": "initializes",
    "to": 82
  }, {
    "from": 82,
    "label": "assigns",
    "to": 83
  }, {
    "from": 62,
    "label": "initializes",
    "to": 84
  }, {
    "from": 84,
    "label": "assigns",
    "to": 85
  }, {
    "from": 62,
    "label": "initializes",
    "to": 86
  }, {
    "from": 86,
    "label": "assigns",
    "to": 87
  }, {
    "from": 62,
    "label": "initializes",
    "to": 88
  }, {
    "from": 88,
    "label": "assigns",
    "to": 89
  }, {
    "from": 62,
    "label": "initializes",
    "to": 90
  }, {
    "from": 90,
    "label": "assigns",
    "to": 91
  }, {
    "from": 62,
    "label": "initializes",
    "to": 92
  }, {
    "from": 92,
    "label": "assigns",
    "to": 93
  }, {
    "from": 62,
    "label": "initializes",
    "to": 94
  }, {
    "from": 94,
    "label": "assigns",
    "to": 95
  }, {
    "from": 62,
    "label": "initializes",
    "to": 96
  }, {
    "from": 96,
    "label": "assigns",
    "to": 97
  }, {
    "from": 62,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "assigns",
    "to": 99
  }, {
    "from": 62,
    "label": "initializes",
    "to": 100
  }, {
    "from": 100,
    "label": "assigns",
    "to": 101
  }, {
    "from": 62,
    "label": "initializes",
    "to": 102
  }, {
    "from": 102,
    "label": "assigns",
    "to": 103
  }, {
    "from": 62,
    "label": "initializes",
    "to": 104
  }, {
    "from": 104,
    "label": "assigns",
    "to": 105
  }, {
    "from": 62,
    "label": "initializes",
    "to": 106
  }, {
    "from": 106,
    "label": "assigns",
    "to": 107
  }, {
    "from": 62,
    "label": "initializes",
    "to": 108
  }, {
    "from": 62,
    "label": "initializes",
    "to": 109
  }, {
    "from": 62,
    "label": "initializes",
    "to": 110
  }, {
    "from": 62,
    "label": "initializes",
    "to": 111
  }, {
    "from": 62,
    "label": "initializes",
    "to": 112
  }, {
    "from": 62,
    "label": "initializes",
    "to": 113
  }, {
    "from": 62,
    "label": "initializes",
    "to": 114
  }, {
    "from": 62,
    "label": "initializes",
    "to": 115
  }, {
    "from": 115,
    "label": "assigns",
    "to": 116
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "lopcodes",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function debugf() end",
    "type": "function"
  }, {
    "id": 3,
    "text": "function luaP:ISK(x) return x >= self.BITRK end",
    "type": "function"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "function luaP:RKASK(x)\r\n   if x < self.BITRK then return x+self.BITRK else return x end\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "if x < self.BITRK then return x+self.BITRK else return x end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function luaP:GET_OPCODE(i) return self.ROpCode[i.OP] end",
    "type": "function"
  }, {
    "id": 9,
    "text": "function luaP:SET_OPCODE(i, o) i.OP = self.OpCode[o] end",
    "type": "function"
  }, {
    "id": 10,
    "text": "i.OP = self.OpCode[o]",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "function luaP:GETARG_A(i) return i.A end",
    "type": "function"
  }, {
    "id": 12,
    "text": "function luaP:SETARG_A(i, u) i.A = u end",
    "type": "function"
  }, {
    "id": 13,
    "text": "i.A = u",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "function luaP:GETARG_B(i) return i.B end",
    "type": "function"
  }, {
    "id": 15,
    "text": "function luaP:SETARG_B(i, b) i.B = b end",
    "type": "function"
  }, {
    "id": 16,
    "text": "i.B = b",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "function luaP:GETARG_C(i) return i.C end",
    "type": "function"
  }, {
    "id": 18,
    "text": "function luaP:SETARG_C(i, b) i.C = b end",
    "type": "function"
  }, {
    "id": 19,
    "text": "i.C = b",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "function luaP:GETARG_Bx(i) return i.Bx end",
    "type": "function"
  }, {
    "id": 21,
    "text": "function luaP:SETARG_Bx(i, b) i.Bx = b end",
    "type": "function"
  }, {
    "id": 22,
    "text": "i.Bx = b",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "function luaP:GETARG_sBx(i) return i.Bx - self.MAXARG_sBx end",
    "type": "function"
  }, {
    "id": 24,
    "text": "function luaP:SETARG_sBx(i, b) i.Bx = b + self.MAXARG_sBx end",
    "type": "function"
  }, {
    "id": 25,
    "text": "i.Bx = b + self.MAXARG_sBx",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "function luaP:CREATE_ABC(o,a,b,c)\r\n  return {OP = self.OpCode[o], A = a, B = b, C = c}\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function luaP:CREATE_ABx(o,a,bc)\r\n  return {OP = self.OpCode[o], A = a, Bx = bc}\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function luaP:Instruction(i)\r\n      --FIXME\r\n   end",
    "type": "function"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "local function keep (x, n) return x % p2[n+1] end",
    "type": "function"
  }, {
    "id": 33,
    "text": "local function srb (x,n) return math.floor (x / p2[n+1]) end",
    "type": "function"
  }, {
    "id": 34,
    "text": "local function slb (x,n) return x * p2[n+1] end",
    "type": "function"
  }, {
    "id": 35,
    "text": "function luaP:Instruction(i)\r\n      -- printf(\"Instr->string: %s %s\", self.opnames[i.OP], table.tostring(i))\r\n      local c0, c1, c2, c3\r\n      -- change to OP/A/B/C format if needed\r\n      if i.Bx then i.C = keep (i.Bx, 9); i.B = srb (i.Bx, 9) end\r\n      -- c0 = 6B from opcode + 2LSB from A (flushed to MSB)\r\n      c0 = i.OP + slb (keep (i.A, 2), 6) \r\n      -- c1 = 6MSB from A + 2LSB from C (flushed to MSB)\r\n      c1 = srb (i.A, 2) + slb (keep (i.C, 2), 6)\r\n      -- c2 = 7MSB from C + 1LSB from B (flushed to MSB)\r\n      c2 = srb (i.C, 2) + slb (keep (i.B, 1), 7)\r\n      -- c3 = 8MSB from B\r\n      c3 = srb (i.B, 1)\r\n      --printf (\"Instruction:   %s %s\", self.opnames[i.OP], tostringv (i))\r\n      --printf (\"Bin encoding:  %x %x %x %x\", c0, c1, c2, c3)  \r\n      return string.char(c0, c1, c2, c3)\r\n   end",
    "type": "function"
  }, {
    "id": 36,
    "text": "local c0, c1, c2, c3",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "if i.Bx then i.C = keep (i.Bx, 9); i.B = srb (i.Bx, 9) end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "i.C = keep (i.Bx, 9)",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "i.B = srb (i.Bx, 9)",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "c0 = i.OP + slb (keep (i.A, 2), 6)",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "c1 = srb (i.A, 2) + slb (keep (i.C, 2), 6)",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "c2 = srb (i.C, 2) + slb (keep (i.B, 1), 7)",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "c3 = srb (i.B, 1)",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function luaP:DecodeInst(x)\r\n  error \"Not implemented\"\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "error \"Not implemented\"",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function luaP:getOpMode(m)\r\n   --printv(m)\r\n   --printv(self.OpCode[m])\r\n   --printv(self.opmodes [self.OpCode[m]+1])\r\n   return self.OpMode[tonumber(string.sub(self.opmodes[self.OpCode[m] + 1], 7, 7))]\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function luaP:testOpMode(m, b)\r\n  return (string.sub(self.opmodes[self.OpCode[m] + 1], self[b], self[b]) == \"1\")\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "",
    "type": "function container"
  }, {
    "id": 53,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 54,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 55,
    "text": "floor",
    "type": "global function"
  }, {
    "id": 56,
    "text": "gfind",
    "type": "global function"
  }, {
    "id": 57,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 58,
    "text": "char",
    "type": "global function"
  }, {
    "id": 59,
    "text": "ldexp",
    "type": "global function"
  }, {
    "id": 60,
    "text": "error",
    "type": "global function"
  }, {
    "id": 61,
    "text": "module",
    "type": "global function"
  }, {
    "id": 62,
    "text": "",
    "type": "variable container"
  }, {
    "id": 63,
    "text": "",
    "type": "require container"
  }, {
    "id": 64,
    "text": "",
    "type": "local variable"
  }, {
    "id": 65,
    "text": "",
    "type": "number"
  }, {
    "id": 66,
    "text": "",
    "type": "global variable"
  }, {
    "id": 67,
    "text": "",
    "type": "n/a"
  }, {
    "id": 68,
    "text": "",
    "type": "global variable"
  }, {
    "id": 69,
    "text": "",
    "type": "n/a"
  }, {
    "id": 70,
    "text": "",
    "type": "global variable"
  }, {
    "id": 71,
    "text": "",
    "type": "global variable"
  }, {
    "id": 72,
    "text": "",
    "type": "global variable"
  }, {
    "id": 73,
    "text": "",
    "type": "n/a"
  }, {
    "id": 74,
    "text": "",
    "type": "global variable"
  }, {
    "id": 75,
    "text": "",
    "type": "global variable"
  }, {
    "id": 76,
    "text": "",
    "type": "global variable"
  }, {
    "id": 77,
    "text": "",
    "type": "n/a"
  }, {
    "id": 78,
    "text": "",
    "type": "global variable"
  }, {
    "id": 79,
    "text": "",
    "type": "n/a"
  }, {
    "id": 80,
    "text": "",
    "type": "global variable"
  }, {
    "id": 81,
    "text": "",
    "type": "n/a"
  }, {
    "id": 82,
    "text": "",
    "type": "global variable"
  }, {
    "id": 83,
    "text": "",
    "type": "n/a"
  }, {
    "id": 84,
    "text": "",
    "type": "global variable"
  }, {
    "id": 85,
    "text": "",
    "type": "n/a"
  }, {
    "id": 86,
    "text": "",
    "type": "global variable"
  }, {
    "id": 87,
    "text": "",
    "type": "n/a"
  }, {
    "id": 88,
    "text": "",
    "type": "global variable"
  }, {
    "id": 89,
    "text": "",
    "type": "n/a"
  }, {
    "id": 90,
    "text": "",
    "type": "global variable"
  }, {
    "id": 91,
    "text": "",
    "type": "n/a"
  }, {
    "id": 92,
    "text": "",
    "type": "global variable"
  }, {
    "id": 93,
    "text": "",
    "type": "n/a"
  }, {
    "id": 94,
    "text": "",
    "type": "global variable"
  }, {
    "id": 95,
    "text": "",
    "type": "n/a"
  }, {
    "id": 96,
    "text": "",
    "type": "global variable"
  }, {
    "id": 97,
    "text": "",
    "type": "n/a"
  }, {
    "id": 98,
    "text": "",
    "type": "global variable"
  }, {
    "id": 99,
    "text": "",
    "type": "n/a"
  }, {
    "id": 100,
    "text": "",
    "type": "global variable"
  }, {
    "id": 101,
    "text": "",
    "type": "n/a"
  }, {
    "id": 102,
    "text": "",
    "type": "global variable"
  }, {
    "id": 103,
    "text": "",
    "type": "n/a"
  }, {
    "id": 104,
    "text": "",
    "type": "global variable"
  }, {
    "id": 105,
    "text": "",
    "type": "n/a"
  }, {
    "id": 106,
    "text": "",
    "type": "global variable"
  }, {
    "id": 107,
    "text": "",
    "type": "n/a"
  }, {
    "id": 108,
    "text": "",
    "type": "global variable"
  }, {
    "id": 109,
    "text": "",
    "type": "global variable"
  }, {
    "id": 110,
    "text": "",
    "type": "global variable"
  }, {
    "id": 111,
    "text": "",
    "type": "global variable"
  }, {
    "id": 112,
    "text": "",
    "type": "global variable"
  }, {
    "id": 113,
    "text": "",
    "type": "global variable"
  }, {
    "id": 114,
    "text": "",
    "type": "global variable"
  }, {
    "id": 115,
    "text": "",
    "type": "global variable"
  }, {
    "id": 116,
    "text": "",
    "type": "n/a"
  } ]
}